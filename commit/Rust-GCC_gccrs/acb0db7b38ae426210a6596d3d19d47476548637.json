{"sha": "acb0db7b38ae426210a6596d3d19d47476548637", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiMGRiN2IzOGFlNDI2MjEwYTY1OTZkM2QxOWQ0NzQ3NjU0ODYzNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-04-16T18:30:48Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-04-16T18:30:48Z"}, "message": "toplev.c (output_lang_identify): Delete.\n\n\t* toplev.c (output_lang_identify): Delete.\n\t(compile_file): Don't call ASM_IDENTIFY_GCC or ASM_IDENTIFY_LANGUAGE.\n\tDon't generate gcc2_compiled. label.  Don't emit a nop if profiling.\n\tIf IDENT_ASM_OP is defined, emit an .ident \"GCC (GNU) <version>\"\n\tafter calling ASM_FILE_END.\n\n\t* dbxout.c (dbxout_init): Don't call ASM_IDENTIFY_GCC_AFTER_SOURCE.\n\tInstead, unconditionally emit an N_OPT stab with string equal\n\tto STABS_GCC_MARKER, which defaults to \"gcc2_compiled.\"\n\n\t* defaults.h: Don't provide default for ASM_IDENTIFY_LANGUAGE.\n\n\t* config/dbxelf.h, config/freebsd.h, config/nextstep.h,\n\tconfig/psos.h, config/ptx4.h, config/1750a/1750a.h,\n\tconfig/alpha/alpha.h, config/alpha/elf.h, config/arc/arc.h,\n\tconfig/arm/aof.h, config/arm/coff.h, config/arm/elf.h,\n\tconfig/arm/linux-elf.h, config/avr/avr.h, config/d30v/d30v.h,\n\tconfig/dsp16xx/dsp16xx.h, config/h8300/h8300.h,\n\tconfig/i370/i370.h, config/i386/beos-elf.h,\n\tconfig/i386/osf1elf.h, config/i386/osfrose.h,\n\tconfig/ia64/sysv4.h, config/m68k/3b1.h, config/m68k/auxgas.h,\n\tconfig/m68k/crds.h, config/m68k/hp320.h, config/m68k/m68kv4.h,\n\tconfig/m68k/mot3300.h, config/m68k/news.h, config/m68k/sgs.h,\n\tconfig/m68k/tower-as.h, config/mcore/mcore-elf.h,\n\tconfig/mips/iris6.h, config/mips/osfrose.h,\n\tconfig/mips/sni-svr4.h, config/pa/som.h, config/pdp11/pdp11.h,\n\tconfig/sparc/sp64-elf.h:\n\tDelete definitions of any or all of: ASM_IDENTIFY_GCC,\n\tASM_IDENTIFY_GCC_AFTER_SOURCE, and ASM_IDENTIFY_LANGUAGE.\n\n\t* config/elfos.h, config/freebsd.h, config/linux.h,\n\tconfig/alpha/elf.h, config/arm/linux-elf.h, config/i386/i386elf.h,\n\tconfig/i386/ptx4-i.h, config/mips/gnu.h, config/mips/linux.h,\n\tconfig/sparc/linux.h, config/sparc/linux64.h: Delete definitions\n\tof ASM_FILE_START which merely emit a .version directive.  Delete\n\tdefinitions of ASM_FILE_END which merely emit an .ident directive.\n\n\t* config/avr/avr.h, config/vax/vax.h: Delete definition of\n\tASM_IDENTIFY_GCC and move part of its logic into\n\tASM_FILE_START.\n\n\t* config/i386/att.h, config/i386/gas.h, config/i386/linux.h,\n\tconfig/sparc/linux-aout.h: Don't emit .version directive in\n\tASM_FILE_START.\n\n\t* config/i386/dgux.c, config/m88k/m88k.c, config/sh/sh.c\n\t(output_file_start): Correct comment.\n\n\t* config/i386/osfrose.h: Don't emit trailing .ident directive.\n\t* config/m68k/mot3300.h: Override STABS_GCC_MARKER to \"gcc2_compiled%\"\n\tto match gdb.\n\t* config/pa/lib2funcs.asm: Delete gcc_compiled. label.\n\t* config/rs6000/aix.h: Correct comment.\n\n\t* config/i386/i386afe.h: Delete.\n\t* config.gcc: Remove references to i386afe.h.\n\n\t* tm.texi: Delete documentation of ASM_IDENTIFY_GCC.  The\n\tother macros deleted by this patch were undocumented.\n\nFrom-SVN: r41385", "tree": {"sha": "e05e04e392c2b0f2c0e55e48d7696acd0748b8fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e05e04e392c2b0f2c0e55e48d7696acd0748b8fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acb0db7b38ae426210a6596d3d19d47476548637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb0db7b38ae426210a6596d3d19d47476548637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb0db7b38ae426210a6596d3d19d47476548637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb0db7b38ae426210a6596d3d19d47476548637/comments", "author": null, "committer": null, "parents": [{"sha": "75d71b2f67a7b470e472233f944e90f301c46955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d71b2f67a7b470e472233f944e90f301c46955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d71b2f67a7b470e472233f944e90f301c46955"}], "stats": {"total": 843, "additions": 112, "deletions": 731}, "files": [{"sha": "628f5281d59fa0709ad2d414dc0fdf3e53bca631", "filename": "gcc/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -1,3 +1,65 @@\n+2001-04-16  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* toplev.c (output_lang_identify): Delete.\n+\t(compile_file): Don't call ASM_IDENTIFY_GCC or ASM_IDENTIFY_LANGUAGE.\n+\tDon't generate gcc2_compiled. label.  Don't emit a nop if profiling.\n+\tIf IDENT_ASM_OP is defined, emit an .ident \"GCC (GNU) <version>\"\n+\tafter calling ASM_FILE_END.\n+\n+\t* dbxout.c (dbxout_init): Don't call ASM_IDENTIFY_GCC_AFTER_SOURCE.\n+\tInstead, unconditionally emit an N_OPT stab with string equal\n+\tto STABS_GCC_MARKER, which defaults to \"gcc2_compiled.\"\n+\n+\t* defaults.h: Don't provide default for ASM_IDENTIFY_LANGUAGE.\n+\n+\t* config/dbxelf.h, config/freebsd.h, config/nextstep.h,\n+\tconfig/psos.h, config/ptx4.h, config/1750a/1750a.h,\n+\tconfig/alpha/alpha.h, config/alpha/elf.h, config/arc/arc.h,\n+\tconfig/arm/aof.h, config/arm/coff.h, config/arm/elf.h,\n+\tconfig/arm/linux-elf.h, config/avr/avr.h, config/d30v/d30v.h,\n+\tconfig/dsp16xx/dsp16xx.h, config/h8300/h8300.h,\n+\tconfig/i370/i370.h, config/i386/beos-elf.h,\n+\tconfig/i386/osf1elf.h, config/i386/osfrose.h,\n+\tconfig/ia64/sysv4.h, config/m68k/3b1.h, config/m68k/auxgas.h,\n+\tconfig/m68k/crds.h, config/m68k/hp320.h, config/m68k/m68kv4.h,\n+\tconfig/m68k/mot3300.h, config/m68k/news.h, config/m68k/sgs.h,\n+\tconfig/m68k/tower-as.h, config/mcore/mcore-elf.h,\n+\tconfig/mips/iris6.h, config/mips/osfrose.h,\n+\tconfig/mips/sni-svr4.h, config/pa/som.h, config/pdp11/pdp11.h,\n+\tconfig/sparc/sp64-elf.h:\n+\tDelete definitions of any or all of: ASM_IDENTIFY_GCC,\n+\tASM_IDENTIFY_GCC_AFTER_SOURCE, and ASM_IDENTIFY_LANGUAGE.\n+\n+\t* config/elfos.h, config/freebsd.h, config/linux.h,\n+\tconfig/alpha/elf.h, config/arm/linux-elf.h, config/i386/i386elf.h,\n+\tconfig/i386/ptx4-i.h, config/mips/gnu.h, config/mips/linux.h,\n+\tconfig/sparc/linux.h, config/sparc/linux64.h: Delete definitions\n+\tof ASM_FILE_START which merely emit a .version directive.  Delete\n+\tdefinitions of ASM_FILE_END which merely emit an .ident directive.\n+\n+\t* config/avr/avr.h, config/vax/vax.h: Delete definition of\n+\tASM_IDENTIFY_GCC and move part of its logic into\n+\tASM_FILE_START.\n+\n+\t* config/i386/att.h, config/i386/gas.h, config/i386/linux.h,\n+\tconfig/sparc/linux-aout.h: Don't emit .version directive in\n+\tASM_FILE_START.\n+\n+\t* config/i386/dgux.c, config/m88k/m88k.c, config/sh/sh.c\n+\t(output_file_start): Correct comment.\n+\n+\t* config/i386/osfrose.h: Don't emit trailing .ident directive.\n+\t* config/m68k/mot3300.h: Override STABS_GCC_MARKER to \"gcc2_compiled%\"\n+\tto match gdb.\n+\t* config/pa/lib2funcs.asm: Delete gcc_compiled. label.\n+\t* config/rs6000/aix.h: Correct comment.\n+\n+\t* config/i386/i386afe.h: Delete.\n+\t* config.gcc: Remove references to i386afe.h.\n+\n+\t* tm.texi: Delete documentation of ASM_IDENTIFY_GCC.  The\n+\tother macros deleted by this patch were undocumented.\n+\n Mon Apr 16 08:03:48 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.md (reload_outdi): Operand 0 must be a non hard register."}, {"sha": "ed888a91b6d207e44f35c48f31bf4454126fe1ff", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -900,7 +900,7 @@ i370-*-linux*)\n \t;;\n i[34567]86-*-chorusos*)\n \txm_defines='USG POSIX'\n-\ttm_file=\"i386/i386.h i386/att.h elfos.h i386/i386afe.h i386/i386elf.h i386/chorus.h\"\n+\ttm_file=\"i386/i386.h i386/att.h elfos.h i386/i386elf.h i386/chorus.h\"\n \ttmake_file=i386/t-i386elf\n \txmake_file=x-svr4\n \tcase x${enable_threads} in\n@@ -911,7 +911,7 @@ i[34567]86-*-chorusos*)\n \t;;\n i[34567]86-*-elf*)\n \txm_defines='USG POSIX'\n-\ttm_file=\"i386/i386.h i386/att.h elfos.h i386/i386afe.h i386/i386elf.h\"\n+\ttm_file=\"i386/i386.h i386/att.h elfos.h i386/i386elf.h\"\n \ttmake_file=i386/t-i386elf\n \txmake_file=x-svr4\n \t;;\n@@ -1023,7 +1023,7 @@ i[34567]86-*-freebsd[12] | i[34567]86-*-freebsd[12].* | i[34567]86-*-freebsd*aou\n \ttmake_file=t-freebsd\n \t;;\n i[34567]86-*-freebsd*)\n-\ttm_file=\"i386/i386.h i386/att.h svr4.h freebsd.h i386/i386afe.h i386/freebsd.h i386/perform.h\"\n+\ttm_file=\"i386/i386.h i386/att.h svr4.h freebsd.h i386/freebsd.h i386/perform.h\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \ttmake_file=t-freebsd\n \tgas=yes\n@@ -1083,7 +1083,7 @@ i[34567]86-*-linux*libc1)\t# Intel 80386's running GNU/Linux\n \t\t\t\t# with ELF format using the\n \t\t\t\t# GNU/Linux C library 5\n \txmake_file=x-linux\t\n-\ttm_file=\"i386/i386.h i386/att.h linux.h i386/i386afe.h i386/linux.h\"\n+\ttm_file=\"i386/i386.h i386/att.h linux.h i386/linux.h\"\n \ttmake_file=\"t-linux t-linux-gnulibc1 i386/t-crtstuff\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n@@ -1096,7 +1096,7 @@ i[34567]86-*-linux*)\t# Intel 80386's running GNU/Linux\n \t\t\t# with ELF format using glibc 2\n \t\t\t# aka GNU/Linux C library 6\n \txmake_file=x-linux\n-\ttm_file=\"i386/i386.h i386/att.h linux.h i386/i386afe.h i386/linux.h\"\n+\ttm_file=\"i386/i386.h i386/att.h linux.h i386/linux.h\"\n \ttmake_file=\"t-linux i386/t-crtstuff\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n@@ -1127,7 +1127,7 @@ i[34567]86-pc-msdosdjgpp*)\n \tesac\n \t;;\n i[34567]86-moss-msdos* | i[34567]86-*-moss*)\n-\ttm_file=\"i386/i386.h i386/att.h linux.h i386/i386afe.h i386/linux.h i386/moss.h\"\n+\ttm_file=\"i386/i386.h i386/att.h linux.h i386/linux.h i386/moss.h\"\n \ttmake_file=t-libc-ok\n \tgnu_ld=yes\n \tgas=yes"}, {"sha": "ea2e8bb5eee1ae655626a3a4775ecc63b7fedf37", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -1048,8 +1048,6 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \n /******************  Assembler output formatting  **********************/\n \n-#define ASM_IDENTIFY_GCC(FILE)  fputs (\"; gcc2_compiled:\\n\", FILE)\n-\n #define ASM_COMMENT_START  \";\"\n \n #define ASM_OUTPUT_FUNNAM(FILE,NAME)\t\\"}, {"sha": "3e449533e181ea27ed0166b5492ebb9ab0fa4c6e", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -1930,15 +1930,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Control the assembler format that we output.  */\n \n-/* We don't emit these labels, so as to avoid getting linker errors about\n-   missing exception handling info.  If we emit a gcc_compiled. label into\n-   text, and the file has no code, then the DEC assembler gives us a zero\n-   sized text section with no associated exception handling info.  The\n-   DEC linker sees this text section, and gives a warning saying that\n-   the exception handling info is missing.  */\n-#define ASM_IDENTIFY_GCC(x)\n-#define ASM_IDENTIFY_LANGUAGE(x)\n-\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n "}, {"sha": "700f2c530ed707446f1340874350a0898c4953a5", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -66,31 +66,9 @@ do {\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n } while (0)\n \n-/* Attach a special .ident directive to the end of the file to identify\n-   the version of GCC which compiled this code.  The format of the\n-   .ident string is patterned after the ones produced by native svr4\n-   C compilers.  */\n-\n #undef  IDENT_ASM_OP\n #define IDENT_ASM_OP \"\\t.ident\\t\"\n \n-#ifdef IDENTIFY_WITH_IDENT\n-#undef  ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(FILE) /* nothing */\n-#undef  ASM_IDENTIFY_LANGUAGE\n-#define ASM_IDENTIFY_LANGUAGE(FILE)\t\t\t\\\n- fprintf(FILE, \"%s\\\"GCC (%s) %s\\\"\\n\", IDENT_ASM_OP,\t\\\n-\t lang_identify(), version_string)\n-#else\n-#undef  ASM_FILE_END\n-#define ASM_FILE_END(FILE)\t\t\t\t\t\\\n-do {\t\t\t\t \t\t\t\t\\\n-     if (!flag_no_ident)\t\t\t\t\t\\\n-\tfprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\t\\\n-\t\t IDENT_ASM_OP, version_string);\t\t\t\\\n-   } while (0)\n-#endif\n-\n /* Allow #sccs in preprocessor.  */\n #define SCCS_DIRECTIVE\n "}, {"sha": "04121fdc7076f7b251b390a9772fa6b18b9bba57", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -1260,15 +1260,6 @@ do {\t\t\t\t\t\t\t\\\n #undef ASM_FILE_START\n #define ASM_FILE_START(FILE) arc_asm_file_start (FILE)\n \n-/* A C statement to output assembler commands which will identify the\n-   object file as having been compiled with GNU CC (or another GNU\n-   compiler).  */\n-#undef ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(FILE) /* nothing */\n-\n-/* Needed because we define ASM_IDENTIFY_GCC.  */\n-#define ASM_IDENTIFY_LANGUAGE(FILE) output_lang_identify (FILE)\n-\n /* A C string constant describing how to begin a comment in the target\n    assembler language.  The compiler assumes that the comment will\n    end at the end of the line.  */"}, {"sha": "f10b7c45cb274754ca97914b54631377418ff928", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -220,8 +220,6 @@ do\t\t\t\t\t\\\n   fputs (\"\\tEND\\n\", (STREAM));\t\t\\\n } while (0);\n \n-#define ASM_IDENTIFY_GCC(STREAM) fputs (\"|gcc2_compiled.|\\n\", (STREAM))\n-\n #define ASM_COMMENT_START \";\"\n \n #define ASM_APP_ON \"\""}, {"sha": "6265691e352b9a1121ec93dc120e33f5616db1d0", "filename": "gcc/config/arm/coff.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -57,13 +57,6 @@ Boston, MA 02111-1307, USA.  */\n /* A C statement to output assembler commands which will identify the\n    object file as having been compiled with GNU CC (or another GNU\n    compiler).  */\n-/* Define this to NULL so we don't get anything.\n-   We have ASM_IDENTIFY_LANGUAGE.\n-   Also, when using stabs, gcc2_compiled must be a stabs entry, not an\n-   ordinary symbol, or gdb won't see it.  The stabs entry must be\n-   before the N_SO in order for gdb to find it.  */\n-#define ASM_IDENTIFY_GCC(STREAM) \t\t\t\t\\\n-  fprintf (STREAM, \"%sgcc2_compiled.:\\n\", LOCAL_LABEL_PREFIX )\n \n /* This outputs a lot of .req's to define alias for various registers.\n    Let's try to avoid this.  */"}, {"sha": "bb7be334c1aa4849a9ac572cbc6fd63600b93cea", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -198,19 +198,6 @@ Boston, MA 02111-1307, USA.  */\n   arm_valid_machine_decl_attribute (DECL, IDENTIFIER, ARGS)\n \f\n \n-/* A C statement to output assembler commands which will identify the\n-   object file as having been compiled with GNU CC (or another GNU\n-   compiler).  */\n-/* Define this to NULL so we don't get anything.\n-   We have ASM_IDENTIFY_LANGUAGE.\n-   Also, when using stabs, gcc2_compiled must be a stabs entry, not an\n-   ordinary symbol, or gdb won't see it.  The stabs entry must be\n-   before the N_SO in order for gdb to find it.  */\n-#ifndef ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(STREAM) \t\t\t\t\\\n-  fprintf (STREAM, \"%sgcc2_compiled.:\\n\", LOCAL_LABEL_PREFIX )\n-#endif\n-\n /* This outputs a lot of .req's to define alias for various registers.\n    Let's try to avoid this.  */\n #ifndef ASM_FILE_START"}, {"sha": "acaa71d6c9fb566f28c3de3f3ee3712e88ccfb32", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -92,27 +92,11 @@ Boston, MA 02111-1307, USA.  */\n #define USER_LABEL_PREFIX \t\"\"\t/* For ELF the default is no underscores */\n #define LOCAL_LABEL_PREFIX \t\".\"\n \n-/* Attach a special .ident directive to the end of the file to identify\n-   the version of GCC which compiled this code.  */\n #define IDENT_ASM_OP \t\"\\t.ident\\t\"\n \n /* Output #ident as a .ident.  */\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n   fprintf (FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n-  \n-#ifdef IDENTIFY_WITH_IDENT\n-#define ASM_IDENTIFY_GCC(FILE) /* nothing */\n-#define ASM_IDENTIFY_LANGUAGE(FILE)\t\t\t\\\n- fprintf (FILE, \"%s\\\"GCC (%s) %s\\\"\\n\", IDENT_ASM_OP,\t\\\n-\t lang_identify (), version_string)\n-#else\n-#define ASM_FILE_END(FILE)\t\t\t\t\t\\\n-do {\t\t\t\t \t\t\t\t\\\n-     if (!flag_no_ident)\t\t\t\t\t\\\n-\tfprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\t\\\n-\t\t IDENT_ASM_OP, version_string);\t\t\t\\\n-   } while (0)\n-#endif\n \n /* Support const sections and the ctors and dtors sections for g++.\n    Note that there appears to be two different ways to support const"}, {"sha": "96f2872669e59d9214b5a54439d5dc1d882f73e4", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -3256,12 +3256,3 @@ extern struct rtx_def *ldi_reg_rtx;\n \n /* Get the standard ELF stabs definitions.  */\n #include \"dbxelf.h\"\n-\n-#undef ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(FILE)\t\t\t\t\\\n-do\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\\\n-    if (write_symbols != DBX_DEBUG)\t\t\t\\\n-      fputs (\"gcc2_compiled.:\\n\", FILE);\t\t\\\n-  }\t\t\t\t\t\t\t\\\n-while (0)"}, {"sha": "9a19f853c0d946d283357ac434edefc92b6ef2ca", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -2167,6 +2167,10 @@ dtors_section ()\t\t\t\t\t\t\t\\\n \n \n /* Overall Framework of an Assembler File.  */\n+/* We need to have a data section we can identify so that we can set\n+   the DP register back to a data pointer in the small memory model.\n+   This is only required for ISRs if we are paranoid that someone\n+   may have quietly changed this register on the sly.  */\n \n #define ASM_FILE_START(FILE)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n@@ -2189,18 +2193,9 @@ dtors_section ()\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\\\n       output_quoted_string (FILE, main_input_filename);\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n+    fputs (\"\\n\\t.data\\ndata_sec:\\n\", FILE);\t\t\t\\\n }\n \n-/* We need to have a data section we can identify so that we can set\n-   the DP register back to a data pointer in the small memory model.\n-   This is only required for ISRs if we are paranoid that someone\n-   may have quietly changed this register on the sly.  */\n-\n-#define ASM_IDENTIFY_GCC(FILE) \\\n-    if (! TARGET_TI) fputs (\"gcc2_compiled.:\\n\", FILE);\t\\\n-      fputs (\"\\t.data\\ndata_sec:\\n\", FILE);\n-\n #define ASM_COMMENT_START \";\"\n \n #define ASM_APP_ON \"\""}, {"sha": "4015227abaec9a3893d58aca16f20f4bdb02a96b", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -4071,28 +4071,6 @@ extern const char *d30v_branch_cost_string;\n    Defined in svr4.h.  */\n /* #define ASM_FILE_END(STREAM) */\n \n-/* A C statement to output assembler commands which will identify the object\n-   file as having been compiled with GNU CC (or another GNU compiler).\n-\n-   If you don't define this macro, the string `gcc_compiled.:' is output.  This\n-   string is calculated to define a symbol which, on BSD systems, will never be\n-   defined for any other reason.  GDB checks for the presence of this symbol\n-   when reading the symbol table of an executable.\n-\n-   On non-BSD systems, you must arrange communication with GDB in some other\n-   fashion.  If GDB is not used on your system, you can define this macro with\n-   an empty body.\n-\n-   Defined in svr4.h.  */\n-/* #define ASM_IDENTIFY_GCC(FILE) */\n-\n-/* Like ASM_IDENTIFY_GCC, but used when dbx debugging is selected to emit\n-   a stab the debugger uses to identify gcc as the compiler that is emitted\n-   after the stabs for the filename, which makes it easier for GDB to parse.\n-\n-   Defined in svr4.h.  */\n-/* #define ASM_IDENTIFY_GCC_AFTER_SOURCE(FILE) */\n-\n /* A C string constant describing how to begin a comment in the target\n    assembler language.  The compiler assumes that the comment will end at the\n    end of the line.  */"}, {"sha": "8a2c266a82f155f960b41aae08290bacc1aa8948", "filename": "gcc/config/dbxelf.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fdbxelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fdbxelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdbxelf.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -54,28 +54,6 @@ Boston, MA 02111-1307, USA.  */\n #define DBX_CONTIN_LENGTH 0\n #endif\n \n-/* When using stabs, gcc2_compiled must be a stabs entry, not an\n-   ordinary symbol, or gdb won't see it.  Furthermore, since gdb reads\n-   the input piecemeal, starting with each N_SO, it's a lot easier if\n-   the gcc2 flag symbol is *after* the N_SO rather than before it.  So\n-   we emit an N_OPT stab there.  */\n-\n-#define ASM_IDENTIFY_GCC(FILE)\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (write_symbols != DBX_DEBUG)\t\t\t\t\t\\\n-      fputs (\"gcc2_compiled.:\\n\", FILE);\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-#define ASM_IDENTIFY_GCC_AFTER_SOURCE(FILE)\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (write_symbols == DBX_DEBUG)\t\t\t\t\t\\\n-      fputs (\"\\t.stabs\\t\\\"gcc2_compiled.\\\", 0x3c, 0, 0, 0\\n\", FILE);\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n /* Like block addresses, stabs line numbers are relative to the\n    current function.  */\n "}, {"sha": "8aa0556800b9cb5226c37f13d0400f5d4ec11cdf", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -1599,9 +1599,6 @@ const_section ()                                                   \\\n /* Output at beginning of assembler file.  */\n #define ASM_FILE_START(FILE) dsp16xx_file_start () \n \n-/* Prevent output of .gcc_compiled */\n-#define ASM_IDENTIFY_GCC(FILE)   \n-\n /* A C string constant describing how to begin a comment in the target\n    assembler language. */\n /* define ASM_COMMENT_START */"}, {"sha": "e7b9b811121307383d73fa21d36f300847132c1b", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -94,23 +94,8 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n   fprintf (FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n \n-/* Attach a special .ident directive to the end of the file to identify\n-   the version of GCC which compiled this code.  The format of the\n-   .ident string is patterned after the ones produced by native svr4\n-   C compilers.  */\n-\n #define IDENT_ASM_OP \"\\t.ident\\t\"\n \n-#undef ASM_FILE_END\n-#define ASM_FILE_END(FILE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t \t\t\t\\\n-      if (!flag_no_ident)\t\t\t\t\\\n-\tfprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\\\n-\t\t IDENT_ASM_OP, version_string);\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n #undef  ASM_BYTE_OP\n #define ASM_BYTE_OP\t\"\\t.byte\\t\"\n "}, {"sha": "18065c01cd8e3b70906a0a6374eb84a85cd78acf", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -101,9 +101,6 @@ Boston, MA 02111-1307, USA.  */\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-/* Attach a special .ident directive to the end of the file to identify\n-   the version of GCC which compiled this code.  The format of the .ident\n-   string is patterned after the ones produced by native SVR4 C compilers.  */\n #undef IDENT_ASM_OP\n #define IDENT_ASM_OP \"\\t.ident\\t\"\n \n@@ -112,20 +109,6 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_IDENT(FILE, NAME)\t\t\t\t\t\\\n   fprintf ((FILE), \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, (NAME));\n \n-#undef ASM_IDENTIFY_LANGUAGE\n-#define ASM_IDENTIFY_LANGUAGE(FILE)\t\t\t\t\t\\\n-  fprintf ((FILE), \"%s\\\"GCC (%s) %s\\\"\\n\", IDENT_ASM_OP,\t\t\t\\\n-\t   lang_identify (), version_string)\n-\n-#undef ASM_FILE_END\n-#define ASM_FILE_END(FILE)\t\t\t\t\t\t\\\n-do {\t\t\t\t \t\t\t\t\t\\\n-     if (!flag_no_ident)\t\t\t\t\t\t\\\n-\tfprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\t\t\\\n-\t\t IDENT_ASM_OP, version_string);\t\t\t\t\\\n-   } while (0)\n-\n-\n /* Miscellaneous parameters.  */\n \n /* Don't assume anything about the header files.  */"}, {"sha": "68747ac92ba09a744ff897f2ed2552bfb1deda1f", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -1068,8 +1068,6 @@ h8300_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n \f\n /* Control the assembler format that we output.  */\n \n-#define ASM_IDENTIFY_GCC(FILE) /* nothing */\n-\n /* Output at beginning/end of assembler file.  */\n \n #define ASM_FILE_START(FILE) asm_file_start(FILE)"}, {"sha": "6bb638b95a5bd969771af5bf61f31faeca8078d3", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -1091,7 +1091,6 @@ enum reg_class\n   fputs (\"\\tCSECT\\n\", FILE); }\n \n #define ASM_FILE_END(FILE) fputs (\"\\tEND\\n\", FILE);\n-#define ASM_IDENTIFY_GCC(FILE)\n #define ASM_COMMENT_START \"*\"\n #define ASM_APP_OFF \"\"\n #define ASM_APP_ON \"\""}, {"sha": "d8cf65a361b6101de3d0cbe84f889efa8a623783", "filename": "gcc/config/i386/att.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fatt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fatt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatt.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -56,7 +56,6 @@ do\t\t\t\t\t\t\t\t\\\n \toutput_file_directive (FILE, main_input_filename);\t\t\\\n \tif (target_flags & MASK_INTEL_SYNTAX)\t\t\t\t\\\n \t  fputs (\"\\t.intel_syntax\\n\", FILE);\t\t\t\t\\\n-\tfprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n   } while (0)\n \n /* Do use .optim by default on this machine.  */"}, {"sha": "2ed31de53adcc01050f22df89f1af544fea2b4fb", "filename": "gcc/config/i386/beos-elf.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbeos-elf.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -265,15 +265,3 @@ Boston, MA 02111-1307, USA.  */\n    without user intervention.  For instance, under Microsoft Windows\n    symbols must be explicitly imported from shared libraries (DLLs).  */\n #define MULTIPLE_SYMBOL_SPACES\n-\n-/* A C statement to output assembler commands which will identify the object\n-   file as having been compiled with GNU CC.  This isn't needed for BeOS\n-   because we use DWARF and DWARF has an DW_AT_producer tag that does the\n-   same thing.  BeOS debuggers, like bdb, that don't know about this hack\n-   can get confused when they find two symbols with the same address, and\n-   print the wrong one (gcc2_compiled) in things like backtraces.  The most\n-   likely ill effect of disabling this is that a BeOS port of gdb would not\n-   be able to tell that an executable was compiled with gcc if there was no\n-   DWARF info. */\n-#undef ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(FILE) "}, {"sha": "e9d2b51c3b7337e36bcbf3c25feebf330c065ce9", "filename": "gcc/config/i386/dgux.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fdgux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fdgux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.c?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -120,8 +120,8 @@ output_file_start (file, f_options, f_len, W_options, W_len)\n \n   output_file_directive (file, main_input_filename);\n   fprintf (file, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n-  /* Switch to the data section so that the coffsem symbol and the\n-     gcc2_compiled. symbol aren't in the text section.  */\n+  /* Switch to the data section so that the coffsem symbol\n+     isn't in the text section.  */\n   data_section ();\n \n   pos = fprintf (file, \"\\n// cc1 (%s) arguments:\", VERSION_STRING);"}, {"sha": "6c28bf9a0eec98977979e25d219e3b08f57673eb", "filename": "gcc/config/i386/gas.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgas.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -169,5 +169,4 @@ Boston, MA 02111-1307, USA.  */\n \tif (target_flags & MASK_INTEL_SYNTAX)\t\t\t\t\\\n \t  fputs (\"\\t.intel_syntax\\n\", FILE);\t\t\t\t\\\n         output_file_directive (FILE, main_input_filename);\t\t\\\n-        fputs (\"\\t.version\\t\\\"01.01\\\"\\n\", FILE);\t\t\t\\\n   } while (0)"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/config/i386/i386afe.h", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fi386afe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fi386afe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386afe.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -1,37 +0,0 @@\n-/* Copyright (C) 2001 Free Software Foundation, Inc.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA. */\n-\n-/* Irritatingly, config/elfos.h defines its own version of ASM_FILE_END,\n-   conflicting with a definition which we wish to have in i386/i386.h.\n-   We _really_ need to clean up the hodge-podge of random macro placement\n-   in the configury...  */\n-\n-/* This macro is invoked at the end of compilation.  It is used here to\n-   output code for -fpic that will load the return address into %ebx.  */\n-\n-#undef ASM_FILE_END\n-#define ASM_FILE_END(FILE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t \t\t\t\\\n-      ix86_asm_file_end (FILE);\t\t\t\t\\\n-      if (!flag_no_ident)\t\t\t\t\\\n-\tfprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\\\n-\t\t IDENT_ASM_OP, version_string);\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)"}, {"sha": "dc9d10c013a5dde3ba010dd8618ea2666bb743db", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -101,16 +101,6 @@ do { long value[3];\t\t\t\t\t\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n    } while (0)\n \n-/* Output at beginning of assembler file.  */\n-/* The .file command should always begin the output.  */\n-\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-\toutput_file_directive (FILE, main_input_filename);\t\t\\\n-\tfprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n-  } while (0)\n-\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) \\\n   (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])"}, {"sha": "0ec749d972cf3626f45c0f3bdeae8db318f24a73", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -30,7 +30,6 @@ Boston, MA 02111-1307, USA.  */\n \toutput_file_directive (FILE, main_input_filename);\t\t\\\n \tif (target_flags & MASK_INTEL_SYNTAX)\t\t\t\t\\\n \t  fputs (\"\\t.intel_syntax\\n\", FILE);\t\t\t\t\\\n-\tfprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n   } while (0)\n \n #undef TARGET_VERSION"}, {"sha": "5aee6fa19260a1376a12b01537c7b281749677ae", "filename": "gcc/config/i386/osf1elf.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fosf1elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fosf1elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosf1elf.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -85,21 +85,6 @@\n #undef  LIBGCC_SPEC\n #define LIBGCC_SPEC \"%{!shared:%{!symbolic:libgcc.a%s}}\"\n \n-/* A C statement to output assembler commands which will identify the object\n-  file as having been compile with GNU CC. We don't need or want this for\n-  OSF1. */\n-#undef ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(FILE)\n-\n-/* Identify the front-end which produced this file.  To keep symbol\n-   space down, and not confuse kdb, only do this if the language is\n-   not C.  */\n-#define ASM_IDENTIFY_LANGUAGE(STREAM)                                   \\\n-{                                                                       \\\n-  if (strcmp (lang_identify (), \"c\") != 0)                              \\\n-    output_lang_identify (STREAM);                                      \\\n-}\n-\n /* Specify size_t, ptrdiff_t, and wchar_t types.  */\n #undef  SIZE_TYPE\n #undef  PTRDIFF_TYPE"}, {"sha": "138ef67688b7b8d79040c903c4d94c4c877070a3", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -740,11 +740,6 @@ do\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n-/* Attach a special .ident directive to the end of the file to identify\n-   the version of GCC which compiled this code.  The format of the\n-   .ident string is patterned after the ones produced by native svr4\n-   C compilers.  */\n-\n #define IDENT_ASM_OP \"\\t.ident\\t\"\n \n /* Allow #sccs in preprocessor.  */\n@@ -759,98 +754,6 @@ do\t\t\t\t\t\t\t\t\t\\\n     if (HALF_PIC_P ())\t\t\t\t\t\t\t\\\n       HALF_PIC_FINISH (STREAM);\t\t\t\t\t\t\\\n     ix86_asm_file_end (STREAM);\t\t\t\t\t\t\\\n-    if (!flag_no_ident)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tchar *fstart = main_input_filename;\t\t\t\t\\\n-\tchar *fname;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (!fstart)\t\t\t\t\t\t\t\\\n-\t  fstart = \"<no file>\";\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tfname = fstart + strlen (fstart) - 1;\t\t\t\t\\\n-\twhile (fname > fstart && *fname != '/')\t\t\t\t\\\n-\t  fname--;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (*fname == '/')\t\t\t\t\t\t\\\n-\t  fname++;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tfprintf ((STREAM), \"%s\\\"GCC: (GNU) %s %s -O%d\",\t\t\t\\\n-\t\t IDENT_ASM_OP, version_string, fname, optimize);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (write_symbols == PREFERRED_DEBUGGING_TYPE)\t\t\t\\\n-\t  fprintf ((STREAM), \" -g%d\", (int)debug_info_level);\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\telse if (write_symbols == DBX_DEBUG)\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -gstabs%d\", (int)debug_info_level);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\telse if (write_symbols == DWARF_DEBUG)\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -gdwarf%d\", (int)debug_info_level);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\telse if (write_symbols != NO_DEBUG)\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -g??%d\", (int)debug_info_level);\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_omit_frame_pointer)\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -fomit-frame-pointer\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_strength_reduce)\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -fstrength-reduce\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_unroll_loops)\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -funroll-loops\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_schedule_insns)\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -fschedule-insns\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_schedule_insns_after_reload)\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -fschedule-insns2\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_force_mem)\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -fforce-mem\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_force_addr)\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -fforce-addr\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_inline_functions)\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -finline-functions\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_caller_saves)\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -fcaller-saves\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_pic)\t\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), (flag_pic > 1) ? \" -fPIC\" : \" -fpic\");\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_inhibit_size_directive)\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -finhibit-size-directive\");\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_gnu_linker)\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -fgnu-linker\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (profile_flag)\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -p\");\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (profile_block_flag)\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -a\");\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (TARGET_IEEE_FP)\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -mieee-fp\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (TARGET_HALF_PIC)\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -mhalf-pic\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (!TARGET_MOVE)\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -mno-move\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (TARGET_386)\t\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -m386\");\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\telse if (TARGET_486)\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -m486\");\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\telse\t\t\t\t\t\t\t\t\\\n-\t  fprintf ((STREAM), \" -munknown-machine\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tfprintf ((STREAM), (TARGET_ELF) ? \" -melf\\\"\\n\" : \" -mrose\\\"\\n\"); \\\n-      }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n@@ -866,21 +769,6 @@ while (0)\n    to do the search */\n #define LINK_LIBGCC_SPECIAL\n \n-/* A C statement to output assembler commands which will identify the object\n-  file as having been compile with GNU CC. We don't need or want this for\n-  OSF1. GDB doesn't need it and kdb doesn't like it */\n-#define ASM_IDENTIFY_GCC(FILE)\n-\n-/* Identify the front-end which produced this file.  To keep symbol\n-   space down, and not confuse kdb, only do this if the language is\n-   not C.  */\n-\n-#define ASM_IDENTIFY_LANGUAGE(STREAM)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (strcmp (lang_identify (), \"c\") != 0)\t\t\t\t\\\n-    output_lang_identify (STREAM);\t\t\t\t\t\\\n-}\n-\n /* Generate calls to memcpy, etc., not bcopy, etc. */\n #define TARGET_MEM_FUNCTIONS\n "}, {"sha": "9cee54cb951f906e356bf1dfcc6e2e5ff67d6280", "filename": "gcc/config/i386/ptx4-i.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fptx4-i.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -98,16 +98,6 @@ do { long value[3];\t\t\t\t\t\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n    } while (0)\n \n-/* Output at beginning of assembler file.  */\n-/* The .file command should always begin the output.  */\n-\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-\toutput_file_directive (FILE, main_input_filename);\t\t\\\n-\tfprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n-  } while (0)\n-\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n "}, {"sha": "235b7c802ebc1b5cb4e8727a3e67a832cdae156d", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -210,15 +210,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   fprintf ((FILE), \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\t\\\n } while (0)\n \n-#undef ASM_FILE_END\n-#define ASM_FILE_END(FILE)\t\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-     ix86_asm_file_end (FILE);\t\t\t\t\t\t\\\n-     if (!flag_no_ident)\t\t\t\t\t\t\\\n-\tfprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\t\t\\\n-\t\t IDENT_ASM_OP, version_string);\t\t\t\t\\\n-} while (0)\n-\n #undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\"}, {"sha": "99f561cb7abfb4f49011a672741a8d366983ad55", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -133,13 +133,6 @@ while (0)\n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE 32\n \n-/* We don't want any symbol at the beginning of the file.  This is defined in\n-   dbxelf.h which is included from elfos.h, so we need to undef/define it\n-   here.  */\n-\n-#undef ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(FILE)\n-\n /* We redefine this to use the ia64 .proc pseudo-op.  */\n \n #undef ASM_DECLARE_FUNCTION_NAME"}, {"sha": "1a69758010a5b1d1913cc71f1077e0a4ad424ed4", "filename": "gcc/config/linux.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -47,15 +47,6 @@ Boston, MA 02111-1307, USA.  */\n #undef MD_EXEC_PREFIX\n #undef MD_STARTFILE_PREFIX\n \n-/* Output at beginning of assembler file.  */\n-/* The .file command should always begin the output.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-\toutput_file_directive (FILE, main_input_filename);\t\t\\\n-\tfprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n-  } while (0)\n-\n /* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n    the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n    provides part of the support for getting C++ file-scope static"}, {"sha": "0dac874744f1c933cf0f3e0a476da68601b3c6ab", "filename": "gcc/config/m68k/3b1.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2F3b1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2F3b1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2F3b1.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -64,10 +64,6 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_FILE_START(FILE) \\\n output_file_directive ((FILE), main_input_filename)\n \n-/* Don't try to define `gcc_compiled.' since the assembler might not\n-   accept symbols with periods and GDB doesn't run on this machine anyway.  */\n-#define ASM_IDENTIFY_GCC(FILE)\n-\n /* Define __HAVE_68881__ in preprocessor if -m68881 is specified.\n    This will control the use of inline 68881 insns in certain macros.  */\n "}, {"sha": "c3c76352f936d12ea9706aee19a3e46c25ccbddc", "filename": "gcc/config/m68k/auxgas.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fauxgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fauxgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fauxgas.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -31,14 +31,6 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n   fprintf (FILE, \"\\t.ident \\\"%s\\\"\\n\", NAME);\n \n-#ifdef IDENTIFY_WITH_IDENT\n-/* Put the GCC identification somewhere nicer, I think.\n-   Does the COFF GDB use the \"gcc2_complied.\" symbol anyway? */\n-#define ASM_IDENTIFY_GCC(FILE) /* nothing */\n-#define ASM_IDENTIFY_LANGUAGE(FILE) \\\n-  fprintf (FILE, \"\\t.ident \\\"GCC (%s) %s\\\"\\n\", lang_identify(), version_string)\n-#endif\n-\n #ifdef USE_COLLECT2\n #undef ASM_OUTPUT_CONSTRUCTOR\n #undef ASM_OUTPUT_DESTRUCTOR"}, {"sha": "12f0fb797bc07bdc6e1da75daa2875768bd3a27d", "filename": "gcc/config/m68k/crds.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fcrds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fcrds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcrds.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -90,10 +90,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define TARGET_MEM_FUNCTIONS\n \n-/* Don't try to define `gcc_compiled.' since the assembler might not\n-   accept symbols with periods and GDB doesn't run on this machine anyway.  */\n-#define ASM_IDENTIFY_GCC(FILE)\n-\n /* Define __HAVE_68881__ in preprocessor if -m68881 is specified.\n    This will control the use of inline 68881 insns in certain macros.  */\n "}, {"sha": "64a0e0d2c905bffd8a79f0b992b131e1d5ddbb05", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -607,10 +607,6 @@ do { register int i;\t\t\t\\\n     { fprintf ((FILE), \"mov\"); (PTR) += 4; }\t\t\\\n }\n \n-/* Prevent output of `gcc_compiled.:'.  */\n-\n-#define ASM_IDENTIFY_GCC(FILE)\n-\n #else /* not HPUX_ASM */\n \n #undef FUNCTION_PROFILER"}, {"sha": "9bdc4877685f0dd770f68f6c060dd420a90a9858", "filename": "gcc/config/m68k/m68kv4.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kv4.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -27,11 +27,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"m68k/sgs.h\"\t\t/* The m68k/SVR4 assembler is SGS based */\n \n-/* The SGS assembler requires a special definition of\n-   ASM_IDENTIFY_GCC.  We combine the m68k/sgs.h and the svr4.h\n-   definitions below.  */\n-#undef ASM_IDENTIFY_GCC\n-\n #include \"svr4.h\"\t\t/* Pick up the generic SVR4 macros */\n \n /* See m68k.h.  7 means 68020 with 68881.  */\n@@ -40,19 +35,6 @@ Boston, MA 02111-1307, USA.  */\n #define\tTARGET_DEFAULT (MASK_BITFIELD|MASK_68881|MASK_68020)\n #endif\n \n-/* When using an SGS assembler, modify the name of the artificial label which\n-   identifies this file as having been compiled with gcc, and the macro that\n-   emits such a label in the assembly output, to use '%' rather than '.'  */\n-\n-#undef ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(FILE)\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (write_symbols != DBX_DEBUG)\t\t\t\t\t\\\n-      fputs (\"gcc2_compiled%:\\n\", FILE);\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n /*  Override the definition of NO_DOLLAR_IN_LABEL in svr4.h, for special\n     g++ assembler names.  When this is defined, g++ uses embedded '.'\n     characters and some m68k assemblers have problems with this.  The"}, {"sha": "fd914815d64f1538a5fff77e5e480d168906526d", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -38,6 +38,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"m68k/m68k.h\"\n \n+/* GDB expects a slightly different marker on this target.  */\n+#define STABS_GCC_MARKER \"gcc2_compiled%\"\n+\n /* See m68k.h.  0407 means 68020-68040.  */\n \n #ifndef TARGET_DEFAULT\n@@ -264,11 +267,6 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\n #endif /* USE_GAS */\n \n-/* The sysV68 assembler does not accept dots in labels.\n-   Let's use percent instead  */\n-\n-#define ASM_IDENTIFY_GCC(FILE)        fputs(\"gcc2_compiled%:\\n\", FILE)\n-\n /* Names to predefine in the preprocessor for this target machine.  */\n /* ihnp4!lmayk!lgm@eddie.mit.edu says mc68000 and m68k should not be here,\n    on the other hand I don't care what he says.  */"}, {"sha": "25e820e772bf9c999115226954ee4d34f56c1453", "filename": "gcc/config/m68k/news.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fnews.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fnews.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnews.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -139,11 +139,6 @@ Boston, MA 02111-1307, USA.  */\n \f\n #ifdef MOTOROLA\n \n-/* Don't try to define `gcc_compiled.' since the assembler does not\n-   accept symbols with periods.  This is no real loss since GDB only\n-   really needs it for parms passed in registers.  */\n-#define ASM_IDENTIFY_GCC(FILE)\n-\n #define FUNCTION_PROLOGUE(FILE, SIZE)     \\\n { register int regno;\t\t\t\t\t\t\\\n   register int mask = 0;\t\t\t\t\t\\"}, {"sha": "74716cd9e6a0a64b093762169f34c3dff92f37c7", "filename": "gcc/config/m68k/sgs.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fsgs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Fsgs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsgs.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -102,13 +102,6 @@ Boston, MA 02111-1307, USA.  */\n \n #endif /* defined SUPPORT_SUN_FPA */\n \n-/* When using an SGS assembler, modify the name of the artificial label which\n-   identifies this file as having been compiled with gcc, and the macro that\n-   emits such a label in the assembly output, to use '%' rather than '.' */\n-\n-#define ASM_IDENTIFY_GCC(FILE)\t\t\t\t\\\n- { fprintf ((FILE), \"%s:\\n\", \"gcc2_compiled%\"); }\n-\n /* This is how to output an assembler line defining an `int' constant.  */\n /* The SGS assembler doesn't understand \".word\". */\n "}, {"sha": "bb03b058a8272fe3f144151cd4c8af9e3fef0992", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -67,11 +67,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define SDB_DEBUGGING_INFO\n \n-/* This is only useful if gdb is changed, but doesn't harm anyway.  */\n-\n-#define ASM_IDENTIFY_GCC(FILE) \\\n-  fprintf (FILE, \"gcc2_compiled%%:\\n\")\n-\n /* All the ASM_OUTPUT macros need to conform to the Tower as syntax.  */\n \n #define ASM_OUTPUT_SOURCE_FILENAME(FILE, FILENAME) \\"}, {"sha": "2e788483166b393c042a78bf6fd9ab3e697cd068", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -1572,9 +1572,8 @@ output_file_start (file, f_options, f_len, W_options, W_len)\n       && TARGET_SVR4)\n     fprintf (file, \"%s\\n\", REQUIRES_88110_ASM_OP);\n   output_file_directive (file, main_input_filename);\n-  /* Switch to the data section so that the coffsem symbol and the\n-     gcc2_compiled. symbol aren't in the text section.  */\n-  data_section ();\n+  /* Switch to the data section so that the coffsem symbol\n+     isn't in the text section.  */\n   ASM_COFFSEM (file);\n \n   if (TARGET_IDENTIFY_REVISION)"}, {"sha": "6058d27dae2121699add02fa34101bf7f2af40e1", "filename": "gcc/config/mcore/mcore-elf.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -55,20 +55,6 @@ Boston, MA 02111-1307, USA.  */\n #undef  DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n \n-/* When using stabs, gcc2_compiled must be a stabs entry, not an\n-   ordinary symbol, or gdb won't see it.  The stabs entry must be\n-   before the N_SO in order for gdb to find it.  */\n-#undef  ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(FILE)\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (write_symbols != DBX_DEBUG)\t\t\t\t\t\\\n-      fputs (\"gcc2_compiled.:\\n\", FILE);\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fputs (\"\\t.stabs\\t\\\"gcc2_compiled.\\\", 0x3c, 0, 0, 0\\n\", FILE);\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n /* MCore defines .long and .short to NOT force any alignment.\n    This lets you misalign as much as you wish.  */\n #define\tUNALIGNED_INT_ASM_OP\t\"\\t.long\\t\""}, {"sha": "293f22341558470fe6d753a3db69a2bfbe8bb1df", "filename": "gcc/config/mips/gnu.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fmips%2Fgnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fmips%2Fgnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgnu.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -39,24 +39,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (MIPS GNU/ELF)\");\n \n-/* Output at beginning of assembler file.  */\n-/* The .file command should always begin the output.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-\tmips_asm_file_start (FILE);\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n-  } while (0)\n-\n-#undef ASM_FILE_END\n-#define ASM_FILE_END(FILE)\t\t\t\t\t\t\\\n-  do {\t\t\t\t \t\t\t\t\t\\\n-\tmips_asm_file_end(FILE);\t\t\t\t\t\\\n-\tif (!flag_no_ident)\t\t\t\t\t\t\\\n-\t  fprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\t\t\\\n-\t\t   IDENT_ASM_OP, version_string);\t\t\t\\\n-  } while (0)\n-\n #undef ASM_OUTPUT_SOURCE_LINE\n #define ASM_OUTPUT_SOURCE_LINE(FILE, LINE)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "1540c7434720617a15fa1b0203ce86c9995bcc59", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -128,11 +128,6 @@ Boston, MA 02111-1307, USA.  */\n #undef MACHINE_TYPE\n #define MACHINE_TYPE \"SGI running IRIX 6.x\"\n \n-/* The Irix 6.0.1 assembler doesn't like labels in the text section, so\n-   just avoid emitting them.  */\n-#define ASM_IDENTIFY_GCC(x) ((void)0)\n-#define ASM_IDENTIFY_LANGUAGE(x) ((void)0)\n-\n /* Irix 5 stuff that we don't need for Irix 6.  */\n /* ??? We do need this for the -mabi=32 switch though.  */\n #undef ASM_OUTPUT_UNDEF_FUNCTION"}, {"sha": "7e22c8149b43ee3cbbba1d35683937b46f983ad5", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -28,16 +28,6 @@ Boston, MA 02111-1307, USA.  */\n #undef MD_EXEC_PREFIX\n #undef MD_STARTFILE_PREFIX\n \n-/* Output at beginning of assembler file.  */\n-/* The .file command should always begin the output.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-\tmips_asm_file_start (FILE);\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n-  } while (0)\n-\n-\n /* Required to keep collect2.c happy */\n #undef OBJECT_FORMAT_COFF\n "}, {"sha": "26fc7448dabb04c0d7044b6a8900fa9233dabed7", "filename": "gcc/config/mips/osfrose.h", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fmips%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fmips%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fosfrose.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -115,32 +115,3 @@ Boston, MA 02111-1307, USA.  */\n \n /* Generate calls to memcpy, etc., not bcopy, etc.  */\n #define TARGET_MEM_FUNCTIONS\n-\n-/* A C statement to output assembler commands which will identify\n-   the object file as having been compiled with GNU CC (or another\n-   GNU compiler).\n-\n-   If you don't define this macro, the string `gcc2_compiled.:' is\n-   output.  This string is calculated to define a symbol which, on\n-   BSD systems, will never be defined for any other reason.  GDB\n-   checks for the presence of this symbol when reading the symbol\n-   table of an executable.\n-\n-   On non-BSD systems, you must arrange communication with GDB in\n-   some other fashion.  If GDB is not used on your system, you can\n-   define this macro with an empty body.\n-\n-   On OSF/1, gcc2_compiled. confuses the kernel debugger, so don't\n-   put it out.  */\n-\n-#define ASM_IDENTIFY_GCC(STREAM)\n-\n-/* Identify the front-end which produced this file.  To keep symbol\n-   space down, and not confuse kdb, only do this if the language is\n-   not C.  */\n-\n-#define ASM_IDENTIFY_LANGUAGE(STREAM)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (strcmp (lang_identify (), \"c\") != 0)\t\t\t\t\\\n-    output_lang_identify (STREAM);\t\t\t\t\t\\\n-}"}, {"sha": "702a4e427279c02220dcbf4543cd1e8db2cfe85b", "filename": "gcc/config/mips/sni-svr4.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsni-svr4.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -68,15 +68,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define NM_FLAGS\t\"-p\"\n \n-/* wir haben ein Problem, wenn in einem Assembler-File keine .text-section\n-   erzeugt wird. Dann landen diese Pseudo-Labels in irgendeiner anderen\n-   section, z.B. .reginfo. Das macht den ld sehr ungluecklich. */\n-\n-#define ASM_IDENTIFY_GCC(mw_stream) \\\n-\tfprintf(mw_stream, \"\\t.ident \\\"gcc2_compiled.\\\"\\n\");\n-\n-#define ASM_IDENTIFY_LANGUAGE(STREAM)\n-\n #define ASM_LONG\t\".word\\t\"\n #define ASM_GLOBAL\t\".rdata\\n\\t\\t.globl\\t\"\n "}, {"sha": "76e1a3505a6ef0da2f20b6af0541495ee6cecbb6", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -208,11 +208,6 @@ Boston, MA 02111-1307, USA.  */\n /* Define our object format type for crtstuff.c */\n #define OBJECT_FORMAT_MACHO\n \n-/* Don't use .gcc_compiled symbols to communicate with GDB;\n-   They interfere with numerically sorted symbol lists. */\n-\n-#undef\tASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(asm_out_file)\n #undef\tINIT_SECTION_ASM_OP\n #define INIT_SECTION_ASM_OP\n #undef\tINVOKE__main"}, {"sha": "bf632d5e2af1f9b13924df0d5ca8178094551a68", "filename": "gcc/config/pa/lib2funcs.asm", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fpa%2Flib2funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fpa%2Flib2funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Flib2funcs.asm?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -37,7 +37,6 @@\n \t.SUBSPA $MILLICODE$,QUAD=0,ALIGN=8,ACCESS=44,SORT=8\n \n \t.IMPORT $$dyncall,MILLICODE\n-; gcc_compiled.:\n \t.SPACE $TEXT$\n \t.SUBSPA $CODE$\n "}, {"sha": "9f688e99e1cd4d0d6f26d759b77eb9216b6dd987", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -26,12 +26,6 @@ Boston, MA 02111-1307, USA.  */\n    from other embedded stabs implementations.  */\n #undef DBX_USE_BINCL\n \n-#undef ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(FILE)\n-\n-#undef ASM_IDENTIFY_GCC_AFTER_SOURCE\n-#define ASM_IDENTIFY_GCC_AFTER_SOURCE(FILE)\n-\n /* We make the first line stab special to avoid adding several\n    gross hacks to GAS.  */\n #undef  ASM_OUTPUT_SOURCE_LINE"}, {"sha": "08b7849b0d90b9abf4eb72f58b41e699d02d5f2a", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -1245,10 +1245,6 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n   fprintf (FILE, \"\\tmov (sp)+, %s\\n\", reg_names[REGNO])     \t\\\n )\n \n-\n-#define ASM_IDENTIFY_GCC(FILE)\t\t\t\\\n-    fprintf(FILE, \"gcc_compiled:\\n\")\n-\n /* trampoline - how should i do it in separate i+d ? \n    have some allocate_trampoline magic??? \n "}, {"sha": "361c5bb86cf3926abe13286293d18516b3a7eba0", "filename": "gcc/config/psos.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fpsos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fpsos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpsos.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -67,18 +67,6 @@ Boston, MA 02111-1307, USA.\n \n #define TARGET_MEM_FUNCTIONS\n \n-\n-/* When using stabs, gcc2_compiled must be a stabs entry, not an\n-   ordinary symbol, or gdb won't see it.  The stabs entry must be\n-   before the N_SO in order for gdb to find it.  */\n-\n-#define ASM_IDENTIFY_GCC(FILE)\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    fputs (\".stabs \\\"gcc2_compiled.\\\", 0x3c, 0, 0, 0\\n\", FILE);\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n /* This is how we tell the assembler that a symbol is weak.  */\n \n #define ASM_WEAKEN_LABEL(FILE,NAME) \\"}, {"sha": "57b04645dab8f8a7fdb6254c75390409728daa3a", "filename": "gcc/config/ptx4.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fptx4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fptx4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fptx4.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -204,21 +204,6 @@ Boston, MA 02111-1307, USA.\n \n #undef DBX_REGISTER_NUMBER\n \n-/* When using stabs, gcc2_compiled must be a stabs entry, not an\n-   ordinary symbol, or gdb won't see it.  The stabs entry must be\n-   before the N_SO in order for gdb to find it.  */\n-\n-#undef ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(FILE)\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (write_symbols != DBX_DEBUG)\t\t\t\t\t\\\n-      fputs (\"gcc2_compiled.:\\n\", FILE);\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fputs (\"\\t.stabs\\t\\\"gcc2_compiled.\\\", 0x3c, 0, 0, 0\\n\", FILE);\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n /* Like block addresses, stabs line numbers are relative to the\n    current function.  */\n "}, {"sha": "82c8744fc99cb55036935561141609560edfae45", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -405,9 +405,6 @@ toc_section ()\t\t\t\t\t\t\\\n    Also, in order to output proper .bs/.es pairs, we need at least one static\n    [RW] section emitted.\n \n-   We then switch back to text to force the gcc2_compiled. label and the space\n-   allocated after it (when profiling) into the text section.\n-\n    Finally, declare mcount when profiling to make the assembler happy.  */\n \n #define ASM_FILE_START(FILE)\t\t\t\t\t\\"}, {"sha": "29391a66cefaa7dcd57f9a8a220cc4f9ee965f6e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -904,8 +904,8 @@ output_file_start (file)\n {\n   output_file_directive (file, main_input_filename);\n \n-  /* Switch to the data section so that the coffsem symbol and the\n-     gcc2_compiled. symbol aren't in the text section.  */\n+  /* Switch to the data section so that the coffsem symbol\n+     isn't in the text section.  */\n   data_section ();\n \n   if (TARGET_LITTLE_ENDIAN)"}, {"sha": "c40c79c124ed7a6dbc01afb80e9b907c40fbeb20", "filename": "gcc/config/sparc/linux-aout.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux-aout.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -42,11 +42,7 @@ Boston, MA 02111-1307, USA.  */\n /* Output at beginning of assembler file.  */\n /* The .file command should always begin the output.  */\n #undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)                                            \\\n-  do {                                                                  \\\n-        output_file_directive (FILE, main_input_filename);              \\\n-        fprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");                      \\\n-  } while (0)\n+#define ASM_FILE_START(FILE) output_file_directive (FILE, main_input_filename)\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC  \"%{pg:gcrt0.o%s} %{!pg:%{p:gcrt0.o%s} %{!p:crt0.o%s}} %{static:-static}\""}, {"sha": "236d0e9567986faa634adb4f576f309566e1b668", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -45,15 +45,6 @@ Boston, MA 02111-1307, USA.  */\n #undef MD_EXEC_PREFIX\n #undef MD_STARTFILE_PREFIX\n \n-/* Output at beginning of assembler file.  */\n-/* The .file command should always begin the output.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)                                            \\\n-  do {                                                                  \\\n-        output_file_directive (FILE, main_input_filename);              \\\n-        fprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");                      \\\n-  } while (0)\n-\n /* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n    the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n    provides part of the support for getting C++ file-scope static"}, {"sha": "94b59ee1a0f70a2642ff3f0e8a157462a771c621", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -44,15 +44,6 @@ Boston, MA 02111-1307, USA.  */\n    + MASK_STACK_BIAS + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU + MASK_LONG_DOUBLE_128)\n #endif\n \n-/* Output at beginning of assembler file.  */\n-/* The .file command should always begin the output.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)                                            \\\n-  do {                                                                  \\\n-        output_file_directive (FILE, main_input_filename);              \\\n-        fprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");                      \\\n-  } while (0)\n-  \n #undef ASM_CPU_DEFAULT_SPEC\n #define ASM_CPU_DEFAULT_SPEC \"-Av9a\"\n "}, {"sha": "cdd8f4c236119df5be0f84382a54b0fcdb3133bb", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -119,11 +119,6 @@ crtbegin.o%s \\\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n-/* Stabs doesn't use this, and it confuses a simulator.  */\n-/* ??? Need to see what DWARF needs, if anything.  */\n-#undef ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_GCC(FILE)\n-\n /* Define the names of various pseudo-ops used by the Sparc/svr4 assembler.  */\n \n #define UNALIGNED_DOUBLE_INT_ASM_OP\t\"\\t.uaxword\\t\""}, {"sha": "6fffc83f66ae6d682665f6e11f667ccec8503c1e", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -1018,8 +1018,17 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n /* Control the assembler format that we output.  */\n \n /* Output at beginning of assembler file.  */\n+/* When debugging, we want to output an extra dummy label so that gas\n+   can distinguish between D_float and G_float prior to processing the\n+   .stabs directive identifying type double.  */\n+\n+#define ASM_FILE_START(FILE) \\\n+  do {\t\t\t\t\t\t\t\t\\\n+    fputs (ASM_APP_OFF, FILE);\t\t\t\t\t\\\n+    if (write_symbols == DBX_DEBUG)\t\t\t\t\\\n+      fprintf (FILE, \"___vax_%c_doubles:\\n\", ASM_DOUBLE_CHAR);\t\\\n+  } while (0)\n \n-#define ASM_FILE_START(FILE) fprintf (FILE, \"#NO_APP\\n\");\n \n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n@@ -1208,17 +1217,6 @@ do { char dstr[30];\t\t\t\t\t\t\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* When debugging, we want to output an extra dummy label so that gas\n-   can distinguish between D_float and G_float prior to processing the\n-   .stabs directive identifying type double.  */\n-\n-#define ASM_IDENTIFY_LANGUAGE(FILE)\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    output_lang_identify (FILE);\t\t\t\t\\\n-    if (write_symbols == DBX_DEBUG)\t\t\t\t\\\n-      fprintf (FILE, \"___vax_%c_doubles:\\n\", ASM_DOUBLE_CHAR);\t\\\n-  } while (0)\n-\n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.\n \t.mask\t^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>\t#conservative entry mask"}, {"sha": "75bcbdc5bfac4bd6bdc5a93bf9183d22fdc769bf", "filename": "gcc/dbxout.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -124,6 +124,13 @@ Boston, MA 02111-1307, USA.  */\n #define FILE_NAME_JOINER \"/\"\n #endif\n \n+/* GDB needs to know that the stabs were generated by GCC.  We emit an\n+   N_OPT stab at the beginning of the source file to indicate this.\n+   The string is historical, and different on a very few targets.  */\n+#ifndef STABS_GCC_MARKER\n+#define STABS_GCC_MARKER \"gcc2_compiled.\"\n+#endif\n+\n /* Nonzero means if the type has methods, only output debugging\n    information if methods are actually written to the asm file.  This\n    optimization only works if the debugger can detect the special C++\n@@ -416,12 +423,9 @@ dbxout_init (asm_file, input_file_name, syms)\n   ASM_OUTPUT_INTERNAL_LABEL (asmfile, \"Ltext\", 0);\n #endif /* no DBX_OUTPUT_MAIN_SOURCE_FILENAME */\n \n-  /* Possibly output something to inform GDB that this compilation was by\n-     GCC.  It's easier for GDB to parse it when after the N_SO's.  This\n-     is used in Solaris 2.  */\n-#ifdef ASM_IDENTIFY_GCC_AFTER_SOURCE\n-  ASM_IDENTIFY_GCC_AFTER_SOURCE (asmfile);\n-#endif\n+  /* Emit an N_OPT stab to indicate that this file was compiled by GCC.  */\n+  fprintf (asmfile, \"%s\\\"%s\\\",%d,0,0,0\\n\",\n+\t   ASM_STABS_OP, STABS_GCC_MARKER, N_OPT);\n \n   lastfile = input_file_name;\n "}, {"sha": "008fa90cf788921852ee8f7b8c9055468ad1e9e7", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -102,16 +102,6 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n   while (0)\n #endif\n \n-#ifndef ASM_IDENTIFY_GCC\n-  /* Default the definition, only if ASM_IDENTIFY_GCC is not set,\n-     because if it is set, we might not want ASM_IDENTIFY_LANGUAGE\n-     outputting labels, if we do want it to, then it must be defined\n-     in the tm.h file.  */\n-#ifndef ASM_IDENTIFY_LANGUAGE\n-#define ASM_IDENTIFY_LANGUAGE(FILE) output_lang_identify (FILE);\n-#endif\n-#endif\n-\n /* This is how we tell the assembler to equate two values.  */\n #ifdef SET_ASM_OP\n #ifndef ASM_OUTPUT_DEF"}, {"sha": "fc74a257b9da02cb8e24301016db6e82aca8960e", "filename": "gcc/tm.texi", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -5539,22 +5539,6 @@ definition.\n On systems that use SDB, it is necessary to output certain commands;\n see @file{attasm.h}.\n \n-@findex ASM_IDENTIFY_GCC\n-@item ASM_IDENTIFY_GCC (@var{file})\n-A C statement to output assembler commands which will identify\n-the object file as having been compiled with GCC (or another\n-GNU compiler).\n-\n-If you don't define this macro, the string @samp{gcc_compiled.:}\n-is output.  This string is calculated to define a symbol which,\n-on BSD systems, will never be defined for any other reason.\n-GDB checks for the presence of this symbol when reading the\n-symbol table of an executable.\n-\n-On non-BSD systems, you must arrange communication with GDB in\n-some other fashion.  If GDB is not used on your system, you can\n-define this macro with an empty body.\n-\n @findex ASM_COMMENT_START\n @item ASM_COMMENT_START\n A C string constant describing how to begin a comment in the target"}, {"sha": "66cada9a5b0fef6a801c1ac155daecc81b28a361", "filename": "gcc/toplev.c", "status": "modified", "additions": 9, "deletions": 50, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0db7b38ae426210a6596d3d19d47476548637/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=acb0db7b38ae426210a6596d3d19d47476548637", "patch": "@@ -160,10 +160,6 @@ static const char *decl_name PARAMS ((tree, int));\n \n static void float_signal PARAMS ((int)) ATTRIBUTE_NORETURN;\n static void crash_signal PARAMS ((int)) ATTRIBUTE_NORETURN;\n-#ifdef ASM_IDENTIFY_LANGUAGE\n-/* This might or might not be used in ASM_IDENTIFY_LANGUAGE. */\n-static void output_lang_identify PARAMS ((FILE *)) ATTRIBUTE_UNUSED;\n-#endif\n static void compile_file PARAMS ((const char *));\n static void display_help PARAMS ((void));\n static void display_target_options PARAMS ((void));\n@@ -1792,21 +1788,6 @@ output_file_directive (asm_file, input_name)\n #endif\n }\n \f\n-#ifdef ASM_IDENTIFY_LANGUAGE\n-/* Routine to build language identifier for object file.  */\n-\n-static void\n-output_lang_identify (asm_out_file)\n-     FILE *asm_out_file;\n-{\n-  int len = strlen (lang_identify ()) + sizeof (\"__gnu_compiled_\") + 1;\n-  char *s = (char *) alloca (len);\n-\n-  sprintf (s, \"__gnu_compiled_%s\", lang_identify ());\n-  ASM_OUTPUT_LABEL (asm_out_file, s);\n-}\n-#endif\n-\n /* Routine to open a dump file.  Return true if the dump file is enabled.  */\n \n static int\n@@ -2280,18 +2261,6 @@ compile_file (name)\n \t  fprintf (asm_out_file, \"\\n\");\n \t}\n #endif\n-\n-      /* Output something to inform GDB that this compilation was by GCC.  */\n-#ifndef ASM_IDENTIFY_GCC\n-      fprintf (asm_out_file, \"gcc2_compiled.:\\n\");\n-#else\n-      ASM_IDENTIFY_GCC (asm_out_file);\n-#endif\n-\n-  /* Output something to identify which front-end produced this file.  */\n-#ifdef ASM_IDENTIFY_LANGUAGE\n-      ASM_IDENTIFY_LANGUAGE (asm_out_file);\n-#endif\n     } /* ! flag_syntax_only  */\n \n #ifndef ASM_OUTPUT_SECTION_NAME\n@@ -2319,25 +2288,6 @@ compile_file (name)\n     warning (\"-ffunction-sections may affect debugging on some targets.\");\n #endif\n \n-  /* ??? Note: There used to be a conditional here\n-      to call assemble_zeros without fail if DBX_DEBUGGING_INFO is defined.\n-      This was to guarantee separation between gcc_compiled. and\n-      the first function, for the sake of dbx on Suns.\n-      However, having the extra zero here confused the Emacs\n-      code for unexec, and might confuse other programs too.\n-      Therefore, I took out that change.\n-      In future versions we should find another way to solve\n-      that dbx problem.  -- rms, 23 May 93.  */\n-\n-  /* Don't let the first function fall at the same address\n-     as gcc_compiled., if profiling.  */\n-  if (profile_flag || profile_block_flag)\n-    {\n-      /* It's best if we can write a nop here since some\n-\t assemblers don't tolerate zeros in the text section.  */\n-      output_asm_insn (get_insn_template (CODE_FOR_nop, NULL), NULL_PTR);\n-    }\n-\n   /* If dbx symbol table desired, initialize writing it\n      and output the predefined types.  */\n   timevar_push (TV_SYMOUT);\n@@ -2473,6 +2423,15 @@ compile_file (name)\n   ASM_FILE_END (asm_out_file);\n #endif\n \n+  /* Attach a special .ident directive to the end of the file to identify\n+     the version of GCC which compiled this code.  The format of the .ident\n+     string is patterned after the ones produced by native SVR4 compilers.  */\n+#ifdef IDENT_ASM_OP\n+  if (!flag_no_ident)\n+    fprintf (asm_out_file, \"%s\\\"GCC: (GNU) %s\\\"\\n\",\n+\t     IDENT_ASM_OP, version_string);\n+#endif\n+\n   /* Language-specific end of compilation actions.  */\n  finish_syntax:\n   if (lang_hooks.finish)"}]}