{"sha": "da0553bcbfab23c4cf908092ea5cc29c454e157b", "node_id": "C_kwDOANBUbNoAKGRhMDU1M2JjYmZhYjIzYzRjZjkwODA5MmVhNWNjMjljNDU0ZTE1N2I", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-04-06T12:29:53Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-19T08:48:33Z"}, "message": "libproc_macro: Add literal ffi implementations\n\nAdd literal type related ffi functions implementation.\n\nChangeLog:\n\n\t* libgrust/libproc_macro/Makefile.am: Add literal.cc.\n\t* libgrust/libproc_macro/Makefile.in: Regenerate.\n\t* libgrust/libproc_macro/literal.h (Literal__drop): Implement\n\tdrop.\n\t(Literal__string): Constructor from a string function prototype.\n\t(Literal__byte_string): Constructor from a byte string function\n\tprototype.\n\t(Literal__from_string): Add function body, no implementation\n\tyet.\n\t* libgrust/libproc_macro/literal.cc: New file.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "426a71ab175714d20f18dc9ee88bc53437d478cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/426a71ab175714d20f18dc9ee88bc53437d478cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da0553bcbfab23c4cf908092ea5cc29c454e157b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0553bcbfab23c4cf908092ea5cc29c454e157b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0553bcbfab23c4cf908092ea5cc29c454e157b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0553bcbfab23c4cf908092ea5cc29c454e157b/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50583d42838b99cf89d2ac9b7ec5733cef41dcd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50583d42838b99cf89d2ac9b7ec5733cef41dcd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50583d42838b99cf89d2ac9b7ec5733cef41dcd1"}], "stats": {"total": 104, "additions": 101, "deletions": 3}, "files": [{"sha": "4bc7943c9031c3c08cb3e6adecbfada3bf2ea69e", "filename": "libgrust/libproc_macro/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0553bcbfab23c4cf908092ea5cc29c454e157b/libgrust%2Flibproc_macro%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0553bcbfab23c4cf908092ea5cc29c454e157b/libgrust%2Flibproc_macro%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2FMakefile.am?ref=da0553bcbfab23c4cf908092ea5cc29c454e157b", "patch": "@@ -51,7 +51,8 @@ AM_MAKEFLAGS = \\\n toolexeclib_LTLIBRARIES = libproc_macro.la\n \n libproc_macro_la_SOURCES = \\\n-\tproc_macro.cc\n+\tproc_macro.cc \\\n+\tliteral.cc\n \n include_HEADERS = \\\n \tproc_macro.h"}, {"sha": "57ace6a9e617bc6cc2e272c33c5eff01b437e067", "filename": "libgrust/libproc_macro/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0553bcbfab23c4cf908092ea5cc29c454e157b/libgrust%2Flibproc_macro%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0553bcbfab23c4cf908092ea5cc29c454e157b/libgrust%2Flibproc_macro%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2FMakefile.in?ref=da0553bcbfab23c4cf908092ea5cc29c454e157b", "patch": "@@ -138,7 +138,7 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \\\n \t\"$(DESTDIR)$(includedir)\"\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n libproc_macro_la_LIBADD =\n-am_libproc_macro_la_OBJECTS = proc_macro.lo\n+am_libproc_macro_la_OBJECTS = proc_macro.lo literal.lo\n libproc_macro_la_OBJECTS = $(am_libproc_macro_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\n@@ -385,7 +385,8 @@ AM_MAKEFLAGS = \\\n \n toolexeclib_LTLIBRARIES = libproc_macro.la\n libproc_macro_la_SOURCES = \\\n-\tproc_macro.cc\n+\tproc_macro.cc \\\n+\tliteral.cc\n \n include_HEADERS = \\\n \tproc_macro.h\n@@ -468,6 +469,7 @@ mostlyclean-compile:\n distclean-compile:\n \t-rm -f *.tab.c\n \n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/literal.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/proc_macro.Plo@am__quote@\n \n .cc.o:"}, {"sha": "a667fcb72fe2a9b39e17435a0b4548e3f69af49a", "filename": "libgrust/libproc_macro/literal.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0553bcbfab23c4cf908092ea5cc29c454e157b/libgrust%2Flibproc_macro%2Fliteral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0553bcbfab23c4cf908092ea5cc29c454e157b/libgrust%2Flibproc_macro%2Fliteral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fliteral.cc?ref=da0553bcbfab23c4cf908092ea5cc29c454e157b", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2023 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU Proc Macro Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"literal.h\"\n+#include <cstring>\n+\n+extern \"C\" {\n+\n+void\n+Literal__drop (Literal *lit)\n+{\n+  switch (lit->tag)\n+    {\n+    case STRING:\n+      delete lit->payload.string_payload.data;\n+      lit->payload.string_payload.len = 0;\n+      break;\n+    case BYTE_STRING:\n+      delete lit->payload.byte_string_payload.data;\n+      lit->payload.byte_string_payload.size = 0;\n+      break;\n+    case CHAR:\n+    case UNSIGNED:\n+    case SIGNED:\n+    case USIZE:\n+    case ISIZE:\n+    case FLOAT32:\n+    case FLOAT64:\n+      break;\n+    }\n+}\n+\n+Literal\n+Literal__string (const unsigned char *str, std::uint64_t len)\n+{\n+  unsigned char *data = new unsigned char[len];\n+  StringPayload str_payload = {data, len};\n+  std::memcpy (data, str, len);\n+  LiteralPayload payload;\n+  payload.string_payload = str_payload;\n+  return {STRING, payload};\n+}\n+\n+Literal\n+Literal__byte_string (const std::uint8_t *bytes, std::uint64_t len)\n+{\n+  std::uint8_t *data = new std::uint8_t[len];\n+  ByteStringPayload bstr_payload = {data, len};\n+  std::memcpy (data, bytes, len);\n+  LiteralPayload payload;\n+  payload.byte_string_payload = bstr_payload;\n+  return {BYTE_STRING, payload};\n+}\n+\n+bool\n+Literal__from_string (const unsigned char *str, std::uint64_t len, Literal *lit)\n+{\n+  // FIXME: implement this function with parser\n+  return false;\n+}\n+}"}, {"sha": "62a14522d1dbfaf9e6fa2252ffbfd47282d1e0b0", "filename": "libgrust/libproc_macro/literal.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0553bcbfab23c4cf908092ea5cc29c454e157b/libgrust%2Flibproc_macro%2Fliteral.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0553bcbfab23c4cf908092ea5cc29c454e157b/libgrust%2Flibproc_macro%2Fliteral.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fliteral.h?ref=da0553bcbfab23c4cf908092ea5cc29c454e157b", "patch": "@@ -158,4 +158,19 @@ struct Literal\n   LiteralPayload payload;\n };\n \n+extern \"C\" {\n+void\n+Literal__drop (Literal *lit);\n+\n+Literal\n+Literal__string (const unsigned char *str, std::uint64_t len);\n+\n+Literal\n+Literal__byte_string (const std::uint8_t *bytes, std::uint64_t len);\n+\n+bool\n+Literal__from_string (const unsigned char *str, std::uint64_t len,\n+\t\t      Literal *lit);\n+}\n+\n #endif /* ! LITERAL_H */"}]}