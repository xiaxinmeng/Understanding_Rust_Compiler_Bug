{"sha": "076963eb57db82bacc373d507b50459b40589c3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2OTYzZWI1N2RiODJiYWNjMzczZDUwN2I1MDQ1OWI0MDU4OWMzZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-02-07T17:53:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-02-07T17:53:44Z"}, "message": "genrecog.c (find_operand): add extra argument stop.\n\n\n\t* genrecog.c (find_operand): add extra argument stop.\n\t(validate_pattern): Verify that mach_dup is duplicating operand\n\tdefined lexically earlier.\n\nFrom-SVN: r77461", "tree": {"sha": "59215c0944e7d80025d884907196865c13a3bd91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59215c0944e7d80025d884907196865c13a3bd91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/076963eb57db82bacc373d507b50459b40589c3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076963eb57db82bacc373d507b50459b40589c3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/076963eb57db82bacc373d507b50459b40589c3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076963eb57db82bacc373d507b50459b40589c3e/comments", "author": null, "committer": null, "parents": [{"sha": "1197924d2b6814fdf2f3d6b90432824ccef43855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1197924d2b6814fdf2f3d6b90432824ccef43855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1197924d2b6814fdf2f3d6b90432824ccef43855"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "7ac030651c4c0311a240a1c0fff0b247340ad4a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076963eb57db82bacc373d507b50459b40589c3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076963eb57db82bacc373d507b50459b40589c3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=076963eb57db82bacc373d507b50459b40589c3e", "patch": "@@ -1,3 +1,9 @@\n+2004-02-07  Jan Hubicka  <jh@suse.cz>\n+\n+\t* genrecog.c (find_operand): add extra argument stop.\n+\t(validate_pattern): Verify that mach_dup is duplicating operand\n+\tdefined lexically earlier.\n+\n 2004-02-07  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config.gcc: Don't mention MAX_LONG_TYPE_SIZE."}, {"sha": "7bdc52659cea7ef1cb8ed17f8d7afa2e5ffc8801", "filename": "gcc/genrecog.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076963eb57db82bacc373d507b50459b40589c3e/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076963eb57db82bacc373d507b50459b40589c3e/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=076963eb57db82bacc373d507b50459b40589c3e", "patch": "@@ -232,7 +232,7 @@ static struct decision *new_decision\n static struct decision_test *new_decision_test\n   (enum decision_type, struct decision_test ***);\n static rtx find_operand\n-  (rtx, int);\n+  (rtx, int, rtx);\n static rtx find_matching_operand\n   (rtx, int);\n static void validate_pattern\n@@ -346,16 +346,19 @@ new_decision_test (enum decision_type type, struct decision_test ***pplace)\n   return test;\n }\n \n-/* Search for and return operand N.  */\n+/* Search for and return operand N, stop when reaching node STOP.  */\n \n static rtx\n-find_operand (rtx pattern, int n)\n+find_operand (rtx pattern, int n, rtx stop)\n {\n   const char *fmt;\n   RTX_CODE code;\n   int i, j, len;\n   rtx r;\n \n+  if (pattern == stop)\n+    return stop;\n+\n   code = GET_CODE (pattern);\n   if ((code == MATCH_SCRATCH\n        || code == MATCH_INSN\n@@ -372,7 +375,7 @@ find_operand (rtx pattern, int n)\n       switch (fmt[i])\n \t{\n \tcase 'e': case 'u':\n-\t  if ((r = find_operand (XEXP (pattern, i), n)) != NULL_RTX)\n+\t  if ((r = find_operand (XEXP (pattern, i), n, stop)) != NULL_RTX)\n \t    return r;\n \t  break;\n \n@@ -383,7 +386,8 @@ find_operand (rtx pattern, int n)\n \n \tcase 'E':\n \t  for (j = 0; j < XVECLEN (pattern, i); j++)\n-\t    if ((r = find_operand (XVECEXP (pattern, i, j), n)) != NULL_RTX)\n+\t    if ((r = find_operand (XVECEXP (pattern, i, j), n, stop))\n+\t\t!= NULL_RTX)\n \t      return r;\n \t  break;\n \n@@ -467,7 +471,17 @@ validate_pattern (rtx pattern, rtx insn, rtx set, int set_code)\n     {\n     case MATCH_SCRATCH:\n       return;\n-\n+    case MATCH_DUP:\n+    case MATCH_OP_DUP:\n+    case MATCH_PAR_DUP:\n+      if (find_operand (insn, XINT (pattern, 0), pattern) == pattern)\n+\t{\n+\t  message_with_line (pattern_lineno,\n+\t\t\t     \"operand %i duplicated before defined\",\n+\t\t\t     XINT (pattern, 0));\n+          error_count++;\n+\t}\n+      break;\n     case MATCH_INSN:\n     case MATCH_OPERAND:\n     case MATCH_OPERATOR:\n@@ -639,12 +653,12 @@ validate_pattern (rtx pattern, rtx insn, rtx set, int set_code)\n \tif (GET_CODE (dest) == MATCH_DUP\n \t    || GET_CODE (dest) == MATCH_OP_DUP\n \t    || GET_CODE (dest) == MATCH_PAR_DUP)\n-\t  dest = find_operand (insn, XINT (dest, 0));\n+\t  dest = find_operand (insn, XINT (dest, 0), NULL);\n \n \tif (GET_CODE (src) == MATCH_DUP\n \t    || GET_CODE (src) == MATCH_OP_DUP\n \t    || GET_CODE (src) == MATCH_PAR_DUP)\n-\t  src = find_operand (insn, XINT (src, 0));\n+\t  src = find_operand (insn, XINT (src, 0), NULL);\n \n \tdmode = GET_MODE (dest);\n \tsmode = GET_MODE (src);"}]}