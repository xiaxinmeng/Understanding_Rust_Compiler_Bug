{"sha": "81b47219535814188c5f40f9efb448c1cad02b92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiNDcyMTk1MzU4MTQxODhjNWY0MGY5ZWZiNDQ4YzFjYWQwMmI5Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-01-24T21:31:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-01-24T21:31:52Z"}, "message": "re PR bootstrap/19364 (embedded sparc does not bootstrap)\n\n\tPR bootstrap/19364\n\t* config.gcc (sparc-*-elf*): Remove sol2.h, sparc/sol2.h and\n\tsparc/elf.h, add sparc/sp-elf.h.\n\t(sparc-*-rtems*): Likewise.\n\t(sparclite-*-elf*): Remove sol2.h, sparc/sol2.h, sparc/elf.h and\n\ttm-dwarf2.h, add sparc/sp-elf.h.\n\t(sparc86x-*-elf): Likewise.\n\t(sparc64-*-elf*): Remove sol2.h, sparc/sol2.h and tm-dwarf2.h.\n\t* config/sparc/liteelf.h (TARGET_SUB_OS_CPP_BUILTINS): Rename into\n\tTARGET_OS_CPP_BUILTINS.\n\t* config/sparc/sp86x-elf (TARGET_SUB_OS_CPP_BUILTINS): Likewise.\n\t* config/sparc/rtemself.h (TARGET_SUB_OS_CPP_BUILTINS): Likewise.\n\tUndefine it.\n\t* config/sparc/openbsd64.h (NO_IMPLICIT_EXTERN_C): Undefine.\n\t* config/sparc/sp64-elf.h (NO_IMPLICIT_EXTERN_C): New macro.\n\t(SWITCH_TAKES_ARG): Likewise.\n\t(LOCAL_LABEL_PREFIX): Likewise.\n\t(ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\t(TARGET_N_FORMAT_TYPES): Delete.\n\t(TARGET_FORMAT_TYPES): Likewise.\n\t(ASM_DECLARE_FUNCTION_SIZE): Likewise.\n\t* config/sparc/elf.h: Delete.\n\t* config/sparc/sp-elf.h: New file.\n\nFrom-SVN: r94185", "tree": {"sha": "f4a1de7b7f72acabcce6c83aa64761c788d9deec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4a1de7b7f72acabcce6c83aa64761c788d9deec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81b47219535814188c5f40f9efb448c1cad02b92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b47219535814188c5f40f9efb448c1cad02b92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81b47219535814188c5f40f9efb448c1cad02b92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b47219535814188c5f40f9efb448c1cad02b92/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a2f1f06651ace284325fa449acf5babffd91a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2f1f06651ace284325fa449acf5babffd91a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2f1f06651ace284325fa449acf5babffd91a3e"}], "stats": {"total": 263, "additions": 158, "deletions": 105}, "files": [{"sha": "62ae65354a6876abbadcaaea795cb1aa14626ca3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81b47219535814188c5f40f9efb448c1cad02b92", "patch": "@@ -1,3 +1,29 @@\n+2005-01-24  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR bootstrap/19364\n+\t* config.gcc (sparc-*-elf*): Remove sol2.h, sparc/sol2.h and\n+\tsparc/elf.h, add sparc/sp-elf.h.\n+\t(sparc-*-rtems*): Likewise.\n+\t(sparclite-*-elf*): Remove sol2.h, sparc/sol2.h, sparc/elf.h and\n+\ttm-dwarf2.h, add sparc/sp-elf.h.\n+\t(sparc86x-*-elf): Likewise.\n+\t(sparc64-*-elf*): Remove sol2.h, sparc/sol2.h and tm-dwarf2.h.\n+\t* config/sparc/liteelf.h (TARGET_SUB_OS_CPP_BUILTINS): Rename into\n+\tTARGET_OS_CPP_BUILTINS.\n+\t* config/sparc/sp86x-elf (TARGET_SUB_OS_CPP_BUILTINS): Likewise.\n+\t* config/sparc/rtemself.h (TARGET_SUB_OS_CPP_BUILTINS): Likewise.\n+\tUndefine it.\n+\t* config/sparc/openbsd64.h (NO_IMPLICIT_EXTERN_C): Undefine.\n+\t* config/sparc/sp64-elf.h (NO_IMPLICIT_EXTERN_C): New macro.\n+\t(SWITCH_TAKES_ARG): Likewise.\n+\t(LOCAL_LABEL_PREFIX): Likewise.\n+\t(ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t(TARGET_N_FORMAT_TYPES): Delete.\n+\t(TARGET_FORMAT_TYPES): Likewise.\n+\t(ASM_DECLARE_FUNCTION_SIZE): Likewise.\n+\t* config/sparc/elf.h: Delete.\n+\t* config/sparc/sp-elf.h: New file.\n+\n 2005-01-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-flow-inline.h (phi_arg_from_edge): Remove."}, {"sha": "c56b1da8a3cad3d2c834f078f96d9edc183decc8", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=81b47219535814188c5f40f9efb448c1cad02b92", "patch": "@@ -1889,7 +1889,7 @@ sparc64-*-openbsd*)\n \twith_cpu=ultrasparc\n \t;;\n sparc-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sp-elf.h\"\n \ttmake_file=\"sparc/t-elf sparc/t-crtfm\"\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \tuse_fixproto=yes\n@@ -1899,7 +1899,7 @@ sparc-*-linux*)\t\t# SPARC's running GNU/Linux, libc6\n \ttmake_file=\"${tmake_file} sparc/t-crtfm\"\n \t;;\n sparc-*-rtems*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h sparc/rtemself.h rtems.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sp-elf.h sparc/rtemself.h rtems.h\"\n \ttmake_file=\"sparc/t-elf sparc/t-crtfm t-rtems\"\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t;;\n@@ -1997,19 +1997,19 @@ sparclite-*-coff*)\n \ttmake_file=sparc/t-sparclite\n \t;;\n sparclite-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h sparc/liteelf.h tm-dwarf2.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sp-elf.h sparc/liteelf.h\"\n \ttmake_file=\"sparc/t-sparclite sparc/t-crtfm\"\n         extra_parts=\"crtbegin.o crtend.o\"\n \tuse_fixproto=yes\n \t;;\n sparc86x-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h sparc/sp86x-elf.h tm-dwarf2.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sp-elf.h sparc/sp86x-elf.h\"\n \ttmake_file=\"sparc/t-sp86x sparc/t-crtfm\"\n         extra_parts=\"crtbegin.o crtend.o\"\n \tuse_fixproto=yes\n \t;;\n sparc64-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/sp64-elf.h tm-dwarf2.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sp64-elf.h\"\n \ttmake_file=\"${tmake_file} sparc/t-crtfm\"\n \textra_parts=\"crtbegin.o crtend.o\"\n \tuse_fixproto=yes"}, {"sha": "5d55c9cd95257c0da533d85b01f3e8c3fab55b32", "filename": "gcc/config/sparc/elf.h", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Fconfig%2Fsparc%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Fconfig%2Fsparc%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Felf.h?ref=3a2f1f06651ace284325fa449acf5babffd91a3e", "patch": "@@ -1,64 +0,0 @@\n-/* Definitions of target machine for GCC,\n-   for SPARC running in an embedded environment using the ELF file format.\n-   Copyright (C) 1997, 2004 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"crt0.o%s crti.o%s crtbegin.o%s\"\n-\n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   crtend.o%s crtn.o%s\"\n-\n-/* Use the default.  */\n-#undef LINK_SPEC\n-\n-/* Don't set the target flags, this is done by the linker script */\n-#undef LIB_SPEC\n-#define LIB_SPEC \"\"\n-\n-/* FIXME: until fixed */\n-#undef LONG_DOUBLE_TYPE_SIZE\n-#define LONG_DOUBLE_TYPE_SIZE 64\n-\n-/* This solaris2 define does not apply.  */\n-#undef STDC_0_IN_SYSTEM_HEADERS\n-\n-/* We don't want to use the Solaris2 specific long long int conversion\n-   routines or 64-bit integer multiply and divide routines.  */\n-#undef SUN_CONVERSION_LIBFUNCS\n-#define SUN_CONVERSION_LIBFUNCS 0\n-\n-#undef SUN_INTEGER_MULTIPLY_64\n-#define SUN_INTEGER_MULTIPLY_64 0\n-\n-/* Don't include Solaris-specific format checks.  */\n-#undef TARGET_N_FORMAT_TYPES\n-#undef TARGET_FORMAT_TYPES\n-\n-/* Don't include Solaris-specific .init / .fini support.  */\n-#undef ASM_DECLARE_FUNCTION_SIZE\n-#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if (!flag_inhibit_size_directive)\t\t\t\t\\\n-\tASM_OUTPUT_MEASURED_SIZE (FILE, FNAME);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)"}, {"sha": "584816b4a1e1a75d4133ec99b2c3251ec1f6c74a", "filename": "gcc/config/sparc/liteelf.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig%2Fsparc%2Fliteelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig%2Fsparc%2Fliteelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fliteelf.h?ref=81b47219535814188c5f40f9efb448c1cad02b92", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GCC, for SPARClite w/o FPU, ELF.\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2005 Free Software Foundation, Inc.\n    Contributed by Stan Cox (scox@cygnus.com).\n \n This file is part of GCC.\n@@ -19,17 +19,17 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#undef TARGET_SUB_OS_CPP_BUILTINS\n-#define TARGET_SUB_OS_CPP_BUILTINS()\t\t\\\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (sparclite)\");\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n \tbuiltin_define (\"__sparclite__\");\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#undef TARGET_VERSION\n-#define TARGET_VERSION fprintf (stderr, \" (sparclite)\");\n-\n /* Enable app-regs and epilogue options.  Do not enable the fpu.  */\n \n #undef TARGET_DEFAULT"}, {"sha": "4801525a8bc1b39fdfdc52ce1333fa086b8cb8ee", "filename": "gcc/config/sparc/openbsd64.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h?ref=81b47219535814188c5f40f9efb448c1cad02b92", "patch": "@@ -1,5 +1,5 @@\n /* Configuration file for sparc64 OpenBSD target.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -51,6 +51,9 @@ Boston, MA 02111-1307, USA.  */\n #undef MD_EXEC_PREFIX\n #undef MD_STARTFILE_PREFIX\n \n+/* Inherited from sp64-elf.  */\n+#undef NO_IMPLICIT_EXTERN_C\n+\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n %{v:-V} -s %{fpic|fPIC|fpie|fPIE:-K PIC} \\"}, {"sha": "b55680d7cf793056c956c1e5cced679c214fdd88", "filename": "gcc/config/sparc/rtemself.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig%2Fsparc%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig%2Fsparc%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Frtemself.h?ref=81b47219535814188c5f40f9efb448c1cad02b92", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for rtems targeting a SPARC using ELF.\n-   Copyright (C) 1996, 1997, 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 2000, 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Joel Sherrill (joel@OARcorp.com).\n \n This file is part of GCC.\n@@ -20,7 +20,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Target OS builtins.  */\n-#define TARGET_SUB_OS_CPP_BUILTINS()\t\t\\\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n \tbuiltin_define (\"__rtems__\");\t\t\\"}, {"sha": "b261299058cb3b1eac9a1fba0544b18c85f2cf69", "filename": "gcc/config/sparc/sp-elf.h", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig%2Fsparc%2Fsp-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig%2Fsparc%2Fsp-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp-elf.h?ref=81b47219535814188c5f40f9efb448c1cad02b92", "patch": "@@ -0,0 +1,83 @@\n+/* Definitions of target machine for GCC,\n+   for SPARC running in an embedded environment using the ELF file format.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (sparc-elf)\")\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT MASK_FPU\n+\n+/* Don't assume anything about the header files.  */\n+#define NO_IMPLICIT_EXTERN_C\n+\n+/* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n+   It's safe to pass -s always, even if -g is not used.  */\n+#undef ASM_SPEC\n+#define ASM_SPEC \\\n+  \"%{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s \\\n+   %{fpic|fpie|fPIC|fPIE:-K PIC} %(asm_cpu)\"\n+\n+/* Use the default.  */\n+#undef LINK_SPEC\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"crt0.o%s crti.o%s crtbegin.o%s\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n+   crtend.o%s crtn.o%s\"\n+\n+/* Don't set the target flags, this is done by the linker script */\n+#undef LIB_SPEC\n+#define LIB_SPEC \"\"\n+\n+/* This defines which switch letters take arguments.\n+   It is as in svr4.h but with -R added.  */\n+#undef SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR) \\\n+  (DEFAULT_SWITCH_TAKES_ARG(CHAR) \\\n+   || (CHAR) == 'R' \\\n+   || (CHAR) == 'h' \\\n+   || (CHAR) == 'z')\n+\f\n+#undef  LOCAL_LABEL_PREFIX\n+#define LOCAL_LABEL_PREFIX  \".\"\n+\n+/* This is how to store into the string LABEL\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#undef  ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n+  sprintf ((LABEL), \"*.L%s%ld\", (PREFIX), (long)(NUM))\n+\f\n+/* ??? Inherited from sol2.h.  Probably wrong.  */\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+/* ??? until fixed.  */\n+#undef LONG_DOUBLE_TYPE_SIZE\n+#define LONG_DOUBLE_TYPE_SIZE 64"}, {"sha": "e75a5f53bf65d1e5b00b4f99b663a44836d37f75", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=81b47219535814188c5f40f9efb448c1cad02b92", "patch": "@@ -20,16 +20,10 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* ??? We're taking the scheme of including another file and then overriding\n-   the values we don't like a bit too far here.  The alternative is to more or\n-   less duplicate all of svr4.h, sparc/sysv4.h, and sparc/sol2.h here\n-   (suitably cleaned up).  */\n-\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (sparc64-elf)\")\n \n /* A 64 bit v9 compiler in a Medium/Anywhere code model environment.  */\n-\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n (MASK_V9 + MASK_PTR64 + MASK_64BIT + MASK_HARD_QUAD \\\n@@ -38,6 +32,9 @@ Boston, MA 02111-1307, USA.  */\n #undef SPARC_DEFAULT_CMODEL\n #define SPARC_DEFAULT_CMODEL CM_EMBMEDANY\n \n+/* Don't assume anything about the header files.  */\n+#define NO_IMPLICIT_EXTERN_C\n+\n /* __svr4__ is used by the C library (FIXME) */\n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \"-D__svr4__\"\n@@ -75,6 +72,15 @@ crtbegin.o%s \\\n /* Use the default (for now).  */\n #undef LIB_SPEC\n \n+/* This defines which switch letters take arguments.\n+   It is as in svr4.h but with -R added.  */\n+#undef SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR) \\\n+  (DEFAULT_SWITCH_TAKES_ARG(CHAR) \\\n+   || (CHAR) == 'R' \\\n+   || (CHAR) == 'h' \\\n+   || (CHAR) == 'z')\n+\n /* V9 chips can handle either endianness.  */\n #undef SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n@@ -86,7 +92,19 @@ crtbegin.o%s \\\n \n #undef WORDS_BIG_ENDIAN\n #define WORDS_BIG_ENDIAN (! TARGET_LITTLE_ENDIAN)\n-\n+\f\n+#undef  LOCAL_LABEL_PREFIX\n+#define LOCAL_LABEL_PREFIX  \".\"\n+\n+/* This is how to store into the string LABEL\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#undef  ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n+  sprintf ((LABEL), \"*.L%s%ld\", (PREFIX), (long)(NUM))\n+\f\n /* ??? This should be 32 bits for v9 but what can we do?  */\n #undef WCHAR_TYPE\n #define WCHAR_TYPE \"short unsigned int\"\n@@ -104,17 +122,3 @@ crtbegin.o%s \\\n    this 0 to not confuse the branch shortening code.  */\n #undef JUMP_TABLES_IN_TEXT_SECTION\n #define JUMP_TABLES_IN_TEXT_SECTION 0\n-\n-/* Don't include Solaris-specific format checks.  */\n-#undef TARGET_N_FORMAT_TYPES\n-#undef TARGET_FORMAT_TYPES\n-\n-/* Don't include Solaris-specific .init / .fini support.  */\n-#undef ASM_DECLARE_FUNCTION_SIZE\n-#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if (!flag_inhibit_size_directive)\t\t\t\t\\\n-\tASM_OUTPUT_MEASURED_SIZE (FILE, FNAME);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)"}, {"sha": "971f3583b7fae3e221c5a2ab81a82f15b137671e", "filename": "gcc/config/sparc/sp86x-elf.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig%2Fsparc%2Fsp86x-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b47219535814188c5f40f9efb448c1cad02b92/gcc%2Fconfig%2Fsparc%2Fsp86x-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp86x-elf.h?ref=81b47219535814188c5f40f9efb448c1cad02b92", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GCC, for sparclite 86x w/o FPU.\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2005 Free Software Foundation, Inc.\n    Contributed by Stan Cox (scox@cygnus.com).\n \n This file is part of GCC.\n@@ -19,17 +19,17 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#undef  TARGET_SUB_OS_CPP_BUILTINS\n-#define TARGET_SUB_OS_CPP_BUILTINS()\t\t\\\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (sparclite 86x)\");\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n \tbuiltin_define (\"__sparclite86x__\");\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#undef TARGET_VERSION\n-#define TARGET_VERSION fprintf (stderr, \" (sparclite 86x)\");\n-\n /* Enable app-regs and epilogue options.  Do not enable the fpu.  */\n \n #undef TARGET_DEFAULT"}]}