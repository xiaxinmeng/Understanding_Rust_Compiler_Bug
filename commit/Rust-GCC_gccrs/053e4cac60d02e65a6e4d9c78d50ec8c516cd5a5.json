{"sha": "053e4cac60d02e65a6e4d9c78d50ec8c516cd5a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUzZTRjYWM2MGQwMmU2NWE2ZTRkOWM3OGQ1MGVjOGM1MTZjZDVhNQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-07-02T20:36:28Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-07-02T20:36:28Z"}, "message": "(zero_extendhisi2, extendhisi2, extendqihi2,\n\nextendqisi2): Preserve the SUBREG_WORD value of subreg operands.\n(ashldi3): Delete, obsoleted by lshldi3 pattern.\n(lshldi3): Rename to ashldi3 for consistency with SImode shifts.\n\nFrom-SVN: r4832", "tree": {"sha": "8a7cb373037a6c52d6b53a4b82da54732b9eb47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a7cb373037a6c52d6b53a4b82da54732b9eb47d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/053e4cac60d02e65a6e4d9c78d50ec8c516cd5a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053e4cac60d02e65a6e4d9c78d50ec8c516cd5a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053e4cac60d02e65a6e4d9c78d50ec8c516cd5a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053e4cac60d02e65a6e4d9c78d50ec8c516cd5a5/comments", "author": null, "committer": null, "parents": [{"sha": "e6431ec56fd7d0ee998d82d7fb72b1f3dc792e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6431ec56fd7d0ee998d82d7fb72b1f3dc792e3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6431ec56fd7d0ee998d82d7fb72b1f3dc792e3d"}], "stats": {"total": 81, "additions": 38, "deletions": 43}, "files": [{"sha": "3e3d04b21abebf9564c6fe35547cbcd98107f0eb", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 38, "deletions": 43, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053e4cac60d02e65a6e4d9c78d50ec8c516cd5a5/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053e4cac60d02e65a6e4d9c78d50ec8c516cd5a5/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=053e4cac60d02e65a6e4d9c78d50ec8c516cd5a5", "patch": "@@ -1368,11 +1368,16 @@\n {\n   rtx temp = gen_reg_rtx (SImode);\n   rtx shift_16 = gen_rtx (CONST_INT, VOIDmode, 16);\n+  int op1_subword = 0;\n \n   if (GET_CODE (operand1) == SUBREG)\n-    operand1 = XEXP (operand1, 0);\n+    {\n+      op1_subword = SUBREG_WORD (operand1);\n+      operand1 = XEXP (operand1, 0);\n+    }\n \n-  emit_insn (gen_ashlsi3 (temp, gen_rtx (SUBREG, SImode, operand1, 0),\n+  emit_insn (gen_ashlsi3 (temp, gen_rtx (SUBREG, SImode, operand1,\n+\t\t\t\t\t op1_subword),\n \t\t\t  shift_16));\n   emit_insn (gen_lshrsi3 (operand0, temp, shift_16));\n   DONE;\n@@ -1469,11 +1474,16 @@\n {\n   rtx temp = gen_reg_rtx (SImode);\n   rtx shift_16 = gen_rtx (CONST_INT, VOIDmode, 16);\n+  int op1_subword = 0;\n \n   if (GET_CODE (operand1) == SUBREG)\n-    operand1 = XEXP (operand1, 0);\n+    {\n+      op1_subword = SUBREG_WORD (operand1);\n+      operand1 = XEXP (operand1, 0);\n+    }\n \n-  emit_insn (gen_ashlsi3 (temp, gen_rtx (SUBREG, SImode, operand1, 0),\n+  emit_insn (gen_ashlsi3 (temp, gen_rtx (SUBREG, SImode, operand1,\n+\t\t\t\t\t op1_subword),\n \t\t\t  shift_16));\n   emit_insn (gen_ashrsi3 (operand0, temp, shift_16));\n   DONE;\n@@ -1494,15 +1504,24 @@\n {\n   rtx temp = gen_reg_rtx (SImode);\n   rtx shift_24 = gen_rtx (CONST_INT, VOIDmode, 24);\n+  int op1_subword = 0;\n+  int op0_subword = 0;\n \n   if (GET_CODE (operand1) == SUBREG)\n-    operand1 = XEXP (operand1, 0);\n+    {\n+      op1_subword = SUBREG_WORD (operand1);\n+      operand1 = XEXP (operand1, 0);\n+    }\n   if (GET_CODE (operand0) == SUBREG)\n-    operand0 = XEXP (operand0, 0);\n-  emit_insn (gen_ashlsi3 (temp, gen_rtx (SUBREG, SImode, operand1, 0),\n+    {\n+      op0_subword = SUBREG_WORD (operand0);\n+      operand0 = XEXP (operand0, 0);\n+    }\n+  emit_insn (gen_ashlsi3 (temp, gen_rtx (SUBREG, SImode, operand1,\n+\t\t\t\t\t op1_subword),\n \t\t\t  shift_24));\n   if (GET_MODE (operand0) != SImode)\n-    operand0 = gen_rtx (SUBREG, SImode, operand0, 0);\n+    operand0 = gen_rtx (SUBREG, SImode, operand0, op0_subword);\n   emit_insn (gen_ashrsi3 (operand0, temp, shift_24));\n   DONE;\n }\")\n@@ -1522,10 +1541,16 @@\n {\n   rtx temp = gen_reg_rtx (SImode);\n   rtx shift_24 = gen_rtx (CONST_INT, VOIDmode, 24);\n+  int op1_subword = 0;\n \n   if (GET_CODE (operand1) == SUBREG)\n-    operand1 = XEXP (operand1, 0);\n-  emit_insn (gen_ashlsi3 (temp, gen_rtx (SUBREG, SImode, operand1, 0),\n+    {\n+      op1_subword = SUBREG_WORD (operand1);\n+      operand1 = XEXP (operand1, 0);\n+    }\n+\n+  emit_insn (gen_ashlsi3 (temp, gen_rtx (SUBREG, SImode, operand1,\n+\t\t\t\t\t op1_subword),\n \t\t\t  shift_24));\n   emit_insn (gen_ashrsi3 (operand0, temp, shift_24));\n   DONE;\n@@ -2510,46 +2535,16 @@\n \f\n ;;- arithmetic shift instructions\n \n-;; We can trivially handle shifting the constant 1 by 64 bits.\n-;; For other shifts we use the library routine.\n-;; ??? Questionable, we can do better than this can't we?\n-(define_expand \"ashldi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (ashift:DI (match_operand:DI 1 \"const_double_operand\" \"\")\n-\t\t\t      (match_operand:SI 2 \"register_operand\" \"\")))\n-\t      (clobber (reg:SI 0))])]\n-  \"\"\n-  \"\n-{\n-  if (GET_CODE (operands[1]) == CONST_DOUBLE\n-      && CONST_DOUBLE_HIGH (operands[1]) == 0\n-      && CONST_DOUBLE_LOW (operands[1]) == 1)\n-    operands[1] = const1_rtx;\n-  else if (operands[1] != const1_rtx)\n-    FAIL;\n-}\")\n-\n-;; ??? Questionable, we can do better than this can't we?\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n-\t(ashift:DI (const_int 1)\n-\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (clobber (reg:SI 0))]\n-  \"\"\n-  \"subcc %1,32,%%g0\\;addx %%g0,0,%R0\\;xor %R0,1,%0\\;sll %R0,%1,%R0\\;sll %0,%1,%0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"5\")])\n-\n (define_insn \"ashlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"\"\n   \"sll %1,%2,%0\")\n \n-(define_expand \"lshldi3\"\n+(define_expand \"ashldi3\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (lshift:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t   (ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t\t      (match_operand:DI 2 \"const_int_operand\" \"\")))\n \t      (clobber (match_scratch:SI 3 \"\"))])]\n   \"\"\n@@ -2561,7 +2556,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(lshift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:DI 2 \"const_int_operand\" \"I\")))\n    (clobber (match_scratch:SI 3 \"=r\"))]\n   \"INTVAL (operands[2]) < 32\""}]}