{"sha": "7e52f8b1e03776575b92574252d9b6bbed9f1af4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U1MmY4YjFlMDM3NzY1NzViOTI1NzQyNTJkOWI2YmJlZDlmMWFmNA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-13T20:40:10Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-13T20:40:10Z"}, "message": "c++: premature requires-expression folding [PR95020]\n\nIn the testcase below we're prematurely folding away the\nrequires-expression to 'true' after substituting in the function's\ntemplate arguments, but before substituting in the lambda's deduced\ntemplate arguments.\n\nThis patch removes the uses_template_parms check when deciding in\ntsubst_requires_expr whether to keep around a new requires-expression.\nRegardless of whether the template arguments are dependent, there still\nmight be more template parameters to later substitute in (as in the\nbelow testcase) and even if not, tsubst_expr doesn't perform full\nsemantic processing unless !processing_template_decl, so we should still\nwait until then to fold away the requires-expression.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95020\n\t* constraint.c (tsubst_requires_expr): Produce a new\n\trequires-expression when processing_template_decl, even if\n\ttemplate arguments are not dependent.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95020\n\t* g++/cpp2a/concepts-lambda7.C: New test.", "tree": {"sha": "b1258207dbf28547680d2b1a431326ac498c56b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1258207dbf28547680d2b1a431326ac498c56b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e52f8b1e03776575b92574252d9b6bbed9f1af4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e52f8b1e03776575b92574252d9b6bbed9f1af4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e52f8b1e03776575b92574252d9b6bbed9f1af4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e52f8b1e03776575b92574252d9b6bbed9f1af4/comments", "author": null, "committer": null, "parents": [{"sha": "661232da72d29f8f2385d5f588727beb74360144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661232da72d29f8f2385d5f588727beb74360144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/661232da72d29f8f2385d5f588727beb74360144"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "73a6500c8736376f3f5744d8d30fc5b0498b4a7f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e52f8b1e03776575b92574252d9b6bbed9f1af4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e52f8b1e03776575b92574252d9b6bbed9f1af4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7e52f8b1e03776575b92574252d9b6bbed9f1af4", "patch": "@@ -1,3 +1,10 @@\n+2020-05-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95020\n+\t* constraint.c (tsubst_requires_expr): Produce a new\n+\trequires-expression when processing_template_decl, even if\n+\ttemplate arguments are not dependent.\n+\n 2020-05-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/95066"}, {"sha": "eb72bfe59368e9c74923e1685d6c603d312b50df", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e52f8b1e03776575b92574252d9b6bbed9f1af4/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e52f8b1e03776575b92574252d9b6bbed9f1af4/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=7e52f8b1e03776575b92574252d9b6bbed9f1af4", "patch": "@@ -2173,9 +2173,7 @@ tsubst_requires_expr (tree t, tree args,\n   if (reqs == error_mark_node)\n     return boolean_false_node;\n \n-  /* In certain cases, produce a new requires-expression.\n-     Otherwise the value of the expression is true.  */\n-  if (processing_template_decl && uses_template_parms (args))\n+  if (processing_template_decl)\n     return finish_requires_expr (cp_expr_location (t), parms, reqs);\n \n   return boolean_true_node;"}, {"sha": "b88e1823c0c7f36cb7be87feaed7e2c194050e21", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e52f8b1e03776575b92574252d9b6bbed9f1af4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e52f8b1e03776575b92574252d9b6bbed9f1af4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e52f8b1e03776575b92574252d9b6bbed9f1af4", "patch": "@@ -1,3 +1,8 @@\n+2020-05-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95020\n+\t* g++/cpp2a/concepts-lambda7.C: New test.\n+\n 2020-05-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/95066"}, {"sha": "50746b777a3cc91979694ca67100294420b88b89", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda7.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e52f8b1e03776575b92574252d9b6bbed9f1af4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e52f8b1e03776575b92574252d9b6bbed9f1af4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda7.C?ref=7e52f8b1e03776575b92574252d9b6bbed9f1af4", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/95020\n+// { dg-do compile { target c++2a } }\n+\n+template<typename>\n+void foo() {\n+  auto t = [](auto v) {\n+    static_assert(requires { *v; }); // { dg-error \"static assertion failed\" }\n+  };\n+  t(0);\n+}\n+\n+void bar() {\n+  foo<void>();\n+}"}]}