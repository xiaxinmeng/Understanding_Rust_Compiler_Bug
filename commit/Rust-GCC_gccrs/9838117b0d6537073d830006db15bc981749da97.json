{"sha": "9838117b0d6537073d830006db15bc981749da97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgzODExN2IwZDY1MzcwNzNkODMwMDA2ZGIxNWJjOTgxNzQ5ZGE5Nw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-12-01T18:28:07Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-12-01T18:28:07Z"}, "message": "* combine.c (distribute_links): Handle multiple SETs.\n\nFrom-SVN: r218242", "tree": {"sha": "e7c0548ca452a22543189199a5be20d62e411fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7c0548ca452a22543189199a5be20d62e411fc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9838117b0d6537073d830006db15bc981749da97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9838117b0d6537073d830006db15bc981749da97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9838117b0d6537073d830006db15bc981749da97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9838117b0d6537073d830006db15bc981749da97/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66d4b012463b627a233bdae5349d27dc7ea5c5bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d4b012463b627a233bdae5349d27dc7ea5c5bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d4b012463b627a233bdae5349d27dc7ea5c5bf"}], "stats": {"total": 56, "additions": 41, "deletions": 15}, "files": [{"sha": "f1e029e9d5d349cb1d07cf4d4a43fba146a9f080", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9838117b0d6537073d830006db15bc981749da97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9838117b0d6537073d830006db15bc981749da97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9838117b0d6537073d830006db15bc981749da97", "patch": "@@ -1,3 +1,7 @@\n+2014-12-01  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* combine.c (distribute_links): Handle multiple SETs.\n+\n 2014-12-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* combine.c (struct insn_link): New field `regno'."}, {"sha": "afcb91eedd03ec60f5e261b4567938ed06740c30", "filename": "gcc/combine.c", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9838117b0d6537073d830006db15bc981749da97/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9838117b0d6537073d830006db15bc981749da97/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=9838117b0d6537073d830006db15bc981749da97", "patch": "@@ -13817,24 +13817,46 @@ distribute_links (struct insn_link *links)\n \n       next_link = link->next;\n \n-      /* If the insn that this link points to is a NOTE or isn't a single\n-\t set, ignore it.  In the latter case, it isn't clear what we\n-\t can do other than ignore the link, since we can't tell which\n-\t register it was for.  Such links wouldn't be used by combine\n-\t anyway.\n-\n-\t It is not possible for the destination of the target of the link to\n-\t have been changed by combine.  The only potential of this is if we\n-\t replace I3, I2, and I1 by I3 and I2.  But in that case the\n-\t destination of I2 also remains unchanged.  */\n-\n-      if (NOTE_P (link->insn)\n-\t  || (set = single_set (link->insn)) == 0)\n+      /* If the insn that this link points to is a NOTE, ignore it.  */\n+      if (NOTE_P (link->insn))\n+\tcontinue;\n+\n+      set = 0;\n+      rtx pat = PATTERN (link->insn);\n+      if (GET_CODE (pat) == SET)\n+\tset = pat;\n+      else if (GET_CODE (pat) == PARALLEL)\n+\t{\n+\t  int i;\n+\t  for (i = 0; i < XVECLEN (pat, 0); i++)\n+\t    {\n+\t      set = XVECEXP (pat, 0, i);\n+\t      if (GET_CODE (set) != SET)\n+\t\tcontinue;\n+\n+\t      reg = SET_DEST (set);\n+\t      while (GET_CODE (reg) == ZERO_EXTRACT\n+\t\t     || GET_CODE (reg) == STRICT_LOW_PART\n+\t\t     || GET_CODE (reg) == SUBREG)\n+\t\treg = XEXP (reg, 0);\n+\n+\t      if (!REG_P (reg))\n+\t\tcontinue;\n+\n+\t      if (REGNO (reg) == link->regno)\n+\t\tbreak;\n+\t    }\n+\t  if (i == XVECLEN (pat, 0))\n+\t    continue;\n+\t}\n+      else\n \tcontinue;\n \n       reg = SET_DEST (set);\n-      while (GET_CODE (reg) == SUBREG || GET_CODE (reg) == ZERO_EXTRACT\n-\t     || GET_CODE (reg) == STRICT_LOW_PART)\n+\n+      while (GET_CODE (reg) == ZERO_EXTRACT\n+\t     || GET_CODE (reg) == STRICT_LOW_PART\n+\t     || GET_CODE (reg) == SUBREG)\n \treg = XEXP (reg, 0);\n \n       /* A LOG_LINK is defined as being placed on the first insn that uses"}]}