{"sha": "fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI5ZGQxYzdjMzJlZmQwYzkwYzIxMDcwZWQ3ZGFiYzkwMDZlZjFlZg==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-19T23:08:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-19T23:08:29Z"}, "message": "[multiple changes]\n\n2017-10-19  Bob Duff  <duff@adacore.com>\n\n\t* exp_util.adb: (Process_Statements_For_Controlled_Objects): Clarify\n\twhich node kinds can legitimately be ignored, and raise Program_Error\n\tfor others.\n\n2017-10-19  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_elab.adb (Compilation_Unit): Handle the case of a subprogram\n\tinstantiation that acts as a compilation unit.\n\t(Find_Code_Unit): Reimplemented.\n\t(Find_Top_Unit): Reimplemented.\n\t(Find_Unit_Entity): New routine.\n\t(Process_Instantiation_SPARK): Correct the elaboration requirement a\n\tpackage instantiation imposes on a unit.\n\n2017-10-19  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch6.adb (Is_Build_In_Place_Result_Type): Enable build-in-place\n\tfor a narrow set of controlled types.\n\n2017-10-19  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sinput.ads (Line_Start): Add pragma Inline.\n\t* widechar.ads (Is_Start_Of_Wide_Char): Likewise.\n\n2017-10-19  Bob Duff  <duff@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Disable\n\tMake_Build_In_Place_Call_... for F(...)'Old, where F(...) is a\n\tbuild-in-place function call so that the temp is declared in the right\n\tplace.\n\nFrom-SVN: r253915", "tree": {"sha": "ada206359491e8f3f3634decde700963802ade13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ada206359491e8f3f3634decde700963802ade13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/comments", "author": null, "committer": null, "parents": [{"sha": "ebd208bf7b4e8265738cf774549842f3895739ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd208bf7b4e8265738cf774549842f3895739ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebd208bf7b4e8265738cf774549842f3895739ac"}], "stats": {"total": 198, "additions": 164, "deletions": 34}, "files": [{"sha": "21337393b72b27dff4de1a9e0f6d349f9db1790d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef", "patch": "@@ -1,3 +1,36 @@\n+2017-10-19  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_util.adb: (Process_Statements_For_Controlled_Objects): Clarify\n+\twhich node kinds can legitimately be ignored, and raise Program_Error\n+\tfor others.\n+\n+2017-10-19  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_elab.adb (Compilation_Unit): Handle the case of a subprogram\n+\tinstantiation that acts as a compilation unit.\n+\t(Find_Code_Unit): Reimplemented.\n+\t(Find_Top_Unit): Reimplemented.\n+\t(Find_Unit_Entity): New routine.\n+\t(Process_Instantiation_SPARK): Correct the elaboration requirement a\n+\tpackage instantiation imposes on a unit.\n+\n+2017-10-19  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch6.adb (Is_Build_In_Place_Result_Type): Enable build-in-place\n+\tfor a narrow set of controlled types.\n+\n+2017-10-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sinput.ads (Line_Start): Add pragma Inline.\n+\t* widechar.ads (Is_Start_Of_Wide_Char): Likewise.\n+\n+2017-10-19  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Disable\n+\tMake_Build_In_Place_Call_... for F(...)'Old, where F(...) is a\n+\tbuild-in-place function call so that the temp is declared in the right\n+\tplace.\n+\n 2017-10-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/misc.c (gnat_tree_size): Move around."}, {"sha": "55c6ec6f66220b29d141ad160ebac53801e8dc71", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef", "patch": "@@ -1756,7 +1756,19 @@ package body Exp_Attr is\n       --  and access to it must be passed to the function.\n \n       if Is_Build_In_Place_Function_Call (Pref) then\n-         Make_Build_In_Place_Call_In_Anonymous_Context (Pref);\n+\n+         --  If attribute is 'Old, the context is a postcondition, and\n+         --  the temporary must go in the corresponding subprogram, not\n+         --  the postcondition function or any created blocks, as when\n+         --  the attribute appears in a quantified expression. This is\n+         --  handled below in the expansion of the attribute.\n+\n+         if Attribute_Name (Parent (Pref)) = Name_Old then\n+            null;\n+\n+         else\n+            Make_Build_In_Place_Call_In_Anonymous_Context (Pref);\n+         end if;\n \n       --  Ada 2005 (AI-318-02): Specialization of the previous case for prefix\n       --  containing build-in-place function calls whose returned object covers"}, {"sha": "c5cea3e6aafbd59e8040919c555bc8bb1b83ecac", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef", "patch": "@@ -7240,34 +7240,58 @@ package body Exp_Ch6 is\n       if Is_Limited_View (Typ) then\n          return Ada_Version >= Ada_2005 and then not Debug_Flag_Dot_L;\n       else\n---         if Debug_Flag_Dot_9 then\n-         if True then\n-            return False; -- ???disable bip for nonlimited types\n-         end if;\n-\n          if Has_Interfaces (Typ) then\n             return False;\n          end if;\n \n-         --  For T'Class, return True if it's True for the corresponding\n-         --  specific type. This is necessary because a class-wide function\n-         --  might say \"return F (...)\", where F returns the corresponding\n-         --  specific type.\n-\n-         if Is_Class_Wide_Type (Typ) then\n-            return Is_Build_In_Place_Result_Type (Etype (Typ));\n-         end if;\n-\n          declare\n             T : Entity_Id := Typ;\n          begin\n-            if Present (Underlying_Type (Typ)) then\n+            --  For T'Class, return True if it's True for T. This is necessary\n+            --  because a class-wide function might say \"return F (...)\", where\n+            --  F returns the corresponding specific type.\n+\n+            if Is_Class_Wide_Type (Typ) then\n+               T := Etype (Typ);\n+            end if;\n+\n+            --  If this is a generic formal type in an instance, return True if\n+            --  it's True for the generic actual type.\n+\n+            if Nkind (Parent (Typ)) = N_Subtype_Declaration\n+              and then Present (Generic_Parent_Type (Parent (Typ)))\n+            then\n+               T := Entity (Subtype_Indication (Parent (Typ)));\n+\n+               if Present (Full_View (T)) then\n+                  T := Full_View (T);\n+               end if;\n+\n+            elsif Present (Underlying_Type (Typ)) then\n                T := Underlying_Type (Typ);\n             end if;\n \n             declare\n-               Result : constant Boolean := Is_Controlled (T);\n+               Result : Boolean;\n             begin\n+               --  ???For now, enable build-in-place for a very narrow set of\n+               --  controlled types. Change \"if True\" to \"if False\" to\n+               --  experiment more controlled types. Eventually, we would\n+               --  like to enable build-in-place for all tagged types, all\n+               --  types that need finalization, and all caller-unknown-size\n+               --  types. We will eventually use Debug_Flag_Dot_9 to disable\n+               --  build-in-place for nonlimited types.\n+\n+--         if Debug_Flag_Dot_9 then\n+               if True then\n+                  Result := Is_Controlled (T)\n+                    and then Present (Enclosing_Subprogram (T))\n+                    and then not Is_Compilation_Unit (Enclosing_Subprogram (T))\n+                    and then Ekind (Enclosing_Subprogram (T)) = E_Procedure;\n+               else\n+                  Result := Is_Controlled (T);\n+               end if;\n+\n                return Result;\n             end;\n          end;"}, {"sha": "4d6ec05a24fec3b2c99842575f7892ea275ef9dd", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef", "patch": "@@ -10817,8 +10817,14 @@ package body Exp_Util is\n                Analyze (Block);\n             end if;\n \n-         when others =>\n+         --  Could be e.g. a loop that was transformed into a block or null\n+         --  statement. Do nothing for terminate alternatives.\n+\n+         when N_Block_Statement | N_Null_Statement | N_Terminate_Alternative =>\n             null;\n+\n+         when others =>\n+            raise Program_Error;\n       end case;\n    end Process_Statements_For_Controlled_Objects;\n "}, {"sha": "3dcba585cff422e69e18a8519ce0b10bf236705e", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 65, "deletions": 15, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef", "patch": "@@ -159,7 +159,7 @@ package body Sem_Elab is\n    --\n    --      -  Instantiations\n    --\n-   --      -  References to variables\n+   --      -  Reads of variables\n    --\n    --      -  Task activation\n    --\n@@ -175,7 +175,7 @@ package body Sem_Elab is\n    --\n    --      - For instantiations, the target is the generic template\n    --\n-   --      - For references to variables, the target is the variable\n+   --      - For reads of variables, the target is the variable\n    --\n    --      - For task activation, the target is the task body\n    --\n@@ -883,6 +883,10 @@ package body Sem_Elab is\n    --  is obtained by logically unwinding instantiations and subunits when N\n    --  resides within one.\n \n+   function Find_Unit_Entity (N : Node_Id) return Entity_Id;\n+   pragma Inline (Find_Unit_Entity);\n+   --  Return the entity of unit N\n+\n    function First_Formal_Type (Subp_Id : Entity_Id) return Entity_Id;\n    pragma Inline (First_Formal_Type);\n    --  Return the type of subprogram Subp_Id's first formal parameter. If the\n@@ -1904,7 +1908,20 @@ package body Sem_Elab is\n          Comp_Unit := Parent (Unit_Declaration_Node (Unit_Id));\n       end if;\n \n-      if Nkind (Comp_Unit) = N_Subunit then\n+      --  Handle the case where a subprogram instantiation which acts as a\n+      --  compilation unit is expanded into an anonymous package that wraps\n+      --  the instantiated subprogram.\n+\n+      if Nkind (Comp_Unit) = N_Package_Specification\n+        and then Nkind_In (Original_Node (Parent (Comp_Unit)),\n+                           N_Function_Instantiation,\n+                           N_Procedure_Instantiation)\n+      then\n+         Comp_Unit := Parent (Parent (Comp_Unit));\n+\n+      --  Handle the case where the compilation unit is a subunit\n+\n+      elsif Nkind (Comp_Unit) = N_Subunit then\n          Comp_Unit := Parent (Comp_Unit);\n       end if;\n \n@@ -2933,10 +2950,8 @@ package body Sem_Elab is\n    --------------------\n \n    function Find_Code_Unit (N : Node_Or_Entity_Id) return Entity_Id is\n-      N_Unit : constant Node_Id := Unit (Cunit (Get_Code_Unit (N)));\n-\n    begin\n-      return Defining_Entity (N_Unit, Concurrent_Subunit => True);\n+      return Find_Unit_Entity (Unit (Cunit (Get_Code_Unit (N))));\n    end Find_Code_Unit;\n \n    ---------------------------\n@@ -3405,12 +3420,47 @@ package body Sem_Elab is\n    -------------------\n \n    function Find_Top_Unit (N : Node_Or_Entity_Id) return Entity_Id is\n-      N_Unit : constant Node_Id := Unit (Cunit (Get_Top_Level_Code_Unit (N)));\n-\n    begin\n-      return Defining_Entity (N_Unit, Concurrent_Subunit => True);\n+      return Find_Unit_Entity (Unit (Cunit (Get_Top_Level_Code_Unit (N))));\n    end Find_Top_Unit;\n \n+   ----------------------\n+   -- Find_Unit_Entity --\n+   ----------------------\n+\n+   function Find_Unit_Entity (N : Node_Id) return Entity_Id is\n+      Context : constant Node_Id := Parent (N);\n+      Orig_N  : constant Node_Id := Original_Node (N);\n+\n+   begin\n+      --  The unit denotes a package body of an instantiation which acts as\n+      --  a compilation unit. The proper entity is that of the package spec.\n+\n+      if Nkind (N) = N_Package_Body\n+        and then Nkind (Orig_N) = N_Package_Instantiation\n+        and then Nkind (Context) = N_Compilation_Unit\n+      then\n+         return Corresponding_Spec (N);\n+\n+      --  The unit denotes an anonymous package created to wrap a subprogram\n+      --  instantiation which acts as a compilation unit. The proper entity is\n+      --  that of the \"related instance\".\n+\n+      elsif Nkind (N) = N_Package_Declaration\n+        and then Nkind_In (Orig_N, N_Function_Instantiation,\n+                                   N_Procedure_Instantiation)\n+        and then Nkind (Context) = N_Compilation_Unit\n+      then\n+         return\n+           Related_Instance (Defining_Entity (N, Concurrent_Subunit => True));\n+\n+      --  Otherwise the proper entity is the defining entity\n+\n+      else\n+         return Defining_Entity (N, Concurrent_Subunit => True);\n+      end if;\n+   end Find_Unit_Entity;\n+\n    -----------------------\n    -- First_Formal_Type --\n    -----------------------\n@@ -5335,8 +5385,8 @@ package body Sem_Elab is\n          --  in a great number of contexts. To determine whether a reference is\n          --  a read, it is more practical to find out whether it is a write.\n \n-         --  A reference is a write when appearing immediately on the left-hand\n-         --  side of an assignment.\n+         --  A reference is a write when it appears immediately on the left-\n+         --  hand side of an assignment.\n \n          if Nkind (Context) = N_Assignment_Statement\n            and then Name (Context) = Ref\n@@ -7796,9 +7846,9 @@ package body Sem_Elab is\n       --  ABE ramifications of the instantiation.\n \n       if Nkind (Inst) = N_Package_Instantiation then\n-         Req_Nam := Name_Elaborate;\n-      else\n          Req_Nam := Name_Elaborate_All;\n+      else\n+         Req_Nam := Name_Elaborate;\n       end if;\n \n       Meet_Elaboration_Requirement\n@@ -8155,10 +8205,10 @@ package body Sem_Elab is\n       --  listed below are not considered. The categories are:\n \n       --   'Access for entries, operators, and subprograms\n+      --    Assignments to variables\n       --    Calls (includes task activation)\n       --    Instantiations\n-      --    Variable assignments\n-      --    Variable references\n+      --    Reads of variables\n \n       elsif Is_Suitable_Access (N)\n         or else Is_Suitable_Variable_Assignment (N)"}, {"sha": "ecbe83cdd88ad03660500e3f9fa57fe2f69adcd0", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef", "patch": "@@ -755,6 +755,8 @@ private\n    pragma Inline (Num_Source_Files);\n    pragma Inline (Num_Source_Lines);\n \n+   pragma Inline (Line_Start);\n+\n    No_Instance_Id : constant Instance_Id := 0;\n \n    -------------------------"}, {"sha": "3d2f9170976734eca70e5a69d041113745b42aff", "filename": "gcc/ada/widechar.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2Fwidechar.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef/gcc%2Fada%2Fwidechar.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwidechar.ads?ref=fb9dd1c7c32efd0c90c21070ed7dabc9006ef1ef", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -95,4 +95,7 @@ package Widechar is\n       P : Source_Ptr) return Boolean;\n    --  Determines if S (P) is the start of a wide character sequence\n \n+private\n+   pragma Inline (Is_Start_Of_Wide_Char);\n+\n end Widechar;"}]}