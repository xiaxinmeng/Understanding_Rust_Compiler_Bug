{"sha": "08ef2c16779f0f1814cc1f49bf53e7504942f079", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhlZjJjMTY3NzlmMGYxODE0Y2MxZjQ5YmY1M2U3NTA0OTQyZjA3OQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2016-10-11T10:19:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-11T10:19:39Z"}, "message": "utils2.c (build_binary_op): Add a NO_FOLD argument.\n\n\t* gcc-interface/utils2.c (build_binary_op): Add a NO_FOLD\n\targument.  Disable folding when true.\n\t* gcc-interface/gigi.h (choices_to_gnu): Remove declaration.\n\t(build_binary_op): Update signature and comment.\n\t* gcc-interface/decl.c (choices_to_gnu): Make static.  Disable\n\tfolding for all calls to build_binary_op.\n\nFrom-SVN: r240978", "tree": {"sha": "17830370fb0bc223697052c20038f600115efa0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17830370fb0bc223697052c20038f600115efa0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08ef2c16779f0f1814cc1f49bf53e7504942f079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ef2c16779f0f1814cc1f49bf53e7504942f079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08ef2c16779f0f1814cc1f49bf53e7504942f079", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ef2c16779f0f1814cc1f49bf53e7504942f079/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abb3ea16fa70565acae570e7410eb6702cf631ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb3ea16fa70565acae570e7410eb6702cf631ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abb3ea16fa70565acae570e7410eb6702cf631ed"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "6b3b9e069742347f0c54c90bfa71a17a3fd17a8a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ef2c16779f0f1814cc1f49bf53e7504942f079/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ef2c16779f0f1814cc1f49bf53e7504942f079/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=08ef2c16779f0f1814cc1f49bf53e7504942f079", "patch": "@@ -1,3 +1,12 @@\n+2016-10-11  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gcc-interface/utils2.c (build_binary_op): Add a NO_FOLD\n+\targument.  Disable folding when true.\n+\t* gcc-interface/gigi.h (choices_to_gnu): Remove declaration.\n+\t(build_binary_op): Update signature and comment.\n+\t* gcc-interface/decl.c (choices_to_gnu): Make static.  Disable\n+\tfolding for all calls to build_binary_op.\n+\n 2016-10-11  Tristan Gingold  <gingold@adacore.com>\n \n \t* fe.h (Constant_Value): Declare."}, {"sha": "3aaaaca73eda5109d8f9e3e6fba366b0d5f36857", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ef2c16779f0f1814cc1f49bf53e7504942f079/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ef2c16779f0f1814cc1f49bf53e7504942f079/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=08ef2c16779f0f1814cc1f49bf53e7504942f079", "patch": "@@ -6832,7 +6832,7 @@ elaborate_reference (tree ref, Entity_Id gnat_entity, bool definition,\n /* Given a GNU tree and a GNAT list of choices, generate an expression to test\n    the value passed against the list of choices.  */\n \n-tree\n+static tree\n choices_to_gnu (tree operand, Node_Id choices)\n {\n   Node_Id choice;\n@@ -6851,9 +6851,10 @@ choices_to_gnu (tree operand, Node_Id choices)\n \t  this_test\n \t    = build_binary_op (TRUTH_ANDIF_EXPR, boolean_type_node,\n \t\t\t       build_binary_op (GE_EXPR, boolean_type_node,\n-\t\t\t\t\t\toperand, low),\n+\t\t\t\t\t\toperand, low, true),\n \t\t\t       build_binary_op (LE_EXPR, boolean_type_node,\n-\t\t\t\t\t\toperand, high));\n+\t\t\t\t\t\toperand, high, true),\n+\t\t\t       true);\n \n \t  break;\n \n@@ -6865,9 +6866,10 @@ choices_to_gnu (tree operand, Node_Id choices)\n \t  this_test\n \t    = build_binary_op (TRUTH_ANDIF_EXPR, boolean_type_node,\n \t\t\t       build_binary_op (GE_EXPR, boolean_type_node,\n-\t\t\t\t\t\toperand, low),\n+\t\t\t\t\t\toperand, low, true),\n \t\t\t       build_binary_op (LE_EXPR, boolean_type_node,\n-\t\t\t\t\t\toperand, high));\n+\t\t\t\t\t\toperand, high, true),\n+\t\t\t       true);\n \t  break;\n \n \tcase N_Identifier:\n@@ -6886,9 +6888,10 @@ choices_to_gnu (tree operand, Node_Id choices)\n \t      this_test\n \t\t= build_binary_op (TRUTH_ANDIF_EXPR, boolean_type_node,\n \t\t\t\t   build_binary_op (GE_EXPR, boolean_type_node,\n-\t\t\t\t\t\t    operand, low),\n+\t\t\t\t\t\t    operand, low, true),\n \t\t\t\t   build_binary_op (LE_EXPR, boolean_type_node,\n-\t\t\t\t\t\t    operand, high));\n+\t\t\t\t\t\t    operand, high, true),\n+\t\t\t\t   true);\n \t      break;\n \t    }\n \n@@ -6898,7 +6901,7 @@ choices_to_gnu (tree operand, Node_Id choices)\n \tcase N_Integer_Literal:\n \t  single = gnat_to_gnu (choice);\n \t  this_test = build_binary_op (EQ_EXPR, boolean_type_node, operand,\n-\t\t\t\t       single);\n+\t\t\t\t       single, true);\n \t  break;\n \n \tcase N_Others_Choice:\n@@ -6909,8 +6912,11 @@ choices_to_gnu (tree operand, Node_Id choices)\n \t  gcc_unreachable ();\n \t}\n \n-      result = build_binary_op (TRUTH_ORIF_EXPR, boolean_type_node, result,\n-\t\t\t\tthis_test);\n+      if (result == boolean_false_node)\n+\tresult = this_test;\n+      else\n+\tresult = build_binary_op (TRUTH_ORIF_EXPR, boolean_type_node, result,\n+\t\t\t\t  this_test, true);\n     }\n \n   return result;"}, {"sha": "b001b405fe07fa9b5e9965f5f396a11385e18750", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ef2c16779f0f1814cc1f49bf53e7504942f079/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ef2c16779f0f1814cc1f49bf53e7504942f079/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=08ef2c16779f0f1814cc1f49bf53e7504942f079", "patch": "@@ -174,10 +174,6 @@ enum alias_set_op\n extern void relate_alias_sets (tree gnu_new_type, tree gnu_old_type,\n \t\t\t       enum alias_set_op op);\n \n-/* Given a GNU tree and a GNAT list of choices, generate an expression to test\n-   the value passed against the list of choices.  */\n-extern tree choices_to_gnu (tree operand, Node_Id choices);\n-\n /* Given GNAT_ENTITY, an object (constant, variable, parameter, exception)\n    and GNU_TYPE, its corresponding GCC type, set Esize and Alignment to the\n    size and alignment used by Gigi.  Prefer SIZE over TYPE_SIZE if non-null.\n@@ -860,9 +856,11 @@ extern tree build_load_modify_store (tree dest, tree src, Node_Id gnat_node);\n /* Make a binary operation of kind OP_CODE.  RESULT_TYPE is the type\n    desired for the result.  Usually the operation is to be performed\n    in that type.  For MODIFY_EXPR and ARRAY_REF, RESULT_TYPE may be 0\n-   in which case the type to be used will be derived from the operands.  */\n+   in which case the type to be used will be derived from the operands.\n+   Don't fold the result if NO_FOLD is true.  */\n extern tree build_binary_op (enum tree_code op_code, tree result_type,\n-                             tree left_operand, tree right_operand);\n+\t\t\t     tree left_operand, tree right_operand,\n+\t\t\t     bool no_fold=false);\n \n /* Similar, but make unary operation.  */\n extern tree build_unary_op (enum tree_code op_code, tree result_type,"}, {"sha": "9ace387b85aa19f5df39762f3cf652c7528a4a6f", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ef2c16779f0f1814cc1f49bf53e7504942f079/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ef2c16779f0f1814cc1f49bf53e7504942f079/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=08ef2c16779f0f1814cc1f49bf53e7504942f079", "patch": "@@ -834,14 +834,16 @@ build_load_modify_store (tree dest, tree src, Node_Id gnat_node)\n    in that type.  For INIT_EXPR and MODIFY_EXPR, RESULT_TYPE must be\n    NULL_TREE.  For ARRAY_REF, RESULT_TYPE may be NULL_TREE, in which\n    case the type to be used will be derived from the operands.\n+   Don't fold the result if NO_FOLD is true.\n \n    This function is very much unlike the ones for C and C++ since we\n    have already done any type conversion and matching required.  All we\n    have to do here is validate the work done by SEM and handle subtypes.  */\n \n tree\n build_binary_op (enum tree_code op_code, tree result_type,\n-                 tree left_operand, tree right_operand)\n+\t\t tree left_operand, tree right_operand,\n+\t\t bool no_fold)\n {\n   tree left_type = TREE_TYPE (left_operand);\n   tree right_type = TREE_TYPE (right_operand);\n@@ -1283,10 +1285,16 @@ build_binary_op (enum tree_code op_code, tree result_type,\n   else if (TREE_CODE (right_operand) == NULL_EXPR)\n     return build1 (NULL_EXPR, operation_type, TREE_OPERAND (right_operand, 0));\n   else if (op_code == ARRAY_REF || op_code == ARRAY_RANGE_REF)\n-    result = fold (build4 (op_code, operation_type, left_operand,\n-\t\t\t   right_operand, NULL_TREE, NULL_TREE));\n+    {\n+      result = build4 (op_code, operation_type, left_operand, right_operand,\n+\t\t       NULL_TREE, NULL_TREE);\n+      if (!no_fold)\n+\tresult = fold (result);\n+    }\n   else if (op_code == INIT_EXPR || op_code == MODIFY_EXPR)\n     result = build2 (op_code, void_type_node, left_operand, right_operand);\n+  else if (no_fold)\n+    result = build2 (op_code, operation_type, left_operand, right_operand);\n   else\n     result\n       = fold_build2 (op_code, operation_type, left_operand, right_operand);\n@@ -1307,8 +1315,13 @@ build_binary_op (enum tree_code op_code, tree result_type,\n   /* If we are working with modular types, perform the MOD operation\n      if something above hasn't eliminated the need for it.  */\n   if (modulus)\n-    result = fold_build2 (FLOOR_MOD_EXPR, operation_type, result,\n-\t\t\t  convert (operation_type, modulus));\n+    {\n+      modulus = convert (operation_type, modulus);\n+      if (no_fold)\n+\tresult = build2 (FLOOR_MOD_EXPR, operation_type, result, modulus);\n+      else\n+\tresult = fold_build2 (FLOOR_MOD_EXPR, operation_type, result, modulus);\n+    }\n \n   if (result_type && result_type != operation_type)\n     result = convert (result_type, result);"}]}