{"sha": "870518bfe257908095eb8d299fb0bbf14a4d2920", "node_id": "C_kwDOANBUbNoAKDg3MDUxOGJmZTI1NzkwODA5NWViOGQyOTlmYjBiYmYxNGE0ZDI5MjA", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2022-06-15T02:03:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-06T13:29:48Z"}, "message": "[Ada] Indexing error when calling GNAT.Regpat.Match\n\nThis patch corrects an error in the compiler whereby a buffer sizing\nerror fails to get raised when compiling a regex expression with an\ninsufficiently sized Pattern_Matcher as the documentation indicated.\nThis, in turn, could lead to indexing errors when attempting to call\nMatch with the malformed regex program buffer.\n\ngcc/ada/\n\n\t* libgnat/s-regpat.adb, libgnat/s-regpat.ads (Compile): Add a\n\tnew defaulted parameter Error_When_Too_Small to trigger an\n\terror, if specified true, when Matcher is too small to hold the\n\tcompiled regex program.", "tree": {"sha": "50371677937274f5569a99aba67a73bed5438bf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50371677937274f5569a99aba67a73bed5438bf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/870518bfe257908095eb8d299fb0bbf14a4d2920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870518bfe257908095eb8d299fb0bbf14a4d2920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870518bfe257908095eb8d299fb0bbf14a4d2920", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870518bfe257908095eb8d299fb0bbf14a4d2920/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d7fbcf10f0d2b375a29fc6c184142f68c7f7da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7fbcf10f0d2b375a29fc6c184142f68c7f7da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d7fbcf10f0d2b375a29fc6c184142f68c7f7da7"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "3290f900544716f71181770d4cf7d3dcb9702240", "filename": "gcc/ada/libgnat/s-regpat.adb", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870518bfe257908095eb8d299fb0bbf14a4d2920/gcc%2Fada%2Flibgnat%2Fs-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870518bfe257908095eb8d299fb0bbf14a4d2920/gcc%2Fada%2Flibgnat%2Fs-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-regpat.adb?ref=870518bfe257908095eb8d299fb0bbf14a4d2920", "patch": "@@ -359,10 +359,11 @@ package body System.Regpat is\n    -------------\n \n    procedure Compile\n-     (Matcher         : out Pattern_Matcher;\n-      Expression      : String;\n-      Final_Code_Size : out Program_Size;\n-      Flags           : Regexp_Flags := No_Flags)\n+     (Matcher              : out Pattern_Matcher;\n+      Expression           : String;\n+      Final_Code_Size      : out Program_Size;\n+      Flags                : Regexp_Flags := No_Flags;\n+      Error_When_Too_Small : Boolean := True)\n    is\n       --  We can't allocate space until we know how big the compiled form\n       --  will be, but we can't compile it (and thus know how big it is)\n@@ -1994,6 +1995,12 @@ package body System.Regpat is\n       end if;\n \n       PM.Flags := Flags;\n+\n+      --  Raise the appropriate error when Matcher does not have enough space\n+\n+      if Error_When_Too_Small and then Matcher.Size < Final_Code_Size then\n+         raise Expression_Error with \"Pattern_Matcher is too small\";\n+      end if;\n    end Compile;\n \n    function Compile\n@@ -2009,7 +2016,7 @@ package body System.Regpat is\n       Size  : Program_Size;\n \n    begin\n-      Compile (Dummy, Expression, Size, Flags);\n+      Compile (Dummy, Expression, Size, Flags, Error_When_Too_Small => False);\n \n       if Size <= Dummy.Size then\n          return Pattern_Matcher'\n@@ -2023,17 +2030,13 @@ package body System.Regpat is\n             Program          =>\n               Dummy.Program\n                 (Dummy.Program'First .. Dummy.Program'First + Size - 1));\n-      else\n-         --  We have to recompile now that we know the size\n-         --  ??? Can we use Ada 2005's return construct ?\n-\n-         declare\n-            Result : Pattern_Matcher (Size);\n-         begin\n-            Compile (Result, Expression, Size, Flags);\n-            return Result;\n-         end;\n       end if;\n+\n+      return\n+         Result : Pattern_Matcher (Size)\n+      do\n+         Compile (Result, Expression, Size, Flags);\n+      end return;\n    end Compile;\n \n    procedure Compile"}, {"sha": "6d0cbf4da9f473fafda848a2575c0c7fd345de59", "filename": "gcc/ada/libgnat/s-regpat.ads", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870518bfe257908095eb8d299fb0bbf14a4d2920/gcc%2Fada%2Flibgnat%2Fs-regpat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870518bfe257908095eb8d299fb0bbf14a4d2920/gcc%2Fada%2Flibgnat%2Fs-regpat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-regpat.ads?ref=870518bfe257908095eb8d299fb0bbf14a4d2920", "patch": "@@ -403,10 +403,11 @@ package System.Regpat is\n    --  (e.g. case sensitivity,...).\n \n    procedure Compile\n-     (Matcher         : out Pattern_Matcher;\n-      Expression      : String;\n-      Final_Code_Size : out Program_Size;\n-      Flags           : Regexp_Flags := No_Flags);\n+     (Matcher              : out Pattern_Matcher;\n+      Expression           : String;\n+      Final_Code_Size      : out Program_Size;\n+      Flags                : Regexp_Flags := No_Flags;\n+      Error_When_Too_Small : Boolean := True);\n    --  Compile a regular expression into internal code\n \n    --  This procedure is significantly faster than the Compile function since\n@@ -426,7 +427,25 @@ package System.Regpat is\n    --  expression.\n    --\n    --  This function raises Storage_Error if Matcher is too small to hold\n-   --  the resulting code (i.e. Matcher.Size has too small a value).\n+   --  the resulting code (i.e. Matcher.Size has too small a value) only when\n+   --  the paramter Error_When_Too_Small is set to True. Otherwise, no error\n+   --  will be raised and the required size will be placed in the\n+   --  Final_Code_Size parameter.\n+   --\n+   --  Thus when Error_When_Too_Small is specified as false a check will need\n+   --  to be made to ensure successful compilation - as in:\n+   --\n+   --     ...\n+   --     Compile\n+   --       (Matcher, Expr, Code_Size, Flags, Error_When_Too_Small => False);\n+   --\n+   --     if Matcher.Size < Code_Size then\n+   --        declare\n+   --           New_Matcher : Pattern_Matcher (1..Code_Size);\n+   --        begin\n+   --           Compile (New_Matcher, Expr, Code_Size, Flags);\n+   --        end;\n+   --     end if;\n    --\n    --  Expression_Error is raised if the string Expression does not contain\n    --  a valid regular expression."}]}