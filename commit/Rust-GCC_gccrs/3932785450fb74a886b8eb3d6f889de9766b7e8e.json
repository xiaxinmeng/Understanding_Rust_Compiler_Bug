{"sha": "3932785450fb74a886b8eb3d6f889de9766b7e8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkzMjc4NTQ1MGZiNzRhODg2YjhlYjNkNmY4ODlkZTk3NjZiN2U4ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-23T21:54:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-23T22:08:52Z"}, "message": "compiler: nil-checked pointers and index expressions can trap\n\nThe compiler was treating indirections through pointers that had been\nexplicitly checked against nil and slice and string index expressions\nas non-trapping memory references.  That is true for ordinary Go\nprograms, but it isn't true if the programs construct their own memory\naddresses.  In particular it isn't true for the kinds of programs that\nwant to use runtime.SetPanicOnFault.\n\nThe effect of this will be slightly larger binaries, due to additional\nexception information, and perhaps slightly less optimization.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/279960", "tree": {"sha": "88f09a63109a96ea57a7bdf1cf6990f7ad68c3b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88f09a63109a96ea57a7bdf1cf6990f7ad68c3b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3932785450fb74a886b8eb3d6f889de9766b7e8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3932785450fb74a886b8eb3d6f889de9766b7e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3932785450fb74a886b8eb3d6f889de9766b7e8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3932785450fb74a886b8eb3d6f889de9766b7e8e/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a541e746c71fe21eb72bae61a9ead541ed7e98d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a541e746c71fe21eb72bae61a9ead541ed7e98d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a541e746c71fe21eb72bae61a9ead541ed7e98d"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "600d976962493fa5448b1a2c617a22cf0c2f0dcb", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3932785450fb74a886b8eb3d6f889de9766b7e8e/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3932785450fb74a886b8eb3d6f889de9766b7e8e/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=3932785450fb74a886b8eb3d6f889de9766b7e8e", "patch": "@@ -1,4 +1,4 @@\n-d238487d5c6e0c7f12c38305060fba8b7ec3605f\n+8d49adead59b8103f3bfeebd53ee508eda5ee94a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "17b4cfd2c197343ffce51843206f3d586d5e998b", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3932785450fb74a886b8eb3d6f889de9766b7e8e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3932785450fb74a886b8eb3d6f889de9766b7e8e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3932785450fb74a886b8eb3d6f889de9766b7e8e", "patch": "@@ -5334,7 +5334,6 @@ Unary_expression::do_get_backend(Translate_context* context)\n       {\n         go_assert(this->expr_->type()->points_to() != NULL);\n \n-        bool known_valid = false;\n         Type* ptype = this->expr_->type()->points_to();\n         Btype* pbtype = ptype->get_backend(gogo);\n         switch (this->requires_nil_check(gogo))\n@@ -5375,14 +5374,12 @@ Unary_expression::do_get_backend(Translate_context* context)\n                                                                 compare,\n                                                                 bcrash, ubexpr,\n                                                                 loc);\n-                known_valid = true;\n                 break;\n               }\n             case NIL_CHECK_DEFAULT:\n               go_unreachable();\n           }\n-        ret = gogo->backend()->indirect_expression(pbtype, bexpr,\n-                                                   known_valid, loc);\n+        ret = gogo->backend()->indirect_expression(pbtype, bexpr, false, loc);\n       }\n       break;\n \n@@ -13339,7 +13336,8 @@ Array_index_expression::do_get_backend(Translate_context* context)\n \n \t  Type* ele_type = this->array_->type()->array_type()->element_type();\n \t  Btype* ele_btype = ele_type->get_backend(gogo);\n-\t  ret = gogo->backend()->indirect_expression(ele_btype, ptr, true, loc);\n+\t  ret = gogo->backend()->indirect_expression(ele_btype, ptr, false,\n+\t\t\t\t\t\t     loc);\n \t}\n       return ret;\n     }\n@@ -13679,7 +13677,7 @@ String_index_expression::do_get_backend(Translate_context* context)\n     {\n       ptr = gogo->backend()->pointer_offset_expression(ptr, bstart, loc);\n       Btype* ubtype = Type::lookup_integer_type(\"uint8\")->get_backend(gogo);\n-      return gogo->backend()->indirect_expression(ubtype, ptr, true, loc);\n+      return gogo->backend()->indirect_expression(ubtype, ptr, false, loc);\n     }\n \n   Expression* end = NULL;"}]}