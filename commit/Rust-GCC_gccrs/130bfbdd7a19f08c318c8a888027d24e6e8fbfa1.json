{"sha": "130bfbdd7a19f08c318c8a888027d24e6e8fbfa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMwYmZiZGQ3YTE5ZjA4YzMxOGM4YTg4ODAyN2QyNGU2ZThmYmZhMQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-04-17T14:48:13Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-04-17T14:48:13Z"}, "message": "symcat.h: Honor autoconf macro HAVE_STRINGIZE.\n\n        * symcat.h: Honor autoconf macro HAVE_STRINGIZE.  Add\n        comments/caveats with regard to traditional C behavior.\n\nFrom-SVN: r33209", "tree": {"sha": "a3938b3cae49fd5317ca2dbec58f0e58b206c9c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3938b3cae49fd5317ca2dbec58f0e58b206c9c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/130bfbdd7a19f08c318c8a888027d24e6e8fbfa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130bfbdd7a19f08c318c8a888027d24e6e8fbfa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/130bfbdd7a19f08c318c8a888027d24e6e8fbfa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130bfbdd7a19f08c318c8a888027d24e6e8fbfa1/comments", "author": null, "committer": null, "parents": [{"sha": "01b2995f8b4d98aaf321f532ca9803d034d8cca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b2995f8b4d98aaf321f532ca9803d034d8cca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01b2995f8b4d98aaf321f532ca9803d034d8cca4"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "4be8ffb7c95f6ede0be59cf9600897a34830ec22", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130bfbdd7a19f08c318c8a888027d24e6e8fbfa1/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130bfbdd7a19f08c318c8a888027d24e6e8fbfa1/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=130bfbdd7a19f08c318c8a888027d24e6e8fbfa1", "patch": "@@ -1,3 +1,8 @@\n+2000-04-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* symcat.h: Honor autoconf macro HAVE_STRINGIZE.  Add\n+\tcomments/caveats with regard to traditional C behavior.\n+\n 2000-04-05  Richard Henderson  <rth@cygnus.com>\n \n \t* splay-tree.h (splay_tree_remove): Declare."}, {"sha": "41589d42add58985f94ccd42e67887732839457d", "filename": "include/symcat.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130bfbdd7a19f08c318c8a888027d24e6e8fbfa1/include%2Fsymcat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130bfbdd7a19f08c318c8a888027d24e6e8fbfa1/include%2Fsymcat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fsymcat.h?ref=130bfbdd7a19f08c318c8a888027d24e6e8fbfa1", "patch": "@@ -19,12 +19,16 @@\n #ifndef SYM_CAT_H\n #define SYM_CAT_H\n \n-#if defined (__STDC__) || defined (ALMOST_STDC)\n+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)\n #define CONCAT2(a,b)\t a##b\n #define CONCAT3(a,b,c)\t a##b##c\n #define CONCAT4(a,b,c,d) a##b##c##d\n #define STRINGX(s) #s\n #else\n+/* Note one should never pass extra whitespace to the CONCATn macros,\n+   e.g. CONCAT2(foo, bar) because traditonal C will keep the space between\n+   the two labels instead of concatenating them.  Instead, make sure to\n+   write CONCAT2(foo,bar).  */\n #define CONCAT2(a,b)\t a/**/b\n #define CONCAT3(a,b,c)\t a/**/b/**/c\n #define CONCAT4(a,b,c,d) a/**/b/**/c/**/d\n@@ -35,6 +39,11 @@\n #define XCONCAT3(a,b,c)   CONCAT3(a,b,c)\n #define XCONCAT4(a,b,c,d) CONCAT4(a,b,c,d)\n \n+/* Note the layer of indirection here is typically used to allow\n+   stringification of the expansion of macros.  I.e. \"#define foo\n+   bar\", \"XSTRING(foo)\", to yield \"bar\".  Be aware that this only\n+   works for __STDC__, not for traditional C which will still resolve\n+   to \"foo\".  */\n #define XSTRING(s) STRINGX(s) \n \n #endif SYM_CAT_H"}]}