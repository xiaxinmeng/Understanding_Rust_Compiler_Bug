{"sha": "4fde01bb0b2b1fbedb40ed3d2cccfdba422b64c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkZTAxYmIwYjJiMWZiZWRiNDBlZDNkMmNjY2ZkYmE0MjJiNjRjNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-12-15T08:04:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-12-15T08:04:08Z"}, "message": "ChangeLog: Fix whitespace.\n\n\t* ChangeLog: Fix whitespace.\n\t* testsuite/ChangeLog: Ditto.\n\nFrom-SVN: r182357", "tree": {"sha": "75b08bef1d0822d465553b221f323de4ccef99ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75b08bef1d0822d465553b221f323de4ccef99ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fde01bb0b2b1fbedb40ed3d2cccfdba422b64c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fde01bb0b2b1fbedb40ed3d2cccfdba422b64c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fde01bb0b2b1fbedb40ed3d2cccfdba422b64c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fde01bb0b2b1fbedb40ed3d2cccfdba422b64c6/comments", "author": null, "committer": null, "parents": [{"sha": "5f8090a4352efa6e8efb2e8f9a4adfe602e2c0cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f8090a4352efa6e8efb2e8f9a4adfe602e2c0cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f8090a4352efa6e8efb2e8f9a4adfe602e2c0cd"}], "stats": {"total": 83, "additions": 38, "deletions": 45}, "files": [{"sha": "6f6172ebc98e7bc78b7d0d4d60842d91930fbb62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 44, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fde01bb0b2b1fbedb40ed3d2cccfdba422b64c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fde01bb0b2b1fbedb40ed3d2cccfdba422b64c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fde01bb0b2b1fbedb40ed3d2cccfdba422b64c6", "patch": "@@ -21,8 +21,7 @@\n \t* tree.c (free_lang_data_in_type): Do not clear fields\n \tdependent on debuginfo level setting.\n \t(find_decls_types_r): Use TYPE_STUB_DECL rathern than TREE_CHAIN.\n-\t* tree.h (TYPE_STUB_DECL): Properly check that we access\n-\ta type.\n+\t* tree.h (TYPE_STUB_DECL): Properly check that we access a type.\n \n 2011-12-14  Georg-Johann Lay  <avr@gjlay.de>\n \n@@ -60,11 +59,10 @@\n \n 2011-12-13  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n-\t* regmove.c (fixup_match_2): Only access call_used_regs with hard\n-\tregs.\n+\t* regmove.c (fixup_match_2): Only access call_used_regs with hard regs.\n \n 2011-12-13  Andrew Pinski  <apinski@cavium.com>\n-            Adam Nemet  <anemet@caviumnetworks.com>\n+\t    Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* config/mips/mips-cpus.def: Add Octeon2.\n \t* config/mips/mips-tables.opt: Regenerate.\n@@ -256,8 +254,7 @@\n \n 2011-12-11  Patrick Marlier  <patrick.marlier@gmail.com>\n \n-\t* trans-mem.c (ipa_tm_transform_calls_redirect): Do not remove\n-\tedge.\n+\t* trans-mem.c (ipa_tm_transform_calls_redirect): Do not remove edge.\n \n 2011-12-10  Richard Henderson  <rth@redhat.com>\n \n@@ -420,8 +417,7 @@\n \n \t* ira-color.c (print_hard_regs_subforest): Use\n \tHOST_WIDEST_INT_PRINT_DEC instead of %lld.\n-\t(allocno_hard_regs): Change type of cost member\n-\tto HOST_WIDEST_INT.\n+\t(allocno_hard_regs): Change type of cost member to HOST_WIDEST_INT.\n \t(add_allocno_hard_regs): Change type of argument cost\n \tto HOST_WIDEST_INT.\n \t* ira-conflict.c (build_conflict_bit_table): Replace use\n@@ -444,8 +440,7 @@\n \n \tPR tree-optimization/51482\n \t* tree-vect-stmts.c (get_vectype_for_scalar_type_and_size):\n-\tMake sure to only create REAL_TYPE and INTEGER_TYPE component\n-\tvectors.\n+\tMake sure to only create REAL_TYPE and INTEGER_TYPE component vectors.\n \n 2011-12-09  Kai Tietz  <ktietz@redhat.com>\n \n@@ -495,8 +490,7 @@\n 2011-12-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/49772\n-\t* tree-inline.c (optimize_inline_calls): Remove bail out\n-\ton errors.\n+\t* tree-inline.c (optimize_inline_calls): Remove bail out on errors.\n \n 2011-12-08  Richard Guenther  <rguenther@suse.de>\n \n@@ -598,7 +592,7 @@\n \t* config/avr/avr.c (avr_addrspace): New variable.\n \t(avr_out_lpm, avr_pgm_check_var_decl, avr_insert_attributes,\n \tavr_asm_named_section, avr_section_type_flags,\n-\tavr_asm_select_section, avr_addr_space_address_mode, \n+\tavr_asm_select_section, avr_addr_space_address_mode,\n \tavr_addr_space_convert, avr_emit_movmemhi): Use it.\n \t(avr_addr_space_pointer_mode): Forward to avr_addr_space_address_mode.\n \t(avr_pgm_segment): Remove.\n@@ -613,17 +607,15 @@\n 2011-12-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/51436\n-\t* gimple-fold.c (gimplify_and_update_call_from_tree): Guard\n-\tvdef check for the fact we do not have virtual operands when\n-\tnot optimizing.\n+\t* gimple-fold.c (gimplify_and_update_call_from_tree): Guard vdef check\n+\tfor the fact we do not have virtual operands when not optimizing.\n \n 2011-12-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/51245\n \t* tree-ssa-sccvn.c (vn_reference_lookup_or_insert_constant_for_pieces):\n \tNew function.\n-\t(vn_reference_lookup_3): Use it.  Properly valueize all refs\n-\twe create.\n+\t(vn_reference_lookup_3): Use it.  Properly valueize all refs we create.\n \n 2011-12-06  Iain Sandoe  <iains@gcc.gnu.org>\n \n@@ -702,8 +694,7 @@\n \t(struct allocno_color_data): Add new member last_process.  Move\n \tprofitable_hard_regs, hard_regs_node, and hard_regs_subnodes_start\n \tfrom object_color_data.\n-\t(object_color_data_t, object_color_data, OBJECT_COLOR_DATA):\n-\tRemove.\n+\t(object_color_data_t, object_color_data, OBJECT_COLOR_DATA): Remove.\n \t(curr_allocno_process): New static variable.\n \t(object_hard_regs_eq, object_hard_regs_htab): Rename to\n \tallocno_hard_regs_eq and allocno_hard_regs_htab.\n@@ -716,29 +707,36 @@\n \t(add_new_object_hard_regs_node_to_forest): Rename to\n \tadd_new_allocno_hard_regs_node_to_forest.\n \t(add_object_hard_regs_to_forest, collect_object_hard_regs_cover):\n-\tRename to add_allocno_hard_regs_to_forest and collect_allocno_hard_regs_cover.\n-\t(setup_object_hard_regs_nodes_parent): Rename to setup_allocno_hard_regs_nodes_parent.\n-\t(remove_unused_object_hard_regs_nodes): Rename to remove_unused_allocno_hard_regs_nodes.\n+\tRename to add_allocno_hard_regs_to_forest and\n+\tcollect_allocno_hard_regs_cover.\n+\t(setup_object_hard_regs_nodes_parent): Rename to\n+\tsetup_allocno_hard_regs_nodes_parent.\n+\t(remove_unused_object_hard_regs_nodes): Rename to\n+\tremove_unused_allocno_hard_regs_nodes.\n \t(enumerate_object_hard_regs_nodes, object_hard_regs_nodes_num):\n-\tRename to enumerate_allocno_hard_regs_nodes and allocno_hard_regs_nodes_num.\n+\tRename to enumerate_allocno_hard_regs_nodes and\n+\tallocno_hard_regs_nodes_num.\n \t(object_hard_regs_nodes, object_hard_regs_subnode_t): Rename to\n \tallocno_hard_regs_nodes and allocno_hard_regs_subnode_t.\n \t(object_hard_regs_subnode, object_hard_regs_subnodes): Rename to\n \tallocno_hard_regs_subnode and allocno_hard_regs_subnodes.\n-\t(object_hard_regs_subnode_index): Rename to allocno_hard_regs_subnode_index.\n+\t(object_hard_regs_subnode_index): Rename to\n+\tallocno_hard_regs_subnode_index.\n \t(setup_object_hard_regs_subnode_index): Rename to\n \tsetup_allocno_hard_regs_subnode_index.\n-\t(get_object_hard_regs_subnodes_num): Rename to get_allocno_hard_regs_subnodes_num.\n-\t(form_object_hard_regs_nodes_forest): Rename to form_allocno_hard_regs_nodes_forest.\n-\t(finish_object_hard_regs_nodes_tree): Rename to form_allocno_hard_regs_nodes_forest\n+\t(get_object_hard_regs_subnodes_num): Rename to\n+\tget_allocno_hard_regs_subnodes_num.\n+\t(form_object_hard_regs_nodes_forest): Rename to\n+\tform_allocno_hard_regs_nodes_forest.\n+\t(finish_object_hard_regs_nodes_tree): Rename to\n+\tform_allocno_hard_regs_nodes_forest\n \t(finish_object_hard_regs_nodes_forest): Rename to\n \tfinish_allocno_hard_regs_nodes_forest.\n-\t(setup_left_conflict_sizes_p): Use allocno data instead of object\n-\tones.  Process conflict allocnos once.\n+\t(setup_left_conflict_sizes_p): Use allocno data instead of object ones.\n+\tProcess conflict allocnos once.\n \t(update_left_conflict_sizes_p): Use allocno data instead of object\n \tones.  Change prototype signature.\n-\t(empty_profitable_hard_regs): Use allocno data instead of object\n-\tones.\n+\t(empty_profitable_hard_regs): Use allocno data instead of object ones.\n \t(setup_profitable_hard_regs): Ditto.\n \t(get_conflict_profitable_regs): Rename to\n \tget_conflict_and_start_profitable_regs.  Use allocno data for\n@@ -773,8 +771,7 @@\n \t(struct vop_to_refs_elt, vtoe_hash, vtoe_eq, vtoe_free,\n \trecord_vop_access, get_vop_accesses, get_vop_stores,\n \tadd_vop_ref_mapping): Remove.\n-\t(create_vop_ref_mapping_loop): Adjust to simply record all\n-\tstores.\n+\t(create_vop_ref_mapping_loop): Adjust to simply record all stores.\n \t(analyze_memory_references): Adjust.\n \t(refs_independent_p): Check for not analyzable refs.\n \t(can_sm_ref_p): Likewise.\n@@ -799,9 +796,8 @@\n \n 2011-12-05  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-ssa.c (verify_ssa): Verify SSA names in the loop\n-\tover all SSA names.  Remove SSA operand checking, call\n-\tverify_ssa_operands.\n+\t* tree-ssa.c (verify_ssa): Verify SSA names in the loop over all SSA\n+\tnames.  Remove SSA operand checking, call verify_ssa_operands.\n \t* tree-ssa-operands.h (verify_ssa_operands): Declare.\n \t* tree-ssa-operands.c (verify_ssa_operands): New function.\n \n@@ -824,8 +820,7 @@\n \t(cgraph_make_edge_direct): Likewise.\n \t* gimple-streamer-in.c (input_gimple_stmt): Do not\n \tcall gimple_call_set_cannot_inline.\n-\t* gimple.h (enum gf_mask): Remove GF_CALL_CANNOT_INLINE, shift\n-\tvalues.\n+\t* gimple.h (enum gf_mask): Remove GF_CALL_CANNOT_INLINE, shift values.\n \t(gimple_call_set_cannot_inline): Remove.\n \t(gimple_call_cannot_inline_p): Likewise.\n \t* ipa-inline-analysis.c (initialize_inline_failed): Look\n@@ -877,8 +872,7 @@\n \t(coverage_begin_function): ... here.\n \t* coverage.c (struct function_list): Rename to ...\n \t(struct coverage_data): ... this.  Update all uses.\n-\t(gcov_info_var, gcov_fn_info_type, gcov_fn_info_ptr_type): New\n-\tglobals.\n+\t(gcov_info_var, gcov_fn_info_type, gcov_fn_info_ptr_type): New globals.\n \t(bbg_file_opened, bbg_function_announced): Remove.\n \t(get_coverage_counts): Adjust message.\n \t(coverage_begin_ouput): Rename to ...\n@@ -968,8 +962,7 @@\n \t(process_file): Call find_exception_blocks if necessary.\n \t(read_graph_file): Adjust.  Note if an exceptional edge is seen.\n \t(find_exception_blocks): New.\n-\t(add_line_counts): Set line's unexceptional flag if not\n-\texceptional.\n+\t(add_line_counts): Set line's unexceptional flag if not exceptional.\n \t(output_branch_count): Note exceptional arcs, lines and blocks.\n \t* gcov-dump.c (tag_arcs): Decode arc flags.\n \t* doc/gcov.texi: Document '=====' lines."}, {"sha": "50f17867d52cb212a30122c50b64c2f4725b953a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fde01bb0b2b1fbedb40ed3d2cccfdba422b64c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fde01bb0b2b1fbedb40ed3d2cccfdba422b64c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4fde01bb0b2b1fbedb40ed3d2cccfdba422b64c6", "patch": "@@ -34,7 +34,7 @@\n \t* g++.dg/cpp0x/lambda/lambda-ice6.C: New.\n \n 2011-12-13  Andrew Pinski  <apinski@cavium.com>\n-            Adam Nemet  <anemet@caviumnetworks.com>\n+\t    Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* gcc.target/mips/mips.exp (mips_option_groups): Fix debug.  Add\n \t-fdump-* options."}]}