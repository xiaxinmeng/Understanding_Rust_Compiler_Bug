{"sha": "23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNhNjBhMDQzNmY0OGYxZGU0ZTViZjEyNGYyOWYwZTRhMzJlN2Q0ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-06-10T15:49:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-06-10T15:49:49Z"}, "message": "target.h (struct gcc_target): Change gimplify_va_arg_expr hook signature.\n\n        * target.h (struct gcc_target): Change gimplify_va_arg_expr\n        hook signature.\n        * tree-gimple.h: Adjust.\n        * config/alpha/alpha.c (alpha_gimplify_va_arg): Adjust.\n        * config/i386/i386.c (ix86_gimplify_va_arg): Adjust.\n        Use fold_convert.\n        * config/ia64/ia64.c (ia64_gimplify_va_arg): Adjust.\n        * config/rs6000/rs6000.c (rs6000_gimplify_va_arg): Adjust.\n        Use COMPLEX_EXPR for complex numbers.  Use fold_convert.\n        * builtins.c (std_gimplify_va_arg_expr): Adjust.  Use fold_convert.\n        (gimplify_va_arg_expr): Return GS_ERROR in error case.\n        Gimplify valist rather than calling stabilize_va_list.\n\nFrom-SVN: r82925", "tree": {"sha": "97aaa6402c26723b11a9196283dc0e2e9dd4e5dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97aaa6402c26723b11a9196283dc0e2e9dd4e5dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/comments", "author": null, "committer": null, "parents": [{"sha": "339586c817ea6e5481d1d10f604f50c81ead3645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/339586c817ea6e5481d1d10f604f50c81ead3645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/339586c817ea6e5481d1d10f604f50c81ead3645"}], "stats": {"total": 217, "additions": 108, "deletions": 109}, "files": [{"sha": "48af490674e8b1269cedba4a095df9f0f97ac3d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "patch": "@@ -1,3 +1,18 @@\n+2004-06-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* target.h (struct gcc_target): Change gimplify_va_arg_expr \n+\thook signature.\n+\t* tree-gimple.h: Adjust.\n+\t* config/alpha/alpha.c (alpha_gimplify_va_arg): Adjust.\n+\t* config/i386/i386.c (ix86_gimplify_va_arg): Adjust.\n+\tUse fold_convert.\n+\t* config/ia64/ia64.c (ia64_gimplify_va_arg): Adjust.\n+\t* config/rs6000/rs6000.c (rs6000_gimplify_va_arg): Adjust.\n+\tUse COMPLEX_EXPR for complex numbers.  Use fold_convert.\n+\t* builtins.c (std_gimplify_va_arg_expr): Adjust.  Use fold_convert.\n+\t(gimplify_va_arg_expr): Return GS_ERROR in error case.\n+\tGimplify valist rather than calling stabilize_va_list.\n+\n 2004-06-10  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* Makefile.in (df.o): Remove fibheap dependency.\n@@ -189,7 +204,10 @@\n \t(ia64_gimplify_va_arg): New fn.\n \t* config/rs6000/rs6000.c (rs6000_gimplify_va_arg): New fn.\n \t(TARGET_GIMPLIFY_VA_ARG_EXPR): Define.\n+<<<<<<< ChangeLog\n+=======\n \t* config/sparc/sparc.c (sparc_gimplify_va_arg): New fn.\n+>>>>>>> 2.3910\n \t* alias.c (get_varargs_alias_set): Just return 0 for now.\n \t\n \t* c-objc-common.c (c_tree_printer): Improve handling of %T.\n@@ -282,13 +300,23 @@\n \n 2004-06-08  Richard Henderson  <rth@redhat.com>\n \n+<<<<<<< ChangeLog\n+\t* gimple-low.c (struct lower_data): Replace the_return_label and\n+\tone_return_stmt with return_statements.\n+\t(lower_function_body): Process the entire list of return_statements.\n+\t(lower_return_expr): Check source value before unifying return_exprs.\t\n+\t* gimplify.c (gimplify_return_expr): Force the use of a temporary\n+\tfor !aggregate_value_p.\n+\t* tree-gimple.c: Update RETURN_EXPR grammer.\n+=======\n \t* gimple-low.c (struct lower_data): Replace the_return_label and\n \tone_return_stmt with return_statements.\n \t(lower_function_body): Process the entire list of return_statements.\n \t(lower_return_expr): Check source value before unifying return_exprs.   \n \t* gimplify.c (gimplify_return_expr): Force the use of a temporary\n \tfor !aggregate_value_p.\n \t* tree-gimple.c: Update RETURN_EXPR grammer.\n+>>>>>>> 2.3910\n \n 2004-06-08  Vladimir Makarov  <vmakarov@redhat.com>\n "}, {"sha": "384173f2bd20914254d519746055ab442f4cbd71", "filename": "gcc/builtins.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "patch": "@@ -4364,24 +4364,19 @@ expand_builtin_va_arg (tree valist, tree type)\n \n /* Like std_expand_builtin_va_arg, but gimplify instead of expanding.  */\n \n-void\n-std_gimplify_va_arg_expr (tree *expr_p, tree *pre_p, tree *post_p)\n+tree\n+std_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n   tree addr, t, type_size = NULL;\n   tree align, alignm1;\n   tree rounded_size;\n   HOST_WIDE_INT boundary;\n-  tree valist = TREE_OPERAND (*expr_p, 0);\n-  tree type = TREE_TYPE (*expr_p);\n \n   /* Compute the rounded size of the type.  */\n   align = size_int (PARM_BOUNDARY / BITS_PER_UNIT);\n   alignm1 = size_int (PARM_BOUNDARY / BITS_PER_UNIT - 1);\n   boundary = FUNCTION_ARG_BOUNDARY (TYPE_MODE (type), type);\n \n-  /* Reduce valist it so it's sharable with the postqueue.  */\n-  gimplify_expr (&valist, pre_p, post_p, is_gimple_min_lval, fb_lvalue);\n-\n   /* va_list pointer is aligned to PARM_BOUNDARY.  If argument actually\n      requires greater alignment, we must perform dynamic alignment.  */\n \n@@ -4434,9 +4429,6 @@ std_gimplify_va_arg_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t\t\t\t\t\t\t    type_size))))));\n     }\n \n-  addr = convert (build_pointer_type (type), addr);\n-  *expr_p = build1 (INDIRECT_REF, type, addr);\n-\n   /* Compute new value for AP.  */\n   if (! integer_zerop (rounded_size))\n     {\n@@ -4446,6 +4438,9 @@ std_gimplify_va_arg_expr (tree *expr_p, tree *pre_p, tree *post_p)\n       gimplify_stmt (&t);\n       append_to_statement_list (t, post_p);\n     }\n+\n+  addr = fold_convert (build_pointer_type (type), addr);\n+  return build_fold_indirect_ref (addr);\n }\n \n /* Return a dummy expression of type TYPE in order to keep going after an\n@@ -4489,8 +4484,7 @@ gimplify_va_arg_expr (tree *expr_p, tree *pre_p, tree *post_p)\n   if (TYPE_MAIN_VARIANT (want_va_type) != TYPE_MAIN_VARIANT (have_va_type))\n     {\n       error (\"first argument to `va_arg' not of type `va_list'\");\n-      *expr_p = dummy_object (type);\n-      return GS_ALL_DONE;\n+      return GS_ERROR;\n     }\n \n   /* Generate a diagnostic for requesting data of a type that cannot\n@@ -4528,14 +4522,27 @@ gimplify_va_arg_expr (tree *expr_p, tree *pre_p, tree *post_p)\n     {\n       /* Make it easier for the backends by protecting the valist argument\n          from multiple evaluations.  */\n-      valist = stabilize_va_list (valist, 0);\n-      TREE_OPERAND (*expr_p, 0) = valist;\n+      if (TREE_CODE (va_list_type_node) == ARRAY_TYPE)\n+\t{\n+\t  /* For this case, the backends will be expecting a pointer to\n+\t     TREE_TYPE (va_list_type_node), but it's possible we've\n+\t     actually been given an array (an actual va_list_type_node).\n+\t     So fix it.  */\n+\t  if (TREE_CODE (TREE_TYPE (valist)) == ARRAY_TYPE)\n+\t    {\n+\t      tree p1 = build_pointer_type (TREE_TYPE (va_list_type_node));\n+\t      valist = build_fold_addr_expr_with_type (valist, p1);\n+\t    }\n+\t  gimplify_expr (&valist, pre_p, post_p, is_gimple_val, fb_rvalue);\n+\t}\n+      else\n+\tgimplify_expr (&valist, pre_p, post_p, is_gimple_min_lval, fb_lvalue);\n \n       if (!targetm.calls.gimplify_va_arg_expr)\n \t/* Once most targets are converted this should abort.  */\n \treturn GS_ALL_DONE;\n \n-      targetm.calls.gimplify_va_arg_expr (expr_p, pre_p, post_p);\n+      *expr_p = targetm.calls.gimplify_va_arg_expr (valist, type, pre_p, post_p);\n       return GS_OK;\n     }\n }"}, {"sha": "7c9d67d66f9813f10e3a8f2fc49d5745262acc96", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "patch": "@@ -6444,17 +6444,14 @@ alpha_gimplify_va_arg_1 (tree type, tree base, tree offset,\n   else if (TREE_CODE (type) == COMPLEX_TYPE)\n     {\n       tree real_part, imag_part, real_temp;\n+      tree post = NULL_TREE;\n \n       real_part = alpha_gimplify_va_arg_1 (TREE_TYPE (type), base, offset,\n-\t\t\t\t\t   pre_p, post_p);\n-      append_to_statement_list (*post_p, pre_p);\n-      *post_p = NULL;\n-\n+\t\t\t\t\t   pre_p, &post);\n       /* Copy the value into a temporary, lest the formal temporary\n \t be reused out from under us.  */\n-      real_temp = create_tmp_var (TREE_TYPE (real_part), NULL);\n-      t = build (MODIFY_EXPR, void_type_node, real_temp, real_part);\n-      gimplify_and_add (t, pre_p);\n+      real_temp = get_initialized_tmp_var (real_part, pre_p, &post);\n+      append_to_statement_list (post, pre_p);\n \n       imag_part = alpha_gimplify_va_arg_1 (TREE_TYPE (type), base, offset,\n \t\t\t\t\t   pre_p, post_p);\n@@ -6491,19 +6488,13 @@ alpha_gimplify_va_arg_1 (tree type, tree base, tree offset,\n   return build_fold_indirect_ref (addr);\n }\n \n-static void\n-alpha_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p)\n+static tree\n+alpha_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n-  tree valist, type, offset_field, base_field, offset, base, t;\n+  tree offset_field, base_field, offset, base, t, r;\n \n   if (TARGET_ABI_OPEN_VMS || TARGET_ABI_UNICOSMK)\n-    {\n-      std_gimplify_va_arg_expr (expr_p, pre_p, post_p);\n-      return;\n-    }\n-\n-  valist = TREE_OPERAND (*expr_p, 0);\n-  type = TREE_TYPE (*expr_p);\n+    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n \n   base_field = TYPE_FIELDS (va_list_type_node);\n   offset_field = TREE_CHAIN (base_field);\n@@ -6525,12 +6516,14 @@ alpha_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p)\n \n   /* Find the value.  Note that this will be a stable indirection, or\n      a composite of stable indirections in the case of complex.  */\n-  *expr_p = alpha_gimplify_va_arg_1 (type, base, offset, pre_p, post_p);\n+  r = alpha_gimplify_va_arg_1 (type, base, offset, pre_p, post_p);\n \n   /* Stuff the offset temporary back into its field.  */\n   t = build (MODIFY_EXPR, void_type_node, offset_field,\n \t     fold_convert (TREE_TYPE (offset_field), offset));\n   gimplify_and_add (t, pre_p);\n+\n+  return r;\n }\n \f\n /* Builtins.  */"}, {"sha": "cffbadff6e997aceb15a8456e136c5bd90a374d0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "patch": "@@ -878,7 +878,7 @@ static bool ix86_expand_carry_flag_compare (enum rtx_code, rtx, rtx, rtx*);\n static tree ix86_build_builtin_va_list (void);\n static void ix86_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n-static void ix86_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p);\n+static tree ix86_gimplify_va_arg (tree, tree, tree *, tree *);\n \n struct ix86_address\n {\n@@ -3418,11 +3418,9 @@ ix86_va_arg (tree valist, tree type)\n \n /* Lower VA_ARG_EXPR at gimplification time.  */\n \n-void\n-ix86_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p)\n+tree\n+ix86_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n-  tree valist = TREE_OPERAND (*expr_p, 0);\n-  tree type = TREE_TYPE (*expr_p);\n   static const int intreg[6] = { 0, 1, 2, 3, 4, 5 };\n   tree f_gpr, f_fpr, f_ovf, f_sav;\n   tree gpr, fpr, ovf, sav, t;\n@@ -3435,10 +3433,7 @@ ix86_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p)\n \n   /* Only 64bit target needs something special.  */\n   if (!TARGET_64BIT)\n-    {\n-      std_gimplify_va_arg_expr (expr_p, pre_p, post_p);\n-      return;\n-    }\n+    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n \n   f_gpr = TYPE_FIELDS (TREE_TYPE (va_list_type_node));\n   f_fpr = TREE_CHAIN (f_gpr);\n@@ -3595,12 +3590,12 @@ ix86_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p)\n \t\t  src_addr = int_addr;\n \t\t  src_offset = REGNO (reg) * 8;\n \t\t}\n-\t      src_addr = convert (addr_type, src_addr);\n+\t      src_addr = fold_convert (addr_type, src_addr);\n \t      src_addr = fold (build2 (PLUS_EXPR, addr_type, src_addr,\n \t\t\t\t       size_int (src_offset)));\n \t      src = build_fold_indirect_ref (src_addr);\n \n-\t      dest_addr = convert (addr_type, addr);\n+\t      dest_addr = fold_convert (addr_type, addr);\n \t      dest_addr = fold (build2 (PLUS_EXPR, addr_type, dest_addr,\n \t\t\t\t\tsize_int (INTVAL (XEXP (slot, 1)))));\n \t      dest = build_fold_indirect_ref (dest_addr);\n@@ -3661,11 +3656,11 @@ ix86_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p)\n     }\n \n   ptrtype = build_pointer_type (type);\n-  addr = convert (ptrtype, addr);\n+  addr = fold_convert (ptrtype, addr);\n \n   if (indirect_p)\n     addr = build_fold_indirect_ref (addr);\n-  *expr_p = build_fold_indirect_ref (addr);\n+  return build_fold_indirect_ref (addr);\n }\n \f\n /* Return nonzero if OP is either a i387 or SSE fp register.  */"}, {"sha": "519dc0570b3d6aeeb1d4e512e51d642b2cfdbb99", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "patch": "@@ -274,7 +274,7 @@ static void ia64_vms_init_libfuncs (void)\n static tree ia64_handle_model_attribute (tree *, tree, tree, int, bool *);\n static void ia64_encode_section_info (tree, rtx, int);\n static rtx ia64_struct_value_rtx (tree, int);\n-static void ia64_gimplify_va_arg (tree *, tree *, tree *);\n+static tree ia64_gimplify_va_arg (tree, tree, tree *, tree *);\n \n \f\n /* Table of valid machine attributes.  */\n@@ -3993,19 +3993,15 @@ ia64_va_arg (tree valist, tree type)\n   return std_expand_builtin_va_arg (valist, type);\n }\n \n-static void\n-ia64_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p)\n+static tree\n+ia64_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n-  tree valist = TREE_OPERAND (*expr_p, 0);\n-  tree type = TREE_TYPE (*expr_p);\n-\n   /* Variable sized types are passed by reference.  */\n   if (TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n     {\n-      TREE_TYPE (*expr_p) = build_pointer_type (type);\n-      std_gimplify_va_arg_expr (expr_p, pre_p, post_p);\n-      *expr_p = build_fold_indirect_ref (*expr_p);\n-      return;\n+      tree ptrtype = build_pointer_type (type);\n+      tree addr = std_gimplify_va_arg_expr (valist, ptrtype, pre_p, post_p);\n+      return build_fold_indirect_ref (addr);\n     }\n \n   /* Aggregate arguments with alignment larger than 8 bytes start at\n@@ -4023,7 +4019,7 @@ ia64_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p)\n       gimplify_and_add (t, pre_p);\n     }\n \n-  std_gimplify_va_arg_expr (expr_p, pre_p, post_p);\n+  return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n }\n \f\n /* Return 1 if function return value returned in memory.  Return 0 if it is"}, {"sha": "315cd50eda779064f399e67c52231be06d3283ee", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 50, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "patch": "@@ -440,7 +440,7 @@ static tree get_prev_label (tree function_name);\n #endif\n \n static tree rs6000_build_builtin_va_list (void);\n-static void rs6000_gimplify_va_arg (tree *, tree *, tree *);\n+static tree rs6000_gimplify_va_arg (tree, tree, tree *, tree *);\n \n /* Hash table stuff for keeping track of TOC entries.  */\n \n@@ -5292,11 +5292,9 @@ rs6000_va_arg (tree valist, tree type)\n   return addr_rtx;\n }\n \n-void\n-rs6000_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p)\n+tree\n+rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n-  tree valist = TREE_OPERAND (*expr_p, 0);\n-  tree type = TREE_TYPE (*expr_p);\n   tree f_gpr, f_fpr, f_res, f_ovf, f_sav;\n   tree gpr, fpr, ovf, sav, reg, t, u;\n   int indirect_p, size, rsize, n_reg, sav_ofs, sav_scale;\n@@ -5318,10 +5316,7 @@ rs6000_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p)\n \t\t      build_int_2 (POINTER_SIZE / BITS_PER_UNIT, 0));\n \t  t = build1 (NOP_EXPR, build_pointer_type (ptrtype), t);\n \t  t = build_fold_indirect_ref (t);\n-\t  t = build_fold_indirect_ref (t);\n-\n-\t  *expr_p = t;\n-\t  return;\n+\t  return build_fold_indirect_ref (t);\n \t}\n       if (targetm.calls.split_complex_arg\n \t  && TREE_CODE (type) == COMPLEX_TYPE)\n@@ -5332,52 +5327,24 @@ rs6000_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p)\n \n \t  if (elem_size < UNITS_PER_WORD)\n \t    {\n-\t      tree real_part, imag_addr, dest_real, rr;\n+\t      tree real_part, imag_part;\n \t      tree post = NULL_TREE;\n \n-\t      /* This is a bit tricky because we can't just feed the\n-\t\t VA_ARG_EXPRs back into gimplify_expr; if we did,\n-\t\t gimplify_va_arg_expr would complain about trying to pass a\n-\t\t float. */\n-\t      real_part = build1 (VA_ARG_EXPR, elem_type, valist);\n-\t      rs6000_gimplify_va_arg (&real_part, pre_p, &post);\n-\t      gimplify_expr (&real_part, pre_p, &post, is_gimple_val,\n-\t\t\t     fb_rvalue);\n+\t      real_part = rs6000_gimplify_va_arg (valist, elem_type, pre_p,\n+\t\t\t\t\t\t  &post);\n+\t      /* Copy the value into a temporary, lest the formal temporary\n+\t\t be reused out from under us.  */\n+\t      real_part = get_initialized_tmp_var (real_part, pre_p, &post);\n \t      append_to_statement_list (post, pre_p);\n \n-\t      imag_addr = build1 (VA_ARG_EXPR, elem_type, valist);\n-\t      rs6000_gimplify_va_arg (&imag_addr, pre_p, post_p);\n-\t      imag_addr = build_fold_addr_expr (imag_addr);\n-\t      gimplify_expr (&imag_addr, pre_p, post_p, is_gimple_val,\n-\t\t\t     fb_rvalue);\n-\n-\t      /* We're not returning the value here, but the address.\n-\t\t real_part and imag_part are not contiguous, and we know\n-\t\t there is space available to pack real_part next to\n-\t\t imag_part.  float _Complex is not promoted to\n-\t\t double _Complex by the default promotion rules that\n-\t\t promote float to double.  */\n-\t      if (2 * elem_size > UNITS_PER_WORD)\n-\t\tabort ();\n-\n-\t      dest_real = fold (build2 (MINUS_EXPR, TREE_TYPE (imag_addr),\n-\t\t\t\t\timag_addr, ssize_int (elem_size)));\n-\t      gimplify_expr (&dest_real, pre_p, post_p, is_gimple_val,\n-\t\t\t     fb_rvalue);\n+\t      imag_part = rs6000_gimplify_va_arg (valist, elem_type, pre_p,\n+\t\t\t\t\t\t  post_p);\n \n-\t      rr = build_fold_indirect_ref (dest_real);\n-\t      rr = build2 (MODIFY_EXPR, void_type_node, rr, real_part);\n-\t      gimplify_and_add (rr, pre_p);\n-\n-\t      dest_real = convert (build_pointer_type (type), dest_real);\n-\t      *expr_p = build_fold_indirect_ref (dest_real);\n-\n-\t      return;\n+\t      return build (COMPLEX_EXPR, type, real_part, imag_part);\n \t    }\n \t}\n \n-      std_gimplify_va_arg_expr (expr_p, pre_p, post_p);\n-      return;\n+      return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n     }\n \n   f_gpr = TYPE_FIELDS (TREE_TYPE (va_list_type_node));\n@@ -5520,13 +5487,13 @@ rs6000_gimplify_va_arg (tree *expr_p, tree *pre_p, tree *post_p)\n \n   if (indirect_p)\n     {\n-      addr = convert (build_pointer_type (ptrtype), addr);\n+      addr = fold_convert (build_pointer_type (ptrtype), addr);\n       addr = build_fold_indirect_ref (addr);\n     }\n   else\n-    addr = convert (ptrtype, addr);\n+    addr = fold_convert (ptrtype, addr);\n \n-  *expr_p = build_fold_indirect_ref (addr);\n+  return build_fold_indirect_ref (addr);\n }\n \n /* Builtins.  */"}, {"sha": "0d4d647cf7701688cba83dbcadeb56cbbbf6bc44", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "patch": "@@ -3864,6 +3864,19 @@ The default value of this hook is @code{NULL}, which is treated as always\n false.\n @end deftypefn\n \n+@deftypefn {Target Hook} tree TARGET_GIMPLIFY_VA_ARG_EXPR (tree @var{valist}, tree @var{type}, tree *@var{pre_p}, tree *@var{post_p})\n+This hook performs target-specific gimplification of\n+@code{VA_ARG_EXPR}.  The first two parameters correspond to the\n+arguments to @code{va_arg}; the latter two are as in\n+@code{gimplify.c:gimplify_expr}.\n+\n+You only need to define this hook if you also define\n+@code{EXPAND_BUILTIN_VA_ARG}; it is pretty easy to reuse the same code\n+for both.  One significant difference is that\n+@code{EXPAND_BUILTIN_VA_ARG} returns an address, whereas this hook\n+produces an expression of type @var{type}, usually an @code{INDIRECT_REF}.\n+@end deftypefn\n+\n @node Scalar Return\n @subsection How Scalar Function Values Are Returned\n @cindex return values in registers"}, {"sha": "3b9af5da4f23647990887043ed70b4029fb3175e", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "patch": "@@ -472,7 +472,7 @@ struct gcc_target\n     bool (* split_complex_arg) (tree type);\n \n     /* Gimplifies a VA_ARG_EXPR.  */\n-    void (* gimplify_va_arg_expr) (tree *expr_p, tree *pre_p,\n+    tree (* gimplify_va_arg_expr) (tree valist, tree type, tree *pre_p,\n \t\t\t\t   tree *post_p);\n   } calls;\n "}, {"sha": "c433c1eec5fc485f4dc024b2d43e6057e3f52ea5", "filename": "gcc/tree-gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Ftree-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e/gcc%2Ftree-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.h?ref=23a60a0436f48f1de4e5bf124f29f0e4a32e7d4e", "patch": "@@ -123,7 +123,7 @@ tree alloc_stmt_list (void);\n void free_stmt_list (tree);\n tree force_labels_r (tree *, int *, void *);\n enum gimplify_status gimplify_va_arg_expr (tree *, tree *, tree *);\n-void std_gimplify_va_arg_expr (tree *, tree *, tree *);\n+tree std_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \n /* In tree-nested.c.  */\n extern void lower_nested_functions (tree);"}]}