{"sha": "30d1e8483fd48f39a3155b251f9eca57ba4f8210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBkMWU4NDgzZmQ0OGYzOWEzMTU1YjI1MWY5ZWNhNTdiYTRmODIxMA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-07-28T05:21:38Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-07-28T05:21:38Z"}, "message": "pa.md (post_store, pre_load): New expanders.\n\n        * pa.md (post_store, pre_load): New expanders.\n        (post_stwm, pre_ldwm): Renamed to post_stw and pre_ldw respectively.\n        (post_ldwm, pre_stwm): Make these unnamed patterns since we never\n        need to directly generate RTL for them.\n        * pa.c (hppa_expand_prologue, hppa_expand_epilogue): Corresponding\n        changes.\n\nFrom-SVN: r28307", "tree": {"sha": "8334a8f8bafa9467a4a615f6a2ee1b73ce8980a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8334a8f8bafa9467a4a615f6a2ee1b73ce8980a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30d1e8483fd48f39a3155b251f9eca57ba4f8210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d1e8483fd48f39a3155b251f9eca57ba4f8210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d1e8483fd48f39a3155b251f9eca57ba4f8210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d1e8483fd48f39a3155b251f9eca57ba4f8210/comments", "author": null, "committer": null, "parents": [{"sha": "adec3b83de5bb9ee9400260b7b217fc923f27507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adec3b83de5bb9ee9400260b7b217fc923f27507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adec3b83de5bb9ee9400260b7b217fc923f27507"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "65a8941ae675c8bf5c6d2bbcfe7e0ee41cdaa3fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d1e8483fd48f39a3155b251f9eca57ba4f8210/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d1e8483fd48f39a3155b251f9eca57ba4f8210/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30d1e8483fd48f39a3155b251f9eca57ba4f8210", "patch": "@@ -1,3 +1,12 @@\n+Tue Jul 27 23:20:21 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.md (post_store, pre_load): New expanders.\n+\t(post_stwm, pre_ldwm): Renamed to post_stw and pre_ldw respectively.\n+\t(post_ldwm, pre_stwm): Make these unnamed patterns since we never\n+\tneed to directly generate RTL for them.\n+\t* pa.c (hppa_expand_prologue, hppa_expand_epilogue): Corresponding\n+\tchanges.\n+\n Tue Jul 27 16:05:52 1999  David Edelsohn  <edelsohn@gnu.org>\n \n \t* aix43.h (ASM_CPU_SPEC, CPP_CPU_SPEC): Add rs64a and PPC630."}, {"sha": "33efebca79baf1aca6895f4cfb88ea9be8b4f1e2", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d1e8483fd48f39a3155b251f9eca57ba4f8210/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d1e8483fd48f39a3155b251f9eca57ba4f8210/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=30d1e8483fd48f39a3155b251f9eca57ba4f8210", "patch": "@@ -2688,7 +2688,7 @@ hppa_expand_prologue()\n \temit_move_insn (tmpreg, frame_pointer_rtx);\n \temit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n \tif (VAL_14_BITS_P (actual_fsize))\n-\t  emit_insn (gen_post_stwm (stack_pointer_rtx, tmpreg, size_rtx));\n+\t  emit_insn (gen_post_store (stack_pointer_rtx, tmpreg, size_rtx));\n \telse\n \t  {\n \t    /* It is incorrect to store the saved frame pointer at *sp,\n@@ -2697,7 +2697,8 @@ hppa_expand_prologue()\n \t       So instead use stwm to store at *sp and post-increment the\n \t       stack pointer as an atomic operation.  Then increment sp to\n \t       finish allocating the new frame.  */\n-\t    emit_insn (gen_post_stwm (stack_pointer_rtx, tmpreg, GEN_INT (64)));\n+\t    emit_insn (gen_post_store (stack_pointer_rtx, tmpreg,\n+\t\t       GEN_INT (64)));\n \t    set_reg_plus_d (STACK_POINTER_REGNUM,\n \t\t\t    STACK_POINTER_REGNUM,\n \t\t\t    actual_fsize - 64);\n@@ -2820,9 +2821,9 @@ hppa_expand_prologue()\n \t    if (merge_sp_adjust_with_store)\n \t      {\n \t\tmerge_sp_adjust_with_store = 0;\n-\t        emit_insn (gen_post_stwm (stack_pointer_rtx,\n-\t\t\t\t\t  gen_rtx_REG (word_mode, i),\n-\t\t\t\t\t  GEN_INT (-offset)));\n+\t        emit_insn (gen_post_store (stack_pointer_rtx,\n+\t\t\t\t\t   gen_rtx_REG (word_mode, i),\n+\t\t\t\t\t   GEN_INT (-offset)));\n \t      }\n \t    else\n \t      store_reg (i, offset, STACK_POINTER_REGNUM);\n@@ -3032,13 +3033,13 @@ hppa_expand_epilogue ()\n   else if (frame_pointer_needed)\n     {\n       set_reg_plus_d (STACK_POINTER_REGNUM, FRAME_POINTER_REGNUM, 64);\n-      emit_insn (gen_pre_ldwm (frame_pointer_rtx, \n+      emit_insn (gen_pre_load (frame_pointer_rtx, \n \t\t\t       stack_pointer_rtx,\n \t\t\t       GEN_INT (-64)));\n     }\n   /* If we were deferring a callee register restore, do it now.  */\n   else if (! frame_pointer_needed  && merge_sp_adjust_with_load)\n-    emit_insn (gen_pre_ldwm (gen_rtx_REG (word_mode, merge_sp_adjust_with_load),\n+    emit_insn (gen_pre_load (gen_rtx_REG (word_mode, merge_sp_adjust_with_load),\n \t\t\t     stack_pointer_rtx,\n \t\t\t     GEN_INT (- actual_fsize)));\n   else if (actual_fsize != 0)"}, {"sha": "af209c3d6eec054245b4680e72cb36c38af99463", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d1e8483fd48f39a3155b251f9eca57ba4f8210/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d1e8483fd48f39a3155b251f9eca57ba4f8210/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=30d1e8483fd48f39a3155b251f9eca57ba4f8210", "patch": "@@ -1478,7 +1478,20 @@\n \n ;; Load or store with base-register modification.\n \n-(define_insn \"pre_ldwm\"\n+(define_expand \"pre_load\"\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t      (mem (plus (match_operand 1 \"register_operand\" \"\")\n+\t\t\t       (match_operand 2 \"pre_cint_operand\" \"\"))))\n+\t      (set (match_dup 1)\n+\t\t   (plus (match_dup 1) (match_dup 2)))])]\n+  \"\"\n+  \"\n+{\n+  emit_insn (gen_pre_ldw (operands[0], operands[1], operands[2]));\n+  DONE;\n+}\")\n+\n+(define_insn \"pre_ldw\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"+r\")\n \t\t\t (match_operand:SI 2 \"pre_cint_operand\" \"\"))))\n@@ -1494,7 +1507,7 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"pre_stwm\"\n+(define_insn \"\"\n   [(set (mem:SI (plus:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n \t\t\t (match_operand:SI 1 \"pre_cint_operand\" \"\")))\n \t(match_operand:SI 2 \"reg_or_0_operand\" \"rM\"))\n@@ -1510,7 +1523,7 @@\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"post_ldwm\"\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(mem:SI (match_operand:SI 1 \"register_operand\" \"+r\")))\n    (set (match_dup 1)\n@@ -1526,7 +1539,20 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"post_stwm\"\n+(define_expand \"post_store\"\n+  [(parallel [(set (mem (match_operand 0 \"register_operand\" \"\"))\n+\t\t   (match_operand 1 \"reg_or_0_operand\" \"\"))\n+\t      (set (match_dup 0)\n+\t\t   (plus (match_dup 0)\n+\t\t\t (match_operand 2 \"post_cint_operand\" \"\")))])]\n+  \"\"\n+  \"\n+{\n+  emit_insn (gen_post_stw (operands[0], operands[1], operands[2]));\n+  DONE;\n+}\")\n+\n+(define_insn \"post_stw\"\n   [(set (mem:SI (match_operand:SI 0 \"register_operand\" \"+r\"))\n \t(match_operand:SI 1 \"reg_or_0_operand\" \"rM\"))\n    (set (match_dup 0)"}]}