{"sha": "473432eb026530ae681374368552bfe0579273b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDczNDMyZWIwMjY1MzBhZTY4MTM3NDM2ODU1MmJmZTA1NzkyNzNiNg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-11-24T23:00:07Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-11-24T23:00:07Z"}, "message": "2003-11-25  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramSocket.java\n\t(DatagramSocket): Move binding code to bind(), simplify constructors.\n\t* java/net/MulticastSocket.java\n\t(MulticastSocket): Call parent constructor with null argument,\n\tbind socket after setReuseAddress is called, simplify constructors.\n\nFrom-SVN: r73902", "tree": {"sha": "cb7cfa884411e2b3f061ad5ba401cee5fd2579bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb7cfa884411e2b3f061ad5ba401cee5fd2579bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/473432eb026530ae681374368552bfe0579273b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473432eb026530ae681374368552bfe0579273b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/473432eb026530ae681374368552bfe0579273b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473432eb026530ae681374368552bfe0579273b6/comments", "author": null, "committer": null, "parents": [{"sha": "4c1bbd67f92676cc59d8ab173a12f14288d676fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1bbd67f92676cc59d8ab173a12f14288d676fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c1bbd67f92676cc59d8ab173a12f14288d676fd"}], "stats": {"total": 94, "additions": 55, "deletions": 39}, "files": [{"sha": "9f521ef87b4b353bc05545e0e051f74d2143c552", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473432eb026530ae681374368552bfe0579273b6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473432eb026530ae681374368552bfe0579273b6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=473432eb026530ae681374368552bfe0579273b6", "patch": "@@ -1,3 +1,11 @@\n+2003-11-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramSocket.java\n+\t(DatagramSocket): Move binding code to bind(), simplify constructors.\n+\t* java/net/MulticastSocket.java\n+\t(MulticastSocket): Call parent constructor with null argument,\n+\tbind socket after setReuseAddress is called, simplify constructors.\n+\n 2003-11-24  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/BoxLayout.java"}, {"sha": "59344455e273520c2f0760ceaa7af4371c29de28", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 41, "deletions": 33, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473432eb026530ae681374368552bfe0579273b6/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473432eb026530ae681374368552bfe0579273b6/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=473432eb026530ae681374368552bfe0579273b6", "patch": "@@ -138,21 +138,32 @@ public DatagramSocket(int port) throws SocketException\n    * the specified local port and address.\n    *\n    * @param port The local port number to bind to.\n-   * @param laddr The local address to bind to.\n+   * @param addr The local address to bind to.\n    *\n    * @exception SecurityException If a security manager exists and its\n    * checkListen method doesn't allow the operation.\n    * @exception SocketException If an error occurs.\n    */\n-  public DatagramSocket(int port, InetAddress laddr) throws SocketException\n+  public DatagramSocket(int port, InetAddress addr) throws SocketException\n   {\n-    if (port < 0 || port > 65535)\n-      throw new IllegalArgumentException(\"Invalid port: \" + port);\n-\n-    SecurityManager s = System.getSecurityManager();\n-    if (s != null)\n-      s.checkListen(port);\n+    this(new InetSocketAddress(addr, port));\n+  }\n \n+  /**\n+   * Initializes a new instance of <code>DatagramSocket</code> that binds to \n+   * the specified local port and address.\n+   *\n+   * @param port The local port number to bind to.\n+   * @param laddr The local address to bind to.\n+   *\n+   * @exception SecurityException If a security manager exists and its\n+   * <code>checkListen</code> method doesn't allow the operation.\n+   * @exception SocketException If an error occurs.\n+   *\n+   * @since 1.4\n+   */\n+  public DatagramSocket (SocketAddress address) throws SocketException\n+  {\n     String propVal = System.getProperty(\"impl.prefix\");\n     if (propVal == null || propVal.equals(\"\"))\n       impl = new PlainDatagramSocketImpl();\n@@ -170,48 +181,45 @@ public DatagramSocket(int port, InetAddress laddr) throws SocketException\n \t}\n     impl.create();\n \n-    if (laddr == null)\n-      laddr = InetAddress.ANY_IF;\n+    if (address == null)\n+      return;\n+\n+    if (! (address instanceof InetSocketAddress))\n+      throw new SocketException(\"unsupported address type\");\n+\n+    InetAddress addr = ((InetSocketAddress) address).getAddress();\n+    int port = ((InetSocketAddress) address).getPort();\n+\n+    if (port < 0 || port > 65535)\n+      throw new IllegalArgumentException(\"Invalid port: \" + port);\n+\n+    SecurityManager s = System.getSecurityManager();\n+    if (s != null)\n+      s.checkListen(port);\n+\n+    if (addr == null)\n+      addr = InetAddress.ANY_IF;\n     \n     try\n       {\n-        impl.bind (port, laddr);\n+        impl.bind(port, addr);\n       }\n     catch (SocketException exception)\n       {\n-        impl.close ();\n+        impl.close();\n         throw exception;\n       }\n     catch (RuntimeException exception)\n       {\n-        impl.close ();\n+        impl.close();\n         throw exception;\n       }\n     catch (Error error)\n       {\n-        impl.close ();\n+        impl.close();\n         throw error;\n       }\n   }\n-\n-  /**\n-   * Initializes a new instance of <code>DatagramSocket</code> that binds to \n-   * the specified local port and address.\n-   *\n-   * @param port The local port number to bind to.\n-   * @param laddr The local address to bind to.\n-   *\n-   * @exception SecurityException If a security manager exists and its\n-   * <code>checkListen</code> method doesn't allow the operation.\n-   * @exception SocketException If an error occurs.\n-   *\n-   * @since 1.4\n-   */\n-  public DatagramSocket (SocketAddress address) throws SocketException\n-  {\n-    this (((InetSocketAddress) address).getPort (),\n-          ((InetSocketAddress) address).getAddress ());\n-  }\n   \n   /**\n    * Closes this datagram socket."}, {"sha": "097d52e9a5c22ea831fe55c8709e483d1cc79000", "filename": "libjava/java/net/MulticastSocket.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473432eb026530ae681374368552bfe0579273b6/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473432eb026530ae681374368552bfe0579273b6/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMulticastSocket.java?ref=473432eb026530ae681374368552bfe0579273b6", "patch": "@@ -80,8 +80,7 @@ public class MulticastSocket extends DatagramSocket\n    */\n   public MulticastSocket() throws IOException\n   {\n-    super(0, null);\n-    setReuseAddress (true);\n+    this(new InetSocketAddress(0));\n   }\n \n   /**\n@@ -95,8 +94,7 @@ public MulticastSocket() throws IOException\n    */\n   public MulticastSocket(int port) throws IOException\n   {\n-    super(port, null);\n-    setReuseAddress (true);\n+    this(new InetSocketAddress(port));\n   }\n \n   /**\n@@ -112,8 +110,10 @@ public MulticastSocket(int port) throws IOException\n    */\n   public MulticastSocket(SocketAddress address) throws IOException\n   {\n-    super(address);\n-    setReuseAddress (true);\n+    super((SocketAddress) null);\n+    setReuseAddress(true);\n+    if (address != null)\n+      bind(address);\n   }\n   \n   /**"}]}