{"sha": "5d5f6720272e122f628bd110c097237c17183035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1ZjY3MjAyNzJlMTIyZjYyOGJkMTEwYzA5NzIzN2MxNzE4MzAzNQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-10-01T17:29:40Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-10-01T17:29:40Z"}, "message": "install.texi (--with-cpu): Mention ARC.\n\n2013-10-01  Joern Rennecke  <joern.rennecke@embecosm.com>\n            Jeremy Bennett  <jeremy.bennett@embecosm.com>\n\n        * doc/install.texi (--with-cpu): Mention ARC.\n        (arc-*-elf32): New paragraph.\n        (arc-linux-uclibc): Likewise.\n        * doc/md.texi (Machine Constraints): Add ARC part.\n        * doc/invoke.texi: (menu): Add ARC Options.\n        (Machine Dependent Options) <ARC Options>: Add synopsis.\n        (node ARC Options): Add.\n        * doc/extend.texi (long_call / short_call attribute): Add ARC.\n        (ARC Built-in Functions): New section defining\n        generic ARC built-in functions.\n        (ARC SIMD Built-in Functions): New section defining SIMD specific\n        built-in functions.\n        (Declaring Attributes of Functions): Extended\n        description of short_call and long_call attributes for ARC and\n        added index entries.\n\n\nCo-Authored-By: Jeremy Bennett <jeremy.bennett@embecosm.com>\n\nFrom-SVN: r203074", "tree": {"sha": "b665197f55ebe4b4ec82ea6516b0fb205e1aab13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b665197f55ebe4b4ec82ea6516b0fb205e1aab13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d5f6720272e122f628bd110c097237c17183035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5f6720272e122f628bd110c097237c17183035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5f6720272e122f628bd110c097237c17183035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5f6720272e122f628bd110c097237c17183035/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d38a64b4e0b3b1a27afc2d660144032e68f41135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38a64b4e0b3b1a27afc2d660144032e68f41135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d38a64b4e0b3b1a27afc2d660144032e68f41135"}], "stats": {"total": 1081, "additions": 1072, "deletions": 9}, "files": [{"sha": "3de3cf60fcab2407681130f781e8819e16450c75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5f6720272e122f628bd110c097237c17183035/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5f6720272e122f628bd110c097237c17183035/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d5f6720272e122f628bd110c097237c17183035", "patch": "@@ -1,3 +1,22 @@\n+2013-10-01  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\t    Jeremy Bennett  <jeremy.bennett@embecosm.com>\n+\n+\t* doc/install.texi (--with-cpu): Mention ARC.\n+\t(arc-*-elf32): New paragraph.\n+\t(arc-linux-uclibc): Likewise.\n+\t* doc/md.texi (Machine Constraints): Add ARC part.\n+\t* doc/invoke.texi: (menu): Add ARC Options.\n+\t(Machine Dependent Options) <ARC Options>: Add synopsis.\n+\t(node ARC Options): Add.\n+\t* doc/extend.texi (long_call / short_call attribute): Add ARC.\n+\t(ARC Built-in Functions): New section defining\n+\tgeneric ARC built-in functions.\n+\t(ARC SIMD Built-in Functions): New section defining SIMD specific\n+\tbuilt-in functions.\n+\t(Declaring Attributes of Functions): Extended\n+\tdescription of short_call and long_call attributes for ARC and\n+\tadded index entries.\n+\n 2013-10-01  Saurabh Verma  <saurabh.verma@codito.com>\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@codito.com>\n \t    Joern Rennecke  <joern.rennecke@embecosm.com>"}, {"sha": "ef10f4c0b067b416dc9969aa03cd58a56ae86224", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 462, "deletions": 7, "changes": 469, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5f6720272e122f628bd110c097237c17183035/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5f6720272e122f628bd110c097237c17183035/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5d5f6720272e122f628bd110c097237c17183035", "patch": "@@ -2813,8 +2813,9 @@ least version 2.20.1), and GNU C library (at least version 2.11.1).\n \n @item interrupt\n @cindex interrupt handler functions\n-Use this attribute on the ARM, AVR, CR16, Epiphany, M32C, M32R/D, m68k, MeP, MIPS,\n-MSP430, RL78, RX and Xstormy16 ports to indicate that the specified function is an\n+Use this attribute on the ARC, ARM, AVR, CR16, Epiphany, M32C, M32R/D,\n+m68k, MeP, MIPS, MSP430, RL78, RX and Xstormy16 ports to indicate that\n+the specified function is an\n interrupt handler.  The compiler generates function entry and exit\n sequences suitable for use in an interrupt handler when this attribute\n is present.  With Epiphany targets it may also generate a special section with\n@@ -2823,6 +2824,16 @@ code to initialize the interrupt vector table.\n Note, interrupt handlers for the Blackfin, H8/300, H8/300H, H8S, MicroBlaze,\n and SH processors can be specified via the @code{interrupt_handler} attribute.\n \n+Note, on the ARC, you must specify the kind of interrupt to be handled\n+in a parameter to the interrupt attribute like this:\n+\n+@smallexample\n+void f () __attribute__ ((interrupt (\"ilink1\")));\n+@end smallexample\n+\n+Permissible values for this parameter are: @w{@code{ilink1}} and\n+@w{@code{ilink2}}.\n+\n Note, on the AVR, the hardware globally disables interrupts when an\n interrupt is executed.  The first instruction of an interrupt handler\n declared with this attribute is a @code{SEI} instruction to\n@@ -3021,18 +3032,33 @@ unit.  This is to allow easy merging of multiple compilation units into one,\n for example, by using the link-time optimization.  For this reason the\n attribute is not allowed on types to annotate indirect calls.\n \n-@item long_call/short_call\n+@item long_call/medium_call/short_call\n+@cindex indirect calls on ARC\n @cindex indirect calls on ARM\n-This attribute specifies how a particular function is called on\n-ARM and Epiphany.  Both attributes override the\n-@option{-mlong-calls} (@pxref{ARM Options})\n-command-line switch and @code{#pragma long_calls} settings.  The\n+@cindex indirect calls on Epiphany\n+These attribute specifies how a particular function is called on\n+ARC, ARM and Epiphany - with @code{medium_call} being specific to ARC.\n+These attributes override the\n+@option{-mlong-calls} (@pxref{ARM Options} and @ref{ARC Options})\n+and @option{-mmedium-calls} (@pxref{ARC Options})\n+command-line switches and @code{#pragma long_calls} settings.  For ARM, the\n @code{long_call} attribute indicates that the function might be far\n away from the call site and require a different (more expensive)\n calling sequence.   The @code{short_call} attribute always places\n the offset to the function from the call site into the @samp{BL}\n instruction directly.\n \n+For ARC, a function marked with the @code{long_call} attribute is\n+always called using register-indirect jump-and-link instructions,\n+thereby enabling the called function to be placed anywhere within the\n+32-bit address space.  A function marked with the @code{medium_call}\n+attribute will always be close enough to be called with an unconditional\n+branch-and-link instruction, which has a 25-bit offset from\n+the call site.  A function marked with the @code{short_call}\n+attribute will always be close enough to be called with a conditional\n+branch-and-link instruction, which has a 21-bit offset from\n+the call site.\n+\n @item longcall/shortcall\n @cindex functions called via pointer on the RS/6000 and PowerPC\n On the Blackfin, RS/6000 and PowerPC, the @code{longcall} attribute\n@@ -8870,6 +8896,8 @@ instructions, but allow the compiler to schedule those calls.\n \n @menu\n * Alpha Built-in Functions::\n+* ARC Built-in Functions::\n+* ARC SIMD Built-in Functions::\n * ARM iWMMXt Built-in Functions::\n * ARM NEON Intrinsics::\n * AVR Built-in Functions::\n@@ -8977,6 +9005,430 @@ void *__builtin_thread_pointer (void)\n void __builtin_set_thread_pointer (void *)\n @end smallexample\n \n+@node ARC Built-in Functions\n+@subsection ARC Built-in Functions\n+\n+The following built-in functions are provided for ARC targets.  The\n+built-ins generate the corresponding assembly instructions.  In the\n+examples given below, the generated code often requires an operand or\n+result to be in a register.  Where necessary further code will be\n+generated to ensure this is true, but for brevity this is not\n+described in each case.\n+\n+@emph{Note:} Using a built-in to generate an instruction not supported\n+by a target may cause problems. At present the compiler is not\n+guaranteed to detect such misuse, and as a result an internal compiler\n+error may be generated.\n+\n+@deftypefn {Built-in Function} int __builtin_arc_aligned (void *@var{val}, int @var{alignval})\n+Return 1 if @var{val} is known to have the byte alignment given\n+by @var{alignval}, otherwise return 0.\n+Note that this is different from\n+@smallexample\n+__alignof__(*(char *)@var{val}) >= alignval\n+@end smallexample\n+because __alignof__ sees only the type of the dereference, wheras\n+__builtin_arc_align uses alignment information from the pointer\n+as well as from the pointed-to type.\n+The information available will depend on optimization level.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __builtin_arc_brk (void)\n+Generates\n+@example\n+brk\n+@end example\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} {unsigned int} __builtin_arc_core_read (unsigned int @var{regno})\n+The operand is the number of a register to be read.  Generates:\n+@example\n+mov  @var{dest}, r@var{regno}\n+@end example\n+where the value in @var{dest} will be the result returned from the\n+built-in.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __builtin_arc_core_write (unsigned int @var{regno}, unsigned int @var{val})\n+The first operand is the number of a register to be written, the\n+second operand is a compile time constant to write into that\n+register.  Generates:\n+@example\n+mov  r@var{regno}, @var{val}\n+@end example\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_arc_divaw (int @var{a}, int @var{b})\n+Only available if either @option{-mcpu=ARC700} or @option{-meA} is set.\n+Generates:\n+@example\n+divaw  @var{dest}, @var{a}, @var{b}\n+@end example\n+where the value in @var{dest} will be the result returned from the\n+built-in.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __builtin_arc_flag (unsigned int @var{a})\n+Generates\n+@example\n+flag  @var{a}\n+@end example\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} {unsigned int} __builtin_arc_lr (unsigned int @var{auxr})\n+The operand, @var{auxv}, is the address of an auxiliary register and\n+must be a compile time constant.  Generates:\n+@example\n+lr  @var{dest}, [@var{auxr}]\n+@end example\n+Where the value in @var{dest} will be the result returned from the\n+built-in.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __builtin_arc_mul64 (int @var{a}, int @var{b})\n+Only available with @option{-mmul64}.  Generates:\n+@example\n+mul64  @var{a}, @var{b}\n+@end example\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __builtin_arc_mulu64 (unsigned int @var{a}, unsigned int @var{b})\n+Only available with @option{-mmul64}.  Generates:\n+@example\n+mulu64  @var{a}, @var{b}\n+@end example\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __builtin_arc_nop (void)\n+Generates:\n+@example\n+nop\n+@end example\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_arc_norm (int @var{src})\n+Only valid if the @samp{norm} instruction is available through the\n+@option{-mnorm} option or by default with @option{-mcpu=ARC700}.\n+Generates:\n+@example\n+norm  @var{dest}, @var{src}\n+@end example\n+Where the value in @var{dest} will be the result returned from the\n+built-in.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function}  {short int} __builtin_arc_normw (short int @var{src})\n+Only valid if the @samp{normw} instruction is available through the\n+@option{-mnorm} option or by default with @option{-mcpu=ARC700}.\n+Generates:\n+@example\n+normw  @var{dest}, @var{src}\n+@end example\n+Where the value in @var{dest} will be the result returned from the\n+built-in.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function}  void __builtin_arc_rtie (void)\n+Generates:\n+@example\n+rtie\n+@end example\n+@end deftypefn\n+\n+@deftypefn {Built-in Function}  void __builtin_arc_sleep (int @var{a}\n+Generates:\n+@example\n+sleep  @var{a}\n+@end example\n+@end deftypefn\n+\n+@deftypefn {Built-in Function}  void __builtin_arc_sr (unsigned int @var{auxr}, unsigned int @var{val})\n+The first argument, @var{auxv}, is the address of an auxiliary\n+register, the second argument, @var{val}, is a compile time constant\n+to be written to the register.  Generates:\n+@example\n+sr  @var{auxr}, [@var{val}]\n+@end example\n+@end deftypefn\n+\n+@deftypefn {Built-in Function}  int __builtin_arc_swap (int @var{src})\n+Only valid with @option{-mswap}.  Generates:\n+@example\n+swap  @var{dest}, @var{src}\n+@end example\n+Where the value in @var{dest} will be the result returned from the\n+built-in.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function}  void __builtin_arc_swi (void)\n+Generates:\n+@example\n+swi\n+@end example\n+@end deftypefn\n+\n+@deftypefn {Built-in Function}  void __builtin_arc_sync (void)\n+Only available with @option{-mcpu=ARC700}.  Generates:\n+@example\n+sync\n+@end example\n+@end deftypefn\n+\n+@deftypefn {Built-in Function}  void __builtin_arc_trap_s (unsigned int @var{c})\n+Only available with @option{-mcpu=ARC700}.  Generates:\n+@example\n+trap_s  @var{c}\n+@end example\n+@end deftypefn\n+\n+@deftypefn {Built-in Function}  void __builtin_arc_unimp_s (void)\n+Only available with @option{-mcpu=ARC700}.  Generates:\n+@example\n+unimp_s\n+@end example\n+@end deftypefn\n+\n+The instructions generated by the following builtins are not\n+considered as candidates for scheduling.  They are not moved around by\n+the compiler during scheduling, and thus can be expected to appear\n+where they are put in the C code:\n+@example\n+__builtin_arc_brk()\n+__builtin_arc_core_read()\n+__builtin_arc_core_write()\n+__builtin_arc_flag()\n+__builtin_arc_lr()\n+__builtin_arc_sleep()\n+__builtin_arc_sr()\n+__builtin_arc_swi()\n+@end example\n+\n+@node ARC SIMD Built-in Functions\n+@subsection ARC SIMD Built-in Functions\n+\n+SIMD builtins provided by the compiler can be used to generate the\n+vector instructions.  This section describes the available builtins\n+and their usage in programs.  With the @option{-msimd} option, the\n+compiler provides 128-bit vector types, which can be specified using\n+the @code{vector_size} attribute.  The header file @file{arc-simd.h}\n+can be included to use the following predefined types:\n+@example\n+typedef int __v4si   __attribute__((vector_size(16)));\n+typedef short __v8hi __attribute__((vector_size(16)));\n+@end example\n+\n+These types can be used to define 128-bit variables.  The built-in\n+functions listed in the following section can be used on these\n+variables to generate the vector operations.\n+\n+For all builtins, @code{__builtin_arc_@var{someinsn}}, the header file\n+@file{arc-simd.h} also provides equivalent macros called\n+@code{_@var{someinsn}} that can be used for programming ease and\n+improved readability.  The following macros for DMA control are also\n+provided:\n+@example\n+#define _setup_dma_in_channel_reg _vdiwr\n+#define _setup_dma_out_channel_reg _vdowr\n+@end example\n+\n+The following is a complete list of all the SIMD built-ins provided\n+for ARC, grouped by calling signature.\n+\n+The following take two @code{__v8hi} arguments and return a\n+@code{__v8hi} result:\n+@example\n+__v8hi __builtin_arc_vaddaw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vaddw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vand (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vandaw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vavb (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vavrb (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vbic (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vbicaw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vdifaw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vdifw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_veqw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vh264f (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vh264ft (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vh264fw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vlew (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vltw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmaxaw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmaxw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vminaw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vminw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr1aw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr1w (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr2aw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr2w (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr3aw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr3w (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr4aw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr4w (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr5aw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr5w (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr6aw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr6w (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr7aw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmr7w (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmrb (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmulaw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmulfaw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmulfw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vmulw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vnew (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vor (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vsubaw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vsubw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vsummw (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vvc1f (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vvc1ft (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vxor (__v8hi, __v8hi)\n+__v8hi __builtin_arc_vxoraw (__v8hi, __v8hi)\n+@end example\n+\n+The following take one @code{__v8hi} and one @code{int} argument and return a\n+@code{__v8hi} result:\n+\n+@example\n+__v8hi __builtin_arc_vbaddw (__v8hi, int)\n+__v8hi __builtin_arc_vbmaxw (__v8hi, int)\n+__v8hi __builtin_arc_vbminw (__v8hi, int)\n+__v8hi __builtin_arc_vbmulaw (__v8hi, int)\n+__v8hi __builtin_arc_vbmulfw (__v8hi, int)\n+__v8hi __builtin_arc_vbmulw (__v8hi, int)\n+__v8hi __builtin_arc_vbrsubw (__v8hi, int)\n+__v8hi __builtin_arc_vbsubw (__v8hi, int)\n+@end example\n+\n+The following take one @code{__v8hi} argument and one @code{int} argument which\n+must be a 3-bit compile time constant indicating a register number\n+I0-I7.  They return a @code{__v8hi} result.\n+@example\n+__v8hi __builtin_arc_vasrw (__v8hi, const int)\n+__v8hi __builtin_arc_vsr8 (__v8hi, const int)\n+__v8hi __builtin_arc_vsr8aw (__v8hi, const int)\n+@end example\n+\n+The following take one @code{__v8hi} argument and one @code{int}\n+argument which must be a 6-bit compile time constant.  They return a\n+@code{__v8hi} result.\n+@example\n+__v8hi __builtin_arc_vasrpwbi (__v8hi, const int)\n+__v8hi __builtin_arc_vasrrpwbi (__v8hi, const int)\n+__v8hi __builtin_arc_vasrrwi (__v8hi, const int)\n+__v8hi __builtin_arc_vasrsrwi (__v8hi, const int)\n+__v8hi __builtin_arc_vasrwi (__v8hi, const int)\n+__v8hi __builtin_arc_vsr8awi (__v8hi, const int)\n+__v8hi __builtin_arc_vsr8i (__v8hi, const int)\n+@end example\n+\n+The following take one @code{__v8hi} argument and one @code{int} argument which\n+must be a 8-bit compile time constant.  They return a @code{__v8hi}\n+result.\n+@example\n+__v8hi __builtin_arc_vd6tapf (__v8hi, const int)\n+__v8hi __builtin_arc_vmvaw (__v8hi, const int)\n+__v8hi __builtin_arc_vmvw (__v8hi, const int)\n+__v8hi __builtin_arc_vmvzw (__v8hi, const int)\n+@end example\n+\n+The following take two @code{int} arguments, the second of which which\n+must be a 8-bit compile time constant.  They return a @code{__v8hi}\n+result:\n+@example\n+__v8hi __builtin_arc_vmovaw (int, const int)\n+__v8hi __builtin_arc_vmovw (int, const int)\n+__v8hi __builtin_arc_vmovzw (int, const int)\n+@end example\n+\n+The following take a single @code{__v8hi} argument and return a\n+@code{__v8hi} result:\n+@example\n+__v8hi __builtin_arc_vabsaw (__v8hi)\n+__v8hi __builtin_arc_vabsw (__v8hi)\n+__v8hi __builtin_arc_vaddsuw (__v8hi)\n+__v8hi __builtin_arc_vexch1 (__v8hi)\n+__v8hi __builtin_arc_vexch2 (__v8hi)\n+__v8hi __builtin_arc_vexch4 (__v8hi)\n+__v8hi __builtin_arc_vsignw (__v8hi)\n+__v8hi __builtin_arc_vupbaw (__v8hi)\n+__v8hi __builtin_arc_vupbw (__v8hi)\n+__v8hi __builtin_arc_vupsbaw (__v8hi)\n+__v8hi __builtin_arc_vupsbw (__v8hi)\n+@end example\n+\n+The followign take two @code{int} arguments and return no result:\n+@example\n+void __builtin_arc_vdirun (int, int)\n+void __builtin_arc_vdorun (int, int)\n+@end example\n+\n+The following take two @code{int} arguments and return no result.  The\n+first argument must a 3-bit compile time constant indicating one of\n+the DR0-DR7 DMA setup channels:\n+@example\n+void __builtin_arc_vdiwr (const int, int)\n+void __builtin_arc_vdowr (const int, int)\n+@end example\n+\n+The following take an @code{int} argument and return no result:\n+@example\n+void __builtin_arc_vendrec (int)\n+void __builtin_arc_vrec (int)\n+void __builtin_arc_vrecrun (int)\n+void __builtin_arc_vrun (int)\n+@end example\n+\n+The following take a @code{__v8hi} argument and two @code{int}\n+arguments and return a @code{__v8hi} result.  The second argument must\n+be a 3-bit compile time constants, indicating one the registers I0-I7,\n+and the third argument must be an 8-bit compile time constant.\n+\n+@emph{Note:} Although the equivalent hardware instructions do not take\n+an SIMD register as an operand, these builtins overwrite the relevant\n+bits of the @code{__v8hi} register provided as the first argument with\n+the value loaded from the @code{[Ib, u8]} location in the SDM.\n+\n+@example\n+__v8hi __builtin_arc_vld32 (__v8hi, const int, const int)\n+__v8hi __builtin_arc_vld32wh (__v8hi, const int, const int)\n+__v8hi __builtin_arc_vld32wl (__v8hi, const int, const int)\n+__v8hi __builtin_arc_vld64 (__v8hi, const int, const int)\n+@end example\n+\n+The following take two @code{int} arguments and return a @code{__v8hi}\n+result.  The first argument must be a 3-bit compile time constants,\n+indicating one the registers I0-I7, and the second argument must be an\n+8-bit compile time constant.\n+\n+@example\n+__v8hi __builtin_arc_vld128 (const int, const int)\n+__v8hi __builtin_arc_vld64w (const int, const int)\n+@end example\n+\n+The following take a @code{__v8hi} argument and two @code{int}\n+arguments and return no result.  The second argument must be a 3-bit\n+compile time constants, indicating one the registers I0-I7, and the\n+third argument must be an 8-bit compile time constant.\n+\n+@example\n+void __builtin_arc_vst128 (__v8hi, const int, const int)\n+void __builtin_arc_vst64 (__v8hi, const int, const int)\n+@end example\n+\n+The following take a @code{__v8hi} argument and three @code{int}\n+arguments and return no result.  The second argument must be a 3-bit\n+compile-time constant, identifying the 16-bit sub-register to be\n+stored, the third argument must be a 3-bit compile time constants,\n+indicating one the registers I0-I7, and the fourth argument must be an\n+8-bit compile time constant.\n+\n+@example\n+void __builtin_arc_vst16_n (__v8hi, const int, const int, const int)\n+void __builtin_arc_vst32_n (__v8hi, const int, const int, const int)\n+@end example\n+\n @node ARM iWMMXt Built-in Functions\n @subsection ARM iWMMXt Built-in Functions\n \n@@ -16831,3 +17283,6 @@ implicitly scoped inside a C language scope.  Also, an empty prototype\n @code{()} is treated as an unspecified number of arguments, rather\n than no arguments, as C++ demands.\n @end table\n+\n+@c  LocalWords:  emph deftypefn builtin ARCv2EM SIMD builtins msimd\n+@c  LocalWords:  typedef v4si v8hi DMA dma vdiwr vdowr followign"}, {"sha": "7be8e5a4a3f73ba1b7495334d5889580571336a1", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5f6720272e122f628bd110c097237c17183035/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5f6720272e122f628bd110c097237c17183035/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=5d5f6720272e122f628bd110c097237c17183035", "patch": "@@ -1200,8 +1200,8 @@ This is an alias for @option{--enable-tls=no}.\n @itemx --with-cpu-64=@var{cpu}\n Specify which cpu variant the compiler should generate code for by default.\n @var{cpu} will be used as the default value of the @option{-mcpu=} switch.\n-This option is only supported on some targets, including ARM, i386, M68k,\n-PowerPC, and SPARC@.  The @option{--with-cpu-32} and\n+This option is only supported on some targets, including ARC, ARM, i386, M68k,\n+PowerPC, and SPARC@.  It is mandatory for ARC@.  The @option{--with-cpu-32} and\n @option{--with-cpu-64} options specify separate default CPUs for\n 32-bit and 64-bit modes; these options are only supported for i386,\n x86-64 and PowerPC.\n@@ -3206,6 +3206,24 @@ are the versions which identify themselves as DEC OSF/1.)\n @heading amd64-*-solaris2.1[0-9]*\n This is a synonym for @samp{x86_64-*-solaris2.1[0-9]*}.\n \n+@html\n+<hr />\n+@end html\n+@anchor{arc-x-elf32}\n+@heading arc-*-elf32\n+\n+Use @samp{configure --target=arc-elf32 --with-cpu=@var{cpu} --enable-languages=\"c,c++\"}\n+to configure GCC, with @var{cpu} being one of @samp{arc600}, @samp{arc601},\n+or @samp{arc700}@.\n+\n+@html\n+<hr />\n+@end html\n+@anchor{arc-linux-uclibc}\n+@heading arc-linux-uclibc\n+\n+Use @samp{configure --target=arc-linux-uclibc --with-cpu=arc700 --enable-languages=\"c,c++\"} to configure GCC@.\n+\n @html\n <hr />\n @end html"}, {"sha": "6e3192f3cd08dc2aec05ee7ca38559b12bea22f1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 523, "deletions": 0, "changes": 523, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5f6720272e122f628bd110c097237c17183035/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5f6720272e122f628bd110c097237c17183035/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5d5f6720272e122f628bd110c097237c17183035", "patch": "@@ -490,6 +490,23 @@ Objective-C and Objective-C++ Dialects}.\n -mfp-mode=@var{mode} -mvect-double -max-vect-align=@var{num} @gol\n -msplit-vecmove-early -m1reg-@var{reg}}\n \n+@emph{ARC Options}\n+@gccoptlist{-mbarrel-shifter @gol\n+-mcpu=@var{cpu} -mA6 -mARC600 -mA7 -mARC700 @gol\n+-mdpfp -mdpfp-compact -mdpfp-fast -mno-dpfp-lrsr @gol\n+-mea -mno-mpy -mmul32x16 -mmul64 @gol\n+-mnorm -mspfp -mspfp-compact -mspfp-fast -msimd -msoft-float -mswap @gol\n+-mcrc -mdsp-packa -mdvbf -mlock -mmac-d16 -mmac-24 -mrtsc -mswape @gol\n+-mtelephony -mxy -misize -mannotate-align -marclinux -marclinux_prof @gol\n+-mepilogue-cfi -mlong-calls -mmedium-calls -msdata @gol\n+-mucb-mcount -mvolatile-cache @gol\n+-malign-call -mauto-modify-reg -mbbit-peephole -mno-brcc @gol\n+-mcase-vector-pcrel -mcompact-casesi -mno-cond-exec -mearly-cbranchsi @gol\n+-mexpand-adddi -mindexed-loads -mlra -mlra-priority-none @gol\n+-mlra-priority-compact mlra-priority-noncompact -mno-millicode @gol\n+-mmixed-code -mq-class -mRcq -mRcw -msize-level=@var{level} @gol\n+-mtune=@var{cpu} -mmultcost=@var{num} -munalign-prob-threshold=@var{probability}}\n+\n @emph{ARM Options}\n @gccoptlist{-mapcs-frame  -mno-apcs-frame @gol\n -mabi=@var{name} @gol\n@@ -11021,6 +11038,7 @@ platform.\n @menu\n * AArch64 Options::\n * Adapteva Epiphany Options::\n+* ARC Options::\n * ARM Options::\n * AVR Options::\n * Blackfin Options::\n@@ -11362,6 +11380,511 @@ purpose.  The default is @option{-m1reg-none}.\n \n @end table\n \n+@node ARC Options\n+@subsection ARC Options\n+@cindex ARC options\n+\n+The following options control the architecture variant for which code\n+is being compiled:\n+\n+@c architecture variants\n+@table @gcctabopt\n+\n+@item -mbarrel-shifter\n+@opindex mbarrel-shifter\n+Generate instructions supported by barrel shifter.  This is the default\n+unless @samp{-mcpu=ARC601} is in effect.\n+\n+@item -mcpu=@var{cpu}\n+@opindex mcpu\n+Set architecture type, register usage, and instruction scheduling\n+parameters for @var{cpu}.  There are also shortcut alias options\n+available for backward compatibility and convenience.  Supported\n+values for @var{cpu} are\n+\n+@table @samp\n+@opindex mA6\n+@opindex mARC600\n+@item ARC600\n+Compile for ARC600.  Aliases: @option{-mA6}, @option{-mARC600}.\n+\n+@item ARC601\n+@opindex mARC601\n+Compile for ARC601.  Alias: @option{-mARC601}.\n+\n+@item ARC700\n+@opindex mA7\n+@opindex mARC700\n+Compile for ARC700.  Aliases: @option{-mA7}, @option{-mARC700}.\n+This is the default when configured with @samp{--with-cpu=arc700}@.\n+@end table\n+\n+@item -mdpfp\n+@opindex mdpfp\n+@itemx -mdpfp-compact\n+@opindex mdpfp-compact\n+FPX: Generate Double Precision FPX instructions, tuned for the compact\n+implementation.\n+\n+@item -mdpfp-fast\n+@opindex mdpfp-fast\n+FPX: Generate Double Precision FPX instructions, tuned for the fast\n+implementation.\n+\n+@item -mno-dpfp-lrsr\n+@opindex mno-dpfp-lrsr\n+Disable LR and SR instructions from using FPX extension aux registers.\n+\n+@item -mea\n+@opindex mea\n+Generate Extended arithmetic instructions.  Currently only\n+@code{divaw}, @code{adds}, @code{subs}, and @code{sat16} are\n+supported.  This is always enabled for @samp{-mcpu=ARC700}.\n+\n+@item -mno-mpy\n+@opindex mno-mpy\n+Do not generate mpy instructions for ARC700.\n+\n+@item -mmul32x16\n+@opindex mmul32x16\n+Generate 32x16 bit multiply and mac instructions.\n+\n+@item -mmul64\n+@opindex mmul64\n+Generate mul64 and mulu64 instructions.  Only valid for @samp{-mcpu=ARC600}.\n+\n+@item -mnorm\n+@opindex mnorm\n+Generate norm instruction.  This is the default if @samp{-mcpu=ARC700}\n+is in effect.\n+\n+@item -mspfp\n+@opindex mspfp\n+@itemx -mspfp-compact\n+@opindex mspfp-compact\n+FPX: Generate Single Precision FPX instructions, tuned for the compact\n+implementation.\n+\n+@item -mspfp-fast\n+@opindex mspfp-fast\n+FPX: Generate Single Precision FPX instructions, tuned for the fast\n+implementation.\n+\n+@item -msimd\n+@opindex msimd\n+Enable generation of ARC SIMD instructions via target-specific\n+builtins.  Only valid for @samp{-mcpu=ARC700}.\n+\n+@item -msoft-float\n+@opindex msoft-float\n+This option ignored; it is provided for compatibility purposes only.\n+Software floating point code is emitted by default, and this default\n+can overridden by FPX options; @samp{mspfp}, @samp{mspfp-compact}, or\n+@samp{mspfp-fast} for single precision, and @samp{mdpfp},\n+@samp{mdpfp-compact}, or @samp{mdpfp-fast} for double precision.\n+\n+@item -mswap\n+@opindex mswap\n+Generate swap instructions.\n+\n+@end table\n+\n+The following options are passed through to the assembler, and also\n+define preprocessor macro symbols.\n+\n+@c Flags used by the assembler, but for which we define preprocessor\n+@c macro symbols as well.\n+@table @gcctabopt\n+@item -mdsp-packa\n+@opindex mdsp-packa\n+Passed down to the assembler to enable the DSP Pack A extensions.\n+Also sets the preprocessor symbol @code{__Xdsp_packa}.\n+\n+@item -mdvbf\n+@opindex mdvbf\n+Passed down to the assembler to enable the dual viterbi butterfly\n+extension.  Also sets the preprocessor symbol @code{__Xdvbf}.\n+\n+@c ARC700 4.10 extension instruction\n+@item -mlock\n+@opindex mlock\n+Passed down to the assembler to enable the Locked Load/Store\n+Conditional extension.  Also sets the preprocessor symbol\n+@code{__Xlock}.\n+\n+@item -mmac-d16\n+@opindex mmac-d16\n+Passed down to the assembler.  Also sets the preprocessor symbol\n+@code{__Xxmac_d16}.\n+\n+@item -mmac-24\n+@opindex mmac-24\n+Passed down to the assembler.  Also sets the preprocessor symbol\n+@code{__Xxmac_24}.\n+\n+@c ARC700 4.10 extension instruction\n+@item -mrtsc\n+@opindex mrtsc\n+Passed down to the assembler to enable the 64-bit Time-Stamp Counter\n+extension instruction.  Also sets the preprocessor symbol\n+@code{__Xrtsc}.\n+\n+@c ARC700 4.10 extension instruction\n+@item -mswape\n+@opindex mswape\n+Passed down to the assembler to enable the swap byte ordering\n+extension instruction.  Also sets the preprocessor symbol\n+@code{__Xswape}.\n+\n+@item -mtelephony\n+@opindex mtelephony\n+Passed down to the assembler to enable dual and single operand\n+instructions for telephony.  Also sets the preprocessor symbol\n+@code{__Xtelephony}.\n+\n+@item -mxy\n+@opindex mxy\n+Passed down to the assembler to enable the XY Memory extension.  Also\n+sets the preprocessor symbol @code{__Xxy}.\n+\n+@end table\n+\n+The following options control how the assembly code is annotated:\n+\n+@c Assembly annotation options\n+@table @gcctabopt\n+@item -misize\n+@opindex misize\n+Annotate assembler instructions with estimated addresses.\n+\n+@item -mannotate-align\n+@opindex mannotate-align\n+Explain what alignment considerations lead to the decision to make an\n+instruction short or long.\n+\n+@end table\n+\n+The following options are passed through to the linker:\n+\n+@c options passed through to the linker\n+@table @gcctabopt\n+@item -marclinux\n+@opindex marclinux\n+Passed through to the linker, to specify use of the @code{arclinux} emulation.\n+This option is enabled by default in tool chains built for\n+@w{@code{arc-linux-uclibc}} and @w{@code{arceb-linux-uclibc}} targets\n+when profiling is not requested.\n+\n+@item -marclinux_prof\n+@opindex marclinux_prof\n+Passed through to the linker, to specify use of the\n+@code{arclinux_prof} emulation.  This option is enabled by default in\n+tool chains built for @w{@code{arc-linux-uclibc}} and\n+@w{@code{arceb-linux-uclibc}} targets when profiling is requested.\n+\n+@end table\n+\n+The following options control the semantics of generated code:\n+\n+@c semantically relevant code generation options\n+@table @gcctabopt\n+@item -mepilogue-cfi\n+@opindex mepilogue-cfi\n+Enable generation of call frame information for epilogues.\n+\n+@item -mno-epilogue-cfi\n+@opindex mno-epilogue-cfi\n+Disable generation of call frame information for epilogues.\n+\n+@item -mlong-calls\n+@opindex mlong-calls\n+Generate call insns as register indirect calls, thus providing access\n+to the full 32-bit address range.\n+\n+@item -mmedium-calls\n+@opindex mmedium-calls\n+Don't use less than 25 bit addressing range for calls, which is the\n+offset available for an unconditional branch-and-link\n+instruction.  Conditional execution of function calls is suppressed, to\n+allow use of the 25-bit range, rather than the 21-bit range with\n+conditional branch-and-link.  This is the default for tool chains built\n+for @w{@code{arc-linux-uclibc}} and @w{@code{arceb-linux-uclibc}} targets.\n+\n+@item -mno-sdata\n+@opindex mno-sdata\n+Do not generate sdata references.  This is the default for tool chains\n+built for @w{@code{arc-linux-uclibc}} and @w{@code{arceb-linux-uclibc}}\n+targets.\n+\n+@item -mucb-mcount\n+@opindex mucb-mcount\n+Instrument with mcount calls as used in UCB code.  I.e. do the\n+counting in the callee, not the caller.  By default ARC instrumentation\n+counts in the caller.\n+\n+@item -mvolatile-cache\n+@opindex mvolatile-cache\n+Use ordinarily cached memory accesses for volatile references.  This is the\n+default.\n+\n+@item -mno-volatile-cache\n+@opindex mno-volatile-cache\n+Enable cache bypass for volatile references.\n+\n+@end table\n+\n+The following options fine tune code generation:\n+@c code generation tuning options\n+@table @gcctabopt\n+@item -malign-call\n+@opindex malign-call\n+Do alignment optimizations for call instructions.\n+\n+@item -mauto-modify-reg\n+@opindex mauto-modify-reg\n+Enable the use of pre/post modify with register displacement.\n+\n+@item -mbbit-peephole\n+@opindex mbbit-peephole\n+Enable bbit peephole2.\n+\n+@item -mno-brcc\n+@opindex mno-brcc\n+This option disables a target-specific pass in @file{arc_reorg} to\n+generate @code{BRcc} instructions.  It has no effect on @code{BRcc}\n+generation driven by the combiner pass.\n+\n+@item -mcase-vector-pcrel\n+@opindex mcase-vector-pcrel\n+Use pc-relative switch case tables - this enables case table shortening.\n+This is the default for @option{-Os}.\n+\n+@item -mcompact-casesi\n+@opindex mcompact-casesi\n+Enable compact casesi pattern.\n+This is the default for @option{-Os}.\n+\n+@item -mno-cond-exec\n+@opindex mno-cond-exec\n+Disable ARCompact specific pass to generate conditional execution instructions.\n+Due to delay slot scheduling and interactions between operand numbers,\n+literal sizes, instruction lengths, and the support for conditional execution,\n+the target-independent pass to generate conditional execution is often lacking,\n+so the ARC port has kept a special pass around that tries to find more\n+conditional execution generating opportunities after register allocation,\n+branch shortening, and delay slot scheduling have been done.  This pass\n+generally, but not always, improves performance and code size, at the cost of\n+extra compilation time, which is why there is an option to switch it off.\n+If you have a problem with call instructions exceeding their allowable\n+offset range because they are conditionalized, you should consider using\n+@option{-mmedium-calls} instead.\n+\n+@item -mearly-cbranchsi\n+@opindex mearly-cbranchsi\n+Enable pre-reload use of the cbranchsi pattern.\n+\n+@item -mexpand-adddi\n+@opindex mexpand-adddi\n+Expand @code{adddi3} and @code{subdi3} at rtl generation time into\n+@code{add.f}, @code{adc} etc.\n+\n+@item -mindexed-loads\n+@opindex mindexed-loads\n+Enable the use of indexed loads.  This can be problematic because some\n+optimizers will then assume the that indexed stores exist, which is not\n+the case.\n+\n+@item -mlra\n+@opindex mlra\n+Enable Local Register Allocation.  This is still experimental for ARC,\n+so by default the compiler uses standard reload\n+(i.e. @samp{-mno-lra}).\n+\n+@item -mlra-priority-none\n+@opindex mlra-priority-none\n+Don't indicate any priority for target registers.\n+\n+@item -mlra-priority-compact\n+@opindex mlra-priority-compact\n+Indicate target register priority for r0..r3 / r12..r15.\n+\n+@item -mlra-priority-noncompact\n+@opindex mlra-priority-noncompact\n+Reduce target regsiter priority for r0..r3 / r12..r15.\n+\n+@item -mno-millicode\n+@opindex mno-millicode\n+When optimizing for size (using @option{-Os}), prologues and epilogues\n+that have to save or restore a large number of registers are often\n+shortened by using call to a special function in libgcc; this is\n+referred to as a @emph{millicode} call.  As these calls can pose\n+performance issues, and/or cause linking issues when linking in a\n+nonstandard way, this option is provided to turn off millicode call\n+generation.\n+\n+@item -mmixed-code\n+@opindex mmixed-code\n+Tweak register allocation to help 16-bit instruction generation.\n+This generally has the effect of decreasing the average instruction size\n+while increasing the instruction count.\n+\n+@item -mq-class\n+@opindex mq-class\n+Enable 'q' instruction alternatives.\n+This is the default for @option{-Os}.\n+\n+@item -mRcq\n+@opindex mRcq\n+Enable Rcq constraint handling - most short code generation depends on this.\n+This is the default.\n+\n+@item -mRcw\n+@opindex mRcw\n+Enable Rcw constraint handling - ccfsm condexec mostly depends on this.\n+This is the default.\n+\n+@item -msize-level=@var{level}\n+@ opindex msize-level\n+Fine-tune size optimization with regards to instruction lengths and alignment.\n+The recognized values for @var{level} are:\n+@table @samp\n+@item 0\n+No size optimization.  This level is deprecated and treated like @samp{1}.\n+\n+@item 1\n+Short instructions are used opportunistically.\n+\n+@item 2\n+In addition, alignment of loops and of code after barriers are dropped.\n+\n+@item 3\n+In addition, optional data alignment is dropped, and the option @option{Os} is enabled.\n+\n+@end table\n+\n+This defaults to @samp{3} when @option{-Os} is in effect.  Otherwise,\n+the behavior when this is not set is equivalent to level @samp{1}.\n+\n+@item -mtune=@var{cpu}\n+@opindex mtune\n+Set instruction scheduling parameters for @var{cpu}, overriding any implied\n+by @option{-mcpu=}.\n+\n+Supported values for @var{cpu} are\n+\n+@table @samp\n+@item ARC600\n+Tune for ARC600 cpu.\n+\n+@item ARC601\n+Tune for ARC601 cpu.\n+\n+@item ARC700\n+Tune for ARC700 cpu with standard multiplier block.\n+\n+@item ARC700-xmac\n+Tune for ARC700 cpu with XMAC block.\n+\n+@item ARC725D\n+Tune for ARC725D cpu.\n+\n+@item ARC750D\n+Tune for ARC750D cpu.\n+\n+@end table\n+\n+@item -mmultcost=@var{num}\n+@opindex mmultcost\n+Cost to assume for a multiply instruction, with @samp{4} being equal to a\n+normal instruction.\n+\n+@item -munalign-prob-threshold=@var{probability}\n+@opindex munalign-prob-threshold\n+Set probability threshold for unaligning branches.\n+When tuning for @samp{ARC700} and optimizing for speed, branches without\n+filled delay slot are preferably emitted unaligned and long, unless\n+profiling indicates that the probability for the branch to be taken\n+is below @var{probability}.  @xref{Cross-profiling}.\n+The default is (REG_BR_PROB_BASE/2), i.e.@: 5000.\n+\n+@end table\n+\n+The following options are maintained for backward compatibility, but\n+are now deprecated and will be removed in a future release:\n+\n+@c Deprecated options\n+@table @gcctabopt\n+\n+@item -margonaut\n+@opindex margonaut\n+Obsolete FPX.\n+\n+@item -mbig-endian\n+@opindex mbig-endian\n+@itemx -EB\n+@opindex EB\n+Compile code for big endian targets.  Use of these options is now\n+deprecated.  Users wanting big-endian code, should use the\n+@w{@code{arceb-elf32}} and @w{@code{arceb-linux-uclibc}} targets when\n+building the tool chain, for which big-endian is the default.\n+\n+@item -mlittle-endian\n+@opindex mlittle-endian\n+@itemx -EL\n+@opindex EL\n+Compile code for little endian targets.  Use of these options is now\n+deprecated.  Users wanting little-endian code should use the\n+@w{@code{arc-elf32}} and @w{@code{arc-linux-uclibc}} targets when\n+building the tool chain, for which little-endian is the default.\n+\n+@item -mbarrel_shifter\n+@opindex mbarrel_shifter\n+Replaced by @samp{-mbarrel-shifter}\n+\n+@item -mdpfp_compact\n+@opindex mdpfp_compact\n+Replaced by @samp{-mdpfp-compact}\n+\n+@item -mdpfp_fast\n+@opindex mdpfp_fast\n+Replaced by @samp{-mdpfp-fast}\n+\n+@item -mdsp_packa\n+@opindex mdsp_packa\n+Replaced by @samp{-mdsp-packa}\n+\n+@item -mEA\n+@opindex mEA\n+Replaced by @samp{-mea}\n+\n+@item -mmac_24\n+@opindex mmac_24\n+Replaced by @samp{-mmac-24}\n+\n+@item -mmac_d16\n+@opindex mmac_d16\n+Replaced by @samp{-mmac-d16}\n+\n+@item -mspfp_compact\n+@opindex mspfp_compact\n+Replaced by @samp{-mspfp-compact}\n+\n+@item -mspfp_fast\n+@opindex mspfp_fast\n+Replaced by @samp{-mspfp-fast}\n+\n+@item -mtune=@var{cpu}\n+@opindex mtune\n+Values @samp{arc600}, @samp{arc601}, @samp{arc700} and\n+@samp{arc700-xmac} for @var{cpu} are replaced by @samp{ARC600},\n+@samp{ARC601}, @samp{ARC700} and @samp{ARC700-xmac} respectively\n+\n+@item -multcost=@var{num}\n+@opindex multcost\n+Replaced by @samp{-mmultcost}.\n+\n+@end table\n+\n @node ARM Options\n @subsection ARM Options\n @cindex ARM options"}, {"sha": "c07663b9bc229b5f252c6e8822e1f80d456f2cc0", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5f6720272e122f628bd110c097237c17183035/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5f6720272e122f628bd110c097237c17183035/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=5d5f6720272e122f628bd110c097237c17183035", "patch": "@@ -1725,6 +1725,54 @@ DF modes\n @end table\n \n \n+@item ARC ---@file{config/arc/constraints.md}\n+@table @code\n+@item q\n+Registers usable in ARCompact 16-bit instructions: @code{r0}-@code{r3},\n+@code{r12}-@code{r15}.  This constraint can only match when the @option{-mq}\n+option is in effect.\n+\n+@item e\n+Registers usable as base-regs of memory addresses in ARCompact 16-bit memory\n+instructions: @code{r0}-@code{r3}, @code{r12}-@code{r15}, @code{sp}.\n+This constraint can only match when the @option{-mq}\n+option is in effect.\n+@item D\n+ARC FPX (dpfp) 64-bit registers. @code{D0}, @code{D1}.\n+\n+@item I\n+A signed 12-bit integer constant.\n+\n+@item Cal\n+constant for arithmetic/logical operations.  This might be any constant\n+that can be put into a long immediate by the assmbler or linker without\n+involving a PIC relocation.\n+\n+@item K\n+A 3-bit unsigned integer constant.\n+\n+@item L\n+A 6-bit unsigned integer constant.\n+\n+@item CnL\n+One's complement of a 6-bit unsigned integer constant.\n+\n+@item CmL\n+Two's complement of a 6-bit unsigned integer constant.\n+\n+@item M\n+A 5-bit unsigned integer constant.\n+\n+@item O\n+A 7-bit unsigned integer constant.\n+\n+@item P\n+A 8-bit unsigned integer constant.\n+\n+@item H\n+Any const_double value.\n+@end table\n+\n @item ARM family---@file{config/arm/constraints.md}\n @table @code\n @item w"}]}