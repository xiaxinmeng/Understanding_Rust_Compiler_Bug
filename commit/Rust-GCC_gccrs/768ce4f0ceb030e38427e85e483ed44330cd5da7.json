{"sha": "768ce4f0ceb030e38427e85e483ed44330cd5da7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY4Y2U0ZjBjZWIwMzBlMzg0MjdlODVlNDgzZWQ0NDMzMGNkNWRhNw==", "commit": {"author": {"name": "Martin Uecker", "email": "muecker@gwdg.de", "date": "2020-11-26T07:12:12Z"}, "committer": {"name": "Martin Uecker", "email": "muecker@gwdg.de", "date": "2020-11-26T07:22:38Z"}, "message": "C: Do not drop qualifiers in typeof for _Atomic types. [PR65455,PR92935]\n\n2020-11-25  Martin Uecker  <muecker@gwdg.de>\n\ngcc/c/\n\tPR c/65455\n\tPR c/92935\n\t* c-parser.c (c_parser_declaration_or_fndef): Remove\n\tredundant code to drop qualifiers of _Atomic types for __auto_type.\n\t(c_parser_typeof_specifier): Do not drop qualifiers of _Atomic\n\ttypes for __typeof__.\n\ngcc/\n\tPR c/65455\n\tPR c/92935\n\t* ginclude/stdatomic.h: Use comma operator to drop qualifiers.\n\ngcc/testsuite/\n\tPR c/65455\n\tPR c/92935\n\t* gcc.dg/typeof-2.c: Adapt test.", "tree": {"sha": "62d7ca90f39ead505ccca0416451442db50b3c0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62d7ca90f39ead505ccca0416451442db50b3c0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/768ce4f0ceb030e38427e85e483ed44330cd5da7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/768ce4f0ceb030e38427e85e483ed44330cd5da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/768ce4f0ceb030e38427e85e483ed44330cd5da7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/768ce4f0ceb030e38427e85e483ed44330cd5da7/comments", "author": {"login": "uecker", "id": 2036635, "node_id": "MDQ6VXNlcjIwMzY2MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2036635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uecker", "html_url": "https://github.com/uecker", "followers_url": "https://api.github.com/users/uecker/followers", "following_url": "https://api.github.com/users/uecker/following{/other_user}", "gists_url": "https://api.github.com/users/uecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/uecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uecker/subscriptions", "organizations_url": "https://api.github.com/users/uecker/orgs", "repos_url": "https://api.github.com/users/uecker/repos", "events_url": "https://api.github.com/users/uecker/events{/privacy}", "received_events_url": "https://api.github.com/users/uecker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uecker", "id": 2036635, "node_id": "MDQ6VXNlcjIwMzY2MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2036635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uecker", "html_url": "https://github.com/uecker", "followers_url": "https://api.github.com/users/uecker/followers", "following_url": "https://api.github.com/users/uecker/following{/other_user}", "gists_url": "https://api.github.com/users/uecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/uecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uecker/subscriptions", "organizations_url": "https://api.github.com/users/uecker/orgs", "repos_url": "https://api.github.com/users/uecker/repos", "events_url": "https://api.github.com/users/uecker/events{/privacy}", "received_events_url": "https://api.github.com/users/uecker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f81f43f606cd915e96c857c007a4635fc0ea601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f81f43f606cd915e96c857c007a4635fc0ea601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f81f43f606cd915e96c857c007a4635fc0ea601"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "87ee8f47806c99bed0dbc8a8d12bde678a820172", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768ce4f0ceb030e38427e85e483ed44330cd5da7/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768ce4f0ceb030e38427e85e483ed44330cd5da7/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=768ce4f0ceb030e38427e85e483ed44330cd5da7", "patch": "@@ -2224,10 +2224,6 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t\t\t      \" initializer\");\n \t\t  init = convert_lvalue_to_rvalue (init_loc, init, true, true);\n \t\t  tree init_type = TREE_TYPE (init.value);\n-\t\t  /* As with typeof, remove all qualifiers from atomic types.  */\n-\t\t  if (init_type != error_mark_node && TYPE_ATOMIC (init_type))\n-\t\t    init_type\n-\t\t      = c_build_qualified_type (init_type, TYPE_UNQUALIFIED);\n \t\t  bool vm_type = variably_modified_type_p (init_type,\n \t\t\t\t\t\t\t   NULL_TREE);\n \t\t  if (vm_type)\n@@ -3743,11 +3739,6 @@ c_parser_typeof_specifier (c_parser *parser)\n       if (was_vm)\n \tret.expr = c_fully_fold (expr.value, false, &ret.expr_const_operands);\n       pop_maybe_used (was_vm);\n-      /* For use in macros such as those in <stdatomic.h>, remove all\n-\t qualifiers from atomic types.  (const can be an issue for more macros\n-\t using typeof than just the <stdatomic.h> ones.)  */\n-      if (ret.spec != error_mark_node && TYPE_ATOMIC (ret.spec))\n-\tret.spec = c_build_qualified_type (ret.spec, TYPE_UNQUALIFIED);\n     }\n   parens.skip_until_found_close (parser);\n   return ret;"}, {"sha": "7c2e08a2c417eca5044c78b9e4ee46fd88fc0018", "filename": "gcc/ginclude/stdatomic.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768ce4f0ceb030e38427e85e483ed44330cd5da7/gcc%2Fginclude%2Fstdatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768ce4f0ceb030e38427e85e483ed44330cd5da7/gcc%2Fginclude%2Fstdatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdatomic.h?ref=768ce4f0ceb030e38427e85e483ed44330cd5da7", "patch": "@@ -107,7 +107,7 @@ extern void atomic_signal_fence (memory_order);\n #define ATOMIC_POINTER_LOCK_FREE\t__GCC_ATOMIC_POINTER_LOCK_FREE\n \n \n-/* Note that these macros require __typeof__ and __auto_type to remove\n+/* Note that these macros require __auto_type to remove\n    _Atomic qualifiers (and const qualifiers, if those are valid on\n    macro operands).\n    \n@@ -122,7 +122,7 @@ extern void atomic_signal_fence (memory_order);\n   __extension__\t\t\t\t\t\t\t\t\\\n   ({\t\t\t\t\t\t\t\t\t\\\n     __auto_type __atomic_store_ptr = (PTR);\t\t\t\t\\\n-    __typeof__ (*__atomic_store_ptr) __atomic_store_tmp = (VAL);\t\\\n+    __typeof__ ((void)0, *__atomic_store_ptr) __atomic_store_tmp = (VAL);\t\\\n     __atomic_store (__atomic_store_ptr, &__atomic_store_tmp, (MO));\t\\\n   })\n \n@@ -134,7 +134,7 @@ extern void atomic_signal_fence (memory_order);\n   __extension__\t\t\t\t\t\t\t\t\\\n   ({\t\t\t\t\t\t\t\t\t\\\n     __auto_type __atomic_load_ptr = (PTR);\t\t\t\t\\\n-    __typeof__ (*__atomic_load_ptr) __atomic_load_tmp;\t\t\t\\\n+    __typeof__ ((void)0, *__atomic_load_ptr) __atomic_load_tmp;\t\t\t\\\n     __atomic_load (__atomic_load_ptr, &__atomic_load_tmp, (MO));\t\\\n     __atomic_load_tmp;\t\t\t\t\t\t\t\\\n   })\n@@ -146,8 +146,8 @@ extern void atomic_signal_fence (memory_order);\n   __extension__\t\t\t\t\t\t\t\t\\\n   ({\t\t\t\t\t\t\t\t\t\\\n     __auto_type __atomic_exchange_ptr = (PTR);\t\t\t\t\\\n-    __typeof__ (*__atomic_exchange_ptr) __atomic_exchange_val = (VAL);\t\\\n-    __typeof__ (*__atomic_exchange_ptr) __atomic_exchange_tmp;\t\t\\\n+    __typeof__ ((void)0, *__atomic_exchange_ptr) __atomic_exchange_val = (VAL);\t\\\n+    __typeof__ ((void)0, *__atomic_exchange_ptr) __atomic_exchange_tmp;\t\t\\\n     __atomic_exchange (__atomic_exchange_ptr, &__atomic_exchange_val,\t\\\n \t\t       &__atomic_exchange_tmp, (MO));\t\t\t\\\n     __atomic_exchange_tmp;\t\t\t\t\t\t\\\n@@ -161,7 +161,7 @@ extern void atomic_signal_fence (memory_order);\n   __extension__\t\t\t\t\t\t\t\t\\\n   ({\t\t\t\t\t\t\t\t\t\\\n     __auto_type __atomic_compare_exchange_ptr = (PTR);\t\t\t\\\n-    __typeof__ (*__atomic_compare_exchange_ptr) __atomic_compare_exchange_tmp \\\n+    __typeof__ ((void)0, *__atomic_compare_exchange_ptr) __atomic_compare_exchange_tmp \\\n       = (DES);\t\t\t\t\t\t\t\t\\\n     __atomic_compare_exchange (__atomic_compare_exchange_ptr, (VAL),\t\\\n \t\t\t       &__atomic_compare_exchange_tmp, 0,\t\\\n@@ -176,7 +176,7 @@ extern void atomic_signal_fence (memory_order);\n   __extension__\t\t\t\t\t\t\t\t\\\n   ({\t\t\t\t\t\t\t\t\t\\\n     __auto_type __atomic_compare_exchange_ptr = (PTR);\t\t\t\\\n-    __typeof__ (*__atomic_compare_exchange_ptr) __atomic_compare_exchange_tmp \\\n+    __typeof__ ((void)0, *__atomic_compare_exchange_ptr) __atomic_compare_exchange_tmp \\\n       = (DES);\t\t\t\t\t\t\t\t\\\n     __atomic_compare_exchange (__atomic_compare_exchange_ptr, (VAL),\t\\\n \t\t\t       &__atomic_compare_exchange_tmp, 1,\t\\"}, {"sha": "68f91c6c361cc976246e845f985ab387d29f29e3", "filename": "gcc/testsuite/gcc.dg/typeof-2.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768ce4f0ceb030e38427e85e483ed44330cd5da7/gcc%2Ftestsuite%2Fgcc.dg%2Ftypeof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768ce4f0ceb030e38427e85e483ed44330cd5da7/gcc%2Ftestsuite%2Fgcc.dg%2Ftypeof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftypeof-2.c?ref=768ce4f0ceb030e38427e85e483ed44330cd5da7", "patch": "@@ -1,21 +1,23 @@\n-/* Test qualifier discard of typeof for atomic types. */\n+/* Test qualifier preservation of typeof and discarded for __auto_type. */\n /* { dg-do compile } */\n /* { dg-options \"-std=c11\" } */\n \n-/* Check that the qualifiers are discarded for atomic types. */\n+/* Check that the qualifiers are preserved for atomic types. */\n \n extern int i;\n \n extern int * p;\n \n extern int _Atomic const ci;\n-extern __typeof (ci) i;\n+extern __typeof (ci) ci;\n \n extern int _Atomic volatile vi;\n-extern __typeof (vi) i;\n+extern __typeof (vi) vi;\n \n extern int * _Atomic restrict ri;\n-extern __typeof (ri) p;\n+extern __typeof (ri) ri;\n+\n+/* Check that the qualifiers are discarded for atomic types. */\n \n void f(void)\n {\n@@ -46,14 +48,16 @@ extern __typeof (nvi) k;\n extern int * restrict nri;\n extern __typeof (nri) q;\n \n+/* Check that the qualifiers are discarded for non-atomic types. */\n+\n void g(void)\n {\n   __auto_type aci = nci;\n-  int const *paci = &aci;\n+  int *paci = &aci;\n \n   __auto_type avi = nvi;\n-  int volatile *pavi = &avi;\n+  int *pavi = &avi;\n \n   __auto_type ari = nri;\n-  int * restrict *pari = &ari;\n+  int **pari = &ari;\n }"}]}