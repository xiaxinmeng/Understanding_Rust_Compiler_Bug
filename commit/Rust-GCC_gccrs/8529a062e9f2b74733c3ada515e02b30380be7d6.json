{"sha": "8529a062e9f2b74733c3ada515e02b30380be7d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyOWEwNjJlOWYyYjc0NzMzYzNhZGE1MTVlMDJiMzAzODBiZTdkNg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2018-11-29T04:58:08Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-11-29T04:58:08Z"}, "message": "[RS6000] \"G\" and \"H\" constraints\n\nThe patch fixes two cases where the \"G\" and \"H\" constraints were used\nincorrectly.  Their purpose is calculating insn lengths.  Thus it\nnever makes sense to put \"GH\" together or with \"F\" in an insn\nalternative.\n\nmovdi_internal32 used \"GHF\" in an alternative so I replaced that with\n\"F\", and added length attributes for the insn, which were missing.\nThere are some formatting changes too, to make alternatives line up\nwith attributes.\n\nThe FMOVE128 version of mov<mode>_softfloat also had \"GHF\" in an\nalternative, so \"GH\" is dropped and \"F\" moved to a separate\nalternative in order to get insn lengths correct.  Well by correct I\nmean we need to choose the maximum insn length otherwise branches\nmight not reach.  Note the very large length for \"F\".  I think it\nwould be better to force soft-float long double constants to memory in\n64-bit mode, but that's a patch for another day.\n\n\t* config/rs6000/constraints.md (G, H): Comment on purpose of\n\tconstraint.  Correct mode comments and \"G\" mode test.\n\t* config/rs6000/rs6000.md (movdi_internal32): Remove \"GH\" from\n\talternative handling \"F\".  Add length attr.  Formatting.\n\t(mov<mode>_softfloat <FMOVE128>): Delete \"GH\" from\n\talternative, and move \"F\" to separate alternative.  Correct\n\tinsn lengths.\n\nFrom-SVN: r266607", "tree": {"sha": "39133e9873150f86ddbf8923ac5b4c0fb05081a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39133e9873150f86ddbf8923ac5b4c0fb05081a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8529a062e9f2b74733c3ada515e02b30380be7d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8529a062e9f2b74733c3ada515e02b30380be7d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8529a062e9f2b74733c3ada515e02b30380be7d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8529a062e9f2b74733c3ada515e02b30380be7d6/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abf07e52b2f16ad1234bdb89b9c8b3d704b67b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf07e52b2f16ad1234bdb89b9c8b3d704b67b11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abf07e52b2f16ad1234bdb89b9c8b3d704b67b11"}], "stats": {"total": 72, "additions": 50, "deletions": 22}, "files": [{"sha": "95492d4597e9be0370b9471b528c77097a55e633", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8529a062e9f2b74733c3ada515e02b30380be7d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8529a062e9f2b74733c3ada515e02b30380be7d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8529a062e9f2b74733c3ada515e02b30380be7d6", "patch": "@@ -1,3 +1,13 @@\n+2018-11-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/constraints.md (G, H): Comment on purpose of\n+\tconstraint.  Correct mode comments and \"G\" mode test.\n+\t* config/rs6000/rs6000.md (movdi_internal32): Remove \"GH\" from\n+\talternative handling \"F\".  Add length attr.  Formatting.\n+\t(mov<mode>_softfloat <FMOVE128>): Delete \"GH\" from\n+\talternative, and move \"F\" to separate alternative.  Correct\n+\tinsn lengths.\n+\n 2018-11-29  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/predicates.md (easy_vector_constant): Don't call"}, {"sha": "5b89a836b060fb2d13db1d22b82b946b203e681e", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8529a062e9f2b74733c3ada515e02b30380be7d6/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8529a062e9f2b74733c3ada515e02b30380be7d6/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=8529a062e9f2b74733c3ada515e02b30380be7d6", "patch": "@@ -252,17 +252,18 @@\n   (and (match_code \"const_int\")\n        (match_test \"((- (unsigned HOST_WIDE_INT) ival) + 0x8000) < 0x10000\")))\n \n-;; Floating-point constraints\n+;; Floating-point constraints.  These two are defined so that insn\n+;; length attributes can be calculated exactly.\n \n (define_constraint \"G\"\n-  \"Constant that can be copied into GPR with two insns for DF/DI\n-   and one for SF.\"\n+  \"Constant that can be copied into GPR with two insns for DF/DD\n+   and one for SF/SD.\"\n   (and (match_code \"const_double\")\n        (match_test \"num_insns_constant (op, mode)\n-\t\t    == (mode == SFmode ? 1 : 2)\")))\n+\t\t    == (mode == SFmode || mode == SDmode ? 1 : 2)\")))\n \n (define_constraint \"H\"\n-  \"DF/DI constant that takes three insns.\"\n+  \"DF/DD constant that takes three insns.\"\n   (and (match_code \"const_double\")\n        (match_test \"num_insns_constant (op, mode) == 3\")))\n "}, {"sha": "6f371b4d282ce5a3f364cf477ba834fbe399ff13", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8529a062e9f2b74733c3ada515e02b30380be7d6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8529a062e9f2b74733c3ada515e02b30380be7d6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=8529a062e9f2b74733c3ada515e02b30380be7d6", "patch": "@@ -7712,16 +7712,28 @@\n   [(set_attr \"length\" \"8,8,8,8,20,20,16\")])\n \n (define_insn_and_split \"*mov<mode>_softfloat\"\n-  [(set (match_operand:FMOVE128 0 \"nonimmediate_operand\" \"=Y,r,r\")\n-\t(match_operand:FMOVE128 1 \"input_operand\" \"r,YGHF,r\"))]\n+  [(set (match_operand:FMOVE128 0 \"nonimmediate_operand\" \"=Y,r,r,r\")\n+\t(match_operand:FMOVE128 1 \"input_operand\" \"r,Y,F,r\"))]\n   \"TARGET_SOFT_FLOAT\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(pc)]\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; }\n-  [(set_attr \"length\" \"20,20,16\")])\n+  [(set_attr_alternative \"length\"\n+       [(if_then_else (match_test \"TARGET_POWERPC64\")\n+\t    (const_string \"8\")\n+\t    (const_string \"16\"))\n+\t(if_then_else (match_test \"TARGET_POWERPC64\")\n+\t    (const_string \"8\")\n+\t    (const_string \"16\"))\n+\t(if_then_else (match_test \"TARGET_POWERPC64\")\n+\t    (const_string \"40\")\n+\t    (const_string \"32\"))\n+\t(if_then_else (match_test \"TARGET_POWERPC64\")\n+\t    (const_string \"8\")\n+\t    (const_string \"16\"))])])\n \n (define_expand \"extenddf<mode>2\"\n   [(set (match_operand:FLOAT128 0 \"gpc_reg_operand\")\n@@ -8656,22 +8668,22 @@\n ;; Use of fprs is disparaged slightly otherwise reload prefers to reload\n ;; a gpr into a fpr instead of reloading an invalid 'Y' address\n \n-;;        GPR store  GPR load   GPR move   FPR store  FPR load    FPR move\n-;;        GPR const  AVX store  AVX store  AVX load   AVX load    VSX move\n-;;        P9 0       P9 -1      AVX 0/-1   VSX 0      VSX -1      P9 const\n+;;        GPR store  GPR load   GPR move   FPR store  FPR load   FPR move\n+;;        GPR const  AVX store  AVX store  AVX load   AVX load   VSX move\n+;;        P9 0       P9 -1      AVX 0/-1   VSX 0      VSX -1     P9 const\n ;;        AVX const  \n \n (define_insn \"*movdi_internal32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-         \"=Y,        r,         r,         m,         ^d,         ^d,\n-          r,         wY,        Z,         ^wb,       $wv,        ^wi,\n-          *wo,       *wo,       *wv,       *wi,       *wi,        *wv,\n+         \"=Y,        r,         r,         m,         ^d,        ^d,\n+          r,         wY,        Z,         ^wb,       $wv,       ^wi,\n+          *wo,       *wo,       *wv,       *wi,       *wi,       *wv,\n           *wv\")\n \n \t(match_operand:DI 1 \"input_operand\"\n-         \"r,         Y,         r,         ^d,        m,          ^d,\n-          IJKnGHF,   ^wb,       $wv,       wY,        Z,          ^wi,\n-          Oj,        wM,        OjwM,      Oj,        wM,         wS,\n+         \"r,         Y,         r,         ^d,        m,         ^d,\n+          IJKnF,     ^wb,       $wv,       wY,        Z,         ^wi,\n+          Oj,        wM,        OjwM,      Oj,        wM,        wS,\n           wB\"))]\n \n   \"! TARGET_POWERPC64\n@@ -8698,11 +8710,16 @@\n    #\n    #\"\n   [(set_attr \"type\"\n-               \"store,     load,      *,         fpstore,    fpload,     fpsimple,\n-                *,         fpstore,   fpstore,   fpload,     fpload,     veclogical,\n-                vecsimple, vecsimple, vecsimple, veclogical, veclogical, vecsimple,\n-                vecsimple\")\n-   (set_attr \"size\" \"64\")])\n+         \"store,     load,      *,         fpstore,   fpload,    fpsimple,\n+          *,         fpstore,   fpstore,   fpload,    fpload,    veclogical,\n+          vecsimple, vecsimple, vecsimple, veclogical,veclogical,vecsimple,\n+          vecsimple\")\n+   (set_attr \"size\" \"64\")\n+   (set_attr \"length\"\n+         \"8,         8,         8,         4,         4,         4,\n+          16,        4,         4,         4,         4,         4,\n+          4,         4,         4,         4,         4,         8,\n+          4\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\")"}]}