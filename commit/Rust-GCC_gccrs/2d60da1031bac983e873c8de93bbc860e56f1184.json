{"sha": "2d60da1031bac983e873c8de93bbc860e56f1184", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ2MGRhMTAzMWJhYzk4M2U4NzNjOGRlOTNiYmM4NjBlNTZmMTE4NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-07-13T15:56:46Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-07-13T15:56:46Z"}, "message": "Revert \"Add non-const overload of std::string::data()\"\n\nThis reverts r238291 aka 4300aa2087d90cd2d55852fa38f082a89bc7e72d.\n\nFrom-SVN: r238303", "tree": {"sha": "a2d6a52ca79ff76ce729f362b767cf61c3f8cf9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2d6a52ca79ff76ce729f362b767cf61c3f8cf9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d60da1031bac983e873c8de93bbc860e56f1184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d60da1031bac983e873c8de93bbc860e56f1184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d60da1031bac983e873c8de93bbc860e56f1184", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d60da1031bac983e873c8de93bbc860e56f1184/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fa3d4b4a75e63276f5460a59395e1d3a634c477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa3d4b4a75e63276f5460a59395e1d3a634c477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fa3d4b4a75e63276f5460a59395e1d3a634c477"}], "stats": {"total": 211, "additions": 29, "deletions": 182}, "files": [{"sha": "e3a84c5a1f0bf1085088944c4d9b859b8d36eb01", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d60da1031bac983e873c8de93bbc860e56f1184/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d60da1031bac983e873c8de93bbc860e56f1184/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2d60da1031bac983e873c8de93bbc860e56f1184", "patch": "@@ -1,3 +1,7 @@\n+2016-07-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tRevert \"Add non-const overload of std::string::data()\".\n+\n 2016-07-13  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tImplement P0307R2, Making Optional Greater Equal Again."}, {"sha": "374c9851539d379bdaf0c308a2c154cc987349e7", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 17, "deletions": 40, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d60da1031bac983e873c8de93bbc860e56f1184/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d60da1031bac983e873c8de93bbc860e56f1184/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=2d60da1031bac983e873c8de93bbc860e56f1184", "patch": "@@ -155,11 +155,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #endif\n       }\n \n-      // Get a raw pointer (rather than _Alloc::pointer).\n-      _CharT*\n-      _M_c_str() const\n-      { return std::__addressof(*_M_dataplus._M_p); }\n-\n       void\n       _M_capacity(size_type __capacity)\n       { _M_allocated_capacity = __capacity; }\n@@ -290,8 +285,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       bool\n       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT\n       {\n-\treturn (less<const _CharT*>()(__s, data())\n-\t\t|| less<const _CharT*>()(data() + this->size(), __s));\n+\treturn (less<const _CharT*>()(__s, _M_data())\n+\t\t|| less<const _CharT*>()(_M_data() + this->size(), __s));\n       }\n \n       // When __n = 1 way faster than the general multichar\n@@ -416,7 +411,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t   size_type __n = npos)\n       : _M_dataplus(_M_local_data())\n       {\n-\tconst _CharT* __start = __str.data()\n+\tconst _CharT* __start = __str._M_data()\n \t  + __str._M_check(__pos, \"basic_string::basic_string\");\n \t_M_construct(__start, __start + __str._M_limit(__pos, __n));\n       }\n@@ -432,8 +427,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t   size_type __n, const _Alloc& __a)\n       : _M_dataplus(_M_local_data(), __a)\n       {\n-\tconst _CharT* __start = __str.data()\n-\t  + __str._M_check(__pos, \"basic_string::basic_string\");\n+\tconst _CharT* __start\n+\t  = __str._M_data() + __str._M_check(__pos, \"string::string\");\n \t_M_construct(__start, __start + __str._M_limit(__pos, __n));\n       }\n \n@@ -1071,7 +1066,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_string&\n       append(const basic_string& __str)\n-      { return _M_append(__str.data(), __str.size()); }\n+      { return _M_append(__str._M_data(), __str.size()); }\n \n       /**\n        *  @brief  Append a substring.\n@@ -1088,7 +1083,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_string&\n       append(const basic_string& __str, size_type __pos, size_type __n)\n-      { return _M_append(__str.data()\n+      { return _M_append(__str._M_data()\n \t\t\t + __str._M_check(__pos, \"basic_string::append\"),\n \t\t\t __str._M_limit(__pos, __n)); }\n \n@@ -1221,7 +1216,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_string&\n       assign(const basic_string& __str, size_type __pos, size_type __n)\n-      { return _M_replace(size_type(0), this->size(), __str.data()\n+      { return _M_replace(size_type(0), this->size(), __str._M_data()\n \t\t\t  + __str._M_check(__pos, \"basic_string::assign\"),\n \t\t\t  __str._M_limit(__pos, __n)); }\n \n@@ -1418,7 +1413,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string&\n       insert(size_type __pos1, const basic_string& __str)\n       { return this->replace(__pos1, size_type(0),\n-\t\t\t     __str.data(), __str.size()); }\n+\t\t\t     __str._M_data(), __str.size()); }\n \n       /**\n        *  @brief  Insert a substring.\n@@ -1441,7 +1436,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string&\n       insert(size_type __pos1, const basic_string& __str,\n \t     size_type __pos2, size_type __n)\n-      { return this->replace(__pos1, size_type(0), __str.data()\n+      { return this->replace(__pos1, size_type(0), __str._M_data()\n \t\t\t     + __str._M_check(__pos2, \"basic_string::insert\"),\n \t\t\t     __str._M_limit(__pos2, __n)); }\n \n@@ -1624,7 +1619,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       basic_string&\n       replace(size_type __pos, size_type __n, const basic_string& __str)\n-      { return this->replace(__pos, __n, __str.data(), __str.size()); }\n+      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }\n \n       /**\n        *  @brief  Replace characters with value from another string.\n@@ -1647,7 +1642,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string&\n       replace(size_type __pos1, size_type __n1, const basic_string& __str,\n \t      size_type __pos2, size_type __n2)\n-      { return this->replace(__pos1, __n1, __str.data()\n+      { return this->replace(__pos1, __n1, __str._M_data()\n \t\t\t     + __str._M_check(__pos2, \"basic_string::replace\"),\n \t\t\t     __str._M_limit(__pos2, __n2)); }\n \n@@ -1739,7 +1734,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string&\n       replace(__const_iterator __i1, __const_iterator __i2,\n \t      const basic_string& __str)\n-      { return this->replace(__i1, __i2, __str.data(), __str.size()); }\n+      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }\n \n       /**\n        *  @brief  Replace range of characters with C substring.\n@@ -1980,29 +1975,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       const _CharT*\n       c_str() const _GLIBCXX_NOEXCEPT\n-      { return _M_c_str(); }\n+      { return _M_data(); }\n \n       /**\n        *  @brief  Return const pointer to contents.\n        *\n-       *  This is a pointer to internal data.  Do not modify or dire things may\n+       *  This is a handle to internal data.  Do not modify or dire things may\n        *  happen.\n       */\n       const _CharT*\n       data() const _GLIBCXX_NOEXCEPT\n-      { return _M_c_str(); }\n-\n-#if __cplusplus > 201402L\n-      /**\n-       *  @brief  Return non-const pointer to contents.\n-       *\n-       *  This is a pointer to the character sequence held by the string.\n-       *  Modifying the characters in the sequence is allowed.\n-      */\n-      _CharT*\n-      data() noexcept\n-      { return _M_c_str(); }\n-#endif\n+      { return _M_data(); }\n \n       /**\n        *  @brief  Return copy of allocator used to construct this string.\n@@ -2422,7 +2405,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \tconst size_type __osize = __str.size();\n \tconst size_type __len = std::min(__size, __osize);\n \n-\tint __r = traits_type::compare(data(), __str.data(), __len);\n+\tint __r = traits_type::compare(_M_data(), __str.data(), __len);\n \tif (!__r)\n \t  __r = _S_compare(__size, __osize);\n \treturn __r;\n@@ -4378,12 +4361,6 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       data() const _GLIBCXX_NOEXCEPT\n       { return _M_data(); }\n \n-#if __cplusplus > 201402L\n-      _CharT*\n-      data() noexcept\n-      { return _M_data(); }\n-#endif\n-\n       /**\n        *  @brief  Return copy of allocator used to construct this string.\n       */"}, {"sha": "2b6644d1c49dde34fac67f55743b7572d19c4537", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d60da1031bac983e873c8de93bbc860e56f1184/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d60da1031bac983e873c8de93bbc860e56f1184/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=2d60da1031bac983e873c8de93bbc860e56f1184", "patch": "@@ -315,15 +315,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       size_type __new_capacity = length() + __len2 - __len1;\n       pointer __r = _M_create(__new_capacity, capacity());\n-      _CharT* __p = std::__addressof(*__r);\n \n       if (__pos)\n-\tthis->_S_copy(__p, _M_c_str(), __pos);\n+\tthis->_S_copy(__r, _M_data(), __pos);\n       if (__s && __len2)\n-\tthis->_S_copy(__p + __pos, __s, __len2);\n+\tthis->_S_copy(__r + __pos, __s, __len2);\n       if (__how_much)\n-\tthis->_S_copy(__p + __pos + __len2,\n-\t\t      _M_c_str() + __pos + __len1, __how_much);\n+\tthis->_S_copy(__r + __pos + __len2,\n+\t\t      _M_data() + __pos + __len1, __how_much);\n \n       _M_dispose();\n       _M_data(__r);\n@@ -337,9 +336,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       const size_type __how_much = length() - __pos - __n;\n \n-      _CharT* __p = _M_c_str();\n       if (__how_much && __n)\n-\tthis->_S_move(__p + __pos, __p + __pos + __n, __how_much);\n+\tthis->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);\n \n       _M_set_length(length() - __n);\n     }\n@@ -402,7 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       if (__new_size <= this->capacity())\n \t{\n-\t  _CharT* __p = this->_M_c_str() + __pos1;\n+\t  pointer __p = this->_M_data() + __pos1;\n \n \t  const size_type __how_much = __old_size - __pos1 - __n1;\n \t  if (__how_much && __n1 != __n2)\n@@ -412,7 +410,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->_M_mutate(__pos1, __n1, 0, __n2);\n \n       if (__n2)\n-\tthis->_S_assign(this->_M_c_str() + __pos1, __n2, __c);\n+\tthis->_S_assign(this->_M_data() + __pos1, __n2, __c);\n \n       this->_M_set_length(__new_size);\n       return *this;\n@@ -1181,7 +1179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       __glibcxx_requires_string_len(__s, __n);\n       const size_type __size = this->size();\n-      const _CharT* __data = data();\n+      const _CharT* __data = _M_data();\n \n       if (__n == 0)\n \treturn __pos <= __size ? __pos : npos;"}, {"sha": "0cc8e17dbb9b351a26e9b869bf4102d90ca1a4a5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/ext_ptr.cc", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa3d4b4a75e63276f5460a59395e1d3a634c477/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fext_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa3d4b4a75e63276f5460a59395e1d3a634c477/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fext_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fext_ptr.cc?ref=6fa3d4b4a75e63276f5460a59395e1d3a634c477", "patch": "@@ -1,52 +0,0 @@\n-// Copyright (C) 2016 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-std=gnu++11\" }\n-\n-#include <string>\n-#include <memory>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-using C = char;\n-const C c = 'a';\n-using traits = std::char_traits<C>;\n-\n-// basic_string is not required to support fancy pointers:\n-// http://cplusplus.github.io/LWG/lwg-closed.html#2084\n-\n-using __gnu_test::CustomPointerAlloc;\n-\n-void test01()\n-{\n-#if _GLIBCXX_USE_CXX11_ABI\n-  bool test __attribute__((unused)) = true;\n-  typedef CustomPointerAlloc<C> alloc_type;\n-  typedef std::basic_string<C, traits, alloc_type> test_type;\n-  test_type v;\n-  v.assign(1, c);\n-  VERIFY( ++v.begin() == v.end() );\n-\n-  v.assign(100, c);\n-  VERIFY( (v.begin() + 100) == v.end() );\n-#endif\n-}\n-\n-int main()\n-{\n-  test01();\n-}"}, {"sha": "046780df4103da292111a612ae061a9eeaf0c3e4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/data/char/2.cc", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa3d4b4a75e63276f5460a59395e1d3a634c477/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fdata%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa3d4b4a75e63276f5460a59395e1d3a634c477/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fdata%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fdata%2Fchar%2F2.cc?ref=6fa3d4b4a75e63276f5460a59395e1d3a634c477", "patch": "@@ -1,40 +0,0 @@\n-// Copyright (C) 2016 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-std=gnu++17\" }\n-\n-// 21.3.1.7 [string.ops] string operations\n-\n-#include <string>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  std::string s;\n-  char* p = s.data();\n-  VERIFY( *p == '\\0' );\n-  s = \"a string that is longer than a short string\";\n-  p = s.data();\n-  VERIFY( p == &s.front() );\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-}"}, {"sha": "d4a3206d3b23d23007225bbd240f3b9439a55b0d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/data/wchar_t/2.cc", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa3d4b4a75e63276f5460a59395e1d3a634c477/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fdata%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa3d4b4a75e63276f5460a59395e1d3a634c477/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fdata%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fdata%2Fwchar_t%2F2.cc?ref=6fa3d4b4a75e63276f5460a59395e1d3a634c477", "patch": "@@ -1,40 +0,0 @@\n-// Copyright (C) 2016 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-std=gnu++17\" }\n-\n-// 21.3.1.7 [string.ops] string operations\n-\n-#include <string>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  std::wstring s;\n-  wchar_t* p = s.data();\n-  VERIFY( *p == L'\\0' );\n-  s = L\"a string that is longer than a short string\";\n-  p = s.data();\n-  VERIFY( p == &s.front() );\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-}"}]}