{"sha": "b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZhZGJiOWZhYWJiNzc2YWU3YjcwYTVmNTk0M2FlODgzYjFmNzZlYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2016-02-01T16:20:13Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-02-01T16:20:13Z"}, "message": "nvptx.c (PTX_GANG_DEFAULT): New.\n\n\tgcc/\n\t* config/nvptx/nvptx.c (PTX_GANG_DEFAULT): New.\n\t(nvptx_goacc_validate_dims): Extend to handle global defaults.\n\t* target.def (OACC_VALIDATE_DIMS): Extend documentation.\n\t* doc/tm.texti: Rebuilt.\n\t* doc/invoke.texi (fopenacc-dim): Document.\n\t* lto-wrapper.c (merge_and_complain): Add OPT_fopenacc_dim_ case.\n\t(append_compiler_options): Likewise.\n\t* omp-low.c (oacc_default_dims, oacc_min_dims): New.\n\t(oacc_parse_default_dims): New.\n\t(oacc_validate_dims): Add USED arg.  Select non-unity default when\n\tpossible.\n\t(oacc_loop_fixed_partitions): Return mask of used partitions.\n\t(oacc_loop_auto_partitions): Emit dump info.\n\t(oacc_loop_partition): Return mask of used partitions.\n\t(execute_oacc_device_lower): Parse default dimension arg.  Adjust\n\tloop partitioning and validation calls.\n\n\tgcc/c-family/\n\t* c.opt (fopenacc-dim=): New option.\n\n\tgcc/fortran/\n\t* lang.opt (fopenacc-dim=): New option.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c: New.\n\t* testsuite/libgomp.oacc-fortran/routine-7.f90: Serialize loop.\n\nFrom-SVN: r233041", "tree": {"sha": "09305a38116a380d3ddfab6c7c4b51bb2e212610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09305a38116a380d3ddfab6c7c4b51bb2e212610"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/comments", "author": null, "committer": null, "parents": [{"sha": "ff86345f836c265d6bbb8d1bee5417e6f4c32ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff86345f836c265d6bbb8d1bee5417e6f4c32ac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff86345f836c265d6bbb8d1bee5417e6f4c32ac9"}], "stats": {"total": 396, "additions": 353, "deletions": 43}, "files": [{"sha": "cb6d8bdfc6434987aae6ebab80d591848c0bfaf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -1,3 +1,22 @@\n+2016-02-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/nvptx/nvptx.c (PTX_GANG_DEFAULT): New.\n+\t(nvptx_goacc_validate_dims): Extend to handle global defaults.\n+\t* target.def (OACC_VALIDATE_DIMS): Extend documentation.\n+\t* doc/tm.texti: Rebuilt.\n+\t* doc/invoke.texi (fopenacc-dim): Document.\n+\t* lto-wrapper.c (merge_and_complain): Add OPT_fopenacc_dim_ case.\n+\t(append_compiler_options): Likewise.\n+\t* omp-low.c (oacc_default_dims, oacc_min_dims): New.\n+\t(oacc_parse_default_dims): New.\n+\t(oacc_validate_dims): Add USED arg.  Select non-unity default when\n+\tpossible.\n+\t(oacc_loop_fixed_partitions): Return mask of used partitions.\n+\t(oacc_loop_auto_partitions): Emit dump info.\n+\t(oacc_loop_partition): Return mask of used partitions.\n+\t(execute_oacc_device_lower): Parse default dimension arg.  Adjust\n+\tloop partitioning and validation calls.\n+\n 2016-02-01  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/69556"}, {"sha": "5bd7d3ba691afc19f4ce6e2d83113fe37dac36d5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -1,3 +1,7 @@\n+2016-02-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c.opt (fopenacc-dim=): New option.\n+\n 2016-01-27  Ryan Burn  <contact@rnburn.com>\n \n \tPR cilkplus/69267"}, {"sha": "f243744a97885c32f91a652070a286f23e0f801f", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -1372,6 +1372,10 @@ fopenacc\n C ObjC C++ ObjC++ LTO Var(flag_openacc)\n Enable OpenACC.\n \n+fopenacc-dim=\n+C ObjC C++ ObjC++ LTO Joined Var(flag_openacc_dims)\n+Specify default OpenACC compute dimensions.\n+\n fopenmp\n C ObjC C++ ObjC++ LTO Var(flag_openmp)\n Enable OpenMP (implies -frecursive in Fortran)."}, {"sha": "1dadfc57fec941cb3bfa89ade6a0401dddc9deb8", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -4122,22 +4122,25 @@ nvptx_expand_builtin (tree exp, rtx target, rtx ARG_UNUSED (subtarget),\n /* Define dimension sizes for known hardware.  */\n #define PTX_VECTOR_LENGTH 32\n #define PTX_WORKER_LENGTH 32\n+#define PTX_GANG_DEFAULT  32\n \n /* Validate compute dimensions of an OpenACC offload or routine, fill\n    in non-unity defaults.  FN_LEVEL indicates the level at which a\n-   routine might spawn a loop.  It is negative for non-routines.  */\n+   routine might spawn a loop.  It is negative for non-routines.  If\n+   DECL is null, we are validating the default dimensions.  */\n \n static bool\n nvptx_goacc_validate_dims (tree decl, int dims[], int fn_level)\n {\n   bool changed = false;\n \n   /* The vector size must be 32, unless this is a SEQ routine.  */\n-  if (fn_level <= GOMP_DIM_VECTOR\n+  if (fn_level <= GOMP_DIM_VECTOR && fn_level >= -1\n+      && dims[GOMP_DIM_VECTOR] >= 0\n       && dims[GOMP_DIM_VECTOR] != PTX_VECTOR_LENGTH)\n     {\n-      if (dims[GOMP_DIM_VECTOR] >= 0 && fn_level < 0)\n-\twarning_at (DECL_SOURCE_LOCATION (decl), 0,\n+      if (fn_level < 0 && dims[GOMP_DIM_VECTOR] >= 0)\n+\twarning_at (decl ? DECL_SOURCE_LOCATION (decl) : UNKNOWN_LOCATION, 0,\n \t\t    dims[GOMP_DIM_VECTOR]\n \t\t    ? \"using vector_length (%d), ignoring %d\"\n \t\t    : \"using vector_length (%d), ignoring runtime setting\",\n@@ -4149,13 +4152,23 @@ nvptx_goacc_validate_dims (tree decl, int dims[], int fn_level)\n   /* Check the num workers is not too large.  */\n   if (dims[GOMP_DIM_WORKER] > PTX_WORKER_LENGTH)\n     {\n-      warning_at (DECL_SOURCE_LOCATION (decl), 0,\n+      warning_at (decl ? DECL_SOURCE_LOCATION (decl) : UNKNOWN_LOCATION, 0,\n \t\t  \"using num_workers (%d), ignoring %d\",\n \t\t  PTX_WORKER_LENGTH, dims[GOMP_DIM_WORKER]);\n       dims[GOMP_DIM_WORKER] = PTX_WORKER_LENGTH;\n       changed = true;\n     }\n \n+  if (!decl)\n+    {\n+      dims[GOMP_DIM_VECTOR] = PTX_VECTOR_LENGTH;\n+      if (dims[GOMP_DIM_WORKER] < 0)\n+\tdims[GOMP_DIM_WORKER] = PTX_WORKER_LENGTH;\n+      if (dims[GOMP_DIM_GANG] < 0)\n+\tdims[GOMP_DIM_GANG] = PTX_GANG_DEFAULT;\n+      changed = true;\n+    }\n+\n   return changed;\n }\n "}, {"sha": "fcc404e8b2baff371e1d6cf35170bdc52870b653", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -1963,9 +1963,13 @@ Programming Interface v2.0 @w{@uref{http://www.openacc.org/}}.  This option\n implies @option{-pthread}, and thus is only supported on targets that\n have support for @option{-pthread}.\n \n-Note that this is an experimental feature, incomplete, and subject to\n-change in future versions of GCC.  See\n-@w{@uref{https://gcc.gnu.org/wiki/OpenACC}} for more information.\n+@item -fopenacc-dim=@var{geom}\n+@opindex fopenacc-dim\n+@cindex OpenACC accelerator programming\n+Specify default compute dimensions for parallel offload regions that do\n+not explicitly specify.  The @var{geom} value is a triple of\n+':'-separated sizes, in order 'gang', 'worker' and, 'vector'.  A size\n+can be omitted, to use a target-specific default value.\n \n @item -fopenmp\n @opindex fopenmp"}, {"sha": "2392691e29cd41a99a72394dceac7de925e927c1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -5767,11 +5767,12 @@ to use it.\n @deftypefn {Target Hook} bool TARGET_GOACC_VALIDATE_DIMS (tree @var{decl}, int *@var{dims}, int @var{fn_level})\n This hook should check the launch dimensions provided for an OpenACC\n compute region, or routine.  Defaulted values are represented as -1\n-and non-constant values as 0. The @var{fn_level} is negative for the\n+and non-constant values as 0.  The @var{fn_level} is negative for the\n function corresponding to the compute region.  For a routine is is the\n-outermost level at which partitioned execution may be spawned.  It\n-should fill in anything that needs to default to non-unity and verify\n-non-defaults.  Diagnostics should be issued as appropriate.  Return\n+outermost level at which partitioned execution may be spawned.  The hook\n+should verify non-default values.  If DECL is NULL, global defaults\n+are being validated and unspecified defaults should be filled in.\n+Diagnostics should be issued as appropriate.  Return\n true, if changes have been made.  You must override this hook to\n provide dimensions larger than 1.\n @end deftypefn"}, {"sha": "36b4ddb7d5a330e917ff0165c386d22a85917a6c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -1,3 +1,7 @@\n+2016-02-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* lang.opt (fopenacc-dim=): New option.\n+\n 2016-01-31  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/67564"}, {"sha": "45428d8cf4102e9cba67dc30f299b2b355992aae", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -578,6 +578,10 @@ fopenacc\n Fortran LTO\n ; Documented in C\n \n+fopenacc-dim=\n+Fortran LTO Joined Var(flag_openacc_dims)\n+; Documented in C\n+\n fopenmp\n Fortran LTO\n ; Documented in C"}, {"sha": "ced6f2f9cfffb4f692323e5c32e9aed41af8558a", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -287,12 +287,25 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \t    append_option (decoded_options, decoded_options_count, foption);\n \t  /* -fmath-errno > -fno-math-errno,\n \t     -fsigned-zeros > -fno-signed-zeros,\n-\t     -ftrapping-math -> -fno-trapping-math,\n+\t     -ftrapping-math > -fno-trapping-math,\n \t     -fwrapv > -fno-wrapv.  */\n \t  else if (foption->value > (*decoded_options)[j].value)\n \t    (*decoded_options)[j] = *foption;\n \t  break;\n \n+\tcase OPT_fopenacc_dim_:\n+\t  /* Append or check identical.  */\n+\t  for (j = 0; j < *decoded_options_count; ++j)\n+\t    if ((*decoded_options)[j].opt_index == foption->opt_index)\n+\t      break;\n+\t  if (j == *decoded_options_count)\n+\t    append_option (decoded_options, decoded_options_count, foption);\n+\t  else if (strcmp ((*decoded_options)[j].arg, foption->arg))\n+\t    fatal_error (input_location,\n+\t\t\t \"Option %s with different values\",\n+\t\t\t foption->orig_option_with_args_text);\n+\t  break;\n+\n \tcase OPT_freg_struct_return:\n \tcase OPT_fpcc_struct_return:\n \tcase OPT_fshort_double:\n@@ -506,6 +519,7 @@ append_compiler_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n \tcase OPT_fwrapv:\n \tcase OPT_fopenmp:\n \tcase OPT_fopenacc:\n+\tcase OPT_fopenacc_dim_:\n \tcase OPT_fcilkplus:\n \tcase OPT_ftrapv:\n \tcase OPT_fstrict_overflow:"}, {"sha": "ec4b4b5545891acb860c1bc8ea3c7257760854c4", "filename": "gcc/omp-low.c", "status": "modified", "additions": 128, "deletions": 24, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -20238,13 +20238,80 @@ oacc_xform_loop (gcall *call)\n   gsi_replace_with_seq (&gsi, seq, true);\n }\n \n+/* Default partitioned and minimum partitioned dimensions.  */\n+\n+static int oacc_default_dims[GOMP_DIM_MAX];\n+static int oacc_min_dims[GOMP_DIM_MAX];\n+\n+/* Parse the default dimension parameter.  This is a set of\n+   :-separated optional compute dimensions.  Each specified dimension\n+   is a positive integer.  When device type support is added, it is\n+   planned to be a comma separated list of such compute dimensions,\n+   with all but the first prefixed by the colon-terminated device\n+   type.  */\n+\n+static void\n+oacc_parse_default_dims (const char *dims)\n+{\n+  int ix;\n+\n+  for (ix = GOMP_DIM_MAX; ix--;)\n+    {\n+      oacc_default_dims[ix] = -1;\n+      oacc_min_dims[ix] = 1;\n+    }\n+\n+#ifndef ACCEL_COMPILER\n+  /* Cannot be overridden on the host.  */\n+  dims = NULL;\n+#endif\n+  if (dims)\n+    {\n+      const char *pos = dims;\n+\n+      for (ix = 0; *pos && ix != GOMP_DIM_MAX; ix++)\n+\t{\n+\t  if (ix)\n+\t    {\n+\t      if (*pos != ':')\n+\t\tgoto malformed;\n+\t      pos++;\n+\t    }\n+\n+\t  if (*pos != ':')\n+\t    {\n+\t      long val;\n+\t      const char *eptr;\n+\n+\t      errno = 0;\n+\t      val = strtol (pos, CONST_CAST (char **, &eptr), 10);\n+\t      if (errno || val <= 0 || (unsigned)val != val)\n+\t\tgoto malformed;\n+\t      pos = eptr;\n+\t      oacc_default_dims[ix] = (int)val;\n+\t    }\n+\t}\n+      if (*pos)\n+\t{\n+\tmalformed:\n+\t  error_at (UNKNOWN_LOCATION,\n+\t\t    \"-fopenacc-dim operand is malformed at '%s'\", pos);\n+\t}\n+    }\n+\n+  /* Allow the backend to validate the dimensions.  */\n+  targetm.goacc.validate_dims (NULL_TREE, oacc_default_dims, -1);\n+  targetm.goacc.validate_dims (NULL_TREE, oacc_min_dims, -2);\n+}\n+\n /* Validate and update the dimensions for offloaded FN.  ATTRS is the\n    raw attribute.  DIMS is an array of dimensions, which is filled in.\n    LEVEL is the partitioning level of a routine, or -1 for an offload\n-   region itself.  */\n+   region itself. USED is the mask of partitioned execution in the\n+   function.  */\n \n static void\n-oacc_validate_dims (tree fn, tree attrs, int *dims, int level)\n+oacc_validate_dims (tree fn, tree attrs, int *dims, int level, unsigned used)\n {\n   tree purpose[GOMP_DIM_MAX];\n   unsigned ix;\n@@ -20265,11 +20332,29 @@ oacc_validate_dims (tree fn, tree attrs, int *dims, int level)\n \n   bool changed = targetm.goacc.validate_dims (fn, dims, level);\n \n-  /* Default anything left to 1.  */\n+  /* Default anything left to 1 or a partitioned default.  */\n   for (ix = 0; ix != GOMP_DIM_MAX; ix++)\n     if (dims[ix] < 0)\n       {\n-\tdims[ix] = 1;\n+\t/* The OpenACC spec says 'If the [num_gangs] clause is not\n+\t   specified, an implementation-defined default will be used;\n+\t   the default may depend on the code within the construct.' \n+\t   (2.5.6).  Thus an implementation is free to choose\n+\t   non-unity default for a parallel region that doesn't have\n+\t   any gang-partitioned loops.  However, it appears that there\n+\t   is a sufficient body of user code that expects non-gang\n+\t   partitioned regions to not execute in gang-redundant mode.\n+\t   So we (a) don't warn about the non-portability and (b) pick\n+\t   the minimum permissible dimension size when there is no\n+\t   partitioned execution.  Otherwise we pick the global\n+\t   default for the dimension, which the user can control.  The\n+\t   same wording and logic applies to num_workers and\n+\t   vector_length, however the worker- or vector- single\n+\t   execution doesn't have the same impact as gang-redundant\n+\t   execution.  (If the minimum gang-level partioning is not 1,\n+\t   the target is probably too confusing.)  */\n+\tdims[ix] = (used & GOMP_DIM_MASK (ix)\n+\t\t    ? oacc_default_dims[ix] : oacc_min_dims[ix]);\n \tchanged = true;\n       }\n \n@@ -20719,14 +20804,15 @@ oacc_loop_process (oacc_loop *loop)\n \n /* Walk the OpenACC loop heirarchy checking and assigning the\n    programmer-specified partitionings.  OUTER_MASK is the partitioning\n-   this loop is contained within.  Return true if we contain an\n-   auto-partitionable loop.  */\n+   this loop is contained within.  Return mask of partitioning\n+   encountered.  If any auto loops are discovered, set GOMP_DIM_MAX\n+   bit.  */\n \n-static bool\n+static unsigned\n oacc_loop_fixed_partitions (oacc_loop *loop, unsigned outer_mask)\n {\n   unsigned this_mask = loop->mask;\n-  bool has_auto = false;\n+  unsigned mask_all = 0;\n   bool noisy = true;\n \n #ifdef ACCEL_COMPILER\n@@ -20760,7 +20846,7 @@ oacc_loop_fixed_partitions (oacc_loop *loop, unsigned outer_mask)\n \t    }\n \t}\n       if (auto_par && (loop->flags & OLF_INDEPENDENT))\n-\thas_auto = true;\n+\tmask_all |= GOMP_DIM_MASK (GOMP_DIM_MAX);\n     }\n \n   if (this_mask & outer_mask)\n@@ -20814,16 +20900,16 @@ oacc_loop_fixed_partitions (oacc_loop *loop, unsigned outer_mask)\n     }\n \n   loop->mask = this_mask;\n+  mask_all |= this_mask;\n+  \n+  if (loop->child)\n+    mask_all |= oacc_loop_fixed_partitions (loop->child,\n+\t\t\t\t\t    outer_mask | this_mask);\n \n-  if (loop->child\n-      && oacc_loop_fixed_partitions (loop->child, outer_mask | this_mask))\n-    has_auto = true;\n-\n-  if (loop->sibling\n-      && oacc_loop_fixed_partitions (loop->sibling, outer_mask))\n-    has_auto = true;\n+  if (loop->sibling)\n+    mask_all |= oacc_loop_fixed_partitions (loop->sibling, outer_mask);\n \n-  return has_auto;\n+  return mask_all;\n }\n \n /* Walk the OpenACC loop heirarchy to assign auto-partitioned loops.\n@@ -20865,6 +20951,11 @@ oacc_loop_auto_partitions (oacc_loop *loop, unsigned outer_mask)\n \twarning_at (loop->loc, 0,\n \t\t    \"insufficient partitioning available to parallelize loop\");\n \n+      if (dump_file)\n+\tfprintf (dump_file, \"Auto loop %s:%d assigned %d\\n\",\n+\t\t LOCATION_FILE (loop->loc), LOCATION_LINE (loop->loc),\n+\t\t this_mask);\n+\n       loop->mask = this_mask;\n     }\n   inner_mask |= loop->mask;\n@@ -20876,13 +20967,19 @@ oacc_loop_auto_partitions (oacc_loop *loop, unsigned outer_mask)\n }\n \n /* Walk the OpenACC loop heirarchy to check and assign partitioning\n-   axes.  */\n+   axes.  Return mask of partitioning.  */\n \n-static void\n+static unsigned\n oacc_loop_partition (oacc_loop *loop, unsigned outer_mask)\n {\n-  if (oacc_loop_fixed_partitions (loop, outer_mask))\n-    oacc_loop_auto_partitions (loop, outer_mask);\n+  unsigned mask_all = oacc_loop_fixed_partitions (loop, outer_mask);\n+\n+  if (mask_all & GOMP_DIM_MASK (GOMP_DIM_MAX))\n+    {\n+      mask_all ^= GOMP_DIM_MASK (GOMP_DIM_MAX);\n+      mask_all |= oacc_loop_auto_partitions (loop, outer_mask);\n+    }\n+  return mask_all;\n }\n \n /* Default fork/join early expander.  Delete the function calls if\n@@ -20958,6 +21055,13 @@ execute_oacc_device_lower ()\n     /* Not an offloaded function.  */\n     return 0;\n \n+  /* Parse the default dim argument exactly once.  */\n+  if ((const void *)flag_openacc_dims != &flag_openacc_dims)\n+    {\n+      oacc_parse_default_dims (flag_openacc_dims);\n+      flag_openacc_dims = (char *)&flag_openacc_dims;\n+    } \n+\n   /* Discover, partition and process the loops.  */\n   oacc_loop *loops = oacc_loop_discovery ();\n   int fn_level = oacc_fn_attrib_level (attrs);\n@@ -20969,10 +21073,10 @@ execute_oacc_device_lower ()\n \t     : \"Function is routine level %d\\n\", fn_level);\n \n   unsigned outer_mask = fn_level >= 0 ? GOMP_DIM_MASK (fn_level) - 1 : 0;\n-  oacc_loop_partition (loops, outer_mask);\n-\n+  unsigned used_mask = oacc_loop_partition (loops, outer_mask);\n   int dims[GOMP_DIM_MAX];\n-  oacc_validate_dims (current_function_decl, attrs, dims, fn_level);\n+\n+  oacc_validate_dims (current_function_decl, attrs, dims, fn_level, used_mask);\n \n   if (dump_file)\n     {"}, {"sha": "fa0af67475f0a64e083135d4ef95cc9f37851c1f", "filename": "gcc/target.def", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -1648,11 +1648,12 @@ DEFHOOK\n (validate_dims,\n \"This hook should check the launch dimensions provided for an OpenACC\\n\\\n compute region, or routine.  Defaulted values are represented as -1\\n\\\n-and non-constant values as 0. The @var{fn_level} is negative for the\\n\\\n+and non-constant values as 0.  The @var{fn_level} is negative for the\\n\\\n function corresponding to the compute region.  For a routine is is the\\n\\\n-outermost level at which partitioned execution may be spawned.  It\\n\\\n-should fill in anything that needs to default to non-unity and verify\\n\\\n-non-defaults.  Diagnostics should be issued as appropriate.  Return\\n\\\n+outermost level at which partitioned execution may be spawned.  The hook\\n\\\n+should verify non-default values.  If DECL is NULL, global defaults\\n\\\n+are being validated and unspecified defaults should be filled in.\\n\\\n+Diagnostics should be issued as appropriate.  Return\\n\\\n true, if changes have been made.  You must override this hook to\\n\\\n provide dimensions larger than 1.\",\n bool, (tree decl, int *dims, int fn_level),"}, {"sha": "c94fa2774753813b0e9ff2be22267e2a9931c3d4", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -1,3 +1,8 @@\n+2016-02-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c: New.\n+\t* testsuite/libgomp.oacc-fortran/routine-7.f90: Serialize loop.\n+\n 2016-01-26  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/69110"}, {"sha": "36b882ff330207c8ef4b1f5be4cdabcb9118f858", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -0,0 +1,133 @@\n+\n+/* { dg-additional-options \"-O2 -fopenacc-dim=16:16\" } */\n+\n+#include <openacc.h>\n+#include <alloca.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#pragma acc routine\n+static int __attribute__ ((noinline)) coord ()\n+{\n+  int res = 0;\n+\n+  if (acc_on_device (acc_device_nvidia))\n+    {\n+      int g = 0, w = 0, v = 0;\n+\n+      __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n+      __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n+      __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+      res = (1 << 24) | (g << 16) | (w << 8) | v;\n+    }\n+  return res;\n+}\n+\n+\n+int check (const int *ary, int size, int gp, int wp, int vp)\n+{\n+  int exit = 0;\n+  int ix;\n+  int *gangs = (int *)alloca (gp * sizeof (int));\n+  int *workers = (int *)alloca (wp * sizeof (int));\n+  int *vectors = (int *)alloca (vp * sizeof (int));\n+  int offloaded = 0;\n+  \n+  memset (gangs, 0, gp * sizeof (int));\n+  memset (workers, 0, wp * sizeof (int));\n+  memset (vectors, 0, vp * sizeof (int));\n+  \n+  for (ix = 0; ix < size; ix++)\n+    {\n+      int g = (ary[ix] >> 16) & 0xff;\n+      int w = (ary[ix] >> 8) & 0xff;\n+      int v = (ary[ix] >> 0) & 0xff;\n+\n+      if (g >= gp || w >= wp || v >= vp)\n+\t{\n+\t  printf (\"unexpected cpu %#x used\\n\", ary[ix]);\n+\t  exit = 1;\n+\t}\n+      else\n+\t{\n+\t  vectors[v]++;\n+\t  workers[w]++;\n+\t  gangs[g]++;\n+\t}\n+      offloaded += ary[ix] >> 24;\n+    }\n+\n+  if (!offloaded)\n+    return 0;\n+\n+  if (offloaded != size)\n+    {\n+      printf (\"offloaded %d times,  expected %d\\n\", offloaded, size);\n+      return 1;\n+    }\n+\n+  for (ix = 0; ix < gp; ix++)\n+    if (gangs[ix] != gangs[0])\n+      {\n+\tprintf (\"gang %d not used %d times\\n\", ix, gangs[0]);\n+\texit = 1;\n+      }\n+  \n+  for (ix = 0; ix < wp; ix++)\n+    if (workers[ix] != workers[0])\n+      {\n+\tprintf (\"worker %d not used %d times\\n\", ix, workers[0]);\n+\texit = 1;\n+      }\n+  \n+  for (ix = 0; ix < vp; ix++)\n+    if (vectors[ix] != vectors[0])\n+      {\n+\tprintf (\"vector %d not used %d times\\n\", ix, vectors[0]);\n+\texit = 1;\n+      }\n+  \n+  return exit;\n+}\n+\n+#define N (32 *32*32)\n+\n+int test_1 (int gp, int wp, int vp)\n+{\n+  int ary[N];\n+  int exit = 0;\n+  \n+#pragma acc parallel copyout (ary)\n+  {\n+#pragma acc loop gang (static:1)\n+    for (int ix = 0; ix < N; ix++)\n+      ary[ix] = coord ();\n+  }\n+\n+  exit |= check (ary, N, gp, 1, 1);\n+\n+#pragma  acc parallel copyout (ary)\n+  {\n+#pragma acc loop worker\n+    for (int ix = 0; ix < N; ix++)\n+      ary[ix] = coord ();\n+  }\n+\n+  exit |= check (ary, N, 1, wp, 1);\n+\n+#pragma  acc parallel copyout (ary)\n+  {\n+#pragma acc loop vector\n+    for (int ix = 0; ix < N; ix++)\n+      ary[ix] = coord ();\n+  }\n+\n+  exit |= check (ary, N, 1, 1, vp);\n+\n+  return exit;\n+}\n+\n+int main ()\n+{\n+  return test_1 (16, 16, 32);\n+}"}, {"sha": "200188ec0511bd1970e280f76d2b9dac5eefc187", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-7.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90?ref=b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "patch": "@@ -41,7 +41,7 @@ program main\n   end do\n \n   !$acc parallel copy (b)\n-  !$acc loop\n+  !$acc loop seq\n     do i = 1, N\n       call worker (b)\n     end do\n@@ -56,7 +56,7 @@ program main\n   end do\n \n   !$acc parallel copy (a)\n-  !$acc loop\n+  !$acc loop seq\n     do i = 1, N\n       call vector (a)\n     end do"}]}