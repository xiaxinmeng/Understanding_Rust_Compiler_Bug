{"sha": "302b6836280d07464f65d7be2433ab4ecc92e1ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAyYjY4MzYyODBkMDc0NjRmNjVkN2JlMjQzM2FiNGVjYzkyZTFjZQ==", "commit": {"author": {"name": "Andre Simoes Dias Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-04-07T14:29:31Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-04-07T14:44:52Z"}, "message": "arm: MVE: Fix vec extracts to memory\n\nThis patch fixes vec extracts to memory that can arise from code as seen in the\ntestcase added. The patch fixes this by allowing mem operands in the set of\nmve_vec_extract patterns, which given the only '=r' constraint will lead to the\nscalar value being written to a register and then stored in memory using scalar\nstore pattern.\n\ngcc/ChangeLog:\n2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/arm/mve.md (mve_vec_extract*): Allow memory operands in set.\n\ngcc/testsuite/ChangeLog:\n2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/mve_vec_extracts_from_memory.c: New\n\ttest.", "tree": {"sha": "0eb8358856febe613b51dc48ccd66c01694e4c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eb8358856febe613b51dc48ccd66c01694e4c1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/302b6836280d07464f65d7be2433ab4ecc92e1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302b6836280d07464f65d7be2433ab4ecc92e1ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302b6836280d07464f65d7be2433ab4ecc92e1ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302b6836280d07464f65d7be2433ab4ecc92e1ce/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2ce75fef9fda5c7ff89c4287b30492225f07401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ce75fef9fda5c7ff89c4287b30492225f07401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ce75fef9fda5c7ff89c4287b30492225f07401"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "b71e45aa9d495bdc0eb63cf00362a4eddc1cad63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302b6836280d07464f65d7be2433ab4ecc92e1ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302b6836280d07464f65d7be2433ab4ecc92e1ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=302b6836280d07464f65d7be2433ab4ecc92e1ce", "patch": "@@ -1,3 +1,7 @@\n+2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/mve.md (mve_vec_extract*): Allow memory operands in set.\n+\n 2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm.c (arm_mve_immediate_check): Removed."}, {"sha": "c49c14c4240838ce086f424f58726e2e94cf190e", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302b6836280d07464f65d7be2433ab4ecc92e1ce/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302b6836280d07464f65d7be2433ab4ecc92e1ce/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=302b6836280d07464f65d7be2433ab4ecc92e1ce", "patch": "@@ -10993,7 +10993,7 @@\n ;; [vgetq_lane_u, vgetq_lane_s, vgetq_lane_f])\n ;;\n (define_insn \"mve_vec_extract<mode><V_elem_l>\"\n- [(set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+ [(set (match_operand:<V_elem> 0 \"nonimmediate_operand\" \"=r\")\n    (vec_select:<V_elem>\n     (match_operand:MVE_VLD_ST 1 \"s_register_operand\" \"w\")\n     (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")])))]\n@@ -11011,7 +11011,7 @@\n  [(set_attr \"type\" \"mve_move\")])\n \n (define_insn \"mve_vec_extractv2didi\"\n- [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+ [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r\")\n    (vec_select:DI\n     (match_operand:V2DI 1 \"s_register_operand\" \"w\")\n     (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")])))]\n@@ -11024,7 +11024,7 @@\n   if (elt == 0)\n    return \"vmov\\t%Q0, %R0, %e1\";\n   else\n-   return \"vmov\\t%J0, %K0, %f1\";\n+   return \"vmov\\t%Q0, %R0, %f1\";\n }\n  [(set_attr \"type\" \"mve_move\")])\n "}, {"sha": "fe79c5c34f5b5a9db63433cafb6095f6d134d25a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302b6836280d07464f65d7be2433ab4ecc92e1ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302b6836280d07464f65d7be2433ab4ecc92e1ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=302b6836280d07464f65d7be2433ab4ecc92e1ce", "patch": "@@ -1,3 +1,8 @@\n+2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/mve_vec_extracts_from_memory.c: New\n+\ttest.\n+\n 2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/mve_immediates_1_n.c: New test."}, {"sha": "12f2f2d38d3c2e189a9c06f21fc63e2c23e2e721", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vec_extracts_from_memory.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302b6836280d07464f65d7be2433ab4ecc92e1ce/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vec_extracts_from_memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302b6836280d07464f65d7be2433ab4ecc92e1ce/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vec_extracts_from_memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vec_extracts_from_memory.c?ref=302b6836280d07464f65d7be2433ab4ecc92e1ce", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t *vu8;\n+int8x16_t *vs8;\n+uint16x8_t *vu16;\n+int16x8_t *vs16;\n+uint32x4_t *vu32;\n+int32x4_t *vs32;\n+uint64x2_t *vu64;\n+int64x2_t *vs64;\n+float16x8_t *vf16;\n+float32x4_t *vf32;\n+uint8_t u8;\n+uint16_t u16;\n+uint32_t u32;\n+uint64_t u64;\n+int8_t s8;\n+int16_t s16;\n+int32_t s32;\n+int64_t s64;\n+float16_t f16;\n+float32_t f32;\n+\n+void foo (void)\n+{\n+  u8 = vgetq_lane (*vu8, 1);\n+  u16 = vgetq_lane (*vu16, 1);\n+  u32 = vgetq_lane (*vu32, 1);\n+  u64 = vgetq_lane (*vu64, 1);\n+  s8 = vgetq_lane (*vs8, 1);\n+  s16 = vgetq_lane (*vs16, 1);\n+  s32 = vgetq_lane (*vs32, 1);\n+  s64 = vgetq_lane (*vs64, 1);\n+  f16 = vgetq_lane (*vf16, 1);\n+  f32 = vgetq_lane (*vf32, 1);\n+}"}]}