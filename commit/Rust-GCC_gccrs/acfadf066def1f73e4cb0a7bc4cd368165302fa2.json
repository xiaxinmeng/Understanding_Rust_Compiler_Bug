{"sha": "acfadf066def1f73e4cb0a7bc4cd368165302fa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmYWRmMDY2ZGVmMWY3M2U0Y2IwYTdiYzRjZDM2ODE2NTMwMmZhMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2016-06-14T14:15:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-06-14T14:15:53Z"}, "message": "typeck2.c (digest_init_r): Use EXPR_LOC_OR_LOC on init.\n\n/cp\n2016-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck2.c (digest_init_r): Use EXPR_LOC_OR_LOC on init.\n\n/testsuite\n2016-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/init/array46.C: New.\n\nFrom-SVN: r237444", "tree": {"sha": "27b84d9ad88b675b4c1274c0ef0d641a0728a6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27b84d9ad88b675b4c1274c0ef0d641a0728a6b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acfadf066def1f73e4cb0a7bc4cd368165302fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acfadf066def1f73e4cb0a7bc4cd368165302fa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acfadf066def1f73e4cb0a7bc4cd368165302fa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acfadf066def1f73e4cb0a7bc4cd368165302fa2/comments", "author": null, "committer": null, "parents": [{"sha": "4d568ab255e88918debfd75f010dfefa8f8d8738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d568ab255e88918debfd75f010dfefa8f8d8738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d568ab255e88918debfd75f010dfefa8f8d8738"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "64acdc814580ae0ddea70ce902504db99755a4c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfadf066def1f73e4cb0a7bc4cd368165302fa2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfadf066def1f73e4cb0a7bc4cd368165302fa2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=acfadf066def1f73e4cb0a7bc4cd368165302fa2", "patch": "@@ -1,3 +1,7 @@\n+2016-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck2.c (digest_init_r): Use EXPR_LOC_OR_LOC on init.\n+\n 2016-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (grokdeclarator): Fix typo in pedwarn text."}, {"sha": "65d91c97784997f26351f3bb86ef33ae57b90ae9", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfadf066def1f73e4cb0a7bc4cd368165302fa2/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfadf066def1f73e4cb0a7bc4cd368165302fa2/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=acfadf066def1f73e4cb0a7bc4cd368165302fa2", "patch": "@@ -1009,6 +1009,8 @@ digest_init_r (tree type, tree init, bool nested, int flags,\n   if (TREE_CODE (init) == NON_LVALUE_EXPR)\n     init = TREE_OPERAND (init, 0);\n \n+  location_t loc = EXPR_LOC_OR_LOC (init, input_location);\n+\n   /* Initialization of an array of chars from a string constant. The initializer\n      can be optionally enclosed in braces, but reshape_init has already removed\n      them if they were present.  */\n@@ -1017,7 +1019,7 @@ digest_init_r (tree type, tree init, bool nested, int flags,\n       if (nested && !TYPE_DOMAIN (type))\n \t{\n \t  /* C++ flexible array members have a null domain.  */\n-\t  pedwarn (EXPR_LOC_OR_LOC (init, input_location), OPT_Wpedantic,\n+\t  pedwarn (loc, OPT_Wpedantic,\n \t\t   \"initialization of a flexible array member\");\n \t}\n \n@@ -1033,7 +1035,7 @@ digest_init_r (tree type, tree init, bool nested, int flags,\n \t      if (char_type != char_type_node)\n \t\t{\n \t\t  if (complain & tf_error)\n-\t\t    error (\"char-array initialized from wide string\");\n+\t\t    error_at (loc, \"char-array initialized from wide string\");\n \t\t  return error_mark_node;\n \t\t}\n \t    }\n@@ -1042,14 +1044,15 @@ digest_init_r (tree type, tree init, bool nested, int flags,\n \t      if (char_type == char_type_node)\n \t\t{\n \t\t  if (complain & tf_error)\n-\t\t    error (\"int-array initialized from non-wide string\");\n+\t\t    error_at (loc,\n+\t\t\t      \"int-array initialized from non-wide string\");\n \t\t  return error_mark_node;\n \t\t}\n \t      else if (char_type != typ1)\n \t\t{\n \t\t  if (complain & tf_error)\n-\t\t    error (\"int-array initialized from incompatible \"\n-\t\t\t   \"wide string\");\n+\t\t    error_at (loc, \"int-array initialized from incompatible \"\n+\t\t\t      \"wide string\");\n \t\t  return error_mark_node;\n \t\t}\n \t    }\n@@ -1069,7 +1072,7 @@ digest_init_r (tree type, tree init, bool nested, int flags,\n \t\t counted in the length of the constant, but in C++ this would\n \t\t be invalid.  */\n \t      if (size < TREE_STRING_LENGTH (init))\n-\t\tpermerror (input_location, \"initializer-string for array \"\n+\t\tpermerror (loc, \"initializer-string for array \"\n \t\t\t   \"of chars is too long\");\n \t    }\n \t  return init;\n@@ -1122,8 +1125,8 @@ digest_init_r (tree type, tree init, bool nested, int flags,\n       if (COMPOUND_LITERAL_P (init) && TREE_CODE (type) == ARRAY_TYPE)\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"cannot initialize aggregate of type %qT with \"\n-\t\t   \"a compound literal\", type);\n+\t    error_at (loc, \"cannot initialize aggregate of type %qT with \"\n+\t\t      \"a compound literal\", type);\n \n \t  return error_mark_node;\n \t}\n@@ -1140,8 +1143,8 @@ digest_init_r (tree type, tree init, bool nested, int flags,\n \t    return init;\n \n \t  if (complain & tf_error)\n-\t    error (\"array must be initialized with a brace-enclosed\"\n-\t\t   \" initializer\");\n+\t    error_at (loc, \"array must be initialized with a brace-enclosed\"\n+\t\t      \" initializer\");\n \t  return error_mark_node;\n \t}\n "}, {"sha": "3addc24998ffc788d9fd28ee69702b355ba4a57a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfadf066def1f73e4cb0a7bc4cd368165302fa2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfadf066def1f73e4cb0a7bc4cd368165302fa2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=acfadf066def1f73e4cb0a7bc4cd368165302fa2", "patch": "@@ -1,3 +1,7 @@\n+2016-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/init/array46.C: New.\n+\n 2016-06-14  Uros Bizjak  <ubizjak@gmail.com>\n \n         * gcc.target/i386/float128-3.c: New test."}, {"sha": "34fc266575699427ed62b6e88e6bc75c0451fd50", "filename": "gcc/testsuite/g++.dg/init/array46.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfadf066def1f73e4cb0a7bc4cd368165302fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfadf066def1f73e4cb0a7bc4cd368165302fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray46.C?ref=acfadf066def1f73e4cb0a7bc4cd368165302fa2", "patch": "@@ -0,0 +1,3 @@\n+int foo();\n+int a[] = foo();  // { dg-error \"14:initializer fails to determine size\" }\n+// { dg-error \"14:array must be initialized\" \"\" { target *-*-* } 2 }"}]}