{"sha": "3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZmZDE4ZjE2Y2NiNTI1NmFhZjVkOGU2YTU1ZmM4YWQyZDUyMTA4NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-23T08:51:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-23T08:51:38Z"}, "message": "[multiple changes]\n\n2012-01-23  Robert Dewar  <dewar@adacore.com>\n\n\t* sprint.ads, sprint.adb (Sprint_Node_List): Add New_Lines parameter\n\t(pg,po,ps): Make sure each entry starts on new line.\n\n2012-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-calend.ads, a-calend.adb: Define types int and int_Pointer. Update\n\tthe parameter profile of procedure localtime_tzoff and its associated\n\tcomment.\n\t(Day_Of_Week): Do not treat the input date as historical\n\twith respect to time zones.\n\t(Split): Do not treat the input\n\tdate as historical with respect to time zones.\t(Time_Of): Do\n\tnot treat the input constituents as forming a historical date\n\twith respect to time zones.\n\t(UTC_Time_Offset): Add new formal\n\tparameter Is_Historic. Add local variable Flag. Update the call\n\tto localtime_tzoff.\n\t* a-catizo.ads, a-catizo.adb (UTC_Time_Offset): New routine.\n\t(UTC_Time_Offset (Time)): Update the call to\n\tTime_Zone_Operations.UTC_Time_Offset.\n\t* sysdep.c (__gnat_localtime_tzoff): Update parameter\n\tprofile. Split the processing of offsets on Windows into two - one\n\tpart of historic time stamps and the other for the current time.\n\nFrom-SVN: r183413", "tree": {"sha": "ca1029610d8618cd4042b4926c54ebe6c3185af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca1029610d8618cd4042b4926c54ebe6c3185af8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/comments", "author": null, "committer": null, "parents": [{"sha": "ce20f35b8f111d13784ac796abbf7dcc7720e9ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce20f35b8f111d13784ac796abbf7dcc7720e9ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce20f35b8f111d13784ac796abbf7dcc7720e9ae"}], "stats": {"total": 280, "additions": 200, "deletions": 80}, "files": [{"sha": "f433549851058205c6d454cbacdd88e3793aa9a6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085", "patch": "@@ -1,3 +1,29 @@\n+2012-01-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sprint.ads, sprint.adb (Sprint_Node_List): Add New_Lines parameter\n+\t(pg,po,ps): Make sure each entry starts on new line.\n+\n+2012-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-calend.ads, a-calend.adb: Define types int and int_Pointer. Update\n+\tthe parameter profile of procedure localtime_tzoff and its associated\n+\tcomment.\n+\t(Day_Of_Week): Do not treat the input date as historical\n+\twith respect to time zones.\n+\t(Split): Do not treat the input\n+\tdate as historical with respect to time zones.\t(Time_Of): Do\n+\tnot treat the input constituents as forming a historical date\n+\twith respect to time zones.\n+\t(UTC_Time_Offset): Add new formal\n+\tparameter Is_Historic. Add local variable Flag. Update the call\n+\tto localtime_tzoff.\n+\t* a-catizo.ads, a-catizo.adb (UTC_Time_Offset): New routine.\n+\t(UTC_Time_Offset (Time)): Update the call to\n+\tTime_Zone_Operations.UTC_Time_Offset.\n+\t* sysdep.c (__gnat_localtime_tzoff): Update parameter\n+\tprofile. Split the processing of offsets on Windows into two - one\n+\tpart of historic time stamps and the other for the current time.\n+\n 2012-01-23  Robert Dewar  <dewar@adacore.com>\n \n \t* a-calend.adb: Minor reformatting."}, {"sha": "f5fbbd5c4ff3625c674de2fb22d423e374c2863e", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085", "patch": "@@ -1025,7 +1025,10 @@ package body Ada.Calendar is\n       function Day_Of_Week (Date : Time) return Integer is\n          Date_N    : constant Time_Rep := Time_Rep (Date);\n          Time_Zone : constant Long_Integer :=\n-                       Time_Zones_Operations.UTC_Time_Offset (Date);\n+                       Time_Zones_Operations.UTC_Time_Offset\n+                         (Date        => Date,\n+                          Is_Historic => False);\n+\n          Ada_Low_N : Time_Rep;\n          Day_Count : Long_Integer;\n          Day_Dur   : Time_Dur;\n@@ -1138,7 +1141,9 @@ package body Ada.Calendar is\n          else\n             declare\n                Off : constant Long_Integer :=\n-                       Time_Zones_Operations.UTC_Time_Offset (Time (Date_N));\n+                       Time_Zones_Operations.UTC_Time_Offset\n+                         (Date        => Time (Date_N),\n+                          Is_Historic => False);\n             begin\n                Date_N := Date_N + Time_Rep (Off) * Nano;\n             end;\n@@ -1360,12 +1365,14 @@ package body Ada.Calendar is\n             declare\n                Current_Off   : constant Long_Integer :=\n                                  Time_Zones_Operations.UTC_Time_Offset\n-                                   (Time (Res_N));\n+                                   (Date        => Time (Res_N),\n+                                    Is_Historic => False);\n                Current_Res_N : constant Time_Rep :=\n                                  Res_N - Time_Rep (Current_Off) * Nano;\n                Off           : constant Long_Integer :=\n                                  Time_Zones_Operations.UTC_Time_Offset\n-                                   (Time (Current_Res_N));\n+                                   (Date        => Time (Current_Res_N),\n+                                    Is_Historic => False);\n             begin\n                Res_N := Res_N - Time_Rep (Off) * Nano;\n             end;\n@@ -1438,29 +1445,38 @@ package body Ada.Calendar is\n       Nanos_In_56_Years : constant := (14 * 366 + 42 * 365) * Nanos_In_Day;\n \n       subtype long is Long_Integer;\n+      subtype int  is Integer;\n       type long_Pointer is access all long;\n+      type int_Pointer  is access all int;\n \n       type time_t is\n         range -(2 ** (Standard'Address_Size - Integer'(1))) ..\n               +(2 ** (Standard'Address_Size - Integer'(1)) - 1);\n       type time_t_Pointer is access all time_t;\n \n       procedure localtime_tzoff\n-       (timer : time_t_Pointer;\n-        off   : long_Pointer);\n+        (timer       : time_t_Pointer;\n+         is_historic : int_Pointer;\n+         off         : long_Pointer);\n       pragma Import (C, localtime_tzoff, \"__gnat_localtime_tzoff\");\n       --  This is a lightweight wrapper around the system library function\n       --  localtime_r. Parameter 'off' captures the UTC offset which is either\n       --  retrieved from the tm struct or calculated from the 'timezone' extern\n-      --  and the tm_isdst flag in the tm struct.\n+      --  and the tm_isdst flag in the tm struct. Flag 'is_historic' denotes\n+      --  whether 'timer' is a historical time stamp. If this is not the case,\n+      --  the routine returns the offset of the local time zone.\n \n       ---------------------\n       -- UTC_Time_Offset --\n       ---------------------\n \n-      function UTC_Time_Offset (Date : Time) return Long_Integer is\n+      function UTC_Time_Offset\n+        (Date        : Time;\n+         Is_Historic : Boolean := True) return Long_Integer\n+      is\n          Adj_Cent : Integer;\n          Date_N   : Time_Rep;\n+         Flag     : aliased int;\n          Offset   : aliased long;\n          Secs_T   : aliased time_t;\n \n@@ -1499,8 +1515,13 @@ package body Ada.Calendar is\n \n          Secs_T := time_t (Date_N / Nano);\n \n+         --  Determine whether to treat the input date as historical or not\n+\n+         Flag := (if Is_Historic then 1 else 0);\n+\n          localtime_tzoff\n            (Secs_T'Unchecked_Access,\n+            Flag'Unchecked_Access,\n             Offset'Unchecked_Access);\n \n          return Offset;\n@@ -1512,4 +1533,5 @@ package body Ada.Calendar is\n \n begin\n    System.OS_Primitives.Initialize;\n+\n end Ada.Calendar;"}, {"sha": "240e62cca9885396918f85f024b642985e91c0d2", "filename": "gcc/ada/a-calend.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fa-calend.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fa-calend.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.ads?ref=3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -350,8 +350,12 @@ private\n \n    package Time_Zones_Operations is\n \n-      function UTC_Time_Offset (Date : Time) return Long_Integer;\n-      --  Return the offset in seconds from UTC\n+      function UTC_Time_Offset\n+        (Date        : Time;\n+         Is_Historic : Boolean := True) return Long_Integer;\n+      --  Return the offset in seconds from UTC of an arbitrary date. If flag\n+      --  Is_Historic is set to False, then return the local time zone offset\n+      --  regardless of what Date designates.\n \n    end Time_Zones_Operations;\n "}, {"sha": "b8f74b37c772de7b12b193fac0f8d4b2b63e6692", "filename": "gcc/ada/a-catizo.adb", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fa-catizo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fa-catizo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-catizo.adb?ref=3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2009, Free Software Foundation, Inc.            --\n+--         Copyright (C) 2009-2012, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,9 +42,41 @@ package body Ada.Calendar.Time_Zones is\n    -- UTC_Time_Offset --\n    ---------------------\n \n-   function UTC_Time_Offset (Date : Time := Clock) return Time_Offset is\n+   function UTC_Time_Offset return Time_Offset is\n       Offset_L : constant Long_Integer :=\n-                   Time_Zones_Operations.UTC_Time_Offset (Date);\n+                   Time_Zones_Operations.UTC_Time_Offset\n+                     (Date        => Clock,\n+                      Is_Historic => False);\n+      Offset   : Time_Offset;\n+\n+   begin\n+      if Offset_L = Invalid_Time_Zone_Offset then\n+         raise Unknown_Zone_Error;\n+      end if;\n+\n+      --  The offset returned by Time_Zones_Operations.UTC_Time_Offset is in\n+      --  seconds, the returned value needs to be in minutes.\n+\n+      Offset := Time_Offset (Offset_L / 60);\n+\n+      --  Validity checks\n+\n+      if not Offset'Valid then\n+         raise Unknown_Zone_Error;\n+      end if;\n+\n+      return Offset;\n+   end UTC_Time_Offset;\n+\n+   ---------------------\n+   -- UTC_Time_Offset --\n+   ---------------------\n+\n+   function UTC_Time_Offset (Date : Time) return Time_Offset is\n+      Offset_L : constant Long_Integer :=\n+                   Time_Zones_Operations.UTC_Time_Offset\n+                     (Date        => Date,\n+                      Is_Historic => True);\n       Offset   : Time_Offset;\n \n    begin"}, {"sha": "cbd952d95d6157c8d744cd5f14b3f1075e2e7b69", "filename": "gcc/ada/a-catizo.ads", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fa-catizo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fa-catizo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-catizo.ads?ref=3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---         Copyright (C) 2005-2008, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2005-2012, Free Software Foundation, Inc.          --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT.  In accordance with the copyright of that document, you can freely --\n@@ -26,7 +26,12 @@ package Ada.Calendar.Time_Zones is\n \n    Unknown_Zone_Error : exception;\n \n-   function UTC_Time_Offset (Date : Time := Clock) return Time_Offset;\n+   function UTC_Time_Offset return Time_Offset;\n+   --  Returns (in minutes), the difference between the implementation-defined\n+   --  time zone of Calendar, and UTC time. If the time zone of the Calendar\n+   --  implementation is unknown, raises Unknown_Zone_Error.\n+\n+   function UTC_Time_Offset (Date : Time) return Time_Offset;\n    --  Returns (in minutes), the difference between the implementation-defined\n    --  time zone of Calendar, and UTC time, at the time Date. If the time zone\n    --  of the Calendar implementation is unknown, raises Unknown_Zone_Error."}, {"sha": "17aca3b8342bcd73008622edbb0deeee212291f3", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -420,7 +420,7 @@ package body Sprint is\n       Current_Source_File := No_Source_File;\n \n       if Arg in List_Range then\n-         Sprint_Node_List (List_Id (Arg));\n+         Sprint_Node_List (List_Id (Arg), New_Lines => True);\n \n       elsif Arg in Node_Range then\n          Sprint_Node (Node_Id (Arg));\n@@ -443,7 +443,7 @@ package body Sprint is\n       Current_Source_File := No_Source_File;\n \n       if Arg in List_Range then\n-         Sprint_Node_List (List_Id (Arg));\n+         Sprint_Node_List (List_Id (Arg), New_Lines => True);\n \n       elsif Arg in Node_Range then\n          Sprint_Node (Node_Id (Arg));\n@@ -490,7 +490,7 @@ package body Sprint is\n       Current_Source_File := No_Source_File;\n \n       if Arg in List_Range then\n-         Sprint_Node_List (List_Id (Arg));\n+         Sprint_Node_List (List_Id (Arg), New_Lines => True);\n \n       elsif Arg in Node_Range then\n          Sprint_Node (Node_Id (Arg));\n@@ -3263,7 +3263,7 @@ package body Sprint is\n    -- Sprint_Node_List --\n    ----------------------\n \n-   procedure Sprint_Node_List (List : List_Id) is\n+   procedure Sprint_Node_List (List : List_Id; New_Lines : Boolean := False) is\n       Node : Node_Id;\n \n    begin\n@@ -3276,6 +3276,10 @@ package body Sprint is\n             exit when Node = Empty;\n          end loop;\n       end if;\n+\n+      if New_Lines and then Column /= 1 then\n+         Write_Eol;\n+      end if;\n    end Sprint_Node_List;\n \n    ----------------------"}, {"sha": "a44b9ed164714ac0c2308cbd74d231f45f2d3cbd", "filename": "gcc/ada/sprint.ads", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fsprint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fsprint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.ads?ref=3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -118,11 +118,13 @@ package Sprint is\n    --  blank is output if List is non-empty, and nothing at all is printed it\n    --  the argument is No_List.\n \n-   procedure Sprint_Node_List (List : List_Id);\n+   procedure Sprint_Node_List (List : List_Id; New_Lines : Boolean := False);\n    --  Prints the nodes in a list with no separating characters. This is used\n    --  in the case of lists of items which are printed on separate lines using\n-   --  the current indentation amount. Note that Sprint_Node_List itself\n-   --  does not generate any New_Line calls.\n+   --  the current indentation amount. New_Lines controls the generation of\n+   --  New_Line calls. If False, no New_Line calls are generated. If True,\n+   --  then New_Line calls are generated as needed to ensure that each list\n+   --  item starts at the beginning of a line.\n \n    procedure Sprint_Opt_Node_List (List : List_Id);\n    --  Like Sprint_Node_List, but prints nothing if List = No_List\n@@ -151,11 +153,13 @@ package Sprint is\n    procedure po (Arg : Union_Id);\n    pragma Export (Ada, po);\n    --  Like pg, but prints original source for the argument (like -gnatdo\n-   --  output). Intended only for use from gdb for debugging purposes.\n+   --  output). Intended only for use from gdb for debugging purposes. In\n+   --  the list case, an end of line is output to separate list elements.\n \n    procedure ps (Arg : Union_Id);\n    pragma Export (Ada, ps);\n    --  Like pg, but prints generated and original source for the argument (like\n    --  -gnatds output). Intended only for use from gdb for debugging purposes.\n+   --  In the list case, an end of line is output to separate list elements.\n \n end Sprint;"}, {"sha": "bfe7bce3278601194b2908c144a570063e3e5c26", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 77, "deletions": 54, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=3ffd18f16ccb5256aaf5d8e6a55fc8ad2d521085", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *         Copyright (C) 1992-2011, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 1992-2012, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -644,71 +644,94 @@ extern void (*Unlock_Task) (void);\n /* Reentrant localtime for Windows. */\n \n extern void\n-__gnat_localtime_tzoff (const time_t *, long *);\n+__gnat_localtime_tzoff (const time_t *, const int *, long *);\n \n static const unsigned long long w32_epoch_offset = 11644473600ULL;\n void\n-__gnat_localtime_tzoff (const time_t *timer, long *off)\n+__gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n {\n-  union\n-  {\n-    FILETIME ft_time;\n-    unsigned long long ull_time;\n-  } utc_time, local_time;\n-\n-  SYSTEMTIME utc_sys_time, local_sys_time;\n   TIME_ZONE_INFORMATION tzi;\n \n-  BOOL  status = 1;\n+  BOOL  rtx_active;\n   DWORD tzi_status;\n \n-  (*Lock_Task) ();\n-\n #ifdef RTX\n+  rtx_active = 1;\n+#else\n+  rtx_active = 0;\n+#endif\n+\n+  (*Lock_Task) ();\n \n   tzi_status = GetTimeZoneInformation (&tzi);\n-  *off = tzi.Bias;\n-  if (tzi_status == TIME_ZONE_ID_STANDARD)\n-     /* The system is operating in the range covered by the StandardDate\n-        member. */\n-     *off = *off + tzi.StandardBias;\n-  else if (tzi_status == TIME_ZONE_ID_DAYLIGHT)\n-     /* The system is operating in the range covered by the DaylightDate\n-        member. */\n-     *off = *off + tzi.DaylightBias;\n-  *off = *off * -60;\n \n-#else\n+  /* Processing for RTX targets or cases where we simply want to extract the\n+     offset of the current time zone, regardless of the date. */\n \n-  /* First convert unix time_t structure to windows FILETIME format.  */\n-  utc_time.ull_time = ((unsigned long long) *timer + w32_epoch_offset)\n-                      * 10000000ULL;\n+  if (rtx_active || !is_historic) {\n+    *off = tzi.Bias;\n \n-  tzi_status = GetTimeZoneInformation (&tzi);\n+    /* The system is operating in the range covered by the StandardDate\n+       member. */\n+    if (tzi_status == TIME_ZONE_ID_STANDARD) {\n+       *off = *off + tzi.StandardBias;\n+    }\n \n-  /* If GetTimeZoneInformation does not return a value between 0 and 2 then\n-     it means that we were not able to retrieve timezone informations.\n-     Note that we cannot use here FileTimeToLocalFileTime as Windows will use\n-     in always in this case the current timezone setting. As suggested on\n-     MSDN we use the following three system calls to get the right information.\n-     Note also that starting with Windows Vista new functions are provided to\n-     get timezone settings that depend on the year. We cannot use them as we\n-     still support Windows XP and Windows 2003.  */\n-  status = (tzi_status >= 0 && tzi_status <= 2)\n-     && FileTimeToSystemTime (&utc_time.ft_time, &utc_sys_time)\n-     && SystemTimeToTzSpecificLocalTime (&tzi, &utc_sys_time, &local_sys_time)\n-     && SystemTimeToFileTime (&local_sys_time, &local_time.ft_time);\n-\n-  if (!status)\n-     /* An error occurs so return invalid_tzoff.  */\n-     *off = __gnat_invalid_tzoff;\n-  else\n-     if (local_time.ull_time > utc_time.ull_time)\n-        *off = (long) ((local_time.ull_time - utc_time.ull_time) / 10000000ULL);\n-     else\n-        *off = - (long) ((utc_time.ull_time - local_time.ull_time) / 10000000ULL);\n+    /* The system is operating in the range covered by the DaylightDate\n+       member. */\n+    else if (tzi_status == TIME_ZONE_ID_DAYLIGHT) {\n+       *off = *off + tzi.DaylightBias;\n+    }\n \n-#endif\n+    *off = *off * -60;\n+  }\n+\n+  /* Time zone offset calculations for a historic or future date */\n+\n+  else {\n+    union\n+    {\n+      FILETIME ft_time;\n+      unsigned long long ull_time;\n+    } utc_time, local_time;\n+\n+    SYSTEMTIME utc_sys_time, local_sys_time;\n+    BOOL status;\n+\n+    /* First convert unix time_t structure to windows FILETIME format.  */\n+    utc_time.ull_time = ((unsigned long long) *timer + w32_epoch_offset)\n+                        * 10000000ULL;\n+\n+    /* If GetTimeZoneInformation does not return a value between 0 and 2 then\n+       it means that we were not able to retrieve timezone informations. Note\n+       that we cannot use here FileTimeToLocalFileTime as Windows will use in\n+       always in this case the current timezone setting. As suggested on MSDN\n+       we use the following three system calls to get the right information.\n+       Note also that starting with Windows Vista new functions are provided\n+       to get timezone settings that depend on the year. We cannot use them as\n+       we still support Windows XP and Windows 2003.  */\n+\n+    status = (tzi_status >= 0 && tzi_status <= 2)\n+      && FileTimeToSystemTime (&utc_time.ft_time, &utc_sys_time)\n+      && SystemTimeToTzSpecificLocalTime (&tzi, &utc_sys_time, &local_sys_time)\n+      && SystemTimeToFileTime (&local_sys_time, &local_time.ft_time);\n+\n+    /* An error has occured, return invalid_tzoff */\n+\n+    if (!status) {\n+      *off = __gnat_invalid_tzoff;\n+    }\n+    else {\n+      if (local_time.ull_time > utc_time.ull_time) {\n+        *off = (long) ((local_time.ull_time - utc_time.ull_time)\n+               / 10000000ULL);\n+      }\n+      else {\n+        *off = - (long) ((utc_time.ull_time - local_time.ull_time)\n+               / 10000000ULL);\n+      }\n+    }\n+  }\n \n   (*Unlock_Task) ();\n }\n@@ -726,10 +749,10 @@ __gnat_localtime_tzoff (const time_t *timer, long *off)\n    the Lynx convention when building against the legacy API. */\n \n extern void\n-__gnat_localtime_tzoff (const time_t *, long *);\n+__gnat_localtime_tzoff (const time_t *, const int *, long *);\n \n void\n-__gnat_localtime_tzoff (const time_t *timer, long *off)\n+__gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n {\n   *off = 0;\n }\n@@ -751,10 +774,10 @@ extern void (*Lock_Task) (void);\n extern void (*Unlock_Task) (void);\n \n extern void\n-__gnat_localtime_tzoff (const time_t *, long *);\n+__gnat_localtime_tzoff (const time_t *, const int *, long *);\n \n void\n-__gnat_localtime_tzoff (const time_t *timer, long *off)\n+__gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n {\n   struct tm tp;\n "}]}