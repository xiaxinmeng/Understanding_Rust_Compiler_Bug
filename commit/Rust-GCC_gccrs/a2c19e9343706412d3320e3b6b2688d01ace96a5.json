{"sha": "a2c19e9343706412d3320e3b6b2688d01ace96a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJjMTllOTM0MzcwNjQxMmQzMzIwZTNiNmIyNjg4ZDAxYWNlOTZhNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-10-02T19:34:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-10-02T19:34:49Z"}, "message": "ira-int.h (target_ira_int): Add x_ira_useful_class_mode_regs.\n\ngcc/\n\t* ira-int.h (target_ira_int): Add x_ira_useful_class_mode_regs.\n\t(ira_useful_class_mode_regs): New macro.\n\t* ira.c (clarify_prohibited_class_mode_regs): Set up\n\tira_useful_class_mode_regs.\n\t* ira-color.c (setup_profitable_hard_regs): Use it to initialise\n\tprofitable_hard_regs.\n\nFrom-SVN: r191996", "tree": {"sha": "431668293bd4a0018f9e8856e4c146862a0c276d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/431668293bd4a0018f9e8856e4c146862a0c276d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2c19e9343706412d3320e3b6b2688d01ace96a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c19e9343706412d3320e3b6b2688d01ace96a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c19e9343706412d3320e3b6b2688d01ace96a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c19e9343706412d3320e3b6b2688d01ace96a5/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9d74da68c27d7af5c5c2edef7f723190ab461d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d74da68c27d7af5c5c2edef7f723190ab461d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d74da68c27d7af5c5c2edef7f723190ab461d2"}], "stats": {"total": 75, "additions": 53, "deletions": 22}, "files": [{"sha": "2bdf6618e76826419582836c233c35dce226cdbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c19e9343706412d3320e3b6b2688d01ace96a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c19e9343706412d3320e3b6b2688d01ace96a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2c19e9343706412d3320e3b6b2688d01ace96a5", "patch": "@@ -1,3 +1,12 @@\n+2012-10-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* ira-int.h (target_ira_int): Add x_ira_useful_class_mode_regs.\n+\t(ira_useful_class_mode_regs): New macro.\n+\t* ira.c (clarify_prohibited_class_mode_regs): Set up\n+\tira_useful_class_mode_regs.\n+\t* ira-color.c (setup_profitable_hard_regs): Use it to initialise\n+\tprofitable_hard_regs.\n+\n 2012-10-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* ira.h (target_ira): Add x_ira_class_singleton."}, {"sha": "fc2e4e8b29b007a69b0140271aa4663591621f95", "filename": "gcc/ira-color.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c19e9343706412d3320e3b6b2688d01ace96a5/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c19e9343706412d3320e3b6b2688d01ace96a5/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=a2c19e9343706412d3320e3b6b2688d01ace96a5", "patch": "@@ -1023,10 +1023,9 @@ setup_profitable_hard_regs (void)\n \tCLEAR_HARD_REG_SET (data->profitable_hard_regs);\n       else\n \t{\n+\t  mode = ALLOCNO_MODE (a);\n \t  COPY_HARD_REG_SET (data->profitable_hard_regs,\n-\t\t\t     reg_class_contents[aclass]);\n-\t  AND_COMPL_HARD_REG_SET (data->profitable_hard_regs,\n-\t\t\t\t  ira_no_alloc_regs);\n+\t\t\t     ira_useful_class_mode_regs[aclass][mode]);\n \t  nobj = ALLOCNO_NUM_OBJECTS (a);\n \t  for (k = 0; k < nobj; k++)\n \t    {"}, {"sha": "bde69861e78ab17613f77f0455ee6155b7e29598", "filename": "gcc/ira-int.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c19e9343706412d3320e3b6b2688d01ace96a5/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c19e9343706412d3320e3b6b2688d01ace96a5/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=a2c19e9343706412d3320e3b6b2688d01ace96a5", "patch": "@@ -816,6 +816,20 @@ struct target_ira_int {\n      values for given mode are zero.  */\n   HARD_REG_SET x_ira_prohibited_class_mode_regs[N_REG_CLASSES][NUM_MACHINE_MODES];\n \n+  /* Index [CL][M] contains R if R appears somewhere in a register of the form:\n+\n+         (reg:M R'), R' not in x_ira_prohibited_class_mode_regs[CL][M]\n+\n+     For example, if:\n+\n+     - (reg:M 2) is valid and occupies two registers;\n+     - register 2 belongs to CL; and\n+     - register 3 belongs to the same pressure class as CL\n+\n+     then (reg:M 2) contributes to [CL][M] and registers 2 and 3 will be\n+     in the set.  */\n+  HARD_REG_SET x_ira_useful_class_mode_regs[N_REG_CLASSES][NUM_MACHINE_MODES];\n+\n   /* The value is number of elements in the subsequent array.  */\n   int x_ira_important_classes_num;\n \n@@ -902,6 +916,8 @@ extern struct target_ira_int *this_target_ira_int;\n   (this_target_ira_int->x_ira_class_hard_reg_index)\n #define ira_prohibited_class_mode_regs \\\n   (this_target_ira_int->x_ira_prohibited_class_mode_regs)\n+#define ira_useful_class_mode_regs \\\n+  (this_target_ira_int->x_ira_useful_class_mode_regs)\n #define ira_important_classes_num \\\n   (this_target_ira_int->x_ira_important_classes_num)\n #define ira_important_classes \\"}, {"sha": "4a7dcb52043d93a5eb0550b617a9c5ee5368789b", "filename": "gcc/ira.c", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c19e9343706412d3320e3b6b2688d01ace96a5/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c19e9343706412d3320e3b6b2688d01ace96a5/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=a2c19e9343706412d3320e3b6b2688d01ace96a5", "patch": "@@ -1495,29 +1495,36 @@ clarify_prohibited_class_mode_regs (void)\n \n   for (cl = (int) N_REG_CLASSES - 1; cl >= 0; cl--)\n     for (j = 0; j < NUM_MACHINE_MODES; j++)\n-      for (k = ira_class_hard_regs_num[cl] - 1; k >= 0; k--)\n-\t{\n-\t  hard_regno = ira_class_hard_regs[cl][k];\n-\t  if (TEST_HARD_REG_BIT (ira_prohibited_class_mode_regs[cl][j], hard_regno))\n-\t    continue;\n-\t  nregs = hard_regno_nregs[hard_regno][j];\n-          if (hard_regno + nregs > FIRST_PSEUDO_REGISTER)\n-            {\n-              SET_HARD_REG_BIT (ira_prohibited_class_mode_regs[cl][j],\n-                                hard_regno);\n-               continue;\n-            }\n-\t  pclass = ira_pressure_class_translate[REGNO_REG_CLASS (hard_regno)];\n-\t  for (nregs-- ;nregs >= 0; nregs--)\n-\t    if (((enum reg_class) pclass\n-\t\t != ira_pressure_class_translate[REGNO_REG_CLASS\n-\t\t\t\t\t\t (hard_regno + nregs)]))\n+      {\n+\tCLEAR_HARD_REG_SET (ira_useful_class_mode_regs[cl][j]);\n+\tfor (k = ira_class_hard_regs_num[cl] - 1; k >= 0; k--)\n+\t  {\n+\t    hard_regno = ira_class_hard_regs[cl][k];\n+\t    if (TEST_HARD_REG_BIT (ira_prohibited_class_mode_regs[cl][j], hard_regno))\n+\t      continue;\n+\t    nregs = hard_regno_nregs[hard_regno][j];\n+\t    if (hard_regno + nregs > FIRST_PSEUDO_REGISTER)\n \t      {\n \t\tSET_HARD_REG_BIT (ira_prohibited_class_mode_regs[cl][j],\n \t\t\t\t  hard_regno);\n-\t\tbreak;\n+\t\t continue;\n \t      }\n-\t}\n+\t    pclass = ira_pressure_class_translate[REGNO_REG_CLASS (hard_regno)];\n+\t    for (nregs-- ;nregs >= 0; nregs--)\n+\t      if (((enum reg_class) pclass\n+\t\t   != ira_pressure_class_translate[REGNO_REG_CLASS\n+\t\t\t\t\t\t   (hard_regno + nregs)]))\n+\t\t{\n+\t\t  SET_HARD_REG_BIT (ira_prohibited_class_mode_regs[cl][j],\n+\t\t\t\t    hard_regno);\n+\t\t  break;\n+\t\t}\n+\t    if (!TEST_HARD_REG_BIT (ira_prohibited_class_mode_regs[cl][j],\n+\t\t\t\t    hard_regno))\n+\t      add_to_hard_reg_set (&ira_useful_class_mode_regs[cl][j],\n+\t\t\t\t   (enum machine_mode) j, hard_regno);\n+\t  }\n+      }\n }\n \f\n /* Allocate and initialize IRA_REGISTER_MOVE_COST, IRA_MAY_MOVE_IN_COST"}]}