{"sha": "95770ca3202ebd8529d202aaf4714343a2c4e14e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU3NzBjYTMyMDJlYmQ4NTI5ZDIwMmFhZjQ3MTQzNDNhMmM0ZTE0ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-21T07:49:28Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-21T07:49:28Z"}, "message": "Use rtx_insn internally within generated functions\n\n2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n\n\t* recog.h (insn_output_fn): Update this function typedef to match\n\tthe changes below to the generated output functions, strengthening\n\tthe 2nd param from rtx to rtx_insn *.\n\n\t* final.c (get_insn_template): Add a checked cast to rtx_insn * on\n\tinsn when invoking an output function, to match the new signature\n\tof insn_output_fn with a stronger second param.\n\n\t* genconditions.c (write_header): In the generated code for\n\tgencondmd.c, strengthen the global \"insn\" from rtx to rtx_insn *\n\tto match the other changes in this patch.\n\n\t* genemit.c (gen_split): Strengthen the 1st param \"curr_insn\" of\n\tthe generated \"gen_\" functions from rtx to rtx_insn * within their\n\timplementations.\n\n\t* genrecog.c (write_subroutine): Strengthen the 2nd param \"insn\" of\n\tthe subfunctions within the generated \"recog_\", \"split\", \"peephole2\"\n\tfunction trees from rtx to rtx_insn *.  For now, the top-level\n\tgenerated functions (\"recog\", \"split\", \"peephole2\") continue to\n\ttake a plain rtx for \"insn\", to avoid introducing dependencies on\n\tother patches.  Rename this 2nd param from \"insn\" to\n\t\"uncast_insn\", and reintroduce \"insn\" as a local variable of type\n\trtx_insn *, initialized at the top of the generated function with\n\ta checked cast on \"uncast_insn\".\n\t(make_insn_sequence): Strengthen the 1st param \"curr_insn\" of\n\tthe generated \"gen_\" functions from rtx to rtx_insn * within their\n\tprototypes.\n\n\t* genoutput.c (process_template): Strengthen the 2nd param within\n\tthe generated \"output_\" functions \"insn\" from rtx to rtx_insn *.\n\nFrom-SVN: r214257", "tree": {"sha": "3a51c7e76552c742934054882bbc0166fa7aacf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a51c7e76552c742934054882bbc0166fa7aacf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95770ca3202ebd8529d202aaf4714343a2c4e14e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95770ca3202ebd8529d202aaf4714343a2c4e14e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95770ca3202ebd8529d202aaf4714343a2c4e14e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95770ca3202ebd8529d202aaf4714343a2c4e14e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07db0f9bb354bd9a46e62c6d9960a9a3c40d1c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07db0f9bb354bd9a46e62c6d9960a9a3c40d1c15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07db0f9bb354bd9a46e62c6d9960a9a3c40d1c15"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "18b693150e65138f62e3a16c00bd8436b9868317", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95770ca3202ebd8529d202aaf4714343a2c4e14e", "patch": "@@ -1,3 +1,37 @@\n+2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* recog.h (insn_output_fn): Update this function typedef to match\n+\tthe changes below to the generated output functions, strengthening\n+\tthe 2nd param from rtx to rtx_insn *.\n+\n+\t* final.c (get_insn_template): Add a checked cast to rtx_insn * on\n+\tinsn when invoking an output function, to match the new signature\n+\tof insn_output_fn with a stronger second param.\n+\n+\t* genconditions.c (write_header): In the generated code for\n+\tgencondmd.c, strengthen the global \"insn\" from rtx to rtx_insn *\n+\tto match the other changes in this patch.\n+\n+\t* genemit.c (gen_split): Strengthen the 1st param \"curr_insn\" of\n+\tthe generated \"gen_\" functions from rtx to rtx_insn * within their\n+\timplementations.\n+\n+\t* genrecog.c (write_subroutine): Strengthen the 2nd param \"insn\" of\n+\tthe subfunctions within the generated \"recog_\", \"split\", \"peephole2\"\n+\tfunction trees from rtx to rtx_insn *.  For now, the top-level\n+\tgenerated functions (\"recog\", \"split\", \"peephole2\") continue to\n+\ttake a plain rtx for \"insn\", to avoid introducing dependencies on\n+\tother patches.  Rename this 2nd param from \"insn\" to\n+\t\"uncast_insn\", and reintroduce \"insn\" as a local variable of type\n+\trtx_insn *, initialized at the top of the generated function with\n+\ta checked cast on \"uncast_insn\".\n+\t(make_insn_sequence): Strengthen the 1st param \"curr_insn\" of\n+\tthe generated \"gen_\" functions from rtx to rtx_insn * within their\n+\tprototypes.\n+\n+\t* genoutput.c (process_template): Strengthen the 2nd param within\n+\tthe generated \"output_\" functions \"insn\" from rtx to rtx_insn *.\n+\n 2014-08-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-profile.c (tree_profiling): Skip external functions"}, {"sha": "dfeec9e58157e3e39f292c456c0f537e9bddc508", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=95770ca3202ebd8529d202aaf4714343a2c4e14e", "patch": "@@ -2055,7 +2055,8 @@ get_insn_template (int code, rtx insn)\n       return insn_data[code].output.multi[which_alternative];\n     case INSN_OUTPUT_FORMAT_FUNCTION:\n       gcc_assert (insn);\n-      return (*insn_data[code].output.function) (recog_data.operand, insn);\n+      return (*insn_data[code].output.function) (recog_data.operand,\n+\t\t\t\t\t\t as_a <rtx_insn *> (insn));\n \n     default:\n       gcc_unreachable ();"}, {"sha": "83907978ee1fc353caafb98274514c1a44979264", "filename": "gcc/genconditions.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2Fgenconditions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2Fgenconditions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconditions.c?ref=95770ca3202ebd8529d202aaf4714343a2c4e14e", "patch": "@@ -95,7 +95,7 @@ write_header (void)\n \n   puts (\"\\\n /* Dummy external declarations.  */\\n\\\n-extern rtx insn;\\n\\\n+extern rtx_insn *insn;\\n\\\n extern rtx ins1;\\n\\\n extern rtx operands[];\\n\\\n \\n\\"}, {"sha": "1bc73f0ef0751ad9879171d6a6c417e7d33e5314", "filename": "gcc/genemit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=95770ca3202ebd8529d202aaf4714343a2c4e14e", "patch": "@@ -557,15 +557,15 @@ gen_split (rtx split)\n   /* Output the prototype, function name and argument declarations.  */\n   if (GET_CODE (split) == DEFINE_PEEPHOLE2)\n     {\n-      printf (\"extern rtx gen_%s_%d (rtx, rtx *);\\n\",\n+      printf (\"extern rtx gen_%s_%d (rtx_insn *, rtx *);\\n\",\n \t      name, insn_code_number);\n-      printf (\"rtx\\ngen_%s_%d (rtx curr_insn ATTRIBUTE_UNUSED, rtx *operands%s)\\n\",\n+      printf (\"rtx\\ngen_%s_%d (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands%s)\\n\",\n \t      name, insn_code_number, unused);\n     }\n   else\n     {\n-      printf (\"extern rtx gen_split_%d (rtx, rtx *);\\n\", insn_code_number);\n-      printf (\"rtx\\ngen_split_%d (rtx curr_insn ATTRIBUTE_UNUSED, rtx *operands%s)\\n\",\n+      printf (\"extern rtx gen_split_%d (rtx_insn *, rtx *);\\n\", insn_code_number);\n+      printf (\"rtx\\ngen_split_%d (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands%s)\\n\",\n \t      insn_code_number, unused);\n     }\n   printf (\"{\\n\");"}, {"sha": "69d5ab092b2717481b326d2425f4bfea60f6799a", "filename": "gcc/genoutput.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=95770ca3202ebd8529d202aaf4714343a2c4e14e", "patch": "@@ -643,7 +643,7 @@ process_template (struct data *d, const char *template_code)\n       d->output_format = INSN_OUTPUT_FORMAT_FUNCTION;\n \n       puts (\"\\nstatic const char *\");\n-      printf (\"output_%d (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)\\n\",\n+      printf (\"output_%d (rtx *operands ATTRIBUTE_UNUSED, rtx_insn *insn ATTRIBUTE_UNUSED)\\n\",\n \t      d->code_number);\n       puts (\"{\");\n       print_md_ptr_loc (template_code);\n@@ -672,7 +672,7 @@ process_template (struct data *d, const char *template_code)\n \t  d->output_format = INSN_OUTPUT_FORMAT_FUNCTION;\n \t  puts (\"\\nstatic const char *\");\n \t  printf (\"output_%d (rtx *operands ATTRIBUTE_UNUSED, \"\n-\t\t  \"rtx insn ATTRIBUTE_UNUSED)\\n\", d->code_number);\n+\t\t  \"rtx_insn *insn ATTRIBUTE_UNUSED)\\n\", d->code_number);\n \t  puts (\"{\");\n \t  puts (\"  switch (which_alternative)\\n    {\");\n \t}"}, {"sha": "1f09dd661e87410200c3102cfcef9cd8d6f0a159", "filename": "gcc/genrecog.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=95770ca3202ebd8529d202aaf4714343a2c4e14e", "patch": "@@ -2180,6 +2180,7 @@ write_subroutine (struct decision_head *head, enum routine_type type)\n   const char *s_or_e;\n   char extension[32];\n   int i;\n+  const char *insn_param;\n \n   s_or_e = subfunction ? \"static \" : \"\";\n \n@@ -2190,21 +2191,27 @@ write_subroutine (struct decision_head *head, enum routine_type type)\n   else\n     strcpy (extension, \"_insns\");\n \n+  /* For now, the top-level functions take a plain \"rtx\", and perform a\n+     checked cast to \"rtx_insn *\" for use throughout the rest of the\n+     function and the code it calls.  */\n+  insn_param = subfunction ? \"rtx_insn *insn\" : \"rtx uncast_insn\";\n+\n   switch (type)\n     {\n     case RECOG:\n       printf (\"%sint\\n\\\n-recog%s (rtx x0 ATTRIBUTE_UNUSED,\\n\\trtx insn ATTRIBUTE_UNUSED,\\n\\tint *pnum_clobbers ATTRIBUTE_UNUSED)\\n\", s_or_e, extension);\n+recog%s (rtx x0 ATTRIBUTE_UNUSED,\\n\\t%s ATTRIBUTE_UNUSED,\\n\\tint *pnum_clobbers ATTRIBUTE_UNUSED)\\n\",\n+\t      s_or_e, extension, insn_param);\n       break;\n     case SPLIT:\n       printf (\"%srtx\\n\\\n-split%s (rtx x0 ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)\\n\",\n-\t      s_or_e, extension);\n+split%s (rtx x0 ATTRIBUTE_UNUSED, %s ATTRIBUTE_UNUSED)\\n\",\n+\t      s_or_e, extension, insn_param);\n       break;\n     case PEEPHOLE2:\n       printf (\"%srtx\\n\\\n-peephole2%s (rtx x0 ATTRIBUTE_UNUSED,\\n\\trtx insn ATTRIBUTE_UNUSED,\\n\\tint *_pmatch_len ATTRIBUTE_UNUSED)\\n\",\n-\t      s_or_e, extension);\n+peephole2%s (rtx x0 ATTRIBUTE_UNUSED,\\n\\t%s ATTRIBUTE_UNUSED,\\n\\tint *_pmatch_len ATTRIBUTE_UNUSED)\\n\",\n+\t      s_or_e, extension, insn_param);\n       break;\n     }\n \n@@ -2217,6 +2224,14 @@ peephole2%s (rtx x0 ATTRIBUTE_UNUSED,\\n\\trtx insn ATTRIBUTE_UNUSED,\\n\\tint *_pma\n   if (!subfunction)\n     printf (\"  recog_data.insn = NULL_RTX;\\n\");\n \n+  /* For now add the downcast to rtx_insn *, at the top of each top-level\n+     function.  */\n+  if (!subfunction)\n+    {\n+      printf (\"  rtx_insn *insn ATTRIBUTE_UNUSED;\\n\");\n+      printf (\"  insn = safe_as_a <rtx_insn *> (uncast_insn);\\n\");\n+    }\n+\n   if (head->first)\n     write_tree (head, &root_pos, type, 1);\n   else\n@@ -2461,12 +2476,12 @@ make_insn_sequence (rtx insn, enum routine_type type)\n \n     case SPLIT:\n       /* Define the subroutine we will call below and emit in genemit.  */\n-      printf (\"extern rtx gen_split_%d (rtx, rtx *);\\n\", next_insn_code);\n+      printf (\"extern rtx gen_split_%d (rtx_insn *, rtx *);\\n\", next_insn_code);\n       break;\n \n     case PEEPHOLE2:\n       /* Define the subroutine we will call below and emit in genemit.  */\n-      printf (\"extern rtx gen_peephole2_%d (rtx, rtx *);\\n\",\n+      printf (\"extern rtx gen_peephole2_%d (rtx_insn *, rtx *);\\n\",\n \t      next_insn_code);\n       break;\n     }"}, {"sha": "1573241762c120c8519eed6b3c8bde2da4bb195d", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95770ca3202ebd8529d202aaf4714343a2c4e14e/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=95770ca3202ebd8529d202aaf4714343a2c4e14e", "patch": "@@ -279,7 +279,7 @@ which_op_alt ()\n    each insn-code value.  */\n \n typedef int (*insn_operand_predicate_fn) (rtx, enum machine_mode);\n-typedef const char * (*insn_output_fn) (rtx *, rtx);\n+typedef const char * (*insn_output_fn) (rtx *, rtx_insn *);\n \n struct insn_gen_fn\n {"}]}