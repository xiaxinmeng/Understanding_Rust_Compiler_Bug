{"sha": "e0b8716f53ed6455e9f18931940141692793068d", "node_id": "C_kwDOANBUbNoAKGUwYjg3MTZmNTNlZDY0NTVlOWYxODkzMTk0MDE0MTY5Mjc5MzA2OGQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-26T00:16:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-26T00:16:38Z"}, "message": "Daily bump.", "tree": {"sha": "e8d74a43366e126ddebee75dd089f79ef6296c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8d74a43366e126ddebee75dd089f79ef6296c14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0b8716f53ed6455e9f18931940141692793068d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b8716f53ed6455e9f18931940141692793068d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b8716f53ed6455e9f18931940141692793068d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b8716f53ed6455e9f18931940141692793068d/comments", "author": null, "committer": null, "parents": [{"sha": "fa262add75ab6631bf22b7e2884437ba9c62ed2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa262add75ab6631bf22b7e2884437ba9c62ed2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa262add75ab6631bf22b7e2884437ba9c62ed2a"}], "stats": {"total": 170, "additions": 169, "deletions": 1}, "files": [{"sha": "975dcd443c115be9e3032ed24a427d959b4f16bd", "filename": "ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b8716f53ed6455e9f18931940141692793068d/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b8716f53ed6455e9f18931940141692793068d/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=e0b8716f53ed6455e9f18931940141692793068d", "patch": "@@ -1,3 +1,13 @@\n+2022-01-25  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tRevert:\n+\t2021-09-16  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR bootstrap/67102\n+\t* Makefile.def: Have configure-target-libffi depend on\n+\tall-target-libstdc++-v3.\n+\t* Makefile.in: Regenerate.\n+\n 2022-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/104181"}, {"sha": "8eb1a600179c7c07ebe69209ac37e5ad5c30bce7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b8716f53ed6455e9f18931940141692793068d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b8716f53ed6455e9f18931940141692793068d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0b8716f53ed6455e9f18931940141692793068d", "patch": "@@ -1,3 +1,41 @@\n+2022-01-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/104203\n+\t* gimple-ssa-warn-access.cc (pass_data pass_data_waccess): Use\n+\tTV_WARN_ACCESS.\n+\t* pointer-query.cc (access_ref::merge_ref): Change return type.\n+\tConvert failure to a conservative success.\n+\t(access_ref::get_ref): Adjust to the change above.  Short-circuit\n+\tPHI evaluation after first failure turned into conservative success.\n+\t* pointer-query.h (access_ref::merge_ref): Change return type.\n+\t* timevar.def (TV_WARN_ACCESS): New timer variable.\n+\n+2022-01-25  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/aix.h (OPTION_GLIBC): Define as 0.\n+\n+2022-01-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104214\n+\t* tree-ssa-loop-niter.cc (number_of_iterations_cond): Use\n+\tstronger guarantees for relational pointer compares when\n+\trewriting BASE0 + STEP0 cmp BASE1 + STEP1 as\n+\tBASE0 + STEP0 - STEP1 cmp BASE1.\n+\n+2022-01-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/104172\n+\t* config/rs6000/rs6000-internal.h (rs6000_passes_ieee128): Don't\n+\tdeclare.\n+\t* config/rs6000/rs6000.cc (rs6000_passes_ieee128,\n+\tieee128_mangling_gcc_8_1): Remove.\n+\t(TARGET_ASM_GLOBALIZE_DECL_NAME): Don't redefine.\n+\t(rs6000_mangle_type): Return \"u9__ieee128\" instead of\n+\tieee128_mangling_gcc_8_1 ? \"U10__float128\" : \"u9__ieee128\".\n+\t(rs6000_globalize_decl_name): Remove.\n+\t* config/rs6000/rs6000-call.cc (init_cumulative_args,\n+\trs6000_function_arg_advance_1): Don't set rs6000_passes_ieee128.\n+\n 2022-01-24  Martin Sebor  <msebor@redhat.com>\n \n \t* pointer-query.cc (pointer_query::dump): Remove duplicate"}, {"sha": "d6410e65d034e974a880bd76b3d209ca9803ed6a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b8716f53ed6455e9f18931940141692793068d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b8716f53ed6455e9f18931940141692793068d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e0b8716f53ed6455e9f18931940141692793068d", "patch": "@@ -1 +1 @@\n-20220125\n+20220126"}, {"sha": "1229af9a115152d8d03080bf4dd38bc41ee2e0ac", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b8716f53ed6455e9f18931940141692793068d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b8716f53ed6455e9f18931940141692793068d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e0b8716f53ed6455e9f18931940141692793068d", "patch": "@@ -1,3 +1,15 @@\n+2022-01-25  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101532\n+\tPR c++/104225\n+\t* decl2.cc (mark_used): Don't consider maybe_instantiate_noexcept\n+\ton a deleted function.\n+\n+2022-01-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/59950\n+\t* call.cc (build_over_call): Use cp_build_indirect_ref.\n+\n 2022-01-24  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/104197"}, {"sha": "a55e851e814c9e87ee0af80df1559a3d94985de0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b8716f53ed6455e9f18931940141692793068d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b8716f53ed6455e9f18931940141692793068d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e0b8716f53ed6455e9f18931940141692793068d", "patch": "@@ -1,3 +1,17 @@\n+2022-01-25  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104227\n+\t* check.cc (gfc_calculate_transfer_sizes): Fix checking of arrays\n+\tpassed as MOLD argument to the TRANSFER intrinsic for having\n+\tstorage size zero.\n+\n+2022-01-25  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104212\n+\t* check.cc (gfc_check_norm2): Check that optional argument DIM is\n+\tscalar.\n+\t(gfc_check_parity): Likewise.\n+\n 2022-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* lang.opt (fconvert=): Add EnumSet property and mention also"}, {"sha": "f507a7f8e025a05eaa5d8405e49b69937a2db3a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b8716f53ed6455e9f18931940141692793068d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b8716f53ed6455e9f18931940141692793068d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0b8716f53ed6455e9f18931940141692793068d", "patch": "@@ -1,3 +1,39 @@\n+2022-01-25  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104227\n+\t* gfortran.dg/transfer_check_6.f90: New test.\n+\n+2022-01-25  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104212\n+\t* gfortran.dg/argument_checking_26.f90: New test.\n+\n+2022-01-25  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101532\n+\tPR c++/104225\n+\t* g++.dg/cpp0x/nsdmi-template21.C: New test.\n+\t* g++.dg/cpp0x/nsdmi-template21a.C: New test.\n+\n+2022-01-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/59950\n+\t* g++.dg/init/assign2.C: New test.\n+\n+2022-01-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104214\n+\t* gcc.dg/vect/pr81196-2.c: New variant testcase only\n+\trequiring vect_int.\n+\n+2022-01-25  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n+\n+\t* gfortran.dg/ieee/signaling_3.f90: Skip test on 32-bit x86/x86_64.\n+\n+2022-01-25  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n+\n+\t* gfortran.dg/ieee/signaling_1.f90: Fix test.\n+\n 2022-01-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR preprocessor/104030"}, {"sha": "035bfb5d8182f78ba46cea8181ecc5fa4af5cc17", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b8716f53ed6455e9f18931940141692793068d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b8716f53ed6455e9f18931940141692793068d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e0b8716f53ed6455e9f18931940141692793068d", "patch": "@@ -1,3 +1,8 @@\n+2022-01-25  Florian Weimer  <fweimer@redhat.com>\n+\n+\tPR libgcc/104207\n+\t* unwind-dw2-fde-dip.c (_Unwind_Find_FDE): Add NULL check.\n+\n 2022-01-17  Martin Liska  <mliska@suse.cz>\n \n \t* libgcov-driver.c: Rename .c names to .cc."}, {"sha": "b50b911b3a14db6b0e0a15d2e57afb9feed89c20", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b8716f53ed6455e9f18931940141692793068d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b8716f53ed6455e9f18931940141692793068d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e0b8716f53ed6455e9f18931940141692793068d", "patch": "@@ -1,3 +1,18 @@\n+2022-01-25  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n+\n+\t* ieee/issignaling_fallback.h: Fix GCC-specific preprocessor\n+\tmacros.\n+\n+2022-01-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* ieee/issignaling_fallback.h (__issignalingl): Define for\n+\tIBM extended long double are returning __issignaling on the\n+\tfirst double.\n+\n+2022-01-25  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n+\n+\t* ieee/issignaling_fallback.h: fix preprocessor condition.\n+\n 2022-01-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* ieee/issignaling_fallback.h: New file."}, {"sha": "45cf5c6067d29d44726690c128867d97e26dcc70", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b8716f53ed6455e9f18931940141692793068d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b8716f53ed6455e9f18931940141692793068d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e0b8716f53ed6455e9f18931940141692793068d", "patch": "@@ -1,3 +1,41 @@\n+2022-01-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/104019\n+\t* include/bits/istream.tcc (basic_istream::sentry): Add braces\n+\taround try-block.\n+\t* include/bits/shared_ptr_base.h (_Sp_counted_array_base::_M_init):\n+\tAdd pragmas to disable bogus warnings from PR 61596.\n+\n+2022-01-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/104217\n+\t* src/c++17/fs_ops.cc (_GNU_SOURCE): Define.\n+\t* src/filesystem/dir.cc (_GNU_SOURCE): Define.\n+\t* src/filesystem/ops.cc (_GNU_SOURCE): Define.\n+\n+2022-01-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/104161\n+\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for\n+\tfdopendir.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* src/c++17/fs_dir.cc (_Dir): Add nofollow flag to constructor\n+\tand pass it to base class constructor.\n+\t(directory_iterator): Pass nofollow flag to _Dir constructor.\n+\t(fs::recursive_directory_iterator::increment): Likewise.\n+\t* src/c++17/fs_ops.cc (do_remove_all): Use nofollow option for\n+\tdirectory_iterator constructor. Move error check outside loop.\n+\t* src/filesystem/dir-common.h (_Dir_base): Add nofollow flag to\n+\tconstructor and when it's set use ::open with O_NOFOLLOW and\n+\tO_DIRECTORY.\n+\t* src/filesystem/dir.cc (_Dir): Add nofollow flag to constructor\n+\tand pass it to base class constructor.\n+\t(directory_iterator): Pass nofollow flag to _Dir constructor.\n+\t(fs::recursive_directory_iterator::increment): Likewise.\n+\t* src/filesystem/ops.cc (remove_all): Use nofollow option for\n+\tdirectory_iterator constructor. Move error check outside loop.\n+\n 2022-01-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/104032"}]}