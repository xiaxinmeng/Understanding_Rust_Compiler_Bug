{"sha": "94bff63216c58605147ef22357d3bb48eee999ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRiZmY2MzIxNmM1ODYwNTE0N2VmMjIzNTdkM2JiNDhlZWU5OTlhZQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-06-15T18:33:58Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-06-15T18:33:58Z"}, "message": "re PR fortran/43388 ([F2008][OOP] ALLOCATE with MOLD=)\n\n2010-06-15  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/43388\n\t* gfortran.h (gfc_expr): Add new member 'mold'.\n\t* match.c (gfc_match_allocate): Implement the MOLD tag.\n\t* resolve.c (resolve_allocate_expr): Ditto.\n\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n\n\n2010-06-15  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/43388\n\t* gfortran.dg/allocate_alloc_opt_8.f90: New.\n\t* gfortran.dg/allocate_alloc_opt_9.f90: New.\n\t* gfortran.dg/allocate_alloc_opt_10.f90: New.\n\t* gfortran.dg/class_allocate_2.f03: Modified an error message.\n\nFrom-SVN: r160801", "tree": {"sha": "9b84864e2b7463fd00877080c1437f80e8b9b59e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b84864e2b7463fd00877080c1437f80e8b9b59e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94bff63216c58605147ef22357d3bb48eee999ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94bff63216c58605147ef22357d3bb48eee999ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94bff63216c58605147ef22357d3bb48eee999ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94bff63216c58605147ef22357d3bb48eee999ae/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9287111fb40ceacaeb85c30ce66ffb9728ec0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9287111fb40ceacaeb85c30ce66ffb9728ec0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9287111fb40ceacaeb85c30ce66ffb9728ec0f"}], "stats": {"total": 240, "additions": 197, "deletions": 43}, "files": [{"sha": "31da4d33169e44b780d129203df3cf56da7287d6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=94bff63216c58605147ef22357d3bb48eee999ae", "patch": "@@ -1,3 +1,11 @@\n+2010-06-15  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/43388\n+\t* gfortran.h (gfc_expr): Add new member 'mold'.\n+\t* match.c (gfc_match_allocate): Implement the MOLD tag.\n+\t* resolve.c (resolve_allocate_expr): Ditto.\n+\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n+\n 2010-06-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/44536"}, {"sha": "8867e58d5b83e502f262c60f618055ac21b121bf", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=94bff63216c58605147ef22357d3bb48eee999ae", "patch": "@@ -1669,10 +1669,13 @@ typedef struct gfc_expr\n       it from recurring.  */\n   unsigned int error : 1;\n   \n-  /* Mark and expression where a user operator has been substituted by\n+  /* Mark an expression where a user operator has been substituted by\n      a function call in interface.c(gfc_extend_expr).  */\n   unsigned int user_operator : 1;\n \n+  /* Mark an expression as being a MOLD argument of ALLOCATE.  */\n+  unsigned int mold : 1;\n+  \n   /* If an expression comes from a Hollerith constant or compile-time\n      evaluation of a transfer statement, it may have a prescribed target-\n      memory representation, and these cannot always be backformed from"}, {"sha": "92c4da0a4b5a9376edbcceeb26084e970413507c", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=94bff63216c58605147ef22357d3bb48eee999ae", "patch": "@@ -2785,16 +2785,16 @@ match\n gfc_match_allocate (void)\n {\n   gfc_alloc *head, *tail;\n-  gfc_expr *stat, *errmsg, *tmp, *source;\n+  gfc_expr *stat, *errmsg, *tmp, *source, *mold;\n   gfc_typespec ts;\n   gfc_symbol *sym;\n   match m;\n   locus old_locus;\n-  bool saw_stat, saw_errmsg, saw_source, b1, b2, b3;\n+  bool saw_stat, saw_errmsg, saw_source, saw_mold, b1, b2, b3;\n \n   head = tail = NULL;\n-  stat = errmsg = source = tmp = NULL;\n-  saw_stat = saw_errmsg = saw_source = false;\n+  stat = errmsg = source = mold = tmp = NULL;\n+  saw_stat = saw_errmsg = saw_source = saw_mold = false;\n \n   if (gfc_match_char ('(') != MATCH_YES)\n     goto syntax;\n@@ -2987,6 +2987,38 @@ gfc_match_allocate (void)\n \t    goto alloc_opt_list;\n \t}\n \n+      m = gfc_match (\" mold = %e\", &tmp);\n+      if (m == MATCH_ERROR)\n+\tgoto cleanup;\n+      if (m == MATCH_YES)\n+\t{\n+\t  if (gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: MOLD tag at %L\",\n+\t\t\t      &tmp->where) == FAILURE)\n+\t    goto cleanup;\n+\n+\t  /* Check F08:C636.  */\n+\t  if (saw_mold)\n+\t    {\n+\t      gfc_error (\"Redundant MOLD tag found at %L \", &tmp->where);\n+\t      goto cleanup;\n+\t    }\n+  \n+\t  /* Check F08:C637.  */\n+\t  if (ts.type != BT_UNKNOWN)\n+\t    {\n+\t      gfc_error (\"MOLD tag at %L conflicts with the typespec at %L\",\n+\t\t\t &tmp->where, &old_locus);\n+\t      goto cleanup;\n+\t    }\n+\n+\t  mold = tmp;\n+\t  saw_mold = true;\n+\t  mold->mold = 1;\n+\n+\t  if (gfc_match_char (',') == MATCH_YES)\n+\t    goto alloc_opt_list;\n+\t}\n+\n \tgfc_gobble_whitespace ();\n \n \tif (gfc_peek_char () == ')')\n@@ -2997,10 +3029,21 @@ gfc_match_allocate (void)\n   if (gfc_match (\" )%t\") != MATCH_YES)\n     goto syntax;\n \n+  /* Check F08:C637.  */\n+  if (source && mold)\n+    {\n+      gfc_error (\"MOLD tag at %L conflicts with SOURCE tag at %L\",\n+\t\t  &mold->where, &source->where);\n+      goto cleanup;\n+    }\n+  \n   new_st.op = EXEC_ALLOCATE;\n   new_st.expr1 = stat;\n   new_st.expr2 = errmsg;\n-  new_st.expr3 = source;\n+  if (source)\n+    new_st.expr3 = source;\n+  else\n+    new_st.expr3 = mold;\n   new_st.ext.alloc.list = head;\n   new_st.ext.alloc.ts = ts;\n \n@@ -3013,7 +3056,8 @@ gfc_match_allocate (void)\n   gfc_free_expr (errmsg);\n   gfc_free_expr (source);\n   gfc_free_expr (stat);\n-  gfc_free_expr (tmp);\n+  gfc_free_expr (mold);\n+  if (tmp && tmp->expr_type) gfc_free_expr (tmp);\n   gfc_free_alloc_list (head);\n   return MATCH_ERROR;\n }"}, {"sha": "7e6b75aebe145fb00771beb03074dc88ef356a2f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=94bff63216c58605147ef22357d3bb48eee999ae", "patch": "@@ -6268,7 +6268,6 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n   gfc_symbol *sym = NULL;\n   gfc_alloc *a;\n   gfc_component *c;\n-  gfc_expr *init_e;\n \n   /* Check INTENT(IN), unless the object is a sub-component of a pointer.  */\n   check_intent_in = 1;\n@@ -6401,11 +6400,14 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \t  goto failure;\n \t}\n     }\n-  else if (is_abstract&& code->ext.alloc.ts.type == BT_UNKNOWN)\n+\n+  /* Check F08:C629.  */\n+  if (is_abstract && code->ext.alloc.ts.type == BT_UNKNOWN\n+      && !code->expr3)\n     {\n       gcc_assert (e->ts.type == BT_CLASS);\n       gfc_error (\"Allocating %s of ABSTRACT base type at %L requires a \"\n-\t\t \"type-spec or SOURCE=\", sym->name, &e->where);\n+\t\t \"type-spec or source-expr\", sym->name, &e->where);\n       goto failure;\n     }\n \n@@ -6416,25 +6418,26 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n       goto failure;\n     }\n     \n-  if (!code->expr3)\n+  if (!code->expr3 || code->expr3->mold)\n     {\n       /* Add default initializer for those derived types that need them.  */\n-      if (e->ts.type == BT_DERIVED\n-\t  && (init_e = gfc_default_initializer (&e->ts)))\n-\t{\n-\t  gfc_code *init_st = gfc_get_code ();\n-\t  init_st->loc = code->loc;\n-\t  init_st->op = EXEC_INIT_ASSIGN;\n-\t  init_st->expr1 = gfc_expr_to_initialize (e);\n-\t  init_st->expr2 = init_e;\n-\t  init_st->next = code->next;\n-\t  code->next = init_st;\n-\t}\n-      else if (e->ts.type == BT_CLASS\n-\t       && ((code->ext.alloc.ts.type == BT_UNKNOWN\n-\t\t    && (init_e = gfc_default_initializer (&CLASS_DATA (e)->ts)))\n-\t\t   || (code->ext.alloc.ts.type == BT_DERIVED\n-\t\t       && (init_e = gfc_default_initializer (&code->ext.alloc.ts)))))\n+      gfc_expr *init_e = NULL;\n+      gfc_typespec ts;\n+\n+      if (code->ext.alloc.ts.type == BT_DERIVED)\n+\tts = code->ext.alloc.ts;\n+      else if (code->expr3)\n+\tts = code->expr3->ts;\n+      else\n+\tts = e->ts;\n+\n+      if (ts.type == BT_DERIVED)\n+\tinit_e = gfc_default_initializer (&ts);\n+      /* FIXME: Use default init of dynamic type (cf. PR 44541).  */\n+      else if (e->ts.type == BT_CLASS)\n+\tinit_e = gfc_default_initializer (&ts.u.derived->components->ts);\n+\n+      if (init_e)\n \t{\n \t  gfc_code *init_st = gfc_get_code ();\n \t  init_st->loc = code->loc;"}, {"sha": "ad054261dad732b70e7956692a136df9528506bf", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=94bff63216c58605147ef22357d3bb48eee999ae", "patch": "@@ -4155,20 +4155,23 @@ gfc_trans_allocate (gfc_code * code)\n \t  /* A scalar or derived type.  */\n \n \t  /* Determine allocate size.  */\n-\t  if (code->expr3 && code->expr3->ts.type == BT_CLASS)\n+\t  if (al->expr->ts.type == BT_CLASS && code->expr3)\n \t    {\n-\t      gfc_expr *sz;\n-\t      gfc_se se_sz;\n-\t      sz = gfc_copy_expr (code->expr3);\n-\t      gfc_add_component_ref (sz, \"$vptr\");\n-\t      gfc_add_component_ref (sz, \"$size\");\n-\t      gfc_init_se (&se_sz, NULL);\n-\t      gfc_conv_expr (&se_sz, sz);\n-\t      gfc_free_expr (sz);\n-\t      memsz = se_sz.expr;\n+\t      if (code->expr3->ts.type == BT_CLASS)\n+\t\t{\n+\t\t  gfc_expr *sz;\n+\t\t  gfc_se se_sz;\n+\t\t  sz = gfc_copy_expr (code->expr3);\n+\t\t  gfc_add_component_ref (sz, \"$vptr\");\n+\t\t  gfc_add_component_ref (sz, \"$size\");\n+\t\t  gfc_init_se (&se_sz, NULL);\n+\t\t  gfc_conv_expr (&se_sz, sz);\n+\t\t  gfc_free_expr (sz);\n+\t\t  memsz = se_sz.expr;\n+\t\t}\n+\t      else\n+\t\tmemsz = TYPE_SIZE_UNIT (gfc_typenode_for_spec (&code->expr3->ts));\n \t    }\n-\t  else if (code->expr3 && code->expr3->ts.type != BT_CLASS)\n-\t    memsz = TYPE_SIZE_UNIT (gfc_typenode_for_spec (&code->expr3->ts));\n \t  else if (code->ext.alloc.ts.type != BT_UNKNOWN)\n \t    memsz = TYPE_SIZE_UNIT (gfc_typenode_for_spec (&code->ext.alloc.ts));\n \t  else\n@@ -4230,7 +4233,7 @@ gfc_trans_allocate (gfc_code * code)\n       gfc_add_expr_to_block (&block, tmp);\n \n       /* Initialization via SOURCE block.  */\n-      if (code->expr3)\n+      if (code->expr3 && !code->expr3->mold)\n \t{\n \t  gfc_expr *rhs = gfc_copy_expr (code->expr3);\n \t  if (al->expr->ts.type == BT_CLASS)\n@@ -4266,7 +4269,7 @@ gfc_trans_allocate (gfc_code * code)\n \t  rhs = NULL;\n \t  if (code->expr3 && code->expr3->ts.type == BT_CLASS)\n \t    {\n-\t      /* VPTR must be determined at run time.  */\n+\t      /* Polymorphic SOURCE: VPTR must be determined at run time.  */\n \t      rhs = gfc_copy_expr (code->expr3);\n \t      gfc_add_component_ref (rhs, \"$vptr\");\n \t      tmp = gfc_trans_pointer_assignment (lhs, rhs);"}, {"sha": "69dd222820364dfc8bbd17bf0b54fede3293deff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94bff63216c58605147ef22357d3bb48eee999ae", "patch": "@@ -1,3 +1,11 @@\n+2010-06-15  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/43388\n+\t* gfortran.dg/allocate_alloc_opt_8.f90: New.\n+\t* gfortran.dg/allocate_alloc_opt_9.f90: New.\n+\t* gfortran.dg/allocate_alloc_opt_10.f90: New.\n+\t* gfortran.dg/class_allocate_2.f03: Modified an error message.\n+\n 2010-06-15  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-sccvn-4.c: Adjust."}, {"sha": "5bccefaaf151b4b78f99c083f84f4aacf276ff54", "filename": "gcc/testsuite/gfortran.dg/allocate_alloc_opt_10.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_10.f90?ref=94bff63216c58605147ef22357d3bb48eee999ae", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do run }\n+!\n+! PR 43388: [F2008][OOP] ALLOCATE with MOLD=\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+type :: t1\n+  integer :: i\n+end type\n+\n+type,extends(t1) :: t2\n+  integer :: j = 4\n+end type\n+\n+class(t1),allocatable :: x,y\n+type(t2) :: z\n+\n+\n+!!! first example (works)\n+\n+z%j = 5\n+allocate(x,MOLD=z)\n+\n+select type (x)\n+type is (t2)\n+  print *,x%j\n+  if (x%j/=4) call abort\n+class default\n+  call abort()\n+end select\n+\n+\n+!!! second example (fails)\n+!!! FIXME: uncomment once implemented (cf. PR 44541)\n+\n+! allocate(y,MOLD=x)\n+! \n+! select type (y)\n+! type is (t2)\n+!   print *,y%j\n+!   if (y%j/=4) call abort\n+! class default\n+!   call abort()\n+! end select\n+\n+end"}, {"sha": "39aa3638b469348493d1221317d0a16fd9f3d1ec", "filename": "gcc/testsuite/gfortran.dg/allocate_alloc_opt_8.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_8.f90?ref=94bff63216c58605147ef22357d3bb48eee999ae", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! PR 43388: [F2008][OOP] ALLOCATE with MOLD=\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+type :: t\n+end type\n+\n+class(t),allocatable :: x\n+type(t) :: z\n+\n+allocate(x,MOLD=z)  ! { dg-error \"MOLD tag at\" }\n+\n+end"}, {"sha": "e51a7ec868a19f3735a48e25ffc73eef9579c9ec", "filename": "gcc/testsuite/gfortran.dg/allocate_alloc_opt_9.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_9.f90?ref=94bff63216c58605147ef22357d3bb48eee999ae", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+!\n+! PR 43388: [F2008][OOP] ALLOCATE with MOLD=\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+type :: t\n+end type\n+\n+type :: u\n+end type\n+\n+class(t),allocatable :: x\n+type(t) :: z1,z2\n+type(u) :: z3\n+\n+allocate(x,MOLD=z1,MOLD=z2)    ! { dg-error \"Redundant MOLD tag\" }\n+allocate(x,SOURCE=z1,MOLD=z2)  ! { dg-error \"conflicts with SOURCE tag\" }\n+allocate(t::x,MOLD=z1)         ! { dg-error \"conflicts with the typespec\" }\n+\n+allocate(x,MOLD=z3)            ! { dg-error \"is type incompatible\" }\n+\n+end"}, {"sha": "cec05f17a1f351c695e005f2c0a48daf1275f111", "filename": "gcc/testsuite/gfortran.dg/class_allocate_2.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bff63216c58605147ef22357d3bb48eee999ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_2.f03?ref=94bff63216c58605147ef22357d3bb48eee999ae", "patch": "@@ -18,6 +18,6 @@ subroutine test()\n \n class(t), allocatable :: a,c,d\n type(t2) :: b\n-allocate(a) ! { dg-error \"requires a type-spec or SOURCE\" }\n-allocate(b%t) ! { dg-error \"requires a type-spec or SOURCE\" }\n+allocate(a) ! { dg-error \"requires a type-spec or source-expr\" }\n+allocate(b%t) ! { dg-error \"requires a type-spec or source-expr\" }\n end"}]}