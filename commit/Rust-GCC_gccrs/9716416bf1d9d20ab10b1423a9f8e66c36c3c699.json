{"sha": "9716416bf1d9d20ab10b1423a9f8e66c36c3c699", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcxNjQxNmJmMWQ5ZDIwYWIxMGIxNDIzYTlmOGU2NmMzNmMzYzY5OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-11-19T11:30:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-11-19T11:30:01Z"}, "message": "Resync.\n\nFrom-SVN: r90916", "tree": {"sha": "43f5cd529d6f8292607b7c38ccf4c3bd62ad2f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43f5cd529d6f8292607b7c38ccf4c3bd62ad2f36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9716416bf1d9d20ab10b1423a9f8e66c36c3c699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9716416bf1d9d20ab10b1423a9f8e66c36c3c699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9716416bf1d9d20ab10b1423a9f8e66c36c3c699", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9716416bf1d9d20ab10b1423a9f8e66c36c3c699/comments", "author": null, "committer": null, "parents": [{"sha": "80298b8904d62d74b44e77b4a0553f599299a7ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80298b8904d62d74b44e77b4a0553f599299a7ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80298b8904d62d74b44e77b4a0553f599299a7ce"}], "stats": {"total": 299, "additions": 299, "deletions": 0}, "files": [{"sha": "3dbed55fddfb859cb3b58d83eabc9e9772962b70", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9716416bf1d9d20ab10b1423a9f8e66c36c3c699/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9716416bf1d9d20ab10b1423a9f8e66c36c3c699/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9716416bf1d9d20ab10b1423a9f8e66c36c3c699", "patch": "@@ -1,3 +1,302 @@\n+2004-11-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* adaint.h, adaint.c\n+\t(__gnat_portable_spawn): Fix cast of spawnvp third parameter\n+\tto avoid warnings.\n+\tAdd also a cast to kill another warning.\n+\t(win32_no_block_spawn): Initialize CreateProcess's dwCreationFlags\n+\tparameter with the priority class of the parent process instead of\n+\talways using the NORMAL_PRIORITY_CLASS.\n+\t(__gnat_dup): New function.\n+\t(__gnat_dup2): New function.\n+\t(__gnat_is_symbolic_link): Enable the effective body of this\n+\tfunction when __APPLE__ is defined.\n+\n+\t* g-os_lib.ads, g-os_lib.adb (Spawn): Two new procedures.\n+\tUpdate comments.\n+\n+2004-11-18  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* a-exexpr.adb (Others_Value, All_Others_Value): New variables, the\n+\taddress of which may be used to represent \"others\" and \"all others\"\n+\tchoices in exception tables, instead of the current harcoded\n+\t(void *)0 and (void *)1.\n+\t(Setup_Exception): Do nothing in the GNAT SJLJ case.\n+\n+\t* gigi.h (others_decl, all_others_decl): New decls representing the\n+\tnew Others_Value and All_Others_Value objects.\n+\t(struct attrib): Rename \"arg\" component as \"args\", since GCC expects a\n+\tlist of arguments in there.\n+\n+\t* raise.c (GNAT_OTHERS, GNAT_ALL_OTHERS): Are now the address of the\n+\tcorresponding objects exported by a-exexpr, instead of hardcoded dummy\n+\taddresses.\n+\n+\t* trans.c (Exception_Handler_to_gnu_zcx): Use the address of\n+\tothers_decl and all_others_decl instead of hardcoded dummy addresses\n+\tto represent \"others\" and \"all others\" choices, which is cleaner and\n+\tmore flexible with respect to the possible eh pointer encoding policies.\n+\n+\t* utils.c (init_gigi_decls): Initialize others_decl and all_others_decl.\n+\t(process_attributes): Account for the naming change of the \"args\"\n+\tattribute list entry component.\n+\n+\t* decl.c (build_attr_list): Rename into prepend_attributes to allow\n+\tcumulating attributes for different entities into a single list.\n+\t(gnat_to_gnu_entity): Use prepend_attributes to build the list of\n+\tattributes for the current entity and propagate first subtype\n+\tattributes to other subtypes.\n+\t<E_Procedure>: Attribute arguments are attr->args and not\n+\tattr->arg any more.\n+\t(build_attr_list): Ditto. Make attr->args a TREE_LIST when there is an\n+\targument provided, as this is what GCC expects. Use NULL_TREE instead\n+\tof 0 for trees.\n+\n+2004-11-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-stmaco.ads, exp_util.ads, exp_util.adb, i-cpp.ads, i-cpp.adb: \n+\tMinor reformatting througout (including new function specs)\n+\tAdd ??? comments asking for clarification.\n+\n+2004-11-18  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* butil.ads, butil.adb, bindgen.adb (Get_Unit_Name_String): Remove\n+\tincomplete duplicate implementation of this subprogram from butil.\n+\n+2004-11-18  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_dist.adb (Build_RPC_Receiver_Body): New subprogram. This\n+\tprocedures factors the common processing for building an RPC receiver\n+\tfor an RCI package or an RACW type.\n+\tStylistic cleanup: change '/= Empty' to 'Present ()'; move body of\n+\tBuild_Remote_Subprogram_Proxy_Type into proper alphabetical order.\n+\t(Get_PCS_Name): New subprogram. Returns the name of the PCS currently\n+\tin use.\n+\t(Specific_Add_RACW_Features): New subprogram. PCS-specific part of\n+\tAdd_RACW_Features.\n+\t(Specific_Add_RAST_Features): New subprogram. PCS-specific part of\n+\tAdd_RAST_Features.\n+\t(Assign_Subprogram_Identifier): New subprogram. Provision for assigning\n+\tdistribution subprogram identifiers that are either subprogram numbers\n+\tor strings.\n+\t(Get_Subprogram_Ids): New subprogram. Retrieve both the numeric and\n+\tstring distribution identifiers assigned to a given subprogram.\n+\t(Get_Subprogram_Id): Reimplement in terms of Get_Subprogram_Ids.\n+\t(Add_RAS_Dereference_TSS): Add comments.\n+\t(Build_General_Calling_Stubs): Note that the RACW_Type formal parameter\n+\tis not referenced yet because it will be used by the PolyORB DSA\n+\timplementation.\n+\t(Insert_Partition_Check): Remove fossile code.\n+\t(First_RCI_Subprogram_Id): Document this constant.\n+\t(Add_RAS_Access_TSS): Correct the setting of the Etype of the\n+\tRAS_Access TSS.\n+\t(Get_Pkg_Name_String): Remove subprogram. Usage occurrences are\n+\treplaced with calls to Get_Library_Unit_Name_String. Previously there\n+\twere several instances of the same code in different locations in the\n+\tcompiler; this checkin completes the replacement of all of these\n+\tinstances with calls to a common subprogram.\n+\tMinor reformatting.\n+\n+\t* sem_dist.adb: Remove comment noting that RPC receiver generation\n+\tshould be disabled for RACWs that implement RASs.\n+\t(Process_Partition_Id): Use new subprogram Get_Library_Unit_Name_String.\n+\n+\t* sem_util.ads, sem_util.adb (Has_Stream): New function\n+\t(Get_Library_Unit_Name_String): New subprogram to retrieve the fully\n+\tqualified name of a library unit into the name buffer.\n+\t(Note_Possible_Modification): Generate a reference only\n+\tif the context comes from source.\n+\n+\t* snames.ads (PCS_Names): New subtype corresponding to names of\n+\tsupported implementations of the Partition Communication Subsystem\n+\t(PCS) (i.e. the runtime library support modules for the distributed\n+\tsystems annex).\n+\n+2004-11-18  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads, einfo.adb: Remove Is_Psected flag, no longer used\n+\t(Has_Rep_Pragma): New function\n+\t(Has_Attribute_Definition_Clause): New function\n+\t(Record_Rep_Pragma): Moved here from sem_ch13.adb\n+\t(Get_Rep_Pragma): Remove junk kludge for Stream_Convert pragma\n+\n+\t* sem_ch13.ads, sem_ch13.adb (Record_Rep_Pragma): Moved to einfo.adb\n+\n+\t* exp_prag.adb: (Expand_Pragma_Common_Object): New procedure\n+\t(Expand_Pragma_Psect_Object): New procedure\n+\tThese procedures contain the revised and cleaned up processing for\n+\tthese two pragmas. This processing was formerly in Sem_Prag, but\n+\tis more appropriately moved here. The cleanup involves making sure\n+\tthat the pragmas are properly attached to the tree, and that no\n+\tnodes are improperly shared.\n+\n+\t* sem_prag.adb: Move expansion of Common_Object and Psect_Object\n+\tpragmas to Exp_Prag, which is more appropriate.\n+\tAttach these two pragmas to the Rep_Item chain Use Rep_Item chain to\n+\tcheck for duplicates Remove use of Is_Psected flag, no longer needed.\n+\tUse new Make_String_Literal function with string.\n+\n+\t* exp_attr.adb (Expand_Fpt_Attribute): The floating-point attributes\n+\tthat are functions return universal values, that have to be converted\n+\tto the context type.\n+\tUse new Make_String_Literal function with string.\n+\t(Get_Stream_Convert_Pragma): New function, replaces the use of\n+\tGet_Rep_Pragma, which had to be kludged to work in this case.\n+\n+\t* freeze.adb: Use new Has_Rep_Pragma function\n+\n+\t* exp_intr.adb, exp_ch3.adb, sem_attr.adb: Use new Make_String_Literal\n+\tfunction with string.\n+\tUse new Has_Rep_Pragma function.\n+\n+\t* tbuild.ads, tbuild.adb (Make_String_Literal): New function, takes\n+\tstring argument.\n+\n+2004-11-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.ads, errout.adb: (First_Sloc): New function\n+\n+\t* par-ch5.adb (P_Condition): Check for redundant parens is now a style\n+\tcheck (-gnatyx) instead of being included as a redundant construct\n+\twarning.\n+\n+\t* sem_ch6.adb: Change name Style_Check_Subprogram_Order to\n+\tStyle_Check_Order_Subprograms.\n+\n+\t* style.ads, styleg.ads, styleg.adb, styleg-c.adb, stylesw.ads,\n+\tstylesw.adb: Add Style_Check_Xtra_Parens\n+\n+\t* usage.adb: Add line for -gnatyx (check extra parens)\n+\n+\t* vms_data.ads: Add entry for STYLE_CHECKS=XTRA_PARENS => -gnatyx\n+\n+2004-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Selected_Component): If the component is the\n+\tdiscriminant of a constrained subtype, analyze the copy of the\n+\tcorresponding constraint, because in some cases it may be only\n+\tpartially analyzed.\n+\tRemoves long-lived ??? comments.\n+\n+\t* exp_ch7.adb (Establish_Transient_Scope): Remove complex code that\n+\thandled controlled or secondary-stack expressions within the\n+\titeration_scheme of a loop.\n+\n+\t* sem_ch5.adb (Analyze_Iteration_Scheme): Build a block to evaluate\n+\tbounds that may contain functions calls, to prevent memory leaks when\n+\tthe bound contains a call to a function that uses the secondary stack.\n+\t(Check_Complex_Bounds): Subsidiary of Analyze_Iteration_Scheme, to\n+\tgenerate temporaries for loop bounds that might contain function calls\n+\tthat require secondary stack and/or finalization actions.\n+\n+\t* sem_ch4.adb (Analyze_Indexed_Component_Form): If the prefix is a\n+\tselected component and the selector is overloadable (not just a\n+\tfunction) treat as function call, Analyze_Call will disambiguate if\n+\tnecessary.\n+\t(Analyze_Selected_Component): Do not generate an actual subtype for the\n+\tselected component if expansion is disabled. The actual subtype is only\n+\tneeded for constraint checks.\n+\t(Analyze_Allocator): If restriction No_Streams is set, then do\n+\tnot permit objects to be declared of a stream type, or of a\n+\tcomposite type containing a stream.\n+\n+\t* restrict.ads: Remove the a-stream entry from Unit_Array, since\n+\tNo_Streams no longer prohibits with'ing this package.\n+\n+\t* sem_ch3.adb (Build_Derived_Record_Type): If the parent type has\n+\tdiscriminants, but the parent base has unknown discriminants, there is\n+\tno discriminant constraint to inherit. Such a discrepancy can arise\n+\twhen the actual for a formal type with unknown discriminants is a\n+\tsimilar private type whose full view has discriminants.\n+\t(Analyze_Object_Declaration): If restriction No_Streams is set, then\n+\tdo not permit objects to be declared of a stream type, or of a\n+\tcomposite type containing a stream.\n+\n+2004-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_dbug.ads: Update documentation to reflect simpler encoding for\n+\tprotected operations.\n+\n+\t* exp_ch9.adb (Build_Selected_Name): Do not include \"PT\" suffix in\n+\tgenerated name, it complicates decoding in gdb and hinders debugging\n+\tof protected operations.\n+\t(Build_Barrier_Function_Specification): Set the Needs_Debug_Info\n+\tflag for the protected entry barrier function.\n+\t(Build_Protected_Entry_Specification): Set the Needs_Debug_Info\n+\tflag for the protected entry function.\n+\n+2004-11-18  Nicolas Setton  <setton@adacore.com>\n+\n+\t* expect.c: Define __unix__ when __APPLE__ is defined.\n+\n+\t* Makefile.in: Inform the value of the variable GMEM_LIB in the\n+\tDarwin-specific section.\n+\n+\t* lang-specs.h: Change the placement of the %1 marker.\n+\tWorks around the fact that gcc adds -fPIC by default under Darwin.\n+\n+2004-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_pakd.adb (Convert_To_PAT_Type): After replacing the original\n+\ttype of the object with the packed array type, set the Analyzed flag\n+\ton the object if it is an entity or simple indexed component, to avoid\n+\tspurious type errors.\n+\n+2004-11-18  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* gnat1drv.adb, gnatbind.adb, gnatchop.adb, gnatfind.adb, gnatlink.adb,\n+\tgnatls.adb, gnatxref.adb, gprep.adb: Output the copyright message on a\n+\tseparate line from the version message.\n+\n+2004-11-18  Ed Falis  <falis@adacore.com>\n+\n+\t* init.c (__gnat_map_signal): map SIGSEGV to Storage_Error for AE653\n+\tvthreads.\n+\t(init_float): Eliminate initialization of floating point status for\n+\tAE653. The instructions have no effect for vThreads.\n+\n+2004-11-18  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Gnatmake): Invoke gnatlink with -shared-libgcc when\n+\tgnatbind is invoked with -shared.\n+\n+2004-11-18  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* s-tposen.adb (Lock_Entry): Remove the code for raising Program_Error\n+\tfor Detect_Blocking which is redundant with the check done within the\n+\tprocedure Protected_Single_Entry_Call.\n+\t(Lock_Read_Only_Entry): Remove the code for raising Program_Error for\n+\tDetect_Blocking which is redundant with the check done within the\n+\tprocedure Protected_Single_Entry_Call.\n+\n+2004-11-18  Vincent Celier  <celier@adacore.com>\n+\n+\t* makegpr.adb (Compile): Put the compiling switches (in package\n+\tCompiler and on the command line) immediately after \"-c\", instead of\n+\tat the end of the command line invocation of the compiler, when\n+\tcompiling a non-Ada file.\n+\t(Build_Global_Archive): When there is no need to rebuild the archive,\n+\tset Global_Archive_Exists, so that the archive is passed to the linker\n+\tif one is needed.\n+\n+2004-11-18  Robert Dewar  <dewar@adacore.com>\n+\t    Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi: \n+\tRemove extra paren check from list of checks for redundant constructs\n+\tAdd documentation of new -gnatyx style check (check extra parens)\n+\tRemove paragraph about gnatelim debug options.\n+\n+\t* gnat_rm.texi: Document that Ada.Streams now forbids creating stream\n+\tobjects rather than forbidding dependencies on the package Ada.Streams.\n+\n+\t* sinfo.ads: Add ??? note that we should document pragmas passed to\n+\tback end.\n+\n+\t* g-expect.ads: Fix a few typos in the comments.\n+\n 2004-11-09  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* misc.c (gnat_handle_option): Use %< and %> for quoting in"}]}