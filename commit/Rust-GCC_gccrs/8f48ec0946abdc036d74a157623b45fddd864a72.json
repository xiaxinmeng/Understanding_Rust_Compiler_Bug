{"sha": "8f48ec0946abdc036d74a157623b45fddd864a72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY0OGVjMDk0NmFiZGMwMzZkNzRhMTU3NjIzYjQ1ZmRkZDg2NGE3Mg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-03-15T08:45:41Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-04-21T14:18:05Z"}, "message": "Fix clang warnings.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.c: Remove superfluous || TARGET_MACHO\n\twhich remains to be '(... || 0)' and clang complains about it.\n\t* dwarf2out.c (AT_vms_delta): Declare conditionally.\n\t(add_AT_vms_delta): Likewise.\n\t* tree.c (fld_simplified_type): Use rather more common pattern\n\tfor disabling of something (#if 0).\n\t(get_tree_code_name): Likewise.\n\t(verify_type_variant): Likewise.", "tree": {"sha": "3ba6a4b961ca86e58bbdc33d109c11f914095a68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ba6a4b961ca86e58bbdc33d109c11f914095a68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f48ec0946abdc036d74a157623b45fddd864a72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f48ec0946abdc036d74a157623b45fddd864a72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f48ec0946abdc036d74a157623b45fddd864a72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f48ec0946abdc036d74a157623b45fddd864a72/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f23881fcf081a6edd538d6d54fa0068d716973d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23881fcf081a6edd538d6d54fa0068d716973d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f23881fcf081a6edd538d6d54fa0068d716973d7"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "d3c09bfd7b920d57d47ebd0cf74fd3acb32386a3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f48ec0946abdc036d74a157623b45fddd864a72/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f48ec0946abdc036d74a157623b45fddd864a72/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8f48ec0946abdc036d74a157623b45fddd864a72", "patch": "@@ -10817,12 +10817,11 @@ ix86_legitimate_address_p (machine_mode, rtx addr, bool strict)\n \n       else if (SYMBOLIC_CONST (disp)\n \t       && (flag_pic\n-\t\t   || (TARGET_MACHO\n #if TARGET_MACHO\n-\t\t       && MACHOPIC_INDIRECT\n-\t\t       && !machopic_operand_p (disp)\n+\t\t   || (MACHOPIC_INDIRECT\n+\t\t       && !machopic_operand_p (disp))\n #endif\n-\t       )))\n+\t\t  ))\n \t{\n \n \tis_legitimate_pic:"}, {"sha": "aba168482955a1b664f049e7654efc669934aa4b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f48ec0946abdc036d74a157623b45fddd864a72/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f48ec0946abdc036d74a157623b45fddd864a72/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8f48ec0946abdc036d74a157623b45fddd864a72", "patch": "@@ -3929,8 +3929,10 @@ static void prune_unused_types (void);\n static int maybe_emit_file (struct dwarf_file_data *fd);\n static inline const char *AT_vms_delta1 (dw_attr_node *);\n static inline const char *AT_vms_delta2 (dw_attr_node *);\n+#if VMS_DEBUGGING_INFO\n static inline void add_AT_vms_delta (dw_die_ref, enum dwarf_attribute,\n \t\t\t\t     const char *, const char *);\n+#endif\n static void append_entry_to_tmpl_value_parm_die_table (dw_die_ref, tree);\n static void gen_remaining_tmpl_value_param_die_attribute (void);\n static bool generic_type_p (tree);\n@@ -5200,6 +5202,7 @@ AT_file (dw_attr_node *a)\n   return a->dw_attr_val.v.val_file;\n }\n \n+#if VMS_DEBUGGING_INFO\n /* Add a vms delta attribute value to a DIE.  */\n \n static inline void\n@@ -5215,6 +5218,7 @@ add_AT_vms_delta (dw_die_ref die, enum dwarf_attribute attr_kind,\n   attr.dw_attr_val.v.val_vms_delta.lbl2 = xstrdup (lbl2);\n   add_dwarf_attr (die, &attr);\n }\n+#endif\n \n /* Add a symbolic view identifier attribute value to a DIE.  */\n "}, {"sha": "6129d911ee6d2b690c2127b782552c687b1bdd4a", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f48ec0946abdc036d74a157623b45fddd864a72/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f48ec0946abdc036d74a157623b45fddd864a72/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8f48ec0946abdc036d74a157623b45fddd864a72", "patch": "@@ -5538,9 +5538,11 @@ fld_simplified_type (tree t, class free_lang_data_d *fld)\n   if (POINTER_TYPE_P (t))\n     return fld_incomplete_type_of (t, fld);\n   /* FIXME: This triggers verification error, see PR88140.  */\n-  if (TREE_CODE (t) == ARRAY_TYPE && 0)\n+#if 0\n+  if (TREE_CODE (t) == ARRAY_TYPE)\n     return fld_process_array_type (t, fld_simplified_type (TREE_TYPE (t), fld),\n \t\t\t\t   fld_simplified_types, fld);\n+#endif\n   return t;\n }\n \n@@ -13451,7 +13453,7 @@ get_tree_code_name (enum tree_code code)\n      invalid values, so force an unsigned comparison.  */\n   if (unsigned (code) >= MAX_TREE_CODES)\n     {\n-      if (code == 0xa5a5)\n+      if ((unsigned)code == 0xa5a5)\n \treturn \"ggc_freed\";\n       return invalid;\n     }\n@@ -14099,8 +14101,10 @@ verify_type_variant (const_tree t, tree tv)\n \n   verify_variant_match (TREE_CODE);\n   /* FIXME: Ada builds non-artificial variants of artificial types.  */\n-  if (TYPE_ARTIFICIAL (tv) && 0)\n+#if 0\n+  if (TYPE_ARTIFICIAL (tv))\n     verify_variant_match (TYPE_ARTIFICIAL);\n+#endif\n   if (POINTER_TYPE_P (tv))\n     verify_variant_match (TYPE_REF_CAN_ALIAS_ALL);\n   /* FIXME: TYPE_SIZES_GIMPLIFIED may differs for Ada build.  */\n@@ -14113,8 +14117,10 @@ verify_type_variant (const_tree t, tree tv)\n   else\n     verify_variant_match (TYPE_SATURATING);\n   /* FIXME: This check trigger during libstdc++ build.  */\n-  if (RECORD_OR_UNION_TYPE_P (t) && COMPLETE_TYPE_P (t) && 0)\n+#if 0\n+  if (RECORD_OR_UNION_TYPE_P (t) && COMPLETE_TYPE_P (t))\n     verify_variant_match (TYPE_FINAL_P);\n+#endif\n \n   /* tree_type_common checks.  */\n \n@@ -14149,8 +14155,10 @@ verify_type_variant (const_tree t, tree tv)\n      that may differ BY TYPE_CONTEXT that in turn may point \n      to TRANSLATION_UNIT_DECL.\n      Ada also builds variants of types with different TYPE_CONTEXT.   */\n-  if ((!in_lto_p || !TYPE_FILE_SCOPE_P (t)) && 0)\n+#if 0\n+  if (!in_lto_p || !TYPE_FILE_SCOPE_P (t))\n     verify_variant_match (TYPE_CONTEXT);\n+#endif\n   if (TREE_CODE (t) == ARRAY_TYPE || TREE_CODE (t) == INTEGER_TYPE)\n     verify_variant_match (TYPE_STRING_FLAG);\n   if (TREE_CODE (t) == RECORD_TYPE || TREE_CODE (t) == UNION_TYPE)"}]}