{"sha": "f6547b681842afcc1096d804f161cb83806178c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY1NDdiNjgxODQyYWZjYzEwOTZkODA0ZjE2MWNiODM4MDYxNzhjMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-02T15:55:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-02T15:55:32Z"}, "message": "stl_algo.h (minmax, [...]): Add.\n\n2007-11-02  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algo.h (minmax, minmax_element): Add.\n\t* include/bits/algorithmfwd.h: Update.\n\t* testsuite/25_algorithms/minmax/requirements/\n\texplicit_instantiation/2.cc: New.\n\t* testsuite/25_algorithms/minmax/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\t* testsuite/25_algorithms/minmax/1.cc: Likewise.\n\t* testsuite/25_algorithms/minmax_element/check_type.cc: Likewise.\n\t* testsuite/25_algorithms/minmax_element/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/25_algorithms/minmax_element/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\t* testsuite/25_algorithms/minmax_element/1.cc: Likewise.\n\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Update.\n\nFrom-SVN: r129853", "tree": {"sha": "3174b6899c3316e2b249233b77874b5279b3272d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3174b6899c3316e2b249233b77874b5279b3272d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6547b681842afcc1096d804f161cb83806178c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6547b681842afcc1096d804f161cb83806178c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6547b681842afcc1096d804f161cb83806178c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6547b681842afcc1096d804f161cb83806178c2/comments", "author": null, "committer": null, "parents": [{"sha": "59b567fbcadc9103cc97034f0f264e7ebefe1822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b567fbcadc9103cc97034f0f264e7ebefe1822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59b567fbcadc9103cc97034f0f264e7ebefe1822"}], "stats": {"total": 671, "additions": 671, "deletions": 0}, "files": [{"sha": "b477561ca69d26c844ce376866b8c1b322f9f482", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f6547b681842afcc1096d804f161cb83806178c2", "patch": "@@ -1,3 +1,20 @@\n+2007-11-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algo.h (minmax, minmax_element): Add.\n+\t* include/bits/algorithmfwd.h: Update.\n+\t* testsuite/25_algorithms/minmax/requirements/\n+\texplicit_instantiation/2.cc: New.\n+\t* testsuite/25_algorithms/minmax/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax/1.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax_element/check_type.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax_element/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax_element/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax_element/1.cc: Likewise.\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Update.\n+\n 2007-11-02  Johannes Singler  <singler@ira.uka.de>\n \n         * include/parallel/workstealing.h: Replaced pragma by function"}, {"sha": "2e874040b88015af05f6881aaa4c3b6291fbcae5", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=f6547b681842afcc1096d804f161cb83806178c2", "patch": "@@ -45,6 +45,8 @@\n   inplace_merge\n   is_heap (C++0x)\n   is_heap_until (C++0x)\n+  is_sorted (C++0x)\n+  is_sorted_until (C++0x)\n   iter_swap\n   lexicographical_compare\n   lower_bound\n@@ -54,6 +56,8 @@\n   merge\n   min\n   min_element\n+  minmax (C++0x)\n+  minmax_element (C++0x)\n   mismatch\n   next_permutation\n   nth_element\n@@ -263,6 +267,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     min(const _Tp&, const _Tp&, _Compare);\n \n   // min_element\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp>\n+    pair<const _Tp&, const _Tp&> \n+    minmax(const _Tp&, const _Tp&);\n+\n+  template<typename _Tp, typename _Compare>\n+    pair<const _Tp&, const _Tp&>\n+    minmax(const _Tp&, const _Tp&, _Compare);\n+\n+  template<typename _FIter>\n+    pair<_FIter, _FIter>\n+    minmax_element(_FIter, _FIter);\n+\n+  template<typename _FIter, typename _Compare>\n+    pair<_FIter, _FIter>\n+    minmax_element(_FIter, _FIter, _Compare);\n+#endif\n+\n   // mismatch\n \n   template<typename _BIter>"}, {"sha": "154e2250b4928d00d17bd0b2f38dff27a044cb3e", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=f6547b681842afcc1096d804f161cb83806178c2", "patch": "@@ -3745,6 +3745,189 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  return __next;\n       return __next;\n     }\n+\n+  /**\n+   *  @brief  Determines min and max at once as an ordered pair.\n+   *  @param  a  A thing of arbitrary type.\n+   *  @param  b  Another thing of arbitrary type.\n+   *  @return  A pair(b, a) if b is smaller than a, pair(a, b) otherwise.\n+  */\n+  template<typename _Tp>\n+    inline pair<const _Tp&, const _Tp&>\n+    minmax(const _Tp& __a, const _Tp& __b)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n+\n+      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)\n+\t               : pair<const _Tp&, const _Tp&>(__a, __b);\n+    }\n+\n+  /**\n+   *  @brief  Determines min and max at once as an ordered pair.\n+   *  @param  a  A thing of arbitrary type.\n+   *  @param  b  Another thing of arbitrary type.\n+   *  @param  comp  A @link s20_3_3_comparisons comparison functor@endlink.\n+   *  @return  A pair(b, a) if b is smaller than a, pair(a, b) otherwise.\n+  */\n+  template<typename _Tp, typename _Compare>\n+    inline pair<const _Tp&, const _Tp&>\n+    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)\n+    {\n+      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)\n+\t                      : pair<const _Tp&, const _Tp&>(__a, __b);\n+    }\n+\n+  /**\n+   *  @brief  Return a pair of iterators pointing to the minimum and maximum\n+   *          elements in a range.\n+   *  @param  first  Start of range.\n+   *  @param  last   End of range.\n+   *  @return  make_pair(m, M), where m is the first iterator i in \n+   *           [first, last) such that no other element in the range is\n+   *           smaller, and where M is the last iterator i in [first, last)\n+   *           such that no other element in the range is larger.\n+  */\n+  template<typename _ForwardIterator>\n+    pair<_ForwardIterator, _ForwardIterator>\n+    minmax_element(_ForwardIterator __first, _ForwardIterator __last)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n+\t    typename iterator_traits<_ForwardIterator>::value_type>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+\n+      _ForwardIterator __next = __first;\n+      if (__first == __last\n+\t  || ++__next == __last)\n+\treturn std::make_pair(__first, __first);\n+\n+      _ForwardIterator __min, __max;\n+      if (*__next < *__first)\n+\t{\n+\t  __min = __next;\n+\t  __max = __first;\n+\t}\n+      else\n+\t{\n+\t  __min = __first;\n+\t  __max = __next;\n+\t}\n+\n+      __first = __next;\n+      ++__first;\n+\n+      while (__first != __last)\n+\t{\n+\t  __next = __first;\n+\t  if (++__next == __last)\n+\t    {\n+\t      if (*__first < *__min)\n+\t\t__min = __first;\n+\t      else if (!(*__first < *__max))\n+\t\t__max = __first;\n+\t      break;\n+\t    }\n+\n+\t  if (*__next < *__first)\n+\t    {\n+\t      if (*__next < *__min)\n+\t\t__min = __next;\n+\t      if (!(*__first < *__max))\n+\t\t__max = __first;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (*__first < *__min)\n+\t\t__min = __first;\n+\t      if (!(*__next < *__max))\n+\t\t__max = __next;\n+\t    }\n+\n+\t  __first = __next;\n+\t  ++__first;\n+\t}\n+\n+      return std::make_pair(__min, __max);\n+    }\n+\n+  /**\n+   *  @brief  Return a pair of iterators pointing to the minimum and maximum\n+   *          elements in a range.\n+   *  @param  first  Start of range.\n+   *  @param  last   End of range.\n+   *  @param  comp   Comparison functor.\n+   *  @return  make_pair(m, M), where m is the first iterator i in \n+   *           [first, last) such that no other element in the range is\n+   *           smaller, and where M is the last iterator i in [first, last)\n+   *           such that no other element in the range is larger.\n+  */\n+  template<typename _ForwardIterator, typename _Compare>\n+    pair<_ForwardIterator, _ForwardIterator>\n+    minmax_element(_ForwardIterator __first, _ForwardIterator __last,\n+\t\t   _Compare __comp)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n+\t    typename iterator_traits<_ForwardIterator>::value_type,\n+\t    typename iterator_traits<_ForwardIterator>::value_type>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+\n+      _ForwardIterator __next = __first;\n+      if (__first == __last\n+\t  || ++__next == __last)\n+\treturn std::make_pair(__first, __first);\n+\n+      _ForwardIterator __min, __max;\n+      if (__comp(*__next, *__first))\n+\t{\n+\t  __min = __next;\n+\t  __max = __first;\n+\t}\n+      else\n+\t{\n+\t  __min = __first;\n+\t  __max = __next;\n+\t}\n+\n+      __first = __next;\n+      ++__first;\n+\n+      while (__first != __last)\n+\t{\n+\t  __next = __first;\n+\t  if (++__next == __last)\n+\t    {\n+\t      if (__comp(*__first, *__min))\n+\t\t__min = __first;\n+\t      else if (!__comp(*__first, *__max))\n+\t\t__max = __first;\n+\t      break;\n+\t    }\n+\n+\t  if (__comp(*__next, *__first))\n+\t    {\n+\t      if (__comp(*__next, *__min))\n+\t\t__min = __next;\n+\t      if (!__comp(*__first, *__max))\n+\t\t__max = __first;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (__comp(*__first, *__min))\n+\t\t__min = __first;\n+\t      if (!__comp(*__next, *__max))\n+\t\t__max = __next;\n+\t    }\n+\n+\t  __first = __next;\n+\t  ++__first;\n+\t}\n+\n+      return std::make_pair(__min, __max);\n+    }\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "4939ebf0bd1ded49c93ab15eced6f4d589fb335a", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=f6547b681842afcc1096d804f161cb83806178c2", "patch": "@@ -468,6 +468,24 @@ namespace std\n     _FIter \n     max_element(_FIter, _FIter, _Compare);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp>\n+    pair<const _Tp&, const _Tp&>\n+    minmax(const _Tp&, const _Tp&);\n+\n+  template<typename _Tp, typename _Compare>\n+    pair<const _Tp&, const _Tp&>\n+    minmax(const _Tp&, const _Tp&, _Compare);\n+\n+  template<typename _FIter>\n+    pair<_FIter, _FIter>\n+    minmax_element(_FIter, _FIter);\n+\n+  template<typename _FIter, typename _Compare>\n+    pair<_FIter, _FIter> \n+    minmax_element(_FIter, _FIter, _Compare);\n+#endif\n+\n   template<typename _IIter1, typename _IIter2>\n     bool \n     lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);"}, {"sha": "480d7f95831fe6b9d76862fa82aa9aca610993ae", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/1.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F1.cc?ref=f6547b681842afcc1096d804f161cb83806178c2", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-11-01  Paolo Carlini  <pcarlini@suse.de\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::pair<const int&, const int&> z = std::minmax(1, 2);\n+  std::pair<const int&, const int&> w = std::minmax(4, 3);\n+  VERIFY( z.first == 1 );\n+  VERIFY( z.second == 2 );\n+  VERIFY( w.first == 3 );\n+  VERIFY( w.second == 4 );\n+\n+  std::pair<const int&, const int&> zc = std::minmax(1, 2, std::greater<int>());\n+  std::pair<const int&, const int&> wc = std::minmax(4, 3, std::greater<int>());\n+  VERIFY( zc.first == 2 );\n+  VERIFY( zc.second == 1 );\n+  VERIFY( wc.first == 4 );\n+  VERIFY( wc.second == 3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "17d8e0b0088f45c61ac3fedb001572146504a3c0", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=f6547b681842afcc1096d804f161cb83806178c2", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-11-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template pair<const value_type&, const value_type&>\n+    minmax(const value_type&, const value_type&);\n+  template pair<const value_type&, const value_type&>\n+    minmax(const value_type&, const value_type&, compare_type);\n+}\n+"}, {"sha": "887ee47c7c10b40916241b050c14f3ce8068f5ed", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=f6547b681842afcc1096d804f161cb83806178c2", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-11-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template pair<const value_type&, const value_type&>\n+    minmax(const value_type&, const value_type&);\n+  template pair<const value_type&, const value_type&>\n+    minmax(const value_type&, const value_type&, compare_type);\n+}\n+"}, {"sha": "3ba5e6cf4179e87bf820195ef374a2b1e4201f9e", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax_element/1.cc", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2F1.cc?ref=f6547b681842afcc1096d804f161cb83806178c2", "patch": "@@ -0,0 +1,139 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+#include <testsuite_hooks.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using std::minmax_element;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container;\n+typedef std::pair<forward_iterator_wrapper<int>, forward_iterator_wrapper<int> > pair_type;\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  int array[] = {0};\n+  Container con(array, array);\n+  pair_type p1 = minmax_element(con.begin(), con.end());\n+  VERIFY( p1.first.ptr == array );\n+  VERIFY( p1.second.ptr == array );\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int array[] = {0};\n+  Container con(array, array + 1);\n+  pair_type p1 = minmax_element(con.begin(), con.end());\n+  VERIFY( p1.first.ptr == array );\n+  VERIFY( p1.second.ptr == array );\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  int array[] = {0, 3};\n+  Container con(array, array + 2);\n+  pair_type p1 = minmax_element(con.begin(), con.end());\n+  VERIFY( p1.first.ptr == array );\n+  VERIFY( p1.second.ptr == array + 1 );\n+}\n+\n+void\n+test4()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  int array[] = {3, 0};\n+  Container con(array, array + 2);\n+  pair_type p1 = minmax_element(con.begin(), con.end());\n+  VERIFY( p1.first.ptr == array + 1 );\n+  VERIFY( p1.second.ptr == array );\n+}\n+\n+void\n+test5()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int array[] = {3, 3};\n+  Container con(array, array + 2);\n+  pair_type p1 = minmax_element(con.begin(), con.end());\n+  VERIFY( p1.first.ptr == array );\n+  VERIFY( p1.second.ptr == array + 1 );\n+}\n+\n+void\n+test6()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int array[] = {6, 3, 0, 2, 6, 4, 0};\n+  Container con(array, array + 7);\n+  pair_type p1 = minmax_element(con.begin(), con.end());\n+  VERIFY( p1.first.ptr == array + 2 );\n+  VERIFY( p1.second.ptr == array + 4 );\n+}\n+\n+void\n+test7()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int array[] = {4, 4, 4, 6, 6, 6, 1, 1, 0, 0, 0, 2, 2};\n+  Container con(array, array + 13);\n+  pair_type p1 = minmax_element(con.begin(), con.end());\n+  VERIFY( p1.first.ptr == array + 8 );\n+  VERIFY( p1.second.ptr == array + 5 );\n+}\n+\n+void\n+test8()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int array[] = {1, 7, 5, 5, 10, 1, 0, 0, 8, 4, 4, 0, 10, 10, 10, 1};\n+  Container con(array, array + 16);\n+  pair_type p1 = minmax_element(con.begin(), con.end());\n+  VERIFY( p1.first.ptr == array + 6 );\n+  VERIFY( p1.second.ptr == array + 14 );\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+  test6();\n+  test7();\n+  test8();\n+  return 0;\n+}"}, {"sha": "0067f39019f0c85908d7543aa3001052aacefcd5", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax_element/check_type.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2Fcheck_type.cc?ref=f6547b681842afcc1096d804f161cb83806178c2", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+std::pair<forward_iterator_wrapper<S>, forward_iterator_wrapper<S> >\n+test1(forward_iterator_wrapper<S>& s)\n+{ return std::minmax_element(s,s); }\n+\n+std::pair<forward_iterator_wrapper<X>, forward_iterator_wrapper<X> >\n+test2(forward_iterator_wrapper<X>& x)\n+{ return std::minmax_element(x,x,predicate); }"}, {"sha": "5f50b68cd4645af7f7f71a95e873420beae5168a", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax_element/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=f6547b681842afcc1096d804f161cb83806178c2", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-11-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template pair<iterator_type, iterator_type>\n+    minmax_element(iterator_type, iterator_type);\n+  template pair<iterator_type, iterator_type>\n+    minmax_element(iterator_type, iterator_type, compare_type);\n+}"}, {"sha": "5ef0cc7482baf57b5c05c37a03a0ebe7e84d66ad", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax_element/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6547b681842afcc1096d804f161cb83806178c2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=f6547b681842afcc1096d804f161cb83806178c2", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-11-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template pair<iterator_type, iterator_type>\n+    minmax_element(iterator_type, iterator_type);\n+  template pair<iterator_type, iterator_type>\n+    minmax_element(iterator_type, iterator_type, compare_type);\n+}\n+"}]}