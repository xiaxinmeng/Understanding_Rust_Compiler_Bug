{"sha": "7ae0dcd8c0bfb6f31b731a6912f058562faf7d82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FlMGRjZDhjMGJmYjZmMzFiNzMxYTY5MTJmMDU4NTYyZmFmN2Q4Mg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonber@gnat.com", "date": "2001-12-05T20:00:50Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-12-05T20:00:50Z"}, "message": "sem_ch3.adb (Build_Derived_Concurrent_Type): If derivation imposes a constraint...\n\n\t* sem_ch3.adb (Build_Derived_Concurrent_Type): If derivation imposes a\n\tconstraint, introduce explicit subtype declaration and derive from it.\n\n\t* sem_ch3.adb: Minor reformatting\n\nFrom-SVN: r47687", "tree": {"sha": "3ff63c73f7080e0f3631fa62391761700f3ad7ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ff63c73f7080e0f3631fa62391761700f3ad7ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ae0dcd8c0bfb6f31b731a6912f058562faf7d82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae0dcd8c0bfb6f31b731a6912f058562faf7d82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ae0dcd8c0bfb6f31b731a6912f058562faf7d82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae0dcd8c0bfb6f31b731a6912f058562faf7d82/comments", "author": null, "committer": null, "parents": [{"sha": "c9a4817dcf17a0832b381379932d11ff05364da0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9a4817dcf17a0832b381379932d11ff05364da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9a4817dcf17a0832b381379932d11ff05364da0"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "2f6dc9a707f2326cb5ab6be10186e3d8ffd11404", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae0dcd8c0bfb6f31b731a6912f058562faf7d82/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae0dcd8c0bfb6f31b731a6912f058562faf7d82/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7ae0dcd8c0bfb6f31b731a6912f058562faf7d82", "patch": "@@ -1,3 +1,10 @@\n+2001-12-05  Ed Schonberg <schonber@gnat.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Concurrent_Type): If derivation imposes a\n+\tconstraint, introduce explicit subtype declaration and derive from it.\n+\t\n+\t* sem_ch3.adb: Minor reformatting\n+\n 2001-12-05  Robert Dewar <dewar@gnat.com>\n \n \t* checks.adb (Determine_Range): Increase cache size for checks. "}, {"sha": "975fd7c4ef1c1c4fc1d1ae739b813e4e91e82871", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae0dcd8c0bfb6f31b731a6912f058562faf7d82/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae0dcd8c0bfb6f31b731a6912f058562faf7d82/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7ae0dcd8c0bfb6f31b731a6912f058562faf7d82", "patch": "@@ -657,8 +657,8 @@ package body Sem_Ch3 is\n       return        Entity_Id\n    is\n       Anon_Type : constant Entity_Id :=\n-        Create_Itype (E_Anonymous_Access_Type, Related_Nod,\n-          Scope_Id => Scope (Current_Scope));\n+                    Create_Itype (E_Anonymous_Access_Type, Related_Nod,\n+                                  Scope_Id => Scope (Current_Scope));\n       Desig_Type : Entity_Id;\n \n    begin\n@@ -2979,9 +2979,10 @@ package body Sem_Ch3 is\n       Disc_Spec    : Node_Id;\n       Old_Disc     : Entity_Id;\n       New_Disc     : Entity_Id;\n+\n       Constraint_Present : constant Boolean :=\n-         Nkind (Subtype_Indication (Type_Definition (N))) =\n-           N_Subtype_Indication;\n+                             Nkind (Subtype_Indication (Type_Definition (N)))\n+                                                     = N_Subtype_Indication;\n \n    begin\n       Set_Girder_Constraint (Derived_Type, No_Elist);\n@@ -2995,17 +2996,42 @@ package body Sem_Ch3 is\n          New_Scope (Derived_Type);\n          Check_Or_Process_Discriminants (N, Derived_Type);\n          End_Scope;\n+\n+      elsif Constraint_Present then\n+\n+         --  Build constrained subtype and derive from it\n+\n+         declare\n+            Loc  : constant Source_Ptr := Sloc (N);\n+            Anon : Entity_Id :=\n+                     Make_Defining_Identifier (Loc,\n+                       New_External_Name (Chars (Derived_Type), 'T'));\n+            Decl : Node_Id;\n+\n+         begin\n+            Decl :=\n+              Make_Subtype_Declaration (Loc,\n+                Defining_Identifier => Anon,\n+                Subtype_Indication =>\n+                  New_Copy_Tree (Subtype_Indication (Type_Definition (N))));\n+            Insert_Before (N, Decl);\n+            Rewrite (Subtype_Indication (Type_Definition (N)),\n+              New_Occurrence_Of (Anon, Loc));\n+            Analyze (Decl);\n+            Set_Analyzed (Derived_Type, False);\n+            Analyze (N);\n+            return;\n+         end;\n       end if;\n \n       --  All attributes are inherited from parent. In particular,\n       --  entries and the corresponding record type are the same.\n       --  Discriminants may be renamed, and must be treated separately.\n \n       Set_Has_Discriminants\n-                       (Derived_Type, Has_Discriminants (Parent_Type));\n+        (Derived_Type, Has_Discriminants         (Parent_Type));\n       Set_Corresponding_Record_Type\n-                       (Derived_Type, Corresponding_Record_Type\n-                                                        (Parent_Type));\n+        (Derived_Type, Corresponding_Record_Type (Parent_Type));\n \n       if Constraint_Present then\n \n@@ -3021,15 +3047,17 @@ package body Sem_Ch3 is\n             New_Disc   := First_Discriminant (Derived_Type);\n             Disc_Spec  := First (Discriminant_Specifications (N));\n             D_Constraint :=\n-              First (Constraints (\n-                Constraint (Subtype_Indication (Type_Definition (N)))));\n+              First\n+                (Constraints\n+                  (Constraint (Subtype_Indication (Type_Definition (N)))));\n \n             while Present (Old_Disc) and then Present (Disc_Spec) loop\n \n                if Nkind (Discriminant_Type (Disc_Spec)) /=\n-                 N_Access_Definition\n+                                              N_Access_Definition\n                then\n                   Analyze (Discriminant_Type (Disc_Spec));\n+\n                   if not Subtypes_Statically_Compatible (\n                              Etype (Discriminant_Type (Disc_Spec)),\n                                Etype (Old_Disc))\n@@ -3086,6 +3114,10 @@ package body Sem_Ch3 is\n \n       else\n          Set_First_Entity (Derived_Type, First_Entity (Parent_Type));\n+         if Has_Discriminants (Parent_Type) then\n+            Set_Discriminant_Constraint (\n+              Derived_Type, Discriminant_Constraint (Parent_Type));\n+         end if;\n       end if;\n \n       Set_Last_Entity  (Derived_Type, Last_Entity  (Parent_Type));"}]}