{"sha": "e053f96a9f57bb73a47bdd96512ed1c83ff84c04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA1M2Y5NmE5ZjU3YmI3M2E0N2JkZDk2NTEyZWQxYzgzZmY4NGMwNA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-28T12:46:37Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-29T13:42:00Z"}, "message": "aarch64: Use RTL builtins for [su]mlsl_lane[q] intrinsics\n\nRewrite [su]mlsl_lane[q] Neon intrinsics to use RTL builtins rather\nthan inline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-01-28  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mlsl_lane[q]\n\tbuiltin generator macros.\n\t* config/aarch64/aarch64-simd.md (aarch64_vec_<su>mlsl_lane<Qlane>):\n\tDefine.\n\t* config/aarch64/arm_neon.h (vmlsl_lane_s16): Use RTL builtin\n\tinstead of inline asm.\n\t(vmlsl_lane_s32): Likewise.\n\t(vmlsl_lane_u16): Likewise.\n\t(vmlsl_lane_u32): Likewise.\n\t(vmlsl_laneq_s16): Likewise.\n\t(vmlsl_laneq_s32): Likewise.\n\t(vmlsl_laneq_u16): Likewise.\n\t(vmlsl_laneq_u32): Likewise.", "tree": {"sha": "eac8910c4916151be3b00c14220dab5fe0212b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eac8910c4916151be3b00c14220dab5fe0212b62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e053f96a9f57bb73a47bdd96512ed1c83ff84c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e053f96a9f57bb73a47bdd96512ed1c83ff84c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e053f96a9f57bb73a47bdd96512ed1c83ff84c04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e053f96a9f57bb73a47bdd96512ed1c83ff84c04/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0833e3e1ff14d2e1847373d770887b11e89a623c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0833e3e1ff14d2e1847373d770887b11e89a623c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0833e3e1ff14d2e1847373d770887b11e89a623c"}], "stats": {"total": 181, "additions": 77, "deletions": 104}, "files": [{"sha": "4913231ea55260fea1c7511a28a436e1e1e2ab20", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e053f96a9f57bb73a47bdd96512ed1c83ff84c04/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e053f96a9f57bb73a47bdd96512ed1c83ff84c04/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=e053f96a9f57bb73a47bdd96512ed1c83ff84c04", "patch": "@@ -264,6 +264,11 @@\n   BUILTIN_VD_HSI (TERNOPU_LANE, vec_umult_laneq_, 0, ALL)\n   BUILTIN_VD_HSI (QUADOPU_LANE, vec_umlal_laneq_, 0, ALL)\n \n+  BUILTIN_VD_HSI (QUADOP_LANE, vec_smlsl_lane_, 0, NONE)\n+  BUILTIN_VD_HSI (QUADOP_LANE, vec_smlsl_laneq_, 0, NONE)\n+  BUILTIN_VD_HSI (QUADOPU_LANE, vec_umlsl_lane_, 0, NONE)\n+  BUILTIN_VD_HSI (QUADOPU_LANE, vec_umlsl_laneq_, 0, NONE)\n+\n   BUILTIN_VSD_HSI (BINOP, sqdmull, 0, NONE)\n   BUILTIN_VSD_HSI (TERNOP_LANE, sqdmull_lane, 0, NONE)\n   BUILTIN_VSD_HSI (TERNOP_LANE, sqdmull_laneq, 0, NONE)"}, {"sha": "adeec028d49f06156a5e84ce4dd83dbd6f151474", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e053f96a9f57bb73a47bdd96512ed1c83ff84c04/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e053f96a9f57bb73a47bdd96512ed1c83ff84c04/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=e053f96a9f57bb73a47bdd96512ed1c83ff84c04", "patch": "@@ -2082,6 +2082,26 @@\n   [(set_attr \"type\" \"neon_mla_<Vetype>_scalar_long\")]\n )\n \n+(define_insn \"aarch64_vec_<su>mlsl_lane<Qlane>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+   (minus:<VWIDE>\n+     (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n+     (mult:<VWIDE>\n+       (ANY_EXTEND:<VWIDE>\n+\t (match_operand:<VCOND> 2 \"register_operand\" \"w\"))\n+       (ANY_EXTEND:<VWIDE>\n+\t (vec_duplicate:<VCOND>\n+\t   (vec_select:<VEL>\n+\t     (match_operand:VDQHS 3 \"register_operand\" \"<vwx>\")\n+\t     (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))))))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = aarch64_endian_lane_rtx (<MODE>mode, INTVAL (operands[4]));\n+    return \"<su>mlsl\\\\t%0.<Vwtype>, %2.<Vcondtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_mla_<Vetype>_scalar_long\")]\n+)\n+\n ;; FP vector operations.\n ;; AArch64 AdvSIMD supports single-precision (32-bit) and \n ;; double-precision (64-bit) floating-point data types and arithmetic as"}, {"sha": "2a71ca9aa3c8c4095e99aa08c48e583f037a41ed", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 52, "deletions": 104, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e053f96a9f57bb73a47bdd96512ed1c83ff84c04/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e053f96a9f57bb73a47bdd96512ed1c83ff84c04/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=e053f96a9f57bb73a47bdd96512ed1c83ff84c04", "patch": "@@ -8068,117 +8068,65 @@ vmlsl_high_u32 (uint64x2_t __a, uint32x4_t __b, uint32x4_t __c)\n   return __builtin_aarch64_umlsl_hiv4si_uuuu (__a, __b, __c);\n }\n \n-#define vmlsl_lane_s16(a, b, c, d)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x4_t c_ = (c);                                              \\\n-       int16x4_t b_ = (b);                                              \\\n-       int32x4_t a_ = (a);                                              \\\n-       int32x4_t result;                                                \\\n-       __asm__ (\"smlsl %0.4s, %2.4h, %3.h[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlsl_lane_s16 (int32x4_t __a, int16x4_t __b, int16x4_t __v, const int __lane)\n+{\n+  return __builtin_aarch64_vec_smlsl_lane_v4hi (__a, __b, __v, __lane);\n+}\n \n-#define vmlsl_lane_s32(a, b, c, d)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x2_t c_ = (c);                                              \\\n-       int32x2_t b_ = (b);                                              \\\n-       int64x2_t a_ = (a);                                              \\\n-       int64x2_t result;                                                \\\n-       __asm__ (\"smlsl %0.2d, %2.2s, %3.s[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlsl_lane_s32 (int64x2_t __a, int32x2_t __b, int32x2_t __v, const int __lane)\n+{\n+  return __builtin_aarch64_vec_smlsl_lane_v2si (__a, __b, __v, __lane);\n+}\n \n-#define vmlsl_lane_u16(a, b, c, d)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x4_t c_ = (c);                                             \\\n-       uint16x4_t b_ = (b);                                             \\\n-       uint32x4_t a_ = (a);                                             \\\n-       uint32x4_t result;                                               \\\n-       __asm__ (\"umlsl %0.4s, %2.4h, %3.h[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlsl_lane_u16 (uint32x4_t __a, uint16x4_t __b, uint16x4_t __v,\n+                const int __lane)\n+{\n+  return __builtin_aarch64_vec_umlsl_lane_v4hi_uuuus (__a, __b, __v, __lane);\n+}\n \n-#define vmlsl_lane_u32(a, b, c, d)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x2_t c_ = (c);                                             \\\n-       uint32x2_t b_ = (b);                                             \\\n-       uint64x2_t a_ = (a);                                             \\\n-       uint64x2_t result;                                               \\\n-       __asm__ (\"umlsl %0.2d, %2.2s, %3.s[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlsl_lane_u32 (uint64x2_t __a, uint32x2_t __b, uint32x2_t __v,\n+                const int __lane)\n+{\n+  return __builtin_aarch64_vec_umlsl_lane_v2si_uuuus (__a, __b, __v, __lane);\n+}\n \n-#define vmlsl_laneq_s16(a, b, c, d)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x8_t c_ = (c);                                              \\\n-       int16x4_t b_ = (b);                                              \\\n-       int32x4_t a_ = (a);                                              \\\n-       int32x4_t result;                                                \\\n-       __asm__ (\"smlsl %0.4s, %2.4h, %3.h[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlsl_laneq_s16 (int32x4_t __a, int16x4_t __b, int16x8_t __v, const int __lane)\n+{\n+  return __builtin_aarch64_vec_smlsl_laneq_v4hi (__a, __b, __v, __lane);\n+}\n \n-#define vmlsl_laneq_s32(a, b, c, d)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x4_t c_ = (c);                                              \\\n-       int32x2_t b_ = (b);                                              \\\n-       int64x2_t a_ = (a);                                              \\\n-       int64x2_t result;                                                \\\n-       __asm__ (\"smlsl %0.2d, %2.2s, %3.s[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlsl_laneq_s32 (int64x2_t __a, int32x2_t __b, int32x4_t __v, const int __lane)\n+{\n+  return __builtin_aarch64_vec_smlsl_laneq_v2si (__a, __b, __v, __lane);\n+}\n \n-#define vmlsl_laneq_u16(a, b, c, d)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x8_t c_ = (c);                                             \\\n-       uint16x4_t b_ = (b);                                             \\\n-       uint32x4_t a_ = (a);                                             \\\n-       uint32x4_t result;                                               \\\n-       __asm__ (\"umlsl %0.4s, %2.4h, %3.h[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlsl_laneq_u16 (uint32x4_t __a, uint16x4_t __b, uint16x8_t __v,\n+                 const int __lane)\n+{\n+  return __builtin_aarch64_vec_umlsl_laneq_v4hi_uuuus (__a, __b, __v, __lane);\n+}\n \n-#define vmlsl_laneq_u32(a, b, c, d)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x4_t c_ = (c);                                             \\\n-       uint32x2_t b_ = (b);                                             \\\n-       uint64x2_t a_ = (a);                                             \\\n-       uint64x2_t result;                                               \\\n-       __asm__ (\"umlsl %0.2d, %2.2s, %3.s[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlsl_laneq_u32 (uint64x2_t __a, uint32x2_t __b, uint32x4_t __v,\n+                 const int __lane)\n+{\n+  return __builtin_aarch64_vec_umlsl_laneq_v2si_uuuus (__a, __b, __v, __lane);\n+}\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))"}]}