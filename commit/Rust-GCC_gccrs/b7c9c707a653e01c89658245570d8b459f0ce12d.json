{"sha": "b7c9c707a653e01c89658245570d8b459f0ce12d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdjOWM3MDdhNjUzZTAxYzg5NjU4MjQ1NTcwZDhiNDU5ZjBjZTEyZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-24T23:14:43Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-24T23:14:43Z"}, "message": "(shorten_compare): Correct typo from last change.\n\nFrom-SVN: r6157", "tree": {"sha": "4acefae027ac6b42e1d5d3305d9765b4b647a8fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4acefae027ac6b42e1d5d3305d9765b4b647a8fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7c9c707a653e01c89658245570d8b459f0ce12d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7c9c707a653e01c89658245570d8b459f0ce12d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7c9c707a653e01c89658245570d8b459f0ce12d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7c9c707a653e01c89658245570d8b459f0ce12d/comments", "author": null, "committer": null, "parents": [{"sha": "535e79835a08d869879f402c99694ece98ca769e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535e79835a08d869879f402c99694ece98ca769e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535e79835a08d869879f402c99694ece98ca769e"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "4e80cd8dad42632d9827e2a0703f1be88c1673e6", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7c9c707a653e01c89658245570d8b459f0ce12d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7c9c707a653e01c89658245570d8b459f0ce12d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b7c9c707a653e01c89658245570d8b459f0ce12d", "patch": "@@ -899,15 +899,15 @@ check_format_info (info, params)\n \t\t&& fci->pointer_count > 0)\n \t  /* Don't warn about differences merely in signedness.  */\n \t  && !(TREE_CODE (wanted_type) == INTEGER_TYPE\n-\t       && TREE_CODE (cur_type) == INTEGER_TYPE\n+\t       && TREE_CODE (TYPE_MAIN_VARIANT (cur_type)) == INTEGER_TYPE\n \t       && (TREE_UNSIGNED (wanted_type)\n \t\t   ? wanted_type == (cur_type = unsigned_type (cur_type))\n \t\t   : wanted_type == (cur_type = signed_type (cur_type))))\n \t  /* Likewise, \"signed char\", \"unsigned char\" and \"char\" are\n \t     equivalent but the above test won't consider them equivalent.  */\n \t  && ! (wanted_type == char_type_node\n-\t\t&& (cur_type == signed_char_type_node\n-\t\t    || cur_type == unsigned_char_type_node)))\n+\t\t&& (TYPE_MAIN_VARIANT (cur_type) == signed_char_type_node\n+\t\t    || TYPE_MAIN_VARIANT (cur_type) == unsigned_char_type_node)))\n \t{\n \t  register char *this;\n \t  register char *that;\n@@ -1458,7 +1458,7 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t  type = unsigned_type (type);\n \t}\n \n-      if (!max_gt && !unsignedp0 && TREE_CODE (primop1) != INTEGER_CST)\n+      if (!max_gt && !unsignedp0 && TREE_CODE (primop0) != INTEGER_CST)\n \t{\n \t  /* This is the case of (char)x >?< 0x80, which people used to use\n \t     expecting old C compilers to change the 0x80 into -0x80.  */\n@@ -1468,7 +1468,7 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t    warning (\"comparison is always 1 due to limited range of data type\");\n \t}\n \n-      if (!min_lt && unsignedp0 && TREE_CODE (primop1) != INTEGER_CST)\n+      if (!min_lt && unsignedp0 && TREE_CODE (primop0) != INTEGER_CST)\n \t{\n \t  /* This is the case of (unsigned char)x >?< -1 or < 0.  */\n \t  if (val == integer_zero_node)"}]}