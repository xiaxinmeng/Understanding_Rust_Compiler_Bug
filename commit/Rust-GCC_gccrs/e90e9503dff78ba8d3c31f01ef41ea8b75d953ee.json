{"sha": "e90e9503dff78ba8d3c31f01ef41ea8b75d953ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwZTk1MDNkZmY3OGJhOGQzYzMxZjAxZWY0MWVhOGI3NWQ5NTNlZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2016-04-19T13:06:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-19T13:06:01Z"}, "message": "sem_res.adb (Within_Subprogram_Call): Detect also nodes that appear in entry calls.\n\n2016-04-19  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_res.adb (Within_Subprogram_Call): Detect\n\talso nodes that appear in entry calls.\n\t(Resolve_Actuals, Insert_Default): Propagate\n\tdimension information if any, from default expression to the\n\tcopy that appears in the list of actuals.\n\t* uintp.ads: minor whitespace fix in comment.\n\t* sem_prag.adb, stringt.adb, inline.adb, lib-xref-spark_specific.adb:\n\tMinor code cleanup.\n\t* set_targ.adb (Set_Targ): convert directly from\n\tNatural to Pos, without intermediate conversion to Int.\n\nFrom-SVN: r235197", "tree": {"sha": "444ab39e0c86868ee041112f28077983a34e4dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/444ab39e0c86868ee041112f28077983a34e4dd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db7e372172d0753acae272572f852eb6cd8135f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7e372172d0753acae272572f852eb6cd8135f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7e372172d0753acae272572f852eb6cd8135f4"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "5be755baf5a3eaa66ccbd60908f60c8062881e40", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e90e9503dff78ba8d3c31f01ef41ea8b75d953ee", "patch": "@@ -1,3 +1,16 @@\n+2016-04-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_res.adb (Within_Subprogram_Call): Detect\n+\talso nodes that appear in entry calls.\n+\t(Resolve_Actuals, Insert_Default): Propagate\n+\tdimension information if any, from default expression to the\n+\tcopy that appears in the list of actuals.\n+\t* uintp.ads: minor whitespace fix in comment.\n+\t* sem_prag.adb, stringt.adb, inline.adb, lib-xref-spark_specific.adb:\n+\tMinor code cleanup.\n+\t* set_targ.adb (Set_Targ): convert directly from\n+\tNatural to Pos, without intermediate conversion to Int.\n+\n 2016-04-19  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_ch6.adb (Process_Formals): Mark suspicious reference to"}, {"sha": "7944604ae61d4f80d9a1edeb5f0eb392e8b9fd97", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=e90e9503dff78ba8d3c31f01ef41ea8b75d953ee", "patch": "@@ -2242,7 +2242,7 @@ package body Inline is\n       Lab_Decl : Node_Id;\n       Lab_Id   : Node_Id;\n       New_A    : Node_Id;\n-      Num_Ret  : Int := 0;\n+      Num_Ret  : Nat := 0;\n       Ret_Type : Entity_Id;\n \n       Targ : Node_Id;"}, {"sha": "dcd5e5620a17a06ddcce41088e5213317a908d51", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=e90e9503dff78ba8d3c31f01ef41ea8b75d953ee", "patch": "@@ -870,8 +870,8 @@ package body SPARK_Specific is\n                Line := 0;\n                Col  := 0;\n             else\n-               Line := Int (Get_Logical_Line_Number (Ref_Entry.Def));\n-               Col  := Int (Get_Column_Number (Ref_Entry.Def));\n+               Line := Nat (Get_Logical_Line_Number (Ref_Entry.Def));\n+               Col  := Nat (Get_Column_Number (Ref_Entry.Def));\n             end if;\n \n             --  References to constant objects without variable inputs (see\n@@ -895,9 +895,9 @@ package body SPARK_Specific is\n                Entity_Col  => Col,\n                File_Num    => Dependency_Num (Ref.Lun),\n                Scope_Num   => Get_Scope_Num (Ref.Ref_Scope),\n-               Line        => Int (Get_Logical_Line_Number (Ref.Loc)),\n+               Line        => Nat (Get_Logical_Line_Number (Ref.Loc)),\n                Rtype       => Typ,\n-               Col         => Int (Get_Column_Number (Ref.Loc))));\n+               Col         => Nat (Get_Column_Number (Ref.Loc))));\n          end;\n       end loop;\n "}, {"sha": "e965976a69135501df880ae86e9c2fae2503d4ff", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e90e9503dff78ba8d3c31f01ef41ea8b75d953ee", "patch": "@@ -6698,7 +6698,7 @@ package body Sem_Prag is\n                declare\n                   Str   : constant String_Id :=\n                             Strval (Get_Pragma_Arg (Arg2));\n-                  Len   : constant Int := String_Length (Str);\n+                  Len   : constant Nat := String_Length (Str);\n                   Cont  : Boolean;\n                   Ptr   : Nat;\n                   CC    : Char_Code;\n@@ -21237,7 +21237,7 @@ package body Sem_Prag is\n                Check_Arg_Count (1);\n \n                if Nkind (A) = N_String_Literal then\n-                  S   := Strval (A);\n+                  S := Strval (A);\n \n                   declare\n                      Slen    : constant Natural := Natural (String_Length (S));\n@@ -28802,10 +28802,10 @@ package body Sem_Prag is\n \n    procedure Set_Encoded_Interface_Name (E : Entity_Id; S : Node_Id) is\n       Str : constant String_Id := Strval (S);\n-      Len : constant Int       := String_Length (Str);\n+      Len : constant Nat       := String_Length (Str);\n       CC  : Char_Code;\n       C   : Character;\n-      J   : Int;\n+      J   : Pos;\n \n       Hex : constant array (0 .. 15) of Character := \"0123456789abcdef\";\n "}, {"sha": "0bac1eb181656e972f5a3c9106b2af6c8fea8b81", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e90e9503dff78ba8d3c31f01ef41ea8b75d953ee", "patch": "@@ -3379,6 +3379,10 @@ package body Sem_Res is\n                  New_Scope => Current_Scope,\n                  New_Sloc  => Loc);\n \n+            --  Propagate dimension information, if any.\n+\n+            Copy_Dimensions (Default_Value (F), Actval);\n+\n             if Is_Concurrent_Type (Scope (Nam))\n               and then Has_Discriminants (Scope (Nam))\n             then\n@@ -6882,7 +6886,7 @@ package body Sem_Res is\n          --  Determine whether an arbitrary node appears in a check node\n \n          function Within_Subprogram_Call (Nod : Node_Id) return Boolean;\n-         --  Determine whether an arbitrary node appears in a procedure call\n+         --  Determine whether an arbitrary node appears in a subprogram call\n \n          function Within_Volatile_Function (Id : Entity_Id) return Boolean;\n          --  Determine whether an arbitrary entity appears in a volatile\n@@ -6960,7 +6964,8 @@ package body Sem_Res is\n             Par := Nod;\n             while Present (Par) loop\n                if Nkind_In (Par, N_Function_Call,\n-                                 N_Procedure_Call_Statement)\n+                                 N_Procedure_Call_Statement,\n+                                 N_Entry_Call_Statement)\n                then\n                   return True;\n "}, {"sha": "e83ccb41c4ab8e6d39cb125b2d8c025ec8f141b4", "filename": "gcc/ada/set_targ.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Fset_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Fset_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.adb?ref=e90e9503dff78ba8d3c31f01ef41ea8b75d953ee", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2013-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2013-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -946,21 +946,21 @@ begin\n                T : FPT_Mode_Entry renames\n                  FPT_Mode_Table (FPT_Mode_Index_For (S_Float));\n             begin\n-               Float_Size := Int (T.SIZE);\n+               Float_Size := Pos (T.SIZE);\n             end;\n \n             declare\n                T : FPT_Mode_Entry renames\n                  FPT_Mode_Table (FPT_Mode_Index_For (S_Long_Float));\n             begin\n-               Double_Size := Int (T.SIZE);\n+               Double_Size := Pos (T.SIZE);\n             end;\n \n             declare\n                T : FPT_Mode_Entry renames\n                  FPT_Mode_Table (FPT_Mode_Index_For (S_Long_Long_Float));\n             begin\n-               Long_Double_Size := Int (T.SIZE);\n+               Long_Double_Size := Pos (T.SIZE);\n             end;\n \n          end if;"}, {"sha": "175b80c257d1b45b890d21f8165c9c495ddf9581", "filename": "gcc/ada/stringt.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Fstringt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Fstringt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.adb?ref=e90e9503dff78ba8d3c31f01ef41ea8b75d953ee", "patch": "@@ -241,7 +241,7 @@ package body Stringt is\n       --  String_Chars table all at once.\n \n       S_First  : constant Int := Strings.Table (S).String_Index;\n-      S_Len    : constant Int := String_Length (S);\n+      S_Len    : constant Nat := String_Length (S);\n       Old_Last : constant Int := String_Chars.Last;\n       New_Last : constant Int := Old_Last + S_Len;\n "}, {"sha": "a07fa08303919656ae0ebb573dcac43e768fd98e", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90e9503dff78ba8d3c31f01ef41ea8b75d953ee/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=e90e9503dff78ba8d3c31f01ef41ea8b75d953ee", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -431,7 +431,7 @@ private\n \n    --  Base is defined to allow efficient execution of the primitive operations\n    --  (a0, b0, c0) defined in the section \"The Classical Algorithms\"\n-   --  (sec. 4.3.1) of Donald Knuth's \"The Art of Computer  Programming\",\n+   --  (sec. 4.3.1) of Donald Knuth's \"The Art of Computer Programming\",\n    --  Vol. 2. These algorithms are used in this package. In particular,\n    --  the product of two single digits in this base fits in a 32-bit integer.\n "}]}