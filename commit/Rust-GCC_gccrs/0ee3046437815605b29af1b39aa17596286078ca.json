{"sha": "0ee3046437815605b29af1b39aa17596286078ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVlMzA0NjQzNzgxNTYwNWIyOWFmMWIzOWFhMTc1OTYyODYwNzhjYQ==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2007-04-06T09:23:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:23:12Z"}, "message": "i-cstrea.ads: (fopen): Add encoding parameter.\n\n2007-04-06  Pascal Obry  <obry@adacore.com>\n\n\t* i-cstrea.ads: (fopen): Add encoding parameter.\n\t(freopen): Idem.\n\tChange reference from a-sysdep.c to sysdep.c in comment.\n\tUpdate copyright notice.\n\tThis set of patch add support for the encoding form parameter.\n\n\t* mingw32.h (S2WSU): New macro to convert from a string to a\n\twide-string using the UTF-8 encoding. The S2WS macro supports now only\n\tstandard 8bits encoding.\n\t(WS2SU): As above but converting from wide-sring to string.\n\tThis is needed as it is necessary to have access to both versions in the\n\truntime for the form parameter encoding support.\n\tThis set of patch add support for the encoding form parameter.\n\t(S2WS): Improve implementation to handle cases where the filename is not\n\tUTF-8 encoded. In this case we default to using the current code page\n\tfor the conversion.\n\n\t* s-crtl-vms64.ads, s-crtl.ads (Filename_Encoding): New enumeration\n\ttype (UTF8, ASCII_8bits). This enumeration has a rep clause to match\n\tthe constants defined in adaint.h.\n\t(fopen): Add encoding parameter.\n\t(freopen): Idem.\n\n\t* s-ficobl.ads (AFCB): Add Encoding field to record the filename\n\tencoding. This is needed for the Reset routine (freopen low level-call).\n\n\t* s-fileio.adb (Open): Decode encoding form parameter and set the\n\tcorresponding encoding value into AFCB structure.\n\t(Reset): Pass the encoding value to freopen.\n\t(Close): Move the call to Lock_Task to the beginning of the procedure.\n\nFrom-SVN: r123578", "tree": {"sha": "6b7e25930e8254d2db9568b0aa6ac5b49373b92d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b7e25930e8254d2db9568b0aa6ac5b49373b92d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ee3046437815605b29af1b39aa17596286078ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee3046437815605b29af1b39aa17596286078ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee3046437815605b29af1b39aa17596286078ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee3046437815605b29af1b39aa17596286078ca/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bdd76e8810d20d8f033c61c83045560f8942163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bdd76e8810d20d8f033c61c83045560f8942163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bdd76e8810d20d8f033c61c83045560f8942163"}], "stats": {"total": 129, "additions": 93, "deletions": 36}, "files": [{"sha": "ac5e80f45008686c8f6360fd188b3db201f1ac8d", "filename": "gcc/ada/i-cstrea.ads", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee3046437815605b29af1b39aa17596286078ca/gcc%2Fada%2Fi-cstrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee3046437815605b29af1b39aa17596286078ca/gcc%2Fada%2Fi-cstrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cstrea.ads?ref=0ee3046437815605b29af1b39aa17596286078ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1995-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -105,10 +105,14 @@ package Interfaces.C_Streams is\n \n    function fileno (stream : FILEs) return int;\n \n-   function fopen (filename : chars; Mode : chars) return FILEs\n+   function fopen\n+     (filename : chars;\n+      mode     : chars;\n+      encoding : System.CRTL.Filename_Encoding := System.CRTL.UTF8)\n+      return FILEs\n      renames System.CRTL.fopen;\n    --  Note: to maintain target independence, use text_translation_required,\n-   --  a boolean variable defined in a-sysdep.c to deal with the target\n+   --  a boolean variable defined in sysdep.c to deal with the target\n    --  dependent text translation requirement. If this variable is set,\n    --  then b/t should be appended to the standard mode argument to set\n    --  the text translation mode off or on as required.\n@@ -140,14 +144,16 @@ package Interfaces.C_Streams is\n    function freopen\n      (filename : chars;\n       mode     : chars;\n-      stream   : FILEs)\n-      return     FILEs renames System.CRTL.freopen;\n+      stream   : FILEs;\n+      encoding : System.CRTL.Filename_Encoding := System.CRTL.UTF8)\n+      return FILEs\n+     renames System.CRTL.freopen;\n \n    function fseek\n      (stream : FILEs;\n       offset : long;\n-      origin : int)\n-      return   int renames System.CRTL.fseek;\n+      origin : int) return int\n+     renames System.CRTL.fseek;\n \n    function ftell (stream : FILEs) return long\n      renames System.CRTL.ftell;\n@@ -156,8 +162,7 @@ package Interfaces.C_Streams is\n      (buffer : voids;\n       size   : size_t;\n       count  : size_t;\n-      stream : FILEs)\n-      return   size_t;\n+      stream : FILEs) return size_t;\n \n    function isatty (handle : int) return int renames System.CRTL.isatty;\n \n@@ -170,8 +175,7 @@ package Interfaces.C_Streams is\n      (stream : FILEs;\n       buffer : chars;\n       mode   : int;\n-      size   : size_t)\n-      return   int;\n+      size   : size_t) return int;\n \n    procedure tmpnam (string : chars) renames System.CRTL.tmpnam;\n    --  The parameter must be a pointer to a string buffer of at least L_tmpnam"}, {"sha": "6637fd1f9d7302a290702114a0428498e6c1d4a1", "filename": "gcc/ada/mingw32.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee3046437815605b29af1b39aa17596286078ca/gcc%2Fada%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee3046437815605b29af1b39aa17596286078ca/gcc%2Fada%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmingw32.h?ref=0ee3046437815605b29af1b39aa17596286078ca", "patch": "@@ -71,13 +71,19 @@\n    the proper translations using the UTF-8 encoding.  */\n \n #ifdef GNAT_UNICODE_SUPPORT\n+#define S2WSU(wstr,str,len) \\\n+   MultiByteToWideChar (CP_UTF8,0,str,-1,wstr,len)\n+#define WS2SU(str,wstr,len) \\\n+   WideCharToMultiByte (CP_UTF8,0,wstr,-1,str,len,NULL,NULL)\n #define S2WS(wstr,str,len) \\\n-   MultiByteToWideChar (CP_UTF8,0,str,-1,wstr,len);\n+   MultiByteToWideChar (CP_ACP,0,str,-1,wstr,len)\n #define WS2S(str,wstr,len) \\\n-   WideCharToMultiByte (CP_UTF8,0,wstr,-1,str,len,NULL,NULL);\n+   WideCharToMultiByte (CP_ACP,0,wstr,-1,str,len,NULL,NULL)\n #else\n-#define S2WS(wstr,str,len) strncpy(wstr,str,len);\n-#define WS2S(str,wstr,len) strncpy(str,wstr,len);\n+#define S2WSU(wstr,str,len) strncpy(wstr,str,len)\n+#define WS2SU(str,wstr,len) strncpy(str,wstr,len)\n+#define S2WS(wstr,str,len) strncpy(wstr,str,len)\n+#define WS2S(str,wstr,len) strncpy(str,wstr,len)\n #endif\n \n #include <stdlib.h>"}, {"sha": "c221d05a3a8e04dd6c36dac1bea4b84dc9503ead", "filename": "gcc/ada/s-crtl-vms64.ads", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee3046437815605b29af1b39aa17596286078ca/gcc%2Fada%2Fs-crtl-vms64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee3046437815605b29af1b39aa17596286078ca/gcc%2Fada%2Fs-crtl-vms64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-crtl-vms64.ads?ref=0ee3046437815605b29af1b39aa17596286078ca", "patch": "@@ -57,6 +57,11 @@ package System.CRTL is\n \n    type size_t is mod 2 ** Standard'Address_Size;\n \n+   type Filename_Encoding is (UTF8, ASCII_8bits);\n+   for Filename_Encoding use (UTF8 => 0, ASCII_8bits => 1);\n+   pragma Convention (C, Filename_Encoding);\n+   --  Describes the filename's encoding\n+\n    function atoi (A : System.Address) return Integer;\n    pragma Import (C, atoi, \"decc$atoi\");\n \n@@ -84,8 +89,11 @@ package System.CRTL is\n    function fgets (strng : chars; n : int; stream : FILEs) return chars;\n    pragma Import (C, fgets, \"decc$_fgets64\");\n \n-   function fopen (filename : chars; Mode : chars) return FILEs;\n-   pragma Import (C, fopen, \"decc$fopen\");\n+   function fopen\n+     (filename : chars;\n+      mode     : chars;\n+      encoding : Filename_Encoding := UTF8) return FILEs;\n+   pragma Import (C, fopen, \"__gnat_fopen\");\n \n    function fputc (C : int; stream : FILEs) return int;\n    pragma Import (C, fputc, \"decc$fputc\");\n@@ -99,9 +107,10 @@ package System.CRTL is\n    function freopen\n      (filename : chars;\n       mode     : chars;\n-      stream   : FILEs)\n+      stream   : FILEs;\n+      encoding : Filename_Encoding := UTF8)\n       return     FILEs;\n-   pragma Import (C, freopen, \"decc$freopen\");\n+   pragma Import (C, freopen, \"__gnat_freopen\");\n \n    function fseek\n      (stream : FILEs;\n@@ -175,4 +184,5 @@ package System.CRTL is\n \n    function write (fd : int; buffer : chars; nbytes : int) return int;\n    pragma Import (C, write, \"decc$write\");\n+\n end System.CRTL;"}, {"sha": "30bca62c455e350de9c836e83adaee77a492cec8", "filename": "gcc/ada/s-crtl.ads", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee3046437815605b29af1b39aa17596286078ca/gcc%2Fada%2Fs-crtl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee3046437815605b29af1b39aa17596286078ca/gcc%2Fada%2Fs-crtl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-crtl.ads?ref=0ee3046437815605b29af1b39aa17596286078ca", "patch": "@@ -57,6 +57,11 @@ package System.CRTL is\n \n    type size_t is mod 2 ** Standard'Address_Size;\n \n+   type Filename_Encoding is (UTF8, ASCII_8bits);\n+   for Filename_Encoding use (UTF8 => 0, ASCII_8bits => 1);\n+   pragma Convention (C, Filename_Encoding);\n+   --  Describes the filename's encoding\n+\n    function atoi (A : System.Address) return Integer;\n    pragma Import (C, atoi, \"atoi\");\n \n@@ -84,7 +89,10 @@ package System.CRTL is\n    function fgets (strng : chars; n : int; stream : FILEs) return chars;\n    pragma Import (C, fgets, \"fgets\");\n \n-   function fopen (filename : chars; Mode : chars) return FILEs;\n+   function fopen\n+     (filename : chars;\n+      mode     : chars;\n+      encoding : Filename_Encoding := UTF8) return FILEs;\n    pragma Import (C, fopen, \"__gnat_fopen\");\n \n    function fputc (C : int; stream : FILEs) return int;\n@@ -99,8 +107,8 @@ package System.CRTL is\n    function freopen\n      (filename : chars;\n       mode     : chars;\n-      stream   : FILEs)\n-      return     FILEs;\n+      stream   : FILEs;\n+      encoding : Filename_Encoding := UTF8) return FILEs;\n    pragma Import (C, freopen, \"__gnat_freopen\");\n \n    function fseek\n@@ -175,4 +183,5 @@ package System.CRTL is\n \n    function write (fd : int; buffer : chars; nbytes : int) return int;\n    pragma Import (C, write, \"write\");\n+\n end System.CRTL;"}, {"sha": "7c1e1c45024cda80651f5906d2fa84879074d2af", "filename": "gcc/ada/s-ficobl.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee3046437815605b29af1b39aa17596286078ca/gcc%2Fada%2Fs-ficobl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee3046437815605b29af1b39aa17596286078ca/gcc%2Fada%2Fs-ficobl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ficobl.ads?ref=0ee3046437815605b29af1b39aa17596286078ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 1992-2004 Free Software Foundation, Inc.        --\n+--            Copyright (C) 1992-2006, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,6 +39,7 @@\n \n with Ada.Streams;\n with Interfaces.C_Streams;\n+with System.CRTL;\n \n package System.File_Control_Block is\n \n@@ -90,6 +91,9 @@ package System.File_Control_Block is\n       --  files, and also for standard files (stdin, stdout, stderr). The\n       --  name is always null-terminated if it is non-null.\n \n+      Encoding : System.CRTL.Filename_Encoding;\n+      --  Encoding used to specified the filename\n+\n       Form : Pstring;\n       --  A pointer to the form string. This is the string used in the\n       --  fopen call, and must be supplied by the caller (there are no\n@@ -143,13 +147,13 @@ package System.File_Control_Block is\n    --  that the argument Control_Block is not used other than as the argument\n    --  that controls which version of AFCB_Allocate is called.\n \n-   procedure AFCB_Close (File : access AFCB) is abstract;\n+   procedure AFCB_Close (File : not null access AFCB) is abstract;\n    --  Performs any specialized close actions on a file before the file is\n    --  actually closed at the system level. This is called by Close, and\n    --  the reason we need the primitive operation is for the automatic\n    --  close operations done as part of finalization.\n \n-   procedure AFCB_Free (File : access AFCB) is abstract;\n+   procedure AFCB_Free (File : not null access AFCB) is abstract;\n    --  Frees the AFCB referenced by the given parameter. It is not necessary\n    --  to free the strings referenced by the Form and Name fields, but if the\n    --  extension has any other heap objects, they must be freed as well. This"}, {"sha": "06c0858518cdef71ba78c7c0612ee8ddc8df509a", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee3046437815605b29af1b39aa17596286078ca/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee3046437815605b29af1b39aa17596286078ca/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=0ee3046437815605b29af1b39aa17596286078ca", "patch": "@@ -199,13 +199,13 @@ package body System.File_IO is\n       Dup_Strm     : Boolean := False;\n \n    begin\n-      Check_File_Open (File);\n-      AFCB_Close (File);\n-\n       --  Take a task lock, to protect the global data value Open_Files\n \n       SSL.Lock_Task.all;\n \n+      Check_File_Open (File);\n+      AFCB_Close (File);\n+\n       --  Sever the association between the given file and its associated\n       --  external file. The given file is left closed. Do not perform system\n       --  closes on the standard input, output and error files and also do\n@@ -435,7 +435,7 @@ package body System.File_IO is\n       Amethod : Character;\n       Fopstr  : out Fopen_String)\n    is\n-      Fptr  : Positive;\n+      Fptr : Positive;\n \n    begin\n       case Mode is\n@@ -733,6 +733,9 @@ package body System.File_IO is\n       Full_Name_Len : Integer;\n       --  Length of name actually stored in Fullname\n \n+      Encoding : System.CRTL.Filename_Encoding;\n+      --  Filename encoding specified into the form parameter\n+\n    begin\n       if File_Ptr /= null then\n          raise Status_Error;\n@@ -773,6 +776,28 @@ package body System.File_IO is\n          end if;\n       end;\n \n+      --  Acquire setting of shared parameter\n+\n+      declare\n+         V1, V2 : Natural;\n+\n+      begin\n+         Form_Parameter (Formstr, \"encoding\", V1, V2);\n+\n+         if V1 = 0 then\n+            Encoding := System.CRTL.UTF8;\n+\n+         elsif Formstr (V1 .. V2) = \"utf8\" then\n+            Encoding := System.CRTL.UTF8;\n+\n+         elsif Formstr (V1 .. V2) = \"8bits\" then\n+            Encoding := System.CRTL.ASCII_8bits;\n+\n+         else\n+            raise Use_Error;\n+         end if;\n+      end;\n+\n       --  If we were given a stream (call from xxx.C_Streams.Open), then set\n       --  the full name to the given one, and skip to end of processing.\n \n@@ -928,7 +953,7 @@ package body System.File_IO is\n             --  current working directory may have changed and\n             --  we do not want to delete a different file!\n \n-            Stream := fopen (Namestr'Address, Fopstr'Address);\n+            Stream := fopen (Namestr'Address, Fopstr'Address, Encoding);\n \n             if Stream = NULL_Stream then\n                if file_exists (Namestr'Address) = 0 then\n@@ -946,18 +971,17 @@ package body System.File_IO is\n \n       File_Ptr := AFCB_Allocate (Dummy_FCB);\n \n-      File_Ptr.Is_Regular_File   := (is_regular_file\n-                                      (fileno (Stream)) /= 0);\n+      File_Ptr.Is_Regular_File   := (is_regular_file (fileno (Stream)) /= 0);\n       File_Ptr.Is_System_File    := False;\n       File_Ptr.Is_Text_File      := Text;\n       File_Ptr.Shared_Status     := Shared;\n       File_Ptr.Access_Method     := Amethod;\n       File_Ptr.Stream            := Stream;\n       File_Ptr.Form              := new String'(Formstr);\n-      File_Ptr.Name              := new String'(Fullname\n-                                                 (1 .. Full_Name_Len));\n+      File_Ptr.Name              := new String'(Fullname (1 .. Full_Name_Len));\n       File_Ptr.Mode              := Mode;\n       File_Ptr.Is_Temporary_File := Tempfile;\n+      File_Ptr.Encoding          := Encoding;\n \n       Chain_File (File_Ptr);\n       Append_Set (File_Ptr);\n@@ -1050,8 +1074,8 @@ package body System.File_IO is\n          Fopen_Mode\n            (Mode, File.Is_Text_File, False, File.Access_Method, Fopstr);\n \n-         File.Stream :=\n-           freopen (File.Name.all'Address, Fopstr'Address, File.Stream);\n+         File.Stream := freopen\n+           (File.Name.all'Address, Fopstr'Address, File.Stream, File.Encoding);\n \n          if File.Stream = NULL_Stream then\n             Close (File);"}]}