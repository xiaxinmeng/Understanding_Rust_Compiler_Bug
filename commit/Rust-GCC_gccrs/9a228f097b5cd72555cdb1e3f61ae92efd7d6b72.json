{"sha": "9a228f097b5cd72555cdb1e3f61ae92efd7d6b72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEyMjhmMDk3YjVjZDcyNTU1Y2RiMWUzZjYxYWU5MmVmZDdkNmI3Mg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2004-11-26T18:53:47Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2004-11-26T18:53:47Z"}, "message": "frv.c (frv_ifcvt_modify_insn): Don't leave alone scratch insns that set a register live at the join point.\n\n* config/frv/frv.c (frv_ifcvt_modify_insn): Don't leave alone\nscratch insns that set a register live at the join point.\n\nFrom-SVN: r91344", "tree": {"sha": "a001e3858f4374f3c3b708de798f375c313ddf58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a001e3858f4374f3c3b708de798f375c313ddf58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a228f097b5cd72555cdb1e3f61ae92efd7d6b72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a228f097b5cd72555cdb1e3f61ae92efd7d6b72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a228f097b5cd72555cdb1e3f61ae92efd7d6b72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a228f097b5cd72555cdb1e3f61ae92efd7d6b72/comments", "author": null, "committer": null, "parents": [{"sha": "532815a787849962ca2f2101aef12ec1d57b2cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/532815a787849962ca2f2101aef12ec1d57b2cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/532815a787849962ca2f2101aef12ec1d57b2cfd"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "5f9c8281b75b1a6d4ceb29081dfcea79da888955", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a228f097b5cd72555cdb1e3f61ae92efd7d6b72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a228f097b5cd72555cdb1e3f61ae92efd7d6b72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a228f097b5cd72555cdb1e3f61ae92efd7d6b72", "patch": "@@ -1,3 +1,8 @@\n+2004-11-26  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/frv/frv.c (frv_ifcvt_modify_insn): Don't leave alone\n+\tscratch insns that set a register live at the join point.\n+\n 2004-11-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cse.c, tree-ssa-operands.c: Fix comment typos."}, {"sha": "de976898d97a6a33bb354f53e4cf2a29433777ee", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a228f097b5cd72555cdb1e3f61ae92efd7d6b72/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a228f097b5cd72555cdb1e3f61ae92efd7d6b72/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=9a228f097b5cd72555cdb1e3f61ae92efd7d6b72", "patch": "@@ -7418,10 +7418,28 @@ frv_ifcvt_modify_insn (ce_if_block_t *ce_info,\n       else if (frv_ifcvt.scratch_insns_bitmap\n \t       && bitmap_bit_p (frv_ifcvt.scratch_insns_bitmap,\n \t\t\t\tINSN_UID (insn))\n-\t       /* We must not unconditionally set a reg set used as\n-\t\t  scratch in the THEN branch if the same reg is live\n-\t\t  in the ELSE branch.  */\n \t       && REG_P (SET_DEST (set))\n+\t       /* We must not unconditionally set a scratch reg chosen\n+\t\t  for a nested if-converted block if its incoming\n+\t\t  value from the TEST block (or the result of the THEN\n+\t\t  branch) could/should propagate to the JOIN block.\n+\t\t  It suffices to test whether the register is live at\n+\t\t  the JOIN point: if it's live there, we can infer\n+\t\t  that we set it in the former JOIN block of the\n+\t\t  nested if-converted block (otherwise it wouldn't\n+\t\t  have been available as a scratch register), and it\n+\t\t  is either propagated through or set in the other\n+\t\t  conditional block.  It's probably not worth trying\n+\t\t  to catch the latter case, and it could actually\n+\t\t  limit scheduling of the combined block quite\n+\t\t  severely.  */\n+\t       && ce_info->join_bb\n+\t       && ! (REGNO_REG_SET_P\n+\t\t     (ce_info->join_bb->global_live_at_start,\n+\t\t      REGNO (SET_DEST (set))))\n+\t       /* Similarly, we must not unconditionally set a reg\n+\t\t  used as scratch in the THEN branch if the same reg\n+\t\t  is live in the ELSE branch.  */\n \t       && (! ce_info->else_bb\n \t\t   || BLOCK_FOR_INSN (insn) == ce_info->else_bb\n \t\t   || ! (REGNO_REG_SET_P"}]}