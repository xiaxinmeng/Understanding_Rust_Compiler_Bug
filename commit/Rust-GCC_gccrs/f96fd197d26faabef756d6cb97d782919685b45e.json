{"sha": "f96fd197d26faabef756d6cb97d782919685b45e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2ZmQxOTdkMjZmYWFiZWY3NTZkNmNiOTdkNzgyOTE5Njg1YjQ1ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T09:11:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T09:11:03Z"}, "message": "[multiple changes]\n\n2016-05-02  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch5.adb, layout.adb, gnatcmd.adb exp_attr.adb, make.adb,\n\tbindgen.adb, debug.adb, exp_pakd.adb, freeze.adb, sem_util.adb,\n\tgnatlink.adb, switch-m.adb, exp_ch4.adb, repinfo.adb, adabkend.adb,\n\tosint.adb: Remove dead code.\n\n2016-05-02  Yannick Moy  <moy@adacore.com>\n\n\t* a-tigeli.adb (Get_Line): Fix bound for test to\n\tdecide when to compensate for character 0 added by call to fgets.\n\nFrom-SVN: r235710", "tree": {"sha": "3baada419f5066d0448cfe4adb129eaa98d8f006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3baada419f5066d0448cfe4adb129eaa98d8f006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f96fd197d26faabef756d6cb97d782919685b45e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96fd197d26faabef756d6cb97d782919685b45e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f96fd197d26faabef756d6cb97d782919685b45e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96fd197d26faabef756d6cb97d782919685b45e/comments", "author": null, "committer": null, "parents": [{"sha": "3ba1a9eb6ec22706bdb084db2f1ab31a32d4dde8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ba1a9eb6ec22706bdb084db2f1ab31a32d4dde8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ba1a9eb6ec22706bdb084db2f1ab31a32d4dde8"}], "stats": {"total": 334, "additions": 60, "deletions": 274}, "files": [{"sha": "4f67c19819f63dc0c66b850ed9f72fb740897d8c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -1,3 +1,15 @@\n+2016-05-02  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch5.adb, layout.adb, gnatcmd.adb exp_attr.adb, make.adb,\n+\tbindgen.adb, debug.adb, exp_pakd.adb, freeze.adb, sem_util.adb,\n+\tgnatlink.adb, switch-m.adb, exp_ch4.adb, repinfo.adb, adabkend.adb,\n+\tosint.adb: Remove dead code.\n+\n+2016-05-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* a-tigeli.adb (Get_Line): Fix bound for test to\n+\tdecide when to compensate for character 0 added by call to fgets.\n+\n 2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch4.adb (Analyze_Allocator): If the expression does not"}, {"sha": "9894e01ef461ff596197cc1db295c84756106f7e", "filename": "gcc/ada/a-tigeli.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fa-tigeli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fa-tigeli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tigeli.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -120,10 +120,15 @@ is\n             K : Natural := Natural (P - S);\n \n          begin\n-            --  Now Buf (K + 2) should be 0, or otherwise Buf (K) is the 0\n-            --  put in by fgets, so compensate.\n-\n-            if K + 2 > Buf'Last or else Buf (K + 2) /= ASCII.NUL then\n+            --  If K + 2 is greater than N, then Buf (K + 1) cannot be a LM\n+            --  character from the source file, as the call to fgets copied at\n+            --  most N - 1 characters. Otherwise, either LM is a character from\n+            --  the source file and then Buf (K + 2) should be 0, or LM is a\n+            --  character put in Buf by memset and then Buf (K) is the 0 put in\n+            --  by fgets. In both cases where LM does not come from the source\n+            --  file, compensate.\n+\n+            if K + 2 > N or else Buf (K + 2) /= ASCII.NUL then\n \n                --  Incomplete last line, so remove the extra 0\n "}, {"sha": "e8509239c3bf701e76f3f0d6012d7ea2e64d136e", "filename": "gcc/ada/adabkend.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fadabkend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fadabkend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadabkend.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -1,12 +1,12 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n---                        GNAAMP COMPILER COMPONENTS                        --\n+--                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n --                             A D A B K E N D                              --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2015, AdaCore                     --\n+--                     Copyright (C) 2001-2016, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -157,8 +157,8 @@ package body Adabkend is\n             return; -- ignore this switch\n \n          --  The -x switch and its language name argument will generally be\n-         --  ignored by non-gcc back ends (e.g. the GNAAMP back end). In any\n-         --  case, we save the switch and argument in the compilation switches.\n+         --  ignored by non-gcc back ends. In any case, we save the switch and\n+         --  argument in the compilation switches.\n \n          elsif Switch_Chars (First .. Last) = \"x\" then\n             Lib.Store_Compilation_Switch (Switch_Chars);"}, {"sha": "144ab5148cc8cec8f821967d0db69fc40bf525c0", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 6, "deletions": 73, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -495,14 +495,6 @@ package body Bindgen is\n       if CodePeer_Mode then\n          WBI (\"   begin\");\n \n-      --  When compiling for the AAMP small library, where the standard library\n-      --  is no longer suppressed, we still want to exclude the setting of the\n-      --  various imported globals, which aren't present for that library.\n-\n-      elsif AAMP_On_Target and then Configurable_Run_Time_On_Target then\n-         WBI (\"   begin\");\n-         WBI (\"      null;\");\n-\n       --  If the standard library is suppressed, then the only global variables\n       --  that might be needed (by the Ravenscar profile) are the priority and\n       --  the processor for the environment task.\n@@ -1116,38 +1108,9 @@ package body Bindgen is\n                then\n                   Set_String (\"      E\");\n                   Set_Unit_Number (Unum_Spec);\n-\n-                  --  The AAMP target has no notion of shared libraries, and\n-                  --  there's no possibility of reelaboration, so we treat the\n-                  --  the elaboration var as a flag instead of a counter and\n-                  --  simply set it.\n-\n-                  if AAMP_On_Target then\n-                     Set_String (\" := 1;\");\n-\n-                  --  Otherwise (normal case), increment elaboration counter\n-\n-                  else\n-                     Set_String (\" := E\");\n-                     Set_Unit_Number (Unum_Spec);\n-                     Set_String (\" + 1;\");\n-                  end if;\n-\n-                  Write_Statement_Buffer;\n-\n-               --  In the special case where the target is AAMP and the unit is\n-               --  a spec with a body, the elaboration entity is initialized\n-               --  here. This is done because it's the only way to accomplish\n-               --  initialization of such entities, as there is no mechanism\n-               --  for load time global variable initialization on AAMP.\n-\n-               elsif AAMP_On_Target\n-                 and then U.Utype = Is_Spec\n-                 and then Units.Table (Unum_Spec).Set_Elab_Entity\n-               then\n-                  Set_String (\"      E\");\n+                  Set_String (\" := E\");\n                   Set_Unit_Number (Unum_Spec);\n-                  Set_String (\" := 0;\");\n+                  Set_String (\" + 1;\");\n                   Write_Statement_Buffer;\n                end if;\n \n@@ -1171,22 +1134,6 @@ package body Bindgen is\n             --  variables, only calls to 'Elab* subprograms.\n \n             else\n-               --  In the special case where the target is AAMP and the unit is\n-               --  a spec with a body, the elaboration entity is initialized\n-               --  here. This is done because it's the only way to accomplish\n-               --  initialization of such entities, as there is no mechanism\n-               --  for load time global variable initialization on AAMP.\n-\n-               if AAMP_On_Target\n-                 and then U.Utype = Is_Spec\n-                 and then Units.Table (Unum_Spec).Set_Elab_Entity\n-               then\n-                  Set_String (\"      E\");\n-                  Set_Unit_Number (Unum_Spec);\n-                  Set_String (\" := 0;\");\n-                  Write_Statement_Buffer;\n-               end if;\n-\n                --  Check incompatibilities with No_Multiple_Elaboration\n \n                if not CodePeer_Mode\n@@ -1270,23 +1217,9 @@ package body Bindgen is\n                then\n                   Set_String (\"      E\");\n                   Set_Unit_Number (Unum_Spec);\n-\n-                  --  The AAMP target has no notion of shared libraries, and\n-                  --  there's no possibility of reelaboration, so we treat the\n-                  --  the elaboration var as a flag instead of a counter and\n-                  --  simply set it.\n-\n-                  if AAMP_On_Target then\n-                     Set_String (\" := 1;\");\n-\n-                  --  Otherwise (normal case), increment elaboration counter\n-\n-                  else\n-                     Set_String (\" := E\");\n-                     Set_Unit_Number (Unum_Spec);\n-                     Set_String (\" + 1;\");\n-                  end if;\n-\n+                  Set_String (\" := E\");\n+                  Set_Unit_Number (Unum_Spec);\n+                  Set_String (\" + 1;\");\n                   Write_Statement_Buffer;\n                end if;\n             end if;"}, {"sha": "543c399edbc73e0c2323b8380649041066f9ad5f", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -109,7 +109,7 @@ package body Debug is\n    --  d.p\n    --  d.q\n    --  d.r  Enable OK_To_Reorder_Components in non-variant records\n-   --  d.s  Disable expansion of slice move, use memmove\n+   --  d.s\n    --  d.t  Disable static allocation of library level dispatch tables\n    --  d.u  Enable Modify_Tree_For_C (update tree for c)\n    --  d.v  Enable OK_To_Reorder_Components in variant records\n@@ -559,11 +559,6 @@ package body Debug is\n    --  d.r  Forces the flag OK_To_Reorder_Components to be set in all record\n    --       base types that have no discriminants.\n \n-   --  d.s  Normally the compiler expands slice moves into loops if overlap\n-   --       might be possible. This debug flag inhibits that expansion, and\n-   --       the back end is expected to use an appropriate routine to handle\n-   --       overlap, based on Forward_OK and Backwards_OK flags.\n-\n    --  d.t  The compiler has been modified (a fairly extensive modification)\n    --       to generate static dispatch tables for library level tagged types.\n    --       This debug switch disables this modification and reverts to the\n@@ -585,11 +580,10 @@ package body Debug is\n    --       code generation step.\n \n    --  d.z  Restore previous front-end support for Inline_Always. In default\n-   --       mode, for targets that use the GCC back end (i.e. currently all\n-   --       targets except AAMP and GNATprove), Inline_Always is handled by the\n-   --       back end. Use of this switch restores the previous handling of\n-   --       Inline_Always by the front end on such targets. For the targets\n-   --       that do not use the GCC back end, this switch is ignored.\n+   --       mode, for targets that use the GCC back end, Inline_Always is\n+   --       handled by the back end. Use of this switch restores the previous\n+   --       handling of Inline_Always by the front end on such targets. For the\n+   --       targets that do not use the GCC back end, this switch is ignored.\n \n    --  d.A  There seems to be a problem with ASIS if we activate the circuit\n    --       for reading and writing the aspect specification hash table, so"}, {"sha": "30bcc9e98a2e83217b41a9fa97d1ab01216107cc", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -7504,20 +7504,14 @@ package body Exp_Attr is\n       --  that appear in GNAT's library, but will generate calls via rtsfind\n       --  to library routines for user code.\n \n-      --  This is disabled for AAMP, to avoid creating dependences on files not\n-      --  supported in the AAMP library (such as s-fileio.adb).\n-\n       --  Note: In the case of using a configurable run time, it is very likely\n       --  that stream routines for string types are not present (they require\n       --  file system support). In this case, the specific stream routines for\n       --  strings are not used, relying on the regular stream mechanism\n       --  instead. That is why we include the test Is_Available when dealing\n       --  with these cases.\n \n-      if not AAMP_On_Target\n-        and then\n-          not Is_Predefined_File_Name (Unit_File_Name (Current_Sem_Unit))\n-      then\n+      if not Is_Predefined_File_Name (Unit_File_Name (Current_Sem_Unit)) then\n          --  Storage_Array as defined in package System.Storage_Elements\n \n          if Is_RTE (Base_Typ, RE_Storage_Array) then"}, {"sha": "876be12f73682b4a62df819e6d5e001ed0a706e0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -8136,11 +8136,7 @@ package body Exp_Ch4 is\n       then\n          Etyp := Standard_Long_Long_Integer;\n \n-         --  Overflow checking is the only choice on the AAMP target, where\n-         --  arithmetic instructions check overflow automatically, so only\n-         --  one version of the exponentiation unit is needed.\n-\n-         if Ovflo or AAMP_On_Target then\n+         if Ovflo then\n             Rent := RE_Exp_Long_Long_Integer;\n          else\n             Rent := RE_Exn_Long_Long_Integer;\n@@ -8149,11 +8145,7 @@ package body Exp_Ch4 is\n       elsif Is_Signed_Integer_Type (Rtyp) then\n          Etyp := Standard_Integer;\n \n-         --  Overflow checking is the only choice on the AAMP target, where\n-         --  arithmetic instructions check overflow automatically, so only\n-         --  one version of the exponentiation unit is needed.\n-\n-         if Ovflo or AAMP_On_Target then\n+         if Ovflo then\n             Rent := RE_Exp_Integer;\n          else\n             Rent := RE_Exn_Integer;\n@@ -8511,8 +8503,8 @@ package body Exp_Ch4 is\n \n       else\n          --  Apply optimization x mod 1 = 0. We don't really need that with\n-         --  gcc, but it is useful with other back ends (e.g. AAMP), and is\n-         --  certainly harmless.\n+         --  gcc, but it is useful with other back ends and is certainly\n+         --  harmless.\n \n          if Is_Integer_Type (Etype (N))\n            and then Compile_Time_Known_Value (Right)\n@@ -9263,8 +9255,7 @@ package body Exp_Ch4 is\n       Right := Right_Opnd (N);\n \n       --  Apply optimization x rem 1 = 0. We don't really need that with gcc,\n-      --  but it is useful with other back ends (e.g. AAMP), and is certainly\n-      --  harmless.\n+      --  but it is useful with other back ends, and is certainly harmless.\n \n       if Is_Integer_Type (Etype (N))\n         and then Compile_Time_Known_Value (Right)\n@@ -12865,11 +12856,9 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n-      --  Nothing to do if special -gnatd.P debug flag set or target is AAMP.\n-      --  For AAMP the 64-bit arithmetic package would get dragged in, which\n-      --  we want to avoid, plus this optimization has limited benefit on AAMP.\n+      --  Nothing to do if special -gnatd.P debug flag set.\n \n-      if Debug_Flag_Dot_PP or else AAMP_On_Target then\n+      if Debug_Flag_Dot_PP then\n          return;\n       end if;\n "}, {"sha": "5238efcb5b857176ee683ace0f7dec26554a30a6", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -59,7 +59,6 @@ with Sem_Util; use Sem_Util;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n-with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n with Validsw;  use Validsw;\n@@ -749,25 +748,11 @@ package body Exp_Ch5 is\n          --  then the outcome depends on the capabilities of the back end.\n \n          if not Loop_Required then\n+            --  Assume the back end can deal with all cases of overlap by\n+            --  falling back to memmove if it cannot use a more efficient\n+            --  approach.\n \n-            --  The GCC back end can deal with all cases of overlap by falling\n-            --  back to memmove if it cannot use a more efficient approach.\n-\n-            if not AAMP_On_Target then\n-               return;\n-\n-            --  Assume other back ends can handle it if Forwards_OK is set\n-\n-            elsif Forwards_OK (N) then\n-               return;\n-\n-            --  If Forwards_OK is not set, the back end will need something\n-            --  like memmove to handle the move. For now, this processing is\n-            --  activated using the .s debug flag (-gnatd.s).\n-\n-            elsif Debug_Flag_Dot_S then\n-               return;\n-            end if;\n+            return;\n          end if;\n \n          --  At this stage we have to generate an explicit loop, and we have"}, {"sha": "c8ba68a17d03c307e243379cd95dfbbbc7319604", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -1147,19 +1147,6 @@ package body Exp_Pakd is\n          Analyze_And_Resolve (Rhs, Ctyp);\n       end if;\n \n-      --  For the AAMP target, indexing of certain packed array is passed\n-      --  through to the back end without expansion, because the expansion\n-      --  results in very inefficient code on that target. This allows the\n-      --  GNAAMP back end to generate specialized macros that support more\n-      --  efficient indexing of packed arrays with components having sizes\n-      --  that are small powers of two.\n-\n-      if AAMP_On_Target\n-        and then (Csiz = 1 or else Csiz = 2 or else Csiz = 4)\n-      then\n-         return;\n-      end if;\n-\n       --  Case of component size 1,2,4 or any component size for the modular\n       --  case. These are the cases for which we can inline the code.\n \n@@ -1739,19 +1726,6 @@ package body Exp_Pakd is\n       Ctyp := Component_Type (Atyp);\n       Csiz := UI_To_Int (Component_Size (Atyp));\n \n-      --  For the AAMP target, indexing of certain packed array is passed\n-      --  through to the back end without expansion, because the expansion\n-      --  results in very inefficient code on that target. This allows the\n-      --  GNAAMP back end to generate specialized macros that support more\n-      --  efficient indexing of packed arrays with components having sizes\n-      --  that are small powers of two.\n-\n-      if AAMP_On_Target\n-        and then (Csiz = 1 or else Csiz = 2 or else Csiz = 4)\n-      then\n-         return;\n-      end if;\n-\n       --  Case of component size 1,2,4 or any component size for the modular\n       --  case. These are the cases for which we can inline the code.\n "}, {"sha": "74e1688c7b6054d063db1be0f7c872c50cc841e5", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -3482,7 +3482,7 @@ package body Freeze is\n            and then Convention (E) /= Convention_Intrinsic\n \n            --  Assume that ASM interface knows what it is doing. This deals\n-           --  with unsigned.ads in the AAMP back end.\n+           --  with e.g. unsigned.ads in the AAMP back end.\n \n            and then Convention (E) /= Convention_Assembler\n          then"}, {"sha": "542d370a0bf20d5946251ed2e8069409a4a5a539", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -42,7 +42,6 @@ with Snames;   use Snames;\n with Stringt;\n with Switch;   use Switch;\n with Table;\n-with Targparm; use Targparm;\n with Tempdir;\n with Types;    use Types;\n \n@@ -434,12 +433,7 @@ procedure GNATCmd is\n \n    procedure Output_Version is\n    begin\n-      if AAMP_On_Target then\n-         Put (\"GNAAMP \");\n-      else\n-         Put (\"GNAT \");\n-      end if;\n-\n+      Put (\"GNAT \");\n       Put_Line (Gnatvsn.Gnat_Version_String);\n       Put_Line (\"Copyright 1996-\" & Gnatvsn.Current_Year\n                 & \", Free Software Foundation, Inc.\");\n@@ -457,12 +451,7 @@ procedure GNATCmd is\n       New_Line;\n \n       for C in Command_List'Range loop\n-         if Targparm.AAMP_On_Target then\n-            Put (\"gnaampcmd \");\n-         else\n-            Put (\"gnat \");\n-         end if;\n-\n+         Put (\"gnat \");\n          Put (To_Lower (Command_List (C).Cname.all));\n          Set_Col (25);\n          Put (Program_Name (Command_List (C).Unixcmd.all, \"gnat\").all);\n@@ -512,13 +501,6 @@ begin\n    First_Switches.Init;\n    First_Switches.Set_Last (0);\n \n-   --  Set AAMP_On_Target from command name, for testing in Osint.Program_Name\n-   --  to handle the mapping of GNAAMP tool names. We don't extract it from\n-   --  system.ads, as there may be no default runtime.\n-\n-   Find_Program_Name;\n-   AAMP_On_Target := Name_Buffer (1 .. Name_Len) = \"gnaampcmd\";\n-\n    --  Put the command line in environment variable GNAT_DRIVER_COMMAND_LINE,\n    --  so that the spawned tool may know the way the GNAT driver was invoked.\n "}, {"sha": "073c2c953157f930ff363b6ca5e14687aee55036", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -1868,25 +1868,6 @@ begin\n       Stack_Op : Boolean := False;\n \n    begin\n-      if AAMP_On_Target then\n-\n-         --  Remove extraneous flags not relevant for AAMP\n-\n-         for J in reverse Linker_Options.First .. Linker_Options.Last loop\n-            if Linker_Options.Table (J)'Length = 0\n-              or else Linker_Options.Table (J) (1 .. 3) = \"-Wl\"\n-              or else Linker_Options.Table (J) (1 .. 3) = \"-sh\"\n-              or else Linker_Options.Table (J) (1 .. 2) = \"-O\"\n-              or else Linker_Options.Table (J) (1 .. 2) = \"-g\"\n-            then\n-               Linker_Options.Table (J .. Linker_Options.Last - 1) :=\n-                 Linker_Options.Table (J + 1 .. Linker_Options.Last);\n-               Linker_Options.Decrement_Last;\n-               Num_Args := Num_Args - 1;\n-            end if;\n-         end loop;\n-      end if;\n-\n       --  Remove duplicate stack size setting from the Linker_Options table.\n       --  The stack setting option \"-Xlinker --stack=R,C\" can be found\n       --  in one line when set by a pragma Linker_Options or in two lines"}, {"sha": "7e28d3f43b082402c6d3045343953837284c05e9", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2501,24 +2501,6 @@ package body Layout is\n          then\n             Init_Size (E, 2 * System_Address_Size);\n \n-         --  When the target is AAMP, access-to-subprogram types are fat\n-         --  pointers consisting of the subprogram address and a static link,\n-         --  with the exception of library-level access types (including\n-         --  library-level anonymous access types, such as for components),\n-         --  where a simple subprogram address is used.\n-\n-         elsif AAMP_On_Target\n-           and then\n-             ((Ekind (E) = E_Access_Subprogram_Type\n-                and then Present (Enclosing_Subprogram (E)))\n-               or else\n-                 (Ekind (E) = E_Anonymous_Access_Subprogram_Type\n-                   and then\n-                     (not Is_Local_Anonymous_Access (E)\n-                       or else Present (Enclosing_Subprogram (E)))))\n-         then\n-            Init_Size (E, 2 * System_Address_Size);\n-\n          --  Normal case of thin pointer\n \n          else"}, {"sha": "261f2a64a0681df2730d29f418dd3f0a18e38243", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2978,7 +2978,7 @@ package body Make is\n             Comp_Last := Comp_Last + 1;\n             Comp_Args (Comp_Last) := AdaSCIL_Flag;\n \n-         elsif not Ada_File_Name (S) and then not Targparm.AAMP_On_Target then\n+         elsif not Ada_File_Name (S) then\n             Comp_Last := Comp_Last + 1;\n             Comp_Args (Comp_Last) := Ada_Flag_1;\n             Comp_Last := Comp_Last + 1;\n@@ -5816,7 +5816,7 @@ package body Make is\n             Finish_Program (Project_Tree, E_Success);\n \n          else\n-            --  Call Get_Target_Parameters to ensure that AAMP_On_Target gets\n+            --  Call Get_Target_Parameters to ensure that flags are properly\n             --  set before calling Usage.\n \n             Targparm.Get_Target_Parameters;"}, {"sha": "d1e4f6444023d0d5d502aec6a1eba5a7e7a7293e", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2203,31 +2203,6 @@ package body Osint is\n       Start_Of_Suffix : Positive;\n \n    begin\n-      --  GNAAMP tool names require special treatment\n-\n-      if AAMP_On_Target then\n-\n-         --  The name \"gcc\" is mapped to \"gnaamp\" (the compiler driver)\n-\n-         if Nam = \"gcc\" then\n-            return new String'(\"gnaamp\");\n-\n-         --  Tool names starting with \"gnat\" are mapped by substituting the\n-         --  string \"gnaamp\" for \"gnat\" (for example, \"gnatpp\" => \"gnaamppp\").\n-\n-         elsif Nam'Length >= 4\n-           and then Nam (Nam'First .. Nam'First + 3) = \"gnat\"\n-         then\n-            return new String'(\"gnaamp\" & Nam (Nam'First + 4 .. Nam'Last));\n-\n-         --  No other mapping rules, so we continue and handle any other forms\n-         --  of tool names the same as on other targets.\n-\n-         else\n-            null;\n-         end if;\n-      end if;\n-\n       --  Get the name of the current program being executed\n \n       Find_Program_Name;"}, {"sha": "4d710a3afb49201d403718b53d6920c0e9011e11", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -58,8 +58,6 @@ package body Repinfo is\n    --  this introduces problematic dependencies in ASIS, and in any case this\n    --  value is assumed to be 8 for the implementation of the DDA.\n \n-   --  This is wrong for AAMP???\n-\n    ---------------------------------------\n    -- Representation of gcc Expressions --\n    ---------------------------------------"}, {"sha": "863ff308d9a90a507e4be98a069dd710b597fed4", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -290,7 +290,7 @@ package body Sem_Util is\n    -- Addressable --\n    -----------------\n \n-   --  For now, just 8/16/32/64. but analyze later if AAMP is special???\n+   --  For now, just 8/16/32/64\n \n    function Addressable (V : Uint) return Boolean is\n    begin"}, {"sha": "fcbcafbc88c39d5b4cdc04a3a52e1f24391418df", "filename": "gcc/ada/switch-m.adb", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fswitch-m.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96fd197d26faabef756d6cb97d782919685b45e/gcc%2Fada%2Fswitch-m.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-m.adb?ref=f96fd197d26faabef756d6cb97d782919685b45e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -196,24 +196,6 @@ package body Switch.M is\n                      Add_Switch_Component (\"-mrtp\");\n                   end if;\n \n-               --  Switch for universal addressing on AAMP target\n-\n-               elsif Switch_Chars'Length >= 5\n-                 and then\n-                   Switch_Chars\n-                     (Switch_Chars'First .. Switch_Chars'First + 4) = \"-univ\"\n-               then\n-                  Add_Switch_Component (Switch_Chars);\n-\n-               --  Switch for specifying AAMP target library\n-\n-               elsif Switch_Chars'Length > 13\n-                 and then\n-                   Switch_Chars (Switch_Chars'First .. Switch_Chars'First + 12)\n-                     = \"-aamp_target=\"\n-               then\n-                  Add_Switch_Component (Switch_Chars);\n-\n                --  Special case for -fstack-check (alias for\n                --  -fstack-check=specific)\n "}]}