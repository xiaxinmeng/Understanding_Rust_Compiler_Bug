{"sha": "965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY1Yjk4ZDA0YmE1NTc3YWFhYTJlMWU0OGE4ZDliYTZkYmEzNWRhOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-11-18T13:09:15Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-11-18T13:09:15Z"}, "message": "predict.c (compute_function_frequency): Export.\n\n\n\t* predict.c (compute_function_frequency): Export.\n\t* predict.h (compute_function_frequency): Declare.\n\t* tree-optimize.c (execute_fixup_cfg): Rescale frequencies.\n\nFrom-SVN: r154291", "tree": {"sha": "5ccc2b57b37b756a5c2cf26a4da08e0c6de03283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ccc2b57b37b756a5c2cf26a4da08e0c6de03283"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9/comments", "author": null, "committer": null, "parents": [{"sha": "8b2205027de65d0d8c2fe0ef9c4238bf7e769eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2205027de65d0d8c2fe0ef9c4238bf7e769eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b2205027de65d0d8c2fe0ef9c4238bf7e769eb8"}], "stats": {"total": 83, "additions": 52, "deletions": 31}, "files": [{"sha": "443ce2eb85835d6c9ee3fda7b17bebf3e03da306", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9", "patch": "@@ -1,3 +1,9 @@\n+2009-11-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.c (compute_function_frequency): Export.\n+\t* predict.h (compute_function_frequency): Declare.\n+\t* tree-optimize.c (execute_fixup_cfg): Rescale frequencies.\n+\n 2009-11-18  Martin Jambor  <mjambor@suse.cz>\n \n \t* passes.c (ipa_write_summaries): Call renumber_gimple_stmt_uids"}, {"sha": "df859066b96bdc1b599014d9b608047a9d004321", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9", "patch": "@@ -77,7 +77,6 @@ static sreal real_zero, real_one, real_almost_one, real_br_prob_base,\n static void combine_predictions_for_insn (rtx, basic_block);\n static void dump_prediction (FILE *, enum br_predictor, int, basic_block, int);\n static void predict_paths_leading_to (basic_block, enum br_predictor, enum prediction);\n-static void compute_function_frequency (void);\n static void choose_function_section (void);\n static bool can_predict_insn_p (const_rtx);\n \n@@ -2145,7 +2144,7 @@ estimate_bb_frequencies (void)\n }\n \n /* Decide whether function is hot, cold or unlikely executed.  */\n-static void\n+void\n compute_function_frequency (void)\n {\n   basic_block bb;"}, {"sha": "18e57d7706560546f46723a3387b4e65fde4fe79", "filename": "gcc/predict.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9/gcc%2Fpredict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9/gcc%2Fpredict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.h?ref=965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9", "patch": "@@ -41,5 +41,6 @@ extern void estimate_bb_frequencies (void);\n extern const char *predictor_name (enum br_predictor);\n extern tree build_predict_expr (enum br_predictor, enum prediction);\n extern void tree_estimate_probability (void);\n+extern void compute_function_frequency (void);\n \n #endif  /* GCC_PREDICT_H */"}, {"sha": "61d687daa13a22cb92575f04e58d236ea5e2e8cb", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 44, "deletions": 29, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=965b98d04ba5577aaaa2e1e48a8d9ba6dba35da9", "patch": "@@ -245,36 +245,51 @@ execute_fixup_cfg (void)\n   basic_block bb;\n   gimple_stmt_iterator gsi;\n   int todo = gimple_in_ssa_p (cfun) ? TODO_verify_ssa : 0;\n+  gcov_type count_scale;\n+  edge e;\n+  edge_iterator ei;\n \n-  if (cfun->eh)\n-    FOR_EACH_BB (bb)\n-      {\n-\tfor (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-\t  {\n-\t    gimple stmt = gsi_stmt (gsi);\n-\t    tree decl = is_gimple_call (stmt)\n-\t                ? gimple_call_fndecl (stmt)\n-\t\t\t: NULL;\n-\n-\t    if (decl\n-\t\t&& gimple_call_flags (stmt) & (ECF_CONST\n-\t\t\t\t\t       | ECF_PURE \n-\t\t\t\t\t       | ECF_LOOPING_CONST_OR_PURE))\n-\t      {\n-\t\tif (gimple_in_ssa_p (cfun))\n-\t\t  {\n-\t\t    todo |= TODO_update_ssa | TODO_cleanup_cfg;\n-\t\t    mark_symbols_for_renaming (stmt);\n-\t            update_stmt (stmt);\n-\t\t  }\n-\t      }\n-\n-\t    maybe_clean_eh_stmt (stmt);\n-\t  }\n-\n-\tif (gimple_purge_dead_eh_edges (bb))\n-          todo |= TODO_cleanup_cfg;\n-      }\n+  if (ENTRY_BLOCK_PTR->count)\n+    count_scale = (cgraph_node (current_function_decl)->count * REG_BR_PROB_BASE\n+    \t\t   + ENTRY_BLOCK_PTR->count / 2) / ENTRY_BLOCK_PTR->count;\n+  else\n+    count_scale = REG_BR_PROB_BASE;\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      bb->count = (bb->count * count_scale\n+\t\t   + REG_BR_PROB_BASE / 2) / REG_BR_PROB_BASE;\n+      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t{\n+\t  gimple stmt = gsi_stmt (gsi);\n+\t  tree decl = is_gimple_call (stmt)\n+\t\t      ? gimple_call_fndecl (stmt)\n+\t\t      : NULL;\n+\n+\t  if (decl\n+\t      && gimple_call_flags (stmt) & (ECF_CONST\n+\t\t\t\t\t     | ECF_PURE \n+\t\t\t\t\t     | ECF_LOOPING_CONST_OR_PURE))\n+\t    {\n+\t      if (gimple_in_ssa_p (cfun))\n+\t\t{\n+\t\t  todo |= TODO_update_ssa | TODO_cleanup_cfg;\n+\t\t  mark_symbols_for_renaming (stmt);\n+\t\t  update_stmt (stmt);\n+\t\t}\n+\t    }\n+\n+\t  maybe_clean_eh_stmt (stmt);\n+\t}\n+\n+      if (gimple_purge_dead_eh_edges (bb))\n+\ttodo |= TODO_cleanup_cfg;\n+      FOR_EACH_EDGE (e, ei, bb->succs)\n+        e->count = (e->count * count_scale\n+\t\t    + REG_BR_PROB_BASE / 2) / REG_BR_PROB_BASE;\n+    }\n+  if (count_scale != REG_BR_PROB_BASE)\n+    compute_function_frequency ();\n \n   /* Dump a textual representation of the flowgraph.  */\n   if (dump_file)"}]}