{"sha": "891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxZjJkZjZlZjJlODc2YTRhNjhkNmE1N2I2YjM0MGMzYTNhN2QwNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-07-27T13:57:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-07-27T13:57:38Z"}, "message": "tree-cfg.c (gimple_can_merge_blocks_p): Do more fine-grained check whether SSA form is not up-to-date.\n\n2012-07-27  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-cfg.c (gimple_can_merge_blocks_p): Do more fine-grained\n\tcheck whether SSA form is not up-to-date.\n\t* tree-flow.h (name_mappings_registered_p): Remove.\n\t* tree-into-ssa.c (struct repl_map_d): Remove.\n\t(repl_tbl): Likewise.\n\t(struct ssa_name_info): Add repl_set member.\n\t(update_ssa_obstack): New static global.\n\t(get_ssa_name_ann): Initialize repl_set.\n\t(clear_ssa_name_info): Assert age did not wrap.\n\t(repl_map_hash, repl_map_eq, repl_map_free): Remove.\n\t(names_replaced_by): Adjust.\n\t(add_to_repl_tbl): Likewise.\n\t(dump_tree_ssa_stats): Likewise.\n\t(init_update_ssa): Initialize update_ssa_obstack.\n\t(delete_update_ssa): Free update_ssa_obstack.\n\t(name_mappings_registered_p): Remove.\n\t(update_ssa): Adjust.\n\nFrom-SVN: r189915", "tree": {"sha": "cfa4181542745064b1f940bc876e4a601a9c43e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfa4181542745064b1f940bc876e4a601a9c43e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "462f790109f8ea09dee7ecde428ad2a7c27a59b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462f790109f8ea09dee7ecde428ad2a7c27a59b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/462f790109f8ea09dee7ecde428ad2a7c27a59b8"}], "stats": {"total": 155, "additions": 55, "deletions": 100}, "files": [{"sha": "3e89d0b999e08e8372c5f3e5e49b501fa753c3db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06", "patch": "@@ -1,3 +1,23 @@\n+2012-07-27  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (gimple_can_merge_blocks_p): Do more fine-grained\n+\tcheck whether SSA form is not up-to-date.\n+\t* tree-flow.h (name_mappings_registered_p): Remove.\n+\t* tree-into-ssa.c (struct repl_map_d): Remove.\n+\t(repl_tbl): Likewise.\n+\t(struct ssa_name_info): Add repl_set member.\n+\t(update_ssa_obstack): New static global.\n+\t(get_ssa_name_ann): Initialize repl_set.\n+\t(clear_ssa_name_info): Assert age did not wrap.\n+\t(repl_map_hash, repl_map_eq, repl_map_free): Remove.\n+\t(names_replaced_by): Adjust.\n+\t(add_to_repl_tbl): Likewise.\n+\t(dump_tree_ssa_stats): Likewise.\n+\t(init_update_ssa): Initialize update_ssa_obstack.\n+\t(delete_update_ssa): Free update_ssa_obstack.\n+\t(name_mappings_registered_p): Remove.\n+\t(update_ssa): Adjust.\n+\n 2012-07-27  Segher Boessenkool  <segher@kernel.crashing.org>\n \n         * config/rs6000/constraints.md: Delete \"q\" constraint."}, {"sha": "29b4e9886ea778d10ec41304059da4700b7dcf0b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06", "patch": "@@ -1445,7 +1445,6 @@ gimple_can_merge_blocks_p (basic_block a, basic_block b)\n {\n   gimple stmt;\n   gimple_stmt_iterator gsi;\n-  gimple_seq phis;\n \n   if (!single_succ_p (a))\n     return false;\n@@ -1495,10 +1494,13 @@ gimple_can_merge_blocks_p (basic_block a, basic_block b)\n   /* It must be possible to eliminate all phi nodes in B.  If ssa form\n      is not up-to-date and a name-mapping is registered, we cannot eliminate\n      any phis.  Symbols marked for renaming are never a problem though.  */\n-  phis = phi_nodes (b);\n-  if (!gimple_seq_empty_p (phis)\n-      && name_mappings_registered_p ())\n-    return false;\n+  for (gsi = gsi_start_phis (b); !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      gimple phi = gsi_stmt (gsi);\n+      /* Technically only new names matter.  */\n+      if (name_registered_for_update_p (PHI_RESULT (phi)))\n+\treturn false;\n+    }\n \n   /* When not optimizing, don't merge if we'd lose goto_locus.  */\n   if (!optimize"}, {"sha": "454445d8637c00e4543674d4178711f3a8a3140e", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06", "patch": "@@ -570,7 +570,6 @@ void delete_update_ssa (void);\n void register_new_name_mapping (tree, tree);\n tree create_new_def_for (tree, gimple, def_operand_p);\n bool need_ssa_update_p (struct function *);\n-bool name_mappings_registered_p (void);\n bool name_registered_for_update_p (tree);\n void release_ssa_name_after_update_ssa (tree);\n void compute_global_livein (bitmap, bitmap);"}, {"sha": "bc70642cdc9d9c0618e518e02f30c91a22f289a9", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 28, "deletions": 94, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=891f2df6ef2e876a4a68d6a57b6b340c3a3a7d06", "patch": "@@ -128,18 +128,6 @@ static bitmap blocks_with_phis_to_rewrite;\n    strategy.  */\n #define NAME_SETS_GROWTH_FACTOR\t(MAX (3, num_ssa_names / 3))\n \n-/* Tuple used to represent replacement mappings.  */\n-struct repl_map_d\n-{\n-  tree name;\n-  bitmap set;\n-};\n-\n-\n-/* NEW -> OLD_SET replacement table.  If we are replacing several\n-   existing SSA names O_1, O_2, ..., O_j with a new name N_i,\n-   then REPL_TBL[N_i] = { O_1, O_2, ..., O_j }.  */\n-static htab_t repl_tbl;\n \n /* The function the SSA updating data structures have been initialized for.\n    NULL if they need to be initialized by register_new_name_mapping.  */\n@@ -157,18 +145,21 @@ struct mark_def_sites_global_data\n /* Information stored for SSA names.  */\n struct ssa_name_info\n {\n-  /* The current reaching definition replacing this SSA name.  */\n-  tree current_def;\n+  /* Age of this record (so that info_for_ssa_name table can be cleared\n+     quickly); if AGE < CURRENT_INFO_FOR_SSA_NAME_AGE, then the fields\n+     are assumed to be null.  */\n+  unsigned age;\n \n   /* This field indicates whether or not the variable may need PHI nodes.\n      See the enum's definition for more detailed information about the\n      states.  */\n   ENUM_BITFIELD (need_phi_state) need_phi_state : 2;\n \n-  /* Age of this record (so that info_for_ssa_name table can be cleared\n-     quickly); if AGE < CURRENT_INFO_FOR_SSA_NAME_AGE, then the fields\n-     are assumed to be null.  */\n-  unsigned age;\n+  /* The current reaching definition replacing this SSA name.  */\n+  tree current_def;\n+\n+  /* Replacement mappings, allocated from update_ssa_obstack.  */\n+  bitmap repl_set;\n };\n \n /* The information associated with names.  */\n@@ -179,6 +170,8 @@ DEF_VEC_ALLOC_P (ssa_name_info_p, heap);\n static VEC(ssa_name_info_p, heap) *info_for_ssa_name;\n static unsigned current_info_for_ssa_name_age;\n \n+static bitmap_obstack update_ssa_obstack;\n+\n /* The set of blocks affected by update_ssa.  */\n static bitmap blocks_to_update;\n \n@@ -288,6 +281,7 @@ get_ssa_name_ann (tree name)\n     {\n       info->need_phi_state = NEED_PHI_STATE_UNKNOWN;\n       info->current_def = NULL_TREE;\n+      info->repl_set = NULL;\n       info->age = current_info_for_ssa_name_age;\n     }\n \n@@ -301,6 +295,10 @@ static void\n clear_ssa_name_info (void)\n {\n   current_info_for_ssa_name_age++;\n+\n+  /* If current_info_for_ssa_name_age wraps we use stale information.\n+     Asser that this does not happen.  */\n+  gcc_assert (current_info_for_ssa_name_age != 0);\n }\n \n \n@@ -573,45 +571,12 @@ is_new_name (tree name)\n }\n \n \n-/* Hashing and equality functions for REPL_TBL.  */\n-\n-static hashval_t\n-repl_map_hash (const void *p)\n-{\n-  return htab_hash_pointer ((const void *)((const struct repl_map_d *)p)->name);\n-}\n-\n-static int\n-repl_map_eq (const void *p1, const void *p2)\n-{\n-  return ((const struct repl_map_d *)p1)->name\n-\t == ((const struct repl_map_d *)p2)->name;\n-}\n-\n-static void\n-repl_map_free (void *p)\n-{\n-  BITMAP_FREE (((struct repl_map_d *)p)->set);\n-  free (p);\n-}\n-\n-\n /* Return the names replaced by NEW_TREE (i.e., REPL_TBL[NEW_TREE].SET).  */\n \n static inline bitmap\n names_replaced_by (tree new_tree)\n {\n-  struct repl_map_d m;\n-  void **slot;\n-\n-  m.name = new_tree;\n-  slot = htab_find_slot (repl_tbl, (void *) &m, NO_INSERT);\n-\n-  /* If N was not registered in the replacement table, return NULL.  */\n-  if (slot == NULL || *slot == NULL)\n-    return NULL;\n-\n-  return ((struct repl_map_d *) *slot)->set;\n+  return get_ssa_name_ann (new_tree)->repl_set;\n }\n \n \n@@ -620,22 +585,10 @@ names_replaced_by (tree new_tree)\n static inline void\n add_to_repl_tbl (tree new_tree, tree old)\n {\n-  struct repl_map_d m, *mp;\n-  void **slot;\n-\n-  m.name = new_tree;\n-  slot = htab_find_slot (repl_tbl, (void *) &m, INSERT);\n-  if (*slot == NULL)\n-    {\n-      mp = XNEW (struct repl_map_d);\n-      mp->name = new_tree;\n-      mp->set = BITMAP_ALLOC (NULL);\n-      *slot = (void *) mp;\n-    }\n-  else\n-    mp = (struct repl_map_d *) *slot;\n-\n-  bitmap_set_bit (mp->set, SSA_NAME_VERSION (old));\n+  bitmap *set = &get_ssa_name_ann (new_tree)->repl_set;\n+  if (!*set)\n+    *set = BITMAP_ALLOC (&update_ssa_obstack);\n+  bitmap_set_bit (*set, SSA_NAME_VERSION (old));\n }\n \n \n@@ -1719,7 +1672,7 @@ htab_statistics (FILE *file, htab_t htab)\n void\n dump_tree_ssa_stats (FILE *file)\n {\n-  if (def_blocks || repl_tbl)\n+  if (def_blocks)\n     fprintf (file, \"\\nHash table statistics:\\n\");\n \n   if (def_blocks)\n@@ -1728,13 +1681,7 @@ dump_tree_ssa_stats (FILE *file)\n       htab_statistics (file, def_blocks);\n     }\n \n-  if (repl_tbl)\n-    {\n-      fprintf (file, \"    repl_tbl:     \");\n-      htab_statistics (file, repl_tbl);\n-    }\n-\n-  if (def_blocks || repl_tbl)\n+  if (def_blocks)\n     fprintf (file, \"\\n\");\n }\n \n@@ -2838,7 +2785,8 @@ init_update_ssa (struct function *fn)\n   new_ssa_names = sbitmap_alloc (num_ssa_names + NAME_SETS_GROWTH_FACTOR);\n   sbitmap_zero (new_ssa_names);\n \n-  repl_tbl = htab_create (20, repl_map_hash, repl_map_eq, repl_map_free);\n+  bitmap_obstack_initialize (&update_ssa_obstack);\n+\n   names_to_release = NULL;\n   update_ssa_initialized_fn = fn;\n }\n@@ -2858,9 +2806,6 @@ delete_update_ssa (void)\n   sbitmap_free (new_ssa_names);\n   new_ssa_names = NULL;\n \n-  htab_delete (repl_tbl);\n-  repl_tbl = NULL;\n-\n   bitmap_clear (SYMS_TO_RENAME (update_ssa_initialized_fn));\n \n   if (names_to_release)\n@@ -2885,6 +2830,9 @@ delete_update_ssa (void)\n \n   BITMAP_FREE (blocks_with_phis_to_rewrite);\n   BITMAP_FREE (blocks_to_update);\n+\n+  bitmap_obstack_release (&update_ssa_obstack);\n+\n   update_ssa_initialized_fn = NULL;\n }\n \n@@ -2957,19 +2905,6 @@ need_ssa_update_p (struct function *fn)\n \t      && !bitmap_empty_p (SYMS_TO_RENAME (fn))));\n }\n \n-/* Return true if SSA name mappings have been registered for SSA updating.  */\n-\n-bool\n-name_mappings_registered_p (void)\n-{\n-  if (!update_ssa_initialized_fn)\n-    return false;\n-\n-  gcc_assert (update_ssa_initialized_fn == cfun);\n-\n-  return repl_tbl && htab_elements (repl_tbl) > 0;\n-}\n-\n /* Return true if name N has been registered in the replacement table.  */\n \n bool\n@@ -3212,7 +3147,6 @@ update_ssa (unsigned update_flags)\n     {\n       sbitmap_zero (old_ssa_names);\n       sbitmap_zero (new_ssa_names);\n-      htab_empty (repl_tbl);\n     }\n \n   insert_phi_p = (update_flags != TODO_update_ssa_no_phi);"}]}