{"sha": "2c9fd13e905b68909db52d6868645790f935e35a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM5ZmQxM2U5MDViNjg5MDlkYjUyZDY4Njg2NDU3OTBmOTM1ZTM1YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-12-14T12:43:57Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-12-14T12:43:57Z"}, "message": "sse-14.c (test_1, [...]): New macros to test macroized SSE intrinsics.\n\n\t* gcc.target/i386/sse-14.c (test_1, test_2, test_2x, test_4): New\n\tmacros to test macroized SSE intrinsics.  Use new macros to test\n\tmacroized SSE intrinsics from ammintrin.h, smmintrin.h, tmmintrin.h,\n\temmintrin.h, xmmintrin.h and bmmintrin.h\n\t* gcc.target/i386/sse-13.c (__builtin_ia32_pcmp?str*128): Redefine\n\tto test with immediate operand.\n\nFrom-SVN: r130930", "tree": {"sha": "44e6d681b4e691d75ad114fbc2e53783ef7e2949", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44e6d681b4e691d75ad114fbc2e53783ef7e2949"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c9fd13e905b68909db52d6868645790f935e35a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c9fd13e905b68909db52d6868645790f935e35a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c9fd13e905b68909db52d6868645790f935e35a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c9fd13e905b68909db52d6868645790f935e35a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e96e22e379b2e9773c48d9ea476be5d72a311d96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96e22e379b2e9773c48d9ea476be5d72a311d96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e96e22e379b2e9773c48d9ea476be5d72a311d96"}], "stats": {"total": 208, "additions": 170, "deletions": 38}, "files": [{"sha": "4254d0fc17c14c71f33bd2e4ac4497b62daadcc8", "filename": "gcc/config/i386/bmmintrin.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Fconfig%2Fi386%2Fbmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Fconfig%2Fi386%2Fbmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmmintrin.h?ref=2c9fd13e905b68909db52d6868645790f935e35a", "patch": "@@ -375,14 +375,14 @@ _mm_roti_epi64(__m128i __A, const int __B)\n   return  (__m128i) __builtin_ia32_protqi ((__v2di)__A, __B);\n }\n #else\n-#define _mm_roti_epi8(A, B) \\\n-  ((__m128i) __builtin_ia32_protbi ((__v16qi)(__m128i)(A), (int)(B)))\n-#define _mm_roti_epi16(A, B) \\\n-  ((__m128i) __builtin_ia32_protwi ((__v8hi)(__m128i)(A), (int)(B)))\n-#define _mm_roti_epi32(A, B) \\\n-  ((__m128i) __builtin_ia32_protdi ((__v4si)(__m128i)(A), (int)(B)))\n-#define _mm_roti_epi64(A, B) \\\n-  ((__m128i) __builtin_ia32_protqi ((__v2di)(__m128i)(A), (int)(B))\n+#define _mm_roti_epi8(A, N) \\\n+  ((__m128i) __builtin_ia32_protbi ((__v16qi)(__m128i)(A), (int)(N)))\n+#define _mm_roti_epi16(A, N) \\\n+  ((__m128i) __builtin_ia32_protwi ((__v8hi)(__m128i)(A), (int)(N)))\n+#define _mm_roti_epi32(A, N) \\\n+  ((__m128i) __builtin_ia32_protdi ((__v4si)(__m128i)(A), (int)(N)))\n+#define _mm_roti_epi64(A, N) \\\n+  ((__m128i) __builtin_ia32_protqi ((__v2di)(__m128i)(A), (int)(N)))\n #endif\n \n /* pshl */"}, {"sha": "c5bbe8bf82ad265f9b262fd784d0975f7580ac20", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=2c9fd13e905b68909db52d6868645790f935e35a", "patch": "@@ -887,9 +887,9 @@ _mm_shuffle_pd(__m128d __A, __m128d __B, const int __mask)\n   return (__m128d)__builtin_ia32_shufpd ((__v2df)__A, (__v2df)__B, __mask);\n }\n #else\n-#define _mm_shuffle_pd(__A, __B, __C)\t\t\t\t\t\\\n-  ((__m128d)__builtin_ia32_shufpd ((__v2df)(__m128d)__A,\t\t\\\n-\t\t\t\t   (__v2df)(__m128d)__B, (int)(__C)))\n+#define _mm_shuffle_pd(A, B, N)\t\t\t\t\t\t\\\n+  ((__m128d)__builtin_ia32_shufpd ((__v2df)(__m128d)(A),\t\t\\\n+\t\t\t\t   (__v2df)(__m128d)(B), (int)(N)))\n #endif\n \n static __inline __m128d __attribute__((__always_inline__, __artificial__))\n@@ -1146,21 +1146,21 @@ _mm_srai_epi32 (__m128i __A, int __B)\n \n #ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_srli_si128 (__m128i __A, const int __B)\n+_mm_srli_si128 (__m128i __A, const int __N)\n {\n-  return (__m128i)__builtin_ia32_psrldqi128 (__A, __B * 8);\n+  return (__m128i)__builtin_ia32_psrldqi128 (__A, __N * 8);\n }\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_slli_si128 (__m128i __A, const int __B)\n+_mm_slli_si128 (__m128i __A, const int __N)\n {\n-  return (__m128i)__builtin_ia32_pslldqi128 (__A, __B * 8);\n+  return (__m128i)__builtin_ia32_pslldqi128 (__A, __N * 8);\n }\n #else\n-#define _mm_srli_si128(__A, __B) \\\n-  ((__m128i)__builtin_ia32_psrldqi128 (__A, (__B) * 8))\n-#define _mm_slli_si128(__A, __B) \\\n-  ((__m128i)__builtin_ia32_pslldqi128 (__A, (__B) * 8))\n+#define _mm_srli_si128(A, N) \\\n+  ((__m128i)__builtin_ia32_psrldqi128 ((__m128i)(A), (int)(N) * 8))\n+#define _mm_slli_si128(A, N) \\\n+  ((__m128i)__builtin_ia32_pslldqi128 ((__m128i)(A), (int)(N) * 8))\n #endif\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n@@ -1382,12 +1382,12 @@ _mm_shuffle_epi32 (__m128i __A, const int __mask)\n   return (__m128i)__builtin_ia32_pshufd ((__v4si)__A, __mask);\n }\n #else\n-#define _mm_shufflehi_epi16(__A, __B) \\\n-  ((__m128i)__builtin_ia32_pshufhw ((__v8hi)(__m128i)__A, (int)__B))\n-#define _mm_shufflelo_epi16(__A, __B) \\\n-  ((__m128i)__builtin_ia32_pshuflw ((__v8hi)(__m128i)__A, (int)__B))\n-#define _mm_shuffle_epi32(__A, __B) \\\n-  ((__m128i)__builtin_ia32_pshufd ((__v4si)(__m128i)__A, (int)__B))\n+#define _mm_shufflehi_epi16(A, N) \\\n+  ((__m128i)__builtin_ia32_pshufhw ((__v8hi)(__m128i)(A), (int)(N)))\n+#define _mm_shufflelo_epi16(A, N) \\\n+  ((__m128i)__builtin_ia32_pshuflw ((__v8hi)(__m128i)(A), (int)(N)))\n+#define _mm_shuffle_epi32(A, N) \\\n+  ((__m128i)__builtin_ia32_pshufd ((__v4si)(__m128i)(A), (int)(N)))\n #endif\n \n static __inline void __attribute__((__always_inline__, __artificial__))"}, {"sha": "e5b0ae04c0f138c7a21e69a909d41f93ecdc0d74", "filename": "gcc/config/i386/smmintrin.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsmmintrin.h?ref=2c9fd13e905b68909db52d6868645790f935e35a", "patch": "@@ -341,9 +341,9 @@ _mm_extract_epi64 (__m128i __X, const int __N)\n #endif\n #else\n #define _mm_extract_epi8(X, N) \\\n-  __builtin_ia32_vec_ext_v16qi ((__v16qi)(__m128i)(X), (int)(N))\n+  ((int) __builtin_ia32_vec_ext_v16qi ((__v16qi)(__m128i)(X), (int)(N)))\n #define _mm_extract_epi32(X, N) \\\n-  __builtin_ia32_vec_ext_v4si ((__v4si)(__m128i)(X), (int)(N))\n+  ((int) __builtin_ia32_vec_ext_v4si ((__v4si)(__m128i)(X), (int)(N)))\n \n #ifdef __x86_64__\n #define _mm_extract_epi64(X, N) \\\n@@ -544,7 +544,7 @@ _mm_cmpestri (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)\n #define _mm_cmpestri(X, LX, Y, LY, M)\t\t\t\t\t\\\n   ((int) __builtin_ia32_pcmpestri128 ((__v16qi)(__m128i)(X), (int)(LX),\t\\\n \t\t\t\t      (__v16qi)(__m128i)(Y), (int)(LY),\t\\\n-\t\t\t\t      (int)(M))\n+\t\t\t\t      (int)(M)))\n #endif\n \n /* Intrinsics for text/string processing and reading values of"}, {"sha": "0e6a0d49e6f0a59a4b487cd794ad7aaf3d94512f", "filename": "gcc/config/i386/tmmintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ftmmintrin.h?ref=2c9fd13e905b68909db52d6868645790f935e35a", "patch": "@@ -201,8 +201,8 @@ _mm_alignr_pi8(__m64 __X, __m64 __Y, const int __N)\n \t\t\t\t\t(__v2di)(__m128i)(Y),\t\t\\\n \t\t\t\t\t(int)(N) * 8))\n #define _mm_alignr_pi8(X, Y, N)\t\t\t\t\t\t\\\n-  ((__m64) __builtin_ia32_palignr ((long long)(__m64)(__X),\t\t\\\n-\t\t\t\t   (long long)(__m64)(__Y),\t\t\\\n+  ((__m64) __builtin_ia32_palignr ((long long)(__m64)(X),\t\t\\\n+\t\t\t\t   (long long)(__m64)(Y),\t\t\\\n \t\t\t\t   (int)(N) * 8))\n #endif\n "}, {"sha": "18b659b2483b8398b77964613d8395d09f935765", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=2c9fd13e905b68909db52d6868645790f935e35a", "patch": "@@ -1007,8 +1007,8 @@ _m_pextrw (__m64 const __A, int const __N)\n #else\n #define _mm_extract_pi16(A, N)\t\\\n   ((int) __builtin_ia32_vec_ext_v4hi ((__v4hi)(__m64)(A), (int)(N)))\n-#define _m_pextrw(A, N) \\\n-  ((int) _mm_extract_pi16((__m64)(A),(int)(N)))\n+\n+#define _m_pextrw(A, N) _mm_extract_pi16(A, N)\n #endif\n \n /* Inserts word D into one of four words of A.  The selector N must be\n@@ -1029,8 +1029,8 @@ _m_pinsrw (__m64 const __A, int const __D, int const __N)\n #define _mm_insert_pi16(A, D, N)\t\t\t\t\\\n   ((__m64) __builtin_ia32_vec_set_v4hi ((__v4hi)(__m64)(A),\t\\\n \t\t\t\t\t(int)(D), (int)(N)))\n-#define _m_pinsrw(A, D, N) \\\n-  ((__m64) _mm_insert_pi16((__m64)(A), (int)(D), (int)(N))\n+\n+#define _m_pinsrw(A, D, N) _mm_insert_pi16(A, D, N)\n #endif\n \n /* Compute the element-wise maximum of signed 16-bit values.  */\n@@ -1129,8 +1129,8 @@ _m_pshufw (__m64 __A, int const __N)\n #else\n #define _mm_shuffle_pi16(A, N) \\\n   ((__m64) __builtin_ia32_pshufw ((__v4hi)(__m64)(A), (int)(N)))\n-#define _m_pshufw(A, N) \\\n-  ((__m64) _mm_shuffle_pi16 ((__m64)(A), (int)(N))\n+\n+#define _m_pshufw(A, N) _mm_shuffle_pi16 (A, N)\n #endif\n \n /* Conditionally store byte elements of A into P.  The high bit of each"}, {"sha": "35c1880463ed30775cc0bb37ef33a85dea9958d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c9fd13e905b68909db52d6868645790f935e35a", "patch": "@@ -1,3 +1,12 @@\n+2007-12-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse-14.c (test_1, test_2, test_2x, test_4): New\n+\tmacros to test macroized SSE intrinsics.  Use new macros to test\n+\tmacroized SSE intrinsics from ammintrin.h, smmintrin.h, tmmintrin.h,\n+\temmintrin.h, xmmintrin.h and bmmintrin.h\n+\t* gcc.target/i386/sse-13.c (__builtin_ia32_pcmp?str*128): Redefine\n+\tto test with immediate operand.\n+\n 2007-12-13  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/34091"}, {"sha": "e6dda69048275bf31fd3c6639ac9782b44f8050d", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=2c9fd13e905b68909db52d6868645790f935e35a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -march=k8 -m3dnow -msse4.1 -msse5 \" } */\n+/* { dg-options \"-O2 -march=k8 -m3dnow -msse4.1 -msse5\" } */\n \n /* Test that the intrinsics compile with optimization.  All of them are\n    defined as inline functions in {,x,e,p,t,s,a,b}mmintrin.h and mm3dnow.h\n@@ -34,6 +34,34 @@\n #define __builtin_ia32_roundps(V, M) __builtin_ia32_roundps(V, 1)\n #define __builtin_ia32_roundss(D, V, M) __builtin_ia32_roundss(D, V, 1)\n #define __builtin_ia32_mpsadbw128(X, Y, M) __builtin_ia32_mpsadbw128(X, Y, 1)\n+#define __builtin_ia32_pcmpistrm128(X, Y, M) \\\n+  __builtin_ia32_pcmpistrm128(X, Y, 1)\n+#define __builtin_ia32_pcmpistri128(X, Y, M) \\\n+  __builtin_ia32_pcmpistri128(X, Y, 1)\n+#define __builtin_ia32_pcmpestrm128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestrm128(X, LX, Y, LY, 1)\n+#define __builtin_ia32_pcmpestri128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestri128(X, LX, Y, LY, 1)\n+#define __builtin_ia32_pcmpistria128(X, Y, M) \\\n+  __builtin_ia32_pcmpistria128(X, Y, 1)\n+#define __builtin_ia32_pcmpistric128(X, Y, M) \\\n+  __builtin_ia32_pcmpistric128(X, Y, 1)\n+#define __builtin_ia32_pcmpistrio128(X, Y, M) \\\n+  __builtin_ia32_pcmpistrio128(X, Y, 1)\n+#define __builtin_ia32_pcmpistris128(X, Y, M) \\\n+  __builtin_ia32_pcmpistris128(X, Y, 1)\n+#define __builtin_ia32_pcmpistriz128(X, Y, M) \\\n+  __builtin_ia32_pcmpistriz128(X, Y, 1)\n+#define __builtin_ia32_pcmpestria128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestria128(X, LX, Y, LY, 1)\n+#define __builtin_ia32_pcmpestric128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestric128(X, LX, Y, LY, 1)\n+#define __builtin_ia32_pcmpestrio128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestrio128(X, LX, Y, LY, 1)\n+#define __builtin_ia32_pcmpestris128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestris128(X, LX, Y, LY, 1)\n+#define __builtin_ia32_pcmpestriz128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestriz128(X, LX, Y, LY, 1)\n \n /* tmmintrin.h */\n #define __builtin_ia32_palignr128(X, Y, N) __builtin_ia32_palignr128(X, Y, 8)"}, {"sha": "ff8a9ffa4882e61c7d03643c48ee05956a7bb8e7", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 96, "deletions": 1, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9fd13e905b68909db52d6868645790f935e35a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=2c9fd13e905b68909db52d6868645790f935e35a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -march=k8 -m3dnow -msse4.1 -msse5\" } */\n+/* { dg-options \"-O0 -march=k8 -m3dnow -msse4 -msse5\" } */\n \n /* Test that the intrinsics compile without optimization.  All of them are\n    defined as inline functions in {,x,e,p,t,s,a,b}mmintrin.h  and mm3dnow.h\n@@ -12,3 +12,98 @@\n #include <bmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>\n+\n+#define _CONCAT(x,y) x ## y\n+\n+#define test_1(func, type, op1_type, imm)\t\t\t\t\\\n+  type _CONCAT(_,func) (op1_type A, int const I)\t\t\t\\\n+  { return func (A, imm); }\n+\n+#define test_1x(func, type, op1_type, imm1, imm2)\t\t\t\\\n+  type _CONCAT(_,func) (op1_type A, int const I, int const L)\t\t\\\n+  { return func (A, imm1, imm2); }\n+\n+#define test_2(func, type, op1_type, op2_type, imm)\t\t\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B, int const I)\t\t\\\n+  { return func (A, B, imm); }\n+\n+#define test_2x(func, type, op1_type, op2_type, imm1, imm2)\t\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L) \\\n+  { return func (A, B, imm1, imm2); }\n+\n+#define test_4(func, type, op1_type, op2_type, op3_type, op4_type, imm)\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n+\t\t\top3_type C, op4_type D, int const I)\t\t\\\n+  { return func (A, B, C, D, imm); }\n+\n+\n+/* Following intrinsics require immediate arguments.  They\n+   are defined as macros for non-optimized compilations. */\n+\n+/* ammintrin.h */\n+test_1x (_mm_extracti_si64, __m128i, __m128i, 1, 1)\n+test_2x (_mm_inserti_si64, __m128i, __m128i, __m128i, 1, 1)\n+\n+/* smmintrin.h */\n+test_2 (_mm_blend_epi16, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_blend_ps, __m128, __m128, __m128, 1)\n+test_2 (_mm_blend_pd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_dp_ps, __m128, __m128, __m128, 1)\n+test_2 (_mm_dp_pd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_insert_ps, __m128, __m128, __m128, 1)\n+test_1 (_mm_extract_ps, int, __m128, 1)\n+test_2 (_mm_insert_epi8, __m128i, __m128i, int, 1)\n+test_2 (_mm_insert_epi32, __m128i, __m128i, int, 1)\n+#ifdef __x86_64__\n+test_2 (_mm_insert_epi64, __m128i, __m128i, long long, 1)\n+#endif\n+test_1 (_mm_extract_epi8, int, __m128i, 1)\n+test_1 (_mm_extract_epi32, int, __m128i, 1)\n+#ifdef __x86_64__\n+test_1 (_mm_extract_epi64, long long, __m128i, 1)\n+#endif\n+test_2 (_mm_mpsadbw_epu8, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_cmpistrm, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_cmpistri, int, __m128i, __m128i, 1)\n+test_4 (_mm_cmpestrm, __m128i, __m128i, int, __m128i, int, 1)\n+test_4 (_mm_cmpestri, int, __m128i, int, __m128i, int, 1)\n+test_2 (_mm_cmpistra, int, __m128i, __m128i, 1)\n+test_2 (_mm_cmpistrc, int, __m128i, __m128i, 1)\n+test_2 (_mm_cmpistro, int, __m128i, __m128i, 1)\n+test_2 (_mm_cmpistrs, int, __m128i, __m128i, 1)\n+test_2 (_mm_cmpistrz, int, __m128i, __m128i, 1)\n+test_4 (_mm_cmpestra, int, __m128i, int, __m128i, int, 1)\n+test_4 (_mm_cmpestrc, int, __m128i, int, __m128i, int, 1)\n+test_4 (_mm_cmpestro, int, __m128i, int, __m128i, int, 1)\n+test_4 (_mm_cmpestrs, int, __m128i, int, __m128i, int, 1)\n+test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n+\n+/* tmmintrin.h */\n+test_2 (_mm_alignr_epi8, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_alignr_pi8, __m64, __m64, __m64, 1)\n+\n+/* emmintrin.h */\n+test_2 (_mm_shuffle_pd, __m128d, __m128d, __m128d, 1)\n+test_1 (_mm_srli_si128, __m128i, __m128i, 1)\n+test_1 (_mm_slli_si128, __m128i, __m128i, 1)\n+test_1 (_mm_extract_epi16, int, __m128i, 1)\n+test_2 (_mm_insert_epi16, __m128i, __m128i, int, 1)\n+test_1 (_mm_shufflehi_epi16, __m128i, __m128i, 1)\n+test_1 (_mm_shufflelo_epi16, __m128i, __m128i, 1)\n+test_1 (_mm_shuffle_epi32, __m128i, __m128i, 1)\n+\n+/* xmmintrin.h */\n+test_2 (_mm_shuffle_ps, __m128, __m128, __m128, 1)\n+test_1 (_mm_extract_pi16, int, __m64, 1)\n+test_1 (_m_pextrw, int, __m64, 1)\n+test_2 (_mm_insert_pi16, __m64, __m64, int, 1)\n+test_2 (_m_pinsrw, __m64, __m64, int, 1)\n+test_1 (_mm_shuffle_pi16, __m64, __m64, 1)\n+test_1 (_m_pshufw, __m64, __m64, 1)\n+test_1 (_mm_prefetch, void, void *, _MM_HINT_NTA)\n+\n+/* bmmintrin.h */\n+test_1 (_mm_roti_epi8, __m128i, __m128i, 1)\n+test_1 (_mm_roti_epi16, __m128i, __m128i, 1)\n+test_1 (_mm_roti_epi32, __m128i, __m128i, 1)\n+test_1 (_mm_roti_epi64, __m128i, __m128i, 1)"}]}