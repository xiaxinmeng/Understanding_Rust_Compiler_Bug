{"sha": "886ca18fe8aded5885fc3a28d48c3551ee963df3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2Y2ExOGZlOGFkZWQ1ODg1ZmMzYTI4ZDQ4YzM1NTFlZTk2M2RmMw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2004-02-26T14:30:13Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2004-02-26T14:30:13Z"}, "message": "20000724-1.c: Add regparm attribute to decl and def.\n\n        * gcc.dg/20000724-1.c: Add regparm attribute to decl and def.\n        * gcc.dg/991214-1.c: Likewise.\n        * gcc.dg/i386-asm-1.c: Likewise.\n\nFrom-SVN: r78500", "tree": {"sha": "f964c7d19cb757e015c5ffd9a964c1b44471980e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f964c7d19cb757e015c5ffd9a964c1b44471980e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/886ca18fe8aded5885fc3a28d48c3551ee963df3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886ca18fe8aded5885fc3a28d48c3551ee963df3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886ca18fe8aded5885fc3a28d48c3551ee963df3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886ca18fe8aded5885fc3a28d48c3551ee963df3/comments", "author": null, "committer": null, "parents": [{"sha": "cec0e70b442f27e1eab654061caf454de8e1ea5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec0e70b442f27e1eab654061caf454de8e1ea5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec0e70b442f27e1eab654061caf454de8e1ea5e"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "3c4f2c3940941c9e1a1e85db78b663df2afd37f6", "filename": "gcc/testsuite/gcc.dg/20000724-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886ca18fe8aded5885fc3a28d48c3551ee963df3/gcc%2Ftestsuite%2Fgcc.dg%2F20000724-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886ca18fe8aded5885fc3a28d48c3551ee963df3/gcc%2Ftestsuite%2Fgcc.dg%2F20000724-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20000724-1.c?ref=886ca18fe8aded5885fc3a28d48c3551ee963df3", "patch": "@@ -22,7 +22,7 @@ int baz(void *x)\n \n void do_check (struct s *) asm (\"do_check\") __attribute__((regparm(1)));\n \n-void do_check(struct s *x)\n+void __attribute__((regparm(1))) do_check(struct s *x)\n {\n   if (x->a.a || x->b || x->c.a.a)\n     abort();"}, {"sha": "68b6b927916fc31183462540e36a9b8b592ee1e8", "filename": "gcc/testsuite/gcc.dg/991214-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886ca18fe8aded5885fc3a28d48c3551ee963df3/gcc%2Ftestsuite%2Fgcc.dg%2F991214-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886ca18fe8aded5885fc3a28d48c3551ee963df3/gcc%2Ftestsuite%2Fgcc.dg%2F991214-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F991214-1.c?ref=886ca18fe8aded5885fc3a28d48c3551ee963df3", "patch": "@@ -4,7 +4,7 @@\n /* Test against a problem with the combiner substituting explicit hard reg\n    references when it shouldn't.  */\n void foo (int, int) __attribute__ ((regparm (3)));\n-void foo (int x, int y)\n+void __attribute__((regparm(3))) foo (int x, int y)\n {\n   __asm__ __volatile__(\"\" : : \"d\" (x), \"r\" (y));\n }"}, {"sha": "bf7aa1d0c4b55bcdf7c13ed121d20001a0a87019", "filename": "gcc/testsuite/gcc.dg/i386-asm-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886ca18fe8aded5885fc3a28d48c3551ee963df3/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-asm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886ca18fe8aded5885fc3a28d48c3551ee963df3/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-asm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-asm-1.c?ref=886ca18fe8aded5885fc3a28d48c3551ee963df3", "patch": "@@ -2,7 +2,7 @@\n /* { dg-do run { target i?86-*-* } } */\n /* { dg-options \"-O2\" } */\n \n-static int bar(int x) __asm__(\"bar\");\n+static int bar(int x) __asm__(\"bar\") __attribute__((regparm(1)));\n static int __attribute__((regparm(1), noinline, used))\n bar(int x)\n {"}]}