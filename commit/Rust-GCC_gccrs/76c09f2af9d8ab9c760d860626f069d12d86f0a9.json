{"sha": "76c09f2af9d8ab9c760d860626f069d12d86f0a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZjMDlmMmFmOWQ4YWI5Yzc2MGQ4NjA2MjZmMDY5ZDEyZDg2ZjBhOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-12-10T10:12:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-12-10T11:36:19Z"}, "message": "tree-optimization/98211 - fix bogus vectorization of conversion\n\nPattern recog incompletely handles some bool cases but we shouldn't\nmiscompile as a result but not vectorize.  Unfortunately\nvectorizable_assignment lets invalid conversions (that\nvectorizable_conversion rejects) slip through.  The following\nrectifies that.\n\n2020-12-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98211\n\t* tree-vect-stmts.c (vectorizable_assignment): Disallow\n\tinvalid conversions to bool vector types.\n\n\t* gcc.dg/pr98211.c: New testcase.", "tree": {"sha": "8d65a235ca07924d52b8d5e7953aa44dad9c07f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d65a235ca07924d52b8d5e7953aa44dad9c07f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76c09f2af9d8ab9c760d860626f069d12d86f0a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c09f2af9d8ab9c760d860626f069d12d86f0a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c09f2af9d8ab9c760d860626f069d12d86f0a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c09f2af9d8ab9c760d860626f069d12d86f0a9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2a5e5f3e6d770d16ad3c48c753a952a40c09c16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a5e5f3e6d770d16ad3c48c753a952a40c09c16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a5e5f3e6d770d16ad3c48c753a952a40c09c16"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "cea371dcee778a28030deb948809a4fa076ab295", "filename": "gcc/testsuite/gcc.dg/pr98211.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c09f2af9d8ab9c760d860626f069d12d86f0a9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98211.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c09f2af9d8ab9c760d860626f069d12d86f0a9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98211.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98211.c?ref=76c09f2af9d8ab9c760d860626f069d12d86f0a9", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu90 -O3 -fgimple\" } */\n+\n+int test_var_3;\n+short arr_20[16];\n+void __GIMPLE (ssa,startwith(\"slp\"))\n+test (int var_1, short int a, short int b, short int c, short int d)\n+{\n+  _Bool tem2;\n+  _Bool tem;\n+  unsigned int i_5;\n+  int _24;\n+  _Bool _28;\n+  short int _30;\n+  short int _32;\n+\n+  __BB(2):\n+  _24 = test_var_3;\n+  tem_25 = _24 != 0;\n+  tem2_26 = var_1_11(D) != 0;\n+  _28 = tem_25 | tem2_26;\n+  _30 = _28 !=  _Literal (_Bool) 0 ? a_16(D) : b_15(D);\n+  arr_20[0u] = _30;\n+  _32 = _28 != _Literal (_Bool) 0 ? c_19(D) : d_18(D);\n+  arr_20[8u] = _32;\n+  arr_20[1u] = _30;\n+  arr_20[9u] = _32;\n+  arr_20[2u] = _30;\n+  arr_20[10u] = _32;\n+  arr_20[3u] = _30;\n+  arr_20[11u] = _32;\n+  arr_20[4u] = _30;\n+  arr_20[12u] = _32;\n+  arr_20[5u] = _30;\n+  arr_20[13u] = _32;\n+  arr_20[6u] = _30;\n+  arr_20[14u] = _32;\n+  arr_20[7u] = _30;\n+  arr_20[15u] = _32;\n+  return;\n+}\n+\n+\n+int\n+main()\n+{\n+  test (1, 0x88, 0x77, 0x77, 0x88);\n+  if (arr_20[0] != 0x88)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "d3ab8aa1c29a2bd944ae2d4c7285c67be3457c1d", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c09f2af9d8ab9c760d860626f069d12d86f0a9/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c09f2af9d8ab9c760d860626f069d12d86f0a9/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=76c09f2af9d8ab9c760d860626f069d12d86f0a9", "patch": "@@ -5123,6 +5123,17 @@ vectorizable_assignment (vec_info *vinfo,\n \t\t       GET_MODE_SIZE (TYPE_MODE (vectype_in)))))\n     return false;\n \n+  if (VECTOR_BOOLEAN_TYPE_P (vectype)\n+      && !VECTOR_BOOLEAN_TYPE_P (vectype_in))\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"can't convert between boolean and non \"\n+\t\t\t \"boolean vectors %T\\n\", TREE_TYPE (op));\n+\n+      return false;\n+    }\n+\n   /* We do not handle bit-precision changes.  */\n   if ((CONVERT_EXPR_CODE_P (code)\n        || code == VIEW_CONVERT_EXPR)"}]}