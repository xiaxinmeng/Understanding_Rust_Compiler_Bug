{"sha": "60e957d071f9ff4e41cf93088aaf18fcbe2dfa92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBlOTU3ZDA3MWY5ZmY0ZTQxY2Y5MzA4OGFhZjE4ZmNiZTJkZmE5Mg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2004-04-21T07:19:24Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-21T07:19:24Z"}, "message": "gthread-jni.c (maybe_rethrow): Explicitly malloc and free buf.\n\n2004-04-21  Mark Wielaard  <mark@klomp.org>\n\n\t* native/jni/gtk-peer/gthread-jni.c (maybe_rethrow): Explicitly\n\tmalloc and free buf.\n\nFrom-SVN: r80948", "tree": {"sha": "e228a00130bdada5c95b26a492fd1fd589a45850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e228a00130bdada5c95b26a492fd1fd589a45850"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60e957d071f9ff4e41cf93088aaf18fcbe2dfa92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e957d071f9ff4e41cf93088aaf18fcbe2dfa92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60e957d071f9ff4e41cf93088aaf18fcbe2dfa92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e957d071f9ff4e41cf93088aaf18fcbe2dfa92/comments", "author": null, "committer": null, "parents": [{"sha": "27dd18cf734dfdd6aba03fab66044a9aa911054a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27dd18cf734dfdd6aba03fab66044a9aa911054a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27dd18cf734dfdd6aba03fab66044a9aa911054a"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "4b23a1fba8b1dbfa000daa11ef24cda8a86c5906", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e957d071f9ff4e41cf93088aaf18fcbe2dfa92/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e957d071f9ff4e41cf93088aaf18fcbe2dfa92/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=60e957d071f9ff4e41cf93088aaf18fcbe2dfa92", "patch": "@@ -1,3 +1,8 @@\n+2004-04-21  Mark Wielaard  <mark@klomp.org>\n+\n+\t* native/jni/gtk-peer/gthread-jni.c (maybe_rethrow): Explicitly\n+\tmalloc and free buf.\n+\n 2004-04-21  Dalibor Topic  <robilad@kaffe.org>\n \n \t* javax/naming/AuthenticationException.java,"}, {"sha": "b21a80c8843ce2c5c1309749e04ebf9c8cf04caa", "filename": "libjava/jni/gtk-peer/gthread-jni.c", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e957d071f9ff4e41cf93088aaf18fcbe2dfa92/libjava%2Fjni%2Fgtk-peer%2Fgthread-jni.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e957d071f9ff4e41cf93088aaf18fcbe2dfa92/libjava%2Fjni%2Fgtk-peer%2Fgthread-jni.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgthread-jni.c?ref=60e957d071f9ff4e41cf93088aaf18fcbe2dfa92", "patch": "@@ -91,28 +91,40 @@ JavaVM *gdk_vm;\n static void maybe_rethrow(JNIEnv *gdk_env, char *message, char *file, int line) {\n   jthrowable cause;\n \n-  /* rethrow if an exception happened */\n-  if ((cause = (*gdk_env)->ExceptionOccurred(gdk_env)) != NULL) {\n     jstring jmessage;\n-  jclass obj_class;\n+    jclass obj_class;\n     jobject obj;\n     jmethodID ctor;\n-\n-    /* allocate local message in Java */\n-    int len = strlen(message) + strlen(file) + 25;\n-    char buf[ len ];\n-    bzero(buf, len);\n-    sprintf(buf, \"%s (at %s:%d)\", message, file, line);\n-    jmessage = (*gdk_env)->NewStringUTF(gdk_env, buf);\n+    int len;\n+    char *buf;\n+\n+    /* rethrow if an exception happened */\n+    if ((cause = (*gdk_env)->ExceptionOccurred(gdk_env)) != NULL)\n+      {\n+\n+\t/* allocate local message in Java */\n+\tlen = strlen(message) + strlen(file) + 25;\n+\tbuf = (char *) malloc(len);\n+\tif (buf != NULL)\n+\t  {\n+\t    bzero(buf, len);\n+\t    sprintf(buf, \"%s (at %s:%d)\", message, file, line);\n+\t    jmessage = (*gdk_env)->NewStringUTF(gdk_env, buf);\n+\t    free(buf);\n+\t  }\n+\telse\n+\t  jmessage = NULL;\n     \n-    /* create RuntimeException wrapper object */\n-    obj_class = (*gdk_env)->FindClass (gdk_env, \"java/lang/RuntimeException\");\n-    ctor = (*gdk_env)->GetMethodID(gdk_env, obj_class, \"<init>\", \"(Ljava/langString;Ljava/lang/Throwable)V\");\n-    obj = (*gdk_env)->NewObject (gdk_env, obj_class, ctor, jmessage, cause);\n-\n-    /* throw it */\n-    (*gdk_env)->Throw(gdk_env, (jthrowable)obj);\n-    }\n+\t/* create RuntimeException wrapper object */\n+\tobj_class = (*gdk_env)->FindClass (gdk_env,\n+\t\t\t\"java/lang/RuntimeException\");\n+\tctor = (*gdk_env)->GetMethodID(gdk_env, obj_class, \"<init>\",\n+\t\"(Ljava/langString;Ljava/lang/Throwable)V\");\n+\tobj = (*gdk_env)->NewObject (gdk_env, obj_class, ctor, jmessage, cause);\n+\n+\t/* throw it */\n+\t(*gdk_env)->Throw(gdk_env, (jthrowable)obj);\n+      }\n }\n \n /* This macro is used to include a source location in the exception message */"}]}