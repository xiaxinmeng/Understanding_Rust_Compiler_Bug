{"sha": "7735d402c405f05343b3ea732426eb5ca4b43b6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzczNWQ0MDJjNDA1ZjA1MzQzYjNlYTczMjQyNmViNWNhNGI0M2I2YQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-11-15T17:52:34Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-11-15T17:52:34Z"}, "message": "re PR c++/24667 (-Wcast-qual fails to warn about offending cast for a old style cast)\n\n\tPR c++/24667\n\t* typeck.c (check_for_casting_away_constness): Use the diag_fn.\n\t(build_const_cast_1): Call it, for C-style casts.\n\tPR c++/24667\n\t* g++.dg/warn/Wcast-qual1.C: New test.\n\nFrom-SVN: r107032", "tree": {"sha": "e55cf621262bd8905304880523a1cf0e0b671073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e55cf621262bd8905304880523a1cf0e0b671073"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7735d402c405f05343b3ea732426eb5ca4b43b6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7735d402c405f05343b3ea732426eb5ca4b43b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7735d402c405f05343b3ea732426eb5ca4b43b6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7735d402c405f05343b3ea732426eb5ca4b43b6a/comments", "author": null, "committer": null, "parents": [{"sha": "2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "c42ef5ca769ecb884df40fdf992fcae95f03e597", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7735d402c405f05343b3ea732426eb5ca4b43b6a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7735d402c405f05343b3ea732426eb5ca4b43b6a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7735d402c405f05343b3ea732426eb5ca4b43b6a", "patch": "@@ -1,3 +1,9 @@\n+2005-11-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/24667\n+\t* typeck.c (check_for_casting_away_constness): Use the diag_fn.\n+\t(build_const_cast_1): Call it, for C-style casts.\n+\n 2005-11-14  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/24687"}, {"sha": "a86ee6a516e4e8938397f9017669c55db7467c45", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7735d402c405f05343b3ea732426eb5ca4b43b6a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7735d402c405f05343b3ea732426eb5ca4b43b6a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7735d402c405f05343b3ea732426eb5ca4b43b6a", "patch": "@@ -4559,8 +4559,8 @@ check_for_casting_away_constness (tree src_type, tree dest_type,\n \t\t\t\t  const char *description)\n {\n   if (diag_fn && casts_away_constness (src_type, dest_type))\n-    error (\"%s from type %qT to type %qT casts away constness\",\n-\t   description, src_type, dest_type);\n+    diag_fn (\"%s from type %qT to type %qT casts away constness\",\n+\t     description, src_type, dest_type);\n }\n \n /* Convert EXPR (an expression with pointer-to-member type) to TYPE\n@@ -5085,9 +5085,9 @@ build_reinterpret_cast (tree type, tree expr)\n /* Perform a const_cast from EXPR to TYPE.  If the cast is valid,\n    return an appropriate expression.  Otherwise, return\n    error_mark_node.  If the cast is not valid, and COMPLAIN is true,\n-   then a diagnostic will be issued.  If VALID_P is non-NULL, its\n-   value upon return will indicate whether or not the conversion\n-   succeeded.  */\n+   then a diagnostic will be issued.  If VALID_P is non-NULL, we are\n+   performing a C-style cast, its value upon return will indicate\n+   whether or not the conversion succeeded.  */\n \n static tree\n build_const_cast_1 (tree dst_type, tree expr, bool complain,\n@@ -5163,7 +5163,15 @@ build_const_cast_1 (tree dst_type, tree expr, bool complain,\n       && comp_ptr_ttypes_const (dst_type, src_type))\n     {\n       if (valid_p)\n-\t*valid_p = true;\n+\t{\n+\t  *valid_p = true;\n+\t  /* This cast is actually a C-style cast.  Issue a warning if\n+\t     the user is making a potentially unsafe cast.  */\n+\t  if (warn_cast_qual)\n+\t    check_for_casting_away_constness (src_type, dst_type,\n+\t\t\t\t\t      warning0,\n+\t\t\t\t\t      \"cast\");\n+\t}\n       if (reference_type)\n \t{\n \t  expr = build_unary_op (ADDR_EXPR, expr, 0);"}, {"sha": "26d56c3cbdaa6b8dff6d174334eb72d2e10ab3ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7735d402c405f05343b3ea732426eb5ca4b43b6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7735d402c405f05343b3ea732426eb5ca4b43b6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7735d402c405f05343b3ea732426eb5ca4b43b6a", "patch": "@@ -1,3 +1,8 @@\n+2005-11-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/24667\n+\t* g++.dg/warn/Wcast-qual1.C: New test.\n+\n 2005-11-15  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/winline-5.c: Add large-unit-insns limit."}, {"sha": "e6ad4f6a06db970c6e9df625a6b01520ac8b7ba2", "filename": "gcc/testsuite/g++.dg/warn/Wcast-qual1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7735d402c405f05343b3ea732426eb5ca4b43b6a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7735d402c405f05343b3ea732426eb5ca4b43b6a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual1.C?ref=7735d402c405f05343b3ea732426eb5ca4b43b6a", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/24667\n+// { dg-options \"-Wcast-qual\" }\n+\n+int main(int, char**) {\n+  const int foo[2] = {1,1};\n+  ((int*)foo)[0] = 0; // { dg-warning \"cast\" }\n+}"}]}