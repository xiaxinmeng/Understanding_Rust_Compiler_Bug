{"sha": "8b62f241abd4d68df89826780294b3f4dc47133c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI2MmYyNDFhYmQ0ZDY4ZGY4OTgyNjc4MDI5NGIzZjRkYzQ3MTMzYw==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-02-01T05:59:17Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-02-01T05:59:17Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r263", "tree": {"sha": "3027b234b60f003efbb63e2250304d5141cd239d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3027b234b60f003efbb63e2250304d5141cd239d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b62f241abd4d68df89826780294b3f4dc47133c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b62f241abd4d68df89826780294b3f4dc47133c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b62f241abd4d68df89826780294b3f4dc47133c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b62f241abd4d68df89826780294b3f4dc47133c/comments", "author": null, "committer": null, "parents": [{"sha": "ed1f651bedab77b128987c0436b5bacd00bc0f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed1f651bedab77b128987c0436b5bacd00bc0f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed1f651bedab77b128987c0436b5bacd00bc0f0d"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "e685b9a19064e6e248d9e7c17cab0cdd8a5a5ee6", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b62f241abd4d68df89826780294b3f4dc47133c/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b62f241abd4d68df89826780294b3f4dc47133c/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=8b62f241abd4d68df89826780294b3f4dc47133c", "patch": "@@ -151,3 +151,77 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n         fprintf ((FILE), \"\\n\");\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n+\n+/* This is how to output an element of a case-vector that is relative.\n+   This is only used for PIC code.  See comments by the `casesi' insn in\n+   i386.md for an explanation of the expression this outputs. */\n+\n+#undef ASM_OUTPUT_ADDR_DIFF_ELT\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL) \\\n+  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n+\n+/* Indicate that jump tables go in the text section.  This is\n+   necessary when compiling PIC code.  */\n+\n+#define JUMP_TABLES_IN_TEXT_SECTION\n+\n+#define WEAK_ASM_OP \".weak\"\n+#define DEF_ASM_OP  \".set\"\n+\n+/* Biggest alignment that any structure field can require on this\n+   machine, in bits.  If packing is in effect, this can be smaller than\n+   normal.  */\n+\n+#define BIGGEST_FIELD_ALIGNMENT \\\n+  (maximum_field_alignment ? maximum_field_alignment : 32)\n+\n+extern int maximum_field_alignment;\n+\n+/* If bit field type is int, don't let it cross an int,\n+   and give entire struct the alignment of an int.  */\n+/* Required on the 386 since it doesn't have bitfield insns.  */\n+/* If packing is in effect, then the type doesn't matter.  */\n+\n+#undef PCC_BITFIELD_TYPE_MATTERS\n+#define PCC_BITFIELD_TYPE_MATTERS (maximum_field_alignment == 0)\n+\n+/* Code to handle #pragma directives.  The interface is a bit messy,\n+   but there's no simpler way to do this while still using yylex.  */\n+#define HANDLE_PRAGMA(FILE)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    while (c == ' ' || c == '\\t')\t\t\t\t\\\n+      c = getc (FILE);\t\t\t\t\t\t\\\n+    if (c == '\\n' || c == EOF)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\thandle_pragma_token (0, 0);\t\t\t\t\\\n+\treturn c;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    ungetc (c, FILE);\t\t\t\t\t\t\\\n+    switch (yylex ())\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+      case IDENTIFIER:\t\t\t\t\t\t\\\n+      case TYPENAME:\t\t\t\t\t\t\\\n+      case STRING:\t\t\t\t\t\t\\\n+      case CONSTANT:\t\t\t\t\t\t\\\n+\thandle_pragma_token (token_buffer, yylval.ttype);\t\\\n+\tbreak;\t\t\t\t\t\t\t\\\n+      default:\t\t\t\t\t\t\t\\\n+\thandle_pragma_token (token_buffer, 0);\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    if (nextchar >= 0)\t\t\t\t\t\t\\\n+      c = nextchar, nextchar = -1;\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      c = getc (FILE);\t\t\t\t\t\t\\\n+  } while (1)\n+\n+/* This says how to output assembler code to declare an\n+   uninitialized internal linkage data object.  Under SVR4,\n+   the linker seems to want the alignment of data objects\n+   to depend on their types.  We do exactly that here.  */\n+\n+#undef ASM_OUTPUT_ALIGNED_LOCAL\n+#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  fprintf (FILE, \"\\t.local\\t%s\\n\", NAME);\t\t\t\t\\\n+  ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN);\t\t\t\\\n+} while (0)"}]}