{"sha": "a9990582a84e6fac0f7274fae1686f209c58c457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk5OTA1ODJhODRlNmZhYzBmNzI3NGZhZTE2ODZmMjA5YzU4YzQ1Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-01-08T16:29:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-01-08T16:29:14Z"}, "message": "re PR tree-optimization/34683 (SSA rewriting in the loop unroller causes quadratic behavior)\n\n2008-01-08  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/34683\n\t* tree-ssa-operands.c (operand_build_cmp): Export.\n\t* tree-ssa-operands.h (operand_build_cmp): Declare.\n\t* tree-vn.c (vuses_compare): Remove.\n\t(sort_vuses): Use operand_build_cmp.\n\t(sort_vuses_heap): Likewise.\n\t* tree-ssa-sccvn.c (vuses_to_vec): Use VEC_reserve, not VEC_alloc\n\tto re-use old VEC if available.  Do not sort already sorted VUSEs.\n\t(vdefs_to_vec): Do not sort already sorted VDEFs.\n\nFrom-SVN: r131400", "tree": {"sha": "ecfed3abf31acdafc39792d76273a9ef575c689c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecfed3abf31acdafc39792d76273a9ef575c689c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9990582a84e6fac0f7274fae1686f209c58c457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9990582a84e6fac0f7274fae1686f209c58c457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9990582a84e6fac0f7274fae1686f209c58c457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9990582a84e6fac0f7274fae1686f209c58c457/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f3e711eef24f6b00e7dc462288c064d68a9ec43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3e711eef24f6b00e7dc462288c064d68a9ec43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f3e711eef24f6b00e7dc462288c064d68a9ec43"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "3bf8fb163375cf961b8c9dc200831eb5f6154517", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9990582a84e6fac0f7274fae1686f209c58c457/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9990582a84e6fac0f7274fae1686f209c58c457/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9990582a84e6fac0f7274fae1686f209c58c457", "patch": "@@ -1,3 +1,15 @@\n+2008-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/34683\n+\t* tree-ssa-operands.c (operand_build_cmp): Export.\n+\t* tree-ssa-operands.h (operand_build_cmp): Declare.\n+\t* tree-vn.c (vuses_compare): Remove.\n+\t(sort_vuses): Use operand_build_cmp.\n+\t(sort_vuses_heap): Likewise.\n+\t* tree-ssa-sccvn.c (vuses_to_vec): Use VEC_reserve, not VEC_alloc\n+\tto re-use old VEC if available.  Do not sort already sorted VUSEs.\n+\t(vdefs_to_vec): Do not sort already sorted VDEFs.\n+\n 2008-01-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/34694"}, {"sha": "ceb18ba55a63391d67974281307d8b9f3a733714", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9990582a84e6fac0f7274fae1686f209c58c457/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9990582a84e6fac0f7274fae1686f209c58c457/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=a9990582a84e6fac0f7274fae1686f209c58c457", "patch": "@@ -210,7 +210,7 @@ get_name_decl (const_tree t)\n \n /* Comparison function for qsort used in operand_build_sort_virtual.  */\n \n-static int\n+int\n operand_build_cmp (const void *p, const void *q)\n {\n   const_tree const e1 = *((const_tree const *)p);"}, {"sha": "ba9793d83460f676f61bda1f29dc5c510b51eecb", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9990582a84e6fac0f7274fae1686f209c58c457/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9990582a84e6fac0f7274fae1686f209c58c457/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=a9990582a84e6fac0f7274fae1686f209c58c457", "patch": "@@ -210,6 +210,7 @@ extern void free_stmt_operands (tree);\n extern bool verify_imm_links (FILE *f, tree var);\n \n extern void copy_virtual_operands (tree, tree);\n+extern int operand_build_cmp (const void *, const void *);\n extern void create_ssa_artificial_load_stmt (tree, tree, bool);\n \n extern void dump_immediate_uses (FILE *file);"}, {"sha": "e1d4af11fee7c90c6784a63fd52043326b1d8450", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9990582a84e6fac0f7274fae1686f209c58c457/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9990582a84e6fac0f7274fae1686f209c58c457/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=a9990582a84e6fac0f7274fae1686f209c58c457", "patch": "@@ -389,13 +389,11 @@ vuses_to_vec (tree stmt, VEC (tree, gc) **result)\n   if (!stmt)\n     return;\n \n-  *result = VEC_alloc (tree, gc, num_ssa_operands (stmt, SSA_OP_VIRTUAL_USES));\n+  VEC_reserve_exact (tree, gc, *result,\n+\t\t     num_ssa_operands (stmt, SSA_OP_VIRTUAL_USES));\n \n   FOR_EACH_SSA_TREE_OPERAND (vuse, stmt, iter, SSA_OP_VIRTUAL_USES)\n     VEC_quick_push (tree, *result, vuse);\n-\n-  if (VEC_length (tree, *result) > 1)\n-    sort_vuses (*result);\n }\n \n \n@@ -427,9 +425,6 @@ vdefs_to_vec (tree stmt, VEC (tree, gc) **result)\n \n   FOR_EACH_SSA_TREE_OPERAND (vdef, stmt, iter, SSA_OP_VIRTUAL_DEFS)\n     VEC_quick_push (tree, *result, vdef);\n-\n-  if (VEC_length (tree, *result) > 1)\n-    sort_vuses (*result);\n }\n \n /* Copy the names of vdef results in STMT into a vector, and return"}, {"sha": "0c5061f70fce6de92487a51d17d53555b63eb43e", "filename": "gcc/tree-vn.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9990582a84e6fac0f7274fae1686f209c58c457/gcc%2Ftree-vn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9990582a84e6fac0f7274fae1686f209c58c457/gcc%2Ftree-vn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vn.c?ref=a9990582a84e6fac0f7274fae1686f209c58c457", "patch": "@@ -107,19 +107,6 @@ set_value_handle (tree e, tree v)\n     gcc_assert (is_gimple_min_invariant (e));\n }\n \n-/* A comparison function for use in qsort to compare vuses.  Simply\n-   subtracts version numbers.  */\n-\n-static int\n-vuses_compare (const void *pa, const void *pb)\n-{\n-  const tree vusea = *((const tree *)pa);\n-  const tree vuseb = *((const tree *)pb);\n-  int sn = SSA_NAME_VERSION (vusea) - SSA_NAME_VERSION (vuseb);\n-\n-  return sn;\n-}\n-\n /* Print out the \"Created value <x> for <Y>\" statement to the\n    dump_file.\n    This is factored because both versions of lookup use it, and it\n@@ -161,7 +148,7 @@ sort_vuses (VEC (tree,gc) *vuses)\n     qsort (VEC_address (tree, vuses),\n \t   VEC_length (tree, vuses),\n \t   sizeof (tree),\n-\t   vuses_compare);\n+\t   operand_build_cmp);\n }\n \n /* Sort the VUSE array so that we can do equality comparisons\n@@ -174,7 +161,7 @@ sort_vuses_heap (VEC (tree,heap) *vuses)\n     qsort (VEC_address (tree, vuses),\n \t   VEC_length (tree, vuses),\n \t   sizeof (tree),\n-\t   vuses_compare);\n+\t   operand_build_cmp);\n }\n /* Insert EXPR into VALUE_TABLE with value VAL, and add expression\n    EXPR to the value set for value VAL.  */"}]}