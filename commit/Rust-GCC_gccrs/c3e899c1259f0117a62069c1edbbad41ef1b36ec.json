{"sha": "c3e899c1259f0117a62069c1edbbad41ef1b36ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNlODk5YzEyNTlmMDExN2E2MjA2OWMxZWRiYmFkNDFlZjFiMzZlYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2000-12-15T15:43:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-12-15T15:43:11Z"}, "message": "call.c (build_op_delete_call): See through ARRAY_TYPEs.\n\n        * call.c (build_op_delete_call): See through ARRAY_TYPEs.\n\n        * call.c (build_new_function_call): Lose space before paren in\n        error message.\n        (build_new_method_call): Likewise.\n\n        * typeck2.c (build_m_component_ref): Propagate quals from datum.\n\nFrom-SVN: r38287", "tree": {"sha": "04124a331a020a28a7594ed12abebb09e7288259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04124a331a020a28a7594ed12abebb09e7288259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3e899c1259f0117a62069c1edbbad41ef1b36ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e899c1259f0117a62069c1edbbad41ef1b36ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3e899c1259f0117a62069c1edbbad41ef1b36ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e899c1259f0117a62069c1edbbad41ef1b36ec/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "745b909395539378b31154a57d159223c37b1e03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/745b909395539378b31154a57d159223c37b1e03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/745b909395539378b31154a57d159223c37b1e03"}], "stats": {"total": 94, "additions": 79, "deletions": 15}, "files": [{"sha": "a13baaa1d55c1e534318523c5866c3f418d1377b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e899c1259f0117a62069c1edbbad41ef1b36ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e899c1259f0117a62069c1edbbad41ef1b36ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c3e899c1259f0117a62069c1edbbad41ef1b36ec", "patch": "@@ -1,3 +1,13 @@\n+2000-12-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (build_op_delete_call): See through ARRAY_TYPEs.\n+\n+\t* call.c (build_new_function_call): Lose space before paren in\n+\terror message.\n+\t(build_new_method_call): Likewise.\n+\n+\t* typeck2.c (build_m_component_ref): Propagate quals from datum.\n+\n 2000-12-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* pt.c (check_explicit_specialization): Propagate default"}, {"sha": "77e29ebe3543beb79263e51d3b1602012b1a8520", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e899c1259f0117a62069c1edbbad41ef1b36ec/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e899c1259f0117a62069c1edbbad41ef1b36ec/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c3e899c1259f0117a62069c1edbbad41ef1b36ec", "patch": "@@ -2576,7 +2576,7 @@ build_new_function_call (fn, args)\n \t{\n \t  if (candidates && ! candidates->next)\n \t    return build_function_call (candidates->fn, args);\n-\t  cp_error (\"no matching function for call to `%D (%A)'\",\n+\t  cp_error (\"no matching function for call to `%D(%A)'\",\n \t\t    DECL_NAME (OVL_FUNCTION (fn)), args);\n \t  if (candidates)\n \t    print_z_candidates (candidates);\n@@ -2587,7 +2587,7 @@ build_new_function_call (fn, args)\n \n       if (cand == 0)\n \t{\n-\t  cp_error (\"call of overloaded `%D (%A)' is ambiguous\",\n+\t  cp_error (\"call of overloaded `%D(%A)' is ambiguous\",\n \t\t    DECL_NAME (OVL_FUNCTION (fn)), args);\n \t  print_z_candidates (candidates);\n \t  return error_mark_node;\n@@ -3322,7 +3322,7 @@ build_new_op (code, flags, arg1, arg2, arg3)\n \t  /* Look for an `operator++ (int)'.  If they didn't have\n \t     one, then we fall back to the old way of doing things.  */\n \t  if (flags & LOOKUP_COMPLAIN)\n-\t    cp_pedwarn (\"no `%D (int)' declared for postfix `%s', trying prefix operator instead\",\n+\t    cp_pedwarn (\"no `%D(int)' declared for postfix `%s', trying prefix operator instead\",\n \t\t\tfnname, \n \t\t\toperator_name_info[code].name);\n \t  if (code == POSTINCREMENT_EXPR)\n@@ -3518,6 +3518,9 @@ build_op_delete_call (code, addr, size, flags, placement)\n     return error_mark_node;\n \n   type = TREE_TYPE (TREE_TYPE (addr));\n+  while (TREE_CODE (type) == ARRAY_TYPE)\n+    type = TREE_TYPE (type);\n+\n   fnname = ansi_opname (code);\n \n   if (IS_AGGR_TYPE (type) && ! (flags & LOOKUP_GLOBAL))\n@@ -3562,8 +3565,7 @@ build_op_delete_call (code, addr, size, flags, placement)\n   fntype = build_function_type (void_type_node, argtypes);\n \n   /* Strip const and volatile from addr.  */\n-  if (type != TYPE_MAIN_VARIANT (type))\n-    addr = cp_convert (build_pointer_type (TYPE_MAIN_VARIANT (type)), addr);\n+  addr = cp_convert (ptr_type_node, addr);\n \n   fn = instantiate_type (fntype, fns, itf_no_attributes);\n \n@@ -4447,7 +4449,7 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n       if (!COMPLETE_TYPE_P (basetype))\n \tincomplete_type_error (instance_ptr, basetype);\n       else\n-\tcp_error (\"no matching function for call to `%T::%D (%A)%V'\",\n+\tcp_error (\"no matching function for call to `%T::%D(%A)%V'\",\n \t\t  basetype, pretty_name, user_args,\n \t\t  TREE_TYPE (TREE_TYPE (instance_ptr)));\n       print_z_candidates (candidates);"}, {"sha": "d8143f88b9bc2742120a460e4c0e32e1efe76d28", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e899c1259f0117a62069c1edbbad41ef1b36ec/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e899c1259f0117a62069c1edbbad41ef1b36ec/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=c3e899c1259f0117a62069c1edbbad41ef1b36ec", "patch": "@@ -1077,22 +1077,26 @@ build_m_component_ref (datum, component)\n      tree datum, component;\n {\n   tree type;\n-  tree objtype = TREE_TYPE (datum);\n-  tree rettype;\n+  tree objtype;\n+  tree field_type;\n+  int type_quals;\n   tree binfo;\n \n   if (processing_template_decl)\n     return build_min_nt (DOTSTAR_EXPR, datum, component);\n \n+  datum = decay_conversion (datum);\n+  objtype = TYPE_MAIN_VARIANT (TREE_TYPE (datum));  \n+\n   if (TYPE_PTRMEMFUNC_P (TREE_TYPE (component)))\n     {\n       type = TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (TREE_TYPE (component)));\n-      rettype = type;\n+      field_type = type;\n     }\n   else\n     {\n       type = TREE_TYPE (TREE_TYPE (component));\n-      rettype = TREE_TYPE (type);\n+      field_type = TREE_TYPE (type);\n     }\n \n   if (datum == error_mark_node || component == error_mark_node)\n@@ -1104,10 +1108,6 @@ build_m_component_ref (datum, component)\n       return error_mark_node;\n     }\n \n-  if (TREE_CODE (objtype) == REFERENCE_TYPE)\n-    objtype = TREE_TYPE (objtype);\n-  objtype = TYPE_MAIN_VARIANT (objtype);\n-\n   if (! IS_AGGR_TYPE (objtype))\n     {\n       cp_error (\"cannot apply member pointer `%E' to `%E'\", component, datum);\n@@ -1125,7 +1125,24 @@ build_m_component_ref (datum, component)\n   else if (binfo == error_mark_node)\n     return error_mark_node;\n \n-  component = build (OFFSET_REF, rettype, datum, component);\n+  /* Compute the type of the field, as described in [expr.ref].  */\n+  type_quals = TYPE_UNQUALIFIED;\n+  if (TREE_CODE (field_type) == REFERENCE_TYPE)\n+    /* The standard says that the type of the result should be the\n+       type referred to by the reference.  But for now, at least, we\n+       do the conversion from reference type later.  */\n+    ;\n+  else\n+    {\n+      type_quals = (CP_TYPE_QUALS (field_type)  \n+\t\t    | CP_TYPE_QUALS (TREE_TYPE (datum)));\n+\n+      /* There's no such thing as a mutable pointer-to-member, so we don't\n+\t need to deal with that here like we do in build_component_ref.  */\n+      field_type = cp_build_qualified_type (field_type, type_quals);\n+    }\n+\n+  component = build (OFFSET_REF, field_type, datum, component);\n   if (TREE_CODE (type) == OFFSET_TYPE)\n     component = resolve_offset_ref (component);\n   return component;"}, {"sha": "e6c58cd67537ec22d785352dc653ca10732ea118", "filename": "gcc/testsuite/g++.old-deja/g++.other/delete7.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e899c1259f0117a62069c1edbbad41ef1b36ec/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e899c1259f0117a62069c1edbbad41ef1b36ec/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete7.C?ref=c3e899c1259f0117a62069c1edbbad41ef1b36ec", "patch": "@@ -0,0 +1,17 @@\n+// Test that we call a class-specific vector op delete.\n+\n+#include <new>\n+\n+int r = 1;\n+\n+struct A\n+{\n+  void operator delete[](void *p) { r = 0; ::operator delete (p); }\n+};\n+\n+int main ()\n+{\n+  A (*p)[2] = new A[2][2];\n+  delete [] p;\n+  return r;\n+}"}, {"sha": "f50ba22d1083da87d84d699e006e8cd227187228", "filename": "gcc/testsuite/g++.old-deja/g++.other/ptrmem9.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e899c1259f0117a62069c1edbbad41ef1b36ec/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e899c1259f0117a62069c1edbbad41ef1b36ec/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem9.C?ref=c3e899c1259f0117a62069c1edbbad41ef1b36ec", "patch": "@@ -0,0 +1,18 @@\n+// Test that const-correctness is observed when using pointers-to-members.\n+\n+struct A {\n+  int f () { return 1; }\n+  int f () const { return 0; }\n+};\n+\n+struct B {\n+  A a;\n+  B() { }\n+};\n+\n+int main ()\n+{\n+  A B::*bm = &B::a;\n+  const B b;\n+  return (b.*bm).f ();\n+}"}]}