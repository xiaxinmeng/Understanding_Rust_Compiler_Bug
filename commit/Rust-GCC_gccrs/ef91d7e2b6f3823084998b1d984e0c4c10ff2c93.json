{"sha": "ef91d7e2b6f3823084998b1d984e0c4c10ff2c93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY5MWQ3ZTJiNmYzODIzMDg0OTk4YjFkOTg0ZTBjNGMxMGZmMmM5Mw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-18T20:36:51Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-18T20:36:51Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r342", "tree": {"sha": "1ffa1d3f3adaee5a4e4f23cbf1398cfc4645859e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ffa1d3f3adaee5a4e4f23cbf1398cfc4645859e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef91d7e2b6f3823084998b1d984e0c4c10ff2c93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef91d7e2b6f3823084998b1d984e0c4c10ff2c93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef91d7e2b6f3823084998b1d984e0c4c10ff2c93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef91d7e2b6f3823084998b1d984e0c4c10ff2c93/comments", "author": null, "committer": null, "parents": [{"sha": "f045b2c9946eb3e461401ea62c52be03961ec9b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f045b2c9946eb3e461401ea62c52be03961ec9b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f045b2c9946eb3e461401ea62c52be03961ec9b7"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "30e0eff972c34e93a944de01d97b5d7caf9b8c81", "filename": "gcc/protoize.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef91d7e2b6f3823084998b1d984e0c4c10ff2c93/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef91d7e2b6f3823084998b1d984e0c4c10ff2c93/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=ef91d7e2b6f3823084998b1d984e0c4c10ff2c93", "patch": "@@ -478,6 +478,13 @@ static int errors = 0;\n /* ??? These comments should say what the flag mean as well as the options\n    that set them.  */\n \n+/* allow the user to pass the pathname of the gcc2 compiler as a\n+   command line option, instead of relying on the fact that 'gcc' in\n+   the path should be gcc2 */\n+\n+static char *compiler_pathname = \"gcc\";\n+\n+\n static int version_flag = 0;\t\t/* Print our version number.  */\n static int quiet_flag = 0;\t\t/* Don't print messages normally.  */\n static int nochange_flag = 0;\t\t/* Don't convert, just say what files\n@@ -1894,7 +1901,7 @@ munge_compile_params (params_list)\n   int param_count = 0;\n   const char *param;\n \n-  temp_params[param_count++] = \"gcc\";\n+  temp_params[param_count++] = compiler_pathname;\n   for (;;)\n     {\n       while (isspace (*params_list))\n@@ -4327,6 +4334,7 @@ do_processing ()\n static struct option longopts[] =\n {\n   {\"version\", 0, 0, 'V'},\n+  {\"pathname\", 0, 0, 'p'},\n   {\"quiet\", 0, 0, 'q'},\n   {\"silent\", 0, 0, 'q'},\n   {\"force\", 0, 0, 'f'},\n@@ -4378,16 +4386,19 @@ main (argc, argv)\n \n   while ((c = getopt_long (argc, argv,\n #ifdef UNPROTOIZE\n-\t\t\t   \"c:d:i:knNqVx:\",\n+\t\t\t   \"c:d:i:knNp:qVx:\",\n #else\n-\t\t\t   \"B:c:Cd:gklnNqVx:\",\n+\t\t\t   \"B:c:Cd:gklnNp:qVx:\",\n #endif\n \t\t\t   longopts, &longind)) != EOF)\n     {\n       if (c == 0)\t\t/* Long option. */\n \tc = longopts[longind].val;\n       switch (c)\n \t{\n+\tcase 'p':\n+\t  compiler_pathname = optarg;\n+\t  break;\n \tcase 'd':\n \t  directory_list\n \t    = string_list_cons (abspath (NULL, optarg), directory_list);"}]}