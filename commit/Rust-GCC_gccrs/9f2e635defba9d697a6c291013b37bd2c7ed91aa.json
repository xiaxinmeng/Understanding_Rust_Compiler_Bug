{"sha": "9f2e635defba9d697a6c291013b37bd2c7ed91aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYyZTYzNWRlZmJhOWQ2OTdhNmMyOTEwMTNiMzdiZDJjN2VkOTFhYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-05-30T18:40:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-05-30T20:15:25Z"}, "message": "Ability to build the GNAT runtime with project files\n\nThis change add project files to provide the ability to rebuild the\nruntime with gprbuild after setup-rts is called.\n\ngcc/ada/\n\n\t* Makefile.rtl (ADA_INCLUDE_SRCS): Replace Makefile.adalib by\n\tlibada.gpr and associated project files.\n\t(g-debpoo.o): Add missing rule to ensure subprograms are not reordered.\n\t(setup-rts): Add generation of libgnat/libgnarl.lst.\n\t(LIBGNAT_SRCS): Remove thread.c which is part of libgnarl.\n\t* tracebak.c, tb-gcc.c: Merged the two files to simplify dependencies.\n\t* libgnarl/libgnarl.gpr, libgnat/libada.gpr,\n\tlibgnat/libgnat.gpr, libgnat/libgnat_common.gpr: New files.\n\t* doc/gnat_ugn/the_gnat_compilation_model.rst: Makefile.adalib\n\treplaced by libada.gpr.\n\t* libgnat/system-mingw.ads: Remove obsolete comment.\n\t* gcc-interface/Makefile.in: Remove dependency on tb-gcc.c.", "tree": {"sha": "97f7616f192b582d5d4a45c756822cb4377ad87b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97f7616f192b582d5d4a45c756822cb4377ad87b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f2e635defba9d697a6c291013b37bd2c7ed91aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2e635defba9d697a6c291013b37bd2c7ed91aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f2e635defba9d697a6c291013b37bd2c7ed91aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2e635defba9d697a6c291013b37bd2c7ed91aa/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd38c765a04d06c775134a135f68b18c3b7c9c78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd38c765a04d06c775134a135f68b18c3b7c9c78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd38c765a04d06c775134a135f68b18c3b7c9c78"}], "stats": {"total": 472, "additions": 329, "deletions": 143}, "files": [{"sha": "0c62df23628568cef44d4c8cf9b2e455592368ae", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=9f2e635defba9d697a6c291013b37bd2c7ed91aa", "patch": "@@ -2621,7 +2621,7 @@ LIBGNAT_OBJS = adadecode.o adaint.o argv.o aux-io.o \t\t\t\\\n \n LIBGNAT_SRCS = $(patsubst %.o,%.c,$(LIBGNAT_OBJS))\t\t\t\\\n   adadecode.h adaint.h env.h gsocket.h raise.h standard.ads.h\t\t\\\n-  tb-gcc.c runtime.h libgnarl/thread.c $(EXTRA_LIBGNAT_SRCS)\n+  runtime.h $(EXTRA_LIBGNAT_SRCS)\n \n # memtrack.o is special as not put into libgnat.\n GNATRTL_OBJS = $(GNATRTL_NONTASKING_OBJS) $(GNATRTL_TASKING_OBJS) \\\n@@ -2634,7 +2634,8 @@ GNATRTL_OBJS = $(GNATRTL_NONTASKING_OBJS) $(GNATRTL_TASKING_OBJS) \\\n ADA_INCLUDE_SRCS =\\\n  libgnat/ada.ads libgnat/calendar.ads libgnat/directio.ads libgnat/gnat.ads libgnat/interfac.ads libgnat/ioexcept.ads \\\n  libgnat/machcode.ads libgnat/text_io.ads libgnat/unchconv.ads libgnat/unchdeal.ads \\\n- libgnat/sequenio.ads libgnat/system.ads Makefile.adalib libgnat/memtrack.adb \\\n+ libgnat/sequenio.ads libgnat/system.ads libgnat/memtrack.adb \\\n+ libgna*/*.gpr \\\n  libgnat/a-[a-o]*.adb libgnat/a-[a-o]*.ads \\\n  libgnat/a-[p-z]*.adb libgnat/a-[p-z]*.ads \\\n  libgnat/g-[a-o]*.adb libgnat/g-[a-o]*.ads \\\n@@ -2680,7 +2681,7 @@ setup-rts: force\n \t$(MKDIR) $(RTSDIR)\n \t$(CHMOD) u+w $(RTSDIR)\n # Copy target independent sources\n-\t$(foreach f,$(ADA_INCLUDE_SRCS) $(LIBGNAT_SRCS), \\\n+\t$(foreach f,$(ADA_INCLUDE_SRCS) $(LIBGNAT_SRCS) libgnarl/thread.c, \\\n \t  $(LN_S) $(GNAT_SRC)/$(f) $(RTSDIR) ;) true\n # Remove files not used\n \t$(RM) $(patsubst %,$(RTSDIR)/%,$(ADA_EXCLUDE_FILES))\n@@ -2697,6 +2698,25 @@ setup-rts: force\n \t$(foreach PAIR,$(LIBGNAT_TARGET_PAIRS), \\\n \t          $(LN_S) $(GNAT_SRC)/$(word 2,$(subst <, ,$(PAIR))) \\\n \t                $(RTSDIR)/$(word 1,$(subst <, ,$(PAIR)));)\n+# And finally generate libgnat.lst and libgnarl.lst\n+\t@for f in \\\n+\t  $(foreach F,$(GNATRTL_TASKING_OBJS),$(subst $(objext),.ads,$(F))) \\\n+\t  $(foreach F,$(GNATRTL_TASKING_OBJS),$(subst $(objext),.adb,$(F))); \\\n+\tdo \\\n+\t  if [ -f $(RTSDIR)/$$f ]; then echo $$f >> $(RTSDIR)/libgnarl.lst; fi \\\n+\tdone\n+\t@echo thread.c >> $(RTSDIR)/libgnarl.lst\n+\t@for f in \\\n+\t  $(foreach F,$(GNATRTL_NONTASKING_OBJS),$(subst $(objext),.ads,$(F))) \\\n+\t  $(foreach F,$(GNATRTL_NONTASKING_OBJS),$(subst $(objext),.adb,$(F))); \\\n+\tdo \\\n+\t  if [ -f $(RTSDIR)/$$f ]; then echo $$f >> $(RTSDIR)/libgnat.lst; fi \\\n+\tdone\n+# s-oscons.ads is generated later, so hardcode it here\n+\t@echo s-oscons.ads >> $(RTSDIR)/libgnat.lst\n+\t@for f in $(LIBGNAT_SRCS); do \\\n+\t  echo $$f >> $(RTSDIR)/libgnat.lst; \\\n+\tdone\n \n # Special flags. It is recommended not to change the compilation flags\n # without a careful analysis of the consequences because (part of) the\n@@ -2773,3 +2793,10 @@ a-tags.o  : a-tags.adb a-tags.ads\n s-memory.o  : s-memory.adb s-memory.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) \\\n \t  $< $(OUTPUT_OPTION)\n+\n+# Need to keep functions ordered on g-debpoo.o since labels are used to\n+# exclude subprograms from traceback computation.\n+\n+g-debpoo.o: g-debpoo.adb g-debpoo.ads\n+\t$(ADAC) -c $(ALL_ADAFLAGS) $(NO_REORDER_ADAFLAGS) $(ADA_INCLUDES) \\\n+\t  $< $(OUTPUT_OPTION)"}, {"sha": "0b587efac12014b5c6667338ef54e5824f51ae3b", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=9f2e635defba9d697a6c291013b37bd2c7ed91aa", "patch": "@@ -2393,10 +2393,9 @@ Rebuilding the GNAT Run-Time Library\n .. index:: Rebuilding the GNAT Run-Time Library\n .. index:: Run-Time Library, rebuilding\n \n-It may be useful to recompile the GNAT library in various contexts, the\n-most important one being the use of partition-wide configuration pragmas\n-such as ``Normalize_Scalars``. A special Makefile called\n-:file:`Makefile.adalib` is provided to that effect and can be found in\n+It may be useful to recompile the GNAT library in various debugging or\n+experimentation contexts. A project file called\n+:file:`libada.gpr` is provided to that effect and can be found in\n the directory containing the GNAT library. The location of this\n directory depends on the way the GNAT environment has been installed and can\n be determined by means of the command:\n@@ -2405,10 +2404,13 @@ be determined by means of the command:\n \n       $ gnatls -v\n \n-The last entry in the object search path usually contains the\n-gnat library. This Makefile contains its own documentation and in\n-particular the set of instructions needed to rebuild a new library and\n-to use it.\n+The last entry in the source search path usually contains the\n+gnat library (the :file:`adainclude` directory). This project file contains its\n+own documentation and in particular the set of instructions needed to rebuild a\n+new library and to use it.\n+\n+Note that rebuilding the GNAT Run-Time is only recommended for temporary\n+experiments or debugging, and is not supported.\n \n \n .. index:: ! Conditional compilation"}, {"sha": "25ebc3d21d43ff805efb573dc66619988258acda", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=9f2e635defba9d697a6c291013b37bd2c7ed91aa", "patch": "@@ -895,7 +895,7 @@ ADA_RTL_DSO_DIR = $(toolexeclibdir)\n # need to keep the frame pointer in tracebak.o to pop the stack properly on\n # some targets.\n \n-tracebak.o  : tracebak.c tb-gcc.c\n+tracebak.o  : tracebak.c\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) \\\n \t      $(INCLUDES) $(NO_OMIT_ADAFLAGS) $< $(OUTPUT_OPTION)\n "}, {"sha": "3933f6f2f3a26406e33127af10b3a232124e8ee9", "filename": "gcc/ada/libgnarl/libgnarl.gpr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Flibgnarl%2Flibgnarl.gpr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Flibgnarl%2Flibgnarl.gpr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Flibgnarl.gpr?ref=9f2e635defba9d697a6c291013b37bd2c7ed91aa", "patch": "@@ -0,0 +1,28 @@\n+with \"libgnat_common\";\n+\n+library project Libgnarl is\n+\n+   for Languages use (\"Ada\", \"C\");\n+   for Source_Dirs use (\".\");\n+   for Source_List_File use \"libgnarl.lst\";\n+   for Object_Dir use \"../obj-\" & Libgnat_Common.Library_Kind;\n+\n+   for Library_Name use \"gnarl\";\n+   for Library_Dir use \"../adalib\";\n+   for Library_Kind use Libgnat_Common.Library_Kind;\n+\n+   package Compiler is\n+\n+      for Switches (\"C\") use Libgnat_Common.C_Flags;\n+      for Switches (\"Ada\") use Libgnat_Common.Ada_Flags;\n+\n+      for Switches (\"s-tasdeb.adb\") use\n+        Libgnat_Common.Ada_Flags &\n+        Libgnat_Common.Force_Debug &\n+        Libgnat_Common.No_Opt;\n+      --  Compile s-tasdeb.o without optimization and with debug info so that\n+      --  it is always possible to set conditional breakpoints on tasks.\n+\n+   end Compiler;\n+\n+end Libgnarl;"}, {"sha": "9453cae8f53f1a1958b2407b2bd45b5801cd2221", "filename": "gcc/ada/libgnat/libada.gpr", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Flibgnat%2Flibada.gpr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Flibgnat%2Flibada.gpr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Flibada.gpr?ref=9f2e635defba9d697a6c291013b37bd2c7ed91aa", "patch": "@@ -0,0 +1,77 @@\n+-- This is a project file used to rebuild the GNAT run-time for debug\n+-- or instrumentation purposes.\n+--\n+-- Here is how to use this project file:\n+--\n+-- 1. Create a new directory (e.g. \"rts-debug\"), then copy the adainclude\n+--    directory from the reference runtime that you want to rebuild.\n+--    You can find the relevant adainclude directory by running the command\n+--    gprls [--target=<target>] [--RTS=<runtime>] and using the adainclude\n+--    directory listed. For example:\n+--     $ cd <reference directory>\n+--     $ mkdir rts-debug\n+--     $ cd rts-debug\n+--     $ cp -a `gprls -v | grep adainclude` .\n+--     $ cd adainclude\n+--\n+--    or under Windows:\n+--\n+--     $ mkdir adainclude\n+--     $ xcopy /s /path/to/adainclude adainclude\n+--     $ cd adainclude\n+--\n+-- 2. If needed (e.g for pragma Normalize_Scalars), create a file called\n+--    gnat.adc in the adainclude directory containing the configuration pragmas\n+--    you want to use to build the library, e.g.\n+--\n+--     $ echo \"pragma Normalize_Scalars;\" > gnat.adc\n+--\n+--    Note that this step is usually not needed, and most pragmas are not\n+--    relevant to the GNAT run time.\n+--\n+-- 3. Determine the values of the following variables\n+--    CFLAGS (back end compilation flags such as -g -O2)\n+--    ADAFLAGS (front end compilation flags such as -gnatn)\n+--\n+-- 4. Run gprbuild on libada.gpr, e.g:\n+--    $ gprbuild -p -Plibada -j0 -XCFLAGS=\"-O2 -g\" -XADAFLAGS=\"-gnatn\"\n+--\n+--    or for a cross target:\n+--\n+--    $ gprbuild --target=powerpc-elf -p -Plibada -j0 [...]\n+--\n+--    if you created a gnat.adc file at step 2, add \"-XCONFIG_FILE=gnat.adc\" to\n+--    the gprbuild switches.\n+--\n+--    The above command will build libgnat.a and libgnarl.a with the given\n+--    switches.\n+--\n+-- 4b. In order to generate shared libraries instead, add\n+--    \"-XLIBRARY_KIND=dynamic\" to the gprbuild switches, and if you want to\n+--    build both shared and static libraries, you can run gprbuild twice in\n+--    a row, e.g:\n+--\n+--    $ gprbuild -p -Plibada -j0 -XLIBRARY_KIND=dynamic [...]\n+--    $ gprbuild -p -Plibada -j0 -XLIBRARY_KIND=static [...]\n+--\n+-- 5. Once the above gprbuild command is successful, you can use this new\n+--    runtime directory by specifying it either via the --RTS= switch on the\n+--    command line or via the attribute Runtime (\"Ada\") in the main project\n+--    file:\n+--     $ gprbuild --RTS=.../rts-debug ...\n+--    or\n+--       for Runtime (\"Ada\") use \".../rts-debug\";\n+\n+aggregate project Libada is\n+   for Project_Files use (\"libgnat.gpr\", \"libgnarl.gpr\");\n+\n+   Config_File := External (\"CONFIG_FILE\", \"\");\n+\n+   package Builder is\n+      case Config_File is\n+         when \"\"     => null;\n+         when others => for Global_Configuration_Pragmas use Config_File;\n+      end case;\n+   end Builder;\n+\n+end Libada;"}, {"sha": "006ff2d8da07b6fd5d1b70ffccbbd23c660e84bd", "filename": "gcc/ada/libgnat/libgnat.gpr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Flibgnat%2Flibgnat.gpr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Flibgnat%2Flibgnat.gpr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Flibgnat.gpr?ref=9f2e635defba9d697a6c291013b37bd2c7ed91aa", "patch": "@@ -0,0 +1,69 @@\n+with \"libgnat_common\";\n+\n+library project Libgnat is\n+\n+   for Languages use (\"Ada\", \"C\");\n+   for Source_Dirs use (\".\");\n+   for Source_List_File use \"libgnat.lst\";\n+   for Object_Dir use \"../obj-\" & Libgnat_Common.Library_Kind;\n+\n+   for Library_Name use \"gnat\";\n+   for Library_Dir use \"../adalib\";\n+   for Library_Kind use Libgnat_Common.Library_Kind;\n+\n+   package Compiler is\n+\n+      for Switches (\"C\") use Libgnat_Common.C_Flags;\n+      for Switches (\"Ada\") use Libgnat_Common.Ada_Flags;\n+\n+      for Switches (\"s-traceb.adb\") use\n+        Libgnat_Common.Ada_Flags & Libgnat_Common.Force_Debug &\n+        Libgnat_Common.No_Inline & Libgnat_Common.No_Sibling;\n+      --  Force no sibling call optimization on s-traceb.o so the number of\n+      --  stack frames to be skipped when computing a call chain is not\n+      --  modified by optimization. We don.t want inlining, either.\n+\n+      for Switches (\"a-except.adb\") use\n+        Libgnat_Common.Ada_Flags & (\"-O1\") &\n+        Libgnat_Common.Force_Debug & Libgnat_Common.No_Inline &\n+        Libgnat_Common.No_Reorder;\n+      --  Force no function reordering because of the exclusion bounds\n+      --  mechanism (see the source file for more detailed information).\n+      --  Force debugging information so that it is always possible to set\n+      --  conditional breakpoints on exceptions.\n+      --  Use -O1 otherwise gdb isn.t able to get a full backtrace on mips\n+      --  targets.\n+\n+      for Switches (\"s-excdeb.adb\") use\n+        Libgnat_Common.Ada_Flags & Libgnat_Common.Force_Debug &\n+        Libgnat_Common.No_Opt;\n+      --  Compile without optimization and with debug info to let the debugger\n+      --  set breakpoints and inspect subprogram parameters on exception\n+      --  related events.\n+\n+      for Switches (\"s-assert.adb\") use\n+        Libgnat_Common.Ada_Flags & Libgnat_Common.Force_Debug;\n+      --  Force debugging information on s-assert.o so that it is always\n+      --  possible to set breakpoint on assert failures.\n+\n+      for Switches (\"a-tags.adb\") use\n+        Libgnat_Common.Ada_Flags & Libgnat_Common.Force_Debug;\n+      --  Force debugging information on a-tags.o so that the debugger can find\n+      --  the description of Ada.Tags.Type_Specific_Data.\n+\n+      for Switches (\"s-memory.adb\") use\n+        Libgnat_Common.Ada_Flags & Libgnat_Common.No_Sibling;\n+      --  Force no sibling call optimization on s-memory.o to avoid turning the\n+      --  tail recursion in Alloc into a loop that confuses branch prediction.\n+\n+      for Switches (\"g-debpoo.adb\") use\n+        Libgnat_Common.Ada_Flags & Libgnat_Common.No_Reorder;\n+      --  Need to keep functions ordered on g-debpoo.o since labels are used to\n+      --  exclude subprograms from traceback computation.\n+\n+      for Switches (\"traceback.c\") use\n+        Libgnat_Common.C_Flags & Libgnat_Common.No_Omit;\n+\n+   end Compiler;\n+\n+end Libgnat;"}, {"sha": "630392887643c4b91fcfd3ad12dc9ee425173d1d", "filename": "gcc/ada/libgnat/libgnat_common.gpr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Flibgnat%2Flibgnat_common.gpr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Flibgnat%2Flibgnat_common.gpr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Flibgnat_common.gpr?ref=9f2e635defba9d697a6c291013b37bd2c7ed91aa", "patch": "@@ -0,0 +1,19 @@\n+abstract project Libgnat_Common is\n+\n+   Common_Flags := Split (External (\"CFLAGS\", \"-O2 -g\"), \" \");\n+   C_Flags      := Common_Flags &\n+                   (\"-I../include\", \"-DIN_RTS=1\", \"-fexceptions\",\n+                    \"-DSTANDALONE\") &\n+                   External_As_List (\"EXTRALIBFLAGS\", \" \");\n+   Ada_Flags    := Common_Flags & (\"-nostdinc\", \"-I../adainclude\")\n+                   & Split (External (\"ADAFLAGS\", \"-gnatpg\"), \" \");\n+   Library_Kind := External (\"LIBRARY_KIND\", \"static\");\n+\n+   No_Opt      := (\"-O0\");\n+   Force_Debug := (\"-g\");\n+   No_Inline   := (\"-fno-inline\");\n+   No_Omit     := (\"-fno-omit-frame-pointer\");\n+   No_Sibling  := (\"-fno-optimize-sibling-calls\");\n+   No_Reorder  := (\"-fno-toplevel-reorder\", \"-O0\");\n+\n+end Libgnat_Common;"}, {"sha": "3df80e3bf37f0849c683c803efb771fcd901b556", "filename": "gcc/ada/libgnat/system-mingw.ads", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Flibgnat%2Fsystem-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Flibgnat%2Fsystem-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-mingw.ads?ref=9f2e635defba9d697a6c291013b37bd2c7ed91aa", "patch": "@@ -185,11 +185,6 @@ private\n    --  model, but maps them using compression onto the 7 priority levels\n    --  available in NT and on the 16 priority levels available in 2000/XP.\n \n-   --  To replace the default values of the Underlying_Priorities mapping,\n-   --  copy this source file into your build directory, edit the file to\n-   --  reflect your desired behavior, and recompile using Makefile.adalib\n-   --  which can be found under the adalib directory of your gnat installation\n-\n    pragma Linker_Options (\"-Wl,--stack=0x2000000\");\n    --  This is used to change the default stack (32 MB) size for non tasking\n    --  programs. We change this value for GNAT on Windows here because the"}, {"sha": "74d0c2167afbabf12f22fe8c90bcfa6de637349e", "filename": "gcc/ada/tb-gcc.c", "status": "removed", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd38c765a04d06c775134a135f68b18c3b7c9c78/gcc%2Fada%2Ftb-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd38c765a04d06c775134a135f68b18c3b7c9c78/gcc%2Fada%2Ftb-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftb-gcc.c?ref=dd38c765a04d06c775134a135f68b18c3b7c9c78", "patch": "@@ -1,125 +0,0 @@\n-/****************************************************************************\n- *                                                                          *\n- *                         GNAT RUN-TIME COMPONENTS                         *\n- *                                                                          *\n- *                   T R A C E B A C K - G C C t a b l e s                  *\n- *                                                                          *\n- *                          C Implementation File                           *\n- *                                                                          *\n- *          Copyright (C) 2004-2019, Free Software Foundation, Inc.         *\n- *                                                                          *\n- * GNAT is free software;  you can  redistribute it  and/or modify it under *\n- * terms of the  GNU General Public License as published  by the Free Soft- *\n- * ware  Foundation;  either version 3,  or (at your option) any later ver- *\n- * sion.  GNAT is distributed in the hope that it will be useful, but WITH- *\n- * OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *\n- * or FITNESS FOR A PARTICULAR PURPOSE.                                     *\n- *                                                                          *\n- * As a special exception under Section 7 of GPL version 3, you are granted *\n- * additional permissions described in the GCC Runtime Library Exception,   *\n- * version 3.1, as published by the Free Software Foundation.               *\n- *                                                                          *\n- * You should have received a copy of the GNU General Public License and    *\n- * a copy of the GCC Runtime Library Exception along with this program;     *\n- * see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    *\n- * <http://www.gnu.org/licenses/>.                                          *\n- *                                                                          *\n- * GNAT was originally developed  by the GNAT team at  New York University. *\n- * Extensive contributions were provided by Ada Core Technologies Inc.      *\n- *                                                                          *\n- ****************************************************************************/\n-\n-/* This is an implementation of the __gnat_backtrace routine using the\n-   underlying GCC unwinding support associated with the exception handling\n-   infrastructure.  This will only work for ZCX based applications.  */\n-\n-#include <unwind.h>\n-\n-/* The implementation boils down to a call to _Unwind_Backtrace with a\n-   tailored callback and carried-on data structure to keep track of the\n-   input parameters we got as well as of the basic processing state.  */\n-\n-/******************\n- * trace_callback *\n- ******************/\n-\n-#if !defined (__USING_SJLJ_EXCEPTIONS__)\n-\n-typedef struct {\n-  void ** traceback;\n-  int max_len;\n-  void * exclude_min;\n-  void * exclude_max;\n-  int  n_frames_to_skip;\n-  int  n_frames_skipped;\n-  int  n_entries_filled;\n-} uw_data_t;\n-\n-#if defined (__ia64__) && defined (__hpux__)\n-#include <uwx.h>\n-#endif\n-\n-static _Unwind_Reason_Code\n-trace_callback (struct _Unwind_Context * uw_context, uw_data_t * uw_data)\n-{\n-  char * pc;\n-\n-#if defined (__ia64__) && defined (__hpux__) && defined (USE_LIBUNWIND_EXCEPTIONS)\n-  /* Work around problem with _Unwind_GetIP on ia64 HP-UX. */\n-  uwx_get_reg ((struct uwx_env *) uw_context, UWX_REG_IP, (uint64_t *) &pc);\n-#else\n-  pc = (char *) _Unwind_GetIP (uw_context);\n-#endif\n-\n-  if (uw_data->n_frames_skipped < uw_data->n_frames_to_skip)\n-    {\n-      uw_data->n_frames_skipped ++;\n-      return _URC_NO_REASON;\n-    }\n-\n-  if (uw_data->n_entries_filled >= uw_data->max_len)\n-    return _URC_NORMAL_STOP;\n-\n-  if (pc < (char *)uw_data->exclude_min || pc > (char *)uw_data->exclude_max)\n-    uw_data->traceback [uw_data->n_entries_filled ++] = pc + PC_ADJUST;\n-\n-  return _URC_NO_REASON;\n-}\n-\n-#endif\n-\n-/********************\n- * __gnat_backtrace *\n- ********************/\n-\n-int\n-__gnat_backtrace (void ** traceback __attribute__((unused)),\n-\t\t  int max_len __attribute__((unused)),\n-\t\t  void * exclude_min __attribute__((unused)),\n-\t\t  void * exclude_max __attribute__((unused)),\n-\t\t  int skip_frames __attribute__((unused)))\n-{\n-#if defined (__USING_SJLJ_EXCEPTIONS__)\n-  /* We have no unwind material (tables) at hand with sjlj eh, and no\n-     way to retrieve complete and accurate call chain information from\n-     the context stack we maintain.  */\n-  return 0;\n-#else\n-  uw_data_t uw_data;\n-  /* State carried over during the whole unwinding process.  */\n-\n-  uw_data.traceback   = traceback;\n-  uw_data.max_len     = max_len;\n-  uw_data.exclude_min = exclude_min;\n-  uw_data.exclude_max = exclude_max;\n-\n-  uw_data.n_frames_to_skip = skip_frames;\n-\n-  uw_data.n_frames_skipped = 0;\n-  uw_data.n_entries_filled = 0;\n-\n-  _Unwind_Backtrace ((_Unwind_Trace_Fn)trace_callback, &uw_data);\n-\n-  return uw_data.n_entries_filled;\n-#endif\n-}"}, {"sha": "abbe075979ceae9259da1fa70f05b6c9aa20ebdf", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 95, "deletions": 1, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2e635defba9d697a6c291013b37bd2c7ed91aa/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=9f2e635defba9d697a6c291013b37bd2c7ed91aa", "patch": "@@ -588,7 +588,101 @@ is_return_from(void *symbol_addr, void *ret_addr)\n    define it to a reasonable value to avoid a compilation error.  */\n #define _URC_NORMAL_STOP 0\n #endif\n-#include \"tb-gcc.c\"\n+\n+/* This is an implementation of the __gnat_backtrace routine using the\n+   underlying GCC unwinding support associated with the exception handling\n+   infrastructure.  This will only work for ZCX based applications.  */\n+\n+#include <unwind.h>\n+\n+/* The implementation boils down to a call to _Unwind_Backtrace with a\n+   tailored callback and carried-on data structure to keep track of the\n+   input parameters we got as well as of the basic processing state.  */\n+\n+/******************\n+ * trace_callback *\n+ ******************/\n+\n+#if !defined (__USING_SJLJ_EXCEPTIONS__)\n+\n+typedef struct {\n+  void ** traceback;\n+  int max_len;\n+  void * exclude_min;\n+  void * exclude_max;\n+  int  n_frames_to_skip;\n+  int  n_frames_skipped;\n+  int  n_entries_filled;\n+} uw_data_t;\n+\n+#if defined (__ia64__) && defined (__hpux__)\n+#include <uwx.h>\n+#endif\n+\n+static _Unwind_Reason_Code\n+trace_callback (struct _Unwind_Context * uw_context, uw_data_t * uw_data)\n+{\n+  char * pc;\n+\n+#if defined (__ia64__) && defined (__hpux__) && defined (USE_LIBUNWIND_EXCEPTIONS)\n+  /* Work around problem with _Unwind_GetIP on ia64 HP-UX. */\n+  uwx_get_reg ((struct uwx_env *) uw_context, UWX_REG_IP, (uint64_t *) &pc);\n+#else\n+  pc = (char *) _Unwind_GetIP (uw_context);\n+#endif\n+\n+  if (uw_data->n_frames_skipped < uw_data->n_frames_to_skip)\n+    {\n+      uw_data->n_frames_skipped ++;\n+      return _URC_NO_REASON;\n+    }\n+\n+  if (uw_data->n_entries_filled >= uw_data->max_len)\n+    return _URC_NORMAL_STOP;\n+\n+  if (pc < (char *)uw_data->exclude_min || pc > (char *)uw_data->exclude_max)\n+    uw_data->traceback [uw_data->n_entries_filled ++] = pc + PC_ADJUST;\n+\n+  return _URC_NO_REASON;\n+}\n+\n+#endif\n+\n+/********************\n+ * __gnat_backtrace *\n+ ********************/\n+\n+int\n+__gnat_backtrace (void ** traceback __attribute__((unused)),\n+\t\t  int max_len __attribute__((unused)),\n+\t\t  void * exclude_min __attribute__((unused)),\n+\t\t  void * exclude_max __attribute__((unused)),\n+\t\t  int skip_frames __attribute__((unused)))\n+{\n+#if defined (__USING_SJLJ_EXCEPTIONS__)\n+  /* We have no unwind material (tables) at hand with sjlj eh, and no\n+     way to retrieve complete and accurate call chain information from\n+     the context stack we maintain.  */\n+  return 0;\n+#else\n+  uw_data_t uw_data;\n+  /* State carried over during the whole unwinding process.  */\n+\n+  uw_data.traceback   = traceback;\n+  uw_data.max_len     = max_len;\n+  uw_data.exclude_min = exclude_min;\n+  uw_data.exclude_max = exclude_max;\n+\n+  uw_data.n_frames_to_skip = skip_frames;\n+\n+  uw_data.n_frames_skipped = 0;\n+  uw_data.n_entries_filled = 0;\n+\n+  _Unwind_Backtrace ((_Unwind_Trace_Fn)trace_callback, &uw_data);\n+\n+  return uw_data.n_entries_filled;\n+#endif\n+}\n \n /*------------------------------------------------------------------*\n  *-- The generic implementation based on frame layout assumptions --*"}]}