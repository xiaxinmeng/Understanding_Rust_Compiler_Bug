{"sha": "64b0f9284445df67cc0b64004cc87793076198ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRiMGY5Mjg0NDQ1ZGY2N2NjMGI2NDAwNGNjODc3OTMwNzYxOThhZQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-10-27T15:45:16Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-10-27T15:45:16Z"}, "message": "[AArch64] Use new reduc_[us](min|max)_scal optabs, inc. for builtins\n\n\t* config/aarch64/aarch64-simd-builtins.def (reduc_smax_, reduc_smin_,\n\treduc_umax_, reduc_umin_, reduc_smax_nan_, reduc_smin_nan_): Remove.\n\t(reduc_smax_scal_, reduc_smin_scal_, reduc_umax_scal_,\n\treduc_umin_scal_, reduc_smax_nan_scal_, reduc_smin_nan_scal_): New.\n\n\t* config/aarch64/aarch64-simd.md\n\t(reduc_<maxmin_uns>_<mode>): Rename VDQV_S variant to...\n\t(reduc_<maxmin_uns>_internal<mode>): ...this.\n\t(reduc_<maxmin_uns>_<mode>): New (VDQ_BHSI).\n\t(reduc_<maxmin_uns>_scal_<mode>): New (*2).\n\n\t(reduc_<maxmin_uns>_v2si): Combine with below, renaming...\n\t(reduc_<maxmin_uns>_<mode>): Combine V2F with above, renaming...\n\t(reduc_<maxmin_uns>_internal_<mode>): ...to this (VDQF).\n\n\t* config/aarch64/arm_neon.h (vmaxv_f32, vmaxv_s8, vmaxv_s16,\n\tvmaxv_s32, vmaxv_u8, vmaxv_u16, vmaxv_u32, vmaxvq_f32, vmaxvq_f64,\n\tvmaxvq_s8, vmaxvq_s16, vmaxvq_s32, vmaxvq_u8, vmaxvq_u16, vmaxvq_u32,\n\tvmaxnmv_f32, vmaxnmvq_f32, vmaxnmvq_f64, vminv_f32, vminv_s8,\n\tvminv_s16, vminv_s32, vminv_u8, vminv_u16, vminv_u32, vminvq_f32,\n\tvminvq_f64, vminvq_s8, vminvq_s16, vminvq_s32, vminvq_u8, vminvq_u16,\n\tvminvq_u32, vminnmv_f32, vminnmvq_f32, vminnmvq_f64): Update to use\n\t__builtin_aarch64_reduc_..._scal; remove vget_lane wrapper.\n\nFrom-SVN: r216741", "tree": {"sha": "7a3e7812d3a4763929b96defa43468ce041157a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a3e7812d3a4763929b96defa43468ce041157a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64b0f9284445df67cc0b64004cc87793076198ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b0f9284445df67cc0b64004cc87793076198ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64b0f9284445df67cc0b64004cc87793076198ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b0f9284445df67cc0b64004cc87793076198ae/comments", "author": null, "committer": null, "parents": [{"sha": "ec528bd1e12c07156c2507107a0fba9338536f8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec528bd1e12c07156c2507107a0fba9338536f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec528bd1e12c07156c2507107a0fba9338536f8d"}], "stats": {"total": 198, "additions": 108, "deletions": 90}, "files": [{"sha": "a938d9dd2fc4fcbc3e0935bfeb8de578e3aad09e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b0f9284445df67cc0b64004cc87793076198ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b0f9284445df67cc0b64004cc87793076198ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64b0f9284445df67cc0b64004cc87793076198ae", "patch": "@@ -1,3 +1,29 @@\n+2014-10-27  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (reduc_smax_, reduc_smin_,\n+\treduc_umax_, reduc_umin_, reduc_smax_nan_, reduc_smin_nan_): Remove.\n+\t(reduc_smax_scal_, reduc_smin_scal_, reduc_umax_scal_,\n+\treduc_umin_scal_, reduc_smax_nan_scal_, reduc_smin_nan_scal_): New.\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(reduc_<maxmin_uns>_<mode>): Rename VDQV_S variant to...\n+\t(reduc_<maxmin_uns>_internal<mode>): ...this.\n+\t(reduc_<maxmin_uns>_<mode>): New (VDQ_BHSI).\n+\t(reduc_<maxmin_uns>_scal_<mode>): New (*2).\n+\n+\t(reduc_<maxmin_uns>_v2si): Combine with below, renaming...\n+\t(reduc_<maxmin_uns>_<mode>): Combine V2F with above, renaming...\n+\t(reduc_<maxmin_uns>_internal_<mode>): ...to this (VDQF).\n+\n+\t* config/aarch64/arm_neon.h (vmaxv_f32, vmaxv_s8, vmaxv_s16,\n+\tvmaxv_s32, vmaxv_u8, vmaxv_u16, vmaxv_u32, vmaxvq_f32, vmaxvq_f64,\n+\tvmaxvq_s8, vmaxvq_s16, vmaxvq_s32, vmaxvq_u8, vmaxvq_u16, vmaxvq_u32,\n+\tvmaxnmv_f32, vmaxnmvq_f32, vmaxnmvq_f64, vminv_f32, vminv_s8,\n+\tvminv_s16, vminv_s32, vminv_u8, vminv_u16, vminv_u32, vminvq_f32,\n+\tvminvq_f64, vminvq_s8, vminvq_s16, vminvq_s32, vminvq_u8, vminvq_u16,\n+\tvminvq_u32, vminnmv_f32, vminnmvq_f32, vminnmvq_f64): Update to use\n+\t__builtin_aarch64_reduc_..._scal; remove vget_lane wrapper.\n+\n 2014-10-27  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def"}, {"sha": "62b7f3357d12f2a4a483588e3ccf027c3f957c20", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b0f9284445df67cc0b64004cc87793076198ae/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b0f9284445df67cc0b64004cc87793076198ae/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=64b0f9284445df67cc0b64004cc87793076198ae", "patch": "@@ -225,13 +225,13 @@\n   /* Implemented by aarch64_reduc_plus_<mode>.  */\n   BUILTIN_VALL (UNOP, reduc_plus_scal_, 10)\n \n-  /* Implemented by reduc_<maxmin_uns>_<mode>.  */\n-  BUILTIN_VDQIF (UNOP, reduc_smax_, 10)\n-  BUILTIN_VDQIF (UNOP, reduc_smin_, 10)\n-  BUILTIN_VDQ_BHSI (UNOP, reduc_umax_, 10)\n-  BUILTIN_VDQ_BHSI (UNOP, reduc_umin_, 10)\n-  BUILTIN_VDQF (UNOP, reduc_smax_nan_, 10)\n-  BUILTIN_VDQF (UNOP, reduc_smin_nan_, 10)\n+  /* Implemented by reduc_<maxmin_uns>_scal_<mode> (producing scalar).  */\n+  BUILTIN_VDQIF (UNOP, reduc_smax_scal_, 10)\n+  BUILTIN_VDQIF (UNOP, reduc_smin_scal_, 10)\n+  BUILTIN_VDQ_BHSI (UNOPU, reduc_umax_scal_, 10)\n+  BUILTIN_VDQ_BHSI (UNOPU, reduc_umin_scal_, 10)\n+  BUILTIN_VDQF (UNOP, reduc_smax_nan_scal_, 10)\n+  BUILTIN_VDQF (UNOP, reduc_smin_nan_scal_, 10)\n \n   /* Implemented by <maxmin><mode>3.\n      smax variants map to fmaxnm,"}, {"sha": "578760a4b3ce002b982f1704e2e72b12b2e88957", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b0f9284445df67cc0b64004cc87793076198ae/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b0f9284445df67cc0b64004cc87793076198ae/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=64b0f9284445df67cc0b64004cc87793076198ae", "patch": "@@ -1847,7 +1847,40 @@\n \n ;; 'across lanes' max and min ops.\n \n-(define_insn \"reduc_<maxmin_uns>_<mode>\"\n+;; Template for outputting a scalar, so we can create __builtins which can be\n+;; gimple_fold'd to the REDUC_(MAX|MIN)_EXPR tree code.  (This is FP smax/smin).\n+(define_expand \"reduc_<maxmin_uns>_scal_<mode>\"\n+  [(match_operand:<VEL> 0 \"register_operand\")\n+   (unspec:VDQF [(match_operand:VDQF 1 \"register_operand\")]\n+\t\tFMAXMINV)]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx elt = GEN_INT (ENDIAN_LANE_N (<MODE>mode, 0));\n+    rtx scratch = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_aarch64_reduc_<maxmin_uns>_internal<mode> (scratch,\n+\t\t\t\t\t\t\t      operands[1]));\n+    emit_insn (gen_aarch64_get_lane<mode> (operands[0], scratch, elt));\n+    DONE;\n+  }\n+)\n+\n+;; Likewise for integer cases, signed and unsigned.\n+(define_expand \"reduc_<maxmin_uns>_scal_<mode>\"\n+  [(match_operand:<VEL> 0 \"register_operand\")\n+   (unspec:VDQ_BHSI [(match_operand:VDQ_BHSI 1 \"register_operand\")]\n+\t\t    MAXMINV)]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx elt = GEN_INT (ENDIAN_LANE_N (<MODE>mode, 0));\n+    rtx scratch = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_aarch64_reduc_<maxmin_uns>_internal<mode> (scratch,\n+\t\t\t\t\t\t\t      operands[1]));\n+    emit_insn (gen_aarch64_get_lane<mode> (operands[0], scratch, elt));\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"aarch64_reduc_<maxmin_uns>_internal<mode>\"\n  [(set (match_operand:VDQV_S 0 \"register_operand\" \"=w\")\n        (unspec:VDQV_S [(match_operand:VDQV_S 1 \"register_operand\" \"w\")]\n \t\t    MAXMINV))]\n@@ -1856,7 +1889,7 @@\n   [(set_attr \"type\" \"neon_reduc_minmax<q>\")]\n )\n \n-(define_insn \"reduc_<maxmin_uns>_v2si\"\n+(define_insn \"aarch64_reduc_<maxmin_uns>_internalv2si\"\n  [(set (match_operand:V2SI 0 \"register_operand\" \"=w\")\n        (unspec:V2SI [(match_operand:V2SI 1 \"register_operand\" \"w\")]\n \t\t    MAXMINV))]\n@@ -1865,24 +1898,15 @@\n   [(set_attr \"type\" \"neon_reduc_minmax\")]\n )\n \n-(define_insn \"reduc_<maxmin_uns>_<mode>\"\n- [(set (match_operand:V2F 0 \"register_operand\" \"=w\")\n-       (unspec:V2F [(match_operand:V2F 1 \"register_operand\" \"w\")]\n+(define_insn \"aarch64_reduc_<maxmin_uns>_internal<mode>\"\n+ [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n+       (unspec:VDQF [(match_operand:VDQF 1 \"register_operand\" \"w\")]\n \t\t    FMAXMINV))]\n  \"TARGET_SIMD\"\n- \"<maxmin_uns_op>p\\\\t%<Vetype>0, %1.<Vtype>\"\n+ \"<maxmin_uns_op><vp>\\\\t%<Vetype>0, %1.<Vtype>\"\n   [(set_attr \"type\" \"neon_fp_reduc_minmax_<Vetype><q>\")]\n )\n \n-(define_insn \"reduc_<maxmin_uns>_v4sf\"\n- [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n-       (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"w\")]\n-\t\t    FMAXMINV))]\n- \"TARGET_SIMD\"\n- \"<maxmin_uns_op>v\\\\t%s0, %1.4s\"\n-  [(set_attr \"type\" \"neon_fp_reduc_minmax_s_q\")]\n-)\n-\n ;; aarch64_simd_bsl may compile to any of bsl/bif/bit depending on register\n ;; allocation.\n ;; Operand 1 is the mask, operands 2 and 3 are the bitfields from which"}, {"sha": "0ec1a24a52d81a6f8a2d45c0a931e771972d5eef", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 36, "deletions": 68, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b0f9284445df67cc0b64004cc87793076198ae/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b0f9284445df67cc0b64004cc87793076198ae/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=64b0f9284445df67cc0b64004cc87793076198ae", "patch": "@@ -18590,127 +18590,111 @@ vmaxnmq_f64 (float64x2_t __a, float64x2_t __b)\n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vmaxv_f32 (float32x2_t __a)\n {\n-  return vget_lane_f32 (__builtin_aarch64_reduc_smax_nan_v2sf (__a),\n-\t\t\t0);\n+  return __builtin_aarch64_reduc_smax_nan_scal_v2sf (__a);\n }\n \n __extension__ static __inline int8_t __attribute__ ((__always_inline__))\n vmaxv_s8 (int8x8_t __a)\n {\n-  return vget_lane_s8 (__builtin_aarch64_reduc_smax_v8qi (__a), 0);\n+  return __builtin_aarch64_reduc_smax_scal_v8qi (__a);\n }\n \n __extension__ static __inline int16_t __attribute__ ((__always_inline__))\n vmaxv_s16 (int16x4_t __a)\n {\n-  return vget_lane_s16 (__builtin_aarch64_reduc_smax_v4hi (__a), 0);\n+  return __builtin_aarch64_reduc_smax_scal_v4hi (__a);\n }\n \n __extension__ static __inline int32_t __attribute__ ((__always_inline__))\n vmaxv_s32 (int32x2_t __a)\n {\n-  return vget_lane_s32 (__builtin_aarch64_reduc_smax_v2si (__a), 0);\n+  return __builtin_aarch64_reduc_smax_scal_v2si (__a);\n }\n \n __extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n vmaxv_u8 (uint8x8_t __a)\n {\n-  return vget_lane_u8 ((uint8x8_t)\n-\t\t__builtin_aarch64_reduc_umax_v8qi ((int8x8_t) __a),\n-\t\t0);\n+  return __builtin_aarch64_reduc_umax_scal_v8qi_uu (__a);\n }\n \n __extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n vmaxv_u16 (uint16x4_t __a)\n {\n-  return vget_lane_u16 ((uint16x4_t)\n-\t\t__builtin_aarch64_reduc_umax_v4hi ((int16x4_t) __a),\n-\t\t0);\n+  return __builtin_aarch64_reduc_umax_scal_v4hi_uu (__a);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vmaxv_u32 (uint32x2_t __a)\n {\n-  return vget_lane_u32 ((uint32x2_t)\n-\t\t__builtin_aarch64_reduc_umax_v2si ((int32x2_t) __a),\n-\t\t0);\n+  return __builtin_aarch64_reduc_umax_scal_v2si_uu (__a);\n }\n \n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vmaxvq_f32 (float32x4_t __a)\n {\n-  return vgetq_lane_f32 (__builtin_aarch64_reduc_smax_nan_v4sf (__a),\n-\t\t\t 0);\n+  return __builtin_aarch64_reduc_smax_nan_scal_v4sf (__a);\n }\n \n __extension__ static __inline float64_t __attribute__ ((__always_inline__))\n vmaxvq_f64 (float64x2_t __a)\n {\n-  return vgetq_lane_f64 (__builtin_aarch64_reduc_smax_nan_v2df (__a),\n-\t\t\t 0);\n+  return __builtin_aarch64_reduc_smax_nan_scal_v2df (__a);\n }\n \n __extension__ static __inline int8_t __attribute__ ((__always_inline__))\n vmaxvq_s8 (int8x16_t __a)\n {\n-  return vgetq_lane_s8 (__builtin_aarch64_reduc_smax_v16qi (__a), 0);\n+  return __builtin_aarch64_reduc_smax_scal_v16qi (__a);\n }\n \n __extension__ static __inline int16_t __attribute__ ((__always_inline__))\n vmaxvq_s16 (int16x8_t __a)\n {\n-  return vgetq_lane_s16 (__builtin_aarch64_reduc_smax_v8hi (__a), 0);\n+  return __builtin_aarch64_reduc_smax_scal_v8hi (__a);\n }\n \n __extension__ static __inline int32_t __attribute__ ((__always_inline__))\n vmaxvq_s32 (int32x4_t __a)\n {\n-  return vgetq_lane_s32 (__builtin_aarch64_reduc_smax_v4si (__a), 0);\n+  return __builtin_aarch64_reduc_smax_scal_v4si (__a);\n }\n \n __extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n vmaxvq_u8 (uint8x16_t __a)\n {\n-  return vgetq_lane_u8 ((uint8x16_t)\n-\t\t__builtin_aarch64_reduc_umax_v16qi ((int8x16_t) __a),\n-\t\t0);\n+  return __builtin_aarch64_reduc_umax_scal_v16qi_uu (__a);\n }\n \n __extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n vmaxvq_u16 (uint16x8_t __a)\n {\n-  return vgetq_lane_u16 ((uint16x8_t)\n-\t\t__builtin_aarch64_reduc_umax_v8hi ((int16x8_t) __a),\n-\t\t0);\n+  return __builtin_aarch64_reduc_umax_scal_v8hi_uu (__a);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vmaxvq_u32 (uint32x4_t __a)\n {\n-  return vgetq_lane_u32 ((uint32x4_t)\n-\t\t__builtin_aarch64_reduc_umax_v4si ((int32x4_t) __a),\n-\t\t0);\n+  return __builtin_aarch64_reduc_umax_scal_v4si_uu (__a);\n }\n \n /* vmaxnmv  */\n \n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vmaxnmv_f32 (float32x2_t __a)\n {\n-  return vget_lane_f32 (__builtin_aarch64_reduc_smax_v2sf (__a),\n-\t\t\t0);\n+  return __builtin_aarch64_reduc_smax_scal_v2sf (__a);\n }\n \n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vmaxnmvq_f32 (float32x4_t __a)\n {\n-  return vgetq_lane_f32 (__builtin_aarch64_reduc_smax_v4sf (__a), 0);\n+  return __builtin_aarch64_reduc_smax_scal_v4sf (__a);\n }\n \n __extension__ static __inline float64_t __attribute__ ((__always_inline__))\n vmaxnmvq_f64 (float64x2_t __a)\n {\n-  return vgetq_lane_f64 (__builtin_aarch64_reduc_smax_v2df (__a), 0);\n+  return __builtin_aarch64_reduc_smax_scal_v2df (__a);\n }\n \n /* vmin  */\n@@ -18836,127 +18820,111 @@ vminnmq_f64 (float64x2_t __a, float64x2_t __b)\n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vminv_f32 (float32x2_t __a)\n {\n-  return vget_lane_f32 (__builtin_aarch64_reduc_smin_nan_v2sf (__a),\n-\t\t\t0);\n+  return __builtin_aarch64_reduc_smin_nan_scal_v2sf (__a);\n }\n \n __extension__ static __inline int8_t __attribute__ ((__always_inline__))\n vminv_s8 (int8x8_t __a)\n {\n-  return vget_lane_s8 (__builtin_aarch64_reduc_smin_v8qi (__a),\n-\t\t       0);\n+  return __builtin_aarch64_reduc_smin_scal_v8qi (__a);\n }\n \n __extension__ static __inline int16_t __attribute__ ((__always_inline__))\n vminv_s16 (int16x4_t __a)\n {\n-  return vget_lane_s16 (__builtin_aarch64_reduc_smin_v4hi (__a), 0);\n+  return __builtin_aarch64_reduc_smin_scal_v4hi (__a);\n }\n \n __extension__ static __inline int32_t __attribute__ ((__always_inline__))\n vminv_s32 (int32x2_t __a)\n {\n-  return vget_lane_s32 (__builtin_aarch64_reduc_smin_v2si (__a), 0);\n+  return __builtin_aarch64_reduc_smin_scal_v2si (__a);\n }\n \n __extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n vminv_u8 (uint8x8_t __a)\n {\n-  return vget_lane_u8 ((uint8x8_t)\n-\t\t__builtin_aarch64_reduc_umin_v8qi ((int8x8_t) __a),\n-\t\t0);\n+  return __builtin_aarch64_reduc_umin_scal_v8qi_uu (__a);\n }\n \n __extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n vminv_u16 (uint16x4_t __a)\n {\n-  return vget_lane_u16 ((uint16x4_t)\n-\t\t__builtin_aarch64_reduc_umin_v4hi ((int16x4_t) __a),\n-\t\t0);\n+  return __builtin_aarch64_reduc_umin_scal_v4hi_uu (__a);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vminv_u32 (uint32x2_t __a)\n {\n-  return vget_lane_u32 ((uint32x2_t)\n-\t\t__builtin_aarch64_reduc_umin_v2si ((int32x2_t) __a),\n-\t\t0);\n+  return __builtin_aarch64_reduc_umin_scal_v2si_uu (__a);\n }\n \n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vminvq_f32 (float32x4_t __a)\n {\n-  return vgetq_lane_f32 (__builtin_aarch64_reduc_smin_nan_v4sf (__a),\n-\t\t\t 0);\n+  return __builtin_aarch64_reduc_smin_nan_scal_v4sf (__a);\n }\n \n __extension__ static __inline float64_t __attribute__ ((__always_inline__))\n vminvq_f64 (float64x2_t __a)\n {\n-  return vgetq_lane_f64 (__builtin_aarch64_reduc_smin_nan_v2df (__a),\n-\t\t\t 0);\n+  return __builtin_aarch64_reduc_smin_nan_scal_v2df (__a);\n }\n \n __extension__ static __inline int8_t __attribute__ ((__always_inline__))\n vminvq_s8 (int8x16_t __a)\n {\n-  return vgetq_lane_s8 (__builtin_aarch64_reduc_smin_v16qi (__a), 0);\n+  return __builtin_aarch64_reduc_smin_scal_v16qi (__a);\n }\n \n __extension__ static __inline int16_t __attribute__ ((__always_inline__))\n vminvq_s16 (int16x8_t __a)\n {\n-  return vgetq_lane_s16 (__builtin_aarch64_reduc_smin_v8hi (__a), 0);\n+  return __builtin_aarch64_reduc_smin_scal_v8hi (__a);\n }\n \n __extension__ static __inline int32_t __attribute__ ((__always_inline__))\n vminvq_s32 (int32x4_t __a)\n {\n-  return vgetq_lane_s32 (__builtin_aarch64_reduc_smin_v4si (__a), 0);\n+  return __builtin_aarch64_reduc_smin_scal_v4si (__a);\n }\n \n __extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n vminvq_u8 (uint8x16_t __a)\n {\n-  return vgetq_lane_u8 ((uint8x16_t)\n-\t\t__builtin_aarch64_reduc_umin_v16qi ((int8x16_t) __a),\n-\t\t0);\n+  return __builtin_aarch64_reduc_umin_scal_v16qi_uu (__a);\n }\n \n __extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n vminvq_u16 (uint16x8_t __a)\n {\n-  return vgetq_lane_u16 ((uint16x8_t)\n-\t\t__builtin_aarch64_reduc_umin_v8hi ((int16x8_t) __a),\n-\t\t0);\n+  return __builtin_aarch64_reduc_umin_scal_v8hi_uu (__a);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vminvq_u32 (uint32x4_t __a)\n {\n-  return vgetq_lane_u32 ((uint32x4_t)\n-\t\t__builtin_aarch64_reduc_umin_v4si ((int32x4_t) __a),\n-\t\t0);\n+  return __builtin_aarch64_reduc_umin_scal_v4si_uu (__a);\n }\n \n /* vminnmv  */\n \n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vminnmv_f32 (float32x2_t __a)\n {\n-  return vget_lane_f32 (__builtin_aarch64_reduc_smin_v2sf (__a), 0);\n+  return __builtin_aarch64_reduc_smin_scal_v2sf (__a);\n }\n \n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vminnmvq_f32 (float32x4_t __a)\n {\n-  return vgetq_lane_f32 (__builtin_aarch64_reduc_smin_v4sf (__a), 0);\n+  return __builtin_aarch64_reduc_smin_scal_v4sf (__a);\n }\n \n __extension__ static __inline float64_t __attribute__ ((__always_inline__))\n vminnmvq_f64 (float64x2_t __a)\n {\n-  return vgetq_lane_f64 (__builtin_aarch64_reduc_smin_v2df (__a), 0);\n+  return __builtin_aarch64_reduc_smin_scal_v2df (__a);\n }\n \n /* vmla */"}]}