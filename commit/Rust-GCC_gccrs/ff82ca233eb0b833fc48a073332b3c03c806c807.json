{"sha": "ff82ca233eb0b833fc48a073332b3c03c806c807", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4MmNhMjMzZWIwYjgzM2ZjNDhhMDczMzMyYjNjMDNjODA2YzgwNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-13T17:57:45Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-13T17:57:45Z"}, "message": "a29k-protos.h: New file.\n\n\t* a29k-protos.h: New file.\n\n\t* a29k.c: Include tm_p.h.  Add static prototypes.  Fix compile\n\ttime warnings.\n\n\t* a29k.h: Move prototypes to a29k-protos.h.  Fix compile time\n\twarnings.\n\nFrom-SVN: r31393", "tree": {"sha": "6b6f8111fbcfdd4ad3044b285d7eebf2c6255603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b6f8111fbcfdd4ad3044b285d7eebf2c6255603"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff82ca233eb0b833fc48a073332b3c03c806c807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff82ca233eb0b833fc48a073332b3c03c806c807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff82ca233eb0b833fc48a073332b3c03c806c807", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff82ca233eb0b833fc48a073332b3c03c806c807/comments", "author": null, "committer": null, "parents": [{"sha": "bcc6049ca67ff9528920dfdec677e362d32ad547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc6049ca67ff9528920dfdec677e362d32ad547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc6049ca67ff9528920dfdec677e362d32ad547"}], "stats": {"total": 130, "additions": 106, "deletions": 24}, "files": [{"sha": "cb6ffe8201bd8ac09ab65cbda62972bdb40d2513", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff82ca233eb0b833fc48a073332b3c03c806c807/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff82ca233eb0b833fc48a073332b3c03c806c807/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff82ca233eb0b833fc48a073332b3c03c806c807", "patch": "@@ -1,3 +1,13 @@\n+2000-01-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* a29k-protos.h: New file.\n+\n+\t* a29k.c: Include tm_p.h.  Add static prototypes.  Fix compile\n+\ttime warnings.\n+\t\n+\t* a29k.h: Move prototypes to a29k-protos.h.  Fix compile time\n+\twarnings.\n+\n 2000-01-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* clipper-protos.h: New file."}, {"sha": "574021e18ff964d8f4bfa0728f5c6ba34ff0fba1", "filename": "gcc/config/a29k/a29k-protos.h", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff82ca233eb0b833fc48a073332b3c03c806c807/gcc%2Fconfig%2Fa29k%2Fa29k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff82ca233eb0b833fc48a073332b3c03c806c807/gcc%2Fconfig%2Fa29k%2Fa29k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k-protos.h?ref=ff82ca233eb0b833fc48a073332b3c03c806c807", "patch": "@@ -0,0 +1,65 @@\n+/* Definitions of target machine for GNU compiler, for AMD Am29000 CPU.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Richard Kenner (kenner@nyu.edu)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifdef RTX_CODE\n+/* This function is used to get the address of an object.  */\n+extern struct rtx_def *a29k_get_reloaded_address PARAMS ((rtx));\n+extern int gpc_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int long_const_operand PARAMS ((rtx, enum machine_mode));\n+extern int cint_8_operand PARAMS ((rtx, enum machine_mode));\n+extern int cint_16_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_0_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_8_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_16_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_24_operand PARAMS ((rtx, enum machine_mode));\n+extern int float_const_operand PARAMS ((rtx, enum machine_mode));\n+extern int gpc_reg_or_float_constant_operand PARAMS ((rtx, enum machine_mode));\n+extern int gpc_reg_or_integer_constant_operand PARAMS ((rtx, enum machine_mode));\n+extern int spec_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int accum_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int srcb_operand PARAMS ((rtx, enum machine_mode));\n+extern int cmplsrcb_operand PARAMS ((rtx, enum machine_mode));\n+extern int gpc_reg_or_immediate_operand PARAMS ((rtx, enum machine_mode));\n+extern int and_operand PARAMS ((rtx, enum machine_mode));\n+extern int add_operand PARAMS ((rtx, enum machine_mode));\n+extern int call_operand PARAMS ((rtx, enum machine_mode));\n+extern int in_operand PARAMS ((rtx, enum machine_mode));\n+extern int out_operand PARAMS ((rtx, enum machine_mode));\n+extern int reload_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern void a29k_set_memflags PARAMS ((rtx, rtx));\n+extern int fp_comparison_operator PARAMS ((rtx, enum machine_mode));\n+extern int branch_operator PARAMS ((rtx, enum machine_mode));\n+extern int load_multiple_operation PARAMS ((rtx, enum machine_mode));\n+extern int store_multiple_operation PARAMS ((rtx, enum machine_mode));\n+extern int masks_bits_for_special PARAMS ((rtx, rtx));\n+extern int epilogue_operand PARAMS ((rtx, enum machine_mode));\n+extern enum reg_class secondary_reload_class PARAMS ((enum reg_class,\n+\t\t\t\t\t\t      enum machine_mode, rtx));\n+extern int incoming_reg PARAMS ((int, int));\n+extern void a29k_clobbers_to PARAMS ((rtx, rtx));\n+extern int needs_regstack_p PARAMS ((void));\n+extern int uses_local_reg_p PARAMS ((rtx));\n+extern int null_epilogue PARAMS ((void));\n+extern void print_operand PARAMS ((FILE *, rtx, int));\n+extern void a29k_compute_reg_names PARAMS ((void));\n+extern void output_prolog PARAMS ((FILE *, int));\n+extern void output_epilog PARAMS ((FILE *, int));\n+#endif /* RTX_CODE */"}, {"sha": "9b06af30a6cc908d75bf6c256eafabbd8b183d98", "filename": "gcc/config/a29k/a29k.c", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff82ca233eb0b833fc48a073332b3c03c806c807/gcc%2Fconfig%2Fa29k%2Fa29k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff82ca233eb0b833fc48a073332b3c03c806c807/gcc%2Fconfig%2Fa29k%2Fa29k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.c?ref=ff82ca233eb0b833fc48a073332b3c03c806c807", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on AMD Am29000.\n-   Copyright (C) 1987, 88, 90-95, 1997, 1998, 1999 Free Software\n+   Copyright (C) 1987, 88, 90-95, 97-99, 2000 Free Software\n    Foundation, Inc. \n    Contributed by Richard Kenner (kenner@nyu.edu)\n \n@@ -38,6 +38,12 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"tree.h\"\n #include \"reload.h\"\n+#include \"tm_p.h\"\n+\n+static int shift_constant_operand PARAMS ((rtx, enum machine_mode, int));\n+static void a29k_set_memflags_1 PARAMS ((rtx, int, int, int, int));\n+static void compute_regstack_size PARAMS ((void));\n+static void check_epilogue_internal_label PARAMS ((FILE *));\n \n #define min(A,B)\t((A) < (B) ? (A) : (B))\n \n@@ -70,7 +76,7 @@ static int a29k_first_epilogue_insn_used;\n    contain the tag words prior to the declaration.  So the name must be stored\n    away.  */\n \n-char *a29k_function_name;\n+const char *a29k_function_name;\n \n /* Mapping of registers to debug register numbers.  The only change is\n    for the frame pointer and the register numbers used for the incoming\n@@ -89,7 +95,7 @@ int a29k_compare_fp_p;\n int\n cint_8_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return GET_CODE (op) == CONST_INT && (INTVAL (op) & 0xffffff00) == 0;\n }\n@@ -99,7 +105,7 @@ cint_8_operand (op, mode)\n int\n cint_16_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return GET_CODE (op) == CONST_INT && (INTVAL (op) & 0xffff0000) == 0;\n }\n@@ -109,7 +115,7 @@ cint_16_operand (op, mode)\n int\n long_const_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (! CONSTANT_P (op))\n     return 0;\n@@ -131,7 +137,7 @@ long_const_operand (op, mode)\n static int\n shift_constant_operand (op, mode, val)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n      int val;\n {\n   return ((GET_CODE (op) == CONST_INT && INTVAL (op) == val)\n@@ -234,7 +240,7 @@ spec_reg_operand (op, mode)\n int\n accum_reg_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == REG\n \t  && REGNO (op) >= R_ACU (0) && REGNO (op) <= R_ACU (3));\n@@ -347,7 +353,7 @@ add_operand (op, mode)\n int\n call_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -372,8 +378,6 @@ in_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  rtx orig_op = op;\n-\n   if (! general_operand (op, mode))\n     return 0;\n \n@@ -444,7 +448,7 @@ out_operand (op, mode)\n int\n reload_memory_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   int regno = true_regnum (op);\n \n@@ -490,19 +494,20 @@ a29k_set_memflags_1 (x, in_struct_p, scalar_p, volatile_p, unchanging_p)\n     case SEQUENCE:\n     case PARALLEL:\n       for (i = XVECLEN (x, 0) - 1; i >= 0; i--)\n-\ta29k_set_memflags_1 (XVECEXP (x, 0, i), in_struct_p, volatile_p,\n-\t\t\t     unchanging_p);\n+\ta29k_set_memflags_1 (XVECEXP (x, 0, i), in_struct_p, scalar_p,\n+\t\t\t     volatile_p, unchanging_p);\n       break;\n \n     case INSN:\n-      a29k_set_memflags_1 (PATTERN (x), in_struct_p, volatile_p,\n+      a29k_set_memflags_1 (PATTERN (x), in_struct_p, scalar_p, volatile_p,\n \t\t\t   unchanging_p);\n       break;\n \n     case SET:\n-      a29k_set_memflags_1 (SET_DEST (x), in_struct_p, volatile_p,\n+      a29k_set_memflags_1 (SET_DEST (x), in_struct_p, scalar_p, volatile_p,\n+\t\t\t   unchanging_p);\n+      a29k_set_memflags_1 (SET_SRC (x), in_struct_p, scalar_p, volatile_p,\n \t\t\t   unchanging_p);\n-      a29k_set_memflags_1 (SET_SRC (x), in_struct_p, volatile_p, unchanging_p);\n       break;\n \n     case MEM:\n@@ -511,6 +516,9 @@ a29k_set_memflags_1 (x, in_struct_p, scalar_p, volatile_p, unchanging_p)\n       MEM_VOLATILE_P (x) = volatile_p;\n       RTX_UNCHANGING_P (x) = unchanging_p;\n       break;\n+\n+    default:\n+      break;\n     }\n }\n \n@@ -568,7 +576,7 @@ branch_operator (op, mode)\n int\n load_multiple_operation (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   int count = XVECLEN (op, 0) - 2;\n   int dest_regno;\n@@ -610,7 +618,7 @@ load_multiple_operation (op, mode)\n int\n store_multiple_operation (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   int num_special = TARGET_NO_STOREM_BUG ? 2 : 1;\n   int count = XVECLEN (op, 0) - num_special;\n@@ -722,7 +730,7 @@ masks_bits_for_special (reg, mask)\n int\n epilogue_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return next_active_insn (op) == 0 && a29k_first_epilogue_insn != 0;\n }\n@@ -909,6 +917,9 @@ uses_local_reg_p (x)\n     case LABEL_REF:\n     case SYMBOL_REF:\n       return 0;\n+\n+    default:\n+      break;\n     }\n \n   fmt = GET_RTX_FORMAT (GET_CODE (x));"}, {"sha": "5f1f2f2f119acb3d2c078ded86fa7bc2d6b62614", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff82ca233eb0b833fc48a073332b3c03c806c807/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff82ca233eb0b833fc48a073332b3c03c806c807/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=ff82ca233eb0b833fc48a073332b3c03c806c807", "patch": "@@ -653,10 +653,6 @@ enum reg_class { NO_REGS, LR0_REGS, GENERAL_REGS, BP_REGS, FC_REGS, CR_REGS,\n #define SECONDARY_RELOAD_CLASS(CLASS,MODE,IN) \\\n   secondary_reload_class (CLASS, MODE, IN)\n \n-/* This function is used to get the address of an object.  */\n-\n-extern struct rtx_def *a29k_get_reloaded_address ();\n-\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.\n \n@@ -932,7 +928,7 @@ extern int a29k_compare_fp_p;\n    which can't be done until after register allocation, but must be done\n    before final_start_function is called.  */\n \n-extern char *a29k_function_name;\n+extern const char *a29k_function_name;\n \n #define ASM_DECLARE_FUNCTION_NAME(FILE,NAME,DECL)\t\\\n   a29k_function_name = NAME; \\"}]}