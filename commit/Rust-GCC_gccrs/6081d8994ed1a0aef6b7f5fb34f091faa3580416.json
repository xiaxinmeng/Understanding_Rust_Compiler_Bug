{"sha": "6081d8994ed1a0aef6b7f5fb34f091faa3580416", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA4MWQ4OTk0ZWQxYTBhZWY2YjdmNWZiMzRmMDkxZmFhMzU4MDQxNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-26T08:35:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-26T08:35:26Z"}, "message": "c++: Fix ICE with nsdmi [PR99705]\n\nWhen adding P0784R7 constexpr new support, we still didn't have\nP1331R2 implemented and so I had to change also build_vec_delete_1\n- instead of having uninitialized tbase temporary later initialized\nby MODIFY_EXPR I've set the DECL_INITIAL for it - because otherwise\nit would be rejected during constexpr evaluation which didn't like\nuninitialized vars.  Unfortunately, that change broke the following\ntestcase.\nThe problem is that these temporaries (not just tbase but tbase was\nthe only one with an initializer) are created during NSDMI parsing\nand current_function_decl is NULL at that point.  Later when we\nclone body of constructors, auto_var_in_fn_p is false for those\n(as they have NULL DECL_CONTEXT) and so they aren't duplicated,\nand what is worse, the DECL_INITIAL isn't duplicated either nor processed,\nand during expansion we ICE because the code from DECL_INITIAL of that\nvar refers to the abstract constructor's PARM_DECL (this) rather than\nthe actual constructor's one.\n\nSo, either we can just revert those build_vec_delete_1 changes (as done\nin the second patch - in attachment), or, as the first patch does, we can\ncopy the temporaries during bot_manip like we copy the temporaries of\nTARGET_EXPRs.  To me that looks like a better fix because e.g. if\nbreak_out_of_target_exprs is called for the same NSDMI multiple times,\nsharing the temporaries looks just wrong to me.  If the temporaries\nare declared as BIND_EXPR_VARS of some BIND_EXPR (which is the case\nof the tbase variable built by build_vec_delete_1 and is the only way\nhow the DECL_INITIAL can be walked by *walk_tree*), then we need to\ncopy it also in the BIND_EXPR BIND_EXPR_VARS chain, other temporaries\n(those that don't need DECL_INITIAL) often have just DECL_EXPR and no\ncorresponding BIND_EXPR.\nNote, ({ }) are rejected in nsdmis, so all we run into are temporaries\nthe FE creates artificially.\n\n2021-03-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/99705\n\t* tree.c (bot_manip): Remap artificial automatic temporaries mentioned\n\tin DECL_EXPR or in BIND_EXPR_VARS.\n\n\t* g++.dg/cpp0x/new5.C: New test.", "tree": {"sha": "ca344bbd24f1ec91a05bb3b8609ad1ff26dbba2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca344bbd24f1ec91a05bb3b8609ad1ff26dbba2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6081d8994ed1a0aef6b7f5fb34f091faa3580416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6081d8994ed1a0aef6b7f5fb34f091faa3580416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6081d8994ed1a0aef6b7f5fb34f091faa3580416", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6081d8994ed1a0aef6b7f5fb34f091faa3580416/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d45e848d02e71c11420ec49630281e9a29c89b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d45e848d02e71c11420ec49630281e9a29c89b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d45e848d02e71c11420ec49630281e9a29c89b8"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "8c4bd156d3ff80777a9b19b22b769445bced0e5c", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6081d8994ed1a0aef6b7f5fb34f091faa3580416/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6081d8994ed1a0aef6b7f5fb34f091faa3580416/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=6081d8994ed1a0aef6b7f5fb34f091faa3580416", "patch": "@@ -3128,6 +3128,48 @@ bot_manip (tree* tp, int* walk_subtrees, void* data_)\n \t}\n       return NULL_TREE;\n     }\n+  if (TREE_CODE (*tp) == DECL_EXPR\n+      && VAR_P (DECL_EXPR_DECL (*tp))\n+      && DECL_ARTIFICIAL (DECL_EXPR_DECL (*tp))\n+      && !TREE_STATIC (DECL_EXPR_DECL (*tp)))\n+    {\n+      tree t;\n+      splay_tree_node n\n+\t= splay_tree_lookup (target_remap,\n+\t\t\t     (splay_tree_key) DECL_EXPR_DECL (*tp));\n+      if (n)\n+\tt = (tree) n->value;\n+      else\n+\t{\n+\t  t = create_temporary_var (TREE_TYPE (DECL_EXPR_DECL (*tp)));\n+\t  DECL_INITIAL (t) = DECL_INITIAL (DECL_EXPR_DECL (*tp));\n+\t  splay_tree_insert (target_remap,\n+\t\t\t     (splay_tree_key) DECL_EXPR_DECL (*tp),\n+\t\t\t     (splay_tree_value) t);\n+\t}\n+      copy_tree_r (tp, walk_subtrees, NULL);\n+      DECL_EXPR_DECL (*tp) = t;\n+      if (data.clear_location && EXPR_HAS_LOCATION (*tp))\n+\tSET_EXPR_LOCATION (*tp, input_location);\n+      return NULL_TREE;\n+    }\n+  if (TREE_CODE (*tp) == BIND_EXPR && BIND_EXPR_VARS (*tp))\n+    {\n+      copy_tree_r (tp, walk_subtrees, NULL);\n+      for (tree *p = &BIND_EXPR_VARS (*tp); *p; p = &DECL_CHAIN (*p))\n+\t{\n+\t  gcc_assert (VAR_P (*p) && DECL_ARTIFICIAL (*p) && !TREE_STATIC (*p));\n+\t  tree t = create_temporary_var (TREE_TYPE (*p));\n+\t  DECL_INITIAL (t) = DECL_INITIAL (*p);\n+\t  DECL_CHAIN (t) = DECL_CHAIN (*p);\n+\t  splay_tree_insert (target_remap, (splay_tree_key) *p,\n+\t\t\t     (splay_tree_value) t);\n+\t  *p = t;\n+\t}\n+      if (data.clear_location && EXPR_HAS_LOCATION (*tp))\n+\tSET_EXPR_LOCATION (*tp, input_location);\n+      return NULL_TREE;\n+    }\n \n   /* Make a copy of this node.  */\n   t = copy_tree_r (tp, walk_subtrees, NULL);"}, {"sha": "b5a9ca282b5fcc2dfbd05f206701bdf23de02861", "filename": "gcc/testsuite/g++.dg/cpp0x/new5.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6081d8994ed1a0aef6b7f5fb34f091faa3580416/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6081d8994ed1a0aef6b7f5fb34f091faa3580416/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew5.C?ref=6081d8994ed1a0aef6b7f5fb34f091faa3580416", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/99705\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+struct C\n+{\n+  C () { f (); }\n+  ~C () {}\n+  static void f () {}\n+};\n+\n+struct X\n+{\n+  X ();\n+  int n = 10;\n+  C<int> *p = new C<int>[n];\n+};\n+\n+X::X ()\n+{\n+}"}]}