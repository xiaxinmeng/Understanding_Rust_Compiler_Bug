{"sha": "8d705469aaefd27a439760de0c216ff036f92e11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ3MDU0NjlhYWVmZDI3YTQzOTc2MGRlMGMyMTZmZjAzNmY5MmUxMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-02-05T22:13:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-02-05T22:13:40Z"}, "message": "i386-protos.h (x86_emit_floatuns): Declare.\n\n\t* i386-protos.h (x86_emit_floatuns):  Declare.\n\t* i386.c (x86_emit_floatuns): New global function.\n\t* i386.md (floatunssisf2, floatunsdisf2,\n\tfloatunsdidf2):  New patterns.\n\nFrom-SVN: r62452", "tree": {"sha": "b03290d7066c5a16ae57d5568dcd9cc5571081f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b03290d7066c5a16ae57d5568dcd9cc5571081f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d705469aaefd27a439760de0c216ff036f92e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d705469aaefd27a439760de0c216ff036f92e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d705469aaefd27a439760de0c216ff036f92e11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d705469aaefd27a439760de0c216ff036f92e11/comments", "author": null, "committer": null, "parents": [{"sha": "bc810602bed5e8812315657836c3ab037381365d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc810602bed5e8812315657836c3ab037381365d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc810602bed5e8812315657836c3ab037381365d"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "4c27343b56302f00ccd0d447185858fb2ed91a26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d705469aaefd27a439760de0c216ff036f92e11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d705469aaefd27a439760de0c216ff036f92e11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d705469aaefd27a439760de0c216ff036f92e11", "patch": "@@ -1,3 +1,10 @@\n+Wed Feb  5 23:12:57 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386-protos.h (x86_emit_floatuns):  Declare.\n+\t* i386.c (x86_emit_floatuns): New global function.\n+\t* i386.md (floatunssisf2, floatunsdisf2,\n+\tfloatunsdidf2):  New patterns.\n+\n 2003-01-25  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* cfgloopmanip.c (force_single_succ_latches): Fix missindentation."}, {"sha": "46493fd3c1242fd21fc53887ff403fd4f0f65863", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d705469aaefd27a439760de0c216ff036f92e11/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d705469aaefd27a439760de0c216ff036f92e11/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=8d705469aaefd27a439760de0c216ff036f92e11", "patch": "@@ -189,6 +189,7 @@ extern void emit_i387_cw_initialization PARAMS ((rtx, rtx));\n extern bool ix86_fp_jump_nontrivial_p PARAMS ((enum rtx_code));\n extern void x86_order_regs_for_local_alloc PARAMS ((void));\n extern void x86_function_profiler PARAMS ((FILE *, int));\n+extern void x86_emit_floatuns PARAMS ((rtx [2]));\n \n \n #ifdef TREE_CODE"}, {"sha": "3a3a2f93d8ee109b43a1e89d94ece3bc94eee871", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d705469aaefd27a439760de0c216ff036f92e11/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d705469aaefd27a439760de0c216ff036f92e11/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8d705469aaefd27a439760de0c216ff036f92e11", "patch": "@@ -15337,4 +15337,39 @@ x86_extended_reg_mentioned_p (insn)\n   return for_each_rtx (&PATTERN (insn), extended_reg_mentioned_1, NULL);\n }\n \n+/* Generate an unsigned DImode to FP conversion.  This is the same code\n+   optabs would emit if we didn't have TFmode patterns.  */\n+\n+void\n+x86_emit_floatuns (operands)\n+     rtx operands[2];\n+{\n+  rtx neglab, donelab, i0, i1, f0, in, out;\n+  enum machine_mode mode;\n+\n+  out = operands[0];\n+  in = force_reg (DImode, operands[1]);\n+  mode = GET_MODE (out);\n+  neglab = gen_label_rtx ();\n+  donelab = gen_label_rtx ();\n+  i1 = gen_reg_rtx (Pmode);\n+  f0 = gen_reg_rtx (mode);\n+\n+  emit_cmp_and_jump_insns (in, const0_rtx, LT, const0_rtx, Pmode, 0, neglab);\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, out, gen_rtx_FLOAT (mode, in)));\n+  emit_jump_insn (gen_jump (donelab));\n+  emit_barrier ();\n+\n+  emit_label (neglab);\n+\n+  i0 = expand_simple_binop (Pmode, LSHIFTRT, in, const1_rtx, NULL, 1, OPTAB_DIRECT);\n+  i1 = expand_simple_binop (Pmode, AND, in, const1_rtx, NULL, 1, OPTAB_DIRECT);\n+  i0 = expand_simple_binop (Pmode, IOR, i0, i1, i0, 1, OPTAB_DIRECT);\n+  expand_float (f0, i0, 0);\n+  emit_insn (gen_rtx_SET (VOIDmode, out, gen_rtx_PLUS (mode, f0, f0)));\n+\n+  emit_label (donelab);\n+}\n+\n #include \"gt-i386.h\""}, {"sha": "875617d69961229dbaafeaa724f3212b0d0af349", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d705469aaefd27a439760de0c216ff036f92e11/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d705469aaefd27a439760de0c216ff036f92e11/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8d705469aaefd27a439760de0c216ff036f92e11", "patch": "@@ -4924,6 +4924,24 @@\n   ix86_free_from_memory (GET_MODE (operands[1]));\n   DONE;\n })\n+\n+(define_expand \"floatunssisf2\"\n+  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n+   (use (match_operand:SI 1 \"register_operand\" \"\"))]\n+  \"TARGET_SSE && TARGET_SSE_MATH && !TARGET_64BIT\"\n+  \"x86_emit_floatuns (operands); DONE;\")\n+\n+(define_expand \"floatunsdisf2\"\n+  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"\"))]\n+  \"TARGET_SSE && TARGET_SSE_MATH && TARGET_64BIT\"\n+  \"x86_emit_floatuns (operands); DONE;\")\n+\n+(define_expand \"floatunsdidf2\"\n+  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"\"))]\n+  \"TARGET_SSE2 && TARGET_SSE_MATH && TARGET_64BIT\"\n+  \"x86_emit_floatuns (operands); DONE;\")\n \f\n ;; Add instructions\n "}]}