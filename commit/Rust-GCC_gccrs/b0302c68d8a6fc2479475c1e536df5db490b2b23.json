{"sha": "b0302c68d8a6fc2479475c1e536df5db490b2b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzMDJjNjhkOGE2ZmMyNDc5NDc1YzFlNTM2ZGY1ZGI0OTBiMmIyMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-12-31T14:04:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-12-31T14:04:23Z"}, "message": "type_traits (__is_constructible_helper1): Rename to __is_constructible_helper1...\n\n2009-12-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/type_traits (__is_constructible_helper1): Rename\n\tto __is_constructible_helper1, tweaked to a specialization of\n\t__is_constructible_helper.\n\t(is_constructible): Adjust; minor formatting and stylistic\n\tchanges throughout.\n\t* testsuite/util/testsuite_tr1.h (test_relationship): Change\n\tvariadic version to an overload of test_property.\n\t* testsuite/20_util/is_constructible/value.cc: Adjust.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n\nFrom-SVN: r155536", "tree": {"sha": "2a79773ed17b7602f6f869010bf6182e1021cfac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a79773ed17b7602f6f869010bf6182e1021cfac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0302c68d8a6fc2479475c1e536df5db490b2b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0302c68d8a6fc2479475c1e536df5db490b2b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0302c68d8a6fc2479475c1e536df5db490b2b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0302c68d8a6fc2479475c1e536df5db490b2b23/comments", "author": null, "committer": null, "parents": [{"sha": "8c7dc6ebc297b38687e1cec0a41a861e67b8163b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7dc6ebc297b38687e1cec0a41a861e67b8163b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7dc6ebc297b38687e1cec0a41a861e67b8163b"}], "stats": {"total": 197, "additions": 99, "deletions": 98}, "files": [{"sha": "4e706aa0b710080afdb92264a3bb82bcd029186f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b0302c68d8a6fc2479475c1e536df5db490b2b23", "patch": "@@ -1,3 +1,19 @@\n+2009-12-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/type_traits (__is_constructible_helper1): Rename\n+\tto __is_constructible_helper1, tweaked to a specialization of\n+\t__is_constructible_helper.\n+\t(is_constructible): Adjust; minor formatting and stylistic\n+\tchanges throughout.\n+\t* testsuite/util/testsuite_tr1.h (test_relationship): Change\n+\tvariadic version to an overload of test_property.\n+\t* testsuite/20_util/is_constructible/value.cc: Adjust.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n+\n 2009-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/type_traits: Fix minor formatting nit."}, {"sha": "a784bee1825a03d70b3eb8210a5805c064515f5a", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 66, "deletions": 76, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=b0302c68d8a6fc2479475c1e536df5db490b2b23", "patch": "@@ -173,17 +173,65 @@ namespace std\n \n   // Member introspection.\n \n+  /// is_trivial\n+  template<typename _Tp>\n+    struct is_trivial\n+    : public integral_constant<bool, __is_trivial(_Tp)>\n+    { };\n+\n+  /// is_standard_layout\n+  template<typename _Tp>\n+    struct is_standard_layout\n+    : public integral_constant<bool, __is_standard_layout(_Tp)>\n+    { };\n+\n   /// is_pod\n   // Could use is_standard_layout && is_trivial instead of the builtin.\n   template<typename _Tp>\n     struct is_pod\n     : public integral_constant<bool, __is_pod(_Tp)>\n     { };\n \n-  /// is_standard_layout\n   template<typename _Tp>\n-    struct is_standard_layout\n-    : public integral_constant<bool, __is_standard_layout(_Tp)>\n+    typename add_rvalue_reference<_Tp>::type declval();\n+\n+  template<typename _Tp, typename... _Args>\n+    class __is_constructible_helper\n+    : public __sfinae_types\n+    {\n+      template<typename _Tp1, typename... __Args1>\n+        static decltype(_Tp1(declval<__Args1>()...), __one()) __test(int);\n+\n+      template<typename, typename...>\n+        static __two __test(...);\n+\n+    public:\n+      static const bool __value = sizeof(__test<_Tp, _Args...>(0)) == 1;\n+    };\n+\n+  template<typename _Tp, typename _Arg>\n+    class __is_constructible_helper<_Tp, _Arg>\n+    : public __sfinae_types\n+    {\n+      template<typename _Tp1, typename _Arg1>\n+        static decltype(static_cast<_Tp1>(declval<_Arg1>()), __one())\n+\t__test(int);\n+\n+      template<typename, typename>\n+        static __two __test(...);\n+\n+    public:\n+      static const bool __value = sizeof(__test<_Tp, _Arg>(0)) == 1;\n+    };\n+\n+  /// is_constructible\n+  // XXX FIXME\n+  // The C++0x specifications require front-end support, see N2255.\n+  template<typename _Tp, typename... _Args>\n+    struct is_constructible\n+    : public integral_constant<bool,\n+\t\t\t       __is_constructible_helper<_Tp,\n+\t\t\t\t\t\t\t _Args...>::__value>\n     { };\n \n   /// has_trivial_default_constructor\n@@ -210,12 +258,6 @@ namespace std\n     : public integral_constant<bool, __has_trivial_destructor(_Tp)>\n     { };\n \n-  /// is_trivial\n-  template<typename _Tp>\n-    struct is_trivial\n-    : public integral_constant<bool, __is_trivial(_Tp)>\n-    { };\n-\n   /// has_nothrow_default_constructor\n   template<typename _Tp>\n     struct has_nothrow_default_constructor\n@@ -234,16 +276,14 @@ namespace std\n     : public integral_constant<bool, __has_nothrow_assign(_Tp)>\n     { };\n \n+  // Relationships between types.\n+\n   /// is_base_of\n   template<typename _Base, typename _Derived>\n     struct is_base_of\n     : public integral_constant<bool, __is_base_of(_Base, _Derived)>\n     { };\n \n-  template<typename _Tp>\n-    typename add_rvalue_reference<_Tp>::type declval();\n-\n-  // Relationships between types.\n   template<typename _From, typename _To,\n \t   bool = (is_void<_From>::value || is_void<_To>::value\n \t\t   || is_function<_To>::value || is_array<_To>::value)>\n@@ -252,70 +292,26 @@ namespace std\n \t\t\t\t   && is_void<_To>::value); };\n \n   template<typename _From, typename _To>\n-    struct __is_convertible_helper<_From, _To, false>\n+    class __is_convertible_helper<_From, _To, false>\n     : public __sfinae_types\n     {\n-    private:\n       static __one __test(_To);\n       static __two __test(...);\n \n     public:\n       static const bool __value = sizeof(__test(declval<_From>())) == 1;\n     };\n \n+  /// is_convertible\n   // XXX FIXME\n   // The C++0x specifications require front-end support, see N2255.\n-  /// is_convertible\n   template<typename _From, typename _To>\n     struct is_convertible\n     : public integral_constant<bool,\n \t\t\t       __is_convertible_helper<_From, _To>::__value>\n     { };\n \n-  template<typename _To, typename... _From>\n-    struct __is_constructible_helper\n-    : public __sfinae_types\n-    {\n-    private:\n-      template<typename _To1, typename... _From1>\n-        static decltype(_To1(declval<_From1>()...), __one()) __test(int);\n-\n-      template<typename, typename...>\n-        static __two __test(...);\n-\n-    public:\n-      static const bool __value = sizeof(__test<_To, _From...>(0)) == 1;\n-    };\n-\n-  template<typename _To, typename... _From>\n-    struct is_constructible\n-    : public integral_constant<bool,\n-\t\t\t       __is_constructible_helper<_To,\n-\t\t\t\t\t\t\t _From...>::__value>\n-    { };\n-\n-  template<typename _To, typename _From>\n-    struct __is_constructible_helper1\n-    : public __sfinae_types\n-    {\n-    private:\n-      template<typename _To1, typename _From1>\n-        static decltype(static_cast<_To1>(declval<_From1>()), __one())\n-\t__test(int);\n-\n-      template<typename, typename>\n-        static __two __test(...);\n-\n-    public:\n-      static const bool __value = sizeof(__test<_To, _From>(0)) == 1;\n-    };\n-\n-  template<typename _To, typename _From>\n-    struct is_constructible<_To, _From>\n-    : public integral_constant<bool,\n-\t\t\t       __is_constructible_helper1<_To, _From>::__value>\n-    { };\n-\n+  /// is_explicitly_convertible\n   template<typename _From, typename _To>\n     struct is_explicitly_convertible\n     : public is_constructible<_To, _From>\n@@ -401,9 +397,8 @@ namespace std\n \n   /// decay\n   template<typename _Tp> \n-    struct decay \n+    class decay \n     { \n-    private:\n       typedef typename remove_reference<_Tp>::type __remove_type;\n \n     public:\n@@ -434,9 +429,8 @@ namespace std\n   template<typename _Qualified, typename _Unqualified,\n \t   bool _IsConst = is_const<_Qualified>::value,\n \t   bool _IsVol = is_volatile<_Qualified>::value>\n-    struct __match_cv_qualifiers\n+    class __match_cv_qualifiers\n     {\n-    private:\n       typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;\n \n     public:\n@@ -478,12 +472,11 @@ namespace std\n   template<typename _Tp, \n \t   bool _IsInt = is_integral<_Tp>::value,\n \t   bool _IsEnum = is_enum<_Tp>::value>\n-    struct __make_unsigned_selector;\n-  \n+    class __make_unsigned_selector;\n+\n   template<typename _Tp>\n-    struct __make_unsigned_selector<_Tp, true, false>\n+    class __make_unsigned_selector<_Tp, true, false>\n     {\n-    private:\n       typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;\n       typedef typename __unsignedt::__type __unsigned_type;\n       typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;\n@@ -493,9 +486,8 @@ namespace std\n     };\n \n   template<typename _Tp>\n-    struct __make_unsigned_selector<_Tp, false, true>\n+    class __make_unsigned_selector<_Tp, false, true>\n     {\n-    private:\n       // With -fshort-enums, an enum may be as small as a char.\n       typedef unsigned char __smallest;\n       static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);\n@@ -557,12 +549,11 @@ namespace std\n   template<typename _Tp, \n \t   bool _IsInt = is_integral<_Tp>::value,\n \t   bool _IsEnum = is_enum<_Tp>::value>\n-    struct __make_signed_selector;\n-  \n+    class __make_signed_selector;\n+\n   template<typename _Tp>\n-    struct __make_signed_selector<_Tp, true, false>\n+    class __make_signed_selector<_Tp, true, false>\n     {\n-    private:\n       typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;\n       typedef typename __signedt::__type __signed_type;\n       typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;\n@@ -572,9 +563,8 @@ namespace std\n     };\n \n   template<typename _Tp>\n-    struct __make_signed_selector<_Tp, false, true>\n+    class __make_signed_selector<_Tp, false, true>\n     {\n-    private:\n       // With -fshort-enums, an enum may be as small as a char.\n       typedef signed char __smallest;\n       static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);"}, {"sha": "59b90961398150007a885f30c5ab8c6c5fd8b7ea", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=b0302c68d8a6fc2479475c1e536df5db490b2b23", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 636 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 626 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 30 }\n // { dg-excess-errors \"In function\" }\n "}, {"sha": "280710bebeabf0b7c324166e23c1e4af7e05b9ee", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/value.cc", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue.cc?ref=b0302c68d8a6fc2479475c1e536df5db490b2b23", "patch": "@@ -28,16 +28,13 @@ void test01()\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_relationship<is_constructible, ExplicitClass,\n-\t   double&>(true)) );\n-  VERIFY( (test_relationship<is_constructible, ExplicitClass,\n-\t   int&>(true)) );\n+  VERIFY( (test_property<is_constructible, ExplicitClass, double&>(true)) );\n+  VERIFY( (test_property<is_constructible, ExplicitClass, int&>(true)) );\n \n   // Negative tests.\n-  VERIFY( (test_relationship<is_constructible, ExplicitClass,\n-\t   void*>(false)) );\n-  VERIFY( (test_relationship<is_constructible, ExplicitClass>(false)) );\n-  VERIFY( (test_relationship<is_constructible, ExplicitClass,\n+  VERIFY( (test_property<is_constructible, ExplicitClass, void*>(false)) );\n+  VERIFY( (test_property<is_constructible, ExplicitClass>(false)) );\n+  VERIFY( (test_property<is_constructible, ExplicitClass,\n \t   int, double>(false)) );\n }\n "}, {"sha": "eec74c71593e700aa8096640f8c2b0460f33608d", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=b0302c68d8a6fc2479475c1e536df5db490b2b23", "patch": "@@ -48,8 +48,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 598 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 560 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 588 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 552 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "708482ef8a32c0e4d60fc0dbf54bcfa5fd5c6bb1", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=b0302c68d8a6fc2479475c1e536df5db490b2b23", "patch": "@@ -48,8 +48,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 519 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 481 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 511 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 475 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "aecf56220e055fc4832b03a766a8486ebb471323", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0302c68d8a6fc2479475c1e536df5db490b2b23/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=b0302c68d8a6fc2479475c1e536df5db490b2b23", "patch": "@@ -56,8 +56,7 @@ namespace __gnu_test\n   // For testing tr1/type_traits/extent, which has a second template\n   // parameter.\n   template<template<typename, unsigned> class Property,\n-           typename Type,\n-\t   unsigned Uint>\n+           typename Type, unsigned Uint>\n     bool\n     test_property(typename Property<Type, Uint>::value_type value)\n     {\n@@ -68,17 +67,17 @@ namespace __gnu_test\n     }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<template<typename...> class Relationship,\n-           typename... Types>\n+  template<template<typename...> class Property, typename... Types>\n     bool\n-    test_relationship(bool value)\n+    test_property(typename Property<Types...>::value_type value)\n     {\n       bool ret = true;\n-      ret &= Relationship<Types...>::value == value;\n-      ret &= Relationship<Types...>::type::value == value;\n+      ret &= Property<Types...>::value == value;\n+      ret &= Property<Types...>::type::value == value;\n       return ret;\n     }\n-#else\n+#endif\n+\n   template<template<typename, typename> class Relationship,\n            typename Type1, typename Type2>\n     bool\n@@ -89,7 +88,6 @@ namespace __gnu_test\n       ret &= Relationship<Type1, Type2>::type::value == value;\n       return ret;\n     }\n-#endif\n \n   // Test types.\n   class ClassType { };"}]}