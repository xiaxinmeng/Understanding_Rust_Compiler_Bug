{"sha": "779243f72027453fbf0638f281f86a632096b57a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc5MjQzZjcyMDI3NDUzZmJmMDYzOGYyODFmODZhNjMyMDk2YjU3YQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-05-31T02:22:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-05-31T02:22:12Z"}, "message": "configure.in (native gas tests): Search for an assembler in the same manner that the installed compiler will.\n\n        * configure.in (native gas tests): Search for an assembler in the\n        same manner that the installed compiler will.\n        * configure: Rebuilt.\n\nFrom-SVN: r27269", "tree": {"sha": "f4d0a1ac9993779999d0040eb7ba5d68e903dc55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4d0a1ac9993779999d0040eb7ba5d68e903dc55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/779243f72027453fbf0638f281f86a632096b57a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/779243f72027453fbf0638f281f86a632096b57a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/779243f72027453fbf0638f281f86a632096b57a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/779243f72027453fbf0638f281f86a632096b57a/comments", "author": null, "committer": null, "parents": [{"sha": "f4d9222d03f8f075dab30245fa31b0f588cb3132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4d9222d03f8f075dab30245fa31b0f588cb3132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4d9222d03f8f075dab30245fa31b0f588cb3132"}], "stats": {"total": 108, "additions": 104, "deletions": 4}, "files": [{"sha": "1215de2b63303b4d770833cf5909f330bc0c3ce2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779243f72027453fbf0638f281f86a632096b57a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779243f72027453fbf0638f281f86a632096b57a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=779243f72027453fbf0638f281f86a632096b57a", "patch": "@@ -1,5 +1,9 @@\n Mon May 31 00:46:17 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* configure.in (native gas tests): Search for an assembler in the\n+\tsame manner that the installed compiler will.\n+\t* configure: Rebuilt.\n+\n \t* alias.c (find_base_term): Improve handling of addresses\n \tconstructed from binary operations.\n "}, {"sha": "e64fe6c0eb59a2a5e743921b5b215c10e73c0bd1", "filename": "gcc/configure", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779243f72027453fbf0638f281f86a632096b57a/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779243f72027453fbf0638f281f86a632096b57a/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=779243f72027453fbf0638f281f86a632096b57a", "patch": "@@ -8087,7 +8087,55 @@ EOF\n \tfi\n elif test x$host = x$target; then\n \t# Native build.\n-\tgcc_cv_as=as$host_exeext\n+\t# Search the same directories that the installed compiler will\n+\t# search.  Else we may find the wrong assembler and lose.  If we\n+\t# do not find a suitable assembler binary, then try the user's\n+\t# path.\n+\t#\n+\t# Also note we have to check MD_EXEC_PREFIX before checking the\n+\t# user's path.  Unfortunately, there is no good way to get at the\n+\t# value of MD_EXEC_PREFIX here.  So we do a brute force search\n+\t# through all the known MD_EXEC_PREFIX values.  Ugh.  This needs\n+\t# to be fixed as part of the make/configure rewrite too.\n+\n+\tif test \"x$exec_prefix\" = xNONE; then\n+\t\tif test \"x$prefix\" = xNONE; then\n+\t\t\ttest_prefix=/usr/local\n+\t\telse\n+\t\t\ttest_prefix=$prefix\n+\t\tfi\n+\telse\n+\t\ttest_prefix=$exec_prefix\n+\tfi\n+\n+\t# If the loop below does not find an assembler, then use whatever\n+\t# one we can find in the users's path.\n+\t# user's path.\n+\tas=as$host_exeext\n+\n+\ttest_dirs=\"$test_prefix/lib/gcc-lib/$target/$gcc_version \\\n+\t\t   $test_prefix/lib/gcc-lib/$target \\\n+\t\t   /usr/lib/gcc/$target/$gcc_version \\\n+\t\t   /usr/lib/gcc/$target \\\n+\t\t   $test_prefix/$target/bin/$target/$gcc_version \\\n+\t\t   $test_prefix/$target/bin \\\n+\t\t   /usr/libexec \\\n+\t\t   /usr/ccs/gcc \\\n+\t\t   /usr/ccs/bin \\\n+\t\t   /udk/usr/ccs/bin \\\n+\t\t   /bsd43/usr/lib/cmplrs/cc \\\n+\t\t   /usr/cross64/usr/bin \\\n+\t\t   /usr/lib/cmplrs/cc \\\n+\t\t   /sysv/usr/lib/cmplrs/cc \\\n+\t\t   /svr4/usr/lib/cmplrs/cc \\\n+\t\t   /usr/bin\"\n+\n+\tfor dir in $test_dirs; do\n+\t\tif test -f $dir/as$host_exeext; then\n+\t\t\tgcc_cv_as=$dir/as$host_exeext\n+\t\t\tbreak;\n+\t\tfi\n+\tdone\n fi\n if test x$gcc_cv_as != x; then\n \t# Check if we have .balign and .p2align\n@@ -8116,7 +8164,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_alignment_features\" 1>&6\n \n echo $ac_n \"checking assembler subsection support\"\"... $ac_c\" 1>&6\n-echo \"configure:8120: checking assembler subsection support\" >&5\n+echo \"configure:8168: checking assembler subsection support\" >&5\n gcc_cv_as_subsections=\n if test x$gcc_cv_as != x; then\n \t# Check if we have .subsection\n@@ -8156,7 +8204,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_subsections\" 1>&6\n \n echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:8160: checking assembler instructions\" >&5\n+echo \"configure:8208: checking assembler instructions\" >&5\n gcc_cv_as_instructions=\n if test x$gcc_cv_as != x; then\n \tset \"filds fists\" \"filds mem; fists mem\""}, {"sha": "310843050588d66c73c6f545244f84dab33f64f4", "filename": "gcc/configure.in", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779243f72027453fbf0638f281f86a632096b57a/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779243f72027453fbf0638f281f86a632096b57a/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=779243f72027453fbf0638f281f86a632096b57a", "patch": "@@ -3934,7 +3934,55 @@ changequote([,])dnl\n \tfi\n elif test x$host = x$target; then\n \t# Native build.\n-\tgcc_cv_as=as$host_exeext\n+\t# Search the same directories that the installed compiler will\n+\t# search.  Else we may find the wrong assembler and lose.  If we\n+\t# do not find a suitable assembler binary, then try the user's\n+\t# path.\n+\t#\n+\t# Also note we have to check MD_EXEC_PREFIX before checking the\n+\t# user's path.  Unfortunately, there is no good way to get at the\n+\t# value of MD_EXEC_PREFIX here.  So we do a brute force search\n+\t# through all the known MD_EXEC_PREFIX values.  Ugh.  This needs\n+\t# to be fixed as part of the make/configure rewrite too.\n+\n+\tif test \"x$exec_prefix\" = xNONE; then\n+\t\tif test \"x$prefix\" = xNONE; then\n+\t\t\ttest_prefix=/usr/local\n+\t\telse\n+\t\t\ttest_prefix=$prefix\n+\t\tfi\n+\telse\n+\t\ttest_prefix=$exec_prefix\n+\tfi\n+\n+\t# If the loop below does not find an assembler, then use whatever\n+\t# one we can find in the users's path.\n+\t# user's path.\n+\tas=as$host_exeext\n+\n+\ttest_dirs=\"$test_prefix/lib/gcc-lib/$target/$gcc_version \\\n+\t\t   $test_prefix/lib/gcc-lib/$target \\\n+\t\t   /usr/lib/gcc/$target/$gcc_version \\\n+\t\t   /usr/lib/gcc/$target \\\n+\t\t   $test_prefix/$target/bin/$target/$gcc_version \\\n+\t\t   $test_prefix/$target/bin \\\n+\t\t   /usr/libexec \\\n+\t\t   /usr/ccs/gcc \\\n+\t\t   /usr/ccs/bin \\\n+\t\t   /udk/usr/ccs/bin \\\n+\t\t   /bsd43/usr/lib/cmplrs/cc \\\n+\t\t   /usr/cross64/usr/bin \\\n+\t\t   /usr/lib/cmplrs/cc \\\n+\t\t   /sysv/usr/lib/cmplrs/cc \\\n+\t\t   /svr4/usr/lib/cmplrs/cc \\\n+\t\t   /usr/bin\"\n+\n+\tfor dir in $test_dirs; do\n+\t\tif test -f $dir/as$host_exeext; then\n+\t\t\tgcc_cv_as=$dir/as$host_exeext\n+\t\t\tbreak;\n+\t\tfi\n+\tdone\n fi\n if test x$gcc_cv_as != x; then\n \t# Check if we have .balign and .p2align"}]}