{"sha": "b3d627e251760957416f6508d69c7a0572ac9b8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkNjI3ZTI1MTc2MDk1NzQxNmY2NTA4ZDY5YzdhMDU3MmFjOWI4Yw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-04-29T23:32:44Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-04-29T23:32:44Z"}, "message": "tree-inline.c (inlinable_function_p): Don't support inlining functions using varargs.\n\n\t* tree-inline.c (inlinable_function_p): Don't support inlining\n\tfunctions using varargs.\n\nIndex: testsuite/ChangeLog\n\t* gcc.c-torture/compile/inline-1.c: New file.\n\nFrom-SVN: r66269", "tree": {"sha": "998d8bdfe8240b5ebae5010c1f1a3132943928c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/998d8bdfe8240b5ebae5010c1f1a3132943928c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3d627e251760957416f6508d69c7a0572ac9b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d627e251760957416f6508d69c7a0572ac9b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d627e251760957416f6508d69c7a0572ac9b8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d627e251760957416f6508d69c7a0572ac9b8c/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0384674ecf6f70a9aab02476619e02972ea6a661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0384674ecf6f70a9aab02476619e02972ea6a661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0384674ecf6f70a9aab02476619e02972ea6a661"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "75d3dec41be289b33880b29db996753897c548a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d627e251760957416f6508d69c7a0572ac9b8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d627e251760957416f6508d69c7a0572ac9b8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3d627e251760957416f6508d69c7a0572ac9b8c", "patch": "@@ -23,6 +23,9 @@\n \n 2003-04-29  Geoffrey Keating  <geoffk@apple.com>\n \n+\t* tree-inline.c (inlinable_function_p): Don't support inlining\n+\tfunctions using varargs.\n+\n \t* doc/invoke.texi (Overall Options): Mention -x objective-c-header.\n \n \t* dwarf2out.c (output_call_frame_info): No need to output EH"}, {"sha": "14607687a2073ae2eed7ee09349887df79fdd2e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d627e251760957416f6508d69c7a0572ac9b8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d627e251760957416f6508d69c7a0572ac9b8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3d627e251760957416f6508d69c7a0572ac9b8c", "patch": "@@ -1,3 +1,7 @@\n+2003-04-29  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.c-torture/compile/inline-1.c: New file.\n+\n 2003-04-29  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10551"}, {"sha": "23af7cb2bfc514c36cc6621a0a4d4a324dd479fc", "filename": "gcc/testsuite/gcc.c-torture/compile/inline-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d627e251760957416f6508d69c7a0572ac9b8c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Finline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d627e251760957416f6508d69c7a0572ac9b8c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Finline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Finline-1.c?ref=b3d627e251760957416f6508d69c7a0572ac9b8c", "patch": "@@ -0,0 +1,21 @@\n+typedef __builtin_va_list va_list;\n+\n+extern void foo (va_list);\n+\n+static void\n+build_message_string (const char *msg, ...)\n+{\n+  va_list ap;\n+\n+  __builtin_va_start (ap, msg);\n+  foo (ap);\n+  __builtin_va_end (ap);\n+}\n+\n+void\n+file_name_as_prefix (f)\n+     const char *f;\n+{\n+  build_message_string (\"%s: \", f);\n+}\n+"}, {"sha": "d1acba3a5f0a326c033e3973172181fc6a19ed5e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d627e251760957416f6508d69c7a0572ac9b8c/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d627e251760957416f6508d69c7a0572ac9b8c/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=b3d627e251760957416f6508d69c7a0572ac9b8c", "patch": "@@ -1008,6 +1008,13 @@ inlinable_function_p (fn, id, nolimit)\n   else if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) == NULL\n \t   && find_alloca_call (DECL_SAVED_TREE (fn)))\n     ;\n+  /* Can't inline functions which use varargs.  It's not theoretically\n+     impossible, we just don't do it yet; at least one problem is that\n+     expand_builtin_next_arg needs to handle the situation.  */\n+  else if (TYPE_ARG_TYPES (TREE_TYPE (fn)) != 0\n+\t   && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (TREE_TYPE (fn))))\n+\t       != void_type_node))\n+    ;\n   /* All is well.  We can inline this function.  Traditionally, GCC\n      has refused to inline functions using alloca, or functions whose\n      values are returned in a PARALLEL, and a few other such obscure"}]}