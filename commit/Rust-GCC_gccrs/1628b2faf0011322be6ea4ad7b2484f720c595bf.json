{"sha": "1628b2faf0011322be6ea4ad7b2484f720c595bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyOGIyZmFmMDAxMTMyMmJlNmVhNGFkN2IyNDg0ZjcyMGM1OTViZg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-08-23T07:48:34Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-08-23T07:48:34Z"}, "message": "Clean up value-prof.c a bit.\n\n2019-08-23  Martin Liska  <mliska@suse.cz>\n\n\t* profile.c (instrument_values): Do not set\n\t0 as last argument.\n\t* tree-profile.c (gimple_gen_interval_profiler): Remove\n\tlast argument.\n\t(gimple_gen_pow2_profiler): Likewise.\n\t(gimple_gen_topn_values_profiler): Likewise.\n\t(gimple_gen_ic_profiler): Likewise.\n\t(gimple_gen_time_profiler): Likewise.\n\t(gimple_gen_average_profiler): Likewise.\n\t(gimple_gen_ior_profiler): Likewise.\n\t* value-prof.c (dump_histogram_value): Use default\n\tin switch statement instead of HIST_TYPE_MAX.\n\t(stream_in_histogram_value): Likewise.\n\t(gimple_duplicate_stmt_histograms): Do not\n\tuse NULL for implicitly set arguments.\n\t(gimple_divmod_values_to_profile): Do not use\n\treserve+quick_push.\n\t(gimple_indirect_call_to_profile): Likewise.\n\t(gimple_find_values_to_profile): Use implicit\n\tfunction call arguments.\n\t* value-prof.h (gimple_alloc_histogram_value):\n\tSet default values.\n\t(gimple_gen_interval_profiler): Remove last argument.\n\t(gimple_gen_pow2_profiler): Likewise.\n\t(gimple_gen_topn_values_profiler): Likewise.\n\t(gimple_gen_ic_profiler): Likewise.\n\t(gimple_gen_time_profiler): Likewise.\n\t(gimple_gen_average_profiler): Likewise.\n\t(gimple_gen_ior_profiler): Likewise.\n\nFrom-SVN: r274844", "tree": {"sha": "c9ca3793816823fcab19d86c5693a04659e5dcec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9ca3793816823fcab19d86c5693a04659e5dcec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1628b2faf0011322be6ea4ad7b2484f720c595bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1628b2faf0011322be6ea4ad7b2484f720c595bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1628b2faf0011322be6ea4ad7b2484f720c595bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1628b2faf0011322be6ea4ad7b2484f720c595bf/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1783e319bffa198a14675c34b45272f13c55b3c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1783e319bffa198a14675c34b45272f13c55b3c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1783e319bffa198a14675c34b45272f13c55b3c5"}], "stats": {"total": 136, "additions": 81, "deletions": 55}, "files": [{"sha": "8e7ab45e7615dab83db990348bf91a85bdd67ac6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1628b2faf0011322be6ea4ad7b2484f720c595bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1628b2faf0011322be6ea4ad7b2484f720c595bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1628b2faf0011322be6ea4ad7b2484f720c595bf", "patch": "@@ -1,3 +1,35 @@\n+2019-08-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* profile.c (instrument_values): Do not set\n+\t0 as last argument.\n+\t* tree-profile.c (gimple_gen_interval_profiler): Remove\n+\tlast argument.\n+\t(gimple_gen_pow2_profiler): Likewise.\n+\t(gimple_gen_topn_values_profiler): Likewise.\n+\t(gimple_gen_ic_profiler): Likewise.\n+\t(gimple_gen_time_profiler): Likewise.\n+\t(gimple_gen_average_profiler): Likewise.\n+\t(gimple_gen_ior_profiler): Likewise.\n+\t* value-prof.c (dump_histogram_value): Use default\n+\tin switch statement instead of HIST_TYPE_MAX.\n+\t(stream_in_histogram_value): Likewise.\n+\t(gimple_duplicate_stmt_histograms): Do not\n+\tuse NULL for implicitly set arguments.\n+\t(gimple_divmod_values_to_profile): Do not use\n+\treserve+quick_push.\n+\t(gimple_indirect_call_to_profile): Likewise.\n+\t(gimple_find_values_to_profile): Use implicit\n+\tfunction call arguments.\n+\t* value-prof.h (gimple_alloc_histogram_value):\n+\tSet default values.\n+\t(gimple_gen_interval_profiler): Remove last argument.\n+\t(gimple_gen_pow2_profiler): Likewise.\n+\t(gimple_gen_topn_values_profiler): Likewise.\n+\t(gimple_gen_ic_profiler): Likewise.\n+\t(gimple_gen_time_profiler): Likewise.\n+\t(gimple_gen_average_profiler): Likewise.\n+\t(gimple_gen_ior_profiler): Likewise.\n+\n 2019-08-22  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/91490"}, {"sha": "8d39a7d094e9ee9a16ea8a9021c07d5d21ba4fcc", "filename": "gcc/profile.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1628b2faf0011322be6ea4ad7b2484f720c595bf/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1628b2faf0011322be6ea4ad7b2484f720c595bf/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=1628b2faf0011322be6ea4ad7b2484f720c595bf", "patch": "@@ -160,31 +160,31 @@ instrument_values (histogram_values values)\n       switch (hist->type)\n \t{\n \tcase HIST_TYPE_INTERVAL:\n-\t  gimple_gen_interval_profiler (hist, t, 0);\n+\t  gimple_gen_interval_profiler (hist, t);\n \t  break;\n \n \tcase HIST_TYPE_POW2:\n-\t  gimple_gen_pow2_profiler (hist, t, 0);\n+\t  gimple_gen_pow2_profiler (hist, t);\n \t  break;\n \n \tcase HIST_TYPE_TOPN_VALUES:\n-\t  gimple_gen_topn_values_profiler (hist, t, 0);\n+\t  gimple_gen_topn_values_profiler (hist, t);\n \t  break;\n \n  \tcase HIST_TYPE_INDIR_CALL:\n- \t  gimple_gen_ic_profiler (hist, t, 0);\n+\t  gimple_gen_ic_profiler (hist, t);\n   \t  break;\n \n \tcase HIST_TYPE_AVERAGE:\n-\t  gimple_gen_average_profiler (hist, t, 0);\n+\t  gimple_gen_average_profiler (hist, t);\n \t  break;\n \n \tcase HIST_TYPE_IOR:\n-\t  gimple_gen_ior_profiler (hist, t, 0);\n+\t  gimple_gen_ior_profiler (hist, t);\n \t  break;\n \n \tcase HIST_TYPE_TIME_PROFILE:\n-\t  gimple_gen_time_profiler (t, 0);\n+\t  gimple_gen_time_profiler (t);\n \t  break;\n \n \tdefault:"}, {"sha": "4c1ead5781fc502ef2ca2fb49e9415e548a56f4f", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1628b2faf0011322be6ea4ad7b2484f720c595bf/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1628b2faf0011322be6ea4ad7b2484f720c595bf/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=1628b2faf0011322be6ea4ad7b2484f720c595bf", "patch": "@@ -293,11 +293,11 @@ prepare_instrumented_value (gimple_stmt_iterator *gsi, histogram_value value)\n    tag of the section for counters, BASE is offset of the counter position.  */\n \n void\n-gimple_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n+gimple_gen_interval_profiler (histogram_value value, unsigned tag)\n {\n   gimple *stmt = value->hvalue.stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n-  tree ref = tree_coverage_counter_ref (tag, base), ref_ptr;\n+  tree ref = tree_coverage_counter_ref (tag, 0), ref_ptr;\n   gcall *call;\n   tree val;\n   tree start = build_int_cst_type (integer_type_node,\n@@ -316,14 +316,14 @@ gimple_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base\n \n /* Output instructions as GIMPLE trees to increment the power of two histogram\n    counter.  VALUE is the expression whose value is profiled.  TAG is the tag\n-   of the section for counters, BASE is offset of the counter position.  */\n+   of the section for counters.  */\n \n void\n-gimple_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n+gimple_gen_pow2_profiler (histogram_value value, unsigned tag)\n {\n   gimple *stmt = value->hvalue.stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n-  tree ref_ptr = tree_coverage_counter_addr (tag, base);\n+  tree ref_ptr = tree_coverage_counter_addr (tag, 0);\n   gcall *call;\n   tree val;\n \n@@ -336,15 +336,14 @@ gimple_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n \n /* Output instructions as GIMPLE trees for code to find the most N common\n    values.  VALUE is the expression whose value is profiled.  TAG is the tag\n-   of the section for counters, BASE is offset of the counter position.  */\n+   of the section for counters.  */\n \n void\n-gimple_gen_topn_values_profiler (histogram_value value, unsigned tag,\n-\t\t\t\t unsigned base)\n+gimple_gen_topn_values_profiler (histogram_value value, unsigned tag)\n {\n   gimple *stmt = value->hvalue.stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n-  tree ref_ptr = tree_coverage_counter_addr (tag, base);\n+  tree ref_ptr = tree_coverage_counter_addr (tag, 0);\n   gcall *call;\n   tree val;\n \n@@ -359,17 +358,16 @@ gimple_gen_topn_values_profiler (histogram_value value, unsigned tag,\n /* Output instructions as GIMPLE trees for code to find the most\n    common called function in indirect call.\n    VALUE is the call expression whose indirect callee is profiled.\n-   TAG is the tag of the section for counters, BASE is offset of the\n-   counter position.  */\n+   TAG is the tag of the section for counters.  */\n \n void\n-gimple_gen_ic_profiler (histogram_value value, unsigned tag, unsigned base)\n+gimple_gen_ic_profiler (histogram_value value, unsigned tag)\n {\n   tree tmp1;\n   gassign *stmt1, *stmt2, *stmt3;\n   gimple *stmt = value->hvalue.stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n-  tree ref_ptr = tree_coverage_counter_addr (tag, base);\n+  tree ref_ptr = tree_coverage_counter_addr (tag, 0);\n \n   ref_ptr = force_gimple_operand_gsi (&gsi, ref_ptr,\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n@@ -485,7 +483,7 @@ gimple_gen_ic_func_profiler (void)\n    counter position and GSI is the iterator we place the counter.  */\n \n void\n-gimple_gen_time_profiler (unsigned tag, unsigned base)\n+gimple_gen_time_profiler (unsigned tag)\n {\n   tree type = get_gcov_type ();\n   basic_block entry = ENTRY_BLOCK_PTR_FOR_FN (cfun);\n@@ -504,7 +502,7 @@ gimple_gen_time_profiler (unsigned tag, unsigned base)\n   e->probability = true_edge->probability.invert ();\n \n   gimple_stmt_iterator gsi = gsi_start_bb (cond_bb);\n-  tree original_ref = tree_coverage_counter_ref (tag, base);\n+  tree original_ref = tree_coverage_counter_ref (tag, 0);\n   tree ref = force_gimple_operand_gsi (&gsi, original_ref, true, NULL_TREE,\n \t\t\t\t       true, GSI_SAME_STMT);\n   tree one = build_int_cst (type, 1);\n@@ -564,11 +562,11 @@ gimple_gen_time_profiler (unsigned tag, unsigned base)\n    tag of the section for counters, BASE is offset of the counter position.  */\n \n void\n-gimple_gen_average_profiler (histogram_value value, unsigned tag, unsigned base)\n+gimple_gen_average_profiler (histogram_value value, unsigned tag)\n {\n   gimple *stmt = value->hvalue.stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n-  tree ref_ptr = tree_coverage_counter_addr (tag, base);\n+  tree ref_ptr = tree_coverage_counter_addr (tag, 0);\n   gcall *call;\n   tree val;\n \n@@ -585,11 +583,11 @@ gimple_gen_average_profiler (histogram_value value, unsigned tag, unsigned base)\n    tag of the section for counters, BASE is offset of the counter position.  */\n \n void\n-gimple_gen_ior_profiler (histogram_value value, unsigned tag, unsigned base)\n+gimple_gen_ior_profiler (histogram_value value, unsigned tag)\n {\n   gimple *stmt = value->hvalue.stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n-  tree ref_ptr = tree_coverage_counter_addr (tag, base);\n+  tree ref_ptr = tree_coverage_counter_addr (tag, 0);\n   gcall *call;\n   tree val;\n "}, {"sha": "55ea0973a038adddd1728505423d5fe3aa44d11d", "filename": "gcc/value-prof.c", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1628b2faf0011322be6ea4ad7b2484f720c595bf/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1628b2faf0011322be6ea4ad7b2484f720c595bf/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=1628b2faf0011322be6ea4ad7b2484f720c595bf", "patch": "@@ -300,7 +300,7 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n \tfprintf (dump_file, \"Time profile time:%\" PRId64 \".\\n\",\n \t\t (int64_t) hist->hvalue.counters[0]);\n       break;\n-    case HIST_TYPE_MAX:\n+    default:\n       gcc_unreachable ();\n    }\n }\n@@ -360,7 +360,7 @@ stream_in_histogram_value (class lto_input_block *ib, gimple *stmt)\n       bp = streamer_read_bitpack (ib);\n       type = bp_unpack_enum (&bp, hist_type, HIST_TYPE_MAX);\n       next = bp_unpack_value (&bp, 1);\n-      new_val = gimple_alloc_histogram_value (cfun, type, stmt, NULL);\n+      new_val = gimple_alloc_histogram_value (cfun, type, stmt);\n       switch (type)\n \t{\n \tcase HIST_TYPE_INTERVAL:\n@@ -384,7 +384,7 @@ stream_in_histogram_value (class lto_input_block *ib, gimple *stmt)\n \t  ncounters = 1;\n \t  break;\n \n-\tcase HIST_TYPE_MAX:\n+\tdefault:\n \t  gcc_unreachable ();\n \t}\n       new_val->hvalue.counters = XNEWVAR (gcov_type, sizeof (*new_val->hvalue.counters) * ncounters);\n@@ -429,7 +429,7 @@ gimple_duplicate_stmt_histograms (struct function *fun, gimple *stmt,\n   histogram_value val;\n   for (val = gimple_histogram_value (ofun, ostmt); val != NULL; val = val->hvalue.next)\n     {\n-      histogram_value new_val = gimple_alloc_histogram_value (fun, val->type, NULL, NULL);\n+      histogram_value new_val = gimple_alloc_histogram_value (fun, val->type);\n       memcpy (new_val, val, sizeof (*val));\n       new_val->hvalue.stmt = stmt;\n       new_val->hvalue.counters = XNEWVAR (gcov_type, sizeof (*new_val->hvalue.counters) * new_val->n_counters);\n@@ -1791,14 +1791,12 @@ gimple_divmod_values_to_profile (gimple *stmt, histogram_values *values)\n       divisor = gimple_assign_rhs2 (stmt);\n       op0 = gimple_assign_rhs1 (stmt);\n \n-      values->reserve (3);\n-\n       if (TREE_CODE (divisor) == SSA_NAME)\n \t/* Check for the case where the divisor is the same value most\n \t   of the time.  */\n-\tvalues->quick_push (gimple_alloc_histogram_value (cfun,\n-\t\t\t\t\t\t      HIST_TYPE_TOPN_VALUES,\n-\t\t\t\t\t\t      stmt, divisor));\n+\tvalues->safe_push (gimple_alloc_histogram_value (cfun,\n+\t\t\t\t\t\t\t HIST_TYPE_TOPN_VALUES,\n+\t\t\t\t\t\t\t stmt, divisor));\n \n       /* For mod, check whether it is not often a noop (or replaceable by\n \t a few subtractions).  */\n@@ -1808,16 +1806,15 @@ gimple_divmod_values_to_profile (gimple *stmt, histogram_values *values)\n \t{\n           tree val;\n           /* Check for a special case where the divisor is power of 2.  */\n-\t  values->quick_push (gimple_alloc_histogram_value (cfun,\n-\t\t                                            HIST_TYPE_POW2,\n-\t\t\t\t\t\t\t    stmt, divisor));\n-\n+\t  values->safe_push (gimple_alloc_histogram_value (cfun,\n+\t\t\t\t\t\t\t   HIST_TYPE_POW2,\n+\t\t\t\t\t\t\t   stmt, divisor));\n \t  val = build2 (TRUNC_DIV_EXPR, type, op0, divisor);\n \t  hist = gimple_alloc_histogram_value (cfun, HIST_TYPE_INTERVAL,\n \t\t\t\t\t       stmt, val);\n \t  hist->hdata.intvl.int_start = 0;\n \t  hist->hdata.intvl.steps = 2;\n-\t  values->quick_push (hist);\n+\t  values->safe_push (hist);\n \t}\n       return;\n \n@@ -1840,11 +1837,9 @@ gimple_indirect_call_to_profile (gimple *stmt, histogram_values *values)\n     return;\n \n   callee = gimple_call_fn (stmt);\n-\n-  values->reserve (3);\n-\n-  values->quick_push (gimple_alloc_histogram_value (cfun, HIST_TYPE_INDIR_CALL,\n-\t\t\t\t\t\t    stmt, callee));\n+  histogram_value v = gimple_alloc_histogram_value (cfun, HIST_TYPE_INDIR_CALL,\n+\t\t\t\t\t\t    stmt, callee);\n+  values->safe_push (v);\n \n   return;\n }\n@@ -1911,7 +1906,8 @@ gimple_find_values_to_profile (histogram_values *values)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n       gimple_values_to_profile (gsi_stmt (gsi), values);\n \n-  values->safe_push (gimple_alloc_histogram_value (cfun, HIST_TYPE_TIME_PROFILE, 0, 0));\n+  values->safe_push (gimple_alloc_histogram_value (cfun,\n+\t\t\t\t\t\t   HIST_TYPE_TIME_PROFILE));\n \n   FOR_EACH_VEC_ELT (*values, i, hist)\n     {"}, {"sha": "77c06f60096f2f87ba5cb25be8474a5b0e4da591", "filename": "gcc/value-prof.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1628b2faf0011322be6ea4ad7b2484f720c595bf/gcc%2Fvalue-prof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1628b2faf0011322be6ea4ad7b2484f720c595bf/gcc%2Fvalue-prof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.h?ref=1628b2faf0011322be6ea4ad7b2484f720c595bf", "patch": "@@ -73,7 +73,8 @@ extern void gimple_find_values_to_profile (histogram_values *);\n extern bool gimple_value_profile_transformations (void);\n \n histogram_value gimple_alloc_histogram_value (struct function *, enum hist_type,\n-\t\t\t\t\t      gimple *stmt, tree);\n+\t\t\t\t\t      gimple *stmt = NULL,\n+\t\t\t\t\t      tree value = NULL_TREE);\n histogram_value gimple_histogram_value (struct function *, gimple *);\n histogram_value gimple_histogram_value_of_type (struct function *, gimple *,\n \t\t\t\t\t\tenum hist_type);\n@@ -97,15 +98,14 @@ bool get_nth_most_common_value (gimple *stmt, const char *counter_type,\n /* In tree-profile.c.  */\n extern void gimple_init_gcov_profiler (void);\n extern void gimple_gen_edge_profiler (int, edge);\n-extern void gimple_gen_interval_profiler (histogram_value, unsigned, unsigned);\n-extern void gimple_gen_pow2_profiler (histogram_value, unsigned, unsigned);\n-extern void gimple_gen_topn_values_profiler (histogram_value, unsigned,\n-\t\t\t\t\t     unsigned);\n-extern void gimple_gen_ic_profiler (histogram_value, unsigned, unsigned);\n+extern void gimple_gen_interval_profiler (histogram_value, unsigned);\n+extern void gimple_gen_pow2_profiler (histogram_value, unsigned);\n+extern void gimple_gen_topn_values_profiler (histogram_value, unsigned);\n+extern void gimple_gen_ic_profiler (histogram_value, unsigned);\n extern void gimple_gen_ic_func_profiler (void);\n-extern void gimple_gen_time_profiler (unsigned, unsigned);\n-extern void gimple_gen_average_profiler (histogram_value, unsigned, unsigned);\n-extern void gimple_gen_ior_profiler (histogram_value, unsigned, unsigned);\n+extern void gimple_gen_time_profiler (unsigned);\n+extern void gimple_gen_average_profiler (histogram_value, unsigned);\n+extern void gimple_gen_ior_profiler (histogram_value, unsigned);\n extern void stream_out_histogram_value (struct output_block *, histogram_value);\n extern void stream_in_histogram_value (class lto_input_block *, gimple *);\n extern struct cgraph_node* find_func_by_profile_id (int func_id);"}]}