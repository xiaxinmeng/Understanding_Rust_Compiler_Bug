{"sha": "d7e8d5811667a80aea6aad9f73ff6d6496a5ed13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdlOGQ1ODExNjY3YTgwYWVhNmFhZDlmNzNmZjZkNjQ5NmE1ZWQxMw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-21T04:33:51Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-21T04:33:51Z"}, "message": "(output_move_double): Use reg_overlap_mentioned_p when checking for overlap between source and dest.\n\n(output_move_double): Use reg_overlap_mentioned_p\nwhen checking for overlap between source and dest.\nFix syntax for the lea insn for double overlap case.\n\nFrom-SVN: r5857", "tree": {"sha": "a2ece5dbe574d682b073f51555e977a2130d79d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2ece5dbe574d682b073f51555e977a2130d79d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7e8d5811667a80aea6aad9f73ff6d6496a5ed13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e8d5811667a80aea6aad9f73ff6d6496a5ed13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7e8d5811667a80aea6aad9f73ff6d6496a5ed13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e8d5811667a80aea6aad9f73ff6d6496a5ed13/comments", "author": null, "committer": null, "parents": [{"sha": "b07b4e490d98864f273293961c716f01f2954bc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07b4e490d98864f273293961c716f01f2954bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07b4e490d98864f273293961c716f01f2954bc3"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "0fc5afa2993f5f30c7c6cb1bd382d7b437364dcd", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e8d5811667a80aea6aad9f73ff6d6496a5ed13/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e8d5811667a80aea6aad9f73ff6d6496a5ed13/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=d7e8d5811667a80aea6aad9f73ff6d6496a5ed13", "patch": "@@ -1077,15 +1077,15 @@ output_move_double (operands)\n   if (optype0 == REGOP\n       && (optype1 == OFFSOP || optype1 == MEMOP))\n     {\n-      if (reg_mentioned_p (operands[0], XEXP (operands[1], 0))\n-\t  && reg_mentioned_p (latehalf[0], XEXP (operands[1], 0)))\n+      if (reg_overlap_mentioned_p (operands[0], XEXP (operands[1], 0))\n+\t  && reg_overlap_mentioned_p (latehalf[0], XEXP (operands[1], 0)))\n \t{\n \t  /* If both halves of dest are used in the src memory address,\n \t     compute the address into latehalf of dest.  */\n compadr:\n \t  xops[0] = latehalf[0];\n \t  xops[1] = XEXP (operands[1], 0);\n-\t  output_asm_insn (\"lea%L0,%a1,%0\", xops);\n+\t  output_asm_insn (\"lea %a1,%0\", xops);\n \t  if( GET_MODE (operands[1]) == XFmode )\n \t    {\n \t      operands[1] = gen_rtx (MEM, XFmode, latehalf[0]);\n@@ -1099,24 +1099,25 @@ output_move_double (operands)\n \t    }\n \t}\n       else if (size == 12\n-\t\t && reg_mentioned_p (middlehalf[0], XEXP (operands[1], 0)))\n+\t       && reg_overlap_mentioned_p (middlehalf[0],\n+\t\t\t\t\t   XEXP (operands[1], 0)))\n \t{\n \t  /* Check for two regs used by both source and dest. */\n-\t  if (reg_mentioned_p (operands[0], XEXP (operands[1], 0))\n-\t\t|| reg_mentioned_p (latehalf[0], XEXP (operands[1], 0)))\n-\t\tgoto compadr;\n+\t  if (reg_overlap_mentioned_p (operands[0], XEXP (operands[1], 0))\n+\t      || reg_overlap_mentioned_p (latehalf[0], XEXP (operands[1], 0)))\n+\t    goto compadr;\n \n \t  /* JRV says this can't happen: */\n \t  if (addreg0 || addreg1)\n-\t      abort();\n+\t    abort ();\n \n \t  /* Only the middle reg conflicts; simply put it last. */\n \t  output_asm_insn (singlemove_string (operands), operands);\n \t  output_asm_insn (singlemove_string (latehalf), latehalf);\n \t  output_asm_insn (singlemove_string (middlehalf), middlehalf);\n \t  return \"\";\n \t}\n-      else if (reg_mentioned_p (operands[0], XEXP (operands[1], 0)))\n+      else if (reg_overlap_mentioned_p (operands[0], XEXP (operands[1], 0)))\n \t/* If the low half of dest is mentioned in the source memory\n \t   address, the arrange to emit the move late half first.  */\n \tdest_overlapped_low = 1;"}]}