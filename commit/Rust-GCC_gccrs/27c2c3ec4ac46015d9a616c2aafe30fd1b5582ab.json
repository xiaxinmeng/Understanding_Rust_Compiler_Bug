{"sha": "27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdjMmMzZWM0YWM0NjAxNWQ5YTYxNmMyYWFmZTMwZmQxYjU1ODJhYg==", "commit": {"author": {"name": "Ingo Proetel", "email": "proetel@aicas.com", "date": "2004-05-04T19:27:11Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-05-04T19:27:11Z"}, "message": "ColorModel.java (getRGBdefault): Default ColorModel has 32 bit pixels not 8 bit pixels.\n\n2004-05-04  Ingo Proetel  <proetel@aicas.com>\n\n\t* java/awt/image/ColorModel.java (getRGBdefault): Default ColorModel has\n        32 bit pixels not 8 bit pixels.\n\t(isCompatibleRaster): Added javadoc comment.\n\n2004-05-04  Ingo Proetel  <proetel@aicas.com>\n\n\t* java/awt/image/ComponentSampleModel.java (setDataSamples):Do not reset\n\tscanline stride.\n\n2004-05-04  Ingo Proetel  <proetel@aicas.com>\n\n\t* java/awt/ColorPaintContext.java (<init>): Added ColorModel to signature.\n\t(getColorModel): Return the actual color model.\n\t(getRaster): Implemented.\n\t(ColorRaster): New inner class.\n\t* java/awt/SystemColor.java (createContext): Use ColorModel when creating\n\ta PaintContext.\n\t* java/awt/Color.java (<init>): Make exception more verbose.\n\t(createContext): Use ColorModel when creating a PaintContext.\n\nFrom-SVN: r81486", "tree": {"sha": "4945426aed8ab42ddbdcb6975ef386280d1ec7a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4945426aed8ab42ddbdcb6975ef386280d1ec7a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/comments", "author": {"login": "iproetel", "id": 895564, "node_id": "MDQ6VXNlcjg5NTU2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/895564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iproetel", "html_url": "https://github.com/iproetel", "followers_url": "https://api.github.com/users/iproetel/followers", "following_url": "https://api.github.com/users/iproetel/following{/other_user}", "gists_url": "https://api.github.com/users/iproetel/gists{/gist_id}", "starred_url": "https://api.github.com/users/iproetel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iproetel/subscriptions", "organizations_url": "https://api.github.com/users/iproetel/orgs", "repos_url": "https://api.github.com/users/iproetel/repos", "events_url": "https://api.github.com/users/iproetel/events{/privacy}", "received_events_url": "https://api.github.com/users/iproetel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fae4c98f1b61242c3e20ba4580a991b94080423a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae4c98f1b61242c3e20ba4580a991b94080423a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae4c98f1b61242c3e20ba4580a991b94080423a"}], "stats": {"total": 165, "additions": 144, "deletions": 21}, "files": [{"sha": "76fe4f0e07da17c822df75d46f5ca804cc0fb6a9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab", "patch": "@@ -1,3 +1,25 @@\n+2004-05-04  Ingo Proetel  <proetel@aicas.com>\n+\n+\t* java/awt/image/ColorModel.java (getRGBdefault): Default ColorModel has\n+        32 bit pixels not 8 bit pixels.\n+\t(isCompatibleRaster): Added javadoc comment.\n+\n+2004-05-04  Ingo Proetel  <proetel@aicas.com>\n+\n+\t* java/awt/image/ComponentSampleModel.java (setDataSamples):Do not reset\n+\tscanline stride.\n+\n+2004-05-04  Ingo Proetel  <proetel@aicas.com>\n+\n+\t* java/awt/ColorPaintContext.java (<init>): Added ColorModel to signature.\n+\t(getColorModel): Return the actual color model.\n+\t(getRaster): Implemented.\n+\t(ColorRaster): New inner class.\n+\t* java/awt/SystemColor.java (createContext): Use ColorModel when creating\n+\ta PaintContext.\n+\t* java/awt/Color.java (<init>): Make exception more verbose.\n+\t(createContext): Use ColorModel when creating a PaintContext.\n+\n 2004-05-04  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/text/CharacterBreakIterator.java"}, {"sha": "c41117a6e33dbca1868f3f4a9dc46e475b590a3a", "filename": "libjava/java/awt/Color.java", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/libjava%2Fjava%2Fawt%2FColor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/libjava%2Fjava%2Fawt%2FColor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FColor.java?ref=27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab", "patch": "@@ -319,7 +319,12 @@ public Color(int red, int green, int blue, int alpha)\n   {\n     if ((red & 255) != red || (green & 255) != green || (blue & 255) != blue\n         || (alpha & 255) != alpha)\n-      throw new IllegalArgumentException(\"Bad RGB values\");\n+      throw new IllegalArgumentException(\"Bad RGB values\"\n+                                        +\" red=0x\"+Integer.toHexString(red)\n+                                        +\" green=0x\"+Integer.toHexString(green)\n+                                        +\" blue=0x\"+Integer.toHexString(blue)\n+                                        +\" alpha=0x\"+Integer.toHexString(alpha)  );\n+\n     value = (alpha << 24) | (red << 16) | (green << 8) | blue;\n     falpha = 1;\n     cs = null;\n@@ -950,7 +955,7 @@ public ColorSpace getColorSpace()\n    * object, regardless of the parameters. Subclasses, however, may have a\n    * mutable result.\n    *\n-   * @param cm the requested color model, ignored\n+   * @param cm the requested color model\n    * @param deviceBounds the bounding box in device coordinates, ignored\n    * @param userBounds the bounding box in user coordinates, ignored\n    * @param xform the bounds transformation, ignored\n@@ -962,8 +967,8 @@ public PaintContext createContext(ColorModel cm, Rectangle deviceBounds,\n                                     AffineTransform xform,\n                                     RenderingHints hints)\n   {\n-    if (context == null)\n-      context = new ColorPaintContext(value);\n+    if (context == null || !context.getColorModel().equals(cm))\n+      context = new ColorPaintContext(cm,value);\n     return context;\n   }\n "}, {"sha": "9fdfe61962d9820902769a79a822158338083804", "filename": "libjava/java/awt/ColorPaintContext.java", "status": "modified", "additions": 103, "deletions": 11, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/libjava%2Fjava%2Fawt%2FColorPaintContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/libjava%2Fjava%2Fawt%2FColorPaintContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FColorPaintContext.java?ref=27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab", "patch": "@@ -1,5 +1,5 @@\n /* ColorPaintContext.java -- context for painting solid colors\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -55,15 +55,31 @@ class ColorPaintContext implements PaintContext\n    * SystemColor.\n    */\n   final int color;\n+  final ColorModel colorModel;\n \n+  private ColorRaster cachedRaster;\n+\n+  \n   /**\n    * Create the context for a given color.\n    *\n-   * @param c the solid color to use\n+   * @param c The solid color to use.\n    */\n-  ColorPaintContext(int c)\n+  ColorPaintContext(int colorRGB)\n   {\n-    color = c;\n+    this(ColorModel.getRGBdefault(), colorRGB);\n+  }\n+  \n+  /**\n+   * Create the context for a given color.\n+   *\n+   * @param cm The color model of this context. \n+   * @param c The solid color to use.\n+   */\n+  ColorPaintContext(ColorModel cm,int colorRGB)\n+  {\n+    color = colorRGB;\n+    colorModel = cm;\n   }\n \n   /**\n@@ -75,14 +91,13 @@ public void dispose()\n   }\n \n   /**\n-   * Return the color model of this context. This ignores the model passed\n-   * in the request, since colors are always in sRGB.\n+   * Return the color model of this context. \n    *\n    * @return the context color model\n    */\n   public ColorModel getColorModel()\n   {\n-    return ColorModel.getRGBdefault();\n+    return colorModel;\n   }\n \n   /**\n@@ -94,10 +109,87 @@ public ColorModel getColorModel()\n    * @param h the height, in device space\n    * @return a raster for the given area and color\n    */\n-  public Raster getRaster(int x, int y, int w, int h)\n+  public Raster getRaster(int x, int y, int width, int height)\n+  {\n+   if(  cachedRaster == null \n+       || cachedRaster.getWidth() < width\n+       || cachedRaster.getHeight() < height)\n+   {\n+     cachedRaster = new ColorRaster(colorModel, 0, 0, width, height, color);\n+   }\n+   return cachedRaster.createChild(0 ,0 ,width ,height ,x ,y , null);\n+  }\n+  \n+  /**\n+   * A ColorRaster is a raster that is completely filled with one color. The \n+   * data layout is taken from the color model given to the constructor.\n+   */\n+  private class ColorRaster extends Raster\n   {\n-    // XXX Implement. Sun uses undocumented implementation class\n-    // sun.awt.image.IntegerInterleavedRaster.\n-    throw new Error(\"not implemented\");\n+    \n+    /**\n+     * Create a raster that is compaltible with the given color model and \n+     * filled with the given color.\n+     * @param cm The color model for this raster.\n+     * @param x The smallest horizontal corrdinate in the raster.\n+     * @param y The smallest vertical coordinate in the raster.\n+     * @param width The width of the raster.\n+     * @param height The height of the raster.\n+     * @param rgbPixel The RGB value of the color for this raster.\n+     */\n+    ColorRaster(ColorModel cm,int x, int y, int width, int height, int rgbPixel)\n+    {         \n+      super(cm.createCompatibleSampleModel(width,height),new Point(x,y));\n+      Object pixel = cm.getDataElements(rgbPixel,null);\n+      getSampleModel().setDataElements(0, 0,\n+                                       width, height,\n+                                       multiplyData(pixel,null,width*height),\n+                                       dataBuffer);\n+    }\n+    \n+    \n+    \n+    private Object multiplyData(Object src, Object dest, int factor)\n+    {\n+      Object from;\n+      int srcLength = 0;\n+      if (src instanceof byte[])\n+      {\n+        srcLength = ((byte[])src).length;\n+        \n+        if (dest == null) dest = new byte[factor * srcLength];\n+      }\n+      else if (src instanceof short[])\n+      {\n+        srcLength = ((short[])src).length;\n+        if (dest == null) dest = new short[factor * srcLength];\n+      }\n+      else if (src instanceof int[])\n+      {\n+        srcLength = ((int[]) src).length;\n+        if (dest == null) dest = new int[factor * srcLength];\n+      }\n+      else\n+      {\n+        throw new ClassCastException(\"Unknown data buffer type\");\n+      }\n+      \n+      System.arraycopy(src,0,dest,0,srcLength);\n+      \n+      int count = 1;\n+      while(count*2 < factor)\n+      {\n+        System.arraycopy(dest, 0, dest, count * srcLength, count*srcLength);\n+        count *= 2; \n+      }\n+      \n+      if(factor > count)\n+        System.arraycopy(dest,0, dest, count * srcLength, \n+                         (factor - count) * srcLength );\n+      \n+      return dest;\n+    }\n+    \n   }\n+  \n } // class ColorPaintContext"}, {"sha": "5217677b7221cc9d8d522c981aa105b0d72e3101", "filename": "libjava/java/awt/SystemColor.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/libjava%2Fjava%2Fawt%2FSystemColor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/libjava%2Fjava%2Fawt%2FSystemColor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FSystemColor.java?ref=27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab", "patch": "@@ -427,7 +427,7 @@ public int getRGB()\n    * as the system color is solid, the context does not need any of the\n    * passed parameters to do its job.\n    *\n-   * @param cm the requested color model, ignored\n+   * @param cm the requested color model\n    * @param deviceBounds the bounding box in device coordinates, ignored\n    * @param userBounds the bounding box in user coordinates, ignored\n    * @param xform the bounds transformation, ignored\n@@ -441,8 +441,8 @@ public PaintContext createContext(ColorModel cm, Rectangle deviceBounds,\n   {\n     Toolkit.getDefaultToolkit().loadSystemColors(colors);\n     int color = colors[value] | ALPHA_MASK;\n-    if (context == null || color != context.color)\n-      context = new ColorPaintContext(color);\n+    if (context == null || color != context.color || !context.getColorModel().equals(cm))\n+      context = new ColorPaintContext(cm,color);\n     return context;\n   }    \n "}, {"sha": "c73f4fd4e58b5346b7fa9b6576093ba7e9dc4048", "filename": "libjava/java/awt/image/ColorModel.java", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/libjava%2Fjava%2Fawt%2Fimage%2FColorModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/libjava%2Fjava%2Fawt%2Fimage%2FColorModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FColorModel.java?ref=27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab", "patch": "@@ -166,7 +166,7 @@ public void finalize()\n    */\n   public static ColorModel getRGBdefault()\n   {\n-    return new DirectColorModel(8, 0xff0000, 0xff00, 0xff, 0xff000000);\n+    return new DirectColorModel(32, 0xff0000, 0xff00, 0xff, 0xff000000);\n   }\n \n   public final boolean hasAlpha()\n@@ -597,7 +597,11 @@ public ColorModel coerceData(WritableRaster raster,\n     return null;\n   }\n     \n-  // Typically overridden\n+  /**\n+   * Checks if the given raster has a compatible data-layout (SampleModel).\n+   * @param raster The Raster to test.\n+   * @return true if raster is compatible.\n+   */ \n   public boolean isCompatibleRaster(Raster raster)\n   {\n     SampleModel sampleModel = raster.getSampleModel();"}, {"sha": "c7b08b919e5d3384bdd91a7165f5dfbe72d33b03", "filename": "libjava/java/awt/image/ComponentSampleModel.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/libjava%2Fjava%2Fawt%2Fimage%2FComponentSampleModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab/libjava%2Fjava%2Fawt%2Fimage%2FComponentSampleModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FComponentSampleModel.java?ref=27c2c3ec4ac46015d9a616c2aafe30fd1b5582ab", "patch": "@@ -349,7 +349,7 @@ public void setDataElements(int x, int y, int w, int h,\n     if (scanlineStride == rowSize)\n       {\n \t// Collapse scan lines:\n-\tscanlineStride = rowSize *= h;\n+\trowSize *= h;\n \th = 1;\n       }\n "}]}