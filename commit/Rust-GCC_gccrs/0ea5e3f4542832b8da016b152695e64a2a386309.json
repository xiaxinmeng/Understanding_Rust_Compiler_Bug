{"sha": "0ea5e3f4542832b8da016b152695e64a2a386309", "node_id": "C_kwDOANBUbNoAKDBlYTVlM2Y0NTQyODMyYjhkYTAxNmIxNTI2OTVlNjRhMmEzODYzMDk", "commit": {"author": {"name": "Tim Lange", "email": "mail@tim-lange.me", "date": "2022-09-10T21:53:48Z"}, "committer": {"name": "Tim Lange", "email": "mail@tim-lange.me", "date": "2022-09-11T21:55:20Z"}, "message": "analyzer: consider empty ranges and zero byte accesses [PR106845]\n\nThis patch adds handling of empty ranges in bit_range and byte_range and\nadds an assertion to member functions that assume a positive size.\nFurther, the patch fixes an ICE caused by an empty byte_range passed to\nbyte_range::exceeds_p.\n\nRegression-tested on Linux x86_64.\n\n2022-09-10  Tim Lange  <mail@tim-lange.me>\n\ngcc/analyzer/ChangeLog:\n\n\tPR analyzer/106845\n\t* region-model.cc (region_model::check_region_bounds):\n\tBail out if 0 bytes were accessed.\n\t* store.cc (byte_range::dump_to_pp):\n\tAdd special case for empty ranges.\n\t(byte_range::exceeds_p): Restrict to non-empty ranges.\n\t(byte_range::falls_short_of_p): Restrict to non-empty ranges.\n\t* store.h (bit_range::empty_p): New function.\n\t(bit_range::get_last_byte_offset): Restrict to non-empty ranges.\n\t(byte_range::empty_p): New function.\n\t(byte_range::get_last_byte_offset): Restrict to non-empty ranges.\n\ngcc/testsuite/ChangeLog:\n\n\tPR analyzer/106845\n\t* gcc.dg/analyzer/out-of-bounds-zero.c: New test.\n\t* gcc.dg/analyzer/pr106845.c: New test.", "tree": {"sha": "37e285532e7f807019eae14d388dbbedbea5155c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37e285532e7f807019eae14d388dbbedbea5155c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ea5e3f4542832b8da016b152695e64a2a386309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea5e3f4542832b8da016b152695e64a2a386309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea5e3f4542832b8da016b152695e64a2a386309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea5e3f4542832b8da016b152695e64a2a386309/comments", "author": {"login": "timll", "id": 10032775, "node_id": "MDQ6VXNlcjEwMDMyNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/10032775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timll", "html_url": "https://github.com/timll", "followers_url": "https://api.github.com/users/timll/followers", "following_url": "https://api.github.com/users/timll/following{/other_user}", "gists_url": "https://api.github.com/users/timll/gists{/gist_id}", "starred_url": "https://api.github.com/users/timll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timll/subscriptions", "organizations_url": "https://api.github.com/users/timll/orgs", "repos_url": "https://api.github.com/users/timll/repos", "events_url": "https://api.github.com/users/timll/events{/privacy}", "received_events_url": "https://api.github.com/users/timll/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timll", "id": 10032775, "node_id": "MDQ6VXNlcjEwMDMyNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/10032775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timll", "html_url": "https://github.com/timll", "followers_url": "https://api.github.com/users/timll/followers", "following_url": "https://api.github.com/users/timll/following{/other_user}", "gists_url": "https://api.github.com/users/timll/gists{/gist_id}", "starred_url": "https://api.github.com/users/timll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timll/subscriptions", "organizations_url": "https://api.github.com/users/timll/orgs", "repos_url": "https://api.github.com/users/timll/repos", "events_url": "https://api.github.com/users/timll/events{/privacy}", "received_events_url": "https://api.github.com/users/timll/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3496e2ea632463f4118928a87639454c87a859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b3496e2ea632463f4118928a87639454c87a859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b3496e2ea632463f4118928a87639454c87a859"}], "stats": {"total": 105, "additions": 103, "deletions": 2}, "files": [{"sha": "13b8e3eaf1b85b115557844c0576cebabbb6ca20", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea5e3f4542832b8da016b152695e64a2a386309/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea5e3f4542832b8da016b152695e64a2a386309/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=0ea5e3f4542832b8da016b152695e64a2a386309", "patch": "@@ -1828,6 +1828,9 @@ region_model::check_region_bounds (const region *reg,\n   /* Find out how many bytes were accessed.  */\n   const svalue *num_bytes_sval = reg->get_byte_size_sval (m_mgr);\n   tree num_bytes_tree = maybe_get_integer_cst_tree (num_bytes_sval);\n+  /* Bail out if 0 bytes are accessed.  */\n+  if (num_bytes_tree && zerop (num_bytes_tree))\n+    return;\n \n   /* Get the capacity of the buffer.  */\n   const svalue *capacity = get_capacity (base_reg);"}, {"sha": "1857d95f0b603d936f8a21f2677330da37ae5add", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea5e3f4542832b8da016b152695e64a2a386309/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea5e3f4542832b8da016b152695e64a2a386309/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=0ea5e3f4542832b8da016b152695e64a2a386309", "patch": "@@ -380,7 +380,11 @@ bit_range::as_byte_range (byte_range *out) const\n void\n byte_range::dump_to_pp (pretty_printer *pp) const\n {\n-  if (m_size_in_bytes == 1)\n+  if (m_size_in_bytes == 0)\n+    {\n+      pp_string (pp, \"empty\");\n+    }\n+  else if (m_size_in_bytes == 1)\n     {\n       pp_string (pp, \"byte \");\n       pp_wide_int (pp, m_start_byte_offset, SIGNED);\n@@ -455,7 +459,9 @@ bool\n byte_range::exceeds_p (const byte_range &other,\n \t\t       byte_range *out_overhanging_byte_range) const\n {\n-  if (other.get_last_byte_offset () < get_last_byte_offset ())\n+  gcc_assert (!empty_p ());\n+\n+  if (other.get_next_byte_offset () < get_next_byte_offset ())\n     {\n       /* THIS definitely exceeds OTHER.  */\n       byte_offset_t start = MAX (get_start_byte_offset (),\n@@ -477,6 +483,8 @@ bool\n byte_range::falls_short_of_p (byte_offset_t offset,\n \t\t\t      byte_range *out_fall_short_bytes) const\n {\n+  gcc_assert (!empty_p ());\n+\n   if (get_start_byte_offset () < offset)\n     {\n       /* THIS falls short of OFFSET.  */"}, {"sha": "d172ee756c8b8619dbf56f6c4e8718075b24a784", "filename": "gcc/analyzer/store.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea5e3f4542832b8da016b152695e64a2a386309/gcc%2Fanalyzer%2Fstore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea5e3f4542832b8da016b152695e64a2a386309/gcc%2Fanalyzer%2Fstore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.h?ref=0ea5e3f4542832b8da016b152695e64a2a386309", "patch": "@@ -237,6 +237,11 @@ struct bit_range\n   void dump_to_pp (pretty_printer *pp) const;\n   void dump () const;\n \n+  bool empty_p () const\n+  {\n+    return m_size_in_bits == 0;\n+  }\n+\n   bit_offset_t get_start_bit_offset () const\n   {\n     return m_start_bit_offset;\n@@ -247,6 +252,7 @@ struct bit_range\n   }\n   bit_offset_t get_last_bit_offset () const\n   {\n+    gcc_assert (!empty_p ());\n     return get_next_bit_offset () - 1;\n   }\n \n@@ -297,6 +303,11 @@ struct byte_range\n   void dump_to_pp (pretty_printer *pp) const;\n   void dump () const;\n \n+  bool empty_p () const\n+  {\n+    return m_size_in_bytes == 0;\n+  }\n+\n   bool contains_p (byte_offset_t offset) const\n   {\n     return (offset >= get_start_byte_offset ()\n@@ -329,6 +340,7 @@ struct byte_range\n   }\n   byte_offset_t get_last_byte_offset () const\n   {\n+    gcc_assert (!empty_p ());\n     return m_start_byte_offset + m_size_in_bytes - 1;\n   }\n "}, {"sha": "201ca00ebdbb8c920c49a9beb20a180b2e7c9b19", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-zero.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea5e3f4542832b8da016b152695e64a2a386309/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea5e3f4542832b8da016b152695e64a2a386309/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-zero.c?ref=0ea5e3f4542832b8da016b152695e64a2a386309", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-additional-options \"-Wno-stringop-overflow\"} */\n+/* -Wstringop-overflow= triggers on test5.  */\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+void test1 (void)\n+{\n+  int32_t buf[1];\n+  /* Zero bytes written on non-zero allocation.  */\n+  __builtin_memset (buf, 0, 0);\n+}\n+\n+void test2 (void)\n+{\n+  /* ISO C forbids zero-size arrays but GCC compiles this to an\n+     zero-sized array without -Wpedantic.  */\n+  int32_t buf[0];\n+  /* Write on zero capacity.  */\n+  __builtin_memset (buf, 0, sizeof (int32_t)); /* { dg-line test2 } */\n+\n+  /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test2 } */\n+  /* { dg-message \"from byte 0 till byte 3\" \"final event\" { target *-*-* } test2 } */\n+}\n+\n+void test3 (void)\n+{\n+  int32_t buf[0];\n+  /* Zero bytes written on zero capacity.  */\n+  __builtin_memset (buf, 0, 0);\n+}\n+\n+void test4 (void)\n+{\n+  int32_t *buf = malloc (sizeof (int32_t));\n+  if (!buf)\n+    return;\n+\n+  /* Zero bytes written on non-zero allocation.  */\n+  __builtin_memset (buf, 0, 0);\n+  free (buf);\n+}\n+\n+void test5 (void)\n+{\n+  int32_t *buf = malloc (0);\n+  if (!buf)\n+    return;\n+\n+  /* Write on zero capacity.  */\n+  __builtin_memset (buf, 0, sizeof (int32_t)); /* { dg-line test5 } */\n+  free (buf);\n+\n+  /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test5 } */\n+  /* { dg-message \"from byte 0 till byte 3\" \"final event\" { target *-*-* } test5 } */\n+}\n+\n+void test6 (void)\n+{\n+  int32_t *buf = malloc (0);\n+  if (!buf)\n+    return;\n+\n+  /* Zero bytes written on zero capacity.  */\n+  __builtin_memset (buf, 0, 0);\n+  free (buf);\n+}"}, {"sha": "528c7b3ea9ad41b6789d5c59aa68d9b7e7807677", "filename": "gcc/testsuite/gcc.dg/analyzer/pr106845.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea5e3f4542832b8da016b152695e64a2a386309/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr106845.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea5e3f4542832b8da016b152695e64a2a386309/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr106845.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr106845.c?ref=0ea5e3f4542832b8da016b152695e64a2a386309", "patch": "@@ -0,0 +1,11 @@\n+int buf_size;\n+\n+int\n+main (void)\n+{\n+  char buf[buf_size];\n+\n+  __builtin_memset (&buf[1], 0, buf_size);\n+\n+  return 0;\n+}"}]}