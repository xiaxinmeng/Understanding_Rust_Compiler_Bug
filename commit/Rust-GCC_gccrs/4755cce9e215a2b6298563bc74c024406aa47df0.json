{"sha": "4755cce9e215a2b6298563bc74c024406aa47df0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc1NWNjZTllMjE1YTJiNjI5ODU2M2JjNzRjMDI0NDA2YWE0N2RmMA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2009-07-20T13:31:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-20T13:31:05Z"}, "message": "sem_util.ads, [...] (Check_Dynamically_Tagged_Expression): New subprogram.\n\n2009-07-20  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Check_Dynamically_Tagged_Expression): New\n\tsubprogram.\n\t* sem_aggr.adb (Resolve_Array_Aggregate): Check incorrect use of\n\tdynamically tagged expression.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Call new routine that\n\tfactorizes code.\n\t* sem_ch6.adb (Analyze_Function_Return, Process_Formals): Ditto.\n\t* sem_ch8.adb (Analyze_Object_Renaming): Ditto.\n\nFrom-SVN: r149817", "tree": {"sha": "becdb2012401fbc7c32405f7f7396a93934dd38b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/becdb2012401fbc7c32405f7f7396a93934dd38b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4755cce9e215a2b6298563bc74c024406aa47df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4755cce9e215a2b6298563bc74c024406aa47df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4755cce9e215a2b6298563bc74c024406aa47df0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4755cce9e215a2b6298563bc74c024406aa47df0/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46fe0142e1f8287fc12ffc4f50f2b2017536a396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fe0142e1f8287fc12ffc4f50f2b2017536a396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fe0142e1f8287fc12ffc4f50f2b2017536a396"}], "stats": {"total": 160, "additions": 139, "deletions": 21}, "files": [{"sha": "cacf87c9bcd3ba9796d85e158d0d6bf82f5abd95", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4755cce9e215a2b6298563bc74c024406aa47df0", "patch": "@@ -1,3 +1,14 @@\n+2009-07-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Check_Dynamically_Tagged_Expression): New\n+\tsubprogram.\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Check incorrect use of\n+\tdynamically tagged expression.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Call new routine that\n+\tfactorizes code.\n+\t* sem_ch6.adb (Analyze_Function_Return, Process_Formals): Ditto.\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Ditto.\n+\n 2009-07-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat1drv.adb (Gnat1drv): Set operating mode to Generate_Code when"}, {"sha": "b7ac8f7756591286dc90283a467e4c1c55fb5dc3", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=4755cce9e215a2b6298563bc74c024406aa47df0", "patch": "@@ -28,6 +28,7 @@ with Checks;   use Checks;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n+with Expander; use Expander;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n@@ -1759,6 +1760,42 @@ package body Sem_Aggr is\n                                             Single_Elmt => Single_Choice)\n                then\n                   return Failure;\n+\n+               --  Check incorrect use of dynamically tagged expression\n+\n+               --  We differentiate here two cases because the expression may\n+               --  not be decorated. For example, the analysis and resolution\n+               --  of the expression associated with the others choice will\n+               --  be done later with the full aggregate. In such case we\n+               --  duplicate the expression tree to analyze the copy and\n+               --  perform the required check.\n+\n+               elsif not Present (Etype (Expression (Assoc))) then\n+                  declare\n+                     Save_Analysis : constant Boolean := Full_Analysis;\n+                     Expr          : constant Node_Id :=\n+                                       New_Copy_Tree (Expression (Assoc));\n+\n+                  begin\n+                     Expander_Mode_Save_And_Set (False);\n+                     Full_Analysis := False;\n+                     Analyze (Expr);\n+                     Full_Analysis := Save_Analysis;\n+                     Expander_Mode_Restore;\n+\n+                     if Is_Tagged_Type (Etype (Expr)) then\n+                        Check_Dynamically_Tagged_Expression\n+                          (Expr => Expr,\n+                           Typ  => Component_Type (Etype (N)),\n+                           Related_Nod => N);\n+                     end if;\n+                  end;\n+\n+               elsif Is_Tagged_Type (Etype (Expression (Assoc))) then\n+                  Check_Dynamically_Tagged_Expression\n+                    (Expr => Expression (Assoc),\n+                     Typ  => Component_Type (Etype (N)),\n+                     Related_Nod => N);\n                end if;\n \n                Next (Assoc);\n@@ -1992,6 +2029,15 @@ package body Sem_Aggr is\n                return Failure;\n             end if;\n \n+            --  Check incorrect use of dynamically tagged expression\n+\n+            if Is_Tagged_Type (Etype (Expr)) then\n+               Check_Dynamically_Tagged_Expression\n+                 (Expr => Expr,\n+                  Typ  => Component_Type (Etype (N)),\n+                  Related_Nod => N);\n+            end if;\n+\n             Next (Expr);\n          end loop;\n \n@@ -2021,6 +2067,32 @@ package body Sem_Aggr is\n                                          Single_Elmt => False)\n             then\n                return Failure;\n+\n+            --  Check incorrect use of dynamically tagged expression. The\n+            --  expression of the others choice has not been resolved yet.\n+            --  In order to diagnose the semantic error we create a duplicate\n+            --  tree to analyze it and perform the check.\n+\n+            else\n+               declare\n+                  Save_Analysis : constant Boolean := Full_Analysis;\n+                  Expr          : constant Node_Id :=\n+                                    New_Copy_Tree (Expression (Assoc));\n+\n+               begin\n+                  Expander_Mode_Save_And_Set (False);\n+                  Full_Analysis := False;\n+                  Analyze (Expr);\n+                  Full_Analysis := Save_Analysis;\n+                  Expander_Mode_Restore;\n+\n+                  if Is_Tagged_Type (Etype (Expr)) then\n+                     Check_Dynamically_Tagged_Expression\n+                       (Expr => Expr,\n+                        Typ  => Component_Type (Etype (N)),\n+                        Related_Nod => N);\n+                  end if;\n+               end;\n             end if;\n          end if;\n "}, {"sha": "4efc72777aec8b3949c0842b6613d0cd2703eb1c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4755cce9e215a2b6298563bc74c024406aa47df0", "patch": "@@ -2608,16 +2608,13 @@ package body Sem_Ch3 is\n             end if;\n          end if;\n \n-         --  Check incorrect use of dynamically tagged expressions. Note\n-         --  the use of Is_Tagged_Type (T) which seems redundant but is in\n-         --  fact important to avoid spurious errors due to expanded code\n-         --  for dispatching functions over an anonymous access type\n+         --  Check incorrect use of dynamically tagged expressions.\n \n-         if (Is_Class_Wide_Type (Etype (E)) or else Is_Dynamically_Tagged (E))\n-           and then Is_Tagged_Type (T)\n-           and then not Is_Class_Wide_Type (T)\n-         then\n-            Error_Msg_N (\"dynamically tagged expression not allowed!\", E);\n+         if Is_Tagged_Type (T) then\n+            Check_Dynamically_Tagged_Expression\n+              (Expr        => E,\n+               Typ         => T,\n+               Related_Nod => N);\n          end if;\n \n          Apply_Scalar_Range_Check (E, T);"}, {"sha": "56a28607eb2f98832c25ef4adfc4a6e8e6701fff", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4755cce9e215a2b6298563bc74c024406aa47df0", "patch": "@@ -749,12 +749,13 @@ package body Sem_Ch6 is\n             end if;\n          end if;\n \n-         if (Is_Class_Wide_Type (Etype (Expr))\n-              or else Is_Dynamically_Tagged (Expr))\n-           and then not Is_Class_Wide_Type (R_Type)\n-         then\n-            Error_Msg_N\n-              (\"dynamically tagged expression not allowed!\", Expr);\n+         --  Check incorrect use of dynamically tagged expression\n+\n+         if Is_Tagged_Type (R_Type) then\n+            Check_Dynamically_Tagged_Expression\n+              (Expr => Expr,\n+               Typ  => R_Type,\n+               Related_Nod => N);\n          end if;\n \n          --  ??? A real run-time accessibility check is needed in cases\n@@ -8084,6 +8085,15 @@ package body Sem_Ch6 is\n                Error_Msg_N\n                  (\"access to class-wide expression not allowed here\", Default);\n             end if;\n+\n+            --  Check incorrect use of dynamically tagged expressions\n+\n+            if Is_Tagged_Type (Formal_Type) then\n+               Check_Dynamically_Tagged_Expression\n+                 (Expr        => Default,\n+                  Typ         => Formal_Type,\n+                  Related_Nod => Default);\n+            end if;\n          end if;\n \n          --  Ada 2005 (AI-231): Static checks"}, {"sha": "005dedfbc25c79c73da96b797ef1ac9afefd6515", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=4755cce9e215a2b6298563bc74c024406aa47df0", "patch": "@@ -754,12 +754,11 @@ package body Sem_Ch8 is\n          --  cases where the renamed object is a dynamically tagged access\n          --  result, such as occurs in certain expansions.\n \n-         if (Is_Class_Wide_Type (Etype (Nam))\n-              or else (Is_Dynamically_Tagged (Nam)\n-                        and then not Is_Access_Type (T)))\n-           and then not Is_Class_Wide_Type (T)\n-         then\n-            Error_Msg_N (\"dynamically tagged expression not allowed!\", Nam);\n+         if Is_Tagged_Type (T) then\n+            Check_Dynamically_Tagged_Expression\n+              (Expr        => Nam,\n+               Typ         => T,\n+               Related_Nod => N);\n          end if;\n \n       --  Ada 2005 (AI-230/AI-254): Access renaming"}, {"sha": "3e3c03a0f107480cc4ede805b7fc38f3fbc72557", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4755cce9e215a2b6298563bc74c024406aa47df0", "patch": "@@ -47,6 +47,7 @@ with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Attr; use Sem_Attr;\n with Sem_Ch8;  use Sem_Ch8;\n+with Sem_Disp; use Sem_Disp;\n with Sem_Eval; use Sem_Eval;\n with Sem_Res;  use Sem_Res;\n with Sem_Type; use Sem_Type;\n@@ -1032,6 +1033,28 @@ package body Sem_Util is\n       end if;\n    end Cannot_Raise_Constraint_Error;\n \n+   -----------------------------------------\n+   -- Check_Dynamically_Tagged_Expression --\n+   -----------------------------------------\n+\n+   procedure Check_Dynamically_Tagged_Expression\n+     (Expr        : Node_Id;\n+      Typ         : Entity_Id;\n+      Related_Nod : Node_Id)\n+   is\n+   begin\n+      pragma Assert (Is_Tagged_Type (Typ));\n+\n+      if Comes_From_Source (Related_Nod)\n+        and then (Is_Class_Wide_Type (Etype (Expr))\n+                   or else Is_Dynamically_Tagged (Expr))\n+        and then Is_Tagged_Type (Typ)\n+        and then not Is_Class_Wide_Type (Typ)\n+      then\n+         Error_Msg_N (\"dynamically tagged expression not allowed!\", Expr);\n+      end if;\n+   end Check_Dynamically_Tagged_Expression;\n+\n    --------------------------\n    -- Check_Fully_Declared --\n    --------------------------"}, {"sha": "aa3958f8b4f4e963ce21335032f939263daa2d38", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4755cce9e215a2b6298563bc74c024406aa47df0/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=4755cce9e215a2b6298563bc74c024406aa47df0", "patch": "@@ -125,6 +125,12 @@ package Sem_Util is\n    --  not necessarily mean that CE could be raised, but a response of True\n    --  means that for sure CE cannot be raised.\n \n+   procedure Check_Dynamically_Tagged_Expression\n+     (Expr        : Node_Id;\n+      Typ         : Entity_Id;\n+      Related_Nod : Node_Id);\n+   --  Check wrong use of dynamically tagged expression\n+\n    procedure Check_Fully_Declared (T : Entity_Id; N : Node_Id);\n    --  Verify that the full declaration of type T has been seen. If not,\n    --  place error message on node N. Used in  object declarations, type"}]}