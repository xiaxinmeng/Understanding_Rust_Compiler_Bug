{"sha": "5953774463a728b111d685f9840ff6935229b8d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk1Mzc3NDQ2M2E3MjhiMTExZDY4NWY5ODQwZmY2OTM1MjI5YjhkNg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2016-08-11T13:07:29Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2016-08-11T13:07:29Z"}, "message": "re PR tree-optimization/71083 (Unaligned bit-field address when predictive commoning)\n\n2016-08-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR tree-optimization/71083\n        * tree-predcom.c (ref_at_iteration): Correctly align the\n        reference type.\n\ntestsuite:\n2016-08-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR tree-optimization/71083\n        * gcc.c-torture/execute/pr71083.c: New test.\n        * gnat.dg/loop_optimization23.adb: New test.\n        * gnat.dg/loop_optimization23_pkg.ads: New test.\n        * gnat.dg/loop_optimization23_pkg.adb: New test.\n\nFrom-SVN: r239362", "tree": {"sha": "d40aa43345c886e9b92620dd9a33350b139f2768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d40aa43345c886e9b92620dd9a33350b139f2768"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5953774463a728b111d685f9840ff6935229b8d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5953774463a728b111d685f9840ff6935229b8d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5953774463a728b111d685f9840ff6935229b8d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5953774463a728b111d685f9840ff6935229b8d6/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d71f118839eae04db411982ca9c578e72038461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d71f118839eae04db411982ca9c578e72038461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d71f118839eae04db411982ca9c578e72038461"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "c41c1252374bcd186775d8510ba2bc5d2ee9008e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5953774463a728b111d685f9840ff6935229b8d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5953774463a728b111d685f9840ff6935229b8d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5953774463a728b111d685f9840ff6935229b8d6", "patch": "@@ -1,3 +1,9 @@\n+2016-08-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR tree-optimization/71083\n+\t* tree-predcom.c (ref_at_iteration): Correctly align the\n+\treference type.\n+\n 2016-08-11  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390-builtin-types.def: Add INT128 types."}, {"sha": "5dde7f145be70afafc6de3a8d0c2d0002abab605", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5953774463a728b111d685f9840ff6935229b8d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5953774463a728b111d685f9840ff6935229b8d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5953774463a728b111d685f9840ff6935229b8d6", "patch": "@@ -1,3 +1,11 @@\n+2016-08-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR tree-optimization/71083\n+\t* gcc.c-torture/execute/pr71083.c: New test.\n+\t* gnat.dg/loop_optimization23.adb: New test.\n+\t* gnat.dg/loop_optimization23_pkg.ads: New test.\n+\t* gnat.dg/loop_optimization23_pkg.adb: New test.\n+\n 2016-08-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/72772"}, {"sha": "05744349333d42c025d053a16daafffae1e8dcc9", "filename": "gcc/testsuite/gcc.c-torture/execute/pr71083.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5953774463a728b111d685f9840ff6935229b8d6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr71083.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5953774463a728b111d685f9840ff6935229b8d6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr71083.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr71083.c?ref=5953774463a728b111d685f9840ff6935229b8d6", "patch": "@@ -0,0 +1,43 @@\n+struct lock_chain {\n+  unsigned int irq_context: 2,\n+    depth: 6,\n+    base: 24;\n+};\n+\n+__attribute__((noinline, noclone))\n+struct lock_chain * foo (struct lock_chain *chain)\n+{\n+  int i;\n+  for (i = 0; i < 100; i++)\n+    {\n+      chain[i+1].base = chain[i].base;\n+    }\n+  return chain;\n+}\n+\n+struct lock_chain1 {\n+  char x;\n+  unsigned short base;\n+} __attribute__((packed));\n+\n+__attribute__((noinline, noclone))\n+struct lock_chain1 * bar (struct lock_chain1 *chain)\n+{\n+  int i;\n+  for (i = 0; i < 100; i++)\n+    {\n+      chain[i+1].base = chain[i].base;\n+    }\n+  return chain;\n+}\n+\n+struct lock_chain test [101];\n+struct lock_chain1 test1 [101];\n+\n+int\n+main ()\n+{\n+  foo (test);\n+  bar (test1);\n+  return 0;\n+}"}, {"sha": "4f3af5044c9902ea41bc72689ed10a54d226bd43", "filename": "gcc/testsuite/gnat.dg/loop_optimization23.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5953774463a728b111d685f9840ff6935229b8d6/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization23.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5953774463a728b111d685f9840ff6935229b8d6/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization23.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization23.adb?ref=5953774463a728b111d685f9840ff6935229b8d6", "patch": "@@ -0,0 +1,14 @@\n+-- { dg-do run }\n+-- { dg-options \"-O3\" }\n+-- PR tree-optimization/71083\n+with Loop_Optimization23_Pkg;\n+use Loop_Optimization23_Pkg;\n+procedure Loop_Optimization23 is\n+  Test : ArrayOfStructB;\n+begin\n+  Test (0).b.b := 9999;\n+  Foo (Test);\n+  if Test (100).b.b /= 9999 then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "a5fc90d720508bbc66dadcc2e5a717660215f727", "filename": "gcc/testsuite/gnat.dg/loop_optimization23_pkg.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5953774463a728b111d685f9840ff6935229b8d6/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization23_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5953774463a728b111d685f9840ff6935229b8d6/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization23_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization23_pkg.adb?ref=5953774463a728b111d685f9840ff6935229b8d6", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O3\" }\n+-- PR tree-optimization/71083\n+package body Loop_Optimization23_Pkg is\n+  procedure Foo (X : in out ArrayOfStructB) is\n+  begin\n+    for K in 0..99 loop\n+      X (K+1).b.b := X (K).b.b;\n+    end loop;\n+  end Foo;\n+end Loop_Optimization23_Pkg;"}, {"sha": "016ad82ef8410b981cb3cf48e0fbf4ecc13b75be", "filename": "gcc/testsuite/gnat.dg/loop_optimization23_pkg.ads", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5953774463a728b111d685f9840ff6935229b8d6/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization23_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5953774463a728b111d685f9840ff6935229b8d6/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization23_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization23_pkg.ads?ref=5953774463a728b111d685f9840ff6935229b8d6", "patch": "@@ -0,0 +1,17 @@\n+-- PR tree-optimization/71083\n+package Loop_Optimization23_Pkg is\n+  type Nibble is mod 2**4;\n+  type Int24  is mod 2**24;\n+  type StructA is record\n+    a : Nibble;\n+    b : Int24;\n+  end record;\n+  pragma Pack(StructA);\n+  type StructB is record\n+    a : Nibble;\n+    b : StructA;\n+  end record;\n+  pragma Pack(StructB);\n+  type ArrayOfStructB is array(0..100) of StructB;\n+  procedure Foo (X : in out ArrayOfStructB);\n+end Loop_Optimization23_Pkg;"}, {"sha": "843f68e387bf8c9123c4d594fe3f53dc6fb6a0e5", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5953774463a728b111d685f9840ff6935229b8d6/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5953774463a728b111d685f9840ff6935229b8d6/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=5953774463a728b111d685f9840ff6935229b8d6", "patch": "@@ -213,6 +213,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-scalar-evolution.h\"\n #include \"params.h\"\n #include \"tree-affine.h\"\n+#include \"builtins.h\"\n \n /* The maximum number of iterations between the considered memory\n    references.  */\n@@ -1381,6 +1382,8 @@ ref_at_iteration (data_reference_p dr, int iter, gimple_seq *stmts)\n   addr = force_gimple_operand_1 (unshare_expr (addr), stmts,\n \t\t\t\t is_gimple_mem_ref_addr, NULL_TREE);\n   tree alias_ptr = fold_convert (reference_alias_ptr_type (DR_REF (dr)), coff);\n+  tree type = build_aligned_type (TREE_TYPE (DR_REF (dr)),\n+\t\t\t\t  get_object_alignment (DR_REF (dr)));\n   /* While data-ref analysis punts on bit offsets it still handles\n      bitfield accesses at byte boundaries.  Cope with that.  Note that\n      we cannot simply re-apply the outer COMPONENT_REF because the\n@@ -1392,12 +1395,11 @@ ref_at_iteration (data_reference_p dr, int iter, gimple_seq *stmts)\n     {\n       tree field = TREE_OPERAND (DR_REF (dr), 1);\n       return build3 (BIT_FIELD_REF, TREE_TYPE (DR_REF (dr)),\n-\t\t     build2 (MEM_REF, DECL_BIT_FIELD_TYPE (field),\n-\t\t\t     addr, alias_ptr),\n+\t\t     build2 (MEM_REF, type, addr, alias_ptr),\n \t\t     DECL_SIZE (field), bitsize_zero_node);\n     }\n   else\n-    return fold_build2 (MEM_REF, TREE_TYPE (DR_REF (dr)), addr, alias_ptr);\n+    return fold_build2 (MEM_REF, type, addr, alias_ptr);\n }\n \n /* Get the initialization expression for the INDEX-th temporary variable"}]}