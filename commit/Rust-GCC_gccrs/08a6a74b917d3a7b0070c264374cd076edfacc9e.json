{"sha": "08a6a74b917d3a7b0070c264374cd076edfacc9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhhNmE3NGI5MTdkM2E3YjAwNzBjMjY0Mzc0Y2QwNzZlZGZhY2M5ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-10-06T19:07:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-10-06T19:07:33Z"}, "message": "darwin-protos.h (machopic_function_base_name): Delete.\n\ngcc/\n\t* config/darwin-protos.h (machopic_function_base_name): Delete.\n\t(machopic_function_base_sym): Likewise.\n\t(machopic_gen_offset): Declare.\n\t* config/darwin.h (MACHOPIC_FUNCTION_BASE_NAME): New macro.\n\t(ASM_OUTPUT_LABELREF): Use it instead of a hard-coded string constant.\n\t* config/darwin.c (machopic_function_base_name): Delete.\n\t(machopic_function_base_sym): Likewise.\n\t(gen_pic_offset): Rename to...\n\t(machopic_gen_offset): ...this and remove the pic_base argument.\n\tInstead use MACHO_DYNAMIC_NO_PIC_P to decide whether a PIC offset\n\tis needed.  Create an UNSPEC_MACHOPIC_OFFSET if so, and set\n\tcrtl->uses_pic_offset_table.\n\t(machopic_indirect_data_reference): Use new machopic_gen_offset\n\tinterface.\n\t(machopic_legitimize_pic_address): Likewise.\n\t(machopic_operand_p): Check for UNSPEC_MACHOPIC_OFFSET.\n\n\t* config/i386/darwin.h (GOT_SYMBOL_NAME): Use\n\tMACHOPIC_FUNCTION_BASE_NAME instead of machopic_function_base_name.\n\t* config/i386/i386.c (output_set_got): Likewise.\n\t(darwin_local_data_pic): Check for an UNSPEC_MACHOPIC_OFFSET\n\tinstead of a MINUS.\n\t(legitimate_pic_operand_p): Handle UNSPEC_MACHOPIC_OFFSET.\n\t(legitimate_address_p): Likewise.\n\t(output_pic_addr_const): Likewise.\n\t(output_addr_const_extra): Likewise.\n\t(ix86_delegitimize_address): Expect darwin_local_data_pic to\n\tmatch an UNSPEC rather than a MINUS.\n\t* config/i386/i386.md (UNSPEC_MACHOPIC_OFFSET): Define.\n\t(builtin_setjmp_receiver): Use machopic_gen_offset.\n\t* config/i386/predicates.md (pic_symbolic_operand): Handle\n\tUNSPEC_MACHOPIC_OFFSET.\n\n\t* config/rs6000/rs6000.c (rs6000_legitimize_reload_address):\n\tUse machopic_gen_offset and machopic_operand_p.\n\t(rs6000_output_addr_const_extra): Handle UNSPEC_MACHOPIC_OFFSET.\n\t(rs6000_emit_prologue): Use MACHOPIC_FUNCTION_BASE_NAME.\n\t* config/rs6000/rs6000.md (UNSPEC_MACHOPIC_OFFSET): Define.\n\t(builtin_setjmp_receiver): Use MACHOPIC_FUNCTION_BASE_NAME.\n\tSet crtl->uses_pic_offset_table.\n\nFrom-SVN: r140911", "tree": {"sha": "dd906add3e83a4a7cf219604bf1100b0f5173d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd906add3e83a4a7cf219604bf1100b0f5173d20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08a6a74b917d3a7b0070c264374cd076edfacc9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a6a74b917d3a7b0070c264374cd076edfacc9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08a6a74b917d3a7b0070c264374cd076edfacc9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a6a74b917d3a7b0070c264374cd076edfacc9e/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e4316da802a3049f67686001f9dbca5711dcace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4316da802a3049f67686001f9dbca5711dcace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e4316da802a3049f67686001f9dbca5711dcace"}], "stats": {"total": 224, "additions": 118, "deletions": 106}, "files": [{"sha": "e5af008102e2238fda4c44d22a950393c100fb8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08a6a74b917d3a7b0070c264374cd076edfacc9e", "patch": "@@ -1,3 +1,46 @@\n+2008-10-06  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/darwin-protos.h (machopic_function_base_name): Delete.\n+\t(machopic_function_base_sym): Likewise.\n+\t(machopic_gen_offset): Declare.\n+\t* config/darwin.h (MACHOPIC_FUNCTION_BASE_NAME): New macro.\n+\t(ASM_OUTPUT_LABELREF): Use it instead of a hard-coded string constant.\n+\t* config/darwin.c (machopic_function_base_name): Delete.\n+\t(machopic_function_base_sym): Likewise.\n+\t(gen_pic_offset): Rename to...\n+\t(machopic_gen_offset): ...this and remove the pic_base argument.\n+\tInstead use MACHO_DYNAMIC_NO_PIC_P to decide whether a PIC offset\n+\tis needed.  Create an UNSPEC_MACHOPIC_OFFSET if so, and set\n+\tcrtl->uses_pic_offset_table.\n+\t(machopic_indirect_data_reference): Use new machopic_gen_offset\n+\tinterface.\n+\t(machopic_legitimize_pic_address): Likewise.\n+\t(machopic_operand_p): Check for UNSPEC_MACHOPIC_OFFSET.\n+\n+\t* config/i386/darwin.h (GOT_SYMBOL_NAME): Use\n+\tMACHOPIC_FUNCTION_BASE_NAME instead of machopic_function_base_name.\n+\t* config/i386/i386.c (output_set_got): Likewise.\n+\t(darwin_local_data_pic): Check for an UNSPEC_MACHOPIC_OFFSET\n+\tinstead of a MINUS.\n+\t(legitimate_pic_operand_p): Handle UNSPEC_MACHOPIC_OFFSET.\n+\t(legitimate_address_p): Likewise.\n+\t(output_pic_addr_const): Likewise.\n+\t(output_addr_const_extra): Likewise.\n+\t(ix86_delegitimize_address): Expect darwin_local_data_pic to\n+\tmatch an UNSPEC rather than a MINUS.\n+\t* config/i386/i386.md (UNSPEC_MACHOPIC_OFFSET): Define.\n+\t(builtin_setjmp_receiver): Use machopic_gen_offset.\n+\t* config/i386/predicates.md (pic_symbolic_operand): Handle\n+\tUNSPEC_MACHOPIC_OFFSET.\n+\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_reload_address):\n+\tUse machopic_gen_offset and machopic_operand_p.\n+\t(rs6000_output_addr_const_extra): Handle UNSPEC_MACHOPIC_OFFSET.\n+\t(rs6000_emit_prologue): Use MACHOPIC_FUNCTION_BASE_NAME.\n+\t* config/rs6000/rs6000.md (UNSPEC_MACHOPIC_OFFSET): Define.\n+\t(builtin_setjmp_receiver): Use MACHOPIC_FUNCTION_BASE_NAME.\n+\tSet crtl->uses_pic_offset_table.\n+\n 2008-10-06  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/rs6000/rs6000-protos.h (rs6000_output_addr_const_extra):"}, {"sha": "5fe55965fd1007fa840db543df68843d264be617", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=08a6a74b917d3a7b0070c264374cd076edfacc9e", "patch": "@@ -22,14 +22,13 @@ extern int name_needs_quotes (const char *);\n \n extern void machopic_validate_stub_or_non_lazy_ptr (const char *);\n \n-extern const char *machopic_function_base_name (void);\n extern void machopic_output_function_base_name (FILE *);\n extern const char *machopic_indirection_name (rtx, bool);\n extern const char *machopic_mcount_stub_name (void);\n \n #ifdef RTX_CODE\n \n-extern rtx machopic_function_base_sym (void);\n+extern rtx machopic_gen_offset (rtx);\n extern int machopic_operand_p (rtx);\n extern enum machopic_addr_class machopic_classify_symbol (rtx);\n "}, {"sha": "3a4fc99c5b37f48f0e0eb95ef947ff496279e96b", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 25, "deletions": 68, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=08a6a74b917d3a7b0070c264374cd076edfacc9e", "patch": "@@ -267,44 +267,26 @@ machopic_define_symbol (rtx mem)\n   SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_DEFINED;\n }\n \n-static GTY(()) const char * function_base;\n+/* Return either ORIG or:\n \n-const char *\n-machopic_function_base_name (void)\n-{\n-  /* if dynamic-no-pic is on, we should not get here */\n-  gcc_assert (!MACHO_DYNAMIC_NO_PIC_P);\n-\n-  if (function_base == NULL)\n-    function_base = ggc_alloc_string (\"<pic base>\", sizeof (\"<pic base>\"));\n-\n-  crtl->uses_pic_offset_table = 1;\n-\n-  return function_base;\n-}\n-\n-/* Return a SYMBOL_REF for the PIC function base.  */\n+     (const:P (unspec:P [ORIG] UNSPEC_MACHOPIC_OFFSET))\n \n+   depending on MACHO_DYNAMIC_NO_PIC_P.  */\n rtx\n-machopic_function_base_sym (void)\n+machopic_gen_offset (rtx orig)\n {\n-  rtx sym_ref;\n-\n-  sym_ref = gen_rtx_SYMBOL_REF (Pmode, machopic_function_base_name ());\n-  SYMBOL_REF_FLAGS (sym_ref)\n-    |= (MACHO_SYMBOL_FLAG_VARIABLE | MACHO_SYMBOL_FLAG_DEFINED);\n-  return sym_ref;\n-}\n-\n-/* Return either ORIG or (const:P (minus:P ORIG PIC_BASE)), depending\n-   on whether pic_base is NULL or not.  */\n-static inline rtx\n-gen_pic_offset (rtx orig, rtx pic_base)\n-{\n-  if (!pic_base)\n+  if (MACHO_DYNAMIC_NO_PIC_P)\n     return orig;\n   else\n-    return gen_rtx_CONST (Pmode, gen_rtx_MINUS (Pmode, orig, pic_base));\n+    {\n+      /* Play games to avoid marking the function as needing pic if we\n+\t are being called as part of the cost-estimation process.  */\n+      if (current_ir_type () != IR_GIMPLE)\n+\tcrtl->uses_pic_offset_table = 1;\n+      orig = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, orig),\n+\t\t\t     UNSPEC_MACHOPIC_OFFSET);\n+      return gen_rtx_CONST (Pmode, orig);\n+    }\n }\n \n static GTY(()) const char * function_base_func_name;\n@@ -528,8 +510,7 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n       else if (defined)\n \t{\n #if defined (TARGET_TOC) || defined (HAVE_lo_sum)\n-\t  rtx pic_base = machopic_function_base_sym ();\n-\t  rtx offset = gen_pic_offset (orig, pic_base);\n+\t  rtx offset = machopic_gen_offset (orig);\n #endif\n \n #if defined (TARGET_TOC) /* i.e., PowerPC */\n@@ -675,8 +656,6 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t  ))\n     {\n       /* addr(foo) = &func+(foo-func) */\n-      rtx pic_base;\n-\n       orig = machopic_indirect_data_reference (orig, reg);\n \n       if (GET_CODE (orig) == PLUS\n@@ -689,12 +668,6 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t  return reg;\n \t}\n \n-      /* if dynamic-no-pic we don't have a pic base  */\n-      if (MACHO_DYNAMIC_NO_PIC_P)\n-\tpic_base = NULL;\n-      else\n-\tpic_base = machopic_function_base_sym ();\n-\n       if (GET_CODE (orig) == MEM)\n \t{\n \t  if (reg == 0)\n@@ -731,7 +704,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t  if (GET_CODE (XEXP (orig, 0)) == SYMBOL_REF\n \t      || GET_CODE (XEXP (orig, 0)) == LABEL_REF)\n \t    {\n-\t      rtx offset = gen_pic_offset (XEXP (orig, 0), pic_base);\n+\t      rtx offset = machopic_gen_offset (XEXP (orig, 0));\n #if defined (TARGET_TOC) /* i.e., PowerPC */\n \t      /* Generating a new reg may expose opportunities for\n \t\t common subexpression elimination.  */\n@@ -787,8 +760,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t      if (reload_in_progress)\n \t\tdf_set_regs_ever_live (REGNO (pic), true);\n \t      pic_ref = gen_rtx_PLUS (Pmode, pic,\n-\t\t\t\t      gen_pic_offset (XEXP (orig, 0),\n-\t\t\t\t\t\t      pic_base));\n+\t\t\t\t      machopic_gen_offset (XEXP (orig, 0)));\n \t    }\n \n #if !defined (TARGET_TOC)\n@@ -803,7 +775,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t  if (GET_CODE (orig) == SYMBOL_REF\n \t      || GET_CODE (orig) == LABEL_REF)\n \t    {\n-\t      rtx offset = gen_pic_offset (orig, pic_base);\n+\t      rtx offset = machopic_gen_offset (orig);\n #if defined (TARGET_TOC) /* i.e., PowerPC */\n               rtx hi_sum_reg;\n \n@@ -860,7 +832,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t\t    df_set_regs_ever_live (REGNO (pic), true);\n \t\t  pic_ref = gen_rtx_PLUS (Pmode,\n \t\t\t\t\t  pic,\n-\t\t\t\t\t  gen_pic_offset (orig, pic_base));\n+\t\t\t\t\t  machopic_gen_offset (orig));\n \t\t}\n \t    }\n \t}\n@@ -1064,27 +1036,12 @@ int\n machopic_operand_p (rtx op)\n {\n   if (MACHOPIC_JUST_INDIRECT)\n-    {\n-      while (GET_CODE (op) == CONST)\n-\top = XEXP (op, 0);\n-\n-      if (GET_CODE (op) == SYMBOL_REF)\n-\treturn machopic_symbol_defined_p (op);\n-      else\n-\treturn 0;\n-    }\n-\n-  while (GET_CODE (op) == CONST)\n-    op = XEXP (op, 0);\n-\n-  if (GET_CODE (op) == MINUS\n-      && GET_CODE (XEXP (op, 0)) == SYMBOL_REF\n-      && GET_CODE (XEXP (op, 1)) == SYMBOL_REF\n-      && machopic_symbol_defined_p (XEXP (op, 0))\n-      && machopic_symbol_defined_p (XEXP (op, 1)))\n-      return 1;\n-\n-  return 0;\n+    return (GET_CODE (op) == SYMBOL_REF\n+\t    && machopic_symbol_defined_p (op));\n+  else\n+    return (GET_CODE (op) == CONST\n+\t    && GET_CODE (XEXP (op, 0)) == UNSPEC\n+\t    && XINT (XEXP (op, 0), 1) == UNSPEC_MACHOPIC_OFFSET);\n }\n \n /* This function records whether a given name corresponds to a defined"}, {"sha": "03955c64d0a7423a0d8163d0121a666735e43341", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=08a6a74b917d3a7b0070c264374cd076edfacc9e", "patch": "@@ -525,6 +525,9 @@ extern GTY(()) int darwin_ms_struct;\n \n #define USER_LABEL_PREFIX \"_\"\n \n+/* A dummy symbol that will be replaced with the function base name.  */\n+#define MACHOPIC_FUNCTION_BASE_NAME \"<pic base>\"\n+\n /* Don't output a .file directive.  That is only used by the assembler for\n    error reporting.  */\n #undef\tTARGET_ASM_FILE_START_FILE_DIRECTIVE\n@@ -609,7 +612,7 @@ extern GTY(()) int darwin_ms_struct;\n #define ASM_OUTPUT_LABELREF(FILE,NAME)\t\t\t\t\t     \\\n   do {\t\t\t\t\t\t\t\t\t     \\\n        const char *xname = (NAME);\t\t\t\t\t     \\\n-       if (! strcmp (xname, \"<pic base>\"))\t\t\t\t     \\\n+       if (! strcmp (xname, MACHOPIC_FUNCTION_BASE_NAME))\t\t     \\\n          machopic_output_function_base_name(FILE);                           \\\n        else if (xname[0] == '&' || xname[0] == '*')\t\t\t     \\\n          {\t\t\t\t\t\t\t\t     \\"}, {"sha": "e2b6025b2c0459969659da0ab562d30808092486", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=08a6a74b917d3a7b0070c264374cd076edfacc9e", "patch": "@@ -176,7 +176,7 @@ extern void darwin_x86_file_end (void);\n #define TARGET_DYNAMIC_NO_PIC\t  (target_flags & MASK_MACHO_DYNAMIC_NO_PIC)\n \n #undef GOT_SYMBOL_NAME\n-#define GOT_SYMBOL_NAME (machopic_function_base_name ())\n+#define GOT_SYMBOL_NAME MACHOPIC_FUNCTION_BASE_NAME\n \n /* Define the syntax of pseudo-ops, labels and comments.  */\n "}, {"sha": "dab834154775a2114228f8a534c13b52ed311cbd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=08a6a74b917d3a7b0070c264374cd076edfacc9e", "patch": "@@ -7268,7 +7268,7 @@ output_set_got (rtx dest, rtx label ATTRIBUTE_UNUSED)\n       /* Output the Mach-O \"canonical\" label name (\"Lxx$pb\") here too.  This\n          is what will be referenced by the Mach-O PIC subsystem.  */\n       if (!label)\n-\tASM_OUTPUT_LABEL (asm_out_file, machopic_function_base_name ());\n+\tASM_OUTPUT_LABEL (asm_out_file, MACHOPIC_FUNCTION_BASE_NAME);\n #endif\n \n       (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n@@ -7290,7 +7290,7 @@ output_set_got (rtx dest, rtx label ATTRIBUTE_UNUSED)\n          is what will be referenced by the Mach-O PIC subsystem.  */\n #if TARGET_MACHO\n       if (!label)\n-\tASM_OUTPUT_LABEL (asm_out_file, machopic_function_base_name ());\n+\tASM_OUTPUT_LABEL (asm_out_file, MACHOPIC_FUNCTION_BASE_NAME);\n       else\n         targetm.asm_out.internal_label (asm_out_file, \"L\",\n \t\t\t\t\t   CODE_LABEL_NUMBER (label));\n@@ -8557,19 +8557,8 @@ ix86_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n static bool\n darwin_local_data_pic (rtx disp)\n {\n-  if (GET_CODE (disp) == MINUS)\n-    {\n-      if (GET_CODE (XEXP (disp, 0)) == LABEL_REF\n-          || GET_CODE (XEXP (disp, 0)) == SYMBOL_REF)\n-        if (GET_CODE (XEXP (disp, 1)) == SYMBOL_REF)\n-          {\n-            const char *sym_name = XSTR (XEXP (disp, 1), 0);\n-            if (! strcmp (sym_name, \"<pic base>\"))\n-              return true;\n-          }\n-    }\n-\n-  return false;\n+  return (GET_CODE (disp) == UNSPEC\n+\t  && XINT (disp, 1) == UNSPEC_MACHOPIC_OFFSET);\n }\n \n /* Determine if a given RTX is a valid constant.  We already know this\n@@ -8710,6 +8699,8 @@ legitimate_pic_operand_p (rtx x)\n \t    x = XVECEXP (inner, 0, 0);\n \t    return (GET_CODE (x) == SYMBOL_REF\n \t\t    && SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_EXEC);\n+\t  case UNSPEC_MACHOPIC_OFFSET:\n+\t    return legitimate_pic_address_disp_p (x);\n \t  default:\n \t    return false;\n \t  }\n@@ -8972,7 +8963,8 @@ legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n       reason_rtx = disp;\n \n       if (GET_CODE (disp) == CONST\n-\t  && GET_CODE (XEXP (disp, 0)) == UNSPEC)\n+\t  && GET_CODE (XEXP (disp, 0)) == UNSPEC\n+\t  && XINT (XEXP (disp, 0), 1) != UNSPEC_MACHOPIC_OFFSET)\n \tswitch (XINT (XEXP (disp, 0), 1))\n \t  {\n \t  /* Refuse GOTOFF and GOT in 64bit mode since it is always 64bit when\n@@ -9935,6 +9927,12 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n \tcase UNSPEC_INDNTPOFF:\n \t  fputs (\"@INDNTPOFF\", file);\n \t  break;\n+#if TARGET_MACHO\n+\tcase UNSPEC_MACHOPIC_OFFSET:\n+\t  putc ('-', file);\n+\t  machopic_output_function_base_name (file);\n+\t  break;\n+#endif\n \tdefault:\n \t  output_operand_lossage (\"invalid UNSPEC as operand\");\n \t  break;\n@@ -10055,7 +10053,7 @@ ix86_delegitimize_address (rtx orig_x)\n \n   if (TARGET_MACHO && darwin_local_data_pic (x)\n       && !MEM_P (orig_x))\n-    result = XEXP (x, 0);\n+    result = XVECEXP (x, 0, 0);\n \n   if (! result)\n     return orig_x;\n@@ -11167,6 +11165,13 @@ output_addr_const_extra (FILE *file, rtx x)\n       output_addr_const (file, op);\n       fputs (\"@INDNTPOFF\", file);\n       break;\n+#if TARGET_MACHO\n+    case UNSPEC_MACHOPIC_OFFSET:\n+      output_addr_const (file, op);\n+      putc ('-', file);\n+      machopic_output_function_base_name (file);\n+      break;\n+#endif\n \n     default:\n       return false;"}, {"sha": "728c9673702967110b373e67dea43eebda7f8cb9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=08a6a74b917d3a7b0070c264374cd076edfacc9e", "patch": "@@ -58,6 +58,7 @@\n    (UNSPEC_GOTNTPOFF\t\t7)\n    (UNSPEC_INDNTPOFF\t\t8)\n    (UNSPEC_PLTOFF\t\t9)\n+   (UNSPEC_MACHOPIC_OFFSET\t10)\n \n    ; Prologue support\n    (UNSPEC_STACK_ALLOC\t\t11)\n@@ -20245,20 +20246,19 @@\n   [(label_ref (match_operand 0 \"\" \"\"))]\n   \"!TARGET_64BIT && flag_pic\"\n {\n+#if TARGET_MACHO\n   if (TARGET_MACHO)\n     {\n       rtx xops[3];\n       rtx picreg = gen_rtx_REG (Pmode, PIC_OFFSET_TABLE_REGNUM);\n       rtx label_rtx = gen_label_rtx ();\n       emit_insn (gen_set_got_labelled (pic_offset_table_rtx, label_rtx));\n       xops[0] = xops[1] = picreg;\n-      xops[2] = gen_rtx_CONST (SImode,\n-\t          gen_rtx_MINUS (SImode,\n-\t\t    gen_rtx_LABEL_REF (SImode, label_rtx),\n-\t\t    gen_rtx_SYMBOL_REF (SImode, GOT_SYMBOL_NAME)));\n+      xops[2] = machopic_gen_offset (gen_rtx_LABEL_REF (SImode, label_rtx));\n       ix86_expand_binary_operator (MINUS, SImode, xops);\n     }\n   else\n+#endif\n     emit_insn (gen_set_got (pic_offset_table_rtx));\n   DONE;\n })"}, {"sha": "bdac21026171450ffe541a58083b6ad0d0dbb32c", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=08a6a74b917d3a7b0070c264374cd076edfacc9e", "patch": "@@ -428,7 +428,8 @@\n \t  || !CONST_INT_P (XEXP (op, 1)))\n \treturn 0;\n       op = XEXP (op, 0);\n-      if (GET_CODE (op) == UNSPEC)\n+      if (GET_CODE (op) == UNSPEC\n+\t  && XINT (op, 1) != UNSPEC_MACHOPIC_OFFSET)\n \treturn 1;\n     }\n   return 0;"}, {"sha": "83a2753eb90cba9e610230460cc63b6ba4114103", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=08a6a74b917d3a7b0070c264374cd076edfacc9e", "patch": "@@ -4159,8 +4159,8 @@ rs6000_tls_symbol_ref_1 (rtx *x, void *data ATTRIBUTE_UNUSED)\n \n    On Darwin, we use this to generate code for floating point constants.\n    A movsf_low is generated so we wind up with 2 instructions rather than 3.\n-   The Darwin code is inside #if TARGET_MACHO because only then is\n-   machopic_function_base_name() defined.  */\n+   The Darwin code is inside #if TARGET_MACHO because only then are the\n+   machopic_* functions defined.  */\n rtx\n rs6000_legitimize_reload_address (rtx x, enum machine_mode mode,\n \t\t\t\t  int opnum, int type,\n@@ -4186,11 +4186,8 @@ rs6000_legitimize_reload_address (rtx x, enum machine_mode mode,\n       && GET_CODE (XEXP (x, 0)) == PLUS\n       && XEXP (XEXP (x, 0), 0) == pic_offset_table_rtx\n       && GET_CODE (XEXP (XEXP (x, 0), 1)) == HIGH\n-      && GET_CODE (XEXP (XEXP (XEXP (x, 0), 1), 0)) == CONST\n       && XEXP (XEXP (XEXP (x, 0), 1), 0) == XEXP (x, 1)\n-      && GET_CODE (XEXP (XEXP (x, 1), 0)) == MINUS\n-      && GET_CODE (XEXP (XEXP (XEXP (x, 1), 0), 0)) == SYMBOL_REF\n-      && GET_CODE (XEXP (XEXP (XEXP (x, 1), 0), 1)) == SYMBOL_REF)\n+      && machopic_operand_p (XEXP (x, 1)))\n     {\n       /* Result of previous invocation of this function on Darwin\n \t floating point constant.  */\n@@ -4282,9 +4279,7 @@ rs6000_legitimize_reload_address (rtx x, enum machine_mode mode,\n #if TARGET_MACHO\n       if (flag_pic)\n \t{\n-\t  rtx offset = gen_rtx_CONST (Pmode,\n-\t\t\t gen_rtx_MINUS (Pmode, x,\n-\t\t\t\t\tmachopic_function_base_sym ()));\n+\t  rtx offset = machopic_gen_offset (x);\n \t  x = gen_rtx_LO_SUM (GET_MODE (x),\n \t\tgen_rtx_PLUS (Pmode, pic_offset_table_rtx,\n \t\t  gen_rtx_HIGH (Pmode, offset)), offset);\n@@ -12568,6 +12563,14 @@ rs6000_output_addr_const_extra (FILE *file, rtx x)\n \telse if (TARGET_ELF)\n \t  fputs (\"@toc\", file);\n \treturn true;\n+\n+#if TARGET_MACHO\n+      case UNSPEC_MACHOPIC_OFFSET:\n+\toutput_addr_const (file, XVECEXP (x, 0, 0));\n+\tputc ('-', file);\n+\tmachopic_output_function_base_name (file);\n+\treturn true;\n+#endif\n       }\n   return false;\n }\n@@ -16667,7 +16670,7 @@ rs6000_emit_prologue (void)\n       && flag_pic && crtl->uses_pic_offset_table)\n     {\n       rtx lr = gen_rtx_REG (Pmode, LR_REGNO);\n-      rtx src = machopic_function_base_sym ();\n+      rtx src = gen_rtx_SYMBOL_REF (Pmode, MACHOPIC_FUNCTION_BASE_NAME);\n \n       /* Save and restore LR locally around this call (in R0).  */\n       if (!info->lr_save_p)"}, {"sha": "044b11765e9fb976f79da75ad7e0cba746cc4a28", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a6a74b917d3a7b0070c264374cd076edfacc9e/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=08a6a74b917d3a7b0070c264374cd076edfacc9e", "patch": "@@ -100,6 +100,7 @@\n    (UNSPEC_DLMZB_STRLEN\t\t47)\n    (UNSPEC_RSQRT\t\t48)\n    (UNSPEC_TOCREL\t\t49)\n+   (UNSPEC_MACHOPIC_OFFSET\t50)\n   ])\n \n ;;\n@@ -10594,12 +10595,12 @@\n #if TARGET_MACHO\n   if (DEFAULT_ABI == ABI_DARWIN)\n     {\n-      const char *picbase = machopic_function_base_name ();\n-      rtx picrtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (picbase));\n+      rtx picrtx = gen_rtx_SYMBOL_REF (Pmode, MACHOPIC_FUNCTION_BASE_NAME);\n       rtx picreg = gen_rtx_REG (Pmode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n       rtx tmplabrtx;\n       char tmplab[20];\n \n+      crtl->uses_pic_offset_table = 1;\n       ASM_GENERATE_INTERNAL_LABEL(tmplab, \\\"LSJR\\\",\n \t\t\t\t  CODE_LABEL_NUMBER (operands[0]));\n       tmplabrtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (tmplab));"}]}