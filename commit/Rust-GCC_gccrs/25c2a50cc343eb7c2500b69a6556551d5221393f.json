{"sha": "25c2a50cc343eb7c2500b69a6556551d5221393f", "node_id": "C_kwDOANBUbNoAKDI1YzJhNTBjYzM0M2ViN2MyNTAwYjY5YTY1NTY1NTFkNTIyMTM5M2Y", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-08-30T14:43:45Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-08-30T14:43:45Z"}, "message": "vect: Tighten get_related_vectype_for_scalar_type\n\nBuilds of glibc with SVE enabled have been failing since V1DI was added\nto the aarch64 port.  The problem is that BB SLP starts the (hopeless)\nattempt to use variable-length modes to vectorise a single-element\nvector, and that now gets further than it did before.\n\nInitially we tried getting a vector mode with 1 + 1X DI elements\n(i.e. 1 DI per 128-bit vector chunk).  We don't provide such a mode --\nit would be VNx1DI -- because it isn't a native SVE format.  We then\ntry just 1 DI, which previously failed but now succeeds.\n\nThere are numerous ways we could fix this.  Perhaps the most obvious\nwould be to skip variable-length modes for BB SLP.  However, I think\nthat'd just be kicking the can down the road, since eventually we want\nto support BB SLP and VLA vectors using predication.\n\nHowever, if we do use VLA vectors for BB SLP, the vector modes\nwe use should actually be variable length.  We don't want to use\nvariable-length vectors for some element types/group sizes and\nfixed-length vectors for others, since it would be difficult\nto handle the seams.\n\nThe same principle applies during loop vectorisation.  We can't\nuse a mixture of variable-length and fixed-length vectors for\nthe same loop because the relative unroll/vectorisation factors\nwould not be constant (compile-time) multiples of each other.\n\nThis patch therefore makes get_related_vectype_for_scalar_type\ncheck that the provided number of units is interoperable with\nthe provided prevailing mode.  The function is generally quite\nforgiving -- it does basic things like checking for scalarness\nitself rather than expecting callers to do them -- so the new\ncheck feels in keeping with that.\n\nThis seems to subsume the fix for PR96974.  I'm not sure it's\nworth reverting that code to an assert though, so the patch just\ndrops the scan for the associated message.\n\ngcc/\n\t* tree-vect-stmts.cc (get_related_vectype_for_scalar_type): Check\n\tthat the requested number of units is interoperable with the requested\n\tprevailing mode.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/slp_15.c: New test.\n\t* g++.target/aarch64/sve/pr96974.C: Remove scan test.", "tree": {"sha": "20cd901ffe43bcbd4cb2b1464a55d693b1e12934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20cd901ffe43bcbd4cb2b1464a55d693b1e12934"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25c2a50cc343eb7c2500b69a6556551d5221393f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c2a50cc343eb7c2500b69a6556551d5221393f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25c2a50cc343eb7c2500b69a6556551d5221393f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c2a50cc343eb7c2500b69a6556551d5221393f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c92f895e0b92b8057b84f8584873258760d227b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c92f895e0b92b8057b84f8584873258760d227b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c92f895e0b92b8057b84f8584873258760d227b"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "2f6ebd6ce3dd8626f5e666edba77d2c925739b7d", "filename": "gcc/testsuite/g++.target/aarch64/sve/pr96974.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c2a50cc343eb7c2500b69a6556551d5221393f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr96974.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c2a50cc343eb7c2500b69a6556551d5221393f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr96974.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr96974.C?ref=25c2a50cc343eb7c2500b69a6556551d5221393f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -march=armv8.2-a+sve -fdisable-tree-fre4 -fdump-tree-slp-details\" } */\n+/* { dg-options \"-Ofast -march=armv8.2-a+sve -fdisable-tree-fre4\" } */\n \n float a;\n int\n@@ -14,5 +14,3 @@ struct c {\n     }\n     int coeffs[10];\n } f;\n-\n-/* { dg-final { scan-tree-dump \"Not vectorized: Incompatible number of vector subparts between\" \"slp1\" { target lp64 } } } */"}, {"sha": "23f6d567cc515151f565176cc2b0ece701607332", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_15.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c2a50cc343eb7c2500b69a6556551d5221393f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c2a50cc343eb7c2500b69a6556551d5221393f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_15.c?ref=25c2a50cc343eb7c2500b69a6556551d5221393f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+struct foo\n+{\n+  void *handle;\n+  void *arg;\n+};\n+\n+void\n+dlinfo_doit (struct foo *args)\n+{\n+  __UINTPTR_TYPE__ **l = args->handle;\n+\n+  *(__UINTPTR_TYPE__ *) args->arg = 0;\n+  *(__UINTPTR_TYPE__ *) args->arg = **l;\n+}"}, {"sha": "7748c42c70f2f15898e3c8fedaf6944c99dfb041", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c2a50cc343eb7c2500b69a6556551d5221393f/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c2a50cc343eb7c2500b69a6556551d5221393f/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=25c2a50cc343eb7c2500b69a6556551d5221393f", "patch": "@@ -11486,6 +11486,16 @@ get_related_vectype_for_scalar_type (machine_mode prevailing_mode,\n \n   unsigned int nbytes = GET_MODE_SIZE (inner_mode);\n \n+  /* Interoperability between modes requires one to be a constant multiple\n+     of the other, so that the number of vectors required for each operation\n+     is a compile-time constant.  */\n+  if (prevailing_mode != VOIDmode\n+      && !constant_multiple_p (nunits * nbytes,\n+\t\t\t       GET_MODE_SIZE (prevailing_mode))\n+      && !constant_multiple_p (GET_MODE_SIZE (prevailing_mode),\n+\t\t\t       nunits * nbytes))\n+    return NULL_TREE;\n+\n   /* For vector types of elements whose mode precision doesn't\n      match their types precision we use a element type of mode\n      precision.  The vectorization routines will have to make sure"}]}