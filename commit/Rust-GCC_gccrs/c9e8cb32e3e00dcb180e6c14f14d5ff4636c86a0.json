{"sha": "c9e8cb32e3e00dcb180e6c14f14d5ff4636c86a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzllOGNiMzJlM2UwMGRjYjE4MGU2YzE0ZjE0ZDVmZjQ2MzZjODZhMA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2001-11-02T21:53:25Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-11-02T21:53:25Z"}, "message": "rs6000.c (rs6000_emit_move): Make sure that using FP registers for DImode mem-mem moves is acceptable.\n\n* config/rs6000/rs6000.c (rs6000_emit_move): Make sure that\nusing FP registers for DImode mem-mem moves is acceptable.\n\nFrom-SVN: r46720", "tree": {"sha": "aa0415c691f7154d235d076579f4f4ea69a7498d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa0415c691f7154d235d076579f4f4ea69a7498d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9e8cb32e3e00dcb180e6c14f14d5ff4636c86a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9e8cb32e3e00dcb180e6c14f14d5ff4636c86a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9e8cb32e3e00dcb180e6c14f14d5ff4636c86a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9e8cb32e3e00dcb180e6c14f14d5ff4636c86a0/comments", "author": null, "committer": null, "parents": [{"sha": "720ea9b169cada73072e99439211678c49804836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/720ea9b169cada73072e99439211678c49804836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/720ea9b169cada73072e99439211678c49804836"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "c2c619f3d3c9a9003113da94569868e15209b7fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e8cb32e3e00dcb180e6c14f14d5ff4636c86a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e8cb32e3e00dcb180e6c14f14d5ff4636c86a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9e8cb32e3e00dcb180e6c14f14d5ff4636c86a0", "patch": "@@ -1,3 +1,8 @@\n+2001-11-02  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Make sure that\n+\tusing FP registers for DImode mem-mem moves is acceptable.\n+\n 2001-11-02  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* builtins.c (apply_args_size): Handle vector arguments."}, {"sha": "f10cef5aee846bea7e9fbd4671cc2c29e14fbfcb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e8cb32e3e00dcb180e6c14f14d5ff4636c86a0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e8cb32e3e00dcb180e6c14f14d5ff4636c86a0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c9e8cb32e3e00dcb180e6c14f14d5ff4636c86a0", "patch": "@@ -1805,6 +1805,25 @@ rs6000_emit_move (dest, source, mode)\n \t  || (CONST_DOUBLE_HIGH (operands[1]) == -1\n \t      && CONST_DOUBLE_LOW (operands[1]) < 0)))\n     abort ();\n+\n+  /* Check if GCC is setting up a block move that will end up using FP\n+     registers as temporaries.  We must make sure this is acceptable.  */\n+  if (GET_CODE (operands[0]) == MEM\n+      && GET_CODE (operands[1]) == MEM\n+      && mode == DImode\n+      && ! TARGET_POWERPC64\n+      && (SLOW_UNALIGNED_ACCESS(DImode, MEM_ALIGN(operands[0]))\n+\t  || SLOW_UNALIGNED_ACCESS(DImode, MEM_ALIGN(operands[1]))))\n+    {\n+      rtx reg1, reg2;\n+      reg1 = gen_reg_rtx(SImode);\n+      reg2 = gen_reg_rtx(SImode);\n+      rs6000_emit_move (reg1, simplify_subreg (SImode, operands[1], DImode, 0), SImode);\n+      rs6000_emit_move (reg2, simplify_subreg (SImode, operands[1], DImode, 4), SImode);\n+      rs6000_emit_move (simplify_subreg (SImode, operands[0], DImode, 0), reg1, SImode);\n+      rs6000_emit_move (simplify_subreg (SImode, operands[0], DImode, 4), reg2, SImode);\n+      return;\n+    }\n   \n   if (! no_new_pseudos && GET_CODE (operands[0]) != REG)\n     operands[1] = force_reg (mode, operands[1]);"}]}