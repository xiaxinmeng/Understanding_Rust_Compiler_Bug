{"sha": "ea182fe63634bb5b7913b3f1b6846e1900c5e0c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWExODJmZTYzNjM0YmI1Yjc5MTNiM2YxYjY4NDZlMTkwMGM1ZTBjNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-09T23:22:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-09T23:22:57Z"}, "message": "libstdc++: Handle type-changing path concatenations (PR 94063)\n\nThe filesystem::path::operator+= and filesystem::path::concat functions\noperate directly on the native format of the path and so can cause a\npath to mutate to a completely different type.\n\nFor Windows combining a filename \"x\" with a filename \":\" produces a\nroot-name \"x:\". Similarly, a Cygwin root-directory \"/\" combined with a\nroot-directory and filename \"/x\" produces a root-name \"//x\".\n\nBefore this patch the implemenation didn't support those kind of\nmutations, assuming that concatenating two filenames would always\nproduce a filename and concatenating with a root-dir would still have a\nroot-dir.\n\nThis patch fixes it simply by checking for the problem cases and\ncreating a new path by re-parsing the result of the string\nconcatenation. This is slightly suboptimal because the argument has\nalready been parsed if it's a path, but more importantly it doesn't\nreuse any excess capacity that the path object being modified might\nalready have allocated. That can be fixed later though.\n\n\tPR libstdc++/94063\n\t* src/c++17/fs_path.cc (path::operator+=(const path&)): Add kluge to\n\thandle concatenations that change the type of the first component.\n\t(path::operator+=(basic_string_view<value_type>)): Likewise.\n\t* testsuite/27_io/filesystem/path/concat/94063.cc: New test.", "tree": {"sha": "038fadb07c156fa32263ca3f5d6b5a8b2fc89ce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/038fadb07c156fa32263ca3f5d6b5a8b2fc89ce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea182fe63634bb5b7913b3f1b6846e1900c5e0c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea182fe63634bb5b7913b3f1b6846e1900c5e0c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea182fe63634bb5b7913b3f1b6846e1900c5e0c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea182fe63634bb5b7913b3f1b6846e1900c5e0c4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81fa6d7321dd9b645d86de4a8a6967c603f176e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fa6d7321dd9b645d86de4a8a6967c603f176e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81fa6d7321dd9b645d86de4a8a6967c603f176e3"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "be382dc4e6399a5c25501f666fe0c8e583e9ec79", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea182fe63634bb5b7913b3f1b6846e1900c5e0c4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea182fe63634bb5b7913b3f1b6846e1900c5e0c4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ea182fe63634bb5b7913b3f1b6846e1900c5e0c4", "patch": "@@ -1,3 +1,11 @@\n+2020-03-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94063\n+\t* src/c++17/fs_path.cc (path::operator+=(const path&)): Add kluge to\n+\thandle concatenations that change the type of the first component.\n+\t(path::operator+=(basic_string_view<value_type>)): Likewise.\n+\t* testsuite/27_io/filesystem/path/concat/94063.cc: New test.\n+\n 2020-03-06  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/ranges (join_view::_Sentinel<_Const>): Befriend"}, {"sha": "5ff17741f81a1095727015165f66195e9e9db09c", "filename": "libstdc++-v3/src/c++17/fs_path.cc", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea182fe63634bb5b7913b3f1b6846e1900c5e0c4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea182fe63634bb5b7913b3f1b6846e1900c5e0c4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc?ref=ea182fe63634bb5b7913b3f1b6846e1900c5e0c4", "patch": "@@ -852,6 +852,26 @@ path::operator+=(const path& p)\n       return *this;\n     }\n \n+#if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  if (_M_type() == _Type::_Root_name\n+      || (_M_type() == _Type::_Filename && _M_pathname.size() == 1))\n+    {\n+      // Handle path(\"C\") += path(\":\") and path(\"C:\") += path(\"/x\")\n+      // FIXME: do this more efficiently\n+      *this = path(_M_pathname + p._M_pathname);\n+      return *this;\n+    }\n+#endif\n+#if SLASHSLASH_IS_ROOTNAME\n+  if (_M_type() == _Type::_Root_dir)\n+    {\n+      // Handle path(\"/\") += path(\"/x\") and path(\"//\") += path(\"x\")\n+      // FIXME: do this more efficiently\n+      *this = path(_M_pathname + p._M_pathname);\n+      return *this;\n+    }\n+#endif\n+\n   const auto orig_pathlen = _M_pathname.length();\n   const auto orig_type = _M_type();\n   const auto orig_size = _M_cmpts.size();\n@@ -1038,6 +1058,26 @@ path::_M_concat(basic_string_view<value_type> s)\n       return;\n     }\n \n+#if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  if (_M_type() == _Type::_Root_name\n+      || (_M_type() == _Type::_Filename && _M_pathname.size() == 1))\n+    {\n+      // Handle path(\"C\") += \":\" and path(\"C:\") += \"/x\"\n+      // FIXME: do this more efficiently\n+      *this = path(_M_pathname + string_type(s));\n+      return;\n+    }\n+#endif\n+#if SLASHSLASH_IS_ROOTNAME\n+  if (_M_type() == _Type::_Root_dir)\n+    {\n+      // Handle path(\"/\") += \"/x\" and path(\"//\") += \"x\"\n+      // FIXME: do this more efficiently\n+      *this = path(_M_pathname + string_type(s));\n+      return;\n+    }\n+#endif\n+\n   const auto orig_pathlen = _M_pathname.length();\n   const auto orig_type = _M_type();\n   const auto orig_size = _M_cmpts.size();"}, {"sha": "9f4c9c0aa085cbf87ec659bc5e79a6199bee6ae1", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/concat/94063.cc", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea182fe63634bb5b7913b3f1b6846e1900c5e0c4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2F94063.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea182fe63634bb5b7913b3f1b6846e1900c5e0c4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2F94063.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2F94063.cc?ref=ea182fe63634bb5b7913b3f1b6846e1900c5e0c4", "patch": "@@ -0,0 +1,111 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target { *-*-*mingw* || *-*-cygwin } } }\n+// { dg-require-effective-target c++17 }\n+\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using std::filesystem::path;\n+  path p;\n+\n+  // PR libstdc++/94063\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  p = L\"C\";\n+  p += path(L\":\");\n+  VERIFY( p.has_root_name() );\n+  VERIFY( p.root_name() == p );\n+  p += path(L\"\\\\\");\n+  VERIFY( p.has_root_name() );\n+  VERIFY( p.has_root_directory() );\n+  VERIFY( p.root_name() == L\"C:\" );\n+  VERIFY( p.root_directory() == L\"\\\\\" );\n+\n+  p = L\"C\";\n+  p += L':';\n+  VERIFY( p.has_root_name() );\n+  VERIFY( p.root_name() == p );\n+  p += L'\\\\';\n+  VERIFY( p.has_root_name() );\n+  VERIFY( p.has_root_directory() );\n+  VERIFY( p.root_name() == L\"C:\" );\n+  VERIFY( p.root_directory() == L\"\\\\\" );\n+\n+  p = L\"C:\";\n+  p += path(L\"/foo\");\n+  VERIFY( p.has_root_name() );\n+  VERIFY( p.has_root_directory() );\n+  VERIFY( p.root_name() == L\"C:\" );\n+  VERIFY( p.root_directory() == L\"/\" );\n+  VERIFY( p.filename() == L\"foo\" );\n+\n+  p = L\"C:\";\n+  p += L\"/foo\";\n+  VERIFY( p.has_root_name() );\n+  VERIFY( p.has_root_directory() );\n+  VERIFY( p.root_name() == L\"C:\" );\n+  VERIFY( p.root_directory() == L\"/\" );\n+  VERIFY( p.filename() == L\"foo\" );\n+\n+  p = L\"C\";\n+  p += path(L\":/foo\");\n+  VERIFY( p.has_root_name() );\n+  VERIFY( p.has_root_directory() );\n+  VERIFY( p.root_name() == L\"C:\" );\n+  VERIFY( p.root_directory() == L\"/\" );\n+  VERIFY( p.filename() == L\"foo\" );\n+\n+  p = L\"C\";\n+  p += L\":/foo\";\n+  VERIFY( p.has_root_name() );\n+  VERIFY( p.has_root_directory() );\n+  VERIFY( p.root_name() == L\"C:\" );\n+  VERIFY( p.root_directory() == L\"/\" );\n+  VERIFY( p.filename() == L\"foo\" );\n+#elif defined __CYGWIN__\n+  p = \"/\";\n+  p += path(\"/x\");\n+  VERIFY( p.has_root_name() );\n+  VERIFY( p.root_name() == p );\n+\n+  p = \"/\";\n+  p += \"/x\";\n+  VERIFY( p.has_root_name() );\n+  VERIFY( p.root_name() == p );\n+\n+  p = \"/\";\n+  p += path(\"/\");\n+  VERIFY( !p.has_root_name() );\n+  VERIFY( p.has_root_directory() );\n+\n+  p = \"/\";\n+  p += \"/\";\n+  VERIFY( !p.has_root_name() );\n+  VERIFY( p.has_root_directory() );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}