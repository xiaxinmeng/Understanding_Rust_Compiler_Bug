{"sha": "fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5YWI3YjRjMGMxYjU0NDA3ZDNhZDRmMzIxOTAxNGM2ZjVlMzQxNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-08-06T12:25:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-08-06T12:25:00Z"}, "message": "acinclude.m4 ([GLIBCXX_CHECK_INT64_T]): Also check whether int64_t is actually a typedef to long or long long.\n\n2008-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* acinclude.m4 ([GLIBCXX_CHECK_INT64_T]): Also check whether int64_t\n\tis actually a typedef to long or long long.\n\t* include/bits/postypes.h: If int64_t is actually a typedef for\n\tlong or long long don't include <stdint.h> unnecessarily.\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\nFrom-SVN: r138797", "tree": {"sha": "c017003f10aa30deb666f6a595b74f5885f3917e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c017003f10aa30deb666f6a595b74f5885f3917e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414/comments", "author": null, "committer": null, "parents": [{"sha": "753b34d777ee581aeb7efba828f8a509abe7e899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/753b34d777ee581aeb7efba828f8a509abe7e899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/753b34d777ee581aeb7efba828f8a509abe7e899"}], "stats": {"total": 224, "additions": 218, "deletions": 6}, "files": [{"sha": "8d81860ee7492cd2114fa44af5b3c626e7d4043f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414", "patch": "@@ -1,3 +1,12 @@\n+008-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* acinclude.m4 ([GLIBCXX_CHECK_INT64_T]): Also check whether int64_t\n+\tis actually a typedef to long or long long.\n+\t* include/bits/postypes.h: If int64_t is actually a typedef for\n+\tlong or long long don't include <stdint.h> unnecessarily.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\t\n 2008-08-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/util/testsuite_api.h (diamond_derivation<>::test):"}, {"sha": "50f207c238265eb49b533991f785370387c029dc", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414", "patch": "@@ -466,8 +466,13 @@ AC_DEFUN([GLIBCXX_CHECK_WRITEV], [\n \n dnl\n dnl Check whether int64_t is available in <stdint.h>, and define HAVE_INT64_T.\n+dnl Also check whether int64_t is actually a typedef to long or long long.\n dnl\n AC_DEFUN([GLIBCXX_CHECK_INT64_T], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+\n   AC_MSG_CHECKING([for int64_t])\n   AC_CACHE_VAL(glibcxx_cv_INT64_T, [\n     AC_TRY_COMPILE(\n@@ -476,10 +481,43 @@ AC_DEFUN([GLIBCXX_CHECK_INT64_T], [\n       [glibcxx_cv_INT64_T=yes],\n       [glibcxx_cv_INT64_T=no])\n   ])\n+\n   if test $glibcxx_cv_INT64_T = yes; then\n     AC_DEFINE(HAVE_INT64_T, 1, [Define if int64_t is available in <stdint.h>.])\n+    AC_MSG_RESULT($glibcxx_cv_INT64_T)\n+\n+    AC_MSG_CHECKING([for int64_t as long])\n+    AC_CACHE_VAL(glibcxx_cv_int64_t_long, [\n+      AC_TRY_COMPILE(\n+        [#include <stdint.h>\n+        template<typename, typename> struct same { enum { value = -1 }; };\n+        template<typename Tp> struct same<Tp, Tp> { enum { value = 1 }; };\n+        int array[same<int64_t, long>::value];], [],\n+\t[glibcxx_cv_int64_t_long=yes], [glibcxx_cv_int64_t_long=no])\n+    ])\n+\n+    if test $glibcxx_cv_int64_t_long = yes; then\n+      AC_DEFINE(HAVE_INT64_T_LONG, 1, [Define if int64_t is a long.])\n+      AC_MSG_RESULT($glibcxx_cv_int64_t_long)\n+    fi\n+\n+    AC_MSG_CHECKING([for int64_t as long long])\n+    AC_CACHE_VAL(glibcxx_cv_int64_t_long_long, [\n+      AC_TRY_COMPILE(\n+        [#include <stdint.h>\n+        template<typename, typename> struct same { enum { value = -1 }; };\n+        template<typename Tp> struct same<Tp, Tp> { enum { value = 1 }; };\n+        int array[same<int64_t, long long>::value];], [],\n+\t[glibcxx_cv_int64_t_long_long=yes], [glibcxx_cv_int64_t_long_long=no])\n+    ])\n+\n+    if test $glibcxx_cv_int64_t_long_long = yes; then\n+      AC_DEFINE(HAVE_INT64_T_LONG_LONG, 1, [Define if int64_t is a long long.])\n+      AC_MSG_RESULT($glibcxx_cv_int64_t_long_long)\n+    fi\n   fi\n-  AC_MSG_RESULT($glibcxx_cv_INT64_T)\n+\n+  AC_LANG_RESTORE\n ])\n \n "}, {"sha": "438fe1488c4789aa4d54af4a6960444d4db3d437", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414", "patch": "@@ -184,6 +184,12 @@\n /* Define if int64_t is available in <stdint.h>. */\n #undef HAVE_INT64_T\n \n+/* Define if int64_t is a long. */\n+#undef HAVE_INT64_T_LONG\n+\n+/* Define if int64_t is a long long. */\n+#undef HAVE_INT64_T_LONG_LONG\n+\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n "}, {"sha": "5fb310780a641749d70a937f831eaf9aec4a7b54", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 157, "deletions": 3, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414", "patch": "@@ -39677,6 +39677,16 @@ echo \"${ECHO_T}$glibcxx_cv_WRITEV\" >&6\n \n   # For the __streamoff_base_type typedef.\n \n+\n+\n+\n+  ac_ext=cc\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+\n   echo \"$as_me:$LINENO: checking for int64_t\" >&5\n echo $ECHO_N \"checking for int64_t... $ECHO_C\" >&6\n   if test \"${glibcxx_cv_INT64_T+set}\" = set; then\n@@ -39707,7 +39717,7 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n \t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n@@ -39731,16 +39741,160 @@ rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n \n fi\n \n+\n   if test $glibcxx_cv_INT64_T = yes; then\n \n cat >>confdefs.h <<\\_ACEOF\n #define HAVE_INT64_T 1\n _ACEOF\n \n-  fi\n-  echo \"$as_me:$LINENO: result: $glibcxx_cv_INT64_T\" >&5\n+    echo \"$as_me:$LINENO: result: $glibcxx_cv_INT64_T\" >&5\n echo \"${ECHO_T}$glibcxx_cv_INT64_T\" >&6\n \n+    echo \"$as_me:$LINENO: checking for int64_t as long\" >&5\n+echo $ECHO_N \"checking for int64_t as long... $ECHO_C\" >&6\n+    if test \"${glibcxx_cv_int64_t_long+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+      cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <stdint.h>\n+        template<typename, typename> struct same { enum { value = -1 }; };\n+        template<typename Tp> struct same<Tp, Tp> { enum { value = 1 }; };\n+        int array[same<int64_t, long>::value];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  glibcxx_cv_int64_t_long=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+glibcxx_cv_int64_t_long=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+\n+    if test $glibcxx_cv_int64_t_long = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_INT64_T_LONG 1\n+_ACEOF\n+\n+      echo \"$as_me:$LINENO: result: $glibcxx_cv_int64_t_long\" >&5\n+echo \"${ECHO_T}$glibcxx_cv_int64_t_long\" >&6\n+    fi\n+\n+    echo \"$as_me:$LINENO: checking for int64_t as long long\" >&5\n+echo $ECHO_N \"checking for int64_t as long long... $ECHO_C\" >&6\n+    if test \"${glibcxx_cv_int64_t_long_long+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+      cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <stdint.h>\n+        template<typename, typename> struct same { enum { value = -1 }; };\n+        template<typename Tp> struct same<Tp, Tp> { enum { value = 1 }; };\n+        int array[same<int64_t, long long>::value];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  glibcxx_cv_int64_t_long_long=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+glibcxx_cv_int64_t_long_long=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+\n+    if test $glibcxx_cv_int64_t_long_long = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_INT64_T_LONG_LONG 1\n+_ACEOF\n+\n+      echo \"$as_me:$LINENO: result: $glibcxx_cv_int64_t_long_long\" >&5\n+echo \"${ECHO_T}$glibcxx_cv_int64_t_long_long\" >&6\n+    fi\n+  fi\n+\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n \n   # For LFS support.\n "}, {"sha": "1bc972af18738ee3fdd0861d6facb143a3b99e97", "filename": "libstdc++-v3/include/bits/postypes.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h?ref=fc9ab7b4c0c1b54407d3ad4f3219014c6f5e3414", "patch": "@@ -49,7 +49,8 @@\n // XXX If <stdint.h> is really needed, make sure to define the macros,\n // in order not to break <tr1/cstdint> (and <cstdint> in C++0x).\n // Reconsider all this as soon as possible...\n-#ifdef _GLIBCXX_HAVE_INT64_T\n+#if (defined(_GLIBCXX_HAVE_INT64_T) && !defined(_GLIBCXX_HAVE_INT64_T_LONG) \\\n+     && !defined(_GLIBCXX_HAVE_INT64_T_LONG_LONG))\n #ifndef __STDC_LIMIT_MACROS\n # define __STDC_LIMIT_MACROS\n #endif\n@@ -76,7 +77,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  Note: In versions of GCC up to and including GCC 3.3, streamoff\n    *  was typedef long.\n   */  \n-#ifdef _GLIBCXX_HAVE_INT64_T\n+#ifdef _GLIBCXX_HAVE_INT64_T_LONG\n+  typedef long          streamoff;\n+#elif defined(_GLIBCXX_HAVE_INT64_T_LONG_LONG)\n+  typedef long long     streamoff;\n+#elif defined(_GLIBCXX_HAVE_INT64_T) \n   typedef int64_t       streamoff;\n #else\n   typedef long long     streamoff;"}]}