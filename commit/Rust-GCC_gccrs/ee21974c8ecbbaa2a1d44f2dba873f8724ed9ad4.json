{"sha": "ee21974c8ecbbaa2a1d44f2dba873f8724ed9ad4", "node_id": "C_kwDOANBUbNoAKGVlMjE5NzRjOGVjYmJhYTJhMWQ0NGYyZGJhODczZjg3MjRlZDlhZDQ", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-05-31T14:56:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-06-01T14:29:33Z"}, "message": "c++: Make static init generation more consistent\n\nThe end-of-compilation static init code generation functions are:\n\n* Inconsistent in argument ordering (swapping 'is-init' and 'priority',\n  wrt each other and other arguments).\n\n* Inconsistent in naming. mostly calling the is-init argument 'initp',\n  but sometimes calling it 'constructor_p' and in the worst case using\n  a transcoded 'methody_type' character, and naming the priority\n  argument 'initp'.\n\n* Inconsistent in typing.  Sometimes the priority is unsigned,\n  sometimes signed.  And the initp argument can of course be a bool.\n\n* Several of the function comments have bit-rotted.\n\nThis addresses those oddities.  Name is-init 'initp', name priority\n'priority'.  Place initp first, make priority unsigned.\n\n\tgcc/cp/\n\t* decl2.cc (start_objects): Replace 'method_type' parameter\n\twith 'initp' boolean, rename and retype 'priority' parameter.\n\t(finish_objects): Likewise.  Do not expand here.\n\t(one_static_initialization_or_destruction): Move 'initp'\n\tparameter first.\n\t(do_static_initialization_or_destruction): Likewise.\n\t(generate_ctor_or_dtor_function): Rename 'initp' parameter.\n\tAdjust start_objects/finish_obects calls and expand here.\n\t(generate_ctor_and_dtor_functions_for_priority): Adjust calls.\n\t(c_parse_final_cleanups): Likewise.\n\t(vtv_start_verification_constructor_init): Adjust.\n\t(vtv_finish_verification_constructor_init): Use finish_objects.", "tree": {"sha": "8d40950b3ea66b946070d7192eab84e388c7fff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d40950b3ea66b946070d7192eab84e388c7fff0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee21974c8ecbbaa2a1d44f2dba873f8724ed9ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee21974c8ecbbaa2a1d44f2dba873f8724ed9ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee21974c8ecbbaa2a1d44f2dba873f8724ed9ad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee21974c8ecbbaa2a1d44f2dba873f8724ed9ad4/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57a8fb92ac4161ebbf9381b009e8c5af843e3e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a8fb92ac4161ebbf9381b009e8c5af843e3e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a8fb92ac4161ebbf9381b009e8c5af843e3e5f"}], "stats": {"total": 92, "additions": 39, "deletions": 53}, "files": [{"sha": "17e5877ddba1037374ee99bec01509e01830ad15", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 39, "deletions": 53, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee21974c8ecbbaa2a1d44f2dba873f8724ed9ad4/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee21974c8ecbbaa2a1d44f2dba873f8724ed9ad4/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=ee21974c8ecbbaa2a1d44f2dba873f8724ed9ad4", "patch": "@@ -66,14 +66,14 @@ typedef struct priority_info_s {\n   int destructions_p;\n } *priority_info;\n \n-static tree start_objects (int, int);\n-static void finish_objects (int, int, tree);\n+static tree start_objects (bool, unsigned);\n+static tree finish_objects (bool, unsigned, tree);\n static tree start_static_storage_duration_function (unsigned);\n static void finish_static_storage_duration_function (tree);\n static priority_info get_priority_info (int);\n-static void do_static_initialization_or_destruction (tree, bool);\n-static void one_static_initialization_or_destruction (tree, tree, bool);\n-static void generate_ctor_or_dtor_function (bool, int, location_t *);\n+static void do_static_initialization_or_destruction (bool, tree);\n+static void one_static_initialization_or_destruction (bool, tree, tree);\n+static void generate_ctor_or_dtor_function (bool, unsigned, location_t *);\n static int generate_ctor_and_dtor_functions_for_priority (splay_tree_node,\n \t\t\t\t\t\t\t  void *);\n static tree prune_vars_needing_no_initialization (tree *);\n@@ -3813,17 +3813,14 @@ generate_tls_wrapper (tree fn)\n   expand_or_defer_fn (finish_function (/*inline_p=*/false));\n }\n \n-/* Start the process of running a particular set of global constructors\n-   or destructors.  Subroutine of do_[cd]tors.  Also called from\n-   vtv_start_verification_constructor_init_function.  */\n+/* Start a global constructor or destructor function.  */\n \n static tree\n-start_objects (int method_type, int initp)\n+start_objects (bool initp, unsigned priority)\n {\n-  /* Make ctor or dtor function.  METHOD_TYPE may be 'I' or 'D'.  */\n   int module_init = 0;\n \n-  if (initp == DEFAULT_INIT_PRIORITY && method_type == 'I')\n+  if (priority == DEFAULT_INIT_PRIORITY && initp)\n     module_init = module_initializer_kind ();\n \n   tree name = NULL_TREE;\n@@ -3833,15 +3830,17 @@ start_objects (int method_type, int initp)\n     {\n       char type[14];\n \n-      unsigned len = sprintf (type, \"sub_%c\", method_type);\n-      if (initp != DEFAULT_INIT_PRIORITY)\n+      /* We use `I' to indicate initialization and `D' to indicate\n+\t destruction.  */\n+      unsigned len = sprintf (type, \"sub_%c\", initp ? 'I' : 'D');\n+      if (priority != DEFAULT_INIT_PRIORITY)\n \t{\n \t  char joiner = '_';\n #ifdef JOINER\n \t  joiner = JOINER;\n #endif\n \t  type[len++] = joiner;\n-\t  sprintf (type + len, \"%.5u\", initp);\n+\t  sprintf (type + len, \"%.5u\", priority);\n \t}\n       name = get_file_function_name (type);\n     }\n@@ -3867,7 +3866,7 @@ start_objects (int method_type, int initp)\n   TREE_USED (current_function_decl) = 1;\n \n   /* Mark this function as a global constructor or destructor.  */\n-  if (method_type == 'I')\n+  if (initp)\n     DECL_GLOBAL_CTOR_P (current_function_decl) = 1;\n   else\n     DECL_GLOBAL_DTOR_P (current_function_decl) = 1;\n@@ -3905,28 +3904,27 @@ start_objects (int method_type, int initp)\n   return body;\n }\n \n-/* Finish the process of running a particular set of global constructors\n-   or destructors.  Subroutine of do_[cd]tors.  */\n+/* Finish a global constructor or destructor.  */\n \n-static void\n-finish_objects (int method_type, int initp, tree body)\n+static tree\n+finish_objects (bool initp, unsigned priority, tree body)\n {\n   /* Finish up.  */\n   finish_compound_stmt (body);\n   tree fn = finish_function (/*inline_p=*/false);\n \n-  if (method_type == 'I')\n+  if (initp)\n     {\n       DECL_STATIC_CONSTRUCTOR (fn) = 1;\n-      decl_init_priority_insert (fn, initp);\n+      decl_init_priority_insert (fn, priority);\n     }\n   else\n     {\n       DECL_STATIC_DESTRUCTOR (fn) = 1;\n-      decl_fini_priority_insert (fn, initp);\n+      decl_fini_priority_insert (fn, priority);\n     }\n \n-  expand_or_defer_fn (fn);\n+  return fn;\n }\n \n /* The names of the parameters to the function created to handle\n@@ -4135,7 +4133,7 @@ fix_temporary_vars_context_r (tree *node,\n    are destroying it.  */\n \n static void\n-one_static_initialization_or_destruction (tree decl, tree init, bool initp)\n+one_static_initialization_or_destruction (bool initp, tree decl, tree init)\n {\n   tree guard_if_stmt = NULL_TREE;\n   tree guard;\n@@ -4282,7 +4280,7 @@ one_static_initialization_or_destruction (tree decl, tree init, bool initp)\n    Whether initialization or destruction is performed is specified by INITP.  */\n \n static void\n-do_static_initialization_or_destruction (tree vars, bool initp)\n+do_static_initialization_or_destruction (bool initp, tree vars)\n {\n   tree node, init_if_stmt, cond;\n \n@@ -4345,8 +4343,8 @@ do_static_initialization_or_destruction (tree vars, bool initp)\n \t   && DECL_EFFECTIVE_INIT_PRIORITY (TREE_VALUE (node)) == priority;\n \t node = TREE_CHAIN (node))\n       /* Do one initialization or destruction.  */\n-      one_static_initialization_or_destruction (TREE_VALUE (node),\n-\t\t\t\t\t\tTREE_PURPOSE (node), initp);\n+      one_static_initialization_or_destruction (initp, TREE_VALUE (node),\n+\t\t\t\t\t\tTREE_PURPOSE (node));\n \n     /* Finish up the priority if-stmt body.  */\n     finish_then_clause (priority_if_stmt);\n@@ -4445,27 +4443,22 @@ write_out_vars (tree vars)\n    storage duration having the indicated PRIORITY.  */\n \n static void\n-generate_ctor_or_dtor_function (bool constructor_p, int priority,\n-\t\t\t\tlocation_t *locus)\n+generate_ctor_or_dtor_function (bool initp, unsigned priority, location_t *locus)\n {\n   input_location = *locus;\n \n-  /* We use `I' to indicate initialization and `D' to indicate\n-     destruction.  */\n-  char function_key = constructor_p ? 'I' : 'D';\n-\n   /* We emit the function lazily, to avoid generating empty\n      global constructors and destructors.  */\n   tree body = NULL_TREE;\n \n-  if (constructor_p && priority == DEFAULT_INIT_PRIORITY)\n+  if (initp && priority == DEFAULT_INIT_PRIORITY)\n     {\n       bool objc = c_dialect_objc () && objc_static_init_needed_p ();\n \n       /* We may have module initialization to emit and/or insert\n \t before other intializations.  */\n       if (module_initializer_kind () || objc)\n-\tbody = start_objects (function_key, priority);\n+\tbody = start_objects (initp, priority);\n \n       /* For Objective-C++, we may need to initialize metadata found\n          in this module.  This must be done _before_ any other static\n@@ -4484,11 +4477,11 @@ generate_ctor_or_dtor_function (bool constructor_p, int priority,\n       if (! (flags_from_decl_or_type (fndecl) & (ECF_CONST | ECF_PURE)))\n \t{\n \t  if (! body)\n-\t    body = start_objects (function_key, priority);\n+\t    body = start_objects (initp, priority);\n \n \t  tree call = cp_build_function_call_nary (fndecl, tf_warning_or_error,\n \t\t\t\t\t\t   build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t\t\t  constructor_p),\n+\t\t\t\t\t\t\t\t  initp),\n \t\t\t\t\t\t   build_int_cst (NULL_TREE,\n \t\t\t\t\t\t\t\t  priority),\n \t\t\t\t\t\t   NULL_TREE);\n@@ -4498,7 +4491,7 @@ generate_ctor_or_dtor_function (bool constructor_p, int priority,\n \n   /* Close out the function.  */\n   if (body)\n-    finish_objects (function_key, priority, body);\n+    expand_or_defer_fn (finish_objects (initp, priority, body));\n }\n \n /* Generate constructor and destructor functions for the priority\n@@ -4514,9 +4507,9 @@ generate_ctor_and_dtor_functions_for_priority (splay_tree_node n, void * data)\n   /* Generate the functions themselves, but only if they are really\n      needed.  */\n   if (pi->initializations_p)\n-    generate_ctor_or_dtor_function (/*constructor_p=*/true, priority, locus);\n+    generate_ctor_or_dtor_function (/*initp=*/true, priority, locus);\n   if (pi->destructions_p)\n-    generate_ctor_or_dtor_function (/*constructor_p=*/false, priority, locus);\n+    generate_ctor_or_dtor_function (/*initp=*/false, priority, locus);\n \n   /* Keep iterating.  */\n   return 0;\n@@ -4800,7 +4793,7 @@ handle_tls_init (void)\n     {\n       tree var = TREE_VALUE (vars);\n       tree init = TREE_PURPOSE (vars);\n-      one_static_initialization_or_destruction (var, init, true);\n+      one_static_initialization_or_destruction (/*initp=*/true, var, init);\n \n       /* Output init aliases even with -fno-extern-tls-init.  */\n       if (TARGET_SUPPORTS_ALIASES && TREE_PUBLIC (var))\n@@ -5191,7 +5184,7 @@ c_parse_final_cleanups (void)\n \n \t  /* First generate code to do all the initializations.  */\n \t  if (vars)\n-\t    do_static_initialization_or_destruction (vars, /*initp=*/true);\n+\t    do_static_initialization_or_destruction (/*initp=*/true, vars);\n \n \t  /* Then, generate code to do all the destructions.  Do these\n \t     in reverse order so that the most recently constructed\n@@ -5202,7 +5195,7 @@ c_parse_final_cleanups (void)\n \t  if (!flag_use_cxa_atexit && vars)\n \t    {\n \t      vars = nreverse (vars);\n-\t      do_static_initialization_or_destruction (vars, /*initp=*/false);\n+\t      do_static_initialization_or_destruction (/*initp=*/false, vars);\n \t    }\n \t  else\n \t    vars = NULL_TREE;\n@@ -6038,20 +6031,13 @@ mark_used (tree decl)\n tree\n vtv_start_verification_constructor_init_function (void)\n {\n-  return start_objects ('I', MAX_RESERVED_INIT_PRIORITY - 1);\n+  return start_objects (/*initp=*/true, MAX_RESERVED_INIT_PRIORITY - 1);\n }\n \n tree\n-vtv_finish_verification_constructor_init_function (tree function_body)\n+vtv_finish_verification_constructor_init_function (tree body)\n {\n-  tree fn;\n-\n-  finish_compound_stmt (function_body);\n-  fn = finish_function (/*inline_p=*/false);\n-  DECL_STATIC_CONSTRUCTOR (fn) = 1;\n-  decl_init_priority_insert (fn, MAX_RESERVED_INIT_PRIORITY - 1);\n-\n-  return fn;\n+  return finish_objects (/*initp=*/true, MAX_RESERVED_INIT_PRIORITY - 1, body);\n }\n \n #include \"gt-cp-decl2.h\""}]}