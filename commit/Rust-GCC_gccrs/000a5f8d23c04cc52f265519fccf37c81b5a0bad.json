{"sha": "000a5f8d23c04cc52f265519fccf37c81b5a0bad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwYTVmOGQyM2MwNGNjNTJmMjY1NTE5ZmNjZjM3YzgxYjVhMGJhZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-02T10:10:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-09-02T10:10:23Z"}, "message": "re PR target/91323 (LTGT rtx produces UCOMISS instead of COMISS)\n\n\tPR target/91323\n\t* doc/generic.texi (LTGT_EXPR): Merge with other comparison operators.\n\t* rtl.def (LTGT): Likewise.  Add note about floating-point exceptions.\n\t* tree.def (LTGT_EXPR): Likewise.\n\t* config/sparc/sparc.c (select_cc_mode): Return CCFPEmode for LTGT.\n\nFrom-SVN: r275303", "tree": {"sha": "f8632068beccb97b70158fa5eb8381b41872c683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8632068beccb97b70158fa5eb8381b41872c683"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/000a5f8d23c04cc52f265519fccf37c81b5a0bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000a5f8d23c04cc52f265519fccf37c81b5a0bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000a5f8d23c04cc52f265519fccf37c81b5a0bad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000a5f8d23c04cc52f265519fccf37c81b5a0bad/comments", "author": null, "committer": null, "parents": [{"sha": "976f9aa1e8b30112c0932b761e815cafcc69641f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976f9aa1e8b30112c0932b761e815cafcc69641f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/976f9aa1e8b30112c0932b761e815cafcc69641f"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "25f8478ad983ffa6ae6e440cb3701c87a362130a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000a5f8d23c04cc52f265519fccf37c81b5a0bad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000a5f8d23c04cc52f265519fccf37c81b5a0bad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=000a5f8d23c04cc52f265519fccf37c81b5a0bad", "patch": "@@ -1,3 +1,11 @@\n+2019-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/91323\n+\t* doc/generic.texi (LTGT_EXPR): Merge with other comparison operators.\n+\t* rtl.def (LTGT): Likewise.  Add note about floating-point exceptions.\n+\t* tree.def (LTGT_EXPR): Likewise.\n+\t* config/sparc/sparc.c (select_cc_mode): Return CCFPEmode for LTGT.\n+\n 2019-09-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR go/91617"}, {"sha": "32767bc63de628836df45c87d365755a4f7f257a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000a5f8d23c04cc52f265519fccf37c81b5a0bad/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000a5f8d23c04cc52f265519fccf37c81b5a0bad/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=000a5f8d23c04cc52f265519fccf37c81b5a0bad", "patch": "@@ -3203,13 +3203,13 @@ select_cc_mode (enum rtx_code op, rtx x, rtx y)\n \tcase UNGT:\n \tcase UNGE:\n \tcase UNEQ:\n-\tcase LTGT:\n \t  return CCFPmode;\n \n \tcase LT:\n \tcase LE:\n \tcase GT:\n \tcase GE:\n+\tcase LTGT:\n \t  return CCFPEmode;\n \n \tdefault:"}, {"sha": "94e339c15ee86d60611b210df4111cc839730128", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000a5f8d23c04cc52f265519fccf37c81b5a0bad/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000a5f8d23c04cc52f265519fccf37c81b5a0bad/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=000a5f8d23c04cc52f265519fccf37c81b5a0bad", "patch": "@@ -1564,21 +1564,23 @@ allows the backend to choose between the faster of @code{TRUNC_DIV_EXPR},\n @itemx LE_EXPR\n @itemx GT_EXPR\n @itemx GE_EXPR\n+@itemx LTGT_EXPR\n @itemx EQ_EXPR\n @itemx NE_EXPR\n-These nodes represent the less than, less than or equal to, greater\n-than, greater than or equal to, equal, and not equal comparison\n-operators.  The first and second operands will either be both of integral\n-type, both of floating type or both of vector type.  The result type of\n-these expressions will always be of integral, boolean or signed integral\n-vector type.  These operations return the result type's zero value for\n-false, the result type's one value for true, and a vector whose elements\n-are zero (false) or minus one (true) for vectors.\n+These nodes represent the less than, less than or equal to, greater than,\n+greater than or equal to, less or greater than, equal, and not equal\n+comparison operators.  The first and second operands will either be both\n+of integral type, both of floating type or both of vector type, except for\n+LTGT_EXPR where they will only be both of floating type.  The result type\n+of these expressions will always be of integral, boolean or signed integral\n+vector type.  These operations return the result type's zero value for false,\n+the result type's one value for true, and a vector whose elements are zero\n+(false) or minus one (true) for vectors.\n \n For floating point comparisons, if we honor IEEE NaNs and either operand\n is NaN, then @code{NE_EXPR} always returns true and the remaining operators\n always return false.  On some targets, comparisons against an IEEE NaN,\n-other than equality and inequality, may generate a floating point exception.\n+other than equality and inequality, may generate a floating-point exception.\n \n @item ORDERED_EXPR\n @itemx UNORDERED_EXPR\n@@ -1596,15 +1598,13 @@ and the result type's one value for true.\n @itemx UNGT_EXPR\n @itemx UNGE_EXPR\n @itemx UNEQ_EXPR\n-@itemx LTGT_EXPR\n These nodes represent the unordered comparison operators.\n These operations take two floating point operands and determine whether\n the operands are unordered or are less than, less than or equal to,\n greater than, greater than or equal to, or equal respectively.  For\n example, @code{UNLT_EXPR} returns true if either operand is an IEEE\n-NaN or the first operand is less than the second.  With the possible\n-exception of @code{LTGT_EXPR}, all of these operations are guaranteed\n-not to generate a floating point exception.  The result\n+NaN or the first operand is less than the second.  All these operations\n+are guaranteed not to generate a floating point exception.  The result\n type of these expressions will always be of integral or boolean type.\n These operations return the result type's zero value for false,\n and the result type's one value for true."}, {"sha": "c756af8d2c928cec25a138f84f446e9cfd747a4b", "filename": "gcc/rtl.def", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000a5f8d23c04cc52f265519fccf37c81b5a0bad/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000a5f8d23c04cc52f265519fccf37c81b5a0bad/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=000a5f8d23c04cc52f265519fccf37c81b5a0bad", "patch": "@@ -552,20 +552,25 @@ DEF_RTL_EXPR(POST_INC, \"post_inc\", \"e\", RTX_AUTOINC)\n DEF_RTL_EXPR(PRE_MODIFY, \"pre_modify\", \"ee\", RTX_AUTOINC)\n DEF_RTL_EXPR(POST_MODIFY, \"post_modify\", \"ee\", RTX_AUTOINC)\n \n-/* Comparison operations.  The ordered comparisons exist in two\n-   flavors, signed and unsigned.  */\n+/* Comparison operations.  The first 6 are allowed only for integral,\n+floating-point and vector modes.  LTGT is only allowed for floating-point\n+modes.  The last 4 are allowed only for integral and vector modes.\n+For floating-point operations, if either operand is a NaN, then NE returns\n+true and the remaining operations return false.  The operations other than\n+EQ and NE may generate an exception on quiet NaNs.  */\n DEF_RTL_EXPR(NE, \"ne\", \"ee\", RTX_COMM_COMPARE)\n DEF_RTL_EXPR(EQ, \"eq\", \"ee\", RTX_COMM_COMPARE)\n DEF_RTL_EXPR(GE, \"ge\", \"ee\", RTX_COMPARE)\n DEF_RTL_EXPR(GT, \"gt\", \"ee\", RTX_COMPARE)\n DEF_RTL_EXPR(LE, \"le\", \"ee\", RTX_COMPARE)\n DEF_RTL_EXPR(LT, \"lt\", \"ee\", RTX_COMPARE)\n+DEF_RTL_EXPR(LTGT, \"ltgt\", \"ee\", RTX_COMM_COMPARE)\n DEF_RTL_EXPR(GEU, \"geu\", \"ee\", RTX_COMPARE)\n DEF_RTL_EXPR(GTU, \"gtu\", \"ee\", RTX_COMPARE)\n DEF_RTL_EXPR(LEU, \"leu\", \"ee\", RTX_COMPARE)\n DEF_RTL_EXPR(LTU, \"ltu\", \"ee\", RTX_COMPARE)\n \n-/* Additional floating point unordered comparison flavors.  */\n+/* Additional floating-point unordered comparison flavors.  */\n DEF_RTL_EXPR(UNORDERED, \"unordered\", \"ee\", RTX_COMM_COMPARE)\n DEF_RTL_EXPR(ORDERED, \"ordered\", \"ee\", RTX_COMM_COMPARE)\n \n@@ -576,9 +581,6 @@ DEF_RTL_EXPR(UNGT, \"ungt\", \"ee\", RTX_COMPARE)\n DEF_RTL_EXPR(UNLE, \"unle\", \"ee\", RTX_COMPARE)\n DEF_RTL_EXPR(UNLT, \"unlt\", \"ee\", RTX_COMPARE)\n \n-/* This is an ordered NE, ie !UNEQ, ie false for NaN.  */\n-DEF_RTL_EXPR(LTGT, \"ltgt\", \"ee\", RTX_COMM_COMPARE)\n-\n /* Represents the result of sign-extending the sole operand.\n    The machine modes of the operand and of the SIGN_EXTEND expression\n    determine how much sign-extension is going on.  */"}, {"sha": "fb6e7344fa6b774e5de75769511f3665d00999cb", "filename": "gcc/tree.def", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000a5f8d23c04cc52f265519fccf37c81b5a0bad/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000a5f8d23c04cc52f265519fccf37c81b5a0bad/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=000a5f8d23c04cc52f265519fccf37c81b5a0bad", "patch": "@@ -793,9 +793,12 @@ DEFTREECODE (TRUTH_XOR_EXPR, \"truth_xor_expr\", tcc_expression, 2)\n DEFTREECODE (TRUTH_NOT_EXPR, \"truth_not_expr\", tcc_expression, 1)\n \n /* Relational operators.\n-   `EQ_EXPR' and `NE_EXPR' are allowed for any types.\n-   The others are allowed only for integer (or pointer or enumeral)\n-   or real types.\n+   EQ_EXPR and NE_EXPR are allowed for any types.  The others, except for\n+   LTGT_EXPR, are allowed only for integral, floating-point and vector types.\n+   LTGT_EXPR is allowed only for floating-point types.\n+   For floating-point operators, if either operand is a NaN, then NE_EXPR\n+   returns true and the remaining operators return false.  The operators\n+   other than EQ_EXPR and NE_EXPR may generate an exception on quiet NaNs.\n    In all cases the operands will have the same type,\n    and the value is either the type used by the language for booleans\n    or an integer vector type of the same size and with the same number\n@@ -805,10 +808,11 @@ DEFTREECODE (LT_EXPR, \"lt_expr\", tcc_comparison, 2)\n DEFTREECODE (LE_EXPR, \"le_expr\", tcc_comparison, 2)\n DEFTREECODE (GT_EXPR, \"gt_expr\", tcc_comparison, 2)\n DEFTREECODE (GE_EXPR, \"ge_expr\", tcc_comparison, 2)\n+DEFTREECODE (LTGT_EXPR, \"ltgt_expr\", tcc_comparison, 2)\n DEFTREECODE (EQ_EXPR, \"eq_expr\", tcc_comparison, 2)\n DEFTREECODE (NE_EXPR, \"ne_expr\", tcc_comparison, 2)\n \n-/* Additional relational operators for floating point unordered.  */\n+/* Additional relational operators for floating-point unordered.  */\n DEFTREECODE (UNORDERED_EXPR, \"unordered_expr\", tcc_comparison, 2)\n DEFTREECODE (ORDERED_EXPR, \"ordered_expr\", tcc_comparison, 2)\n \n@@ -819,9 +823,6 @@ DEFTREECODE (UNGT_EXPR, \"ungt_expr\", tcc_comparison, 2)\n DEFTREECODE (UNGE_EXPR, \"unge_expr\", tcc_comparison, 2)\n DEFTREECODE (UNEQ_EXPR, \"uneq_expr\", tcc_comparison, 2)\n \n-/* This is the reverse of uneq_expr.  */\n-DEFTREECODE (LTGT_EXPR, \"ltgt_expr\", tcc_comparison, 2)\n-\n DEFTREECODE (RANGE_EXPR, \"range_expr\", tcc_binary, 2)\n \n /* Represents a re-association barrier for floating point expressions"}]}