{"sha": "b584cbdb0829bb0ad4e6ed7488a304ae4e76b870", "node_id": "C_kwDOANBUbNoAKGI1ODRjYmRiMDgyOWJiMGFkNGU2ZWQ3NDg4YTMwNGFlNGU3NmI4NzA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-12T22:06:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-13T12:32:23Z"}, "message": "libstdc++: Improve doxygen docs for <mutex>\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/doxygen/user.cfg.in (PREDEFINED): Define\n\t_GTHREAD_USE_MUTEX_TIMEDLOCK macro.\n\t* include/bits/std_mutex.h (mutex, lock_guard): Use @since and\n\t@headerfile.\n\t* include/bits/unique_lock.h (unique_lock): Likewise.\n\t* include/std/mutex (recursive_mutex, timed_mutex)\n\t(recursive_timed_mutex, scoped_lock): Likewise.", "tree": {"sha": "78ec3bb7b90c2e09ed16de5285804bcbed77af22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78ec3bb7b90c2e09ed16de5285804bcbed77af22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b584cbdb0829bb0ad4e6ed7488a304ae4e76b870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b584cbdb0829bb0ad4e6ed7488a304ae4e76b870", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b584cbdb0829bb0ad4e6ed7488a304ae4e76b870", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b584cbdb0829bb0ad4e6ed7488a304ae4e76b870/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a278402216e75d5d54e62d2cd2345ea130349f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a278402216e75d5d54e62d2cd2345ea130349f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a278402216e75d5d54e62d2cd2345ea130349f10"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "c034b864928b4e1faa3181267b5a82637313d6d0", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b584cbdb0829bb0ad4e6ed7488a304ae4e76b870/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b584cbdb0829bb0ad4e6ed7488a304ae4e76b870/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=b584cbdb0829bb0ad4e6ed7488a304ae4e76b870", "patch": "@@ -2325,6 +2325,7 @@ INCLUDE_FILE_PATTERNS  =\n PREDEFINED             = __cplusplus=202002L \\\n                          __GTHREADS \\\n                          _GLIBCXX_HAS_GTHREADS \\\n+                         _GTHREAD_USE_MUTEX_TIMEDLOCK \\\n                          _GLIBCXX_HAVE_TLS \\\n                          _GLIBCXX_INCLUDE_AS_CXX11 \\\n                          \"_GLIBCXX_PURE= \" \\"}, {"sha": "b22e0e12793700291c65c1695313dbeae4561da2", "filename": "libstdc++-v3/include/bits/std_mutex.h", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b584cbdb0829bb0ad4e6ed7488a304ae4e76b870/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b584cbdb0829bb0ad4e6ed7488a304ae4e76b870/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h?ref=b584cbdb0829bb0ad4e6ed7488a304ae4e76b870", "patch": "@@ -53,6 +53,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n \n #ifdef _GLIBCXX_HAS_GTHREADS\n+  /// @cond undocumented\n+\n   // Common base class for std::mutex and std::timed_mutex\n   class __mutex_base\n   {\n@@ -78,8 +80,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __mutex_base(const __mutex_base&) = delete;\n     __mutex_base& operator=(const __mutex_base&) = delete;\n   };\n+  /// @endcond\n \n-  /// The standard mutex type.\n+  /** The standard mutex type.\n+   *\n+   * A simple, non-recursive, non-timed mutex.\n+   *\n+   * Do not call `lock()` and `unlock()` directly, use a scoped lock type\n+   * such as `std::unique_lock`, `std::lock_guard`, or (since C++17)\n+   * `std::scoped_lock`.\n+   *\n+   * @headerfile mutex\n+   * @since C++11\n+   */\n   class mutex : private __mutex_base\n   {\n   public:\n@@ -123,6 +136,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return &_M_mutex; }\n   };\n \n+  /// @cond undocumented\n+\n   // Implementation details for std::condition_variable\n   class __condvar\n   {\n@@ -192,6 +207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __gthread_cond_t _M_cond;\n #endif\n   };\n+  /// @endcond\n \n #endif // _GLIBCXX_HAS_GTHREADS\n \n@@ -218,6 +234,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    * A lock_guard controls mutex ownership within a scope, releasing\n    * ownership in the destructor.\n+   *\n+   * @headerfile mutex\n+   * @since C++11\n    */\n   template<typename _Mutex>\n     class lock_guard"}, {"sha": "9ed7ba25766700c219377d637749784cd295698d", "filename": "libstdc++-v3/include/bits/unique_lock.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b584cbdb0829bb0ad4e6ed7488a304ae4e76b870/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_lock.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b584cbdb0829bb0ad4e6ed7488a304ae4e76b870/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_lock.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_lock.h?ref=b584cbdb0829bb0ad4e6ed7488a304ae4e76b870", "patch": "@@ -51,7 +51,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * to another unique_lock by move construction or move assignment. If a\n    * mutex lock is owned when the destructor runs ownership will be released.\n    *\n+   * @headerfile mutex\n    * @ingroup mutexes\n+   * @since C++11\n    */\n   template<typename _Mutex>\n     class unique_lock"}, {"sha": "b9590bbf276c5a1f75faf4be66ec4e44038ae09a", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b584cbdb0829bb0ad4e6ed7488a304ae4e76b870/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b584cbdb0829bb0ad4e6ed7488a304ae4e76b870/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=b584cbdb0829bb0ad4e6ed7488a304ae4e76b870", "patch": "@@ -62,6 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n \n #ifdef _GLIBCXX_HAS_GTHREADS\n+  /// @cond undocumented\n \n   // Common base class for std::recursive_mutex and std::recursive_timed_mutex\n   class __recursive_mutex_base\n@@ -89,8 +90,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { __gthread_recursive_mutex_destroy(&_M_mutex); }\n #endif\n   };\n+  /// @endcond\n \n-  /// The standard recursive mutex type.\n+  /** The standard recursive mutex type.\n+   *\n+   * A recursive mutex can be locked more than once by the same thread.\n+   * Other threads cannot lock the mutex until the owning thread unlocks it\n+   * as many times as it was locked.\n+   *\n+   * @headerfile mutex\n+   * @since C++11\n+   */\n   class recursive_mutex : private __recursive_mutex_base\n   {\n   public:\n@@ -132,6 +142,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n #if _GTHREAD_USE_MUTEX_TIMEDLOCK\n+  /// @cond undocumented\n+\n   template<typename _Derived>\n     class __timed_mutex_impl\n     {\n@@ -207,8 +219,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return false;\n \t}\n     };\n+  /// @endcond\n \n-  /// The standard timed mutex type.\n+  /** The standard timed mutex type.\n+   *\n+   * A non-recursive mutex that supports a timeout when trying to acquire the\n+   * lock.\n+   *\n+   * @headerfile mutex\n+   * @since C++11\n+   */\n   class timed_mutex\n   : private __mutex_base, public __timed_mutex_impl<timed_mutex>\n   {\n@@ -273,7 +293,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n   };\n \n-  /// recursive_timed_mutex\n+  /** The standard recursive timed mutex type.\n+   *\n+   * A recursive mutex that supports a timeout when trying to acquire the\n+   * lock. A recursive mutex can be locked more than once by the same thread.\n+   * Other threads cannot lock the mutex until the owning thread unlocks it\n+   * as many times as it was locked.\n+   *\n+   * @headerfile mutex\n+   * @since C++11\n+   */\n   class recursive_timed_mutex\n   : private __recursive_mutex_base,\n     public __timed_mutex_impl<recursive_timed_mutex>\n@@ -687,6 +716,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    * A scoped_lock controls mutex ownership within a scope, releasing\n    * ownership in the destructor.\n+   *\n+   * @headerfile mutex\n+   * @since C++17\n    */\n   template<typename... _MutexTypes>\n     class scoped_lock"}]}