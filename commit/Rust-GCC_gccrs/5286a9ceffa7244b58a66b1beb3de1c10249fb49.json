{"sha": "5286a9ceffa7244b58a66b1beb3de1c10249fb49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI4NmE5Y2VmZmE3MjQ0YjU4YTY2YjFiZWIzZGUxYzEwMjQ5ZmI0OQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2001-10-29T20:51:04Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2001-10-29T20:51:04Z"}, "message": "(GNU runtime only) statically type `self' in a class method context to be\nthe class the method belongs to\n\nFrom-SVN: r46612", "tree": {"sha": "f357d02284fd1691944315f11f6c126ca30d795e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f357d02284fd1691944315f11f6c126ca30d795e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5286a9ceffa7244b58a66b1beb3de1c10249fb49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5286a9ceffa7244b58a66b1beb3de1c10249fb49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5286a9ceffa7244b58a66b1beb3de1c10249fb49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5286a9ceffa7244b58a66b1beb3de1c10249fb49/comments", "author": null, "committer": null, "parents": [{"sha": "4ff3bd5f75eb12cbe12602397e6b2282bcc01c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff3bd5f75eb12cbe12602397e6b2282bcc01c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff3bd5f75eb12cbe12602397e6b2282bcc01c20"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "c78e00c8f3f9f13aa4918daee5c015f58ab79fda", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5286a9ceffa7244b58a66b1beb3de1c10249fb49/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5286a9ceffa7244b58a66b1beb3de1c10249fb49/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=5286a9ceffa7244b58a66b1beb3de1c10249fb49", "patch": "@@ -4710,14 +4710,16 @@ receiver_is_class_object (receiver)\n {\n   tree chain, exp, arg;\n \n+  /* The receiver is 'self' in the context of a class method.  */\n+  if (objc_method_context\n+      && receiver == self_decl\n+      && TREE_CODE (objc_method_context) == CLASS_METHOD_DECL)\n+    {\n+      return CLASS_NAME (objc_implementation_context);\n+    }\n+  \n   if (flag_next_runtime)\n     {\n-      /* The receiver is 'self' in the context of a class method.  */\n-      if (objc_method_context\n-\t  && receiver == self_decl\n-\t  && TREE_CODE (objc_method_context) == CLASS_METHOD_DECL)\n-\treturn CLASS_NAME (objc_implementation_context);\n-\n       /* The receiver is a variable created by\n          build_class_reference_decl.  */\n       if (TREE_CODE (receiver) == VAR_DECL\n@@ -4731,7 +4733,8 @@ receiver_is_class_object (receiver)\n     {\n       /* The receiver is a function call that returns an id.  Check if\n \t it is a call to objc_getClass, if so, pick up the class name.  */\n-      if ((exp = TREE_OPERAND (receiver, 0))\n+      if (TREE_CODE (receiver) == CALL_EXPR \n+\t  && (exp = TREE_OPERAND (receiver, 0))\n \t  && TREE_CODE (exp) == ADDR_EXPR\n \t  && (exp = TREE_OPERAND (exp, 0))\n \t  && TREE_CODE (exp) == FUNCTION_DECL\n@@ -4844,8 +4847,8 @@ finish_message_expr (receiver, sel_name, method_params)\n \t       && TREE_STATIC_TEMPLATE (TREE_TYPE (rtype)))\n \tstatically_typed = 1;\n       else if ((flag_next_runtime\n-\t\t|| (TREE_CODE (receiver) == CALL_EXPR && IS_ID (rtype)))\n-\t       && (class_ident = receiver_is_class_object (receiver)))\n+\t\t|| (IS_ID (rtype)\n+\t\t    && (class_ident = receiver_is_class_object (receiver)))))\n \t;\n       else if (! IS_ID (rtype)\n \t       /* Allow any type that matches objc_class_type.  */\n@@ -5022,9 +5025,9 @@ finish_message_expr (receiver, sel_name, method_params)\n \n       /* We think we have an instance...loophole: extern id Object; */\n       hsh = hash_lookup (nst_method_hash_list, sel_name);\n+      \n       if (!hsh)\n-\t/* For various loopholes, like sending messages to self in a\n-\t   factory context.  */\n+\t/* For various loopholes */\t\n \thsh = hash_lookup (cls_method_hash_list, sel_name);\n \n       method_prototype = check_duplicates (hsh);"}]}