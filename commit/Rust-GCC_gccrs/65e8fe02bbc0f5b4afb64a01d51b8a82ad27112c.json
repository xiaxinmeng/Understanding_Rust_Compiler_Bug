{"sha": "65e8fe02bbc0f5b4afb64a01d51b8a82ad27112c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlOGZlMDJiYmMwZjViNGFmYjY0YTAxZDUxYjhhODJhZDI3MTEyYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-16T14:01:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-16T14:01:34Z"}, "message": "(gen_lowpart_common...\n\n(gen_lowpart_common, gen_highpart, operand_subword): Test input\nagainst RTX for FP, AP, and SP, not same register number.\n\nFrom-SVN: r6795", "tree": {"sha": "58fdd88e5273b6c83039a26e2b17fbe75374c3b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58fdd88e5273b6c83039a26e2b17fbe75374c3b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e8fe02bbc0f5b4afb64a01d51b8a82ad27112c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e8fe02bbc0f5b4afb64a01d51b8a82ad27112c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e8fe02bbc0f5b4afb64a01d51b8a82ad27112c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e8fe02bbc0f5b4afb64a01d51b8a82ad27112c/comments", "author": null, "committer": null, "parents": [{"sha": "d6a5ac336dc5c711e74e0617941d61ceb8fd4065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a5ac336dc5c711e74e0617941d61ceb8fd4065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a5ac336dc5c711e74e0617941d61ceb8fd4065"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "7b9187d12cb5089b522b31f6bde59a48671824a2", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8fe02bbc0f5b4afb64a01d51b8a82ad27112c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8fe02bbc0f5b4afb64a01d51b8a82ad27112c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=65e8fe02bbc0f5b4afb64a01d51b8a82ad27112c", "patch": "@@ -625,11 +625,11 @@ gen_lowpart_common (mode, x)\n \t\t   || ! rtx_equal_function_value_matters)\n \t       /* We want to keep the stack, frame, and arg pointers\n \t\t  special.  */\n-\t       && REGNO (x) != FRAME_POINTER_REGNUM\n+\t       && x != frame_pointer_rtx\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-\t       && REGNO (x) != ARG_POINTER_REGNUM\n+\t       && x != arg_pointer_rtx\n #endif\n-\t       && REGNO (x) != STACK_POINTER_REGNUM)\n+\t       && x != stack_pointer_rtx)\n \treturn gen_rtx (REG, mode, REGNO (x) + word);\n       else\n \treturn gen_rtx (SUBREG, mode, x, word);\n@@ -935,11 +935,11 @@ gen_highpart (mode, x)\n \t  && (! REG_FUNCTION_VALUE_P (x)\n \t      || ! rtx_equal_function_value_matters)\n \t  /* We want to keep the stack, frame, and arg pointers special.  */\n-\t  && REGNO (x) != FRAME_POINTER_REGNUM\n+\t  && x != frame_pointer_rtx\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-\t  && REGNO (x) != ARG_POINTER_REGNUM\n+\t  && x != arg_pointer_rtx\n #endif\n-\t  && REGNO (x) != STACK_POINTER_REGNUM)\n+\t  && x != stack_pointer_rtx)\n \treturn gen_rtx (REG, mode, REGNO (x) + word);\n       else\n \treturn gen_rtx (SUBREG, mode, x, word);\n@@ -1026,11 +1026,11 @@ operand_subword (op, i, validate_address, mode)\n \t\t   && rtx_equal_function_value_matters)\n \t       /* We want to keep the stack, frame, and arg pointers\n \t\t  special.  */\n-\t       || REGNO (op) == FRAME_POINTER_REGNUM\n+\t       || op == frame_pointer_rtx\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-\t       || REGNO (op) == ARG_POINTER_REGNUM\n+\t       || op == arg_pointer_rtx\n #endif\n-\t       || REGNO (op) == STACK_POINTER_REGNUM)\n+\t       || op == stack_pointer_rtx)\n \treturn gen_rtx (SUBREG, word_mode, op, i);\n       else\n \treturn gen_rtx (REG, word_mode, REGNO (op) + i);"}]}