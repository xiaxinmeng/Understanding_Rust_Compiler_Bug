{"sha": "71c061e67397606a6dbdf3ea2b41a033f1ba7648", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFjMDYxZTY3Mzk3NjA2YTZkYmRmM2VhMmI0MWEwMzNmMWJhNzY0OA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-02-19T19:40:41Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-02-19T19:40:41Z"}, "message": "linux64.h (LINK_OS_LINUX_SPEC): Look in /lib64.\n\n\t* config/rs6000/linux64.h (LINK_OS_LINUX_SPEC): Look in /lib64.\n\t({STARTFILE,ENDFILE}_LINUX_SPEC): Define.\n\n\t* config/rs6000/sysv4.h (ENDFILE_SPEC): Add crtsaveres.o.\n\t* config/rs6000/eabi.asm: Remove ABI save restore routines.\n\t* config/rs6000/t-ppccomm: Build crtsavres.o.\n\t* config/rs6000/crtsavres.asm: New file.\n\nFrom-SVN: r49873", "tree": {"sha": "0a94569e40518a2d48af7aad1ecc74f7b6a52cb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a94569e40518a2d48af7aad1ecc74f7b6a52cb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71c061e67397606a6dbdf3ea2b41a033f1ba7648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c061e67397606a6dbdf3ea2b41a033f1ba7648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c061e67397606a6dbdf3ea2b41a033f1ba7648", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c061e67397606a6dbdf3ea2b41a033f1ba7648/comments", "author": null, "committer": null, "parents": [{"sha": "3a7731fdc10c9dc90e9ffbf6b0bdb7e6e01500a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7731fdc10c9dc90e9ffbf6b0bdb7e6e01500a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7731fdc10c9dc90e9ffbf6b0bdb7e6e01500a0"}], "stats": {"total": 816, "additions": 447, "deletions": 369}, "files": [{"sha": "e5ec407f14a116d86b8733aaa45f02b4179c96ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c061e67397606a6dbdf3ea2b41a033f1ba7648/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c061e67397606a6dbdf3ea2b41a033f1ba7648/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71c061e67397606a6dbdf3ea2b41a033f1ba7648", "patch": "@@ -1,3 +1,13 @@\n+2002-02-19  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/linux64.h (LINK_OS_LINUX_SPEC): Look in /lib64.\n+\t({STARTFILE,ENDFILE}_LINUX_SPEC): Define.\n+\n+\t* config/rs6000/sysv4.h (ENDFILE_SPEC): Add crtsaveres.o.\n+\t* config/rs6000/eabi.asm: Remove ABI save restore routines.\n+\t* config/rs6000/t-ppccomm: Build crtsavres.o.\n+\t* config/rs6000/crtsavres.asm: New file.\n+\n 2002-02-19  Philip Blundell  <philb@gnu.org>\n \n \t* config/arm/arm.c (use_return_insn): Don't reject interrupt"}, {"sha": "0c65182584db38747cdd026d27ad8b4402a0bb90", "filename": "gcc/config/rs6000/crtsavres.asm", "status": "added", "additions": 407, "deletions": 0, "changes": 407, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c061e67397606a6dbdf3ea2b41a033f1ba7648/gcc%2Fconfig%2Frs6000%2Fcrtsavres.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c061e67397606a6dbdf3ea2b41a033f1ba7648/gcc%2Fconfig%2Frs6000%2Fcrtsavres.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtsavres.asm?ref=71c061e67397606a6dbdf3ea2b41a033f1ba7648", "patch": "@@ -0,0 +1,407 @@\n+/*\n+ * Special support for eabi and SVR4\n+ *\n+ *   Copyright (C) 1995, 1996, 1998, 2000, 2001 Free Software Foundation, Inc.\n+ *   Written By Michael Meissner\n+ *   64-bit support written by David Edelsohn\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 59 Temple Place - Suite 330,\n+ * Boston, MA 02111-1307, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+/* Do any initializations needed for the eabi environment */\n+\n+\t.file\t\"crtsavres.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifndef __powerpc64__\n+\n+/* Routines for saving floating point registers, called by the compiler.  */\n+/* Called with r11 pointing to the stack header word of the caller of the */\n+/* function, just beyond the end of the floating point save area.  */\n+\n+FUNC_START(_savefpr_14)\tstfd\t14,-144(11)\t/* save fp registers */\n+FUNC_START(_savefpr_15)\tstfd\t15,-136(11)\n+FUNC_START(_savefpr_16)\tstfd\t16,-128(11)\n+FUNC_START(_savefpr_17)\tstfd\t17,-120(11)\n+FUNC_START(_savefpr_18)\tstfd\t18,-112(11)\n+FUNC_START(_savefpr_19)\tstfd\t19,-104(11)\n+FUNC_START(_savefpr_20)\tstfd\t20,-96(11)\n+FUNC_START(_savefpr_21)\tstfd\t21,-88(11)\n+FUNC_START(_savefpr_22)\tstfd\t22,-80(11)\n+FUNC_START(_savefpr_23)\tstfd\t23,-72(11)\n+FUNC_START(_savefpr_24)\tstfd\t24,-64(11)\n+FUNC_START(_savefpr_25)\tstfd\t25,-56(11)\n+FUNC_START(_savefpr_26)\tstfd\t26,-48(11)\n+FUNC_START(_savefpr_27)\tstfd\t27,-40(11)\n+FUNC_START(_savefpr_28)\tstfd\t28,-32(11)\n+FUNC_START(_savefpr_29)\tstfd\t29,-24(11)\n+FUNC_START(_savefpr_30)\tstfd\t30,-16(11)\n+FUNC_START(_savefpr_31)\tstfd\t31,-8(11)\n+\t\t\tblr\n+FUNC_END(_savefpr_31)\n+FUNC_END(_savefpr_30)\n+FUNC_END(_savefpr_29)\n+FUNC_END(_savefpr_28)\n+FUNC_END(_savefpr_27)\n+FUNC_END(_savefpr_26)\n+FUNC_END(_savefpr_25)\n+FUNC_END(_savefpr_24)\n+FUNC_END(_savefpr_23)\n+FUNC_END(_savefpr_22)\n+FUNC_END(_savefpr_21)\n+FUNC_END(_savefpr_20)\n+FUNC_END(_savefpr_19)\n+FUNC_END(_savefpr_18)\n+FUNC_END(_savefpr_17)\n+FUNC_END(_savefpr_16)\n+FUNC_END(_savefpr_15)\n+FUNC_END(_savefpr_14)\n+\n+/* Routines for saving integer registers, called by the compiler.  */\n+/* Called with r11 pointing to the stack header word of the caller of the */\n+/* function, just beyond the end of the integer save area.  */\n+\n+FUNC_START(_savegpr_14)\tstw\t14,-72(11)\t/* save gp registers */\n+FUNC_START(_savegpr_15)\tstw\t15,-68(11)\n+FUNC_START(_savegpr_16)\tstw\t16,-64(11)\n+FUNC_START(_savegpr_17)\tstw\t17,-60(11)\n+FUNC_START(_savegpr_18)\tstw\t18,-56(11)\n+FUNC_START(_savegpr_19)\tstw\t19,-52(11)\n+FUNC_START(_savegpr_20)\tstw\t20,-48(11)\n+FUNC_START(_savegpr_21)\tstw\t21,-44(11)\n+FUNC_START(_savegpr_22)\tstw\t22,-40(11)\n+FUNC_START(_savegpr_23)\tstw\t23,-36(11)\n+FUNC_START(_savegpr_24)\tstw\t24,-32(11)\n+FUNC_START(_savegpr_25)\tstw\t25,-28(11)\n+FUNC_START(_savegpr_26)\tstw\t26,-24(11)\n+FUNC_START(_savegpr_27)\tstw\t27,-20(11)\n+FUNC_START(_savegpr_28)\tstw\t28,-16(11)\n+FUNC_START(_savegpr_29)\tstw\t29,-12(11)\n+FUNC_START(_savegpr_30)\tstw\t30,-8(11)\n+FUNC_START(_savegpr_31)\tstw\t31,-4(11)\n+\t\t\tblr\n+FUNC_END(_savegpr_31)\n+FUNC_END(_savegpr_30)\n+FUNC_END(_savegpr_29)\n+FUNC_END(_savegpr_28)\n+FUNC_END(_savegpr_27)\n+FUNC_END(_savegpr_26)\n+FUNC_END(_savegpr_25)\n+FUNC_END(_savegpr_24)\n+FUNC_END(_savegpr_23)\n+FUNC_END(_savegpr_22)\n+FUNC_END(_savegpr_21)\n+FUNC_END(_savegpr_20)\n+FUNC_END(_savegpr_19)\n+FUNC_END(_savegpr_18)\n+FUNC_END(_savegpr_17)\n+FUNC_END(_savegpr_16)\n+FUNC_END(_savegpr_15)\n+FUNC_END(_savegpr_14)\n+\n+/* Routines for restoring floating point registers, called by the compiler.  */\n+/* Called with r11 pointing to the stack header word of the caller of the */\n+/* function, just beyond the end of the floating point save area.  */\n+\n+FUNC_START(_restfpr_14)\tlfd\t14,-144(11)\t/* restore fp registers */\n+FUNC_START(_restfpr_15)\tlfd\t15,-136(11)\n+FUNC_START(_restfpr_16)\tlfd\t16,-128(11)\n+FUNC_START(_restfpr_17)\tlfd\t17,-120(11)\n+FUNC_START(_restfpr_18)\tlfd\t18,-112(11)\n+FUNC_START(_restfpr_19)\tlfd\t19,-104(11)\n+FUNC_START(_restfpr_20)\tlfd\t20,-96(11)\n+FUNC_START(_restfpr_21)\tlfd\t21,-88(11)\n+FUNC_START(_restfpr_22)\tlfd\t22,-80(11)\n+FUNC_START(_restfpr_23)\tlfd\t23,-72(11)\n+FUNC_START(_restfpr_24)\tlfd\t24,-64(11)\n+FUNC_START(_restfpr_25)\tlfd\t25,-56(11)\n+FUNC_START(_restfpr_26)\tlfd\t26,-48(11)\n+FUNC_START(_restfpr_27)\tlfd\t27,-40(11)\n+FUNC_START(_restfpr_28)\tlfd\t28,-32(11)\n+FUNC_START(_restfpr_29)\tlfd\t29,-24(11)\n+FUNC_START(_restfpr_30)\tlfd\t30,-16(11)\n+FUNC_START(_restfpr_31)\tlfd\t31,-8(11)\n+\t\t\tblr\n+FUNC_END(_restfpr_31)\n+FUNC_END(_restfpr_30)\n+FUNC_END(_restfpr_29)\n+FUNC_END(_restfpr_28)\n+FUNC_END(_restfpr_27)\n+FUNC_END(_restfpr_26)\n+FUNC_END(_restfpr_25)\n+FUNC_END(_restfpr_24)\n+FUNC_END(_restfpr_23)\n+FUNC_END(_restfpr_22)\n+FUNC_END(_restfpr_21)\n+FUNC_END(_restfpr_20)\n+FUNC_END(_restfpr_19)\n+FUNC_END(_restfpr_18)\n+FUNC_END(_restfpr_17)\n+FUNC_END(_restfpr_16)\n+FUNC_END(_restfpr_15)\n+FUNC_END(_restfpr_14)\n+\n+/* Routines for restoring integer registers, called by the compiler.  */\n+/* Called with r11 pointing to the stack header word of the caller of the */\n+/* function, just beyond the end of the integer restore area.  */\n+\n+FUNC_START(_restgpr_14)\tlwz\t14,-72(11)\t/* restore gp registers */\n+FUNC_START(_restgpr_15)\tlwz\t15,-68(11)\n+FUNC_START(_restgpr_16)\tlwz\t16,-64(11)\n+FUNC_START(_restgpr_17)\tlwz\t17,-60(11)\n+FUNC_START(_restgpr_18)\tlwz\t18,-56(11)\n+FUNC_START(_restgpr_19)\tlwz\t19,-52(11)\n+FUNC_START(_restgpr_20)\tlwz\t20,-48(11)\n+FUNC_START(_restgpr_21)\tlwz\t21,-44(11)\n+FUNC_START(_restgpr_22)\tlwz\t22,-40(11)\n+FUNC_START(_restgpr_23)\tlwz\t23,-36(11)\n+FUNC_START(_restgpr_24)\tlwz\t24,-32(11)\n+FUNC_START(_restgpr_25)\tlwz\t25,-28(11)\n+FUNC_START(_restgpr_26)\tlwz\t26,-24(11)\n+FUNC_START(_restgpr_27)\tlwz\t27,-20(11)\n+FUNC_START(_restgpr_28)\tlwz\t28,-16(11)\n+FUNC_START(_restgpr_29)\tlwz\t29,-12(11)\n+FUNC_START(_restgpr_30)\tlwz\t30,-8(11)\n+FUNC_START(_restgpr_31)\tlwz\t31,-4(11)\n+\t\t\tblr\n+FUNC_END(_restgpr_31)\n+FUNC_END(_restgpr_30)\n+FUNC_END(_restgpr_29)\n+FUNC_END(_restgpr_28)\n+FUNC_END(_restgpr_27)\n+FUNC_END(_restgpr_26)\n+FUNC_END(_restgpr_25)\n+FUNC_END(_restgpr_24)\n+FUNC_END(_restgpr_23)\n+FUNC_END(_restgpr_22)\n+FUNC_END(_restgpr_21)\n+FUNC_END(_restgpr_20)\n+FUNC_END(_restgpr_19)\n+FUNC_END(_restgpr_18)\n+FUNC_END(_restgpr_17)\n+FUNC_END(_restgpr_16)\n+FUNC_END(_restgpr_15)\n+FUNC_END(_restgpr_14)\n+\n+/* Routines for restoring floating point registers, called by the compiler.  */\n+/* Called with r11 pointing to the stack header word of the caller of the */\n+/* function, just beyond the end of the floating point save area.  */\n+/* In addition to restoring the fp registers, it will return to the caller's */\n+/* caller */\n+\n+FUNC_START(_restfpr_14_x)\tlfd\t14,-144(11)\t/* restore fp registers */\n+FUNC_START(_restfpr_15_x)\tlfd\t15,-136(11)\n+FUNC_START(_restfpr_16_x)\tlfd\t16,-128(11)\n+FUNC_START(_restfpr_17_x)\tlfd\t17,-120(11)\n+FUNC_START(_restfpr_18_x)\tlfd\t18,-112(11)\n+FUNC_START(_restfpr_19_x)\tlfd\t19,-104(11)\n+FUNC_START(_restfpr_20_x)\tlfd\t20,-96(11)\n+FUNC_START(_restfpr_21_x)\tlfd\t21,-88(11)\n+FUNC_START(_restfpr_22_x)\tlfd\t22,-80(11)\n+FUNC_START(_restfpr_23_x)\tlfd\t23,-72(11)\n+FUNC_START(_restfpr_24_x)\tlfd\t24,-64(11)\n+FUNC_START(_restfpr_25_x)\tlfd\t25,-56(11)\n+FUNC_START(_restfpr_26_x)\tlfd\t26,-48(11)\n+FUNC_START(_restfpr_27_x)\tlfd\t27,-40(11)\n+FUNC_START(_restfpr_28_x)\tlfd\t28,-32(11)\n+FUNC_START(_restfpr_29_x)\tlfd\t29,-24(11)\n+FUNC_START(_restfpr_30_x)\tlfd\t30,-16(11)\n+FUNC_START(_restfpr_31_x)\tlwz\t0,4(11)\n+\t\t\t\tlfd\t31,-8(11)\n+\t\t\t\tmtlr\t0\n+\t\t\t\tmr\t1,11\n+\t\t\t\tblr\n+FUNC_END(_restfpr_31_x)\n+FUNC_END(_restfpr_30_x)\n+FUNC_END(_restfpr_29_x)\n+FUNC_END(_restfpr_28_x)\n+FUNC_END(_restfpr_27_x)\n+FUNC_END(_restfpr_26_x)\n+FUNC_END(_restfpr_25_x)\n+FUNC_END(_restfpr_24_x)\n+FUNC_END(_restfpr_23_x)\n+FUNC_END(_restfpr_22_x)\n+FUNC_END(_restfpr_21_x)\n+FUNC_END(_restfpr_20_x)\n+FUNC_END(_restfpr_19_x)\n+FUNC_END(_restfpr_18_x)\n+FUNC_END(_restfpr_17_x)\n+FUNC_END(_restfpr_16_x)\n+FUNC_END(_restfpr_15_x)\n+FUNC_END(_restfpr_14_x)\n+\n+/* Routines for restoring integer registers, called by the compiler.  */\n+/* Called with r11 pointing to the stack header word of the caller of the */\n+/* function, just beyond the end of the integer restore area.  */\n+\n+FUNC_START(_restgpr_14_x)\tlwz\t14,-72(11)\t/* restore gp registers */\n+FUNC_START(_restgpr_15_x)\tlwz\t15,-68(11)\n+FUNC_START(_restgpr_16_x)\tlwz\t16,-64(11)\n+FUNC_START(_restgpr_17_x)\tlwz\t17,-60(11)\n+FUNC_START(_restgpr_18_x)\tlwz\t18,-56(11)\n+FUNC_START(_restgpr_19_x)\tlwz\t19,-52(11)\n+FUNC_START(_restgpr_20_x)\tlwz\t20,-48(11)\n+FUNC_START(_restgpr_21_x)\tlwz\t21,-44(11)\n+FUNC_START(_restgpr_22_x)\tlwz\t22,-40(11)\n+FUNC_START(_restgpr_23_x)\tlwz\t23,-36(11)\n+FUNC_START(_restgpr_24_x)\tlwz\t24,-32(11)\n+FUNC_START(_restgpr_25_x)\tlwz\t25,-28(11)\n+FUNC_START(_restgpr_26_x)\tlwz\t26,-24(11)\n+FUNC_START(_restgpr_27_x)\tlwz\t27,-20(11)\n+FUNC_START(_restgpr_28_x)\tlwz\t28,-16(11)\n+FUNC_START(_restgpr_29_x)\tlwz\t29,-12(11)\n+FUNC_START(_restgpr_30_x)\tlwz\t30,-8(11)\n+FUNC_START(_restgpr_31_x)\tlwz\t0,4(11)\n+\t\t\t\tlwz\t31,-4(11)\n+\t\t\t\tmtlr\t0\n+\t\t\t\tmr\t1,11\n+\t\t\t\tblr\n+FUNC_END(_restgpr_31_x)\n+FUNC_END(_restgpr_30_x)\n+FUNC_END(_restgpr_29_x)\n+FUNC_END(_restgpr_28_x)\n+FUNC_END(_restgpr_27_x)\n+FUNC_END(_restgpr_26_x)\n+FUNC_END(_restgpr_25_x)\n+FUNC_END(_restgpr_24_x)\n+FUNC_END(_restgpr_23_x)\n+FUNC_END(_restgpr_22_x)\n+FUNC_END(_restgpr_21_x)\n+FUNC_END(_restgpr_20_x)\n+FUNC_END(_restgpr_19_x)\n+FUNC_END(_restgpr_18_x)\n+FUNC_END(_restgpr_17_x)\n+FUNC_END(_restgpr_16_x)\n+FUNC_END(_restgpr_15_x)\n+FUNC_END(_restgpr_14_x)\n+\n+#else /* __powerpc64__ */\n+\n+\t.section \".text\"\n+\t.align 2\n+\n+/* Routines for saving floating point registers, called by the compiler.  */\n+\n+.fsav:\n+FUNC_START(_savef14)\tstfd\t14,-144(1)\t/* save fp registers */\n+FUNC_START(_savef15)\tstfd\t15,-136(1)\n+FUNC_START(_savef16)\tstfd\t16,-128(1)\n+FUNC_START(_savef17)\tstfd\t17,-120(1)\n+FUNC_START(_savef18)\tstfd\t18,-112(1)\n+FUNC_START(_savef19)\tstfd\t19,-104(1)\n+FUNC_START(_savef20)\tstfd\t20,-96(1)\n+FUNC_START(_savef21)\tstfd\t21,-88(1)\n+FUNC_START(_savef22)\tstfd\t22,-80(1)\n+FUNC_START(_savef23)\tstfd\t23,-72(1)\n+FUNC_START(_savef24)\tstfd\t24,-64(1)\n+FUNC_START(_savef25)\tstfd\t25,-56(1)\n+FUNC_START(_savef26)\tstfd\t26,-48(1)\n+FUNC_START(_savef27)\tstfd\t27,-40(1)\n+FUNC_START(_savef28)\tstfd\t28,-32(1)\n+FUNC_START(_savef29)\tstfd\t29,-24(1)\n+FUNC_START(_savef30)\tstfd\t30,-16(1)\n+FUNC_START(_savef31)\tstfd\t31,-8(1)\n+\t\t\tblr\n+.LTfsav:\n+\t\t\t.long 0\n+\t\t\t.byte 0,12,0,0,0,0,0,0\n+\t\t\t.long 0\n+\t\t\t.long .LTfsav-.fsav\n+\t\t\t.short 4\n+\t\t\t.ascii \"fsav\"\n+FUNC_END(_savef31)\n+FUNC_END(_savef30)\n+FUNC_END(_savef29)\n+FUNC_END(_savef28)\n+FUNC_END(_savef27)\n+FUNC_END(_savef26)\n+FUNC_END(_savef25)\n+FUNC_END(_savef24)\n+FUNC_END(_savef23)\n+FUNC_END(_savef22)\n+FUNC_END(_savef21)\n+FUNC_END(_savef20)\n+FUNC_END(_savef19)\n+FUNC_END(_savef18)\n+FUNC_END(_savef17)\n+FUNC_END(_savef16)\n+FUNC_END(_savef15)\n+FUNC_END(_savef14)\n+\n+/* Routines for restoring floating point registers, called by the compiler.  */\n+\n+.fres:\n+FUNC_START(_restf14)\tlfd\t14,-144(1)\t/* restore fp registers */\n+FUNC_START(_restf15)\tlfd\t15,-136(1)\n+FUNC_START(_restf16)\tlfd\t16,-128(1)\n+FUNC_START(_restf17)\tlfd\t17,-120(1)\n+FUNC_START(_restf18)\tlfd\t18,-112(1)\n+FUNC_START(_restf19)\tlfd\t19,-104(1)\n+FUNC_START(_restf20)\tlfd\t20,-96(1)\n+FUNC_START(_restf21)\tlfd\t21,-88(1)\n+FUNC_START(_restf22)\tlfd\t22,-80(1)\n+FUNC_START(_restf23)\tlfd\t23,-72(1)\n+FUNC_START(_restf24)\tlfd\t24,-64(1)\n+FUNC_START(_restf25)\tlfd\t25,-56(1)\n+FUNC_START(_restf26)\tlfd\t26,-48(1)\n+FUNC_START(_restf27)\tlfd\t27,-40(1)\n+FUNC_START(_restf28)\tlfd\t28,-32(1)\n+FUNC_START(_restf29)\tlfd\t29,-24(1)\n+FUNC_START(_restf30)\tlfd\t30,-16(1)\n+FUNC_START(_restf31)\tlfd\t31,-8(1)\n+\t\t\tblr\n+.LTfres:\n+\t\t\t.long 0\n+\t\t\t.byte 0,12,0,0,0,0,0,0\n+\t\t\t.long 0\n+\t\t\t.long .LTfres-.fres\n+\t\t\t.short 4\n+\t\t\t.ascii \"fres\"\n+FUNC_END(_restf31)\n+FUNC_END(_restf30)\n+FUNC_END(_restf29)\n+FUNC_END(_restf28)\n+FUNC_END(_restf27)\n+FUNC_END(_restf26)\n+FUNC_END(_restf25)\n+FUNC_END(_restf24)\n+FUNC_END(_restf23)\n+FUNC_END(_restf22)\n+FUNC_END(_restf21)\n+FUNC_END(_restf20)\n+FUNC_END(_restf19)\n+FUNC_END(_restf18)\n+FUNC_END(_restf17)\n+FUNC_END(_restf16)\n+FUNC_END(_restf15)\n+FUNC_END(_restf14)\n+\n+#endif"}, {"sha": "0808e9c3dabc7ecae5f0d72924cd146b60d54b3d", "filename": "gcc/config/rs6000/eabi.asm", "status": "modified", "additions": 0, "deletions": 362, "changes": 362, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c061e67397606a6dbdf3ea2b41a033f1ba7648/gcc%2Fconfig%2Frs6000%2Feabi.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c061e67397606a6dbdf3ea2b41a033f1ba7648/gcc%2Fconfig%2Frs6000%2Feabi.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.asm?ref=71c061e67397606a6dbdf3ea2b41a033f1ba7648", "patch": "@@ -3,7 +3,6 @@\n  *\n  *   Copyright (C) 1995, 1996, 1998, 2000, 2001 Free Software Foundation, Inc.\n  *   Written By Michael Meissner\n- *   64-bit support written by David Edelsohn\n  * \n  * This file is free software; you can redistribute it and/or modify it\n  * under the terms of the GNU General Public License as published by the\n@@ -297,365 +296,4 @@ FUNC_START(__eabi_uconvert)\n \n FUNC_END(__eabi_uconvert)\n \n-/* Routines for saving floating point registers, called by the compiler.  */\n-/* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the floating point save area.  */\n-\n-FUNC_START(_savefpr_14)\tstfd\t14,-144(11)\t/* save fp registers */\n-FUNC_START(_savefpr_15)\tstfd\t15,-136(11)\n-FUNC_START(_savefpr_16)\tstfd\t16,-128(11)\n-FUNC_START(_savefpr_17)\tstfd\t17,-120(11)\n-FUNC_START(_savefpr_18)\tstfd\t18,-112(11)\n-FUNC_START(_savefpr_19)\tstfd\t19,-104(11)\n-FUNC_START(_savefpr_20)\tstfd\t20,-96(11)\n-FUNC_START(_savefpr_21)\tstfd\t21,-88(11)\n-FUNC_START(_savefpr_22)\tstfd\t22,-80(11)\n-FUNC_START(_savefpr_23)\tstfd\t23,-72(11)\n-FUNC_START(_savefpr_24)\tstfd\t24,-64(11)\n-FUNC_START(_savefpr_25)\tstfd\t25,-56(11)\n-FUNC_START(_savefpr_26)\tstfd\t26,-48(11)\n-FUNC_START(_savefpr_27)\tstfd\t27,-40(11)\n-FUNC_START(_savefpr_28)\tstfd\t28,-32(11)\n-FUNC_START(_savefpr_29)\tstfd\t29,-24(11)\n-FUNC_START(_savefpr_30)\tstfd\t30,-16(11)\n-FUNC_START(_savefpr_31)\tstfd\t31,-8(11)\n-\t\t\tblr\n-FUNC_END(_savefpr_31)\n-FUNC_END(_savefpr_30)\n-FUNC_END(_savefpr_29)\n-FUNC_END(_savefpr_28)\n-FUNC_END(_savefpr_27)\n-FUNC_END(_savefpr_26)\n-FUNC_END(_savefpr_25)\n-FUNC_END(_savefpr_24)\n-FUNC_END(_savefpr_23)\n-FUNC_END(_savefpr_22)\n-FUNC_END(_savefpr_21)\n-FUNC_END(_savefpr_20)\n-FUNC_END(_savefpr_19)\n-FUNC_END(_savefpr_18)\n-FUNC_END(_savefpr_17)\n-FUNC_END(_savefpr_16)\n-FUNC_END(_savefpr_15)\n-FUNC_END(_savefpr_14)\n-\n-/* Routines for saving integer registers, called by the compiler.  */\n-/* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the integer save area.  */\n-\n-FUNC_START(_savegpr_14)\tstw\t14,-72(11)\t/* save gp registers */\n-FUNC_START(_savegpr_15)\tstw\t15,-68(11)\n-FUNC_START(_savegpr_16)\tstw\t16,-64(11)\n-FUNC_START(_savegpr_17)\tstw\t17,-60(11)\n-FUNC_START(_savegpr_18)\tstw\t18,-56(11)\n-FUNC_START(_savegpr_19)\tstw\t19,-52(11)\n-FUNC_START(_savegpr_20)\tstw\t20,-48(11)\n-FUNC_START(_savegpr_21)\tstw\t21,-44(11)\n-FUNC_START(_savegpr_22)\tstw\t22,-40(11)\n-FUNC_START(_savegpr_23)\tstw\t23,-36(11)\n-FUNC_START(_savegpr_24)\tstw\t24,-32(11)\n-FUNC_START(_savegpr_25)\tstw\t25,-28(11)\n-FUNC_START(_savegpr_26)\tstw\t26,-24(11)\n-FUNC_START(_savegpr_27)\tstw\t27,-20(11)\n-FUNC_START(_savegpr_28)\tstw\t28,-16(11)\n-FUNC_START(_savegpr_29)\tstw\t29,-12(11)\n-FUNC_START(_savegpr_30)\tstw\t30,-8(11)\n-FUNC_START(_savegpr_31)\tstw\t31,-4(11)\n-\t\t\tblr\n-FUNC_END(_savegpr_31)\n-FUNC_END(_savegpr_30)\n-FUNC_END(_savegpr_29)\n-FUNC_END(_savegpr_28)\n-FUNC_END(_savegpr_27)\n-FUNC_END(_savegpr_26)\n-FUNC_END(_savegpr_25)\n-FUNC_END(_savegpr_24)\n-FUNC_END(_savegpr_23)\n-FUNC_END(_savegpr_22)\n-FUNC_END(_savegpr_21)\n-FUNC_END(_savegpr_20)\n-FUNC_END(_savegpr_19)\n-FUNC_END(_savegpr_18)\n-FUNC_END(_savegpr_17)\n-FUNC_END(_savegpr_16)\n-FUNC_END(_savegpr_15)\n-FUNC_END(_savegpr_14)\n-\n-/* Routines for restoring floating point registers, called by the compiler.  */\n-/* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the floating point save area.  */\n-\n-FUNC_START(_restfpr_14)\tlfd\t14,-144(11)\t/* restore fp registers */\n-FUNC_START(_restfpr_15)\tlfd\t15,-136(11)\n-FUNC_START(_restfpr_16)\tlfd\t16,-128(11)\n-FUNC_START(_restfpr_17)\tlfd\t17,-120(11)\n-FUNC_START(_restfpr_18)\tlfd\t18,-112(11)\n-FUNC_START(_restfpr_19)\tlfd\t19,-104(11)\n-FUNC_START(_restfpr_20)\tlfd\t20,-96(11)\n-FUNC_START(_restfpr_21)\tlfd\t21,-88(11)\n-FUNC_START(_restfpr_22)\tlfd\t22,-80(11)\n-FUNC_START(_restfpr_23)\tlfd\t23,-72(11)\n-FUNC_START(_restfpr_24)\tlfd\t24,-64(11)\n-FUNC_START(_restfpr_25)\tlfd\t25,-56(11)\n-FUNC_START(_restfpr_26)\tlfd\t26,-48(11)\n-FUNC_START(_restfpr_27)\tlfd\t27,-40(11)\n-FUNC_START(_restfpr_28)\tlfd\t28,-32(11)\n-FUNC_START(_restfpr_29)\tlfd\t29,-24(11)\n-FUNC_START(_restfpr_30)\tlfd\t30,-16(11)\n-FUNC_START(_restfpr_31)\tlfd\t31,-8(11)\n-\t\t\tblr\n-FUNC_END(_restfpr_31)\n-FUNC_END(_restfpr_30)\n-FUNC_END(_restfpr_29)\n-FUNC_END(_restfpr_28)\n-FUNC_END(_restfpr_27)\n-FUNC_END(_restfpr_26)\n-FUNC_END(_restfpr_25)\n-FUNC_END(_restfpr_24)\n-FUNC_END(_restfpr_23)\n-FUNC_END(_restfpr_22)\n-FUNC_END(_restfpr_21)\n-FUNC_END(_restfpr_20)\n-FUNC_END(_restfpr_19)\n-FUNC_END(_restfpr_18)\n-FUNC_END(_restfpr_17)\n-FUNC_END(_restfpr_16)\n-FUNC_END(_restfpr_15)\n-FUNC_END(_restfpr_14)\n-\n-/* Routines for restoring integer registers, called by the compiler.  */\n-/* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the integer restore area.  */\n-\n-FUNC_START(_restgpr_14)\tlwz\t14,-72(11)\t/* restore gp registers */\n-FUNC_START(_restgpr_15)\tlwz\t15,-68(11)\n-FUNC_START(_restgpr_16)\tlwz\t16,-64(11)\n-FUNC_START(_restgpr_17)\tlwz\t17,-60(11)\n-FUNC_START(_restgpr_18)\tlwz\t18,-56(11)\n-FUNC_START(_restgpr_19)\tlwz\t19,-52(11)\n-FUNC_START(_restgpr_20)\tlwz\t20,-48(11)\n-FUNC_START(_restgpr_21)\tlwz\t21,-44(11)\n-FUNC_START(_restgpr_22)\tlwz\t22,-40(11)\n-FUNC_START(_restgpr_23)\tlwz\t23,-36(11)\n-FUNC_START(_restgpr_24)\tlwz\t24,-32(11)\n-FUNC_START(_restgpr_25)\tlwz\t25,-28(11)\n-FUNC_START(_restgpr_26)\tlwz\t26,-24(11)\n-FUNC_START(_restgpr_27)\tlwz\t27,-20(11)\n-FUNC_START(_restgpr_28)\tlwz\t28,-16(11)\n-FUNC_START(_restgpr_29)\tlwz\t29,-12(11)\n-FUNC_START(_restgpr_30)\tlwz\t30,-8(11)\n-FUNC_START(_restgpr_31)\tlwz\t31,-4(11)\n-\t\t\tblr\n-FUNC_END(_restgpr_31)\n-FUNC_END(_restgpr_30)\n-FUNC_END(_restgpr_29)\n-FUNC_END(_restgpr_28)\n-FUNC_END(_restgpr_27)\n-FUNC_END(_restgpr_26)\n-FUNC_END(_restgpr_25)\n-FUNC_END(_restgpr_24)\n-FUNC_END(_restgpr_23)\n-FUNC_END(_restgpr_22)\n-FUNC_END(_restgpr_21)\n-FUNC_END(_restgpr_20)\n-FUNC_END(_restgpr_19)\n-FUNC_END(_restgpr_18)\n-FUNC_END(_restgpr_17)\n-FUNC_END(_restgpr_16)\n-FUNC_END(_restgpr_15)\n-FUNC_END(_restgpr_14)\n-\n-/* Routines for restoring floating point registers, called by the compiler.  */\n-/* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the floating point save area.  */\n-/* In addition to restoring the fp registers, it will return to the caller's */\n-/* caller */\n-\n-FUNC_START(_restfpr_14_x)\tlfd\t14,-144(11)\t/* restore fp registers */\n-FUNC_START(_restfpr_15_x)\tlfd\t15,-136(11)\n-FUNC_START(_restfpr_16_x)\tlfd\t16,-128(11)\n-FUNC_START(_restfpr_17_x)\tlfd\t17,-120(11)\n-FUNC_START(_restfpr_18_x)\tlfd\t18,-112(11)\n-FUNC_START(_restfpr_19_x)\tlfd\t19,-104(11)\n-FUNC_START(_restfpr_20_x)\tlfd\t20,-96(11)\n-FUNC_START(_restfpr_21_x)\tlfd\t21,-88(11)\n-FUNC_START(_restfpr_22_x)\tlfd\t22,-80(11)\n-FUNC_START(_restfpr_23_x)\tlfd\t23,-72(11)\n-FUNC_START(_restfpr_24_x)\tlfd\t24,-64(11)\n-FUNC_START(_restfpr_25_x)\tlfd\t25,-56(11)\n-FUNC_START(_restfpr_26_x)\tlfd\t26,-48(11)\n-FUNC_START(_restfpr_27_x)\tlfd\t27,-40(11)\n-FUNC_START(_restfpr_28_x)\tlfd\t28,-32(11)\n-FUNC_START(_restfpr_29_x)\tlfd\t29,-24(11)\n-FUNC_START(_restfpr_30_x)\tlfd\t30,-16(11)\n-FUNC_START(_restfpr_31_x)\tlwz\t0,4(11)\n-\t\t\t\tlfd\t31,-8(11)\n-\t\t\t\tmtlr\t0\n-\t\t\t\tmr\t1,11\n-\t\t\t\tblr\n-FUNC_END(_restfpr_31_x)\n-FUNC_END(_restfpr_30_x)\n-FUNC_END(_restfpr_29_x)\n-FUNC_END(_restfpr_28_x)\n-FUNC_END(_restfpr_27_x)\n-FUNC_END(_restfpr_26_x)\n-FUNC_END(_restfpr_25_x)\n-FUNC_END(_restfpr_24_x)\n-FUNC_END(_restfpr_23_x)\n-FUNC_END(_restfpr_22_x)\n-FUNC_END(_restfpr_21_x)\n-FUNC_END(_restfpr_20_x)\n-FUNC_END(_restfpr_19_x)\n-FUNC_END(_restfpr_18_x)\n-FUNC_END(_restfpr_17_x)\n-FUNC_END(_restfpr_16_x)\n-FUNC_END(_restfpr_15_x)\n-FUNC_END(_restfpr_14_x)\n-\n-/* Routines for restoring integer registers, called by the compiler.  */\n-/* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the integer restore area.  */\n-\n-FUNC_START(_restgpr_14_x)\tlwz\t14,-72(11)\t/* restore gp registers */\n-FUNC_START(_restgpr_15_x)\tlwz\t15,-68(11)\n-FUNC_START(_restgpr_16_x)\tlwz\t16,-64(11)\n-FUNC_START(_restgpr_17_x)\tlwz\t17,-60(11)\n-FUNC_START(_restgpr_18_x)\tlwz\t18,-56(11)\n-FUNC_START(_restgpr_19_x)\tlwz\t19,-52(11)\n-FUNC_START(_restgpr_20_x)\tlwz\t20,-48(11)\n-FUNC_START(_restgpr_21_x)\tlwz\t21,-44(11)\n-FUNC_START(_restgpr_22_x)\tlwz\t22,-40(11)\n-FUNC_START(_restgpr_23_x)\tlwz\t23,-36(11)\n-FUNC_START(_restgpr_24_x)\tlwz\t24,-32(11)\n-FUNC_START(_restgpr_25_x)\tlwz\t25,-28(11)\n-FUNC_START(_restgpr_26_x)\tlwz\t26,-24(11)\n-FUNC_START(_restgpr_27_x)\tlwz\t27,-20(11)\n-FUNC_START(_restgpr_28_x)\tlwz\t28,-16(11)\n-FUNC_START(_restgpr_29_x)\tlwz\t29,-12(11)\n-FUNC_START(_restgpr_30_x)\tlwz\t30,-8(11)\n-FUNC_START(_restgpr_31_x)\tlwz\t0,4(11)\n-\t\t\t\tlwz\t31,-4(11)\n-\t\t\t\tmtlr\t0\n-\t\t\t\tmr\t1,11\n-\t\t\t\tblr\n-FUNC_END(_restgpr_31_x)\n-FUNC_END(_restgpr_30_x)\n-FUNC_END(_restgpr_29_x)\n-FUNC_END(_restgpr_28_x)\n-FUNC_END(_restgpr_27_x)\n-FUNC_END(_restgpr_26_x)\n-FUNC_END(_restgpr_25_x)\n-FUNC_END(_restgpr_24_x)\n-FUNC_END(_restgpr_23_x)\n-FUNC_END(_restgpr_22_x)\n-FUNC_END(_restgpr_21_x)\n-FUNC_END(_restgpr_20_x)\n-FUNC_END(_restgpr_19_x)\n-FUNC_END(_restgpr_18_x)\n-FUNC_END(_restgpr_17_x)\n-FUNC_END(_restgpr_16_x)\n-FUNC_END(_restgpr_15_x)\n-FUNC_END(_restgpr_14_x)\n-\n-#else /* __powerpc64__ */\n-\n-\t.section \".text\"\n-\t.align 2\n-\n-/* Routines for saving floating point registers, called by the compiler.  */\n-\n-.fsav:\n-FUNC_START(_savef14)\tstfd\t14,-144(1)\t/* save fp registers */\n-FUNC_START(_savef15)\tstfd\t15,-136(1)\n-FUNC_START(_savef16)\tstfd\t16,-128(1)\n-FUNC_START(_savef17)\tstfd\t17,-120(1)\n-FUNC_START(_savef18)\tstfd\t18,-112(1)\n-FUNC_START(_savef19)\tstfd\t19,-104(1)\n-FUNC_START(_savef20)\tstfd\t20,-96(1)\n-FUNC_START(_savef21)\tstfd\t21,-88(1)\n-FUNC_START(_savef22)\tstfd\t22,-80(1)\n-FUNC_START(_savef23)\tstfd\t23,-72(1)\n-FUNC_START(_savef24)\tstfd\t24,-64(1)\n-FUNC_START(_savef25)\tstfd\t25,-56(1)\n-FUNC_START(_savef26)\tstfd\t26,-48(1)\n-FUNC_START(_savef27)\tstfd\t27,-40(1)\n-FUNC_START(_savef28)\tstfd\t28,-32(1)\n-FUNC_START(_savef29)\tstfd\t29,-24(1)\n-FUNC_START(_savef30)\tstfd\t30,-16(1)\n-FUNC_START(_savef31)\tstfd\t31,-8(1)\n-\t\t\tblr\n-.LTfsav:\n-\t\t\t.long 0\n-\t\t\t.byte 0,12,0,0,0,0,0,0\n-\t\t\t.long 0\n-\t\t\t.long .LTfsav-.fsav\n-\t\t\t.short 4\n-\t\t\t.ascii \"fsav\"\n-FUNC_END(_savef31)\n-FUNC_END(_savef30)\n-FUNC_END(_savef29)\n-FUNC_END(_savef28)\n-FUNC_END(_savef27)\n-FUNC_END(_savef26)\n-FUNC_END(_savef25)\n-FUNC_END(_savef24)\n-FUNC_END(_savef23)\n-FUNC_END(_savef22)\n-FUNC_END(_savef21)\n-FUNC_END(_savef20)\n-FUNC_END(_savef19)\n-FUNC_END(_savef18)\n-FUNC_END(_savef17)\n-FUNC_END(_savef16)\n-FUNC_END(_savef15)\n-FUNC_END(_savef14)\n-\n-/* Routines for restoring floating point registers, called by the compiler.  */\n-\n-.fres:\n-FUNC_START(_restf14)\tlfd\t14,-144(1)\t/* restore fp registers */\n-FUNC_START(_restf15)\tlfd\t15,-136(1)\n-FUNC_START(_restf16)\tlfd\t16,-128(1)\n-FUNC_START(_restf17)\tlfd\t17,-120(1)\n-FUNC_START(_restf18)\tlfd\t18,-112(1)\n-FUNC_START(_restf19)\tlfd\t19,-104(1)\n-FUNC_START(_restf20)\tlfd\t20,-96(1)\n-FUNC_START(_restf21)\tlfd\t21,-88(1)\n-FUNC_START(_restf22)\tlfd\t22,-80(1)\n-FUNC_START(_restf23)\tlfd\t23,-72(1)\n-FUNC_START(_restf24)\tlfd\t24,-64(1)\n-FUNC_START(_restf25)\tlfd\t25,-56(1)\n-FUNC_START(_restf26)\tlfd\t26,-48(1)\n-FUNC_START(_restf27)\tlfd\t27,-40(1)\n-FUNC_START(_restf28)\tlfd\t28,-32(1)\n-FUNC_START(_restf29)\tlfd\t29,-24(1)\n-FUNC_START(_restf30)\tlfd\t30,-16(1)\n-FUNC_START(_restf31)\tlfd\t31,-8(1)\n-\t\t\tblr\n-.LTfres:\n-\t\t\t.long 0\n-\t\t\t.byte 0,12,0,0,0,0,0,0\n-\t\t\t.long 0\n-\t\t\t.long .LTfres-.fres\n-\t\t\t.short 4\n-\t\t\t.ascii \"fres\"\n-FUNC_END(_restf31)\n-FUNC_END(_restf30)\n-FUNC_END(_restf29)\n-FUNC_END(_restf28)\n-FUNC_END(_restf27)\n-FUNC_END(_restf26)\n-FUNC_END(_restf25)\n-FUNC_END(_restf24)\n-FUNC_END(_restf23)\n-FUNC_END(_restf22)\n-FUNC_END(_restf21)\n-FUNC_END(_restf20)\n-FUNC_END(_restf19)\n-FUNC_END(_restf18)\n-FUNC_END(_restf17)\n-FUNC_END(_restf16)\n-FUNC_END(_restf15)\n-FUNC_END(_restf14)\n-\n #endif"}, {"sha": "b39d4f0d6acca42328a16d16f225099fdfedbc2b", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c061e67397606a6dbdf3ea2b41a033f1ba7648/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c061e67397606a6dbdf3ea2b41a033f1ba7648/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=71c061e67397606a6dbdf3ea2b41a033f1ba7648", "patch": "@@ -87,10 +87,6 @@ Boston, MA 02111-1307, USA.  */\n #undef  JUMP_TABLES_IN_TEXT_SECTION\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n-/* Define cutoff for using external functions to save floating point.  */\n-#undef  FP_SAVE_INLINE\n-#define FP_SAVE_INLINE(FIRST_REG) ((FIRST_REG) == 62 || (FIRST_REG) == 63)\n-\n /* 64-bit PowerPC Linux always has GPR13 fixed.  */\n #define FIXED_R13\t\t1\n \n@@ -142,9 +138,29 @@ Boston, MA 02111-1307, USA.  */\n #define LINK_OS_DEFAULT_SPEC \"%(link_os_linux)\"\n \n #undef  LINK_OS_LINUX_SPEC\n+#ifndef CROSS_COMPILE\n #define LINK_OS_LINUX_SPEC \"-m elf64ppc %{!shared: %{!static: \\\n   %{rdynamic:-export-dynamic} \\\n-  %{!dynamic-linker:-dynamic-linker /lib/ld.so.1}}}\"\n+  %{!dynamic-linker:-dynamic-linker /lib64/ld.so.1}}}\"\n+#else\n+#define LINK_OS_LINUX_SPEC \"-m elf64ppc %{!shared: %{!static: \\\n+  %{rdynamic:-export-dynamic} \\\n+  %{!dynamic-linker:-dynamic-linker ld.so.1}}}\"\n+#endif\n+\n+#ifndef CROSS_COMPILE\n+#undef  STARTFILE_LINUX_SPEC\n+#define STARTFILE_LINUX_SPEC \"\\\n+%{!shared: %{pg:/usr/lib64/gcrt1.o%s} %{!pg:%{p:/usr/lib64/gcrt1.o%s} \\\n+  %{!p:/usr/lib64/crt1.o%s}}} /usr/lib64/crti.o%s \\\n+%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+#endif\n+\n+#ifndef CROSS_COMPILE\n+#undef  ENDFILE_LINUX_SPEC\n+#define ENDFILE_LINUX_SPEC \"\\\n+%{!shared:crtend.o%s} %{shared:crtendS.o%s} /usr/lib64/crtn.o%s\"\n+#endif\n \n #undef  TOC_SECTION_ASM_OP\n #define TOC_SECTION_ASM_OP \"\\t.section\\t\\\".toc\\\",\\\"aw\\\"\""}, {"sha": "8caa1cc21c9949f2c3abe69d13f76614293feac7", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c061e67397606a6dbdf3ea2b41a033f1ba7648/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c061e67397606a6dbdf3ea2b41a033f1ba7648/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=71c061e67397606a6dbdf3ea2b41a033f1ba7648", "patch": "@@ -1107,7 +1107,7 @@ do {\t\t\t\t\t\t\\\n \n /* Override svr4.h definition.  */\n #undef\tENDFILE_SPEC\n-#define\tENDFILE_SPEC \"\\\n+#define\tENDFILE_SPEC \"crtsavres.o%s \\\n %{mads: %(endfile_ads)} \\\n %{myellowknife: %(endfile_yellowknife)} \\\n %{mmvme: %(endfile_mvme)} \\"}, {"sha": "7570af4c6418ae44c2e13628d2ef55718c3561f9", "filename": "gcc/config/rs6000/t-ppccomm", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c061e67397606a6dbdf3ea2b41a033f1ba7648/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c061e67397606a6dbdf3ea2b41a033f1ba7648/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppccomm?ref=71c061e67397606a6dbdf3ea2b41a033f1ba7648", "patch": "@@ -40,7 +40,8 @@ INSTALL_LIBGCC = install-multilib\n EXTRA_MULTILIB_PARTS = crtbegin$(objext) crtend$(objext) \\\n   crtbeginS$(objext) crtendS$(objext) crtbeginT$(objext) \\\n   ecrti$(objext) ecrtn$(objext) \\\n-  ncrti$(objext) ncrtn$(objext)\n+  ncrti$(objext) ncrtn$(objext) \\\n+  crtsavres$(objext)\n \n # We build {e,n}crti.o and {e,n}crtn.o, which serve to add begin and\n # end labels to all of the special sections used when we link using gcc.\n@@ -58,6 +59,9 @@ ncrti.S: $(srcdir)/config/rs6000/sol-ci.asm\n ncrtn.S: $(srcdir)/config/rs6000/sol-cn.asm\n \tcat $(srcdir)/config/rs6000/sol-cn.asm >ncrtn.S\n \n+crtsavres.S: $(srcdir)/config/rs6000/crtsavres.asm\n+\tcat $(srcdir)/config/rs6000/crtsavres.asm >crtsavres.S\n+\n # Build multiple copies of ?crt{i,n}.o, one for each target switch.\n $(T)ecrti$(objext): ecrti.S\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrti.S -o $(T)ecrti$(objext)\n@@ -71,6 +75,9 @@ $(T)ncrti$(objext): ncrti.S\n $(T)ncrtn$(objext): ncrtn.S\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ncrtn.S -o $(T)ncrtn$(objext)\n \n+$(T)crtsavres$(objext): crtsavres.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtsavres.S -o $(T)crtsavres$(objext)\n+\n # It is important that crtbegin.o, etc., aren't surprised by stuff in .sdata.\n CRTSTUFF_T_CFLAGS = -msdata=none\n # Make sure crt*.o are built with -fPIC even if configured with "}]}