{"sha": "62ae25292b0fc269e22127fa350221fb957f2ad8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJhZTI1MjkyYjBmYzI2OWUyMjEyN2ZhMzUwMjIxZmI5NTdmMmFkOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-03-12T22:36:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-03-12T22:36:55Z"}, "message": "c-lex.c (cb_ident, c_lex): Remove unnecessary cast.\n\n\t* c-lex.c (cb_ident, c_lex): Remove unnecessary cast.\n\t(lex_string): Use unsigned char pointers.\n\n\t* gcc.c-torture/execute/wchar_t-1.c: New test.\n\nFrom-SVN: r50689", "tree": {"sha": "42cb4e2538ed7a1b69b7e899ac95bf8a7e172c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42cb4e2538ed7a1b69b7e899ac95bf8a7e172c8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62ae25292b0fc269e22127fa350221fb957f2ad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ae25292b0fc269e22127fa350221fb957f2ad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ae25292b0fc269e22127fa350221fb957f2ad8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ae25292b0fc269e22127fa350221fb957f2ad8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46f56f54c4965ef4aceb93d50d3f0497b3743cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46f56f54c4965ef4aceb93d50d3f0497b3743cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46f56f54c4965ef4aceb93d50d3f0497b3743cda"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "a8d6824927b5e2ae13c04ee85a6f0ad55b0efaeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ae25292b0fc269e22127fa350221fb957f2ad8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ae25292b0fc269e22127fa350221fb957f2ad8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62ae25292b0fc269e22127fa350221fb957f2ad8", "patch": "@@ -1,3 +1,8 @@\n+2002-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-lex.c (cb_ident, c_lex): Remove unnecessary cast.\n+\t(lex_string): Use unsigned char pointers.\n+\n 2002-03-12  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* reload1.c (reload): Ignore MEM REG_EQUIV notes if the equivalent"}, {"sha": "d157a3f0db2fd6bba5c0e3c6cd4f153ebc4d9e36", "filename": "gcc/c-lex.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ae25292b0fc269e22127fa350221fb957f2ad8/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ae25292b0fc269e22127fa350221fb957f2ad8/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=62ae25292b0fc269e22127fa350221fb957f2ad8", "patch": "@@ -85,7 +85,8 @@ static int ignore_escape_flag;\n \n static void parse_float\t\tPARAMS ((PTR));\n static tree lex_number\t\tPARAMS ((const char *, unsigned int));\n-static tree lex_string\t\tPARAMS ((const char *, unsigned int, int));\n+static tree lex_string\t\tPARAMS ((const unsigned char *, unsigned int,\n+\t\t\t\t\t int));\n static tree lex_charconst\tPARAMS ((const cpp_token *));\n static void update_header_times\tPARAMS ((const char *));\n static int dump_one_header\tPARAMS ((splay_tree_node, void *));\n@@ -239,7 +240,7 @@ cb_ident (pfile, line, str)\n   if (! flag_no_ident)\n     {\n       /* Convert escapes in the string.  */\n-      tree value = lex_string ((const char *)str->text, str->len, 0);\n+      tree value = lex_string (str->text, str->len, 0);\n       ASM_OUTPUT_IDENT (asm_out_file, TREE_STRING_POINTER (value));\n     }\n #endif\n@@ -807,8 +808,8 @@ c_lex (value)\n \n     case CPP_STRING:\n     case CPP_WSTRING:\n-      *value = lex_string ((const char *)tok->val.str.text,\n-\t\t\t   tok->val.str.len, tok->type == CPP_WSTRING);\n+      *value = lex_string (tok->val.str.text, tok->val.str.len,\n+\t\t\t   tok->type == CPP_WSTRING);\n       break;\n \n       /* These tokens should not be visible outside cpplib.  */\n@@ -1282,14 +1283,14 @@ lex_number (str, len)\n \n static tree\n lex_string (str, len, wide)\n-     const char *str;\n+     const unsigned char *str;\n      unsigned int len;\n      int wide;\n {\n   tree value;\n   char *buf = alloca ((len + 1) * (wide ? WCHAR_BYTES : 1));\n   char *q = buf;\n-  const char *p = str, *limit = str + len;\n+  const unsigned char *p = str, *limit = str + len;\n   unsigned int c;\n   unsigned width = wide ? WCHAR_TYPE_SIZE\n \t\t\t: TYPE_PRECISION (char_type_node);\n@@ -1305,7 +1306,7 @@ lex_string (str, len, wide)\n       wchar_t wc;\n       int char_len;\n \n-      char_len = local_mbtowc (&wc, p, limit - p);\n+      char_len = local_mbtowc (&wc, (const char *) p, limit - p);\n       if (char_len == -1)\n \t{\n \t  warning (\"ignoring invalid multibyte character\");\n@@ -1329,8 +1330,7 @@ lex_string (str, len, wide)\n \t    mask = ((unsigned int) 1 << width) - 1;\n \t  else\n \t    mask = ~0;\n-\t  c = cpp_parse_escape (parse_in, (const unsigned char **) &p,\n-\t\t\t\t(const unsigned char *) limit, mask);\n+\t  c = cpp_parse_escape (parse_in, &p, limit, mask);\n \t}\n \t\n       /* Add this single character into the buffer either as a wchar_t"}, {"sha": "ae6ec906b282771dfbbb3ddd472d8a080f51d529", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ae25292b0fc269e22127fa350221fb957f2ad8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ae25292b0fc269e22127fa350221fb957f2ad8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62ae25292b0fc269e22127fa350221fb957f2ad8", "patch": "@@ -1,3 +1,7 @@\n+2002-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/wchar_t-1.c: New test.\n+\n 2002-03-12  David Edelsohn  <edelsohn@gnu.org>\n \n         * gcc.dg/20020103-1.c: Add rs6000 target and macro."}, {"sha": "51f91d6ad461f797f0fac81c9df0e02c27825cd6", "filename": "gcc/testsuite/gcc.c-torture/execute/wchar_t-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ae25292b0fc269e22127fa350221fb957f2ad8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fwchar_t-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ae25292b0fc269e22127fa350221fb957f2ad8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fwchar_t-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fwchar_t-1.c?ref=62ae25292b0fc269e22127fa350221fb957f2ad8", "patch": "@@ -0,0 +1,16 @@\n+typedef __WCHAR_TYPE__ wchar_t;\n+wchar_t x[] = L\"\ufffd\";\n+wchar_t y = L'\ufffd';\n+extern void abort (void);\n+extern void exit (int);\n+\n+int main (void)\n+{\n+  if (sizeof (x) / sizeof (wchar_t) != 2)\n+    abort ();\n+  if (x[0] != L'\ufffd' || x[1] != L'\\0')\n+    abort ();\n+  if (y != L'\ufffd')\n+    abort ();\n+  exit (0);\n+}"}]}