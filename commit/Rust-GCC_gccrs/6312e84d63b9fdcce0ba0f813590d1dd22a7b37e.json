{"sha": "6312e84d63b9fdcce0ba0f813590d1dd22a7b37e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMxMmU4NGQ2M2I5ZmRjY2UwYmEwZjgxMzU5MGQxZGQyMmE3YjM3ZQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-06-11T19:56:18Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-06-11T19:56:18Z"}, "message": "c-common.c (conversion_warning): Warn at expression location.\n\n2010-06-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\nc-family/\n        * c-common.c (conversion_warning): Warn at expression\n\tlocation.\n\nFrom-SVN: r160631", "tree": {"sha": "054d2a26cd3808fe14b8216d53eda4e92448616c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/054d2a26cd3808fe14b8216d53eda4e92448616c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6312e84d63b9fdcce0ba0f813590d1dd22a7b37e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6312e84d63b9fdcce0ba0f813590d1dd22a7b37e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6312e84d63b9fdcce0ba0f813590d1dd22a7b37e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6312e84d63b9fdcce0ba0f813590d1dd22a7b37e/comments", "author": null, "committer": null, "parents": [{"sha": "d4d1606b284058e02290abda66eded7c6a33d152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d1606b284058e02290abda66eded7c6a33d152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d1606b284058e02290abda66eded7c6a33d152"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "785ae95242f961044e242dc45d1b25dfb509ae03", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6312e84d63b9fdcce0ba0f813590d1dd22a7b37e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6312e84d63b9fdcce0ba0f813590d1dd22a7b37e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6312e84d63b9fdcce0ba0f813590d1dd22a7b37e", "patch": "@@ -1,3 +1,8 @@\n+2010-06-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+        * c-common.c (conversion_warning): Warn at expression\n+\tlocation.\n+\n 2010-06-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-opts.c (c_common_handle_option): Don't handle"}, {"sha": "f1dfe71fa8dcbfdb16066c6efd70e7dfd86953db", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6312e84d63b9fdcce0ba0f813590d1dd22a7b37e/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6312e84d63b9fdcce0ba0f813590d1dd22a7b37e/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=6312e84d63b9fdcce0ba0f813590d1dd22a7b37e", "patch": "@@ -1838,6 +1838,8 @@ conversion_warning (tree type, tree expr)\n   int i;\n   const int expr_num_operands = TREE_OPERAND_LENGTH (expr);\n   tree expr_type = TREE_TYPE (expr);\n+  location_t loc = EXPR_HAS_LOCATION (expr)\n+    ? EXPR_LOCATION (expr) : input_location;\n \n   if (!warn_conversion && !warn_sign_conversion)\n     return;\n@@ -1869,8 +1871,8 @@ conversion_warning (tree type, tree expr)\n \t can hold the values 0 and -1) doesn't lose information - but\n \t it does change the value.  */\n       if (TYPE_PRECISION (type) == 1 && !TYPE_UNSIGNED (type))\n-\twarning (OPT_Wconversion,\n-                 \"conversion to %qT from boolean expression\", type);\n+\twarning_at (loc, OPT_Wconversion,\n+\t\t    \"conversion to %qT from boolean expression\", type);\n       return;\n \n     case REAL_CST:\n@@ -1891,11 +1893,11 @@ conversion_warning (tree type, tree expr)\n         {\n           if (TYPE_UNSIGNED (type) && !TYPE_UNSIGNED (expr_type)\n \t      && tree_int_cst_sgn (expr) < 0)\n-\t    warning (OPT_Wsign_conversion,\n-\t\t     \"negative integer implicitly converted to unsigned type\");\n+\t    warning_at (loc, OPT_Wsign_conversion, \"negative integer\"\n+\t\t\t\" implicitly converted to unsigned type\");\n           else if (!TYPE_UNSIGNED (type) && TYPE_UNSIGNED (expr_type))\n-\t    warning (OPT_Wsign_conversion,  \"conversion of unsigned constant \"\n-\t\t     \"value to negative integer\");\n+\t    warning_at (loc, OPT_Wsign_conversion, \"conversion of unsigned\"\n+\t\t\t\" constant value to negative integer\");\n \t  else\n \t    give_warning = true;\n         }\n@@ -1920,9 +1922,9 @@ conversion_warning (tree type, tree expr)\n         }\n \n       if (give_warning)\n-        warning (OPT_Wconversion,\n-                 \"conversion to %qT alters %qT constant value\",\n-                 type, expr_type);\n+        warning_at (loc, OPT_Wconversion,\n+\t\t    \"conversion to %qT alters %qT constant value\",\n+\t\t    type, expr_type);\n \n       return;\n \n@@ -2013,9 +2015,9 @@ conversion_warning (tree type, tree expr)\n \t\t      unsigned but expr is signed, then negative values\n \t\t      will be changed.  */\n \t\t   || (TYPE_UNSIGNED (type) && !TYPE_UNSIGNED (expr_type)))\n-\t    warning (OPT_Wsign_conversion, \"conversion to %qT from %qT \"\n-\t\t     \"may change the sign of the result\",\n-\t\t     type, expr_type);\n+\t    warning_at (loc, OPT_Wsign_conversion, \"conversion to %qT from %qT \"\n+\t\t\t\"may change the sign of the result\",\n+\t\t\ttype, expr_type);\n         }\n \n       /* Warn for integer types converted to real types if and only if\n@@ -2049,9 +2051,9 @@ conversion_warning (tree type, tree expr)\n \n \n       if (give_warning)\n-        warning (OPT_Wconversion,\n-                 \"conversion to %qT from %qT may alter its value\",\n-                 type, expr_type);\n+        warning_at (loc, OPT_Wconversion,\n+\t\t    \"conversion to %qT from %qT may alter its value\",\n+\t\t    type, expr_type);\n     }\n }\n "}]}