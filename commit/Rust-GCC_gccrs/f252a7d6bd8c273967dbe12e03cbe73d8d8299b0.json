{"sha": "f252a7d6bd8c273967dbe12e03cbe73d8d8299b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI1MmE3ZDZiZDhjMjczOTY3ZGJlMTJlMDNjYmU3M2Q4ZDgyOTliMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-08-01T09:10:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-01T09:10:16Z"}, "message": "utils.c (convert_vms_descriptor): Add gnu_expr_alt_type parameter.\n\n2008-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gcc-interface/utils.c (convert_vms_descriptor): Add gnu_expr_alt_type\n\tparameter.\n\tConvert the expression to it instead of changing its type in place.\n\t(build_function_stub): Adjust call to above function.\n\nFrom-SVN: r138492", "tree": {"sha": "65abc460cc52a6c555590bf5fcbfdb3bdd964178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65abc460cc52a6c555590bf5fcbfdb3bdd964178"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f252a7d6bd8c273967dbe12e03cbe73d8d8299b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f252a7d6bd8c273967dbe12e03cbe73d8d8299b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f252a7d6bd8c273967dbe12e03cbe73d8d8299b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f252a7d6bd8c273967dbe12e03cbe73d8d8299b0/comments", "author": null, "committer": null, "parents": [{"sha": "1cb17b78bde3fabd9dec0898b2528a952b2cbc11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb17b78bde3fabd9dec0898b2528a952b2cbc11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb17b78bde3fabd9dec0898b2528a952b2cbc11"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "a294cf6e137cd0d9ac8a538d142c74a6c9ec2060", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f252a7d6bd8c273967dbe12e03cbe73d8d8299b0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f252a7d6bd8c273967dbe12e03cbe73d8d8299b0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f252a7d6bd8c273967dbe12e03cbe73d8d8299b0", "patch": "@@ -1,3 +1,10 @@\n+2008-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (convert_vms_descriptor): Add gnu_expr_alt_type\n+\tparameter.\n+\tConvert the expression to it instead of changing its type in place.\n+\t(build_function_stub): Adjust call to above function.\n+\n 2008-08-01  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch6.adb (Process_PPCs): Don't copy spec PPC to body if not"}, {"sha": "9978ebcf3a1220b1864ba909e13ffdd6e5d678aa", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f252a7d6bd8c273967dbe12e03cbe73d8d8299b0/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f252a7d6bd8c273967dbe12e03cbe73d8d8299b0/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=f252a7d6bd8c273967dbe12e03cbe73d8d8299b0", "patch": "@@ -3564,54 +3564,45 @@ convert_vms_descriptor32 (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n     gcc_unreachable ();\n }\n \n-/* Convert GNU_EXPR, a pointer to a VMS descriptor, to GNU_TYPE, a\n-   regular pointer or fat pointer type.  GNAT_SUBPROG is the subprogram to\n-   which the VMS descriptor is passed.  */\n+/* Convert GNU_EXPR, a pointer to a VMS descriptor, to GNU_TYPE, a regular\n+   pointer or fat pointer type.  GNU_EXPR_ALT_TYPE is the alternate (32-bit)\n+   pointer type of GNU_EXPR.  GNAT_SUBPROG is the subprogram to which the\n+   VMS descriptor is passed.  */\n \n static tree\n-convert_vms_descriptor (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n+convert_vms_descriptor (tree gnu_type, tree gnu_expr, tree gnu_expr_alt_type,\n+\t\t\tEntity_Id gnat_subprog)\n {\n   tree desc_type = TREE_TYPE (TREE_TYPE (gnu_expr));\n   tree desc = build1 (INDIRECT_REF, desc_type, gnu_expr);\n   tree mbo = TYPE_FIELDS (desc_type);\n   const char *mbostr = IDENTIFIER_POINTER (DECL_NAME (mbo));\n   tree mbmo = TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (mbo)));\n-  tree is64bit;\n-  tree save_type = TREE_TYPE (gnu_expr);\n-  tree gnu_expr32, gnu_expr64;\n+  tree is64bit, gnu_expr32, gnu_expr64;\n \n+  /* If the field name is not MBO, it must be 32-bit and no alternate.\n+     Otherwise primary must be 64-bit and alternate 32-bit.  */\n   if (strcmp (mbostr, \"MBO\") != 0)\n-    /* If the field name is not MBO, it must be 32bit and no alternate */\n     return convert_vms_descriptor32 (gnu_type, gnu_expr, gnat_subprog);\n \n-  /* Otherwise primary must be 64bit and alternate 32bit */\n-\n-  /* Test for 64bit descriptor */\n+  /* Build the test for 64-bit descriptor.  */\n   mbo = build3 (COMPONENT_REF, TREE_TYPE (mbo), desc, mbo, NULL_TREE);\n   mbmo = build3 (COMPONENT_REF, TREE_TYPE (mbmo), desc, mbmo, NULL_TREE);\n-  is64bit = build_binary_op (TRUTH_ANDIF_EXPR, integer_type_node,\n-            build_binary_op (EQ_EXPR, integer_type_node,\n-                                convert (integer_type_node, mbo),\n-                                integer_one_node),\n-            build_binary_op (EQ_EXPR, integer_type_node,\n-                                convert (integer_type_node, mbmo),\n-                                integer_minus_one_node));\n-\n-  gnu_expr64 = convert_vms_descriptor64 (gnu_type, gnu_expr,\n-                                         gnat_subprog);\n-  /* Convert 32bit alternate. Hack alert ??? */\n-  TREE_TYPE (gnu_expr) = DECL_PARM_ALT (gnu_expr);\n-  gnu_expr32 = convert_vms_descriptor32 (gnu_type, gnu_expr,\n-                                         gnat_subprog);\n-  TREE_TYPE (gnu_expr) = save_type;\n-\n-  if (POINTER_TYPE_P (gnu_type))\n-     return build3 (COND_EXPR, gnu_type, is64bit, gnu_expr64, gnu_expr32);\n-\n-  else if (TYPE_FAT_POINTER_P (gnu_type))\n-      return build3 (COND_EXPR, gnu_type, is64bit, gnu_expr64, gnu_expr32);\n-  else\n-    gcc_unreachable ();\n+  is64bit\n+    = build_binary_op (TRUTH_ANDIF_EXPR, integer_type_node,\n+\t\t       build_binary_op (EQ_EXPR, integer_type_node,\n+\t\t\t\t\tconvert (integer_type_node, mbo),\n+\t\t\t\t\tinteger_one_node),\n+\t\t       build_binary_op (EQ_EXPR, integer_type_node,\n+\t\t\t\t\tconvert (integer_type_node, mbmo),\n+\t\t\t\t\tinteger_minus_one_node));\n+\n+  /* Build the 2 possible end results.  */\n+  gnu_expr64 = convert_vms_descriptor64 (gnu_type, gnu_expr, gnat_subprog);\n+  gnu_expr = fold_convert (gnu_expr_alt_type, gnu_expr);\n+  gnu_expr32 = convert_vms_descriptor32 (gnu_type, gnu_expr, gnat_subprog);\n+\n+  return build3 (COND_EXPR, gnu_type, is64bit, gnu_expr64, gnu_expr32);\n }\n \n /* Build a stub for the subprogram specified by the GCC tree GNU_SUBPROG\n@@ -3642,8 +3633,11 @@ build_function_stub (tree gnu_subprog, Entity_Id gnat_subprog)\n        gnu_arg_types = TREE_CHAIN (gnu_arg_types))\n     {\n       if (DECL_BY_DESCRIPTOR_P (gnu_stub_param))\n-\tgnu_param = convert_vms_descriptor (TREE_VALUE (gnu_arg_types),\n-\t\t\t\t\t    gnu_stub_param, gnat_subprog);\n+\tgnu_param\n+\t  = convert_vms_descriptor (TREE_VALUE (gnu_arg_types),\n+\t\t\t\t    gnu_stub_param,\n+\t\t\t\t    DECL_PARM_ALT_TYPE (gnu_stub_param),\n+\t\t\t\t    gnat_subprog);\n       else\n \tgnu_param = gnu_stub_param;\n "}]}