{"sha": "b6ac804e3d3e38f8c9b9974b0e17ce70673209e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZhYzgwNGUzZDNlMzhmOGM5Yjk5NzRiMGUxN2NlNzA2NzMyMDllOA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-08-10T09:10:25Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-08-10T09:10:25Z"}, "message": "Connection.java (gotHeaders): Removed.\n\n2000-08-10  Bryce McKinlay  <bryce@albatross.co.nz>\n\t    John Stracke <francis@ecal.com>\n\n\t* gnu/gcj/protocol/http/Connection.java (gotHeaders): Removed.\n\t(connect): Don't falsely claim HTTP/1.1 compliance. Call\n\tgetHttpHeaders().\n\t(disconnect): Don't unset connected flag.\n\t(getHeaderField (String)): Call connect() if not connected.\n\t(getHeaderField (int)): Ditto.\n\t(getHeaderFieldKey): Ditto.\n\t(getHttpHeaders): Don't call connect().\n\t* java/net/HttpURLConnection.java (instanceFollowRedirects,\n\tgotResponseVals): New fields.\n\t(getResponseCode): Call getResponseVals() conditionally.\n\t(getResponseMessage): Ditto.\n\t(getResponseVals): Call connect(). Don't throw\n\tFileNotFoundException.\n\nFrom-SVN: r35603", "tree": {"sha": "c83f347809df3815635d9eb31211347f39ca2f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c83f347809df3815635d9eb31211347f39ca2f5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6ac804e3d3e38f8c9b9974b0e17ce70673209e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ac804e3d3e38f8c9b9974b0e17ce70673209e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6ac804e3d3e38f8c9b9974b0e17ce70673209e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ac804e3d3e38f8c9b9974b0e17ce70673209e8/comments", "author": null, "committer": null, "parents": [{"sha": "9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d"}], "stats": {"total": 110, "additions": 58, "deletions": 52}, "files": [{"sha": "5ff1c321ac020622e903d4cfa756412dad9c2134", "filename": "libjava/gnu/gcj/protocol/http/Connection.java", "status": "modified", "additions": 41, "deletions": 43, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ac804e3d3e38f8c9b9974b0e17ce70673209e8/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fhttp%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ac804e3d3e38f8c9b9974b0e17ce70673209e8/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fhttp%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fhttp%2FConnection.java?ref=b6ac804e3d3e38f8c9b9974b0e17ce70673209e8", "patch": "@@ -1,6 +1,6 @@\n // Connection.java - Implementation of HttpURLConnection for http protocol.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -37,7 +37,6 @@ class Connection extends HttpURLConnection\n   private Hashtable requestProperties;\n   private Hashtable hdrHash = new Hashtable();\n   private Vector hdrVec = new Vector();\n-  private boolean gotHeaders = false;\n   private BufferedInputStream bufferedIn;\n \n   public Connection(URL url)\n@@ -94,14 +93,15 @@ public void connect() throws IOException\n     PrintWriter out = new PrintWriter(sock.getOutputStream());\n \n     // Send request including any request properties that were set.\n-    out.print(getRequestMethod() + \" \" + url.getFile() + \" HTTP/1.1\\n\");\n+    out.print(getRequestMethod() + \" \" + url.getFile() + \" HTTP/1.0\\n\");\n     out.print(\"Host: \" + url.getHost() + \":\" + port + \"\\n\");\n     Enumeration reqKeys = requestProperties.keys();\n     Enumeration reqVals = requestProperties.elements();\n     while (reqKeys.hasMoreElements())\n       out.print(reqKeys.nextElement() + \": \" + reqVals.nextElement() + \"\\n\");\n     out.print(\"\\n\");\n-    out.flush();\n+    out.flush();    \n+    getHttpHeaders();\n     connected = true;\n   }\n \n@@ -120,7 +120,6 @@ public void disconnect()\n \t  }\n \tsock = null;\n       }\n-    connected = false;\n   }\n \n   // TODO: public boolean usingProxy()\n@@ -135,10 +134,8 @@ public InputStream getInputStream() throws IOException\n     if (!connected)\n       connect();\n \n-    if (! doInput)\n+    if (!doInput)\n       throw new ProtocolException(\"Can't open InputStream if doInput is false\");\n-    if (bufferedIn == null)\n-      bufferedIn = new BufferedInputStream(sock.getInputStream());\n     return bufferedIn;\n   }\n \n@@ -157,48 +154,52 @@ public OutputStream getOutputStream() throws IOException\n   // Override default method in URLConnection.\n   public String getHeaderField(String name)\n   {\n-    try\n-      {\n-\tgetHttpHeaders();\n-      }\n-    catch (IOException x)\n-      {\n-\treturn null;\n-      }\n+    if (!connected)\n+      try\n+        {\n+\t  connect();\n+\t}\n+      catch (IOException x)\n+        {\n+\t  return null;\n+\t}\n+\n     return (String) hdrHash.get(name.toLowerCase());\n   }\n \n   // Override default method in URLConnection.\n   public String getHeaderField(int n)\n   {\n-    try\n-      {\n-\tgetHttpHeaders();\n-      }\n-    catch (IOException x)\n-      {\n-\treturn null;\n-      }\n+    if (!connected)\n+      try\n+        {\n+\t  connect();\n+\t}\n+      catch (IOException x)\n+        {\n+\t  return null;\n+\t}\n+\n     if (n < hdrVec.size())\n       return getField((String) hdrVec.elementAt(n));\n-\n     return null;\n   }\n \n   // Override default method in URLConnection.\n   public String getHeaderFieldKey(int n)\n   {\n-    try\n-      {\n-\tgetHttpHeaders();\n-      }\n-    catch (IOException x)\n-      {\n-\treturn null;\n-      }\n+    if (!connected)\n+      try\n+        {\n+\t  connect();\n+\t}\n+      catch (IOException x)\n+        {\n+\t  return null;\n+\t}\n+\n     if (n < hdrVec.size())\n       return getKey((String) hdrVec.elementAt(n));\n-\n     return null;\n   }\n \n@@ -226,37 +227,34 @@ private String getField(String str)\n \n   private void getHttpHeaders() throws IOException\n   {\n-    if (gotHeaders)\n-      return;\n-    gotHeaders = true;\n-\n-    connect();\n-\n     // Originally tried using a BufferedReader here to take advantage of\n     // the readLine method and avoid the following, but the buffer read\n     // past the end of the headers so the first part of the content was lost.\n     // It is probably more robust than it needs to be, e.g. the byte[]\n     // is unlikely to overflow and a '\\r' should always be followed by a '\\n',\n     // but it is better to be safe just in case.\n-    if (bufferedIn == null)\n-      bufferedIn = new BufferedInputStream(sock.getInputStream());\n+    bufferedIn = new BufferedInputStream(sock.getInputStream());\n \n     int buflen = 100;\n     byte[] buf = new byte[buflen];\n     String line = \"\";\n     boolean gotnl = false;\n     byte[] ch = new byte[1];\n     ch[0] = (byte) '\\n';\n+\n     while (true)\n       {\n \t// Check for leftover byte from non-'\\n' after a '\\r'.\n \tif (ch[0] != '\\n')\n \t  line = line + '\\r' + new String(ch, 0, 1);\n \n \tint i;\n+\t// FIXME: This is rather inefficient.\n \tfor (i = 0; i < buflen; i++)\n \t  {\n-\t    bufferedIn.read(buf, i, 1);\n+\t    buf[i] = (byte) bufferedIn.read();\n+\t    if (buf[i] == -1)\n+\t      throw new IOException(\"Malformed HTTP header\");\n \t    if (buf[i] == '\\r')\n \t      {\n \t        bufferedIn.read(ch, 0, 1);"}, {"sha": "84e9468dfc29ae0439675b44acdeba31b6441255", "filename": "libjava/java/net/HttpURLConnection.java", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ac804e3d3e38f8c9b9974b0e17ce70673209e8/libjava%2Fjava%2Fnet%2FHttpURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ac804e3d3e38f8c9b9974b0e17ce70673209e8/libjava%2Fjava%2Fnet%2FHttpURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FHttpURLConnection.java?ref=b6ac804e3d3e38f8c9b9974b0e17ce70673209e8", "patch": "@@ -1,7 +1,7 @@\n // HttpURLConnection.java - Subclass of communications links using\n //\t\t\tHypertext Transfer Protocol.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -69,11 +69,14 @@ public abstract class HttpURLConnection extends URLConnection\n   public static final int HTTP_GATEWAY_TIMEOUT\t= 504;\n   public static final int HTTP_VERSION\t\t= 505;\n \n+  static boolean followRedirects = true;\n+\n   protected String method = \"GET\";\n   protected int responseCode = -1;\n   protected String responseMessage;\n+  protected boolean instanceFollowRedirects = followRedirects;\n \n-  static boolean followRedirects = true;\n+  private boolean gotResponseVals = false;\n \n   protected HttpURLConnection(URL url)\n   {\n@@ -121,21 +124,30 @@ public String getRequestMethod()\n \n   public int getResponseCode() throws IOException\n   {\n-    getResponseVals();\n+    if (!gotResponseVals)\n+      getResponseVals();\n     return responseCode;\n   }\n \n   public String getResponseMessage() throws IOException\n   {\n-    getResponseVals();\n+    if (!gotResponseVals)\n+      getResponseVals();\n     return responseMessage;\n   }\n \n   private void getResponseVals() throws IOException\n   {\n+    // getHeaderField() will connect for us, but do it here first in\n+    // order to pick up IOExceptions.\n+    if (!connected)\n+      connect();\n+      \n+    gotResponseVals = true;\n     // Response is the first header received from the connection.\n     String respField = getHeaderField(0);\n-    if (! respField.startsWith(\"HTTP/\"))\n+    \n+    if (respField == null || ! respField.startsWith(\"HTTP/\"))\n       {\n \t// Set to default values on failure.\n         responseCode = -1;\n@@ -158,10 +170,6 @@ private void getResponseVals() throws IOException\n         responseCode = -1;\n \tresponseMessage = null;\n       }\n-    if (responseCode == HTTP_NOT_FOUND)\n-      throw new FileNotFoundException(url.toString());\n-    else if (responseCode >= 400)\n-      throw new IOException(url.toString() + \" \" + respField);\n   }\n \n   // TODO12: public Permission getPermission() throws IOException"}]}