{"sha": "3c86fb4e17941da9eb4026bda6301bf0a74a96fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M4NmZiNGUxNzk0MWRhOWViNDAyNmJkYTYzMDFiZjBhNzRhOTZmZQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2006-04-16T20:29:24Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2006-04-16T20:29:24Z"}, "message": "re PR fortran/26017 (allocate (a(1:-1)) should yield zero-sized array)\n\n2006-04-16  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR fortran/26017\n\t* trans-array.c(gfc_array_init_size):  Introduce or_expr\n\twhich is true if the size along any dimension\n\tis negative.  Create a temporary variable with base\n\tname size.  If or_expr is true, set the temporary to 0,\n\tto the normal size otherwise.\n\n2006-04-16  Thomas Koenig  <Thomas.Koenig@online.de>\n\n        * gfortran.dg/allocate_zerosize_1.f90:  New test.\n\nFrom-SVN: r112988", "tree": {"sha": "50e4ad3d8a48e6299d17a219b0a2d98448670795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50e4ad3d8a48e6299d17a219b0a2d98448670795"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c86fb4e17941da9eb4026bda6301bf0a74a96fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c86fb4e17941da9eb4026bda6301bf0a74a96fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c86fb4e17941da9eb4026bda6301bf0a74a96fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c86fb4e17941da9eb4026bda6301bf0a74a96fe/comments", "author": null, "committer": null, "parents": [{"sha": "e13d2b4e53067e117eb250bbf39c948ec6bd48e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e13d2b4e53067e117eb250bbf39c948ec6bd48e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e13d2b4e53067e117eb250bbf39c948ec6bd48e6"}], "stats": {"total": 78, "additions": 76, "deletions": 2}, "files": [{"sha": "05e25db75502f0290c7320260a51db9592047630", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c86fb4e17941da9eb4026bda6301bf0a74a96fe/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c86fb4e17941da9eb4026bda6301bf0a74a96fe/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3c86fb4e17941da9eb4026bda6301bf0a74a96fe", "patch": "@@ -1,3 +1,12 @@\n+2006-04-16  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR fortran/26017\n+\t* trans-array.c(gfc_array_init_size):  Introduce or_expr\n+\twhich is true if the size along any dimension\n+\tis negative.  Create a temporary variable with base\n+\tname size.  If or_expr is true, set the temporary to 0,\n+\tto the normal size otherwise.\n+\n 2006-04-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/26822"}, {"sha": "0157e62cb8792e91631f8a3a3ef3e666248cbee8", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c86fb4e17941da9eb4026bda6301bf0a74a96fe/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c86fb4e17941da9eb4026bda6301bf0a74a96fe/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=3c86fb4e17941da9eb4026bda6301bf0a74a96fe", "patch": "@@ -2939,6 +2939,13 @@ gfc_array_init_size (tree descriptor, int rank, tree * poffset,\n   tree size;\n   tree offset;\n   tree stride;\n+  tree cond;\n+  tree or_expr;\n+  tree thencase;\n+  tree elsecase;\n+  tree var;\n+  stmtblock_t thenblock;\n+  stmtblock_t elseblock;\n   gfc_expr *ubound;\n   gfc_se se;\n   int n;\n@@ -2952,6 +2959,8 @@ gfc_array_init_size (tree descriptor, int rank, tree * poffset,\n   tmp = gfc_conv_descriptor_dtype (descriptor);\n   gfc_add_modify_expr (pblock, tmp, gfc_get_dtype (TREE_TYPE (descriptor)));\n \n+  or_expr = NULL_TREE;\n+\n   for (n = 0; n < rank; n++)\n     {\n       /* We have 3 possibilities for determining the size of the array:\n@@ -3005,6 +3014,14 @@ gfc_array_init_size (tree descriptor, int rank, tree * poffset,\n       /* Calculate the size of this dimension.  */\n       size = fold_build2 (PLUS_EXPR, gfc_array_index_type, se.expr, size);\n \n+      /* Check wether the size for this dimension is negative.  */\n+      cond = fold_build2 (LE_EXPR, boolean_type_node, size,\n+\t\t\t  gfc_index_zero_node);\n+      if (n == 0)\n+\tor_expr = cond;\n+      else\n+\tor_expr = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, or_expr, cond);\n+\n       /* Multiply the stride by the number of elements in this dimension.  */\n       stride = fold_build2 (MULT_EXPR, gfc_array_index_type, stride, size);\n       stride = gfc_evaluate_now (stride, pblock);\n@@ -3021,8 +3038,20 @@ gfc_array_init_size (tree descriptor, int rank, tree * poffset,\n       *poffset = offset;\n     }\n \n-  size = gfc_evaluate_now (size, pblock);\n-  return size;\n+  var = gfc_create_var (TREE_TYPE (size), \"size\");\n+  gfc_start_block (&thenblock);\n+  gfc_add_modify_expr (&thenblock, var, gfc_index_zero_node);\n+  thencase = gfc_finish_block (&thenblock);\n+\n+  gfc_start_block (&elseblock);\n+  gfc_add_modify_expr (&elseblock, var, size);\n+  elsecase = gfc_finish_block (&elseblock);\n+\n+  tmp = gfc_evaluate_now (or_expr, pblock);\n+  tmp = build3_v (COND_EXPR, tmp, thencase, elsecase);\n+  gfc_add_expr_to_block (pblock, tmp);\n+\n+  return var;\n }\n \n "}, {"sha": "dc960cfa72105ac40787f5824d7f8bb9f2c81cde", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c86fb4e17941da9eb4026bda6301bf0a74a96fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c86fb4e17941da9eb4026bda6301bf0a74a96fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c86fb4e17941da9eb4026bda6301bf0a74a96fe", "patch": "@@ -1,3 +1,8 @@\n+2006-04-16  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+        * gfortran.dg/allocate_zerosize_1.f90:  New test.\n+\n+\n 2006-04-16  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/26365"}, {"sha": "c482ea0f3b331b88e980c19f1d1e5ab9867a7e7d", "filename": "gcc/testsuite/gfortran.dg/allocate_zerosize_1.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c86fb4e17941da9eb4026bda6301bf0a74a96fe/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_zerosize_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c86fb4e17941da9eb4026bda6301bf0a74a96fe/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_zerosize_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_zerosize_1.f90?ref=3c86fb4e17941da9eb4026bda6301bf0a74a96fe", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+program main\n+  implicit none\n+  real, allocatable :: a(:), b(:,:)\n+  integer :: n,m\n+  character (len=2) :: one, two\n+\n+  one = ' 1'\n+  two = ' 2'\n+\n+  allocate (a(1:-1))\n+  if (size(a) /= 0) call abort\n+  deallocate (a)\n+\n+  allocate (b(1:-1,0:10))\n+  if (size(b) /= 0) call abort\n+  deallocate (b)\n+\n+  ! Use variables for array bounds.  The internal reads\n+  ! are there to hide fact that these are actually constant.\n+\n+  read (unit=one, fmt='(I2)') n\n+  allocate (a(n:-1))\n+  if (size(a) /= 0) call abort\n+  deallocate (a)\n+\n+  read (unit=two, fmt='(I2)') m\n+  allocate (b(1:3, m:0))\n+  if (size(b) /= 0) call abort\n+  deallocate (b)\n+end program main"}]}