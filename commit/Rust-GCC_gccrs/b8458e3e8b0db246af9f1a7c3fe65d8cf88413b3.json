{"sha": "b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg0NThlM2U4YjBkYjI0NmFmOWYxYTdjM2ZlNjVkOGNmODg0MTNiMw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-08-04T16:10:14Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-08-04T16:10:14Z"}, "message": "c-common.h (flag_isoc94): Declare.\n\n\t* c-common.h (flag_isoc94): Declare.\n\t* c-decl.c (flag_isoc94): Define.\n\t(c_decode_option): Set flag_isoc94 as appropriate.\n\t* c-common.c (T_PD, T_IM, T_UIM): Define.\n\t(format_char_info): Add tlen and jlen.\n\t(print_char_table): Add entries for %t and %j.  Allow %zn.  Allow\n\t%F.  Allow %lf.\n\t(scan_char_table): Add entries for %t and %j.  Allow %F.  Allow\n\t%l[.\n\t(time_char_table): Add NULL entries for %t and %j.\n\t(check_format_info): Allow for %t and %j.  Warn for %F if pedantic\n\tand not C99.  Warn for %lc, %ls and %l[ if pedantic and not C94.\n\tWarn for printf %lf if pedantic and not C99.  Don't warn for empty\n\tprecision.  Allow precision argument to be unsigned int.  If\n\tpedantic, warn for %p passed an argument not a pointer to possibly\n\tqualified void or a possibly qualified character type, and for\n\tpointer targets of the wrong sign, except for character pointers.\n\ncp:\n\t* decl.c (flag_isoc94): New variable.\n\ntestsuite:\n\t* gcc.dg/c90-printf-1.c, gcc.dg/c94-printf-1.c: New tests.\n\nFrom-SVN: r35482", "tree": {"sha": "4b719a27657bcbad494e3fbe0f70a91f8a9f0e2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b719a27657bcbad494e3fbe0f70a91f8a9f0e2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5ab7f91109e1569bb63c38e2e35e701e5af17ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ab7f91109e1569bb63c38e2e35e701e5af17ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ab7f91109e1569bb63c38e2e35e701e5af17ec"}], "stats": {"total": 463, "additions": 415, "deletions": 48}, "files": [{"sha": "44d151a5262a892756464fe169c03d3a7e6033e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "patch": "@@ -1,3 +1,23 @@\n+2000-08-04  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.h (flag_isoc94): Declare.\n+\t* c-decl.c (flag_isoc94): Define.\n+\t(c_decode_option): Set flag_isoc94 as appropriate.\n+\t* c-common.c (T_PD, T_IM, T_UIM): Define.\n+\t(format_char_info): Add tlen and jlen.\n+\t(print_char_table): Add entries for %t and %j.  Allow %zn.  Allow\n+\t%F.  Allow %lf.\n+\t(scan_char_table): Add entries for %t and %j.  Allow %F.  Allow\n+\t%l[.\n+\t(time_char_table): Add NULL entries for %t and %j.\n+\t(check_format_info): Allow for %t and %j.  Warn for %F if pedantic\n+\tand not C99.  Warn for %lc, %ls and %l[ if pedantic and not C94.\n+\tWarn for printf %lf if pedantic and not C99.  Don't warn for empty\n+\tprecision.  Allow precision argument to be unsigned int.  If\n+\tpedantic, warn for %p passed an argument not a pointer to possibly\n+\tqualified void or a possibly qualified character type, and for\n+\tpointer targets of the wrong sign, except for character pointers.\n+\n 2000-08-04  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* ginclude/stddef.h: Don't declare wint_t unless __need_wint_t."}, {"sha": "5aa69dbc8c50dbfd27c68846c68624728d173853", "filename": "gcc/c-common.c", "status": "modified", "additions": 98, "deletions": 47, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "patch": "@@ -1195,6 +1195,9 @@ strip_attrs (specs_attrs)\n #define T_W\t&wchar_type_node\n #define T_WI\t&wint_type_node\n #define T_ST    &sizetype\n+#define T_PD    &ptrdiff_type_node\n+#define T_IM    NULL /* intmax_t not yet implemented.  */\n+#define T_UIM   NULL /* uintmax_t not yet implemented.  */\n \n typedef struct {\n   const char *format_chars;\n@@ -1219,38 +1222,44 @@ typedef struct {\n   /* Type of argument if length modifiers 'z' or `Z' is used.\n      If NULL, then this modifier is not allowed.  */\n   tree *zlen;\n+  /* Type of argument if length modifier 't' is used.\n+     If NULL, then this modifier is not allowed.  */\n+  tree *tlen;\n+  /* Type of argument if length modifier 'j' is used.\n+     If NULL, then this modifier is not allowed.  */\n+  tree *jlen;\n   /* List of other modifier characters allowed with these options.  */\n   const char *flag_chars;\n } format_char_info;\n \n static format_char_info print_char_table[] = {\n-  { \"di\",\t0,\tT_I,\tT_I,\tT_I,\tT_L,\tT_LL,\tT_LL,\tT_ST,\t\"-wp0 +\"\t},\n-  { \"oxX\",\t0,\tT_UI,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\t\"-wp0#\"\t\t},\n-  { \"u\",\t0,\tT_UI,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\t\"-wp0\"\t\t},\n+  { \"di\",\t0,\tT_I,\tT_I,\tT_I,\tT_L,\tT_LL,\tT_LL,\tT_ST,\tT_PD,\tT_IM,\t\"-wp0 +\"\t},\n+  { \"oxX\",\t0,\tT_UI,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_PD,\tT_UIM,\t\"-wp0#\"\t\t},\n+  { \"u\",\t0,\tT_UI,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_PD,\tT_UIM,\t\"-wp0\"\t\t},\n /* A GNU extension.  */\n-  { \"m\",\t0,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n-  { \"feEgGaA\",\t0,\tT_D,\tNULL,\tNULL,\tNULL,\tNULL,\tT_LD,\tNULL,\t\"-wp0 +#\"\t},\n-  { \"c\",\t0,\tT_I,\tNULL,\tNULL,\tT_WI,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n-  { \"C\",\t0,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n-  { \"s\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n-  { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n-  { \"p\",\t1,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n-  { \"n\",\t1,\tT_I,\tNULL,\tT_S,\tT_L,\tT_LL,\tNULL,\tNULL,\t\"\"\t\t},\n-  { NULL,\t0,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL\t\t}\n+  { \"m\",\t0,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n+  { \"fFeEgGaA\",\t0,\tT_D,\tNULL,\tNULL,\tT_D,\tNULL,\tT_LD,\tNULL,\tNULL,\tNULL,\t\"-wp0 +#\"\t},\n+  { \"c\",\t0,\tT_I,\tNULL,\tNULL,\tT_WI,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n+  { \"C\",\t0,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n+  { \"s\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n+  { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n+  { \"p\",\t1,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n+  { \"n\",\t1,\tT_I,\tNULL,\tT_S,\tT_L,\tT_LL,\tNULL,\tT_ST,\tT_PD,\tT_IM,\t\"\"\t\t},\n+  { NULL,\t0,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL\t\t}\n };\n \n static format_char_info scan_char_table[] = {\n-  { \"di\",\t1,\tT_I,\tT_C,\tT_S,\tT_L,\tT_LL,\tT_LL,\tT_ST,\t\"*\"\t},\n-  { \"ouxX\",\t1,\tT_UI,\tT_UC,\tT_US,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\t\"*\"\t},\n-  { \"efgEGaA\",\t1,\tT_F,\tNULL,\tNULL,\tT_D,\tNULL,\tT_LD,\tNULL,\t\"*\"\t},\n-  { \"c\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n-  { \"s\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n-  { \"[\",\t1,\tT_C,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n-  { \"C\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n-  { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n-  { \"p\",\t2,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n-  { \"n\",\t1,\tT_I,\tT_C,\tT_S,\tT_L,\tT_LL,\tNULL,\tT_ST,\t\"\"\t},\n-  { NULL,\t0,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL\t}\n+  { \"di\",\t1,\tT_I,\tT_C,\tT_S,\tT_L,\tT_LL,\tT_LL,\tT_ST,\tT_PD,\tT_IM,\t\"*\"\t},\n+  { \"ouxX\",\t1,\tT_UI,\tT_UC,\tT_US,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_PD,\tT_UIM,\t\"*\"\t},\n+  { \"efFgEGaA\",\t1,\tT_F,\tNULL,\tNULL,\tT_D,\tNULL,\tT_LD,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n+  { \"c\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n+  { \"s\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n+  { \"[\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n+  { \"C\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n+  { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n+  { \"p\",\t2,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n+  { \"n\",\t1,\tT_I,\tT_C,\tT_S,\tT_L,\tT_LL,\tNULL,\tT_ST,\tT_PD,\tT_IM,\t\"\"\t},\n+  { NULL,\t0,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL\t}\n };\n \n /* Handle format characters recognized by glibc's strftime.c.\n@@ -1262,20 +1271,20 @@ static format_char_info scan_char_table[] = {\n    'G' - other GNU extensions  */\n \n static format_char_info time_char_table[] = {\n-  { \"y\", \t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"2EO-_0w\" },\n-  { \"D\", \t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"2\" },\n-  { \"g\", \t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"2O-_0w\" },\n-  { \"cx\", \t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"3E\" },\n-  { \"%RTXnrt\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"\" },\n-  { \"P\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"G\" },\n-  { \"HIMSUWdemw\",\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0Ow\" },\n-  { \"Vju\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0Oow\" },\n-  { \"Gklsz\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0OGw\" },\n-  { \"ABZa\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"^#\" },\n-  { \"p\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"#\" },\n-  { \"bh\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"^\" },\n-  { \"CY\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0EOw\" },\n-  { NULL,\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }\n+  { \"y\", \t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"2EO-_0w\" },\n+  { \"D\", \t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"2\" },\n+  { \"g\", \t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"2O-_0w\" },\n+  { \"cx\", \t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"3E\" },\n+  { \"%RTXnrt\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"\" },\n+  { \"P\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"G\" },\n+  { \"HIMSUWdemw\",\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0Ow\" },\n+  { \"Vju\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0Oow\" },\n+  { \"Gklsz\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0OGw\" },\n+  { \"ABZa\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"^#\" },\n+  { \"p\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"#\" },\n+  { \"bh\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"^\" },\n+  { \"CY\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0EOw\" },\n+  { NULL,\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }\n };\n \n typedef struct function_format_info\n@@ -1595,6 +1604,7 @@ check_format_info (info, params)\n   while (1)\n     {\n       int aflag;\n+      int char_type_flag = 0;\n       if (*format_chars == 0)\n \t{\n \t  if (format_chars - TREE_STRING_POINTER (format_tree) != format_length)\n@@ -1756,8 +1766,6 @@ check_format_info (info, params)\n \t    {\n \t      precise = TRUE;\n \t      ++format_chars;\n-\t      if (*format_chars != '*' && !ISDIGIT (*format_chars))\n-\t\twarning (\"`.' not followed by `*' or digit in format\");\n \t      /* \"...a...precision...may be indicated by an asterisk.\n \t\t In this case, an int argument supplies the...precision.\"  */\n \t      if (*format_chars == '*')\n@@ -1773,9 +1781,12 @@ check_format_info (info, params)\n \t\t      cur_param = TREE_VALUE (params);\n \t\t      params = TREE_CHAIN (params);\n \t\t      ++arg_num;\n-\t\t      if (TYPE_MAIN_VARIANT (TREE_TYPE (cur_param))\n-\t\t\t  != integer_type_node)\n-\t\t\twarning (\"field width is not type int (arg %d)\",\n+\t\t      if ((TYPE_MAIN_VARIANT (TREE_TYPE (cur_param))\n+\t\t\t   != integer_type_node)\n+\t\t\t  &&\n+\t\t\t  (TYPE_MAIN_VARIANT (TREE_TYPE (cur_param))\n+\t\t\t   != unsigned_type_node))\n+\t\t\twarning (\"field precision is not type int (arg %d)\",\n \t\t\t\t arg_num);\n \t\t    }\n \t\t}\n@@ -1807,6 +1818,13 @@ check_format_info (info, params)\n \t\twarning (\"ANSI C does not support the `%c' length modifier\",\n \t\t\t length_char);\n \t    }\n+\t  else if (*format_chars == 't' || *format_chars == 'j')\n+\t    {\n+\t      length_char = *format_chars++;\n+\t      if (pedantic && !flag_isoc99)\n+\t\twarning (\"ANSI C does not support the `%c' length modifier\",\n+\t\t\t length_char);\n+\t    }\n \t  else\n \t    length_char = 0;\n \t  if (length_char == 'l' && *format_chars == 'l')\n@@ -1845,9 +1863,9 @@ check_format_info (info, params)\n       if (pedantic && info->format_type != strftime_format_type\n \t  && (format_char == 'm' || format_char == 'C' || format_char == 'S'))\n \twarning (\"ANSI C does not support the `%c' format\", format_char);\n-      /* The a and A formats are C99 extensions.  */\n+      /* The a, A and F formats are C99 extensions.  */\n       if (pedantic && info->format_type != strftime_format_type\n-\t  && (format_char == 'a' || format_char == 'A')\n+\t  && (format_char == 'a' || format_char == 'A' || format_char == 'F')\n \t  && !flag_isoc99)\n \twarning (\"ANSI C does not support the `%c' format\", format_char);\n       format_chars++;\n@@ -1952,6 +1970,8 @@ check_format_info (info, params)\n \t\t\t\t\t      ? TYPE_DOMAIN (*fci->zlen)\n \t\t\t\t\t      : *fci->zlen)\n \t\t\t\t\t   : 0); break;\n+\tcase 't': wanted_type = fci->tlen ? *(fci->tlen) : 0; break;\n+\tcase 'j': wanted_type = fci->jlen ? *(fci->jlen) : 0; break;\n \t}\n       if (wanted_type == 0)\n \twarning (\"use of `%c' length character with `%c' type character\",\n@@ -1963,6 +1983,19 @@ check_format_info (info, params)\n \t\t    || format_char == 'g' || format_char == 'G'))\n \twarning (\"ANSI C does not support the `L' length modifier with the `%c' type character\",\n \t\t format_char);\n+      else if (length_char == 'l'\n+\t       && (format_char == 'c' || format_char == 's'\n+\t\t   || format_char == '[')\n+\t       && pedantic && !flag_isoc94)\n+\twarning (\"ANSI C89 does not support the `l' length modifier with the `%c' type character\",\n+\t\t format_char);\n+      else if (info->format_type == printf_format_type && pedantic\n+\t       && !flag_isoc99 && length_char == 'l'\n+\t       && (format_char == 'f' || format_char == 'e'\n+\t\t   || format_char == 'E' || format_char == 'g'\n+\t\t   || format_char == 'G'))\n+\twarning (\"ANSI C does not support the `l' length modifier with the `%c' type character\",\n+\t\t format_char);\n \n       /* Finally. . .check type of argument against desired type!  */\n       if (info->first_arg_num == 0)\n@@ -2021,23 +2054,41 @@ check_format_info (info, params)\n \t\t      || (DECL_P (cur_param) && TREE_READONLY (cur_param))))))\n \twarning (\"writing into constant object (arg %d)\", arg_num);\n \n+      /* Check whether the argument type is a character type.  */\n+      if (TREE_CODE (cur_type) != ERROR_MARK)\n+\tchar_type_flag = (TYPE_MAIN_VARIANT (cur_type) == char_type_node\n+\t\t\t  || TYPE_MAIN_VARIANT (cur_type) == signed_char_type_node\n+\t\t\t  || TYPE_MAIN_VARIANT (cur_type) == unsigned_char_type_node);\n+\n       /* Check the type of the \"real\" argument, if there's a type we want.  */\n       if (i == fci->pointer_count + aflag && wanted_type != 0\n \t  && TREE_CODE (cur_type) != ERROR_MARK\n \t  && wanted_type != TYPE_MAIN_VARIANT (cur_type)\n \t  /* If we want `void *', allow any pointer type.\n-\t     (Anything else would already have got a warning.)  */\n+\t     (Anything else would already have got a warning.)\n+\t     With -pedantic, only allow pointers to void and to character\n+\t     types.\n+\t  */\n \t  && ! (wanted_type == void_type_node\n-\t\t&& fci->pointer_count > 0)\n-\t  /* Don't warn about differences merely in signedness.  */\n+\t\t&& fci->pointer_count > 0\n+\t\t&& (! pedantic\n+\t\t    || TYPE_MAIN_VARIANT (cur_type) == void_type_node\n+\t\t    || char_type_flag))\n+\t  /* Don't warn about differences merely in signedness, unless\n+\t     -pedantic.  With -pedantic, warn if the type is a pointer\n+\t     target and not a character type, and for character types at\n+\t     a second level of indirection.\n+\t  */\n \t  && !(TREE_CODE (wanted_type) == INTEGER_TYPE\n \t       && TREE_CODE (TYPE_MAIN_VARIANT (cur_type)) == INTEGER_TYPE\n+\t       && (! pedantic || i == 0 || (i == 1 && char_type_flag))\n \t       && (TREE_UNSIGNED (wanted_type)\n \t\t   ? wanted_type == (cur_type = unsigned_type (cur_type))\n \t\t   : wanted_type == (cur_type = signed_type (cur_type))))\n \t  /* Likewise, \"signed char\", \"unsigned char\" and \"char\" are\n \t     equivalent but the above test won't consider them equivalent.  */\n \t  && ! (wanted_type == char_type_node\n+\t\t&& (! pedantic || i < 2)\n \t\t&& (TYPE_MAIN_VARIANT (cur_type) == signed_char_type_node\n \t\t    || TYPE_MAIN_VARIANT (cur_type) == unsigned_char_type_node)))\n \t{"}, {"sha": "9033a3ada3965892439b71d0bb0fb6d1f810f41e", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "patch": "@@ -179,6 +179,10 @@ extern int warn_format;\n \n extern int flag_traditional;\n \n+/* Nonzero means enable C89 Amendment 1 features, other than digraphs.  */\n+\n+extern int flag_isoc94;\n+\n /* Nonzero means use the ISO C99 dialect of C.  */\n \n extern int flag_isoc99;"}, {"sha": "6d08dfc25020142be57a470433e866b7bb7b106b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "patch": "@@ -330,6 +330,10 @@ int flag_no_nonansi_builtin;\n \n int flag_traditional;\n \n+/* Nonzero means enable C89 Amendment 1 features, other than digraphs.  */\n+\n+int flag_isoc94 = 0;\n+\n /* Nonzero means use the ISO C99 dialect of C.  */\n \n int flag_isoc99 = 0;\n@@ -541,6 +545,7 @@ c_decode_option (argc, argv)\n \t{\n \tiso_1990:\n \t  flag_digraphs = 0;\n+\t  flag_isoc94 = 0;\n \tiso_1990_digraphs:\n \t  flag_traditional = 0;\n \t  flag_writable_strings = 0;\n@@ -551,7 +556,7 @@ c_decode_option (argc, argv)\n       else if (!strcmp (argstart, \"iso9899:199409\"))\n \t{\n \t  flag_digraphs = 1;\n-\t  /* ??? The other changes since ISO C 1990 are not supported.  */\n+\t  flag_isoc94 = 1;\n \t  goto iso_1990_digraphs;\n \t}\n       else if (!strcmp (argstart, \"iso9899:199x\")\n@@ -565,6 +570,7 @@ c_decode_option (argc, argv)\n \t  flag_no_nonansi_builtin = 1;\n \t  flag_isoc99 = 1;\n \t  flag_digraphs = 1;\n+\t  flag_isoc94 = 1;\n \t}\n       else if (!strcmp (argstart, \"gnu89\"))\n \t{\n@@ -574,6 +580,7 @@ c_decode_option (argc, argv)\n \t  flag_no_nonansi_builtin = 0;\n \t  flag_isoc99 = 0;\n \t  flag_digraphs = 1;\n+\t  flag_isoc94 = 0;\n \t}\n       else if (!strcmp (argstart, \"gnu9x\") || !strcmp (argstart, \"gnu99\"))\n \t{\n@@ -583,6 +590,7 @@ c_decode_option (argc, argv)\n \t  flag_no_nonansi_builtin = 0;\n \t  flag_isoc99 = 1;\n \t  flag_digraphs = 1;\n+\t  flag_isoc94 = 1;\n \t}\n       else\n \terror (\"unknown C standard `%s'\", argstart);"}, {"sha": "5f57de9821be4ca8e33b61a39da1addcf9192a06", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "patch": "@@ -1,3 +1,7 @@\n+2000-08-04  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* decl.c (flag_isoc94): New variable.\n+\n 2000-08-02  Jason Merrill  <jason@redhat.com>\n \n \t* pt.c (do_type_instantiation): Add complain parm; don't complain"}, {"sha": "24101402782acac082cc910aa7c29c4901c0c30f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "patch": "@@ -337,6 +337,10 @@ struct named_label_list\n \n tree current_function_return_value;\n \n+/* Nonzero means use the ISO C94 dialect of C.  */\n+\n+int flag_isoc94;\n+\n /* Nonzero means use the ISO C99 dialect of C.  */\n \n int flag_isoc99;"}, {"sha": "f2ba4f1eda8108dcb07da5ed9e552fd28dee4ca5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "patch": "@@ -1,3 +1,7 @@\n+2000-08-04  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-printf-1.c, gcc.dg/c94-printf-1.c: New tests.\n+\n 2000-08-03  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.dg/cpp/20000625-2.c: Don't expect a warning on line 4."}, {"sha": "8fcfb1806101b304fcfe0fba5e9d9fe36fd46c47", "filename": "gcc/testsuite/gcc.dg/c90-printf-1.c", "status": "added", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-1.c?ref=b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "patch": "@@ -0,0 +1,247 @@\n+/* Test for printf formats.  Formats using C90 features, including cases\n+   where C90 specifies some aspect of the format to be ignored or where\n+   the behaviour is undefined.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n+\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+#ifndef __WINT_TYPE__\n+#define __WINT_TYPE__ unsigned int\n+#endif\n+typedef __WINT_TYPE__ wint_t;\n+\n+__extension__ typedef long long int llong;\n+__extension__ typedef unsigned long long int ullong;\n+\n+extern int printf (const char *, ...);\n+\n+#define NULL ((void *)0)\n+\n+void\n+foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n+     int *n, short int *hn, long int l, unsigned long int ul,\n+     long int *ln, long double ld, wint_t lc, wchar_t *ls, llong ll,\n+     ullong ull, unsigned int *un, const int *cn, signed char *ss,\n+     unsigned char *us, const signed char *css, unsigned int u1,\n+     unsigned int u2)\n+{\n+  /* See ISO/IEC 9899:1990 (E) subclause 7.9.6.1 (pages 131-134).  */\n+  /* Basic sanity checks for the different components of a format.  */\n+  printf (\"%d\\n\", i);\n+  printf (\"%+d\\n\", i);\n+  printf (\"%3d\\n\", i);\n+  printf (\"%-3d\\n\", i);\n+  printf (\"%.7d\\n\", i);\n+  printf (\"%+9.4d\\n\", i);\n+  printf (\"%.3ld\\n\", l);\n+  printf (\"%*d\\n\", i1, i);\n+  printf (\"%.*d\\n\", i2, i);\n+  printf (\"%*.*ld\\n\", i1, i2, l);\n+  printf (\"%d %lu\\n\", i, ul);\n+  /* GCC has objected to the next one in the past, but it is a valid way\n+     of specifying zero precision.\n+  */\n+  printf (\"%.e\\n\", d); /* { dg-bogus \"precision\" \"bogus precision warning\" } */\n+  /* Bogus use of width.  */\n+  printf (\"%5n\\n\", n); /* { dg-warning \"width\" \"width with %n\" } */\n+  /* Erroneous, ignored or pointless constructs with precision.  */\n+  /* Whether negative values for precision may be included in the format\n+     string is not entirely clear; presume not, following Clive Feather's\n+     proposed resolution to DR#220 against C99.  In any case, such a\n+     construct should be warned about.\n+  */\n+  printf (\"%.-5d\\n\", i); /* { dg-warning \"format|precision\" \"negative precision warning\" } */\n+  printf (\"%.-*d\\n\", i); /* { dg-warning \"format\" \"broken %.-*d format\" } */\n+  printf (\"%.3c\\n\", i); /* { dg-warning \"precision\" \"precision with %c\" } */\n+  printf (\"%.3p\\n\", p); /* { dg-warning \"precision\" \"precision with %p\" } */\n+  printf (\"%.3n\\n\", n); /* { dg-warning \"precision\" \"precision with %n\" } */\n+  /* Valid and invalid %% constructions.  Some of the warning messages\n+     are non-optimal, but they do detect the errorneous nature of the\n+     format string.\n+  */\n+  printf (\"%%\");\n+  printf (\"%.3%\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  printf (\"%-%\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  printf (\"%-%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  printf (\"%5%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  printf (\"%h%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  /* Valid and invalid %h, %l, %L constructions.  */\n+  printf (\"%hd\", i);\n+  printf (\"%hi\", i);\n+  /* Strictly, these parameters should be int or unsigned int according to\n+     what unsigned short promotes to.  However, GCC ignores sign\n+     differences in format checking here, and this is relied on to get the\n+     correct checking without print_char_table needing to know whether\n+     int and short are the same size.\n+  */\n+  printf (\"%ho%hu%hx%hX\", u, u, u, u);\n+  printf (\"%hn\", hn);\n+  printf (\"%hf\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%he\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hE\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hg\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hG\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hc\", i); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hs\", s); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hp\", p); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%h\"); /* { dg-warning \"conversion lacks type\" \"bare %h\" } */\n+  printf (\"%h.\"); /* { dg-warning \"conversion\" \"bogus %h.\" } */\n+  printf (\"%ld%li%lo%lu%lx%lX\", l, l, ul, ul, ul, ul);\n+  printf (\"%ln\", ln);\n+  printf (\"%lf\", d); /* { dg-warning \"length character|C\" \"bad use of %l\" } */\n+  printf (\"%le\", d); /* { dg-warning \"length character|C\" \"bad use of %l\" } */\n+  printf (\"%lE\", d); /* { dg-warning \"length character|C\" \"bad use of %l\" } */\n+  printf (\"%lg\", d); /* { dg-warning \"length character|C\" \"bad use of %l\" } */\n+  printf (\"%lG\", d); /* { dg-warning \"length character|C\" \"bad use of %l\" } */\n+  printf (\"%lp\", p); /* { dg-warning \"length character|C\" \"bad use of %l\" } */\n+  /* These next two were added in C94, but should be objected to in C90.\n+     For the first one, GCC has wanted wchar_t instead of the correct C94\n+     and C99 wint_t.\n+  */\n+  printf (\"%lc\", lc); /* { dg-warning \"length character|C\" \"C90 bad use of %l\" } */\n+  printf (\"%ls\", ls); /* { dg-warning \"length character|C\" \"C90 bad use of %l\" } */\n+  /* These uses of %L are legitimate, though GCC has wrongly warned for\n+     them in the past.\n+  */\n+  printf (\"%Le%LE%Lf%Lg%LG\", ld, ld, ld, ld, ld);\n+  /* These next six are accepted by GCC as referring to long long,\n+     but -pedantic correctly warns.\n+  */\n+  printf (\"%Ld\", ll); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  printf (\"%Li\", ll); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  printf (\"%Lo\", ull); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  printf (\"%Lu\", ull); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  printf (\"%Lx\", ull); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  printf (\"%LX\", ull); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  printf (\"%Lc\", i); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  printf (\"%Ls\", s); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  printf (\"%Lp\", p); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  printf (\"%Ln\", n); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  /* Valid uses of each bare conversion.  */\n+  printf (\"%d%i%o%u%x%X%f%e%E%g%G%c%s%p%n%%\", i, i, u, u, u, u, d, d, d, d, d,\n+\t  i, s, p, n);\n+  /* Uses of the - flag (valid on all non-%, non-n conversions).  */\n+  printf (\"%-d%-i%-o%-u%-x%-X%-f%-e%-E%-g%-G%-c%-s%-p\", i, i, u, u, u, u,\n+\t  d, d, d, d, d, i, s, p);\n+  printf (\"%-n\", n); /* { dg-warning \"flag\" \"bad use of %-n\" } */\n+  /* Uses of the + flag (valid on signed conversions only).  */\n+  printf (\"%+d%+i%+f%+e%+E%+g%+G\\n\", i, i, d, d, d, d, d);\n+  printf (\"%+o\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+u\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+x\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+X\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+c\", i); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+s\", s); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+p\", p); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+n\", n); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  /* Uses of the space flag (valid on signed conversions only, and ignored\n+     with +).\n+  */\n+  printf (\"% +d\", i); /* { dg-warning \"use of both\" \"use of space and + flags\" } */\n+  printf (\"%+ d\", i); /* { dg-warning \"use of both\" \"use of space and + flags\" } */\n+  printf (\"% d% i% f% e% E% g% G\\n\", i, i, d, d, d, d, d);\n+  printf (\"% o\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% u\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% x\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% X\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% c\", i); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% s\", s); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% p\", p); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% n\", n); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  /* Uses of the # flag.  */\n+  printf (\"%#o%#x%#X%#e%#E%#f%#g%#G\", u, u, u, d, d, d, d, d);\n+  printf (\"%#d\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#i\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#u\", u); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#c\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#s\", s); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#p\", p); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#n\", n); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  /* Uses of the 0 flag.  */\n+  printf (\"%08d%08i%08o%08u%08x%08X%08e%08E%08f%08g%08G\", i, i, u, u, u, u,\n+\t  d, d, d, d, d);\n+  printf (\"%0c\", i); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0s\", s); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0p\", p); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0n\", n); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  /* 0 flag ignored with precision for certain types, not others.  */\n+  printf (\"%08.5d\", i); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5i\", i); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5o\", u); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5u\", u); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5x\", u); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5X\", u); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5f%08.5e%08.5E%08.5g%08.5G\", d, d, d, d, d);\n+  /* 0 flag ignored with - flag.  */\n+  printf (\"%-08d\", i); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08i\", i); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08o\", u); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08u\", u); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08x\", u); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08X\", u); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08e\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08E\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08f\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08g\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08G\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  /* Various tests of bad argument types.  */\n+  printf (\"%d\", l); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%*.*d\", l, i2, i); /* { dg-warning \"field\" \"bad * argument types\" } */\n+  printf (\"%*.*d\", i1, l, i); /* { dg-warning \"field\" \"bad * argument types\" } */\n+  printf (\"%ld\", i); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%s\", n); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%p\", i); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%n\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n+  /* With -pedantic, we want some further checks for pointer targets:\n+     %p should allow only pointers to void (possibly qualified) and\n+     to character types (possibly qualified), but not function pointers\n+     or pointers to other types.  (Whether, in fact, character types are\n+     allowed here is unclear; see thread on comp.std.c, July 2000 for\n+     discussion of the requirements of rules on identical representation,\n+     and of the application of the as if rule with the new va_arg\n+     allowances in C99 to printf.)  Likewise, we should warn if\n+     pointer targets differ in signedness, except in some circumstances\n+     for character pointers.  (In C99 we should consider warning for\n+     char * or unsigned char * being passed to %hhn, even if strictly\n+     legitimate by the standard.)\n+  */\n+  printf (\"%p\", foo); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%n\", un); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%p\", n); /* { dg-warning \"format\" \"bad argument types\" } */\n+  /* Allow character pointers with %p.  */\n+  printf (\"%p%p%p%p\", s, ss, us, css);\n+  /* %s allows any character type.  */\n+  printf (\"%s%s%s%s\", s, ss, us, css);\n+  /* Warning for void * arguments for %s is GCC's historical behaviour,\n+     and seems useful to keep, even if some standard versions might be\n+     read to permit it.\n+  */\n+  printf (\"%s\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n+  /* The historical behaviour is to allow signed / unsigned types\n+     interchangably as arguments.  For values representable in both types,\n+     such usage may be correct.  For now preserve the behaviour of GCC\n+     in such cases.\n+  */\n+  printf (\"%d\", u);\n+  /* Also allow the same for width and precision arguments.  In the past,\n+     GCC has been inconsistent and allowed unsigned for width but not\n+     precision.\n+  */\n+  printf (\"%*.*d\", u1, u2, i);\n+  /* Wrong number of arguments.  */\n+  printf (\"%d%d\", i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  printf (\"%d\", i, i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  /* Miscellaneous bogus constructions.  */\n+  printf (\"\"); /* { dg-warning \"zero-length\" \"warning for empty format\" } */\n+  printf (\"\\0\"); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n+  printf (\"%d\\0\", i); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n+  printf (\"%d\\0%d\", i, i); /* { dg-warning \"embedded|too many\" \"warning for embedded NUL\" } */\n+  printf (NULL); /* { dg-warning \"null\" \"null format string warning\" } */\n+  printf (\"%\"); /* { dg-warning \"trailing\" \"trailing % warning\" } */\n+  printf (\"%++d\", i); /* { dg-warning \"repeated\" \"repeated flag warning\" } */\n+  printf (\"%n\", cn); /* { dg-warning \"constant\" \"%n with const\" } */\n+  /* Can we test for the warning for unterminated string formats?  */\n+}"}, {"sha": "449a3427c155ebdc766295bdbaa29fe644990a53", "filename": "gcc/testsuite/gcc.dg/c94-printf-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Ftestsuite%2Fgcc.dg%2Fc94-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3/gcc%2Ftestsuite%2Fgcc.dg%2Fc94-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc94-printf-1.c?ref=b8458e3e8b0db246af9f1a7c3fe65d8cf88413b3", "patch": "@@ -0,0 +1,25 @@\n+/* Test for printf formats.  Changes in C94 to C90.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:199409 -pedantic -Wformat\" } */\n+\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+#ifndef __WINT_TYPE__\n+#define __WINT_TYPE__ unsigned int\n+#endif\n+typedef __WINT_TYPE__ wint_t;\n+\n+extern int printf (const char *, ...);\n+\n+void\n+foo (wint_t lc, wchar_t *ls)\n+{\n+  /* See ISO/IEC 9899:1990 (E) subclause 7.9.6.1 (pages 131-134),\n+     as amended by ISO/IEC 9899:1990/Amd.1:1995 (E) (pages 4-5).\n+     We do not repeat here all the C90 format checks, but just verify\n+     that %ls and %lc are accepted without warning.\n+  */\n+  printf (\"%lc\", lc);\n+  printf (\"%ls\", ls);\n+}"}]}