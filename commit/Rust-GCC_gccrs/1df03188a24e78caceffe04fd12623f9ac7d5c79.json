{"sha": "1df03188a24e78caceffe04fd12623f9ac7d5c79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRmMDMxODhhMjRlNzhjYWNlZmZlMDRmZDEyNjIzZjlhYzdkNWM3OQ==", "commit": {"author": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-05-05T08:19:48Z"}, "committer": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-05-05T08:19:48Z"}, "message": "Initial revision\n\nFrom-SVN: r4330", "tree": {"sha": "7f7bc19c5d8d5d3b357739cee871cf0630071958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f7bc19c5d8d5d3b357739cee871cf0630071958"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1df03188a24e78caceffe04fd12623f9ac7d5c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df03188a24e78caceffe04fd12623f9ac7d5c79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df03188a24e78caceffe04fd12623f9ac7d5c79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df03188a24e78caceffe04fd12623f9ac7d5c79/comments", "author": null, "committer": null, "parents": [{"sha": "991d3e71ced0bb2e4c70807831d4c95a59edde51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991d3e71ced0bb2e4c70807831d4c95a59edde51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991d3e71ced0bb2e4c70807831d4c95a59edde51"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "1650bf55de6bf81a0c52a1edfc004356ea1b7607", "filename": "gcc/objc/typedstream.h", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df03188a24e78caceffe04fd12623f9ac7d5c79/gcc%2Fobjc%2Ftypedstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df03188a24e78caceffe04fd12623f9ac7d5c79/gcc%2Fobjc%2Ftypedstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Ftypedstream.h?ref=1df03188a24e78caceffe04fd12623f9ac7d5c79", "patch": "@@ -0,0 +1,132 @@\n+/* GNU Objective-C Typed Streams interface.\n+   Copyright (C) 1993 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+GNU CC is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* As a special exception, if you link this library with files compiled\n+   with GCC to produce an executable, this does not cause the resulting\n+   executable to be covered by the GNU General Public License.  This\n+   exception does not however invalidate any other reasons why the\n+   executable file might be covered by the GNU General Public License. */\n+\n+#ifndef __typedstream_INCLUDE_GNU\n+#define __typedstream_INCLUDE_GNU\n+\n+#include \"objc/objc.h\"\n+#include \"objc/hash.h\"\n+#include <stdio.h>\n+\n+#ifndef __alpha__\t\t/* alpha is currently not supported */\n+\n+typedef int (*objc_typed_read_func)(void*, char*, int);\n+typedef int (*objc_typed_write_func)(void*, const char*, int);\n+typedef int (*objc_typed_flush_func)(void*);\n+typedef int (*objc_typed_eof_func)(void*);\n+\n+#define OBJC_READONLY   0x01\n+#define OBJC_WRITEONLY  0x02\n+\n+#define OBJC_MANAGED_STREAM  0x01\n+#define OBJC_FILE_STREAM     0x02\n+#define OBJC_MEMORY_STREAM   0x04\n+\n+#define OBJC_TYPED_STREAM_VERSION 0x01\n+\n+typedef struct objc_typed_stream {\n+  void* physical;\n+  cache_ptr object_table;\t/* read/written objects */\n+  cache_ptr stream_table;\t/* other read/written but shared things.. */\n+  cache_ptr class_table;\t/* class version mapping */\n+  cache_ptr object_refs;\t/* forward references */\n+  int mode;\t\t\t/* OBJC_READONLY or OBJC_WRITEONLY */\n+  int type;\t\t\t/* MANAGED, FILE, MEMORY etc bit string */\n+  int version;\t\t\t/* version used when writing */\n+  int writing_root_p;\n+  objc_typed_read_func read;\n+  objc_typed_write_func write;\n+  objc_typed_eof_func eof;\n+  objc_typed_flush_func flush;\n+} TypedStream;\n+\n+/* opcode masks */\n+#define _B_VALUE   0x1fU\n+#define _B_CODE    0xe0U\n+#define _B_SIGN    0x10U\n+#define _B_NUMBER  0x0fU\n+\n+/* standard opcodes */\n+#define _B_INVALID 0x00U\n+#define _B_SINT    0x20U\n+#define _B_NINT    0x40U\n+#define _B_SSTR    0x60U\n+#define _B_NSTR    0x80U\n+#define _B_RCOMM   0xa0U\n+#define _B_UCOMM   0xc0U\n+#define _B_EXT     0xe0U\n+\n+/* eXtension opcodes */\n+#define _BX_OBJECT  0x00U\n+#define _BX_CLASS   0x01U\n+#define _BX_SEL     0x02U\n+#define _BX_OBJREF  0x03U\n+#define _BX_OBJROOT 0x04U\n+#define _BX_EXT     0x1fU\n+\n+/*\n+** Read and write objects as specified by TYPE.  All the `last'\n+** arguments are pointers to the objects to read/write.  \n+*/\n+\n+int objc_write_type (TypedStream* stream, const char* type, const void* data);\n+int objc_read_type (TypedStream* stream, const char* type, void* data);\n+\n+int objc_write_types (TypedStream* stream, const char* type, ...);\n+int objc_read_types (TypedStream* stream, const char* type, ...);\n+\n+int objc_write_object_reference (TypedStream* stream, id object);\n+int objc_write_root_object (TypedStream* stream, id object);\n+\n+int objc_get_stream_class_version (TypedStream* stream, Class* class);\n+\n+\n+/*\n+** Convenience funtions\n+*/\n+\n+int objc_write_array (TypedStream* stream, const char* type,\n+\t\t      int count, const void* data);\n+int objc_read_array (TypedStream* stream, const char* type,\n+\t\t     int count, void* data);\n+\n+int objc_write_object (TypedStream* stream, id object);\n+\n+/*\n+** Open a typed stream for reading or writing.  MODE may be either of\n+** OBJC_READONLY or OBJC_WRITEONLY.  \n+*/\n+\n+TypedStream* objc_open_typed_stream (FILE* physical, int mode);\n+TypedStream* objc_open_typed_stream_for_file (const char* file_name, int mode);\n+\n+void objc_close_typed_stream (TypedStream* stream);\n+\n+BOOL objc_end_of_typed_stream (TypedStream* stream);\n+void objc_flush_typed_stream (TypedStream* stream);\n+\n+#endif /* __alpha__ */\n+\n+#endif /* not __typedstream_INCLUDE_GNU */"}]}