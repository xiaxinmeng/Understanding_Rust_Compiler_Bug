{"sha": "0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY3YTdiZTdjZWFmMjZlMjM1NWE4ZjYyM2QwOTg2YTJjZGUxNDVhYg==", "commit": {"author": {"name": "David O'Brien", "email": "obrien@FreeBSD.org", "date": "2001-11-14T21:44:21Z"}, "committer": {"name": "David O'Brien", "email": "obrien@gcc.gnu.org", "date": "2001-11-14T21:44:21Z"}, "message": "config.gcc (sparc64-wrs-vxworks*, [...]): Include various CPU headers via tm_file.\n\n2001-11-14  David O'Brien  <obrien@FreeBSD.org>\n\t* config.gcc (sparc64-wrs-vxworks*, sparc-*-netbsd*, sparc-*-openbsd*,\n\tsparc-*-chorusos*, sparc-*-elf*, sparc-*-linux*aout*,\n\tsparc-*-linux*libc1*, sparc-*-linux*, sparc-*-lynxos*, sparc-*-rtems*,\n\tsparc-*-rtemself*, sparc-hal-solaris2*, sparc-*-solaris2*,\n\tsparc-*-sunos4.0*, sparc-*-sunos4*, sparc-*-sunos3*, sparc-*-sysv4*,\n\tsparc-*-vxsim*, sparclite-*-aout*, sparclite-*-elf*, sparc86x-*-aout*,\n\tsparc86x-*-elf*, sparc64-*-aout*, sparc64-*-elf*, sparc64-*-linux*):\n\tInclude various CPU headers via tm_file.  a.out based platforms now\n\tproperly include sparc/aout.h.  sol2.h usage now implies including\n\telfos.h, svr4.h, and sparc/sysv4.h.\n\t* config/netbsd.h (TARGET_MEM_FUNCTIONS): Undef before defining it.\n\tAlso define to '1'.\n\t* sparc/sparc.h (CPP_PREDEFINES, TARGET_VERSION, WORD_SWITCH_TAKES_ARG,\n\tSELECT_SECTION, ASM_DECLARE_FUNCTION_NAME, TEXT_SECTION_ASM_OP,\n\tDATA_SECTION_ASM_OP, DBX_REGISTER_NUMBER, ASM_OUTPUT_SOURCE_LINE):\n\tRemove.  They are a.out specific and belong in sparc/aout.h.\n\t* sparc/aout.h (TARGET_VERSION, WORD_SWITCH_TAKES_ARG, SELECT_SECTION,\n\tASM_DECLARE_FUNCTION_NAME, TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP,\n\tDBX_REGISTER_NUMBER, ASM_OUTPUT_SOURCE_LINE): Define.  Moved here from\n\tsparc/sparc.h.\n\t* sparc/litecoff.h (WORD_SWITCH_TAKES_ARG, ASM_DECLARE_FUNCTION_NAME,\n\tTEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP, DBX_REGISTER_NUMBER): Define.\n\tMoved here from sparc/sparc.h.\n\t* config/sparc/linux-aout.h (DEFAULT_PCC_STRUCT_RETURN): Undef before\n\tdefining.\n\t* config/sparc/linux64.h (UNALIGNED_DOUBLE_INT_ASM_OP): Undef before\n\t* config/sparc/lynx.h:  Don't include lynx.h.\n\t(SELECT_SECTION): Do not undef.\n\t* config/sparc/openbsd.h: Don't include sparc/sparc.h.\n\t* config/sparc/sol2-sld-64.h: Include sparc/sparc.h, elfos.h, svr4.h,\n\tand sparc/sysv4.h.\n\t* config/sparc/sol2.h: Don't include sparc/sparc.h and sparc/sysv4.h.\n\t* config/sparc/sp64-aout.h (CPP_PREDEFINES): Don't define.  Get from\n\tsparc/aout.h now.\n\t* config/sparc/sp64-elf.h (DWARF_DEBUGGING_INFO, DWARF2_DEBUGGING_INFO):\n\tDon't undef, there is no need.\n\t* config/sparc/splet.h (CPP_PREDEFINES): Define.\n\t* config/sparc/sun4o3.h (CPP_PREDEFINES): Likewise.\n\t* config/sparc/sunos4.h (CPP_PREDEFINES): Likewise.\n\tDon't include sparc/sparc.h.\n\t* config/sparc/sysv4.h (WORD_SWITCH_TAKES_ARG, ASM_OUTPUT_SOURCE_LINE,\n\tSELECT_SECTION, ASM_DECLARE_FUNCTION_NAME, TEXT_SECTION_ASM_OP,\n\tDATA_SECTION_ASM_OP): Don't undef, there is no need now.  Don't include\n\telfos.h and svr4.h.\n\t(TARGET_VERSION): Define.\n\t* config/sparc/vxsim.h (TARGET_VERSION): Define.\n\nApproved by:  Richard Henderson <rth@redhat.com>\n              Message-ID: <20011114132416.B17112@redhat.com>\n\nFrom-SVN: r47023", "tree": {"sha": "d33f96eb78a1cd88b0c1d8166cff64d303cbf582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d33f96eb78a1cd88b0c1d8166cff64d303cbf582"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/comments", "author": null, "committer": null, "parents": [{"sha": "90a12988695ada8c9b24d7adc2dabcd7d7a1709b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a12988695ada8c9b24d7adc2dabcd7d7a1709b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90a12988695ada8c9b24d7adc2dabcd7d7a1709b"}], "stats": {"total": 341, "additions": 205, "deletions": 136}, "files": [{"sha": "b945ef488be49ffb472478a06c235b1c14606129", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -1,3 +1,52 @@\n+2001-11-14  David O'Brien  <obrien@FreeBSD.org>\n+\n+\t* config.gcc (sparc64-wrs-vxworks*, sparc-*-netbsd*, sparc-*-openbsd*,\n+\tsparc-*-chorusos*, sparc-*-elf*, sparc-*-linux*aout*,\n+\tsparc-*-linux*libc1*, sparc-*-linux*, sparc-*-lynxos*, sparc-*-rtems*,\n+\tsparc-*-rtemself*, sparc-hal-solaris2*, sparc-*-solaris2*,\n+\tsparc-*-sunos4.0*, sparc-*-sunos4*, sparc-*-sunos3*, sparc-*-sysv4*,\n+\tsparc-*-vxsim*, sparclite-*-aout*, sparclite-*-elf*, sparc86x-*-aout*,\n+\tsparc86x-*-elf*, sparc64-*-aout*, sparc64-*-elf*, sparc64-*-linux*):\n+\tInclude various CPU headers via tm_file.  a.out based platforms now\n+\tproperly include sparc/aout.h.  sol2.h usage now implies including\n+\telfos.h, svr4.h, and sparc/sysv4.h.\n+\t* config/netbsd.h (TARGET_MEM_FUNCTIONS): Undef before defining it.\n+\tAlso define to '1'.\n+\t* sparc/sparc.h (CPP_PREDEFINES, TARGET_VERSION, WORD_SWITCH_TAKES_ARG,\n+\tSELECT_SECTION, ASM_DECLARE_FUNCTION_NAME, TEXT_SECTION_ASM_OP,\n+\tDATA_SECTION_ASM_OP, DBX_REGISTER_NUMBER, ASM_OUTPUT_SOURCE_LINE):\n+\tRemove.  They are a.out specific and belong in sparc/aout.h.\n+\t* sparc/aout.h (TARGET_VERSION, WORD_SWITCH_TAKES_ARG, SELECT_SECTION,\n+\tASM_DECLARE_FUNCTION_NAME, TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP,\n+\tDBX_REGISTER_NUMBER, ASM_OUTPUT_SOURCE_LINE): Define.  Moved here from\n+\tsparc/sparc.h.\n+\t* sparc/litecoff.h (WORD_SWITCH_TAKES_ARG, ASM_DECLARE_FUNCTION_NAME,\n+\tTEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP, DBX_REGISTER_NUMBER): Define.\n+\tMoved here from sparc/sparc.h.\n+\t* config/sparc/linux-aout.h (DEFAULT_PCC_STRUCT_RETURN): Undef before\n+\tdefining.\n+\t* config/sparc/linux64.h (UNALIGNED_DOUBLE_INT_ASM_OP): Undef before\n+\t* config/sparc/lynx.h:  Don't include lynx.h.\n+\t(SELECT_SECTION): Do not undef.\n+\t* config/sparc/openbsd.h: Don't include sparc/sparc.h.\n+\t* config/sparc/sol2-sld-64.h: Include sparc/sparc.h, elfos.h, svr4.h,\n+\tand sparc/sysv4.h.\n+\t* config/sparc/sol2.h: Don't include sparc/sparc.h and sparc/sysv4.h.\n+\t* config/sparc/sp64-aout.h (CPP_PREDEFINES): Don't define.  Get from\n+\tsparc/aout.h now.\n+\t* config/sparc/sp64-elf.h (DWARF_DEBUGGING_INFO, DWARF2_DEBUGGING_INFO):\n+\tDon't undef, there is no need.\n+\t* config/sparc/splet.h (CPP_PREDEFINES): Define.\n+\t* config/sparc/sun4o3.h (CPP_PREDEFINES): Likewise.\n+\t* config/sparc/sunos4.h (CPP_PREDEFINES): Likewise.\n+\tDon't include sparc/sparc.h.\n+\t* config/sparc/sysv4.h (WORD_SWITCH_TAKES_ARG, ASM_OUTPUT_SOURCE_LINE,\n+\tSELECT_SECTION, ASM_DECLARE_FUNCTION_NAME, TEXT_SECTION_ASM_OP,\n+\tDATA_SECTION_ASM_OP): Don't undef, there is no need now.  Don't include\n+\telfos.h and svr4.h.\n+\t(TARGET_VERSION): Define.\n+\t* config/sparc/vxsim.h (TARGET_VERSION): Define.\n+\n Wed Nov 14 19:46:08 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* cfglayout.c (fixup_fallthru_exit_predecesor): New static function."}, {"sha": "de4031cd166f37898ef10d77003fc7e8ef1d3c43", "filename": "gcc/config.gcc", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -2905,7 +2905,7 @@ sparc-tti-*)\n \txm_defines=POSIX\n \t;;\n sparc64-wrs-vxworks*)\n-        tm_file=\"sparc/sol2.h sparc/elf.h sparc/sparc_bi.h gofast.h sparc/vxsparc64.h\"\n+        tm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/elf.h sparc/sparc_bi.h gofast.h sparc/vxsparc64.h\"\n         tmake_file=sparc/t-vxsparc64\n         use_collect2=yes\n         ;;\n@@ -2920,11 +2920,12 @@ sparc-*-aout*)\n \ttm_file=\"sparc/sparc.h aoutos.h sparc/aout.h libgloss.h\"\n \t;;\n sparc-*-netbsd*)\n-\ttm_file=\"${tm_file} netbsd.h sparc/netbsd.h\"\n+\ttm_file=\"${tm_file} sparc/aout.h netbsd.h sparc/netbsd.h\"\n \ttmake_file=t-netbsd\n \tuse_collect2=yes\n \t;;\n sparc-*-openbsd*)\n+\ttm_file=\"sparc/sparc.h ${tm_file}\"\n \t# needed to unconfuse gdb\n \ttmake_file=\"t-libc-ok t-openbsd sparc/t-openbsd\"\n \t# we need collect2 until our bug is fixed...\n@@ -2934,7 +2935,7 @@ sparc-*-bsd*)\n \ttm_file=\"${tm_file} sparc/bsd.h\"\n \t;;\n sparc-*-chorusos*)\n-\ttm_file=\"${tm_file} sparc/sysv4.h sparc/sol2.h sparc/elf.h chorus.h\"\n+\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/elf.h chorus.h\"\n \ttmake_file=sparc/t-chorus-elf\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \tfloat_format=i64\n@@ -2945,28 +2946,28 @@ sparc-*-chorusos*)\n \tesac\n \t;;\n sparc-*-elf*)\n-\ttm_file=\"sparc/sol2.h sparc/elf.h\"\n+\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/elf.h\"\n \ttmake_file=sparc/t-elf\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t#float_format=i128\n \tfloat_format=i64\n \t;;\n sparc-*-linux*aout*)\t\t# Sparc's running GNU/Linux, a.out\n-\ttm_file=\"aoutos.h sparc/sparc.h sparc/linux-aout.h\"\n+\ttm_file=\"aoutos.h sparc/sparc.h sparc/aout.h sparc/linux-aout.h\"\n \txmake_file=x-linux\n \tgnu_ld=yes\n \t;;\n sparc-*-linux*libc1*)\t# Sparc's running GNU/Linux, libc5\n \txmake_file=x-linux\n-\ttm_file=\"${tm_file} sparc/sysv4.h sparc/linux.h\"\n+\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/linux.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux t-linux-gnulibc1\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n \tfloat_format=sparc\n \t;;\n sparc-*-linux*)\t\t# Sparc's running GNU/Linux, libc6\n \txmake_file=x-linux\n-\ttm_file=\"${tm_file} sparc/sysv4.h sparc/linux.h\"\n+\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/linux.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n@@ -2978,9 +2979,9 @@ sparc-*-linux*)\t\t# Sparc's running GNU/Linux, libc6\n sparc-*-lynxos*)\n \tif test x$gas = xyes\n \tthen\n-\t\ttm_file=\"${tm_file} sparc/lynx.h\"\n+\t\ttm_file=\"${tm_file} lynx.h sparc/aout.h sparc/lynx.h\"\n \telse\n-\t\ttm_file=\"${tm_file} lynx-ng.h sparc/lynx-ng.h\"\n+\t\ttm_file=\"${tm_file} lynx-ng.h sparc/aout.h sparc/lynx-ng.h\"\n \tfi\n \ttmake_file=sparc/t-sunos41\n \t;;\n@@ -2992,7 +2993,7 @@ sparc-*-rtemsaout*)\n \tfi\n \t;;\n sparc-*-rtems*|sparc-*-rtemself*)\n-\ttm_file=\"sparc/sol2.h sparc/elf.h sparc/rtemself.h rtems.h\"\n+\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/elf.h sparc/rtemself.h rtems.h\"\n \ttmake_file=\"sparc/t-elf t-rtems\"\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t#float_format=i128\n@@ -3033,7 +3034,7 @@ sparcv9-*-solaris2* | sparc64-*-solaris2*)\n \t;;\n sparc-hal-solaris2*)\n         xm_defines=POSIX\n-        tm_file=\"sparc/sol2.h sparc/hal.h\"\n+        tm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/hal.h\"\n         tmake_file=\"sparc/t-halos sparc/t-sol2\"\n \tif test x$gnu_ld = xyes; then\n \t\ttmake_file=\"$tmake_file t-slibgcc-elf-ver\"\n@@ -3054,9 +3055,9 @@ sparc-hal-solaris2*)\n sparc-*-solaris2*)\n \tif test x$gnu_ld = xyes\n \tthen\n-\t\ttm_file=\"sparc/sol2.h\"\n+\t\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/sol2.h\"\n \telse\n-\t\ttm_file=\"sparc/sol2.h sparc/sol2-sld.h\"\n+\t\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/sol2-sld.h\"\n \tfi\n \txm_defines=POSIX\n \ttmake_file=sparc/t-sol2\n@@ -3101,30 +3102,30 @@ sparc-*-solaris2*)\n \tfi\n \t;;\n sparc-*-sunos4.0*)\n-\ttm_file=sparc/sunos4.h\n+\ttm_file=\"${tm_file} sparc/aout.h sparc/sunos4.h\"\n \tuse_collect2=yes\n \t;;\n sparc-*-sunos4*)\n-\ttm_file=sparc/sunos4.h\n+\ttm_file=\"${tm_file} sparc/aout.h sparc/sunos4.h\"\n \ttmake_file=sparc/t-sunos41\n \tuse_collect2=yes\n \tif test x$gas = xyes; then\n \t\ttm_file=\"${tm_file} sparc/sun4gas.h\"\n \tfi\n \t;;\n sparc-*-sunos3*)\n-\ttm_file=\"${tm_file} sparc/sun4o3.h\"\n+\ttm_file=\"${tm_file} sparc/aout.h sparc/sun4o3.h\"\n \tuse_collect2=yes\n \t;;\n sparc-*-sysv4*)\n-\ttm_file=\"${tm_file} sparc/sysv4.h\"\n+\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h\"\n \txm_defines=POSIX\n \ttmake_file=t-svr4\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n sparc-*-vxsim*)\n \txm_defines=POSIX\n-\ttm_file=\"${tm_file} sparc/sysv4.h sparc/vxsim.h\"\n+\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/vxsim.h\"\n \ttmake_file=sparc/t-vxsparc\n \t;;\n sparclet-*-aout*)\n@@ -3136,33 +3137,33 @@ sparclite-*-coff*)\n \ttmake_file=sparc/t-sparclite\n \t;;\n sparclite-*-aout*)\n-\ttm_file=\"${tm_file} gofast.h sparc/lite.h aoutos.h libgloss.h\"\n+\ttm_file=\"${tm_file} gofast.h sparc/aout.h sparc/lite.h aoutos.h libgloss.h\"\n \ttmake_file=sparc/t-sparclite\n \t;;\n sparclite-*-elf*)\n-\ttm_file=\"sparc/sol2.h sparc/elf.h gofast.h sparc/liteelf.h\"\n+\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/elf.h gofast.h sparc/liteelf.h\"\n \ttmake_file=sparc/t-sparclite\n         extra_parts=\"crtbegin.o crtend.o\"\n \t;;\n sparc86x-*-aout*)\n-\ttm_file=\"${tm_file} gofast.h sparc/sp86x-aout.h aoutos.h libgloss.h\"\n+\ttm_file=\"${tm_file} gofast.h sparc/aout.h sparc/sp86x-aout.h aoutos.h libgloss.h\"\n \ttmake_file=sparc/t-sp86x\n \t;;\n sparc86x-*-elf*)\n-\ttm_file=\"sparc/sol2.h sparc/elf.h gofast.h sparc/sp86x-elf.h\"\n+\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/elf.h gofast.h sparc/sp86x-elf.h\"\n \ttmake_file=sparc/t-sp86x\n         extra_parts=\"crtbegin.o crtend.o\"\n \t;;\n sparc64-*-aout*)\n-\ttm_file=\"sparc/sparc.h aoutos.h sparc/sp64-aout.h\"\n+\ttm_file=\"sparc/sparc.h aoutos.h sparc/aout.h sparc/sp64-aout.h\"\n \t;;\n sparc64-*-elf*)\n-\ttm_file=\"sparc/sol2.h sparc/sp64-elf.h\"\n+\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/sp64-elf.h\"\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n sparc64-*-linux*)\t\t# 64-bit Sparc's running GNU/Linux\n \ttmake_file=\"t-slibgcc-elf-ver t-linux sparc/t-linux64\"\n-\ttm_file=\"sparc/sparc_bi.h ${tm_file} sparc/sysv4.h sparc/linux64.h\"\n+\ttm_file=\"sparc/sparc_bi.h ${tm_file} elfos.h svr4.h sparc/sysv4.h sparc/linux64.h\"\n \txmake_file=x-linux\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tgnu_ld=yes"}, {"sha": "b76e747c50c8a4889c75212fcc9b93a41504543f", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -68,7 +68,8 @@\n \n /* Implicit library calls should use memcpy, not bcopy, etc.  */\n \n-#define TARGET_MEM_FUNCTIONS\n+#undef TARGET_MEM_FUNCTIONS\n+#define TARGET_MEM_FUNCTIONS 1\n \n /* Handle #pragma weak and #pragma pack.  */\n "}, {"sha": "fd84d75244b0d108c28a0ef8ad49dcc12f21f8fd", "filename": "gcc/config/sparc/aout.h", "status": "modified", "additions": 80, "deletions": 1, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Faout.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -19,5 +19,84 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#undef CPP_PREDEFINES\n+/* Print subsidiary information on the compiler version in use.  */\n+\n+#define TARGET_VERSION fprintf (stderr, \" (sparc)\");\n+\n+/* Names to predefine in the preprocessor for this target machine.\n+   ??? It would be nice to not include any subtarget specific values here,\n+   however there's no way to portably provide subtarget values to\n+   CPP_PREFINES.  Also, -D values in CPP_SUBTARGET_SPEC don't get turned into\n+   foo, __foo and __foo__.  */\n+\n #define CPP_PREDEFINES \"-Dsparc -Acpu=sparc -Amachine=sparc\"\n+\n+/* These compiler options take an argument.  We ignore -target for now.  */\n+\n+#define WORD_SWITCH_TAKES_ARG(STR)\t\t\t\t\\\n+ (DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\t\t\t\t\\\n+  || !strcmp (STR, \"target\") || !strcmp (STR, \"assert\"))\n+\n+/* This is defined differently for v9 in a cover file.  */\n+#define SELECT_SECTION(T,RELOC,ALIGN)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (TREE_CODE (T) == VAR_DECL)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (TREE_READONLY (T) && ! TREE_SIDE_EFFECTS (T)\t\t\t\\\n+\t  && DECL_INITIAL (T)\t\t\t\t\t\t\\\n+\t  && (DECL_INITIAL (T) == error_mark_node\t\t\t\\\n+\t      || TREE_CONSTANT (DECL_INITIAL (T)))\t\t\t\\\n+\t  && DECL_ALIGN (T) <= MAX_TEXT_ALIGN\t\t\t\t\\\n+\t  && ! (flag_pic && ((RELOC) || SUNOS4_SHARED_LIBRARIES)))\t\\\n+\ttext_section ();\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tdata_section ();\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else if (TREE_CODE (T) == CONSTRUCTOR)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (flag_pic && ((RELOC) || SUNOS4_SHARED_LIBRARIES))\t\t\\\n+\tdata_section ();\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else if (TREE_CODE_CLASS (TREE_CODE (T)) == 'c')\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if ((TREE_CODE (T) == STRING_CST && flag_writable_strings)\t\\\n+\t  || TYPE_ALIGN (TREE_TYPE (T)) > MAX_TEXT_ALIGN\t\t\\\n+\t  || (flag_pic && ((RELOC) || SUNOS4_SHARED_LIBRARIES)))\t\\\n+\tdata_section ();\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\ttext_section ();\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* Output the label for a function definition.  */\n+\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n+  ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n+} while (0)\n+\n+/* Output before read-only data.  */\n+\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n+\n+/* Output before writable data.  */\n+\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n+\n+/* How to renumber registers for dbx and gdb.  In the flat model, the frame\n+   pointer is really %i7.  */\n+\n+#define DBX_REGISTER_NUMBER(REGNO) \\\n+  (TARGET_FLAT && REGNO == FRAME_POINTER_REGNUM ? 31 : REGNO)\n+\n+/* This is how to output a note to DBX telling it the line number\n+   to which the following sequence of instructions corresponds.\n+\n+   This is needed for SunOS 4.0, and should not hurt for 3.2\n+   versions either.  */\n+#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\\\n+  { static int sym_lineno = 1;\t\t\t\t\\\n+    fprintf (file, \".stabn 68,0,%d,LM%d\\nLM%d:\\n\",\t\\\n+\t     line, sym_lineno, sym_lineno);\t\t\\\n+    sym_lineno += 1; }"}, {"sha": "04ebb8c3135143c15f2d1d078c679d4d860e06fd", "filename": "gcc/config/sparc/linux-aout.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux-aout.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -70,6 +70,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Don't default to pcc-struct-return, because gcc is the only compiler,\n    and we want to retain compatibility with older gcc versions.  */\n+#undef DEFAULT_PCC_STRUCT_RETURN\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n #undef LIB_SPEC"}, {"sha": "9785869bc643bde7432e3046d09daeaa46cd60ec", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -356,6 +356,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    misnamed.  These should all refer to explicit sizes (half/word/xword?),\n    anything other than short/int/long/etc.  */\n \n+#undef  UNALIGNED_DOUBLE_INT_ASM_OP\n #define UNALIGNED_DOUBLE_INT_ASM_OP\t\"\\t.uaxword\\t\"\n \n /* DWARF bits.  */"}, {"sha": "4b08d3848a54afab3954dc5f2f59f8089fd25e2d", "filename": "gcc/config/sparc/litecoff.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flitecoff.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -48,3 +48,31 @@ Boston, MA 02111-1307, USA.  */\n \n #undef DO_GLOBAL_CTORS_BODY\n #undef DO_GLOBAL_DTORS_BODY\n+\n+/* These compiler options take an argument.  We ignore -target for now.  */\n+\n+#define WORD_SWITCH_TAKES_ARG(STR)\t\t\t\t\\\n+ (DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\t\t\t\t\\\n+  || !strcmp (STR, \"target\") || !strcmp (STR, \"assert\"))\n+\n+/* Output the label for a function definition.  */\n+\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n+  ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n+} while (0)\n+\n+/* Output before read-only data.  */\n+\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n+\n+/* Output before writable data.  */\n+\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n+\n+/* How to renumber registers for dbx and gdb.  In the flat model, the frame\n+   pointer is really %i7.  */\n+\n+#define DBX_REGISTER_NUMBER(REGNO) \\\n+  (TARGET_FLAT && REGNO == FRAME_POINTER_REGNUM ? 31 : REGNO)"}, {"sha": "866612d3b8adf5672e32d63ed11c66e3436b212f", "filename": "gcc/config/sparc/lynx.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flynx.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -19,13 +19,10 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #undef ASM_OUTPUT_IDENT\n-#undef SELECT_SECTION\n #undef SELECT_RTX_SECTION\n \n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t\\\".bss\\\"\"\n \n-#include <lynx.h>\n-\n /* ??? Must redefine to get sparclite and v8 defines.  Can this be done\n    differently?  */\n "}, {"sha": "4be5b6b8e34e0e054c2df7b4758091ef5e28cc8c", "filename": "gcc/config/sparc/netbsd.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -37,4 +37,3 @@\n /* Until they use ELF or something that handles dwarf2 unwinds\n    and initialization stuff better.  */\n #define DWARF2_UNWIND_INFO 0\n-"}, {"sha": "dc3728453e5622346693d23d1501b02702db0404", "filename": "gcc/config/sparc/openbsd.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fopenbsd.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -18,8 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include <sparc/sparc.h>\n-\n /* Get generic OpenBSD definitions.  */\n #define OBSD_OLD_GAS\n #include <openbsd.h>"}, {"sha": "ffd84472d4dd0636a9e78ab9d9d45c98550ca859", "filename": "gcc/config/sparc/sol2-sld-64.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -5,6 +5,10 @@\n #include \"sparc/sparc_bi.h\"\n #endif\n \n+#include \"sparc/sparc.h\"\n+#include \"elfos.h\"\n+#include \"svr4.h\"\n+#include \"sparc/sysv4.h\"\n #include \"sparc/sol2.h\"\n \n #ifdef AS_SPARC64_FLAG"}, {"sha": "aeb5f7e4c70410c55a1d5d666991a2db6f096108", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -22,8 +22,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Supposedly the same as vanilla sparc svr4, except for the stuff below: */\n-#include \"sparc/sparc.h\"\n-#include \"sparc/sysv4.h\"\n \n /* Solaris 2 uses a wint_t different from the default. This is required\n    by the SCD 2.4.1, p. 6-83, Figure 6-66.  */"}, {"sha": "669adc3c45d471970e1c9571200eb47ed467363b", "filename": "gcc/config/sparc/sp64-aout.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -31,6 +31,3 @@ Boston, MA 02111-1307, USA.  */\n /* The only code model supported is Medium/Low.  */\n #undef SPARC_DEFAULT_CMODEL\n #define SPARC_DEFAULT_CMODEL CM_MEDLOW\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dsparc -Acpu=sparc -Amachine=sparc\""}, {"sha": "07be3885efbf761c0dcdbe8187cf7c29e2f1c384", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -110,8 +110,6 @@ crtbegin.o%s \\\n    GDB doesn't support 64 bit stabs yet and the desired debug format is DWARF\n    anyway so it is the default.  */\n \n-#define DWARF_DEBUGGING_INFO\n-#define DWARF2_DEBUGGING_INFO\n #define DBX_DEBUGGING_INFO\n \n #undef PREFERRED_DEBUGGING_TYPE"}, {"sha": "0d96acaec5a43993c6ca6920b9848c907ef0d0c7", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -210,14 +210,6 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n \n #endif /* !SPARC_BI_ARCH */\n \n-/* Names to predefine in the preprocessor for this target machine.\n-   ??? It would be nice to not include any subtarget specific values here,\n-   however there's no way to portably provide subtarget values to\n-   CPP_PREFINES.  Also, -D values in CPP_SUBTARGET_SPEC don't get turned into\n-   foo, __foo and __foo__.  */\n-\n-#define CPP_PREDEFINES \"-Dsparc -Dsun -Dunix -Asystem=unix -Asystem=bsd\"\n-\n /* Define macros to distinguish architectures.  */\n \n /* Common CPP definitions used by CPP_SPEC amongst the various targets\n@@ -414,16 +406,6 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n /* This is meant to be redefined in the host dependent files.  */\n #define SUBTARGET_OVERRIDE_OPTIONS\n \n-/* These compiler options take an argument.  We ignore -target for now.  */\n-\n-#define WORD_SWITCH_TAKES_ARG(STR)\t\t\t\t\\\n- (DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\t\t\t\t\\\n-  || !strcmp (STR, \"target\") || !strcmp (STR, \"assert\"))\n-\n-/* Print subsidiary information on the compiler version in use.  */\n-\n-#define TARGET_VERSION fprintf (stderr, \" (sparc)\");\n-\n /* Generate DBX debugging information.  */\n \n #define DBX_DEBUGGING_INFO\n@@ -911,36 +893,6 @@ if (TARGET_ARCH64\t\t\t\t\\\n #define SUNOS4_SHARED_LIBRARIES 0\n #endif\n \n-/* This is defined differently for v9 in a cover file.  */\n-#define SELECT_SECTION(T,RELOC,ALIGN)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (TREE_CODE (T) == VAR_DECL)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (TREE_READONLY (T) && ! TREE_SIDE_EFFECTS (T)\t\t\t\\\n-\t  && DECL_INITIAL (T)\t\t\t\t\t\t\\\n-\t  && (DECL_INITIAL (T) == error_mark_node\t\t\t\\\n-\t      || TREE_CONSTANT (DECL_INITIAL (T)))\t\t\t\\\n-\t  && DECL_ALIGN (T) <= MAX_TEXT_ALIGN\t\t\t\t\\\n-\t  && ! (flag_pic && ((RELOC) || SUNOS4_SHARED_LIBRARIES)))\t\\\n-\ttext_section ();\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tdata_section ();\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else if (TREE_CODE (T) == CONSTRUCTOR)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (flag_pic && ((RELOC) || SUNOS4_SHARED_LIBRARIES))\t\t\\\n-\tdata_section ();\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else if (TREE_CODE_CLASS (TREE_CODE (T)) == 'c')\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if ((TREE_CODE (T) == STRING_CST && flag_writable_strings)\t\\\n-\t  || TYPE_ALIGN (TREE_TYPE (T)) > MAX_TEXT_ALIGN\t\t\\\n-\t  || (flag_pic && ((RELOC) || SUNOS4_SHARED_LIBRARIES)))\t\\\n-\tdata_section ();\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\ttext_section ();\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n \n /* Use text section for a constant\n    unless we need more alignment than that offers.  */\n@@ -1884,14 +1836,6 @@ extern struct rtx_def *sparc_compare_op0, *sparc_compare_op1;\n #define ASM_DECLARE_RESULT(FILE, RESULT) \\\n   fprintf ((FILE), \"\\t.proc\\t0%lo\\n\", sparc_type_code (TREE_TYPE (RESULT)))\n \n-/* Output the label for a function definition.  */\n-\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n-  ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n-} while (0)\n-\n /* Output the special assembly code needed to tell the assembler some\n    register is used as global register variable.  \n \n@@ -2905,14 +2849,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_DOUBLE\t\".double\"\n #define ASM_LONGDOUBLE\t\".xxx\"\t\t/* ??? Not known (or used yet).  */\n \n-/* Output before read-only data.  */\n-\n-#define TEXT_SECTION_ASM_OP \"\\t.text\"\n-\n-/* Output before writable data.  */\n-\n-#define DATA_SECTION_ASM_OP \"\\t.data\"\n-\n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n \n@@ -2936,12 +2872,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ADDITIONAL_REGISTER_NAMES \\\n {{\"ccr\", SPARC_ICC_REG}, {\"cc\", SPARC_ICC_REG}}\n \n-/* How to renumber registers for dbx and gdb.  In the flat model, the frame\n-   pointer is really %i7.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) \\\n-  (TARGET_FLAT && REGNO == FRAME_POINTER_REGNUM ? 31 : REGNO)\n-\n /* On Sun 4, this limit is 2048.  We use 1000 to be safe, since the length\n    can run past this up to a continuation point.  Once we used 1500, but\n    a single entry in C++ can run more than 500 bytes, due to the length of\n@@ -2950,17 +2880,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    guess...  */\n #define DBX_CONTIN_LENGTH 1000\n \n-/* This is how to output a note to DBX telling it the line number\n-   to which the following sequence of instructions corresponds.\n-\n-   This is needed for SunOS 4.0, and should not hurt for 3.2\n-   versions either.  */\n-#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\\\n-  { static int sym_lineno = 1;\t\t\t\t\\\n-    fprintf (file, \".stabn 68,0,%d,LM%d\\nLM%d:\\n\",\t\\\n-\t     line, sym_lineno, sym_lineno);\t\t\\\n-    sym_lineno += 1; }\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n "}, {"sha": "d2ef4fbe35d232f841a47f28fad2189de85152aa", "filename": "gcc/config/sparc/splet.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsplet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsplet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsplet.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -22,6 +22,8 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_APP_REGS + MASK_EPILOGUE)\n \n+#define CPP_PREDEFINES \"-Dsparc -Acpu=sparc -Amachine=sparc\" \n+\n #undef SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\t\t\t\t      \\\n {\"big-endian\", -MASK_LITTLE_ENDIAN, N_(\"Generate code for big endian\") },     \\"}, {"sha": "891e3297acffe3f5176c35e0f6a50d0941c93dc0", "filename": "gcc/config/sparc/sun4o3.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsun4o3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsun4o3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsun4o3.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -1,3 +1,6 @@\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dsparc -Dsun -Dunix -Asystem=unix -Asystem=bsd\"\n+\n /* Override the name of the mcount profiling function.  */\n \n #undef MCOUNT_FUNCTION"}, {"sha": "2f12cc6be6b68f01b38d9e211b43afe44a2ccad2", "filename": "gcc/config/sparc/sunos4.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsunos4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsunos4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsunos4.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -20,12 +20,13 @@ Boston, MA 02111-1307, USA.  */\n \n #define SUNOS4_SHARED_LIBRARIES 1\n \n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dsparc -Dsun -Dunix -Asystem=unix -Asystem=bsd\"\n+\n /* Use N_BINCL stabs.  */\n \n #define DBX_USE_BINCL\n \n-#include \"sparc/sparc.h\"\n-\n /* The Sun as doesn't like unaligned data.  */\n #define DWARF2_UNWIND_INFO 0\n "}, {"sha": "caf6a21160c41cfea098fedc79619e1c78c3d88c", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -20,19 +20,9 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* Undefine some symbols which are defined in \"sparc.h\" but which are\n-   appropriate only for SunOS 4.x, and not for svr4.  */\n-\n-#undef WORD_SWITCH_TAKES_ARG\n-#undef ASM_OUTPUT_SOURCE_LINE\n-#undef SELECT_SECTION\n-#undef ASM_DECLARE_FUNCTION_NAME\n-#undef TEXT_SECTION_ASM_OP\n-#undef DATA_SECTION_ASM_OP\n-\n-#include \"elfos.h\"\n-#include \"svr4.h\"\n+#ifndef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (sparc ELF)\"); \n+#endif\n \n /* ??? Put back the SIZE_TYPE/PTRDIFF_TYPE definitions set by sparc.h.\n    Why, exactly, is svr4.h messing with this?  Seems like the chip "}, {"sha": "94cfb92df101f24e367c69b79fd700bda5819b93", "filename": "gcc/config/sparc/vxsim.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fvxsim.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab/gcc%2Fconfig%2Fsparc%2Fvxsim.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxsim.h?ref=0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "patch": "@@ -18,6 +18,9 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (sparc VxSim)\"); \n+\n /* Supposedly the same as vanilla sparc svr4, except for the stuff below: */\n \n #undef CPP_PREDEFINES"}]}