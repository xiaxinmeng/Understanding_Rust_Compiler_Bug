{"sha": "480677242917f34fa2f72ef5e02e6b43689d0ae5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgwNjc3MjQyOTE3ZjM0ZmEyZjcyZWY1ZTAyZTZiNDM2ODlkMGFlNQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2014-11-20T20:22:54Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2014-11-20T20:22:54Z"}, "message": "Warn on undefined loop exit.\n\n2014-11-20  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* tree-ssa-loop-niter.c (maybe_lower_iteration_bound): Warn if a loop\n\tcondition would be removed due to undefined behaviour.\n\n\tgcc/testsuite/\n\t* gcc.dg/undefined-loop-1.c: New file.\n\t* gcc.dg/undefined-loop-2.c: New file.\n\nFrom-SVN: r217891", "tree": {"sha": "431f77de5d4b389b2cbcd785e96ac89bb1d9fa29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/431f77de5d4b389b2cbcd785e96ac89bb1d9fa29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/480677242917f34fa2f72ef5e02e6b43689d0ae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/480677242917f34fa2f72ef5e02e6b43689d0ae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/480677242917f34fa2f72ef5e02e6b43689d0ae5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/480677242917f34fa2f72ef5e02e6b43689d0ae5/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea6a433c6cc3875e03f0aa2bdfe7afdcb7a90083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6a433c6cc3875e03f0aa2bdfe7afdcb7a90083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea6a433c6cc3875e03f0aa2bdfe7afdcb7a90083"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "7153d67ad3a3c6812ebcc9be328ece8a12de422d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/480677242917f34fa2f72ef5e02e6b43689d0ae5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/480677242917f34fa2f72ef5e02e6b43689d0ae5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=480677242917f34fa2f72ef5e02e6b43689d0ae5", "patch": "@@ -1,3 +1,8 @@\n+2014-11-20  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* tree-ssa-loop-niter.c (maybe_lower_iteration_bound): Warn if a loop\n+\tcondition would be removed due to undefined behaviour.\n+\n 2014-11-20  Andrew Pinski  <apinski@cavium.com>\n \n \tPR ipa/63981"}, {"sha": "4aba5fb9e86a6dce3116ac8a45ab2e9a6d0cc510", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/480677242917f34fa2f72ef5e02e6b43689d0ae5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/480677242917f34fa2f72ef5e02e6b43689d0ae5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=480677242917f34fa2f72ef5e02e6b43689d0ae5", "patch": "@@ -1,3 +1,8 @@\n+2014-11-20  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* gcc.dg/undefined-loop-1.c: New file.\n+\t* gcc.dg/undefined-loop-2.c: New file.\n+\n 2014-11-20  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* gcc.target/aarch64/symbol-range.c: New."}, {"sha": "80260cc8b01166ed2517d0076c15d5a907b52af7", "filename": "gcc/testsuite/gcc.dg/undefined-loop-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/480677242917f34fa2f72ef5e02e6b43689d0ae5/gcc%2Ftestsuite%2Fgcc.dg%2Fundefined-loop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/480677242917f34fa2f72ef5e02e6b43689d0ae5/gcc%2Ftestsuite%2Fgcc.dg%2Fundefined-loop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fundefined-loop-1.c?ref=480677242917f34fa2f72ef5e02e6b43689d0ae5", "patch": "@@ -0,0 +1,18 @@\n+/* Check that loops whose final iteration is undefined are detected.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Waggressive-loop-optimizations\" } */\n+\n+void doSomething(char);\n+\n+char array[5];\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0;\n+       array[i]  /* { dg-message \"note: possible undefined statement is here\" } */\n+       && i < 5; /* { dg-warning \"loop exit may only be reached after undefined behavior\" } */\n+       i++)\n+    doSomething(array[i]);\n+}"}, {"sha": "dbea62cf20b6a4032ed84e946605f396a7d0d85e", "filename": "gcc/testsuite/gcc.dg/undefined-loop-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/480677242917f34fa2f72ef5e02e6b43689d0ae5/gcc%2Ftestsuite%2Fgcc.dg%2Fundefined-loop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/480677242917f34fa2f72ef5e02e6b43689d0ae5/gcc%2Ftestsuite%2Fgcc.dg%2Fundefined-loop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fundefined-loop-2.c?ref=480677242917f34fa2f72ef5e02e6b43689d0ae5", "patch": "@@ -0,0 +1,22 @@\n+/* Check that loops whose final iteration is undefined are detected.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Waggressive-loop-optimizations\" } */\n+\n+void doSomething(char);\n+\n+char array1[5];\n+char array2[5];\n+\n+void\n+foo (int p)\n+{\n+  int i;\n+  for (i=0;\n+       (p\n+        ? array1[i]  /* { dg-message \"note: possible undefined statement is here\" } */\n+        : array2[i]) /* { dg-message \"note: possible undefined statement is here\" } */\n+       && i < 5      /* { dg-warning \"loop exit may only be reached after undefined behavior\" } */\n+       && i < 100;   /* { dg-warning \"loop exit may only be reached after undefined behavior\" } */\n+       i++)\n+    doSomething(array1[i]);\n+}"}, {"sha": "8ba365c4f34395265b627be0894b626c6cae961e", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/480677242917f34fa2f72ef5e02e6b43689d0ae5/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/480677242917f34fa2f72ef5e02e6b43689d0ae5/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=480677242917f34fa2f72ef5e02e6b43689d0ae5", "patch": "@@ -3294,6 +3294,7 @@ maybe_lower_iteration_bound (struct loop *loop)\n   struct nb_iter_bound *elt;\n   bool found_exit = false;\n   vec<basic_block> queue = vNULL;\n+  vec<gimple> problem_stmts = vNULL;\n   bitmap visited;\n \n   /* Collect all statements with interesting (i.e. lower than\n@@ -3339,6 +3340,7 @@ maybe_lower_iteration_bound (struct loop *loop)\n \t  if (not_executed_last_iteration->contains (stmt))\n \t    {\n \t      stmt_found = true;\n+\t      problem_stmts.safe_push (stmt);\n \t      break;\n \t    }\n \t  if (gimple_has_side_effects (stmt))\n@@ -3382,9 +3384,53 @@ maybe_lower_iteration_bound (struct loop *loop)\n \t\t \"undefined statement must be executed at the last iteration.\\n\");\n       record_niter_bound (loop, loop->nb_iterations_upper_bound - 1,\n \t\t\t  false, true);\n+\n+      if (warn_aggressive_loop_optimizations)\n+\t{\n+\t  bool exit_warned = false;\n+\t  for (elt = loop->bounds; elt; elt = elt->next)\n+\t    {\n+\t      if (elt->is_exit\n+\t\t  && wi::gtu_p (elt->bound, loop->nb_iterations_upper_bound))\n+\t\t{\n+\t\t  basic_block bb = gimple_bb (elt->stmt);\n+\t\t  edge exit_edge = EDGE_SUCC (bb, 0);\n+\t\t  struct tree_niter_desc niter;\n+\n+\t\t  if (!loop_exit_edge_p (loop, exit_edge))\n+\t\t    exit_edge = EDGE_SUCC (bb, 1);\n+\n+\t\t  if(number_of_iterations_exit (loop, exit_edge,\n+\t\t\t\t\t\t&niter, false, false)\n+\t\t     && integer_onep (niter.assumptions)\n+\t\t     && integer_zerop (niter.may_be_zero)\n+\t\t     && niter.niter\n+\t\t     && TREE_CODE (niter.niter) == INTEGER_CST\n+\t\t     && wi::ltu_p (loop->nb_iterations_upper_bound,\n+\t\t\t\t   wi::to_widest (niter.niter)))\n+\t\t   {\n+\t\t     if (warning_at (gimple_location (elt->stmt),\n+\t\t\t\t     OPT_Waggressive_loop_optimizations,\n+\t\t\t\t     \"loop exit may only be reached after undefined behavior\"))\n+\t\t       exit_warned = true;\n+\t\t   }\n+\t\t}\n+\t    }\n+\n+\t  if (exit_warned && !problem_stmts.empty ())\n+\t    {\n+\t      gimple stmt;\n+\t      int index;\n+\t      FOR_EACH_VEC_ELT (problem_stmts, index, stmt)\n+\t\tinform (gimple_location (stmt),\n+\t\t\t\"possible undefined statement is here\");\n+\t    }\n+      }\n     }\n+\n   BITMAP_FREE (visited);\n   queue.release ();\n+  problem_stmts.release ();\n   delete not_executed_last_iteration;\n }\n "}]}