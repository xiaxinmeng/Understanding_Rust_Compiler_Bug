{"sha": "0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU3YjZhNTFkZjFmNWZmYTgxYmViYmU0OTJjZTE0MThjOWZkY2VhYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-12-19T14:59:14Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-12-19T14:59:14Z"}, "message": "gimple const-correctness fixes\n\nThis patch converts various \"gimple *\" to \"const gimple *\" and similar\nfixes for gimple subclasses, adding is_a_helper for gimple subclasses\nto support the const form of as_a, and adding a few \"const\" overloads\nof accessors.\n\nThis is enough to make pp_gimple_stmt_1's stmt const.\n\ngcc/ChangeLog:\n\t* gimple-predict.h (gimple_predict_predictor): Make \"gs\" param\n\tconst.\n\t(gimple_predict_outcome): Likewise.\n\t* gimple-pretty-print.c (do_niy): Likewise.\n\t(dump_unary_rhs): Likewise.\n\t(dump_binary_rhs): Likewise.\n\t(dump_ternary_rhs): Likewise.\n\t(dump_gimple_assign): Likewise.\n\t(dump_gimple_return): Likewise.\n\t(dump_gimple_call_args): Likewise.\n\t(pp_points_to_solution): Make \"pt\" param const.\n\t(dump_gimple_call): Make \"gs\" param const.\n\t(dump_gimple_switch): Likewise.\n\t(dump_gimple_cond): Likewise.\n\t(dump_gimple_label): Likewise.\n\t(dump_gimple_goto): Likewise.\n\t(dump_gimple_bind): Likewise.\n\t(dump_gimple_try): Likewise.\n\t(dump_gimple_catch): Likewise.\n\t(dump_gimple_eh_filter): Likewise.\n\t(dump_gimple_eh_must_not_throw): Likewise.\n\t(dump_gimple_eh_else): Likewise.\n\t(dump_gimple_resx): Likewise.\n\t(dump_gimple_eh_dispatch): Likewise.\n\t(dump_gimple_debug): Likewise.\n\t(dump_gimple_omp_for): Likewise.\n\t(dump_gimple_omp_continue): Likewise.\n\t(dump_gimple_omp_single): Likewise.\n\t(dump_gimple_omp_taskgroup): Likewise.\n\t(dump_gimple_omp_target): Likewise.\n\t(dump_gimple_omp_teams): Likewise.\n\t(dump_gimple_omp_sections): Likewise.\n\t(dump_gimple_omp_block): Likewise.\n\t(dump_gimple_omp_critical): Likewise.\n\t(dump_gimple_omp_ordered): Likewise.\n\t(dump_gimple_omp_scan): Likewise.\n\t(dump_gimple_omp_return): Likewise.\n\t(dump_gimple_transaction): Likewise.\n\t(dump_gimple_asm): Likewise.\n\t(dump_gimple_phi): Make \"phi\" param const.\n\t(dump_gimple_omp_parallel): Make \"gs\" param const.\n\t(dump_gimple_omp_task): Likewise.\n\t(dump_gimple_omp_atomic_load): Likewise.\n\t(dump_gimple_omp_atomic_store): Likewise.\n\t(dump_gimple_mem_ops): Likewise.\n\t(pp_gimple_stmt_1): Likewise.  Add \"const\" to the various as_a <>\n\tcasts throughout.\n\t* gimple-pretty-print.h (gimple_stmt_1): Make gimple * param const.\n\t* gimple.h (is_a_helper <const gdebug *>::test): New.\n\t(is_a_helper <const ggoto *>::test): New.\n\t(is_a_helper <const glabel *>::test): New.\n\t(is_a_helper <const geh_else *>::test): New.\n\t(is_a_helper <const geh_mnt *>::test): New.\n\t(is_a_helper <const gswitch *>::test): New.\n\t(is_a_helper <const gtry *>::test): New.\n\t(is_a_helper <const greturn *>::test): New.\n\t(gimple_call_tail_p): Make param const.\n\t(gimple_call_return_slot_opt_p): Likewise.\n\t(gimple_call_va_arg_pack_p): Likewise.\n\t(gimple_call_use_set): Add const overload.\n\t(gimple_call_clobber_set): Likewise.\n\t(gimple_has_lhs): Make param const.\n\t(gimple_bind_body): Likewise.\n\t(gimple_catch_handler): Likewise.\n\t(gimple_eh_filter_failure): Likewise.\n\t(gimple_eh_must_not_throw_fndecl): Likewise.\n\t(gimple_eh_else_n_body): Likewise.\n\t(gimple_eh_else_e_body): Likewise.\n\t(gimple_try_eval): Likewise.\n\t(gimple_try_cleanup): Likewise.\n\t(gimple_phi_arg): Add const overload.\n\t(gimple_phi_arg_def): Make param const.\n\t(gimple_phi_arg_edge): Likewise.\n\t(gimple_phi_arg_location): Likewise.\n\t(gimple_phi_arg_has_location): Likewise.\n\t(gimple_debug_bind_get_var): Likewise.\n\t(gimple_debug_bind_get_value): Likewise.\n\t(gimple_debug_source_bind_get_var): Likewise.\n\t(gimple_debug_source_bind_get_value): Likewise.\n\t(gimple_omp_body): Likewise.\n\t(gimple_omp_for_collapse): Likewise.\n\t(gimple_omp_for_pre_body): Likewise.\n\t(gimple_transaction_body): Likewise.\n\t* tree-eh.c (lookup_stmt_eh_lp_fn): Make param \"t\" const.\n\t(lookup_stmt_eh_lp): Likewise.\n\t* tree-eh.h (lookup_stmt_eh_lp_fn): Make param const.\n\t(lookup_stmt_eh_lp): Likewise.\n\t* tree-ssa-alias.h (pt_solution_empty_p): Make param const.\n\t* tree-ssa-structalias.c (pt_solution_empty_p): Likewise.\n\nFrom-SVN: r279581", "tree": {"sha": "08b3dd8b9ca2e3a924d780a80dde6e25d882d8ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08b3dd8b9ca2e3a924d780a80dde6e25d882d8ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b23c6a2c604c0dccf14cc3461357a28ffb99ed88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b23c6a2c604c0dccf14cc3461357a28ffb99ed88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b23c6a2c604c0dccf14cc3461357a28ffb99ed88"}], "stats": {"total": 428, "additions": 305, "deletions": 123}, "files": [{"sha": "4892f0385979b8011d3da0a5b4b79b2a7d42e2f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "patch": "@@ -1,3 +1,95 @@\n+2019-12-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gimple-predict.h (gimple_predict_predictor): Make \"gs\" param\n+\tconst.\n+\t(gimple_predict_outcome): Likewise.\n+\t* gimple-pretty-print.c (do_niy): Likewise.\n+\t(dump_unary_rhs): Likewise.\n+\t(dump_binary_rhs): Likewise.\n+\t(dump_ternary_rhs): Likewise.\n+\t(dump_gimple_assign): Likewise.\n+\t(dump_gimple_return): Likewise.\n+\t(dump_gimple_call_args): Likewise.\n+\t(pp_points_to_solution): Make \"pt\" param const.\n+\t(dump_gimple_call): Make \"gs\" param const.\n+\t(dump_gimple_switch): Likewise.\n+\t(dump_gimple_cond): Likewise.\n+\t(dump_gimple_label): Likewise.\n+\t(dump_gimple_goto): Likewise.\n+\t(dump_gimple_bind): Likewise.\n+\t(dump_gimple_try): Likewise.\n+\t(dump_gimple_catch): Likewise.\n+\t(dump_gimple_eh_filter): Likewise.\n+\t(dump_gimple_eh_must_not_throw): Likewise.\n+\t(dump_gimple_eh_else): Likewise.\n+\t(dump_gimple_resx): Likewise.\n+\t(dump_gimple_eh_dispatch): Likewise.\n+\t(dump_gimple_debug): Likewise.\n+\t(dump_gimple_omp_for): Likewise.\n+\t(dump_gimple_omp_continue): Likewise.\n+\t(dump_gimple_omp_single): Likewise.\n+\t(dump_gimple_omp_taskgroup): Likewise.\n+\t(dump_gimple_omp_target): Likewise.\n+\t(dump_gimple_omp_teams): Likewise.\n+\t(dump_gimple_omp_sections): Likewise.\n+\t(dump_gimple_omp_block): Likewise.\n+\t(dump_gimple_omp_critical): Likewise.\n+\t(dump_gimple_omp_ordered): Likewise.\n+\t(dump_gimple_omp_scan): Likewise.\n+\t(dump_gimple_omp_return): Likewise.\n+\t(dump_gimple_transaction): Likewise.\n+\t(dump_gimple_asm): Likewise.\n+\t(dump_gimple_phi): Make \"phi\" param const.\n+\t(dump_gimple_omp_parallel): Make \"gs\" param const.\n+\t(dump_gimple_omp_task): Likewise.\n+\t(dump_gimple_omp_atomic_load): Likewise.\n+\t(dump_gimple_omp_atomic_store): Likewise.\n+\t(dump_gimple_mem_ops): Likewise.\n+\t(pp_gimple_stmt_1): Likewise.  Add \"const\" to the various as_a <>\n+\tcasts throughout.\n+\t* gimple-pretty-print.h (gimple_stmt_1): Make gimple * param const.\n+\t* gimple.h (is_a_helper <const gdebug *>::test): New.\n+\t(is_a_helper <const ggoto *>::test): New.\n+\t(is_a_helper <const glabel *>::test): New.\n+\t(is_a_helper <const geh_else *>::test): New.\n+\t(is_a_helper <const geh_mnt *>::test): New.\n+\t(is_a_helper <const gswitch *>::test): New.\n+\t(is_a_helper <const gtry *>::test): New.\n+\t(is_a_helper <const greturn *>::test): New.\n+\t(gimple_call_tail_p): Make param const.\n+\t(gimple_call_return_slot_opt_p): Likewise.\n+\t(gimple_call_va_arg_pack_p): Likewise.\n+\t(gimple_call_use_set): Add const overload.\n+\t(gimple_call_clobber_set): Likewise.\n+\t(gimple_has_lhs): Make param const.\n+\t(gimple_bind_body): Likewise.\n+\t(gimple_catch_handler): Likewise.\n+\t(gimple_eh_filter_failure): Likewise.\n+\t(gimple_eh_must_not_throw_fndecl): Likewise.\n+\t(gimple_eh_else_n_body): Likewise.\n+\t(gimple_eh_else_e_body): Likewise.\n+\t(gimple_try_eval): Likewise.\n+\t(gimple_try_cleanup): Likewise.\n+\t(gimple_phi_arg): Add const overload.\n+\t(gimple_phi_arg_def): Make param const.\n+\t(gimple_phi_arg_edge): Likewise.\n+\t(gimple_phi_arg_location): Likewise.\n+\t(gimple_phi_arg_has_location): Likewise.\n+\t(gimple_debug_bind_get_var): Likewise.\n+\t(gimple_debug_bind_get_value): Likewise.\n+\t(gimple_debug_source_bind_get_var): Likewise.\n+\t(gimple_debug_source_bind_get_value): Likewise.\n+\t(gimple_omp_body): Likewise.\n+\t(gimple_omp_for_collapse): Likewise.\n+\t(gimple_omp_for_pre_body): Likewise.\n+\t(gimple_transaction_body): Likewise.\n+\t* tree-eh.c (lookup_stmt_eh_lp_fn): Make param \"t\" const.\n+\t(lookup_stmt_eh_lp): Likewise.\n+\t* tree-eh.h (lookup_stmt_eh_lp_fn): Make param const.\n+\t(lookup_stmt_eh_lp): Likewise.\n+\t* tree-ssa-alias.h (pt_solution_empty_p): Make param const.\n+\t* tree-ssa-structalias.c (pt_solution_empty_p): Likewise.\n+\n 2019-12-19  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_simd_valid_immediate): When"}, {"sha": "d9763175b8a16870afcf17f41ab1a64c3e9d3e34", "filename": "gcc/gimple-predict.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Fgimple-predict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Fgimple-predict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predict.h?ref=0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Return the predictor of GIMPLE_PREDICT statement GS.  */\n \n static inline enum br_predictor\n-gimple_predict_predictor (gimple *gs)\n+gimple_predict_predictor (const gimple *gs)\n {\n   GIMPLE_CHECK (gs, GIMPLE_PREDICT);\n   return (enum br_predictor) (gs->subcode & ~GF_PREDICT_TAKEN);\n@@ -47,7 +47,7 @@ gimple_predict_set_predictor (gimple *gs, enum br_predictor predictor)\n /* Return the outcome of GIMPLE_PREDICT statement GS.  */\n \n static inline enum prediction\n-gimple_predict_outcome (gimple *gs)\n+gimple_predict_outcome (const gimple *gs)\n {\n   GIMPLE_CHECK (gs, GIMPLE_PREDICT);\n   return (gs->subcode & GF_PREDICT_TAKEN) ? TAKEN : NOT_TAKEN;"}, {"sha": "9ec435fc56fe2554e4def5d74fb8fad7423af662", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 81, "deletions": 78, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "patch": "@@ -59,7 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n    gimple statement GS.  */\n \n static void\n-do_niy (pretty_printer *buffer, gimple *gs)\n+do_niy (pretty_printer *buffer, const gimple *gs)\n {\n   pp_printf (buffer, \"<<< Unknown GIMPLE statement: %s >>>\\n\",\n \t     gimple_code_name[(int) gimple_code (gs)]);\n@@ -327,7 +327,7 @@ dump_gimple_fmt (pretty_printer *buffer, int spc, dump_flags_t flags,\n    assignment GS.  BUFFER, SPC and FLAGS are as in pp_gimple_stmt_1.  */\n \n static void\n-dump_unary_rhs (pretty_printer *buffer, gassign *gs, int spc,\n+dump_unary_rhs (pretty_printer *buffer, const gassign *gs, int spc,\n \t\tdump_flags_t flags)\n {\n   enum tree_code rhs_code = gimple_assign_rhs_code (gs);\n@@ -423,7 +423,7 @@ dump_unary_rhs (pretty_printer *buffer, gassign *gs, int spc,\n    assignment GS.  BUFFER, SPC and FLAGS are as in pp_gimple_stmt_1.  */\n \n static void\n-dump_binary_rhs (pretty_printer *buffer, gassign *gs, int spc,\n+dump_binary_rhs (pretty_printer *buffer, const gassign *gs, int spc,\n \t\t dump_flags_t flags)\n {\n   const char *p;\n@@ -495,7 +495,7 @@ dump_binary_rhs (pretty_printer *buffer, gassign *gs, int spc,\n    assignment GS.  BUFFER, SPC and FLAGS are as in pp_gimple_stmt_1.  */\n \n static void\n-dump_ternary_rhs (pretty_printer *buffer, gassign *gs, int spc,\n+dump_ternary_rhs (pretty_printer *buffer, const gassign *gs, int spc,\n \t\t  dump_flags_t flags)\n {\n   const char *p;\n@@ -625,7 +625,7 @@ dump_ternary_rhs (pretty_printer *buffer, gassign *gs, int spc,\n    pp_gimple_stmt_1.  */\n \n static void\n-dump_gimple_assign (pretty_printer *buffer, gassign *gs, int spc,\n+dump_gimple_assign (pretty_printer *buffer, const gassign *gs, int spc,\n \t\t    dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -687,7 +687,7 @@ dump_gimple_assign (pretty_printer *buffer, gassign *gs, int spc,\n    pp_gimple_stmt_1.  */\n \n static void\n-dump_gimple_return (pretty_printer *buffer, greturn *gs, int spc,\n+dump_gimple_return (pretty_printer *buffer, const greturn *gs, int spc,\n \t\t    dump_flags_t flags)\n {\n   tree t;\n@@ -712,7 +712,8 @@ dump_gimple_return (pretty_printer *buffer, greturn *gs, int spc,\n    dump_gimple_call.  */\n \n static void\n-dump_gimple_call_args (pretty_printer *buffer, gcall *gs, dump_flags_t flags)\n+dump_gimple_call_args (pretty_printer *buffer, const gcall *gs,\n+\t\t       dump_flags_t flags)\n {\n   size_t i = 0;\n \n@@ -795,7 +796,7 @@ dump_gimple_call_args (pretty_printer *buffer, gcall *gs, dump_flags_t flags)\n /* Dump the points-to solution *PT to BUFFER.  */\n \n static void\n-pp_points_to_solution (pretty_printer *buffer, struct pt_solution *pt)\n+pp_points_to_solution (pretty_printer *buffer, const pt_solution *pt)\n {\n   if (pt->anything)\n     {\n@@ -868,15 +869,15 @@ pp_points_to_solution (pretty_printer *buffer, struct pt_solution *pt)\n    pp_gimple_stmt_1.  */\n \n static void\n-dump_gimple_call (pretty_printer *buffer, gcall *gs, int spc,\n+dump_gimple_call (pretty_printer *buffer, const gcall *gs, int spc,\n \t\t  dump_flags_t flags)\n {\n   tree lhs = gimple_call_lhs (gs);\n   tree fn = gimple_call_fn (gs);\n \n   if (flags & TDF_ALIAS)\n     {\n-      struct pt_solution *pt;\n+      const pt_solution *pt;\n       pt = gimple_call_use_set (gs);\n       if (!pt_solution_empty_p (pt))\n \t{\n@@ -1006,7 +1007,7 @@ dump_gimple_call (pretty_printer *buffer, gcall *gs, int spc,\n    pp_gimple_stmt_1.  */\n \n static void\n-dump_gimple_switch (pretty_printer *buffer, gswitch *gs, int spc,\n+dump_gimple_switch (pretty_printer *buffer, const gswitch *gs, int spc,\n \t\t    dump_flags_t flags)\n {\n   unsigned int i;\n@@ -1064,7 +1065,7 @@ dump_gimple_switch (pretty_printer *buffer, gswitch *gs, int spc,\n    pp_gimple_stmt_1.  */\n \n static void\n-dump_gimple_cond (pretty_printer *buffer, gcond *gs, int spc,\n+dump_gimple_cond (pretty_printer *buffer, const gcond *gs, int spc,\n \t\t  dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1131,7 +1132,7 @@ dump_gimple_cond (pretty_printer *buffer, gcond *gs, int spc,\n    TDF_* in dumpfils.h).  */\n \n static void\n-dump_gimple_label (pretty_printer *buffer, glabel *gs, int spc,\n+dump_gimple_label (pretty_printer *buffer, const glabel *gs, int spc,\n \t\t   dump_flags_t flags)\n {\n   tree label = gimple_label_label (gs);\n@@ -1155,7 +1156,7 @@ dump_gimple_label (pretty_printer *buffer, glabel *gs, int spc,\n    TDF_* in dumpfile.h).  */\n \n static void\n-dump_gimple_goto (pretty_printer *buffer, ggoto *gs, int spc,\n+dump_gimple_goto (pretty_printer *buffer, const ggoto *gs, int spc,\n \t\t  dump_flags_t flags)\n {\n   tree label = gimple_goto_dest (gs);\n@@ -1171,7 +1172,7 @@ dump_gimple_goto (pretty_printer *buffer, ggoto *gs, int spc,\n    TDF_* in dumpfile.h).  */\n \n static void\n-dump_gimple_bind (pretty_printer *buffer, gbind *gs, int spc,\n+dump_gimple_bind (pretty_printer *buffer, const gbind *gs, int spc,\n \t\t  dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1205,7 +1206,7 @@ dump_gimple_bind (pretty_printer *buffer, gbind *gs, int spc,\n    dumpfile.h).  */\n \n static void\n-dump_gimple_try (pretty_printer *buffer, gtry *gs, int spc,\n+dump_gimple_try (pretty_printer *buffer, const gtry *gs, int spc,\n \t\t dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1280,7 +1281,7 @@ dump_gimple_try (pretty_printer *buffer, gtry *gs, int spc,\n    dumpfile.h).  */\n \n static void\n-dump_gimple_catch (pretty_printer *buffer, gcatch *gs, int spc,\n+dump_gimple_catch (pretty_printer *buffer, const gcatch *gs, int spc,\n \t\t   dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1297,7 +1298,7 @@ dump_gimple_catch (pretty_printer *buffer, gcatch *gs, int spc,\n    dumpfile.h).  */\n \n static void\n-dump_gimple_eh_filter (pretty_printer *buffer, geh_filter *gs, int spc,\n+dump_gimple_eh_filter (pretty_printer *buffer, const geh_filter *gs, int spc,\n \t\t       dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1315,7 +1316,7 @@ dump_gimple_eh_filter (pretty_printer *buffer, geh_filter *gs, int spc,\n \n static void\n dump_gimple_eh_must_not_throw (pretty_printer *buffer,\n-\t\t\t       geh_mnt *gs, int spc, dump_flags_t flags)\n+\t\t\t       const geh_mnt *gs, int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <%T>\", gs,\n@@ -1331,7 +1332,7 @@ dump_gimple_eh_must_not_throw (pretty_printer *buffer,\n    dumpfile.h).  */\n \n static void\n-dump_gimple_eh_else (pretty_printer *buffer, geh_else *gs, int spc,\n+dump_gimple_eh_else (pretty_printer *buffer, const geh_else *gs, int spc,\n \t\t     dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1350,7 +1351,7 @@ dump_gimple_eh_else (pretty_printer *buffer, geh_else *gs, int spc,\n    dumpfile.h).  */\n \n static void\n-dump_gimple_resx (pretty_printer *buffer, gresx *gs, int spc,\n+dump_gimple_resx (pretty_printer *buffer, const gresx *gs, int spc,\n \t\t  dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1363,8 +1364,8 @@ dump_gimple_resx (pretty_printer *buffer, gresx *gs, int spc,\n /* Dump a GIMPLE_EH_DISPATCH tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_eh_dispatch (pretty_printer *buffer, geh_dispatch *gs, int spc,\n-\t\t\t dump_flags_t flags)\n+dump_gimple_eh_dispatch (pretty_printer *buffer, const geh_dispatch *gs,\n+\t\t\t int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <%d>\", gs,\n@@ -1379,7 +1380,7 @@ dump_gimple_eh_dispatch (pretty_printer *buffer, geh_dispatch *gs, int spc,\n    in dumpfile.h).  */\n \n static void\n-dump_gimple_debug (pretty_printer *buffer, gdebug *gs, int spc,\n+dump_gimple_debug (pretty_printer *buffer, const gdebug *gs, int spc,\n \t\t   dump_flags_t flags)\n {\n   switch (gs->subcode)\n@@ -1433,7 +1434,7 @@ dump_gimple_debug (pretty_printer *buffer, gdebug *gs, int spc,\n \n /* Dump a GIMPLE_OMP_FOR tuple on the pretty_printer BUFFER.  */\n static void\n-dump_gimple_omp_for (pretty_printer *buffer, gomp_for *gs, int spc,\n+dump_gimple_omp_for (pretty_printer *buffer, const gomp_for *gs, int spc,\n \t\t     dump_flags_t flags)\n {\n   size_t i;\n@@ -1566,7 +1567,7 @@ dump_gimple_omp_for (pretty_printer *buffer, gomp_for *gs, int spc,\n /* Dump a GIMPLE_OMP_CONTINUE tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_continue (pretty_printer *buffer, gomp_continue *gs,\n+dump_gimple_omp_continue (pretty_printer *buffer, const gomp_continue *gs,\n \t\t\t  int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1591,7 +1592,7 @@ dump_gimple_omp_continue (pretty_printer *buffer, gomp_continue *gs,\n /* Dump a GIMPLE_OMP_SINGLE tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_single (pretty_printer *buffer, gomp_single *gs,\n+dump_gimple_omp_single (pretty_printer *buffer, const gomp_single *gs,\n \t\t\tint spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1620,7 +1621,7 @@ dump_gimple_omp_single (pretty_printer *buffer, gomp_single *gs,\n /* Dump a GIMPLE_OMP_TASKGROUP tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_taskgroup (pretty_printer *buffer, gimple *gs,\n+dump_gimple_omp_taskgroup (pretty_printer *buffer, const gimple *gs,\n \t\t\t   int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1649,7 +1650,7 @@ dump_gimple_omp_taskgroup (pretty_printer *buffer, gimple *gs,\n /* Dump a GIMPLE_OMP_TARGET tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_target (pretty_printer *buffer, gomp_target *gs,\n+dump_gimple_omp_target (pretty_printer *buffer, const gomp_target *gs,\n \t\t\tint spc, dump_flags_t flags)\n {\n   const char *kind;\n@@ -1745,7 +1746,7 @@ dump_gimple_omp_target (pretty_printer *buffer, gomp_target *gs,\n /* Dump a GIMPLE_OMP_TEAMS tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_teams (pretty_printer *buffer, gomp_teams *gs, int spc,\n+dump_gimple_omp_teams (pretty_printer *buffer, const gomp_teams *gs, int spc,\n \t\t       dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1774,7 +1775,7 @@ dump_gimple_omp_teams (pretty_printer *buffer, gomp_teams *gs, int spc,\n /* Dump a GIMPLE_OMP_SECTIONS tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_sections (pretty_printer *buffer, gomp_sections *gs,\n+dump_gimple_omp_sections (pretty_printer *buffer, const gomp_sections *gs,\n \t\t\t  int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1811,7 +1812,7 @@ dump_gimple_omp_sections (pretty_printer *buffer, gomp_sections *gs,\n    pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_block (pretty_printer *buffer, gimple *gs, int spc,\n+dump_gimple_omp_block (pretty_printer *buffer, const gimple *gs, int spc,\n \t\t       dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1848,7 +1849,7 @@ dump_gimple_omp_block (pretty_printer *buffer, gimple *gs, int spc,\n /* Dump a GIMPLE_OMP_CRITICAL tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_critical (pretty_printer *buffer, gomp_critical *gs,\n+dump_gimple_omp_critical (pretty_printer *buffer, const gomp_critical *gs,\n \t\t\t  int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1880,7 +1881,7 @@ dump_gimple_omp_critical (pretty_printer *buffer, gomp_critical *gs,\n /* Dump a GIMPLE_OMP_ORDERED tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_ordered (pretty_printer *buffer, gomp_ordered *gs,\n+dump_gimple_omp_ordered (pretty_printer *buffer, const gomp_ordered *gs,\n \t\t\t int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1905,7 +1906,7 @@ dump_gimple_omp_ordered (pretty_printer *buffer, gomp_ordered *gs,\n /* Dump a GIMPLE_OMP_SCAN tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_scan (pretty_printer *buffer, gomp_scan *gs,\n+dump_gimple_omp_scan (pretty_printer *buffer, const gomp_scan *gs,\n \t\t      int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1933,7 +1934,7 @@ dump_gimple_omp_scan (pretty_printer *buffer, gomp_scan *gs,\n /* Dump a GIMPLE_OMP_RETURN tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_return (pretty_printer *buffer, gimple *gs, int spc,\n+dump_gimple_omp_return (pretty_printer *buffer, const gimple *gs, int spc,\n \t\t\tdump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -1964,7 +1965,7 @@ dump_gimple_omp_return (pretty_printer *buffer, gimple *gs, int spc,\n /* Dump a GIMPLE_TRANSACTION tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_transaction (pretty_printer *buffer, gtransaction *gs,\n+dump_gimple_transaction (pretty_printer *buffer, const gtransaction *gs,\n \t\t\t int spc, dump_flags_t flags)\n {\n   unsigned subcode = gimple_transaction_subcode (gs);\n@@ -2066,7 +2067,8 @@ dump_gimple_transaction (pretty_printer *buffer, gtransaction *gs,\n    dumpfile.h).  */\n \n static void\n-dump_gimple_asm (pretty_printer *buffer, gasm *gs, int spc, dump_flags_t flags)\n+dump_gimple_asm (pretty_printer *buffer, const gasm *gs, int spc,\n+\t\t dump_flags_t flags)\n {\n   unsigned int i, n, f, fields;\n \n@@ -2285,7 +2287,7 @@ dump_ssaname_info_to_file (FILE *file, tree node, int spc)\n    pretty printer.  If COMMENT is true, print this after #.  */\n \n static void\n-dump_gimple_phi (pretty_printer *buffer, gphi *phi, int spc, bool comment,\n+dump_gimple_phi (pretty_printer *buffer, const gphi *phi, int spc, bool comment,\n \t\t dump_flags_t flags)\n {\n   size_t i;\n@@ -2342,7 +2344,7 @@ dump_gimple_phi (pretty_printer *buffer, gphi *phi, int spc, bool comment,\n    dumpfile.h).  */\n \n static void\n-dump_gimple_omp_parallel (pretty_printer *buffer, gomp_parallel *gs,\n+dump_gimple_omp_parallel (pretty_printer *buffer, const gomp_parallel *gs,\n \t\t\t  int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -2396,7 +2398,7 @@ dump_gimple_omp_parallel (pretty_printer *buffer, gomp_parallel *gs,\n    dumpfile.h).  */\n \n static void\n-dump_gimple_omp_task (pretty_printer *buffer, gomp_task *gs, int spc,\n+dump_gimple_omp_task (pretty_printer *buffer, const gomp_task *gs, int spc,\n \t\t      dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -2458,7 +2460,7 @@ dump_gimple_omp_task (pretty_printer *buffer, gomp_task *gs, int spc,\n    in dumpfile.h).  */\n \n static void\n-dump_gimple_omp_atomic_load (pretty_printer *buffer, gomp_atomic_load *gs,\n+dump_gimple_omp_atomic_load (pretty_printer *buffer, const gomp_atomic_load *gs,\n \t\t\t     int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -2492,7 +2494,7 @@ dump_gimple_omp_atomic_load (pretty_printer *buffer, gomp_atomic_load *gs,\n \n static void\n dump_gimple_omp_atomic_store (pretty_printer *buffer,\n-\t\t\t      gomp_atomic_store *gs, int spc,\n+\t\t\t      const gomp_atomic_store *gs, int spc,\n \t\t\t      dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n@@ -2520,7 +2522,7 @@ dump_gimple_omp_atomic_store (pretty_printer *buffer,\n    FLAGS are as in pp_gimple_stmt_1.  */\n \n static void\n-dump_gimple_mem_ops (pretty_printer *buffer, gimple *gs, int spc,\n+dump_gimple_mem_ops (pretty_printer *buffer, const gimple *gs, int spc,\n \t\t     dump_flags_t flags)\n {\n   tree vdef = gimple_vdef (gs);\n@@ -2551,14 +2553,14 @@ dump_gimple_mem_ops (pretty_printer *buffer, gimple *gs, int spc,\n    pp_flush on BUFFER to finalize the pretty printer.  */\n \n void\n-pp_gimple_stmt_1 (pretty_printer *buffer, gimple *gs, int spc,\n+pp_gimple_stmt_1 (pretty_printer *buffer, const gimple *gs, int spc,\n \t\t  dump_flags_t flags)\n {\n   if (!gs)\n     return;\n \n   if (flags & TDF_STMTADDR)\n-    pp_printf (buffer, \"<&%p> \", (void *) gs);\n+    pp_printf (buffer, \"<&%p> \", (const void *) gs);\n \n   if ((flags & TDF_LINENO) && gimple_has_location (gs))\n     dump_location (buffer, gimple_location (gs));\n@@ -2583,94 +2585,94 @@ pp_gimple_stmt_1 (pretty_printer *buffer, gimple *gs, int spc,\n   switch (gimple_code (gs))\n     {\n     case GIMPLE_ASM:\n-      dump_gimple_asm (buffer, as_a <gasm *> (gs), spc, flags);\n+      dump_gimple_asm (buffer, as_a <const gasm *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_ASSIGN:\n-      dump_gimple_assign (buffer, as_a <gassign *> (gs), spc, flags);\n+      dump_gimple_assign (buffer, as_a <const gassign *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_BIND:\n-      dump_gimple_bind (buffer, as_a <gbind *> (gs), spc, flags);\n+      dump_gimple_bind (buffer, as_a <const gbind *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_CALL:\n-      dump_gimple_call (buffer, as_a <gcall *> (gs), spc, flags);\n+      dump_gimple_call (buffer, as_a <const gcall *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_COND:\n-      dump_gimple_cond (buffer, as_a <gcond *> (gs), spc, flags);\n+      dump_gimple_cond (buffer, as_a <const gcond *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_LABEL:\n-      dump_gimple_label (buffer, as_a <glabel *> (gs), spc, flags);\n+      dump_gimple_label (buffer, as_a <const glabel *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_GOTO:\n-      dump_gimple_goto (buffer, as_a <ggoto *> (gs), spc, flags);\n+      dump_gimple_goto (buffer, as_a <const ggoto *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_NOP:\n       pp_string (buffer, \"GIMPLE_NOP\");\n       break;\n \n     case GIMPLE_RETURN:\n-      dump_gimple_return (buffer, as_a <greturn *> (gs), spc, flags);\n+      dump_gimple_return (buffer, as_a <const greturn *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_SWITCH:\n-      dump_gimple_switch (buffer, as_a <gswitch *> (gs), spc, flags);\n+      dump_gimple_switch (buffer, as_a <const gswitch *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_TRY:\n-      dump_gimple_try (buffer, as_a <gtry *> (gs), spc, flags);\n+      dump_gimple_try (buffer, as_a <const gtry *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_PHI:\n-      dump_gimple_phi (buffer, as_a <gphi *> (gs), spc, false, flags);\n+      dump_gimple_phi (buffer, as_a <const gphi *> (gs), spc, false, flags);\n       break;\n \n     case GIMPLE_OMP_PARALLEL:\n-      dump_gimple_omp_parallel (buffer, as_a <gomp_parallel *> (gs), spc,\n+      dump_gimple_omp_parallel (buffer, as_a <const gomp_parallel *> (gs), spc,\n \t\t\t\tflags);\n       break;\n \n     case GIMPLE_OMP_TASK:\n-      dump_gimple_omp_task (buffer, as_a <gomp_task *> (gs), spc, flags);\n+      dump_gimple_omp_task (buffer, as_a <const gomp_task *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_OMP_ATOMIC_LOAD:\n-      dump_gimple_omp_atomic_load (buffer, as_a <gomp_atomic_load *> (gs),\n+      dump_gimple_omp_atomic_load (buffer, as_a <const gomp_atomic_load *> (gs),\n \t\t\t\t   spc, flags);\n       break;\n \n     case GIMPLE_OMP_ATOMIC_STORE:\n       dump_gimple_omp_atomic_store (buffer,\n-\t\t\t\t    as_a <gomp_atomic_store *> (gs),\n+\t\t\t\t    as_a <const gomp_atomic_store *> (gs),\n \t\t\t\t    spc, flags);\n       break;\n \n     case GIMPLE_OMP_FOR:\n-      dump_gimple_omp_for (buffer, as_a <gomp_for *> (gs), spc, flags);\n+      dump_gimple_omp_for (buffer, as_a <const gomp_for *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_OMP_CONTINUE:\n-      dump_gimple_omp_continue (buffer, as_a <gomp_continue *> (gs), spc,\n+      dump_gimple_omp_continue (buffer, as_a <const gomp_continue *> (gs), spc,\n \t\t\t\tflags);\n       break;\n \n     case GIMPLE_OMP_SINGLE:\n-      dump_gimple_omp_single (buffer, as_a <gomp_single *> (gs), spc,\n+      dump_gimple_omp_single (buffer, as_a <const gomp_single *> (gs), spc,\n \t\t\t      flags);\n       break;\n \n     case GIMPLE_OMP_TARGET:\n-      dump_gimple_omp_target (buffer, as_a <gomp_target *> (gs), spc,\n+      dump_gimple_omp_target (buffer, as_a <const gomp_target *> (gs), spc,\n \t\t\t      flags);\n       break;\n \n     case GIMPLE_OMP_TEAMS:\n-      dump_gimple_omp_teams (buffer, as_a <gomp_teams *> (gs), spc,\n+      dump_gimple_omp_teams (buffer, as_a <const gomp_teams *> (gs), spc,\n \t\t\t     flags);\n       break;\n \n@@ -2679,7 +2681,7 @@ pp_gimple_stmt_1 (pretty_printer *buffer, gimple *gs, int spc,\n       break;\n \n     case GIMPLE_OMP_SECTIONS:\n-      dump_gimple_omp_sections (buffer, as_a <gomp_sections *> (gs),\n+      dump_gimple_omp_sections (buffer, as_a <const gomp_sections *> (gs),\n \t\t\t\tspc, flags);\n       break;\n \n@@ -2698,49 +2700,50 @@ pp_gimple_stmt_1 (pretty_printer *buffer, gimple *gs, int spc,\n       break;\n \n     case GIMPLE_OMP_ORDERED:\n-      dump_gimple_omp_ordered (buffer, as_a <gomp_ordered *> (gs), spc,\n+      dump_gimple_omp_ordered (buffer, as_a <const gomp_ordered *> (gs), spc,\n \t\t\t       flags);\n       break;\n \n     case GIMPLE_OMP_SCAN:\n-      dump_gimple_omp_scan (buffer, as_a <gomp_scan *> (gs), spc,\n+      dump_gimple_omp_scan (buffer, as_a <const gomp_scan *> (gs), spc,\n \t\t\t    flags);\n       break;\n \n     case GIMPLE_OMP_CRITICAL:\n-      dump_gimple_omp_critical (buffer, as_a <gomp_critical *> (gs), spc,\n+      dump_gimple_omp_critical (buffer, as_a <const gomp_critical *> (gs), spc,\n \t\t\t\tflags);\n       break;\n \n     case GIMPLE_CATCH:\n-      dump_gimple_catch (buffer, as_a <gcatch *> (gs), spc, flags);\n+      dump_gimple_catch (buffer, as_a <const gcatch *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_EH_FILTER:\n-      dump_gimple_eh_filter (buffer, as_a <geh_filter *> (gs), spc, flags);\n+      dump_gimple_eh_filter (buffer, as_a <const geh_filter *> (gs), spc,\n+\t\t\t     flags);\n       break;\n \n     case GIMPLE_EH_MUST_NOT_THROW:\n       dump_gimple_eh_must_not_throw (buffer,\n-\t\t\t\t     as_a <geh_mnt *> (gs),\n+\t\t\t\t     as_a <const geh_mnt *> (gs),\n \t\t\t\t     spc, flags);\n       break;\n \n     case GIMPLE_EH_ELSE:\n-      dump_gimple_eh_else (buffer, as_a <geh_else *> (gs), spc, flags);\n+      dump_gimple_eh_else (buffer, as_a <const geh_else *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_RESX:\n-      dump_gimple_resx (buffer, as_a <gresx *> (gs), spc, flags);\n+      dump_gimple_resx (buffer, as_a <const gresx *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_EH_DISPATCH:\n-      dump_gimple_eh_dispatch (buffer, as_a <geh_dispatch *> (gs), spc,\n+      dump_gimple_eh_dispatch (buffer, as_a <const geh_dispatch *> (gs), spc,\n \t\t\t       flags);\n       break;\n \n     case GIMPLE_DEBUG:\n-      dump_gimple_debug (buffer, as_a <gdebug *> (gs), spc, flags);\n+      dump_gimple_debug (buffer, as_a <const gdebug *> (gs), spc, flags);\n       break;\n \n     case GIMPLE_PREDICT:\n@@ -2754,7 +2757,7 @@ pp_gimple_stmt_1 (pretty_printer *buffer, gimple *gs, int spc,\n       break;\n \n     case GIMPLE_TRANSACTION:\n-      dump_gimple_transaction (buffer, as_a <gtransaction *> (gs), spc,\n+      dump_gimple_transaction (buffer, as_a <const gtransaction *> (gs), spc,\n \t\t\t       flags);\n       break;\n "}, {"sha": "186f2cfc9fc7ff6c17d5e9141447122e3e90b70e", "filename": "gcc/gimple-pretty-print.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Fgimple-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Fgimple-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.h?ref=0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "patch": "@@ -31,7 +31,8 @@ extern void print_gimple_stmt (FILE *, gimple *, int, dump_flags_t = TDF_NONE);\n extern void debug (gimple &ref);\n extern void debug (gimple *ptr);\n extern void print_gimple_expr (FILE *, gimple *, int, dump_flags_t = TDF_NONE);\n-extern void pp_gimple_stmt_1 (pretty_printer *, gimple *, int, dump_flags_t);\n+extern void pp_gimple_stmt_1 (pretty_printer *, const gimple *, int,\n+\t\t\t      dump_flags_t);\n extern void gimple_dump_bb (FILE *, basic_block, int, dump_flags_t);\n extern void gimple_dump_bb_for_graph (pretty_printer *, basic_block);\n extern void dump_ssaname_info_to_file (FILE *, tree, int);"}, {"sha": "cc6bbd603a101f9c20422b43a26fa9845b3901ec", "filename": "gcc/gimple.h", "status": "modified", "additions": 121, "deletions": 35, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "patch": "@@ -1015,6 +1015,14 @@ is_a_helper <gdebug *>::test (gimple *gs)\n   return gs->code == GIMPLE_DEBUG;\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <const gdebug *>::test (const gimple *gs)\n+{\n+  return gs->code == GIMPLE_DEBUG;\n+}\n+\n template <>\n template <>\n inline bool\n@@ -1023,6 +1031,14 @@ is_a_helper <ggoto *>::test (gimple *gs)\n   return gs->code == GIMPLE_GOTO;\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <const ggoto *>::test (const gimple *gs)\n+{\n+  return gs->code == GIMPLE_GOTO;\n+}\n+\n template <>\n template <>\n inline bool\n@@ -1031,6 +1047,14 @@ is_a_helper <glabel *>::test (gimple *gs)\n   return gs->code == GIMPLE_LABEL;\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <const glabel *>::test (const gimple *gs)\n+{\n+  return gs->code == GIMPLE_LABEL;\n+}\n+\n template <>\n template <>\n inline bool\n@@ -1055,6 +1079,14 @@ is_a_helper <geh_else *>::test (gimple *gs)\n   return gs->code == GIMPLE_EH_ELSE;\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <const geh_else *>::test (const gimple *gs)\n+{\n+  return gs->code == GIMPLE_EH_ELSE;\n+}\n+\n template <>\n template <>\n inline bool\n@@ -1071,6 +1103,14 @@ is_a_helper <geh_mnt *>::test (gimple *gs)\n   return gs->code == GIMPLE_EH_MUST_NOT_THROW;\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <const geh_mnt *>::test (const gimple *gs)\n+{\n+  return gs->code == GIMPLE_EH_MUST_NOT_THROW;\n+}\n+\n template <>\n template <>\n inline bool\n@@ -1217,6 +1257,14 @@ is_a_helper <gswitch *>::test (gimple *gs)\n   return gs->code == GIMPLE_SWITCH;\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <const gswitch *>::test (const gimple *gs)\n+{\n+  return gs->code == GIMPLE_SWITCH;\n+}\n+\n template <>\n template <>\n inline bool\n@@ -1233,6 +1281,14 @@ is_a_helper <gtry *>::test (gimple *gs)\n   return gs->code == GIMPLE_TRY;\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <const gtry *>::test (const gimple *gs)\n+{\n+  return gs->code == GIMPLE_TRY;\n+}\n+\n template <>\n template <>\n inline bool\n@@ -1427,6 +1483,14 @@ is_a_helper <const gphi *>::test (const gimple *gs)\n   return gs->code == GIMPLE_PHI;\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <const greturn *>::test (const gimple *gs)\n+{\n+  return gs->code == GIMPLE_RETURN;\n+}\n+\n template <>\n template <>\n inline bool\n@@ -3255,7 +3319,7 @@ gimple_call_set_tail (gcall *s, bool tail_p)\n /* Return true if GIMPLE_CALL S is marked as a tail call.  */\n \n static inline bool\n-gimple_call_tail_p (gcall *s)\n+gimple_call_tail_p (const gcall *s)\n {\n   return (s->subcode & GF_CALL_TAILCALL) != 0;\n }\n@@ -3297,7 +3361,7 @@ gimple_call_set_return_slot_opt (gcall *s, bool return_slot_opt_p)\n /* Return true if S is marked for return slot optimization.  */\n \n static inline bool\n-gimple_call_return_slot_opt_p (gcall *s)\n+gimple_call_return_slot_opt_p (const gcall *s)\n {\n   return (s->subcode & GF_CALL_RETURN_SLOT_OPT) != 0;\n }\n@@ -3342,7 +3406,7 @@ gimple_call_set_va_arg_pack (gcall *s, bool pass_arg_pack_p)\n    argument pack in its argument list.  */\n \n static inline bool\n-gimple_call_va_arg_pack_p (gcall *s)\n+gimple_call_va_arg_pack_p (const gcall *s)\n {\n   return (s->subcode & GF_CALL_VA_ARG_PACK) != 0;\n }\n@@ -3444,6 +3508,13 @@ gimple_call_use_set (gcall *call_stmt)\n   return &call_stmt->call_used;\n }\n \n+/* As above, but const.  */\n+\n+static inline const pt_solution *\n+gimple_call_use_set (const gcall *call_stmt)\n+{\n+  return &call_stmt->call_used;\n+}\n \n /* Return a pointer to the points-to solution for the set of call-used\n    variables of the call CALL_STMT.  */\n@@ -3454,16 +3525,24 @@ gimple_call_clobber_set (gcall *call_stmt)\n   return &call_stmt->call_clobbered;\n }\n \n+/* As above, but const.  */\n+\n+static inline const pt_solution *\n+gimple_call_clobber_set (const gcall *call_stmt)\n+{\n+  return &call_stmt->call_clobbered;\n+}\n+\n \n /* Returns true if this is a GIMPLE_ASSIGN or a GIMPLE_CALL with a\n    non-NULL lhs.  */\n \n static inline bool\n-gimple_has_lhs (gimple *stmt)\n+gimple_has_lhs (const gimple *stmt)\n {\n   if (is_gimple_assign (stmt))\n     return true;\n-  if (gcall *call = dyn_cast <gcall *> (stmt))\n+  if (const gcall *call = dyn_cast <const gcall *> (stmt))\n     return gimple_call_lhs (call) != NULL_TREE;\n   return false;\n }\n@@ -3761,9 +3840,9 @@ gimple_bind_body_ptr (gbind *bind_stmt)\n /* Return the GIMPLE sequence contained in the GIMPLE_BIND statement GS.  */\n \n static inline gimple_seq\n-gimple_bind_body (gbind *gs)\n+gimple_bind_body (const gbind *gs)\n {\n-  return *gimple_bind_body_ptr (gs);\n+  return *gimple_bind_body_ptr (const_cast <gbind *> (gs));\n }\n \n \n@@ -4035,9 +4114,9 @@ gimple_catch_handler_ptr (gcatch *catch_stmt)\n    GIMPLE_CATCH statement CATCH_STMT.  */\n \n static inline gimple_seq\n-gimple_catch_handler (gcatch *catch_stmt)\n+gimple_catch_handler (const gcatch *catch_stmt)\n {\n-  return *gimple_catch_handler_ptr (catch_stmt);\n+  return *gimple_catch_handler_ptr (const_cast <gcatch *> (catch_stmt));\n }\n \n \n@@ -4095,9 +4174,9 @@ gimple_eh_filter_failure_ptr (gimple *gs)\n    statement fails.  */\n \n static inline gimple_seq\n-gimple_eh_filter_failure (gimple *gs)\n+gimple_eh_filter_failure (const gimple *gs)\n {\n-  return *gimple_eh_filter_failure_ptr (gs);\n+  return *gimple_eh_filter_failure_ptr (const_cast <gimple *> (gs));\n }\n \n \n@@ -4124,7 +4203,7 @@ gimple_eh_filter_set_failure (geh_filter *eh_filter_stmt,\n /* Get the function decl to be called by the MUST_NOT_THROW region.  */\n \n static inline tree\n-gimple_eh_must_not_throw_fndecl (geh_mnt *eh_mnt_stmt)\n+gimple_eh_must_not_throw_fndecl (const geh_mnt *eh_mnt_stmt)\n {\n   return eh_mnt_stmt->fndecl;\n }\n@@ -4147,9 +4226,9 @@ gimple_eh_else_n_body_ptr (geh_else *eh_else_stmt)\n }\n \n static inline gimple_seq\n-gimple_eh_else_n_body (geh_else *eh_else_stmt)\n+gimple_eh_else_n_body (const geh_else *eh_else_stmt)\n {\n-  return *gimple_eh_else_n_body_ptr (eh_else_stmt);\n+  return *gimple_eh_else_n_body_ptr (const_cast <geh_else *> (eh_else_stmt));\n }\n \n static inline gimple_seq *\n@@ -4159,9 +4238,9 @@ gimple_eh_else_e_body_ptr (geh_else *eh_else_stmt)\n }\n \n static inline gimple_seq\n-gimple_eh_else_e_body (geh_else *eh_else_stmt)\n+gimple_eh_else_e_body (const geh_else *eh_else_stmt)\n {\n-  return *gimple_eh_else_e_body_ptr (eh_else_stmt);\n+  return *gimple_eh_else_e_body_ptr (const_cast <geh_else *> (eh_else_stmt));\n }\n \n static inline void\n@@ -4225,9 +4304,9 @@ gimple_try_eval_ptr (gimple *gs)\n /* Return the sequence of statements used as the body for GIMPLE_TRY GS.  */\n \n static inline gimple_seq\n-gimple_try_eval (gimple *gs)\n+gimple_try_eval (const gimple *gs)\n {\n-  return *gimple_try_eval_ptr (gs);\n+  return *gimple_try_eval_ptr (const_cast <gimple *> (gs));\n }\n \n \n@@ -4246,9 +4325,9 @@ gimple_try_cleanup_ptr (gimple *gs)\n    GIMPLE_TRY GS.  */\n \n static inline gimple_seq\n-gimple_try_cleanup (gimple *gs)\n+gimple_try_cleanup (const gimple *gs)\n {\n-  return *gimple_try_cleanup_ptr (gs);\n+  return *gimple_try_cleanup_ptr (const_cast <gimple *> (gs));\n }\n \n \n@@ -4407,6 +4486,13 @@ gimple_phi_arg (gphi *gs, unsigned index)\n   return &(gs->args[index]);\n }\n \n+static inline const phi_arg_d *\n+gimple_phi_arg (const gphi *gs, unsigned index)\n+{\n+  gcc_gimple_checking_assert (index < gs->nargs);\n+  return &(gs->args[index]);\n+}\n+\n static inline struct phi_arg_d *\n gimple_phi_arg (gimple *gs, unsigned index)\n {\n@@ -4446,7 +4532,7 @@ phi_nodes_ptr (basic_block bb)\n /* Return the tree operand for argument I of PHI node GS.  */\n \n static inline tree\n-gimple_phi_arg_def (gphi *gs, size_t index)\n+gimple_phi_arg_def (const gphi *gs, size_t index)\n {\n   return gimple_phi_arg (gs, index)->def;\n }\n@@ -4469,15 +4555,15 @@ gimple_phi_arg_def_ptr (gphi *phi, size_t index)\n /* Return the edge associated with argument I of phi node PHI.  */\n \n static inline edge\n-gimple_phi_arg_edge (gphi *phi, size_t i)\n+gimple_phi_arg_edge (const gphi *phi, size_t i)\n {\n   return EDGE_PRED (gimple_bb (phi), i);\n }\n \n /* Return the source location of gimple argument I of phi node PHI.  */\n \n static inline location_t\n-gimple_phi_arg_location (gphi *phi, size_t i)\n+gimple_phi_arg_location (const gphi *phi, size_t i)\n {\n   return gimple_phi_arg (phi, i)->locus;\n }\n@@ -4501,7 +4587,7 @@ gimple_phi_arg_set_location (gphi *phi, size_t i, location_t loc)\n /* Return TRUE if argument I of phi node PHI has a location record.  */\n \n static inline bool\n-gimple_phi_arg_has_location (gphi *phi, size_t i)\n+gimple_phi_arg_has_location (const gphi *phi, size_t i)\n {\n   return gimple_phi_arg_location (phi, i) != UNKNOWN_LOCATION;\n }\n@@ -4669,7 +4755,7 @@ gimple_debug_bind_p (const gimple *s)\n /* Return the variable bound in a GIMPLE_DEBUG bind statement.  */\n \n static inline tree\n-gimple_debug_bind_get_var (gimple *dbg)\n+gimple_debug_bind_get_var (const gimple *dbg)\n {\n   GIMPLE_CHECK (dbg, GIMPLE_DEBUG);\n   gcc_gimple_checking_assert (gimple_debug_bind_p (dbg));\n@@ -4680,7 +4766,7 @@ gimple_debug_bind_get_var (gimple *dbg)\n    statement.  */\n \n static inline tree\n-gimple_debug_bind_get_value (gimple *dbg)\n+gimple_debug_bind_get_value (const gimple *dbg)\n {\n   GIMPLE_CHECK (dbg, GIMPLE_DEBUG);\n   gcc_gimple_checking_assert (gimple_debug_bind_p (dbg));\n@@ -4761,7 +4847,7 @@ gimple_debug_source_bind_p (const gimple *s)\n /* Return the variable bound in a GIMPLE_DEBUG source bind statement.  */\n \n static inline tree\n-gimple_debug_source_bind_get_var (gimple *dbg)\n+gimple_debug_source_bind_get_var (const gimple *dbg)\n {\n   GIMPLE_CHECK (dbg, GIMPLE_DEBUG);\n   gcc_gimple_checking_assert (gimple_debug_source_bind_p (dbg));\n@@ -4772,7 +4858,7 @@ gimple_debug_source_bind_get_var (gimple *dbg)\n    statement.  */\n \n static inline tree\n-gimple_debug_source_bind_get_value (gimple *dbg)\n+gimple_debug_source_bind_get_value (const gimple *dbg)\n {\n   GIMPLE_CHECK (dbg, GIMPLE_DEBUG);\n   gcc_gimple_checking_assert (gimple_debug_source_bind_p (dbg));\n@@ -4873,9 +4959,9 @@ gimple_omp_body_ptr (gimple *gs)\n /* Return the body for the OMP statement GS.  */\n \n static inline gimple_seq\n-gimple_omp_body (gimple *gs)\n+gimple_omp_body (const gimple *gs)\n {\n-  return *gimple_omp_body_ptr (gs);\n+  return *gimple_omp_body_ptr (const_cast <gimple *> (gs));\n }\n \n /* Set BODY to be the body for the OMP statement GS.  */\n@@ -5140,9 +5226,9 @@ gimple_omp_for_set_clauses (gimple *gs, tree clauses)\n /* Get the collapse count of the OMP_FOR statement GS.  */\n \n static inline size_t\n-gimple_omp_for_collapse (gimple *gs)\n+gimple_omp_for_collapse (const gimple *gs)\n {\n-  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);\n+  const gomp_for *omp_for_stmt = as_a <const gomp_for *> (gs);\n   return omp_for_stmt->collapse;\n }\n \n@@ -5317,9 +5403,9 @@ gimple_omp_for_pre_body_ptr (gimple *gs)\n    statement GS starts.  */\n \n static inline gimple_seq\n-gimple_omp_for_pre_body (gimple *gs)\n+gimple_omp_for_pre_body (const gimple *gs)\n {\n-  return *gimple_omp_for_pre_body_ptr (gs);\n+  return *gimple_omp_for_pre_body_ptr (const_cast <gimple *> (gs));\n }\n \n \n@@ -6304,7 +6390,7 @@ gimple_transaction_body_ptr (gtransaction *transaction_stmt)\n /* Return the body for the GIMPLE_TRANSACTION statement TRANSACTION_STMT.  */\n \n static inline gimple_seq\n-gimple_transaction_body (gtransaction *transaction_stmt)\n+gimple_transaction_body (const gtransaction *transaction_stmt)\n {\n   return transaction_stmt->body;\n }"}, {"sha": "b996f49096a362e40b688b374af717d5a426cc99", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "patch": "@@ -139,19 +139,19 @@ remove_stmt_from_eh_lp (gimple *t)\n    statement is not recorded in the region table.  */\n \n int\n-lookup_stmt_eh_lp_fn (struct function *ifun, gimple *t)\n+lookup_stmt_eh_lp_fn (struct function *ifun, const gimple *t)\n {\n   if (ifun->eh->throw_stmt_table == NULL)\n     return 0;\n \n-  int *lp_nr = ifun->eh->throw_stmt_table->get (t);\n+  int *lp_nr = ifun->eh->throw_stmt_table->get (const_cast <gimple *> (t));\n   return lp_nr ? *lp_nr : 0;\n }\n \n /* Likewise, but always use the current function.  */\n \n int\n-lookup_stmt_eh_lp (gimple *t)\n+lookup_stmt_eh_lp (const gimple *t)\n {\n   /* We can get called from initialized data when -fnon-call-exceptions\n      is on; prevent crash.  */"}, {"sha": "ca3b521816daffdfd9c5286b4071a0b6ad7ac8fe", "filename": "gcc/tree-eh.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Ftree-eh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Ftree-eh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.h?ref=0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "patch": "@@ -27,8 +27,8 @@ extern void using_eh_for_cleanups (void);\n extern void add_stmt_to_eh_lp (gimple *, int);\n extern bool remove_stmt_from_eh_lp_fn (struct function *, gimple *);\n extern bool remove_stmt_from_eh_lp (gimple *);\n-extern int lookup_stmt_eh_lp_fn (struct function *, gimple *);\n-extern int lookup_stmt_eh_lp (gimple *);\n+extern int lookup_stmt_eh_lp_fn (struct function *, const gimple *);\n+extern int lookup_stmt_eh_lp (const gimple *);\n extern bool make_eh_dispatch_edges (geh_dispatch *);\n extern void make_eh_edges (gimple *);\n extern edge redirect_eh_edge (edge, basic_block);"}, {"sha": "de853127df6e08fdf7d01f5cf1158d86552ba93a", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "patch": "@@ -162,7 +162,7 @@ extern void dump_alias_stats (FILE *);\n \n /* In tree-ssa-structalias.c  */\n extern unsigned int compute_may_aliases (void);\n-extern bool pt_solution_empty_p (struct pt_solution *);\n+extern bool pt_solution_empty_p (const pt_solution *);\n extern bool pt_solution_singleton_or_null_p (struct pt_solution *, unsigned *);\n extern bool pt_solution_includes_global (struct pt_solution *);\n extern bool pt_solution_includes (struct pt_solution *, const_tree);"}, {"sha": "bc50a9be6cf0ed9f12a18e861b4f83c97a47df2c", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "patch": "@@ -6804,7 +6804,7 @@ pt_solution_ior_into (struct pt_solution *dest, struct pt_solution *src)\n /* Return true if the points-to solution *PT is empty.  */\n \n bool\n-pt_solution_empty_p (struct pt_solution *pt)\n+pt_solution_empty_p (const pt_solution *pt)\n {\n   if (pt->anything\n       || pt->nonlocal)"}]}