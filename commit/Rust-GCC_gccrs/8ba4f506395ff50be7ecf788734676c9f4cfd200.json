{"sha": "8ba4f506395ff50be7ecf788734676c9f4cfd200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhNGY1MDYzOTVmZjUwYmU3ZWNmNzg4NzM0Njc2YzlmNGNmZDIwMA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2016-12-27T13:31:43Z"}, "committer": {"name": "Alexander Ivchenko", "email": "aivchenk@gcc.gnu.org", "date": "2016-12-27T13:31:43Z"}, "message": "c.opt (flag_chkp_flexible_struct_trailing_arrays): Add new option.\n\n2016-12-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n\n* c-family/c.opt (flag_chkp_flexible_struct_trailing_arrays):\n  Add new option.\n  (fchkp-narrow-to-innermost-array): Fix typo.\n* doc/cpp.texi (flag_chkp_flexible_struct_trailing_arrays): Ditto.\n* tree-chkp.c (chkp_may_narrow_to_field ): Forbid\n  narrowing when flag_chkp_flexible_struct_trailing_arrays is used\n  and the field is the last array field in the structure.\n\n\n2016-12-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n\n* gcc.target/i386/mpx/vla-trailing-1-lbv.c: New test.\n* gcc.target/i386/mpx/vla-trailing-1-nov.c: Ditto.\n* gcc.target/i386/mpx/vla-trailing-1-ubv.c: Ditto.\n\nFrom-SVN: r243936", "tree": {"sha": "f1e12d47165d6fd6b71f33d3c80dcef9aa8c9325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1e12d47165d6fd6b71f33d3c80dcef9aa8c9325"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ba4f506395ff50be7ecf788734676c9f4cfd200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba4f506395ff50be7ecf788734676c9f4cfd200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba4f506395ff50be7ecf788734676c9f4cfd200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba4f506395ff50be7ecf788734676c9f4cfd200/comments", "author": null, "committer": null, "parents": [{"sha": "5735741b128fecd49f45170b8a85e12ee7771371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5735741b128fecd49f45170b8a85e12ee7771371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5735741b128fecd49f45170b8a85e12ee7771371"}], "stats": {"total": 123, "additions": 121, "deletions": 2}, "files": [{"sha": "25a3edb23e802fdaff9a0aa2358070ff8120176c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ba4f506395ff50be7ecf788734676c9f4cfd200", "patch": "@@ -1,3 +1,13 @@\n+2016-12-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\n+\t* c-family/c.opt (flag_chkp_flexible_struct_trailing_arrays):\n+\tAdd new option.\n+\t(fchkp-narrow-to-innermost-array): Fix typo.\n+\t* doc/cpp.texi (flag_chkp_flexible_struct_trailing_arrays): Ditto.\n+\t* tree-chkp.c (chkp_may_narrow_to_field ): Forbid\n+\tnarrowing when flag_chkp_flexible_struct_trailing_arrays is used\n+\tand the field is the last array field in the structure.\n+\n 2016-12-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (andqi_ext_1): Use general_operand"}, {"sha": "1d40d76f1b656c9d007497d5acd95cf3ef93ad90", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=8ba4f506395ff50be7ecf788734676c9f4cfd200", "patch": "@@ -1207,7 +1207,13 @@ narrowing is on, field bounds are used.  Otherwise full object bounds are used.\n fchkp-narrow-to-innermost-array\n C ObjC C++ ObjC++ LTO RejectNegative Report Var(flag_chkp_narrow_to_innermost_arrray)\n Forces Pointer Bounds Checker to use bounds of the innermost arrays in case of\n-nested static arryas access.  By default outermost array is used.\n+nested static arrays access.  By default outermost array is used.\n+\n+fchkp-flexible-struct-trailing-arrays\n+C ObjC C++ ObjC++ LTO Report Var(flag_chkp_flexible_struct_trailing_arrays)\n+Forces Pointer Bounds Checker to treat all trailing arrays in structures as\n+possibly flexible.  By default only arrays fields with zero length or that are\n+marked with attribute bnd_variable_size are treated as flexible.\n \n fchkp-optimize\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_optimize) Init(-1)"}, {"sha": "b27691458ffbbf74d6582c0952ed01eb187031cb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8ba4f506395ff50be7ecf788734676c9f4cfd200", "patch": "@@ -447,7 +447,7 @@ Objective-C and Objective-C++ Dialects}.\n -fchkp-treat-zero-dynamic-size-as-infinite -fchkp-check-read @gol\n -fchkp-check-read -fchkp-check-write -fchkp-store-bounds @gol\n -fchkp-instrument-calls -fchkp-instrument-marked-only @gol\n--fchkp-use-wrappers @gol\n+-fchkp-use-wrappers -fchkp-flexible-struct-trailing-arrays@gol\n -fstack-protector -fstack-protector-all -fstack-protector-strong @gol\n -fstack-protector-explicit -fstack-check @gol\n -fstack-limit-register=@var{reg}  -fstack-limit-symbol=@var{sym} @gol\n@@ -10954,6 +10954,13 @@ Forces Pointer Bounds Checker to use narrowed bounds for the address of the\n first field in the structure.  By default a pointer to the first field has\n the same bounds as a pointer to the whole structure.\n \n+@item -fchkp-flexible-struct-trailing-arrays\n+@opindex fchkp-flexible-struct-trailing-arrays\n+@opindex fno-chkp-flexible-struct-trailing-arrays\n+Forces Pointer Bounds Checker to treat all trailing arrays in structures as\n+possibly flexible.  By default only array fields with zero length or that are\n+marked with attribute bnd_variable_size are treated as flexible.\n+\n @item -fchkp-narrow-to-innermost-array\n @opindex fchkp-narrow-to-innermost-array\n @opindex fno-chkp-narrow-to-innermost-array"}, {"sha": "d8eecd4bec287c8fe3c230287f88e8eb01df275a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ba4f506395ff50be7ecf788734676c9f4cfd200", "patch": "@@ -1,3 +1,9 @@\n+2016-12-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\n+\t* gcc.target/i386/mpx/vla-trailing-1-lbv.c: New test.\n+\t* gcc.target/i386/mpx/vla-trailing-1-nov.c: Ditto.\n+\t* gcc.target/i386/mpx/vla-trailing-1-ubv.c: Ditto.\n+\n 2016-12-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/78904"}, {"sha": "9739920c70506b444a86b4fb165205393dcc348b", "filename": "gcc/testsuite/gcc.target/i386/mpx/vla-trailing-1-lbv.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-trailing-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-trailing-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-trailing-1-lbv.c?ref=8ba4f506395ff50be7ecf788734676c9f4cfd200", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -fchkp-flexible-struct-trailing-arrays\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S\n+{\n+  int a;\n+  int p[10];\n+};\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S *s = (struct S *)alloca (sizeof(struct S) + sizeof (int)*100);\n+  rd (s->p, -2);\n+\n+  return 0;\n+}"}, {"sha": "f5c8f95cda54d69a52fef590eaaa79ed6d4123a3", "filename": "gcc/testsuite/gcc.target/i386/mpx/vla-trailing-1-nov.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-trailing-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-trailing-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-trailing-1-nov.c?ref=8ba4f506395ff50be7ecf788734676c9f4cfd200", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -fchkp-flexible-struct-trailing-arrays\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct S\n+{\n+  int a;\n+  int p[10];\n+};\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S *s = (struct S *)alloca (sizeof(struct S) + sizeof (int)*100);\n+  rd (s->p, 0);\n+  rd (s->p, 99);\n+  s->p[0];\n+  s->p[99];\n+  \n+  return 0;\n+}"}, {"sha": "8385a5a631b38fc13cb948284fee2106bf02f898", "filename": "gcc/testsuite/gcc.target/i386/mpx/vla-trailing-1-ubv.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-trailing-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-trailing-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-trailing-1-ubv.c?ref=8ba4f506395ff50be7ecf788734676c9f4cfd200", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -fchkp-flexible-struct-trailing-arrays\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S\n+{\n+  int a;\n+  int p[10];\n+};\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S *s = (struct S *)alloca (sizeof(struct S) + sizeof (int)*100);\n+  rd (s->p, 110);\n+\n+  return 0;\n+}"}, {"sha": "6c7862ca04f269ce738bdcc30b5aaf3267e592f8", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba4f506395ff50be7ecf788734676c9f4cfd200/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=8ba4f506395ff50be7ecf788734676c9f4cfd200", "patch": "@@ -3272,6 +3272,9 @@ chkp_may_narrow_to_field (tree field)\n {\n   return DECL_SIZE (field) && TREE_CODE (DECL_SIZE (field)) == INTEGER_CST\n     && tree_to_uhwi (DECL_SIZE (field)) != 0\n+    && !(flag_chkp_flexible_struct_trailing_arrays\n+\t && TREE_CODE(TREE_TYPE(field)) == ARRAY_TYPE\n+\t && !DECL_CHAIN (field))\n     && (!DECL_FIELD_OFFSET (field)\n \t|| TREE_CODE (DECL_FIELD_OFFSET (field)) == INTEGER_CST)\n     && (!DECL_FIELD_BIT_OFFSET (field)"}]}