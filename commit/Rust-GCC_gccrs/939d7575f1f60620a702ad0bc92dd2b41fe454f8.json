{"sha": "939d7575f1f60620a702ad0bc92dd2b41fe454f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM5ZDc1NzVmMWY2MDYyMGE3MDJhZDBiYzkyZGQyYjQxZmU0NTRmOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T21:42:53Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T21:42:53Z"}, "message": "shrink-wrap.*: Use rtx_insn (touches config/i386/i386.c)\n\ngcc/\n2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n\n\t* shrink-wrap.h (requires_stack_frame_p): Strengthen param 1\n\t\"insn\" from rtx to rtx_insn *.\n\t(dup_block_and_redirect): Likewise for param 3 \"before\".\n\n\t* shrink-wrap.c (requires_stack_frame_p): Strengthen param \"insn\"\n\tfrom rtx to rtx_insn *.\n\t(move_insn_for_shrink_wrap): Likewise.\n\t(prepare_shrink_wrap): Likewise for locals \"insn\", \"curr\".\n\t(dup_block_and_redirect): Likewise for param \"before\" and local\n\t\"insn\".\n\t(try_shrink_wrapping): Likewise for locals \"insn\", \"insert_point\",\n\t\"end\".\n\t(convert_to_simple_return): Likewise for local \"start\".\n\n\t* config/i386/i386.c (ix86_finalize_stack_realign_flags):\n\tStrengthen local \"insn\" from rtx to rtx_insn *, for use when\n\tinvoking requires_stack_frame_p.\n\nFrom-SVN: r214381", "tree": {"sha": "7988d96165c99a8ac9cdc9cee33daf6cc0db39d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7988d96165c99a8ac9cdc9cee33daf6cc0db39d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/939d7575f1f60620a702ad0bc92dd2b41fe454f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939d7575f1f60620a702ad0bc92dd2b41fe454f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/939d7575f1f60620a702ad0bc92dd2b41fe454f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939d7575f1f60620a702ad0bc92dd2b41fe454f8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ee1fbb1a8c76c8ed32482360255b967421580ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee1fbb1a8c76c8ed32482360255b967421580ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee1fbb1a8c76c8ed32482360255b967421580ae"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "ae34bd9b5e9e2799665783aa064940c0809cf083", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939d7575f1f60620a702ad0bc92dd2b41fe454f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939d7575f1f60620a702ad0bc92dd2b41fe454f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=939d7575f1f60620a702ad0bc92dd2b41fe454f8", "patch": "@@ -1,3 +1,23 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* shrink-wrap.h (requires_stack_frame_p): Strengthen param 1\n+\t\"insn\" from rtx to rtx_insn *.\n+\t(dup_block_and_redirect): Likewise for param 3 \"before\".\n+\n+\t* shrink-wrap.c (requires_stack_frame_p): Strengthen param \"insn\"\n+\tfrom rtx to rtx_insn *.\n+\t(move_insn_for_shrink_wrap): Likewise.\n+\t(prepare_shrink_wrap): Likewise for locals \"insn\", \"curr\".\n+\t(dup_block_and_redirect): Likewise for param \"before\" and local\n+\t\"insn\".\n+\t(try_shrink_wrapping): Likewise for locals \"insn\", \"insert_point\",\n+\t\"end\".\n+\t(convert_to_simple_return): Likewise for local \"start\".\n+\n+\t* config/i386/i386.c (ix86_finalize_stack_realign_flags):\n+\tStrengthen local \"insn\" from rtx to rtx_insn *, for use when\n+\tinvoking requires_stack_frame_p.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* sel-sched-ir.c (vinsn_copy): Strengthen local \"copy\" from rtx to"}, {"sha": "3e4c93ec3ac8e8513a8efc55f2f165edeeff8d4f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939d7575f1f60620a702ad0bc92dd2b41fe454f8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939d7575f1f60620a702ad0bc92dd2b41fe454f8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=939d7575f1f60620a702ad0bc92dd2b41fe454f8", "patch": "@@ -10698,7 +10698,7 @@ ix86_finalize_stack_realign_flags (void)\n \t\t\t   HARD_FRAME_POINTER_REGNUM);\n       FOR_EACH_BB_FN (bb, cfun)\n         {\n-          rtx insn;\n+          rtx_insn *insn;\n \t  FOR_BB_INSNS (bb, insn)\n \t    if (NONDEBUG_INSN_P (insn)\n \t\t&& requires_stack_frame_p (insn, prologue_used,"}, {"sha": "0938f2c5b739a83ffcb23f1c62ccefbcdadfee49", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939d7575f1f60620a702ad0bc92dd2b41fe454f8/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939d7575f1f60620a702ad0bc92dd2b41fe454f8/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=939d7575f1f60620a702ad0bc92dd2b41fe454f8", "patch": "@@ -61,7 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n    prologue.  SET_UP_BY_PROLOGUE is the set of registers we expect the\n    prologue to set up for the function.  */\n bool\n-requires_stack_frame_p (rtx insn, HARD_REG_SET prologue_used,\n+requires_stack_frame_p (rtx_insn *insn, HARD_REG_SET prologue_used,\n \t\t\tHARD_REG_SET set_up_by_prologue)\n {\n   df_ref def, use;\n@@ -162,7 +162,7 @@ live_edge_for_reg (basic_block bb, int regno, int end_regno)\n    is splitted or not.  */\n \n static bool\n-move_insn_for_shrink_wrap (basic_block bb, rtx insn,\n+move_insn_for_shrink_wrap (basic_block bb, rtx_insn *insn,\n \t\t\t   const HARD_REG_SET uses,\n \t\t\t   const HARD_REG_SET defs,\n \t\t\t   bool *split_p)\n@@ -331,7 +331,8 @@ move_insn_for_shrink_wrap (basic_block bb, rtx insn,\n void\n prepare_shrink_wrap (basic_block entry_block)\n {\n-  rtx insn, curr, x;\n+  rtx_insn *insn, *curr;\n+  rtx x;\n   HARD_REG_SET uses, defs;\n   df_ref def, use;\n   bool split_p = false;\n@@ -373,12 +374,12 @@ prepare_shrink_wrap (basic_block entry_block)\n /* Create a copy of BB instructions and insert at BEFORE.  Redirect\n    preds of BB to COPY_BB if they don't appear in NEED_PROLOGUE.  */\n void\n-dup_block_and_redirect (basic_block bb, basic_block copy_bb, rtx before,\n+dup_block_and_redirect (basic_block bb, basic_block copy_bb, rtx_insn *before,\n \t\t\tbitmap_head *need_prologue)\n {\n   edge_iterator ei;\n   edge e;\n-  rtx insn = BB_END (bb);\n+  rtx_insn *insn = BB_END (bb);\n \n   /* We know BB has a single successor, so there is no need to copy a\n      simple jump at the end of BB.  */\n@@ -513,7 +514,7 @@ try_shrink_wrapping (edge *entry_edge, edge orig_entry_edge,\n \n       FOR_EACH_BB_FN (bb, cfun)\n \t{\n-\t  rtx insn;\n+\t  rtx_insn *insn;\n \t  unsigned size = 0;\n \n \t  FOR_BB_INSNS (bb, insn)\n@@ -707,7 +708,7 @@ try_shrink_wrapping (edge *entry_edge, edge orig_entry_edge,\n \t    FOR_EACH_BB_REVERSE_FN (bb, cfun)\n \t      {\n \t\tbasic_block copy_bb, tbb;\n-\t\trtx insert_point;\n+\t\trtx_insn *insert_point;\n \t\tint eflags;\n \n \t\tif (!bitmap_clear_bit (&bb_tail, bb->index))\n@@ -724,7 +725,7 @@ try_shrink_wrapping (edge *entry_edge, edge orig_entry_edge,\n \t\tif (e)\n \t\t  {\n                     /* Make sure we insert after any barriers.  */\n-                    rtx end = get_last_bb_insn (e->src);\n+                    rtx_insn *end = get_last_bb_insn (e->src);\n                     copy_bb = create_basic_block (NEXT_INSN (end),\n                                                   NULL_RTX, e->src);\n \t\t    BB_COPY_PARTITION (copy_bb, e->src);\n@@ -902,7 +903,7 @@ convert_to_simple_return (edge entry_edge, edge orig_entry_edge,\n \t  else if (*pdest_bb == NULL)\n \t    {\n \t      basic_block bb;\n-\t      rtx start;\n+\t      rtx_insn *start;\n \n \t      bb = create_basic_block (NULL, NULL, exit_pred);\n \t      BB_COPY_PARTITION (bb, e->src);"}, {"sha": "5576d367b8ef53a9ec88b3a2f4e2008783be7e22", "filename": "gcc/shrink-wrap.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939d7575f1f60620a702ad0bc92dd2b41fe454f8/gcc%2Fshrink-wrap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939d7575f1f60620a702ad0bc92dd2b41fe454f8/gcc%2Fshrink-wrap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.h?ref=939d7575f1f60620a702ad0bc92dd2b41fe454f8", "patch": "@@ -34,10 +34,11 @@ extern basic_block emit_return_for_exit (edge exit_fallthru_edge,\n \t\t\t\t\t bool simple_p);\n \n /* In shrink-wrap.c.  */\n-extern bool requires_stack_frame_p (rtx, HARD_REG_SET, HARD_REG_SET);\n+extern bool requires_stack_frame_p (rtx_insn *, HARD_REG_SET, HARD_REG_SET);\n extern void prepare_shrink_wrap (basic_block entry_block);\n extern void dup_block_and_redirect (basic_block bb, basic_block copy_bb,\n-\t\t\t\t    rtx before,\tbitmap_head *need_prologue);\n+\t\t\t\t    rtx_insn *before,\n+\t\t\t\t    bitmap_head *need_prologue);\n extern void try_shrink_wrapping (edge *entry_edge, edge orig_entry_edge,\n \t\t\t\t bitmap_head *bb_flags, rtx prologue_seq);\n extern edge get_unconverted_simple_return (edge, bitmap_head,"}]}