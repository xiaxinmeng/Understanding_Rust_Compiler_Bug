{"sha": "6d13d38e28cf50b9ad29ab2cae058e18afbc457e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQxM2QzOGUyOGNmNTBiOWFkMjlhYjJjYWUwNThlMThhZmJjNDU3ZQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2015-02-05T13:51:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-05T13:51:44Z"}, "message": "par-prag.adb (Pragma_Warnings): Update for extended form of pragma Warnings.\n\n2015-02-05  Yannick Moy  <moy@adacore.com>\n\n\t* par-prag.adb (Pragma_Warnings): Update for extended form\n\tof pragma Warnings. The \"one\" argument case may now have 2 or\n\t3 arguments.\n\t* sem_prag.adb (Analyze_Pragma/Pragma_Warnings): Update for\n\textended form of pragma Warnings. Pragma with tool name is either\n\trewritten as null or as an equivalent form without tool name,\n\tbefore reanalysis.\n\t* snames.ads-tmpl (Name_Gnatprove): New name.\n\nFrom-SVN: r220447", "tree": {"sha": "2c46bc461778b32c73d98d62597e9c1f80638e49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c46bc461778b32c73d98d62597e9c1f80638e49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d13d38e28cf50b9ad29ab2cae058e18afbc457e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d13d38e28cf50b9ad29ab2cae058e18afbc457e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d13d38e28cf50b9ad29ab2cae058e18afbc457e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d13d38e28cf50b9ad29ab2cae058e18afbc457e/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef2c20e73c8989e83863bdb05af0bf629faf5ff2"}], "stats": {"total": 260, "additions": 210, "deletions": 50}, "files": [{"sha": "128207272693d04970c95be6283a93df6d37f193", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d13d38e28cf50b9ad29ab2cae058e18afbc457e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d13d38e28cf50b9ad29ab2cae058e18afbc457e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6d13d38e28cf50b9ad29ab2cae058e18afbc457e", "patch": "@@ -1,3 +1,14 @@\n+2015-02-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* par-prag.adb (Pragma_Warnings): Update for extended form\n+\tof pragma Warnings. The \"one\" argument case may now have 2 or\n+\t3 arguments.\n+\t* sem_prag.adb (Analyze_Pragma/Pragma_Warnings): Update for\n+\textended form of pragma Warnings. Pragma with tool name is either\n+\trewritten as null or as an equivalent form without tool name,\n+\tbefore reanalysis.\n+\t* snames.ads-tmpl (Name_Gnatprove): New name.\n+\n 2015-02-05  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch13.adb (Add_Invariants): Don't assume invariant is"}, {"sha": "1b72a29f939b0d39f1d251d58d0048082637b659", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 126, "deletions": 41, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d13d38e28cf50b9ad29ab2cae058e18afbc457e/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d13d38e28cf50b9ad29ab2cae058e18afbc457e/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=6d13d38e28cf50b9ad29ab2cae058e18afbc457e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1047,61 +1047,146 @@ begin\n       -- Warnings (GNAT) --\n       ---------------------\n \n-      --  pragma Warnings (On | Off [,REASON]);\n-      --  pragma Warnings (On | Off, LOCAL_NAME [,REASON]);\n-      --  pragma Warnings (static_string_EXPRESSION [,REASON]);\n-      --  pragma Warnings (On | Off, static_string_EXPRESSION [,REASON]);\n+      --  pragma Warnings ([TOOL_NAME,] On | Off [,REASON]);\n+      --  pragma Warnings ([TOOL_NAME,] On | Off, LOCAL_NAME [,REASON]);\n+      --  pragma Warnings ([TOOL_NAME,] static_string_EXPRESSION [,REASON]);\n+      --  pragma Warnings ([TOOL_NAME,] On | Off,\n+      --                                static_string_EXPRESSION [,REASON]);\n+\n+      --  REASON ::= Reason => STRING_LITERAL {& STRING_LITERAL}\n \n       --  The one argument ON/OFF case is processed by the parser, since it may\n       --  control parser warnings as well as semantic warnings, and in any case\n       --  we want to be absolutely sure that the range in the warnings table is\n       --  set well before any semantic analysis is performed. Note that we\n       --  ignore this pragma if debug flag -gnatd.i is set.\n \n-      --  Also note that the \"one argument\" case may have two arguments if the\n-      --  second one is a reason argument.\n+      --  Also note that the \"one argument\" case may have two or three\n+      --  arguments if the first one is a tool name, and/or the last one is a\n+      --  reason argument.\n \n-      when Pragma_Warnings =>\n-         if not Debug_Flag_Dot_I\n-           and then (Arg_Count = 1\n-                      or else (Arg_Count = 2\n-                                and then Chars (Arg2) = Name_Reason))\n-         then\n-            Check_No_Identifier (Arg1);\n+      --  Need documentation and syntax for TOOL_NAME ???\n \n-            declare\n-               Argx : constant Node_Id := Expression (Arg1);\n+      when Pragma_Warnings => Warnings : declare\n+         function First_Arg_Is_Matching_Tool_Name return Boolean;\n+         --  Returns True if the first argument is a tool name matching the\n+         --  current tool being run.\n \n-               function Get_Reason return String_Id;\n-               --  Analyzes Reason argument and returns corresponding String_Id\n-               --  value, or null if there is no Reason argument, or if the\n-               --  argument is not of the required form.\n+         function Last_Arg return Node_Id;\n+         --  Returns the last argument\n \n-               ----------------\n-               -- Get_Reason --\n-               ----------------\n+         function Last_Arg_Is_Reason return Boolean;\n+         --  Returns True if the last argument is a reason argument\n \n-               function Get_Reason return String_Id is\n-               begin\n-                  if Arg_Count = 1 then\n-                     return Null_String_Id;\n-                  else\n-                     Start_String;\n-                     Get_Reason_String (Expression (Arg2));\n-                     return End_String;\n-                  end if;\n-               end Get_Reason;\n+         function Get_Reason return String_Id;\n+         --  Analyzes Reason argument and returns corresponding String_Id\n+         --  value, or null if there is no Reason argument, or if the\n+         --  argument is not of the required form.\n \n-            begin\n-               if Nkind (Argx) = N_Identifier then\n-                  if Chars (Argx) = Name_On then\n-                     Set_Warnings_Mode_On (Pragma_Sloc);\n-                  elsif Chars (Argx) = Name_Off then\n-                     Set_Warnings_Mode_Off (Pragma_Sloc, Get_Reason);\n-                  end if;\n+         -------------------------------------\n+         -- First_Arg_Is_Matching_Tool_Name --\n+         -------------------------------------\n+\n+         --  Comments needed for these complex conditionals ???\n+\n+         function First_Arg_Is_Matching_Tool_Name return Boolean is\n+         begin\n+            return Nkind (Arg1) = N_Identifier\n+              and then ((Chars (Arg1) = Name_Gnat\n+                          and then not\n+                            (CodePeer_Mode or GNATprove_Mode or ASIS_Mode))\n+                        or else\n+                        (Chars (Arg1) = Name_Gnatprove\n+                          and then GNATprove_Mode));\n+         end First_Arg_Is_Matching_Tool_Name;\n+\n+         ----------------\n+         -- Get_Reason --\n+         ----------------\n+\n+         function Get_Reason return String_Id is\n+            Arg : constant Node_Id := Last_Arg;\n+         begin\n+            if Last_Arg_Is_Reason then\n+               Start_String;\n+               Get_Reason_String (Expression (Arg));\n+               return End_String;\n+            else\n+               return Null_String_Id;\n+            end if;\n+         end Get_Reason;\n+\n+         --------------\n+         -- Last_Arg --\n+         --------------\n+\n+         function Last_Arg return Node_Id is\n+               Last_Arg : Node_Id;\n+\n+         begin\n+            if Arg_Count = 1 then\n+               Last_Arg := Arg1;\n+            elsif Arg_Count = 2 then\n+               Last_Arg := Arg2;\n+            elsif Arg_Count = 3 then\n+               Last_Arg := Arg3;\n+            elsif Arg_Count = 4 then\n+               Last_Arg := Next (Arg3);\n+\n+            --  Illegal case, error issued in semantic analysis\n+\n+            else\n+               Last_Arg := Empty;\n+            end if;\n+\n+            return Last_Arg;\n+         end Last_Arg;\n+\n+         ------------------------\n+         -- Last_Arg_Is_Reason --\n+         ------------------------\n+\n+         function Last_Arg_Is_Reason return Boolean is\n+            Arg : constant Node_Id := Last_Arg;\n+         begin\n+            return Nkind (Arg) in N_Has_Chars\n+              and then Chars (Arg) = Name_Reason;\n+         end Last_Arg_Is_Reason;\n+\n+         The_Arg : Node_Id;  --  On/Off argument\n+         Argx    : Node_Id;\n+\n+      --  Start of processing for Warnings\n+\n+      begin\n+         if not Debug_Flag_Dot_I\n+           and then (Arg_Count = 1\n+                       or else (Arg_Count = 2\n+                                  and then (First_Arg_Is_Matching_Tool_Name\n+                                              or else\n+                                            Last_Arg_Is_Reason))\n+                       or else (Arg_Count = 3\n+                                  and then First_Arg_Is_Matching_Tool_Name\n+                                  and then Last_Arg_Is_Reason))\n+         then\n+            if First_Arg_Is_Matching_Tool_Name then\n+               The_Arg := Arg2;\n+            else\n+               The_Arg := Arg1;\n+            end if;\n+\n+            Check_No_Identifier (The_Arg);\n+            Argx := Expression (The_Arg);\n+\n+            if Nkind (Argx) = N_Identifier then\n+               if Chars (Argx) = Name_On then\n+                  Set_Warnings_Mode_On (Pragma_Sloc);\n+               elsif Chars (Argx) = Name_Off then\n+                  Set_Warnings_Mode_Off (Pragma_Sloc, Get_Reason);\n                end if;\n-            end;\n+            end if;\n          end if;\n+      end Warnings;\n \n       -----------------------------\n       -- Wide_Character_Encoding --"}, {"sha": "ab72e0d651460d98377dd8ecd68793c1881dcb31", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 71, "deletions": 8, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d13d38e28cf50b9ad29ab2cae058e18afbc457e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d13d38e28cf50b9ad29ab2cae058e18afbc457e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=6d13d38e28cf50b9ad29ab2cae058e18afbc457e", "patch": "@@ -21323,12 +21323,18 @@ package body Sem_Prag is\n          -- Warnings --\n          --------------\n \n-         --  pragma Warnings (On | Off [,REASON]);\n-         --  pragma Warnings (On | Off, LOCAL_NAME [,REASON]);\n-         --  pragma Warnings (static_string_EXPRESSION [,REASON]);\n-         --  pragma Warnings (On | Off, STRING_LITERAL [,REASON]);\n+         --  pragma Warnings ([TOOL_NAME,] On | Off [,REASON]);\n+         --  pragma Warnings ([TOOL_NAME,] On | Off, LOCAL_NAME [,REASON]);\n+         --  pragma Warnings ([TOOL_NAME,] static_string_EXPRESSION [,REASON]);\n+         --  pragma Warnings ([TOOL_NAME,] On | Off,\n+         --                                static_string_EXPRESSION [,REASON]);\n \n-         --  REASON ::= Reason => Static_String_Expression\n+         --  REASON ::= Reason => STRING_LITERAL {& STRING_LITERAL}\n+\n+         --  If present, TOOL_NAME refers to a tool, currently either GNAT\n+         --  or GNATprove. If an identifier is a static string expression,\n+         --  the form of pragma Warnings that starts with a static string\n+         --  expression is used.\n \n          when Pragma_Warnings => Warnings : declare\n             Reason : String_Id;\n@@ -21338,9 +21344,10 @@ package body Sem_Prag is\n             Check_At_Least_N_Arguments (1);\n \n             --  See if last argument is labeled Reason. If so, make sure we\n-            --  have a static string expression, and acquire the REASON string.\n-            --  Then remove the REASON argument by decreasing Num_Args by one;\n-            --  Remaining processing looks only at first Num_Args arguments).\n+            --  have a string literal or a concatenation of string literals,\n+            --  and acquire the REASON string. Then remove the REASON argument\n+            --  by decreasing Num_Args by one; Remaining processing looks only\n+            --  at first Num_Args arguments).\n \n             declare\n                Last_Arg : constant Node_Id :=\n@@ -21380,8 +21387,64 @@ package body Sem_Prag is\n \n             declare\n                Argx : constant Node_Id := Get_Pragma_Arg (Arg1);\n+               Shifted_Args : List_Id;\n \n             begin\n+               --  See if first argument is a tool name, currently either\n+               --  GNAT or GNATprove. If so, either ignore the pragma if the\n+               --  tool used does not match, or continue as if no tool name\n+               --  was given otherwise, by shifting the arguments.\n+\n+               if Nkind (Argx) = N_Identifier\n+                 and then not Nam_In (Chars (Argx), Name_On, Name_Off)\n+                 and then not Is_Static_String_Expression (Arg1)\n+                 --  How can this possibly work e.g. for GNATprove???\n+               then\n+                  if Chars (Argx) = Name_Gnat then\n+                     if CodePeer_Mode or GNATprove_Mode or ASIS_Mode then\n+                        Rewrite (N, Make_Null_Statement (Loc));\n+                        Analyze (N);\n+                        raise Pragma_Exit;\n+                     end if;\n+\n+                  elsif Chars (Argx) = Name_Gnatprove then\n+                     if not GNATprove_Mode then\n+                        Rewrite (N, Make_Null_Statement (Loc));\n+                        Analyze (N);\n+                        raise Pragma_Exit;\n+                     end if;\n+\n+                  else\n+                     Error_Pragma_Arg\n+                       (\"argument of pragma% must be On/Off or tool name \"\n+                        & \"or static string expression\", Arg1);\n+                  end if;\n+\n+                  --  At this point, the pragma Warnings applies to the tool,\n+                  --  so continue with shifted arguments.\n+\n+                  Arg_Count := Arg_Count - 1;\n+\n+                  if Arg_Count = 1 then\n+                     Shifted_Args := New_List (New_Copy (Arg2));\n+                  elsif Arg_Count = 2 then\n+                     Shifted_Args := New_List (New_Copy (Arg2),\n+                                               New_Copy (Arg3));\n+                  elsif Arg_Count = 3 then\n+                     Shifted_Args := New_List (New_Copy (Arg2),\n+                                               New_Copy (Arg3),\n+                                               New_Copy (Arg4));\n+                  else\n+                     raise Program_Error;\n+                  end if;\n+\n+                  Rewrite (N, Make_Pragma (Loc,\n+                                Chars => Name_Warnings,\n+                                Pragma_Argument_Associations => Shifted_Args));\n+                  Analyze (N);\n+                  raise Pragma_Exit;\n+               end if;\n+\n                --  One argument case\n \n                if Arg_Count = 1 then"}, {"sha": "47a8ccd07e2555a84b25a2fcd1887b06980029fb", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d13d38e28cf50b9ad29ab2cae058e18afbc457e/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d13d38e28cf50b9ad29ab2cae058e18afbc457e/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=6d13d38e28cf50b9ad29ab2cae058e18afbc457e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -713,6 +713,7 @@ package Snames is\n    Name_Gcc                            : constant Name_Id := N + $;\n    Name_General                        : constant Name_Id := N + $;\n    Name_Gnat                           : constant Name_Id := N + $;\n+   Name_Gnatprove                      : constant Name_Id := N + $;\n    Name_GPL                            : constant Name_Id := N + $;\n    Name_High_Order_First               : constant Name_Id := N + $;\n    Name_IEEE_Float                     : constant Name_Id := N + $;"}]}