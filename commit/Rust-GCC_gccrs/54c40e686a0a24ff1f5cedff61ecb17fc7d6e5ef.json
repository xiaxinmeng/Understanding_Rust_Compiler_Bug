{"sha": "54c40e686a0a24ff1f5cedff61ecb17fc7d6e5ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRjNDBlNjg2YTBhMjRmZjFmNWNlZGZmNjFlY2IxN2ZjN2Q2ZTVlZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-20T04:08:47Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-20T04:08:47Z"}, "message": "(reload): Cope when inherited register is larger than one word.\n\n(choose_reload_regs): Ditto.\n\nFrom-SVN: r5820", "tree": {"sha": "a9256317ceb1dcaec89f0a273619681c65d91da1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9256317ceb1dcaec89f0a273619681c65d91da1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54c40e686a0a24ff1f5cedff61ecb17fc7d6e5ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c40e686a0a24ff1f5cedff61ecb17fc7d6e5ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c40e686a0a24ff1f5cedff61ecb17fc7d6e5ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c40e686a0a24ff1f5cedff61ecb17fc7d6e5ef/comments", "author": null, "committer": null, "parents": [{"sha": "14aceb299be2800a56ff2800ff5a8ecd345b8e8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14aceb299be2800a56ff2800ff5a8ecd345b8e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14aceb299be2800a56ff2800ff5a8ecd345b8e8d"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "33f118b6e08be9852cdb3a4c4addfbeed9ec3399", "filename": "gcc/reload1.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c40e686a0a24ff1f5cedff61ecb17fc7d6e5ef/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c40e686a0a24ff1f5cedff61ecb17fc7d6e5ef/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=54c40e686a0a24ff1f5cedff61ecb17fc7d6e5ef", "patch": "@@ -4971,6 +4971,7 @@ choose_reload_regs (insn, avoid_return_reg)\n \t\t\t    reload_override_in[r] = reg_last_reload_reg[regno];\n \t\t\t  else\n \t\t\t    {\n+\t\t\t      int k;\n \t\t\t      /* We can use this as a reload reg.  */\n \t\t\t      /* Mark the register as in use for this part of\n \t\t\t\t the insn.  */\n@@ -4983,8 +4984,9 @@ choose_reload_regs (insn, avoid_return_reg)\n \t\t\t      reload_inheritance_insn[r]\n \t\t\t\t= reg_reloaded_insn[i];\n \t\t\t      reload_spill_index[r] = i;\n-\t\t\t      SET_HARD_REG_BIT (reload_reg_used_for_inherit,\n-\t\t\t\t\t\tspill_regs[i]);\n+\t\t\t      for (k = 0; k < nr; k++)\n+\t\t\t\tSET_HARD_REG_BIT (reload_reg_used_for_inherit,\n+\t\t\t\t\t\t  spill_regs[i + k]);\n \t\t\t    }\n \t\t\t}\n \t\t    }\n@@ -5073,10 +5075,13 @@ choose_reload_regs (insn, avoid_return_reg)\n \t\t  i = spill_reg_order[regno];\n \t\t  if (i >= 0)\n \t\t    {\n+\t\t      int nr = HARD_REGNO_NREGS (regno, reload_mode[r]);\n+\t\t      int k;\n \t\t      mark_reload_reg_in_use (regno, reload_opnum[r],\n \t\t\t\t\t      reload_when_needed[r],\n \t\t\t\t\t      reload_mode[r]);\n-\t\t      SET_HARD_REG_BIT (reload_reg_used_for_inherit, regno);\n+\t\t      for (k = 0; k < nr; k++)\n+\t\t\tSET_HARD_REG_BIT (reload_reg_used_for_inherit, regno + k);\n \t\t    }\n \t\t}\n \t    }"}]}