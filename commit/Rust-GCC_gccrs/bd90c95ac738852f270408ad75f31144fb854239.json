{"sha": "bd90c95ac738852f270408ad75f31144fb854239", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5MGM5NWFjNzM4ODUyZjI3MDQwOGFkNzVmMzExNDRmYjg1NDIzOQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-31T11:24:33Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-31T11:24:33Z"}, "message": "Add HIR lowering for QualifiedPathInType", "tree": {"sha": "4dfa38a5d4758d0d0e1ca9a22d3d70361a801d55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dfa38a5d4758d0d0e1ca9a22d3d70361a801d55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd90c95ac738852f270408ad75f31144fb854239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd90c95ac738852f270408ad75f31144fb854239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd90c95ac738852f270408ad75f31144fb854239", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd90c95ac738852f270408ad75f31144fb854239/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ab6f9ee9f294bcd38378905d94fe7b280524414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab6f9ee9f294bcd38378905d94fe7b280524414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ab6f9ee9f294bcd38378905d94fe7b280524414"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "464045a43169001e4260e69ab49910424469bf25", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd90c95ac738852f270408ad75f31144fb854239/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd90c95ac738852f270408ad75f31144fb854239/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=bd90c95ac738852f270408ad75f31144fb854239", "patch": "@@ -28,6 +28,7 @@ namespace HIR {\n \n class ASTLowerTypePath : public ASTLoweringBase\n {\n+protected:\n   using Rust::HIR::ASTLoweringBase::visit;\n \n public:\n@@ -88,9 +89,30 @@ class ASTLowerTypePath : public ASTLoweringBase\n     mappings->insert_hir_type (crate_num, hirid, translated);\n   }\n \n+protected:\n+  HIR::TypePathSegment *translated_segment;\n+\n private:\n   HIR::TypePath *translated;\n-  HIR::TypePathSegment *translated_segment;\n+};\n+\n+class ASTLowerQualifiedPathInType : public ASTLowerTypePath\n+{\n+  using ASTLowerTypePath::visit;\n+\n+public:\n+  static HIR::QualifiedPathInType *translate (AST::QualifiedPathInType &type)\n+  {\n+    ASTLowerQualifiedPathInType resolver;\n+    type.accept_vis (resolver);\n+    rust_assert (resolver.translated != nullptr);\n+    return resolver.translated;\n+  }\n+\n+  void visit (AST::QualifiedPathInType &path) override;\n+\n+private:\n+  HIR::QualifiedPathInType *translated;\n };\n \n class ASTLoweringType : public ASTLoweringBase\n@@ -187,6 +209,11 @@ class ASTLoweringType : public ASTLoweringBase\n     translated = ASTLowerTypePath::translate (path);\n   }\n \n+  void visit (AST::QualifiedPathInType &path) override\n+  {\n+    translated = ASTLowerQualifiedPathInType::translate (path);\n+  }\n+\n   void visit (AST::ArrayType &type) override\n   {\n     HIR::Type *translated_type"}, {"sha": "e8784b61da5a95f681a7bd865373fc93f16f5d5e", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd90c95ac738852f270408ad75f31144fb854239/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd90c95ac738852f270408ad75f31144fb854239/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=bd90c95ac738852f270408ad75f31144fb854239", "patch": "@@ -450,6 +450,62 @@ ASTLowerTypePath::visit (AST::TypePathSegmentGeneric &segment)\n     segment.get_locus ());\n }\n \n+void\n+ASTLowerQualifiedPathInType::visit (AST::QualifiedPathInType &path)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  auto hirid = mappings->get_next_hir_id (crate_num);\n+  Analysis::NodeMapping qual_mappings (\n+    crate_num, path.get_qualified_path_type ().get_node_id (), hirid,\n+    UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Type *qual_type = ASTLoweringType::translate (\n+    path.get_qualified_path_type ().get_type ().get ());\n+  HIR::TypePath *qual_trait = ASTLowerTypePath::translate (\n+    path.get_qualified_path_type ().get_as_type_path ());\n+\n+  HIR::QualifiedPathType qual_path_type (\n+    qual_mappings, std::unique_ptr<HIR::Type> (qual_type),\n+    std::unique_ptr<HIR::TypePath> (qual_trait),\n+    path.get_qualified_path_type ().get_locus ());\n+\n+  translated_segment = nullptr;\n+  path.get_associated_segment ()->accept_vis (*this);\n+  if (translated_segment == nullptr)\n+    {\n+      rust_fatal_error (path.get_associated_segment ()->get_locus (),\n+\t\t\t\"failed to translate AST TypePathSegment\");\n+      return;\n+    }\n+  std::unique_ptr<HIR::TypePathSegment> associated_segment (translated_segment);\n+\n+  std::vector<std::unique_ptr<HIR::TypePathSegment> > translated_segments;\n+  path.iterate_segments ([&] (AST::TypePathSegment *seg) mutable -> bool {\n+    translated_segment = nullptr;\n+    seg->accept_vis (*this);\n+    if (translated_segment == nullptr)\n+      {\n+\trust_fatal_error (seg->get_locus (),\n+\t\t\t  \"failed to translate AST TypePathSegment\");\n+\treturn false;\n+      }\n+\n+    translated_segments.push_back (\n+      std::unique_ptr<HIR::TypePathSegment> (translated_segment));\n+    return true;\n+  });\n+\n+  Analysis::NodeMapping mapping (crate_num, path.get_node_id (), hirid,\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated = new HIR::QualifiedPathInType (std::move (mapping),\n+\t\t\t\t\t     std::move (qual_path_type),\n+\t\t\t\t\t     std::move (associated_segment),\n+\t\t\t\t\t     std::move (translated_segments),\n+\t\t\t\t\t     path.get_locus ());\n+  mappings->insert_hir_type (crate_num, hirid, translated);\n+}\n+\n // rust-ast-lower-base\n \n HIR::Type *"}, {"sha": "2a491be2a5bd5b9a11193677defeae5d16c326ec", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd90c95ac738852f270408ad75f31144fb854239/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd90c95ac738852f270408ad75f31144fb854239/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=bd90c95ac738852f270408ad75f31144fb854239", "patch": "@@ -819,6 +819,7 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n class QualifiedPathInType : public TypeNoBounds\n {\n   QualifiedPathType path_type;\n+  std::unique_ptr<TypePathSegment> associated_segment;\n   std::vector<std::unique_ptr<TypePathSegment> > segments;\n   Location locus;\n \n@@ -840,9 +841,11 @@ class QualifiedPathInType : public TypeNoBounds\n public:\n   QualifiedPathInType (\n     Analysis::NodeMapping mappings, QualifiedPathType qual_path_type,\n+    std::unique_ptr<TypePathSegment> associated_segment,\n     std::vector<std::unique_ptr<TypePathSegment> > path_segments,\n     Location locus = Location ())\n     : TypeNoBounds (mappings), path_type (std::move (qual_path_type)),\n+      associated_segment (std::move (associated_segment)),\n       segments (std::move (path_segments)), locus (locus)\n   {}\n \n@@ -883,6 +886,20 @@ class QualifiedPathInType : public TypeNoBounds\n   std::string as_string () const override;\n \n   void accept_vis (HIRVisitor &vis) override;\n+\n+  QualifiedPathType &get_path_type () { return path_type; }\n+\n+  std::unique_ptr<TypePathSegment> &get_associated_segment ()\n+  {\n+    return associated_segment;\n+  }\n+\n+  std::vector<std::unique_ptr<TypePathSegment> > &get_segments ()\n+  {\n+    return segments;\n+  }\n+\n+  Location get_locus () { return locus; }\n };\n } // namespace HIR\n } // namespace Rust"}]}