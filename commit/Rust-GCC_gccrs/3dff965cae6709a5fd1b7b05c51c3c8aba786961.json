{"sha": "3dff965cae6709a5fd1b7b05c51c3c8aba786961", "node_id": "C_kwDOANBUbNoAKDNkZmY5NjVjYWU2NzA5YTVmZDFiN2IwNWM1MWMzYzhhYmE3ODY5NjE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-26T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-26T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "10b291eec26c639f204621ec32259cec24086f34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10b291eec26c639f204621ec32259cec24086f34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dff965cae6709a5fd1b7b05c51c3c8aba786961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dff965cae6709a5fd1b7b05c51c3c8aba786961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dff965cae6709a5fd1b7b05c51c3c8aba786961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dff965cae6709a5fd1b7b05c51c3c8aba786961/comments", "author": null, "committer": null, "parents": [{"sha": "da2c56ee601ac696a76e469e33c88313428c5c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2c56ee601ac696a76e469e33c88313428c5c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2c56ee601ac696a76e469e33c88313428c5c5a"}], "stats": {"total": 240, "additions": 239, "deletions": 1}, "files": [{"sha": "9018df66489113bb9ef149a75247c90a63da9113", "filename": "gcc/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dff965cae6709a5fd1b7b05c51c3c8aba786961", "patch": "@@ -1,3 +1,83 @@\n+2022-05-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc: Adjust comments.\n+\t* gimple-range-infer.cc: Adjust comments.\n+\t* gimple-range-infer.h: Adjust comments.\n+\t* gimple-range.cc: Adjust comments.\n+\n+2022-05-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* Makefile.in (OBJS): Use gimple-range-infer.o.\n+\t* gimple-range-cache.cc (ranger_cache::fill_block_cache): Change msg.\n+\t(ranger_cache::range_from_dom): Rename var side_effect to infer.\n+\t(ranger_cache::apply_inferred_ranges): Rename from apply_side_effects.\n+\t* gimple-range-cache.h: Include gimple-range-infer.h.\n+\t(class ranger_cache): Adjust prototypes, use infer_range_manager.\n+\t* gimple-range-infer.cc: Rename from gimple-range-side-effects.cc.\n+\t(gimple_infer_range::*): Rename from stmt_side_effects.\n+\t(infer_range_manager::*): Rename from side_effect_manager.\n+\t* gimple-range-side-effect.cc: Rename.\n+\t* gimple-range-side-effect.h: Rename.\n+\t* gimple-range-infer.h: Rename from gimple-range-side-effects.h.\n+\t(class gimple_infer_range): Rename from stmt_side_effects.\n+\t(class infer_range_manager): Rename from side_effect_manager.\n+\t* gimple-range.cc (gimple_ranger::register_inferred_ranges): Rename\n+\tfrom register_side_effects.\n+\t* gimple-range.h (register_inferred_ranges): Adjust prototype.\n+\t* range-op.h: Adjust comment.\n+\t* tree-vrp.cc (rvrp_folder::pre_fold_bb): Use register_inferred_ranges.\n+\t(rvrp_folder::post_fold_bb): Use register_inferred_ranges.\n+\n+2022-05-25  Simon Cook  <simon.cook@embecosm.com>\n+\n+\t* config/riscv/arch-canonicalize: Only add mafd extension if\n+\tbase was rv32/rv64g.\n+\n+2022-05-25  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* doc/invoke.texi (AMD GCN Options): Add gfx908/gfx90a.\n+\n+2022-05-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/105714\n+\t* asan.cc (has_stmt_been_instrumented_p): For assignments which\n+\tare both stores and loads, return true only if both destination\n+\tand source have been instrumented.\n+\n+2022-05-25  Martin Liska  <mliska@suse.cz>\n+\t    Richard Biener   <rguenther@suse.de>\n+\n+\t* dbgcnt.def (DEBUG_COUNTER): Add loop_unswitch counter.\n+\t* params.opt (max-unswitch-level): Remove.\n+\t* doc/invoke.texi (max-unswitch-level): Likewise.\n+\t* tree-cfg.cc (gimple_lv_add_condition_to_bb): Support not\n+\tgimplified expressions.\n+\t* tree-ssa-loop-unswitch.cc (struct unswitch_predicate): New.\n+\t(tree_may_unswitch_on): Rename to ...\n+\t(find_unswitching_predicates_for_bb): ... this and handle\n+\tswitch statements.\n+\t(get_predicates_for_bb): Likewise.\n+\t(set_predicates_for_bb): Likewise.\n+\t(init_loop_unswitch_info): Likewise.\n+\t(tree_ssa_unswitch_loops): Prepare stuff before calling\n+\ttree_unswitch_single_loop.\n+\t(tree_unswitch_single_loop): Rework the function using\n+\tpre-computed predicates and with a per original loop cost model.\n+\t(merge_last): New.\n+\t(add_predicate_to_path): Likewise.\n+\t(find_range_for_lhs): Likewise.\n+\t(simplify_using_entry_checks): Rename to ...\n+\t(evaluate_control_stmt_using_entry_checks): ... this, handle\n+\tswitch statements and improve simplifications using ranger.\n+\t(simplify_loop_version): Rework using\n+\tevaluate_control_stmt_using_entry_checks.\n+\t(evaluate_bbs): New.\n+\t(evaluate_loop_insns_for_predicate): Likewise.\n+\t(tree_unswitch_loop): Adjust to allow switch statements and\n+\tpass in the edge to unswitch.\n+\t(clean_up_after_unswitching): New.\n+\t(pass_tree_unswitch::execute): Pass down fun.\n+\n 2022-05-24  Eugene Rozenfeld  <erozen@microsoft.com>\n \n \t* tree-vect-loop-manip.cc (vect_do_peeling): Save/restore profile"}, {"sha": "470a8c1787eb3b46a4cf987e69622698a08473f8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3dff965cae6709a5fd1b7b05c51c3c8aba786961", "patch": "@@ -1 +1 @@\n-20220525\n+20220526"}, {"sha": "11d5af6a0b644c260805cf2518208e8f0729a840", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3dff965cae6709a5fd1b7b05c51c3c8aba786961", "patch": "@@ -1,3 +1,15 @@\n+2022-05-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/91134\n+\t* c-tree.h (build_component_ref): Add ARROW_LOC location_t argument.\n+\t* c-typeck.cc (build_component_ref): Likewise.  If DATUM is\n+\tINDIRECT_REF and ARROW_LOC isn't UNKNOWN_LOCATION, print a different\n+\tdiagnostic and fixit hint if DATUM has pointer type.\n+\t* c-parser.cc (c_parser_postfix_expression,\n+\tc_parser_omp_variable_list): Adjust build_component_ref callers.\n+\t* gimple-parser.cc (c_parser_gimple_postfix_expression_after_primary):\n+\tLikewise.\n+\n 2022-05-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/105378"}, {"sha": "b385bfecfc4d856e0e516738c1c7c801dfe0c451", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3dff965cae6709a5fd1b7b05c51c3c8aba786961", "patch": "@@ -1,3 +1,40 @@\n+2022-05-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96637\n+\t* cp-tree.h (attr_chainon): Declare.\n+\t* decl.cc (start_decl): Use attr_chainon.\n+\t(grokdeclarator): Likewise.\n+\t* parser.cc (cp_parser_statement): No longer static.\n+\n+2022-05-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105655\n+\t* pt.cc (build_template_decl): Add assert.\n+\t(tsubst_function_decl): Don't return a template.\n+\n+2022-05-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105623\n+\t* decl2.cc (mark_used): Copy type from fn to BASELINK.\n+\t* pt.cc (unify_one_argument): Call mark_single_function.\n+\n+2022-05-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.cc (cxx_eval_call_expression): Check for\n+\theap vars in the result.\n+\n+2022-05-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.cc (maybe_constant_init_1): Only pass false for\n+\tstrict when initializing a variable of static duration.\n+\n+2022-05-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/100252\n+\t* typeck2.cc (potential_prvalue_result_of): New.\n+\t(replace_placeholders_for_class_temp_r): New.\n+\t(digest_nsdmi_init): Call it.\n+\n 2022-05-24  Jason Merrill  <jason@redhat.com>\n \n \t* constexpr.cc (cxx_fold_indirect_ref): Add default arg."}, {"sha": "33a0636f1170585d962ba0a68d6f4f3c3917a7ef", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=3dff965cae6709a5fd1b7b05c51c3c8aba786961", "patch": "@@ -1,3 +1,10 @@\n+2022-05-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* expr.cc: Add \"final\" and \"override\" to all \"visit\" vfunc decls\n+\tas appropriate.\n+\t* imports.cc: Likewise.\n+\t* typeinfo.cc: Likewise.\n+\n 2022-05-24  David Malcolm  <dmalcolm@redhat.com>\n \n \t* decl.cc: Add \"final\" and \"override\" to all \"visit\" vfunc decls"}, {"sha": "007558c285add9317482dfacba1d1096d92c0636", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=3dff965cae6709a5fd1b7b05c51c3c8aba786961", "patch": "@@ -1,3 +1,9 @@\n+2022-05-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/91134\n+\t* objc-act.cc (objc_build_component_ref): Adjust build_component_ref\n+\tcaller.\n+\n 2022-05-11  Martin Liska  <mliska@suse.cz>\n \n \tPR target/105355"}, {"sha": "b2e53212b20ff7b05a89fbdcf583e535d29358ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff965cae6709a5fd1b7b05c51c3c8aba786961/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3dff965cae6709a5fd1b7b05c51c3c8aba786961", "patch": "@@ -1,3 +1,74 @@\n+2022-05-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96637\n+\t* g++.dg/parse/error64.C: New test.\n+\n+2022-05-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105655\n+\t* g++.dg/cpp2a/class-deduction-alias13.C: New test.\n+\n+2022-05-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105623\n+\t* g++.dg/cpp1y/auto-fn62.C: New test.\n+\n+2022-05-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp1y/constexpr-local4.C: New test.\n+\n+2022-05-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/100252\n+\t* g++.dg/cpp1y/nsdmi-aggr14.C: New test.\n+\t* g++.dg/cpp1y/nsdmi-aggr15.C: New test.\n+\t* g++.dg/cpp1y/nsdmi-aggr16.C: New test.\n+\t* g++.dg/cpp1y/nsdmi-aggr17.C: New test.\n+\t* g++.dg/cpp1y/nsdmi-aggr18.C: New test.\n+\t* g++.dg/cpp1y/nsdmi-aggr19.C: New test.\n+\n+2022-05-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/91134\n+\t* gcc.dg/pr91134.c: New test.\n+\n+2022-05-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/loop-unswitch-10.c: Fix misspelled defaut:\n+\t* gcc.dg/loop-unswitch-11.c: Likewise.\n+\t* gcc.dg/loop-unswitch-14.c: Likewise.\n+\n+2022-05-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/105714\n+\t* gcc.dg/asan/pr105714.c: New test.\n+\n+2022-05-25  Martin Liska  <mliska@suse.cz>\n+\t    Richard Biener   <rguenther@suse.de>\n+\n+\t* gcc.dg/loop-unswitch-7.c: New test.\n+\t* gcc.dg/loop-unswitch-8.c: New test.\n+\t* gcc.dg/loop-unswitch-9.c: New test.\n+\t* gcc.dg/loop-unswitch-10.c: New test.\n+\t* gcc.dg/loop-unswitch-11.c: New test.\n+\t* gcc.dg/loop-unswitch-12.c: New test.\n+\t* gcc.dg/loop-unswitch-13.c: New test.\n+\t* gcc.dg/loop-unswitch-14.c: New test.\n+\t* gcc.dg/loop-unswitch-15.c: New test.\n+\t* gcc.dg/loop-unswitch-16.c: New test.\n+\t* gcc.dg/loop-unswitch-17.c: New test.\n+\t* gcc.dg/torture/20220518-1.c: New test.\n+\t* gcc.dg/torture/20220518-2.c: New test.\n+\t* gcc.dg/torture/20220525-1.c: New test.\n+\t* gcc.dg/alias-10.c: Adjust.\n+\t* gcc.dg/tree-ssa/loop-6.c: Likewise.\n+\t* gcc.dg/loop-unswitch-1.c: Likewise.\n+\n+2022-05-25  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\tPR target/104689\n+\t* gcc.target/aarch64/pr104689.c: New test.\n+\n 2022-05-24  Martin Sebor  <msebor@redhat.com>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "621cf08e0ee000eaf4f078a20c7d24721d3666ef", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff965cae6709a5fd1b7b05c51c3c8aba786961/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff965cae6709a5fd1b7b05c51c3c8aba786961/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=3dff965cae6709a5fd1b7b05c51c3c8aba786961", "patch": "@@ -1,3 +1,15 @@\n+2022-05-25  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\tPR libgcc/105708\n+\t* config/aarch64/lse-init.c: Increase constructor priority.\n+\n+2022-05-25  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\tPR target/104689\n+\t* config/aarch64/aarch64-unwind.h (aarch64_frob_update_context):\n+\tHandle the !REG_UNSAVED case.\n+\t* unwind-dw2.c (execute_cfa_program): Fail toggle if !REG_UNSAVED.\n+\n 2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n \n \t* Makefile.in (D32PBIT_FUNCS): Add _hf_to_sd and _sd_to_hf."}, {"sha": "411dc5048e3da0eb66fa7a91aa099d2da36bf314", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff965cae6709a5fd1b7b05c51c3c8aba786961/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff965cae6709a5fd1b7b05c51c3c8aba786961/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3dff965cae6709a5fd1b7b05c51c3c8aba786961", "patch": "@@ -1,3 +1,11 @@\n+2022-05-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* task.c (gomp_task_run_post_handle_dependers): If empty_task\n+\tis the last task taskwait depend depends on, wake it up.\n+\tSimilarly if it is the last child of a taskgroup, use atomic\n+\tstore instead of decrement and awak taskgroup wait if any.\n+\t* testsuite/libgomp.c-c++-common/taskwait-depend-nowait-2.c: New test.\n+\n 2022-05-24  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* plugin/plugin-gcn.c (EF_AMDGPU_MACH): Add"}, {"sha": "c00eaf140f97148493e8cdbce20607304f96e6d5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff965cae6709a5fd1b7b05c51c3c8aba786961/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff965cae6709a5fd1b7b05c51c3c8aba786961/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3dff965cae6709a5fd1b7b05c51c3c8aba786961", "patch": "@@ -1,3 +1,8 @@\n+2022-05-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* testsuite/20_util/function_objects/constexpr_searcher.cc: Add\n+\tconstexpr.\n+\n 2022-05-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/26_numerics/random/bernoulli_distribution/operators/values.cc:"}]}