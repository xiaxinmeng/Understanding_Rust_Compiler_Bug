{"sha": "a59b92b0c723fd0fdf646660a68bc786fede4b61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU5YjkyYjBjNzIzZmQwZmRmNjQ2NjYwYTY4YmM3ODZmZWRlNGI2MQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-01-24T17:45:21Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-01-24T17:45:21Z"}, "message": "Revert \"Fix the remaining PR c++/24666 blockers\"\n\ngcc/cp/ChangeLog:\n\n\tRevert:\n\t2016-01-18  Patrick Palka  <ppalka@gcc.gnu.org>\n\n\tPR c++/11858\n\tPR c++/24663\n\tPR c++/24664\n\t* decl.c (grokdeclarator): Don't decay array parameter type to\n\ta pointer type if it's dependent.\n\t(grokparms): Invoke strip_top_quals instead of directly invoking\n\tcp_build_qualified_type.\n\t* pt.c (decay_dependent_array_parm_type): New static function.\n\t(type_unification_real): Call decay_dependent_array_parm_type\n\tto decay a dependent array parameter type to its corresponding\n\tpointer type before unification.\n\t(more_specialized_fn): Likewise.\n\t(get_bindings): Likewise.\n\t* tree.c (cp_build_qualified_type): Trivial typofix in\n\tdocumentation.\n\ngcc/testsuite/ChangeLog:\n\n\tRevert:\n\t2016-01-18  Patrick Palka  <ppalka@gcc.gnu.org>\n\n\tPR c++/11858\n\tPR c++/24663\n\tPR c++/24664\n\t* g++.dg/template/pr11858.C: New test.\n\t* g++.dg/template/pr24663.C: New test.\n\t* g++.dg/template/unify12.C: New test.\n\t* g++.dg/template/unify13.C: New test.\n\t* g++.dg/template/unify14.C: New test.\n\t* g++.dg/template/unify15.C: New test.\n\t* g++.dg/template/unify16.C: New test.\n\t* g++.dg/template/unify17.C: New test.\n\nFrom-SVN: r232778", "tree": {"sha": "8ed1cb0ec14284b26bc96c766221c30e9b0c4bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ed1cb0ec14284b26bc96c766221c30e9b0c4bbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a59b92b0c723fd0fdf646660a68bc786fede4b61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59b92b0c723fd0fdf646660a68bc786fede4b61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a59b92b0c723fd0fdf646660a68bc786fede4b61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59b92b0c723fd0fdf646660a68bc786fede4b61/comments", "author": null, "committer": null, "parents": [{"sha": "cefadad11a92850cd46a38177ad3731d6dad3ad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cefadad11a92850cd46a38177ad3731d6dad3ad6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cefadad11a92850cd46a38177ad3731d6dad3ad6"}], "stats": {"total": 265, "additions": 43, "deletions": 222}, "files": [{"sha": "ee5d0c0748dd6d9258bf6c5c05fb44cefe49c4e4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59b92b0c723fd0fdf646660a68bc786fede4b61/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59b92b0c723fd0fdf646660a68bc786fede4b61/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a59b92b0c723fd0fdf646660a68bc786fede4b61", "patch": "@@ -1,3 +1,24 @@\n+2016-01-24  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tRevert:\n+\t2016-01-18  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/11858\n+\tPR c++/24663\n+\tPR c++/24664\n+\t* decl.c (grokdeclarator): Don't decay array parameter type to\n+\ta pointer type if it's dependent.\n+\t(grokparms): Invoke strip_top_quals instead of directly invoking\n+\tcp_build_qualified_type.\n+\t* pt.c (decay_dependent_array_parm_type): New static function.\n+\t(type_unification_real): Call decay_dependent_array_parm_type\n+\tto decay a dependent array parameter type to its corresponding\n+\tpointer type before unification.\n+\t(more_specialized_fn): Likewise.\n+\t(get_bindings): Likewise.\n+\t* tree.c (cp_build_qualified_type): Trivial typofix in\n+\tdocumentation.\n+\n 2016-01-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/58109"}, {"sha": "d8915fde2090c59d6f424a08610b5a5b2bafa379", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59b92b0c723fd0fdf646660a68bc786fede4b61/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59b92b0c723fd0fdf646660a68bc786fede4b61/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a59b92b0c723fd0fdf646660a68bc786fede4b61", "patch": "@@ -10898,13 +10898,8 @@ grokdeclarator (const cp_declarator *declarator,\n \n       if (TREE_CODE (type) == ARRAY_TYPE)\n \t{\n-\t  /* Withhold decaying a dependent array type so that that during\n-\t     instantiation we can detect type deduction failure cases such as\n-\t     creating an array of void, creating a zero-size array, etc.  */\n-\t  if (dependent_type_p (type))\n-\t    ;\n-\t  else\n-\t    type = build_pointer_type (TREE_TYPE (type));\n+\t  /* Transfer const-ness of array into that of type pointed to.  */\n+\t  type = build_pointer_type (TREE_TYPE (type));\n \t  type_quals = TYPE_UNQUALIFIED;\n \t  array_parameter_p = true;\n \t}\n@@ -11705,8 +11700,7 @@ grokparms (tree parmlist, tree *parms)\n \n \t  /* Top-level qualifiers on the parameters are\n \t     ignored for function types.  */\n-\t  type = strip_top_quals (type);\n-\n+\t  type = cp_build_qualified_type (type, 0);\n \t  if (TREE_CODE (type) == METHOD_TYPE)\n \t    {\n \t      error (\"parameter %qD invalidly declared method type\", decl);"}, {"sha": "186a5d278b8975bd483391a386db7834702123a7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59b92b0c723fd0fdf646660a68bc786fede4b61/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59b92b0c723fd0fdf646660a68bc786fede4b61/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a59b92b0c723fd0fdf646660a68bc786fede4b61", "patch": "@@ -17789,23 +17789,6 @@ fn_type_unification (tree fn,\n   return r;\n }\n \n-/* TYPE is the type of a function parameter.  If TYPE is a (dependent)\n-   ARRAY_TYPE, return the corresponding POINTER_TYPE to which it decays.\n-   Otherwise return TYPE.  (We shouldn't see non-dependent ARRAY_TYPE\n-   parameters because they get decayed as soon as they are declared.)  */\n-\n-static tree\n-decay_dependent_array_parm_type (tree type)\n-{\n-  if (TREE_CODE (type) == ARRAY_TYPE)\n-    {\n-      gcc_assert (uses_template_parms (type));\n-      return type_decays_to (type);\n-    }\n-\n-  return type;\n-}\n-\n /* Adjust types before performing type deduction, as described in\n    [temp.deduct.call] and [temp.deduct.conv].  The rules in these two\n    sections are symmetric.  PARM is the type of a function parameter\n@@ -18244,8 +18227,6 @@ type_unification_real (tree tparms,\n       arg = args[ia];\n       ++ia;\n \n-      parm = decay_dependent_array_parm_type (parm);\n-\n       if (unify_one_argument (tparms, targs, parm, arg, subr, strict,\n \t\t\t      explain_p))\n \treturn 1;\n@@ -20257,9 +20238,6 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n           len = 0;\n         }\n \n-      arg1 = decay_dependent_array_parm_type (arg1);\n-      arg2 = decay_dependent_array_parm_type (arg2);\n-\n       if (TREE_CODE (arg1) == REFERENCE_TYPE)\n \t{\n \t  ref1 = TYPE_REF_IS_RVALUE (arg1) + 1;\n@@ -20545,10 +20523,7 @@ get_bindings (tree fn, tree decl, tree explicit_args, bool check_rettype)\n   for (arg = decl_arg_types, ix = 0;\n        arg != NULL_TREE && arg != void_list_node;\n        arg = TREE_CHAIN (arg), ++ix)\n-    {\n-      args[ix] = TREE_VALUE (arg);\n-      args[ix] = decay_dependent_array_parm_type (args[ix]);\n-    }\n+    args[ix] = TREE_VALUE (arg);\n \n   if (fn_type_unification (fn, explicit_args, targs,\n \t\t\t   args, ix,"}, {"sha": "d4cf3102a03171b9d101ab26d34aa47fbb933ada", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59b92b0c723fd0fdf646660a68bc786fede4b61/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59b92b0c723fd0fdf646660a68bc786fede4b61/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=a59b92b0c723fd0fdf646660a68bc786fede4b61", "patch": "@@ -1012,7 +1012,7 @@ c_build_qualified_type (tree type, int type_quals, tree /* orig_qual_type */,\n    arrays correctly.  In particular, if TYPE is an array of T's, and\n    TYPE_QUALS is non-empty, returns an array of qualified T's.\n \n-   COMPLAIN determines how to deal with ill-formed qualifications. If\n+   FLAGS determines how to deal with ill-formed qualifications. If\n    tf_ignore_bad_quals is set, then bad qualifications are dropped\n    (this is permitted if TYPE was introduced via a typedef or template\n    type parameter). If bad qualifications are dropped and tf_warning"}, {"sha": "95f49032225d7161a79164924fb6ffc6d9f1c27f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59b92b0c723fd0fdf646660a68bc786fede4b61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59b92b0c723fd0fdf646660a68bc786fede4b61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a59b92b0c723fd0fdf646660a68bc786fede4b61", "patch": "@@ -1,3 +1,20 @@\n+2016-01-24  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tRevert:\n+\t2016-01-18  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/11858\n+\tPR c++/24663\n+\tPR c++/24664\n+\t* g++.dg/template/pr11858.C: New test.\n+\t* g++.dg/template/pr24663.C: New test.\n+\t* g++.dg/template/unify12.C: New test.\n+\t* g++.dg/template/unify13.C: New test.\n+\t* g++.dg/template/unify14.C: New test.\n+\t* g++.dg/template/unify15.C: New test.\n+\t* g++.dg/template/unify16.C: New test.\n+\t* g++.dg/template/unify17.C: New test.\n+\n 2016-01-24  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR fortran/68283"}, {"sha": "dc0d6881393d5561464ca18fa66f5625cf129001", "filename": "gcc/testsuite/g++.dg/template/pr11858.C", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr11858.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr11858.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr11858.C?ref=cefadad11a92850cd46a38177ad3731d6dad3ad6", "patch": "@@ -1,5 +0,0 @@\n-// PR c++/11858\n-\n-template <typename T> struct S { static typename T::x f (); }; // { dg-error \"\" }\n-template <class T> int f (int [sizeof(T::f())]);\n-int const i = f<S<int> >(0); // { dg-error \"no matching function\" }"}, {"sha": "2dc68c2ed24b44315105fff4100bc1e9b2e8ec0b", "filename": "gcc/testsuite/g++.dg/template/pr24663.C", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr24663.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr24663.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr24663.C?ref=cefadad11a92850cd46a38177ad3731d6dad3ad6", "patch": "@@ -1,22 +0,0 @@\n-// PR c++/24663\n-\n-template<int I> int f1 (char[I]);\n-template<int I> int f1 (char p1 = I);\n-int i = f1<0>(0);\n-\n-template<typename T, int I> int f2 (T[I]); // { dg-error \"\" }\n-int j = f2<int, 0>(0); // { dg-error \"no matching function\" }\n-int k = f2<void, 1>(0); // { dg-error \"no matching function\" }\n-\n-int o[5];\n-int l = f2<int[5], 1>(&o);\n-\n-template<int I> int f3 (char [][I]);\n-template<int I> int f3 (char p1 = I);\n-int x1 = f3<1>(0); // { dg-error \"is ambiguous\" }\n-int x2 = f3<1>();\n-\n-template<typename T, int I> int f4 (T [][I]); // { dg-error \"\" }\n-int y1 = f4<void, 1>(0); // { dg-error \"no matching function\" }\n-int y2 = f4<int (void), 1>(0); // { dg-error \"no matching function\" }\n-int y3 = f4<int&, 1>(0); // { dg-error \"no matching function\" }"}, {"sha": "6e624e41d6aa3a131a231084017b5e9aa10687f7", "filename": "gcc/testsuite/g++.dg/template/unify12.C", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify12.C?ref=cefadad11a92850cd46a38177ad3731d6dad3ad6", "patch": "@@ -1,46 +0,0 @@\n-// { dg-do run }\n-#include <cassert>\n-\n-template<typename T, int I> int foo (T [I][I]) { return 0; }\n-\n-template int foo (char [][6]);\n-\n-template <typename T>\n-int foo (T *)\n-{\n-  return -1;\n-}\n-\n-template <typename T>\n-int foo (T [3][3])\n-{\n-  return 1;\n-}\n-\n-template <int I>\n-int foo (bool [I][I])\n-{\n-  return 2;\n-}\n-\n-template <>\n-int foo (bool [3][2])\n-{\n-  return 3;\n-}\n-\n-char x[3];\n-bool y[4];\n-bool z[3][2];\n-\n-int a = foo (&x);\n-int b = foo (&y);\n-int c = foo (z);\n-\n-int\n-main ()\n-{\n-  assert (a == 1);\n-  assert (b == 2);\n-  assert (c == 3);\n-}"}, {"sha": "56a46df7ee3be713e63b503eec8a9c40909903e2", "filename": "gcc/testsuite/g++.dg/template/unify13.C", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify13.C?ref=cefadad11a92850cd46a38177ad3731d6dad3ad6", "patch": "@@ -1,26 +0,0 @@\n-// { dg-do run }\n-#include <cassert>\n-\n-template<typename T, int I> int foo (T [I][I]) { return 0; }\n-\n-template<typename T>\n-int foo (T [3][2])\n-{\n-  return 1;\n-}\n-\n-template <>\n-int foo (bool [3][2])\n-{\n-  return 2;\n-}\n-\n-bool z[3][2];\n-\n-int a = foo (z);\n-\n-int\n-main ()\n-{\n-  assert (a == 2);\n-}"}, {"sha": "7fda8fd381a0a0f86a965ee6b1ef095a06c55d29", "filename": "gcc/testsuite/g++.dg/template/unify14.C", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify14.C?ref=cefadad11a92850cd46a38177ad3731d6dad3ad6", "patch": "@@ -1,5 +0,0 @@\n-template <typename T, int X>\n-void bar (T [X]) { }\n-\n-template <typename T, int X>\n-void bar (const T [X]) { }"}, {"sha": "fe4848b998fd8b8bb60da2abac5de70d083a6e82", "filename": "gcc/testsuite/g++.dg/template/unify15.C", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify15.C?ref=cefadad11a92850cd46a38177ad3731d6dad3ad6", "patch": "@@ -1,15 +0,0 @@\n-// { dg-do run }\n-#include <cassert>\n-\n-template <typename T, int N>\n-int bar (T (&) [N]) { return 0; }\n-\n-template <typename T, int N>\n-int bar (const T (&) [N]) { return 1; }\n-\n-int\n-main ()\n-{\n-  const int s[2] = { 0 };\n-  assert (bar (s) == 1);\n-}"}, {"sha": "7b5a2aa469214c8e0c758238e0ed66df90d9e531", "filename": "gcc/testsuite/g++.dg/template/unify16.C", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify16.C?ref=cefadad11a92850cd46a38177ad3731d6dad3ad6", "patch": "@@ -1,56 +0,0 @@\n-// { dg-do run }\n-#include <cassert>\n-\n-template <typename T>\n-struct Foo\n-{\n-  static int foo (T) { return 0; }\n-};\n-\n-template <typename T, int I>\n-struct Foo<T[I]>\n-{\n-  static int foo (T[I]) { return 1; }\n-};\n-\n-template <int I>\n-struct Foo<char[I]>\n-{\n-  static int foo (char[I]) { return 2; }\n-};\n-\n-template <typename T>\n-struct Foo<T[5]>\n-{\n-  static int foo (T[5]) { return 3; }\n-};\n-\n-template <>\n-struct Foo<char[5]>\n-{\n-  static int foo (char[5]) { return 4; }\n-};\n-\n-template <>\n-struct Foo<const char[5]>\n-{\n-  static int foo (const char[5]) { return 5; }\n-};\n-\n-int a = Foo<const char[5]>::foo (0);\n-int b = Foo<char[5]>::foo (0);\n-int c = Foo<bool[5]>::foo (0);\n-int d = Foo<char[4]>::foo (0);\n-int e = Foo<bool[4]>::foo (0);\n-int f = Foo<char[]>::foo (0);\n-\n-int\n-main (void)\n-{\n-  assert (a == 5);\n-  assert (b == 4);\n-  assert (c == 3);\n-  assert (d == 2);\n-  assert (e == 1);\n-  assert (f == 0);\n-}"}, {"sha": "2da8553aad87e660e2cb8852d3648843689df5c6", "filename": "gcc/testsuite/g++.dg/template/unify17.C", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefadad11a92850cd46a38177ad3731d6dad3ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify17.C?ref=cefadad11a92850cd46a38177ad3731d6dad3ad6", "patch": "@@ -1,11 +0,0 @@\n-void foo (int *);\n-\n-template <typename T>\n-void bar (void (T[5])); // { dg-error \"array of 'void'\" }\n-\n-void\n-baz (void)\n-{\n-  bar (foo); // { dg-bogus \"\" }\n-  bar<void> (0); // { dg-error \"no matching function\" }\n-}"}]}