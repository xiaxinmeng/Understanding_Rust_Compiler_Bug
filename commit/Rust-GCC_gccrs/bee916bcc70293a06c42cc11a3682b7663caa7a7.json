{"sha": "bee916bcc70293a06c42cc11a3682b7663caa7a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVlOTE2YmNjNzAyOTNhMDZjNDJjYzExYTM2ODJiNzY2M2NhYTdhNw==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-11-27T13:55:17Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-16T13:01:01Z"}, "message": "[Ada] Reject junk syntax for Contract_Cases/Test_Case/Subprogram_Variant\n\ngcc/ada/\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add a codefix\n\tfor extra parentheses around aspect Annotate expression; reject\n\t\"(null record)\" aggregate and extra parentheses around aspect\n\tTest_Case expression.\n\t* sem_prag.adb (Analyze_Pragma): Reject \"null\", \"(null record)\"\n\tand extra parentheses around pragma Contract_Cases; likewise for\n\tpragma Subprogram_Variant.", "tree": {"sha": "2d6bccea8a4e391d74282f63356dbaeb8740dcb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d6bccea8a4e391d74282f63356dbaeb8740dcb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bee916bcc70293a06c42cc11a3682b7663caa7a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee916bcc70293a06c42cc11a3682b7663caa7a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee916bcc70293a06c42cc11a3682b7663caa7a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee916bcc70293a06c42cc11a3682b7663caa7a7/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be19b8662bd2601ea761fe5adec3a7ce3940dd7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be19b8662bd2601ea761fe5adec3a7ce3940dd7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be19b8662bd2601ea761fe5adec3a7ce3940dd7c"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "4120a47d7ba163817018e8ec5af5e1e8f1fcd2e4", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee916bcc70293a06c42cc11a3682b7663caa7a7/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee916bcc70293a06c42cc11a3682b7663caa7a7/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=bee916bcc70293a06c42cc11a3682b7663caa7a7", "patch": "@@ -4145,7 +4145,8 @@ package body Sem_Ch13 is\n                         --  Must not be parenthesized\n \n                         if Paren_Count (Expr) /= 0 then\n-                           Error_Msg_F (\"extra parentheses ignored\", Expr);\n+                           Error_Msg -- CODEFIX\n+                             (\"redundant parentheses\", First_Sloc (Expr));\n                         end if;\n \n                         --  List of arguments is list of aggregate expressions\n@@ -4426,13 +4427,24 @@ package body Sem_Ch13 is\n                      goto Continue;\n                   end if;\n \n-                  if Nkind (Expr) /= N_Aggregate then\n+                  if Nkind (Expr) /= N_Aggregate\n+                    or else Null_Record_Present (Expr)\n+                  then\n                      Error_Msg_Name_1 := Nam;\n                      Error_Msg_NE\n                        (\"wrong syntax for aspect `%` for &\", Id, E);\n                      goto Continue;\n                   end if;\n \n+                  --  Check that the expression is a proper aggregate (no\n+                  --  parentheses).\n+\n+                  if Paren_Count (Expr) /= 0 then\n+                     Error_Msg -- CODEFIX\n+                       (\"redundant parentheses\", First_Sloc (Expr));\n+                     goto Continue;\n+                  end if;\n+\n                   --  Create the list of arguments for building the Test_Case\n                   --  pragma.\n "}, {"sha": "1a25f037b2bb3a207e512b61caf4b1d5f589c5a2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee916bcc70293a06c42cc11a3682b7663caa7a7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee916bcc70293a06c42cc11a3682b7663caa7a7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=bee916bcc70293a06c42cc11a3682b7663caa7a7", "patch": "@@ -545,16 +545,31 @@ package body Sem_Prag is\n \n       --  Single and multiple contract cases must appear in aggregate form. If\n       --  this is not the case, then either the parser or the analysis of the\n-      --  pragma failed to produce an aggregate.\n+      --  pragma failed to produce an aggregate, e.g. when the contract is\n+      --  \"null\" or a \"(null record)\".\n \n-      pragma Assert (Nkind (CCases) = N_Aggregate);\n+      pragma Assert\n+        (if Nkind (CCases) = N_Aggregate\n+         then Null_Record_Present (CCases)\n+           xor (Present (Component_Associations (CCases))\n+                  or\n+                Present (Expressions (CCases)))\n+         else Nkind (CCases) = N_Null);\n \n       --  Only CASE_GUARD => CONSEQUENCE clauses are allowed\n \n-      if Present (Component_Associations (CCases))\n+      if Nkind (CCases) = N_Aggregate\n+        and then Present (Component_Associations (CCases))\n         and then No (Expressions (CCases))\n       then\n \n+         --  Check that the expression is a proper aggregate (no parentheses)\n+\n+         if Paren_Count (CCases) /= 0 then\n+            Error_Msg -- CODEFIX\n+              (\"redundant parentheses\", First_Sloc (CCases));\n+         end if;\n+\n          --  Ensure that the formal parameters are visible when analyzing all\n          --  clauses. This falls out of the general rule of aspects pertaining\n          --  to subprogram declarations.\n@@ -29170,16 +29185,31 @@ package body Sem_Prag is\n \n       --  Single and multiple contract cases must appear in aggregate form. If\n       --  this is not the case, then either the parser of the analysis of the\n-      --  pragma failed to produce an aggregate.\n+      --  pragma failed to produce an aggregate, e.g. when the contract is\n+      --  \"null\" or a \"(null record)\".\n \n-      pragma Assert (Nkind (Variants) = N_Aggregate);\n+      pragma Assert\n+        (if Nkind (Variants) = N_Aggregate\n+         then Null_Record_Present (Variants)\n+           xor (Present (Component_Associations (Variants))\n+                  or\n+                Present (Expressions (Variants)))\n+         else Nkind (Variants) = N_Null);\n \n       --  Only \"change_direction => discrete_expression\" clauses are allowed\n \n-      if Present (Component_Associations (Variants))\n+      if Nkind (Variants) = N_Aggregate\n+        and then Present (Component_Associations (Variants))\n         and then No (Expressions (Variants))\n       then\n \n+         --  Check that the expression is a proper aggregate (no parentheses)\n+\n+         if Paren_Count (Variants) /= 0 then\n+            Error_Msg -- CODEFIX\n+              (\"redundant parentheses\", First_Sloc (Variants));\n+         end if;\n+\n          --  Ensure that the formal parameters are visible when analyzing all\n          --  clauses. This falls out of the general rule of aspects pertaining\n          --  to subprogram declarations."}]}