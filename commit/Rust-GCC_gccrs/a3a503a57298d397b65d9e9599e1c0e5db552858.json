{"sha": "a3a503a57298d397b65d9e9599e1c0e5db552858", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNhNTAzYTU3Mjk4ZDM5N2I2NWQ5ZTk1OTllMWMwZTVkYjU1Mjg1OA==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-01-25T22:43:08Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-01-25T22:43:08Z"}, "message": "re PR c++/13810 (ICE on invalid default templates)\n\n\tPR c++/13810\n\t* parser.c (cp_parser_type_parameter): When cp_parser_id_expression\n\treturns a TYPE_DECL. no further lookup is required.\n\t* semantics.c (check_template_template_default_arg): A TYPE_DECL\n\tis invalid. Rework to give better diagnostics.\n\nFrom-SVN: r76593", "tree": {"sha": "2c5d5e1c3409aad85f5a549b959cd599fbaff44f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c5d5e1c3409aad85f5a549b959cd599fbaff44f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3a503a57298d397b65d9e9599e1c0e5db552858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a503a57298d397b65d9e9599e1c0e5db552858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a503a57298d397b65d9e9599e1c0e5db552858", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a503a57298d397b65d9e9599e1c0e5db552858/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91eab3788d093dab188305f7d0befb813b310824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91eab3788d093dab188305f7d0befb813b310824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91eab3788d093dab188305f7d0befb813b310824"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "5171c70f96334c232cfd7071b47993af110e6e7b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a503a57298d397b65d9e9599e1c0e5db552858/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a503a57298d397b65d9e9599e1c0e5db552858/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a3a503a57298d397b65d9e9599e1c0e5db552858", "patch": "@@ -1,3 +1,11 @@\n+2004-01-25  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/13810\n+\t* parser.c (cp_parser_type_parameter): When cp_parser_id_expression \n+\treturns a TYPE_DECL. no further lookup is required.\n+\t* semantics.c (check_template_template_default_arg): A TYPE_DECL\n+\tis invalid. Rework to give better diagnostics.\n+\n 2004-01-25  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/13797"}, {"sha": "0ca1dca56a89c7f7cf65ac96c1c9a6862868b923", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a503a57298d397b65d9e9599e1c0e5db552858/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a503a57298d397b65d9e9599e1c0e5db552858/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a3a503a57298d397b65d9e9599e1c0e5db552858", "patch": "@@ -7708,13 +7708,19 @@ cp_parser_type_parameter (cp_parser* parser)\n \t\t\t\t\t /*check_dependency_p=*/true,\n \t\t\t\t\t /*template_p=*/&is_template,\n \t\t\t\t\t /*declarator_p=*/false);\n-\t    /* Look up the name.  */\n-\t    default_argument \n-\t      = cp_parser_lookup_name (parser, default_argument,\n-\t\t\t\t       /*is_type=*/false,\n-\t\t\t\t       /*is_template=*/is_template,\n-\t\t\t\t       /*is_namespace=*/false,\n-\t\t\t\t       /*check_dependency=*/true);\n+\t    if (TREE_CODE (default_argument) == TYPE_DECL)\n+\t      /* If the id-expression was a template-id that refers to\n+\t\t a template-class, we already have the declaration here,\n+\t\t so no further lookup is needed.  */\n+\t\t ;\n+\t    else\n+\t      /* Look up the name.  */\n+\t      default_argument \n+\t\t= cp_parser_lookup_name (parser, default_argument,\n+\t\t\t\t\t/*is_type=*/false,\n+\t\t\t\t\t/*is_template=*/is_template,\n+\t\t\t\t\t/*is_namespace=*/false,\n+\t\t\t\t\t/*check_dependency=*/true);\n \t    /* See if the default argument is valid.  */\n \t    default_argument\n \t      = check_template_template_default_arg (default_argument);\n@@ -12705,8 +12711,8 @@ cp_parser_base_specifier (cp_parser* parser)\n \t  break;\n \t}\n     }\n-  /* It is not uncommon to see programs mechanically, errouneously, use\r\n-     the 'typename' keyword to denote (dependent) qualified types\r\n+  /* It is not uncommon to see programs mechanically, errouneously, use\n+     the 'typename' keyword to denote (dependent) qualified types\n      as base classes.  */\n   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TYPENAME))\n     {"}, {"sha": "3cf4e08fca678e8f978bc8ac7a41e84f9281d522", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a503a57298d397b65d9e9599e1c0e5db552858/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a503a57298d397b65d9e9599e1c0e5db552858/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a3a503a57298d397b65d9e9599e1c0e5db552858", "patch": "@@ -1942,10 +1942,24 @@ check_template_template_default_arg (tree argument)\n {\n   if (TREE_CODE (argument) != TEMPLATE_DECL\n       && TREE_CODE (argument) != TEMPLATE_TEMPLATE_PARM\n-      && TREE_CODE (argument) != TYPE_DECL\n       && TREE_CODE (argument) != UNBOUND_CLASS_TEMPLATE)\n     {\n-      error (\"invalid default template argument\");\n+      if (TREE_CODE (argument) == TYPE_DECL)\n+\t{\n+\t  tree t = TREE_TYPE (argument);\n+\n+\t  /* Try to emit a slightly smarter error message if we detect\n+\t     that the user is using a template instantiation.  */\n+\t  if (CLASSTYPE_TEMPLATE_INFO (t) \n+\t      && CLASSTYPE_TEMPLATE_INSTANTIATION (t))\n+\t    error (\"invalid use of type `%T' as a default value for a \"\n+\t           \"template template-parameter\", t);\n+\t  else\n+\t    error (\"invalid use of `%D' as a default value for a template \"\n+\t           \"template-parameter\", argument);\n+\t}\n+      else\n+\terror (\"invalid default argument for a template template parameter\");\n       return error_mark_node;\n     }\n "}]}