{"sha": "8c90d6111171ea07b4cbc39789f898f4e304a69f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5MGQ2MTExMTcxZWEwN2I0Y2JjMzk3ODlmODk4ZjRlMzA0YTY5Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-28T00:11:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-28T00:11:24Z"}, "message": "call.c (build_method_call): Make sure get_type_value returns something before we try to use its...\n\n\t* call.c (build_method_call): Make sure get_type_value returns\n\tsomething before we try to use its TYPE_MAIN_VARIANT.\n\t* typeck2.c (digest_init): Complain about getting a TREE_LIST to\n\tinitialize an array.\n\t* search.c (expand_upcast_fixups): Don't set DECL_CONTEXT and\n\tDECL_VIRTUAL_P.\n\nFrom-SVN: r20110", "tree": {"sha": "ae8d630c5718531e7dff11707940dcb1487e4b65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae8d630c5718531e7dff11707940dcb1487e4b65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c90d6111171ea07b4cbc39789f898f4e304a69f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c90d6111171ea07b4cbc39789f898f4e304a69f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c90d6111171ea07b4cbc39789f898f4e304a69f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c90d6111171ea07b4cbc39789f898f4e304a69f/comments", "author": null, "committer": null, "parents": [{"sha": "ca379c1cd345853542f0198a1518348af403b1b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca379c1cd345853542f0198a1518348af403b1b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca379c1cd345853542f0198a1518348af403b1b2"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "d37a619fbfcf76726f8fd4a372a23da049c46897", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c90d6111171ea07b4cbc39789f898f4e304a69f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c90d6111171ea07b4cbc39789f898f4e304a69f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8c90d6111171ea07b4cbc39789f898f4e304a69f", "patch": "@@ -1,5 +1,16 @@\n+1998-05-27  Brendan Kehoe  <brendan@cygnus.com>\n+\n+\t* call.c (build_method_call): Make sure get_type_value returns\n+\tsomething before we try to use its TYPE_MAIN_VARIANT.\n+\n 1998-05-27  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* typeck2.c (digest_init): Complain about getting a TREE_LIST to\n+\tinitialize an array.\n+\n+\t* search.c (expand_upcast_fixups): Don't set DECL_CONTEXT and\n+\tDECL_VIRTUAL_P.\n+\n \t* friend.c (do_friend): Clarify template warning.\n \n 1998-05-27  Mark Mitchell  <mark@markmitchell.com>"}, {"sha": "f10aae85a7db90924aea02cee4fb26da10e2cd1e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c90d6111171ea07b4cbc39789f898f4e304a69f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c90d6111171ea07b4cbc39789f898f4e304a69f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8c90d6111171ea07b4cbc39789f898f4e304a69f", "patch": "@@ -632,6 +632,7 @@ build_method_call (instance, name, parms, basetype_path, flags)\n \n   if (TREE_CODE (name) == BIT_NOT_EXPR)\n     {\n+      tree tmp;\n       flags |= LOOKUP_DESTRUCTOR;\n       name = TREE_OPERAND (name, 0);\n       if (parms)\n@@ -642,8 +643,9 @@ build_method_call (instance, name, parms, basetype_path, flags)\n       if (! (name == TYPE_MAIN_VARIANT (basetype)\n \t     || (IS_AGGR_TYPE (basetype)\n \t\t && name == constructor_name (basetype))\n-\t     || (TYPE_MAIN_VARIANT (basetype)\n-\t\t == TYPE_MAIN_VARIANT (get_type_value (name)))))\n+\t     || ((tmp = get_type_value (name))\n+\t\t && (TYPE_MAIN_VARIANT (basetype)\n+\t\t     == TYPE_MAIN_VARIANT (tmp)))))\n \t{\n \t  cp_error (\"destructor name `~%D' does not match type `%T' of expression\",\n \t\t    name, basetype);"}, {"sha": "f199b2f2cc18acf7e6a1760df8b9ada179bc6cb8", "filename": "gcc/cp/search.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c90d6111171ea07b4cbc39789f898f4e304a69f/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c90d6111171ea07b4cbc39789f898f4e304a69f/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=8c90d6111171ea07b4cbc39789f898f4e304a69f", "patch": "@@ -2918,32 +2918,43 @@ expand_upcast_fixups (binfo, addr, orig_addr, vbase, vbase_addr, t,\n \t      || nvtbl == IDENTIFIER_GLOBAL_VALUE (DECL_NAME (vtbl)))\n \t    {\n \t      /* Dup it if it isn't in local scope yet.  */\n-\t      nvtbl = build_decl (VAR_DECL,\n-\t\t\t\t  DECL_NAME (vtbl),\n-\t\t\t\t  TYPE_MAIN_VARIANT (TREE_TYPE (BINFO_VTABLE (binfo))));\n+\t      nvtbl = build_decl\n+\t\t(VAR_DECL, DECL_NAME (vtbl),\n+\t\t TYPE_MAIN_VARIANT (TREE_TYPE (BINFO_VTABLE (binfo))));\n \t      DECL_ALIGN (nvtbl) = MAX (TYPE_ALIGN (double_type_node),\n \t\t\t\t\tDECL_ALIGN (nvtbl));\n \t      TREE_READONLY (nvtbl) = 0;\n \t      DECL_ARTIFICIAL (nvtbl) = 1;\n \t      nvtbl = pushdecl (nvtbl);\n \t      init = NULL_TREE;\n-\t      cp_finish_decl (nvtbl, init, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);\n-\t      DECL_VIRTUAL_P (nvtbl) = 1;\n-\t      DECL_CONTEXT (nvtbl) = t;\n+\t      cp_finish_decl (nvtbl, init, NULL_TREE, 0,\n+\t\t\t      LOOKUP_ONLYCONVERTING);\n+\n+\t      /* We don't set DECL_VIRTUAL_P and DECL_CONTEXT on nvtbl\n+\t\t because they wouldn't be useful; everything that wants to\n+\t\t look at the vtable will look at the decl for the normal\n+\t\t vtable.  Setting DECL_CONTEXT also screws up\n+\t\t decl_function_context.  */\n+\n \t      init = build (MODIFY_EXPR, TREE_TYPE (nvtbl),\n \t\t\t    nvtbl, vtbl);\n \t      TREE_SIDE_EFFECTS (init) = 1;\n \t      expand_expr_stmt (init);\n \t      /* Update the vtable pointers as necessary.  */\n-\t      ref = build_vfield_ref (build_indirect_ref (addr, NULL_PTR), DECL_CONTEXT (CLASSTYPE_VFIELD (BINFO_TYPE (binfo))));\n-\t      expand_expr_stmt (build_modify_expr (ref, NOP_EXPR,\n-\t\t\t\t\t\t   build_unary_op (ADDR_EXPR, nvtbl, 0)));\n+\t      ref = build_vfield_ref\n+\t\t(build_indirect_ref (addr, NULL_PTR),\n+\t\t DECL_CONTEXT (CLASSTYPE_VFIELD (BINFO_TYPE (binfo))));\n+\t      expand_expr_stmt\n+\t\t(build_modify_expr (ref, NOP_EXPR,\n+\t\t\t\t    build_unary_op (ADDR_EXPR, nvtbl, 0)));\n \t    }\n \t  assemble_external (vtbl);\n \t  aref = build_array_ref (vtbl, idx);\n \t  naref = build_array_ref (nvtbl, idx);\n-\t  old_delta = build_component_ref (aref, delta_identifier, NULL_TREE, 0);\n-\t  new_delta = build_component_ref (naref, delta_identifier, NULL_TREE, 0);\n+\t  old_delta = build_component_ref (aref, delta_identifier,\n+\t\t\t\t\t   NULL_TREE, 0);\n+\t  new_delta = build_component_ref (naref, delta_identifier,\n+\t\t\t\t\t   NULL_TREE, 0);\n \n \t  /* This is a upcast, so we have to add the offset for the\n \t     virtual base.  */"}, {"sha": "e27d86a3a3c9b2ca7f0185f55ebdf22c52bd18aa", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c90d6111171ea07b4cbc39789f898f4e304a69f/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c90d6111171ea07b4cbc39789f898f4e304a69f/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=8c90d6111171ea07b4cbc39789f898f4e304a69f", "patch": "@@ -781,7 +781,15 @@ digest_init (type, init, tail)\n \n   if (code == ARRAY_TYPE)\n     {\n-      tree typ1 = TYPE_MAIN_VARIANT (TREE_TYPE (type));\n+      tree typ1;\n+\n+      if (TREE_CODE (init) == TREE_LIST)\n+\t{\n+\t  error (\"initializing array with parameter list\");\n+\t  return error_mark_node;\n+\t}\n+\n+      typ1 = TYPE_MAIN_VARIANT (TREE_TYPE (type));\n       if ((typ1 == char_type_node\n \t   || typ1 == signed_char_type_node\n \t   || typ1 == unsigned_char_type_node"}]}