{"sha": "eb7a7903b3d52025762a486b3e38b76630fe276a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3YTc5MDNiM2Q1MjAyNTc2MmE0ODZiM2UzOGI3NjYzMGZlMjc2YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-01-18T22:54:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-01-18T22:54:47Z"}, "message": "sparc.c (load_pic_register): Emit the appropriate variant of the load_pcrel_sym pattern.\n\n\t* config/sparc/sparc.c (load_pic_register): Emit the appropriate\n\tvariant of the load_pcrel_sym pattern.\n\t* config/sparc/sparc.md (P macro): Move to the top.\n\t(load_pcrel_sym): Macroize using P.\n\t(save_register_window): Likewise.\n\nFrom-SVN: r93859", "tree": {"sha": "7445244de779955213d6f5a21bbb5cd2f73e418f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7445244de779955213d6f5a21bbb5cd2f73e418f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb7a7903b3d52025762a486b3e38b76630fe276a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7a7903b3d52025762a486b3e38b76630fe276a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb7a7903b3d52025762a486b3e38b76630fe276a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7a7903b3d52025762a486b3e38b76630fe276a/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d960a7ee7c2e444fbde163dc0c17da4416223ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d960a7ee7c2e444fbde163dc0c17da4416223ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d960a7ee7c2e444fbde163dc0c17da4416223ac"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "a8c2a0a87b028ca190d0e0779069dbb5ace8c242", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7a7903b3d52025762a486b3e38b76630fe276a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7a7903b3d52025762a486b3e38b76630fe276a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb7a7903b3d52025762a486b3e38b76630fe276a", "patch": "@@ -1,3 +1,11 @@\n+2005-01-18  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.c (load_pic_register): Emit the appropriate\n+\tvariant of the load_pcrel_sym pattern.\n+\t* config/sparc/sparc.md (P macro): Move to the top.\n+\t(load_pcrel_sym): Macroize using P.\n+\t(save_register_window): Likewise.\n+\n 2005-01-18  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.md (\"sunordered\"): Disable for e500."}, {"sha": "43aa2f17c87a49ae4a754c30db6b9944cf83a08d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7a7903b3d52025762a486b3e38b76630fe276a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7a7903b3d52025762a486b3e38b76630fe276a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=eb7a7903b3d52025762a486b3e38b76630fe276a", "patch": "@@ -3981,8 +3981,12 @@ load_pic_register (void)\n   add_pc_to_pic_symbol = gen_rtx_SYMBOL_REF (Pmode, add_pc_to_pic_symbol_name);\n \n   flag_pic = 0;\n-  emit_insn (gen_load_pcrel_sym (pic_offset_table_rtx, global_offset_table,\n-\t\t\t\t add_pc_to_pic_symbol));\n+  if (TARGET_ARCH64)\n+    emit_insn (gen_load_pcrel_symdi (pic_offset_table_rtx, global_offset_table,\n+\t\t\t\t     add_pc_to_pic_symbol));\n+  else\n+    emit_insn (gen_load_pcrel_symsi (pic_offset_table_rtx, global_offset_table,\n+\t\t\t\t     add_pc_to_pic_symbol));\n   flag_pic = orig_flag_pic;\n \n   /* Need to emit this whether or not we obey regdecls,"}, {"sha": "6153b5adbe68919a4a4c5346195ad62c262d4105", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7a7903b3d52025762a486b3e38b76630fe276a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7a7903b3d52025762a486b3e38b76630fe276a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=eb7a7903b3d52025762a486b3e38b76630fe276a", "patch": "@@ -68,6 +68,8 @@\n    (UNSPECV_SAVEW\t\t6)\n   ])\n \n+(define_mode_macro P [(SI \"Pmode == SImode\") (DI \"Pmode == DImode\")])\n+\n ;; The upper 32 fp regs on the v9 can't hold SFmode values.  To deal with this\n ;; a second register class, EXTRA_FP_REGS, exists for the v9 chip.  The name\n ;; is a bit of a misnomer as it covers all 64 fp regs.  The corresponding\n@@ -1694,11 +1696,11 @@\n ;; value subject to a PC-relative relocation.  Operand 2 is a helper function\n ;; that adds the PC value at the call point to operand 0.\n \n-(define_insn \"load_pcrel_sym\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(unspec [(match_operand 1 \"symbolic_operand\" \"\")\n-\t\t (match_operand 2 \"call_operand_address\" \"\")] UNSPEC_LOAD_PCREL_SYM))\n-   (clobber (reg:SI 15))]\n+(define_insn \"load_pcrel_sym<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(unspec:P [(match_operand:P 1 \"symbolic_operand\" \"\")\n+\t\t   (match_operand:P 2 \"call_operand_address\" \"\")] UNSPEC_LOAD_PCREL_SYM))\n+   (clobber (reg:P 15))]\n   \"\"\n {\n   if (flag_delayed_branch)\n@@ -7721,23 +7723,12 @@\n ;;  (set (%sp) (unspec_volatile [(%sp) (-frame_size)] UNSPECV_SAVEW))\n ;;  (set (%i7) (%o7))]\n \n-(define_insn \"save_register_windowdi\"\n-  [(set (reg:DI 30) (reg:DI 14))\n-   (set (reg:DI 14) (unspec_volatile:DI [(reg:DI 14)\n-\t\t\t\t\t (match_operand:DI 0 \"arith_operand\" \"rI\")]\n-\t\t\t\t        UNSPECV_SAVEW))\n-   (set (reg:DI 31) (reg:DI 15))]\n-  \"TARGET_ARCH64\"\n-  \"save\\t%%sp, %0, %%sp\"\n-  [(set_attr \"type\" \"savew\")])\n-\n-(define_insn \"save_register_windowsi\"\n-  [(set (reg:SI 30) (reg:SI 14))\n-   (set (reg:SI 14) (unspec_volatile:SI [(reg:SI 14)\n-\t\t\t\t\t (match_operand:SI 0 \"arith_operand\" \"rI\")]\n-\t\t\t\t        UNSPECV_SAVEW))\n-   (set (reg:SI 31) (reg:SI 15))]\n-  \"!TARGET_ARCH64\"\n+(define_insn \"save_register_window<P:mode>\"\n+  [(set (reg:P 30) (reg:P 14))\n+   (set (reg:P 14) (unspec_volatile:P [(reg:P 14)\n+\t\t\t\t       (match_operand:P 0 \"arith_operand\" \"rI\")] UNSPECV_SAVEW))\n+   (set (reg:P 31) (reg:P 15))]\n+  \"\"\n   \"save\\t%%sp, %0, %%sp\"\n   [(set_attr \"type\" \"savew\")])\n \n@@ -9103,8 +9094,6 @@\n   [(set_attr \"type\" \"fga\")\n    (set_attr \"fptype\" \"double\")])\n \n-(define_mode_macro P [(SI \"Pmode == SImode\") (DI \"Pmode == DImode\")])\n-\n (define_insn \"alignaddr<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n         (unspec:P [(match_operand:P 1 \"reg_or_0_operand\" \"rJ\")"}]}