{"sha": "bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRhYTQ0NTIzNmFkMTY5YmY3NTdhYTlkODFjMjZkN2UwOWEyOGUwYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-31T18:15:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-31T18:15:22Z"}, "message": "type_traits (is_member_function_pointer): Provide a workaround for c++/19076, correct for functions with up to 15 arguments.\n\n2004-12-31  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits (is_member_function_pointer): Provide a\n\tworkaround for c++/19076, correct for functions with up to 15\n\targuments.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_member_pointer/is_member_pointer.cc: Uncomment \"XFAILed\" tests;\n\tadd a test for variadic functions.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_scalar/is_scalar.cc: Uncomment \"XFAILed\" tests.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_enum/is_enum.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_member_function_pointer/is_member_function_pointer.cc: Likewise;\n\tadd a test for variadic functions.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_member_object_pointer/is_member_object_pointer.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_nothrow_assign/has_nothrow_assign.cc: Uncomment \"XFAILed\" tests.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_nothrow_constructor/has_nothrow_constructor.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_nothrow_copy/has_nothrow_copy.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_trivial_assign/has_trivial_assign.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_trivial_constructor/has_trivial_constructor.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_trivial_copy/has_trivial_copy.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_trivial_destructor/has_trivial_destructor.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\tis_pod/is_pod.cc: Likewise.\n\nFrom-SVN: r92769", "tree": {"sha": "59252aa9e578f4c860470bd385805a66f4c801e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59252aa9e578f4c860470bd385805a66f4c801e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/comments", "author": null, "committer": null, "parents": [{"sha": "eac3018308f1929cc15be4aae5c144356121d8d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac3018308f1929cc15be4aae5c144356121d8d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eac3018308f1929cc15be4aae5c144356121d8d2"}], "stats": {"total": 372, "additions": 298, "deletions": 74}, "files": [{"sha": "9b58b9ed9369d05436bd2a23f878f8f481fdd58b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -1,3 +1,37 @@\n+2004-12-31  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits (is_member_function_pointer): Provide a\n+\tworkaround for c++/19076, correct for functions with up to 15\n+\targuments.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_member_pointer/is_member_pointer.cc: Uncomment \"XFAILed\" tests;\n+\tadd a test for variadic functions.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_scalar/is_scalar.cc: Uncomment \"XFAILed\" tests.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_enum/is_enum.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_member_function_pointer/is_member_function_pointer.cc: Likewise;\n+\tadd a test for variadic functions.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_member_object_pointer/is_member_object_pointer.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_nothrow_assign/has_nothrow_assign.cc: Uncomment \"XFAILed\" tests.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_nothrow_constructor/has_nothrow_constructor.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_nothrow_copy/has_nothrow_copy.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_trivial_assign/has_trivial_assign.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_trivial_constructor/has_trivial_constructor.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_trivial_copy/has_trivial_copy.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_trivial_destructor/has_trivial_destructor.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\tis_pod/is_pod.cc: Likewise.\n+\n 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits: Add has_trivial_copy, has_trivial_assign,"}, {"sha": "eb1087fd281ea06c5c3e47efe4febd8d841e7275", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 210, "deletions": 3, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -138,11 +138,218 @@ namespace tr1\n   _DEFINE_SPEC(2, is_member_object_pointer, _Tp _Cp::*,\n \t       !is_function<_Tp>::value)\n \n+  // Due to c++/19076, for the time being we cannot use the correct, neat\n+  // implementation :-(\n+  //\n+  // template<typename>\n+  //   struct is_member_function_pointer\n+  //   : public false_type { };\n+  //   _DEFINE_SPEC(2, is_member_function_pointer, _Tp _Cp::*,\n+  //\t            is_function<_Tp>::value)\n+\n+  // Ugly, temporary workaround for member functions with up to 15 arguments.\n   template<typename>\n+    struct __is_mfp_helper\n+    { static const bool __value = false; };\n+\n+  template<typename _Rt, typename _Cp>\n+    struct __is_mfp_helper<_Rt (_Cp::*) ()>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8, typename _A9>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, _A9)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8, typename _A9>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, _A9, ...)>\n+    { static const bool __value = true; };\n+  \n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8, typename _A9, typename _A10>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, _A9, _A10)>\n+    { static const bool __value = true; };\n+  \n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8, typename _A9, typename _A10>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, _A9, _A10, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8, typename _A9, typename _A10, typename _A11>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, _A9, _A10, _A11)>\n+    { static const bool __value = true; };\n+  \n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8, typename _A9, typename _A10, typename _A11>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8, typename _A9, typename _A10, typename _A11,\n+\t   typename _A12>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, _A12)>\n+    { static const bool __value = true; };\n+  \n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8, typename _A9, typename _A10, typename _A11,\n+\t   typename _A12>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, _A12, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8, typename _A9, typename _A10, typename _A11,\n+\t   typename _A12, typename _A13>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, _A12,\n+\t\t\t\t\t _A13)>\n+    { static const bool __value = true; };\n+  \n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8, typename _A9, typename _A10, typename _A11,\n+\t   typename _A12, typename _A13>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, _A12,\n+\t\t\t\t\t _A13, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8, typename _A9, typename _A10, typename _A11,\n+\t   typename _A12, typename _A13, typename _A14>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, _A12,\n+\t\t\t\t\t _A13, _A14)>\n+    { static const bool __value = true; };\n+  \n+  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n+\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n+\t   typename _A8, typename _A9, typename _A10, typename _A11,\n+\t   typename _A12, typename _A13, typename _A14>\n+    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n+\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, _A12,\n+\t\t\t\t\t _A13, _A14, ...)>\n+    { static const bool __value = true; };\n+\n+  template<typename _Tp>\n     struct is_member_function_pointer\n-    : public false_type { };\n-  _DEFINE_SPEC(2, is_member_function_pointer, _Tp _Cp::*,\n-\t       is_function<_Tp>::value)\n+    : public integral_constant<bool, (__is_mfp_helper<typename\n+\t\t\t\t      remove_cv<_Tp>::type>::__value)>\n+    { };\n \n   template<typename _Tp, bool = (is_fundamental<_Tp>::value\n \t\t\t\t || is_array<_Tp>::value"}, {"sha": "f7ae576e2343a158a12d2988c1f7b07ae5b52640", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_member_pointer/is_member_pointer.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_member_pointer%2Fis_member_pointer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_member_pointer%2Fis_member_pointer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_member_pointer%2Fis_member_pointer.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -34,16 +34,16 @@ void test01()\n   VERIFY( (test_category<is_member_pointer, const int (ClassType::*)>(true)) );\n   VERIFY( (test_category<is_member_pointer, ClassType (ClassType::*)>(true)) );\n \n-  // Temporarily disabled because of c++/19076 :-(\n-\n-  //VERIFY( (test_category<is_member_pointer,\n-  //   int (ClassType::*) (int)>(true)) );\n-  //VERIFY( (test_category<is_member_pointer,\n-  //   int (ClassType::*) (int) const>(true)) );\n-  //VERIFY( (test_category<is_member_function_pointer,\n-  //   ClassType (ClassType::*) (ClassType)>(true)) );\n-  //VERIFY( (test_category<is_member_pointer,\n-  //   float (ClassType::*) (int, float, int[], int&)>(true)) );\n+  VERIFY( (test_category<is_member_pointer,\n+\t   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<is_member_pointer,\n+\t   int (ClassType::*) (int) const>(true)) );\n+  VERIFY( (test_category<is_member_pointer,\n+\t   int (ClassType::*) (float, ...)>(true)) );\n+  VERIFY( (test_category<is_member_pointer,\n+\t   ClassType (ClassType::*) (ClassType)>(true)) );\n+  VERIFY( (test_category<is_member_pointer,\n+\t   float (ClassType::*) (int, float, int[], int&)>(true)) );\n   \n   // Sanity check.\n   VERIFY( (test_category<is_member_pointer, ClassType>(false)) );"}, {"sha": "7fc1faf413cbb03a99e41c13d01d378eb8f943dd", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_scalar/is_scalar.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_scalar%2Fis_scalar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_scalar%2Fis_scalar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_scalar%2Fis_scalar.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -36,8 +36,7 @@ void test01()\n   VERIFY( (test_category<is_scalar, int*>(true)) );\n   VERIFY( (test_category<is_scalar, int(*)(int)>(true)) );\n   VERIFY( (test_category<is_scalar, int (ClassType::*)>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_category<is_scalar, int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<is_scalar, int (ClassType::*) (int)>(true)) );\n \n   // Sanity check.\n   VERIFY( (test_category<is_scalar, ClassType>(false)) );"}, {"sha": "0ae5887fcf67ae3280877e88f592560d8b461d2d", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_enum/is_enum.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_enum%2Fis_enum.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_enum%2Fis_enum.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_enum%2Fis_enum.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -43,8 +43,7 @@ void test01()\n   VERIFY( (test_category<is_enum, float&>(false)) );\n   VERIFY( (test_category<is_enum, float(&)(float)>(false)) );\n   VERIFY( (test_category<is_enum, int (ClassType::*)>(false)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_category<is_enum, int (ClassType::*) (int)>(false)) );\n+  VERIFY( (test_category<is_enum, int (ClassType::*) (int)>(false)) );\n   VERIFY( (test_category<is_enum, int (int)>(false)) );\n \n   VERIFY( (test_category<is_enum, ConvType>(false)) );"}, {"sha": "54b2711ae1b8ecf78132e6e4b5c5c87e9a80ce36", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_member_function_pointer/is_member_function_pointer.cc", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_function_pointer%2Fis_member_function_pointer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_function_pointer%2Fis_member_function_pointer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_function_pointer%2Fis_member_function_pointer.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -31,17 +31,16 @@ void test01()\n   using namespace __gnu_test;\n \n   // Positive tests.\n-\n-  // Temporarily disabled because of c++/19076 :-(\n-\n-  //VERIFY( (test_category<is_member_function_pointer,\n-  //   int (ClassType::*) (int)>(true)) );\n-  //VERIFY( (test_category<is_member_function_pointer,\n-  //   int (ClassType::*) (int) const>(true)) );\n-  //VERIFY( (test_category<is_member_function_pointer,\n-  //   ClassType (ClassType::*) (ClassType)>(true)) );\n-  //VERIFY( (test_category<is_member_function_pointer,\n-  //   float (ClassType::*) (int, float, int[], int&)>(true)) );\n+  VERIFY( (test_category<is_member_function_pointer,\n+\t   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<is_member_function_pointer,\n+\t   int (ClassType::*) (int) const>(true)) );\n+  VERIFY( (test_category<is_member_function_pointer,\n+\t   int (ClassType::*) (float, ...)>(true)) );\n+  VERIFY( (test_category<is_member_function_pointer,\n+\t   ClassType (ClassType::*) (ClassType)>(true)) );\n+  VERIFY( (test_category<is_member_function_pointer,\n+\t   float (ClassType::*) (int, float, int[], int&)>(true)) );\n \n   // Negative tests.\n   VERIFY( (test_category<is_member_function_pointer,"}, {"sha": "4f1045e68036ddeb4e6900df8c93e74ef16d9dfb", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_member_object_pointer/is_member_object_pointer.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_object_pointer%2Fis_member_object_pointer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_object_pointer%2Fis_member_object_pointer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_object_pointer%2Fis_member_object_pointer.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -43,6 +43,8 @@ void test01()\n \t   int (ClassType::*) (int)>(false)) );\n   VERIFY( (test_category<is_member_object_pointer,\n \t   int (ClassType::*) (int) const>(false)) );\n+  VERIFY( (test_category<is_member_object_pointer,\n+\t   int (ClassType::*) (float, ...)>(false)) );\n   VERIFY( (test_category<is_member_object_pointer,\n \t   ClassType (ClassType::*) (ClassType)>(false)) );\n   VERIFY( (test_category<is_member_object_pointer,"}, {"sha": "e07fa4f589fb1112d0643a507401ba131dbbe121", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_nothrow_assign/has_nothrow_assign.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_assign%2Fhas_nothrow_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_assign%2Fhas_nothrow_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_assign%2Fhas_nothrow_assign.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -37,19 +37,17 @@ void test01()\n   VERIFY( (test_assign_property<has_nothrow_assign, int*>(true)) );\n   VERIFY( (test_assign_property<has_nothrow_assign, int(*)(int)>(true)) );\n   VERIFY( (test_assign_property<has_nothrow_assign, int (ClassType::*)>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_assign_property<has_nothrow_assign,\n-  //   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign,\n+\t   int (ClassType::*) (int)>(true)) );\n   VERIFY( (test_assign_property<has_nothrow_assign, int[2]>(true)) );\n   VERIFY( (test_assign_property<has_nothrow_assign, float[][3]>(true)) );\n   VERIFY( (test_assign_property<has_nothrow_assign, EnumType[2][3][4]>(true)) );\n   VERIFY( (test_assign_property<has_nothrow_assign, int*[3]>(true)) );\n   VERIFY( (test_assign_property<has_nothrow_assign, int(*[][2])(int)>(true)) );\n   VERIFY( (test_assign_property<has_nothrow_assign,\n \t   int (ClassType::*[2][3])>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_assign_property<has_nothrow_assign,\n-  //   int (ClassType::*[][2][3]) (int)>(true)) );\n+  VERIFY( (test_assign_property<has_nothrow_assign,\n+\t   int (ClassType::*[][2][3]) (int)>(true)) );\n }\n \n int main()"}, {"sha": "18c3a33fb2f97a8581960ddb66d46f0162f01cdc", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_nothrow_constructor/has_nothrow_constructor.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_constructor%2Fhas_nothrow_constructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_constructor%2Fhas_nothrow_constructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_constructor%2Fhas_nothrow_constructor.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -37,19 +37,17 @@ void test01()\n   VERIFY( (test_category<has_nothrow_constructor, int*>(true)) );\n   VERIFY( (test_category<has_nothrow_constructor, int(*)(int)>(true)) );\n   VERIFY( (test_category<has_nothrow_constructor, int (ClassType::*)>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_category<has_nothrow_constructor,\n-  //   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_constructor,\n+\t   int (ClassType::*) (int)>(true)) );\n   VERIFY( (test_category<has_nothrow_constructor, int[2]>(true)) );\n   VERIFY( (test_category<has_nothrow_constructor, float[][3]>(true)) );\n   VERIFY( (test_category<has_nothrow_constructor, EnumType[2][3][4]>(true)) );\n   VERIFY( (test_category<has_nothrow_constructor, int*[3]>(true)) );\n   VERIFY( (test_category<has_nothrow_constructor, int(*[][2])(int)>(true)) );\n   VERIFY( (test_category<has_nothrow_constructor,\n \t   int (ClassType::*[2][3])>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_category<has_nothrow_constructor,\n-  //   int (ClassType::*[][2][3]) (int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_constructor,\n+\t   int (ClassType::*[][2][3]) (int)>(true)) );\n \n   // Sanity check.\n   VERIFY( (test_category<has_nothrow_constructor, ClassType>(false)) );"}, {"sha": "7ba63bfa95491f9f2eb248d9a0e7db965f88e4cf", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_nothrow_copy/has_nothrow_copy.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_copy%2Fhas_nothrow_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_copy%2Fhas_nothrow_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_copy%2Fhas_nothrow_copy.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -37,19 +37,17 @@ void test01()\n   VERIFY( (test_copy_property<has_nothrow_copy, int*>(true)) );\n   VERIFY( (test_copy_property<has_nothrow_copy, int(*)(int)>(true)) );\n   VERIFY( (test_copy_property<has_nothrow_copy, int (ClassType::*)>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_copy_property<has_nothrow_copy,\n-  //   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy,\n+\t   int (ClassType::*) (int)>(true)) );\n   VERIFY( (test_copy_property<has_nothrow_copy, int[2]>(true)) );\n   VERIFY( (test_copy_property<has_nothrow_copy, float[][3]>(true)) );\n   VERIFY( (test_copy_property<has_nothrow_copy, EnumType[2][3][4]>(true)) );\n   VERIFY( (test_copy_property<has_nothrow_copy, int*[3]>(true)) );\n   VERIFY( (test_copy_property<has_nothrow_copy, int(*[][2])(int)>(true)) );\n   VERIFY( (test_copy_property<has_nothrow_copy,\n \t   int (ClassType::*[2][3])>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_copy_property<has_nothrow_copy,\n-  //   int (ClassType::*[][2][3]) (int)>(true)) );\n+  VERIFY( (test_copy_property<has_nothrow_copy,\n+\t   int (ClassType::*[][2][3]) (int)>(true)) );\n }\n \n int main()"}, {"sha": "66b2bc18c386e2d3ece3382d75d08404ac4f3557", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_trivial_assign/has_trivial_assign.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_assign%2Fhas_trivial_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_assign%2Fhas_trivial_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_assign%2Fhas_trivial_assign.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -37,19 +37,17 @@ void test01()\n   VERIFY( (test_assign_property<has_trivial_assign, int*>(true)) );\n   VERIFY( (test_assign_property<has_trivial_assign, int(*)(int)>(true)) );\n   VERIFY( (test_assign_property<has_trivial_assign, int (ClassType::*)>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_assign_property<has_trivial_assign,\n-  //   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign,\n+\t   int (ClassType::*) (int)>(true)) );\n   VERIFY( (test_assign_property<has_trivial_assign, int[2]>(true)) );\n   VERIFY( (test_assign_property<has_trivial_assign, float[][3]>(true)) );\n   VERIFY( (test_assign_property<has_trivial_assign, EnumType[2][3][4]>(true)) );\n   VERIFY( (test_assign_property<has_trivial_assign, int*[3]>(true)) );\n   VERIFY( (test_assign_property<has_trivial_assign, int(*[][2])(int)>(true)) );\n   VERIFY( (test_assign_property<has_trivial_assign,\n \t   int (ClassType::*[2][3])>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_assign_property<has_trivial_assign,\n-  //   int (ClassType::*[][2][3]) (int)>(true)) );\n+  VERIFY( (test_assign_property<has_trivial_assign,\n+\t   int (ClassType::*[][2][3]) (int)>(true)) );\n }\n \n int main()"}, {"sha": "7559a43ffc111f7cd77fe1f4a9a16c37922851a1", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_trivial_constructor/has_trivial_constructor.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_constructor%2Fhas_trivial_constructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_constructor%2Fhas_trivial_constructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_constructor%2Fhas_trivial_constructor.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -37,19 +37,17 @@ void test01()\n   VERIFY( (test_category<has_trivial_constructor, int*>(true)) );\n   VERIFY( (test_category<has_trivial_constructor, int(*)(int)>(true)) );\n   VERIFY( (test_category<has_trivial_constructor, int (ClassType::*)>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_category<has_trivial_constructor,\n-  //   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<has_trivial_constructor,\n+\t   int (ClassType::*) (int)>(true)) );\n   VERIFY( (test_category<has_trivial_constructor, int[2]>(true)) );\n   VERIFY( (test_category<has_trivial_constructor, float[][3]>(true)) );\n   VERIFY( (test_category<has_trivial_constructor, EnumType[2][3][4]>(true)) );\n   VERIFY( (test_category<has_trivial_constructor, int*[3]>(true)) );\n   VERIFY( (test_category<has_trivial_constructor, int(*[][2])(int)>(true)) );\n   VERIFY( (test_category<has_trivial_constructor,\n \t   int (ClassType::*[2][3])>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_category<has_trivial_constructor,\n-  //   int (ClassType::*[][2][3]) (int)>(true)) );\n+  VERIFY( (test_category<has_trivial_constructor,\n+\t   int (ClassType::*[][2][3]) (int)>(true)) );\n \n   // Sanity check.\n   VERIFY( (test_category<has_trivial_constructor, ClassType>(false)) );"}, {"sha": "64eed997d60499bb60f271aa83f93bac4840e33a", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_trivial_copy/has_trivial_copy.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_copy%2Fhas_trivial_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_copy%2Fhas_trivial_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_copy%2Fhas_trivial_copy.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -37,19 +37,17 @@ void test01()\n   VERIFY( (test_copy_property<has_trivial_copy, int*>(true)) );\n   VERIFY( (test_copy_property<has_trivial_copy, int(*)(int)>(true)) );\n   VERIFY( (test_copy_property<has_trivial_copy, int (ClassType::*)>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_copy_property<has_trivial_copy,\n-  //   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy,\n+\t   int (ClassType::*) (int)>(true)) );\n   VERIFY( (test_copy_property<has_trivial_copy, int[2]>(true)) );\n   VERIFY( (test_copy_property<has_trivial_copy, float[][3]>(true)) );\n   VERIFY( (test_copy_property<has_trivial_copy, EnumType[2][3][4]>(true)) );\n   VERIFY( (test_copy_property<has_trivial_copy, int*[3]>(true)) );\n   VERIFY( (test_copy_property<has_trivial_copy, int(*[][2])(int)>(true)) );\n   VERIFY( (test_copy_property<has_trivial_copy,\n \t   int (ClassType::*[2][3])>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_copy_property<has_trivial_copy,\n-  //   int (ClassType::*[][2][3]) (int)>(true)) );\n+  VERIFY( (test_copy_property<has_trivial_copy,\n+\t   int (ClassType::*[][2][3]) (int)>(true)) );\n }\n \n int main()"}, {"sha": "e3cc9db9f8f4bd8bb2342f4230bbaf92db5dcfd9", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_trivial_destructor/has_trivial_destructor.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_destructor%2Fhas_trivial_destructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_destructor%2Fhas_trivial_destructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_destructor%2Fhas_trivial_destructor.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -37,19 +37,17 @@ void test01()\n   VERIFY( (test_category<has_trivial_destructor, int*>(true)) );\n   VERIFY( (test_category<has_trivial_destructor, int(*)(int)>(true)) );\n   VERIFY( (test_category<has_trivial_destructor, int (ClassType::*)>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_category<has_trivial_destructor,\n-  //   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<has_trivial_destructor,\n+\t   int (ClassType::*) (int)>(true)) );\n   VERIFY( (test_category<has_trivial_destructor, int[2]>(true)) );\n   VERIFY( (test_category<has_trivial_destructor, float[][3]>(true)) );\n   VERIFY( (test_category<has_trivial_destructor, EnumType[2][3][4]>(true)) );\n   VERIFY( (test_category<has_trivial_destructor, int*[3]>(true)) );\n   VERIFY( (test_category<has_trivial_destructor, int(*[][2])(int)>(true)) );\n   VERIFY( (test_category<has_trivial_destructor,\n \t   int (ClassType::*[2][3])>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_category<has_trivial_destructor,\n-  //   int (ClassType::*[][2][3]) (int)>(true)) );\n+  VERIFY( (test_category<has_trivial_destructor,\n+\t   int (ClassType::*[][2][3]) (int)>(true)) );\n \n   // Sanity check.\n   VERIFY( (test_category<has_trivial_destructor, ClassType>(false)) );"}, {"sha": "485692091c8910b3de8de98708ef80ad581844f9", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_pod/is_pod.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_pod%2Fis_pod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa445236ad169bf757aa9d81c26d7e09a28e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_pod%2Fis_pod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_pod%2Fis_pod.cc?ref=bdaa445236ad169bf757aa9d81c26d7e09a28e0c", "patch": "@@ -37,16 +37,14 @@ void test01()\n   VERIFY( (test_category<is_pod, int*>(true)) );\n   VERIFY( (test_category<is_pod, int(*)(int)>(true)) );\n   VERIFY( (test_category<is_pod, int (ClassType::*)>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_category<is_pod, int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<is_pod, int (ClassType::*) (int)>(true)) );\n   VERIFY( (test_category<is_pod, int[2]>(true)) );\n   VERIFY( (test_category<is_pod, float[][3]>(true)) );\n   VERIFY( (test_category<is_pod, EnumType[2][3][4]>(true)) );\n   VERIFY( (test_category<is_pod, int*[3]>(true)) );\n   VERIFY( (test_category<is_pod, int(*[][2])(int)>(true)) );\n   VERIFY( (test_category<is_pod, int (ClassType::*[2][3])>(true)) );\n-  // Temporarily disabled because of c++/19076 :-(\n-  // VERIFY( (test_category<is_pod, int (ClassType::*[][2][3]) (int)>(true)) );\n+  VERIFY( (test_category<is_pod, int (ClassType::*[][2][3]) (int)>(true)) );\n \n   // Sanity check.\n   VERIFY( (test_category<is_pod, ClassType>(false)) );"}]}