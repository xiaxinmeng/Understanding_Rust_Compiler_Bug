{"sha": "4860a46271bd50674a3adf1bc33704b98d7efffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg2MGE0NjI3MWJkNTA2NzRhM2FkZjFiYzMzNzA0Yjk4ZDdlZmZmYw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2013-08-29T11:44:41Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2013-08-29T11:44:41Z"}, "message": "re PR fortran/52243 (Avoid reallocation for:  array1 = array1 / scalar  for performance)\n\n2013-08-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/52243\n\t* trans-expr.c (is_runtime_conformable):  New function.\n\t* gfc_trans_assignment_1:  Use it.\n\n2013-08-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/52243\n\t* gfortran.dg/realloc_on_assign_14.f90:  Remove warning made\n\tobsolete by patch.\n\t* gfortran.dg/realloc_on_assign_19.f90:  New test.\n\nFrom-SVN: r202070", "tree": {"sha": "12e9696c1245b6e8aae84a190fcec55b8cb4429a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12e9696c1245b6e8aae84a190fcec55b8cb4429a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4860a46271bd50674a3adf1bc33704b98d7efffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4860a46271bd50674a3adf1bc33704b98d7efffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4860a46271bd50674a3adf1bc33704b98d7efffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4860a46271bd50674a3adf1bc33704b98d7efffc/comments", "author": null, "committer": null, "parents": [{"sha": "1b27500048b97fbdf53c5407e2dbc8f91c439481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b27500048b97fbdf53c5407e2dbc8f91c439481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b27500048b97fbdf53c5407e2dbc8f91c439481"}], "stats": {"total": 138, "additions": 136, "deletions": 2}, "files": [{"sha": "5fbe33107f27a408c4219ae8b80e4bb2998fa385", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4860a46271bd50674a3adf1bc33704b98d7efffc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4860a46271bd50674a3adf1bc33704b98d7efffc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4860a46271bd50674a3adf1bc33704b98d7efffc", "patch": "@@ -1,3 +1,9 @@\n+2013-08-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/52243\n+\t* trans-expr.c (is_runtime_conformable):  New function.\n+\t* gfc_trans_assignment_1:  Use it.\n+\n 2013-08-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/58146"}, {"sha": "0ecfdfce46901f5005e69285bc59c2ff77b8cc8e", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 101, "deletions": 1, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4860a46271bd50674a3adf1bc33704b98d7efffc/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4860a46271bd50674a3adf1bc33704b98d7efffc/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=4860a46271bd50674a3adf1bc33704b98d7efffc", "patch": "@@ -7738,6 +7738,105 @@ alloc_scalar_allocatable_for_assignment (stmtblock_t *block,\n     }\n }\n \n+/* Check for assignments of the type\n+\n+   a = a + 4\n+\n+   to make sure we do not check for reallocation unneccessarily.  */\n+\n+\n+static bool\n+is_runtime_conformable (gfc_expr *expr1, gfc_expr *expr2)\n+{\n+  gfc_actual_arglist *a;\n+  gfc_expr *e1, *e2;\n+\n+  switch (expr2->expr_type)\n+    {\n+    case EXPR_VARIABLE:\n+      return gfc_dep_compare_expr (expr1, expr2) == 0;\n+\n+    case EXPR_FUNCTION:\n+      if (expr2->value.function.esym\n+\t  && expr2->value.function.esym->attr.elemental)\n+\t{\n+\t  for (a = expr2->value.function.actual; a != NULL; a = a->next)\n+\t    {\n+\t      e1 = a->expr;\n+\t      if (e1->rank > 0 && !is_runtime_conformable (expr1, e1))\n+\t\treturn false;\n+\t    }\t \n+\t  return true;\n+\t}\n+      else if (expr2->value.function.isym\n+\t       && expr2->value.function.isym->elemental)\n+\t{\n+\t  for (a = expr2->value.function.actual; a != NULL; a = a->next)\n+\t    {\n+\t      e1 = a->expr;\n+\t      if (e1->rank > 0 && !is_runtime_conformable (expr1, e1))\n+\t\treturn false;\n+\t    }\n+\t  return true;\n+\t}\n+\n+      break;\n+\n+    case EXPR_OP:\n+      switch (expr2->value.op.op)\n+\t{\n+\tcase INTRINSIC_NOT:\n+\tcase INTRINSIC_UPLUS:\n+\tcase INTRINSIC_UMINUS:\n+\tcase INTRINSIC_PARENTHESES:\n+\t  return is_runtime_conformable (expr1, expr2->value.op.op1);\n+\n+\tcase INTRINSIC_PLUS:\n+\tcase INTRINSIC_MINUS:\n+\tcase INTRINSIC_TIMES:\n+\tcase INTRINSIC_DIVIDE:\n+\tcase INTRINSIC_POWER:\n+\tcase INTRINSIC_AND:\n+\tcase INTRINSIC_OR:\n+\tcase INTRINSIC_EQV:\n+\tcase INTRINSIC_NEQV:\n+\tcase INTRINSIC_EQ:\n+\tcase INTRINSIC_NE:\n+\tcase INTRINSIC_GT:\n+\tcase INTRINSIC_GE:\n+\tcase INTRINSIC_LT:\n+\tcase INTRINSIC_LE:\n+\tcase INTRINSIC_EQ_OS:\n+\tcase INTRINSIC_NE_OS:\n+\tcase INTRINSIC_GT_OS:\n+\tcase INTRINSIC_GE_OS:\n+\tcase INTRINSIC_LT_OS:\n+\tcase INTRINSIC_LE_OS:\n+\n+\t  e1 = expr2->value.op.op1;\n+\t  e2 = expr2->value.op.op2;\n+\n+\t  if (e1->rank == 0 && e2->rank > 0)\n+\t    return is_runtime_conformable (expr1, e2);\n+\t  else if (e1->rank > 0 && e2->rank == 0)\n+\t    return is_runtime_conformable (expr1, e1);\n+\t  else if (e1->rank > 0 && e2->rank > 0)\n+\t    return is_runtime_conformable (expr1, e1)\n+\t      && is_runtime_conformable (expr1, e2);\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\n+\t}\n+\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return false;\n+}\n \n /* Subroutine of gfc_trans_assignment that actually scalarizes the\n    assignment.  EXPR1 is the destination/LHS and EXPR2 is the source/RHS.\n@@ -7935,7 +8034,8 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n \t    && gfc_is_reallocatable_lhs (expr1)\n \t    && !gfc_expr_attr (expr1).codimension\n \t    && !gfc_is_coindexed (expr1)\n-\t    && expr2->rank)\n+\t    && expr2->rank\n+\t    && !is_runtime_conformable (expr1, expr2))\n \t{\n \t  realloc_lhs_warning (expr1->ts.type, true, &expr1->where);\n \t  ompws_flags &= ~OMPWS_SCALARIZER_WS;"}, {"sha": "3d546823d237c19d9f67d2a401b370c4f7693232", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4860a46271bd50674a3adf1bc33704b98d7efffc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4860a46271bd50674a3adf1bc33704b98d7efffc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4860a46271bd50674a3adf1bc33704b98d7efffc", "patch": "@@ -1,3 +1,10 @@\n+2013-08-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/52243\n+\t* gfortran.dg/realloc_on_assign_14.f90:  Remove warning made\n+\tobsolete by patch.\n+\t* gfortran.dg/realloc_on_assign_19.f90:  New test.\n+\n 2013-08-29  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57287"}, {"sha": "b8b669f640d82db1fca7efea3802a572e3806c52", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_14.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4860a46271bd50674a3adf1bc33704b98d7efffc/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4860a46271bd50674a3adf1bc33704b98d7efffc/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_14.f90?ref=4860a46271bd50674a3adf1bc33704b98d7efffc", "patch": "@@ -23,7 +23,7 @@\n astr = 'abc'   ! no realloc\n astr = ['abc'] ! { dg-warning \"Code for reallocating the allocatable array\" }\n a = reshape(a,shape(a)) ! { dg-warning \"Code for reallocating the allocatable array\" }\n-r = sin(r)     ! { dg-warning \"Code for reallocating the allocatable array\" }\n+r = sin(r)\n r = sin(r(1))  ! no realloc\n b = sin(r(1))  ! { dg-warning \"Code for reallocating the allocatable variable\" }\n "}, {"sha": "c54a35f40dabcc98dcb1acae472b319b796b5c95", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_19.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4860a46271bd50674a3adf1bc33704b98d7efffc/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4860a46271bd50674a3adf1bc33704b98d7efffc/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_19.f90?ref=4860a46271bd50674a3adf1bc33704b98d7efffc", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+! PR 52243 - avoid check for reallocation when doing simple\n+! assignments with the same variable on both sides.\n+module  foo\n+contains\n+  elemental function ele(a)\n+    real, intent(in) :: a\n+    real :: ele\n+    ele = 1./(2+a)\n+  end function ele\n+\n+  subroutine bar(a)\n+    real, dimension(:), allocatable :: a\n+    a = a * 2.0\n+    a = sin(a-0.3)\n+    a = ele(a)\n+  end subroutine bar\n+end module foo\n+! { dg-final { scan-tree-dump-times \"alloc\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}