{"sha": "fea6ae0e5d82c01680c788c77709076b9288d145", "node_id": "C_kwDOANBUbNoAKGZlYTZhZTBlNWQ4MmMwMTY4MGM3ODhjNzc3MDkwNzZiOTI4OGQxNDU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-13T14:01:29Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-13T14:01:29Z"}, "message": "c++: two-parameter version of cxx_constant_value\n\nSince some callers need the complain parameter but not the object\nparameter, let's introduce and use an overload of cxx_constant_value\nthat omits the latter.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (cxx_constant_value): Define two-parameter version\n\tthat omits the object parameter.\n\t* decl.cc (build_explicit_specifier): Omit NULL_TREE object\n\targument to cxx_constant_value.\n\t* except.cc (build_noexcept_spec): Likewise.\n\t* pt.cc (expand_integer_pack): Likewise.\n\t(fold_targs_r): Likewise.\n\t* semantics.cc (finish_if_stmt_cond): Likewise.", "tree": {"sha": "f4c441d4d42cd01b42d8f8a19ddaeb24cd90f9ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4c441d4d42cd01b42d8f8a19ddaeb24cd90f9ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fea6ae0e5d82c01680c788c77709076b9288d145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea6ae0e5d82c01680c788c77709076b9288d145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fea6ae0e5d82c01680c788c77709076b9288d145", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea6ae0e5d82c01680c788c77709076b9288d145/comments", "author": null, "committer": null, "parents": [{"sha": "441a4880cba0908e58a102b068095e4ac2bb46cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441a4880cba0908e58a102b068095e4ac2bb46cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441a4880cba0908e58a102b068095e4ac2bb46cc"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "1eb176d4a5078d3b60f7bc089435662427f51f3c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ae0e5d82c01680c788c77709076b9288d145/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ae0e5d82c01680c788c77709076b9288d145/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fea6ae0e5d82c01680c788c77709076b9288d145", "patch": "@@ -8414,6 +8414,8 @@ extern bool require_rvalue_constant_expression (tree);\n extern bool require_potential_rvalue_constant_expression (tree);\n extern tree cxx_constant_value\t\t\t(tree, tree = NULL_TREE,\n \t\t\t\t\t\t tsubst_flags_t = tf_error);\n+inline tree cxx_constant_value (tree t, tsubst_flags_t complain)\n+{ return cxx_constant_value (t, NULL_TREE, complain); }\n extern void cxx_constant_dtor\t\t\t(tree, tree);\n extern tree cxx_constant_init\t\t\t(tree, tree = NULL_TREE);\n extern tree maybe_constant_value\t\t(tree, tree = NULL_TREE, bool = false);"}, {"sha": "006e9affcba7585d88972f696b9e1e4693642baa", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ae0e5d82c01680c788c77709076b9288d145/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ae0e5d82c01680c788c77709076b9288d145/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=fea6ae0e5d82c01680c788c77709076b9288d145", "patch": "@@ -18557,7 +18557,7 @@ build_explicit_specifier (tree expr, tsubst_flags_t complain)\n \n   expr = build_converted_constant_bool_expr (expr, complain);\n   expr = instantiate_non_dependent_expr (expr, complain);\n-  expr = cxx_constant_value (expr, NULL_TREE, complain);\n+  expr = cxx_constant_value (expr, complain);\n   return expr;\n }\n "}, {"sha": "048612de400b62a42b99d522537f8119447900bc", "filename": "gcc/cp/except.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ae0e5d82c01680c788c77709076b9288d145/gcc%2Fcp%2Fexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ae0e5d82c01680c788c77709076b9288d145/gcc%2Fcp%2Fexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.cc?ref=fea6ae0e5d82c01680c788c77709076b9288d145", "patch": "@@ -1257,7 +1257,7 @@ build_noexcept_spec (tree expr, tsubst_flags_t complain)\n     {\n       expr = build_converted_constant_bool_expr (expr, complain);\n       expr = instantiate_non_dependent_expr (expr, complain);\n-      expr = cxx_constant_value (expr, NULL_TREE, complain);\n+      expr = cxx_constant_value (expr, complain);\n     }\n   if (TREE_CODE (expr) == INTEGER_CST)\n     {"}, {"sha": "db4e808adec033ac53a233225e1d0de62b0964bf", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ae0e5d82c01680c788c77709076b9288d145/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ae0e5d82c01680c788c77709076b9288d145/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=fea6ae0e5d82c01680c788c77709076b9288d145", "patch": "@@ -3869,7 +3869,7 @@ expand_integer_pack (tree call, tree args, tsubst_flags_t complain,\n   else\n     {\n       hi = instantiate_non_dependent_expr (hi, complain);\n-      hi = cxx_constant_value (hi, NULL_TREE, complain);\n+      hi = cxx_constant_value (hi, complain);\n       int len = valid_constant_size_p (hi) ? tree_to_shwi (hi) : -1;\n \n       /* Calculate the largest value of len that won't make the size of the vec\n@@ -20121,7 +20121,7 @@ fold_targs_r (tree targs, tsubst_flags_t complain)\n \t       && !glvalue_p (elt)\n \t       && !TREE_CONSTANT (elt))\n \t{\n-\t  elt = cxx_constant_value (elt, NULL_TREE, complain);\n+\t  elt = cxx_constant_value (elt, complain);\n \t  if (elt == error_mark_node)\n \t    return false;\n \t}"}, {"sha": "4f18997848487eb044989f51f91ff9f3d7d45b58", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ae0e5d82c01680c788c77709076b9288d145/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ae0e5d82c01680c788c77709076b9288d145/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=fea6ae0e5d82c01680c788c77709076b9288d145", "patch": "@@ -1042,7 +1042,7 @@ finish_if_stmt_cond (tree orig_cond, tree if_stmt)\n     {\n       maybe_warn_for_constant_evaluated (cond, /*constexpr_if=*/true);\n       cond = instantiate_non_dependent_expr (cond);\n-      cond = cxx_constant_value (cond, NULL_TREE);\n+      cond = cxx_constant_value (cond);\n     }\n   else\n     {"}]}