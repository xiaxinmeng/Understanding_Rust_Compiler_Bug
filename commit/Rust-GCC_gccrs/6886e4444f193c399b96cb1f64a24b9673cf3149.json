{"sha": "6886e4444f193c399b96cb1f64a24b9673cf3149", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg4NmU0NDQ0ZjE5M2MzOTliOTZjYjFmNjRhMjRiOTY3M2NmMzE0OQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-07-02T11:33:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-07-02T11:33:21Z"}, "message": "[multiple changes]\n\n2012-07-02  Richard Guenther  <rguenther@suse.de>\n\n\tMerge from graphite branch\n\t2011-07-21  Tobias Grosser  <tobias@grosser.es>\n    \n\t* configure: Regenerated.\n\t* config/cloog.m4: Remove support for CLooG-ppl and CLooG-parma,\n\tboth cloog.org and legacy versions. The only supported version will\n\tbe CLooG with the isl backend.\n\n\t2011-07-21  Tobias Grosser  <tobias@grosser.es>\n    \n\t* configure: Regenerated.\n\t* configure.ac: Require cloog isl 0.17.0\n\n\t2011-07-21  Tobias Grosser  <tobias@grosser.es>\n    \n\t* configure: Regenerated.\n\t* config/cloog.m4: Do not define CLOOG_ORG\n\n\tgcc/\n\t* Makefile.in (graphite-clast-to-gimple.o, graphite-cloog-util.o):\n\tRemove graphite-cloog-util.h.\n\t* graphite-clast-to-gimple.c (gcc_type_for_iv_of_clast_loop,\n\tbuild_iv_mapping, translate_clast_user, translate_clast,\n\tfree_scattering, initialize_cloog_names, build_cloog_prog,\n\tcreate_params_index): Do not use old compatibility functions.\n\t(clast_name_to_index, set_cloog_options): Remove code for legacy cloog.\n\t* graphite-cloog-util.c (openscop_print_cloog_matrix): Do not use old\n\tcompatibility functions.\n\t(new_Cloog_Scattering_from_ppl_Polyhedron): Remove code for legacy\n\tcloog.\n\t* graphite-cloog-util.h: Remove include of graphite-cloog-util.h.\n\t* graphite.c (graphite.c): Do not call outdated cloog_initialize() and\n\tcloog_finalize().\n\t* graphite-cloog-compat.h: Remove.\n\n\t2011-08-09  Tobias Grosser <tobias@grosser.es>\n\n\tgcc/\n\t* graphite-clast-to-gimple.c (new_clast_name_index): Store a copy\n\tof the string, no just a reference.\n\t(clast_name_index): Add a new field, that specifies if we need to free\n\tthe name.\n\t(free_clast_name_index): If necessary, free the name string.\n\t(clast_name_index_elt_info): Calculate the hash based on the string\n\tcontent, not the memory location it is stored in.\n\t(clast_name_to_level): Specify that we do not need to free the name.\n\t(clast_name_to_index): Dito.\n\t(clast_name_to_lb_ub): Dito.\n\t(eq_clast_name_indexes): Compare the strings, not their base pointers.\n\t(free_scattering): Removed.\n\t(initialize_cloog_names): Renamed to add_names_to_union_domain().\n\t(add_names_to_union_domain): Changed to work on a union_domain,\n\tinstead of a CloogNames structure.\n\t(build_cloog_prog): Removed.\n\t(build_cloog_union_domain): New.\n\t(generate_cloog_input): New.\n\t(scop_to_clast): Use CloogInput instead of CloogProgram.\n\t(print_generated_program): Adapt to new scop_to_clast() and do not\n\tprint the CloogProgram any more.\n\t(create_params_index): Removed, functionality integrated in\n\tadd_names_to_union_domain().\n\t(gloog): Adapt to new scop_to_clast().\n\t* graphite-clast-to-gimple.h (scop_to_clast): Remove.\n\n\t2012-01-11  Tobias Grosser <tobias@grosser.es>\n    \n\t* graphite-clast-to-gimple.c (clast_name_to_index,\n\tclast_name_to_lb_ub, clast_name_to_gcc): Change types.\n\t(clast_to_gcc_expression): Add clast_expr_name as a new\n\tcase. Do not assume a clast_expr_term points always to a\n\tclast_expr_name.\n\t(type_for_clast_term): Do not assume a clast_expr_term points always to\n\ta clast_expr_name.\n\t(type_for_clast_name): New.\n\t(type_for_clast_expr): Add clast_expr_name as a new case.\n\n\t2011-08-03  Sebastian Pop <sebpop@gmail.com>\n\n\t* graphite-cloog-util.c (new_Cloog_Domain_from_ppl_Polyhedron,\n\tnew_Cloog_Scattering_from_ppl_Polyhedron,\n\tnew_Cloog_Domain_from_ppl_Pointset_Powerset): Remove ATTRIBUTE_UNUSED.\n\nFrom-SVN: r189155", "tree": {"sha": "51550bf9a6929b2f5fa8792ef95b345cc6623676", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51550bf9a6929b2f5fa8792ef95b345cc6623676"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6886e4444f193c399b96cb1f64a24b9673cf3149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6886e4444f193c399b96cb1f64a24b9673cf3149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6886e4444f193c399b96cb1f64a24b9673cf3149", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6886e4444f193c399b96cb1f64a24b9673cf3149/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8df2d9792c3f82deda505cf34d43cbb5997a55f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df2d9792c3f82deda505cf34d43cbb5997a55f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df2d9792c3f82deda505cf34d43cbb5997a55f6"}], "stats": {"total": 1137, "additions": 306, "deletions": 831}, "files": [{"sha": "1231a3dd41dfe8692b566e8012eb2cee15540630", "filename": "ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6886e4444f193c399b96cb1f64a24b9673cf3149/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6886e4444f193c399b96cb1f64a24b9673cf3149/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=6886e4444f193c399b96cb1f64a24b9673cf3149", "patch": "@@ -1,3 +1,23 @@\n+2012-07-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tMerge from graphite branch\n+\t2011-07-21  Tobias Grosser  <tobias@grosser.es>\n+    \n+\t* configure: Regenerated.\n+\t* config/cloog.m4: Remove support for CLooG-ppl and CLooG-parma,\n+\tboth cloog.org and legacy versions. The only supported version will\n+\tbe CLooG with the isl backend.\n+\n+\t2011-07-21  Tobias Grosser  <tobias@grosser.es>\n+    \n+\t* configure: Regenerated.\n+\t* configure.ac: Require cloog isl 0.17.0\n+\n+\t2011-07-21  Tobias Grosser  <tobias@grosser.es>\n+    \n+\t* configure: Regenerated.\n+\t* config/cloog.m4: Do not define CLOOG_ORG\n+\n 2012-06-29  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* configure.ac: Skip C if explicitly selected."}, {"sha": "9c424450df8ced5cbfad3f6d3a9abf11b8578d6b", "filename": "config/cloog.m4", "status": "modified", "additions": 11, "deletions": 98, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6886e4444f193c399b96cb1f64a24b9673cf3149/config%2Fcloog.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6886e4444f193c399b96cb1f64a24b9673cf3149/config%2Fcloog.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fcloog.m4?ref=6886e4444f193c399b96cb1f64a24b9673cf3149", "patch": "@@ -37,17 +37,6 @@ AC_DEFUN([CLOOG_INIT_FLAGS],\n       [--with-cloog-lib=PATH],\n       [Specify the directory for the installed CLooG library])])\n \n-  AC_ARG_ENABLE(cloog-backend,\n-    [AS_HELP_STRING(\n-      [--enable-cloog-backend[[=BACKEND]]],\n-      [set the CLooG BACKEND used to either isl, ppl or ppl-legacy (default)])],\n-    [ if   test \"x${enableval}\" = \"xisl\"; then\n-\tcloog_backend=isl\n-      elif test \"x${enableval}\" = \"xppl\"; then\n-\tcloog_backend=ppl\n-      else\n-\tcloog_backend=ppl-legacy\n-      fi], cloog_backend=ppl-legacy)\n   AC_ARG_ENABLE(cloog-version-check,\n     [AS_HELP_STRING(\n       [--disable-cloog-version-check],\n@@ -107,23 +96,6 @@ m4_define([_CLOOG_ORG_PROG_ISL],[AC_LANG_PROGRAM(\n   [#include \"cloog/cloog.h\" ],\n   [cloog_version ()])])\n \n-# _CLOOG_ORG_PROG_PPL ()\n-# ------------------\n-# Helper for detecting CLooG.org's PPL backend.\n-m4_define([_CLOOG_ORG_PROG_PPL],[AC_LANG_PROGRAM(\n-  [#include \"cloog/cloog.h\"\n-   #include \"cloog/ppl/cloog.h\"],\n-  [cloog_version ()])])\n-\n-# _CLOOG_PPL_LEGACY_PROG ()\n-# -------------------------\n-# Helper for detecting CLooG-Legacy (CLooG-PPL).\n-m4_define([_CLOOG_PPL_LEGACY_PROG], [AC_LANG_PROGRAM(\n-  [#include \"cloog/cloog.h\"],\n-  [#ifndef CLOOG_PPL_BACKEND\n-    choke me\n-   #endif ])])\n-\n # CLOOG_FIND_FLAGS ()\n # ------------------\n # Detect the used CLooG-backend and set clooginc/clooglibs/cloog_org.\n@@ -137,56 +109,24 @@ AC_DEFUN([CLOOG_FIND_FLAGS],\n   _cloog_saved_LDFLAGS=$LDFLAGS\n   _cloog_saved_LIBS=$LIBS\n \n-  _cloogorginc=\"-DCLOOG_INT_GMP -DCLOOG_ORG\"\n+  _cloogorginc=\"-DCLOOG_INT_GMP\"\n  \n   dnl clooglibs & clooginc may have been initialized by CLOOG_INIT_FLAGS.\n   CFLAGS=\"${CFLAGS} ${clooginc} ${gmpinc}\"\n   CPPFLAGS=\"${CPPFLAGS} ${_cloogorginc}\"\n   LDFLAGS=\"${LDFLAGS} ${clooglibs}\"\n \n-  case $cloog_backend in\n-    \"ppl-legacy\")\n-    CFLAGS=\"${CFLAGS} ${pplinc}\"\n-    LDFLAGS=\"${LDFLAGS} ${ppllibs}\"\n-    AC_CACHE_CHECK([for installed CLooG PPL Legacy], [gcc_cv_cloog_type],\n-      [LIBS=\"-lcloog ${_cloog_saved_LIBS}\"\n-      AC_LINK_IFELSE([_CLOOG_PPL_LEGACY_PROG], [gcc_cv_cloog_type=\"PPL Legacy\"],\n-\t\t     [gcc_cv_cloog_type=no])])\n-    ;;\n-    \"isl\")\n-    AC_CACHE_CHECK([for installed CLooG ISL], [gcc_cv_cloog_type],\n-      [LIBS=\"-lcloog-isl ${_cloog_saved_LIBS}\"\n-      AC_LINK_IFELSE([_CLOOG_ORG_PROG_ISL], [gcc_cv_cloog_type=\"ISL\"],\n-\t\t     [gcc_cv_cloog_type=no])])\n-    ;;\n-    \"ppl\")\n-    CFLAGS=\"${CFLAGS} ${pplinc}\"\n-    LDFLAGS=\"${LDFLAGS} ${ppllibs}\"\n-    AC_CACHE_CHECK([for installed CLooG PPL], [gcc_cv_cloog_type],\n-      [LIBS=\"-lcloog-ppl ${_cloog_saved_LIBS}\"\n-      AC_LINK_IFELSE([_CLOOG_ORG_PROG_PPL], [gcc_cv_cloog_type=\"PPL\"],\n-\t\t     [gcc_cv_cloog_type=no])])\n-    ;;\n-    *)\n-      gcc_cv_cloog_type=\"\"\n-  esac\n+  AC_CACHE_CHECK([for installed CLooG ISL], [gcc_cv_cloog_type],\n+    [LIBS=\"-lcloog-isl ${_cloog_saved_LIBS}\"\n+    AC_LINK_IFELSE([_CLOOG_ORG_PROG_ISL], [gcc_cv_cloog_type=\"ISL\"],\n+\t\t   [gcc_cv_cloog_type=no])])\n \n   case $gcc_cv_cloog_type in\n-    \"PPL Legacy\")\n-      clooginc=\"${clooginc}\"\n-      clooglibs=\"${clooglibs} -lcloog\"\n-      cloog_org=no\n-      ;;\n     \"ISL\")\n       clooginc=\"${clooginc} ${_cloogorginc}\"\n       clooglibs=\"${clooglibs} -lcloog-isl -lisl\"\n       cloog_org=yes\n       ;;\n-    \"PPL\")\n-      clooginc=\"${clooginc} ${_cloogorginc}\"\n-      clooglibs=\"${clooglibs} -lcloog-ppl\"\n-      cloog_org=yes\n-      ;;\n     *)\n       clooglibs=\n       clooginc=\n@@ -212,25 +152,10 @@ m4_define([_CLOOG_CHECK_CT_PROG],[AC_LANG_PROGRAM(\n     choke me\n    #endif])])\n \n-# _CLOOG_CHECK_RT_PROG ()\n-# -----------------------\n-# Helper for verifying that CLooG's compile time version\n-# matches the run time version.\n-m4_define([_CLOOG_CHECK_RT_PROG],[AC_LANG_PROGRAM(\n-  [#include \"cloog/cloog.h\"],\n-  [if ((cloog_version_major () != CLOOG_VERSION_MAJOR)\n-    && (cloog_version_minor () != CLOOG_VERSION_MINOR)\n-    && (cloog_version_revision () != CLOOG_VERSION_REVISION))\n-    {\n-      return 1;\n-    }])])\n-\n # CLOOG_CHECK_VERSION CLOOG_CHECK_VERSION (MAJOR, MINOR, REVISION)\n # ----------------------------------------------------------------\n # Test the found CLooG to be exact of version MAJOR.MINOR and at least\n # REVISION.\n-# If we're using the old CLooG-PPL (Legacy), the old version check will\n-# be executed (Ignores the provided version information).\n AC_DEFUN([CLOOG_CHECK_VERSION],\n [\n   AC_REQUIRE([CLOOG_FIND_FLAGS])\n@@ -242,21 +167,11 @@ AC_DEFUN([CLOOG_CHECK_VERSION],\n     CFLAGS=\"${_cloog_saved_CFLAGS} ${clooginc} ${pplinc} ${gmpinc}\"\n     LDFLAGS=\"${_cloog_saved_LDFLAGS} ${clooglibs} ${ppllibs}\"\n \n-    if test \"${cloog_org}\" = yes ; then\n-      AC_CACHE_CHECK([for version $1.$2.$3 of CLooG],\n-        [gcc_cv_cloog_ct_0_14_0],\n-        [AC_COMPILE_IFELSE([_CLOOG_CHECK_CT_PROG($1,$2,$3)],\n-          [gcc_cv_cloog_ct_0_14_0=yes],\n-          [gcc_cv_cloog_ct_0_14_0=no])])\n-    elif test \"${cloog_org}\" = no ; then\n-      AC_CACHE_CHECK([for version 0.15.5 (or later revision) of CLooG],\n-        [gcc_cv_cloog_ct_0_15_5],\n-        [AC_COMPILE_IFELSE([_CLOOG_CHECK_CT_PROG(0,15,5)],\n-          [AC_COMPILE_IFELSE([_CLOOG_CHECK_CT_PROG(0,15,9)],\n-           [gcc_cv_cloog_ct_0_15_5=yes],\n-            [gcc_cv_cloog_ct_0_15_5=\"buggy but acceptable\"])],\n-          [gcc_cv_cloog_ct_0_15_5=no])])\n-    fi\n+    AC_CACHE_CHECK([for version $1.$2.$3 of CLooG],\n+      [gcc_cv_cloog],\n+      [AC_COMPILE_IFELSE([_CLOOG_CHECK_CT_PROG($1,$2,$3)],\n+\t[gcc_cv_cloog=yes],\n+\t[gcc_cv_cloog=no])])\n \n     CFLAGS=$_cloog_saved_CFLAGS\n     LDFLAGS=$_cloog_saved_LDFLAGS\n@@ -272,9 +187,7 @@ AC_DEFUN([CLOOG_IF_FAILED],\n [\n   CLOOG_REQUESTED([graphite_requested=yes], [graphite_requested=no])\n   \n-  if test \"${gcc_cv_cloog_ct_0_14_0}\" = no \\\n-    || test \"${gcc_cv_cloog_rt_0_14_0}\" = no \\\n-    || test \"${gcc_cv_cloog_ct_0_15_5}\" = no; then\n+  if test \"${gcc_cv_cloog}\" = no ; then\n     clooglibs=\n     clooginc=\n   fi"}, {"sha": "402e0648a3781a71c910e8db926b4b920acaa055", "filename": "configure", "status": "modified", "additions": 13, "deletions": 165, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6886e4444f193c399b96cb1f64a24b9673cf3149/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6886e4444f193c399b96cb1f64a24b9673cf3149/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=6886e4444f193c399b96cb1f64a24b9673cf3149", "patch": "@@ -777,7 +777,6 @@ enable_ppl_version_check\n with_cloog\n with_cloog_include\n with_cloog_lib\n-enable_cloog_backend\n enable_cloog_version_check\n enable_lto\n enable_stage1_languages\n@@ -1476,9 +1475,6 @@ Optional Features:\n                           build stages 2 and 3 with C++, not C\n   --disable-ppl-version-check\n                           disable check for PPL version\n-  --enable-cloog-backend[=BACKEND]\n-                          set the CLooG BACKEND used to either isl, ppl or\n-                          ppl-legacy (default)\n   --disable-cloog-version-check\n                           disable check for CLooG version\n   --enable-lto            enable link time optimization support\n@@ -5757,19 +5753,6 @@ if test \"${with_cloog_lib+set}\" = set; then :\n fi\n \n \n-  # Check whether --enable-cloog-backend was given.\n-if test \"${enable_cloog_backend+set}\" = set; then :\n-  enableval=$enable_cloog_backend;  if   test \"x${enableval}\" = \"xisl\"; then\n-\tcloog_backend=isl\n-      elif test \"x${enableval}\" = \"xppl\"; then\n-\tcloog_backend=ppl\n-      else\n-\tcloog_backend=ppl-legacy\n-      fi\n-else\n-  cloog_backend=ppl-legacy\n-fi\n-\n   # Check whether --enable-cloog-version-check was given.\n if test \"${enable_cloog_version_check+set}\" = set; then :\n   enableval=$enable_cloog_version_check; ENABLE_CLOOG_CHECK=$enableval\n@@ -5836,54 +5819,19 @@ if test \"x$with_cloog\" != \"xno\"; then\n   _cloog_saved_LDFLAGS=$LDFLAGS\n   _cloog_saved_LIBS=$LIBS\n \n-  _cloogorginc=\"-DCLOOG_INT_GMP -DCLOOG_ORG\"\n+  _cloogorginc=\"-DCLOOG_INT_GMP\"\n \n     CFLAGS=\"${CFLAGS} ${clooginc} ${gmpinc}\"\n   CPPFLAGS=\"${CPPFLAGS} ${_cloogorginc}\"\n   LDFLAGS=\"${LDFLAGS} ${clooglibs}\"\n \n-  case $cloog_backend in\n-    \"ppl-legacy\")\n-    CFLAGS=\"${CFLAGS} ${pplinc}\"\n-    LDFLAGS=\"${LDFLAGS} ${ppllibs}\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for installed CLooG PPL Legacy\" >&5\n-$as_echo_n \"checking for installed CLooG PPL Legacy... \" >&6; }\n-if test \"${gcc_cv_cloog_type+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  LIBS=\"-lcloog ${_cloog_saved_LIBS}\"\n-      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include \"cloog/cloog.h\"\n-int\n-main ()\n-{\n-#ifndef CLOOG_PPL_BACKEND\n-    choke me\n-   #endif\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_link \"$LINENO\"; then :\n-  gcc_cv_cloog_type=\"PPL Legacy\"\n-else\n-  gcc_cv_cloog_type=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext conftest.$ac_ext\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_cloog_type\" >&5\n-$as_echo \"$gcc_cv_cloog_type\" >&6; }\n-    ;;\n-    \"isl\")\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for installed CLooG ISL\" >&5\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for installed CLooG ISL\" >&5\n $as_echo_n \"checking for installed CLooG ISL... \" >&6; }\n if test \"${gcc_cv_cloog_type+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n   LIBS=\"-lcloog-isl ${_cloog_saved_LIBS}\"\n-      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include \"cloog/cloog.h\"\n int\n@@ -5904,59 +5852,13 @@ rm -f core conftest.err conftest.$ac_objext \\\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_cloog_type\" >&5\n $as_echo \"$gcc_cv_cloog_type\" >&6; }\n-    ;;\n-    \"ppl\")\n-    CFLAGS=\"${CFLAGS} ${pplinc}\"\n-    LDFLAGS=\"${LDFLAGS} ${ppllibs}\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for installed CLooG PPL\" >&5\n-$as_echo_n \"checking for installed CLooG PPL... \" >&6; }\n-if test \"${gcc_cv_cloog_type+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  LIBS=\"-lcloog-ppl ${_cloog_saved_LIBS}\"\n-      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include \"cloog/cloog.h\"\n-   #include \"cloog/ppl/cloog.h\"\n-int\n-main ()\n-{\n-cloog_version ()\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_link \"$LINENO\"; then :\n-  gcc_cv_cloog_type=\"PPL\"\n-else\n-  gcc_cv_cloog_type=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext conftest.$ac_ext\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_cloog_type\" >&5\n-$as_echo \"$gcc_cv_cloog_type\" >&6; }\n-    ;;\n-    *)\n-      gcc_cv_cloog_type=\"\"\n-  esac\n \n   case $gcc_cv_cloog_type in\n-    \"PPL Legacy\")\n-      clooginc=\"${clooginc}\"\n-      clooglibs=\"${clooglibs} -lcloog\"\n-      cloog_org=no\n-      ;;\n     \"ISL\")\n       clooginc=\"${clooginc} ${_cloogorginc}\"\n       clooglibs=\"${clooglibs} -lcloog-isl -lisl\"\n       cloog_org=yes\n       ;;\n-    \"PPL\")\n-      clooginc=\"${clooginc} ${_cloogorginc}\"\n-      clooglibs=\"${clooglibs} -lcloog-ppl\"\n-      cloog_org=yes\n-      ;;\n     *)\n       clooglibs=\n       clooginc=\n@@ -5980,40 +5882,9 @@ $as_echo \"$gcc_cv_cloog_type\" >&6; }\n     CFLAGS=\"${_cloog_saved_CFLAGS} ${clooginc} ${pplinc} ${gmpinc}\"\n     LDFLAGS=\"${_cloog_saved_LDFLAGS} ${clooglibs} ${ppllibs}\"\n \n-    if test \"${cloog_org}\" = yes ; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for version 0.16.1 of CLooG\" >&5\n-$as_echo_n \"checking for version 0.16.1 of CLooG... \" >&6; }\n-if test \"${gcc_cv_cloog_ct_0_14_0+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include \"cloog/cloog.h\"\n-int\n-main ()\n-{\n-#if CLOOG_VERSION_MAJOR != 0 \\\n-    || CLOOG_VERSION_MINOR != 16 \\\n-    || CLOOG_VERSION_REVISION < 1\n-    choke me\n-   #endif\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_compile \"$LINENO\"; then :\n-  gcc_cv_cloog_ct_0_14_0=yes\n-else\n-  gcc_cv_cloog_ct_0_14_0=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_cloog_ct_0_14_0\" >&5\n-$as_echo \"$gcc_cv_cloog_ct_0_14_0\" >&6; }\n-    elif test \"${cloog_org}\" = no ; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for version 0.15.5 (or later revision) of CLooG\" >&5\n-$as_echo_n \"checking for version 0.15.5 (or later revision) of CLooG... \" >&6; }\n-if test \"${gcc_cv_cloog_ct_0_15_5+set}\" = set; then :\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for version 0.17.0 of CLooG\" >&5\n+$as_echo_n \"checking for version 0.17.0 of CLooG... \" >&6; }\n+if test \"${gcc_cv_cloog+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -6023,44 +5894,23 @@ int\n main ()\n {\n #if CLOOG_VERSION_MAJOR != 0 \\\n-    || CLOOG_VERSION_MINOR != 15 \\\n-    || CLOOG_VERSION_REVISION < 5\n+    || CLOOG_VERSION_MINOR != 17 \\\n+    || CLOOG_VERSION_REVISION < 0\n     choke me\n    #endif\n   ;\n   return 0;\n }\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include \"cloog/cloog.h\"\n-int\n-main ()\n-{\n-#if CLOOG_VERSION_MAJOR != 0 \\\n-    || CLOOG_VERSION_MINOR != 15 \\\n-    || CLOOG_VERSION_REVISION < 9\n-    choke me\n-   #endif\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_compile \"$LINENO\"; then :\n-  gcc_cv_cloog_ct_0_15_5=yes\n-else\n-  gcc_cv_cloog_ct_0_15_5=\"buggy but acceptable\"\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  gcc_cv_cloog=yes\n else\n-  gcc_cv_cloog_ct_0_15_5=no\n+  gcc_cv_cloog=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_cloog_ct_0_15_5\" >&5\n-$as_echo \"$gcc_cv_cloog_ct_0_15_5\" >&6; }\n-    fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_cloog\" >&5\n+$as_echo \"$gcc_cv_cloog\" >&6; }\n \n     CFLAGS=$_cloog_saved_CFLAGS\n     LDFLAGS=$_cloog_saved_LDFLAGS\n@@ -6084,9 +5934,7 @@ $as_echo \"$gcc_cv_cloog_ct_0_15_5\" >&6; }\n \n \n \n-  if test \"${gcc_cv_cloog_ct_0_14_0}\" = no \\\n-    || test \"${gcc_cv_cloog_rt_0_14_0}\" = no \\\n-    || test \"${gcc_cv_cloog_ct_0_15_5}\" = no; then\n+  if test \"${gcc_cv_cloog}\" = no ; then\n     clooglibs=\n     clooginc=\n   fi"}, {"sha": "8b626145ac72322ba238e0f8f6c02e1f4029ef8d", "filename": "configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6886e4444f193c399b96cb1f64a24b9673cf3149/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6886e4444f193c399b96cb1f64a24b9673cf3149/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=6886e4444f193c399b96cb1f64a24b9673cf3149", "patch": "@@ -1623,7 +1623,7 @@ if test \"x$with_cloog\" != \"xno\"; then\n   dnl\n   dnl If we use CLooG-Legacy, the provided version information is\n   dnl ignored.\n-  CLOOG_CHECK_VERSION(0,16,1)\n+  CLOOG_CHECK_VERSION(0,17,0)\n \n   dnl Only execute fail-action, if CLooG has been requested.\n   CLOOG_IF_FAILED(["}, {"sha": "38663dfd3192bbbe882c4141a90a0b5d839fe9b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6886e4444f193c399b96cb1f64a24b9673cf3149", "patch": "@@ -1,3 +1,70 @@\n+2012-07-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tMerge from graphite branch\n+\t2011-07-21  Tobias Grosser  <tobias@grosser.es>\n+    \n+\t* Makefile.in (graphite-clast-to-gimple.o, graphite-cloog-util.o):\n+\tRemove graphite-cloog-util.h.\n+\t* graphite-clast-to-gimple.c (gcc_type_for_iv_of_clast_loop,\n+\tbuild_iv_mapping, translate_clast_user, translate_clast,\n+\tfree_scattering, initialize_cloog_names, build_cloog_prog,\n+\tcreate_params_index): Do not use old compatibility functions.\n+\t(clast_name_to_index, set_cloog_options): Remove code for legacy cloog.\n+\t* graphite-cloog-util.c (openscop_print_cloog_matrix): Do not use old\n+\tcompatibility functions.\n+\t(new_Cloog_Scattering_from_ppl_Polyhedron): Remove code for legacy\n+\tcloog.\n+\t* graphite-cloog-util.h: Remove include of graphite-cloog-util.h.\n+\t* graphite.c (graphite.c): Do not call outdated cloog_initialize() and\n+\tcloog_finalize().\n+\t* graphite-cloog-compat.h: Remove.\n+\n+\t2011-08-09  Tobias Grosser <tobias@grosser.es>\n+\n+\t* graphite-clast-to-gimple.c (new_clast_name_index): Store a copy\n+\tof the string, no just a reference.\n+\t(clast_name_index): Add a new field, that specifies if we need to free\n+\tthe name.\n+\t(free_clast_name_index): If necessary, free the name string.\n+\t(clast_name_index_elt_info): Calculate the hash based on the string\n+\tcontent, not the memory location it is stored in.\n+\t(clast_name_to_level): Specify that we do not need to free the name.\n+\t(clast_name_to_index): Dito.\n+\t(clast_name_to_lb_ub): Dito.\n+\t(eq_clast_name_indexes): Compare the strings, not their base pointers.\n+\t(free_scattering): Removed.\n+\t(initialize_cloog_names): Renamed to add_names_to_union_domain().\n+\t(add_names_to_union_domain): Changed to work on a union_domain,\n+\tinstead of a CloogNames structure.\n+\t(build_cloog_prog): Removed.\n+\t(build_cloog_union_domain): New.\n+\t(generate_cloog_input): New.\n+\t(scop_to_clast): Use CloogInput instead of CloogProgram.\n+\t(print_generated_program): Adapt to new scop_to_clast() and do not\n+\tprint the CloogProgram any more.\n+\t(create_params_index): Removed, functionality integrated in\n+\tadd_names_to_union_domain().\n+\t(gloog): Adapt to new scop_to_clast().\n+\t* graphite-clast-to-gimple.h (scop_to_clast): Remove.\n+\n+\t2012-01-11  Tobias Grosser <tobias@grosser.es>\n+    \n+\t* graphite-clast-to-gimple.c (clast_name_to_index,\n+\tclast_name_to_lb_ub, clast_name_to_gcc): Change types.\n+\t(clast_to_gcc_expression): Add clast_expr_name as a new\n+\tcase. Do not assume a clast_expr_term points always to a\n+\tclast_expr_name.\n+\t(type_for_clast_term): Do not assume a clast_expr_term points always to\n+\ta clast_expr_name.\n+\t(type_for_clast_name): New.\n+\t(type_for_clast_expr): Add clast_expr_name as a new case.\n+\n+\t2011-08-03  Sebastian Pop <sebpop@gmail.com>\n+\n+\t* graphite-cloog-util.c (new_Cloog_Domain_from_ppl_Polyhedron,\n+\tnew_Cloog_Scattering_from_ppl_Polyhedron,\n+\tnew_Cloog_Domain_from_ppl_Pointset_Powerset): Remove ATTRIBUTE_UNUSED.\n+\n 2012-07-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/53645"}, {"sha": "d97637859b7270876b904417c7aeb12c722e927b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6886e4444f193c399b96cb1f64a24b9673cf3149", "patch": "@@ -2548,9 +2548,9 @@ graphite-clast-to-gimple.o : graphite-clast-to-gimple.c $(CONFIG_H) \\\n    $(SYSTEM_H) coretypes.h $(DIAGNOSTIC_CORE_H) $(TREE_FLOW_H) $(TREE_DUMP_H) \\\n    $(CFGLOOP_H) $(TREE_DATA_REF_H) sese.h graphite-cloog-util.h \\\n    $(GRAPHITE_PPL_H) graphite-poly.h graphite-clast-to-gimple.h \\\n-   graphite-dependences.h graphite-cloog-compat.h\n+   graphite-dependences.h\n graphite-cloog-util.o : graphite-cloog-util.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h graphite-cloog-util.h graphite-cloog-compat.h\n+   coretypes.h graphite-cloog-util.h\n graphite-dependences.o : graphite-dependences.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_FLOW_H) $(TREE_DUMP_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n    sese.h $(GRAPHITE_PPL_H) graphite-poly.h graphite-dependences.h \\"}, {"sha": "b262bee76c9452efb21fafa4b5cbd1e17b70d400", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=6886e4444f193c399b96cb1f64a24b9673cf3149", "patch": "@@ -370,23 +370,12 @@ It can be downloaded from @uref{http://www.cs.unipr.it/ppl/Download/}.\n The @option{--with-ppl} configure option should be used if PPL is not\n installed in your default library search path.\n \n-@item CLooG-PPL version 0.15 or CLooG 0.16\n-\n-Necessary to build GCC with the Graphite loop optimizations.  There\n-are two versions available.  CLooG-PPL 0.15 as well as CLooG 0.16.\n-The former is the default right now.  It can be downloaded from\n-@uref{ftp://gcc.gnu.org/pub/gcc/infrastructure/} as\n-@file{cloog-ppl-0.15.tar.gz}.\n-\n-CLooG 0.16 support is still in testing stage, but will be the\n-default in future GCC releases.  It is also available at\n-@uref{ftp://gcc.gnu.org/pub/gcc/infrastructure/} as\n-@file{cloog-0.16.1.tar.gz}.  To use it add the additional configure\n-option @option{--enable-cloog-backend=isl}.  Even if CLooG 0.16\n-does not use PPL, PPL is still required for Graphite.\n-\n-In both cases @option{--with-cloog} configure option should be used\n-if CLooG is not installed in your default library search path.\n+@item CLooG 0.17.0\n+\n+Necessary to build GCC with the Graphite loop optimizations.  It can be\n+downloaded from @uref{ftp://gcc.gnu.org/pub/gcc/infrastructure/} as\n+@file{cloog-0.17.0.tar.gz}.  The @option{--with-cloog} configure option should\n+be used if CLooG is not installed in your default library search path.\n \n @end table\n "}, {"sha": "9ab746e152b15e7e43ce1c1dd80fe6b25b1f6a2e", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 176, "deletions": 254, "changes": 430, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=6886e4444f193c399b96cb1f64a24b9673cf3149", "patch": "@@ -38,7 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"graphite-poly.h\"\n #include \"graphite-clast-to-gimple.h\"\n #include \"graphite-dependences.h\"\n-#include \"graphite-cloog-compat.h\"\n+\n+typedef const struct clast_expr *clast_name_p;\n \n #ifndef CLOOG_LANGUAGE_C\n #define CLOOG_LANGUAGE_C LANGUAGE_C\n@@ -68,6 +69,9 @@ typedef struct clast_name_index {\n   int level;\n   mpz_t bound_one, bound_two;\n   const char *name;\n+  /* If free_name is set, the content of name was allocated by us and needs\n+     to be freed.  */\n+  char *free_name;\n } *clast_name_index_p;\n \n /* Returns a pointer to a new element of type clast_name_index_p built\n@@ -78,8 +82,11 @@ new_clast_name_index (const char *name, int index, int level,\n \t\t      mpz_t bound_one, mpz_t bound_two)\n {\n   clast_name_index_p res = XNEW (struct clast_name_index);\n+  char *new_name = XNEWVEC (char, strlen (name) + 1);\n+  strcpy (new_name, name);\n \n-  res->name = name;\n+  res->name = new_name;\n+  res->free_name = new_name;\n   res->level = level;\n   res->index = index;\n   mpz_init (res->bound_one);\n@@ -95,6 +102,8 @@ static void\n free_clast_name_index (void *ptr)\n {\n   struct clast_name_index *c = (struct clast_name_index *) ptr;\n+  if (c->free_name)\n+    free (c->free_name);\n   mpz_clear (c->bound_one);\n   mpz_clear (c->bound_two);\n   free (ptr);\n@@ -111,12 +120,9 @@ clast_name_to_level (clast_name_p name, htab_t index_table)\n   struct clast_name_index tmp;\n   PTR *slot;\n \n-#ifdef CLOOG_ORG\n   gcc_assert (name->type == clast_expr_name);\n   tmp.name = ((const struct clast_name *) name)->name;\n-#else\n-  tmp.name = name;\n-#endif\n+  tmp.free_name = NULL;\n \n   slot = htab_find_slot (index_table, &tmp, NO_INSERT);\n \n@@ -131,17 +137,13 @@ clast_name_to_level (clast_name_p name, htab_t index_table)\n    SCATTERING_DIMENSIONS vector.  */\n \n static inline int\n-clast_name_to_index (clast_name_p name, htab_t index_table)\n+clast_name_to_index (struct clast_name *name, htab_t index_table)\n {\n   struct clast_name_index tmp;\n   PTR *slot;\n \n-#ifdef CLOOG_ORG\n-  gcc_assert (name->type == clast_expr_name);\n   tmp.name = ((const struct clast_name *) name)->name;\n-#else\n-  tmp.name = name;\n-#endif\n+  tmp.free_name = NULL;\n \n   slot = htab_find_slot (index_table, &tmp, NO_INSERT);\n \n@@ -156,18 +158,14 @@ clast_name_to_index (clast_name_p name, htab_t index_table)\n    found in the INDEX_TABLE, false otherwise.  */\n \n static inline bool\n-clast_name_to_lb_ub (clast_name_p name, htab_t index_table, mpz_t bound_one,\n-\t\t     mpz_t bound_two)\n+clast_name_to_lb_ub (struct clast_name *name, htab_t index_table,\n+\t\t     mpz_t bound_one, mpz_t bound_two)\n {\n   struct clast_name_index tmp;\n   PTR *slot;\n \n-#ifdef CLOOG_ORG\n-  gcc_assert (name->type == clast_expr_name);\n-  tmp.name = ((const struct clast_name *) name)->name;\n-#else\n-  tmp.name = name;\n-#endif\n+  tmp.name = name->name;\n+  tmp.free_name = NULL;\n \n   slot = htab_find_slot (index_table, &tmp, NO_INSERT);\n \n@@ -191,6 +189,7 @@ save_clast_name_index (htab_t index_table, const char *name,\n   PTR *slot;\n \n   tmp.name = name;\n+  tmp.free_name = NULL;\n   slot = htab_find_slot (index_table, &tmp, INSERT);\n \n   if (slot)\n@@ -206,7 +205,16 @@ save_clast_name_index (htab_t index_table, const char *name,\n static inline hashval_t\n clast_name_index_elt_info (const void *elt)\n {\n-  return htab_hash_pointer (((const struct clast_name_index *) elt)->name);\n+  const struct clast_name_index *e = ((const struct clast_name_index *) elt);\n+  hashval_t hash = 0;\n+\n+  int length = strlen (e->name);\n+  int i;\n+\n+  for (i = 0; i < length; ++i)\n+    hash = hash | (e->name[i] << (i % 4));\n+\n+  return hash;\n }\n \n /* Compares database elements E1 and E2.  */\n@@ -217,7 +225,7 @@ eq_clast_name_indexes (const void *e1, const void *e2)\n   const struct clast_name_index *elt1 = (const struct clast_name_index *) e1;\n   const struct clast_name_index *elt2 = (const struct clast_name_index *) e2;\n \n-  return (elt1->name == elt2->name);\n+  return strcmp (elt1->name, elt2->name) == 0;\n }\n \n \f\n@@ -238,7 +246,7 @@ typedef struct ivs_params {\n    Cloog representation.  */\n \n static tree\n-clast_name_to_gcc (clast_name_p name, ivs_params_p ip)\n+clast_name_to_gcc (struct clast_name *name, ivs_params_p ip)\n {\n   int index;\n \n@@ -334,6 +342,10 @@ clast_to_gcc_expression (tree type, struct clast_expr *e, ivs_params_p ip)\n {\n   switch (e->type)\n     {\n+    case clast_expr_name:\n+      {\n+\treturn clast_name_to_gcc ((struct clast_name *) e, ip);\n+      }\n     case clast_expr_term:\n       {\n \tstruct clast_term *t = (struct clast_term *) e;\n@@ -342,7 +354,7 @@ clast_to_gcc_expression (tree type, struct clast_expr *e, ivs_params_p ip)\n \t  {\n \t    if (mpz_cmp_si (t->val, 1) == 0)\n \t      {\n-\t\ttree name = clast_name_to_gcc (t->var, ip);\n+\t\ttree name = clast_to_gcc_expression (type, t->var, ip);\n \n \t\tif (POINTER_TYPE_P (TREE_TYPE (name)) != POINTER_TYPE_P (type))\n \t\t  name = convert_to_ptrofftype (name);\n@@ -353,7 +365,7 @@ clast_to_gcc_expression (tree type, struct clast_expr *e, ivs_params_p ip)\n \n \t    else if (mpz_cmp_si (t->val, -1) == 0)\n \t      {\n-\t\ttree name = clast_name_to_gcc (t->var, ip);\n+\t\ttree name = clast_to_gcc_expression (type, t->var, ip);\n \n \t\tif (POINTER_TYPE_P (TREE_TYPE (name)) != POINTER_TYPE_P (type))\n \t\t  name = convert_to_ptrofftype (name);\n@@ -364,7 +376,7 @@ clast_to_gcc_expression (tree type, struct clast_expr *e, ivs_params_p ip)\n \t      }\n \t    else\n \t      {\n-\t\ttree name = clast_name_to_gcc (t->var, ip);\n+\t\ttree name = clast_to_gcc_expression (type, t->var, ip);\n \t\ttree cst = gmp_cst_to_tree (type, t->val);\n \n \t\tif (POINTER_TYPE_P (TREE_TYPE (name)) != POINTER_TYPE_P (type))\n@@ -493,45 +505,34 @@ type_for_value (mpz_t val)\n   return type_for_interval (val, val);\n }\n \n+static tree\n+type_for_clast_expr (struct clast_expr *, ivs_params_p, mpz_t, mpz_t);\n+\n /* Return the type for the clast_term T.  Initializes BOUND_ONE and\n    BOUND_TWO to the bounds of the term.  */\n \n static tree\n type_for_clast_term (struct clast_term *t, ivs_params_p ip, mpz_t bound_one,\n \t\t     mpz_t bound_two)\n {\n-  clast_name_p name = t->var;\n-  bool found = false;\n-\n+  tree type;\n   gcc_assert (t->expr.type == clast_expr_term);\n \n-  if (!name)\n+  if (!t->var)\n     {\n       mpz_set (bound_one, t->val);\n       mpz_set (bound_two, t->val);\n       return type_for_value (t->val);\n     }\n \n-  if (ip->params && ip->params_index)\n-    found = clast_name_to_lb_ub (name, ip->params_index, bound_one, bound_two);\n-\n-  if (!found)\n-    {\n-      gcc_assert (*(ip->newivs) && ip->newivs_index);\n-      found = clast_name_to_lb_ub (name, ip->newivs_index,\n-\t\t\t\t   bound_one, bound_two);\n-      gcc_assert (found);\n-    }\n+  type = type_for_clast_expr (t->var, ip, bound_one, bound_two);\n \n   mpz_mul (bound_one, bound_one, t->val);\n   mpz_mul (bound_two, bound_two, t->val);\n \n-  return TREE_TYPE (clast_name_to_gcc (name, ip));\n+  return max_precision_type (type, type_for_interval (bound_one, bound_two));\n }\n \n-static tree\n-type_for_clast_expr (struct clast_expr *, ivs_params_p, mpz_t, mpz_t);\n-\n /* Return the type for the clast_reduction R.  Initializes BOUND_ONE\n    and BOUND_TWO to the bounds of the reduction expression.  */\n \n@@ -639,6 +640,29 @@ type_for_clast_bin (struct clast_binary *b, ivs_params_p ip, mpz_t bound_one,\n   return max_precision_type (type, type_for_interval (bound_one, bound_two));\n }\n \n+/* Return the type for the clast_name NAME.  Initializes BOUND_ONE and\n+   BOUND_TWO to the bounds of the term.  */\n+\n+static tree\n+type_for_clast_name (struct clast_name *name, ivs_params_p ip, mpz_t bound_one,\n+\t\t     mpz_t bound_two)\n+{\n+  bool found = false;\n+\n+  if (ip->params && ip->params_index)\n+    found = clast_name_to_lb_ub (name, ip->params_index, bound_one, bound_two);\n+\n+  if (!found)\n+    {\n+      gcc_assert (*(ip->newivs) && ip->newivs_index);\n+      found = clast_name_to_lb_ub (name, ip->newivs_index, bound_one,\n+\t\t\t\t   bound_two);\n+      gcc_assert (found);\n+    }\n+\n+    return TREE_TYPE (clast_name_to_gcc (name, ip));\n+}\n+\n /* Returns the type for the CLAST expression E when used in statement\n    STMT.  */\n \n@@ -660,6 +684,10 @@ type_for_clast_expr (struct clast_expr *e, ivs_params_p ip, mpz_t bound_one,\n       return type_for_clast_bin ((struct clast_binary *) e, ip,\n \t\t\t\t bound_one, bound_two);\n \n+    case clast_expr_name:\n+      return type_for_clast_name ((struct clast_name *) e, ip,\n+\t\t\t\t bound_one, bound_two);\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -869,7 +897,7 @@ graphite_create_new_loop (edge entry_edge, struct clast_for *stmt,\n \n   struct clast_user_stmt *body\n     = clast_get_body_of_loop ((struct clast_stmt *) stmt);\n-  poly_bb_p pbb = (poly_bb_p) cloog_statement_usr (body->statement);\n+  poly_bb_p pbb = (poly_bb_p) body->statement->usr;\n \n   tree stride = gmp_cst_to_tree (type, stmt->stride);\n   tree ivvar = create_tmp_var (type, \"graphite_IV\");\n@@ -901,7 +929,7 @@ build_iv_mapping (VEC (tree, heap) *iv_map, struct clast_user_stmt *user_stmt,\n   struct clast_stmt *t;\n   int depth = 0;\n   CloogStatement *cs = user_stmt->statement;\n-  poly_bb_p pbb = (poly_bb_p) cloog_statement_usr (cs);\n+  poly_bb_p pbb = (poly_bb_p) cs->usr;\n   gimple_bb_p gbb = PBB_BLACK_BOX (pbb);\n   mpz_t bound_one, bound_two;\n \n@@ -1018,7 +1046,7 @@ translate_clast_user (struct clast_user_stmt *stmt, edge next_e,\n {\n   int i, nb_loops;\n   basic_block new_bb;\n-  poly_bb_p pbb = (poly_bb_p) cloog_statement_usr (stmt->statement);\n+  poly_bb_p pbb = (poly_bb_p) stmt->statement->usr;\n   gimple_bb_p gbb = PBB_BLACK_BOX (pbb);\n   VEC (tree, heap) *iv_map;\n \n@@ -1240,81 +1268,69 @@ translate_clast (loop_p context_loop, struct clast_stmt *stmt, edge next_e,\n \t\t\t  level, ip);\n }\n \n-/* Free the SCATTERING domain list.  */\n+/* Add parameter and iterator names to the CloogUnionDomain.  */\n \n-static void\n-free_scattering (CloogScatteringList *scattering)\n-{\n-  while (scattering)\n-    {\n-      CloogScattering *dom = cloog_scattering (scattering);\n-      CloogScatteringList *next = cloog_next_scattering (scattering);\n-\n-      cloog_scattering_free (dom);\n-      free (scattering);\n-      scattering = next;\n-    }\n-}\n-\n-/* Initialize Cloog's parameter names from the names used in GIMPLE.\n-   Initialize Cloog's iterator names, using 'graphite_iterator_%d'\n-   from 0 to scop_nb_loops (scop).  */\n-\n-static void\n-initialize_cloog_names (scop_p scop, CloogProgram *prog)\n+static CloogUnionDomain *\n+add_names_to_union_domain (scop_p scop, CloogUnionDomain *union_domain,\n+\t\t\t   int nb_scattering_dims, htab_t params_index)\n {\n   sese region = SCOP_REGION (scop);\n   int i;\n   int nb_iterators = scop_max_loop_depth (scop);\n-  int nb_scattering = cloog_program_nb_scattdims (prog);\n   int nb_parameters = VEC_length (tree, SESE_PARAMS (region));\n-  char **iterators = XNEWVEC (char *, nb_iterators * 2);\n-  char **scattering = XNEWVEC (char *, nb_scattering);\n-  char **parameters= XNEWVEC (char *, nb_parameters);\n+  mpz_t bound_one, bound_two;\n \n-  cloog_program_set_names (prog, cloog_names_malloc ());\n+  mpz_init (bound_one);\n+  mpz_init (bound_two);\n \n   for (i = 0; i < nb_parameters; i++)\n     {\n       tree param = VEC_index (tree, SESE_PARAMS (region), i);\n       const char *name = get_name (param);\n       int len;\n+      char *parameter;\n \n       if (!name)\n \tname = \"T\";\n \n       len = strlen (name);\n       len += 17;\n-      parameters[i] = XNEWVEC (char, len + 1);\n-      snprintf (parameters[i], len, \"%s_%d\", name, SSA_NAME_VERSION (param));\n+      parameter = XNEWVEC (char, len + 1);\n+      snprintf (parameter, len, \"%s_%d\", name, SSA_NAME_VERSION (param));\n+      save_clast_name_index (params_index, parameter, i, i, bound_one,\n+\t\t\t     bound_two);\n+      union_domain = cloog_union_domain_set_name (union_domain, CLOOG_PARAM, i,\n+\t\t\t\t\t\t  parameter);\n+      compute_bounds_for_param (scop, i, bound_one, bound_two);\n+      free (parameter);\n     }\n \n-  cloog_names_set_nb_parameters (cloog_program_names (prog), nb_parameters);\n-  cloog_names_set_parameters (cloog_program_names (prog), parameters);\n+  mpz_clear (bound_one);\n+  mpz_clear (bound_two);\n \n   for (i = 0; i < nb_iterators; i++)\n     {\n       int len = 4 + 16;\n-      iterators[i] = XNEWVEC (char, len);\n-      snprintf (iterators[i], len, \"git_%d\", i);\n+      char *iterator;\n+      iterator = XNEWVEC (char, len);\n+      snprintf (iterator, len, \"git_%d\", i);\n+      union_domain = cloog_union_domain_set_name (union_domain, CLOOG_ITER, i,\n+\t\t\t\t\t\t  iterator);\n+      free (iterator);\n     }\n \n-  cloog_names_set_nb_iterators (cloog_program_names (prog),\n-\t\t\t\tnb_iterators);\n-  cloog_names_set_iterators (cloog_program_names (prog),\n-\t\t\t     iterators);\n-\n-  for (i = 0; i < nb_scattering; i++)\n+  for (i = 0; i < nb_scattering_dims; i++)\n     {\n       int len = 5 + 16;\n-      scattering[i] = XNEWVEC (char, len);\n-      snprintf (scattering[i], len, \"scat_%d\", i);\n+      char *scattering;\n+      scattering = XNEWVEC (char, len);\n+      snprintf (scattering, len, \"scat_%d\", i);\n+      union_domain = cloog_union_domain_set_name (union_domain, CLOOG_SCAT, i,\n+\t\t\t\t\t\t  scattering);\n+      free (scattering);\n     }\n \n-  cloog_names_set_nb_scattering (cloog_program_names (prog),\n-\t\t\t\t nb_scattering);\n-  cloog_names_set_scattering (cloog_program_names (prog),\n-\t\t\t      scattering);\n+  return union_domain;\n }\n \n /* Initialize a CLooG input file.  */\n@@ -1342,129 +1358,40 @@ init_cloog_input_file (int scop_number)\n   return graphite_out_file;\n }\n \n-/* Build cloog program for SCoP.  */\n+/* Build cloog union domain for SCoP.  */\n \n-static void\n-build_cloog_prog (scop_p scop, CloogProgram *prog,\n-                  CloogOptions *options)\n+static CloogUnionDomain *\n+build_cloog_union_domain (scop_p scop)\n {\n   int i;\n-  int max_nb_loops = scop_max_loop_depth (scop);\n   poly_bb_p pbb;\n-  CloogLoop *loop_list = NULL;\n-  CloogBlockList *block_list = NULL;\n-  CloogScatteringList *scattering = NULL;\n-  int nbs = 2 * max_nb_loops + 1;\n-  int *scaldims;\n-\n-  cloog_program_set_context\n-    (prog, new_Cloog_Domain_from_ppl_Pointset_Powerset (SCOP_CONTEXT (scop),\n-      scop_nb_params (scop), cloog_state));\n-  nbs = unify_scattering_dimensions (scop);\n-  scaldims = (int *) xmalloc (nbs * (sizeof (int)));\n-  cloog_program_set_nb_scattdims (prog, nbs);\n-  initialize_cloog_names (scop, prog);\n+\n+  CloogUnionDomain *union_domain =\n+    cloog_union_domain_alloc (scop_nb_params (scop));\n \n   FOR_EACH_VEC_ELT (poly_bb_p, SCOP_BBS (scop), i, pbb)\n     {\n-      CloogStatement *stmt;\n-      CloogBlock *block;\n-      CloogDomain *dom;\n+      CloogDomain *domain;\n+      CloogScattering *scattering;\n \n       /* Dead code elimination: when the domain of a PBB is empty,\n \t don't generate code for the PBB.  */\n       if (ppl_Pointset_Powerset_C_Polyhedron_is_empty (PBB_DOMAIN (pbb)))\n \tcontinue;\n \n-      /* Build the new statement and its block.  */\n-      stmt = cloog_statement_alloc (cloog_state, pbb_index (pbb));\n-      dom = new_Cloog_Domain_from_ppl_Pointset_Powerset (PBB_DOMAIN (pbb),\n-                                                         scop_nb_params (scop),\n-                                                         cloog_state);\n-      block = cloog_block_alloc (stmt, 0, NULL, pbb_dim_iter_domain (pbb));\n-      cloog_statement_set_usr (stmt, pbb);\n-\n-      /* Build loop list.  */\n-      {\n-        CloogLoop *new_loop_list = cloog_loop_malloc (cloog_state);\n-        cloog_loop_set_next (new_loop_list, loop_list);\n-        cloog_loop_set_domain (new_loop_list, dom);\n-        cloog_loop_set_block (new_loop_list, block);\n-        loop_list = new_loop_list;\n-      }\n-\n-      /* Build block list.  */\n-      {\n-        CloogBlockList *new_block_list = cloog_block_list_malloc ();\n+      domain = new_Cloog_Domain_from_ppl_Pointset_Powerset (PBB_DOMAIN (pbb),\n+\t\t\t\t\t\t\t    scop_nb_params (scop),\n+\t\t\t\t\t\t\t    cloog_state);\n \n-        cloog_block_list_set_next (new_block_list, block_list);\n-        cloog_block_list_set_block (new_block_list, block);\n-        block_list = new_block_list;\n-      }\n+      scattering = new_Cloog_Scattering_from_ppl_Polyhedron\n+\t(PBB_TRANSFORMED_SCATTERING (pbb), scop_nb_params (scop),\n+\t pbb_nb_scattering_transform (pbb), cloog_state);\n \n-      /* Build scattering list.  */\n-      {\n-        /* XXX: Replace with cloog_domain_list_alloc(), when available.  */\n-        CloogScatteringList *new_scattering\n-\t  = (CloogScatteringList *) xmalloc (sizeof (CloogScatteringList));\n-        ppl_Polyhedron_t scat;\n-\tCloogScattering *dom;\n-\n-\tscat = PBB_TRANSFORMED_SCATTERING (pbb);\n-        dom = new_Cloog_Scattering_from_ppl_Polyhedron\n-          (scat, scop_nb_params (scop), pbb_nb_scattering_transform (pbb),\n-           cloog_state);\n-\n-        cloog_set_next_scattering (new_scattering, scattering);\n-        cloog_set_scattering (new_scattering, dom);\n-        scattering = new_scattering;\n-      }\n+      union_domain = cloog_union_domain_add_domain (union_domain, \"\", domain,\n+\t\t\t\t\t\t    scattering, pbb);\n     }\n \n-  cloog_program_set_loop (prog, loop_list);\n-  cloog_program_set_blocklist (prog, block_list);\n-\n-  for (i = 0; i < nbs; i++)\n-    scaldims[i] = 0 ;\n-\n-  cloog_program_set_scaldims (prog, scaldims);\n-\n-  /* Extract scalar dimensions to simplify the code generation problem.  */\n-  cloog_program_extract_scalars (prog, scattering, options);\n-\n-  /* Dump a .cloog input file, if requested.  This feature is only\n-     enabled in the Graphite branch.  */\n-  if (0)\n-    {\n-      static size_t file_scop_number = 0;\n-      FILE *cloog_file = init_cloog_input_file (file_scop_number);\n-\n-      cloog_program_dump_cloog (cloog_file, prog, scattering);\n-      ++file_scop_number;\n-    }\n-\n-  /* Apply scattering.  */\n-  cloog_program_scatter (prog, scattering, options);\n-  free_scattering (scattering);\n-\n-  /* Iterators corresponding to scalar dimensions have to be extracted.  */\n-  cloog_names_scalarize (cloog_program_names (prog), nbs,\n-\t\t\t cloog_program_scaldims (prog));\n-\n-  /* Free blocklist.  */\n-  {\n-    CloogBlockList *next = cloog_program_blocklist (prog);\n-\n-    while (next)\n-      {\n-        CloogBlockList *toDelete = next;\n-        next = cloog_block_list_next (next);\n-        cloog_block_list_set_next (toDelete, NULL);\n-        cloog_block_list_set_block (toDelete, NULL);\n-        cloog_block_list_free (toDelete);\n-      }\n-    cloog_program_set_blocklist (prog, NULL);\n-  }\n+  return union_domain;\n }\n \n /* Return the options that will be used in GLOOG.  */\n@@ -1485,14 +1412,8 @@ set_cloog_options (void)\n      GLooG.  */\n   options->esp = 1;\n \n-#ifdef CLOOG_ORG\n   /* Silence CLooG to avoid failing tests due to debug output to stderr.  */\n   options->quiet = 1;\n-#else\n-  /* Enable C pretty-printing mode: normalizes the substitution\n-     equations for statements.  */\n-  options->cpp = 1;\n-#endif\n \n   /* Allow cloog to build strides with a stride width different to one.\n      This example has stride = 4:\n@@ -1535,24 +1456,52 @@ debug_clast_stmt (struct clast_stmt *stmt)\n   print_clast_stmt (stderr, stmt);\n }\n \n+static CloogInput *\n+generate_cloog_input (scop_p scop, htab_t params_index)\n+{\n+  CloogUnionDomain *union_domain;\n+  CloogInput *cloog_input;\n+  CloogDomain *context;\n+\n+  int nb_scattering_dims = unify_scattering_dimensions (scop);\n+  union_domain = build_cloog_union_domain (scop);\n+  union_domain = add_names_to_union_domain (scop, union_domain,\n+\t\t\t\t\t    nb_scattering_dims,\n+\t\t\t\t\t    params_index);\n+  context = new_Cloog_Domain_from_ppl_Pointset_Powerset\n+    (SCOP_CONTEXT (scop), scop_nb_params (scop), cloog_state);\n+\n+  cloog_input = cloog_input_alloc (context, union_domain);\n+\n+  return cloog_input;\n+}\n+\n /* Translate SCOP to a CLooG program and clast.  These two\n    representations should be freed together: a clast cannot be used\n    without a program.  */\n \n-cloog_prog_clast\n-scop_to_clast (scop_p scop)\n+static struct clast_stmt *\n+scop_to_clast (scop_p scop, htab_t params_index)\n {\n+  CloogInput *cloog_input;\n+  struct clast_stmt *clast;\n   CloogOptions *options = set_cloog_options ();\n-  cloog_prog_clast pc;\n \n-  /* Connect new cloog prog generation to graphite.  */\n-  pc.prog = cloog_program_malloc ();\n-  build_cloog_prog (scop, pc.prog, options);\n-  pc.prog = cloog_program_generate (pc.prog, options);\n-  pc.stmt = cloog_clast_create (pc.prog, options);\n+  cloog_input = generate_cloog_input (scop, params_index);\n+\n+  /* Dump a .cloog input file, if requested.  This feature is only\n+     enabled in the Graphite branch.  */\n+  if (0)\n+  {\n+    static size_t file_scop_number = 0;\n+    FILE *cloog_file = init_cloog_input_file (file_scop_number);\n+    cloog_input_dump_cloog (cloog_file, cloog_input, options);\n+  }\n+\n+  clast = cloog_clast_create_from_input (cloog_input, options);\n \n   cloog_options_free (options);\n-  return pc;\n+  return clast;\n }\n \n /* Prints to FILE the code generated by CLooG for SCOP.  */\n@@ -1561,20 +1510,20 @@ void\n print_generated_program (FILE *file, scop_p scop)\n {\n   CloogOptions *options = set_cloog_options ();\n+  htab_t params_index;\n+  struct clast_stmt *clast;\n \n-  cloog_prog_clast pc = scop_to_clast (scop);\n+  params_index = htab_create (10, clast_name_index_elt_info,\n+            eq_clast_name_indexes, free_clast_name_index);\n \n-  fprintf (file, \"       (prog: \\n\");\n-  cloog_program_print (file, pc.prog);\n-  fprintf (file, \"       )\\n\");\n+  clast = scop_to_clast (scop, params_index);\n \n   fprintf (file, \"       (clast: \\n\");\n-  clast_pprint (file, pc.stmt, 0, options);\n+  clast_pprint (file, clast, 0, options);\n   fprintf (file, \"       )\\n\");\n \n   cloog_options_free (options);\n-  cloog_clast_free (pc.stmt);\n-  cloog_program_free (pc.prog);\n+  cloog_clast_free (clast);\n }\n \n /* Prints to STDERR the code generated by CLooG for SCOP.  */\n@@ -1585,31 +1534,6 @@ debug_generated_program (scop_p scop)\n   print_generated_program (stderr, scop);\n }\n \n-/* Add CLooG names to parameter index.  The index is used to translate\n-   back from CLooG names to GCC trees.  */\n-\n-static void\n-create_params_index (scop_p scop, htab_t index_table, CloogProgram *prog) {\n-  CloogNames* names = cloog_program_names (prog);\n-  int nb_parameters = cloog_names_nb_parameters (names);\n-  char **parameters = cloog_names_parameters (names);\n-  int i;\n-  mpz_t bound_one, bound_two;\n-\n-  mpz_init (bound_one);\n-  mpz_init (bound_two);\n-\n-  for (i = 0; i < nb_parameters; i++)\n-    {\n-      compute_bounds_for_param (scop, i, bound_one, bound_two);\n-      save_clast_name_index (index_table, parameters[i], i, i,\n-\t\t\t     bound_one, bound_two);\n-    }\n-\n-  mpz_clear (bound_one);\n-  mpz_clear (bound_two);\n-}\n-\n /* GIMPLE Loop Generator: generates loops from STMT in GIMPLE form for\n    the given SCOP.  Return true if code generation succeeded.\n    BB_PBB_MAPPING is a basic_block and it's related poly_bb_p mapping.\n@@ -1623,18 +1547,21 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n   sese region = SCOP_REGION (scop);\n   ifsese if_region = NULL;\n   htab_t newivs_index, params_index;\n-  cloog_prog_clast pc;\n+  struct clast_stmt *clast;\n   struct ivs_params ip;\n \n   timevar_push (TV_GRAPHITE_CODE_GEN);\n   gloog_error = false;\n \n-  pc = scop_to_clast (scop);\n+  params_index = htab_create (10, clast_name_index_elt_info,\n+\t\t\t      eq_clast_name_indexes, free_clast_name_index);\n+\n+  clast = scop_to_clast (scop, params_index);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"\\nCLAST generated by CLooG: \\n\");\n-      print_clast_stmt (dump_file, pc.stmt);\n+      print_clast_stmt (dump_file, clast);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -1652,18 +1579,14 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n   context_loop = SESE_ENTRY (region)->src->loop_father;\n   newivs_index = htab_create (10, clast_name_index_elt_info,\n \t\t\t      eq_clast_name_indexes, free_clast_name_index);\n-  params_index = htab_create (10, clast_name_index_elt_info,\n-\t\t\t      eq_clast_name_indexes, free_clast_name_index);\n-\n-  create_params_index (scop, params_index, pc.prog);\n \n   ip.newivs = &newivs;\n   ip.newivs_index = newivs_index;\n   ip.params = SESE_PARAMS (region);\n   ip.params_index = params_index;\n   ip.region = region;\n \n-  translate_clast (context_loop, pc.stmt, if_region->true_region->entry,\n+  translate_clast (context_loop, clast, if_region->true_region->entry,\n \t\t   bb_pbb_mapping, 0, &ip);\n   graphite_verify ();\n   scev_reset ();\n@@ -1680,8 +1603,7 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n   htab_delete (newivs_index);\n   htab_delete (params_index);\n   VEC_free (tree, heap, newivs);\n-  cloog_clast_free (pc.stmt);\n-  cloog_program_free (pc.prog);\n+  cloog_clast_free (clast);\n   timevar_pop (TV_GRAPHITE_CODE_GEN);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "c82bb6a53b2e44cb2e128bf67f645a3898bf58e0", "filename": "gcc/graphite-clast-to-gimple.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2Fgraphite-clast-to-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2Fgraphite-clast-to-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.h?ref=6886e4444f193c399b96cb1f64a24b9673cf3149", "patch": "@@ -41,7 +41,6 @@ typedef struct bb_pbb_def\n } bb_pbb_def;\n \n extern bool gloog (scop_p, htab_t);\n-extern cloog_prog_clast scop_to_clast (scop_p);\n extern void debug_clast_stmt (struct clast_stmt *);\n extern void print_clast_stmt (FILE *, struct clast_stmt *);\n "}, {"sha": "011377de8f5aedc46776db4064d736e1e5df8df6", "filename": "gcc/graphite-cloog-compat.h", "status": "removed", "additions": 0, "deletions": 275, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2d9792c3f82deda505cf34d43cbb5997a55f6/gcc%2Fgraphite-cloog-compat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2d9792c3f82deda505cf34d43cbb5997a55f6/gcc%2Fgraphite-cloog-compat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-cloog-compat.h?ref=8df2d9792c3f82deda505cf34d43cbb5997a55f6", "patch": "@@ -1,275 +0,0 @@\n-/* Compatibility layer for using upstream CLooG versions with\n-   CLooG legacy code.\n-   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n-   Contributed by Andreas Simbuerger <simbuerg@fim.uni-passau.de>.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifndef GRAPHITE_CLOOG_COMPAT_H\n-#define GRAPHITE_CLOOG_COMPAT_H\n-\n-/* Restore compatibility to CLooG Legacy.  */\n-#ifdef CLOOG_ORG\n-typedef const struct clast_expr *clast_name_p;\n-#else\n-typedef const char *clast_name_p;\n-#endif\n-\n-#ifdef CLOOG_ORG\n-#define cloog_initialize()\n-#define cloog_finalize()\n-#endif\n-\n-#ifndef CLOOG_ORG\n-\n-/* CloogOptions compatibility.  */\n-#define build_cloog_prog(SCOP, PROG, OPT)\\\n-  build_cloog_prog (SCOP, PROG)\n-#define cloog_program_extract_scalars(PROG, SCATT, OPT)\\\n-  cloog_program_extract_scalars (PROG, SCATT)\n-#define cloog_program_scatter(PROG, SCATT, OPT)\\\n-  cloog_program_scatter (PROG, SCATT)\n-\n-/* CLAST compatibility.  */\n-#define clast_expr_term expr_term\n-#define clast_expr_red expr_red\n-#define clast_expr_bin expr_bin\n-#define clast_pprint pprint\n-\n-/* CloogState compatibility.  */\n-#define CloogState void\n-#define cloog_state_malloc() NULL\n-#define cloog_state_free(STATE)\n-#define cloog_loop_malloc(STATE) cloog_loop_malloc ()\n-#define cloog_options_malloc(STATE) cloog_options_malloc ()\n-#define cloog_statement_alloc(STATE, INDEX) cloog_statement_alloc (INDEX)\n-#define new_Cloog_Domain_from_ppl_Pointset_Powerset(PSPS, NB, STATE)\\\n-  new_Cloog_Domain_from_ppl_Pointset_Powerset (PSPS)\n-#define new_Cloog_Domain_from_ppl_Polyhedron(POLY, NB, STATE)\\\n-  new_Cloog_Domain_from_ppl_Polyhedron (POLY)\n-#define cloog_domain_from_cloog_matrix(STATE, MAT, NB)\\\n-  cloog_domain_matrix2domain (MAT)\n-\n-/* CloogScatteringList compatibility.  */\n-#define CloogScatteringList CloogDomainList\n-#define CloogScattering CloogDomain\n-#define cloog_set_next_scattering cloog_set_next_domain\n-#define cloog_set_scattering cloog_set_domain\n-#define cloog_scattering cloog_domain\n-#define cloog_next_scattering cloog_next_domain\n-#define cloog_scattering_free cloog_domain_free\n-#define cloog_program_dump_cloog(DUMPFILE, PROGRAM, SCATTERINGLIST)\\\n-  cloog_program_dump_cloog (DUMPFILE, PROGRAM)\n-\n-#endif\n-\n-/* Adapt CLooG accessors from CLooG legacy to\n-   newer CLooG versions.  */\n-\n-#ifdef CLOOG_ORG\n-\n-static inline void *\n-cloog_statement_usr (CloogStatement *cs)\n-{\n-  return cs->usr;\n-}\n-\n-static inline CloogScattering *\n-cloog_scattering (CloogScatteringList *sl)\n-{\n-  return sl->scatt;\n-}\n-\n-static inline void\n-cloog_set_scattering (CloogScatteringList *sl, CloogScattering *scatt)\n-{\n-  sl->scatt = scatt;\n-}\n-\n-static inline CloogScatteringList *\n-cloog_next_scattering (CloogScatteringList *sl)\n-{\n-  return sl->next;\n-}\n-\n-static inline void\n-cloog_set_next_scattering (CloogScatteringList *sl, CloogScatteringList *next)\n-{\n-  sl->next = next;\n-}\n-\n-static inline int\n-cloog_program_nb_scattdims (CloogProgram *prog)\n-{\n-  return prog->nb_scattdims;\n-}\n-\n-static inline void\n-cloog_program_set_nb_scattdims (CloogProgram *prog, int nb_scattdims)\n-{\n-  prog->nb_scattdims = nb_scattdims;\n-}\n-\n-static inline CloogNames *\n-cloog_program_names (CloogProgram *prog)\n-{\n-  return prog->names;\n-}\n-\n-static inline void\n-cloog_program_set_names (CloogProgram *prog, CloogNames *names)\n-{\n-  prog->names = names;\n-}\n-\n-static inline void\n-cloog_program_set_context (CloogProgram *prog, CloogDomain *domain)\n-{\n-  prog->context = domain;\n-}\n-\n-static inline void\n-cloog_program_set_loop (CloogProgram *prog, CloogLoop *loop)\n-{\n-  prog->loop = loop;\n-}\n-\n-static inline CloogBlockList *\n-cloog_program_blocklist (CloogProgram *prog)\n-{\n-  return prog->blocklist;\n-}\n-\n-static inline void\n-cloog_program_set_blocklist (CloogProgram *prog, CloogBlockList *bl)\n-{\n-  prog->blocklist = bl;\n-}\n-\n-static inline int *\n-cloog_program_scaldims (CloogProgram *prog)\n-{\n-  return prog->scaldims;\n-}\n-\n-static inline void\n-cloog_program_set_scaldims (CloogProgram *prog, int *s)\n-{\n-  prog->scaldims = s;\n-}\n-\n-static inline int\n-cloog_names_nb_parameters (CloogNames *names)\n-{\n-  return names->nb_parameters;\n-}\n-\n-static inline void\n-cloog_names_set_nb_parameters (CloogNames *names, int nb_parameters)\n-{\n-  names->nb_parameters = nb_parameters;\n-}\n-\n-static inline char **\n-cloog_names_parameters (CloogNames *names)\n-{\n-  return names->parameters;\n-}\n-\n-static inline void\n-cloog_names_set_parameters (CloogNames *names, char **parameters)\n-{\n-  names->parameters = parameters;\n-}\n-\n-static inline void\n-cloog_names_set_nb_iterators (CloogNames *names, int nb_iterators)\n-{\n-  names->nb_iterators = nb_iterators;\n-}\n-\n-static inline void\n-cloog_names_set_iterators (CloogNames *names, char **iterators)\n-{\n-  names->iterators = iterators;\n-}\n-\n-static inline void\n-cloog_names_set_nb_scattering (CloogNames *names, int nb_scattering)\n-{\n-  names->nb_scattering = nb_scattering;\n-}\n-\n-static inline void\n-cloog_names_set_scattering (CloogNames *names, char **scattering)\n-{\n-  names->scattering = scattering;\n-}\n-\n-static inline void\n-cloog_statement_set_usr (CloogStatement *cs, void *u)\n-{\n-  cs->usr = u;\n-}\n-\n-static inline void\n-cloog_loop_set_next (CloogLoop *loop, CloogLoop *next)\n-{\n-  loop->next = next;\n-}\n-\n-static inline void\n-cloog_loop_set_domain (CloogLoop *loop, CloogDomain *domain)\n-{\n-  loop->domain = domain;\n-}\n-\n-static inline void\n-cloog_loop_set_block (CloogLoop *loop, CloogBlock *block)\n-{\n-  loop->block = block;\n-}\n-\n-static inline CloogBlockList *\n-cloog_block_list_next (CloogBlockList *bl)\n-{\n-  return bl->next;\n-}\n-\n-static inline void\n-cloog_block_list_set_next (CloogBlockList *bl, CloogBlockList *next)\n-{\n-  bl->next = next;\n-}\n-\n-static inline void\n-cloog_block_list_set_block (CloogBlockList *bl, CloogBlock *block)\n-{\n-  bl->block = block;\n-}\n-\n-static inline int cloog_matrix_ncolumns (CloogMatrix * m)\n-{\n-  return m->NbColumns;\n-}\n-\n-static inline int cloog_matrix_nrows (CloogMatrix * m)\n-{\n-   return m->NbRows;\n-}\n-#endif /* CLOOG_ORG  */\n-#endif /* GRAPHITE_CLOOG_COMPAT_H  */"}, {"sha": "83cfb54eb1efd161408bca864411b331c65ddfc6", "filename": "gcc/graphite-cloog-util.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2Fgraphite-cloog-util.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2Fgraphite-cloog-util.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-cloog-util.c?ref=6886e4444f193c399b96cb1f64a24b9673cf3149", "patch": "@@ -28,7 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ppl_c.h\"\n #include \"cloog/cloog.h\"\n #include \"graphite-cloog-util.h\"\n-#include \"graphite-cloog-compat.h\"\n \n /* Counts the number of constraints in PCS.  */\n \n@@ -237,7 +236,7 @@ new_C_Polyhedron_from_Cloog_Matrix (ppl_Polyhedron_t *ph,\n \n CloogDomain *\n new_Cloog_Domain_from_ppl_Polyhedron (ppl_const_Polyhedron_t ph, int nb_params,\n-                                      CloogState *state ATTRIBUTE_UNUSED)\n+                                      CloogState *state)\n {\n   CloogMatrix *mat = new_Cloog_Matrix_from_ppl_Polyhedron (ph);\n   CloogDomain *res = cloog_domain_from_cloog_matrix (state, mat, nb_params);\n@@ -249,29 +248,25 @@ new_Cloog_Domain_from_ppl_Polyhedron (ppl_const_Polyhedron_t ph, int nb_params,\n \n CloogScattering *\n new_Cloog_Scattering_from_ppl_Polyhedron (ppl_const_Polyhedron_t ph,\n-                                          int nb_params ATTRIBUTE_UNUSED,\n-                                          int nb_scatt ATTRIBUTE_UNUSED,\n-                                          CloogState *state ATTRIBUTE_UNUSED)\n+                                          int nb_params,\n+                                          int nb_scatt,\n+                                          CloogState *state)\n {\n-#ifdef CLOOG_ORG\n   CloogMatrix *mat = new_Cloog_Matrix_from_ppl_Polyhedron (ph);\n   CloogScattering *res = cloog_scattering_from_cloog_matrix (state, mat,\n                                                              nb_scatt,\n                                                              nb_params);\n \n   cloog_matrix_free (mat);\n   return res;\n-#else\n-  return new_Cloog_Domain_from_ppl_Polyhedron (ph, nb_params, state);\n-#endif\n }\n \n /* Creates a CloogDomain from a pointset powerset PS.  */\n \n CloogDomain *\n new_Cloog_Domain_from_ppl_Pointset_Powerset\n   (ppl_Pointset_Powerset_C_Polyhedron_t ps, int nb_params,\n-   CloogState *state ATTRIBUTE_UNUSED)\n+   CloogState *state)\n {\n   CloogDomain *res = NULL;\n   ppl_Pointset_Powerset_C_Polyhedron_iterator_t it, end;\n@@ -314,14 +309,14 @@ openscop_print_cloog_matrix (FILE *file, CloogMatrix *mat,\n \t\t\t     int output, int input, int locals,\n \t\t\t     int params)\n {\n-  int i, j;\n+  unsigned i, j;\n \n-  fprintf (file, \"%d %d %d %d %d %d \\n\", cloog_matrix_nrows (mat),\n-\t   cloog_matrix_ncolumns (mat), output, input, locals, params);\n+  fprintf (file, \"%d %d %d %d %d %d \\n\", mat->NbRows,\n+\t   mat->NbColumns, output, input, locals, params);\n \n-  for (i = 0; i < cloog_matrix_nrows (mat); i++)\n+  for (i = 0; i < mat->NbRows; i++)\n     {\n-      for (j = 0; j < cloog_matrix_ncolumns (mat); j++)\n+      for (j = 0; j < mat->NbColumns; j++)\n         if (j == 0)\n \t  fprintf (file, \"%ld \", mpz_get_si (mat->p[i][j]));\n         else"}, {"sha": "da26ee9f1fc2b237263153013f9fb25c0426d9b2", "filename": "gcc/graphite-cloog-util.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2Fgraphite-cloog-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2Fgraphite-cloog-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-cloog-util.h?ref=6886e4444f193c399b96cb1f64a24b9673cf3149", "patch": "@@ -22,7 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #define GRAPHITE_CLOOG_UTIL_H\n \n #include \"cloog/cloog.h\"\n-#include \"graphite-cloog-compat.h\"\n \n CloogMatrix *new_Cloog_Matrix_from_ppl_Polyhedron (ppl_const_Polyhedron_t);\n CloogDomain *new_Cloog_Domain_from_ppl_Polyhedron (ppl_const_Polyhedron_t,"}, {"sha": "a23587674f22ed44f9ad5bd9345c1521f49d4451", "filename": "gcc/graphite.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6886e4444f193c399b96cb1f64a24b9673cf3149/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=6886e4444f193c399b96cb1f64a24b9673cf3149", "patch": "@@ -209,7 +209,6 @@ graphite_initialize (void)\n   gcc_assert (ppl_initialized == 0);\n \n   cloog_state = cloog_state_malloc ();\n-  cloog_initialize ();\n \n   if (dump_file && dump_flags)\n     dump_function_to_file (current_function_decl, dump_file, dump_flags);\n@@ -233,7 +232,6 @@ graphite_finalize (bool need_cfg_cleanup_p)\n     }\n \n   cloog_state_free (cloog_state);\n-  cloog_finalize ();\n   ppl_finalize ();\n   free_original_copy_tables ();\n "}]}