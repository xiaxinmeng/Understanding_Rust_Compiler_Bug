{"sha": "c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMzZWMxOTZhYTcxM2M2MmQ3MzkwN2RjOGY5ZTU3ZDdhYjJlNGU0Yg==", "commit": {"author": {"name": "Matthias Kretz", "email": "kretz@kde.org", "date": "2021-05-27T15:25:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-05-27T21:00:38Z"}, "message": "c++: Output less irrelevant info for function template decl [PR100716]\n\nEnsure dump_template_decl for function templates never prints template\nparameters after the function name (it did with -fno-pretty-templates)\nand skip output of irrelevant & confusing \"[with T = T]\" in\ndump_substitution.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/100716\n\t* error.c (dump_template_bindings): Include code to print\n\t\"[with\" and ']', conditional on whether anything is printed at\n\tall. This is tied to whether a semicolon is needed to separate\n\tmultiple template parameters. If the template argument repeats\n\tthe template parameter (T = T), then skip the parameter.\n\t(dump_substitution): Moved code to print \"[with\" and ']' to\n\tdump_template_bindings.\n\t(dump_function_decl): Partial revert of PR50828, which masked\n\tTFF_TEMPLATE_NAME for all of dump_function_decl. Now\n\tTFF_TEMPLATE_NAME is masked for the scope of the function and\n\tonly carries through to dump_function_name.\n\t(dump_function_name): Avoid calling dump_template_parms if\n\tTFF_TEMPLATE_NAME is set.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/100716\n\t* g++.dg/diagnostic/pr100716.C: New test.\n\t* g++.dg/diagnostic/pr100716-1.C: Same test with\n\t-fno-pretty-templates.", "tree": {"sha": "375bd623fffa857993da6ea84d2af838d029c2d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/375bd623fffa857993da6ea84d2af838d029c2d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27e906d5bb2e46e59fe4aa137317f3c8d49ecb44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e906d5bb2e46e59fe4aa137317f3c8d49ecb44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e906d5bb2e46e59fe4aa137317f3c8d49ecb44"}], "stats": {"total": 171, "additions": 156, "deletions": 15}, "files": [{"sha": "4a89b3488291480784d23b6fe53018b8cb18eb95", "filename": "gcc/cp/error.c", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b", "patch": "@@ -371,7 +371,35 @@ static void\n dump_template_bindings (cxx_pretty_printer *pp, tree parms, tree args,\n                         vec<tree, va_gc> *typenames)\n {\n-  bool need_semicolon = false;\n+  /* Print \"[with\" and ']', conditional on whether anything is printed at all.\n+     This is tied to whether a semicolon is needed to separate multiple template\n+     parameters.  */\n+  struct prepost_semicolon\n+  {\n+    cxx_pretty_printer *pp;\n+    bool need_semicolon;\n+\n+    void operator() ()\n+    {\n+      if (need_semicolon)\n+\tpp_separate_with_semicolon (pp);\n+      else\n+\t{\n+\t  pp_cxx_whitespace (pp);\n+\t  pp_cxx_left_bracket (pp);\n+\t  pp->translate_string (\"with\");\n+\t  pp_cxx_whitespace (pp);\n+\t  need_semicolon = true;\n+\t}\n+    }\n+\n+    ~prepost_semicolon ()\n+    {\n+      if (need_semicolon)\n+\tpp_cxx_right_bracket (pp);\n+    }\n+  } semicolon_or_introducer = {pp, false};\n+\n   int i;\n   tree t;\n \n@@ -395,10 +423,20 @@ dump_template_bindings (cxx_pretty_printer *pp, tree parms, tree args,\n \t  if (lvl_args && NUM_TMPL_ARGS (lvl_args) > arg_idx)\n \t    arg = TREE_VEC_ELT (lvl_args, arg_idx);\n \n-\t  if (need_semicolon)\n-\t    pp_separate_with_semicolon (pp);\n-\t  dump_template_parameter (pp, TREE_VEC_ELT (p, i),\n-                                   TFF_PLAIN_IDENTIFIER);\n+\t  tree parm_i = TREE_VEC_ELT (p, i);\n+\t  /* If the template argument repeats the template parameter (T = T),\n+\t     skip the parameter.*/\n+\t  if (arg && TREE_CODE (arg) == TEMPLATE_TYPE_PARM\n+\t\t&& TREE_CODE (parm_i) == TREE_LIST\n+\t\t&& TREE_CODE (TREE_VALUE (parm_i)) == TYPE_DECL\n+\t\t&& TREE_CODE (TREE_TYPE (TREE_VALUE (parm_i)))\n+\t\t     == TEMPLATE_TYPE_PARM\n+\t\t&& DECL_NAME (TREE_VALUE (parm_i))\n+\t\t     == DECL_NAME (TREE_CHAIN (arg)))\n+\t    continue;\n+\n+\t  semicolon_or_introducer ();\n+\t  dump_template_parameter (pp, parm_i, TFF_PLAIN_IDENTIFIER);\n \t  pp_cxx_whitespace (pp);\n \t  pp_equal (pp);\n \t  pp_cxx_whitespace (pp);\n@@ -414,7 +452,6 @@ dump_template_bindings (cxx_pretty_printer *pp, tree parms, tree args,\n \t    pp_string (pp, M_(\"<missing>\"));\n \n \t  ++arg_idx;\n-\t  need_semicolon = true;\n \t}\n \n       parms = TREE_CHAIN (parms);\n@@ -436,8 +473,7 @@ dump_template_bindings (cxx_pretty_printer *pp, tree parms, tree args,\n \n   FOR_EACH_VEC_SAFE_ELT (typenames, i, t)\n     {\n-      if (need_semicolon)\n-\tpp_separate_with_semicolon (pp);\n+      semicolon_or_introducer ();\n       dump_type (pp, t, TFF_PLAIN_IDENTIFIER);\n       pp_cxx_whitespace (pp);\n       pp_equal (pp);\n@@ -1599,12 +1635,7 @@ dump_substitution (cxx_pretty_printer *pp,\n       && !(flags & TFF_NO_TEMPLATE_BINDINGS))\n     {\n       vec<tree, va_gc> *typenames = t ? find_typenames (t) : NULL;\n-      pp_cxx_whitespace (pp);\n-      pp_cxx_left_bracket (pp);\n-      pp->translate_string (\"with\");\n-      pp_cxx_whitespace (pp);\n       dump_template_bindings (pp, template_parms, template_args, typenames);\n-      pp_cxx_right_bracket (pp);\n     }\n }\n \n@@ -1645,7 +1676,8 @@ dump_function_decl (cxx_pretty_printer *pp, tree t, int flags)\n   bool constexpr_p;\n   tree ret = NULL_TREE;\n \n-  flags &= ~(TFF_UNQUALIFIED_NAME | TFF_TEMPLATE_NAME);\n+  int dump_function_name_flags = flags & ~TFF_UNQUALIFIED_NAME;\n+  flags = dump_function_name_flags & ~TFF_TEMPLATE_NAME;\n   if (TREE_CODE (t) == TEMPLATE_DECL)\n     t = DECL_TEMPLATE_RESULT (t);\n \n@@ -1723,7 +1755,7 @@ dump_function_decl (cxx_pretty_printer *pp, tree t, int flags)\n   else\n     dump_scope (pp, CP_DECL_CONTEXT (t), flags);\n \n-  dump_function_name (pp, t, flags);\n+  dump_function_name (pp, t, dump_function_name_flags);\n \n   if (!(flags & TFF_NO_FUNCTION_ARGUMENTS))\n     {\n@@ -1937,6 +1969,7 @@ dump_function_name (cxx_pretty_printer *pp, tree t, int flags)\n   dump_module_suffix (pp, t);\n \n   if (DECL_TEMPLATE_INFO (t)\n+      && !(flags & TFF_TEMPLATE_NAME)\n       && !DECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION (t)\n       && (TREE_CODE (DECL_TI_TEMPLATE (t)) != TEMPLATE_DECL\n \t  || PRIMARY_TEMPLATE_P (DECL_TI_TEMPLATE (t))))"}, {"sha": "93490da6a83a6df365b78313db16508efd7cc19a", "filename": "gcc/testsuite/g++.dg/diagnostic/pr100716-1.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr100716-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr100716-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr100716-1.C?ref=c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-fno-pretty-templates\" }\n+\n+template<typename T>\n+  struct A\n+  {\n+    template<typename U>\n+      void f() {} // { dg-line Af }\n+\n+    template<typename U>\n+      void g(U) {} // { dg-line Ag }\n+  };\n+\n+template<typename T>\n+  struct B\n+  {\n+    template<typename U>\n+      void f(U) {} // { dg-line Bf }\n+\n+    template<typename U>\n+      void g(U, T) {} // { dg-line Bg }\n+  };\n+\n+struct C\n+{\n+  template<typename U>\n+    void f(U) {} // { dg-line Cf }\n+\n+  template<typename U>\n+    void g() {} // { dg-line Cg }\n+};\n+\n+int main()\n+{\n+  A<int>().f(0); // { dg-error \"no matching function for call to 'A<int>::f\\\\(int\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void A<int>::f\\\\(\\\\)'\" \"\" { target *-*-* } Af }\n+\n+  A<int>().g(); // { dg-error \"no matching function for call to 'A<int>::g\\\\(\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void A<int>::g\\\\(U\\\\)'\" \"\" { target *-*-* } Ag }\n+\n+  B<int>().f(); // { dg-error \"no matching function for call to 'B<int>::f\\\\(\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void B<int>::f\\\\(U\\\\)'\" \"\" { target *-*-* } Bf }\n+\n+  B<int>().g(); // { dg-error \"no matching function for call to 'B<int>::g\\\\(\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void B<int>::g\\\\(U, int\\\\)'\" \"\" { target *-*-* } Bg }\n+\n+  B<float>().g(0); // { dg-error \"no matching function for call to 'B<float>::g\\\\(int\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void B<float>::g\\\\(U, float\\\\)'\" \"\" { target *-*-* } Bg }\n+\n+  C().f(); // { dg-error \"no matching function for call to 'C::f\\\\(\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void C::f\\\\(U\\\\)'\" \"\" { target *-*-* } Cf }\n+\n+  C().g(0); // { dg-error \"no matching function for call to 'C::g\\\\(int\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void C::g\\\\(\\\\)'\" \"\" { target *-*-* } Cg }\n+}"}, {"sha": "4a1f0a4e10a325319f7b8987a8d968c0c0adbc1d", "filename": "gcc/testsuite/g++.dg/diagnostic/pr100716.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr100716.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr100716.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr100716.C?ref=c33ec196aa713c62d73907dc8f9e57d7ab2e4e4b", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-fpretty-templates\" }\n+\n+template<typename T>\n+  struct A\n+  {\n+    template<typename U>\n+      void f() {} // { dg-line Af }\n+\n+    template<typename U>\n+      void g(U) {} // { dg-line Ag }\n+  };\n+\n+template<typename T>\n+  struct B\n+  {\n+    template<typename U>\n+      void f(U) {} // { dg-line Bf }\n+\n+    template<typename U>\n+      void g(U, T) {} // { dg-line Bg }\n+  };\n+\n+struct C\n+{\n+  template<typename U>\n+    void f(U) {} // { dg-line Cf }\n+\n+  template<typename U>\n+    void g() {} // { dg-line Cg }\n+};\n+\n+int main()\n+{\n+  A<int>().f(0); // { dg-error \"no matching function for call to 'A<int>::f\\\\(int\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void A<T>::f\\\\(\\\\) \\\\\\[with T = int\\\\\\]'\" \"\" { target *-*-* } Af }\n+\n+  A<int>().g(); // { dg-error \"no matching function for call to 'A<int>::g\\\\(\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void A<T>::g\\\\(U\\\\) \\\\\\[with T = int\\\\\\]'\" \"\" { target *-*-* } Ag }\n+\n+  B<int>().f(); // { dg-error \"no matching function for call to 'B<int>::f\\\\(\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void B<T>::f\\\\(U\\\\) \\\\\\[with T = int\\\\\\]'\" \"\" { target *-*-* } Bf }\n+\n+  B<int>().g(); // { dg-error \"no matching function for call to 'B<int>::g\\\\(\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void B<T>::g\\\\(U, T\\\\) \\\\\\[with T = int\\\\\\]'\" \"\" { target *-*-* } Bg }\n+\n+  B<float>().g(0); // { dg-error \"no matching function for call to 'B<float>::g\\\\(int\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void B<T>::g\\\\(U, T\\\\) \\\\\\[with T = float\\\\\\]'\" \"\" { target *-*-* } Bg }\n+\n+  C().f(); // { dg-error \"no matching function for call to 'C::f\\\\(\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void C::f\\\\(U\\\\)'\" \"\" { target *-*-* } Cf }\n+\n+  C().g(0); // { dg-error \"no matching function for call to 'C::g\\\\(int\\\\)'\" }\n+  // { dg-message \"candidate: 'template<class U> void C::g\\\\(\\\\)'\" \"\" { target *-*-* } Cg }\n+}"}]}