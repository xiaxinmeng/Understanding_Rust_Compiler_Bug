{"sha": "6206176647eed0b386a3aa1831fe29d4e76230a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIwNjE3NjY0N2VlZDBiMzg2YTNhYTE4MzFmZTI5ZDRlNzYyMzBhNg==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-06-22T03:56:33Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:17Z"}, "message": "Added IA-64 target hook (should be okay but still should have some later attention)", "tree": {"sha": "1f479648ebb8a699e277ee388729596f3606feb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f479648ebb8a699e277ee388729596f3606feb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6206176647eed0b386a3aa1831fe29d4e76230a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6206176647eed0b386a3aa1831fe29d4e76230a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6206176647eed0b386a3aa1831fe29d4e76230a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6206176647eed0b386a3aa1831fe29d4e76230a6/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e34ae54b071ebda46d7226b03b4bc32859dee68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e34ae54b071ebda46d7226b03b4bc32859dee68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e34ae54b071ebda46d7226b03b4bc32859dee68"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "7fc3a96fab899865bd411d34ab0b5469d02c6d66", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6206176647eed0b386a3aa1831fe29d4e76230a6/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6206176647eed0b386a3aa1831fe29d4e76230a6/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=6206176647eed0b386a3aa1831fe29d4e76230a6", "patch": "@@ -471,6 +471,7 @@ x86_64-*-*)\n \t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\"\n \t;;\n ia64-*-*)\n+\trust_target_objs=\"ia64-rust.o\"\n \textra_headers=ia64intrin.h\n \textra_options=\"${extra_options} g.opt fused-madd.opt\"\n \t;;"}, {"sha": "bf49744fc730d0abdd30255395e5ba6fbf269d8b", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6206176647eed0b386a3aa1831fe29d4e76230a6/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6206176647eed0b386a3aa1831fe29d4e76230a6/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=6206176647eed0b386a3aa1831fe29d4e76230a6", "patch": "@@ -65,6 +65,9 @@ extern void ia64_expand_vec_perm_even_odd (rtx, rtx, rtx, int);\n extern void ia64_expand_vec_setv2sf (rtx op[3]);\n #endif /* RTX_CODE */\n \n+/* Defined in ia64-rust.c  */\n+extern void ia64_rust_target_cpu_info (void);\n+\n #ifdef TREE_CODE\n #ifdef RTX_CODE\n extern rtx ia64_expand_builtin (tree, rtx, rtx, machine_mode, int);"}, {"sha": "0dac53d1cf4a498fd247f3c54d983e321151c059", "filename": "gcc/config/ia64/ia64-rust.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6206176647eed0b386a3aa1831fe29d4e76230a6/gcc%2Fconfig%2Fia64%2Fia64-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6206176647eed0b386a3aa1831fe29d4e76230a6/gcc%2Fconfig%2Fia64%2Fia64-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-rust.c?ref=6206176647eed0b386a3aa1831fe29d4e76230a6", "patch": "@@ -0,0 +1,127 @@\n+/* Subroutines for the Rust front end for the IA-64 architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for IA-64 targets.  */\n+\n+void ia64_rust_target_cpu_info(void) {\n+    rust_add_target_info(\"target_arch\", \"ia64\");\n+\n+    // llvm does not appear to have defined features at any point for IA-64, so I made up names\n+    // TODO: should sub-arches be defined here?\n+    if (TARGET_GNU_AS)\n+        rust_add_target_info(\"target_feature\", \"gnu-as\");\n+    if (TARGET_GNU_LD)\n+        rust_add_target_info(\"target_feature\", \"gnu-ld\");\n+    if (TARGET_VOL_ASM_STOP)\n+        rust_add_target_info(\"target_feature\", \"volatile-asm-stop\");\n+    if (TARGET_REG_NAMES)\n+        rust_add_target_info(\"target_feature\", \"register-names\");\n+    if (TARGET_NO_SDATA)\n+        rust_add_target_info(\"target_feature\", \"no-sdata\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"sdata\");\n+    if (TARGET_NO_PIC)\n+        rust_add_target_info(\"target_feature\", \"no-pic\");\n+    if (TARGET_CONST_GP)\n+        rust_add_target_info(\"target_feature\", \"constant-gp\");\n+    if (TARGET_AUTO_PIC)\n+        rust_add_target_info(\"target_feature\", \"auto-pic\");\n+    \n+    switch (TARGET_INLINE_FLOAT_DIV) {\n+        case 0:\n+            rust_add_target_info(\"target_feature\", \"no-inline-float-divide\");\n+            break;\n+        case 1:\n+            rust_add_target_info(\"target_feature\", \"inline-float-divide-min-latency\");\n+            break;\n+        case 2:\n+            rust_add_target_info(\"target_feature\", \"inline-float-divide-max-throughput\");\n+            break;\n+        default: // TODO: is this an error? should this be an error?\n+            break;\n+    }\n+    switch (TARGET_INLINE_INT_DIV) {\n+        case 0:\n+            rust_add_target_info(\"target_feature\", \"no-inline-int-divide\");\n+            break;\n+        case 1:\n+            rust_add_target_info(\"target_feature\", \"inline-int-divide-min-latency\");\n+            break;\n+        case 2:\n+            rust_add_target_info(\"target_feature\", \"inline-int-divide-max-throughput\");\n+            break;\n+        default: // TODO: is this an error? should this be an error?\n+            break;\n+    }\n+    switch (TARGET_INLINE_SQRT) {\n+        case 0:\n+            rust_add_target_info(\"target_feature\", \"no-inline-sqrt\");\n+            break;\n+        case 1:\n+            rust_add_target_info(\"target_feature\", \"inline-sqrt-min-latency\");\n+            break;\n+        case 2:\n+            rust_add_target_info(\"target_feature\", \"inline-sqrt-max-throughput\");\n+            break;\n+        default: // TODO: is this an error? should this be an error?\n+            break;\n+    }\n+\n+    if (TARGET_DWARF2_ASM)\n+        rust_add_target_info(\"target_feature\", \"dwarf2-asm\");\n+    if (TARGET_EARLY_STOP_BITS)\n+        rust_add_target_info(\"target_feature\", \"early-stop-bits\");\n+    // TODO: do fixed-range somehow (wouldn't work well as define, I don't think), same for tls-size\n+\n+    /* TODO: ensure that these variables below are actually accessible, and work (i.e. condition test not\n+     * wrong way around). */\n+    if (mflag_sched_br_data_spec)\n+        rust_add_target_info(\"target_feature\", \"sched-br-data-spec\");\n+    if (mflag_sched_ar_data_spec)\n+        rust_add_target_info(\"target_feature\", \"sched-ar-data-spec\");\n+    if (mflag_sched_control_spec)\n+        rust_add_target_info(\"target_feature\", \"sched-control-spec\");\n+    if (mflag_sched_br_in_data_spec)\n+        rust_add_target_info(\"target_feature\", \"sched-br-in-data-spec\");\n+    if (mflag_sched_ar_in_data_spec)\n+        rust_add_target_info(\"target_feature\", \"sched-ar-in-data-spec\");\n+    if (mflag_sched_in_control_spec)\n+        rust_add_target_info(\"target_feature\", \"sched-in-control-spec\");\n+    if (mflag_sched_spec_ldc)\n+        rust_add_target_info(\"target_feature\", \"sched-spec-ldc\");\n+    if (mflag_sched_spec_control_ldc)\n+        rust_add_target_info(\"target_feature\", \"sched-spec-control-ldc\");\n+    if (mflag_sched_count_spec_in_critical_path)\n+        rust_add_target_info(\"target_feature\", \"sched-count-spec-in-critical-path\");\n+    if (mflag_sched_stop_bits_after_every_cycle)\n+        rust_add_target_info(\"target_feature\", \"sched-stop-bits-after-every-cycle\");\n+    if (mflag_sched_fp_mem_deps_zero_cost)\n+        rust_add_target_info(\"target_feature\", \"sched-fp-mem-deps-zero-cost\");\n+    if (mflag_sched_mem_insns_hard_limit)\n+        rust_add_target_info(\"target_feature\", \"sched-max-memory-insns-hard-limit\");\n+    if (mflag_sel_sched_dont_check_control_spec)\n+        rust_add_target_info(\"target_feature\", \"sel-sched-dont-check-control-spec\");\n+    // TODO: do sched-max-memory-insns somehow (wouldn't work well as define)\n+}"}, {"sha": "224474352c696142ed51f77aabf965f80caceb1c", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6206176647eed0b386a3aa1831fe29d4e76230a6/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6206176647eed0b386a3aa1831fe29d4e76230a6/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=6206176647eed0b386a3aa1831fe29d4e76230a6", "patch": "@@ -43,6 +43,8 @@ do {\t\t\t\t\t\t\\\n \tbuiltin_define(\"__SIZEOF_FLOAT128__=16\");\\\n } while (0)\n \n+#define TARGET_RUST_CPU_INFO ia64_rust_target_cpu_info\n+\n #ifndef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS\n #endif"}, {"sha": "da63735c34515c99b0ed9af6fb851ef8f6d447db", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6206176647eed0b386a3aa1831fe29d4e76230a6/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6206176647eed0b386a3aa1831fe29d4e76230a6/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=6206176647eed0b386a3aa1831fe29d4e76230a6", "patch": "@@ -21,6 +21,10 @@ ia64-c.o: $(srcdir)/config/ia64/ia64-c.c $(CONFIG_H) $(SYSTEM_H) \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/ia64/ia64-c.c\n \n+ia64-rust.o: $(srcdir)/config/ia64/ia64-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n # genattrtab generates very long string literals.\n insn-attrtab.o-warn = -Wno-error\n "}]}