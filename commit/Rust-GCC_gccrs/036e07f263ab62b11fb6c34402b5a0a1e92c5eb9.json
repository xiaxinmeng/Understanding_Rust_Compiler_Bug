{"sha": "036e07f263ab62b11fb6c34402b5a0a1e92c5eb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM2ZTA3ZjI2M2FiNjJiMTFmYjZjMzQ0MDJiNWEwYTFlOTJjNWViOQ==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-08-27T16:22:50Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-08-27T16:22:50Z"}, "message": "inclhack.def (ptx_netswap): New disabled fix, ported from fixinc.ptx.\n\n\t* fixinc/inclhack.def (ptx_netswap): New disabled fix, ported from\n\tfixinc.ptx.\n\t* fixinc/inclhack.def (undefine_null):  Don't generate \\r characters.\n\tPrettify a little.\n\t* fixinc/fixincl.x: Regenerate.\n\nFrom-SVN: r70848", "tree": {"sha": "3bf73b3a9f75df2712f0da1ee60311369ea704cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bf73b3a9f75df2712f0da1ee60311369ea704cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/036e07f263ab62b11fb6c34402b5a0a1e92c5eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036e07f263ab62b11fb6c34402b5a0a1e92c5eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036e07f263ab62b11fb6c34402b5a0a1e92c5eb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036e07f263ab62b11fb6c34402b5a0a1e92c5eb9/comments", "author": null, "committer": null, "parents": [{"sha": "4202ce820181761ad2e25b025894bb9537b42f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4202ce820181761ad2e25b025894bb9537b42f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4202ce820181761ad2e25b025894bb9537b42f76"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "a37591d4b4b2cd3cfb78d324e56cb1cb9d0cdbf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036e07f263ab62b11fb6c34402b5a0a1e92c5eb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036e07f263ab62b11fb6c34402b5a0a1e92c5eb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=036e07f263ab62b11fb6c34402b5a0a1e92c5eb9", "patch": "@@ -1,3 +1,11 @@\n+2003-08-27  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* fixinc/inclhack.def (ptx_netswap): New disabled fix, ported from\n+\tfixinc.ptx.\n+\t* fixinc/inclhack.def (undefine_null):  Don't generate \\r characters.\n+\tPrettify a little.\n+\t* fixinc/fixincl.x: Regenerate.\n+\n 2003-08-27  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* lib1funcs.asm (L_ieee754_sp): New.  Include ieee754-sf.S."}, {"sha": "e730e47011f67bcdf8d478b5bcb5be42c304f11e", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036e07f263ab62b11fb6c34402b5a0a1e92c5eb9/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036e07f263ab62b11fb6c34402b5a0a1e92c5eb9/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=036e07f263ab62b11fb6c34402b5a0a1e92c5eb9", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Sunday August 24, 2003 at 03:26:44 PM EDT\n+ * It has been AutoGen-ed  Wednesday August 27, 2003 at 12:21:31 PM EDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Sun Aug 24 15:26:44 EDT 2003\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Wed Aug 27 12:21:31 EDT 2003\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -5664,11 +5664,11 @@ static tTestDesc aUndefine_NullTests[] = {\n  */\n static const char* apzUndefine_NullPatch[] = {\n     \"format\",\n-    \"#ifndef NULL%2\\n\\\n-#define NULL%1%2\\n\\\n-#endif%2\\n\",\n-    \"^#[ \\t]*define[ \\t]*[ \\t]NULL([^\\r\\n\\\n-]+)([\\r]*)\\n\",\n+    \"#ifndef NULL\\n\\\n+#define NULL%1\\n\\\n+#endif\\n\",\n+    \"^#[ \\t]*define[ \\t]+NULL([^\\r\\n\\\n+]+)[\\r]*\\n\",\n     (char*)NULL };\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *"}, {"sha": "a9472aeb578910a981679670e53cf397bf5acc09", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036e07f263ab62b11fb6c34402b5a0a1e92c5eb9/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036e07f263ab62b11fb6c34402b5a0a1e92c5eb9/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=036e07f263ab62b11fb6c34402b5a0a1e92c5eb9", "patch": "@@ -2016,6 +2016,31 @@ fix = {\n };\n \n \n+/*\n+ * In netinet/in.h, the network byte swapping asm functions supported by the\n+ * native cc compiler on PTX 1.x and 2.x are not supported by gcc.  Instead,\n+ * include <sys/byteorder.h>, written out by fixincludes, which has\n+ * these same routines written in an asm format supported by gcc.\n+ */\n+#ifdef PTX\n+fix = {\n+    hackname  = ptx_netswap;\n+    files     = netinet/in.h;\n+    sed       = \"/#define NETSWAP/a\\\\\\n\"\n+                \"\\\\\\n\"\n+                \"#if defined (__GNUC__) || defined (__GNUG__)\\\\\\n\"\n+                \"#include <sys/byteorder.h>\\\\\\n\"\n+                \"#else  /* not __GNUC__ */\\n\";\n+    sed       = \"/#endif[ \\t]*\\\\/\\\\* NETSWAP \\\\*\\\\//i\\\\\\n\"\n+                \"#endif /* not __GNUC__ */\\n\";\n+    /* Half-hearted test case: I have no idea what the file this is really\n+       supposed to operate on looks like. */\n+    test_text = \"#define NETSWAP\\n\"\n+                \"#endif /* NETSWAP */\";\n+};\n+#endif\n+\n+\n /*\n  * In pwd.h, PTX 1.x needs stdio.h included since FILE * was added in a\n  * prototype later on in the file.  (It's not clear that this is\n@@ -3442,17 +3467,20 @@ fix = {\n /*\n  *  Fix multiple defines for NULL.  Sometimes, we stumble into \\r\\n\n  *  terminated lines, so accommodate these.  Test both ways.\n+ *  Don't bother to reproduce the \\r\\n termination, as GCC has to\n+ *  recognize \\n termination anyway.\n  */\n fix = {\n     hackname  = undefine_null;\n     select    = \"^#[ \\t]*define[ \\t]+NULL[ \\t]\";\n     bypass    = \"#[ \\t]*(ifn|un)def[ \\t]+NULL($|[ \\t\\r])\";\n \n     c_fix     = format;\n-    c_fix_arg = \"#ifndef NULL%2\\n#define NULL%1%2\\n#endif%2\\n\";\n-    c_fix_arg = \"^#[ \\t]*define[ \\t]*[ \\t]NULL([^\\r\\n]+)([\\r]*)\\n\";\n+    c_fix_arg = \"#ifndef NULL\\n#define NULL%1\\n#endif\\n\";\n+    c_fix_arg = \"^#[ \\t]*define[ \\t]+NULL([^\\r\\n]+)[\\r]*\\n\";\n \n-    test_text = \"#define NULL 0UL\\r\\n#define NULL\\t((void*)0)\\n\";\n+    test_text = \"#define NULL 0UL\\r\\n\"\n+                \"#define NULL\\t((void*)0)\\n\";\n };\n \n /*"}]}