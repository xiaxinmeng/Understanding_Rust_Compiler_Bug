{"sha": "55b3d665057ac473e8a40cd35614fd7896c5c08c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTViM2Q2NjUwNTdhYzQ3M2U4YTQwY2QzNTYxNGZkNzg5NmM1YzA4Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-10-01T13:18:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-10-01T13:18:49Z"}, "message": "decl.c (grokdeclarator): Copy array typedef handling from C frontend.\n\n        * decl.c (grokdeclarator): Copy array typedef handling from C\n        frontend.\n\n        * decl.c (grokdeclarator): Copy too-large array handling from C\n        frontend.\n\n        * stor-layout.c (layout_type): Don't complain about too-large\n        array here.\n\nFrom-SVN: r45923", "tree": {"sha": "43d5d70ee06526095ec7d7779d61ac343544b6a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43d5d70ee06526095ec7d7779d61ac343544b6a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55b3d665057ac473e8a40cd35614fd7896c5c08c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b3d665057ac473e8a40cd35614fd7896c5c08c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55b3d665057ac473e8a40cd35614fd7896c5c08c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b3d665057ac473e8a40cd35614fd7896c5c08c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "173b24b9828c474251cc3bb2515d19399330e8c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173b24b9828c474251cc3bb2515d19399330e8c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173b24b9828c474251cc3bb2515d19399330e8c5"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "a2247bd4778bcbd0faf37ab048623723fc9ea782", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b3d665057ac473e8a40cd35614fd7896c5c08c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b3d665057ac473e8a40cd35614fd7896c5c08c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55b3d665057ac473e8a40cd35614fd7896c5c08c", "patch": "@@ -1,3 +1,8 @@\n+2001-10-01  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* stor-layout.c (layout_type): Don't complain about too-large\n+\tarray here.\n+\n Mon Oct  1 06:43:41 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* function.c (keep_stack_depressed): Don't use delete_insn."}, {"sha": "b65644ad0589bcc4035d03fbdf288716144b00c9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b3d665057ac473e8a40cd35614fd7896c5c08c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b3d665057ac473e8a40cd35614fd7896c5c08c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=55b3d665057ac473e8a40cd35614fd7896c5c08c", "patch": "@@ -1,3 +1,11 @@\n+2001-10-01  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* decl.c (grokdeclarator): Copy array typedef handling from C\n+\tfrontend.\n+\n+\t* decl.c (grokdeclarator): Copy too-large array handling from C\n+\tfrontend.\n+\n 2001-09-29  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config-lang.in (target_libs): Added target-gperf, so that we"}, {"sha": "dc4eb8116e941abd5391b101c2883a0edb78d925", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b3d665057ac473e8a40cd35614fd7896c5c08c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b3d665057ac473e8a40cd35614fd7896c5c08c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=55b3d665057ac473e8a40cd35614fd7896c5c08c", "patch": "@@ -10888,6 +10888,18 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n   /* Now TYPE has the actual type.  */\n \n+  /* Did array size calculations overflow?  */\n+\n+  if (TREE_CODE (type) == ARRAY_TYPE\n+      && COMPLETE_TYPE_P (type)\n+      && TREE_OVERFLOW (TYPE_SIZE (type)))\n+    {\n+      error (\"size of array `%s' is too large\", name);\n+      /* If we proceed with the array type as it is, we'll eventully\n+\t crash in tree_low_cst().  */\n+      type = error_mark_node;\n+    }\n+\n   if (explicitp == 1 || (explicitp && friendp))\n     {\n       /* [dcl.fct.spec] The explicit specifier shall only be used in\n@@ -11037,8 +11049,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n      a distinct type, so that each identifier's size can be\n      controlled separately by its own initializer.  */\n \n-  if (type == typedef_type && TREE_CODE (type) == ARRAY_TYPE\n-      && TYPE_DOMAIN (type) == NULL_TREE)\n+  if (type != 0 && typedef_type != 0\n+      && TREE_CODE (type) == ARRAY_TYPE && TYPE_DOMAIN (type) == 0\n+      && TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (typedef_type))\n     {\n       type = build_cplus_array_type (TREE_TYPE (type), TYPE_DOMAIN (type));\n     }"}, {"sha": "3ff8726b1a30ea7d00558bd259d804b6e3c17aa4", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b3d665057ac473e8a40cd35614fd7896c5c08c/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b3d665057ac473e8a40cd35614fd7896c5c08c/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=55b3d665057ac473e8a40cd35614fd7896c5c08c", "patch": "@@ -1443,26 +1443,6 @@ layout_type (type)\n \t    if (TYPE_SIZE_UNIT (element) != 0 && ! integer_onep (element_size))\n \t      TYPE_SIZE_UNIT (type)\n \t\t= size_binop (MULT_EXPR, TYPE_SIZE_UNIT (element), length);\n-\n-\t    /* Complain if the user has requested an array too large to\n-\t       fit in size_t.\n-\n-\t       ??? Disable this test for signed sizetypes.  This has the effect\n-\t       of disabling it for Ada, where it will cause trouble.  However,\n-\t       this test doesn't make sense for C either since there should\n-\t       be no problem with a type whose size overflows, only an\n-\t       object whose size overflows.  */\n-\t    if (TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n-\t\t&& TREE_OVERFLOW (TYPE_SIZE (type))\n-\t\t&& TREE_UNSIGNED (TREE_TYPE (TYPE_SIZE (type))))\n-\t      {\n-\t\terror (\"requested array too large for target\");\n-\n-\t\t/* Avoid crashing later.  */\n-\t\tTYPE_SIZE (type) = element_size;\n-\t\tif (TYPE_SIZE_UNIT (type))\n-\t\t  TYPE_SIZE_UNIT (type) = TYPE_SIZE_UNIT (element);\n-\t      }\n \t  }\n \n \t/* Now round the alignment and size,"}]}