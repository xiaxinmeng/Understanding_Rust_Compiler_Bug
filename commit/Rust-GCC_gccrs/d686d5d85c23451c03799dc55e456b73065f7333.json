{"sha": "d686d5d85c23451c03799dc55e456b73065f7333", "node_id": "C_kwDOANBUbNoAKGQ2ODZkNWQ4NWMyMzQ1MWMwMzc5OWRjNTVlNDU2YjczMDY1ZjczMzM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-14T11:07:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-14T11:07:49Z"}, "message": "c++: Reject in constant evaluation address comparisons of start of one var and end of another [PR89074]\n\nThe following testcase used to be incorrectly accepted.  The match.pd\noptimization that uses address_compare punts on folding comparison\nof start of one object and end of another one only when those addresses\nare cast to integral types, when the comparison is done on pointer types\nit assumes undefined behavior and decides to fold the comparison such\nthat the addresses don't compare equal even when they at runtime they\ncould be equal.\nBut C++ says it is undefined behavior and so during constant evaluation\nwe should reject those, so this patch adds !folding_initializer &&\ncheck to that spot.\n\nNote, address_compare has some special cases, e.g. it assumes that\nstatic vars are never adjacent to automatic vars, which is the case\nfor the usual layout where automatic vars are on the stack and after\n.rodata/.data sections there is heap:\n  /* Assume that automatic variables can't be adjacent to global\n     variables.  */\n  else if (is_global_var (base0) != is_global_var (base1))\n    ;\nIs it ok that during constant evaluation we don't treat those as undefined\nbehavior, or shall that be with !folding_initializer && too?\n\nAnother special case is:\n  if ((DECL_P (base0) && TREE_CODE (base1) == STRING_CST)\n       || (TREE_CODE (base0) == STRING_CST && DECL_P (base1))\n       || (TREE_CODE (base0) == STRING_CST\n           && TREE_CODE (base1) == STRING_CST\n           && ioff0 >= 0 && ioff1 >= 0\n           && ioff0 < TREE_STRING_LENGTH (base0)\n           && ioff1 < TREE_STRING_LENGTH (base1)\n          /* This is a too conservative test that the STRING_CSTs\n             will not end up being string-merged.  */\n           && strncmp (TREE_STRING_POINTER (base0) + ioff0,\n                       TREE_STRING_POINTER (base1) + ioff1,\n                       MIN (TREE_STRING_LENGTH (base0) - ioff0,\n                            TREE_STRING_LENGTH (base1) - ioff1)) != 0))\n    ;\n  else if (!DECL_P (base0) || !DECL_P (base1))\n    return 2;\nHere we similarly assume that vars aren't adjacent to string literals\nor vice versa.  Do we need to stick !folding_initializer && to those\nDECL_P vs. STRING_CST cases?  Though, because of the return 2; for\nnon-DECL_P that would mean rejecting comparisons like &var == &\"foobar\"[3]\netc. which ought to be fine, no?  So perhaps we need to watch for\ndecls. vs. STRING_CSTs like for DECLs whether the address is at the start\nor at the end of the string literal or somewhere in between (at least\nfor folding_initializer)?\nAnd yet another chapter but probably unsolvable is comparison of\nstring literal addresses.  I think pedantically in C++\n&\"foo\"[0] == &\"foo\"[0] is undefined behavior, different occurences of\nthe same string literals might still not be merged in some implementations.\nBut constexpr const char *s = \"foo\"; &s[0] == &s[0] should be well defined,\nand we aren't tracking anywhere whether the string literal was the same one\nor different (and I think other compilers don't track that either).\n\n2022-01-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/89074\n\t* fold-const.c (address_compare): Punt on comparison of address of\n\tone object with address of end of another object if\n\tfolding_initializer.\n\n\t* g++.dg/cpp1y/constexpr-89074-1.C: New test.", "tree": {"sha": "b2ae102ed1b2c1c6458f8b6a86d5876d29c83ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2ae102ed1b2c1c6458f8b6a86d5876d29c83ed7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d686d5d85c23451c03799dc55e456b73065f7333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d686d5d85c23451c03799dc55e456b73065f7333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d686d5d85c23451c03799dc55e456b73065f7333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d686d5d85c23451c03799dc55e456b73065f7333/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9896e96d4cae00d0f4d2b694284cb30bbd9c80fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9896e96d4cae00d0f4d2b694284cb30bbd9c80fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9896e96d4cae00d0f4d2b694284cb30bbd9c80fc"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "cfeee9e71fd68c786914f95fe4797fbc228f5328", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d686d5d85c23451c03799dc55e456b73065f7333/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d686d5d85c23451c03799dc55e456b73065f7333/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d686d5d85c23451c03799dc55e456b73065f7333", "patch": "@@ -16627,7 +16627,7 @@ address_compare (tree_code code, tree type, tree op0, tree op1,\n   /* If this is a pointer comparison, ignore for now even\n      valid equalities where one pointer is the offset zero\n      of one object and the other to one past end of another one.  */\n-  else if (!INTEGRAL_TYPE_P (type))\n+  else if (!folding_initializer && !INTEGRAL_TYPE_P (type))\n     ;\n   /* Assume that automatic variables can't be adjacent to global\n      variables.  */"}, {"sha": "9d7e82a39434b3e7ab677d8827eef0b327e3b0f3", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-89074-1.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d686d5d85c23451c03799dc55e456b73065f7333/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89074-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d686d5d85c23451c03799dc55e456b73065f7333/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89074-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89074-1.C?ref=d686d5d85c23451c03799dc55e456b73065f7333", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/89074\n+// { dg-do compile { target c++14 } }\n+\n+constexpr bool\n+foo ()\n+{\n+  int a[] = { 1, 2 };\n+  int b[] = { 3, 4 };\n+\n+  if (&a[0] == &b[0])\n+    return false;\n+\n+  if (&a[1] == &b[0])\n+    return false;\n+\n+  if (&a[1] == &b[1])\n+    return false;\n+\n+  if (&a[2] == &b[1])\n+    return false;\n+\n+  if (&a[2] == &b[0])\t\t// { dg-error \"is not a constant expression\" }\n+    return false;\n+\n+  return true;\n+}\n+\n+constexpr bool a = foo ();"}]}