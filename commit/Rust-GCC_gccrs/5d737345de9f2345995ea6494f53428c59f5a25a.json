{"sha": "5d737345de9f2345995ea6494f53428c59f5a25a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ3MzczNDVkZTlmMjM0NTk5NWVhNjQ5NGY1MzQyOGM1OWY1YTI1YQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-08-11T20:30:09Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-08-11T20:30:09Z"}, "message": "Call scev_reset_htab when Graphite out-of-SSA has changed something.\n\n2010-07-27  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-sese-to-poly.c (rewrite_cross_bb_scalar_deps): Returns\n\ta bool.\n\t(rewrite_commutative_reductions_out_of_ssa_close_phi): Same.\n\t(rewrite_commutative_reductions_out_of_ssa_loop): Same.\n\t(rewrite_cross_bb_scalar_deps_out_of_ssa): Call scev_reset_htab\n\twhen something has been changed.\n\t(rewrite_commutative_reductions_out_of_ssa): Same.\n\n\t* gcc.dg/graphite/id-26.c: New.\n\nFrom-SVN: r163160", "tree": {"sha": "54043808c3021218f6d4ac7c76b6d759bc2ba315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54043808c3021218f6d4ac7c76b6d759bc2ba315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d737345de9f2345995ea6494f53428c59f5a25a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d737345de9f2345995ea6494f53428c59f5a25a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d737345de9f2345995ea6494f53428c59f5a25a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d737345de9f2345995ea6494f53428c59f5a25a/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab756588cef4f6bcd34f847e0b8f17f46eb60344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab756588cef4f6bcd34f847e0b8f17f46eb60344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab756588cef4f6bcd34f847e0b8f17f46eb60344"}], "stats": {"total": 125, "additions": 101, "deletions": 24}, "files": [{"sha": "5cca554866e0e5a51d3ae7cf2f0eeff20bf39a5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d737345de9f2345995ea6494f53428c59f5a25a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d737345de9f2345995ea6494f53428c59f5a25a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d737345de9f2345995ea6494f53428c59f5a25a", "patch": "@@ -1,3 +1,13 @@\n+2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-sese-to-poly.c (rewrite_cross_bb_scalar_deps): Returns\n+\ta bool.\n+\t(rewrite_commutative_reductions_out_of_ssa_close_phi): Same.\n+\t(rewrite_commutative_reductions_out_of_ssa_loop): Same.\n+\t(rewrite_cross_bb_scalar_deps_out_of_ssa): Call scev_reset_htab\n+\twhen something has been changed.\n+\t(rewrite_commutative_reductions_out_of_ssa): Same.\n+\n 2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (propagate_expr_outside_region): Also"}, {"sha": "bcdd3a9448a020f7c4549cbaa9ad58f6cb754c5f", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d737345de9f2345995ea6494f53428c59f5a25a/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d737345de9f2345995ea6494f53428c59f5a25a/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=5d737345de9f2345995ea6494f53428c59f5a25a", "patch": "@@ -1,3 +1,15 @@\n+2010-07-27  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-sese-to-poly.c (rewrite_cross_bb_scalar_deps): Returns\n+\ta bool.\n+\t(rewrite_commutative_reductions_out_of_ssa_close_phi): Same.\n+\t(rewrite_commutative_reductions_out_of_ssa_loop): Same.\n+\t(rewrite_cross_bb_scalar_deps_out_of_ssa): Call scev_reset_htab\n+\twhen something has been changed.\n+\t(rewrite_commutative_reductions_out_of_ssa): Same.\n+\n+\t* gcc.dg/graphite/id-26.c: New.\n+\n 2010-07-26  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (propagate_expr_outside_region): Also"}, {"sha": "44c658807c6627b39ce77eed81668788859b804b", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 51, "deletions": 24, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d737345de9f2345995ea6494f53428c59f5a25a/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d737345de9f2345995ea6494f53428c59f5a25a/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=5d737345de9f2345995ea6494f53428c59f5a25a", "patch": "@@ -2428,9 +2428,10 @@ rewrite_cross_bb_scalar_dependence (tree zero_dim_array, tree def, gimple use_st\n }\n \n /* Rewrite the scalar dependences crossing the boundary of the BB\n-   containing STMT with an array.  */\n+   containing STMT with an array.  Return true when something has been\n+   changed.  */\n \n-static void\n+static bool\n rewrite_cross_bb_scalar_deps (sese region, gimple_stmt_iterator *gsi)\n {\n   gimple stmt = gsi_stmt (*gsi);\n@@ -2439,6 +2440,7 @@ rewrite_cross_bb_scalar_deps (sese region, gimple_stmt_iterator *gsi)\n   basic_block def_bb;\n   tree zero_dim_array = NULL_TREE;\n   gimple use_stmt;\n+  bool res = false;\n \n   switch (gimple_code (stmt))\n     {\n@@ -2451,27 +2453,29 @@ rewrite_cross_bb_scalar_deps (sese region, gimple_stmt_iterator *gsi)\n       break;\n \n     default:\n-      return;\n+      return false;\n     }\n \n   if (!is_gimple_reg (def))\n-    return;\n+    return false;\n \n   if (scev_analyzable_p (def, region))\n     {\n       loop_p loop = loop_containing_stmt (SSA_NAME_DEF_STMT (def));\n       tree scev = scalar_evolution_in_region (region, loop, def);\n \n-      if (tree_does_not_contain_chrecs (scev))\n-\tpropagate_expr_outside_region (def, scev, region);\n+      if (tree_contains_chrecs (scev, NULL))\n+\treturn false;\n \n-      return;\n+      propagate_expr_outside_region (def, scev, region);\n+      return true;\n     }\n \n   def_bb = gimple_bb (stmt);\n \n   FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, def)\n-    if (gimple_code (use_stmt) == GIMPLE_PHI)\n+    if (gimple_code (use_stmt) == GIMPLE_PHI\n+\t&& (res = true))\n       {\n \tgimple_stmt_iterator psi = gsi_for_stmt (use_stmt);\n \n@@ -2484,7 +2488,8 @@ rewrite_cross_bb_scalar_deps (sese region, gimple_stmt_iterator *gsi)\n   FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, def)\n     if (gimple_code (use_stmt) != GIMPLE_PHI\n \t&& def_bb != gimple_bb (use_stmt)\n-\t&& !is_gimple_debug (use_stmt))\n+\t&& !is_gimple_debug (use_stmt)\n+\t&& (res = true))\n       {\n \tif (!zero_dim_array)\n \t  {\n@@ -2497,6 +2502,8 @@ rewrite_cross_bb_scalar_deps (sese region, gimple_stmt_iterator *gsi)\n \n \trewrite_cross_bb_scalar_dependence (zero_dim_array, def, use_stmt);\n       }\n+\n+  return res;\n }\n \n /* Rewrite out of SSA all the reduction phi nodes of SCOP.  */\n@@ -2507,16 +2514,21 @@ rewrite_cross_bb_scalar_deps_out_of_ssa (scop_p scop)\n   basic_block bb;\n   gimple_stmt_iterator psi;\n   sese region = SCOP_REGION (scop);\n+  bool changed = false;\n \n   FOR_EACH_BB (bb)\n     if (bb_in_sese_p (bb, region))\n       for (psi = gsi_start_bb (bb); !gsi_end_p (psi); gsi_next (&psi))\n-\trewrite_cross_bb_scalar_deps (region, &psi);\n+\tchanged |= rewrite_cross_bb_scalar_deps (region, &psi);\n \n-  update_ssa (TODO_update_ssa);\n+  if (changed)\n+    {\n+      scev_reset_htab ();\n+      update_ssa (TODO_update_ssa);\n #ifdef ENABLE_CHECKING\n-  verify_loop_closed_ssa (true);\n+      verify_loop_closed_ssa (true);\n #endif\n+    }\n }\n \n /* Returns the number of pbbs that are in loops contained in SCOP.  */\n@@ -2902,43 +2914,51 @@ translate_scalar_reduction_to_array (VEC (gimple, heap) *in,\n     }\n }\n \n-/* Rewrites out of SSA a commutative reduction at CLOSE_PHI.  */\n+/* Rewrites out of SSA a commutative reduction at CLOSE_PHI.  Returns\n+   true when something has been changed.  */\n \n-static void\n+static bool\n rewrite_commutative_reductions_out_of_ssa_close_phi (gimple close_phi,\n \t\t\t\t\t\t     sbitmap reductions)\n {\n+  bool res;\n   VEC (gimple, heap) *in = VEC_alloc (gimple, heap, 10);\n   VEC (gimple, heap) *out = VEC_alloc (gimple, heap, 10);\n \n   detect_commutative_reduction (close_phi, &in, &out);\n-  if (VEC_length (gimple, in) > 0)\n+  res = VEC_length (gimple, in) > 0;\n+  if (res)\n     translate_scalar_reduction_to_array (in, out, reductions);\n \n   VEC_free (gimple, heap, in);\n   VEC_free (gimple, heap, out);\n+  return res;\n }\n \n-/* Rewrites all the commutative reductions from LOOP out of SSA.  */\n+/* Rewrites all the commutative reductions from LOOP out of SSA.\n+   Returns true when something has been changed.  */\n \n-static void\n+static bool\n rewrite_commutative_reductions_out_of_ssa_loop (loop_p loop,\n \t\t\t\t\t\tsbitmap reductions,\n \t\t\t\t\t\tsese region)\n {\n   gimple_stmt_iterator gsi;\n   edge exit = single_exit (loop);\n   tree res;\n+  bool changed = false;\n \n   if (!exit)\n-    return;\n+    return false;\n \n   for (gsi = gsi_start_phis (exit->dest); !gsi_end_p (gsi); gsi_next (&gsi))\n     if ((res = gimple_phi_result (gsi_stmt (gsi)))\n \t&& is_gimple_reg (res)\n \t&& !scev_analyzable_p (res, region))\n-      rewrite_commutative_reductions_out_of_ssa_close_phi (gsi_stmt (gsi),\n-\t\t\t\t\t\t\t   reductions);\n+      changed |= rewrite_commutative_reductions_out_of_ssa_close_phi\n+\t(gsi_stmt (gsi), reductions);\n+\n+  return changed;\n }\n \n /* Rewrites all the commutative reductions from SCOP out of SSA.  */\n@@ -2948,19 +2968,26 @@ rewrite_commutative_reductions_out_of_ssa (sese region, sbitmap reductions)\n {\n   loop_iterator li;\n   loop_p loop;\n+  bool changed = false;\n \n   if (!flag_associative_math)\n     return;\n \n   FOR_EACH_LOOP (li, loop, 0)\n     if (loop_in_sese_p (loop, region))\n-      rewrite_commutative_reductions_out_of_ssa_loop (loop, reductions, region);\n+      changed |= rewrite_commutative_reductions_out_of_ssa_loop (loop,\n+\t\t\t\t\t\t\t\t reductions,\n+\t\t\t\t\t\t\t\t region);\n \n-  gsi_commit_edge_inserts ();\n-  update_ssa (TODO_update_ssa);\n+  if (changed)\n+    {\n+      scev_reset_htab ();\n+      gsi_commit_edge_inserts ();\n+      update_ssa (TODO_update_ssa);\n #ifdef ENABLE_CHECKING\n-  verify_loop_closed_ssa (true);\n+      verify_loop_closed_ssa (true);\n #endif\n+    }\n }\n \n /* Java does not initialize long_long_integer_type_node.  */"}, {"sha": "4697e6be6249456cf2c3f3289692d7c97dfd01d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d737345de9f2345995ea6494f53428c59f5a25a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d737345de9f2345995ea6494f53428c59f5a25a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d737345de9f2345995ea6494f53428c59f5a25a", "patch": "@@ -1,3 +1,7 @@\n+2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* gcc.dg/graphite/id-26.c: New.\n+\n 2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* gcc.dg/graphite/id-25.c: New."}, {"sha": "507d1590fadbbd307cea2b59237c3aa495c3db62", "filename": "gcc/testsuite/gcc.dg/graphite/id-26.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d737345de9f2345995ea6494f53428c59f5a25a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d737345de9f2345995ea6494f53428c59f5a25a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-26.c?ref=5d737345de9f2345995ea6494f53428c59f5a25a", "patch": "@@ -0,0 +1,24 @@\n+int find_sad_16x16(int *intra_mode)\n+{\n+  int current_intra_sad_2,best_intra_sad2;\n+  int M1[16][16],M0[4][4][4][4],M3[4],M4[4][4];\n+  int i,j,k;\n+  int ii,jj;\n+  int up_avail, left_avail, left_up_avail;\n+  for (i=0;i<17;i++)\n+    if (left_up_avail)\n+      {\n+\tfor (jj=0;jj<4;jj++)\n+\t  for (ii=0;ii<4;ii++)\n+\t    for (j=0;j<4;j++)\n+\t      for (i=0;i<4;i++)\n+\t\t{\n+\t\t  M0[i][ii][2][jj]=M3[0]-M3[1];\n+\t\t  M0[i][ii][1][jj]=M3[2]+M3[3];\n+\t\t  current_intra_sad_2 += abs(M0[i][ii][j][jj]);\n+\t\t}\n+\n+        if(current_intra_sad_2 < best_intra_sad2)\n+          best_intra_sad2=current_intra_sad_2;\n+      }\n+}"}]}