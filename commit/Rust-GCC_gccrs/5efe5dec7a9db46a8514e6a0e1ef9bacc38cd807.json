{"sha": "5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVmZTVkZWM3YTlkYjQ2YTg1MTRlNmEwZTFlZjliYWNjMzhjZDgwNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-06-04T17:34:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-06-04T17:34:03Z"}, "message": "recog.h (alternative_class): New function.\n\ngcc/\n\t* recog.h (alternative_class): New function.\n\t(which_op_alt): Return a const recog_op_alt.\n\t* reg-stack.c (check_asm_stack_operands): Update type accordingly.\n\t(subst_asm_stack_regs): Likewise.\n\t* config/arm/arm.c (note_invalid_constants): Likewise.\n\t* regcprop.c (copyprop_hardreg_forward_1): Likewise.  Don't modify\n\tthe operand_alternative; use alternative class instead.\n\t* sel-sched.c (get_reg_class): Likewise.\n\t* regrename.c (build_def_use): Likewise.\n\t(hide_operands, restore_operands, record_out_operands): Update type\n\taccordingly.\n\nFrom-SVN: r211238", "tree": {"sha": "ce044c3ca53f5e72f7cc64bc3e179dc07f77c216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce044c3ca53f5e72f7cc64bc3e179dc07f77c216"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29d70a0f6998f34ef7f6fbeff2455dd2d875159f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d70a0f6998f34ef7f6fbeff2455dd2d875159f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d70a0f6998f34ef7f6fbeff2455dd2d875159f"}], "stats": {"total": 73, "additions": 42, "deletions": 31}, "files": [{"sha": "c585b9395a69267cfefcdf104440d172461b1e7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807", "patch": "@@ -1,3 +1,17 @@\n+2014-06-04  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* recog.h (alternative_class): New function.\n+\t(which_op_alt): Return a const recog_op_alt.\n+\t* reg-stack.c (check_asm_stack_operands): Update type accordingly.\n+\t(subst_asm_stack_regs): Likewise.\n+\t* config/arm/arm.c (note_invalid_constants): Likewise.\n+\t* regcprop.c (copyprop_hardreg_forward_1): Likewise.  Don't modify\n+\tthe operand_alternative; use alternative class instead.\n+\t* sel-sched.c (get_reg_class): Likewise.\n+\t* regrename.c (build_def_use): Likewise.\n+\t(hide_operands, restore_operands, record_out_operands): Update type\n+\taccordingly.\n+\n 2014-06-04  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* recog.h (recog_op_alt): Convert to a flat array."}, {"sha": "d5d958ebec51d4930abe2e03f15f33d7f1320bb1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807", "patch": "@@ -16878,7 +16878,7 @@ note_invalid_constants (rtx insn, HOST_WIDE_INT address, int do_pushes)\n      this insn.  */\n   preprocess_constraints ();\n \n-  operand_alternative *op_alt = which_op_alt ();\n+  const operand_alternative *op_alt = which_op_alt ();\n   for (opno = 0; opno < recog_data.n_operands; opno++)\n     {\n       /* Things we need to fix can only occur in inputs.  */"}, {"sha": "3dae18ba26a4cc8be192bb73c5e7edcce56767c1", "filename": "gcc/recog.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807", "patch": "@@ -79,6 +79,14 @@ struct operand_alternative\n   unsigned int anything_ok:1;\n };\n \n+/* Return the class for operand I of alternative ALT, taking matching\n+   constraints into account.  */\n+\n+static inline enum reg_class\n+alternative_class (const operand_alternative *alt, int i)\n+{\n+  return alt[i].matches >= 0 ? alt[alt[i].matches].cl : alt[i].cl;\n+}\n \n extern void init_recog (void);\n extern void init_recog_no_volatile (void);\n@@ -263,7 +271,7 @@ extern struct operand_alternative recog_op_alt[MAX_RECOG_OPERANDS\n    on operand OP of the current instruction alternative (which_alternative).\n    Only valid after calling preprocess_constraints and constrain_operands.  */\n \n-inline static operand_alternative *\n+inline static const operand_alternative *\n which_op_alt ()\n {\n   gcc_checking_assert (IN_RANGE (which_alternative, 0,"}, {"sha": "443a65a504bcc029c8b1ff470fcb670dc8fc7208", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807", "patch": "@@ -482,7 +482,7 @@ check_asm_stack_operands (rtx insn)\n       PATTERN (insn) = gen_rtx_USE (VOIDmode, const0_rtx);\n       return 0;\n     }\n-  operand_alternative *op_alt = which_op_alt ();\n+  const operand_alternative *op_alt = which_op_alt ();\n \n   /* Strip SUBREGs here to make the following code simpler.  */\n   for (i = 0; i < recog_data.n_operands; i++)\n@@ -2030,7 +2030,7 @@ subst_asm_stack_regs (rtx insn, stack_ptr regstack)\n   constrain_operands (1);\n \n   preprocess_constraints ();\n-  operand_alternative *op_alt = which_op_alt ();\n+  const operand_alternative *op_alt = which_op_alt ();\n \n   get_asm_operands_in_out (body, &n_outputs, &n_inputs);\n "}, {"sha": "56efc948a7c795d1cf18b109dadf22a2ef41f4bd", "filename": "gcc/regcprop.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807", "patch": "@@ -775,20 +775,17 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n       if (! constrain_operands (1))\n \tfatal_insn_not_found (insn);\n       preprocess_constraints ();\n-      operand_alternative *op_alt = which_op_alt ();\n+      const operand_alternative *op_alt = which_op_alt ();\n       n_ops = recog_data.n_operands;\n       is_asm = asm_noperands (PATTERN (insn)) >= 0;\n \n-      /* Simplify the code below by rewriting things to reflect\n-\t matching constraints.  Also promote OP_OUT to OP_INOUT\n+      /* Simplify the code below by promoting OP_OUT to OP_INOUT\n \t in predicated instructions.  */\n \n       predicated = GET_CODE (PATTERN (insn)) == COND_EXEC;\n       for (i = 0; i < n_ops; ++i)\n \t{\n \t  int matches = op_alt[i].matches;\n-\t  if (matches >= 0)\n-\t    op_alt[i].cl = op_alt[matches].cl;\n \t  if (matches >= 0 || op_alt[i].matched >= 0\n \t      || (predicated && recog_data.operand_type[i] == OP_OUT))\n \t    recog_data.operand_type[i] = OP_INOUT;\n@@ -939,12 +936,14 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \t      if (op_alt[i].is_address)\n \t\treplaced[i]\n \t\t  = replace_oldest_value_addr (recog_data.operand_loc[i],\n-\t\t\t\t\t       op_alt[i].cl, VOIDmode,\n-\t\t\t\t\t       ADDR_SPACE_GENERIC, insn, vd);\n+\t\t\t\t\t       alternative_class (op_alt, i),\n+\t\t\t\t\t       VOIDmode, ADDR_SPACE_GENERIC,\n+\t\t\t\t\t       insn, vd);\n \t      else if (REG_P (recog_data.operand[i]))\n \t\treplaced[i]\n \t\t  = replace_oldest_value_reg (recog_data.operand_loc[i],\n-\t\t\t\t\t      op_alt[i].cl, insn, vd);\n+\t\t\t\t\t      alternative_class (op_alt, i),\n+\t\t\t\t\t      insn, vd);\n \t      else if (MEM_P (recog_data.operand[i]))\n \t\treplaced[i] = replace_oldest_value_mem (recog_data.operand[i],\n \t\t\t\t\t\t\tinsn, vd);"}, {"sha": "fa6ed49d1dfddce44645ed5ddd360269c6438acc", "filename": "gcc/regrename.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807", "patch": "@@ -1427,7 +1427,7 @@ hide_operands (int n_ops, rtx *old_operands, rtx *old_dups,\n \t       unsigned HOST_WIDE_INT do_not_hide, bool inout_and_ec_only)\n {\n   int i;\n-  operand_alternative *op_alt = which_op_alt ();\n+  const operand_alternative *op_alt = which_op_alt ();\n   for (i = 0; i < n_ops; i++)\n     {\n       old_operands[i] = recog_data.operand[i];\n@@ -1478,7 +1478,7 @@ static void\n record_out_operands (rtx insn, bool earlyclobber, insn_rr_info *insn_info)\n {\n   int n_ops = recog_data.n_operands;\n-  operand_alternative *op_alt = which_op_alt ();\n+  const operand_alternative *op_alt = which_op_alt ();\n \n   int i;\n \n@@ -1489,7 +1489,7 @@ record_out_operands (rtx insn, bool earlyclobber, insn_rr_info *insn_info)\n \t\t  ? recog_data.operand_loc[opn]\n \t\t  : recog_data.dup_loc[i - n_ops]);\n       rtx op = *loc;\n-      enum reg_class cl = op_alt[opn].cl;\n+      enum reg_class cl = alternative_class (op_alt, opn);\n \n       struct du_head *prev_open;\n \n@@ -1571,7 +1571,7 @@ build_def_use (basic_block bb)\n \t  if (! constrain_operands (1))\n \t    fatal_insn_not_found (insn);\n \t  preprocess_constraints ();\n-\t  operand_alternative *op_alt = which_op_alt ();\n+\t  const operand_alternative *op_alt = which_op_alt ();\n \t  n_ops = recog_data.n_operands;\n \t  untracked_operands = 0;\n \n@@ -1584,8 +1584,7 @@ build_def_use (basic_block bb)\n \t\t      sizeof (operand_rr_info) * recog_data.n_operands);\n \t    }\n \n-\t  /* Simplify the code below by rewriting things to reflect\n-\t     matching constraints.  Also promote OP_OUT to OP_INOUT in\n+\t  /* Simplify the code below by promoting OP_OUT to OP_INOUT in\n \t     predicated instructions, but only for register operands\n \t     that are already tracked, so that we can create a chain\n \t     when the first SET makes a register live.  */\n@@ -1595,8 +1594,6 @@ build_def_use (basic_block bb)\n \t    {\n \t      rtx op = recog_data.operand[i];\n \t      int matches = op_alt[i].matches;\n-\t      if (matches >= 0)\n-\t\top_alt[i].cl = op_alt[matches].cl;\n \t      if (matches >= 0 || op_alt[i].matched >= 0\n \t          || (predicated && recog_data.operand_type[i] == OP_OUT))\n \t\t{\n@@ -1681,7 +1678,7 @@ build_def_use (basic_block bb)\n \t      rtx *loc = (i < n_ops\n \t\t\t  ? recog_data.operand_loc[opn]\n \t\t\t  : recog_data.dup_loc[i - n_ops]);\n-\t      enum reg_class cl = op_alt[opn].cl;\n+\t      enum reg_class cl = alternative_class (op_alt, opn);\n \t      enum op_type type = recog_data.operand_type[opn];\n \n \t      /* Don't scan match_operand here, since we've no reg class"}, {"sha": "fb93f92a2bc9e85089e4dd27e922395cc55df19a", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=5efe5dec7a9db46a8514e6a0e1ef9bacc38cd807", "patch": "@@ -1022,22 +1022,15 @@ get_reg_class (rtx insn)\n   preprocess_constraints ();\n   n_ops = recog_data.n_operands;\n \n-  operand_alternative *op_alt = which_op_alt ();\n-  for (i = 0; i < n_ops; ++i)\n-    {\n-      int matches = op_alt[i].matches;\n-      if (matches >= 0)\n-\top_alt[i].cl = op_alt[matches].cl;\n-    }\n-\n+  const operand_alternative *op_alt = which_op_alt ();\n   if (asm_noperands (PATTERN (insn)) > 0)\n     {\n       for (i = 0; i < n_ops; i++)\n \tif (recog_data.operand_type[i] == OP_OUT)\n \t  {\n \t    rtx *loc = recog_data.operand_loc[i];\n \t    rtx op = *loc;\n-\t    enum reg_class cl = op_alt[i].cl;\n+\t    enum reg_class cl = alternative_class (op_alt, i);\n \n \t    if (REG_P (op)\n \t\t&& REGNO (op) == ORIGINAL_REGNO (op))\n@@ -1051,7 +1044,7 @@ get_reg_class (rtx insn)\n       for (i = 0; i < n_ops + recog_data.n_dups; i++)\n        {\n \t int opn = i < n_ops ? i : recog_data.dup_num[i - n_ops];\n-\t enum reg_class cl = op_alt[opn].cl;\n+\t enum reg_class cl = alternative_class (op_alt, opn);\n \n \t if (recog_data.operand_type[opn] == OP_OUT ||\n \t     recog_data.operand_type[opn] == OP_INOUT)"}]}