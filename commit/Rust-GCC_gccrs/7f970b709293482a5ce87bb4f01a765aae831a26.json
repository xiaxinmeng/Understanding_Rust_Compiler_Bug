{"sha": "7f970b709293482a5ce87bb4f01a765aae831a26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y5NzBiNzA5MjkzNDgyYTVjZTg3YmI0ZjAxYTc2NWFhZTgzMWEyNg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2005-06-01T00:30:26Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2005-06-01T00:30:26Z"}, "message": "configure.ac: Add --enable-secureplt.\n\n\t* configure.ac: Add --enable-secureplt.\n\t(HAVE_AS_REL16): Test for R_PPC_REL16 relocs.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* config.gcc (powerpc64-*-linux*, powerpc-*-linux*): Add\n\trs6000/secureplt.h to tm_file when enable_secureplt.\n\t* doc/invoke.texi (msecure-plt, mbss-plt): Document.\n\t* doc/install.texi: Document --enable-targets and --enable-secureplt.\n\tCorrect xrefs to \"Using the GNU Compiler Collection (GCC)\".\n\t* config/rs6000/secureplt.h: New file.\n\t* config/rs6000/sysv4.h (TARGET_SECURE_PLT): Define.\n\t(SUBTARGET_OVERRIDE_OPTIONS): Error if -msecure-plt given without\n\tassembler support.\n\t(CC1_SECURE_PLT_DEFAULT_SPEC): Define.\n\t(CC1_SPEC): Delete duplicate mno-sdata.  Invoke cc1_secure_plt_default.\n\t(SUBTARGET_EXTRA_SPECS): Add cc1_secure_plt_default.\n\t* config/rs6000/sysv4.opt (msecure-plt, bss-plt): Add options.\n\t* config/rs6000/rs6000.h (TARGET_SECURE_PLT): Define.\n\t* config/rs6000/rs6000.c (rs6000_emit_load_toc_table): Handle\n\tTARGET_SECURE_PLT got register load sequence.\n\t(rs6000_emit_prologue): Call rs6000_emit_load_toc_table when\n\tTARGET_SECURE_PLT.\n\t(rs6000_elf_declare_function_name): Don't emit toc address offset\n\tword when TARGET_SECURE_PLT.\n\t* config/rs6000/rs6000.md (elf_high, elf_low): Move past load_toc_*.\n\t(load_toc_v4_PIC_1) Enable for TARGET_SECURE_PLT.\n\t(load_toc_v4_PIC_3b, load_toc_v4_PIC_3c): New insns.\n\t(call, call_value): Mark pic_offset_table_rtx used for sysv pic and\n\tTARGET_SECURE_PLT.\n\t(call_nonlocal_sysv, call_value_nonlocal_sysv, sibcall_nonlocal_sysv,\n\tsibcall_value_nonlocal_sysv): Add 32768 offset when TARGET_SECURE_PLT\n\tand -fPIC.\n\t* config/rs6000/tramp.asm (trampoline_initial): Use \"bcl 20,31\".\n\t(__trampoline_setup): Likewise.  Init r30 before plt call.\n\nFrom-SVN: r100415", "tree": {"sha": "a43884596f7b3725ff1193f949aede640e008d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a43884596f7b3725ff1193f949aede640e008d89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f970b709293482a5ce87bb4f01a765aae831a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f970b709293482a5ce87bb4f01a765aae831a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f970b709293482a5ce87bb4f01a765aae831a26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f970b709293482a5ce87bb4f01a765aae831a26/comments", "author": null, "committer": null, "parents": [{"sha": "d2348bd59174b5f3c5c492da6190f80c3f6d745b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2348bd59174b5f3c5c492da6190f80c3f6d745b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2348bd59174b5f3c5c492da6190f80c3f6d745b"}], "stats": {"total": 428, "additions": 385, "deletions": 43}, "files": [{"sha": "9672b492afa6ed4eba0c5e4bb173295179cb748e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -1,3 +1,40 @@\n+2005-06-01  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* configure.ac: Add --enable-secureplt.\n+\t(HAVE_AS_REL16): Test for R_PPC_REL16 relocs.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* config.gcc (powerpc64-*-linux*, powerpc-*-linux*): Add\n+\trs6000/secureplt.h to tm_file when enable_secureplt.\n+\t* doc/invoke.texi (msecure-plt, mbss-plt): Document.\n+\t* doc/install.texi: Document --enable-targets and --enable-secureplt.\n+\tCorrect xrefs to \"Using the GNU Compiler Collection (GCC)\".\n+\t* config/rs6000/secureplt.h: New file.\n+\t* config/rs6000/sysv4.h (TARGET_SECURE_PLT): Define.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Error if -msecure-plt given without\n+\tassembler support.\n+\t(CC1_SECURE_PLT_DEFAULT_SPEC): Define.\n+\t(CC1_SPEC): Delete duplicate mno-sdata.  Invoke cc1_secure_plt_default.\n+\t(SUBTARGET_EXTRA_SPECS): Add cc1_secure_plt_default.\n+\t* config/rs6000/sysv4.opt (msecure-plt, bss-plt): Add options.\n+\t* config/rs6000/rs6000.h (TARGET_SECURE_PLT): Define.\n+\t* config/rs6000/rs6000.c (rs6000_emit_load_toc_table): Handle\n+\tTARGET_SECURE_PLT got register load sequence.\n+\t(rs6000_emit_prologue): Call rs6000_emit_load_toc_table when\n+\tTARGET_SECURE_PLT.\n+\t(rs6000_elf_declare_function_name): Don't emit toc address offset\n+\tword when TARGET_SECURE_PLT.\n+\t* config/rs6000/rs6000.md (elf_high, elf_low): Move past load_toc_*.\n+\t(load_toc_v4_PIC_1) Enable for TARGET_SECURE_PLT.\n+\t(load_toc_v4_PIC_3b, load_toc_v4_PIC_3c): New insns.\n+\t(call, call_value): Mark pic_offset_table_rtx used for sysv pic and\n+\tTARGET_SECURE_PLT.\n+\t(call_nonlocal_sysv, call_value_nonlocal_sysv, sibcall_nonlocal_sysv,\n+\tsibcall_value_nonlocal_sysv): Add 32768 offset when TARGET_SECURE_PLT\n+\tand -fPIC.\n+\t* config/rs6000/tramp.asm (trampoline_initial): Use \"bcl 20,31\".\n+\t(__trampoline_setup): Likewise.  Init r30 before plt call.\n+\n 2005-05-31  DJ Delorie  <dj@redhat.com>\n \n \t* expr.c (convert_move): When a partial_int requires multiple"}, {"sha": "a379fca60421a1e09d7efe7f64ad574eeab23771", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -1581,6 +1581,9 @@ powerpc64-*-linux*)\n \ttest x$with_cpu != x || cpu_is_64bit=yes\n \ttest x$cpu_is_64bit != xyes || tm_file=\"${tm_file} rs6000/default64.h\"\n \ttm_file=\"rs6000/biarch64.h ${tm_file} rs6000/linux64.h\"\n+\tif test x${enable_secureplt} = xyes; then\n+\t\ttm_file=\"rs6000/secureplt.h ${tm_file}\"\n+\tfi\n \textra_options=\"${extra_options} rs6000/sysv4.opt rs6000/linux64.opt\"\n \ttmake_file=\"rs6000/t-fprules ${tmake_file} rs6000/t-ppccomm rs6000/t-linux64\"\n \t;;\n@@ -1690,6 +1693,9 @@ powerpc-*-linux*)\n \t\ttm_file=\"${tm_file} rs6000/linux.h\"\n \t\t;;\n \tesac\n+\tif test x${enable_secureplt} = xyes; then\n+\t\ttm_file=\"rs6000/secureplt.h ${tm_file}\"\n+\tfi\n \t;;\n powerpc-*-gnu-gnualtivec*)\n \ttm_file=\"${cpu_type}/${cpu_type}.h elfos.h svr4.h freebsd-spec.h gnu.h rs6000/sysv4.h rs6000/linux.h rs6000/linuxaltivec.h rs6000/gnu.h\""}, {"sha": "33cb9741f14d1e9604c7b25300b9fab08f7e5f77", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -227,6 +227,12 @@\n #endif\n \n \n+/* Define if your assembler supports R_PPC_REL16 relocs. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_REL16\n+#endif\n+\n+\n /* Define if your assembler supports -relax option. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_RELAX_OPTION"}, {"sha": "265a9ef402fedd2959ce20ae32f9c3ec131afc99", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -12572,15 +12572,49 @@ rs6000_emit_load_toc_table (int fromprolog)\n   rtx dest, insn;\n   dest = gen_rtx_REG (Pmode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n \n-  if (TARGET_ELF && DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n+  if (TARGET_ELF && TARGET_SECURE_PLT && DEFAULT_ABI != ABI_AIX && flag_pic)\n     {\n-      rtx temp = (fromprolog\n-\t\t  ? gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n-\t\t  : gen_reg_rtx (Pmode));\n-      insn = emit_insn (gen_load_toc_v4_pic_si (temp));\n+      char buf[30];\n+      rtx lab, tmp1, tmp2, got, tempLR;\n+\n+      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCF\", rs6000_pic_labelno);\n+      lab = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n+      if (flag_pic == 2)\n+\tgot = gen_rtx_SYMBOL_REF (Pmode, toc_label_name);\n+      else\n+\tgot = rs6000_got_sym ();\n+      tmp1 = tmp2 = dest;\n+      if (!fromprolog)\n+\t{\n+\t  tmp1 = gen_reg_rtx (Pmode);\n+\t  tmp2 = gen_reg_rtx (Pmode);\n+\t}\n+      tempLR = (fromprolog\n+\t\t? gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n+\t\t: gen_reg_rtx (Pmode));\n+      insn = emit_insn (gen_load_toc_v4_PIC_1 (tempLR, lab));\n+      if (fromprolog)\n+\trs6000_maybe_dead (insn);\n+      insn = emit_move_insn (tmp1, tempLR);\n+      if (fromprolog)\n+\trs6000_maybe_dead (insn);\n+      insn = emit_insn (gen_load_toc_v4_PIC_3b (tmp2, tmp1, got, lab));\n+      if (fromprolog)\n+\trs6000_maybe_dead (insn);\n+      insn = emit_insn (gen_load_toc_v4_PIC_3c (dest, tmp2, got, lab));\n+      if (fromprolog)\n+\trs6000_maybe_dead (insn);\n+    }\n+  else if (TARGET_ELF && DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n+    {\n+      rtx tempLR = (fromprolog\n+\t\t    ? gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n+\t\t    : gen_reg_rtx (Pmode));\n+\n+      insn = emit_insn (gen_load_toc_v4_pic_si (tempLR));\n       if (fromprolog)\n \trs6000_maybe_dead (insn);\n-      insn = emit_move_insn (dest, temp);\n+      insn = emit_move_insn (dest, tempLR);\n       if (fromprolog)\n \trs6000_maybe_dead (insn);\n     }\n@@ -13674,7 +13708,8 @@ rs6000_emit_prologue (void)\n \n   /* If we are using RS6000_PIC_OFFSET_TABLE_REGNUM, we need to set it up.  */\n   if ((TARGET_TOC && TARGET_MINIMAL_TOC && get_pool_size () != 0)\n-      || (DEFAULT_ABI == ABI_V4 && flag_pic == 1\n+      || (DEFAULT_ABI == ABI_V4\n+\t  && (flag_pic == 1 || (flag_pic && TARGET_SECURE_PLT))\n \t  && regs_ever_live[RS6000_PIC_OFFSET_TABLE_REGNUM]))\n     {\n       /* If emit_load_toc_table will use the link register, we need to save\n@@ -17204,6 +17239,7 @@ rs6000_elf_declare_function_name (FILE *file, const char *name, tree decl)\n     }\n \n   if (TARGET_RELOCATABLE\n+      && !TARGET_SECURE_PLT\n       && (get_pool_size () != 0 || current_function_profile)\n       && uses_TOC ())\n     {"}, {"sha": "2710dad4dae60e9ac4a5bfc8d9b3b5e9c7f6acf4", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -144,6 +144,10 @@\n #define TARGET_POPCNTB 0\n #endif\n \n+#ifndef TARGET_SECURE_PLT\n+#define TARGET_SECURE_PLT 0\n+#endif\n+\n #define TARGET_32BIT\t\t(! TARGET_64BIT)\n \n /* Emit a dtp-relative reference to a TLS variable.  */"}, {"sha": "02847df7c2ff18f3f84ae9286a0b98246601ad06", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 117, "deletions": 25, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -7360,26 +7360,6 @@\n \f\n ;; Now define ways of moving data around.\n \n-;; Elf specific ways of loading addresses for non-PIC code.\n-;; The output of this could be r0, but we make a very strong\n-;; preference for a base register because it will usually\n-;; be needed there.\n-(define_insn \"elf_high\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b*r\")\n-\t(high:SI (match_operand 1 \"\" \"\")))]\n-  \"TARGET_ELF && ! TARGET_64BIT\"\n-  \"{liu|lis} %0,%1@ha\")\n-\n-(define_insn \"elf_low\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,!*r\")\n-\t\t   (match_operand 2 \"\" \"\")))]\n-   \"TARGET_ELF && ! TARGET_64BIT\"\n-   \"@\n-    {cal|la} %0,%2@l(%1)\n-    {ai|addic} %0,%1,%K2\")\n-\n-\n ;; Set up a register with a value from the GOT table\n \n (define_expand \"movsi_got\"\n@@ -9810,7 +9790,8 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n \t(match_operand:SI 1 \"immediate_operand\" \"s\"))\n    (use (unspec [(match_dup 1)] UNSPEC_TOC))]\n-  \"TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n+  \"TARGET_ELF && DEFAULT_ABI != ABI_AIX\n+   && (flag_pic == 2 || (flag_pic && TARGET_SECURE_PLT))\"\n   \"bcl 20,31,%1\\\\n%1:\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n@@ -9833,6 +9814,22 @@\n   \"{l|lwz} %0,%2-%3(%1)\"\n   [(set_attr \"type\" \"load\")])\n \n+(define_insn \"load_toc_v4_PIC_3b\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b\")\n+\t(plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t (high:SI\n+\t\t   (minus:SI (match_operand:SI 2 \"symbol_ref_operand\" \"s\")\n+\t\t\t     (match_operand:SI 3 \"symbol_ref_operand\" \"s\")))))]\n+  \"TARGET_ELF && TARGET_SECURE_PLT && DEFAULT_ABI != ABI_AIX && flag_pic\"\n+  \"{cau|addis} %0,%1,%2-%3@ha\")\n+\n+(define_insn \"load_toc_v4_PIC_3c\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (minus:SI (match_operand:SI 2 \"symbol_ref_operand\" \"s\")\n+\t\t\t     (match_operand:SI 3 \"symbol_ref_operand\" \"s\"))))]\n+  \"TARGET_ELF && TARGET_SECURE_PLT && DEFAULT_ABI != ABI_AIX && flag_pic\"\n+  \"{cal|addi} %0,%1,%2-%3@l\")\n \n ;; If the TOC is shared over a translation unit, as happens with all\n ;; the kinds of PIC that we support, we need to restore the TOC\n@@ -9867,6 +9864,25 @@\n     rs6000_emit_load_toc_table (FALSE);\n   DONE;\n }\")\n+\n+;; Elf specific ways of loading addresses for non-PIC code.\n+;; The output of this could be r0, but we make a very strong\n+;; preference for a base register because it will usually\n+;; be needed there.\n+(define_insn \"elf_high\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b*r\")\n+\t(high:SI (match_operand 1 \"\" \"\")))]\n+  \"TARGET_ELF && ! TARGET_64BIT\"\n+  \"{liu|lis} %0,%1@ha\")\n+\n+(define_insn \"elf_low\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,!*r\")\n+\t\t   (match_operand 2 \"\" \"\")))]\n+   \"TARGET_ELF && ! TARGET_64BIT\"\n+   \"@\n+    {cal|la} %0,%2@l(%1)\n+    {ai|addic} %0,%1,%K2\")\n \f\n ;; A function pointer under AIX is a pointer to a data area whose first word\n ;; contains the actual address of the function, whose second word contains a\n@@ -9983,6 +9999,25 @@\n \n   operands[0] = XEXP (operands[0], 0);\n \n+  if (DEFAULT_ABI == ABI_V4 && TARGET_SECURE_PLT\n+      && flag_pic\n+      && GET_CODE (operands[0]) == SYMBOL_REF\n+      && !SYMBOL_REF_LOCAL_P (operands[0]))\n+    {\n+      rtx call;\n+      rtvec tmp;\n+\n+      tmp = gen_rtvec (3,\n+\t\t       gen_rtx_CALL (VOIDmode,\n+\t\t\t\t     gen_rtx_MEM (SImode, operands[0]),\n+\t\t\t\t     operands[1]),\n+\t\t       gen_rtx_USE (VOIDmode, operands[2]),\n+\t\t       gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (SImode)));\n+      call = emit_call_insn (gen_rtx_PARALLEL (VOIDmode, tmp));\n+      use_reg (&CALL_INSN_FUNCTION_USAGE (call), pic_offset_table_rtx);\n+      DONE;\n+    }\n+\n   if (GET_CODE (operands[0]) != SYMBOL_REF\n       || (DEFAULT_ABI == ABI_AIX && !SYMBOL_REF_FUNCTION_P (operands[0]))\n       || (DEFAULT_ABI != ABI_DARWIN && (INTVAL (operands[2]) & CALL_LONG) != 0))\n@@ -10034,6 +10069,28 @@\n \n   operands[1] = XEXP (operands[1], 0);\n \n+  if (DEFAULT_ABI == ABI_V4 && TARGET_SECURE_PLT\n+      && flag_pic\n+      && GET_CODE (operands[1]) == SYMBOL_REF\n+      && !SYMBOL_REF_LOCAL_P (operands[1]))\n+    {\n+      rtx call;\n+      rtvec tmp;\n+\n+      tmp = gen_rtvec (3,\n+\t\t       gen_rtx_SET (VOIDmode,\n+\t\t\t\t    operands[0],\n+\t\t\t\t    gen_rtx_CALL (VOIDmode,\n+\t\t\t\t\t\t  gen_rtx_MEM (SImode,\n+\t\t\t\t\t\t\t       operands[1]),\n+\t\t\t\t\t\t  operands[2])),\n+\t\t       gen_rtx_USE (VOIDmode, operands[3]),\n+\t\t       gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (SImode)));\n+      call = emit_call_insn (gen_rtx_PARALLEL (VOIDmode, tmp));\n+      use_reg (&CALL_INSN_FUNCTION_USAGE (call), pic_offset_table_rtx);\n+      DONE;\n+    }\n+\n   if (GET_CODE (operands[1]) != SYMBOL_REF\n       || (DEFAULT_ABI == ABI_AIX && !SYMBOL_REF_FUNCTION_P (operands[1]))\n       || (DEFAULT_ABI != ABI_DARWIN && (INTVAL (operands[3]) & CALL_LONG) != 0))\n@@ -10307,7 +10364,18 @@\n #if TARGET_MACHO\n   return output_call(insn, operands, 0, 2);\n #else\n-  return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \"bl %z0@plt\" : \"bl %z0\";\n+  if (DEFAULT_ABI == ABI_V4 && flag_pic)\n+    {\n+      if (TARGET_SECURE_PLT && flag_pic == 2)\n+\t/* The magic 32768 offset here and in the other sysv call insns\n+\t   corresponds to the offset of r30 in .got2, as given by LCTOC1.\n+\t   See sysv4.h:toc_section.  */\n+\treturn \"bl %z0+32768@plt\";\n+      else\n+\treturn \"bl %z0@plt\";\n+    }\n+  else\n+    return \"bl %z0\";\n #endif\n }\n   [(set_attr \"type\" \"branch,branch\")\n@@ -10352,7 +10420,15 @@\n #if TARGET_MACHO\n   return output_call(insn, operands, 1, 3);\n #else\n-  return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \"bl %z1@plt\" : \"bl %z1\";\n+  if (DEFAULT_ABI == ABI_V4 && flag_pic)\n+    {\n+      if (TARGET_SECURE_PLT && flag_pic == 2)\n+\treturn \"bl %z1+32768@plt\";\n+      else\n+\treturn \"bl %z1@plt\";\n+    }\n+  else\n+    return \"bl %z1\";\n #endif\n }\n   [(set_attr \"type\" \"branch,branch\")\n@@ -10567,7 +10643,15 @@\n   else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n-  return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \\\"b %z0@plt\\\" : \\\"b %z0\\\";\n+  if (DEFAULT_ABI == ABI_V4 && flag_pic)\n+    {\n+      if (TARGET_SECURE_PLT && flag_pic == 2)\n+\treturn \\\"b %z0+32768@plt\\\";\n+      else\n+\treturn \\\"b %z0@plt\\\";\n+    }\n+  else\n+    return \\\"b %z0\\\";\n }\"\n   [(set_attr \"type\" \"branch,branch\")\n    (set_attr \"length\" \"4,8\")])\n@@ -10613,7 +10697,15 @@\n   else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n-  return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \\\"b %z1@plt\\\" : \\\"b %z1\\\";\n+  if (DEFAULT_ABI == ABI_V4 && flag_pic)\n+    {\n+      if (TARGET_SECURE_PLT && flag_pic == 2)\n+\treturn \\\"b %z1+32768@plt\\\";\n+      else\n+\treturn \\\"b %z1@plt\\\";\n+    }\n+  else\n+    return \\\"b %z1\\\";\n }\"\n   [(set_attr \"type\" \"branch,branch\")\n    (set_attr \"length\" \"4,8\")])"}, {"sha": "91aea5634bbc20b13977c7217bfd7efbe873ad27", "filename": "gcc/config/rs6000/secureplt.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Fsecureplt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Fsecureplt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsecureplt.h?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -0,0 +1,21 @@\n+/* Default to -msecure-plt.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#define CC1_SECURE_PLT_DEFAULT_SPEC \"-msecure-plt\""}, {"sha": "ed5deb1a55e0b14c7fd23c92989835f20ce2c1ce", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -59,6 +59,11 @@ extern enum rs6000_sdata_type rs6000_sdata;\n #define\tTARGET_NO_TOC\t\t(! TARGET_TOC)\n #define\tTARGET_NO_EABI\t\t(! TARGET_EABI)\n \n+#ifdef HAVE_AS_REL16\n+#undef TARGET_SECURE_PLT\n+#define TARGET_SECURE_PLT\tsecure_plt\n+#endif\n+\n extern const char *rs6000_abi_name;\n extern const char *rs6000_sdata_name;\n extern const char *rs6000_tls_size_string; /* For -mtls-size= */\n@@ -205,6 +210,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n       error (\"-mcall-aixdesc must be big endian\");\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_SECURE_PLT != secure_plt)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      error (\"-msecure-plt not supported by your assembler\");\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   /* Treat -fPIC the same as -mrelocatable.  */\t\t\t\t\\\n   if (flag_pic > 1 && DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n     target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC; \\\n@@ -750,6 +760,10 @@ extern int fixuplabelno;\n \n #define\tCC1_ENDIAN_DEFAULT_SPEC \"%(cc1_endian_big)\"\n \n+#ifndef CC1_SECURE_PLT_DEFAULT_SPEC\n+#define CC1_SECURE_PLT_DEFAULT_SPEC \"\"\n+#endif\n+\n /* Pass -G xxx to the compiler and set correct endian mode.  */\n #define\tCC1_SPEC \"%{G*} \\\n %{mlittle|mlittle-endian: %(cc1_endian_little);           \\\n@@ -762,7 +776,6 @@ extern int fixuplabelno;\n   mcall-gnu             : -mbig %(cc1_endian_big);        \\\n   mcall-i960-old        : -mlittle %(cc1_endian_little);  \\\n                         : %(cc1_endian_default)}          \\\n-%{mno-sdata: -msdata=none } \\\n %{meabi: %{!mcall-*: -mcall-sysv }} \\\n %{!meabi: %{!mno-eabi: \\\n     %{mrelocatable: -meabi } \\\n@@ -774,6 +787,7 @@ extern int fixuplabelno;\n     %{mcall-openbsd: -mno-eabi }}} \\\n %{msdata: -msdata=default} \\\n %{mno-sdata: -msdata=none} \\\n+%{!mbss-plt: %{!msecure-plt: %(cc1_secure_plt_default)}} \\\n %{profile: -p}\"\n \n /* Don't put -Y P,<path> for cross compilers.  */\n@@ -1214,6 +1228,7 @@ ncrtn.o%s\"\n   { \"cc1_endian_big\",\t\tCC1_ENDIAN_BIG_SPEC },\t\t\t\\\n   { \"cc1_endian_little\",\tCC1_ENDIAN_LITTLE_SPEC },\t\t\\\n   { \"cc1_endian_default\",\tCC1_ENDIAN_DEFAULT_SPEC },\t\t\\\n+  { \"cc1_secure_plt_default\",\tCC1_SECURE_PLT_DEFAULT_SPEC },\t\t\\\n   { \"cpp_os_ads\",\t\tCPP_OS_ADS_SPEC },\t\t\t\\\n   { \"cpp_os_yellowknife\",\tCPP_OS_YELLOWKNIFE_SPEC },\t\t\\\n   { \"cpp_os_mvme\",\t\tCPP_OS_MVME_SPEC },\t\t\t\\"}, {"sha": "289c6e19e211634f18879d410cefd3f50744bfee", "filename": "gcc/config/rs6000/sysv4.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Fsysv4.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Fsysv4.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.opt?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -139,3 +139,11 @@ Generate 32-bit code\n mnewlib\n Target RejectNegative\n no description yet\n+\n+msecure-plt\n+Target Report RejectNegative Var(secure_plt, 1)\n+Generate code to use a non-exec PLT and GOT\n+\n+mbss-plt\n+Target Report RejectNegative Var(secure_plt, 0)\n+Generate code for old exec BSS PLT"}, {"sha": "0c6127d567bda2cb9e65eca0a26b857e5f435319", "filename": "gcc/config/rs6000/tramp.asm", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Ftramp.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfig%2Frs6000%2Ftramp.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ftramp.asm?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -44,7 +44,7 @@\n \t.align\t2\n trampoline_initial:\n \tmflr\tr0\n-\tbl\t1f\n+\tbcl\t20,31,1f\n .Lfunc = .-trampoline_initial\n \t.long\t0\t\t\t/* will be replaced with function address */\n .Lchain = .-trampoline_initial\n@@ -67,7 +67,7 @@ trampoline_size = .-trampoline_initial\n \n FUNC_START(__trampoline_setup)\n \tmflr\tr0\t\t/* save return address */\n-        bl\t.LCF0\t\t/* load up __trampoline_initial into r7 */\n+        bcl\t20,31,.LCF0\t/* load up __trampoline_initial into r7 */\n .LCF0:\n         mflr\tr11\n         addi\tr7,r11,trampoline_initial-4-.LCF0 /* trampoline address -4 */\n@@ -105,6 +105,12 @@ FUNC_START(__trampoline_setup)\n \tblr\n \n .Labort:\n+#if defined SHARED && defined HAVE_AS_REL16\n+\tbcl\t20,31,1f\n+1:\tmflr\tr30\n+\taddis\tr30,r30,_GLOBAL_OFFSET_TABLE_-1b@ha\n+\taddi\tr30,r30,_GLOBAL_OFFSET_TABLE_-1b@l\n+#endif\n \tbl\tJUMP_TARGET(abort)\n FUNC_END(__trampoline_setup)\n "}, {"sha": "17b9c8a3427a0b3f5dffd88df9b4cce6aa75ed50", "filename": "gcc/configure", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -891,6 +891,7 @@ Optional Features:\n   --enable-initfini-array\tuse .init_array/.fini_array sections\n   --enable-sjlj-exceptions\n                           arrange to use setjmp/longjmp exception handling\n+  --enable-secureplt      enable -msecure-plt by default for PowerPC\n   --disable-win32-registry\n                           disable lookup of installation paths in the\n                           Registry on Windows hosts\n@@ -7402,7 +7403,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:7405: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:7406: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[2-9]*)\n@@ -12361,6 +12362,12 @@ case \"$LIBINTL\" in *$LIBICONV*)\n \tLIBICONV= ;;\n esac\n \n+# Check whether --enable-secureplt or --disable-secureplt was given.\n+if test \"${enable_secureplt+set}\" = set; then\n+  enableval=\"$enable_secureplt\"\n+\n+fi;\n+\n # Windows32 Registry support for specifying GCC installation paths.\n # Check whether --enable-win32-registry or --disable-win32-registry was given.\n if test \"${enable_win32_registry+set}\" = set; then\n@@ -14729,6 +14736,55 @@ _ACEOF\n \n fi\n \n+    case $target in\n+      *-*-aix*) conftest_s='\t.csect .text[PR]\n+LCF..0:\n+\taddis 11,30,_GLOBAL_OFFSET_TABLE_-LCF..0@ha';;\n+      *-*-darwin*)\n+\tconftest_s='\t.text\n+LCF0:\n+\taddis r11,r30,_GLOBAL_OFFSET_TABLE_-LCF0@ha';;\n+      *) conftest_s='\t.text\n+.LCF0:\n+\taddis 11,30,_GLOBAL_OFFSET_TABLE_-.LCF0@ha';;\n+    esac\n+\n+    echo \"$as_me:$LINENO: checking assembler for rel16 relocs\" >&5\n+echo $ECHO_N \"checking assembler for rel16 relocs... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_powerpc_rel16+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_powerpc_rel16=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 17 \\) \\* 1000 + 0`\n+  then gcc_cv_as_powerpc_rel16=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as -a32 -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_powerpc_rel16=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_powerpc_rel16\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_powerpc_rel16\" >&6\n+if test $gcc_cv_as_powerpc_rel16 = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_REL16 1\n+_ACEOF\n+\n+fi\n     ;;\n \n   mips*-*-*)"}, {"sha": "fd1476c05e3ebcc0416b1b512c3802b5ad68b9ce", "filename": "gcc/configure.ac", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -1441,6 +1441,10 @@ case \"$LIBINTL\" in *$LIBICONV*)\n \tLIBICONV= ;;\n esac\n \n+AC_ARG_ENABLE(secureplt,\n+[  --enable-secureplt      enable -msecure-plt by default for PowerPC],\n+[], [])\n+\n # Windows32 Registry support for specifying GCC installation paths.\n AC_ARG_ENABLE(win32-registry,\n [  --disable-win32-registry\n@@ -2822,6 +2826,24 @@ foo:\tnop\n       [AC_DEFINE(HAVE_AS_POPCNTB, 1,\n \t  [Define if your assembler supports popcntb field.])])\n \n+    case $target in\n+      *-*-aix*) conftest_s='\t.csect .text[[PR]]\n+LCF..0:\n+\taddis 11,30,_GLOBAL_OFFSET_TABLE_-LCF..0@ha';;\n+      *-*-darwin*)\n+\tconftest_s='\t.text\n+LCF0:\n+\taddis r11,r30,_GLOBAL_OFFSET_TABLE_-LCF0@ha';;\n+      *) conftest_s='\t.text\n+.LCF0:\n+\taddis 11,30,_GLOBAL_OFFSET_TABLE_-.LCF0@ha';;\n+    esac\n+\n+    gcc_GAS_CHECK_FEATURE([rel16 relocs],\n+      gcc_cv_as_powerpc_rel16, [2,17,0], -a32,\n+      [$conftest_s],,\n+      [AC_DEFINE(HAVE_AS_REL16, 1,\n+\t  [Define if your assembler supports R_PPC_REL16 relocs.])])\n     ;;\n \n   mips*-*-*)"}, {"sha": "981a92f4d849dbe31cced54b5518bcc07444ae60", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -1072,6 +1072,27 @@ do a @samp{make -C gcc gnatlib_and_tools}.\n Specify that the compiler should\n use DWARF 2 debugging information as the default.\n \n+@item --enable-targets=all\n+@itemx --enable-targets=@var{target_list}\n+Some GCC targets, e.g.@: powerpc64-linux, build bi-arch compilers.\n+These are compilers that are able to generate either 64-bit or 32-bit\n+code.  Typicially, the corresponding 32-bit target, e.g.@:\n+powerpc-linux for powerpc64-linux, only generates 32-bit code.  This\n+option enables the 32-bit target to be a bi-arch compiler, which is\n+useful when you want a bi-arch compiler that defaults to 32-bit, and\n+you are building a bi-arch or multi-arch binutils in a combined tree.\n+Currently, this option only affects powerpc-linux.\n+\n+@item --enable-secureplt\n+This option enables @option{-msecure-plt} by default for powerpc-linux.\n+@ifnothtml\n+@xref{RS/6000 and PowerPC Options,, RS/6000 and PowerPC Options, gcc,\n+Using the GNU Compiler Collection (GCC)},\n+@end ifnothtml\n+@ifhtml\n+See ``RS/6000 and PowerPC Options'' in the main manual\n+@end ifhtml\n+\n @item --enable-win32-registry\n @itemx --enable-win32-registry=@var{key}\n @itemx --disable-win32-registry\n@@ -2465,7 +2486,7 @@ ARM-family processors.  These targets support the AOUT file format:\n ATMEL AVR-family micro controllers.  These are used in embedded\n applications.  There are no standard Unix configurations.\n @ifnothtml\n-@xref{AVR Options,, AVR Options, gcc, Using and Porting the GNU Compiler\n+@xref{AVR Options,, AVR Options, gcc, Using the GNU Compiler\n Collection (GCC)},\n @end ifnothtml\n @ifhtml\n@@ -2503,8 +2524,8 @@ indicates that you should upgrade to a newer version of the binutils.\n \n The Blackfin processor, an Analog Devices DSP.\n @ifnothtml\n-@xref{Blackfin Options,, Blackfin Options, gcc, Using and Porting the GNU\n-Compiler Collection (GCC)},\n+@xref{Blackfin Options,, Blackfin Options, gcc, Using the GNU Compiler\n+Collection (GCC)},\n @end ifnothtml\n @ifhtml\n See ``Blackfin Options'' in the main manual\n@@ -2522,8 +2543,8 @@ Texas Instruments TMS320C3x and TMS320C4x Floating Point Digital Signal\n Processors.  These are used in embedded applications.  There are no\n standard Unix configurations.\n @ifnothtml\n-@xref{TMS320C3x/C4x Options,, TMS320C3x/C4x Options, gcc, Using and\n-Porting the GNU Compiler Collection (GCC)},\n+@xref{TMS320C3x/C4x Options,, TMS320C3x/C4x Options, gcc, Using the\n+GNU Compiler Collection (GCC)},\n @end ifnothtml\n @ifhtml\n See ``TMS320C3x/C4x Options'' in the main manual\n@@ -2552,7 +2573,7 @@ CRIS is the CPU architecture in Axis Communications ETRAX system-on-a-chip\n series.  These are used in embedded applications.\n \n @ifnothtml\n-@xref{CRIS Options,, CRIS Options, gcc, Using and Porting the GNU Compiler\n+@xref{CRIS Options,, CRIS Options, gcc, Using the GNU Compiler\n Collection (GCC)},\n @end ifnothtml\n @ifhtml"}, {"sha": "76832f7cd382c7a49fb1785d982c6b3026010ca4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f970b709293482a5ce87bb4f01a765aae831a26/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7f970b709293482a5ce87bb4f01a765aae831a26", "patch": "@@ -636,7 +636,7 @@ See RS/6000 and PowerPC Options.\n -minsert-sched-nops=@var{scheme} @gol\n -mcall-sysv  -mcall-netbsd @gol\n -maix-struct-return  -msvr4-struct-return @gol\n--mabi=@var{abi-type} @gol\n+-mabi=@var{abi-type} -msecure-plt -mbss-plt @gol\n -misel -mno-isel @gol\n -misel=yes  -misel=no @gol\n -mspe -mno-spe @gol\n@@ -10733,6 +10733,18 @@ ABI@.\n @opindex mabi=no-spe\n Disable Booke SPE ABI extensions for the current ABI@.\n \n+@item -msecure-plt\n+@opindex msecure-plt\n+Generate code that allows ld and ld.so to build executables and shared\n+libraries with non-exec .plt and .got sections.  This is a PowerPC\n+32-bit SYSV ABI option.\n+\n+@item -mbss-plt\n+@opindex mbss-plt\n+Generate code that uses a BSS .plt section that ld.so fills in, and\n+requires .plt and .got sections that are both writable and executable.\n+This is a PowerPC 32-bit SYSV ABI option.\n+\n @item -misel\n @itemx -mno-isel\n @opindex misel"}]}