{"sha": "deb176fa3bb3d05c3fba4f1dc36735853bc18804", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGViMTc2ZmEzYmIzZDA1YzNmYmE0ZjFkYzM2NzM1ODUzYmMxODgwNA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-09-09T01:25:48Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-09-09T01:25:48Z"}, "message": "re PR c/8420 (volatile after the type specifier for an unnamed structure is rejected)\n\n\tPR c/8420\n\t* c-tree.h (struct c_declspecs): New.\n\t(struct c_declarator, struct c_type_name, struct c_parm): Update\n\telement types.\n\t(build_array_declarator, grokfield, shadow_tag, shadow_tag_warned,\n\tstart_function, start_decl, build_c_parm,\n\tmake_pointer_declarator): Update prototypes.\n\t(build_null_declspecs, declspecs_add_qual, declspecs_add_type,\n\tdeclspecs_add_scspec, declspecs_add_attrs): New.\n\t(split_specs_attrs): Remove.\n\t* c-parse.in (%union): Add dsptype.\n\t(declspecs_nosc_nots_nosa_noea, declspecs_nosc_nots_nosa_ea,\n\tdeclspecs_nosc_nots_sa_noea, declspecs_nosc_nots_sa_ea,\n\tdeclspecs_nosc_ts_nosa_noea, declspecs_nosc_ts_nosa_ea,\n\tdeclspecs_nosc_ts_sa_noea, declspecs_nosc_ts_sa_ea,\n\tdeclspecs_sc_nots_nosa_noea, declspecs_sc_nots_nosa_ea,\n\tdeclspecs_sc_nots_sa_noea, declspecs_sc_nots_sa_ea,\n\tdeclspecs_sc_ts_nosa_noea, declspecs_sc_ts_nosa_ea,\n\tdeclspecs_sc_ts_sa_noea, declspecs_sc_ts_sa_ea, declspecs_ts,\n\tdeclspecs_nots, declspecs_ts_nosa, declspecs_nots_nosa,\n\tdeclspecs_nosc_ts, declspecs_nosc_nots, declspecs_nosc, declspecs,\n\tmaybe_type_quals_attrs): Change to dsptype.\n\t(struct c_declspec_stack): New.\n\t(current_declspecs, declspec_stack): Change type.\n\t(PUSH_DECLSPEC_STACK, POP_DECLSPEC_STACK): Update to new\n\tstructures.\n\t(extdefs): Likewise.\n\t(setspecs): Likewise.\n\t(fndef): Use current_declspecs for empty declspecs list.\n\t(declspecs_nosc_nots_nosa_noea, declspecs_nosc_nots_nosa_ea,\n\tdeclspecs_nosc_nots_sa_noea, declspecs_nosc_nots_sa_ea,\n\tdeclspecs_nosc_ts_nosa_noea, declspecs_nosc_ts_nosa_ea,\n\tdeclspecs_nosc_ts_sa_noea, declspecs_nosc_ts_sa_ea,\n\tdeclspecs_sc_nots_nosa_noea, declspecs_sc_nots_nosa_ea,\n\tdeclspecs_sc_nots_sa_noea, declspecs_sc_nots_sa_ea,\n\tdeclspecs_sc_ts_nosa_noea, declspecs_sc_ts_nosa_ea,\n\tdeclspecs_sc_ts_sa_noea, declspecs_sc_ts_sa_ea): Update to new\n\tstructures and helper functions.  Update comments.\n\t(typespec_nonattr): Correct comment.\n\t(maybe_type_quals_attrs, typename): Update to new structures.\n\t* c-decl.c (grokdeclarator, build_array_declarator, grokfield,\n\tshadow_tag, shadow_tag_warned, start_function, start_decl,\n\tbuild_c_parm, make_pointer_declarator,\n\tset_array_declarator_inner, groktypename): Update to new\n\tstructures.\n\t(build_null_declspecs, declspecs_add_qual, declspecs_add_type,\n\tdeclspecs_add_scspec, declspecs_add_attrs): New.\n\t(split_specs_attrs): Remove.\n\t(shadow_tag_warned): Make warning for useless type names a\n\tpedwarn.  Give hard error for long, short, signed, unsigned or\n\t_Complex used with struct, union or enum in empty declaration.\n\tMake found_tag a bool.\n\t(grokdeclarator): Remove checks now done at parse time.\n\ntestsuite:\n\t* gcc.dg/anon-struct-4.c, gcc.dg/declspec-1.c,\n\tgcc.dg/declspec-2.c, gcc.dg/declspec-3.c, gcc.dg/declspec-4.c,\n\tgcc.dg/declspec-5.c, gcc.dg/declspec-6.c,\n\tgcc.dg/long-long-typespec-1.c: New tests.\n\t* gcc.dg/tls/diag-2.c: Update expected diagnostics\n\nFrom-SVN: r87218", "tree": {"sha": "9281b8a84cb7f58197f54b2a640390953626fb55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9281b8a84cb7f58197f54b2a640390953626fb55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/deb176fa3bb3d05c3fba4f1dc36735853bc18804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb176fa3bb3d05c3fba4f1dc36735853bc18804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb176fa3bb3d05c3fba4f1dc36735853bc18804", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb176fa3bb3d05c3fba4f1dc36735853bc18804/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8893e4723c8ce3462bfd1298afde78e5327c260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8893e4723c8ce3462bfd1298afde78e5327c260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8893e4723c8ce3462bfd1298afde78e5327c260"}], "stats": {"total": 2155, "additions": 1561, "deletions": 594}, "files": [{"sha": "0c7706cade7d31018b771ba2104f294275aacad1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -1,3 +1,59 @@\n+2004-09-09  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/8420\n+\t* c-tree.h (struct c_declspecs): New.\n+\t(struct c_declarator, struct c_type_name, struct c_parm): Update\n+\telement types.\n+\t(build_array_declarator, grokfield, shadow_tag, shadow_tag_warned,\n+\tstart_function, start_decl, build_c_parm,\n+\tmake_pointer_declarator): Update prototypes.\n+\t(build_null_declspecs, declspecs_add_qual, declspecs_add_type,\n+\tdeclspecs_add_scspec, declspecs_add_attrs): New.\n+\t(split_specs_attrs): Remove.\n+\t* c-parse.in (%union): Add dsptype.\n+\t(declspecs_nosc_nots_nosa_noea, declspecs_nosc_nots_nosa_ea,\n+\tdeclspecs_nosc_nots_sa_noea, declspecs_nosc_nots_sa_ea,\n+\tdeclspecs_nosc_ts_nosa_noea, declspecs_nosc_ts_nosa_ea,\n+\tdeclspecs_nosc_ts_sa_noea, declspecs_nosc_ts_sa_ea,\n+\tdeclspecs_sc_nots_nosa_noea, declspecs_sc_nots_nosa_ea,\n+\tdeclspecs_sc_nots_sa_noea, declspecs_sc_nots_sa_ea,\n+\tdeclspecs_sc_ts_nosa_noea, declspecs_sc_ts_nosa_ea,\n+\tdeclspecs_sc_ts_sa_noea, declspecs_sc_ts_sa_ea, declspecs_ts,\n+\tdeclspecs_nots, declspecs_ts_nosa, declspecs_nots_nosa,\n+\tdeclspecs_nosc_ts, declspecs_nosc_nots, declspecs_nosc, declspecs,\n+\tmaybe_type_quals_attrs): Change to dsptype.\n+\t(struct c_declspec_stack): New.\n+\t(current_declspecs, declspec_stack): Change type.\n+\t(PUSH_DECLSPEC_STACK, POP_DECLSPEC_STACK): Update to new\n+\tstructures.\n+\t(extdefs): Likewise.\n+\t(setspecs): Likewise.\n+\t(fndef): Use current_declspecs for empty declspecs list.\n+\t(declspecs_nosc_nots_nosa_noea, declspecs_nosc_nots_nosa_ea,\n+\tdeclspecs_nosc_nots_sa_noea, declspecs_nosc_nots_sa_ea,\n+\tdeclspecs_nosc_ts_nosa_noea, declspecs_nosc_ts_nosa_ea,\n+\tdeclspecs_nosc_ts_sa_noea, declspecs_nosc_ts_sa_ea,\n+\tdeclspecs_sc_nots_nosa_noea, declspecs_sc_nots_nosa_ea,\n+\tdeclspecs_sc_nots_sa_noea, declspecs_sc_nots_sa_ea,\n+\tdeclspecs_sc_ts_nosa_noea, declspecs_sc_ts_nosa_ea,\n+\tdeclspecs_sc_ts_sa_noea, declspecs_sc_ts_sa_ea): Update to new\n+\tstructures and helper functions.  Update comments.\n+\t(typespec_nonattr): Correct comment.\n+\t(maybe_type_quals_attrs, typename): Update to new structures.\n+\t* c-decl.c (grokdeclarator, build_array_declarator, grokfield,\n+\tshadow_tag, shadow_tag_warned, start_function, start_decl,\n+\tbuild_c_parm, make_pointer_declarator,\n+\tset_array_declarator_inner, groktypename): Update to new\n+\tstructures.\n+\t(build_null_declspecs, declspecs_add_qual, declspecs_add_type,\n+\tdeclspecs_add_scspec, declspecs_add_attrs): New.\n+\t(split_specs_attrs): Remove.\n+\t(shadow_tag_warned): Make warning for useless type names a\n+\tpedwarn.  Give hard error for long, short, signed, unsigned or\n+\t_Complex used with struct, union or enum in empty declaration.\n+\tMake found_tag a bool.\n+\t(grokdeclarator): Remove checks now done at parse time.\n+\n 2004-09-09  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* c-tree.h (enum c_declarator_kind, struct c_arg_info, struct"}, {"sha": "12e27a0053dc3518be3de01c5f17eceaaf2de159", "filename": "gcc/c-decl.c", "status": "modified", "additions": 264, "deletions": 327, "changes": 591, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -398,7 +398,8 @@ static GTY(()) tree static_dtors;\n /* Forward declarations.  */\n static tree lookup_name_in_scope (tree, struct c_scope *);\n static tree c_make_fname_decl (tree, int);\n-static tree grokdeclarator (const struct c_declarator *, tree,\n+static tree grokdeclarator (const struct c_declarator *,\n+\t\t\t    struct c_declspecs *,\n \t\t\t    enum decl_context, bool, tree *);\n static tree grokparms (struct c_arg_info *, bool);\n static void layout_array_type (tree);\n@@ -2666,29 +2667,23 @@ builtin_function (const char *name, tree type, int function_code,\n    Otherwise, it is an error.  */\n \n void\n-shadow_tag (tree declspecs)\n+shadow_tag (const struct c_declspecs *declspecs)\n {\n   shadow_tag_warned (declspecs, 0);\n }\n \n /* WARNED is 1 if we have done a pedwarn, 2 if we have done a warning,\n    but no pedwarn.  */\n void\n-shadow_tag_warned (tree declspecs, int warned)\n+shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n {\n-  int found_tag = 0;\n-  tree link;\n-  tree specs, attrs;\n+  bool found_tag = false;\n \n   pending_invalid_xref = 0;\n \n-  /* Remove the attributes from declspecs, since they will confuse the\n-     following code.  */\n-  split_specs_attrs (declspecs, &specs, &attrs);\n-\n-  for (link = specs; link; link = TREE_CHAIN (link))\n+  if (declspecs->type && !declspecs->typedef_decl)\n     {\n-      tree value = TREE_VALUE (link);\n+      tree value = declspecs->type;\n       enum tree_code code = TREE_CODE (value);\n \n       if (code == RECORD_TYPE || code == UNION_TYPE || code == ENUMERAL_TYPE)\n@@ -2698,7 +2693,7 @@ shadow_tag_warned (tree declspecs, int warned)\n \t  tree name = TYPE_NAME (value);\n \t  tree t;\n \n-\t  found_tag++;\n+\t  found_tag = true;\n \n \t  if (name == 0)\n \t    {\n@@ -2722,20 +2717,39 @@ shadow_tag_warned (tree declspecs, int warned)\n \t}\n       else\n \t{\n-\t  if (!warned && ! in_system_header)\n+\t  if (warned != 1 && !in_system_header)\n \t    {\n-\t      warning (\"useless keyword or type name in empty declaration\");\n-\t      warned = 2;\n+\t      pedwarn (\"useless type name in empty declaration\");\n+\t      warned = 1;\n \t    }\n \t}\n     }\n+  else if (warned != 1 && !in_system_header && declspecs->typedef_decl)\n+    {\n+      pedwarn (\"useless type name in empty declaration\");\n+      warned = 1;\n+    }\n+\n+  if (found_tag && (declspecs->specbits & ((1 << (int) RID_LONG)\n+\t\t\t\t\t   | (1 << (int) RID_SHORT)\n+\t\t\t\t\t   | (1 << (int) RID_UNSIGNED)\n+\t\t\t\t\t   | (1 << (int) RID_SIGNED)\n+\t\t\t\t\t   | (1 << (int) RID_COMPLEX))))\n+    {\n+      error (\"long, short, signed, unsigned or complex used invalidly \"\n+\t     \"in empty declaration\");\n+      warned = 1;\n+    }\n \n-  if (found_tag > 1)\n-    error (\"two types specified in one empty declaration\");\n+  if (!warned && !in_system_header && declspecs->specbits)\n+    {\n+      warning (\"useless keyword or type name in empty declaration\");\n+      warned = 2;\n+    }\n \n   if (warned != 1)\n     {\n-      if (found_tag == 0)\n+      if (!found_tag)\n \tpedwarn (\"empty declaration\");\n     }\n }\n@@ -2750,7 +2764,7 @@ shadow_tag_warned (tree declspecs, int warned)\n    filled in by set_array_declarator_inner.  */\n \n struct c_declarator *\n-build_array_declarator (tree expr, tree quals, bool static_p,\n+build_array_declarator (tree expr, struct c_declspecs *quals, bool static_p,\n \t\t\tbool vla_unspec_p)\n {\n   struct c_declarator *declarator = XOBNEW (&parser_obstack,\n@@ -2763,7 +2777,7 @@ build_array_declarator (tree expr, tree quals, bool static_p,\n   declarator->u.array.vla_unspec_p = vla_unspec_p;\n   if (pedantic && !flag_isoc99)\n     {\n-      if (static_p || quals != NULL_TREE)\n+      if (static_p || quals != NULL)\n \tpedwarn (\"ISO C90 does not support `static' or type qualifiers in parameter array declarators\");\n       if (vla_unspec_p)\n \tpedwarn (\"ISO C90 does not support `[*]' array declarators\");\n@@ -2785,103 +2799,24 @@ set_array_declarator_inner (struct c_declarator *decl,\n \t\t\t    struct c_declarator *inner, bool abstract_p)\n {\n   decl->declarator = inner;\n-  if (abstract_p && (decl->u.array.quals != NULL_TREE\n+  if (abstract_p && (decl->u.array.quals != NULL\n \t\t     || decl->u.array.static_p))\n     error (\"static or type qualifiers in abstract declarator\");\n   return decl;\n }\n \f\n-/* Split SPECS_ATTRS, a list of declspecs and prefix attributes, into two\n-   lists.  SPECS_ATTRS may also be just a typespec (eg: RECORD_TYPE).\n-\n-   The head of the declspec list is stored in DECLSPECS.\n-   The head of the attribute list is stored in PREFIX_ATTRIBUTES.\n-\n-   Note that attributes in SPECS_ATTRS are stored in the TREE_PURPOSE of\n-   the list elements.  We drop the containing TREE_LIST nodes and link the\n-   resulting attributes together the way decl_attributes expects them.  */\n-\n-void\n-split_specs_attrs (tree specs_attrs, tree *declspecs, tree *prefix_attributes)\n-{\n-  tree t, s, a, next, specs, attrs;\n-\n-  /* This can happen after an __extension__ in pedantic mode.  */\n-  if (specs_attrs != NULL_TREE\n-      && TREE_CODE (specs_attrs) == INTEGER_CST)\n-    {\n-      *declspecs = NULL_TREE;\n-      *prefix_attributes = NULL_TREE;\n-      return;\n-    }\n-\n-  /* This can happen in c++ (eg: decl: typespec initdecls ';').  */\n-  if (specs_attrs != NULL_TREE\n-      && TREE_CODE (specs_attrs) != TREE_LIST)\n-    {\n-      *declspecs = specs_attrs;\n-      *prefix_attributes = NULL_TREE;\n-      return;\n-    }\n-\n-  /* Remember to keep the lists in the same order, element-wise.  */\n-\n-  specs = s = NULL_TREE;\n-  attrs = a = NULL_TREE;\n-  for (t = specs_attrs; t; t = next)\n-    {\n-      next = TREE_CHAIN (t);\n-      /* Declspecs have a non-NULL TREE_VALUE.  */\n-      if (TREE_VALUE (t) != NULL_TREE)\n-\t{\n-\t  if (specs == NULL_TREE)\n-\t    specs = s = t;\n-\t  else\n-\t    {\n-\t      TREE_CHAIN (s) = t;\n-\t      s = t;\n-\t    }\n-\t}\n-      /* The TREE_PURPOSE may also be empty in the case of\n-\t __attribute__(()).  */\n-      else if (TREE_PURPOSE (t) != NULL_TREE)\n-\t{\n-\t  if (attrs == NULL_TREE)\n-\t    attrs = a = TREE_PURPOSE (t);\n-\t  else\n-\t    {\n-\t      TREE_CHAIN (a) = TREE_PURPOSE (t);\n-\t      a = TREE_PURPOSE (t);\n-\t    }\n-\t  /* More attrs can be linked here, move A to the end.  */\n-\t  while (TREE_CHAIN (a) != NULL_TREE)\n-\t    a = TREE_CHAIN (a);\n-\t}\n-    }\n-\n-  /* Terminate the lists.  */\n-  if (s != NULL_TREE)\n-    TREE_CHAIN (s) = NULL_TREE;\n-  if (a != NULL_TREE)\n-    TREE_CHAIN (a) = NULL_TREE;\n-\n-  /* All done.  */\n-  *declspecs = specs;\n-  *prefix_attributes = attrs;\n-}\n-\n /* Decode a \"typename\", such as \"int **\", returning a ..._TYPE node.  */\n \n tree\n groktypename (struct c_type_name *type_name)\n {\n   tree type;\n-  tree specs, attrs;\n+  tree attrs = type_name->specs->attrs;\n \n-  split_specs_attrs (type_name->specs, &specs, &attrs);\n+  type_name->specs->attrs = NULL_TREE;\n \n-  type = grokdeclarator (type_name->declarator, specs, TYPENAME, false,\n-\t\t\t NULL);\n+  type = grokdeclarator (type_name->declarator, type_name->specs, TYPENAME,\n+\t\t\t false, NULL);\n \n   /* Apply attributes.  */\n   decl_attributes (&type, attrs, 0);\n@@ -2905,7 +2840,7 @@ groktypename (struct c_type_name *type_name)\n    grokfield and not through here.  */\n \n tree\n-start_decl (struct c_declarator *declarator, tree declspecs,\n+start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n \t    bool initialized, tree attributes)\n {\n   tree decl;\n@@ -3632,8 +3567,7 @@ check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n    (In one case we can return a ..._TYPE node instead.\n     For invalid input we sometimes return 0.)\n \n-   DECLSPECS is a chain of tree_list nodes whose value fields\n-    are the storage classes and type specifiers.\n+   DECLSPECS is a c_declspecs structure for the declaration specifiers.\n \n    DECL_CONTEXT says which syntactic context this declaration is in:\n      NORMAL for most contexts.  Make a VAR_DECL or FUNCTION_DECL or TYPE_DECL.\n@@ -3657,29 +3591,25 @@ check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n    and `extern' are interpreted.  */\n \n static tree\n-grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n+grokdeclarator (const struct c_declarator *declarator,\n+\t\tstruct c_declspecs *declspecs,\n \t\tenum decl_context decl_context, bool initialized, tree *width)\n {\n-  int specbits = 0;\n-  tree spec;\n-  tree type = NULL_TREE;\n-  int longlong = 0;\n+  int specbits = declspecs->specbits;\n+  tree type = declspecs->type;\n   int constp;\n   int restrictp;\n   int volatilep;\n   int type_quals = TYPE_UNQUALIFIED;\n   int inlinep;\n-  int explicit_int = 0;\n-  int explicit_char = 0;\n   int defaulted_int = 0;\n-  tree typedef_decl = 0;\n   const char *name, *orig_name;\n   tree typedef_type = 0;\n   int funcdef_flag = 0;\n   bool funcdef_syntax = false;\n   int size_varies = 0;\n   tree decl_attr = NULL_TREE;\n-  tree array_ptr_quals = NULL_TREE;\n+  struct c_declspecs *array_ptr_quals = 0;\n   int array_parm_static = 0;\n   tree returned_attrs = NULL_TREE;\n   bool bitfield = width != NULL;\n@@ -3735,116 +3665,10 @@ grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n   if (decl_context == NORMAL && !funcdef_flag && current_scope->parm_flag)\n     decl_context = PARM;\n \n-  /* Look through the decl specs and record which ones appear.\n-     Some typespecs are defined as built-in typenames.\n-     Others, the ones that are modifiers of other types,\n-     are represented by bits in SPECBITS: set the bits for\n-     the modifiers that appear.  Storage class keywords are also in SPECBITS.\n-\n-     If there is a typedef name or a type, store the type in TYPE.\n-     This includes builtin typedefs such as `int'.\n-\n-     Set EXPLICIT_INT or EXPLICIT_CHAR if the type is `int' or `char'\n-     and did not come from a user typedef.\n-\n-     Set LONGLONG if `long' is mentioned twice.  */\n-\n-  for (spec = declspecs; spec; spec = TREE_CHAIN (spec))\n-    {\n-      tree id = TREE_VALUE (spec);\n-\n-      /* If the entire declaration is itself tagged as deprecated then\n-         suppress reports of deprecated items.  */\n-      if (id && TREE_DEPRECATED (id))\n-        {\n-\t  if (deprecated_state != DEPRECATED_SUPPRESS)\n-\t    warn_deprecated_use (id);\n-        }\n-\n-      if (id == ridpointers[(int) RID_INT])\n-\texplicit_int = 1;\n-      if (id == ridpointers[(int) RID_CHAR])\n-\texplicit_char = 1;\n-\n-      if (TREE_CODE (id) == IDENTIFIER_NODE && C_IS_RESERVED_WORD (id))\n-\t{\n-\t  enum rid i = C_RID_CODE (id);\n-\t  if ((int) i <= (int) RID_LAST_MODIFIER)\n-\t    {\n-\t      if (i == RID_LONG && (specbits & (1 << (int) RID_LONG)))\n-\t\t{\n-\t\t  if (longlong)\n-\t\t    error (\"`long long long' is too long for GCC\");\n-\t\t  else\n-\t\t    {\n-\t\t      if (pedantic && !flag_isoc99 && ! in_system_header\n-\t\t\t  && warn_long_long)\n-\t\t\tpedwarn (\"ISO C90 does not support `long long'\");\n-\t\t      longlong = 1;\n-\t\t    }\n-\t\t}\n-\t      else if (specbits & (1 << (int) i))\n-\t\t{\n-\t\t  if (i == RID_CONST || i == RID_VOLATILE || i == RID_RESTRICT)\n-\t\t    {\n-\t\t      if (pedantic && !flag_isoc99)\n-\t\t\tpedwarn (\"duplicate `%s'\", IDENTIFIER_POINTER (id));\n-\t\t    }\n-\t\t  else\n-\t\t    error (\"duplicate `%s'\", IDENTIFIER_POINTER (id));\n-\t\t}\n-\n-\t      /* Diagnose \"__thread extern\".  Recall that this list\n-\t\t is in the reverse order seen in the text.  */\n-\t      if (i == RID_THREAD\n-\t\t  && (specbits & (1 << (int) RID_EXTERN\n-\t\t\t\t  | 1 << (int) RID_STATIC)))\n-\t\t{\n-\t\t  if (specbits & 1 << (int) RID_EXTERN)\n-\t\t    error (\"`__thread' before `extern'\");\n-\t\t  else\n-\t\t    error (\"`__thread' before `static'\");\n-\t\t}\n-\n-\t      specbits |= 1 << (int) i;\n-\t      goto found;\n-\t    }\n-\t}\n-      if (type)\n-\terror (\"two or more data types in declaration of `%s'\", name);\n-      /* Actual typedefs come to us as TYPE_DECL nodes.  */\n-      else if (TREE_CODE (id) == TYPE_DECL)\n-\t{\n-\t  if (TREE_TYPE (id) == error_mark_node)\n-\t    ; /* Allow the type to default to int to avoid cascading errors.  */\n-\t  else\n-\t    {\n-\t      type = TREE_TYPE (id);\n-\t      decl_attr = DECL_ATTRIBUTES (id);\n-\t      typedef_decl = id;\n-\t    }\n-\t}\n-      /* Built-in types come as identifiers.  */\n-      else if (TREE_CODE (id) == IDENTIFIER_NODE)\n-\t{\n-\t  tree t = lookup_name (id);\n-\t   if (!t || TREE_CODE (t) != TYPE_DECL)\n-\t    error (\"`%s' fails to be a typedef or built in type\",\n-\t\t   IDENTIFIER_POINTER (id));\n-\t   else if (TREE_TYPE (t) == error_mark_node)\n-\t    ;\n-\t  else\n-\t    {\n-\t      type = TREE_TYPE (t);\n-\t      typedef_decl = t;\n-\t    }\n-\t}\n-      else if (TREE_CODE (id) != ERROR_MARK)\n-\ttype = id;\n-\n-    found:\n-      ;\n-    }\n+  if (declspecs->deprecated_p && deprecated_state != DEPRECATED_SUPPRESS)\n+    warn_deprecated_use (declspecs->typedef_decl\n+\t\t\t ? declspecs->typedef_decl\n+\t\t\t : declspecs->type);\n \n   typedef_type = type;\n   if (type)\n@@ -3883,7 +3707,7 @@ grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n \n   /* Long double is a special combination.  */\n \n-  if ((specbits & 1 << (int) RID_LONG) && ! longlong\n+  if ((specbits & 1 << (int) RID_LONG) && ! declspecs->long_long_p\n       && TYPE_MAIN_VARIANT (type) == double_type_node)\n     {\n       specbits &= ~(1 << (int) RID_LONG);\n@@ -3902,7 +3726,7 @@ grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n \terror (\"both long and short specified for `%s'\", name);\n       else if (((specbits & 1 << (int) RID_LONG)\n \t\t|| (specbits & 1 << (int) RID_SHORT))\n-\t       && explicit_char)\n+\t       && declspecs->explicit_char_p)\n \terror (\"long or short specified with char for `%s'\", name);\n       else if (((specbits & 1 << (int) RID_LONG)\n \t\t|| (specbits & 1 << (int) RID_SHORT))\n@@ -3925,7 +3749,8 @@ grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n       else\n \t{\n \t  ok = 1;\n-\t  if (!explicit_int && !defaulted_int && !explicit_char)\n+\t  if (!declspecs->explicit_int_p && !defaulted_int\n+\t      && !declspecs->explicit_char_p)\n \t    {\n \t      error (\"long, short, signed or unsigned used invalidly for `%s'\",\n \t\t     name);\n@@ -3938,7 +3763,7 @@ grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n \t{\n \t  specbits &= ~((1 << (int) RID_LONG) | (1 << (int) RID_SHORT)\n \t\t\t| (1 << (int) RID_UNSIGNED) | (1 << (int) RID_SIGNED));\n-\t  longlong = 0;\n+\t  declspecs->long_long_p = 0;\n \t}\n     }\n \n@@ -3953,31 +3778,32 @@ grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n      Optionally treat bit-fields as signed by default.  */\n   if (specbits & 1 << (int) RID_UNSIGNED\n       || (bitfield && ! flag_signed_bitfields\n-\t  && (explicit_int || defaulted_int || explicit_char\n+\t  && (declspecs->explicit_int_p || defaulted_int\n+\t      || declspecs->explicit_char_p\n \t      /* A typedef for plain `int' without `signed'\n \t\t can be controlled just like plain `int'.  */\n-\t      || ! (typedef_decl != 0\n-\t\t    && C_TYPEDEF_EXPLICITLY_SIGNED (typedef_decl)))\n+\t      || ! (declspecs->typedef_decl != 0\n+\t\t    && C_TYPEDEF_EXPLICITLY_SIGNED (declspecs->typedef_decl)))\n \t  && TREE_CODE (type) != ENUMERAL_TYPE\n \t  && !(specbits & 1 << (int) RID_SIGNED)))\n     {\n-      if (longlong)\n+      if (declspecs->long_long_p)\n \ttype = long_long_unsigned_type_node;\n       else if (specbits & 1 << (int) RID_LONG)\n \ttype = long_unsigned_type_node;\n       else if (specbits & 1 << (int) RID_SHORT)\n \ttype = short_unsigned_type_node;\n       else if (type == char_type_node)\n \ttype = unsigned_char_type_node;\n-      else if (typedef_decl)\n+      else if (declspecs->typedef_decl)\n \ttype = c_common_unsigned_type (type);\n       else\n \ttype = unsigned_type_node;\n     }\n   else if ((specbits & 1 << (int) RID_SIGNED)\n \t   && type == char_type_node)\n     type = signed_char_type_node;\n-  else if (longlong)\n+  else if (declspecs->long_long_p)\n     type = long_long_integer_type_node;\n   else if (specbits & 1 << (int) RID_LONG)\n     type = long_integer_type_node;\n@@ -3993,7 +3819,7 @@ grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n \t the complex form of TYPE.  E.g, \"complex short\" is\n \t \"complex short int\".  */\n \n-      if (defaulted_int && ! longlong\n+      if (defaulted_int && ! declspecs->long_long_p\n \t  && ! (specbits & ((1 << (int) RID_LONG) | (1 << (int) RID_SHORT)\n \t\t\t    | (1 << (int) RID_SIGNED)\n \t\t\t    | (1 << (int) RID_UNSIGNED))))\n@@ -4180,13 +4006,13 @@ grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n \t array or function or pointer, and DECLARATOR has had its\n \t outermost layer removed.  */\n \n-      if (array_ptr_quals != NULL_TREE || array_parm_static)\n+      if (array_ptr_quals != NULL || array_parm_static)\n \t{\n \t  /* Only the innermost declarator (making a parameter be of\n \t     array type which is converted to pointer type)\n \t     may have static or type qualifiers.  */\n \t  error (\"static or type qualifiers in non-parameter array declarator\");\n-\t  array_ptr_quals = NULL_TREE;\n+\t  array_ptr_quals = NULL;\n \t  array_parm_static = 0;\n \t}\n \n@@ -4372,10 +4198,10 @@ grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n \t      layout_type (type);\n \n \t    if (decl_context != PARM\n-\t\t&& (array_ptr_quals != NULL_TREE || array_parm_static))\n+\t\t&& (array_ptr_quals != NULL || array_parm_static))\n \t      {\n \t\terror (\"static or type qualifiers in non-parameter array declarator\");\n-\t\tarray_ptr_quals = NULL_TREE;\n+\t\tarray_ptr_quals = NULL;\n \t\tarray_parm_static = 0;\n \t      }\n \t    break;\n@@ -4469,53 +4295,27 @@ grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n \t    \n \t    type = build_pointer_type (type);\n \t    \n-\t    /* Process a list of type modifier keywords (such as const\n-\t       or volatile) that were given inside the `*'.  */\n+\t    /* Process type qualifiers (such as const or volatile)\n+\t       that were given inside the `*'.  */\n \t    if (declarator->u.pointer_quals)\n \t      {\n-\t\ttree typemodlist;\n-\t\tint erred = 0;\n-\t\t\n-\t\tconstp = 0;\n-\t\tvolatilep = 0;\n-\t\trestrictp = 0;\n-\t\tfor (typemodlist = declarator->u.pointer_quals; typemodlist;\n-\t\t     typemodlist = TREE_CHAIN (typemodlist))\n-\t\t  {\n-\t\t    tree qualifier = TREE_VALUE (typemodlist);\n-\t\t    \n-\t\t    if (C_IS_RESERVED_WORD (qualifier))\n-\t\t      {\n-\t\t\tif (C_RID_CODE (qualifier) == RID_CONST)\n-\t\t\t  constp++;\n-\t\t\telse if (C_RID_CODE (qualifier) == RID_VOLATILE)\n-\t\t\t  volatilep++;\n-\t\t\telse if (C_RID_CODE (qualifier) == RID_RESTRICT)\n-\t\t\t  restrictp++;\n-\t\t\telse\n-\t\t\t  erred++;\n-\t\t      }\n-\t\t    else\n-\t\t      erred++;\n-\t\t  }\n-\t\t\n-\t\tif (erred)\n-\t\t  error (\"invalid type modifier within pointer declarator\");\n-\t\tif (pedantic && !flag_isoc99)\n-\t\t  {\n-\t\t    if (constp > 1)\n-\t\t      pedwarn (\"duplicate `const'\");\n-\t\t    if (volatilep > 1)\n-\t\t      pedwarn (\"duplicate `volatile'\");\n-\t\t    if (restrictp > 1)\n-\t\t      pedwarn (\"duplicate `restrict'\");\n-\t\t  }\n-\t\t\n+\t\tint pbits = declarator->u.pointer_quals->specbits;\n+\n+\t\t/* The grammar should only permit qualifiers here.  */\n+\t\tgcc_assert (!declarator->u.pointer_quals->type\n+\t\t\t    && !(pbits & ~((1 << (int) RID_CONST)\n+\t\t\t\t\t   | (1 << (int) RID_VOLATILE)\n+\t\t\t\t\t   | (1 << (int) RID_RESTRICT))));\n+\n+\t\tconstp = !!(pbits & (1 << (int) RID_CONST));\n+\t\tvolatilep = !!(pbits & (1 << (int) RID_VOLATILE));\n+\t\trestrictp = !!(pbits & (1 << (int) RID_RESTRICT));\n+\n \t\ttype_quals = ((constp ? TYPE_QUAL_CONST : 0)\n \t\t\t      | (restrictp ? TYPE_QUAL_RESTRICT : 0)\n \t\t\t      | (volatilep ? TYPE_QUAL_VOLATILE : 0));\n \t      }\n-\t    \n+\n \t    declarator = declarator->declarator;\n \t    break;\n \t  }\n@@ -4552,7 +4352,8 @@ grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n \ttype = c_build_qualified_type (type, type_quals);\n       decl = build_decl (TYPE_DECL, declarator->u.id, type);\n       if ((specbits & (1 << (int) RID_SIGNED))\n-\t  || (typedef_decl && C_TYPEDEF_EXPLICITLY_SIGNED (typedef_decl)))\n+\t  || (declspecs->typedef_decl\n+\t      && C_TYPEDEF_EXPLICITLY_SIGNED (declspecs->typedef_decl)))\n \tC_TYPEDEF_EXPLICITLY_SIGNED (decl) = 1;\n       decl_attributes (&decl, returned_attrs, 0);\n       return decl;\n@@ -4630,37 +4431,21 @@ grokdeclarator (const struct c_declarator *declarator, tree declspecs,\n \t    type_quals = TYPE_UNQUALIFIED;\n \t    if (array_ptr_quals)\n \t      {\n-\t\ttree new_ptr_quals, new_ptr_attrs;\n-\t\tint erred = 0;\n-\t\tsplit_specs_attrs (array_ptr_quals, &new_ptr_quals, &new_ptr_attrs);\n+\t\tint apqbits = array_ptr_quals->specbits;\n+\n \t\t/* We don't yet implement attributes in this context.  */\n-\t\tif (new_ptr_attrs != NULL_TREE)\n+\t\tif (array_ptr_quals->attrs != NULL_TREE)\n \t\t  warning (\"attributes in parameter array declarator ignored\");\n \n-\t\tconstp = 0;\n-\t\tvolatilep = 0;\n-\t\trestrictp = 0;\n-\t\tfor (; new_ptr_quals; new_ptr_quals = TREE_CHAIN (new_ptr_quals))\n-\t\t  {\n-\t\t    tree qualifier = TREE_VALUE (new_ptr_quals);\n-\n-\t\t    if (C_IS_RESERVED_WORD (qualifier))\n-\t\t      {\n-\t\t\tif (C_RID_CODE (qualifier) == RID_CONST)\n-\t\t\t  constp++;\n-\t\t\telse if (C_RID_CODE (qualifier) == RID_VOLATILE)\n-\t\t\t  volatilep++;\n-\t\t\telse if (C_RID_CODE (qualifier) == RID_RESTRICT)\n-\t\t\t  restrictp++;\n-\t\t\telse\n-\t\t\t  erred++;\n-\t\t      }\n-\t\t    else\n-\t\t      erred++;\n-\t\t  }\n+\t\t/* The grammar should only permit qualifiers here.  */\n+\t\tgcc_assert (!array_ptr_quals->type\n+\t\t\t    && !(apqbits & ~((1 << (int) RID_CONST)\n+\t\t\t\t\t     | (1 << (int) RID_VOLATILE)\n+\t\t\t\t\t     | (1 << (int) RID_RESTRICT))));\n \n-\t\tif (erred)\n-\t\t  error (\"invalid type modifier within array declarator\");\n+\t\tconstp = !!(apqbits & (1 << (int) RID_CONST));\n+\t\tvolatilep = !!(apqbits & (1 << (int) RID_VOLATILE));\n+\t\trestrictp = !!(apqbits & (1 << (int) RID_RESTRICT));\n \n \t\ttype_quals = ((constp ? TYPE_QUAL_CONST : 0)\n \t\t\t      | (restrictp ? TYPE_QUAL_RESTRICT : 0)\n@@ -5282,7 +5067,8 @@ start_struct (enum tree_code code, tree name)\n    are ultimately passed to `build_struct' to make the RECORD_TYPE node.  */\n \n tree\n-grokfield (struct c_declarator *declarator, tree declspecs, tree width)\n+grokfield (struct c_declarator *declarator, struct c_declspecs *declspecs,\n+\t   tree width)\n {\n   tree value;\n \n@@ -5308,11 +5094,12 @@ grokfield (struct c_declarator *declarator, tree declspecs, tree width)\n \t took this from Plan 9 or if it was an accident of implementation\n \t that took root before someone noticed the bug...  */\n \n-      tree type = TREE_VALUE (declspecs);\n+      tree type = declspecs->type;\n \n-      if (flag_ms_extensions && TREE_CODE (type) == TYPE_DECL)\n-\ttype = TREE_TYPE (type);\n-      if (TREE_CODE (type) == RECORD_TYPE || TREE_CODE (type) == UNION_TYPE)\n+      if (type\n+\t  && (TREE_CODE (type) == RECORD_TYPE\n+\t      || TREE_CODE (type) == UNION_TYPE)\n+\t  && (flag_ms_extensions || !declspecs->typedef_decl))\n \t{\n \t  if (flag_ms_extensions)\n \t    ; /* ok */\n@@ -5916,7 +5703,7 @@ build_enumerator (tree name, tree value)\n    yyparse to report a parse error.  */\n \n int\n-start_function (tree declspecs, struct c_declarator *declarator,\n+start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n \t\ttree attributes)\n {\n   tree decl1, old_decl;\n@@ -6857,7 +6644,8 @@ build_void_list_node (void)\n /* Return a c_parm structure with the given SPECS, ATTRS and DECLARATOR.  */\n \n struct c_parm *\n-build_c_parm (tree specs, tree attrs, struct c_declarator *declarator)\n+build_c_parm (struct c_declspecs *specs, tree attrs,\n+\t      struct c_declarator *declarator)\n {\n   struct c_parm *ret = XOBNEW (&parser_obstack, struct c_parm);\n   ret->specs = specs;\n@@ -6909,25 +6697,174 @@ build_id_declarator (tree ident)\n \n /* Return something to represent absolute declarators containing a *.\n    TARGET is the absolute declarator that the * contains.\n-   TYPE_QUALS_ATTRS is a list of modifiers such as const or volatile\n-   to apply to the pointer type, represented as identifiers, possible mixed\n-   with attributes.  */\n+   TYPE_QUALS_ATTRS is a structure for type qualifiers and attributes\n+   to apply to the pointer type.  */\n \n struct c_declarator *\n-make_pointer_declarator (tree type_quals_attrs, struct c_declarator *target)\n+make_pointer_declarator (struct c_declspecs *type_quals_attrs,\n+\t\t\t struct c_declarator *target)\n {\n-  tree quals, attrs;\n+  tree attrs;\n   struct c_declarator *itarget = target;\n   struct c_declarator *ret = XOBNEW (&parser_obstack, struct c_declarator);\n-  split_specs_attrs (type_quals_attrs, &quals, &attrs);\n-  if (attrs != NULL_TREE)\n-    itarget = build_attrs_declarator (attrs, target);\n+  if (type_quals_attrs)\n+    {\n+      attrs = type_quals_attrs->attrs;\n+      type_quals_attrs->attrs = NULL_TREE;\n+      if (attrs != NULL_TREE)\n+\titarget = build_attrs_declarator (attrs, target);\n+    }\n   ret->kind = cdk_pointer;\n   ret->declarator = itarget;\n-  ret->u.pointer_quals = quals;\n+  ret->u.pointer_quals = type_quals_attrs;\n+  return ret;\n+}\n+\n+/* Return a pointer to a structure for an empty list of declaration\n+   specifiers.  */\n+\n+struct c_declspecs *\n+build_null_declspecs (void)\n+{\n+  struct c_declspecs *ret = XOBNEW (&parser_obstack, struct c_declspecs);\n+  ret->type = 0;\n+  ret->typedef_decl = 0;\n+  ret->decl_attr = 0;\n+  ret->attrs = 0;\n+  ret->specbits = 0;\n+  ret->non_sc_seen_p = false;\n+  ret->deprecated_p = false;\n+  ret->explicit_int_p = false;\n+  ret->explicit_char_p = false;\n+  ret->long_long_p = false;\n   return ret;\n }\n \n+/* Add the type qualifier QUAL to the declaration specifiers SPECS,\n+   returning SPECS.  */\n+\n+struct c_declspecs *\n+declspecs_add_qual (struct c_declspecs *specs, tree qual)\n+{\n+  enum rid i;\n+  specs->non_sc_seen_p = true;\n+  gcc_assert (TREE_CODE (qual) == IDENTIFIER_NODE\n+\t      && C_IS_RESERVED_WORD (qual));\n+  i = C_RID_CODE (qual);\n+  gcc_assert (i == RID_CONST || i == RID_VOLATILE || i == RID_RESTRICT);\n+  if ((specs->specbits & (1 << (int) i)) && pedantic && !flag_isoc99)\n+    pedwarn (\"duplicate %qs\", IDENTIFIER_POINTER (qual));\n+  specs->specbits |= 1 << (int) i;\n+  return specs;\n+}\n+\n+/* Add the type specifier TYPE to the declaration specifiers SPECS,\n+   returning SPECS.  */\n+\n+struct c_declspecs *\n+declspecs_add_type (struct c_declspecs *specs, tree type)\n+{\n+  specs->non_sc_seen_p = true;\n+  if (TREE_DEPRECATED (type))\n+    specs->deprecated_p = true;\n+  if (type == ridpointers[(int) RID_INT])\n+    specs->explicit_int_p = true;\n+  if (type == ridpointers[(int) RID_CHAR])\n+    specs->explicit_char_p = true;\n+\n+  if (TREE_CODE (type) == IDENTIFIER_NODE && C_IS_RESERVED_WORD (type))\n+    {\n+      enum rid i = C_RID_CODE (type);\n+      if ((int) i <= (int) RID_LAST_MODIFIER)\n+\t{\n+\t  if (i == RID_LONG && (specs->specbits & (1 << (int) RID_LONG)))\n+\t    {\n+\t      if (specs->long_long_p)\n+\t\terror (\"%<long long long%> is too long for GCC\");\n+\t      else\n+\t\t{\n+\t\t  if (pedantic && !flag_isoc99 && !in_system_header\n+\t\t      && warn_long_long)\n+\t\t    pedwarn (\"ISO C90 does not support %<long long%>\");\n+\t\t  specs->long_long_p = 1;\n+\t\t}\n+\t    }\n+\t  else if (specs->specbits & (1 << (int) i))\n+\t    error (\"duplicate %qs\", IDENTIFIER_POINTER (type));\n+\n+\t  specs->specbits |= 1 << (int) i;\n+\t  return specs;\n+\t}\n+    }\n+  if (specs->type)\n+    error (\"two or more data types in declaration specifiers\");\n+  /* Actual typedefs come to us as TYPE_DECL nodes.  */\n+  else if (TREE_CODE (type) == TYPE_DECL)\n+    {\n+      if (TREE_TYPE (type) == error_mark_node)\n+\t; /* Allow the type to default to int to avoid cascading errors.  */\n+      else\n+\t{\n+\t  specs->type = TREE_TYPE (type);\n+\t  specs->decl_attr = DECL_ATTRIBUTES (type);\n+\t  specs->typedef_decl = type;\n+\t}\n+    }\n+  /* Built-in types come as identifiers.  */\n+  else if (TREE_CODE (type) == IDENTIFIER_NODE)\n+    {\n+      tree t = lookup_name (type);\n+      if (!t || TREE_CODE (t) != TYPE_DECL)\n+\terror (\"%qs fails to be a typedef or built in type\",\n+\t       IDENTIFIER_POINTER (type));\n+      else if (TREE_TYPE (t) == error_mark_node)\n+\t;\n+      else\n+\tspecs->type = TREE_TYPE (t);\n+    }\n+  else if (TREE_CODE (type) != ERROR_MARK)\n+    specs->type = type;\n+\n+  return specs;\n+}\n+\n+/* Add the storage class specifier or function specifier SCSPEC to the\n+   declaration specifiers SPECS, returning SPECS.  */\n+\n+struct c_declspecs *\n+declspecs_add_scspec (struct c_declspecs *specs, tree scspec)\n+{\n+  enum rid i;\n+  gcc_assert (TREE_CODE (scspec) == IDENTIFIER_NODE\n+\t      && C_IS_RESERVED_WORD (scspec));\n+  i = C_RID_CODE (scspec);\n+  if (extra_warnings && specs->non_sc_seen_p)\n+    warning (\"%qs is not at beginning of declaration\",\n+\t     IDENTIFIER_POINTER (scspec));\n+  if (specs->specbits & (1 << (int) i))\n+    error (\"duplicate %qs\", IDENTIFIER_POINTER (scspec));\n+  /* Diagnose \"__thread extern\" and \"__thread static\".  */\n+  if (specs->specbits & (1 << (int) RID_THREAD))\n+    {\n+      if (i == RID_EXTERN)\n+\terror (\"%<__thread%> before %<extern%>\");\n+      else if (i == RID_STATIC)\t\n+\terror (\"%<__thread%> before %<static%>\");\n+    }\n+  specs->specbits |= 1 << (int) i;\n+  return specs;\n+}\n+\n+/* Add the attributes ATTRS to the declaration specifiers SPECS,\n+   returning SPECS.  */\n+\n+struct c_declspecs *\n+declspecs_add_attrs (struct c_declspecs *specs, tree attrs)\n+{\n+  specs->attrs = chainon (attrs, specs->attrs);\n+  return specs;\n+}\n+\n /* Synthesize a function which calls all the global ctors or global\n    dtors in this file.  This is only used for targets which do not\n    support .ctors/.dtors sections.  FIXME: Migrate into cgraph.  */"}, {"sha": "ed0e3e1d0959242db31840d4eac48b7f9961efcf", "filename": "gcc/c-parse.in", "status": "modified", "additions": 140, "deletions": 250, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -102,7 +102,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n %union {long itype; tree ttype; void *otype; struct c_expr exprtype;\n \tstruct c_arg_info *arginfotype; struct c_declarator *dtrtype;\n \tstruct c_type_name *typenametype; struct c_parm *parmtype;\n-\tenum tree_code code; location_t location; }\n+\tstruct c_declspecs *dsptype; enum tree_code code;\n+\tlocation_t location; }\n \n /* All identifiers that are not reserved words\n    and are not declared typedefs in the current block */\n@@ -190,18 +191,19 @@ do {\t\t\t\t\t\t\t\t\t\\\n %type <ttype> identifier IDENTIFIER TYPENAME CONSTANT STRING FUNC_NAME\n %type <ttype> nonnull_exprlist exprlist\n %type <exprtype> expr expr_no_commas cast_expr unary_expr primary\n-%type <ttype> declspecs_nosc_nots_nosa_noea declspecs_nosc_nots_nosa_ea\n-%type <ttype> declspecs_nosc_nots_sa_noea declspecs_nosc_nots_sa_ea\n-%type <ttype> declspecs_nosc_ts_nosa_noea declspecs_nosc_ts_nosa_ea\n-%type <ttype> declspecs_nosc_ts_sa_noea declspecs_nosc_ts_sa_ea\n-%type <ttype> declspecs_sc_nots_nosa_noea declspecs_sc_nots_nosa_ea\n-%type <ttype> declspecs_sc_nots_sa_noea declspecs_sc_nots_sa_ea\n-%type <ttype> declspecs_sc_ts_nosa_noea declspecs_sc_ts_nosa_ea\n-%type <ttype> declspecs_sc_ts_sa_noea declspecs_sc_ts_sa_ea\n-%type <ttype> declspecs_ts declspecs_nots\n-%type <ttype> declspecs_ts_nosa declspecs_nots_nosa\n-%type <ttype> declspecs_nosc_ts declspecs_nosc_nots declspecs_nosc declspecs\n-%type <ttype> maybe_type_quals_attrs typespec_nonattr typespec_attr\n+%type <dsptype> declspecs_nosc_nots_nosa_noea declspecs_nosc_nots_nosa_ea\n+%type <dsptype> declspecs_nosc_nots_sa_noea declspecs_nosc_nots_sa_ea\n+%type <dsptype> declspecs_nosc_ts_nosa_noea declspecs_nosc_ts_nosa_ea\n+%type <dsptype> declspecs_nosc_ts_sa_noea declspecs_nosc_ts_sa_ea\n+%type <dsptype> declspecs_sc_nots_nosa_noea declspecs_sc_nots_nosa_ea\n+%type <dsptype> declspecs_sc_nots_sa_noea declspecs_sc_nots_sa_ea\n+%type <dsptype> declspecs_sc_ts_nosa_noea declspecs_sc_ts_nosa_ea\n+%type <dsptype> declspecs_sc_ts_sa_noea declspecs_sc_ts_sa_ea\n+%type <dsptype> declspecs_ts declspecs_nots\n+%type <dsptype> declspecs_ts_nosa declspecs_nots_nosa\n+%type <dsptype> declspecs_nosc_ts declspecs_nosc_nots declspecs_nosc declspecs\n+%type <dsptype> maybe_type_quals_attrs\n+%type <ttype> typespec_nonattr typespec_attr\n %type <ttype> typespec_reserved_nonattr typespec_reserved_attr\n %type <ttype> typespec_nonreserved_nonattr\n %type <ttype> offsetof_member_designator\n@@ -266,38 +268,53 @@ do {\t\t\t\t\t\t\t\t\t\\\n @@end_ifobjc\n \f\n %{\n-/* List of types and structure classes of the current declaration.  */\n-static GTY(()) tree current_declspecs;\n+/* Declaration specifiers of the current declaration.  */\n+static struct c_declspecs *current_declspecs;\n static GTY(()) tree prefix_attributes;\n \n /* List of all the attributes applying to the identifier currently being\n    declared; includes prefix_attributes and possibly some more attributes\n    just after a comma.  */\n static GTY(()) tree all_prefix_attributes;\n \n+/* Structure to save declaration specifiers.  */\n+struct c_declspec_stack {\n+  /* Saved value of current_declspecs.  */\n+  struct c_declspecs *current_declspecs;\n+  /* Saved value of prefix_attributes.  */\n+  tree prefix_attributes;\n+  /* Saved value of all_prefix_attributes.  */\n+  tree all_prefix_attributes;\n+  /* Next level of stack.  */\n+  struct c_declspec_stack *next;\n+};\n+\n /* Stack of saved values of current_declspecs, prefix_attributes and\n    all_prefix_attributes.  */\n-static GTY(()) tree declspec_stack;\n+static struct c_declspec_stack *declspec_stack;\n \n /* INDIRECT_REF with a TREE_TYPE of the type being queried for offsetof.  */\n static tree offsetof_base;\n \n /* PUSH_DECLSPEC_STACK is called from setspecs; POP_DECLSPEC_STACK\n    should be called from the productions making use of setspecs.  */\n-#define PUSH_DECLSPEC_STACK\t\t\t\t\t\t \\\n-  do {\t\t\t\t\t\t\t\t\t \\\n-    declspec_stack = tree_cons (build_tree_list (prefix_attributes,\t \\\n-\t\t\t\t\t\t all_prefix_attributes), \\\n-\t\t\t\tcurrent_declspecs,\t\t\t \\\n-\t\t\t\tdeclspec_stack);\t\t\t \\\n+#define PUSH_DECLSPEC_STACK\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    struct c_declspec_stack *t = XOBNEW (&parser_obstack,\t\t\\\n+\t\t\t\t\t struct c_declspec_stack);\t\\\n+    t->current_declspecs = current_declspecs;\t\t\t\t\\\n+    t->prefix_attributes = prefix_attributes;\t\t\t\t\\\n+    t->all_prefix_attributes = all_prefix_attributes;\t\t\t\\\n+    t->next = declspec_stack;\t\t\t\t\t\t\\\n+    declspec_stack = t;\t\t\t\t\t\t\t\\\n   } while (0)\n \n #define POP_DECLSPEC_STACK\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    current_declspecs = TREE_VALUE (declspec_stack);\t\t\t\\\n-    prefix_attributes = TREE_PURPOSE (TREE_PURPOSE (declspec_stack));\t\\\n-    all_prefix_attributes = TREE_VALUE (TREE_PURPOSE (declspec_stack));\t\\\n-    declspec_stack = TREE_CHAIN (declspec_stack);\t\t\t\\\n+    current_declspecs = declspec_stack->current_declspecs;\t\t\\\n+    prefix_attributes = declspec_stack->prefix_attributes;\t\t\\\n+    all_prefix_attributes = declspec_stack->all_prefix_attributes;\t\\\n+    declspec_stack = declspec_stack->next;\t\t\t\t\\\n   } while (0)\n \n /* For __extension__, save/restore the warning flags which are\n@@ -363,13 +380,13 @@ program: /* empty */\n \n /* the reason for the strange actions in this rule\n  is so that notype_initdecls when reached via datadef\n- can find a valid list of type and sc specs in $0. */\n+ can find valid declaration specifiers in $0. */\n \n extdefs:\n-\tsave_obstack_position { $<ttype>$ = NULL_TREE; } extdef\n+\tsave_obstack_position { $<dsptype>$ = NULL; } extdef\n \t\t{ obstack_free (&parser_obstack, $1); }\n \t| extdefs save_obstack_position\n-\t\t{ $<ttype>$ = NULL_TREE; ggc_collect(); } extdef\n+\t\t{ $<dsptype>$ = NULL; ggc_collect(); } extdef\n \t\t{ obstack_free (&parser_obstack, $2); }\n \t;\n \n@@ -439,7 +456,7 @@ fndef:\n \t| declspecs_nots setspecs notype_declarator error\n \t\t{ POP_DECLSPEC_STACK; }\n \t| setspecs notype_declarator\n-\t\t{ if (! start_function (NULL_TREE, $2,\n+\t\t{ if (! start_function (current_declspecs, $2,\n \t\t\t\t\tall_prefix_attributes))\n \t\t    YYERROR1;\n \t\t}\n@@ -840,8 +857,17 @@ lineno_decl:\n setspecs: /* empty */\n \t\t{ pending_xref_error ();\n \t\t  PUSH_DECLSPEC_STACK;\n-\t\t  split_specs_attrs ($<ttype>0,\n-\t\t\t\t     &current_declspecs, &prefix_attributes);\n+\t\t  if ($<dsptype>0)\n+\t\t    {\n+\t\t      prefix_attributes = $<dsptype>0->attrs;\n+\t\t      $<dsptype>0->attrs = NULL_TREE;\n+\t\t      current_declspecs = $<dsptype>0;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      prefix_attributes = NULL_TREE;\n+\t\t      current_declspecs = build_null_declspecs ();\n+\t\t    }\n \t\t  all_prefix_attributes = prefix_attributes; }\n \t;\n \n@@ -878,16 +904,6 @@ decl:\n \n    - Attribute specifier lists (attributes).\n \n-   These are stored as a TREE_LIST; the head of the list is the last\n-   item in the specifier list.  Each entry in the list has either a\n-   TREE_PURPOSE that is an attribute specifier list, or a TREE_VALUE that\n-   is a single other specifier or qualifier; and a TREE_CHAIN that is the\n-   rest of the list.  TREE_STATIC is set on the list if something other\n-   than a storage class specifier or attribute has been seen; this is used\n-   to warn for the obsolescent usage of storage class specifiers other than\n-   at the start of the list.  (Doing this properly would require function\n-   specifiers to be handled separately from storage class specifiers.)\n-\n    The various cases below are classified according to:\n \n    (a) Whether a storage class specifier is included or not; some\n@@ -916,334 +932,208 @@ decl:\n \n /* Declspecs which contain at least one type specifier or typedef name.\n    (Just `const' or `volatile' is not enough.)\n-   A typedef'd name following these is taken as a name to be declared.\n-   Declspecs have a non-NULL TREE_VALUE, attributes do not.  */\n+   A typedef'd name following these is taken as a name to be declared.  */\n \n declspecs_nosc_nots_nosa_noea:\n \t  TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $1, NULL_TREE);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual (build_null_declspecs (), $1); }\n \t| declspecs_nosc_nots_nosa_noea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_nosc_nots_nosa_ea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t;\n \n declspecs_nosc_nots_nosa_ea:\n \t  declspecs_nosc_nots_nosa_noea attributes\n-\t\t{ $$ = tree_cons ($2, NULL_TREE, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_attrs ($1, $2); }\n \t;\n \n declspecs_nosc_nots_sa_noea:\n \t  declspecs_nosc_nots_sa_noea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_nosc_nots_sa_ea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t;\n \n declspecs_nosc_nots_sa_ea:\n \t  attributes\n-\t\t{ $$ = tree_cons ($1, NULL_TREE, NULL_TREE);\n-\t\t  TREE_STATIC ($$) = 0; }\n+\t\t{ $$ = declspecs_add_attrs (build_null_declspecs (), $1); }\n \t| declspecs_nosc_nots_sa_noea attributes\n-\t\t{ $$ = tree_cons ($2, NULL_TREE, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_attrs ($1, $2); }\n \t;\n \n declspecs_nosc_ts_nosa_noea:\n \t  typespec_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $1, NULL_TREE);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type (build_null_declspecs (), $1); }\n \t| declspecs_nosc_ts_nosa_noea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_nosc_ts_nosa_ea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_nosc_ts_nosa_noea typespec_reserved_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_ts_nosa_ea typespec_reserved_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_nots_nosa_noea typespec_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_nots_nosa_ea typespec_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t;\n \n declspecs_nosc_ts_nosa_ea:\n \t  typespec_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $1, NULL_TREE);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type (build_null_declspecs (), $1); }\n \t| declspecs_nosc_ts_nosa_noea attributes\n-\t\t{ $$ = tree_cons ($2, NULL_TREE, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_attrs ($1, $2); }\n \t| declspecs_nosc_ts_nosa_noea typespec_reserved_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_ts_nosa_ea typespec_reserved_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_nots_nosa_noea typespec_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_nots_nosa_ea typespec_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t;\n \n declspecs_nosc_ts_sa_noea:\n \t  declspecs_nosc_ts_sa_noea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_nosc_ts_sa_ea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_nosc_ts_sa_noea typespec_reserved_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_ts_sa_ea typespec_reserved_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_nots_sa_noea typespec_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_nots_sa_ea typespec_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t;\n \n declspecs_nosc_ts_sa_ea:\n \t  declspecs_nosc_ts_sa_noea attributes\n-\t\t{ $$ = tree_cons ($2, NULL_TREE, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_attrs ($1, $2); }\n \t| declspecs_nosc_ts_sa_noea typespec_reserved_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_ts_sa_ea typespec_reserved_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_nots_sa_noea typespec_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_nots_sa_ea typespec_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t;\n \n declspecs_sc_nots_nosa_noea:\n \t  scspec\n-\t\t{ $$ = tree_cons (NULL_TREE, $1, NULL_TREE);\n-\t\t  TREE_STATIC ($$) = 0; }\n+\t\t{ $$ = declspecs_add_scspec (build_null_declspecs (), $1); }\n \t| declspecs_sc_nots_nosa_noea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_sc_nots_nosa_ea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_nosc_nots_nosa_noea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t| declspecs_nosc_nots_nosa_ea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t| declspecs_sc_nots_nosa_noea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t| declspecs_sc_nots_nosa_ea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t;\n \n declspecs_sc_nots_nosa_ea:\n \t  declspecs_sc_nots_nosa_noea attributes\n-\t\t{ $$ = tree_cons ($2, NULL_TREE, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_attrs ($1, $2); }\n \t;\n \n declspecs_sc_nots_sa_noea:\n \t  declspecs_sc_nots_sa_noea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_sc_nots_sa_ea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_nosc_nots_sa_noea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t| declspecs_nosc_nots_sa_ea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t| declspecs_sc_nots_sa_noea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t| declspecs_sc_nots_sa_ea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t;\n \n declspecs_sc_nots_sa_ea:\n \t  declspecs_sc_nots_sa_noea attributes\n-\t\t{ $$ = tree_cons ($2, NULL_TREE, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_attrs ($1, $2); }\n \t;\n \n declspecs_sc_ts_nosa_noea:\n \t  declspecs_sc_ts_nosa_noea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_sc_ts_nosa_ea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_sc_ts_nosa_noea typespec_reserved_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_sc_ts_nosa_ea typespec_reserved_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_sc_nots_nosa_noea typespec_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_sc_nots_nosa_ea typespec_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_ts_nosa_noea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t| declspecs_nosc_ts_nosa_ea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t| declspecs_sc_ts_nosa_noea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t| declspecs_sc_ts_nosa_ea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t;\n \n declspecs_sc_ts_nosa_ea:\n \t  declspecs_sc_ts_nosa_noea attributes\n-\t\t{ $$ = tree_cons ($2, NULL_TREE, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_attrs ($1, $2); }\n \t| declspecs_sc_ts_nosa_noea typespec_reserved_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_sc_ts_nosa_ea typespec_reserved_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_sc_nots_nosa_noea typespec_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_sc_nots_nosa_ea typespec_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t;\n \n declspecs_sc_ts_sa_noea:\n \t  declspecs_sc_ts_sa_noea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_sc_ts_sa_ea TYPE_QUAL\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_qual ($1, $2); }\n \t| declspecs_sc_ts_sa_noea typespec_reserved_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_sc_ts_sa_ea typespec_reserved_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_sc_nots_sa_noea typespec_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_sc_nots_sa_ea typespec_nonattr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_nosc_ts_sa_noea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t| declspecs_nosc_ts_sa_ea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t| declspecs_sc_ts_sa_noea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t| declspecs_sc_ts_sa_ea scspec\n-\t\t{ if (extra_warnings && TREE_STATIC ($1))\n-\t\t    warning (\"`%s' is not at beginning of declaration\",\n-\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_scspec ($1, $2); }\n \t;\n \n declspecs_sc_ts_sa_ea:\n \t  declspecs_sc_ts_sa_noea attributes\n-\t\t{ $$ = tree_cons ($2, NULL_TREE, $1);\n-\t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t\t{ $$ = declspecs_add_attrs ($1, $2); }\n \t| declspecs_sc_ts_sa_noea typespec_reserved_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_sc_ts_sa_ea typespec_reserved_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_sc_nots_sa_noea typespec_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t| declspecs_sc_nots_sa_ea typespec_attr\n-\t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n-\t\t  TREE_STATIC ($$) = 1; }\n+\t\t{ $$ = declspecs_add_type ($1, $2); }\n \t;\n \n /* Particular useful classes of declspecs.  */\n@@ -1330,7 +1220,7 @@ declspecs:\n /* A (possibly empty) sequence of type qualifiers and attributes.  */\n maybe_type_quals_attrs:\n \t  /* empty */\n-\t\t{ $$ = NULL_TREE; }\n+\t\t{ $$ = NULL; }\n \t| declspecs_nosc_nots\n \t\t{ $$ = $1; }\n \t;\n@@ -1354,7 +1244,7 @@ maybe_type_quals_attrs:\n    or are such that any following attributes would\n    be parsed as part of the specifier.\n \n-   _nonattr: specifiers.  */\n+   _nonattr: other specifiers not ending with attributes.  */\n \n typespec_nonattr:\n \t  typespec_reserved_nonattr\n@@ -1933,10 +1823,10 @@ enumerator:\n typename:\n \t  declspecs_nosc\n \t\t{ pending_xref_error ();\n-\t\t  $<ttype>$ = $1; }\n+\t\t  $<dsptype>$ = $1; }\n \t  absdcl\n \t\t{ $$ = XOBNEW (&parser_obstack, struct c_type_name);\n-\t\t  $$->specs = $<ttype>2;\n+\t\t  $$->specs = $<dsptype>2;\n \t\t  $$->declarator = $3; }\n \t;\n "}, {"sha": "37075518b83138fc52f56f43c2c28b806597103d", "filename": "gcc/c-tree.h", "status": "modified", "additions": 52, "deletions": 13, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -131,6 +131,38 @@ struct c_expr\n   enum tree_code original_code;\n };\n \n+/* A sequence of declaration specifiers in C.  */\n+struct c_declspecs {\n+  /* The type specified, not reflecting modifiers such as \"short\" and\n+     \"unsigned\", or NULL_TREE if none.  */\n+  tree type;\n+  /* If the type was specified with a typedef, that typedef decl.  */\n+  tree typedef_decl;\n+  /* The attributes from a typedef decl.  */\n+  tree decl_attr;\n+  /* When parsing, the attributes.  Outside the parser, this will be\n+     NULL; attributes (possibly from multiple lists) will be passed\n+     separately.  */\n+  tree attrs;\n+  /* The modifier bits present.  */\n+  int specbits;\n+  /* Whether something other than a storage class specifier or\n+     attribute has been seen.  This is used to warn for the\n+     obsolescent usage of storage class specifiers other than at the\n+     start of the list.  (Doing this properly would require function\n+     specifiers to be handled separately from storage class\n+     specifiers.)  */\n+  BOOL_BITFIELD non_sc_seen_p : 1;\n+  /* Whether the specifiers include a deprecated typedef.  */\n+  BOOL_BITFIELD deprecated_p : 1;\n+  /* Whether \"int\" was explicitly specified.  */\n+  BOOL_BITFIELD explicit_int_p : 1;\n+  /* Whether \"char\" was explicitly specified.  */\n+  BOOL_BITFIELD explicit_char_p : 1;\n+  /* Whether \"long\" was specified more than once.  */\n+  BOOL_BITFIELD long_long_p : 1;\n+};\n+\n /* The various kinds of declarators in C.  */\n enum c_declarator_kind {\n   /* An identifier.  */\n@@ -175,14 +207,14 @@ struct c_declarator {\n       /* The array dimension, or NULL for [] and [*].  */\n       tree dimen;\n       /* The qualifiers (and attributes, currently ignored) inside [].  */\n-      tree quals;\n+      struct c_declspecs *quals;\n       /* Whether [static] was used.  */\n       BOOL_BITFIELD static_p : 1;\n       /* Whether [*] was used.  */\n       BOOL_BITFIELD vla_unspec_p : 1;\n     } array;\n     /* For pointers, the qualifiers on the pointer type.  */\n-    tree pointer_quals;\n+    struct c_declspecs *pointer_quals;\n     /* For attributes.  */\n     tree attrs;\n   } u;\n@@ -191,15 +223,15 @@ struct c_declarator {\n /* A type name.  */\n struct c_type_name {\n   /* The declaration specifiers.  */\n-  tree specs;\n+  struct c_declspecs *specs;\n   /* The declarator.  */\n   struct c_declarator *declarator;\n };\n \n /* A parameter.  */\n struct c_parm {\n   /* The declaration specifiers, minus any prefix attributes.  */\n-  tree specs;\n+  struct c_declspecs *specs;\n   /* The attributes.  */\n   tree attrs;\n   /* The declarator.  */\n@@ -246,7 +278,8 @@ extern void c_expand_body (tree);\n extern void c_init_decl_processing (void);\n extern void c_dup_lang_specific_decl (tree);\n extern void c_print_identifier (FILE *, tree, int);\n-extern struct c_declarator *build_array_declarator (tree, tree, bool, bool);\n+extern struct c_declarator *build_array_declarator (tree, struct c_declspecs *,\n+\t\t\t\t\t\t    bool, bool);\n extern tree build_enumerator (tree, tree);\n extern void check_for_loop_decls (void);\n extern void mark_forward_parm_decls (void);\n@@ -260,8 +293,7 @@ extern tree finish_enum (tree, tree, tree);\n extern void finish_function (void);\n extern tree finish_struct (tree, tree, tree);\n extern struct c_arg_info *get_parm_info (bool);\n-extern tree grokfield (struct c_declarator *, tree, tree);\n-extern void split_specs_attrs (tree, tree *, tree *);\n+extern tree grokfield (struct c_declarator *, struct c_declspecs *, tree);\n extern tree groktypename (struct c_type_name *);\n extern tree grokparm (const struct c_parm *);\n extern tree implicitly_declare (tree);\n@@ -277,24 +309,31 @@ extern struct c_declarator *set_array_declarator_inner (struct c_declarator *,\n \t\t\t\t\t\t\tbool);\n extern tree builtin_function (const char *, tree, int, enum built_in_class,\n \t\t\t      const char *, tree);\n-extern void shadow_tag (tree);\n-extern void shadow_tag_warned (tree, int);\n+extern void shadow_tag (const struct c_declspecs *);\n+extern void shadow_tag_warned (const struct c_declspecs *, int);\n extern tree start_enum (tree);\n-extern int  start_function (tree, struct c_declarator *, tree);\n-extern tree start_decl (struct c_declarator *, tree, bool, tree);\n+extern int  start_function (struct c_declspecs *, struct c_declarator *, tree);\n+extern tree start_decl (struct c_declarator *, struct c_declspecs *, bool,\n+\t\t\ttree);\n extern tree start_struct (enum tree_code, tree);\n extern void store_parm_decls (void);\n extern void store_parm_decls_from (struct c_arg_info *);\n extern tree xref_tag (enum tree_code, tree);\n extern int c_expand_decl (tree);\n-extern struct c_parm *build_c_parm (tree, tree, struct c_declarator *);\n+extern struct c_parm *build_c_parm (struct c_declspecs *, tree,\n+\t\t\t\t    struct c_declarator *);\n extern struct c_declarator *build_attrs_declarator (tree,\n \t\t\t\t\t\t    struct c_declarator *);\n extern struct c_declarator *build_function_declarator (struct c_arg_info *,\n \t\t\t\t\t\t       struct c_declarator *);\n extern struct c_declarator *build_id_declarator (tree);\n-extern struct c_declarator *make_pointer_declarator (tree,\n+extern struct c_declarator *make_pointer_declarator (struct c_declspecs *,\n \t\t\t\t\t\t     struct c_declarator *);\n+extern struct c_declspecs *build_null_declspecs (void);\n+extern struct c_declspecs *declspecs_add_qual (struct c_declspecs *, tree);\n+extern struct c_declspecs *declspecs_add_type (struct c_declspecs *, tree);\n+extern struct c_declspecs *declspecs_add_scspec (struct c_declspecs *, tree);\n+extern struct c_declspecs *declspecs_add_attrs (struct c_declspecs *, tree);\n \n /* in c-objc-common.c */\n extern int c_disregard_inline_limits (tree);"}, {"sha": "73a76d029afb928449d1eba97348c57bdfa19700", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -1,3 +1,12 @@\n+2004-09-09  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/8420\n+\t* gcc.dg/anon-struct-4.c, gcc.dg/declspec-1.c,\n+\tgcc.dg/declspec-2.c, gcc.dg/declspec-3.c, gcc.dg/declspec-4.c,\n+\tgcc.dg/declspec-5.c, gcc.dg/declspec-6.c,\n+\tgcc.dg/long-long-typespec-1.c: New tests.\n+\t* gcc.dg/tls/diag-2.c: Update expected diagnostics\n+\n 2004-09-09  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/c90-static-1.c, gcc.dg/c99-static-1.c,"}, {"sha": "dc30b0cc0baac4ff8d2df73d0ed2cebd65aae518", "filename": "gcc/testsuite/gcc.dg/anon-struct-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-4.c?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -0,0 +1,10 @@\n+/* Test anonymous structures with type qualifiers.  Bug 8420.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } */\n+\n+struct s {\n+  struct { int a; };\n+  const struct { int b; };\n+  struct { int c; } volatile;\n+};"}, {"sha": "c19f1074ebb09d424abc21c9b496cbf3025441ab", "filename": "gcc/testsuite/gcc.dg/declspec-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-1.c?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -0,0 +1,27 @@\n+/* Test declaration specifiers.  Test cases that used to be handled in\n+   a loop in grokdeclarator.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } */\n+\n+typedef int t;\n+\n+/* These should all be diagnosed, but only once, not for every\n+   identifier declared.  */\n+struct s0 int x0, /* { dg-error \"two or more data types\" } */\n+x1;\n+\n+char union u0 x2, /* { dg-error \"two or more data types\" } */\n+x3;\n+\n+enum e0 struct s1 x4, /* { dg-error \"two or more data types\" } */\n+x5;\n+\n+short short x6, /* { dg-error \"duplicate\" } */\n+x7;\n+\n+t int x8, /* { dg-error \"two or more data types\" } */\n+x9;\n+\n+long long long x10, /* { dg-error \"long long long\" } */\n+x11;"}, {"sha": "f2c535ad83d9bed8df3280c30e0429c6eb24f1fc", "filename": "gcc/testsuite/gcc.dg/declspec-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-2.c?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -0,0 +1,14 @@\n+/* Test declaration specifiers.  Test cases that used to be handled in\n+   a loop in grokdeclarator.  Pedantic cases.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89 -pedantic\" } */\n+\n+/* These should all be diagnosed, but only once, not for every\n+   identifier declared.  */\n+\n+const const int x0, /* { dg-warning \"duplicate\" } */\n+x1;\n+\n+long long x2, /* { dg-warning \"long long\" } */\n+x3;"}, {"sha": "19b1fa257c9bb8beb4bdacb4ed8b36e06bed97a4", "filename": "gcc/testsuite/gcc.dg/declspec-3.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-3.c?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -0,0 +1,34 @@\n+/* Test declaration specifiers.  Test diagnosis of storage class\n+   specifiers not at start.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-W\" } */\n+\n+static int x0;\n+int static x1; /* { dg-warning \"not at beginning\" } */\n+\n+extern int x2;\n+int extern x3; /* { dg-warning \"not at beginning\" } */\n+\n+typedef int x4;\n+int typedef x5; /* { dg-warning \"not at beginning\" } */\n+\n+void g (int);\n+\n+void\n+f (void)\n+{\n+  auto int x6 = 0;\n+  int auto x7 = 0; /* { dg-warning \"not at beginning\" } */\n+  register int x8 = 0;\n+  int register x9 = 0; /* { dg-warning \"not at beginning\" } */\n+  g (x6 + x7 + x8 + x9);\n+}\n+\n+const static int x10; /* { dg-warning \"not at beginning\" } */\n+\n+/* Attributes are OK before storage class specifiers, since some\n+   attributes are like such specifiers themselves.  */\n+\n+__attribute__((format(printf, 1, 2))) static void h (const char *, ...);\n+__attribute__((format(printf, 1, 2))) void static i (const char *, ...); /* { dg-warning \"not at beginning\" } */"}, {"sha": "0610e05941367c0334270cbe22f1fdd3855c2c32", "filename": "gcc/testsuite/gcc.dg/declspec-4.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-4.c?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -0,0 +1,41 @@\n+/* Test declaration specifiers.  Test empty declarations.  Test with\n+   no special options.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* If a declaration does not declare a declarator, it must declare a\n+   tag or the members of an enumeration, and must only contain one\n+   type specifier.  */\n+\n+typedef int T;\n+\n+struct s0;\n+union u0;\n+enum e0; /* A GNU extension.  */\n+enum { E0 };\n+enum e1 { E1 };\n+\n+/* Not declaring anything (pedwarns).  */\n+struct { int a; }; /* { dg-warning \"warning: unnamed struct/union that defines no instances\" } */\n+int; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n+long; /* { dg-warning \"warning: useless keyword or type name in empty declaration\" } */\n+/* { dg-warning \"warning: empty declaration\" \"long\" { target *-*-* } 22 } */\n+T; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n+static const; /* { dg-warning \"warning: useless keyword or type name in empty declaration\" } */\n+/* { dg-warning \"warning: empty declaration\" \"long\" { target *-*-* } 25 } */\n+union { long b; }; /* { dg-warning \"warning: unnamed struct/union that defines no instances\" } */\n+\n+/* Multiple type names (errors).  */\n+struct s1 int; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+char union u1; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"warning: useless type name in empty declaration\" \"char union\" { target *-*-* } 31 } */\n+double enum { E2 }; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"warning: useless type name in empty declaration\" \"double enum\" { target *-*-* } 33 } */\n+T struct s2; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"warning: useless type name in empty declaration\" \"T struct\" { target *-*-* } 35 } */\n+long union u2; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */\n+struct s3 short; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */\n+union u3 signed; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */\n+unsigned struct s4; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */\n+_Complex enum { E3 }; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */"}, {"sha": "aba2739702320a08f23d030a3ab300f70a66c7b9", "filename": "gcc/testsuite/gcc.dg/declspec-5.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-5.c?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -0,0 +1,41 @@\n+/* Test declaration specifiers.  Test empty declarations.  Test with\n+   -pedantic.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+/* If a declaration does not declare a declarator, it must declare a\n+   tag or the members of an enumeration, and must only contain one\n+   type specifier.  */\n+\n+typedef int T;\n+\n+struct s0;\n+union u0;\n+enum e0; /* { dg-warning \"warning: ISO C forbids forward references\" } */\n+enum { E0 };\n+enum e1 { E1 };\n+\n+/* Not declaring anything (pedwarns).  */\n+struct { int a; }; /* { dg-warning \"warning: unnamed struct/union that defines no instances\" } */\n+int; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n+long; /* { dg-warning \"warning: useless keyword or type name in empty declaration\" } */\n+/* { dg-warning \"warning: empty declaration\" \"long\" { target *-*-* } 22 } */\n+T; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n+static const; /* { dg-warning \"warning: useless keyword or type name in empty declaration\" } */\n+/* { dg-warning \"warning: empty declaration\" \"long\" { target *-*-* } 25 } */\n+union { long b; }; /* { dg-warning \"warning: unnamed struct/union that defines no instances\" } */\n+\n+/* Multiple type names (errors).  */\n+struct s1 int; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+char union u1; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"warning: useless type name in empty declaration\" \"char union\" { target *-*-* } 31 } */\n+double enum { E2 }; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"warning: useless type name in empty declaration\" \"double enum\" { target *-*-* } 33 } */\n+T struct s2; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"warning: useless type name in empty declaration\" \"T struct\" { target *-*-* } 35 } */\n+long union u2; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */\n+struct s3 short; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */\n+union u3 signed; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */\n+unsigned struct s4; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */\n+_Complex enum { E3 }; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */"}, {"sha": "91a5d82b842099667fbc56ca63b10ecf79565f72", "filename": "gcc/testsuite/gcc.dg/declspec-6.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-6.c?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -0,0 +1,41 @@\n+/* Test declaration specifiers.  Test empty declarations.  Test with\n+   -pedantic-errors.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+\n+/* If a declaration does not declare a declarator, it must declare a\n+   tag or the members of an enumeration, and must only contain one\n+   type specifier.  */\n+\n+typedef int T;\n+\n+struct s0;\n+union u0;\n+enum e0; /* { dg-error \"error: ISO C forbids forward references\" } */\n+enum { E0 };\n+enum e1 { E1 };\n+\n+/* Not declaring anything (pedwarns).  */\n+struct { int a; }; /* { dg-error \"error: unnamed struct/union that defines no instances\" } */\n+int; /* { dg-error \"error: useless type name in empty declaration\" } */\n+long; /* { dg-warning \"warning: useless keyword or type name in empty declaration\" } */\n+/* { dg-error \"error: empty declaration\" \"long\" { target *-*-* } 22 } */\n+T; /* { dg-error \"error: useless type name in empty declaration\" } */\n+static const; /* { dg-warning \"warning: useless keyword or type name in empty declaration\" } */\n+/* { dg-error \"error: empty declaration\" \"long\" { target *-*-* } 25 } */\n+union { long b; }; /* { dg-error \"error: unnamed struct/union that defines no instances\" } */\n+\n+/* Multiple type names (errors).  */\n+struct s1 int; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+char union u1; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+/* { dg-error \"error: useless type name in empty declaration\" \"char union\" { target *-*-* } 31 } */\n+double enum { E2 }; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+/* { dg-error \"error: useless type name in empty declaration\" \"double enum\" { target *-*-* } 33 } */\n+T struct s2; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+/* { dg-error \"error: useless type name in empty declaration\" \"T struct\" { target *-*-* } 35 } */\n+long union u2; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */\n+struct s3 short; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */\n+union u3 signed; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */\n+unsigned struct s4; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */\n+_Complex enum { E3 }; /* { dg-error \"error: long, short, signed, unsigned or complex used invalidly in empty declaration\" } */"}, {"sha": "5a94c1df9c3029285107c3c29da112002854ddb0", "filename": "gcc/testsuite/gcc.dg/long-long-typespec-1.c", "status": "added", "additions": 828, "deletions": 0, "changes": 828, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-typespec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-typespec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-typespec-1.c?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -0,0 +1,828 @@\n+/* Test for valid and invalid combinations of type specifiers in C90\n+   with -Wno-long-long.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors -Wno-long-long\" } */\n+\n+typedef char type;\n+extern *x0;\n+void *x1;\n+char *x2;\n+short *x3;\n+int *x4;\n+long *x5;\n+float *x6;\n+double *x7;\n+signed *x8;\n+unsigned *x9;\n+type *x10;\n+void void *x11; /* { dg-error \"error\" \"void void\" } */\n+void char *x12; /* { dg-error \"error\" \"void char\" } */\n+void short *x13; /* { dg-error \"error\" \"void short\" } */\n+void int *x14; /* { dg-error \"error\" \"void int\" } */\n+void long *x15; /* { dg-error \"error\" \"void long\" } */\n+void float *x16; /* { dg-error \"error\" \"void float\" } */\n+void double *x17; /* { dg-error \"error\" \"void double\" } */\n+void signed *x18; /* { dg-error \"error\" \"void signed\" } */\n+void unsigned *x19; /* { dg-error \"error\" \"void unsigned\" } */\n+char void *x20; /* { dg-error \"error\" \"char void\" } */\n+char char *x21; /* { dg-error \"error\" \"char char\" } */\n+char short *x22; /* { dg-error \"error\" \"char short\" } */\n+char int *x23; /* { dg-error \"error\" \"char int\" } */\n+char long *x24; /* { dg-error \"error\" \"char long\" } */\n+char float *x25; /* { dg-error \"error\" \"char float\" } */\n+char double *x26; /* { dg-error \"error\" \"char double\" } */\n+char signed *x27;\n+char unsigned *x28;\n+short void *x29; /* { dg-error \"error\" \"short void\" } */\n+short char *x30; /* { dg-error \"error\" \"short char\" } */\n+short short *x31; /* { dg-error \"error\" \"short short\" } */\n+short int *x32;\n+short long *x33; /* { dg-error \"error\" \"short long\" } */\n+short float *x34; /* { dg-error \"error\" \"short float\" } */\n+short double *x35; /* { dg-error \"error\" \"short double\" } */\n+short signed *x36;\n+short unsigned *x37;\n+int void *x38; /* { dg-error \"error\" \"int void\" } */\n+int char *x39; /* { dg-error \"error\" \"int char\" } */\n+int short *x40;\n+int int *x41; /* { dg-error \"error\" \"int int\" } */\n+int long *x42;\n+int float *x43; /* { dg-error \"error\" \"int float\" } */\n+int double *x44; /* { dg-error \"error\" \"int double\" } */\n+int signed *x45;\n+int unsigned *x46;\n+long void *x47; /* { dg-error \"error\" \"long void\" } */\n+long char *x48; /* { dg-error \"error\" \"long char\" } */\n+long short *x49; /* { dg-error \"error\" \"long short\" } */\n+long int *x50;\n+long long *x51;\n+long float *x52; /* { dg-error \"error\" \"long float\" } */\n+long double *x53;\n+long signed *x54;\n+long unsigned *x55;\n+float void *x56; /* { dg-error \"error\" \"float void\" } */\n+float char *x57; /* { dg-error \"error\" \"float char\" } */\n+float short *x58; /* { dg-error \"error\" \"float short\" } */\n+float int *x59; /* { dg-error \"error\" \"float int\" } */\n+float long *x60; /* { dg-error \"error\" \"float long\" } */\n+float float *x61; /* { dg-error \"error\" \"float float\" } */\n+float double *x62; /* { dg-error \"error\" \"float double\" } */\n+float signed *x63; /* { dg-error \"error\" \"float signed\" } */\n+float unsigned *x64; /* { dg-error \"error\" \"float unsigned\" } */\n+double void *x65; /* { dg-error \"error\" \"double void\" } */\n+double char *x66; /* { dg-error \"error\" \"double char\" } */\n+double short *x67; /* { dg-error \"error\" \"double short\" } */\n+double int *x68; /* { dg-error \"error\" \"double int\" } */\n+double long *x69;\n+double float *x70; /* { dg-error \"error\" \"double float\" } */\n+double double *x71; /* { dg-error \"error\" \"double double\" } */\n+double signed *x72; /* { dg-error \"error\" \"double signed\" } */\n+double unsigned *x73; /* { dg-error \"error\" \"double unsigned\" } */\n+signed void *x74; /* { dg-error \"error\" \"signed void\" } */\n+signed char *x75;\n+signed short *x76;\n+signed int *x77;\n+signed long *x78;\n+signed float *x79; /* { dg-error \"error\" \"signed float\" } */\n+signed double *x80; /* { dg-error \"error\" \"signed double\" } */\n+signed signed *x81; /* { dg-error \"error\" \"signed signed\" } */\n+signed unsigned *x82; /* { dg-error \"error\" \"signed unsigned\" } */\n+unsigned void *x83; /* { dg-error \"error\" \"unsigned void\" } */\n+unsigned char *x84;\n+unsigned short *x85;\n+unsigned int *x86;\n+unsigned long *x87;\n+unsigned float *x88; /* { dg-error \"error\" \"unsigned float\" } */\n+unsigned double *x89; /* { dg-error \"error\" \"unsigned double\" } */\n+unsigned signed *x90; /* { dg-error \"error\" \"unsigned signed\" } */\n+unsigned unsigned *x91; /* { dg-error \"error\" \"unsigned unsigned\" } */\n+type void *x92; /* { dg-error \"error\" \"type void\" } */\n+type char *x93; /* { dg-error \"error\" \"type char\" } */\n+type short *x94; /* { dg-error \"error\" \"type short\" } */\n+type int *x95; /* { dg-error \"error\" \"type int\" } */\n+type long *x96; /* { dg-error \"error\" \"type long\" } */\n+type float *x97; /* { dg-error \"error\" \"type float\" } */\n+type double *x98; /* { dg-error \"error\" \"type double\" } */\n+type signed *x99; /* { dg-error \"error\" \"type signed\" } */\n+type unsigned *x100; /* { dg-error \"error\" \"type unsigned\" } */\n+char signed void *x101; /* { dg-error \"error\" \"char signed void\" } */\n+char signed char *x102; /* { dg-error \"error\" \"char signed char\" } */\n+char signed short *x103; /* { dg-error \"error\" \"char signed short\" } */\n+char signed int *x104; /* { dg-error \"error\" \"char signed int\" } */\n+char signed long *x105; /* { dg-error \"error\" \"char signed long\" } */\n+char signed float *x106; /* { dg-error \"error\" \"char signed float\" } */\n+char signed double *x107; /* { dg-error \"error\" \"char signed double\" } */\n+char signed signed *x108; /* { dg-error \"error\" \"char signed signed\" } */\n+char signed unsigned *x109; /* { dg-error \"error\" \"char signed unsigned\" } */\n+char unsigned void *x110; /* { dg-error \"error\" \"char unsigned void\" } */\n+char unsigned char *x111; /* { dg-error \"error\" \"char unsigned char\" } */\n+char unsigned short *x112; /* { dg-error \"error\" \"char unsigned short\" } */\n+char unsigned int *x113; /* { dg-error \"error\" \"char unsigned int\" } */\n+char unsigned long *x114; /* { dg-error \"error\" \"char unsigned long\" } */\n+char unsigned float *x115; /* { dg-error \"error\" \"char unsigned float\" } */\n+char unsigned double *x116; /* { dg-error \"error\" \"char unsigned double\" } */\n+char unsigned signed *x117; /* { dg-error \"error\" \"char unsigned signed\" } */\n+char unsigned unsigned *x118; /* { dg-error \"error\" \"char unsigned unsigned\" } */\n+short int void *x119; /* { dg-error \"error\" \"short int void\" } */\n+short int char *x120; /* { dg-error \"error\" \"short int char\" } */\n+short int short *x121; /* { dg-error \"error\" \"short int short\" } */\n+short int int *x122; /* { dg-error \"error\" \"short int int\" } */\n+short int long *x123; /* { dg-error \"error\" \"short int long\" } */\n+short int float *x124; /* { dg-error \"error\" \"short int float\" } */\n+short int double *x125; /* { dg-error \"error\" \"short int double\" } */\n+short int signed *x126;\n+short int unsigned *x127;\n+short signed void *x128; /* { dg-error \"error\" \"short signed void\" } */\n+short signed char *x129; /* { dg-error \"error\" \"short signed char\" } */\n+short signed short *x130; /* { dg-error \"error\" \"short signed short\" } */\n+short signed int *x131;\n+short signed long *x132; /* { dg-error \"error\" \"short signed long\" } */\n+short signed float *x133; /* { dg-error \"error\" \"short signed float\" } */\n+short signed double *x134; /* { dg-error \"error\" \"short signed double\" } */\n+short signed signed *x135; /* { dg-error \"error\" \"short signed signed\" } */\n+short signed unsigned *x136; /* { dg-error \"error\" \"short signed unsigned\" } */\n+short unsigned void *x137; /* { dg-error \"error\" \"short unsigned void\" } */\n+short unsigned char *x138; /* { dg-error \"error\" \"short unsigned char\" } */\n+short unsigned short *x139; /* { dg-error \"error\" \"short unsigned short\" } */\n+short unsigned int *x140;\n+short unsigned long *x141; /* { dg-error \"error\" \"short unsigned long\" } */\n+short unsigned float *x142; /* { dg-error \"error\" \"short unsigned float\" } */\n+short unsigned double *x143; /* { dg-error \"error\" \"short unsigned double\" } */\n+short unsigned signed *x144; /* { dg-error \"error\" \"short unsigned signed\" } */\n+short unsigned unsigned *x145; /* { dg-error \"error\" \"short unsigned unsigned\" } */\n+int short void *x146; /* { dg-error \"error\" \"int short void\" } */\n+int short char *x147; /* { dg-error \"error\" \"int short char\" } */\n+int short short *x148; /* { dg-error \"error\" \"int short short\" } */\n+int short int *x149; /* { dg-error \"error\" \"int short int\" } */\n+int short long *x150; /* { dg-error \"error\" \"int short long\" } */\n+int short float *x151; /* { dg-error \"error\" \"int short float\" } */\n+int short double *x152; /* { dg-error \"error\" \"int short double\" } */\n+int short signed *x153;\n+int short unsigned *x154;\n+int long void *x155; /* { dg-error \"error\" \"int long void\" } */\n+int long char *x156; /* { dg-error \"error\" \"int long char\" } */\n+int long short *x157; /* { dg-error \"error\" \"int long short\" } */\n+int long int *x158; /* { dg-error \"error\" \"int long int\" } */\n+int long long *x159;\n+int long float *x160; /* { dg-error \"error\" \"int long float\" } */\n+int long double *x161; /* { dg-error \"error\" \"int long double\" } */\n+int long signed *x162;\n+int long unsigned *x163;\n+int signed void *x164; /* { dg-error \"error\" \"int signed void\" } */\n+int signed char *x165; /* { dg-error \"error\" \"int signed char\" } */\n+int signed short *x166;\n+int signed int *x167; /* { dg-error \"error\" \"int signed int\" } */\n+int signed long *x168;\n+int signed float *x169; /* { dg-error \"error\" \"int signed float\" } */\n+int signed double *x170; /* { dg-error \"error\" \"int signed double\" } */\n+int signed signed *x171; /* { dg-error \"error\" \"int signed signed\" } */\n+int signed unsigned *x172; /* { dg-error \"error\" \"int signed unsigned\" } */\n+int unsigned void *x173; /* { dg-error \"error\" \"int unsigned void\" } */\n+int unsigned char *x174; /* { dg-error \"error\" \"int unsigned char\" } */\n+int unsigned short *x175;\n+int unsigned int *x176; /* { dg-error \"error\" \"int unsigned int\" } */\n+int unsigned long *x177;\n+int unsigned float *x178; /* { dg-error \"error\" \"int unsigned float\" } */\n+int unsigned double *x179; /* { dg-error \"error\" \"int unsigned double\" } */\n+int unsigned signed *x180; /* { dg-error \"error\" \"int unsigned signed\" } */\n+int unsigned unsigned *x181; /* { dg-error \"error\" \"int unsigned unsigned\" } */\n+long int void *x182; /* { dg-error \"error\" \"long int void\" } */\n+long int char *x183; /* { dg-error \"error\" \"long int char\" } */\n+long int short *x184; /* { dg-error \"error\" \"long int short\" } */\n+long int int *x185; /* { dg-error \"error\" \"long int int\" } */\n+long int long *x186;\n+long int float *x187; /* { dg-error \"error\" \"long int float\" } */\n+long int double *x188; /* { dg-error \"error\" \"long int double\" } */\n+long int signed *x189;\n+long int unsigned *x190;\n+long long void *x191; /* { dg-error \"error\" \"long long void\" } */\n+long long char *x192; /* { dg-error \"error\" \"long long char\" } */\n+long long short *x193; /* { dg-error \"error\" \"long long short\" } */\n+long long int *x194;\n+long long long *x195; /* { dg-error \"error\" \"long long long\" } */\n+long long float *x196; /* { dg-error \"error\" \"long long float\" } */\n+long long double *x197; /* { dg-error \"error\" \"long long double\" } */\n+long long signed *x198;\n+long long unsigned *x199;\n+long double void *x200; /* { dg-error \"error\" \"long double void\" } */\n+long double char *x201; /* { dg-error \"error\" \"long double char\" } */\n+long double short *x202; /* { dg-error \"error\" \"long double short\" } */\n+long double int *x203; /* { dg-error \"error\" \"long double int\" } */\n+long double long *x204; /* { dg-error \"error\" \"long double long\" } */\n+long double float *x205; /* { dg-error \"error\" \"long double float\" } */\n+long double double *x206; /* { dg-error \"error\" \"long double double\" } */\n+long double signed *x207; /* { dg-error \"error\" \"long double signed\" } */\n+long double unsigned *x208; /* { dg-error \"error\" \"long double unsigned\" } */\n+long signed void *x209; /* { dg-error \"error\" \"long signed void\" } */\n+long signed char *x210; /* { dg-error \"error\" \"long signed char\" } */\n+long signed short *x211; /* { dg-error \"error\" \"long signed short\" } */\n+long signed int *x212;\n+long signed long *x213;\n+long signed float *x214; /* { dg-error \"error\" \"long signed float\" } */\n+long signed double *x215; /* { dg-error \"error\" \"long signed double\" } */\n+long signed signed *x216; /* { dg-error \"error\" \"long signed signed\" } */\n+long signed unsigned *x217; /* { dg-error \"error\" \"long signed unsigned\" } */\n+long unsigned void *x218; /* { dg-error \"error\" \"long unsigned void\" } */\n+long unsigned char *x219; /* { dg-error \"error\" \"long unsigned char\" } */\n+long unsigned short *x220; /* { dg-error \"error\" \"long unsigned short\" } */\n+long unsigned int *x221;\n+long unsigned long *x222;\n+long unsigned float *x223; /* { dg-error \"error\" \"long unsigned float\" } */\n+long unsigned double *x224; /* { dg-error \"error\" \"long unsigned double\" } */\n+long unsigned signed *x225; /* { dg-error \"error\" \"long unsigned signed\" } */\n+long unsigned unsigned *x226; /* { dg-error \"error\" \"long unsigned unsigned\" } */\n+double long void *x227; /* { dg-error \"error\" \"double long void\" } */\n+double long char *x228; /* { dg-error \"error\" \"double long char\" } */\n+double long short *x229; /* { dg-error \"error\" \"double long short\" } */\n+double long int *x230; /* { dg-error \"error\" \"double long int\" } */\n+double long long *x231; /* { dg-error \"error\" \"double long long\" } */\n+double long float *x232; /* { dg-error \"error\" \"double long float\" } */\n+double long double *x233; /* { dg-error \"error\" \"double long double\" } */\n+double long signed *x234; /* { dg-error \"error\" \"double long signed\" } */\n+double long unsigned *x235; /* { dg-error \"error\" \"double long unsigned\" } */\n+signed char void *x236; /* { dg-error \"error\" \"signed char void\" } */\n+signed char char *x237; /* { dg-error \"error\" \"signed char char\" } */\n+signed char short *x238; /* { dg-error \"error\" \"signed char short\" } */\n+signed char int *x239; /* { dg-error \"error\" \"signed char int\" } */\n+signed char long *x240; /* { dg-error \"error\" \"signed char long\" } */\n+signed char float *x241; /* { dg-error \"error\" \"signed char float\" } */\n+signed char double *x242; /* { dg-error \"error\" \"signed char double\" } */\n+signed char signed *x243; /* { dg-error \"error\" \"signed char signed\" } */\n+signed char unsigned *x244; /* { dg-error \"error\" \"signed char unsigned\" } */\n+signed short void *x245; /* { dg-error \"error\" \"signed short void\" } */\n+signed short char *x246; /* { dg-error \"error\" \"signed short char\" } */\n+signed short short *x247; /* { dg-error \"error\" \"signed short short\" } */\n+signed short int *x248;\n+signed short long *x249; /* { dg-error \"error\" \"signed short long\" } */\n+signed short float *x250; /* { dg-error \"error\" \"signed short float\" } */\n+signed short double *x251; /* { dg-error \"error\" \"signed short double\" } */\n+signed short signed *x252; /* { dg-error \"error\" \"signed short signed\" } */\n+signed short unsigned *x253; /* { dg-error \"error\" \"signed short unsigned\" } */\n+signed int void *x254; /* { dg-error \"error\" \"signed int void\" } */\n+signed int char *x255; /* { dg-error \"error\" \"signed int char\" } */\n+signed int short *x256;\n+signed int int *x257; /* { dg-error \"error\" \"signed int int\" } */\n+signed int long *x258;\n+signed int float *x259; /* { dg-error \"error\" \"signed int float\" } */\n+signed int double *x260; /* { dg-error \"error\" \"signed int double\" } */\n+signed int signed *x261; /* { dg-error \"error\" \"signed int signed\" } */\n+signed int unsigned *x262; /* { dg-error \"error\" \"signed int unsigned\" } */\n+signed long void *x263; /* { dg-error \"error\" \"signed long void\" } */\n+signed long char *x264; /* { dg-error \"error\" \"signed long char\" } */\n+signed long short *x265; /* { dg-error \"error\" \"signed long short\" } */\n+signed long int *x266;\n+signed long long *x267;\n+signed long float *x268; /* { dg-error \"error\" \"signed long float\" } */\n+signed long double *x269; /* { dg-error \"error\" \"signed long double\" } */\n+signed long signed *x270; /* { dg-error \"error\" \"signed long signed\" } */\n+signed long unsigned *x271; /* { dg-error \"error\" \"signed long unsigned\" } */\n+unsigned char void *x272; /* { dg-error \"error\" \"unsigned char void\" } */\n+unsigned char char *x273; /* { dg-error \"error\" \"unsigned char char\" } */\n+unsigned char short *x274; /* { dg-error \"error\" \"unsigned char short\" } */\n+unsigned char int *x275; /* { dg-error \"error\" \"unsigned char int\" } */\n+unsigned char long *x276; /* { dg-error \"error\" \"unsigned char long\" } */\n+unsigned char float *x277; /* { dg-error \"error\" \"unsigned char float\" } */\n+unsigned char double *x278; /* { dg-error \"error\" \"unsigned char double\" } */\n+unsigned char signed *x279; /* { dg-error \"error\" \"unsigned char signed\" } */\n+unsigned char unsigned *x280; /* { dg-error \"error\" \"unsigned char unsigned\" } */\n+unsigned short void *x281; /* { dg-error \"error\" \"unsigned short void\" } */\n+unsigned short char *x282; /* { dg-error \"error\" \"unsigned short char\" } */\n+unsigned short short *x283; /* { dg-error \"error\" \"unsigned short short\" } */\n+unsigned short int *x284;\n+unsigned short long *x285; /* { dg-error \"error\" \"unsigned short long\" } */\n+unsigned short float *x286; /* { dg-error \"error\" \"unsigned short float\" } */\n+unsigned short double *x287; /* { dg-error \"error\" \"unsigned short double\" } */\n+unsigned short signed *x288; /* { dg-error \"error\" \"unsigned short signed\" } */\n+unsigned short unsigned *x289; /* { dg-error \"error\" \"unsigned short unsigned\" } */\n+unsigned int void *x290; /* { dg-error \"error\" \"unsigned int void\" } */\n+unsigned int char *x291; /* { dg-error \"error\" \"unsigned int char\" } */\n+unsigned int short *x292;\n+unsigned int int *x293; /* { dg-error \"error\" \"unsigned int int\" } */\n+unsigned int long *x294;\n+unsigned int float *x295; /* { dg-error \"error\" \"unsigned int float\" } */\n+unsigned int double *x296; /* { dg-error \"error\" \"unsigned int double\" } */\n+unsigned int signed *x297; /* { dg-error \"error\" \"unsigned int signed\" } */\n+unsigned int unsigned *x298; /* { dg-error \"error\" \"unsigned int unsigned\" } */\n+unsigned long void *x299; /* { dg-error \"error\" \"unsigned long void\" } */\n+unsigned long char *x300; /* { dg-error \"error\" \"unsigned long char\" } */\n+unsigned long short *x301; /* { dg-error \"error\" \"unsigned long short\" } */\n+unsigned long int *x302;\n+unsigned long long *x303;\n+unsigned long float *x304; /* { dg-error \"error\" \"unsigned long float\" } */\n+unsigned long double *x305; /* { dg-error \"error\" \"unsigned long double\" } */\n+unsigned long signed *x306; /* { dg-error \"error\" \"unsigned long signed\" } */\n+unsigned long unsigned *x307; /* { dg-error \"error\" \"unsigned long unsigned\" } */\n+short int signed void *x308; /* { dg-error \"error\" \"short int signed void\" } */\n+short int signed char *x309; /* { dg-error \"error\" \"short int signed char\" } */\n+short int signed short *x310; /* { dg-error \"error\" \"short int signed short\" } */\n+short int signed int *x311; /* { dg-error \"error\" \"short int signed int\" } */\n+short int signed long *x312; /* { dg-error \"error\" \"short int signed long\" } */\n+short int signed float *x313; /* { dg-error \"error\" \"short int signed float\" } */\n+short int signed double *x314; /* { dg-error \"error\" \"short int signed double\" } */\n+short int signed signed *x315; /* { dg-error \"error\" \"short int signed signed\" } */\n+short int signed unsigned *x316; /* { dg-error \"error\" \"short int signed unsigned\" } */\n+short int unsigned void *x317; /* { dg-error \"error\" \"short int unsigned void\" } */\n+short int unsigned char *x318; /* { dg-error \"error\" \"short int unsigned char\" } */\n+short int unsigned short *x319; /* { dg-error \"error\" \"short int unsigned short\" } */\n+short int unsigned int *x320; /* { dg-error \"error\" \"short int unsigned int\" } */\n+short int unsigned long *x321; /* { dg-error \"error\" \"short int unsigned long\" } */\n+short int unsigned float *x322; /* { dg-error \"error\" \"short int unsigned float\" } */\n+short int unsigned double *x323; /* { dg-error \"error\" \"short int unsigned double\" } */\n+short int unsigned signed *x324; /* { dg-error \"error\" \"short int unsigned signed\" } */\n+short int unsigned unsigned *x325; /* { dg-error \"error\" \"short int unsigned unsigned\" } */\n+short signed int void *x326; /* { dg-error \"error\" \"short signed int void\" } */\n+short signed int char *x327; /* { dg-error \"error\" \"short signed int char\" } */\n+short signed int short *x328; /* { dg-error \"error\" \"short signed int short\" } */\n+short signed int int *x329; /* { dg-error \"error\" \"short signed int int\" } */\n+short signed int long *x330; /* { dg-error \"error\" \"short signed int long\" } */\n+short signed int float *x331; /* { dg-error \"error\" \"short signed int float\" } */\n+short signed int double *x332; /* { dg-error \"error\" \"short signed int double\" } */\n+short signed int signed *x333; /* { dg-error \"error\" \"short signed int signed\" } */\n+short signed int unsigned *x334; /* { dg-error \"error\" \"short signed int unsigned\" } */\n+short unsigned int void *x335; /* { dg-error \"error\" \"short unsigned int void\" } */\n+short unsigned int char *x336; /* { dg-error \"error\" \"short unsigned int char\" } */\n+short unsigned int short *x337; /* { dg-error \"error\" \"short unsigned int short\" } */\n+short unsigned int int *x338; /* { dg-error \"error\" \"short unsigned int int\" } */\n+short unsigned int long *x339; /* { dg-error \"error\" \"short unsigned int long\" } */\n+short unsigned int float *x340; /* { dg-error \"error\" \"short unsigned int float\" } */\n+short unsigned int double *x341; /* { dg-error \"error\" \"short unsigned int double\" } */\n+short unsigned int signed *x342; /* { dg-error \"error\" \"short unsigned int signed\" } */\n+short unsigned int unsigned *x343; /* { dg-error \"error\" \"short unsigned int unsigned\" } */\n+int short signed void *x344; /* { dg-error \"error\" \"int short signed void\" } */\n+int short signed char *x345; /* { dg-error \"error\" \"int short signed char\" } */\n+int short signed short *x346; /* { dg-error \"error\" \"int short signed short\" } */\n+int short signed int *x347; /* { dg-error \"error\" \"int short signed int\" } */\n+int short signed long *x348; /* { dg-error \"error\" \"int short signed long\" } */\n+int short signed float *x349; /* { dg-error \"error\" \"int short signed float\" } */\n+int short signed double *x350; /* { dg-error \"error\" \"int short signed double\" } */\n+int short signed signed *x351; /* { dg-error \"error\" \"int short signed signed\" } */\n+int short signed unsigned *x352; /* { dg-error \"error\" \"int short signed unsigned\" } */\n+int short unsigned void *x353; /* { dg-error \"error\" \"int short unsigned void\" } */\n+int short unsigned char *x354; /* { dg-error \"error\" \"int short unsigned char\" } */\n+int short unsigned short *x355; /* { dg-error \"error\" \"int short unsigned short\" } */\n+int short unsigned int *x356; /* { dg-error \"error\" \"int short unsigned int\" } */\n+int short unsigned long *x357; /* { dg-error \"error\" \"int short unsigned long\" } */\n+int short unsigned float *x358; /* { dg-error \"error\" \"int short unsigned float\" } */\n+int short unsigned double *x359; /* { dg-error \"error\" \"int short unsigned double\" } */\n+int short unsigned signed *x360; /* { dg-error \"error\" \"int short unsigned signed\" } */\n+int short unsigned unsigned *x361; /* { dg-error \"error\" \"int short unsigned unsigned\" } */\n+int long long void *x362; /* { dg-error \"error\" \"int long long void\" } */\n+int long long char *x363; /* { dg-error \"error\" \"int long long char\" } */\n+int long long short *x364; /* { dg-error \"error\" \"int long long short\" } */\n+int long long int *x365; /* { dg-error \"error\" \"int long long int\" } */\n+int long long long *x366; /* { dg-error \"error\" \"int long long long\" } */\n+int long long float *x367; /* { dg-error \"error\" \"int long long float\" } */\n+int long long double *x368; /* { dg-error \"error\" \"int long long double\" } */\n+int long long signed *x369;\n+int long long unsigned *x370;\n+int long signed void *x371; /* { dg-error \"error\" \"int long signed void\" } */\n+int long signed char *x372; /* { dg-error \"error\" \"int long signed char\" } */\n+int long signed short *x373; /* { dg-error \"error\" \"int long signed short\" } */\n+int long signed int *x374; /* { dg-error \"error\" \"int long signed int\" } */\n+int long signed long *x375;\n+int long signed float *x376; /* { dg-error \"error\" \"int long signed float\" } */\n+int long signed double *x377; /* { dg-error \"error\" \"int long signed double\" } */\n+int long signed signed *x378; /* { dg-error \"error\" \"int long signed signed\" } */\n+int long signed unsigned *x379; /* { dg-error \"error\" \"int long signed unsigned\" } */\n+int long unsigned void *x380; /* { dg-error \"error\" \"int long unsigned void\" } */\n+int long unsigned char *x381; /* { dg-error \"error\" \"int long unsigned char\" } */\n+int long unsigned short *x382; /* { dg-error \"error\" \"int long unsigned short\" } */\n+int long unsigned int *x383; /* { dg-error \"error\" \"int long unsigned int\" } */\n+int long unsigned long *x384;\n+int long unsigned float *x385; /* { dg-error \"error\" \"int long unsigned float\" } */\n+int long unsigned double *x386; /* { dg-error \"error\" \"int long unsigned double\" } */\n+int long unsigned signed *x387; /* { dg-error \"error\" \"int long unsigned signed\" } */\n+int long unsigned unsigned *x388; /* { dg-error \"error\" \"int long unsigned unsigned\" } */\n+int signed short void *x389; /* { dg-error \"error\" \"int signed short void\" } */\n+int signed short char *x390; /* { dg-error \"error\" \"int signed short char\" } */\n+int signed short short *x391; /* { dg-error \"error\" \"int signed short short\" } */\n+int signed short int *x392; /* { dg-error \"error\" \"int signed short int\" } */\n+int signed short long *x393; /* { dg-error \"error\" \"int signed short long\" } */\n+int signed short float *x394; /* { dg-error \"error\" \"int signed short float\" } */\n+int signed short double *x395; /* { dg-error \"error\" \"int signed short double\" } */\n+int signed short signed *x396; /* { dg-error \"error\" \"int signed short signed\" } */\n+int signed short unsigned *x397; /* { dg-error \"error\" \"int signed short unsigned\" } */\n+int signed long void *x398; /* { dg-error \"error\" \"int signed long void\" } */\n+int signed long char *x399; /* { dg-error \"error\" \"int signed long char\" } */\n+int signed long short *x400; /* { dg-error \"error\" \"int signed long short\" } */\n+int signed long int *x401; /* { dg-error \"error\" \"int signed long int\" } */\n+int signed long long *x402;\n+int signed long float *x403; /* { dg-error \"error\" \"int signed long float\" } */\n+int signed long double *x404; /* { dg-error \"error\" \"int signed long double\" } */\n+int signed long signed *x405; /* { dg-error \"error\" \"int signed long signed\" } */\n+int signed long unsigned *x406; /* { dg-error \"error\" \"int signed long unsigned\" } */\n+int unsigned short void *x407; /* { dg-error \"error\" \"int unsigned short void\" } */\n+int unsigned short char *x408; /* { dg-error \"error\" \"int unsigned short char\" } */\n+int unsigned short short *x409; /* { dg-error \"error\" \"int unsigned short short\" } */\n+int unsigned short int *x410; /* { dg-error \"error\" \"int unsigned short int\" } */\n+int unsigned short long *x411; /* { dg-error \"error\" \"int unsigned short long\" } */\n+int unsigned short float *x412; /* { dg-error \"error\" \"int unsigned short float\" } */\n+int unsigned short double *x413; /* { dg-error \"error\" \"int unsigned short double\" } */\n+int unsigned short signed *x414; /* { dg-error \"error\" \"int unsigned short signed\" } */\n+int unsigned short unsigned *x415; /* { dg-error \"error\" \"int unsigned short unsigned\" } */\n+int unsigned long void *x416; /* { dg-error \"error\" \"int unsigned long void\" } */\n+int unsigned long char *x417; /* { dg-error \"error\" \"int unsigned long char\" } */\n+int unsigned long short *x418; /* { dg-error \"error\" \"int unsigned long short\" } */\n+int unsigned long int *x419; /* { dg-error \"error\" \"int unsigned long int\" } */\n+int unsigned long long *x420;\n+int unsigned long float *x421; /* { dg-error \"error\" \"int unsigned long float\" } */\n+int unsigned long double *x422; /* { dg-error \"error\" \"int unsigned long double\" } */\n+int unsigned long signed *x423; /* { dg-error \"error\" \"int unsigned long signed\" } */\n+int unsigned long unsigned *x424; /* { dg-error \"error\" \"int unsigned long unsigned\" } */\n+long int long void *x425; /* { dg-error \"error\" \"long int long void\" } */\n+long int long char *x426; /* { dg-error \"error\" \"long int long char\" } */\n+long int long short *x427; /* { dg-error \"error\" \"long int long short\" } */\n+long int long int *x428; /* { dg-error \"error\" \"long int long int\" } */\n+long int long long *x429; /* { dg-error \"error\" \"long int long long\" } */\n+long int long float *x430; /* { dg-error \"error\" \"long int long float\" } */\n+long int long double *x431; /* { dg-error \"error\" \"long int long double\" } */\n+long int long signed *x432;\n+long int long unsigned *x433;\n+long int signed void *x434; /* { dg-error \"error\" \"long int signed void\" } */\n+long int signed char *x435; /* { dg-error \"error\" \"long int signed char\" } */\n+long int signed short *x436; /* { dg-error \"error\" \"long int signed short\" } */\n+long int signed int *x437; /* { dg-error \"error\" \"long int signed int\" } */\n+long int signed long *x438;\n+long int signed float *x439; /* { dg-error \"error\" \"long int signed float\" } */\n+long int signed double *x440; /* { dg-error \"error\" \"long int signed double\" } */\n+long int signed signed *x441; /* { dg-error \"error\" \"long int signed signed\" } */\n+long int signed unsigned *x442; /* { dg-error \"error\" \"long int signed unsigned\" } */\n+long int unsigned void *x443; /* { dg-error \"error\" \"long int unsigned void\" } */\n+long int unsigned char *x444; /* { dg-error \"error\" \"long int unsigned char\" } */\n+long int unsigned short *x445; /* { dg-error \"error\" \"long int unsigned short\" } */\n+long int unsigned int *x446; /* { dg-error \"error\" \"long int unsigned int\" } */\n+long int unsigned long *x447;\n+long int unsigned float *x448; /* { dg-error \"error\" \"long int unsigned float\" } */\n+long int unsigned double *x449; /* { dg-error \"error\" \"long int unsigned double\" } */\n+long int unsigned signed *x450; /* { dg-error \"error\" \"long int unsigned signed\" } */\n+long int unsigned unsigned *x451; /* { dg-error \"error\" \"long int unsigned unsigned\" } */\n+long long int void *x452; /* { dg-error \"error\" \"long long int void\" } */\n+long long int char *x453; /* { dg-error \"error\" \"long long int char\" } */\n+long long int short *x454; /* { dg-error \"error\" \"long long int short\" } */\n+long long int int *x455; /* { dg-error \"error\" \"long long int int\" } */\n+long long int long *x456; /* { dg-error \"error\" \"long long int long\" } */\n+long long int float *x457; /* { dg-error \"error\" \"long long int float\" } */\n+long long int double *x458; /* { dg-error \"error\" \"long long int double\" } */\n+long long int signed *x459;\n+long long int unsigned *x460;\n+long long signed void *x461; /* { dg-error \"error\" \"long long signed void\" } */\n+long long signed char *x462; /* { dg-error \"error\" \"long long signed char\" } */\n+long long signed short *x463; /* { dg-error \"error\" \"long long signed short\" } */\n+long long signed int *x464;\n+long long signed long *x465; /* { dg-error \"error\" \"long long signed long\" } */\n+long long signed float *x466; /* { dg-error \"error\" \"long long signed float\" } */\n+long long signed double *x467; /* { dg-error \"error\" \"long long signed double\" } */\n+long long signed signed *x468; /* { dg-error \"error\" \"long long signed signed\" } */\n+long long signed unsigned *x469; /* { dg-error \"error\" \"long long signed unsigned\" } */\n+long long unsigned void *x470; /* { dg-error \"error\" \"long long unsigned void\" } */\n+long long unsigned char *x471; /* { dg-error \"error\" \"long long unsigned char\" } */\n+long long unsigned short *x472; /* { dg-error \"error\" \"long long unsigned short\" } */\n+long long unsigned int *x473;\n+long long unsigned long *x474; /* { dg-error \"error\" \"long long unsigned long\" } */\n+long long unsigned float *x475; /* { dg-error \"error\" \"long long unsigned float\" } */\n+long long unsigned double *x476; /* { dg-error \"error\" \"long long unsigned double\" } */\n+long long unsigned signed *x477; /* { dg-error \"error\" \"long long unsigned signed\" } */\n+long long unsigned unsigned *x478; /* { dg-error \"error\" \"long long unsigned unsigned\" } */\n+long signed int void *x479; /* { dg-error \"error\" \"long signed int void\" } */\n+long signed int char *x480; /* { dg-error \"error\" \"long signed int char\" } */\n+long signed int short *x481; /* { dg-error \"error\" \"long signed int short\" } */\n+long signed int int *x482; /* { dg-error \"error\" \"long signed int int\" } */\n+long signed int long *x483;\n+long signed int float *x484; /* { dg-error \"error\" \"long signed int float\" } */\n+long signed int double *x485; /* { dg-error \"error\" \"long signed int double\" } */\n+long signed int signed *x486; /* { dg-error \"error\" \"long signed int signed\" } */\n+long signed int unsigned *x487; /* { dg-error \"error\" \"long signed int unsigned\" } */\n+long signed long void *x488; /* { dg-error \"error\" \"long signed long void\" } */\n+long signed long char *x489; /* { dg-error \"error\" \"long signed long char\" } */\n+long signed long short *x490; /* { dg-error \"error\" \"long signed long short\" } */\n+long signed long int *x491;\n+long signed long long *x492; /* { dg-error \"error\" \"long signed long long\" } */\n+long signed long float *x493; /* { dg-error \"error\" \"long signed long float\" } */\n+long signed long double *x494; /* { dg-error \"error\" \"long signed long double\" } */\n+long signed long signed *x495; /* { dg-error \"error\" \"long signed long signed\" } */\n+long signed long unsigned *x496; /* { dg-error \"error\" \"long signed long unsigned\" } */\n+long unsigned int void *x497; /* { dg-error \"error\" \"long unsigned int void\" } */\n+long unsigned int char *x498; /* { dg-error \"error\" \"long unsigned int char\" } */\n+long unsigned int short *x499; /* { dg-error \"error\" \"long unsigned int short\" } */\n+long unsigned int int *x500; /* { dg-error \"error\" \"long unsigned int int\" } */\n+long unsigned int long *x501;\n+long unsigned int float *x502; /* { dg-error \"error\" \"long unsigned int float\" } */\n+long unsigned int double *x503; /* { dg-error \"error\" \"long unsigned int double\" } */\n+long unsigned int signed *x504; /* { dg-error \"error\" \"long unsigned int signed\" } */\n+long unsigned int unsigned *x505; /* { dg-error \"error\" \"long unsigned int unsigned\" } */\n+long unsigned long void *x506; /* { dg-error \"error\" \"long unsigned long void\" } */\n+long unsigned long char *x507; /* { dg-error \"error\" \"long unsigned long char\" } */\n+long unsigned long short *x508; /* { dg-error \"error\" \"long unsigned long short\" } */\n+long unsigned long int *x509;\n+long unsigned long long *x510; /* { dg-error \"error\" \"long unsigned long long\" } */\n+long unsigned long float *x511; /* { dg-error \"error\" \"long unsigned long float\" } */\n+long unsigned long double *x512; /* { dg-error \"error\" \"long unsigned long double\" } */\n+long unsigned long signed *x513; /* { dg-error \"error\" \"long unsigned long signed\" } */\n+long unsigned long unsigned *x514; /* { dg-error \"error\" \"long unsigned long unsigned\" } */\n+signed short int void *x515; /* { dg-error \"error\" \"signed short int void\" } */\n+signed short int char *x516; /* { dg-error \"error\" \"signed short int char\" } */\n+signed short int short *x517; /* { dg-error \"error\" \"signed short int short\" } */\n+signed short int int *x518; /* { dg-error \"error\" \"signed short int int\" } */\n+signed short int long *x519; /* { dg-error \"error\" \"signed short int long\" } */\n+signed short int float *x520; /* { dg-error \"error\" \"signed short int float\" } */\n+signed short int double *x521; /* { dg-error \"error\" \"signed short int double\" } */\n+signed short int signed *x522; /* { dg-error \"error\" \"signed short int signed\" } */\n+signed short int unsigned *x523; /* { dg-error \"error\" \"signed short int unsigned\" } */\n+signed int short void *x524; /* { dg-error \"error\" \"signed int short void\" } */\n+signed int short char *x525; /* { dg-error \"error\" \"signed int short char\" } */\n+signed int short short *x526; /* { dg-error \"error\" \"signed int short short\" } */\n+signed int short int *x527; /* { dg-error \"error\" \"signed int short int\" } */\n+signed int short long *x528; /* { dg-error \"error\" \"signed int short long\" } */\n+signed int short float *x529; /* { dg-error \"error\" \"signed int short float\" } */\n+signed int short double *x530; /* { dg-error \"error\" \"signed int short double\" } */\n+signed int short signed *x531; /* { dg-error \"error\" \"signed int short signed\" } */\n+signed int short unsigned *x532; /* { dg-error \"error\" \"signed int short unsigned\" } */\n+signed int long void *x533; /* { dg-error \"error\" \"signed int long void\" } */\n+signed int long char *x534; /* { dg-error \"error\" \"signed int long char\" } */\n+signed int long short *x535; /* { dg-error \"error\" \"signed int long short\" } */\n+signed int long int *x536; /* { dg-error \"error\" \"signed int long int\" } */\n+signed int long long *x537;\n+signed int long float *x538; /* { dg-error \"error\" \"signed int long float\" } */\n+signed int long double *x539; /* { dg-error \"error\" \"signed int long double\" } */\n+signed int long signed *x540; /* { dg-error \"error\" \"signed int long signed\" } */\n+signed int long unsigned *x541; /* { dg-error \"error\" \"signed int long unsigned\" } */\n+signed long int void *x542; /* { dg-error \"error\" \"signed long int void\" } */\n+signed long int char *x543; /* { dg-error \"error\" \"signed long int char\" } */\n+signed long int short *x544; /* { dg-error \"error\" \"signed long int short\" } */\n+signed long int int *x545; /* { dg-error \"error\" \"signed long int int\" } */\n+signed long int long *x546;\n+signed long int float *x547; /* { dg-error \"error\" \"signed long int float\" } */\n+signed long int double *x548; /* { dg-error \"error\" \"signed long int double\" } */\n+signed long int signed *x549; /* { dg-error \"error\" \"signed long int signed\" } */\n+signed long int unsigned *x550; /* { dg-error \"error\" \"signed long int unsigned\" } */\n+signed long long void *x551; /* { dg-error \"error\" \"signed long long void\" } */\n+signed long long char *x552; /* { dg-error \"error\" \"signed long long char\" } */\n+signed long long short *x553; /* { dg-error \"error\" \"signed long long short\" } */\n+signed long long int *x554;\n+signed long long long *x555; /* { dg-error \"error\" \"signed long long long\" } */\n+signed long long float *x556; /* { dg-error \"error\" \"signed long long float\" } */\n+signed long long double *x557; /* { dg-error \"error\" \"signed long long double\" } */\n+signed long long signed *x558; /* { dg-error \"error\" \"signed long long signed\" } */\n+signed long long unsigned *x559; /* { dg-error \"error\" \"signed long long unsigned\" } */\n+unsigned short int void *x560; /* { dg-error \"error\" \"unsigned short int void\" } */\n+unsigned short int char *x561; /* { dg-error \"error\" \"unsigned short int char\" } */\n+unsigned short int short *x562; /* { dg-error \"error\" \"unsigned short int short\" } */\n+unsigned short int int *x563; /* { dg-error \"error\" \"unsigned short int int\" } */\n+unsigned short int long *x564; /* { dg-error \"error\" \"unsigned short int long\" } */\n+unsigned short int float *x565; /* { dg-error \"error\" \"unsigned short int float\" } */\n+unsigned short int double *x566; /* { dg-error \"error\" \"unsigned short int double\" } */\n+unsigned short int signed *x567; /* { dg-error \"error\" \"unsigned short int signed\" } */\n+unsigned short int unsigned *x568; /* { dg-error \"error\" \"unsigned short int unsigned\" } */\n+unsigned int short void *x569; /* { dg-error \"error\" \"unsigned int short void\" } */\n+unsigned int short char *x570; /* { dg-error \"error\" \"unsigned int short char\" } */\n+unsigned int short short *x571; /* { dg-error \"error\" \"unsigned int short short\" } */\n+unsigned int short int *x572; /* { dg-error \"error\" \"unsigned int short int\" } */\n+unsigned int short long *x573; /* { dg-error \"error\" \"unsigned int short long\" } */\n+unsigned int short float *x574; /* { dg-error \"error\" \"unsigned int short float\" } */\n+unsigned int short double *x575; /* { dg-error \"error\" \"unsigned int short double\" } */\n+unsigned int short signed *x576; /* { dg-error \"error\" \"unsigned int short signed\" } */\n+unsigned int short unsigned *x577; /* { dg-error \"error\" \"unsigned int short unsigned\" } */\n+unsigned int long void *x578; /* { dg-error \"error\" \"unsigned int long void\" } */\n+unsigned int long char *x579; /* { dg-error \"error\" \"unsigned int long char\" } */\n+unsigned int long short *x580; /* { dg-error \"error\" \"unsigned int long short\" } */\n+unsigned int long int *x581; /* { dg-error \"error\" \"unsigned int long int\" } */\n+unsigned int long long *x582;\n+unsigned int long float *x583; /* { dg-error \"error\" \"unsigned int long float\" } */\n+unsigned int long double *x584; /* { dg-error \"error\" \"unsigned int long double\" } */\n+unsigned int long signed *x585; /* { dg-error \"error\" \"unsigned int long signed\" } */\n+unsigned int long unsigned *x586; /* { dg-error \"error\" \"unsigned int long unsigned\" } */\n+unsigned long int void *x587; /* { dg-error \"error\" \"unsigned long int void\" } */\n+unsigned long int char *x588; /* { dg-error \"error\" \"unsigned long int char\" } */\n+unsigned long int short *x589; /* { dg-error \"error\" \"unsigned long int short\" } */\n+unsigned long int int *x590; /* { dg-error \"error\" \"unsigned long int int\" } */\n+unsigned long int long *x591;\n+unsigned long int float *x592; /* { dg-error \"error\" \"unsigned long int float\" } */\n+unsigned long int double *x593; /* { dg-error \"error\" \"unsigned long int double\" } */\n+unsigned long int signed *x594; /* { dg-error \"error\" \"unsigned long int signed\" } */\n+unsigned long int unsigned *x595; /* { dg-error \"error\" \"unsigned long int unsigned\" } */\n+unsigned long long void *x596; /* { dg-error \"error\" \"unsigned long long void\" } */\n+unsigned long long char *x597; /* { dg-error \"error\" \"unsigned long long char\" } */\n+unsigned long long short *x598; /* { dg-error \"error\" \"unsigned long long short\" } */\n+unsigned long long int *x599;\n+unsigned long long long *x600; /* { dg-error \"error\" \"unsigned long long long\" } */\n+unsigned long long float *x601; /* { dg-error \"error\" \"unsigned long long float\" } */\n+unsigned long long double *x602; /* { dg-error \"error\" \"unsigned long long double\" } */\n+unsigned long long signed *x603; /* { dg-error \"error\" \"unsigned long long signed\" } */\n+unsigned long long unsigned *x604; /* { dg-error \"error\" \"unsigned long long unsigned\" } */\n+int long long signed void *x605; /* { dg-error \"error\" \"int long long signed void\" } */\n+int long long signed char *x606; /* { dg-error \"error\" \"int long long signed char\" } */\n+int long long signed short *x607; /* { dg-error \"error\" \"int long long signed short\" } */\n+int long long signed int *x608; /* { dg-error \"error\" \"int long long signed int\" } */\n+int long long signed long *x609; /* { dg-error \"error\" \"int long long signed long\" } */\n+int long long signed float *x610; /* { dg-error \"error\" \"int long long signed float\" } */\n+int long long signed double *x611; /* { dg-error \"error\" \"int long long signed double\" } */\n+int long long signed signed *x612; /* { dg-error \"error\" \"int long long signed signed\" } */\n+int long long signed unsigned *x613; /* { dg-error \"error\" \"int long long signed unsigned\" } */\n+int long long unsigned void *x614; /* { dg-error \"error\" \"int long long unsigned void\" } */\n+int long long unsigned char *x615; /* { dg-error \"error\" \"int long long unsigned char\" } */\n+int long long unsigned short *x616; /* { dg-error \"error\" \"int long long unsigned short\" } */\n+int long long unsigned int *x617; /* { dg-error \"error\" \"int long long unsigned int\" } */\n+int long long unsigned long *x618; /* { dg-error \"error\" \"int long long unsigned long\" } */\n+int long long unsigned float *x619; /* { dg-error \"error\" \"int long long unsigned float\" } */\n+int long long unsigned double *x620; /* { dg-error \"error\" \"int long long unsigned double\" } */\n+int long long unsigned signed *x621; /* { dg-error \"error\" \"int long long unsigned signed\" } */\n+int long long unsigned unsigned *x622; /* { dg-error \"error\" \"int long long unsigned unsigned\" } */\n+int long signed long void *x623; /* { dg-error \"error\" \"int long signed long void\" } */\n+int long signed long char *x624; /* { dg-error \"error\" \"int long signed long char\" } */\n+int long signed long short *x625; /* { dg-error \"error\" \"int long signed long short\" } */\n+int long signed long int *x626; /* { dg-error \"error\" \"int long signed long int\" } */\n+int long signed long long *x627; /* { dg-error \"error\" \"int long signed long long\" } */\n+int long signed long float *x628; /* { dg-error \"error\" \"int long signed long float\" } */\n+int long signed long double *x629; /* { dg-error \"error\" \"int long signed long double\" } */\n+int long signed long signed *x630; /* { dg-error \"error\" \"int long signed long signed\" } */\n+int long signed long unsigned *x631; /* { dg-error \"error\" \"int long signed long unsigned\" } */\n+int long unsigned long void *x632; /* { dg-error \"error\" \"int long unsigned long void\" } */\n+int long unsigned long char *x633; /* { dg-error \"error\" \"int long unsigned long char\" } */\n+int long unsigned long short *x634; /* { dg-error \"error\" \"int long unsigned long short\" } */\n+int long unsigned long int *x635; /* { dg-error \"error\" \"int long unsigned long int\" } */\n+int long unsigned long long *x636; /* { dg-error \"error\" \"int long unsigned long long\" } */\n+int long unsigned long float *x637; /* { dg-error \"error\" \"int long unsigned long float\" } */\n+int long unsigned long double *x638; /* { dg-error \"error\" \"int long unsigned long double\" } */\n+int long unsigned long signed *x639; /* { dg-error \"error\" \"int long unsigned long signed\" } */\n+int long unsigned long unsigned *x640; /* { dg-error \"error\" \"int long unsigned long unsigned\" } */\n+int signed long long void *x641; /* { dg-error \"error\" \"int signed long long void\" } */\n+int signed long long char *x642; /* { dg-error \"error\" \"int signed long long char\" } */\n+int signed long long short *x643; /* { dg-error \"error\" \"int signed long long short\" } */\n+int signed long long int *x644; /* { dg-error \"error\" \"int signed long long int\" } */\n+int signed long long long *x645; /* { dg-error \"error\" \"int signed long long long\" } */\n+int signed long long float *x646; /* { dg-error \"error\" \"int signed long long float\" } */\n+int signed long long double *x647; /* { dg-error \"error\" \"int signed long long double\" } */\n+int signed long long signed *x648; /* { dg-error \"error\" \"int signed long long signed\" } */\n+int signed long long unsigned *x649; /* { dg-error \"error\" \"int signed long long unsigned\" } */\n+int unsigned long long void *x650; /* { dg-error \"error\" \"int unsigned long long void\" } */\n+int unsigned long long char *x651; /* { dg-error \"error\" \"int unsigned long long char\" } */\n+int unsigned long long short *x652; /* { dg-error \"error\" \"int unsigned long long short\" } */\n+int unsigned long long int *x653; /* { dg-error \"error\" \"int unsigned long long int\" } */\n+int unsigned long long long *x654; /* { dg-error \"error\" \"int unsigned long long long\" } */\n+int unsigned long long float *x655; /* { dg-error \"error\" \"int unsigned long long float\" } */\n+int unsigned long long double *x656; /* { dg-error \"error\" \"int unsigned long long double\" } */\n+int unsigned long long signed *x657; /* { dg-error \"error\" \"int unsigned long long signed\" } */\n+int unsigned long long unsigned *x658; /* { dg-error \"error\" \"int unsigned long long unsigned\" } */\n+long int long signed void *x659; /* { dg-error \"error\" \"long int long signed void\" } */\n+long int long signed char *x660; /* { dg-error \"error\" \"long int long signed char\" } */\n+long int long signed short *x661; /* { dg-error \"error\" \"long int long signed short\" } */\n+long int long signed int *x662; /* { dg-error \"error\" \"long int long signed int\" } */\n+long int long signed long *x663; /* { dg-error \"error\" \"long int long signed long\" } */\n+long int long signed float *x664; /* { dg-error \"error\" \"long int long signed float\" } */\n+long int long signed double *x665; /* { dg-error \"error\" \"long int long signed double\" } */\n+long int long signed signed *x666; /* { dg-error \"error\" \"long int long signed signed\" } */\n+long int long signed unsigned *x667; /* { dg-error \"error\" \"long int long signed unsigned\" } */\n+long int long unsigned void *x668; /* { dg-error \"error\" \"long int long unsigned void\" } */\n+long int long unsigned char *x669; /* { dg-error \"error\" \"long int long unsigned char\" } */\n+long int long unsigned short *x670; /* { dg-error \"error\" \"long int long unsigned short\" } */\n+long int long unsigned int *x671; /* { dg-error \"error\" \"long int long unsigned int\" } */\n+long int long unsigned long *x672; /* { dg-error \"error\" \"long int long unsigned long\" } */\n+long int long unsigned float *x673; /* { dg-error \"error\" \"long int long unsigned float\" } */\n+long int long unsigned double *x674; /* { dg-error \"error\" \"long int long unsigned double\" } */\n+long int long unsigned signed *x675; /* { dg-error \"error\" \"long int long unsigned signed\" } */\n+long int long unsigned unsigned *x676; /* { dg-error \"error\" \"long int long unsigned unsigned\" } */\n+long int signed long void *x677; /* { dg-error \"error\" \"long int signed long void\" } */\n+long int signed long char *x678; /* { dg-error \"error\" \"long int signed long char\" } */\n+long int signed long short *x679; /* { dg-error \"error\" \"long int signed long short\" } */\n+long int signed long int *x680; /* { dg-error \"error\" \"long int signed long int\" } */\n+long int signed long long *x681; /* { dg-error \"error\" \"long int signed long long\" } */\n+long int signed long float *x682; /* { dg-error \"error\" \"long int signed long float\" } */\n+long int signed long double *x683; /* { dg-error \"error\" \"long int signed long double\" } */\n+long int signed long signed *x684; /* { dg-error \"error\" \"long int signed long signed\" } */\n+long int signed long unsigned *x685; /* { dg-error \"error\" \"long int signed long unsigned\" } */\n+long int unsigned long void *x686; /* { dg-error \"error\" \"long int unsigned long void\" } */\n+long int unsigned long char *x687; /* { dg-error \"error\" \"long int unsigned long char\" } */\n+long int unsigned long short *x688; /* { dg-error \"error\" \"long int unsigned long short\" } */\n+long int unsigned long int *x689; /* { dg-error \"error\" \"long int unsigned long int\" } */\n+long int unsigned long long *x690; /* { dg-error \"error\" \"long int unsigned long long\" } */\n+long int unsigned long float *x691; /* { dg-error \"error\" \"long int unsigned long float\" } */\n+long int unsigned long double *x692; /* { dg-error \"error\" \"long int unsigned long double\" } */\n+long int unsigned long signed *x693; /* { dg-error \"error\" \"long int unsigned long signed\" } */\n+long int unsigned long unsigned *x694; /* { dg-error \"error\" \"long int unsigned long unsigned\" } */\n+long long int signed void *x695; /* { dg-error \"error\" \"long long int signed void\" } */\n+long long int signed char *x696; /* { dg-error \"error\" \"long long int signed char\" } */\n+long long int signed short *x697; /* { dg-error \"error\" \"long long int signed short\" } */\n+long long int signed int *x698; /* { dg-error \"error\" \"long long int signed int\" } */\n+long long int signed long *x699; /* { dg-error \"error\" \"long long int signed long\" } */\n+long long int signed float *x700; /* { dg-error \"error\" \"long long int signed float\" } */\n+long long int signed double *x701; /* { dg-error \"error\" \"long long int signed double\" } */\n+long long int signed signed *x702; /* { dg-error \"error\" \"long long int signed signed\" } */\n+long long int signed unsigned *x703; /* { dg-error \"error\" \"long long int signed unsigned\" } */\n+long long int unsigned void *x704; /* { dg-error \"error\" \"long long int unsigned void\" } */\n+long long int unsigned char *x705; /* { dg-error \"error\" \"long long int unsigned char\" } */\n+long long int unsigned short *x706; /* { dg-error \"error\" \"long long int unsigned short\" } */\n+long long int unsigned int *x707; /* { dg-error \"error\" \"long long int unsigned int\" } */\n+long long int unsigned long *x708; /* { dg-error \"error\" \"long long int unsigned long\" } */\n+long long int unsigned float *x709; /* { dg-error \"error\" \"long long int unsigned float\" } */\n+long long int unsigned double *x710; /* { dg-error \"error\" \"long long int unsigned double\" } */\n+long long int unsigned signed *x711; /* { dg-error \"error\" \"long long int unsigned signed\" } */\n+long long int unsigned unsigned *x712; /* { dg-error \"error\" \"long long int unsigned unsigned\" } */\n+long long signed int void *x713; /* { dg-error \"error\" \"long long signed int void\" } */\n+long long signed int char *x714; /* { dg-error \"error\" \"long long signed int char\" } */\n+long long signed int short *x715; /* { dg-error \"error\" \"long long signed int short\" } */\n+long long signed int int *x716; /* { dg-error \"error\" \"long long signed int int\" } */\n+long long signed int long *x717; /* { dg-error \"error\" \"long long signed int long\" } */\n+long long signed int float *x718; /* { dg-error \"error\" \"long long signed int float\" } */\n+long long signed int double *x719; /* { dg-error \"error\" \"long long signed int double\" } */\n+long long signed int signed *x720; /* { dg-error \"error\" \"long long signed int signed\" } */\n+long long signed int unsigned *x721; /* { dg-error \"error\" \"long long signed int unsigned\" } */\n+long long unsigned int void *x722; /* { dg-error \"error\" \"long long unsigned int void\" } */\n+long long unsigned int char *x723; /* { dg-error \"error\" \"long long unsigned int char\" } */\n+long long unsigned int short *x724; /* { dg-error \"error\" \"long long unsigned int short\" } */\n+long long unsigned int int *x725; /* { dg-error \"error\" \"long long unsigned int int\" } */\n+long long unsigned int long *x726; /* { dg-error \"error\" \"long long unsigned int long\" } */\n+long long unsigned int float *x727; /* { dg-error \"error\" \"long long unsigned int float\" } */\n+long long unsigned int double *x728; /* { dg-error \"error\" \"long long unsigned int double\" } */\n+long long unsigned int signed *x729; /* { dg-error \"error\" \"long long unsigned int signed\" } */\n+long long unsigned int unsigned *x730; /* { dg-error \"error\" \"long long unsigned int unsigned\" } */\n+long signed int long void *x731; /* { dg-error \"error\" \"long signed int long void\" } */\n+long signed int long char *x732; /* { dg-error \"error\" \"long signed int long char\" } */\n+long signed int long short *x733; /* { dg-error \"error\" \"long signed int long short\" } */\n+long signed int long int *x734; /* { dg-error \"error\" \"long signed int long int\" } */\n+long signed int long long *x735; /* { dg-error \"error\" \"long signed int long long\" } */\n+long signed int long float *x736; /* { dg-error \"error\" \"long signed int long float\" } */\n+long signed int long double *x737; /* { dg-error \"error\" \"long signed int long double\" } */\n+long signed int long signed *x738; /* { dg-error \"error\" \"long signed int long signed\" } */\n+long signed int long unsigned *x739; /* { dg-error \"error\" \"long signed int long unsigned\" } */\n+long signed long int void *x740; /* { dg-error \"error\" \"long signed long int void\" } */\n+long signed long int char *x741; /* { dg-error \"error\" \"long signed long int char\" } */\n+long signed long int short *x742; /* { dg-error \"error\" \"long signed long int short\" } */\n+long signed long int int *x743; /* { dg-error \"error\" \"long signed long int int\" } */\n+long signed long int long *x744; /* { dg-error \"error\" \"long signed long int long\" } */\n+long signed long int float *x745; /* { dg-error \"error\" \"long signed long int float\" } */\n+long signed long int double *x746; /* { dg-error \"error\" \"long signed long int double\" } */\n+long signed long int signed *x747; /* { dg-error \"error\" \"long signed long int signed\" } */\n+long signed long int unsigned *x748; /* { dg-error \"error\" \"long signed long int unsigned\" } */\n+long unsigned int long void *x749; /* { dg-error \"error\" \"long unsigned int long void\" } */\n+long unsigned int long char *x750; /* { dg-error \"error\" \"long unsigned int long char\" } */\n+long unsigned int long short *x751; /* { dg-error \"error\" \"long unsigned int long short\" } */\n+long unsigned int long int *x752; /* { dg-error \"error\" \"long unsigned int long int\" } */\n+long unsigned int long long *x753; /* { dg-error \"error\" \"long unsigned int long long\" } */\n+long unsigned int long float *x754; /* { dg-error \"error\" \"long unsigned int long float\" } */\n+long unsigned int long double *x755; /* { dg-error \"error\" \"long unsigned int long double\" } */\n+long unsigned int long signed *x756; /* { dg-error \"error\" \"long unsigned int long signed\" } */\n+long unsigned int long unsigned *x757; /* { dg-error \"error\" \"long unsigned int long unsigned\" } */\n+long unsigned long int void *x758; /* { dg-error \"error\" \"long unsigned long int void\" } */\n+long unsigned long int char *x759; /* { dg-error \"error\" \"long unsigned long int char\" } */\n+long unsigned long int short *x760; /* { dg-error \"error\" \"long unsigned long int short\" } */\n+long unsigned long int int *x761; /* { dg-error \"error\" \"long unsigned long int int\" } */\n+long unsigned long int long *x762; /* { dg-error \"error\" \"long unsigned long int long\" } */\n+long unsigned long int float *x763; /* { dg-error \"error\" \"long unsigned long int float\" } */\n+long unsigned long int double *x764; /* { dg-error \"error\" \"long unsigned long int double\" } */\n+long unsigned long int signed *x765; /* { dg-error \"error\" \"long unsigned long int signed\" } */\n+long unsigned long int unsigned *x766; /* { dg-error \"error\" \"long unsigned long int unsigned\" } */\n+signed int long long void *x767; /* { dg-error \"error\" \"signed int long long void\" } */\n+signed int long long char *x768; /* { dg-error \"error\" \"signed int long long char\" } */\n+signed int long long short *x769; /* { dg-error \"error\" \"signed int long long short\" } */\n+signed int long long int *x770; /* { dg-error \"error\" \"signed int long long int\" } */\n+signed int long long long *x771; /* { dg-error \"error\" \"signed int long long long\" } */\n+signed int long long float *x772; /* { dg-error \"error\" \"signed int long long float\" } */\n+signed int long long double *x773; /* { dg-error \"error\" \"signed int long long double\" } */\n+signed int long long signed *x774; /* { dg-error \"error\" \"signed int long long signed\" } */\n+signed int long long unsigned *x775; /* { dg-error \"error\" \"signed int long long unsigned\" } */\n+signed long int long void *x776; /* { dg-error \"error\" \"signed long int long void\" } */\n+signed long int long char *x777; /* { dg-error \"error\" \"signed long int long char\" } */\n+signed long int long short *x778; /* { dg-error \"error\" \"signed long int long short\" } */\n+signed long int long int *x779; /* { dg-error \"error\" \"signed long int long int\" } */\n+signed long int long long *x780; /* { dg-error \"error\" \"signed long int long long\" } */\n+signed long int long float *x781; /* { dg-error \"error\" \"signed long int long float\" } */\n+signed long int long double *x782; /* { dg-error \"error\" \"signed long int long double\" } */\n+signed long int long signed *x783; /* { dg-error \"error\" \"signed long int long signed\" } */\n+signed long int long unsigned *x784; /* { dg-error \"error\" \"signed long int long unsigned\" } */\n+signed long long int void *x785; /* { dg-error \"error\" \"signed long long int void\" } */\n+signed long long int char *x786; /* { dg-error \"error\" \"signed long long int char\" } */\n+signed long long int short *x787; /* { dg-error \"error\" \"signed long long int short\" } */\n+signed long long int int *x788; /* { dg-error \"error\" \"signed long long int int\" } */\n+signed long long int long *x789; /* { dg-error \"error\" \"signed long long int long\" } */\n+signed long long int float *x790; /* { dg-error \"error\" \"signed long long int float\" } */\n+signed long long int double *x791; /* { dg-error \"error\" \"signed long long int double\" } */\n+signed long long int signed *x792; /* { dg-error \"error\" \"signed long long int signed\" } */\n+signed long long int unsigned *x793; /* { dg-error \"error\" \"signed long long int unsigned\" } */\n+unsigned int long long void *x794; /* { dg-error \"error\" \"unsigned int long long void\" } */\n+unsigned int long long char *x795; /* { dg-error \"error\" \"unsigned int long long char\" } */\n+unsigned int long long short *x796; /* { dg-error \"error\" \"unsigned int long long short\" } */\n+unsigned int long long int *x797; /* { dg-error \"error\" \"unsigned int long long int\" } */\n+unsigned int long long long *x798; /* { dg-error \"error\" \"unsigned int long long long\" } */\n+unsigned int long long float *x799; /* { dg-error \"error\" \"unsigned int long long float\" } */\n+unsigned int long long double *x800; /* { dg-error \"error\" \"unsigned int long long double\" } */\n+unsigned int long long signed *x801; /* { dg-error \"error\" \"unsigned int long long signed\" } */\n+unsigned int long long unsigned *x802; /* { dg-error \"error\" \"unsigned int long long unsigned\" } */\n+unsigned long int long void *x803; /* { dg-error \"error\" \"unsigned long int long void\" } */\n+unsigned long int long char *x804; /* { dg-error \"error\" \"unsigned long int long char\" } */\n+unsigned long int long short *x805; /* { dg-error \"error\" \"unsigned long int long short\" } */\n+unsigned long int long int *x806; /* { dg-error \"error\" \"unsigned long int long int\" } */\n+unsigned long int long long *x807; /* { dg-error \"error\" \"unsigned long int long long\" } */\n+unsigned long int long float *x808; /* { dg-error \"error\" \"unsigned long int long float\" } */\n+unsigned long int long double *x809; /* { dg-error \"error\" \"unsigned long int long double\" } */\n+unsigned long int long signed *x810; /* { dg-error \"error\" \"unsigned long int long signed\" } */\n+unsigned long int long unsigned *x811; /* { dg-error \"error\" \"unsigned long int long unsigned\" } */\n+unsigned long long int void *x812; /* { dg-error \"error\" \"unsigned long long int void\" } */\n+unsigned long long int char *x813; /* { dg-error \"error\" \"unsigned long long int char\" } */\n+unsigned long long int short *x814; /* { dg-error \"error\" \"unsigned long long int short\" } */\n+unsigned long long int int *x815; /* { dg-error \"error\" \"unsigned long long int int\" } */\n+unsigned long long int long *x816; /* { dg-error \"error\" \"unsigned long long int long\" } */\n+unsigned long long int float *x817; /* { dg-error \"error\" \"unsigned long long int float\" } */\n+unsigned long long int double *x818; /* { dg-error \"error\" \"unsigned long long int double\" } */\n+unsigned long long int signed *x819; /* { dg-error \"error\" \"unsigned long long int signed\" } */\n+unsigned long long int unsigned *x820; /* { dg-error \"error\" \"unsigned long long int unsigned\" } */"}, {"sha": "3c5d9bdd7249706d3b145ea5abce1e8fa6eff9de", "filename": "gcc/testsuite/gcc.dg/tls/diag-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb176fa3bb3d05c3fba4f1dc36735853bc18804/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-2.c?ref=deb176fa3bb3d05c3fba4f1dc36735853bc18804", "patch": "@@ -1,15 +1,15 @@\n /* Invalid __thread specifiers.  */\n \n-__thread extern int g1;\t\t/* { dg-error \"`__thread' before `extern'\" } */\n-__thread static int g2;\t\t/* { dg-error \"`__thread' before `static'\" } */\n-__thread __thread int g3;\t/* { dg-error \"duplicate `__thread'\" } */\n+__thread extern int g1;\t\t/* { dg-error \"'__thread' before 'extern'\" } */\n+__thread static int g2;\t\t/* { dg-error \"'__thread' before 'static'\" } */\n+__thread __thread int g3;\t/* { dg-error \"duplicate '__thread'\" } */\n typedef __thread int g4;\t/* { dg-error \"multiple storage classes\" } */\n \n void foo()\n {\n   __thread int l1;\t\t/* { dg-error \"implicitly auto and declared `__thread'\" } */\n   auto __thread int l2;\t\t/* { dg-error \"multiple storage classes\" } */\n-  __thread extern int l3;\t/* { dg-error \"`__thread' before `extern'\" } */\n+  __thread extern int l3;\t/* { dg-error \"'__thread' before 'extern'\" } */\n   register __thread int l4;\t/* { dg-error \"multiple storage classes\" } */\n }\n "}]}