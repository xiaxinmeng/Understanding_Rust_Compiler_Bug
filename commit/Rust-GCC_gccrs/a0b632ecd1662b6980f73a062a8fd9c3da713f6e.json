{"sha": "a0b632ecd1662b6980f73a062a8fd9c3da713f6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiNjMyZWNkMTY2MmI2OTgwZjczYTA2MmE4ZmQ5YzNkYTcxM2Y2ZQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1996-05-04T16:13:28Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1996-05-04T16:13:28Z"}, "message": "(*addsi3_compareneg): Delete potentially unsafe insn.\n\n(*addsi3_compare_op[12]): New insns.\n(*compare_addsi2_op[01]): New insns.\n(*addsi3_carryin, *addsi3_carryin_alt[12]): New insns.\n(*cmp_ite1): Use arm_add_operand instead of arm_rhs_operand.\n\nFrom-SVN: r11920", "tree": {"sha": "d7ef8bdd5a55cc555ad1537ec5d72513defe7a22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7ef8bdd5a55cc555ad1537ec5d72513defe7a22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0b632ecd1662b6980f73a062a8fd9c3da713f6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b632ecd1662b6980f73a062a8fd9c3da713f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b632ecd1662b6980f73a062a8fd9c3da713f6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b632ecd1662b6980f73a062a8fd9c3da713f6e/comments", "author": null, "committer": null, "parents": [{"sha": "62dd06ea77c9bfa03c0070ef0573b4a002e7601c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62dd06ea77c9bfa03c0070ef0573b4a002e7601c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62dd06ea77c9bfa03c0070ef0573b4a002e7601c"}], "stats": {"total": 100, "additions": 90, "deletions": 10}, "files": [{"sha": "257289c9794cdf5d7dd24e2030ed01391936094c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 90, "deletions": 10, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b632ecd1662b6980f73a062a8fd9c3da713f6e/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b632ecd1662b6980f73a062a8fd9c3da713f6e/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=a0b632ecd1662b6980f73a062a8fd9c3da713f6e", "patch": "@@ -332,10 +332,30 @@\n    cmp%?\\\\t%0, #%n1\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"*addsi3_compareneg\"\n-  [(set (reg:CC 24)\n-\t(compare:CC (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t    (neg:SI (match_operand:SI 2 \"arm_add_operand\" \"rI,L\"))))\n+;; The next four insns work because they compare the result with one of\n+;; the operands, and we know that the use of the condition code is\n+;; either GEU or LTU, so we can use the carry flag from the addition\n+;; instead of doing the compare a second time.\n+(define_insn \"*addsi3_compare_op1\"\n+  [(set (reg:CC_C 24)\n+\t(compare:CC_C\n+\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t  (match_operand:SI 2 \"arm_add_operand\" \"rI,L\"))\n+\t (match_dup 1)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(plus:SI (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  \"@\n+   add%?s\\\\t%0, %1, %2\n+   sub%?s\\\\t%0, %1, #%n2\"\n+[(set_attr \"conds\" \"set\")])\n+\n+(define_insn \"*addsi3_compare_op2\"\n+  [(set (reg:CC_C 24)\n+\t(compare:CC_C\n+\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t  (match_operand:SI 2 \"arm_add_operand\" \"rI,L\"))\n+\t (match_dup 2)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -344,6 +364,66 @@\n    sub%?s\\\\t%0, %1, #%n2\"\n [(set_attr \"conds\" \"set\")])\n \n+(define_insn \"*compare_addsi2_op0\"\n+  [(set (reg:CC_C 24)\n+\t(compare:CC_C\n+\t (plus:SI (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n+\t\t  (match_operand:SI 1 \"arm_add_operand\" \"rI,L\"))\n+\t (match_dup 0)))]\n+  \"\"\n+  \"@\n+   cmn%?\\\\t%0, %1\n+   cmp%?\\\\t%0, #%n1\"\n+[(set_attr \"conds\" \"set\")])\n+\n+(define_insn \"*compare_addsi2_op1\"\n+  [(set (reg:CC_C 24)\n+\t(compare:CC_C\n+\t (plus:SI (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n+\t\t  (match_operand:SI 1 \"arm_add_operand\" \"rI,L\"))\n+\t (match_dup 1)))]\n+  \"\"\n+  \"@\n+   cmn%?\\\\t%0, %1\n+   cmp%?\\\\t%0, #%n1\"\n+[(set_attr \"conds\" \"set\")])\n+\n+(define_insn \"*addsi3_carryin\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(plus:SI (ltu:SI (reg:CC_C 24) (const_int 0))\n+\t\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))))]\n+  \"\"\n+  \"adc%?\\\\t%0, %1, %2\"\n+[(set_attr \"conds\" \"use\")])\n+\n+(define_insn \"*addsi3_carryin_alt1\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(plus:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))\n+\t\t (ltu:SI (reg:CC_C 24) (const_int 0))))]\n+  \"\"\n+  \"adc%?\\\\t%0, %1, %2\"\n+[(set_attr \"conds\" \"use\")])\n+\n+(define_insn \"*addsi3_carryin_alt2\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(plus:SI (plus:SI (ltu:SI (reg:CC_C 24) (const_int 0))\n+\t\t\t  (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI\")))]\n+  \"\"\n+  \"adc%?\\\\t%0, %1, %2\"\n+[(set_attr \"conds\" \"use\")])\n+\n+(define_insn \"*addsi3_carryin_alt3\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(plus:SI (plus:SI (ltu:SI (reg:CC_C 24) (const_int 0))\n+\t\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))\n+\t\t (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n+  \"\"\n+  \"adc%?\\\\t%0, %1, %2\"\n+[(set_attr \"conds\" \"use\")])\n+\n (define_insn \"incscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n         (plus:SI (match_operator:SI 2 \"comparison_operator\"\n@@ -2906,8 +2986,8 @@\n \n (define_insn \"*ldmsi\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-                   [(set (match_operand:SI 1 \"s_register_operand\" \"=r\")\n-                         (mem:SI (match_operand:SI 2 \"s_register_operand\" \"r\")))])]\n+    [(set (match_operand:SI 1 \"s_register_operand\" \"=r\")\n+\t  (mem:SI (match_operand:SI 2 \"s_register_operand\" \"r\")))])]\n   \"\"\n   \"*\n {\n@@ -2980,8 +3060,8 @@\n \n (define_insn \"*stmsi\"\n   [(match_parallel 0 \"store_multiple_operation\"\n-                   [(set (mem:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n-                         (match_operand:SI 1 \"s_register_operand\" \"r\"))])]\n+    [(set (mem:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n+\t  (match_operand:SI 1 \"s_register_operand\" \"r\"))])]\n   \"\"\n   \"*\n {\n@@ -4267,10 +4347,10 @@\n \t (if_then_else:SI\n \t  (match_operator 4 \"comparison_operator\"\n \t   [(match_operand:SI 0 \"s_register_operand\" \"r,r,r,r\")\n-\t    (match_operand:SI 1 \"arm_rhs_operand\" \"rI,L,rI,L\")])\n+\t    (match_operand:SI 1 \"arm_add_operand\" \"rI,L,rI,L\")])\n \t  (match_operator:SI 5 \"comparison_operator\"\n \t   [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n-\t    (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI,L,L\")])\n+\t    (match_operand:SI 3 \"arm_add_operand\" \"rI,rI,L,L\")])\n \t  (const_int 1))\n \t (const_int 0)))]\n   \"\""}]}