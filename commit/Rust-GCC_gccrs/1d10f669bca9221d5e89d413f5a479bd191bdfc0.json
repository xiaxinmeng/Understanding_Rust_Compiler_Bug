{"sha": "1d10f669bca9221d5e89d413f5a479bd191bdfc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQxMGY2NjliY2E5MjIxZDVlODlkNDEzZjVhNDc5YmQxOTFiZGZjMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:34:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:34:32Z"}, "message": "[multiple changes]\n\n2011-08-29  Tristan Gingold  <gingold@adacore.com>\n\n\t* exp_sel.ads (Build_Abort_BLock_Handler): New function spec.\n\tAdjust comment.\n\t* exp_sel.adb (Build_Abort_Block): Use Build_Abort_Block_Handler.\n\t(Build_Abort_Block_Handler): New function to build an Abort_Signal\n\texception handler.\n\t* exp_ch9.adb (Expand_N_Asynchronous_Select): Call\n\tBuild_Abort_Block_Handler to build the exception handler. Do not\n\tundefer aborts for the Abort_Signal exception handler if back-end\n\texception mechanism.\n\t* exp_ch11.adb (Expand_Exception_Handlers): Do not undefer aborts if\n\tback_end exceptions for all others and abort_signal.\n\t* s-except.ads (ZCX_By_Default): New constant.\n\t* a-except-2005.adb (Raise_Exception): Do not defer abort if ZCX.\n\t(Raise_Exception_Always): Ditto.\n\t(Raise_From_Signal_Handler): Ditto.\n\t(Raise_With_Location_And_Msg): Ditto.\n\t(Raise_With_Msg): Ditto.\n\t(Reraise): Ditto.\n\t(Reraise_Occurence): Ditto.\n\t(Reraise_Occurrence_Always): Ditto.\n\t* s-tasren.adb (Exceptional_Complete_Rendezvous): Defer aborts if ZCX.\n\t* s-tpobop.adb: (Exceptional_Complete_Body): Undefer abort if ZCX.\n\t* s-interr-hwint.adb (Interrupt_Manager): Defer abort if ZCX.\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_util.ads (Get_Enum_Lit_From_Pos): Clarify documentation.\n\nFrom-SVN: r178194", "tree": {"sha": "20049d71bee87808eccf7c9bbef6485f4049694c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20049d71bee87808eccf7c9bbef6485f4049694c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d10f669bca9221d5e89d413f5a479bd191bdfc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d10f669bca9221d5e89d413f5a479bd191bdfc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d10f669bca9221d5e89d413f5a479bd191bdfc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d10f669bca9221d5e89d413f5a479bd191bdfc0/comments", "author": null, "committer": null, "parents": [{"sha": "86187d0fe0984bc90f70b3742ef09b06e0bbb673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86187d0fe0984bc90f70b3742ef09b06e0bbb673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86187d0fe0984bc90f70b3742ef09b06e0bbb673"}], "stats": {"total": 209, "additions": 147, "deletions": 62}, "files": [{"sha": "4905b45a65e059e91f6dbcce611af695cf939766", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1d10f669bca9221d5e89d413f5a479bd191bdfc0", "patch": "@@ -1,3 +1,33 @@\n+2011-08-29  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* exp_sel.ads (Build_Abort_BLock_Handler): New function spec.\n+\tAdjust comment.\n+\t* exp_sel.adb (Build_Abort_Block): Use Build_Abort_Block_Handler.\n+\t(Build_Abort_Block_Handler): New function to build an Abort_Signal\n+\texception handler.\n+\t* exp_ch9.adb (Expand_N_Asynchronous_Select): Call\n+\tBuild_Abort_Block_Handler to build the exception handler. Do not\n+\tundefer aborts for the Abort_Signal exception handler if back-end\n+\texception mechanism.\n+\t* exp_ch11.adb (Expand_Exception_Handlers): Do not undefer aborts if\n+\tback_end exceptions for all others and abort_signal.\n+\t* s-except.ads (ZCX_By_Default): New constant.\n+\t* a-except-2005.adb (Raise_Exception): Do not defer abort if ZCX.\n+\t(Raise_Exception_Always): Ditto.\n+\t(Raise_From_Signal_Handler): Ditto.\n+\t(Raise_With_Location_And_Msg): Ditto.\n+\t(Raise_With_Msg): Ditto.\n+\t(Reraise): Ditto.\n+\t(Reraise_Occurence): Ditto.\n+\t(Reraise_Occurrence_Always): Ditto.\n+\t* s-tasren.adb (Exceptional_Complete_Rendezvous): Defer aborts if ZCX.\n+\t* s-tpobop.adb: (Exceptional_Complete_Body): Undefer abort if ZCX.\n+\t* s-interr-hwint.adb (Interrupt_Manager): Defer abort if ZCX.\n+\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_util.ads (Get_Enum_Lit_From_Pos): Clarify documentation.\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* snames.adb-tmpl, sem_ch13.adb: Minor reformatting"}, {"sha": "0ff0b5bb8fb29748393fb8216b602183228ee930", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=1d10f669bca9221d5e89d413f5a479bd191bdfc0", "patch": "@@ -855,7 +855,9 @@ package body Ada.Exceptions is\n       --  Go ahead and raise appropriate exception\n \n       Exception_Data.Set_Exception_Msg (EF, Message);\n-      Abort_Defer.all;\n+      if not ZCX_By_Default then\n+         Abort_Defer.all;\n+      end if;\n       Raise_Current_Excep (EF);\n    end Raise_Exception;\n \n@@ -869,7 +871,9 @@ package body Ada.Exceptions is\n    is\n    begin\n       Exception_Data.Set_Exception_Msg (E, Message);\n-      Abort_Defer.all;\n+      if not ZCX_By_Default then\n+         Abort_Defer.all;\n+      end if;\n       Raise_Current_Excep (E);\n    end Raise_Exception_Always;\n \n@@ -944,7 +948,9 @@ package body Ada.Exceptions is\n    is\n    begin\n       Exception_Data.Set_Exception_C_Msg (E, M);\n-      Abort_Defer.all;\n+      if not ZCX_By_Default then\n+         Abort_Defer.all;\n+      end if;\n       Debug_Raise_Exception (E => SSL.Exception_Data_Ptr (E));\n       Exception_Propagation.Propagate_Exception\n         (E => E, From_Signal_Handler => True);\n@@ -1015,7 +1021,9 @@ package body Ada.Exceptions is\n    is\n    begin\n       Exception_Data.Set_Exception_C_Msg (E, F, L, C, M);\n-      Abort_Defer.all;\n+      if not ZCX_By_Default then\n+         Abort_Defer.all;\n+      end if;\n       Raise_Current_Excep (E);\n    end Raise_With_Location_And_Msg;\n \n@@ -1034,7 +1042,9 @@ package body Ada.Exceptions is\n       Excep.Num_Tracebacks   := 0;\n       Excep.Cleanup_Flag     := False;\n       Excep.Pid              := Local_Partition_ID;\n-      Abort_Defer.all;\n+      if not ZCX_By_Default then\n+         Abort_Defer.all;\n+      end if;\n       Raise_Current_Excep (E);\n    end Raise_With_Msg;\n \n@@ -1276,7 +1286,9 @@ package body Ada.Exceptions is\n    procedure Reraise is\n       Excep : constant EOA := Get_Current_Excep.all;\n    begin\n-      Abort_Defer.all;\n+      if not ZCX_By_Default then\n+         Abort_Defer.all;\n+      end if;\n       Exception_Propagation.Setup_Exception (Excep, Excep, Reraised => True);\n       Raise_Current_Excep (Excep.Id);\n    end Reraise;\n@@ -1288,7 +1300,9 @@ package body Ada.Exceptions is\n    procedure Reraise_Occurrence (X : Exception_Occurrence) is\n    begin\n       if X.Id /= null then\n-         Abort_Defer.all;\n+         if not ZCX_By_Default then\n+            Abort_Defer.all;\n+         end if;\n          Exception_Propagation.Setup_Exception\n            (X'Unrestricted_Access, Get_Current_Excep.all, Reraised => True);\n          Save_Occurrence_No_Private (Get_Current_Excep.all.all, X);\n@@ -1302,7 +1316,9 @@ package body Ada.Exceptions is\n \n    procedure Reraise_Occurrence_Always (X : Exception_Occurrence) is\n    begin\n-      Abort_Defer.all;\n+      if not ZCX_By_Default then\n+         Abort_Defer.all;\n+      end if;\n       Exception_Propagation.Setup_Exception\n         (X'Unrestricted_Access, Get_Current_Excep.all, Reraised => True);\n       Save_Occurrence_No_Private (Get_Current_Excep.all.all, X);"}, {"sha": "65ab2bd32bcb4dc4ce5ac7a30f63963da1eb20ad", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=1d10f669bca9221d5e89d413f5a479bd191bdfc0", "patch": "@@ -1097,7 +1097,9 @@ package body Exp_Ch11 is\n                   --  any case this entire handling is relevant only if aborts\n                   --  are allowed!\n \n-               elsif Abort_Allowed then\n+               elsif Abort_Allowed\n+                 and then Exception_Mechanism /= Back_End_Exceptions\n+               then\n \n                   --  There are some special cases in which we do not do the\n                   --  undefer. In particular a finalization (AT END) handler\n@@ -1122,7 +1124,6 @@ package body Exp_Ch11 is\n                       (Others_Choice\n                         and then\n                           All_Others (First (Exception_Choices (Handler))))\n-                    and then Abort_Allowed\n                   then\n                      Prepend_Call_To_Handler (RE_Abort_Undefer);\n                   end if;"}, {"sha": "e5d6ac58fd93fd8b78734fa07917af7aef0e38f6", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=1d10f669bca9221d5e89d413f5a479bd191bdfc0", "patch": "@@ -5848,6 +5848,7 @@ package body Exp_Ch9 is\n       Enqueue_Call      : Node_Id;\n       Formals           : List_Id;\n       Hdle              : List_Id;\n+      Handler_Stmt      : Node_Id;\n       Index             : Node_Id;\n       Lim_Typ_Stmts     : List_Id;\n       N_Orig            : Node_Id;\n@@ -5859,9 +5860,7 @@ package body Exp_Ch9 is\n       ProtP_Stmts       : List_Id;\n       Stmt              : Node_Id;\n       Stmts             : List_Id;\n-      Target_Undefer    : RE_Id;\n       TaskE_Stmts       : List_Id;\n-      Undefer_Args      : List_Id := No_List;\n \n       B   : Entity_Id;  --  Call status flag\n       Bnn : Entity_Id;  --  Communication block\n@@ -6352,13 +6351,7 @@ package body Exp_Ch9 is\n \n             --  Create the inner block to protect the abortable part\n \n-            Hdle := New_List (\n-              Make_Implicit_Exception_Handler (Loc,\n-                Exception_Choices =>\n-                  New_List (New_Reference_To (Stand.Abort_Signal, Loc)),\n-                Statements => New_List (\n-                  Make_Procedure_Call_Statement (Loc,\n-                    Name => New_Reference_To (RTE (RE_Abort_Undefer), Loc)))));\n+            Hdle := New_List (Build_Abort_Block_Handler (Loc));\n \n             Prepend_To (Astats,\n               Make_Procedure_Call_Statement (Loc,\n@@ -6513,13 +6506,21 @@ package body Exp_Ch9 is\n          --  See 4jexcept.ads for an explanation.\n \n          if VM_Target = No_VM then\n-            Target_Undefer := RE_Abort_Undefer;\n+            if Exception_Mechanism = Back_End_Exceptions then\n+               --  Aborts are not deferred at beginning of exception handlers\n+               --  in ZCX.\n+               Handler_Stmt := Make_Null_Statement (Loc);\n+            else\n+               Handler_Stmt := Make_Procedure_Call_Statement (Loc,\n+                 Name => New_Reference_To (RTE (RE_Abort_Undefer), Loc),\n+                 Parameter_Associations => No_List);\n+            end if;\n          else\n-            Target_Undefer := RE_Update_Exception;\n-            Undefer_Args :=\n-              New_List (Make_Function_Call (Loc,\n-                          Name => New_Occurrence_Of\n-                                    (RTE (RE_Current_Target_Exception), Loc)));\n+            Handler_Stmt := Make_Procedure_Call_Statement (Loc,\n+              Name => New_Reference_To (RTE (RE_Update_Exception), Loc),\n+              Parameter_Associations => New_List (Make_Function_Call (Loc,\n+                Name => New_Occurrence_Of (RTE (RE_Current_Target_Exception),\n+                                           Loc))));\n          end if;\n \n          Stmts := New_List (\n@@ -6542,11 +6543,7 @@ package body Exp_Ch9 is\n \n                      Exception_Choices =>\n                        New_List (New_Reference_To (Stand.Abort_Signal, Loc)),\n-                     Statements => New_List (\n-                       Make_Procedure_Call_Statement (Loc,\n-                         Name => New_Reference_To (\n-                           RTE (Target_Undefer), Loc),\n-                         Parameter_Associations => Undefer_Args)))))),\n+                     Statements => New_List (Handler_Stmt))))),\n \n          --  if not Cancelled (Bnn) then\n          --     triggered statements\n@@ -6602,14 +6599,7 @@ package body Exp_Ch9 is\n \n          --  Create the inner block to protect the abortable part\n \n-         Hdle :=  New_List (\n-           Make_Implicit_Exception_Handler (Loc,\n-             Exception_Choices =>\n-               New_List (New_Reference_To (Stand.Abort_Signal, Loc)),\n-             Statements =>\n-               New_List (\n-                 Make_Procedure_Call_Statement (Loc,\n-                   Name => New_Reference_To (RTE (RE_Abort_Undefer), Loc)))));\n+         Hdle :=  New_List (Build_Abort_Block_Handler (Loc));\n \n          Prepend_To (Astats,\n            Make_Procedure_Call_Statement (Loc,"}, {"sha": "6751cbf0ee044b2c4eea5f3f96cc484344132f1f", "filename": "gcc/ada/exp_sel.adb", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fexp_sel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fexp_sel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_sel.adb?ref=1d10f669bca9221d5e89d413f5a479bd191bdfc0", "patch": "@@ -64,20 +64,38 @@ package body Exp_Sel is\n                   Blk),\n \n               Exception_Handlers =>\n-                New_List (\n-                  Make_Implicit_Exception_Handler (Loc,\n-                    Exception_Choices =>\n-                      New_List (\n-                        New_Reference_To (Stand.Abort_Signal, Loc)),\n-                    Statements =>\n-                      New_List (\n-                        Make_Procedure_Call_Statement (Loc,\n-                          Name =>\n-                            New_Reference_To (RTE (\n-                              RE_Abort_Undefer), Loc),\n-                          Parameter_Associations => No_List))))));\n+                New_List (Build_Abort_Block_Handler (Loc))));\n    end Build_Abort_Block;\n \n+   -------------------------------\n+   -- Build_Abort_Block_Handler --\n+   -------------------------------\n+\n+   function Build_Abort_Block_Handler\n+     (Loc : Source_Ptr) return Node_Id\n+   is\n+      Stmt : Node_Id;\n+   begin\n+      if Exception_Mechanism = Back_End_Exceptions then\n+         --  With ZCX, aborts are not defered in handlers.\n+\n+         Stmt := Make_Null_Statement (Loc);\n+      else\n+         --  With FE SJLJ, aborts are defered at the beginning of Abort_Signal\n+         --  handlers.\n+\n+         Stmt := Make_Procedure_Call_Statement (Loc,\n+           Name => New_Reference_To (RTE (RE_Abort_Undefer), Loc),\n+           Parameter_Associations => No_List);\n+      end if;\n+\n+      return Make_Implicit_Exception_Handler (Loc,\n+        Exception_Choices =>\n+          New_List (New_Reference_To (Stand.Abort_Signal, Loc)),\n+        Statements =>\n+          New_List (Stmt));\n+   end Build_Abort_Block_Handler;\n+\n    -------------\n    -- Build_B --\n    -------------"}, {"sha": "426e682952061b3e0406d1620e174af9a5b1e562", "filename": "gcc/ada/exp_sel.ads", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fexp_sel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fexp_sel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_sel.ads?ref=1d10f669bca9221d5e89d413f5a479bd191bdfc0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,10 +39,22 @@ package Exp_Sel is\n    --    begin\n    --       Blk\n    --    exception\n-   --       when Abort_Signal => Abort_Undefer;\n+   --       when Abort_Signal => Abort_Undefer / null;\n    --    end;\n    --  Abr_Blk_Ent is the name of the generated block, Cln_Blk_Ent is the name\n    --  of the encapsulated cleanup block, Blk is the actual block name.\n+   --  The exception handler code is built by Build_Abort_Block_Handler.\n+\n+   function Build_Abort_Block_Handler\n+     (Loc : Source_Ptr) return Node_Id;\n+   --  Generate if front-end exception:\n+   --    when others =>\n+   --      Abort_Under;\n+   --  or if back-end exception:\n+   --    when others =>\n+   --      null;\n+   --  This is an exception handler to stop propagation of aborts, without\n+   --  modifying the deferal level.\n \n    function Build_B\n      (Loc   : Source_Ptr;"}, {"sha": "30bc23aa59b2af9740282a6ef328836246876e9d", "filename": "gcc/ada/s-except.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fs-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fs-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-except.ads?ref=1d10f669bca9221d5e89d413f5a479bd191bdfc0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2006-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2006-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,6 +42,9 @@ package System.Exceptions is\n    pragma Preelaborate_05;\n    --  To let Ada.Exceptions \"with\" us and let us \"with\" Standard_Library\n \n+   ZCX_By_Default : constant Boolean;\n+   --  Visible copy to allow Ada.Exceptions to know the exception model.\n+\n    package SSL renames System.Standard_Library;\n    --  To let some of the hooks below have formal parameters typed in\n    --  accordance with what GDB expects.\n@@ -75,4 +78,7 @@ package System.Exceptions is\n    --\n    --  The argument is the address of the exception data\n \n+private\n+   ZCX_By_Default : constant Boolean := System.ZCX_By_Default;\n+\n end System.Exceptions;"}, {"sha": "3cd50020ff8346ec0002afe3fc9cf69ad4f00b73", "filename": "gcc/ada/s-interr-hwint.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fs-interr-hwint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fs-interr-hwint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-hwint.adb?ref=1d10f669bca9221d5e89d413f5a479bd191bdfc0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2009, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2011, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1025,6 +1025,10 @@ package body System.Interrupts is\n \n    exception\n       when Standard'Abort_Signal =>\n+         if ZCX_By_Default then\n+            Initialization.Defer_Abort_Nestable (STPO.Self);\n+         end if;\n+\n          --  Flush interrupt server semaphores, so they can terminate\n          Finalize_Interrupt_Servers;\n          raise;"}, {"sha": "4846ef0731c21958f3e8b99d6fe61a9e2f2a328a", "filename": "gcc/ada/s-tasren.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.adb?ref=1d10f669bca9221d5e89d413f5a479bd191bdfc0", "patch": "@@ -552,6 +552,11 @@ package body System.Tasking.Rendezvous is\n             Send_Trace_Info (M_RDV_Complete, Entry_Call.Self);\n          end if;\n \n+         Initialization.Defer_Abort_Nestable (Self_Id);\n+\n+      elsif ZCX_By_Default then\n+         --  With ZCX, aborts are not automatically deferred in handlers\n+\n          Initialization.Defer_Abort_Nestable (Self_Id);\n       end if;\n "}, {"sha": "9e227ed3e26fa86e41ca7abc3453a888ccf8f0d0", "filename": "gcc/ada/s-tpobop.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fs-tpobop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fs-tpobop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpobop.adb?ref=1d10f669bca9221d5e89d413f5a479bd191bdfc0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1998-2010, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1998-2011, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -258,7 +258,9 @@ package body System.Tasking.Protected_Objects.Operations is\n             --  enabled for its remaining life.\n \n             Self_Id := STPO.Self;\n-            Initialization.Undefer_Abort_Nestable (Self_Id);\n+            if not ZCX_By_Default then\n+               Initialization.Undefer_Abort_Nestable (Self_Id);\n+            end if;\n             Transfer_Occurrence\n               (Entry_Call.Self.Common.Compiler_Data.Current_Excep'Access,\n                Self_Id.Common.Compiler_Data.Current_Excep);\n@@ -270,6 +272,7 @@ package body System.Tasking.Protected_Objects.Operations is\n       end if;\n \n       if Runtime_Traces then\n+         --  ??? Entry_Call can be null\n          Send_Trace_Info (PO_Done, Entry_Call.Self);\n       end if;\n    end Exceptional_Complete_Entry_Body;"}, {"sha": "1d0d23eb647fea9656ed5f2577ecf649fa7981d2", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10f669bca9221d5e89d413f5a479bd191bdfc0/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=1d10f669bca9221d5e89d413f5a479bd191bdfc0", "patch": "@@ -507,11 +507,11 @@ package Sem_Util is\n      (T   : Entity_Id;\n       Pos : Uint;\n       Loc : Source_Ptr) return Node_Id;\n-   --  This function obtains the E_Enumeration_Literal entity for the specified\n-   --  value from the enumeration type or subtype T and returns an identifier\n-   --  node referencing this value. The second argument is the Pos value, which\n-   --  is assumed to be in range. The third argument supplies a source location\n-   --  for constructed nodes returned by this function.\n+   --  This function returns an identifier denoting the E_Enumeration_Literal\n+   --  entity for the specified value from the enumeration type or subtype T.\n+   --  The second argument is the Pos value, which is assumed to be in range.\n+   --  The third argument supplies a source location for constructed nodes\n+   --  returned by this function.\n \n    procedure Get_Library_Unit_Name_String (Decl_Node : Node_Id);\n    --  Retrieve the fully expanded name of the library unit declared by\n@@ -1297,7 +1297,7 @@ package Sem_Util is\n    procedure Set_Current_Entity (E : Entity_Id);\n    pragma Inline (Set_Current_Entity);\n    --  Establish the entity E as the currently visible definition of its\n-   --  associated name (i.e. the Node_Id associated with its name)\n+   --  associated name (i.e. the Node_Id associated with its name).\n \n    procedure Set_Debug_Info_Needed (T : Entity_Id);\n    --  Sets the Debug_Info_Needed flag on entity T , and also on any entities"}]}