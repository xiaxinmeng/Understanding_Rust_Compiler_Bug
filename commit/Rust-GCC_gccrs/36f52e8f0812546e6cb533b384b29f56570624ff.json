{"sha": "36f52e8f0812546e6cb533b384b29f56570624ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmNTJlOGYwODEyNTQ2ZTZjYjUzM2IzODRiMjlmNTY1NzA2MjRmZg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2017-12-12T02:15:00Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2017-12-12T02:15:00Z"}, "message": "[SFN] boilerplate changes in preparation to introduce nonbind markers\n\nThis patch introduces a number of new macros and functions that will\nbe used to distinguish between different kinds of debug stmts, insns\nand notes, namely, preexisting debug bind ones and to-be-introduced\nnonbind markers.\n\nIn a seemingly mechanical way, it adjusts several uses of the macros\nand functions, so that they refer to narrower categories when\nappropriate.\n\nThese changes, by themselves, should not have any visible effect in\nthe compiler behavior, since the upcoming debug markers are never\ncreated with this patch alone.\n\nfor  gcc/ChangeLog\n\n\t* gimple.h (enum gimple_debug_subcode): Add\n\tGIMPLE_DEBUG_BEGIN_STMT.\n\t(gimple_debug_begin_stmt_p): New.\n\t(gimple_debug_nonbind_marker_p): New.\n\t* tree.h (MAY_HAVE_DEBUG_MARKER_STMTS): New.\n\t(MAY_HAVE_DEBUG_BIND_STMTS): Renamed from....\n\t(MAY_HAVE_DEBUG_STMTS): ... this.  Check both.\n\t* insn-notes.def (BEGIN_STMT): New.\n\t* rtl.h (MAY_HAVE_DEBUG_MARKER_INSNS): New.\n\t(MAY_HAVE_DEBUG_BIND_INSNS): Renamed from....\n\t(MAY_HAVE_DEBUG_INSNS): ... this.  Check both.\n\t(NOTE_MARKER_LOCATION, NOTE_MARKER_P): New.\n\t(DEBUG_BIND_INSN_P, DEBUG_MARKER_INSN_P): New.\n\t(INSN_DEBUG_MARKER_KIND): New.\n\t(GEN_RTX_DEBUG_MARKER_BEGIN_STMT_PAT): New.\n\t(INSN_VAR_LOCATION): Check for VAR_LOCATION.\n\t(INSN_VAR_LOCATION_PTR): New.\n\t* cfgexpand.c (expand_debug_locations): Handle debug bind insns\n\tonly.\n\t(expand_gimple_basic_block): Likewise.  Emit debug temps for TER\n\tdeps only if debug bind insns are enabled.\n\t(pass_expand::execute): Avoid deep TER and expand\n\tdebug locations for debug bind insns only.\n\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Narrow\n\tdebug stmts special handling down to debug bind stmts.\n\t* combine.c (try_combine): Narrow debug insns special handling\n\tdown to debug bind insns.\n\t* cse.c (delete_trivially_dead_insns): Handle debug bindings.\n\tNarrow debug insns preexisting special handling down to debug\n\tbind insns.\n\t* dce.c (rest_of_handle_ud_dce): Narrow debug insns special\n\thandling down to debug bind insns.\n\t* function.c (instantiate_virtual_regs): Skip debug markers,\n\tadjust handling of debug binds.\n\t* gimple-ssa-backprop.c (backprop::prepare_change): Try debug\n\ttemp insertion iff MAY_HAVE_DEBUG_BIND_STMTS.\n\t* haifa-sched.c (schedule_insn): Narrow special handling of debug\n\tinsns to debug bind insns.\n\t* ipa-param-manipulation.c (ipa_modify_call_arguments): Narrow\n\tspecial handling of debug stmts to debug bind stmts.\n\t* ipa-split.c (split_function): Likewise.\n\t* ira.c (combine_and_move_insns): Adjust debug bind insns only.\n\t* loop-unroll.c (apply_opt_in_copies): Adjust tests on bind\n\tdebug insns.\n\t* reg-stack.c (convert_regs_1): Use DEBUG_BIND_INSN_P.\n\t* regrename.c (build_def_use): Likewise.\n\t* regcprop.c (copyprop_hardreg_forward_1): Likewise.\n\t(pass_cprop_hardreg): Narrow special casing of debug insns to\n\tdebug bind insns.\n\t* regstat.c (regstat_init_n_sets_and_refs): Likewise.\n\t* reload1.c (reload): Likewise.\n\t* sese.c (sese_insert_phis_for_liveouts): Narrow special\n\tcasing of debug stmts to debug bind stmts.\n\t* shrink-wrap.c (move_insn_for_shrink_wrap): Likewise.\n\t* ssa-iterators.h (num_imm_uses): Likewise.\n\t* tree-cfg.c (gimple_merge_blocks): Narrow special casing of\n\tdebug stmts to debug bind stmts.\n\t* tree-inline.c\t(tree_function_versioning): Narrow special casing\n\tof debug stmts to debug bind stmts.\n\t* tree-loop-distribution.c (generate_loops_for_partition):\n\tNarrow special casing of debug stmts to debug bind stmts.\n\t* tree-sra.c (analyze_access_subtree): Narrow special casing\n\tof debug stmts to debug bind stmts.\n\t* tree-ssa-dce.c (remove_dead_stmt): Narrow special casing of debug\n\tstmts to debug bind stmts.\n\t* tree-ssa-loop-ivopt.c (remove_unused_ivs): Narrow special\n\tcasing of debug stmts to debug bind stmts.\n\t* tree-ssa-reassoc.c (reassoc_remove_stmt): Likewise.\n\t* tree-ssa-tail-merge.c (tail_merge_optimize): Narrow special\n\tcasing of debug stmts to debug bind stmts.\n\t* tree-ssa-threadedge.c (propagate_threaded_block_debug_info):\n\tLikewise.\n\t* tree-ssa.c (flush_pending_stmts): Narrow special casing of\n\tdebug stmts to debug bind stmts.\n\t(gimple_replace_ssa_lhs): Likewise.\n\t(insert_debug_temp_for_var_def): Likewise.\n\t(insert_debug_temps_for_defs): Likewise.\n\t(reset_debug_uses): Likewise.\n\t* tree-ssanames.c (release_ssa_name_fn): Likewise.\n\t* tree-vect-loop-manip.c (adjust_debug_stmts_now): Likewise.\n\t(adjust_debug_stmts): Likewise.\n\t(adjust_phi_and_debug_stmts): Likewise.\n\t(vect_do_peeling): Likewise.\n\t* tree-vect-loop.c (vect_transform_loop): Likewise.\n\t* valtrack.c (propagate_for_debug): Use BIND_DEBUG_INSN_P.\n\t* var-tracking.c (adjust_mems): Narrow special casing of debug\n\tinsns to debug bind insns.\n\t(dv_onepart_p, dataflow_set_clar_at_call, use_type): Likewise.\n\t(compute_bb_dataflow, vt_find_locations): Likewise.\n\t(vt_expand_loc, emit_notes_for_changes): Likewise.\n\t(vt_init_cfa_base): Likewise.\n\t(vt_emit_notes): Likewise.\n\t(vt_initialize): Likewise.\n\t(vt_finalize): Likewise.\n\nFrom-SVN: r255565", "tree": {"sha": "8f18f4e4b339c059cbde84a88ab800662fff1c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f18f4e4b339c059cbde84a88ab800662fff1c39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36f52e8f0812546e6cb533b384b29f56570624ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f52e8f0812546e6cb533b384b29f56570624ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f52e8f0812546e6cb533b384b29f56570624ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f52e8f0812546e6cb533b384b29f56570624ff/comments", "author": null, "committer": null, "parents": [{"sha": "f40dd64636249153a3d03be5c41bbaf9c91fad6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40dd64636249153a3d03be5c41bbaf9c91fad6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f40dd64636249153a3d03be5c41bbaf9c91fad6c"}], "stats": {"total": 381, "additions": 277, "deletions": 104}, "files": [{"sha": "286a0fbac94caee07563e56c5e87b90cf7f660ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -1,5 +1,100 @@\n 2017-12-12  Alexandre Oliva <aoliva@redhat.com>\n \n+\t* gimple.h (enum gimple_debug_subcode): Add\n+\tGIMPLE_DEBUG_BEGIN_STMT.\n+\t(gimple_debug_begin_stmt_p): New.\n+\t(gimple_debug_nonbind_marker_p): New.\n+\t* tree.h (MAY_HAVE_DEBUG_MARKER_STMTS): New.\n+\t(MAY_HAVE_DEBUG_BIND_STMTS): Renamed from....\n+\t(MAY_HAVE_DEBUG_STMTS): ... this.  Check both.\n+\t* insn-notes.def (BEGIN_STMT): New.\n+\t* rtl.h (MAY_HAVE_DEBUG_MARKER_INSNS): New.\n+\t(MAY_HAVE_DEBUG_BIND_INSNS): Renamed from....\n+\t(MAY_HAVE_DEBUG_INSNS): ... this.  Check both.\n+\t(NOTE_MARKER_LOCATION, NOTE_MARKER_P): New.\n+\t(DEBUG_BIND_INSN_P, DEBUG_MARKER_INSN_P): New.\n+\t(INSN_DEBUG_MARKER_KIND): New.\n+\t(GEN_RTX_DEBUG_MARKER_BEGIN_STMT_PAT): New.\n+\t(INSN_VAR_LOCATION): Check for VAR_LOCATION.\n+\t(INSN_VAR_LOCATION_PTR): New.\n+\t* cfgexpand.c (expand_debug_locations): Handle debug bind insns\n+\tonly.\n+\t(expand_gimple_basic_block): Likewise.  Emit debug temps for TER\n+\tdeps only if debug bind insns are enabled.\n+\t(pass_expand::execute): Avoid deep TER and expand\n+\tdebug locations for debug bind insns only.\n+\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Narrow\n+\tdebug stmts special handling down to debug bind stmts.\n+\t* combine.c (try_combine): Narrow debug insns special handling\n+\tdown to debug bind insns.\n+\t* cse.c (delete_trivially_dead_insns): Handle debug bindings.\n+\tNarrow debug insns preexisting special handling down to debug\n+\tbind insns.\n+\t* dce.c (rest_of_handle_ud_dce): Narrow debug insns special\n+\thandling down to debug bind insns.\n+\t* function.c (instantiate_virtual_regs): Skip debug markers,\n+\tadjust handling of debug binds.\n+\t* gimple-ssa-backprop.c (backprop::prepare_change): Try debug\n+\ttemp insertion iff MAY_HAVE_DEBUG_BIND_STMTS.\n+\t* haifa-sched.c (schedule_insn): Narrow special handling of debug\n+\tinsns to debug bind insns.\n+\t* ipa-param-manipulation.c (ipa_modify_call_arguments): Narrow\n+\tspecial handling of debug stmts to debug bind stmts.\n+\t* ipa-split.c (split_function): Likewise.\n+\t* ira.c (combine_and_move_insns): Adjust debug bind insns only.\n+\t* loop-unroll.c (apply_opt_in_copies): Adjust tests on bind\n+\tdebug insns.\n+\t* reg-stack.c (convert_regs_1): Use DEBUG_BIND_INSN_P.\n+\t* regrename.c (build_def_use): Likewise.\n+\t* regcprop.c (copyprop_hardreg_forward_1): Likewise.\n+\t(pass_cprop_hardreg): Narrow special casing of debug insns to\n+\tdebug bind insns.\n+\t* regstat.c (regstat_init_n_sets_and_refs): Likewise.\n+\t* reload1.c (reload): Likewise.\n+\t* sese.c (sese_insert_phis_for_liveouts): Narrow special\n+\tcasing of debug stmts to debug bind stmts.\n+\t* shrink-wrap.c (move_insn_for_shrink_wrap): Likewise.\n+\t* ssa-iterators.h (num_imm_uses): Likewise.\n+\t* tree-cfg.c (gimple_merge_blocks): Narrow special casing of\n+\tdebug stmts to debug bind stmts.\n+\t* tree-inline.c\t(tree_function_versioning): Narrow special casing\n+\tof debug stmts to debug bind stmts.\n+\t* tree-loop-distribution.c (generate_loops_for_partition):\n+\tNarrow special casing of debug stmts to debug bind stmts.\n+\t* tree-sra.c (analyze_access_subtree): Narrow special casing\n+\tof debug stmts to debug bind stmts.\n+\t* tree-ssa-dce.c (remove_dead_stmt): Narrow special casing of debug\n+\tstmts to debug bind stmts.\n+\t* tree-ssa-loop-ivopt.c (remove_unused_ivs): Narrow special\n+\tcasing of debug stmts to debug bind stmts.\n+\t* tree-ssa-reassoc.c (reassoc_remove_stmt): Likewise.\n+\t* tree-ssa-tail-merge.c (tail_merge_optimize): Narrow special\n+\tcasing of debug stmts to debug bind stmts.\n+\t* tree-ssa-threadedge.c (propagate_threaded_block_debug_info):\n+\tLikewise.\n+\t* tree-ssa.c (flush_pending_stmts): Narrow special casing of\n+\tdebug stmts to debug bind stmts.\n+\t(gimple_replace_ssa_lhs): Likewise.\n+\t(insert_debug_temp_for_var_def): Likewise.\n+\t(insert_debug_temps_for_defs): Likewise.\n+\t(reset_debug_uses): Likewise.\n+\t* tree-ssanames.c (release_ssa_name_fn): Likewise.\n+\t* tree-vect-loop-manip.c (adjust_debug_stmts_now): Likewise.\n+\t(adjust_debug_stmts): Likewise.\n+\t(adjust_phi_and_debug_stmts): Likewise.\n+\t(vect_do_peeling): Likewise.\n+\t* tree-vect-loop.c (vect_transform_loop): Likewise.\n+\t* valtrack.c (propagate_for_debug): Use BIND_DEBUG_INSN_P.\n+\t* var-tracking.c (adjust_mems): Narrow special casing of debug\n+\tinsns to debug bind insns.\n+\t(dv_onepart_p, dataflow_set_clar_at_call, use_type): Likewise.\n+\t(compute_bb_dataflow, vt_find_locations): Likewise.\n+\t(vt_expand_loc, emit_notes_for_changes): Likewise.\n+\t(vt_init_cfa_base): Likewise.\n+\t(vt_emit_notes): Likewise.\n+\t(vt_initialize): Likewise.\n+\t(vt_finalize): Likewise.\n+\n \t* emit-rtl.c (next_nondebug_insn, prev_nondebug_insn): Reorder.\n \t(next_nonnote_nondebug_insn, prev_nonnote_nondebug_insn): Reorder.\n \t(next_nonnote_nondebug_insn_bb): New."}, {"sha": "b1646a5ec507bc93fed570abbd9ba0b8f8cfb476", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -5307,7 +5307,7 @@ expand_debug_locations (void)\n   flag_strict_aliasing = 0;\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    if (DEBUG_INSN_P (insn))\n+    if (DEBUG_BIND_INSN_P (insn))\n       {\n \ttree value = (tree)INSN_VAR_LOCATION_LOC (insn);\n \trtx val;\n@@ -5560,7 +5560,7 @@ expand_gimple_basic_block (basic_block bb, bool disable_tail_calls)\n \t   a_2 = ...\n            #DEBUG ... => #D1\n \t */\n-      if (MAY_HAVE_DEBUG_INSNS\n+      if (MAY_HAVE_DEBUG_BIND_INSNS\n \t  && SA.values\n \t  && !is_gimple_debug (stmt))\n \t{\n@@ -6181,7 +6181,7 @@ pass_expand::execute (function *fun)\n   timevar_pop (TV_OUT_OF_SSA);\n   SA.partition_to_pseudo = XCNEWVEC (rtx, SA.map->num_partitions);\n \n-  if (MAY_HAVE_DEBUG_STMTS && flag_tree_ter)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS && flag_tree_ter)\n     {\n       gimple_stmt_iterator gsi;\n       FOR_EACH_BB_FN (bb, cfun)\n@@ -6372,7 +6372,7 @@ pass_expand::execute (function *fun)\n \t\t  next_bb)\n     bb = expand_gimple_basic_block (bb, var_ret_seq != NULL_RTX);\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     expand_debug_locations ();\n \n   if (deep_ter_debug_map)"}, {"sha": "17a0d32ce5eab757ce9736f7cba2303c8f81979a", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -1431,7 +1431,7 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n \t stmts and associate D#X with parm in decl_debug_args_lookup\n \t vector to say for debug info that if parameter parm had been passed,\n \t it would have value parm_Y(D).  */\n-      if (e->callee->clone.combined_args_to_skip && MAY_HAVE_DEBUG_STMTS)\n+      if (e->callee->clone.combined_args_to_skip && MAY_HAVE_DEBUG_BIND_STMTS)\n \t{\n \t  vec<tree, va_gc> **debug_args\n \t    = decl_debug_args_lookup (e->callee->decl);"}, {"sha": "f4e94450c094c44b2569bc46dad0406d9a1efb3c", "filename": "gcc/combine.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -3778,7 +3778,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t  /* *SPLIT may be part of I2SRC, so make sure we have the\n \t     original expression around for later debug processing.\n \t     We should not need I2SRC any more in other cases.  */\n-\t  if (MAY_HAVE_DEBUG_INSNS)\n+\t  if (MAY_HAVE_DEBUG_BIND_INSNS)\n \t    i2src = copy_rtx (i2src);\n \t  else\n \t    i2src = NULL;\n@@ -4134,7 +4134,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n       return 0;\n     }\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     {\n       struct undo *undo;\n \n@@ -4447,15 +4447,15 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \n     if (newi2pat)\n       {\n-\tif (MAY_HAVE_DEBUG_INSNS && i2scratch)\n+\tif (MAY_HAVE_DEBUG_BIND_INSNS && i2scratch)\n \t  propagate_for_debug (i2, last_combined_insn, i2dest, i2src,\n \t\t\t       this_basic_block);\n \tINSN_CODE (i2) = i2_code_number;\n \tPATTERN (i2) = newi2pat;\n       }\n     else\n       {\n-\tif (MAY_HAVE_DEBUG_INSNS && i2src)\n+\tif (MAY_HAVE_DEBUG_BIND_INSNS && i2src)\n \t  propagate_for_debug (i2, last_combined_insn, i2dest, i2src,\n \t\t\t       this_basic_block);\n \tSET_INSN_DELETED (i2);\n@@ -4465,7 +4465,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n       {\n \tLOG_LINKS (i1) = NULL;\n \tREG_NOTES (i1) = 0;\n-\tif (MAY_HAVE_DEBUG_INSNS)\n+\tif (MAY_HAVE_DEBUG_BIND_INSNS)\n \t  propagate_for_debug (i1, last_combined_insn, i1dest, i1src,\n \t\t\t       this_basic_block);\n \tSET_INSN_DELETED (i1);\n@@ -4475,7 +4475,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n       {\n \tLOG_LINKS (i0) = NULL;\n \tREG_NOTES (i0) = 0;\n-\tif (MAY_HAVE_DEBUG_INSNS)\n+\tif (MAY_HAVE_DEBUG_BIND_INSNS)\n \t  propagate_for_debug (i0, last_combined_insn, i0dest, i0src,\n \t\t\t       this_basic_block);\n \tSET_INSN_DELETED (i0);"}, {"sha": "e449223cbb251590fd70ea9bd4d5bb27a6918076", "filename": "gcc/cse.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -7049,11 +7049,11 @@ delete_trivially_dead_insns (rtx_insn *insns, int nreg)\n \n   timevar_push (TV_DELETE_TRIVIALLY_DEAD);\n   /* First count the number of times each register is used.  */\n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     {\n       counts = XCNEWVEC (int, nreg * 3);\n       for (insn = insns; insn; insn = NEXT_INSN (insn))\n-\tif (DEBUG_INSN_P (insn))\n+\tif (DEBUG_BIND_INSN_P (insn))\n \t  count_reg_usage (INSN_VAR_LOCATION_LOC (insn), counts + nreg,\n \t\t\t   NULL_RTX, 1);\n \telse if (INSN_P (insn))\n@@ -7111,12 +7111,15 @@ delete_trivially_dead_insns (rtx_insn *insns, int nreg)\n       if (! live_insn && dbg_cnt (delete_trivial_dead))\n \t{\n \t  if (DEBUG_INSN_P (insn))\n-\t    count_reg_usage (INSN_VAR_LOCATION_LOC (insn), counts + nreg,\n-\t\t\t     NULL_RTX, -1);\n+\t    {\n+\t      if (DEBUG_BIND_INSN_P (insn))\n+\t\tcount_reg_usage (INSN_VAR_LOCATION_LOC (insn), counts + nreg,\n+\t\t\t\t NULL_RTX, -1);\n+\t    }\n \t  else\n \t    {\n \t      rtx set;\n-\t      if (MAY_HAVE_DEBUG_INSNS\n+\t      if (MAY_HAVE_DEBUG_BIND_INSNS\n \t\t  && (set = single_set (insn)) != NULL_RTX\n \t\t  && is_dead_reg (SET_DEST (set), counts)\n \t\t  /* Used at least once in some DEBUG_INSN.  */\n@@ -7156,10 +7159,10 @@ delete_trivially_dead_insns (rtx_insn *insns, int nreg)\n \t}\n     }\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     {\n       for (insn = get_last_insn (); insn; insn = PREV_INSN (insn))\n-\tif (DEBUG_INSN_P (insn))\n+\tif (DEBUG_BIND_INSN_P (insn))\n \t  {\n \t    /* If this debug insn references a dead register that wasn't replaced\n \t       with an DEBUG_EXPR, reset the DEBUG_INSN.  */"}, {"sha": "6fd9548015cebf5d7a42ae820bb4a893e77b2092", "filename": "gcc/dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -777,7 +777,7 @@ rest_of_handle_ud_dce (void)\n     }\n   worklist.release ();\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     reset_unmarked_insns_debug_uses ();\n \n   /* Before any insns are deleted, we must remove the chains since"}, {"sha": "88f93db6cf0fd674ae0c5e8116417868c0ed249d", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -1951,10 +1951,11 @@ instantiate_virtual_regs (void)\n \t   Fortunately, they shouldn't contain virtual registers either.  */\n         if (GET_CODE (PATTERN (insn)) == USE\n \t    || GET_CODE (PATTERN (insn)) == CLOBBER\n-\t    || GET_CODE (PATTERN (insn)) == ASM_INPUT)\n+\t    || GET_CODE (PATTERN (insn)) == ASM_INPUT\n+\t    || DEBUG_MARKER_INSN_P (insn))\n \t  continue;\n-\telse if (DEBUG_INSN_P (insn))\n-\t  instantiate_virtual_regs_in_rtx (&INSN_VAR_LOCATION (insn));\n+\telse if (DEBUG_BIND_INSN_P (insn))\n+\t  instantiate_virtual_regs_in_rtx (INSN_VAR_LOCATION_PTR (insn));\n \telse\n \t  instantiate_virtual_regs_in_insn (insn);\n "}, {"sha": "8068c2ab1f715e2fa607bfab9a3a740d75a0f8c4", "filename": "gcc/gimple-ssa-backprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fgimple-ssa-backprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fgimple-ssa-backprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-backprop.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -729,7 +729,7 @@ strip_sign_op (tree rhs)\n void\n backprop::prepare_change (tree var)\n {\n-  if (MAY_HAVE_DEBUG_STMTS)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     insert_debug_temp_for_var_def (NULL, var);\n   reset_flow_sensitive_info (var);\n }"}, {"sha": "d34aa142849cf90a3757e71ed81584123d05aa49", "filename": "gcc/gimple.h", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -197,13 +197,12 @@ enum gf_mask {\n     GF_PREDICT_TAKEN\t\t= 1 << 15\n };\n \n-/* Currently, there are only two types of gimple debug stmt.  Others are\n-   envisioned, for example, to enable the generation of is_stmt notes\n-   in line number information, to mark sequence points, etc.  This\n-   subcode is to be used to tell them apart.  */\n+/* This subcode tells apart different kinds of stmts that are not used\n+   for codegen, but rather to retain debug information.  */\n enum gimple_debug_subcode {\n   GIMPLE_DEBUG_BIND = 0,\n-  GIMPLE_DEBUG_SOURCE_BIND = 1\n+  GIMPLE_DEBUG_SOURCE_BIND = 1,\n+  GIMPLE_DEBUG_BEGIN_STMT = 2\n };\n \n /* Masks for selecting a pass local flag (PLF) to work on.  These\n@@ -4757,6 +4756,28 @@ gimple_debug_source_bind_set_value (gimple *dbg, tree value)\n   gimple_set_op (dbg, 1, value);\n }\n \n+/* Return true if S is a GIMPLE_DEBUG BEGIN_STMT statement.  */\n+\n+static inline bool\n+gimple_debug_begin_stmt_p (const gimple *s)\n+{\n+  if (is_gimple_debug (s))\n+    return s->subcode == GIMPLE_DEBUG_BEGIN_STMT;\n+\n+  return false;\n+}\n+\n+/* Return true if S is a GIMPLE_DEBUG non-binding marker statement.  */\n+\n+static inline bool\n+gimple_debug_nonbind_marker_p (const gimple *s)\n+{\n+  if (is_gimple_debug (s))\n+    return s->subcode == GIMPLE_DEBUG_BEGIN_STMT;\n+\n+  return false;\n+}\n+\n /* Return the line number for EXPR, or return -1 if we have no line\n    number information for it.  */\n static inline int"}, {"sha": "b7c0b3a6f4ffb06df3253ef9187267e90f694914", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -4010,7 +4010,7 @@ schedule_insn (rtx_insn *insn)\n   gcc_assert (sd_lists_empty_p (insn, SD_LIST_HARD_BACK));\n \n   /* Reset debug insns invalidated by moving this insn.  */\n-  if (MAY_HAVE_DEBUG_INSNS && !DEBUG_INSN_P (insn))\n+  if (MAY_HAVE_DEBUG_BIND_INSNS && !DEBUG_INSN_P (insn))\n     for (sd_it = sd_iterator_start (insn, SD_LIST_BACK);\n \t sd_iterator_cond (&sd_it, &dep);)\n       {\n@@ -4023,7 +4023,7 @@ schedule_insn (rtx_insn *insn)\n \t    continue;\n \t  }\n \n-\tgcc_assert (DEBUG_INSN_P (dbg));\n+\tgcc_assert (DEBUG_BIND_INSN_P (dbg));\n \n \tif (sched_verbose >= 6)\n \t  fprintf (sched_dump, \";;\\t\\tresetting: debug insn %d\\n\","}, {"sha": "960487b31db1f65f63f6359b4e5a4aa9f0d7fa44", "filename": "gcc/insn-notes.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Finsn-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Finsn-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finsn-notes.def?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -68,6 +68,9 @@ INSN_NOTE (VAR_LOCATION)\n /* The values passed to callee.  */\n INSN_NOTE (CALL_ARG_LOCATION)\n \n+/* The beginning of a statement.  */\n+INSN_NOTE (BEGIN_STMT)\n+\n /* Record the struct for the following basic block.  Uses\n    NOTE_BASIC_BLOCK.  FIXME: Redundant with the basic block pointer\n    now included in every insn.  NOTE: If there's no CFG anymore, in other words,"}, {"sha": "bcc736b99c0f0bb786b169f112d79cebba3fea90", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -402,7 +402,7 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gcall *stmt,\n \t    }\n \t  vargs.quick_push (expr);\n \t}\n-      if (adj->op != IPA_PARM_OP_COPY && MAY_HAVE_DEBUG_STMTS)\n+      if (adj->op != IPA_PARM_OP_COPY && MAY_HAVE_DEBUG_BIND_STMTS)\n \t{\n \t  unsigned int ix;\n \t  tree ddecl = NULL_TREE, origin = DECL_ORIGIN (adj->base), arg;"}, {"sha": "48857c2aab3782bb34988d2b4bc19870450f7130", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -1485,7 +1485,7 @@ split_function (basic_block return_bb, struct split_point *split_point,\n     {\n       vec<tree, va_gc> **debug_args = NULL;\n       unsigned i = 0, len = 0;\n-      if (MAY_HAVE_DEBUG_STMTS)\n+      if (MAY_HAVE_DEBUG_BIND_STMTS)\n \t{\n \t  debug_args = decl_debug_args_lookup (node->decl);\n \t  if (debug_args)\n@@ -1498,11 +1498,12 @@ split_function (basic_block return_bb, struct split_point *split_point,\n \t    tree ddecl;\n \t    gimple *def_temp;\n \n-\t    /* This needs to be done even without MAY_HAVE_DEBUG_STMTS,\n-\t       otherwise if it didn't exist before, we'd end up with\n-\t       different SSA_NAME_VERSIONs between -g and -g0.  */\n+\t    /* This needs to be done even without\n+\t       MAY_HAVE_DEBUG_BIND_STMTS, otherwise if it didn't exist\n+\t       before, we'd end up with different SSA_NAME_VERSIONs\n+\t       between -g and -g0.  */\n \t    arg = get_or_create_ssa_default_def (cfun, parm);\n-\t    if (!MAY_HAVE_DEBUG_STMTS || debug_args == NULL)\n+\t    if (!MAY_HAVE_DEBUG_BIND_STMTS || debug_args == NULL)\n \t      continue;\n \n \t    while (i < len && (**debug_args)[i] != DECL_ORIGIN (parm))"}, {"sha": "79837da1db5142f5819d0d7ea53f215b4c2b1224", "filename": "gcc/ira.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -3839,9 +3839,9 @@ combine_and_move_insns (void)\n \t}\n \n       /* Last pass - adjust debug insns referencing cleared regs.  */\n-      if (MAY_HAVE_DEBUG_INSNS)\n+      if (MAY_HAVE_DEBUG_BIND_INSNS)\n \tfor (rtx_insn *insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-\t  if (DEBUG_INSN_P (insn))\n+\t  if (DEBUG_BIND_INSN_P (insn))\n \t    {\n \t      rtx old_loc = INSN_VAR_LOCATION_LOC (insn);\n \t      INSN_VAR_LOCATION_LOC (insn)"}, {"sha": "cc154da9686a7f9b50a04deefcfdab7a263a03fe", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -2037,12 +2037,14 @@ apply_opt_in_copies (struct opt_info *opt_info,\n       FOR_BB_INSNS_SAFE (bb, insn, next)\n         {\n \t  if (!INSN_P (insn)\n-\t      || (DEBUG_INSN_P (insn)\n+\t      || (DEBUG_BIND_INSN_P (insn)\n+\t\t  && INSN_VAR_LOCATION_DECL (insn)\n \t\t  && TREE_CODE (INSN_VAR_LOCATION_DECL (insn)) == LABEL_DECL))\n             continue;\n \n \t  while (!INSN_P (orig_insn)\n-\t\t || (DEBUG_INSN_P (orig_insn)\n+\t\t || (DEBUG_BIND_INSN_P (orig_insn)\n+\t\t     && INSN_VAR_LOCATION_DECL (orig_insn)\n \t\t     && (TREE_CODE (INSN_VAR_LOCATION_DECL (orig_insn))\n \t\t\t == LABEL_DECL)))\n             orig_insn = NEXT_INSN (orig_insn);"}, {"sha": "fe754b242d584429eeafea540afc5349301d80ff", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -3034,7 +3034,7 @@ convert_regs_1 (basic_block block)\n \n       /* Don't bother processing unless there is a stack reg\n \t mentioned or if it's a CALL_INSN.  */\n-      if (DEBUG_INSN_P (insn))\n+      if (DEBUG_BIND_INSN_P (insn))\n \t{\n \t  if (starting_stack_p)\n \t    debug_insns_with_starting_stack++;\n@@ -3074,7 +3074,7 @@ convert_regs_1 (basic_block block)\n       for (insn = BB_HEAD (block); debug_insns_with_starting_stack;\n \t   insn = NEXT_INSN (insn))\n \t{\n-\t  if (!DEBUG_INSN_P (insn))\n+\t  if (!DEBUG_BIND_INSN_P (insn))\n \t    continue;\n \n \t  debug_insns_with_starting_stack--;"}, {"sha": "15d8b140ce7f473bdc7d09049229284ec7873c64", "filename": "gcc/regcprop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -752,7 +752,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n       next = NEXT_INSN (insn);\n       if (!NONDEBUG_INSN_P (insn))\n \t{\n-\t  if (DEBUG_INSN_P (insn))\n+\t  if (DEBUG_BIND_INSN_P (insn))\n \t    {\n \t      rtx loc = INSN_VAR_LOCATION_LOC (insn);\n \t      if (!VAR_LOC_UNKNOWN_P (loc))\n@@ -1296,7 +1296,7 @@ pass_cprop_hardreg::execute (function *fun)\n       copyprop_hardreg_forward_1 (bb, all_vd + bb->index);\n     }\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     {\n       FOR_EACH_BB_FN (bb, fun)\n \tif (bitmap_bit_p (visited, bb->index)"}, {"sha": "89380a8770044c196877503ac36498eb6e51d12f", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -1876,7 +1876,7 @@ build_def_use (basic_block bb)\n \t    if (REG_NOTE_KIND (note) == REG_CFA_RESTORE)\n \t      scan_rtx (insn, &XEXP (note, 0), NO_REGS, mark_all_read, OP_IN);\n \t}\n-      else if (DEBUG_INSN_P (insn)\n+      else if (DEBUG_BIND_INSN_P (insn)\n \t       && !VAR_LOC_UNKNOWN_P (INSN_VAR_LOCATION_LOC (insn)))\n \t{\n \t  scan_rtx (insn, &INSN_VAR_LOCATION_LOC (insn),"}, {"sha": "fd3d3a8d98bd75457d1c5ef7da4fbb2762880e78", "filename": "gcc/regstat.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fregstat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fregstat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregstat.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -54,7 +54,7 @@ regstat_init_n_sets_and_refs (void)\n \n   regstat_n_sets_and_refs = XNEWVEC (struct regstat_n_sets_and_refs_t, max_regno);\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     for (i = 0; i < max_regno; i++)\n       {\n \tint use_count;"}, {"sha": "322696a25f3e5b6e306f84a2fb7ca55dd3569beb", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -1112,7 +1112,7 @@ reload (rtx_insn *first, int global)\n       /* We don't want complex addressing modes in debug insns\n \t if simpler ones will do, so delegitimize equivalences\n \t in debug insns.  */\n-      if (MAY_HAVE_DEBUG_INSNS && reg_renumber[i] < 0)\n+      if (MAY_HAVE_DEBUG_BIND_INSNS && reg_renumber[i] < 0)\n \t{\n \t  rtx reg = regno_reg_rtx[i];\n \t  rtx equiv = 0;\n@@ -1140,7 +1140,7 @@ reload (rtx_insn *first, int global)\n \t      while (next && DF_REF_INSN (next) == insn)\n \t\tnext = DF_REF_NEXT_REG (next);\n \n-\t      if (DEBUG_INSN_P (insn))\n+\t      if (DEBUG_BIND_INSN_P (insn))\n \t\t{\n \t\t  if (!equiv)\n \t\t    {"}, {"sha": "4de167d982cf2efb26561872d75a7646bc05385e", "filename": "gcc/rtl.h", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -815,8 +815,13 @@ struct GTY(()) rtvec_def {\n /* Predicate yielding nonzero iff X is an insn that is not a debug insn.  */\n #define NONDEBUG_INSN_P(X) (INSN_P (X) && !DEBUG_INSN_P (X))\n \n+/* Nonzero if DEBUG_MARKER_INSN_P may possibly hold.  */\n+#define MAY_HAVE_DEBUG_MARKER_INSNS 0 /* debug_nonbind_markers_p */\n+/* Nonzero if DEBUG_BIND_INSN_P may possibly hold.  */\n+#define MAY_HAVE_DEBUG_BIND_INSNS flag_var_tracking_assignments\n /* Nonzero if DEBUG_INSN_P may possibly hold.  */\n-#define MAY_HAVE_DEBUG_INSNS (flag_var_tracking_assignments)\n+#define MAY_HAVE_DEBUG_INSNS\t\t\t\t\t\\\n+  (MAY_HAVE_DEBUG_MARKER_INSNS || MAY_HAVE_DEBUG_BIND_INSNS)\n \n /* Predicate yielding nonzero iff X is a real insn.  */\n #define INSN_P(X) \\\n@@ -1604,6 +1609,7 @@ extern const char * const reg_note_name[];\n #define NOTE_EH_HANDLER(INSN)\tXCINT (INSN, 3, NOTE)\n #define NOTE_BASIC_BLOCK(INSN)\tXCBBDEF (INSN, 3, NOTE)\n #define NOTE_VAR_LOCATION(INSN)\tXCEXP (INSN, 3, NOTE)\n+#define NOTE_MARKER_LOCATION(INSN) XCUINT (INSN, 3, NOTE)\n #define NOTE_CFI(INSN)\t\tXCCFI (INSN, 3, NOTE)\n #define NOTE_LABEL_NUMBER(INSN)\tXCINT (INSN, 3, NOTE)\n \n@@ -1615,6 +1621,12 @@ extern const char * const reg_note_name[];\n #define NOTE_INSN_BASIC_BLOCK_P(INSN) \\\n   (NOTE_P (INSN) && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)\n \n+/* Nonzero if INSN is a debug nonbind marker note,\n+   for which NOTE_MARKER_LOCATION can be used.  */\n+#define NOTE_MARKER_P(INSN)\t\t\t\t\\\n+  (NOTE_P (INSN) &&\t\t\t\t\t\\\n+   (NOTE_KIND (INSN) == NOTE_INSN_BEGIN_STMT))\n+\n /* Variable declaration and the location of a variable.  */\n #define PAT_VAR_LOCATION_DECL(PAT) (XCTREE ((PAT), 0, VAR_LOCATION))\n #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))\n@@ -1634,8 +1646,39 @@ extern const char * const reg_note_name[];\n #define NOTE_VAR_LOCATION_STATUS(NOTE) \\\n   PAT_VAR_LOCATION_STATUS (NOTE_VAR_LOCATION (NOTE))\n \n+/* Evaluate to TRUE if INSN is a debug insn that denotes a variable\n+   location/value tracking annotation.  */\n+#define DEBUG_BIND_INSN_P(INSN)\t\t\t\\\n+  (DEBUG_INSN_P (INSN)\t\t\t\t\\\n+   && (GET_CODE (PATTERN (INSN))\t\t\\\n+       == VAR_LOCATION))\n+/* Evaluate to TRUE if INSN is a debug insn that denotes a program\n+   source location marker.  */\n+#define DEBUG_MARKER_INSN_P(INSN)\t\t\\\n+  (DEBUG_INSN_P (INSN)\t\t\t\t\\\n+   && (GET_CODE (PATTERN (INSN))\t\t\\\n+       != VAR_LOCATION))\n+/* Evaluate to the marker kind.  */\n+#define INSN_DEBUG_MARKER_KIND(INSN)\t\t  \\\n+  (GET_CODE (PATTERN (INSN)) == DEBUG_MARKER\t  \\\n+   ? (GET_MODE (PATTERN (INSN)) == VOIDmode\t  \\\n+      ? NOTE_INSN_BEGIN_STMT\t\t\t  \\\n+      : (enum insn_note)-1) \t\t\t  \\\n+   : (enum insn_note)-1)\n+/* Create patterns for debug markers.  These and the above abstract\n+   the representation, so that it's easier to get rid of the abuse of\n+   the mode to hold the marker kind.  Other marker types are\n+   envisioned, so a single bit flag won't do; maybe separate RTL codes\n+   wouldn't be a problem.  */\n+#define GEN_RTX_DEBUG_MARKER_BEGIN_STMT_PAT() \\\n+  gen_rtx_DEBUG_MARKER (VOIDmode)\n+\n /* The VAR_LOCATION rtx in a DEBUG_INSN.  */\n-#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)\n+#define INSN_VAR_LOCATION(INSN) \\\n+  (RTL_FLAG_CHECK1 (\"INSN_VAR_LOCATION\", PATTERN (INSN), VAR_LOCATION))\n+/* A pointer to the VAR_LOCATION rtx in a DEBUG_INSN.  */\n+#define INSN_VAR_LOCATION_PTR(INSN) \\\n+  (&PATTERN (INSN))\n \n /* Accessors for a tree-expanded var location debug insn.  */\n #define INSN_VAR_LOCATION_DECL(INSN) \\"}, {"sha": "bbc72d4d7618bfc5241f11d89e24b84561c3fc09", "filename": "gcc/sese.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -205,7 +205,7 @@ void\n sese_insert_phis_for_liveouts (sese_info_p region, basic_block bb,\n \t\t\t       edge false_e, edge true_e)\n {\n-  if (MAY_HAVE_DEBUG_STMTS)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     sese_reset_debug_liveouts (region);\n \n   unsigned i;"}, {"sha": "91745936e95afb9df3c4a030c7fa00fe07caa65c", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -309,10 +309,10 @@ move_insn_for_shrink_wrap (basic_block bb, rtx_insn *insn,\n      move it as far as we can.  */\n   do\n     {\n-      if (MAY_HAVE_DEBUG_INSNS)\n+      if (MAY_HAVE_DEBUG_BIND_INSNS)\n \t{\n \t  FOR_BB_INSNS_REVERSE (bb, dinsn)\n-\t    if (DEBUG_INSN_P (dinsn))\n+\t    if (DEBUG_BIND_INSN_P (dinsn))\n \t      {\n \t\tdf_ref use;\n \t\tFOR_EACH_INSN_USE (use, dinsn)"}, {"sha": "201bf190cefab537a2a4a3c9ff2064afa95588c0", "filename": "gcc/ssa-iterators.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fssa-iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fssa-iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-iterators.h?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -453,7 +453,7 @@ num_imm_uses (const_tree var)\n   const ssa_use_operand_t *ptr;\n   unsigned int num = 0;\n \n-  if (!MAY_HAVE_DEBUG_STMTS)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     {\n       for (ptr = start->next; ptr != start; ptr = ptr->next)\n \tif (USE_STMT (ptr))"}, {"sha": "00f86613137a1ee07e152d2d1262e328ab12824e", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -2072,7 +2072,7 @@ gimple_merge_blocks (basic_block a, basic_block b)\n \t      gsi_insert_before (&dest_gsi, stmt, GSI_NEW_STMT);\n \t    }\n \t  /* Other user labels keep around in a form of a debug stmt.  */\n-\t  else if (!DECL_ARTIFICIAL (label) && MAY_HAVE_DEBUG_STMTS)\n+\t  else if (!DECL_ARTIFICIAL (label) && MAY_HAVE_DEBUG_BIND_STMTS)\n \t    {\n \t      gimple *dbg = gimple_build_debug_bind (label,\n \t\t\t\t\t\t     integer_zero_node,"}, {"sha": "e6e3f129d4276b6b716bea711ad7a561d919dd71", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -5930,7 +5930,7 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \t\t\t\t\t    &vars);\n \t\tif (init)\n \t\t  init_stmts.safe_push (init);\n-\t\tif (MAY_HAVE_DEBUG_STMTS && args_to_skip)\n+\t\tif (MAY_HAVE_DEBUG_BIND_STMTS && args_to_skip)\n \t\t  {\n \t\t    if (parm_num == -1)\n \t\t      {\n@@ -6072,7 +6072,7 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \t}\n     }\n \n-  if (debug_args_to_skip && MAY_HAVE_DEBUG_STMTS)\n+  if (debug_args_to_skip && MAY_HAVE_DEBUG_BIND_STMTS)\n     {\n       tree parm;\n       vec<tree, va_gc> **debug_args = NULL;"}, {"sha": "7439a1f370e8f17470ea4007ae5722705f786ad2", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -826,7 +826,7 @@ generate_loops_for_partition (struct loop *loop, partition *partition,\n   /* Remove stmts not in the PARTITION bitmap.  */\n   bbs = get_loop_body_in_dom_order (loop);\n \n-  if (MAY_HAVE_DEBUG_STMTS)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     for (i = 0; i < loop->num_nodes; i++)\n       {\n \tbasic_block bb = bbs[i];"}, {"sha": "daef8d72cd0e05684cd0326413125ec23901374d", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -2512,7 +2512,7 @@ analyze_access_subtree (struct access *root, struct access *parent,\n \t  gcc_checking_assert (!root->grp_scalar_read\n \t\t\t       && !root->grp_assignment_read);\n \t  sth_created = true;\n-\t  if (MAY_HAVE_DEBUG_STMTS)\n+\t  if (MAY_HAVE_DEBUG_BIND_STMTS)\n \t    {\n \t      root->grp_to_be_debug_replaced = 1;\n \t      root->replacement_decl = create_access_replacement (root);"}, {"sha": "1e1307b2ff72746b82c2521c0cd50ef7c66a8ada", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -1081,7 +1081,7 @@ remove_dead_stmt (gimple_stmt_iterator *i, basic_block bb)\n \n   /* If this is a store into a variable that is being optimized away,\n      add a debug bind stmt if possible.  */\n-  if (MAY_HAVE_DEBUG_STMTS\n+  if (MAY_HAVE_DEBUG_BIND_STMTS\n       && gimple_assign_single_p (stmt)\n       && is_gimple_val (gimple_assign_rhs1 (stmt)))\n     {"}, {"sha": "350f94dfc33f3b55fc3a3ecf1c9a36fddb9004c9", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -7154,7 +7154,7 @@ remove_unused_ivs (struct ivopts_data *data)\n \n \t  tree def = info->iv->ssa_name;\n \n-\t  if (MAY_HAVE_DEBUG_STMTS && SSA_NAME_DEF_STMT (def))\n+\t  if (MAY_HAVE_DEBUG_BIND_STMTS && SSA_NAME_DEF_STMT (def))\n \t    {\n \t      imm_use_iterator imm_iter;\n \t      use_operand_p use_p;"}, {"sha": "b037dfbff8fb00be3acb6095353db68f2278e666", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -232,7 +232,7 @@ reassoc_remove_stmt (gimple_stmt_iterator *gsi)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n \n-  if (!MAY_HAVE_DEBUG_STMTS || gimple_code (stmt) == GIMPLE_PHI)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS || gimple_code (stmt) == GIMPLE_PHI)\n     return gsi_remove (gsi, true);\n \n   gimple_stmt_iterator prev = *gsi;"}, {"sha": "fc94f5d83d2c926cd5186f81602618e15c78c25f", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -1781,7 +1781,7 @@ tail_merge_optimize (unsigned int todo)\n \n   if (nr_bbs_removed_total > 0)\n     {\n-      if (MAY_HAVE_DEBUG_STMTS)\n+      if (MAY_HAVE_DEBUG_BIND_STMTS)\n \t{\n \t  calculate_dominance_info (CDI_DOMINATORS);\n \t  update_debug_stmts ();"}, {"sha": "70675e4a3fcda9acbf58cff473603d2478171406", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -692,7 +692,7 @@ simplify_control_stmt_condition_1 (edge e,\n void\n propagate_threaded_block_debug_into (basic_block dest, basic_block src)\n {\n-  if (!MAY_HAVE_DEBUG_STMTS)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     return;\n \n   if (!single_pred_p (dest))"}, {"sha": "151f544babada65f208cf26e21f63e1f6d75514b", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -220,7 +220,7 @@ flush_pending_stmts (edge e)\n void\n gimple_replace_ssa_lhs (gimple *stmt, tree nlhs)\n {\n-  if (MAY_HAVE_DEBUG_STMTS)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     {\n       tree lhs = gimple_get_lhs (stmt);\n \n@@ -242,7 +242,7 @@ gimple_replace_ssa_lhs (gimple *stmt, tree nlhs)\n tree\n target_for_debug_bind (tree var)\n {\n-  if (!MAY_HAVE_DEBUG_STMTS)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     return NULL_TREE;\n \n   if (TREE_CODE (var) == SSA_NAME)\n@@ -307,7 +307,7 @@ insert_debug_temp_for_var_def (gimple_stmt_iterator *gsi, tree var)\n   int usecount = 0;\n   tree value = NULL;\n \n-  if (!MAY_HAVE_DEBUG_STMTS)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     return;\n \n   /* If this name has already been registered for replacement, do nothing\n@@ -495,7 +495,7 @@ insert_debug_temps_for_defs (gimple_stmt_iterator *gsi)\n   ssa_op_iter op_iter;\n   def_operand_p def_p;\n \n-  if (!MAY_HAVE_DEBUG_STMTS)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     return;\n \n   stmt = gsi_stmt (*gsi);\n@@ -521,7 +521,7 @@ reset_debug_uses (gimple *stmt)\n   imm_use_iterator imm_iter;\n   gimple *use_stmt;\n \n-  if (!MAY_HAVE_DEBUG_STMTS)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     return;\n \n   FOR_EACH_PHI_OR_STMT_DEF (def_p, stmt, op_iter, SSA_OP_DEF)"}, {"sha": "d00d64852c2eecf3435be00d2f18fdd85941ee2a", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -562,7 +562,7 @@ release_ssa_name_fn (struct function *fn, tree var)\n       int saved_ssa_name_version = SSA_NAME_VERSION (var);\n       use_operand_p imm = &(SSA_NAME_IMM_USE_NODE (var));\n \n-      if (MAY_HAVE_DEBUG_STMTS)\n+      if (MAY_HAVE_DEBUG_BIND_STMTS)\n \tinsert_debug_temp_for_var_def (NULL, var);\n \n       if (flag_checking)"}, {"sha": "d56fbfcbde5a484ad3a7213ce529cdabcd0cf4ea", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -192,7 +192,7 @@ adjust_debug_stmts_now (adjust_info *ai)\n static void\n adjust_vec_debug_stmts (void)\n {\n-  if (!MAY_HAVE_DEBUG_STMTS)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     return;\n \n   gcc_assert (adjust_vec.exists ());\n@@ -214,7 +214,7 @@ adjust_debug_stmts (tree from, tree to, basic_block bb)\n {\n   adjust_info ai;\n \n-  if (MAY_HAVE_DEBUG_STMTS\n+  if (MAY_HAVE_DEBUG_BIND_STMTS\n       && TREE_CODE (from) == SSA_NAME\n       && ! SSA_NAME_IS_DEFAULT_DEF (from)\n       && ! virtual_operand_p (from))\n@@ -242,7 +242,7 @@ adjust_phi_and_debug_stmts (gimple *update_phi, edge e, tree new_def)\n \n   SET_PHI_ARG_DEF (update_phi, e->dest_idx, new_def);\n \n-  if (MAY_HAVE_DEBUG_STMTS)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     adjust_debug_stmts (orig_def, PHI_RESULT (update_phi),\n \t\t\tgimple_bb (update_phi));\n }\n@@ -1685,7 +1685,7 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n   create_lcssa_for_virtual_phi (loop);\n   update_ssa (TODO_update_ssa_only_virtuals);\n \n-  if (MAY_HAVE_DEBUG_STMTS)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     {\n       gcc_assert (!adjust_vec.exists ());\n       adjust_vec.create (32);"}, {"sha": "3e4703a360049119deafe1c9fdf4317bd506a9dc", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -7381,7 +7381,7 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t  if (!stmt_info)\n \t    continue;\n \n-\t  if (MAY_HAVE_DEBUG_STMTS && !STMT_VINFO_LIVE_P (stmt_info))\n+\t  if (MAY_HAVE_DEBUG_BIND_STMTS && !STMT_VINFO_LIVE_P (stmt_info))\n \t    vect_loop_kill_debug_uses (loop, phi);\n \n \t  if (!STMT_VINFO_RELEVANT_P (stmt_info)\n@@ -7444,7 +7444,7 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t      continue;\n \t    }\n \n-\t  if (MAY_HAVE_DEBUG_STMTS && !STMT_VINFO_LIVE_P (stmt_info))\n+\t  if (MAY_HAVE_DEBUG_BIND_STMTS && !STMT_VINFO_LIVE_P (stmt_info))\n \t    vect_loop_kill_debug_uses (loop, stmt);\n \n \t  if (!STMT_VINFO_RELEVANT_P (stmt_info)"}, {"sha": "49cbb99d2db2e805a94f4f0f107cf54e0a8f318f", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -1123,8 +1123,14 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define VL_EXP_OPERAND_LENGTH(NODE) \\\n   ((int)TREE_INT_CST_LOW (VL_EXP_CHECK (NODE)->exp.operands[0]))\n \n+/* Nonzero if gimple_debug_nonbind_marker_p() may possibly hold.  */\n+#define MAY_HAVE_DEBUG_MARKER_STMTS 0 /* debug_nonbind_markers_p */\n+/* Nonzero if gimple_debug_bind_p() (and thus\n+   gimple_debug_source_bind_p()) may possibly hold.  */\n+#define MAY_HAVE_DEBUG_BIND_STMTS flag_var_tracking_assignments\n /* Nonzero if is_gimple_debug() may possibly hold.  */\n-#define MAY_HAVE_DEBUG_STMTS    (flag_var_tracking_assignments)\n+#define MAY_HAVE_DEBUG_STMTS\t\t\t\t\t\\\n+  (MAY_HAVE_DEBUG_MARKER_STMTS || MAY_HAVE_DEBUG_BIND_STMTS)\n \n /* In a LOOP_EXPR node.  */\n #define LOOP_EXPR_BODY(NODE) TREE_OPERAND_CHECK_CODE (NODE, LOOP_EXPR, 0)"}, {"sha": "610c2f6d6c430ef25e0390233b8568755f81097e", "filename": "gcc/valtrack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fvaltrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fvaltrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -214,7 +214,7 @@ propagate_for_debug (rtx_insn *insn, rtx_insn *last, rtx dest, rtx src,\n     {\n       insn = next;\n       next = NEXT_INSN (insn);\n-      if (DEBUG_INSN_P (insn))\n+      if (DEBUG_BIND_INSN_P (insn))\n \t{\n \t  loc = simplify_replace_fn_rtx (INSN_VAR_LOCATION_LOC (insn),\n \t\t\t\t\t dest, propagate_for_debug_subst, &p);"}, {"sha": "33bcca7d6f52c5827bab8da399dc593d1bd4c935", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f52e8f0812546e6cb533b384b29f56570624ff/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=36f52e8f0812546e6cb533b384b29f56570624ff", "patch": "@@ -1125,7 +1125,7 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n       if (tem == NULL_RTX)\n \ttem = gen_rtx_raw_SUBREG (GET_MODE (loc), addr, SUBREG_BYTE (loc));\n     finish_subreg:\n-      if (MAY_HAVE_DEBUG_INSNS\n+      if (MAY_HAVE_DEBUG_BIND_INSNS\n \t  && GET_CODE (tem) == SUBREG\n \t  && (GET_CODE (SUBREG_REG (tem)) == PLUS\n \t      || GET_CODE (SUBREG_REG (tem)) == MINUS\n@@ -1337,7 +1337,7 @@ dv_onepart_p (decl_or_value dv)\n {\n   tree decl;\n \n-  if (!MAY_HAVE_DEBUG_INSNS)\n+  if (!MAY_HAVE_DEBUG_BIND_INSNS)\n     return NOT_ONEPART;\n \n   if (dv_is_value_p (dv))\n@@ -4861,7 +4861,7 @@ dataflow_set_clear_at_call (dataflow_set *set, rtx_insn *call_insn)\n   EXECUTE_IF_SET_IN_HARD_REG_SET (invalidated_regs, 0, r, hrsi)\n     var_regno_delete (set, r);\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     {\n       set->traversed_vars = set->vars;\n       shared_hash_htab (set->vars)\n@@ -5535,7 +5535,7 @@ use_type (rtx loc, struct count_use_info *cui, machine_mode *modep)\n \t\t  variable names such as VALUEs (never happens) or\n \t\t  DEBUG_EXPRs (only happens in the presence of debug\n \t\t  insns).  */\n-\t       && (!MAY_HAVE_DEBUG_INSNS\n+\t       && (!MAY_HAVE_DEBUG_BIND_INSNS\n \t\t   || !rtx_debug_expr_p (XEXP (loc, 0))))\n \treturn MO_USE;\n       else\n@@ -6700,7 +6700,7 @@ compute_bb_dataflow (basic_block bb)\n   dataflow_set_copy (&old_out, out);\n   dataflow_set_copy (out, in);\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     local_get_addr_cache = new hash_map<rtx, rtx>;\n \n   FOR_EACH_VEC_ELT (VTI (bb)->mos, i, mo)\n@@ -6982,7 +6982,7 @@ compute_bb_dataflow (basic_block bb)\n \t}\n     }\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     {\n       delete local_get_addr_cache;\n       local_get_addr_cache = NULL;\n@@ -7069,7 +7069,7 @@ vt_find_locations (void)\n \t      else\n \t\toldinsz = oldoutsz = 0;\n \n-\t      if (MAY_HAVE_DEBUG_INSNS)\n+\t      if (MAY_HAVE_DEBUG_BIND_INSNS)\n \t\t{\n \t\t  dataflow_set *in = &VTI (bb)->in, *first_out = NULL;\n \t\t  bool first = true, adjust = false;\n@@ -7130,7 +7130,7 @@ vt_find_locations (void)\n \n \t      if (htabmax && htabsz > htabmax)\n \t\t{\n-\t\t  if (MAY_HAVE_DEBUG_INSNS)\n+\t\t  if (MAY_HAVE_DEBUG_BIND_INSNS)\n \t\t    inform (DECL_SOURCE_LOCATION (cfun->decl),\n \t\t\t    \"variable tracking size limit exceeded with \"\n \t\t\t    \"-fvar-tracking-assignments, retrying without\");\n@@ -7190,7 +7190,7 @@ vt_find_locations (void)\n \t}\n     }\n \n-  if (success && MAY_HAVE_DEBUG_INSNS)\n+  if (success && MAY_HAVE_DEBUG_BIND_INSNS)\n     FOR_EACH_BB_FN (bb, cfun)\n       gcc_assert (VTI (bb)->flooded);\n \n@@ -8579,7 +8579,7 @@ vt_expand_loc (rtx loc, variable_table_type *vars)\n   struct expand_loc_callback_data data;\n   rtx result;\n \n-  if (!MAY_HAVE_DEBUG_INSNS)\n+  if (!MAY_HAVE_DEBUG_BIND_INSNS)\n     return loc;\n \n   INIT_ELCD (data, vars);\n@@ -9014,7 +9014,7 @@ emit_notes_for_changes (rtx_insn *insn, enum emit_note_where where,\n   if (!changed_variables->elements ())\n     return;\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     process_changed_values (htab);\n \n   data.insn = insn;\n@@ -9498,10 +9498,8 @@ vt_emit_notes (void)\n      delete_variable_part).  */\n   emit_notes = true;\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n-    {\n-      dropped_values = new variable_table_type (cselib_get_next_uid () * 2);\n-    }\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n+    dropped_values = new variable_table_type (cselib_get_next_uid () * 2);\n \n   dataflow_set_init (&cur);\n \n@@ -9511,13 +9509,13 @@ vt_emit_notes (void)\n \t subsequent basic blocks.  */\n       emit_notes_for_differences (BB_HEAD (bb), &cur, &VTI (bb)->in);\n \n-      if (MAY_HAVE_DEBUG_INSNS)\n+      if (MAY_HAVE_DEBUG_BIND_INSNS)\n \tlocal_get_addr_cache = new hash_map<rtx, rtx>;\n \n       /* Emit the notes for the changes in the basic block itself.  */\n       emit_notes_in_bb (bb, &cur);\n \n-      if (MAY_HAVE_DEBUG_INSNS)\n+      if (MAY_HAVE_DEBUG_BIND_INSNS)\n \tdelete local_get_addr_cache;\n       local_get_addr_cache = NULL;\n \n@@ -9533,7 +9531,7 @@ vt_emit_notes (void)\n \n   dataflow_set_destroy (&cur);\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     delete dropped_values;\n   dropped_values = NULL;\n \n@@ -9893,7 +9891,7 @@ vt_init_cfa_base (void)\n       cfa_base_rtx = NULL_RTX;\n       return;\n     }\n-  if (!MAY_HAVE_DEBUG_INSNS)\n+  if (!MAY_HAVE_DEBUG_BIND_INSNS)\n     return;\n \n   /* Tell alias analysis that cfa_base_rtx should share\n@@ -9935,7 +9933,7 @@ vt_initialize (void)\n       VTI (bb)->permp = NULL;\n     }\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     {\n       cselib_init (CSELIB_RECORD_MEMORY | CSELIB_PRESERVE_CONSTANTS);\n       scratch_regs = BITMAP_ALLOC (NULL);\n@@ -9948,7 +9946,7 @@ vt_initialize (void)\n       global_get_addr_cache = NULL;\n     }\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     {\n       rtx reg, expr;\n       int ofst;\n@@ -10078,7 +10076,7 @@ vt_initialize (void)\n       HOST_WIDE_INT pre, post = 0;\n       basic_block first_bb, last_bb;\n \n-      if (MAY_HAVE_DEBUG_INSNS)\n+      if (MAY_HAVE_DEBUG_BIND_INSNS)\n \t{\n \t  cselib_record_sets_hook = add_with_sets;\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -10129,7 +10127,7 @@ vt_initialize (void)\n \n \t\t  cselib_hook_called = false;\n \t\t  adjust_insn (bb, insn);\n-\t\t  if (MAY_HAVE_DEBUG_INSNS)\n+\t\t  if (MAY_HAVE_DEBUG_BIND_INSNS)\n \t\t    {\n \t\t      if (CALL_P (insn))\n \t\t\tprepare_call_arguments (bb, insn);\n@@ -10164,7 +10162,7 @@ vt_initialize (void)\n \t\t      vt_init_cfa_base ();\n \t\t      hard_frame_pointer_adjustment = fp_cfa_offset;\n \t\t      /* Disassociate sp from fp now.  */\n-\t\t      if (MAY_HAVE_DEBUG_INSNS)\n+\t\t      if (MAY_HAVE_DEBUG_BIND_INSNS)\n \t\t\t{\n \t\t\t  cselib_val *v;\n \t\t\t  cselib_invalidate_rtx (stack_pointer_rtx);\n@@ -10184,7 +10182,7 @@ vt_initialize (void)\n \n       bb = last_bb;\n \n-      if (MAY_HAVE_DEBUG_INSNS)\n+      if (MAY_HAVE_DEBUG_BIND_INSNS)\n \t{\n \t  cselib_preserve_only_values ();\n \t  cselib_reset_table (cselib_get_next_uid ());\n@@ -10283,7 +10281,7 @@ vt_finalize (void)\n   location_chain_pool.release ();\n   shared_hash_pool.release ();\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n+  if (MAY_HAVE_DEBUG_BIND_INSNS)\n     {\n       if (global_get_addr_cache)\n \tdelete global_get_addr_cache;"}]}