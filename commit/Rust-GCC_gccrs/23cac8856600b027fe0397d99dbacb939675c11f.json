{"sha": "23cac8856600b027fe0397d99dbacb939675c11f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNjYWM4ODU2NjAwYjAyN2ZlMDM5N2Q5OWRiYWNiOTM5Njc1YzExZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-04-10T07:15:40Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-04-10T07:15:40Z"}, "message": "Reshuffle 27_io testsuite.\n\n\n2003-04-09  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tReshuffle 27_io testsuite.  * testsuite/27_io/filebuf.cc,\n\tfilebuf_members-1.tst, filebuf_members-1.txt, filebuf_members.cc,\n\tfilebuf_virtuals-1.tst, filebuf_virtuals-1.txt,\n\tfilebuf_virtuals-2.tst, filebuf_virtuals-3.tst,\n\tfilebuf_virtuals.cc, fpos.cc, fstream.cc, fstream_members.cc,\n\tifstream.cc, ifstream_members-1.tst, ifstream_members-1.txt,\n\tifstream_members.cc, instantiations.cc, ios.cc,\n\tios_base_callbacks.cc, ios_base_members_static-1.tst,\n\tios_base_members_static.cc, ios_base_storage.cc,\n\tios_base_types.cc, ios_ctor.cc, ios_init.cc,\n\tios_manip_basefield.cc, ios_manip_fmtflags.cc, ios_members.cc,\n\tiostream.cc, iostream_members.cc, istream.cc,\n\tistream_exception.cc, istream_extractor_char.cc,\n\tistream_extractor_other-1.tst, istream_extractor_other-1.txt,\n\tistream_extractor_other-2.tst, istream_extractor_other.cc,\n\tistream_manip.cc, istream_seeks-1.tst, istream_seeks-1.txt,\n\tistream_seeks-2.tst, istream_seeks-3.tst, istream_seeks.cc,\n\tistream_sentry.cc, istream_unformatted-1.tst,\n\tistream_unformatted-1.txt, istream_unformatted.cc,\n\tistringstream.cc, istringstream_members.cc,\n\tnarrow_stream_objects.cc, ofstream.cc, ofstream_members-1.tst,\n\tofstream_members.cc, ostream.cc, ostream_exception.cc,\n\tostream_fail.cc, ostream_inserter_arith.cc,\n\tostream_inserter_char-1.tst, ostream_inserter_char-1.txt,\n\tostream_inserter_char.cc, ostream_inserter_other-1.tst,\n\tostream_inserter_other-2.tst, ostream_inserter_other.cc,\n\tostream_manip.cc, ostream_seeks-1.tst, ostream_seeks.cc,\n\tostream_sentry.cc, ostream_unformatted.cc, ostringstream.cc,\n\tostringstream_members.cc, standard_manipulators.cc, streambuf.cc,\n\tstreambuf_members.cc, stringbuf.cc, stringbuf_members.cc,\n\tstringbuf_virtuals.cc, stringstream.cc, stringstream_members.cc,\n\twide_stream_objects.cc, istream_extractor_arith/01.cc,\n\tistream_extractor_arith/02.cc, istream_extractor_arith/03.cc,\n\tistream_extractor_arith/06.cc, istream_extractor_arith/07.cc,\n\tistream_extractor_arith/08.cc, istream_extractor_arith/09.cc,\n\tistream_extractor_arith/10.cc, istream_extractor_arith/11.cc,\n\tistream_extractor_arith/12.cc, istream_extractor_arith/13.cc:\n\tSplit into...\n\t* 27_io/basic_filebuf/1.cc: New.\n\t* 27_io/basic_filebuf/2.cc: New.\n\t* 27_io/basic_filebuf/3.cc: New.\n\t* 27_io/basic_filebuf/4.cc: New.\n\t* 27_io/basic_filebuf/close/char/1.cc: New.\n\t* 27_io/basic_filebuf/close/char/2.cc: New.\n\t* 27_io/basic_filebuf/close/char/3.cc: New.\n\t* 27_io/basic_filebuf/close/char/4879.cc: New.\n\t* 27_io/basic_filebuf/close/char/9964.cc: New.\n\t* 27_io/basic_filebuf/imbue/char/1.cc: New.\n\t* 27_io/basic_filebuf/imbue/char/9322.cc: New.\n\t* 27_io/basic_filebuf/in_avail/char/1.cc: New.\n\t* 27_io/basic_filebuf/is_open/char/1.cc: New.\n\t* 27_io/basic_filebuf/open/char/1.cc: New.\n\t* 27_io/basic_filebuf/open/char/2.cc: New.\n\t* 27_io/basic_filebuf/open/char/3.cc: New.\n\t* 27_io/basic_filebuf/open/char/9507.cc: New.\n\t* 27_io/basic_filebuf/overflow/char/1.cc: New.\n\t* 27_io/basic_filebuf/overflow/char/3599.cc: New.\n\t* 27_io/basic_filebuf/overflow/char/9169.cc: New.\n\t* 27_io/basic_filebuf/overflow/char/9182-2.cc: New.\n\t* 27_io/basic_filebuf/overflow/char/9988.cc: New.\n\t* 27_io/basic_filebuf/sbumpc/char/1.cc: New.\n\t* 27_io/basic_filebuf/sbumpc/char/9825.cc: New.\n\t* 27_io/basic_filebuf/seekoff/char/1.cc: New.\n\t* 27_io/basic_filebuf/seekoff/char/2.cc: New.\n\t* 27_io/basic_filebuf/seekpos/char/1.cc: New.\n\t* 27_io/basic_filebuf/seekpos/char/2.cc: New.\n\t* 27_io/basic_filebuf/setbuf/char/1.cc: New.\n\t* 27_io/basic_filebuf/setbuf/char/2.cc: New.\n\t* 27_io/basic_filebuf/setbuf/char/3.cc: New.\n\t* 27_io/basic_filebuf/sgetc/char/1.cc: New.\n\t* 27_io/basic_filebuf/sgetn/char/1.cc: New.\n\t* 27_io/basic_filebuf/sgetn/char/2.cc: New.\n\t* 27_io/basic_filebuf/snextc/char/1.cc: New.\n\t* 27_io/basic_filebuf/sputbackc/char/1.cc: New.\n\t* 27_io/basic_filebuf/sputbackc/char/9425.cc: New.\n\t* 27_io/basic_filebuf/sputc/char/1.cc: New.\n\t* 27_io/basic_filebuf/sputc/char/1057.cc: New.\n\t* 27_io/basic_filebuf/sputc/char/9701-2.cc: New.\n\t* 27_io/basic_filebuf/sputn/char/1.cc: New.\n\t* 27_io/basic_filebuf/sputn/char/1057.cc: New.\n\t* 27_io/basic_filebuf/sputn/char/9701-1.cc: New.\n\t* 27_io/basic_filebuf/sungetc/char/1.cc: New.\n\t* 27_io/basic_filebuf/sync/char/1057.cc: New.\n\t* 27_io/basic_filebuf/sync/char/9182-1.cc: New.\n\t* 27_io/basic_filebuf/underflow/char/10097.cc: New.\n\t* 27_io/basic_fstream/1.cc: New.\n\t* 27_io/basic_fstream/2.cc: New.\n\t* 27_io/basic_fstream/3.cc: New.\n\t* 27_io/basic_fstream/4.cc: New.\n\t* 27_io/basic_fstream/rdbuf/char/2832.cc: New.\n\t* 27_io/basic_ifstream/1.cc: New.\n\t* 27_io/basic_ifstream/2.cc: New.\n\t* 27_io/basic_ifstream/3.cc: New.\n\t* 27_io/basic_ifstream/4.cc: New.\n\t* 27_io/basic_ifstream/cons/char/1.cc: New.\n\t* 27_io/basic_ifstream/open/char/1.cc: New.\n\t* 27_io/basic_ifstream/rdbuf/char/2832.cc: New.\n\t* 27_io/basic_ios/1.cc: New.\n\t* 27_io/basic_ios/2.cc: New.\n\t* 27_io/basic_ios/3.cc: New.\n\t* 27_io/basic_ios/4.cc: New.\n\t* 27_io/basic_ios/clear/char/1.cc: New.\n\t* 27_io/basic_ios/cons/char/1.cc: New.\n\t* 27_io/basic_ios/cons/char/2.cc: New.\n\t* 27_io/basic_ios/cons/char/3.cc: New.\n\t* 27_io/basic_ios/copyfmt/char/1.cc: New.\n\t* 27_io/basic_ios/copyfmt/char/2.cc: New.\n\t* 27_io/basic_ios/exceptions/char/1.cc: New.\n\t* 27_io/basic_ios/locales/char/1.cc: New.\n\t* 27_io/basic_iostream/1.cc: New.\n\t* 27_io/basic_iostream/2.cc: New.\n\t* 27_io/basic_iostream/3.cc: New.\n\t* 27_io/basic_iostream/4.cc: New.\n\t* 27_io/basic_istream/1.cc: New.\n\t* 27_io/basic_istream/2.cc: New.\n\t* 27_io/basic_istream/3.cc: New.\n\t* 27_io/basic_istream/4.cc: New.\n\t* 27_io/basic_istream/exceptions/char/9561.cc: New.\n\t* 27_io/basic_istream/extractors_arithmetic/char/01.cc: New.\n\t* 27_io/basic_istream/extractors_arithmetic/char/02.cc: New.\n\t* 27_io/basic_istream/extractors_arithmetic/char/03.cc: New.\n\t* 27_io/basic_istream/extractors_arithmetic/char/06.cc: New.\n\t* 27_io/basic_istream/extractors_arithmetic/char/07.cc: New.\n\t* 27_io/basic_istream/extractors_arithmetic/char/08.cc: New.\n\t* 27_io/basic_istream/extractors_arithmetic/char/09.cc: New.\n\t* 27_io/basic_istream/extractors_arithmetic/char/10.cc: New.\n\t* 27_io/basic_istream/extractors_arithmetic/char/11.cc: New.\n\t* 27_io/basic_istream/extractors_arithmetic/char/12.cc: New.\n\t* 27_io/basic_istream/extractors_arithmetic/char/13.cc: New.\n\t* 27_io/basic_istream/extractors_character/char/1.cc: New.\n\t* 27_io/basic_istream/extractors_character/char/2.cc: New.\n\t* 27_io/basic_istream/extractors_character/char/3.cc: New.\n\t* 27_io/basic_istream/extractors_character/char/9826.cc: New.\n\t* 27_io/basic_istream/extractors_other/char/1.cc: New.\n\t* 27_io/basic_istream/extractors_other/char/2.cc: New.\n\t* 27_io/basic_istream/extractors_other/char/3.cc: New.\n\t* 27_io/basic_istream/extractors_other/char/9318-in.cc: New.\n\t* 27_io/basic_istream/extractors_other/char/9424-in.cc: New.\n\t* 27_io/basic_istream/get/char/1.cc: New.\n\t* 27_io/basic_istream/get/char/2.cc: New.\n\t* 27_io/basic_istream/getline/char/1.cc: New.\n\t* 27_io/basic_istream/getline/char/2.cc: New.\n\t* 27_io/basic_istream/getline/char/3.cc: New.\n\t* 27_io/basic_istream/ignore/char/1.cc: New.\n\t* 27_io/basic_istream/ignore/char/6360.cc: New.\n\t* 27_io/basic_istream/ignore/char/7220.cc: New.\n\t* 27_io/basic_istream/peek/char/1.cc: New.\n\t* 27_io/basic_istream/peek/char/6414.cc: New.\n\t* 27_io/basic_istream/putback/char/1.cc: New.\n\t* 27_io/basic_istream/read/char/1.cc: New.\n\t* 27_io/basic_istream/read/char/2.cc: New.\n\t* 27_io/basic_istream/read/char/3.cc: New.\n\t* 27_io/basic_istream/readsome/char/6746-1.cc: New.\n\t* 27_io/basic_istream/readsome/char/6746-2.cc: New.\n\t* 27_io/basic_istream/readsome/char/8258.cc: New.\n\t* 27_io/basic_istream/seekg/char/2346-fstream.cc: New.\n\t* 27_io/basic_istream/seekg/char/2346-sstream.cc: New.\n\t* 27_io/basic_istream/seekg/char/8348-1.cc: New.\n\t* 27_io/basic_istream/seekg/char/8348-2.cc: New.\n\t* 27_io/basic_istream/seekg/char/fstream.cc: New.\n\t* 27_io/basic_istream/seekg/char/sstream.cc: New.\n\t* 27_io/basic_istream/sentry/char/1.cc: New.\n\t* 27_io/basic_istream/sentry/char/2.cc: New.\n\t* 27_io/basic_istream/sentry/char/3.cc: New.\n\t* 27_io/basic_istream/sentry/char/3983-fstream.cc: New.\n\t* 27_io/basic_istream/sentry/char/3983-sstream.cc: New.\n\t* 27_io/basic_istream/tellg/char/1.cc: New.\n\t* 27_io/basic_istream/tellg/char/8348.cc: New.\n\t* 27_io/basic_istream/tellg/char/fstream.cc: New.\n\t* 27_io/basic_istream/tellg/char/sstream.cc: New.\n\t* 27_io/basic_istream/ws/char/1.cc: New.\n\t* 27_io/basic_istringstream/1.cc: New.\n\t* 27_io/basic_istringstream/2.cc: New.\n\t* 27_io/basic_istringstream/3.cc: New.\n\t* 27_io/basic_istringstream/4.cc: New.\n\t* 27_io/basic_istringstream/rdbuf/char/2832.cc: New.\n\t* 27_io/basic_istringstream/str/char/1.cc: New.\n\t* 27_io/basic_ofstream/1.cc: New.\n\t* 27_io/basic_ofstream/2.cc: New.\n\t* 27_io/basic_ofstream/3.cc: New.\n\t* 27_io/basic_ofstream/4.cc: New.\n\t* 27_io/basic_ofstream/cons/char/2.cc: New.\n\t* 27_io/basic_ofstream/open/char/1.cc: New.\n\t* 27_io/basic_ofstream/rdbuf/char/2832.cc: New.\n\t* 27_io/basic_ostream/1.cc: New.\n\t* 27_io/basic_ostream/2.cc: New.\n\t* 27_io/basic_ostream/3.cc: New.\n\t* 27_io/basic_ostream/4.cc: New.\n\t* 27_io/basic_ostream/cons/char/9827.cc: New.\n\t* 27_io/basic_ostream/endl/char/1.cc: New.\n\t* 27_io/basic_ostream/ends/char/1.cc: New.\n\t* 27_io/basic_ostream/ends/char/2.cc: New.\n\t* 27_io/basic_ostream/exceptions/char/9561.cc: New.\n\t* 27_io/basic_ostream/flush/char/1.cc: New.\n\t* 27_io/basic_ostream/inserters_arithmetic/char/1.cc: New.\n\t* 27_io/basic_ostream/inserters_arithmetic/char/2.cc: New.\n\t* 27_io/basic_ostream/inserters_arithmetic/char/3.cc: New.\n\t* 27_io/basic_ostream/inserters_arithmetic/char/4.cc: New.\n\t* 27_io/basic_ostream/inserters_arithmetic/char/4402.cc: New.\n\t* 27_io/basic_ostream/inserters_arithmetic/char/5.cc: New.\n\t* 27_io/basic_ostream/inserters_arithmetic/char/6.cc: New.\n\t* 27_io/basic_ostream/inserters_arithmetic/wchar_t/1.cc: New.\n\t* 27_io/basic_ostream/inserters_character/char/1.cc: New.\n\t* 27_io/basic_ostream/inserters_character/char/2.cc: New.\n\t* 27_io/basic_ostream/inserters_character/char/3.cc: New.\n\t* 27_io/basic_ostream/inserters_character/char/4.cc: New.\n\t* 27_io/basic_ostream/inserters_character/char/5.cc: New.\n\t* 27_io/basic_ostream/inserters_character/char/6.cc: New.\n\t* 27_io/basic_ostream/inserters_character/char/8.cc: New.\n\t* 27_io/basic_ostream/inserters_character/wchar_t/7.cc: New.\n\t* 27_io/basic_ostream/inserters_character/wchar_t/8.cc: New.\n\t* 27_io/basic_ostream/inserters_other/char/1.cc: New.\n\t* 27_io/basic_ostream/inserters_other/char/2.cc: New.\n\t* 27_io/basic_ostream/inserters_other/char/3.cc: New.\n\t* 27_io/basic_ostream/inserters_other/char/4.cc: New.\n\t* 27_io/basic_ostream/inserters_other/char/9318-out.cc: New.\n\t* 27_io/basic_ostream/inserters_other/char/9424-out.cc: New.\n\t* 27_io/basic_ostream/sentry/char/1.cc: New.\n\t* 27_io/basic_ostream/sentry/char/2.cc: New.\n\t* 27_io/basic_ostream/sentry/char/3983-fstream.cc: New.\n\t* 27_io/basic_ostream/sentry/char/3983-sstream.cc: New.\n\t* 27_io/basic_ostream/tellp/char/1.cc: New.\n\t* 27_io/basic_ostream/tellp/char/2.cc: New.\n\t* 27_io/basic_ostringstream/1.cc: New.\n\t* 27_io/basic_ostringstream/2.cc: New.\n\t* 27_io/basic_ostringstream/3.cc: New.\n\t* 27_io/basic_ostringstream/4.cc: New.\n\t* 27_io/basic_ostringstream/cons/char/3.cc: New.\n\t* 27_io/basic_ostringstream/rdbuf/char/2832.cc: New.\n\t* 27_io/basic_ostringstream/str/char/1.cc: New.\n\t* 27_io/basic_ostringstream/str/char/2.cc: New.\n\t* 27_io/basic_streambuf/1.cc: New.\n\t* 27_io/basic_streambuf/2.cc: New.\n\t* 27_io/basic_streambuf/3.cc: New.\n\t* 27_io/basic_streambuf/cons/char/1.cc: New.\n\t* 27_io/basic_streambuf/imbue/char/1.cc: New.\n\t* 27_io/basic_streambuf/imbue/char/9322.cc: New.\n\t* 27_io/basic_streambuf/overflow/char/1.cc: New.\n\t* 27_io/basic_streambuf/overflow/char/2.cc: New.\n\t* 27_io/basic_streambuf/overflow/char/3599.cc: New.\n\t* 27_io/basic_streambuf/sgetc/char/1.cc: New.\n\t* 27_io/basic_streambuf/sgetn/char/1.cc: New.\n\t* 27_io/basic_streambuf/sputbackc/char/9538.cc: New.\n\t* 27_io/basic_streambuf/sputc/char/1057.cc: New.\n\t* 27_io/basic_streambuf/sputn/char/1.cc: New.\n\t* 27_io/basic_streambuf/sputn/char/1057.cc: New.\n\t* 27_io/basic_streambuf/sync/char/1057.cc: New.\n\t* 27_io/basic_stringbuf/1.cc: New.\n\t* 27_io/basic_stringbuf/2.cc: New.\n\t* 27_io/basic_stringbuf/3.cc: New.\n\t* 27_io/basic_stringbuf/4.cc: New.\n\t* 27_io/basic_stringbuf/5.cc: New.\n\t* 27_io/basic_stringbuf/imbue/char/1.cc: New.\n\t* 27_io/basic_stringbuf/imbue/char/9322.cc: New.\n\t* 27_io/basic_stringbuf/in_avail/char/1.cc: New.\n\t* 27_io/basic_stringbuf/overflow/char/2.cc: New.\n\t* 27_io/basic_stringbuf/overflow/char/3599.cc: New.\n\t* 27_io/basic_stringbuf/overflow/char/9988.cc: New.\n\t* 27_io/basic_stringbuf/sbumpc/char/1.cc: New.\n\t* 27_io/basic_stringbuf/sbumpc/char/9825.cc: New.\n\t* 27_io/basic_stringbuf/seekoff/char/1.cc: New.\n\t* 27_io/basic_stringbuf/seekoff/char/2.cc: New.\n\t* 27_io/basic_stringbuf/seekpos/char/1.cc: New.\n\t* 27_io/basic_stringbuf/seekpos/char/2.cc: New.\n\t* 27_io/basic_stringbuf/setbuf/char/1.cc: New.\n\t* 27_io/basic_stringbuf/setbuf/char/2.cc: New.\n\t* 27_io/basic_stringbuf/setbuf/char/3.cc: New.\n\t* 27_io/basic_stringbuf/sgetc/char/1.cc: New.\n\t* 27_io/basic_stringbuf/sgetn/char/1.cc: New.\n\t* 27_io/basic_stringbuf/snextc/char/1.cc: New.\n\t* 27_io/basic_stringbuf/sputbackc/char/1.cc: New.\n\t* 27_io/basic_stringbuf/sputbackc/char/9425.cc: New.\n\t* 27_io/basic_stringbuf/sputc/char/1.cc: New.\n\t* 27_io/basic_stringbuf/sputc/char/1057.cc: New.\n\t* 27_io/basic_stringbuf/sputc/char/9404-1.cc: New.\n\t* 27_io/basic_stringbuf/sputn/char/1.cc: New.\n\t* 27_io/basic_stringbuf/sputn/char/1057.cc: New.\n\t* 27_io/basic_stringbuf/sputn/char/9404-2.cc: New.\n\t* 27_io/basic_stringbuf/str/char/1.cc: New.\n\t* 27_io/basic_stringbuf/str/char/2.cc: New.\n\t* 27_io/basic_stringbuf/str/char/3.cc: New.\n\t* 27_io/basic_stringbuf/str/char/3955.cc: New.\n\t* 27_io/basic_stringbuf/sungetc/char/1.cc: New.\n\t* 27_io/basic_stringbuf/sync/char/1057.cc: New.\n\t* 27_io/basic_stringstream/1.cc: New.\n\t* 27_io/basic_stringstream/2.cc: New.\n\t* 27_io/basic_stringstream/3.cc: New.\n\t* 27_io/basic_stringstream/4.cc: New.\n\t* 27_io/basic_stringstream/rdbuf/char/2832.cc: New.\n\t* 27_io/basic_stringstream/str/char/1.cc: New.\n\t* 27_io/basic_stringstream/str/char/2.cc: New.\n\t* 27_io/basic_stringstream/str/char/3.cc: New.\n\t* 27_io/basic_stringstream/str/char/4.cc: New.\n\t* 27_io/fpos/1.cc: New.\n\t* 27_io/fpos/2.cc: New.\n\t* 27_io/fpos/3.cc: New.\n\t* 27_io/ios_base/callbacks/1.cc: New.\n\t* 27_io/ios_base/state/1.cc: New.\n\t* 27_io/ios_base/storage/1.cc: New.\n\t* 27_io/ios_base/storage/2.cc: New.\n\t* 27_io/ios_base/storage/3.cc: New.\n\t* 27_io/ios_base/sync_with_stdio/1.cc: New.\n\t* 27_io/ios_base/sync_with_stdio/2.cc: New.\n\t* 27_io/manipulators/adjustfield/char/1.cc: New.\n\t* 27_io/manipulators/adjustfield/char/2.cc: New.\n\t* 27_io/manipulators/basefield/char/1.cc: New.\n\t* 27_io/manipulators/standard/char/1.cc: New.\n\t* 27_io/manipulators/standard/char/2.cc: New.\n\t* 27_io/objects/char/1.cc: New.\n\t* 27_io/objects/char/2.cc: New.\n\t* 27_io/objects/char/2523-1_xin.cc: New.\n\t* 27_io/objects/char/2523-1_xin.in: New.\n\t* 27_io/objects/char/2523-2_xin.cc: New.\n\t* 27_io/objects/char/2523-2_xin.in: New.\n\t* 27_io/objects/char/3045.cc: New.\n\t* 27_io/objects/char/3647.cc: New.\n\t* 27_io/objects/char/3_xin.cc: New.\n\t* 27_io/objects/char/3_xin.in: New.\n\t* 27_io/objects/char/4_xin.cc: New.\n\t* 27_io/objects/char/4_xin.in: New.\n\t* 27_io/objects/char/5268.cc: New.\n\t* 27_io/objects/char/5280_xin.cc: New.\n\t* 27_io/objects/char/5280_xin.in: New.\n\t* 27_io/objects/char/6548_xin.cc: New.\n\t* 27_io/objects/char/6548_xin.in: New.\n\t* 27_io/objects/char/6648-1_xin.cc: New.\n\t* 27_io/objects/char/6648-1_xin.in: New.\n\t* 27_io/objects/char/6648-2_xin.cc: New.\n\t* 27_io/objects/char/6648-2_xin.in: New.\n\t* 27_io/objects/char/7744_xin.cc: New.\n\t* 27_io/objects/char/7744_xin.in: New.\n\t* 27_io/objects/wchar_t/1.cc: New.\n\t* 27_io/types/1.cc: New.\n\t* 27_io/types/2.cc: New.\n\t* data/filebuf_members-1.tst: New.\n\t* data/filebuf_members-1.txt: New.\n\t* data/filebuf_virtuals-1.tst: New.\n\t* data/filebuf_virtuals-1.txt: New.\n\t* data/filebuf_virtuals-2.tst: New.\n\t* data/filebuf_virtuals-3.tst: New.\n\t* data/ifstream_members-1.tst: New.\n\t* data/ifstream_members-1.txt: New.\n\t* data/ios_base_members_static-1.tst: New.\n\t* data/istream_extractor_other-1.tst: New.\n\t* data/istream_extractor_other-1.txt: New.\n\t* data/istream_extractor_other-2.tst: New.\n\t* data/istream_seeks-1.tst: New.\n\t* data/istream_seeks-1.txt: New.\n\t* data/istream_seeks-2.tst: New.\n\t* data/istream_seeks-3.tst: New.\n\t* data/istream_unformatted-1.tst: New.\n\t* data/istream_unformatted-1.txt: New.\n\t* data/ofstream_members-1.tst: New.\n\t* data/ostream_inserter_char-1.tst: New.\n\t* data/ostream_inserter_char-1.txt: New.\n\t* data/ostream_inserter_other-1.tst: New.\n\t* data/ostream_inserter_other-2.tst: New.\n\t* data/ostream_seeks-1.tst: New.\n\n2003-04-09  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/sstream.tcc (basic_stringbuf::seekpos): Remove\n\trequirement that __mode must be strict input or output.\n\n\t* include/std/std_streambuf.h (basic_streambuf::setp): Set\n\t_M_out_lim.\n\n\t* include/std/std_sstream.h (basic_strinbuf::str): Zero length\n\toutput string shouldn't core.\n\t(basic_stringbuf::_M_really_sync): Add base argument. Remove rturn\n\ttype.\n\t* include/bits/sstream.tcc: Adjust _M_really_sync bits here.\n\n\t* include/bits/istream.tcc (basic_istream::putback): Set gcount to\n\tzero.\n\n2003-04-09  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/data: New directory.\n\t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init): Modify\n\tto copy files from the testsuite data directory.\n\t(libstdc++-v3-list-sourcefiles): Add another test list filter, for\n\ttestfiles containing _xin, which now means this is an interactive\n\ttest and should be run with the interactive dejagnu hooks.\n\t* testsuite/Makefile.am: Remove testsuite_* files.\n\t* testsuite/Makefile.in: Regenerate.\n\nFrom-SVN: r65421", "tree": {"sha": "823d62ecd4e9deb5f5c0e8076859542770c5b74e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/823d62ecd4e9deb5f5c0e8076859542770c5b74e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23cac8856600b027fe0397d99dbacb939675c11f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cac8856600b027fe0397d99dbacb939675c11f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23cac8856600b027fe0397d99dbacb939675c11f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cac8856600b027fe0397d99dbacb939675c11f/comments", "author": null, "committer": null, "parents": [{"sha": "a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e"}], "stats": {"total": 25380, "additions": 18850, "deletions": 6530}, "files": [{"sha": "1f1f3c433dc8eefe58b02aca027cf37a2faaf214", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 389, "deletions": 0, "changes": 389, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,3 +1,392 @@\n+2003-04-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tReshuffle 27_io testsuite.  * testsuite/27_io/filebuf.cc,\n+\tfilebuf_members-1.tst, filebuf_members-1.txt, filebuf_members.cc,\n+\tfilebuf_virtuals-1.tst, filebuf_virtuals-1.txt,\n+\tfilebuf_virtuals-2.tst, filebuf_virtuals-3.tst,\n+\tfilebuf_virtuals.cc, fpos.cc, fstream.cc, fstream_members.cc,\n+\tifstream.cc, ifstream_members-1.tst, ifstream_members-1.txt,\n+\tifstream_members.cc, instantiations.cc, ios.cc,\n+\tios_base_callbacks.cc, ios_base_members_static-1.tst,\n+\tios_base_members_static.cc, ios_base_storage.cc,\n+\tios_base_types.cc, ios_ctor.cc, ios_init.cc,\n+\tios_manip_basefield.cc, ios_manip_fmtflags.cc, ios_members.cc,\n+\tiostream.cc, iostream_members.cc, istream.cc,\n+\tistream_exception.cc, istream_extractor_char.cc,\n+\tistream_extractor_other-1.tst, istream_extractor_other-1.txt,\n+\tistream_extractor_other-2.tst, istream_extractor_other.cc,\n+\tistream_manip.cc, istream_seeks-1.tst, istream_seeks-1.txt,\n+\tistream_seeks-2.tst, istream_seeks-3.tst, istream_seeks.cc,\n+\tistream_sentry.cc, istream_unformatted-1.tst,\n+\tistream_unformatted-1.txt, istream_unformatted.cc,\n+\tistringstream.cc, istringstream_members.cc,\n+\tnarrow_stream_objects.cc, ofstream.cc, ofstream_members-1.tst,\n+\tofstream_members.cc, ostream.cc, ostream_exception.cc,\n+\tostream_fail.cc, ostream_inserter_arith.cc,\n+\tostream_inserter_char-1.tst, ostream_inserter_char-1.txt,\n+\tostream_inserter_char.cc, ostream_inserter_other-1.tst,\n+\tostream_inserter_other-2.tst, ostream_inserter_other.cc,\n+\tostream_manip.cc, ostream_seeks-1.tst, ostream_seeks.cc,\n+\tostream_sentry.cc, ostream_unformatted.cc, ostringstream.cc,\n+\tostringstream_members.cc, standard_manipulators.cc, streambuf.cc,\n+\tstreambuf_members.cc, stringbuf.cc, stringbuf_members.cc,\n+\tstringbuf_virtuals.cc, stringstream.cc, stringstream_members.cc,\n+\twide_stream_objects.cc, istream_extractor_arith/01.cc,\n+\tistream_extractor_arith/02.cc, istream_extractor_arith/03.cc,\n+\tistream_extractor_arith/06.cc, istream_extractor_arith/07.cc,\n+\tistream_extractor_arith/08.cc, istream_extractor_arith/09.cc,\n+\tistream_extractor_arith/10.cc, istream_extractor_arith/11.cc,\n+\tistream_extractor_arith/12.cc, istream_extractor_arith/13.cc:\n+\tSplit into...\n+\t* 27_io/basic_filebuf/1.cc: New.\n+\t* 27_io/basic_filebuf/2.cc: New.\n+\t* 27_io/basic_filebuf/3.cc: New.\n+\t* 27_io/basic_filebuf/4.cc: New.\n+\t* 27_io/basic_filebuf/close/char/1.cc: New.\n+\t* 27_io/basic_filebuf/close/char/2.cc: New.\n+\t* 27_io/basic_filebuf/close/char/3.cc: New.\n+\t* 27_io/basic_filebuf/close/char/4879.cc: New.\n+\t* 27_io/basic_filebuf/close/char/9964.cc: New.\n+\t* 27_io/basic_filebuf/imbue/char/1.cc: New.\n+\t* 27_io/basic_filebuf/imbue/char/9322.cc: New.\n+\t* 27_io/basic_filebuf/in_avail/char/1.cc: New.\n+\t* 27_io/basic_filebuf/is_open/char/1.cc: New.\n+\t* 27_io/basic_filebuf/open/char/1.cc: New.\n+\t* 27_io/basic_filebuf/open/char/2.cc: New.\n+\t* 27_io/basic_filebuf/open/char/3.cc: New.\n+\t* 27_io/basic_filebuf/open/char/9507.cc: New.\n+\t* 27_io/basic_filebuf/overflow/char/1.cc: New.\n+\t* 27_io/basic_filebuf/overflow/char/3599.cc: New.\n+\t* 27_io/basic_filebuf/overflow/char/9169.cc: New.\n+\t* 27_io/basic_filebuf/overflow/char/9182-2.cc: New.\n+\t* 27_io/basic_filebuf/overflow/char/9988.cc: New.\n+\t* 27_io/basic_filebuf/sbumpc/char/1.cc: New.\n+\t* 27_io/basic_filebuf/sbumpc/char/9825.cc: New.\n+\t* 27_io/basic_filebuf/seekoff/char/1.cc: New.\n+\t* 27_io/basic_filebuf/seekoff/char/2.cc: New.\n+\t* 27_io/basic_filebuf/seekpos/char/1.cc: New.\n+\t* 27_io/basic_filebuf/seekpos/char/2.cc: New.\n+\t* 27_io/basic_filebuf/setbuf/char/1.cc: New.\n+\t* 27_io/basic_filebuf/setbuf/char/2.cc: New.\n+\t* 27_io/basic_filebuf/setbuf/char/3.cc: New.\n+\t* 27_io/basic_filebuf/sgetc/char/1.cc: New.\n+\t* 27_io/basic_filebuf/sgetn/char/1.cc: New.\n+\t* 27_io/basic_filebuf/sgetn/char/2.cc: New.\n+\t* 27_io/basic_filebuf/snextc/char/1.cc: New.\n+\t* 27_io/basic_filebuf/sputbackc/char/1.cc: New.\n+\t* 27_io/basic_filebuf/sputbackc/char/9425.cc: New.\n+\t* 27_io/basic_filebuf/sputc/char/1.cc: New.\n+\t* 27_io/basic_filebuf/sputc/char/1057.cc: New.\n+\t* 27_io/basic_filebuf/sputc/char/9701-2.cc: New.\n+\t* 27_io/basic_filebuf/sputn/char/1.cc: New.\n+\t* 27_io/basic_filebuf/sputn/char/1057.cc: New.\n+\t* 27_io/basic_filebuf/sputn/char/9701-1.cc: New.\n+\t* 27_io/basic_filebuf/sungetc/char/1.cc: New.\n+\t* 27_io/basic_filebuf/sync/char/1057.cc: New.\n+\t* 27_io/basic_filebuf/sync/char/9182-1.cc: New.\n+\t* 27_io/basic_filebuf/underflow/char/10097.cc: New.\n+\t* 27_io/basic_fstream/1.cc: New.\n+\t* 27_io/basic_fstream/2.cc: New.\n+\t* 27_io/basic_fstream/3.cc: New.\n+\t* 27_io/basic_fstream/4.cc: New.\n+\t* 27_io/basic_fstream/rdbuf/char/2832.cc: New.\n+\t* 27_io/basic_ifstream/1.cc: New.\n+\t* 27_io/basic_ifstream/2.cc: New.\n+\t* 27_io/basic_ifstream/3.cc: New.\n+\t* 27_io/basic_ifstream/4.cc: New.\n+\t* 27_io/basic_ifstream/cons/char/1.cc: New.\n+\t* 27_io/basic_ifstream/open/char/1.cc: New.\n+\t* 27_io/basic_ifstream/rdbuf/char/2832.cc: New.\n+\t* 27_io/basic_ios/1.cc: New.\n+\t* 27_io/basic_ios/2.cc: New.\n+\t* 27_io/basic_ios/3.cc: New.\n+\t* 27_io/basic_ios/4.cc: New.\n+\t* 27_io/basic_ios/clear/char/1.cc: New.\n+\t* 27_io/basic_ios/cons/char/1.cc: New.\n+\t* 27_io/basic_ios/cons/char/2.cc: New.\n+\t* 27_io/basic_ios/cons/char/3.cc: New.\n+\t* 27_io/basic_ios/copyfmt/char/1.cc: New.\n+\t* 27_io/basic_ios/copyfmt/char/2.cc: New.\n+\t* 27_io/basic_ios/exceptions/char/1.cc: New.\n+\t* 27_io/basic_ios/locales/char/1.cc: New.\n+\t* 27_io/basic_iostream/1.cc: New.\n+\t* 27_io/basic_iostream/2.cc: New.\n+\t* 27_io/basic_iostream/3.cc: New.\n+\t* 27_io/basic_iostream/4.cc: New.\n+\t* 27_io/basic_istream/1.cc: New.\n+\t* 27_io/basic_istream/2.cc: New.\n+\t* 27_io/basic_istream/3.cc: New.\n+\t* 27_io/basic_istream/4.cc: New.\n+\t* 27_io/basic_istream/exceptions/char/9561.cc: New.\n+\t* 27_io/basic_istream/extractors_arithmetic/char/01.cc: New.\n+\t* 27_io/basic_istream/extractors_arithmetic/char/02.cc: New.\n+\t* 27_io/basic_istream/extractors_arithmetic/char/03.cc: New.\n+\t* 27_io/basic_istream/extractors_arithmetic/char/06.cc: New.\n+\t* 27_io/basic_istream/extractors_arithmetic/char/07.cc: New.\n+\t* 27_io/basic_istream/extractors_arithmetic/char/08.cc: New.\n+\t* 27_io/basic_istream/extractors_arithmetic/char/09.cc: New.\n+\t* 27_io/basic_istream/extractors_arithmetic/char/10.cc: New.\n+\t* 27_io/basic_istream/extractors_arithmetic/char/11.cc: New.\n+\t* 27_io/basic_istream/extractors_arithmetic/char/12.cc: New.\n+\t* 27_io/basic_istream/extractors_arithmetic/char/13.cc: New.\n+\t* 27_io/basic_istream/extractors_character/char/1.cc: New.\n+\t* 27_io/basic_istream/extractors_character/char/2.cc: New.\n+\t* 27_io/basic_istream/extractors_character/char/3.cc: New.\n+\t* 27_io/basic_istream/extractors_character/char/9826.cc: New.\n+\t* 27_io/basic_istream/extractors_other/char/1.cc: New.\n+\t* 27_io/basic_istream/extractors_other/char/2.cc: New.\n+\t* 27_io/basic_istream/extractors_other/char/3.cc: New.\n+\t* 27_io/basic_istream/extractors_other/char/9318-in.cc: New.\n+\t* 27_io/basic_istream/extractors_other/char/9424-in.cc: New.\n+\t* 27_io/basic_istream/get/char/1.cc: New.\n+\t* 27_io/basic_istream/get/char/2.cc: New.\n+\t* 27_io/basic_istream/getline/char/1.cc: New.\n+\t* 27_io/basic_istream/getline/char/2.cc: New.\n+\t* 27_io/basic_istream/getline/char/3.cc: New.\n+\t* 27_io/basic_istream/ignore/char/1.cc: New.\n+\t* 27_io/basic_istream/ignore/char/6360.cc: New.\n+\t* 27_io/basic_istream/ignore/char/7220.cc: New.\n+\t* 27_io/basic_istream/peek/char/1.cc: New.\n+\t* 27_io/basic_istream/peek/char/6414.cc: New.\n+\t* 27_io/basic_istream/putback/char/1.cc: New.\n+\t* 27_io/basic_istream/read/char/1.cc: New.\n+\t* 27_io/basic_istream/read/char/2.cc: New.\n+\t* 27_io/basic_istream/read/char/3.cc: New.\n+\t* 27_io/basic_istream/readsome/char/6746-1.cc: New.\n+\t* 27_io/basic_istream/readsome/char/6746-2.cc: New.\n+\t* 27_io/basic_istream/readsome/char/8258.cc: New.\n+\t* 27_io/basic_istream/seekg/char/2346-fstream.cc: New.\n+\t* 27_io/basic_istream/seekg/char/2346-sstream.cc: New.\n+\t* 27_io/basic_istream/seekg/char/8348-1.cc: New.\n+\t* 27_io/basic_istream/seekg/char/8348-2.cc: New.\n+\t* 27_io/basic_istream/seekg/char/fstream.cc: New.\n+\t* 27_io/basic_istream/seekg/char/sstream.cc: New.\n+\t* 27_io/basic_istream/sentry/char/1.cc: New.\n+\t* 27_io/basic_istream/sentry/char/2.cc: New.\n+\t* 27_io/basic_istream/sentry/char/3.cc: New.\n+\t* 27_io/basic_istream/sentry/char/3983-fstream.cc: New.\n+\t* 27_io/basic_istream/sentry/char/3983-sstream.cc: New.\n+\t* 27_io/basic_istream/tellg/char/1.cc: New.\n+\t* 27_io/basic_istream/tellg/char/8348.cc: New.\n+\t* 27_io/basic_istream/tellg/char/fstream.cc: New.\n+\t* 27_io/basic_istream/tellg/char/sstream.cc: New.\n+\t* 27_io/basic_istream/ws/char/1.cc: New.\n+\t* 27_io/basic_istringstream/1.cc: New.\n+\t* 27_io/basic_istringstream/2.cc: New.\n+\t* 27_io/basic_istringstream/3.cc: New.\n+\t* 27_io/basic_istringstream/4.cc: New.\n+\t* 27_io/basic_istringstream/rdbuf/char/2832.cc: New.\n+\t* 27_io/basic_istringstream/str/char/1.cc: New.\n+\t* 27_io/basic_ofstream/1.cc: New.\n+\t* 27_io/basic_ofstream/2.cc: New.\n+\t* 27_io/basic_ofstream/3.cc: New.\n+\t* 27_io/basic_ofstream/4.cc: New.\n+\t* 27_io/basic_ofstream/cons/char/2.cc: New.\n+\t* 27_io/basic_ofstream/open/char/1.cc: New.\n+\t* 27_io/basic_ofstream/rdbuf/char/2832.cc: New.\n+\t* 27_io/basic_ostream/1.cc: New.\n+\t* 27_io/basic_ostream/2.cc: New.\n+\t* 27_io/basic_ostream/3.cc: New.\n+\t* 27_io/basic_ostream/4.cc: New.\n+\t* 27_io/basic_ostream/cons/char/9827.cc: New.\n+\t* 27_io/basic_ostream/endl/char/1.cc: New.\n+\t* 27_io/basic_ostream/ends/char/1.cc: New.\n+\t* 27_io/basic_ostream/ends/char/2.cc: New.\n+\t* 27_io/basic_ostream/exceptions/char/9561.cc: New.\n+\t* 27_io/basic_ostream/flush/char/1.cc: New.\n+\t* 27_io/basic_ostream/inserters_arithmetic/char/1.cc: New.\n+\t* 27_io/basic_ostream/inserters_arithmetic/char/2.cc: New.\n+\t* 27_io/basic_ostream/inserters_arithmetic/char/3.cc: New.\n+\t* 27_io/basic_ostream/inserters_arithmetic/char/4.cc: New.\n+\t* 27_io/basic_ostream/inserters_arithmetic/char/4402.cc: New.\n+\t* 27_io/basic_ostream/inserters_arithmetic/char/5.cc: New.\n+\t* 27_io/basic_ostream/inserters_arithmetic/char/6.cc: New.\n+\t* 27_io/basic_ostream/inserters_arithmetic/wchar_t/1.cc: New.\n+\t* 27_io/basic_ostream/inserters_character/char/1.cc: New.\n+\t* 27_io/basic_ostream/inserters_character/char/2.cc: New.\n+\t* 27_io/basic_ostream/inserters_character/char/3.cc: New.\n+\t* 27_io/basic_ostream/inserters_character/char/4.cc: New.\n+\t* 27_io/basic_ostream/inserters_character/char/5.cc: New.\n+\t* 27_io/basic_ostream/inserters_character/char/6.cc: New.\n+\t* 27_io/basic_ostream/inserters_character/char/8.cc: New.\n+\t* 27_io/basic_ostream/inserters_character/wchar_t/7.cc: New.\n+\t* 27_io/basic_ostream/inserters_character/wchar_t/8.cc: New.\n+\t* 27_io/basic_ostream/inserters_other/char/1.cc: New.\n+\t* 27_io/basic_ostream/inserters_other/char/2.cc: New.\n+\t* 27_io/basic_ostream/inserters_other/char/3.cc: New.\n+\t* 27_io/basic_ostream/inserters_other/char/4.cc: New.\n+\t* 27_io/basic_ostream/inserters_other/char/9318-out.cc: New.\n+\t* 27_io/basic_ostream/inserters_other/char/9424-out.cc: New.\n+\t* 27_io/basic_ostream/sentry/char/1.cc: New.\n+\t* 27_io/basic_ostream/sentry/char/2.cc: New.\n+\t* 27_io/basic_ostream/sentry/char/3983-fstream.cc: New.\n+\t* 27_io/basic_ostream/sentry/char/3983-sstream.cc: New.\n+\t* 27_io/basic_ostream/tellp/char/1.cc: New.\n+\t* 27_io/basic_ostream/tellp/char/2.cc: New.\n+\t* 27_io/basic_ostringstream/1.cc: New.\n+\t* 27_io/basic_ostringstream/2.cc: New.\n+\t* 27_io/basic_ostringstream/3.cc: New.\n+\t* 27_io/basic_ostringstream/4.cc: New.\n+\t* 27_io/basic_ostringstream/cons/char/3.cc: New.\n+\t* 27_io/basic_ostringstream/rdbuf/char/2832.cc: New.\n+\t* 27_io/basic_ostringstream/str/char/1.cc: New.\n+\t* 27_io/basic_ostringstream/str/char/2.cc: New.\n+\t* 27_io/basic_streambuf/1.cc: New.\n+\t* 27_io/basic_streambuf/2.cc: New.\n+\t* 27_io/basic_streambuf/3.cc: New.\n+\t* 27_io/basic_streambuf/cons/char/1.cc: New.\n+\t* 27_io/basic_streambuf/imbue/char/1.cc: New.\n+\t* 27_io/basic_streambuf/imbue/char/9322.cc: New.\n+\t* 27_io/basic_streambuf/overflow/char/1.cc: New.\n+\t* 27_io/basic_streambuf/overflow/char/2.cc: New.\n+\t* 27_io/basic_streambuf/overflow/char/3599.cc: New.\n+\t* 27_io/basic_streambuf/sgetc/char/1.cc: New.\n+\t* 27_io/basic_streambuf/sgetn/char/1.cc: New.\n+\t* 27_io/basic_streambuf/sputbackc/char/9538.cc: New.\n+\t* 27_io/basic_streambuf/sputc/char/1057.cc: New.\n+\t* 27_io/basic_streambuf/sputn/char/1.cc: New.\n+\t* 27_io/basic_streambuf/sputn/char/1057.cc: New.\n+\t* 27_io/basic_streambuf/sync/char/1057.cc: New.\n+\t* 27_io/basic_stringbuf/1.cc: New.\n+\t* 27_io/basic_stringbuf/2.cc: New.\n+\t* 27_io/basic_stringbuf/3.cc: New.\n+\t* 27_io/basic_stringbuf/4.cc: New.\n+\t* 27_io/basic_stringbuf/5.cc: New.\n+\t* 27_io/basic_stringbuf/imbue/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/imbue/char/9322.cc: New.\n+\t* 27_io/basic_stringbuf/in_avail/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/overflow/char/2.cc: New.\n+\t* 27_io/basic_stringbuf/overflow/char/3599.cc: New.\n+\t* 27_io/basic_stringbuf/overflow/char/9988.cc: New.\n+\t* 27_io/basic_stringbuf/sbumpc/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/sbumpc/char/9825.cc: New.\n+\t* 27_io/basic_stringbuf/seekoff/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/seekoff/char/2.cc: New.\n+\t* 27_io/basic_stringbuf/seekpos/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/seekpos/char/2.cc: New.\n+\t* 27_io/basic_stringbuf/setbuf/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/setbuf/char/2.cc: New.\n+\t* 27_io/basic_stringbuf/setbuf/char/3.cc: New.\n+\t* 27_io/basic_stringbuf/sgetc/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/sgetn/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/snextc/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/sputbackc/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/sputbackc/char/9425.cc: New.\n+\t* 27_io/basic_stringbuf/sputc/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/sputc/char/1057.cc: New.\n+\t* 27_io/basic_stringbuf/sputc/char/9404-1.cc: New.\n+\t* 27_io/basic_stringbuf/sputn/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/sputn/char/1057.cc: New.\n+\t* 27_io/basic_stringbuf/sputn/char/9404-2.cc: New.\n+\t* 27_io/basic_stringbuf/str/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/str/char/2.cc: New.\n+\t* 27_io/basic_stringbuf/str/char/3.cc: New.\n+\t* 27_io/basic_stringbuf/str/char/3955.cc: New.\n+\t* 27_io/basic_stringbuf/sungetc/char/1.cc: New.\n+\t* 27_io/basic_stringbuf/sync/char/1057.cc: New.\n+\t* 27_io/basic_stringstream/1.cc: New.\n+\t* 27_io/basic_stringstream/2.cc: New.\n+\t* 27_io/basic_stringstream/3.cc: New.\n+\t* 27_io/basic_stringstream/4.cc: New.\n+\t* 27_io/basic_stringstream/rdbuf/char/2832.cc: New.\n+\t* 27_io/basic_stringstream/str/char/1.cc: New.\n+\t* 27_io/basic_stringstream/str/char/2.cc: New.\n+\t* 27_io/basic_stringstream/str/char/3.cc: New.\n+\t* 27_io/basic_stringstream/str/char/4.cc: New.\n+\t* 27_io/fpos/1.cc: New.\n+\t* 27_io/fpos/2.cc: New.\n+\t* 27_io/fpos/3.cc: New.\n+\t* 27_io/ios_base/callbacks/1.cc: New.\n+\t* 27_io/ios_base/state/1.cc: New.\n+\t* 27_io/ios_base/storage/1.cc: New.\n+\t* 27_io/ios_base/storage/2.cc: New.\n+\t* 27_io/ios_base/storage/3.cc: New.\n+\t* 27_io/ios_base/sync_with_stdio/1.cc: New.\n+\t* 27_io/ios_base/sync_with_stdio/2.cc: New.\n+\t* 27_io/manipulators/adjustfield/char/1.cc: New.\n+\t* 27_io/manipulators/adjustfield/char/2.cc: New.\n+\t* 27_io/manipulators/basefield/char/1.cc: New.\n+\t* 27_io/manipulators/standard/char/1.cc: New.\n+\t* 27_io/manipulators/standard/char/2.cc: New.\n+\t* 27_io/objects/char/1.cc: New.\n+\t* 27_io/objects/char/2.cc: New.\n+\t* 27_io/objects/char/2523-1_xin.cc: New.\n+\t* 27_io/objects/char/2523-1_xin.in: New.\n+\t* 27_io/objects/char/2523-2_xin.cc: New.\n+\t* 27_io/objects/char/2523-2_xin.in: New.\n+\t* 27_io/objects/char/3045.cc: New.\n+\t* 27_io/objects/char/3647.cc: New.\n+\t* 27_io/objects/char/3_xin.cc: New.\n+\t* 27_io/objects/char/3_xin.in: New.\n+\t* 27_io/objects/char/4_xin.cc: New.\n+\t* 27_io/objects/char/4_xin.in: New.\n+\t* 27_io/objects/char/5268.cc: New.\n+\t* 27_io/objects/char/5280_xin.cc: New.\n+\t* 27_io/objects/char/5280_xin.in: New.\n+\t* 27_io/objects/char/6548_xin.cc: New.\n+\t* 27_io/objects/char/6548_xin.in: New.\n+\t* 27_io/objects/char/6648-1_xin.cc: New.\n+\t* 27_io/objects/char/6648-1_xin.in: New.\n+\t* 27_io/objects/char/6648-2_xin.cc: New.\n+\t* 27_io/objects/char/6648-2_xin.in: New.\n+\t* 27_io/objects/char/7744_xin.cc: New.\n+\t* 27_io/objects/char/7744_xin.in: New.\n+\t* 27_io/objects/wchar_t/1.cc: New.\n+\t* 27_io/types/1.cc: New.\n+\t* 27_io/types/2.cc: New.\n+\t* data/filebuf_members-1.tst: New.\n+\t* data/filebuf_members-1.txt: New.\n+\t* data/filebuf_virtuals-1.tst: New.\n+\t* data/filebuf_virtuals-1.txt: New.\n+\t* data/filebuf_virtuals-2.tst: New.\n+\t* data/filebuf_virtuals-3.tst: New.\n+\t* data/ifstream_members-1.tst: New.\n+\t* data/ifstream_members-1.txt: New.\n+\t* data/ios_base_members_static-1.tst: New.\n+\t* data/istream_extractor_other-1.tst: New.\n+\t* data/istream_extractor_other-1.txt: New.\n+\t* data/istream_extractor_other-2.tst: New.\n+\t* data/istream_seeks-1.tst: New.\n+\t* data/istream_seeks-1.txt: New.\n+\t* data/istream_seeks-2.tst: New.\n+\t* data/istream_seeks-3.tst: New.\n+\t* data/istream_unformatted-1.tst: New.\n+\t* data/istream_unformatted-1.txt: New.\n+\t* data/ofstream_members-1.tst: New.\n+\t* data/ostream_inserter_char-1.tst: New.\n+\t* data/ostream_inserter_char-1.txt: New.\n+\t* data/ostream_inserter_other-1.tst: New.\n+\t* data/ostream_inserter_other-2.tst: New.\n+\t* data/ostream_seeks-1.tst: New.\n+\n+2003-04-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/sstream.tcc (basic_stringbuf::seekpos): Remove\n+\trequirement that __mode must be strict input or output.\n+\n+\t* include/std/std_streambuf.h (basic_streambuf::setp): Set\n+\t_M_out_lim.\n+\t\n+\t* include/std/std_sstream.h (basic_strinbuf::str): Zero length\n+\toutput string shouldn't core.\n+\t(basic_stringbuf::_M_really_sync): Add base argument. Remove rturn\n+\ttype.\n+\t* include/bits/sstream.tcc: Adjust _M_really_sync bits here.\n+\t\n+\t* include/bits/istream.tcc (basic_istream::putback): Set gcount to\n+\tzero.\n+\n+2003-04-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/data: New directory.\n+\t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init): Modify\n+\tto copy files from the testsuite data directory.\t\n+\t(libstdc++-v3-list-sourcefiles): Add another test list filter, for\n+\ttestfiles containing _xin, which now means this is an interactive\n+\ttest and should be run with the interactive dejagnu hooks.\n+\t* testsuite/Makefile.am: Remove testsuite_* files.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t\n 2003-04-09  Zack Weinberg  <zack@codesourcery.com>\n \n \t* docs/html/install.html: Document complete list of locales"}, {"sha": "89a84f59f7f10230a613fe9ee72f5581f4829efa", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -841,6 +841,7 @@ namespace std\n     basic_istream<_CharT, _Traits>::\n     putback(char_type __c)\n     {\n+      _M_gcount = 0;\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{"}, {"sha": "d41b3cfeb9732dddb9a137042b2333acfcd2f600", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -83,29 +83,30 @@ namespace std\n       bool __testout = this->_M_mode & ios_base::out;\n       if (__builtin_expect(!__testout, false))\n \treturn traits_type::eof();\n+\n       bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());\n       if (__builtin_expect(__testeof, false))\n \treturn traits_type::not_eof(__c);\n \n       // In virtue of DR 169 (TC) we are allowed to grow more than\n       // one char the first time and also...\n-      __size_type __len =\n-\tstd::max(__size_type(_M_string.capacity() + 1), this->_M_buf_size_opt);\n-\n-      bool __testwrite = this->_M_out_cur < this->_M_out_end;\n-      if (__builtin_expect(!__testwrite && __len > _M_string.max_size(), false))\n+      __size_type __len = std::max(__size_type(_M_string.capacity() + 1), \n+\t\t\t\t   this->_M_buf_size_opt);\n+      bool __testput = this->_M_out_cur < this->_M_out_end;\n+      if (__builtin_expect(!__testput && __len > _M_string.max_size(), false))\n \treturn traits_type::eof();\n \n       // Try to append __c into output sequence in one of two ways.\n       // Order these tests done in is unspecified by the standard.\n-      if (!__testwrite)\n+      if (!__testput)\n \t{\n \t  // Force-allocate, re-sync.\n \t  _M_string = this->str();\n-\t  // ... the next times. That's easy to implement thanks to the\n+\t  // ... the next time. That's easy to implement thanks to the\n \t  // exponential growth policy builtin into basic_string.\n \t  _M_string.reserve(__len);\n-\t  _M_really_sync(this->_M_in_cur - this->_M_in_beg, \n+\t  _M_really_sync(const_cast<char_type*>(_M_string.data()),\n+\t\t\t this->_M_in_cur - this->_M_in_beg, \n \t\t\t this->_M_out_cur - this->_M_out_beg);\n \t}\n       return this->sputc(traits_type::to_char_type(__c));\n@@ -187,21 +188,18 @@ namespace std\n \t  char_type* __end = NULL;\n \t  bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;\n \t  bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n-\t  bool __testboth = __testin && __testout;\n-\t  __testin &= !(__mode & ios_base::out);\n-\t  __testout &= !(__mode & ios_base::in);\n \t  \n \t  // NB: Ordered.\n \t  bool __testposi = false;\n \t  bool __testposo = false;\n-\t  if (__testin || __testboth)\n+\t  if (__testin)\n \t    {\n \t      __beg = this->eback();\n \t      __end = this->egptr();\n \t      if (0 <= __pos && __pos <= __end - __beg)\n \t\t__testposi = true;\n \t    }\n-\t  if (__testout || __testboth)\n+\t  if (__testout)\n \t    {\n \t      __beg = this->pbase();\n \t      __end = this->epptr();"}, {"sha": "53d28ac415bd0ab53dd73ed2a5a629e0b6009b55", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -394,9 +394,7 @@ namespace std\n       */\n       void\n       _M_set_indeterminate(void)\n-      {\n-\t_M_set_determinate(off_type(0));\n-      }\n+      { _M_set_determinate(off_type(0)); }\n \n       /**\n        *  @if maint"}, {"sha": "96fc6f009fa736e82c35e6c04f6517fc0004f458", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -133,20 +133,23 @@ namespace std\n       __string_type\n       str() const\n       {\n+\t__string_type __ret = _M_string;\n \tif (this->_M_mode & ios_base::out)\n \t  {\n \t    // This is the deal: _M_string.size() is a value that\n-\t    // represents the size of the initial string that makes\n-\t    // _M_string, and may not be the correct size of the\n-\t    // current stringbuf internal buffer.\n+\t    // represents the size of the initial string used to\n+\t    // created the buffer, and may not be the correct size of\n+\t    // the current stringbuf internal buffer.\n \t    __size_type __len = _M_string.size();\n-\t    if (this->_M_out_lim > this->_M_out_beg)\n-\t      __len = std::max(__size_type(this->_M_out_lim \n-\t\t\t\t\t   - this->_M_out_beg), __len);\n-\t    return __string_type(this->_M_out_beg, this->_M_out_beg + __len);\n+\t    __size_type __nlen = this->_M_out_lim - this->_M_out_beg;\n+\t    if (__nlen)\n+\t      {\n+\t\t__len = std::max(__nlen, __len);\n+\t\t__ret = __string_type(this->_M_out_beg, \n+\t\t\t\t      this->_M_out_beg + __len);\n+\t      }\n \t  }\n-\telse\n-\t  return _M_string;\n+\treturn __ret;\n       }\n \n       /**\n@@ -180,10 +183,11 @@ namespace std\n \t// suit particular needs.\n \tthis->_M_buf_size_opt = 512;\n \tthis->_M_mode = __mode;\n+\t\n+\t__size_type __len = 0;\n \tif (this->_M_mode & (ios_base::ate | ios_base::app))\n-\t  _M_really_sync(0, _M_string.size());\n-\telse\n-\t  _M_really_sync(0, 0);\n+\t  __len = _M_string.size();\n+\t_M_really_sync(const_cast<char_type*>(_M_string.data()), 0, __len);\n       }\n \n       // Overridden virtual functions:\n@@ -221,8 +225,18 @@ namespace std\n       {\n \tif (__s && __n)\n \t  {\n+\t    // This is implementation-defined behavior, and assumes\n+\t    // that an external char_type array of length (__s + __n)\n+\t    // exists and has been pre-allocated. If this is not the\n+\t    // case, things will quickly blow up.\n+\t    \n+\t    // Step 1: Destroy the current internal array.\n \t    _M_string = __string_type(__s, __n);\n-\t    _M_really_sync(0, 0);\n+\t    \n+\t    // Step 2: Use the external array.\n+\t    this->_M_buf = __s;\n+\t    this->_M_buf_size_opt = this->_M_buf_size = __n;\n+\t    _M_really_sync(__s, 0, 0);\n \t  }\n \treturn this;\n       }\n@@ -248,10 +262,9 @@ namespace std\n        *  @doctodo\n        *  @endif\n       */\n-      virtual int\n-      _M_really_sync(__size_type __i, __size_type __o)\n+      virtual void\n+      _M_really_sync(char_type* __base, __size_type __i, __size_type __o)\n       {\n-\tchar_type* __base = const_cast<char_type*>(_M_string.data());\n \tbool __testin = this->_M_mode & ios_base::in;\n \tbool __testout = this->_M_mode & ios_base::out;\n \t__size_type __len = _M_string.size();\n@@ -266,7 +279,6 @@ namespace std\n \t    this->_M_out_lim = __base + __len;\n \t    this->_M_out_cur += __o;\n \t  }\n-\treturn 0;\n       }\n     };\n "}, {"sha": "81fe656c0d403c5df1f64a70ee5170ad3c940bb3", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -210,7 +210,7 @@ namespace std\n       char_type* \t\t_M_out_cur;    // Current put area. \n       char_type* \t\t_M_out_end;    // End of put area.\n \n-      char_type*                _M_out_lim;    // Right limit of used put area.\n+      char_type*                _M_out_lim;    // End limit of used put area.\n \n       //@}\n \n@@ -651,7 +651,7 @@ namespace std\n       setp(char_type* __pbeg, char_type* __pend)\n       { \n \t_M_out_beg = _M_out_cur = __pbeg; \n-\t_M_out_end = __pend;\n+\t_M_out_end = _M_out_lim = __pend;\n \tif (!(_M_mode & ios_base::out) && __pbeg && __pend)\n \t  _M_mode = _M_mode | ios_base::out;\n       }"}, {"sha": "f0267286ae9e76edbfb761aa556158afe5f10824", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/1.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,50 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <fstream>\n+\n+// { dg-do compile }\n+\n+// libstdc++/7216\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::filebuf test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::traits_type traits_type;\n+  typedef test_type::int_type int_type;\n+  typedef test_type::pos_type pos_type;\n+  typedef test_type::off_type off_type;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "af92af0ff11fb28ea2827e12ffb79f47c0d3564d", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/2.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,51 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// test05\n+// libstdc++/1886\n+// should be able to instantiate basic_filebuf for non-standard types.\n+namespace test \n+{\n+  using namespace std;\n+  using __gnu_cxx_test::pod_char;\n+  typedef short type_t;\n+  template class basic_filebuf<type_t, char_traits<type_t> >;\n+  template class basic_filebuf<pod_char, char_traits<pod_char> >;\n+} // test\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "a67d596189729d617f880400feb3a8a738bf937f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/3.cc", "status": "renamed", "additions": 64, "deletions": 40, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -25,36 +25,8 @@\n #include <fstream>\n #include <testsuite_hooks.h>\n \n-// { dg-do compile }\n-\n-// libstdc++/7216\n-void test01()\n-{\n-  // Check for required typedefs\n-  typedef std::filebuf test_type;\n-  typedef test_type::char_type char_type;\n-  typedef test_type::traits_type traits_type;\n-  typedef test_type::int_type int_type;\n-  typedef test_type::pos_type pos_type;\n-  typedef test_type::off_type off_type;\n-}\n-\n-// test05\n-// libstdc++/1886\n-// should be able to instantiate basic_filebuf for non-standard types.\n-namespace test \n-{\n-  using namespace std;\n-  using __gnu_cxx_test::pod_char;\n-  typedef short type_t;\n-  template class basic_filebuf<type_t, char_traits<type_t> >;\n-  template class basic_filebuf<pod_char, char_traits<pod_char> >;\n-} // test\n-\n-\n-// test07\n // libstdc++/2020\n-// should be able to use custom char_type\n+// should be able to use custom char_type, custom traits type\n class gnu_char_type\n {\n   unsigned long character;\n@@ -79,10 +51,72 @@ class gnu_char_type\n   operator unsigned long() const { return character; }\n };\n \n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n void test07()\n {\n   bool test = true;\n-  typedef std::basic_filebuf<gnu_char_type> gnu_filebuf;\n+  typedef std::basic_filebuf<gnu_char_type, gnu_char_traits> gnu_filebuf;\n   \n   try\n     { gnu_filebuf obj; }\n@@ -102,20 +136,10 @@ template\n \n int main() \n {\n-  test01();\n   test07();\n   return 0;\n }\n \n \n \n // more surf!!!\n-\n-\n-\n-\n-\n-\n-\n-\n-", "previous_filename": "libstdc++-v3/testsuite/27_io/filebuf.cc"}, {"sha": "9516cb2eccba02ecd91273a5cda98c5e045bba4a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/4.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,49 @@\n+// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+\n+#include <fstream>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::filebuf test_type;\n+  typedef std::streambuf base_type;\n+  const test_type& obj = test_type();\n+  const base_type* base = &obj;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "5b2f484a0f9777d4d3b11256ff4b2ef2804a2514", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/1.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,86 @@\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+// various tests for filebuf::open() and filebuf::close() including\n+// the non-portable functionality in the libstdc++-v3 IO library\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_01[] = \"filebuf_members-1.tst\";\n+const char name_02[] = \"filebuf_members-1.txt\";\n+\n+// Test member functions.\n+void test_01() \n+{\n+  bool \t\t\ttest = true;\n+  const char* name_03 = \"filebuf_members-3\"; // empty file, need to create\n+\n+  std::filebuf fb_01; // in \n+  std::filebuf fb_02; // out\n+  std::filebuf fb_03; // in | out\n+\n+  // bool is_open()\n+  VERIFY( !fb_01.is_open() );\n+  VERIFY( !fb_02.is_open() );\n+  VERIFY( !fb_03.is_open() );\n+\n+  // filebuf_type* open(const char* __s, ios_base::openmode __mode)\n+  fb_01.open(name_01, std::ios_base::in | std::ios_base::ate);\n+  VERIFY( fb_01.is_open() );\n+\n+  // Try to open two different files without closing the first:\n+  // Should keep the old file attached, and disregard attempt to overthrow.\n+  fb_02.open(name_02, std::ios_base::in | std::ios_base::out \n+\t     | std::ios_base::trunc);\n+  VERIFY( fb_02.is_open() );\n+\n+  fb_03.open(name_03, std::ios_base::out | std::ios_base::trunc);\n+  VERIFY( fb_03.is_open() );\n+\n+  // filebuf_type* close()\n+  std::filebuf* f;\n+  f = fb_01.close();\n+  VERIFY( f != NULL );\n+  VERIFY( !fb_01.is_open() );\n+\n+  f = fb_02.close();\n+  VERIFY( f != NULL );\n+  VERIFY( !fb_02.is_open() );\n+\n+  f = fb_03.close();\n+  VERIFY( f != NULL );\n+  VERIFY( !fb_03.is_open() );\n+\n+  f = fb_03.close();\n+  VERIFY( f == NULL );\n+  VERIFY( !fb_03.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test_01();\n+  return 0;\n+}\n+\n+"}, {"sha": "b0ebd5817c677fbb3f332e2be3cd1acaa890e87c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/2.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+// various tests for filebuf::open() and filebuf::close() including\n+// the non-portable functionality in the libstdc++-v3 IO library\n+\n+#include <fstream>\n+#include <ext/stdio_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+// Verify that std::filebuf doesn't close files that it didn't open\n+// when using the following std::filebuf ctor:\n+//\n+//      std::filebuf(__c_file_type*  __f,\n+//                   ios_base::openmode __mode,\n+//                   int_type  __s);\n+//\n+// Thanks to \"George T. Talbot\" <george@moberg.com> for uncovering\n+// this bug/situation. \n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n+\n+void test_02()\n+{\n+  bool test = true;\n+  int close_num;\n+\n+  // read (ext)\n+  FILE* f2 = fopen(name_01, \"r\");\n+  VERIFY( f2 != NULL );\n+  if (f2)\n+  {\n+    __gnu_cxx::stdio_filebuf<char> fb(f2, std::ios_base::in, 512);\n+    close_num = fclose(f2);\n+  }\n+  VERIFY( close_num == 0 );\n+\n+  // read (standard)\n+  FILE* f = fopen(name_01, \"r\");\n+  VERIFY( f != NULL );\n+  if (f)\n+  {\n+    std::ifstream ifstream1(name_01);\n+    VERIFY( ifstream1.is_open() );\n+    std::ios_base::iostate st01 = ifstream1.rdstate();\n+    VERIFY( st01 == std::ios_base::goodbit );\n+    close_num = fclose(f);\n+  }\n+  VERIFY( close_num == 0 );\n+}\n+\n+int\n+main()\n+{\n+  test_02();\n+  return 0;\n+}\n+\n+"}, {"sha": "d7c1286f0ff40fa95b67f690e168010e76b0a707", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/3.cc", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,106 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+// NB: This test assumes that _M_buf_size == 40, and not the usual\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n+// simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n+const char carray_01[] = \"santa cruz or sandiego?\";\n+const char carray_02[] = \"memphis, new orleans, and savanah\";\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n+const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n+const char name_04[] = \"filebuf_virtuals-4.txt\"; // empty file, need to create\n+const char name_05[] = \"filebuf_virtuals-5.txt\"; // empty file, need to create\n+const char name_06[] = \"filebuf_virtuals-6.txt\"; // empty file, need to create\n+const char name_07[] = \"filebuf_virtuals-7.txt\"; // empty file, need to create\n+const char name_08[] = \"filebuf_virtuals-8.txt\"; // empty file, need to create\n+\n+class derived_filebuf: public std::filebuf\n+{\n+ public:\n+  void\n+  set_size(int_type __size) { _M_buf_size_opt = __size; }\n+};\n+\n+derived_filebuf fb_01; // in \n+derived_filebuf fb_02; // out\n+derived_filebuf fb_03; // in | out\n+\n+// Initialize filebufs to be the same size regardless of platform.\n+void test03()\n+{\n+  fb_01.set_size(buffer_size);\n+  fb_02.set_size(buffer_size);\n+  fb_03.set_size(buffer_size);\n+}\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef std::filebuf::traits_type \ttraits_type;\n+  typedef std::filebuf::pos_type \tpos_type;\n+  typedef std::filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  std::filebuf \t\t\t\tf_tmp;\n+  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\t\tstrmof_1, strmof_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+\n+  fb_01.open(name_01, std::ios_base::in);\n+  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n+  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc);\n+\n+  // NB Have to close these suckers. . .\n+  // filebuf_type* close()\n+  fb_01.close();\n+  fb_02.close();\n+  fb_03.close();\n+  VERIFY( !fb_01.is_open() );\n+  VERIFY( !fb_02.is_open() );\n+  VERIFY( !fb_03.is_open() );\n+}\n+\n+main() \n+{\n+  test03();\n+  test05();\n+  return 0;\n+}"}, {"sha": "b72be5ce0a9ccf3a1ca293090ee9470a132b08fb", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/4879.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F4879.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F4879.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F4879.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,97 @@\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+// various tests for filebuf::open() and filebuf::close() including\n+// the non-portable functionality in the libstdc++-v3 IO library\n+\n+#include <fstream>\n+#include <iostream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/2913, libstdc++/4879\n+// John Fardo  <jfardo@laurelnetworks.com>, Brad Garcia <garsh@attbi.com>\n+void\n+test_04()\n+{\n+  bool test = true;\n+  const char* name = \"tmp_fifo1\";\n+  signal(SIGPIPE, SIG_IGN);\n+  \n+  unlink(name);\n+  if (0 != mkfifo(name, S_IRWXU))\n+    {\n+      std::cerr << \"failed to create fifo\" << std::endl;\n+      exit(-1);\n+    }\n+  \n+  int fval = fork();\n+  if (fval == -1)\n+    {\n+      std::cerr << \"failed to fork\" << std::endl;\n+      unlink(name);\n+      exit(-1);\n+    }\n+  else if (fval == 0)\n+    {\n+      std::ifstream ifs(name);\n+      sleep(1);\n+      ifs.close();\n+      exit(0);\n+    }\n+\n+  std::ofstream ofs(name);\n+  sleep(2);\n+  ofs.put('t');\n+\n+  /*\n+   * ISO/IED 14882:1998(E) 27.8.1.10.4\n+   *\n+   * void close();\n+   *\n+   * Effects:  Calls rdbuf()->close() and, if that function fails\n+   * (returns a null pointer), calls setstate(failbit)...\n+   */\n+  ofs.close();\n+  if (!(ofs.rdstate() & std::ios::failbit))\n+    {\n+      test = false;\n+      VERIFY( test );\n+      unlink(name);\n+      exit(-1);\n+    }\n+\n+  unlink(name);\n+}\n+\n+int\n+main()\n+{\n+  test_04();\n+  return 0;\n+}\n+\n+"}, {"sha": "32c388dceb87f1cf3ddf4f2ce92893c7f18b7f3c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/9964.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+// various tests for filebuf::open() and filebuf::close() including\n+// the non-portable functionality in the libstdc++-v3 IO library\n+\n+#include <fstream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9964\n+void test_07()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  const char* name = \"tmp_fifo3\";\n+\n+  signal(SIGPIPE, SIG_IGN);\n+\n+  unlink(name);  \n+  mkfifo(name, S_IRWXU);\n+  \n+  int child = fork();\n+  VERIFY( child != -1 );\n+\n+  if (child == 0)\n+    {\n+      filebuf fbin;\n+      fbin.open(name, ios_base::in);\n+      sleep(1);\n+      fbin.close();\n+      exit(0);\n+    }\n+  \n+  filebuf fb;\n+  filebuf* ret = fb.open(name, ios_base::out | ios_base::trunc);\n+  VERIFY( ret != NULL );\n+  VERIFY( fb.is_open() );\n+\n+  sleep(2);\n+  fb.sputc('a');\n+\n+  ret = fb.close();\n+  VERIFY( ret == NULL );\n+  VERIFY( !fb.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test_07();\n+  return 0;\n+}"}, {"sha": "7893e93ce1a6bf419e312714838f9f2a6674fc30", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/char/1.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,45 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+std::filebuf fbuf;\n+\n+// test the filebuf locale settings\n+void test02() \n+{\n+  std::locale loc_c = std::locale::classic();\n+  loc_c = fbuf.getloc();\n+  fbuf.pubimbue(loc_c); //This should initialize _M_init to true\n+  std::locale loc_tmp = fbuf.getloc(); \n+  VERIFY( loc_tmp == loc_c );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "e584f461bb703491a3027ed0def24daa386df096", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/char/9322.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F9322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F9322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F9322.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,53 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9322\n+void test07()\n+{\n+  using std::locale;\n+  bool test = true;\n+\n+  locale loc;\n+  std::filebuf ob;\n+  VERIFY( ob.getloc() == loc );\n+\n+  locale::global(locale(\"en_US\"));\n+  VERIFY( ob.getloc() == loc );\n+\n+  locale loc_de (\"de_DE\");\n+  locale ret = ob.pubimbue(loc_de);\n+  VERIFY( ob.getloc() == loc_de );\n+  VERIFY( ret == loc );\n+\n+  locale::global(loc);\n+  VERIFY( ob.getloc() == loc_de );\n+}\n+\n+main() \n+{\n+  __gnu_cxx_test::run_test_wrapped_generic_locale_exception_catcher(test07);\n+  return 0;\n+}"}, {"sha": "eca4951004f475328cdb3e283346d51da551dd86", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/in_avail/char/1.cc", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fin_avail%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fin_avail%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fin_avail%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,114 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+// NB: This test assumes that _M_buf_size == 40, and not the usual\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n+// simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n+const char carray_01[] = \"santa cruz or sandiego?\";\n+const char carray_02[] = \"memphis, new orleans, and savanah\";\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n+const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n+const char name_04[] = \"filebuf_virtuals-4.txt\"; // empty file, need to create\n+const char name_05[] = \"filebuf_virtuals-5.txt\"; // empty file, need to create\n+const char name_06[] = \"filebuf_virtuals-6.txt\"; // empty file, need to create\n+const char name_07[] = \"filebuf_virtuals-7.txt\"; // empty file, need to create\n+const char name_08[] = \"filebuf_virtuals-8.txt\"; // empty file, need to create\n+\n+class derived_filebuf: public std::filebuf\n+{\n+ public:\n+  void\n+  set_size(int_type __size) { _M_buf_size_opt = __size; }\n+};\n+\n+derived_filebuf fb_01; // in \n+derived_filebuf fb_02; // out\n+derived_filebuf fb_03; // in | out\n+\n+// Initialize filebufs to be the same size regardless of platform.\n+void test03()\n+{\n+  fb_01.set_size(buffer_size);\n+  fb_02.set_size(buffer_size);\n+  fb_03.set_size(buffer_size);\n+}\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef std::filebuf::traits_type \ttraits_type;\n+  typedef std::filebuf::pos_type \tpos_type;\n+  typedef std::filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  std::filebuf \t\t\t\tf_tmp;\n+  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\t\tstrmof_1, strmof_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+\n+  // GET\n+  // int in_avail()\n+  // if a read position is available, return _M_in_end - _M_in_cur.\n+  // else return showmanyc.\n+  strmof_1 = fb_01.in_avail();\n+  strmof_2 = fb_02.in_avail();\n+  VERIFY( strmof_1 == -1 );\n+  VERIFY( strmof_1 == strmof_2 ); //fail because not open\n+  strmof_1 = fb_03.in_avail();\n+  VERIFY( strmof_1 == strmof_2 );\n+  fb_01.open(name_01, std::ios_base::in);\n+  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n+  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc); \n+  strmof_1 = fb_01.in_avail();\n+  strmof_2 = fb_02.in_avail();\n+  VERIFY( strmof_1 != strmof_2 );\n+  VERIFY( strmof_1 >= 0 );\n+  VERIFY( strmof_2 == -1 );  // empty file\n+  strmof_1 = fb_03.in_avail(); \n+  VERIFY( strmof_1  == 0 ); // empty file\n+}\n+\n+main() \n+{\n+  test03();\n+  test05();\n+  return 0;\n+}"}, {"sha": "4b4c022a1c28d8852535e95d4ad1384170f89905", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/is_open/char/1.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fis_open%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fis_open%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fis_open%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,72 @@\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+// various tests for filebuf::open() and filebuf::close() including\n+// the non-portable functionality in the libstdc++-v3 IO library\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_01[] = \"filebuf_members-1.tst\";\n+const char name_02[] = \"filebuf_members-1.txt\";\n+\n+// Test member functions.\n+void test_01() \n+{\n+  bool \t\t\ttest = true;\n+  const char* name_03 = \"filebuf_members-3\"; // empty file, need to create\n+\n+  std::filebuf fb_01; // in \n+  std::filebuf fb_02; // out\n+  std::filebuf fb_03; // in | out\n+\n+  // bool is_open()\n+  VERIFY( !fb_01.is_open() );\n+  VERIFY( !fb_02.is_open() );\n+  VERIFY( !fb_03.is_open() );\n+\n+  // filebuf_type* open(const char* __s, ios_base::openmode __mode)\n+  fb_01.open(name_01, std::ios_base::in | std::ios_base::ate);\n+  fb_02.open(name_02, std::ios_base::in | std::ios_base::out \n+\t     | std::ios_base::trunc);\n+  fb_03.open(name_03, std::ios_base::out | std::ios_base::trunc);\n+  VERIFY( fb_01.is_open() );\n+  VERIFY( fb_02.is_open() );\n+  VERIFY( fb_03.is_open() );\n+\n+  // filebuf_type* close()\n+  fb_01.close();\n+  fb_02.close();\n+  fb_03.close();\n+  VERIFY( !fb_01.is_open() );\n+  VERIFY( !fb_02.is_open() );\n+  VERIFY( !fb_03.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test_01();\n+  return 0;\n+}\n+\n+"}, {"sha": "424d4b63eb52cb9cc9a0cd4e7fc8cc484792faae", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/char/1.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+// various tests for filebuf::open() and filebuf::close() including\n+// the non-portable functionality in the libstdc++-v3 IO library\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_01[] = \"filebuf_members-1.tst\";\n+const char name_02[] = \"filebuf_members-1.txt\";\n+\n+// Test member functions.\n+void test_01() \n+{\n+  bool \t\t\ttest = true;\n+  const char* name_03 = \"filebuf_members-3\"; // empty file, need to create\n+\n+  std::filebuf fb_01; // in \n+  std::filebuf fb_02; // out\n+  std::filebuf fb_03; // in | out\n+\n+  // bool is_open()\n+  VERIFY( !fb_01.is_open() );\n+  VERIFY( !fb_02.is_open() );\n+  VERIFY( !fb_03.is_open() );\n+\n+  // filebuf_type* open(const char* __s, ios_base::openmode __mode)\n+  fb_01.open(name_01, std::ios_base::in | std::ios_base::ate);\n+  VERIFY( fb_01.is_open() );\n+\n+  // Try to open two different files without closing the first:\n+  // Should keep the old file attached, and disregard attempt to overthrow.\n+  std::filebuf* f = fb_02.open(name_02, std::ios_base::in | std::ios_base::out \n+\t\t\t       | std::ios_base::trunc);\n+  VERIFY( f != NULL );\n+  VERIFY( fb_02.is_open() );\n+  \n+  f = fb_02.open(name_03, std::ios_base::in | std::ios_base::out);\n+  VERIFY( f == NULL );\n+  VERIFY( fb_02.is_open() );\n+\n+  fb_03.open(name_03, std::ios_base::out | std::ios_base::trunc);\n+  VERIFY( fb_03.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test_01();\n+  return 0;\n+}\n+\n+"}, {"sha": "cf0ffa94c87ebd5009cade0959145d21592baa4e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/char/2.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+// various tests for filebuf::open() and filebuf::close() including\n+// the non-portable functionality in the libstdc++-v3 IO library\n+\n+#include <fstream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <ext/stdio_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+\n+void test_03()\n+{\n+  bool test = true;\n+  int first_fd = ::open(name_01, O_RDONLY);\n+  VERIFY( first_fd != -1 );\n+  FILE* first_file = ::fdopen(first_fd, \"r\");\n+  VERIFY( first_file != NULL );\n+  __gnu_cxx::stdio_filebuf<char> fb(first_file, std::ios_base::in);\n+\n+  int second_fd = fb.fd();\n+\n+  VERIFY( first_fd == second_fd );\n+}\n+\n+int\n+main()\n+{\n+  test_03();\n+  return 0;\n+}\n+\n+"}, {"sha": "c08817f7eabb293fdda59f07488425a96c2cfb41", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/char/3.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+// various tests for filebuf::open() and filebuf::close() including\n+// the non-portable functionality in the libstdc++-v3 IO library\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// Charles Leggett <CGLeggett@lbl.gov>\n+void test_05()\n+{\n+  bool test = true;\n+  const char* name = \"tmp_file5\";\n+\n+  std::fstream scratch_file;\n+\n+  scratch_file.open(name, std::ios::out);\n+  scratch_file.close();\n+\n+  scratch_file.open(name, std::ios::in);\n+  if (!scratch_file)\n+    VERIFY( false );\n+  scratch_file.close();\n+}\n+\n+int\n+main()\n+{\n+  test_05();\n+  return 0;\n+}\n+\n+"}, {"sha": "860f36943f0aaef393ac4c9ae446dfa5bd77c9f6", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/char/9507.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F9507.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F9507.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F9507.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+// various tests for filebuf::open() and filebuf::close() including\n+// the non-portable functionality in the libstdc++-v3 IO library\n+\n+#include <fstream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9507\n+void test_06()\n+{\n+  bool test = true;\n+  const char* name = \"tmp_fifo2\";\n+\n+  signal(SIGPIPE, SIG_IGN);\n+\n+  unlink(name);\n+  mkfifo(name, S_IRWXU);\n+\t\n+  if (!fork())\n+    {\n+      std::filebuf fbuf;\n+      fbuf.open(name, std::ios_base::in);\n+      fbuf.sgetc();\n+      fbuf.close();\n+      exit(0);\n+    }\n+\n+  std::filebuf fbuf;\n+  std::filebuf* r = fbuf.open(name, std::ios_base::out | std::ios_base::ate);\n+  VERIFY( !fbuf.is_open() );\n+  VERIFY( r == NULL );\n+}\n+\n+int\n+main()\n+{\n+  test_06();\n+  return 0;\n+}\n+\n+"}, {"sha": "fd960e455112592fd588acee7f150eb0d63c67a4", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/char/1.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,78 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <fstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// test03\n+// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00151.html\n+template<typename charT, typename traits = std::char_traits<charT> >\n+  class basic_nullbuf : public std::basic_filebuf<charT, traits>\n+  {\n+  protected:\n+    typedef typename\n+      std::basic_filebuf<charT, traits>::int_type int_type;\n+    virtual int_type \n+    overflow(int_type c) \n+    {  return traits::not_eof(c); }\n+  };\n+\n+typedef basic_nullbuf<char> nullbuf;\n+\n+template<typename T>\n+  char\n+  print(const T& x) \n+  {\n+   nullbuf ob;\n+   std::ostream out(&ob); \n+   out << x << std::endl;\n+   return (!out ? '0' : '1');\n+ }\n+\n+void test03() \n+{\n+  bool test = true;\n+  const std::string control01(\"11111\");\n+  std::string test01;\n+\n+  test01 += print(true);\n+  test01 += print(3.14159);\n+  test01 += print(10);\n+  test01 += print('x');\n+  test01 += print(\"pipo\");\n+\n+  VERIFY( test01 == control01 );\n+}\n+\n+int main() \n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "795c58ccf3e6b04638e90a754c1cae239dbb1647", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/char/3599.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F3599.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F3599.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F3599.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,66 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <fstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3599\n+class testbuf : public std::filebuf\n+{\n+public:\n+  typedef std::filebuf::traits_type traits_type;\n+\n+  testbuf() : std::filebuf() { }\n+ \n+protected:\n+  int_type \n+  overflow(int_type c = traits_type::eof()) \n+  { return traits_type::not_eof(0); }\n+};\n+\n+void\n+test07()\n+{\n+  bool test = true;\n+  testbuf ob;\n+  std::ostream out(&ob); \n+\n+  out << \"gasp\";\n+  VERIFY(out.good());\n+\n+  out << std::endl;\n+  VERIFY(out.good());\n+}\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "18ed29d328c428a11dd14eb4b42aa5f7e89255ef", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/char/9169.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F9169.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F9169.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F9169.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,72 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+const char name_04[] = \"filebuf_virtuals-4.txt\"; // empty file, need to create\n+\n+class Cvt_to_upper : public std::codecvt<char, char, mbstate_t>\n+{\n+  bool do_always_noconv() const throw()\n+  {\n+    return false;\n+  }\n+};\n+\n+// libstdc++/9169\n+// filebuf output fails if codecvt<>::out returns noconv\n+void test10()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  locale c_loc = locale::classic();\n+  locale loc(c_loc, new Cvt_to_upper);\n+\n+  string str(\"abcdefghijklmnopqrstuvwxyz\");\n+  string tmp;\n+\n+  {\n+    ofstream out;\n+    out.imbue(loc);\n+    out.open(name_04);\n+    copy(str.begin(), str.end(), ostreambuf_iterator<char>(out));\n+  }\n+\n+  {\n+    ifstream in;\n+    in.open(name_04);\n+    copy(istreambuf_iterator<char>(in), istreambuf_iterator<char>(),\n+\t back_inserter(tmp));\n+  }\n+\n+  VERIFY( tmp.size() == str.size() );\n+  VERIFY( tmp == str );\n+}\n+\n+main() \n+{\n+  test10();\n+  return 0;\n+}"}, {"sha": "b752bce8a492c182d0912511de2c89f2dc5c0778", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/char/9182-2.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F9182-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F9182-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F9182-2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,72 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+const char name_07[] = \"filebuf_virtuals-7.txt\"; // empty file, need to create\n+\n+class errorcvt : public std::codecvt<char, char, mbstate_t>\n+{\n+protected:\n+  std::codecvt_base::result\n+  do_out(mbstate_t&, const char* from, const char*,\n+\t const char*& from_next, char* to, char*,\n+\t char*& to_next) const\n+  {\n+    from_next = from;\n+    to_next = to;\n+    return std::codecvt<char, char, mbstate_t>::error;\n+  }\n+  \n+  virtual bool do_always_noconv() const throw()\n+  {\n+    return false;\n+  }\n+};\n+\n+// libstdc++/9182\n+// basic_filebuf<>::sync and overflow do not write out any characters\n+// if codecvt<>::out returns error\n+void test14()\n+{\n+  using namespace std;\n+  bool test = true;\n+  \n+  locale loc =  locale::classic();\n+  loc = locale(loc, new errorcvt);\n+  \n+  filebuf fbuf1;\n+  fbuf1.pubimbue(loc);\n+  fbuf1.pubsetbuf(0, 0);\n+  fbuf1.open(name_07, ios_base::out | ios_base::trunc);\n+  streamsize n = fbuf1.sputn(\"onne\", 4);\n+  VERIFY( n == 0 );\n+  fbuf1.close();\n+}\n+\n+main() \n+{\n+  test14();\n+  return 0;\n+}"}, {"sha": "2c8d078f0e446434687538d698ae9ad6893bcd62", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/char/9988.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F9988.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F9988.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F9988.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,69 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_08[] = \"filebuf_virtuals-8.txt\"; // empty file, need to create\n+\n+class OverBuf : public std::filebuf\n+{\n+public:\n+  int_type pub_overflow(int_type c = traits_type::eof())\n+  { return std::filebuf::overflow(c); }\n+};\n+\n+// libstdc++/9988\n+// filebuf::overflow writes EOF to file\n+void test15()\n+{\n+  using namespace std;\n+  bool test = true;\n+  \n+  OverBuf fb;\n+  fb.open(name_08, ios_base::out | ios_base::trunc);\n+  \n+  fb.sputc('a');\n+  fb.pub_overflow('b');\n+  fb.pub_overflow();\n+  fb.sputc('c');\n+  fb.close();\n+\n+  filebuf fbin;\n+  fbin.open(name_08, ios_base::in);\n+  filebuf::int_type c;\n+  c = fbin.sbumpc();\n+  VERIFY( c == 'a' );\n+  c = fbin.sbumpc();\n+  VERIFY( c == 'b' );\n+  c = fbin.sbumpc();\n+  VERIFY( c == 'c' );\n+  c = fbin.sbumpc();\n+  VERIFY( c == filebuf::traits_type::eof() );\n+  fbin.close();\n+}\n+\n+main() \n+{\n+  test15();\n+  return 0;\n+}"}, {"sha": "5a27cdd592cbe9a0c0d80a3dcf77c1e4ee84bff1", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sbumpc/char/1.cc", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,106 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+// NB: This test assumes that _M_buf_size == 40, and not the usual\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n+// simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n+const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n+\n+class derived_filebuf: public std::filebuf\n+{\n+ public:\n+  void\n+  set_size(int_type __size) { _M_buf_size_opt = __size; }\n+};\n+\n+derived_filebuf fb_01; // in \n+derived_filebuf fb_02; // out\n+derived_filebuf fb_03; // in | out\n+\n+// Initialize filebufs to be the same size regardless of platform.\n+void test03()\n+{\n+  fb_01.set_size(buffer_size);\n+  fb_02.set_size(buffer_size);\n+  fb_03.set_size(buffer_size);\n+}\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  filebuf \t\t\t\tf_tmp;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+\n+  // GET\n+  fb_01.open(name_01, ios_base::in);\n+  fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+  fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n+  strmof_1 = fb_01.in_avail();\n+  strmof_2 = fb_02.in_avail();\n+  strmof_1 = fb_03.in_avail(); \n+\n+  // int_type sbumpc()\n+  // if read_cur not avail returns uflow(), else return *read_cur & increment\n+  int_type c1 = fb_01.sbumpc();\n+  int_type c2 = fb_02.sbumpc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c1 == '/' );\n+  VERIFY( c2 == -1 );\n+  int_type c3 = fb_01.sbumpc();\n+  int_type c4 = fb_02.sbumpc();\n+  VERIFY( c3 != c4 );\n+  VERIFY( c1 == c3 ); // fluke, both happen to be '/'\n+  VERIFY( c2 == c4 );\n+  int_type c5 = fb_03.sbumpc();\n+  VERIFY( c5 == traits_type::eof() );\n+  // XXX should do some kind of test to make sure that internal\n+  // buffers point to the same thing, to check consistancy.\n+}\n+\n+main() \n+{\n+  test03();\n+  test05();\n+  return 0;\n+}"}, {"sha": "8e419432ad8d4397e18b21655eb61360969d84fa", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sbumpc/char/9825.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F9825.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F9825.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F9825.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,55 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_06[] = \"filebuf_virtuals-6.txt\"; // empty file, need to create\n+\n+// libstdc++/9825\n+// filebuf::sputbackc breaks sbumpc\n+void test12()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  filebuf fbuf;\n+\n+  fbuf.open(name_06, ios_base::in|ios_base::out|ios_base::trunc);\n+  fbuf.sputn(\"crazy bees!\", 11);\n+  fbuf.pubseekoff(0, ios_base::beg);\n+  fbuf.sbumpc();\n+  fbuf.sputbackc('x');\n+  filebuf::int_type c = fbuf.sbumpc();\n+  VERIFY( c == 'x' );\n+  c = fbuf.sbumpc();\n+  VERIFY( c == 'r' );\n+  c = fbuf.sbumpc();\n+  VERIFY( c == 'a' );\n+  fbuf.close();  \n+}\n+\n+main() \n+{\n+  test12();\n+  return 0;\n+}"}, {"sha": "cb64d106bb5faf8b6f11f2d9b4cb7af1160ffd5c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/1.cc", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,137 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+// NB: This test assumes that _M_buf_size == 40, and not the usual\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n+// simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // empty file, need to create\n+\n+class derived_filebuf: public std::filebuf\n+{\n+ public:\n+  void\n+  set_size(int_type __size) { _M_buf_size_opt = __size; }\n+};\n+\n+derived_filebuf fb_03; // in | out\n+\n+// Initialize filebufs to be the same size regardless of platform.\n+void test03()\n+{\n+  fb_03.set_size(buffer_size);\n+}\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  filebuf \t\t\t\tf_tmp;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+\n+  fb_03.open(name_01, ios_base::out | ios_base::in);\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  // seekoff\n+  // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n+  // alters the stream position to off\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  //IN|OUT\n+  // 27filebuf-3.txt = bd23456789:;<=>?...\n+  //beg\n+  strmsz_1 = fb_03.in_avail(); \n+  pt_1 = fb_03.pubseekoff(2, ios_base::beg);\n+  strmsz_2 = fb_03.in_avail(); \n+  off_1 = pt_1;\n+  VERIFY( off_1 > 0 );\n+  c1 = fb_03.snextc(); //current in pointer +1\n+  VERIFY( c1 == '9' );\n+  c2 = fb_03.sputc('\\n');  //current in pointer +1\n+  c3 = fb_03.sgetc();\n+  VERIFY( c2 != c3 ); \n+  VERIFY( c3 == '9' );\n+  fb_03.pubsync(); \n+  c1 = fb_03.sgetc();\n+  VERIFY( c1 == c3 );\n+  //cur\n+  // 27filebuf-3.txt = bd2\\n456789:;<=>?...\n+  pt_2 = fb_03.pubseekoff(2, ios_base::cur);\n+  off_2 = pt_2;\n+  VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n+  c1 = fb_03.snextc(); //current in pointer +1\n+  VERIFY( c1 == '1' );\n+  c2 = fb_03.sputc('x');  //test current out pointer\n+  c3 = fb_03.sputc('\\n');\n+  c1 = fb_03.sgetc();\n+  fb_03.pubsync(); \n+  c3 = fb_03.sgetc();\n+  VERIFY( c1 == c3 );\n+  //end\n+  // 27filebuf-3.txt = \"bd2\\n456x\\n9\" \n+  pt_2 = fb_03.pubseekoff(0, ios_base::end, ios_base::in|ios_base::out);\n+  off_1 = pt_2;\n+  VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n+  c3 = fb_03.sputc('\\n');\n+  strmsz_1 = fb_03.sputn(\"because because because. . .\", 28);  \n+  VERIFY( strmsz_1 == 28 );\n+  c1 = fb_03.sungetc();\n+  // Defect?  retval of sungetc is not necessarily the character ungotten.\n+  // So re-get it.\n+  c1 = fb_03.sgetc();\n+  fb_03.pubsync(); \n+  c3 = fb_03.sgetc();\n+  VERIFY( c1 == c3 );\n+  // IN\n+  // OUT\n+}\n+\n+main() \n+{\n+  test03();\n+  test05();\n+  return 0;\n+}"}, {"sha": "fa185521d33e6b99d3f114c315a09117dee9e596", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/2.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,65 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test02(std::filebuf& in, bool pass)\n+{\n+  bool test = true;\n+  using namespace std;\n+  typedef streambuf::pos_type pos_type;\n+  typedef streambuf::off_type off_type;\n+  pos_type bad = pos_type(off_type(-1));\n+  pos_type p = 0;\n+\n+  // seekoff\n+  p = in.pubseekoff(0, ios_base::beg, ios_base::in);\n+  if (pass)\n+    VERIFY( p != bad );\n+\n+  p = in.pubseekoff(0, ios_base::beg, ios_base::out); \n+  VERIFY( p == bad );\n+\n+  p = in.pubseekoff(0, ios_base::beg); \n+  if (pass)\n+    VERIFY( p != bad );\n+}\n+\n+const char name_01[] = \"filebuf_virtuals-1.tst\"; // file with data in it\n+const char name_03[] = \"filebuf_members-1.tst\"; // empty file\n+\n+int main() \n+{\n+  using namespace std;\n+\n+  // movie star, submarine scientist!\n+  filebuf in1;\n+  in1.open(name_01, ios_base::in);\n+  filebuf in2;\n+  filebuf in3;\n+  in3.open(name_03, ios_base::in);\n+  test02(in1, true);\n+  test02(in2, false);\n+  test02(in3, true);\n+  return 0;\n+}"}, {"sha": "65a91c458f0f64a4426f04ea4a548b12b0d73d17", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/1.cc", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,127 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+// NB: This test assumes that _M_buf_size == 40, and not the usual\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n+// simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+\n+class derived_filebuf: public std::filebuf\n+{\n+ public:\n+  void\n+  set_size(int_type __size) { _M_buf_size_opt = __size; }\n+};\n+\n+derived_filebuf fb_03; // in | out\n+\n+// Initialize filebufs to be the same size regardless of platform.\n+void test03()\n+{\n+  fb_03.set_size(buffer_size);\n+}\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  filebuf \t\t\t\tf_tmp;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+\n+  fb_03.open(name_01, ios_base::out | ios_base::in);\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  // seekpos\n+  // pubseekpos(pos_type sp, ios_base::openmode)\n+  // alters the stream position to sp\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+  //IN|OUT\n+  //beg\n+  pt_1 = fb_03.pubseekoff(78, ios_base::beg);\n+  off_1 = pt_1;\n+  VERIFY( off_1 > 0 );\n+  c1 = fb_03.snextc(); \t\t//current in pointer +1\n+  VERIFY( c1 == 't' );\n+  c2 = fb_03.sputc('\\n');  \t//test current out pointer\n+  c3 = fb_03.sgetc();\n+  fb_03.pubsync(); \t\t//resets pointers\n+  pt_2 = fb_03.pubseekpos(pt_1);\n+  off_2 = pt_2;\n+  VERIFY( off_1 == off_2 );\n+  c3 = fb_03.snextc(); \t\t//current in pointer +1\n+  VERIFY( c2 == c3 );\n+  pt_1 = fb_03.pubseekoff(0, ios_base::end);\n+  off_1 = pt_1;\n+  VERIFY( off_1 > off_2 );\n+  fb_03.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n+  fb_03.pubsync();\n+\n+  // IN\n+  // OUT\n+\n+  // VIRTUALS (indirectly tested)\n+  // underflow\n+  // if read position avail, returns *gptr()\n+\n+  // pbackfail(int_type c)\n+  // put c back into input sequence\n+\n+  // overflow\n+  // appends c to output seq\n+\n+  // NB Have to close these suckers. . .\n+  // filebuf_type* close()\n+  fb_03.close();\n+  VERIFY( !fb_03.is_open() );\n+}\n+\n+main() \n+{\n+  test03();\n+  test05();\n+  return 0;\n+}"}, {"sha": "d32dc4bab636ea5821e9ad7c75c49c0fd1301b90", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/2.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,65 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test02(std::filebuf& in, bool pass)\n+{\n+  bool test = true;\n+  using namespace std;\n+  typedef streambuf::pos_type pos_type;\n+  typedef streambuf::off_type off_type;\n+  pos_type bad = pos_type(off_type(-1));\n+  pos_type p = 0;\n+\n+  // seekpos\n+  p = in.pubseekpos(0, ios_base::in);\n+  if (pass)\n+    VERIFY( p != bad );\n+\n+  p = in.pubseekpos(0, ios_base::out); \n+  VERIFY( p == bad );\n+\n+  p = in.pubseekpos(0); \n+  if (pass)\n+    VERIFY( p != bad );\n+}\n+\n+const char name_01[] = \"filebuf_virtuals-1.tst\"; // file with data in it\n+const char name_03[] = \"filebuf_members-1.tst\"; // empty file\n+\n+int main() \n+{\n+  using namespace std;\n+\n+  // movie star, submarine scientist!\n+  filebuf in1;\n+  in1.open(name_01, ios_base::in);\n+  filebuf in2;\n+  filebuf in3;\n+  in3.open(name_03, ios_base::in);\n+  test02(in1, true);\n+  test02(in2, false);\n+  test02(in3, true);\n+  return 0;\n+}"}, {"sha": "d4f9e4c15dc399ea4f0dce131bd979925b1f7bbc", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/setbuf/char/1.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,90 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::filebuf\n+{\n+public:\n+\n+  // Typedefs:\n+  typedef std::filebuf base_type;\n+  typedef base_type::traits_type traits_type;\n+  typedef base_type::char_type char_type;\n+\n+  testbuf(): base_type() \n+  { _M_mode = (std::ios_base::in | std::ios_base::out); }\n+\n+  bool\n+  check_pointers()\n+  { \n+    bool test = true;\n+    test = (this->pbase() == NULL);\n+    test &= (this->pptr() == NULL);\n+    return test;\n+  }\n+};\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\";\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef std::filebuf::traits_type \ttraits_type;\n+  typedef std::filebuf::pos_type \tpos_type;\n+  typedef std::filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  int_type c1;\n+\n+  {\n+    testbuf \t\t\t\tf_tmp;\n+\n+    // setbuf\n+    // pubsetbuf(char_type* s, streamsize n)\n+    f_tmp.pubsetbuf(0,0);\n+    VERIFY( f_tmp.check_pointers() );\n+  }\n+\n+  {\n+    testbuf \t\t\t\tf_tmp;\n+    \n+    f_tmp.open(name_01, ios_base::out | ios_base::in);\n+    int_type c1 = f_tmp.sbumpc();\n+    \n+    // setbuf\n+    // pubsetbuf(char_type* s, streamsize n)\n+    f_tmp.pubsetbuf(0, 0);\n+    VERIFY( !f_tmp.check_pointers() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "6261c999c37b02edfe1f447de975a943da7a15aa", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/setbuf/char/2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,45 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  char buf[512];\n+  const char* strlit = \"how to tell a story and other essays: mark twain\";\n+  const size_t strlitsize = std::strlen(strlit);\n+  filebuf fbuf;\n+  fbuf.open(\"tmp_setbuf2\", ios_base::out);\n+  fbuf.pubsetbuf(buf, 512);\n+  fbuf.sputn(strlit, strlitsize);\n+  VERIFY( std::strncmp(strlit, buf, strlitsize) == 0 );\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2927991c060856fbc9a43e4840f4ff22fddd1168", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/setbuf/char/3.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,46 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  char buf[512];\n+  const char* strlit = \"how to tell a story and other essays: mark twain\";\n+  const size_t strlitsize = std::strlen(strlit);\n+  filebuf fbuf01;\n+  fbuf01.open(\"tmp\", ios_base::out);\n+\n+  fbuf01.pubsetbuf(buf, strlitsize);\n+  fbuf01.sputn(strlit, strlitsize);\n+  VERIFY( std::strncmp(strlit, buf, strlitsize) == 0 );\n+}\n+\n+main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "34f535539497a735b5a325f9d2bff56b0e822c60", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetc/char/1.cc", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,120 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+// NB: This test assumes that _M_buf_size == 40, and not the usual\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n+// simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n+const char carray_01[] = \"santa cruz or sandiego?\";\n+const char carray_02[] = \"memphis, new orleans, and savanah\";\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n+const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n+const char name_04[] = \"filebuf_virtuals-4.txt\"; // empty file, need to create\n+const char name_05[] = \"filebuf_virtuals-5.txt\"; // empty file, need to create\n+const char name_06[] = \"filebuf_virtuals-6.txt\"; // empty file, need to create\n+const char name_07[] = \"filebuf_virtuals-7.txt\"; // empty file, need to create\n+const char name_08[] = \"filebuf_virtuals-8.txt\"; // empty file, need to create\n+\n+class derived_filebuf: public std::filebuf\n+{\n+ public:\n+  void\n+  set_size(int_type __size) { _M_buf_size_opt = __size; }\n+};\n+\n+derived_filebuf fb_01; // in \n+derived_filebuf fb_02; // out\n+derived_filebuf fb_03; // in | out\n+\n+// Initialize filebufs to be the same size regardless of platform.\n+void test03()\n+{\n+  fb_01.set_size(buffer_size);\n+  fb_02.set_size(buffer_size);\n+  fb_03.set_size(buffer_size);\n+}\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef std::filebuf::traits_type \ttraits_type;\n+  typedef std::filebuf::pos_type \tpos_type;\n+  typedef std::filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  std::filebuf \t\t\t\tf_tmp;\n+  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\t\tstrmof_1, strmof_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+\n+  // GET\n+  fb_01.open(name_01, std::ios_base::in);\n+  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n+  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc); \n+  strmof_1 = fb_01.in_avail();\n+  strmof_2 = fb_02.in_avail();\n+  strmof_1 = fb_03.in_avail(); \n+\n+  int_type c1 = fb_01.sbumpc();\n+  int_type c2 = fb_02.sbumpc();\n+  int_type c3 = fb_01.sbumpc();\n+  int_type c4 = fb_02.sbumpc();\n+  int_type c5 = fb_03.sbumpc();\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+  int_type c6 = fb_01.sgetc();\n+  int_type c7 = fb_02.sgetc();\n+  VERIFY( c6 != c3 );\n+  VERIFY( c7 == c4 ); // both -1\n+  int_type c8 = fb_01.sgetc();\n+  int_type c9 = fb_02.sgetc();\n+  VERIFY( c6 == c8 );\n+  VERIFY( c7 == c9 );\n+  c5 = fb_03.sgetc();\n+  VERIFY( c5 == traits_type::eof() );\n+}\n+\n+main() \n+{\n+  test03();\n+  test05();\n+  return 0;\n+}"}, {"sha": "1f0fd4c1d8e2691ecc8ceda31fb314bda0e139fd", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/1.cc", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,145 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+// NB: This test assumes that _M_buf_size == 40, and not the usual\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n+// simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n+const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n+\n+class derived_filebuf: public std::filebuf\n+{\n+ public:\n+  void\n+  set_size(int_type __size) { _M_buf_size_opt = __size; }\n+};\n+\n+derived_filebuf fb_01; // in \n+derived_filebuf fb_02; // out\n+derived_filebuf fb_03; // in | out\n+\n+// Initialize filebufs to be the same size regardless of platform.\n+void test03()\n+{\n+  fb_01.set_size(buffer_size);\n+  fb_02.set_size(buffer_size);\n+  fb_03.set_size(buffer_size);\n+}\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  filebuf \t\t\t\tf_tmp;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+\n+  // GET\n+  fb_01.open(name_01, ios_base::in);\n+  fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+  fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n+  strmof_1 = fb_01.in_avail();\n+  strmof_2 = fb_02.in_avail();\n+  strmof_1 = fb_03.in_avail(); \n+\n+  int_type c1 = fb_01.sbumpc();\n+  int_type c2 = fb_02.sbumpc();\n+  int_type c3 = fb_01.sbumpc();\n+  int_type c4 = fb_02.sbumpc();\n+  int_type c5 = fb_03.sbumpc();\n+\n+  int_type c6 = fb_01.sgetc();\n+  int_type c7 = fb_02.sgetc();\n+  int_type c8 = fb_01.sgetc();\n+  int_type c9 = fb_02.sgetc();\n+  c5 = fb_03.sgetc();\n+\n+  // int_type snextc()\n+  // calls sbumpc and if sbumpc != eof, return sgetc\n+  c6 = fb_01.snextc();\n+  c7 = fb_02.snextc();\n+  c6 = fb_01.snextc();\n+  c7 = fb_02.snextc();\n+  c5 = fb_03.snextc();\n+\n+  // streamsize sgetn(char_type *s, streamsize n)\n+  // streamsize xsgetn(char_type *s, streamsize n)\n+  // assign up to n chars to s from input sequence, indexing in_cur as\n+  // approp and returning the number of chars assigned\n+  strmsz_1 = fb_01.in_avail();\n+  strmsz_2 = fb_02.in_avail();\n+  test = strmsz_1 != strmsz_2;\n+  char carray1[13] = \"\";\n+  strmsz_1 = fb_01.sgetn(carray1, 10);\n+  char carray2[buffer_size] = \"\";\n+  strmsz_2 = fb_02.sgetn(carray2, 10);\n+  VERIFY( strmsz_1 != strmsz_2 );\n+  VERIFY( strmsz_1 == 10 );\n+  VERIFY( strmsz_2 == 0 );\n+  c1 = fb_01.sgetc();\n+  c2 = fb_02.sgetc();\n+  VERIFY( c1 == '\\n' );  \n+  VERIFY( c7 == c2 ); // n != i\n+  strmsz_1 = fb_03.sgetn(carray1, 10);\n+  VERIFY( !strmsz_1 ); //zero\n+  strmsz_1 = fb_01.in_avail();\n+  strmsz_2 = fb_01.sgetn(carray2, strmsz_1 + 5);\n+  VERIFY( strmsz_1 == strmsz_2 - 5 ); \n+  c4 = fb_01.sgetc(); // buffer should have underflowed from above.\n+  VERIFY( c4 == 'i' );\n+  strmsz_1 = fb_01.in_avail();\n+  VERIFY( strmsz_1 > 0 );\n+  strmsz_2 = fb_01.sgetn(carray2, strmsz_1 + 5);\n+  VERIFY( strmsz_1 == strmsz_2 ); //at the end of the actual file \n+  strmsz_1 = fb_02.in_avail();\n+  strmsz_2 = fb_02.sgetn(carray2, strmsz_1 + 5);\n+  VERIFY( strmsz_1 == -1 );\n+  VERIFY( strmsz_2 == 0 );\n+  c4 = fb_02.sgetc(); // should be EOF\n+  VERIFY( c4 == traits_type::eof() );\n+}\n+\n+main() \n+{\n+  test03();\n+  test05();\n+  return 0;\n+}"}, {"sha": "6ed16712b889d059f9b66892a6b6f0d71bce176e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,46 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_01[] = \"filebuf_virtuals-1.tst\"; // empty file, need to create\n+\n+void test06()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  char buffer[] = \"xxxxxxxxxx\";\n+  typedef filebuf::int_type\tint_type;\n+  filebuf fbuf01;\n+  fbuf01.open(name_01, ios_base::in);\n+  int_type len1 = fbuf01.sgetn(buffer, sizeof(buffer));\n+  VERIFY( len1 == sizeof(buffer) );\n+  VERIFY( buffer[0] == '/' );\n+}\n+\n+main() \n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "9dcfcb5ac477ba315fd11e7e7d185dc22a6a336d", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/snextc/char/1.cc", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,116 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+// NB: This test assumes that _M_buf_size == 40, and not the usual\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n+// simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n+const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n+\n+class derived_filebuf: public std::filebuf\n+{\n+ public:\n+  void\n+  set_size(int_type __size) { _M_buf_size_opt = __size; }\n+};\n+\n+derived_filebuf fb_01; // in \n+derived_filebuf fb_02; // out\n+derived_filebuf fb_03; // in | out\n+\n+// Initialize filebufs to be the same size regardless of platform.\n+void test03()\n+{\n+  fb_01.set_size(buffer_size);\n+  fb_02.set_size(buffer_size);\n+  fb_03.set_size(buffer_size);\n+}\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  filebuf \t\t\t\tf_tmp;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+\n+  // GET\n+  fb_01.open(name_01, ios_base::in);\n+  fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+  fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n+  strmof_1 = fb_01.in_avail();\n+  strmof_2 = fb_02.in_avail();\n+  strmof_1 = fb_03.in_avail(); \n+\n+  int_type c1 = fb_01.sbumpc();\n+  int_type c2 = fb_02.sbumpc();\n+  int_type c3 = fb_01.sbumpc();\n+  int_type c4 = fb_02.sbumpc();\n+  int_type c5 = fb_03.sbumpc();\n+\n+  int_type c6 = fb_01.sgetc();\n+  int_type c7 = fb_02.sgetc();\n+  int_type c8 = fb_01.sgetc();\n+  int_type c9 = fb_02.sgetc();\n+  c5 = fb_03.sgetc();\n+\n+  // int_type snextc()\n+  // calls sbumpc and if sbumpc != eof, return sgetc\n+  c6 = fb_01.snextc();\n+  c7 = fb_02.snextc();\n+  VERIFY( c6 != c8 );\n+  VERIFY( c7 == c9 ); // -1\n+  VERIFY( c6 == '\\n' );\n+  c6 = fb_01.snextc();\n+  c7 = fb_02.snextc();\n+  VERIFY( c6 != c8 );\n+  VERIFY( c7 == c9 ); // -1\n+  VERIFY( c6 == '9' );\n+  c5 = fb_03.snextc();\n+  VERIFY( c5 == traits_type::eof() );\n+}\n+\n+main() \n+{\n+  test03();\n+  test05();\n+  return 0;\n+}"}, {"sha": "62dc70ee191ca3688c2f12608090ab849b859430", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/1.cc", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,168 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+// NB: This test assumes that _M_buf_size == 40, and not the usual\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n+// simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n+const char carray_01[] = \"santa cruz or sandiego?\";\n+const char carray_02[] = \"memphis, new orleans, and savanah\";\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n+const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n+const char name_04[] = \"filebuf_virtuals-4.txt\"; // empty file, need to create\n+const char name_05[] = \"filebuf_virtuals-5.txt\"; // empty file, need to create\n+const char name_06[] = \"filebuf_virtuals-6.txt\"; // empty file, need to create\n+const char name_07[] = \"filebuf_virtuals-7.txt\"; // empty file, need to create\n+const char name_08[] = \"filebuf_virtuals-8.txt\"; // empty file, need to create\n+\n+class derived_filebuf: public std::filebuf\n+{\n+ public:\n+  void\n+  set_size(int_type __size) { _M_buf_size_opt = __size; }\n+};\n+\n+derived_filebuf fb_01; // in \n+derived_filebuf fb_02; // out\n+derived_filebuf fb_03; // in | out\n+\n+// Initialize filebufs to be the same size regardless of platform.\n+void test03()\n+{\n+  fb_01.set_size(buffer_size);\n+  fb_02.set_size(buffer_size);\n+  fb_03.set_size(buffer_size);\n+}\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef std::filebuf::traits_type \ttraits_type;\n+  typedef std::filebuf::pos_type \tpos_type;\n+  typedef std::filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  std::filebuf \t\t\t\tf_tmp;\n+  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\t\tstrmof_1, strmof_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+\n+  fb_01.open(name_01, std::ios_base::in);\n+  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n+  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc);\n+\n+  int_type c1 = fb_01.sbumpc();\n+  int_type c2 = fb_02.sbumpc();\n+  int_type c3 = fb_01.sbumpc();\n+  int_type c4 = fb_02.sbumpc();\n+  int_type c5 = fb_03.sbumpc();\n+  int_type c6 = fb_01.sgetc();\n+  int_type c7 = fb_02.sgetc();\n+  int_type c8 = fb_01.sgetc();\n+  int_type c9 = fb_02.sgetc();\n+\n+  // PUT\n+  strmsz_1 = fb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n+  strmsz_2 = fb_03.sputn(\", i wanna reach out and\", 10);\n+  strmsz_1 = fb_02.sputn(\"racadabras\", 10);\n+  strmsz_1 = fb_01.sputn(\"racadabra\", 10);\n+\n+  // PUTBACK\n+  // int_type pbfail(int_type c)\n+  // called when gptr() null, gptr() == eback(), or traits::eq(*gptr, c) false\n+  // \"pending sequence\" is:\n+  //\t1) everything as defined in underflow\n+  // \t2) + if (traits::eq_int_type(c, traits::eof()), then input\n+  // \tsequence is backed up one char before the pending sequence is\n+  // \tdetermined.\n+  //\t3) + if (not 2) then c is prepended. Left unspecified is\n+  //\twhether the input sequence is backedup or modified in any way\n+  // returns traits::eof() for failure, unspecified other value for success\n+\n+  // int_type sputbackc(char_type c)\n+  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n+  // otherwise decrements in_cur and returns *gptr()\n+  c1 = fb_03.sgetc(); // -1\n+  c2 = fb_03.sputbackc('z');\n+  strmsz_2 = fb_03.in_avail();\n+  c3 = fb_03.sgetc();\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( 1 == strmsz_2 );\n+  //test for _in_cur == _in_beg\n+  // fb_03._M_out_beg = \"bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZracada\" etc\n+  fb_03.pubseekoff(10, std::ios_base::beg, \n+\t\t   std::ios_base::in | std::ios_base::out);\n+  fb_03.sputc('m');\n+  strmsz_1 = fb_03.in_avail(); \n+  c1 = fb_03.sgetc(); \n+  fb_03.snextc();\n+  c2 = fb_03.sputbackc('z');  \n+  strmsz_2 = fb_03.in_avail(); \n+  c3 = fb_03.sgetc();  \n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( c2 == 'z' );\n+  //  VERIFY( strmsz_1 == strmsz_2 );\n+  // test for replacing char with identical one\n+  fb_03.snextc();\n+  fb_03.sputc('u');\n+  fb_03.sputc('v');\n+  fb_03.sputc('a');\n+  strmsz_1 = fb_03.in_avail();\n+  c2 = fb_03.sputbackc('a');\n+  strmsz_2 = fb_03.in_avail();\n+  c3 = fb_03.sgetc();\n+  VERIFY( c3 == c2 );\n+  VERIFY( strmsz_1 + 1 == strmsz_2 );\n+  //test for ios_base::out\n+  c1 = fb_02.sgetc(); // undefined\n+  c2 = fb_02.sputbackc('a');\n+  VERIFY( c1 == c2 );\n+  VERIFY( c1 == -1 );\n+}\n+\n+main() \n+{\n+  test03();\n+  test05();\n+  return 0;\n+}"}, {"sha": "b5e470f332a5da13de443a993ea9ed01bb320778", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/9425.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F9425.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F9425.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F9425.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,48 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+\n+// libstdc++/9439, libstdc++/9425\n+// basic_filebuf<>::pbackfail calls basic_filebuf<>::seekoff, but\n+// fails to check the return value\n+void test09()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  filebuf fbuf;\n+  fbuf.open(name_01, ios_base::in);\n+  filebuf::int_type r = fbuf.sputbackc('a');\n+  fbuf.close();\n+\n+  VERIFY( r == filebuf::traits_type::eof() );\n+}\n+\n+main() \n+{\n+  test09();\n+  return 0;\n+}"}, {"sha": "db386f72212647f4821b1e9be62a2043481bd01f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/1.cc", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,137 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+// NB: This test assumes that _M_buf_size == 40, and not the usual\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n+// simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n+const char carray_01[] = \"santa cruz or sandiego?\";\n+const char carray_02[] = \"memphis, new orleans, and savanah\";\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n+const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n+const char name_04[] = \"filebuf_virtuals-4.txt\"; // empty file, need to create\n+const char name_05[] = \"filebuf_virtuals-5.txt\"; // empty file, need to create\n+const char name_06[] = \"filebuf_virtuals-6.txt\"; // empty file, need to create\n+const char name_07[] = \"filebuf_virtuals-7.txt\"; // empty file, need to create\n+const char name_08[] = \"filebuf_virtuals-8.txt\"; // empty file, need to create\n+\n+class derived_filebuf: public std::filebuf\n+{\n+ public:\n+  void\n+  set_size(int_type __size) { _M_buf_size_opt = __size; }\n+};\n+\n+derived_filebuf fb_01; // in \n+derived_filebuf fb_02; // out\n+derived_filebuf fb_03; // in | out\n+\n+// Initialize filebufs to be the same size regardless of platform.\n+void test03()\n+{\n+  fb_01.set_size(buffer_size);\n+  fb_02.set_size(buffer_size);\n+  fb_03.set_size(buffer_size);\n+}\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef std::filebuf::traits_type \ttraits_type;\n+  typedef std::filebuf::pos_type \tpos_type;\n+  typedef std::filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  std::filebuf \t\t\t\tf_tmp;\n+  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\t\tstrmof_1, strmof_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+\n+  fb_01.open(name_01, std::ios_base::in);\n+  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n+  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc);\n+\n+  int_type c1 = fb_01.sbumpc();\n+  int_type c2 = fb_02.sbumpc();\n+  int_type c3 = fb_01.sbumpc();\n+  int_type c4 = fb_02.sbumpc();\n+  int_type c5 = fb_03.sbumpc();\n+  int_type c6 = fb_01.sgetc();\n+  int_type c7 = fb_02.sgetc();\n+  int_type c8 = fb_01.sgetc();\n+  int_type c9 = fb_02.sgetc();\n+\n+  // PUT\n+  // int_type sputc(char_type c)\n+  // if out_cur not avail, return overflow(traits_type::to_int_type(c)) \n+  // else, stores c at out_cur,\n+  // increments out_cur, and returns c as int_type\n+  // strmsz_1 = fb_03.in_avail();  // XXX valid for in|out??\n+  c1 = fb_02.sputc('a'); \n+  c2 = fb_03.sputc('b'); \n+  VERIFY( c1 != c2 );\n+  c1 = fb_02.sputc('c'); \n+  c2 = fb_03.sputc('d'); \n+  VERIFY( c1 != c2 );\n+  // strmsz_2 = fb_03.in_avail();\n+  // VERIFY( strmsz_1 != strmsz_2 );\n+  for (int i = 50; i <= 90; ++i) \n+    c2 = fb_02.sputc(char(i));\n+  // 27filebuf-2.txt == ac23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWX\n+  // fb_02._M_out_cur = '2'\n+  strmsz_1 = fb_03.in_avail();\n+  for (int i = 50; i <= 90; ++i) \n+    c2 = fb_03.sputc(char(i));\n+  strmsz_2 = fb_03.in_avail();\n+  // VERIFY( strmsz_1 != strmsz_2 );\n+  // VERIFY( strmsz_1 > 0 );\n+  // VERIFY( strmsz_2 > 0 );\n+  // 27filebuf-2.txt == bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWX\n+  // fb_02._M_out_cur = '2'\n+  c3 = fb_01.sputc('a'); // should be EOF because this is read-only\n+  VERIFY( c3 == traits_type::eof() );\n+}\n+\n+main() \n+{\n+  test03();\n+  test05();\n+  return 0;\n+}"}, {"sha": "d794458c3d3bffe8dc9cf4d37a2a61e5e195d197", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/1057.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1057.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,61 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <string>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class nullsetpbuf : public std::filebuf\n+{\n+  char foo[64];\n+public:\n+  nullsetpbuf()\n+  {\n+    setp(foo, foo + 64);\n+    setp(NULL, NULL);\n+  }\n+};\n+\n+// libstdc++/1057\n+void test05()\n+{\n+  std::string text1 = \"abcdefghijklmn\";\n+  \n+  nullsetpbuf nsp;\n+  // Immediate crash as sputc writes to null pointer\n+  nsp.sputc('a');\n+}\n+\n+int main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "e0358ef5252cc5db880cb0d8888db508cada403c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/9701-2.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F9701-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F9701-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F9701-2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,71 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_05[] = \"filebuf_virtuals-5.txt\"; // empty file, need to create\n+\n+bool over_called;\n+\n+class Derived_filebuf : public std::filebuf\n+{\n+public:\n+  int_type overflow(int_type c)\n+  {\n+    over_called = true;\n+    return std::filebuf::overflow(c);\n+  }\n+  \n+  const char_type* pub_epptr() const\n+  { return epptr(); }\n+  \n+  const char_type* pub_pptr() const\n+  { return pptr(); }\n+};\n+\n+// libstdc++/9701 (partial)\n+void test11()\n+{\n+  bool test = true;\n+\n+  bool over_expected;\n+\n+  // sputc\n+  Derived_filebuf dfbuf_01;\n+  dfbuf_01.open(name_05, std::ios_base::out);\n+  over_called = false;\n+  dfbuf_01.sputc('i');\n+  VERIFY( !over_called );\n+  over_expected = dfbuf_01.pub_epptr() == dfbuf_01.pub_pptr();\n+  over_called = false;\n+  dfbuf_01.sputc('v');\n+  VERIFY( (!over_expected && !over_called)\n+\t  || (over_expected && over_called) );\n+  dfbuf_01.close();\n+}\n+\n+main() \n+{\n+  test11();\n+  return 0;\n+}"}, {"sha": "38acef66baa4220e245cf44169a2410adbdbe75b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/1.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,125 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+// NB: This test assumes that _M_buf_size == 40, and not the usual\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n+// simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n+const char carray_01[] = \"santa cruz or sandiego?\";\n+const char carray_02[] = \"memphis, new orleans, and savanah\";\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n+const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n+const char name_04[] = \"filebuf_virtuals-4.txt\"; // empty file, need to create\n+const char name_05[] = \"filebuf_virtuals-5.txt\"; // empty file, need to create\n+const char name_06[] = \"filebuf_virtuals-6.txt\"; // empty file, need to create\n+const char name_07[] = \"filebuf_virtuals-7.txt\"; // empty file, need to create\n+const char name_08[] = \"filebuf_virtuals-8.txt\"; // empty file, need to create\n+\n+class derived_filebuf: public std::filebuf\n+{\n+ public:\n+  void\n+  set_size(int_type __size) { _M_buf_size_opt = __size; }\n+};\n+\n+derived_filebuf fb_01; // in \n+derived_filebuf fb_02; // out\n+derived_filebuf fb_03; // in | out\n+\n+// Initialize filebufs to be the same size regardless of platform.\n+void test03()\n+{\n+  fb_01.set_size(buffer_size);\n+  fb_02.set_size(buffer_size);\n+  fb_03.set_size(buffer_size);\n+}\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef std::filebuf::traits_type \ttraits_type;\n+  typedef std::filebuf::pos_type \tpos_type;\n+  typedef std::filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  std::filebuf \t\t\t\tf_tmp;\n+  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\t\tstrmof_1, strmof_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+\n+  fb_01.open(name_01, std::ios_base::in);\n+  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n+  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc);\n+\n+  int_type c1 = fb_01.sbumpc();\n+  int_type c2 = fb_02.sbumpc();\n+  int_type c3 = fb_01.sbumpc();\n+  int_type c4 = fb_02.sbumpc();\n+  int_type c5 = fb_03.sbumpc();\n+  int_type c6 = fb_01.sgetc();\n+  int_type c7 = fb_02.sgetc();\n+  int_type c8 = fb_01.sgetc();\n+  int_type c9 = fb_02.sgetc();\n+\n+  // PUT\n+  // streamsize sputn(const char_typs* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+  strmsz_1 = fb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n+  VERIFY( strmsz_1 == 10 );\n+  strmsz_2 = fb_03.sputn(\", i wanna reach out and\", 10);\n+  VERIFY( strmsz_2 == 10 );\n+  VERIFY( strmsz_1 == strmsz_2 ); \n+  // fb_03._M_out_beg = \"YZracadabras, i wanna FGHIJKLMNOPQRSTUVW\"\n+  // fb_03._M_out_cur = \"FGHIJKLMNOPQRSTUVW\"\n+  strmsz_1 = fb_02.sputn(\"racadabras\", 10);\n+  VERIFY( strmsz_1 == 10 );  \n+  // fb_02._M_out_beg = \"YZracadabras<=>?@ABCDEFGHIJKLMNOPQRSTUVW\"\n+  // fb_02._M_out_cur = \"<=>?@ABCDEFGHIJKLMNOPQRSTUVW\"\n+  strmsz_1 = fb_01.sputn(\"racadabra\", 10);\n+  VERIFY( strmsz_1 == 0 );  \n+}\n+\n+main() \n+{\n+  test03();\n+  test05();\n+  return 0;\n+}"}, {"sha": "b6cf1e7db90021003389982b33d85c76a25af484", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/1057.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1057.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,61 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <string>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class nullsetpbuf : public std::filebuf\n+{\n+  char foo[64];\n+public:\n+  nullsetpbuf()\n+  {\n+    setp(foo, foo + 64);\n+    setp(NULL, NULL);\n+  }\n+};\n+\n+// libstdc++/1057\n+void test05()\n+{\n+  std::string text1 = \"abcdefghijklmn\";\n+  \n+  nullsetpbuf nsp;\n+  // Immediate crash as xsputn writes to null pointer\n+  nsp.sputn(text1.c_str(), text1.length());\n+}\n+\n+int main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "3c350a4d360d458d5b6135b65901f80adde87f9a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/9701-1.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F9701-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F9701-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F9701-1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,75 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_05[] = \"filebuf_virtuals-5.txt\"; // empty file, need to create\n+\n+bool over_called;\n+\n+class Derived_filebuf : public std::filebuf\n+{\n+public:\n+  int_type overflow(int_type c)\n+  {\n+    over_called = true;\n+    return std::filebuf::overflow(c);\n+  }\n+  \n+  const char_type* pub_epptr() const\n+  {\n+    return epptr();\n+  }\n+  \n+  const char_type* pub_pptr() const\n+  {\n+    return pptr();\n+  }\n+};\n+\n+// libstdc++/9701 (partial)\n+void test11()\n+{\n+  bool test = true;\n+\n+  bool over_expected;\n+\n+  // sputn\n+  Derived_filebuf dfbuf_02;\n+  dfbuf_02.open(name_05, std::ios_base::out);\n+  over_called = false;\n+  dfbuf_02.sputn(\"sonne's\", 7);\n+  VERIFY( !over_called );\n+  over_expected = dfbuf_02.pub_epptr() == dfbuf_02.pub_pptr();\n+  over_called = false;\n+  dfbuf_02.sputn(\" peak\", 5);\n+  VERIFY( (!over_expected && !over_called)\n+\t  || (over_expected && over_called) );\n+  dfbuf_02.close();\n+}\n+\n+main() \n+{\n+  test11();\n+  return 0;\n+}"}, {"sha": "92af72810b2caf7f86d7d21fdd5049333627dfa7", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sungetc/char/1.cc", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,191 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+// NB: This test assumes that _M_buf_size == 40, and not the usual\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n+// simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n+const char carray_01[] = \"santa cruz or sandiego?\";\n+const char carray_02[] = \"memphis, new orleans, and savanah\";\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n+const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n+const char name_04[] = \"filebuf_virtuals-4.txt\"; // empty file, need to create\n+const char name_05[] = \"filebuf_virtuals-5.txt\"; // empty file, need to create\n+const char name_06[] = \"filebuf_virtuals-6.txt\"; // empty file, need to create\n+const char name_07[] = \"filebuf_virtuals-7.txt\"; // empty file, need to create\n+const char name_08[] = \"filebuf_virtuals-8.txt\"; // empty file, need to create\n+\n+class derived_filebuf: public std::filebuf\n+{\n+ public:\n+  void\n+  set_size(int_type __size) { _M_buf_size_opt = __size; }\n+};\n+\n+derived_filebuf fb_01; // in \n+derived_filebuf fb_02; // out\n+derived_filebuf fb_03; // in | out\n+\n+// Initialize filebufs to be the same size regardless of platform.\n+void test03()\n+{\n+  fb_01.set_size(buffer_size);\n+  fb_02.set_size(buffer_size);\n+  fb_03.set_size(buffer_size);\n+}\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef std::filebuf::traits_type \ttraits_type;\n+  typedef std::filebuf::pos_type \tpos_type;\n+  typedef std::filebuf::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  std::filebuf \t\t\t\tf_tmp;\n+  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\t\tstrmof_1, strmof_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+\n+  fb_01.open(name_01, std::ios_base::in);\n+  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n+  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc);\n+\n+  int_type c1 = fb_01.sbumpc();\n+  int_type c2 = fb_02.sbumpc();\n+  int_type c3 = fb_01.sbumpc();\n+  int_type c4 = fb_02.sbumpc();\n+  int_type c5 = fb_03.sbumpc();\n+  int_type c6 = fb_01.sgetc();\n+  int_type c7 = fb_02.sgetc();\n+  int_type c8 = fb_01.sgetc();\n+  int_type c9 = fb_02.sgetc();\n+\n+  // PUT\n+  strmsz_1 = fb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n+  strmsz_2 = fb_03.sputn(\", i wanna reach out and\", 10);\n+  strmsz_1 = fb_02.sputn(\"racadabras\", 10);\n+  strmsz_1 = fb_01.sputn(\"racadabra\", 10);\n+\n+  // PUTBACK\n+  // int_type pbfail(int_type c)\n+  // called when gptr() null, gptr() == eback(), or traits::eq(*gptr, c) false\n+  // \"pending sequence\" is:\n+  //\t1) everything as defined in underflow\n+  // \t2) + if (traits::eq_int_type(c, traits::eof()), then input\n+  // \tsequence is backed up one char before the pending sequence is\n+  // \tdetermined.\n+  //\t3) + if (not 2) then c is prepended. Left unspecified is\n+  //\twhether the input sequence is backedup or modified in any way\n+  // returns traits::eof() for failure, unspecified other value for success\n+\n+  // int_type sputbackc(char_type c)\n+  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n+  // otherwise decrements in_cur and returns *gptr()\n+  c1 = fb_03.sgetc(); // -1\n+  c2 = fb_03.sputbackc('z');\n+  strmsz_2 = fb_03.in_avail();\n+  c3 = fb_03.sgetc();\n+  //test for _in_cur == _in_beg\n+  // fb_03._M_out_beg = \"bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZracada\" etc\n+  fb_03.pubseekoff(10, std::ios_base::beg, \n+\t\t   std::ios_base::in | std::ios_base::out);\n+  fb_03.sputc('m');\n+  strmsz_1 = fb_03.in_avail(); \n+  c1 = fb_03.sgetc(); \n+  fb_03.snextc();\n+  c2 = fb_03.sputbackc('z');  \n+  strmsz_2 = fb_03.in_avail(); \n+  c3 = fb_03.sgetc();  \n+  fb_03.snextc();\n+  fb_03.sputc('u');\n+  fb_03.sputc('v');\n+  fb_03.sputc('a');\n+  strmsz_1 = fb_03.in_avail();\n+  c2 = fb_03.sputbackc('a');\n+  strmsz_2 = fb_03.in_avail();\n+  c3 = fb_03.sgetc();\n+  //test for ios_base::out\n+  c1 = fb_02.sgetc(); // undefined\n+  c2 = fb_02.sputbackc('a');\n+\n+  // int_type sungetc()\n+  // if in_cur not avail, return pbackfail(), else decrement and\n+  // return to_int_type(*gptr())\n+  // fb_03._M_out_beg = \"uvaacadabras, i wannaZ[\\\\]^_`abcdefghijkl\"\n+  // fb_03._M_out_cur = \"aacadabras, i wannaZ[\\\\]^_`abcdefghijkl\"\n+  strmsz_1 = fb_03.in_avail();\n+  c2 = fb_03.sungetc(); // delete the 'a'\n+  strmsz_2 = fb_03.in_avail();\n+  VERIFY( c2 == 'v' ); //  VERIFY( c2 != traits_type::eof() );\n+  VERIFY( strmsz_1 + 1 == strmsz_2 );\n+  //test for _in_cur == _in_beg\n+  for (int i = 50; i < 32 + 29; ++i)\n+    fb_02.sputc(char(i));\n+  fb_02.pubseekoff(0, std::ios_base::beg, std::ios_base::out);\n+  c1 = fb_02.sgetc(); \n+  strmsz_1 = fb_02.in_avail();\n+  c2 = fb_02.sungetc();\n+  c3 = fb_02.sgetc();\n+  strmsz_2 = fb_02.in_avail();\n+  VERIFY( c1 == c2 );\n+  VERIFY( c2 == c3 );\n+  VERIFY( c1 == traits_type::eof() );\n+  VERIFY( strmsz_1 == strmsz_2 );\n+  //test for _in_cur == _in_end\n+  fb_03.pubseekoff(0, std::ios_base::end);\n+  strmsz_1 = fb_03.in_avail(); // -1 cuz at the end\n+  c1 = fb_03.sgetc(); \n+  c2 = fb_03.sungetc();\n+  strmsz_2 = fb_03.in_avail(); // 1\n+  c3 = fb_03.sgetc();\n+  VERIFY( c1 != c2 );\n+  // VERIFY( c2 == c3 || c2 == traits_type::not_eof(int(c3)) );\n+  VERIFY( strmsz_2 != strmsz_1 );\n+  VERIFY( strmsz_2 == 1 );\n+  //test for ios_base::out\n+}\n+\n+main() \n+{\n+  test03();\n+  test05();\n+  return 0;\n+}"}, {"sha": "02feef5a6e8c8fd4848aad063312c8565038cf7b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sync/char/1057.cc", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F1057.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,112 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class setpbuf : public std::filebuf\n+{\n+  char \t\tbuffer[4];\n+  std::string \tresult;\n+\n+public:\n+\n+  std::string&\n+  get_result()\n+  { return result; }\n+\n+  setpbuf()\n+  {\n+    this->open(\"tmp_1057\", std::ios_base::out | std::ios_base::trunc);\n+    char foo [32];\n+    setp(foo, foo + 32);\n+    setp(buffer, buffer + 4);\n+  }\n+\n+  ~setpbuf()\n+  { \n+    sync(); \n+    close();\n+  }\n+\n+  virtual int_type \n+  overflow(int_type n)\n+  {\n+    if (sync() != 0)\n+      return traits_type::eof();\n+    \n+    result += traits_type::to_char_type(n);\n+    \n+    return n;\n+  }\n+  \n+  virtual int \n+  sync()\n+  {\n+    result.append(pbase(), pptr());\n+    setp(buffer, buffer + 4);\n+    return 0;\n+  }\n+};\n+\n+// libstdc++/1057\n+void test04()\n+{\n+  bool test = true;\n+  std::string text = \"abcdefghijklmn\";\n+  \n+  // 01\n+  setpbuf sp1;\n+  // Here xsputn writes over sp1.result\n+  sp1.sputn(text.c_str(), text.length());\n+\n+  // This crashes when result is accessed\n+  sp1.pubsync();\n+  VERIFY( sp1.get_result() == text );\n+  \n+  // 02\n+  setpbuf sp2;\n+  for (std::string::size_type i = 0; i < text.length(); ++i)\n+    {\n+      // sputc also writes over result\n+      sp2.sputc(text[i]);\n+    }\n+  \n+  // Crash here\n+  sp2.pubsync();\n+  VERIFY( sp2.get_result() == text );\n+}\n+\n+int main() \n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "a0411e2fff301b5cb059bc8ceaa6604120e482ed", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sync/char/9182-1.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F9182-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F9182-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F9182-1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,72 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+const char name_07[] = \"filebuf_virtuals-7.txt\"; // empty file, need to create\n+\n+class errorcvt : public std::codecvt<char, char, mbstate_t>\n+{\n+protected:\n+  std::codecvt_base::result\n+  do_out(mbstate_t&, const char* from, const char*,\n+\t const char*& from_next, char* to, char*,\n+\t char*& to_next) const\n+  {\n+    from_next = from;\n+    to_next = to;\n+    return std::codecvt<char, char, mbstate_t>::error;\n+  }\n+  \n+  virtual bool do_always_noconv() const throw()\n+  {\n+    return false;\n+  }\n+};\n+\n+// libstdc++/9182\n+// basic_filebuf<>::sync and overflow do not write out any characters\n+// if codecvt<>::out returns error\n+void test13()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  locale loc =  locale::classic();\n+  loc = locale(loc, new errorcvt);\n+  \n+  filebuf fbuf1;\n+  fbuf1.pubimbue(loc);\n+  fbuf1.open(name_07, ios_base::out | ios_base::trunc);\n+  fbuf1.sputn(\"ison\", 4); \n+  int r = fbuf1.pubsync();\n+  VERIFY( r == -1 );\n+  fbuf1.close();\n+}\n+\n+main() \n+{\n+  test13();\n+  return 0;\n+}"}, {"sha": "1b900f9e5d96f7509366d7a7e96cd5554fcc6515", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/char/10097.cc", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F10097.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F10097.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F10097.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,101 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <testsuite_hooks.h>\n+\n+class UnderBuf : public std::filebuf\n+{\n+public:\n+  int_type\n+  pub_underflow()\n+  { return underflow(); }\n+\n+  std::streamsize\n+  pub_showmanyc()\n+  { return showmanyc(); }\n+};\n+\n+// libstdc++/10097\n+// filebuf::underflow drops characters.\n+void test16()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  const char* name = \"tmp_fifo1\";\n+  \n+  signal(SIGPIPE, SIG_IGN);\n+  unlink(name);\n+  \n+  if (0 != mkfifo(name, S_IRWXU))\n+    {\n+      VERIFY( false );\n+    }\n+  \n+  int fval = fork();\n+  if (fval == -1)\n+    {\n+      unlink(name);\n+      VERIFY( false );\n+    }\n+  else if (fval == 0)\n+    {\n+      filebuf fbout;\n+      fbout.open(name, ios_base::out);\n+      fbout.sputn(\"0123456789\", 10);\n+      fbout.pubsync();\n+      sleep(2);\n+      fbout.close();\n+      exit(0);\n+    }\n+\n+  UnderBuf fb;\n+  fb.open(name, ios_base::in);\n+  sleep(1);\n+  \n+  fb.sgetc();\n+  streamsize n = fb.pub_showmanyc();\n+\n+  while (n > 0)\n+    {\n+      --n;\n+      \n+      UnderBuf::int_type c = fb.pub_underflow();\n+      VERIFY( c != UnderBuf::traits_type::eof() );\n+      \n+      fb.sbumpc();\n+    }\n+\n+  fb.close();\n+}\n+\n+main() \n+{\n+  test16();\n+  return 0;\n+}"}, {"sha": "28713fbdd286598522d225f28464d4a6337e755e", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/1.cc", "status": "renamed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -46,18 +46,3 @@ void test01()\n   typedef test_type::pos_type pos_type;\n   typedef test_type::off_type off_type;\n }\n-\n-namespace test \n-{\n-  using namespace std;\n-  using __gnu_cxx_test::pod_char;\n-  typedef short type_t;\n-  template class basic_fstream<type_t, char_traits<type_t> >;\n-  template class basic_fstream<pod_char, char_traits<pod_char> >;\n-} // test\n-\n-int main() \n-{\n-  test01();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/27_io/fstream.cc"}, {"sha": "3faf03f4dcf2d54dd2001210243c79f22ae20cff", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,46 @@\n+// 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.8.1.11 - Template class basic_fstream\n+// NB: This file is for testing basic_fstream with NO OTHER INCLUDES.\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+namespace test \n+{\n+  using namespace std;\n+  using __gnu_cxx_test::pod_char;\n+  typedef short type_t;\n+  template class basic_fstream<type_t, char_traits<type_t> >;\n+  template class basic_fstream<pod_char, char_traits<pod_char> >;\n+} // test\n+"}, {"sha": "a9eb1137a26a35f2b84fe1401538c8f7de1b642e", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/3.cc", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,149 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/2020\n+// should be able to use custom char_type, custom traits type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // default ctor\n+  gnu_char_type() { }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n+void test07()\n+{\n+  bool test = true;\n+  typedef std::basic_fstream<gnu_char_type, gnu_char_traits> gnu_fstr;\n+\n+  try\n+    { \n+      gnu_fstr obj;\n+    }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_streambuf<gnu_char_type>::int_type\n+  std::basic_streambuf<gnu_char_type>::_S_pback_size;\n+#endif\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more surf!!!"}, {"sha": "a7f46d61d8a30207beff6c3554f212f33ae60654", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/4.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,50 @@\n+// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+\n+#include <iostream>\n+#include <fstream>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::fstream test_type;\n+  typedef std::iostream base_type;\n+  const test_type& obj = test_type();\n+  const base_type* base = &obj;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "136252b8efb3c948f67f12f9a25be98fa13e4631", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/rdbuf/char/2832.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Frdbuf%2Fchar%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Frdbuf%2Fchar%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Frdbuf%2Fchar%2F2832.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/fstream_members.cc"}, {"sha": "176333cc9f16494dc54f4a305ef38b3a1867cc38", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/1.cc", "status": "renamed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -45,16 +45,3 @@ void test01()\n   typedef test_type::pos_type pos_type;\n   typedef test_type::off_type off_type;\n }\n-\n-namespace test \n-{\n-  using namespace std;\n-  typedef short type_t;\n-  template class basic_ifstream<type_t, char_traits<type_t> >;\n-} // test\n-\n-int main() \n-{\n-  test01();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/27_io/ifstream.cc"}, {"sha": "6fb71a575ad18379daa236824f95aab1c28d59dc", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,42 @@\n+// 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.8.1.5 - Template class basic_ifstream\n+// NB: This file is for testing basic_ifstream with NO OTHER INCLUDES.\n+\n+#include <fstream>\n+\n+// { dg-do compile }\n+\n+namespace test \n+{\n+  using namespace std;\n+  typedef short type_t;\n+  template class basic_ifstream<type_t, char_traits<type_t> >;\n+} // test"}, {"sha": "c1d2544dc3522fc3a77c261bffe6119d3a8d626d", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/3.cc", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,149 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/2020\n+// should be able to use custom char_type, custom traits type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // default ctor\n+  gnu_char_type() { }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n+void test07()\n+{\n+  bool test = true;\n+  typedef std::basic_ifstream<gnu_char_type, gnu_char_traits> gnu_ifstr;\n+\n+  try\n+    { \n+      gnu_ifstr obj;\n+    }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_streambuf<gnu_char_type>::int_type\n+  std::basic_streambuf<gnu_char_type>::_S_pback_size;\n+#endif\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more surf!!!"}, {"sha": "08827c3aec6ffd7d2504b33fbbe031b4c0977df6", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/4.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,50 @@\n+// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+\n+#include <istream>\n+#include <fstream>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::ifstream test_type;\n+  typedef std::istream base_type;\n+  const test_type& obj = test_type();\n+  const base_type* base = &obj;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "e211d0cc64371cf4b333778b91da92b5dfb6ef95", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/cons/char/1.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.7 ifstream member functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_01[] = \"ifstream_members-1.tst\";\n+\n+// http://gcc.gnu.org/ml/libstdc++/2000-07/msg00004.html\n+void test02()\n+{\n+  bool test = true;\n+  const int more_than_max_open_files = 8200;\n+  \n+  for (int i = 0; ++i < more_than_max_open_files;)\n+    {\n+      std::ifstream ifs(name_01);\n+      VERIFY( static_cast<bool>(ifs) );\n+    }\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+"}, {"sha": "5a8b6f8b3a4f5297724f9c0a57898f796d8b7099", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/open/char/1.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.7 ifstream member functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_01[] = \"ifstream_members-1.tst\";\n+\n+// http://gcc.gnu.org/ml/libstdc++/2000-06/msg00136.html\n+void test01()\n+{\n+  bool test = true;\n+  std::ifstream ifs1;\n+  ifs1.close();\n+  \n+  // false as expected:\n+  VERIFY( !ifs1.is_open() );\n+   // this is now true:\n+  VERIFY( !(ifs1) );\n+  \n+  ifs1.open(name_01);\n+  VERIFY( ifs1.is_open() );\n+  // fail bit still true\n+  VERIFY( !(ifs1) );\n+  VERIFY( ifs1.rdstate() == std::ios_base::failbit );\n+\n+  ifs1.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+\n+"}, {"sha": "947a77dce2be3004b38ba0fcbe8467bd99cd4edf", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/rdbuf/char/2832.cc", "status": "renamed", "additions": 3, "deletions": 52, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Frdbuf%2Fchar%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Frdbuf%2Fchar%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Frdbuf%2Fchar%2F2832.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,52 +27,6 @@\n const char name_01[] = \"ifstream_members-1.tst\";\n const char name_02[] = \"ifstream_members-1.txt\";\n \n-// http://gcc.gnu.org/ml/libstdc++/2000-06/msg00136.html\n-bool test00()\n-{\n-  bool test = true;\n-  std::ifstream ifs1;\n-  ifs1.close();\n-  \n-  // false as expected:\n-  VERIFY( !ifs1.is_open() );\n-   // this is now true:\n-  VERIFY( !(ifs1) );\n-  \n-  ifs1.open(name_01);\n-  VERIFY( ifs1.is_open() );\n-  // fail bit still true\n-  VERIFY( !(ifs1) );\n-  VERIFY( ifs1.rdstate() == std::ios_base::failbit );\n-\n-  ifs1.close();\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  \n-  return test;\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2000-07/msg00004.html\n-bool test01()\n-{\n-  bool test = true;\n-  const int more_than_max_open_files = 8200;\n-  \n-  for(int i = 0; ++i < more_than_max_open_files;)\n-    {\n-      std::ifstream ifs(name_01);\n-      VERIFY( static_cast<bool>(ifs) );\n-    }\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n- \n-  return test;\n-}\n-\n void \n redirect_buffer(std::ios& stream, std::streambuf* new_buf) \n { stream.rdbuf(new_buf); }\n@@ -82,7 +36,7 @@ active_buffer(std::ios& stream)\n { return stream.rdbuf(); }\n \n // libstdc++/2832\n-void test02()\n+void test03()\n {\n   bool test = true;\n   const char* strlit01 = \"fuck war\";\n@@ -112,10 +66,7 @@ void test02()\n \n int main()\n {\n-  test00();\n-  test01();\n-\n-  test02();\n+  test03();\n   return 0;\n }\n ", "previous_filename": "libstdc++-v3/testsuite/27_io/ifstream_members.cc"}, {"sha": "1b8de8705010915d52ab1e2ea0994accfe0f95c8", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/1.cc", "status": "renamed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -45,16 +45,3 @@ void test01()\n   typedef test_type::pos_type pos_type;\n   typedef test_type::off_type off_type;\n }\n-\n-namespace test \n-{\n-  using namespace std;\n-  typedef short type_t;\n-  template class basic_ios<type_t, char_traits<type_t> >;\n-} // test\n-\n-int main() \n-{\n-  test01();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/27_io/ios.cc"}, {"sha": "56e2bd8ed692d193f1facc51780f14d888cb4501", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,42 @@\n+// 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.4 - Template class basic_ios\n+// NB: This file is for testing basic_ios with NO OTHER INCLUDES.\n+\n+#include <ios>\n+\n+// { dg-do compile }\n+\n+namespace test \n+{\n+  using namespace std;\n+  typedef short type_t;\n+  template class basic_ios<type_t, char_traits<type_t> >;\n+} // test"}, {"sha": "fa9e8b1804e1ab9e402577dfcfe8c62c76c6e917", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/3.cc", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,147 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/2020\n+// should be able to use custom char_type, custom traits type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // default ctor\n+  gnu_char_type() { }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n+class gnu_ios: public std::basic_ios<gnu_char_type, gnu_char_traits>\n+{ };\n+\n+void test07()\n+{\n+  bool test = true;\n+  \n+  try\n+    { gnu_ios obj; }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_streambuf<gnu_char_type>::int_type\n+  std::basic_streambuf<gnu_char_type>::_S_pback_size;\n+#endif\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more surf!!!"}, {"sha": "b527499dcb405eb2869b86f6ba987ce99c2430ee", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/4.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,52 @@\n+// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+\n+#include <ios>\n+#include <sstream>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::ios test_type;\n+  typedef std::ios_base base_type;\n+  \n+  std::stringbuf buf;\n+  const test_type& obj = test_type(&buf);\n+  const base_type* base = &obj;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "6629371ed039f5747fde1397e33d718d3ffd2f94", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/clear/char/1.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fclear%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fclear%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fclear%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,81 @@\n+// 1999-09-20 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.4.2 basic_ios member functions\n+\n+// NB: Don't include any other headers in this file.\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+// 27.4.4.3 basic_ios iostate flags function\n+void test01()\n+{\n+  bool test = true;\n+\n+  typedef std::ios_base::fmtflags fmtflags;\n+  typedef std::ios_base::iostate iostate;\n+  using std::ios_base;\n+\n+  iostate iostate02, iostate03;\n+  const iostate iostate01 = std::ios_base::badbit | std::ios_base::eofbit;\n+  const iostate iostate04 = std::ios_base::badbit;\n+\n+  std::ios ios_01(NULL);\n+  std::ios::char_type ct01;\n+  std::ios::char_type ct02('x');;\n+\n+  // bool fail() const\n+  VERIFY( ios_01.fail() );\n+\n+  // bool operator!() const\n+  VERIFY( !ios_01 );\n+  \n+  // iostate rdstate() const\n+  iostate03 = ios_01.rdstate();\n+  VERIFY( static_cast<bool>(iostate03 & std::ios_base::badbit) );\n+\n+  // void clear(iostate state = goodbit)\n+  try {\n+    ios_01.clear(std::ios_base::eofbit);\n+    iostate02 = ios_01.rdstate();\n+    VERIFY( static_cast<bool>(iostate02 & iostate01) );\n+  }\t\t \n+  catch(std::ios_base::failure& fail) {\n+    VERIFY( false );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2c8993afd7e3a78d09f6d606dd1875ca25d56cf3", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/cons/char/1.cc", "status": "renamed", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-23 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -79,13 +79,10 @@ void test01()\n   VERIFY( ios_01.precision() == 6 );  \n   VERIFY( ios_01.fill() == ios_01.widen(' ') );\n   VERIFY( ios_01.getloc() == glocale );    \n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n }\n \n-int main() {\n+int main() \n+{\n   test01();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/27_io/ios_ctor.cc"}, {"sha": "84808f8b14fd79dcdf983364ea736315325354c9", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/cons/char/2.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,61 @@\n+// 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.2.1.6 class ios_base::init\n+\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+// Non-required instantiations don't have the required facets inbued,\n+// by default, into the locale object.\n+// See 27.4.4.1\n+class gnu_ios: public std::basic_ios<char> { };\n+\n+void test01() \n+{\n+  bool test = true;\n+\n+  // 01: Doesn't call basic_ios::init, which uses ctype<char_type>..\n+  // This should be unambiguously correct.\n+  try\n+    {\n+      gnu_ios gios;\n+    }\n+  catch(...)\n+    { \n+      test = false; \n+    }\n+  VERIFY( test );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a0f7afa42870dc7e2b51ca17c43496967ffd5ab7", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/cons/char/3.cc", "status": "renamed", "additions": 1, "deletions": 231, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,6 +1,6 @@\n // 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,9 +29,7 @@\n \n // 27.4.2.1.6 class ios_base::init\n \n-#include <fstream>\n #include <sstream>\n-#include <iostream>\n #include <testsuite_hooks.h>\n \n // char_traits specialization\n@@ -115,163 +113,20 @@ namespace std\n       static int_type \n       eof() { return static_cast<int_type>(-1); }\n \n-      static int_type \n-      not_eof(const int_type& __c)\n-      { return eq_int_type(__c, eof()) ? int_type(0) : __c; }\n-    };\n-\n-  template<>\n-    struct char_traits<unsigned char>\n-    {\n-      typedef unsigned char \tchar_type;\n-      // Unsigned as wint_t in unsigned.\n-      typedef unsigned long  \tint_type;\n-      typedef streampos \tpos_type;\n-      typedef streamoff \toff_type;\n-      typedef mbstate_t \tstate_type;\n-      \n-      static void \n-      assign(char_type& __c1, const char_type& __c2)\n-      { __c1 = __c2; }\n-\n-      static bool \n-      eq(const char_type& __c1, const char_type& __c2)\n-      { return __c1 == __c2; }\n-\n-      static bool \n-      lt(const char_type& __c1, const char_type& __c2)\n-      { return __c1 < __c2; }\n-\n-      static int \n-      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-      { \n-\tfor (size_t __i = 0; __i < __n; ++__i)\n-\t  if (!eq(__s1[__i], __s2[__i]))\n-\t    return lt(__s1[__i], __s2[__i]) ? -1 : 1;\n-\treturn 0; \n-      }\n-\n-      static size_t\n-      length(const char_type* __s)\n-      { \n-\tconst char_type* __p = __s; \n-\twhile (__p && *__p) \n-\t  ++__p; \n-\treturn (__p - __s); \n-      }\n-\n-      static const char_type* \n-      find(const char_type* __s, size_t __n, const char_type& __a)\n-      { \n-\tfor (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)\n-\t  if (*__p == __a) return __p;\n-\treturn 0;\n-      }\n-\n-      static char_type* \n-      move(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return (char_type*) memmove(__s1, __s2, __n * sizeof(char_type)); }\n-\n-      static char_type* \n-      copy(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return (char_type*) memcpy(__s1, __s2, __n * sizeof(char_type)); }\n-\n-      static char_type* \n-      assign(char_type* __s, size_t __n, char_type __a)\n-      { \n-\tfor (char_type* __p = __s; __p < __s + __n; ++__p) \n-\t  assign(*__p, __a);\n-        return __s; \n-      }\n-\n-      static char_type \n-      to_char_type(const int_type& __c)\n-      { return char_type(); }\n-\n-      static int_type \n-      to_int_type(const char_type& __c) { return int_type(); }\n-\n-      static bool \n-      eq_int_type(const int_type& __c1, const int_type& __c2)\n-      { return __c1 == __c2; }\n-\n-      static int_type \n-      eof() { return static_cast<int_type>(-1); }\n-\n       static int_type \n       not_eof(const int_type& __c)\n       { return eq_int_type(__c, eof()) ? int_type(0) : __c; }\n     };\n } // namespace std\n \n-class gnu_filebuf: public std::filebuf\n-{\n-  int i;\n-public:\n-  gnu_filebuf(int j = 1): i(j) { }\n-  ~gnu_filebuf() { --i; }\n-  int get_i() { return i;}\n-};\n-\n-const int initial = 4;\n-gnu_filebuf buf(initial);\n-\n-// libstdc++/3045, in a vague way.\n-void test01()\n-{\n-  bool test = true;\n-  int k1;\n-\n-  // 1 normal\n-  k1 = buf.get_i();\n-  VERIFY( k1 == initial );\n-  {\n-    std::cout.rdbuf(&buf);\n-  }\n-  k1 = buf.get_i();\n-  VERIFY( k1 == initial );\n-\n-  // 2 syncd off\n-  k1 = buf.get_i();\n-  VERIFY( k1 == initial );\n-  {\n-    std::cout.rdbuf(&buf);\n-    std::ios_base::sync_with_stdio(false); // make sure doesn't clobber buf\n-  }\n-  k1 = buf.get_i();\n-  VERIFY( k1 == initial );\n-\n-  // 3 callling init\n-  k1 = buf.get_i();\n-  VERIFY( k1 == initial );\n-  {\n-    std::cout.rdbuf(&buf);\n-    std::ios_base::Init make_sure_initialized;\n-  }\n-  k1 = buf.get_i();\n-  VERIFY( k1 == initial );\n-}\n-\n // Non-required instantiations don't have the required facets inbued,\n // by default, into the locale object.\n // See 27.4.4.1\n-class gnu_ios: public std::basic_ios<char> { };\n \n void test02() \n {\n   bool test = true;\n \n-  // 01: Doesn't call basic_ios::init, which uses ctype<char_type>..\n-  // This should be unambiguously correct.\n-  try\n-    {\n-      gnu_ios gios;\n-    }\n-  catch(...)\n-    { \n-      test = false; \n-    }\n-\n   // 02: Calls basic_ios::init, which may call ctype<char_type>...\n   try\n     {\n@@ -302,80 +157,6 @@ void test02()\n   VERIFY( test );\n }\n \n-// libstdc++/3983\n-void test03()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  // input streams\n-  basic_istringstream<unsigned char> iss_uc;\n-  unsigned char arr[6] = { 'a', 'b', 'c', 'd', 'e' };\n-\n-  // Sentry uses locale info, so have to try one formatted input.\n-  try \n-    { \n-      int i;\n-      iss_uc >> i;\n-    }\n-  catch (bad_cast& obj)\n-    { }\n-  catch (exception& obj)\n-    { test = false; }\n-  \n-  try \n-    { \n-      iss_uc >> arr;\n-    }\n-  catch (bad_cast& obj)\n-    { }\n-  catch (exception& obj)\n-    { test = false; }\n-  \n-  try \n-    { \n-      iss_uc >> ws;\n-    }\n-  catch (bad_cast& obj)\n-    { }\n-  catch (exception& obj)\n-    { test = false; }\n- \n-  try \n-    { \n-      basic_string<unsigned char> s_uc(arr);\n-      iss_uc >> s_uc;\n-    }\n-  catch (bad_cast& obj)\n-    { }\n-  catch (exception& obj)\n-    { test = false; }\n-\n-  // output streams\n-  basic_ostringstream<unsigned char> oss_uc;\n-\n-  try \n-    { \n-      bool b = true;\n-      oss_uc << b;\n-    }\n-  catch (bad_cast& obj)\n-    { }\n-  catch (exception& obj)\n-    { test = false; }\n-   \n-  VERIFY( test );\n-}\n-\n-// libstdc++/5268\n-int test04()\n-{\n-  std::stringbuf b1;\n-  std::cout.rdbuf( &b1 );\n-  std::cout << \"hello\\n\";\n-  return 0;\n-}\n-\n #if !__GXX_WEAK__\n // Explicitly instantiate for systems with no COMDAT or weak support.\n template \n@@ -385,21 +166,10 @@ template\n template \n   unsigned short\n   std::basic_string<unsigned short>::_Rep::_S_terminal;\n-\n-template \n-  std::basic_string<unsigned char>::size_type \n-  std::basic_string<unsigned char>::_Rep::_S_max_size;\n-\n-template \n-  unsigned char\n-  std::basic_string<unsigned char>::_Rep::_S_terminal;\n #endif\n \n int main()\n {\n-  test01();\n   test02();\n-  test03();\n-  test04();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/27_io/ios_init.cc"}, {"sha": "191cbb60830741b73ba761b4337bfb50e9a2c298", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/copyfmt/char/1.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,87 @@\n+// 1999-09-20 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.4.2 basic_ios member functions\n+\n+// NB: Don't include any other headers in this file.\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+// 27.4.4.3 basic_ios iostate flags function\n+void test02()\n+{\n+  bool test = true;\n+\n+  typedef std::ios_base::fmtflags fmtflags;\n+  typedef std::ios_base::iostate iostate;\n+  using std::ios_base;\n+\n+  iostate iostate02, iostate03;\n+  const iostate iostate01 = std::ios_base::badbit | std::ios_base::eofbit;\n+  const iostate iostate04 = std::ios_base::badbit;\n+\n+  // basic_ios& copyfmt(const basic_ios& rhs)\n+  {\n+    std::ios ios_01(NULL);\n+    std::ios ios_02(NULL);  \n+    ios_01.exceptions(std::ios_base::eofbit);\n+    ios_02.exceptions(std::ios_base::eofbit);\n+    \n+    try {\n+    ios_01.copyfmt(ios_02);\n+    }\t\t \n+    catch(...) {\n+      VERIFY( false );\n+    }\n+  }\n+\n+  {\n+    std::ios ios_01(NULL);\n+    std::ios ios_02(NULL);  \n+    ios_01.clear(std::ios_base::eofbit);\n+    ios_02.exceptions(std::ios_base::eofbit);\n+\n+    try {\n+      ios_01.copyfmt(ios_02);\n+      VERIFY( false );\n+    }\t\t \n+    catch(std::ios_base::failure& fail) {\n+      VERIFY( true );\n+    }\n+    catch(...) {\n+      VERIFY( false );\n+    }\n+  }\n+}\n+\n+int main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "03d45154e35bb79be312cf00153ff4b1bf567bcb", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/copyfmt/char/2.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,73 @@\n+// 1999-09-20 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.4.2 basic_ios member functions\n+\n+// NB: Don't include any other headers in this file.\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+// copyfmt and locales.\n+void test03()\n+{\n+  bool test = true;\n+\n+  using namespace std;\n+\n+  typedef std::ios_base::fmtflags fmtflags;\n+  typedef std::ios_base::iostate iostate;\n+  locale loc_c = locale::classic();\n+  locale loc_de(\"de_DE\");\n+  std::ios ios_01(NULL);\n+  std::ios ios_02(NULL);\n+  ios_01.imbue(loc_c);\n+  ios_02.imbue(loc_de);\n+  ios_02.setstate(ios_base::badbit);\n+  VERIFY( loc_c == ios_01.getloc() );\n+  VERIFY( loc_de == ios_02.getloc() );\n+\n+  iostate ios1 = ios_01.rdstate();\n+  iostate ios2 = ios_02.rdstate();\n+  streambuf* sb1 = ios_01.rdbuf();\n+  streambuf* sb2 = ios_02.rdbuf();\n+  ios_01.copyfmt(ios_02);\n+\n+  VERIFY( loc_de == ios_01.getloc() );\n+  VERIFY( ios_01.getloc() == ios_02.getloc() );\n+  VERIFY( ios1 == ios_01.rdstate() );\n+  VERIFY( ios2 == ios_02.rdstate() );\n+  VERIFY( sb1 == ios_01.rdbuf() );\n+  VERIFY( sb2 == ios_02.rdbuf() );\n+}\n+\n+int main() \n+{\n+  __gnu_cxx_test::run_test_wrapped_generic_locale_exception_catcher(test03);\n+  return 0;\n+}"}, {"sha": "f593b90259d89467391e1e1c55166b077b3ae36e", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/exceptions/char/1.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,88 @@\n+// 1999-09-20 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.4.2 basic_ios member functions\n+\n+// NB: Don't include any other headers in this file.\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test = true;\n+\n+  typedef std::ios_base::fmtflags fmtflags;\n+  typedef std::ios_base::iostate iostate;\n+  using std::ios_base;\n+\n+  iostate iostate02, iostate03;\n+  const iostate iostate01 = std::ios_base::badbit | std::ios_base::eofbit;\n+  const iostate iostate04 = std::ios_base::badbit;\n+\n+  // iostate exceptions() const\n+  {\n+    std::ios ios_01(NULL);\n+    VERIFY( ios_01.exceptions() == std::ios_base::goodbit );\n+  }\n+\n+  // void exceptions(iostate except)\n+  {\n+    std::ios ios_01(NULL);\n+    try {\n+      ios_01.exceptions(std::ios_base::eofbit);\n+    }\t\t \n+    catch(...) {\n+      VERIFY( false );\n+    }\n+    iostate02 = ios_01.exceptions();\n+    VERIFY( static_cast<bool>(iostate02 & std::ios_base::eofbit) );\n+  }\n+\n+  {\n+    std::ios ios_01(NULL);\n+    ios_01.clear(std::ios_base::eofbit);\n+    try {\n+      ios_01.exceptions(std::ios_base::eofbit);\n+      VERIFY( false );\n+    }\t\t \n+    catch(std::ios_base::failure& fail) {\n+      iostate02 = ios_01.exceptions();\n+      VERIFY( static_cast<bool>(iostate02 & std::ios_base::eofbit) );\n+    }\n+    catch(...) {\n+      VERIFY( false );\n+    }\n+  }\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a95bd99c4dc74f541bd51fb7b634238a06b5dc15", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/locales/char/1.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Flocales%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Flocales%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Flocales%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,66 @@\n+// 1999-09-20 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.4.2 basic_ios member functions\n+\n+// NB: Don't include any other headers in this file.\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test = true;\n+\n+  std::ios_base::fmtflags flag02, flag03;\n+  const std::ios_base::fmtflags flag01 = std::ios_base::skipws \n+                                         | std::ios_base::dec;\n+ \n+  const std::locale c_loc = std::locale::classic();\n+\n+  std::ios ios_01(NULL);\n+  std::ios::char_type ct01;\n+  std::ios::char_type ct02('x');;\n+\n+  // 27.4.2.3 locales\n+  ios_01.imbue(c_loc);\n+\n+  // char narrow(char_type c, char dfault) const;\n+  char c1 = ios_01.narrow(ct02, 0);\n+  VERIFY( c1 == 'x' );\n+\n+  // char_type widen(char c) const;\n+  ct01 = ios_01.widen('c');\n+  VERIFY( ct01 == 'c' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "dfd9c0552b87222e26938e888f80668addfbc5df", "filename": "libstdc++-v3/testsuite/27_io/basic_iostream/1.cc", "status": "renamed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -45,16 +45,3 @@ void test01()\n   typedef test_type::pos_type pos_type;\n   typedef test_type::off_type off_type;\n }\n-\n-namespace test \n-{\n-  using namespace std;\n-  typedef short type_t;\n-  template class basic_iostream<type_t, char_traits<type_t> >;\n-} // test\n-\n-int main() \n-{\n-  test01();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/27_io/iostream.cc"}, {"sha": "b77ec4f79f24f9de671a4053719f1316a3305a9f", "filename": "libstdc++-v3/testsuite/27_io/basic_iostream/2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,42 @@\n+// 2002-01-08 bkoz\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.6.1.5 - Template class basic_iostream\n+// NB: This file is for testing iostream with NO OTHER INCLUDES.\n+\n+// { dg-do compile }\n+\n+#include <istream>\n+\n+namespace test \n+{\n+  using namespace std;\n+  typedef short type_t;\n+  template class basic_iostream<type_t, char_traits<type_t> >;\n+} // test"}, {"sha": "9cad3051aeba40d9224cb1e55dddf2a33d4f236f", "filename": "libstdc++-v3/testsuite/27_io/basic_iostream/3.cc", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,149 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/2020\n+// should be able to use custom char_type, custom traits type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // default ctor\n+  gnu_char_type() { }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n+void test07()\n+{\n+  bool test = true;\n+  typedef std::basic_iostream<gnu_char_type, gnu_char_traits> gnu_iostr;\n+\n+  try\n+    { \n+      gnu_iostr obj(NULL); \n+    }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_streambuf<gnu_char_type>::int_type\n+  std::basic_streambuf<gnu_char_type>::_S_pback_size;\n+#endif\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more surf!!!"}, {"sha": "dbcf83037461ce6dab42e4106c65fecdf43df313", "filename": "libstdc++-v3/testsuite/27_io/basic_iostream/4.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,54 @@\n+// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+\n+#include <iostream>\n+#include <sstream>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::iostream test_type;\n+  typedef std::istream base_type1;\n+  typedef std::ostream base_type2;\n+\n+  std::stringbuf buf;\n+  const test_type& obj = test_type(&buf);\n+  const base_type1* base1 = &obj;\n+  const base_type2* base2 = &obj;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "3338af8279bad49ffaa06efab15ad2d737117cd2", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/1.cc", "status": "renamed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -46,18 +46,3 @@ void test01()\n   typedef test_type::pos_type pos_type;\n   typedef test_type::off_type off_type;\n }\n-\n-namespace test \n-{\n-  using namespace std;\n-  using __gnu_cxx_test::pod_char;\n-  typedef short type_t;\n-  template class basic_istream<type_t, char_traits<type_t> >;\n-  template class basic_istream<pod_char, char_traits<pod_char> >;\n-} // test\n-\n-int main() \n-{\n-  test01();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/27_io/istream.cc"}, {"sha": "40ec332923d13d2a0733ed745a50a5028a267a47", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,45 @@\n+// 1999-09-20 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.6.1.1 basic_istream\n+// NB: This file is for testing istream with NO OTHER INCLUDES.\n+\n+#include <istream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+namespace test \n+{\n+  using namespace std;\n+  using __gnu_cxx_test::pod_char;\n+  typedef short type_t;\n+  template class basic_istream<type_t, char_traits<type_t> >;\n+  template class basic_istream<pod_char, char_traits<pod_char> >;\n+} // test"}, {"sha": "1a7a04c703c3d0e89a6b39b82a0c131fb7bcff04", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/3.cc", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,147 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <istream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/2020\n+// should be able to use custom char_type, custom traits type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // default ctor\n+  gnu_char_type() { }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n+void test07()\n+{\n+  bool test = true;\n+  typedef std::basic_istream<gnu_char_type, gnu_char_traits> gnu_istr;\n+\n+  try\n+    { gnu_istr obj(NULL); }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_streambuf<gnu_char_type>::int_type\n+  std::basic_streambuf<gnu_char_type>::_S_pback_size;\n+#endif\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more surf!!!"}, {"sha": "4282fef84b2eb96fb2abf15d674d1f23312cdda2", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/4.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,52 @@\n+// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+\n+#include <istream>\n+#include <sstream>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::istream test_type;\n+  typedef std::ios base_type;\n+  \n+  std::stringbuf buf;\n+  const test_type& obj = test_type(&buf);\n+  const base_type* base = &obj;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "055c4fb02c52fdcf4deb4da887532d99498060ea", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/exceptions/char/9561.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fexceptions%2Fchar%2F9561.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fexceptions%2Fchar%2F9561.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fexceptions%2Fchar%2F9561.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_exception.cc"}, {"sha": "b2fdd2691e753d70af7857cf3a8ae3bf6dc98c5c", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/01.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F01.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/01.cc"}, {"sha": "374fbd8e0c7efc2e16b3aff04abfda8dc7b7b66b", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/02.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F02.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F02.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F02.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/02.cc"}, {"sha": "869d828b09199efff8742fc5186eac7be57e286c", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/03.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F03.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/03.cc"}, {"sha": "de92bcd52cb005e7c276ac00d82d0254209aecbd", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/06.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F06.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F06.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F06.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/06.cc"}, {"sha": "118668ea1d98789cdf18bd91fd9aac54f42d8654", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/07.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F07.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F07.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F07.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/07.cc"}, {"sha": "f8491612ddf8b02d60f418e2e0dde0d1c2accf31", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/08.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F08.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F08.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F08.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/08.cc"}, {"sha": "37e175e6f7cd94bf580a907e5115032c66f7f297", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/09.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F09.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F09.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F09.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/09.cc"}, {"sha": "bc67190533f869fe4d8af761fed6fb7f38f3ba47", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/10.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F10.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/10.cc"}, {"sha": "309875dfc54afadeb40e52e27ff847fd0a7b9842", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/11.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F11.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/11.cc"}, {"sha": "64795c058125c106745556424c53e739e2ac9913", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/12.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F12.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/12.cc"}, {"sha": "935d456f448a0deda233cfd2a13615f53aebb3b6", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/13.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F13.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/13.cc"}, {"sha": "0a235bbe819bda62a3814574f480706518e97e8c", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/1.cc", "status": "renamed", "additions": 5, "deletions": 125, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-26 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation\n+// Copyright (C) 1999, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,8 +24,8 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-bool test01() {\n-\n+void test01() \n+{\n   bool test = true;\n   std::string str_01;\n   const std::string str_02(\"coltrane playing 'softly as a morning sunrise'\");\n@@ -74,7 +74,6 @@ bool test01() {\n   VERIFY( state1 == state2 );\n   VERIFY( !static_cast<bool>(state2 & statefail) );\n \n-\n   // template<_CharT, _Traits>\n   //  basic_istream& operator>>(istream&, unsigned char*)\n   unsigned char array2[n];\n@@ -88,9 +87,8 @@ bool test01() {\n   VERIFY( array2[6] == 'y' );\n   int1 = is_02.peek(); // should be ' '\n   VERIFY( int1 == ' ' );\n-\n-\n-   // template<_CharT, _Traits>\n+  \n+  // template<_CharT, _Traits>\n   //  basic_istream& operator>>(istream&, signed char*)\n   signed char array3[n];\n   state1 = is_02.rdstate();\n@@ -102,128 +100,10 @@ bool test01() {\n   VERIFY( array3[1] == 's' );\n   int1 = is_02.peek(); // should be ' '\n   VERIFY( int1 == ' ' );\n- \n-\n-  // testing with width() control enabled.\n-  is_02.width(8);\n-  state1 = is_02.rdstate();\n-  is_02 >> array1;   // should snake a\n-  state2 = is_02.rdstate();\n-  VERIFY( state1 == state2 );\n-  VERIFY( !ctraits_type::compare(array1, \"a\", 2) );\n-\n-  is_02.width(1);\n-  state1 = is_02.rdstate();\n-  is_02 >> array1;   // should snake nothing, set failbit\n-  state2 = is_02.rdstate();\n-  VERIFY( state1 != state2 );\n-  VERIFY( state2 == statefail );\n-  VERIFY( array1[0] == '\\0' );\n-\n-  is_02.width(8);\n-  is_02.clear();\n-  state1 = is_02.rdstate();\n-  VERIFY( !state1 );\n-  is_02 >> array1;   // should snake \"morning\"\n-  state2 = is_02.rdstate();\n-  VERIFY( state1 == state2 );\n-  VERIFY( !ctraits_type::compare(array1, \"morning\", 8) );\n-\n-  // testing for correct exception setting\n-  const std::string str_04(\"   impulse!!\");\n-  std::stringbuf isbuf_03(str_04, std::ios_base::in);\n-  std::stringbuf isbuf_04(str_04, std::ios_base::in);\n-  std::istream is_03(&isbuf_03);\n-  std::istream is_04(&isbuf_04);\n-\n-  is_03 >> array1;\n-  VERIFY( !ctraits_type::compare(array1,\"impulse!!\", 10) );\n-  VERIFY( is_03.rdstate() == std::ios_base::eofbit );\n-\n-  is_04.width(9);\n-  is_04 >> array1;\n-  VERIFY( ! std::ios::traits_type::compare(array1,\"impulse!\", 9) );\n-  VERIFY( !is_04.rdstate() ); \n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n- \n-  return test;\n }\n \n-bool test02() {\n-\n-  typedef std::ios::traits_type ctraits_type;\n-\n-  bool test = true;\n-  std::string str_01;\n-  const std::string str_02(\"or coltrane playing tunji with jimmy garrison\");\n-  const std::string str_03(\"coltrane\");\n-\n-  std::stringbuf isbuf_01(std::ios_base::in);\n-  std::stringbuf isbuf_02(str_02, std::ios_base::in);\n-  std::istream is_01(NULL);\n-  std::istream is_02(&isbuf_02);\n-  std::ios_base::iostate state1, state2, statefail;\n-  statefail = std::ios_base::failbit;\n-\n-  // template<_CharT, _Traits>\n-  //  basic_istream& operator>>(istream&, _CharT&)\n-  char c1 = 'c', c2 = 'c';\n-  state1 = is_01.rdstate();\n-  is_01 >> c1;   \n-  state2 = is_01.rdstate();\n-  VERIFY( state1 != state2 );\n-  VERIFY( c1 == c2 );\n-  VERIFY( static_cast<bool>(state2 & statefail) );\n-\n-  state1 = is_02.rdstate();\n-  is_02 >> c1;   \n-  state2 = is_02.rdstate();\n-  VERIFY( state1 == state2 );\n-  VERIFY( c1 == 'o' );\n-  is_02 >> c1;   \n-  is_02 >> c1;   \n-  VERIFY( c1 == 'c' );\n-  VERIFY( !static_cast<bool>(state2 & statefail) );\n-\n-  // template<_CharT, _Traits>\n-  //  basic_istream& operator>>(istream&, unsigned char&)\n-  unsigned char uc1 = 'c';\n-  state1 = is_02.rdstate();\n-  is_02 >> uc1;   \n-  state2 = is_02.rdstate();\n-  VERIFY( state1 == state2 );\n-  VERIFY( uc1 == 'o' );\n-  is_02 >> uc1;   \n-  is_02 >> uc1;   \n-  VERIFY( uc1 == 't' );\n-\n-  // template<_CharT, _Traits>\n-  //  basic_istream& operator>>(istream&, signed char&)\n-  signed char sc1 = 'c';\n-  state1 = is_02.rdstate();\n-  is_02 >> sc1;   \n-  state2 = is_02.rdstate();\n-  VERIFY( state1 == state2 );\n-  VERIFY( sc1 == 'r' );\n-  is_02 >> sc1;   \n-  is_02 >> sc1;   \n-  VERIFY( sc1 == 'n' );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n- \n-  return test;\n-}\n-\n-\n int main()\n {\n   test01();\n-  test02();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_char.cc"}, {"sha": "d48072cd329d134e9841672ed03deaa2a40f817b", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/2.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,92 @@\n+// 1999-07-26 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 character extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02() \n+{\n+  typedef std::ios::traits_type ctraits_type;\n+\n+  bool test = true;\n+  std::string str_01;\n+  const std::string str_02(\"or coltrane playing tunji with jimmy garrison\");\n+  const std::string str_03(\"coltrane\");\n+\n+  std::stringbuf isbuf_01(std::ios_base::in);\n+  std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+  std::istream is_01(NULL);\n+  std::istream is_02(&isbuf_02);\n+  std::ios_base::iostate state1, state2, statefail;\n+  statefail = std::ios_base::failbit;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(istream&, _CharT&)\n+  char c1 = 'c', c2 = 'c';\n+  state1 = is_01.rdstate();\n+  is_01 >> c1;   \n+  state2 = is_01.rdstate();\n+  VERIFY( state1 != state2 );\n+  VERIFY( c1 == c2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+\n+  state1 = is_02.rdstate();\n+  is_02 >> c1;   \n+  state2 = is_02.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( c1 == 'o' );\n+  is_02 >> c1;   \n+  is_02 >> c1;   \n+  VERIFY( c1 == 'c' );\n+  VERIFY( !static_cast<bool>(state2 & statefail) );\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(istream&, unsigned char&)\n+  unsigned char uc1 = 'c';\n+  state1 = is_02.rdstate();\n+  is_02 >> uc1;   \n+  state2 = is_02.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( uc1 == 'o' );\n+  is_02 >> uc1;   \n+  is_02 >> uc1;   \n+  VERIFY( uc1 == 't' );\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(istream&, signed char&)\n+  signed char sc1 = 'c';\n+  state1 = is_02.rdstate();\n+  is_02 >> sc1;   \n+  state2 = is_02.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( sc1 == 'r' );\n+  is_02 >> sc1;   \n+  is_02 >> sc1;   \n+  VERIFY( sc1 == 'n' );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "1ab02a1990e9b95f51c0b3e984dc63fa0ed0946a", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/3.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,95 @@\n+// 1999-07-26 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 character extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01() \n+{\n+  bool test = true;\n+  std::string str_01;\n+  const std::string str_02(\"coltrane playing 'softly as a morning sunrise'\");\n+  const std::string str_03(\"coltrane\");\n+\n+  std::stringbuf isbuf_01(std::ios_base::in);\n+  std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+  std::istream is_01(NULL);\n+  std::istream is_02(&isbuf_02);\n+\n+  std::ios_base::iostate state1, state2, statefail;\n+  statefail = std::ios_base::failbit;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(istream&, _CharT*)\n+  int n = 20;\n+  char array1[n];\n+  typedef std::ios::traits_type ctraits_type;\n+  ctraits_type::int_type i1, i2;\n+\n+  // testing with width() control enabled.\n+  is_02.width(8);\n+  state1 = is_02.rdstate();\n+  is_02 >> array1;   // should snake \"coltran\"\n+  state2 = is_02.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( !ctraits_type::compare(array1, \"coltran\", 7) );\n+\n+  is_02.width(1);\n+  state1 = is_02.rdstate();\n+  is_02 >> array1;   // should snake nothing, set failbit\n+  state2 = is_02.rdstate();\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == statefail );\n+  VERIFY( array1[0] == '\\0' );\n+\n+  is_02.width(8);\n+  is_02.clear();\n+  state1 = is_02.rdstate();\n+  VERIFY( !state1 );\n+  is_02 >> array1;   // should snake \"e\"\n+  state2 = is_02.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( !ctraits_type::compare(array1, \"e\", 1) );\n+\n+  // testing for correct exception setting\n+  const std::string str_04(\"   impulse!!\");\n+  std::stringbuf isbuf_03(str_04, std::ios_base::in);\n+  std::stringbuf isbuf_04(str_04, std::ios_base::in);\n+  std::istream is_03(&isbuf_03);\n+  std::istream is_04(&isbuf_04);\n+\n+  is_03 >> array1;\n+  VERIFY( !ctraits_type::compare(array1,\"impulse!!\", 10) );\n+  VERIFY( is_03.rdstate() == std::ios_base::eofbit );\n+\n+  is_04.width(9);\n+  is_04 >> array1;\n+  VERIFY( ! std::ios::traits_type::compare(array1,\"impulse!\", 9) );\n+  VERIFY( !is_04.rdstate() ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9d59395bde491fd2757fa6d487373a15e2839d04", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/9826.cc", "status": "renamed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9826.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9826.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9826.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -35,27 +35,6 @@\n \n // { dg-do compile }\n \n-// libstdc++/7216\n-void test01()\n-{\n-  // Check for required typedefs\n-  typedef std::stringstream test_type;\n-  typedef test_type::char_type char_type;\n-  typedef test_type::traits_type traits_type;\n-  typedef test_type::int_type int_type;\n-  typedef test_type::pos_type pos_type;\n-  typedef test_type::off_type off_type;\n-}\n-\n-namespace test \n-{\n-  using namespace std;\n-  using __gnu_cxx_test::pod_char;\n-  typedef short type_t;\n-  template class basic_stringstream<type_t, char_traits<type_t> >;\n-  template class basic_stringstream<pod_char, char_traits<pod_char> >;\n-} // test\n-\n // libstdc++/9826\n void test02()\n {\n@@ -75,7 +54,6 @@ void test02()\n \n int main() \n {\n-  test01();\n   test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/27_io/stringstream.cc"}, {"sha": "c2afc80348cabbc067cb7eb4801646aac35ce611", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/1.cc", "status": "renamed", "additions": 3, "deletions": 68, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-28 bkoz\n \n-// Copyright (C) 1999, 2001 Free Software Foundation\n+// Copyright (C) 1999, 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,10 +27,9 @@\n #include <fstream>\n #include <testsuite_hooks.h>\n \n-\n // stringbufs.\n-bool test01() {\n-\n+void test01() \n+{\n   typedef std::ios::traits_type ctraits_type;\n \n   bool test = true;\n@@ -135,74 +134,10 @@ bool test01() {\n   VERIFY( strtmp == str_02 ); // as only an \"in\" buffer\n   VERIFY( isbuf_03.sgetc() == 'a' );\n   VERIFY( is_04.peek() == ctraits_type::eof() );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n- \n-  return test;\n-}\n-\n-// filebufs.\n-bool test02() {\n-\n-  bool test = true;\n-  typedef std::ios::traits_type ctraits_type;\n-  const char name_01[] = \"istream_extractor_other-1.txt\"; //read \n-  const char name_02[] = \"istream_extractor_other-2.txt\"; //write\n-\n-  std::filebuf fbin, fbout;\n-  fbin.open(name_01, std::ios_base::in);\n-  fbout.open(name_02, std::ios_base::out | std::ios_base::trunc);\n-  VERIFY( fbin.is_open() );\n-  VERIFY( fbout.is_open() );\n-\n-  if (test)\n-    {\n-      std::istream is(&fbin);\n-      is.unsetf(std::ios_base::skipws);\n-      is >> &fbout;\n-    }\n-\n-  fbout.close();\n-  fbin.close();\n-  VERIFY( !fbin.is_open() );\n-  VERIFY( !fbout.is_open() );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n- \n-  return test;\n-}\n-\n-void test03() \n-{\n-  using namespace std;  \n-  bool test = true;\n-\n-  // template<_CharT, _Traits>\n-  //  basic_istream& operator>>(ios_base& (*pf) (ios_base&))\n-  {\n-    int i = 0;\n-    std::istringstream iss(\" 43\");\n-    iss >> std::noskipws >> i;\n-    std::ios::iostate i3 = iss.rdstate();\n-    VERIFY ( !iss ); //should set failbit\n-  }\n-\n-  // template<_CharT, _Traits>\n-  //  basic_istream& operator>>(basic_ios& (*pf) (basic_ios&))\n-\n-  // template<_CharT, _Traits>\n-  //  basic_istream& operator>>(basic_istream& (*pf) (basic_istream&))\n }\n \n-\n int main()\n {\n   test01();\n-  test02();\n-  test03();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_extractor_other.cc"}, {"sha": "3492a1e11588c08a75225747a6972a36c91794d0", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/2.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,61 @@\n+// 1999-07-28 bkoz\n+\n+// Copyright (C) 1999, 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 basic_istream::operator>>\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// filebufs.\n+void test02() \n+{\n+  bool test = true;\n+  typedef std::ios::traits_type ctraits_type;\n+  const char name_01[] = \"istream_extractor_other-1.txt\"; //read \n+  const char name_02[] = \"istream_extractor_other-2.txt\"; //write\n+\n+  std::filebuf fbin, fbout;\n+  fbin.open(name_01, std::ios_base::in);\n+  fbout.open(name_02, std::ios_base::out | std::ios_base::trunc);\n+  VERIFY( fbin.is_open() );\n+  VERIFY( fbout.is_open() );\n+\n+  if (test)\n+    {\n+      std::istream is(&fbin);\n+      is.unsetf(std::ios_base::skipws);\n+      is >> &fbout;\n+    }\n+\n+  fbout.close();\n+  fbin.close();\n+  VERIFY( !fbin.is_open() );\n+  VERIFY( !fbout.is_open() );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "9182033937d37cc1b77560e245e7ad6820fe222f", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/3.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,56 @@\n+// 1999-07-28 bkoz\n+\n+// Copyright (C) 1999, 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 basic_istream::operator>>\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test03() \n+{\n+  using namespace std;  \n+  bool test = true;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(ios_base& (*pf) (ios_base&))\n+  {\n+    int i = 0;\n+    std::istringstream iss(\" 43\");\n+    iss >> std::noskipws >> i;\n+    std::ios::iostate i3 = iss.rdstate();\n+    VERIFY ( !iss ); //should set failbit\n+  }\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(basic_ios& (*pf) (basic_ios&))\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(basic_istream& (*pf) (basic_istream&))\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "6251a381575f749291aa0cbd1c06b81eba6969f8", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/9318-in.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F9318-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F9318-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F9318-in.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,73 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <cstring> // for memset, memcmp\n+#include <streambuf>\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9318\n+class Outbuf : public std::streambuf\n+{\n+public:\n+  typedef std::streambuf::traits_type traits_type;\n+\n+  std::string result() const { return str; }\n+\n+protected:\n+  virtual int_type overflow(int_type c = traits_type::eof())\n+  {\n+    if (!traits_type::eq_int_type(c, traits_type::eof()))\n+      str.push_back(traits_type::to_char_type(c));\n+    return traits_type::not_eof(c);\n+  }\n+\n+private:\n+  std::string str;\n+};\n+\n+void test09()\n+{\n+  bool test = true;\n+  \n+  std::istringstream stream(\"Bad Moon Rising\");\n+  Outbuf buf;\n+  stream >> &buf;\n+\n+  VERIFY( buf.result() == \"Bad Moon Rising\" );\n+}\n+\n+int main() \n+{\n+  test09();\n+  return 0;\n+}"}, {"sha": "3c9266b498b23965957e2b8f37ad4a479fec2822", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/9424-in.cc", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F9424-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F9424-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F9424-in.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,113 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <cstring> // for memset, memcmp\n+#include <streambuf>\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9424\n+class Outbuf_2 : public std::streambuf\n+{\n+  char buf[1];\n+\n+public:\n+  Outbuf_2()\n+  {\n+    setp(buf, buf + 1);\n+  }\n+\n+  int_type overflow(int_type c)\n+  {\n+    int_type eof = traits_type::eof();\n+    \n+    if (pptr() < epptr())\n+      {\n+\tif (traits_type::eq_int_type(c, eof))\n+\t  return traits_type::not_eof(c);\n+\t\n+\t*pptr() = traits_type::to_char_type(c);\n+\tpbump(1);\n+\treturn c;\n+      }\n+\n+    return eof;\n+  }\n+};\n+\n+class Inbuf_2 : public std::streambuf\n+{\n+  static const char buf[];\n+  const char* current;\n+  int size;\n+\n+public:\n+  Inbuf_2()\n+  {\n+    current = buf;\n+    size = std::strlen(buf);\n+  }\n+  \n+  int_type underflow()\n+  {\n+    if (current < buf + size)\n+      return traits_type::to_int_type(*current);\n+    return traits_type::eof();\n+  }\n+  \n+  int_type uflow()\n+  {\n+    if (current < buf + size)\n+      return traits_type::to_int_type(*current++);\n+    return traits_type::eof();\n+  }\n+};\n+\n+const char Inbuf_2::buf[] = \"Atteivlis\";\n+\n+void test11()\n+{\n+  bool test = true;\n+\n+  Inbuf_2 inbuf1;\n+  std::istream is(&inbuf1);\n+  Outbuf_2 outbuf1;\n+  is >> &outbuf1;\n+  VERIFY( inbuf1.sgetc() == 't' );\n+  VERIFY( is.good() );\n+}\n+\n+int main() \n+{\n+  test11();\n+  return 0;\n+}"}, {"sha": "446b6d9c94ce96ec380841ac9407344801f217f5", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/get/char/1.cc", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,128 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  typedef std::char_traits<char>\ttraits_type;\n+\n+  bool test = true;\n+  const char str_lit01[] = \n+  \"   sun*ra \\n\\t\\t\\t   & his arkestra, featuring john gilmore: \\n\"\n+  \"                         \"\n+    \"jazz in silhouette: images and forecasts of tomorrow\";\n+\n+  std::string str01(str_lit01);\n+  std::string strtmp;\n+\n+  std::stringbuf sbuf_03;\n+  std::stringbuf sbuf_04(str01, std::ios_base::in);\n+  std::stringbuf sbuf_05(str01, std::ios_base::in);\n+\n+  std::istream is_00(NULL);\n+  std::istream is_04(&sbuf_04);\n+  std::istream is_05(&sbuf_05);\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+  std::streamsize count1, count2;\n+  char carray1[400] = \"\";\n+\n+  // int_type get()\n+  // istream& get(char*, streamsize, char delim)\n+  // istream& get(char*, streamsize)\n+  // istream& get(streambuf&, char delim)\n+  // istream& get(streambuf&)\n+  is_00.get(carray1, 2);\n+  VERIFY( static_cast<bool>(is_00.rdstate() & statefail) ); \n+  VERIFY( is_00.gcount() == 0 );\n+\n+  is_04.get(carray1, 4);\n+  VERIFY( !(is_04.rdstate() & statefail) );\n+  VERIFY( !traits_type::compare(carray1, \"   \", 4) );\n+  VERIFY( is_04.gcount() == 3 );\n+\n+  is_04.clear();\n+  is_04.get(carray1 + 3, 200);\n+  VERIFY( !(is_04.rdstate() & statefail) );\n+  VERIFY( !(is_04.rdstate() & stateeof) );\n+  VERIFY( !traits_type::compare(carray1, str_lit01, 10) );\n+  VERIFY( is_04.gcount() == 7 );\n+\n+  is_04.clear();\n+  is_04.get(carray1, 200);\n+  VERIFY( !(is_04.rdstate() & stateeof) );\n+  VERIFY( static_cast<bool>(is_04.rdstate() & statefail) ); // delimiter\n+  VERIFY( is_04.gcount() == 0 );\n+  is_04.clear();\n+  is_04.get(carray1, 200, '[');\n+  VERIFY( static_cast<bool>(is_04.rdstate() & stateeof) );\n+  VERIFY( !(is_04.rdstate() & statefail) );\n+  VERIFY( is_04.gcount() == 125 );\n+  is_04.clear();  \n+  is_04.get(carray1, 200);\n+  VERIFY( static_cast<bool>(is_04.rdstate() & stateeof) );\n+  VERIFY( static_cast<bool>(is_04.rdstate() & statefail) ); \n+  VERIFY( is_04.gcount() == 0 );\n+\n+  std::stringbuf sbuf_02(std::ios_base::in);\n+  is_05.clear();\n+  is_05.get(sbuf_02);\n+  VERIFY( is_05.gcount() == 0 );\n+  VERIFY( static_cast<bool>(is_05.rdstate() & statefail) ); \n+  VERIFY( !(is_05.rdstate() & stateeof) ); \n+\n+  is_05.clear();\n+  is_05.get(sbuf_03);\n+  VERIFY( is_05.gcount() == 10 );\n+  VERIFY( sbuf_03.str() == \"   sun*ra \" );\n+  VERIFY( !(is_05.rdstate() & statefail) ); \n+  VERIFY( !(is_05.rdstate() & stateeof) ); \n+\n+  is_05.clear();\n+  is_05.get(sbuf_03, '|');\n+  VERIFY( is_05.gcount() == 125 );\n+  VERIFY( sbuf_03.str() == str_lit01 );\n+  VERIFY( !(is_05.rdstate() & statefail) ); \n+  VERIFY( static_cast<bool>(is_05.rdstate() & stateeof) ); \n+\n+  is_05.clear();\n+  is_05.get(sbuf_03, '|');\n+  VERIFY( is_05.gcount() == 0 );\n+  VERIFY( static_cast<bool>(is_05.rdstate() & stateeof) ); \n+  VERIFY( static_cast<bool>(is_05.rdstate() & statefail) ); \n+}\n+\n+int \n+main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "fa351444fb47f0001d9ef6ddc1dc6d6460789ad2", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/get/char/2.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,59 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+//libstdc++/92: Bug in istream::get(basic_streambuf*)\n+// bug reported by bgarcia@laurelnetworks.com\n+// http://gcc.gnu.org/ml/libstdc++-prs/2000-q3/msg00041.html\n+void\n+test07()\n+{\n+  bool test = true;\n+  const char* tfn = \"istream_unformatted-1.txt\";\n+  std::ifstream infile;\n+  infile.open(tfn);\n+  VERIFY( !(!infile) );\n+  while (infile)\n+    {\n+      std::string line;\n+      std::ostringstream line_ss;\n+      while (infile.peek() == '\\n')\n+\tinfile.get();\n+      infile.get(*(line_ss.rdbuf()));\n+      line = line_ss.str();\n+      VERIFY( line == \"1234567890\" || line == \"\" );\n+    }\n+}\n+\n+int \n+main()\n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "6df68c78460d62c0d30292a5b35ffbdfbb6a3fa2", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/char/1.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,125 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test02()\n+{\n+  typedef std::char_traits<char>\ttraits_type;\n+\n+  bool test = true;\n+  const char str_lit01[] = \"\\t\\t\\t    sun*ra \\n\"\n+  \"                            \"\n+  \"and his myth science arkestra present\\n\"\n+  \"                            \"\n+  \"angles and demons @ play\\n\"\n+  \"                            \"\n+  \"the nubians of plutonia\";\n+  std::string str01(str_lit01);\n+  std::string strtmp;\n+\n+  std::stringbuf sbuf_04(str01, std::ios_base::in);\n+\n+  std::istream is_00(NULL);\n+  std::istream is_04(&sbuf_04);\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+  std::streamsize count1, count2;\n+  char carray1[400] = \"\";\n+\n+  // istream& getline(char* s, streamsize n, char delim)\n+  // istream& getline(char* s, streamsize n)\n+  state1 = is_00.rdstate();\n+  is_00.getline(carray1, 20, '*');\n+  state2 = is_00.rdstate();\n+  // make sure failbit was set, since we couldn't extract\n+  // from the NULL streambuf...\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  \n+  VERIFY( is_04.gcount() == 0 );\n+  state1 = is_04.rdstate();\n+  is_04.getline(carray1, 1, '\\t'); // extracts, throws away\n+  state2 = is_04.rdstate();  \n+  VERIFY( is_04.gcount() == 1 );\n+  VERIFY( state1 == state2 );\n+  VERIFY( state1 == 0 );\n+  VERIFY( !traits_type::compare(\"\", carray1, 1) );\n+\n+  state1 = is_04.rdstate();\n+  is_04.getline(carray1, 20, '*');\n+  state2 = is_04.rdstate();  \n+  VERIFY( is_04.gcount() == 10 );\n+  VERIFY( state1 == state2 );\n+  VERIFY( state1 == 0 );\n+  VERIFY( !traits_type::compare(\"\\t\\t    sun\", carray1, 10) );\n+\n+  state1 = is_04.rdstate();\n+  is_04.getline(carray1, 20);\n+  state2 = is_04.rdstate();  \n+  VERIFY( is_04.gcount() == 4 );\n+  VERIFY( state1 == state2 );\n+  VERIFY( state1 == 0 );\n+  VERIFY( !traits_type::compare(\"ra \", carray1, 4) );\n+\n+  state1 = is_04.rdstate();\n+  is_04.getline(carray1, 65);\n+  state2 = is_04.rdstate();  \n+  VERIFY( is_04.gcount() == 64 );\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == statefail );\n+  VERIFY( !traits_type::compare(\n+  \"                            and his myth science arkestra presen\",\n+                               carray1, 65) );\n+\n+  is_04.clear();\n+  state1 = is_04.rdstate();\n+  is_04.getline(carray1, 120, '|');\n+  state2 = is_04.rdstate();  \n+  VERIFY( is_04.gcount() == 106 );\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof );\n+\n+  is_04.clear();\n+  state1 = is_04.rdstate();\n+  is_04.getline(carray1, 100, '|');\n+  state2 = is_04.rdstate();  \n+  VERIFY( is_04.gcount() == 0 ); \n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & stateeof) );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+}\n+ \n+int \n+main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "53b14a985f52cef23f2fbf7f16fbb4368763c220", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/char/2.cc", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,103 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// [patch] bits/istream.tcc - getline(char_type*,streamsize,char_type)\n+// http://gcc.gnu.org/ml/libstdc++/2000-07/msg00003.html\n+void\n+test05()\n+{\n+  const char* charray = \"\\n\"\n+\"a\\n\"\n+\"aa\\n\"\n+\"aaa\\n\"\n+\"aaaa\\n\"\n+\"aaaaa\\n\"\n+\"aaaaaa\\n\"\n+\"aaaaaaa\\n\"\n+\"aaaaaaaa\\n\"\n+\"aaaaaaaaa\\n\"\n+\"aaaaaaaaaa\\n\"\n+\"aaaaaaaaaaa\\n\"\n+\"aaaaaaaaaaaa\\n\"\n+\"aaaaaaaaaaaaa\\n\"\n+\"aaaaaaaaaaaaaa\\n\";\n+\n+  bool test = true;\n+  const std::streamsize it = 5;\n+  std::streamsize br = 0;\n+  char tmp[it];\n+  std::stringbuf sb(charray, std::ios_base::in);\n+  std::istream ifs(&sb);\n+  std::streamsize blen = std::strlen(charray);\n+  VERIFY(!(!ifs));\n+  while(ifs.getline(tmp, it) || ifs.gcount())\n+    {\n+      br += ifs.gcount();\n+      if(ifs.eof())\n+        {\n+          // Just sanity checks to make sure we've extracted the same\n+          // number of chars that were in the streambuf\n+          VERIFY(br == blen);\n+          // Also, we should only set the failbit if we could\n+          // _extract_ no chars from the stream, i.e. the first read\n+          // returned EOF. \n+          VERIFY(ifs.fail() && ifs.gcount() == 0);\n+        }\n+      else if(ifs.fail())\n+        {\n+\t  // delimiter not read\n+\t  //\n+\t  // either\n+\t  // -> extracted no characters\n+\t  // or\n+\t  // -> n - 1 characters are stored\n+          ifs.clear(ifs.rdstate() & ~std::ios::failbit);\n+          VERIFY((ifs.gcount() == 0) || (std::strlen(tmp) == it - 1));\n+          VERIFY(!(!ifs));\n+          continue;\n+        }\n+      else \n+        {\n+\t  // delimiter was read.\n+\t  //\n+\t  // -> strlen(__s) < n - 1 \n+\t  // -> delimiter was seen -> gcount() > strlen(__s)\n+          VERIFY(ifs.gcount() == std::strlen(tmp) + 1);\n+          continue;\n+        }\n+    }\n+}\n+\n+int \n+main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "f4627ef7e2913eba1500a63385637d66914df505", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/char/3.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,64 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// [bug] istream::getline(char*,streamsize) still broken\n+// http://gcc.gnu.org/ml/libstdc++/2000-07/msg00126.html\n+// brent verner <brent at rcfile dot org\n+void\n+test06()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  const streamsize it = 5;\n+  char tmp[it];\n+  const char* str_lit = \"abcd\\n\";\n+\n+  stringbuf strbuf(str_lit, std::ios_base::in);\n+  istream istr(&strbuf);\n+  \n+  istr.getline(tmp,it); \n+  VERIFY( istr.gcount() == it );  // extracted whole string\n+  VERIFY( strlen(tmp) == 4 );     // stored all but '\\n'\n+  VERIFY( !istr.eof() );          // extracted up to but not eof\n+  VERIFY( !istr.fail() );         // failbit not set\n+  \n+  char c = 'z';\n+  istr.get(c);\n+  VERIFY( c == 'z' );\n+  VERIFY( istr.eof() );\n+}\n+\n+int \n+main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "cc6a9a564dc5b9cfaa96a500fa702838fb24f46e", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/char/1.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,84 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  typedef std::ios::traits_type traits_type;\n+\n+  bool test = true;\n+  const std::string str_01;\n+  const std::string str_02(\"soul eyes: john coltrane quartet\");\n+  std::string strtmp;\n+\n+  std::stringbuf isbuf_03(str_02, std::ios_base::in);\n+  std::stringbuf isbuf_04(str_02, std::ios_base::in);\n+\n+  std::istream is_00(NULL);\n+  std::istream is_03(&isbuf_03);\n+  std::istream is_04(&isbuf_04);\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+\n+  // istream& read(char_type* s, streamsize n)\n+  char carray[60] = \"\";\n+  is_04.read(carray, 9);\n+  VERIFY( is_04.peek() == ':' );\n+\n+  // istream& ignore(streamsize n = 1, int_type delim = traits::eof())\n+  state1 = is_04.rdstate();\n+  is_04.ignore();\n+  VERIFY( is_04.gcount() == 1 );\n+  state2 = is_04.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == ' ' );\n+\n+  state1 = is_04.rdstate();\n+  is_04.ignore(0);\n+  VERIFY( is_04.gcount() == 0 );\n+  state2 = is_04.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == ' ' );\n+\n+  state1 = is_04.rdstate();\n+  is_04.ignore(5, traits_type::to_int_type(' '));\n+  VERIFY( is_04.gcount() == 1 );\n+  state2 = is_04.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == 'j' );\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8e79620aafeae72e7a7dfb507e1ea1c5a7a26804", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/char/6360.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F6360.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F6360.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F6360.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,52 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// 2002-04-19 PR libstdc++ 6360\n+void\n+test08()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  stringstream ss(\"abcd\" \"\\xFF\" \"1234ina donna coolbrith\");  \n+  char c;\n+  ss >> c;\n+  VERIFY( c == 'a' );\n+  ss.ignore(8);\n+  ss >> c;\n+  VERIFY( c == 'i' );\n+}\n+\n+int \n+main()\n+{\n+  test08();\n+  return 0;\n+}"}, {"sha": "87ac36ab65938e38cfd01a8c69a40223b19080d3", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/char/7220.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F7220.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F7220.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F7220.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,73 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/70220\n+void\n+test10()\n+{\n+  using namespace std;\n+  bool test = true;\n+  typedef string string_type;\n+  typedef stringbuf stringbuf_type;\n+  typedef istream istream_type;\n+\n+  int res = 0;\n+  streamsize n;\n+  string_type  input(\"abcdefg\\n\");\n+  stringbuf_type sbuf(input);\n+  istream_type  istr(&sbuf);\n+  \n+  istr.ignore(0);\n+  if (istr.gcount() != 0) \n+    test = false;\n+  VERIFY( test );\n+  \n+  istr.ignore(0, 'b');\n+  if (istr.gcount() != 0) \n+    test = false;\n+  VERIFY( test );\n+  \n+  istr.ignore();\t// Advance to next position.\n+  istr.ignore(0, 'b');\n+  if ((n=istr.gcount()) != 0) \n+    test = false;\n+  VERIFY( test );\n+  \n+  if (istr.peek() != 'b')\n+    test = false;\n+  VERIFY( test );\n+}\n+\n+int \n+main()\n+{\n+  test10();\n+  return 0;\n+}"}, {"sha": "53317ede0dbc732a19c53ca15b24a6a9e837d4ee", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/peek/char/1.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fpeek%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fpeek%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fpeek%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,98 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  typedef std::ios::traits_type traits_type;\n+\n+  bool test = true;\n+  const std::string str_01;\n+  const std::string str_02(\"soul eyes: john coltrane quartet\");\n+  std::string strtmp;\n+\n+  std::stringbuf isbuf_03(str_02, std::ios_base::in);\n+  std::stringbuf isbuf_04(str_02, std::ios_base::in);\n+\n+  std::istream is_00(NULL);\n+  std::istream is_03(&isbuf_03);\n+  std::istream is_04(&isbuf_04);\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+\n+  char carray[60] = \"\";\n+\n+  // istream& ignore(streamsize n = 1, int_type delim = traits::eof())\n+  is_04.read(carray, 9);\n+  VERIFY( is_04.peek() == ':' );\n+\n+  state1 = is_04.rdstate();\n+  is_04.ignore();\n+  VERIFY( is_04.gcount() == 1 );\n+  state2 = is_04.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == ' ' );\n+\n+  state1 = is_04.rdstate();\n+  is_04.ignore(0);\n+  VERIFY( is_04.gcount() == 0 );\n+  state2 = is_04.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == ' ' );\n+\n+  state1 = is_04.rdstate();\n+  is_04.ignore(5, traits_type::to_int_type(' '));\n+  VERIFY( is_04.gcount() == 1 );\n+  state2 = is_04.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == 'j' );\n+\n+  // int_type peek()\n+  state1 = is_04.rdstate();\n+  VERIFY( is_04.peek() == 'j' );\n+  VERIFY( is_04.gcount() == 0 );\n+  state2 = is_04.rdstate();\n+  VERIFY( state1 == state2 );\n+\n+  is_04.ignore(30);\n+  state1 = is_04.rdstate();\n+  VERIFY( is_04.peek() == traits_type::eof() );\n+  VERIFY( is_04.gcount() == 0 );\n+  state2 = is_04.rdstate();\n+  VERIFY( state1 != state2 );\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4fbd5cc8499ed96b59f2d4ff6a6ac9b2eac52e6c", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/peek/char/6414.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fpeek%2Fchar%2F6414.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fpeek%2Fchar%2F6414.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fpeek%2Fchar%2F6414.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,51 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// fstreams\n+void test04(void)\n+{\n+  bool test = true;\n+  std::istream::pos_type pos01, pos02, pos03, pos04, pos05, pos06;\n+  const char str_lit01[] = \"istream_seeks-1.txt\";\n+  std::ifstream if01(str_lit01, std::ios_base::in | std::ios_base::out);\n+ \n+  // libstdc++/6414\n+  if01.seekg(0, std::ios_base::beg);\n+  pos01 = if01.tellg();\n+  if01.peek();\n+  pos02 = if01.tellg();\n+  VERIFY( pos02 == pos01 );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "17b55d8e9a0186a1df53f781bd0b9e96ce885632", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/putback/char/1.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fputback%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fputback%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fputback%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,80 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  typedef std::ios::traits_type traits_type;\n+\n+  bool test = true;\n+  const std::string str_01;\n+  const std::string str_02(\"soul eyes: john coltrane quartet\");\n+  std::string strtmp;\n+\n+  std::stringbuf isbuf_03(str_02, std::ios_base::in);\n+  std::stringbuf isbuf_04(str_02, std::ios_base::in);\n+\n+  std::istream is_00(NULL);\n+  std::istream is_03(&isbuf_03);\n+  std::istream is_04(&isbuf_04);\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+\n+  char carray[60] = \"\";\n+\n+  // istream& putback(char c)\n+  is_04.ignore(30);\n+  is_04.clear();\n+  state1 = is_04.rdstate();\n+  is_04.putback('|');\n+  VERIFY( is_04.gcount() == 0 );\n+  state2 = is_04.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == '|' );\n+\n+  // istream& unget()\n+  is_04.clear();\n+  state1 = is_04.rdstate();\n+  is_04.unget();\n+  VERIFY( is_04.gcount() == 0 );\n+  state2 = is_04.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == 'r' );\n+  \n+  // int sync()\n+  int i = is_00.sync();\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e79e4a206c0680447715dd925e572ce34b2ab896", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/read/char/1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,79 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  typedef std::ios::traits_type traits_type;\n+\n+  bool test = true;\n+  const std::string str_01;\n+  const std::string str_02(\"soul eyes: john coltrane quartet\");\n+  std::string strtmp;\n+\n+  std::stringbuf isbuf_03(str_02, std::ios_base::in);\n+  std::stringbuf isbuf_04(str_02, std::ios_base::in);\n+\n+  std::istream is_00(NULL);\n+  std::istream is_03(&isbuf_03);\n+  std::istream is_04(&isbuf_04);\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+\n+  // istream& read(char_type* s, streamsize n)\n+  char carray[60] = \"\";\n+  state1 = is_04.rdstate();\n+  is_04.read(carray, 0);\n+  state2 = is_04.rdstate();\n+  VERIFY( state1 == state2 );\n+\n+  state1 = is_04.rdstate();\n+  is_04.read(carray, 9);\n+  state2 = is_04.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( !std::strncmp(carray, \"soul eyes\", 9) );\n+  VERIFY( is_04.peek() == ':' );\n+\n+  state1 = is_03.rdstate();\n+  is_03.read(carray, 60);\n+  state2 = is_03.rdstate();\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & stateeof) ); \n+  VERIFY( static_cast<bool>(state2 & statefail) ); \n+  VERIFY( !std::strncmp(carray, \"soul eyes: john coltrane quartet\", 35) );\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4133e1a8588a37f8571f5458b4ec020d0ccc6e07", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/read/char/2.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,63 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// Jim Parsons <parsons at clearway dot com>\n+// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00177.html\n+void\n+test04()\n+{\n+  bool test = true;\n+\n+  const std::string str_00(\"Red_Garland_Qunitet-Soul_Junction\");\n+  std::string strtmp;\n+  char c_array[str_00.size() + 4];\n+\n+  std::stringbuf isbuf_00(str_00, std::ios_base::in);\n+  std::istream is_00(&isbuf_00);\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+\n+  state1 = stateeof | statefail;\n+  VERIFY( is_00.gcount() == 0 );\n+  is_00.read(c_array, str_00.size() + 1);\n+  VERIFY( is_00.gcount() == str_00.size() );\n+  VERIFY( is_00.rdstate() == state1 );\n+\n+  is_00.read(c_array, str_00.size());\n+  VERIFY( is_00.rdstate() == state1 );\n+}\n+ \n+int \n+main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "3c418e943b07311cda2b30f6fd8caf25a52ae427", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/read/char/3.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,51 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// Theodore Papadopoulo \n+void \n+test09()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  istringstream iss(\"Juana Briones\");\n+  char tab[13];\n+  iss.read(tab, 13);\n+  if (!iss)\n+    test = false;\n+  VERIFY( test );\n+}\n+ \n+int \n+main()\n+{\n+  test09();\n+  return 0;\n+}"}, {"sha": "f0109b0a661a1953f5f4e762b634a20b24cc41c6", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/readsome/char/6746-1.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Freadsome%2Fchar%2F6746-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Freadsome%2Fchar%2F6746-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Freadsome%2Fchar%2F6746-1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,60 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/6746   \n+void test12()\n+{\n+  using namespace std;\n+  bool test = true;\n+  streamsize sum = 0;\n+  istringstream iss(\"shamma shamma\");\n+      \n+  // test01\n+  size_t i = iss.rdbuf()->in_avail();\n+  VERIFY( i != 0 );\n+    \n+  // test02\n+  streamsize extracted;\n+  do\n+    {\n+      char buf[1024];\n+      extracted = iss.readsome(buf, sizeof buf);\n+      sum += extracted;\n+    }\n+  while (iss.good() && extracted);\n+  VERIFY( sum != 0 );  \n+}\n+\n+int \n+main()\n+{\n+  test12();\n+  return 0;\n+}"}, {"sha": "6d87a2959a3e9de3ab73ae161a38fea303fe19a9", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/readsome/char/6746-2.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Freadsome%2Fchar%2F6746-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Freadsome%2Fchar%2F6746-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Freadsome%2Fchar%2F6746-2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,60 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/6746   \n+void test13()\n+{\n+  using namespace std;\n+  bool test = true;\n+  streamsize sum = 0;\n+  ifstream ifs(\"istream_unformatted-1.tst\");\n+      \n+  // test01\n+  size_t i = ifs.rdbuf()->in_avail();\n+  VERIFY( i != 0 );\n+    \n+  // test02\n+  streamsize extracted;\n+  do\n+    {\n+      char buf[1024];\n+      extracted = ifs.readsome(buf, sizeof buf);\n+      sum += extracted;\n+    }\n+  while (ifs.good() && extracted);\n+  VERIFY( sum != 0 );  \n+}\n+ \n+int \n+main()\n+{\n+  test13();\n+  return 0;\n+}"}, {"sha": "fdb412ca1255894e4f025afaa0f8321feacc1c69", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/readsome/char/8258.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Freadsome%2Fchar%2F8258.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Freadsome%2Fchar%2F8258.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Freadsome%2Fchar%2F8258.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,53 @@\n+// 1999-08-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <cstring> // for strncmp,...\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/8258\n+class mybuf : public std::basic_streambuf<char> \n+{ };\n+\n+void test11()\n+{\n+  bool test = true;\n+  using namespace std;\n+  char arr[10];\n+  mybuf sbuf;\n+  basic_istream<char, char_traits<char> > istr(&sbuf);\n+  \n+  VERIFY(istr.rdstate() == ios_base::goodbit);\n+  VERIFY(istr.readsome(arr, 10) == 0);\n+  VERIFY(istr.rdstate() == ios_base::goodbit);\n+}\n+ \n+int \n+main()\n+{\n+  test11();\n+  return 0;\n+}"}, {"sha": "4c4b25c57b457161e7a614c1097589ece24bf524", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/seekg/char/2346-fstream.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F2346-fstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F2346-fstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F2346-fstream.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,90 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char* s = \" lootpack, peanut butter wolf, rob swift, madlib, quasimoto\";\n+const int times = 10;\n+\n+void write_rewind(std::iostream& stream)\n+{\n+  for (int j = 0; j < times; j++) \n+    {\n+      bool test = true;\n+      std::streampos begin = stream.tellg();\n+      \n+      for (int i = 0; i < times; ++i)\n+\tstream << j << '-' << i << s << '\\n';\n+      \n+      stream.seekg(begin);\n+      std::streampos end = stream.tellg(); \n+      std::streampos badpos = std::streampos(std::streambuf::off_type(-1));\n+    }\n+}\n+\n+void check_contents(std::iostream& stream)\n+{\n+  bool test = true;\n+\n+  stream.clear();\n+  stream.seekg(0, std::ios::beg);\n+  int i = 0;\n+  int loop = times * times + 2;\n+  while (i < loop)\n+    {\n+      stream.ignore(80, '\\n');\n+      if (stream.good())\n+\t++i;\n+      else\n+\tbreak;\n+    }\n+  VERIFY( i == times );\n+}\n+\n+// fstream\n+// libstdc++/2346\n+void test02()\n+{\t \n+  std::fstream ofstrm;\n+  ofstrm.open(\"istream_seeks-3.txt\", std::ios::out);\n+  if (!ofstrm)\n+    std::abort();\n+  write_rewind(ofstrm);\n+  ofstrm.close();\n+\n+  std::fstream ifstrm;\n+  ifstrm.open(\"istream_seeks-3.txt\", std::ios::in);\n+  check_contents(ifstrm);\n+  ifstrm.close();\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "ab35ddba34fa26b466bcf705550cdcbb0af8ac7d", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/seekg/char/2346-sstream.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F2346-sstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F2346-sstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F2346-sstream.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,83 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char* s = \" lootpack, peanut butter wolf, rob swift, madlib, quasimoto\";\n+const int times = 10;\n+\n+void write_rewind(std::iostream& stream)\n+{\n+  for (int j = 0; j < times; j++) \n+    {\n+      bool test = true;\n+      std::streampos begin = stream.tellg();\n+      \n+      for (int i = 0; i < times; ++i)\n+\tstream << j << '-' << i << s << '\\n';\n+      \n+      stream.seekg(begin);\n+      std::streampos end = stream.tellg(); \n+      std::streampos badpos = std::streampos(std::streambuf::off_type(-1));\n+    }\n+}\n+\n+void check_contents(std::iostream& stream)\n+{\n+  bool test = true;\n+\n+  stream.clear();\n+  stream.seekg(0, std::ios::beg);\n+  int i = 0;\n+  int loop = times * times + 2;\n+  while (i < loop)\n+    {\n+      stream.ignore(80, '\\n');\n+      if (stream.good())\n+\t++i;\n+      else\n+\tbreak;\n+    }\n+  VERIFY( i == times );\n+}\n+\n+// stringstream\n+// libstdc++/2346\n+void test03()\n+{\t \n+  std::stringstream sstrm;\n+\n+  write_rewind(sstrm);\n+  check_contents(sstrm);\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "823e237930aa0f8829d4b1a6d3be309cfcb6a151", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/seekg/char/8348-1.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F8348-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F8348-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F8348-1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,55 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/8348\n+void test06(void)\n+{\n+  using namespace std;\n+  bool test = true;\n+  string num1(\"555\");\n+\n+  // seekg\n+  {\n+    istringstream iss(num1);\n+    istream::pos_type pos1 = iss.tellg();\n+    int asNum = 0;\n+    iss >> asNum;\n+    VERIFY( test = iss.eof() );\n+    VERIFY( test = !iss.fail() );\n+    iss.seekg(pos1);\n+    VERIFY( test = !iss.fail() );\n+  }\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "aeed5325134ffed7d7bd1ddf0dbaee3d88c7828e", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/seekg/char/8348-2.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F8348-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F8348-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F8348-2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,55 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/8348\n+void test06(void)\n+{\n+  using namespace std;\n+  bool test = true;\n+  string num1(\"555\");\n+\n+  // seekg\n+  {\n+    istringstream iss(num1);\n+    istream::pos_type pos1 = iss.tellg();\n+    int asNum = 0;\n+    iss >> asNum;\n+    VERIFY( test = iss.eof() );\n+    VERIFY( test = !iss.fail() );\n+    iss.seekg(0, ios_base::beg);\n+    VERIFY( test = !iss.fail() );\n+  }\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "27dca74fa5d04cdd4f1f546b74c1f128023b9f72", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/seekg/char/fstream.cc", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2Ffstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2Ffstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2Ffstream.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,127 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// fstreams\n+void test04(void)\n+{\n+  typedef std::istream::off_type off_type;\n+\n+  bool test = true;\n+  std::istream::pos_type pos01, pos02, pos03, pos04, pos05, pos06;\n+  std::ios_base::iostate state01, state02;\n+  const char str_lit01[] = \"istream_seeks-1.txt\";\n+  const char str_lit02[] = \"istream_seeks-2.txt\";\n+  std::ifstream if01(str_lit01, std::ios_base::in | std::ios_base::out);\n+  std::ifstream if02(str_lit01, std::ios_base::in);\n+  std::ifstream if03(str_lit02, std::ios_base::out | std::ios_base::trunc); \n+  VERIFY( if01.good() );\n+  VERIFY( if02.good() );\n+  VERIFY( if03.good() );\n+\n+  std::istream is01(if01.rdbuf());\n+  std::istream is02(if02.rdbuf());\n+  std::istream is03(if03.rdbuf());\n+\n+  pos01 = is01.tellg();\n+  pos02 = is01.tellg();\n+  pos03 = is02.tellg();\n+  pos04 = is02.tellg();\n+  pos05 = is03.tellg();\n+  pos06 = is03.tellg();\n+\n+  // istream& seekg(pos_type)\n+  // istream& seekg(off_type, ios_base::seekdir)\n+\n+  // cur \n+  // NB: see library issues list 136. It's the v-3 interp that seekg\n+  // only sets the input buffer, or else istreams with buffers that\n+  // have _M_mode == ios_base::out will fail to have consistency\n+  // between seekg and tellg.\n+  state01 = is01.rdstate();\n+  is01.seekg(10, std::ios_base::cur);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellg(); \n+  VERIFY( pos01 == pos02 + off_type(10) ); \n+  VERIFY( state01 == state02 );\n+  pos02 = is01.tellg(); \n+  VERIFY( pos02 == pos01 ); \n+\n+  state01 = is02.rdstate();\n+  is02.seekg(10, std::ios_base::cur);\n+  state02 = is02.rdstate();\n+  pos03 = is02.tellg(); \n+  VERIFY( pos03 == pos04 + off_type(10) ); \n+  VERIFY( state01 == state02 );\n+  pos04 = is02.tellg(); \n+  VERIFY( pos03 == pos04 ); \n+\n+  state01 = is03.rdstate();\n+  is03.seekg(10, std::ios_base::cur);\n+  state02 = is03.rdstate();\n+  pos05 = is03.tellg(); \n+  VERIFY( pos05 == pos06 + off_type(10) ); \n+  VERIFY( state01 == state02 );\n+  pos06 = is03.tellg(); \n+  VERIFY( pos05 == pos06 ); \n+\n+  // beg\n+  state01 = is01.rdstate();\n+  is01.seekg(20, std::ios_base::beg);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellg(); \n+  VERIFY( pos01 == pos02 + off_type(10) ); \n+  VERIFY( state01 == state02 );\n+  pos02 = is01.tellg(); \n+  VERIFY( pos02 == pos01 ); \n+\n+  state01 = is02.rdstate();\n+  is02.seekg(20, std::ios_base::beg);\n+  state02 = is02.rdstate();\n+  pos03 = is02.tellg(); \n+  VERIFY( pos03 == pos04 + off_type(10) ); \n+  VERIFY( state01 == state02 );\n+  pos04 = is02.tellg(); \n+  VERIFY( pos03 == pos04 ); \n+\n+  state01 = is03.rdstate();\n+  is03.seekg(20, std::ios_base::beg);\n+  state02 = is03.rdstate();\n+  pos05 = is03.tellg(); \n+  VERIFY( pos05 == pos06 + off_type(10) );\n+  VERIFY( state01 == state02 );\n+  pos06 = is03.tellg(); \n+  VERIFY( pos05 == pos06 );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "cf1455fa0d4c7250999b8f59c291604f3173c843", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/seekg/char/sstream.cc", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2Fsstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2Fsstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2Fsstream.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,135 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// stringstreams\n+void test05(void)\n+{\n+  typedef std::istream::off_type off_type;\n+\n+  bool test = true;\n+  std::istream::pos_type pos01, pos02, pos03, pos04, pos05, pos06;\n+  std::ios_base::iostate state01, state02;\n+  const char str_lit01[] = \"istream_seeks-1.tst\";\n+  std::ifstream if01(str_lit01);\n+  std::ifstream if02(str_lit01);\n+  std::ifstream if03(str_lit01);\n+  VERIFY( if01.good() );\n+  VERIFY( if02.good() );\n+  VERIFY( if03.good() );\n+\n+  std::stringbuf strbuf01(std::ios_base::in | std::ios_base::out);\n+  if01 >> &strbuf01; \n+  // initialize stringbufs that are ios_base::out\n+  std::stringbuf strbuf03(strbuf01.str(), std::ios_base::out);\n+  // initialize stringbufs that are ios_base::in\n+  std::stringbuf strbuf02(strbuf01.str(), std::ios_base::in);\n+\n+  std::istream is01(&strbuf01);\n+  std::istream is02(&strbuf02);\n+  std::istream is03(&strbuf03);\n+\n+  // pos_type tellg()\n+  // in | out\n+  pos01 = is01.tellg();\n+  pos02 = is01.tellg();\n+  pos03 = is02.tellg();\n+  pos04 = is02.tellg();\n+  pos05 = is03.tellg();\n+  pos06 = is03.tellg();\n+\n+  // istream& seekg(pos_type)\n+  // istream& seekg(off_type, ios_base::seekdir)\n+\n+  // cur \n+  // NB: see library issues list 136. It's the v-3 interp that seekg\n+  // only sets the input buffer, or else istreams with buffers that\n+  // have _M_mode == ios_base::out will fail to have consistency\n+  // between seekg and tellg.\n+  state01 = is01.rdstate();\n+  is01.seekg(10, std::ios_base::cur);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellg(); \n+  VERIFY( pos01 == pos02 + off_type(10) ); \n+  VERIFY( state01 == state02 );\n+  pos02 = is01.tellg(); \n+  VERIFY( pos02 == pos01 ); \n+\n+  state01 = is02.rdstate();\n+  is02.seekg(10, std::ios_base::cur);\n+  state02 = is02.rdstate();\n+  pos03 = is02.tellg(); \n+  VERIFY( pos03 == pos04 + off_type(10) ); \n+  VERIFY( state01 == state02 );\n+  pos04 = is02.tellg(); \n+  VERIFY( pos03 == pos04 ); \n+\n+  state01 = is03.rdstate();\n+  is03.seekg(10, std::ios_base::cur);\n+  state02 = is03.rdstate();\n+  pos05 = is03.tellg(); \n+  VERIFY( pos05 == pos06 ); // as only out buffer \n+  VERIFY( state01 != state02 );\n+  pos06 = is03.tellg(); \n+  VERIFY( pos05 == pos06 ); \n+\n+  // beg\n+  state01 = is01.rdstate();\n+  is01.seekg(20, std::ios_base::beg);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellg(); \n+  VERIFY( pos01 == pos02 + off_type(10) ); \n+  VERIFY( state01 == state02 );\n+  pos02 = is01.tellg(); \n+  VERIFY( pos02 == pos01 ); \n+\n+  state01 = is02.rdstate();\n+  is02.seekg(20, std::ios_base::beg);\n+  state02 = is02.rdstate();\n+  pos03 = is02.tellg(); \n+  VERIFY( pos03 == pos04 + off_type(10) ); \n+  VERIFY( state01 == state02 );\n+  pos04 = is02.tellg(); \n+  VERIFY( pos03 == pos04 ); \n+\n+  state01 = is03.rdstate();\n+  is03.seekg(20, std::ios_base::beg);\n+  state02 = is03.rdstate();\n+  pos05 = is03.tellg(); \n+  VERIFY( pos05 == pos06 ); // as only out buffer \n+  VERIFY( state01 == state02 );\n+  pos06 = is03.tellg(); \n+  VERIFY( pos05 == pos06 ); \n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "1bc58ad20e7ed52336f825952aeb90225e9ce419", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/char/1.cc", "status": "renamed", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-14 bkoz\n \n-// Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -59,43 +59,8 @@ void test01()\n   VERIFY( bool(sentry04) == true ); \n }\n \n-// libstdc++/944\n-void \n-test02()\n-{\n-  using namespace std;\n-  istringstream in(\"80.21 56.89 12.3\");\n-  bool test = true;\n-  int i = 0;\n-  double x;\n-\n-  // ios_base::eof == 2\n-  while (in >> x)\n-    {\n-      ++i;\n-      if (i > 3) \n-\tbreak;\n-    }\n-  VERIFY( i == 3 );\n-}    \n-\n-// libstdc++/9562\n-void\n-test03()\n-{\n-  bool test = true;\n-\n-  std::stringbuf strbuf01;\n-  std::istream strm1(&strbuf01);\n-  const std::istream::sentry sentry1(strm1);\n-\n-  VERIFY( bool(sentry1) == false );\n-}\n-\n int main() \n {\n   test01();\n-  test02();\n-  test03();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_sentry.cc"}, {"sha": "1e42d18ed83ab920efff6d42c35ab9159bc8caa1", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/char/2.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,60 @@\n+// 1999-10-14 bkoz\n+\n+// Copyright (C) 1999, 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.6.1.1.2 class basic_istream::sentry\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/944\n+void \n+test02()\n+{\n+  using namespace std;\n+  istringstream in(\"80.21 56.89 12.3\");\n+  bool test = true;\n+  int i = 0;\n+  double x;\n+\n+  // ios_base::eof == 2\n+  while (in >> x)\n+    {\n+      ++i;\n+      if (i > 3) \n+\tbreak;\n+    }\n+  VERIFY( i == 3 );\n+}    \n+\n+int main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "9f9e06a03d1e2f4c34057ac18cada95187434361", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/char/3.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,53 @@\n+// 1999-10-14 bkoz\n+\n+// Copyright (C) 1999, 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.6.1.1.2 class basic_istream::sentry\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9562\n+void\n+test03()\n+{\n+  bool test = true;\n+\n+  std::stringbuf strbuf01;\n+  std::istream strm1(&strbuf01);\n+  const std::istream::sentry sentry1(strm1);\n+\n+  VERIFY( bool(sentry1) == false );\n+}\n+\n+int main() \n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "99dd0b09bc17122921b647239ecbeb4a8854e027", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/char/3983-fstream.cc", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F3983-fstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F3983-fstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F3983-fstream.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,189 @@\n+// 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.2.1.6 class ios_base::init\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// char_traits specialization\n+namespace std\n+{\n+  template<>\n+    struct char_traits<unsigned char>\n+    {\n+      typedef unsigned char \tchar_type;\n+      // Unsigned as wint_t in unsigned.\n+      typedef unsigned long  \tint_type;\n+      typedef streampos \tpos_type;\n+      typedef streamoff \toff_type;\n+      typedef mbstate_t \tstate_type;\n+      \n+      static void \n+      assign(char_type& __c1, const char_type& __c2)\n+      { __c1 = __c2; }\n+\n+      static bool \n+      eq(const char_type& __c1, const char_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static bool \n+      lt(const char_type& __c1, const char_type& __c2)\n+      { return __c1 < __c2; }\n+\n+      static int \n+      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+      { \n+\tfor (size_t __i = 0; __i < __n; ++__i)\n+\t  if (!eq(__s1[__i], __s2[__i]))\n+\t    return lt(__s1[__i], __s2[__i]) ? -1 : 1;\n+\treturn 0; \n+      }\n+\n+      static size_t\n+      length(const char_type* __s)\n+      { \n+\tconst char_type* __p = __s; \n+\twhile (__p && *__p) \n+\t  ++__p; \n+\treturn (__p - __s); \n+      }\n+\n+      static const char_type* \n+      find(const char_type* __s, size_t __n, const char_type& __a)\n+      { \n+\tfor (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)\n+\t  if (*__p == __a) return __p;\n+\treturn 0;\n+      }\n+\n+      static char_type* \n+      move(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memmove(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      copy(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memcpy(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      assign(char_type* __s, size_t __n, char_type __a)\n+      { \n+\tfor (char_type* __p = __s; __p < __s + __n; ++__p) \n+\t  assign(*__p, __a);\n+        return __s; \n+      }\n+\n+      static char_type \n+      to_char_type(const int_type& __c)\n+      { return char_type(); }\n+\n+      static int_type \n+      to_int_type(const char_type& __c) { return int_type(); }\n+\n+      static bool \n+      eq_int_type(const int_type& __c1, const int_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static int_type \n+      eof() { return static_cast<int_type>(-1); }\n+\n+      static int_type \n+      not_eof(const int_type& __c)\n+      { return eq_int_type(__c, eof()) ? int_type(0) : __c; }\n+    };\n+} // namespace std\n+\n+// libstdc++/3983\n+// Sentry uses locale info, so have to try one formatted input/output.\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // input streams\n+  basic_ifstream<unsigned char> ifs_uc;\n+  unsigned char arr[6] = { 'a', 'b', 'c', 'd', 'e' };\n+\n+  try \n+    { \n+      int i;\n+      ifs_uc >> i;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+  \n+  try \n+    { \n+      ifs_uc >> arr;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+  \n+  try \n+    { \n+      ifs_uc >> ws;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+ \n+  try \n+    { \n+      basic_string<unsigned char> s_uc(arr);\n+      ifs_uc >> s_uc;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+   \n+  VERIFY( test );\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_string<unsigned char>::size_type \n+  std::basic_string<unsigned char>::_Rep::_S_max_size;\n+\n+template \n+  unsigned char\n+  std::basic_string<unsigned char>::_Rep::_S_terminal;\n+#endif\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "6f51df5850d9120c3fd43f4ce5129dfd9759fc12", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/char/3983-sstream.cc", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F3983-sstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F3983-sstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F3983-sstream.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,189 @@\n+// 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.2.1.6 class ios_base::init\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// char_traits specialization\n+namespace std\n+{\n+  template<>\n+    struct char_traits<unsigned char>\n+    {\n+      typedef unsigned char \tchar_type;\n+      // Unsigned as wint_t in unsigned.\n+      typedef unsigned long  \tint_type;\n+      typedef streampos \tpos_type;\n+      typedef streamoff \toff_type;\n+      typedef mbstate_t \tstate_type;\n+      \n+      static void \n+      assign(char_type& __c1, const char_type& __c2)\n+      { __c1 = __c2; }\n+\n+      static bool \n+      eq(const char_type& __c1, const char_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static bool \n+      lt(const char_type& __c1, const char_type& __c2)\n+      { return __c1 < __c2; }\n+\n+      static int \n+      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+      { \n+\tfor (size_t __i = 0; __i < __n; ++__i)\n+\t  if (!eq(__s1[__i], __s2[__i]))\n+\t    return lt(__s1[__i], __s2[__i]) ? -1 : 1;\n+\treturn 0; \n+      }\n+\n+      static size_t\n+      length(const char_type* __s)\n+      { \n+\tconst char_type* __p = __s; \n+\twhile (__p && *__p) \n+\t  ++__p; \n+\treturn (__p - __s); \n+      }\n+\n+      static const char_type* \n+      find(const char_type* __s, size_t __n, const char_type& __a)\n+      { \n+\tfor (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)\n+\t  if (*__p == __a) return __p;\n+\treturn 0;\n+      }\n+\n+      static char_type* \n+      move(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memmove(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      copy(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memcpy(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      assign(char_type* __s, size_t __n, char_type __a)\n+      { \n+\tfor (char_type* __p = __s; __p < __s + __n; ++__p) \n+\t  assign(*__p, __a);\n+        return __s; \n+      }\n+\n+      static char_type \n+      to_char_type(const int_type& __c)\n+      { return char_type(); }\n+\n+      static int_type \n+      to_int_type(const char_type& __c) { return int_type(); }\n+\n+      static bool \n+      eq_int_type(const int_type& __c1, const int_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static int_type \n+      eof() { return static_cast<int_type>(-1); }\n+\n+      static int_type \n+      not_eof(const int_type& __c)\n+      { return eq_int_type(__c, eof()) ? int_type(0) : __c; }\n+    };\n+} // namespace std\n+\n+// libstdc++/3983\n+// Sentry uses locale info, so have to try one formatted input/output.\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // input streams\n+  basic_istringstream<unsigned char> iss_uc;\n+  unsigned char arr[6] = { 'a', 'b', 'c', 'd', 'e' };\n+\n+  try \n+    { \n+      int i;\n+      iss_uc >> i;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+  \n+  try \n+    { \n+      iss_uc >> arr;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+  \n+  try \n+    { \n+      iss_uc >> ws;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+ \n+  try \n+    { \n+      basic_string<unsigned char> s_uc(arr);\n+      iss_uc >> s_uc;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+   \n+  VERIFY( test );\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_string<unsigned char>::size_type \n+  std::basic_string<unsigned char>::_Rep::_S_max_size;\n+\n+template \n+  unsigned char\n+  std::basic_string<unsigned char>::_Rep::_S_terminal;\n+#endif\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "6ec4d69f3fcb4c298ea4e88d004bb035d8995233", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/tellg/char/1.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,64 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef ios::pos_type pos_type;\n+\n+  bool test = true;\n+  const char str_lit01[] = \"istream_seeks-1.tst\";\n+\n+  // in\n+  // test default ctors leave things in the same positions...\n+  istringstream ist1;\n+  pos_type p3 = ist1.tellg();\n+\n+  ifstream ifs1;\n+  pos_type p4 = ifs1.tellg();\n+\n+  VERIFY( p3 == p4 );\n+\n+  // in\n+  // test ctors leave things in the same positions...\n+  istringstream ist2(\"bob_marley:kaya\");\n+  p3 = ist2.tellg();\n+\n+  ifstream ifs2(str_lit01);\n+  p4 = ifs2.tellg();\n+\n+  VERIFY( p3 == p4 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "771d25bfe9a9bcc8f337ca95cb269fe05bc1a208", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/tellg/char/8348.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2F8348.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2F8348.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2F8348.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,79 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/8348\n+void test06(void)\n+{\n+  using namespace std;\n+  bool test = true;\n+  string num1(\"555\");\n+\n+  // tellg\n+  {\n+    istringstream iss(num1);\n+    istream::pos_type pos1 = iss.tellg();\n+    int asNum = 0;\n+    iss >> asNum;\n+    VERIFY( test = iss.eof() );\n+    VERIFY( test = !iss.fail() );\n+    iss.tellg();\n+    VERIFY( test = !iss.fail() );\n+  }\n+\n+  // seekg\n+  {\n+    istringstream iss(num1);\n+    istream::pos_type pos1 = iss.tellg();\n+    int asNum = 0;\n+    iss >> asNum;\n+    VERIFY( test = iss.eof() );\n+    VERIFY( test = !iss.fail() );\n+    iss.seekg(0, ios_base::beg);\n+    VERIFY( test = !iss.fail() );\n+  }\n+\n+  // seekg\n+  {\n+    istringstream iss(num1);\n+    istream::pos_type pos1 = iss.tellg();\n+    int asNum = 0;\n+    iss >> asNum;\n+    VERIFY( test = iss.eof() );\n+    VERIFY( test = !iss.fail() );\n+    iss.seekg(pos1);\n+    VERIFY( test = !iss.fail() );\n+  }\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "d9d2f02dbb9397bfe46d1d2efcb6bd02b0e369ea", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/tellg/char/fstream.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2Ffstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2Ffstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2Ffstream.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,87 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// fstreams\n+void test04(void)\n+{\n+  typedef std::istream::off_type off_type;\n+\n+  bool test = true;\n+  std::istream::pos_type pos01, pos02, pos03, pos04, pos05, pos06;\n+  std::ios_base::iostate state01, state02;\n+  const char str_lit01[] = \"istream_seeks-1.txt\";\n+  const char str_lit02[] = \"istream_seeks-2.txt\";\n+  std::ifstream if01(str_lit01, std::ios_base::in | std::ios_base::out);\n+  std::ifstream if02(str_lit01, std::ios_base::in);\n+  std::ifstream if03(str_lit02, std::ios_base::out | std::ios_base::trunc); \n+  VERIFY( if01.good() );\n+  VERIFY( if02.good() );\n+  VERIFY( if03.good() );\n+\n+  std::istream is01(if01.rdbuf());\n+  std::istream is02(if02.rdbuf());\n+  std::istream is03(if03.rdbuf());\n+\n+  // pos_type tellg()\n+  // in | out\n+  pos01 = is01.tellg();\n+  pos02 = is01.tellg();\n+  VERIFY( pos01 == pos02 );\n+\n+  // in\n+  pos03 = is02.tellg();\n+  pos04 = is02.tellg();\n+  VERIFY( pos03 == pos04 );\n+\n+  // out\n+  pos05 = is03.tellg();\n+  pos06 = is03.tellg();\n+  VERIFY( pos05 == pos06 );\n+\n+  // cur \n+  // NB: see library issues list 136. It's the v-3 interp that seekg\n+  // only sets the input buffer, or else istreams with buffers that\n+  // have _M_mode == ios_base::out will fail to have consistency\n+  // between seekg and tellg.\n+  state01 = is01.rdstate();\n+  is01.seekg(10, std::ios_base::cur);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellg(); \n+  VERIFY( pos01 == pos02 + off_type(10) ); \n+  VERIFY( state01 == state02 );\n+  pos02 = is01.tellg(); \n+  VERIFY( pos02 == pos01 ); \n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "abc99f8bd6b6212d1c37a854cd5bf82e3b9c6b8e", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/tellg/char/sstream.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2Fsstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2Fsstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2Fsstream.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,93 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// stringstreams\n+void test05(void)\n+{\n+  typedef std::istream::off_type off_type;\n+\n+  bool test = true;\n+  std::istream::pos_type pos01, pos02, pos03, pos04, pos05, pos06;\n+  std::ios_base::iostate state01, state02;\n+  const char str_lit01[] = \"istream_seeks-1.tst\";\n+  std::ifstream if01(str_lit01);\n+  std::ifstream if02(str_lit01);\n+  std::ifstream if03(str_lit01);\n+  VERIFY( if01.good() );\n+  VERIFY( if02.good() );\n+  VERIFY( if03.good() );\n+\n+  std::stringbuf strbuf01(std::ios_base::in | std::ios_base::out);\n+  if01 >> &strbuf01; \n+  // initialize stringbufs that are ios_base::out\n+  std::stringbuf strbuf03(strbuf01.str(), std::ios_base::out);\n+  // initialize stringbufs that are ios_base::in\n+  std::stringbuf strbuf02(strbuf01.str(), std::ios_base::in);\n+\n+  std::istream is01(&strbuf01);\n+  std::istream is02(&strbuf02);\n+  std::istream is03(&strbuf03);\n+\n+  // pos_type tellg()\n+  // in | out\n+  pos01 = is01.tellg();\n+  pos02 = is01.tellg();\n+  VERIFY( pos01 == pos02 );\n+\n+  // in\n+  pos03 = is02.tellg();\n+  pos04 = is02.tellg();\n+  VERIFY( pos03 == pos04 );\n+\n+  // out\n+  pos05 = is03.tellg();\n+  pos06 = is03.tellg();\n+  VERIFY( pos05 == pos06 );\n+\n+  // cur \n+  // NB: see library issues list 136. It's the v-3 interp that seekg\n+  // only sets the input buffer, or else istreams with buffers that\n+  // have _M_mode == ios_base::out will fail to have consistency\n+  // between seekg and tellg.\n+  state01 = is01.rdstate();\n+  is01.seekg(10, std::ios_base::cur);\n+  state02 = is01.rdstate();\n+  pos01 = is01.tellg(); \n+  VERIFY( pos01 == pos02 + off_type(10) ); \n+  VERIFY( state01 == state02 );\n+  pos02 = is01.tellg(); \n+  VERIFY( pos02 == pos01 ); \n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "3761e948617e84a2a5ab5b6f6f2a844775f657da", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ws/char/1.cc", "status": "renamed", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fws%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fws%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fws%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-22 bkoz\n \n-// Copyright (C) 1994, 1999, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1994, 1999, 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n #include <stdexcept>\n #include <testsuite_hooks.h>\n \n-bool test01(void)\n+void test01(void)\n {\n   bool test = true;\n \n@@ -72,12 +72,6 @@ bool test01(void)\n   iss01 >> std::ws;\n   VERIFY( !iss01.fail() );\n   VERIFY( iss01.eof() );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-\n-  return test;\n }\n \n int main()", "previous_filename": "libstdc++-v3/testsuite/27_io/istream_manip.cc"}, {"sha": "f8b76ee3e315ce441c6f075922a3eac34d9b5518", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/1.cc", "status": "renamed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -45,16 +45,3 @@ void test01()\n   typedef test_type::pos_type pos_type;\n   typedef test_type::off_type off_type;\n }\n-\n-namespace test \n-{\n-  using namespace std;\n-  typedef short type_t;\n-  template class basic_istringstream<type_t, char_traits<type_t> >;\n-} // test\n-\n-int main() \n-{\n-  test01();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/27_io/istringstream.cc"}, {"sha": "becb4c8a81f2d00d78c11c775603ba5fc5f8dcd5", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,42 @@\n+// 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.7.2 - Template class basic_istringstream\n+// NB: This file is for testing basic_istringstream with NO OTHER INCLUDES.\n+\n+#include <sstream>\n+\n+// { dg-do compile }\n+\n+namespace test \n+{\n+  using namespace std;\n+  typedef short type_t;\n+  template class basic_istringstream<type_t, char_traits<type_t> >;\n+} // test"}, {"sha": "9b5354531cacb10815b295b2752d077ede9b3aac", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/3.cc", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,149 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/2020\n+// should be able to use custom char_type, custom traits type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // default ctor\n+  gnu_char_type() { }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n+void test07()\n+{\n+  bool test = true;\n+  typedef std::basic_istringstream<gnu_char_type, gnu_char_traits> gnu_isstr;\n+\n+  try\n+    { \n+      gnu_isstr obj;\n+    }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_streambuf<gnu_char_type>::int_type\n+  std::basic_streambuf<gnu_char_type>::_S_pback_size;\n+#endif\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more surf!!!"}, {"sha": "764dd1404f42b0ad74ce03f6b94e5e6d656b0dbe", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/4.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,50 @@\n+// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+\n+#include <istream>\n+#include <sstream>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::istringstream test_type;\n+  typedef std::istream base_type;\n+  const test_type& obj = test_type();\n+  const base_type* base = &obj;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "59b601eef0388e854292eb9d7959eddc9a3c6068", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/rdbuf/char/2832.cc", "status": "renamed", "additions": 1, "deletions": 53, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fchar%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fchar%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fchar%2F2832.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,6 +1,6 @@\n // 2000-01-10 bkoz\n \n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,57 +23,6 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-void test01()\n-{\n-  bool test = true;\n-  std::istringstream is01;\n-  const std::string str00; \n-  const std::string str01 = \"123\";\n-  std::string str02;\n-  const int i01 = 123;\n-  int a,b;\n-\n-  std::ios_base::iostate state1, state2, statefail, stateeof;\n-  statefail = std::ios_base::failbit;\n-  stateeof = std::ios_base::eofbit;\n-\n-  // string str() const\n-  str02 = is01.str();\n-  VERIFY( str00 == str02 );\n-\n-  // void str(const basic_string&)\n-  is01.str(str01);\n-  str02 = is01.str();\n-  VERIFY( str01 == str02 );\n-  state1 = is01.rdstate();\n-  is01 >> a;\n-  state2 = is01.rdstate();\n-  VERIFY( a = i01 );\n-  // 22.2.2.1.2 num_get virtual functions\n-  // p 13\n-  // in any case, if stage 2 processing was terminated by the test for\n-  // in == end then err != ios_base::eofbit is performed.\n-  VERIFY( state1 != state2 );\n-  VERIFY( state2 == stateeof ); \n-\n-  is01.str(str01);\n-  is01 >> b;\n-  VERIFY( b != a ); \n-  // as is01.good() is false, istream::sentry blocks extraction.\n-\n-  is01.clear();\n-  state1 = is01.rdstate();\n-  is01 >> b;\n-  state2 = is01.rdstate();\n-  VERIFY( b == a ); \n-  VERIFY( state1 != state2 );\n-  VERIFY( state2 == stateeof ); \n-\n- #ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n void \n redirect_buffer(std::ios& stream, std::streambuf* new_buf) \n { stream.rdbuf(new_buf); }\n@@ -122,7 +71,6 @@ void test02()\n \n int main()\n {\n-  test01();\n   test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/27_io/istringstream_members.cc"}, {"sha": "32acd5b183cc2641a25f35f537a196f8578b5760", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/str/char/1.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,80 @@\n+// 2000-01-10 bkoz\n+\n+// Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.2.2 member functions (istringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test = true;\n+  std::istringstream is01;\n+  const std::string str00; \n+  const std::string str01 = \"123\";\n+  std::string str02;\n+  const int i01 = 123;\n+  int a,b;\n+\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+\n+  // string str() const\n+  str02 = is01.str();\n+  VERIFY( str00 == str02 );\n+\n+  // void str(const basic_string&)\n+  is01.str(str01);\n+  str02 = is01.str();\n+  VERIFY( str01 == str02 );\n+  state1 = is01.rdstate();\n+  is01 >> a;\n+  state2 = is01.rdstate();\n+  VERIFY( a = i01 );\n+  // 22.2.2.1.2 num_get virtual functions\n+  // p 13\n+  // in any case, if stage 2 processing was terminated by the test for\n+  // in == end then err != ios_base::eofbit is performed.\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof ); \n+\n+  is01.str(str01);\n+  is01 >> b;\n+  VERIFY( b != a ); \n+  // as is01.good() is false, istream::sentry blocks extraction.\n+\n+  is01.clear();\n+  state1 = is01.rdstate();\n+  is01 >> b;\n+  state2 = is01.rdstate();\n+  VERIFY( b == a ); \n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+\n+"}, {"sha": "497e4671b50e4546b495fe59e973853742bb9c12", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/1.cc", "status": "renamed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -45,16 +45,3 @@ void test01()\n   typedef test_type::pos_type pos_type;\n   typedef test_type::off_type off_type;\n }\n-\n-namespace test \n-{\n-  using namespace std;\n-  typedef short type_t;\n-  template class basic_ifstream<type_t, char_traits<type_t> >;\n-} // test\n-\n-int main() \n-{\n-  test01();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/27_io/ofstream.cc"}, {"sha": "b13948945a6ee935e342d0f1edce785b7728b50f", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,42 @@\n+// 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.8.1.8 - Template class basic_ofstream\n+// NB: This file is for testing basic_ofstream with NO OTHER INCLUDES.\n+\n+#include <fstream>\n+\n+// { dg-do compile }\n+\n+namespace test \n+{\n+  using namespace std;\n+  typedef short type_t;\n+  template class basic_ifstream<type_t, char_traits<type_t> >;\n+} // test"}, {"sha": "0b2d7c979e3f859001d5c5835584f7b9f0c33674", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/3.cc", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,149 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/2020\n+// should be able to use custom char_type, custom traits type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // default ctor\n+  gnu_char_type() { }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n+void test07()\n+{\n+  bool test = true;\n+  typedef std::basic_ofstream<gnu_char_type, gnu_char_traits> gnu_ofstr;\n+\n+  try\n+    { \n+      gnu_ofstr obj;\n+    }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_streambuf<gnu_char_type>::int_type\n+  std::basic_streambuf<gnu_char_type>::_S_pback_size;\n+#endif\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more surf!!!"}, {"sha": "9d58396d1930c4df9a17f871b4447558403cc885", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/4.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,50 @@\n+// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+\n+#include <ostream>\n+#include <fstream>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::ofstream test_type;\n+  typedef std::ostream base_type;\n+  const test_type& obj = test_type();\n+  const base_type* base = &obj;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "14e217ec9c07b47239e9351cfd741b347e59c94c", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/cons/char/2.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.10 ofstream member functions\n+// @require@ %-*.tst\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <ostream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_02[] = \"ofstream_members-1.txt\";\n+\n+// http://gcc.gnu.org/ml/libstdc++/2000-07/msg00004.html\n+void test02()\n+{\n+  bool test = true;\n+  const int more_than_max_open_files = 8200;\n+  \n+  for(int i = 0; ++i < more_than_max_open_files;)\n+    {\n+      std::ofstream ifs(name_02);\n+      VERIFY( static_cast<bool>(ifs) );\n+    }\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+"}, {"sha": "f97eec10454d6a42a1ec36520c60ee42c637801d", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/open/char/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.10 ofstream member functions\n+// @require@ %-*.tst\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <ostream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_01[] = \"ofstream_members-1.tst\";\n+const char name_02[] = \"ofstream_members-1.txt\";\n+\n+// http://gcc.gnu.org/ml/libstdc++/2000-06/msg00136.html\n+void test01()\n+{\n+  bool test = true;\n+  std::ofstream ofs1;\n+  ofs1.close();\n+  \n+  // false as expected:\n+  VERIFY( !ofs1.is_open() );\n+   // this is now true:\n+  VERIFY( !(ofs1) );\n+  \n+  ofs1.open(name_02);\n+  VERIFY( ofs1.is_open() );\n+  // fail bit still true\n+  VERIFY( !(ofs1) );\n+  VERIFY( ofs1.rdstate() == std::ios_base::failbit );\n+\n+  ofs1.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+\n+"}, {"sha": "7e897efdfafdd23ff4ced7a14834a21918f7edf5", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/rdbuf/char/2832.cc", "status": "renamed", "additions": 3, "deletions": 54, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Frdbuf%2Fchar%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Frdbuf%2Fchar%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Frdbuf%2Fchar%2F2832.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,54 +25,6 @@\n #include <testsuite_hooks.h>\n \n const char name_01[] = \"ofstream_members-1.tst\";\n-const char name_02[] = \"ofstream_members-1.txt\";\n-\n-// http://gcc.gnu.org/ml/libstdc++/2000-06/msg00136.html\n-bool test00()\n-{\n-  bool test = true;\n-  std::ofstream ofs1;\n-  ofs1.close();\n-  \n-  // false as expected:\n-  VERIFY( !ofs1.is_open() );\n-   // this is now true:\n-  VERIFY( !(ofs1) );\n-  \n-  ofs1.open(name_02);\n-  VERIFY( ofs1.is_open() );\n-  // fail bit still true\n-  VERIFY( !(ofs1) );\n-  VERIFY( ofs1.rdstate() == std::ios_base::failbit );\n-\n-  ofs1.close();\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  \n-  return test;\n-}\n-\n-\n-// http://gcc.gnu.org/ml/libstdc++/2000-07/msg00004.html\n-bool test01()\n-{\n-  bool test = true;\n-  const int more_than_max_open_files = 8200;\n-  \n-  for(int i = 0; ++i < more_than_max_open_files;)\n-    {\n-      std::ofstream ifs(name_02);\n-      VERIFY( static_cast<bool>(ifs) );\n-    }\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n- \n-  return test;\n-}\n \n void \n redirect_buffer(std::ios& stream, std::streambuf* new_buf) \n@@ -83,7 +35,7 @@ active_buffer(std::ios& stream)\n { return stream.rdbuf(); }\n \n // libstdc++/2832\n-void test02()\n+void test03()\n {\n   bool test = true;\n   const char* strlit01 = \"fuck war\";\n@@ -113,10 +65,7 @@ void test02()\n \n int main()\n {\n-  test00();\n-  test01();\n-\n-  test02();\n+  test03();\n   return 0;\n }\n ", "previous_filename": "libstdc++-v3/testsuite/27_io/ofstream_members.cc"}, {"sha": "02401717813dbcdfb6517e313e8af532043f161d", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/1.cc", "status": "renamed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -46,18 +46,3 @@ void test01()\n   typedef test_type::pos_type pos_type;\n   typedef test_type::off_type off_type;\n }\n-\n-namespace test \n-{\n-  using namespace std;\n-  using __gnu_cxx_test::pod_char;\n-  typedef short type_t;\n-  template class basic_ostream<type_t, char_traits<type_t> >;\n-  template class basic_ostream<pod_char, char_traits<pod_char> >;\n-} // test\n-\n-int main() \n-{\n-  test01();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/27_io/ostream.cc"}, {"sha": "8c672b1f0763987def4c1aa58fad308a798f94a6", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,45 @@\n+// 1999-09-20 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.6.2.1 basic_ostream\n+// NB: This file is for testing ostream with NO OTHER INCLUDES.\n+\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+namespace test \n+{\n+  using namespace std;\n+  using __gnu_cxx_test::pod_char;\n+  typedef short type_t;\n+  template class basic_ostream<type_t, char_traits<type_t> >;\n+  template class basic_ostream<pod_char, char_traits<pod_char> >;\n+} // test"}, {"sha": "0c71061c3c76ff4b14f1055ab3f196999a156e9a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/3.cc", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,149 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/2020\n+// should be able to use custom char_type, custom traits type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // default ctor\n+  gnu_char_type() { }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n+void test07()\n+{\n+  bool test = true;\n+  typedef std::basic_ostream<gnu_char_type, gnu_char_traits> gnu_ostr;\n+\n+  try\n+    { \n+      gnu_ostr obj(NULL); \n+    }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_streambuf<gnu_char_type>::int_type\n+  std::basic_streambuf<gnu_char_type>::_S_pback_size;\n+#endif\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more surf!!!"}, {"sha": "b1b669c942f436ec300b353cf71d68fd81142ed6", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/4.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,52 @@\n+// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+\n+#include <ostream>\n+#include <sstream>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::ostream test_type;\n+  typedef std::ios base_type;\n+  \n+  std::stringbuf buf;\n+  const test_type& obj = test_type(&buf);\n+  const base_type* base = &obj;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "7a4f26396d81a6d49dc3d24de5343647b95aa5fe", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/cons/char/9827.cc", "status": "renamed", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fcons%2Fchar%2F9827.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fcons%2Fchar%2F9827.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fcons%2Fchar%2F9827.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -27,25 +27,18 @@ class Buf : public std::streambuf\n {\n };\n \n-bool test01()\n+void test01()\n {\n   using namespace std;\n   bool test = true;\n \n   Buf buf;\n-  ostream stream (&buf);\n+  ostream stream(&buf);\n \n   stream << 1;\n   VERIFY(!stream.good());\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-\n-  return test;\n }\n \n-\n int main()\n {\n   test01();", "previous_filename": "libstdc++-v3/testsuite/27_io/ostream_fail.cc"}, {"sha": "8e69c421dd1f49d0366b9d191437c651483be10e", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/endl/char/1.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,59 @@\n+// 1999-07-22 bkoz\n+\n+// Copyright (C) 1994, 1999, 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.7 standard basic_ostream manipulators\n+\n+#include <ostream>\n+#include <sstream>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void test01(void)\n+{\n+  bool test = true;\n+\n+  const char str_lit01[] = \"  venice \";\n+  const std::string str01(\" santa barbara \");\n+  std::string str02(str_lit01);\n+  std::string str04;\n+  std::string str05;\n+  std::ios_base::iostate flag1, flag2, flag3, flag4, flag5;\n+\n+  std::ostringstream oss01(str01);\n+  std::ostringstream oss02;\n+  std::ostringstream::int_type i01, i02;\n+  typedef std::ostringstream::traits_type traits_type;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_ostream<_CharT, _Traits>& ends(basic_ostream<_Char, _Traits>& os)\n+  oss01 << std::endl;\n+  str04 = oss01.str();\n+  VERIFY( str04.size() == str01.size() );\n+\n+  oss02 << std::endl;\n+  str05 = oss02.str();\n+  VERIFY( str05.size() == 1 );\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "a3c11791737d22cd6fd79ee88d33cb94c4dad329", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/ends/char/1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,61 @@\n+// 1999-07-22 bkoz\n+\n+// Copyright (C) 1994, 1999, 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.7 standard basic_ostream manipulators\n+\n+#include <ostream>\n+#include <sstream>\n+#include <stdexcept>\n+//#include <testsuite_hooks.h>\n+#define VERIFY(x) test&=x\n+\n+void test01(void)\n+{\n+  bool test = true;\n+\n+  const char str_lit01[] = \"  venice \";\n+  const std::string str01(\" santa barbara \");\n+  std::string str02(str_lit01);\n+  std::string str04;\n+  std::string str05;\n+  std::ios_base::iostate flag1, flag2, flag3, flag4, flag5;\n+\n+  std::ostringstream oss01(str01);\n+  std::ostringstream oss02;\n+  std::ostringstream::int_type i01, i02;\n+  typedef std::ostringstream::traits_type traits_type;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_ostream<_CharT, _Traits>& ends(basic_ostream<_Char, _Traits>& os)\n+  oss01 << std::ends;\n+  str04 = oss01.str();\n+  VERIFY( str04.size() == str01.size() );\n+\n+  oss02 << std::ends;\n+  str05 = oss02.str();\n+  VERIFY( str05.size() == 1 );\n+  VERIFY( str05[0] == char() );\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "34de949e4bb22b26032826c7fe69ada91e8a7b62", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/ends/char/2.cc", "status": "renamed", "additions": 2, "deletions": 63, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-22 bkoz\n \n-// Copyright (C) 1994, 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1994, 1999, 2000, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,64 +25,9 @@\n #include <stdexcept>\n #include <testsuite_hooks.h>\n \n-bool test01(void)\n-{\n-  bool test = true;\n-\n-  const char str_lit01[] = \"  venice \";\n-  const std::string str01(\" santa barbara \");\n-  std::string str02(str_lit01);\n-  std::string str04;\n-  std::string str05;\n-  std::ios_base::iostate flag1, flag2, flag3, flag4, flag5;\n-\n-  // template<_CharT, _Traits>\n-  //  basic_ostream<_CharT, _Traits>& endl(basic_ostream<_Char, _Traits>& os)\n-  std::ostringstream oss01(str01);\n-  std::ostringstream oss02;\n-  std::ostringstream::int_type i01, i02;\n-  typedef std::ostringstream::traits_type traits_type;\n-\n-  oss01 << std::endl;\n-  str04 = oss01.str();\n-  VERIFY( str04.size() == str01.size() );\n-\n-  oss02 << std::endl;\n-  str05 = oss02.str();\n-  VERIFY( str05.size() == 1 );\n-\n-  // template<_CharT, _Traits>\n-  //  basic_ostream<_CharT, _Traits>& ends(basic_ostream<_Char, _Traits>& os)\n-  oss01 << std::ends;\n-  str04 = oss01.str();\n-  VERIFY( str04.size() == str01.size() );\n-  VERIFY( str04[1] == char() );\n-\n-  oss02 << std::ends;\n-  str05 = oss02.str();\n-  VERIFY( str05.size() == 2 );\n-  VERIFY( str05[1] == char() );\n-\n-  // template<_CharT, _Traits>\n-  //  basic_ostream<_CharT, _Traits>& flush(basic_ostream<_Char, _Traits>& os)\n-  oss01.flush();\n-  str04 = oss01.str();\n-  VERIFY( str04.size() == str01.size() );\n-\n-  oss02.flush();\n-  str05 = oss02.str();\n-  VERIFY( str05.size() == 2 );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  return test;\n-}\n-\n-\n // based vaguely on this:\n // http://gcc.gnu.org/ml/libstdc++/2000-q2/msg00109.html\n-bool test02()\n+void test02()\n {\n   using namespace std;\n   typedef ostringstream::int_type int_type;\n@@ -111,16 +56,10 @@ bool test02()\n   int_type len5 = osst_01.str().size();\n   VERIFY( len3 < len5 );\n   VERIFY( len5 == len3 + len4 + 1 );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  return test;\n }\n \n int main()\n { \n-  test01();\n   test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/27_io/ostream_manip.cc"}, {"sha": "3e3726cd398684f1531e4dadc793b1b51d39d89f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/exceptions/char/9561.cc", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fchar%2F9561.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fchar%2F9561.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fchar%2F9561.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -58,7 +58,6 @@ void test01()\n   VERIFY(false);\n }\n \n-\n int main()\n {\n   test01();", "previous_filename": "libstdc++-v3/testsuite/27_io/ostream_exception.cc"}, {"sha": "3d9098f53d17dca4f760957fc23c635bd00e3630", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/char/1.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,59 @@\n+// 1999-07-22 bkoz\n+\n+// Copyright (C) 1994, 1999, 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.7 standard basic_ostream manipulators\n+\n+#include <ostream>\n+#include <sstream>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void test01(void)\n+{\n+  bool test = true;\n+\n+  const char str_lit01[] = \"  venice \";\n+  const std::string str01(\" santa barbara \");\n+  std::string str02(str_lit01);\n+  std::string str04;\n+  std::string str05;\n+  std::ios_base::iostate flag1, flag2, flag3, flag4, flag5;\n+\n+  std::ostringstream oss01(str01);\n+  std::ostringstream oss02;\n+  std::ostringstream::int_type i01, i02;\n+  typedef std::ostringstream::traits_type traits_type;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_ostream<_CharT, _Traits>& flush(basic_ostream<_Char, _Traits>& os)\n+  oss01.flush();\n+  str04 = oss01.str();\n+  VERIFY( str04.size() == str01.size() );\n+\n+  oss02.flush();\n+  str05 = oss02.str();\n+  VERIFY( str05.size() == 0 );\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "8a81b964fd19b1f676b48f1a6a595f31c01b3e0b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/1.cc", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,194 @@\n+// 1999-11-15 Kevin Ediger  <kediger@licor.com>\n+// test the floating point inserters (facet num_put)\n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <cstdio> // for sprintf\n+#include <cmath> // for abs\n+#include <cfloat> // for DBL_EPSILON\n+#include <iostream>\n+#include <iomanip>\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+#ifndef DEBUG_ASSERT\n+#  define TEST_NUMPUT_VERBOSE 1\n+#endif\n+\n+struct _TestCase\n+{\n+  double val;\n+    \n+  int precision;\n+  int width;\n+  char decimal;\n+  char fill;\n+\n+  bool fixed;\n+  bool scientific;\n+  bool showpos;\n+  bool showpoint;\n+  bool uppercase;\n+  bool internal;\n+  bool left;\n+  bool right;\n+\n+  const char* result;\n+};\n+\n+static bool T=true;\n+static bool F=false;\n+\n+static _TestCase testcases[] =\n+{\n+  // standard output (no formatting applied)\n+  { 1.2, 6,0,'.',' ', F,F,F,F,F,F,F,F, \"1.2\" },\n+  { 54, 6,0,'.',' ', F,F,F,F,F,F,F,F, \"54\" },\n+  { -.012, 6,0,'.',' ', F,F,F,F,F,F,F,F, \"-0.012\" },\n+  { -.00000012, 6,0,'.',' ', F,F,F,F,F,F,F,F, \"-1.2e-07\" },\n+    \n+  // fixed formatting\n+  { 10.2345, 0,0,'.',' ', T,F,F,F,F,F,F,F, \"10\" },\n+  { 10.2345, 0,0,'.',' ', T,F,F,T,F,F,F,F, \"10.\" },\n+  { 10.2345, 1,0,'.',' ', T,F,F,F,F,F,F,F, \"10.2\" },\n+  { 10.2345, 4,0,'.',' ', T,F,F,F,F,F,F,F, \"10.2345\" },\n+  { 10.2345, 6,0,'.',' ', T,F,T,F,F,F,F,F, \"+10.234500\" },\n+  { -10.2345, 6,0,'.',' ', T,F,F,F,F,F,F,F, \"-10.234500\" },\n+  { -10.2345, 6,0,',',' ', T,F,F,F,F,F,F,F, \"-10,234500\" },\n+\n+  // fixed formatting with width\n+  { 10.2345, 4,5,'.',' ', T,F,F,F,F,F,F,F, \"10.2345\" },\n+  { 10.2345, 4,6,'.',' ', T,F,F,F,F,F,F,F, \"10.2345\" },\n+  { 10.2345, 4,7,'.',' ', T,F,F,F,F,F,F,F, \"10.2345\" },\n+  { 10.2345, 4,8,'.',' ', T,F,F,F,F,F,F,F, \" 10.2345\" },\n+  { 10.2345, 4,10,'.',' ', T,F,F,F,F,F,F,F, \"   10.2345\" },\n+  { 10.2345, 4,10,'.',' ', T,F,F,F,F,F,T,F, \"10.2345   \" },\n+  { 10.2345, 4,10,'.',' ', T,F,F,F,F,F,F,T, \"   10.2345\" },\n+  { 10.2345, 4,10,'.',' ', T,F,F,F,F,T,F,F, \"   10.2345\" },\n+  { -10.2345, 4,10,'.',' ', T,F,F,F,F,T,F,F, \"-  10.2345\" },\n+  { -10.2345, 4,10,'.','A', T,F,F,F,F,T,F,F, \"-AA10.2345\" },\n+  { 10.2345, 4,10,'.','#', T,F,T,F,F,T,F,F, \"+##10.2345\" },\n+\n+  // scientific formatting\n+  { 1.23e+12, 1,0,'.',' ', F,T,F,F,F,F,F,F, \"1.2e+12\" },\n+  { 1.23e+12, 1,0,'.',' ', F,T,F,F,T,F,F,F, \"1.2E+12\" },\n+  { 1.23e+12, 2,0,'.',' ', F,T,F,F,F,F,F,F, \"1.23e+12\" },\n+  { 1.23e+12, 3,0,'.',' ', F,T,F,F,F,F,F,F, \"1.230e+12\" },\n+  { 1.23e+12, 3,0,'.',' ', F,T,T,F,F,F,F,F, \"+1.230e+12\" },\n+  { -1.23e-12, 3,0,'.',' ', F,T,F,F,F,F,F,F, \"-1.230e-12\" },\n+  { 1.23e+12, 3,0,',',' ', F,T,F,F,F,F,F,F, \"1,230e+12\" },\n+};\n+\n+template<typename _CharT>\n+class testpunct : public numpunct<_CharT>\n+{\n+public:\n+  typedef _CharT  char_type;\n+  const char_type dchar;\n+\n+  explicit\n+  testpunct(char_type decimal_char) : numpunct<_CharT>(), dchar(decimal_char)\n+  { }\n+\n+protected:\n+  char_type \n+  do_decimal_point() const\n+  { return dchar; }\n+    \n+  char_type \n+  do_thousands_sep() const\n+  { return ','; }\n+\n+  string \n+  do_grouping() const\n+  { return string(); }\n+};\n+ \n+template<typename _CharT>  \n+void apply_formatting(const _TestCase & tc, basic_ostream<_CharT> & os)\n+{\n+  os.precision(tc.precision);\n+  os.width(tc.width);\n+  os.fill(static_cast<_CharT>(tc.fill));\n+  if (tc.fixed)\n+    os.setf(ios::fixed);\n+  if (tc.scientific)\n+    os.setf(ios::scientific);\n+  if (tc.showpos)\n+    os.setf(ios::showpos);\n+  if (tc.showpoint)\n+    os.setf(ios::showpoint);\n+  if (tc.uppercase)\n+    os.setf(ios::uppercase);\n+  if (tc.internal)\n+    os.setf(ios::internal);\n+  if (tc.left)\n+    os.setf(ios::left);\n+  if (tc.right)\n+    os.setf(ios::right);\n+}\n+\n+void\n+test01()\n+{\n+  bool test = true;\n+  for (int j=0; j<sizeof(testcases)/sizeof(testcases[0]); j++)\n+    {\n+      _TestCase & tc = testcases[j];\n+#ifdef TEST_NUMPUT_VERBOSE\n+      cout << \"expect: \" << tc.result << endl;\n+#endif\n+      // test double with char type\n+      {\n+        testpunct<char>* __tp = new testpunct<char>(tc.decimal);\n+        ostringstream os;\n+        locale __loc(os.getloc(), __tp);\n+        os.imbue(__loc);\n+        apply_formatting(tc, os);\n+        os << tc.val;\n+#ifdef TEST_NUMPUT_VERBOSE\n+        cout << j << \"result 1: \" << os.str() << endl;\n+#endif\n+        VERIFY( os && os.str() == tc.result );\n+      }\n+      // test long double with char type\n+      {\n+        testpunct<char>* __tp = new testpunct<char>(tc.decimal);\n+        ostringstream os;\n+        locale __loc(os.getloc(), __tp);\n+        os.imbue(__loc);\n+        apply_formatting(tc, os);\n+        os << (long double)tc.val;\n+#ifdef TEST_NUMPUT_VERBOSE\n+        cout << j << \"result 2: \" << os.str() << endl;\n+#endif\n+        VERIFY( os && os.str() == tc.result );\n+      }\n+    }\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ed4979fa3a85499084c606676ddb30b563591768", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/2.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,58 @@\n+// 1999-11-15 Kevin Ediger  <kediger@licor.com>\n+// test the floating point inserters (facet num_put)\n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <cstdio> // for sprintf\n+#include <iostream>\n+#include <iomanip>\n+#include <locale>\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+void\n+test02()\n+{\n+  bool test = true;\n+\n+  // Make sure we can output a long float in fixed format\n+  // without seg-faulting (libstdc++/4402)\n+  double val2 = 3.5e230;\n+\n+  ostringstream os2;\n+  os2.precision(3);\n+  os2.setf(ios::fixed);\n+\n+  // Check it can be done in a locale with grouping on.\n+  locale loc2(\"de_DE\");\n+  os2.imbue(loc2);\n+  os2 << fixed << setprecision(3) << val2 << endl;\n+  os2 << endl;\n+  os2 << fixed << setprecision(1) << val2 << endl;\n+}\n+\n+int \n+main()\n+{\n+  __gnu_cxx_test::run_test_wrapped_generic_locale_exception_catcher(test02);\n+  return 0;\n+}"}, {"sha": "d26463b525d5f869ccf7d5dc3c4b728d76509732", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/3.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,69 @@\n+// 1999-11-15 Kevin Ediger  <kediger@licor.com>\n+// test the floating point inserters (facet num_put)\n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+template<typename T>\n+bool\n+test03_check(T n)\n+{\n+  stringbuf strbuf;\n+  ostream o(&strbuf);\n+  const char *expect;\n+  bool test = true;\n+\n+  if (numeric_limits<T>::digits + 1 == 16)\n+    expect = \"177777 ffff\";\n+  else if (numeric_limits<T>::digits + 1 == 32)\n+    expect = \"37777777777 ffffffff\";\n+  else if (numeric_limits<T>::digits + 1 == 64)\n+    expect = \"1777777777777777777777 ffffffffffffffff\";\n+  else\n+    expect = \"wow, you've got some big numbers here\";\n+\n+  o << oct << n << ' ' << hex << n;\n+  VERIFY ( strbuf.str() == expect );\n+\n+  return test;\n+}\n+\n+void\n+test03()\n+{\n+  short s = -1;\n+  int i = -1;\n+  long l = -1;\n+\n+  test03_check (s);\n+  test03_check (i);\n+  test03_check (l);\n+}\n+\n+int \n+main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "445f884a6aedb1d9ada15be505645b878126fa88", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/4.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,51 @@\n+// 1999-11-15 Kevin Ediger  <kediger@licor.com>\n+// test the floating point inserters (facet num_put)\n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iomanip>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+// libstdc++/3655\n+int\n+test04()\n+{\n+  stringbuf strbuf1, strbuf2;\n+  ostream o1(&strbuf1), o2(&strbuf2);\n+  bool test = true;\n+\n+  o1 << hex << showbase << setw(6) << internal << 0xff;\n+  VERIFY( strbuf1.str() == \"0x  ff\" );\n+  \n+  // ... vs internal-adjusted const char*-type objects\n+  o2 << hex << showbase << setw(6) << internal << \"0xff\";\n+  VERIFY( strbuf2.str() == \"  0xff\" );\n+\n+  return 0;\n+}\n+\n+int \n+main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "67eeecc2b6e62522fcb4189b052eb6b54449ebb1", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/4402.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4402.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4402.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4402.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,74 @@\n+// 1999-11-15 Kevin Ediger  <kediger@licor.com>\n+// test the floating point inserters (facet num_put)\n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <cstdio> // for sprintf\n+#include <iostream>\n+#include <iomanip>\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+void\n+test02()\n+{\n+  bool test = true;\n+  // make sure we can output a very long float\n+  long double val = 1.2345678901234567890123456789e+1000L;\n+  int prec = numeric_limits<long double>::digits10;\n+\n+  ostringstream os;\n+  os.precision(prec);\n+  os.setf(ios::scientific);\n+  os << val;\n+\n+  char largebuf[512];\n+  sprintf(largebuf, \"%.*Le\", prec, val);\n+#ifdef TEST_NUMPUT_VERBOSE\n+  cout << \"expect: \" << largebuf << endl;\n+  cout << \"result: \" << os.str() << endl;\n+#endif\n+  VERIFY(os && os.str() == largebuf);\n+\n+  // Make sure we can output a long float in fixed format\n+  // without seg-faulting (libstdc++/4402)\n+  double val2 = 3.5e230;\n+\n+  ostringstream os2;\n+  os2.precision(3);\n+  os2.setf(ios::fixed);\n+  os2 << val2;\n+\n+  sprintf(largebuf, \"%.*f\", 3, val2);\n+#ifdef TEST_NUMPUT_VERBOSE\n+  cout << \"expect: \" << largebuf << endl;\n+  cout << \"result: \" << os2.str() << endl;\n+#endif\n+  VERIFY(os2 && os2.str() == largebuf);\n+}\n+\n+int \n+main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "647f8714629265fac64fcd614277f4535b84ab39", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/5.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F5.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,50 @@\n+// 1999-11-15 Kevin Ediger  <kediger@licor.com>\n+// test the floating point inserters (facet num_put)\n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <cmath> // for abs\n+#include <cfloat> // for DBL_EPSILON\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+void\n+test05()\n+{\n+  bool test = true;\n+  double pi = 3.14159265358979323846;\n+  ostringstream ostr;\n+  ostr.precision(20);\n+  ostr << pi;\n+  string sval = ostr.str();\n+  istringstream istr (sval);\n+  double d;\n+  istr >> d;\n+  VERIFY( abs(pi-d)/pi < DBL_EPSILON );\n+}\n+\n+int \n+main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "d3f0499c3bb6afe6fb404ace3633f185e2f2fd51", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/6.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F6.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,54 @@\n+// 1999-11-15 Kevin Ediger  <kediger@licor.com>\n+// test the floating point inserters (facet num_put)\n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <cmath> // for abs\n+#include <cfloat> // for DBL_EPSILON\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+// libstdc++/9151\n+int\n+test06()\n+{\n+  bool test = true;\n+  int prec = numeric_limits<double>::digits10 + 2;\n+  double oval = numeric_limits<double>::min();\n+\n+  stringstream ostr;\n+  ostr.precision(prec);\n+  ostr << oval;\n+  string sval = ostr.str();\n+  istringstream istr (sval);\n+  double ival;\n+  istr >> ival;\n+  VERIFY( abs(oval-ival)/oval < DBL_EPSILON ); \n+  return 0;\n+}\n+\n+int \n+main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "a439c9e78abe0281f574a0dd07ff26500e239fc5", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/1.cc", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,189 @@\n+// 1999-11-15 Kevin Ediger  <kediger@licor.com>\n+// test the floating point inserters (facet num_put)\n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <cstdio> // for sprintf\n+#include <cmath> // for abs\n+#include <cfloat> // for DBL_EPSILON\n+#include <iostream>\n+#include <iomanip>\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+#ifndef DEBUG_ASSERT\n+#  define TEST_NUMPUT_VERBOSE 1\n+#endif\n+\n+struct _TestCase\n+{\n+  double val;\n+    \n+  int precision;\n+  int width;\n+  char decimal;\n+  char fill;\n+\n+  bool fixed;\n+  bool scientific;\n+  bool showpos;\n+  bool showpoint;\n+  bool uppercase;\n+  bool internal;\n+  bool left;\n+  bool right;\n+\n+  const char* result;\n+  const wchar_t* wresult;\n+};\n+\n+static bool T=true;\n+static bool F=false;\n+\n+static _TestCase testcases[] =\n+{\n+  // standard output (no formatting applied) 1-4\n+  { 1.2, 6,0,'.',' ', F,F,F,F,F,F,F,F, \"1.2\",L\"1.2\" },\n+  { 54, 6,0,'.',' ', F,F,F,F,F,F,F,F, \"54\",L\"54\" },\n+  { -.012, 6,0,'.',' ', F,F,F,F,F,F,F,F, \"-0.012\",L\"-0.012\" },\n+  { -.00000012, 6,0,'.',' ', F,F,F,F,F,F,F,F, \"-1.2e-07\",L\"-1.2e-07\" },\n+    \n+  // fixed formatting 5-11\n+  { 10.2345, 0,0,'.',' ', T,F,F,F,F,F,F,F, \"10\",L\"10\" },\n+  { 10.2345, 0,0,'.',' ', T,F,F,T,F,F,F,F, \"10.\",L\"10.\" },\n+  { 10.2345, 1,0,'.',' ', T,F,F,F,F,F,F,F, \"10.2\",L\"10.2\" },\n+  { 10.2345, 4,0,'.',' ', T,F,F,F,F,F,F,F, \"10.2345\",L\"10.2345\" },\n+  { 10.2345, 6,0,'.',' ', T,F,T,F,F,F,F,F, \"+10.234500\",L\"+10.234500\" },\n+  { -10.2345, 6,0,'.',' ', T,F,F,F,F,F,F,F, \"-10.234500\",L\"-10.234500\" },\n+  { -10.2345, 6,0,',',' ', T,F,F,F,F,F,F,F, \"-10,234500\",L\"-10,234500\" },\n+\n+  // fixed formatting with width 12-22\n+  { 10.2345, 4,5,'.',' ', T,F,F,F,F,F,F,F, \"10.2345\",L\"10.2345\" },\n+  { 10.2345, 4,6,'.',' ', T,F,F,F,F,F,F,F, \"10.2345\",L\"10.2345\" },\n+  { 10.2345, 4,7,'.',' ', T,F,F,F,F,F,F,F, \"10.2345\",L\"10.2345\" },\n+  { 10.2345, 4,8,'.',' ', T,F,F,F,F,F,F,F, \" 10.2345\",L\" 10.2345\" },\n+  { 10.2345, 4,10,'.',' ', T,F,F,F,F,F,F,F, \"   10.2345\",L\"   10.2345\" },\n+  { 10.2345, 4,10,'.',' ', T,F,F,F,F,F,T,F, \"10.2345   \",L\"10.2345   \" },\n+  { 10.2345, 4,10,'.',' ', T,F,F,F,F,F,F,T, \"   10.2345\",L\"   10.2345\" },\n+  { 10.2345, 4,10,'.',' ', T,F,F,F,F,T,F,F, \"   10.2345\",L\"   10.2345\" },\n+  { -10.2345, 4,10,'.',' ', T,F,F,F,F,T,F,F, \"-  10.2345\",L\"-  10.2345\" },\n+  { -10.2345, 4,10,'.','A', T,F,F,F,F,T,F,F, \"-AA10.2345\",L\"-AA10.2345\" },\n+  { 10.2345, 4,10,'.','#', T,F,T,F,F,T,F,F, \"+##10.2345\",L\"+##10.2345\" },\n+\n+  // scientific formatting 23-29\n+  { 1.23e+12, 1,0,'.',' ', F,T,F,F,F,F,F,F, \"1.2e+12\",L\"1.2e+12\" },\n+  { 1.23e+12, 1,0,'.',' ', F,T,F,F,T,F,F,F, \"1.2E+12\",L\"1.2E+12\" },\n+  { 1.23e+12, 2,0,'.',' ', F,T,F,F,F,F,F,F, \"1.23e+12\",L\"1.23e+12\" },\n+  { 1.23e+12, 3,0,'.',' ', F,T,F,F,F,F,F,F, \"1.230e+12\",L\"1.230e+12\" },\n+  { 1.23e+12, 3,0,'.',' ', F,T,T,F,F,F,F,F, \"+1.230e+12\",L\"+1.230e+12\" },\n+  { -1.23e-12, 3,0,'.',' ', F,T,F,F,F,F,F,F, \"-1.230e-12\",L\"-1.230e-12\" },\n+  { 1.23e+12, 3,0,',',' ', F,T,F,F,F,F,F,F, \"1,230e+12\",L\"1,230e+12\" },\n+};\n+\n+template<typename _CharT>\n+class testpunct : public numpunct<_CharT>\n+{\n+public:\n+  typedef _CharT  char_type;\n+  const char_type dchar;\n+\n+  explicit\n+  testpunct(char_type decimal_char) : numpunct<_CharT>(), dchar(decimal_char)\n+  { }\n+\n+protected:\n+  char_type \n+  do_decimal_point() const\n+  { return dchar; }\n+    \n+  char_type \n+  do_thousands_sep() const\n+  { return ','; }\n+\n+  string \n+  do_grouping() const\n+  { return string(); }\n+};\n+ \n+template<typename _CharT>  \n+void apply_formatting(const _TestCase & tc, basic_ostream<_CharT> & os)\n+{\n+  os.precision(tc.precision);\n+  os.width(tc.width);\n+  os.fill(static_cast<_CharT>(tc.fill));\n+  if (tc.fixed)\n+    os.setf(ios::fixed);\n+  if (tc.scientific)\n+    os.setf(ios::scientific);\n+  if (tc.showpos)\n+    os.setf(ios::showpos);\n+  if (tc.showpoint)\n+    os.setf(ios::showpoint);\n+  if (tc.uppercase)\n+    os.setf(ios::uppercase);\n+  if (tc.internal)\n+    os.setf(ios::internal);\n+  if (tc.left)\n+    os.setf(ios::left);\n+  if (tc.right)\n+    os.setf(ios::right);\n+}\n+\n+void\n+test01()\n+{\n+  bool test = true;\n+  for (int j=0; j<sizeof(testcases)/sizeof(testcases[0]); j++)\n+    {\n+      _TestCase & tc = testcases[j];\n+#ifdef TEST_NUMPUT_VERBOSE\n+      cout << \"expect: \" << tc.result << endl;\n+#endif\n+      // test double with wchar_t type\n+      {\n+        testpunct<wchar_t>* __tp = new testpunct<wchar_t>(tc.decimal);\n+        wostringstream os;\n+        locale __loc(os.getloc(), __tp);\n+        os.imbue(__loc);\n+        apply_formatting(tc, os);\n+        os << tc.val;\n+        VERIFY( os && os.str() == tc.wresult );\n+      }\n+      // test long double with wchar_t type\n+      {\n+        testpunct<wchar_t>* __tp = new testpunct<wchar_t>(tc.decimal);\n+        wostringstream os;\n+        locale __loc(os.getloc(), __tp);\n+        os.imbue(__loc);\n+        apply_formatting(tc, os);\n+        os << (long double)tc.val;\n+        VERIFY( os && os.str() == tc.wresult );\n+      }\n+    }\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "976d45857ab851c83718de0875c797ca30f1d25c", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/char/1.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,59 @@\n+// 1999-08-16 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// ofstream\n+void test01()\n+{\n+  std::string str01;\n+  const int size = 1000;\n+  const char name_02[] = \"ostream_inserter_char-1.txt\";\n+\n+  // initialize string\n+  for(int i=0 ; i < size; i++) {\n+    str01 += '1';\n+    str01 += '2';\n+    str01 += '3';\n+    str01 += '4';\n+    str01 += '5';\n+    str01 += '6';\n+    str01 += '7';\n+    str01 += '8';\n+    str01 += '9';\n+    str01 += '\\n';\n+  }\n+  std::ofstream f(name_02);\n+\n+  f << str01;\n+  f.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9ffc492586ecc67f5227947a265ce0db5aeac0a7", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/char/2.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,69 @@\n+// 1999-08-16 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// ostringstream width() != zero\n+// left\n+void\n+test02(void) \n+{\n+  bool test = true;\n+  std::string tmp;\n+  \n+  std::string str01 = \"\";\n+  std::ostringstream oss01;\n+  oss01.width(5);\n+  oss01.fill('0');\n+  oss01.flags(std::ios_base::left);\n+  oss01 << str01;\n+  tmp = oss01.str();\n+  VERIFY( tmp == \"00000\" );\n+\n+  std::string str02 = \"1\";\n+  std::ostringstream oss02;\n+  oss02.width(5);\n+  oss02.fill('0');\n+  oss02.flags(std::ios_base::left);\n+  oss02 << str02;\n+  tmp = oss02.str();\n+  VERIFY( tmp == \"10000\" );\n+\n+  std::string str03 = \"909909\";\n+  std::ostringstream oss03;\n+  oss03.width(5);\n+  oss03.fill('0');\n+  oss03.flags(std::ios_base::left);\n+  oss03 << str03;\n+  tmp = oss03.str();\n+  VERIFY( tmp == \"909909\" );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "5b95862b2b974bf47849e0f3886f6b152da2d148", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/char/3.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,68 @@\n+// 1999-08-16 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// width() != zero\n+// right\n+void test03(void) \n+{\n+  bool test = true;\n+  std::string tmp;\n+\n+  std::string str01 = \"\";\n+  std::ostringstream oss01;\n+  oss01.width(5);\n+  oss01.fill('0');\n+  oss01.flags(std::ios_base::right);\n+  oss01 << str01;\n+  tmp = oss01.str();\n+  VERIFY( tmp == \"00000\" );\n+\n+  std::string str02 = \"1\";\n+  std::ostringstream oss02;\n+  oss02.width(5);\n+  oss02.fill('0');\n+  oss02.flags(std::ios_base::right);\n+  oss02 << str02;\n+  tmp = oss02.str();\n+  VERIFY( tmp == \"00001\" );\n+\n+  std::string str03 = \"909909\";\n+  std::ostringstream oss03;\n+  oss03.width(5);\n+  oss03.fill('0');\n+  oss03.flags(std::ios_base::right);\n+  oss03 << str03;\n+  tmp = oss03.str();\n+  VERIFY( tmp == \"909909\" );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "52d92ecb2eb70ce0732462ef8ae1aa81e40222d9", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/char/4.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,61 @@\n+// 1999-08-16 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// stringstream and large strings\n+void\n+test04() \n+{\n+  bool test = true;\n+  std::string str_01;\n+  const std::string str_02(\"coltrane playing 'softly as a morning sunrise'\");\n+  const std::string str_03(\"coltrane\");\n+  std::string str_tmp;\n+  const int i_max=250;\n+\n+  std::ostringstream oss_01(std::ios_base::out);\n+  std::ostringstream oss_02(str_01, std::ios_base::out);\n+\n+  std::ios_base::iostate state1, state2, statefail;\n+  statefail = std::ios_base::failbit;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_ostream& operator<<(ostream&, const char*)\n+  for (int i = 0; i < i_max; ++i) \n+    oss_02 << \"Test: \" << i << std::endl;\n+  str_tmp = oss_02.str();\n+  VERIFY( !oss_02.bad() );\n+  VERIFY( oss_02.good() );\n+  VERIFY( str_tmp != str_01 );\n+  VERIFY( str_tmp.size() == 2390 );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "c68f227bfc277c3e0cb232d98b3e61c4f289aaf6", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/char/5.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F5.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,78 @@\n+// 1999-08-16 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// ostringstream and large strings number 2\n+void\n+test05()\n+{\n+  bool test = true;\n+  std::string str05, str10;\n+\n+  typedef std::ostream::pos_type\tpos_type;\n+  typedef std::ostream::off_type\toff_type;\n+  std::string str01;\n+  const int size = 1000;\n+\n+  // initialize string\n+  for(int i=0 ; i < size; i++) {\n+    str01 += '1';\n+    str01 += '2';\n+    str01 += '3';\n+    str01 += '4';\n+    str01 += '5';\n+    str01 += '6';\n+    str01 += '7';\n+    str01 += '8';\n+    str01 += '9';\n+    str01 += '\\n';\n+  }\n+\n+  // test 1: out\n+  std::ostringstream sstr01(str01, std::ios_base::out);\n+  std::ostringstream sstr02;\n+  sstr02 << str01;\n+  str05 = sstr01.str();\n+  str10 = sstr02.str();\n+  VERIFY( str05 == str01 );\n+  VERIFY( str10 == str01 );\n+\n+  // test 2: in | out \n+  std::ostringstream sstr04(str01,  std::ios_base::out | std::ios_base::in);\n+  std::ostringstream sstr05(std::ios_base::in | std::ios_base::out);\n+  sstr05 << str01;\n+  str05 = sstr04.str();\n+  str10 = sstr05.str();\n+  VERIFY( str05 == str01 );\n+  VERIFY( str10 == str01 );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "a73329c819ce9da0cb788cd21ea428db51d6ac1c", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/char/6.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F6.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,59 @@\n+// 1999-08-16 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// ostringstream and positioning, multiple writes\n+// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00326.html\n+void test06()\n+{\n+  bool test = true;\n+  const char carray01[] = \"mos def & talib kweli are black star\";\n+\n+  // normal\n+  std::ostringstream ostr1(\"mos def\");\n+  VERIFY( ostr1.str() == \"mos def\" ); \n+  ostr1 << \" & talib kweli\";  // should overwrite first part of buffer\n+  VERIFY( ostr1.str() == \" & talib kweli\" );\n+  ostr1 << \" are black star\";  // should append to string from above\n+  VERIFY( ostr1.str() != carray01 );\n+  VERIFY( ostr1.str() == \" & talib kweli are black star\" );\n+\n+  // appending\n+  std::ostringstream ostr2(\"blackalicious\", \n+\t\t\t   std::ios_base::out | std::ios_base::ate);\n+  VERIFY( ostr2.str() == \"blackalicious\" ); \n+  ostr2 << \" NIA \";  // should not overwrite first part of buffer\n+  VERIFY( ostr2.str() == \"blackalicious NIA \" );\n+  ostr2 << \"4: deception (5:19)\";  // should append to full string from above\n+  VERIFY( ostr2.str() == \"blackalicious NIA 4: deception (5:19)\" );\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "244ee75291962135a657a46b30a705af134ce8e1", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/char/8.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F8.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,49 @@\n+// 1999-08-16 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test08()\n+{\n+  bool test = true;\n+  char* pt = NULL;\n+\n+  // 1\n+  std::ostringstream oss;\n+  oss << pt;\n+  VERIFY( oss.bad() );\n+  VERIFY( oss.str().size() == 0 );\n+\n+  oss.clear();\n+  oss << \"\";\n+  VERIFY( oss.good() );\n+}\n+\n+int main()\n+{\n+  test08();\n+  return 0;\n+}"}, {"sha": "6344dd4d5a0303cbc7c40dc12e83ff209e27742a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/7.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F7.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,92 @@\n+// 1999-08-16 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// Global counter, needs to be reset after use.\n+bool used;\n+\n+class gnu_ctype : public std::ctype<wchar_t>\n+{\n+protected:\n+  char_type        \n+  do_widen(char c) const\n+  { \n+    used = true;\n+    return std::ctype<wchar_t>::do_widen(c);\n+  }\n+\n+  const char*  \n+  do_widen(const char* low, const char* high, char_type* dest) const\n+  { \n+    used = true;\n+    return std::ctype<wchar_t>::do_widen(low, high, dest);\n+  }\n+};\n+\n+// 27.6.2.5.4 - Character inserter template functions \n+// [lib.ostream.inserters.character]\n+void test07()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  const char* buffer = \"SFPL 5th floor, outside carrol, the Asian side\";\n+\n+  wostringstream oss;\n+  oss.imbue(locale(locale::classic(), new gnu_ctype));\n+  \n+  // 1\n+  // template<class charT, class traits>\n+  // basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>& out,\n+  //                                           const char* s);\n+  used = false;\n+  oss << buffer;\n+  VERIFY( used ); // Only required for char_type != char\n+  wstring str = oss.str();\n+  wchar_t c1 = oss.widen(buffer[0]);\n+  VERIFY( str[0] == c1 );\n+  wchar_t c2 = oss.widen(buffer[1]);\n+  VERIFY( str[1] == c2 );\n+\n+  // 2\n+  // template<class charT, class traits>\n+  // basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>& out,\n+  //                                         char c);\n+  used = false;\n+  oss.str(wstring());\n+  oss << 'b';\n+  VERIFY( used ); // Only required for char_type != char\n+  str = oss.str();\n+  wchar_t c3 = oss.widen('b');\n+  VERIFY( str[0] == c3 );\n+}\n+\n+int main()\n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "bf4480db26e2f4ef084cd2360f9f07a2352046bc", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/8.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F8.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,60 @@\n+// 1999-08-16 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test08()\n+{\n+  bool test = true;\n+  char* pt = NULL;\n+\n+  // 2\n+  std::wostringstream woss;\n+  woss << pt;\n+  VERIFY( woss.bad() );\n+  VERIFY( woss.str().size() == 0 );\n+\n+  woss.clear();\n+  woss << \"\";\n+  VERIFY( woss.good() );\n+\n+  // 3\n+  wchar_t* wt = NULL;\n+  woss.clear();\n+  woss << wt;\n+  VERIFY( woss.bad() );\n+  VERIFY( woss.str().size() == 0 );\n+\n+  woss.clear();\n+  woss << L\"\";\n+  VERIFY( woss.good() );\n+}\n+\n+int main()\n+{\n+  test08();\n+  return 0;\n+}"}, {"sha": "3fa9e68fe56e3eb141d82078b386a65942fa366f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/1.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,82 @@\n+// 1999-08-16 bkoz\n+// 1999-11-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const int size = 1000;\n+const char name_01[] = \"ostream_inserter_other-1.tst\";\n+const char name_02[] = \"ostream_inserter_other-1.txt\";\n+const char name_03[] = \"ostream_inserter_other-2.tst\";\n+const char name_04[] = \"ostream_inserter_other-2.txt\";\n+\n+// fstream\n+void\n+test02() \n+{\n+  typedef std::ios_base::iostate iostate;\n+  bool test = true;\n+\n+  // basic_ostream<_CharT, _Traits>::operator<<(__streambuf_type* __sb)\n+  // filebuf-> NULL \n+  std::ifstream f_in1(name_01);\n+  std::ofstream f_out1(name_02);\n+  std::stringbuf* strbuf01 = NULL;\n+  iostate state01 = f_in1.rdstate();\n+  f_in1 >> strbuf01;\n+  iostate state02 = f_in1.rdstate();\n+  VERIFY( state01 != state02 );\n+  VERIFY( (state02 & std::ios_base::failbit) != 0 );\n+  state01 = f_out1.rdstate();\n+  f_out1 << strbuf01;\n+  state02 = f_out1.rdstate();\n+  VERIFY( state01 != state02 );\n+  VERIFY( (state02 & std::ios_base::badbit) != 0 );\n+\n+  // filebuf->filebuf\n+  std::ifstream f_in(name_01);\n+  std::ofstream f_out(name_02);\n+  f_out << f_in.rdbuf();\n+  f_in.close();\n+  f_out.close();\n+\n+  // filebuf->stringbuf->filebuf\n+  std::ifstream f_in2(name_03);\n+  std::ofstream f_out2(name_04); // should be different name\n+  std::stringbuf strbuf02;\n+  f_in2 >> &strbuf02;\n+  f_out2 << &strbuf02;\n+  f_in2.close();\n+  f_out2.close();\n+}\n+\n+int \n+main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "c82e5cf508b28cd078121722857a90440ed3dcae", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/2.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,70 @@\n+// 1999-08-16 bkoz\n+// 1999-11-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// via Brent Verner <brent@rcfile.org>\n+// http://gcc.gnu.org/ml/libstdc++/2000-06/msg00005.html\n+void\n+test03(void)\n+{\n+  using namespace std;\n+\n+  typedef ios::pos_type \tpos_type;\n+\n+  const char* TEST_IN = \"ostream_inserter_other_in\";\n+  const char* TEST_OUT = \"ostream_inserter_other_out\";\n+  pos_type i_read, i_wrote, rs, ws;\n+  double tf_size = BUFSIZ * 2.5;\n+  ofstream testfile(TEST_IN);\n+\n+  for (int i = 0; i < tf_size; ++i)\n+    testfile.put('.');\n+  testfile.close();\n+\n+  ifstream in(TEST_IN);\n+  ofstream out(TEST_OUT);\n+  out << in.rdbuf();\n+  in.seekg(0,ios_base::beg);\n+  out.seekp(0,ios_base::beg);\n+  rs = in.tellg();\n+  ws = out.tellp();\n+  in.seekg(0,ios_base::end);\n+  out.seekp(0,ios_base::end);\n+  i_read = in.tellg() - rs;\n+  i_wrote = out.tellp() - ws;\n+  in.close();\n+  out.close();\n+}\n+\n+int \n+main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "89dca57cd54c32e575ba7b3477285dcf2b6566d8", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/3.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,50 @@\n+// 1999-08-16 bkoz\n+// 1999-11-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3272\n+void test04()\n+{\n+  using namespace std;\n+  bool test = true;\n+  istringstream istr(\"inside betty carter\");\n+  ostringstream ostr;\n+  ostr << istr.rdbuf() << endl;\n+\n+  if (ostr.rdstate() & ios_base::eofbit) \n+    test = false;\n+\n+  VERIFY( test );\n+}\n+\n+int \n+main()\n+{\n+  test04(); \n+  return 0;\n+}"}, {"sha": "1ba200aaca710e05301e79c83970ae7bbb810ce2", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/4.cc", "status": "renamed", "additions": 1, "deletions": 128, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,7 +1,7 @@\n // 1999-08-16 bkoz\n // 1999-11-01 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,128 +28,6 @@\n #include <fstream>\n #include <testsuite_hooks.h>\n \n-const int size = 1000;\n-const char name_01[] = \"ostream_inserter_other-1.tst\";\n-const char name_02[] = \"ostream_inserter_other-1.txt\";\n-const char name_03[] = \"ostream_inserter_other-2.tst\";\n-const char name_04[] = \"ostream_inserter_other-2.txt\";\n-\n-\n-// stringstream\n-int \n-test01() \n-{\n-  bool test = true;\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  return 0;\n-}\n-\n-// fstream\n-int\n-test02() \n-{\n-  typedef std::ios_base::iostate iostate;\n-  bool test = true;\n-\n-  // basic_ostream<_CharT, _Traits>::operator<<(__streambuf_type* __sb)\n-  // filebuf-> NULL \n-  std::ifstream f_in1(name_01);\n-  std::ofstream f_out1(name_02);\n-  std::stringbuf* strbuf01 = NULL;\n-  iostate state01 = f_in1.rdstate();\n-  f_in1 >> strbuf01;\n-  iostate state02 = f_in1.rdstate();\n-  VERIFY( state01 != state02 );\n-  VERIFY( (state02 & std::ios_base::failbit) != 0 );\n-  state01 = f_out1.rdstate();\n-  f_out1 << strbuf01;\n-  state02 = f_out1.rdstate();\n-  VERIFY( state01 != state02 );\n-  VERIFY( (state02 & std::ios_base::badbit) != 0 );\n-\n-  // filebuf->filebuf\n-  std::ifstream f_in(name_01);\n-  std::ofstream f_out(name_02);\n-  f_out << f_in.rdbuf();\n-  f_in.close();\n-  f_out.close();\n-\n-  // filebuf->stringbuf->filebuf\n-  std::ifstream f_in2(name_03);\n-  std::ofstream f_out2(name_04); // should be different name\n-  std::stringbuf strbuf02;\n-  f_in2 >> &strbuf02;\n-  f_out2 << &strbuf02;\n-  f_in2.close();\n-  f_out2.close();\n-\n-  // no characters inserted\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  \n-  return 0;\n-}\n-\n-// via Brent Verner <brent@rcfile.org>\n-// http://gcc.gnu.org/ml/libstdc++/2000-06/msg00005.html\n-int\n-test03(void)\n-{\n-  using namespace std;\n-\n-  typedef ios::pos_type \tpos_type;\n-\n-  const char* TEST_IN = \"ostream_inserter_other_in\";\n-  const char* TEST_OUT = \"ostream_inserter_other_out\";\n-  pos_type i_read, i_wrote, rs, ws;\n-  double tf_size = BUFSIZ * 2.5;\n-  ofstream testfile(TEST_IN);\n-\n-  for (int i = 0; i < tf_size; ++i)\n-    testfile.put('.');\n-  testfile.close();\n-\n-  ifstream in(TEST_IN);\n-  ofstream out(TEST_OUT);\n-  out << in.rdbuf();\n-  in.seekg(0,ios_base::beg);\n-  out.seekp(0,ios_base::beg);\n-  rs = in.tellg();\n-  ws = out.tellp();\n-  in.seekg(0,ios_base::end);\n-  out.seekp(0,ios_base::end);\n-  i_read = in.tellg() - rs;\n-  i_wrote = out.tellp() - ws;\n-  in.close();\n-  out.close();\n-  \n-#ifdef DEBUG_ASSERT\n-  assert(i_read == i_wrote);\n-#endif\n-\n-  return 0;\n-}\n-\n-// libstdc++/3272\n-void test04()\n-{\n-  using namespace std;\n-  bool test = true;\n-  istringstream istr(\"inside betty carter\");\n-  ostringstream ostr;\n-  ostr << istr.rdbuf() << endl;\n-\n-  if (ostr.rdstate() & ios_base::eofbit) \n-    test = false;\n-\n-  VERIFY( test );\n-}\n-\n-\n class test_buffer_1 : public std::streambuf \n {\n public:\n@@ -271,11 +149,6 @@ void test05()\n int \n main()\n {\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  \n   test05();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_other.cc"}, {"sha": "fcacbcb648375f7648e289e862b34f81a92dff33", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/9318-out.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F9318-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F9318-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F9318-out.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,73 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9318\n+class Outbuf : public std::streambuf\n+{\n+public:\n+  typedef std::streambuf::traits_type traits_type;\n+\n+  std::string result() const { return str; }\n+\n+protected:\n+  virtual int_type overflow(int_type c = traits_type::eof())\n+  {\n+    if (!traits_type::eq_int_type(c, traits_type::eof()))\n+      str.push_back(traits_type::to_char_type(c));\n+    return traits_type::not_eof(c);\n+  }\n+\n+private:\n+  std::string str;\n+};\n+\n+void test10()\n+{\n+  bool test = true;\n+\n+  std::stringbuf sbuf(\"Bad Moon Rising\", std::ios::in);\n+  Outbuf buf;\n+  std::ostream stream(&buf);\n+  stream << &sbuf;\n+\n+  VERIFY( buf.result() == \"Bad Moon Rising\" );\n+}\n+\n+int main() \n+{\n+  test10();\n+  return 0;\n+}"}, {"sha": "61ec1a71eaff6a2e218fbbbb49b32c9609051723", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/9424-out.cc", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F9424-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F9424-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F9424-out.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,113 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <cstring> // for memset, memcmp\n+#include <streambuf>\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9424\n+class Outbuf_2 : public std::streambuf\n+{\n+  char buf[1];\n+\n+public:\n+  Outbuf_2()\n+  {\n+    setp(buf, buf + 1);\n+  }\n+\n+  int_type overflow(int_type c)\n+  {\n+    int_type eof = traits_type::eof();\n+    \n+    if (pptr() < epptr())\n+      {\n+\tif (traits_type::eq_int_type(c, eof))\n+\t  return traits_type::not_eof(c);\n+\t\n+\t*pptr() = traits_type::to_char_type(c);\n+\tpbump(1);\n+\treturn c;\n+      }\n+\n+    return eof;\n+  }\n+};\n+\n+class Inbuf_2 : public std::streambuf\n+{\n+  static const char buf[];\n+  const char* current;\n+  int size;\n+\n+public:\n+  Inbuf_2()\n+  {\n+    current = buf;\n+    size = std::strlen(buf);\n+  }\n+  \n+  int_type underflow()\n+  {\n+    if (current < buf + size)\n+      return traits_type::to_int_type(*current);\n+    return traits_type::eof();\n+  }\n+  \n+  int_type uflow()\n+  {\n+    if (current < buf + size)\n+      return traits_type::to_int_type(*current++);\n+    return traits_type::eof();\n+  }\n+};\n+\n+const char Inbuf_2::buf[] = \"Atteivlis\";\n+\n+void test12()\n+{ \n+  bool test = true;\n+ \n+  Outbuf_2 outbuf2;\n+  std::ostream os (&outbuf2);\n+  Inbuf_2 inbuf2;\n+  os << &inbuf2;\n+  VERIFY( inbuf2.sgetc() == 't' );\n+  VERIFY( os.good() );\n+}\n+\n+int main() \n+{\n+  test12();\n+  return 0;\n+}"}, {"sha": "cba75f250fa5f08bd73800740504a07bf109836b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/sentry/char/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,53 @@\n+// 2003-02-06  Paolo Carlini  <pcarlini@unitus.it>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.6.2.3 class basic_ostream::sentry\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9562\n+void\n+test01()\n+{\n+  bool test = true;\n+\n+  std::stringbuf strbuf01;\n+  std::ostream strm1(&strbuf01);\n+  const std::ostream::sentry sentry1(strm1);\n+\n+  VERIFY( bool(sentry1) == true );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4e7562cfd1232353c595e73068c82b835ceee913", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/sentry/char/2.cc", "status": "renamed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -33,19 +33,6 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-// libstdc++/9562\n-void\n-test01()\n-{\n-  bool test = true;\n-\n-  std::stringbuf strbuf01;\n-  std::ostream strm1(&strbuf01);\n-  const std::ostream::sentry sentry1(strm1);\n-\n-  VERIFY( bool(sentry1) == true );\n-}\n-\n // libstdc++/9563\n struct buf: std::streambuf\n {\n@@ -79,7 +66,6 @@ test02()\n \n int main() \n {\n-  test01();\n   test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/27_io/ostream_sentry.cc"}, {"sha": "3cdf3b833102052a627ed1342a81f89a41a3a8cc", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/sentry/char/3983-fstream.cc", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F3983-fstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F3983-fstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F3983-fstream.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,160 @@\n+// 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.2.1.6 class ios_base::init\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// char_traits specialization\n+namespace std\n+{\n+  template<>\n+    struct char_traits<unsigned char>\n+    {\n+      typedef unsigned char \tchar_type;\n+      // Unsigned as wint_t in unsigned.\n+      typedef unsigned long  \tint_type;\n+      typedef streampos \tpos_type;\n+      typedef streamoff \toff_type;\n+      typedef mbstate_t \tstate_type;\n+      \n+      static void \n+      assign(char_type& __c1, const char_type& __c2)\n+      { __c1 = __c2; }\n+\n+      static bool \n+      eq(const char_type& __c1, const char_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static bool \n+      lt(const char_type& __c1, const char_type& __c2)\n+      { return __c1 < __c2; }\n+\n+      static int \n+      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+      { \n+\tfor (size_t __i = 0; __i < __n; ++__i)\n+\t  if (!eq(__s1[__i], __s2[__i]))\n+\t    return lt(__s1[__i], __s2[__i]) ? -1 : 1;\n+\treturn 0; \n+      }\n+\n+      static size_t\n+      length(const char_type* __s)\n+      { \n+\tconst char_type* __p = __s; \n+\twhile (__p && *__p) \n+\t  ++__p; \n+\treturn (__p - __s); \n+      }\n+\n+      static const char_type* \n+      find(const char_type* __s, size_t __n, const char_type& __a)\n+      { \n+\tfor (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)\n+\t  if (*__p == __a) return __p;\n+\treturn 0;\n+      }\n+\n+      static char_type* \n+      move(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memmove(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      copy(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memcpy(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      assign(char_type* __s, size_t __n, char_type __a)\n+      { \n+\tfor (char_type* __p = __s; __p < __s + __n; ++__p) \n+\t  assign(*__p, __a);\n+        return __s; \n+      }\n+\n+      static char_type \n+      to_char_type(const int_type& __c)\n+      { return char_type(); }\n+\n+      static int_type \n+      to_int_type(const char_type& __c) { return int_type(); }\n+\n+      static bool \n+      eq_int_type(const int_type& __c1, const int_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static int_type \n+      eof() { return static_cast<int_type>(-1); }\n+\n+      static int_type \n+      not_eof(const int_type& __c)\n+      { return eq_int_type(__c, eof()) ? int_type(0) : __c; }\n+    };\n+} // namespace std\n+\n+// libstdc++/3983\n+// Sentry uses locale info, so have to try one formatted input/output.\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // output streams\n+  basic_ofstream<unsigned char> ofs_uc;\n+\n+  try \n+    { \n+      bool b = true;\n+      ofs_uc << b;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+   \n+  VERIFY( test );\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_string<unsigned char>::size_type \n+  std::basic_string<unsigned char>::_Rep::_S_max_size;\n+\n+template \n+  unsigned char\n+  std::basic_string<unsigned char>::_Rep::_S_terminal;\n+#endif\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "5f68c585ad5174000b1da2beb44de3fdf531000f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/sentry/char/3983-sstream.cc", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F3983-sstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F3983-sstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F3983-sstream.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,160 @@\n+// 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.2.1.6 class ios_base::init\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// char_traits specialization\n+namespace std\n+{\n+  template<>\n+    struct char_traits<unsigned char>\n+    {\n+      typedef unsigned char \tchar_type;\n+      // Unsigned as wint_t in unsigned.\n+      typedef unsigned long  \tint_type;\n+      typedef streampos \tpos_type;\n+      typedef streamoff \toff_type;\n+      typedef mbstate_t \tstate_type;\n+      \n+      static void \n+      assign(char_type& __c1, const char_type& __c2)\n+      { __c1 = __c2; }\n+\n+      static bool \n+      eq(const char_type& __c1, const char_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static bool \n+      lt(const char_type& __c1, const char_type& __c2)\n+      { return __c1 < __c2; }\n+\n+      static int \n+      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+      { \n+\tfor (size_t __i = 0; __i < __n; ++__i)\n+\t  if (!eq(__s1[__i], __s2[__i]))\n+\t    return lt(__s1[__i], __s2[__i]) ? -1 : 1;\n+\treturn 0; \n+      }\n+\n+      static size_t\n+      length(const char_type* __s)\n+      { \n+\tconst char_type* __p = __s; \n+\twhile (__p && *__p) \n+\t  ++__p; \n+\treturn (__p - __s); \n+      }\n+\n+      static const char_type* \n+      find(const char_type* __s, size_t __n, const char_type& __a)\n+      { \n+\tfor (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)\n+\t  if (*__p == __a) return __p;\n+\treturn 0;\n+      }\n+\n+      static char_type* \n+      move(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memmove(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      copy(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memcpy(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      assign(char_type* __s, size_t __n, char_type __a)\n+      { \n+\tfor (char_type* __p = __s; __p < __s + __n; ++__p) \n+\t  assign(*__p, __a);\n+        return __s; \n+      }\n+\n+      static char_type \n+      to_char_type(const int_type& __c)\n+      { return char_type(); }\n+\n+      static int_type \n+      to_int_type(const char_type& __c) { return int_type(); }\n+\n+      static bool \n+      eq_int_type(const int_type& __c1, const int_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static int_type \n+      eof() { return static_cast<int_type>(-1); }\n+\n+      static int_type \n+      not_eof(const int_type& __c)\n+      { return eq_int_type(__c, eof()) ? int_type(0) : __c; }\n+    };\n+} // namespace std\n+\n+// libstdc++/3983\n+// Sentry uses locale info, so have to try one formatted input/output.\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // output streams\n+  basic_ostringstream<unsigned char> oss_uc;\n+\n+  try \n+    { \n+      bool b = true;\n+      oss_uc << b;\n+    }\n+  catch (bad_cast& obj)\n+    { }\n+  catch (exception& obj)\n+    { test = false; }\n+   \n+  VERIFY( test );\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_string<unsigned char>::size_type \n+  std::basic_string<unsigned char>::_Rep::_S_max_size;\n+\n+template \n+  unsigned char\n+  std::basic_string<unsigned char>::_Rep::_S_terminal;\n+#endif\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "05884fc123dd235c0c269fd48e423197d930b64a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/tellp/char/1.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,62 @@\n+// 2000-06-29 bkoz\n+\n+// Copyright (C) 2000, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.4 basic_ostream seek members\n+\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef ios::pos_type pos_type;\n+\n+  bool test = true;\n+  const char str_lit01[] = \"ostream_seeks-1.txt\";\n+\n+  // out\n+  // test default ctors leave things in the same positions...\n+  ostringstream ost1;\n+  pos_type p1 = ost1.tellp();\n+\n+  ofstream ofs1;\n+  pos_type p2 = ofs1.tellp();\n+\n+  VERIFY( p1 == p2 );\n+\n+  // out\n+  // test ctors leave things in the same positions...\n+  ostringstream ost2(\"bob_marley:kaya\");\n+  p1 = ost2.tellp();\n+\n+  ofstream ofs2(str_lit01);\n+  p2 = ofs2.tellp();\n+ \n+  VERIFY( p1 == p2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e278daec21af1ecea7c867d4305cda0a1a7d6adf", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/tellp/char/2.cc", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,6 +1,6 @@\n // 2000-03-23 bkoz\n \n-// Copyright (C) 2000 Free Software Foundation\n+// Copyright (C) 2000, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,7 +22,6 @@\n #include <ostream>\n #include <testsuite_hooks.h>\n \n-\n void test01()\n {\n   using namespace std;\n@@ -41,10 +40,6 @@ void test01()\n   ost << \"ghost dog: way of the samurai\";\n   pos1 = ost.tellp();\n   VERIFY( pos1 == pos_type(33) );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n }                                    \n \n int main()", "previous_filename": "libstdc++-v3/testsuite/27_io/ostream_unformatted.cc"}, {"sha": "4fd6be62f8beea0b5a0a2b6de820899fabe98d14", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/1.cc", "status": "renamed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -45,16 +45,3 @@ void test01()\n   typedef test_type::pos_type pos_type;\n   typedef test_type::off_type off_type;\n }\n-\n-namespace test \n-{\n-  using namespace std;\n-  typedef short type_t;\n-  template class basic_ostringstream<type_t, char_traits<type_t> >;\n-} // test\n-\n-int main() \n-{\n-  test01();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/27_io/ostringstream.cc"}, {"sha": "a1ca0bf27ed303dc6ac2e27e949d2af97cab0868", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,42 @@\n+// 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.7.3 - Class basic_ostringstream\n+// NB: This file is for testing basic_ostringstream with NO OTHER INCLUDES.\n+\n+#include <sstream>\n+\n+// { dg-do compile }\n+\n+namespace test \n+{\n+  using namespace std;\n+  typedef short type_t;\n+  template class basic_ostringstream<type_t, char_traits<type_t> >;\n+} // test"}, {"sha": "777b70226a7921792f13d5597f0acb1de38f77ba", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/3.cc", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,149 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/2020\n+// should be able to use custom char_type, custom traits type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // default ctor\n+  gnu_char_type() { }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n+void test07()\n+{\n+  bool test = true;\n+  typedef std::basic_ostringstream<gnu_char_type, gnu_char_traits> gnu_osstr;\n+\n+  try\n+    { \n+      gnu_osstr obj;\n+    }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_streambuf<gnu_char_type>::int_type\n+  std::basic_streambuf<gnu_char_type>::_S_pback_size;\n+#endif\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more surf!!!"}, {"sha": "48c56383e4c6aed02449232b1484900e09d98a47", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/4.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,50 @@\n+// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+\n+#include <ostream>\n+#include <sstream>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::ostringstream test_type;\n+  typedef std::ostream base_type;\n+  const test_type& obj = test_type();\n+  const base_type* base = &obj;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "3edad1a508009342057bcb850c072938472f88ef", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/cons/char/3.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,64 @@\n+// 2001-05-23 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.3.2 member functions (ostringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// 03: sanity checks for strings, stringbufs\n+void\n+test03()\n+{\n+  bool test = false;\n+\n+  // Empty string sanity check.\n+  std::string str01;\n+  std::string::iterator __i_start = str01.begin();\n+  std::string::iterator __i_end = str01.end();\n+  std::string::size_type len = str01.size();\n+  test = __i_start == __i_end;\n+  VERIFY( len == 0 );\n+\n+  // Full string sanity check.\n+  std::string str02(\"these golden days, i spend waiting for you:\\n\"\n+\t\t    \"Betty Carter on Verve with I'm Yours and You're Mine.\");\n+  __i_start = str02.begin();\n+  __i_end = str02.end();\n+  len = str02.size();\n+  VERIFY( __i_start != __i_end );\n+  VERIFY( len != 0 );\n+ \n+  // Test an empty ostringstream for sanity.\n+  std::ostringstream ostrstream0;\n+  std::string str03 = ostrstream0.str();\n+  __i_start = str03.begin();\n+  __i_end = str03.end();\n+  len = str03.size();\n+  VERIFY( __i_start == __i_end );\n+  VERIFY( len == 0 );\n+  VERIFY( str01 == str03 );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "8019bba06f292e1790698ed5d88102a91d21449b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/rdbuf/char/2832.cc", "status": "renamed", "additions": 1, "deletions": 82, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frdbuf%2Fchar%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frdbuf%2Fchar%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frdbuf%2Fchar%2F2832.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -1,6 +1,6 @@\n // 2001-05-23 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,34 +23,6 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-void test01()\n-{\n-  bool test = true;\n-  std::ostringstream os01;\n-  const std::string str00; \n-  const std::string str01 = \"123\";\n-  std::string str02;\n-  const int i01 = 123;\n-  int a,b;\n-\n-  std::ios_base::iostate state1, state2, statefail, stateeof;\n-  statefail = std::ios_base::failbit;\n-  stateeof = std::ios_base::eofbit;\n-\n-  // string str() const\n-  str02 = os01.str();\n-  VERIFY( str00 == str02 );\n-\n-  // void str(const basic_string&)\n-  os01.str(str01);\n-  str02 = os01.str();\n-  VERIFY( str01 == str02 );\n-\n- #ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n void \n redirect_buffer(std::ios& stream, std::streambuf* new_buf) \n { stream.rdbuf(new_buf); }\n@@ -97,61 +69,8 @@ void test02()\n   // These semantics are a joke, a serious defect, and incredibly lame.\n }\n \n-// 03: sanity checks for strings, stringbufs\n-void\n-test03()\n-{\n-  bool test = false;\n-\n-  // Empty string sanity check.\n-  std::string str01;\n-  std::string::iterator __i_start = str01.begin();\n-  std::string::iterator __i_end = str01.end();\n-  std::string::size_type len = str01.size();\n-  test = __i_start == __i_end;\n-  VERIFY( len == 0 );\n-\n-  // Full string sanity check.\n-  std::string str02(\"these golden days, i spend waiting for you:\\n\"\n-\t\t    \"Betty Carter on Verve with I'm Yours and You're Mine.\");\n-  __i_start = str02.begin();\n-  __i_end = str02.end();\n-  len = str02.size();\n-  VERIFY( __i_start != __i_end );\n-  VERIFY( len != 0 );\n- \n-  // Test an empty ostringstream for sanity.\n-  std::ostringstream ostrstream0;\n-  std::string str03 = ostrstream0.str();\n-  __i_start = str03.begin();\n-  __i_end = str03.end();\n-  len = str03.size();\n-  VERIFY( __i_start == __i_end );\n-  VERIFY( len == 0 );\n-  VERIFY( str01 == str03 );\n-}\n-\n-// user-reported error\n-class derived_oss: public std::ostringstream \n-{\n-public:\n-  derived_oss() : std::ostringstream() { }\n-};\n-\n-void\n-test04()\n-{\n-  bool test = true;\n-  derived_oss yy;\n-  yy << \"buena vista social club\\n\";\n-  VERIFY( yy.str() == std::string(\"buena vista social club\\n\") );\n-}\n-\n int main()\n {\n-  test01();\n   test02();\n-  test03();\n-  test04();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/27_io/ostringstream_members.cc"}, {"sha": "7a3b758ae7290dee2f0b86ecc62f6126be9ddd26", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/str/char/1.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,54 @@\n+// 2001-05-23 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.3.2 member functions (ostringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test = true;\n+  std::ostringstream os01;\n+  const std::string str00; \n+  const std::string str01 = \"123\";\n+  std::string str02;\n+  const int i01 = 123;\n+  int a,b;\n+\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+\n+  // string str() const\n+  str02 = os01.str();\n+  VERIFY( str00 == str02 );\n+\n+  // void str(const basic_string&)\n+  os01.str(str01);\n+  str02 = os01.str();\n+  VERIFY( str01 == str02 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "310b298152b39079da6ff745619584dbf642ebf4", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/str/char/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,46 @@\n+// 2001-05-23 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.3.2 member functions (ostringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// user-reported error\n+class derived_oss: public std::ostringstream \n+{\n+public:\n+  derived_oss() : std::ostringstream() { }\n+};\n+\n+void\n+test04()\n+{\n+  bool test = true;\n+  derived_oss yy;\n+  yy << \"buena vista social club\\n\";\n+  VERIFY( yy.str() == std::string(\"buena vista social club\\n\") );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "d666528dc675b5c4ea28655e9eb3dca890d9cab3", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/1.cc", "status": "renamed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -46,18 +46,3 @@ void test01()\n   typedef test_type::pos_type pos_type;\n   typedef test_type::off_type off_type;\n }\n-\n-namespace test \n-{\n-  using namespace std;\n-  using __gnu_cxx_test::pod_char;\n-  typedef short type_t;\n-  template class basic_streambuf<type_t, char_traits<type_t> >;\n-  template class basic_streambuf<pod_char, char_traits<pod_char> >;\n-} // test\n-\n-int main() \n-{\n-  test01();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/27_io/streambuf.cc"}, {"sha": "b3a48269bf4c3159e0a54071cf8404e98823676f", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,45 @@\n+// 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 - Template class basic_streambuf\n+// NB: This file is for testing basic_streambuf with NO OTHER INCLUDES.\n+\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+namespace test \n+{\n+  using namespace std;\n+  using __gnu_cxx_test::pod_char;\n+  typedef short type_t;\n+  template class basic_streambuf<type_t, char_traits<type_t> >;\n+  template class basic_streambuf<pod_char, char_traits<pod_char> >;\n+} // test"}, {"sha": "ffc765f77f9d13f74ef964731f3ed53ad0d5bb22", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/3.cc", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,147 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/2020\n+// should be able to use custom char_type, custom traits type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // default ctor\n+  gnu_char_type() { }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n+class gnu_sbuf: public std::basic_streambuf<gnu_char_type, gnu_char_traits>\n+{ };\n+\n+void test07()\n+{\n+  bool test = true;\n+  \n+  try\n+    { gnu_sbuf obj; }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_streambuf<gnu_char_type>::int_type\n+  std::basic_streambuf<gnu_char_type>::_S_pback_size;\n+#endif\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more surf!!!"}, {"sha": "905852422a6419345c7dfc9c69e3e554f2398bfc", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/cons/char/1.cc", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,111 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::streambuf\n+{\n+public:\n+\n+  // Typedefs:\n+  typedef std::streambuf::traits_type traits_type;\n+  typedef std::streambuf::char_type char_type;\n+\n+  testbuf(): std::streambuf() \n+  { _M_mode = (std::ios_base::in | std::ios_base::out); }\n+\n+  bool\n+  check_pointers()\n+  { \n+    bool test = true;\n+    VERIFY( this->eback() == NULL );\n+    VERIFY( this->gptr() == NULL );\n+    VERIFY( this->egptr() == NULL );\n+    VERIFY( this->pbase() == NULL );\n+    VERIFY( this->pptr() == NULL );\n+    VERIFY( this->epptr() == NULL );\n+    return test;\n+  }\n+\n+  int_type \n+  pub_uflow() \n+  { return (this->uflow()); }\n+\n+  int_type \n+  pub_overflow(int_type __c = traits_type::eof()) \n+  { return (this->overflow(__c)); }\n+\n+  int_type \n+  pub_pbackfail(int_type __c) \n+  { return (this->pbackfail(__c)); }\n+\n+  void \n+  pub_setg(char* beg, char* cur, char *end) \n+  { this->setg(beg, cur, end); }\n+\n+  void \n+  pub_setp(char* beg, char* end) \n+  { this->setp(beg, end); }\n+\n+protected:\n+  int_type \n+  underflow() \n+  { \n+    int_type __retval = traits_type::eof();\n+    if (this->gptr() < this->egptr())\n+      __retval = traits_type::not_eof(0); \n+    return __retval;\n+  }\n+};\n+\n+void test01()\n+{\n+  typedef testbuf::traits_type traits_type;\n+  typedef testbuf::int_type int_type;\n+\n+  bool test = true;\n+  char* lit01 = \"chicago underground trio/possible cube on delmark\";\n+  testbuf buf01;\n+\n+  // 27.5.2.1 basic_streambuf ctors\n+  // default ctor initializes \n+  // - all pointer members to null pointers\n+  // - locale to current global locale\n+  VERIFY( buf01.check_pointers() );\n+  VERIFY( buf01.getloc() == std::locale() );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b574cdc6736b60294065085f01da1ae5dcf43a33", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/imbue/char/1.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,52 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::streambuf\n+{\n+public:\n+  typedef std::streambuf::traits_type traits_type;\n+\n+  testbuf() : std::streambuf() { }\n+};\n+\n+// test the streambuf locale settings\n+void test02() \n+{\n+  testbuf buf;\n+  std::locale loc_c = std::locale::classic();\n+  loc_c = buf.getloc();\n+  buf.pubimbue(loc_c); //This should initialize _M_init to true\n+  std::locale loc_tmp = buf.getloc(); \n+  VERIFY( loc_tmp == loc_c );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "3b8da10b5ada172441a0f496d540501c4fb6b478", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/imbue/char/9322.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fchar%2F9322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fchar%2F9322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fchar%2F9322.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,72 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <cstring> // for memset, memcmp\n+#include <streambuf>\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::streambuf\n+{\n+public:\n+  typedef std::streambuf::traits_type traits_type;\n+\n+  testbuf() : std::streambuf() { }\n+};\n+\n+// libstdc++/9322\n+void test08()\n+{\n+  using std::locale;\n+  bool test = true;\n+\n+  locale loc;\n+  testbuf ob;\n+  VERIFY( ob.getloc() == loc );\n+\n+  locale::global(locale(\"en_US\"));\n+  VERIFY( ob.getloc() == loc );\n+\n+  locale loc_de (\"de_DE\");\n+  locale ret = ob.pubimbue(loc_de);\n+  VERIFY( ob.getloc() == loc_de );\n+  VERIFY( ret == loc );\n+\n+  locale::global(loc);\n+  VERIFY( ob.getloc() == loc_de );\n+}\n+\n+int main() \n+{\n+  __gnu_cxx_test::run_test_wrapped_generic_locale_exception_catcher(test08);\n+  return 0;\n+}"}, {"sha": "386193b46c075b811af81828e80d789cbc5090b7", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/overflow/char/1.cc", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,116 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::streambuf\n+{\n+public:\n+\n+  // Typedefs:\n+  typedef std::streambuf::traits_type traits_type;\n+  typedef std::streambuf::char_type char_type;\n+\n+  testbuf(): std::streambuf() \n+  { _M_mode = (std::ios_base::in | std::ios_base::out); }\n+\n+  bool\n+  check_pointers()\n+  { \n+    bool test = true;\n+    VERIFY( this->eback() == NULL );\n+    VERIFY( this->gptr() == NULL );\n+    VERIFY( this->egptr() == NULL );\n+    VERIFY( this->pbase() == NULL );\n+    VERIFY( this->pptr() == NULL );\n+    VERIFY( this->epptr() == NULL );\n+    return test;\n+  }\n+\n+  int_type \n+  pub_uflow() \n+  { return (this->uflow()); }\n+\n+  int_type \n+  pub_overflow(int_type __c = traits_type::eof()) \n+  { return (this->overflow(__c)); }\n+\n+  int_type \n+  pub_pbackfail(int_type __c) \n+  { return (this->pbackfail(__c)); }\n+\n+  void \n+  pub_setg(char* beg, char* cur, char *end) \n+  { this->setg(beg, cur, end); }\n+\n+  void \n+  pub_setp(char* beg, char* end) \n+  { this->setp(beg, end); }\n+\n+protected:\n+  int_type \n+  underflow() \n+  { \n+    int_type __retval = traits_type::eof();\n+    if (this->gptr() < this->egptr())\n+      __retval = traits_type::not_eof(0); \n+    return __retval;\n+  }\n+};\n+\n+void test01()\n+{\n+  typedef testbuf::traits_type traits_type;\n+  typedef testbuf::int_type int_type;\n+\n+  bool test = true;\n+  char* lit01 = \"chicago underground trio/possible cube on delmark\";\n+  testbuf buf01;\n+\n+  // pbackfail\n+  int i01 = 3;\n+  buf01.pub_setg(lit01, lit01, (lit01 + i01));\n+  VERIFY( i01 == buf01.in_avail() );\n+  int_type intt01 = traits_type::to_int_type('b');\n+  VERIFY( traits_type::eof() == buf01.pub_pbackfail(intt01) );\n+\n+  // overflow\n+  VERIFY( traits_type::eof() == buf01.pub_overflow(intt01) );\n+  VERIFY( traits_type::eof() == buf01.pub_overflow() );\n+  VERIFY( buf01.sgetc() == traits_type::to_int_type(lit01[0]) );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "dcee654b213e1c907fa40ca384ebaab9944c67a8", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/overflow/char/2.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,80 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// test03\n+// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00151.html\n+template<typename charT, typename traits = std::char_traits<charT> >\n+  class basic_nullbuf : public std::basic_streambuf<charT, traits>\n+  {\n+  protected:\n+    typedef typename\n+      std::basic_streambuf<charT, traits>::int_type int_type;\n+    virtual int_type \n+    overflow(int_type c) \n+    {  return traits::not_eof(c); }\n+  };\n+\n+typedef basic_nullbuf<char> nullbuf;\n+\n+template<typename T>\n+  char\n+  print(const T& x) \n+  {\n+   nullbuf ob;\n+   std::ostream out(&ob); \n+   out << x << std::endl;\n+   return (!out ? '0' : '1');\n+ }\n+\n+void test03() \n+{\n+  bool test = true;\n+  const std::string control01(\"11111\");\n+  std::string test01;\n+\n+  test01 += print(true);\n+  test01 += print(3.14159);\n+  test01 += print(10);\n+  test01 += print('x');\n+  test01 += print(\"pipo\");\n+\n+  VERIFY( test01 == control01 );\n+}\n+\n+int main() \n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "1b6cf0cf332f8d0ad611b0faec9faea36f4097bb", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/overflow/char/3599.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F3599.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F3599.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F3599.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,68 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3599\n+class testbuf : public std::streambuf\n+{\n+public:\n+  typedef std::streambuf::traits_type traits_type;\n+\n+  testbuf() : std::streambuf() { }\n+ \n+protected:\n+  int_type \n+  overflow(int_type c = traits_type::eof()) \n+  { return traits_type::not_eof(0); }\n+};\n+\n+void\n+test07()\n+{\n+  bool test = true;\n+  testbuf ob;\n+  std::ostream out(&ob); \n+\n+  out << \"gasp\";\n+  VERIFY(out.good());\n+\n+  out << std::endl;\n+  VERIFY(out.good());\n+}\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "9efa3a72a4829dc0372c5bddc88e6a3b3a4722c4", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sgetc/char/1.cc", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,118 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::streambuf\n+{\n+public:\n+\n+  // Typedefs:\n+  typedef std::streambuf::traits_type traits_type;\n+  typedef std::streambuf::char_type char_type;\n+\n+  testbuf(): std::streambuf() \n+  { _M_mode = (std::ios_base::in | std::ios_base::out); }\n+\n+  bool\n+  check_pointers()\n+  { \n+    bool test = true;\n+    VERIFY( this->eback() == NULL );\n+    VERIFY( this->gptr() == NULL );\n+    VERIFY( this->egptr() == NULL );\n+    VERIFY( this->pbase() == NULL );\n+    VERIFY( this->pptr() == NULL );\n+    VERIFY( this->epptr() == NULL );\n+    return test;\n+  }\n+\n+  int_type \n+  pub_uflow() \n+  { return (this->uflow()); }\n+\n+  int_type \n+  pub_overflow(int_type __c = traits_type::eof()) \n+  { return (this->overflow(__c)); }\n+\n+  int_type \n+  pub_pbackfail(int_type __c) \n+  { return (this->pbackfail(__c)); }\n+\n+  void \n+  pub_setg(char* beg, char* cur, char *end) \n+  { this->setg(beg, cur, end); }\n+\n+  void \n+  pub_setp(char* beg, char* end) \n+  { this->setp(beg, end); }\n+\n+protected:\n+  int_type \n+  underflow() \n+  { \n+    int_type __retval = traits_type::eof();\n+    if (this->gptr() < this->egptr())\n+      __retval = traits_type::not_eof(0); \n+    return __retval;\n+  }\n+};\n+\n+void test01()\n+{\n+  typedef testbuf::traits_type traits_type;\n+  typedef testbuf::int_type int_type;\n+\n+  bool test = true;\n+  char* lit01 = \"chicago underground trio/possible cube on delmark\";\n+  testbuf buf01;\n+\n+  // 27.5.2.3.1 get area\n+  // 27.5.2.2.3 get area\n+  // 27.5.2.4.3 get area\n+  int i01 = 3;\n+  buf01.pub_setg(lit01, lit01, (lit01 + i01));\n+  VERIFY( i01 == buf01.in_avail() );\n+\n+  VERIFY( buf01.pub_uflow() == lit01[0] );\n+  VERIFY( buf01.sgetc() == traits_type::to_int_type(lit01[1]) );\n+  VERIFY( buf01.pub_uflow() == lit01[1] );\n+  VERIFY( buf01.sgetc() == traits_type::to_int_type(lit01[2]) );\n+  VERIFY( buf01.pub_uflow() == lit01[2] );\n+  VERIFY( buf01.sgetc() == traits_type::eof() );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2466de5299fb111fc0d13430830187bf37a63a46", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sgetn/char/1.cc", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetn%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetn%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetn%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,126 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::streambuf\n+{\n+public:\n+\n+  // Typedefs:\n+  typedef std::streambuf::traits_type traits_type;\n+  typedef std::streambuf::char_type char_type;\n+\n+  testbuf(): std::streambuf() \n+  { _M_mode = (std::ios_base::in | std::ios_base::out); }\n+\n+  bool\n+  check_pointers()\n+  { \n+    bool test = true;\n+    VERIFY( this->eback() == NULL );\n+    VERIFY( this->gptr() == NULL );\n+    VERIFY( this->egptr() == NULL );\n+    VERIFY( this->pbase() == NULL );\n+    VERIFY( this->pptr() == NULL );\n+    VERIFY( this->epptr() == NULL );\n+    return test;\n+  }\n+\n+  int_type \n+  pub_uflow() \n+  { return (this->uflow()); }\n+\n+  int_type \n+  pub_overflow(int_type __c = traits_type::eof()) \n+  { return (this->overflow(__c)); }\n+\n+  int_type \n+  pub_pbackfail(int_type __c) \n+  { return (this->pbackfail(__c)); }\n+\n+  void \n+  pub_setg(char* beg, char* cur, char *end) \n+  { this->setg(beg, cur, end); }\n+\n+  void \n+  pub_setp(char* beg, char* end) \n+  { this->setp(beg, end); }\n+\n+protected:\n+  int_type \n+  underflow() \n+  { \n+    int_type __retval = traits_type::eof();\n+    if (this->gptr() < this->egptr())\n+      __retval = traits_type::not_eof(0); \n+    return __retval;\n+  }\n+};\n+\n+void test02()\n+{\n+  typedef testbuf::traits_type traits_type;\n+  typedef testbuf::int_type int_type;\n+\n+  bool test = true;\n+  char* lit01 = \"chicago underground trio/possible cube on delmark\";\n+  testbuf buf01;\n+\n+  // 27.5.2.1 basic_streambuf ctors\n+  // default ctor initializes \n+  // - all pointer members to null pointers\n+  // - locale to current global locale\n+  VERIFY( buf01.check_pointers() );\n+  VERIFY( buf01.getloc() == std::locale() );\n+\n+  // 27.5.2.2.5 Put area\n+  size_t i01 = traits_type::length(lit01);\n+  char carray01[i01];\n+  std::memset(carray01, 0, i01);\n+  \n+  buf01.pub_setg(lit01, lit01, lit01 + i01);\n+  buf01.sgetn(carray01, 0);\n+  VERIFY( carray01[0] == 0 );\n+  buf01.sgetn(carray01, 1);\n+  VERIFY( carray01[0] == 'c' );\n+  buf01.sgetn(carray01 + 1, i01 - 1);\n+  VERIFY( carray01[0] == 'c' );\n+  VERIFY( carray01[1] == 'h' );\n+  VERIFY( carray01[i01 - 1] == 'k' );\n+}\n+\n+int main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "b90e3d508588da5b2a98ba1215449a7b92aa08ef", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputbackc/char/9538.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputbackc%2Fchar%2F9538.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputbackc%2Fchar%2F9538.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputbackc%2Fchar%2F9538.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,65 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <streambuf>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+class MyTraits : public std::char_traits<char>\n+{\n+public:\n+  static bool eq(char c1, char c2)\n+  {\n+    bool test = true;\n+    VERIFY( c1 != 'X' );\n+    VERIFY( c2 != 'X' );\n+    return std::char_traits<char>::eq(c1, c2);\n+  }\n+};\n+\n+class MyBuf : public std::basic_streambuf<char, MyTraits>\n+{\n+  char buffer[8];\n+\n+public:\n+  MyBuf()\n+  {\n+    std::memset(buffer, 'X', sizeof(buffer));\n+    std::memset(buffer + 2, 'f', 4);\n+    setg(buffer + 2, buffer + 2, buffer + 6);\n+  }\n+};\n+\n+// libstdc++/9538\n+void test08()\n+{\n+  bool test = true;\n+\n+  MyBuf mb;\n+  mb.sputbackc('a');  \n+}\n+\n+main() \n+{\n+  test08();\n+  return 0;\n+}"}, {"sha": "de849513c010f3dfd9bf5ab64856ea468d385572", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputc/char/1057.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fchar%2F1057.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,61 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <string>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class nullsetpbuf : public std::streambuf\n+{\n+  char foo[64];\n+public:\n+  nullsetpbuf()\n+  {\n+    setp(foo, foo + 64);\n+    setp(NULL, NULL);\n+  }\n+};\n+\n+// libstdc++/1057\n+void test05()\n+{\n+  std::string text1 = \"abcdefghijklmn\";\n+  \n+  nullsetpbuf nsp;\n+  // Immediate crash as sputc writes to null pointer\n+  nsp.sputc('a');\n+}\n+\n+int main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "f48f788f4f271fdfb7bd8b800fb9b8b692e6dc1d", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputn/char/1.cc", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,124 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::streambuf\n+{\n+public:\n+\n+  // Typedefs:\n+  typedef std::streambuf::traits_type traits_type;\n+  typedef std::streambuf::char_type char_type;\n+\n+  testbuf(): std::streambuf() \n+  { _M_mode = (std::ios_base::in | std::ios_base::out); }\n+\n+  bool\n+  check_pointers()\n+  { \n+    bool test = true;\n+    VERIFY( this->eback() == NULL );\n+    VERIFY( this->gptr() == NULL );\n+    VERIFY( this->egptr() == NULL );\n+    VERIFY( this->pbase() == NULL );\n+    VERIFY( this->pptr() == NULL );\n+    VERIFY( this->epptr() == NULL );\n+    return test;\n+  }\n+\n+  int_type \n+  pub_uflow() \n+  { return (this->uflow()); }\n+\n+  int_type \n+  pub_overflow(int_type __c = traits_type::eof()) \n+  { return (this->overflow(__c)); }\n+\n+  int_type \n+  pub_pbackfail(int_type __c) \n+  { return (this->pbackfail(__c)); }\n+\n+  void \n+  pub_setg(char* beg, char* cur, char *end) \n+  { this->setg(beg, cur, end); }\n+\n+  void \n+  pub_setp(char* beg, char* end) \n+  { this->setp(beg, end); }\n+\n+protected:\n+  int_type \n+  underflow() \n+  { \n+    int_type __retval = traits_type::eof();\n+    if (this->gptr() < this->egptr())\n+      __retval = traits_type::not_eof(0); \n+    return __retval;\n+  }\n+};\n+\n+void test01()\n+{\n+  typedef testbuf::traits_type traits_type;\n+  typedef testbuf::int_type int_type;\n+\n+  bool test = true;\n+  char* lit01 = \"chicago underground trio/possible cube on delmark\";\n+  testbuf buf01;\n+  int i01 = 3;\n+\n+  // sputn/xsputn\n+  char* lit02 = \"isotope 217: the unstable molecule on thrill jockey\";\n+  int i02 = std::strlen(lit02);\n+  char carray[i02 + 1];\n+  std::memset(carray, 0, i02 + 1);\n+\n+  buf01.pub_setp(carray, (carray + i02));\n+  buf01.sputn(lit02, 0);\n+  VERIFY( carray[0] == 0 );\n+  VERIFY( lit02[0] == 'i' );\n+  buf01.sputn(lit02, 1);\n+  VERIFY( lit02[0] == carray[0] );\n+  VERIFY( lit02[1] == 's' );\n+  VERIFY( carray[1] == 0 );\n+  buf01.sputn(lit02 + 1, 10);\n+  VERIFY( std::memcmp(lit02, carray, 10) == 0 );\n+  buf01.sputn(lit02 + 11, 20);\n+  VERIFY( std::memcmp(lit02, carray, 30) == 0 );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "628e2e77d73b74ff817f7aab6c29585e93693561", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputn/char/1057.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1057.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,61 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class nullsetpbuf : public std::streambuf\n+{\n+  char foo[64];\n+public:\n+  nullsetpbuf()\n+  {\n+    setp(foo, foo + 64);\n+    setp(NULL, NULL);\n+  }\n+};\n+\n+// libstdc++/1057\n+void test05()\n+{\n+  std::string text1 = \"abcdefghijklmn\";\n+  \n+  nullsetpbuf nsp;\n+  // Immediate crash as xsputn writes to null pointer\n+  nsp.sputn(text1.c_str(), text1.length());\n+}\n+\n+int main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "8e2d3c0aef7e63a382716392dd379144680742ad", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sync/char/1057.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsync%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsync%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsync%2Fchar%2F1057.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,108 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class setpbuf : public std::streambuf\n+{\n+  char \t\tbuffer[4];\n+  std::string \tresult;\n+\n+public:\n+\n+  std::string&\n+  get_result()\n+  { return result; }\n+\n+  setpbuf()\n+  {\n+    char foo [32];\n+    setp(foo, foo + 32);\n+    setp(buffer, buffer + 4);\n+  }\n+\n+  ~setpbuf()\n+  { sync(); }\n+\n+  virtual int_type \n+  overflow(int_type n)\n+  {\n+    if (sync() != 0)\n+      return traits_type::eof();\n+    \n+    result += traits_type::to_char_type(n);\n+    \n+    return n;\n+  }\n+  \n+  virtual int \n+  sync()\n+  {\n+    result.append(pbase(), pptr());\n+    setp(buffer, buffer + 4);\n+    return 0;\n+  }\n+};\n+\n+// libstdc++/1057\n+void test04()\n+{\n+  bool test = true;\n+  std::string text = \"abcdefghijklmn\";\n+  \n+  // 01\n+  setpbuf sp1;\n+  // Here xsputn writes over sp1.result\n+  sp1.sputn(text.c_str(), text.length());\n+\n+  // This crashes when result is accessed\n+  sp1.pubsync();\n+  VERIFY( sp1.get_result() == text );\n+  \n+  // 02\n+  setpbuf sp2;\n+  for (std::string::size_type i = 0; i < text.length(); ++i)\n+    {\n+      // sputc also writes over result\n+      sp2.sputc(text[i]);\n+    }\n+  \n+  // Crash here\n+  sp2.pubsync();\n+  VERIFY( sp2.get_result() == text );\n+}\n+\n+int main() \n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "a91deab2f1d8f6768c1e41253c44198a0fece7b7", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/stringbuf.cc"}, {"sha": "f40868a179f57c6baa25e16326ad17c721773a75", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/2.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,51 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1 - Template class basic_stringbuf\n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// test05\n+// libstdc++/1886\n+// should be able to instantiate basic_stringbuf for non-standard types.\n+namespace test \n+{\n+  using namespace std;\n+  using __gnu_cxx_test::pod_char;\n+  typedef short type_t;\n+  template class basic_stringbuf<type_t, char_traits<type_t> >;\n+  template class basic_stringbuf<pod_char, char_traits<pod_char> >;\n+} // test\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "93358ccfe58347cb292f0e4a3ba02b27d313e367", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/3.cc", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,145 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1 - Template class basic_stringbuf\n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/2020\n+// should be able to use custom char_type, custom traits type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // default ctor\n+  gnu_char_type() { }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n+void test07()\n+{\n+  bool test = true;\n+  typedef std::basic_stringbuf<gnu_char_type, gnu_char_traits> gnu_ssbuf;\n+  \n+  try\n+    { gnu_ssbuf obj; }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_streambuf<gnu_char_type>::int_type\n+  std::basic_streambuf<gnu_char_type>::_S_pback_size;\n+#endif\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more surf!!!"}, {"sha": "cd4c4311c6ae4e546dd45f56aa8b123352ea4494", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/4.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,47 @@\n+// 2003-04-07 bkoz\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1 - Template class basic_stringbuf\n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+namespace test \n+{\n+  using namespace std;\n+  using __gnu_cxx_test::pod_char;\n+  typedef __gnu_cxx_test::tracker_alloc<char> alloc_type;\n+  template class basic_stringbuf<char, char_traits<char>, alloc_type>;\n+} // test\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "4f308b98cb7832a8461732bf4adf7e0a8a3e54bd", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/5.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F5.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,49 @@\n+// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1 - Template class basic_stringbuf\n+\n+#include <sstream>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::stringbuf test_type;\n+  typedef std::streambuf base_type;\n+  const test_type& obj = test_type();\n+  const base_type* base = &obj;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "153d7df6a8a62b57033e6917c64e45f7abd832a3", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/imbue/char/1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fimbue%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fimbue%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fimbue%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,46 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::stringbuf strb_01(str_01);\n+\n+// test the streambuf/stringbuf locale settings\n+void test02() \n+{\n+  std::locale loc_c = std::locale::classic();\n+  loc_c = strb_01.getloc();\n+  strb_01.pubimbue(loc_c); //This should initialize _M_init to true\n+  std::locale loc_tmp = strb_01.getloc(); \n+  VERIFY( loc_tmp == loc_c );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "3da38fb8ff4391d9b98d4c1c869469654e320b7f", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/imbue/char/9322.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fimbue%2Fchar%2F9322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fimbue%2Fchar%2F9322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fimbue%2Fchar%2F9322.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,53 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9322\n+void test03()\n+{\n+  using std::locale;\n+  bool test = true;\n+\n+  locale loc =  std::locale::classic();\n+  std::stringbuf ob;\n+  VERIFY( ob.getloc() == loc );\n+\n+  locale::global(locale(\"en_US\"));\n+  VERIFY( ob.getloc() == loc );\n+\n+  locale loc_de (\"de_DE\");\n+  locale ret = ob.pubimbue(loc_de);\n+  VERIFY( ob.getloc() == loc_de );\n+  VERIFY( ret == loc );\n+\n+  locale::global(loc);\n+  VERIFY( ob.getloc() == loc_de );\n+}\n+\n+int main() \n+{\n+  using namespace std;\n+  __gnu_cxx_test::run_test_wrapped_generic_locale_exception_catcher(test03);\n+  return 0;\n+}"}, {"sha": "928f9457cb4801e694c957d7ea96a400618af5d2", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/in_avail/char/1.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,65 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool \t\t\ttest = true;\n+  std::string \t\tstr_tmp;\n+  std::stringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::stringbuf::int_type int_type;\n+  typedef std::stringbuf::traits_type traits_type;\n+  typedef std::stringbuf::pos_type pos_type;\n+  typedef std::stringbuf::off_type off_type;\n+\n+  // GET\n+  // int in_avail()\n+  strmof_1 = strb_01.in_avail();\n+  strmof_2 = strb_02.in_avail();\n+  VERIFY( strmof_1 != strmof_2 );\n+  VERIFY( strmof_1 == str_01.length() );\n+  VERIFY( strmof_2 == str_02.length() );\n+  strmof_1 = strb_03.in_avail(); \n+  // zero cuz write-only, or eof()? zero, from showmany\n+  VERIFY( strmof_1 == 0 ); \n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "90845d0ad47bdcb7a41c53500b3ee58c2d568761", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/overflow/char/2.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,80 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// test03\n+// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00151.html\n+template<typename charT, typename traits = std::char_traits<charT> >\n+  class basic_nullbuf : public std::basic_stringbuf<charT, traits>\n+  {\n+  protected:\n+    typedef typename\n+      std::basic_stringbuf<charT, traits>::int_type int_type;\n+    virtual int_type \n+    overflow(int_type c) \n+    {  return traits::not_eof(c); }\n+  };\n+\n+typedef basic_nullbuf<char> nullbuf;\n+\n+template<typename T>\n+  char\n+  print(const T& x) \n+  {\n+   nullbuf ob;\n+   std::ostream out(&ob); \n+   out << x << std::endl;\n+   return (!out ? '0' : '1');\n+ }\n+\n+void test03() \n+{\n+  bool test = true;\n+  const std::string control01(\"11111\");\n+  std::string test01;\n+\n+  test01 += print(true);\n+  test01 += print(3.14159);\n+  test01 += print(10);\n+  test01 += print('x');\n+  test01 += print(\"pipo\");\n+\n+  VERIFY( test01 == control01 );\n+}\n+\n+int main() \n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "a8e3a287464aad0b580b7039657adba72eb36ee6", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/overflow/char/3599.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F3599.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F3599.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F3599.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,66 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3599\n+class testbuf : public std::stringbuf\n+{\n+public:\n+  typedef std::stringbuf::traits_type traits_type;\n+\n+  testbuf() : std::stringbuf() { }\n+ \n+protected:\n+  int_type \n+  overflow(int_type c = traits_type::eof()) \n+  { return traits_type::not_eof(0); }\n+};\n+\n+void\n+test07()\n+{\n+  bool test = true;\n+  testbuf ob;\n+  std::ostream out(&ob); \n+\n+  out << \"gasp\";\n+  VERIFY(out.good());\n+\n+  out << std::endl;\n+  VERIFY(out.good());\n+}\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "abdd4def261f74d56f01ec63a634e200b27ea2a8", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/overflow/char/9988.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F9988.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F9988.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F9988.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,63 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class OverBuf : public std::stringbuf\n+{\n+public:\n+  int_type pub_overflow(int_type c = traits_type::eof())\n+  { return std::stringbuf::overflow(c); }\n+};\n+\n+// libstdc++/9988\n+// filebuf::overflow writes EOF to file\n+void test15()\n+{\n+  using namespace std;\n+  bool test = true;\n+  \n+  OverBuf sb;\n+\n+  sb.sputc('a');\n+  sb.pub_overflow('b');\n+  sb.pub_overflow();\n+  sb.sputc('c');\n+\n+  stringbuf sbin(sb.str(), ios_base::in);\n+  stringbuf::int_type c;\n+  c = sbin.sbumpc();\n+  VERIFY( c == 'a' );\n+  c = sbin.sbumpc();\n+  VERIFY( c == 'b' );\n+  c = sbin.sbumpc();\n+  VERIFY( c == 'c' );\n+  c = sbin.sbumpc();\n+  VERIFY( c == stringbuf::traits_type::eof() );\n+}\n+\n+main() \n+{\n+  test15();\n+  return 0;\n+}"}, {"sha": "f075f9db759fe03eaf0f2778eaa8b703e8a63bf4", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sbumpc/char/1.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsbumpc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsbumpc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsbumpc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,74 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool \t\t\ttest = true;\n+  std::string \t\tstr_tmp;\n+  std::stringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::stringbuf::int_type int_type;\n+  typedef std::stringbuf::traits_type traits_type;\n+  typedef std::stringbuf::pos_type pos_type;\n+  typedef std::stringbuf::off_type off_type;\n+\n+  // GET\n+  strmof_1 = strb_01.in_avail();\n+  strmof_2 = strb_02.in_avail();\n+  strmof_1 = strb_03.in_avail(); \n+\n+  // int_type sbumpc()\n+  // if read_cur not avail, return uflow(), else return *read_cur & increment\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c1 == str_01[0] );\n+  VERIFY( c2 == str_02[0] ); //should equal first letter at this point\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( c2 != c4 );\n+  int_type c5 = strb_03.sbumpc();\n+  VERIFY( c5 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "df6fa264d0e486f33ba2a6ff71c3b31a90e432e0", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sbumpc/char/9825.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsbumpc%2Fchar%2F9825.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsbumpc%2Fchar%2F9825.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsbumpc%2Fchar%2F9825.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,50 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9825\n+// filebuf::sputbackc breaks sbumpc\n+void test12()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  stringbuf sbuf;\n+  sbuf.sputn(\"crazy bees!\", 11);\n+  sbuf.pubseekoff(0, ios_base::beg);\n+  sbuf.sbumpc();\n+  sbuf.sputbackc('x');\n+  stringbuf::int_type c = sbuf.sbumpc();\n+  VERIFY( c == 'x' );\n+  c = sbuf.sbumpc();\n+  VERIFY( c == 'r' );\n+  c = sbuf.sbumpc();\n+  VERIFY( c == 'a' );\n+}\n+\n+main() \n+{\n+  test12();\n+  return 0;\n+}"}, {"sha": "579206ff160d0c034f4834960f08deda35a04222", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekoff/char/1.cc", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,124 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool \t\t\ttest = true;\n+  std::string \t\tstr_tmp;\n+  std::stringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::stringbuf::int_type int_type;\n+  typedef std::stringbuf::traits_type traits_type;\n+  typedef std::stringbuf::pos_type pos_type;\n+  typedef std::stringbuf::off_type off_type;\n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  // PUT\n+  strb_03.str(str_01); //reset\n+  \n+  // BUFFER MANAGEMENT & POSITIONING\n+\n+  // seekoff\n+  // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n+  // alters the stream position to off\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+  strb_01.str(str_01); //in|out (\"mykonos. . . or what?\");\n+  strb_02.str(str_02); //in (\"paris, or sainte-maxime?\");\n+  strb_03.str(str_03); //out (\"\")\n+  //IN|OUT\n+  //beg\n+  pt_1 = strb_01.pubseekoff(2, std::ios_base::beg);\n+  off_1 = pt_1;\n+  VERIFY( off_1 >= 0 );\n+  c1 = strb_01.snextc(); //current in pointer +1\n+  VERIFY( c1 == 'o' );\n+  c2 = strb_01.sputc('x');  //test current out pointer\n+  str_tmp = std::string(\"myxonos. . . or what?\");\n+  VERIFY( strb_01.str() == str_tmp );\n+  //cur\n+  pt_1 = strb_01.pubseekoff(2, std::ios_base::cur);\n+  off_1 = pt_1;\n+  VERIFY( off_1 == -1 ); // can't seekoff for in and out + cur in sstreams\n+  pt_1 = strb_01.pubseekoff(2, std::ios_base::cur, std::ios_base::in);\n+  off_1 = pt_1;\n+  pt_2 = strb_01.pubseekoff(2, std::ios_base::cur, std::ios_base::in);\n+  off_2 = pt_2;\n+  VERIFY( off_2 == off_1 + 2 );\n+  c1 = strb_01.snextc(); //current in pointer + 1\n+  VERIFY( c1 == ' ' );\n+  c2 = strb_01.sputc('x');  //test current out pointer\n+  str_tmp = std::string(\"myxxnos. . . or what?\");\n+  VERIFY( strb_01.str() == str_tmp );\n+  //end\n+  pt_2 = strb_01.pubseekoff(2, std::ios_base::end);\n+  off_1 = pt_2;\n+  VERIFY( off_1 == -1 ); // not a valid position\n+  VERIFY( strb_01.str() == str_tmp );\n+  // end part two (from the filebuf tests)\n+  strb_01.pubseekoff(0, std::ios_base::end);\n+  strmsz_1 = strb_01.in_avail(); // 0 cuz at the end\n+  c1 = strb_01.sgetc(); \n+  c2 = strb_01.sungetc();\n+  strmsz_2 = strb_01.in_avail(); // 1\n+  c3 = strb_01.sgetc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( strmsz_2 != strmsz_1 );\n+  VERIFY( strmsz_2 == 1 );\n+  // end part three\n+  strmsz_1 = strb_01.str().size();\n+  strmsz_2 = strb_01.sputn(\" ravi shankar meets carlos santana in LoHa\", 90);\n+  strb_01.pubseekoff(0, std::ios_base::end);\n+  strb_01.sputc('<');\n+  str_tmp = strb_01.str();\n+  VERIFY( str_tmp.size() == strmsz_1 + strmsz_2 + 1 );\n+  // IN\n+  // OUT\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "869cd46f56a1af2cf02436145ae3782328582e61", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekoff/char/2.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,59 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02(std::stringbuf& in, bool pass)\n+{\n+  bool test = true;\n+  using namespace std;\n+  typedef streambuf::pos_type pos_type;\n+  typedef streambuf::off_type off_type;\n+  pos_type bad = pos_type(off_type(-1));\n+  pos_type p = 0;\n+\n+  // seekoff\n+  p = in.pubseekoff(0, ios_base::beg, ios_base::in);\n+  if (pass)\n+    VERIFY( p != bad );\n+\n+  p = in.pubseekoff(0, ios_base::beg, ios_base::out); \n+  VERIFY( p == bad );\n+\n+  p = in.pubseekoff(0, ios_base::beg); \n+  VERIFY( p == bad );\n+}\n+\n+int main() \n+{\n+  using namespace std;\n+\n+  // movie star, submarine scientist!\n+  stringbuf in1(\"Hedy Lamarr\", ios_base::in);\n+  stringbuf in2(ios_base::in);\n+  stringbuf in3(\"\", ios_base::in);\n+  test02(in1, true);\n+  test02(in2, false);\n+  test02(in3, false);\n+  return 0;\n+}"}, {"sha": "12143c5add725c13fd01f2f9767e4a3cb8546769", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekpos/char/1.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,98 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool \t\t\ttest = true;\n+  std::string \t\tstr_tmp;\n+  std::stringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::stringbuf::int_type int_type;\n+  typedef std::stringbuf::traits_type traits_type;\n+  typedef std::stringbuf::pos_type pos_type;\n+  typedef std::stringbuf::off_type off_type;\n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // PUT\n+  strb_03.str(str_01); //reset\n+  \n+  // BUFFER MANAGEMENT & POSITIONING\n+\n+  // seekpos\n+  // pubseekpos(pos_type sp, ios_base::openmode)\n+  // alters the stream position to sp\n+  strb_01.str(str_01); //in|out (\"mykonos. . . or what?\");\n+  strb_02.str(str_02); //in (\"paris, or sainte-maxime?\");\n+  strb_03.str(str_03); //out (\"\")\n+  //IN|OUT\n+  //beg\n+  pt_1 = strb_01.pubseekoff(2, std::ios_base::beg);\n+  off_1 = pt_1;\n+  VERIFY( off_1 >= 0 );\n+  pt_1 = strb_01.pubseekoff(0, std::ios_base::cur, std::ios_base::out);\n+  off_1 = pt_1;\n+  c1 = strb_01.snextc(); //current in pointer +1\n+  VERIFY( c1 == 'o' );\n+  c2 = strb_01.sputc('x');  //test current out pointer\n+  str_tmp = std::string(\"myxonos. . . or what?\");\n+  VERIFY( strb_01.str() == str_tmp );\n+  strb_01.pubsync(); //resets pointers\n+  pt_2 = strb_01.pubseekpos(pt_1, std::ios_base::in|std::ios_base::out);\n+  off_2 = pt_2;\n+  VERIFY( off_1 == off_2 );\n+  c3 = strb_01.snextc(); //current in pointer +1\n+  VERIFY( c1 == c3 );\n+  c2 = strb_01.sputc('x');  //test current out pointer\n+  str_tmp = std::string(\"myxonos. . . or what?\");\n+  VERIFY( strb_01.str() == str_tmp );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "c3c6a8ad6839df5e9a38147d795187a5c57a2597", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekpos/char/2.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,60 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02(std::stringbuf& in, bool pass)\n+{\n+  bool test = true;\n+  using namespace std;\n+  typedef streambuf::pos_type pos_type;\n+  typedef streambuf::off_type off_type;\n+  pos_type bad = pos_type(off_type(-1));\n+  pos_type p = 0;\n+\n+  // seekpos\n+  p = in.pubseekpos(0, ios_base::in);\n+  if (pass)\n+    VERIFY( p != bad );\n+\n+  p = in.pubseekpos(0, ios_base::out); \n+  VERIFY( p == bad );\n+\n+  p = in.pubseekpos(0); \n+  if (pass)\n+    VERIFY( p != bad );\n+}\n+\n+int main() \n+{\n+  using namespace std;\n+\n+  // movie star, submarine scientist!\n+  stringbuf in1(\"Hedy Lamarr\", ios_base::in);\n+  stringbuf in2(ios_base::in);\n+  stringbuf in3(\"\", ios_base::in);\n+  test02(in1, true);\n+  test02(in2, false);\n+  test02(in3, false);\n+  return 0;\n+}"}, {"sha": "e79da0eda3aed0e01af49a45e4c773734619dc56", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/setbuf/char/1.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,72 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool \t\t\ttest = true;\n+  std::string \t\tstr_tmp;\n+  std::stringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::stringbuf::int_type int_type;\n+  typedef std::stringbuf::traits_type traits_type;\n+  typedef std::stringbuf::pos_type pos_type;\n+  typedef std::stringbuf::off_type off_type;\n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  // PUT\n+  strb_03.str(str_01); //reset\n+  \n+  // BUFFER MANAGEMENT & POSITIONING\n+  // setbuf\n+  // pubsetbuf(char_type* s, streamsize n)\n+  str_tmp = std::string(\"naaaah, go to cebu\");\n+  strb_01.pubsetbuf(const_cast<char*> (str_tmp.c_str()), str_tmp.size());\n+  VERIFY( strb_01.str() == str_tmp );\n+  strb_01.pubsetbuf(0,0);\n+  VERIFY( strb_01.str() == str_tmp );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "0eade15314a0c898d6ad567474873ff5a53b03d1", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/setbuf/char/2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,45 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  char buf[512];\n+  const char* strlit = \"how to tell a story and other essays: mark twain\";\n+  const size_t strlitsize = std::strlen(strlit);\n+  stringbuf sbuf;\n+\n+  sbuf.pubsetbuf(buf, 512);\n+  sbuf.sputn(strlit, strlitsize);\n+  VERIFY( std::strncmp(strlit, buf, strlitsize) == 0 );\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6a8d0b462e454650588696f479eb301f26392467", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/setbuf/char/3.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,45 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  char buf[512];\n+  const char* strlit = \"how to tell a story and other essays: mark twain\";\n+  const size_t strlitsize = std::strlen(strlit);\n+  string s(\"tmp\");\n+  stringbuf sbuf(s, ios_base::out);\n+  sbuf.pubsetbuf(buf, strlitsize);\n+  sbuf.sputn(strlit, strlitsize);\n+  VERIFY( std::strncmp(strlit, buf, strlitsize) == 0 );\n+}\n+\n+main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "c34109df6b1ae3047bc0b581f37747145804a3c7", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sgetc/char/1.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsgetc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsgetc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsgetc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,78 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool \t\t\ttest = true;\n+  std::string \t\tstr_tmp;\n+  std::stringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::stringbuf::int_type int_type;\n+  typedef std::stringbuf::traits_type traits_type;\n+  typedef std::stringbuf::pos_type pos_type;\n+  typedef std::stringbuf::off_type off_type;\n+\n+  // GET\n+  strmof_1 = strb_01.in_avail();\n+  strmof_2 = strb_02.in_avail();\n+  strmof_1 = strb_03.in_avail(); \n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+  int_type c6 = strb_01.sgetc();\n+  int_type c7 = strb_02.sgetc();\n+  VERIFY( c6 != c3 );\n+  VERIFY( c7 != c4 );\n+  int_type c8 = strb_01.sgetc();\n+  int_type c9 = strb_02.sgetc();\n+  VERIFY( c6 == c8 );\n+  VERIFY( c7 == c9 );\n+  c5 = strb_03.sgetc();\n+  VERIFY( c5 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "420a318c86b5ab1339e6116de6407758df7e5d20", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sgetn/char/1.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsgetn%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsgetn%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsgetn%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,108 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool \t\t\ttest = true;\n+  std::string \t\tstr_tmp;\n+  std::stringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::stringbuf::int_type int_type;\n+  typedef std::stringbuf::traits_type traits_type;\n+  typedef std::stringbuf::pos_type pos_type;\n+  typedef std::stringbuf::off_type off_type;\n+\n+  // GET\n+  strmof_1 = strb_01.in_avail();\n+  strmof_2 = strb_02.in_avail();\n+  strmof_1 = strb_03.in_avail(); \n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+  int_type c6 = strb_01.sgetc();\n+  int_type c7 = strb_02.sgetc();\n+  int_type c8 = strb_01.sgetc();\n+  int_type c9 = strb_02.sgetc();\n+  c5 = strb_03.sgetc();\n+\n+  // int_type snextc()\n+  // calls sbumpc and if sbumpc != eof, return sgetc\n+  c6 = strb_01.snextc();\n+  c7 = strb_02.snextc();\n+  c5 = strb_03.snextc();\n+\n+  // streamsize sgetn(char_type *s, streamsize n)\n+  // streamsize xsgetn(char_type *s, streamsize n)\n+  // assign up to n chars to s from input sequence, indexing in_cur as\n+  // approp and returning the number of chars assigned\n+  strmsz_1 = strb_01.in_avail();\n+  strmsz_2 = strb_02.in_avail();\n+  test = strmsz_1 != strmsz_2;\n+  VERIFY( strmsz_1 != str_01.length() );\n+  VERIFY( strmsz_2 != str_02.length() ); //because now we've moved into string\n+  char carray1[11] = \"\";\n+  strmsz_1 = strb_01.sgetn(carray1, 10);\n+  char carray2[20] = \"\";\n+  strmsz_2 = strb_02.sgetn(carray2, 10);\n+  VERIFY( strmsz_1 == strmsz_2 );\n+  VERIFY( strmsz_1 == 10 );\n+  c1 = strb_01.sgetc();\n+  c2 = strb_02.sgetc();\n+  VERIFY( c6 == c1 ); //just by co-incidence both o's\n+  VERIFY( c7 != c2 ); // n != i\n+  VERIFY( c1 == str_01[13] );\n+  VERIFY( c2 == str_02[13] ); //should equal fourteenth letter at this point\n+  strmsz_1 = strb_03.sgetn(carray1, 10);\n+  VERIFY( !strmsz_1 ); //zero\n+  strmsz_1 = strb_02.in_avail();\n+  strmsz_2 = strb_02.sgetn(carray2, strmsz_1 + 5);\n+  VERIFY( strmsz_1 == strmsz_2 ); //write off the end\n+  c4 = strb_02.sgetc(); // should be EOF\n+  VERIFY( c4 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "63e3515c8026a31d1db8f838a566008b308a9a12", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/snextc/char/1.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsnextc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsnextc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsnextc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,84 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool \t\t\ttest = true;\n+  std::string \t\tstr_tmp;\n+  std::stringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::stringbuf::int_type int_type;\n+  typedef std::stringbuf::traits_type traits_type;\n+  typedef std::stringbuf::pos_type pos_type;\n+  typedef std::stringbuf::off_type off_type;\n+\n+  // GET\n+  strmof_1 = strb_01.in_avail();\n+  strmof_2 = strb_02.in_avail();\n+  strmof_1 = strb_03.in_avail(); \n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+  int_type c6 = strb_01.sgetc();\n+  int_type c7 = strb_02.sgetc();\n+  int_type c8 = strb_01.sgetc();\n+  int_type c9 = strb_02.sgetc();\n+  c5 = strb_03.sgetc();\n+\n+  // int_type snextc()\n+  // calls sbumpc and if sbumpc != eof, return sgetc\n+  c6 = strb_01.snextc();\n+  c7 = strb_02.snextc();\n+  VERIFY( c6 != c8 );\n+  VERIFY( c7 != c9 );\n+  VERIFY( c6 == str_01[3] );\n+  VERIFY( c7 == str_02[3] ); //should equal fourth letter at this point\n+  c5 = strb_03.snextc();\n+  VERIFY( c5 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "ef7c68f72c05fe3002bdf00712dab002d8aa6f54", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputbackc/char/1.cc", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,122 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool \t\t\ttest = true;\n+  std::string \t\tstr_tmp, str_tmp2;\n+  std::stringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::stringbuf::int_type int_type;\n+  typedef std::stringbuf::traits_type traits_type;\n+  typedef std::stringbuf::pos_type pos_type;\n+  typedef std::stringbuf::off_type off_type;\n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  // PUT\n+  strb_03.str(str_01); //reset\n+  std::string::size_type sz1 = strb_03.str().length();\n+  std::string::size_type sz2 = strb_03.str().length();\n+  \n+  // streamsize sputn(const char_typs* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+  str_tmp = strb_03.str();\n+  sz1 = str_tmp.length();\n+  strmsz_1 = strb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n+  sz2 = strb_03.str().length();\n+  strmsz_2 = strb_03.sputn(\", i wanna reach out and\", 10);\n+  sz2 = strb_03.str().length();\n+  str_tmp = strb_02.str();\n+  strmsz_1 = strb_02.sputn(\"racadabra\", 10);\n+\n+  // PUTBACK\n+\n+  // int_type sputbackc(char_type c)\n+  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n+  // otherwise decrements in_cur and returns *gptr()\n+  strmsz_1 = strb_01.in_avail();\n+  str_tmp = strb_01.str();\n+  c1 = strb_01.sgetc(); //\"mykonos. . . 'o'r what?\"\n+  c2 = strb_01.sputbackc('z');//\"mykonos. . .zor what?\"\n+  c3 = strb_01.sgetc();\n+  str_tmp2 = strb_01.str();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( str_tmp2 == std::string(\"mzkonos. . . or what?\") );\n+  VERIFY( str_tmp.size() == str_tmp2.size() );\n+  //test for _in_cur == _in_beg\n+  strb_01.str(str_tmp);\n+  strmsz_1 = strb_01.in_avail();\n+  c1 = strb_01.sgetc(); //\"'m'ykonos. . . or what?\"\n+  c2 = strb_01.sputbackc('z');//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 != c2 );\n+  VERIFY( c1 == c3 );\n+  VERIFY( c2 == traits_type::eof() );\n+  VERIFY( strb_01.str() == str_tmp );\n+  VERIFY( str_tmp.size() == strb_01.str().size() );\n+  // test for replacing char with identical one\n+  strb_01.str(str_01); //reset\n+  strmsz_1 = strb_01.in_avail();\n+  strb_01.sbumpc();\n+  strb_01.sbumpc();\n+  c1 = strb_01.sgetc(); //\"my'k'onos. . . or what?\"\n+  c2 = strb_01.sputbackc('y');//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( str_01.size() == strb_01.str().size() );\n+  //test for ios_base::out\n+  strmsz_2 = strb_03.in_avail();\n+  c4 = strb_03.sputbackc('x');\n+  VERIFY( c4 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "e7dcaa1dbb92423f750bf52e127c17a57bed123f", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputbackc/char/9425.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fchar%2F9425.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fchar%2F9425.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fchar%2F9425.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,43 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9439, libstdc++/9425\n+// basic_filebuf<>::pbackfail calls basic_filebuf<>::seekoff, but\n+// fails to check the return value\n+void test09()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  stringbuf sbuf;\n+  stringbuf::int_type r = sbuf.sputbackc('a');\n+  VERIFY( r == stringbuf::traits_type::eof() );\n+}\n+\n+main() \n+{\n+  test09();\n+  return 0;\n+}"}, {"sha": "8e4864248405c8f3c5012fb569f95089d358db0b", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputc/char/1.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,75 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool \t\t\ttest = true;\n+  std::string \t\tstr_tmp;\n+  std::stringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::stringbuf::int_type int_type;\n+  typedef std::stringbuf::traits_type traits_type;\n+  typedef std::stringbuf::pos_type pos_type;\n+  typedef std::stringbuf::off_type off_type;\n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  // PUT\n+  // int_type sputc(char_type c)\n+  // if out_cur not avail, return overflow. Else, stores c at out_cur,\n+  // increments out_cur, and returns c as int_type\n+  strb_03.str(str_01); //reset\n+  std::string::size_type sz1 = strb_03.str().length();\n+  c1 = strb_03.sputc('a'); \n+  std::string::size_type sz2 = strb_03.str().length();\n+  VERIFY( sz1 == sz2 ); //cuz inserting at out_cur, which is at beg to start\n+  c2 = strb_03.sputc('b'); \n+  VERIFY( c1 != c2 );\n+  VERIFY( strb_03.str() != str_01 );\n+  c3 = strb_02.sputc('a'); // should be EOF because this is read-only\n+  VERIFY( c3 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "d4f005e496c2e18290cf1ae6487ccf330cafda98", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputc/char/1057.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fchar%2F1057.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,61 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class nullsetpbuf : public std::stringbuf\n+{\n+  char foo[64];\n+public:\n+  nullsetpbuf()\n+  {\n+    setp(foo, foo + 64);\n+    setp(NULL, NULL);\n+  }\n+};\n+\n+// libstdc++/1057\n+void test05()\n+{\n+  std::string text1 = \"abcdefghijklmn\";\n+  \n+  nullsetpbuf nsp;\n+  // Immediate crash as sputc writes to null pointer\n+  nsp.sputc('a');\n+}\n+\n+int main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "6d4019295d2b1e35bc7a41b777509d3f37ca796e", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputc/char/9404-1.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fchar%2F9404-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fchar%2F9404-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fchar%2F9404-1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,73 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+bool over_called;\n+\n+class Derived_stringbuf : public std::stringbuf\n+{\n+public:\n+  int_type overflow(int_type c)\n+  {\n+    over_called = true;\n+    return std::stringbuf::overflow(c);\n+  }\n+  \n+  const char_type* pub_epptr() const\n+  {\n+    return epptr();\n+  }\n+  \n+  const char_type* pub_pptr() const\n+  {\n+    return pptr();\n+  }\n+};\n+\n+// libstdc++/9404\n+void test04()\n+{\n+  bool test = true;\n+\n+  bool over_expected;\n+\n+  // sputc\n+  Derived_stringbuf dsbuf_01;\n+  over_called = false;\n+  dsbuf_01.sputc('i');\n+  VERIFY( over_called );\n+  over_expected = dsbuf_01.pub_epptr() == dsbuf_01.pub_pptr();\n+  over_called = false;\n+  dsbuf_01.sputc('v');\n+  VERIFY( (!over_expected && !over_called)\n+\t  || (over_expected && over_called) );\n+  dsbuf_01.sputc('i');\n+  VERIFY( dsbuf_01.str() == \"ivi\" ); // Sanity check.\n+}\n+\n+int main() \n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "525014c2a02bdb2a5515c8496607003c0df15879", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputn/char/1.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,87 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool \t\t\ttest = true;\n+  std::string \t\tstr_tmp;\n+  std::stringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::stringbuf::int_type int_type;\n+  typedef std::stringbuf::traits_type traits_type;\n+  typedef std::stringbuf::pos_type pos_type;\n+  typedef std::stringbuf::off_type off_type;\n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  // PUT\n+  strb_03.str(str_01); //reset\n+  std::string::size_type sz1 = strb_03.str().length();\n+  std::string::size_type sz2 = strb_03.str().length();\n+  \n+  // streamsize sputn(const char_typs* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+  str_tmp = strb_03.str();\n+  sz1 = str_tmp.length();\n+  strmsz_1 = strb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n+  sz2 = strb_03.str().length();\n+  VERIFY( sz1 == sz2 ); //shouldn't have changed length\n+  VERIFY( strmsz_1 == 10 );\n+  VERIFY( str_tmp != strb_03.str() );\n+  strmsz_2 = strb_03.sputn(\", i wanna reach out and\", 23);\n+  VERIFY( strmsz_1 != strmsz_2 ); // should re-allocate, copy 10 chars.\n+  VERIFY( strmsz_1 == 10 );\n+  VERIFY( strmsz_2 == 23 );\n+  sz2 = strb_03.str().length();\n+  VERIFY( sz1 != sz2 ); // need to change length\n+  VERIFY( str_tmp != strb_03.str() );\n+  str_tmp = strb_02.str();\n+  strmsz_1 = strb_02.sputn(\"racadabra\", 10);\n+  VERIFY( strmsz_1 == 0 );  \n+  VERIFY( str_tmp == strb_02.str() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "2af2dff8c131432d196e73e00407cadb02a09259", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputn/char/1057.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fchar%2F1057.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,61 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class nullsetpbuf : public std::stringbuf\n+{\n+  char foo[64];\n+public:\n+  nullsetpbuf()\n+  {\n+    setp(foo, foo + 64);\n+    setp(NULL, NULL);\n+  }\n+};\n+\n+// libstdc++/1057\n+void test05()\n+{\n+  std::string text1 = \"abcdefghijklmn\";\n+  \n+  nullsetpbuf nsp;\n+  // Immediate crash as xsputn writes to null pointer\n+  nsp.sputn(text1.c_str(), text1.length());\n+}\n+\n+int main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "3cb743cc69994f953f7b2895fe4b411ee9bcab96", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputn/char/9404-2.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fchar%2F9404-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fchar%2F9404-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fchar%2F9404-2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,73 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+bool over_called;\n+\n+class Derived_stringbuf : public std::stringbuf\n+{\n+public:\n+  int_type overflow(int_type c)\n+  {\n+    over_called = true;\n+    return std::stringbuf::overflow(c);\n+  }\n+  \n+  const char_type* pub_epptr() const\n+  {\n+    return epptr();\n+  }\n+  \n+  const char_type* pub_pptr() const\n+  {\n+    return pptr();\n+  }\n+};\n+\n+// libstdc++/9404\n+void test04()\n+{\n+  bool test = true;\n+\n+  bool over_expected;\n+  Derived_stringbuf dsbuf_01;\n+\n+  // sputn\n+  Derived_stringbuf dsbuf_02;\n+  over_called = false;\n+  dsbuf_02.sputn(\"sonne's\", 7);\n+  VERIFY( over_called );\n+  over_expected = dsbuf_02.pub_epptr() == dsbuf_02.pub_pptr();\n+  over_called = false;\n+  dsbuf_02.sputn(\" peak\", 5);\n+  VERIFY( (!over_expected && !over_called)\n+\t  || (over_expected && over_called) );\n+  VERIFY( dsbuf_02.str() == \"sonne's peak\" ); // Sanity check.\n+}\n+\n+int main() \n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "8de264b08e8fc6638bcdb3a7cea8efcfc8a0eec5", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/str/char/1.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,74 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test member functions\n+void test03() \n+{\n+  bool test = true;\n+\n+  //stringbuf::str()\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( strb_02.str() == str_02 );\n+  VERIFY( strb_03.str() == str_03 );\n+ \n+  //stringbuf::str(string&)\n+  strb_03.str(\"none of the above, go to the oberoi in cairo, egypt.\");\n+  strb_03.str(str_01);\n+  std::streamsize d1 = strb_01.in_avail();\n+  std::streamsize d2 = strb_03.in_avail();\n+  VERIFY( d1 ); // non-zero\n+  VERIFY( !d2 ); // zero, cuz ios_base::out\n+  VERIFY( d1 != d2 ); //these should be the same\n+  VERIFY( str_01.length() == d1 );  \n+  VERIFY( strb_01.str() == strb_03.str() ); //ditto\n+\n+  // stringbuf::str(string&) and stringbuf::stringbuf(string&), where the\n+  // string in question contains embedded NUL characters.  Note that in this\n+  // embedded-NUL situation, the size must be passed to the string ctor.\n+  std::string str_nulls (\"eschew \\0 obfuscation\", 20);  // tested in 21_strings\n+  std::stringbuf strb_normal (str_01);\n+  std::stringbuf strb_nulls (str_nulls);\n+  strb_normal.str(str_nulls);  // tried using 'strb_01' rather than declaring\n+                               // another variable, but then test04 broke!\n+  VERIFY( strb_nulls.in_avail() == str_nulls.size()  );\n+  VERIFY( strb_nulls.str().size() == 20              );\n+  VERIFY( strb_normal.in_avail() == str_nulls.size() );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "feabe74e1aebda4e3294b8cd58f46bbf4ef315c3", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/str/char/2.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,55 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2003-02/msg00269.html\n+// Growing and then seeking to ios_base::beg triggered a bug in str(),\n+// which didn't notice the grow.\n+void test07()\n+{\n+  bool test = true;\n+\n+  std::stringbuf strb_01;\n+  strb_01.sputc('s');\n+  strb_01.pubseekoff(0, std::ios_base::beg);\n+  std::string tmp = strb_01.str();\n+  VERIFY( tmp == \"s\" );\n+\n+  std::string str(\"strivi,\");\n+  std::stringbuf strb_02(str);\n+  strb_02.pubseekoff(0, std::ios_base::end);\n+  strb_02.sputn(\" no better!\", 11);\n+  strb_02.pubseekoff(0, std::ios_base::beg);\n+  tmp = strb_02.str();\n+  VERIFY( tmp == \"strivi, no better!\" );\n+}\n+\n+int main()\n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "7fa42a6d1fd668bfcf96b076080275a4d6d8fbda", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/str/char/3.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,43 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test06()\n+{\n+  bool test = true;\n+\n+  std::ostringstream os (\"foo\", std::ios_base::app);\n+  os << \"bar\";\n+\n+  VERIFY( os.str() == \"foobar\" );\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "d43fd89345a72d9c56dc4a91de7a3d0b8b2c3dd4", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/str/char/3955.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F3955.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F3955.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F3955.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,44 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3955 -- ios_base::app overwrites from the beginning\n+void test05()\n+{\n+  bool test = true;\n+\n+  std::ostringstream os (\"foo\");\n+  os << \"bar\";\n+\n+  VERIFY( os.str() == \"bar\" );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "c7bb35240bd11558f3ab6858806c33eea5b64a3e", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sungetc/char/1.cc", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsungetc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsungetc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsungetc%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,151 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01(\"mykonos. . . or what?\");\n+std::string str_02(\"paris, or sainte-maxime?\");\n+std::string str_03;\n+std::stringbuf strb_01(str_01);\n+std::stringbuf strb_02(str_02, std::ios_base::in);\n+std::stringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool \t\t\ttest = true;\n+  std::string \t\tstr_tmp;\n+  std::stringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::stringbuf::int_type int_type;\n+  typedef std::stringbuf::traits_type traits_type;\n+  typedef std::stringbuf::pos_type pos_type;\n+  typedef std::stringbuf::off_type off_type;\n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  // PUT\n+  strb_03.str(str_01); //reset\n+  std::string::size_type sz1 = strb_03.str().length();\n+  std::string::size_type sz2 = strb_03.str().length();\n+  \n+  // streamsize sputn(const char_typs* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+  str_tmp = strb_03.str();\n+  sz1 = str_tmp.length();\n+  strmsz_1 = strb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n+  sz2 = strb_03.str().length();\n+  strmsz_2 = strb_03.sputn(\", i wanna reach out and\", 10);\n+  sz2 = strb_03.str().length();\n+  str_tmp = strb_02.str();\n+  strmsz_1 = strb_02.sputn(\"racadabra\", 10);\n+\n+  // PUTBACK\n+\n+  // int_type sputbackc(char_type c)\n+  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n+  // otherwise decrements in_cur and returns *gptr()\n+  strmsz_1 = strb_01.in_avail();\n+  str_tmp = strb_01.str();\n+  c1 = strb_01.sgetc(); //\"mykonos. . . 'o'r what?\"\n+  c2 = strb_01.sputbackc('z');//\"mykonos. . .zor what?\"\n+  c3 = strb_01.sgetc();\n+  //test for _in_cur == _in_beg\n+  strb_01.str(str_tmp);\n+  strmsz_1 = strb_01.in_avail();\n+  c1 = strb_01.sgetc(); //\"'m'ykonos. . . or what?\"\n+  c2 = strb_01.sputbackc('z');//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  // test for replacing char with identical one\n+  strb_01.str(str_01); //reset\n+  strmsz_1 = strb_01.in_avail();\n+  strb_01.sbumpc();\n+  strb_01.sbumpc();\n+  c1 = strb_01.sgetc(); //\"my'k'onos. . . or what?\"\n+  c2 = strb_01.sputbackc('y');//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  //test for ios_base::out\n+  strmsz_2 = strb_03.in_avail();\n+  c4 = strb_03.sputbackc('x');\n+\n+  // int_type sungetc()\n+  // if in_cur not avail, return pbackfail(), else decrement and\n+  // return to_int_type(*gptr())\n+  for (int i = 0; i<12; ++i)\n+    strb_01.sbumpc();\n+  strmsz_1 = strb_01.in_avail();\n+  str_tmp = strb_01.str();\n+  c1 = strb_01.sgetc(); //\"mykonos. . . 'o'r what?\"\n+  c2 = strb_01.sungetc();//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( c2 == ' ' );\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( str_01.size() == strb_01.str().size() );\n+  //test for _in_cur == _in_beg\n+  strb_01.str(str_tmp);\n+  strmsz_1 = strb_01.in_avail();\n+  c1 = strb_01.sgetc(); //\"'m'ykonos. . . or what?\"\n+  c2 = strb_01.sungetc();//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 != c2 );\n+  VERIFY( c1 == c3 );\n+  VERIFY( c2 == traits_type::eof() );\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( str_01.size() == strb_01.str().size() );\n+  // test for replacing char with identical one\n+  strb_01.str(str_01); //reset\n+  strmsz_1 = strb_01.in_avail();\n+  strb_01.sbumpc();\n+  strb_01.sbumpc();\n+  c1 = strb_01.sgetc(); //\"my'k'onos. . . or what?\"\n+  c2 = strb_01.sungetc();//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( str_01.size() == strb_01.str().size() );\n+  //test for ios_base::out\n+  strmsz_2 = strb_03.in_avail();\n+  c4 = strb_03.sungetc();\n+  VERIFY( c4 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "85717200d88aaaf098151620bbaf0a0876194d58", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sync/char/1057.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsync%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsync%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsync%2Fchar%2F1057.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,108 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class setpbuf : public std::stringbuf\n+{\n+  char \t\tbuffer[4];\n+  std::string \tresult;\n+\n+public:\n+\n+  std::string&\n+  get_result()\n+  { return result; }\n+\n+  setpbuf()\n+  {\n+    char foo [32];\n+    setp(foo, foo + 32);\n+    setp(buffer, buffer + 4);\n+  }\n+\n+  ~setpbuf()\n+  { sync(); }\n+\n+  virtual int_type \n+  overflow(int_type n)\n+  {\n+    if (sync() != 0)\n+      return traits_type::eof();\n+    \n+    result += traits_type::to_char_type(n);\n+    \n+    return n;\n+  }\n+  \n+  virtual int \n+  sync()\n+  {\n+    result.append(pbase(), pptr());\n+    setp(buffer, buffer + 4);\n+    return 0;\n+  }\n+};\n+\n+// libstdc++/1057\n+void test04()\n+{\n+  bool test = true;\n+  std::string text = \"abcdefghijklmn\";\n+  \n+  // 01\n+  setpbuf sp1;\n+  // Here xsputn writes over sp1.result\n+  sp1.sputn(text.c_str(), text.length());\n+\n+  // This crashes when result is accessed\n+  sp1.pubsync();\n+  VERIFY( sp1.get_result() == text );\n+  \n+  // 02\n+  setpbuf sp2;\n+  for (std::string::size_type i = 0; i < text.length(); ++i)\n+    {\n+      // sputc also writes over result\n+      sp2.sputc(text[i]);\n+    }\n+  \n+  // Crash here\n+  sp2.pubsync();\n+  VERIFY( sp2.get_result() == text );\n+}\n+\n+int main() \n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "e53b91da1481e00aa6757242b92769a4def1d9d5", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,48 @@\n+// 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.7.4 - Template class basic_stringstream\n+// NB: This file is for testing basic_stringstream with NO OTHER INCLUDES.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/7216\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::stringstream test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::traits_type traits_type;\n+  typedef test_type::int_type int_type;\n+  typedef test_type::pos_type pos_type;\n+  typedef test_type::off_type off_type;\n+}"}, {"sha": "abadf8271e654208c95224ff35b67f006d7c604a", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,45 @@\n+// 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.7.4 - Template class basic_stringstream\n+// NB: This file is for testing basic_stringstream with NO OTHER INCLUDES.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+namespace test \n+{\n+  using namespace std;\n+  using __gnu_cxx_test::pod_char;\n+  typedef short type_t;\n+  template class basic_stringstream<type_t, char_traits<type_t> >;\n+  template class basic_stringstream<pod_char, char_traits<pod_char> >;\n+} // test"}, {"sha": "d877dbb7bafcdf6b769097cafe856e5d80494b03", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/3.cc", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,149 @@\n+// 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+// NB: This file is for testing basic_filebuf with NO OTHER INCLUDES.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/2020\n+// should be able to use custom char_type, custom traits type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // default ctor\n+  gnu_char_type() { }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+// char_traits specialization\n+struct gnu_char_traits\n+{\n+  typedef gnu_char_type\tchar_type;\n+  typedef long  \t\tint_type;\n+  typedef long \t\tpos_type;\n+  typedef unsigned long \toff_type;\n+  typedef long   \t\tstate_type;\n+  \n+  static void \n+  assign(char_type& __c1, const char_type& __c2) { }\n+  \n+  static bool \n+  eq(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static bool \n+  lt(const char_type& __c1, const char_type& __c2) { return true; }\n+  \n+  static int \n+  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+  { return 0; }\n+  \n+  static size_t\n+  length(const char_type* __s) { return 0; }\n+  \n+  static const char_type* \n+  find(const char_type* __s, size_t __n, const char_type& __a)\n+  { return __s; }\n+  \n+  static char_type* \n+  move(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  copy(char_type* __s1, const char_type* __s2, size_t __n)\n+  { return __s1; }\n+  \n+  static char_type* \n+  assign(char_type* __s, size_t __n, char_type __a)\n+  { return __s; }\n+  \n+  static char_type \n+  to_char_type(const int_type& __c)\n+  { return char_type(); }\n+  \n+  static int_type \n+  to_int_type(const char_type& __c)\n+  { return int_type(); }\n+  \n+  static bool \n+  eq_int_type(const int_type& __c1, const int_type& __c2)\n+  { return true; }\n+  \n+  static int_type \n+  eof()\n+  { return int_type(); }\n+  \n+  static int_type \n+  not_eof(const int_type& __c)\n+  { return int_type(); }\n+};\n+\n+void test07()\n+{\n+  bool test = true;\n+  typedef std::basic_stringstream<gnu_char_type, gnu_char_traits> gnu_sstr;\n+\n+  try\n+    { \n+      gnu_sstr obj;\n+    }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  std::basic_streambuf<gnu_char_type>::int_type\n+  std::basic_streambuf<gnu_char_type>::_S_pback_size;\n+#endif\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more surf!!!"}, {"sha": "dcd5dc3dc64263543e8d53b2344145fe50402dc3", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/4.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,50 @@\n+// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.1 - Template class basic_filebuf \n+\n+#include <iostream>\n+#include <sstream>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::stringstream test_type;\n+  typedef std::iostream base_type;\n+  const test_type& obj = test_type();\n+  const base_type* base = &obj;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+// more surf!!!\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "5e4fe022e753545f0bcb6a704d09d2ec59f7f0cf", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/rdbuf/char/2832.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Frdbuf%2Fchar%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Frdbuf%2Fchar%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Frdbuf%2Fchar%2F2832.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,70 @@\n+// 2003-04-01 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.6 - Member functions [lib.stringstream.members]\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void \n+redirect_buffer(std::ios& stream, std::streambuf* new_buf) \n+{ stream.rdbuf(new_buf); }\n+\n+std::streambuf*\n+active_buffer(std::ios& stream)\n+{ return stream.rdbuf(); }\n+\n+// libstdc++/2832\n+void test02()\n+{\n+  bool test = true;\n+  const char* strlit01 = \"fuck war\";\n+  const char* strlit02 = \"two less cars abstract riot crew, critical mass/SF\";\n+  const std::string str00;\n+  const std::string str01(strlit01);\n+  std::string str02;\n+  std::stringbuf sbuf;\n+  std::streambuf* pbasebuf0 = &sbuf;\n+\n+  std::stringstream sstrm1;\n+  // derived rdbuf() always returns original streambuf, even though\n+  // it's no longer associated with the stream.\n+  std::stringbuf* const buf1 = sstrm1.rdbuf();\n+  // base rdbuf() returns the currently associated streambuf\n+  std::streambuf* pbasebuf1 = active_buffer(sstrm1);\n+  redirect_buffer(sstrm1, &sbuf);\n+  std::stringbuf* const buf2 = sstrm1.rdbuf();\n+  std::streambuf* pbasebuf2 = active_buffer(sstrm1);\n+  VERIFY( buf1 == buf2 ); \n+  VERIFY( pbasebuf1 != pbasebuf2 );\n+  VERIFY( pbasebuf2 == pbasebuf0 );\n+\n+  // How confusing and non-intuitive is this?\n+  // These semantics are a joke, a serious defect, and incredibly lame.\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+"}, {"sha": "79b1e9cb35ee7ab14827844b1652238b32861dce", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/char/1.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,77 @@\n+// 2001-05-24 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.6 member functions (stringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test = true;\n+  std::stringstream is01;\n+  const std::string str00; \n+  const std::string str01 = \"123\";\n+  std::string str02;\n+  const int i01 = 123;\n+  int a,b;\n+\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+\n+  // string str() const\n+  str02 = is01.str();\n+  VERIFY( str00 == str02 );\n+\n+  // void str(const basic_string&)\n+  is01.str(str01);\n+  str02 = is01.str();\n+  VERIFY( str01 == str02 );\n+  state1 = is01.rdstate();\n+  is01 >> a;\n+  state2 = is01.rdstate();\n+  VERIFY( a = i01 );\n+  // 22.2.2.1.2 num_get virtual functions\n+  // p 13\n+  // in any case, if stage 2 processing was terminated by the test for\n+  // in == end then err != ios_base::eofbit is performed.\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof ); \n+\n+  is01.str(str01);\n+  is01 >> b;\n+  VERIFY( b != a ); \n+  // as is01.good() is false, istream::sentry blocks extraction.\n+\n+  is01.clear();\n+  state1 = is01.rdstate();\n+  is01 >> b;\n+  state2 = is01.rdstate();\n+  VERIFY( b == a ); \n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "04f2746bcdee7f0735a5cf960c8efc69f5a15943", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/char/2.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,76 @@\n+// 2001-05-24 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.6 member functions (stringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void \n+redirect_buffer(std::ios& stream, std::streambuf* new_buf) \n+{ stream.rdbuf(new_buf); }\n+\n+std::streambuf*\n+active_buffer(std::ios& stream)\n+{ return stream.rdbuf(); }\n+\n+// libstdc++/2832\n+void test02()\n+{\n+  bool test = true;\n+  const char* strlit01 = \"fuck war\";\n+  const char* strlit02 = \"two less cars abstract riot crew, critical mass/SF\";\n+  const std::string str00;\n+  const std::string str01(strlit01);\n+  std::string str02;\n+  std::stringbuf sbuf(str01);\n+  std::streambuf* pbasebuf0 = &sbuf;\n+\n+  std::stringstream sstrm1;\n+  VERIFY( sstrm1.str() == str00 );\n+  // derived rdbuf() always returns original streambuf, even though\n+  // it's no longer associated with the stream.\n+  std::stringbuf* const buf1 = sstrm1.rdbuf();\n+  // base rdbuf() returns the currently associated streambuf\n+  std::streambuf* pbasebuf1 = active_buffer(sstrm1);\n+  redirect_buffer(sstrm1, &sbuf);\n+  std::stringbuf* const buf2 = sstrm1.rdbuf();\n+  std::streambuf* pbasebuf2 = active_buffer(sstrm1);\n+  VERIFY( buf1 == buf2 ); \n+  VERIFY( pbasebuf1 != pbasebuf2 );\n+  VERIFY( pbasebuf2 == pbasebuf0 );\n+\n+  // derived rdbuf() returns the original buf, so str() doesn't change.\n+  VERIFY( sstrm1.str() != str01 );\n+  VERIFY( sstrm1.str() == str00 );\n+  // however, casting the active streambuf to a stringbuf shows what's up:\n+  std::stringbuf* psbuf = dynamic_cast<std::stringbuf*>(pbasebuf2);\n+  str02 = psbuf->str();\n+  VERIFY( str02 == str01 );\n+\n+  // How confusing and non-intuitive is this?\n+  // These semantics are a joke, a serious defect, and incredibly lame.\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "47901a6e49808641b28daff985d902bb7857b4e9", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/char/3.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,65 @@\n+// 2001-05-24 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.6 member functions (stringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test = true;\n+\n+  //\n+  // 1: Automatic formatting of a compound string\n+  //\n+  int i = 1024;\n+  int *pi = &i;\n+  double d = 3.14159;\n+  double *pd = &d;\n+  std::string blank;\n+  std::ostringstream ostrst01; \n+  std::ostringstream ostrst02(blank); \n+  \n+  // No buffer, so should be created.\n+  ostrst01 << \"i: \" << i << \" i's address:  \" << pi << \"\\n\"\n+\t     << \"d: \" << d << \" d's address: \" << pd << std::endl;\n+  // Buffer, so existing buffer should be overwritten.\n+  ostrst02 << \"i: \" << i << \" i's address:  \" << pi << \"\\n\"\n+\t     << \"d: \" << d << \" d's address: \" << pd << std::endl;\n+\n+  std::string msg01 = ostrst01.str();\n+  std::string msg02 = ostrst02.str();\n+  VERIFY( msg01 == msg02 );\n+  VERIFY( msg02 != blank );\n+\n+  // stringstream\n+  std::string str1(\"\");\n+  std::string str3(\"this is a somewhat  string\");\n+  std::stringstream ss1(str1, std::ios_base::in|std::ios_base::out);\n+  std::stringstream ss2(str3, std::ios_base::in|std::ios_base::out);\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "7d77fc2c63cdb59d33a56cc29ad96523200151ee", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/char/4.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F4.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "patch": "@@ -0,0 +1,45 @@\n+// 2001-05-24 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.6 member functions (stringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/8466\n+void test04()\n+{\n+  bool test = true;\n+\n+  const char* strlit00 = \"orvieto\";\n+  const std::string str00 = strlit00;\n+\n+  std::ostringstream oss;\n+\n+  oss.str(str00);\n+  oss << \"cortona\";\n+  VERIFY( str00 == strlit00 );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "79dfa251570369710c3fda979e4618339b75eea5", "filename": "libstdc++-v3/testsuite/27_io/filebuf_members.cc", "status": "removed", "additions": 0, "deletions": 276, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc?ref=a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e", "patch": "@@ -1,276 +0,0 @@\n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.8.1.3 filebuf member functions\n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %-*.txt\n-\n-// various tests for filebuf::open() and filebuf::close() including\n-// the non-portable functionality in the libstdc++-v3 IO library\n-\n-#include <iostream>\n-#include <fstream>\n-#include <unistd.h>\n-#include <signal.h>\n-#include <fcntl.h>\n-#include <sys/types.h>\n-#include <sys/stat.h>\n-#include <ext/stdio_filebuf.h>\n-#include <testsuite_hooks.h>\n-\n-const char name_01[] = \"filebuf_members-1.tst\";\n-const char name_02[] = \"filebuf_members-1.txt\";\n-\n-// Test member functions.\n-void test_01() \n-{\n-  bool \t\t\ttest = true;\n-  const char* name_03 = \"filebuf_members-3\"; // empty file, need to create\n-\n-  std::filebuf fb_01; // in \n-  std::filebuf fb_02; // out\n-  std::filebuf fb_03; // in | out\n-\n-  // bool is_open()\n-  VERIFY( !fb_01.is_open() );\n-  VERIFY( !fb_02.is_open() );\n-  VERIFY( !fb_03.is_open() );\n-\n-  // filebuf_type* open(const char* __s, ios_base::openmode __mode)\n-  fb_01.open(name_01, std::ios_base::in | std::ios_base::ate);\n-  fb_02.open(name_02, std::ios_base::in | std::ios_base::out \n-\t     | std::ios_base::trunc);\n-  // Try to open two different files without closing the first:\n-  // Should keep the old file attached, and disregard attempt to overthrow.\n-  fb_02.open(name_03, std::ios_base::in | std::ios_base::out);\n-  fb_03.open(name_03, std::ios_base::out | std::ios_base::trunc);\n-  VERIFY( fb_01.is_open() );\n-  VERIFY( fb_02.is_open() );\n-  VERIFY( fb_03.is_open() );\n-\n-  // filebuf_type* close()\n-  fb_01.close();\n-  fb_02.close();\n-  fb_03.close();\n-  VERIFY( !fb_01.is_open() );\n-  VERIFY( !fb_02.is_open() );\n-  VERIFY( !fb_03.is_open() );\n-}\n-\n-// Verify that std::filebuf doesn't close files that it didn't open\n-// when using the following std::filebuf ctor:\n-//\n-//      std::filebuf(__c_file_type*  __f,\n-//                   ios_base::openmode __mode,\n-//                   int_type  __s);\n-//\n-// Thanks to \"George T. Talbot\" <george@moberg.com> for uncovering\n-// this bug/situation. \n-void test_02()\n-{\n-  bool test = true;\n-  int close_num;\n-\n-  // read (ext)\n-  FILE* f2 = fopen(name_01, \"r\");\n-  VERIFY( f2 != NULL );\n-  if (f2)\n-  {\n-    __gnu_cxx::stdio_filebuf<char> fb(f2, std::ios_base::in, 512);\n-    close_num = fclose(f2);\n-  }\n-  VERIFY( close_num == 0 );\n-\n-  // read (standard)\n-  FILE* f = fopen(name_01, \"r\");\n-  VERIFY( f != NULL );\n-  if (f)\n-  {\n-    std::ifstream ifstream1(name_01);\n-    VERIFY( ifstream1.is_open() );\n-    std::ios_base::iostate st01 = ifstream1.rdstate();\n-    VERIFY( st01 == std::ios_base::goodbit );\n-    close_num = fclose(f);\n-  }\n-  VERIFY( close_num == 0 );\n-}\n-\n-void test_03()\n-{\n-  bool test = true;\n-  int first_fd = ::open(name_01, O_RDONLY);\n-  VERIFY( first_fd != -1 );\n-  FILE* first_file = ::fdopen(first_fd, \"r\");\n-  VERIFY( first_file != NULL );\n-  __gnu_cxx::stdio_filebuf<char> fb(first_file, std::ios_base::in);\n-\n-  int second_fd = fb.fd();\n-\n-  VERIFY( first_fd == second_fd );\n-}\n-\n-// libstdc++/2913, libstdc++/4879\n-// John Fardo  <jfardo@laurelnetworks.com>, Brad Garcia <garsh@attbi.com>\n-void\n-test_04()\n-{\n-  bool test = true;\n-  const char* name = \"tmp_fifo1\";\n-  signal(SIGPIPE, SIG_IGN);\n-  \n-  unlink(name);\n-  if (0 != mkfifo(name, S_IRWXU))\n-    {\n-      std::cerr << \"failed to create fifo\" << std::endl;\n-      exit(-1);\n-    }\n-  \n-  int fval = fork();\n-  if (fval == -1)\n-    {\n-      std::cerr << \"failed to fork\" << std::endl;\n-      unlink(name);\n-      exit(-1);\n-    }\n-  else if (fval == 0)\n-    {\n-      std::ifstream ifs(name);\n-      sleep(1);\n-      ifs.close();\n-      exit(0);\n-    }\n-\n-  std::ofstream ofs(name);\n-  sleep(2);\n-  ofs.put('t');\n-\n-  /*\n-   * ISO/IED 14882:1998(E) 27.8.1.10.4\n-   *\n-   * void close();\n-   *\n-   * Effects:  Calls rdbuf()->close() and, if that function fails\n-   * (returns a null pointer), calls setstate(failbit)...\n-   */\n-  ofs.close();\n-  if (!(ofs.rdstate() & std::ios::failbit))\n-    {\n-      test = false;\n-      VERIFY( test );\n-      unlink(name);\n-      exit(-1);\n-    }\n-\n-  unlink(name);\n-}\n-\n-// Charles Leggett <CGLeggett@lbl.gov>\n-void test_05()\n-{\n-  bool test = true;\n-  const char* name = \"tmp_file5\";\n-\n-  std::fstream scratch_file;\n-\n-  scratch_file.open(name, std::ios::out);\n-  scratch_file.close();\n-\n-  scratch_file.open(name, std::ios::in);\n-  if (!scratch_file)\n-    VERIFY( false );\n-  scratch_file.close();\n-}\n-\n-// libstdc++/9507\n-void test_06()\n-{\n-  bool test = true;\n-  const char* name = \"tmp_fifo2\";\n-\n-  signal(SIGPIPE, SIG_IGN);\n-\n-  unlink(name);\n-  mkfifo(name, S_IRWXU);\n-\t\n-  if (!fork())\n-    {\n-      std::filebuf fbuf;\n-      fbuf.open(name, std::ios_base::in);\n-      fbuf.sgetc();\n-      fbuf.close();\n-      exit(0);\n-    }\n-\n-  std::filebuf fbuf;\n-  std::filebuf* r = fbuf.open(name, std::ios_base::out | std::ios_base::ate);\n-  VERIFY( !fbuf.is_open() );\n-  VERIFY( r == NULL );\n-}\n-\n-// libstdc++/9964\n-void test_07()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  const char* name = \"tmp_fifo3\";\n-\n-  signal(SIGPIPE, SIG_IGN);\n-\n-  unlink(name);  \n-  mkfifo(name, S_IRWXU);\n-  \n-  int child = fork();\n-  VERIFY( child != -1 );\n-\n-  if (child == 0)\n-    {\n-      filebuf fbin;\n-      fbin.open(name, ios_base::in);\n-      sleep(1);\n-      fbin.close();\n-      exit(0);\n-    }\n-  \n-  filebuf fb;\n-  filebuf* ret = fb.open(name, ios_base::out | ios_base::trunc);\n-  VERIFY( ret != NULL );\n-  VERIFY( fb.is_open() );\n-\n-  sleep(2);\n-  fb.sputc('a');\n-\n-  ret = fb.close();\n-  VERIFY( ret == NULL );\n-  VERIFY( !fb.is_open() );\n-}\n-\n-int\n-main()\n-{\n-  test_01();\n-  test_02();\n-  test_03();\n-  test_04();\n-  test_05();\n-  test_06();\n-  test_07();\n-  return 0;\n-}\n-\n-"}, {"sha": "6699d80af30fa78328ee2619d7449d15b56fd0c2", "filename": "libstdc++-v3/testsuite/27_io/filebuf_virtuals.cc", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc?ref=a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e"}, {"sha": "4f33fd0246103e8420e602f628dfcdc14fb1fd71", "filename": "libstdc++-v3/testsuite/27_io/fpos/1.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "46c64b8bef5a6eec95a76c77fc5bf73bb170bd75", "filename": "libstdc++-v3/testsuite/27_io/fpos/2.cc", "status": "renamed", "additions": 2, "deletions": 78, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/fpos.cc"}, {"sha": "777de9e7ad0797a3cf8f9a864fd4239f6e5f0beb", "filename": "libstdc++-v3/testsuite/27_io/fpos/3.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "09cfee4affd05f1605e2bea9af80138a4f05b8df", "filename": "libstdc++-v3/testsuite/27_io/ios_base/callbacks/1.cc", "status": "renamed", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcallbacks%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcallbacks%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcallbacks%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/ios_base_callbacks.cc"}, {"sha": "6097fdb18499cb5eec0be879590ed3a11c51f318", "filename": "libstdc++-v3/testsuite/27_io/ios_base/state/1.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstate%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstate%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstate%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "dac74cd35daf35d8d27bfd52c9961cc1dd2d02ae", "filename": "libstdc++-v3/testsuite/27_io/ios_base/storage/1.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "751b6be2583eb215787646e0dda679354d5ed9e5", "filename": "libstdc++-v3/testsuite/27_io/ios_base/storage/2.cc", "status": "renamed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/ios_base_storage.cc"}, {"sha": "2c9816a397e715433856b6152afd0e1a75b5dc65", "filename": "libstdc++-v3/testsuite/27_io/ios_base/storage/3.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F3.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "dcc0d5fcab4ec639400952a61c86c1c1c5582416", "filename": "libstdc++-v3/testsuite/27_io/ios_base/sync_with_stdio/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fsync_with_stdio%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fsync_with_stdio%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fsync_with_stdio%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "b645b4a98fd2ad1a9a8ec3182c176868d23d00a3", "filename": "libstdc++-v3/testsuite/27_io/ios_base/sync_with_stdio/2.cc", "status": "renamed", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fsync_with_stdio%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fsync_with_stdio%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fsync_with_stdio%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/ios_base_members_static.cc"}, {"sha": "3b7dc24c454b65f4ca0a8632df6d26bc6c4caf14", "filename": "libstdc++-v3/testsuite/27_io/ios_members.cc", "status": "removed", "additions": 0, "deletions": 173, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_members.cc?ref=a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e"}, {"sha": "892e10bcb1ee61cf7a7388cb850643fc9fa333bc", "filename": "libstdc++-v3/testsuite/27_io/istream_seeks.cc", "status": "removed", "additions": 0, "deletions": 405, "changes": 405, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc?ref=a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e"}, {"sha": "e7676ecb370e35df60c7ef304917ae9a238147e7", "filename": "libstdc++-v3/testsuite/27_io/istream_unformatted.cc", "status": "removed", "additions": 0, "deletions": 639, "changes": 639, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc?ref=a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e"}, {"sha": "b3901d8f7b85fd07b5affbb48b54466edaa63553", "filename": "libstdc++-v3/testsuite/27_io/manipulators/adjustfield/char/1.cc", "status": "renamed", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/ios_manip_fmtflags.cc"}, {"sha": "12b52aa013476769ca0696168204332468397784", "filename": "libstdc++-v3/testsuite/27_io/manipulators/adjustfield/char/2.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "10336f50f1cef45616b970ab3d861b95d083ef39", "filename": "libstdc++-v3/testsuite/27_io/manipulators/basefield/char/1.cc", "status": "renamed", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fbasefield%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fbasefield%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fbasefield%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/ios_manip_basefield.cc"}, {"sha": "71822372fc83d8e085b9cd0755f183cae5837bea", "filename": "libstdc++-v3/testsuite/27_io/manipulators/standard/char/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/standard_manipulators.cc"}, {"sha": "b7ee2b4b6f53a888057ba9745ee6bdcbd47b588a", "filename": "libstdc++-v3/testsuite/27_io/manipulators/standard/char/2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/instantiations.cc"}, {"sha": "45725309ba94549f58ff55837b668945fbf466a2", "filename": "libstdc++-v3/testsuite/27_io/narrow_stream_objects.cc", "status": "removed", "additions": 0, "deletions": 239, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc?ref=a2cf38ee5d3c65e7ff2bda9af265fdfbaec0c26e"}, {"sha": "6ab05e861f13088d45202b6b32c7e137f209632c", "filename": "libstdc++-v3/testsuite/27_io/objects/char/1.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F1.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "912d3ccf7231e9a5089e60c2b33243a62538487a", "filename": "libstdc++-v3/testsuite/27_io/objects/char/2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "32acbb28b04bac2f14209c9a6a3355985e488fe2", "filename": "libstdc++-v3/testsuite/27_io/objects/char/2523-1_xin.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2523-1_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2523-1_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2523-1_xin.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "ec308096e18e5218456c098541aa26c33847fabf", "filename": "libstdc++-v3/testsuite/27_io/objects/char/2523-1_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2523-1_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2523-1_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2523-1_xin.in?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "6a2429a65d2ac4d044bf0198ef6dbeafdeff2221", "filename": "libstdc++-v3/testsuite/27_io/objects/char/2523-2_xin.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2523-2_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2523-2_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2523-2_xin.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "aaee5e5621ac34cf36042d0057fe6a90b905166e", "filename": "libstdc++-v3/testsuite/27_io/objects/char/2523-2_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2523-2_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2523-2_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F2523-2_xin.in?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "ad190d0f2b5c0745c36e794d9a2956defabe63da", "filename": "libstdc++-v3/testsuite/27_io/objects/char/3045.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F3045.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F3045.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F3045.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "4cdcc82af4cf81d0745778d1509587552726c13b", "filename": "libstdc++-v3/testsuite/27_io/objects/char/3647.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F3647.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F3647.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F3647.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f", "previous_filename": "libstdc++-v3/testsuite/27_io/iostream_members.cc"}, {"sha": "b40b4c410464ba5757fa8962fc44265b3bf89a35", "filename": "libstdc++-v3/testsuite/27_io/objects/char/3_xin.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F3_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F3_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F3_xin.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "a26c12687d7f575095e8847224e1a76bfadcce4c", "filename": "libstdc++-v3/testsuite/27_io/objects/char/3_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F3_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F3_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F3_xin.in?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "ae0d8638b277f2a4ea18249c3ee72aa626424127", "filename": "libstdc++-v3/testsuite/27_io/objects/char/4_xin.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F4_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F4_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F4_xin.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "libstdc++-v3/testsuite/27_io/objects/char/4_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F4_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F4_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F4_xin.in?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "36f9019dae7db19dbcca9b9cdf0e66bfb7da8d64", "filename": "libstdc++-v3/testsuite/27_io/objects/char/5268.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5268.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5268.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5268.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "82830a9b04d00bddc5e10c2ae314afb0d88034e3", "filename": "libstdc++-v3/testsuite/27_io/objects/char/5280_xin.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5280_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5280_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5280_xin.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "274c0052dd5408f8ae2bc8440029ff67d79bc5c3", "filename": "libstdc++-v3/testsuite/27_io/objects/char/5280_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5280_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5280_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5280_xin.in?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "ce6133bc39b3df61171ab8c338c863a1e731149a", "filename": "libstdc++-v3/testsuite/27_io/objects/char/6548_xin.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6548_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6548_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6548_xin.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "9daeafb9864cf43055ae93beb0afd6c7d144bfa4", "filename": "libstdc++-v3/testsuite/27_io/objects/char/6548_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6548_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6548_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6548_xin.in?ref=23cac8856600b027fe0397d99dbacb939675c11f"}, {"sha": "9802f092a1fac91796052cc8b3c1efb05fd8f321", "filename": "libstdc++-v3/testsuite/27_io/objects/char/6648-1_xin.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6648-1_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cac8856600b027fe0397d99dbacb939675c11f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6648-1_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6648-1_xin.cc?ref=23cac8856600b027fe0397d99dbacb939675c11f"}]}