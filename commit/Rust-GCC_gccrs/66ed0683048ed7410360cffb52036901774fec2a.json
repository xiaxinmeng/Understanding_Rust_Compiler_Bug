{"sha": "66ed0683048ed7410360cffb52036901774fec2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZlZDA2ODMwNDhlZDc0MTAzNjBjZmZiNTIwMzY5MDE3NzRmZWMyYQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-09T22:21:04Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-09T22:21:04Z"}, "message": "Add port done awhile ago for the ARC cpu.\n\n        * arc/arc.h: New file.\n        * arc/arc.c: New file.\n        * arc/arc.md: New file.\n        * arc/initfini.c: New file.\n        * arc/lib1funcs.asm: New file.\n        * arc/t-arc: New file.\n        * arc/xm-arc.h: New file.\n        * ginclude/va-arc.h: New file.\n        * ginclude/stdarg.h: Include va-arc.h ifdef __arc__.\n        * ginclude/varargs.h: Likewise.\n        * Makefile.in (USER_H): Add va-arc.h.\n        * configure.in (arc-*-elf*): Recognize.\n        * longlong.h: Add ARC support.\nMostly so I can test changes in snapshot scripts.\n\n        * expr.c (clear_storage): Use CONST0_RTX instead of const0_rtx.\n        when clearing non-BLKmode data.\nFixes sparc problem.\n\nFrom-SVN: r15198", "tree": {"sha": "71fefd9a0a4f91412d2e9ca1538cff6cb95ea5d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71fefd9a0a4f91412d2e9ca1538cff6cb95ea5d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66ed0683048ed7410360cffb52036901774fec2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ed0683048ed7410360cffb52036901774fec2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66ed0683048ed7410360cffb52036901774fec2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ed0683048ed7410360cffb52036901774fec2a/comments", "author": null, "committer": null, "parents": [{"sha": "b0d75c1eca02f68c259cec2bf1bfba43aafa433b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d75c1eca02f68c259cec2bf1bfba43aafa433b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0d75c1eca02f68c259cec2bf1bfba43aafa433b"}], "stats": {"total": 158, "additions": 157, "deletions": 1}, "files": [{"sha": "5340f70f66b19ed0ce59f246422ba860218e40cc", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=66ed0683048ed7410360cffb52036901774fec2a", "patch": "@@ -1849,6 +1849,9 @@ for machine in $build $host $target; do\n \t\ttmake_file=alpha/t-vms\n \t\tfixincludes=Makefile.in\n \t\t;;\n+\tarc-*-elf*)\n+\t\textra_parts=\"crtinit.o crtfini.o\"\n+\t\t;;\n \tarm-*-coff* | armel-*-coff*)\n \t\ttm_file=arm/coff.h\n \t\ttmake_file=arm/t-bare"}, {"sha": "1852d89e21682bbd82db5ed4c9b36154044f3924", "filename": "gcc/configure.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=66ed0683048ed7410360cffb52036901774fec2a", "patch": "@@ -377,6 +377,9 @@ for machine in $build $host $target; do\n \t\ttmake_file=alpha/t-vms\n \t\tfixincludes=Makefile.in\n \t\t;;\n+\tarc-*-elf*)\n+\t\textra_parts=\"crtinit.o crtfini.o\"\n+\t\t;;\n \tarm-*-coff* | armel-*-coff*)\n \t\ttm_file=arm/coff.h\n \t\ttmake_file=arm/t-bare"}, {"sha": "954cce4ecc839e0d15252cd469ea59442ae6ce24", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=66ed0683048ed7410360cffb52036901774fec2a", "patch": "@@ -2153,7 +2153,7 @@ clear_storage (object, size, align)\n \t}\n     }\n   else\n-    emit_move_insn (object, const0_rtx);\n+    emit_move_insn (object, CONST0_RTX (GET_MODE (object)));\n }\n \n /* Generate code to copy Y into X."}, {"sha": "431439c152f75af20765de270c498386b21987e5", "filename": "gcc/ginclude/stdarg.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Fginclude%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Fginclude%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdarg.h?ref=66ed0683048ed7410360cffb52036901774fec2a", "patch": "@@ -41,6 +41,9 @@\n #if defined (__PPC__) && (defined (_CALL_SYSV) || defined (_WIN32))\n #include \"va-ppc.h\"\n #else\n+#ifdef __arc__\n+#include \"va-arc.h\"\n+#else\n #ifdef __M32R__\n #include \"va-m32r.h\"\n #else\n@@ -117,6 +120,7 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n #endif /* not mn10300 */\n #endif /* not sh */\n #endif /* not m32r */\n+#endif /* not arc */\n #endif /* not powerpc with V.4 calling sequence */\n #endif /* not h8300 */\n #endif /* not alpha */"}, {"sha": "a718ad6245d63a102dcc398c0b866a16213486ac", "filename": "gcc/ginclude/va-arc.h", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Fginclude%2Fva-arc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Fginclude%2Fva-arc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-arc.h?ref=66ed0683048ed7410360cffb52036901774fec2a", "patch": "@@ -0,0 +1,111 @@\n+/* stdarg/varargs support for the ARC */\n+\n+/* Define __gnuc_va_list.  */\n+\n+#ifndef __GNUC_VA_LIST\n+#define __GNUC_VA_LIST\n+typedef void * __gnuc_va_list;\n+#endif /* not __GNUC_VA_LIST */\n+\n+/* If this is for internal libc use, don't define anything but\n+   __gnuc_va_list.  */\n+#if defined (_STDARG_H) || defined (_VARARGS_H)\n+\n+/* In GCC version 2, we want an ellipsis at the end of the declaration\n+   of the argument list.  GCC version 1 can't parse it.  */\n+\n+#if __GNUC__ > 1\n+#define __va_ellipsis ...\n+#else\n+#define __va_ellipsis\n+#endif\n+\n+/* See arc_setup_incoming_varargs for reasons for the oddity in va_start.  */\n+#ifdef _STDARG_H\n+#define va_start(AP, LASTARG) \\\n+(AP = (__gnuc_va_list) ((int *) __builtin_next_arg (LASTARG) \\\n+\t\t\t+ (__builtin_args_info (0) < 8 \\\n+\t\t\t   ? (__builtin_args_info (0) & 1) \\\n+\t\t\t   : 0)))\n+#else\n+#define va_alist  __builtin_va_alist\n+#define va_dcl    int __builtin_va_alist; __va_ellipsis\n+#define va_start(AP) \\\n+(AP = (__gnuc_va_list) ((int *) &__builtin_va_alist \\\n+\t\t\t+ (__builtin_args_info (0) < 8 \\\n+\t\t\t   ? (__builtin_args_info (0) & 1) \\\n+\t\t\t   : 0)))\n+#endif\n+\n+#ifndef va_end\n+void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n+\n+/* Values returned by __builtin_classify_type.  */\n+\n+enum __va_type_classes {\n+  __no_type_class = -1,\n+  __void_type_class,\n+  __integer_type_class,\n+  __char_type_class,\n+  __enumeral_type_class,\n+  __boolean_type_class,\n+  __pointer_type_class,\n+  __reference_type_class,\n+  __offset_type_class,\n+  __real_type_class,\n+  __complex_type_class,\n+  __function_type_class,\n+  __method_type_class,\n+  __record_type_class,\n+  __union_type_class,\n+  __array_type_class,\n+  __string_type_class,\n+  __set_type_class,\n+  __file_type_class,\n+  __lang_type_class\n+};\n+\n+#endif\n+#define va_end(AP)\t((void)0)\n+\n+/* Avoid errors if compiling GCC v2 with GCC v1.  */\n+#if __GNUC__ == 1\n+#define __extension__\n+#endif\n+\n+/* All aggregates are passed by reference.  All scalar types larger than 8\n+   bytes are passed by reference.  */\n+/* We cast to void * and then to TYPE * because this avoids\n+   a warning about increasing the alignment requirement.\n+   The casts to char * avoid warnings about invalid pointer arithmetic.  */\n+\n+#define __va_rounded_size(TYPE)  \\\n+  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n+\n+#ifdef __big_endian__\n+#define va_arg(AP,TYPE) \\\n+__extension__\t\t\t\t\t\t\t\\\n+(*({((__builtin_classify_type (*(TYPE*) 0) >= __record_type_class \\\n+      || __va_rounded_size (TYPE) > 8)\t\t\t\t\\\n+     ? ((AP) = (char *)(AP) + __va_rounded_size (TYPE *),\t\\\n+\t*(TYPE **) (void *) ((char *)(AP) - __va_rounded_size (TYPE *))) \\\n+     : ((TYPE *) (void *)\t\t\t\t\t\\\n+\t(AP = (void *) ((__alignof__ (TYPE) > 4\t\t\t\\\n+\t\t\t ? ((int) AP + 8 - 1) & -8\t\t\\\n+\t\t\t : (int) AP)\t\t\t\t\\\n+\t\t\t + __va_rounded_size (TYPE))) - 1));}))\n+#else\n+#define va_arg(AP,TYPE) \\\n+__extension__\t\t\t\t\t\t\t\\\n+(*({((__builtin_classify_type (*(TYPE*) 0) >= __record_type_class \\\n+      || __va_rounded_size (TYPE) > 8)\t\t\t\t\\\n+     ? ((AP) = (char *)(AP) + __va_rounded_size (TYPE *),\t\\\n+\t*(TYPE **) (void *) ((char *)(AP) - __va_rounded_size (TYPE *))) \\\n+     : ((AP = (void *) ((__alignof__ (TYPE) > 4\t\t\t\\\n+\t\t\t? ((int) AP + 8 - 1) & -8\t\t\\\n+\t\t\t: (int) AP)\t\t\t\t\\\n+\t\t       + __va_rounded_size (TYPE))),\t\t\\\n+\t(TYPE *) (void *) (AP - __va_rounded_size (TYPE))));}))\n+#endif\n+\n+#endif /* defined (_STDARG_H) || defined (_VARARGS_H) */"}, {"sha": "cfb5f2308c7d80292663c81f3c43c0bd38b22a5d", "filename": "gcc/ginclude/varargs.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Fginclude%2Fvarargs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Fginclude%2Fvarargs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fvarargs.h?ref=66ed0683048ed7410360cffb52036901774fec2a", "patch": "@@ -39,6 +39,9 @@\n #if defined (__PPC__) && (defined (_CALL_SYSV) || defined (_WIN32))\n #include \"va-ppc.h\"\n #else\n+#ifdef __arc__\n+#include \"va-arc.h\"\n+#else\n #ifdef __M32R__\n #include \"va-m32r.h\"\n #else\n@@ -134,6 +137,7 @@ typedef void *__gnuc_va_list;\n #endif /* not mn10300 */\n #endif /* not sh */\n #endif /* not m32r */\n+#endif /* not arc */\n #endif /* not powerpc with V.4 calling sequence */\n #endif /* not h8300 */\n #endif /* not alpha */"}, {"sha": "d9055c2a177eebd3d083dc9a9ab9dcdf7d478bc9", "filename": "gcc/longlong.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ed0683048ed7410360cffb52036901774fec2a/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=66ed0683048ed7410360cffb52036901774fec2a", "patch": "@@ -131,6 +131,37 @@\n \t     : \"r\" ((USItype) (x)))\n #endif /* __a29k__ */\n \n+#if defined (__arc__)\n+#define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n+  __asm__ (\"add.f\t%1, %4, %5\n+\tadc\t%0, %2, %3\"\t\t\t\t\t\t\\\n+\t   : \"=r\" ((USItype) (sh)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (sl))\t\t\t\t\t\\\n+\t   : \"%r\" ((USItype) (ah)),\t\t\t\t\t\\\n+\t     \"rIJ\" ((USItype) (bh)),\t\t\t\t\t\\\n+\t     \"%r\" ((USItype) (al)),\t\t\t\t\t\\\n+\t     \"rIJ\" ((USItype) (bl)))\n+#define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n+  __asm__ (\"sub.f\t%1, %4, %5\n+\tsbc\t%0, %2, %3\"\t\t\t\t\t\t\\\n+\t   : \"=r\" ((USItype) (sh)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (sl))\t\t\t\t\t\\\n+\t   : \"r\" ((USItype) (ah)),\t\t\t\t\t\\\n+\t     \"rIJ\" ((USItype) (bh)),\t\t\t\t\t\\\n+\t     \"r\" ((USItype) (al)),\t\t\t\t\t\\\n+\t     \"rIJ\" ((USItype) (bl)))\n+/* Call libgcc1 routine.  */\n+#define umul_ppmm(w1, w0, u, v) \\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  DIunion __w;\t\t\t\t\t\t\t\t\\\n+  __w.ll = __umulsidi3 (u, v);\t\t\t\t\t\t\\\n+  w1 = __w.s.high;\t\t\t\t\t\t\t\\\n+  w0 = __w.s.low;\t\t\t\t\t\t\t\\\n+} while (0)\n+#define __umulsidi3 __umulsidi3\n+UDItype __umulsidi3 (USItype, USItype);\n+#endif\n+\n #if defined (__arm__)\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"adds\t%1, %4, %5"}]}