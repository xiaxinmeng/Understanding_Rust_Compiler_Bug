{"sha": "9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYwMmY1YTA0YjZjMmEzODc3YjgwMDFiOGVlN2RmNzRjZmRlNGE5Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-31T09:52:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-31T09:52:42Z"}, "message": "builtins.c (expand_builtin_va_arg): Give warnings not errors for promoted argument types; build trap.\n\n        * builtins.c (expand_builtin_va_arg): Give warnings not errors for\n        promoted argument types; build trap.\n        (expand_builtin_trap): New.\n        (expand_builtin): Use it.\n        * stmt.c (expand_nl_goto_receivers): Likewise.\n        * expr.h (expand_builtin_trap): Declare.\n        * libfuncs.h (LTI_abort, abort_libfunc): New.\n        * optabs.c (init_optabs): Init abort_libfunc.\n\n        * gcc.dg/va-arg-1.c: Expect warnings, not errors.\n\nFrom-SVN: r51643", "tree": {"sha": "08485e14eaa9f1372587d43f25c3a7c01bc9dfc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08485e14eaa9f1372587d43f25c3a7c01bc9dfc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/comments", "author": null, "committer": null, "parents": [{"sha": "b56bc85a40b31394439c3a29ddaf71f17654b83d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56bc85a40b31394439c3a29ddaf71f17654b83d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b56bc85a40b31394439c3a29ddaf71f17654b83d"}], "stats": {"total": 71, "additions": 51, "deletions": 20}, "files": [{"sha": "d71c621fb0af3f0301f4ffca86e1880ae834affc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c", "patch": "@@ -1,3 +1,14 @@\n+2002-03-31  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (expand_builtin_va_arg): Give warnings not errors for\n+\tpromoted argument types; build trap.\n+\t(expand_builtin_trap): New.\n+\t(expand_builtin): Use it.\n+\t* stmt.c (expand_nl_goto_receivers): Likewise.\n+\t* expr.h (expand_builtin_trap): Declare.\n+\t* libfuncs.h (LTI_abort, abort_libfunc): New.\n+\t* optabs.c (init_optabs): Init abort_libfunc.\n+\n 2002-03-31  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcc.c (LIBGCC_SPEC): Folded %L and duplicate %G here..."}, {"sha": "effd70d43ed30ae9c2fbc592d68d56d199d49f6d", "filename": "gcc/builtins.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c", "patch": "@@ -3079,7 +3079,7 @@ expand_builtin_va_arg (valist, type)\n   else if ((promoted_type = (*lang_type_promotes_to) (type)) != NULL_TREE)\n     {\n       const char *name = \"<anonymous type>\", *pname = 0;\n-      static int gave_help;\n+      static bool gave_help;\n \n       if (TYPE_NAME (type))\n \t{\n@@ -3098,13 +3098,24 @@ expand_builtin_va_arg (valist, type)\n \t    pname = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (promoted_type)));\n \t}\n \n-      error (\"`%s' is promoted to `%s' when passed through `...'\", name, pname);\n+      /* Unfortunately, this is merely undefined, rather than a constraint\n+\t violation, so we cannot make this an error.  If this call is never\n+\t executed, the program is still strictly conforming.  */\n+      warning (\"`%s' is promoted to `%s' when passed through `...'\",\n+\t       name, pname);\n       if (! gave_help)\n \t{\n-\t  gave_help = 1;\n-\t  error (\"(so you should pass `%s' not `%s' to `va_arg')\", pname, name);\n+\t  gave_help = true;\n+\t  warning (\"(so you should pass `%s' not `%s' to `va_arg')\",\n+\t\t   pname, name);\n \t}\n \n+      /* We can, however, treat \"undefined\" any way we please.\n+\t Call abort to encourage the user to fix the program.  */\n+      expand_builtin_trap ();\n+\n+      /* This is dead code, but go ahead and finish so that the\n+\t mode of the result comes out right.  */\n       addr = const0_rtx;\n     }\n   else\n@@ -3556,6 +3567,18 @@ expand_builtin_expect_jump (exp, if_false_label, if_true_label)\n \n   return ret;\n }\n+\n+void\n+expand_builtin_trap ()\n+{\n+#ifdef HAVE_trap\n+  if (HAVE_trap)\n+    emit_insn (gen_trap ());\n+  else\n+#endif\n+    emit_library_call (abort_libfunc, LCT_NORETURN, VOIDmode, 0);\n+  emit_barrier ();\n+}\n \f\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n@@ -3890,13 +3913,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t}\n \n     case BUILT_IN_TRAP:\n-#ifdef HAVE_trap\n-      if (HAVE_trap)\n-\temit_insn (gen_trap ());\n-      else\n-#endif\n-\terror (\"__builtin_trap not supported by this target\");\n-      emit_barrier ();\n+      expand_builtin_trap ();\n       return const0_rtx;\n \n     case BUILT_IN_PUTCHAR:"}, {"sha": "91ffa3f0507dde0d1f932cb0adcf1c398a6093e4", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c", "patch": "@@ -340,20 +340,18 @@ extern rtx get_condition PARAMS ((rtx, rtx *));\n extern rtx gen_cond_trap PARAMS ((enum rtx_code, rtx, rtx, rtx));\n \f\n /* Functions from builtins.c:  */\n-#ifdef TREE_CODE\n extern rtx expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n extern void std_expand_builtin_va_start PARAMS ((int, tree, rtx));\n extern rtx std_expand_builtin_va_arg PARAMS ((tree, tree));\n extern rtx expand_builtin_va_arg PARAMS ((tree, tree));\n extern void default_init_builtins PARAMS ((void));\n extern rtx default_expand_builtin PARAMS ((tree, rtx, rtx,\n \t\t\t\t\t   enum machine_mode, int));\n-#endif\n-\n extern void expand_builtin_setjmp_setup PARAMS ((rtx, rtx));\n extern void expand_builtin_setjmp_receiver PARAMS ((rtx));\n extern void expand_builtin_longjmp PARAMS ((rtx, rtx));\n extern rtx expand_builtin_saveregs PARAMS ((void));\n+extern void expand_builtin_trap PARAMS ((void));\n extern HOST_WIDE_INT get_varargs_alias_set PARAMS ((void));\n extern HOST_WIDE_INT get_frame_alias_set PARAMS ((void));\n extern void record_base_value\t\tPARAMS ((unsigned int, rtx, int));"}, {"sha": "c3fa09e760c37bb42691ca39da42a80b0aa9bd2d", "filename": "gcc/libfuncs.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Flibfuncs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Flibfuncs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibfuncs.h?ref=9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c", "patch": "@@ -36,6 +36,7 @@ enum libfunc_index\n   LTI_truncxfdf2,\n   LTI_trunctfdf2,\n \n+  LTI_abort,\n   LTI_memcpy,\n   LTI_memmove,\n   LTI_bcopy,\n@@ -162,6 +163,7 @@ extern rtx libfunc_table[LTI_MAX];\n #define truncxfdf2_libfunc\t(libfunc_table[LTI_truncxfdf2])\n #define trunctfdf2_libfunc\t(libfunc_table[LTI_trunctfdf2])\n \n+#define abort_libfunc\t(libfunc_table[LTI_abort])\n #define memcpy_libfunc\t(libfunc_table[LTI_memcpy])\n #define memmove_libfunc\t(libfunc_table[LTI_memmove])\n #define bcopy_libfunc\t(libfunc_table[LTI_bcopy])"}, {"sha": "4d1ebda77f67a6423e5460fc639509042ad76a7e", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c", "patch": "@@ -5076,6 +5076,7 @@ init_optabs ()\n   truncxfdf2_libfunc = init_one_libfunc (\"__truncxfdf2\");\n   trunctfdf2_libfunc = init_one_libfunc (\"__trunctfdf2\");\n \n+  abort_libfunc = init_one_libfunc (\"abort\");\n   memcpy_libfunc = init_one_libfunc (\"memcpy\");\n   memmove_libfunc = init_one_libfunc (\"memmove\");\n   bcopy_libfunc = init_one_libfunc (\"bcopy\");"}, {"sha": "2db32e870606fff51b023a66c99e7dd3ff2e7019", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c", "patch": "@@ -3667,9 +3667,7 @@ expand_nl_goto_receivers (thisblock)\n   if (any_invalid)\n     {\n       expand_nl_goto_receiver ();\n-      emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"abort\"), LCT_NORETURN,\n-\t\t\t VOIDmode, 0);\n-      emit_barrier ();\n+      expand_builtin_trap ();\n     }\n \n   nonlocal_goto_handler_labels = label_list;"}, {"sha": "abf2c2072d08dca6300f740523f33bfc4b0f1e8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c", "patch": "@@ -1,3 +1,7 @@\n+2002-03-31  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/va-arg-1.c: Expect warnings, not errors.\n+\n 2002-03-31  Kazu Hirata  <kazu@hxi.com>\n \n \t* gcc.dg/weak-1.c: Disable on h8300 port."}, {"sha": "a14823725daa5db792ad93735b0cd4eeb07b30e2", "filename": "gcc/testsuite/gcc.dg/va-arg-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-1.c?ref=9602f5a04b6c2a3877b8001b8ee7df74cfde4a9c", "patch": "@@ -7,7 +7,7 @@ volatile int i;\n \n void foo()\n {\n-  i = va_arg(v, char); /* { dg-error \"is promoted to|so you should\" \"char\" } */\n-  i = va_arg(v, short); /* { dg-error \"is promoted to\" \"short\" } */\n-  i = va_arg(v, float); /* { dg-error \"is promoted to\" \"float\" } */\n+  i = va_arg(v, char); /* { dg-warning \"is promoted to|so you should\" \"char\" } */\n+  i = va_arg(v, short); /* { dg-warning \"is promoted to\" \"short\" } */\n+  i = va_arg(v, float); /* { dg-warning \"is promoted to\" \"float\" } */\n }"}]}