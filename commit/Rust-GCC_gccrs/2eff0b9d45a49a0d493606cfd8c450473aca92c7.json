{"sha": "2eff0b9d45a49a0d493606cfd8c450473aca92c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmZjBiOWQ0NWE0OWEwZDQ5MzYwNmNmZDhjNDUwNDczYWNhOTJjNw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-02-26T12:46:01Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-02-26T12:46:01Z"}, "message": "predicates.md: Remove blank lines.\n\n\t* config/sh/predicates.md: Remove blank lines.\n\t* config/sh/sh.c: Fix typos in comments.\n\t* config/sh/constraints.md: Likewise.\n\t* config/sh/sh.md: Remove blank lines.\n\tFix typos in comments.  Use ;; as comment characters.\n\nFrom-SVN: r184583", "tree": {"sha": "f74aabcc6c61164e1a5fcf885c798424b34683de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f74aabcc6c61164e1a5fcf885c798424b34683de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eff0b9d45a49a0d493606cfd8c450473aca92c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eff0b9d45a49a0d493606cfd8c450473aca92c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eff0b9d45a49a0d493606cfd8c450473aca92c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eff0b9d45a49a0d493606cfd8c450473aca92c7/comments", "author": null, "committer": null, "parents": [{"sha": "7afd1a8e940f99effb8a31397c4d3825a3960191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afd1a8e940f99effb8a31397c4d3825a3960191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7afd1a8e940f99effb8a31397c4d3825a3960191"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "5bd94568c76f3ae7c9034092863b271a156d7243", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eff0b9d45a49a0d493606cfd8c450473aca92c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eff0b9d45a49a0d493606cfd8c450473aca92c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2eff0b9d45a49a0d493606cfd8c450473aca92c7", "patch": "@@ -1,3 +1,11 @@\n+2012-02-26  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/predicates.md: Remove blank lines.\n+\t* config/sh/sh.c: Fix typos in comments.\n+\t* config/sh/constraints.md: Likewise.\n+\t* config/sh/sh.md: Remove blank lines.\n+\tFix typos in comments.  Use ;; as comment characters.\n+\n 2012-02-26  Walter Lee  <walt@tilera.com>\n \n \t* config/tilegx/tilegx.c (match_pcrel_step2): Fix instruction"}, {"sha": "f122a48638521b599efb8e355d04fe530c0eec69", "filename": "gcc/config/sh/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eff0b9d45a49a0d493606cfd8c450473aca92c7/gcc%2Fconfig%2Fsh%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eff0b9d45a49a0d493606cfd8c450473aca92c7/gcc%2Fconfig%2Fsh%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fconstraints.md?ref=2eff0b9d45a49a0d493606cfd8c450473aca92c7", "patch": "@@ -139,7 +139,7 @@\n        (match_test \"ival >= 0 && ival <= 255\")))\n  \n (define_constraint \"K12\"\n-  \"An unsigned 8-bit constant, as used in SH2A 12-bit display.\"\n+  \"An unsigned 8-bit constant, as used in SH2A 12-bit displacement addressing.\"\n   (and (match_code \"const_int\")\n        (match_test \"ival >= 0 && ival <= 4095\")))\n "}, {"sha": "00fd6af44bb3eab6eb6b3486584dabe7f1672a5c", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eff0b9d45a49a0d493606cfd8c450473aca92c7/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eff0b9d45a49a0d493606cfd8c450473aca92c7/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=2eff0b9d45a49a0d493606cfd8c450473aca92c7", "patch": "@@ -448,7 +448,6 @@\n   return general_operand (op, mode);\n })\n \n-\n ;; Returns 1 if OP is a POST_INC on stack pointer register.\n \n (define_predicate \"sh_no_delay_pop_operand\"\n@@ -466,7 +465,6 @@\n   return 0;\n })\n \n-\n ;; Returns 1 if OP is a MEM that can be source of a simple move operation.\n \n (define_predicate \"unaligned_load_operand\""}, {"sha": "5eb96c55e77fd2a4fe49e8c4df15dc32213e66d4", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eff0b9d45a49a0d493606cfd8c450473aca92c7/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eff0b9d45a49a0d493606cfd8c450473aca92c7/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=2eff0b9d45a49a0d493606cfd8c450473aca92c7", "patch": "@@ -1850,7 +1850,7 @@ expand_cbranchsi4 (rtx *operands, enum rtx_code comparison, int probability)\n }\n \n /* ??? How should we distribute probabilities when more than one branch\n-   is generated.  So far we only have soem ad-hoc observations:\n+   is generated.  So far we only have some ad-hoc observations:\n    - If the operands are random, they are likely to differ in both parts.\n    - If comparing items in a hash chain, the operands are random or equal;\n      operation should be EQ or NE.\n@@ -5380,7 +5380,7 @@ sh_reorg (void)\n \n   /* If relaxing, generate pseudo-ops to associate function calls with\n      the symbols they call.  It does no harm to not generate these\n-     pseudo-ops.  However, when we can generate them, it enables to\n+     pseudo-ops.  However, when we can generate them, it enables the\n      linker to potentially relax the jsr to a bsr, and eliminate the\n      register load and, possibly, the constant pool entry.  */\n \n@@ -9259,7 +9259,7 @@ reg_unused_after (rtx reg, rtx insn)\n \n #if 0\n       /* If this is a label that existed before reload, then the register\n-\t if dead here.  However, if this is a label added by reorg, then\n+\t is dead here.  However, if this is a label added by reorg, then\n \t the register may still be live here.  We can't tell the difference,\n \t so we just ignore labels completely.  */\n       if (code == CODE_LABEL)\n@@ -9569,7 +9569,7 @@ sh_legitimate_index_p (enum machine_mode mode, rtx op)\n \t{\n \t  int size;\n \n-\t  /* Check if this the address of an unaligned load / store.  */\n+\t  /* Check if this is the address of an unaligned load / store.  */\n \t  if (mode == VOIDmode)\n \t    return CONST_OK_FOR_I06 (INTVAL (op));\n "}, {"sha": "71db258cc0a2c2c605e47a83db8295ab87211ef1", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eff0b9d45a49a0d493606cfd8c450473aca92c7/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eff0b9d45a49a0d493606cfd8c450473aca92c7/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=2eff0b9d45a49a0d493606cfd8c450473aca92c7", "patch": "@@ -4405,8 +4405,6 @@ label:\n   \"sub\tr63, %1, %0\"\n   [(set_attr \"type\" \"arith_media\")])\n \n-\n-\n ;; Don't expand immediately because otherwise neg:DI (abs:DI) will not be\n ;; combined.\n (define_expand \"negdi2\"\n@@ -4497,7 +4495,6 @@ label:\n   DONE;\n }\")\n \n-\n ;; The SH4 202 can do zero-offset branches without pipeline stalls.\n ;; This can be used as some kind of conditional execution, which is useful\n ;; for abs.\n@@ -5468,7 +5465,7 @@ label:\n   operands[3] = gen_rtx_REG (DImode, REGNO (operands[2]));\n }\")\n \n-/* When storing r0, we have to avoid reg+reg addressing.  */\n+;; When storing r0, we have to avoid reg+reg addressing.\n (define_insn \"movhi_i\"\n   [(set (match_operand:HI 0 \"general_movdst_operand\"   \"=r,r,r,r,m,r,l,r\")\n \t(match_operand:HI 1 \"general_movsrc_operand\" \"Q,rI08,m,t,r,l,r,i\"))]\n@@ -7472,7 +7469,7 @@ label:\n    (set_attr \"fp_set\" \"unknown\")])\n \n ;; This is TBR relative jump instruction for SH2A architecture.\n-;; Its use is enabled assigning an attribute \"function_vector\"\n+;; Its use is enabled by assigning an attribute \"function_vector\"\n ;; and the vector number to a function during its declaration.\n \n (define_insn \"call_valuei_tbr_rel\"\n@@ -9581,8 +9578,6 @@ mov.l\\\\t1f,r0\\\\n\\\\\n    DONE;\n \")\n \n-\n-\n ;; sne moves the complement of the T reg to DEST like this:\n ;;      cmp/eq ...\n ;;      mov    #-1,temp\n@@ -9605,7 +9600,6 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   operands[1] = gen_reg_rtx (SImode);\n }\")\n \n-\n ;; Recognize mov #-1/negc/neg sequence, and change it to movt/add #-1.\n ;; This prevents a regression that occurred when we switched from xor to\n ;; mov/neg for sne.\n@@ -9659,7 +9653,6 @@ mov.l\\\\t1f,r0\\\\n\\\\\n    DONE;\n \")\n \n-\n ;; -------------------------------------------------------------------------\n ;; Instructions to cope with inline literal tables\n ;; -------------------------------------------------------------------------\n@@ -12688,7 +12681,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set_attr \"type\" \"arith_media\")\n    (set_attr \"highpart\" \"ignore\")])\n \n-/* These are useful to expand ANDs and as combiner patterns.  */\n+;; These are useful to expand ANDs and as combiner patterns.\n (define_insn_and_split \"mshfhi_l_di\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r,f\")\n \t(ior:DI (lshiftrt:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"rZ,f\")"}]}