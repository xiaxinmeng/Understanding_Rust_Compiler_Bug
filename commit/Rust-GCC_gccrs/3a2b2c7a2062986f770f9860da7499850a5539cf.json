{"sha": "3a2b2c7a2062986f770f9860da7499850a5539cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EyYjJjN2EyMDYyOTg2Zjc3MGY5ODYwZGE3NDk5ODUwYTU1MzljZg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-04-11T08:29:34Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-04-11T08:29:34Z"}, "message": "cppexp.c, [...]: Replace cpp_token with cpp_ttype everywhere.\n\n\t* cppexp.c, cpphash.c, cpphash.h, cpplex.c, cpplib.c,\n\tcpplib.h, cppmain.c, fix-header.c, scan-decls.c: Replace\n\tcpp_token with cpp_ttype everywhere.\n\t* cpperror.c, cpphash.c, cpplex.c, cpplib.c, scan-decls.c:\n\tReplace cpp_buf_line_and_col with CPP_BUF_LINE and/or\n\tCPP_BUF_COL.  Line and column numbers are unsigned int, not\n\tlong.\n\t* cpplex.c (cpp_buf_line_and_col): Delete.\n\t* cpplib.h (struct cpp_buffer, struct cpp_reader): Change\n\t'long lineno' to 'unsigned int lineno'.\n\t(CPP_BUF_LINE, CPP_BUF_COL): New macros.\n\nFrom-SVN: r33076", "tree": {"sha": "93c98a7c646d78b47d835793796c2fccda85d151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93c98a7c646d78b47d835793796c2fccda85d151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a2b2c7a2062986f770f9860da7499850a5539cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2b2c7a2062986f770f9860da7499850a5539cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2b2c7a2062986f770f9860da7499850a5539cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2b2c7a2062986f770f9860da7499850a5539cf/comments", "author": null, "committer": null, "parents": [{"sha": "6d8c68df389affd52c1bee1f5d7da04b423dfc7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8c68df389affd52c1bee1f5d7da04b423dfc7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d8c68df389affd52c1bee1f5d7da04b423dfc7b"}], "stats": {"total": 223, "additions": 112, "deletions": 111}, "files": [{"sha": "136e63e7926b475cc73dbbd1386601963d2e9f67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a2b2c7a2062986f770f9860da7499850a5539cf", "patch": "@@ -1,3 +1,17 @@\n+2000-04-11  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cppexp.c, cpphash.c, cpphash.h, cpplex.c, cpplib.c,\n+\tcpplib.h, cppmain.c, fix-header.c, scan-decls.c: Replace\n+\tcpp_token with cpp_ttype everywhere.\n+\t* cpperror.c, cpphash.c, cpplex.c, cpplib.c, scan-decls.c:\n+\tReplace cpp_buf_line_and_col with CPP_BUF_LINE and/or\n+\tCPP_BUF_COL.  Line and column numbers are unsigned int, not\n+\tlong.\n+\t* cpplex.c (cpp_buf_line_and_col): Delete.\n+\t* cpplib.h (struct cpp_buffer, struct cpp_reader): Change\n+\t'long lineno' to 'unsigned int lineno'.\n+\t(CPP_BUF_LINE, CPP_BUF_COL): New macros.\n+\n 2000-04-11  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* extend.texi: ISO C99 is not a draft anymore."}, {"sha": "0ba2561bdcb274f944c1bc1bf8a695ddb45486d1", "filename": "gcc/cpperror.c", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=3a2b2c7a2062986f770f9860da7499850a5539cf", "patch": "@@ -30,9 +30,11 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"intl.h\"\n \n static void print_containing_files\tPARAMS ((cpp_reader *, cpp_buffer *));\n-static void print_file_and_line\t\tPARAMS ((const char *, long, long));\n+static void print_file_and_line\t\tPARAMS ((const char *, unsigned int,\n+\t\t\t\t\t\t unsigned int));\n static void v_message\t\t\tPARAMS ((cpp_reader *, int,\n-\t\t\t\t\t\t const char *, long, long,\n+\t\t\t\t\t\t const char *,\n+\t\t\t\t\t\t unsigned int, unsigned int,\n \t\t\t\t\t\t const char *, va_list));\n \n /* Print the file names and line numbers of the #include\n@@ -53,13 +55,11 @@ print_containing_files (pfile, ip)\n   /* Find the other, outer source files.  */\n   for (ip = CPP_PREV_BUFFER (ip); ip != NULL; ip = CPP_PREV_BUFFER (ip))\n     {\n-      long line;\n-      cpp_buf_line_and_col (ip, &line, NULL);\n       if (first)\n \t{\n \t  first = 0;\n-\t  fprintf (stderr,  _(\"In file included from %s:%ld\"),\n-\t\t   ip->nominal_fname, line);\n+\t  fprintf (stderr,  _(\"In file included from %s:%u\"),\n+\t\t   ip->nominal_fname, CPP_BUF_LINE (ip));\n \t}\n       else\n \t/* Translators note: this message is used in conjunction\n@@ -73,8 +73,8 @@ print_containing_files (pfile, ip)\n \n \t   The trailing comma is at the beginning of this message,\n \t   and the trailing colon is not translated.  */\n-\tfprintf (stderr, _(\",\\n                 from %s:%ld\"),\n-\t\t ip->nominal_fname, line);\n+\tfprintf (stderr, _(\",\\n                 from %s:%u\"),\n+\t\t ip->nominal_fname, CPP_BUF_LINE (ip));\n     }\n   if (first == 0)\n     fputs (\":\\n\", stderr);\n@@ -86,16 +86,16 @@ print_containing_files (pfile, ip)\n static void\n print_file_and_line (filename, line, column)\n      const char *filename;\n-     long line, column;\n+     unsigned int line, column;\n {\n   if (filename == 0 || *filename == '\\0')\n     filename = \"<stdin>\";\n-  if (line <= 0)\n+  if (line == 0)\n     fputs (_(\"<command line>: \"), stderr);\n   else if (column > 0)\n-    fprintf (stderr, \"%s:%ld:%ld: \", filename, line, column);\n+    fprintf (stderr, \"%s:%u:%u: \", filename, line, column);\n   else\n-    fprintf (stderr, \"%s:%ld: \", filename, line);\n+    fprintf (stderr, \"%s:%u: \", filename, line);\n }\n \n /* IS_ERROR is 3 for ICE, 2 for merely \"fatal\" error,\n@@ -106,8 +106,8 @@ v_message (pfile, is_error, file, line, col, msg, ap)\n      cpp_reader *pfile;\n      int is_error;\n      const char *file;\n-     long line;\n-     long col;\n+     unsigned int line;\n+     unsigned int col;\n      const char *msg;\n      va_list ap;\n {\n@@ -117,9 +117,11 @@ v_message (pfile, is_error, file, line, col, msg, ap)\n     {\n       if (file == NULL)\n \tfile = ip->nominal_fname;\n-      if (line == -1)\n-\tcpp_buf_line_and_col (ip, &line, &col);\n-\n+      if (line == 0)\n+\t{\n+\t  line = CPP_BUF_LINE (ip);\n+\t  col = CPP_BUF_COL (ip);\n+\t}\n       print_containing_files (pfile, ip);\n       print_file_and_line (file, line,\n \t\t\t   CPP_OPTION (pfile, show_column) ? col : 0);\n@@ -172,7 +174,7 @@ cpp_ice VPARAMS ((cpp_reader *pfile, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  v_message (pfile, 3, NULL, -1, -1, msgid, ap);\n+  v_message (pfile, 3, NULL, 0, 0, msgid, ap);\n   va_end(ap);\n }\n \n@@ -198,7 +200,7 @@ cpp_fatal VPARAMS ((cpp_reader *pfile, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  v_message (pfile, 2, NULL, -1, -1, msgid, ap);\n+  v_message (pfile, 2, NULL, 0, 0, msgid, ap);\n   va_end(ap);\n }\n \n@@ -221,7 +223,7 @@ cpp_error VPARAMS ((cpp_reader * pfile, const char *msgid, ...))\n   if (CPP_OPTION (pfile, inhibit_errors))\n     return;\n \n-  v_message (pfile, 1, NULL, -1, -1, msgid, ap);\n+  v_message (pfile, 1, NULL, 0, 0, msgid, ap);\n   va_end(ap);\n }\n \n@@ -281,7 +283,7 @@ cpp_warning VPARAMS ((cpp_reader * pfile, const char *msgid, ...))\n   if (CPP_OPTION (pfile, inhibit_warnings))\n     return;\n \n-  v_message (pfile, 0, NULL, -1, -1, msgid, ap);\n+  v_message (pfile, 0, NULL, 0, 0, msgid, ap);\n   va_end(ap);\n }\n \n@@ -335,7 +337,7 @@ cpp_pedwarn VPARAMS ((cpp_reader * pfile, const char *msgid, ...))\n     return;\n \n   v_message (pfile, CPP_OPTION (pfile, pedantic_errors),\n-\t\t NULL, -1, -1, msgid, ap);\n+\t\t NULL, 0, 0, msgid, ap);\n   va_end(ap);\n }\n "}, {"sha": "46757c581e90a98d94f1feddd1e850fcceadec41", "filename": "gcc/cppexp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=3a2b2c7a2062986f770f9860da7499850a5539cf", "patch": "@@ -343,7 +343,7 @@ parse_defined (pfile)\n {\n   int paren = 0, len;\n   U_CHAR *tok;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n   struct operation op;\n   long old_written = CPP_WRITTEN (pfile);\n \n@@ -413,7 +413,7 @@ lex (pfile, skip_evaluation)\n      int skip_evaluation;\n {\n   const struct token *toktab;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n   struct operation op;\n   U_CHAR *tok_start, *tok_end;\n   long old_written;"}, {"sha": "e9d20b372f7377a66e7b2bd6e8837af20bf92a76", "filename": "gcc/cpphash.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=3a2b2c7a2062986f770f9860da7499850a5539cf", "patch": "@@ -41,7 +41,7 @@ static void push_macro_expansion PARAMS ((cpp_reader *,\n \t\t\t\t\t  U_CHAR *, int, HASHNODE *));\n static int unsafe_chars\t\t PARAMS ((cpp_reader *, int, int));\n static int macro_cleanup\t PARAMS ((cpp_buffer *, cpp_reader *));\n-static enum cpp_token macarg\t PARAMS ((cpp_reader *, int));\n+static enum cpp_ttype macarg\t PARAMS ((cpp_reader *, int));\n static void special_symbol\t PARAMS ((HASHNODE *, cpp_reader *));\n \n /* Initial hash table size.  (It can grow if necessary - see hashtab.c.)  */\n@@ -287,7 +287,7 @@ collect_expansion (pfile, arglist)\n {\n   DEFINITION *defn;\n   struct reflist *pat = 0, *endpat = 0;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n   long start, here, last;\n   int i;\n   int argc;\n@@ -569,7 +569,7 @@ collect_formal_parameters (pfile)\n   int len;\n   int argc = 0;\n   int i;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n   long old_written;\n \n   old_written = CPP_WRITTEN (pfile);\n@@ -718,11 +718,12 @@ _cpp_create_definition (pfile, funlike)\n      int funlike;\n {\n   struct arglist *args = 0;\n-  long line, col;\n+  unsigned int line, col;\n   const char *file;\n   DEFINITION *defn;\n \n-  cpp_buf_line_and_col (CPP_BUFFER (pfile), &line, &col);\n+  line = CPP_BUF_LINE (CPP_BUFFER (pfile));\n+  col = CPP_BUF_COL (CPP_BUFFER (pfile));\n   file = CPP_BUFFER (pfile)->nominal_fname;\n \n   if (funlike)\n@@ -748,13 +749,13 @@ _cpp_create_definition (pfile, funlike)\n  * Return nonzero to indicate a syntax error.\n  */\n \n-static enum cpp_token\n+static enum cpp_ttype\n macarg (pfile, rest_args)\n      cpp_reader *pfile;\n      int rest_args;\n {\n   int paren = 0;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n \n   /* Try to parse as much of the argument as exists at this\n      input stack level.  */\n@@ -908,15 +909,11 @@ special_symbol (hp, pfile)\n       return;\n \n     case T_SPECLINE:\n-      {\n-\tlong line;\n-\tcpp_buf_line_and_col (cpp_file_buffer (pfile), &line, NULL);\n-\n-\tCPP_RESERVE (pfile, 10);\n-\tsprintf (CPP_PWRITTEN (pfile), \"%ld\", line);\n-\tCPP_ADJUST_WRITTEN (pfile, strlen (CPP_PWRITTEN (pfile)));\n-\treturn;\n-      }\n+      ip = cpp_file_buffer (pfile);\n+      CPP_RESERVE (pfile, 10);\n+      sprintf (CPP_PWRITTEN (pfile), \"%u\", CPP_BUF_LINE (pfile));\n+      CPP_ADJUST_WRITTEN (pfile, strlen (CPP_PWRITTEN (pfile)));\n+      return;\n \n     case T_DATE:\n     case T_TIME:\n@@ -977,14 +974,17 @@ _cpp_macroexpand (pfile, hp)\n   int nargs;\n   DEFINITION *defn;\n   register U_CHAR *xbuf;\n-  long start_line, start_column;\n+  unsigned int start_line, start_column;\n+  cpp_buffer *ip;\n   int xbuf_len;\n   struct argdata *args = 0;\n   long old_written = CPP_WRITTEN (pfile);\n   int rest_args, rest_zero = 0;\n   register int i;\n \n-  cpp_buf_line_and_col (cpp_file_buffer (pfile), &start_line, &start_column);\n+  ip = cpp_file_buffer (pfile);\n+  start_line = CPP_BUF_LINE (ip);\n+  start_column = CPP_BUF_COL (ip);\n \n   /* Check for and handle special symbols. */\n   if (hp->type != T_MACRO)\n@@ -1005,7 +1005,7 @@ _cpp_macroexpand (pfile, hp)\n \n   if (nargs >= 0)\n     {\n-      enum cpp_token token;\n+      enum cpp_ttype token;\n \n       args = (struct argdata *) alloca ((nargs + 1) * sizeof (struct argdata));\n "}, {"sha": "a23aa87fc22578d3aca29db7361d7bbf4d88ce6b", "filename": "gcc/cpphash.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=3a2b2c7a2062986f770f9860da7499850a5539cf", "patch": "@@ -302,14 +302,14 @@ extern void _cpp_parse_name\t\tPARAMS ((cpp_reader *, int));\n extern void _cpp_skip_rest_of_line\tPARAMS ((cpp_reader *));\n extern void _cpp_skip_hspace\t\tPARAMS ((cpp_reader *));\n extern int _cpp_parse_assertion\t\tPARAMS ((cpp_reader *));\n-extern enum cpp_token _cpp_lex_token\tPARAMS ((cpp_reader *));\n+extern enum cpp_ttype _cpp_lex_token\tPARAMS ((cpp_reader *));\n extern long _cpp_read_and_prescan\tPARAMS ((cpp_reader *, cpp_buffer *,\n \t\t\t\t\t\t int, size_t));\n extern void _cpp_init_input_buffer\tPARAMS ((cpp_reader *));\n extern void _cpp_grow_token_buffer\tPARAMS ((cpp_reader *, long));\n-extern enum cpp_token _cpp_get_directive_token\n+extern enum cpp_ttype _cpp_get_directive_token\n \t\t\t\t\tPARAMS ((cpp_reader *));\n-extern enum cpp_token _cpp_get_define_token\n+extern enum cpp_ttype _cpp_get_define_token\n \t\t\t\t\tPARAMS ((cpp_reader *));\n \n /* In cpplib.c */"}, {"sha": "e3375920f86bc052f958e4ef4f33f42cef390c96", "filename": "gcc/cpplex.c", "status": "modified", "additions": 17, "deletions": 34, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=3a2b2c7a2062986f770f9860da7499850a5539cf", "patch": "@@ -124,7 +124,7 @@ cpp_scan_buffer (pfile)\n      cpp_reader *pfile;\n {\n   cpp_buffer *buffer = CPP_BUFFER (pfile);\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n   if (CPP_OPTION (pfile, no_output))\n     {\n       long old_written = CPP_WRITTEN (pfile);\n@@ -209,25 +209,6 @@ cpp_expand_to_buffer (pfile, buf, length)\n   CPP_NUL_TERMINATE (pfile);\n }\n \n-void\n-cpp_buf_line_and_col (pbuf, linep, colp)\n-     register cpp_buffer *pbuf;\n-     long *linep, *colp;\n-{\n-  if (pbuf)\n-    {\n-      *linep = pbuf->lineno;\n-      if (colp)\n-\t*colp = pbuf->cur - pbuf->line_base;\n-    }\n-  else\n-    {\n-      *linep = 0;\n-      if (colp)\n-\t*colp = 0;\n-    }\n-}\n-\n /* Return the topmost cpp_buffer that corresponds to a file (not a macro).  */\n \n cpp_buffer *\n@@ -248,11 +229,12 @@ static void\n skip_block_comment (pfile)\n      cpp_reader *pfile;\n {\n-  long line, col;\n+  unsigned int line, col;\n   const U_CHAR *limit, *cur;\n \n   FORWARD(1);\n-  cpp_buf_line_and_col (CPP_BUFFER (pfile), &line, &col);\n+  line = CPP_BUF_LINE (CPP_BUFFER (pfile));\n+  col = CPP_BUF_COL (CPP_BUFFER (pfile));\n   limit = CPP_BUFFER (pfile)->rlimit;\n   cur = CPP_BUFFER (pfile)->cur;\n \n@@ -531,10 +513,11 @@ skip_string (pfile, c)\n      cpp_reader *pfile;\n      int c;\n {\n-  long start_line, start_column;\n+  unsigned int start_line, start_column;\n   unsigned int null_count = 0;\n \n-  cpp_buf_line_and_col (cpp_file_buffer (pfile), &start_line, &start_column);\n+  start_line = CPP_BUF_LINE (CPP_BUFFER (pfile));\n+  start_column = CPP_BUF_COL (CPP_BUFFER (pfile));\n   while (1)\n     {\n       int cc = GETC();\n@@ -716,12 +699,12 @@ _cpp_parse_assertion (pfile)\n /* Get the next token, and add it to the text in pfile->token_buffer.\n    Return the kind of token we got.  */\n \n-enum cpp_token\n+enum cpp_ttype\n _cpp_lex_token (pfile)\n      cpp_reader *pfile;\n {\n   register int c, c2, c3;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n \n  get_next:\n   c = GETC();\n@@ -1181,11 +1164,11 @@ maybe_macroexpand (pfile, written)\n   return 1;\n }\n \n-enum cpp_token\n+enum cpp_ttype\n cpp_get_token (pfile)\n      cpp_reader *pfile;\n {\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n   long written = CPP_WRITTEN (pfile);\n \n  get_next:\n@@ -1253,14 +1236,14 @@ cpp_get_token (pfile)\n \n /* Like cpp_get_token, but skip spaces and comments.  */\n \n-enum cpp_token\n+enum cpp_ttype\n cpp_get_non_space_token (pfile)\n      cpp_reader *pfile;\n {\n   int old_written = CPP_WRITTEN (pfile);\n   for (;;)\n     {\n-      enum cpp_token token = cpp_get_token (pfile);\n+      enum cpp_ttype token = cpp_get_token (pfile);\n       if (token != CPP_COMMENT && token != CPP_HSPACE && token != CPP_VSPACE)\n \treturn token;\n       CPP_SET_WRITTEN (pfile, old_written);\n@@ -1274,12 +1257,12 @@ cpp_get_non_space_token (pfile)\n    XXX This function will exist only till collect_expansion doesn't\n    need to see whitespace anymore, then it'll be merged with\n    _cpp_get_directive_token (below).  */\n-enum cpp_token\n+enum cpp_ttype\n _cpp_get_define_token (pfile)\n      cpp_reader *pfile;\n {\n   long old_written;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n \n  get_next:\n   old_written = CPP_WRITTEN (pfile);\n@@ -1340,14 +1323,14 @@ _cpp_get_define_token (pfile)\n /* Just like _cpp_get_define_token except that it discards horizontal\n    whitespace.  */\n \n-enum cpp_token\n+enum cpp_ttype\n _cpp_get_directive_token (pfile)\n      cpp_reader *pfile;\n {\n   int old_written = CPP_WRITTEN (pfile);\n   for (;;)\n     {\n-      enum cpp_token token = _cpp_get_define_token (pfile);\n+      enum cpp_ttype token = _cpp_get_define_token (pfile);\n       if (token != CPP_COMMENT && token != CPP_HSPACE)\n \treturn token;\n       CPP_SET_WRITTEN (pfile, old_written);"}, {"sha": "2ad02883919cf3932158f808b6f08db662dd8e71", "filename": "gcc/cpplib.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=3a2b2c7a2062986f770f9860da7499850a5539cf", "patch": "@@ -157,7 +157,7 @@ _cpp_handle_directive (pfile)\n   unsigned int len;\n   U_CHAR *ident;\n   long old_written = CPP_WRITTEN (pfile);\n-  enum cpp_token tok;\n+  enum cpp_ttype tok;\n \n   if (CPP_IS_MACRO_BUFFER (CPP_BUFFER (pfile)))\n     {\n@@ -347,7 +347,7 @@ do_define (pfile)\n   int len;\n   int funlike = 0, empty = 0;\n   U_CHAR *sym;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n \n   pfile->no_macro_expand++;\n   pfile->parsing_define_directive++;\n@@ -467,15 +467,15 @@ _cpp_output_line_command (pfile, file_change)\n      cpp_reader *pfile;\n      enum file_change_code file_change;\n {\n-  long line;\n+  unsigned int line;\n   cpp_buffer *ip;\n \n   if (CPP_OPTION (pfile, no_line_commands)\n       || CPP_OPTION (pfile, no_output))\n     return;\n \n   ip = cpp_file_buffer (pfile);\n-  cpp_buf_line_and_col (ip, &line, NULL);\n+  line = ip->lineno;\n \n   /* If the current file has not changed, we omit the #line if it would\n      appear to be a no-op, and we output a few newlines instead\n@@ -505,7 +505,7 @@ _cpp_output_line_command (pfile, file_change)\n   CPP_RESERVE (pfile, 4 * strlen (ip->nominal_fname) + 50);\n   CPP_PUTS_Q (pfile, \"# \", 2);\n \n-  sprintf ((char *) CPP_PWRITTEN (pfile), \"%ld \", line);\n+  sprintf ((char *) CPP_PWRITTEN (pfile), \"%u \", line);\n   CPP_ADJUST_WRITTEN (pfile, strlen (CPP_PWRITTEN (pfile)));\n \n   _cpp_quote_string (pfile, ip->nominal_fname); \n@@ -540,7 +540,7 @@ parse_include (pfile, name)\n      const char *name;\n {\n   long old_written = CPP_WRITTEN (pfile);\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n   int len;\n \n   pfile->parsing_include_directive++;\n@@ -687,7 +687,7 @@ read_line_number (pfile, num)\n {\n   long save_written = CPP_WRITTEN (pfile);\n   U_CHAR *p;\n-  enum cpp_token token = _cpp_get_directive_token (pfile);\n+  enum cpp_ttype token = _cpp_get_directive_token (pfile);\n   CPP_SET_WRITTEN (pfile, save_written);\n   p = pfile->token_buffer + save_written;\n \n@@ -716,7 +716,7 @@ do_line (pfile)\n   int new_lineno;\n   long old_written = CPP_WRITTEN (pfile);\n   enum file_change_code file_change = same_file;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n   char *x;\n \n   token = _cpp_get_directive_token (pfile);\n@@ -834,7 +834,7 @@ do_undef (pfile)\n   HASHNODE **slot;\n   U_CHAR *name;\n   long here = CPP_WRITTEN (pfile);\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n \n   pfile->no_macro_expand++;\n   token = _cpp_get_directive_token (pfile);\n@@ -971,7 +971,7 @@ do_pragma (pfile)\n   long here, key;\n   U_CHAR *buf;\n   int pop;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n \n   here = CPP_WRITTEN (pfile);\n   CPP_PUTS (pfile, \"#pragma \", 8);\n@@ -1052,7 +1052,7 @@ do_pragma_implementation (pfile)\n {\n   /* Be quiet about `#pragma implementation' for a file only if it hasn't\n      been included yet.  */\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n   long written = CPP_WRITTEN (pfile);\n   U_CHAR *name;\n   U_CHAR *copy;\n@@ -1091,7 +1091,7 @@ do_pragma_poison (pfile)\n   HASHNODE **slot;\n   long written;\n   size_t len;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n   int writeit;\n   unsigned long hash;\n \n@@ -1168,7 +1168,7 @@ detect_if_not_defined (pfile)\n   if (pfile->only_seen_white == 2)\n     {\n       U_CHAR *ident;\n-      enum cpp_token token;\n+      enum cpp_ttype token;\n       int base_offset;\n       int token_offset;\n       int need_rparen = 0;\n@@ -1288,7 +1288,7 @@ parse_ifdef (pfile, name)\n {\n   U_CHAR *ident;\n   unsigned int len;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n   long old_written = CPP_WRITTEN (pfile);\n   int defined;\n \n@@ -1496,7 +1496,7 @@ static int\n skip_if_group (pfile)\n     cpp_reader *pfile;\n {\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n   IF_STACK *save_if_stack = pfile->if_stack; /* don't pop past here */\n   long old_written;\n   int ret = 0;"}, {"sha": "1465349698fd06488713f859c8e87b6841c5eb20", "filename": "gcc/cpplib.h", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=3a2b2c7a2062986f770f9860da7499850a5539cf", "patch": "@@ -32,7 +32,7 @@ typedef struct cpp_reader cpp_reader;\n typedef struct cpp_buffer cpp_buffer;\n typedef struct cpp_options cpp_options;\n \n-enum cpp_token\n+enum cpp_ttype\n {\n   CPP_EOF = -1,\n   CPP_OTHER = 0,\n@@ -83,7 +83,6 @@ struct cpp_buffer\n      to record control macros. */\n   struct ihash *ihash;\n \n-  long lineno; /* Line number at CPP_LINE_BASE. */\n   parse_cleanup_t cleanup;\n \n   /* If the buffer is the expansion of a macro, this points to the\n@@ -94,6 +93,9 @@ struct cpp_buffer\n      Used to prohibit unmatched #endif (etc) in an include file.  */\n   struct if_stack *if_stack;\n \n+  /* Line number at line_base (above). */\n+  unsigned int lineno;\n+\n   /* True if this is a header file included using <FILENAME>.  */\n   char system_header_p;\n   char seen_eof;\n@@ -322,16 +324,16 @@ struct cpp_reader\n   unsigned char *limit;\n \n   /* Error counter for exit code */\n-  int errors;\n+  unsigned int errors;\n \n   /* Line where a newline was first seen in a string constant.  */\n-  int multiline_string_line;\n+  unsigned int multiline_string_line;\n \n   /* Current depth in #include directives that use <...>.  */\n-  int system_include_depth;\n+  unsigned int system_include_depth;\n \n   /* Current depth of buffer stack. */\n-  int buffer_stack_depth;\n+  unsigned int buffer_stack_depth;\n \n   /* Hash table of macros and assertions.  See cpphash.c */\n   struct htab *hashtab;\n@@ -350,7 +352,7 @@ struct cpp_reader\n   struct if_stack *if_stack;\n   const unsigned char *potential_control_macro;\n \n-  long lineno;\n+  unsigned int lineno;\n \n   /* Buffer of -M output.  */\n   struct deps *deps;\n@@ -414,20 +416,21 @@ struct cpp_reader\n \n #define CPP_OPTION(PFILE, OPTION) ((PFILE)->opts.OPTION)\n #define CPP_BUFFER(PFILE) ((PFILE)->buffer)\n+#define CPP_BUF_LINE(BUF) ((BUF)->lineno)\n+#define CPP_BUF_COL(BUF) ((BUF)->cur - (BUF)->line_base)\n \n /* Name under which this program was invoked.  */\n extern const char *progname;\n \n extern int cpp_handle_options PARAMS ((cpp_reader *, int, char **));\n-extern enum cpp_token cpp_get_token PARAMS ((cpp_reader *));\n-extern enum cpp_token cpp_get_non_space_token PARAMS ((cpp_reader *));\n+extern enum cpp_ttype cpp_get_token PARAMS ((cpp_reader *));\n+extern enum cpp_ttype cpp_get_non_space_token PARAMS ((cpp_reader *));\n \n extern void cpp_reader_init PARAMS ((cpp_reader *));\n extern int cpp_start_read PARAMS ((cpp_reader *, const char *));\n extern void cpp_finish PARAMS ((cpp_reader *));\n extern void cpp_cleanup PARAMS ((cpp_reader *PFILE));\n \n-extern void cpp_buf_line_and_col PARAMS((cpp_buffer *, long *, long *));\n extern cpp_buffer *cpp_file_buffer PARAMS((cpp_reader *));\n extern void cpp_define PARAMS ((cpp_reader *, const char *));\n extern void cpp_assert PARAMS ((cpp_reader *, const char *));"}, {"sha": "2e85ebfb722ecfe3f070ce7d1aefabefe1a8e46e", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=3a2b2c7a2062986f770f9860da7499850a5539cf", "patch": "@@ -39,7 +39,7 @@ main (argc, argv)\n   char *p;\n   cpp_reader *pfile = &parse_in;\n   int argi = 1;  /* Next argument to handle.  */\n-  enum cpp_token kind;\n+  enum cpp_ttype kind;\n   FILE *out;\n   const char *out_fname;\n "}, {"sha": "35e743393282b5c65468e6e5426edc47bea32a3b", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=3a2b2c7a2062986f770f9860da7499850a5539cf", "patch": "@@ -662,7 +662,7 @@ read_scan_file (in_fname, argc, argv)\n       /* Scan the macro expansion of \"getchar();\".  */\n       for (;;)\n \t{\n-\t  enum cpp_token token = cpp_get_token (&scan_in);\n+\t  enum cpp_ttype token = cpp_get_token (&scan_in);\n \t  int length = CPP_WRITTEN (&scan_in) - old_written;\n \t  CPP_SET_WRITTEN (&scan_in, old_written);\n \t  if (token == CPP_EOF) /* Should not happen ...  */"}, {"sha": "a0b8de0664fc41d83f0f2ac5e282d0733f488315", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2b2c7a2062986f770f9860da7499850a5539cf/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=3a2b2c7a2062986f770f9860da7499850a5539cf", "patch": "@@ -45,7 +45,7 @@ skip_to_closing_brace (pfile)\n   int nesting = 1;\n   for (;;)\n     {\n-      enum cpp_token token = cpp_get_token (pfile);\n+      enum cpp_ttype token = cpp_get_token (pfile);\n       if (token == CPP_EOF)\n \tbreak;\n       if (token == CPP_LBRACE)\n@@ -90,7 +90,7 @@ scan_decls (pfile, argc, argv)\n      decl-specs, or prev_id_start marks the start of the declarator.  */\n   int declarator_start;\n   int prev_id_start, prev_id_end = 0;\n-  enum cpp_token token;\n+  enum cpp_ttype token;\n \n  new_statement:\n   CPP_SET_WRITTEN (pfile, 0);\n@@ -135,8 +135,7 @@ scan_decls (pfile, argc, argv)\n \t      int nesting = 1;\n \t      int have_arg_list = 0;\n \t      cpp_buffer *fbuf = cpp_file_buffer (pfile);\n-\t      long func_lineno;\n-\t      cpp_buf_line_and_col (fbuf, &func_lineno, NULL);\n+\t      unsigned int func_lineno = CPP_BUF_LINE (fbuf);\n \t      for (;;)\n \t\t{\n \t\t  token = cpp_get_token (pfile);"}]}