{"sha": "34d1ff06bf3d8df09bbb2c0caf7d4c6bc0de5d2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRkMWZmMDZiZjNkOGRmMDliYmIyYzBjYWY3ZDRjNmJjMGRlNWQyYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-11-08T14:30:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-11-08T14:30:40Z"}, "message": "regex_compiler.h (__detail::__compile_nfa): Overload so that std::basic_string<C> and std::vector<C> iterators dispatch to...\n\n\t* include/bits/regex_compiler.h (__detail::__compile_nfa): Overload\n\tso that std::basic_string<C> and std::vector<C> iterators dispatch to\n\tthe const C* compiler.\n\nFrom-SVN: r204574", "tree": {"sha": "5ebc270bd1c495613ea01dd121cbbd7cf0a2b158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ebc270bd1c495613ea01dd121cbbd7cf0a2b158"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34d1ff06bf3d8df09bbb2c0caf7d4c6bc0de5d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d1ff06bf3d8df09bbb2c0caf7d4c6bc0de5d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34d1ff06bf3d8df09bbb2c0caf7d4c6bc0de5d2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d1ff06bf3d8df09bbb2c0caf7d4c6bc0de5d2a/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb038ece8f58d223049ffd6f0982352d431b4f29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb038ece8f58d223049ffd6f0982352d431b4f29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb038ece8f58d223049ffd6f0982352d431b4f29"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "ea2e6c7eee97bb1e4836ce2be795f02733ddc681", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d1ff06bf3d8df09bbb2c0caf7d4c6bc0de5d2a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d1ff06bf3d8df09bbb2c0caf7d4c6bc0de5d2a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=34d1ff06bf3d8df09bbb2c0caf7d4c6bc0de5d2a", "patch": "@@ -28,6 +28,10 @@\n \t_CharT template parameters.\n \t* include/bits/regex_compiler.tcc: Likewise.\n \n+\t* include/bits/regex_compiler.h (__detail::__compile_nfa): Overload\n+\tso that std::basic_string<C> and std::vector<C> iterators dispatch to\n+\tthe const C* compiler.\n+\n 2013-11-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/regex_automaton.h (_S_opcode_word_boundry): Rename to"}, {"sha": "741098f8c646e2d4a00259a01df062d236cdb1da", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d1ff06bf3d8df09bbb2c0caf7d4c6bc0de5d2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d1ff06bf3d8df09bbb2c0caf7d4c6bc0de5d2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=34d1ff06bf3d8df09bbb2c0caf7d4c6bc0de5d2a", "patch": "@@ -129,15 +129,57 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _StackT         _M_stack;\n     };\n \n+  template<typename _Tp>\n+    struct __has_contiguous_iter : std::false_type { };\n+\n+  template<typename _Ch, typename _Tr, typename _Alloc>\n+    struct __has_contiguous_iter<std::basic_string<_Ch, _Tr, _Alloc>>\n+    : std::true_type\n+    { };\n+\n+  template<typename _Tp, typename _Alloc>\n+    struct __has_contiguous_iter<std::vector<_Tp, _Alloc>>\n+    : std::true_type\n+    { };\n+\n+  template<typename _Tp>\n+    struct __is_contiguous_normal_iter : std::false_type { };\n+\n+  template<typename _Tp, typename _Cont>\n+    struct\n+    __is_contiguous_normal_iter<__gnu_cxx::__normal_iterator<_Tp, _Cont>>\n+    : __has_contiguous_iter<_Cont>::type\n+    { };\n+\n+  template<typename _Iter, typename _TraitsT>\n+    using __enable_if_contiguous_normal_iter\n+      = typename enable_if< __is_contiguous_normal_iter<_Iter>::value,\n+\t\t\t    std::shared_ptr<_NFA<_TraitsT>> >::type;\n+\n+  template<typename _Iter, typename _TraitsT>\n+    using __disable_if_contiguous_normal_iter\n+      = typename enable_if< !__is_contiguous_normal_iter<_Iter>::value,\n+\t\t\t    std::shared_ptr<_NFA<_TraitsT>> >::type;\n+\n   template<typename _FwdIter, typename _TraitsT>\n-    inline std::shared_ptr<_NFA<_TraitsT>>\n+    inline __disable_if_contiguous_normal_iter<_FwdIter, _TraitsT>\n     __compile_nfa(_FwdIter __first, _FwdIter __last, const _TraitsT& __traits,\n \t\t  regex_constants::syntax_option_type __flags)\n     {\n       using _Cmplr = _Compiler<_FwdIter, _TraitsT>;\n       return _Cmplr(__first, __last, __traits, __flags)._M_get_nfa();\n     }\n \n+  template<typename _Iter, typename _TraitsT>\n+    inline __enable_if_contiguous_normal_iter<_Iter, _TraitsT>\n+    __compile_nfa(_Iter __first, _Iter __last, const _TraitsT& __traits,\n+\t\t  regex_constants::syntax_option_type __flags)\n+    {\n+      size_t __len = __last - __first;\n+      const auto* __cfirst = __len ? std::__addressof(*__first) : nullptr;\n+      return __compile_nfa(__cfirst, __cfirst + __len, __traits, __flags);\n+    }\n+\n   template<typename _TraitsT>\n     struct _AnyMatcher\n     {"}]}