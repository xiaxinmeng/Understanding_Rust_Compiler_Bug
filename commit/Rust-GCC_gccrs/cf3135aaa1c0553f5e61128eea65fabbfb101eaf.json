{"sha": "cf3135aaa1c0553f5e61128eea65fabbfb101eaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YzMTM1YWFhMWMwNTUzZjVlNjExMjhlZWE2NWZhYmJmYjEwMWVhZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-26T11:09:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-26T11:09:43Z"}, "message": "tree-flow.h (widen_bitfield): Remove declaration.\n\n2008-03-26  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (widen_bitfield): Remove declaration.\n\t* tree-ssa-ccp.c (visit_assignment): Remove unneeded code.\n\t(widen_bitfield): Remove function.\n\t* tree-ssa-dom.c (record_equivalences_from_stmt): Remove unneeded\n\tcode.\n\nFrom-SVN: r133597", "tree": {"sha": "4aad68ab876037b00330e7b405df515b72769af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aad68ab876037b00330e7b405df515b72769af7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf3135aaa1c0553f5e61128eea65fabbfb101eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3135aaa1c0553f5e61128eea65fabbfb101eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3135aaa1c0553f5e61128eea65fabbfb101eaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3135aaa1c0553f5e61128eea65fabbfb101eaf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49e013b373db31b854984a3b71f1764a0d80ed7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e013b373db31b854984a3b71f1764a0d80ed7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e013b373db31b854984a3b71f1764a0d80ed7e"}], "stats": {"total": 148, "additions": 14, "deletions": 134}, "files": [{"sha": "571d9400c0f6118fddb1600ac06a5ada17881579", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3135aaa1c0553f5e61128eea65fabbfb101eaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3135aaa1c0553f5e61128eea65fabbfb101eaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf3135aaa1c0553f5e61128eea65fabbfb101eaf", "patch": "@@ -1,3 +1,11 @@\n+2008-03-26  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (widen_bitfield): Remove declaration.\n+\t* tree-ssa-ccp.c (visit_assignment): Remove unneeded code.\n+\t(widen_bitfield): Remove function.\n+\t* tree-ssa-dom.c (record_equivalences_from_stmt): Remove unneeded\n+\tcode.\n+\n 2008-03-25  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR target/31558"}, {"sha": "03d1ba5ee5d490c00453f3f4be19362cb501f509", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3135aaa1c0553f5e61128eea65fabbfb101eaf/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3135aaa1c0553f5e61128eea65fabbfb101eaf/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=cf3135aaa1c0553f5e61128eea65fabbfb101eaf", "patch": "@@ -942,7 +942,6 @@ bool fold_stmt (tree *);\n bool fold_stmt_inplace (tree);\n tree get_symbol_constant_value (tree);\n tree fold_const_aggregate_ref (tree);\n-tree widen_bitfield (tree, tree, tree);\n \n /* In tree-vrp.c  */\n tree vrp_evaluate_conditional (tree, tree);"}, {"sha": "8dcc759eb7d96dd4e3633dde5c6160fad40888df", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3135aaa1c0553f5e61128eea65fabbfb101eaf/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3135aaa1c0553f5e61128eea65fabbfb101eaf/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=cf3135aaa1c0553f5e61128eea65fabbfb101eaf", "patch": "@@ -1264,50 +1264,6 @@ visit_assignment (tree stmt, tree *output_p)\n     /* Evaluate the statement.  */\n     val = evaluate_stmt (stmt);\n \n-  /* If the original LHS was a VIEW_CONVERT_EXPR, modify the constant\n-     value to be a VIEW_CONVERT_EXPR of the old constant value.\n-\n-     ??? Also, if this was a definition of a bitfield, we need to widen\n-     the constant value into the type of the destination variable.  This\n-     should not be necessary if GCC represented bitfields properly.  */\n-  {\n-    tree orig_lhs = GIMPLE_STMT_OPERAND (stmt, 0);\n-\n-    if (TREE_CODE (orig_lhs) == VIEW_CONVERT_EXPR\n-\t&& val.lattice_val == CONSTANT)\n-      {\n-\ttree w = fold_unary (VIEW_CONVERT_EXPR,\n-\t\t\t     TREE_TYPE (TREE_OPERAND (orig_lhs, 0)),\n-\t\t\t     val.value);\n-\n-\torig_lhs = TREE_OPERAND (orig_lhs, 0);\n-\tif (w && is_gimple_min_invariant (w))\n-\t  val.value = w;\n-\telse\n-\t  {\n-\t    val.lattice_val = VARYING;\n-\t    val.value = NULL;\n-\t  }\n-      }\n-\n-    if (val.lattice_val == CONSTANT\n-\t&& TREE_CODE (orig_lhs) == COMPONENT_REF\n-\t&& DECL_BIT_FIELD (TREE_OPERAND (orig_lhs, 1)))\n-      {\n-\ttree w = widen_bitfield (val.value, TREE_OPERAND (orig_lhs, 1),\n-\t\t\t\t orig_lhs);\n-\n-\tif (w && is_gimple_min_invariant (w))\n-\t  val.value = w;\n-\telse\n-\t  {\n-\t    val.lattice_val = VARYING;\n-\t    val.value = NULL_TREE;\n-\t    val.mem_ref = NULL_TREE;\n-\t  }\n-      }\n-  }\n-\n   retval = SSA_PROP_NOT_INTERESTING;\n \n   /* Set the lattice value of the statement's output.  */\n@@ -1535,64 +1491,6 @@ struct gimple_opt_pass pass_store_ccp =\n  }\n };\n \n-/* Given a constant value VAL for bitfield FIELD, and a destination\n-   variable VAR, return VAL appropriately widened to fit into VAR.  If\n-   FIELD is wider than HOST_WIDE_INT, NULL is returned.  */\n-\n-tree\n-widen_bitfield (tree val, tree field, tree var)\n-{\n-  unsigned HOST_WIDE_INT var_size, field_size;\n-  tree wide_val;\n-  unsigned HOST_WIDE_INT mask;\n-  unsigned int i;\n-\n-  /* We can only do this if the size of the type and field and VAL are\n-     all constants representable in HOST_WIDE_INT.  */\n-  if (!host_integerp (TYPE_SIZE (TREE_TYPE (var)), 1)\n-      || !host_integerp (DECL_SIZE (field), 1)\n-      || !host_integerp (val, 0))\n-    return NULL_TREE;\n-\n-  var_size = tree_low_cst (TYPE_SIZE (TREE_TYPE (var)), 1);\n-  field_size = tree_low_cst (DECL_SIZE (field), 1);\n-\n-  /* Give up if either the bitfield or the variable are too wide.  */\n-  if (field_size > HOST_BITS_PER_WIDE_INT || var_size > HOST_BITS_PER_WIDE_INT)\n-    return NULL_TREE;\n-\n-  gcc_assert (var_size >= field_size);\n-\n-  /* If the sign bit of the value is not set or the field's type is unsigned,\n-     just mask off the high order bits of the value.  */\n-  if (DECL_UNSIGNED (field)\n-      || !(tree_low_cst (val, 0) & (((HOST_WIDE_INT)1) << (field_size - 1))))\n-    {\n-      /* Zero extension.  Build a mask with the lower 'field_size' bits\n-\t set and a BIT_AND_EXPR node to clear the high order bits of\n-\t the value.  */\n-      for (i = 0, mask = 0; i < field_size; i++)\n-\tmask |= ((HOST_WIDE_INT) 1) << i;\n-\n-      wide_val = fold_build2 (BIT_AND_EXPR, TREE_TYPE (var), val, \n-\t\t\t      build_int_cst (TREE_TYPE (var), mask));\n-    }\n-  else\n-    {\n-      /* Sign extension.  Create a mask with the upper 'field_size'\n-\t bits set and a BIT_IOR_EXPR to set the high order bits of the\n-\t value.  */\n-      for (i = 0, mask = 0; i < (var_size - field_size); i++)\n-\tmask |= ((HOST_WIDE_INT) 1) << (var_size - i - 1);\n-\n-      wide_val = fold_build2 (BIT_IOR_EXPR, TREE_TYPE (var), val,\n-\t\t\t      build_int_cst (TREE_TYPE (var), mask));\n-    }\n-\n-  return wide_val;\n-}\n-\n-\n /* A subroutine of fold_stmt_r.  Attempts to fold *(A+O) to A[X].\n    BASE is an array type.  OFFSET is a byte displacement.  ORIG_TYPE\n    is the desired result type.  */"}, {"sha": "909bfeba6829690fea20f056b8a6d433b31f6649", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3135aaa1c0553f5e61128eea65fabbfb101eaf/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3135aaa1c0553f5e61128eea65fabbfb101eaf/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=cf3135aaa1c0553f5e61128eea65fabbfb101eaf", "patch": "@@ -1595,38 +1595,13 @@ record_equivalences_from_stmt (tree stmt, int may_optimize_p, stmt_ann_t ann)\n       tree rhs = GIMPLE_STMT_OPERAND (stmt, 1);\n       tree new_stmt;\n \n-      /* FIXME: If the LHS of the assignment is a bitfield and the RHS\n-         is a constant, we need to adjust the constant to fit into the\n-         type of the LHS.  If the LHS is a bitfield and the RHS is not\n-\t a constant, then we can not record any equivalences for this\n-\t statement since we would need to represent the widening or\n-\t narrowing of RHS.  This fixes gcc.c-torture/execute/921016-1.c\n-\t and should not be necessary if GCC represented bitfields\n-\t properly.  */\n-      if (lhs_code == COMPONENT_REF\n-\t  && DECL_BIT_FIELD (TREE_OPERAND (lhs, 1)))\n-\t{\n-\t  if (TREE_CONSTANT (rhs))\n-\t    rhs = widen_bitfield (rhs, TREE_OPERAND (lhs, 1), lhs);\n-\t  else\n-\t    rhs = NULL;\n-\n-\t  /* If the value overflowed, then we can not use this equivalence.  */\n-\t  if (rhs && ! is_gimple_min_invariant (rhs))\n-\t    rhs = NULL;\n-\t}\n-\n-      if (rhs)\n-\t{\n-\t  /* Build a new statement with the RHS and LHS exchanged.  */\n-\t  new_stmt = build_gimple_modify_stmt (rhs, lhs);\n-\n-\t  create_ssa_artificial_load_stmt (new_stmt, stmt, true);\n+      /* Build a new statement with the RHS and LHS exchanged.  */\n+      new_stmt = build_gimple_modify_stmt (rhs, lhs);\n+      create_ssa_artificial_load_stmt (new_stmt, stmt, true);\n \n-\t  /* Finally enter the statement into the available expression\n-\t     table.  */\n-\t  lookup_avail_expr (new_stmt, true);\n-\t}\n+      /* Finally enter the statement into the available expression\n+\t table.  */\n+      lookup_avail_expr (new_stmt, true);\n     }\n }\n "}]}