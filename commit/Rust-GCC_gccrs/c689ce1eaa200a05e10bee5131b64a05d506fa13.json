{"sha": "c689ce1eaa200a05e10bee5131b64a05d506fa13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY4OWNlMWVhYTIwMGEwNWUxMGJlZTUxMzFiNjRhMDVkNTA2ZmExMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-17T07:37:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-17T07:37:40Z"}, "message": "revert: [multiple changes]\n\n2015-06-17  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/66251\n\t* tree-vect-stmts.c (vectorizable_store): Fix gathering of vectorized\n\tstmts for SLP strided stores.\n\n\t* gfortran.fortran-torture/compile/pr66251-2.f90: New testcase.\n\n\tRevert\n\t2015-05-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/66251\n\t* tree-vect-stmts.c (vectorizable_conversion): Properly\n\tset STMT_VINFO_VEC_STMT even for the SLP case.\n\n\t2015-05-26  Michael Matz  <matz@suse.de>\n\n\tPR middle-end/66251\n\t* tree-vect-stmts.c (vect_create_vectorized_demotion_stmts): Always set\n\tSTMT_VINFO_VEC_STMT, also with SLP.\n\nFrom-SVN: r224545", "tree": {"sha": "dfa16684571f9932a10c574e04169d328f08547a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfa16684571f9932a10c574e04169d328f08547a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c689ce1eaa200a05e10bee5131b64a05d506fa13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c689ce1eaa200a05e10bee5131b64a05d506fa13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c689ce1eaa200a05e10bee5131b64a05d506fa13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c689ce1eaa200a05e10bee5131b64a05d506fa13/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74c7484e82216701325d6c64c0a16d8742a02782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c7484e82216701325d6c64c0a16d8742a02782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74c7484e82216701325d6c64c0a16d8742a02782"}], "stats": {"total": 91, "additions": 78, "deletions": 13}, "files": [{"sha": "5bb885b280aa45e9d9449a5c697ff71b8cf65320", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c689ce1eaa200a05e10bee5131b64a05d506fa13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c689ce1eaa200a05e10bee5131b64a05d506fa13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c689ce1eaa200a05e10bee5131b64a05d506fa13", "patch": "@@ -1,3 +1,22 @@\n+2015-06-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66251\n+\t* tree-vect-stmts.c (vectorizable_store): Fix gathering of vectorized\n+\tstmts for SLP strided stores.\n+\n+\tRevert\n+\t2015-05-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66251\n+\t* tree-vect-stmts.c (vectorizable_conversion): Properly\n+\tset STMT_VINFO_VEC_STMT even for the SLP case.\n+\n+\t2015-05-26  Michael Matz  <matz@suse.de>\n+\n+\tPR middle-end/66251\n+\t* tree-vect-stmts.c (vect_create_vectorized_demotion_stmts): Always set\n+\tSTMT_VINFO_VEC_STMT, also with SLP.\n+\n 2015-06-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/56766"}, {"sha": "b5470032db5ab887175efebe6f2e30c244059a33", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c689ce1eaa200a05e10bee5131b64a05d506fa13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c689ce1eaa200a05e10bee5131b64a05d506fa13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c689ce1eaa200a05e10bee5131b64a05d506fa13", "patch": "@@ -1,3 +1,8 @@\n+2015-06-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66251\n+\t* gfortran.fortran-torture/compile/pr66251-2.f90: New testcase.\n+\n 2015-06-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/59682"}, {"sha": "8eb8aa33bb99f467875b6c393d50f49853dec566", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/pr66251-2.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c689ce1eaa200a05e10bee5131b64a05d506fa13/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr66251-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c689ce1eaa200a05e10bee5131b64a05d506fa13/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr66251-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr66251-2.f90?ref=c689ce1eaa200a05e10bee5131b64a05d506fa13", "patch": "@@ -0,0 +1,23 @@\n+subroutine mv(m,nc,irp,ja,val,x,ldx,y,ldy,acc)\n+  use iso_fortran_env\n+  implicit none \n+\n+  integer, parameter  :: ipk_ = int32\n+  integer, parameter  :: spk_   = real32\n+  complex(spk_), parameter   :: czero=(0.0_spk_,0.0_spk_)\n+\n+  integer(ipk_), intent(in)      :: m,ldx,ldy,nc,irp(*),ja(*)\n+  complex(spk_), intent(in)      :: x(ldx,*),val(*)\n+  complex(spk_), intent(inout)   :: y(ldy,*)\n+  complex(spk_), intent(inout)   :: acc(*)\n+  integer(ipk_) :: i,j,k, ir, jc\n+    \n+  do i=1,m \n+    acc(1:nc)  = czero\n+    do j=irp(i), irp(i+1)-1\n+      acc(1:nc)  = acc(1:nc) + val(j) * x(ja(j),1:nc)          \n+    enddo\n+    y(i,1:nc) = -acc(1:nc)\n+  end do\n+  \n+end subroutine mv"}, {"sha": "99e25f88f91bc71c0a8a005fa56b7d9cd06668eb", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c689ce1eaa200a05e10bee5131b64a05d506fa13/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c689ce1eaa200a05e10bee5131b64a05d506fa13/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=c689ce1eaa200a05e10bee5131b64a05d506fa13", "patch": "@@ -3370,13 +3370,15 @@ vect_create_vectorized_demotion_stmts (vec<tree> *vec_oprnds,\n \t     (or in STMT_VINFO_RELATED_STMT chain).  */\n \t  if (slp_node)\n \t    SLP_TREE_VEC_STMTS (slp_node).quick_push (new_stmt);\n-\n-\t  if (!*prev_stmt_info)\n-\t    STMT_VINFO_VEC_STMT (stmt_info) = new_stmt;\n \t  else\n-\t    STMT_VINFO_RELATED_STMT (*prev_stmt_info) = new_stmt;\n+\t    {\n+\t      if (!*prev_stmt_info)\n+\t\tSTMT_VINFO_VEC_STMT (stmt_info) = new_stmt;\n+\t      else\n+\t\tSTMT_VINFO_RELATED_STMT (*prev_stmt_info) = new_stmt;\n \n-\t  *prev_stmt_info = vinfo_for_stmt (new_stmt);\n+\t      *prev_stmt_info = vinfo_for_stmt (new_stmt);\n+\t    }\n \t}\n     }\n \n@@ -3955,12 +3957,14 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n \n \t      if (slp_node)\n \t\tSLP_TREE_VEC_STMTS (slp_node).quick_push (new_stmt);\n-\n-\t      if (!prev_stmt_info)\n-\t\tSTMT_VINFO_VEC_STMT (stmt_info) = new_stmt;\n \t      else\n-\t\tSTMT_VINFO_RELATED_STMT (prev_stmt_info) = new_stmt;\n-\t      prev_stmt_info = vinfo_for_stmt (new_stmt);\n+\t\t{\n+\t\t  if (!prev_stmt_info)\n+\t\t    STMT_VINFO_VEC_STMT (stmt_info) = new_stmt;\n+\t\t  else\n+\t\t    STMT_VINFO_RELATED_STMT (prev_stmt_info) = new_stmt;\n+\t\t  prev_stmt_info = vinfo_for_stmt (new_stmt);\n+\t\t}\n \t    }\n \t}\n \n@@ -5327,9 +5331,23 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t  /* We've set op and dt above, from gimple_assign_rhs1(stmt),\n \t     and first_stmt == stmt.  */\n \t  if (j == 0)\n-\t    vec_oprnd = vect_get_vec_def_for_operand (op, first_stmt, NULL);\n+\t    {\n+\t      if (slp)\n+\t\t{\n+\t\t  vect_get_vec_defs (op, NULL_TREE, stmt, &vec_oprnds, NULL,\n+\t\t\t\t     slp_node, -1);\n+\t\t  vec_oprnd = vec_oprnds[0];\n+\t\t}\n+\t      else\n+\t\tvec_oprnd = vect_get_vec_def_for_operand (op, first_stmt, NULL);\n+\t    }\n \t  else\n-\t    vec_oprnd = vect_get_vec_def_for_stmt_copy (dt, vec_oprnd);\n+\t    {\n+\t      if (slp)\n+\t\tvec_oprnd = vec_oprnds[j];\n+\t      else\n+\t\tvec_oprnd = vect_get_vec_def_for_stmt_copy (dt, vec_oprnd);\n+\t    }\n \n \t  for (i = 0; i < nstores; i++)\n \t    {\n@@ -5359,7 +5377,7 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t      vect_finish_stmt_generation (stmt, incr, gsi);\n \n \t      running_off = newoff;\n-\t      if (j == 0 && i == i)\n+\t      if (j == 0 && i == 0)\n \t\tSTMT_VINFO_VEC_STMT (stmt_info) = *vec_stmt = assign;\n \t      else\n \t\tSTMT_VINFO_RELATED_STMT (prev_stmt_info) = assign;"}]}