{"sha": "7b98910406b5000a6429c188b0c6cc14e3140637", "node_id": "C_kwDOANBUbNoAKDdiOTg5MTA0MDZiNTAwMGE2NDI5YzE4OGIwYzZjYzE0ZTMxNDA2Mzc", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-06-01T22:21:36Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-06-02T20:00:45Z"}, "message": "c++: ICE with template NEW_EXPR [PR105803]\n\nHere we ICE because value_dependent_expression_p gets a NEW_EXPR\nwhose operand is a type, and we go to the default case which just\ncalls v_d_e_p on each operand of the NEW_EXPR.  Since one of them\nis a type, we crash on the new assert in t_d_e_p.\n\nt_d_e_p has code to handle {,VEC_}NEW_EXPR, which at this point\nwas already performed, so I think we can handle these two codes\nspecifically and skip the second operand, which is always going\nto be a type.\n\n\tPR c++/105803\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (value_dependent_expression_p): Handle {,VEC_}NEW_EXPR\n\tin the switch.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/new13.C: New test.", "tree": {"sha": "baf37f3ba94578ed94daa786af38ec9ce83892b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baf37f3ba94578ed94daa786af38ec9ce83892b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b98910406b5000a6429c188b0c6cc14e3140637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b98910406b5000a6429c188b0c6cc14e3140637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b98910406b5000a6429c188b0c6cc14e3140637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b98910406b5000a6429c188b0c6cc14e3140637/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf276ddf22066af780335cd0072d2c27aabe468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf276ddf22066af780335cd0072d2c27aabe468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cf276ddf22066af780335cd0072d2c27aabe468"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "836861e10391e0e16248724ab9ba4d20f4849387", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b98910406b5000a6429c188b0c6cc14e3140637/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b98910406b5000a6429c188b0c6cc14e3140637/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=7b98910406b5000a6429c188b0c6cc14e3140637", "patch": "@@ -27643,6 +27643,14 @@ value_dependent_expression_p (tree expression)\n \t under instantiate_non_dependent_expr; it can't be constant.  */\n       return true;\n \n+    case NEW_EXPR:\n+    case VEC_NEW_EXPR:\n+      /* The second operand is a type, which type_dependent_expression_p\n+\t (and therefore value_dependent_expression_p) doesn't want to see.  */\n+      return (value_dependent_expression_p (TREE_OPERAND (expression, 0))\n+\t      || value_dependent_expression_p (TREE_OPERAND (expression, 2))\n+\t      || value_dependent_expression_p (TREE_OPERAND (expression, 3)));\n+\n     default:\n       /* A constant expression is value-dependent if any subexpression is\n \t value-dependent.  */"}, {"sha": "17a19e4028911f220b02a6edae68b312c53713a9", "filename": "gcc/testsuite/g++.dg/template/new13.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b98910406b5000a6429c188b0c6cc14e3140637/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b98910406b5000a6429c188b0c6cc14e3140637/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew13.C?ref=7b98910406b5000a6429c188b0c6cc14e3140637", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/105803\n+// { dg-do compile }\n+// { dg-additional-options \"-fchecking=2\" }\n+\n+namespace std {\n+template <typename> class shared_ptr {};\n+}\n+struct S {};\n+template <int> void build_matrices() {\n+  std::shared_ptr<S>(new S);\n+}"}]}