{"sha": "d54565d87ff79b882208dfb29af50232033c233d", "node_id": "C_kwDOANBUbNoAKGQ1NDU2NWQ4N2ZmNzliODgyMjA4ZGZiMjlhZjUwMjMyMDMzYzIzM2Q", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-01-10T14:47:07Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-01-10T14:47:07Z"}, "message": "ira: Add ira_subloop_allocnos_can_differ_p\n\ncolor_pass has two instances of the same code for propagating non-cap\nassignments from parent loops to subloops.  This patch adds a helper\nfunction for testing when such propagations are required for correctness\nand uses it to remove the duplicated code.\n\nA later patch will use this in ira-build.c too, which is why the\nfunction is exported to ira-int.h.\n\nNo functional change intended.\n\ngcc/\n\tPR rtl-optimization/98782\n\t* ira-int.h (ira_subloop_allocnos_can_differ_p): New function,\n\textracted from...\n\t* ira-color.c (color_pass): ...here.", "tree": {"sha": "47973cdb200c95c3e9ea7b34f3d9b981c37c55bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47973cdb200c95c3e9ea7b34f3d9b981c37c55bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d54565d87ff79b882208dfb29af50232033c233d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54565d87ff79b882208dfb29af50232033c233d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54565d87ff79b882208dfb29af50232033c233d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54565d87ff79b882208dfb29af50232033c233d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "909a4b4764c4f270f09ccb2a950c91b21ed7b33a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909a4b4764c4f270f09ccb2a950c91b21ed7b33a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/909a4b4764c4f270f09ccb2a950c91b21ed7b33a"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "ae0f08af4b390116543f3d88411b7b405987cbe4", "filename": "gcc/ira-color.c", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54565d87ff79b882208dfb29af50232033c233d/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54565d87ff79b882208dfb29af50232033c233d/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=d54565d87ff79b882208dfb29af50232033c233d", "patch": "@@ -3446,26 +3446,7 @@ color_pass (ira_loop_tree_node_t loop_tree_node)\n \t  if ((flag_ira_region == IRA_REGION_MIXED\n \t       && (loop_tree_node->reg_pressure[pclass]\n \t\t   <= ira_class_hard_regs_num[pclass]))\n-\t      || (pic_offset_table_rtx != NULL\n-\t\t  && regno == (int) REGNO (pic_offset_table_rtx))\n-\t      /* Avoid overlapped multi-registers. Moves between them\n-\t\t might result in wrong code generation.  */\n-\t      || (hard_regno >= 0\n-\t\t  && ira_reg_class_max_nregs[pclass][mode] > 1))\n-\t    {\n-\t      if (! ALLOCNO_ASSIGNED_P (subloop_allocno))\n-\t\t{\n-\t\t  ALLOCNO_HARD_REGNO (subloop_allocno) = hard_regno;\n-\t\t  ALLOCNO_ASSIGNED_P (subloop_allocno) = true;\n-\t\t  if (hard_regno >= 0)\n-\t\t    update_costs_from_copies (subloop_allocno, true, true);\n-\t\t  /* We don't need updated costs anymore.  */\n-\t\t  ira_free_allocno_updated_costs (subloop_allocno);\n-\t\t}\n-\t      continue;\n-\t    }\n-\t  ira_assert (regno < ira_reg_equiv_len);\n-\t  if (ira_equiv_no_lvalue_p (regno))\n+\t      || !ira_subloop_allocnos_can_differ_p (a, hard_regno >= 0))\n \t    {\n \t      if (! ALLOCNO_ASSIGNED_P (subloop_allocno))\n \t\t{"}, {"sha": "c5b1a131abd0bf59c423cc5f4f7e699a7ea1faba", "filename": "gcc/ira-int.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54565d87ff79b882208dfb29af50232033c233d/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54565d87ff79b882208dfb29af50232033c233d/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=d54565d87ff79b882208dfb29af50232033c233d", "patch": "@@ -1595,4 +1595,32 @@ ira_loop_border_costs::move_between_loops_cost () const\n   return move_cost * (m_entry_freq + m_exit_freq);\n }\n \n+/* Return true if subloops that contain allocnos for A's register can\n+   use a different assignment from A.  ALLOCATED_P is true for the case\n+   in which allocation succeeded for A.  */\n+inline bool\n+ira_subloop_allocnos_can_differ_p (ira_allocno_t a, bool allocated_p = true)\n+{\n+  auto regno = ALLOCNO_REGNO (a);\n+\n+  if (pic_offset_table_rtx != NULL\n+      && regno == (int) REGNO (pic_offset_table_rtx))\n+    return false;\n+\n+  ira_assert (regno < ira_reg_equiv_len);\n+  if (ira_equiv_no_lvalue_p (regno))\n+    return false;\n+\n+  /* Avoid overlapping multi-registers.  Moves between them might result\n+     in wrong code generation.  */\n+  if (allocated_p)\n+    {\n+      auto pclass = ira_pressure_class_translate[ALLOCNO_CLASS (a)];\n+      if (ira_reg_class_max_nregs[pclass][ALLOCNO_MODE (a)] > 1)\n+\treturn false;\n+    }\n+\n+  return true;\n+}\n+\n #endif /* GCC_IRA_INT_H */"}]}