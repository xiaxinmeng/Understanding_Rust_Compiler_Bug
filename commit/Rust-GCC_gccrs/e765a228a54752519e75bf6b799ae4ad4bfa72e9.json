{"sha": "e765a228a54752519e75bf6b799ae4ad4bfa72e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc2NWEyMjhhNTQ3NTI1MTllNzViZjZiNzk5YWU0YWQ0YmZhNzJlOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-06-07T02:49:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-06-07T02:49:34Z"}, "message": "decl.c (grokdeclarator): Keep a decl with error type.\n\n\t* decl.c (grokdeclarator): Keep a decl with error type.\n\t(grokfield, grokbitfield): Likewise.\n\t* pt.c (instantiate_class_template_1): Likewise.\n\t(tsubst_decl): Drop redundant error.\n\t* class.c (walk_subobject_offsets): Handle erroneous fields.\n\t* typeck2.c (process_init_constructor_record): Likewise.\n\nFrom-SVN: r199779", "tree": {"sha": "5227fce1bac62466fe47f51072fd44a5cf33a72a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5227fce1bac62466fe47f51072fd44a5cf33a72a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e765a228a54752519e75bf6b799ae4ad4bfa72e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e765a228a54752519e75bf6b799ae4ad4bfa72e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e765a228a54752519e75bf6b799ae4ad4bfa72e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e765a228a54752519e75bf6b799ae4ad4bfa72e9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73310b0e7016e8e126f6371cce8dea81882b832f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73310b0e7016e8e126f6371cce8dea81882b832f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73310b0e7016e8e126f6371cce8dea81882b832f"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "c53a9ff0b5a0df639a119e0bfac34530f1d88198", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e765a228a54752519e75bf6b799ae4ad4bfa72e9", "patch": "@@ -1,3 +1,12 @@\n+2013-06-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (grokdeclarator): Keep a decl with error type.\n+\t(grokfield, grokbitfield): Likewise.\n+\t* pt.c (instantiate_class_template_1): Likewise.\n+\t(tsubst_decl): Drop redundant error.\n+\t* class.c (walk_subobject_offsets): Handle erroneous fields.\n+\t* typeck2.c (process_init_constructor_record): Likewise.\n+\n 2013-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51908"}, {"sha": "286164d020294ef7b2f8fd4554698c0b26400807", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e765a228a54752519e75bf6b799ae4ad4bfa72e9", "patch": "@@ -3779,7 +3779,9 @@ walk_subobject_offsets (tree type,\n \n       /* Iterate through the fields of TYPE.  */\n       for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n-\tif (TREE_CODE (field) == FIELD_DECL && !DECL_ARTIFICIAL (field))\n+\tif (TREE_CODE (field) == FIELD_DECL\n+\t    && TREE_TYPE (field) != error_mark_node\n+\t    && !DECL_ARTIFICIAL (field))\n \t  {\n \t    tree field_offset;\n "}, {"sha": "7825c73e0d7e061f3d41ac33a08fc5f9b1866940", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e765a228a54752519e75bf6b799ae4ad4bfa72e9", "patch": "@@ -10530,21 +10530,13 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t && (TREE_CODE (type) != ARRAY_TYPE || initialized == 0))\n \t  {\n \t    if (unqualified_id)\n-\t      error (\"field %qD has incomplete type\", unqualified_id);\n+\t      error (\"field %qD has incomplete type %qT\",\n+\t\t     unqualified_id, type);\n \t    else\n \t      error (\"name %qT has incomplete type\", type);\n \n-\t    /* If we're instantiating a template, tell them which\n-\t       instantiation made the field's type be incomplete.  */\n-\t    if (current_class_type\n-\t\t&& TYPE_NAME (current_class_type)\n-\t\t&& IDENTIFIER_TEMPLATE (current_class_name)\n-\t\t&& declspecs->type\n-\t\t&& declspecs->type == type)\n-\t      error (\"  in instantiation of template %qT\",\n-\t\t     current_class_type);\n-\n-\t    return error_mark_node;\n+\t    type = error_mark_node;\n+\t    decl = NULL_TREE;\n \t  }\n \telse\n \t  {"}, {"sha": "1573cede8992a5a2e9188af6514e2bd91905c61b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=e765a228a54752519e75bf6b799ae4ad4bfa72e9", "patch": "@@ -835,9 +835,11 @@ grokfield (const cp_declarator *declarator,\n     init = NULL_TREE;\n \n   value = grokdeclarator (declarator, declspecs, FIELD, init != 0, &attrlist);\n-  if (! value || error_operand_p (value))\n+  if (! value || value == error_mark_node)\n     /* friend or constructor went bad.  */\n     return error_mark_node;\n+  if (TREE_TYPE (value) == error_mark_node)\n+    return value;\n \n   if (TREE_CODE (value) == TYPE_DECL && init)\n     {\n@@ -1045,8 +1047,10 @@ grokbitfield (const cp_declarator *declarator,\n {\n   tree value = grokdeclarator (declarator, declspecs, BITFIELD, 0, &attrlist);\n \n-  if (value == error_mark_node) \n+  if (value == error_mark_node)\n     return NULL_TREE; /* friends went bad.  */\n+  if (TREE_TYPE (value) == error_mark_node)\n+    return value;\n \n   /* Pass friendly classes back.  */\n   if (VOID_TYPE_P (value))"}, {"sha": "dcdde005cd73d8bb47d3cf9f0a27d46f607950bb", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e765a228a54752519e75bf6b799ae4ad4bfa72e9", "patch": "@@ -8863,17 +8863,16 @@ instantiate_class_template_1 (tree type)\n \t\t  else if (TREE_CODE (r) == FIELD_DECL)\n \t\t    {\n \t\t      /* Determine whether R has a valid type and can be\n-\t\t\t completed later.  If R is invalid, then it is\n-\t\t\t replaced by error_mark_node so that it will not be\n-\t\t\t added to TYPE_FIELDS.  */\n+\t\t\t completed later.  If R is invalid, then its type is\n+\t\t\t replaced by error_mark_node.  */\n \t\t      tree rtype = TREE_TYPE (r);\n \t\t      if (can_complete_type_without_circularity (rtype))\n \t\t\tcomplete_type (rtype);\n \n \t\t      if (!COMPLETE_TYPE_P (rtype))\n \t\t\t{\n \t\t\t  cxx_incomplete_type_error (r, rtype);\n-\t\t\t  r = error_mark_node;\n+\t\t\t  TREE_TYPE (r) = error_mark_node;\n \t\t\t}\n \t\t    }\n \n@@ -10514,8 +10513,6 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t/* We don't have to set DECL_CONTEXT here; it is set by\n \t   finish_member_declaration.  */\n \tDECL_CHAIN (r) = NULL_TREE;\n-\tif (VOID_TYPE_P (type))\n-\t  error (\"instantiation of %q+D as type %qT\", r, type);\n \n \tapply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n \t\t\t\t\targs, complain, in_decl);"}, {"sha": "401904d8ea41e9f535f9a089bfab65fa67b6cc7a", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=e765a228a54752519e75bf6b799ae4ad4bfa72e9", "patch": "@@ -1236,6 +1236,8 @@ process_init_constructor_record (tree type, tree init,\n       type = TREE_TYPE (field);\n       if (DECL_BIT_FIELD_TYPE (field))\n \ttype = DECL_BIT_FIELD_TYPE (field);\n+      if (type == error_mark_node)\n+\treturn PICFLAG_ERRONEOUS;\n \n       if (idx < vec_safe_length (CONSTRUCTOR_ELTS (init)))\n \t{"}, {"sha": "db5b5c7f3d70186951ca95d0dd3170c14e8be55f", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept15.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept15.C?ref=e765a228a54752519e75bf6b799ae4ad4bfa72e9", "patch": "@@ -9,11 +9,11 @@ template<class Tp>\n     Tp elem;  // { dg-error \"incomplete type\" }\n \n     constexpr single(const Tp& e)\n-    : elem(e) { }   // { dg-error \"invalid field\" }\n+    : elem(e) { }\n \n     single(single&& s)\n     noexcept(std::is_nothrow_move_constructible<Tp>::value) \n-    : elem(s.elem) { } // { dg-error \"invalid field|no member\" }\n+    : elem(s.elem) { }\n   };\n \n template<class Tp>"}, {"sha": "f8f3c3743fcfd9da8970b1022209d1a0fadc7ecd", "filename": "gcc/testsuite/g++.dg/init/array26.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray26.C?ref=e765a228a54752519e75bf6b799ae4ad4bfa72e9", "patch": "@@ -8,4 +8,4 @@ struct B\n   A a; // { dg-error \"incomplete type\" }\n };\n \n-B b[1] = (B[]) { 0 }; // { dg-error \"initializer\" }\n+B b[1] = (B[]) { 0 };"}, {"sha": "be5ab1d450ed02038c451f7f40f6a1d9a4197607", "filename": "gcc/testsuite/g++.dg/template/error2.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror2.C?ref=e765a228a54752519e75bf6b799ae4ad4bfa72e9", "patch": "@@ -7,9 +7,8 @@\n \n template<class T> struct X\n {\n-  T m;\t// { dg-error \"as type 'void'\" \"void\" }\n-\t// { dg-error \"incomplete type\" \"incomplate\" { target *-*-* } 10 }\n-\t// { dg-error \"invalid\" \"invalid\" { target *-*-* } 10 }\n+  T m;\t// { dg-error \"void\" \"void\" }\n+\t// { dg-error \"incomplete type\" \"incomplete\" { target *-*-* } 10 }\n };\n \n template<class T >"}, {"sha": "c0754da92272b18d56030c9cdfe37b6ce4cba06a", "filename": "gcc/testsuite/g++.dg/template/instantiate3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e765a228a54752519e75bf6b799ae4ad4bfa72e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate3.C?ref=e765a228a54752519e75bf6b799ae4ad4bfa72e9", "patch": "@@ -10,7 +10,7 @@ template <class TYPE>\n struct ACE_Cleanup_Adapter\n {\n   TYPE &object ()\n-  { return object_; }\t// { dg-error \"invalid\" }\n+  { return object_; }\n   TYPE object_;\t\t// { dg-error \"incomplete type\" }\n };\n "}]}