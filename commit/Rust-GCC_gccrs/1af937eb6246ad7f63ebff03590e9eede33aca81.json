{"sha": "1af937eb6246ad7f63ebff03590e9eede33aca81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmOTM3ZWI2MjQ2YWQ3ZjYzZWJmZjAzNTkwZTllZWRlMzNhY2E4MQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-16T13:44:42Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-16T13:44:42Z"}, "message": "libstdc++: invalid default init in _CachedPosition [PR101231]\n\nThe primary template for _CachedPosition is a dummy implementation for\nnon-forward ranges, the iterators for which generally can't be cached.\nBecause this implementation doesn't actually cache anything, _M_has_value\nis defined to be false and so calls to _M_get (which are always guarded\nby _M_has_value) are unreachable.\n\nStill, to suppress a \"control reaches end of non-void function\" warning\nI made _M_get return {}, but after P2325 input iterators are no longer\nnecessarily default constructible so this workaround now breaks valid\nprograms.\n\nThis patch fixes this by instead using __builtin_unreachable to squelch\nthe warning.\n\n\tPR libstdc++/101231\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (_CachedPosition::_M_get): For non-forward\n\tranges, just call __builtin_unreachable.\n\t* testsuite/std/ranges/istream_view.cc (test05): New test.", "tree": {"sha": "9c21bb371353baec99f9ac82667e07af93532494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c21bb371353baec99f9ac82667e07af93532494"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1af937eb6246ad7f63ebff03590e9eede33aca81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af937eb6246ad7f63ebff03590e9eede33aca81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af937eb6246ad7f63ebff03590e9eede33aca81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af937eb6246ad7f63ebff03590e9eede33aca81/comments", "author": null, "committer": null, "parents": [{"sha": "73464a472aa4e86359f1a5dc529394fe5152fec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73464a472aa4e86359f1a5dc529394fe5152fec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73464a472aa4e86359f1a5dc529394fe5152fec0"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "d791e15d096f0dd4aef97a0f2203ed897c615e2d", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af937eb6246ad7f63ebff03590e9eede33aca81/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af937eb6246ad7f63ebff03590e9eede33aca81/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=1af937eb6246ad7f63ebff03590e9eede33aca81", "patch": "@@ -1232,7 +1232,7 @@ namespace views::__adaptor\n \t_M_get(const _Range&) const\n \t{\n \t  __glibcxx_assert(false);\n-\t  return {};\n+\t  __builtin_unreachable();\n \t}\n \n \tconstexpr void"}, {"sha": "2f15f787250342f95825f6ebbe45764a1e09cacf", "filename": "libstdc++-v3/testsuite/std/ranges/istream_view.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af937eb6246ad7f63ebff03590e9eede33aca81/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fistream_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af937eb6246ad7f63ebff03590e9eede33aca81/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fistream_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fistream_view.cc?ref=1af937eb6246ad7f63ebff03590e9eede33aca81", "patch": "@@ -83,11 +83,23 @@ test04()\n   static_assert(!std::forward_iterator<It>);\n }\n \n+void\n+test05()\n+{\n+  // PR libstdc++/101231\n+  auto words = std::istringstream{\"42\"};\n+  auto is = ranges::istream_view<int>(words);\n+  auto r = is | views::filter([](auto) { return true; });\n+  for (auto x : r)\n+    ;\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n }"}]}