{"sha": "3a4ffde68cfc6fee3c20d282d6690f2569e2fffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E0ZmZkZTY4Y2ZjNmZlZTNjMjBkMjgyZDY2OTBmMjU2OWUyZmZmYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-07-12T19:47:31Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-12T19:47:31Z"}, "message": "i386.c: Tidy processor feature bitmasks.\n\n\t* config/i386/i386.c: Tidy processor feature bitmasks.\n\t(m_P4_NOCONA): New.\n\nFrom-SVN: r176215", "tree": {"sha": "b1c9134113b94c3249dfac2d15392db2d2908a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1c9134113b94c3249dfac2d15392db2d2908a84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a4ffde68cfc6fee3c20d282d6690f2569e2fffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4ffde68cfc6fee3c20d282d6690f2569e2fffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4ffde68cfc6fee3c20d282d6690f2569e2fffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4ffde68cfc6fee3c20d282d6690f2569e2fffa/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10b75750f251ad6a5cdeb505f51ddc4638d81e14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b75750f251ad6a5cdeb505f51ddc4638d81e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b75750f251ad6a5cdeb505f51ddc4638d81e14"}], "stats": {"total": 134, "additions": 63, "deletions": 71}, "files": [{"sha": "f820c2d1e6578c5354713e43c577c871ade391e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4ffde68cfc6fee3c20d282d6690f2569e2fffa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4ffde68cfc6fee3c20d282d6690f2569e2fffa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a4ffde68cfc6fee3c20d282d6690f2569e2fffa", "patch": "@@ -1,3 +1,8 @@\n+2011-07-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c: Tidy processor feature bitmasks.\n+\t(m_P4_NOCONA): New.\n+\n 2011-07-12  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR rtl-opt/49474"}, {"sha": "24c906c2c59e11b972ae97c3ec5e8fae0be57e2c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 57, "deletions": 68, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4ffde68cfc6fee3c20d282d6690f2569e2fffa/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4ffde68cfc6fee3c20d282d6690f2569e2fffa/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3a4ffde68cfc6fee3c20d282d6690f2569e2fffa", "patch": "@@ -1880,30 +1880,31 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_486 (1<<PROCESSOR_I486)\n #define m_PENT (1<<PROCESSOR_PENTIUM)\n #define m_PPRO (1<<PROCESSOR_PENTIUMPRO)\n-#define m_PENT4  (1<<PROCESSOR_PENTIUM4)\n-#define m_NOCONA  (1<<PROCESSOR_NOCONA)\n-#define m_CORE2_32  (1<<PROCESSOR_CORE2_32)\n-#define m_CORE2_64  (1<<PROCESSOR_CORE2_64)\n-#define m_COREI7_32  (1<<PROCESSOR_COREI7_32)\n-#define m_COREI7_64  (1<<PROCESSOR_COREI7_64)\n-#define m_COREI7  (m_COREI7_32 | m_COREI7_64)\n-#define m_CORE2I7_32  (m_CORE2_32 | m_COREI7_32)\n-#define m_CORE2I7_64  (m_CORE2_64 | m_COREI7_64)\n-#define m_CORE2I7  (m_CORE2I7_32 | m_CORE2I7_64)\n-#define m_ATOM  (1<<PROCESSOR_ATOM)\n-\n-#define m_GEODE  (1<<PROCESSOR_GEODE)\n-#define m_K6  (1<<PROCESSOR_K6)\n-#define m_K6_GEODE  (m_K6 | m_GEODE)\n-#define m_K8  (1<<PROCESSOR_K8)\n-#define m_ATHLON  (1<<PROCESSOR_ATHLON)\n-#define m_ATHLON_K8  (m_K8 | m_ATHLON)\n-#define m_AMDFAM10  (1<<PROCESSOR_AMDFAM10)\n-#define m_BDVER1  (1<<PROCESSOR_BDVER1)\n-#define m_BDVER2  (1<<PROCESSOR_BDVER2)\n-#define m_BTVER1  (1<<PROCESSOR_BTVER1)\n-#define m_BDVER\t (m_BDVER1 | m_BDVER2)\n-#define m_AMD_MULTIPLE  (m_ATHLON_K8 | m_AMDFAM10 | m_BDVER | m_BTVER1)\n+#define m_PENT4 (1<<PROCESSOR_PENTIUM4)\n+#define m_NOCONA (1<<PROCESSOR_NOCONA)\n+#define m_P4_NOCONA (m_PENT4 | m_NOCONA)\n+#define m_CORE2_32 (1<<PROCESSOR_CORE2_32)\n+#define m_CORE2_64 (1<<PROCESSOR_CORE2_64)\n+#define m_COREI7_32 (1<<PROCESSOR_COREI7_32)\n+#define m_COREI7_64 (1<<PROCESSOR_COREI7_64)\n+#define m_COREI7 (m_COREI7_32 | m_COREI7_64)\n+#define m_CORE2I7_32 (m_CORE2_32 | m_COREI7_32)\n+#define m_CORE2I7_64 (m_CORE2_64 | m_COREI7_64)\n+#define m_CORE2I7 (m_CORE2I7_32 | m_CORE2I7_64)\n+#define m_ATOM (1<<PROCESSOR_ATOM)\n+\n+#define m_GEODE (1<<PROCESSOR_GEODE)\n+#define m_K6 (1<<PROCESSOR_K6)\n+#define m_K6_GEODE (m_K6 | m_GEODE)\n+#define m_K8 (1<<PROCESSOR_K8)\n+#define m_ATHLON (1<<PROCESSOR_ATHLON)\n+#define m_ATHLON_K8 (m_K8 | m_ATHLON)\n+#define m_AMDFAM10 (1<<PROCESSOR_AMDFAM10)\n+#define m_BDVER1 (1<<PROCESSOR_BDVER1)\n+#define m_BDVER2 (1<<PROCESSOR_BDVER2)\n+#define m_BDVER\t(m_BDVER1 | m_BDVER2)\n+#define m_BTVER1 (1<<PROCESSOR_BTVER1)\n+#define m_AMD_MULTIPLE (m_ATHLON_K8 | m_AMDFAM10 | m_BDVER | m_BTVER1)\n \n #define m_GENERIC32 (1<<PROCESSOR_GENERIC32)\n #define m_GENERIC64 (1<<PROCESSOR_GENERIC64)\n@@ -1922,18 +1923,16 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n      negatively, so enabling for Generic64 seems like good code size\n      tradeoff.  We can't enable it for 32bit generic because it does not\n      work well with PPro base chips.  */\n-  m_386 | m_K6_GEODE | m_AMD_MULTIPLE | m_CORE2I7_64 | m_GENERIC64,\n+  m_386 | m_CORE2I7_64 | m_K6_GEODE | m_AMD_MULTIPLE | m_GENERIC64,\n \n   /* X86_TUNE_PUSH_MEMORY */\n-  m_386 | m_K6_GEODE | m_AMD_MULTIPLE | m_PENT4\n-  | m_NOCONA | m_CORE2I7 | m_GENERIC,\n+  m_386 | m_P4_NOCONA | m_CORE2I7 | m_K6_GEODE | m_AMD_MULTIPLE | m_GENERIC,\n \n   /* X86_TUNE_ZERO_EXTEND_WITH_AND */\n   m_486 | m_PENT,\n \n   /* X86_TUNE_UNROLL_STRLEN */\n-  m_486 | m_PENT | m_ATOM | m_PPRO | m_AMD_MULTIPLE | m_K6\n-  | m_CORE2I7 | m_GENERIC,\n+  m_486 | m_PENT | m_PPRO | m_ATOM | m_CORE2I7 | m_K6 | m_AMD_MULTIPLE | m_GENERIC,\n \n   /* X86_TUNE_BRANCH_PREDICTION_HINTS: Branch hints were put in P4 based\n      on simulation result. But after P4 was made, no performance benefit\n@@ -1945,13 +1944,11 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   ~m_386,\n \n   /* X86_TUNE_USE_SAHF */\n-  m_ATOM | m_PPRO | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER1\n-  | m_PENT4 | m_NOCONA | m_CORE2I7 | m_GENERIC,\n+  m_PPRO | m_P4_NOCONA | m_CORE2I7 | m_ATOM | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER1 | m_GENERIC,\n \n   /* X86_TUNE_MOVX: Enable to zero extend integer registers to avoid\n      partial dependencies.  */\n-  m_AMD_MULTIPLE | m_ATOM | m_PPRO | m_PENT4 | m_NOCONA\n-  | m_CORE2I7 | m_GENERIC | m_GEODE /* m_386 | m_K6 */,\n+  m_PPRO | m_P4_NOCONA | m_CORE2I7 | m_ATOM | m_GEODE | m_AMD_MULTIPLE  | m_GENERIC,\n \n   /* X86_TUNE_PARTIAL_REG_STALL: We probably ought to watch for partial\n      register stalls on Generic32 compilation setting as well.  However\n@@ -1970,13 +1967,13 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   m_386 | m_486 | m_K6_GEODE,\n \n   /* X86_TUNE_USE_SIMODE_FIOP */\n-  ~(m_PPRO | m_AMD_MULTIPLE | m_PENT | m_ATOM | m_CORE2I7 | m_GENERIC),\n+  ~(m_PENT | m_PPRO | m_CORE2I7 | m_ATOM | m_AMD_MULTIPLE | m_GENERIC),\n \n   /* X86_TUNE_USE_MOV0 */\n   m_K6,\n \n   /* X86_TUNE_USE_CLTD */\n-  ~(m_PENT | m_ATOM | m_K6 | m_CORE2I7 | m_GENERIC),\n+  ~(m_PENT | m_CORE2I7 | m_ATOM | m_K6 | m_GENERIC),\n \n   /* X86_TUNE_USE_XCHGB: Use xchgb %rh,%rl instead of rolw/rorw $8,rx.  */\n   m_PENT4,\n@@ -1991,14 +1988,13 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   ~(m_PENT | m_PPRO),\n \n   /* X86_TUNE_PROMOTE_QIMODE */\n-  m_K6_GEODE | m_PENT | m_ATOM | m_386 | m_486 | m_AMD_MULTIPLE\n-  | m_CORE2I7 | m_GENERIC /* | m_PENT4 ? */,\n+  m_386 | m_486 | m_PENT | m_CORE2I7 | m_ATOM | m_K6_GEODE | m_AMD_MULTIPLE | m_GENERIC,\n \n   /* X86_TUNE_FAST_PREFIX */\n-  ~(m_PENT | m_486 | m_386),\n+  ~(m_386 | m_486 | m_PENT),\n \n   /* X86_TUNE_SINGLE_STRINGOP */\n-  m_386 | m_PENT4 | m_NOCONA,\n+  m_386 | m_P4_NOCONA,\n \n   /* X86_TUNE_QIMODE_MATH */\n   ~0,\n@@ -2033,11 +2029,10 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n \n   /* X86_TUNE_INTEGER_DFMODE_MOVES: Enable if integer moves are preferred\n      for DFmode copies */\n-  ~(m_AMD_MULTIPLE | m_ATOM | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2I7\n-    | m_GENERIC | m_GEODE),\n+  ~(m_PPRO | m_P4_NOCONA | m_CORE2I7 | m_ATOM | m_GEODE | m_AMD_MULTIPLE | m_ATOM | m_GENERIC),\n \n   /* X86_TUNE_PARTIAL_REG_DEPENDENCY */\n-  m_AMD_MULTIPLE | m_ATOM | m_PENT4 | m_NOCONA | m_CORE2I7 | m_GENERIC,\n+  m_P4_NOCONA | m_CORE2I7 | m_ATOM | m_AMD_MULTIPLE | m_GENERIC,\n \n   /* X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY: In the Generic model we have a\n      conflict here in between PPro/Pentium4 based chips that thread 128bit\n@@ -2048,14 +2043,13 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n      shows that disabling this option on P4 brings over 20% SPECfp regression,\n      while enabling it on K8 brings roughly 2.4% regression that can be partly\n      masked by careful scheduling of moves.  */\n-  m_ATOM | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2I7 | m_GENERIC | m_AMDFAM10\n-  | m_BDVER,\n+  m_PPRO | m_P4_NOCONA | m_CORE2I7 | m_ATOM  | m_AMDFAM10 | m_BDVER | m_GENERIC,\n \n   /* X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL */\n-  m_AMDFAM10 | m_BDVER | m_BTVER1 | m_COREI7,\n+  m_COREI7 | m_AMDFAM10 | m_BDVER | m_BTVER1,\n \n   /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL */\n-  m_BDVER | m_COREI7,\n+  m_COREI7 | m_BDVER,\n \n   /* X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL */\n   m_BDVER ,\n@@ -2070,16 +2064,16 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   m_AMD_MULTIPLE,\n \n   /* X86_TUNE_SSE_LOAD0_BY_PXOR */\n-  m_PPRO | m_PENT4 | m_NOCONA,\n+  m_PPRO | m_P4_NOCONA,\n \n   /* X86_TUNE_MEMORY_MISMATCH_STALL */\n-  m_AMD_MULTIPLE | m_ATOM | m_PENT4 | m_NOCONA | m_CORE2I7 | m_GENERIC,\n+  m_P4_NOCONA | m_CORE2I7 | m_ATOM | m_AMD_MULTIPLE | m_GENERIC,\n \n   /* X86_TUNE_PROLOGUE_USING_MOVE */\n-  m_ATHLON_K8 | m_ATOM | m_PPRO | m_CORE2I7 | m_GENERIC,\n+  m_PPRO | m_CORE2I7 | m_ATOM | m_ATHLON_K8 | m_GENERIC,\n \n   /* X86_TUNE_EPILOGUE_USING_MOVE */\n-  m_ATHLON_K8 | m_ATOM | m_PPRO | m_CORE2I7 | m_GENERIC,\n+  m_PPRO | m_CORE2I7 | m_ATOM | m_ATHLON_K8 | m_GENERIC,\n \n   /* X86_TUNE_SHIFT1 */\n   ~m_486,\n@@ -2095,46 +2089,43 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n \n   /* X86_TUNE_FOUR_JUMP_LIMIT: Some CPU cores are not able to predict more\n      than 4 branch instructions in the 16 byte window.  */\n-  m_ATOM | m_PPRO | m_AMD_MULTIPLE | m_PENT4 | m_NOCONA | m_CORE2I7\n-  | m_GENERIC,\n+  m_PPRO | m_P4_NOCONA | m_CORE2I7 | m_ATOM | m_AMD_MULTIPLE | m_GENERIC,\n \n   /* X86_TUNE_SCHEDULE */\n-  m_PPRO | m_AMD_MULTIPLE | m_K6_GEODE | m_PENT | m_ATOM | m_CORE2I7\n-  | m_GENERIC,\n+  m_PENT | m_PPRO | m_CORE2I7 | m_ATOM | m_K6_GEODE | m_AMD_MULTIPLE | m_GENERIC,\n \n   /* X86_TUNE_USE_BT */\n-  m_AMD_MULTIPLE | m_ATOM | m_CORE2I7 | m_GENERIC,\n+  m_CORE2I7 | m_ATOM | m_AMD_MULTIPLE | m_GENERIC,\n \n   /* X86_TUNE_USE_INCDEC */\n-  ~(m_PENT4 | m_NOCONA | m_CORE2I7 | m_GENERIC | m_ATOM),\n+  ~(m_P4_NOCONA | m_CORE2I7 | m_ATOM | m_GENERIC),\n \n   /* X86_TUNE_PAD_RETURNS */\n-  m_AMD_MULTIPLE | m_CORE2I7 | m_GENERIC,\n+  m_CORE2I7 | m_AMD_MULTIPLE | m_GENERIC,\n \n   /* X86_TUNE_PAD_SHORT_FUNCTION: Pad short funtion.  */\n   m_ATOM,\n \n   /* X86_TUNE_EXT_80387_CONSTANTS */\n-  m_K6_GEODE | m_ATHLON_K8 | m_ATOM | m_PENT4 | m_NOCONA | m_PPRO\n-  | m_CORE2I7 | m_GENERIC,\n+  m_PPRO | m_P4_NOCONA | m_CORE2I7 | m_ATOM | m_K6_GEODE | m_ATHLON_K8 | m_GENERIC,\n \n   /* X86_TUNE_SHORTEN_X87_SSE */\n   ~m_K8,\n \n   /* X86_TUNE_AVOID_VECTOR_DECODE */\n-  m_K8 | m_CORE2I7_64 | m_GENERIC64,\n+  m_CORE2I7_64 | m_K8 | m_GENERIC64,\n \n   /* X86_TUNE_PROMOTE_HIMODE_IMUL: Modern CPUs have same latency for HImode\n      and SImode multiply, but 386 and 486 do HImode multiply faster.  */\n   ~(m_386 | m_486),\n \n   /* X86_TUNE_SLOW_IMUL_IMM32_MEM: Imul of 32-bit constant and memory is\n      vector path on AMD machines.  */\n-  m_K8 | m_CORE2I7_64 | m_GENERIC64 | m_AMDFAM10 | m_BDVER | m_BTVER1,\n+  m_CORE2I7_64 | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER1 | m_GENERIC64,\n \n   /* X86_TUNE_SLOW_IMUL_IMM8: Imul of 8-bit constant is vector path on AMD\n      machines.  */\n-  m_K8 | m_CORE2I7_64 | m_GENERIC64 | m_AMDFAM10 | m_BDVER | m_BTVER1,\n+  m_CORE2I7_64 | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER1 | m_GENERIC64,\n \n   /* X86_TUNE_MOVE_M1_VIA_OR: On pentiums, it is faster to load -1 via OR\n      than a MOV.  */\n@@ -2151,7 +2142,7 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n \n   /* X86_TUNE_USE_VECTOR_FP_CONVERTS: Prefer vector packed SSE conversion\n      from FP to FP. */\n-  m_AMDFAM10 | m_CORE2I7 | m_GENERIC,\n+  m_CORE2I7 | m_AMDFAM10 | m_GENERIC,\n \n   /* X86_TUNE_USE_VECTOR_CONVERTS: Prefer vector packed SSE conversion\n      from integer to FP. */\n@@ -2160,7 +2151,7 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   /* X86_TUNE_FUSE_CMP_AND_BRANCH: Fuse a compare or test instruction\n      with a subsequent conditional jump instruction into a single\n      compare-and-branch uop.  */\n-  m_BDVER ,\n+  m_BDVER,\n \n   /* X86_TUNE_OPT_AGU: Optimize for Address Generation Unit. This flag\n      will impact LEA instruction selection. */\n@@ -2203,12 +2194,10 @@ static unsigned int initial_ix86_arch_features[X86_ARCH_LAST] = {\n };\n \n static const unsigned int x86_accumulate_outgoing_args\n-  = m_AMD_MULTIPLE | m_ATOM | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2I7\n-    | m_GENERIC;\n+  = m_PPRO | m_P4_NOCONA | m_ATOM | m_CORE2I7 | m_AMD_MULTIPLE | m_GENERIC;\n \n static const unsigned int x86_arch_always_fancy_math_387\n-  = m_PENT | m_ATOM | m_PPRO | m_AMD_MULTIPLE | m_PENT4\n-    | m_NOCONA | m_CORE2I7 | m_GENERIC;\n+  = m_PENT | m_PPRO | m_P4_NOCONA | m_CORE2I7 | m_ATOM | m_AMD_MULTIPLE | m_GENERIC;\n \n static const unsigned int x86_avx256_split_unaligned_load\n   = m_COREI7 | m_GENERIC;"}, {"sha": "0451c678f8779a9c5e3c9f932e318c5fa1848c77", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4ffde68cfc6fee3c20d282d6690f2569e2fffa/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4ffde68cfc6fee3c20d282d6690f2569e2fffa/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3a4ffde68cfc6fee3c20d282d6690f2569e2fffa", "patch": "@@ -10963,9 +10963,7 @@\n    (set_attr \"modrm\" \"0\")])\n \n (define_expand \"indirect_jump\"\n-  [(set (pc) (match_operand 0 \"nonimmediate_operand\" \"\"))]\n-  \"\"\n-  \"\")\n+  [(set (pc) (match_operand 0 \"nonimmediate_operand\" \"\"))])\n \n (define_insn \"*indirect_jump\"\n   [(set (pc) (match_operand:P 0 \"nonimmediate_operand\" \"rm\"))]"}]}