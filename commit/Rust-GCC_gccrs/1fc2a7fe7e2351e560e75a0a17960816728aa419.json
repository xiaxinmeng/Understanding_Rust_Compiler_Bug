{"sha": "1fc2a7fe7e2351e560e75a0a17960816728aa419", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZjMmE3ZmU3ZTIzNTFlNTYwZTc1YTBhMTc5NjA4MTY3MjhhYTQxOQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-27T13:17:34Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-27T13:17:34Z"}, "message": "Stop shadowing of hir mappings with substitution mappings\n\nName shadowing in C++ is annoying, it can cause subtle errors like here,\nthe mappings which are substitition mappings, for example from an impl\nblock, impl<X,Y> Foo(X), the type resolver here looks for any unconstrained\ntype parameters by passing the relative mappings which can be null. Since\nthe util mappings class shadowed this we never actually got this hidden\nnullptr segv. For QualifiedTypes we need to resolve the path similar to\npath expressions and we will need to be able to access the shadowed util\nhir mappings class.", "tree": {"sha": "f8347335eef7a33e15de18afc2d223566784a9c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8347335eef7a33e15de18afc2d223566784a9c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fc2a7fe7e2351e560e75a0a17960816728aa419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc2a7fe7e2351e560e75a0a17960816728aa419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc2a7fe7e2351e560e75a0a17960816728aa419", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc2a7fe7e2351e560e75a0a17960816728aa419/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b42381685595c34f21d5ce9ef1c31ceac76720d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b42381685595c34f21d5ce9ef1c31ceac76720d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b42381685595c34f21d5ce9ef1c31ceac76720d"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "15eab25f153ac05084d7fa55fba1ef173b54c1f9", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc2a7fe7e2351e560e75a0a17960816728aa419/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc2a7fe7e2351e560e75a0a17960816728aa419/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=1fc2a7fe7e2351e560e75a0a17960816728aa419", "patch": "@@ -60,9 +60,10 @@ class TypeCheckType : public TypeCheckBase\n public:\n   static TyTy::BaseType *\n   Resolve (HIR::Type *type,\n-\t   std::vector<TyTy::SubstitutionParamMapping> *mappings = nullptr)\n+\t   std::vector<TyTy::SubstitutionParamMapping> *subst_mappings\n+\t   = nullptr)\n   {\n-    TypeCheckType resolver (mappings);\n+    TypeCheckType resolver (subst_mappings);\n     type->accept_vis (resolver);\n \n     if (resolver.translated == nullptr)\n@@ -210,20 +211,24 @@ class TypeCheckType : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckType (std::vector<TyTy::SubstitutionParamMapping> *mappings)\n-    : TypeCheckBase (), mappings (mappings), translated (nullptr)\n+  TypeCheckType (std::vector<TyTy::SubstitutionParamMapping> *subst_mappings)\n+    : TypeCheckBase (), subst_mappings (subst_mappings), translated (nullptr)\n   {}\n \n   void\n   check_for_unconstrained (std::vector<std::unique_ptr<HIR::Type>> &type_args)\n   {\n     std::map<std::string, Location> param_location_map;\n     std::set<std::string> param_tys;\n-    for (auto &mapping : *mappings)\n+\n+    if (subst_mappings != nullptr)\n       {\n-\tstd::string sym = mapping.get_param_ty ()->get_symbol ();\n-\tparam_tys.insert (sym);\n-\tparam_location_map[sym] = mapping.get_generic_param ().get_locus ();\n+\tfor (auto &mapping : *subst_mappings)\n+\t  {\n+\t    std::string sym = mapping.get_param_ty ()->get_symbol ();\n+\t    param_tys.insert (sym);\n+\t    param_location_map[sym] = mapping.get_generic_param ().get_locus ();\n+\t  }\n       }\n \n     std::set<std::string> args;\n@@ -241,7 +246,7 @@ class TypeCheckType : public TypeCheckBase\n       }\n   }\n \n-  std::vector<TyTy::SubstitutionParamMapping> *mappings;\n+  std::vector<TyTy::SubstitutionParamMapping> *subst_mappings;\n   TyTy::BaseType *translated;\n };\n "}]}