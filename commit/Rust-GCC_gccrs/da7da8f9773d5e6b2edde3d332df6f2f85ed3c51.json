{"sha": "da7da8f9773d5e6b2edde3d332df6f2f85ed3c51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE3ZGE4Zjk3NzNkNWU2YjJlZGRlM2QzMzJkZjZmMmY4NWVkM2M1MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-03-28T08:38:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-28T08:38:22Z"}, "message": "decl.c (end_java_method): Do not save and restore flag_non_call_exceptions.\n\n        * decl.c (end_java_method): Do not save and restore\n        flag_non_call_exceptions.\n        * parse.y (source_end_java_method): Likewise.\n        * lang.c (flag_exceptions): Don't declare.\n        (java_init_options): Set flag_non_call_exceptions.  Set\n        flag_exceptions here ...\n        (java_init): ... not here.\n\nFrom-SVN: r40921", "tree": {"sha": "961a35efbd1e3fc52963c3b678c4aa54dd5c7cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/961a35efbd1e3fc52963c3b678c4aa54dd5c7cfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51/comments", "author": null, "committer": null, "parents": [{"sha": "826840d96aa1722381e57d96df700528c4581c33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826840d96aa1722381e57d96df700528c4581c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/826840d96aa1722381e57d96df700528c4581c33"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "081dab16a930dbf03e7d75aff1313302015efbb3", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=da7da8f9773d5e6b2edde3d332df6f2f85ed3c51", "patch": "@@ -1,3 +1,13 @@\n+2001-03-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* decl.c (end_java_method): Do not save and restore\n+\tflag_non_call_exceptions.\n+\t* parse.y (source_end_java_method): Likewise.\n+\t* lang.c (flag_exceptions): Don't declare.\n+\t(java_init_options): Set flag_non_call_exceptions.  Set\n+\tflag_exceptions here ...\n+\t(java_init): ... not here.\n+\n 2001-03-27  Richard Henderson  <rth@redhat.com>\n \n \t* expr.c, parse.h: Use USING_SJLJ_EXCEPTIONS instead of"}, {"sha": "c81c342110455bea2255661572575c91d82fbcd5", "filename": "gcc/java/decl.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=da7da8f9773d5e6b2edde3d332df6f2f85ed3c51", "patch": "@@ -1827,7 +1827,6 @@ void\n end_java_method ()\n {\n   tree fndecl = current_function_decl;\n-  int flag_flag_non_call_exceptions = flag_non_call_exceptions;\n \n   expand_end_bindings (getdecls (), 1, 0);\n   /* pop out of function */\n@@ -1843,18 +1842,10 @@ end_java_method ()\n   /* Generate rtl for function exit.  */\n   expand_function_end (input_filename, lineno, 0);\n \n-  /* FIXME: If the current method contains any exception handlers,\n-     force flag_non_call_exceptions: this is necessary because signal\n-     handlers in libjava may throw exceptions.  This is far from being\n-     a perfect solution, but it's better than doing nothing at all.*/\n-  if (catch_clauses)\n-    flag_non_call_exceptions = 1;\n-\n   /* Run the optimizers and output assembler code for this function. */\n   rest_of_compilation (fndecl);\n \n   current_function_decl = NULL_TREE;\n-  flag_non_call_exceptions = flag_flag_non_call_exceptions;\n }\n \n /* Mark language-specific parts of T for garbage-collection.  */"}, {"sha": "2a3d5867ad3b3a53f16461436e6d6d350a815e2a", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=da7da8f9773d5e6b2edde3d332df6f2f85ed3c51", "patch": "@@ -150,10 +150,6 @@ int flag_extraneous_semicolon;\n /* When non zero, always check for a non gcj generated classes archive.  */\n int flag_force_classes_archive_check;\n \n-/* From gcc/flags.h, and indicates if exceptions are turned on or not.  */\n-\n-extern int flag_exceptions;\n-\n /* Table of language-dependent -f options.\n    STRING is the option name.  VARIABLE is the address of the variable.\n    ON_VALUE is the value to store in VARIABLE\n@@ -655,8 +651,6 @@ java_init ()\n   print_error_function = lang_print_error;\n   lang_expand_expr = java_lang_expand_expr;\n \n-  flag_exceptions = 1;\n-\n   /* Append to Gcc tree node definition arrays */\n \n   memcpy (tree_code_type + (int) LAST_AND_UNUSED_TREE_CODE,\n@@ -704,6 +698,8 @@ static void\n java_init_options ()\n {\n   flag_bounds_check = 1;\n+  flag_exceptions = 1;\n+  flag_non_call_exceptions = 1;\n }\n \n const char *"}, {"sha": "e09af7a8ebd91bf59c5ec417755efa6163188617", "filename": "gcc/java/parse.y", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=da7da8f9773d5e6b2edde3d332df6f2f85ed3c51", "patch": "@@ -7117,7 +7117,6 @@ static void\n source_end_java_method ()\n {\n   tree fndecl = current_function_decl;\n-  int flag_flag_non_call_exceptions = flag_non_call_exceptions;\n \n   if (!fndecl)\n     return;\n@@ -7153,20 +7152,12 @@ source_end_java_method ()\n       emit_handlers ();\n       expand_function_end (input_filename, lineno, 0);\n \n-      /* FIXME: If the current method contains any exception handlers,\n-\t force flag_non_call_exceptions: this is necessary because signal\n-\t handlers in libjava may throw exceptions.  This is far from being\n-\t a perfect solution, but it's better than doing nothing at all.*/\n-      if (catch_clauses)\n-\tflag_non_call_exceptions = 1;\n-\n       /* Run the optimizers and output assembler code for this function. */\n       rest_of_compilation (fndecl);\n     }\n \n   current_function_decl = NULL_TREE;\n   java_parser_context_restore_global ();\n-  flag_non_call_exceptions = flag_flag_non_call_exceptions;\n }\n \n /* Record EXPR in the current function block. Complements compound"}]}