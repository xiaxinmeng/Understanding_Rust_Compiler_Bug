{"sha": "5a0ed003f06f858e950ea3098e573d8d4361674e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEwZWQwMDNmMDZmODU4ZTk1MGVhMzA5OGU1NzNkOGQ0MzYxNjc0ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-04-17T05:16:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-04-17T05:16:07Z"}, "message": "tree-ssa-propagate.c (cfg_blocks_add): Insert blocks with fewer predecessors at head rather than tail.\n\n\t* tree-ssa-propagate.c (cfg_blocks_add): Insert blocks with fewer\n\tpredecessors at head rather than tail.\n\nFrom-SVN: r123906", "tree": {"sha": "0cf93f4213ae1d224aa2bd48a39f53f3538278de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cf93f4213ae1d224aa2bd48a39f53f3538278de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a0ed003f06f858e950ea3098e573d8d4361674e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0ed003f06f858e950ea3098e573d8d4361674e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a0ed003f06f858e950ea3098e573d8d4361674e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0ed003f06f858e950ea3098e573d8d4361674e/comments", "author": null, "committer": null, "parents": [{"sha": "591523164b128d507b9d9e22e1fd3be1b72fd943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591523164b128d507b9d9e22e1fd3be1b72fd943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591523164b128d507b9d9e22e1fd3be1b72fd943"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "a9f1ca548d28556e0b07aa1b0e54386902729837", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0ed003f06f858e950ea3098e573d8d4361674e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0ed003f06f858e950ea3098e573d8d4361674e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a0ed003f06f858e950ea3098e573d8d4361674e", "patch": "@@ -1,3 +1,8 @@\n+2007-04-16  Ian Lance Taylor  <iant@google.com>\n+\n+\t* tree-ssa-propagate.c (cfg_blocks_add): Insert blocks with fewer\n+\tpredecessors at head rather than tail.\n+\n 2007-04-16  Matthias Klose  <doko@debian.org>\n \n \t* gcc/config/alpha/linux.h (CPP_SPEC): Define."}, {"sha": "df31e25f8ff1c65e6343423e49e395d2fbdeaf2c", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0ed003f06f858e950ea3098e573d8d4361674e/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0ed003f06f858e950ea3098e573d8d4361674e/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=5a0ed003f06f858e950ea3098e573d8d4361674e", "patch": "@@ -1,5 +1,5 @@\n /* Generic SSA value propagation engine.\n-   Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n    This file is part of GCC.\n@@ -176,6 +176,8 @@ cfg_blocks_empty_p (void)\n static void \n cfg_blocks_add (basic_block bb)\n {\n+  bool head = false;\n+\n   gcc_assert (bb != ENTRY_BLOCK_PTR && bb != EXIT_BLOCK_PTR);\n   gcc_assert (!TEST_BIT (bb_in_list, bb->index));\n \n@@ -198,12 +200,26 @@ cfg_blocks_add (basic_block bb)\n \t  cfg_blocks_head = 0;\n \t  VEC_safe_grow (basic_block, heap, cfg_blocks, 2 * cfg_blocks_tail);\n \t}\n-      else\n+      /* Minor optimization: we prefer to see blocks with more\n+\t predecessors later, because there is more of a chance that\n+\t the incoming edges will be executable.  */\n+      else if (EDGE_COUNT (bb->preds)\n+\t       >= EDGE_COUNT (VEC_index (basic_block, cfg_blocks,\n+\t\t\t\t\t cfg_blocks_head)->preds))\n \tcfg_blocks_tail = ((cfg_blocks_tail + 1)\n \t\t\t   % VEC_length (basic_block, cfg_blocks));\n+      else\n+\t{\n+\t  if (cfg_blocks_head == 0)\n+\t    cfg_blocks_head = VEC_length (basic_block, cfg_blocks);\n+\t  --cfg_blocks_head;\n+\t  head = true;\n+\t}\n     }\n \n-  VEC_replace (basic_block, cfg_blocks, cfg_blocks_tail, bb);\n+  VEC_replace (basic_block, cfg_blocks,\n+\t       head ? cfg_blocks_head : cfg_blocks_tail,\n+\t       bb);\n   SET_BIT (bb_in_list, bb->index);\n }\n "}]}