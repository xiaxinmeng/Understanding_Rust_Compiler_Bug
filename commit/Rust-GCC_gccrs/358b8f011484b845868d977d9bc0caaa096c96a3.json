{"sha": "358b8f011484b845868d977d9bc0caaa096c96a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU4YjhmMDExNDg0Yjg0NTg2OGQ5NzdkOWJjMGNhYWEwOTZjOTZhMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2003-07-11T21:04:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-07-11T21:04:56Z"}, "message": "optabs.c (prepare_cmp_insn): Try cmpmemM first if it exists, then fall back to cmpstrM.\n\n\t* optabs.c (prepare_cmp_insn): Try cmpmemM first if it exists,\n\tthen fall back to cmpstrM.\n\t* builtins.c (expand_builtin_memcmp): Likewise.\n\t* config/s390/s390-protos.h (s390_expand_cmpstr): Rename to...\n\t(s390_expand_cmpmem): ... this.\n\t* config/s390/s390.md (cmpmemdi, cmpmemsi, cmpmem_short_64,\n\tcmpmem_short_31, cmpmem_long_64, cmpmem_long_31): Renamed\n\tfrom cmpstr* patterns.  Rename call to s390_expand_cmpstr\n\tto s390_expand_cmpmem.\n\t* config/s390/s390.c (s390_expand_cmpstr): Rename to...\n\t(s390_expand_cmpstr): ... this.  Rename cmpstr* instructions\n\tto cmpmem*.\n\t* config/i370/i370.md (cmpmemsi, cmpmemsi_1): Renamed from\n\tcmpstr* patterns.\n\t* doc/md.texi (cmpstrM): Describe as String compare insn, not\n\tBlock compare insn.\n\t(cmpmemM): Add.\n\n\t* gcc.dg/20030711-1.c: New test.\n\nFrom-SVN: r69243", "tree": {"sha": "a3656da4466c54cd571525ec90e2a1bf57bccbda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3656da4466c54cd571525ec90e2a1bf57bccbda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/358b8f011484b845868d977d9bc0caaa096c96a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/358b8f011484b845868d977d9bc0caaa096c96a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/358b8f011484b845868d977d9bc0caaa096c96a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/358b8f011484b845868d977d9bc0caaa096c96a3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8634e925a9f53c086210ee461a0002278bc5c3d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8634e925a9f53c086210ee461a0002278bc5c3d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8634e925a9f53c086210ee461a0002278bc5c3d2"}], "stats": {"total": 158, "additions": 135, "deletions": 23}, "files": [{"sha": "2c60ad5cc7b98bc51d0019f19341733f85e05b3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=358b8f011484b845868d977d9bc0caaa096c96a3", "patch": "@@ -1,3 +1,23 @@\n+2003-07-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* optabs.c (prepare_cmp_insn): Try cmpmemM first if it exists,\n+\tthen fall back to cmpstrM.\n+\t* builtins.c (expand_builtin_memcmp): Likewise.\n+\t* config/s390/s390-protos.h (s390_expand_cmpstr): Rename to...\n+\t(s390_expand_cmpmem): ... this.\n+\t* config/s390/s390.md (cmpmemdi, cmpmemsi, cmpmem_short_64,\n+\tcmpmem_short_31, cmpmem_long_64, cmpmem_long_31): Renamed\n+\tfrom cmpstr* patterns.  Rename call to s390_expand_cmpstr\n+\tto s390_expand_cmpmem.\n+\t* config/s390/s390.c (s390_expand_cmpstr): Rename to...\n+\t(s390_expand_cmpstr): ... this.  Rename cmpstr* instructions\n+\tto cmpmem*.\n+\t* config/i370/i370.md (cmpmemsi, cmpmemsi_1): Renamed from\n+\tcmpstr* patterns.\n+\t* doc/md.texi (cmpstrM): Describe as String compare insn, not\n+\tBlock compare insn.\n+\t(cmpmemM): Add.\n+\n 2003-07-11  Loren James Rittle  <ljrittle@acm.org>\n \n \t* config/i386/freebsd.h (SET_ASM_OP): Remove."}, {"sha": "90cd6acd1655dc98300b6a9ee32567716f36e13f", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=358b8f011484b845868d977d9bc0caaa096c96a3", "patch": "@@ -3196,7 +3196,7 @@ expand_builtin_memcmp (tree exp ATTRIBUTE_UNUSED, tree arglist, rtx target,\n       return expand_expr (result, target, mode, EXPAND_NORMAL);\n     }\n \n-#ifdef HAVE_cmpstrsi\n+#if defined HAVE_cmpmemsi || defined HAVE_cmpstrsi\n   {\n     rtx arg1_rtx, arg2_rtx, arg3_rtx;\n     rtx result;\n@@ -3206,8 +3206,19 @@ expand_builtin_memcmp (tree exp ATTRIBUTE_UNUSED, tree arglist, rtx target,\n       = get_pointer_alignment (arg1, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n     int arg2_align\n       = get_pointer_alignment (arg2, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n-    enum machine_mode insn_mode\n-      = insn_data[(int) CODE_FOR_cmpstrsi].operand[0].mode;\n+    enum machine_mode insn_mode;\n+\n+#ifdef HAVE_cmpmemsi\n+    if (HAVE_cmpmemsi)\n+      insn_mode = insn_data[(int) CODE_FOR_cmpmemsi].operand[0].mode;\n+    else\n+#endif\n+#ifdef HAVE_cmpstrsi\n+    if (HAVE_cmpstrsi)\n+      insn_mode = insn_data[(int) CODE_FOR_cmpstrsi].operand[0].mode;\n+    else\n+#endif\n+      return 0;     \n \n     /* If we don't have POINTER_TYPE, call the function.  */\n     if (arg1_align == 0 || arg2_align == 0)\n@@ -3223,11 +3234,19 @@ expand_builtin_memcmp (tree exp ATTRIBUTE_UNUSED, tree arglist, rtx target,\n     arg1_rtx = get_memory_rtx (arg1);\n     arg2_rtx = get_memory_rtx (arg2);\n     arg3_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n-    if (!HAVE_cmpstrsi)\n-      insn = NULL_RTX;\n+#ifdef HAVE_cmpmemsi\n+    if (HAVE_cmpmemsi)\n+      insn = gen_cmpmemsi (result, arg1_rtx, arg2_rtx, arg3_rtx,\n+\t\t\t   GEN_INT (MIN (arg1_align, arg2_align)));\n     else\n+#endif\n+#ifdef HAVE_cmpstrsi\n+    if (HAVE_cmpstrsi)\n       insn = gen_cmpstrsi (result, arg1_rtx, arg2_rtx, arg3_rtx,\n \t\t\t   GEN_INT (MIN (arg1_align, arg2_align)));\n+    else\n+#endif\n+      abort ();\n \n     if (insn)\n       emit_insn (insn);"}, {"sha": "081c62dd8fa278ca44a2db5ff0bf14603a3c7252", "filename": "gcc/config/i370/i370.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Fconfig%2Fi370%2Fi370.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Fconfig%2Fi370%2Fi370.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.md?ref=358b8f011484b845868d977d9bc0caaa096c96a3", "patch": "@@ -474,10 +474,10 @@ check_label_emit ();\n )\n \n ;\n-; cmpstrsi instruction pattern(s).\n+; cmpmemsi instruction pattern(s).\n ;\n \n-(define_expand \"cmpstrsi\"\n+(define_expand \"cmpmemsi\"\n   [(set (match_operand:SI 0 \"general_operand\" \"\")\n \t  (compare (match_operand:BLK 1 \"general_operand\" \"\")\n \t\t   (match_operand:BLK 2 \"general_operand\" \"\")))\n@@ -545,7 +545,7 @@ check_label_emit ();\n         emit_move_insn (gen_rtx_SUBREG (SImode, reg2, GET_MODE_SIZE (SImode)), len);\n \n         /* Compare! */\n-        emit_insn (gen_cmpstrsi_1 (result, reg1, reg2));\n+        emit_insn (gen_cmpmemsi_1 (result, reg1, reg2));\n     }\n   DONE;\n }\")\n@@ -569,7 +569,7 @@ check_label_emit ();\n \n ; Compare a block that is larger than 255 bytes in length.\n \n-(define_insn \"cmpstrsi_1\"\n+(define_insn \"cmpmemsi_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+d\")\n         (compare\n         (mem:BLK (subreg:SI (match_operand:DI 1 \"register_operand\" \"+d\") 0))"}, {"sha": "3d3f53a4bc2f4d8c6a0a7c3f4e68250c3c288b22", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=358b8f011484b845868d977d9bc0caaa096c96a3", "patch": "@@ -68,7 +68,7 @@ extern void emit_symbolic_move PARAMS ((rtx *));\n extern void s390_load_address PARAMS ((rtx, rtx));\n extern void s390_expand_movstr PARAMS ((rtx, rtx, rtx));\n extern void s390_expand_clrstr PARAMS ((rtx, rtx));\n-extern void s390_expand_cmpstr PARAMS ((rtx, rtx, rtx, rtx));\n+extern void s390_expand_cmpmem PARAMS ((rtx, rtx, rtx, rtx));\n extern rtx s390_return_addr_rtx PARAMS ((int, rtx));\n \n extern void s390_output_symbolic_const PARAMS ((FILE *, rtx));"}, {"sha": "07d30326a9e29deca40865f4472de34003a9424d", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=358b8f011484b845868d977d9bc0caaa096c96a3", "patch": "@@ -3116,16 +3116,16 @@ s390_expand_clrstr (dst, len)\n    and return the result in TARGET.  */\n \n void\n-s390_expand_cmpstr (target, op0, op1, len)\n+s390_expand_cmpmem (target, op0, op1, len)\n      rtx target;\n      rtx op0;\n      rtx op1;\n      rtx len;\n {\n   rtx (*gen_short) PARAMS ((rtx, rtx, rtx)) = \n-    TARGET_64BIT ? gen_cmpstr_short_64 : gen_cmpstr_short_31;\n+    TARGET_64BIT ? gen_cmpmem_short_64 : gen_cmpmem_short_31;\n   rtx (*gen_long) PARAMS ((rtx, rtx, rtx, rtx)) = \n-    TARGET_64BIT ? gen_cmpstr_long_64 : gen_cmpstr_long_31;\n+    TARGET_64BIT ? gen_cmpmem_long_64 : gen_cmpmem_long_31;\n   rtx (*gen_result) PARAMS ((rtx)) =\n     GET_MODE (target) == DImode ? gen_cmpint_di : gen_cmpint_si;\n "}, {"sha": "fc1af11c7eff8948294b3e23dbe2e11f2ac13c0c", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=358b8f011484b845868d977d9bc0caaa096c96a3", "patch": "@@ -1958,33 +1958,33 @@\n    (set_attr \"length\"  \"8\")])\n \n ;\n-; cmpstrM instruction pattern(s).\n+; cmpmemM instruction pattern(s).\n ;\n \n-(define_expand \"cmpstrdi\"\n+(define_expand \"cmpmemdi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (compare:DI (match_operand:BLK 1 \"memory_operand\" \"\")\n                     (match_operand:BLK 2 \"memory_operand\" \"\") ) )\n    (use (match_operand:DI 3 \"general_operand\" \"\"))\n    (use (match_operand:DI 4 \"\" \"\"))]\n   \"TARGET_64BIT\"\n-  \"s390_expand_cmpstr (operands[0], operands[1], \n+  \"s390_expand_cmpmem (operands[0], operands[1], \n                        operands[2], operands[3]); DONE;\")\n \n-(define_expand \"cmpstrsi\"\n+(define_expand \"cmpmemsi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n         (compare:SI (match_operand:BLK 1 \"memory_operand\" \"\")\n                     (match_operand:BLK 2 \"memory_operand\" \"\") ) )\n    (use (match_operand:SI 3 \"general_operand\" \"\"))\n    (use (match_operand:SI 4 \"\" \"\"))]\n   \"\"\n-  \"s390_expand_cmpstr (operands[0], operands[1], \n+  \"s390_expand_cmpmem (operands[0], operands[1], \n                        operands[2], operands[3]); DONE;\")\n \n ; Compare a block that is up to 256 bytes in length.\n ; The block length is taken as (operands[2] % 256) + 1.\n \n-(define_insn \"cmpstr_short_64\"\n+(define_insn \"cmpmem_short_64\"\n   [(set (reg:CCS 33)\n         (compare:CCS (match_operand:BLK 0 \"memory_operand\" \"=Q,Q\")\n                      (match_operand:BLK 1 \"memory_operand\" \"Q,Q\")))\n@@ -2012,7 +2012,7 @@\n    (set_attr \"atype\"   \"*,agen\")\n    (set_attr \"length\"  \"*,14\")])\n \n-(define_insn \"cmpstr_short_31\"\n+(define_insn \"cmpmem_short_31\"\n   [(set (reg:CCS 33)\n         (compare:CCS (match_operand:BLK 0 \"memory_operand\" \"=Q,Q\")\n                      (match_operand:BLK 1 \"memory_operand\" \"Q,Q\")))\n@@ -2042,7 +2042,7 @@\n \n ; Compare a block of arbitrary length.\n \n-(define_insn \"cmpstr_long_64\"\n+(define_insn \"cmpmem_long_64\"\n   [(clobber (match_operand:TI 0 \"register_operand\" \"=d\"))\n    (clobber (match_operand:TI 1 \"register_operand\" \"=d\"))\n    (set (reg:CCS 33)\n@@ -2055,7 +2055,7 @@\n   [(set_attr \"op_type\" \"RR\")\n    (set_attr \"type\"    \"vs\")])\n \n-(define_insn \"cmpstr_long_31\"\n+(define_insn \"cmpmem_long_31\"\n   [(clobber (match_operand:DI 0 \"register_operand\" \"=d\"))\n    (clobber (match_operand:DI 1 \"register_operand\" \"=d\"))\n    (set (reg:CCS 33)"}, {"sha": "780cbbe9a34c75604925d4b21f1a910a9c9fa2aa", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=358b8f011484b845868d977d9bc0caaa096c96a3", "patch": "@@ -2799,7 +2799,7 @@ The use for multiple @code{clrstr@var{m}} is as for @code{movstr@var{m}}.\n \n @cindex @code{cmpstr@var{m}} instruction pattern\n @item @samp{cmpstr@var{m}}\n-Block compare instruction, with five operands.  Operand 0 is the output;\n+String compare instruction, with five operands.  Operand 0 is the output;\n it has mode @var{m}.  The remaining four operands are like the operands\n of @samp{movstr@var{m}}.  The two memory blocks specified are compared\n byte by byte in lexicographic order starting at the beginning of each\n@@ -2809,6 +2809,16 @@ that may access an invalid page or segment and cause a fault.  The\n effect of the instruction is to store a value in operand 0 whose sign\n indicates the result of the comparison.\n \n+@cindex @code{cmpmem@var{m}} instruction pattern\n+@item @samp{cmpmem@var{m}}\n+Block compare instruction, with five operands like the operands\n+of @samp{cmpstr@var{m}}.  The two memory blocks specified are compared\n+byte by byte in lexicographic order starting at the beginning of each\n+block.  Unlike @samp{cmpstr@var{m}} the instruction can prefetch\n+any bytes in the two memory blocks.  The effect of the instruction is\n+to store a value in operand 0 whose sign indicates the result of the\n+comparison.\n+\n @cindex @code{strlen@var{m}} instruction pattern\n @item @samp{strlen@var{m}}\n Compute the length of a string, with three operands."}, {"sha": "3085b8529ca54e79d684ac7ae715b45ff7640cb1", "filename": "gcc/optabs.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=358b8f011484b845868d977d9bc0caaa096c96a3", "patch": "@@ -3579,6 +3579,40 @@ prepare_cmp_insn (rtx *px, rtx *py, enum rtx_code *pcomparison, rtx size,\n \n       if (size == 0)\n \tabort ();\n+#ifdef HAVE_cmpmemqi\n+      if (HAVE_cmpmemqi\n+\t  && GET_CODE (size) == CONST_INT\n+\t  && INTVAL (size) < (1 << GET_MODE_BITSIZE (QImode)))\n+\t{\n+\t  result_mode = insn_data[(int) CODE_FOR_cmpmemqi].operand[0].mode;\n+\t  result = gen_reg_rtx (result_mode);\n+\t  emit_insn (gen_cmpmemqi (result, x, y, size, opalign));\n+\t}\n+      else\n+#endif\n+#ifdef HAVE_cmpmemhi\n+      if (HAVE_cmpmemhi\n+\t  && GET_CODE (size) == CONST_INT\n+\t  && INTVAL (size) < (1 << GET_MODE_BITSIZE (HImode)))\n+\t{\n+\t  result_mode = insn_data[(int) CODE_FOR_cmpmemhi].operand[0].mode;\n+\t  result = gen_reg_rtx (result_mode);\n+\t  emit_insn (gen_cmpmemhi (result, x, y, size, opalign));\n+\t}\n+      else\n+#endif\n+#ifdef HAVE_cmpmemsi\n+      if (HAVE_cmpmemsi)\n+\t{\n+\t  result_mode = insn_data[(int) CODE_FOR_cmpmemsi].operand[0].mode;\n+\t  result = gen_reg_rtx (result_mode);\n+\t  size = protect_from_queue (size, 0);\n+\t  emit_insn (gen_cmpmemsi (result, x, y,\n+\t\t\t\t   convert_to_mode (SImode, size, 1),\n+\t\t\t\t   opalign));\n+\t}\n+      else\n+#endif\n #ifdef HAVE_cmpstrqi\n       if (HAVE_cmpstrqi\n \t  && GET_CODE (size) == CONST_INT"}, {"sha": "9550b62e69fb9abb824124473d3381e625331e27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=358b8f011484b845868d977d9bc0caaa096c96a3", "patch": "@@ -1,3 +1,7 @@\n+2003-07-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20030711-1.c: New test.\n+\n 2003-07-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/11050"}, {"sha": "25f515cbe50eeff9a698527fee3ad8de52bda125", "filename": "gcc/testsuite/gcc.dg/20030711-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Ftestsuite%2Fgcc.dg%2F20030711-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358b8f011484b845868d977d9bc0caaa096c96a3/gcc%2Ftestsuite%2Fgcc.dg%2F20030711-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030711-1.c?ref=358b8f011484b845868d977d9bc0caaa096c96a3", "patch": "@@ -0,0 +1,25 @@\n+/* Test whether strncmp has not been \"optimized\" into memcmp\n+   nor any code with memcmp semantics.  */\n+/* { dg-do run { target i?86-*-linux* x86_64-*-linux* ia64-*-linux* alpha*-*-linux* powerpc*-*-linux* s390*-*-linux* sparc*-*-linux* } } */\n+/* { dg-options \"-O2\" } */\n+#include <sys/mman.h>\n+#include <stdlib.h>\n+\n+void __attribute__((noinline)) test (const char *p)\n+{\n+  if (__builtin_strncmp (p, \"abcdefghijklmnopq\", 17) == 0)\n+    abort ();\n+}\n+\n+int main (void)\n+{\n+  char *p = mmap (NULL, 131072, PROT_READ | PROT_WRITE,\n+                  MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+  if (p == MAP_FAILED)\n+    return 0;\n+  if (munmap (p + 65536, 65536) < 0)\n+    return 0;\n+  __builtin_memcpy (p + 65536 - 5, \"abcd\", 5);\n+  test (p + 65536 - 5);\n+  return 0;\n+}"}]}