{"sha": "41c067e3f0a2464ca6ca57f4bf652e271899b07d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFjMDY3ZTNmMGEyNDY0Y2E2Y2E1N2Y0YmY2NTJlMjcxODk5YjA3ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-20T22:01:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-20T22:01:46Z"}, "message": "sparc.md (umulxhi_vis): Move around.\n\n\t* config/sparc/sparc.md (umulxhi_vis): Move around.\n\t(*umulxhi_sp64): Likewise.\n\t(umulxhi_v8plus): Likewise.\n\t(xmulx_vis): Likewise.\n\t(*xmulx_sp64): Likewise.\n\t(xmulx_v8plus): Likewise.\n\t(xmulxhi_vis): Likewise.\n\t(*xmulxhi_sp64): Likewise.\n\t(xmulxhi_v8plus): Likewise.\n\nFrom-SVN: r230681", "tree": {"sha": "7768501e6872bbe0fab44de4aae685d090001a8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7768501e6872bbe0fab44de4aae685d090001a8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41c067e3f0a2464ca6ca57f4bf652e271899b07d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c067e3f0a2464ca6ca57f4bf652e271899b07d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41c067e3f0a2464ca6ca57f4bf652e271899b07d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c067e3f0a2464ca6ca57f4bf652e271899b07d/comments", "author": null, "committer": null, "parents": [{"sha": "dcfa3345eb73a09b43b641e1df2015741220450b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfa3345eb73a09b43b641e1df2015741220450b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcfa3345eb73a09b43b641e1df2015741220450b"}], "stats": {"total": 335, "additions": 161, "deletions": 174}, "files": [{"sha": "659e6ba213b9ecb630849755d868d2eb3cf7be3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c067e3f0a2464ca6ca57f4bf652e271899b07d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c067e3f0a2464ca6ca57f4bf652e271899b07d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41c067e3f0a2464ca6ca57f4bf652e271899b07d", "patch": "@@ -1,3 +1,15 @@\n+2015-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.md (umulxhi_vis): Move around.\n+\t(*umulxhi_sp64): Likewise.\n+\t(umulxhi_v8plus): Likewise.\n+\t(xmulx_vis): Likewise.\n+\t(*xmulx_sp64): Likewise.\n+\t(xmulx_v8plus): Likewise.\n+\t(xmulxhi_vis): Likewise.\n+\t(*xmulxhi_sp64): Likewise.\n+\t(xmulxhi_v8plus): Likewise.\n+\n 2015-11-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR 62314"}, {"sha": "9cc74f12987c4c84a72158551b269f9178518db3", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 149, "deletions": 174, "changes": 323, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c067e3f0a2464ca6ca57f4bf652e271899b07d/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c067e3f0a2464ca6ca57f4bf652e271899b07d/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=41c067e3f0a2464ca6ca57f4bf652e271899b07d", "patch": "@@ -609,7 +609,7 @@\n   return \"fcmpq\\t%1, %2\";\n }\n   [(set_attr \"type\" \"fpcmp\")])\n-\f\n+\n ;; Next come the scc insns.\n \n ;; Note that the boolean result (operand 0) takes on DImode\n@@ -647,8 +647,6 @@\n   \"TARGET_FPU\"\n   { if (emit_scc_insn (operands)) DONE; else FAIL; })\n \n-\f\n-\n ;; Seq_special[_xxx] and sne_special[_xxx] clobber the CC reg, because they\n ;; generate addcc/subcc instructions.\n \n@@ -1137,7 +1135,7 @@\n \t\t\t (match_dup 0)))]\n   \"\")\n \n-\f\n+\n ;; These control RTL generation for conditional jump insns\n \n (define_expand \"cbranchcc4\"\n@@ -1318,7 +1316,6 @@\n \n ;; There are no 32 bit brreg insns.\n \n-;; XXX\n (define_insn \"*normal_int_branch_sp64\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"v9_register_compare_operator\"\n@@ -1335,7 +1332,6 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"branch_type\" \"reg\")])\n \n-;; XXX\n (define_insn \"*inverted_int_branch_sp64\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"v9_register_compare_operator\"\n@@ -2730,8 +2726,6 @@\n   DONE;\n })\n \n-;; Conditional move define_insns\n-\n (define_insn \"*mov<I:mode>_cc_v9\"\n   [(set (match_operand:I 0 \"register_operand\" \"=r\")\n \t(if_then_else:I (match_operator 1 \"comparison_operator\"\n@@ -2896,7 +2890,7 @@\n }\n   [(set_attr \"length\" \"2\")])\n \n-\f\n+\n ;; Zero-extension instructions\n \n ;; These patterns originally accepted general_operands, however, slightly\n@@ -4043,7 +4037,6 @@\n   [(set_attr \"type\" \"imul\")])\n \n ;; V8plus wide multiply.\n-;; XXX\n (define_insn \"muldi3_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n \t(mult:DI (match_operand:DI 1 \"arith_operand\" \"%r,0\")\n@@ -4094,7 +4087,6 @@\n \n ;; V9 puts the 64-bit product in a 64-bit register.  Only out or global\n ;; registers can hold 64-bit values in the V8plus environment.\n-;; XXX\n (define_insn \"mulsidi3_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=h,r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n@@ -4107,7 +4099,6 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2,3\")])\n \n-;; XXX\n (define_insn \"const_mulsidi3_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=h,r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n@@ -4120,7 +4111,6 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2,3\")])\n \n-;; XXX\n (define_insn \"*mulsidi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n@@ -4148,7 +4138,6 @@\n \n ;; Extra pattern, because sign_extend of a constant isn't valid.\n \n-;; XXX\n (define_insn \"const_mulsidi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n@@ -4203,7 +4192,6 @@\n     }\n })\n \n-;; XXX\n (define_insn \"smulsi3_highpart_v8plus\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h,r\")\n \t(truncate:SI\n@@ -4219,7 +4207,6 @@\n    (set_attr \"length\" \"2\")])\n \n ;; The combiner changes TRUNCATE in the previous pattern to SUBREG.\n-;; XXX\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h,r\")\n \t(subreg:SI\n@@ -4236,7 +4223,6 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n-;; XXX\n (define_insn \"const_smulsi3_highpart_v8plus\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h,r\")\n \t(truncate:SI\n@@ -4251,7 +4237,6 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n-;; XXX\n (define_insn \"*smulsi3_highpart_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(truncate:SI\n@@ -4263,7 +4248,6 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n-;; XXX\n (define_insn \"const_smulsi3_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(truncate:SI\n@@ -4301,7 +4285,6 @@\n     }\n })\n \n-;; XXX\n (define_insn \"umulsidi3_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=h,r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n@@ -4314,7 +4297,6 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2,3\")])\n \n-;; XXX\n (define_insn \"*umulsidi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n@@ -4342,7 +4324,6 @@\n \n ;; Extra pattern, because sign_extend of a constant isn't valid.\n \n-;; XXX\n (define_insn \"const_umulsidi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n@@ -4368,7 +4349,6 @@\n   \"umul\\t%1, %s2, %0\"\n   [(set_attr \"type\" \"imul\")])\n \n-;; XXX\n (define_insn \"const_umulsidi3_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=h,r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n@@ -4410,7 +4390,6 @@\n     }\n })\n \n-;; XXX\n (define_insn \"umulsi3_highpart_v8plus\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h,r\")\n \t(truncate:SI\n@@ -4425,7 +4404,6 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n-;; XXX\n (define_insn \"const_umulsi3_highpart_v8plus\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h,r\")\n \t(truncate:SI\n@@ -4440,7 +4418,6 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n-;; XXX\n (define_insn \"*umulsi3_highpart_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(truncate:SI\n@@ -4452,7 +4429,6 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n-;; XXX\n (define_insn \"const_umulsi3_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(truncate:SI\n@@ -4464,6 +4440,148 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n+\n+(define_expand \"umulxhi_vis\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (truncate:DI\n+          (lshiftrt:TI\n+            (mult:TI (zero_extend:TI\n+                       (match_operand:DI 1 \"arith_operand\" \"\"))\n+                     (zero_extend:TI\n+                       (match_operand:DI 2 \"arith_operand\" \"\")))\n+           (const_int 64))))]\n+ \"TARGET_VIS3\"\n+{\n+  if (! TARGET_ARCH64)\n+    {\n+      emit_insn (gen_umulxhi_v8plus (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*umulxhi_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (truncate:DI\n+          (lshiftrt:TI\n+            (mult:TI (zero_extend:TI\n+                       (match_operand:DI 1 \"arith_operand\" \"%r\"))\n+                     (zero_extend:TI\n+                       (match_operand:DI 2 \"arith_operand\" \"rI\")))\n+           (const_int 64))))]\n+  \"TARGET_VIS3 && TARGET_ARCH64\"\n+  \"umulxhi\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"imul\")])\n+\n+(define_insn \"umulxhi_v8plus\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n+        (truncate:DI\n+          (lshiftrt:TI\n+            (mult:TI (zero_extend:TI\n+                       (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n+                     (zero_extend:TI\n+                       (match_operand:DI 2 \"arith_operand\" \"rI,rI\")))\n+           (const_int 64))))\n+   (clobber (match_scratch:SI 3 \"=&h,X\"))\n+   (clobber (match_scratch:SI 4 \"=&h,X\"))]\n+  \"TARGET_VIS3 && ! TARGET_ARCH64\"\n+  \"* return output_v8plus_mult (insn, operands, \\\"umulxhi\\\");\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"length\" \"9,8\")])\n+\n+(define_expand \"xmulx_vis\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (truncate:DI\n+          (unspec:TI [(zero_extend:TI\n+                        (match_operand:DI 1 \"arith_operand\" \"\"))\n+                      (zero_extend:TI\n+                        (match_operand:DI 2 \"arith_operand\" \"\"))]\n+           UNSPEC_XMUL)))]\n+  \"TARGET_VIS3\"\n+{\n+  if (! TARGET_ARCH64)\n+    {\n+      emit_insn (gen_xmulx_v8plus (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*xmulx_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (truncate:DI\n+          (unspec:TI [(zero_extend:TI\n+                        (match_operand:DI 1 \"arith_operand\" \"%r\"))\n+                      (zero_extend:TI\n+                        (match_operand:DI 2 \"arith_operand\" \"rI\"))]\n+           UNSPEC_XMUL)))]\n+  \"TARGET_VIS3 && TARGET_ARCH64\"\n+  \"xmulx\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"imul\")])\n+\n+(define_insn \"xmulx_v8plus\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n+        (truncate:DI\n+          (unspec:TI [(zero_extend:TI\n+                        (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n+                      (zero_extend:TI\n+                        (match_operand:DI 2 \"arith_operand\" \"rI,rI\"))]\n+           UNSPEC_XMUL)))\n+   (clobber (match_scratch:SI 3 \"=&h,X\"))\n+   (clobber (match_scratch:SI 4 \"=&h,X\"))]\n+  \"TARGET_VIS3 && ! TARGET_ARCH64\"\n+  \"* return output_v8plus_mult (insn, operands, \\\"xmulx\\\");\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"length\" \"9,8\")])\n+\n+(define_expand \"xmulxhi_vis\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (truncate:DI\n+          (lshiftrt:TI\n+            (unspec:TI [(zero_extend:TI\n+                          (match_operand:DI 1 \"arith_operand\" \"\"))\n+                        (zero_extend:TI\n+                          (match_operand:DI 2 \"arith_operand\" \"\"))]\n+             UNSPEC_XMUL)\n+           (const_int 64))))]\n+  \"TARGET_VIS3\"\n+{\n+  if (! TARGET_ARCH64)\n+    {\n+      emit_insn (gen_xmulxhi_v8plus (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*xmulxhi_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (truncate:DI\n+          (lshiftrt:TI\n+            (unspec:TI [(zero_extend:TI\n+                          (match_operand:DI 1 \"arith_operand\" \"%r\"))\n+                        (zero_extend:TI\n+                          (match_operand:DI 2 \"arith_operand\" \"rI\"))]\n+             UNSPEC_XMUL)\n+           (const_int 64))))]\n+  \"TARGET_VIS3 && TARGET_ARCH64\"\n+  \"xmulxhi\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"imul\")])\n+\n+(define_insn \"xmulxhi_v8plus\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n+        (truncate:DI\n+          (lshiftrt:TI\n+            (unspec:TI [(zero_extend:TI\n+                          (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n+                        (zero_extend:TI\n+                          (match_operand:DI 2 \"arith_operand\" \"rI,rI\"))]\n+             UNSPEC_XMUL)\n+           (const_int 64))))\n+   (clobber (match_scratch:SI 3 \"=&h,X\"))\n+   (clobber (match_scratch:SI 4 \"=&h,X\"))]\n+  \"TARGET_VIS3 && !TARGET_ARCH64\"\n+  \"* return output_v8plus_mult (insn, operands, \\\"xmulxhi\\\");\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"length\" \"9,8\")])\n+\n (define_expand \"divsi3\"\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (div:SI (match_operand:SI 1 \"register_operand\" \"\")\n@@ -4562,7 +4680,6 @@\n \t(if_then_else (eq_attr \"isa\" \"v9\")\n \t\t      (const_int 3) (const_int 6)))])\n \n-;; XXX\n (define_expand \"udivsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(udiv:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n@@ -4651,7 +4768,8 @@\n \t(if_then_else (eq_attr \"isa\" \"v9\")\n \t\t      (const_int 2) (const_int 5)))])\n \n-; sparclet multiply/accumulate insns\n+\n+;; SPARClet multiply/accumulate insns\n \n (define_insn \"*smacsi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -5828,7 +5946,6 @@\n }\n   [(set_attr \"type\" \"shift\")])\n \n-;; XXX UGH!\n (define_insn \"ashldi3_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&h,&h,r\")\n \t(ashift:DI (match_operand:DI 1 \"arith_operand\" \"rI,0,rI\")\n@@ -5938,7 +6055,6 @@\n   }\n   [(set_attr \"type\" \"shift\")])\n \n-;; XXX\n (define_insn \"ashrdi3_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&h,&h,r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"arith_operand\" \"rI,0,rI\")\n@@ -6028,7 +6144,6 @@\n   }\n   [(set_attr \"type\" \"shift\")])\n \n-;; XXX\n (define_insn \"lshrdi3_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&h,&h,r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"arith_operand\" \"rI,0,rI\")\n@@ -6416,6 +6531,7 @@\n   DONE;\n })\n \n+\n ;;  Tail call instructions.\n \n (define_expand \"sibcall\"\n@@ -7221,7 +7337,6 @@\n      FAIL;\n    operands[2] = const0_rtx;\")\n \n-\n (define_insn \"\"\n   [(trap_if (match_operator 0 \"noov_compare_operator\" [(reg:CC CC_REG) (const_int 0)])\n \t    (match_operand:SI 1 \"arith_operand\" \"rM\"))]\n@@ -7896,6 +8011,7 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"4\")])\n \n+\n ;; Vector instructions.\n \n (define_mode_iterator VM32 [V1SI V2HI V4QI])\n@@ -8879,145 +8995,4 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fptype\" \"double\")])\n \n-(define_expand \"umulxhi_vis\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (truncate:DI\n-          (lshiftrt:TI\n-            (mult:TI (zero_extend:TI\n-                       (match_operand:DI 1 \"arith_operand\" \"\"))\n-                     (zero_extend:TI\n-                       (match_operand:DI 2 \"arith_operand\" \"\")))\n-           (const_int 64))))]\n- \"TARGET_VIS3\"\n-{\n-  if (! TARGET_ARCH64)\n-    {\n-      emit_insn (gen_umulxhi_v8plus (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*umulxhi_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (truncate:DI\n-          (lshiftrt:TI\n-            (mult:TI (zero_extend:TI\n-                       (match_operand:DI 1 \"arith_operand\" \"%r\"))\n-                     (zero_extend:TI\n-                       (match_operand:DI 2 \"arith_operand\" \"rI\")))\n-           (const_int 64))))]\n-  \"TARGET_VIS3 && TARGET_ARCH64\"\n-  \"umulxhi\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"imul\")])\n-\n-(define_insn \"umulxhi_v8plus\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n-        (truncate:DI\n-          (lshiftrt:TI\n-            (mult:TI (zero_extend:TI\n-                       (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n-                     (zero_extend:TI\n-                       (match_operand:DI 2 \"arith_operand\" \"rI,rI\")))\n-           (const_int 64))))\n-   (clobber (match_scratch:SI 3 \"=&h,X\"))\n-   (clobber (match_scratch:SI 4 \"=&h,X\"))]\n-  \"TARGET_VIS3 && ! TARGET_ARCH64\"\n-  \"* return output_v8plus_mult (insn, operands, \\\"umulxhi\\\");\"\n-  [(set_attr \"type\" \"imul\")\n-   (set_attr \"length\" \"9,8\")])\n-\n-(define_expand \"xmulx_vis\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (truncate:DI\n-          (unspec:TI [(zero_extend:TI\n-                        (match_operand:DI 1 \"arith_operand\" \"\"))\n-                      (zero_extend:TI\n-                        (match_operand:DI 2 \"arith_operand\" \"\"))]\n-           UNSPEC_XMUL)))]\n-  \"TARGET_VIS3\"\n-{\n-  if (! TARGET_ARCH64)\n-    {\n-      emit_insn (gen_xmulx_v8plus (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*xmulx_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (truncate:DI\n-          (unspec:TI [(zero_extend:TI\n-                        (match_operand:DI 1 \"arith_operand\" \"%r\"))\n-                      (zero_extend:TI\n-                        (match_operand:DI 2 \"arith_operand\" \"rI\"))]\n-           UNSPEC_XMUL)))]\n-  \"TARGET_VIS3 && TARGET_ARCH64\"\n-  \"xmulx\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"imul\")])\n-\n-(define_insn \"xmulx_v8plus\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n-        (truncate:DI\n-          (unspec:TI [(zero_extend:TI\n-                        (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n-                      (zero_extend:TI\n-                        (match_operand:DI 2 \"arith_operand\" \"rI,rI\"))]\n-           UNSPEC_XMUL)))\n-   (clobber (match_scratch:SI 3 \"=&h,X\"))\n-   (clobber (match_scratch:SI 4 \"=&h,X\"))]\n-  \"TARGET_VIS3 && ! TARGET_ARCH64\"\n-  \"* return output_v8plus_mult (insn, operands, \\\"xmulx\\\");\"\n-  [(set_attr \"type\" \"imul\")\n-   (set_attr \"length\" \"9,8\")])\n-\n-(define_expand \"xmulxhi_vis\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (truncate:DI\n-          (lshiftrt:TI\n-            (unspec:TI [(zero_extend:TI\n-                          (match_operand:DI 1 \"arith_operand\" \"\"))\n-                        (zero_extend:TI\n-                          (match_operand:DI 2 \"arith_operand\" \"\"))]\n-             UNSPEC_XMUL)\n-           (const_int 64))))]\n-  \"TARGET_VIS3\"\n-{\n-  if (! TARGET_ARCH64)\n-    {\n-      emit_insn (gen_xmulxhi_v8plus (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*xmulxhi_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (truncate:DI\n-          (lshiftrt:TI\n-            (unspec:TI [(zero_extend:TI\n-                          (match_operand:DI 1 \"arith_operand\" \"%r\"))\n-                        (zero_extend:TI\n-                          (match_operand:DI 2 \"arith_operand\" \"rI\"))]\n-             UNSPEC_XMUL)\n-           (const_int 64))))]\n-  \"TARGET_VIS3 && TARGET_ARCH64\"\n-  \"xmulxhi\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"imul\")])\n-\n-(define_insn \"xmulxhi_v8plus\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n-        (truncate:DI\n-          (lshiftrt:TI\n-            (unspec:TI [(zero_extend:TI\n-                          (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n-                        (zero_extend:TI\n-                          (match_operand:DI 2 \"arith_operand\" \"rI,rI\"))]\n-             UNSPEC_XMUL)\n-           (const_int 64))))\n-   (clobber (match_scratch:SI 3 \"=&h,X\"))\n-   (clobber (match_scratch:SI 4 \"=&h,X\"))]\n-  \"TARGET_VIS3 && !TARGET_ARCH64\"\n-  \"* return output_v8plus_mult (insn, operands, \\\"xmulxhi\\\");\"\n-  [(set_attr \"type\" \"imul\")\n-   (set_attr \"length\" \"9,8\")])\n-\n (include \"sync.md\")"}]}