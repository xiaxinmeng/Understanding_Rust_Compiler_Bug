{"sha": "3cf89a7b992d483e80b3b5960f6f4012fae95045", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NmODlhN2I5OTJkNDgzZTgwYjNiNTk2MGY2ZjQwMTJmYWU5NTA0NQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-06-09T15:47:40Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-06-09T15:47:40Z"}, "message": "re PR fortran/85138 (ICE with generic function)\n\n2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/85138\n\tPR fortran/85996\n\tPR fortran/86051\n\t* decl.c (gfc_match_char_spec): Use private namespace in attempt to\n\treduce a charlen to a constant.\n\n2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/85138\n\tPR fortran/85996\n\tPR fortran/86051\n\t* gfortran.dg/pr85138_1.f90: New test.\n\t* gfortran.dg/pr85138_2.f90: Ditto.\n\t* gfortran.dg/pr85996.f90: Ditto.\n\nFrom-SVN: r261362", "tree": {"sha": "262502906e56d2b58266b9acc37a80aef7d64e8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/262502906e56d2b58266b9acc37a80aef7d64e8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cf89a7b992d483e80b3b5960f6f4012fae95045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf89a7b992d483e80b3b5960f6f4012fae95045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cf89a7b992d483e80b3b5960f6f4012fae95045", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf89a7b992d483e80b3b5960f6f4012fae95045/comments", "author": null, "committer": null, "parents": [{"sha": "4ea0af1da0cfa9c55e739808d4b405b982985ad5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea0af1da0cfa9c55e739808d4b405b982985ad5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea0af1da0cfa9c55e739808d4b405b982985ad5"}], "stats": {"total": 169, "additions": 163, "deletions": 6}, "files": [{"sha": "1868780c921ea59f3a95d283eb3a1f13a24bbd42", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf89a7b992d483e80b3b5960f6f4012fae95045/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf89a7b992d483e80b3b5960f6f4012fae95045/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3cf89a7b992d483e80b3b5960f6f4012fae95045", "patch": "@@ -1,3 +1,11 @@\n+2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/85138\n+\tPR fortran/85996\n+\tPR fortran/86051\n+\t* decl.c (gfc_match_char_spec): Use private namespace in attempt to\n+\treduce a charlen to a constant.\n+\n 2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/78278"}, {"sha": "c36a16ba5ace239060e5b6be51a087dc297f61b1", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf89a7b992d483e80b3b5960f6f4012fae95045/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf89a7b992d483e80b3b5960f6f4012fae95045/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=3cf89a7b992d483e80b3b5960f6f4012fae95045", "patch": "@@ -3238,12 +3238,20 @@ gfc_match_char_spec (gfc_typespec *ts)\n     cl->length = gfc_get_int_expr (gfc_charlen_int_kind, NULL, 1);\n   else\n     {\n-      /* If gfortran ends up here, then the len may be reducible to a\n-\t constant.  Try to do that here.  If it does not reduce, simply\n-\t assign len to the charlen.  */\n+      /* If gfortran ends up here, then len may be reducible to a constant.\n+\t Try to do that here.  If it does not reduce, simply assign len to\n+\t charlen.  A complication occurs with user-defined generic functions,\n+\t which are not resolved.  Use a private namespace to deal with\n+\t generic functions.  */\n+\n       if (len && len->expr_type != EXPR_CONSTANT)\n \t{\n+\t  gfc_namespace *old_ns;\n \t  gfc_expr *e;\n+\n+\t  old_ns = gfc_current_ns;\n+\t  gfc_current_ns = gfc_get_namespace (NULL, 0);\n+\n \t  e = gfc_copy_expr (len);\n \t  gfc_reduce_init_expr (e);\n \t  if (e->expr_type == EXPR_CONSTANT)\n@@ -3254,10 +3262,12 @@ gfc_match_char_spec (gfc_typespec *ts)\n \t    }\n \t  else\n \t    gfc_free_expr (e);\n-\t  cl->length = len;\n+\n+\t  gfc_free_namespace (gfc_current_ns);\n+\t  gfc_current_ns = old_ns;\n \t}\n-      else\n-\tcl->length = len;\n+\n+      cl->length = len;\n     }\n \n   ts->u.cl = cl;"}, {"sha": "135213b0f4831966576c6f1e427fa9151248171b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf89a7b992d483e80b3b5960f6f4012fae95045/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf89a7b992d483e80b3b5960f6f4012fae95045/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3cf89a7b992d483e80b3b5960f6f4012fae95045", "patch": "@@ -1,3 +1,12 @@\n+2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/85138\n+\tPR fortran/85996\n+\tPR fortran/86051\n+\t* gfortran.dg/pr85138_1.f90: New test.\n+\t* gfortran.dg/pr85138_2.f90: Ditto.\n+\t* gfortran.dg/pr85996.f90: Ditto.\n+\n 2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/78278"}, {"sha": "a64d9ce9329f85bd52af71b20c99f6d6c7d7b67c", "filename": "gcc/testsuite/gfortran.dg/pr85138_1.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf89a7b992d483e80b3b5960f6f4012fae95045/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr85138_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf89a7b992d483e80b3b5960f6f4012fae95045/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr85138_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr85138_1.f90?ref=3cf89a7b992d483e80b3b5960f6f4012fae95045", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\n+module fox_m_fsys_format\n+\n+  interface len\n+     module procedure str_real_sp_len, str_real_sp_fmt_len\n+  end interface\n+\n+contains\n+\n+  pure function str_real_sp_fmt_len(x, fmt) result(n)\n+    real, intent(in) :: x\n+    character(len=*), intent(in) :: fmt\n+    if (.not.checkFmt(fmt)) then\n+    endif\n+  end function str_real_sp_fmt_len\n+  pure function str_real_sp_len(x) result(n)\n+    real, intent(in) :: x\n+    n = len(x, \"\")\n+  end function str_real_sp_len\n+  pure function str_real_dp_matrix(xa) result(s)\n+    real, intent(in) :: xa\n+    character(len=len(xa)) :: s\n+  end function str_real_dp_matrix\n+\n+  pure function checkfmt(s) result(a)\n+   logical a\n+   character(len=*), intent(in) :: s\n+  end function checkfmt\n+end module fox_m_fsys_format"}, {"sha": "942cc6684d8971512a85591afbea32b135189631", "filename": "gcc/testsuite/gfortran.dg/pr85138_2.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf89a7b992d483e80b3b5960f6f4012fae95045/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr85138_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf89a7b992d483e80b3b5960f6f4012fae95045/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr85138_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr85138_2.f90?ref=3cf89a7b992d483e80b3b5960f6f4012fae95045", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+module fox_m_fsys_format\n+  interface len\n+    module procedure str_real_dp_len, str_real_dp_fmt_len\n+  end interface\n+contains\n+  pure function str_real_dp_fmt_len(x, fmt) result(n)\n+    real, intent(in) :: x\n+    character(len=*), intent(in) :: fmt\n+    if (.not.checkFmt(fmt)) then\n+    endif\n+  end function str_real_dp_fmt_len\n+  pure function str_real_dp_len(x) result(n)\n+    real, intent(in) :: x\n+  end function str_real_dp_len\n+  pure function str_real_dp_array_len(xa) result(n)\n+    real, dimension(:), intent(in) :: xa\n+  end function str_real_dp_array_len\n+  pure function str_real_dp_array_fmt_len(xa, fmt) result(n)\n+    real, dimension(:), intent(in) :: xa\n+    character(len=*), intent(in) :: fmt\n+  end function str_real_dp_array_fmt_len\n+  pure function str_real_dp_fmt(x, fmt) result(s)\n+    real, intent(in) :: x\n+    character(len=*), intent(in) :: fmt\n+    character(len=len(x, fmt)) :: s\n+  end function str_real_dp_fmt\n+  pure function checkFmt(fmt) result(good)\n+    character(len=*), intent(in) :: fmt\n+    logical :: good\n+  end function checkFmt\n+end module fox_m_fsys_format"}, {"sha": "e594d6771c8854f655c9665aafb4af576db59ca9", "filename": "gcc/testsuite/gfortran.dg/pr85996.f90", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf89a7b992d483e80b3b5960f6f4012fae95045/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr85996.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf89a7b992d483e80b3b5960f6f4012fae95045/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr85996.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr85996.f90?ref=3cf89a7b992d483e80b3b5960f6f4012fae95045", "patch": "@@ -0,0 +1,69 @@\n+! { dg-do compile }\n+module strings\n+\n+   type string\n+      integer :: len = 0, size = 0\n+      character, pointer :: chars(:) => null()\n+   end type string\n+\n+   interface length\n+      module procedure len_s\n+   end interface\n+\n+   interface char\n+      module procedure s_to_c, s_to_slc  \n+   end interface\n+\n+   interface uppercase\n+      module procedure uppercase_c\n+   end interface\n+\n+   interface replace\n+      module procedure replace_ccs\n+   end interface\n+\n+   contains\n+\n+      elemental function len_s(s)\n+         type(string), intent(in) :: s\n+         integer :: len_s\n+      end function len_s\n+\n+      pure function s_to_c(s)\n+         type(string),intent(in) :: s\n+         character(length(s)) :: s_to_c\n+      end function s_to_c\n+\n+      pure function s_to_slc(s,long)\n+         type(string),intent(in) :: s\n+         integer, intent(in) :: long\n+         character(long) :: s_to_slc\n+      end function s_to_slc\n+\n+      pure function lr_sc_s(s,start,ss) result(l)\n+         type(string), intent(in) :: s\n+         character(*), intent(in) :: ss\n+         integer, intent(in)  :: start\n+         integer :: l\n+      end function lr_sc_s\n+\n+      pure function lr_ccc(s,tgt,ss,action) result(l)\n+         character(*), intent(in) :: s,tgt,ss,action\n+         integer :: l\n+         select case(uppercase(action))\n+         case default\n+         end select\n+      end function lr_ccc\n+\n+      function replace_ccs(s,tgt,ss) result(r)\n+         character(*), intent(in)             :: s,tgt\n+         type(string), intent(in)             :: ss\n+         character(lr_ccc(s,tgt,char(ss),'first'))  :: r\n+      end function replace_ccs\n+\n+      pure function uppercase_c(c)\n+         character(*), intent(in) :: c\n+         character(len(c)) :: uppercase_c\n+      end function uppercase_c\n+\n+end module strings"}]}