{"sha": "994322ef6e022b027d31796f6ed702a24dbe8167", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk0MzIyZWY2ZTAyMmIwMjdkMzE3OTZmNmVkNzAyYTI0ZGJlODE2Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:15:50Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:15:50Z"}, "message": "sh-protos.h (sh_initialize_trampoline): Remove.\n\n        * config/sh/sh-protos.h (sh_initialize_trampoline): Remove.\n        * config/sh/sh.c (TARGET_TRAMPOLINE_INIT): New.\n        (TARGET_TRAMPOLINE_ADJUST_ADDRESS): New.\n        (sh_trampoline_init): Rename from sh_initialize_trampoline;\n        make static; adjust for target hook parameters.\n        (sh_trampoline_adjust_address): New.\n        * config/sh/sh.h (INITIALIZE_TRAMPOLINE): New.\n        (TRAMPOLINE_ADJUST_ADDRESS): Move code to sh_trampoline_adjust_address.\n\nFrom-SVN: r152011", "tree": {"sha": "bda26e7671eccb9b885733483c8f3cf14749b75e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bda26e7671eccb9b885733483c8f3cf14749b75e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/994322ef6e022b027d31796f6ed702a24dbe8167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994322ef6e022b027d31796f6ed702a24dbe8167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994322ef6e022b027d31796f6ed702a24dbe8167", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994322ef6e022b027d31796f6ed702a24dbe8167/comments", "author": null, "committer": null, "parents": [{"sha": "2f5bb28c29df500fae2b5897ca3521a27295b27d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5bb28c29df500fae2b5897ca3521a27295b27d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f5bb28c29df500fae2b5897ca3521a27295b27d"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "3954cf8ef020c8a2440370f37df3e2d545064e2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994322ef6e022b027d31796f6ed702a24dbe8167/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994322ef6e022b027d31796f6ed702a24dbe8167/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=994322ef6e022b027d31796f6ed702a24dbe8167", "patch": "@@ -244,6 +244,15 @@\n \tadjust for target hook.\n \t* config/score/score3.h, config/score/score7.h: Update.\n \n+\t* config/sh/sh-protos.h (sh_initialize_trampoline): Remove.\n+\t* config/sh/sh.c (TARGET_TRAMPOLINE_INIT): New.\n+\t(TARGET_TRAMPOLINE_ADJUST_ADDRESS): New.\n+\t(sh_trampoline_init): Rename from sh_initialize_trampoline;\n+\tmake static; adjust for target hook parameters.\n+\t(sh_trampoline_adjust_address): New.\n+\t* config/sh/sh.h (INITIALIZE_TRAMPOLINE): New.\n+\t(TRAMPOLINE_ADJUST_ADDRESS): Move code to sh_trampoline_adjust_address.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "f61c5d5440a5225214b2e2900ef89bd8d9db20db", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994322ef6e022b027d31796f6ed702a24dbe8167/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994322ef6e022b027d31796f6ed702a24dbe8167/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=994322ef6e022b027d31796f6ed702a24dbe8167", "patch": "@@ -142,7 +142,6 @@ extern int sh_cfun_interrupt_handler_p (void);\n extern int sh_cfun_resbank_handler_p (void);\n extern int sh_attr_renesas_p (const_tree);\n extern int sh_cfun_attr_renesas_p (void);\n-extern void sh_initialize_trampoline (rtx, rtx, rtx);\n extern bool sh_cannot_change_mode_class\n \t      (enum machine_mode, enum machine_mode, enum reg_class);\n extern void sh_mark_label (rtx, int);"}, {"sha": "df03c14a36462d84a83e980b036c9bfcce4178fe", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994322ef6e022b027d31796f6ed702a24dbe8167/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994322ef6e022b027d31796f6ed702a24dbe8167/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=994322ef6e022b027d31796f6ed702a24dbe8167", "patch": "@@ -272,6 +272,8 @@ static bool sh_scalar_mode_supported_p (enum machine_mode);\n static int sh_dwarf_calling_convention (const_tree);\n static void sh_encode_section_info (tree, rtx, int);\n static int sh2a_function_vector_p (tree);\n+static void sh_trampoline_init (rtx, tree, rtx);\n+static rtx sh_trampoline_adjust_address (rtx);\n \f\n static const struct attribute_spec sh_attribute_table[] =\n {\n@@ -511,6 +513,11 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tsh_legitimate_address_p\n \n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT\t\tsh_trampoline_init\n+#undef TARGET_TRAMPOLINE_ADJUST_ADDRESS\n+#define TARGET_TRAMPOLINE_ADJUST_ADDRESS sh_trampoline_adjust_address\n+\n /* Machine-specific symbol_ref flags.  */\n #define SYMBOL_FLAG_FUNCVEC_FUNCTION    (SYMBOL_FLAG_MACH_DEP << 0)\n \n@@ -10327,10 +10334,11 @@ sh_ms_bitfield_layout_p (const_tree record_type ATTRIBUTE_UNUSED)\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.  */\n \n-void\n-sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n+static void\n+sh_trampoline_init (rtx tramp_mem, tree fndecl, rtx cxt)\n {\n-  rtx tramp_mem = gen_frame_mem (BLKmode, tramp);\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx tramp = force_reg (Pmode, XEXP (tramp_mem, 0));\n \n   if (TARGET_SHMEDIA64)\n     {\n@@ -10421,7 +10429,6 @@ sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n       rtx ptabs = force_reg (DImode, GEN_INT (0x6bf10600));\n       rtx blink = force_reg (DImode, GEN_INT (0x4401fff0));\n \n-      tramp = force_reg (Pmode, tramp);\n       fnaddr = force_reg (SImode, fnaddr);\n       cxt = force_reg (SImode, cxt);\n       emit_insn (gen_mshflo_w_x (gen_rtx_SUBREG (V4HImode, quad0, 0),\n@@ -10477,6 +10484,17 @@ sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n     }\n }\n \n+/* On SH5, trampolines are SHmedia code, so add 1 to the address.  */\n+\n+static rtx\n+sh_trampoline_adjust_address (rtx tramp)\n+{\n+  if (TARGET_SHMEDIA)\n+    tramp = expand_simple_binop (Pmode, PLUS, tramp, const1_rtx,\n+\t\t\t\t gen_reg_rtx (Pmode), 0, OPTAB_LIB_WIDEN);\n+  return tramp;\n+}\n+\n /* FIXME: This is overly conservative.  A SHcompact function that\n    receives arguments ``by reference'' will have them stored in its\n    own stack frame, so it must not pass pointers or references to"}, {"sha": "c24555f9796c4ae76d15fbe8c96cb7e01c494c7d", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994322ef6e022b027d31796f6ed702a24dbe8167/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994322ef6e022b027d31796f6ed702a24dbe8167/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=994322ef6e022b027d31796f6ed702a24dbe8167", "patch": "@@ -1829,23 +1829,6 @@ struct sh_args {\n   ((CACHE_LOG < 3 || (TARGET_SMALLCODE && ! TARGET_HARVARD)) ? 32 \\\n    : TARGET_SHMEDIA ? 256 : 64)\n \n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n-  sh_initialize_trampoline ((TRAMP), (FNADDR), (CXT))\n-\n-/* On SH5, trampolines are SHmedia code, so add 1 to the address.  */\n-\n-#define TRAMPOLINE_ADJUST_ADDRESS(TRAMP) do\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_SHMEDIA)\t\t\t\t\t\t\t\\\n-    (TRAMP) = expand_simple_binop (Pmode, PLUS, (TRAMP), const1_rtx,\t\\\n-\t\t\t\t   gen_reg_rtx (Pmode), 0,\t\t\\\n-\t\t\t\t   OPTAB_LIB_WIDEN);\t\t\t\\\n-} while (0)\n-\n /* A C expression whose value is RTL representing the value of the return\n    address for the frame COUNT steps up from the current frame.\n    FRAMEADDR is already the frame pointer of the COUNT frame, so we"}]}