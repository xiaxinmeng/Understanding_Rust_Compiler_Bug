{"sha": "49847d759f449f0b299fae28932e996037338f88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk4NDdkNzU5ZjQ0OWYwYjI5OWZhZTI4OTMyZTk5NjAzNzMzOGY4OA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-01-27T21:24:01Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-01-27T21:24:01Z"}, "message": "[multiple changes]\n\n2016-01-27  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/69385\n\t* trans-expr.c (is_scalar_reallocatable_lhs): Remove the check\n\tfor allocatable components, whilst checking if the symbol is a\n\tderived or class entity..\n\n2015-01-27  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/69385\n\t* gfortran.dg/alloc_comp_assign_15.f03: New test.\n\nFrom-SVN: r232904", "tree": {"sha": "d710a896ffd59a5b49bb3d8aeed4e52002ce8bd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d710a896ffd59a5b49bb3d8aeed4e52002ce8bd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49847d759f449f0b299fae28932e996037338f88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49847d759f449f0b299fae28932e996037338f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49847d759f449f0b299fae28932e996037338f88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49847d759f449f0b299fae28932e996037338f88/comments", "author": null, "committer": null, "parents": [{"sha": "9525851d49b18b8b62c47fd2092dbb3937b887f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9525851d49b18b8b62c47fd2092dbb3937b887f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9525851d49b18b8b62c47fd2092dbb3937b887f7"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "9fd8ec897af8c8a210d25eb485e2c278c863c8be", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49847d759f449f0b299fae28932e996037338f88/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49847d759f449f0b299fae28932e996037338f88/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=49847d759f449f0b299fae28932e996037338f88", "patch": "@@ -1,3 +1,10 @@\n+2016-01-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/69385\n+\t* trans-expr.c (is_scalar_reallocatable_lhs): Remove the check\n+\tfor allocatable components, whilst checking if the symbol is a\n+\tderived or class entity..\n+\n 2016-01-26  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/69385"}, {"sha": "c5ae4c53910dcc150d13b1e01fae48383fed3b91", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49847d759f449f0b299fae28932e996037338f88/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49847d759f449f0b299fae28932e996037338f88/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=49847d759f449f0b299fae28932e996037338f88", "patch": "@@ -8901,10 +8901,11 @@ is_scalar_reallocatable_lhs (gfc_expr *expr)\n \t&& !expr->ref)\n     return true;\n \n-  /* All that can be left are allocatable components.  */\n-  if ((expr->symtree->n.sym->ts.type != BT_DERIVED\n+  /* All that can be left are allocatable components.  However, we do\n+     not check for allocatable components here because the expression\n+     could be an allocatable component of a pointer component.  */\n+  if (expr->symtree->n.sym->ts.type != BT_DERIVED\n \t&& expr->symtree->n.sym->ts.type != BT_CLASS)\n-\t|| !expr->symtree->n.sym->ts.u.derived->attr.alloc_comp)\n     return false;\n \n   /* Find an allocatable component ref last.  */"}, {"sha": "e1e3868d18deed66b3aa8a0575878e242179a2ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49847d759f449f0b299fae28932e996037338f88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49847d759f449f0b299fae28932e996037338f88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49847d759f449f0b299fae28932e996037338f88", "patch": "@@ -1,3 +1,8 @@\n+2015-01-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/69385\n+\t* gfortran.dg/alloc_comp_assign_15.f03: New test.\n+\n 2016-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/66869"}, {"sha": "94e04003151e272ef5efd135ac30ae3a259c7068", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_15.f03", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49847d759f449f0b299fae28932e996037338f88/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_15.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49847d759f449f0b299fae28932e996037338f88/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_15.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_15.f03?ref=49847d759f449f0b299fae28932e996037338f88", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+!\n+! Check the test for PR69422, in which the allocatable component 'Source'\n+! of the pointer component 'P' was not automatically (re)allocated on\n+! assignment.\n+!\n+! Contributed by Anthony Lewis  <antony@cosmologist.info>\n+!\n+module funcs\n+  implicit none\n+\n+  Type T\n+    character(LEN=:), allocatable :: source\n+  end type T\n+\n+  type TPointer\n+    Type(T), pointer :: P\n+  end type TPointer\n+\n+end module\n+\n+program Test1\n+  use funcs\n+  Type(TPointer) :: X\n+\n+  allocate(X%P)\n+\n+  X%P%Source = 'test string'\n+  if (.not.allocated (X%P%Source)) call abort\n+  if (X%P%Source .ne. 'test string') call abort\n+\n+end program Test1"}]}