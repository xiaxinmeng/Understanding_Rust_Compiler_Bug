{"sha": "20a6ece021473dc7f182b751bcbdaa6ad9762375", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBhNmVjZTAyMTQ3M2RjN2YxODJiNzUxYmNiZGFhNmFkOTc2MjM3NQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-10-12T15:19:46Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-10-12T15:19:46Z"}, "message": "separate shrink-wrap: New command-line flag, status flag, hooks, and doc\n\nThis patch adds a new command-line flag \"-fshrink-wrap-separate\", a status\nflag \"shrink_wrapped_separate\", hooks for abstracting the target components,\nand documentation for all those.\n\n\n\t* common.opt (-fshrink-wrap-separate): New flag.\n\t* doc/invoke.texi: Document it.\n\t* doc/tm.texi.in (Shrink-wrapping separate components): New subsection.\n\t* doc/tm.texi: Regenerate.\n\t* emit-rtl.h (struct rtl_data): New field shrink_wrapped_separate.\n\t* target.def (shrink_wrap): New hook vector.\n\t(get_separate_components, components_for_bb, disqualify_components,\n\temit_prologue_components, emit_epilogue_components,\n\tset_handled_components): New hooks.\n\nFrom-SVN: r241059", "tree": {"sha": "2139db30e23ce186bfb8b73a5ad44c4cba876943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2139db30e23ce186bfb8b73a5ad44c4cba876943"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20a6ece021473dc7f182b751bcbdaa6ad9762375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a6ece021473dc7f182b751bcbdaa6ad9762375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20a6ece021473dc7f182b751bcbdaa6ad9762375", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a6ece021473dc7f182b751bcbdaa6ad9762375/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56b31d3e8235beccc7ccf9fb534888a9ab949a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b31d3e8235beccc7ccf9fb534888a9ab949a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b31d3e8235beccc7ccf9fb534888a9ab949a0c"}], "stats": {"total": 189, "additions": 188, "deletions": 1}, "files": [{"sha": "323bf353a1cb0f666a73bde8016cca984c360fb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20a6ece021473dc7f182b751bcbdaa6ad9762375", "patch": "@@ -1,3 +1,15 @@\n+2016-10-12  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* common.opt (-fshrink-wrap-separate): New flag.\n+\t* doc/invoke.texi: Document it.\n+\t* doc/tm.texi.in (Shrink-wrapping separate components): New subsection.\n+\t* doc/tm.texi: Regenerate.\n+\t* emit-rtl.h (struct rtl_data): New field shrink_wrapped_separate.\n+\t* target.def (shrink_wrap): New hook vector.\n+\t(get_separate_components, components_for_bb, disqualify_components,\n+\temit_prologue_components, emit_epilogue_components,\n+\tset_handled_components): New hooks.\n+\n 2016-10-12  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (rs6000_return_in_memory): Warn for"}, {"sha": "ce16a7e2397df1d4ad0548287a99caf8889964bb", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=20a6ece021473dc7f182b751bcbdaa6ad9762375", "patch": "@@ -2200,6 +2200,10 @@ Common Report Var(flag_shrink_wrap) Optimization\n Emit function prologues only before parts of the function that need it,\n rather than at the top of the function.\n \n+fshrink-wrap-separate\n+Common Report Var(flag_shrink_wrap_separate) Init(1) Optimization\n+Shrink-wrap parts of the prologue and epilogue separately.\n+\n fsignaling-nans\n Common Report Var(flag_signaling_nans) Optimization SetByCombined\n Disable optimizations observable by IEEE signaling NaNs."}, {"sha": "0241cb5ecc6cd4d4283d847e3e3f5841cccc298b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=20a6ece021473dc7f182b751bcbdaa6ad9762375", "patch": "@@ -399,7 +399,8 @@ Objective-C and Objective-C++ Dialects}.\n -fschedule-insns -fschedule-insns2 -fsection-anchors @gol\n -fselective-scheduling -fselective-scheduling2 @gol\n -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops @gol\n--fsemantic-interposition -fshrink-wrap -fsignaling-nans @gol\n+-fsemantic-interposition -fshrink-wrap -fshrink-wrap-separate @gol\n+-fsignaling-nans @gol\n -fsingle-precision-constant -fsplit-ivs-in-unroller @gol\n -fsplit-paths @gol\n -fsplit-wide-types -fssa-backprop -fssa-phiopt @gol\n@@ -6663,6 +6664,7 @@ compilation time.\n -fmove-loop-invariants @gol\n -freorder-blocks @gol\n -fshrink-wrap @gol\n+-fshrink-wrap-separate @gol\n -fsplit-wide-types @gol\n -fssa-backprop @gol\n -fssa-phiopt @gol\n@@ -7573,6 +7575,13 @@ Emit function prologues only before parts of the function that need it,\n rather than at the top of the function.  This flag is enabled by default at\n @option{-O} and higher.\n \n+@item -fshrink-wrap-separate\n+@opindex fshrink-wrap-separate\n+Shrink-wrap separate parts of the prologue and epilogue separately, so that\n+those parts are only executed when needed.\n+This option is on by default, but has no effect unless @option{-fshrink-wrap}\n+is also turned on and the target supports this.\n+\n @item -fcaller-saves\n @opindex fcaller-saves\n Enable allocation of values to registers that are clobbered by"}, {"sha": "a4a8e499fe18b7e1440c80128a7688c314747f92", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=20a6ece021473dc7f182b751bcbdaa6ad9762375", "patch": "@@ -2924,6 +2924,7 @@ This describes the stack layout and calling conventions.\n * Function Entry::\n * Profiling::\n * Tail Calls::\n+* Shrink-wrapping separate components::\n * Stack Smashing Protection::\n * Miscellaneous Register Hooks::\n @end menu\n@@ -4853,6 +4854,68 @@ This hook should add additional registers that are computed by the prologue to t\n True if a function's return statements should be checked for matching the function's return type.  This includes checking for falling off the end of a non-void function.  Return false if no such check should be made.\n @end deftypefn\n \n+@node Shrink-wrapping separate components\n+@subsection Shrink-wrapping separate components\n+@cindex shrink-wrapping separate components\n+\n+The prologue may perform a variety of target dependent tasks such as\n+saving callee-saved registers, saving the return address, aligning the\n+stack, creating a stack frame, initializing the PIC register, setting\n+up the static chain, etc.\n+\n+On some targets some of these tasks may be independent of others and\n+thus may be shrink-wrapped separately.  These independent tasks are\n+referred to as components and are handled generically by the target\n+independent parts of GCC.\n+\n+Using the following hooks those prologue or epilogue components can be\n+shrink-wrapped separately, so that the initialization (and possibly\n+teardown) those components do is not done as frequently on execution\n+paths where this would unnecessary.\n+\n+What exactly those components are is up to the target code; the generic\n+code treats them abstractly, as a bit in an @code{sbitmap}.  These\n+@code{sbitmap}s are allocated by the @code{shrink_wrap.get_separate_components}\n+and @code{shrink_wrap.components_for_bb} hooks, and deallocated by the\n+generic code.\n+\n+@deftypefn {Target Hook} sbitmap TARGET_SHRINK_WRAP_GET_SEPARATE_COMPONENTS (void)\n+This hook should return an @code{sbitmap} with the bits set for those\n+components that can be separately shrink-wrapped in the current function.\n+Return @code{NULL} if the current function should not get any separate\n+shrink-wrapping.\n+Don't define this hook if it would always return @code{NULL}.\n+If it is defined, the other hooks in this group have to be defined as well.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} sbitmap TARGET_SHRINK_WRAP_COMPONENTS_FOR_BB (basic_block)\n+This hook should return an @code{sbitmap} with the bits set for those\n+components where either the prologue component has to be executed before\n+the @code{basic_block}, or the epilogue component after it, or both.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} void TARGET_SHRINK_WRAP_DISQUALIFY_COMPONENTS (sbitmap @var{components}, edge @var{e}, sbitmap @var{edge_components}, bool @var{is_prologue})\n+This hook should clear the bits in the @var{components} bitmap for those\n+components in @var{edge_components} that the target cannot handle on edge\n+@var{e}, where @var{is_prologue} says if this is for a prologue or an\n+epilogue instead.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} void TARGET_SHRINK_WRAP_EMIT_PROLOGUE_COMPONENTS (sbitmap)\n+Emit prologue insns for the components indicated by the parameter.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} void TARGET_SHRINK_WRAP_EMIT_EPILOGUE_COMPONENTS (sbitmap)\n+Emit epilogue insns for the components indicated by the parameter.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} void TARGET_SHRINK_WRAP_SET_HANDLED_COMPONENTS (sbitmap)\n+Mark the components in the parameter as handled, so that the\n+@code{prologue} and @code{epilogue} named patterns know to ignore those\n+components.  The target code should not hang on to the @code{sbitmap}, it\n+will be deleted after this call.\n+@end deftypefn\n+\n @node Stack Smashing Protection\n @subsection Stack smashing protection\n @cindex stack smashing protection"}, {"sha": "265f1be7edf77d76a80273c3168fe0ec2509edfb", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=20a6ece021473dc7f182b751bcbdaa6ad9762375", "patch": "@@ -2530,6 +2530,7 @@ This describes the stack layout and calling conventions.\n * Function Entry::\n * Profiling::\n * Tail Calls::\n+* Shrink-wrapping separate components::\n * Stack Smashing Protection::\n * Miscellaneous Register Hooks::\n @end menu\n@@ -3775,6 +3776,43 @@ the function prologue.  Normally, the profiling code comes after.\n \n @hook TARGET_WARN_FUNC_RETURN\n \n+@node Shrink-wrapping separate components\n+@subsection Shrink-wrapping separate components\n+@cindex shrink-wrapping separate components\n+\n+The prologue may perform a variety of target dependent tasks such as\n+saving callee-saved registers, saving the return address, aligning the\n+stack, creating a stack frame, initializing the PIC register, setting\n+up the static chain, etc.\n+\n+On some targets some of these tasks may be independent of others and\n+thus may be shrink-wrapped separately.  These independent tasks are\n+referred to as components and are handled generically by the target\n+independent parts of GCC.\n+\n+Using the following hooks those prologue or epilogue components can be\n+shrink-wrapped separately, so that the initialization (and possibly\n+teardown) those components do is not done as frequently on execution\n+paths where this would unnecessary.\n+\n+What exactly those components are is up to the target code; the generic\n+code treats them abstractly, as a bit in an @code{sbitmap}.  These\n+@code{sbitmap}s are allocated by the @code{shrink_wrap.get_separate_components}\n+and @code{shrink_wrap.components_for_bb} hooks, and deallocated by the\n+generic code.\n+\n+@hook TARGET_SHRINK_WRAP_GET_SEPARATE_COMPONENTS\n+\n+@hook TARGET_SHRINK_WRAP_COMPONENTS_FOR_BB\n+\n+@hook TARGET_SHRINK_WRAP_DISQUALIFY_COMPONENTS\n+\n+@hook TARGET_SHRINK_WRAP_EMIT_PROLOGUE_COMPONENTS\n+\n+@hook TARGET_SHRINK_WRAP_EMIT_EPILOGUE_COMPONENTS\n+\n+@hook TARGET_SHRINK_WRAP_SET_HANDLED_COMPONENTS\n+\n @node Stack Smashing Protection\n @subsection Stack smashing protection\n @cindex stack smashing protection"}, {"sha": "0a242b1234d31a025d1158a5587b2604b544b5d6", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=20a6ece021473dc7f182b751bcbdaa6ad9762375", "patch": "@@ -254,6 +254,10 @@ struct GTY(()) rtl_data {\n   /* True if we performed shrink-wrapping for the current function.  */\n   bool shrink_wrapped;\n \n+  /* True if we performed shrink-wrapping for separate components for\n+     the current function.  */\n+  bool shrink_wrapped_separate;\n+\n   /* Nonzero if function being compiled doesn't modify the stack pointer\n      (ignoring the prologue and epilogue).  This is only valid after\n      pass_stack_ptr_mod has run.  */"}, {"sha": "b6968f769909fe0337a82047b3fe8f6a457454b1", "filename": "gcc/target.def", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a6ece021473dc7f182b751bcbdaa6ad9762375/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=20a6ece021473dc7f182b751bcbdaa6ad9762375", "patch": "@@ -5814,6 +5814,63 @@ DEFHOOK\n  bool, (tree),\n  hook_bool_tree_true)\n \n+#undef HOOK_PREFIX\n+#define HOOK_PREFIX \"TARGET_SHRINK_WRAP_\"\n+HOOK_VECTOR (TARGET_SHRINK_WRAP_HOOKS, shrink_wrap)\n+\n+DEFHOOK\n+(get_separate_components,\n+ \"This hook should return an @code{sbitmap} with the bits set for those\\n\\\n+components that can be separately shrink-wrapped in the current function.\\n\\\n+Return @code{NULL} if the current function should not get any separate\\n\\\n+shrink-wrapping.\\n\\\n+Don't define this hook if it would always return @code{NULL}.\\n\\\n+If it is defined, the other hooks in this group have to be defined as well.\",\n+ sbitmap, (void),\n+ NULL)\n+\n+DEFHOOK\n+(components_for_bb,\n+ \"This hook should return an @code{sbitmap} with the bits set for those\\n\\\n+components where either the prologue component has to be executed before\\n\\\n+the @code{basic_block}, or the epilogue component after it, or both.\",\n+ sbitmap, (basic_block),\n+ NULL)\n+\n+DEFHOOK\n+(disqualify_components,\n+ \"This hook should clear the bits in the @var{components} bitmap for those\\n\\\n+components in @var{edge_components} that the target cannot handle on edge\\n\\\n+@var{e}, where @var{is_prologue} says if this is for a prologue or an\\n\\\n+epilogue instead.\",\n+ void, (sbitmap components, edge e, sbitmap edge_components, bool is_prologue),\n+ NULL)\n+\n+DEFHOOK\n+(emit_prologue_components,\n+ \"Emit prologue insns for the components indicated by the parameter.\",\n+ void, (sbitmap),\n+ NULL)\n+\n+DEFHOOK\n+(emit_epilogue_components,\n+ \"Emit epilogue insns for the components indicated by the parameter.\",\n+ void, (sbitmap),\n+ NULL)\n+\n+DEFHOOK\n+(set_handled_components,\n+ \"Mark the components in the parameter as handled, so that the\\n\\\n+@code{prologue} and @code{epilogue} named patterns know to ignore those\\n\\\n+components.  The target code should not hang on to the @code{sbitmap}, it\\n\\\n+will be deleted after this call.\",\n+ void, (sbitmap),\n+ NULL)\n+\n+HOOK_VECTOR_END (shrink_wrap)\n+#undef HOOK_PREFIX\n+#define HOOK_PREFIX \"TARGET_\"\n+\n /* Determine the type of unwind info to emit for debugging.  */\n DEFHOOK\n (debug_unwind_info,"}]}