{"sha": "3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IzNWM1NGE2MDJlMmMwYTlkZDg5YzliYzZiY2Q4NjA3ZmUwYmFmNg==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2016-12-19T18:58:19Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2016-12-19T18:58:19Z"}, "message": "rs6000.c (rs6000_gimple_fold_builtin): Add handling for early expansion of vector subtract builtins.\n\n\n2016-12-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n        * config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling for\n        early expansion of vector subtract builtins.\n    \n[gcc/testsuite]\n\n2016-12-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n      * gcc.target/powerpc/fold-vec-sub-char.c: New.\n      * gcc.target/powerpc/fold-vec-sub-float.c: New.\n      * gcc.target/powerpc/fold-vec-sub-floatdouble.c: New.\n      * gcc.target/powerpc/fold-vec-sub-int.c: New.\n      * gcc.target/powerpc/fold-vec-sub-int128.c: New.\n      * gcc.target/powerpc/fold-vec-sub-longlong.c: New.\n      * gcc.target/powerpc/fold-vec-sub-short.c: New.\n\nFrom-SVN: r243806", "tree": {"sha": "c0f46eabbb26b8cb03bbda0ff8c83ae5c7d88872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0f46eabbb26b8cb03bbda0ff8c83ae5c7d88872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d3dd8fb65050363f1f82b5f048799fd9a0a0f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d3dd8fb65050363f1f82b5f048799fd9a0a0f5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d3dd8fb65050363f1f82b5f048799fd9a0a0f5a"}], "stats": {"total": 284, "additions": 284, "deletions": 0}, "files": [{"sha": "b3dfcd9387bc12bd20f182c2cb2eff1462234e89", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "patch": "@@ -1,3 +1,8 @@\n+2016-12-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling for\n+\tearly expansion of vector subtract builtins.\n+\n 2016-12-19  Chenghua Xu  <paul.hua.gm@gmail.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "1f02d1442d3220ac67b1230dfddb53da6bb57294", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "patch": "@@ -16564,6 +16564,24 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \tgsi_replace (gsi, g, true);\n \treturn true;\n       }\n+    /* Flavors of vec_sub.  We deliberately don't expand\n+       P8V_BUILTIN_VSUBUQM. */\n+    case ALTIVEC_BUILTIN_VSUBUBM:\n+    case ALTIVEC_BUILTIN_VSUBUHM:\n+    case ALTIVEC_BUILTIN_VSUBUWM:\n+    case P8V_BUILTIN_VSUBUDM:\n+    case ALTIVEC_BUILTIN_VSUBFP:\n+    case VSX_BUILTIN_XVSUBDP:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple *g = gimple_build_assign (lhs, MINUS_EXPR, arg0, arg1);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n+\n     default:\n       break;\n     }"}, {"sha": "a3eea070b5a72c5ee8003f4b235e4fd90b63372d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "patch": "@@ -1,3 +1,13 @@\n+2016-12-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+ \n+\t* gcc.target/powerpc/fold-vec-sub-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-sub-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-sub-floatdouble.c: New.\n+\t* gcc.target/powerpc/fold-vec-sub-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-sub-int128.c: New.\n+\t* gcc.target/powerpc/fold-vec-sub-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-sub-short.c: New.\n+\n 2016-12-19  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \tPR target/78748"}, {"sha": "5063bd8cb10b5be59225b15a0d7093ca620ff89a", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-sub-char.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-char.c?ref=3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "patch": "@@ -0,0 +1,46 @@\n+/* Verify that overloaded built-ins for vec_sub with char\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+test1 (vector bool char x, vector signed char y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector signed char\n+test2 (vector signed char x, vector bool char y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector signed char\n+test3 (vector signed char x, vector signed char y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned char\n+test4 (vector bool char x, vector unsigned char y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned char\n+test5 (vector unsigned char x, vector bool char y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned char\n+test6 (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vsububm\" 6 } } */"}, {"sha": "8a29def8cc26e4e0c9017c227162816b2f20d8ee", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-sub-float.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-float.c?ref=3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "patch": "@@ -0,0 +1,17 @@\n+/* Verify that overloaded built-ins for vec_sub with float\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -mno-vsx\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+test1 (vector float x, vector float y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vsubfp\" 1 } } */\n+"}, {"sha": "c29acc93b5644d754a18660473d288da5e3f4604", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-sub-floatdouble.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-floatdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-floatdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-floatdouble.c?ref=3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "patch": "@@ -0,0 +1,23 @@\n+/* Verify that overloaded built-ins for vec_sub with float and\n+   double inputs for VSX produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -mvsx\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+test1 (vector float x, vector float y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector double\n+test2 (vector double x, vector double y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xvsubsp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvsubdp\" 1 } } */"}, {"sha": "1fac1dc0eeb45bcc363be73abf17b9918a53e855", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-sub-int.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-int.c?ref=3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "patch": "@@ -0,0 +1,47 @@\n+/* Verify that overloaded built-ins for vec_sub with int\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test1 (vector bool int x, vector signed int y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector signed int\n+test2 (vector signed int x, vector bool int y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector signed int\n+test3 (vector signed int x, vector signed int y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned int\n+test4 (vector bool int x, vector unsigned int y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned int\n+test5 (vector unsigned int x, vector bool int y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned int\n+test6 (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vsubuwm\" 6 } } */\n+"}, {"sha": "13caa9e6455f6085556ee7f2dfb9a4711200814a", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-sub-int128.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-int128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-int128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-int128.c?ref=3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "patch": "@@ -0,0 +1,24 @@\n+/* Verify that overloaded built-ins for vec_sub with __int128\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-maltivec -mvsx -mpower8-vector\" } */\n+/* { dg-additional-options \"-maix64\" { target powerpc-ibm-aix* } } */\n+\n+#include \"altivec.h\"\n+\n+vector signed __int128\n+test1 (vector signed __int128 x, vector signed __int128 y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned __int128\n+test2 (vector unsigned __int128 x, vector unsigned __int128 y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vsubuqm\" 2 } } */"}, {"sha": "889fba4b2aa26c18670baeff94abbb58a90e8e5d", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-sub-longlong.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-longlong.c?ref=3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "patch": "@@ -0,0 +1,47 @@\n+/* Verify that overloaded built-ins for vec_sub with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-maltivec -mvsx -mpower8-vector\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+test1 (vector bool long long x, vector signed long long y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector signed long long\n+test2 (vector signed long long x, vector bool long long y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector signed long long\n+test3 (vector signed long long x, vector signed long long y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned long long\n+test4 (vector bool long long x, vector unsigned long long y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned long long\n+test5 (vector unsigned long long x, vector bool long long y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned long long\n+test6 (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vsubudm\" 6 } } */\n+"}, {"sha": "67052a2474d05c3180b14fccd22f1c6e1a61b413", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-sub-short.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-sub-short.c?ref=3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "patch": "@@ -0,0 +1,47 @@\n+/* Verify that overloaded built-ins for vec_sub with short\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+test1 (vector bool short x, vector signed short y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector signed short\n+test2 (vector signed short x, vector bool short y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector signed short\n+test3 (vector signed short x, vector signed short y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned short\n+test4 (vector bool short x, vector unsigned short y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned short\n+test5 (vector unsigned short x, vector bool short y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+vector unsigned short\n+test6 (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_sub (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vsubuhm\" 6 } } */\n+"}]}