{"sha": "798ec80703636f8572e33e10dbeb86f497490fbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk4ZWM4MDcwMzYzNmY4NTcyZTMzZTEwZGJlYjg2ZjQ5NzQ5MGZiZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-04-27T19:04:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-04-27T19:04:09Z"}, "message": "re PR c++/41468 (SFINAE for expressions doesn't consider ambiguous conversion sequences)\n\n\tPR c++/41468\n\t* class.c (convert_to_base): Add complain parameter.  Pass\n\tba_quiet to lookup_base if we don't want errors.\n\t(build_vfield_ref): Pass complain to convert_to_base.\n\t* call.c (convert_like_real): Likewise.\n\t(initialize_reference): Likewise.\n\t(perform_direct_initialization_if_possible): Pass complain to\n\tconvert_like_real.\n\t* cp-tree.h: Adjust.\n\nFrom-SVN: r158798", "tree": {"sha": "48971fe479cf9c97700e306634a2abedadc66ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48971fe479cf9c97700e306634a2abedadc66ebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/798ec80703636f8572e33e10dbeb86f497490fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798ec80703636f8572e33e10dbeb86f497490fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798ec80703636f8572e33e10dbeb86f497490fbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798ec80703636f8572e33e10dbeb86f497490fbf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad86a5b264dcf68f9eee93da90af06d15d91e4a"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "d4b82a9a20ac3ba504b43404a14a42ac3846333b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798ec80703636f8572e33e10dbeb86f497490fbf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798ec80703636f8572e33e10dbeb86f497490fbf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=798ec80703636f8572e33e10dbeb86f497490fbf", "patch": "@@ -1,3 +1,15 @@\n+2010-04-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/41468\n+\t* class.c (convert_to_base): Add complain parameter.  Pass\n+\tba_quiet to lookup_base if we don't want errors.\n+\t(build_vfield_ref): Pass complain to convert_to_base.\n+\t* call.c (convert_like_real): Likewise.\n+\t(initialize_reference): Likewise.\n+\t(perform_direct_initialization_if_possible): Pass complain to\n+\tconvert_like_real.\n+\t* cp-tree.h: Adjust.\n+\n 2010-04-27  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "a97f7dcea108b78e078df211d499d9ceaf9f3437", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798ec80703636f8572e33e10dbeb86f497490fbf/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798ec80703636f8572e33e10dbeb86f497490fbf/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=798ec80703636f8572e33e10dbeb86f497490fbf", "patch": "@@ -5019,7 +5019,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  /* Build an expression for `*((base*) &expr)'.  */\n \t  expr = cp_build_unary_op (ADDR_EXPR, expr, 0, complain);\n \t  expr = convert_to_base (expr, build_pointer_type (totype),\n-\t\t\t\t  !c_cast_p, /*nonnull=*/true);\n+\t\t\t\t  !c_cast_p, /*nonnull=*/true, complain);\n \t  expr = cp_build_indirect_ref (expr, RO_IMPLICIT_CONVERSION, complain);\n \t  return expr;\n \t}\n@@ -5142,7 +5142,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n     case ck_ptr:\n       if (convs->base_p)\n \texpr = convert_to_base (expr, totype, !c_cast_p,\n-\t\t\t\t/*nonnull=*/false);\n+\t\t\t\t/*nonnull=*/false, complain);\n       return build_nop (totype, expr);\n \n     case ck_pmem:\n@@ -7584,7 +7584,7 @@ perform_direct_initialization_if_possible (tree type,\n     expr = convert_like_real (conv, expr, NULL_TREE, 0, 0,\n \t\t\t      /*issue_conversion_warnings=*/false,\n \t\t\t      c_cast_p,\n-\t\t\t      tf_warning_or_error);\n+\t\t\t      complain);\n \n   /* Free all the conversions we allocated.  */\n   obstack_free (&conversion_obstack, p);\n@@ -7810,7 +7810,7 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup,\n \t\texpr = convert_to_base (expr,\n \t\t\t\t\tbuild_pointer_type (base_conv_type),\n \t\t\t\t\t/*check_access=*/true,\n-\t\t\t\t\t/*nonnull=*/true);\n+\t\t\t\t\t/*nonnull=*/true, complain);\n \t      expr = build2 (COMPOUND_EXPR, TREE_TYPE (expr), init, expr);\n \t    }\n \t  else"}, {"sha": "07dfb1ce561e93e3a4fbd4300ba444848907058b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798ec80703636f8572e33e10dbeb86f497490fbf/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798ec80703636f8572e33e10dbeb86f497490fbf/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=798ec80703636f8572e33e10dbeb86f497490fbf", "patch": "@@ -506,10 +506,12 @@ build_simple_base_path (tree expr, tree binfo)\n    assumed to be non-NULL.  */\n \n tree\n-convert_to_base (tree object, tree type, bool check_access, bool nonnull)\n+convert_to_base (tree object, tree type, bool check_access, bool nonnull,\n+\t\t tsubst_flags_t complain)\n {\n   tree binfo;\n   tree object_type;\n+  base_access access;\n \n   if (TYPE_PTR_P (TREE_TYPE (object)))\n     {\n@@ -519,8 +521,11 @@ convert_to_base (tree object, tree type, bool check_access, bool nonnull)\n   else\n     object_type = TREE_TYPE (object);\n \n+  access = check_access ? ba_check : ba_unique;\n+  if (!(complain & tf_error))\n+    access |= ba_quiet;\n   binfo = lookup_base (object_type, type,\n-\t\t       check_access ? ba_check : ba_unique,\n+\t\t       access,\n \t\t       NULL);\n   if (!binfo || binfo == error_mark_node)\n     return error_mark_node;\n@@ -575,7 +580,7 @@ build_vfield_ref (tree datum, tree type)\n   /* First, convert to the requested type.  */\n   if (!same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (datum), type))\n     datum = convert_to_base (datum, type, /*check_access=*/false,\n-\t\t\t     /*nonnull=*/true);\n+\t\t\t     /*nonnull=*/true, tf_warning_or_error);\n \n   /* Second, the requested type may not be the owner of its own vptr.\n      If not, convert to the base class that owns it.  We cannot use"}, {"sha": "dd891715fc333c56c56c1487e59ec8b4241f0587", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798ec80703636f8572e33e10dbeb86f497490fbf/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798ec80703636f8572e33e10dbeb86f497490fbf/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=798ec80703636f8572e33e10dbeb86f497490fbf", "patch": "@@ -4569,7 +4569,8 @@ extern void validate_conversion_obstack\t\t(void);\n extern tree build_vfield_ref\t\t\t(tree, tree);\n extern tree build_base_path\t\t\t(enum tree_code, tree,\n \t\t\t\t\t\t tree, int);\n-extern tree convert_to_base\t\t\t(tree, tree, bool, bool);\n+extern tree convert_to_base\t\t\t(tree, tree, bool, bool,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree convert_to_base_statically\t\t(tree, tree);\n extern tree build_vtbl_ref\t\t\t(tree, tree);\n extern tree build_vfn_ref\t\t\t(tree, tree);"}, {"sha": "ce7206a007c934b39599d57a82161e031fad18c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798ec80703636f8572e33e10dbeb86f497490fbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798ec80703636f8572e33e10dbeb86f497490fbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=798ec80703636f8572e33e10dbeb86f497490fbf", "patch": "@@ -1,3 +1,8 @@\n+2010-04-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/41468\n+\t* g++.dg/template/sfinae17.C: New.\n+\n 2010-04-27  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n \n \t* g++.dg/init/pr42844.C: New."}, {"sha": "eb043cbddfbec165814d483d2fb09f17916aff42", "filename": "gcc/testsuite/g++.dg/template/sfinae17.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798ec80703636f8572e33e10dbeb86f497490fbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798ec80703636f8572e33e10dbeb86f497490fbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae17.C?ref=798ec80703636f8572e33e10dbeb86f497490fbf", "patch": "@@ -0,0 +1,28 @@\n+// The conversion from D* to B* is ambiguous, but that should not produce\n+// an error, it should remove the first f overload by SFINAE.\n+\n+#define static_assert(TEST,STR) \\\n+  do { int ar[(TEST)?1:-1]; } while (0);\n+\n+struct B {};\n+\n+struct B1 : B {};\n+struct B2 : B {};\n+\n+struct D : B1, B2 {};\n+\n+template <class T> T create();\n+\n+typedef char one[1];\n+typedef char two[2];\n+\n+template <class T>\n+    one &f(char (*)[sizeof static_cast<T>(create<D *>())]);\n+template <class T>\n+    two &f(...);\n+\n+int main()\n+{\n+  static_assert(sizeof f<int>(0) == sizeof(two), \"\");\n+  static_assert(sizeof f<B *>(0) == sizeof(two), \"\");\n+}"}]}