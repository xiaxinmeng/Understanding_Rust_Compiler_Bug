{"sha": "5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZlNDhiM2RmOGQxZTI3ZDIzNDhlZTY2ZGZlZjdmYzdiOWU0MjU1Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-10-27T11:33:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-10-27T11:33:21Z"}, "message": "utils.c (create_var_decl_1): For a variable declared in the unit...\n\n\t* gcc-interface/utils.c (create_var_decl_1): For a variable declared\n\tin the unit, set TREE_PUBLIC only if it has static storage duration.\n\nFrom-SVN: r216729", "tree": {"sha": "1f095d0f86f138686680abbe2f58773377a05e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f095d0f86f138686680abbe2f58773377a05e8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553/comments", "author": null, "committer": null, "parents": [{"sha": "016adb0549c554d7ac73547a7c75b9a5594b14a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/016adb0549c554d7ac73547a7c75b9a5594b14a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/016adb0549c554d7ac73547a7c75b9a5594b14a3"}], "stats": {"total": 92, "additions": 64, "deletions": 28}, "files": [{"sha": "8e0c881ebd9db85ff477debefb3a83ed03e5284a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553", "patch": "@@ -1,3 +1,8 @@\n+2014-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (create_var_decl_1): For a variable declared\n+\tin the unit, set TREE_PUBLIC only if it has static storage duration.\n+\n 2014-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Apply special treatment"}, {"sha": "ef1798e54ce68426ffce491bf97c0fd8dd5fa206", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553", "patch": "@@ -2309,25 +2309,30 @@ create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n \t\t   bool static_flag, bool const_decl_allowed_p,\n \t\t   struct attrib *attr_list, Node_Id gnat_node)\n {\n-  /* Whether the initializer is a constant initializer.  At the global level\n-     or for an external object or an object to be allocated in static memory,\n-     we check that it is a valid constant expression for use in initializing\n-     a static variable; otherwise, we only check that it is constant.  */\n-  bool init_const\n-    = (var_init != 0\n+  /* Whether the object has static storage duration, either explicitly or by\n+     virtue of being declared at the global level.  */\n+  const bool static_storage = static_flag || global_bindings_p ();\n+\n+  /* Whether the initializer is constant: for an external object or an object\n+     with static storage duration, we check that the initializer is a valid\n+     constant expression for initializing a static variable; otherwise, we\n+     only check that it is constant.  */\n+  const bool init_const\n+    = (var_init\n        && gnat_types_compatible_p (type, TREE_TYPE (var_init))\n-       && (global_bindings_p () || extern_flag || static_flag\n-\t   ? initializer_constant_valid_p (var_init, TREE_TYPE (var_init)) != 0\n+       && (extern_flag || static_storage\n+\t   ? initializer_constant_valid_p (var_init, TREE_TYPE (var_init))\n+\t     != NULL_TREE\n \t   : TREE_CONSTANT (var_init)));\n \n   /* Whether we will make TREE_CONSTANT the DECL we produce here, in which\n-     case the initializer may be used in-lieu of the DECL node (as done in\n+     case the initializer may be used in lieu of the DECL node (as done in\n      Identifier_to_gnu).  This is useful to prevent the need of elaboration\n-     code when an identifier for which such a decl is made is in turn used as\n-     an initializer.  We used to rely on CONST vs VAR_DECL for this purpose,\n-     but extra constraints apply to this choice (see below) and are not\n-     relevant to the distinction we wish to make. */\n-  bool constant_p = const_flag && init_const;\n+     code when an identifier for which such a DECL is made is in turn used\n+     as an initializer.  We used to rely on CONST_DECL vs VAR_DECL for this,\n+     but extra constraints apply to this choice (see below) and they are not\n+     relevant to the distinction we wish to make.  */\n+  const bool constant_p = const_flag && init_const;\n \n   /* The actual DECL node.  CONST_DECL was initially intended for enumerals\n      and may be used for scalars in general but not for aggregates.  */\n@@ -2347,19 +2352,24 @@ create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n       || (type_annotate_only && var_init && !TREE_CONSTANT (var_init)))\n     var_init = NULL_TREE;\n \n-  /* At the global level, an initializer requiring code to be generated\n-     produces elaboration statements.  Check that such statements are allowed,\n-     that is, not violating a No_Elaboration_Code restriction.  */\n-  if (global_bindings_p () && var_init != 0 && !init_const)\n+  /* At the global level, a non-constant initializer generates elaboration\n+     statements.  Check that such statements are allowed, that is to say,\n+     not violating a No_Elaboration_Code restriction.  */\n+  if (var_init && !init_const && global_bindings_p ())\n     Check_Elaboration_Code_Allowed (gnat_node);\n \n   DECL_INITIAL  (var_decl) = var_init;\n   TREE_READONLY (var_decl) = const_flag;\n   DECL_EXTERNAL (var_decl) = extern_flag;\n-  TREE_PUBLIC   (var_decl) = public_flag || extern_flag;\n   TREE_CONSTANT (var_decl) = constant_p;\n-  TREE_THIS_VOLATILE (var_decl) = TREE_SIDE_EFFECTS (var_decl)\n-    = TYPE_VOLATILE (type);\n+\n+  /* We need to allocate static storage for an object with static storage\n+     duration if it isn't external.  */\n+  TREE_STATIC (var_decl) = !extern_flag && static_storage;\n+\n+  /* The object is public if it is external or if it is declared public\n+     and has static storage duration.  */\n+  TREE_PUBLIC (var_decl) = extern_flag || (public_flag && static_storage);\n \n   /* Ada doesn't feature Fortran-like COMMON variables so we shouldn't\n      try to fiddle with DECL_COMMON.  However, on platforms that don't\n@@ -2371,22 +2381,19 @@ create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n       && !have_global_bss_p ())\n     DECL_COMMON (var_decl) = 1;\n \n-  /* At the global binding level, we need to allocate static storage for the\n-     variable if it isn't external.  Otherwise, we allocate automatic storage\n-     unless requested not to.  */\n-  TREE_STATIC (var_decl)\n-    = !extern_flag && (static_flag || global_bindings_p ());\n-\n   /* For an external constant whose initializer is not absolute, do not emit\n      debug info.  In DWARF this would mean a global relocation in a read-only\n      section which runs afoul of the PE-COFF run-time relocation mechanism.  */\n   if (extern_flag\n       && constant_p\n       && var_init\n       && initializer_constant_valid_p (var_init, TREE_TYPE (var_init))\n-\t   != null_pointer_node)\n+\t != null_pointer_node)\n     DECL_IGNORED_P (var_decl) = 1;\n \n+  if (TYPE_VOLATILE (type))\n+    TREE_SIDE_EFFECTS (var_decl) = TREE_THIS_VOLATILE (var_decl) = 1;\n+\n   if (TREE_SIDE_EFFECTS (var_decl))\n     TREE_ADDRESSABLE (var_decl) = 1;\n "}, {"sha": "786b051bb6dfedb5c3d882d3ff774c9f66202cfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553", "patch": "@@ -1,3 +1,8 @@\n+2014-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/concat1.ads: New test.\n+\t* gnat.dg/specs/concat1_pkg.ads: New helper.\n+\n 2014-10-27  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/forwprop-6.c: Scan ccp1 dump instead."}, {"sha": "fcfeacbd4b0faa12a032bf296a86c84fbc092a58", "filename": "gcc/testsuite/gnat.dg/specs/concat1.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fconcat1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fconcat1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fconcat1.ads?ref=5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553", "patch": "@@ -0,0 +1,10 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatd.h\" }\n+\n+with Concat1_Pkg; use Concat1_Pkg;\n+\n+package Concat1 is\n+\n+   C : constant Natural := Id_For (\"_\" & Image_Of);\n+\n+end Concat1;"}, {"sha": "d8863c74a1b34204909f14b3b469ac0acfaa30b3", "filename": "gcc/testsuite/gnat.dg/specs/concat1_pkg.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fconcat1_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fconcat1_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fconcat1_pkg.ads?ref=5fe48b3df8d1e27d2348ee66dfef7fc7b9e42553", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-excess-errors \"cannot generate code\" }\n+\n+package Concat1_Pkg is\n+\n+   function Id_For (Name : String) return Natural;\n+\n+   function Image_Of return String;\n+\n+end Concat1_Pkg;"}]}