{"sha": "879b9073c87cea54033e137b1ac68807ee040bcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc5YjkwNzNjODdjZWE1NDAzM2UxMzdiMWFjNjg4MDdlZTA0MGJjZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-10-13T16:31:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-10-13T16:31:17Z"}, "message": "random.h (discrete_distribution<>::param_type:: param_type()): Default construct the vectors.\n\n2010-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/random.h (discrete_distribution<>::param_type::\n\tparam_type()): Default construct the vectors.\n\t(discrete_distribution<>::param_type::probabilities): Adjust.\n\t(discrete_distribution<>::probabilities): Likewise.\n\t(discrete_distribution<>::max): Likewise.\n\t(piecewise_constant_distribution<>::param_type::\n\tparam_type()): Default construct the vectors.\n\t(piecewise_constant_distribution<>::param_type::intervals): Adjust.\n\t(piecewise_constant_distribution<>::param_type::densities): Likewise.\n\t(piecewise_constant_distribution<>::intervals): Likewise.\n\t(piecewise_constant_distribution<>::densities): Likewise.\n\t(piecewise_constant_distribution<>::min): Likewise.\n\t(piecewise_constant_distribution<>::max): Likewise.\n\t(piecewise_linear_distribution<>::param_type::\n\tparam_type()): Default construct the vectors.\n\t(piecewise_linear_distribution<>::param_type::intervals): Adjust.\n\t(piecewise_linear_distribution<>::param_type::densities): Likewise.\n\t(piecewise_linear_distribution<>::intervals): Likewise.\n\t(piecewise_linear_distribution<>::densities): Likewise.\n\t(piecewise_linear_distribution<>::min): Likewise.\n\t(piecewise_linear_distribution<>::max): Likewise.\n\t* include/bits/random.tcc (discrete_distribution<>::param_type::\n\t_M_initialize): Deal quickly with raw _M_prob equivalent to\n\ta default constructed param_type, just clear the vector.\n\t(discrete_distribution<>::operator()): Early return 0 for a\n\tdefault constructed distribution.\n\t(piecewise_constant_distribution<>::param_type::_M_initialize):\n\tLikewise for _M_int and _M_den.\n\t(piecewise_constant_distribution<>::operator()): Early return\n\tfor a default constructed distribution.\n\t(piecewise_linear_distribution<>::param_type::_M_initialize):\n\tLikewise.\n\t(piecewise_linear_distribution<>::operator()): Early return\n\tfor a default constructed distribution.\n\t* testsuite/26_numerics/random/discrete_distribution/operators/\n\tcall-default.cc: New.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n\toperators/call-default.cc: Likewise.\n\nFrom-SVN: r165427", "tree": {"sha": "ee11340a00980bdc2575e8ebac1445fb12f45800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee11340a00980bdc2575e8ebac1445fb12f45800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/879b9073c87cea54033e137b1ac68807ee040bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/879b9073c87cea54033e137b1ac68807ee040bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/879b9073c87cea54033e137b1ac68807ee040bcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/879b9073c87cea54033e137b1ac68807ee040bcd/comments", "author": null, "committer": null, "parents": [{"sha": "18aebb0e6f5c7bfd7de8cd51bd8203aa20ae8d2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18aebb0e6f5c7bfd7de8cd51bd8203aa20ae8d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18aebb0e6f5c7bfd7de8cd51bd8203aa20ae8d2b"}], "stats": {"total": 257, "additions": 219, "deletions": 38}, "files": [{"sha": "eadf65b3f66581ad6bbb2368f68e5a3f7b295d4c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/879b9073c87cea54033e137b1ac68807ee040bcd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/879b9073c87cea54033e137b1ac68807ee040bcd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=879b9073c87cea54033e137b1ac68807ee040bcd", "patch": "@@ -1,3 +1,44 @@\n+2010-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/random.h (discrete_distribution<>::param_type::\n+\tparam_type()): Default construct the vectors.\n+\t(discrete_distribution<>::param_type::probabilities): Adjust.\n+\t(discrete_distribution<>::probabilities): Likewise.\n+\t(discrete_distribution<>::max): Likewise.\n+\t(piecewise_constant_distribution<>::param_type::\n+\tparam_type()): Default construct the vectors.\n+\t(piecewise_constant_distribution<>::param_type::intervals): Adjust.\n+\t(piecewise_constant_distribution<>::param_type::densities): Likewise.\n+\t(piecewise_constant_distribution<>::intervals): Likewise.\n+\t(piecewise_constant_distribution<>::densities): Likewise.\n+\t(piecewise_constant_distribution<>::min): Likewise.\n+\t(piecewise_constant_distribution<>::max): Likewise.\n+\t(piecewise_linear_distribution<>::param_type::\n+\tparam_type()): Default construct the vectors.\n+\t(piecewise_linear_distribution<>::param_type::intervals): Adjust.\n+\t(piecewise_linear_distribution<>::param_type::densities): Likewise.\n+\t(piecewise_linear_distribution<>::intervals): Likewise.\n+\t(piecewise_linear_distribution<>::densities): Likewise.\n+\t(piecewise_linear_distribution<>::min): Likewise.\n+\t(piecewise_linear_distribution<>::max): Likewise.\n+\t* include/bits/random.tcc (discrete_distribution<>::param_type::\n+\t_M_initialize): Deal quickly with raw _M_prob equivalent to\n+\ta default constructed param_type, just clear the vector.\n+\t(discrete_distribution<>::operator()): Early return 0 for a\n+\tdefault constructed distribution.\n+\t(piecewise_constant_distribution<>::param_type::_M_initialize):\n+\tLikewise for _M_int and _M_den.\n+\t(piecewise_constant_distribution<>::operator()): Early return\n+\tfor a default constructed distribution.\n+\t(piecewise_linear_distribution<>::param_type::_M_initialize):\n+\tLikewise.\n+\t(piecewise_linear_distribution<>::operator()): Early return\n+\tfor a default constructed distribution.\n+\t* testsuite/26_numerics/random/discrete_distribution/operators/\n+\tcall-default.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n+\toperators/call-default.cc: Likewise.\n+\n 2010-10-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/random.h (discrete_distribution<>::param_type):"}, {"sha": "cfb286a3c97c054fa9b4385f19da14237b637ca6", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 80, "deletions": 20, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/879b9073c87cea54033e137b1ac68807ee040bcd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/879b9073c87cea54033e137b1ac68807ee040bcd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=879b9073c87cea54033e137b1ac68807ee040bcd", "patch": "@@ -4697,7 +4697,7 @@ namespace std\n \tfriend class discrete_distribution<_IntType>;\n \n \tparam_type()\n-\t: _M_prob(1, 1.0), _M_cp()\n+\t: _M_prob(), _M_cp()\n \t{ }\n \n \ttemplate<typename _InputIterator>\n@@ -4720,7 +4720,7 @@ namespace std\n \n \tstd::vector<double>\n \tprobabilities() const\n-\t{ return _M_prob; }\n+\t{ return _M_prob.empty() ? std::vector<double>(1, 1.0) : _M_prob; }\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n@@ -4771,7 +4771,10 @@ namespace std\n        */\n       std::vector<double>\n       probabilities() const\n-      { return _M_param.probabilities(); }\n+      {\n+\treturn _M_param._M_prob.empty()\n+\t  ? std::vector<double>(1, 1.0) : _M_param._M_prob;\n+      }\n \n       /**\n        * @brief Returns the parameter set of the distribution.\n@@ -4800,7 +4803,10 @@ namespace std\n        */\n       result_type\n       max() const\n-      { return this->_M_param._M_prob.size() - 1; }\n+      {\n+\treturn _M_param._M_prob.empty()\n+\t  ? result_type(0) : result_type(_M_param._M_prob.size() - 1);\n+      }\n \n       /**\n        * @brief Generating functions.\n@@ -4893,8 +4899,8 @@ namespace std\n \tfriend class piecewise_constant_distribution<_RealType>;\n \n \tparam_type()\n-\t: _M_int(2), _M_den(1, 1.0), _M_cp()\n-\t{ _M_int[1] = _RealType(1); }\n+\t: _M_int(), _M_den(), _M_cp()\n+\t{ }\n \n \ttemplate<typename _InputIteratorB, typename _InputIteratorW>\n \t  param_type(_InputIteratorB __bfirst,\n@@ -4914,11 +4920,20 @@ namespace std\n \n \tstd::vector<_RealType>\n \tintervals() const\n-\t{ return _M_int; }\n+\t{\n+\t  if (_M_int.empty())\n+\t    {\n+\t      std::vector<_RealType> __tmp(2);\n+\t      __tmp[1] = _RealType(1);\n+\t      return __tmp;\n+\t    }\n+\t  else\n+\t    return _M_int;\n+\t}\n \n \tstd::vector<double>\n \tdensities() const\n-\t{ return _M_den; }\n+\t{ return _M_den.empty() ? std::vector<double>(1, 1.0) : _M_den; }\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n@@ -4975,14 +4990,26 @@ namespace std\n        */\n       std::vector<_RealType>\n       intervals() const\n-      { return _M_param.intervals(); }\n+      {\n+\tif (_M_param._M_int.empty())\n+\t  {\n+\t    std::vector<_RealType> __tmp(2);\n+\t    __tmp[1] = _RealType(1);\n+\t    return __tmp;\n+\t  }\n+\telse\n+\t  return _M_param._M_int;\n+      }\n \n       /**\n        * @brief Returns a vector of the probability densities.\n        */\n       std::vector<double>\n       densities() const\n-      { return _M_param.densities(); }\n+      {\n+\treturn _M_param._M_den.empty()\n+\t  ? std::vector<double>(1, 1.0) : _M_param._M_den;\n+      }\n \n       /**\n        * @brief Returns the parameter set of the distribution.\n@@ -5004,14 +5031,20 @@ namespace std\n        */\n       result_type\n       min() const\n-      { return this->_M_param._M_int.front(); }\n+      {\n+\treturn _M_param._M_int.empty()\n+\t  ? result_type(0) : _M_param._M_int.front();\n+      }\n \n       /**\n        * @brief Returns the least upper bound value of the distribution.\n        */\n       result_type\n       max() const\n-      { return this->_M_param._M_int.back(); }\n+      {\n+\treturn _M_param._M_int.empty()\n+\t  ? result_type(1) : _M_param._M_int.back();\n+      }\n \n       /**\n        * @brief Generating functions.\n@@ -5105,8 +5138,8 @@ namespace std\n \tfriend class piecewise_linear_distribution<_RealType>;\n \n \tparam_type()\n-\t: _M_int(2), _M_den(2, 1.0), _M_cp(), _M_m()\n-\t{ _M_int[1] = _RealType(1); }\n+\t: _M_int(), _M_den(), _M_cp(), _M_m()\n+\t{ }\n \n \ttemplate<typename _InputIteratorB, typename _InputIteratorW>\n \t  param_type(_InputIteratorB __bfirst,\n@@ -5126,11 +5159,20 @@ namespace std\n \n \tstd::vector<_RealType>\n \tintervals() const\n-\t{ return _M_int; }\n+\t{\n+\t  if (_M_int.empty())\n+\t    {\n+\t      std::vector<_RealType> __tmp(2);\n+\t      __tmp[1] = _RealType(1);\n+\t      return __tmp;\n+\t    }\n+\t  else\n+\t    return _M_int;\n+\t}\n \n \tstd::vector<double>\n \tdensities() const\n-\t{ return _M_den; }\n+\t{ return _M_den.empty() ? std::vector<double>(2, 1.0) : _M_den; }\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n@@ -5189,15 +5231,27 @@ namespace std\n        */\n       std::vector<_RealType>\n       intervals() const\n-      { return _M_param.intervals(); }\n+      {\n+\tif (_M_param._M_int.empty())\n+\t  {\n+\t    std::vector<_RealType> __tmp(2);\n+\t    __tmp[1] = _RealType(1);\n+\t    return __tmp;\n+\t  }\n+\telse\n+\t  return _M_param._M_int;\n+      }\n \n       /**\n        * @brief Return a vector of the probability densities of the\n        *        distribution.\n        */\n       std::vector<double>\n       densities() const\n-      { return _M_param.densities(); }\n+      {\n+\treturn _M_param._M_den.empty()\n+\t  ? std::vector<double>(2, 1.0) : _M_param._M_den;\n+      }\n \n       /**\n        * @brief Returns the parameter set of the distribution.\n@@ -5219,14 +5273,20 @@ namespace std\n        */\n       result_type\n       min() const\n-      { return this->_M_param._M_int.front(); }\n+      {\n+\treturn _M_param._M_int.empty()\n+\t  ? result_type(0) : _M_param._M_int.front();\n+      }\n \n       /**\n        * @brief Returns the least upper bound value of the distribution.\n        */\n       result_type\n       max() const\n-      { return this->_M_param._M_int.back(); }\n+      {\n+\treturn _M_param._M_int.empty()\n+\t  ? result_type(1) : _M_param._M_int.back();\n+      }\n \n       /**\n        * @brief Generating functions."}, {"sha": "e3faf481423504876e69dfe77014708c18c19f09", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/879b9073c87cea54033e137b1ac68807ee040bcd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/879b9073c87cea54033e137b1ac68807ee040bcd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=879b9073c87cea54033e137b1ac68807ee040bcd", "patch": "@@ -2217,7 +2217,6 @@ namespace std\n       if (_M_prob.size() < 2)\n \t{\n \t  _M_prob.clear();\n-\t  _M_prob.push_back(1.0);\n \t  return;\n \t}\n \n@@ -2257,6 +2256,9 @@ namespace std\n       operator()(_UniformRandomNumberGenerator& __urng,\n \t\t const param_type& __param)\n       {\n+\tif (__param._M_cp.empty())\n+\t  return result_type(0);\n+\n \t__detail::_Adaptor<_UniformRandomNumberGenerator, double>\n \t  __aurng(__urng);\n \n@@ -2330,16 +2332,13 @@ namespace std\n     piecewise_constant_distribution<_RealType>::param_type::\n     _M_initialize()\n     {\n-      if (_M_int.size() < 2)\n+      if (_M_int.size() < 2\n+\t  || (_M_int.size() == 2\n+\t      && _M_int[0] == _RealType(0)\n+\t      && _M_int[1] == _RealType(1)))\n \t{\n \t  _M_int.clear();\n-\t  _M_int.reserve(2);\n-\t  _M_int.push_back(_RealType(0));\n-\t  _M_int.push_back(_RealType(1));\n-\n \t  _M_den.clear();\n-\t  _M_den.push_back(1.0);\n-\n \t  return;\n \t}\n \n@@ -2433,6 +2432,9 @@ namespace std\n \t  __aurng(__urng);\n \n \tconst double __p = __aurng();\n+\tif (__param._M_cp.empty())\n+\t  return __p;\n+\n \tauto __pos = std::lower_bound(__param._M_cp.begin(),\n \t\t\t\t      __param._M_cp.end(), __p);\n \tconst size_t __i = __pos - __param._M_cp.begin();\n@@ -2519,18 +2521,14 @@ namespace std\n     piecewise_linear_distribution<_RealType>::param_type::\n     _M_initialize()\n     {\n-      if (_M_int.size() < 2)\n+      if (_M_int.size() < 2\n+\t  || (_M_int.size() == 2\n+\t      && _M_int[0] == _RealType(0)\n+\t      && _M_int[1] == _RealType(1)\n+\t      && _M_den[0] == _M_den[1]))\n \t{\n \t  _M_int.clear();\n-\t  _M_int.reserve(2);\n-\t  _M_int.push_back(_RealType(0));\n-\t  _M_int.push_back(_RealType(1));\n-\n \t  _M_den.clear();\n-\t  _M_den.reserve(2);\n-\t  _M_den.push_back(1.0);\n-\t  _M_den.push_back(1.0);\n-\n \t  return;\n \t}\n \n@@ -2623,7 +2621,7 @@ namespace std\n \t  __aurng(__urng);\n \n \tconst double __p = __aurng();\n-\tif (__param._M_m.empty())\n+\tif (__param._M_cp.empty())\n \t  return __p;\n \n \tauto __pos = std::lower_bound(__param._M_cp.begin(),"}, {"sha": "11e0d6879f2f0c776b2fd5e1026896d51e8fd950", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/operators/call-default.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/879b9073c87cea54033e137b1ac68807ee040bcd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fcall-default.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/879b9073c87cea54033e137b1ac68807ee040bcd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fcall-default.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fcall-default.cc?ref=879b9073c87cea54033e137b1ac68807ee040bcd", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.5.1 Class template discrete_distribution\n+//   [rand.dist.samp.discrete]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  std::discrete_distribution<> u;\n+  std::minstd_rand0 rng;\n+\n+  u(rng);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fe2b9620a41ce5e66c3d82159bafbc4f351420f3", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/operators/call-default.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/879b9073c87cea54033e137b1ac68807ee040bcd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fcall-default.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/879b9073c87cea54033e137b1ac68807ee040bcd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fcall-default.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fcall-default.cc?ref=879b9073c87cea54033e137b1ac68807ee040bcd", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.5.2 Class template piecewise_constant_distribution\n+//   [rand.dist.samp.pconst]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  std::piecewise_constant_distribution<> u;\n+  std::minstd_rand0 rng;\n+\n+  u(rng);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}