{"sha": "0fab64a344486770d0acc827ab6b670543d58a15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZhYjY0YTM0NDQ4Njc3MGQwYWNjODI3YWI2YjY3MDU0M2Q1OGExNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-01-09T19:55:13Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-01-09T19:55:13Z"}, "message": "expr.h (expand_expr): Make it a macro, not a function.\n\n\t* expr.h (expand_expr): Make it a macro, not a function.\n\t(expand_expr_real): New function.\n\t* expr.c (store_expr): Adjust logic for deciding whether or not to\n\tcopy the value returned by expand_expr.\n\t(expand_expr): Rename to ...\n\t(expand_expr_real): ... this.  Add alt_rtl parameter.  Adjust\n\tcalls to language hooks.\n\t* c-common.h (c_expand_expr): Adjust prototype.\n\t* c-common.c (c_expand_expr): Add alt_rtl parameter.\n\t* langhooks-def.h (lhd_expand_expr): Change prototype.\n\t* langhooks.c (lhd_expand_expr): Add all_rtl parameter.\n\t* langhooks.h (lang_hooks): Change type of expand_expr.\n\t* stmt.c (stmt_status): Add x_last_expr_alt_rtl.\n\t(last_expr_alt_rtl): Likewise.\n\t(expand_expr_stmt_value): Set last_expr_alt_rtl.\n\t(clear_last_expr): Clear it.\n\t(expand_end_stmt_expr): Set RTL_EXPR_ATL_RTL.\n\t(expand_end_bindings): Save and restor last_expr_alt_rtl.\n\t* tree.def (RTL_EXPR): Give it an additional operand.\n\t* tree.h (RTL_EXPR_ALT_RTL): New macro.\n\n\t* misc.c (gnat_expand_expr): Add alt_rtl parameter.\n\n\t* cp-tree.h (cxx_expand_expr): Change prototype.\n\t* expr.c (cxx_expand_expr): Add alt_rtl parameter.\n\n\t* java-tree.h (java_expand_expr): Change prototype.\n\t* expr.c (java_expand_expr): Add alt_rtl parameter.\n\nFrom-SVN: r75594", "tree": {"sha": "e2935a8f65ac880227cefaf160bb48b5a018326f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2935a8f65ac880227cefaf160bb48b5a018326f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fab64a344486770d0acc827ab6b670543d58a15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fab64a344486770d0acc827ab6b670543d58a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fab64a344486770d0acc827ab6b670543d58a15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fab64a344486770d0acc827ab6b670543d58a15/comments", "author": null, "committer": null, "parents": [{"sha": "2fca049fe8aada42f982aff9498eb45d3a2db302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fca049fe8aada42f982aff9498eb45d3a2db302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fca049fe8aada42f982aff9498eb45d3a2db302"}], "stats": {"total": 158, "additions": 116, "deletions": 42}, "files": [{"sha": "95c1eaa9d094a44274ee037dfbde3fe174a2ab1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -1,3 +1,26 @@\n+2004-01-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* expr.h (expand_expr): Make it a macro, not a function.\n+\t(expand_expr_real): New function.\n+\t* expr.c (store_expr): Adjust logic for deciding whether or not to\n+\tcopy the value returned by expand_expr.\n+\t(expand_expr): Rename to ...\n+\t(expand_expr_real): ... this.  Add alt_rtl parameter.  Adjust\n+\tcalls to language hooks.\n+\t* c-common.h (c_expand_expr): Adjust prototype.\n+\t* c-common.c (c_expand_expr): Add alt_rtl parameter.\n+\t* langhooks-def.h (lhd_expand_expr): Change prototype.\n+\t* langhooks.c (lhd_expand_expr): Add all_rtl parameter.\n+\t* langhooks.h (lang_hooks): Change type of expand_expr.\n+\t* stmt.c (stmt_status): Add x_last_expr_alt_rtl.\n+\t(last_expr_alt_rtl): Likewise.\n+\t(expand_expr_stmt_value): Set last_expr_alt_rtl.\n+\t(clear_last_expr): Clear it.\n+\t(expand_end_stmt_expr): Set RTL_EXPR_ATL_RTL.\n+\t(expand_end_bindings): Save and restor last_expr_alt_rtl.\n+\t* tree.def (RTL_EXPR): Give it an additional operand.\n+\t* tree.h (RTL_EXPR_ALT_RTL): New macro.\n+\t\n 2004-01-09  Kazuhiro Inaoka  <inaoka.kazuhiro@renesas.com>\n \n \t* config/m32r/m32r.h (TARGET_CPU_CPP_BUILTINS): Add __m32r__."}, {"sha": "d2796d754bfa798a11596f051c56dc23fb415a0d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -1,3 +1,7 @@\n+2004-01-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* misc.c (gnat_expand_expr): Add alt_rtl parameter.\n+\n 2004-01-07  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* link.c [sgi] (shared_libgnat_default): Change to STATIC."}, {"sha": "43a63dedc8158f6a5143ff96f8f76d32ea93dfc3", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -96,7 +96,8 @@ static const char *gnat_printable_name\t(tree, int);\n static tree gnat_eh_runtime_type\t(tree);\n static int gnat_eh_type_covers\t\t(tree, tree);\n static void gnat_parse_file\t\t(int);\n-static rtx gnat_expand_expr\t\t(tree, rtx, enum machine_mode, int);\n+static rtx gnat_expand_expr\t\t(tree, rtx, enum machine_mode, int,\n+\t\t\t\t\t rtx *);\n static void internal_error_function\t(const char *, va_list *);\n static void gnat_adjust_rli\t\t(record_layout_info);\n \n@@ -550,7 +551,8 @@ gnat_printable_name (tree decl, int verbosity)\n    here are TRANSFORM_EXPR, ALLOCATE_EXPR, USE_EXPR and NULL_EXPR.  */\n \n static rtx\n-gnat_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier)\n+gnat_expand_expr (tree exp, rtx target, enum machine_mode tmode, \n+\t\t  int modifier, rtx *alt_rtl)\n {\n   tree type = TREE_TYPE (exp);\n   tree new;\n@@ -606,8 +608,8 @@ gnat_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier)\n       return target;\n \n     case GNAT_NOP_EXPR:\n-      return expand_expr (build1 (NOP_EXPR, type, TREE_OPERAND (exp, 0)),\n-\t\t\t  target, tmode, modifier);\n+      return expand_expr_real (build1 (NOP_EXPR, type, TREE_OPERAND (exp, 0)),\n+\t\t\t       target, tmode, modifier, alt_rtl);\n \n     case UNCONSTRAINED_ARRAY_REF:\n       /* If we are evaluating just for side-effects, just evaluate our\n@@ -623,7 +625,7 @@ gnat_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier)\n       gigi_abort (201);\n     }\n \n-  return expand_expr (new, target, tmode, modifier);\n+  return expand_expr_real (new, target, tmode, modifier, alt_rtl);\n }\n \n /* Adjusts the RLI used to layout a record after all the fields have been"}, {"sha": "e12a9c0fea840149bfe14880eb203c61f4b3e415", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -4054,8 +4054,9 @@ finish_label_address_expr (tree label)\n /* Hook used by expand_expr to expand language-specific tree codes.  */\n \n rtx\n-c_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier)\n-     /* Actually enum_modifier.  */\n+c_expand_expr (tree exp, rtx target, enum machine_mode tmode, \n+\t       int modifier /* Actually enum_modifier.  */,\n+\t       rtx *alt_rtl)\n {\n   switch (TREE_CODE (exp))\n     {\n@@ -4147,7 +4148,7 @@ c_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier)\n \t   literal, then return the variable.  */\n \ttree decl = COMPOUND_LITERAL_EXPR_DECL (exp);\n \temit_local_var (decl);\n-\treturn expand_expr (decl, target, tmode, modifier);\n+\treturn expand_expr_real (decl, target, tmode, modifier, alt_rtl);\n       }\n \n     default:"}, {"sha": "b87209e6ae019afb1a5c288fa3e8510348e71e21", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -1279,7 +1279,7 @@ extern tree finish_label_address_expr (tree);\n    different implementations.  Used in c-common.c.  */\n extern tree lookup_label (tree);\n \n-extern rtx c_expand_expr (tree, rtx, enum machine_mode, int);\n+extern rtx c_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n \n extern int c_safe_from_p (rtx, tree);\n "}, {"sha": "0c4ab8cb2c2e03c32789fa2bebcdac78e83c3955", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -1,3 +1,8 @@\n+2004-01-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (cxx_expand_expr): Change prototype.\n+\t* expr.c (cxx_expand_expr): Add alt_rtl parameter.\n+\n 2004-01-08  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/12573"}, {"sha": "ac6ecdfed7c55922a09a4494a73250040de14adb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -3785,8 +3785,8 @@ extern tree eh_type_info\t\t\t(tree);\n \n /* in expr.c */\n extern rtx cxx_expand_expr\t\t\t(tree, rtx,\n-\t\t\t\t\t\t\t enum machine_mode,\n-\t\t\t\t\t\t\t int);\n+\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t int, rtx *);\n extern tree cplus_expand_constant               (tree);\n \n /* friend.c */"}, {"sha": "14453bf753415e58f1e6f3e43a7886bcbcc41740", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -75,7 +75,8 @@ cplus_expand_constant (tree cst)\n /* Hook used by expand_expr to expand language-specific tree codes.  */\n \n rtx\n-cxx_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier)\n+cxx_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier,\n+\t\t rtx *alt_rtl)\n {\n   tree type = TREE_TYPE (exp);\n   enum machine_mode mode = TYPE_MODE (type);\n@@ -119,7 +120,7 @@ cxx_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier)\n \t\t\t  modifier);\n \n     default:\n-      return c_expand_expr (exp, target, tmode, modifier);\n+      return c_expand_expr (exp, target, tmode, modifier, alt_rtl);\n     }\n   abort ();\n   /* NOTREACHED */"}, {"sha": "6442b3d308cc16964b410b033a452c1e34ffc306", "filename": "gcc/expr.c", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -4026,6 +4026,7 @@ rtx\n store_expr (tree exp, rtx target, int want_value)\n {\n   rtx temp;\n+  rtx alt_rtl = NULL_RTX;\n   int dont_return_target = 0;\n   int dont_store_target = 0;\n \n@@ -4207,8 +4208,10 @@ store_expr (tree exp, rtx target, int want_value)\n     }\n   else\n     {\n-      temp = expand_expr (exp, target, GET_MODE (target),\n-\t\t\t  want_value & 2 ? EXPAND_STACK_PARM : EXPAND_NORMAL);\n+      temp = expand_expr_real (exp, target, GET_MODE (target),\n+\t\t\t       (want_value & 2 \n+\t\t\t\t? EXPAND_STACK_PARM : EXPAND_NORMAL),\n+\t\t\t       &alt_rtl);\n       /* Return TARGET if it's a specified hardware register.\n \t If TARGET is a volatile mem ref, either return TARGET\n \t or return a reg copied *from* TARGET; ANSI requires this.\n@@ -4256,10 +4259,7 @@ store_expr (tree exp, rtx target, int want_value)\n       /* If store_expr stores a DECL whose DECL_RTL(exp) == TARGET,\n \t but TARGET is not valid memory reference, TEMP will differ\n \t from TARGET although it is really the same location.  */\n-      && !(GET_CODE (target) == MEM\n-\t   && GET_CODE (XEXP (target, 0)) != QUEUED\n-\t   && (!memory_address_p (GET_MODE (target), XEXP (target, 0))\n-\t       || (flag_force_addr && !REG_P (XEXP (target, 0)))))\n+      && !(alt_rtl && rtx_equal_p (alt_rtl, target))\n       /* If there's nothing to copy, don't bother.  Don't call expr_size\n \t unless necessary, because some front-ends (C++) expr_size-hook\n \t aborts on objects that are not supposed to be bit-copied or\n@@ -6200,11 +6200,17 @@ expand_operands (tree exp0, tree exp1, rtx target, rtx *op0, rtx *op1,\n    marked TARGET so that it's safe from being trashed by libcalls.  We\n    don't want to use TARGET for anything but the final result;\n    Intermediate values must go elsewhere.   Additionally, calls to\n-   emit_block_move will be flagged with BLOCK_OP_CALL_PARM.  */\n+   emit_block_move will be flagged with BLOCK_OP_CALL_PARM.  \n+\n+   If EXP is a VAR_DECL whose DECL_RTL was a MEM with an invalid\n+   address, and ALT_RTL is non-NULL, then *ALT_RTL is set to the\n+   DECL_RTL of the VAR_DECL.  *ALT_RTL is also set if EXP is a\n+   COMPOUND_EXPR whose second argument is such a VAR_DECL, and so on\n+   recursively.  */\n \n rtx\n-expand_expr (tree exp, rtx target, enum machine_mode tmode,\n-\t     enum expand_modifier modifier)\n+expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n+\t\t  enum expand_modifier modifier, rtx *alt_rtl)\n {\n   rtx op0, op1, temp;\n   tree type = TREE_TYPE (exp);\n@@ -6413,8 +6419,12 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t\t       XEXP (DECL_RTL (exp), 0))\n \t\t   || (flag_force_addr\n \t\t       && GET_CODE (XEXP (DECL_RTL (exp), 0)) != REG)))\n-\ttemp = replace_equiv_address (DECL_RTL (exp),\n-\t\t\t\t      copy_rtx (XEXP (DECL_RTL (exp), 0)));\n+\t{\n+\t  if (alt_rtl)\n+\t    *alt_rtl = DECL_RTL (exp);\n+\t  temp = replace_equiv_address (DECL_RTL (exp),\n+\t\t\t\t\tcopy_rtx (XEXP (DECL_RTL (exp), 0)));\n+\t}\n \n       /* If we got something, return it.  But first, set the alignment\n \t if the address is a register.  */\n@@ -6741,6 +6751,8 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n \t}\n       preserve_rtl_expr_result (RTL_EXPR_RTL (exp));\n       free_temps_for_rtl_expr (exp);\n+      if (alt_rtl)\n+\t*alt_rtl = RTL_EXPR_ALT_RTL (exp);\n       return RTL_EXPR_RTL (exp);\n \n     case CONSTRUCTOR:\n@@ -7465,7 +7477,8 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n \t  if (DECL_BUILT_IN_CLASS (TREE_OPERAND (TREE_OPERAND (exp, 0), 0))\n \t      == BUILT_IN_FRONTEND)\n \t    return (*lang_hooks.expand_expr) (exp, original_target,\n-\t\t\t\t\t      tmode, modifier);\n+\t\t\t\t\t      tmode, modifier,\n+\t\t\t\t\t      alt_rtl);\n \t  else\n \t    return expand_builtin (exp, target, subtarget, tmode, ignore);\n \t}\n@@ -8228,9 +8241,9 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n     case COMPOUND_EXPR:\n       expand_expr (TREE_OPERAND (exp, 0), const0_rtx, VOIDmode, 0);\n       emit_queue ();\n-      return expand_expr (TREE_OPERAND (exp, 1),\n-\t\t\t  (ignore ? const0_rtx : target),\n-\t\t\t  VOIDmode, modifier);\n+      return expand_expr_real (TREE_OPERAND (exp, 1),\n+\t\t\t       (ignore ? const0_rtx : target),\n+\t\t\t       VOIDmode, modifier, alt_rtl);\n \n     case COND_EXPR:\n       /* If we would have a \"singleton\" (see below) were it not for a\n@@ -9043,7 +9056,8 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n       abort ();\n \n     default:\n-      return (*lang_hooks.expand_expr) (exp, original_target, tmode, modifier);\n+      return (*lang_hooks.expand_expr) (exp, original_target, tmode, modifier,\n+\t\t\t\t\talt_rtl);\n     }\n \n   /* Here to do an ordinary binary operator, generating an instruction"}, {"sha": "bdfd4902f924ada974f37f8ffe76787efe2499b2", "filename": "gcc/expr.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -498,7 +498,10 @@ extern tree find_placeholder (tree, tree *);\n /* Generate code for computing expression EXP.\n    An rtx for the computed value is returned.  The value is never null.\n    In the case of a void EXP, const0_rtx is returned.  */\n-extern rtx expand_expr (tree, rtx, enum machine_mode, enum expand_modifier);\n+#define expand_expr(EXP, TARGET, MODE, MODIFIER) \\\n+  expand_expr_real((EXP), (TARGET), (MODE), (MODIFIER), NULL)\n+extern rtx expand_expr_real (tree, rtx, enum machine_mode, \n+\t\t\t     enum expand_modifier, rtx *);\n \n /* At the start of a function, record that we have no previously-pushed\n    arguments waiting to be popped.  */"}, {"sha": "2a8bd6ef696f87aa15d65824d3355b20fdab9cb5", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -1,3 +1,8 @@\n+2004-01-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* java-tree.h (java_expand_expr): Change prototype.\n+\t* expr.c (java_expand_expr): Add alt_rtl parameter.\n+\n 2004-01-09  Andrew Haley  <aph@redhat.com>\n \n \tPR java/12755:"}, {"sha": "6b1c0325b0d605f7f21e1b1642257ebb02b7659c", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -2448,7 +2448,8 @@ get_primitive_array_vtable (tree elt)\n \n struct rtx_def *\n java_expand_expr (tree exp, rtx target, enum machine_mode tmode,\n-\t\t  int modifier /* Actually an enum expand_modifier.  */)\n+\t\t  int modifier /* Actually an enum expand_modifier. */,\n+\t\t  rtx *alt_rtl ATTRIBUTE_UNUSED)\n {\n   tree current;\n "}, {"sha": "9d4fcdd27a73aabe38652768a9fa628af1d4210a", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -1326,7 +1326,7 @@ extern tree decl_constant_value (tree);\n extern void java_mark_class_local (tree);\n \n #if defined(RTX_CODE) && defined (HAVE_MACHINE_MODES)\n-struct rtx_def * java_expand_expr (tree, rtx, enum machine_mode, int); \n+struct rtx_def * java_expand_expr (tree, rtx, enum machine_mode, int, rtx *); \n #endif\n extern void java_inlining_merge_static_initializers (tree, void *);\n extern void java_inlining_map_static_initializers (tree, void *);"}, {"sha": "c9ba0420f1dcf87b9ff821cc3aa6d3396ef872d3", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -55,7 +55,7 @@ extern int lhd_unsafe_for_reeval (tree);\n extern void lhd_clear_binding_stack (void);\n extern void lhd_print_tree_nothing (FILE *, tree, int);\n extern const char *lhd_decl_printable_name (tree, int);\n-extern rtx lhd_expand_expr (tree, rtx, enum machine_mode, int);\n+extern rtx lhd_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n extern void lhd_print_error_function (struct diagnostic_context *,\n \t\t\t\t      const char *);\n extern void lhd_set_decl_assembler_name (tree);"}, {"sha": "5bce71057cc803c782a5bdc1c3be84ae069511b0", "filename": "gcc/langhooks.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -266,7 +266,8 @@ hook_get_alias_set_0 (tree t ATTRIBUTE_UNUSED)\n rtx\n lhd_expand_expr (tree t ATTRIBUTE_UNUSED, rtx r ATTRIBUTE_UNUSED,\n \t\t enum machine_mode mm ATTRIBUTE_UNUSED,\n-\t\t int em ATTRIBUTE_UNUSED)\n+\t\t int em ATTRIBUTE_UNUSED,\n+\t\t rtx *a ATTRIBUTE_UNUSED)\n {\n   abort ();\n }"}, {"sha": "fcc078ccf338a7a39ac2b021721f7792f9276fc6", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -283,7 +283,7 @@ struct lang_hooks\n \n   /* Called by expand_expr for language-specific tree codes.\n      Fourth argument is actually an enum expand_modifier.  */\n-  rtx (*expand_expr) (tree, rtx, enum machine_mode, int);\n+  rtx (*expand_expr) (tree, rtx, enum machine_mode, int, rtx *);\n \n   /* Prepare expr to be an argument of a TRUTH_NOT_EXPR or other logical\n      operation."}, {"sha": "1a3d9188f30cd4f5dc15c1e326e7f968ee2b1ae6", "filename": "gcc/stmt.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -361,6 +361,7 @@ struct stmt_status GTY(())\n      record the expr's type and its RTL value here.  */\n   tree x_last_expr_type;\n   rtx x_last_expr_value;\n+  rtx x_last_expr_alt_rtl;\n \n   /* Nonzero if within a ({...}) grouping, in which case we must\n      always compute a value for each expr-stmt in case it is the last one.  */\n@@ -383,6 +384,7 @@ struct stmt_status GTY(())\n #define current_block_start_count (cfun->stmt->x_block_start_count)\n #define last_expr_type (cfun->stmt->x_last_expr_type)\n #define last_expr_value (cfun->stmt->x_last_expr_value)\n+#define last_expr_alt_rtl (cfun->stmt->x_last_expr_alt_rtl)\n #define expr_stmts_for_value (cfun->stmt->x_expr_stmts_for_value)\n #define emit_locus (cfun->stmt->x_emit_locus)\n #define goto_fixup_chain (cfun->stmt->x_goto_fixup_chain)\n@@ -2140,6 +2142,7 @@ expand_expr_stmt_value (tree exp, int want_value, int maybe_last)\n {\n   rtx value;\n   tree type;\n+  rtx alt_rtl = NULL;\n \n   if (want_value == -1)\n     want_value = expr_stmts_for_value != 0;\n@@ -2166,8 +2169,8 @@ expand_expr_stmt_value (tree exp, int want_value, int maybe_last)\n   /* The call to `expand_expr' could cause last_expr_type and\n      last_expr_value to get reset.  Therefore, we set last_expr_value\n      and last_expr_type *after* calling expand_expr.  */\n-  value = expand_expr (exp, want_value ? NULL_RTX : const0_rtx,\n-\t\t       VOIDmode, 0);\n+  value = expand_expr_real (exp, want_value ? NULL_RTX : const0_rtx,\n+\t\t\t    VOIDmode, 0, &alt_rtl);\n   type = TREE_TYPE (exp);\n \n   /* If all we do is reference a volatile value in memory,\n@@ -2203,6 +2206,7 @@ expand_expr_stmt_value (tree exp, int want_value, int maybe_last)\n   if (want_value)\n     {\n       last_expr_value = value;\n+      last_expr_alt_rtl = alt_rtl;\n       last_expr_type = type;\n     }\n \n@@ -2322,6 +2326,7 @@ clear_last_expr (void)\n {\n   last_expr_type = NULL_TREE;\n   last_expr_value = NULL_RTX;\n+  last_expr_alt_rtl = NULL_RTX;\n }\n \n /* Begin a statement-expression, i.e., a series of statements which\n@@ -2369,6 +2374,7 @@ expand_end_stmt_expr (tree t)\n   if (! last_expr_value || ! last_expr_type)\n     {\n       last_expr_value = const0_rtx;\n+      last_expr_alt_rtl = NULL_RTX;\n       last_expr_type = void_type_node;\n     }\n   else if (GET_CODE (last_expr_value) != REG && ! CONSTANT_P (last_expr_value))\n@@ -2379,6 +2385,7 @@ expand_end_stmt_expr (tree t)\n \n   TREE_TYPE (t) = last_expr_type;\n   RTL_EXPR_RTL (t) = last_expr_value;\n+  RTL_EXPR_ALT_RTL (t) = last_expr_alt_rtl;\n   RTL_EXPR_SEQUENCE (t) = get_insns ();\n \n   rtl_expr_chain = tree_cons (NULL_TREE, t, rtl_expr_chain);\n@@ -3801,6 +3808,7 @@ expand_end_bindings (tree vars, int mark_ends, int dont_jump_in)\n       /* Don't let cleanups affect ({...}) constructs.  */\n       int old_expr_stmts_for_value = expr_stmts_for_value;\n       rtx old_last_expr_value = last_expr_value;\n+      rtx old_last_expr_alt_rtl = last_expr_alt_rtl;\n       tree old_last_expr_type = last_expr_type;\n       expr_stmts_for_value = 0;\n \n@@ -3817,6 +3825,7 @@ expand_end_bindings (tree vars, int mark_ends, int dont_jump_in)\n \n       expr_stmts_for_value = old_expr_stmts_for_value;\n       last_expr_value = old_last_expr_value;\n+      last_expr_alt_rtl = old_last_expr_alt_rtl;\n       last_expr_type = old_last_expr_type;\n \n       /* Restore the stack level.  */"}, {"sha": "0419faeaff028d85bb9ec3570a9254f7fc00759a", "filename": "gcc/tree.def", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -730,11 +730,15 @@ DEFTREECODE (UNSAVE_EXPR, \"unsave_expr\", 'e', 1)\n /* Represents something whose RTL has already been expanded as a\n    sequence which should be emitted when this expression is expanded.\n    The first operand is the RTL to emit.  It is the first of a chain\n-   of insns.  The second is the RTL expression for the result.  Any\n-   temporaries created during the building of the RTL_EXPR can be\n-   reused once the RTL_EXPR has been expanded, with the exception of\n-   the RTL_EXPR_RTL.  */\n-DEFTREECODE (RTL_EXPR, \"rtl_expr\", 'e', 2)\n+   of insns.  The second is the RTL expression for the result.  The\n+   third operand is the \"alternate RTL expression\" for the result, if\n+   any; if the second argument is the DECL_RTL for a VAR_DECL, but\n+   with an invalid memory address replaced by a valid one, then the\n+   third operand will be the original DECL_RTL.  Any temporaries\n+   created during the building of the RTL_EXPR can be reused once the\n+   RTL_EXPR has been expanded, with the exception of the\n+   RTL_EXPR_RTL.  */\n+DEFTREECODE (RTL_EXPR, \"rtl_expr\", 'e', 3)\n \n /* & in C.  Value is the address at which the operand's value resides.\n    Operand may have any mode.  Result mode is Pmode.  */"}, {"sha": "aa967d9f5e0edcb71eba76f26b91ec911c053866", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fab64a344486770d0acc827ab6b670543d58a15/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0fab64a344486770d0acc827ab6b670543d58a15", "patch": "@@ -794,6 +794,7 @@ struct tree_vec GTY(())\n /* In a RTL_EXPR node.  */\n #define RTL_EXPR_SEQUENCE(NODE) TREE_RTL_OPERAND_CHECK (NODE, RTL_EXPR, 0)\n #define RTL_EXPR_RTL(NODE) TREE_RTL_OPERAND_CHECK (NODE, RTL_EXPR, 1)\n+#define RTL_EXPR_ALT_RTL(NODE) TREE_RTL_OPERAND_CHECK (NODE, RTL_EXPR, 2)\n \n /* In a WITH_CLEANUP_EXPR node.  */\n #define WITH_CLEANUP_EXPR_RTL(NODE) \\"}]}