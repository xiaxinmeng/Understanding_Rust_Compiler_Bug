{"sha": "3b27886e3f68a942f551a2689831ae6a5d1b172b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IyNzg4NmUzZjY4YTk0MmY1NTFhMjY4OTgzMWFlNmE1ZDFiMTcyYg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-12-17T22:43:55Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-12-17T22:43:55Z"}, "message": "Makefile.in: Update dependencies.\n\n\t* Makefile.in: Update dependencies.\n\t* c-lang.c: Remove unnecessary includes.\n\t(deferred_fns, start_cdtor, finish_cdtor, defer_fn): Move to\n\tc-objc-common.c.\n\t(finish_file): Move body to c_common_finish_file.\n\t* c-objc-common.c: Include varray.h and ggc.h.\n\t(deferred_fns, start_cdtor, finish_cdtor, defer_fn,\n\texpand_deferred_fns, c_objc_common_finish_file): Moved from c-lang.c.\n\t(c_objc_common_init): Initialize deferred function array.\n\t* c-tree.h (c_objc_common_finish_file,\n\tstatic_ctors, static_dtors): New.\nobjc:\n\t* Make-lang.in: Update dependencies.\n\t* objc/objc-act.c: Don't include varray.h.\n\t(defer_fn, deferred_fns): Move to c-objc-common.c.\n\t(objc_init): Similarly for initialization of it.\n\t(finish_file): Move some to c-objc-common.c, use\n\tc_objc_common_finish_file.\n\nFrom-SVN: r48134", "tree": {"sha": "d63648bac97b145754a00dc4c1d8593cc1d3ae79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d63648bac97b145754a00dc4c1d8593cc1d3ae79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b27886e3f68a942f551a2689831ae6a5d1b172b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b27886e3f68a942f551a2689831ae6a5d1b172b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b27886e3f68a942f551a2689831ae6a5d1b172b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b27886e3f68a942f551a2689831ae6a5d1b172b/comments", "author": null, "committer": null, "parents": [{"sha": "9e78e45a8dc2e9bf2886872e4907828ecc1cee57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e78e45a8dc2e9bf2886872e4907828ecc1cee57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e78e45a8dc2e9bf2886872e4907828ecc1cee57"}], "stats": {"total": 324, "additions": 164, "deletions": 160}, "files": [{"sha": "0a943c52d0d0e618cbf58c9ed71e0cfa89beda7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b27886e3f68a942f551a2689831ae6a5d1b172b", "patch": "@@ -1,3 +1,24 @@\n+2001-12-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in: Update dependencies.\n+\t* c-lang.c: Remove unnecessary includes.\n+\t(deferred_fns, start_cdtor, finish_cdtor, defer_fn): Move to\n+\tc-objc-common.c.\n+\t(finish_file): Move body to c_common_finish_file.\n+\t* c-objc-common.c: Include varray.h and ggc.h.\n+\t(deferred_fns, start_cdtor, finish_cdtor, defer_fn,\n+\texpand_deferred_fns, c_objc_common_finish_file): Moved from c-lang.c.\n+\t(c_objc_common_init): Initialize deferred function array.\n+\t* c-tree.h (c_objc_common_finish_file,\n+\tstatic_ctors, static_dtors): New.\n+objc:\n+\t* Make-lang.in: Update dependencies.\n+\t* objc/objc-act.c: Don't include varray.h.\n+\t(defer_fn, deferred_fns): Move to c-objc-common.c.\n+\t(objc_init): Similarly for initialization of it.\n+\t(finish_file): Move some to c-objc-common.c, use\n+\tc_objc_common_finish_file.\n+\n 2001-12-17  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/rs6000.c: Remove is_gpr_return_reg prototype."}, {"sha": "8f7cabf86f95d6b925f54820606895aae5aeca95", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3b27886e3f68a942f551a2689831ae6a5d1b172b", "patch": "@@ -1157,15 +1157,15 @@ c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) $(C_TREE_H) \\\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     $(TARGET_H) flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H)\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n-    $(GGC_H) toplev.h function.h $(VARRAY_H) \\\n-    $(RTL_H) $(EXPR_H) langhooks.h langhooks-def.h\n+    langhooks.h langhooks-def.h\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) c-lex.h \\\n     debug.h $(C_TREE_H) \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n     mbchar.h $(CPPLIB_H) $(EXPR_H) $(TM_P_H)\n c-objc-common.o : c-objc-common.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n     $(C_TREE_H) $(RTL_H) insn-config.h integrate.h $(EXPR_H) $(C_TREE_H) \\\n-    flags.h toplev.h tree-inline.h diagnostic.h integrate.h\n+    flags.h toplev.h tree-inline.h diagnostic.h integrate.h $(VARRAY_H) \\\n+    $(GGC_H)\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     flags.h toplev.h\n c-convert.o : c-convert.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h toplev.h"}, {"sha": "497d32af1223e492b270eb5b1a3eba13c66a09e7", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 127, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=3b27886e3f68a942f551a2689831ae6a5d1b172b", "patch": "@@ -23,14 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"config.h\"\n #include \"system.h\"\n #include \"tree.h\"\n-#include \"function.h\"\n-#include \"toplev.h\"\n-#include \"flags.h\"\n-#include \"ggc.h\"\n-#include \"rtl.h\"\n-#include \"expr.h\"\n #include \"c-tree.h\"\n-#include \"varray.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n \n@@ -78,8 +71,6 @@ static void c_post_options PARAMS ((void));\n /* Each front end provides its own.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n-static varray_type deferred_fns;\n-\n /* Post-switch processing.  */\n static void\n c_post_options ()\n@@ -97,12 +88,7 @@ static const char *\n c_init (filename)\n      const char *filename;\n {\n-  filename = c_objc_common_init (filename);\n-\n-  VARRAY_TREE_INIT (deferred_fns, 32, \"deferred_fns\");\n-  ggc_add_tree_varray_root (&deferred_fns, 1);\n-\n-  return filename;\n+  return c_objc_common_init (filename);\n }\n \n /* Used by c-lex.c, but only for objc.  */\n@@ -157,119 +143,8 @@ lookup_objc_ivar (id)\n   return 0;\n }\n \n-extern tree static_ctors;\n-extern tree static_dtors;\n-\n-static tree start_cdtor\t\tPARAMS ((int));\n-static void finish_cdtor\tPARAMS ((tree));\n-\n-static tree\n-start_cdtor (method_type)\n-     int method_type;\n-{\n-  tree fnname = get_file_function_name (method_type);\n-  tree void_list_node_1 = build_tree_list (NULL_TREE, void_type_node);\n-  tree body;\n-\n-  start_function (void_list_node_1,\n-\t\t  build_nt (CALL_EXPR, fnname,\n-\t\t\t    tree_cons (NULL_TREE, NULL_TREE, void_list_node_1),\n-\t\t\t    NULL_TREE),\n-\t\t  NULL_TREE);\n-  store_parm_decls ();\n-\n-  current_function_cannot_inline\n-    = \"static constructors and destructors cannot be inlined\";\n-\n-  body = c_begin_compound_stmt ();\n-\n-  pushlevel (0);\n-  clear_last_expr ();\n-  add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n-\n-  return body;\n-}\n-\n-static void\n-finish_cdtor (body)\n-     tree body;\n-{\n-  tree scope;\n-  tree block;\n-\n-  scope = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);\n-  block = poplevel (0, 0, 0);\n-  SCOPE_STMT_BLOCK (TREE_PURPOSE (scope)) = block;\n-  SCOPE_STMT_BLOCK (TREE_VALUE (scope)) = block;\n-\n-  RECHAIN_STMTS (body, COMPOUND_BODY (body));\n-\n-  finish_function (0);\n-}\n-\n-/* Register a function tree, so that its optimization and conversion\n-   to RTL is only done at the end of the compilation.  */\n-\n-int\n-defer_fn (fn)\n-     tree fn;\n-{\n-  VARRAY_PUSH_TREE (deferred_fns, fn);\n-\n-  return 1;\n-}\n-\n-/* Called at end of parsing, but before end-of-file processing.  */\n-\n void\n finish_file ()\n {\n-  unsigned int i;\n-\n-  for (i = 0; i < VARRAY_ACTIVE_SIZE (deferred_fns); i++)\n-    {\n-      tree decl = VARRAY_TREE (deferred_fns, i);\n-\n-      if (! TREE_ASM_WRITTEN (decl))\n-\t{\n-\t  /* For static inline functions, delay the decision whether to\n-\t     emit them or not until wrapup_global_declarations.  */\n-\t  if (! TREE_PUBLIC (decl))\n-\t    DECL_DEFER_OUTPUT (decl) = 1;\n-\t  c_expand_deferred_function (decl);\n-\t}\n-    }\n-  VARRAY_FREE (deferred_fns);\n-\n-  if (static_ctors)\n-    {\n-      tree body = start_cdtor ('I');\n-\n-      for (; static_ctors; static_ctors = TREE_CHAIN (static_ctors))\n-\tc_expand_expr_stmt (build_function_call (TREE_VALUE (static_ctors),\n-\t\t\t\t\t\t NULL_TREE));\n-\n-      finish_cdtor (body);\n-    }\n-  if (static_dtors)\n-    {\n-      tree body = start_cdtor ('D');\n-\n-      for (; static_dtors; static_dtors = TREE_CHAIN (static_dtors))\n-\tc_expand_expr_stmt (build_function_call (TREE_VALUE (static_dtors),\n-\t\t\t\t\t\t NULL_TREE));\n-\n-      finish_cdtor (body);\n-    }\n-\n-  {\n-    int flags;\n-    FILE *stream = dump_begin (TDI_all, &flags);\n-\n-    if (stream)\n-      {\n-\tdump_node (getdecls (), flags & ~TDF_SLIM, stream);\n-\tdump_end (TDI_all, stream);\n-      }\n-  }\n+  c_objc_common_finish_file ();\n }"}, {"sha": "6554cf59de8c24bf30aa4621f86dd2ebf286d8bd", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=3b27886e3f68a942f551a2689831ae6a5d1b172b", "patch": "@@ -31,9 +31,16 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"diagnostic.h\"\n #include \"tree-inline.h\"\n+#include \"varray.h\"\n+#include \"ggc.h\"\n \n static int c_tree_printer PARAMS ((output_buffer *));\n static tree inline_forbidden_p PARAMS ((tree *, int *, void *));\n+static void expand_deferred_fns PARAMS ((void));\n+static tree start_cdtor\tPARAMS ((int));\n+static void finish_cdtor PARAMS ((tree));\n+\n+static varray_type deferred_fns;\n \n int\n c_missing_noreturn_ok_p (decl)\n@@ -227,9 +234,133 @@ c_objc_common_init (filename)\n \tmesg_implicit_function_declaration = 0;\n     }\n \n+  VARRAY_TREE_INIT (deferred_fns, 32, \"deferred_fns\");\n+  ggc_add_tree_varray_root (&deferred_fns, 1);\n+\n   return filename;\n }\n \n+/* Register a function tree, so that its optimization and conversion\n+   to RTL is only done at the end of the compilation.  */\n+\n+int\n+defer_fn (fn)\n+     tree fn;\n+{\n+  VARRAY_PUSH_TREE (deferred_fns, fn);\n+\n+  return 1;\n+}\n+\n+/* Expand deferred functions for C and ObjC.  */\n+\n+static void\n+expand_deferred_fns ()\n+{\n+  unsigned int i;\n+\n+  for (i = 0; i < VARRAY_ACTIVE_SIZE (deferred_fns); i++)\n+    {\n+      tree decl = VARRAY_TREE (deferred_fns, i);\n+\n+      if (! TREE_ASM_WRITTEN (decl))\n+\t{\n+\t  /* For static inline functions, delay the decision whether to\n+\t     emit them or not until wrapup_global_declarations.  */\n+\t  if (! TREE_PUBLIC (decl))\n+\t    DECL_DEFER_OUTPUT (decl) = 1;\n+\t  c_expand_deferred_function (decl);\n+\t}\n+    }\n+\n+  VARRAY_FREE (deferred_fns);\n+}\n+\n+static tree\n+start_cdtor (method_type)\n+     int method_type;\n+{\n+  tree fnname = get_file_function_name (method_type);\n+  tree void_list_node_1 = build_tree_list (NULL_TREE, void_type_node);\n+  tree body;\n+\n+  start_function (void_list_node_1,\n+\t\t  build_nt (CALL_EXPR, fnname,\n+\t\t\t    tree_cons (NULL_TREE, NULL_TREE, void_list_node_1),\n+\t\t\t    NULL_TREE),\n+\t\t  NULL_TREE);\n+  store_parm_decls ();\n+\n+  current_function_cannot_inline\n+    = \"static constructors and destructors cannot be inlined\";\n+\n+  body = c_begin_compound_stmt ();\n+\n+  pushlevel (0);\n+  clear_last_expr ();\n+  add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n+\n+  return body;\n+}\n+\n+static void\n+finish_cdtor (body)\n+     tree body;\n+{\n+  tree scope;\n+  tree block;\n+\n+  scope = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);\n+  block = poplevel (0, 0, 0);\n+  SCOPE_STMT_BLOCK (TREE_PURPOSE (scope)) = block;\n+  SCOPE_STMT_BLOCK (TREE_VALUE (scope)) = block;\n+\n+  RECHAIN_STMTS (body, COMPOUND_BODY (body));\n+\n+  finish_function (0);\n+}\n+\n+/* Called at end of parsing, but before end-of-file processing.  */\n+\n+void\n+c_objc_common_finish_file ()\n+{\n+  expand_deferred_fns ();\n+\n+  if (static_ctors)\n+    {\n+      tree body = start_cdtor ('I');\n+\n+      for (; static_ctors; static_ctors = TREE_CHAIN (static_ctors))\n+\tc_expand_expr_stmt (build_function_call (TREE_VALUE (static_ctors),\n+\t\t\t\t\t\t NULL_TREE));\n+\n+      finish_cdtor (body);\n+    }\n+\n+  if (static_dtors)\n+    {\n+      tree body = start_cdtor ('D');\n+\n+      for (; static_dtors; static_dtors = TREE_CHAIN (static_dtors))\n+\tc_expand_expr_stmt (build_function_call (TREE_VALUE (static_dtors),\n+\t\t\t\t\t\t NULL_TREE));\n+\n+      finish_cdtor (body);\n+    }\n+\n+  {\n+    int flags;\n+    FILE *stream = dump_begin (TDI_all, &flags);\n+\n+    if (stream)\n+      {\n+\tdump_node (getdecls (), flags & ~TDF_SLIM, stream);\n+\tdump_end (TDI_all, stream);\n+      }\n+  }\n+}\n+\n /* Called during diagnostic message formatting process to print a\n    source-level entity onto BUFFER.  The meaning of the format specifiers\n    is as follows:"}, {"sha": "ad8d09a672a99ac4176bf6b86e79af795ec05f4e", "filename": "gcc/c-tree.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=3b27886e3f68a942f551a2689831ae6a5d1b172b", "patch": "@@ -153,8 +153,6 @@ extern tree maybe_building_objc_message_expr    PARAMS ((void));\n extern int recognize_objc_keyword\t\tPARAMS ((void));\n extern tree lookup_objc_ivar\t\t\tPARAMS ((tree));\n \n-/* in c-lang.c and objc/objc-act.c */\n-extern int defer_fn\t\t\t\tPARAMS ((tree));\n \f\n /* in c-parse.in */\n extern void c_parse_init\t\t\tPARAMS ((void));\n@@ -175,6 +173,8 @@ extern int c_disregard_inline_limits\t\tPARAMS ((tree));\n extern int c_cannot_inline_tree_fn\t\tPARAMS ((tree *));\n extern const char *c_objc_common_init\t\tPARAMS ((const char *));\n extern int c_missing_noreturn_ok_p\t\tPARAMS ((tree));\n+extern void c_objc_common_finish_file\t\tPARAMS ((void));\n+extern int defer_fn\t\t\t\tPARAMS ((tree));\n \n #define c_build_type_variant(TYPE, CONST_P, VOLATILE_P)\t\t  \\\n   c_build_qualified_type (TYPE,\t\t\t\t  \\\n@@ -372,4 +372,7 @@ extern int mesg_implicit_function_declaration;\n /* In c-decl.c */\n extern void finish_incomplete_decl PARAMS ((tree));\n \n+extern tree static_ctors;\n+extern tree static_dtors;\n+\n #endif /* ! GCC_C_TREE_H */"}, {"sha": "602948e872ac94d6d4ed450d2ccde1d924ee30ad", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=3b27886e3f68a942f551a2689831ae6a5d1b172b", "patch": "@@ -85,7 +85,7 @@ $(srcdir)/objc/objc-parse.y: $(srcdir)/c-parse.in\n \n objc-act.o : $(srcdir)/objc/objc-act.c \\\n    $(CONFIG_H) $(TREE_H) $(RTL_H) $(SYSTEM_H) $(EXPR_H) $(TARGET_H) \\\n-   $(srcdir)/c-tree.h $(srcdir)/c-common.h $(srcdir)/c-lex.h $(VARRAY_H) \\\n+   $(srcdir)/c-tree.h $(srcdir)/c-common.h $(srcdir)/c-lex.h \\\n    $(srcdir)/toplev.h $(srcdir)/flags.h $(srcdir)/objc/objc-act.h \\\n    $(srcdir)/input.h $(srcdir)/function.h $(srcdir)/output.h $(srcdir)/debug.h \\\n    $(srcdir)/langhooks.h $(srcdir)/langhooks-def.h"}, {"sha": "96e13237b24d874cee9575e66a6603331277e146", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b27886e3f68a942f551a2689831ae6a5d1b172b/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=3b27886e3f68a942f551a2689831ae6a5d1b172b", "patch": "@@ -58,7 +58,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n #include \"debug.h\"\n #include \"target.h\"\n-#include \"varray.h\"\n \n /* This is the default way of generating a method name.  */\n /* I am not sure it is really correct.\n@@ -449,8 +448,6 @@ static int generating_instance_variables = 0;\n \n static int print_struct_values = 0;\n \n-static varray_type deferred_fns;\n-\n /* Some platforms pass small structures through registers versus through\n    an invisible pointer.  Determine at what size structure is the \n    transition point between the two possibilities. */\n@@ -565,36 +562,13 @@ objc_init (filename)\n \n   objc_act_parse_init ();\n \n-  VARRAY_TREE_INIT (deferred_fns, 32, \"deferred_fns\");\n-  ggc_add_tree_varray_root (&deferred_fns, 1);\n-\n   return filename;\n }\n \n-/* Register a function tree, so that its optimization and conversion\n-   to RTL is only done at the end of the compilation.  */\n-\n-int\n-defer_fn (fn)\n-     tree fn;\n-{\n-  VARRAY_PUSH_TREE (deferred_fns, fn);\n-\n-  return 1;\n-}\n-\n void\n finish_file ()\n {\n-  size_t i;\n-\n-  for (i = 0; i < VARRAY_ACTIVE_SIZE (deferred_fns); i++)\n-    /* Don't output the same function twice.  We may run into such\n-       situations when an extern inline function is later given a\n-       non-extern-inline definition.  */\n-    if (! TREE_ASM_WRITTEN (VARRAY_TREE (deferred_fns, i)))\n-      c_expand_deferred_function (VARRAY_TREE (deferred_fns, i));\n-  VARRAY_FREE (deferred_fns);\n+  c_objc_common_finish_file ();\n \n   finish_objc ();\t\t/* Objective-C finalization */\n "}]}