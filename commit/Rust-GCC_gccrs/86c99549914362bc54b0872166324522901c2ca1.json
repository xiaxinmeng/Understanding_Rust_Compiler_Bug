{"sha": "86c99549914362bc54b0872166324522901c2ca1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZjOTk1NDk5MTQzNjJiYzU0YjA4NzIxNjYzMjQ1MjI5MDFjMmNhMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-06-08T22:57:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-06-08T22:57:23Z"}, "message": "except.c (get_exception_pointer, [...]): Take a struct function.\n\n        * except.c (get_exception_pointer, get_exception_filter): Take a\n        struct function.  Update all callers.\n        * except.h (get_exception_pointer): Update declaration.\n        * expr.c (expand_expr): Update get_exception_pointer call.\n        * integrate.c (expand_inline_function): Remap the exception pointer\n        from callee to caller.\n\nFrom-SVN: r43060", "tree": {"sha": "5b4a3c5fe99a1829465bacb4e9a83edad3fa2fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b4a3c5fe99a1829465bacb4e9a83edad3fa2fdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86c99549914362bc54b0872166324522901c2ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c99549914362bc54b0872166324522901c2ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86c99549914362bc54b0872166324522901c2ca1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c99549914362bc54b0872166324522901c2ca1/comments", "author": null, "committer": null, "parents": [{"sha": "27132e64895c61efe07fbaaca0f69d7a41a35af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27132e64895c61efe07fbaaca0f69d7a41a35af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27132e64895c61efe07fbaaca0f69d7a41a35af7"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "2dc96830cace85187c222f1cfbea70a806c0ccaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c99549914362bc54b0872166324522901c2ca1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c99549914362bc54b0872166324522901c2ca1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86c99549914362bc54b0872166324522901c2ca1", "patch": "@@ -1,3 +1,12 @@\n+2001-06-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* except.c (get_exception_pointer, get_exception_filter): Take a\n+\tstruct function.  Update all callers.\n+\t* except.h (get_exception_pointer): Update declaration.\n+\t* expr.c (expand_expr): Update get_exception_pointer call.\n+\t* integrate.c (expand_inline_function): Remap the exception pointer\n+\tfrom callee to caller.\n+\n 2001-06-08  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-decl.c (grokdeclarator): Make the TREE_TYPE for declarations"}, {"sha": "6e90fe4e6ab704b0d7712b105245b0411af8dcaa", "filename": "gcc/except.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c99549914362bc54b0872166324522901c2ca1/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c99549914362bc54b0872166324522901c2ca1/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=86c99549914362bc54b0872166324522901c2ca1", "patch": "@@ -256,7 +256,7 @@ static tree lookup_type_for_runtime\t\tPARAMS ((tree));\n \n static struct eh_region *expand_eh_region_end\tPARAMS ((void));\n \n-static rtx get_exception_filter\t\t\tPARAMS ((void));\n+static rtx get_exception_filter\t\t\tPARAMS ((struct function *));\n \n static void collect_eh_region_array\t\tPARAMS ((void));\n static void resolve_fixup_regions\t\tPARAMS ((void));\n@@ -720,9 +720,9 @@ expand_eh_region_end_cleanup (handler)\n   /* In case this cleanup involves an inline destructor with a try block in\n      it, we need to save the EH return data registers around it.  */\n   data_save[0] = gen_reg_rtx (Pmode);\n-  emit_move_insn (data_save[0], get_exception_pointer ());\n+  emit_move_insn (data_save[0], get_exception_pointer (cfun));\n   data_save[1] = gen_reg_rtx (word_mode);\n-  emit_move_insn (data_save[1], get_exception_filter ());\n+  emit_move_insn (data_save[1], get_exception_filter (cfun));\n \n   expand_expr (handler, const0_rtx, VOIDmode, 0);\n \n@@ -951,13 +951,14 @@ expand_eh_region_end_fixup (handler)\n    within a handler.  */\n \n rtx\n-get_exception_pointer ()\n+get_exception_pointer (fun)\n+     struct function *fun;\n {\n-  rtx exc_ptr = cfun->eh->exc_ptr;\n-  if (! exc_ptr)\n+  rtx exc_ptr = fun->eh->exc_ptr;\n+  if (fun == cfun && ! exc_ptr)\n     {\n       exc_ptr = gen_reg_rtx (Pmode);\n-      cfun->eh->exc_ptr = exc_ptr;\n+      fun->eh->exc_ptr = exc_ptr;\n     }\n   return exc_ptr;\n }\n@@ -966,13 +967,14 @@ get_exception_pointer ()\n    within a handler.  */\n \n static rtx\n-get_exception_filter ()\n+get_exception_filter (fun)\n+     struct function *fun;\n {\n-  rtx filter = cfun->eh->filter;\n-  if (! filter)\n+  rtx filter = fun->eh->filter;\n+  if (fun == cfun && ! filter)\n     {\n       filter = gen_reg_rtx (word_mode);\n-      cfun->eh->filter = filter;\n+      fun->eh->filter = filter;\n     }\n   return filter;\n }\n@@ -2356,8 +2358,8 @@ finish_eh_generation ()\n \n   /* These registers are used by the landing pads.  Make sure they\n      have been generated.  */\n-  get_exception_pointer ();\n-  get_exception_filter ();\n+  get_exception_pointer (cfun);\n+  get_exception_filter (cfun);\n \n   /* Construct the landing pads.  */\n "}, {"sha": "b5a219ec2ea0d9c3609ef9cab16b8c8cbcfb7ea7", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c99549914362bc54b0872166324522901c2ca1/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c99549914362bc54b0872166324522901c2ca1/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=86c99549914362bc54b0872166324522901c2ca1", "patch": "@@ -137,7 +137,7 @@ extern rtx expand_builtin_dwarf_fp_regnum\tPARAMS ((void));\n extern void expand_builtin_eh_return\t\tPARAMS ((tree, tree));\n extern void expand_eh_return\t\t\tPARAMS ((void));\n \n-extern rtx get_exception_pointer\t\tPARAMS ((void));\n+extern rtx get_exception_pointer\t\tPARAMS ((struct function *));\n \n struct function;\n struct inline_remap;"}, {"sha": "732b1108ddf2976da60022fb704e8023c7cdf740", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c99549914362bc54b0872166324522901c2ca1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c99549914362bc54b0872166324522901c2ca1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=86c99549914362bc54b0872166324522901c2ca1", "patch": "@@ -8827,7 +8827,7 @@ expand_expr (exp, target, tmode, modifier)\n       return expand_builtin_va_arg (TREE_OPERAND (exp, 0), type);\n \n     case EXC_PTR_EXPR:\n-      return get_exception_pointer ();\n+      return get_exception_pointer (cfun);\n \n     default:\n       return (*lang_expand_expr) (exp, original_target, tmode, modifier);"}, {"sha": "f4246f06dc40db30c0abf7ff72525307ea024b42", "filename": "gcc/integrate.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c99549914362bc54b0872166324522901c2ca1/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c99549914362bc54b0872166324522901c2ca1/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=86c99549914362bc54b0872166324522901c2ca1", "patch": "@@ -1111,6 +1111,11 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n   else\n     abort ();\n \n+  /* Remap the exception handler data pointer from one to the other.  */\n+  temp = get_exception_pointer (inl_f);\n+  if (temp)\n+    map->reg_map[REGNO (temp)] = get_exception_pointer (cfun);\n+\n   /* Initialize label_map.  get_label_from_map will actually make\n      the labels.  */\n   memset ((char *) &map->label_map[min_labelno], 0,"}]}