{"sha": "411e6c1e103bd087cce5a006b3e15622aa9ac83c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDExZTZjMWUxMDNiZDA4N2NjZTVhMDA2YjNlMTU2MjJhYTlhYzgzYw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-06-11T22:30:16Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-06-11T22:30:16Z"}, "message": "rtl.h (to_rtx_code): Remove.\n\n        * rtl.h (to_rtx_code): Remove.\n        * machmode.h (to_machine_mode): Likewise.\n        * read-rtl.c (apply_mode_macro): Replace to_machine_mode with\n        explicit cast.\n        (apply_mode_maps): Likewise.\n        (read_rtx_1): Likewise.\n        (apply_code_macro): Replace to to_rtx_code with explicit cast.\n        (check_code_macro): Likewise.\n        (read_rtx_1): Likewise.\n\nFrom-SVN: r100846", "tree": {"sha": "f38572052408444c3df071733b0f79aa8e5b5e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f38572052408444c3df071733b0f79aa8e5b5e9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/411e6c1e103bd087cce5a006b3e15622aa9ac83c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411e6c1e103bd087cce5a006b3e15622aa9ac83c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/411e6c1e103bd087cce5a006b3e15622aa9ac83c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411e6c1e103bd087cce5a006b3e15622aa9ac83c/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "364667a1ca156f8b6b5fb682cbd423108d6f223c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364667a1ca156f8b6b5fb682cbd423108d6f223c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/364667a1ca156f8b6b5fb682cbd423108d6f223c"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "4957e961f02786a3b34aae91c29ac954974bc89f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411e6c1e103bd087cce5a006b3e15622aa9ac83c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411e6c1e103bd087cce5a006b3e15622aa9ac83c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=411e6c1e103bd087cce5a006b3e15622aa9ac83c", "patch": "@@ -1,3 +1,15 @@\n+2005-06-11  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* rtl.h (to_rtx_code): Remove.\n+\t* machmode.h (to_machine_mode): Likewise.\n+\t* read-rtl.c (apply_mode_macro): Replace to_machine_mode with\n+\texplicit cast.\n+\t(apply_mode_maps): Likewise.\n+\t(read_rtx_1): Likewise.\n+\t(apply_code_macro): Replace to to_rtx_code with explicit cast.\n+\t(check_code_macro): Likewise.\n+\t(read_rtx_1): Likewise.\n+\n 2005-06-11  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* c-typeck.c (convert_for_assignment): Avoid checking"}, {"sha": "10016f86ac7089f116ef2af6e2556350239d1dda", "filename": "gcc/machmode.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411e6c1e103bd087cce5a006b3e15622aa9ac83c/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411e6c1e103bd087cce5a006b3e15622aa9ac83c/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=411e6c1e103bd087cce5a006b3e15622aa9ac83c", "patch": "@@ -25,10 +25,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Make an enum class that gives all the machine modes.  */\n #include \"insn-modes.h\"\n \n-/* Given MODE as integer value, get the corresponding enum machine_mode\n-   enumeration value.  */\n-#define to_machine_mode(MODE)  ((enum machine_mode) (MODE))\n-\n /* Get the name of mode MODE as a string.  */\n \n extern const char * const mode_name[NUM_MACHINE_MODES];"}, {"sha": "1fa0896fd74cc33ac62cd3d0329f1d111ec5a3ea", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411e6c1e103bd087cce5a006b3e15622aa9ac83c/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411e6c1e103bd087cce5a006b3e15622aa9ac83c/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=411e6c1e103bd087cce5a006b3e15622aa9ac83c", "patch": "@@ -243,7 +243,7 @@ uses_mode_macro_p (rtx x, int mode)\n static void\n apply_mode_macro (rtx x, int mode)\n {\n-  PUT_MODE (x, to_machine_mode (mode));\n+  PUT_MODE (x, (enum machine_mode) mode);\n }\n \n /* Implementations of the macro_group callbacks for codes.  */\n@@ -269,7 +269,7 @@ uses_code_macro_p (rtx x, int code)\n static void\n apply_code_macro (rtx x, int code)\n {\n-  PUT_CODE (x, to_rtx_code (code));\n+  PUT_CODE (x, (enum rtx_code) code);\n }\n \n /* Map a code or mode attribute string P to the underlying string for\n@@ -363,7 +363,7 @@ apply_mode_maps (rtx x, struct map_value *mode_maps, struct mapping *macro,\n \n \t  v = map_attr_string (pm->string, macro, value);\n \t  if (v)\n-\t    PUT_MODE (x, to_machine_mode (find_mode (v->string, infile)));\n+\t    PUT_MODE (x, (enum machine_mode) find_mode (v->string, infile));\n \t  else\n \t    *unknown = pm->string;\n \t  return;\n@@ -1311,7 +1311,7 @@ check_code_macro (struct mapping *macro, FILE *infile)\n   struct map_value *v;\n   enum rtx_code bellwether;\n \n-  bellwether = to_rtx_code (macro->values->number);\n+  bellwether = (enum rtx_code) macro->values->number;\n   for (v = macro->values->next; v != 0; v = v->next)\n     if (strcmp (GET_RTX_FORMAT (bellwether), GET_RTX_FORMAT (v->number)) != 0)\n       fatal_with_file_and_line (infile, \"code macro `%s' combines \"\n@@ -1449,7 +1449,7 @@ read_rtx_1 (FILE *infile, struct map_value **mode_maps)\n       check_code_macro (read_mapping (&codes, codes.macros, infile), infile);\n       goto again;\n     }\n-  real_code = to_rtx_code (find_macro (&codes, tmp_char, infile));\n+  real_code = (enum rtx_code) find_macro (&codes, tmp_char, infile);\n   bellwether_code = BELLWETHER_CODE (real_code);\n \n   /* If we end up with an insn expression then we free this space below.  */\n@@ -1470,7 +1470,7 @@ read_rtx_1 (FILE *infile, struct map_value **mode_maps)\n \tmode = find_macro (&modes, tmp_char, infile);\n       else\n \tmode = mode_attr_index (mode_maps, tmp_char);\n-      PUT_MODE (return_rtx, to_machine_mode (mode));\n+      PUT_MODE (return_rtx, (enum machine_mode) mode);\n       if (GET_MODE (return_rtx) != mode)\n \tfatal_with_file_and_line (infile, \"mode too large\");\n     }"}, {"sha": "69091ab36d06cddf8d264d7a645a06e340b30cbd", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411e6c1e103bd087cce5a006b3e15622aa9ac83c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411e6c1e103bd087cce5a006b3e15622aa9ac83c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=411e6c1e103bd087cce5a006b3e15622aa9ac83c", "patch": "@@ -51,8 +51,6 @@ enum rtx_code  {\n #define NUM_RTX_CODE ((int) LAST_AND_UNUSED_RTX_CODE)\n \t\t\t\t/* The cast here, saves many elsewhere.  */\n \n-#define to_rtx_code(CODE)    ((enum rtx_code) (CODE))\n-\n /* Register Transfer Language EXPRESSIONS CODE CLASSES */\n \n enum rtx_class  {"}]}