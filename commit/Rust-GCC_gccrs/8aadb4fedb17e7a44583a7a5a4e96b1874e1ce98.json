{"sha": "8aadb4fedb17e7a44583a7a5a4e96b1874e1ce98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFhZGI0ZmVkYjE3ZTdhNDQ1ODNhN2E1YTRlOTZiMTg3NGUxY2U5OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-27T10:07:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-27T13:04:35Z"}, "message": "libstdc++: Define net::socket_base::message_flags operators as friends [PR 100285]\n\nThe overloaded operators for socket_base::message_flags should only be\ndefined when the message_flags type itself is defined. Rather than\nduplicate the preprocessor conditional, this moves the operators into\nthe same scope as the type, defining them as hidden friends.\n\nAs well as fixing the bug, this has all the usual advantages of hidden\nfriends (they are not visible to normal name lookup for unrelated\ntypes).\n\nFor consistency, do the same for the resolver_base::flags bitmask\noperators too.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100285\n\t* include/experimental/internet (resolver_base::flags):\n\tDefine overloaded operators as hidden friends.\n\t* include/experimental/socket (socket_base::message_flags):\n\tLikewise.", "tree": {"sha": "586340979d5d7a65919cc1b5c6021fd075e830c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/586340979d5d7a65919cc1b5c6021fd075e830c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8aadb4fedb17e7a44583a7a5a4e96b1874e1ce98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aadb4fedb17e7a44583a7a5a4e96b1874e1ce98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aadb4fedb17e7a44583a7a5a4e96b1874e1ce98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aadb4fedb17e7a44583a7a5a4e96b1874e1ce98/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75f8900159133ce069ef1d2edf3b67c7bc82e305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75f8900159133ce069ef1d2edf3b67c7bc82e305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75f8900159133ce069ef1d2edf3b67c7bc82e305"}], "stats": {"total": 124, "additions": 59, "deletions": 65}, "files": [{"sha": "11961762880cc71aa0c19b91a0a101b6d19adcd6", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aadb4fedb17e7a44583a7a5a4e96b1874e1ce98/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aadb4fedb17e7a44583a7a5a4e96b1874e1ce98/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=8aadb4fedb17e7a44583a7a5a4e96b1874e1ce98", "patch": "@@ -1660,38 +1660,38 @@ namespace ip\n     static constexpr flags all_matching\t\t= (flags)AI_ALL;\n     static constexpr flags address_configured\t= (flags)AI_ADDRCONFIG;\n \n-  protected:\n-    resolver_base() = default;\n-    ~resolver_base() = default;\n-  };\n+    friend constexpr flags\n+    operator&(flags __f1, flags __f2) noexcept\n+    { return flags( int(__f1) & int(__f2) ); }\n \n-  constexpr resolver_base::flags\n-  operator&(resolver_base::flags __f1, resolver_base::flags __f2) noexcept\n-  { return resolver_base::flags( int(__f1) & int(__f2) ); }\n+    friend constexpr flags\n+    operator|(flags __f1, flags __f2) noexcept\n+    { return flags( int(__f1) | int(__f2) ); }\n \n-  constexpr resolver_base::flags\n-  operator|(resolver_base::flags __f1, resolver_base::flags __f2) noexcept\n-  { return resolver_base::flags( int(__f1) | int(__f2) ); }\n+    friend constexpr flags\n+    operator^(flags __f1, flags __f2) noexcept\n+    { return flags( int(__f1) ^ int(__f2) ); }\n \n-  constexpr resolver_base::flags\n-  operator^(resolver_base::flags __f1, resolver_base::flags __f2) noexcept\n-  { return resolver_base::flags( int(__f1) ^ int(__f2) ); }\n+    friend constexpr flags\n+    operator~(flags __f) noexcept\n+    { return flags( ~int(__f) ); }\n \n-  constexpr resolver_base::flags\n-  operator~(resolver_base::flags __f) noexcept\n-  { return resolver_base::flags( ~int(__f) ); }\n+    friend constexpr flags&\n+    operator&=(flags& __f1, flags __f2) noexcept\n+    { return __f1 = (__f1 & __f2); }\n \n-  constexpr resolver_base::flags&\n-  operator&=(resolver_base::flags& __f1, resolver_base::flags __f2) noexcept\n-  { return __f1 = (__f1 & __f2); }\n+    friend constexpr flags&\n+    operator|=(flags& __f1, flags __f2) noexcept\n+    { return __f1 = (__f1 | __f2); }\n \n-  constexpr resolver_base::flags&\n-  operator|=(resolver_base::flags& __f1, resolver_base::flags __f2) noexcept\n-  { return __f1 = (__f1 | __f2); }\n+    friend constexpr flags&\n+    operator^=(flags& __f1, flags __f2) noexcept\n+    { return __f1 = (__f1 ^ __f2); }\n \n-  constexpr resolver_base::flags&\n-  operator^=(resolver_base::flags& __f1, resolver_base::flags __f2) noexcept\n-  { return __f1 = (__f1 ^ __f2); }\n+  protected:\n+    resolver_base() = default;\n+    ~resolver_base() = default;\n+  };\n \n   // TODO define resolver_base::flags static constants in .so for C++14 mode\n "}, {"sha": "bf6a8c87e67db283e47594b45ee0f7c9f2b6ea52", "filename": "libstdc++-v3/include/experimental/socket", "status": "modified", "additions": 34, "deletions": 40, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aadb4fedb17e7a44583a7a5a4e96b1874e1ce98/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aadb4fedb17e7a44583a7a5a4e96b1874e1ce98/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket?ref=8aadb4fedb17e7a44583a7a5a4e96b1874e1ce98", "patch": "@@ -319,13 +319,38 @@ inline namespace v1\n       = (message_flags)MSG_DONTROUTE;\n \n     static const int max_listen_connections = SOMAXCONN;\n-#endif\n \n-  protected:\n-    socket_base() = default;\n-    ~socket_base() = default;\n+    // message_flags bitmask operations are defined as hidden friends.\n \n-#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n+    friend constexpr message_flags\n+    operator&(message_flags __f1, message_flags __f2) noexcept\n+    { return message_flags( int(__f1) & int(__f2) ); }\n+\n+    friend constexpr message_flags\n+    operator|(message_flags __f1, message_flags __f2) noexcept\n+    { return message_flags( int(__f1) | int(__f2) ); }\n+\n+    friend constexpr message_flags\n+    operator^(message_flags __f1, message_flags __f2) noexcept\n+    { return message_flags( int(__f1) ^ int(__f2) ); }\n+\n+    friend constexpr message_flags\n+    operator~(message_flags __f) noexcept\n+    { return message_flags( ~int(__f) ); }\n+\n+    friend constexpr message_flags&\n+    operator&=(message_flags& __f1, message_flags __f2) noexcept\n+    { return __f1 = (__f1 & __f2); }\n+\n+    friend constexpr message_flags&\n+    operator|=(message_flags& __f1, message_flags __f2) noexcept\n+    { return __f1 = (__f1 | __f2); }\n+\n+    friend constexpr message_flags&\n+    operator^=(message_flags& __f1, message_flags __f2) noexcept\n+    { return __f1 = (__f1 ^ __f2); }\n+\n+  protected:\n     struct __msg_hdr : ::msghdr\n     {\n #ifdef IOV_MAX\n@@ -382,42 +407,11 @@ inline namespace v1\n \t}\n     };\n #endif\n-  };\n \n-  constexpr socket_base::message_flags\n-  operator&(socket_base::message_flags __f1, socket_base::message_flags __f2)\n-    noexcept\n-  { return socket_base::message_flags( int(__f1) & int(__f2) ); }\n-\n-  constexpr socket_base::message_flags\n-  operator|(socket_base::message_flags __f1, socket_base::message_flags __f2)\n-    noexcept\n-  { return socket_base::message_flags( int(__f1) | int(__f2) ); }\n-\n-  constexpr socket_base::message_flags\n-  operator^(socket_base::message_flags __f1, socket_base::message_flags __f2)\n-    noexcept\n-  { return socket_base::message_flags( int(__f1) ^ int(__f2) ); }\n-\n-  constexpr socket_base::message_flags\n-  operator~(socket_base::message_flags __f)\n-    noexcept\n-  { return socket_base::message_flags( ~int(__f) ); }\n-\n-  constexpr socket_base::message_flags&\n-  operator&=(socket_base::message_flags& __f1, socket_base::message_flags __f2)\n-    noexcept\n-  { return __f1 = (__f1 & __f2); }\n-\n-  constexpr socket_base::message_flags&\n-  operator|=(socket_base::message_flags& __f1, socket_base::message_flags __f2)\n-    noexcept\n-  { return __f1 = (__f1 | __f2); }\n-\n-  constexpr socket_base::message_flags&\n-  operator^=(socket_base::message_flags& __f1, socket_base::message_flags __f2)\n-    noexcept\n-  { return __f1 = (__f1 ^ __f2); }\n+  protected:\n+    socket_base() = default;\n+    ~socket_base() = default;\n+  };\n \n   // TODO define socket_base static constants in .so for C++14 mode\n "}]}