{"sha": "7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NiNTZlNWNkNDgxZDlkYTY0MDBjZWM4MzZlYjNjNjliNjkwOGNmNg==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2005-05-26T01:53:56Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2005-05-26T01:53:56Z"}, "message": "next_mapping.h: Update for C++.\n\n        * objc/execute/next_mapping.h: Update for C++.\n\n        * obj-c++.dg/selector-1.mm: Move to...\n        * obj-c++.dg/selector-4.mm: here...\n\n        * obj-c++.dg/comp-types-1.mm: New.\n        * obj-c++.dg/cxx-class-1.mm: New.\n        * obj-c++.dg/cxx-ivars-1.mm: New.\n        * obj-c++.dg/cxx-ivars-2.mm: New.\n        * obj-c++.dg/cxx-ivars-3.mm: New.\n        * obj-c++.dg/cxx-scope-1.mm: New.\n        * obj-c++.dg/cxx-scope-2.mm: New.\n        * obj-c++.dg/defs.mm: New.\n        * obj-c++.dg/empty-private-1.mm: New.\n        * obj-c++.dg/encode-1.mm: New.\n        * obj-c++.dg/encode-2.mm: New.\n        * obj-c++.dg/encode-3.mm: New.\n        * obj-c++.dg/extern-c-1.mm: New.\n        * obj-c++.dg/extra-semi.mm: New.\n        * obj-c++.dg/fix-and-continue-2.mm: New.\n        * obj-c++.dg/isa-field-1.mm: New.\n        * obj-c++.dg/ivar-list-semi.mm: New.\n        * obj-c++.dg/local-decl-1.mm: New.\n        * obj-c++.dg/lookup-1.mm: New.\n        * obj-c++.dg/lookup-2.mm: New.\n        * obj-c++.dg/method-1.mm: New.\n        * obj-c++.dg/method-2.mm: New.\n        * obj-c++.dg/method-3.mm: New.\n        * obj-c++.dg/method-4.mm: New.\n        * obj-c++.dg/method-5.mm: New.\n        * obj-c++.dg/method-6.mm: New.\n        * obj-c++.dg/method-7.mm: New.\n        * obj-c++.dg/no-extra-load.mm: New.\n        * obj-c++.dg/overload-1.mm: New.\n        * obj-c++.dg/pragma-1.mm: New.\n        * obj-c++.dg/pragma-2.mm: New.\n        * obj-c++.dg/private-1.mm: New.\n        * obj-c++.dg/private-2.mm: New.\n        * obj-c++.dg/proto-qual-1.mm: New.\n        * obj-c++.dg/qual-types-1.mm: New.\n        * obj-c++.dg/stubify-1.mm: New.\n        * obj-c++.dg/stubify-2.mm: New.\n        * obj-c++.dg/super-class-1.mm: New.\n        * obj-c++.dg/super-class-2.mm: New.\n        * obj-c++.dg/super-dealloc-1.mm: New.\n        * obj-c++.dg/super-dealloc-2.mm: New.\n        * obj-c++.dg/template-1.mm: New.\n        * obj-c++.dg/template-2.mm: New.\n        * obj-c++.dg/template-3.mm: New.\n        * obj-c++.dg/template-4.mm: New.\n        * obj-c++.dg/template-5.mm: New.\n        * obj-c++.dg/template-6.mm: New.\n        * obj-c++.dg/try-catch-1.mm: New.\n        * obj-c++.dg/try-catch-2.mm: New.\n        * obj-c++.dg/try-catch-3.mm: New.\n        * obj-c++.dg/try-catch-4.mm: New.\n        * obj-c++.dg/try-catch-5.mm: New.\n        * obj-c++.dg/try-catch-6.mm: New.\n        * obj-c++.dg/try-catch-7.mm: New.\n        * obj-c++.dg/try-catch-8.mm: New.\n        * obj-c++.dg/try-catch-9.mm: New.\n        * obj-c++.dg/va-meth-1.mm: New.\n\nCo-Authored-By: Mike Stump <mrs@apple.com>\n\nFrom-SVN: r100181", "tree": {"sha": "3eb22dddf7c7416df4c11d602f1d6f9c6c6454f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eb22dddf7c7416df4c11d602f1d6f9c6c6454f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/comments", "author": null, "committer": null, "parents": [{"sha": "047c2765978683fb89087064711d1aafa3c17f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047c2765978683fb89087064711d1aafa3c17f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047c2765978683fb89087064711d1aafa3c17f0e"}], "stats": {"total": 2135, "additions": 2104, "deletions": 31}, "files": [{"sha": "5a9258b018d873fb09796cfda8ba7977ce976b5e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -1,8 +1,69 @@\n-2005-05-25  Mike Stump  <mrs@apple.com>\n+2005-05-25  Ziemowit Laski  <zlaski@apple.com>\n+\t    Mike Stump  <mrs@apple.com>\n \n+\t* objc/execute/next_mapping.h: Update for C++.\n+\t\n \t* obj-c++.dg/selector-1.mm: Move to...\n \t* obj-c++.dg/selector-4.mm: here...\n \n+\t* obj-c++.dg/comp-types-1.mm: New.\n+\t* obj-c++.dg/cxx-class-1.mm: New.\n+\t* obj-c++.dg/cxx-ivars-1.mm: New.\n+\t* obj-c++.dg/cxx-ivars-2.mm: New.\n+\t* obj-c++.dg/cxx-ivars-3.mm: New.\n+\t* obj-c++.dg/cxx-scope-1.mm: New.\n+\t* obj-c++.dg/cxx-scope-2.mm: New.\n+\t* obj-c++.dg/defs.mm: New.\n+\t* obj-c++.dg/empty-private-1.mm: New.\n+\t* obj-c++.dg/encode-1.mm: New.\n+\t* obj-c++.dg/encode-2.mm: New.\n+\t* obj-c++.dg/encode-3.mm: New.\n+\t* obj-c++.dg/extern-c-1.mm: New.\n+\t* obj-c++.dg/extra-semi.mm: New.\n+\t* obj-c++.dg/fix-and-continue-2.mm: New.\n+\t* obj-c++.dg/isa-field-1.mm: New.\n+\t* obj-c++.dg/ivar-list-semi.mm: New.\n+\t* obj-c++.dg/local-decl-1.mm: New.\n+\t* obj-c++.dg/lookup-1.mm: New.\n+\t* obj-c++.dg/lookup-2.mm: New.\n+\t* obj-c++.dg/method-1.mm: New.\n+\t* obj-c++.dg/method-2.mm: New.\n+\t* obj-c++.dg/method-3.mm: New.\n+\t* obj-c++.dg/method-4.mm: New.\n+\t* obj-c++.dg/method-5.mm: New.\n+\t* obj-c++.dg/method-6.mm: New.\n+\t* obj-c++.dg/method-7.mm: New.\n+\t* obj-c++.dg/no-extra-load.mm: New.\n+\t* obj-c++.dg/overload-1.mm: New.\n+\t* obj-c++.dg/pragma-1.mm: New.\n+\t* obj-c++.dg/pragma-2.mm: New.\n+\t* obj-c++.dg/private-1.mm: New.\n+\t* obj-c++.dg/private-2.mm: New.\n+\t* obj-c++.dg/proto-qual-1.mm: New.\n+\t* obj-c++.dg/qual-types-1.mm: New.\n+\t* obj-c++.dg/stubify-1.mm: New.\n+\t* obj-c++.dg/stubify-2.mm: New.\n+\t* obj-c++.dg/super-class-1.mm: New.\n+\t* obj-c++.dg/super-class-2.mm: New.\n+\t* obj-c++.dg/super-dealloc-1.mm: New.\n+\t* obj-c++.dg/super-dealloc-2.mm: New.\n+\t* obj-c++.dg/template-1.mm: New.\n+\t* obj-c++.dg/template-2.mm: New.\n+\t* obj-c++.dg/template-3.mm: New.\n+\t* obj-c++.dg/template-4.mm: New.\n+\t* obj-c++.dg/template-5.mm: New.\n+\t* obj-c++.dg/template-6.mm: New.\n+\t* obj-c++.dg/try-catch-1.mm: New.\n+\t* obj-c++.dg/try-catch-2.mm: New.\n+\t* obj-c++.dg/try-catch-3.mm: New.\n+\t* obj-c++.dg/try-catch-4.mm: New.\n+\t* obj-c++.dg/try-catch-5.mm: New.\n+\t* obj-c++.dg/try-catch-6.mm: New.\n+\t* obj-c++.dg/try-catch-7.mm: New.\n+\t* obj-c++.dg/try-catch-8.mm: New.\n+\t* obj-c++.dg/try-catch-9.mm: New.\n+\t* obj-c++.dg/va-meth-1.mm: New.\n+\n 2005-05-25  Ziemowit Laski  <zlaski@apple.com>\n \n \t* obj-c++.dg/selector-1.mm: New."}, {"sha": "6d4e86e4b2a158f2105b4f11cbe73627563e4a6d", "filename": "gcc/testsuite/obj-c++.dg/comp-types-1.mm", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+@interface A\n++ new;\n+@end\n+\n+@interface B : A\n+@end\n+\n+int main(int argc, char **argv) {\n+    B *b = [B new];\n+    A *a = b;\n+\n+    return (b == a);\n+}\n+"}, {"sha": "64fed0f8bc0495d898d5a0223d92c2adafc709d0", "filename": "gcc/testsuite/obj-c++.dg/cxx-class-1.mm", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-class-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-class-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-class-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,18 @@\n+/* Test that Objective-C++ is able to chew through a simple C++ class hierarchy.\n+   This was broken in earlier ObjC++ incarnations.  */\n+\n+struct foo\n+{\n+  foo(void *a) {};\n+};\n+\n+struct bar : foo\n+{\n+  bar() : foo((char*)0) {};\n+};\n+\n+class apple : foo\n+{\n+public:\n+  apple() : foo(0) { };\n+};"}, {"sha": "6e5812cf8e080b82c04c0718e575edd76d42f963", "filename": "gcc/testsuite/obj-c++.dg/cxx-ivars-1.mm", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,42 @@\n+// Check if ivars may be accessed via the C++ dot notation.\n+\n+// { dg-do run }\n+// { dg-options \"-fno-objc-call-cxx-cdtors\" }\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+struct cxx_struct {\n+  int a, b;\n+  void set_values (int _a, int _b = 3) {\n+    a = _a; b = _b;\n+  }\n+  ~cxx_struct (void) {\n+    a = b = 99;\n+  }\n+};\n+\n+@interface Manip : Object {\n+  int c;\n+  cxx_struct s;   // { dg-warning \"user-defined destructor\" }\n+                  // { dg-warning \"constructors and destructors will not be invoked\" \"\" { target *-*-* } 22 }\n+}\n+- (void) manipulate_ivars;\n+@end\n+\n+@implementation Manip\n+- (void) manipulate_ivars {\n+  s.set_values (7);\n+  CHECK_IF (s.a == 7 && s.b == 3);\n+  s.~cxx_struct();\n+  CHECK_IF (s.a == 99 && s.b == 99);\n+}\n+@end\n+\n+int main (void)\n+{\n+  Manip *obj = [Manip new];\n+  [obj manipulate_ivars];\n+  [obj free];\n+}"}, {"sha": "bf9ca6af44a7ba9ec017645383fb92edcff96bf1", "filename": "gcc/testsuite/obj-c++.dg/cxx-ivars-2.mm", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,76 @@\n+// Check if the '- .cxx_construct' and '-.cxx_destruct' methods get called\n+// and if they perform their desired function.\n+\n+// { dg-do run }\n+// { dg-options \"-fobjc-call-cxx-cdtors\" }\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+static int ctor1_called, ctor2_called, dtor1_called;\n+\n+struct bar {\n+  int a, b;\n+  bar(void) {\n+    a = 5; b = 6;\n+    ctor1_called++;\n+  }\n+  ~bar(void) {\n+    a = b = 99;\n+    dtor1_called++;\n+  }\n+};\n+\n+struct boo: bar {\n+  int c;\n+  boo(int _c = 9): c(_c) {\n+    ctor2_called++;\n+  }\n+};\n+\n+@interface Baz: Object {\n+@public\n+  bar aa;\n+}\n+@end\n+\n+@implementation Baz\n+@end\n+\n+@interface Foo: Baz {\n+@public\n+  int a;\n+  boo bb;\n+  bar b;\n+  float c;\n+  bar d;\n+}\n+@end\n+\n+@implementation Foo\n+@end\n+\n+int main (void)\n+{\n+  CHECK_IF(!ctor1_called && !ctor2_called && !dtor1_called); /* are we sane? */\n+\n+  Baz *baz = [Baz new];\n+  CHECK_IF(ctor1_called && !ctor2_called && !dtor1_called);\n+  CHECK_IF(baz->aa.a == 5 && baz->aa.b == 6);\n+  ctor1_called = 0;  /* reset */\n+  \n+  [baz free];\n+  CHECK_IF(!ctor1_called && !ctor2_called && dtor1_called);\n+  dtor1_called = 0;  /* reset */\n+\n+  Foo *foo = [Foo new];\n+  CHECK_IF(ctor1_called && ctor2_called && !dtor1_called);\n+  CHECK_IF(foo->bb.a == 5 && foo->bb.b == 6 && foo->bb.c == 9);\n+  CHECK_IF(foo->b.a == 5 && foo->b.b == 6);\n+  CHECK_IF(foo->d.a == 5 && foo->d.b == 6);\n+  ctor1_called = ctor2_called = 0;  /* reset */\n+  \n+  [foo free];\n+  CHECK_IF(!ctor1_called && !ctor2_called && dtor1_called);\n+}"}, {"sha": "ca5e5eda4501de21aa1068efd4ae871d89684854", "filename": "gcc/testsuite/obj-c++.dg/cxx-ivars-3.mm", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-3.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,46 @@\n+// Check if ObjC classes with non-POD C++ ivars are specially marked in the metadata.\n+\n+// { dg-do run { target *-*-darwin* } }\n+// { dg-options \"-fobjc-call-cxx-cdtors -fnext-runtime\" }\n+\n+#include <objc/objc-runtime.h>\n+#include <stdlib.h>\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+#ifndef CLS_HAS_CXX_STRUCTORS\n+#define CLS_HAS_CXX_STRUCTORS 0x2000L\n+#endif\n+\n+struct cxx_struct {\n+  int a, b;\n+  cxx_struct (void) { a = b = 55; }\n+};\n+\n+@interface Foo {\n+  int c;\n+  cxx_struct s;\n+}\n+@end\n+\n+@interface Bar: Foo {\n+  float f;\n+}\n+@end\n+\n+@implementation Foo\n+@end\n+\n+@implementation Bar\n+@end\n+\n+int main (void)\n+{\n+  Class cls;\n+\n+  cls = objc_getClass(\"Foo\");\n+  CHECK_IF(cls->info & CLS_HAS_CXX_STRUCTORS);\n+  cls = objc_getClass(\"Bar\");\n+  CHECK_IF(!(cls->info & CLS_HAS_CXX_STRUCTORS));\n+\n+  return 0;\n+}"}, {"sha": "952facceb71bb651a02f46187ccdb1d41da5cf31", "filename": "gcc/testsuite/obj-c++.dg/cxx-scope-1.mm", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,53 @@\n+/* Handle C++ scoping ('::') operators in ObjC message receivers gracefully.  */\n+/* Author: Ziemowit Laski  <zlaski@apple.com> */\n+\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+@class Derived;\n+\n+Derived *inst[3];\n+\n+struct CxxClass {\n+  static Derived *get_instance(int);\n+};\n+\n+Derived *CxxClass::get_instance(int offs) {\n+  return inst[offs];\n+}\n+\n+@interface Derived: Object {\n+  int value;\n+}\n+-(id)initWithValue:(int)val;\n+-(int)derived_meth;\n+@end\n+\n+@implementation Derived\n+-(id)initWithValue:(int)val {\n+  [super init];\n+  value = val;\n+  return self;\n+}\n+- (int)derived_meth {\n+  return value;\n+}\n+@end\n+\n+int main(void) {\n+  int r;\n+  inst[1] = [[::Derived alloc] initWithValue:7];\n+  inst[2] = [[Derived alloc] initWithValue:77];\n+\n+  r = [CxxClass::get_instance(2) derived_meth];\n+  if (r != 77)\n+    abort();\n+\n+  r = [CxxClass::get_instance(1) derived_meth];\n+  if (r != 7)\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "a5bce3983258376dbcbae9b45c4ba03d10601a53", "filename": "gcc/testsuite/obj-c++.dg/cxx-scope-2.mm", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,19 @@\n+/* Make sure Objective-C++ can distinguish ObjC classes from C++ classes.  */\n+/* Author: Ziemowit Laski  <zlaski@apple.com> */\n+\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+#include <iostream>\n+#include <string>\n+\n+@interface iostream: Object\n+@end\n+\n+int main(void) {\n+  id i = [std::iostream new];  /* { dg-warning \"not an Objective\\\\-C class name or alias\" } */\n+  i = [iostream new];\n+  i = [std::basic_string<char> new];  /* { dg-warning \"not an Objective\\\\-C class name or alias\" } */\n+\n+  return 0;\n+}"}, {"sha": "3027985ed0c98e6f5e521f2c0d3d31678ba5a437", "filename": "gcc/testsuite/obj-c++.dg/defs.mm", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdefs.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdefs.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdefs.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,43 @@\n+/* Check @defs() in Objective-C++ */\n+/* Contributed by Devang Patel  <dpatel@apple.com>  */\n+\n+/* { dg-options \"-lobjc\" } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+extern void abort(void);\n+\n+@interface A : Object\n+{\n+  @public\n+    int a;\n+}\n+@end\n+\n+struct A_defs \n+{\n+  @defs(A);\n+};\n+\n+@implementation A\n+- init \n+{\n+  a = 42;\n+  return self;\n+}\n+@end\n+\n+\n+int main() \n+{\n+  A *a = [A init];\n+  struct A_defs *a_defs = (struct A_defs *)a;\n+  \n+  if (a->a != a_defs->a)\n+    abort ();\t\n+  \n+  return 0;\n+}"}, {"sha": "b8b90b07ecdaa02b3cfd371abbd6bb51a8b3fd1d", "filename": "gcc/testsuite/obj-c++.dg/empty-private-1.mm", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fempty-private-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fempty-private-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fempty-private-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,9 @@\n+/* Test for no entry after @private token.  */\n+\n+/* { do-do compile } */\n+\n+@interface foo\n+{\n+@private\n+}\n+@end"}, {"sha": "c5f5ea969ab35518361ecb3755075d92dc60a69e", "filename": "gcc/testsuite/obj-c++.dg/encode-1.mm", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,23 @@\n+/* Test for graceful encoding of const-qualified fields and parameters.  */\n+/* Author: Ziemowit Laski  <zlaski@apple.com>  */\n+\n+/* { dg-do compile } */\n+\n+struct Cxx {\n+  const struct Cxx *next;\n+};\n+\n+@interface ObjC {\n+  const struct Cxx *obj;\n+}\n+- (ObjC *)initWithCxx: (struct Cxx *const)c and: (const struct Cxx *)d;\n+@end\n+\n+@implementation ObjC\n+- (ObjC *)initWithCxx: (struct Cxx *const)c and: (const struct Cxx *)d {\n+  obj = d;\n+  return self;\n+}\n+@end \n+\n+/* { dg-final { scan-assembler \"@\\[0-9\\]+@0:\\[0-9\\]+r\\\\^{Cxx=\\\\^r{Cxx}}\\[0-9\\]+\\\\^r{Cxx}\" } } */"}, {"sha": "232ac0e8fc9d232d8b9971eff922a4c2748f7cc7", "filename": "gcc/testsuite/obj-c++.dg/encode-2.mm", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+template <class T>\n+struct Vec {\n+ T x, y;\n+ int z;\n+};\n+\n+Vec<double> dd;\n+const char *enc = @encode(Vec<float>);\n+const char *enc2 = @encode(Vec<double>);\n+\n+/* { dg-final { scan-assembler \"{Vec<float>=ffi}\" } } */\n+/* { dg-final { scan-assembler \"{Vec<double>=ddi}\" } } */"}, {"sha": "c67a972ddceea0c0f3a30731d5b2bdc760848a83", "filename": "gcc/testsuite/obj-c++.dg/encode-3.mm", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-3.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+\n+template <class T>\n+struct Vec {\n+ T x, y;\n+ long z;\n+ long long zz;\n+};\n+\n+Vec<double> dd;\n+const char *enc = @encode(Vec<float>);\n+const char *enc2 = @encode(Vec<double>);\n+\n+int main(void) {\n+  char *encode = @encode(long);\n+\n+  if (strcmp (encode, \"l\"))\n+    abort();\n+\n+  if (strcmp (enc, \"{Vec<float>=fflq}\"))\n+    abort();\n+\n+  if (strcmp (enc2, \"{Vec<double>=ddlq}\"))\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "c5fec6fbe931b3dd83fb56ea01946d9bb2116c6d", "filename": "gcc/testsuite/obj-c++.dg/extern-c-1.mm", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fextern-c-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fextern-c-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fextern-c-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,18 @@\n+/* Test extern c support inside @implementation */\n+/* Devang Patel  <dpatel@apple.com>.  */\n+\n+#include <objc/objc.h>\n+\n+@interface Extern \n+@end\n+\n+@implementation Extern\n+\n+extern \"C\" void NSRegisterElement(id element);\n+\n+- init {\n+  NSRegisterElement(self);\n+  return self;\n+}\n+\n+@end"}, {"sha": "ad555962dbbc87687891fc540a8111c8d3ec6f8d", "filename": "gcc/testsuite/obj-c++.dg/extra-semi.mm", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fextra-semi.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fextra-semi.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fextra-semi.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,10 @@\n+/* Allow extra semicolons in between method declarations,\n+   for old times' sake.  */\n+\n+/* { dg-do compile } */\n+\n+@interface Foo\n+   -(Foo *) expiration;\n+   -(void) setExpiration:(Foo *) date;;\n+   -(int) getVersion;\n+@end"}, {"sha": "33cb8467dcd7dcd6abdf12a207d2cdb507ce2ff4", "filename": "gcc/testsuite/obj-c++.dg/fix-and-continue-2.mm", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffix-and-continue-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffix-and-continue-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffix-and-continue-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,24 @@\n+/* Static variables, even if local, require indirect access through a stub\n+   if -mfix-and-continue is enabled.  */\n+\n+/* Author: Ziemowit Laski <zlaski@apple.com> */\n+   \n+/* { dg-do assemble { target *-*-darwin* } } */\n+/* { dg-options \"-mfix-and-continue\" } */\n+\n+#include <objc/Object.h>\n+\n+@interface Foo: Object\n++ (Object *)indexableFileTypes;\n+@end\n+\n+@implementation Foo\n++ (Object *)indexableFileTypes\n+{\n+  static Object *fileTypes = 0;\n+  if(!fileTypes) {\n+    fileTypes = [Object new];\n+  }\n+  return fileTypes;\n+}\n+@end"}, {"sha": "ce1d9ff2d8f32781f0d15a8349e207c50fbd973e", "filename": "gcc/testsuite/obj-c++.dg/isa-field-1.mm", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fisa-field-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fisa-field-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fisa-field-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,43 @@\n+/* Ensure there are no bizarre difficulties with accessing the 'isa' field of objects.  */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@interface Object (Test)\n+- (Class) test1: (id)object;\n+@end\n+\n+@interface Derived: Object\n+- (Class) test2: (id)object;\n+@end\n+\n+@implementation Object (Test)\n+\n+Class test1(id object) {\n+  Class cls = object->isa;\n+  return cls;\n+}\n+- (Class) test1: (id)object {\n+  Class cls = object->isa;\n+  return cls;\n+}\n+\n+@end\n+\n+@implementation Derived\n+\n+Class test2(id object) {\n+  Class cls = object->isa;\n+  return cls;\n+}\n+- (Class) test2: (id)object {\n+  Class cls = object->isa;\n+  return cls;\n+}\n+\n+@end\n+\n+Class test3(id object) {\n+  Class cls = object->isa;\n+  return cls;\n+}"}, {"sha": "21bd3a3bec03df5634ff5727d9da23085d6c58f4", "filename": "gcc/testsuite/obj-c++.dg/ivar-list-semi.mm", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-list-semi.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-list-semi.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-list-semi.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,12 @@\n+/* Allow for an optional semicolon following the ivar block.  */\n+/* Contributed by: Ziemowit Laski <zlaski@apple.com>.  */\n+\n+#include <objc/Object.h>\n+\n+@interface Tink : Object {\n+@private\n+ unsigned long mCode[4];\n+};\n+- (id)initWithProc:(void *)inProc;\n+- (void *)getUniqueProc;\n+@end"}, {"sha": "0d7389d2c2fa80b0c238edc288ebe706ab8d895d", "filename": "gcc/testsuite/obj-c++.dg/local-decl-1.mm", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flocal-decl-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flocal-decl-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flocal-decl-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,44 @@\n+/* Test for ivar access inside of class methods.  It should be allowed\n+   (with a warning), but only if no other declarations with the same\n+   name are seen.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@interface Sprite: Object {\n+  int sprite, spree;\n+}\n++ (void)setFoo:(int)foo;\n++ (void)setSprite:(int)sprite;\n+- (void)setFoo:(int)foo;\n+- (void)setSprite:(int)sprite;\n+@end\n+\n+int spree = 23;\n+\n+@implementation Sprite\n++ (void)setFoo:(int)foo {\n+  sprite = foo;  /* { dg-warning \"instance variable .sprite. accessed in class method\" } */\n+  spree = foo;\n+}\n++ (void)setSprite:(int)sprite {\n+  int spree;\n+  sprite = 15;\n+  spree = 17;\n+  ((Sprite *)self)->sprite = 16;   /* NB: This is how one _should_ access */\n+  ((Sprite *)self)->spree = 18;    /* ivars from within class methods!    */\n+}\n+- (void)setFoo:(int)foo {\n+  sprite = foo;\n+  spree = foo;\n+}\n+- (void)setSprite:(int)sprite {\n+  int spree;\n+  sprite = 15;  /* { dg-warning \"local declaration of .sprite. hides instance variable\" } */\n+  self->sprite = 16;\n+  spree = 17;  /* { dg-warning \"local declaration of .spree. hides instance variable\" } */\n+  self->spree = 18;\n+}   \n+@end"}, {"sha": "e149e5c61195d06a444e65f01d46161fd56fa7a6", "filename": "gcc/testsuite/obj-c++.dg/lookup-1.mm", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flookup-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flookup-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flookup-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,8 @@\n+/* Simple test to check Objectivec-C++ qualified type lookup.  */\n+/* Devang Patel  <dpatel@apple.com>.  */\n+\n+@interface A\n+{\n+   A *ap;\n+}\n+@end"}, {"sha": "f694ec9301c330015cc8cb6c1255a00c4361c4f8", "filename": "gcc/testsuite/obj-c++.dg/lookup-2.mm", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flookup-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flookup-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flookup-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+class MyWidget {\n+ public:\n+  int a;\n+  MyWidget(void) { a = 17; }\n+};\n+\n+MyWidget gWidget;\n+\n+@protocol MyProto\n+- (MyWidget *)widget;\n+@end\n+\n+@interface Foo: Object\n+@end\n+\n+@interface Bar: Foo <MyProto>\n+@end\n+\n+@interface Container: Object\n++ (MyWidget *)elementForView:(Foo *)view;\n+@end\n+\n+@implementation Foo\n+@end\n+\n+@implementation Bar\n+- (MyWidget *)widget {\n+  return &gWidget;\n+}\n+@end\n+\n+@implementation Container\n++ (MyWidget *)elementForView:(Foo *)view\n+{\n+    MyWidget *widget = nil;\n+    if ([view conformsTo:@protocol(MyProto)]) {\n+        widget = [(Foo <MyProto> *)view widget];\n+    }\n+    return widget;\n+}\n+@end\n+\n+int main(void) {\n+  id view = [Bar new];\n+  MyWidget *w = [Container elementForView: view];\n+\n+  if (!w || w->a != 17)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "fdab6b7a9c36b0b11eab599a72a5d5427a69fe16", "filename": "gcc/testsuite/obj-c++.dg/method-1.mm", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,30 @@\n+/* Test whether casting 'id' to a specific class removes method lookup\n+   ambiguity.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@class Int1, Int2;\n+\n+@interface Int1\n++ (Int1 *)classMethod1;\n++ (id)classMethod2;\n+- (Int1 *)instanceMethod:(Int2 *)arg;  /* { dg-bogus \"using\" } */\n+@end\n+\n+@interface Int2: Int1\n++ (Int1 *)classMethod1; \n++ (id)classMethod2;\n+- (id)int2Method;\n+- (int)instanceMethod:(int)arg;  /* { dg-bogus \"also found\" } */\n+@end\n+\n+int main(void) {\n+  id i = [(Int2 *)[Int1 classMethod1] int2Method];   /* { dg-bogus \"may not respond to\" } */\n+  int j = [(Int2 *)[Int2 classMethod2] instanceMethod: 45];  /* { dg-bogus \"multiple methods\" } */\n+\t/* { dg-bogus \"invalid conversion\" \"\" { target *-*-* } 25 } */\n+\t/* { dg-bogus \"invalid conversion\" \"\" { target *-*-* } 25 } */\n+  return j;\n+}"}, {"sha": "a76055e471671dd646e772a2b92481c2d061470b", "filename": "gcc/testsuite/obj-c++.dg/method-2.mm", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,56 @@\n+/* Test if prior method lookup at method @implementation time is not\n+   overly aggressive, leading to methods being found in other classes.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@class NSString;\n+\n+@protocol NSMenuItem\n++ (void)setUsesUserKeyEquivalents:(BOOL)flag;\n++ (BOOL)usesUserKeyEquivalents;\n+@end\n+\n+@interface NSMenuItem : Object <NSMenuItem> {\n+  @private\n+  id _menu;\n+}\n+@end\n+\n+@interface NSResponder : Object <NSMenuItem>\n+{\n+  id _nextResponder;\n+}\n+@end\n+\n+@interface Object(NSMenuValidation)\n+- (BOOL)validateMenuItem:(id <NSMenuItem>)menuItem;\n+@end\n+\n+@interface NSResponder (NSStandardKeyBindingMethods)\n+- (void)insertText:(id)insertString;\n+- (void)doCommandBySelector:(SEL)aSelector;\n+@end\n+\n+@interface NSView : NSResponder\n+{\n+  id _superview;\n+  id _subviews;\n+}\n+@end\n+\n+@interface SKTGraphicView : NSView {\n+  @private\n+  float _gridSpacing;\n+}\n+@end\n+\n+@implementation SKTGraphicView\n+- (BOOL)validateMenuItem:(NSMenuItem *)item {\n+  return (BOOL)1;\n+}\n+- (void)insertText:(NSString *)str {\n+}\n+@end"}, {"sha": "9dab8c5b3324fb7a92ec1c964a8629e5e32742b7", "filename": "gcc/testsuite/obj-c++.dg/method-3.mm", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-3.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,24 @@\n+/* Do not warn about \"slightly\" mismatched method signatures if \n+   -Wstrict-selector-match is off.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-strict-selector-match\" } */\n+\n+#include <objc/objc.h>\n+\n+@interface Base\n+- (id) meth1: (Base *)arg1;\n+- (id) window;\n+@end\n+\n+@interface Derived: Base\n+- (id) meth1: (Derived *)arg1;\n+- (Base *) window;\n+@end\n+\n+void foo(void) {\n+  id r;\n+\n+  [r meth1:r];\n+  [r window];\n+}"}, {"sha": "1d8d7ea4607583e5dfed447174d1e44665e9f634", "filename": "gcc/testsuite/obj-c++.dg/method-4.mm", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-4.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,24 @@\n+/* Warn about \"slightly\" mismatched method signatures if \n+   -Wstrict-selector-match is on.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wstrict-selector-match\" } */\n+\n+#include <objc/objc.h>\n+\n+@interface Base\n+- (id) meth1: (Base *)arg1; /* { dg-warning \"using .\\\\-\\\\(id\\\\)meth1:\\\\(Base \\\\*\\\\)arg1.\" } */\n+- (id) window;              /* { dg-warning \"using .\\\\-\\\\(id\\\\)window\" } */\n+@end\n+\n+@interface Derived: Base\n+- (id) meth1: (Derived *)arg1; /* { dg-warning \"also found .\\\\-\\\\(id\\\\)meth1:\\\\(Derived \\\\*\\\\)arg1.\" } */\n+- (Base *) window;             /* { dg-warning \"also found .\\\\-\\\\(Base \\\\*\\\\)window.\" } */\n+@end\n+\n+void foo(void) {\n+  id r;\n+\n+  [r meth1:r];  /* { dg-warning \"multiple methods named .\\\\-meth1:. found\" } */\n+  [r window];   /* { dg-warning \"multiple methods named .\\\\-window. found\" } */\n+}"}, {"sha": "17c841a46612272c7830c787edad52d990c8c9fb", "filename": "gcc/testsuite/obj-c++.dg/method-5.mm", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-5.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,30 @@\n+/* Do not warn about \"slightly\" mismatched method signatures if \n+   -Wstrict-selector-match is off.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-strict-selector-match\" } */\n+\n+#include <objc/objc.h>\n+\n+typedef enum { en1_1, en1_2 } En1;\n+typedef enum { en2_1, en2_2 } En2;\n+typedef struct { int a, b; } St1;\n+typedef struct { unsigned a, b; } St2;\n+\n+@interface Base\n+- (id) meth1: (En1)arg1;\n+- (St1) window;\n+@end\n+\n+@interface Derived: Base\n+- (id) meth1: (En2)arg1;\n+- (St2)window;\n+@end\n+\n+void foo(void) {\n+  id r;\n+  En1 en;\n+\n+  [r meth1:en];\n+  [r window];\n+}"}, {"sha": "5fc0d73d375ebfc826d9d13c4818fee2c01062c3", "filename": "gcc/testsuite/obj-c++.dg/method-6.mm", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,19 @@\n+/* The following should NOT generate \"may not respond to\" warnings,\n+   since a forward-declared @class (instance) should be treated like a\n+   'Class') ('id').  */\n+\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@class NotKnown;\n+\n+void foo(NotKnown *n) {\n+  [NotKnown new];\n+  [n nonexistent_method]; /* { dg-warning \"no .\\\\-nonexistent_method. method found\" } */\n+}\n+\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+"}, {"sha": "e9e2d3a43073b06ef0d12a8e3365bbfb5df763c9", "filename": "gcc/testsuite/obj-c++.dg/method-7.mm", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-7.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,21 @@\n+/* Check if sending messages to \"underspecified\" objects is handled gracefully.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do compile } */\n+\n+@class UnderSpecified;\n+typedef struct NotAClass {\n+  int a, b;\n+} NotAClass;\n+\n+void foo(UnderSpecified *u, NotAClass *n) {\n+  [n nonexistent_method];    /* { dg-warning \"invalid receiver type\" } */\n+       /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } 12 } */\n+  [NotAClass nonexistent_method]; /* { dg-error \".NotAClass. is not an Objective\\\\-C class name or alias\" } */\n+  [u nonexistent_method]; /* { dg-warning \"no .\\\\-nonexistent_method. method found\" } */\n+  [UnderSpecified nonexistent_method]; /* { dg-warning \"no .\\\\+nonexistent_method. method found\" } */\n+}\n+\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "7b4a3607561a2bf2eb1191c2797ef2545f580323", "filename": "gcc/testsuite/obj-c++.dg/no-extra-load.mm", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fno-extra-load.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fno-extra-load.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fno-extra-load.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,24 @@\n+// Radar 3926484\n+\n+// { dg-do compile }\n+\n+#include <objc/Object.h>\n+#include <iostream>\n+\n+@interface Greeter : Object\n+- (void) greet: (const char *)msg;\n+@end\n+\n+@implementation Greeter\n+- (void) greet: (const char *)msg { std::cout << msg; }\n+@end\n+\n+int\n+main ()\n+{\n+  std::cout << \"Hello from C++\\n\";\n+  Greeter *obj = [Greeter new];\n+  [obj greet: \"Hello from Objective-C\\n\"];\n+}\n+\n+/* { dg-final { scan-assembler-not \"L_objc_msgSend\\\\\\$non_lazy_ptr\" } } */"}, {"sha": "d4999897d25cd4fb66b6f7ea5d348744fbf89649", "filename": "gcc/testsuite/obj-c++.dg/overload-1.mm", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Foverload-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Foverload-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Foverload-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,11 @@\n+// Make sure we can overload on ObjC classes\n+// Radar 3960754\n+\n+// { dg-do compile }\n+\n+@class A, B; \n+\n+struct X {\n+  void call(A*);\n+  void call(B*);\n+};"}, {"sha": "3d3539ed3f3ef35c0d6e059ca9bac6095e43eea2", "filename": "gcc/testsuite/obj-c++.dg/pragma-1.mm", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpragma-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpragma-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpragma-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,11 @@\n+/* It is OK to use #pragma inside @interface body. This test checks that.  */\n+/* Devang Patel  <dpatel@apple.com>.  */\n+\n+@interface A\n+{\n+   int p;\n+}\n++(int) foo;\n+#pragma Mark foobar\n+-(int) bar;\n+@end"}, {"sha": "14c4d7928a24f25cc844cfc65f2b9e5380131ef9", "filename": "gcc/testsuite/obj-c++.dg/pragma-2.mm", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpragma-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpragma-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpragma-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,23 @@\n+/* It is OK to use #pragma inside @implementation body. This test checks that.  */\n+/* Ziemowit Laski  <zlaski@apple.com>.  */\n+\n+@interface A\n+{\n+   int p;\n+}\n++(int) foo;\n+-(int) bar;\n+@end\n+\n+@implementation A\n+#pragma mark -\n+#pragma mark init / dealloc\n++ (int)foo {\n+  return 1;\n+}\n+#pragma mark -\n+#pragma mark Private Functions\n+- (int)bar {\n+  return 2;\n+}\n+@end"}, {"sha": "c4ec5ffb9b1baabe1442a65f8141f13098d2a168", "filename": "gcc/testsuite/obj-c++.dg/private-1.mm", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprivate-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprivate-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprivate-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,60 @@\n+/* Test errors for accessing @private and @protected variables.  */\n+/* Based on work by: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MySuperClass\n+{\n+@private\n+  int _private;\n+\n+@protected\n+  int _protected;\n+\n+@public\n+  int _public;\n+}\n+- (void) test;\n+@end\n+\n+@implementation MySuperClass\n+- (void) test\n+{\n+  _private = 12;   /* Ok  */\n+  _protected = 12; /* Ok  */\n+  _public = 12;    /* Ok  */\n+}\n+@end\n+\n+\n+@interface MyClass : MySuperClass \n+@end\n+\n+@implementation MyClass\n+- (void) test\n+{\n+  /* Private variables simply don't exist in the subclass.  */\n+  _private = 12; /* { dg-error \"._private. was not declared in this scope\" } */\n+\n+  _protected = 12; /* Ok  */\n+  _public = 12;    /* Ok  */\n+}\n+@end\n+\n+int main (void)\n+{\n+  MyClass *m = nil;\n+  \n+  if (m != nil)\n+    {\n+      int access;\n+\n+      access = m->_private;   /* { dg-error \"is @private\" }  */\n+      access = m->_protected; /* { dg-error \"is @protected\" }  */\n+      access = m->_public;    /* Ok  */\n+    }\n+\n+  return 0;\n+}"}, {"sha": "3e6ff118d23cfdc99afb4a0a6e58a09aaa65fbec", "filename": "gcc/testsuite/obj-c++.dg/private-2.mm", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprivate-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprivate-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprivate-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,56 @@\n+/* Test warnings for shadowing instance variables.  */\n+/* Based on work by: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MySuperClass\n+{\n+@private\n+  int _private;\n+\n+@protected\n+  int _protected;\n+\n+@public\n+  int _public;\n+}\n+- (void) test;\n+@end\n+\n+@implementation MySuperClass\n+- (void) test\n+{\n+  /* FIXME: I wonder if the warnings shouldn't be better generated\n+     when the variable is declared, rather than used!  */\n+  int _private = 12;\n+  int _protected = 12;\n+  int _public = 12;\n+  int a;\n+  \n+  a = _private;    /* { dg-warning \"hides instance variable\" } */\n+  a = _protected;  /* { dg-warning \"hides instance variable\" } */\n+  a = _public;     /* { dg-warning \"hides instance variable\" } */\n+}\n+@end\n+\n+\n+@interface MyClass : MySuperClass \n+@end\n+\n+@implementation MyClass\n+- (void) test\n+{\n+  int _private = 12;\n+  int _protected = 12;\n+  int _public = 12;\n+  int a;\n+\n+  /* The private variable can be shadowed without warnings, because\n+   * it's invisible, and not accessible, to the subclass!  */\n+  a = _private;   /* Ok  */\n+  a = _protected; /* { dg-warning \"hides instance variable\" } */\n+  a = _public;    /* { dg-warning \"hides instance variable\" } */\n+}\n+@end"}, {"sha": "d9bbf3aa9b554b522f00f3f71f73738b9c0f3c12", "filename": "gcc/testsuite/obj-c++.dg/proto-qual-1.mm", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-qual-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-qual-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-qual-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,52 @@\n+/* Check that protocol qualifiers are compiled and encoded properly.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* { dg-do run } */\n+\n+#include <objc/Protocol.h>\n+#ifndef __NEXT_RUNTIME__\n+#include <objc/objc-api.h>\n+#endif\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+/* The encoded parameter sizes will be rounded up to match pointer alignment.  */\n+#define ROUND(s,a) (a * ((s + a - 1) / a))\n+#define aligned_sizeof(T) ROUND(sizeof(T),__alignof(void *))\n+\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@protocol Retain\n++ (oneway void)retainArgument:(out bycopy id)arg1 with:(in signed char **)arg2;\n+- (bycopy) address:(byref inout id)location with:(out short unsigned **)arg2;\n+@end\n+\n+@interface Foo <Retain>\n++ (oneway void)retainArgument:(out bycopy id)arg with:(in signed char **)arg2;\n+@end\n+\n+@implementation Foo\n++ (oneway void)retainArgument:(out bycopy id)arg1 with:(in signed char **)arg2 { }\n+- (bycopy) address:(byref inout id)location with:(out short unsigned **)arg2 { return nil; }\n+@end\n+\n+Protocol *proto = @protocol(Retain);\n+struct objc_method_description *meth;\n+unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n+\n+static void scan_initial(const char *pattern) {\n+  totsize = offs0 = offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = offs7 = (unsigned)-1;\n+  sscanf(meth->types, pattern, &totsize, &offs0, &offs1, &offs2, &offs3,\n+      &offs4, &offs5, &offs6, &offs7);\n+  CHECK_IF(!offs0 && offs1 == aligned_sizeof(id) && offs2 == offs1 + aligned_sizeof(SEL) && totsize >= offs2);\n+}\n+\n+int main(void) {\n+  meth = [proto descriptionForInstanceMethod: @selector(address:with:)];\n+  scan_initial(\"O@%u@%u:%uNR@%uo^^S%u\");\n+  CHECK_IF(offs3 == offs2 + aligned_sizeof(id) && totsize == offs3 + aligned_sizeof(unsigned));\n+  meth = [proto descriptionForClassMethod: @selector(retainArgument:with:)];\n+  scan_initial(\"Vv%u@%u:%uOo@%un^*%u\");\n+  CHECK_IF(offs3 == offs2 + aligned_sizeof(id) && totsize == offs3 + aligned_sizeof(char **));\n+  return 0;\n+}"}, {"sha": "db8195cb4eb2b68b7add325f7ace37a33e995adf", "filename": "gcc/testsuite/obj-c++.dg/qual-types-1.mm", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fqual-types-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fqual-types-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fqual-types-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,68 @@\n+/* Test if ObjC++ can distinguish protocol qualifiers from\n+   template arguments.  */\n+/* Author:  Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@protocol Zone\n++ allocFromZone:(void *)zone;\n+- copyFromZone:(void *)zone; \n+@end\n+\n+@protocol Init <Zone>\n++ initialize;\n+- init; \n+@end\n+\n+@interface Foo: Object\n+{ @public int val; }\n+- init;\n+@end\n+\n+template <class T, class U> struct X {\n+  T x; U y;\n+};\n+\n+X<int, float> xx;\n+\n+template <typename T> struct Holder\n+{\n+  T *obj;\n+  static int counter;\n+  Holder(void) { obj = [[T alloc] init]; }\n+  ~Holder(void) { [obj free]; --counter; }\n+  id <Init, Zone> getObjId(void) { return obj; }\n+  Object <Zone, Init> *getObj(void) { return obj; }\n+};\n+\n+typedef Holder <Foo <Init, Zone> > FooHolder;\n+\n+@implementation Foo\n+-(id) init {\n+  [super init];\n+  val = ++FooHolder::counter;\n+  return self;\n+}\n+@end\n+\n+template <typename T>\n+int Holder<T>::counter = 0;\n+\n+int main (void) {\n+  CHECK_IF(FooHolder::counter == 0);\n+  {\n+    FooHolder holder;\n+    CHECK_IF(holder.obj->val == 1);\n+    CHECK_IF(FooHolder::counter == 1);\n+    FooHolder holder2;\n+    CHECK_IF(holder2.obj->val == 2);\n+    CHECK_IF(FooHolder::counter == 2);\n+  }\n+  CHECK_IF(FooHolder::counter == 0);\n+  return 0;\n+}"}, {"sha": "d34f8c89cd6f4f9d39b5651f920df88e3f03cf4e", "filename": "gcc/testsuite/obj-c++.dg/selector-1.mm", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -1,26 +1,30 @@\n-/* Test warning for non existing selectors.  */\n-/* Contributed by Devang Patel <dpatel@apple.com>.  */\n-/* { dg-options \"-Wselector -fnext-runtime\" } */\n-/* { dg-do compile } */\n+/* Test whether including C++ keywords such as 'and', 'or',\n+   'not', etc., is allowed inside ObjC selectors (as it must be).  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n \n-typedef struct objc_object { struct objc_class *class_pointer; } *id;\n-typedef struct objc_selector    *SEL;\n+/* { dg-do compile } */\n \n-@interface Foo\n-- (void) foo;\n-- (void) bar;\n+@interface Int1 \n++ (int)and_eq:(int)arg1 and:(int)arg2;\n+- (int)or_eq:(int)arg1 or:(int)arg3;\n+- (int)not:(int)arg1 xor:(int)arg2;\n+- (void)bitand:(char)c1 bitor:(char)c2;\n+- (void)compl:(float)f1 xor_eq:(double)d1;\n+- (void)not_eq;\n @end\n \n-@implementation Foo\n-- (void) bar\n-{\n-}\n-\n-- (void) foo\n-{\n-  SEL a,b,c;\n-  a = @selector(b1ar); /* { dg-warning \"creating selector for nonexistent method .b1ar.\" } */\n-  b = @selector(bar);\n-}\n+@implementation Int1\n++ (int)and_eq:(int)arg1 and:(int)arg2 { return arg1 + arg2; }\n+- (int)or_eq:(int)arg1 or:(int)arg3 { return arg1 + arg3; }\n+- (int)not:(int)arg1 xor:(int)arg2 { return arg1 + arg2; }\n+- (void)bitand:(char)c1 bitor:(char)c2 { }\n+- (void)compl:(float)f1 xor_eq:(double)d1 { }\n+- (void)not_eq { }\n @end\n \n+/* { dg-final { scan-assembler  \"\\\\+\\\\\\[Int1 and_eq:and:\\\\]|c_Int1__and_eq_and\" } } */\n+/* { dg-final { scan-assembler  \"\\\\-\\\\\\[Int1 or_eq:or:\\\\]|i_Int1__or_eq_or\" } } */\n+/* { dg-final { scan-assembler  \"\\\\-\\\\\\[Int1 not:xor:\\\\]|i_Int1__not_xor\" } } */\n+/* { dg-final { scan-assembler  \"\\\\-\\\\\\[Int1 bitand:bitor:\\\\]|i_Int1__bitand_bitor\" } } */\n+/* { dg-final { scan-assembler  \"\\\\-\\\\\\[Int1 compl:xor_eq:\\\\]|i_Int1__compl_xor_eq\" } } */\n+/* { dg-final { scan-assembler  \"\\\\-\\\\\\[Int1 not_eq\\\\]|i_Int1__not_eq\" } } */"}, {"sha": "dd7ce3badc79e4c9e1d70a497b28cc4466c543ae", "filename": "gcc/testsuite/obj-c++.dg/stubify-1.mm", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,37 @@\n+/* All calls must be properly stubified.  Complain about any \"call\n+   _objc_msgSend<end-of-line>\" without the $stub suffix.  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-Os -mdynamic-no-pic -fno-exceptions\" } */\n+\n+typedef struct objc_object { } *id ;\n+int x = 41 ;\n+\n+extern \"C\" {\n+  extern id objc_msgSend(id self, char * op, ...);\n+  extern int bogonic (int, int, int);\n+}\n+\n+@interface Document {}\n+- (Document *) window;\n+- (Document *) class;\n+- (Document *) close;\n+@end\n+@implementation Document\n+- (Document *) class { }\n+- (Document *) close { }\n+- (Document *) window { }\n+- (void)willEndCloseSheet:(void *)sheet returnCode:(int)returnCode contextInfo:(void *)contextInfo {\n+  [[self window] close];\n+  ((void (*)(id, char *, int))objc_msgSend)([self class], (char *)contextInfo, 1);\n+  ((void (*)(id, char *, int))bogonic)([self class], (char *)contextInfo, 1);\n+  bogonic (3, 4, 5);\n+  x++;\n+}\n+@end\n+\n+/* { dg-final { scan-assembler-not \"\\(bl|call\\)\\[ \\t\\]+_objc_msgSend\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\(bl|call\\)\\[ \\t\\]+L_objc_msgSend\\\\\\$stub\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\(bl|call\\)\\[ \\t\\]+_bogonic\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\(bl|call\\)\\[ \\t\\]+L_bogonic\\\\\\$stub\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$non_lazy_ptr\" } } */"}, {"sha": "0bbfd312d65b38fde6904093781baa4a637597c0", "filename": "gcc/testsuite/obj-c++.dg/stubify-2.mm", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,31 @@\n+/* All calls must be properly stubified.  */\n+/* Testcase extracted from TextEdit:Document.m.  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-mdynamic-no-pic -fdump-rtl-jump\" } */\n+\n+typedef struct objc_object { } *id ;\n+int x = 41 ;\n+extern id objc_msgSend(id self, char * op, ...);\n+extern int bogonic (int, int, int) ;\n+@interface Document {}\n+- (Document *) window;\n+- (Document *) class;\n+- (Document *) close;\n+@end\n+@implementation Document\n+- (Document *) class { }\n+- (Document *) close { }\n+- (Document *) window { }\n+- (void)willEndCloseSheet:(void *)sheet returnCode:(int)returnCode contextInfo:(void *)contextInfo {\n+  [[self window] close];\n+  ((void (*)(id, char *, int))objc_msgSend)([self class], (char *)contextInfo, 1);\n+  ((void (*)(id, char *, int))bogonic)([self class], (char *)contextInfo, 1);\n+  bogonic (3, 4, 5);\n+  x++;\n+}\n+@end\n+\n+/* Any symbol_ref of an un-stubified objc_msgSend is an error; look\n+   for \"objc_msgSend\" in quotes, without the $stub suffix.  */\n+/* { dg-final { scan-file-not stubify-2.mm.03.jump \"symbol_ref.*\\\"objc_msgSend\\\"\" } } */"}, {"sha": "7887036978008373734c5ea4dd4e7d6fefbb66c8", "filename": "gcc/testsuite/obj-c++.dg/super-class-1.mm", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-class-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-class-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-class-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,30 @@\n+/* Test calling super from within a category method.  */\n+\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface NSObject\n+@end\n+@interface NSMenuItem: NSObject\n+@end\n+\n+@interface NSObject (Test)\n++ (int) test_func;\n+@end\n+\n+@implementation NSObject (Test)\n++ (int) test_func\n+{}\n+@end\n+\n+@interface NSMenuItem (Test)\n++ (int) test_func;\n+@end\n+\n+@implementation NSMenuItem (Test)\n++ (int) test_func\n+{\n+   return [super test_func];  /* { dg-bogus \"invalid use of undefined type\" } */\n+}   /* { dg-bogus \"forward declaration of\" \"\" { target *-*-* } 28 } */\n+@end"}, {"sha": "41e2fd2bfeeb9d23bbe553cdd2abe34df8bc1786", "filename": "gcc/testsuite/obj-c++.dg/super-class-2.mm", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-class-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-class-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-class-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,35 @@\n+/* Bail out gracefully if attempting to derive from a class that has only been\n+   forward-declared (via @class).  Conversely, @compatibility_alias declarations\n+   should be traversed to find the @interface.  */\n+\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@class MyWpModule;\n+\n+@compatibility_alias MyObject Object;\n+@compatibility_alias FictitiousModule MyWpModule;\n+\n+@protocol MySelTarget\n+- (id) meth1;\n+@end\n+\n+@protocol Img\n+- (id) meth2;\n+@end\n+\n+@interface FunnyModule: FictitiousModule <Img> /* { dg-error \".MyWpModule., superclass of .FunnyModule.\" } */\n+- (id) meth2;\n+@end\n+\n+@interface MyProjWpModule : MyWpModule <MySelTarget, Img> /* { dg-error \".MyWpModule., superclass of .MyProjWpModule.\" } */ {\n+  id i1, i2;\n+}\n+- (id) meth1;\n+- (id) meth2;\n+@end\n+\n+@interface AnotherModule: MyObject <MySelTarget>\n+- (id) meth1;\n+@end"}, {"sha": "0ab177bb73c9f0d2e6979279435d71a616626137", "filename": "gcc/testsuite/obj-c++.dg/super-dealloc-1.mm", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-dealloc-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-dealloc-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-dealloc-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,46 @@\n+/* Check for warnings about missing [super dealloc] calls.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* { dg-do compile } */\n+\n+@interface Foo {\n+  void *isa;\n+}\n+- (void) dealloc;\n+- (void) some_other;\n+@end\n+\n+@interface Bar: Foo {\n+  void *casa;\n+}\n+- (void) dealloc;\n+@end\n+\n+@interface Baz: Bar {\n+  void *usa;\n+}\n+- (void) dealloc;\n+@end\n+\n+@implementation Foo\n+- (void) dealloc {\n+  isa = 0;   /* Should not warn here.  */\n+}\n+- (void) some_other {\n+  isa = (void *)-1;\n+}\n+@end\n+\n+@implementation Bar\n+- (void) dealloc {\n+  casa = 0;\n+  [super some_other];\n+}  /* { dg-warning \"method possibly missing a .super dealloc. call\" } */\n+@end\n+\n+@implementation Baz\n+- (void) dealloc {\n+  usa = 0;\n+  [super dealloc];  /* Should not warn here.  */\n+}\n+@end"}, {"sha": "80dcf495062dfaa7ab080a0d79db030019be0523", "filename": "gcc/testsuite/obj-c++.dg/super-dealloc-2.mm", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-dealloc-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-dealloc-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-dealloc-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,46 @@\n+/* Check for warnings about missing [super dealloc] calls.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* { dg-do compile } */\n+\n+@interface Foo {\n+  void *isa;\n+}\n+- (void) dealloc;\n+- (void) some_other;\n+@end\n+\n+@interface Bar: Foo {\n+  void *casa;\n+}\n+- (void) dealloc0;\n+@end\n+\n+@interface Baz: Bar {\n+  void *usa;\n+}\n+- (void) dealloc;\n+@end\n+\n+@implementation Foo\n+- (void) dealloc {\n+  isa = 0;   /* Should not warn here.  */\n+}\n+- (void) some_other {\n+  isa = (void *)-1;\n+}\n+@end\n+\n+@implementation Bar\n+- (void) dealloc0 {\n+  casa = 0;\n+  [super some_other];  /* Should not warn here.  */\n+} \n+@end\n+\n+@implementation Baz\n+- (void) dealloc {\n+  usa = 0;\n+  [super dealloc0]; \n+} /* { dg-warning \"method possibly missing a .super dealloc. call\" } */\n+@end"}, {"sha": "4b0a3df6c639c7b299211ccced49177228ac561c", "filename": "gcc/testsuite/obj-c++.dg/template-1.mm", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,49 @@\n+/* Test for using ObjC classes as C++ template parameters.  */\n+/* Author:  Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@interface Base: Object\n+- (int) meth;\n+@end\n+\n+@interface Derived: Base   \n+- (int) meth;                \n+@end\n+\n+static int count = 0;\n+\n+template <class T> struct Templ\n+{\n+  T *m;\n+  int i;\n+  Templ(): i(55), m([[T alloc] init]) { count++; }\n+  ~Templ() { [m free]; count--; }\n+};\n+\n+@implementation Base\n+- (int) meth { return 333; }\n+@end\n+\n+@implementation Derived\n+- (int) meth { return 666; }\n+@end\n+\t\n+int main (void) {\n+  CHECK_IF(count == 0);\n+  {\n+    Templ<Derived> derived;\n+    CHECK_IF(derived.i == 55 && count == 1);\n+    Templ<Base> base;\n+    CHECK_IF(base.i == 55 && count == 2);\n+    CHECK_IF([base.m meth] == 333);\n+    CHECK_IF([derived.m meth] == 666);\n+  }\n+  CHECK_IF(count == 0);\n+  return 0;\n+}"}, {"sha": "346dab6c2ec62fa2a7af7199d69849215eef889f", "filename": "gcc/testsuite/obj-c++.dg/template-2.mm", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,29 @@\n+/* Test if ObjC classes (and pointers thereto) can participate\n+   in C++ overloading.  Correct handling of cv-qualifiers is \n+   key here.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do compile } */\n+\n+@interface foo {\n+  int a, b;\n+}\n+@end\n+\n+struct bar {\n+  int c, d;\n+};\n+\n+template <class _Tp>\n+struct allocator {\n+  typedef _Tp*       pointer;\n+  typedef const _Tp* const_pointer;\n+  typedef _Tp&       reference;\n+  typedef const _Tp& const_reference;\n+\n+  pointer address(reference __x) const { return &__x; }\n+  const_pointer address(const_reference __x) const { return &__x; }\n+};\n+\n+allocator<bar *> b;\n+allocator<foo *> d;"}, {"sha": "662e44db47065714bcf411a6a5c09ea7722c9f93", "filename": "gcc/testsuite/obj-c++.dg/template-3.mm", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-3.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,80 @@\n+/* Test for passing arguments to ObjC methods in the context of template\n+   expansion.  */\n+/* Contributed by Ziemowit Laski  <zlaski@apple.com>.  */\n+\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@interface ObjCClass : Object\n+{\n+@public\n+  int info;\n+}\n+-(id) init;\n+-(id) initWithInformation: (int) whatInfo;\n+-(id) initWithInformation: (int) whatInfo andInfo: (int) info2;\n+@end\n+\n+void foo(int info) {\n+   ObjCClass *mObj1 = [[ObjCClass alloc] init];\n+   ObjCClass *mObj2 = [[ObjCClass alloc] initWithInformation: info];\n+   ObjCClass *mObj3 = [[ObjCClass alloc] initWithInformation: info andInfo: 39];\n+\n+   CHECK_IF(mObj1->info == 666);\n+   CHECK_IF(mObj2->info == info);\n+   CHECK_IF(mObj3->info == info + 39);\n+}\n+\n+template <class WrappedObjCClass>\n+class ObjCObjectWrapper\n+{\n+    public:\n+        ObjCObjectWrapper(int info);\n+        WrappedObjCClass *mObj1, *mObj2, *mObj3;\n+};\n+\n+template <class WrappedObjCClass>\n+ObjCObjectWrapper<WrappedObjCClass>::ObjCObjectWrapper(int info)\n+{\n+    mObj1 = [[WrappedObjCClass alloc] init];\n+    mObj2 = [[WrappedObjCClass alloc] initWithInformation: info];\n+    mObj3 = [[WrappedObjCClass alloc] initWithInformation: info andInfo: 67];\n+}\n+\n+@implementation ObjCClass\n+-(id) init {\n+  return [self initWithInformation:666];\n+}\n+-(id) initWithInformation: (int) whatInfo {\n+  [super init];\n+  info = whatInfo;\n+  return self;\n+}\n+-(id) initWithInformation: (int) whatInfo andInfo: (int) info2 {\n+  [super init];\n+  info = whatInfo + info2;\n+  return self;\n+}\n+@end\n+\n+ObjCObjectWrapper<ObjCClass> staticInstance(42); \n+\n+int main(void) {\n+  ObjCObjectWrapper<ObjCClass> stackInstance(47);\n+\n+  foo(89);\n+  \n+  CHECK_IF(staticInstance.mObj1->info == 666);\n+  CHECK_IF(staticInstance.mObj2->info == 42);\n+  CHECK_IF(staticInstance.mObj3->info == 42 + 67);\n+  \n+  CHECK_IF(stackInstance.mObj1->info == 666);\n+  CHECK_IF(stackInstance.mObj2->info == 47);\n+  CHECK_IF(stackInstance.mObj3->info == 47 + 67);\n+  \n+  return 0;\n+}"}, {"sha": "6500cfff17bd3c0b8a2555eb3135800201bcea73", "filename": "gcc/testsuite/obj-c++.dg/template-4.mm", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,81 @@\n+/* Author:  Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdarg.h>\n+#include <stdlib.h>\n+\n+#ifdef __NEXT_RUNTIME__\n+/* The following ain't pretty, but does allow us to have just one copy\n+   of next_mapping.h.  */\n+#include \"../objc/execute/next_mapping.h\"\n+#else\n+#include <objc/NXConstStr.h>\n+#endif\n+\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+template <class ARR, class TYPE> class TestT\n+{\n+public:\n+  TYPE k;\n+  int abc(ARR *array) {\n+    return [array count] * k;\n+  }\n+  TestT(TYPE _k): k(_k) { }\n+};\n+\n+template <class TYPE>\n+const char *getDesc(void) {\n+  return [TYPE name];\n+}\n+\n+@class Array;\n+\n+template <class TYPE>\n+int abc(TYPE *xyz, Array *array) {\n+  return [xyz count] + [array count];\n+}\n+\n+@interface Array: Object {\n+  id *arr;\n+  int count;\n+}\n++ (id)arrayWithObjects:(id)first, ... ;\n+- (int)count;\n+@end\n+\n+@implementation Array\n++ (id)arrayWithObjects:(id)first, ... {\n+  Array *a = [Array new];\n+  a->count = 0;\n+  a->arr = (id *) calloc(8, sizeof(id));\n+\n+  va_list args;\n+  va_start (args, first);\n+  \n+  a->arr[a->count++] = first;\n+\n+  for (id el; el = va_arg(args, id); a->count++)\n+    a->arr[a->count] = el;\n+\n+  return a;\n+}\n+- (int)count {\n+  return count;\n+}\n+@end\n+\n+int main(void) {\n+  CHECK_IF(!strcmp ([@\"Object\" cString], getDesc<Object>()));\n+  CHECK_IF(!strcmp ([@\"Array\" cString], getDesc<Array>()));\n+\n+  Array* a1 = [Array arrayWithObjects:@\"One\", @\"Two\", @\"Three\", nil];\n+  Array* a2 = [Array arrayWithObjects:@\"Four\", @\"Five\", nil];\n+\n+  TestT<Array, int> t(7);\n+  CHECK_IF(t.abc(a1) + t.abc(a2) == 35);\n+  CHECK_IF(abc(a1, a2) * t.k == 35);\n+  return 0;\n+}"}, {"sha": "79ed57d157ecc4d0b4d3833517e995f5c545729d", "filename": "gcc/testsuite/obj-c++.dg/template-5.mm", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-5.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,17 @@\n+// Test that extern template does not get emitted.\n+// Author: Matt Austern <austern@apple.com>\n+\n+// { dg-do compile }\n+// { dg-options \"\" }\n+// { dg-final { scan-assembler-not \".globl __ZN3FooIiE5identEi\" } }\n+\n+template <typename X>\n+struct Foo {\n+  X ident(X x) { return x; }\n+};\n+\n+extern template struct Foo<int>;\n+\n+int abcde(Foo<int>& foo, int n) {\n+  return foo.ident(n);\n+}"}, {"sha": "c9b82c0c7abbc845af19b4e686c73c69bd1b3d56", "filename": "gcc/testsuite/obj-c++.dg/template-6.mm", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-6.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,16 @@\n+// Test that extern template does not get emitted.\n+// Author: Matt Austern <austern@apple.com>\n+\n+// { dg-do compile }\n+// { dg-options \"\" }\n+// { dg-final { scan-assembler-not \".globl __ZN3FooIiE5identEi\" } }\n+\n+template <typename X>\n+  struct Foo { X ident(X x); };\n+\n+template <typename X> \n+  X Foo<X>::ident(X x) { return x; }\n+\n+extern template struct Foo<int>;\n+\n+int abcde(Foo<int>& foo, int n) { return foo.ident(n); }"}, {"sha": "db9b02f2acf1bb4a353b00bc2eb5048584751f1f", "filename": "gcc/testsuite/obj-c++.dg/try-catch-1.mm", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,42 @@\n+/* Test if the compiler accepts @throw / @try..@catch..@finally syntax.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+#include <stdio.h>\n+#include <setjmp.h>\n+\n+@interface Frob: Object\n+@end\n+\n+@implementation Frob: Object\n+@end\n+\n+static int exc_control = 0;\n+\n+int proc() {\n+  if(exc_control) {\n+    printf (\"Throwing (%d)... \", exc_control);\n+    @throw [Frob new];\n+  }\n+  return 1;\n+}\n+\n+int foo()\n+{\n+  @try {\n+    return proc();\n+  }\n+  @catch (Frob* ex) {\n+    if(exc_control > 1) {\n+      printf(\"Rethrowing (%d)... \", exc_control);\n+      @throw;\n+    }\n+    return 0;\n+  }\n+  @finally {\n+    printf(\"In @finally block (%d)... \", exc_control);\n+  }\n+}"}, {"sha": "77ef1535adca9fd0a66a6e8bc6ac7e9f31638222", "filename": "gcc/testsuite/obj-c++.dg/try-catch-2.mm", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-2.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,78 @@\n+/* Test out '@catch(id foo) {...}', which should catch\n+   all uncaught exceptions.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdio.h>\n+\n+/* The following is not required in actual user code; we include it\n+   here to check that the compiler generates an internal definition of\n+   _setjmp that is consistent with what <setjmp.h> provides.  */\n+#include <setjmp.h>\n+\n+extern \"C\" void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@interface Frob: Object\n+@end\n+\n+@implementation Frob: Object\n+@end\n+\n+static Frob* _connection = nil;\n+\n+//--------------------------------------------------------------------\n+\n+\n+void test (Object* sendPort)\n+{\n+  int cleanupPorts = 1;\n+  Frob* receivePort = nil;\n+\t\n+  @try {\n+    printf (\"receivePort = %p\\n\", receivePort);\n+    printf (\"sendPort = %p\\n\", sendPort);\n+    printf (\"cleanupPorts = %d\\n\", cleanupPorts);\n+    printf (\"---\\n\");\n+\t\t\n+    receivePort = (Frob *) -1;\n+    _connection = (Frob *) -1;\n+    printf (\"receivePort = %p\\n\", receivePort);\n+    printf (\"sendPort = %p\\n\", sendPort);\n+    printf (\"cleanupPorts = %d\\n\", cleanupPorts);\n+    printf (\"---\\n\");\n+\t\t\n+    receivePort = nil;\n+    sendPort = nil;\n+    cleanupPorts = 0;\n+\t\t\n+    printf (\"receivePort = %p\\n\", receivePort);\n+    printf (\"sendPort = %p\\n\", sendPort);\n+    printf (\"cleanupPorts = %d\\n\", cleanupPorts);\n+    printf (\"---\\n\");\t\t\n+\t\t\n+    @throw [Object new];\n+  }\n+  @catch(Frob *obj) {\n+    printf (\"Exception caught by incorrect handler!\\n\");\n+    CHECK_IF(0);\n+  }\n+  @catch(id exc) {\n+    printf (\"Exception caught by correct handler.\\n\");\n+    printf (\"receivePort = %p (expected 0x0)\\n\", receivePort);\n+    printf (\"sendPort = %p (expected 0x0)\\n\", sendPort);\n+    printf (\"cleanupPorts = %d (expected 0)\\n\", cleanupPorts);\n+    printf (\"---\");\n+    CHECK_IF(!receivePort);\n+    CHECK_IF(!sendPort);\n+    CHECK_IF(!cleanupPorts);\n+  }\n+}\n+\n+int main (void) {\n+  test((Object *)-1);\n+  return 0;\n+}"}, {"sha": "9341ce55bd2a7f623c68b97e71a113f1149e35c9", "filename": "gcc/testsuite/obj-c++.dg/try-catch-3.mm", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-3.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,18 @@\n+/* Test if caught exception objects are accessible inside the\n+   @catch block.  (Yes, I managed to break this.)  */\n+/* Author: Ziemowit Laski <zlaski@apple.com> */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+\n+#include <objc/Object.h>\n+\n+const char *foo(void)\n+{\n+  @try {\n+    return \"foo\";\n+  }\n+  @catch (Object* theException) {\n+    return [theException name];\n+  }\n+}"}, {"sha": "8dc0331209c5291a1e3bf71bceceb19640cd5af7", "filename": "gcc/testsuite/obj-c++.dg/try-catch-4.mm", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-4.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,25 @@\n+/* Check that the compiler does not incorrectly complain about\n+   exceptions being caught by previous @catch blocks.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com> */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -fobjc-exceptions\" } */\n+\n+@interface Exception\n+@end\n+\n+@interface FooException : Exception\n+@end\n+\n+extern void foo();\n+\n+void test()\n+{\n+  @try {\n+    foo();\n+  }\n+  @catch (FooException* fe) {\n+  }\n+  @catch (Exception* e) {\n+  }\n+}"}, {"sha": "f12d7e2cc1d48c5f03e81bee72a46d67748e6a10", "filename": "gcc/testsuite/obj-c++.dg/try-catch-5.mm", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-5.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,26 @@\n+/* Check that the compiler does correctly complain about\n+   exceptions being caught by previous @catch blocks.  */\n+/* Force the use of NeXT runtime to see that we don't ICE after\n+   generating the warning message.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -fnext-runtime -fobjc-exceptions\" } */\n+\n+@interface Exception\n+@end\n+\n+@interface FooException : Exception\n+@end\n+\n+extern void foo();\n+\n+void test()\n+{\n+  @try {\n+    foo();\n+  }\n+  @catch (Exception* e) {\t/* { dg-warning \"earlier handler\" } */\n+  }\n+  @catch (FooException* fe) {\t/* { dg-warning \"will be caught\" } */\n+  }\n+}"}, {"sha": "e0022b299030d04cfa91544005f219223a980942", "filename": "gcc/testsuite/obj-c++.dg/try-catch-6.mm", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-6.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,14 @@\n+/* A very simple @try-@catch example. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+\n+int foo(void) {\n+  @try {\n+    return 2;\n+  }\n+  @catch (id foo) {\n+    return 1;\n+  }\n+  return 0;\n+}"}, {"sha": "e322672aeeaaa5c7b186560383929aea6ce58cc2", "filename": "gcc/testsuite/obj-c++.dg/try-catch-7.mm", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-7.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+\n+#include <objc/Object.h>\n+\n+int main (int argc, const char * argv[]) {\n+  Object * pool = [Object new];\n+  int a;\n+\n+  if ( 1 ) {\n+    @try {\n+      a = 1;\n+    }\n+    @catch (Object *e) {\n+      a = 2;\n+    }\n+    @finally {\n+      a = 3;\n+    }\n+  }\n+    \n+  [pool free];\n+  return 0;\n+}"}, {"sha": "b1e1cd191c6aec47fb7652d21b336d6dff90d1ad", "filename": "gcc/testsuite/obj-c++.dg/try-catch-8.mm", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-8.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,27 @@\n+/* Test for graceful compilation of @synchronized statements.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+\n+#include <objc/Object.h>\n+\n+@interface Derived: Object\n+- (id) meth;\n+@end\n+\n+@implementation Derived\n+- (id) meth {\n+  return self;\n+}\n+\n+static Derived* rewriteDict(void) {\n+  static Derived *sDict = 0;\n+  if (sDict == 0) {\n+    @synchronized ([Derived class]) {\n+      if (sDict == 0)\n+\tsDict = [Derived new];\n+    }\n+  } \n+  return sDict;\n+}\n+@end"}, {"sha": "18721b4ee4382f41d6cad3831cadeeda700cb367", "filename": "gcc/testsuite/obj-c++.dg/try-catch-9.mm", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-9.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,65 @@\n+/* Check that local variables that get modified inside the @try\n+   block survive until the @catch block is reached.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-options \"-fobjc-exceptions -O2\" } */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+int gi1 = 9, gi2 = 19;\n+float gf1 = 9.0, gf2 = 19.0;\n+id obj2 = nil;\n+\n+void foo (int arg1, float *arg2)\n+{\n+  int *pi = &gi1;\n+  float *pf = &gf1;\n+  id obj1 = nil;\n+  int local1 = 45, local2 = 47;\n+  float local3 = 3.0, local4 = 4.0;\n+  register int local5 = 15;\n+  static float local6 = 16.0;\n+\n+  @try {\n+    local1 = 123;\n+    local2 = 345;\n+    local3 = 5.0;\n+    local4 = 6.0;\n+    local5 = 17;\n+    local6 = 18.0;\n+    pi = &gi2;\n+    pf = &gf2;\n+    obj2 = obj1 = [Object new];\n+    arg1 = 17;\n+    arg2 = &gf2;\n+    \n+    @throw [Object new];\n+  }\n+  @catch (Object *obj) {\n+   if (local1 != 123 || local2 != 345 || local3 != 5.0\n+       || local4 != 6.0 || local5 != 17 || local6 != 18.0) {\n+     printf(\"Abort 1\\n\");\n+     abort();\n+   }\n+   if (pi != &gi2 || pf != &gf2) {\n+     printf(\"Abort 2\\n\");\n+     abort();\n+   }\n+   if (!obj1 || obj1 != obj2) {\n+     printf(\"Abort 3\\n\");\n+     abort();\n+   }\n+   if (arg1 != 17 || arg2 != &gf2) {\n+     printf(\"Abort 4\\n\");\n+     abort();\n+   }\n+  }\n+}\n+\n+int main(void) {\n+  foo(15, &gf1);\n+  return 0;\n+}"}, {"sha": "6d24b7f8d5b54ddff2c22dee16ea2a6238d6b7cd", "filename": "gcc/testsuite/obj-c++.dg/va-meth-1.mm", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fva-meth-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fva-meth-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fva-meth-1.mm?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -0,0 +1,74 @@\n+/* Based on objc/execute/va_method.m, by Nicola Pero */\n+\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdarg.h>\n+#include <stdlib.h>\n+\n+/* Test methods with \"C-style\" trailing arguments, with or without ellipsis. */\n+\n+@interface MathClass: Object\n+/* sum positive numbers; -1 ends the list */\n++ (int) sum: (int) firstNumber, int secondNumber, ...;\n++ (int) prod: (int) firstNumber, int secondNumber, int thirdNumber;\n++ (int) minimum: (int) firstNumber, ...;\n+@end\n+\n+extern \"C\" int some_func(id self, SEL _cmd, int firstN, int secondN, int thirdN, ...) {\n+  return firstN + secondN + thirdN;\n+}\n+\n+@implementation MathClass\n++ (int) sum: (int) firstNumber, int secondNumber, ...\n+{\n+  va_list ap;\n+  int sum = 0, number = 0;\n+\n+  va_start (ap, secondNumber);\n+  number = firstNumber + secondNumber;\n+\n+  while (number >= 0)\n+    {\n+      sum += number;\n+      number = va_arg (ap, int);\n+    }\n+  \n+  va_end (ap);\n+\n+  return sum;\n+}\n++ (int) prod: (int) firstNumber, int secondNumber, int thirdNumber {\n+  return firstNumber * secondNumber * thirdNumber;\n+}\n++ (int) minimum: (int) firstNumber, ...\n+{\n+  va_list ap;\n+  int minimum = 999, number = 0;\n+  \n+  va_start (ap, firstNumber);\n+  number = firstNumber;\n+  \n+  while (number >= 0)\n+    {\n+      minimum = (minimum < number ? minimum: number);\n+      number = va_arg (ap, int);\n+    }\n+  \n+  va_end (ap);\n+  \n+  return minimum;\n+}\n+@end\n+\n+int main (void)\n+{\n+  if ([MathClass sum: 1, 2, 3, 4, 5, -1] != 15)\n+    abort ();\n+  if ([MathClass prod: 4, 5, 6] != 120)\n+    abort ();\n+  if ([MathClass minimum: 17, 9, 133, 84, 35, -1] != 9)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "41d40fdf0dcce35b12b886cbfcf8de0552f0ae55", "filename": "gcc/testsuite/objc/execute/next_mapping.h", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnext_mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb56e5cd481d9da6400cec836eb3c69b6908cf6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnext_mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnext_mapping.h?ref=7cb56e5cd481d9da6400cec836eb3c69b6908cf6", "patch": "@@ -8,6 +8,8 @@\n #include <objc/objc-class.h>\n #include <objc/Object.h>\n #include <ctype.h>\n+#include <stdlib.h>\n+#include <string.h>\n \n #define objc_get_class(C)\t\t\tobjc_getClass(C)\n #define objc_get_meta_class(C)\t\t\tobjc_getMetaClass(C)\n@@ -45,22 +47,28 @@\n /* The following is necessary to \"cover\" the bf*.m test cases on NeXT.  */\n \n #undef  MAX\n+#undef  MIN\n+#undef  ROUND\n+\n+#ifdef __cplusplus\n+#define MAX(X, Y) ((X > Y) ? X : Y)\n+#define MIN(X, Y) ((X < Y) ? X : Y)\n+#define ROUND(V, A) (A * ((V + A - 1) / A))\n+#else\n #define MAX(X, Y)                    \\\n   ({ typeof (X) __x = (X), __y = (Y); \\\n      (__x > __y ? __x : __y); })\n-\n-#undef  MIN\n #define MIN(X, Y)                    \\\n   ({ typeof (X) __x = (X), __y = (Y); \\\n      (__x < __y ? __x : __y); })\n-  \n-#undef  ROUND\n #define ROUND(V, A) \\\n   ({ typeof (V) __v = (V); typeof (A) __a = (A); \\\n      __a * ((__v+__a - 1)/__a); })\n+#endif\n \n #define BITS_PER_UNIT __CHAR_BIT__\n-#define STRUCTURE_SIZE_BOUNDARY (BITS_PER_UNIT * sizeof (struct{char a;}))\n+typedef struct{ char a; } __small_struct;\n+#define STRUCTURE_SIZE_BOUNDARY (BITS_PER_UNIT * sizeof (__small_struct))\n \n /* Not sure why the following are missing from NeXT objc headers... */\n \n@@ -104,7 +112,7 @@ struct objc_struct_layout\n   unsigned int record_align;\n };\n \n-typedef union {\n+typedef union arglist {\n   char *arg_ptr;\n   char arg_regs[sizeof (char*)];\n } *arglist_t;                   /* argument frame */\n@@ -117,6 +125,7 @@ void objc_layout_structure (const char *type,\n BOOL objc_layout_structure_next_member (struct objc_struct_layout *layout);\n void objc_layout_finish_structure (struct objc_struct_layout *layout,\n     unsigned int *size, unsigned int *align);\n+int objc_aligned_size (const char *type);\n \n /*\n   return the size of an object specified by type\n@@ -193,10 +202,6 @@ objc_sizeof_type (const char *type)\n     return sizeof (double);\n     break;\n \n-  case _C_VOID:\n-    return sizeof (void);\n-    break;\n-\n   case _C_PTR:\n   case _C_ATOM:\n   case _C_CHARPTR:"}]}