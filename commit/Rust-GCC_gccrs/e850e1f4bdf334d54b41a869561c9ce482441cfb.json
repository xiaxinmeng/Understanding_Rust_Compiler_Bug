{"sha": "e850e1f4bdf334d54b41a869561c9ce482441cfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg1MGUxZjRiZGYzMzRkNTRiNDFhODY5NTYxYzljZTQ4MjQ0MWNmYg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2004-11-25T13:11:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-11-25T13:11:09Z"}, "message": "tb-gcc.c: GCC infrastructure based implementation of __gnat_backtrace.\n\n\t* tb-gcc.c: GCC infrastructure based implementation of\n\t__gnat_backtrace.\n\nFrom-SVN: r91290", "tree": {"sha": "09743d1d41e070490560f2e39fd47d179c287f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09743d1d41e070490560f2e39fd47d179c287f61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e850e1f4bdf334d54b41a869561c9ce482441cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e850e1f4bdf334d54b41a869561c9ce482441cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e850e1f4bdf334d54b41a869561c9ce482441cfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e850e1f4bdf334d54b41a869561c9ce482441cfb/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62b6316473cb472092a35d7b43842ce276483c95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b6316473cb472092a35d7b43842ce276483c95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62b6316473cb472092a35d7b43842ce276483c95"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "b10aaf0f3e37ac5cf5982fef9b057fcad0f68b75", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e850e1f4bdf334d54b41a869561c9ce482441cfb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e850e1f4bdf334d54b41a869561c9ce482441cfb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e850e1f4bdf334d54b41a869561c9ce482441cfb", "patch": "@@ -1,3 +1,8 @@\n+2004-11-25  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* tb-gcc.c: GCC infrastructure based implementation of\n+\t__gnat_backtrace.\n+\n 2004-11-24  Steven Bosscher  <stevenb@suse.de>\n \n \t* misc.c (gnat_post_options): Don't clear"}, {"sha": "ca0da9ca80bf61afad048338079b3dc380a5e99b", "filename": "gcc/ada/tb-gcc.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e850e1f4bdf334d54b41a869561c9ce482441cfb/gcc%2Fada%2Ftb-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e850e1f4bdf334d54b41a869561c9ce482441cfb/gcc%2Fada%2Ftb-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftb-gcc.c?ref=e850e1f4bdf334d54b41a869561c9ce482441cfb", "patch": "@@ -0,0 +1,102 @@\n+/****************************************************************************\n+ *                                                                          *\n+ *                         GNAT COMPILER COMPONENTS                         *\n+ *                                                                          *\n+ *                   T R A C E B A C K - G C C t a b l e s                  *\n+ *                                                                          *\n+ *                          C Implementation File                           *\n+ *                                                                          *\n+ *              Copyright (C) 2004 Ada Core Technologies, Inc               *\n+ *                                                                          *\n+ * GNAT is free software;  you can  redistribute it  and/or modify it under *\n+ * terms of the  GNU General Public License as published  by the Free Soft- *\n+ * ware  Foundation;  either version 2,  or (at your option) any later ver- *\n+ * sion.  GNAT is distributed in the hope that it will be useful, but WITH- *\n+ * OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *\n+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License *\n+ * for  more details.  You should have  received  a copy of the GNU General *\n+ * Public License  distributed with GNAT;  see file COPYING.  If not, write *\n+ * to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, *\n+ * MA 02111-1307, USA.                                                      *\n+ *                                                                          *\n+ * As a  special  exception,  if you  link  this file  with other  files to *\n+ * produce an executable,  this file does not by itself cause the resulting *\n+ * executable to be covered by the GNU General Public License. This except- *\n+ * ion does not  however invalidate  any other reasons  why the  executable *\n+ * file might be covered by the  GNU Public License.                        *\n+ *                                                                          *\n+ * GNAT was originally developed  by the GNAT team at  New York University. *\n+ * Extensive contributions were provided by Ada Core Technologies Inc.      *\n+ *                                                                          *\n+ ****************************************************************************/\n+\n+/* This is an implementation of the __gnat_backtrace routine using the\n+   underlying GCC unwinding support associated with the exception handling\n+   infrastructure.  This will only work for ZCX based applications.  */\n+\n+#include <unwind.h>\n+\n+/* The implementation boils down to a call to _Unwind_Backtrace with a\n+   tailored callback and carried-on datastructure to keep track of the\n+   input parameters we got as well as of the basic processing state.  */\n+\n+typedef struct {\n+  void ** traceback;\n+  int max_len;\n+  void * exclude_min;\n+  void * exclude_max;\n+  int  n_frames_to_skip;\n+  int  n_frames_skipped;\n+  int  n_entries_filled;\n+} uw_data_t;\n+\n+/******************\n+ * trace_callback *\n+ ******************/\n+\n+static _Unwind_Reason_Code\n+trace_callback (struct _Unwind_Context * uw_context, uw_data_t * uw_data)\n+{\n+  void * pc = (void *) _Unwind_GetIP (uw_context);\n+\n+  if (uw_data->n_frames_skipped < uw_data->n_frames_to_skip)\n+    {\n+      uw_data->n_frames_skipped ++;\n+      return _URC_NO_REASON;\n+    }\n+\n+  if (uw_data->n_entries_filled >= uw_data->max_len)\n+    return _URC_NORMAL_STOP;\n+\n+  if (pc < uw_data->exclude_min || pc > uw_data->exclude_max)\n+    uw_data->traceback [uw_data->n_entries_filled ++] = pc + PC_ADJUST;\n+\n+  return _URC_NO_REASON;\n+}\n+\n+/********************\n+ * __gnat_backtrace *\n+ ********************/\n+\n+int\n+__gnat_backtrace (void ** traceback, int max_len,\n+\t\t  void * exclude_min, void * exclude_max,\n+\t\t  int  skip_frames)\n+{\n+  uw_data_t uw_data;\n+  /* State carried over during the whole unwinding process.  */\n+\n+  uw_data.traceback   = traceback;\n+  uw_data.max_len     = max_len;\n+  uw_data.exclude_min = exclude_min;\n+  uw_data.exclude_max = exclude_max;\n+\n+  uw_data.n_frames_to_skip = skip_frames;\n+\n+  uw_data.n_frames_skipped = 0;\n+  uw_data.n_entries_filled = 0;\n+\n+  _Unwind_Backtrace ((_Unwind_Trace_Fn)trace_callback, &uw_data);\n+\n+  return uw_data.n_entries_filled;\n+}"}]}