{"sha": "61c7941c2446ba676b3b0912712fe0983a9009a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFjNzk0MWMyNDQ2YmE2NzZiM2IwOTEyNzEyZmUwOTgzYTkwMDlhOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-07-28T09:16:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-07-28T09:16:52Z"}, "message": "i386.c (ix86_avoid_lea_for_addr): Handle zero-extended addresses.\n\n\t* config/i386/i386.c (ix86_avoid_lea_for_addr): Handle\n\tzero-extended addresses.  Return false if the address has less\n\tthan two components.\n\t(ix86_split_lea_for_addr): Unconditionally convert target and\n\tall address operands to requested mode.\n\t* config/i386/i386.md (*lea<mode>): Recover operands from curr_insn.\n\tPass SImode to ix86_split_lea_for_addr when splitting zero-extended\n\taddress.\n\t(zero-extended add splitter): New splitter to conditionally split\n\tnon-destructive adds.\n\t(*zero_extendsidi2_rex64): Conditionally emit leal instead of movl.\n\nFrom-SVN: r189925", "tree": {"sha": "e37d485458e063ee9e4ee6f55b8e3f52e8a8531f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e37d485458e063ee9e4ee6f55b8e3f52e8a8531f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61c7941c2446ba676b3b0912712fe0983a9009a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c7941c2446ba676b3b0912712fe0983a9009a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c7941c2446ba676b3b0912712fe0983a9009a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c7941c2446ba676b3b0912712fe0983a9009a8/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c50b82a885aa9c53fccdfec82bde9a110de6ee27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50b82a885aa9c53fccdfec82bde9a110de6ee27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c50b82a885aa9c53fccdfec82bde9a110de6ee27"}], "stats": {"total": 103, "additions": 82, "deletions": 21}, "files": [{"sha": "6193d9415cf56aef8d8d339ad3cd0906e365f953", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7941c2446ba676b3b0912712fe0983a9009a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7941c2446ba676b3b0912712fe0983a9009a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61c7941c2446ba676b3b0912712fe0983a9009a8", "patch": "@@ -1,3 +1,17 @@\n+2012-07-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_avoid_lea_for_addr): Handle\n+\tzero-extended addresses.  Return false if the address has less\n+\tthan two components.\n+\t(ix86_split_lea_for_addr): Unconditionally convert target and\n+\tall address operands to requested mode.\n+\t* config/i386/i386.md (*lea<mode>): Recover operands from curr_insn.\n+\tPass SImode to ix86_split_lea_for_addr when splitting zero-extended\n+\taddress.\n+\t(zero-extended add splitter): New splitter to conditionally split\n+\tnon-destructive adds.\n+\t(*zero_extendsidi2_rex64): Conditionally emit leal instead of movl.\n+\n 2012-07-28  Alan Modra  <amodra@gmail.com>\n \n \tPR target/54093"}, {"sha": "a733aa863b75c19a66c4e6e8bc6cb353b3ecfb60", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7941c2446ba676b3b0912712fe0983a9009a8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7941c2446ba676b3b0912712fe0983a9009a8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=61c7941c2446ba676b3b0912712fe0983a9009a8", "patch": "@@ -17036,11 +17036,6 @@ ix86_avoid_lea_for_addr (rtx insn, rtx operands[])\n   struct ix86_address parts;\n   int ok;\n \n-  /* FIXME: Handle zero-extended addresses.  */\n-  if (GET_CODE (operands[1]) == ZERO_EXTEND\n-      || GET_CODE (operands[1]) == AND)\n-    return false;\n-\n   /* Check we need to optimize.  */\n   if (!TARGET_OPT_AGU || optimize_function_for_size_p (cfun))\n     return false;\n@@ -17052,6 +17047,11 @@ ix86_avoid_lea_for_addr (rtx insn, rtx operands[])\n   ok = ix86_decompose_address (operands[1], &parts);\n   gcc_assert (ok);\n \n+  /* There should be at least two components in the address.  */\n+  if ((parts.base != NULL_RTX) + (parts.index != NULL_RTX)\n+      + (parts.disp != NULL_RTX) + (parts.scale > 1) < 2)\n+    return false;\n+\n   /* We should not split into add if non legitimate pic\n      operand is used as displacement. */\n   if (parts.disp && flag_pic && !LEGITIMATE_PIC_OPERAND_P (parts.disp))\n@@ -17124,7 +17124,7 @@ ix86_emit_binop (enum rtx_code code, enum machine_mode mode,\n    It is assumed that it is allowed to clobber flags register\n    at lea position.  */\n \n-extern void\n+void\n ix86_split_lea_for_addr (rtx operands[], enum machine_mode mode)\n {\n   unsigned int regno0, regno1, regno2;\n@@ -17135,26 +17135,27 @@ ix86_split_lea_for_addr (rtx operands[], enum machine_mode mode)\n   ok = ix86_decompose_address (operands[1], &parts);\n   gcc_assert (ok);\n \n-  target = operands[0];\n+  target = gen_lowpart (mode, operands[0]);\n \n   regno0 = true_regnum (target);\n   regno1 = INVALID_REGNUM;\n   regno2 = INVALID_REGNUM;\n \n   if (parts.base)\n     {\n-      if (GET_MODE (parts.base) != mode)\n-\tparts.base = gen_lowpart (mode, parts.base);\n+      parts.base = gen_lowpart (mode, parts.base);\n       regno1 = true_regnum (parts.base);\n     }\n \n   if (parts.index)\n     {\n-      if (GET_MODE (parts.index) != mode)\n-\tparts.index = gen_lowpart (mode, parts.index);\n+      parts.index = gen_lowpart (mode, parts.index);\n       regno2 = true_regnum (parts.index);\n     }\n \n+  if (parts.disp)\n+    parts.disp = gen_lowpart (mode, parts.disp);\n+\n   if (parts.scale > 1)\n     {\n       /* Case r1 = r1 + ...  */"}, {"sha": "f8a6c3ad73c240886ec4acff520252291fd36e1c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 56, "deletions": 10, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7941c2446ba676b3b0912712fe0983a9009a8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7941c2446ba676b3b0912712fe0983a9009a8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=61c7941c2446ba676b3b0912712fe0983a9009a8", "patch": "@@ -3474,13 +3474,28 @@\n \t (match_operand:SI 1 \"x86_64_zext_general_operand\"\n \t        \t\"rmWz,0,r   ,m  ,r   ,m\")))]\n   \"TARGET_64BIT\"\n-  \"@\n-   mov{l}\\t{%1, %k0|%k0, %1}\n-   #\n-   movd\\t{%1, %0|%0, %1}\n-   movd\\t{%1, %0|%0, %1}\n-   %vmovd\\t{%1, %0|%0, %1}\n-   %vmovd\\t{%1, %0|%0, %1}\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_IMOVX:\n+      if (ix86_use_lea_for_mov (insn, operands))\n+\treturn \"lea{l}\\t{%E1, %k0|%k0, %E1}\";\n+      else\n+\treturn \"mov{l}\\t{%1, %k0|%k0, %1}\";\n+\n+    case TYPE_MULTI:\n+      return \"#\";\n+\n+    case TYPE_MMXMOV:\n+      return \"movd\\t{%1, %0|%0, %1}\";\n+\n+    case TYPE_SSEMOV:\n+      return \"%vmovd\\t{%1, %0|%0, %1}\";\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n   [(set_attr \"type\" \"imovx,multi,mmxmov,mmxmov,ssemov,ssemov\")\n    (set_attr \"prefix\" \"orig,*,orig,orig,maybe_vex,maybe_vex\")\n    (set_attr \"prefix_0f\" \"0,*,*,*,*,*\")\n@@ -5479,7 +5494,23 @@\n   \"reload_completed && ix86_avoid_lea_for_addr (insn, operands)\"\n   [(const_int 0)]\n {\n-  ix86_split_lea_for_addr (operands, <MODE>mode);\n+  enum machine_mode mode = <MODE>mode;\n+  rtx pat;\n+\n+  /* ix86_avoid_lea_for_addr re-recognizes insn and may\n+     change operands[] array behind our back.  */\n+  pat = PATTERN (curr_insn);\n+\n+  operands[0] = SET_DEST (pat);\n+  operands[1] = SET_SRC (pat);\n+\n+  /* Emit all operations in SImode for zero-extended addresses.  Recall\n+     that x86_64 inheretly zero-extends SImode operations to DImode.  */\n+  if (GET_CODE (operands[1]) == ZERO_EXTEND\n+      || GET_CODE (operands[1]) == AND)\n+    mode = SImode;\n+\n+  ix86_split_lea_for_addr (operands, mode);\n   DONE;\n }\n   [(set_attr \"type\" \"lea\")\n@@ -5807,11 +5838,11 @@\n (define_split\n   [(set (match_operand:SWI48 0 \"register_operand\")\n \t(plus:SWI48 (match_operand:SWI48 1 \"register_operand\")\n-              (match_operand:SWI48 2 \"nonmemory_operand\")))\n+\t\t    (match_operand:SWI48 2 \"x86_64_nonmemory_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed && ix86_avoid_lea_for_add (insn, operands)\"\n   [(set (match_dup 0) (match_dup 1))\n-   (parallel [(set (match_dup 0) (plus:<MODE> (match_dup 0) (match_dup 2)))\n+   (parallel [(set (match_dup 0) (plus:SWI48 (match_dup 0) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])])\n \n ;; Convert add to the lea pattern to avoid flags dependency.\n@@ -5840,6 +5871,21 @@\n   DONE;\n })\n \n+;; Split non destructive adds if we cannot use lea.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+  \t(zero_extend:DI\n+\t  (plus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t   (match_operand:SI 2 \"x86_64_nonmemory_operand\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\n+   && reload_completed && ix86_avoid_lea_for_add (insn, operands)\"\n+  [(set (match_dup 3) (match_dup 1))\n+   (parallel [(set (match_dup 0)\n+   \t     \t   (zero_extend:DI (plus:SI (match_dup 3) (match_dup 2))))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[3] = gen_lowpart (SImode, operands[0]);\")\n+\n ;; Convert add to the lea pattern to avoid flags dependency.\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\")"}]}