{"sha": "7b310e901c5b7ad8ad54771b2d69459a496da472", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzMTBlOTAxYzViN2FkOGFkNTQ3NzFiMmQ2OTQ1OWE0OTZkYTQ3Mg==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2014-10-29T15:01:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-29T15:01:07Z"}, "message": "godump.c (go_format_type): Represent \"float _Complex\" and \"double _Complex\" as complex64 or complex128 in...\n\ngcc/:\n\t* godump.c (go_format_type): Represent \"float _Complex\" and\n\t\"double _Complex\" as complex64 or complex128 in Go, as appropriate.\ngcc/testsuite/:\n\t* gcc.misc-tests/godump-1.c: Add tests for complex types.\n\nFrom-SVN: r216840", "tree": {"sha": "67995d94efa6bac7fb071d031a6cc2992a02874e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67995d94efa6bac7fb071d031a6cc2992a02874e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b310e901c5b7ad8ad54771b2d69459a496da472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b310e901c5b7ad8ad54771b2d69459a496da472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b310e901c5b7ad8ad54771b2d69459a496da472", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b310e901c5b7ad8ad54771b2d69459a496da472/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660"}], "stats": {"total": 113, "additions": 93, "deletions": 20}, "files": [{"sha": "da384989dcbe7239b6d4610d4ed5fa23b5e2065f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b310e901c5b7ad8ad54771b2d69459a496da472/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b310e901c5b7ad8ad54771b2d69459a496da472/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b310e901c5b7ad8ad54771b2d69459a496da472", "patch": "@@ -1,3 +1,8 @@\n+2014-10-29  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* godump.c (go_format_type): Represent \"float _Complex\" and\n+\t\"double _Complex\" as complex64 or complex128 in Go, as appropriate.\n+\n 2014-10-29  Richard Biener  <rguenther@suse.de>\n \n \t* match.pd: Implement a first set of conversion patterns.\n@@ -164,26 +169,26 @@\n \n 2014-10-28  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n-        * godump.c (precision_to_units): New helper function.\n-        (go_append_artificial_name): Ditto.\n-        (go_append_decl_name): Ditto.\n-        (go_append_bitfield): Ditto.\n-        (go_get_uinttype_for_precision): Ditto.\n-        (go_append_padding): Ditto.\n-        (go_force_record_alignment): Ditto.\n-        (go_format_type): Represent unions with an array of uints of the size\n-        of the alignment in go.  This fixes the 'random' size of the union's\n-        representation using just the first field.\n-        (go_format_type): Add argument that indicates whether a record is\n-        nested (used for generation of artificial go names).\n-        (go_output_fndecl): Adapt to new go_format_type signature.\n-        (go_output_typedef): Ditto.\n-        (go_output_var): Ditto.\n-        (go_output_var): Prefer to output type as alias (typedef).\n-        (go_format_type): Bitfields in records are simulated as arrays of bytes\n-        in go.\n-\n-        * godump.c (go_format_type): Fix handling of arrays with zero elements.\n+\t* godump.c (precision_to_units): New helper function.\n+\t(go_append_artificial_name): Ditto.\n+\t(go_append_decl_name): Ditto.\n+\t(go_append_bitfield): Ditto.\n+\t(go_get_uinttype_for_precision): Ditto.\n+\t(go_append_padding): Ditto.\n+\t(go_force_record_alignment): Ditto.\n+\t(go_format_type): Represent unions with an array of uints of the size\n+\tof the alignment in go.\t This fixes the 'random' size of the union's\n+\trepresentation using just the first field.\n+\t(go_format_type): Add argument that indicates whether a record is\n+\tnested (used for generation of artificial go names).\n+\t(go_output_fndecl): Adapt to new go_format_type signature.\n+\t(go_output_typedef): Ditto.\n+\t(go_output_var): Ditto.\n+\t(go_output_var): Prefer to output type as alias (typedef).\n+\t(go_format_type): Bitfields in records are simulated as arrays of bytes\n+\tin go.\n+\n+\t* godump.c (go_format_type): Fix handling of arrays with zero elements.\n \n 2014-10-28  Andrew MacLeod  <amacleod@redhat.com>\n "}, {"sha": "fccd3eb512118206f439c460cd0b193d693d4dae", "filename": "gcc/godump.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b310e901c5b7ad8ad54771b2d69459a496da472/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b310e901c5b7ad8ad54771b2d69459a496da472/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=7b310e901c5b7ad8ad54771b2d69459a496da472", "patch": "@@ -780,6 +780,40 @@ go_format_type (struct godump_container *container, tree type,\n       }\n       break;\n \n+    case COMPLEX_TYPE:\n+      {\n+\tconst char *s;\n+\tchar buf[100];\n+\ttree real_type;\n+\n+\treal_type = TREE_TYPE (type);\n+\tif (TREE_CODE (real_type) == REAL_TYPE)\n+\t  {\n+\t    switch (TYPE_PRECISION (real_type))\n+\t      {\n+\t      case 32:\n+\t\ts = \"complex64\";\n+\t\tbreak;\n+\t      case 64:\n+\t\ts = \"complex128\";\n+\t\tbreak;\n+\t      default:\n+\t\tsnprintf (buf, sizeof buf, \"INVALID-complex-%u\",\n+\t\t\t  2 * TYPE_PRECISION (real_type));\n+\t\ts = buf;\n+\t\tret = false;\n+\t\tbreak;\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    s = \"INVALID-complex-non-real\";\n+\t    ret = false;\n+\t  }\n+\tobstack_grow (ob, s, strlen (s));\n+      }\n+      break;\n+\n     case BOOLEAN_TYPE:\n       obstack_grow (ob, \"bool\", 4);\n       break;"}, {"sha": "45114fa0a6a99d851e97723e98b0e835f59f05d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b310e901c5b7ad8ad54771b2d69459a496da472/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b310e901c5b7ad8ad54771b2d69459a496da472/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b310e901c5b7ad8ad54771b2d69459a496da472", "patch": "@@ -1,3 +1,7 @@\n+2014-10-29  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* gcc.misc-tests/godump-1.c: Add tests for complex types.\n+\n 2014-10-29  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* gcc.dg/optimize-bswapsi-1.c (swap32_e): New bswap test."}, {"sha": "f3af17cf8b40b489edd87ab57baa8b4dd415b942", "filename": "gcc/testsuite/gcc.misc-tests/godump-1.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b310e901c5b7ad8ad54771b2d69459a496da472/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgodump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b310e901c5b7ad8ad54771b2d69459a496da472/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgodump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgodump-1.c?ref=7b310e901c5b7ad8ad54771b2d69459a496da472", "patch": "@@ -104,6 +104,21 @@ d_t d_v2;\n typedef long double ld_t;\n long double ld_v1;\n ld_t ld_v2;\n+typedef _Complex cx_t;\n+_Complex cx_v1;\n+cx_t cx_v2;\n+typedef float _Complex fcx_t;\n+float _Complex fcx_v1;\n+fcx_t fcx_v2;\n+typedef double _Complex dcx_t;\n+double _Complex dcx_v1;\n+dcx_t dcx_v2;\n+typedef long double _Complex ldcx_t;\n+long double _Complex ldcx_v1;\n+ldcx_t ldcx_v2;\n+typedef int _Complex icx_t;\n+int _Complex icx_v1;\n+icx_t icx_v2;\n \n /* nested typedefs */\n typedef int ni_t;\n@@ -301,6 +316,11 @@ typedef int8_t (*func_t)(void *p);\n /* { dg-final { scan-file godump-1.out \"(?n)^type _f_t float\\[0-9\\]*$\" } } */\n /* { dg-final { scan-file godump-1.out \"(?n)^type _d_t float\\[0-9\\]*$\" } } */\n /* { dg-final { scan-file godump-1.out \"(?n)^// type _ld_t INVALID-float-\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _cx_t complex\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _fcx_t complex\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _dcx_t complex\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^// type _ldcx_t INVALID-complex-\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^// type _icx_t INVALID-complex-non-real$\" } } */\n /* { dg-final { scan-file godump-1.out \"(?n)^type _ni_t int\\[0-9\\]*$\" } } */\n /* { dg-final { scan-file godump-1.out \"(?n)^type _ni2_t int\\[0-9\\]*$\" } } */\n /* { dg-final { scan-file godump-1.out \"(?n)^type _ni3_t int\\[0-9\\]*$\" } } */\n@@ -414,6 +434,16 @@ typedef int8_t (*func_t)(void *p);\n /* { dg-final { scan-file godump-1.out \"(?n)^var _d_v2 _d_t$\" } } */\n /* { dg-final { scan-file godump-1.out \"(?n)^// var _ld_v1 INVALID-float-\\[0-9\\]*$\" } } */\n /* { dg-final { scan-file godump-1.out \"(?n)^// var _ld_v2 INVALID-float-\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _cx_v1 complex\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _cx_v2 _cx_t$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _fcx_v1 complex\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _fcx_v2 _fcx_t$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _dcx_v1 complex\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _dcx_v2 _dcx_t$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^// var _ldcx_v1 INVALID-complex-\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^// var _ldcx_v2 INVALID-complex-\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^// var _icx_v1 INVALID-complex-non-real$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^// var _icx_v2 INVALID-complex-non-real$\" } } */\n /* { dg-final { scan-file godump-1.out \"(?n)^var _ni2_v2 _ni2_t$\" } } */\n /* { dg-final { scan-file godump-1.out \"(?n)^var _ni3_v2 _ni3_t$\" } } */\n /* { dg-final { scan-file godump-1.out \"(?n)^var _e1_v1 int$\" } } */"}]}