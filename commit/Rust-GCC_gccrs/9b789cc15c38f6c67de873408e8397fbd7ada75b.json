{"sha": "9b789cc15c38f6c67de873408e8397fbd7ada75b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI3ODljYzE1YzM4ZjZjNjdkZTg3MzQwOGU4Mzk3ZmJkN2FkYTc1Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-05-22T14:39:22Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-05-22T14:39:22Z"}, "message": "config.host (i[34567]-*-*, x86_64-*-*): Add t-crtfm instead of i386/t-crtfm to tmake_file.\n\n\t* config.host (i[34567]-*-*, x86_64-*-*): Add t-crtfm instead of\n\ti386/t-crtfm to tmake_file.\n\t* config/i386/crtfastmath.c (set_fast_math_sse): New function.\n\t(set_fast_math): Use set_fast_math_sse for SSE targets.\n\t* config/i386/t-crtfm: Remove.\n\nFrom-SVN: r223578", "tree": {"sha": "45d5d3882feb0b4975fb480549b6ab1ac81d7fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45d5d3882feb0b4975fb480549b6ab1ac81d7fe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b789cc15c38f6c67de873408e8397fbd7ada75b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b789cc15c38f6c67de873408e8397fbd7ada75b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b789cc15c38f6c67de873408e8397fbd7ada75b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b789cc15c38f6c67de873408e8397fbd7ada75b/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6ec6215e38ce9e73bc589826caafe480736b944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ec6215e38ce9e73bc589826caafe480736b944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6ec6215e38ce9e73bc589826caafe480736b944"}], "stats": {"total": 123, "additions": 65, "deletions": 58}, "files": [{"sha": "1bcd266d79a4c3770661ef6a14cea8b346331717", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b789cc15c38f6c67de873408e8397fbd7ada75b/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b789cc15c38f6c67de873408e8397fbd7ada75b/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9b789cc15c38f6c67de873408e8397fbd7ada75b", "patch": "@@ -1,3 +1,11 @@\n+2015-05-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config.host (i[34567]-*-*, x86_64-*-*): Add t-crtfm instead of\n+\ti386/t-crtfm to tmake_file.\n+\t* config/i386/crtfastmath.c (set_fast_math_sse): New function.\n+\t(set_fast_math): Use set_fast_math_sse for SSE targets.\n+\t* config/i386/t-crtfm: Remove.\n+\n 2015-05-21  Alan Modra  <amodra@gmail.com>\n \n \tPR libgcc/66225"}, {"sha": "05fd808e96859604c794dd6de2b6bd4f4fcd5216", "filename": "libgcc/config.host", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b789cc15c38f6c67de873408e8397fbd7ada75b/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b789cc15c38f6c67de873408e8397fbd7ada75b/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=9b789cc15c38f6c67de873408e8397fbd7ada75b", "patch": "@@ -553,12 +553,12 @@ hppa*-*-openbsd*)\n \ttmake_file=\"$tmake_file pa/t-openbsd\"\n \t;;\n i[34567]86-*-darwin*)\n-\ttmake_file=\"$tmake_file i386/t-crtpc i386/t-crtfm\"\n+\ttmake_file=\"$tmake_file i386/t-crtpc t-crtfm\"\n \ttm_file=\"$tm_file i386/darwin-lib.h\"\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n \t;;\n x86_64-*-darwin*)\n-\ttmake_file=\"$tmake_file i386/t-crtpc i386/t-crtfm\"\n+\ttmake_file=\"$tmake_file i386/t-crtpc t-crtfm\"\n \ttm_file=\"$tm_file i386/darwin-lib.h\"\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n \t;;\n@@ -595,24 +595,24 @@ x86_64-*-openbsd*)\n \t;;\n i[34567]86-*-linux*)\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n-\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm i386/t-crtstuff t-dfprules\"\n+\ttmake_file=\"${tmake_file} i386/t-crtpc t-crtfm i386/t-crtstuff t-dfprules\"\n \ttm_file=\"${tm_file} i386/elf-lib.h\"\n \tmd_unwind_header=i386/linux-unwind.h\n \t;;\n i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i[34567]86-*-gnu* | i[34567]86-*-kopensolaris*-gnu)\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n-\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm i386/t-crtstuff t-dfprules\"\n+\ttmake_file=\"${tmake_file} i386/t-crtpc t-crtfm i386/t-crtstuff t-dfprules\"\n \ttm_file=\"${tm_file} i386/elf-lib.h\"\n \t;;\n x86_64-*-linux*)\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n-\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm i386/t-crtstuff t-dfprules\"\n+\ttmake_file=\"${tmake_file} i386/t-crtpc t-crtfm i386/t-crtstuff t-dfprules\"\n \ttm_file=\"${tm_file} i386/elf-lib.h\"\n \tmd_unwind_header=i386/linux-unwind.h\n \t;;\n x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n-\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm i386/t-crtstuff t-dfprules\"\n+\ttmake_file=\"${tmake_file} i386/t-crtpc t-crtfm i386/t-crtstuff t-dfprules\"\n \ttm_file=\"${tm_file} i386/elf-lib.h\"\n \t;;\n i[34567]86-pc-msdosdjgpp*)\n@@ -628,7 +628,7 @@ i[34567]86-*-rtems*)\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n-\ttmake_file=\"$tmake_file i386/t-crtpc i386/t-crtfm\"\n+\ttmake_file=\"$tmake_file i386/t-crtpc t-crtfm\"\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n \ttm_file=\"${tm_file} i386/elf-lib.h\"\n \tmd_unwind_header=i386/sol2-unwind.h\n@@ -652,7 +652,7 @@ i[34567]86-*-cygwin*)\n \telse\n \t\ttmake_dlldir_file=\"i386/t-dlldir-x\"\n \tfi\n-\ttmake_file=\"${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-slibgcc-cygming i386/t-cygming i386/t-cygwin i386/t-crtfm i386/t-chkstk t-dfprules\"\n+\ttmake_file=\"${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-slibgcc-cygming i386/t-cygming i386/t-cygwin t-crtfm i386/t-chkstk t-dfprules\"\n \t;;\n x86_64-*-cygwin*)\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtfastmath.o\"\n@@ -672,7 +672,7 @@ x86_64-*-cygwin*)\n \t\ttmake_dlldir_file=\"i386/t-dlldir-x\"\n \tfi\n \t# FIXME - dj - t-chkstk used to be in here, need a 64-bit version of that\n-\ttmake_file=\"${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-slibgcc-cygming i386/t-cygming i386/t-cygwin i386/t-crtfm t-dfprules i386/t-chkstk\"\n+\ttmake_file=\"${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-slibgcc-cygming i386/t-cygming i386/t-cygwin t-crtfm t-dfprules i386/t-chkstk\"\n \t;;\n i[34567]86-*-mingw*)\n \textra_parts=\"crtbegin.o crtend.o crtfastmath.o\"\n@@ -700,7 +700,7 @@ i[34567]86-*-mingw*)\n \telse\n \t\ttmake_dlldir_file=\"i386/t-dlldir-x\"\n \tfi\n-\ttmake_file=\"${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-slibgcc-cygming i386/t-cygming i386/t-mingw32 i386/t-crtfm i386/t-chkstk t-dfprules\"\n+\ttmake_file=\"${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-slibgcc-cygming i386/t-cygming i386/t-mingw32 t-crtfm i386/t-chkstk t-dfprules\"\n \t;;\n x86_64-*-mingw*)\n \tcase ${target_thread_file} in\n@@ -723,7 +723,7 @@ x86_64-*-mingw*)\n \telse\n \t\ttmake_dlldir_file=\"i386/t-dlldir-x\"\n \tfi\n-\ttmake_file=\"${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-slibgcc-cygming i386/t-cygming i386/t-mingw32 t-dfprules i386/t-crtfm i386/t-chkstk\"\n+\ttmake_file=\"${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-slibgcc-cygming i386/t-cygming i386/t-mingw32 t-dfprules t-crtfm i386/t-chkstk\"\n \textra_parts=\"$extra_parts crtbegin.o crtend.o crtfastmath.o\"\n \tif test x$enable_vtable_verify = xyes; then\n \t\textra_parts=\"$extra_parts vtv_start.o vtv_end.o vtv_start_preinit.o vtv_end_preinit.o\""}, {"sha": "a6cae01d3f01afd522d4db506efc99a2ff3baab1", "filename": "libgcc/config/i386/crtfastmath.c", "status": "modified", "additions": 46, "deletions": 43, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b789cc15c38f6c67de873408e8397fbd7ada75b/libgcc%2Fconfig%2Fi386%2Fcrtfastmath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b789cc15c38f6c67de873408e8397fbd7ada75b/libgcc%2Fconfig%2Fi386%2Fcrtfastmath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcrtfastmath.c?ref=9b789cc15c38f6c67de873408e8397fbd7ada75b", "patch": "@@ -29,15 +29,57 @@\n /* All 64-bit targets have SSE and DAZ;\n    only check them explicitly for 32-bit ones. */\n #include \"cpuid.h\"\n-#endif\n \n-static void __attribute__((constructor))\n-#ifndef __x86_64__\n+__attribute__ ((target(\"fxsr,sse\")))\n+static void\n /* The i386 ABI only requires 4-byte stack alignment, so this is necessary\n    to make sure the fxsave struct gets correct alignment.\n    See PR27537 and PR28621.  */\n __attribute__ ((force_align_arg_pointer))\n+set_fast_math_sse (unsigned int edx)\n+{\n+  unsigned int mxcsr;\n+  \n+  if (edx & bit_FXSAVE)\n+    {\n+      /* Check if DAZ is available.  */\n+      struct\n+      {\n+\tunsigned short cwd;\n+\tunsigned short swd;\n+\tunsigned short twd;\n+\tunsigned short fop;\n+\tunsigned int fip;\n+\tunsigned int fcs;\n+\tunsigned int foo;\n+\tunsigned int fos;\n+\tunsigned int mxcsr;\n+\tunsigned int mxcsr_mask;\n+\tunsigned int st_space[32];\n+\tunsigned int xmm_space[32];\n+\tunsigned int padding[56];\n+      } __attribute__ ((aligned (16))) fxsave;\n+\n+      /* This is necessary since some implementations of FXSAVE\n+\t do not modify reserved areas within the image.  */\n+      fxsave.mxcsr_mask = 0;\n+\n+      __builtin_ia32_fxsave (&fxsave);\n+\n+      mxcsr = fxsave.mxcsr;\n+\n+      if (fxsave.mxcsr_mask & MXCSR_DAZ)\n+\tmxcsr |= MXCSR_DAZ;\n+    }\n+  else\n+    mxcsr = __builtin_ia32_stmxcsr ();\n+\n+  mxcsr |= MXCSR_FTZ;\n+  __builtin_ia32_ldmxcsr (mxcsr);\n+}\n #endif\n+\n+static void __attribute__((constructor))\n set_fast_math (void)\n {\n #ifndef __x86_64__\n@@ -47,46 +89,7 @@ set_fast_math (void)\n     return;\n \n   if (edx & bit_SSE)\n-    {\n-      unsigned int mxcsr;\n-  \n-      if (edx & bit_FXSAVE)\n-\t{\n-\t  /* Check if DAZ is available.  */\n-\t  struct\n-\t    {\n-\t      unsigned short cwd;\n-\t      unsigned short swd;\n-\t      unsigned short twd;\n-\t      unsigned short fop;\n-\t      unsigned int fip;\n-\t      unsigned int fcs;\n-\t      unsigned int foo;\n-\t      unsigned int fos;\n-\t      unsigned int mxcsr;\n-\t      unsigned int mxcsr_mask;\n-\t      unsigned int st_space[32];\n-\t      unsigned int xmm_space[32];\n-\t      unsigned int padding[56];\n-\t    } __attribute__ ((aligned (16))) fxsave;\n-\n-\t  /* This is necessary since some implementations of FXSAVE\n-\t     do not modify reserved areas within the image.  */\n-\t  fxsave.mxcsr_mask = 0;\n-\n-\t  __builtin_ia32_fxsave (&fxsave);\n-\n-\t  mxcsr = fxsave.mxcsr;\n-\n-\t  if (fxsave.mxcsr_mask & MXCSR_DAZ)\n-\t    mxcsr |= MXCSR_DAZ;\n-\t}\n-      else\n-\tmxcsr = __builtin_ia32_stmxcsr ();\n-\n-      mxcsr |= MXCSR_FTZ;\n-      __builtin_ia32_ldmxcsr (mxcsr);\n-    }\n+    set_fast_math_sse (edx);\n #else\n   unsigned int mxcsr = __builtin_ia32_stmxcsr ();\n   mxcsr |= MXCSR_DAZ | MXCSR_FTZ;"}, {"sha": "b9da06bfd20984364fc4cbbd95bd2d9c2314a7b4", "filename": "libgcc/config/i386/t-crtfm", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ec6215e38ce9e73bc589826caafe480736b944/libgcc%2Fconfig%2Fi386%2Ft-crtfm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ec6215e38ce9e73bc589826caafe480736b944/libgcc%2Fconfig%2Fi386%2Ft-crtfm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ft-crtfm?ref=b6ec6215e38ce9e73bc589826caafe480736b944", "patch": "@@ -1,4 +0,0 @@\n-# This is an endfile, Use -minline-all-stringops to ensure\n-# that __builtin_memset doesn't refer to the lib function memset().\n-crtfastmath.o: $(srcdir)/config/i386/crtfastmath.c\n-\t$(gcc_compile) -mfxsr -msse -c $<"}]}