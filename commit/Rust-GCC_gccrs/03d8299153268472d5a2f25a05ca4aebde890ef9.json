{"sha": "03d8299153268472d5a2f25a05ca4aebde890ef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNkODI5OTE1MzI2ODQ3MmQ1YTJmMjVhMDVjYTRhZWJkZTg5MGVmOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-07-17T02:48:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-17T02:48:08Z"}, "message": "parse.y (primary): Use notype_unqualified_id instead of IDENTIFIER in Koenig lookup support rules.\n\n\t* parse.y (primary): Use notype_unqualified_id instead of IDENTIFIER\n\tin Koenig lookup support rules.\n\t* semantics.c (finish_call_expr): Handle the new cases.\n\t* typeck.c (build_x_function_call): Handle overloaded methods.\n\t* decl.c (grokvardecl): Don't call build_static_name for extern \"C\".\n\nFrom-SVN: r21245", "tree": {"sha": "8032dd7a19456b05e9df0768a5282549130a7e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8032dd7a19456b05e9df0768a5282549130a7e0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03d8299153268472d5a2f25a05ca4aebde890ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d8299153268472d5a2f25a05ca4aebde890ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03d8299153268472d5a2f25a05ca4aebde890ef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d8299153268472d5a2f25a05ca4aebde890ef9/comments", "author": null, "committer": null, "parents": [{"sha": "32dd8ef8f3977be703b970066bcabe934baec32d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32dd8ef8f3977be703b970066bcabe934baec32d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32dd8ef8f3977be703b970066bcabe934baec32d"}], "stats": {"total": 4386, "additions": 2207, "deletions": 2179}, "files": [{"sha": "e5cfc5edf3c898534896b092d580372e93cf4838", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03d8299153268472d5a2f25a05ca4aebde890ef9", "patch": "@@ -1,3 +1,13 @@\n+1998-07-17  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y (primary): Use notype_unqualified_id instead of IDENTIFIER\n+\tin Koenig lookup support rules.\n+\t* semantics.c (finish_call_expr): Handle the new cases.\n+\n+\t* typeck.c (build_x_function_call): Handle overloaded methods.\n+\n+\t* decl.c (grokvardecl): Don't call build_static_name for extern \"C\".\n+\n 1998-07-16  Mark Mitchell  <mark@markmitchell.com>\n \n \t* semantics.c (finish_object_call_expr): Revert previous change."}, {"sha": "2b437eb46dd838989dd4a0910cd25bd25cc74567", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=03d8299153268472d5a2f25a05ca4aebde890ef9", "patch": "@@ -215,7 +215,7 @@ parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h \\\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n \n-CONFLICTS = expect 22 shift/reduce conflicts and 42 reduce/reduce conflicts.\n+CONFLICTS = expect 28 shift/reduce conflicts and 42 reduce/reduce conflicts.\n $(PARSE_H) : $(PARSE_C)\n $(PARSE_C) : $(srcdir)/parse.y\n \t@echo $(CONFLICTS)"}, {"sha": "38c967a962291a34dcafa0aa486da977122c97b3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=03d8299153268472d5a2f25a05ca4aebde890ef9", "patch": "@@ -8037,7 +8037,8 @@ grokvardecl (type, declarator, specbits_in, initialized, constp, in_namespace)\n     {\n       tree context = in_namespace ? in_namespace : current_namespace;\n       decl = build_decl (VAR_DECL, declarator, complete_type (type));\n-      if (context != global_namespace && namespace_bindings_p ())\n+      if (context != global_namespace && namespace_bindings_p ()\n+\t  && current_lang_name != lang_name_c)\n \tDECL_ASSEMBLER_NAME (decl) =  build_static_name (context,\n \t\t\t\t\t\t\t declarator);\n     }"}, {"sha": "8862344c435c9c5b587f4fbb93a99ba974523092", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 2184, "deletions": 2174, "changes": 4358, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=03d8299153268472d5a2f25a05ca4aebde890ef9"}, {"sha": "6e14540d01e8f1a3f74d544ce9e7d29b3c666b94", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=03d8299153268472d5a2f25a05ca4aebde890ef9", "patch": "@@ -1363,9 +1363,9 @@ primary:\n         /* Koenig lookup support\n            We could store lastiddecl in $1 to avoid another lookup,\n            but that would result in many additional reduce/reduce conflicts. */\n-        | IDENTIFIER '(' nonnull_exprlist ')'\n+        | notype_unqualified_id '(' nonnull_exprlist ')'\n                { $$ = finish_call_expr ($1, $3, 1); }\n-        | IDENTIFIER LEFT_RIGHT\n+        | notype_unqualified_id LEFT_RIGHT\n                { $$ = finish_call_expr ($1, NULL_TREE, 1); }\n \t| primary '(' nonnull_exprlist ')'\n                { $$ = finish_call_expr ($1, $3, 0); }"}, {"sha": "206840e2cf115ad3fdee3b155a95553b1b549562", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=03d8299153268472d5a2f25a05ca4aebde890ef9", "patch": "@@ -844,7 +844,12 @@ finish_call_expr (fn, args, koenig)\n   tree result;\n \n   if (koenig)\n-    fn = do_identifier (fn, 0, args);\n+    {\n+      if (TREE_CODE (fn) == BIT_NOT_EXPR)\n+\tfn = build_x_unary_op (BIT_NOT_EXPR, TREE_OPERAND (fn, 0));\n+      else if (TREE_CODE (fn) != TEMPLATE_ID_EXPR)\n+\tfn = do_identifier (fn, 0, args);\n+    }\n   result = build_x_function_call (fn, args, current_class_ref);\n \n   if (TREE_CODE (result) == CALL_EXPR"}, {"sha": "a1c1394d17b3c62a5fa9461eeefa4e139cca7f4f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d8299153268472d5a2f25a05ca4aebde890ef9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=03d8299153268472d5a2f25a05ca4aebde890ef9", "patch": "@@ -2436,6 +2436,8 @@ build_x_function_call (function, params, decl)\n       my_friendly_assert (TREE_CODE (function) == TREE_LIST, 999);\n       my_friendly_assert (TREE_CHAIN (function) == NULL_TREE, 999);\n       function = TREE_VALUE (function);\n+      if (TREE_CODE (function) == OVERLOAD)\n+\tfunction = OVL_FUNCTION (function);\n       my_friendly_assert (TREE_CODE (function) == FUNCTION_DECL, 999);\n       function = DECL_NAME (function);\n       return build_method_call (decl, function, params,"}]}