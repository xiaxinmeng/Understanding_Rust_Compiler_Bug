{"sha": "70128ad9f6972054d3be944931f848f5fe2af4f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAxMjhhZDlmNjk3MjA1NGQzYmU5NDQ5MzFmODQ4ZjVmZTJhZjRmNA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2004-07-07T19:25:01Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2004-07-07T19:25:01Z"}, "message": "builtins.c: Rename movstr*, except for movstrict*, to movmem* and clrstr* to clrmem*.\n\ngcc/ChangeLog:\n* builtins.c: Rename movstr*, except for movstrict*, to\nmovmem* and clrstr* to clrmem*.\n* expr.c: Likewise.\n* expr.h: Likewise.\n* genopinit.c: Likewise.\n* integrate.c: Likewise.\n* local-alloc.c: Likewise.\n* optabs.c: Likewise.\n* optabs.h: Likewise.\n* config/alpha/alpha.h: Likewise.\n* config/alpha/alpha.md: Likewise.\n* config/arm/arm-protos.h: Likewise.\n* config/arm/arm.c: Likewise.\n* config/arm/arm.md: Likewise.\n* config/avr/avr.md: Likewise.\n* config/c4x/c4x.c: Likewise.\n* config/c4x/c4x.md: Likewise.\n* config/frv/frv.md: Likewise.\n* config/i386/i386-protos.h: Likewise.\n* config/i386/i386.c: Likewise.\n* config/i386/i386.h: Likewise.\n* config/i386/i386.md: Likewise.\n* config/i860/i860.c: Likewise.\n* config/i860/i860.md: Likewise.\n* config/ip2k/ip2k.md: Likewise.\n* config/ip2k/libgcc.S: Likewise.\n* config/ip2k/t-ip2k: Likewise.\n* config/m32r/m32r.c: Likewise.\n* config/m32r/m32r.md: Likewise.\n* config/mcore/mcore.md: Likewise.\n* config/mips/mips.c: Likewise.\n* config/mips/mips.md: Likewise.\n* config/ns32k/ns32k.c: Likewise.\n* config/ns32k/ns32k.h: Likewise.\n* config/ns32k/ns32k.md: Likewise.\n* config/pa/pa.c: Likewise.\n* config/pa/pa.md: Likewise.\n* config/pdp11/pdp11.h: Likewise.\n* config/pdp11/pdp11.md: Likewise.\n* config/rs6000/rs6000.c: Likewise.\n* config/rs6000/rs6000.md: Likewise.\n* config/s390/s390-protos.h: Likewise.\n* config/s390/s390.c: Likewise.\n* config/s390/s390.md: Likewise.\n* config/sh/lib1funcs.asm: Likewise.\n* config/sh/sh.c: Likewise.\n* config/sh/sh.md: Likewise.\n* config/sh/t-sh: Likewise.\n* config/sparc/sparc.h: Likewise.\n* config/vax/vax.md: Likewise.\n* config/xtensa/xtensa.c: Likewise.\n* config/xtensa/xtensa.md: Likewise.\n* doc/invoke.texi: Likewise.\n* doc/md.texi: Likewise.\n* doc/rtl.texi: Likewise.\ngcc/testsuite/ChangeLog:\n* gcc.c-torture/execute/builtins/mempcpy-2.c: Rename movstr*,\nexcept for movstrict*, to movmem* and clrstr* to clrmem*.\n\nFrom-SVN: r84222", "tree": {"sha": "d0f61da0ffd58f937468be226fd43e92e159de79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0f61da0ffd58f937468be226fd43e92e159de79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70128ad9f6972054d3be944931f848f5fe2af4f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70128ad9f6972054d3be944931f848f5fe2af4f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70128ad9f6972054d3be944931f848f5fe2af4f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70128ad9f6972054d3be944931f848f5fe2af4f4/comments", "author": null, "committer": null, "parents": [{"sha": "48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b2e0a72e5e297ad921662683c1f5d61d0e95b1"}], "stats": {"total": 667, "additions": 365, "deletions": 302}, "files": [{"sha": "8fef3f22c71a9adaeb7c5fdcaa8946c082274ddc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1,3 +1,61 @@\n+2004-07-07  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* builtins.c: Rename movstr*, except for movstrict*, to\n+\tmovmem* and clrstr* to clrmem*.\n+\t* expr.c: Likewise.\n+\t* expr.h: Likewise.\n+\t* genopinit.c: Likewise.\n+\t* integrate.c: Likewise.\n+\t* local-alloc.c: Likewise.\n+\t* optabs.c: Likewise.\n+\t* optabs.h: Likewise.\n+\t* config/alpha/alpha.h: Likewise.\n+\t* config/alpha/alpha.md: Likewise.\n+\t* config/arm/arm-protos.h: Likewise.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/arm/arm.md: Likewise.\n+\t* config/avr/avr.md: Likewise.\n+\t* config/c4x/c4x.c: Likewise.\n+\t* config/c4x/c4x.md: Likewise.\n+\t* config/frv/frv.md: Likewise.\n+\t* config/i386/i386-protos.h: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/i386/i386.h: Likewise.\n+\t* config/i386/i386.md: Likewise.\n+\t* config/i860/i860.c: Likewise.\n+\t* config/i860/i860.md: Likewise.\n+\t* config/ip2k/ip2k.md: Likewise.\n+\t* config/ip2k/libgcc.S: Likewise.\n+\t* config/ip2k/t-ip2k: Likewise.\n+\t* config/m32r/m32r.c: Likewise.\n+\t* config/m32r/m32r.md: Likewise.\n+\t* config/mcore/mcore.md: Likewise.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/mips/mips.md: Likewise.\n+\t* config/ns32k/ns32k.c: Likewise.\n+\t* config/ns32k/ns32k.h: Likewise.\n+\t* config/ns32k/ns32k.md: Likewise.\n+\t* config/pa/pa.c: Likewise.\n+\t* config/pa/pa.md: Likewise.\n+\t* config/pdp11/pdp11.h: Likewise.\n+\t* config/pdp11/pdp11.md: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/rs6000/rs6000.md: Likewise.\n+\t* config/s390/s390-protos.h: Likewise.\n+\t* config/s390/s390.c: Likewise.\n+\t* config/s390/s390.md: Likewise.\n+\t* config/sh/lib1funcs.asm: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/sh/sh.md: Likewise.\n+\t* config/sh/t-sh: Likewise.\n+\t* config/sparc/sparc.h: Likewise.\n+\t* config/vax/vax.md: Likewise.\n+\t* config/xtensa/xtensa.c: Likewise.\n+\t* config/xtensa/xtensa.md: Likewise.\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/md.texi: Likewise.\n+\t* doc/rtl.texi: Likewise.\n+\n 2004-07-07  Richard Sandiford  <rsandifo@redhat.com>\n \n \tPR target/16407"}, {"sha": "004ac527bb5fddd00725e307ef54102cb1b8921d", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -970,7 +970,7 @@ expand_builtin_prefetch (tree arglist)\n }\n \n /* Get a MEM rtx for expression EXP which is the address of an operand\n-   to be used to be used in a string instruction (cmpstrsi, movstrsi, ..).  */\n+   to be used to be used in a string instruction (cmpstrsi, movmemsi, ..).  */\n \n static rtx\n get_memory_rtx (tree exp)"}, {"sha": "8dbdeb03187836d2e021d59da585d4c13cb76c30", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1347,7 +1347,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n #define MOVE_MAX 8\n \n /* If a memory-to-memory move would take MOVE_RATIO or more simple\n-   move-instruction pairs, we will do a movstr or libcall instead.\n+   move-instruction pairs, we will do a movmem or libcall instead.\n \n    Without byte/word accesses, we want no more than four instructions;\n    with, several single byte accesses are better.  */"}, {"sha": "df2f0233fcb3e119f858947dc66494afe90002fb", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -6431,7 +6431,7 @@\n ;; Argument 2 is the length\n ;; Argument 3 is the alignment\n \n-(define_expand \"movstrqi\"\n+(define_expand \"movmemqi\"\n   [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n \t\t   (match_operand:BLK 1 \"memory_operand\" \"\"))\n \t      (use (match_operand:DI 2 \"immediate_operand\" \"\"))\n@@ -6444,7 +6444,7 @@\n     FAIL;\n })\n \n-(define_expand \"movstrdi\"\n+(define_expand \"movmemdi\"\n   [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n \t\t   (match_operand:BLK 1 \"memory_operand\" \"\"))\n \t      (use (match_operand:DI 2 \"immediate_operand\" \"\"))\n@@ -6464,7 +6464,7 @@\n   alpha_need_linkage (XSTR (operands[4], 0), 0);\n })\n \n-(define_insn \"*movstrdi_1\"\n+(define_insn \"*movmemdi_1\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=m,=m\")\n \t(match_operand:BLK 1 \"memory_operand\" \"m,m\"))\n    (use (match_operand:DI 2 \"nonmemory_operand\" \"r,i\"))\n@@ -6494,7 +6494,7 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"28\")])\n \n-(define_expand \"clrstrqi\"\n+(define_expand \"clrmemqi\"\n   [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n \t\t   (const_int 0))\n \t      (use (match_operand:DI 1 \"immediate_operand\" \"\"))\n@@ -6507,7 +6507,7 @@\n     FAIL;\n })\n \n-(define_expand \"clrstrdi\"\n+(define_expand \"clrmemdi\"\n   [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n \t\t   (const_int 0))\n \t      (use (match_operand:DI 1 \"immediate_operand\" \"\"))\n@@ -6524,7 +6524,7 @@\n   alpha_need_linkage (XSTR (operands[3], 0), 0);\n })\n \n-(define_insn \"*clrstrdi_1\"\n+(define_insn \"*clrmemdi_1\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=m,=m\")\n \t\t   (const_int 0))\n    (use (match_operand:DI 1 \"nonmemory_operand\" \"r,i\"))"}, {"sha": "3124d4f1a1f00310f70d60b45e5405149f801c3e", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -118,7 +118,7 @@ extern int store_multiple_sequence (rtx *, int, int *, int *, HOST_WIDE_INT *);\n extern const char * emit_stm_seq (rtx *, int);\n extern rtx arm_gen_load_multiple (int, int, rtx, int, int, int, int, int);\n extern rtx arm_gen_store_multiple (int, int, rtx, int, int, int, int, int);\n-extern int arm_gen_movstrqi (rtx *);\n+extern int arm_gen_movmemqi (rtx *);\n extern rtx arm_gen_rotated_half_load (rtx);\n extern enum machine_mode arm_select_cc_mode (RTX_CODE, rtx, rtx);\n extern enum machine_mode arm_select_dominance_cc_mode (rtx, rtx,\n@@ -189,7 +189,7 @@ extern int thumb_shiftable_const (unsigned HOST_WIDE_INT);\n extern void thumb_final_prescan_insn (rtx);\n extern const char *thumb_load_double_from_address (rtx *);\n extern const char *thumb_output_move_mem_multiple (int, rtx *);\n-extern void thumb_expand_movstrqi (rtx *);\n+extern void thumb_expand_movmemqi (rtx *);\n extern int thumb_cmp_operand (rtx, enum machine_mode);\n extern int thumb_cbrch_target_operand (rtx, enum machine_mode);\n extern rtx *thumb_legitimize_pic_address (rtx, enum machine_mode, rtx);"}, {"sha": "dcafa8c4780b0e89ceb588145312fda4950a15bc", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -5924,7 +5924,7 @@ arm_gen_store_multiple (int base_regno, int count, rtx to, int up,\n }\n \n int\n-arm_gen_movstrqi (rtx *operands)\n+arm_gen_movmemqi (rtx *operands)\n {\n   HOST_WIDE_INT in_words_to_go, out_words_to_go, last_bytes;\n   int i;\n@@ -13811,7 +13811,7 @@ thumb_output_move_mem_multiple (int n, rtx *operands)\n \n /* Routines for generating rtl.  */\n void\n-thumb_expand_movstrqi (rtx *operands)\n+thumb_expand_movmemqi (rtx *operands)\n {\n   rtx out = copy_to_mode_reg (SImode, XEXP (operands[0], 0));\n   rtx in  = copy_to_mode_reg (SImode, XEXP (operands[1], 0));"}, {"sha": "d2d078b6dd9f72f777a147af09b847019b6b4ae2", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -5493,7 +5493,7 @@\n ;; We could let this apply for blocks of less than this, but it clobbers so\n ;; many registers that there is then probably a better way.\n \n-(define_expand \"movstrqi\"\n+(define_expand \"movmemqi\"\n   [(match_operand:BLK 0 \"general_operand\" \"\")\n    (match_operand:BLK 1 \"general_operand\" \"\")\n    (match_operand:SI 2 \"const_int_operand\" \"\")\n@@ -5502,7 +5502,7 @@\n   \"\n   if (TARGET_ARM)\n     {\n-      if (arm_gen_movstrqi (operands))\n+      if (arm_gen_movmemqi (operands))\n         DONE;\n       FAIL;\n     }\n@@ -5512,7 +5512,7 @@\n           || INTVAL (operands[2]) > 48)\n         FAIL;\n \n-      thumb_expand_movstrqi (operands);\n+      thumb_expand_movmemqi (operands);\n       DONE;\n     }\n   \""}, {"sha": "e90af1c757a1a43b183db2965928393aeb5f3d9c", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -345,7 +345,7 @@\n ;;=========================================================================\n ;; move string (like memcpy)\n \n-(define_expand \"movstrhi\"\n+(define_expand \"movmemhi\"\n   [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n \t\t   (match_operand:BLK 1 \"memory_operand\" \"\"))\n \t      (use (match_operand:HI 2 \"const_int_operand\" \"\"))\n@@ -376,7 +376,7 @@\n   operands[1] = gen_rtx_MEM (BLKmode, addr1);\n }\")\n \n-(define_insn \"*movstrqi_insn\"\n+(define_insn \"*movmemqi_insn\"\n   [(set (mem:BLK (match_operand:HI 0 \"register_operand\" \"e\"))\n \t(mem:BLK (match_operand:HI 1 \"register_operand\" \"e\")))\n    (use (match_operand:QI 2 \"register_operand\" \"r\"))\n@@ -392,7 +392,7 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_insn \"*movstrhi\"\n+(define_insn \"*movmemhi\"\n   [(set (mem:BLK (match_operand:HI 0 \"register_operand\" \"e,e\"))\n \t(mem:BLK (match_operand:HI 1 \"register_operand\" \"e,e\")))\n    (use (match_operand:HI 2 \"register_operand\" \"!w,d\"))\n@@ -420,7 +420,7 @@\n ;; =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0\n ;; memset (%0, 0, %1)\n \n-(define_expand \"clrstrhi\"\n+(define_expand \"clrmemhi\"\n   [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n \t\t   (const_int 0))\n \t      (use (match_operand:HI 1 \"const_int_operand\" \"\"))\n@@ -448,7 +448,7 @@\n   operands[0] = gen_rtx_MEM (BLKmode, addr0);\n }\")\n \n-(define_insn \"*clrstrqi\"\n+(define_insn \"*clrmemqi\"\n   [(set (mem:BLK (match_operand:HI 0 \"register_operand\" \"e\"))\n \t(const_int 0))\n    (use (match_operand:QI 1 \"register_operand\" \"r\"))\n@@ -462,7 +462,7 @@\n   [(set_attr \"length\" \"3\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_insn \"*clrstrhi\"\n+(define_insn \"*clrmemhi\"\n   [(set (mem:BLK (match_operand:HI 0 \"register_operand\" \"e,e\"))\n \t(const_int 0))\n    (use (match_operand:HI 1 \"register_operand\" \"!w,d\"))"}, {"sha": "22aab7dce794b97c6089aa2a3b91418aec0aad5d", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -2348,7 +2348,7 @@ c4x_rptb_insert (rtx insn)\n   rtx count_reg;\n \n   /* If the count register has not been allocated to RC, say if\n-     there is a movstr pattern in the loop, then do not insert a\n+     there is a movmem pattern in the loop, then do not insert a\n      RPTB instruction.  Instead we emit a decrement and branch\n      at the end of the loop.  */\n   count_reg = XEXP (XEXP (SET_SRC (XVECEXP (PATTERN (insn), 0, 0)), 0), 0);"}, {"sha": "a75671a9e0d3e03c4a67de95fa134999b6bb1379", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -5574,7 +5574,7 @@\n   \"0\"\n   \"\")\n \n-(define_expand \"movstrqi_small\"\n+(define_expand \"movmemqi_small\"\n   [(parallel [(set (mem:BLK (match_operand:BLK 0 \"src_operand\" \"\"))\n                    (mem:BLK (match_operand:BLK 1 \"src_operand\" \"\")))\n               (use (match_operand:QI 2 \"immediate_operand\" \"\"))\n@@ -5634,7 +5634,7 @@\n ; operand 3 is the shared alignment\n ; operand 4 is a scratch register\n \n-(define_insn \"movstrqi_large\"\n+(define_insn \"movmemqi_large\"\n   [(set (mem:BLK (match_operand:QI 0 \"addr_reg_operand\" \"a\"))\n         (mem:BLK (match_operand:QI 1 \"addr_reg_operand\" \"a\")))\n    (use (match_operand:QI 2 \"immediate_operand\" \"i\"))\n@@ -5681,7 +5681,7 @@\n  [(set_attr \"type\" \"multi\")])\n \n ; Operand 2 is the count, operand 3 is the alignment.\n-(define_expand \"movstrqi\"\n+(define_expand \"movmemqi\"\n   [(parallel [(set (mem:BLK (match_operand:BLK 0 \"src_operand\" \"\"))\n                    (mem:BLK (match_operand:BLK 1 \"src_operand\" \"\")))\n               (use (match_operand:QI 2 \"immediate_operand\" \"\"))\n@@ -5702,11 +5702,11 @@\n    tmp = gen_reg_rtx (QImode);\n    /* Disabled because of reload problems.  */\n    if (0 && INTVAL (operands[2]) < 8)\n-     emit_insn (gen_movstrqi_small (operands[0], operands[1], operands[2],\n+     emit_insn (gen_movmemqi_small (operands[0], operands[1], operands[2],\n                                     operands[3], tmp));\n    else\n      {\n-      emit_insn (gen_movstrqi_large (operands[0], operands[1], operands[2],\n+      emit_insn (gen_movmemqi_large (operands[0], operands[1], operands[2],\n                                      operands[3], tmp));\n      }\n    DONE;"}, {"sha": "490e6e0c19aad3aa7664a887873fa3d7edef5f91", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1835,7 +1835,7 @@\n ;; Argument 2 is the length\n ;; Argument 3 is the alignment\n \n-(define_expand \"movstrsi\"\n+(define_expand \"movmemsi\"\n   [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n \t\t   (match_operand:BLK 1 \"\" \"\"))\n \t      (use (match_operand:SI 2 \"\" \"\"))\n@@ -1854,7 +1854,7 @@\n ;; Argument 1 is the length\n ;; Argument 2 is the alignment\n \n-(define_expand \"clrstrsi\"\n+(define_expand \"clrmemsi\"\n   [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n \t\t   (const_int 0))\n \t      (use (match_operand:SI 1 \"\" \"\"))"}, {"sha": "6cf6fe2ff0349791a660cd3f9d96a807106a4927", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -95,8 +95,8 @@ extern int long_memory_operand (rtx, enum machine_mode);\n extern int aligned_operand (rtx, enum machine_mode);\n extern enum machine_mode ix86_cc_mode (enum rtx_code, rtx, rtx);\n \n-extern int ix86_expand_movstr (rtx, rtx, rtx, rtx);\n-extern int ix86_expand_clrstr (rtx, rtx, rtx);\n+extern int ix86_expand_movmem (rtx, rtx, rtx, rtx);\n+extern int ix86_expand_clrmem (rtx, rtx, rtx);\n extern int ix86_expand_strlen (rtx, rtx, rtx, rtx);\n \n extern bool legitimate_constant_p (rtx);"}, {"sha": "821bf960d2dd08f9f2dc1b8c5ee46160aaa6476b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -11102,9 +11102,9 @@ ix86_zero_extend_to_Pmode (rtx exp)\n }\n \n /* Expand string move (memcpy) operation.  Use i386 string operations when\n-   profitable.  expand_clrstr contains similar code.  */\n+   profitable.  expand_clrmem contains similar code.  */\n int\n-ix86_expand_movstr (rtx dst, rtx src, rtx count_exp, rtx align_exp)\n+ix86_expand_movmem (rtx dst, rtx src, rtx count_exp, rtx align_exp)\n {\n   rtx srcreg, destreg, countreg, srcexp, destexp;\n   enum machine_mode counter_mode;\n@@ -11381,9 +11381,9 @@ ix86_expand_movstr (rtx dst, rtx src, rtx count_exp, rtx align_exp)\n }\n \n /* Expand string clear operation (bzero).  Use i386 string operations when\n-   profitable.  expand_movstr contains similar code.  */\n+   profitable.  expand_movmem contains similar code.  */\n int\n-ix86_expand_clrstr (rtx dst, rtx count_exp, rtx align_exp)\n+ix86_expand_clrmem (rtx dst, rtx count_exp, rtx align_exp)\n {\n   rtx destreg, zeroreg, countreg, destexp;\n   enum machine_mode counter_mode;"}, {"sha": "631922b46c32f93d750e9ff06bb17889c761b6a5", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -2529,7 +2529,7 @@ enum ix86_builtins\n #define MOVE_MAX_PIECES (TARGET_64BIT ? 8 : 4)\n \n /* If a memory-to-memory move would take MOVE_RATIO or more simple\n-   move-instruction pairs, we will do a movstr or libcall instead.\n+   move-instruction pairs, we will do a movmem or libcall instead.\n    Increasing the value will always make code faster, but eventually\n    incurs high cost in increased code size.\n "}, {"sha": "6b037084ebf8bdb4de3f7408ec64e9239331773e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -16410,27 +16410,27 @@\n  \"cld\"\n   [(set_attr \"type\" \"cld\")])\n \n-(define_expand \"movstrsi\"\n+(define_expand \"movmemsi\"\n   [(use (match_operand:BLK 0 \"memory_operand\" \"\"))\n    (use (match_operand:BLK 1 \"memory_operand\" \"\"))\n    (use (match_operand:SI 2 \"nonmemory_operand\" \"\"))\n    (use (match_operand:SI 3 \"const_int_operand\" \"\"))]\n   \"! optimize_size\"\n {\n- if (ix86_expand_movstr (operands[0], operands[1], operands[2], operands[3]))\n+ if (ix86_expand_movmem (operands[0], operands[1], operands[2], operands[3]))\n    DONE;\n  else\n    FAIL;\n })\n \n-(define_expand \"movstrdi\"\n+(define_expand \"movmemdi\"\n   [(use (match_operand:BLK 0 \"memory_operand\" \"\"))\n    (use (match_operand:BLK 1 \"memory_operand\" \"\"))\n    (use (match_operand:DI 2 \"nonmemory_operand\" \"\"))\n    (use (match_operand:DI 3 \"const_int_operand\" \"\"))]\n   \"TARGET_64BIT\"\n {\n- if (ix86_expand_movstr (operands[0], operands[1], operands[2], operands[3]))\n+ if (ix86_expand_movmem (operands[0], operands[1], operands[2], operands[3]))\n    DONE;\n  else\n    FAIL;\n@@ -16698,25 +16698,25 @@\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_expand \"clrstrsi\"\n+(define_expand \"clrmemsi\"\n    [(use (match_operand:BLK 0 \"memory_operand\" \"\"))\n     (use (match_operand:SI 1 \"nonmemory_operand\" \"\"))\n     (use (match_operand 2 \"const_int_operand\" \"\"))]\n   \"\"\n {\n- if (ix86_expand_clrstr (operands[0], operands[1], operands[2]))\n+ if (ix86_expand_clrmem (operands[0], operands[1], operands[2]))\n    DONE;\n  else\n    FAIL;\n })\n \n-(define_expand \"clrstrdi\"\n+(define_expand \"clrmemdi\"\n    [(use (match_operand:BLK 0 \"memory_operand\" \"\"))\n     (use (match_operand:DI 1 \"nonmemory_operand\" \"\"))\n     (use (match_operand 2 \"const_int_operand\" \"\"))]\n   \"TARGET_64BIT\"\n {\n- if (ix86_expand_clrstr (operands[0], operands[1], operands[2]))\n+ if (ix86_expand_clrmem (operands[0], operands[1], operands[2]))\n    DONE;\n  else\n    FAIL;"}, {"sha": "6fa9a672ac9f2373b686d68191b1ce84dc2c8d71", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1014,7 +1014,7 @@ output_block_move (rtx *operands)\n #if 0\n   rtx zoperands[10];\n #endif\n-  static int movstrsi_label = 0;\n+  static int movmemsi_label = 0;\n   int i;\n   rtx temp1 = operands[4];\n   rtx alignrtx = operands[3];\n@@ -1115,7 +1115,7 @@ output_block_move (rtx *operands)\n \n   /* Generate number for unique label.  */\n \n-  xoperands[3] = GEN_INT (movstrsi_label++);\n+  xoperands[3] = GEN_INT (movmemsi_label++);\n \n   /* Calculate the size of the chunks we will be trying to move first.  */\n "}, {"sha": "719523c0a4c95ff8921b87e405477fbd3cd70652", "filename": "gcc/config/i860/i860.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fi860%2Fi860.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fi860%2Fi860.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1010,7 +1010,7 @@\n ;; but it should suffice\n ;; that anything generated as this insn will be recognized as one\n ;; and that it won't successfully combine with anything.\n-(define_expand \"movstrsi\"\n+(define_expand \"movmemsi\"\n   [(parallel [(set (match_operand:BLK 0 \"general_operand\" \"\")\n \t\t   (match_operand:BLK 1 \"general_operand\" \"\"))\n \t      (use (match_operand:SI 2 \"nonmemory_operand\" \"\"))"}, {"sha": "96d340e4efb9d07116e3eb0e58fca587ec21bc15", "filename": "gcc/config/ip2k/ip2k.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fip2k%2Fip2k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fip2k%2Fip2k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -864,7 +864,7 @@\n ;; Copy a block of bytes (memcpy()).  We expand the definition to convert\n ;; our memory operand into a register pointer operand instead.\n ;;\n-(define_expand \"movstrhi\"\n+(define_expand \"movmemhi\"\n   [(use (match_operand:BLK 0 \"memory_operand\" \"\"))\n    (use (match_operand:BLK 1 \"memory_operand\" \"\"))\n    (use (match_operand:HI 2 \"general_operand\" \"\"))\n@@ -881,7 +881,7 @@\n     else\n       count = operands[2];\n \n-    emit_insn (gen_movstrhi_expanded (addr0, count, addr1));\n+    emit_insn (gen_movmemhi_expanded (addr0, count, addr1));\n     DONE;\n   }\")\n \n@@ -892,7 +892,7 @@\n ;; the general case where we have either a variable block size or one that is\n ;; greater than 255 bytes.\n ;;\n-(define_insn \"movstrhi_expanded\"\n+(define_insn \"movmemhi_expanded\"\n   [(set\n     (mem:BLK\n      (match_operand:HI 0 \"nonimmediate_operand\" \"rS,ro,rS, rS, ro, rS\"))\n@@ -902,12 +902,12 @@\n     (match_operand:HI 1 \"general_operand\"\t \"P, P, P,rSi,rSi,roi\"))]\n   \"\"\n   \"@\n-   push\\\\t%L1%<\\;push\\\\t%L2%<\\;push\\\\t%H2%<\\;push\\\\t%L0%<\\;push\\\\t%H0%>%>%>%>\\;page\\\\t__movstrhi_countqi\\;call\\\\t__movstrhi_countqi\n-   push\\\\t%L1%<\\;push\\\\t%L2%<\\;push\\\\t%H2%<\\;push\\\\t%L0%<\\;push\\\\t%H0%>%>%>%>\\;page\\\\t__movstrhi_countqi\\;call\\\\t__movstrhi_countqi\n-   push\\\\t%L1%<\\;push\\\\t%L2%<\\;push\\\\t%H2%<\\;push\\\\t%L0%<\\;push\\\\t%H0%>%>%>%>\\;page\\\\t__movstrhi_countqi\\;call\\\\t__movstrhi_countqi\n-   push\\\\t%L1%<\\;push\\\\t%H1%<\\;push\\\\t%L2%<\\;push\\\\t%H2%<\\;push\\\\t%L0%<\\;push\\\\t%H0%>%>%>%>%>\\;page\\\\t__movstrhi_counthi\\;call\\\\t__movstrhi_counthi\n-   push\\\\t%L1%<\\;push\\\\t%H1%<\\;push\\\\t%L2%<\\;push\\\\t%H2%<\\;push\\\\t%L0%<\\;push\\\\t%H0%>%>%>%>%>\\;page\\\\t__movstrhi_counthi\\;call\\\\t__movstrhi_counthi\n-   push\\\\t%L1%<\\;push\\\\t%H1%<\\;push\\\\t%L2%<\\;push\\\\t%H2%<\\;push\\\\t%L0%<\\;push\\\\t%H0%>%>%>%>%>\\;page\\\\t__movstrhi_counthi\\;call\\\\t__movstrhi_counthi\")\n+   push\\\\t%L1%<\\;push\\\\t%L2%<\\;push\\\\t%H2%<\\;push\\\\t%L0%<\\;push\\\\t%H0%>%>%>%>\\;page\\\\t__movmemhi_countqi\\;call\\\\t__movmemhi_countqi\n+   push\\\\t%L1%<\\;push\\\\t%L2%<\\;push\\\\t%H2%<\\;push\\\\t%L0%<\\;push\\\\t%H0%>%>%>%>\\;page\\\\t__movmemhi_countqi\\;call\\\\t__movmemhi_countqi\n+   push\\\\t%L1%<\\;push\\\\t%L2%<\\;push\\\\t%H2%<\\;push\\\\t%L0%<\\;push\\\\t%H0%>%>%>%>\\;page\\\\t__movmemhi_countqi\\;call\\\\t__movmemhi_countqi\n+   push\\\\t%L1%<\\;push\\\\t%H1%<\\;push\\\\t%L2%<\\;push\\\\t%H2%<\\;push\\\\t%L0%<\\;push\\\\t%H0%>%>%>%>%>\\;page\\\\t__movmemhi_counthi\\;call\\\\t__movmemhi_counthi\n+   push\\\\t%L1%<\\;push\\\\t%H1%<\\;push\\\\t%L2%<\\;push\\\\t%H2%<\\;push\\\\t%L0%<\\;push\\\\t%H0%>%>%>%>%>\\;page\\\\t__movmemhi_counthi\\;call\\\\t__movmemhi_counthi\n+   push\\\\t%L1%<\\;push\\\\t%H1%<\\;push\\\\t%L2%<\\;push\\\\t%H2%<\\;push\\\\t%L0%<\\;push\\\\t%H0%>%>%>%>%>\\;page\\\\t__movmemhi_counthi\\;call\\\\t__movmemhi_counthi\")\n \n \f\n ;; Bit insert"}, {"sha": "6a0e8c636f2969ee10638b0ef2a219208a5eef6b", "filename": "gcc/config/ip2k/libgcc.S", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fip2k%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fip2k%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Flibgcc.S?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1374,12 +1374,12 @@ __leaf_fp_pop_args_ret:\n \t.endfunc\n #endif /* L_leaf_fp_pop_args_ret */\n \n-#if defined(L_movstrhi_countqi)\n+#if defined(L_movmemhi_countqi)\n \t.sect\t.pram.libgcc,\"ax\"\n-\t.global\t__movstrhi_countqi\n-\t.func\t_movstrhi_countqi, __movstrhi_countqi\n+\t.global\t__movmemhi_countqi\n+\t.func\t_movmemhi_countqi, __movmemhi_countqi\n \n-__movstrhi_countqi:\n+__movmemhi_countqi:\n \tpush\tdph\t\t\t; Save our pointer regs\n \tpush\tdpl\n \tpush\tiph\n@@ -1414,12 +1414,12 @@ __movstrhi_countqi:\n \t.endfunc\n #endif\n \n-#if defined(L_movstrhi_counthi)\n+#if defined(L_movmemhi_counthi)\n \t.sect\t.text.libgcc,\"ax\"\n-\t.global\t__movstrhi_counthi\n-\t.func\t_movstrhi_counthi, __movstrhi_counthi\n+\t.global\t__movmemhi_counthi\n+\t.func\t_movmemhi_counthi, __movmemhi_counthi\n \n-__movstrhi_counthi:\n+__movmemhi_counthi:\n \tpush\tdph\t\t\t; Save our pointer regs\n \tpush\tdpl\n \tpush\tiph"}, {"sha": "f3d93542c3a48af27076160f09c00f0246555f48", "filename": "gcc/config/ip2k/t-ip2k", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fip2k%2Ft-ip2k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fip2k%2Ft-ip2k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Ft-ip2k?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -19,8 +19,8 @@ LIB1ASMFUNCS = \\\n \t_fp_pop_args_ret \\\n \t_pop2_args_ret \\\n \t_leaf_fp_pop_args_ret \\\n-\t_movstrhi_countqi \\\n-\t_movstrhi_counthi \\\n+\t_movmemhi_countqi \\\n+\t_movmemhi_counthi \\\n \tabort \\\n \t_exit\n "}, {"sha": "4105b4e04f5f6df8a9997539b64ffab3971bbdab", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -2715,7 +2715,7 @@ m32r_expand_block_move (rtx operands[])\n \t to the word after the end of the source block, and dst_reg to point\n \t to the last word of the destination block, provided that the block\n \t is MAX_MOVE_BYTES long.  */\n-      emit_insn (gen_movstrsi_internal (dst_reg, src_reg, at_a_time,\n+      emit_insn (gen_movmemsi_internal (dst_reg, src_reg, at_a_time,\n \t\t\t\t\tnew_dst_reg, new_src_reg));\n       emit_move_insn (dst_reg, new_dst_reg);\n       emit_move_insn (src_reg, new_src_reg);\n@@ -2729,7 +2729,7 @@ m32r_expand_block_move (rtx operands[])\n     }\n \n   if (leftover)\n-    emit_insn (gen_movstrsi_internal (dst_reg, src_reg, GEN_INT (leftover),\n+    emit_insn (gen_movmemsi_internal (dst_reg, src_reg, GEN_INT (leftover),\n \t\t\t\t      gen_reg_rtx (SImode),\n \t\t\t\t      gen_reg_rtx (SImode)));\n }"}, {"sha": "c32327ab60fd0d957b08b9110f91747fc86c18a7", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -2522,7 +2522,7 @@\n ;; Argument 2 is the length\n ;; Argument 3 is the alignment\n \n-(define_expand \"movstrsi\"\n+(define_expand \"movmemsi\"\n   [(parallel [(set (match_operand:BLK 0 \"general_operand\" \"\")\n \t\t   (match_operand:BLK 1 \"general_operand\" \"\"))\n \t      (use (match_operand:SI  2 \"immediate_operand\" \"\"))\n@@ -2539,7 +2539,7 @@\n \n ;; Insn generated by block moves\n \n-(define_insn \"movstrsi_internal\"\n+(define_insn \"movmemsi_internal\"\n   [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"r\"))\t;; destination\n \t(mem:BLK (match_operand:SI 1 \"register_operand\" \"r\")))\t;; source\n    (use (match_operand:SI 2 \"m32r_block_immediate_operand\" \"J\"));; # bytes to move"}, {"sha": "066930b5bf23358079793c51a2caf8f4ac97c330", "filename": "gcc/config/mcore/mcore.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fmcore%2Fmcore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fmcore%2Fmcore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -2846,7 +2846,7 @@\n ;; Block move - adapted from m88k.md\n ;; ------------------------------------------------------------------------\n \n-(define_expand \"movstrsi\"\n+(define_expand \"movmemsi\"\n   [(parallel [(set (mem:BLK (match_operand:BLK 0 \"\" \"\"))\n \t\t   (mem:BLK (match_operand:BLK 1 \"\" \"\")))\n \t      (use (match_operand:SI 2 \"general_operand\" \"\"))"}, {"sha": "0a7e8983a01e3eab9f8faf53e866c0e1f6b02a87", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -3504,7 +3504,7 @@ mips_block_move_loop (rtx dest, rtx src, HOST_WIDE_INT length)\n     mips_block_move_straight (dest, src, leftover);\n }\n \f\n-/* Expand a movstrsi instruction.  */\n+/* Expand a movmemsi instruction.  */\n \n bool\n mips_expand_block_move (rtx dest, rtx src, rtx length)"}, {"sha": "dae528aa16889f91a1b4b13f71aaefbe73857974", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -5174,7 +5174,7 @@ dsrl\\t%3,%3,1\\n\\\n ;; Argument 2 is the length\n ;; Argument 3 is the alignment\n \n-(define_expand \"movstrsi\"\n+(define_expand \"movmemsi\"\n   [(parallel [(set (match_operand:BLK 0 \"general_operand\")\n \t\t   (match_operand:BLK 1 \"general_operand\"))\n \t      (use (match_operand:SI 2 \"\"))"}, {"sha": "696e86b818847a23e7a37a9b3cfdb355fca98ea9", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -887,7 +887,7 @@ expand_block_move (rtx operands[])\n \t      dest = copy_addr_to_reg (XEXP (operands[0], 0));\n \t      src = copy_addr_to_reg (XEXP (operands[1], 0));\n \t    \n-\t      emit_insn (gen_movstrsi2(dest, src, GEN_INT (words)));\n+\t      emit_insn (gen_movmemsi2(dest, src, GEN_INT (words)));\n \t    }\n \t}\n       move_tail (operands, bytes & 3, bytes & ~3);\n@@ -914,7 +914,7 @@ expand_block_move (rtx operands[])\n       if (bytes >> 2)\n \t{\n \t  emit_move_insn (count_reg, GEN_INT (bytes >> 2));\n-\t  emit_insn (gen_movstrsi1 (GEN_INT (4)));\n+\t  emit_insn (gen_movmemsi1 (GEN_INT (4)));\n \t}\n       /* insns to copy rest */\n       move_tail (operands, bytes & 3, 0);\n@@ -923,7 +923,7 @@ expand_block_move (rtx operands[])\n     {\n       /* insns to copy by words */\n       emit_insn (gen_lshrsi3 (count_reg, bytes_rtx, const2_rtx));\n-      emit_insn (gen_movstrsi1 (GEN_INT (4)));\n+      emit_insn (gen_movmemsi1 (GEN_INT (4)));\n       if (constp)\n \t{\n \t  move_tail (operands, bytes & 3, 0);\n@@ -932,7 +932,7 @@ expand_block_move (rtx operands[])\n \t{\n \t  /* insns to copy rest */\n \t  emit_insn (gen_andsi3 (count_reg, bytes_rtx, GEN_INT (3)));\n-\t  emit_insn (gen_movstrsi1 (const1_rtx));\n+\t  emit_insn (gen_movmemsi1 (const1_rtx));\n \t}\n     }\n   else\n@@ -958,17 +958,17 @@ expand_block_move (rtx operands[])\n       emit_insn (gen_negsi2 (count_reg, src_reg));\n       emit_insn (gen_andsi3 (count_reg, count_reg, GEN_INT (3)));\n       emit_insn (gen_subsi3 (bytes_reg, bytes_reg, count_reg));\n-      emit_insn (gen_movstrsi1 (const1_rtx));\n+      emit_insn (gen_movmemsi1 (const1_rtx));\n       if (!constp)\n \temit_label (aligned_label);\n \n       /* insns to copy by words */\n       emit_insn (gen_lshrsi3 (count_reg, bytes_reg, const2_rtx));\n-      emit_insn (gen_movstrsi1 (GEN_INT (4)));\n+      emit_insn (gen_movmemsi1 (GEN_INT (4)));\n \n       /* insns to copy rest */\n       emit_insn (gen_andsi3 (count_reg, bytes_reg, GEN_INT (3)));\n-      emit_insn (gen_movstrsi1 (const1_rtx));\n+      emit_insn (gen_movmemsi1 (const1_rtx));\n     }\n }\n \f"}, {"sha": "6054e84326992c468417e067da24f5f7b26481e0", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1104,7 +1104,7 @@ __transfer_from_trampoline ()\t\t\\\n /* The number of scalar move insns which should be generated instead\n    of a string move insn or a library call.\n    \n-   We have a smart movstrsi insn */\n+   We have a smart movmemsi insn */\n #define MOVE_RATIO 0\n \n #define STORE_RATIO (optimize_size ? 3 : 15)"}, {"sha": "ea27b34a0ab6733867d5e01edce69a2099e00fc0", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -543,10 +543,10 @@\n ;;\n ;; Strategy: Use define_expand to\n ;; either emit insns directly if it can be done simply or\n-;; emit rtl to match movstrsi1 which has extra scratch registers\n+;; emit rtl to match movmemsi1 which has extra scratch registers\n ;; which can be used to generate more complex code.\n \n-(define_expand \"movstrsi\"\n+(define_expand \"movmemsi\"\n   [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n \t\t   (match_operand:BLK 1 \"memory_operand\" \"\"))\n \t      (use (match_operand:SI 2 \"general_operand\" \"\"))\n@@ -568,7 +568,7 @@\n ;; r3  match\n \n \n-(define_insn \"movstrsi1\"\n+(define_insn \"movmemsi1\"\n   [(set (mem:BLK (reg:SI 2))\n \t(mem:BLK (reg:SI 1)))\n    (use (reg:SI 0))\n@@ -585,7 +585,7 @@\n        return \\\"movsb\\\";\n   }\")\n \n-(define_insn \"movstrsi2\"\n+(define_insn \"movmemsi2\"\n   [(set (mem:BLK (match_operand:SI 0 \"address_operand\" \"p\"))\n \t(mem:BLK (match_operand:SI 1 \"address_operand\" \"p\")))\n    (use (match_operand 2 \"immediate_operand\" \"i\"))]"}, {"sha": "d7cefacde66abdfa66f0b914c6875dd6c793b2f3", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -95,8 +95,8 @@ static int pa_can_combine_p (rtx, rtx, rtx, int, rtx, rtx, rtx);\n static int forward_branch_p (rtx);\n static int shadd_constant_p (int);\n static void compute_zdepwi_operands (unsigned HOST_WIDE_INT, unsigned *);\n-static int compute_movstr_length (rtx);\n-static int compute_clrstr_length (rtx);\n+static int compute_movmem_length (rtx);\n+static int compute_clrmem_length (rtx);\n static bool pa_assemble_integer (rtx, unsigned int, int);\n static void remove_useless_addtr_insns (int);\n static void store_reg (int, HOST_WIDE_INT, int);\n@@ -2802,7 +2802,7 @@ output_block_move (rtx *operands, int size_is_constant ATTRIBUTE_UNUSED)\n    count insns rather than emit them.  */\n \n static int\n-compute_movstr_length (rtx insn)\n+compute_movmem_length (rtx insn)\n {\n   rtx pat = PATTERN (insn);\n   unsigned int align = INTVAL (XEXP (XVECEXP (pat, 0, 7), 0));\n@@ -2944,7 +2944,7 @@ output_block_clear (rtx *operands, int size_is_constant ATTRIBUTE_UNUSED)\n    count insns rather than emit them.  */\n \n static int\n-compute_clrstr_length (rtx insn)\n+compute_clrmem_length (rtx insn)\n {\n   rtx pat = PATTERN (insn);\n   unsigned int align = INTVAL (XEXP (XVECEXP (pat, 0, 4), 0));\n@@ -4805,15 +4805,15 @@ pa_adjust_insn_length (rtx insn, int length)\n \t   && GET_CODE (XEXP (XVECEXP (pat, 0, 0), 1)) == MEM\n \t   && GET_MODE (XEXP (XVECEXP (pat, 0, 0), 0)) == BLKmode\n \t   && GET_MODE (XEXP (XVECEXP (pat, 0, 0), 1)) == BLKmode)\n-    return compute_movstr_length (insn) - 4;\n+    return compute_movmem_length (insn) - 4;\n   /* Block clear pattern.  */\n   else if (GET_CODE (insn) == INSN\n \t   && GET_CODE (pat) == PARALLEL\n \t   && GET_CODE (XVECEXP (pat, 0, 0)) == SET\n \t   && GET_CODE (XEXP (XVECEXP (pat, 0, 0), 0)) == MEM\n \t   && XEXP (XVECEXP (pat, 0, 0), 1) == const0_rtx\n \t   && GET_MODE (XEXP (XVECEXP (pat, 0, 0), 0)) == BLKmode)\n-    return compute_clrstr_length (insn) - 4;\n+    return compute_clrmem_length (insn) - 4;\n   /* Conditional branch with an unfilled delay slot.  */\n   else if (GET_CODE (insn) == JUMP_INSN && ! simplejump_p (insn))\n     {"}, {"sha": "291013e1e7c9639b656da22305c642fc16a924c6", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -3140,9 +3140,9 @@\n \n ;; The definition of this insn does not really explain what it does,\n ;; but it should suffice that anything generated as this insn will be\n-;; recognized as a movstrsi operation, and that it will not successfully\n+;; recognized as a movmemsi operation, and that it will not successfully\n ;; combine with anything.\n-(define_expand \"movstrsi\"\n+(define_expand \"movmemsi\"\n   [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n \t\t   (match_operand:BLK 1 \"\" \"\"))\n \t      (clobber (match_dup 4))\n@@ -3222,7 +3222,7 @@\n ;; operands 0 and 1 are both equivalent to symbolic MEMs.  Thus, we are\n ;; forced to internally copy operands 0 and 1 to operands 7 and 8,\n ;; respectively.  We then split or peephole optimize after reload.\n-(define_insn \"movstrsi_prereload\"\n+(define_insn \"movmemsi_prereload\"\n   [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"r,r\"))\n \t(mem:BLK (match_operand:SI 1 \"register_operand\" \"r,r\")))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=&r,&r\"))\t;loop cnt/tmp\n@@ -3315,7 +3315,7 @@\n     }\n }\")\n \n-(define_insn \"movstrsi_postreload\"\n+(define_insn \"movmemsi_postreload\"\n   [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+r,r\"))\n \t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+r,r\")))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=&r,&r\"))\t;loop cnt/tmp\n@@ -3330,7 +3330,7 @@\n   \"* return output_block_move (operands, !which_alternative);\"\n   [(set_attr \"type\" \"multi,multi\")])\n \n-(define_expand \"movstrdi\"\n+(define_expand \"movmemdi\"\n   [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n \t\t   (match_operand:BLK 1 \"\" \"\"))\n \t      (clobber (match_dup 4))\n@@ -3410,7 +3410,7 @@\n ;; operands 0 and 1 are both equivalent to symbolic MEMs.  Thus, we are\n ;; forced to internally copy operands 0 and 1 to operands 7 and 8,\n ;; respectively.  We then split or peephole optimize after reload.\n-(define_insn \"movstrdi_prereload\"\n+(define_insn \"movmemdi_prereload\"\n   [(set (mem:BLK (match_operand:DI 0 \"register_operand\" \"r,r\"))\n \t(mem:BLK (match_operand:DI 1 \"register_operand\" \"r,r\")))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=&r,&r\"))\t;loop cnt/tmp\n@@ -3503,7 +3503,7 @@\n     }\n }\")\n \n-(define_insn \"movstrdi_postreload\"\n+(define_insn \"movmemdi_postreload\"\n   [(set (mem:BLK (match_operand:DI 0 \"register_operand\" \"+r,r\"))\n \t(mem:BLK (match_operand:DI 1 \"register_operand\" \"+r,r\")))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=&r,&r\"))\t;loop cnt/tmp\n@@ -3518,7 +3518,7 @@\n   \"* return output_block_move (operands, !which_alternative);\"\n   [(set_attr \"type\" \"multi,multi\")])\n \n-(define_expand \"clrstrsi\"\n+(define_expand \"clrmemsi\"\n   [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n \t\t   (const_int 0))\n \t      (clobber (match_dup 3))\n@@ -3554,7 +3554,7 @@\n   operands[4] = gen_reg_rtx (SImode);\n }\")\n \n-(define_insn \"clrstrsi_prereload\"\n+(define_insn \"clrmemsi_prereload\"\n   [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"r,r\"))\n \t(const_int 0))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=&r,&r\"))\t;loop cnt/tmp\n@@ -3616,7 +3616,7 @@\n     }\n }\")\n \n-(define_insn \"clrstrsi_postreload\"\n+(define_insn \"clrmemsi_postreload\"\n   [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+r,r\"))\n \t(const_int 0))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=&r,&r\"))\t;loop cnt/tmp\n@@ -3628,7 +3628,7 @@\n   \"* return output_block_clear (operands, !which_alternative);\"\n   [(set_attr \"type\" \"multi,multi\")])\n \n-(define_expand \"clrstrdi\"\n+(define_expand \"clrmemdi\"\n   [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n \t\t   (const_int 0))\n \t      (clobber (match_dup 3))\n@@ -3664,7 +3664,7 @@\n   operands[4] = gen_reg_rtx (DImode);\n }\")\n \n-(define_insn \"clrstrdi_prereload\"\n+(define_insn \"clrmemdi_prereload\"\n   [(set (mem:BLK (match_operand:DI 0 \"register_operand\" \"r,r\"))\n \t(const_int 0))\n    (clobber (match_operand:DI 1 \"register_operand\" \"=&r,&r\"))\t;loop cnt/tmp\n@@ -3726,7 +3726,7 @@\n     }\n }\")\n \n-(define_insn \"clrstrdi_postreload\"\n+(define_insn \"clrmemdi_postreload\"\n   [(set (mem:BLK (match_operand:DI 0 \"register_operand\" \"+r,r\"))\n \t(const_int 0))\n    (clobber (match_operand:DI 1 \"register_operand\" \"=&r,&r\"))\t;loop cnt/tmp"}, {"sha": "63275d4237689de481d803d9d99a81e941a0618b", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -71,7 +71,7 @@ extern int target_flags;\n     { \"no-45\", -8, \"\" },\t\t\t\t\t\t\\\n /* is 11/10 */\t\t\t\t\t\t\t\t\\\n     { \"10\", -12, N_(\"Generate code for an 11/10\") },\t\t\t\\\n-/* use movstrhi for bcopy */\t\t\t\t\t\t\\\n+/* use movmemhi for bcopy */\t\t\t\t\t\t\\\n     { \"bcopy\", 16, NULL },\t\t\t\t\t\t\\\n     { \"bcopy-builtin\", -16, NULL },\t\t\t\t\t\\\n /* use 32 bit for int */\t\t\t\t\t\t\\"}, {"sha": "676cc659f17d772e32da0ed1dc3b452255686be5", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -688,7 +688,7 @@\n ;; maybe fiddle a bit with move_ratio, then \n ;; let constraints only accept a register ...\n \n-(define_expand \"movstrhi\"\n+(define_expand \"movmemhi\"\n   [(parallel [(set (match_operand:BLK 0 \"general_operand\" \"=g,g\")\n \t\t   (match_operand:BLK 1 \"general_operand\" \"g,g\"))\n \t      (use (match_operand:HI 2 \"arith_operand\" \"n,&mr\"))\n@@ -712,7 +712,7 @@\n }\")\n \n \n-(define_insn \"\" ; \"movstrhi\"\n+(define_insn \"\" ; \"movmemhi\"\n   [(set (mem:BLK (match_operand:HI 0 \"general_operand\" \"=r,r\"))\n \t(mem:BLK (match_operand:HI 1 \"general_operand\" \"r,r\")))\n    (use (match_operand:HI 2 \"arith_operand\" \"n,&r\"))"}, {"sha": "f1b5574777f2fe50f23e0ce6e0e29514b7dc26cd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -8216,7 +8216,7 @@ expand_block_move (rtx operands[])\n   for (offset = 0; bytes > 0; offset += move_bytes, bytes -= move_bytes)\n     {\n       union {\n-\trtx (*movstrsi) (rtx, rtx, rtx, rtx);\n+\trtx (*movmemsi) (rtx, rtx, rtx, rtx);\n \trtx (*mov) (rtx, rtx);\n       } gen_func;\n       enum machine_mode mode = BLKmode;\n@@ -8234,7 +8234,7 @@ expand_block_move (rtx operands[])\n \t  && ! fixed_regs[12])\n \t{\n \t  move_bytes = (bytes > 32) ? 32 : bytes;\n-\t  gen_func.movstrsi = gen_movstrsi_8reg;\n+\t  gen_func.movmemsi = gen_movmemsi_8reg;\n \t}\n       else if (TARGET_STRING\n \t       && bytes > 16\t/* move up to 24 bytes at a time */\n@@ -8246,7 +8246,7 @@ expand_block_move (rtx operands[])\n \t       && ! fixed_regs[10])\n \t{\n \t  move_bytes = (bytes > 24) ? 24 : bytes;\n-\t  gen_func.movstrsi = gen_movstrsi_6reg;\n+\t  gen_func.movmemsi = gen_movmemsi_6reg;\n \t}\n       else if (TARGET_STRING\n \t       && bytes > 8\t/* move up to 16 bytes at a time */\n@@ -8256,7 +8256,7 @@ expand_block_move (rtx operands[])\n \t       && ! fixed_regs[8])\n \t{\n \t  move_bytes = (bytes > 16) ? 16 : bytes;\n-\t  gen_func.movstrsi = gen_movstrsi_4reg;\n+\t  gen_func.movmemsi = gen_movmemsi_4reg;\n \t}\n       else if (bytes >= 8 && TARGET_POWERPC64\n \t       /* 64-bit loads and stores require word-aligned\n@@ -8270,7 +8270,7 @@ expand_block_move (rtx operands[])\n       else if (TARGET_STRING && bytes > 4 && !TARGET_POWERPC64)\n \t{\t\t\t/* move up to 8 bytes at a time */\n \t  move_bytes = (bytes > 8) ? 8 : bytes;\n-\t  gen_func.movstrsi = gen_movstrsi_2reg;\n+\t  gen_func.movmemsi = gen_movmemsi_2reg;\n \t}\n       else if (bytes >= 4 && (align >= 4 || ! STRICT_ALIGNMENT))\n \t{\t\t\t/* move 4 bytes */\n@@ -8287,7 +8287,7 @@ expand_block_move (rtx operands[])\n       else if (TARGET_STRING && bytes > 1)\n \t{\t\t\t/* move up to 4 bytes at a time */\n \t  move_bytes = (bytes > 4) ? 4 : bytes;\n-\t  gen_func.movstrsi = gen_movstrsi_1reg;\n+\t  gen_func.movmemsi = gen_movmemsi_1reg;\n \t}\n       else /* move 1 byte at a time */\n \t{\n@@ -8317,7 +8317,7 @@ expand_block_move (rtx operands[])\n \n       if (mode == BLKmode)\n \t{\n-\t  /* Move the address into scratch registers.  The movstrsi\n+\t  /* Move the address into scratch registers.  The movmemsi\n \t     patterns require zero offset.  */\n \t  if (!REG_P (XEXP (src, 0)))\n \t    {\n@@ -8333,7 +8333,7 @@ expand_block_move (rtx operands[])\n \t    }\n \t  set_mem_size (dest, GEN_INT (move_bytes));\n \t  \n-\t  emit_insn ((*gen_func.movstrsi) (dest, src,\n+\t  emit_insn ((*gen_func.movmemsi) (dest, src,\n \t\t\t\t\t   GEN_INT (move_bytes & 31),\n \t\t\t\t\t   align_rtx));\n \t}"}, {"sha": "2874e6d2a0e62019ec5a07ca23fa7140e026ba3f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -9116,7 +9116,7 @@\n ;; Argument 2 is the length\n ;; Argument 3 is the alignment\n \n-(define_expand \"movstrsi\"\n+(define_expand \"movmemsi\"\n   [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n \t\t   (match_operand:BLK 1 \"\" \"\"))\n \t      (use (match_operand:SI 2 \"\" \"\"))\n@@ -9133,7 +9133,7 @@\n ;; Move up to 32 bytes at a time.  The fixed registers are needed because the\n ;; register allocator doesn't have a clue about allocating 8 word registers.\n ;; rD/rS = r5 is preferred, efficient form.\n-(define_expand \"movstrsi_8reg\"\n+(define_expand \"movmemsi_8reg\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (match_operand 1 \"\" \"\"))\n \t      (use (match_operand 2 \"\" \"\"))\n@@ -9225,7 +9225,7 @@\n ;; Move up to 24 bytes at a time.  The fixed registers are needed because the\n ;; register allocator doesn't have a clue about allocating 6 word registers.\n ;; rD/rS = r5 is preferred, efficient form.\n-(define_expand \"movstrsi_6reg\"\n+(define_expand \"movmemsi_6reg\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (match_operand 1 \"\" \"\"))\n \t      (use (match_operand 2 \"\" \"\"))\n@@ -9306,7 +9306,7 @@\n ;; Move up to 16 bytes at a time, using 4 fixed registers to avoid spill\n ;; problems with TImode.\n ;; rD/rS = r5 is preferred, efficient form.\n-(define_expand \"movstrsi_4reg\"\n+(define_expand \"movmemsi_4reg\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (match_operand 1 \"\" \"\"))\n \t      (use (match_operand 2 \"\" \"\"))\n@@ -9377,7 +9377,7 @@\n    (set_attr \"length\" \"8\")])\n \n ;; Move up to 8 bytes at a time.\n-(define_expand \"movstrsi_2reg\"\n+(define_expand \"movmemsi_2reg\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (match_operand 1 \"\" \"\"))\n \t      (use (match_operand 2 \"\" \"\"))\n@@ -9414,7 +9414,7 @@\n    (set_attr \"length\" \"8\")])\n \n ;; Move up to 4 bytes at a time.\n-(define_expand \"movstrsi_1reg\"\n+(define_expand \"movmemsi_1reg\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (match_operand 1 \"\" \"\"))\n \t      (use (match_operand 2 \"\" \"\"))"}, {"sha": "6c9d7e7677eda543a2e59a70e43e348edf835438", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -74,8 +74,8 @@ extern int s390_plus_operand (rtx, enum machine_mode);\n extern void s390_expand_plus_operand (rtx, rtx, rtx);\n extern void emit_symbolic_move (rtx *);\n extern void s390_load_address (rtx, rtx);\n-extern void s390_expand_movstr (rtx, rtx, rtx);\n-extern void s390_expand_clrstr (rtx, rtx);\n+extern void s390_expand_movmem (rtx, rtx, rtx);\n+extern void s390_expand_clrmem (rtx, rtx);\n extern void s390_expand_cmpmem (rtx, rtx, rtx, rtx);\n extern bool s390_expand_addcc (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n extern rtx s390_return_addr_rtx (int, rtx);"}, {"sha": "5a8b46d0423b82af977c0d7756d5c28a7703a75f", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -3029,17 +3029,17 @@ legitimize_address (register rtx x, register rtx oldx ATTRIBUTE_UNUSED,\n /* Emit code to move LEN bytes from DST to SRC.  */\n \n void\n-s390_expand_movstr (rtx dst, rtx src, rtx len)\n+s390_expand_movmem (rtx dst, rtx src, rtx len)\n {\n   if (GET_CODE (len) == CONST_INT && INTVAL (len) >= 0 && INTVAL (len) <= 256)\n     {\n       if (INTVAL (len) > 0)\n-        emit_insn (gen_movstr_short (dst, src, GEN_INT (INTVAL (len) - 1)));\n+        emit_insn (gen_movmem_short (dst, src, GEN_INT (INTVAL (len) - 1)));\n     }\n \n   else if (TARGET_MVCLE)\n     {\n-      emit_insn (gen_movstr_long (dst, src, convert_to_mode (Pmode, len, 1)));\n+      emit_insn (gen_movmem_long (dst, src, convert_to_mode (Pmode, len, 1)));\n     }\n \n   else\n@@ -3081,7 +3081,7 @@ s390_expand_movstr (rtx dst, rtx src, rtx len)\n \n       emit_label (loop_start_label);\n \n-      emit_insn (gen_movstr_short (dst, src, GEN_INT (255)));\n+      emit_insn (gen_movmem_short (dst, src, GEN_INT (255)));\n       s390_load_address (dst_addr,\n \t\t\t gen_rtx_PLUS (Pmode, dst_addr, GEN_INT (256)));\n       s390_load_address (src_addr,\n@@ -3097,7 +3097,7 @@ s390_expand_movstr (rtx dst, rtx src, rtx len)\n       emit_jump (loop_start_label);\n       emit_label (loop_end_label);\n \n-      emit_insn (gen_movstr_short (dst, src,\n+      emit_insn (gen_movmem_short (dst, src,\n \t\t\t\t   convert_to_mode (Pmode, count, 1)));\n       emit_label (end_label);\n     }\n@@ -3106,17 +3106,17 @@ s390_expand_movstr (rtx dst, rtx src, rtx len)\n /* Emit code to clear LEN bytes at DST.  */\n \n void\n-s390_expand_clrstr (rtx dst, rtx len)\n+s390_expand_clrmem (rtx dst, rtx len)\n {\n   if (GET_CODE (len) == CONST_INT && INTVAL (len) >= 0 && INTVAL (len) <= 256)\n     {\n       if (INTVAL (len) > 0)\n-        emit_insn (gen_clrstr_short (dst, GEN_INT (INTVAL (len) - 1)));\n+        emit_insn (gen_clrmem_short (dst, GEN_INT (INTVAL (len) - 1)));\n     }\n \n   else if (TARGET_MVCLE)\n     {\n-      emit_insn (gen_clrstr_long (dst, convert_to_mode (Pmode, len, 1)));\n+      emit_insn (gen_clrmem_long (dst, convert_to_mode (Pmode, len, 1)));\n     }\n \n   else\n@@ -3156,7 +3156,7 @@ s390_expand_clrstr (rtx dst, rtx len)\n \n       emit_label (loop_start_label);\n \n-      emit_insn (gen_clrstr_short (dst, GEN_INT (255)));\n+      emit_insn (gen_clrmem_short (dst, GEN_INT (255)));\n       s390_load_address (dst_addr,\n \t\t\t gen_rtx_PLUS (Pmode, dst_addr, GEN_INT (256)));\n \n@@ -3170,7 +3170,7 @@ s390_expand_clrstr (rtx dst, rtx len)\n       emit_jump (loop_start_label);\n       emit_label (loop_end_label);\n \n-      emit_insn (gen_clrstr_short (dst, convert_to_mode (Pmode, count, 1)));\n+      emit_insn (gen_clrmem_short (dst, convert_to_mode (Pmode, count, 1)));\n       emit_label (end_label);\n     }\n }"}, {"sha": "1a53e71cd8b0045634c75056cb2b5cab8020bc9a", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1873,29 +1873,29 @@\n    (set_attr \"length\"  \"8\")])\n \n ;\n-; movstrM instruction pattern(s).\n+; movmemM instruction pattern(s).\n ;\n \n-(define_expand \"movstrdi\"\n+(define_expand \"movmemdi\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n         (match_operand:BLK 1 \"memory_operand\" \"\"))\n    (use (match_operand:DI 2 \"general_operand\" \"\"))\n    (match_operand 3 \"\" \"\")]\n   \"TARGET_64BIT\"\n-  \"s390_expand_movstr (operands[0], operands[1], operands[2]); DONE;\")\n+  \"s390_expand_movmem (operands[0], operands[1], operands[2]); DONE;\")\n \n-(define_expand \"movstrsi\"\n+(define_expand \"movmemsi\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n         (match_operand:BLK 1 \"memory_operand\" \"\"))\n    (use (match_operand:SI 2 \"general_operand\" \"\"))\n    (match_operand 3 \"\" \"\")]\n   \"\"\n-  \"s390_expand_movstr (operands[0], operands[1], operands[2]); DONE;\")\n+  \"s390_expand_movmem (operands[0], operands[1], operands[2]); DONE;\")\n \n ; Move a block that is up to 256 bytes in length.\n ; The block length is taken as (operands[2] % 256) + 1.\n \n-(define_expand \"movstr_short\"\n+(define_expand \"movmem_short\"\n   [(parallel\n     [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n           (match_operand:BLK 1 \"memory_operand\" \"\"))\n@@ -1904,7 +1904,7 @@\n   \"\"\n   \"operands[3] = gen_rtx_SCRATCH (Pmode);\")\n \n-(define_insn \"*movstr_short\"\n+(define_insn \"*movmem_short\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=Q,Q\")\n         (match_operand:BLK 1 \"memory_operand\" \"Q,Q\"))\n    (use (match_operand 2 \"nonmemory_operand\" \"n,a\"))\n@@ -1933,7 +1933,7 @@\n \n ; Move a block of arbitrary length.\n \n-(define_expand \"movstr_long\"\n+(define_expand \"movmem_long\"\n   [(parallel\n     [(clobber (match_dup 2))\n      (clobber (match_dup 3))\n@@ -1966,7 +1966,7 @@\n   operands[3] = reg1;\n })\n \n-(define_insn \"*movstr_long_64\"\n+(define_insn \"*movmem_long_64\"\n   [(clobber (match_operand:TI 0 \"register_operand\" \"=d\"))\n    (clobber (match_operand:TI 1 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:DI (match_operand:TI 2 \"register_operand\" \"0\") 0))\n@@ -1980,7 +1980,7 @@\n    (set_attr \"type\"    \"vs\")\n    (set_attr \"length\"  \"8\")])\n \n-(define_insn \"*movstr_long_31\"\n+(define_insn \"*movmem_long_31\"\n   [(clobber (match_operand:DI 0 \"register_operand\" \"=d\"))\n    (clobber (match_operand:DI 1 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:SI (match_operand:DI 2 \"register_operand\" \"0\") 0))\n@@ -1995,29 +1995,29 @@\n    (set_attr \"length\"  \"8\")])\n \n ;\n-; clrstrM instruction pattern(s).\n+; clrmemM instruction pattern(s).\n ;\n \n-(define_expand \"clrstrdi\"\n+(define_expand \"clrmemdi\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n         (const_int 0))\n    (use (match_operand:DI 1 \"general_operand\" \"\"))\n    (match_operand 2 \"\" \"\")]\n   \"TARGET_64BIT\"\n-  \"s390_expand_clrstr (operands[0], operands[1]); DONE;\")\n+  \"s390_expand_clrmem (operands[0], operands[1]); DONE;\")\n \n-(define_expand \"clrstrsi\"\n+(define_expand \"clrmemsi\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n         (const_int 0))\n    (use (match_operand:SI 1 \"general_operand\" \"\"))\n    (match_operand 2 \"\" \"\")]\n   \"\"\n-  \"s390_expand_clrstr (operands[0], operands[1]); DONE;\")\n+  \"s390_expand_clrmem (operands[0], operands[1]); DONE;\")\n \n ; Clear a block that is up to 256 bytes in length.\n ; The block length is taken as (operands[1] % 256) + 1.\n \n-(define_expand \"clrstr_short\"\n+(define_expand \"clrmem_short\"\n   [(parallel\n     [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n           (const_int 0))\n@@ -2027,7 +2027,7 @@\n   \"\"\n   \"operands[2] = gen_rtx_SCRATCH (Pmode);\")\n \n-(define_insn \"*clrstr_short\"\n+(define_insn \"*clrmem_short\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=Q,Q\")\n         (const_int 0))\n    (use (match_operand 1 \"nonmemory_operand\" \"n,a\"))\n@@ -2057,7 +2057,7 @@\n \n ; Clear a block of arbitrary length.\n \n-(define_expand \"clrstr_long\"\n+(define_expand \"clrmem_long\"\n   [(parallel\n     [(clobber (match_dup 1))\n      (set (match_operand:BLK 0 \"memory_operand\" \"\")\n@@ -2084,7 +2084,7 @@\n   operands[2] = reg1;\n })\n \n-(define_insn \"*clrstr_long_64\"\n+(define_insn \"*clrmem_long_64\"\n   [(clobber (match_operand:TI 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:DI (match_operand:TI 2 \"register_operand\" \"0\") 0))\n         (const_int 0))\n@@ -2097,7 +2097,7 @@\n    (set_attr \"type\"    \"vs\")\n    (set_attr \"length\"  \"8\")])\n \n-(define_insn \"*clrstr_long_31\"\n+(define_insn \"*clrmem_long_31\"\n   [(clobber (match_operand:DI 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:SI (match_operand:DI 2 \"register_operand\" \"0\") 0))\n         (const_int 0))"}, {"sha": "7619f0c67d74841d9f985b845b139eddfe4c40e9", "filename": "gcc/config/sh/lib1funcs.asm", "status": "modified", "additions": 95, "deletions": 95, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.asm?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -710,128 +710,128 @@ LOCAL(lshrsi3_0):\n \tENDFUNC(GLOBAL(lshrsi3))\n #endif\n \n-#ifdef L_movstr\n+#ifdef L_movmem\n \t.text\n ! done all the large groups, do the remainder\n \n-! jump to movstr+\n+! jump to movmem+\n done:\n \tadd\t#64,r5\n-\tmova\tGLOBAL(movstrSI0),r0\n+\tmova\tGLOBAL(movmemSI0),r0\n \tshll2\tr6\n \tadd\tr6,r0\n \tjmp\t@r0\n \tadd\t#64,r4\n \t.align\t4\n-\t.global\tGLOBAL(movstrSI64)\n-\tFUNC(GLOBAL(movstrSI64))\n-GLOBAL(movstrSI64):\n+\t.global\tGLOBAL(movmemSI64)\n+\tFUNC(GLOBAL(movmemSI64))\n+GLOBAL(movmemSI64):\n \tmov.l\t@(60,r5),r0\n \tmov.l\tr0,@(60,r4)\n-\t.global\tGLOBAL(movstrSI60)\n-\tFUNC(GLOBAL(movstrSI60))\n-GLOBAL(movstrSI60):\n+\t.global\tGLOBAL(movmemSI60)\n+\tFUNC(GLOBAL(movmemSI60))\n+GLOBAL(movmemSI60):\n \tmov.l\t@(56,r5),r0\n \tmov.l\tr0,@(56,r4)\n-\t.global\tGLOBAL(movstrSI56)\n-\tFUNC(GLOBAL(movstrSI56))\n-GLOBAL(movstrSI56):\n+\t.global\tGLOBAL(movmemSI56)\n+\tFUNC(GLOBAL(movmemSI56))\n+GLOBAL(movmemSI56):\n \tmov.l\t@(52,r5),r0\n \tmov.l\tr0,@(52,r4)\n-\t.global\tGLOBAL(movstrSI52)\n-\tFUNC(GLOBAL(movstrSI52))\n-GLOBAL(movstrSI52):\n+\t.global\tGLOBAL(movmemSI52)\n+\tFUNC(GLOBAL(movmemSI52))\n+GLOBAL(movmemSI52):\n \tmov.l\t@(48,r5),r0\n \tmov.l\tr0,@(48,r4)\n-\t.global\tGLOBAL(movstrSI48)\n-\tFUNC(GLOBAL(movstrSI48))\n-GLOBAL(movstrSI48):\n+\t.global\tGLOBAL(movmemSI48)\n+\tFUNC(GLOBAL(movmemSI48))\n+GLOBAL(movmemSI48):\n \tmov.l\t@(44,r5),r0\n \tmov.l\tr0,@(44,r4)\n-\t.global\tGLOBAL(movstrSI44)\n-\tFUNC(GLOBAL(movstrSI44))\n-GLOBAL(movstrSI44):\n+\t.global\tGLOBAL(movmemSI44)\n+\tFUNC(GLOBAL(movmemSI44))\n+GLOBAL(movmemSI44):\n \tmov.l\t@(40,r5),r0\n \tmov.l\tr0,@(40,r4)\n-\t.global\tGLOBAL(movstrSI40)\n-\tFUNC(GLOBAL(movstrSI40))\n-GLOBAL(movstrSI40):\n+\t.global\tGLOBAL(movmemSI40)\n+\tFUNC(GLOBAL(movmemSI40))\n+GLOBAL(movmemSI40):\n \tmov.l\t@(36,r5),r0\n \tmov.l\tr0,@(36,r4)\n-\t.global\tGLOBAL(movstrSI36)\n-\tFUNC(GLOBAL(movstrSI36))\n-GLOBAL(movstrSI36):\n+\t.global\tGLOBAL(movmemSI36)\n+\tFUNC(GLOBAL(movmemSI36))\n+GLOBAL(movmemSI36):\n \tmov.l\t@(32,r5),r0\n \tmov.l\tr0,@(32,r4)\n-\t.global\tGLOBAL(movstrSI32)\n-\tFUNC(GLOBAL(movstrSI32))\n-GLOBAL(movstrSI32):\n+\t.global\tGLOBAL(movmemSI32)\n+\tFUNC(GLOBAL(movmemSI32))\n+GLOBAL(movmemSI32):\n \tmov.l\t@(28,r5),r0\n \tmov.l\tr0,@(28,r4)\n-\t.global\tGLOBAL(movstrSI28)\n-\tFUNC(GLOBAL(movstrSI28))\n-GLOBAL(movstrSI28):\n+\t.global\tGLOBAL(movmemSI28)\n+\tFUNC(GLOBAL(movmemSI28))\n+GLOBAL(movmemSI28):\n \tmov.l\t@(24,r5),r0\n \tmov.l\tr0,@(24,r4)\n-\t.global\tGLOBAL(movstrSI24)\n-\tFUNC(GLOBAL(movstrSI24))\n-GLOBAL(movstrSI24):\n+\t.global\tGLOBAL(movmemSI24)\n+\tFUNC(GLOBAL(movmemSI24))\n+GLOBAL(movmemSI24):\n \tmov.l\t@(20,r5),r0\n \tmov.l\tr0,@(20,r4)\n-\t.global\tGLOBAL(movstrSI20)\n-\tFUNC(GLOBAL(movstrSI20))\n-GLOBAL(movstrSI20):\n+\t.global\tGLOBAL(movmemSI20)\n+\tFUNC(GLOBAL(movmemSI20))\n+GLOBAL(movmemSI20):\n \tmov.l\t@(16,r5),r0\n \tmov.l\tr0,@(16,r4)\n-\t.global\tGLOBAL(movstrSI16)\n-\tFUNC(GLOBAL(movstrSI16))\n-GLOBAL(movstrSI16):\n+\t.global\tGLOBAL(movmemSI16)\n+\tFUNC(GLOBAL(movmemSI16))\n+GLOBAL(movmemSI16):\n \tmov.l\t@(12,r5),r0\n \tmov.l\tr0,@(12,r4)\n-\t.global\tGLOBAL(movstrSI12)\n-\tFUNC(GLOBAL(movstrSI12))\n-GLOBAL(movstrSI12):\n+\t.global\tGLOBAL(movmemSI12)\n+\tFUNC(GLOBAL(movmemSI12))\n+GLOBAL(movmemSI12):\n \tmov.l\t@(8,r5),r0\n \tmov.l\tr0,@(8,r4)\n-\t.global\tGLOBAL(movstrSI8)\n-\tFUNC(GLOBAL(movstrSI8))\n-GLOBAL(movstrSI8):\n+\t.global\tGLOBAL(movmemSI8)\n+\tFUNC(GLOBAL(movmemSI8))\n+GLOBAL(movmemSI8):\n \tmov.l\t@(4,r5),r0\n \tmov.l\tr0,@(4,r4)\n-\t.global\tGLOBAL(movstrSI4)\n-\tFUNC(GLOBAL(movstrSI4))\n-GLOBAL(movstrSI4):\n+\t.global\tGLOBAL(movmemSI4)\n+\tFUNC(GLOBAL(movmemSI4))\n+GLOBAL(movmemSI4):\n \tmov.l\t@(0,r5),r0\n \tmov.l\tr0,@(0,r4)\n-\t.global\tGLOBAL(movstrSI0)\n-\tFUNC(GLOBAL(movstrSI0))\n-GLOBAL(movstrSI0):\n+\t.global\tGLOBAL(movmemSI0)\n+\tFUNC(GLOBAL(movmemSI0))\n+GLOBAL(movmemSI0):\n \trts\n \tnop\n \n-\tENDFUNC(GLOBAL(movstrSI64))\n-\tENDFUNC(GLOBAL(movstrSI60))\n-\tENDFUNC(GLOBAL(movstrSI56))\n-\tENDFUNC(GLOBAL(movstrSI52))\n-\tENDFUNC(GLOBAL(movstrSI48))\n-\tENDFUNC(GLOBAL(movstrSI44))\n-\tENDFUNC(GLOBAL(movstrSI40))\n-\tENDFUNC(GLOBAL(movstrSI36))\n-\tENDFUNC(GLOBAL(movstrSI32))\n-\tENDFUNC(GLOBAL(movstrSI28))\n-\tENDFUNC(GLOBAL(movstrSI24))\n-\tENDFUNC(GLOBAL(movstrSI20))\n-\tENDFUNC(GLOBAL(movstrSI16))\n-\tENDFUNC(GLOBAL(movstrSI12))\n-\tENDFUNC(GLOBAL(movstrSI8))\n-\tENDFUNC(GLOBAL(movstrSI4))\n-\tENDFUNC(GLOBAL(movstrSI0))\n+\tENDFUNC(GLOBAL(movmemSI64))\n+\tENDFUNC(GLOBAL(movmemSI60))\n+\tENDFUNC(GLOBAL(movmemSI56))\n+\tENDFUNC(GLOBAL(movmemSI52))\n+\tENDFUNC(GLOBAL(movmemSI48))\n+\tENDFUNC(GLOBAL(movmemSI44))\n+\tENDFUNC(GLOBAL(movmemSI40))\n+\tENDFUNC(GLOBAL(movmemSI36))\n+\tENDFUNC(GLOBAL(movmemSI32))\n+\tENDFUNC(GLOBAL(movmemSI28))\n+\tENDFUNC(GLOBAL(movmemSI24))\n+\tENDFUNC(GLOBAL(movmemSI20))\n+\tENDFUNC(GLOBAL(movmemSI16))\n+\tENDFUNC(GLOBAL(movmemSI12))\n+\tENDFUNC(GLOBAL(movmemSI8))\n+\tENDFUNC(GLOBAL(movmemSI4))\n+\tENDFUNC(GLOBAL(movmemSI0))\n \n \t.align\t4\n \n-\t.global\tGLOBAL(movstr)\n-\tFUNC(GLOBAL(movstr))\n-GLOBAL(movstr):\n+\t.global\tGLOBAL(movmem)\n+\tFUNC(GLOBAL(movmem))\n+GLOBAL(movmem):\n \tmov.l\t@(60,r5),r0\n \tmov.l\tr0,@(60,r4)\n \n@@ -885,66 +885,66 @@ GLOBAL(movstr):\n \tbf\tdone\n \n \tadd\t#64,r5\n-\tbra\tGLOBAL(movstr)\n+\tbra\tGLOBAL(movmem)\n \tadd\t#64,r4\n \n-\tFUNC(GLOBAL(movstr))\n+\tFUNC(GLOBAL(movmem))\n #endif\n \n-#ifdef L_movstr_i4\n+#ifdef L_movmem_i4\n \t.text\n-\t.global\tGLOBAL(movstr_i4_even)\n-\t.global\tGLOBAL(movstr_i4_odd)\n-\t.global\tGLOBAL(movstrSI12_i4)\n+\t.global\tGLOBAL(movmem_i4_even)\n+\t.global\tGLOBAL(movmem_i4_odd)\n+\t.global\tGLOBAL(movmemSI12_i4)\n \n-\tFUNC(GLOBAL(movstr_i4_even))\n-\tFUNC(GLOBAL(movstr_i4_odd))\n-\tFUNC(GLOBAL(movstrSI12_i4))\n+\tFUNC(GLOBAL(movmem_i4_even))\n+\tFUNC(GLOBAL(movmem_i4_odd))\n+\tFUNC(GLOBAL(movmemSI12_i4))\n \n \t.p2align\t5\n-L_movstr_2mod4_end:\n+L_movmem_2mod4_end:\n \tmov.l\tr0,@(16,r4)\n \trts\n \tmov.l\tr1,@(20,r4)\n \n \t.p2align\t2\n \n-GLOBAL(movstr_i4_even):\n+GLOBAL(movmem_i4_even):\n \tmov.l\t@r5+,r0\n-\tbra\tL_movstr_start_even\n+\tbra\tL_movmem_start_even\n \tmov.l\t@r5+,r1\n \n-GLOBAL(movstr_i4_odd):\n+GLOBAL(movmem_i4_odd):\n \tmov.l\t@r5+,r1\n \tadd\t#-4,r4\n \tmov.l\t@r5+,r2\n \tmov.l\t@r5+,r3\n \tmov.l\tr1,@(4,r4)\n \tmov.l\tr2,@(8,r4)\n \n-L_movstr_loop:\n+L_movmem_loop:\n \tmov.l\tr3,@(12,r4)\n \tdt\tr6\n \tmov.l\t@r5+,r0\n-\tbt/s\tL_movstr_2mod4_end\n+\tbt/s\tL_movmem_2mod4_end\n \tmov.l\t@r5+,r1\n \tadd\t#16,r4\n-L_movstr_start_even:\n+L_movmem_start_even:\n \tmov.l\t@r5+,r2\n \tmov.l\t@r5+,r3\n \tmov.l\tr0,@r4\n \tdt\tr6\n \tmov.l\tr1,@(4,r4)\n-\tbf/s\tL_movstr_loop\n+\tbf/s\tL_movmem_loop\n \tmov.l\tr2,@(8,r4)\n \trts\n \tmov.l\tr3,@(12,r4)\n \n-\tENDFUNC(GLOBAL(movstr_i4_even))\n-\tENDFUNC(GLOBAL(movstr_i4_odd))\n+\tENDFUNC(GLOBAL(movmem_i4_even))\n+\tENDFUNC(GLOBAL(movmem_i4_odd))\n \n \t.p2align\t4\n-GLOBAL(movstrSI12_i4):\n+GLOBAL(movmemSI12_i4):\n \tmov.l\t@r5,r0\n \tmov.l\t@(4,r5),r1\n \tmov.l\t@(8,r5),r2\n@@ -953,7 +953,7 @@ GLOBAL(movstrSI12_i4):\n \trts\n \tmov.l\tr2,@(8,r4)\n \n-\tENDFUNC(GLOBAL(movstrSI12_i4))\n+\tENDFUNC(GLOBAL(movmemSI12_i4))\n #endif\n \n #ifdef L_mulsi3"}, {"sha": "d6cf8c33c79a0427aa822eb3da0b1deca5390e98", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -771,7 +771,7 @@ expand_block_move (rtx *operands)\n \t  rtx r4 = gen_rtx_REG (SImode, 4);\n \t  rtx r5 = gen_rtx_REG (SImode, 5);\n \n-\t  entry_name = get_identifier (\"__movstrSI12_i4\");\n+\t  entry_name = get_identifier (\"__movmemSI12_i4\");\n \n \t  sym = function_symbol (IDENTIFIER_POINTER (entry_name));\n \t  func_addr_rtx = copy_to_mode_reg (Pmode, sym);\n@@ -791,8 +791,8 @@ expand_block_move (rtx *operands)\n \t  rtx r6 = gen_rtx_REG (SImode, 6);\n \n \t  entry_name = get_identifier (bytes & 4\n-\t\t\t\t       ? \"__movstr_i4_odd\"\n-\t\t\t\t       : \"__movstr_i4_even\");\n+\t\t\t\t       ? \"__movmem_i4_odd\"\n+\t\t\t\t       : \"__movmem_i4_even\");\n \t  sym = function_symbol (IDENTIFIER_POINTER (entry_name));\n \t  func_addr_rtx = copy_to_mode_reg (Pmode, sym);\n \t  force_into (XEXP (operands[0], 0), r4);\n@@ -815,7 +815,7 @@ expand_block_move (rtx *operands)\n       rtx r4 = gen_rtx_REG (SImode, 4);\n       rtx r5 = gen_rtx_REG (SImode, 5);\n \n-      sprintf (entry, \"__movstrSI%d\", bytes);\n+      sprintf (entry, \"__movmemSI%d\", bytes);\n       entry_name = get_identifier (entry);\n       sym = function_symbol (IDENTIFIER_POINTER (entry_name));\n       func_addr_rtx = copy_to_mode_reg (Pmode, sym);\n@@ -837,7 +837,7 @@ expand_block_move (rtx *operands)\n       rtx r5 = gen_rtx_REG (SImode, 5);\n       rtx r6 = gen_rtx_REG (SImode, 6);\n \n-      entry_name = get_identifier (\"__movstr\");\n+      entry_name = get_identifier (\"__movmem\");\n       sym = function_symbol (IDENTIFIER_POINTER (entry_name));\n       func_addr_rtx = copy_to_mode_reg (Pmode, sym);\n       force_into (XEXP (operands[0], 0), r4);"}, {"sha": "531db46bc84acfb804ad14d17006f831e1b2e7e7", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -8088,7 +8088,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n ;; String/block move insn.\n \n-(define_expand \"movstrsi\"\n+(define_expand \"movmemsi\"\n   [(parallel [(set (mem:BLK (match_operand:BLK 0 \"\" \"\"))\n \t\t   (mem:BLK (match_operand:BLK 1 \"\" \"\")))\n \t      (use (match_operand:SI 2 \"nonmemory_operand\" \"\"))"}, {"sha": "8e262fa7e0049a4700c86ede2bc863b9f3e23e7a", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1,6 +1,6 @@\n LIB1ASMSRC = sh/lib1funcs.asm\n-LIB1ASMFUNCS = _ashiftrt _ashiftrt_n _ashiftlt _lshiftrt _movstr \\\n-  _movstr_i4 _mulsi3 _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr \\\n+LIB1ASMFUNCS = _ashiftrt _ashiftrt_n _ashiftlt _lshiftrt _movmem \\\n+  _movmem_i4 _mulsi3 _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr \\\n   $(LIB1ASMFUNCS_CACHE)\n \n # We want fine grained libraries, so use the new code to build the"}, {"sha": "375f65f06d3168bdfada58d9a0ed07f3e6e3c41c", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -2176,7 +2176,7 @@ do {                                                                    \\\n #define MOVE_MAX 8\n \n /* If a memory-to-memory move would take MOVE_RATIO or more simple\n-   move-instruction pairs, we will do a movstr or libcall instead.  */\n+   move-instruction pairs, we will do a movmem or libcall instead.  */\n \n #define MOVE_RATIO (optimize_size ? 3 : 8)\n "}, {"sha": "5e1e61af3f59623b19901c0f2c03f36e13ae99b4", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -298,23 +298,23 @@\n }\")\n \n ;; This is here to accept 4 arguments and pass the first 3 along\n-;; to the movstrhi1 pattern that really does the work.\n-(define_expand \"movstrhi\"\n+;; to the movmemhi1 pattern that really does the work.\n+(define_expand \"movmemhi\"\n   [(set (match_operand:BLK 0 \"general_operand\" \"=g\")\n \t(match_operand:BLK 1 \"general_operand\" \"g\"))\n    (use (match_operand:HI 2 \"general_operand\" \"g\"))\n    (match_operand 3 \"\" \"\")]\n   \"\"\n   \"\n-  emit_insn (gen_movstrhi1 (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_movmemhi1 (operands[0], operands[1], operands[2]));\n   DONE;\n \")\n \n ;; The definition of this insn does not really explain what it does,\n ;; but it should suffice\n ;; that anything generated as this insn will be recognized as one\n ;; and that it won't successfully combine with anything.\n-(define_insn \"movstrhi1\"\n+(define_insn \"movmemhi1\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n \t(match_operand:BLK 1 \"memory_operand\" \"m\"))\n    (use (match_operand:HI 2 \"general_operand\" \"g\"))"}, {"sha": "4f4334a6dbba01c869e44bb7cee375e9b4b87916", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1464,7 +1464,7 @@ xtensa_expand_block_move (rtx *operands)\n   operands[0] = validize_mem (dest);\n   operands[1] = validize_mem (src);\n \n-  emit_insn (gen_movstrsi_internal (operands[0], operands[1],\n+  emit_insn (gen_movmemsi_internal (operands[0], operands[1],\n \t\t\t\t    operands[2], operands[3]));\n   return 1;\n }"}, {"sha": "a5421f04a12a1243be749c71fd8b0e5477684991", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1057,7 +1057,7 @@\n \n ;; Block moves\n \n-(define_expand \"movstrsi\"\n+(define_expand \"movmemsi\"\n   [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n \t\t   (match_operand:BLK 1 \"\" \"\"))\n \t      (use (match_operand:SI 2 \"arith_operand\" \"\"))\n@@ -1069,7 +1069,7 @@\n   DONE;\n })\n \n-(define_insn \"movstrsi_internal\"\n+(define_insn \"movmemsi_internal\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=U\")\n \t(match_operand:BLK 1 \"memory_operand\" \"U\"))\n    (use (match_operand:SI 2 \"arith_operand\" \"\"))"}, {"sha": "ca7e12efb00bb821ae4a5742ea75c541cc571f44", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -9603,12 +9603,12 @@ Generate code for a PDP-11/10.\n \n @item -mbcopy-builtin\n @opindex bcopy-builtin\n-Use inline @code{movstrhi} patterns for copying memory.  This is the\n+Use inline @code{movmemhi} patterns for copying memory.  This is the\n default.\n \n @item -mbcopy\n @opindex mbcopy\n-Do not use inline @code{movstrhi} patterns for copying memory.\n+Do not use inline @code{movmemhi} patterns for copying memory.\n \n @item -mint16\n @itemx -mno-int32"}, {"sha": "cbb581bcf624cc082306df9cd6af944a8a439944", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -2776,8 +2776,8 @@ not use @code{(cc0)}.  Doing so would confuse the optimizer since it\n would no longer be clear which @code{set} operations were comparisons.\n The @samp{cmp@var{m}} patterns should be used instead.\n \n-@cindex @code{movstr@var{m}} instruction pattern\n-@item @samp{movstr@var{m}}\n+@cindex @code{movmem@var{m}} instruction pattern\n+@item @samp{movmem@var{m}}\n Block move instruction.  The addresses of the destination and source\n strings are the first two operands, and both are in mode @code{Pmode}.\n \n@@ -2794,34 +2794,34 @@ destination, in the form of a @code{const_int} rtx.  Thus, if the\n compiler knows that both source and destination are word-aligned,\n it may provide the value 4 for this operand.\n \n-Descriptions of multiple @code{movstr@var{m}} patterns can only be\n+Descriptions of multiple @code{movmem@var{m}} patterns can only be\n beneficial if the patterns for smaller modes have fewer restrictions\n on their first, second and fourth operands.  Note that the mode @var{m}\n-in @code{movstr@var{m}} does not impose any restriction on the mode of\n+in @code{movmem@var{m}} does not impose any restriction on the mode of\n individually moved data units in the block.\n \n These patterns need not give special consideration to the possibility\n that the source and destination strings might overlap.\n \n-@cindex @code{clrstr@var{m}} instruction pattern\n-@item @samp{clrstr@var{m}}\n+@cindex @code{clrmem@var{m}} instruction pattern\n+@item @samp{clrmem@var{m}}\n Block clear instruction.  The addresses of the destination string is the\n first operand, in mode @code{Pmode}.  The number of bytes to clear is\n-the second operand, in mode @var{m}.  See @samp{movstr@var{m}} for\n+the second operand, in mode @var{m}.  See @samp{movmem@var{m}} for\n a discussion of the choice of mode.\n \n The third operand is the known alignment of the destination, in the form\n of a @code{const_int} rtx.  Thus, if the compiler knows that the\n destination is word-aligned, it may provide the value 4 for this\n operand.\n \n-The use for multiple @code{clrstr@var{m}} is as for @code{movstr@var{m}}.\n+The use for multiple @code{clrmem@var{m}} is as for @code{movmem@var{m}}.\n \n @cindex @code{cmpstr@var{m}} instruction pattern\n @item @samp{cmpstr@var{m}}\n String compare instruction, with five operands.  Operand 0 is the output;\n it has mode @var{m}.  The remaining four operands are like the operands\n-of @samp{movstr@var{m}}.  The two memory blocks specified are compared\n+of @samp{movmem@var{m}}.  The two memory blocks specified are compared\n byte by byte in lexicographic order starting at the beginning of each\n string.  The instruction is not allowed to prefetch more than one byte\n at a time since either string may end in the first byte and reading past"}, {"sha": "422f6d6d5e7bfc20a4f883638978201c1e504052", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -2550,7 +2550,7 @@ that the register is live.  You should think twice before adding\n instead.  The @code{use} RTX is most commonly useful to describe that\n a fixed register is implicitly used in an insn.  It is also safe to use\n in patterns where the compiler knows for other reasons that the result\n-of the whole pattern is variable, such as @samp{movstr@var{m}} or\n+of the whole pattern is variable, such as @samp{movmem@var{m}} or\n @samp{call} patterns.\n \n During the reload phase, an insn that has a @code{use} as pattern"}, {"sha": "8f03a69a5844a18aa402254167a57e23f9bc8346", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -125,7 +125,7 @@ static unsigned HOST_WIDE_INT move_by_pieces_ninsns (unsigned HOST_WIDE_INT,\n static void move_by_pieces_1 (rtx (*) (rtx, ...), enum machine_mode,\n \t\t\t      struct move_by_pieces *);\n static bool block_move_libcall_safe_for_call_parm (void);\n-static bool emit_block_move_via_movstr (rtx, rtx, rtx, unsigned);\n+static bool emit_block_move_via_movmem (rtx, rtx, rtx, unsigned);\n static rtx emit_block_move_via_libcall (rtx, rtx, rtx);\n static tree emit_block_move_libcall_fn (int);\n static void emit_block_move_via_loop (rtx, rtx, rtx, unsigned);\n@@ -134,7 +134,7 @@ static void clear_by_pieces (rtx, unsigned HOST_WIDE_INT, unsigned int);\n static void store_by_pieces_1 (struct store_by_pieces *, unsigned int);\n static void store_by_pieces_2 (rtx (*) (rtx, ...), enum machine_mode,\n \t\t\t       struct store_by_pieces *);\n-static bool clear_storage_via_clrstr (rtx, rtx, unsigned);\n+static bool clear_storage_via_clrmem (rtx, rtx, unsigned);\n static rtx clear_storage_via_libcall (rtx, rtx);\n static tree clear_storage_libcall_fn (int);\n static rtx compress_float_constant (rtx, rtx);\n@@ -194,10 +194,10 @@ static bool float_extend_from_mem[NUM_MACHINE_MODES][NUM_MACHINE_MODES];\n #endif\n \n /* This array records the insn_code of insns to perform block moves.  */\n-enum insn_code movstr_optab[NUM_MACHINE_MODES];\n+enum insn_code movmem_optab[NUM_MACHINE_MODES];\n \n /* This array records the insn_code of insns to perform block clears.  */\n-enum insn_code clrstr_optab[NUM_MACHINE_MODES];\n+enum insn_code clrmem_optab[NUM_MACHINE_MODES];\n \n /* These arrays record the insn_code of two different kinds of insns\n    to perform block compares.  */\n@@ -1372,7 +1372,7 @@ emit_block_move (rtx x, rtx y, rtx size, enum block_op_methods method)\n \n   if (GET_CODE (size) == CONST_INT && MOVE_BY_PIECES_P (INTVAL (size), align))\n     move_by_pieces (x, y, INTVAL (size), align, 0);\n-  else if (emit_block_move_via_movstr (x, y, size, align))\n+  else if (emit_block_move_via_movmem (x, y, size, align))\n     ;\n   else if (may_use_call)\n     retval = emit_block_move_via_libcall (x, y, size);\n@@ -1434,11 +1434,11 @@ block_move_libcall_safe_for_call_parm (void)\n   return true;\n }\n \n-/* A subroutine of emit_block_move.  Expand a movstr pattern;\n+/* A subroutine of emit_block_move.  Expand a movmem pattern;\n    return true if successful.  */\n \n static bool\n-emit_block_move_via_movstr (rtx x, rtx y, rtx size, unsigned int align)\n+emit_block_move_via_movmem (rtx x, rtx y, rtx size, unsigned int align)\n {\n   rtx opalign = GEN_INT (align / BITS_PER_UNIT);\n   int save_volatile_ok = volatile_ok;\n@@ -1454,7 +1454,7 @@ emit_block_move_via_movstr (rtx x, rtx y, rtx size, unsigned int align)\n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT); mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n     {\n-      enum insn_code code = movstr_optab[(int) mode];\n+      enum insn_code code = movmem_optab[(int) mode];\n       insn_operand_predicate_fn pred;\n \n       if (code != CODE_FOR_nothing\n@@ -2543,7 +2543,7 @@ clear_storage (rtx object, rtx size)\n       else if (GET_CODE (size) == CONST_INT\n \t  && CLEAR_BY_PIECES_P (INTVAL (size), align))\n \tclear_by_pieces (object, INTVAL (size), align);\n-      else if (clear_storage_via_clrstr (object, size, align))\n+      else if (clear_storage_via_clrmem (object, size, align))\n \t;\n       else\n \tretval = clear_storage_via_libcall (object, size);\n@@ -2552,11 +2552,11 @@ clear_storage (rtx object, rtx size)\n   return retval;\n }\n \n-/* A subroutine of clear_storage.  Expand a clrstr pattern;\n+/* A subroutine of clear_storage.  Expand a clrmem pattern;\n    return true if successful.  */\n \n static bool\n-clear_storage_via_clrstr (rtx object, rtx size, unsigned int align)\n+clear_storage_via_clrmem (rtx object, rtx size, unsigned int align)\n {\n   /* Try the most limited insn first, because there's no point\n      including more than one in the machine description unless\n@@ -2568,7 +2568,7 @@ clear_storage_via_clrstr (rtx object, rtx size, unsigned int align)\n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT); mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n     {\n-      enum insn_code code = clrstr_optab[(int) mode];\n+      enum insn_code code = clrmem_optab[(int) mode];\n       insn_operand_predicate_fn pred;\n \n       if (code != CODE_FOR_nothing"}, {"sha": "9bfef9381c97fab4ce5e548f8f08453db1c56f5b", "filename": "gcc/expr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -82,10 +82,10 @@ enum expand_modifier {EXPAND_NORMAL = 0, EXPAND_STACK_PARM = 2, EXPAND_SUM,\n #define OK_DEFER_POP (inhibit_defer_pop -= 1)\n \f\n /* If a memory-to-memory move would take MOVE_RATIO or more simple\n-   move-instruction sequences, we will do a movstr or libcall instead.  */\n+   move-instruction sequences, we will do a movmem or libcall instead.  */\n \n #ifndef MOVE_RATIO\n-#if defined (HAVE_movstrqi) || defined (HAVE_movstrhi) || defined (HAVE_movstrsi) || defined (HAVE_movstrdi) || defined (HAVE_movstrti)\n+#if defined (HAVE_movmemqi) || defined (HAVE_movmemhi) || defined (HAVE_movmemsi) || defined (HAVE_movmemdi) || defined (HAVE_movmemti)\n #define MOVE_RATIO 2\n #else\n /* If we are optimizing for space (-Os), cut down the default move ratio.  */\n@@ -94,10 +94,10 @@ enum expand_modifier {EXPAND_NORMAL = 0, EXPAND_STACK_PARM = 2, EXPAND_SUM,\n #endif\n \n /* If a clear memory operation would take CLEAR_RATIO or more simple\n-   move-instruction sequences, we will do a clrstr or libcall instead.  */\n+   move-instruction sequences, we will do a clrmem or libcall instead.  */\n \n #ifndef CLEAR_RATIO\n-#if defined (HAVE_clrstrqi) || defined (HAVE_clrstrhi) || defined (HAVE_clrstrsi) || defined (HAVE_clrstrdi) || defined (HAVE_clrstrti)\n+#if defined (HAVE_clrmemqi) || defined (HAVE_clrmemhi) || defined (HAVE_clrmemsi) || defined (HAVE_clrmemdi) || defined (HAVE_clrmemti)\n #define CLEAR_RATIO 2\n #else\n /* If we are optimizing for space, cut down the default clear ratio.  */"}, {"sha": "b3d574087979d6ebb81909cc044d7f36e935853e", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -162,8 +162,8 @@ static const char * const optabs[] =\n   \"push_optab->handlers[$A].insn_code = CODE_FOR_$(push$a1$)\",\n   \"reload_in_optab[$A] = CODE_FOR_$(reload_in$a$)\",\n   \"reload_out_optab[$A] = CODE_FOR_$(reload_out$a$)\",\n-  \"movstr_optab[$A] = CODE_FOR_$(movstr$a$)\",\n-  \"clrstr_optab[$A] = CODE_FOR_$(clrstr$a$)\",\n+  \"movmem_optab[$A] = CODE_FOR_$(movmem$a$)\",\n+  \"clrmem_optab[$A] = CODE_FOR_$(clrmem$a$)\",\n   \"cmpstr_optab[$A] = CODE_FOR_$(cmpstr$a$)\",\n   \"cmpmem_optab[$A] = CODE_FOR_$(cmpmem$a$)\",\n   \"vec_set_optab->handlers[$A].insn_code = CODE_FOR_$(vec_set$a$)\","}, {"sha": "9d4379a6b90e05ae10fe06c7f879f13751e5bd4a", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -367,7 +367,7 @@ copy_rtx_and_substitute (rtx orig, struct inline_remap *map, int for_lhs)\n     case CLOBBER:\n       /* USE and CLOBBER are ordinary, but we convert (use (subreg foo))\n \t to (use foo) if the original insn didn't have a subreg.\n-\t Removing the subreg distorts the VAX movstrhi pattern\n+\t Removing the subreg distorts the VAX movmemhi pattern\n \t by changing the mode of an operand.  */\n       copy = copy_rtx_and_substitute (XEXP (orig, 0), map, code == CLOBBER);\n       if (GET_CODE (copy) == SUBREG && GET_CODE (XEXP (orig, 0)) != SUBREG)"}, {"sha": "0718f9ed3dfabee0785a2dc510fb11b7d83d84d5", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1724,7 +1724,7 @@ qty_sugg_compare_1 (const void *q1p, const void *q2p)\n    We don't actually combine a hard reg with a pseudo; instead\n    we just record the hard reg as the suggestion for the pseudo's quantity.\n    If we really combined them, we could lose if the pseudo lives\n-   across an insn that clobbers the hard reg (eg, movstr).\n+   across an insn that clobbers the hard reg (eg, movmem).\n \n    ALREADY_DEAD is nonzero if USEDREG is known to be dead even though\n    there is no REG_DEAD note on INSN.  This occurs during the processing"}, {"sha": "80b93e594ebb5b844fd33d086ae2afd08e30a4b2", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -5422,8 +5422,8 @@ init_optabs (void)\n \n   for (i = 0; i < NUM_MACHINE_MODES; i++)\n     {\n-      movstr_optab[i] = CODE_FOR_nothing;\n-      clrstr_optab[i] = CODE_FOR_nothing;\n+      movmem_optab[i] = CODE_FOR_nothing;\n+      clrmem_optab[i] = CODE_FOR_nothing;\n       cmpstr_optab[i] = CODE_FOR_nothing;\n       cmpmem_optab[i] = CODE_FOR_nothing;\n "}, {"sha": "064d753269d49fefe8a89de4a300c897698c0d64", "filename": "gcc/optabs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -391,10 +391,10 @@ extern enum insn_code movcc_gen_code[NUM_MACHINE_MODES];\n #endif\n \n /* This array records the insn_code of insns to perform block moves.  */\n-extern enum insn_code movstr_optab[NUM_MACHINE_MODES];\n+extern enum insn_code movmem_optab[NUM_MACHINE_MODES];\n \n /* This array records the insn_code of insns to perform block clears.  */\n-extern enum insn_code clrstr_optab[NUM_MACHINE_MODES];\n+extern enum insn_code clrmem_optab[NUM_MACHINE_MODES];\n \n /* These arrays record the insn_code of two different kinds of insns\n    to perform block compares.  */"}, {"sha": "f1c29da3f5cd1d276ab9d8b2639f399a4ce42a7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -1,3 +1,8 @@\n+2004-07-07  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcc.c-torture/execute/builtins/mempcpy-2.c: Rename movstr*,\n+\texcept for movstrict*, to movmem* and clrstr* to clrmem*.\n+\n 2004-07-07  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.c-torture/execute/20040707-1.c: New test."}, {"sha": "3b7767acb3224e4be25429894fb8908c8f6fdce5", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/mempcpy-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70128ad9f6972054d3be944931f848f5fe2af4f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy-2.c?ref=70128ad9f6972054d3be944931f848f5fe2af4f4", "patch": "@@ -68,7 +68,7 @@ test (long *buf3, char *buf4, char *buf6, int n)\n \n   __builtin_memcpy (buf3, \"aBcdEFghijklmnopq\\0\", 19);\n \n-  /* These should be handled either by movstrendM or mempcpy\n+  /* These should be handled either by movmemendM or mempcpy\n      call.  */\n   if (mempcpy ((char *) buf3 + 4, buf5, n + 6) != (char *) buf1 + 10\n       || memcmp (buf1, \"aBcdRSTUVWklmnopq\\0\", 19))\n@@ -125,7 +125,7 @@ test (long *buf3, char *buf4, char *buf6, int n)\n \n   __builtin_memcpy (buf4, \"aBcdEFghijklmnopq\\0\", 19);\n \n-  /* These should be handled either by movstrendM or mempcpy\n+  /* These should be handled either by movmemendM or mempcpy\n      call.  */\n   if (mempcpy (buf4 + 4, buf7, n + 6) != buf2 + 10\n       || memcmp (buf2, \"aBcdRSTUVWklmnopq\\0\", 19))"}]}