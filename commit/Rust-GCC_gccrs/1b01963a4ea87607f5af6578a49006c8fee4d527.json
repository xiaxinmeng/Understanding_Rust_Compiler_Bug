{"sha": "1b01963a4ea87607f5af6578a49006c8fee4d527", "node_id": "C_kwDOANBUbNoAKDFiMDE5NjNhNGVhODc2MDdmNWFmNjU3OGE0OTAwNmM4ZmVlNGQ1Mjc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-12T11:16:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-13T12:32:22Z"}, "message": "libstdc++: Improve doxygen docs for <regex>\n\nAdd @headerfile and @since tags. Improve grouping of non-member\nfunctions via @relates tags.\n\nMark the std::pair base class of std::sub_match as undocumented, so that\nthe docs don't show all the related non-member functions are part of the\nsub_match API. Use a new macro to re-add the data members for Doxygen\nonly.\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/doxygen/user.cfg.in (PREDEFINED): Define macro\n\t_GLIBCXX_DOXYGEN_ONLY to expand its argument.\n\t* include/bits/c++config (_GLIBCXX_DOXYGEN_ONLY): Define.\n\t* include/bits/regex.h: Improve doxygen docs.\n\t* include/bits/regex_constants.h: Likewise.\n\t* include/bits/regex_error.h: Likewise.", "tree": {"sha": "a68a15d0e2fef4a965b3e71d7507a19248bb760a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a68a15d0e2fef4a965b3e71d7507a19248bb760a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b01963a4ea87607f5af6578a49006c8fee4d527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b01963a4ea87607f5af6578a49006c8fee4d527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b01963a4ea87607f5af6578a49006c8fee4d527", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b01963a4ea87607f5af6578a49006c8fee4d527/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1566ca0969ac4a14f7434d710e75dd89da303e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1566ca0969ac4a14f7434d710e75dd89da303e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1566ca0969ac4a14f7434d710e75dd89da303e75"}], "stats": {"total": 76, "additions": 66, "deletions": 10}, "files": [{"sha": "02ce290d3adae0b745dc9b9df04de5b00d1888bd", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b01963a4ea87607f5af6578a49006c8fee4d527/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b01963a4ea87607f5af6578a49006c8fee4d527/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=1b01963a4ea87607f5af6578a49006c8fee4d527", "patch": "@@ -2404,6 +2404,7 @@ PREDEFINED             = __cplusplus=202002L \\\n                          _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE \\\n                          _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED \\\n                          _GLIBCXX_HAVE_BUILTIN_LAUNDER \\\n+\t\t\t \"_GLIBCXX_DOXYGEN_ONLY(X)=X \" \\\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n # tag can be used to specify a list of macro names that should be expanded. The"}, {"sha": "191880fb99d8980ee160e6d90a0156db28015430", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b01963a4ea87607f5af6578a49006c8fee4d527/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b01963a4ea87607f5af6578a49006c8fee4d527/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=1b01963a4ea87607f5af6578a49006c8fee4d527", "patch": "@@ -823,6 +823,9 @@ namespace std\n \n #undef _GLIBCXX_HAS_BUILTIN\n \n+// Mark code that should be ignored by the compiler, but seen by Doxygen.\n+#define _GLIBCXX_DOXYGEN_ONLY(X)\n+\n // PSTL configuration\n \n #if __cplusplus >= 201703L"}, {"sha": "24298e35e2ca748b4db1efa86e5d9961d8a56c49", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b01963a4ea87607f5af6578a49006c8fee4d527/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b01963a4ea87607f5af6578a49006c8fee4d527/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=1b01963a4ea87607f5af6578a49006c8fee4d527", "patch": "@@ -84,6 +84,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n    * The class %regex is parameterized around a set of related types and\n    * functions used to complete the definition of its semantics.  This class\n    * satisfies the requirements of such a traits class.\n+   *\n+   * @headerfile regex\n+   * @since C++11\n    */\n   template<typename _Ch_type>\n     class regex_traits\n@@ -388,11 +391,24 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   // [7.8] Class basic_regex\n   /**\n-   * Objects of specializations of this class represent regular expressions\n-   * constructed from sequences of character type @p _Ch_type.\n+   * @brief A regular expression\n+   *\n+   * Specializations of this class template represent regular expressions\n+   * constructed from sequences of character type `_Ch_type`.\n+   * Use the `std::regex` typedef for `std::basic_regex<char>`.\n+   *\n+   * A character sequence passed to the constructor will be parsed according\n+   * to the chosen grammar, and used to create a state machine representing\n+   * the regular expression. The regex object can then be passed to algorithms\n+   * such as `std::regex_match` to match sequences of characters.\n+   *\n+   * The `syntax_option_type` flag passed to the constructor selects from\n+   * one of the supported regular expression grammars. The default is\n+   * `ECMAScript` and the others are `basic`, `extended`, `awk`, `grep`, and\n+   * `egrep`, which are variations on POSIX regular expressions.\n    *\n-   * Storage for the regular expression is allocated and deallocated as\n-   * necessary by the member functions of this class.\n+   * @headerfile regex\n+   * @since C++11\n    */\n   template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>>\n     class basic_regex\n@@ -885,14 +901,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n    * An object of this class is essentially a pair of iterators marking a\n    * matched subexpression within a regular expression pattern match. Such\n    * objects can be converted to and compared with std::basic_string objects\n-   * of a similar base character type as the pattern matched by the regular\n+   * of the same character type as the pattern matched by the regular\n    * expression.\n    *\n+   * A `sub_match<Iter>` has a public base class of type `pair<Iter, Iter>`,\n+   * so inherits pair's data members named `first` and `second`.\n    * The iterators that make up the pair are the usual half-open interval\n    * referencing the actual original pattern matched.\n+   *\n+   * @headerfile regex\n+   * @since C++11\n    */\n   template<typename _BiIter>\n-    class sub_match : public std::pair<_BiIter, _BiIter>\n+    class sub_match\n+    /// @cond undocumented\n+    : public std::pair<_BiIter, _BiIter>\n+    /// @endcond\n     {\n       typedef iterator_traits<_BiIter>\t\t\t__iter_traits;\n \t\n@@ -902,6 +926,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       typedef _BiIter\t\t\t\t\titerator;\n       typedef basic_string<value_type>\t\t\tstring_type;\n \n+      _GLIBCXX_DOXYGEN_ONLY(iterator first; iterator second;)\n+\n       bool matched;\n \n       constexpr sub_match() noexcept : matched() { }\n@@ -1699,6 +1725,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n    * of characters [first, second) which formed that match. Otherwise matched\n    * is false, and members first and second point to the end of the sequence\n    * that was searched.\n+   *\n+   * @headerfile regex\n+   * @since C++11\n    */\n   template<typename _Bi_iter,\n \t   typename _Alloc = allocator<sub_match<_Bi_iter> > >\n@@ -2125,6 +2154,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n    * @brief Compares two match_results for equality.\n    * @returns true if the two objects refer to the same match,\n    *          false otherwise.\n+   *\n+   * @relates match_results\n    */\n   template<typename _Bi_iter, typename _Alloc>\n     inline bool\n@@ -2150,6 +2181,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n    * @brief Compares two match_results for inequality.\n    * @returns true if the two objects do not refer to the same match,\n    *          false otherwise.\n+   *\n+   * @relates match_results\n    */\n   template<typename _Bi_iter, class _Alloc>\n     inline bool\n@@ -2165,6 +2198,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n    * @param __rhs A match result.\n    *\n    * The contents of the two match_results objects are swapped.\n+   *\n+   * @relates match_results\n    */\n   template<typename _Bi_iter, typename _Alloc>\n     inline void\n@@ -2177,8 +2212,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   // [28.11.2] Function template regex_match\n   /**\n    * @name Matching, Searching, and Replacing\n+   *\n+   * @{\n    */\n-  ///@{\n \n   /**\n    * @brief Determines if there is a match between the regular expression @p e\n@@ -2486,13 +2522,15 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \n   // std [28.11.4] Function template regex_replace\n \n+  /// @cond undocumented\n   template<typename _Out_iter, typename _Bi_iter,\n \t   typename _Rx_traits, typename _Ch_type>\n     _Out_iter\n     __regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,\n \t\t    const basic_regex<_Ch_type, _Rx_traits>& __e,\n \t\t    const _Ch_type* __fmt, size_t __len,\n \t\t    regex_constants::match_flag_type __flags);\n+  /// @endcond\n \n   /**\n    * @brief Search for a regular expression within a range for multiple times,\n@@ -2654,14 +2692,17 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       return __result;\n     }\n \n-  ///@}\n+  /// @}\n \n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   // std [28.12] Class template regex_iterator\n   /**\n    * An iterator adaptor that will provide repeated calls of regex_search over\n    * a range until no more matches remain.\n+   *\n+   * @headerfile regex\n+   * @since C++11\n    */\n   template<typename _Bi_iter,\n \t   typename _Ch_type = typename iterator_traits<_Bi_iter>::value_type,\n@@ -2779,6 +2820,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n    * The purpose of this iterator is to enumerate all, or all specified,\n    * matches of a regular expression within a text range.  The dereferenced\n    * value of an iterator of this class is a std::sub_match object.\n+   *\n+   * @headerfile regex\n+   * @since C++11\n    */\n   template<typename _Bi_iter,\n \t   typename _Ch_type = typename iterator_traits<_Bi_iter>::value_type,"}, {"sha": "c7e1d857b1f76d42c71c585817a91e43fc0844dd", "filename": "libstdc++-v3/include/bits/regex_constants.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b01963a4ea87607f5af6578a49006c8fee4d527/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b01963a4ea87607f5af6578a49006c8fee4d527/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h?ref=1b01963a4ea87607f5af6578a49006c8fee4d527", "patch": "@@ -1,4 +1,4 @@\n-// class template regex -*- C++ -*-\n+// Namespace std::regex_constants -*- C++ -*-\n \n // Copyright (C) 2010-2022 Free Software Foundation, Inc.\n //\n@@ -38,6 +38,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n  * @defgroup regex Regular Expressions\n  *\n  * A facility for performing regular expression pattern matching.\n+ *\n+ * @since C++11\n+ *\n  * @{\n  */\n "}, {"sha": "74a1428c2c777d8e891675f3e9d196f4feca0049", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b01963a4ea87607f5af6578a49006c8fee4d527/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b01963a4ea87607f5af6578a49006c8fee4d527/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=1b01963a4ea87607f5af6578a49006c8fee4d527", "patch": "@@ -1,4 +1,4 @@\n-// class template regex -*- C++ -*-\n+// Errors for std::regex -*- C++ -*-\n \n // Copyright (C) 2010-2022 Free Software Foundation, Inc.\n //\n@@ -130,6 +130,9 @@ namespace regex_constants\n    * @ingroup exceptions\n    *\n    * The regular expression library throws objects of this class on error.\n+   *\n+   * @headerfile regex\n+   * @since C++11\n    */\n   class regex_error : public std::runtime_error\n   {\n@@ -158,6 +161,7 @@ namespace regex_constants\n     { return _M_code; }\n \n   private:\n+    /// @cond undocumented\n     regex_error(error_type __ecode, const char* __what)\n     : std::runtime_error(__what), _M_code(__ecode)\n     { }\n@@ -167,6 +171,7 @@ namespace regex_constants\n     __throw_regex_error(error_type __ecode __attribute__((__unused__)),\n \t\t\tconst char* __what __attribute__((__unused__)))\n     { _GLIBCXX_THROW_OR_ABORT(regex_error(__ecode, __what)); }\n+    /// @endcond\n   };\n \n   /// @cond undocumented"}]}