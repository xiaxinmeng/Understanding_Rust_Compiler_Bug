{"sha": "c3224d6f70eefb9ca469de8385bc565b1298dbb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMyMjRkNmY3MGVlZmI5Y2E0NjlkZTgzODViYzU2NWIxMjk4ZGJiNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-09-17T09:04:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-09-17T09:04:14Z"}, "message": "common.opt (combine): Remove.\n\n2010-09-17  Richard Guenther  <rguenther@suse.de>\n\n\t* common.opt (combine): Remove.\n\t* gcc.c (default_compilers): Remove specs testing combine.\n\tThe C compilers no longer can combine.\n\t(option_map): Remove -combine.\n\t(display_help): Remove -combine.\n\t(driver_handle_option): Remove OPT_combine handling.\n\t(compile_input_file_p): Remove.\n\t(do_spec): Remove code concerning combine.\n\t(main): Likewise.\n\t* doc/invoke.texi: Remove traces of -combine.\n\t* lto-wrapper.c (run_gcc): Do not pass -combine to the compiler\n\tdriver.\n\n\tlto/\n\t* lang.opt (flag_wpa): Also enable for the driver.\n\n\t* gcc.dg/pr27898.c: Use -flto instead of -combine.\n\t* gcc.dg/pr28706.c: Likewise.\n\t* gcc.dg/pr28712.c: Likewise.\n\t* gcc.dg/pr30762-1.c: Likewise.\n\t* gcc.dg/pr30762-2.c: Likewise.\n\t* gcc.dg/pr31529-1.c: Likewise.\n\t* gcc.dg/pr31529-2.c: Likewise.\n\t* gcc.dg/pr34457-1.c: Likewise.\n\t* gcc.dg/pr34457-2.c: Likewise.\n\t* gcc.dg/pr34668-1.c: Likewise.\n\t* gcc.dg/pr34668-2.c: Likewise.\n\t* gcc.dg/pr34989-1.c: Likewise.\n\t* gcc.dg/pr34989-2.c: Likewise.\n\t* gcc.dg/pr43557-1.c: Likewise.\n\t* gcc.dg/pr43557-2.c: Likewise.\n\t* gcc.dg/debug/pr41893-1.c: Likewise.\n\t* gcc.dg/matrix/matrix.exp: Do not use -combine.\n\t* gcc.dg/matrix/matrix-3.c: Drop dg-options.\n\t* gcc.dg/matrix/matrix-4.c: Likewise.\n\t* gcc.dg/struct/struct-reorg.exp: Do not use -combine.\n\t* gcc.dg/struct/wo_prof_empty_str.c: Drop dg-options.\n\t* gcc.dg/struct/wo_prof_escape_arg_to_local.c: Likewise.\n\t* gcc.dg/struct/wo_prof_escape_return.c: Likewise.\n\nFrom-SVN: r164357", "tree": {"sha": "56001a875850aaa9cf554d9e9cad94194fc9a518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56001a875850aaa9cf554d9e9cad94194fc9a518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3224d6f70eefb9ca469de8385bc565b1298dbb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3224d6f70eefb9ca469de8385bc565b1298dbb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3224d6f70eefb9ca469de8385bc565b1298dbb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3224d6f70eefb9ca469de8385bc565b1298dbb5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbad82f59c66cf34d62a4d651736bb92b4b6a4f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbad82f59c66cf34d62a4d651736bb92b4b6a4f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbad82f59c66cf34d62a4d651736bb92b4b6a4f3"}], "stats": {"total": 248, "additions": 99, "deletions": 149}, "files": [{"sha": "50a1a03d03d5d7c250b07a4d1d14932e7a9184f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,3 +1,18 @@\n+2010-09-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* common.opt (combine): Remove.\n+\t* gcc.c (default_compilers): Remove specs testing combine.\n+\tThe C compilers no longer can combine.\n+\t(option_map): Remove -combine.\n+\t(display_help): Remove -combine.\n+\t(driver_handle_option): Remove OPT_combine handling.\n+\t(compile_input_file_p): Remove.\n+\t(do_spec): Remove code concerning combine.\n+\t(main): Likewise.\n+\t* doc/invoke.texi: Remove traces of -combine.\n+\t* lto-wrapper.c (run_gcc): Do not pass -combine to the compiler\n+\tdriver.\n+\n 2010-09-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/45678"}, {"sha": "3093ea54a936032bab383114b9e66911959e25e5", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -309,9 +309,6 @@ Common Separate RejectDriver\n auxbase-strip\n Common Separate RejectDriver\n \n-combine\n-Driver Var(combine_flag)\n-\n c\n Driver\n "}, {"sha": "4787a904da0db799889ff4d53c52d058fa064dc2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -161,7 +161,7 @@ in the following sections.\n @table @emph\n @item Overall Options\n @xref{Overall Options,,Options Controlling the Kind of Output}.\n-@gccoptlist{-c  -S  -E  -o @var{file}  -combine  -no-canonical-prefixes  @gol\n+@gccoptlist{-c  -S  -E  -o @var{file}  -no-canonical-prefixes  @gol\n -pipe  -pass-exit-codes  @gol\n -x @var{language}  -v  -###  --help@r{[}=@var{class}@r{[},@dots{}@r{]]}  --target-help  @gol\n --version -wrapper@@@var{file} -fplugin=@var{file} -fplugin-arg-@var{name}=@var{arg}  @gol\n@@ -1195,23 +1195,6 @@ various stages of compilation.  This fails to work on some systems where\n the assembler is unable to read from a pipe; but the GNU assembler has\n no trouble.\n \n-@item -combine\n-@opindex combine\n-If you are compiling multiple source files, this option tells the driver\n-to pass all the source files to the compiler at once (for those\n-languages for which the compiler can handle this).  This will allow\n-intermodule analysis (IMA) to be performed by the compiler.  Currently the only\n-language for which this is supported is C@.  If you pass source files for\n-multiple languages to the driver, using this option, the driver will invoke\n-the compiler(s) that support IMA once each, passing each compiler all the\n-source files appropriate for it.  For those languages that do not support\n-IMA this option will be ignored, and the compiler will be invoked once for\n-each source file in that language.  If you use this option in conjunction\n-with @option{-save-temps}, the compiler will generate multiple\n-pre-processed files\n-(one for each source file), but only one (combined) @file{.o} or\n-@file{.s} file.\n-\n @item --help\n @opindex help\n Print (on the standard output) a description of the command line options\n@@ -6757,7 +6740,7 @@ layout in order to better utilize spatial locality.  This transformation is\n affective for programs containing arrays of structures.  Available in two\n compilation modes: profile-based (enabled with @option{-fprofile-generate})\n or static (which uses built-in heuristics).  It works only in whole program\n-mode, so it requires @option{-fwhole-program} and @option{-combine} to be\n+mode, so it requires @option{-fwhole-program} to be\n enabled.  Structures considered @samp{cold} by this transformation are not\n affected (see @option{--param struct-reorg-cold-struct-ratio=@var{value}}).\n \n@@ -7462,7 +7445,7 @@ and those merged by attribute @code{externally_visible} become static functions\n and in effect are optimized more aggressively by interprocedural optimizers. If @command{gold} is used as the linker plugin, @code{externally_visible} attributes are automatically added to functions (not variable yet due to a current @command{gold} issue) that are accessed outside of LTO objects according to resolution file produced by @command{gold}.  For other linkers that cannot generate resolution file, explicit @code{externally_visible} attributes are still necessary.\n While this option is equivalent to proper use of the @code{static} keyword for\n programs consisting of a single file, in combination with option\n-@option{-combine}, @option{-flto} or @option{-fwhopr} this flag can be used to\n+@option{-flto} or @option{-fwhopr} this flag can be used to\n compile many smaller scale programs since the functions and variables become\n local for the whole combined compilation unit, not for the single source file\n itself."}, {"sha": "b459a928e34beec4ad79adab04419d9a274aa411", "filename": "gcc/gcc.c", "status": "modified", "additions": 14, "deletions": 87, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -959,28 +959,21 @@ static const struct compiler default_compilers[] =\n   {\".java\", \"#Java\", 0, 0, 0}, {\".class\", \"#Java\", 0, 0, 0},\n   {\".zip\", \"#Java\", 0, 0, 0}, {\".jar\", \"#Java\", 0, 0, 0},\n   /* Next come the entries for C.  */\n-  {\".c\", \"@c\", 0, 1, 1},\n+  {\".c\", \"@c\", 0, 0, 1},\n   {\"@c\",\n    /* cc1 has an integrated ISO C preprocessor.  We should invoke the\n       external preprocessor if -save-temps is given.  */\n      \"%{E|M|MM:%(trad_capable_cpp) %(cpp_options) %(cpp_debug_options)}\\\n       %{!E:%{!M:%{!MM:\\\n           %{traditional|ftraditional:\\\n %eGNU C no longer supports -traditional without -E}\\\n-       %{!combine:\\\n-\t  %{save-temps*|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \\\n-\t\t%(cpp_options) -o %{save-temps*:%b.i} %{!save-temps*:%g.i} \\n\\\n-\t\t    cc1 -fpreprocessed %{save-temps*:%b.i} %{!save-temps*:%g.i} \\\n-\t\t\t%(cc1_options)}\\\n-\t  %{!save-temps*:%{!traditional-cpp:%{!no-integrated-cpp:\\\n-\t\tcc1 %(cpp_unique_options) %(cc1_options)}}}\\\n-          %{!fsyntax-only:%(invoke_as)}} \\\n-      %{combine:\\\n-\t  %{save-temps*|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \\\n-\t\t%(cpp_options) -o %{save-temps*:%b.i} %{!save-temps*:%g.i}}\\\n-\t  %{!save-temps*:%{!traditional-cpp:%{!no-integrated-cpp:\\\n-\t\tcc1 %(cpp_unique_options) %(cc1_options)}}\\\n-                %{!fsyntax-only:%(invoke_as)}}}}}}\", 0, 1, 1},\n+      %{save-temps*|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \\\n+\t  %(cpp_options) -o %{save-temps*:%b.i} %{!save-temps*:%g.i} \\n\\\n+\t    cc1 -fpreprocessed %{save-temps*:%b.i} %{!save-temps*:%g.i} \\\n+\t  %(cc1_options)}\\\n+      %{!save-temps*:%{!traditional-cpp:%{!no-integrated-cpp:\\\n+\t  cc1 %(cpp_unique_options) %(cc1_options)}}}\\\n+      %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 1},\n   {\"-\",\n    \"%{!E:%e-E or -x required when input is from standard input}\\\n     %(trad_capable_cpp) %(cpp_options) %(cpp_debug_options)\", 0, 0, 0},\n@@ -1000,7 +993,7 @@ static const struct compiler default_compilers[] =\n \t\tcc1 %(cpp_unique_options) %(cc1_options)\\\n                     %{!fdump-ada-spec*:-o %g.s %{!o*:--output-pch=%i.gch}\\\n                     %W{o*:--output-pch=%*}}%V}}}}}}\", 0, 0, 0},\n-  {\".i\", \"@cpp-output\", 0, 1, 0},\n+  {\".i\", \"@cpp-output\", 0, 0, 0},\n   {\"@cpp-output\",\n    \"%{!M:%{!MM:%{!E:cc1 -fpreprocessed %i %(cc1_options) %{!fsyntax-only:%(invoke_as)}}}}\", 0, 1, 0},\n   {\".s\", \"@assembler\", 0, 1, 0},\n@@ -1078,7 +1071,6 @@ static const struct option_map option_map[] =\n    {\"--classpath\", \"-fclasspath=\", \"aj\"},\n    {\"--bootclasspath\", \"-fbootclasspath=\", \"aj\"},\n    {\"--CLASSPATH\", \"-fclasspath=\", \"aj\"},\n-   {\"--combine\", \"-combine\", 0},\n    {\"--comments\", \"-C\", 0},\n    {\"--comments-in-macros\", \"-CC\", 0},\n    {\"--compile\", \"-c\", 0},\n@@ -3322,7 +3314,6 @@ display_help (void)\n   fputs (_(\"  -Xassembler <arg>        Pass <arg> on to the assembler\\n\"), stdout);\n   fputs (_(\"  -Xpreprocessor <arg>     Pass <arg> on to the preprocessor\\n\"), stdout);\n   fputs (_(\"  -Xlinker <arg>           Pass <arg> on to the linker\\n\"), stdout);\n-  fputs (_(\"  -combine                 Pass multiple source files to compiler at once\\n\"), stdout);\n   fputs (_(\"  -save-temps              Do not delete intermediate files\\n\"), stdout);\n   fputs (_(\"  -save-temps=<arg>        Do not delete intermediate files\\n\"), stdout);\n   fputs (_(\"\\\n@@ -3761,8 +3752,6 @@ driver_handle_option (const struct cl_decoded_option *decoded,\n \n     case OPT_pipe:\n       validated = true;\n-      /* Fall through.  */\n-    case OPT_combine:\n       /* These options set the variables specified in common.opt\n \t automatically, but do need to be saved for spec\n \t processing.  */\n@@ -7003,10 +6992,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \n   explicit_link_files = XCNEWVEC (char, n_infiles);\n \n-  if (combine_flag)\n-    combine_inputs = true;\n-  else\n-    combine_inputs = false;\n+  combine_inputs = have_o || flag_wpa;\n \n   for (i = 0; (int) i < n_infiles; i++)\n     {\n@@ -7039,63 +7025,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n     }\n \n   if (!combine_inputs && have_c && have_o && lang_n_infiles > 1)\n-   fatal_error (\"cannot specify -o with -c, -S or -E with multiple files\");\n-\n-  if (combine_flag && save_temps_flag)\n-    {\n-      bool save_combine_inputs = combine_inputs;\n-      /* Must do a separate pre-processing pass for C & Objective-C files, to\n-\t obtain individual .i files.  */\n-\n-      combine_inputs = false;\n-      for (i = 0; (int) i < n_infiles; i++)\n-\t{\n-\t  int this_file_error = 0;\n-\n-\t  input_file_number = i;\n-\t  set_input (infiles[i].name);\n-\t  if (infiles[i].incompiler\n-\t      && (infiles[i].incompiler)->needs_preprocessing)\n-\t    input_file_compiler = infiles[i].incompiler;\n-\t  else\n-\t    continue;\n-\n-\t  if (input_file_compiler)\n-\t    {\n-\t      if (input_file_compiler->spec[0] == '#')\n-\t\t{\n-\t\t  error (\"%s: %s compiler not installed on this system\",\n-\t\t\t gcc_input_filename, &input_file_compiler->spec[1]);\n-\t\t  this_file_error = 1;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  value = do_spec (input_file_compiler->spec);\n-\t\t  infiles[i].preprocessed = true;\n-\t\t  if (!have_o_argbuf_index)\n-\t\t    fatal_error (\"spec %qs is invalid\",\n-\t\t\t\t input_file_compiler->spec);\n-\t\t  infiles[i].name = argbuf[have_o_argbuf_index];\n-\t\t  infiles[i].incompiler\n-\t\t    = lookup_compiler (infiles[i].name,\n-\t\t\t\t       strlen (infiles[i].name),\n-\t\t\t\t       infiles[i].language);\n-\n-\t\t  if (value < 0)\n-\t\t    this_file_error = 1;\n-\t\t}\n-\t    }\n-\n-\t  if (this_file_error)\n-\t    {\n-\t      delete_failure_queue ();\n-\t      errorcount++;\n-\t      break;\n-\t    }\n-\t  clear_failure_queue ();\n-\t}\n-      combine_inputs = save_combine_inputs;\n-    }\n+    fatal_error (\"cannot specify -o with -c, -S or -E with multiple files\");\n \n   for (i = 0; (int) i < n_infiles; i++)\n     {\n@@ -7115,12 +7045,9 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \n       /* Figure out which compiler from the file's suffix.  */\n \n-      if (! combine_inputs)\n-\tinput_file_compiler\n-\t  = lookup_compiler (infiles[i].name, input_filename_length,\n-\t\t\t     infiles[i].language);\n-      else\n-\tinput_file_compiler = infiles[i].incompiler;\n+      input_file_compiler\n+\t= lookup_compiler (infiles[i].name, input_filename_length,\n+\t\t\t   infiles[i].language);\n \n       if (input_file_compiler)\n \t{"}, {"sha": "540101773ef23c1fc232379470901f2d3817bf50", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -423,7 +423,6 @@ run_gcc (unsigned argc, char *argv[])\n \targv_ptr[0] = linker_output;\n       argv_ptr[1] = \"-o\";\n       argv_ptr[2] = flto_out;\n-      argv_ptr[3] = \"-combine\";\n     }\n   else if (lto_mode == LTO_MODE_WHOPR)\n     {\n@@ -459,15 +458,14 @@ run_gcc (unsigned argc, char *argv[])\n       strcpy (tmp, ltrans_output_file);\n \n       argv_ptr[2] = \"-fwpa\";\n-      argv_ptr[3] = \"-combine\";\n     }\n   else\n     fatal (\"invalid LTO mode\");\n \n   /* Append the input objects and possible preceeding arguments.  */\n   for (i = 1; i < argc; ++i)\n-    argv_ptr[3 + i] = argv[i];\n-  argv_ptr[3 + i] = NULL;\n+    argv_ptr[2 + i] = argv[i];\n+  argv_ptr[2 + i] = NULL;\n \n   fork_execute (CONST_CAST (char **, new_argv));\n "}, {"sha": "3b229bce8b803cdf488df897d0a2a0a6d7921927", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,3 +1,7 @@\n+2010-09-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lang.opt (flag_wpa): Also enable for the driver.\n+\n 2010-09-16  Jan Hubicka  <jh@suse.cz>\n \n \t* lto.c (lto_materialize_function): Do not tamper with STATIC and"}, {"sha": "199adeaf4e0c7ea777b28ec67114a031a76c54bf", "filename": "gcc/lto/lang.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Flto%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Flto%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flang.opt?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -33,7 +33,7 @@ LTO Joined Var(ltrans_output_list)\n Specify a file to which a list of files output by LTRANS is written.\n \n fwpa\n-LTO Report Var(flag_wpa) Optimization\n+LTO Driver Report Var(flag_wpa) Optimization\n Run the link-time optimizer in whole program analysis (WPA) mode.\n \n fresolution="}, {"sha": "b4bfbe4abec809f92d937f9c361199d9321df182", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,3 +1,29 @@\n+2010-09-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/pr27898.c: Use -flto instead of -combine.\n+\t* gcc.dg/pr28706.c: Likewise.\n+\t* gcc.dg/pr28712.c: Likewise.\n+\t* gcc.dg/pr30762-1.c: Likewise.\n+\t* gcc.dg/pr30762-2.c: Likewise.\n+\t* gcc.dg/pr31529-1.c: Likewise.\n+\t* gcc.dg/pr31529-2.c: Likewise.\n+\t* gcc.dg/pr34457-1.c: Likewise.\n+\t* gcc.dg/pr34457-2.c: Likewise.\n+\t* gcc.dg/pr34668-1.c: Likewise.\n+\t* gcc.dg/pr34668-2.c: Likewise.\n+\t* gcc.dg/pr34989-1.c: Likewise.\n+\t* gcc.dg/pr34989-2.c: Likewise.\n+\t* gcc.dg/pr43557-1.c: Likewise.\n+\t* gcc.dg/pr43557-2.c: Likewise.\n+\t* gcc.dg/debug/pr41893-1.c: Likewise.\n+\t* gcc.dg/matrix/matrix.exp: Do not use -combine.\n+\t* gcc.dg/matrix/matrix-3.c: Drop dg-options.\n+\t* gcc.dg/matrix/matrix-4.c: Likewise.\n+\t* gcc.dg/struct/struct-reorg.exp: Do not use -combine.\n+\t* gcc.dg/struct/wo_prof_empty_str.c: Drop dg-options.\n+\t* gcc.dg/struct/wo_prof_escape_arg_to_local.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_escape_return.c: Likewise.\n+\n 2010-09-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/43665"}, {"sha": "fbd744545f7966631917f3585acd4a2c30d3331b", "filename": "gcc/testsuite/gcc.dg/debug/pr41893-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr41893-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr41893-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr41893-1.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,6 +1,7 @@\n /* PR debug/41893 */\n-/* { dg-do compile } */\n-/* { dg-options \"-combine -fwhole-program -O\" } */\n+/* { dg-do link } */\n+/* { dg-require-effective-target-lto } */\n+/* { dg-options \"-flto -fwhole-program -O -r -nostdlib\" } */\n /* { dg-additional-sources \"pr41893-2.c\" } */\n \n struct S { int v; };"}, {"sha": "28a5a16b7e0e58f2f11567838c2554be23989ae7", "filename": "gcc/testsuite/gcc.dg/matrix/matrix-3.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-3.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,6 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fipa-matrix-reorg -fdump-ipa-matrix-reorg -c -fwhole-program -combine\"  } */\n-\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "d741b46e41616a526680b802cd3866eda03a02c5", "filename": "gcc/testsuite/gcc.dg/matrix/matrix-4.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-4.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,6 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fipa-matrix-reorg -fdump-ipa-matrix-reorg -c -fwhole-program -combine\"  } */\n-\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "fc1eb4138bfcf5fdad10b8506533e93ac77961eb", "filename": "gcc/testsuite/gcc.dg/matrix/matrix.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix.exp?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -19,7 +19,7 @@\n load_lib gcc-dg.exp\n load_lib target-supports.exp\n \n-set DEFAULT_MATCFLAGS \"-O3 -fipa-matrix-reorg -fdump-ipa-matrix-reorg -fwhole-program -combine\"\n+set DEFAULT_MATCFLAGS \"-O3 -fipa-matrix-reorg -fdump-ipa-matrix-reorg -fwhole-program\"\n \n # Initialize `dg'.\n dg-init\n@@ -52,7 +52,7 @@ load_lib profopt.exp\n # needed to generate profile data, the second is options to use the\n # profile data.\n set profile_option \"-fprofile-generate -O3\"\n-set feedback_option \"-fprofile-use -fipa-matrix-reorg -fdump-ipa-matrix-reorg -O3 -fwhole-program -combine\"\n+set feedback_option \"-fprofile-use -fipa-matrix-reorg -fdump-ipa-matrix-reorg -O3 -fwhole-program\"\n \n foreach src [lsort [glob -nocomplain $srcdir/$subdir/transpose-*.c]] {\n     # If we're only testing specific files and this isn't one of them, skip it."}, {"sha": "e4160ca182eaee6243865fe5eaebee6512253a6a", "filename": "gcc/testsuite/gcc.dg/pr27898.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27898.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27898.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27898.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,6 +1,7 @@\n /* PR c/27898 */\n-/* { dg-do compile } */\n-/* { dg-options \"--combine\" } */\n+/* { dg-do link } */\n+/* { dg-require-effective-target-lto } */\n+/* { dg-options \"-flto -r -nostdlib\" } */\n /* { dg-additional-sources \"pr27898.c\" } */\n \n union u { struct { int i; }; };"}, {"sha": "9d6f1eb53d8f3a2de88f8043b0c57190e8535058", "filename": "gcc/testsuite/gcc.dg/pr28706.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28706.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28706.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28706.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,6 +1,7 @@\n /* PR c/28706 */\n-/* { dg-do compile } */\n-/* { dg-options \"--combine\" } */\n+/* { dg-do link } */\n+/* { dg-require-effective-target-lto } */\n+/* { dg-options \"-flto -r -nostdlib\" } */\n /* { dg-additional-sources \"pr28706.c\" } */\n \n struct A"}, {"sha": "1578577135cef9871a6371f3057ee052c180a39b", "filename": "gcc/testsuite/gcc.dg/pr28712.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28712.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28712.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28712.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,6 +1,7 @@\n /* PR c/28712 */\n-/* { dg-do compile } */\n-/* { dg-options \"--combine\" } */\n+/* { dg-do link } */\n+/* { dg-require-effective-target-lto } */\n+/* { dg-options \"-flto -r -nostdlib\" } */\n /* { dg-additional-sources \"pr28712.c pr28712.c\" } */\n \n struct A;"}, {"sha": "df93d73513b2bc1d05b2a26f520ada3cad067b79", "filename": "gcc/testsuite/gcc.dg/pr30762-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30762-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30762-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30762-1.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,6 +1,7 @@\n /* PR c/30762 */\n-/* { dg-do compile } */\n-/* { dg-options \"--combine -O3\" } */\n+/* { dg-do link } */\n+/* { dg-require-effective-target-lto } */\n+/* { dg-options \"-flto -r -nostdlib -O3\" } */\n /* { dg-additional-sources pr30762-2.c } */\n \n typedef struct { int i; } D;"}, {"sha": "4585b649efb9632e11ff27a74a9cca6f1aa45431", "filename": "gcc/testsuite/gcc.dg/pr31529-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31529-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31529-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31529-1.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,5 +1,6 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-combine\" } */\n+/* { dg-do link } */\n+/* { dg-require-effective-target-lto } */\n+/* { dg-options \"-flto -r -nostdlib\" } */\n /* { dg-additional-sources \"pr31529-2.c\" } */\n \n getline ()"}, {"sha": "1b4c316130e26d13cc0ec2c262d8c751bc42076c", "filename": "gcc/testsuite/gcc.dg/pr34457-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34457-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34457-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34457-1.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,7 +1,8 @@\n /* PR c/34457 */\n-/* { dg-do compile } */\n+/* { dg-do link } */\n /* { dg-require-effective-target trampolines } */\n-/* { dg-options \"--combine -O2\" } */\n+/* { dg-require-effective-target-lto } */\n+/* { dg-options \"-flto -r -nostdlib -O2\" } */\n /* { dg-additional-sources \"pr34457-2.c\" } */\n    \n "}, {"sha": "11c66913c6cbc0a5b5df0e289c3da1be57bee639", "filename": "gcc/testsuite/gcc.dg/pr34668-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34668-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34668-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34668-1.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,6 +1,7 @@\n /* PR c/34668 */\n-/* { dg-do compile } */\n-/* { dg-options \"--combine -O2\" } */\n+/* { dg-do link } */\n+/* { dg-require-effective-target-lto } */\n+/* { dg-options \"-flto -r -nostdlib -O2\" } */\n /* { dg-additional-sources \"pr34668-2.c\" } */\n \n struct optab { unsigned code; };"}, {"sha": "cd45c83e6f7e51890d191eaef3bd37b7753b6245", "filename": "gcc/testsuite/gcc.dg/pr34989-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34989-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34989-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34989-1.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,5 +1,6 @@\n-/* { dg-do compile } */\n-/* { dg-options \"--combine -O2\" } */\n+/* { dg-do link } */\n+/* { dg-require-effective-target-lto } */\n+/* { dg-options \"-flto -r -nostdlib -O2\" } */\n /* { dg-additional-sources \"pr34989-2.c\" } */\n \n extern struct globals *const ptr_to_globals;"}, {"sha": "466e89aebcbb72c8b0412afaf794ac30d922808e", "filename": "gcc/testsuite/gcc.dg/pr43557-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43557-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43557-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43557-1.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,6 +1,7 @@\n /* PR debug/43557 */\n-/* { dg-do compile } */\n-/* { dg-options \"--combine -g -O2\" } */\n+/* { dg-do link } */\n+/* { dg-require-effective-target-lto } */\n+/* { dg-options \"-flto -r -nostdlib -g -O2\" } */\n /* { dg-additional-sources \"pr43557-2.c\" } */\n \n struct S"}, {"sha": "34ec94ee29be9d508fbc29d0eaf71f5d3e775c54", "filename": "gcc/testsuite/gcc.dg/struct/struct-reorg.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fstruct-reorg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fstruct-reorg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fstruct-reorg.exp?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -20,7 +20,7 @@\n load_lib gcc-dg.exp\n load_lib target-supports.exp\n \n-set STRUCT_REORG_CFLAGS \"-O3 -fipa-struct-reorg -fdump-ipa-all -fwhole-program -combine\"\n+set STRUCT_REORG_CFLAGS \"-O3 -fipa-struct-reorg -fdump-ipa-all -fwhole-program\"\n \n # Initialize `dg'.\n dg-init\n@@ -51,7 +51,7 @@ load_lib profopt.exp\n # These are globals used by profopt-execute.  The first is options\n # needed to generate profile data, the second is options to use the\n # profile data.\n-set common \"-O3 -fwhole-program -combine\"\n+set common \"-O3 -fwhole-program\"\n set profile_option [concat $common \" -fprofile-generate\"]\n set feedback_option [concat $common \" -fprofile-use -fipa-struct-reorg -fdump-ipa-all\"]\n "}, {"sha": "09668face34d18c063911c1da8567dd9e60a0338", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_empty_str.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_empty_str.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_empty_str.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_empty_str.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-O3 -fno-inline -fdump-ipa-all -fipa-struct-reorg -fwhole-program -combine\" } */\n-/* { dg-do compile } */\n /* { dg-do run } */\n \n #include <stdlib.h>"}, {"sha": "0116d819800c32fdc64a7b57eec581d48ac17d66", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_escape_arg_to_local.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_arg_to_local.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_arg_to_local.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_arg_to_local.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-O3 -fno-inline -fno-ipa-sra -fdump-ipa-all -fipa-struct-reorg -fwhole-program -combine\" } */\n-/* { dg-do compile } */\n /* { dg-do run } */\n \n #include <stdlib.h>"}, {"sha": "21a6a7f3a2e04a8cd6fd295fc1ad9896a73e0702", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_escape_return.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_return.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3224d6f70eefb9ca469de8385bc565b1298dbb5/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_return.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_return.c?ref=c3224d6f70eefb9ca469de8385bc565b1298dbb5", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-O3 -fno-inline -fdump-ipa-all -fipa-struct-reorg -fwhole-program -combine\" } */\n-/* { dg-do compile } */\n /* { dg-do run } */\n \n #include <stdlib.h>"}]}