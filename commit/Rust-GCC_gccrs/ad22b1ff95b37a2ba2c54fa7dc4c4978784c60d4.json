{"sha": "ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQyMmIxZmY5NWIzN2EyYmEyYzU0ZmE3ZGM0YzQ5Nzg3ODRjNjBkNA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-07-03T21:41:34Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-07-03T21:41:34Z"}, "message": "re PR fortran/25062 (same name for parameter and common block)\n\n2007-07-03  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/25062\n\t* resolve.c (resolve_common_blocks): New check function.\n\t(resolve_types): Use it.\n\n2007-07-03  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/25062\n\t* common_7.f90: New.\n\t* common_8.f90: New.\n\t* common_9.f90: New.\n\nFrom-SVN: r126279", "tree": {"sha": "6a6d3d1c0c69af604de2ff9192a48191169ecb07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a6d3d1c0c69af604de2ff9192a48191169ecb07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "717c4e47fbf53b293b5c23fe8717e504895a5bb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717c4e47fbf53b293b5c23fe8717e504895a5bb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/717c4e47fbf53b293b5c23fe8717e504895a5bb4"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "22088129dca0d95cba44166188cbc3af5eba324f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4", "patch": "@@ -1,3 +1,9 @@\n+2007-07-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/25062\n+\t* resolve.c (resolve_common_blocks): New check function.\n+\t(resolve_types): Use it.\n+\n 2007-07-03  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/30940"}, {"sha": "615d85e756bb74b177c8b4ad850ebac6c62436ae", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4", "patch": "@@ -594,6 +594,56 @@ resolve_entries (gfc_namespace *ns)\n }\n \n \n+/* Resolve common blocks.  */\n+static void\n+resolve_common_blocks (gfc_symtree *common_root)\n+{\n+   gfc_symtree *symtree;\n+   gfc_symbol *sym;\n+\n+   if (common_root == NULL)\n+     return;\n+\n+   for (symtree = common_root; symtree->left; symtree = symtree->left);\n+\n+   for (; symtree; symtree = symtree->right)\n+     {\n+\tgfc_find_symbol (symtree->name, gfc_current_ns, 0, &sym);\n+\tif (sym == NULL)\n+\t  continue;\n+\n+\tif (sym->attr.flavor == FL_PARAMETER)\n+\t  {\n+\t    gfc_error (\"COMMON block '%s' at %L is used as PARAMETER at %L\",\n+\t\t       sym->name, &symtree->n.common->where,\n+\t\t       &sym->declared_at);\n+\t  }\n+\n+\tif (sym->attr.intrinsic)\n+\t  {\n+\t    gfc_error (\"COMMON block '%s' at %L is also an intrinsic \"\n+\t\t       \"procedure\", sym->name,\n+\t\t       &symtree->n.common->where);\n+\t  }\n+\telse if (sym->attr.result\n+\t\t ||(sym->attr.function && gfc_current_ns->proc_name == sym))\n+\t  {\n+\t    gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: COMMON block '%s' \"\n+\t\t\t    \"at %L that is also a function result\", sym->name,\n+\t\t\t    &symtree->n.common->where);\n+\t  }\n+\telse if (sym->attr.flavor == FL_PROCEDURE\n+\t\t&& sym->attr.proc != PROC_INTERNAL\n+\t\t&& sym->attr.proc != PROC_ST_FUNCTION)\n+\t  {\n+\t    gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: COMMON block '%s' \"\n+\t\t\t    \"at %L that is also a global procedure\", sym->name,\n+\t\t\t    &symtree->n.common->where);\n+\t  }\n+     }\n+}\n+\n+\n /* Resolve contained function types.  Because contained functions can call one\n    another, they have to be worked out before any of the contained procedures\n    can be resolved.\n@@ -8197,6 +8247,8 @@ resolve_types (gfc_namespace *ns)\n \n   resolve_entries (ns);\n \n+  resolve_common_blocks (ns->common_root);\n+\n   resolve_contained_functions (ns);\n \n   gfc_traverse_ns (ns, resolve_bind_c_derived_types);"}, {"sha": "e6b226839ce981f60f70126b48e049b8abbe60af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4", "patch": "@@ -1,3 +1,10 @@\n+2007-07-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/25062\n+\t* common_7.f90: New.\n+\t* common_8.f90: New.\n+\t* common_9.f90: New.\n+\n 2007-07-03  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/30940"}, {"sha": "2736cad6dfd0939d49b88cd70ec9c922e19bdab5", "filename": "gcc/testsuite/gfortran.dg/common_7.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_7.f90?ref=ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+!\n+! F2003: 16.2.1\n+! \"A name that identifies a common block in a scoping unit shall not be used \n+!  to identify a constant or an intrinsic procedure in that scoping unit.\"\n+!\n+subroutine x134\n+ INTEGER, PARAMETER ::  C1=1  ! { dg-error \"COMMON block 'c1' at \\\\(1\\\\) is used as PARAMETER\" } \n+ COMMON /C1/ I  ! { dg-error \"COMMON block 'c1' at \\\\(1\\\\) is used as PARAMETER\" } \n+end subroutine\n+end"}, {"sha": "5d08fcdee22765cf792d244cf396dcc64eeffebc", "filename": "gcc/testsuite/gfortran.dg/common_8.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_8.f90?ref=ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+!\n+! PR fortran/25062\n+!\n+! F2003: 16.2.1\n+! \"A name that identifies a common block in a scoping unit shall not be used \n+!  to identify a constant or an intrinsic procedure in that scoping unit.\"\n+!\n+subroutine try\n+ implicit none\n+ COMMON /s/ J\n+ COMMON /bar/ I\n+ INTEGER I, J\n+ real s, x\n+ s(x)=sin(x)\n+ print *, s(5.0)\n+ call bar()\n+contains\n+ subroutine bar\n+   print *, 'Hello world'\n+ end subroutine bar\n+\n+end subroutine try\n+\n+program test\n+ implicit none\n+ COMMON /abs/ J ! { dg-error \"is also an intrinsic procedure\" }\n+ intrinsic :: abs\n+ INTEGER J\n+ external try\n+ call try\n+end program test"}, {"sha": "a567eb386f95c1c8e1ac1c008401324ce7e66d21", "filename": "gcc/testsuite/gfortran.dg/common_9.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_9.f90?ref=ad22b1ff95b37a2ba2c54fa7dc4c4978784c60d4", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+\n+! PR fortran/25062\n+!\n+! F95: 14.1.2.1:\n+! \"A common block name in a scoping unit also may be the name of any local\n+!  entity other than a named constant, intrinsic procedure, or a local variable\n+!  that is also an external function in a function subprogram.\"\n+!\n+! F2003: 16.2.1\n+! \"A name that identifies a common block in a scoping unit shall not be used \n+!  to identify a constant or an intrinsic procedure in that scoping unit. If\n+!  a local identifier is also the name of a common block, the appearance of\n+!  that name in any context other than as a common block name in a COMMON\n+!  or SAVE statement is an appearance of the local identifier.\"\n+!\n+function func1() result(res)\n+  implicit none\n+  real res, r\n+  common /res/ r ! { dg-error \"is also a function result\" }\n+end function func1\n+end"}]}