{"sha": "9e51cf9da473db64da0af8587a27dab945890990", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1MWNmOWRhNDczZGI2NGRhMGFmODU4N2EyN2RhYjk0NTg5MDk5MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-06-17T01:06:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-17T01:06:04Z"}, "message": "c-common.h (c_begin_if_stmt, [...]): Remove decls.\n\n        * c-common.h (c_begin_if_stmt, c_begin_while_stmt,\n        c_finish_while_stmt_cond): Remove decls.\n        * c-parse.in (if_prefix): Don't save c_begin_if_stmt result.\n        * c-typeck.c (c_begin_if_stmt): Return void.\n        (c_begin_else): Tidy.  Save stmt_count.\n        * c-tree.h (c_begin_if_stmt): Update decl.\n        * objc/objc-act.c (objc_build_try_enter_fragment,\n        objc_build_extract_fragment, objc_build_try_epilogue,\n        objc_build_catch_stmt, objc_build_catch_epilogue,\n        objc_build_finally_prologue, objc_build_finally_epilogue): Update\n        for if builder function changes.\n\nFrom-SVN: r83280", "tree": {"sha": "74b8a22c43fc02f5e1a6607ab2729a5f19ac2536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74b8a22c43fc02f5e1a6607ab2729a5f19ac2536"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e51cf9da473db64da0af8587a27dab945890990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e51cf9da473db64da0af8587a27dab945890990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e51cf9da473db64da0af8587a27dab945890990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e51cf9da473db64da0af8587a27dab945890990/comments", "author": null, "committer": null, "parents": [{"sha": "902fd62cebfcdbf91caf2377cb0db0ae577cbbfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/902fd62cebfcdbf91caf2377cb0db0ae577cbbfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/902fd62cebfcdbf91caf2377cb0db0ae577cbbfd"}], "stats": {"total": 91, "additions": 49, "deletions": 42}, "files": [{"sha": "79c722e6f808591eb0f5707fe7e4f3e7b63c3013", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e51cf9da473db64da0af8587a27dab945890990/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e51cf9da473db64da0af8587a27dab945890990/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e51cf9da473db64da0af8587a27dab945890990", "patch": "@@ -1,3 +1,18 @@\n+2004-06-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.h (c_begin_if_stmt, c_begin_while_stmt,\n+\tc_finish_while_stmt_cond): Remove decls.\n+\t* c-parse.in (if_prefix): Don't save c_begin_if_stmt result.\n+\t* c-typeck.c (c_begin_if_stmt): Return void.\n+\t(c_begin_else): Tidy.  Save stmt_count.\n+\t* c-tree.h (c_begin_if_stmt): Update decl.\n+\n+\t* objc/objc-act.c (objc_build_try_enter_fragment,\n+\tobjc_build_extract_fragment, objc_build_try_epilogue,\n+\tobjc_build_catch_stmt, objc_build_catch_epilogue,\n+\tobjc_build_finally_prologue, objc_build_finally_epilogue): Update\n+\tfor if builder function changes.\n+\n 2004-06-16  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (struct machine_function):  New member"}, {"sha": "3e15d2b989649719a67f3a5bf0e90852709f3f1f", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e51cf9da473db64da0af8587a27dab945890990/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e51cf9da473db64da0af8587a27dab945890990/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=9e51cf9da473db64da0af8587a27dab945890990", "patch": "@@ -300,9 +300,6 @@ extern void push_cleanup (tree, tree, bool);\n \n extern tree walk_stmt_tree (tree *, walk_tree_fn, void *);\n extern void prep_stmt (tree);\n-extern tree c_begin_if_stmt (void);\n-extern tree c_begin_while_stmt (void);\n-extern void c_finish_while_stmt_cond (tree, tree);\n extern int c_expand_decl (tree);\n \n extern int field_decl_cmp (const void *, const void *);"}, {"sha": "3401709d22b3aa06356819281c93050c262d772e", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e51cf9da473db64da0af8587a27dab945890990/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e51cf9da473db64da0af8587a27dab945890990/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=9e51cf9da473db64da0af8587a27dab945890990", "patch": "@@ -2069,7 +2069,7 @@ if_prefix:\n \t     line containing the \"if\", and not the line containing\n \t     the close-parenthesis.  */\n           IF\n-                { $<ttype>$ = c_begin_if_stmt (); }\n+                { c_begin_if_stmt (); }\n             '(' expr ')'\n \t\t{ c_finish_if_cond ($4, compstmt_count, ++stmt_count); }\n         ;"}, {"sha": "a3f6ad1eb12b1c51c55cf6e7cdcfaf1513bfd798", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e51cf9da473db64da0af8587a27dab945890990/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e51cf9da473db64da0af8587a27dab945890990/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=9e51cf9da473db64da0af8587a27dab945890990", "patch": "@@ -256,7 +256,7 @@ extern tree c_convert_parm_for_inlining (tree, tree, tree, int);\n extern int c_types_compatible_p (tree, tree);\n extern tree c_begin_compound_stmt (bool);\n extern tree c_end_compound_stmt (tree, bool);\n-extern tree c_begin_if_stmt (void);\n+extern void c_begin_if_stmt (void);\n extern void c_finish_if_cond (tree, int, int);\n extern void c_finish_then (tree);\n extern void c_begin_else (int);"}, {"sha": "8c2a7ba57f784e4be4338e411dc5df4bf32dd280", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e51cf9da473db64da0af8587a27dab945890990/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e51cf9da473db64da0af8587a27dab945890990/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=9e51cf9da473db64da0af8587a27dab945890990", "patch": "@@ -6486,7 +6486,7 @@ static int if_stack_pointer = 0;\n /* Begin an if-statement.  Returns a newly created IF_STMT if\n    appropriate.  */\n \n-tree\n+void\n c_begin_if_stmt (void)\n {\n   tree r;\n@@ -6546,20 +6546,22 @@ c_finish_then (tree then_stmt)\n void\n c_begin_else (int stmt_count)\n {\n+  if_elt *elt = &if_stack[if_stack_pointer - 1];\n+\n   /* An ambiguous else warning must be generated for the enclosing if\n      statement, unless we see an else branch for that one, too.  */\n   if (warn_parentheses\n       && if_stack_pointer > 1\n-      && (if_stack[if_stack_pointer - 1].compstmt_count\n-\t  == if_stack[if_stack_pointer - 2].compstmt_count))\n-    if_stack[if_stack_pointer - 2].needs_warning = 1;\n+      && (elt[0].compstmt_count == elt[-1].compstmt_count))\n+    elt[-1].needs_warning = 1;\n \n   /* Even if a nested if statement had an else branch, it can't be\n      ambiguous if this one also has an else.  So don't warn in that\n      case.  Also don't warn for any if statements nested in this else.  */\n-  if_stack[if_stack_pointer - 1].needs_warning = 0;\n-  if_stack[if_stack_pointer - 1].compstmt_count--;\n-  if_stack[if_stack_pointer - 1].saw_else = 1;\n+  elt->needs_warning = 0;\n+  elt->compstmt_count--;\n+  elt->saw_else = 1;\n+  elt->stmt_count = stmt_count;\n }\n \n /* Called after the else-clause for an if-statement is processed.  */"}, {"sha": "7891afdbc5506539e08010113d3a7fecfcbd72a6", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e51cf9da473db64da0af8587a27dab945890990/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e51cf9da473db64da0af8587a27dab945890990/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=9e51cf9da473db64da0af8587a27dab945890990", "patch": "@@ -2780,7 +2780,7 @@ objc_build_try_enter_fragment (void)\n   /* objc_exception_try_enter(&_stackExceptionData);\n      if (!_setjmp(&_stackExceptionData.buf)) {  */\n \n-  tree func_params, if_stmt, cond;\n+  tree func_params, cond;\n \n   func_params\n     = tree_cons (NULL_TREE,\n@@ -2802,7 +2802,7 @@ objc_build_try_enter_fragment (void)\n #error\n #endif\n \n-  if_stmt = c_begin_if_stmt ();\n+  c_begin_if_stmt ();\n   if_nesting_count++;\n   /* If <setjmp.h> has been included, the _setjmp prototype has\n      acquired a real, breathing type for its parameter.  Cast our\n@@ -2821,7 +2821,7 @@ objc_build_try_enter_fragment (void)\n   cond = build_unary_op (TRUTH_NOT_EXPR,\n \t\t\t build_function_call (objc_setjmp_decl, func_params),\n \t\t\t 0);\n-  c_expand_start_cond (lang_hooks.truthvalue_conversion (cond), 0, if_stmt);\n+  c_finish_if_cond (cond, 0, 0);\n   objc_enter_block ();\n }\n \n@@ -2865,14 +2865,14 @@ objc_build_extract_fragment (void)\n \n   c_finish_then (objc_exit_block ());\n \n-  c_expand_start_else ();\n+  c_begin_else (0);\n   objc_enter_block ();\n   c_expand_expr_stmt (build_modify_expr\n \t\t      (TREE_VALUE (objc_rethrow_exception),\n \t\t       NOP_EXPR,\n \t\t       objc_build_extract_expr ()));\n   c_finish_else (objc_exit_block ());\n-  c_expand_end_cond ();\n+  c_finish_if_stmt (1);\n   if_nesting_count--;\n }\n \n@@ -2928,11 +2928,9 @@ objc_build_try_epilogue (int also_catch_prologue)\n \t   if(!_setjmp(&_stackExceptionData.buf)) {\n \t     if (0) {  */\n \n-      tree if_stmt;\n-\n       c_finish_then (objc_exit_block ());\n     \t\t\n-      c_expand_start_else ();\n+      c_begin_else (0);\n       objc_enter_block ();\n       objc_caught_exception\n \t= tree_cons (NULL_TREE,\n@@ -2943,10 +2941,9 @@ objc_build_try_epilogue (int also_catch_prologue)\n \t\t     objc_caught_exception);\n       objc_build_try_enter_fragment ();\n       val_stack_push (&catch_count_stack, 1);\n-      if_stmt = c_begin_if_stmt ();\n+      c_begin_if_stmt ();\n       if_nesting_count++;\n-      c_expand_start_cond (lang_hooks.truthvalue_conversion (boolean_false_node),\n-\t\t\t   0, if_stmt);\n+      c_finish_if_cond (boolean_false_node, 0, 0);\n       objc_enter_block ();\n \n       /* Start a new chain of @catch statements for this @try.  */\n@@ -2970,7 +2967,7 @@ objc_build_catch_stmt (tree catch_expr)\n   /* } else if (objc_exception_match(objc_get_class(\"SomeClass\"), _caughtException)) {\n        register SomeClass *e = _caughtException;  */\n \n-  tree if_stmt, cond, func_params, prev_catch, var_name, var_type;\n+  tree cond, func_params, prev_catch, var_name, var_type;\n   int catch_id;\n \n #ifndef OBJCPLUS\n@@ -3014,9 +3011,9 @@ objc_build_catch_stmt (tree catch_expr)\n \n   c_finish_then (objc_exit_block ());\n \n-  c_expand_start_else ();\n+  c_begin_else (0);\n   catch_count_stack->val++;\n-  if_stmt = c_begin_if_stmt ();\n+  c_begin_if_stmt ();\n   if_nesting_count++;\n \n   if (catch_id)\n@@ -3034,7 +3031,7 @@ objc_build_catch_stmt (tree catch_expr)\n       cond = build_function_call (objc_exception_match_decl, func_params);\n     }\n \n-  c_expand_start_cond (lang_hooks.truthvalue_conversion (cond), 0, if_stmt);\n+  c_finish_if_cond (cond, 0, 0);\n   objc_enter_block ();\n   objc_declare_variable (RID_REGISTER, var_name,\n \t\t\t build_pointer_type (var_type),\n@@ -3057,7 +3054,7 @@ objc_build_catch_epilogue (void)\n \n   c_finish_then (objc_exit_block ());\n \n-  c_expand_start_else ();\n+  c_begin_else (0);\n   objc_enter_block ();\n   c_expand_expr_stmt\n     (build_modify_expr\n@@ -3070,7 +3067,7 @@ objc_build_catch_epilogue (void)\n     {\n       /* FIXME.  Need to have the block of each else that was opened.  */\n       c_finish_else ((abort (), NULL)); /* close off all the nested ifs ! */\n-      c_expand_end_cond ();\n+      c_finish_if_stmt (1);\n       if_nesting_count--;\n     }\n   val_stack_pop (&catch_count_stack);\n@@ -3079,7 +3076,7 @@ objc_build_catch_epilogue (void)\n   objc_build_extract_fragment ();\n \n   c_finish_else (objc_exit_block ());\n-  c_expand_end_cond ();\n+  c_finish_if_stmt (1);\n   if_nesting_count--;\n   objc_exit_block ();\n \n@@ -3099,18 +3096,16 @@ objc_build_finally_prologue (void)\n \n   tree blk = objc_enter_block ();\n \n-  tree if_stmt = c_begin_if_stmt ();\n+  c_begin_if_stmt ();\n   if_nesting_count++;\n \n-  c_expand_start_cond (lang_hooks.truthvalue_conversion\n-\t\t\t(build_unary_op (TRUTH_NOT_EXPR,\n-\t\t\t\t\t TREE_VALUE (objc_rethrow_exception),\n-\t\t\t\t\t 0)),\n-\t\t       0, if_stmt);\n+  c_finish_if_cond (build_unary_op (TRUTH_NOT_EXPR,\n+\t\t\t\t    TREE_VALUE (objc_rethrow_exception), 0),\n+\t\t    0, 0);\n   objc_enter_block ();\n   objc_build_try_exit_fragment ();\n   c_finish_then (objc_exit_block ());\n-  c_expand_end_cond ();\n+  c_finish_if_stmt (1);\n   if_nesting_count--;\n \n   return blk;\n@@ -3125,16 +3120,14 @@ objc_build_finally_epilogue (void)\n       } // end FINALLY scope\n     } */\n \n-  tree if_stmt = c_begin_if_stmt ();\n+  c_begin_if_stmt ();\n   if_nesting_count++;\n \n-  c_expand_start_cond\n-    (lang_hooks.truthvalue_conversion (TREE_VALUE (objc_rethrow_exception)),\n-     0, if_stmt);\n+  c_finish_if_cond (TREE_VALUE (objc_rethrow_exception), 0, 0);\n   objc_enter_block ();\n   objc_build_throw_stmt (TREE_VALUE (objc_rethrow_exception));\n   c_finish_then (objc_exit_block ());\n-  c_expand_end_cond ();\n+  c_finish_if_stmt (1);\n   if_nesting_count--;\n \n   objc_exit_block ();"}]}