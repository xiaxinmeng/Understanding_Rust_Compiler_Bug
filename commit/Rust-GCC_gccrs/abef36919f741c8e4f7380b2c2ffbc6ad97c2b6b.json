{"sha": "abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJlZjM2OTE5Zjc0MWM4ZTRmNzM4MGIyYzJmZmJjNmFkOTdjMmI2Yg==", "commit": {"author": {"name": "Eugene Rozenfeld", "email": "Eugene.Rozenfeld@microsoft.com", "date": "2020-12-01T23:26:59Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-12-01T23:26:59Z"}, "message": "Optimize max/min pattern with comparison\n\ngcc/\n\tPR tree-optimization/96708\n\t* match.pd: New pattern for comparing X with MAX (X, Y)\n\tor MIN (X, y).\n\ngcc/testsuite\n\t* gcc.dg/pr96708-negative.c: New test.\n\t* gcc.dg/pr96708-positive.c: New test.", "tree": {"sha": "fafc77b3b9ea932d0281d39a7d52c3e7aae42fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fafc77b3b9ea932d0281d39a7d52c3e7aae42fbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b/comments", "author": null, "committer": null, "parents": [{"sha": "db365b61c53136fd6ccc1a9d4f3fc5c020c28bc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db365b61c53136fd6ccc1a9d4f3fc5c020c28bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db365b61c53136fd6ccc1a9d4f3fc5c020c28bc3"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "68201ff2e07af069102e0bf6be68a8577e9c321e", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b", "patch": "@@ -2883,6 +2883,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cmp (minmax @0 INTEGER_CST@1) INTEGER_CST@2)\n   (comb (cmp @0 @2) (cmp @1 @2))))\n \n+/* X <= MAX(X, Y) -> true\n+   X > MAX(X, Y) -> false \n+   X >= MIN(X, Y) -> true\n+   X < MIN(X, Y) -> false */\n+(for minmax (min     min     max     max     )\n+     cmp    (ge      lt      le      gt      )\n+ (simplify\n+  (cmp @0 (minmax:c @0 @1))\n+  { constant_boolean_node (cmp == GE_EXPR || cmp == LE_EXPR, type); } ))\n+\n /* Undo fancy way of writing max/min or other ?: expressions,\n    like a - ((a - b) & -(a < b)), in this case into (a < b) ? b : a.\n    People normally use ?: and that is what we actually try to optimize.  */"}, {"sha": "91964d3b971dc52055db43f6a7fc6fdd257ac8e7", "filename": "gcc/testsuite/gcc.dg/pr96708-negative.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96708-negative.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96708-negative.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96708-negative.c?ref=abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+#include <stdbool.h>\n+\n+bool __attribute__ ((noinline))\n+test1 (int a, int b)\n+{\n+    int tmp = (a < b) ? b : a;\n+    return tmp <= a;\n+}\n+\n+bool __attribute__ ((noinline))\n+test2 (int a, int b)\n+{\n+    int tmp = (a < b) ? b : a;\n+    return tmp > a;\n+}\n+\n+bool __attribute__ ((noinline))\n+test3 (int a, int b)\n+{\n+    int tmp = (a > b) ? b : a;\n+    return tmp >= a;\n+}\n+\n+bool __attribute__ ((noinline))\n+test4 (int a, int b)\n+{\n+    int tmp = (a > b) ? b : a;\n+    return tmp < a;\n+}\n+\n+int main()\n+{\n+    if (test1 (1, 2) || !test1 (2, 1) || \n+        !test2 (1, 2) || test2 (2, 1) ||\n+        !test3 (1, 2) || test3 (2, 1) ||\n+        test4 (1, 2) || !test4 (2, 1)) {\n+        __builtin_abort();\t\n+    }\n+    return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 0;\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not { \"return 1;\" } \"optimized\" } } */"}, {"sha": "65af85344b62303294ca8b332d3556b092a01889", "filename": "gcc/testsuite/gcc.dg/pr96708-positive.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96708-positive.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96708-positive.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96708-positive.c?ref=abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+#include <stdbool.h>\n+\n+bool __attribute__ ((noinline))\n+test1(int a, int b)\n+{\n+    int tmp = (a < b) ? b : a;\n+    return tmp >= a;\n+}\n+\n+bool __attribute__ ((noinline))\n+test2(int a, int b)\n+{\n+    int tmp = (a < b) ? b : a;\n+    return tmp < a;\n+}\n+\n+bool __attribute__ ((noinline))\n+test3(int a, int b)\n+{\n+    int tmp = (a > b) ? b : a;\n+    return tmp <= a;\n+}\n+\n+bool __attribute__ ((noinline))\n+test4(int a, int b)\n+{\n+    int tmp = (a > b) ? b : a;\n+    return tmp > a;\n+}\n+\n+int main()\n+{\n+    if (!test1 (1, 2) || !test1 (2, 1) || \n+        test2 (1, 2) || test2 (2, 1) ||\n+        !test3 (1, 2) || !test3 (2, 1) ||\n+        test4 (1, 2) || test4 (2, 1)) {\n+        __builtin_abort();\t\n+    }\n+    return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 0;\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 1;\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not { \"MAX_EXPR\" } \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not { \"MIN_EXPR\" } \"optimized\" } } */"}]}