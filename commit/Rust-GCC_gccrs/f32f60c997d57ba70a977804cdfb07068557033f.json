{"sha": "f32f60c997d57ba70a977804cdfb07068557033f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMyZjYwYzk5N2Q1N2JhNzBhOTc3ODA0Y2RmYjA3MDY4NTU3MDMzZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-05-24T17:14:45Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-05-24T17:14:45Z"}, "message": "re PR libgcj/27731 (Math cbrt(), cosh(), expm1(), hypot(), log1p(), sinh() and tanh() not implemented)\n\n\tPR libgcj/27731:\n\t* java/lang/natMath.cc (cbrt, cosh, expm1, hypot, log1p, sinh,\n\ttanh): New methods.\n\t* java/lang/Math.java (cbrt, cosh, expm1, hypot, log1p, sinh,\n\ttanh): Declare.\n\nFrom-SVN: r114045", "tree": {"sha": "163905593230d6153f822639a08dcee4912f3849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/163905593230d6153f822639a08dcee4912f3849"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f32f60c997d57ba70a977804cdfb07068557033f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32f60c997d57ba70a977804cdfb07068557033f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f32f60c997d57ba70a977804cdfb07068557033f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32f60c997d57ba70a977804cdfb07068557033f/comments", "author": null, "committer": null, "parents": [{"sha": "b7ee72de2db0a89db568b94650e06ead6ed1feaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ee72de2db0a89db568b94650e06ead6ed1feaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ee72de2db0a89db568b94650e06ead6ed1feaf"}], "stats": {"total": 194, "additions": 192, "deletions": 2}, "files": [{"sha": "f66b766baae063861078a5df913f092947b76598", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32f60c997d57ba70a977804cdfb07068557033f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32f60c997d57ba70a977804cdfb07068557033f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f32f60c997d57ba70a977804cdfb07068557033f", "patch": "@@ -1,3 +1,11 @@\n+2006-05-24  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libgcj/27731:\n+\t* java/lang/natMath.cc (cbrt, cosh, expm1, hypot, log1p, sinh,\n+\ttanh): New methods.\n+\t* java/lang/Math.java (cbrt, cosh, expm1, hypot, log1p, sinh,\n+\ttanh): Declare.\n+\n 2006-05-22  Mark Wielaard  <mark@klomp.org>\n \n \t* HACKING: Update GNU Classpath import instructions."}, {"sha": "836b8bd8636155ee949f5fb4bfa5e4e9c65272e4", "filename": "libjava/java/lang/Math.java", "status": "modified", "additions": 148, "deletions": 1, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32f60c997d57ba70a977804cdfb07068557033f/libjava%2Fjava%2Flang%2FMath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32f60c997d57ba70a977804cdfb07068557033f/libjava%2Fjava%2Flang%2FMath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FMath.java?ref=f32f60c997d57ba70a977804cdfb07068557033f", "patch": "@@ -1,5 +1,5 @@\n /* java.lang.Math -- common mathematical functions, native allowed\n-   Copyright (C) 1998, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2002, 2003, 2006 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -648,6 +648,87 @@ public static double toDegrees(double rads)\n     return (rads * 180) / PI;\n   }\n \n+  /**\n+   * <p>\n+   * Take a cube root. If the argument is <code>NaN</code>, an infinity or\n+   * zero, then the original value is returned.  The returned result is\n+   * within 1 ulp of the exact result.  For a finite value, <code>x</code>,\n+   * the cube root of <code>-x</code> is equal to the negation of the cube root\n+   * of <code>x</code>. \n+   * </p>\n+   * <p>\n+   * For a square root, use <code>sqrt</code>.  For other roots, use\n+   * <code>pow(a, 1 / rootNumber)</code>.\n+   * </p>\n+   *\n+   * @param a the numeric argument\n+   * @return the cube root of the argument\n+   * @see #sqrt(double)\n+   * @see #pow(double, double)\n+   * @since 1.5\n+   */\n+  public static native double cbrt(double a);\n+\n+  /**\n+   * <p>\n+   * Returns the hyperbolic cosine of the given value.  For a value,\n+   * <code>x</code>, the hyperbolic cosine is <code>(e<sup>x</sup> + \n+   * e<sup>-x</sup>)/2</code>\n+   * with <code>e</code> being <a href=\"#E\">Euler's number</a>.  The returned\n+   * result is within 2.5 ulps of the exact result.\n+   * </p>\n+   * <p>\n+   * If the supplied value is <code>NaN</code>, then the original value is\n+   * returned.  For either infinity, positive infinity is returned.\n+   * The hyperbolic cosine of zero is 1.0.\n+   * </p>\n+   * \n+   * @param a the numeric argument\n+   * @return the hyperbolic cosine of <code>a</code>.\n+   * @since 1.5\n+   */\n+  public static native double cosh(double a);\n+\n+  /**\n+   * <p>\n+   * Returns <code>e<sup>a</sup> - 1.  For values close to 0, the\n+   * result of <code>expm1(a) + 1</code> tend to be much closer to the\n+   * exact result than simply <code>exp(x)</code>.  The result is within\n+   * 1 ulp of the exact result, and results are semi-monotonic.  For finite\n+   * inputs, the returned value is greater than or equal to -1.0.  Once\n+   * a result enters within half a ulp of this limit, the limit is returned.\n+   * </p>   \n+   * <p>\n+   * For <code>NaN</code>, positive infinity and zero, the original value\n+   * is returned.  Negative infinity returns a result of -1.0 (the limit).\n+   * </p>\n+   * \n+   * @param a the numeric argument\n+   * @return <code>e<sup>a</sup> - 1</code>\n+   * @since 1.5\n+   */\n+  public static native double expm1(double a);\n+\n+  /**\n+   * <p>\n+   * Returns the hypotenuse, <code>a<sup>2</sup> + b<sup>2</sup></code>,\n+   * without intermediate overflow or underflow.  The returned result is\n+   * within 1 ulp of the exact result.  If one parameter is held constant,\n+   * then the result in the other parameter is semi-monotonic.\n+   * </p>\n+   * <p>\n+   * If either of the arguments is an infinity, then the returned result\n+   * is positive infinity.  Otherwise, if either argument is <code>NaN</code>,\n+   * then <code>NaN</code> is returned.\n+   * </p>\n+   * \n+   * @param a the first parameter.\n+   * @param b the second parameter.\n+   * @return the hypotenuse matching the supplied parameters.\n+   * @since 1.5\n+   */\n+  public static native double hypot(double a, double b);\n+\n   /**\n    * <p>\n    * Returns the base 10 logarithm of the supplied value.  The returned\n@@ -668,6 +749,28 @@ public static double toDegrees(double rads)\n    */\n   public static native double log10(double a);\n \n+  /**\n+   * <p>\n+   * Returns the natural logarithm resulting from the sum of the argument,\n+   * <code>a</code> and 1.  For values close to 0, the\n+   * result of <code>log1p(a)</code> tend to be much closer to the\n+   * exact result than simply <code>log(1.0+a)</code>.  The returned\n+   * result is within 1 ulp of the exact result, and the results are\n+   * semi-monotonic.\n+   * </p>\n+   * <p>\n+   * Arguments of either <code>NaN</code> or less than -1 return\n+   * <code>NaN</code>.  An argument of positive infinity or zero\n+   * returns the original argument.  Negative infinity is returned from an\n+   * argument of -1.\n+   * </p>\n+   *\n+   * @param a the numeric argument.\n+   * @return the natural logarithm of <code>a</code> + 1.\n+   * @since 1.5\n+   */\n+  public static native double log1p(double a);\n+\n   /**\n    * <p>\n    * Returns the sign of the argument as follows:\n@@ -722,6 +825,50 @@ public static float signum(float a)\n     return a;\n   }\n \n+  /**\n+   * <p>\n+   * Returns the hyperbolic sine of the given value.  For a value,\n+   * <code>x</code>, the hyperbolic sine is <code>(e<sup>x</sup> - \n+   * e<sup>-x</sup>)/2</code>\n+   * with <code>e</code> being <a href=\"#E\">Euler's number</a>.  The returned\n+   * result is within 2.5 ulps of the exact result.\n+   * </p>\n+   * <p>\n+   * If the supplied value is <code>NaN</code>, an infinity or a zero, then the\n+   * original value is returned.\n+   * </p>\n+   * \n+   * @param a the numeric argument\n+   * @return the hyperbolic sine of <code>a</code>.\n+   * @since 1.5\n+   */\n+  public static native double sinh(double a);\n+\n+  /**\n+   * <p>\n+   * Returns the hyperbolic tangent of the given value.  For a value,\n+   * <code>x</code>, the hyperbolic tangent is <code>(e<sup>x</sup> - \n+   * e<sup>-x</sup>)/(e<sup>x</sup> + e<sup>-x</sup>)</code>\n+   * (i.e. <code>sinh(a)/cosh(a)</code>)\n+   * with <code>e</code> being <a href=\"#E\">Euler's number</a>.  The returned\n+   * result is within 2.5 ulps of the exact result.  The absolute value\n+   * of the exact result is always less than 1.  Computed results are thus\n+   * less than or equal to 1 for finite arguments, with results within\n+   * half a ulp of either positive or negative 1 returning the appropriate\n+   * limit value (i.e. as if the argument was an infinity).\n+   * </p>\n+   * <p>\n+   * If the supplied value is <code>NaN</code> or zero, then the original\n+   * value is returned.  Positive infinity returns +1.0 and negative infinity\n+   * returns -1.0.\n+   * </p>\n+   * \n+   * @param a the numeric argument\n+   * @return the hyperbolic tangent of <code>a</code>.\n+   * @since 1.5\n+   */\n+  public static native double tanh(double a);\n+\n   /**\n    * Return the ulp for the given double argument.  The ulp is the\n    * difference between the argument and the next larger double.  Note"}, {"sha": "d86d6307da8b96866b57125376ffa91e1291bc1f", "filename": "libjava/java/lang/natMath.cc", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32f60c997d57ba70a977804cdfb07068557033f/libjava%2Fjava%2Flang%2FnatMath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32f60c997d57ba70a977804cdfb07068557033f/libjava%2Fjava%2Flang%2FnatMath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatMath.cc?ref=f32f60c997d57ba70a977804cdfb07068557033f", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2000, 2002  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2002, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -107,6 +107,41 @@ jdouble java::lang::Math::log10(jdouble x)\n   return (jdouble)::log10((double)x);\n }  \n \n+jdouble java::lang::Math::cbrt(jdouble x)\n+{\n+  return (jdouble)::cbrt((double)x);\n+}\n+\n+jdouble java::lang::Math::cosh(jdouble x)\n+{\n+  return (jdouble)::cosh((double)x);\n+}\n+\n+jdouble java::lang::Math::expm1(jdouble x)\n+{\n+  return (jdouble)::expm1((double)x);\n+}\n+\n+jdouble java::lang::Math::hypot(jdouble x, jdouble y)\n+{\n+  return (jdouble)::hypot((double)x, (double)y);\n+}\n+\n+jdouble java::lang::Math::log1p(jdouble x)\n+{\n+  return (jdouble)::log1p((double)x);\n+}\n+\n+jdouble java::lang::Math::sinh(jdouble x)\n+{\n+  return (jdouble)::sinh((double)x);\n+}\n+\n+jdouble java::lang::Math::tanh(jdouble x)\n+{\n+  return (jdouble)::tanh((double)x);\n+}\n+\n static inline int\n floatToIntBits (jfloat value)\n {"}]}