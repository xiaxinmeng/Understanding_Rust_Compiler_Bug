{"sha": "1f2071fafdcde5ae2cbff7336b28f43510d78419", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYyMDcxZmFmZGNkZTVhZTJjYmZmNzMzNmIyOGY0MzUxMGQ3ODQxOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2016-09-19T21:53:30Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2016-09-19T21:53:30Z"}, "message": "Define TS 18661-1 CR_DECIMAL_DIG in <float.h>.\n\nTS 18661-1 defines a macro CR_DECIMAL_DIG in <float.h>, for the number\nof decimal digits for which conversions between decimal character\nstrings and (IEEE) binary formats, in both directions, are correctly\nrounded.  This patch implements support for this macro in GCC's\n<float.h>.\n\nThe definition __UINTMAX_MAX__ is the right one for GCC's conversions\nof floating constants, since I made those use MPFR to make them\ncorrectly rounding.  The macro also covers standard library functions\nsuch as strtod and printf.  The definition is also correct for current\nglibc.  If any targets' libcs support correct rounding in a way that\nconforms to TS 18661-1 with a smaller value of CR_DECIMAL_DIG, making\n<float.h> reflect that could not be done in isolation without changes\nto the interpretation of floating constants as well, since a smaller\nCR_DECIMAL_DIG requires double rounding of floating constants (first\nto CR_DECIMAL_DIG decimal digits, then to the desired binary format).\n\nBoostrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc:\n\t* ginclude/float.h [__STDC_WANT_IEC_60559_BFP_EXT__]\n\t(CR_DECIMAL_DIG): New macro.\n\ngcc/testsuite:\n\t* gcc.dg/cr-decimal-dig-1.c: New test.\n\nFrom-SVN: r240249", "tree": {"sha": "ecf2e5e975a48025cf658592f3b195f1d7698743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecf2e5e975a48025cf658592f3b195f1d7698743"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f2071fafdcde5ae2cbff7336b28f43510d78419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f2071fafdcde5ae2cbff7336b28f43510d78419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f2071fafdcde5ae2cbff7336b28f43510d78419", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f2071fafdcde5ae2cbff7336b28f43510d78419/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63012d9a57edc950c5f30242d1e19318b5708060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63012d9a57edc950c5f30242d1e19318b5708060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63012d9a57edc950c5f30242d1e19318b5708060"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "3b5fc9cb59b7d8bfda4ea972f1c757e4e388114c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f2071fafdcde5ae2cbff7336b28f43510d78419/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f2071fafdcde5ae2cbff7336b28f43510d78419/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f2071fafdcde5ae2cbff7336b28f43510d78419", "patch": "@@ -1,3 +1,8 @@\n+2016-09-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/float.h [__STDC_WANT_IEC_60559_BFP_EXT__]\n+\t(CR_DECIMAL_DIG): New macro.\n+\n 2016-09-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* ginclude/stddef.h (max_align_t) [__i386__]: Add __float128"}, {"sha": "421f7351e37477760fcbcd506061739a1ce1cadd", "filename": "gcc/ginclude/float.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f2071fafdcde5ae2cbff7336b28f43510d78419/gcc%2Fginclude%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f2071fafdcde5ae2cbff7336b28f43510d78419/gcc%2Fginclude%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Ffloat.h?ref=1f2071fafdcde5ae2cbff7336b28f43510d78419", "patch": "@@ -185,6 +185,13 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #endif /* C11 */\n \n+#ifdef __STDC_WANT_IEC_60559_BFP_EXT__\n+/* Number of decimal digits for which conversions between decimal\n+   character strings and binary formats, in both directions, are\n+   correctly rounded.  */\n+#define CR_DECIMAL_DIG\t__UINTMAX_MAX__\n+#endif\n+\n #ifdef __STDC_WANT_IEC_60559_TYPES_EXT__\n /* Constants for _FloatN and _FloatNx types from TS 18661-3.  See\n    comments above for their semantics.  */"}, {"sha": "c825702acbab3545f6d796dd46713ca89cb2c7c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f2071fafdcde5ae2cbff7336b28f43510d78419/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f2071fafdcde5ae2cbff7336b28f43510d78419/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f2071fafdcde5ae2cbff7336b28f43510d78419", "patch": "@@ -1,3 +1,7 @@\n+2016-09-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/cr-decimal-dig-1.c: New test.\n+\n 2016-09-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/float128-align.c, gcc.dg/float128x-align.c,"}, {"sha": "2bbc40c1eaa75d5b721f10b0047a7d75013762f9", "filename": "gcc/testsuite/gcc.dg/cr-decimal-dig-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f2071fafdcde5ae2cbff7336b28f43510d78419/gcc%2Ftestsuite%2Fgcc.dg%2Fcr-decimal-dig-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f2071fafdcde5ae2cbff7336b28f43510d78419/gcc%2Ftestsuite%2Fgcc.dg%2Fcr-decimal-dig-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcr-decimal-dig-1.c?ref=1f2071fafdcde5ae2cbff7336b28f43510d78419", "patch": "@@ -0,0 +1,14 @@\n+/* Test TS 18661-1 CR_DECIMAL_DIG.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11\" } */\n+\n+#define __STDC_WANT_IEC_60559_BFP_EXT__\n+#include <float.h>\n+\n+#ifndef CR_DECIMAL_DIG\n+#error \"CR_DECIMAL_DIG not defined\"\n+#endif\n+\n+#if CR_DECIMAL_DIG < DECIMAL_DIG + 3\n+#error \"CR_DECIMAL_DIG too small\"\n+#endif"}]}