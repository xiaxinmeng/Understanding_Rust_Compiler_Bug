{"sha": "429819203e1a237e28bda2c99c0a49d5501590e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI5ODE5MjAzZTFhMjM3ZTI4YmRhMmM5OWMwYTQ5ZDU1MDE1OTBlMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-02T02:34:14Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-02T02:34:14Z"}, "message": "(ITERATOR_P, ITERATOR_BOUND_P): New macros.\n\nFrom-SVN: r3584", "tree": {"sha": "f80a5871cf179543ad51a95eec8f4fd1e8412752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f80a5871cf179543ad51a95eec8f4fd1e8412752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/429819203e1a237e28bda2c99c0a49d5501590e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429819203e1a237e28bda2c99c0a49d5501590e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429819203e1a237e28bda2c99c0a49d5501590e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429819203e1a237e28bda2c99c0a49d5501590e2/comments", "author": null, "committer": null, "parents": [{"sha": "726b521731885478cd6638150f69062715b06b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726b521731885478cd6638150f69062715b06b92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/726b521731885478cd6638150f69062715b06b92"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "876f728d23e391112eab368cf49030a1d46a3664", "filename": "gcc/c-tree.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429819203e1a237e28bda2c99c0a49d5501590e2/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429819203e1a237e28bda2c99c0a49d5501590e2/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=429819203e1a237e28bda2c99c0a49d5501590e2", "patch": "@@ -137,6 +137,13 @@ struct lang_type\n        || TYPE_MAIN_VARIANT (t) == unsigned_char_type_node\t\\\n        || TYPE_MAIN_VARIANT (t) == short_integer_type_node\t\\\n        || TYPE_MAIN_VARIANT (t) == short_unsigned_type_node))\n+\n+/* In a VAR_DECL, means the variable is really an iterator.  */\n+#define ITERATOR_P(D) (DECL_LANG_FLAG_4(D))\n+\n+/* In a VAR_DECL for an iterator, means we are within\n+   an explicit loop over that iterator.  */\n+#define ITERATOR_BOUND_P(NODE) ((NODE)->common.readonly_flag)\n \f\n extern int maybe_objc_comptypes                 PROTO((tree, tree));\n extern tree maybe_building_objc_message_expr    PROTO((void));\n@@ -312,6 +319,14 @@ extern tree digest_init                         PROTO((tree, tree, tree *, int,\n extern tree parser_build_binary_op              PROTO((enum tree_code, tree, tree));\n extern void store_init_value                    PROTO((tree, tree));\n \n+/* in c-iterate.c */\n+extern void iterator_expand\t\t\tPROTO((tree));\n+extern void iterator_for_loop_start\t\tPROTO((tree));\n+extern void iterator_for_loop_end\t\tPROTO((tree));\n+extern void iterator_for_loop_record\t\tPROTO((tree));\n+extern void push_iterator_stack\t\t\tPROTO((void));\n+extern void pop_iterator_stack\t\t\tPROTO((void));\n+\n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */\n "}]}