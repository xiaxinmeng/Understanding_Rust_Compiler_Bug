{"sha": "2069d6fcff179ad5519d7c59d52308a60af51e48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA2OWQ2ZmNmZjE3OWFkNTUxOWQ3YzU5ZDUyMzA4YTYwYWY1MWU0OA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2014-11-15T16:56:27Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2014-11-15T16:56:27Z"}, "message": "xmmintrin.h (_mm_add_ps, [...]): Use vector extensions instead of builtins.\n\n2014-11-15  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* config/i386/xmmintrin.h (_mm_add_ps, _mm_sub_ps, _mm_mul_ps,\n\t_mm_div_ps, _mm_store_ss, _mm_cvtss_f32): Use vector extensions\n\tinstead of builtins.\n\t* config/i386/emmintrin.h (__v2du, __v4su, __v8hu, __v16qu): New\n\ttypedefs.\n\t(_mm_sqrt_sd): Fix comment.\n\t(_mm_add_epi8, _mm_add_epi16, _mm_add_epi32, _mm_add_epi64,\n\t_mm_sub_epi8, _mm_sub_epi16, _mm_sub_epi32, _mm_sub_epi64,\n\t_mm_mullo_epi16, _mm_cmpeq_epi8, _mm_cmpeq_epi16, _mm_cmpeq_epi32,\n\t_mm_cmplt_epi8, _mm_cmplt_epi16, _mm_cmplt_epi32, _mm_cmpgt_epi8,\n\t_mm_cmpgt_epi16, _mm_cmpgt_epi32, _mm_and_si128, _mm_or_si128,\n\t_mm_xor_si128, _mm_store_sd, _mm_cvtsd_f64, _mm_storeh_pd,\n\t_mm_cvtsi128_si64, _mm_cvtsi128_si64x, _mm_add_pd, _mm_sub_pd,\n\t_mm_mul_pd, _mm_div_pd, _mm_storel_epi64, _mm_movepi64_pi64):\n\tUse vector extensions instead of builtins.\n\t* config/i386/smmintrin.h (_mm_cmpeq_epi64, _mm_cmpgt_epi64,\n\t_mm_mullo_epi32): Likewise.\n\t* config/i386/avxintrin.h (__v4du, __v8su, __v16hu, __v32qu):\n\tNew typedefs.\n\t(_mm256_add_pd, _mm256_add_ps, _mm256_div_pd, _mm256_div_ps,\n\t_mm256_mul_pd, _mm256_mul_ps, _mm256_sub_pd, _mm256_sub_ps):\n\tUse vector extensions instead of builtins.\n\t* config/i386/avx2intrin.h (_mm256_cmpeq_epi8, _mm256_cmpeq_epi16,\n\t_mm256_cmpeq_epi32, _mm256_cmpeq_epi64, _mm256_cmpgt_epi8,\n\t_mm256_cmpgt_epi16, _mm256_cmpgt_epi32, _mm256_cmpgt_epi64,\n\t_mm256_and_si256, _mm256_or_si256, _mm256_xor_si256, _mm256_add_epi8,\n\t_mm256_add_epi16, _mm256_add_epi32, _mm256_add_epi64,\n\t_mm256_mullo_epi16, _mm256_mullo_epi32, _mm256_sub_epi8,\n\t_mm256_sub_epi16, _mm256_sub_epi32, _mm256_sub_epi64): Likewise.\n\t* config/i386/avx512fintrin.h (__v8du, __v16su, __v32hu, __v64qu):\n\tNew typedefs.\n\t(_mm512_or_si512, _mm512_or_epi32, _mm512_or_epi64, _mm512_xor_si512,\n\t_mm512_xor_epi32, _mm512_xor_epi64, _mm512_and_si512,\n\t_mm512_and_epi32, _mm512_and_epi64, _mm512_mullo_epi32,\n\t_mm512_add_epi64, _mm512_sub_epi64, _mm512_add_epi32,\n\t_mm512_sub_epi32, _mm512_add_pd, _mm512_add_ps, _mm512_sub_pd,\n\t_mm512_sub_ps, _mm512_mul_pd, _mm512_mul_ps, _mm512_div_pd,\n\t_mm512_div_ps): Use vector extensions instead of builtins.\n\t* config/i386/avx512bwintrin.h (_mm512_mullo_epi16, _mm512_add_epi8,\n\t_mm512_sub_epi8, _mm512_sub_epi16, _mm512_add_epi16): Likewise.\n\t* config/i386/avx512dqintrin.h (_mm512_mullo_epi64): Likewise.\n\t* config/i386/avx512vldqintrin.h (_mm256_mullo_epi64, _mm_mullo_epi64):\n\tLikewise.\n\ngcc/testsuite/\n\t* gcc.target/i386/intrinsics_opt-1.c: New testcase.\n\t* gcc.target/i386/intrinsics_opt-2.c: Likewise.\n\t* gcc.target/i386/intrinsics_opt-3.c: Likewise.\n\t* gcc.target/i386/intrinsics_opt-4.c: Likewise.\n\nFrom-SVN: r217608", "tree": {"sha": "037a75eb984e51679a61d78622a9b56be9d586fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/037a75eb984e51679a61d78622a9b56be9d586fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2069d6fcff179ad5519d7c59d52308a60af51e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2069d6fcff179ad5519d7c59d52308a60af51e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2069d6fcff179ad5519d7c59d52308a60af51e48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2069d6fcff179ad5519d7c59d52308a60af51e48/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca9a04dab65aa459a69364376e4fd6188f5f78a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9a04dab65aa459a69364376e4fd6188f5f78a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca9a04dab65aa459a69364376e4fd6188f5f78a3"}], "stats": {"total": 450, "additions": 218, "deletions": 232}, "files": [{"sha": "e7053962b9503f4332a30a42ad175745c583d623", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -1,3 +1,49 @@\n+2014-11-15  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* config/i386/xmmintrin.h (_mm_add_ps, _mm_sub_ps, _mm_mul_ps,\n+\t_mm_div_ps, _mm_store_ss, _mm_cvtss_f32): Use vector extensions\n+\tinstead of builtins.\n+\t* config/i386/emmintrin.h (__v2du, __v4su, __v8hu, __v16qu): New\n+\ttypedefs.\n+\t(_mm_sqrt_sd): Fix comment.\n+\t(_mm_add_epi8, _mm_add_epi16, _mm_add_epi32, _mm_add_epi64,\n+\t_mm_sub_epi8, _mm_sub_epi16, _mm_sub_epi32, _mm_sub_epi64,\n+\t_mm_mullo_epi16, _mm_cmpeq_epi8, _mm_cmpeq_epi16, _mm_cmpeq_epi32,\n+\t_mm_cmplt_epi8, _mm_cmplt_epi16, _mm_cmplt_epi32, _mm_cmpgt_epi8,\n+\t_mm_cmpgt_epi16, _mm_cmpgt_epi32, _mm_and_si128, _mm_or_si128,\n+\t_mm_xor_si128, _mm_store_sd, _mm_cvtsd_f64, _mm_storeh_pd,\n+\t_mm_cvtsi128_si64, _mm_cvtsi128_si64x, _mm_add_pd, _mm_sub_pd,\n+\t_mm_mul_pd, _mm_div_pd, _mm_storel_epi64, _mm_movepi64_pi64):\n+\tUse vector extensions instead of builtins.\n+\t* config/i386/smmintrin.h (_mm_cmpeq_epi64, _mm_cmpgt_epi64,\n+\t_mm_mullo_epi32): Likewise.\n+\t* config/i386/avxintrin.h (__v4du, __v8su, __v16hu, __v32qu):\n+\tNew typedefs.\n+\t(_mm256_add_pd, _mm256_add_ps, _mm256_div_pd, _mm256_div_ps,\n+\t_mm256_mul_pd, _mm256_mul_ps, _mm256_sub_pd, _mm256_sub_ps):\n+\tUse vector extensions instead of builtins.\n+\t* config/i386/avx2intrin.h (_mm256_cmpeq_epi8, _mm256_cmpeq_epi16,\n+\t_mm256_cmpeq_epi32, _mm256_cmpeq_epi64, _mm256_cmpgt_epi8,\n+\t_mm256_cmpgt_epi16, _mm256_cmpgt_epi32, _mm256_cmpgt_epi64,\n+\t_mm256_and_si256, _mm256_or_si256, _mm256_xor_si256, _mm256_add_epi8,\n+\t_mm256_add_epi16, _mm256_add_epi32, _mm256_add_epi64,\n+\t_mm256_mullo_epi16, _mm256_mullo_epi32, _mm256_sub_epi8,\n+\t_mm256_sub_epi16, _mm256_sub_epi32, _mm256_sub_epi64): Likewise.\n+\t* config/i386/avx512fintrin.h (__v8du, __v16su, __v32hu, __v64qu):\n+\tNew typedefs.\n+\t(_mm512_or_si512, _mm512_or_epi32, _mm512_or_epi64, _mm512_xor_si512,\n+\t_mm512_xor_epi32, _mm512_xor_epi64, _mm512_and_si512,\n+\t_mm512_and_epi32, _mm512_and_epi64, _mm512_mullo_epi32,\n+\t_mm512_add_epi64, _mm512_sub_epi64, _mm512_add_epi32,\n+\t_mm512_sub_epi32, _mm512_add_pd, _mm512_add_ps, _mm512_sub_pd,\n+\t_mm512_sub_ps, _mm512_mul_pd, _mm512_mul_ps, _mm512_div_pd,\n+\t_mm512_div_ps): Use vector extensions instead of builtins.\n+\t* config/i386/avx512bwintrin.h (_mm512_mullo_epi16, _mm512_add_epi8,\n+\t_mm512_sub_epi8, _mm512_sub_epi16, _mm512_add_epi16): Likewise.\n+\t* config/i386/avx512dqintrin.h (_mm512_mullo_epi64): Likewise.\n+\t* config/i386/avx512vldqintrin.h (_mm256_mullo_epi64, _mm_mullo_epi64):\n+\tLikewise.\n+\n 2014-11-15  Jan Hubicka <hubicka@ucw.cz>\n \n \t* lto-streamer-out.c (hash_tree): Use cl_optimization_hash."}, {"sha": "bca9c9e620db9c7fecafc4fd0c319478944a66df", "filename": "gcc/config/i386/avx2intrin.h", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx2intrin.h?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -104,28 +104,28 @@ extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_add_epi8 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_paddb256 ((__v32qi)__A, (__v32qi)__B);\n+  return (__m256i) ((__v32qu)__A + (__v32qu)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_add_epi16 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_paddw256 ((__v16hi)__A, (__v16hi)__B);\n+  return (__m256i) ((__v16hu)__A + (__v16hu)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_add_epi32 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_paddd256 ((__v8si)__A, (__v8si)__B);\n+  return (__m256i) ((__v8su)__A + (__v8su)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_add_epi64 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_paddq256 ((__v4di)__A, (__v4di)__B);\n+  return (__m256i) ((__v4du)__A + (__v4du)__B);\n }\n \n extern __inline __m256i\n@@ -178,7 +178,7 @@ extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_and_si256 (__m256i __A, __m256i __B)\n {\n-  return (__m256i) __builtin_ia32_andsi256 ((__v4di)__A, (__v4di)__B);\n+  return (__m256i) ((__v4du)__A & (__v4du)__B);\n }\n \n extern __inline __m256i\n@@ -230,59 +230,56 @@ extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpeq_epi8 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_pcmpeqb256 ((__v32qi)__A, (__v32qi)__B);\n+  return (__m256i) ((__v32qi)__A == (__v32qi)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpeq_epi16 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_pcmpeqw256 ((__v16hi)__A, (__v16hi)__B);\n+  return (__m256i) ((__v16hi)__A == (__v16hi)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpeq_epi32 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_pcmpeqd256 ((__v8si)__A, (__v8si)__B);\n+  return (__m256i) ((__v8si)__A == (__v8si)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpeq_epi64 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_pcmpeqq256 ((__v4di)__A, (__v4di)__B);\n+  return (__m256i) ((__v4di)__A == (__v4di)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpgt_epi8 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_pcmpgtb256 ((__v32qi)__A,\n-\t\t\t\t\t     (__v32qi)__B);\n+  return (__m256i) ((__v32qi)__A > (__v32qi)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpgt_epi16 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_pcmpgtw256 ((__v16hi)__A,\n-\t\t\t\t\t     (__v16hi)__B);\n+  return (__m256i) ((__v16hi)__A > (__v16hi)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpgt_epi32 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_pcmpgtd256 ((__v8si)__A,\n-\t\t\t\t\t     (__v8si)__B);\n+  return (__m256i) ((__v8si)__A > (__v8si)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpgt_epi64 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_pcmpgtq256 ((__v4di)__A, (__v4di)__B);\n+  return (__m256i) ((__v4di)__A > (__v4di)__B);\n }\n \n extern __inline __m256i\n@@ -555,14 +552,14 @@ extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mullo_epi16 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_pmullw256 ((__v16hi)__A, (__v16hi)__B);\n+  return (__m256i) ((__v16hu)__A * (__v16hu)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mullo_epi32 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_pmulld256 ((__v8si)__A, (__v8si)__B);\n+  return (__m256i) ((__v8su)__A * (__v8su)__B);\n }\n \n extern __inline __m256i\n@@ -576,7 +573,7 @@ extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_or_si256 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_por256 ((__v4di)__A, (__v4di)__B);\n+  return (__m256i) ((__v4du)__A | (__v4du)__B);\n }\n \n extern __inline __m256i\n@@ -785,28 +782,28 @@ extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_sub_epi8 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_psubb256 ((__v32qi)__A, (__v32qi)__B);\n+  return (__m256i) ((__v32qu)__A - (__v32qu)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_sub_epi16 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_psubw256 ((__v16hi)__A, (__v16hi)__B);\n+  return (__m256i) ((__v16hu)__A - (__v16hu)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_sub_epi32 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_psubd256 ((__v8si)__A, (__v8si)__B);\n+  return (__m256i) ((__v8su)__A - (__v8su)__B);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_sub_epi64 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_psubq256 ((__v4di)__A, (__v4di)__B);\n+  return (__m256i) ((__v4du)__A - (__v4du)__B);\n }\n \n extern __inline __m256i\n@@ -897,7 +894,7 @@ extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_xor_si256 (__m256i __A, __m256i __B)\n {\n-  return (__m256i)__builtin_ia32_pxor256 ((__v4di)__A, (__v4di)__B);\n+  return (__m256i) ((__v4du)__A ^ (__v4du)__B);\n }\n \n extern __inline __m256i"}, {"sha": "41a9a61206ea2726b38e2068aa57a6d25d0ec784", "filename": "gcc/config/i386/avx512bwintrin.h", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -464,11 +464,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mullo_epi16 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_pmullw512_mask ((__v32hi) __A,\n-\t\t\t\t\t\t  (__v32hi) __B,\n-\t\t\t\t\t\t  (__v32hi)\n-\t\t\t\t\t\t  _mm512_setzero_hi (),\n-\t\t\t\t\t\t  (__mmask32) -1);\n+  return (__m512i) ((__v32hu) __A * (__v32hu) __B);\n }\n \n extern __inline __m512i\n@@ -673,11 +669,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_add_epi8 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_paddb512_mask ((__v64qi) __A,\n-\t\t\t\t\t\t (__v64qi) __B,\n-\t\t\t\t\t\t (__v64qi)\n-\t\t\t\t\t\t _mm512_setzero_qi (),\n-\t\t\t\t\t\t (__mmask64) -1);\n+  return (__m512i) ((__v64qu) __A + (__v64qu) __B);\n }\n \n extern __inline __m512i\n@@ -706,11 +698,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_sub_epi8 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_psubb512_mask ((__v64qi) __A,\n-\t\t\t\t\t\t (__v64qi) __B,\n-\t\t\t\t\t\t (__v64qi)\n-\t\t\t\t\t\t _mm512_setzero_qi (),\n-\t\t\t\t\t\t (__mmask64) -1);\n+  return (__m512i) ((__v64qu) __A - (__v64qu) __B);\n }\n \n extern __inline __m512i\n@@ -904,11 +892,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_sub_epi16 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_psubw512_mask ((__v32hi) __A,\n-\t\t\t\t\t\t (__v32hi) __B,\n-\t\t\t\t\t\t (__v32hi)\n-\t\t\t\t\t\t _mm512_setzero_hi (),\n-\t\t\t\t\t\t (__mmask32) -1);\n+  return (__m512i) ((__v32hu) __A - (__v32hu) __B);\n }\n \n extern __inline __m512i\n@@ -1003,11 +987,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_add_epi16 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_paddw512_mask ((__v32hi) __A,\n-\t\t\t\t\t\t (__v32hi) __B,\n-\t\t\t\t\t\t (__v32hi)\n-\t\t\t\t\t\t _mm512_setzero_hi (),\n-\t\t\t\t\t\t (__mmask32) -1);\n+  return (__m512i) ((__v32hu) __A + (__v32hu) __B);\n }\n \n extern __inline __m512i"}, {"sha": "82f181c3a5b20ea82e0ce8ac5d7253fffabd2f30", "filename": "gcc/config/i386/avx512dqintrin.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -225,11 +225,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mullo_epi64 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_pmullq512_mask ((__v8di) __A,\n-\t\t\t\t\t\t  (__v8di) __B,\n-\t\t\t\t\t\t  (__v8di)\n-\t\t\t\t\t\t  _mm512_setzero_si512 (),\n-\t\t\t\t\t\t  (__mmask8) -1);\n+  return (__m512i) ((__v8du) __A * (__v8du) __B);\n }\n \n extern __inline __m512i"}, {"sha": "66f51999345a4a8a6097201d4d8629c5fa46b839", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 26, "deletions": 118, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -38,9 +38,13 @@\n typedef double __v8df __attribute__ ((__vector_size__ (64)));\n typedef float __v16sf __attribute__ ((__vector_size__ (64)));\n typedef long long __v8di __attribute__ ((__vector_size__ (64)));\n+typedef unsigned long long __v8du __attribute__ ((__vector_size__ (64)));\n typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+typedef unsigned int __v16su __attribute__ ((__vector_size__ (64)));\n typedef short __v32hi __attribute__ ((__vector_size__ (64)));\n+typedef unsigned short __v32hu __attribute__ ((__vector_size__ (64)));\n typedef char __v64qi __attribute__ ((__vector_size__ (64)));\n+typedef unsigned char __v64qu __attribute__ ((__vector_size__ (64)));\n \n /* The Intel API is flexible enough that we must allow aliasing with other\n    vector types, and their scalar components.  */\n@@ -515,11 +519,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mullo_epi32 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_pmulld512_mask ((__v16si) __A,\n-\t\t\t\t\t\t  (__v16si) __B,\n-\t\t\t\t\t\t  (__v16si)\n-\t\t\t\t\t\t  _mm512_undefined_si512 (),\n-\t\t\t\t\t\t  (__mmask16) -1);\n+  return (__m512i) ((__v16su) __A * (__v16su) __B);\n }\n \n extern __inline __m512i\n@@ -642,11 +642,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_add_epi64 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_paddq512_mask ((__v8di) __A,\n-\t\t\t\t\t\t (__v8di) __B,\n-\t\t\t\t\t\t (__v8di)\n-\t\t\t\t\t\t _mm512_undefined_si512 (),\n-\t\t\t\t\t\t (__mmask8) -1);\n+  return (__m512i) ((__v8du) __A + (__v8du) __B);\n }\n \n extern __inline __m512i\n@@ -674,11 +670,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_sub_epi64 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_psubq512_mask ((__v8di) __A,\n-\t\t\t\t\t\t (__v8di) __B,\n-\t\t\t\t\t\t (__v8di)\n-\t\t\t\t\t\t _mm512_undefined_pd (),\n-\t\t\t\t\t\t (__mmask8) -1);\n+  return (__m512i) ((__v8du) __A - (__v8du) __B);\n }\n \n extern __inline __m512i\n@@ -802,11 +794,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_add_epi32 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_paddd512_mask ((__v16si) __A,\n-\t\t\t\t\t\t (__v16si) __B,\n-\t\t\t\t\t\t (__v16si)\n-\t\t\t\t\t\t _mm512_undefined_si512 (),\n-\t\t\t\t\t\t (__mmask16) -1);\n+  return (__m512i) ((__v16su) __A + (__v16su) __B);\n }\n \n extern __inline __m512i\n@@ -865,11 +853,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_sub_epi32 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_psubd512_mask ((__v16si) __A,\n-\t\t\t\t\t\t (__v16si) __B,\n-\t\t\t\t\t\t (__v16si)\n-\t\t\t\t\t\t _mm512_undefined_si512 (),\n-\t\t\t\t\t\t (__mmask16) -1);\n+  return (__m512i) ((__v16su) __A - (__v16su) __B);\n }\n \n extern __inline __m512i\n@@ -6797,22 +6781,14 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_or_si512 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_pord512_mask ((__v16si) __A,\n-\t\t\t\t\t\t(__v16si) __B,\n-\t\t\t\t\t\t(__v16si)\n-\t\t\t\t\t\t_mm512_undefined_si512 (),\n-\t\t\t\t\t\t(__mmask16) -1);\n+  return (__m512i) ((__v16su) __A | (__v16su) __B);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_or_epi32 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_pord512_mask ((__v16si) __A,\n-\t\t\t\t\t\t(__v16si) __B,\n-\t\t\t\t\t\t(__v16si)\n-\t\t\t\t\t\t_mm512_undefined_si512 (),\n-\t\t\t\t\t\t(__mmask16) -1);\n+  return (__m512i) ((__v16su) __A | (__v16su) __B);\n }\n \n extern __inline __m512i\n@@ -6840,11 +6816,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_or_epi64 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_porq512_mask ((__v8di) __A,\n-\t\t\t\t\t\t(__v8di) __B,\n-\t\t\t\t\t\t(__v8di)\n-\t\t\t\t\t\t_mm512_undefined_si512 (),\n-\t\t\t\t\t\t(__mmask8) -1);\n+  return (__m512i) ((__v8du) __A | (__v8du) __B);\n }\n \n extern __inline __m512i\n@@ -6872,22 +6844,14 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_xor_si512 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_pxord512_mask ((__v16si) __A,\n-\t\t\t\t\t\t (__v16si) __B,\n-\t\t\t\t\t\t (__v16si)\n-\t\t\t\t\t\t _mm512_undefined_si512 (),\n-\t\t\t\t\t\t (__mmask16) -1);\n+  return (__m512i) ((__v16su) __A ^ (__v16su) __B);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_xor_epi32 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_pxord512_mask ((__v16si) __A,\n-\t\t\t\t\t\t (__v16si) __B,\n-\t\t\t\t\t\t (__v16si)\n-\t\t\t\t\t\t _mm512_undefined_si512 (),\n-\t\t\t\t\t\t (__mmask16) -1);\n+  return (__m512i) ((__v16su) __A ^ (__v16su) __B);\n }\n \n extern __inline __m512i\n@@ -6915,11 +6879,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_xor_epi64 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_pxorq512_mask ((__v8di) __A,\n-\t\t\t\t\t\t (__v8di) __B,\n-\t\t\t\t\t\t (__v8di)\n-\t\t\t\t\t\t _mm512_undefined_si512 (),\n-\t\t\t\t\t\t (__mmask8) -1);\n+  return (__m512i) ((__v8du) __A ^ (__v8du) __B);\n }\n \n extern __inline __m512i\n@@ -7128,22 +7088,14 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_and_si512 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_pandd512_mask ((__v16si) __A,\n-\t\t\t\t\t\t (__v16si) __B,\n-\t\t\t\t\t\t (__v16si)\n-\t\t\t\t\t\t _mm512_undefined_si512 (),\n-\t\t\t\t\t\t (__mmask16) -1);\n+  return (__m512i) ((__v16su) __A & (__v16su) __B);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_and_epi32 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_pandd512_mask ((__v16si) __A,\n-\t\t\t\t\t\t (__v16si) __B,\n-\t\t\t\t\t\t (__v16si)\n-\t\t\t\t\t\t _mm512_undefined_si512 (),\n-\t\t\t\t\t\t (__mmask16) -1);\n+  return (__m512i) ((__v16su) __A & (__v16su) __B);\n }\n \n extern __inline __m512i\n@@ -7171,11 +7123,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_and_epi64 (__m512i __A, __m512i __B)\n {\n-  return (__m512i) __builtin_ia32_pandq512_mask ((__v8di) __A,\n-\t\t\t\t\t\t (__v8di) __B,\n-\t\t\t\t\t\t (__v8di)\n-\t\t\t\t\t\t _mm512_undefined_si512 (),\n-\t\t\t\t\t\t (__mmask8) -1);\n+  return (__m512i) ((__v8du) __A & (__v8du) __B);\n }\n \n extern __inline __m512i\n@@ -10749,12 +10697,7 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_add_pd (__m512d __A, __m512d __B)\n {\n-  return (__m512d) __builtin_ia32_addpd512_mask ((__v8df) __A,\n-\t\t\t\t\t\t (__v8df) __B,\n-\t\t\t\t\t\t (__v8df)\n-\t\t\t\t\t\t _mm512_undefined_pd (),\n-\t\t\t\t\t\t (__mmask8) -1,\n-\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+  return (__m512d) ((__v8df)__A + (__v8df)__B);\n }\n \n extern __inline __m512d\n@@ -10784,12 +10727,7 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_add_ps (__m512 __A, __m512 __B)\n {\n-  return (__m512) __builtin_ia32_addps512_mask ((__v16sf) __A,\n-\t\t\t\t\t\t(__v16sf) __B,\n-\t\t\t\t\t\t(__v16sf)\n-\t\t\t\t\t\t_mm512_undefined_ps (),\n-\t\t\t\t\t\t(__mmask16) -1,\n-\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+  return (__m512) ((__v16sf)__A + (__v16sf)__B);\n }\n \n extern __inline __m512\n@@ -10819,12 +10757,7 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_sub_pd (__m512d __A, __m512d __B)\n {\n-  return (__m512d) __builtin_ia32_subpd512_mask ((__v8df) __A,\n-\t\t\t\t\t\t (__v8df) __B,\n-\t\t\t\t\t\t (__v8df)\n-\t\t\t\t\t\t _mm512_undefined_pd (),\n-\t\t\t\t\t\t (__mmask8) -1,\n-\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+  return (__m512d) ((__v8df)__A - (__v8df)__B);\n }\n \n extern __inline __m512d\n@@ -10854,12 +10787,7 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_sub_ps (__m512 __A, __m512 __B)\n {\n-  return (__m512) __builtin_ia32_subps512_mask ((__v16sf) __A,\n-\t\t\t\t\t\t(__v16sf) __B,\n-\t\t\t\t\t\t(__v16sf)\n-\t\t\t\t\t\t_mm512_undefined_ps (),\n-\t\t\t\t\t\t(__mmask16) -1,\n-\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+  return (__m512) ((__v16sf)__A - (__v16sf)__B);\n }\n \n extern __inline __m512\n@@ -10889,12 +10817,7 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mul_pd (__m512d __A, __m512d __B)\n {\n-  return (__m512d) __builtin_ia32_mulpd512_mask ((__v8df) __A,\n-\t\t\t\t\t\t (__v8df) __B,\n-\t\t\t\t\t\t (__v8df)\n-\t\t\t\t\t\t _mm512_undefined_pd (),\n-\t\t\t\t\t\t (__mmask8) -1,\n-\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+  return (__m512d) ((__v8df)__A * (__v8df)__B);\n }\n \n extern __inline __m512d\n@@ -10924,12 +10847,7 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mul_ps (__m512 __A, __m512 __B)\n {\n-  return (__m512) __builtin_ia32_mulps512_mask ((__v16sf) __A,\n-\t\t\t\t\t\t(__v16sf) __B,\n-\t\t\t\t\t\t(__v16sf)\n-\t\t\t\t\t\t_mm512_undefined_ps (),\n-\t\t\t\t\t\t(__mmask16) -1,\n-\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+  return (__m512) ((__v16sf)__A * (__v16sf)__B);\n }\n \n extern __inline __m512\n@@ -10959,12 +10877,7 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_div_pd (__m512d __M, __m512d __V)\n {\n-  return (__m512d) __builtin_ia32_divpd512_mask ((__v8df) __M,\n-\t\t\t\t\t\t (__v8df) __V,\n-\t\t\t\t\t\t (__v8df)\n-\t\t\t\t\t\t _mm512_undefined_pd (),\n-\t\t\t\t\t\t (__mmask8) -1,\n-\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+  return (__m512d) ((__v8df)__M / (__v8df)__V);\n }\n \n extern __inline __m512d\n@@ -10994,12 +10907,7 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_div_ps (__m512 __A, __m512 __B)\n {\n-  return (__m512) __builtin_ia32_divps512_mask ((__v16sf) __A,\n-\t\t\t\t\t\t(__v16sf) __B,\n-\t\t\t\t\t\t(__v16sf)\n-\t\t\t\t\t\t_mm512_undefined_ps (),\n-\t\t\t\t\t\t(__mmask16) -1,\n-\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+  return (__m512) ((__v16sf)__A / (__v16sf)__B);\n }\n \n extern __inline __m512"}, {"sha": "2be1bf771b43815f4552ca26c1ae7128115aa7ff", "filename": "gcc/config/i386/avx512vldqintrin.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Favx512vldqintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Favx512vldqintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vldqintrin.h?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -544,11 +544,7 @@ extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mullo_epi64 (__m256i __A, __m256i __B)\n {\n-  return (__m256i) __builtin_ia32_pmullq256_mask ((__v4di) __A,\n-\t\t\t\t\t\t  (__v4di) __B,\n-\t\t\t\t\t\t  (__v4di)\n-\t\t\t\t\t\t  _mm256_setzero_si256 (),\n-\t\t\t\t\t\t  (__mmask8) -1);\n+  return (__m256i) ((__v4du) __A * (__v4du) __B);\n }\n \n extern __inline __m256i\n@@ -577,11 +573,7 @@ extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mullo_epi64 (__m128i __A, __m128i __B)\n {\n-  return (__m128i) __builtin_ia32_pmullq128_mask ((__v2di) __A,\n-\t\t\t\t\t\t  (__v2di) __B,\n-\t\t\t\t\t\t  (__v2di)\n-\t\t\t\t\t\t  _mm_setzero_di (),\n-\t\t\t\t\t\t  (__mmask8) -1);\n+  return (__m128i) ((__v2du) __A * (__v2du) __B);\n }\n \n extern __inline __m128i"}, {"sha": "65e2145e2aaf2c5f9a45ef48344412c44b6a431f", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -41,9 +41,13 @@\n typedef double __v4df __attribute__ ((__vector_size__ (32)));\n typedef float __v8sf __attribute__ ((__vector_size__ (32)));\n typedef long long __v4di __attribute__ ((__vector_size__ (32)));\n+typedef unsigned long long __v4du __attribute__ ((__vector_size__ (32)));\n typedef int __v8si __attribute__ ((__vector_size__ (32)));\n+typedef unsigned int __v8su __attribute__ ((__vector_size__ (32)));\n typedef short __v16hi __attribute__ ((__vector_size__ (32)));\n+typedef unsigned short __v16hu __attribute__ ((__vector_size__ (32)));\n typedef char __v32qi __attribute__ ((__vector_size__ (32)));\n+typedef unsigned char __v32qu __attribute__ ((__vector_size__ (32)));\n \n /* The Intel API is flexible enough that we must allow aliasing with other\n    vector types, and their scalar components.  */\n@@ -124,13 +128,13 @@ typedef double __m256d __attribute__ ((__vector_size__ (32),\n extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_add_pd (__m256d __A, __m256d __B)\n {\n-  return (__m256d) __builtin_ia32_addpd256 ((__v4df)__A, (__v4df)__B);\n+  return (__m256d) ((__v4df)__A + (__v4df)__B);\n }\n \n extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_add_ps (__m256 __A, __m256 __B)\n {\n-  return (__m256) __builtin_ia32_addps256 ((__v8sf)__A, (__v8sf)__B);\n+  return (__m256) ((__v8sf)__A + (__v8sf)__B);\n }\n \n extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -218,13 +222,13 @@ _mm256_blendv_ps (__m256 __X, __m256 __Y, __m256 __M)\n extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_div_pd (__m256d __A, __m256d __B)\n {\n-  return (__m256d) __builtin_ia32_divpd256 ((__v4df)__A, (__v4df)__B);\n+  return (__m256d) ((__v4df)__A / (__v4df)__B);\n }\n \n extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_div_ps (__m256 __A, __m256 __B)\n {\n-  return (__m256) __builtin_ia32_divps256 ((__v8sf)__A, (__v8sf)__B);\n+  return (__m256) ((__v8sf)__A / (__v8sf)__B);\n }\n \n /* Dot product instructions with mask-defined summing and zeroing parts\n@@ -295,13 +299,13 @@ _mm256_min_ps (__m256 __A, __m256 __B)\n extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mul_pd (__m256d __A, __m256d __B)\n {\n-  return (__m256d) __builtin_ia32_mulpd256 ((__v4df)__A, (__v4df)__B);\n+  return (__m256d) ((__v4df)__A * (__v4df)__B);\n }\n \n extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mul_ps (__m256 __A, __m256 __B)\n {\n-  return (__m256) __builtin_ia32_mulps256 ((__v8sf)__A, (__v8sf)__B);\n+  return (__m256) ((__v8sf)__A * (__v8sf)__B);\n }\n \n extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -343,13 +347,13 @@ _mm256_shuffle_ps (__m256 __A, __m256 __B, const int __mask)\n extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_sub_pd (__m256d __A, __m256d __B)\n {\n-  return (__m256d) __builtin_ia32_subpd256 ((__v4df)__A, (__v4df)__B);\n+  return (__m256d) ((__v4df)__A - (__v4df)__B);\n }\n \n extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_sub_ps (__m256 __A, __m256 __B)\n {\n-  return (__m256) __builtin_ia32_subps256 ((__v8sf)__A, (__v8sf)__B);\n+  return (__m256) ((__v8sf)__A - (__v8sf)__B);\n }\n \n extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "fe6e3f532445eaf162aaaaba48ced32f03c69d6d", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -39,9 +39,13 @@\n /* SSE2 */\n typedef double __v2df __attribute__ ((__vector_size__ (16)));\n typedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+typedef unsigned long long __v2du __attribute__ ((__vector_size__ (16)));\n typedef int __v4si __attribute__ ((__vector_size__ (16)));\n+typedef unsigned int __v4su __attribute__ ((__vector_size__ (16)));\n typedef short __v8hi __attribute__ ((__vector_size__ (16)));\n+typedef unsigned short __v8hu __attribute__ ((__vector_size__ (16)));\n typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n+typedef unsigned char __v16qu __attribute__ ((__vector_size__ (16)));\n \n /* The Intel API is flexible enough that we must allow aliasing with other\n    vector types, and their scalar components.  */\n@@ -168,13 +172,13 @@ _mm_storeu_pd (double *__P, __m128d __A)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_store_sd (double *__P, __m128d __A)\n {\n-  *__P = __builtin_ia32_vec_ext_v2df (__A, 0);\n+  *__P = ((__v2df)__A)[0];\n }\n \n extern __inline double __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvtsd_f64 (__m128d __A)\n {\n-  return __builtin_ia32_vec_ext_v2df (__A, 0);\n+  return ((__v2df)__A)[0];\n }\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -187,7 +191,7 @@ _mm_storel_pd (double *__P, __m128d __A)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_storeh_pd (double *__P, __m128d __A)\n {\n-  *__P = __builtin_ia32_vec_ext_v2df (__A, 1);\n+  *__P = ((__v2df)__A)[1];\n }\n \n /* Store the lower DPFP value across two words.\n@@ -222,21 +226,21 @@ _mm_cvtsi128_si32 (__m128i __A)\n extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvtsi128_si64 (__m128i __A)\n {\n-  return __builtin_ia32_vec_ext_v2di ((__v2di)__A, 0);\n+  return ((__v2di)__A)[0];\n }\n \n /* Microsoft intrinsic.  */\n extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvtsi128_si64x (__m128i __A)\n {\n-  return __builtin_ia32_vec_ext_v2di ((__v2di)__A, 0);\n+  return ((__v2di)__A)[0];\n }\n #endif\n \n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_add_pd (__m128d __A, __m128d __B)\n {\n-  return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);\n+  return (__m128d) ((__v2df)__A + (__v2df)__B);\n }\n \n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -248,7 +252,7 @@ _mm_add_sd (__m128d __A, __m128d __B)\n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sub_pd (__m128d __A, __m128d __B)\n {\n-  return (__m128d)__builtin_ia32_subpd ((__v2df)__A, (__v2df)__B);\n+  return (__m128d) ((__v2df)__A - (__v2df)__B);\n }\n \n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -260,7 +264,7 @@ _mm_sub_sd (__m128d __A, __m128d __B)\n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mul_pd (__m128d __A, __m128d __B)\n {\n-  return (__m128d)__builtin_ia32_mulpd ((__v2df)__A, (__v2df)__B);\n+  return (__m128d) ((__v2df)__A * (__v2df)__B);\n }\n \n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -272,7 +276,7 @@ _mm_mul_sd (__m128d __A, __m128d __B)\n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_div_pd (__m128d __A, __m128d __B)\n {\n-  return (__m128d)__builtin_ia32_divpd ((__v2df)__A, (__v2df)__B);\n+  return (__m128d) ((__v2df)__A / (__v2df)__B);\n }\n \n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -287,7 +291,7 @@ _mm_sqrt_pd (__m128d __A)\n   return (__m128d)__builtin_ia32_sqrtpd ((__v2df)__A);\n }\n \n-/* Return pair {sqrt (A[0), B[1]}.  */\n+/* Return pair {sqrt (B[0]), A[1]}.  */\n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sqrt_sd (__m128d __A, __m128d __B)\n {\n@@ -715,13 +719,13 @@ _mm_storeu_si128 (__m128i *__P, __m128i __B)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_storel_epi64 (__m128i *__P, __m128i __B)\n {\n-  *(long long *)__P = __builtin_ia32_vec_ext_v2di ((__v2di)__B, 0);\n+  *(long long *)__P = ((__v2di)__B)[0];\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movepi64_pi64 (__m128i __B)\n {\n-  return (__m64) __builtin_ia32_vec_ext_v2di ((__v2di)__B, 0);\n+  return (__m64) ((__v2di)__B)[0];\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1006,25 +1010,25 @@ _mm_unpacklo_epi64 (__m128i __A, __m128i __B)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_add_epi8 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_paddb128 ((__v16qi)__A, (__v16qi)__B);\n+  return (__m128i) ((__v16qu)__A + (__v16qu)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_add_epi16 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_paddw128 ((__v8hi)__A, (__v8hi)__B);\n+  return (__m128i) ((__v8hu)__A + (__v8hu)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_add_epi32 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_paddd128 ((__v4si)__A, (__v4si)__B);\n+  return (__m128i) ((__v4su)__A + (__v4su)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_add_epi64 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_paddq128 ((__v2di)__A, (__v2di)__B);\n+  return (__m128i) ((__v2du)__A + (__v2du)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1054,25 +1058,25 @@ _mm_adds_epu16 (__m128i __A, __m128i __B)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sub_epi8 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_psubb128 ((__v16qi)__A, (__v16qi)__B);\n+  return (__m128i) ((__v16qu)__A - (__v16qu)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sub_epi16 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_psubw128 ((__v8hi)__A, (__v8hi)__B);\n+  return (__m128i) ((__v8hu)__A - (__v8hu)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sub_epi32 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_psubd128 ((__v4si)__A, (__v4si)__B);\n+  return (__m128i) ((__v4su)__A - (__v4su)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sub_epi64 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_psubq128 ((__v2di)__A, (__v2di)__B);\n+  return (__m128i) ((__v2du)__A - (__v2du)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1114,7 +1118,7 @@ _mm_mulhi_epi16 (__m128i __A, __m128i __B)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mullo_epi16 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_pmullw128 ((__v8hi)__A, (__v8hi)__B);\n+  return (__m128i) ((__v8hu)__A * (__v8hu)__B);\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1247,7 +1251,7 @@ _mm_srl_epi64 (__m128i __A, __m128i __B)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_and_si128 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_pand128 ((__v2di)__A, (__v2di)__B);\n+  return (__m128i) ((__v2du)__A & (__v2du)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1259,67 +1263,67 @@ _mm_andnot_si128 (__m128i __A, __m128i __B)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_or_si128 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_por128 ((__v2di)__A, (__v2di)__B);\n+  return (__m128i) ((__v2du)__A | (__v2du)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_xor_si128 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_pxor128 ((__v2di)__A, (__v2di)__B);\n+  return (__m128i) ((__v2du)__A ^ (__v2du)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpeq_epi8 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_pcmpeqb128 ((__v16qi)__A, (__v16qi)__B);\n+  return (__m128i) ((__v16qi)__A == (__v16qi)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpeq_epi16 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_pcmpeqw128 ((__v8hi)__A, (__v8hi)__B);\n+  return (__m128i) ((__v8hi)__A == (__v8hi)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpeq_epi32 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_pcmpeqd128 ((__v4si)__A, (__v4si)__B);\n+  return (__m128i) ((__v4si)__A == (__v4si)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmplt_epi8 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_pcmpgtb128 ((__v16qi)__B, (__v16qi)__A);\n+  return (__m128i) ((__v16qi)__A < (__v16qi)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmplt_epi16 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_pcmpgtw128 ((__v8hi)__B, (__v8hi)__A);\n+  return (__m128i) ((__v8hi)__A < (__v8hi)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmplt_epi32 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_pcmpgtd128 ((__v4si)__B, (__v4si)__A);\n+  return (__m128i) ((__v4si)__A < (__v4si)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpgt_epi8 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_pcmpgtb128 ((__v16qi)__A, (__v16qi)__B);\n+  return (__m128i) ((__v16qi)__A > (__v16qi)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpgt_epi16 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_pcmpgtw128 ((__v8hi)__A, (__v8hi)__B);\n+  return (__m128i) ((__v8hi)__A > (__v8hi)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpgt_epi32 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_pcmpgtd128 ((__v4si)__A, (__v4si)__B);\n+  return (__m128i) ((__v4si)__A > (__v4si)__B);\n }\n \n #ifdef __OPTIMIZE__"}, {"sha": "32f7f57fa00faf9c9b0404c716efed6d62c45a2a", "filename": "gcc/config/i386/smmintrin.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsmmintrin.h?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -267,7 +267,7 @@ _mm_dp_pd (__m128d __X, __m128d __Y, const int __M)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpeq_epi64 (__m128i __X, __m128i __Y)\n {\n-  return (__m128i) __builtin_ia32_pcmpeqq ((__v2di)__X, (__v2di)__Y);\n+  return (__m128i) ((__v2di)__X == (__v2di)__Y);\n }\n \n /*  Min/max packed integer instructions.  */\n@@ -325,7 +325,7 @@ _mm_max_epu32 (__m128i __X, __m128i __Y)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mullo_epi32 (__m128i __X, __m128i __Y)\n {\n-  return (__m128i) __builtin_ia32_pmulld128 ((__v4si)__X, (__v4si)__Y);\n+  return (__m128i) ((__v4su)__X * (__v4su)__Y);\n }\n \n /* Packed integer 32-bit multiplication of 2 pairs of operands\n@@ -795,7 +795,7 @@ _mm_cmpestrz (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpgt_epi64 (__m128i __X, __m128i __Y)\n {\n-  return (__m128i) __builtin_ia32_pcmpgtq ((__v2di)__X, (__v2di)__Y);\n+  return (__m128i) ((__v2di)__X > (__v2di)__Y);\n }\n \n #ifdef __DISABLE_SSE4_2__"}, {"sha": "69c2cacf473302891842564563a5ced2b1247996", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -180,25 +180,25 @@ _mm_max_ss (__m128 __A, __m128 __B)\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_add_ps (__m128 __A, __m128 __B)\n {\n-  return (__m128) __builtin_ia32_addps ((__v4sf)__A, (__v4sf)__B);\n+  return (__m128) ((__v4sf)__A + (__v4sf)__B);\n }\n \n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sub_ps (__m128 __A, __m128 __B)\n {\n-  return (__m128) __builtin_ia32_subps ((__v4sf)__A, (__v4sf)__B);\n+  return (__m128) ((__v4sf)__A - (__v4sf)__B);\n }\n \n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mul_ps (__m128 __A, __m128 __B)\n {\n-  return (__m128) __builtin_ia32_mulps ((__v4sf)__A, (__v4sf)__B);\n+  return (__m128) ((__v4sf)__A * (__v4sf)__B);\n }\n \n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_div_ps (__m128 __A, __m128 __B)\n {\n-  return (__m128) __builtin_ia32_divps ((__v4sf)__A, (__v4sf)__B);\n+  return (__m128) ((__v4sf)__A / (__v4sf)__B);\n }\n \n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -957,13 +957,13 @@ _mm_setr_ps (float __Z, float __Y, float __X, float __W)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_store_ss (float *__P, __m128 __A)\n {\n-  *__P = __builtin_ia32_vec_ext_v4sf ((__v4sf)__A, 0);\n+  *__P = ((__v4sf)__A)[0];\n }\n \n extern __inline float __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvtss_f32 (__m128 __A)\n {\n-  return __builtin_ia32_vec_ext_v4sf ((__v4sf)__A, 0);\n+  return ((__v4sf)__A)[0];\n }\n \n /* Store four SPFP values.  The address must be 16-byte aligned.  */"}, {"sha": "a0fe1a47a24d34bb510f18f1dc06ee6fcf017dfc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -1,3 +1,10 @@\n+2014-11-15  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.target/i386/intrinsics_opt-1.c: New testcase.\n+\t* gcc.target/i386/intrinsics_opt-2.c: Likewise.\n+\t* gcc.target/i386/intrinsics_opt-3.c: Likewise.\n+\t* gcc.target/i386/intrinsics_opt-4.c: Likewise.\n+\n 2014-11-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* gcc.dg/tree-ssa/pr61144.c: Add dg-require-alias."}, {"sha": "a75bf4e9ca46927aca310fbf5d4b8d4231fb71b9", "filename": "gcc/testsuite/gcc.target/i386/intrinsics_opt-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_opt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_opt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_opt-1.c?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include <emmintrin.h>\n+\n+__m128d myfma(__m128d x, __m128d y, __m128d z){\n+  __m128d m = _mm_mul_pd (x, y);\n+  return _mm_add_pd (m, z);\n+}\n+\n+/* { dg-final { scan-assembler \"vfmadd\" } } */"}, {"sha": "56be74b7e56ff190f89d76b93a36231805f3801f", "filename": "gcc/testsuite/gcc.target/i386/intrinsics_opt-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_opt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_opt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_opt-2.c?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ffast-math -msse2 -fdump-tree-optimized\" } */\n+\n+#include <emmintrin.h>\n+\n+int f(__m128d x){\n+  x = _mm_sub_pd (x, x);\n+  x = _mm_mul_pd (x, x);\n+  double r = 42;\n+  _mm_storeh_pd (&r, x);\n+  int z = r == 0;\n+  return __builtin_constant_p (z) && z;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 1;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "f2b316142f8e3175b9e49956d8218d1f1c9d5615", "filename": "gcc/testsuite/gcc.target/i386/intrinsics_opt-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_opt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_opt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_opt-3.c?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msse2\" } */\n+\n+#include <emmintrin.h>\n+\n+double f(){\n+  __m128d x = _mm_set1_pd (0.);\n+  double r = 42;\n+  _mm_storeh_pd (&r, x);\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler-not \"unpckhpd\" } } */"}, {"sha": "30a3cb96bcbd14697eff0bdbe3766c8ef7738c6e", "filename": "gcc/testsuite/gcc.target/i386/intrinsics_opt-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_opt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2069d6fcff179ad5519d7c59d52308a60af51e48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_opt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_opt-4.c?ref=2069d6fcff179ad5519d7c59d52308a60af51e48", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ffast-math -msse2\" } */\n+\n+#include <emmintrin.h>\n+\n+__m128d f(__m128d x, __m128d y, __m128d z){\n+  y = _mm_add_pd (x, y);\n+  y = _mm_add_pd (z, y);\n+  return _mm_sub_pd (y, x);\n+}\n+\n+/* { dg-final { scan-assembler-not \"subpd\" } } */"}]}