{"sha": "17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdjNWM4YTVlZTI0M2ZkOWI2OGFmN2JlZWI5MzUxYTRlZTIxNWI5Yg==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-12-20T06:22:43Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-12-20T06:22:43Z"}, "message": "bindgen.adb: Minor reformatting\n\n\t* bindgen.adb: Minor reformatting\n\n\t* cstand.adb: Minor reformatting\n\n\t* fmap.adb: Minor reformatting\n\tChange name from Add for Add_To_File_Map (Add is much too generic)\n\tChange Path_Name_Of to Mapped_Path_Name\n\tChange File_Name_Of to Mapped_File_Name\n\tFix copyright dates in header\n\n\t* fmap.ads:\n\tChange name from Add for Add_To_File_Map (Add is much too generic)\n\tChange Path_Name_Of to Mapped_Path_Name\n\tChange File_Name_Of to Mapped_File_Name\n\tFix copyright dates in header\n\n\t* fname-uf.adb: Minor reformatting.  New names of stuff in Fmap.\n\tAdd use clause for Fmap.\n\n\t* make.adb: Minor reformatting\n\n\t* osint.adb: Minor reformatting.  Change of names in Fmap.\n\tAdd use clause for Fmap.\n\n\t* prj-env.adb: Minor reformatting\n\n\t* prj-env.ads: Minor reformatting\n\n\t* switch.adb: Minor reformatting.  Do proper raise of Bad_Switch if\n\terror found (there were odd exceptions to this general rule in\n\t-gnatec/-gnatem processing)\n\n\t* raise.c (__gnat_eh_personality): Exception handling personality\n\troutine for Ada.  Still in rough state, inspired from the C++ version\n\tand still containing a bunch of debugging artifacts.\n\t(parse_lsda_header, get_ttype_entry): Local (static) helpers, also\n\tinspired from the C++ library.\n\n\t* raise.c (eh_personality): Add comments. Part of work for the GCC 3\n\texception handling integration.\n\n\t* Makefile.in: Remove use of 5smastop.adb which is obsolete.\n\t(HIE_SOURCES): Add s-secsta.ad{s,b}.\n\t(HIE_OBJS): Add s-fat*.o\n\t(RAVEN_SOURCES): Remove files that are no longer required. Add\n\tinterrupt handling files.\n\t(RAVEN_MOD): Removed, no longer needed.\n\n\t* a-ngelfu.adb: Remove ??? comment for inappropriate Inline_Always\n\tAdd 2001 to copyright date\n\n\t* g-regpat.adb: Change pragma Inline_Always to Inline. There is no\n\tneed to force universal inlining for these cases.\n\n\t* s-taprob.adb: Minor clean ups so that this unit can be used in\n\tRavenscar HI.\n\n\t* exp_ch7.adb: Allow use of secondary stack in HI mode.\n\tDisallow it when pragma Restrictions (No_Secondary_Stack) is specified.\n\n\t* prj-tree.ads (Project_Node_Record): Add comments for components\n\tPkg_Id and Case_Insensitive.\n\n\t* g-socket.adb: Minor reformatting. Found while reading code.\n\n\t* prj-tree.ads: Minor reformatting\n\nFrom-SVN: r48195", "tree": {"sha": "0fb5f707e1f7868b6ca9dde005027d1520338a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fb5f707e1f7868b6ca9dde005027d1520338a01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/comments", "author": null, "committer": null, "parents": [{"sha": "a004eb826e1749df5b1f9473ec1d666b3f97f281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a004eb826e1749df5b1f9473ec1d666b3f97f281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a004eb826e1749df5b1f9473ec1d666b3f97f281"}], "stats": {"total": 968, "additions": 789, "deletions": 179}, "files": [{"sha": "6b0289bbb3e44789e49b3ba89597df55e18dadd3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -1,3 +1,86 @@\n+2001-12-19  Robert Dewar <dewar@gnat.com>\n+\n+\t* bindgen.adb: Minor reformatting\n+\t\n+\t* cstand.adb: Minor reformatting\n+\t\n+\t* fmap.adb: Minor reformatting\n+\tChange name from Add for Add_To_File_Map (Add is much too generic)\n+\tChange Path_Name_Of to Mapped_Path_Name\n+\tChange File_Name_Of to Mapped_File_Name\n+\tFix copyright dates in header\n+\t\n+\t* fmap.ads:\n+\tChange name from Add for Add_To_File_Map (Add is much too generic)\n+\tChange Path_Name_Of to Mapped_Path_Name\n+\tChange File_Name_Of to Mapped_File_Name\n+\tFix copyright dates in header\n+\t\n+\t* fname-uf.adb: Minor reformatting.  New names of stuff in Fmap.\n+\tAdd use clause for Fmap.\n+\t\n+\t* make.adb: Minor reformatting\n+\t\n+\t* osint.adb: Minor reformatting.  Change of names in Fmap.\n+\tAdd use clause for Fmap.\n+\t\n+\t* prj-env.adb: Minor reformatting\n+\t\n+\t* prj-env.ads: Minor reformatting\n+\t\n+\t* switch.adb: Minor reformatting.  Do proper raise of Bad_Switch if \n+\terror found (there were odd exceptions to this general rule in \n+\t-gnatec/-gnatem processing)\n+\t\n+2001-12-19  Olivier Hainque <hainque@gnat.com>\n+\n+\t* raise.c (__gnat_eh_personality): Exception handling personality \n+\troutine for Ada.  Still in rough state, inspired from the C++ version \n+\tand still containing a bunch of debugging artifacts.\n+\t(parse_lsda_header, get_ttype_entry): Local (static) helpers, also \n+\tinspired from the C++ library.\n+\t\n+\t* raise.c (eh_personality): Add comments. Part of work for the GCC 3 \n+\texception handling integration.\n+\t\n+2001-12-19  Arnaud Charlet <charlet@gnat.com>\n+\n+\t* Makefile.in: Remove use of 5smastop.adb which is obsolete.\n+\t(HIE_SOURCES): Add s-secsta.ad{s,b}.\n+\t(HIE_OBJS): Add s-fat*.o\n+\t(RAVEN_SOURCES): Remove files that are no longer required. Add \n+\tinterrupt handling files.\n+\t(RAVEN_MOD): Removed, no longer needed.\n+\t\n+2001-12-19  Robert Dewar <dewar@gnat.com>\n+\n+\t* a-ngelfu.adb: Remove ??? comment for inappropriate Inline_Always\n+\tAdd 2001 to copyright date\n+\t\n+\t* g-regpat.adb: Change pragma Inline_Always to Inline. There is no \n+\tneed to force universal inlining for these cases.\n+\t\n+2001-12-19  Arnaud Charlet <charlet@gnat.com>\n+\n+\t* s-taprob.adb: Minor clean ups so that this unit can be used in \n+\tRavenscar HI.\n+\t\n+\t* exp_ch7.adb: Allow use of secondary stack in HI mode.\n+\tDisallow it when pragma Restrictions (No_Secondary_Stack) is specified.\n+\t\n+2001-12-19  Vincent Celier <celier@gnat.com>\n+\n+\t* prj-tree.ads (Project_Node_Record): Add comments for components \n+\tPkg_Id and Case_Insensitive.\n+\t\n+2001-12-19  Pascal Obry <obry@gnat.com>\n+\n+\t* g-socket.adb: Minor reformatting. Found while reading code.\n+\t\n+2001-12-19  Robert Dewar <dewar@gnat.com>\n+\n+\t* prj-tree.ads: Minor reformatting\n+\n 2001-12-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* config-lang.in (diff_excludes): Remove."}, {"sha": "84f1b0f305e538d0eabf2f70149aef66e8780b0b", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -1060,7 +1060,6 @@ ifeq ($(strip $(filter-out sparc sun solaris2% sunos5%,$(targ))),)\n   a-intnam.ads<4sintnam.ads \\\n   s-inmaop.adb<7sinmaop.adb \\\n   s-intman.adb<5sintman.adb \\\n-  s-mastop.adb<5smastop.adb \\\n   s-osinte.adb<5sosinte.adb \\\n   s-osinte.ads<5sosinte.ads \\\n   s-osprim.adb<5posprim.adb \\\n@@ -1086,7 +1085,6 @@ ifeq ($(strip $(filter-out sparc sun solaris2% sunos5%,$(targ))),)\n     a-intnam.ads<4sintnam.ads \\\n     s-inmaop.adb<7sinmaop.adb \\\n     s-intman.adb<5sintman.adb \\\n-    s-mastop.adb<5smastop.adb \\\n     s-osinte.adb<7sosinte.adb \\\n     s-osinte.ads<5tosinte.ads \\\n     s-osprim.adb<5posprim.adb \\\n@@ -1105,7 +1103,6 @@ ifeq ($(strip $(filter-out sparc sun solaris2% sunos5%,$(targ))),)\n     a-intnam.ads<4sintnam.ads \\\n     s-inmaop.adb<7sinmaop.adb \\\n     s-intman.adb<7sintman.adb \\\n-    s-mastop.adb<5smastop.adb \\\n     s-osinte.adb<5iosinte.adb \\\n     s-osinte.ads<54osinte.ads \\\n     s-osprim.adb<5posprim.adb \\\n@@ -1909,6 +1906,8 @@ HIE_SOURCES = \\\n  s-fatlfl.ads \\\n  s-fatllf.ads \\\n  s-fatsfl.ads \\\n+ s-secsta.ads \\\n+ s-secsta.adb \\\n  a-tags.ads   \\\n  a-tags.adb $(EXTRA_HIE_SOURCES)\n \n@@ -1923,23 +1922,19 @@ HIE_OBJS =  \\\n  s-stoele.o \\\n  s-maccod.o \\\n  s-unstyp.o \\\n+ s-fatflt.o \\\n+ s-fatlfl.o \\\n+ s-fatllf.o \\\n+ s-secsta.o \\\n  a-tags.o $(EXTRA_HIE_OBJS)\n \n # Files which are needed in ravenscar mode\n \n RAVEN_SOURCES = \\\n  $(HIE_SOURCES) \\\n- s-arit64.ads \\\n- s-arit64.adb \\\n  s-parame.ads \\\n  s-parame.adb \\\n  g-except.ads \\\n- s-stalib.ads \\\n- s-stalib.adb \\\n- s-soflin.ads \\\n- s-soflin.adb \\\n- s-secsta.ads \\\n- s-secsta.adb \\\n  s-osinte.ads \\\n  s-osinte.adb \\\n  s-tasinf.ads \\\n@@ -1948,9 +1943,12 @@ RAVEN_SOURCES = \\\n  s-taprop.ads \\\n  s-taprop.adb \\\n  s-taskin.ads \\\n+ s-taskin.adb \\\n  s-interr.ads \\\n  s-interr.adb \\\n- s-taskin.adb \\\n+ a-interr.ads \\\n+ a-interr.adb \\\n+ a-intnam.ads \\\n  a-reatim.ads \\\n  a-reatim.adb \\\n  a-retide.ads \\\n@@ -1963,33 +1961,24 @@ RAVEN_SOURCES = \\\n  s-tarest.ads \\\n  s-tarest.adb $(EXTRA_RAVEN_SOURCES)\n \n-# Files that need to be preprocessed before inclusion in a ravenscar run time\n-\n-RAVEN_MOD = \\\n- s-tposen.adb \\\n- s-tarest.adb\n-\n # Objects to generate for the ravenscar run time\n \n RAVEN_OBJS = \\\n  $(HIE_OBJS) \\\n- g-except.o  \\\n- s-stalib.o  \\\n- s-arit64.o  \\\n  s-parame.o  \\\n- s-soflin.o  \\\n- s-secsta.o  \\\n- s-tasinf.o  \\\n+ g-except.o  \\\n  s-osinte.o  \\\n+ s-tasinf.o  \\\n  s-taspri.o  \\\n  s-taprop.o  \\\n  s-taskin.o  \\\n- s-taprob.o  \\\n- s-tposen.o  \\\n  s-interr.o  \\\n  a-interr.o  \\\n+ a-intnam.o  \\\n  a-reatim.o  \\\n  a-retide.o  \\\n+ s-taprob.o  \\\n+ s-tposen.o  \\\n  s-tasres.o  \\\n  s-tarest.o  $(EXTRA_RAVEN_OBJS)\n "}, {"sha": "d22951c447e90d3e12949c91da7c7d63302f12a3", "filename": "gcc/ada/a-ngelfu.adb", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fa-ngelfu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fa-ngelfu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.44 $\n+--                            $Revision$\n --                                                                          --\n---          Copyright (C) 1992-2000, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,11 +52,9 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n    Log_Two  : constant := 0.69314_71805_59945_30941_72321_21458_17656_80755;\n    Half_Log_Two : constant := Log_Two / 2;\n \n-\n    subtype T is Float_Type'Base;\n    subtype Double is Aux.Double;\n \n-\n    Two_Pi     : constant T := 2.0 * Pi;\n    Half_Pi    : constant T := Pi / 2.0;\n    Fourth_Pi  : constant T := Pi / 4.0;\n@@ -68,7 +66,6 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n    Log_Inverse_Epsilon : constant T := T (T'Model_Mantissa - 1) * Log_Two;\n    Sqrt_Epsilon        : constant T := Sqrt_Two ** (1 - T'Model_Mantissa);\n \n-\n    DEpsilon    : constant Double := Double (Epsilon);\n    DIEpsilon   : constant Double := Double (IEpsilon);\n \n@@ -558,7 +555,6 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n       --  Just reuse the code for Sin. The potential small\n       --  loss of speed is negligible with proper (front-end) inlining.\n \n-      --  ??? Add pragma Inline_Always in spec when this is supported\n       return -Sin (abs X - Cycle * 0.25, Cycle);\n    end Cos;\n \n@@ -716,7 +712,6 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n       Q := ((Q3 * Z + Q2) * Z + Q1) * Z + Q0;\n       R := 0.5 + P / (Q - P);\n \n-\n       R := Float_Type'Base'Scaling (R, Integer (XN) + 1);\n \n       --  Deal with case of Exp returning IEEE infinity. If Machine_Overflows\n@@ -732,7 +727,6 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n \n    end Exp_Strict;\n \n-\n    ----------------\n    -- Local_Atan --\n    ----------------"}, {"sha": "55ec4324ab81549b501db5feca7900f5fc641521", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -343,16 +343,16 @@ package body Bindgen is\n \n       Write_Statement_Buffer;\n \n-      --  Normal case (no pragma No_Run_Time). The global values are\n+      --  Normal case (not No_Run_Time mode). The global values are\n       --  assigned using the runtime routine Set_Globals (we have to use\n       --  the routine call, rather than define the globals in the binder\n       --  file to deal with cross-library calls in some systems.\n \n       if No_Run_Time_Specified then\n-         --  Case of pragma No_Run_Time present. The only global variable\n-         --  that might be needed (by the Ravenscar profile) is\n-         --  the environment task's priority. Also no exception tables are\n-         --  needed.\n+\n+         --  Case of No_Run_Time mode. The only global variable that might\n+         --  be needed (by the Ravenscar profile) is the priority of the\n+         --  environment. Also no exception tables are needed.\n \n          if Main_Priority /= No_Main_Priority then\n             WBI (\"      Main_Priority : Integer;\");\n@@ -513,8 +513,9 @@ package body Bindgen is\n       Write_Statement_Buffer;\n \n       if No_Run_Time_Specified then\n-         --  Case where No_Run_Time pragma is present.\n-         --  Set __gl_main_priority if needed for the Ravenscar profile.\n+\n+         --  Case of No_Run_Time mode. Set __gl_main_priority if needed\n+         --  for the Ravenscar profile.\n \n          if Main_Priority /= No_Main_Priority then\n             Set_String (\"   extern int __gl_main_priority = \");\n@@ -524,7 +525,7 @@ package body Bindgen is\n          end if;\n \n       else\n-         --  Code for normal case (no pragma No_Run_Time in use)\n+         --  Code for normal case (not in No_Run_Time mode)\n \n          Gen_Exception_Table_C;\n "}, {"sha": "75378b579f71a2fd07b506d1226379c6c97e1c6a", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -1001,23 +1001,28 @@ package body CStand is\n       Set_Size_Known_At_Compile_Time\n                            (Universal_Fixed);\n \n-      --  Create type declaration for Duration, using a 64-bit size.\n-      --  Delta is 1 nanosecond.\n-      --  Except on 32 bits machine in No_Run_Time mode, in which case Duration\n-      --  is a 32 bits value whose delta is 10E-4 seconds.\n+      --  Create type declaration for Duration, using a 64-bit size. The\n+      --  delta value depends on the mode we are running in:\n+\n+      --     Normal mode or No_Run_Time mode when word size is 64 bits:\n+      --       10**(-9) seconds, size is 64 bits\n+\n+      --     No_Run_Time mode when word size is 32 bits:\n+      --       10**(-4) seconds, oize is 32 bits\n \n       Build_Duration : declare\n          Dlo         : Uint;\n          Dhi         : Uint;\n          Delta_Val   : Ureal;\n          Use_32_Bits : constant Boolean :=\n-           No_Run_Time and then System_Word_Size = 32;\n+                         No_Run_Time and then System_Word_Size = 32;\n \n       begin\n          if Use_32_Bits then\n             Dlo := Intval (Type_Low_Bound (Standard_Integer_32));\n             Dhi := Intval (Type_High_Bound (Standard_Integer_32));\n             Delta_Val := UR_From_Components (Uint_1, Uint_4, 10);\n+\n          else\n             Dlo := Intval (Type_Low_Bound (Standard_Integer_64));\n             Dhi := Intval (Type_High_Bound (Standard_Integer_64));"}, {"sha": "0e13169789e76c8315e8c72cce03159365879b2a", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -601,7 +601,7 @@ package body Exp_Ch7 is\n \n          if Sec_Stk then\n             Set_Uses_Sec_Stack (Current_Scope);\n-            Disallow_In_No_Run_Time_Mode (N);\n+            Check_Restriction (No_Secondary_Stack, N);\n          end if;\n \n          Set_Etype (Current_Scope, Standard_Void_Type);\n@@ -2449,7 +2449,7 @@ package body Exp_Ch7 is\n                   if not Requires_Transient_Scope (Etype (S)) then\n                      if not Functions_Return_By_DSP_On_Target then\n                         Set_Uses_Sec_Stack (S, True);\n-                        Disallow_In_No_Run_Time_Mode (Action);\n+                        Check_Restriction (No_Secondary_Stack, Action);\n                      end if;\n                   end if;\n \n@@ -2470,7 +2470,7 @@ package body Exp_Ch7 is\n                then\n                   if not Functions_Return_By_DSP_On_Target then\n                      Set_Uses_Sec_Stack (S, True);\n-                     Disallow_In_No_Run_Time_Mode (Action);\n+                     Check_Restriction (No_Secondary_Stack, Action);\n                   end if;\n \n                   Set_Uses_Sec_Stack (Current_Scope, False);\n@@ -2703,7 +2703,7 @@ package body Exp_Ch7 is\n             null;\n          else\n             Set_Uses_Sec_Stack (S);\n-            Disallow_In_No_Run_Time_Mode (N);\n+            Check_Restriction (No_Secondary_Stack, N);\n          end if;\n       end if;\n    end Wrap_Transient_Declaration;"}, {"sha": "54409cd9e3586125be3476d74c926eb1077c6231", "filename": "gcc/ada/fmap.adb", "status": "modified", "additions": 40, "deletions": 41, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Ffmap.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Ffmap.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffmap.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision$\n+--                            $Revision: 1.1 $\n --                                                                          --\n---          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2001, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -26,14 +26,15 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with GNAT.HTable;\n-with Namet;          use Namet;\n-with Osint;          use Osint;\n-with Output;         use Output;\n+with Namet;  use Namet;\n+with Osint;  use Osint;\n+with Output; use Output;\n with Table;\n \n with Unchecked_Conversion;\n \n+with GNAT.HTable;\n+\n package body Fmap is\n \n    subtype Big_String is String (Positive);\n@@ -63,6 +64,7 @@ package body Fmap is\n    type Header_Num is range 0 .. 1_000;\n \n    function Hash (F : Unit_Name_Type) return Header_Num;\n+   --  Function used to compute hash of unit name\n \n    No_Entry : constant Int := -1;\n    --  Signals no entry in following table\n@@ -87,38 +89,23 @@ package body Fmap is\n    --  Hash table to map file names to path names. Used in conjunction with\n    --  table Path_Mapping above.\n \n-   ---------\n-   -- Add --\n-   ---------\n+   ---------------------\n+   -- Add_To_File_Map --\n+   ---------------------\n \n-   procedure Add\n+   procedure Add_To_File_Map\n      (Unit_Name : Unit_Name_Type;\n       File_Name : File_Name_Type;\n-      Path_Name : File_Name_Type) is\n+      Path_Name : File_Name_Type)\n+   is\n    begin\n       File_Mapping.Increment_Last;\n       Unit_Hash_Table.Set (Unit_Name, File_Mapping.Last);\n       File_Mapping.Table (File_Mapping.Last) := File_Name;\n       Path_Mapping.Increment_Last;\n       File_Hash_Table.Set (File_Name, Path_Mapping.Last);\n       Path_Mapping.Table (Path_Mapping.Last) := Path_Name;\n-   end Add;\n-\n-   ------------------\n-   -- File_Name_Of --\n-   ------------------\n-\n-   function File_Name_Of (Unit : Unit_Name_Type) return File_Name_Type is\n-      The_Index : constant Int := Unit_Hash_Table.Get (Unit);\n-   begin\n-      if The_Index = No_Entry then\n-         return No_File;\n-\n-      else\n-         return File_Mapping.Table (The_Index);\n-      end if;\n-\n-   end File_Name_Of;\n+   end Add_To_File_Map;\n \n    ----------\n    -- Hash --\n@@ -174,10 +161,12 @@ package body Fmap is\n \n       procedure Get_Line is\n          use ASCII;\n+\n       begin\n          Deb := Fin + 1;\n \n          --  If not at the end of file, skip the end of line\n+\n          while Deb < SP'Last\n            and then (SP (Deb) = CR\n                      or else SP (Deb) = LF\n@@ -213,7 +202,7 @@ package body Fmap is\n          Write_Line (\"\"\" is truncated\");\n       end Report_Truncated;\n \n-   --  start of procedure Initialize\n+   --  Start of procedure Initialize\n \n    begin\n       Name_Len := File_Name'Length;\n@@ -230,7 +219,6 @@ package body Fmap is\n          SP := BS (1 .. Natural (Hi))'Unrestricted_Access;\n \n          loop\n-\n             --  Get the unit name\n \n             Get_Line;\n@@ -303,30 +291,41 @@ package body Fmap is\n \n             --  Add the mappings for this unit name\n \n-            Add (Uname, Fname, Pname);\n-\n+            Add_To_File_Map (Uname, Fname, Pname);\n          end loop;\n-\n       end if;\n-\n    end Initialize;\n \n-   ------------------\n-   -- Path_Name_Of --\n-   ------------------\n+   ----------------------\n+   -- Mapped_File_Name --\n+   ----------------------\n+\n+   function Mapped_File_Name (Unit : Unit_Name_Type) return File_Name_Type is\n+      The_Index : constant Int := Unit_Hash_Table.Get (Unit);\n+\n+   begin\n+      if The_Index = No_Entry then\n+         return No_File;\n+      else\n+         return File_Mapping.Table (The_Index);\n+      end if;\n+   end Mapped_File_Name;\n+\n+   ----------------------\n+   -- Mapped_Path_Name --\n+   ----------------------\n \n-   function Path_Name_Of (File : File_Name_Type) return File_Name_Type is\n+   function Mapped_Path_Name (File : File_Name_Type) return File_Name_Type is\n       Index : Int := No_Entry;\n+\n    begin\n       Index := File_Hash_Table.Get (File);\n \n       if Index = No_Entry then\n          return No_File;\n-\n       else\n          return Path_Mapping.Table (Index);\n       end if;\n-\n-   end Path_Name_Of;\n+   end Mapped_Path_Name;\n \n end Fmap;"}, {"sha": "57ea01651650950f4a5e763308c7d550f6cac806", "filename": "gcc/ada/fmap.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Ffmap.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Ffmap.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffmap.ads?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                            $Revision$\n+--                            $Revision: 1.1 $\n --                                                                          --\n---          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2001, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,15 +38,15 @@ package Fmap is\n    --  If the mapping file is incorrect (non existent file, truncated file,\n    --  duplicate entries), output a warning and do not initialize the mappings.\n \n-   function Path_Name_Of (File : File_Name_Type) return File_Name_Type;\n+   function Mapped_Path_Name (File : File_Name_Type) return File_Name_Type;\n    --  Return the path name mapped to the file name File.\n    --  Return No_File if File is not mapped.\n \n-   function File_Name_Of (Unit : Unit_Name_Type) return File_Name_Type;\n+   function Mapped_File_Name (Unit : Unit_Name_Type) return File_Name_Type;\n    --  Return the file name mapped to the unit name Unit.\n    --  Return No_File if Unit is not mapped.\n \n-   procedure Add\n+   procedure Add_To_File_Map\n      (Unit_Name : Unit_Name_Type;\n       File_Name : File_Name_Type;\n       Path_Name : File_Name_Type);"}, {"sha": "f2b549c3ac6aa1dc06f00723ba05b8680b53f423", "filename": "gcc/ada/fname-uf.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Ffname-uf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Ffname-uf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffname-uf.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -28,7 +28,7 @@\n \n with Alloc;\n with Debug;    use Debug;\n-with Fmap;\n+with Fmap;     use Fmap;\n with Krunch;\n with Namet;    use Namet;\n with Opt;      use Opt;\n@@ -140,6 +140,7 @@ package body Fname.UF is\n \n       Pname : File_Name_Type := No_File;\n       Fname : File_Name_Type := No_File;\n+      --  Path name and File name for mapping\n \n    begin\n       --  Null or error name means that some previous error occurred\n@@ -149,12 +150,12 @@ package body Fname.UF is\n          raise Unrecoverable_Error;\n       end if;\n \n-      --  Look into the mapping from unit names to file names\n+      --  Look in the map from unit names to file names\n \n-      Fname := Fmap.File_Name_Of (Uname);\n+      Fname := Mapped_File_Name (Uname);\n \n       --  If the unit name is already mapped, return the corresponding\n-      --  file name.\n+      --  file name from the map.\n \n       if Fname /= No_File then\n          return Fname;\n@@ -394,7 +395,7 @@ package body Fname.UF is\n                         --  Add to mapping, so that we don't do another\n                         --  path search in Find_File for this file name\n \n-                        Fmap.Add (Get_File_Name.Uname, Fnam, Pname);\n+                        Add_To_File_Map (Get_File_Name.Uname, Fnam, Pname);\n                         return Fnam;\n \n                      --  This entry does not match after all, because this is"}, {"sha": "da4748c30eae76aeb70e30d7704c37e0fc6471e4", "filename": "gcc/ada/g-regpat.adb", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fg-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fg-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-regpat.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -245,9 +245,9 @@ package body GNAT.Regpat is\n    procedure Reset_Class (Bitmap : in out Character_Class);\n    --  Clear all the entries in the class Bitmap.\n \n-   pragma Inline_Always (Set_In_Class);\n-   pragma Inline_Always (Get_From_Class);\n-   pragma Inline_Always (Reset_Class);\n+   pragma Inline (Set_In_Class);\n+   pragma Inline (Get_From_Class);\n+   pragma Inline (Reset_Class);\n \n    -----------------------\n    -- Local Subprograms --\n@@ -512,9 +512,9 @@ package body GNAT.Regpat is\n       --  Parse a posic character class, like [:alpha:] or [:^alpha:].\n       --  The called is suppoed to absorbe the opening [.\n \n-      pragma Inline_Always (Is_Mult);\n-      pragma Inline_Always (Emit_Natural);\n-      pragma Inline_Always (Parse_Character_Class); --  since used only once\n+      pragma Inline (Is_Mult);\n+      pragma Inline (Emit_Natural);\n+      pragma Inline (Parse_Character_Class); --  since used only once\n \n       ---------------\n       -- Case_Emit --\n@@ -2401,12 +2401,13 @@ package body GNAT.Regpat is\n          return   Boolean;\n       --  Return True it the simple operator (possibly non-greedy) matches\n \n-      pragma Inline_Always (Index);\n-      pragma Inline_Always (Repeat);\n+      pragma Inline (Index);\n+      pragma Inline (Repeat);\n \n       --  These are two complex functions, but used only once.\n-      pragma Inline_Always (Match_Whilem);\n-      pragma Inline_Always (Match_Simple_Operator);\n+\n+      pragma Inline (Match_Whilem);\n+      pragma Inline (Match_Simple_Operator);\n \n       -----------\n       -- Index --"}, {"sha": "3b794b729302f113bbc921ad5d4e1b7f4767f582", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.21 $\n+--                            $Revision$\n --                                                                          --\n --              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n --                                                                          --\n@@ -166,12 +166,11 @@ package body GNAT.Sockets is\n \n    --  Types needed for Datagram_Socket_Stream_Type\n \n-   type Datagram_Socket_Stream_Type is new Root_Stream_Type with\n-      record\n-         Socket : Socket_Type;\n-         To     : Sock_Addr_Type;\n-         From   : Sock_Addr_Type;\n-      end record;\n+   type Datagram_Socket_Stream_Type is new Root_Stream_Type with record\n+      Socket : Socket_Type;\n+      To     : Sock_Addr_Type;\n+      From   : Sock_Addr_Type;\n+   end record;\n \n    type Datagram_Socket_Stream_Access is\n      access all Datagram_Socket_Stream_Type;\n@@ -187,10 +186,9 @@ package body GNAT.Sockets is\n \n    --  Types needed for Stream_Socket_Stream_Type\n \n-   type Stream_Socket_Stream_Type is new Root_Stream_Type with\n-      record\n-         Socket : Socket_Type;\n-      end record;\n+   type Stream_Socket_Stream_Type is new Root_Stream_Type with record\n+      Socket : Socket_Type;\n+   end record;\n \n    type Stream_Socket_Stream_Access is\n      access all Stream_Socket_Stream_Type;"}, {"sha": "6b61456aa3334bb2aae8b6f1074271d2736e3847", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -3501,7 +3501,6 @@ package body Make is\n          begin\n             Delete_File (Name => Mapping_File_Name, Success => Success);\n          end;\n-\n       end if;\n \n       Exit_Program (E_Success);"}, {"sha": "27857d02f06c5ae08ca554aa6b6f03607685e6f0", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -26,7 +26,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Fmap;\n+with Fmap;     use Fmap;\n with Hostparm;\n with Namet;    use Namet;\n with Opt;      use Opt;\n@@ -996,16 +996,16 @@ package body Osint is\n          --  directory where the user said it was.\n \n          elsif Look_In_Primary_Directory_For_Current_Main\n-           and then Current_Main = N then\n+           and then Current_Main = N\n+         then\n             return Locate_File (N, T, Primary_Directory, File_Name);\n \n          --  Otherwise do standard search for source file\n \n          else\n-\n             --  Check the mapping of this file name\n \n-            File := Fmap.Path_Name_Of (N);\n+            File := Mapped_Path_Name (N);\n \n             --  If the file name is mapped to a path name, return the\n             --  corresponding path name"}, {"sha": "fd5109bb05ccad5ab8b9de0a708204e80cd48ab5", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -804,6 +804,10 @@ package body Prj.Env is\n       --  Put the mapping of the spec or body contained in Data in the file\n       --  (3 lines).\n \n+      ---------\n+      -- Put --\n+      ---------\n+\n       procedure Put (S : String) is\n          Last : Natural;\n \n@@ -813,9 +817,12 @@ package body Prj.Env is\n          if Last /= S'Length then\n             Osint.Fail (\"Disk full\");\n          end if;\n-\n       end Put;\n \n+      --------------\n+      -- Put_Data --\n+      --------------\n+\n       procedure Put_Data (Spec : Boolean) is\n       begin\n          Put (Get_Name_String (The_Unit_Data.Name));\n@@ -833,6 +840,8 @@ package body Prj.Env is\n          Put (S => (1 => ASCII.LF));\n       end Put_Data;\n \n+   --  Start of processing for Create_Mapping_File\n+\n    begin\n       GNAT.OS_Lib.Create_Temp_File (File, Name => Name);\n \n@@ -938,15 +947,15 @@ package body Prj.Env is\n       for Current in reverse Units.First .. Units.Last loop\n          Unit := Units.Table (Current);\n \n-         --  If it is a unit of the same project\n+         --  Case of unit of the same project\n \n          if Unit.File_Names (Body_Part).Project = Project then\n             declare\n                Current_Name : constant Name_Id :=\n                                 Unit.File_Names (Body_Part).Name;\n \n             begin\n-               --  If there is a body\n+               --  Case of a body present\n \n                if Current_Name /= No_Name then\n                   if Current_Verbosity = High then\n@@ -987,7 +996,7 @@ package body Prj.Env is\n             end;\n          end if;\n \n-         --  If it is a unit of the same project\n+         --  Case of a unit of the same project\n \n          if Units.Table (Current).File_Names (Specification).Project =\n                                                                  Project\n@@ -997,7 +1006,7 @@ package body Prj.Env is\n                                 Unit.File_Names (Specification).Name;\n \n             begin\n-               --  If there is a spec\n+               --  Case of spec present\n \n                if Current_Name /= No_Name then\n                   if Current_Verbosity = High then\n@@ -1007,8 +1016,7 @@ package body Prj.Env is\n                      Write_Eol;\n                   end if;\n \n-                  --  If it has the same name as the original name,\n-                  --  return the original name\n+                  --  If name same as the original name, return original name\n \n                   if Unit.Name = The_Original_Name\n                     or else Current_Name = The_Original_Name\n@@ -1020,7 +1028,7 @@ package body Prj.Env is\n                      return Get_Name_String (Current_Name);\n \n                   --  If it has the same name as the extended spec name,\n-                  --  return the extended spec name\n+                  --  return the extended spec name.\n \n                   elsif Current_Name = The_Spec_Name then\n                      if Current_Verbosity = High then"}, {"sha": "36687b46b1ea645b96eba2f3c265e9cf8ce3aa4d", "filename": "gcc/ada/prj-env.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fprj-env.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fprj-env.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.ads?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -40,9 +40,8 @@ package Prj.Env is\n    --  Output the list of sources, after Project files have been scanned\n \n    procedure Create_Mapping_File (Name : in out Temp_File_Name);\n-   --  Create a temporary mapping file.\n-   --  For each unit, put the mapping of its spec and or body to its\n-   --  file name and path name in this file.\n+   --  Create a temporary mapping file. For each unit, put the mapping of\n+   --  its spec and or body to its file name and path name in this file.\n \n    procedure Create_Config_Pragmas_File\n      (For_Project  : Project_Id;"}, {"sha": "6a7ae30304d4d0b45d9939950f78e3bcbc520a43", "filename": "gcc/ada/prj-tree.ads", "status": "modified", "additions": 40, "deletions": 27, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fprj-tree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fprj-tree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.ads?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -38,27 +38,30 @@ with Table;\n package Prj.Tree is\n \n    Project_Nodes_Initial   : constant := 1_000;\n-   --  Initial number of nodes in table Tree_Private_Part.Project_Nodes\n    Project_Nodes_Increment : constant := 100;\n+   --  Allocation parameters for initializing and extending number\n+   --  of nodes in table Tree_Private_Part.Project_Nodes\n \n    Project_Node_Low_Bound  : constant := 0;\n-   Project_Node_High_Bound : constant := 099_999_999; -- In practice, infinite\n+   Project_Node_High_Bound : constant := 099_999_999;\n+   --  Range of values for project node id's (in practice infinite)\n \n    type Project_Node_Id is range\n      Project_Node_Low_Bound .. Project_Node_High_Bound;\n    --  The index of table Tree_Private_Part.Project_Nodes\n \n-   Empty_Node    : constant Project_Node_Id := Project_Node_Low_Bound;\n+   Empty_Node : constant Project_Node_Id := Project_Node_Low_Bound;\n    --  Designates no node in table Project_Nodes\n+\n    First_Node_Id : constant Project_Node_Id := Project_Node_Low_Bound;\n \n-   subtype Variable_Node_Id       is Project_Node_Id;\n-   --  Used to designate a node whose expected kind is\n+   subtype Variable_Node_Id is Project_Node_Id;\n+   --  Used to designate a node whose expected kind is one of\n    --  N_Typed_Variable_Declaration, N_Variable_Declaration or\n    --  N_Variable_Reference.\n+\n    subtype Package_Declaration_Id is Project_Node_Id;\n-   --  Used to designate a node whose expected kind is\n-   --  N_Project_Declaration.\n+   --  Used to designate a node whose expected kind is N_Proect_Declaration\n \n    type Project_Node_Kind is\n      (N_Project,\n@@ -90,7 +93,7 @@ package Prj.Tree is\n    function Default_Project_Node\n      (Of_Kind       : Project_Node_Kind;\n       And_Expr_Kind : Variable_Kind := Undefined)\n-     return Project_Node_Id;\n+      return          Project_Node_Id;\n    --  Returns a Project_Node_Record with the specified Kind and\n    --  Expr_Kind; all the other components have default nil values.\n \n@@ -121,7 +124,7 @@ package Prj.Tree is\n \n    function First_Variable_Of\n      (Node  : Project_Node_Id)\n-      return Variable_Node_Id;\n+      return  Variable_Node_Id;\n    --  Only valid for N_Project or N_Package_Declaration nodes\n \n    function First_Package_Of\n@@ -499,44 +502,52 @@ package Prj.Tree is\n \n       type Project_Node_Record is record\n \n-         Kind             : Project_Node_Kind;\n+         Kind : Project_Node_Kind;\n \n-         Location         : Source_Ptr    := No_Location;\n+         Location : Source_Ptr := No_Location;\n \n-         Directory        : Name_Id       := No_Name;\n+         Directory : Name_Id       := No_Name;\n          --  Only for N_Project\n \n-         Expr_Kind        : Variable_Kind := Undefined;\n+         Expr_Kind : Variable_Kind := Undefined;\n          --  See below for what Project_Node_Kind it is used\n \n-         Variables        : Variable_Node_Id := Empty_Node;\n+         Variables : Variable_Node_Id := Empty_Node;\n          --  First variable in a project or a package\n \n-         Packages         : Package_Declaration_Id := Empty_Node;\n+         Packages : Package_Declaration_Id := Empty_Node;\n          --  First package declaration in a project\n \n-         Pkg_Id           : Package_Node_Id := Empty_Package;\n-         --  Only use in Package_Declaration\n-\n-         Name             : Name_Id         := No_Name;\n+         Pkg_Id : Package_Node_Id := Empty_Package;\n+         --  Only used for N_Package_Declaration\n+         --  The component Pkg_Id is an entry into the table Package_Attributes\n+         --  (in Prj.Attr). It is used to indicate all the attributes of the\n+         --  package with their characteristics.\n+         --\n+         --  The tables Prj.Attr.Attributes and Prj.Attr.Package_Attributes\n+         --  are built once and for all through a call (from Prj.Initialize)\n+         --  to procedure Prj.Attr.Initialize. It is never modified after that.\n+\n+         Name : Name_Id := No_Name;\n          --  See below for what Project_Node_Kind it is used\n \n-         Path_Name        : Name_Id         := No_Name;\n+         Path_Name : Name_Id := No_Name;\n          --  See below for what Project_Node_Kind it is used\n \n-         Value            : String_Id       := No_String;\n+         Value : String_Id := No_String;\n          --  See below for what Project_Node_Kind it is used\n \n-         Field1           : Project_Node_Id := Empty_Node;\n+         Field1 : Project_Node_Id := Empty_Node;\n          --  See below the meaning for each Project_Node_Kind\n \n-         Field2           : Project_Node_Id := Empty_Node;\n+         Field2 : Project_Node_Id := Empty_Node;\n          --  See below the meaning for each Project_Node_Kind\n \n-         Field3           : Project_Node_Id := Empty_Node;\n+         Field3 : Project_Node_Id := Empty_Node;\n          --  See below the meaning for each Project_Node_Kind\n \n-         Case_Insensitive : Boolean         := False;\n+         Case_Insensitive : Boolean := False;\n+         --  Significant only for N_Attribute_Declaration\n          --  Indicates, for an associative array attribute, that the\n          --  index is case insensitive.\n \n@@ -726,10 +737,12 @@ package Prj.Tree is\n       --  from project files.\n \n       type Project_Name_And_Node is record\n-         Name     : Name_Id;\n+         Name : Name_Id;\n          --  Name of the project\n-         Node     : Project_Node_Id;\n+\n+         Node : Project_Node_Id;\n          --  Node of the project in table Project_Nodes\n+\n          Modified : Boolean;\n          --  True when the project is being modified by another project\n       end record;"}, {"sha": "2d48db806936667095f216b3a63229d02a5b8833", "filename": "gcc/ada/raise.c", "status": "modified", "additions": 525, "deletions": 1, "changes": 526, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fraise.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fraise.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise.c?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                            $Revision: 1.1 $\n+ *                            $Revision$\n  *                                                                          *\n  *             Copyright (C) 1992-2001, Free Software Foundation, Inc.      *\n  *                                                                          *\n@@ -84,3 +84,527 @@ __gnat_unhandled_terminate ()\n     __gnat_os_exit (1);\n #endif\n }\n+\n+/* Below is the eh personality routine for Ada to be called when the GCC\n+   mechanism is used.\n+\n+   ??? It is currently inspired from the one for C++, needs cleanups and\n+   additional comments. It also contains a big bunch of debugging code that\n+   we shall get rid of at some point.  */\n+\n+#ifdef IN_RTS   /* For eh personality routine */\n+\n+/* ??? Does it make any sense to leave this for the compiler ?   */\n+\n+#include \"dwarf2.h\"\n+#include \"unwind.h\"\n+#include \"unwind-dw2-fde.h\"\n+#include \"unwind-pe.h\"\n+\n+/* First define a set of useful structures and helper routines.  */\n+\n+typedef struct _Unwind_Context _Unwind_Context;\n+\n+struct lsda_header_info\n+{\n+  _Unwind_Ptr Start;\n+  _Unwind_Ptr LPStart;\n+  _Unwind_Ptr ttype_base;\n+  const unsigned char *TType;\n+  const unsigned char *action_table;\n+  unsigned char ttype_encoding;\n+  unsigned char call_site_encoding;\n+};\n+\n+typedef struct lsda_header_info lsda_header_info;\n+\n+typedef enum {false = 0, true = 1} bool;\n+\n+static const unsigned char *\n+parse_lsda_header (_Unwind_Context *context, const unsigned char *p,\n+\t\t   lsda_header_info *info)\n+{\n+  _Unwind_Ptr tmp;\n+  unsigned char lpstart_encoding;\n+\n+  info->Start = (context ? _Unwind_GetRegionStart (context) : 0);\n+\n+  /* Find @LPStart, the base to which landing pad offsets are relative.  */\n+  lpstart_encoding = *p++;\n+  if (lpstart_encoding != DW_EH_PE_omit)\n+    p = read_encoded_value (context, lpstart_encoding, p, &info->LPStart);\n+  else\n+    info->LPStart = info->Start;\n+  \n+  /* Find @TType, the base of the handler and exception spec type data.  */\n+  info->ttype_encoding = *p++;\n+  if (info->ttype_encoding != DW_EH_PE_omit)\n+    {\n+      p = read_uleb128 (p, &tmp);\n+      info->TType = p + tmp;\n+    }\n+  else\n+    info->TType = 0;\n+\n+  /* The encoding and length of the call-site table; the action table\n+     immediately follows.  */\n+  info->call_site_encoding = *p++;\n+  p = read_uleb128 (p, &tmp);\n+  info->action_table = p + tmp;\n+\n+  return p;\n+}\n+\n+\n+static const _Unwind_Ptr\n+get_ttype_entry (_Unwind_Context *context, lsda_header_info *info, long i)\n+{\n+  _Unwind_Ptr ptr;\n+\n+  i *= size_of_encoded_value (info->ttype_encoding);\n+  read_encoded_value (context, info->ttype_encoding, info->TType - i, &ptr);\n+\n+  return ptr;\n+}\n+\n+/* This is the structure of exception objects as built by the GNAT runtime\n+   library (a-except.adb). The layouts should exactly match, and the \"common\"\n+   header is mandated by the exception handling ABI.  */\n+\n+struct _GNAT_Exception {\n+  struct _Unwind_Exception common;\n+\n+  _Unwind_Ptr id;\n+\n+  char handled_by_others;\n+  char has_cleanup;\n+  char select_cleanups;\n+};\n+\n+\n+/* The two constants below are specific ttype identifiers for special\n+   exception ids. Their value is currently hardcoded at the gigi level\n+   (see N_Exception_Handler).  */\n+\n+#define GNAT_OTHERS_ID      ((_Unwind_Ptr) 0x0)\n+#define GNAT_ALL_OTHERS_ID  ((_Unwind_Ptr) 0x1)\n+\n+\n+/* The DB stuff below is there for debugging purposes only.  */\n+\n+#define DB_PHASES     0x1\n+#define DB_SEARCH     0x2\n+#define DB_ECLASS     0x4\n+#define DB_MATCH      0x8\n+#define DB_SAW        0x10\n+#define DB_FOUND      0x20\n+#define DB_INSTALL    0x40\n+#define DB_CALLS      0x80\n+\n+#define AEHP_DB_SPECS \\\n+(DB_PHASES | DB_SEARCH | DB_SAW | DB_FOUND | DB_INSTALL | DB_CALLS | DB_MATCH)\n+\n+#undef AEHP_DB_SPECS\n+\n+#ifdef AEHP_DB_SPECS\n+static int db_specs = AEHP_DB_SPECS;\n+#else\n+static int db_specs = 0;\n+#endif\n+\n+#define START_DB(what) do { if (what & db_specs) {\n+#define END_DB(what)        } \\\n+                           } while (0);\n+\n+/* The \"action\" stuff below if also there for debugging purposes only.  */\n+\n+typedef struct {\n+  _Unwind_Action action;\n+  char * description;\n+}  action_description_t;\n+\n+action_description_t action_descriptions [] = {\n+  { _UA_SEARCH_PHASE,  \"SEARCH_PHASE\" },\n+  { _UA_CLEANUP_PHASE, \"CLEANUP_PHASE\" },\n+  { _UA_HANDLER_FRAME, \"HANDLER_FRAME\" },\n+  { _UA_FORCE_UNWIND,  \"FORCE_UNWIND\" },\n+  { -1, (char *)0 }\n+};\n+\n+static void\n+decode_actions (actions)\n+     _Unwind_Action actions;\n+{\n+  int i;\n+\n+  action_description_t * a = action_descriptions;\n+\n+  printf (\"\\n\");\n+  while (a->description != (char *)0)\n+    {\n+      if (actions & a->action)\n+\t{\n+\t  printf (\"%s \", a->description);\n+\t}\n+\n+      a ++;\n+    }\n+\n+  printf (\" : \");\n+}\n+\n+/* The following is defined from a-except.adb. It's purpose is to enable\n+   automatic backtraces upon exception raise, as provided through the \n+   GNAT.Traceback facilities.  */\n+extern void\n+__gnat_notify_handled_exception (void * handler, bool others, bool db_notify);\n+\n+/* Below is the eh personality routine per se.  */\n+\n+_Unwind_Reason_Code\n+__gnat_eh_personality (int version,\n+\t\t       _Unwind_Action actions,\n+\t\t       _Unwind_Exception_Class exception_class,\n+\t\t       struct _Unwind_Exception *ue_header,\n+\t\t       struct _Unwind_Context *context)\n+{\n+  enum found_handler_type\n+  {\n+    found_nothing,\n+    found_terminate,\n+    found_cleanup,\n+    found_handler\n+  } found_type;\n+\n+  lsda_header_info info;\n+  const unsigned char *language_specific_data;\n+  const unsigned char *action_record;\n+  const unsigned char *p;\n+  _Unwind_Ptr landing_pad, ip;\n+  int handler_switch_value;\n+\n+  bool hit_others_handler;\n+\n+  struct _GNAT_Exception * gnat_exception;\n+\n+  if (version != 1)\n+    return _URC_FATAL_PHASE1_ERROR;\n+\n+  START_DB (DB_PHASES);\n+  decode_actions (actions);\n+  END_DB (DB_PHASES);\n+ \n+  if (strcmp ( ((char *)&exception_class), \"GNU\") != 0\n+      || strcmp ( ((char *)&exception_class)+4, \"Ada\") != 0)\n+    {\n+      START_DB (DB_SEARCH);\n+      printf (\"              Exception Class doesn't match for ip = %p\\n\", ip);\n+      END_DB (DB_SEARCH);\n+      START_DB (DB_FOUND);\n+      printf (\"              => FOUND nothing\\n\");\n+      END_DB (DB_FOUND);\n+      return _URC_CONTINUE_UNWIND;\n+    }\n+\n+  gnat_exception = (struct _GNAT_Exception *) ue_header;\n+\n+  START_DB (DB_PHASES);\n+  if (gnat_exception->select_cleanups)\n+    {\n+      printf (\"(select_cleanups) :\\n\");\n+    }\n+  else\n+    {\n+      printf (\" :\\n\");\n+    }\n+  END_DB (DB_PHASES);\n+\n+  language_specific_data = (const unsigned char *)\n+    _Unwind_GetLanguageSpecificData (context);\n+\n+  /* If no LSDA, then there are no handlers or cleanups.  */\n+  if (! language_specific_data)\n+    {\n+      ip = _Unwind_GetIP (context) - 1;\n+\n+      START_DB (DB_SEARCH);\n+      printf (\"              No Language Specific Data for ip = %p\\n\", ip);\n+      END_DB (DB_SEARCH);\n+      START_DB (DB_FOUND);\n+      printf (\"              => FOUND nothing\\n\");\n+      END_DB (DB_FOUND);\n+      return _URC_CONTINUE_UNWIND;\n+    }\n+  \n+  /* Parse the LSDA header.  */\n+  p = parse_lsda_header (context, language_specific_data, &info);\n+  info.ttype_base = base_of_encoded_value (info.ttype_encoding, context);\n+  ip = _Unwind_GetIP (context) - 1;\n+  landing_pad = 0;\n+  action_record = 0;\n+  handler_switch_value = 0;\n+\n+  /* Search the call-site table for the action associated with this IP.  */\n+  while (p < info.action_table)\n+    {\n+      _Unwind_Ptr cs_start, cs_len, cs_lp, cs_action;\n+\n+      /* Note that all call-site encodings are \"absolute\" displacements.  */\n+      p = read_encoded_value (0, info.call_site_encoding, p, &cs_start);\n+      p = read_encoded_value (0, info.call_site_encoding, p, &cs_len);\n+      p = read_encoded_value (0, info.call_site_encoding, p, &cs_lp);\n+      p = read_uleb128 (p, &cs_action);\n+\n+      /* The table is sorted, so if we've passed the ip, stop.  */\n+      if (ip < info.Start + cs_start)\n+ \tp = info.action_table;\n+      else if (ip < info.Start + cs_start + cs_len)\n+\t{\n+\t  if (cs_lp)\n+\t    landing_pad = info.LPStart + cs_lp;\n+\t  if (cs_action)\n+\t    action_record = info.action_table + cs_action - 1;\n+\t  goto found_something;\n+\t}\n+    }\n+\n+  START_DB (DB_SEARCH);\n+  printf (\"              No Action entry for ip = %p\\n\", ip);\n+  END_DB (DB_SEARCH);\n+\n+  /* If ip is not present in the table, call terminate.  This is for\n+     a destructor inside a cleanup, or a library routine the compiler\n+     was not expecting to throw.\n+     \n+     found_type = \n+     (actions & _UA_FORCE_UNWIND ? found_nothing : found_terminate);\n+  \n+     ??? Does this have a mapping in Ada semantics ?  */\n+\n+  found_type = found_nothing;\n+\n+  goto do_something;\n+\n+ found_something:\n+\n+  found_type = found_nothing;\n+  \n+  if (landing_pad == 0)\n+    {\n+      /* If ip is present, and has a null landing pad, there are\n+\t no cleanups or handlers to be run.  */\n+      START_DB (DB_SEARCH);\n+      printf (\"              No Landing Pad for ip = %p\\n\", ip);\n+      END_DB (DB_SEARCH);\n+    }\n+  else if (action_record == 0)\n+    {\n+      START_DB (DB_SEARCH);\n+      printf (\"              Null Action Record for ip = %p <===\\n\", ip);\n+      END_DB (DB_SEARCH);\n+    }\n+  else\n+    {\n+      signed long ar_filter, ar_disp;\n+\n+      signed long cleanup_filter = 0;\n+      signed long handler_filter = 0;\n+\n+      START_DB (DB_SEARCH);\n+      printf (\"              Landing Pad + Action Record for ip = %p\\n\", ip);\n+      END_DB (DB_SEARCH);\n+\n+      START_DB (DB_MATCH);\n+      printf (\"              => Search for exception matching id %p\\n\", \n+\t      gnat_exception->id);\n+      END_DB (DB_MATCH);\n+\n+      /* Otherwise we have a catch handler or exception specification.  */\n+\n+      while (1)\n+\t{\n+\t  _Unwind_Ptr tmp;\n+\n+\t  p = action_record;\n+\t  p = read_sleb128 (p, &tmp); ar_filter = tmp;\n+\t  read_sleb128 (p, &tmp); ar_disp = tmp;\n+\n+\t  START_DB (DB_MATCH);\n+\t  printf (\"ar_filter  %d\\n\", ar_filter);\n+\t  END_DB (DB_MATCH);\n+\n+\t  if (ar_filter == 0)\n+\t    {\n+\t      /* Zero filter values are cleanups. We should not be seeing\n+\t\t this for GNU-Ada though\n+\t\t saw_cleanup = true;  */\n+\t      START_DB (DB_SEARCH);\n+\t      printf (\"              Null Filter for ip = %p <===\\n\", ip);\n+\t      END_DB (DB_SEARCH);\n+\t    }\n+\t  else if (ar_filter > 0)\n+\t    {\n+\t      _Unwind_Ptr lp_id = get_ttype_entry (context, &info, ar_filter);\n+\t      \n+\t      START_DB (DB_MATCH);\n+\t      printf (\"catch_type \");\n+\t      \n+\t      switch (lp_id)\n+\t\t{\n+\t\tcase GNAT_ALL_OTHERS_ID:\n+\t\t  printf (\"GNAT_ALL_OTHERS_ID\\n\");\t\t\n+\t\t  break;\n+\t\t  \n+\t\tcase GNAT_OTHERS_ID:\n+\t\t  printf (\"GNAT_OTHERS_ID\\n\");\n+\t\t  break;\n+\t\t  \n+\t\tdefault:\n+\t\t  printf (\"%p\\n\", lp_id);\n+\t\t  break;\n+\t\t}\n+\n+\t      END_DB (DB_MATCH);\n+\n+\t      if (lp_id == GNAT_ALL_OTHERS_ID)\n+\t\t{\n+\t\t  START_DB (DB_SAW);\n+\t\t  printf (\"              => SAW cleanup\\n\");\n+\t\t  END_DB (DB_SAW);\n+\n+\t\t  cleanup_filter = ar_filter;\n+\t\t  gnat_exception->has_cleanup = true;\n+\t\t}\n+\n+\t      hit_others_handler = \n+\t\t(lp_id == GNAT_OTHERS_ID && gnat_exception->handled_by_others);\n+\n+\t      if (hit_others_handler || lp_id == gnat_exception->id)\n+\t\t{\n+\t\t  START_DB (DB_SAW);\n+\t\t  printf (\"              => SAW handler\\n\");\n+\t\t  END_DB (DB_SAW);\n+\n+\t\t  handler_filter = ar_filter;     \n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Negative filter values are for C++ exception specifications.\n+\t\t Should not be there for Ada :/  */\n+\t    }\n+\n+\t  if (actions & _UA_SEARCH_PHASE)\n+\t    {\n+\t      if (handler_filter)\n+\t\t{\n+\t\t  found_type = found_handler;\n+\t\t  handler_switch_value = handler_filter;\n+\t\t  break;\n+\t\t}\n+\n+\t      if (cleanup_filter)\n+\t\t{\n+\t\t  found_type = found_cleanup;\n+\t\t}\n+\t    }\n+\n+\t  if (actions & _UA_CLEANUP_PHASE)\n+\t    {\n+\t      if (handler_filter)\n+\t\t{\n+\t\t  found_type = found_handler;\n+\t\t  handler_switch_value = handler_filter;\n+\t\t  break;\n+\t\t}\n+\t\t\n+\t      if (cleanup_filter)\n+\t\t{\n+\t\t  found_type = found_cleanup;\n+\t\t  handler_switch_value = cleanup_filter;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\n+\t  if (ar_disp == 0)\n+\t    break;\n+\t  action_record = p + ar_disp;\n+\t}\n+    }\n+\n+ do_something:\n+  if (found_type == found_nothing) {\n+    START_DB (DB_FOUND);\n+    printf (\"              => FOUND nothing\\n\");\n+    END_DB (DB_FOUND);\n+\n+    return _URC_CONTINUE_UNWIND;\n+  }\n+\n+   if (actions & _UA_SEARCH_PHASE)\n+    {\n+      START_DB (DB_FOUND);\n+      printf (\"              => Computing return for SEARCH\\n\");\n+      END_DB (DB_FOUND);\n+\n+      if (found_type == found_cleanup\n+\t  && !gnat_exception->select_cleanups)\n+\t{\n+\t  START_DB (DB_FOUND);\n+\t  printf (\"              => FOUND cleanup\\n\");\n+\t  END_DB (DB_FOUND);\n+\n+\t  return _URC_CONTINUE_UNWIND;\n+\t}\n+\n+      START_DB (DB_FOUND);\n+      printf (\"              => FOUND handler\\n\");\n+      END_DB (DB_FOUND);\n+\n+      return _URC_HANDLER_FOUND;\n+    }\n+\n+ install_context:\n+   \n+   START_DB (DB_INSTALL);\n+   printf (\"              => INSTALLING context for filter %d\\n\",\n+\t   handler_switch_value);\n+   END_DB (DB_INSTALL);\n+\n+   if (found_type == found_terminate)\n+     {\n+       /* Should not have this for Ada ?  */\n+       START_DB (DB_INSTALL);\n+       printf (\"              => FOUND terminate <===\\n\");\n+       END_DB (DB_INSTALL);\n+     }\n+\n+   \n+   /* Signal that we are going to enter a handler, which will typically\n+      enable the debugger to take control and possibly output an automatic\n+      backtrace. Note that we are supposed to provide the handler's entry\n+      point here but we don't have it.\n+    */\n+   __gnat_notify_handled_exception\n+     ((void *)landing_pad, hit_others_handler, true);\n+      \n+\n+   /* The GNU-Ada exception handlers know how to find the exception\n+      occurrence without having to pass it as an argument so there\n+      is no need to feed any specific register with this information.\n+\t \n+      This is why the two following lines are commented out.  */\n+\n+   /* _Unwind_SetGR (context, __builtin_eh_return_data_regno (0),\n+      (_Unwind_Ptr) &xh->unwindHeader);  */\n+\n+  _Unwind_SetGR (context, __builtin_eh_return_data_regno (1),\n+\t\t handler_switch_value);\n+\n+  _Unwind_SetIP (context, landing_pad);\n+\n+  return _URC_INSTALL_CONTEXT;\n+}\n+\n+\n+#endif   /* IN_RTS - For eh personality routine   */"}, {"sha": "816d851e4806ac0186fc3a54312dbddc5d869453", "filename": "gcc/ada/s-taprob.adb", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fs-taprob.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fs-taprob.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---                             $Revision: 1.79 $\n+--                             $Revision$\n --                                                                          --\n --             Copyright (C) 1991-2001 Florida State University             --\n --                                                                          --\n@@ -42,12 +42,8 @@ with System.Task_Primitives.Operations;\n --  used for Write_Lock\n --           Unlock\n \n-with Ada.Exceptions;\n---  used for Raise_Exception\n-\n package body System.Tasking.Protected_Objects is\n \n-   use Ada.Exceptions;\n    use System.Task_Primitives.Operations;\n \n    -------------------------\n@@ -97,7 +93,7 @@ package body System.Tasking.Protected_Objects is\n       Write_Lock (Object.L'Access, Ceiling_Violation);\n \n       if Ceiling_Violation then\n-         Raise_Exception (Program_Error'Identity, \"Ceiling Violation\");\n+         raise Program_Error;\n       end if;\n    end Lock;\n \n@@ -111,7 +107,7 @@ package body System.Tasking.Protected_Objects is\n       Read_Lock (Object.L'Access, Ceiling_Violation);\n \n       if Ceiling_Violation then\n-         Raise_Exception (Program_Error'Identity, \"Ceiling Violation\");\n+         raise Program_Error;\n       end if;\n    end Lock_Read_Only;\n "}, {"sha": "53ed7ae1b89ea4a90c2cbc1a5c3114705476bae9", "filename": "gcc/ada/switch.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fswitch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b/gcc%2Fada%2Fswitch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch.adb?ref=17c5c8a5ee243fd9b68af7beeb9351a4ee215b9b", "patch": "@@ -610,8 +610,9 @@ package body Switch is\n \n                   when 'c' =>\n                      Ptr := Ptr + 1;\n+\n                      if Ptr > Max then\n-                        Osint.Fail (\"Invalid switch: \", \"ec\");\n+                        raise Bad_Switch;\n                      end if;\n \n                      Config_File_Name :=\n@@ -623,18 +624,17 @@ package body Switch is\n \n                   when 'm' =>\n                      Ptr := Ptr + 1;\n+\n                      if Ptr > Max then\n-                        Osint.Fail (\"Invalid switch: \", \"em\");\n+                        raise Bad_Switch;\n                      end if;\n \n                      Mapping_File_Name :=\n                        new String'(Switch_Chars (Ptr .. Max));\n-\n                      return;\n \n                   when others =>\n-                     Osint.Fail (\"Invalid switch: \",\n-                                   (1 => 'e', 2 => Switch_Chars (Ptr)));\n+                     raise Bad_Switch;\n                end case;\n \n             --  Processing for E switch"}]}