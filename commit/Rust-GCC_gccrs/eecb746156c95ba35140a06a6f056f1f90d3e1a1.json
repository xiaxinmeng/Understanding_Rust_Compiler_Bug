{"sha": "eecb746156c95ba35140a06a6f056f1f90d3e1a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVjYjc0NjE1NmM5NWJhMzUxNDBhMDZhNmYwNTZmMWY5MGQzZTFhMQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2007-05-31T06:40:42Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-05-31T06:40:42Z"}, "message": "[multiple changes]\n\n2003-05-31  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR libjava/32098\n\t* libtool.m4: Revert previous change.\n\t* ltgcc.m4: Put it here.\n\nlibjava:\n2007-05-31  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR libjava/32098\n\t* configure: Regenerated.\n\t* aclocal.m4: Regenerated.\n\nFrom-SVN: r125215", "tree": {"sha": "bf4dc603a731e0aa2308aba16b30a78ccf7b611c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf4dc603a731e0aa2308aba16b30a78ccf7b611c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eecb746156c95ba35140a06a6f056f1f90d3e1a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eecb746156c95ba35140a06a6f056f1f90d3e1a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eecb746156c95ba35140a06a6f056f1f90d3e1a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eecb746156c95ba35140a06a6f056f1f90d3e1a1/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed0e74e0a670f53ee3ea7e9ba58a70a3ce7e9d82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed0e74e0a670f53ee3ea7e9ba58a70a3ce7e9d82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed0e74e0a670f53ee3ea7e9ba58a70a3ce7e9d82"}], "stats": {"total": 115, "additions": 89, "deletions": 26}, "files": [{"sha": "c22fe7062d11f07899c0e4a63b1b3ea9158947ce", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecb746156c95ba35140a06a6f056f1f90d3e1a1/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecb746156c95ba35140a06a6f056f1f90d3e1a1/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=eecb746156c95ba35140a06a6f056f1f90d3e1a1", "patch": "@@ -1,3 +1,9 @@\n+2003-05-31  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR libjava/32098\n+\t* libtool.m4: Revert previous change.\n+\t* ltgcc.m4: Put it here.\n+\n 2003-05-30  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* MAINTAINERS (Various Maintainers): Add myself as"}, {"sha": "9794017b2574203a2f4faff84ad10d56ee35d304", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecb746156c95ba35140a06a6f056f1f90d3e1a1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecb746156c95ba35140a06a6f056f1f90d3e1a1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=eecb746156c95ba35140a06a6f056f1f90d3e1a1", "patch": "@@ -1,3 +1,9 @@\n+2007-05-31  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR libjava/32098\n+\t* configure: Regenerated.\n+\t* aclocal.m4: Regenerated.\n+\n 2007-05-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR libjava/32098"}, {"sha": "e84e66e79d1ac0bcb41e3fb27b6406f3eabe7e2b", "filename": "libjava/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecb746156c95ba35140a06a6f056f1f90d3e1a1/libjava%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecb746156c95ba35140a06a6f056f1f90d3e1a1/libjava%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Faclocal.m4?ref=eecb746156c95ba35140a06a6f056f1f90d3e1a1", "patch": "@@ -7319,6 +7319,7 @@ m4_include([../config/no-executables.m4])\n m4_include([../config/tls.m4])\n m4_include([../config/unwind_ipinfo.m4])\n m4_include([../libtool.m4])\n+m4_include([../ltgcc.m4])\n m4_include([../ltoptions.m4])\n m4_include([../ltsugar.m4])\n m4_include([../ltversion.m4])"}, {"sha": "1d27fc4fd4b6198ad4aa38ae81ca0cde3ca23a41", "filename": "libjava/configure", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecb746156c95ba35140a06a6f056f1f90d3e1a1/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecb746156c95ba35140a06a6f056f1f90d3e1a1/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=eecb746156c95ba35140a06a6f056f1f90d3e1a1", "patch": "@@ -15610,17 +15610,17 @@ fi\n \n \n # Source file extension for Java test sources.\n-ac_ext=java\n+ac_ext=c\n \n # Object file extension for compiled Java test sources.\n objext=o\n objext_GCJ=$objext\n \n # Code to be used in simple compile tests\n-lt_simple_compile_test_code=\"class foo {}\"\n+lt_simple_compile_test_code=\"int some_variable = 0;\"\n \n # Code to be used in simple link tests\n-lt_simple_link_test_code='public class conftest { public static void main(String[] argv) {}; }'\n+lt_simple_link_test_code='int main(){return(0);}'\n \n # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n \n@@ -15653,13 +15653,6 @@ _lt_linker_boilerplate=`cat conftest.err`\n $RM conftest*\n \n \n-# We can't call gcj to test gcj features when building libjava in gcc\n-# since gcj may depend on ecj1 which may not be available yet.  We use\n-# gcc to test gcj features.\n-ac_ext=c\n-lt_simple_compile_test_code=\"int some_variable = 0;\"\n-lt_simple_link_test_code='int main(){return(0);}'\n-\n # Allow CC to be a program name with arguments.\n compiler=$CC\n compiler_GCJ=$CC\n@@ -15708,11 +15701,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:15711: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:15704: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:15715: \\$? = $ac_status\" >&5\n+   echo \"$as_me:15708: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -16024,11 +16017,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:16027: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:16020: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:16031: \\$? = $ac_status\" >&5\n+   echo \"$as_me:16024: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -16123,11 +16116,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:16126: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:16119: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:16130: \\$? = $ac_status\" >&5\n+   echo \"$as_me:16123: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -16175,11 +16168,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:16178: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:16171: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:16182: \\$? = $ac_status\" >&5\n+   echo \"$as_me:16175: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -18182,6 +18175,7 @@ fi\n \n fi\n \n+compiler_GCJ=${GCJ-gcj}\n ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n@@ -18501,7 +18495,7 @@ if test \"${enable_sjlj_exceptions+set}\" = set; then\n   :\n else\n   cat > conftest.$ac_ext << EOF\n-#line 18504 \"configure\"\n+#line 18498 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()"}, {"sha": "46d59635dfa53aa19174a62d5a50f9572829e938", "filename": "libtool.m4", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecb746156c95ba35140a06a6f056f1f90d3e1a1/libtool.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecb746156c95ba35140a06a6f056f1f90d3e1a1/libtool.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libtool.m4?ref=eecb746156c95ba35140a06a6f056f1f90d3e1a1", "patch": "@@ -6757,14 +6757,9 @@ _LT_TAG_COMPILER\n _LT_COMPILER_BOILERPLATE\n _LT_LINKER_BOILERPLATE\n \n-# We can't call gcj to test gcj features when building libjava in gcc\n-# since gcj may depend on ecj1 which may not be available yet.  We use\n-# gcc to test gcj features.\n-ac_ext=c\n-lt_simple_compile_test_code=\"int some_variable = 0;\"\n-lt_simple_link_test_code='int main(){return(0);}'\n-\n # Allow CC to be a program name with arguments.\n+lt_save_CC=\"$CC\"\n+CC=${GCJ-\"gcj\"}\n compiler=$CC\n _LT_TAGVAR(compiler, $1)=$CC\n _LT_CC_BASENAME([$compiler])\n@@ -6791,6 +6786,7 @@ if test -n \"$compiler\"; then\n fi\n \n AC_LANG_RESTORE\n+CC=\"$lt_save_CC\"\n ])# _LT_LANG_GCJ_CONFIG\n \n "}, {"sha": "fb7b6eeb98dd34b5eb8956303c9af441514b4206", "filename": "ltgcc.m4", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecb746156c95ba35140a06a6f056f1f90d3e1a1/ltgcc.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecb746156c95ba35140a06a6f056f1f90d3e1a1/ltgcc.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ltgcc.m4?ref=eecb746156c95ba35140a06a6f056f1f90d3e1a1", "patch": "@@ -0,0 +1,60 @@\n+# _LT_LANG_GCJ_CONFIG([TAG])\n+# --------------------------\n+# Ensure that the configuration variables for the GNU Java Compiler compiler\n+# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n+# to write the compiler configuration to `libtool'.  Locally modified to\n+# run its tests on C programs, because we cannot link Java programs until\n+# we have finished building libjava.\n+AC_DEFUN([_LT_LANG_GCJ_CONFIG],\n+[AC_REQUIRE([LT_PROG_GCJ])dnl\n+AC_LANG_SAVE\n+\n+# Source file extension for Java test sources.\n+ac_ext=c\n+\n+# Object file extension for compiled Java test sources.\n+objext=o\n+_LT_TAGVAR(objext, $1)=$objext\n+\n+# Code to be used in simple compile tests\n+lt_simple_compile_test_code=\"int some_variable = 0;\"\n+\n+# Code to be used in simple link tests\n+lt_simple_link_test_code='int main(){return(0);}'\n+\n+# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n+_LT_TAG_COMPILER\n+\n+# save warnings/boilerplate of simple test code\n+_LT_COMPILER_BOILERPLATE\n+_LT_LINKER_BOILERPLATE\n+\n+# Allow CC to be a program name with arguments.\n+compiler=$CC\n+_LT_TAGVAR(compiler, $1)=$CC\n+_LT_CC_BASENAME([$compiler])\n+\n+# GCJ did not exist at the time GCC didn't implicitly link libc in.\n+_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n+\n+_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n+\n+## CAVEAT EMPTOR:\n+## There is no encapsulation within the following macros, do not change\n+## the running order or otherwise move them around unless you know exactly\n+## what you are doing...\n+if test -n \"$compiler\"; then\n+  _LT_COMPILER_NO_RTTI($1)\n+  _LT_COMPILER_PIC($1)\n+  _LT_COMPILER_C_O($1)\n+  _LT_COMPILER_FILE_LOCKS($1)\n+  _LT_LINKER_SHLIBS($1)\n+  _LT_SYS_DYNAMIC_LINKER($1)\n+  _LT_LINKER_HARDCODE_LIBPATH($1)\n+\n+  _LT_CONFIG($1)\n+fi\n+\n+_LT_TAGVAR(compiler, $1)=${GCJ-gcj}\n+AC_LANG_RESTORE\n+])# _LT_LANG_GCJ_CONFIG"}]}