{"sha": "ad25ba1779f5e1a0e2a640e12dda3f6c7a53a163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQyNWJhMTc3OWY1ZTFhMGUyYTY0MGUxMmRkYTNmNmM3YTUzYTE2Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-01-23T12:00:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-01-23T12:00:29Z"}, "message": "(simplify_comparison): Can remove NOT on both operands if we swap\ncomparison code.\n\nFrom-SVN: r6410", "tree": {"sha": "c80f3964fca696ddf817b152ee5f48f23cc293d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c80f3964fca696ddf817b152ee5f48f23cc293d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad25ba1779f5e1a0e2a640e12dda3f6c7a53a163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad25ba1779f5e1a0e2a640e12dda3f6c7a53a163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad25ba1779f5e1a0e2a640e12dda3f6c7a53a163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad25ba1779f5e1a0e2a640e12dda3f6c7a53a163/comments", "author": null, "committer": null, "parents": [{"sha": "2f607b946a7052254062f863a36ba1e7b6de80d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f607b946a7052254062f863a36ba1e7b6de80d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f607b946a7052254062f863a36ba1e7b6de80d1"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "1737e6ec465b6b593621b412e35f2ef27bfa82e1", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad25ba1779f5e1a0e2a640e12dda3f6c7a53a163/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad25ba1779f5e1a0e2a640e12dda3f6c7a53a163/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ad25ba1779f5e1a0e2a640e12dda3f6c7a53a163", "patch": "@@ -8429,7 +8429,7 @@ simplify_comparison (code, pop0, pop1)\n \t  && GET_CODE (XEXP (XEXP (op0, 0), 0)) == SUBREG\n \t  && GET_CODE (XEXP (XEXP (op1, 0), 0)) == SUBREG\n \t  && (GET_MODE (SUBREG_REG (XEXP (XEXP (op0, 0), 0)))\n-\t      == GET_MODE (SUBREG_REG (XEXP (XEXP (op0, 0), 0))))\n+\t      == GET_MODE (SUBREG_REG (XEXP (XEXP (op1, 0), 0))))\n \t  && GET_CODE (XEXP (op0, 1)) == CONST_INT\n \t  && GET_CODE (XEXP (op1, 1)) == CONST_INT\n \t  && GET_CODE (XEXP (XEXP (op0, 0), 1)) == CONST_INT\n@@ -8517,12 +8517,13 @@ simplify_comparison (code, pop0, pop1)\n \t  code = unsigned_condition (code);\n \t}\n \n-      /* If both operands are NOT or both are NEG, we can strip off the\n-\t outer operation if this is just an equality comparison.  */\n-      else if ((code == EQ || code == NE)\n-\t       && ((GET_CODE (op0) == NOT && GET_CODE (op1) == NOT)\n-\t\t   || (GET_CODE (op0) == NEG && GET_CODE (op1) == NEG)))\n-\top0 = XEXP (op0, 0), op1 = XEXP (op1, 0);\n+      /* If both operands are NOT, we can strip off the outer operation\n+\t and adjust the comparison code for swapped operands; similarly for\n+\t NEG, except that this must be an equality comparison.  */\n+      else if ((GET_CODE (op0) == NOT && GET_CODE (op1) == NOT)\n+\t       || (GET_CODE (op0) == NEG && GET_CODE (op1) == NEG\n+\t\t   && (code == EQ || code == NE)))\n+\top0 = XEXP (op0, 0), op1 = XEXP (op1, 0), code = swap_condition (code);\n \n       else\n \tbreak;"}]}