{"sha": "ee448a523d377f9ed882dac806d2f5001bfa2432", "node_id": "C_kwDOANBUbNoAKGVlNDQ4YTUyM2QzNzdmOWVkODgyZGFjODA2ZDJmNTAwMWJmYTI0MzI", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-11-17T19:14:06Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-11-19T16:38:06Z"}, "message": "Limit depth for all GORI expressions.\n\nApply the logical_depth limit ranger uses to all stmts with multiple ssa-names\nto avoid excessive outgoing calculations.\n\n\tgcc/\n\tPR tree-optimization/103254\n\t* gimple-range-gori.cc (range_def_chain::get_def_chain): Limit the\n\tdepth for all statements with multple ssa names.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr103254.c: New.", "tree": {"sha": "3056fe7c09a1e9b209a33b169a9c91a7b8a21468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3056fe7c09a1e9b209a33b169a9c91a7b8a21468"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee448a523d377f9ed882dac806d2f5001bfa2432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee448a523d377f9ed882dac806d2f5001bfa2432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee448a523d377f9ed882dac806d2f5001bfa2432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee448a523d377f9ed882dac806d2f5001bfa2432/comments", "author": null, "committer": null, "parents": [{"sha": "f47870e6a272dfe740a38422030c6c68e0fc7ff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47870e6a272dfe740a38422030c6c68e0fc7ff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f47870e6a272dfe740a38422030c6c68e0fc7ff8"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "911d7ac4ec8be83f2d810cd2781b28bbf5b9358d", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee448a523d377f9ed882dac806d2f5001bfa2432/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee448a523d377f9ed882dac806d2f5001bfa2432/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=ee448a523d377f9ed882dac806d2f5001bfa2432", "patch": "@@ -331,7 +331,6 @@ range_def_chain::get_def_chain (tree name)\n {\n   tree ssa1, ssa2, ssa3;\n   unsigned v = SSA_NAME_VERSION (name);\n-  bool is_logical = false;\n \n   // If it has already been processed, just return the cached value.\n   if (has_def_chain (name))\n@@ -348,15 +347,6 @@ range_def_chain::get_def_chain (tree name)\n   gimple *stmt = SSA_NAME_DEF_STMT (name);\n   if (gimple_range_handler (stmt))\n     {\n-      is_logical = is_gimple_logical_p (stmt);\n-      // Terminate the def chains if we see too many cascading logical stmts.\n-      if (is_logical)\n-\t{\n-\t  if (m_logical_depth == param_ranger_logical_depth)\n-\t    return NULL;\n-\t  m_logical_depth++;\n-\t}\n-\n       ssa1 = gimple_range_ssa_p (gimple_range_operand1 (stmt));\n       ssa2 = gimple_range_ssa_p (gimple_range_operand2 (stmt));\n       ssa3 = NULL_TREE;\n@@ -376,14 +366,22 @@ range_def_chain::get_def_chain (tree name)\n       return NULL;\n     }\n \n+  // Terminate the def chains if we see too many cascading stmts.\n+  if (m_logical_depth == param_ranger_logical_depth)\n+    return NULL;\n+\n+  // Increase the depth if we have a pair of ssa-names.\n+  if (ssa1 && ssa2)\n+    m_logical_depth++;\n+\n   register_dependency (name, ssa1, gimple_bb (stmt));\n   register_dependency (name, ssa2, gimple_bb (stmt));\n   register_dependency (name, ssa3, gimple_bb (stmt));\n   // Stmts with no understandable operands are also imports.\n   if (!ssa1 && !ssa2 & !ssa3)\n     set_import (m_def_chain[v], name, NULL);\n \n-  if (is_logical)\n+  if (ssa1 && ssa2)\n     m_logical_depth--;\n \n   return m_def_chain[v].bm;"}, {"sha": "62d2415f2160565b6d876fe03a95aa36982753cc", "filename": "gcc/testsuite/gcc.dg/pr103254.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee448a523d377f9ed882dac806d2f5001bfa2432/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103254.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee448a523d377f9ed882dac806d2f5001bfa2432/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103254.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103254.c?ref=ee448a523d377f9ed882dac806d2f5001bfa2432", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-timeout 10 } */\n+\n+short int i;\n+\n+void\n+foo (void)\n+{\n+  for (i = 1; i < 2; i += 4)\n+    {\n+      int j;\n+\n+      for (j = 0; j < 5; j += 4)\n+        {\n+          int k;\n+\n+          for (k = 0; k < 68; k += 4)\n+            {\n+              i &= j;\n+              j &= i;\n+            }\n+        }\n+    }\n+}"}]}