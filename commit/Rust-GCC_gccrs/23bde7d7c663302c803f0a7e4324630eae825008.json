{"sha": "23bde7d7c663302c803f0a7e4324630eae825008", "node_id": "C_kwDOANBUbNoAKDIzYmRlN2Q3YzY2MzMwMmM4MDNmMGE3ZTQzMjQ2MzBlYWU4MjUwMDg", "commit": {"author": {"name": "Faisal Abbas", "email": "90.abbasfaisal@gmail.com", "date": "2022-07-29T04:53:09Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-25T11:40:25Z"}, "message": "rust-constexpr.cc: port over cxx_eval_unary_expression", "tree": {"sha": "245f661371c5540967f078cfa153721450e62773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/245f661371c5540967f078cfa153721450e62773"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23bde7d7c663302c803f0a7e4324630eae825008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23bde7d7c663302c803f0a7e4324630eae825008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23bde7d7c663302c803f0a7e4324630eae825008", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23bde7d7c663302c803f0a7e4324630eae825008/comments", "author": {"login": "abbasfaisal", "id": 9428333, "node_id": "MDQ6VXNlcjk0MjgzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/9428333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abbasfaisal", "html_url": "https://github.com/abbasfaisal", "followers_url": "https://api.github.com/users/abbasfaisal/followers", "following_url": "https://api.github.com/users/abbasfaisal/following{/other_user}", "gists_url": "https://api.github.com/users/abbasfaisal/gists{/gist_id}", "starred_url": "https://api.github.com/users/abbasfaisal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abbasfaisal/subscriptions", "organizations_url": "https://api.github.com/users/abbasfaisal/orgs", "repos_url": "https://api.github.com/users/abbasfaisal/repos", "events_url": "https://api.github.com/users/abbasfaisal/events{/privacy}", "received_events_url": "https://api.github.com/users/abbasfaisal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e991065fdbee901d4bfe3af89e0d497e74dcc7d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e991065fdbee901d4bfe3af89e0d497e74dcc7d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e991065fdbee901d4bfe3af89e0d497e74dcc7d3"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "6ef601d66c26d5ca9b1f0fba91ee9e6f5c0ac9dc", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bde7d7c663302c803f0a7e4324630eae825008/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bde7d7c663302c803f0a7e4324630eae825008/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=23bde7d7c663302c803f0a7e4324630eae825008", "patch": "@@ -501,6 +501,10 @@ static tree\n eval_switch_expr (const constexpr_ctx *ctx, tree t, bool *non_constant_p,\n \t\t  bool *overflow_p, tree *jump_target);\n \n+static tree\n+eval_unary_expression (const constexpr_ctx *ctx, tree t, bool /*lval*/,\n+\t\t       bool *non_constant_p, bool *overflow_p);\n+\n /* Variables and functions to manage constexpr call expansion context.\n    These do not need to be marked for PCH or GC.  */\n \n@@ -739,6 +743,33 @@ eval_constant_expression (const constexpr_ctx *ctx, tree t, bool lval,\n \t}\n       break;\n \n+    case REALPART_EXPR:\n+    case IMAGPART_EXPR:\n+      if (lval)\n+\t{\n+\t  r = eval_constant_expression (ctx, TREE_OPERAND (t, 0), lval,\n+\t\t\t\t\tnon_constant_p, overflow_p);\n+\t  if (r == error_mark_node)\n+\t    ;\n+\t  else if (r == TREE_OPERAND (t, 0))\n+\t    r = t;\n+\t  else\n+\t    r = fold_build1 (TREE_CODE (t), TREE_TYPE (t), r);\n+\t  break;\n+\t}\n+      /* FALLTHRU */\n+    case CONJ_EXPR:\n+    case FIX_TRUNC_EXPR:\n+    case FLOAT_EXPR:\n+    case NEGATE_EXPR:\n+    case ABS_EXPR:\n+    case ABSU_EXPR:\n+    case BIT_NOT_EXPR:\n+    case TRUTH_NOT_EXPR:\n+    case FIXED_CONVERT_EXPR:\n+      r = eval_unary_expression (ctx, t, lval, non_constant_p, overflow_p);\n+      break;\n+\n     case LOOP_EXPR:\n     case WHILE_STMT:\n     case FOR_STMT:\n@@ -2970,6 +3001,37 @@ eval_switch_expr (const constexpr_ctx *ctx, tree t, bool *non_constant_p,\n   return NULL_TREE;\n }\n \n+// forked from gcc/cp/constexpr.cc eval_unary_expression\n+\n+/* Subroutine of cxx_eval_constant_expression.\n+   Attempt to reduce the unary expression tree T to a compile time value.\n+   If successful, return the value.  Otherwise issue a diagnostic\n+   and return error_mark_node.  */\n+\n+static tree\n+eval_unary_expression (const constexpr_ctx *ctx, tree t, bool /*lval*/,\n+\t\t       bool *non_constant_p, bool *overflow_p)\n+{\n+  tree r;\n+  tree orig_arg = TREE_OPERAND (t, 0);\n+  tree arg = eval_constant_expression (ctx, orig_arg, /*lval*/ false,\n+\t\t\t\t       non_constant_p, overflow_p);\n+  VERIFY_CONSTANT (arg);\n+  location_t loc = EXPR_LOCATION (t);\n+  enum tree_code code = TREE_CODE (t);\n+  tree type = TREE_TYPE (t);\n+  r = fold_unary_loc (loc, code, type, arg);\n+  if (r == NULL_TREE)\n+    {\n+      if (arg == orig_arg)\n+\tr = t;\n+      else\n+\tr = build1_loc (loc, code, type, arg);\n+    }\n+  VERIFY_CONSTANT (r);\n+  return r;\n+}\n+\n // #include \"gt-rust-rust-constexpr.h\"\n \n } // namespace Compile"}]}