{"sha": "8544ed6eea68a80999504c8a4b21b77d29cd86e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU0NGVkNmVlYTY4YTgwOTk5NTA0YzhhNGIyMWI3N2QyOWNkODZlMg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-02-07T18:18:16Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-02-07T18:18:16Z"}, "message": "[AArch64] Change representation of SABD in RTL\n\nRichard raised a concern about the RTL we use to represent the AdvSIMD SABD\n(vector signed absolute difference) instruction.\nWe currently represent it as ABS (MINUS op1 op2).\n\nThis isn't exactly what SABD does. ABS treats its input as a signed value\nand returns the absolute of that.\n\nFor example:\n(sabd:QI 64 -128) == 192 (unsigned) aka -64 (signed)\nwhereas\n(minus:QI 64 -128) == 192 (unsigned) aka -64 (signed), (abs ...) of that is 64.\n\nA better way to describe the instruction is with MINUS (SMAX (op1 op2) SMIN (op1 op2)).\nThis patch implements that, and also implements similar semantics for the UABD instruction\nthat uses UMAX and UMIN.\n\nThat way for the example above we'll have:\n(minus:QI (smax:QI (64 -128)) (smin:QI (64 -128))) == (minus:QI 64 -128) == 192 (or -64 signed) which matches\nwhat SABD does. \n\n\t* config/aarch64/iterators.md (max_opp): New code_attr.\n\t(USMAX): New code iterator.\n\t* config/aarch64/predicates.md (aarch64_smin): New predicate.\n\t(aarch64_smax): Likewise.\n\t* config/aarch64/aarch64-simd.md (abd<mode>_3): Rename to...\n\t(*aarch64_<su>abd<mode>_3): ... Change RTL representation to\n\tMINUS (MAX MIN).\n\n\t* gcc.target/aarch64/abd_1.c: New test.\n\t* gcc.dg/sabd_1.c: Likewise.\n\nFrom-SVN: r268658", "tree": {"sha": "e6eed6a6e7e0ba6c0e7e187fac794816343c70f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6eed6a6e7e0ba6c0e7e187fac794816343c70f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8544ed6eea68a80999504c8a4b21b77d29cd86e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8544ed6eea68a80999504c8a4b21b77d29cd86e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8544ed6eea68a80999504c8a4b21b77d29cd86e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8544ed6eea68a80999504c8a4b21b77d29cd86e2/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b99b6c0cc2fd1da7c9d1d66c39212d7f3e4bc65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b99b6c0cc2fd1da7c9d1d66c39212d7f3e4bc65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b99b6c0cc2fd1da7c9d1d66c39212d7f3e4bc65"}], "stats": {"total": 131, "additions": 125, "deletions": 6}, "files": [{"sha": "098479015d4cd9ab818d19b6a3fe9307070811e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8544ed6eea68a80999504c8a4b21b77d29cd86e2", "patch": "@@ -1,3 +1,13 @@\n+2019-02-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/iterators.md (max_opp): New code_attr.\n+\t(USMAX): New code iterator.\n+\t* config/aarch64/predicates.md (aarch64_smin): New predicate.\n+\t(aarch64_smax): Likewise.\n+\t* config/aarch64/aarch64-simd.md (abd<mode>_3): Rename to...\n+\t(*aarch64_<su>abd<mode>_3): ... Change RTL representation to\n+\tMINUS (MAX MIN).\n+\n 2019-02-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89229"}, {"sha": "e3852c5d182b70978d7603225fce55c0b8ee2894", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=8544ed6eea68a80999504c8a4b21b77d29cd86e2", "patch": "@@ -705,13 +705,22 @@\n   [(set_attr \"type\" \"neon_abs<q>\")]\n )\n \n-(define_insn \"abd<mode>_3\"\n+;; It's tempting to represent SABD as ABS (MINUS op1 op2).\n+;; This isn't accurate as ABS treats always its input as a signed value.\n+;; So (ABS:QI (minus:QI 64 -128)) == (ABS:QI (192 or -64 signed)) == 64.\n+;; Whereas SABD would return 192 (-64 signed) on the above example.\n+;; Use MINUS ([us]max (op1, op2), [us]min (op1, op2)) instead.\n+(define_insn \"*aarch64_<su>abd<mode>_3\"\n   [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n-\t(abs:VDQ_BHSI (minus:VDQ_BHSI\n-\t\t       (match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")\n-\t\t       (match_operand:VDQ_BHSI 2 \"register_operand\" \"w\"))))]\n-  \"TARGET_SIMD\"\n-  \"sabd\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n+\t(minus:VDQ_BHSI\n+\t  (USMAX:VDQ_BHSI\n+\t    (match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")\n+\t    (match_operand:VDQ_BHSI 2 \"register_operand\" \"w\"))\n+\t  (match_operator 3 \"aarch64_<max_opp>\"\n+\t    [(match_dup 1)\n+\t     (match_dup 2)])))]\n+  \"TARGET_SIMD\"\n+  \"<su>abd\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_abd<q>\")]\n )\n "}, {"sha": "6caeeac80867edda29b5438efdcee475ed609ff6", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=8544ed6eea68a80999504c8a4b21b77d29cd86e2", "patch": "@@ -1052,6 +1052,9 @@\n \n (define_code_attr f16mac [(plus \"a\") (minus \"s\")])\n \n+;; Map smax to smin and umax to umin.\n+(define_code_attr max_opp [(smax \"smin\") (umax \"umin\")])\n+\n ;; The number of subvectors in an SVE_STRUCT.\n (define_mode_attr vector_count [(VNx32QI \"2\") (VNx16HI \"2\")\n \t\t\t\t(VNx8SI  \"2\") (VNx4DI  \"2\")\n@@ -1200,6 +1203,9 @@\n \n (define_code_iterator FMAXMIN [smax smin])\n \n+;; Signed and unsigned max operations.\n+(define_code_iterator USMAX [smax umax])\n+\n ;; Code iterator for variants of vector max and min.\n (define_code_iterator ADDSUB [plus minus])\n "}, {"sha": "b8e6d232ff6237a58addda1ec0e953a1054dc616", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=8544ed6eea68a80999504c8a4b21b77d29cd86e2", "patch": "@@ -319,6 +319,12 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"const_scalar_int_operand\")))\n \n+(define_predicate \"aarch64_smin\"\n+  (match_code \"smin\"))\n+\n+(define_predicate \"aarch64_umin\"\n+  (match_code \"umin\"))\n+\n ;; True for integer comparisons and for FP comparisons other than LTGT or UNEQ.\n (define_special_predicate \"aarch64_comparison_operator\"\n   (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,unordered,"}, {"sha": "9951b17cd1829599ab9dc66ee777605d5da8670a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8544ed6eea68a80999504c8a4b21b77d29cd86e2", "patch": "@@ -1,3 +1,8 @@\n+2019-02-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/abd_1.c: New test.\n+\t* gcc.dg/sabd_1.c: Likewise.\n+\n 2019-02-07  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n \n \tPR fortran/52789"}, {"sha": "587e3055fce5796ab58eb271fd204fdcbec91df4", "filename": "gcc/testsuite/gcc.dg/sabd_1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2Ftestsuite%2Fgcc.dg%2Fsabd_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2Ftestsuite%2Fgcc.dg%2Fsabd_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsabd_1.c?ref=8544ed6eea68a80999504c8a4b21b77d29cd86e2", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fwrapv\" } */\n+/* Make sure vectorized absolute difference behaves same as scalar version.  */\n+\n+#define N 16\n+signed char a[] = {-100, -100, -100, -100,-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100 };\n+signed char b[] = { 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 };\n+\n+signed char out[N];\n+\n+__attribute__ ((noinline,noipa))\n+void\n+foo (void)\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      signed char diff = b[i] - a[i];\n+      out[i] = diff > 0 ? diff : -diff;\n+    }\n+}\n+\n+signed char out2[N];\n+\n+__attribute__ ((noinline,noipa))\n+void\n+foo_scalar (void)\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      asm volatile (\"\");\n+      signed char diff = b[i] - a[i];\n+      out2[i] = diff > 0 ? diff : -diff;\n+    }\n+}\n+\n+int\n+main (void)\n+{\n+  foo ();\n+  foo_scalar ();\n+  for (int i = 0; i < N; i++)\n+    if (out[i] != out2[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "a27cb5ef0c12cd0068ff1728e20cce7f68eddc2d", "filename": "gcc/testsuite/gcc.target/aarch64/abd_1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fabd_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8544ed6eea68a80999504c8a4b21b77d29cd86e2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fabd_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fabd_1.c?ref=8544ed6eea68a80999504c8a4b21b77d29cd86e2", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#define MAX(x, y) ((x) > (y) ? (x) : (y))\n+#define MIN(x, y) ((x) < (y) ? (x) : (y))\n+#define N 1024\n+\n+#define FUNC(T)\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+sabd_##T (signed T * restrict a, signed T * restrict b,\t\t\\\n+\t\tsigned T * restrict out)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < N; i++)\t\t\t\t\t\t\\\n+    out[i] = MAX (a[i], b[i]) - MIN (a[i], b[i]);\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+uabd_##T (unsigned T * restrict a, unsigned T * restrict b,\t\\\n+\t\t  unsigned T * restrict out)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < N; i++)\t\t\t\t\t\t\\\n+    out[i] = MAX (a[i], b[i]) - MIN (a[i], b[i]);\t\t\t\\\n+}\n+\n+FUNC(char)\n+FUNC(short)\n+FUNC(int)\n+\n+/* { dg-final { scan-assembler-times \"sabd\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uabd\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sabd\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uabd\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sabd\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uabd\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */"}]}