{"sha": "6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2YWU5ZWI5YzA2YjY5MTE1NzNiYjlhMTNjZjk4YjVhN2M5OGI3OA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-05-16T19:25:04Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-05-16T19:25:04Z"}, "message": "re PR sanitizer/80536 (UBSAN: compile time segfault)\n\n\tPR sanitizer/80536\n\tPR sanitizer/80386\n\t* cp-gimplify.c (cp_fold): Handle SAVE_EXPR.\n\n\t* tree.c (save_expr): Don't fold the expression.\n\n\t* c-c++-common/ubsan/pr80536.c: New test.\n\t* g++.dg/ubsan/pr80386.C: New test.\n\nFrom-SVN: r248124", "tree": {"sha": "5486db1bec43bb3ea03f57fcf8a6eebd9024844c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5486db1bec43bb3ea03f57fcf8a6eebd9024844c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0c248220bb16284fabcf996fcca87e44cd4a98a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c248220bb16284fabcf996fcca87e44cd4a98a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0c248220bb16284fabcf996fcca87e44cd4a98a"}], "stats": {"total": 66, "additions": 57, "deletions": 9}, "files": [{"sha": "e5c872cc62b1892841115e816cae08e012112cf1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78", "patch": "@@ -1,3 +1,9 @@\n+2017-05-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/80536\n+\tPR sanitizer/80386\n+\t* tree.c (save_expr): Don't fold the expression.\n+\n 2017-05-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386.i386.md (*movsi_internal): Split (?rm,*y) alternative"}, {"sha": "228f0adb5aa05f8a5478230ef7e6b3c9db9a33c0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78", "patch": "@@ -1,3 +1,9 @@\n+2017-05-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/80536\n+\tPR sanitizer/80386\n+\t* cp-gimplify.c (cp_fold): Handle SAVE_EXPR.\n+\n 2017-05-16  Nathan Sidwell  <nathan@acm.org>\n \n \t* name-lookup.c (check_local_shadow): New, broke out of ..."}, {"sha": "38a8ed46519fb250526513a53d036ec4fe18f7ff", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78", "patch": "@@ -2428,6 +2428,15 @@ cp_fold (tree x)\n       x = fold (x);\n       break;\n \n+    case SAVE_EXPR:\n+      /* A SAVE_EXPR might contain e.g. (0 * i) + (0 * j), which, after\n+\t folding, evaluates to an invariant.  In that case no need to wrap\n+\t this folded tree with a SAVE_EXPR.  */\n+      r = cp_fold (TREE_OPERAND (x, 0));\n+      if (tree_invariant_p (r))\n+\tx = r;\n+      break;\n+\n     default:\n       return org_x;\n     }"}, {"sha": "13e8cf98fd4848c2463f69065e029874fa572261", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78", "patch": "@@ -1,3 +1,10 @@\n+2017-05-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/80536\n+\tPR sanitizer/80386\n+\t* c-c++-common/ubsan/pr80536.c: New test.\n+\t* g++.dg/ubsan/pr80386.C: New test.\n+\n 2017-05-16  Tamar Christina  <tamar.christina@arm.com>\n \n \t* gcc.target/arm/armv8_2-fp16-neon-1.c (vceqz): Fix regex."}, {"sha": "23913ad3b75fa20cd2be139d74e2c4d40dd13926", "filename": "gcc/testsuite/c-c++-common/ubsan/pr80536.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr80536.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr80536.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr80536.c?ref=6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78", "patch": "@@ -0,0 +1,9 @@\n+/* PR sanitizer/80536 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=undefined\" } */\n+\n+int\n+foo (int i)\n+{\n+  return ((i * (unsigned long long) (-0 + 1UL)) * 2) % 1;\n+}"}, {"sha": "60122da3c195911bd134bdba9f56ab4564661baf", "filename": "gcc/testsuite/g++.dg/ubsan/pr80386.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr80386.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr80386.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr80386.C?ref=6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78", "patch": "@@ -0,0 +1,13 @@\n+// PR sanitizer/80386\n+// { dg-do run }\n+// { dg-options \"-fsanitize=undefined -fno-sanitize-recover\" }\n+\n+static unsigned long long int i = 13996271126042720493ULL;\n+\n+int\n+main ()\n+{\n+  int r = (((2921 + 0) - short(i)) + 0x7fffffff) >> 0;\n+  asm volatile (\"\" : \"+g\" (r));\n+  return 0;\n+}"}, {"sha": "750672583134c48c1353d2e8323d1727078ebc79", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6b6ae9eb9c06b6911573bb9a13cf98b5a7c98b78", "patch": "@@ -3337,41 +3337,39 @@ tree_invariant_p (tree t)\n tree\n save_expr (tree expr)\n {\n-  tree t = fold (expr);\n   tree inner;\n \n   /* If the tree evaluates to a constant, then we don't want to hide that\n      fact (i.e. this allows further folding, and direct checks for constants).\n      However, a read-only object that has side effects cannot be bypassed.\n      Since it is no problem to reevaluate literals, we just return the\n      literal node.  */\n-  inner = skip_simple_arithmetic (t);\n+  inner = skip_simple_arithmetic (expr);\n   if (TREE_CODE (inner) == ERROR_MARK)\n     return inner;\n \n   if (tree_invariant_p_1 (inner))\n-    return t;\n+    return expr;\n \n   /* If INNER contains a PLACEHOLDER_EXPR, we must evaluate it each time, since\n      it means that the size or offset of some field of an object depends on\n      the value within another field.\n \n-     Note that it must not be the case that T contains both a PLACEHOLDER_EXPR\n+     Note that it must not be the case that EXPR contains both a PLACEHOLDER_EXPR\n      and some variable since it would then need to be both evaluated once and\n      evaluated more than once.  Front-ends must assure this case cannot\n      happen by surrounding any such subexpressions in their own SAVE_EXPR\n      and forcing evaluation at the proper time.  */\n   if (contains_placeholder_p (inner))\n-    return t;\n+    return expr;\n \n-  t = build1 (SAVE_EXPR, TREE_TYPE (expr), t);\n-  SET_EXPR_LOCATION (t, EXPR_LOCATION (expr));\n+  expr = build1_loc (EXPR_LOCATION (expr), SAVE_EXPR, TREE_TYPE (expr), expr);\n \n   /* This expression might be placed ahead of a jump to ensure that the\n      value was computed on both sides of the jump.  So make sure it isn't\n      eliminated as dead.  */\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  return t;\n+  TREE_SIDE_EFFECTS (expr) = 1;\n+  return expr;\n }\n \n /* Look inside EXPR into any simple arithmetic operations.  Return the"}]}