{"sha": "7299cb994088a68a4fec5e479a03fc8a71e50646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5OWNiOTk0MDg4YTY4YTRmZWM1ZTQ3OWEwM2ZjOGE3MWU1MDY0Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-08-29T08:40:01Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-08-29T08:40:01Z"}, "message": "cp-gimplify.c (cp_gimplify_expr): Add PRED_CONTINUE heuristic.\n\n\n\t* cp-gimplify.c (cp_gimplify_expr): Add PRED_CONTINUE heuristic.\n\t* tree-pass.h (pass_strip_predict_hints): Declare.\n\t* predict.c (strip_builtin_expect): Rename to ...\n\t(strip_predict_hints): ... this one; strip also GIMPLE_PREDICT.\n\t(tree_bb_level_predictions): Do not remove GIMPLE_PREDICT.\n\t(tree_estimate_probability): Do not strip builtin_expect.\n\t(pass_strip_predict_hints): New pass.\n\t* tree-inline.c (expand_call_inline): When inlining cold function, predict\n\tit as unlikely.\n\t* passes.c (init_optimization_passes): Add pass_strip_predict_hints.\n\nFrom-SVN: r139755", "tree": {"sha": "42efa153d20247d1235c077d9e83fe93cb6e2be6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42efa153d20247d1235c077d9e83fe93cb6e2be6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7299cb994088a68a4fec5e479a03fc8a71e50646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7299cb994088a68a4fec5e479a03fc8a71e50646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7299cb994088a68a4fec5e479a03fc8a71e50646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7299cb994088a68a4fec5e479a03fc8a71e50646/comments", "author": null, "committer": null, "parents": [{"sha": "a4b930608f389022fdcb256796c187719307b410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b930608f389022fdcb256796c187719307b410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4b930608f389022fdcb256796c187719307b410"}], "stats": {"total": 95, "additions": 72, "deletions": 23}, "files": [{"sha": "431661be58a99dfc0b31d5236f5eb3d8a597cc49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7299cb994088a68a4fec5e479a03fc8a71e50646", "patch": "@@ -1,3 +1,15 @@\n+2008-08-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-pass.h (pass_strip_predict_hints): Declare.\n+\t* predict.c (strip_builtin_expect): Rename to ...\n+\t(strip_predict_hints): ... this one; strip also GIMPLE_PREDICT.\n+\t(tree_bb_level_predictions): Do not remove GIMPLE_PREDICT.\n+\t(tree_estimate_probability): Do not strip builtin_expect.\n+\t(pass_strip_predict_hints): New pass.\n+\t* tree-inline.c (expand_call_inline): When inlining cold function, predict\n+\tit as unlikely.\n+\t* passes.c (init_optimization_passes): Add pass_strip_predict_hints.\n+\n 2008-08-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/37207"}, {"sha": "49523996109a9c75bdf2f884ac75bf831caeabd0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7299cb994088a68a4fec5e479a03fc8a71e50646", "patch": "@@ -1,3 +1,7 @@\n+2008-08-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cp-gimplify.c (cp_gimplify_expr): Add PRED_CONTINUE heuristic.\n+\n 2008-08-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/37260"}, {"sha": "243b1c61bfb28ce0f827959b25e23cdd2b6dacd5", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=7299cb994088a68a4fec5e479a03fc8a71e50646", "patch": "@@ -610,6 +610,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       break;\n \n     case CONTINUE_STMT:\n+      gimple_seq_add_stmt (pre_p, gimple_build_predict (PRED_CONTINUE, NOT_TAKEN));\n       gimple_seq_add_stmt (pre_p, gimple_build_goto (get_bc_label (bc_continue)));\n       *expr_p = NULL_TREE;\n       ret = GS_ALL_DONE;"}, {"sha": "7c76747b9710064bd04dd29ad7bcf6dd7f7010b0", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=7299cb994088a68a4fec5e479a03fc8a71e50646", "patch": "@@ -585,6 +585,7 @@ init_optimization_passes (void)\n       struct opt_pass **p = &pass_all_optimizations.pass.sub;\n       /* Initial scalar cleanups before alias computation.\n \t They ensure memory accesses are not indirect wherever possible.  */\n+      NEXT_PASS (pass_strip_predict_hints);\n       NEXT_PASS (pass_update_address_taken);\n       NEXT_PASS (pass_rename_ssa_copies);\n       NEXT_PASS (pass_complete_unrolli);"}, {"sha": "610772314b33f0c77fb3fd92c1c0c07a6c08837d", "filename": "gcc/predict.c", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=7299cb994088a68a4fec5e479a03fc8a71e50646", "patch": "@@ -1176,9 +1176,10 @@ expr_expected_value (tree expr, bitmap visited)\n }\n \n \f\n-/* Get rid of all builtin_expect calls we no longer need.  */\n-static void\n-strip_builtin_expect (void)\n+/* Get rid of all builtin_expect calls and GIMPLE_PREDICT statements\n+   we no longer need.  */\n+static unsigned int\n+strip_predict_hints (void)\n {\n   basic_block bb;\n   gimple ass_stmt;\n@@ -1187,28 +1188,34 @@ strip_builtin_expect (void)\n   FOR_EACH_BB (bb)\n     {\n       gimple_stmt_iterator bi;\n-      for (bi = gsi_start_bb (bb); !gsi_end_p (bi); gsi_next (&bi))\n+      for (bi = gsi_start_bb (bb); !gsi_end_p (bi);)\n \t{\n \t  gimple stmt = gsi_stmt (bi);\n-\t  tree fndecl;\n-\n-\t  if (gimple_code (stmt) != GIMPLE_CALL)\n-\t    continue;\n \n-\t  fndecl = gimple_call_fndecl (stmt);\n-\n-\t  if (fndecl\n-\t      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_EXPECT\n-\t      && gimple_call_num_args (stmt) == 2)\n+\t  if (gimple_code (stmt) == GIMPLE_PREDICT)\n+\t    {\n+\t      gsi_remove (&bi, true);\n+\t      continue;\n+\t    }\n+\t  else if (gimple_code (stmt) == GIMPLE_CALL)\n \t    {\n-\t      var = gimple_call_lhs (stmt);\n-\t      ass_stmt = gimple_build_assign (var, gimple_call_arg (stmt, 0));\n+\t      tree fndecl = gimple_call_fndecl (stmt);\n \n-\t      gsi_replace (&bi, ass_stmt, true);\n+\t      if (fndecl\n+\t\t  && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n+\t\t  && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_EXPECT\n+\t\t  && gimple_call_num_args (stmt) == 2)\n+\t\t{\n+\t\t  var = gimple_call_lhs (stmt);\n+\t\t  ass_stmt = gimple_build_assign (var, gimple_call_arg (stmt, 0));\n+\n+\t\t  gsi_replace (&bi, ass_stmt, true);\n+\t\t}\n \t    }\n+\t  gsi_next (&bi);\n \t}\n     }\n+  return 0;\n }\n \f\n /* Predict using opcode of the last statement in basic block.  */\n@@ -1434,7 +1441,7 @@ tree_bb_level_predictions (void)\n     {\n       gimple_stmt_iterator gsi;\n \n-      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi);)\n+      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n \t  gimple stmt = gsi_stmt (gsi);\n \t  tree decl;\n@@ -1455,11 +1462,9 @@ tree_bb_level_predictions (void)\n \t    {\n \t      predict_paths_leading_to (bb, gimple_predict_predictor (stmt),\n \t\t\t\t\tgimple_predict_outcome (stmt));\n-\t      gsi_remove (&gsi, true);\n-\t      continue;\n+\t      /* Keep GIMPLE_PREDICT around so early inlining will propagate\n+\t         hints to callers.  */\n \t    }\n-\n-\t  gsi_next (&gsi);\n \t}\n     }\n }\n@@ -1587,7 +1592,6 @@ tree_estimate_probability (void)\n   pointer_map_destroy (bb_predictions);\n   bb_predictions = NULL;\n \n-  strip_builtin_expect ();\n   estimate_bb_frequencies ();\n   free_dominance_info (CDI_POST_DOMINATORS);\n   remove_fake_exit_edges ();\n@@ -2084,3 +2088,22 @@ struct gimple_opt_pass pass_profile =\n   TODO_ggc_collect | TODO_verify_ssa\t\t\t/* todo_flags_finish */\n  }\n };\n+\n+struct gimple_opt_pass pass_strip_predict_hints = \n+{\n+ {\n+  GIMPLE_PASS,\n+  \"\",\t\t\t\t\t/* name */\n+  NULL,\t\t\t\t\t/* gate */\n+  strip_predict_hints,\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_BRANCH_PROB,\t\t\t/* tv_id */\n+  PROP_cfg,\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_ggc_collect | TODO_verify_ssa\t\t\t/* todo_flags_finish */\n+ }\n+};"}, {"sha": "4fb28fef7e6c201f154aad1ebe6f90c64bdc5281", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=7299cb994088a68a4fec5e479a03fc8a71e50646", "patch": "@@ -3209,6 +3209,13 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n   gcc_assert (!id->src_cfun->after_inlining);\n \n   id->entry_bb = bb;\n+  if (lookup_attribute (\"cold\", DECL_ATTRIBUTES (fn)))\n+    {\n+      gimple_stmt_iterator si = gsi_last_bb (bb);\n+      gsi_insert_after (&si, gimple_build_predict (PRED_COLD_FUNCTION,\n+      \t\t\t\t\t\t   NOT_TAKEN),\n+\t\t\tGSI_NEW_STMT);\n+    }\n   initialize_inlined_parameters (id, stmt, fn, bb);\n \n   if (DECL_INITIAL (fn))"}, {"sha": "c6a97cba730c16a84076f32777ac211250c67940", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7299cb994088a68a4fec5e479a03fc8a71e50646/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=7299cb994088a68a4fec5e479a03fc8a71e50646", "patch": "@@ -346,6 +346,7 @@ extern struct gimple_opt_pass pass_merge_phi;\n extern struct gimple_opt_pass pass_split_crit_edges;\n extern struct gimple_opt_pass pass_pre;\n extern struct gimple_opt_pass pass_profile;\n+extern struct gimple_opt_pass pass_strip_predict_hints;\n extern struct gimple_opt_pass pass_lower_complex_O0;\n extern struct gimple_opt_pass pass_lower_complex;\n extern struct gimple_opt_pass pass_lower_vector;"}]}