{"sha": "d7567964ea0f6ff865f8488a06bc5dff75a0973e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc1Njc5NjRlYTBmNmZmODY1Zjg0ODhhMDZiYzVkZmY3NWEwOTczZQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2010-06-22T07:03:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T07:03:30Z"}, "message": "sem_eval.adb (Find_Universal_Operator_Type): New subprogram to identify the operand type of an operator on universal operands...\n\n2010-06-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_eval.adb (Find_Universal_Operator_Type): New\n\tsubprogram to identify the operand type of an operator on universal\n\toperands, when an explicit scope indication is present. Diagnose the\n\tcase where such a call is ambiguous.\n\t(Eval_Arithmetic_Op, Eval_Relational_Op, Eval_Unary_Op):\n\tUse the above to identify the operand type so it can be properly frozen.\n\t* sem_res.adb (Make_Call_Into_Operator): Remove bogus freeze of operand\n\ttype, done in an arbitrary, possibly incorrect type (the presence of\n\tsome numeric type in the scope is checked for legality, but when more\n\tthan one such type is in the scope, we just pick a random one, not\n\tnecessarily the expected one).\n\t* sem_utils.ads, sem_utils.adb (Is_Universal_Numeric_Type): New utility\n\tsubprogram.\n\nFrom-SVN: r161134", "tree": {"sha": "584d7085a6f336711ab6bd6de33303e3dcb54b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/584d7085a6f336711ab6bd6de33303e3dcb54b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7567964ea0f6ff865f8488a06bc5dff75a0973e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7567964ea0f6ff865f8488a06bc5dff75a0973e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7567964ea0f6ff865f8488a06bc5dff75a0973e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7567964ea0f6ff865f8488a06bc5dff75a0973e/comments", "author": null, "committer": null, "parents": [{"sha": "ae77c68b392ce7519050eda52205284d9fc68a4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae77c68b392ce7519050eda52205284d9fc68a4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae77c68b392ce7519050eda52205284d9fc68a4e"}], "stats": {"total": 154, "additions": 122, "deletions": 32}, "files": [{"sha": "e9b3374fe4e425a70bf5e20f31ce02c479c9268a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7567964ea0f6ff865f8488a06bc5dff75a0973e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7567964ea0f6ff865f8488a06bc5dff75a0973e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d7567964ea0f6ff865f8488a06bc5dff75a0973e", "patch": "@@ -1,3 +1,19 @@\n+2010-06-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_eval.adb (Find_Universal_Operator_Type): New\n+\tsubprogram to identify the operand type of an operator on universal\n+\toperands, when an explicit scope indication is present. Diagnose the\n+\tcase where such a call is ambiguous.\n+\t(Eval_Arithmetic_Op, Eval_Relational_Op, Eval_Unary_Op):\n+\tUse the above to identify the operand type so it can be properly frozen.\n+\t* sem_res.adb (Make_Call_Into_Operator): Remove bogus freeze of operand\n+\ttype, done in an arbitrary, possibly incorrect type (the presence of\n+\tsome numeric type in the scope is checked for legality, but when more\n+\tthan one such type is in the scope, we just pick a random one, not\n+\tnecessarily the expected one).\n+\t* sem_utils.ads, sem_utils.adb (Is_Universal_Numeric_Type): New utility\n+\tsubprogram.\n+\n 2010-06-22  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_eval.adb: Minor reformatting."}, {"sha": "1d9e0f6cd89918416520fefc230f41409174e17e", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 93, "deletions": 23, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7567964ea0f6ff865f8488a06bc5dff75a0973e/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7567964ea0f6ff865f8488a06bc5dff75a0973e/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=d7567964ea0f6ff865f8488a06bc5dff75a0973e", "patch": "@@ -31,6 +31,7 @@ with Elists;   use Elists;\n with Errout;   use Errout;\n with Eval_Fat; use Eval_Fat;\n with Exp_Util; use Exp_Util;\n+with Freeze;   use Freeze;\n with Lib;      use Lib;\n with Namet;    use Namet;\n with Nmake;    use Nmake;\n@@ -180,12 +181,14 @@ package body Sem_Eval is\n    --  used for producing the result of the static evaluation of the\n    --  logical operators\n \n-   procedure Test_Ambiguous_Operator (N : Node_Id);\n+   function Find_Universal_Operator_Type (N : Node_Id) return Entity_Id;\n    --  Check whether an arithmetic operation with universal operands which\n    --  is a rewritten function call with an explicit scope indication is\n    --  ambiguous: P.\"+\" (1, 2) will be ambiguous if there is more than one\n    --  visible numeric type declared in P and the context does not impose a\n    --  type on the result (e.g. in the expression of a type conversion).\n+   --  If ambiguous, emit an error and return Empty, else return the result\n+   --  type of the operator.\n \n    procedure Test_Expression_Is_Foldable\n      (N    : Node_Id;\n@@ -1453,6 +1456,7 @@ package body Sem_Eval is\n       Right : constant Node_Id   := Right_Opnd (N);\n       Ltype : constant Entity_Id := Etype (Left);\n       Rtype : constant Entity_Id := Etype (Right);\n+      Otype : Entity_Id          := Empty;\n       Stat  : Boolean;\n       Fold  : Boolean;\n \n@@ -1465,15 +1469,11 @@ package body Sem_Eval is\n          return;\n       end if;\n \n-      if (Etype (Right) = Universal_Integer\n-            or else\n-          Etype (Right) = Universal_Real)\n-        and then\n-          (Etype (Left) = Universal_Integer\n-            or else\n-           Etype (Left) = Universal_Real)\n+      if Is_Universal_Numeric_Type (Etype (Left))\n+           and then\n+         Is_Universal_Numeric_Type (Etype (Right))\n       then\n-         Test_Ambiguous_Operator (N);\n+         Otype := Find_Universal_Operator_Type (N);\n       end if;\n \n       --  Fold for cases where both operands are of integer type\n@@ -1582,9 +1582,9 @@ package body Sem_Eval is\n             Fold_Uint (N, Result, Stat);\n          end;\n \n-      --  Cases where at least one operand is a real. We handle the cases\n-      --  of both reals, or mixed/real integer cases (the latter happen\n-      --  only for divide and multiply, and the result is always real).\n+      --  Cases where at least one operand is a real. We handle the cases of\n+      --  both reals, or mixed/real integer cases (the latter happen only for\n+      --  divide and multiply, and the result is always real).\n \n       elsif Is_Real_Type (Ltype) or else Is_Real_Type (Rtype) then\n          declare\n@@ -1627,6 +1627,14 @@ package body Sem_Eval is\n             Fold_Ureal (N, Result, Stat);\n          end;\n       end if;\n+\n+      --  If the operator was resolved to a specific type, make sure that type\n+      --  is frozen even if the expression is folded into a literal (which has\n+      --  a universal type).\n+\n+      if Present (Otype) then\n+         Freeze_Before (N, Otype);\n+      end if;\n    end Eval_Arithmetic_Op;\n \n    ----------------------------\n@@ -2371,6 +2379,7 @@ package body Sem_Eval is\n       end if;\n \n       Fold_Uint (N, Test (Result), True);\n+\n       Warn_On_Known_Condition (N);\n    end Eval_Membership_Op;\n \n@@ -2656,6 +2665,7 @@ package body Sem_Eval is\n       Left   : constant Node_Id   := Left_Opnd (N);\n       Right  : constant Node_Id   := Right_Opnd (N);\n       Typ    : constant Entity_Id := Etype (Left);\n+      Otype  : Entity_Id := Empty;\n       Result : Boolean;\n       Stat   : Boolean;\n       Fold   : Boolean;\n@@ -2887,6 +2897,17 @@ package body Sem_Eval is\n          Set_Is_Static_Expression (N, False);\n       end if;\n \n+      --  For operators on universal numeric types called as functions with\n+      --  an explicit scope, determine appropriate specific numeric type, and\n+      --  diagnose possible ambiguity.\n+\n+      if Is_Universal_Numeric_Type (Etype (Left))\n+           and then\n+         Is_Universal_Numeric_Type (Etype (Right))\n+      then\n+         Otype := Find_Universal_Operator_Type (N);\n+      end if;\n+\n       --  For static real type expressions, we cannot use Compile_Time_Compare\n       --  since it worries about run-time results which are not exact.\n \n@@ -2986,6 +3007,13 @@ package body Sem_Eval is\n          Fold_Uint (N, Test (Result), Stat);\n       end if;\n \n+      --  For the case of a folded relational operator on a specific numeric\n+      --  type, freeze operand type now.\n+\n+      if Present (Otype) then\n+         Freeze_Before (N, Otype);\n+      end if;\n+\n       Warn_On_Known_Condition (N);\n    end Eval_Relational_Op;\n \n@@ -3401,6 +3429,7 @@ package body Sem_Eval is\n \n    procedure Eval_Unary_Op (N : Node_Id) is\n       Right : constant Node_Id := Right_Opnd (N);\n+      Otype : Entity_Id := Empty;\n       Stat  : Boolean;\n       Fold  : Boolean;\n \n@@ -3417,7 +3446,7 @@ package body Sem_Eval is\n            or else\n          Etype (Right) = Universal_Real\n       then\n-         Test_Ambiguous_Operator (N);\n+         Otype := Find_Universal_Operator_Type (N);\n       end if;\n \n       --  Fold for integer case\n@@ -3475,6 +3504,14 @@ package body Sem_Eval is\n             Fold_Ureal (N, Result, Stat);\n          end;\n       end if;\n+\n+      --  If the operator was resolved to a specific type, make sure that type\n+      --  is frozen even if the expression is folded into a literal (which has\n+      --  a universal type).\n+\n+      if Present (Otype) then\n+         Freeze_Before (N, Otype);\n+      end if;\n    end Eval_Unary_Op;\n \n    -------------------------------\n@@ -4724,32 +4761,61 @@ package body Sem_Eval is\n       end if;\n    end Test;\n \n-   -----------------------------\n-   -- Test_Ambiguous_Operator --\n-   -----------------------------\n+   ----------------------------------\n+   -- Find_Universal_Operator_Type --\n+   ----------------------------------\n \n-   procedure Test_Ambiguous_Operator (N : Node_Id) is\n+   function Find_Universal_Operator_Type (N : Node_Id) return Entity_Id is\n+      PN     : constant Node_Id := Parent (N);\n       Call   : constant Node_Id := Original_Node (N);\n       Is_Int : constant Boolean := Is_Integer_Type (Etype (N));\n \n       Is_Fix : constant Boolean :=\n                  Nkind (N) in N_Binary_Op\n                    and then Nkind (Right_Opnd (N)) /= Nkind (Left_Opnd (N));\n-      --  A mixed-mode operation in this context indicates the\n-      --  presence of fixed-point type in the designated package.\n+      --  A mixed-mode operation in this context indicates the presence of\n+      --  fixed-point type in the designated package.\n+\n+      Is_Relational : constant Boolean := Etype (N) = Standard_Boolean;\n+      --  Case where N is a relational (or membership) operator (else it is an\n+      --  arithmetic one).\n+\n+      In_Membership : constant Boolean :=\n+                        Nkind (PN) in N_Membership_Test\n+                          and then\n+                        Nkind (Right_Opnd (PN)) = N_Range\n+                          and then\n+                        Is_Universal_Numeric_Type (Etype (Left_Opnd (PN)))\n+                          and then\n+                        Is_Universal_Numeric_Type\n+                          (Etype (Low_Bound (Right_Opnd (PN))))\n+                          and then\n+                        Is_Universal_Numeric_Type\n+                          (Etype (High_Bound (Right_Opnd (PN))));\n+      --  Case where N is part of a membership test with a universal range\n \n       E      : Entity_Id;\n       Pack   : Entity_Id;\n-      Typ1   : Entity_Id;\n+      Typ1   : Entity_Id := Empty;\n       Priv_E : Entity_Id;\n \n    begin\n       if Nkind (Call) /= N_Function_Call\n         or else Nkind (Name (Call)) /= N_Expanded_Name\n       then\n-         return;\n+         return Empty;\n+\n+      --  There are two cases where the context does not imply the type of the\n+      --  operands: either the universal expression appears in a type\n+      --  type conversion, or we are in the case of a predefined relational\n+      --  operator, where the context type is always Boolean.\n \n-      elsif Nkind (Parent (N)) = N_Type_Conversion then\n+      elsif Nkind (Parent (N)) = N_Type_Conversion\n+              or else\n+            Is_Relational\n+              or else\n+            In_Membership\n+      then\n          Pack := Entity (Prefix (Name (Call)));\n \n          --  If the prefix is a package declared elsewhere, iterate over\n@@ -4773,6 +4839,7 @@ package body Sem_Eval is\n               and then Is_Integer_Type (E) = Is_Int\n               and then\n                 (Nkind (N) in N_Unary_Op\n+                  or else Is_Relational\n                   or else Is_Fixed_Point_Type (E) = Is_Fix)\n             then\n                if No (Typ1) then\n@@ -4786,13 +4853,16 @@ package body Sem_Eval is\n                   Error_Msg_N (\"\\possible interpretation (inherited)#\", N);\n                   Error_Msg_Sloc := Sloc (E);\n                   Error_Msg_N (\"\\possible interpretation (inherited)#\", N);\n+                  return Empty;\n                end if;\n             end if;\n \n             Next_Entity (E);\n          end loop;\n       end if;\n-   end Test_Ambiguous_Operator;\n+\n+      return Typ1;\n+   end Find_Universal_Operator_Type;\n \n    ---------------------------------\n    -- Test_Expression_Is_Foldable --"}, {"sha": "bf00a976bfcdc685a322d1f35f8ac4efaf06240c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7567964ea0f6ff865f8488a06bc5dff75a0973e/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7567964ea0f6ff865f8488a06bc5dff75a0973e/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=d7567964ea0f6ff865f8488a06bc5dff75a0973e", "patch": "@@ -1484,14 +1484,6 @@ package body Sem_Res is\n       else\n          Resolve (N, Typ);\n       end if;\n-\n-      --  For predefined operators on literals, the operation freezes\n-      --  their type.\n-\n-      if Present (Orig_Type) then\n-         Set_Etype (Act1, Orig_Type);\n-         Freeze_Expression (Act1);\n-      end if;\n    end Make_Call_Into_Operator;\n \n    -------------------"}, {"sha": "340e8fee07f3b29967965634903383df36ac9e83", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7567964ea0f6ff865f8488a06bc5dff75a0973e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7567964ea0f6ff865f8488a06bc5dff75a0973e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=d7567964ea0f6ff865f8488a06bc5dff75a0973e", "patch": "@@ -7082,6 +7082,15 @@ package body Sem_Util is\n       return (U /= 0);\n    end Is_True;\n \n+   -------------------------------\n+   -- Is_Universal_Numeric_Type --\n+   -------------------------------\n+\n+   function Is_Universal_Numeric_Type (T : Entity_Id) return Boolean is\n+   begin\n+      return T = Universal_Integer or else T = Universal_Real;\n+   end Is_Universal_Numeric_Type;\n+\n    -------------------\n    -- Is_Value_Type --\n    -------------------"}, {"sha": "1df648d43b2870aee1a4832ab2f962570b415b0c", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7567964ea0f6ff865f8488a06bc5dff75a0973e/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7567964ea0f6ff865f8488a06bc5dff75a0973e/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=d7567964ea0f6ff865f8488a06bc5dff75a0973e", "patch": "@@ -800,6 +800,9 @@ package Sem_Util is\n    --  Boolean operand (i.e. is either 0 for False, or 1 for True). This\n    --  function simply tests if it is True (i.e. non-zero)\n \n+   function Is_Universal_Numeric_Type (T : Entity_Id) return Boolean;\n+   --  True if T is Universal_Integer or Universal_Real\n+\n    function Is_Value_Type (T : Entity_Id) return Boolean;\n    --  Returns true if type T represents a value type. This is only relevant to\n    --  CIL, will always return false for other targets. A value type is a CIL\n@@ -1259,7 +1262,7 @@ package Sem_Util is\n    --  may be a child unit with any number of ancestors.\n \n    function Universal_Interpretation (Opnd : Node_Id) return Entity_Id;\n-   --  Yields universal_Integer or Universal_Real if this is a candidate\n+   --  Yields Universal_Integer or Universal_Real if this is a candidate\n \n    function Unqualify (Expr : Node_Id) return Node_Id;\n    --  Removes any qualifications from Expr. For example, for T1'(T2'(X)),"}]}