{"sha": "35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVhNDViZDQwZTJhOWE1ZmE2NWVmZTdiYzI1ZTk4ZmE4ZjhkN2ZkYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2008-10-01T14:28:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2008-10-01T14:28:04Z"}, "message": "re PR tree-optimization/35737 (ICE with __builtin_setjmp and complex variable)\n\n        PR tree-opt/35737\n        * tree-complex.c (set_component_ssa_name): Don't optimize\n        is_gimple_min_invariant values with ssa_names in abnormal phis.\n\nFrom-SVN: r140812", "tree": {"sha": "cc6a378a1afa6e193219356bf11b03a66957fbe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc6a378a1afa6e193219356bf11b03a66957fbe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc/comments", "author": null, "committer": null, "parents": [{"sha": "2d66eeeb56d642c1f080a580c5acadded1ff7816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d66eeeb56d642c1f080a580c5acadded1ff7816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d66eeeb56d642c1f080a580c5acadded1ff7816"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "8dd8eb5c57e439e89c25e4e670f07d18ded035d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc", "patch": "@@ -1,3 +1,9 @@\n+2008-10-01  Richard Henderson  <rth@redhat.com>\n+\n+\tPR tree-opt/35737\n+\t* tree-complex.c (set_component_ssa_name): Don't optimize\n+\tis_gimple_min_invariant values with ssa_names in abnormal phis.\n+\n 2008-09-30  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR tree-optimization/37662"}, {"sha": "eb89040abf3ae0f3842dd1450ad626730ffb5ceb", "filename": "gcc/testsuite/gcc.c-torture/compile/complex-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcomplex-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcomplex-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcomplex-6.c?ref=35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-opt/35737 */\n+\n+long buf[10];\n+\n+int foo()\n+{\n+  __complex__ int i = 0;\n+\n+  if (__builtin_setjmp(buf))\n+  {\n+    i = 1;\n+    bar();\n+  }\n+\n+  return i == 0;\n+}\n+"}, {"sha": "939bd6f1a63c4b49335ee4f2eeefd3bee7477470", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=35a45bd40e2a9a5fa65efe7bc25e98fa8f8d7fdc", "patch": "@@ -537,7 +537,8 @@ set_component_ssa_name (tree ssa_name, bool imag_p, tree value)\n   /* If we've nothing assigned, and the value we're given is already stable,\n      then install that as the value for this SSA_NAME.  This preemptively\n      copy-propagates the value, which avoids unnecessary memory allocation.  */\n-  else if (is_gimple_min_invariant (value))\n+  else if (is_gimple_min_invariant (value)\n+\t   && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (ssa_name))\n     {\n       VEC_replace (tree, complex_ssa_name_components, ssa_name_index, value);\n       return NULL;"}]}