{"sha": "9f3b1e6c603e255e87ff8fe087591d795cf2b974", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzYjFlNmM2MDNlMjU1ZTg3ZmY4ZmUwODc1OTFkNzk1Y2YyYjk3NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-25T19:36:12Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-25T19:36:12Z"}, "message": "libgo: Irix 6 patches.\n\nFrom Rainer Orth.\n\nFrom-SVN: r172935", "tree": {"sha": "8c44faa207647f4f8db0f245add06c9ed21e26f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c44faa207647f4f8db0f245add06c9ed21e26f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f3b1e6c603e255e87ff8fe087591d795cf2b974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3b1e6c603e255e87ff8fe087591d795cf2b974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f3b1e6c603e255e87ff8fe087591d795cf2b974", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3b1e6c603e255e87ff8fe087591d795cf2b974/comments", "author": null, "committer": null, "parents": [{"sha": "e5b0dad8fdd72fa4d19343b47546c89f2595c864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b0dad8fdd72fa4d19343b47546c89f2595c864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5b0dad8fdd72fa4d19343b47546c89f2595c864"}], "stats": {"total": 138, "additions": 120, "deletions": 18}, "files": [{"sha": "05f1c991638653877701646888f4531393ca6bd3", "filename": "libgo/Makefile.am", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=9f3b1e6c603e255e87ff8fe087591d795cf2b974", "patch": "@@ -825,10 +825,14 @@ go_sync_files = \\\n \tgo/sync/waitgroup.go\n \n if LIBGO_IS_SOLARIS\n-go_syslog_file = go/syslog/syslog_solaris.go\n+go_syslog_file = go/syslog/syslog_libc.go\n+else\n+if LIBGO_IS_IRIX\n+go_syslog_file = go/syslog/syslog_libc.go\n else\n go_syslog_file = go/syslog/syslog_unix.go\n endif\n+endif\n \n go_syslog_files = \\\n \tgo/syslog/syslog.go \\\n@@ -1300,9 +1304,13 @@ else\n if LIBGO_IS_SOLARIS\n syscall_socket_os_file = syscalls/socket_solaris.go\n else\n+if LIBGO_IS_IRIX\n+syscall_socket_os_file = syscalls/socket_irix.go\n+else\n syscall_socket_os_file = syscalls/socket_bsd.go\n endif\n endif\n+endif\n \n # Support for epoll.\n if LIBGO_IS_LINUX"}, {"sha": "cf84f730cdd6fa035a998e9997b376e3df65a2b3", "filename": "libgo/Makefile.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=9f3b1e6c603e255e87ff8fe087591d795cf2b974", "patch": "@@ -1172,8 +1172,9 @@ go_sync_files = \\\n \tgo/sync/rwmutex.go \\\n \tgo/sync/waitgroup.go\n \n-@LIBGO_IS_SOLARIS_FALSE@go_syslog_file = go/syslog/syslog_unix.go\n-@LIBGO_IS_SOLARIS_TRUE@go_syslog_file = go/syslog/syslog_solaris.go\n+@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_syslog_file = go/syslog/syslog_unix.go\n+@LIBGO_IS_IRIX_TRUE@@LIBGO_IS_SOLARIS_FALSE@go_syslog_file = go/syslog/syslog_libc.go\n+@LIBGO_IS_SOLARIS_TRUE@go_syslog_file = go/syslog/syslog_libc.go\n go_syslog_files = \\\n \tgo/syslog/syslog.go \\\n \t$(go_syslog_file)\n@@ -1656,7 +1657,8 @@ go_testing_script_files = \\\n # Declare libc_strerror_r which is the Go name for strerror_r.\n # RTEMS uses newlib in which strerror_r returns char *.\n @LIBGO_IS_RTEMS_TRUE@syscall_errstr_decl_file = syscalls/errstr_decl_rtems.go\n-@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@syscall_socket_os_file = syscalls/socket_bsd.go\n+@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@syscall_socket_os_file = syscalls/socket_bsd.go\n+@LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@syscall_socket_os_file = syscalls/socket_irix.go\n @LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@syscall_socket_os_file = syscalls/socket_solaris.go\n \n # Define socket sizes and types."}, {"sha": "565bc89a34169506c2ffbb6df4dfd2d65c0e739d", "filename": "libgo/configure", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=9f3b1e6c603e255e87ff8fe087591d795cf2b974", "patch": "@@ -13295,7 +13295,7 @@ is_386=no\n is_alpha=no\n is_arm=no\n is_m68k=no\n-mips_abi=\"\"\n+mips_abi=unknown\n is_ppc=no\n is_ppc64=no\n is_sparc=no\n@@ -13466,7 +13466,7 @@ else\n   LIBGO_IS_M68K_FALSE=\n fi\n \n- if test $mips_abi != \"\"; then\n+ if test $mips_abi != unknown; then\n   LIBGO_IS_MIPS_TRUE=\n   LIBGO_IS_MIPS_FALSE='#'\n else\n@@ -13561,6 +13561,11 @@ fi\n \n \n case \"$target\" in\n+    mips-sgi-irix6.5*)\n+\t# IRIX 6 needs _XOPEN_SOURCE=500 for the XPG5 version of struct\n+\t# msghdr in <sys/socket.h>.\n+\tOSCFLAGS='-D_XOPEN_SOURCE=500'\n+\t;;\n     *-*-solaris2.[89])\n \t# Solaris 8/9 need this so struct msghdr gets the msg_control\n \t# etc. fields in <sys/socket.h> (_XPG4_2)."}, {"sha": "2451214f7680fb5ef4d8eb329544de2bef08c980", "filename": "libgo/configure.ac", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=9f3b1e6c603e255e87ff8fe087591d795cf2b974", "patch": "@@ -140,7 +140,7 @@ is_386=no\n is_alpha=no\n is_arm=no\n is_m68k=no\n-mips_abi=\"\"\n+mips_abi=unknown\n is_ppc=no\n is_ppc64=no\n is_sparc=no\n@@ -233,7 +233,7 @@ AM_CONDITIONAL(LIBGO_IS_386, test $is_386 = yes)\n AM_CONDITIONAL(LIBGO_IS_ALPHA, test $is_alpha = yes)\n AM_CONDITIONAL(LIBGO_IS_ARM, test $is_arm = yes)\n AM_CONDITIONAL(LIBGO_IS_M68K, test $is_m68k = yes)\n-AM_CONDITIONAL(LIBGO_IS_MIPS, test $mips_abi != \"\")\n+AM_CONDITIONAL(LIBGO_IS_MIPS, test $mips_abi != unknown)\n AM_CONDITIONAL(LIBGO_IS_MIPSO32, test $mips_abi = o32)\n AM_CONDITIONAL(LIBGO_IS_MIPSN32, test $mips_abi = n32)\n AM_CONDITIONAL(LIBGO_IS_MIPSN64, test $mips_abi = n64)\n@@ -260,6 +260,11 @@ AC_SUBST(GO_DEBUG_PROC_REGS_OS_ARCH_FILE)\n \n dnl Some targets need special flags to build sysinfo.go.\n case \"$target\" in\n+    mips-sgi-irix6.5*)\n+\t# IRIX 6 needs _XOPEN_SOURCE=500 for the XPG5 version of struct\n+\t# msghdr in <sys/socket.h>.\n+\tOSCFLAGS='-D_XOPEN_SOURCE=500'\n+\t;;\n     *-*-solaris2.[[89]])\n \t# Solaris 8/9 need this so struct msghdr gets the msg_control\n \t# etc. fields in <sys/socket.h> (_XPG4_2)."}, {"sha": "044351dbfd44c654bda0cedf0915610ad1617f07", "filename": "libgo/go/syslog/syslog_libc.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2Fgo%2Fsyslog%2Fsyslog_libc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2Fgo%2Fsyslog%2Fsyslog_libc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyslog%2Fsyslog_libc.go?ref=9f3b1e6c603e255e87ff8fe087591d795cf2b974", "previous_filename": "libgo/go/syslog/syslog_solaris.go"}, {"sha": "fecaeb6b31206271c814bf41ad746b3a4665a35d", "filename": "libgo/mksysinfo.sh", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2Fmksysinfo.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2Fmksysinfo.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmksysinfo.sh?ref=9f3b1e6c603e255e87ff8fe087591d795cf2b974", "patch": "@@ -29,12 +29,6 @@ cat > sysinfo.c <<EOF\n #define _LARGEFILE_SOURCE\n #define _FILE_OFFSET_BITS 64\n \n-#ifdef __sgi__\n-/* IRIX 6 needs _XOPEN_SOURCE=500 for the XPG5 version of struct msghdr in\n-   <sys/socket.h>.  */\n-#define _XOPEN_SOURCE 500\n-#endif\n-\n #include <sys/types.h>\n #include <dirent.h>\n #include <errno.h>\n@@ -93,13 +87,15 @@ echo 'package syscall' > ${OUT}\n grep -v '^// ' gen-sysinfo.go | \\\n   grep -v '^func' | \\\n   grep -v '^type _timeval ' | \\\n-  grep -v '^type _timespec\\(_t\\)\\? ' | \\\n+  grep -v '^type _timespec_t ' | \\\n+  grep -v '^type _timespec ' | \\\n   grep -v '^type _timestruc_t ' | \\\n   grep -v '^type _epoll_' | \\\n   grep -v 'in6_addr' | \\\n   grep -v 'sockaddr_in6' | \\\n   sed -e 's/\\([^a-zA-Z0-9_]\\)_timeval\\([^a-zA-Z0-9_]\\)/\\1Timeval\\2/g' \\\n-      -e 's/\\([^a-zA-Z0-9_]\\)_timespec\\(_t\\)\\?\\([^a-zA-Z0-9_]\\)/\\1Timespec\\3/g' \\\n+      -e 's/\\([^a-zA-Z0-9_]\\)_timespec_t\\([^a-zA-Z0-9_]\\)/\\1Timespec\\2/g' \\\n+      -e 's/\\([^a-zA-Z0-9_]\\)_timespec\\([^a-zA-Z0-9_]\\)/\\1Timespec\\2/g' \\\n       -e 's/\\([^a-zA-Z0-9_]\\)_timestruc_t\\([^a-zA-Z0-9_]\\)/\\1Timestruc\\2/g' \\\n     >> ${OUT}\n \n@@ -317,7 +313,8 @@ timespec_nsec=`echo $timespec | sed -n -e 's/^.*tv_nsec \\([^ ]*\\);.*$/\\1/p'`\n echo \"type Timespec_sec_t $timespec_sec\" >> ${OUT}\n echo \"type Timespec_nsec_t $timespec_nsec\" >> ${OUT}\n echo $timespec | \\\n-  sed -e 's/^type \\(__\\)\\?_timespec /type Timespec /' \\\n+  sed -e 's/^type ___timespec /type Timespec /' \\\n+      -e 's/^type _timespec /type Timespec /' \\\n       -e 's/tv_sec *[a-zA-Z0-9_]*/Sec Timespec_sec_t/' \\\n       -e 's/tv_nsec *[a-zA-Z0-9_]*/Nsec Timespec_nsec_t/' >> ${OUT}\n \n@@ -356,7 +353,8 @@ fi | sed -e 's/type _stat64/type Stat_t/' \\\n          -e 's/st_mtim/Mtime/' \\\n          -e 's/st_ctim/Ctime/' \\\n          -e 's/\\([^a-zA-Z0-9_]\\)_timeval\\([^a-zA-Z0-9_]\\)/\\1Timeval\\2/g' \\\n-         -e 's/\\([^a-zA-Z0-9_]\\)_timespec\\(_t\\)\\?\\([^a-zA-Z0-9_]\\)/\\1Timespec\\3/g' \\\n+         -e 's/\\([^a-zA-Z0-9_]\\)_timespec_t\\([^a-zA-Z0-9_]\\)/\\1Timespec\\2/g' \\\n+         -e 's/\\([^a-zA-Z0-9_]\\)_timespec\\([^a-zA-Z0-9_]\\)/\\1Timespec\\2/g' \\\n          -e 's/\\([^a-zA-Z0-9_]\\)_timestruc_t\\([^a-zA-Z0-9_]\\)/\\1Timestruc\\2/g' \\\n        >> ${OUT}\n "}, {"sha": "34190362c3f8910cbc5d287a249660f1be322dcc", "filename": "libgo/syscalls/socket_irix.go", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2Fsyscalls%2Fsocket_irix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3b1e6c603e255e87ff8fe087591d795cf2b974/libgo%2Fsyscalls%2Fsocket_irix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fsocket_irix.go?ref=9f3b1e6c603e255e87ff8fe087591d795cf2b974", "patch": "@@ -0,0 +1,84 @@\n+// socket_irix.go -- Socket handling specific to IRIX 6.\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+const SizeofSockaddrInet4 = 16\n+const SizeofSockaddrInet6 = 28\n+const SizeofSockaddrUnix = 110\n+\n+type RawSockaddrInet4 struct {\n+\tFamily uint16\n+\tPort   uint16\n+\tAddr   [4]byte /* in_addr */\n+\tZero   [8]uint8\n+}\n+\n+func (sa *RawSockaddrInet4) setLen() Socklen_t {\n+\treturn SizeofSockaddrInet4\n+}\n+\n+type RawSockaddrInet6 struct {\n+\tFamily   uint16\n+\tPort     uint16\n+\tFlowinfo uint32\n+\tAddr     [16]byte /* in6_addr */\n+\tScope_id uint32\n+}\n+\n+func (sa *RawSockaddrInet6) setLen() Socklen_t {\n+\treturn SizeofSockaddrInet6\n+}\n+\n+type RawSockaddrUnix struct {\n+\tFamily uint16\n+\tPath   [108]int8\n+}\n+\n+func (sa *RawSockaddrUnix) setLen(int) {\n+}\n+\n+func (sa *RawSockaddrUnix) getLen() (int, int) {\n+\tif sa.Path[0] == 0 {\n+\t\t// \"Abstract\" Unix domain socket.\n+\t\t// Rewrite leading NUL as @ for textual display.\n+\t\t// (This is the standard convention.)\n+\t\t// Not friendly to overwrite in place,\n+\t\t// but the callers below don't care.\n+\t\tsa.Path[0] = '@'\n+\t}\n+\n+\t// Assume path ends at NUL.\n+\t// This is not technically the Linux semantics for\n+\t// abstract Unix domain sockets--they are supposed\n+\t// to be uninterpreted fixed-size binary blobs--but\n+\t// everyone uses this convention.\n+\tn := 0\n+\tfor n < len(sa.Path)-3 && sa.Path[n] != 0 {\n+\t\tn++\n+\t}\n+\n+\treturn n, 0\n+}\n+\n+type RawSockaddr struct {\n+\tFamily uint16\n+\tData   [14]int8\n+}\n+\n+// BindToDevice binds the socket associated with fd to device.\n+func BindToDevice(fd int, device string) (errno int) {\n+\treturn ENOSYS\n+}\n+\n+// struct ip_mreg is provived in <netinet/in.h>, but protected with _SGIAPI.\n+// This could be enabled with -D_SGI_SOURCE, but conflicts with\n+// -D_XOPEN_SOURCE=500 required for msg_control etc. in struct msghgr, so\n+// simply provide it here.\n+type IpMreq struct {\n+\tMultiaddr [4]byte\n+\tInterface [4]byte\n+}"}]}