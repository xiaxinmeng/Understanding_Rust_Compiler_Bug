{"sha": "6eb12cef1d7793f3e598841a7b38067fa74b621e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmViMTJjZWYxZDc3OTNmM2U1OTg4NDFhN2IzODA2N2ZhNzRiNjIxZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-19T21:50:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-19T21:50:05Z"}, "message": "(move_deaths): New parameter maybe_kill_insn.\n\nDon't move note if reg killed by maybe_kill_insn.\n(try_combine): Pass new arg to move_deaths.\n\nFrom-SVN: r12311", "tree": {"sha": "fde46b4cf5e0b0aa32aa6eb2510cc09148814520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fde46b4cf5e0b0aa32aa6eb2510cc09148814520"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eb12cef1d7793f3e598841a7b38067fa74b621e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb12cef1d7793f3e598841a7b38067fa74b621e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eb12cef1d7793f3e598841a7b38067fa74b621e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb12cef1d7793f3e598841a7b38067fa74b621e/comments", "author": null, "committer": null, "parents": [{"sha": "fbe912dd099f284e1db21de74ea40ad81e72c84e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe912dd099f284e1db21de74ea40ad81e72c84e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe912dd099f284e1db21de74ea40ad81e72c84e"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "25e872928611bd253ba8ad4f1a326fcc6763693b", "filename": "gcc/combine.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb12cef1d7793f3e598841a7b38067fa74b621e/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb12cef1d7793f3e598841a7b38067fa74b621e/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6eb12cef1d7793f3e598841a7b38067fa74b621e", "patch": "@@ -440,7 +440,7 @@ static rtx get_last_value\tPROTO((rtx));\n static int use_crosses_set_p\tPROTO((rtx, int));\n static void reg_dead_at_p_1\tPROTO((rtx, rtx));\n static int reg_dead_at_p\tPROTO((rtx, rtx));\n-static void move_deaths\t\tPROTO((rtx, int, rtx, rtx *));\n+static void move_deaths\t\tPROTO((rtx, rtx, int, rtx, rtx *));\n static int reg_bitfield_target_p  PROTO((rtx, rtx));\n static void distribute_notes\tPROTO((rtx, rtx, rtx, rtx, rtx, rtx));\n static void distribute_links\tPROTO((rtx));\n@@ -2204,11 +2204,18 @@ try_combine (i3, i2, i1)\n       }\n \n     /* Get death notes for everything that is now used in either I3 or\n-       I2 and used to die in a previous insn.  */\n+       I2 and used to die in a previous insn.  If we built two new \n+       patterns, move from I1 to I2 then I2 to I3 so that we get the\n+       proper movement on registers that I2 modifies.  */\n \n-    move_deaths (newpat, i1 ? INSN_CUID (i1) : INSN_CUID (i2), i3, &midnotes);\n     if (newi2pat)\n-      move_deaths (newi2pat, INSN_CUID (i1), i2, &midnotes);\n+      {\n+\tmove_deaths (newi2pat, NULL_RTX, INSN_CUID (i1), i2, &midnotes);\n+\tmove_deaths (newpat, newi2pat, INSN_CUID (i1), i3, &midnotes);\n+      }\n+    else\n+      move_deaths (newpat, NULL_RTX, i1 ? INSN_CUID (i1) : INSN_CUID (i2),\n+\t\t   i3, &midnotes);\n \n     /* Distribute all the LOG_LINKS and REG_NOTES from I1, I2, and I3.  */\n     if (i3notes)\n@@ -10489,12 +10496,15 @@ remove_death (regno, insn)\n    TO_INSN (exclusive), put a REG_DEAD note for that register in the\n    list headed by PNOTES. \n \n+   That said, don't move registers killed by maybe_kill_insn.\n+\n    This is done when X is being merged by combination into TO_INSN.  These\n    notes will then be distributed as needed.  */\n \n static void\n-move_deaths (x, from_cuid, to_insn, pnotes)\n+move_deaths (x, maybe_kill_insn, from_cuid, to_insn, pnotes)\n      rtx x;\n+     rtx maybe_kill_insn;\n      int from_cuid;\n      rtx to_insn;\n      rtx *pnotes;\n@@ -10509,6 +10519,11 @@ move_deaths (x, from_cuid, to_insn, pnotes)\n       register rtx where_dead = reg_last_death[regno];\n       register rtx before_dead, after_dead;\n \n+      /* Don't move the register if it gets killed in between from and to */\n+      if (maybe_kill_insn && reg_set_p (x, maybe_kill_insn)\n+\t  && !reg_referenced_p (x, maybe_kill_insn))\n+\treturn;\n+\n       /* WHERE_DEAD could be a USE insn made by combine, so first we\n \t make sure that we have insns with valid INSN_CUID values.  */\n       before_dead = where_dead;\n@@ -10566,7 +10581,7 @@ move_deaths (x, from_cuid, to_insn, pnotes)\n \n \t      for (i = regno + 1; i < ourend; i++)\n \t\tmove_deaths (gen_rtx (REG, reg_raw_mode[i], i),\n-\t\t\t     from_cuid, to_insn, &oldnotes);\n+\t\t\t     maybe_kill_insn, from_cuid, to_insn, &oldnotes);\n \t    }\n \n \t  if (note != 0 && GET_MODE (XEXP (note, 0)) == GET_MODE (x))\n@@ -10587,7 +10602,7 @@ move_deaths (x, from_cuid, to_insn, pnotes)\n     {\n       rtx dest = SET_DEST (x);\n \n-      move_deaths (SET_SRC (x), from_cuid, to_insn, pnotes);\n+      move_deaths (SET_SRC (x), maybe_kill_insn, from_cuid, to_insn, pnotes);\n \n       /* In the case of a ZERO_EXTRACT, a STRICT_LOW_PART, or a SUBREG\n \t that accesses one word of a multi-word item, some\n@@ -10602,7 +10617,7 @@ move_deaths (x, from_cuid, to_insn, pnotes)\n \t\t  == ((GET_MODE_SIZE (GET_MODE (SUBREG_REG (dest)))\n \t\t       + UNITS_PER_WORD - 1) / UNITS_PER_WORD))))\n \t{\n-\t  move_deaths (dest, from_cuid, to_insn, pnotes);\n+\t  move_deaths (dest, maybe_kill_insn, from_cuid, to_insn, pnotes);\n \t  return;\n \t}\n \n@@ -10616,7 +10631,8 @@ move_deaths (x, from_cuid, to_insn, pnotes)\n \t being replaced so the old value is not used in this insn.  */\n \n       if (GET_CODE (dest) == MEM)\n-\tmove_deaths (XEXP (dest, 0), from_cuid, to_insn, pnotes);\n+\tmove_deaths (XEXP (dest, 0), maybe_kill_insn, from_cuid,\n+\t\t     to_insn, pnotes);\n       return;\n     }\n \n@@ -10632,10 +10648,11 @@ move_deaths (x, from_cuid, to_insn, pnotes)\n \t{\n \t  register int j;\n \t  for (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t    move_deaths (XVECEXP (x, i, j), from_cuid, to_insn, pnotes);\n+\t    move_deaths (XVECEXP (x, i, j), maybe_kill_insn, from_cuid,\n+\t\t\t to_insn, pnotes);\n \t}\n       else if (fmt[i] == 'e')\n-\tmove_deaths (XEXP (x, i), from_cuid, to_insn, pnotes);\n+\tmove_deaths (XEXP (x, i), maybe_kill_insn, from_cuid, to_insn, pnotes);\n     }\n }\n \f"}]}