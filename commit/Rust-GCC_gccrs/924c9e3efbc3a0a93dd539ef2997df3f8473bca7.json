{"sha": "924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI0YzllM2VmYmMzYTBhOTNkZDUzOWVmMjk5N2RmM2Y4NDczYmNhNw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-02-13T16:18:37Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-02-13T16:18:37Z"}, "message": "common.opt (gas-loc-support, [...]): New.\n\n\t* common.opt (gas-loc-support, gas-locview-support): New.\n\t(ginline-points, ginternal-reset-location-views): New.\n\t* doc/invoke.texi: Document them.  Use @itemx where intended.\n\t(gvariable-location-views): Adjust.\n\t* target.def (reset_location_view): New.\n\t* doc/tm.texi.in (DWARF2_ASM_VIEW_DEBUG_INFO): New.\n\t(TARGET_RESET_LOCATION_VIEW): New.\n\t* doc/tm.texi: Rebuilt.\n\t* dwarf2out.c (dwarf2out_default_as_loc_support): New.\n\t(dwarf2out_default_as_locview_support): New.\n\t(output_asm_line_debug_info): Use option variables.\n\t(dwarf2out_maybe_output_loclist_view_pair): Likewise.\n\t(output_loc_list): Likewise.\n\t(add_high_low_attributes): Check option variables.\n\tDon't output entry view attribute in strict mode.\n\t(gen_inlined_subroutine_die): Check option variables.\n\t(dwarf2out_inline_entry): Likewise.\n\t(init_sections_and_labels): Likewise.\n\t(dwarf2out_early_finish): Likewise.\n\t(maybe_reset_location_view): New, from...\n\t(dwarf2out_var_location): ... here.  Call it.\n\t* debug.h (dwarf2out_default_as_loc_support): Declare.\n\t(dwarf2out_default_as_locview_support): Declare.\n\t* hooks.c (hook_int_rtx_insn_0): New.\n\t* hooks.h (hook_int_rtx_insn_0): Declare.\n\t* toplev.c (process_options): Take -gas-loc-support and\n\t-gas-locview-support from dwarf2out.  Enable\n\t-gvariable-location-views by default only with locview\n\tassembler support.  Enable -ginternal-reset-location-views by\n\tdefault only if the target defines the corresponding hook.\n\tEnable -ginline-points by default if location views are\n\tenabled; force it disabled if statement frontiers are\n\tdisabled.\n\t* tree-inline.c (expand_call_inline): Check option variables.\n\t* tree-ssa-live.c (remove_unused_scope_block_p): Likewise.\n\nFrom-SVN: r257631", "tree": {"sha": "d12fcabb641c8484c55ff30a041f1c9021e834bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d12fcabb641c8484c55ff30a041f1c9021e834bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/comments", "author": null, "committer": null, "parents": [{"sha": "9ef86762aaf64ca72844962c0dfaa02370b8e3ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ef86762aaf64ca72844962c0dfaa02370b8e3ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ef86762aaf64ca72844962c0dfaa02370b8e3ff"}], "stats": {"total": 457, "additions": 364, "deletions": 93}, "files": [{"sha": "f2a89589995b892f108e8fdae55790e3540b9505", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -1,3 +1,41 @@\n+2018-02-13  Alexandre Oliva <aoliva@redhat.com>\n+\n+\t* common.opt (gas-loc-support, gas-locview-support): New.\n+\t(ginline-points, ginternal-reset-location-views): New.\n+\t* doc/invoke.texi: Document them.  Use @itemx where intended.\n+\t(gvariable-location-views): Adjust.\n+\t* target.def (reset_location_view): New.\n+\t* doc/tm.texi.in (DWARF2_ASM_VIEW_DEBUG_INFO): New.\n+\t(TARGET_RESET_LOCATION_VIEW): New.\n+\t* doc/tm.texi: Rebuilt.\n+\t* dwarf2out.c (dwarf2out_default_as_loc_support): New.\n+\t(dwarf2out_default_as_locview_support): New.\n+\t(output_asm_line_debug_info): Use option variables.\n+\t(dwarf2out_maybe_output_loclist_view_pair): Likewise.\n+\t(output_loc_list): Likewise.\n+\t(add_high_low_attributes): Check option variables.\n+\tDon't output entry view attribute in strict mode.\n+\t(gen_inlined_subroutine_die): Check option variables.\n+\t(dwarf2out_inline_entry): Likewise.\n+\t(init_sections_and_labels): Likewise.\n+\t(dwarf2out_early_finish): Likewise.\n+\t(maybe_reset_location_view): New, from...\n+\t(dwarf2out_var_location): ... here.  Call it.\n+\t* debug.h (dwarf2out_default_as_loc_support): Declare.\n+\t(dwarf2out_default_as_locview_support): Declare.\n+\t* hooks.c (hook_int_rtx_insn_0): New.\n+\t* hooks.h (hook_int_rtx_insn_0): Declare.\n+\t* toplev.c (process_options): Take -gas-loc-support and\n+\t-gas-locview-support from dwarf2out.  Enable\n+\t-gvariable-location-views by default only with locview\n+\tassembler support.  Enable -ginternal-reset-location-views by\n+\tdefault only if the target defines the corresponding hook.\n+\tEnable -ginline-points by default if location views are\n+\tenabled; force it disabled if statement frontiers are\n+\tdisabled.\n+\t* tree-inline.c (expand_call_inline): Check option variables.\n+\t* tree-ssa-live.c (remove_unused_scope_block_p): Likewise.\n+\n 2018-02-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/84321"}, {"sha": "e0bc4d1bb18d2e42b352ff09760105c1fee96f16", "filename": "gcc/common.opt", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -2880,6 +2880,14 @@ g\n Common Driver RejectNegative JoinedOrMissing\n Generate debug information in default format.\n \n+gas-loc-support\n+Common Driver Var(dwarf2out_as_loc_support) Init(2)\n+Assume assembler support for (DWARF2+) .loc directives\n+\n+gas-locview-support\n+Common Driver Var(dwarf2out_as_locview_support) Init(2)\n+Assume assembler support for view in (DWARF2+) .loc directives\n+\n gcoff\n Common Driver Ignore Warn(switch %qs no longer supported)\n Does nothing.  Preserved for backward compatibility.\n@@ -2912,6 +2920,14 @@ ggdb\n Common Driver JoinedOrMissing\n Generate debug information in default extended format.\n \n+ginline-points\n+Common Driver Var(debug_inline_points) Init(2)\n+Generate extended entry point information for inlined functions\n+\n+ginternal-reset-location-views\n+Common Driver Var(debug_internal_reset_location_views) Init(2)\n+Compute locview reset points based on insn length estimates\n+\n gno-\n RejectNegative Joined Undocumented\n ; Catch the gno- prefix, so it doesn't backtrack to g<level>."}, {"sha": "126e56e8c8d704540eedcded2026633cc8350658", "filename": "gcc/debug.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -248,6 +248,8 @@ extern bool dwarf2out_do_eh_frame (void);\n extern bool dwarf2out_do_frame (void);\n extern bool dwarf2out_do_cfi_asm (void);\n extern void dwarf2out_switch_text_section (void);\n+extern bool dwarf2out_default_as_loc_support (void);\n+extern bool dwarf2out_default_as_locview_support (void);\n \n /* For -fdump-go-spec.  */\n "}, {"sha": "48194c825f33e4241874392acfd8983314568624", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 85, "deletions": 21, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -346,9 +346,13 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-g  -g@var{level}  -gdwarf  -gdwarf-@var{version} @gol\n -ggdb  -grecord-gcc-switches  -gno-record-gcc-switches @gol\n -gstabs  -gstabs+  -gstrict-dwarf  -gno-strict-dwarf @gol\n+-gas-loc-support  -gno-as-loc-support @gol\n+-gas-locview-support  -gno-as-locview-support @gol\n -gcolumn-info  -gno-column-info @gol\n -gstatement-frontiers  -gno-statement-frontiers @gol\n -gvariable-location-views  -gno-variable-location-views @gol\n+-ginternal-reset-location-views  -gno-internal-reset-location-views @gol\n+-ginline-points  -gno-inline-points @gol\n -gvms  -gxcoff  -gxcoff+  -gz@r{[}=@var{type}@r{]} @gol\n -fdebug-prefix-map=@var{old}=@var{new}  -fdebug-types-section @gol\n -fno-eliminate-unused-debug-types @gol\n@@ -4159,7 +4163,7 @@ result in false positives.\n \n @table @gcctabopt\n @item -Wformat-overflow\n-@item -Wformat-overflow=1\n+@itemx -Wformat-overflow=1\n @opindex Wformat-overflow\n @opindex Wno-format-overflow\n Level @var{1} of @option{-Wformat-overflow} enabled by @option{-Wformat}\n@@ -4278,7 +4282,7 @@ logic @option{-Wformat-overflow}.\n \n @table @gcctabopt\n @item -Wformat-truncation\n-@item -Wformat-truncation=1\n+@itemx -Wformat-truncation=1\n @opindex Wformat-truncation\n @opindex Wno-format-overflow\n Level @var{1} of @option{-Wformat-truncation} enabled by @option{-Wformat}\n@@ -5239,7 +5243,7 @@ Option @option{-Wstringop-overflow=2} is enabled by default.\n \n @table @gcctabopt\n @item -Wstringop-overflow\n-@item -Wstringop-overflow=1\n+@itemx -Wstringop-overflow=1\n @opindex Wstringop-overflow\n @opindex Wno-stringop-overflow\n The @option{-Wstringop-overflow=1} option uses type-zero Object Size Checking\n@@ -7214,7 +7218,7 @@ and on some objects @code{.debug_types} produces larger instead of smaller\n debugging information.\n \n @item -grecord-gcc-switches\n-@item -gno-record-gcc-switches\n+@itemx -gno-record-gcc-switches\n @opindex grecord-gcc-switches\n @opindex gno-record-gcc-switches\n This switch causes the command-line options used to invoke the\n@@ -7237,16 +7241,46 @@ DWARF extensions from later standard versions is allowed.\n Allow using extensions of later DWARF standard version than selected with\n @option{-gdwarf-@var{version}}.\n \n+@item -gas-loc-support\n+@opindex gas-loc-support\n+Inform the compiler that the assembler supports @code{.loc} directives.\n+It may then use them for the assembler to generate DWARF2+ line number\n+tables.\n+\n+This is generally desirable, because assembler-generated line-number\n+tables are a lot more compact than those the compiler can generate\n+itself.\n+\n+This option will be enabled by default if, at GCC configure time, the\n+assembler was found to support such directives.\n+\n+@item -gno-as-loc-support\n+@opindex gno-as-loc-support\n+Force GCC to generate DWARF2+ line number tables internally, if DWARF2+\n+line number tables are to be generated.\n+\n+@item gas-locview-support\n+@opindex gas-locview-support\n+Inform the compiler that the assembler supports @code{view} assignment\n+and reset assertion checking in @code{.loc} directives.\n+\n+This option will be enabled by default if, at GCC configure time, the\n+assembler was found to support them.\n+\n+@item gno-as-locview-support\n+Force GCC to assign view numbers internally, if\n+@option{-gvariable-location-views} are explicitly requested.\n+\n @item -gcolumn-info\n-@item -gno-column-info\n+@itemx -gno-column-info\n @opindex gcolumn-info\n @opindex gno-column-info\n Emit location column information into DWARF debugging information, rather\n than just file and line.\n This option is enabled by default.\n \n @item -gstatement-frontiers\n-@item -gno-statement-frontiers\n+@itemx -gno-statement-frontiers\n @opindex gstatement-frontiers\n @opindex gno-statement-frontiers\n This option causes GCC to create markers in the internal representation\n@@ -7257,8 +7291,8 @@ compiling with optimization (@option{-Os}, @option{-O}, @option{-O2},\n @dots{}), and outputting DWARF 2 debug information at the normal level.\n \n @item -gvariable-location-views\n-@item -gvariable-location-views=incompat5\n-@item -gno-variable-location-views\n+@itemx -gvariable-location-views=incompat5\n+@itemx -gno-variable-location-views\n @opindex gvariable-location-views\n @opindex gvariable-location-views=incompat5\n @opindex gno-variable-location-views\n@@ -7272,9 +7306,15 @@ which generally makes them somewhat less compact.  The augmented line\n number tables and location lists are fully backward-compatible, so they\n can be consumed by debug information consumers that are not aware of\n these augmentations, but they won't derive any benefit from them either.\n+\n This is enabled by default when outputting DWARF 2 debug information at\n-the normal level, as long as @option{-fvar-tracking-assignments} is\n-enabled and @option{-gstrict-dwarf} is not.\n+the normal level, as long as there is assembler support,\n+@option{-fvar-tracking-assignments} is enabled and\n+@option{-gstrict-dwarf} is not.  When assembler support is not\n+available, this may still be enabled, but it will force GCC to output\n+internal line number tables, and if\n+@option{-ginternal-reset-location-views} is not enabled, that will most\n+certainly lead to silently mismatching location views.\n \n There is a proposed representation for view numbers that is not backward\n compatible with the location list format introduced in DWARF 5, that can\n@@ -7284,6 +7324,30 @@ implementation of the proposed representation.  Debug information\n consumers are not expected to support this extended format, and they\n would be rendered unable to decode location lists using it.\n \n+@item -ginternal-reset-location-views\n+@itemx -gnointernal-reset-location-views\n+@opindex ginternal-reset-location-views\n+@opindex gno-internal-reset-location-views\n+Attempt to determine location views that can be omitted from location\n+view lists.  This requires the compiler to have very accurate insn\n+length estimates, which isn't always the case, and it may cause\n+incorrect view lists to be generated silently when using an assembler\n+that does not support location view lists.  The GNU assembler will flag\n+any such error as a @code{view number mismatch}.  This is only enabled\n+on ports that define a reliable estimation function.\n+\n+@item -ginline-points\n+@itemx -gno-inline-points\n+@opindex ginline-points\n+@opindex gno-inline-points\n+Generate extended debug information for inlined functions.  Location\n+view tracking markers are inserted at inlined entry points, so that\n+address and view numbers can be computed and output in debug\n+information.  This can be enabled independently of location views, in\n+which case the view numbers won't be output, but it can only be enabled\n+along with statement frontiers, and it is only enabled by default if\n+location views are enabled.\n+\n @item -gz@r{[}=@var{type}@r{]}\n @opindex gz\n Produce compressed debug sections in DWARF format, if that is supported.\n@@ -10043,7 +10107,7 @@ also use other heuristics to decide whether if-conversion is likely to be\n profitable.\n \n @item max-rtl-if-conversion-predictable-cost\n-@item max-rtl-if-conversion-unpredictable-cost\n+@itemx max-rtl-if-conversion-unpredictable-cost\n RTL if-conversion will try to remove conditional branches around a block\n and replace them with conditionally executed instructions.  These parameters\n give the maximum permissible cost for the sequence that would be generated\n@@ -10768,7 +10832,7 @@ parameters only when their cumulative size is less or equal to\n pointer parameter.\n \n @item sra-max-scalarization-size-Ospeed\n-@item sra-max-scalarization-size-Osize\n+@itemx sra-max-scalarization-size-Osize\n The two Scalar Reduction of Aggregates passes (SRA and IPA-SRA) aim to\n replace scalar parts of aggregates with uses of independent scalar\n variables.  These parameters control the maximum size, in storage units,\n@@ -14545,7 +14609,7 @@ This erratum workaround is made at link time and this will only pass the\n corresponding flag to the linker.\n \n @item -mlow-precision-recip-sqrt\n-@item -mno-low-precision-recip-sqrt\n+@itemx -mno-low-precision-recip-sqrt\n @opindex mlow-precision-recip-sqrt\n @opindex mno-low-precision-recip-sqrt\n Enable or disable the reciprocal square root approximation.\n@@ -14555,7 +14619,7 @@ precision of reciprocal square root results to about 16 bits for\n single precision and to 32 bits for double precision.\n \n @item -mlow-precision-sqrt\n-@item -mno-low-precision-sqrt\n+@itemx -mno-low-precision-sqrt\n @opindex -mlow-precision-sqrt\n @opindex -mno-low-precision-sqrt\n Enable or disable the square root approximation.\n@@ -14566,7 +14630,7 @@ single precision and to 32 bits for double precision.\n If enabled, it implies @option{-mlow-precision-recip-sqrt}.\n \n @item -mlow-precision-div\n-@item -mno-low-precision-div\n+@itemx -mno-low-precision-div\n @opindex -mlow-precision-div\n @opindex -mno-low-precision-div\n Enable or disable the division approximation.\n@@ -20194,7 +20258,7 @@ for regression testing of mixed MIPS16/non-MIPS16 code generation, and is\n not intended for ordinary use in compiling user code.\n \n @item -minterlink-compressed\n-@item -mno-interlink-compressed\n+@itemx -mno-interlink-compressed\n @opindex minterlink-compressed\n @opindex mno-interlink-compressed\n Require (do not require) that code using the standard (uncompressed) MIPS ISA\n@@ -20775,7 +20839,7 @@ Tell the MIPS assembler to not run its preprocessor over user\n assembler files (with a @samp{.s} suffix) when assembling them.\n \n @item -mfix-24k\n-@item -mno-fix-24k\n+@itemx -mno-fix-24k\n @opindex mfix-24k\n @opindex mno-fix-24k\n Work around the 24K E48 (lost data on stores during refill) errata.\n@@ -21535,7 +21599,7 @@ into the small data or BSS sections instead of the normal data or BSS\n sections.  The default value of @var{num} is 8.\n \n @item -mgpopt=@var{option}\n-@item -mgpopt\n+@itemx -mgpopt\n @itemx -mno-gpopt\n @opindex mgpopt\n @opindex mno-gpopt\n@@ -23094,7 +23158,7 @@ or 32 bits (@option{-m32bit-doubles}) in size.  The default is\n @option{-m32bit-doubles}.\n \n @item -msave-mduc-in-interrupts\n-@item -mno-save-mduc-in-interrupts\n+@itemx -mno-save-mduc-in-interrupts\n @opindex msave-mduc-in-interrupts\n @opindex mno-save-mduc-in-interrupts\n Specifies that interrupt handler functions should preserve the\n@@ -26727,13 +26791,13 @@ comparisons.  These correctly handle the case where the result of a\n comparison is unordered.\n \n @item -m80387\n-@item -mhard-float\n+@itemx -mhard-float\n @opindex 80387\n @opindex mhard-float\n Generate output containing 80387 instructions for floating point.\n \n @item -mno-80387\n-@item -msoft-float\n+@itemx -msoft-float\n @opindex no-80387\n @opindex msoft-float\n Generate output containing library calls for floating point."}, {"sha": "bd8b917ba8296007400066aadbfc45d9a67f6bcd", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -9966,6 +9966,29 @@ line debug info sections.  This will result in much more compact line number\n tables, and hence is desirable if it works.\n @end defmac\n \n+@defmac DWARF2_ASM_VIEW_DEBUG_INFO\n+Define this macro to be a nonzero value if the assembler supports view\n+assignment and verification in @code{.loc}.  If it does not, but the\n+user enables location views, the compiler may have to fallback to\n+internal line number tables.\n+@end defmac\n+\n+@deftypefn {Target Hook} int TARGET_RESET_LOCATION_VIEW (rtx_insn *@var{})\n+This hook, if defined, enables -ginternal-reset-location-views, and\n+uses its result to override cases in which the estimated min insn\n+length might be nonzero even when a PC advance (i.e., a view reset)\n+cannot be taken for granted.\n+\n+If the hook is defined, it must return a positive value to indicate\n+the insn definitely advances the PC, and so the view number can be\n+safely assumed to be reset; a negative value to mean the insn\n+definitely does not advance the PC, and os the view number must not\n+be reset; or zero to decide based on the estimated insn length.\n+\n+If insn length is to be regarded as reliable, set the hook to\n+@code{hook_int_rtx_insn_0}.\n+@end deftypefn\n+\n @deftypevr {Target Hook} bool TARGET_WANT_DEBUG_PUB_SECTIONS\n True if the @code{.debug_pubtypes} and @code{.debug_pubnames} sections should be emitted.  These sections are not used on most platforms, and in particular GDB does not use them.\n @end deftypevr"}, {"sha": "b0207146e8c2444f1e8f3c1fdaf724df14966f73", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -6921,6 +6921,15 @@ line debug info sections.  This will result in much more compact line number\n tables, and hence is desirable if it works.\n @end defmac\n \n+@defmac DWARF2_ASM_VIEW_DEBUG_INFO\n+Define this macro to be a nonzero value if the assembler supports view\n+assignment and verification in @code{.loc}.  If it does not, but the\n+user enables location views, the compiler may have to fallback to\n+internal line number tables.\n+@end defmac\n+\n+@hook TARGET_RESET_LOCATION_VIEW\n+\n @hook TARGET_WANT_DEBUG_PUB_SECTIONS\n \n @hook TARGET_DELAY_SCHED2"}, {"sha": "4e2bf3b4c88b21e263c516aef0e4da2ceaa05045", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 124, "deletions": 64, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -2957,6 +2957,37 @@ struct GTY(()) dw_line_info_table {\n   vec<dw_line_info_entry, va_gc> *entries;\n };\n \n+/* If we're keep track of location views and their reset points, and\n+   INSN is a reset point (i.e., it necessarily advances the PC), mark\n+   the next view in TABLE as reset.  */\n+\n+static void\n+maybe_reset_location_view (rtx_insn *insn, dw_line_info_table *table)\n+{\n+  if (!debug_internal_reset_location_views)\n+    return;\n+\n+  /* Maybe turn (part of?) this test into a default target hook.  */\n+  int reset = 0;\n+\n+  if (targetm.reset_location_view)\n+    reset = targetm.reset_location_view (insn);\n+\n+  if (reset)\n+    ;\n+  else if (JUMP_TABLE_DATA_P (insn))\n+    reset = 1;\n+  else if (GET_CODE (insn) == USE\n+\t   || GET_CODE (insn) == CLOBBER\n+\t   || GET_CODE (insn) == ASM_INPUT\n+\t   || asm_noperands (insn) >= 0)\n+    ;\n+  else if (get_attr_min_length (insn) > 0)\n+    reset = 1;\n+\n+  if (reset > 0)\n+    RESET_NEXT_VIEW (table->view);\n+}\n \n /* Each DIE attribute has a field specifying the attribute kind,\n    a link to the next attribute in the chain, and an attribute value.\n@@ -3164,6 +3195,31 @@ skeleton_chain_node;\n #endif\n #endif\n \n+/* Return true if GCC configure detected assembler support for .loc.  */\n+\n+bool\n+dwarf2out_default_as_loc_support (void)\n+{\n+  return DWARF2_ASM_LINE_DEBUG_INFO;\n+#if (GCC_VERSION >= 3000)\n+# undef DWARF2_ASM_LINE_DEBUG_INFO\n+# pragma GCC poison DWARF2_ASM_LINE_DEBUG_INFO\n+#endif\n+}\n+\n+/* Return true if GCC configure detected assembler support for views\n+   in .loc directives.  */\n+\n+bool\n+dwarf2out_default_as_locview_support (void)\n+{\n+  return DWARF2_ASM_VIEW_DEBUG_INFO;\n+#if (GCC_VERSION >= 3000)\n+# undef DWARF2_ASM_VIEW_DEBUG_INFO\n+# pragma GCC poison DWARF2_ASM_VIEW_DEBUG_INFO\n+#endif\n+}\n+\n /* A bit is set in ZERO_VIEW_P if we are using the assembler-supported\n    view computation, and it refers to a view identifier for which we\n    will not emit a label because it is known to map to a view number\n@@ -3215,9 +3271,9 @@ static GTY(()) bitmap zero_view_p;\n static bool\n output_asm_line_debug_info (void)\n {\n-  return (DWARF2_ASM_VIEW_DEBUG_INFO\n-\t  || (DWARF2_ASM_LINE_DEBUG_INFO\n-\t      && !debug_variable_location_views));\n+  return (dwarf2out_as_loc_support\n+\t  && (dwarf2out_as_locview_support\n+\t      || !debug_variable_location_views));\n }\n \n /* Minimum line offset in a special line info. opcode.\n@@ -9950,28 +10006,31 @@ dwarf2out_maybe_output_loclist_view_pair (dw_loc_list_ref curr)\n #ifdef DW_LLE_view_pair\n   dw2_asm_output_data (1, DW_LLE_view_pair, \"DW_LLE_view_pair\");\n \n-# if DWARF2_ASM_VIEW_DEBUG_INFO\n-  if (ZERO_VIEW_P (curr->vbegin))\n-    dw2_asm_output_data_uleb128 (0, \"Location view begin\");\n-  else\n+  if (dwarf2out_as_locview_support)\n     {\n-      char label[MAX_ARTIFICIAL_LABEL_BYTES];\n-      ASM_GENERATE_INTERNAL_LABEL (label, \"LVU\", curr->vbegin);\n-      dw2_asm_output_symname_uleb128 (label, \"Location view begin\");\n-    }\n+      if (ZERO_VIEW_P (curr->vbegin))\n+\tdw2_asm_output_data_uleb128 (0, \"Location view begin\");\n+      else\n+\t{\n+\t  char label[MAX_ARTIFICIAL_LABEL_BYTES];\n+\t  ASM_GENERATE_INTERNAL_LABEL (label, \"LVU\", curr->vbegin);\n+\t  dw2_asm_output_symname_uleb128 (label, \"Location view begin\");\n+\t}\n \n-  if (ZERO_VIEW_P (curr->vend))\n-    dw2_asm_output_data_uleb128 (0, \"Location view end\");\n+      if (ZERO_VIEW_P (curr->vend))\n+\tdw2_asm_output_data_uleb128 (0, \"Location view end\");\n+      else\n+\t{\n+\t  char label[MAX_ARTIFICIAL_LABEL_BYTES];\n+\t  ASM_GENERATE_INTERNAL_LABEL (label, \"LVU\", curr->vend);\n+\t  dw2_asm_output_symname_uleb128 (label, \"Location view end\");\n+\t}\n+    }\n   else\n     {\n-      char label[MAX_ARTIFICIAL_LABEL_BYTES];\n-      ASM_GENERATE_INTERNAL_LABEL (label, \"LVU\", curr->vend);\n-      dw2_asm_output_symname_uleb128 (label, \"Location view end\");\n+      dw2_asm_output_data_uleb128 (curr->vbegin, \"Location view begin\");\n+      dw2_asm_output_data_uleb128 (curr->vend, \"Location view end\");\n     }\n-# else /* !DWARF2_ASM_VIEW_DEBUG_INFO */\n-  dw2_asm_output_data_uleb128 (curr->vbegin, \"Location view begin\");\n-  dw2_asm_output_data_uleb128 (curr->vend, \"Location view end\");\n-# endif /* DWARF2_ASM_VIEW_DEBUG_INFO */\n #endif /* DW_LLE_view_pair */\n \n   return;\n@@ -10001,40 +10060,43 @@ output_loc_list (dw_loc_list_ref list_head)\n \t  vcount++;\n \n \t  /* ?? dwarf_split_debug_info?  */\n-#if DWARF2_ASM_VIEW_DEBUG_INFO\n-\t  char label[MAX_ARTIFICIAL_LABEL_BYTES];\n-\n-\t  if (!ZERO_VIEW_P (curr->vbegin))\n+\t  if (dwarf2out_as_locview_support)\n \t    {\n-\t      ASM_GENERATE_INTERNAL_LABEL (label, \"LVU\", curr->vbegin);\n-\t      dw2_asm_output_symname_uleb128 (label,\n-\t\t\t\t\t      \"View list begin (%s)\",\n-\t\t\t\t\t      list_head->vl_symbol);\n+\t      char label[MAX_ARTIFICIAL_LABEL_BYTES];\n+\n+\t      if (!ZERO_VIEW_P (curr->vbegin))\n+\t\t{\n+\t\t  ASM_GENERATE_INTERNAL_LABEL (label, \"LVU\", curr->vbegin);\n+\t\t  dw2_asm_output_symname_uleb128 (label,\n+\t\t\t\t\t\t  \"View list begin (%s)\",\n+\t\t\t\t\t\t  list_head->vl_symbol);\n+\t\t}\n+\t      else\n+\t\tdw2_asm_output_data_uleb128 (0,\n+\t\t\t\t\t     \"View list begin (%s)\",\n+\t\t\t\t\t     list_head->vl_symbol);\n+\n+\t      if (!ZERO_VIEW_P (curr->vend))\n+\t\t{\n+\t\t  ASM_GENERATE_INTERNAL_LABEL (label, \"LVU\", curr->vend);\n+\t\t  dw2_asm_output_symname_uleb128 (label,\n+\t\t\t\t\t\t  \"View list end (%s)\",\n+\t\t\t\t\t\t  list_head->vl_symbol);\n+\t\t}\n+\t      else\n+\t\tdw2_asm_output_data_uleb128 (0,\n+\t\t\t\t\t     \"View list end (%s)\",\n+\t\t\t\t\t     list_head->vl_symbol);\n \t    }\n \t  else\n-\t    dw2_asm_output_data_uleb128 (0,\n-\t\t\t\t\t \"View list begin (%s)\",\n-\t\t\t\t\t list_head->vl_symbol);\n-\n-\t  if (!ZERO_VIEW_P (curr->vend))\n \t    {\n-\t      ASM_GENERATE_INTERNAL_LABEL (label, \"LVU\", curr->vend);\n-\t      dw2_asm_output_symname_uleb128 (label,\n-\t\t\t\t\t      \"View list end (%s)\",\n-\t\t\t\t\t      list_head->vl_symbol);\n+\t      dw2_asm_output_data_uleb128 (curr->vbegin,\n+\t\t\t\t\t   \"View list begin (%s)\",\n+\t\t\t\t\t   list_head->vl_symbol);\n+\t      dw2_asm_output_data_uleb128 (curr->vend,\n+\t\t\t\t\t   \"View list end (%s)\",\n+\t\t\t\t\t   list_head->vl_symbol);\n \t    }\n-\t  else\n-\t    dw2_asm_output_data_uleb128 (0,\n-\t\t\t\t\t \"View list end (%s)\",\n-\t\t\t\t\t list_head->vl_symbol);\n-#else /* !DWARF2_ASM_VIEW_DEBUG_INFO */\n-\t  dw2_asm_output_data_uleb128 (curr->vbegin,\n-\t\t\t\t       \"View list begin (%s)\",\n-\t\t\t\t       list_head->vl_symbol);\n-\t  dw2_asm_output_data_uleb128 (curr->vend,\n-\t\t\t\t       \"View list end (%s)\",\n-\t\t\t\t       list_head->vl_symbol);\n-#endif\n \t}\n     }\n \n@@ -23721,11 +23783,14 @@ add_high_low_attributes (tree stmt, dw_die_ref die)\n     {\n       inline_entry_data *ied = *iedp;\n       gcc_assert (MAY_HAVE_DEBUG_MARKER_INSNS);\n+      gcc_assert (debug_inline_points);\n       gcc_assert (inlined_function_outer_scope_p (stmt));\n+\n       ASM_GENERATE_INTERNAL_LABEL (label, ied->label_pfx, ied->label_num);\n       add_AT_lbl_id (die, DW_AT_entry_pc, label);\n \n-      if (debug_variable_location_views && !ZERO_VIEW_P (ied->view))\n+      if (debug_variable_location_views && !ZERO_VIEW_P (ied->view)\n+\t  && !dwarf_strict)\n \t{\n \t  if (!output_asm_line_debug_info ())\n \t    add_AT_unsigned (die, DW_AT_GNU_entry_view, ied->view);\n@@ -23756,7 +23821,7 @@ add_high_low_attributes (tree stmt, dw_die_ref die)\n       dw_die_ref pdie;\n       dw_attr_node *attr = NULL;\n \n-      if (!MAY_HAVE_DEBUG_MARKER_INSNS && inlined_function_outer_scope_p (stmt))\n+      if (!debug_inline_points && inlined_function_outer_scope_p (stmt))\n \t{\n \t  ASM_GENERATE_INTERNAL_LABEL (label, BLOCK_BEGIN_LABEL,\n \t\t\t\t       BLOCK_NUMBER (stmt));\n@@ -23921,7 +23986,7 @@ gen_inlined_subroutine_die (tree stmt, dw_die_ref context_die)\n       dw_die_ref subr_die\n \t= new_die (DW_TAG_inlined_subroutine, context_die, stmt);\n \n-      if (call_arg_locations || MAY_HAVE_DEBUG_MARKER_INSNS)\n+      if (call_arg_locations || debug_inline_points)\n \tBLOCK_DIE (stmt) = subr_die;\n       add_abstract_origin_attribute (subr_die, decl);\n       if (TREE_ASM_WRITTEN (stmt))\n@@ -26906,7 +26971,7 @@ dwarf2out_var_location (rtx_insn *loc_note)\n     {\n       if (CALL_P (loc_note))\n \t{\n-\t  RESET_NEXT_VIEW (cur_line_info_table->view);\n+\t  maybe_reset_location_view (loc_note, cur_line_info_table);\n \t  call_site_count++;\n \t  if (SIBLING_CALL_P (loc_note))\n \t    tail_call_site_count++;\n@@ -26942,15 +27007,8 @@ dwarf2out_var_location (rtx_insn *loc_note)\n \t}\n       else if (!debug_variable_location_views)\n \tgcc_unreachable ();\n-      else if (JUMP_TABLE_DATA_P (loc_note))\n-\tRESET_NEXT_VIEW (cur_line_info_table->view);\n-      else if (GET_CODE (loc_note) == USE\n-\t       || GET_CODE (loc_note) == CLOBBER\n-\t       || GET_CODE (loc_note) == ASM_INPUT\n-\t       || asm_noperands (loc_note) >= 0)\n-\t;\n-      else if (get_attr_min_length (loc_note) > 0)\n-\tRESET_NEXT_VIEW (cur_line_info_table->view);\n+      else\n+\tmaybe_reset_location_view (loc_note, cur_line_info_table);\n \n       return;\n     }\n@@ -27219,6 +27277,8 @@ block_within_block_p (tree block, tree outer, bool bothways)\n static void\n dwarf2out_inline_entry (tree block)\n {\n+  gcc_assert (debug_inline_points);\n+\n   /* If we can't represent it, don't bother.  */\n   if (!(dwarf_version >= 3 || !dwarf_strict))\n     return;\n@@ -28233,7 +28293,7 @@ init_sections_and_labels (bool early_lto_debug)\n       debug_str_section = get_section (DEBUG_LTO_STR_SECTION,\n \t\t\t\t       DEBUG_STR_SECTION_FLAGS\n \t\t\t\t       | SECTION_EXCLUDE, NULL);\n-      if (!dwarf_split_debug_info && !DWARF2_ASM_LINE_DEBUG_INFO)\n+      if (!dwarf_split_debug_info && !dwarf2out_as_loc_support)\n \tdebug_line_str_section\n \t  = get_section (DEBUG_LTO_LINE_STR_SECTION,\n \t\t\t DEBUG_STR_SECTION_FLAGS | SECTION_EXCLUDE, NULL);\n@@ -31468,7 +31528,7 @@ dwarf2out_early_finish (const char *filename)\n \n   /* When emitting DWARF5 .debug_line_str, move DW_AT_name and\n      DW_AT_comp_dir into .debug_line_str section.  */\n-  if (!DWARF2_ASM_LINE_DEBUG_INFO\n+  if (!dwarf2out_as_loc_support\n       && dwarf_version >= 5\n       && DWARF5_USE_DEBUG_LINE_STR)\n     {"}, {"sha": "780cc1e086312d17647a4548afb0e583e9f86df9", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -235,6 +235,12 @@ hook_int_rtx_1 (rtx)\n   return 1;\n }\n \n+int\n+hook_int_rtx_insn_0 (rtx_insn *)\n+{\n+  return 0;\n+}\n+\n int\n hook_int_rtx_insn_unreachable (rtx_insn *)\n {"}, {"sha": "0ed5b952b48ee019eae6f96659d0c5278b5339ae", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -93,6 +93,7 @@ extern int hook_int_const_tree_0 (const_tree);\n extern int hook_int_const_tree_const_tree_1 (const_tree, const_tree);\n extern int hook_int_rtx_0 (rtx);\n extern int hook_int_rtx_1 (rtx);\n+extern int hook_int_rtx_insn_0 (rtx_insn *);\n extern int hook_int_rtx_insn_unreachable (rtx_insn *);\n extern int hook_int_rtx_bool_0 (rtx, bool);\n extern int hook_int_rtx_mode_as_bool_0 (rtx, machine_mode, addr_space_t,"}, {"sha": "c5b2a1e7e71fe853f804711ba96d6f9ad13fddc1", "filename": "gcc/target.def", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -6447,6 +6447,23 @@ This will suppress generation of the normal debug frame unwind information.\",\n  enum unwind_info_type, (void),\n  default_debug_unwind_info)\n \n+DEFHOOK\n+(reset_location_view, \"\\\n+This hook, if defined, enables -ginternal-reset-location-views, and\\n\\\n+uses its result to override cases in which the estimated min insn\\n\\\n+length might be nonzero even when a PC advance (i.e., a view reset)\\n\\\n+cannot be taken for granted.\\n\\\n+\\n\\\n+If the hook is defined, it must return a positive value to indicate\\n\\\n+the insn definitely advances the PC, and so the view number can be\\n\\\n+safely assumed to be reset; a negative value to mean the insn\\n\\\n+definitely does not advance the PC, and os the view number must not\\n\\\n+be reset; or zero to decide based on the estimated insn length.\\n\\\n+\\n\\\n+If insn length is to be regarded as reliable, set the hook to\\n\\\n+@code{hook_int_rtx_insn_0}.\",\n+ int, (rtx_insn *), NULL)\n+\n /* The code parameter should be of type enum rtx_code but this is not\n    defined at this time.  */\n DEFHOOK"}, {"sha": "b066bcc72297fad53dcea3f5e605a0c87c6402a2", "filename": "gcc/toplev.c", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -1558,13 +1558,23 @@ process_options (void)\n \t     || write_symbols == VMS_AND_DWARF2_DEBUG)\n \t && !(flag_selective_scheduling || flag_selective_scheduling2));\n \n+  if (dwarf2out_as_loc_support == AUTODETECT_VALUE)\n+    dwarf2out_as_loc_support\n+      = dwarf2out_default_as_loc_support ();\n+  if (dwarf2out_as_locview_support == AUTODETECT_VALUE)\n+    dwarf2out_as_locview_support\n+      = dwarf2out_default_as_locview_support ();\n+\n   if (debug_variable_location_views == AUTODETECT_VALUE)\n     {\n-      debug_variable_location_views = flag_var_tracking\n-\t&& debug_info_level >= DINFO_LEVEL_NORMAL\n-\t&& (write_symbols == DWARF2_DEBUG\n-\t    || write_symbols == VMS_AND_DWARF2_DEBUG)\n-\t&& !dwarf_strict;\n+      debug_variable_location_views\n+\t= (flag_var_tracking\n+\t   && debug_info_level >= DINFO_LEVEL_NORMAL\n+\t   && (write_symbols == DWARF2_DEBUG\n+\t       || write_symbols == VMS_AND_DWARF2_DEBUG)\n+\t   && !dwarf_strict\n+\t   && dwarf2out_as_loc_support\n+\t   && dwarf2out_as_locview_support);\n     }\n   else if (debug_variable_location_views == -1 && dwarf_version != 5)\n     {\n@@ -1574,6 +1584,31 @@ process_options (void)\n       debug_variable_location_views = 1;\n     }\n \n+  if (debug_internal_reset_location_views == 2)\n+    {\n+      debug_internal_reset_location_views\n+\t= (debug_variable_location_views\n+\t   && targetm.reset_location_view);\n+    }\n+  else if (debug_internal_reset_location_views\n+\t   && !debug_variable_location_views)\n+    {\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"-ginternal-reset-location-views is forced disabled \"\n+\t\t  \"without -gvariable-location-views\");\n+      debug_internal_reset_location_views = 0;\n+    }\n+\n+  if (debug_inline_points == AUTODETECT_VALUE)\n+    debug_inline_points = debug_variable_location_views;\n+  else if (debug_inline_points && !debug_nonbind_markers_p)\n+    {\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"-ginline-points is forced disabled without \"\n+\t\t  \"-gstatement-frontiers\");\n+      debug_inline_points = 0;\n+    }\n+\n   if (flag_tree_cselim == AUTODETECT_VALUE)\n     {\n       if (HAVE_conditional_move)"}, {"sha": "811829e8529948896d2350e6aa24c160636bd5ca", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -4605,7 +4605,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n \t\t\tGSI_NEW_STMT);\n     }\n   initialize_inlined_parameters (id, stmt, fn, bb);\n-  if (debug_nonbind_markers_p && id->block\n+  if (debug_nonbind_markers_p && debug_inline_points && id->block\n       && inlined_function_outer_scope_p (id->block))\n     {\n       gimple_stmt_iterator si = gsi_last_bb (bb);"}, {"sha": "62bb3c5de659431d964d447a00eac95a72970ff4", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924c9e3efbc3a0a93dd539ef2997df3f8473bca7/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=924c9e3efbc3a0a93dd539ef2997df3f8473bca7", "patch": "@@ -522,7 +522,7 @@ remove_unused_scope_block_p (tree scope, bool in_ctor_dtor_block)\n      unused = false;\n    /* Preserve the block, it is referenced by at least the inline\n       entry point marker.  */\n-   else if (debug_nonbind_markers_p\n+   else if (debug_inline_points\n \t    && inlined_function_outer_scope_p (scope))\n      unused = false;\n    /* Innermost blocks with no live variables nor statements can be always\n@@ -558,7 +558,7 @@ remove_unused_scope_block_p (tree scope, bool in_ctor_dtor_block)\n       with block_ultimate_origin being set to FUNCTION_DECL and\n       DECL_SOURCE_LOCATION set, unless they expand to nothing...  But\n       see above for the case of statement frontiers.  */\n-   else if (!debug_nonbind_markers_p\n+   else if (!debug_inline_points\n \t    && inlined_function_outer_scope_p (scope))\n      unused = false;\n    else"}]}