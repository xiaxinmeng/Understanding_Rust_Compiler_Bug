{"sha": "b74d8dc4cf11da599b5c18d77a5039bc800d6871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc0ZDhkYzRjZjExZGE1OTliNWMxOGQ3N2E1MDM5YmM4MDBkNjg3MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-11-30T16:56:45Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-30T16:56:45Z"}, "message": "cgraph.c (cgraph_node::dump): Dump unit_id and merged_extern_inline.\n\n\n\t* cgraph.c (cgraph_node::dump): Dump unit_id and merged_extern_inline.\n\t* cgraph.h (cgraph_node): Add unit_id and\n\tmerged_extern_inline.\n\t(symbol_table): Add max_unit.\n\t(symbol_table::symbol_table): Initialize it.\n\t* cgraphclones.c (duplicate_thunk_for_node): Copy unit_id.\n\tmerged_comdat, merged_extern_inline.\n\t(cgraph_node::create_clone): Likewise.\n\t(cgraph_node::create_version_clone): Likewise.\n\t* ipa-fnsummary.c (dump_ipa_call_summary): Dump info about cross module\n\tcalls.\n\t* ipa-fnsummary.h (cross_module_call_p): New inline function.\n\t* ipa-inline-analyssi.c (simple_edge_hints): Use it.\n\t* ipa-inline.c (inline_small_functions): Likewise.\n\t* lto-symtab.c (lto_cgraph_replace_node): Record merged_extern_inline;\n\tcopy merged_comdat and merged_extern_inline.\n\t* lto-cgraph.c (lto_output_node): Stream out merged_comdat,\n\tmerged_extern_inline and unit_id.\n\t(input_overwrite_node): Stream in these.\n\t(input_cgraph_1): Set unit_base.\n\t* lto-streamer.h (lto_file_decl_data): Add unit_base.\n\t* symtab.c (symtab_node::make_decl_local): Record former_comdat.\n\n\t* g++.dg/lto/inline-crossmodule-1.h: New testcase.\n\t* g++.dg/lto/inline-crossmodule-1_0.C: New testcase.\n\t* g++.dg/lto/inline-crossmodule-1_1.C: New testcase.\n\nFrom-SVN: r278876", "tree": {"sha": "83659a5fcbd25257a160c1e7d81f819e0650f566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83659a5fcbd25257a160c1e7d81f819e0650f566"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b74d8dc4cf11da599b5c18d77a5039bc800d6871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74d8dc4cf11da599b5c18d77a5039bc800d6871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74d8dc4cf11da599b5c18d77a5039bc800d6871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74d8dc4cf11da599b5c18d77a5039bc800d6871/comments", "author": null, "committer": null, "parents": [{"sha": "f9235a2bafb1ea078367b1b804fd73d5d849fcdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9235a2bafb1ea078367b1b804fd73d5d849fcdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9235a2bafb1ea078367b1b804fd73d5d849fcdc"}], "stats": {"total": 142, "additions": 136, "deletions": 6}, "files": [{"sha": "0bfc23996ce5bc1d58a73632dc9c681b5c160aa8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -1,3 +1,28 @@\n+2019-11-30  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.c (cgraph_node::dump): Dump unit_id and merged_extern_inline.\n+\t* cgraph.h (cgraph_node): Add unit_id and\n+\tmerged_extern_inline.\n+\t(symbol_table): Add max_unit.\n+\t(symbol_table::symbol_table): Initialize it.\n+\t* cgraphclones.c (duplicate_thunk_for_node): Copy unit_id.\n+\tmerged_comdat, merged_extern_inline.\n+\t(cgraph_node::create_clone): Likewise.\n+\t(cgraph_node::create_version_clone): Likewise.\n+\t* ipa-fnsummary.c (dump_ipa_call_summary): Dump info about cross module\n+\tcalls.\n+\t* ipa-fnsummary.h (cross_module_call_p): New inline function.\n+\t* ipa-inline-analyssi.c (simple_edge_hints): Use it.\n+\t* ipa-inline.c (inline_small_functions): Likewise.\n+\t* lto-symtab.c (lto_cgraph_replace_node): Record merged_extern_inline;\n+\tcopy merged_comdat and merged_extern_inline.\n+\t* lto-cgraph.c (lto_output_node): Stream out merged_comdat,\n+\tmerged_extern_inline and unit_id.\n+\t(input_overwrite_node): Stream in these.\n+\t(input_cgraph_1): Set unit_base.\n+\t* lto-streamer.h (lto_file_decl_data): Add unit_base.\n+\t* symtab.c (symtab_node::make_decl_local): Record former_comdat.\n+\n 2019-11-30  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* gcc.c (process_command): Only warn about an ineffective `-x'"}, {"sha": "b75430f3f3aab759c5c9052b45ef6db0cd51aee1", "filename": "gcc/cgraph.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -1923,6 +1923,9 @@ cgraph_node::dump (FILE *f)\n   if (profile_id)\n     fprintf (f, \"  Profile id: %i\\n\",\n \t     profile_id);\n+  if (unit_id)\n+    fprintf (f, \"  Unit id: %i\\n\",\n+\t     unit_id);\n   cgraph_function_version_info *vi = function_version ();\n   if (vi != NULL)\n     {\n@@ -1973,6 +1976,8 @@ cgraph_node::dump (FILE *f)\n     fprintf (f, \" icf_merged\");\n   if (merged_comdat)\n     fprintf (f, \" merged_comdat\");\n+  if (merged_extern_inline)\n+    fprintf (f, \" merged_extern_inline\");\n   if (split_part)\n     fprintf (f, \" split_part\");\n   if (indirect_call_target)"}, {"sha": "2aedaaedd611db5bd61d36a1f9a7872bbabc35fc", "filename": "gcc/cgraph.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -1433,6 +1433,8 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node\n   int count_materialization_scale;\n   /* ID assigned by the profiling.  */\n   unsigned int profile_id;\n+  /* ID of the translation unit.  */\n+  int unit_id;\n   /* Time profiler: first run of function.  */\n   int tp_first_run;\n \n@@ -1469,6 +1471,8 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node\n   unsigned nonfreeing_fn : 1;\n   /* True if there was multiple COMDAT bodies merged by lto-symtab.  */\n   unsigned merged_comdat : 1;\n+  /* True if this def was merged with extern inlines.  */\n+  unsigned merged_extern_inline : 1;\n   /* True if function was created to be executed in parallel.  */\n   unsigned parallelized_function : 1;\n   /* True if function is part split out by ipa-split.  */\n@@ -2090,7 +2094,7 @@ class GTY((tag (\"SYMTAB\"))) symbol_table\n   edges_count (0), edges_max_uid (1), edges_max_summary_id (0),\n   cgraph_released_summary_ids (), edge_released_summary_ids (),\n   nodes (NULL), asmnodes (NULL), asm_last_node (NULL),\n-  order (0), global_info_ready (false), state (PARSING),\n+  order (0), max_unit (0), global_info_ready (false), state (PARSING),\n   function_flags_ready (false), cpp_implicit_aliases_done (false),\n   section_hash (NULL), assembler_name_hash (NULL), init_priority_hash (NULL),\n   dump_file (NULL), ipa_clones_dump_file (NULL), cloned_nodes (),\n@@ -2355,6 +2359,9 @@ class GTY((tag (\"SYMTAB\"))) symbol_table\n      them, to support -fno-toplevel-reorder.  */\n   int order;\n \n+  /* Maximal unit ID used.  */\n+  int max_unit;\n+\n   /* Set when whole unit has been analyzed so we can access global info.  */\n   bool global_info_ready;\n   /* What state callgraph is in right now.  */"}, {"sha": "81c5dfd194f972388f1bb2f902492af9cfd66728", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -234,6 +234,9 @@ duplicate_thunk_for_node (cgraph_node *thunk, cgraph_node *node)\n   new_thunk->unique_name = in_lto_p;\n   new_thunk->former_clone_of = thunk->decl;\n   new_thunk->clone.param_adjustments = node->clone.param_adjustments;\n+  new_thunk->unit_id = thunk->unit_id;\n+  new_thunk->merged_comdat = thunk->merged_comdat;\n+  new_thunk->merged_extern_inline = thunk->merged_extern_inline;\n \n   cgraph_edge *e = new_thunk->create_edge (node, NULL, new_thunk->count);\n   symtab->call_edge_duplication_hooks (thunk->callees, e);\n@@ -383,6 +386,9 @@ cgraph_node::create_clone (tree new_decl, profile_count prof_count,\n   new_node->icf_merged = icf_merged;\n   new_node->merged_comdat = merged_comdat;\n   new_node->thunk = thunk;\n+  new_node->unit_id = unit_id;\n+  new_node->merged_comdat = merged_comdat;\n+  new_node->merged_extern_inline = merged_extern_inline;\n \n   if (param_adjustments)\n     new_node->clone.param_adjustments = param_adjustments;\n@@ -888,6 +894,9 @@ cgraph_node::create_version_clone (tree new_decl,\n    new_version->inlined_to = inlined_to;\n    new_version->rtl = rtl;\n    new_version->count = count;\n+   new_version->unit_id = unit_id;\n+   new_version->merged_comdat = merged_comdat;\n+   new_version->merged_extern_inline = merged_extern_inline;\n \n    for (e = callees; e; e=e->next_callee)\n      if (!bbs_to_copy"}, {"sha": "9d16026658907c9b31faf6b9cd8eb13adb35db0a", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -913,6 +913,9 @@ dump_ipa_call_summary (FILE *f, int indent, struct cgraph_node *node,\n \t       ? \"inlined\" : cgraph_inline_failed_string (edge-> inline_failed),\n \t       indent, \"\", edge->sreal_frequency ().to_double ());\n \n+      if (cross_module_call_p (edge))\n+\tfprintf (f, \" cross module\");\n+\n       if (es)\n \tfprintf (f, \" loop depth:%2i size:%2i time: %2i\",\n \t\t es->loop_depth, es->call_stmt_size, es->call_stmt_time);"}, {"sha": "e43003212a82ae7e0799702b1ed9fa9526de07fe", "filename": "gcc/ipa-fnsummary.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fipa-fnsummary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fipa-fnsummary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.h?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -375,4 +375,21 @@ void ipa_fnsummary_c_finalize (void);\n HOST_WIDE_INT ipa_get_stack_frame_offset (struct cgraph_node *node);\n void ipa_remove_from_growth_caches (struct cgraph_edge *edge);\n \n+/* Return true if EDGE is a cross module call.  */\n+\n+static inline bool\n+cross_module_call_p (struct cgraph_edge *edge)\n+{\n+  /* Here we do not want to walk to alias target becuase ICF may create\n+     cross-unit aliases.  */\n+  if (edge->caller->unit_id == edge->callee->unit_id)\n+    return false;\n+  /* If the call is to a (former) comdat function or s symbol with mutiple\n+     extern inline definitions then treat is as in-module call.  */\n+  if (edge->callee->merged_extern_inline || edge->callee->merged_comdat\n+      || DECL_COMDAT (edge->callee->decl))\n+    return false;\n+  return true;\n+}\n+\n #endif /* GCC_IPA_FNSUMMARY_H */"}, {"sha": "75c6399d35d4cda7e79ec6a7b9a3f5a06ed86522", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -163,9 +163,7 @@ simple_edge_hints (struct cgraph_edge *edge)\n   if (to_scc_no && to_scc_no  == callee_scc_no && !edge->recursive_p ())\n     hints |= INLINE_HINT_same_scc;\n \n-  if (callee->lto_file_data && edge->caller->lto_file_data\n-      && edge->caller->lto_file_data != callee->lto_file_data\n-      && !callee->merged_comdat && !callee->icf_merged)\n+  if (cross_module_call_p (edge))\n     hints |= INLINE_HINT_cross_module;\n \n   return hints;"}, {"sha": "56ea671c9bc4887e4bc7ae58ac1b63c933f2bd0b", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -2257,11 +2257,12 @@ inline_small_functions (void)\n \n \t  dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, edge->call_stmt,\n \t\t\t   \" Inlined %C into %C which now has time %f and \"\n-\t\t\t   \"size %i, net change of %s.\\n\",\n+\t\t\t   \"size %i, net change of %s%s.\\n\",\n \t\t\t   edge->callee, edge->caller,\n \t\t\t   s->time.to_double (),\n \t\t\t   ipa_size_summaries->get (edge->caller)->size,\n-\t\t\t   buf_net_change);\n+\t\t\t   buf_net_change,\n+\t\t\t   cross_module_call_p (edge) ? \" (cross module)\":\"\");\n \t}\n       if (min_size > overall_size)\n \t{"}, {"sha": "d2a5d5376fe49654220f4e13890e80519e0ed575", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -533,6 +533,8 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   bp_pack_value (&bp, node->calls_comdat_local, 1);\n   bp_pack_value (&bp, node->icf_merged, 1);\n   bp_pack_value (&bp, node->nonfreeing_fn, 1);\n+  bp_pack_value (&bp, node->merged_comdat, 1);\n+  bp_pack_value (&bp, node->merged_extern_inline, 1);\n   bp_pack_value (&bp, node->thunk.thunk_p, 1);\n   bp_pack_value (&bp, node->parallelized_function, 1);\n   bp_pack_enum (&bp, ld_plugin_symbol_resolution,\n@@ -559,6 +561,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n       streamer_write_uhwi_stream (ob->main_stream, node->thunk.indirect_offset);\n     }\n   streamer_write_hwi_stream (ob->main_stream, node->profile_id);\n+  streamer_write_hwi_stream (ob->main_stream, node->unit_id);\n   if (DECL_STATIC_CONSTRUCTOR (node->decl))\n     streamer_write_hwi_stream (ob->main_stream, node->get_init_priority ());\n   if (DECL_STATIC_DESTRUCTOR (node->decl))\n@@ -1177,6 +1180,8 @@ input_overwrite_node (struct lto_file_decl_data *file_data,\n   node->calls_comdat_local = bp_unpack_value (bp, 1);\n   node->icf_merged = bp_unpack_value (bp, 1);\n   node->nonfreeing_fn = bp_unpack_value (bp, 1);\n+  node->merged_comdat = bp_unpack_value (bp, 1);\n+  node->merged_extern_inline = bp_unpack_value (bp, 1);\n   node->thunk.thunk_p = bp_unpack_value (bp, 1);\n   node->parallelized_function = bp_unpack_value (bp, 1);\n   node->resolution = bp_unpack_enum (bp, ld_plugin_symbol_resolution,\n@@ -1310,6 +1315,9 @@ input_node (struct lto_file_decl_data *file_data,\n   if (node->alias && !node->analyzed && node->weakref)\n     node->alias_target = get_alias_symbol (node->decl);\n   node->profile_id = streamer_read_hwi (ib);\n+  node->unit_id = streamer_read_hwi (ib) + file_data->unit_base;\n+  if (symtab->max_unit < node->unit_id)\n+    symtab->max_unit = node->unit_id;\n   if (DECL_STATIC_CONSTRUCTOR (node->decl))\n     node->set_init_priority (streamer_read_hwi (ib));\n   if (DECL_STATIC_DESTRUCTOR (node->decl))\n@@ -1502,6 +1510,7 @@ input_cgraph_1 (struct lto_file_decl_data *file_data,\n \n   tag = streamer_read_enum (ib, LTO_symtab_tags, LTO_symtab_last_tag);\n   file_data->order_base = symtab->order;\n+  file_data->unit_base = symtab->max_unit + 1;\n   while (tag)\n     {\n       if (tag == LTO_symtab_edge)"}, {"sha": "dba195d38844bde8726a70c1b9c56306ed0cfb58", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -626,6 +626,8 @@ struct GTY(()) lto_file_decl_data\n   lto_section lto_section_header;\n \n   int order_base;\n+\n+  int unit_base;\n };\n \n typedef struct lto_file_decl_data *lto_file_decl_data_ptr;"}, {"sha": "8dfae6277821001ba48f091d4f40f5699357f6bc", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -69,6 +69,13 @@ lto_cgraph_replace_node (struct cgraph_node *node,\n   if (node->definition && prevailing_node->definition\n       && DECL_COMDAT (node->decl) && DECL_COMDAT (prevailing_node->decl))\n     prevailing_node->merged_comdat = true;\n+  else if ((node->definition || node->body_removed)\n+\t   && DECL_DECLARED_INLINE_P (node->decl)\n+\t   && DECL_EXTERNAL (node->decl)\n+\t   && prevailing_node->definition)\n+    prevailing_node->merged_extern_inline = true;\n+  prevailing_node->merged_comdat |= node->merged_comdat;\n+  prevailing_node->merged_extern_inline |= node->merged_extern_inline;\n \n   /* Redirect all incoming edges.  */\n   compatible_p"}, {"sha": "6816bd1f884faaf7983a3dbcad5cedc99c74a8e1", "filename": "gcc/symtab.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -1863,6 +1863,13 @@ symtab_node::noninterposable_alias (void)\n       DECL_STATIC_CONSTRUCTOR (new_decl) = 0;\n       DECL_STATIC_DESTRUCTOR (new_decl) = 0;\n       new_node = cgraph_node::create_alias (new_decl, node->decl);\n+\n+      cgraph_node *new_cnode = dyn_cast <cgraph_node *> (new_node),\n+\t\t   *cnode = dyn_cast <cgraph_node *> (node);\n+\n+      new_cnode->unit_id = cnode->unit_id;\n+      new_cnode->merged_comdat = cnode->merged_comdat;\n+      new_cnode->merged_extern_inline = cnode->merged_extern_inline;\n     }\n   else\n     {"}, {"sha": "4595d664efaf9802c20984ccf4a1ed8b14155640", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -1,3 +1,9 @@\n+2019-11-30  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/lto/inline-crossmodule-1.h: New testcase.\n+\t* g++.dg/lto/inline-crossmodule-1_0.C: New testcase.\n+\t* g++.dg/lto/inline-crossmodule-1_1.C: New testcase.\n+\n 2019-11-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/91783"}, {"sha": "ce345532a68a7c6d96ee03804621830d86d0a779", "filename": "gcc/testsuite/g++.dg/lto/inline-crossmodule-1.h", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Finline-crossmodule-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Finline-crossmodule-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Finline-crossmodule-1.h?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -0,0 +1,15 @@\n+struct a\n+{\n+  int ret1 ()\n+  {\n+    return 1;\n+  }\n+  int key ();\n+};\n+struct b\n+{\n+  int ret2 ()\n+  {\n+    return 2;\n+  }\n+};"}, {"sha": "a1712187010a90d45c552767a05067a99074dd65", "filename": "gcc/testsuite/g++.dg/lto/inline-crossmodule-1_0.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Finline-crossmodule-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Finline-crossmodule-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Finline-crossmodule-1_0.C?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -0,0 +1,11 @@\n+// { dg-lto-do link }\n+/* { dg-lto-options { \"-O2 -fno-early-inlining -flto -fdump-ipa-inline\" } } */\n+#include \"inline-crossmodule-1.h\"\n+int a::key ()\n+{\n+  return 0;\n+}\n+/* { dg-final { scan-wpa-ipa-times \"Inlined ret1\" 1 \"inlined\"  } } */\n+/* { dg-final { scan-wpa-ipa-times \"Inlined ret2\" 1 \"inlined\"  } } */\n+/* { dg-final { scan-wpa-ipa-times \"Inlined key\\[^\\\\n\\]*(cross module)\" 1 \"inlined\"  } } */\n+/* { dg-final { scan-wpa-ipa-times \"(cross module)\" 1 \"inlined\"  } } */"}, {"sha": "72e4b9beedd7266935e245f5507da4da2f99a696", "filename": "gcc/testsuite/g++.dg/lto/inline-crossmodule-1_1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Finline-crossmodule-1_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74d8dc4cf11da599b5c18d77a5039bc800d6871/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Finline-crossmodule-1_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Finline-crossmodule-1_1.C?ref=b74d8dc4cf11da599b5c18d77a5039bc800d6871", "patch": "@@ -0,0 +1,8 @@\n+#include \"inline-crossmodule-1.h\"\n+int\n+main()\n+{\n+  struct a a;\n+  struct b b;\n+  return a.key () + a.ret1 () + b.ret2() - 3;\n+}"}]}