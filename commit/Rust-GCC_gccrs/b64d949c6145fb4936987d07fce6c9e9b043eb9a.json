{"sha": "b64d949c6145fb4936987d07fce6c9e9b043eb9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0ZDk0OWM2MTQ1ZmI0OTM2OTg3ZDA3ZmNlNmM5ZTliMDQzZWI5YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2006-11-18T20:38:40Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2006-11-18T20:38:40Z"}, "message": "builtins.c (integer_valued_real_p): Handle fmin/fmax.\n\n\t* builtins.c (integer_valued_real_p): Handle fmin/fmax.\n\t(fold_builtin_fmin_fmax): New.\n\t(fold_builtin_1): Use it.\n\ntestsuite:\n\t* gcc.dg/builtins-20.c: Add fmin/fmax cases.\n\t* gcc.dg/torture/builtin-minmax-1.c: New.\n\nFrom-SVN: r118976", "tree": {"sha": "4271dac3a15920b86d9161661dc7f03100747e65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4271dac3a15920b86d9161661dc7f03100747e65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b64d949c6145fb4936987d07fce6c9e9b043eb9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64d949c6145fb4936987d07fce6c9e9b043eb9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64d949c6145fb4936987d07fce6c9e9b043eb9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64d949c6145fb4936987d07fce6c9e9b043eb9a/comments", "author": null, "committer": null, "parents": [{"sha": "6af46feb6b6cf1ff61860db3bc4af7d0ed03e148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af46feb6b6cf1ff61860db3bc4af7d0ed03e148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af46feb6b6cf1ff61860db3bc4af7d0ed03e148"}], "stats": {"total": 234, "additions": 224, "deletions": 10}, "files": [{"sha": "86b2a3724eb2d9e3afa864de87bdca019a81ba9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64d949c6145fb4936987d07fce6c9e9b043eb9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64d949c6145fb4936987d07fce6c9e9b043eb9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b64d949c6145fb4936987d07fce6c9e9b043eb9a", "patch": "@@ -1,5 +1,9 @@\n 2006-11-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* builtins.c (integer_valued_real_p): Handle fmin/fmax.\n+\t(fold_builtin_fmin_fmax): New.\n+\t(fold_builtin_1): Use it.\n+\n \t* fold-const.c (fold_strip_sign_ops): Handle copysign.\n \n 2006-11-18  Richard Guenther  <rguenther@suse.de>"}, {"sha": "4e4ea969cd78ea8849b3026ad65b5b10aea950d2", "filename": "gcc/builtins.c", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64d949c6145fb4936987d07fce6c9e9b043eb9a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64d949c6145fb4936987d07fce6c9e9b043eb9a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b64d949c6145fb4936987d07fce6c9e9b043eb9a", "patch": "@@ -6708,6 +6708,11 @@ integer_valued_real_p (tree t)\n \tCASE_FLT_FN (BUILT_IN_TRUNC):\n \t  return true;\n \n+\tCASE_FLT_FN (BUILT_IN_FMIN):\n+\tCASE_FLT_FN (BUILT_IN_FMAX):\n+\t  return integer_valued_real_p (TREE_VALUE (TREE_OPERAND (t, 1)))\n+\t    && integer_valued_real_p (TREE_VALUE (TREE_CHAIN (TREE_OPERAND (t, 1))));\n+\n \tdefault:\n \t  break;\n \t}\n@@ -8722,6 +8727,38 @@ fold_builtin_abs (tree arglist, tree type)\n   return fold_build1 (ABS_EXPR, type, arg);\n }\n \n+/* Fold a call to builtin fmin or fmax.  */\n+\n+static tree\n+fold_builtin_fmin_fmax (tree arglist, tree type, bool max)\n+{\n+  if (validate_arglist (arglist, REAL_TYPE, REAL_TYPE, VOID_TYPE))\n+    {\n+      tree arg0 = TREE_VALUE (arglist);\n+      tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      /* Calculate the result when the argument is a constant.  */\n+      tree res = do_mpfr_arg2 (arg0, arg1, type, (max ? mpfr_max : mpfr_min));\n+\n+      if (res)\n+\treturn res;\n+\n+      /* Transform fmin/fmax(x,x) -> x.  */\n+      if (operand_equal_p (arg0, arg1, OEP_PURE_SAME))\n+\treturn omit_one_operand (type, arg0, arg1);\n+      \n+      /* Convert fmin/fmax to MIN_EXPR/MAX_EXPR.  C99 requires these\n+\t functions to return the numeric arg if the other one is NaN.\n+\t These tree codes don't honor that, so only transform if\n+\t -ffinite-math-only is set.  C99 doesn't require -0.0 to be\n+\t handled, so we don't have to worry about it either.  */\n+      if (flag_finite_math_only)\n+\treturn fold_build2 ((max ? MAX_EXPR : MIN_EXPR), type,\n+\t\t\t    fold_convert (type, arg0),\n+\t\t\t    fold_convert (type, arg1));\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Fold a call to __builtin_isnan(), __builtin_isinf, __builtin_finite.\n    EXP is the CALL_EXPR for the call.  */\n \n@@ -9143,18 +9180,10 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n     break;\n \n     CASE_FLT_FN (BUILT_IN_FMIN):\n-      if (validate_arglist (arglist, REAL_TYPE, REAL_TYPE, VOID_TYPE))\n-\treturn do_mpfr_arg2 (TREE_VALUE (arglist),\n-\t\t\t     TREE_VALUE (TREE_CHAIN (arglist)),\n-\t\t\t     type, mpfr_min);\n-    break;\n+      return fold_builtin_fmin_fmax (arglist, type, /*max=*/false);\n \n     CASE_FLT_FN (BUILT_IN_FMAX):\n-      if (validate_arglist (arglist, REAL_TYPE, REAL_TYPE, VOID_TYPE))\n-\treturn do_mpfr_arg2 (TREE_VALUE (arglist),\n-\t\t\t     TREE_VALUE (TREE_CHAIN (arglist)),\n-\t\t\t     type, mpfr_max);\n-    break;\n+      return fold_builtin_fmin_fmax (arglist, type, /*max=*/true);\n \n     CASE_FLT_FN (BUILT_IN_HYPOT):\n       return fold_builtin_hypot (fndecl, arglist, type);"}, {"sha": "25c827e5467344e392ca43c2eb163e87cda31e75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64d949c6145fb4936987d07fce6c9e9b043eb9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64d949c6145fb4936987d07fce6c9e9b043eb9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b64d949c6145fb4936987d07fce6c9e9b043eb9a", "patch": "@@ -1,5 +1,8 @@\n 2006-11-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* gcc.dg/builtins-20.c: Add fmin/fmax cases.\n+\t* gcc.dg/torture/builtin-minmax-1.c: New.\n+\n \t* gcc.dg/builtins-20.c: Add cases for copysign.\n \n 2006-11-18  Francois-Xavier Coudert  <coudert@clipper.ens.fr>"}, {"sha": "1211cf0b6cd42289722b04ebd394fb0bfa1a7a99", "filename": "gcc/testsuite/gcc.dg/builtins-20.c", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64d949c6145fb4936987d07fce6c9e9b043eb9a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64d949c6145fb4936987d07fce6c9e9b043eb9a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c?ref=b64d949c6145fb4936987d07fce6c9e9b043eb9a", "patch": "@@ -17,20 +17,26 @@ extern double sin (double);\n extern double tan (double);\n extern double fabs (double);\n extern double copysign (double, double);\n+extern double fmin (double, double);\n+extern double fmax (double, double);\n extern double hypot (double, double);\n extern double pure (double) __attribute__ ((__pure__));\n extern float cosf (float);\n extern float sinf (float);\n extern float tanf (float);\n extern float fabsf (float);\n extern float copysignf (float, float);\n+extern float fminf (float, float);\n+extern float fmaxf (float, float);\n extern float hypotf (float, float);\n extern float puref (float) __attribute__ ((__pure__));\n extern long double cosl (long double);\n extern long double sinl (long double);\n extern long double tanl (long double);\n extern long double fabsl (long double);\n extern long double copysignl (long double, long double);\n+extern long double fminl (long double, long double);\n+extern long double fmaxl (long double, long double);\n extern long double hypotl (long double, long double);\n extern long double purel (long double) __attribute__ ((__pure__));\n \n@@ -155,6 +161,30 @@ void test2(double x, double y)\n \n   if (hypot (tan(-x), tan(-fabs(y))) != hypot (tan(x), tan(y)))\n     link_error ();\n+\n+  if (fmin (fmax(x,y),y) != y)\n+    link_error ();\n+\n+  if (fmin (fmax(y,x),y) != y)\n+    link_error ();\n+\n+  if (fmin (x,fmax(x,y)) != x)\n+    link_error ();\n+  \n+  if (fmin (x,fmax(y,x)) != x)\n+    link_error ();\n+  \n+  if (fmax (fmin(x,y),y) != y)\n+    link_error ();\n+\n+  if (fmax (fmin(y,x),y) != y)\n+    link_error ();\n+\n+  if (fmax (x,fmin(x,y)) != x)\n+    link_error ();\n+  \n+  if (fmax (x,fmin(y,x)) != x)\n+    link_error ();\n }\n \n void test1f(float x)\n@@ -278,6 +308,30 @@ void test2f(float x, float y)\n \n   if (hypotf (tanf(-x), tanf(-fabsf(y))) != hypotf (tanf(x), tanf(y)))\n     link_error ();\n+\n+  if (fminf (fmaxf(x,y),y) != y)\n+    link_error ();\n+\n+  if (fminf (fmaxf(y,x),y) != y)\n+    link_error ();\n+\n+  if (fminf (x,fmaxf(x,y)) != x)\n+    link_error ();\n+  \n+  if (fminf (x,fmaxf(y,x)) != x)\n+    link_error ();\n+  \n+  if (fmaxf (fminf(x,y),y) != y)\n+    link_error ();\n+\n+  if (fmaxf (fminf(y,x),y) != y)\n+    link_error ();\n+\n+  if (fmaxf (x,fminf(x,y)) != x)\n+    link_error ();\n+  \n+  if (fmaxf (x,fminf(y,x)) != x)\n+    link_error ();\n }\n \n \n@@ -402,6 +456,30 @@ void test2l(long double x, long double y)\n \n   if (hypotl (tanl(-x), tanl(-fabsl(y))) != hypotl (tanl(x), tanl(y)))\n     link_error ();\n+\n+  if (fminl (fmaxl(x,y),y) != y)\n+    link_error ();\n+\n+  if (fminl (fmaxl(y,x),y) != y)\n+    link_error ();\n+\n+  if (fminl (x,fmaxl(x,y)) != x)\n+    link_error ();\n+  \n+  if (fminl (x,fmaxl(y,x)) != x)\n+    link_error ();\n+  \n+  if (fmaxl (fminl(x,y),y) != y)\n+    link_error ();\n+\n+  if (fmaxl (fminl(y,x),y) != y)\n+    link_error ();\n+\n+  if (fmaxl (x,fminl(x,y)) != x)\n+    link_error ();\n+  \n+  if (fmaxl (x,fminl(y,x)) != x)\n+    link_error ();\n }\n \n int main()"}, {"sha": "280d3564e3730bf149590d8475a7e5ba5bee4e3b", "filename": "gcc/testsuite/gcc.dg/torture/builtin-minmax-1.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64d949c6145fb4936987d07fce6c9e9b043eb9a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-minmax-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64d949c6145fb4936987d07fce6c9e9b043eb9a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-minmax-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-minmax-1.c?ref=b64d949c6145fb4936987d07fce6c9e9b043eb9a", "patch": "@@ -0,0 +1,100 @@\n+/* Copyright (C) 2006  Free Software Foundation.\n+\n+   Verify that built-in math function folding of fmin/fmax is\n+   correctly performed by the compiler.\n+\n+   Origin: Kaveh R. Ghazi,  November 13, 2006.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-fno-math-errno\" } */\n+\n+/* All references to link_error should go away at compile-time.  */\n+extern void link_error(int);\n+\n+#define DECLARE(FUNC) \\\n+  extern float FUNC##f (float); \\\n+  extern double FUNC (double); \\\n+  extern long double FUNC##l (long double)\n+#define DECLARE_L(FUNC) \\\n+  extern long FUNC##f (float); \\\n+  extern long FUNC (double); \\\n+  extern long FUNC##l (long double)\n+#define DECLARE2(FUNC) \\\n+  extern float FUNC##f (float, float); \\\n+  extern double FUNC (double, double); \\\n+  extern long double FUNC##l (long double, long double)\n+\n+DECLARE2(fmin);\n+DECLARE2(fmax);\n+DECLARE_L(lround);\n+DECLARE_L(lrint);\n+DECLARE(sqrt);\n+DECLARE(fabs);\n+extern int pure(int) __attribute__ ((__pure__));\n+\n+/* Test that FUNC(x,x) == x.  We cast to (long) so \"!=\" folds.  */\n+#define TEST_EQ(FUNC) do { \\\n+  if ((long)FUNC##f(xf,xf) != (long)xf) \\\n+    link_error(__LINE__); \\\n+  if ((long)FUNC(x,x) != (long)x) \\\n+    link_error(__LINE__); \\\n+  if ((long)FUNC##l(xl,xl) != (long)xl) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n+/* Test that FUNC(purefn,purefn) == purefn.  We cast to (long) so \"!=\" folds.  */\n+#define TEST_EQ_PURE(FUNC) do { \\\n+  if ((long)FUNC##f(pure(i),pure(i)) != (long)FUNC##f(pure(i),pure(i))) \\\n+    link_error(__LINE__); \\\n+  if ((long)FUNC(pure(i),pure(i)) != (long)FUNC(pure(i),pure(i))) \\\n+    link_error(__LINE__); \\\n+  if ((long)FUNC##l(pure(i),pure(i)) != (long)FUNC##l(pure(i),pure(i))) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n+/* Test that lround(FUNC(int,int)) == lrint(FUNC(int,int)), i.e. both\n+   lround() and lrint() should be folded away.  */\n+#define TEST_NONNEG(FUNC) do { \\\n+  if (lroundf(FUNC##f(i,j)) != lrintf(FUNC##f(i,j))) \\\n+    link_error(__LINE__); \\\n+  if (lround(FUNC(i,j)) != lrint(FUNC(i,j))) \\\n+    link_error(__LINE__); \\\n+  if (lroundl(FUNC##l(i,j)) != lrintl(FUNC##l(i,j))) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n+/* Test that (long)fabs(FUNC(fabs(x),fabs(y))) ==\n+   (long)FUNC(fabs(x),fabs(y)).  We cast to (long) so \"!=\" folds.  */\n+#define TEST_INT(FUNC) do { \\\n+  if ((long)fabsf(FUNC##f(fabsf(xf),fabsf(yf))) != (long)FUNC##f(fabsf(xf),fabsf(yf))) \\\n+    link_error(__LINE__); \\\n+  if ((long)fabs(FUNC(fabs(x),fabs(y))) != (long)FUNC(fabs(x),fabs(y))) \\\n+    link_error(__LINE__); \\\n+  if ((long)fabsl(FUNC##l(fabsl(xl),fabsl(yl))) != (long)FUNC##l(fabsl(xl),fabsl(yl))) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n+void foo (float xf, double x, long double xl,\n+\t  float yf, double y, long double yl,\n+\t  int i, int j)\n+{\n+  TEST_EQ(fmin);\n+  TEST_EQ(fmax);\n+\n+#ifdef __OPTIMIZE__\n+  TEST_EQ_PURE(fmin);\n+  TEST_EQ_PURE(fmax);\n+#endif\n+\n+  TEST_INT(fmin);\n+  TEST_INT(fmax);\n+  \n+  TEST_NONNEG(fmin);\n+  TEST_NONNEG(fmax);\n+}\n+\n+int main()\n+{\n+  foo (1,1,1,1,1,1,1,1);\n+  return 0;\n+}"}]}