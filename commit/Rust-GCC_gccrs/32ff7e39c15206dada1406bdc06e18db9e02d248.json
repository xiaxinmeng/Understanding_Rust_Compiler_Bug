{"sha": "32ff7e39c15206dada1406bdc06e18db9e02d248", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJmZjdlMzljMTUyMDZkYWRhMTQwNmJkYzA2ZTE4ZGI5ZTAyZDI0OA==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2016-12-02T08:32:40Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-12-02T08:32:40Z"}, "message": "Do not simplify \"(and (reg) (const bit)\" to if_then_else.\n\ncombine_simplify_rtx() tries to replace rtx expressions with just two\npossible values with an experession that uses if_then_else:\n\n  (if_then_else (condition) (value1) (value2))\n\nIf the original expression is e.g.\n\n  (and (reg) (const_int 2))\n\nwhere the constant is the mask for a single bit, the replacement results\nin a more complex expression than before:\n\n  (if_then_else (ne (zero_extract (reg) (1) (31))) (2) (0))\n\nSimilar replacements are done for\n\n  (signextend (and ...))\n  (zeroextend (and ...))\n\nSuppress the replacement this special case in if_then_else_cond().\n\ngcc/ChangeLog:\n\n2016-12-02  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\t* combine.c (combine_simplify_rtx):  Suppress replacement of\n\t\"(and (reg) (const_int bit))\" with \"if_then_else\".\n\nFrom-SVN: r243162", "tree": {"sha": "ddc0071ca81fc7ce09f2f6ea86ba05f4df56fc4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddc0071ca81fc7ce09f2f6ea86ba05f4df56fc4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32ff7e39c15206dada1406bdc06e18db9e02d248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ff7e39c15206dada1406bdc06e18db9e02d248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ff7e39c15206dada1406bdc06e18db9e02d248", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ff7e39c15206dada1406bdc06e18db9e02d248/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bba13c0c4359649687894823900e091576cbc2e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba13c0c4359649687894823900e091576cbc2e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bba13c0c4359649687894823900e091576cbc2e6"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "a3fcd8b6d0b0c7b1cff9994063ab0ef72a7e6120", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ff7e39c15206dada1406bdc06e18db9e02d248/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ff7e39c15206dada1406bdc06e18db9e02d248/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32ff7e39c15206dada1406bdc06e18db9e02d248", "patch": "@@ -1,3 +1,8 @@\n+2016-12-02  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* combine.c (combine_simplify_rtx):  Suppress replacement of\n+\t\"(and (reg) (const_int bit))\" with \"if_then_else\".\n+\n 2016-12-02  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \tPR target/77822"}, {"sha": "7ba634af532a6f5ec210b71a0bd4adc890bf044e", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ff7e39c15206dada1406bdc06e18db9e02d248/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ff7e39c15206dada1406bdc06e18db9e02d248/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=32ff7e39c15206dada1406bdc06e18db9e02d248", "patch": "@@ -5602,6 +5602,18 @@ combine_simplify_rtx (rtx x, machine_mode op0_mode, int in_dest,\n \t\t     && OBJECT_P (SUBREG_REG (XEXP (x, 0)))))))\n     {\n       rtx cond, true_rtx, false_rtx;\n+      unsigned HOST_WIDE_INT nz;\n+\n+      /* If the operation is an AND wrapped in a SIGN_EXTEND or ZERO_EXTEND with\n+\t either operand being just a constant single bit value, do nothing since\n+\t IF_THEN_ELSE is likely to increase the expression's complexity.  */\n+      if (HWI_COMPUTABLE_MODE_P (mode)\n+\t  && pow2p_hwi (nz = nonzero_bits (x, mode))\n+\t  && ! ((code == SIGN_EXTEND || code == ZERO_EXTEND)\n+\t\t&& GET_CODE (XEXP (x, 0)) == AND\n+\t\t&& CONST_INT_P (XEXP (XEXP (x, 0), 0))\n+\t\t&& UINTVAL (XEXP (XEXP (x, 0), 0)) == nz))\n+\t      return x;\n \n       cond = if_then_else_cond (x, &true_rtx, &false_rtx);\n       if (cond != 0"}]}