{"sha": "c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVlMWY2NmU1OWY2NjA4M2Q5YmM0MjI5NzIxYWFhZThkMzIwYzhkYw==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-07-24T14:41:49Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-07-24T14:41:49Z"}, "message": "[AArch64] Optimize prologue when there is no frame pointer.\n\nFrom-SVN: r212999", "tree": {"sha": "6e3f6e1bdbb3e244a4ca41941a6210dfaa4fa5ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e3f6e1bdbb3e244a4ca41941a6210dfaa4fa5ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/comments", "author": null, "committer": null, "parents": [{"sha": "ae13fce333f73741790fef665546290509220093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae13fce333f73741790fef665546290509220093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae13fce333f73741790fef665546290509220093"}], "stats": {"total": 113, "additions": 91, "deletions": 22}, "files": [{"sha": "cf3a2d93656a2be18d062f5c2ffa778801d78d8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "patch": "@@ -1,3 +1,8 @@\n+2014-07-24  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_pushwb_single_reg): New function.\n+\t(aarch64_expand_prologue): Optimize prologue when !frame_pointer_needed.\n+\n 2014-07-24  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_restore_callee_saves)"}, {"sha": "76e602749100ef204d8b93c2edb8bf198ce3759d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "patch": "@@ -1930,6 +1930,22 @@ aarch64_next_callee_save (unsigned regno, unsigned limit)\n   return regno;\n }\n \n+static void\n+aarch64_pushwb_single_reg (enum machine_mode mode, unsigned regno,\n+\t\t\t   HOST_WIDE_INT adjustment)\n+ {\n+  rtx base_rtx = stack_pointer_rtx;\n+  rtx insn, reg, mem;\n+\n+  reg = gen_rtx_REG (mode, regno);\n+  mem = gen_rtx_PRE_MODIFY (Pmode, base_rtx,\n+\t\t\t    plus_constant (Pmode, base_rtx, -adjustment));\n+  mem = gen_rtx_MEM (mode, mem);\n+\n+  insn = emit_move_insn (mem, reg);\n+  RTX_FRAME_RELATED_P (insn) = 1;\n+}\n+\n static rtx\n aarch64_gen_storewb_pair (enum machine_mode mode, rtx base, rtx reg, rtx reg2,\n \t\t\t  HOST_WIDE_INT adjustment)\n@@ -2279,24 +2295,22 @@ aarch64_expand_prologue (void)\n     {\n       bool skip_wb = false;\n \n-      /* Save the frame pointer and lr if the frame pointer is needed\n-\t first.  Make the frame pointer point to the location of the\n-\t old frame pointer on the stack.  */\n       if (frame_pointer_needed)\n \t{\n+\t  skip_wb = true;\n+\n \t  if (fp_offset)\n \t    {\n \t      insn = emit_insn (gen_add2_insn (stack_pointer_rtx,\n \t\t\t\t\t       GEN_INT (-offset)));\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \t      aarch64_set_frame_expr (gen_rtx_SET\n \t\t\t\t      (Pmode, stack_pointer_rtx,\n-\t\t\t\t       gen_rtx_MINUS (Pmode,\n-\t\t\t\t\t\t      stack_pointer_rtx,\n+\t\t\t\t       gen_rtx_MINUS (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t      GEN_INT (offset))));\n \n \t      aarch64_save_callee_saves (DImode, fp_offset, R29_REGNUM,\n-\t\t\t\t\t R30_REGNUM, skip_wb);\n+\t\t\t\t\t R30_REGNUM, false);\n \t    }\n \t  else\n \t    aarch64_pushwb_pair_reg (DImode, R29_REGNUM, R30_REGNUM, offset);\n@@ -2314,20 +2328,36 @@ aarch64_expand_prologue (void)\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t  insn = emit_insn (gen_stack_tie (stack_pointer_rtx,\n \t\t\t\t\t   hard_frame_pointer_rtx));\n-\n-\t  aarch64_save_callee_saves (DImode, fp_offset, R0_REGNUM, R28_REGNUM,\n-\t\t\t\t     skip_wb);\n \t}\n       else\n \t{\n-\t  insn = emit_insn (gen_add2_insn (stack_pointer_rtx,\n-\t\t\t\t\t   GEN_INT (-offset)));\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t  unsigned reg1 = cfun->machine->frame.wb_candidate1;\n+\t  unsigned reg2 = cfun->machine->frame.wb_candidate2;\n \n-\t  aarch64_save_callee_saves (DImode, fp_offset, R0_REGNUM, R30_REGNUM,\n-\t\t\t\t     skip_wb);\n+\t  if (fp_offset\n+\t      || reg1 == FIRST_PSEUDO_REGISTER\n+\t      || (reg2 == FIRST_PSEUDO_REGISTER\n+\t\t  && offset >= 256))\n+\t    {\n+\t      insn = emit_insn (gen_add2_insn (stack_pointer_rtx,\n+\t\t\t\t\t       GEN_INT (-offset)));\n+\t      RTX_FRAME_RELATED_P (insn) = 1;\n+\t    }\n+\t  else\n+\t    {\n+\t      enum machine_mode mode1 = (reg1 <= R30_REGNUM) ? DImode : DFmode;\n+\n+\t      skip_wb = true;\n+\n+\t      if (reg2 == FIRST_PSEUDO_REGISTER)\n+\t\taarch64_pushwb_single_reg (mode1, reg1, offset);\n+\t      else\n+\t\taarch64_pushwb_pair_reg (mode1, reg1, reg2, offset);\n+\t    }\n \t}\n \n+      aarch64_save_callee_saves (DImode, fp_offset, R0_REGNUM, R30_REGNUM,\n+\t\t\t\t skip_wb);\n       aarch64_save_callee_saves (DFmode, fp_offset, V0_REGNUM, V31_REGNUM,\n \t\t\t\t skip_wb);\n     }"}, {"sha": "901343c59f036f86e18fd1d17cf4acb102e81fee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "patch": "@@ -1,3 +1,15 @@\n+2014-07-24  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/test_frame_1.c: Match optimized instruction\n+\tsequences.\n+\t* gcc.target/aarch64/test_frame_10.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_2.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_4.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_6.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_7.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_8.c: Likewise.\n+\t* gcc.target/aarch64/test_fp_attribute_1.c: Likewise.\n+\n 2014-07-24  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/61160"}, {"sha": "960174a5e202a612d89ab94f96f00d1140596f4e", "filename": "gcc/testsuite/gcc.target/aarch64/test_fp_attribute_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_fp_attribute_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_fp_attribute_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_fp_attribute_1.c?ref=c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "patch": "@@ -21,6 +21,6 @@ non_leaf_2 (void)\n   leaf ();\n }\n \n-/* { dg-final { scan-assembler-times \"str\\tx30, \\\\\\[sp\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"str\\tx30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n \n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e9d04aacf632121622e94b0376c8ba5f580c2fc4", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_1.c?ref=c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "patch": "@@ -6,9 +6,12 @@\n      * optimized code should use \"str !\" for stack adjustment.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer --save-temps\" } */\n \n #include \"test_frame_common.h\"\n \n t_frame_pattern (test1, 200, )\n t_frame_run (test1)\n+\n+/* { dg-final { scan-assembler-times \"str\\tx30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b646a7156cb27888ae2d38074cd6fb68984d02d5", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_10.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_10.c?ref=c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "patch": "@@ -8,9 +8,12 @@\n        the first subtractions could be optimized into \"stp !\".  */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer --save-temps\" } */\n \n #include \"test_frame_common.h\"\n \n t_frame_pattern_outgoing (test10, 480, \"x19\", 24, a[8], a[9], a[10])\n t_frame_run (test10)\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx19, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b972664354595aae119a8d96e2d4c8cb1f169418", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_2.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_2.c?ref=c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "patch": "@@ -6,9 +6,13 @@\n      * optimized code should use \"stp !\" for stack adjustment.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer --save-temps\" } */\n \n #include \"test_frame_common.h\"\n \n t_frame_pattern (test2, 200, \"x19\")\n t_frame_run (test2)\n+\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx19, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5a9a919b7f9fef7c37e12e40fa0116c8eccf07e3", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_4.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_4.c?ref=c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "patch": "@@ -6,9 +6,12 @@\n      * we can use \"stp !\" to optimize stack adjustment.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer --save-temps\" } */\n \n #include \"test_frame_common.h\"\n \n t_frame_pattern (test4, 400, \"x19\")\n t_frame_run (test4)\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx19, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6056f57c011d01f697ac35989518041da1607170", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_6.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_6.c?ref=c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "patch": "@@ -7,9 +7,12 @@\n        the second subtraction should use \"str !\".  */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer --save-temps\" } */\n \n #include \"test_frame_common.h\"\n \n t_frame_pattern (test6, 700, )\n t_frame_run (test6)\n+\n+/* { dg-final { scan-assembler-times \"str\\tx30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "991860c759bf5d25ab55d07d7444d25ce024cd84", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_7.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_7.c?ref=c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "patch": "@@ -7,9 +7,12 @@\n        the second subtraction should use \"stp !\".  */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer --save-temps\" } */\n \n #include \"test_frame_common.h\"\n \n t_frame_pattern (test7, 700, \"x19\")\n t_frame_run (test7)\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx19, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4a4d93bba2afa519cc42b76385b29bf41d064d88", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_8.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1f66e59f66083d9bc4229721aaae8d320c8dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_8.c?ref=c5e1f66e59f66083d9bc4229721aaae8d320c8dc", "patch": "@@ -5,9 +5,12 @@\n      * number of callee-saved reg == 1.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer --save-temps\" } */\n \n #include \"test_frame_common.h\"\n \n t_frame_pattern_outgoing (test8, 700, , 8, a[8])\n t_frame_run (test8)\n+\n+/* { dg-final { scan-assembler-times \"str\\tx30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 3 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}