{"sha": "38aee22c7d66666c19ffd58e338fed0b3a312e7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhhZWUyMmM3ZDY2NjY2YzE5ZmZkNThlMzM4ZmVkMGIzYTMxMmU3Yg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-10-03T20:23:13Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-10-03T20:23:13Z"}, "message": "shared_ptr.cc (mask, [...]): Move declaration...\n\n2016-10-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* src/c++11/shared_ptr.cc (mask, invalid, get_mutex): Move\n\tdeclaration...\n\t* src/c++11/mutex_pool.h: ... here. New.\n\t* src/c++11/debug.cc: Use latter.\n\nFrom-SVN: r240732", "tree": {"sha": "3bbaae40c7da6041bfd69e60f433ce9a7dd57b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bbaae40c7da6041bfd69e60f433ce9a7dd57b4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38aee22c7d66666c19ffd58e338fed0b3a312e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38aee22c7d66666c19ffd58e338fed0b3a312e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38aee22c7d66666c19ffd58e338fed0b3a312e7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38aee22c7d66666c19ffd58e338fed0b3a312e7b/comments", "author": null, "committer": null, "parents": [{"sha": "ac4f79dde40869b71eaad33cad91e9e95aeb2319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac4f79dde40869b71eaad33cad91e9e95aeb2319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac4f79dde40869b71eaad33cad91e9e95aeb2319"}], "stats": {"total": 101, "additions": 72, "deletions": 29}, "files": [{"sha": "65637dc907168f4f437be790751c3c9143e444d5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38aee22c7d66666c19ffd58e338fed0b3a312e7b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38aee22c7d66666c19ffd58e338fed0b3a312e7b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=38aee22c7d66666c19ffd58e338fed0b3a312e7b", "patch": "@@ -1,3 +1,10 @@\n+2016-10-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* src/c++11/shared_ptr.cc (mask, invalid, get_mutex): Move\n+\tdeclaration...\n+\t* src/c++11/mutex_pool.h: ... here. New.\n+\t* src/c++11/debug.cc: Use latter.\n+\n 2016-10-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Update gcd/lcm status."}, {"sha": "0e24d0140dcda4b10c6d997b5f70693055f0ddc3", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38aee22c7d66666c19ffd58e338fed0b3a312e7b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38aee22c7d66666c19ffd58e338fed0b3a312e7b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=38aee22c7d66666c19ffd58e338fed0b3a312e7b", "patch": "@@ -40,6 +40,8 @@\n \n #include <cxxabi.h> // for __cxa_demangle\n \n+#include \"mutex_pool.h\"\n+\n using namespace std;\n \n namespace\n@@ -50,15 +52,13 @@ namespace\n   __gnu_cxx::__mutex&\n   get_safe_base_mutex(void* address)\n   {\n-    const size_t mask = 0xf;\n-    static __gnu_cxx::__mutex safe_base_mutex[mask + 1];\n-\n     // Use arbitrarily __gnu_debug::vector<int> as the container giving\n     // alignment of debug containers.\n     const auto alignbits = __builtin_ctz(alignof(__gnu_debug::vector<int>));\n-    const size_t index\n-      = (reinterpret_cast<std::size_t>(address) >> alignbits) & mask;\n-    return safe_base_mutex[index];\n+    const unsigned char index\n+      = (reinterpret_cast<std::size_t>(address) >> alignbits)\n+      & __gnu_internal::mask;\n+    return __gnu_internal::get_mutex(index);\n   }\n \n   void"}, {"sha": "0addc75bb60ea43cb0b846f36258a97aef0c952b", "filename": "libstdc++-v3/src/c++11/mutex_pool.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38aee22c7d66666c19ffd58e338fed0b3a312e7b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fmutex_pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38aee22c7d66666c19ffd58e338fed0b3a312e7b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fmutex_pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fmutex_pool.h?ref=38aee22c7d66666c19ffd58e338fed0b3a312e7b", "patch": "@@ -0,0 +1,34 @@\n+// Mutex pool used to limit contention -*- C++ -*-\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+namespace __gnu_internal _GLIBCXX_VISIBILITY(hidden)\n+{\n+  const unsigned char mask = 0xf;\n+  const unsigned char invalid = mask + 1;\n+\n+  /* Returns different instances of __mutex depending on the passed index\n+   * in order to limit contention.\n+   */\n+  __gnu_cxx::__mutex& get_mutex(unsigned char i);\n+}"}, {"sha": "9028040f72d9421c2d9f796fc3da526284c0b25c", "filename": "libstdc++-v3/src/c++11/shared_ptr.cc", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38aee22c7d66666c19ffd58e338fed0b3a312e7b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fshared_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38aee22c7d66666c19ffd58e338fed0b3a312e7b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fshared_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fshared_ptr.cc?ref=38aee22c7d66666c19ffd58e338fed0b3a312e7b", "patch": "@@ -24,6 +24,21 @@\n \n #include <memory>\n \n+#include \"mutex_pool.h\"\n+\n+namespace __gnu_internal _GLIBCXX_VISIBILITY(hidden)\n+{\n+  /* Returns different instances of __mutex depending on the passed index\n+   * in order to limit contention.\n+   */\n+  __gnu_cxx::__mutex&\n+  get_mutex(unsigned char i)\n+  {\n+    static __gnu_cxx::__mutex m[mask + 1];\n+    return m[i];\n+  }\n+}\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -37,32 +52,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef __GTHREADS\n   namespace\n   {\n-    const unsigned char mask = 0xf;\n-    const unsigned char invalid = mask + 1;\n-\n     inline unsigned char key(const void* addr)\n-    { return _Hash_impl::hash(addr) & mask; }\n-\n-    /* Returns different instances of __mutex depending on the passed address\n-     * in order to limit contention.\n-     */\n-    __gnu_cxx::__mutex&\n-    get_mutex(unsigned char i)\n-    {\n-      static __gnu_cxx::__mutex m[mask + 1];\n-      return m[i];\n-    }\n+    { return _Hash_impl::hash(addr) & __gnu_internal::mask; }\n   }\n \n   _Sp_locker::_Sp_locker(const void* p)\n   {\n     if (__gthread_active_p())\n       {\n \t_M_key1 = _M_key2 = key(p);\n-\tget_mutex(_M_key1).lock();\n+        __gnu_internal::get_mutex(_M_key1).lock();\n       }\n     else\n-      _M_key1 = _M_key2 = invalid;\n+      _M_key1 = _M_key2 = __gnu_internal::invalid;\n   }\n \n   _Sp_locker::_Sp_locker(const void* p1, const void* p2)\n@@ -72,22 +74,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_key1 = key(p1);\n \t_M_key2 = key(p2);\n \tif (_M_key2 < _M_key1)\n-\t  get_mutex(_M_key2).lock();\n-\tget_mutex(_M_key1).lock();\n+\t  __gnu_internal::get_mutex(_M_key2).lock();\n+\t__gnu_internal::get_mutex(_M_key1).lock();\n \tif (_M_key2 > _M_key1)\n-\t  get_mutex(_M_key2).lock();\n+\t  __gnu_internal::get_mutex(_M_key2).lock();\n       }\n     else\n-      _M_key1 = _M_key2 = invalid;\n+      _M_key1 = _M_key2 = __gnu_internal::invalid;\n   }\n \n   _Sp_locker::~_Sp_locker()\n   {\n-    if (_M_key1 != invalid)\n+    if (_M_key1 != __gnu_internal::invalid)\n       {\n-\tget_mutex(_M_key1).unlock();\n+\t__gnu_internal::get_mutex(_M_key1).unlock();\n \tif (_M_key2 != _M_key1)\n-\t  get_mutex(_M_key2).unlock();\n+\t  __gnu_internal::get_mutex(_M_key2).unlock();\n       }\n   }\n #endif"}]}