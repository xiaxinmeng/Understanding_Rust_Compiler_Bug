{"sha": "4b7091eb623ae501ec646b47f26e84b783043f47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI3MDkxZWI2MjNhZTUwMWVjNjQ2YjQ3ZjI2ZTg0Yjc4MzA0M2Y0Nw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-08-09T06:19:08Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-08-09T06:19:08Z"}, "message": "Makefile.in (c-opts.o): Update\n\n\t* Makefile.in (c-opts.o): Update\n\t* c-opts.c: Include intl.h.\n\t(print_help): Move from cppinit.c.  Remove unused options.\n\t(COMMAND_LINE_OPTIONS): Move more from cppinit.c.\n\t(missing_arg): Complain for switches without an argument.\n\t(c_common_decode_option): Reject missing joined arguments.\n\tHandle new switches from cppinit.c.\n\t* cppinit.c (COMMAND_LINE_OPTIONS): Move some switches to c-opts.c.\n\t(cpp_handle_option): Similarly.\n\t(print_help): Moved to c-opts.c.\n\t* cpplib.h (struct cpp_options): Remove help_only.\n\t* gcc.c (cpp_unique_options): Remove -$.\n\t* doc/cppopts.texi: Undocument -h.\n\nFrom-SVN: r56155", "tree": {"sha": "2d216c719998f5bc9a35df885c61ae8b14a03fbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d216c719998f5bc9a35df885c61ae8b14a03fbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b7091eb623ae501ec646b47f26e84b783043f47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7091eb623ae501ec646b47f26e84b783043f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7091eb623ae501ec646b47f26e84b783043f47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7091eb623ae501ec646b47f26e84b783043f47/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f45f9aedfceba18063fe5e8f55ff21cd3239b5b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45f9aedfceba18063fe5e8f55ff21cd3239b5b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45f9aedfceba18063fe5e8f55ff21cd3239b5b2"}], "stats": {"total": 490, "additions": 248, "deletions": 242}, "files": [{"sha": "13f43d82e3c04d95b87fd5ba0125d0b96e8ca854", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b7091eb623ae501ec646b47f26e84b783043f47", "patch": "@@ -1,3 +1,19 @@\n+2002-08-09  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Makefile.in (c-opts.o): Update\n+\t* c-opts.c: Include intl.h.\n+\t(print_help): Move from cppinit.c.  Remove unused options.\n+\t(COMMAND_LINE_OPTIONS): Move more from cppinit.c.\n+\t(missing_arg): Complain for switches without an argument.\n+\t(c_common_decode_option): Reject missing joined arguments.\n+\tHandle new switches from cppinit.c.\n+\t* cppinit.c (COMMAND_LINE_OPTIONS): Move some switches to c-opts.c.\n+\t(cpp_handle_option): Similarly.\n+\t(print_help): Moved to c-opts.c.\n+\t* cpplib.h (struct cpp_options): Remove help_only.\n+\t* gcc.c (cpp_unique_options): Remove -$.\n+\t* doc/cppopts.texi: Undocument -h.\n+\n 2002-08-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.c (legitimate_constant_p): UNSPEC_TP is not"}, {"sha": "c74700707f9dbe1fa8d6163ec8693d666ca14d62", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4b7091eb623ae501ec646b47f26e84b783043f47", "patch": "@@ -1241,7 +1241,8 @@ c-pretty-print.o : c-pretty-print.c c-pretty-print.h pretty-print.h \\\n \t$(C_COMMON_H) $(CONFIG_H) $(SYSTEM_H) real.h\n \n c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_COMMON_H) \\\n-        c-pragma.h flags.h toplev.h langhooks.h tree-inline.h diagnostic.h\n+        c-pragma.h flags.h toplev.h langhooks.h tree-inline.h diagnostic.h \\\n+\tintl.h\n \n # A file used by all variants of C and some other languages.\n "}, {"sha": "9f25343e6885c98abe27f26c0bb22043d592d6c7", "filename": "gcc/c-opts.c", "status": "modified", "additions": 228, "deletions": 47, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=4b7091eb623ae501ec646b47f26e84b783043f47", "patch": "@@ -29,6 +29,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n #include \"tree-inline.h\"\n #include \"diagnostic.h\"\n+#include \"intl.h\"\n \n static cpp_options *cpp_opts;\n \n@@ -37,6 +38,8 @@ static size_t parse_option PARAMS ((const char *, int));\n static void set_Wimplicit PARAMS ((int));\n static void complain_wrong_lang PARAMS ((size_t));\n static void write_langs PARAMS ((char *, int));\n+static void print_help PARAMS ((void));\n+static void handle_OPT_d PARAMS ((const char *));\n \n #define CL_C_ONLY\t(1 << 0) /* Only C.  */\n #define CL_OBJC_ONLY\t(1 << 1) /* Only ObjC.  */\n@@ -68,15 +71,19 @@ static void write_langs PARAMS ((char *, int));\n \n    If you request an argument with CL_JOINED, CL_SEPARATE or their\n    combination CL_ARG, it is stored in the variable \"arg\", which is\n-   guaranteed non-NULL.  It points to the argument either within the\n-   argv[] vector or within one of its strings, and so the text is not\n-   temporary and copies need not be made.\n-\n-   If you use the CL_SEPARATE flag (which is also in CL_ARG) be sure\n-   to add an error message in missing_arg().  */\n+   guaranteed to be non-NULL and to not be an empty string.  It points\n+   to the argument either within the argv[] vector or within one of\n+   that vector's strings, and so the text is permanent and copies need\n+   not be made.  Be sure to add an error message in missing_arg() if\n+   the default is not appropriate.  */\n \n #define COMMAND_LINE_OPTIONS\t\t\t\t\t\t     \\\n+  OPT(\"-help\",                  CL_ALL,   OPT__help)\t\t\t     \\\n+  OPT(\"C\",                      CL_ALL,   OPT_C)\t\t\t     \\\n+  OPT(\"CC\",                     CL_ALL,   OPT_CC)\t\t\t     \\\n   OPT(\"E\",\t\t\tCL_ALL,   OPT_E)\t\t\t     \\\n+  OPT(\"H\",                      CL_ALL,   OPT_H)\t\t\t     \\\n+  OPT(\"P\",                      CL_ALL,   OPT_P)\t\t\t     \\\n   OPT(\"Wall\",\t\t\tCL_ALL,   OPT_Wall)\t\t\t     \\\n   OPT(\"Wbad-function-cast\",\tCL_C,     OPT_Wbad_function_cast)\t     \\\n   OPT(\"Wcast-qual\",\t\tCL_ALL,   OPT_Wcast_qual)\t\t     \\\n@@ -138,6 +145,7 @@ static void write_langs PARAMS ((char *, int));\n   OPT(\"Wunused-macros\",\t\tCL_ALL,   OPT_Wunused_macros)\t\t     \\\n   OPT(\"Wwrite-strings\",\t\tCL_ALL,   OPT_Wwrite_strings)\t\t     \\\n   OPT(\"ansi\",\t\t\tCL_ALL,   OPT_ansi)\t\t\t     \\\n+  OPT(\"d\",                      CL_ALL | CL_JOINED, OPT_d)\t\t     \\\n   OPT(\"faccess-control\",\tCL_CXX,   OPT_faccess_control)\t\t     \\\n   OPT(\"fall-virtual\",\t\tCL_CXX,   OPT_fall_virtual)\t\t     \\\n   OPT(\"falt-external-templates\",CL_CXX,   OPT_falt_external_templates)\t     \\\n@@ -191,7 +199,7 @@ static void write_langs PARAMS ((char *, int));\n   OPT(\"fsquangle\",\t\tCL_CXX,   OPT_fsquangle)\t\t     \\\n   OPT(\"fstats\",\t\t\tCL_CXX,   OPT_fstats)\t\t\t     \\\n   OPT(\"fstrict-prototype\",\tCL_CXX,   OPT_fstrict_prototype)\t     \\\n-  OPT(\"ftabstop=\",              CL_ALL | CL_JOINED,   OPT_ftabstop)\t     \\\n+  OPT(\"ftabstop=\",              CL_ALL | CL_JOINED, OPT_ftabstop)\t     \\\n   OPT(\"ftemplate-depth-\",\tCL_CXX | CL_JOINED, OPT_ftemplate_depth)     \\\n   OPT(\"fthis-is-variable\",\tCL_CXX,   OPT_fthis_is_variable)\t     \\\n   OPT(\"funsigned-bitfields\",\tCL_ALL,   OPT_funsigned_bitfields)\t     \\\n@@ -202,6 +210,8 @@ static void write_langs PARAMS ((char *, int));\n   OPT(\"fweak\",\t\t\tCL_CXX,   OPT_fweak)\t\t\t     \\\n   OPT(\"fxref\",\t\t\tCL_CXX,   OPT_fxref)\t\t\t     \\\n   OPT(\"gen-decls\",\t\tCL_OBJC,  OPT_gen_decls)\t\t     \\\n+  OPT(\"nostdinc\",               CL_ALL,   OPT_nostdinc)\t\t\t     \\\n+  OPT(\"nostdinc++\",             CL_ALL,   OPT_nostdincplusplus)\t\t     \\\n   OPT(\"pedantic\",\t\tCL_ALL,   OPT_pedantic)\t\t\t     \\\n   OPT(\"pedantic-errors\",\tCL_ALL,   OPT_pedantic_errors)\t\t     \\\n   OPT(\"print-objc-runtime-info\", CL_OBJC, OPT_print_objc_runtime_info)\t     \\\n@@ -217,7 +227,11 @@ static void write_langs PARAMS ((char *, int));\n   OPT(\"std=iso9899:199409\",\tCL_C,     OPT_std_iso9899_199409)\t     \\\n   OPT(\"std=iso9899:1999\",\tCL_C,     OPT_std_iso9899_1999)\t\t     \\\n   OPT(\"std=iso9899:199x\",\tCL_C,     OPT_std_iso9899_199x)\t\t     \\\n-  OPT(\"undef\",\t\t\tCL_ALL,   OPT_undef)\n+  OPT(\"traditional-cpp\",\tCL_ALL,   OPT_traditional_cpp)\t\t     \\\n+  OPT(\"trigraphs\",              CL_ALL,   OPT_trigraphs)\t\t     \\\n+  OPT(\"undef\",\t\t\tCL_ALL,   OPT_undef)\t\t\t     \\\n+  OPT(\"v\",                      CL_ALL,      OPT_v)\t\t\t     \\\n+  OPT(\"w\",                      CL_ALL,      OPT_w)\n \n #define OPT(text, flags, code) code,\n enum opt_code\n@@ -260,6 +274,32 @@ opt_comp (p1, p2)\n }\n #endif\n \n+/* Complain that switch OPT_INDEX expects an argument but none was\n+   provided.  */\n+static void\n+missing_arg (opt_index)\n+     size_t opt_index;\n+{\n+  switch (opt_index)\n+    {\n+    case OPT_Wformat_eq:\n+    case OPT_d:\n+    case OPT_fbuiltin_:\n+    case OPT_fdump:\n+    case OPT_fname_mangling:\n+    case OPT_ftabstop:\n+    case OPT_ftemplate_depth:\n+    case OPT_std_bad:\n+    default:\n+      error (\"missing argument to \\\"-%s\\\"\", cl_options[opt_index].opt_text);\n+      break;\n+\n+    case OPT_fconstant_string_class:\n+      error (\"no class name specified with -fconstant-string-class=\");\n+      break;\n+    }\n+}\n+\n /* Perform a binary search to find which option the command-line INPUT\n    matches.  Returns its index in the option array, and N_OPTS on\n    failure.\n@@ -431,6 +471,8 @@ c_common_decode_option (argc, argv)\n   opt_index = parse_option (opt + 1, lang_flag);\n   if (opt_index == N_OPTS)\n     goto done;\n+\n+  result = 1;\n   option = &cl_options[opt_index];\n \n   /* Sort out any argument the switch takes.  */\n@@ -444,32 +486,54 @@ c_common_decode_option (argc, argv)\n \t  arg = argv[0] + cl_options[opt_index].opt_len + 1;\n \t  if (!on)\n \t    arg += strlen (\"no-\");\n-\t  if (*arg == '\\0' && (option->flags & CL_SEPARATE))\n-\t    arg = 0;\n \t}\n \n-      /* If arg is still 0, we can only be a CL_SEPARATE switch.  */\n-      if (arg == 0)\n+      /* If we don't have an argument, and CL_SEPARATE, try the next\n+\t argument in the vector.  */\n+      if (!arg || (*arg == '\\0' && option->flags & CL_SEPARATE))\n \t{\n \t  arg = argv[1];\n-\t  if (!arg)\n-\t    {\n-\t      missing_arg (opt_index);\n-\t      result = argc;\n-\t      goto done;\n-\t    }\n+\t  result = 2;\n+\t}\n+\n+      if (!arg || *arg == '\\0')\n+\t{\n+\t  missing_arg (opt_index);\n+\t  result = argc;\n+\t  goto done;\n \t}\n     }\n \n-  switch (code = cl_options[opt_index].opt_code)\n+  switch (code = option->opt_code)\n     {\n     case N_OPTS: /* Shut GCC up.  */\n       break;\n \n+    case OPT__help:\n+      print_help ();\n+      break;\n+\n+    case OPT_C:\n+      cpp_opts->discard_comments = 0;\n+      break;\n+\n+    case OPT_CC:\n+      cpp_opts->discard_comments = 0;\n+      cpp_opts->discard_comments_in_macro_exp = 0;\n+      break;\n+\n     case OPT_E:\n       flag_preprocess_only = 1;\n       break;\n \n+    case OPT_H:\n+      cpp_opts->print_include_names = 1;\n+      break;\n+\n+    case OPT_P:\n+      cpp_opts->no_line_commands = 1;\n+      break;\n+\n     case OPT_Wall:\n       set_Wunused (on);\n       set_Wformat (on);\n@@ -558,11 +622,9 @@ c_common_decode_option (argc, argv)\n \n     case OPT_Werror_implicit_function_decl:\n       if (!on)\n-\t{\n-\t  result = 0;\n-\t  goto done;\n-\t}\n-      mesg_implicit_function_declaration = 2;\n+\tresult = 0;\n+      else\n+\tmesg_implicit_function_declaration = 2;\n       break;\n \n     case OPT_Wfloat_equal:\n@@ -757,6 +819,10 @@ c_common_decode_option (argc, argv)\n \twarn_write_strings = on;\n       break;\n \n+    case OPT_d:\n+      handle_OPT_d (arg);\n+      break;\n+\n     case OPT_fcond_mismatch:\n       if (c_language == clk_c || c_language == clk_objective_c)\n \t{\n@@ -804,11 +870,9 @@ c_common_decode_option (argc, argv)\n \n     case OPT_fbuiltin_:\n       if (on)\n-\t{\n-\t  result = 0;\n-\t  goto done;\n-\t}\n-      disable_builtin_function (arg);\n+\tresult = 0;\n+      else\n+\tdisable_builtin_function (arg);\n       break;\n \n     case OPT_fdollars_in_identifiers:\n@@ -817,10 +881,7 @@ c_common_decode_option (argc, argv)\n \n     case OPT_fdump:\n       if (!on || !dump_switch_p (argv[0] + strlen (\"-f\")))\n-\t{\n-\t  result = 0;\n-\t  goto done;\n-\t}\n+\tresult = 0;\n       break;\n \n     case OPT_ffreestanding:\n@@ -877,10 +938,7 @@ c_common_decode_option (argc, argv)\n       break;\n \n     case OPT_fconstant_string_class:\n-      if (*arg == 0)\n-\terror (\"no class name specified with -fconstant-string-class=\");\n-      else\n-\tconstant_string_class_name = arg;\n+      constant_string_class_name = arg;\n       break;\n \n     case OPT_fdefault_inline:\n@@ -980,7 +1038,6 @@ c_common_decode_option (argc, argv)\n \treturn 0;\n \n       /* It is documented that we silently ignore silly values.  */\n-      if (*arg)\n \t{\n \t  char *endptr;\n \t  long tabstop = strtol (arg, &endptr, 10);\n@@ -1009,6 +1066,17 @@ c_common_decode_option (argc, argv)\n       flag_gen_declaration = 1;\n       break;\n \n+    case OPT_nostdinc:\n+      /* No default include directories.  You must specify all\n+\t include-file directories with -I.  */\n+      cpp_opts->no_standard_includes = 1;\n+      break;\n+\n+    case OPT_nostdincplusplus:\n+      /* No default C++-specific include directories.  */\n+      cpp_opts->no_standard_cplusplus_includes = 1;\n+      break;\n+\n       /* We need to handle the -pedantic switches here, rather than in\n \t c_common_post_options, so that a subsequent -Wno-endif-labels\n \t is not overridden.  */\n@@ -1091,12 +1159,26 @@ c_common_decode_option (argc, argv)\n       flag_isoc94 = 1;\n       break;\n \n+    case OPT_trigraphs:\n+      cpp_opts->trigraphs = 1;\n+      break;\n+\n+    case OPT_traditional_cpp:\n+      cpp_opts->traditional = 1;\n+      break;\n+\n     case OPT_undef:\n       flag_undef = 1;\n       break;\n-    }\n \n-  result = 1 + (arg == argv[1]);\n+    case OPT_w:\n+      cpp_opts->inhibit_warnings = 1;\n+      break;\n+\n+    case OPT_v:\n+      cpp_opts->verbose = 1;\n+      break;\n+    }\n \n  done:\n   if (dup)\n@@ -1167,15 +1249,33 @@ set_Wimplicit (on)\n     mesg_implicit_function_declaration = 0;\n }\n \n-/* Complain that switch OPT_INDEX expects an argument but none was\n-   provided.  This is currenlty unused, as the C front ends have no\n-   switches that take separate arguments.  Will be used when cpplib's\n-   switches are integrated.  */\n+/* Args to -d specify what to dump.  Silently ignore\n+   unrecognised options; they may be aimed at toplev.c.  */\n static void\n-missing_arg (opt_index)\n-     size_t opt_index ATTRIBUTE_UNUSED;\n+handle_OPT_d (arg)\n+     const char *arg;\n {\n-  abort ();\n+  char c;\n+\n+  while ((c = *arg++) != '\\0')\n+    switch (c)\n+      {\n+      case 'M':\n+\tcpp_opts->dump_macros = dump_only;\n+\tbreak;\n+\n+      case 'N':\n+\tcpp_opts->dump_macros = dump_names;\n+\tbreak;\n+\n+      case 'D':\n+\tcpp_opts->dump_macros = dump_definitions;\n+\tbreak;\n+\n+      case 'I':\n+\tcpp_opts->dump_includes = 1;\n+\tbreak;\n+      }\n }\n \n /* Write a slash-separated list of languages in FLAGS to BUF.  */\n@@ -1214,3 +1314,84 @@ complain_wrong_lang (opt_index)\n   warning (\"\\\"-%s\\\" is valid for %s but not for %s\",\n \t   cl_options[opt_index].opt_text, ok_langs, bad_langs);\n }\n+\n+/* Handle --help output.  */\n+static void\n+print_help ()\n+{\n+  /* To keep the lines from getting too long for some compilers, limit\n+     to about 500 characters (6 lines) per chunk.  */\n+  fputs (_(\"\\\n+Switches:\\n\\\n+  -include <file>           Include the contents of <file> before other files\\n\\\n+  -imacros <file>           Accept definition of macros in <file>\\n\\\n+  -iprefix <path>           Specify <path> as a prefix for next two options\\n\\\n+  -iwithprefix <dir>        Add <dir> to the end of the system include path\\n\\\n+  -iwithprefixbefore <dir>  Add <dir> to the end of the main include path\\n\\\n+  -isystem <dir>            Add <dir> to the start of the system include path\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n+  -idirafter <dir>          Add <dir> to the end of the system include path\\n\\\n+  -I <dir>                  Add <dir> to the end of the main include path\\n\\\n+  -I-                       Fine-grained include path control; see info docs\\n\\\n+  -nostdinc                 Do not search system include directories\\n\\\n+                             (dirs specified with -isystem will still be used)\\n\\\n+  -nostdinc++               Do not search system include directories for C++\\n\\\n+  -o <file>                 Put output into <file>\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n+  -trigraphs                Support ISO C trigraphs\\n\\\n+  -std=<std name>           Specify the conformance standard; one of:\\n\\\n+                            gnu89, gnu99, c89, c99, iso9899:1990,\\n\\\n+                            iso9899:199409, iso9899:1999, c++98\\n\\\n+  -w                        Inhibit warning messages\\n\\\n+  -W[no-]trigraphs          Warn if trigraphs are encountered\\n\\\n+  -W[no-]comment{s}         Warn if one comment starts inside another\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n+  -W[no-]traditional        Warn about features not present in traditional C\\n\\\n+  -W[no-]undef              Warn if an undefined macro is used by #if\\n\\\n+  -W[no-]import             Warn about the use of the #import directive\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n+  -W[no-]error              Treat all warnings as errors\\n\\\n+  -W[no-]system-headers     Do not suppress warnings from system headers\\n\\\n+  -W[no-]all                Enable most preprocessor warnings\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n+  -M                        Generate make dependencies\\n\\\n+  -MM                       As -M, but ignore system header files\\n\\\n+  -MD                       Generate make dependencies and compile\\n\\\n+  -MMD                      As -MD, but ignore system header files\\n\\\n+  -MF <file>                Write dependency output to the given file\\n\\\n+  -MG                       Treat missing header file as generated files\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n+  -MP\t\t\t    Generate phony targets for all headers\\n\\\n+  -MQ <target>              Add a MAKE-quoted target\\n\\\n+  -MT <target>              Add an unquoted target\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n+  -D<macro>                 Define a <macro> with string '1' as its value\\n\\\n+  -D<macro>=<val>           Define a <macro> with <val> as its value\\n\\\n+  -A<question>=<answer>     Assert the <answer> to <question>\\n\\\n+  -A-<question>=<answer>    Disable the <answer> to <question>\\n\\\n+  -U<macro>                 Undefine <macro> \\n\\\n+  -v                        Display the version number\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n+  -H                        Print the name of header files as they are used\\n\\\n+  -C                        Do not discard comments\\n\\\n+  -dM                       Display a list of macro definitions active at end\\n\\\n+  -dD                       Preserve macro definitions in output\\n\\\n+  -dN                       As -dD except that only the names are preserved\\n\\\n+  -dI                       Include #include directives in the output\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n+  -f[no-]preprocessed       Treat the input file as already preprocessed\\n\\\n+  -ftabstop=<number>        Distance between tab stops for column reporting\\n\\\n+  -P                        Do not generate #line directives\\n\\\n+  -remap                    Remap file names when including files\\n\\\n+  --help                    Display this information\\n\\\n+\"), stdout);\n+}"}, {"sha": "b7d204c4a1a1eb397836d23d32b8ba6a61b9eb25", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 186, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=4b7091eb623ae501ec646b47f26e84b783043f47", "patch": "@@ -87,7 +87,6 @@ struct cpp_pending\n   } while (0)\n #endif\n \n-static void print_help                  PARAMS ((void));\n static void path_include\t\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t char *, int));\n static void init_library\t\tPARAMS ((void));\n@@ -1136,14 +1135,8 @@ new_pending_directive (pend, text, handler)\n /* This is the list of all command line options, with the leading\n    \"-\" removed.  It must be sorted in ASCII collating order.  */\n #define COMMAND_LINE_OPTIONS                                                  \\\n-  DEF_OPT(\"-help\",                    0,      OPT__help)                      \\\n-  DEF_OPT(\"-target-help\",             0,      OPT_target__help)               \\\n-  DEF_OPT(\"-version\",                 0,      OPT__version)                   \\\n   DEF_OPT(\"A\",                        no_ass, OPT_A)                          \\\n-  DEF_OPT(\"C\",                        0,      OPT_C)                          \\\n-  DEF_OPT(\"CC\",                       0,      OPT_CC)                         \\\n   DEF_OPT(\"D\",                        no_mac, OPT_D)                          \\\n-  DEF_OPT(\"H\",                        0,      OPT_H)                          \\\n   DEF_OPT(\"I\",                        no_dir, OPT_I)                          \\\n   DEF_OPT(\"M\",                        0,      OPT_M)                          \\\n   DEF_OPT(\"MD\",                       no_fil, OPT_MD)                         \\\n@@ -1154,10 +1147,7 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"MP\",                       0,      OPT_MP)                         \\\n   DEF_OPT(\"MQ\",                       no_tgt, OPT_MQ)                         \\\n   DEF_OPT(\"MT\",                       no_tgt, OPT_MT)                         \\\n-  DEF_OPT(\"P\",                        0,      OPT_P)                          \\\n   DEF_OPT(\"U\",                        no_mac, OPT_U)                          \\\n-  DEF_OPT(\"d\",                        no_arg, OPT_d)                          \\\n-  DEF_OPT(\"h\",                        0,      OPT_h)                          \\\n   DEF_OPT(\"idirafter\",                no_dir, OPT_idirafter)                  \\\n   DEF_OPT(\"imacros\",                  no_fil, OPT_imacros)                    \\\n   DEF_OPT(\"include\",                  no_fil, OPT_include)                    \\\n@@ -1170,8 +1160,6 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"lang-c++\",                 0,      OPT_lang_cplusplus)             \\\n   DEF_OPT(\"lang-c89\",                 0,      OPT_lang_c89)                   \\\n   DEF_OPT(\"lang-objc\",                0,      OPT_lang_objc)                  \\\n-  DEF_OPT(\"nostdinc\",                 0,      OPT_nostdinc)                   \\\n-  DEF_OPT(\"nostdinc++\",               0,      OPT_nostdincplusplus)           \\\n   DEF_OPT(\"o\",                        no_fil, OPT_o)                          \\\n   DEF_OPT(\"remap\",                    0,      OPT_remap)                      \\\n   DEF_OPT(\"std=c++98\",                0,      OPT_std_cplusplus98)            \\\n@@ -1184,11 +1172,7 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"std=iso9899:1990\",         0,      OPT_std_iso9899_1990)           \\\n   DEF_OPT(\"std=iso9899:199409\",       0,      OPT_std_iso9899_199409)         \\\n   DEF_OPT(\"std=iso9899:1999\",         0,      OPT_std_iso9899_1999)           \\\n-  DEF_OPT(\"std=iso9899:199x\",         0,      OPT_std_iso9899_199x)           \\\n-  DEF_OPT(\"traditional-cpp\",\t      0,      OPT_traditional_cpp)            \\\n-  DEF_OPT(\"trigraphs\",                0,      OPT_trigraphs)                  \\\n-  DEF_OPT(\"v\",                        0,      OPT_v)                          \\\n-  DEF_OPT(\"w\",                        0,      OPT_w)\n+  DEF_OPT(\"std=iso9899:199x\",         0,      OPT_std_iso9899_199x)\n \n #define DEF_OPT(text, msg, code) code,\n enum opt_code\n@@ -1334,48 +1318,13 @@ cpp_handle_option (pfile, argc, argv)\n \t{\n \tcase N_OPTS: /* Shut GCC up.  */\n \t  break;\n-\tcase OPT_w:\n-\t  CPP_OPTION (pfile, inhibit_warnings) = 1;\n-\t  break;\n-\tcase OPT_h:\n-\tcase OPT__help:\n-\t  print_help ();\n-\t  /* fall through */\n-\tcase OPT_target__help:\n-\tcase OPT__version:\n-\t  /* Nothing to do for these cases, but we need to be sure\n-\t     help_only is set.  */\n-\t  CPP_OPTION (pfile, help_only) = 1;\n-\t  break;\n-\tcase OPT_v:\n-\t  CPP_OPTION (pfile, verbose) = 1;\n-\t  break;\n \n-\tcase OPT_C:\n-\t  CPP_OPTION (pfile, discard_comments) = 0;\n-\t  break;\n-\tcase OPT_CC:\n-\t  CPP_OPTION (pfile, discard_comments) = 0;\n-\t  CPP_OPTION (pfile, discard_comments_in_macro_exp) = 0;\n-\t  break;\n-\tcase OPT_P:\n-\t  CPP_OPTION (pfile, no_line_commands) = 1;\n-\t  break;\n-\tcase OPT_H:\n-\t  CPP_OPTION (pfile, print_include_names) = 1;\n-\t  break;\n \tcase OPT_D:\n \t  new_pending_directive (pend, arg, cpp_define);\n \t  break;\n-\tcase OPT_trigraphs:\n-\t  CPP_OPTION (pfile, trigraphs) = 1;\n-\t  break;\n \tcase OPT_remap:\n \t  CPP_OPTION (pfile, remap) = 1;\n \t  break;\n-\tcase OPT_traditional_cpp:\n-\t  CPP_OPTION (pfile, traditional) = 1;\n-\t  break;\n \tcase OPT_iprefix:\n \t  CPP_OPTION (pfile, include_prefix) = arg;\n \t  CPP_OPTION (pfile, include_prefix_len) = strlen (arg);\n@@ -1416,15 +1365,6 @@ cpp_handle_option (pfile, argc, argv)\n \tcase OPT_std_c99:\n \t  set_lang (pfile, CLK_STDC99);\n \t  break;\n-\tcase OPT_nostdinc:\n-\t  /* -nostdinc causes no default include directories.\n-\t     You must specify all include-file directories with -I.  */\n-\t  CPP_OPTION (pfile, no_standard_includes) = 1;\n-\t  break;\n-\tcase OPT_nostdincplusplus:\n-\t  /* -nostdinc++ causes no default C++-specific include directories.  */\n-\t  CPP_OPTION (pfile, no_standard_cplusplus_includes) = 1;\n-\t  break;\n \tcase OPT_o:\n \t  if (CPP_OPTION (pfile, out_fname) == NULL)\n \t    CPP_OPTION (pfile, out_fname) = arg;\n@@ -1434,31 +1374,6 @@ cpp_handle_option (pfile, argc, argv)\n \t      return argc;\n \t    }\n \t  break;\n-\tcase OPT_d:\n-\t  /* Args to -d specify what parts of macros to dump.\n-\t     Silently ignore unrecognised options; they may\n-\t     be aimed at the compiler proper.  */\n-\t  {\n-\t    char c;\n-\n-\t    while ((c = *arg++) != '\\0')\n-\t      switch (c)\n-\t\t{\n-\t\tcase 'M':\n-\t\t  CPP_OPTION (pfile, dump_macros) = dump_only;\n-\t\t  break;\n-\t\tcase 'N':\n-\t\t  CPP_OPTION (pfile, dump_macros) = dump_names;\n-\t\t  break;\n-\t\tcase 'D':\n-\t\t  CPP_OPTION (pfile, dump_macros) = dump_definitions;\n-\t\t  break;\n-\t\tcase 'I':\n-\t\t  CPP_OPTION (pfile, dump_includes) = 1;\n-\t\t  break;\n-\t\t}\n-\t  }\n-\t  break;\n \n \tcase OPT_MG:\n \t  CPP_OPTION (pfile, print_deps_missing_files) = 1;\n@@ -1751,103 +1666,3 @@ init_dependency_output (pfile)\n        was specified with -o.  out_fname is non-NULL here.  */\n     CPP_OPTION (pfile, deps_file) = CPP_OPTION (pfile, out_fname);\n }\n-\n-/* Handle --help output.  */\n-static void\n-print_help ()\n-{\n-  /* To keep the lines from getting too long for some compilers, limit\n-     to about 500 characters (6 lines) per chunk.  */\n-  fputs (_(\"\\\n-Switches:\\n\\\n-  -include <file>           Include the contents of <file> before other files\\n\\\n-  -imacros <file>           Accept definition of macros in <file>\\n\\\n-  -iprefix <path>           Specify <path> as a prefix for next two options\\n\\\n-  -iwithprefix <dir>        Add <dir> to the end of the system include path\\n\\\n-  -iwithprefixbefore <dir>  Add <dir> to the end of the main include path\\n\\\n-  -isystem <dir>            Add <dir> to the start of the system include path\\n\\\n-\"), stdout);\n-  fputs (_(\"\\\n-  -idirafter <dir>          Add <dir> to the end of the system include path\\n\\\n-  -I <dir>                  Add <dir> to the end of the main include path\\n\\\n-  -I-                       Fine-grained include path control; see info docs\\n\\\n-  -nostdinc                 Do not search system include directories\\n\\\n-                             (dirs specified with -isystem will still be used)\\n\\\n-  -nostdinc++               Do not search system include directories for C++\\n\\\n-  -o <file>                 Put output into <file>\\n\\\n-\"), stdout);\n-  fputs (_(\"\\\n-  -pedantic                 Issue all warnings demanded by strict ISO C\\n\\\n-  -pedantic-errors          Issue -pedantic warnings as errors instead\\n\\\n-  -trigraphs                Support ISO C trigraphs\\n\\\n-  -lang-c                   Assume that the input sources are in C\\n\\\n-  -lang-c89                 Assume that the input sources are in C89\\n\\\n-\"), stdout);\n-  fputs (_(\"\\\n-  -lang-c++                 Assume that the input sources are in C++\\n\\\n-  -lang-objc                Assume that the input sources are in ObjectiveC\\n\\\n-  -lang-asm                 Assume that the input sources are in assembler\\n\\\n-\"), stdout);\n-  fputs (_(\"\\\n-  -std=<std name>           Specify the conformance standard; one of:\\n\\\n-                            gnu89, gnu99, c89, c99, iso9899:1990,\\n\\\n-                            iso9899:199409, iso9899:1999\\n\\\n-  -w                        Inhibit warning messages\\n\\\n-  -Wtrigraphs               Warn if trigraphs are encountered\\n\\\n-  -Wno-trigraphs            Do not warn about trigraphs\\n\\\n-  -Wcomment{s}              Warn if one comment starts inside another\\n\\\n-\"), stdout);\n-  fputs (_(\"\\\n-  -Wno-comment{s}           Do not warn about comments\\n\\\n-  -Wtraditional             Warn about features not present in traditional C\\n\\\n-  -Wno-traditional          Do not warn about traditional C\\n\\\n-  -Wundef                   Warn if an undefined macro is used by #if\\n\\\n-  -Wno-undef                Do not warn about testing undefined macros\\n\\\n-  -Wimport                  Warn about the use of the #import directive\\n\\\n-\"), stdout);\n-  fputs (_(\"\\\n-  -Wno-import               Do not warn about the use of #import\\n\\\n-  -Werror                   Treat all warnings as errors\\n\\\n-  -Wno-error                Do not treat warnings as errors\\n\\\n-  -Wsystem-headers          Do not suppress warnings from system headers\\n\\\n-  -Wno-system-headers       Suppress warnings from system headers\\n\\\n-  -Wall                     Enable all preprocessor warnings\\n\\\n-\"), stdout);\n-  fputs (_(\"\\\n-  -M                        Generate make dependencies\\n\\\n-  -MM                       As -M, but ignore system header files\\n\\\n-  -MD                       Generate make dependencies and compile\\n\\\n-  -MMD                      As -MD, but ignore system header files\\n\\\n-  -MF <file>                Write dependency output to the given file\\n\\\n-  -MG                       Treat missing header file as generated files\\n\\\n-\"), stdout);\n-  fputs (_(\"\\\n-  -MP\t\t\t    Generate phony targets for all headers\\n\\\n-  -MQ <target>              Add a MAKE-quoted target\\n\\\n-  -MT <target>              Add an unquoted target\\n\\\n-\"), stdout);\n-  fputs (_(\"\\\n-  -D<macro>                 Define a <macro> with string '1' as its value\\n\\\n-  -D<macro>=<val>           Define a <macro> with <val> as its value\\n\\\n-  -A<question>=<answer>     Assert the <answer> to <question>\\n\\\n-  -A-<question>=<answer>    Disable the <answer> to <question>\\n\\\n-  -U<macro>                 Undefine <macro> \\n\\\n-  -v                        Display the version number\\n\\\n-\"), stdout);\n-  fputs (_(\"\\\n-  -H                        Print the name of header files as they are used\\n\\\n-  -C                        Do not discard comments\\n\\\n-  -dM                       Display a list of macro definitions active at end\\n\\\n-  -dD                       Preserve macro definitions in output\\n\\\n-  -dN                       As -dD except that only the names are preserved\\n\\\n-  -dI                       Include #include directives in the output\\n\\\n-\"), stdout);\n-  fputs (_(\"\\\n-  -fpreprocessed            Treat the input file as already preprocessed\\n\\\n-  -ftabstop=<number>        Distance between tab stops for column reporting\\n\\\n-  -P                        Do not generate #line directives\\n\\\n-  -remap                    Remap file names when including files\\n\\\n-  --version                 Display version information\\n\\\n-  -h or --help              Display this information\\n\\\n-\"), stdout);\n-}"}, {"sha": "97520a7ed960d1840cbf8e81e6cf201e723add9b", "filename": "gcc/cpplib.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=4b7091eb623ae501ec646b47f26e84b783043f47", "patch": "@@ -395,11 +395,6 @@ struct cpp_options\n   /* Nonzero means handle C++ alternate operator names.  */\n   unsigned char operator_names;\n \n-  /* True if --help, --version or --target-help appeared in the\n-     options.  Stand-alone CPP should then bail out after option\n-     parsing; drivers might want to continue printing help.  */\n-  unsigned char help_only;\n-\n   /* True for traditional preprocessing.  */\n   unsigned char traditional;\n "}, {"sha": "aacfb4b2631382f798b4b975009defe4e338cd17", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=4b7091eb623ae501ec646b47f26e84b783043f47", "patch": "@@ -607,10 +607,8 @@ Replacement:      [    ]    @{    @}    #    \\    ^    |    ~\n Enable special code to work around file systems which only permit very\n short file names, such as MS-DOS@.\n \n-@item -h\n @itemx --help\n @itemx --target-help\n-@opindex h\n @opindex help\n @opindex target-help\n Print text describing all the command line options instead of"}, {"sha": "25b3fb7126309e7516600a3c3a39540dde4b7dfb", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7091eb623ae501ec646b47f26e84b783043f47/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=4b7091eb623ae501ec646b47f26e84b783043f47", "patch": "@@ -670,7 +670,7 @@ static const char *trad_capable_cpp =\n static const char *cpp_unique_options =\n \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n  %{CC:%{!E:%eGNU C does not support -CC without using -E}}\\\n- %{!Q:-quiet} %{nostdinc*} %{C} %{CC} %{v} %{I*} %{P} %{$} %I\\\n+ %{!Q:-quiet} %{nostdinc*} %{C} %{CC} %{v} %{I*} %{P} %I\\\n  %{MD:-MD %W{!o: %b.d}%W{o*:%.d%*}}\\\n  %{MMD:-MMD %W{!o: %b.d}%W{o*:%.d%*}}\\\n  %{M} %{MM} %W{MF*} %{MG} %{MP} %{MQ*} %{MT*}\\"}]}