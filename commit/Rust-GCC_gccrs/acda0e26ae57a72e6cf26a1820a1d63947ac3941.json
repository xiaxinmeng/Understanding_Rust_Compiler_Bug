{"sha": "acda0e26ae57a72e6cf26a1820a1d63947ac3941", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkYTBlMjZhZTU3YTcyZTZjZjI2YTE4MjBhMWQ2Mzk0N2FjMzk0MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-05T09:04:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-05T09:04:33Z"}, "message": "invoke.texi: Document new MIPS -msym32 and -mno-sym32 options.\n\n\t* doc/invoke.texi: Document new MIPS -msym32 and -mno-sym32 options.\n\t* config/mips/mips.h (MASK_SYM32, TARGET_SYM32): New macros.\n\t(TARGET_SWITCHES): Add -msym32 and -mno-sym32.\n\t(ABI_HAS_64BIT_SYMBOLS): Set to false if TARGET_SYM32.\n\t(ASM_SPEC): Pass down -msym32 and -mno-sym32.\n\nFrom-SVN: r95926", "tree": {"sha": "d9f87649380ef70ac1c645f0ae8186d9180429eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9f87649380ef70ac1c645f0ae8186d9180429eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acda0e26ae57a72e6cf26a1820a1d63947ac3941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acda0e26ae57a72e6cf26a1820a1d63947ac3941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acda0e26ae57a72e6cf26a1820a1d63947ac3941", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acda0e26ae57a72e6cf26a1820a1d63947ac3941/comments", "author": null, "committer": null, "parents": [{"sha": "2fdedf0462d881d8cd9aad3dbf8f93befd26c9fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fdedf0462d881d8cd9aad3dbf8f93befd26c9fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fdedf0462d881d8cd9aad3dbf8f93befd26c9fe"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "bd96cf9a02c3de53544d3fd34c12f8270e2cb351", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acda0e26ae57a72e6cf26a1820a1d63947ac3941/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acda0e26ae57a72e6cf26a1820a1d63947ac3941/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acda0e26ae57a72e6cf26a1820a1d63947ac3941", "patch": "@@ -1,3 +1,11 @@\n+2005-03-05  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* doc/invoke.texi: Document new MIPS -msym32 and -mno-sym32 options.\n+\t* config/mips/mips.h (MASK_SYM32, TARGET_SYM32): New macros.\n+\t(TARGET_SWITCHES): Add -msym32 and -mno-sym32.\n+\t(ABI_HAS_64BIT_SYMBOLS): Set to false if TARGET_SYM32.\n+\t(ASM_SPEC): Pass down -msym32 and -mno-sym32.\n+\n 2005-03-04  Devang Patel  <dpatel@apple.com>\n \t\n \tPR tree-optimization/18815"}, {"sha": "41328a34d65ae400ba7679a71d430b436d506e73", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acda0e26ae57a72e6cf26a1820a1d63947ac3941/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acda0e26ae57a72e6cf26a1820a1d63947ac3941/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=acda0e26ae57a72e6cf26a1820a1d63947ac3941", "patch": "@@ -164,6 +164,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n                                            break instead of trap. */\n #define MASK_PAIRED_SINGLE 0x10000000   /* Support paired-single FPU.  */\n #define MASK_MIPS3D        0x20000000   /* Support MIPS-3D instructions.  */\n+#define MASK_SYM32\t   0x40000000\t/* Assume 32-bit symbol values.  */\n \n \t\t\t\t\t/* Debug switches, not documented */\n #define MASK_DEBUG\t0\t\t/* unused */\n@@ -242,6 +243,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define TARGET_PAIRED_SINGLE_FLOAT\t\\\n \t\t\t\t((target_flags & MASK_PAIRED_SINGLE) != 0)\n #define TARGET_MIPS3D\t\t((target_flags & MASK_MIPS3D) != 0)\n+#define TARGET_SYM32\t\t((target_flags & MASK_SYM32) != 0)\n \n /* True if we should use NewABI-style relocation operators for\n    symbolic addresses.  This is never true for mips16 code,\n@@ -669,6 +671,10 @@ extern const struct mips_cpu_info *mips_tune_info;\n      N_(\"FP exceptions are enabled\") },\t\t\t\t\t\\\n   {\"no-fp-exceptions\", \t  -MASK_FP_EXCEPTIONS,\t\t\t\t\\\n      N_(\"FP exceptions are not enabled\") },\t\t\t\t\\\n+  {\"sym32\",\t\t  MASK_SYM32,\t\t\t\t\t\\\n+     N_(\"Assume all symbols have 32-bit values\") },\t\t\t\\\n+  {\"no-sym32\",\t\t  -MASK_SYM32,\t\t\t\t\t\\\n+     N_(\"Don't assume all symbols have 32-bit values\") },\t\t\\\n   {\"debug\",\t\t  MASK_DEBUG,\t\t\t\t\t\\\n      NULL},\t\t\t\t\t\t\t\t\\\n   {\"debugd\",\t\t  MASK_DEBUG_D,\t\t\t\t\t\\\n@@ -843,7 +849,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n \n /* True if symbols are 64 bits wide.  At present, n64 is the only\n    ABI for which this is true.  */\n-#define ABI_HAS_64BIT_SYMBOLS\t(mips_abi == ABI_64)\n+#define ABI_HAS_64BIT_SYMBOLS\t(mips_abi == ABI_64 && !TARGET_SYM32)\n \n /* ISA has instructions for managing 64 bit fp and gp regs (e.g. mips3).  */\n #define ISA_HAS_64BIT_REGS\t(ISA_MIPS3\t\t\t\t\\\n@@ -1093,6 +1099,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n %(subtarget_asm_debugging_spec) \\\n %{mabi=*} %{!mabi*: %(asm_abi_default_spec)} \\\n %{mgp32} %{mgp64} %{march=*} %{mxgot:-xgot} \\\n+%{msym32} %{mno-sym32} \\\n %{mtune=*} %{v} \\\n %(subtarget_asm_spec)\"\n "}, {"sha": "d40806aac9e5129f94d00f8aba84710c74bae870", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acda0e26ae57a72e6cf26a1820a1d63947ac3941/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acda0e26ae57a72e6cf26a1820a1d63947ac3941/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=acda0e26ae57a72e6cf26a1820a1d63947ac3941", "patch": "@@ -548,7 +548,7 @@ Objective-C and Objective-C++ Dialects}.\n -mxgot  -mno-xgot  -mgp32  -mgp64  -mfp32  -mfp64 @gol\n -mhard-float  -msoft-float  -msingle-float  -mdouble-float @gol\n -mpaired-single  -mips3d @gol\n--mint64  -mlong64  -mlong32 @gol\n+-mint64  -mlong64  -mlong32  -msym32  -mno-sym32 @gol\n -G@var{num}  -membedded-data  -mno-embedded-data @gol\n -muninit-const-in-rodata  -mno-uninit-const-in-rodata @gol\n -msplit-addresses  -mno-split-addresses  @gol\n@@ -9679,6 +9679,15 @@ uses 64-bit @code{long}s, as does the 64-bit EABI; the others use\n 32-bit @code{long}s.  Pointers are the same size as @code{long}s,\n or the same size as integer registers, whichever is smaller.\n \n+@item -msym32\n+@itemx -mno-sym32\n+@opindex msym32\n+@opindex mno-sym32\n+Assume (do not assume) that all symbols have 32-bit values, regardless\n+of the selected ABI@.  This option is useful in combination with\n+@option{-mabi=64} and @option{-mno-abicalls} because it allows GCC\n+to generate shorter and faster references to symbolic addresses.\n+\n @item -G @var{num}\n @opindex G\n @cindex smaller data references (MIPS)"}]}