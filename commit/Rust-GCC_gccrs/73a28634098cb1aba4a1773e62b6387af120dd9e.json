{"sha": "73a28634098cb1aba4a1773e62b6387af120dd9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNhMjg2MzQwOThjYjFhYmE0YTE3NzNlNjJiNjM4N2FmMTIwZGQ5ZQ==", "commit": {"author": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2019-10-02T10:31:02Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-10-02T10:31:02Z"}, "message": "f95-lang.c (LANG_HOOKS_OMP_IS_OPTIONAL_ARGUMENT): Define to gfc_omp_is_optional_argument.\n\n2019-10-02  Kwok Cheung Yeung  <kcy@codesourcery.com>\n\n        gcc/fortran/\n        * f95-lang.c (LANG_HOOKS_OMP_IS_OPTIONAL_ARGUMENT): Define to\n        gfc_omp_is_optional_argument.\n        * trans-decl.c (create_function_arglist): Set\n        GFC_DECL_OPTIONAL_ARGUMENT in the generated decl if the parameter is\n        optional.\n        * trans-openmp.c (gfc_omp_is_optional_argument): New.\n        (gfc_omp_privatize_by_reference): Return true if the decl is an\n        optional pass-by-reference argument.\n        * trans.h (gfc_omp_is_optional_argument): New declaration.\n        (lang_decl): Add new optional_arg field.\n        (GFC_DECL_OPTIONAL_ARGUMENT): New macro.\n\n        gcc/\n        * langhooks-def.h (LANG_HOOKS_OMP_IS_OPTIONAL_ARGUMENT): Default to\n        false.\n        (LANG_HOOKS_DECLS): Add LANG_HOOKS_OMP_IS_OPTIONAL_ARGUMENT.\n        * langhooks.h (omp_is_optional_argument): New hook.\n        * omp-general.c (omp_is_optional_argument): New.\n        * omp-general.h (omp_is_optional_argument): New declaration.\n        * omp-low.c (lower_omp_target): Create temporary for received value\n        and take the address for new_var if the original variable was a\n        DECL_BY_REFERENCE.  Use size of referenced object when a\n        pass-by-reference optional argument used as argument to firstprivate.\n\nFrom-SVN: r276444", "tree": {"sha": "04b74614812eb5badf5bd35f2fc3ad29ff83bd08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04b74614812eb5badf5bd35f2fc3ad29ff83bd08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73a28634098cb1aba4a1773e62b6387af120dd9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a28634098cb1aba4a1773e62b6387af120dd9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a28634098cb1aba4a1773e62b6387af120dd9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a28634098cb1aba4a1773e62b6387af120dd9e/comments", "author": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68710ac7da29c2ed111755351936d1956f64de7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68710ac7da29c2ed111755351936d1956f64de7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68710ac7da29c2ed111755351936d1956f64de7c"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "7e467035d1bc8469ea3c5b8cca107b0c8278cda7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73a28634098cb1aba4a1773e62b6387af120dd9e", "patch": "@@ -1,3 +1,16 @@\n+2019-10-02  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* langhooks-def.h (LANG_HOOKS_OMP_IS_OPTIONAL_ARGUMENT): Default to\n+\tfalse.\n+\t(LANG_HOOKS_DECLS): Add LANG_HOOKS_OMP_IS_OPTIONAL_ARGUMENT.\n+\t* langhooks.h (omp_is_optional_argument): New hook.\n+\t* omp-general.c (omp_is_optional_argument): New.\n+\t* omp-general.h (omp_is_optional_argument): New declaration.\n+\t* omp-low.c (lower_omp_target): Create temporary for received value\n+\tand take the address for new_var if the original variable was a\n+\tDECL_BY_REFERENCE.  Use size of referenced object when a\n+\tpass-by-reference optional argument used as argument to firstprivate.\n+\n 2019-10-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/91940"}, {"sha": "d8c891f04bc8e6baff353b6316609355c5857798", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=73a28634098cb1aba4a1773e62b6387af120dd9e", "patch": "@@ -1,3 +1,17 @@\n+2019-10-02  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* f95-lang.c (LANG_HOOKS_OMP_IS_OPTIONAL_ARGUMENT): Define to\n+\tgfc_omp_is_optional_argument.\n+\t* trans-decl.c (create_function_arglist): Set\n+\tGFC_DECL_OPTIONAL_ARGUMENT in the generated decl if the parameter is\n+\toptional.\n+\t* trans-openmp.c (gfc_omp_is_optional_argument): New.\n+\t(gfc_omp_privatize_by_reference): Return true if the decl is an\n+\toptional pass-by-reference argument.\n+\t* trans.h (gfc_omp_is_optional_argument): New declaration.\n+\t(lang_decl): Add new optional_arg field.\n+\t(GFC_DECL_OPTIONAL_ARGUMENT): New macro.\n+\n 2019-10-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* error.c (gfc_diagnostic_starter): Clear the prefix before"}, {"sha": "2467cd968afdc34c590c5c4990f436b13f8c57fb", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=73a28634098cb1aba4a1773e62b6387af120dd9e", "patch": "@@ -113,6 +113,7 @@ static const struct attribute_spec gfc_attribute_table[] =\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n #undef LANG_HOOKS_INIT_TS\n+#undef LANG_HOOKS_OMP_IS_OPTIONAL_ARGUMENT\n #undef LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE\n #undef LANG_HOOKS_OMP_PREDETERMINED_SHARING\n #undef LANG_HOOKS_OMP_REPORT_DECL\n@@ -145,6 +146,7 @@ static const struct attribute_spec gfc_attribute_table[] =\n #define LANG_HOOKS_TYPE_FOR_MODE\tgfc_type_for_mode\n #define LANG_HOOKS_TYPE_FOR_SIZE\tgfc_type_for_size\n #define LANG_HOOKS_INIT_TS\t\tgfc_init_ts\n+#define LANG_HOOKS_OMP_IS_OPTIONAL_ARGUMENT\tgfc_omp_is_optional_argument\n #define LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE\tgfc_omp_privatize_by_reference\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING\tgfc_omp_predetermined_sharing\n #define LANG_HOOKS_OMP_REPORT_DECL\t\tgfc_omp_report_decl"}, {"sha": "a113f08e26be87be7783c802c5b1129d64548801", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=73a28634098cb1aba4a1773e62b6387af120dd9e", "patch": "@@ -2687,6 +2687,11 @@ create_function_arglist (gfc_symbol * sym)\n \t  && (!f->sym->attr.proc_pointer\n \t      && f->sym->attr.flavor != FL_PROCEDURE))\n \tDECL_BY_REFERENCE (parm) = 1;\n+      if (f->sym->attr.optional)\n+\t{\n+\t  gfc_allocate_lang_decl (parm);\n+\t  GFC_DECL_OPTIONAL_ARGUMENT (parm) = 1;\n+\t}\n \n       gfc_finish_decl (parm);\n       gfc_finish_decl_attrs (parm, &f->sym->attr);"}, {"sha": "88ecc3311660a163c437350446922160d8aa2fce", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=73a28634098cb1aba4a1773e62b6387af120dd9e", "patch": "@@ -47,6 +47,15 @@ along with GCC; see the file COPYING3.  If not see\n \n int ompws_flags;\n \n+/* True if OpenMP should treat this DECL as an optional argument.  */\n+\n+bool\n+gfc_omp_is_optional_argument (const_tree decl)\n+{\n+  return (TREE_CODE (decl) == PARM_DECL && DECL_LANG_SPECIFIC (decl)\n+\t  && GFC_DECL_OPTIONAL_ARGUMENT (decl));\n+}\n+\n /* True if OpenMP should privatize what this DECL points to rather\n    than the DECL itself.  */\n \n@@ -59,6 +68,10 @@ gfc_omp_privatize_by_reference (const_tree decl)\n       && (!DECL_ARTIFICIAL (decl) || TREE_CODE (decl) == PARM_DECL))\n     return true;\n \n+  if (TREE_CODE (type) == POINTER_TYPE\n+      && gfc_omp_is_optional_argument (decl))\n+    return true;\n+\n   if (TREE_CODE (type) == POINTER_TYPE)\n     {\n       /* Array POINTER/ALLOCATABLE have aggregate types, all user variables"}, {"sha": "405e88dd1c4cbc8a54377cecdb3bc7012c4b13ab", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=73a28634098cb1aba4a1773e62b6387af120dd9e", "patch": "@@ -786,6 +786,7 @@ struct array_descr_info;\n bool gfc_get_array_descr_info (const_tree, struct array_descr_info *);\n \n /* In trans-openmp.c */\n+bool gfc_omp_is_optional_argument (const_tree);\n bool gfc_omp_privatize_by_reference (const_tree);\n enum omp_clause_default_kind gfc_omp_predetermined_sharing (tree);\n tree gfc_omp_report_decl (tree);\n@@ -999,6 +1000,7 @@ struct GTY(()) lang_decl {\n   tree token, caf_offset;\n   unsigned int scalar_allocatable : 1;\n   unsigned int scalar_pointer : 1;\n+  unsigned int optional_arg : 1;\n };\n \n \n@@ -1013,6 +1015,8 @@ struct GTY(()) lang_decl {\n   (DECL_LANG_SPECIFIC (node)->scalar_allocatable)\n #define GFC_DECL_SCALAR_POINTER(node) \\\n   (DECL_LANG_SPECIFIC (node)->scalar_pointer)\n+#define GFC_DECL_OPTIONAL_ARGUMENT(node) \\\n+  (DECL_LANG_SPECIFIC (node)->optional_arg)\n #define GFC_DECL_GET_SCALAR_ALLOCATABLE(node) \\\n   (DECL_LANG_SPECIFIC (node) ? GFC_DECL_SCALAR_ALLOCATABLE (node) : 0)\n #define GFC_DECL_GET_SCALAR_POINTER(node) \\"}, {"sha": "55d5fe01495e268dbb7120c9215fa62c67f68503", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=73a28634098cb1aba4a1773e62b6387af120dd9e", "patch": "@@ -236,6 +236,7 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL lhd_warn_unused_global_decl\n #define LANG_HOOKS_POST_COMPILATION_PARSING_CLEANUPS NULL\n #define LANG_HOOKS_DECL_OK_FOR_SIBCALL\tlhd_decl_ok_for_sibcall\n+#define LANG_HOOKS_OMP_IS_OPTIONAL_ARGUMENT hook_bool_const_tree_false\n #define LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE hook_bool_const_tree_false\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING lhd_omp_predetermined_sharing\n #define LANG_HOOKS_OMP_REPORT_DECL lhd_pass_through_t\n@@ -261,6 +262,7 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n   LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, \\\n   LANG_HOOKS_POST_COMPILATION_PARSING_CLEANUPS, \\\n   LANG_HOOKS_DECL_OK_FOR_SIBCALL, \\\n+  LANG_HOOKS_OMP_IS_OPTIONAL_ARGUMENT, \\\n   LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE, \\\n   LANG_HOOKS_OMP_PREDETERMINED_SHARING, \\\n   LANG_HOOKS_OMP_REPORT_DECL, \\"}, {"sha": "9d2714a5b1de6556959f7b05cfa9bae92f0cf23a", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=73a28634098cb1aba4a1773e62b6387af120dd9e", "patch": "@@ -222,6 +222,9 @@ struct lang_hooks_for_decls\n   /* True if this decl may be called via a sibcall.  */\n   bool (*ok_for_sibcall) (const_tree);\n \n+  /* True if OpenMP should treat DECL as a Fortran optional argument.  */\n+  bool (*omp_is_optional_argument) (const_tree);\n+\n   /* True if OpenMP should privatize what this DECL points to rather\n      than the DECL itself.  */\n   bool (*omp_privatize_by_reference) (const_tree);"}, {"sha": "5ef6e2516987dca8a5382307d37e6e772b33a20b", "filename": "gcc/omp-general.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=73a28634098cb1aba4a1773e62b6387af120dd9e", "patch": "@@ -48,6 +48,14 @@ omp_find_clause (tree clauses, enum omp_clause_code kind)\n   return NULL_TREE;\n }\n \n+/* Return true if DECL is a Fortran optional argument.  */\n+\n+bool\n+omp_is_optional_argument (tree decl)\n+{\n+  return lang_hooks.decls.omp_is_optional_argument (decl);\n+}\n+\n /* Return true if DECL is a reference type.  */\n \n bool"}, {"sha": "bbaa7b11707d2a55bcdf8e62bcf2556f5da2e1e2", "filename": "gcc/omp-general.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Fomp-general.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Fomp-general.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.h?ref=73a28634098cb1aba4a1773e62b6387af120dd9e", "patch": "@@ -73,6 +73,7 @@ struct omp_for_data\n #define OACC_FN_ATTRIB \"oacc function\"\n \n extern tree omp_find_clause (tree clauses, enum omp_clause_code kind);\n+extern bool omp_is_optional_argument (tree decl);\n extern bool omp_is_reference (tree decl);\n extern void omp_adjust_for_condition (location_t loc, enum tree_code *cond_code,\n \t\t\t\t      tree *n2, tree v, tree step);"}, {"sha": "a0e5041d3f2d8a99743af7bc1497fba715de10c2", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a28634098cb1aba4a1773e62b6387af120dd9e/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=73a28634098cb1aba4a1773e62b6387af120dd9e", "patch": "@@ -11395,7 +11395,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t      {\n \t\tgcc_assert (is_gimple_omp_oacc (ctx->stmt));\n \t\tif (omp_is_reference (new_var)\n-\t\t    && TREE_CODE (TREE_TYPE (new_var)) != POINTER_TYPE)\n+\t\t    && (TREE_CODE (TREE_TYPE (new_var)) != POINTER_TYPE\n+\t\t        || DECL_BY_REFERENCE (var)))\n \t\t  {\n \t\t    /* Create a local object to hold the instance\n \t\t       value.  */"}]}