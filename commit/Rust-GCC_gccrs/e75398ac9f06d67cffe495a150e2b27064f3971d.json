{"sha": "e75398ac9f06d67cffe495a150e2b27064f3971d", "node_id": "C_kwDOANBUbNoAKGU3NTM5OGFjOWYwNmQ2N2NmZmU0OTVhMTUwZTJiMjcwNjRmMzk3MWQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-01T11:52:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-01T13:05:23Z"}, "message": "Some predicate analysis TLC\n\nThe following hides some internal details of compute_control_dep_chain.\n\n\t* gimple-predicate-analysis.cc (compute_control_dep_chain):\n\tNew wrapping overload.\n\t(uninit_analysis::init_use_preds): Simplify.\n\t(uninit_analysis::init_from_phi_def): Likewise.", "tree": {"sha": "072a962984003a412e44ad1aa575ae7db85e10ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/072a962984003a412e44ad1aa575ae7db85e10ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e75398ac9f06d67cffe495a150e2b27064f3971d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75398ac9f06d67cffe495a150e2b27064f3971d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e75398ac9f06d67cffe495a150e2b27064f3971d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75398ac9f06d67cffe495a150e2b27064f3971d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5699dd82aa053a8597a69f3331f11aff3e2823d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5699dd82aa053a8597a69f3331f11aff3e2823d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5699dd82aa053a8597a69f3331f11aff3e2823d"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "2982268fdfdf0bed4e5617db0e144128fa46aeba", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75398ac9f06d67cffe495a150e2b27064f3971d/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75398ac9f06d67cffe495a150e2b27064f3971d/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=e75398ac9f06d67cffe495a150e2b27064f3971d", "patch": "@@ -1124,6 +1124,18 @@ compute_control_dep_chain (basic_block dom_bb, const_basic_block dep_bb,\n   return found_cd_chain;\n }\n \n+static bool\n+compute_control_dep_chain (basic_block dom_bb, const_basic_block dep_bb,\n+\t\t\t   vec<edge> cd_chains[], unsigned *num_chains,\n+\t\t\t   unsigned in_region = 0)\n+{\n+  auto_vec<edge, MAX_CHAIN_LEN + 1> cur_cd_chain;\n+  unsigned num_calls = 0;\n+  unsigned depth = 0;\n+  return compute_control_dep_chain (dom_bb, dep_bb, cd_chains, num_chains,\n+\t\t\t\t    cur_cd_chain, &num_calls, in_region, depth);\n+}\n+\n /* Implemented simplifications:\n \n    1) ((x IOR y) != 0) AND (x != 0) is equivalent to (x != 0);\n@@ -1919,13 +1931,10 @@ uninit_analysis::init_use_preds (predicate &use_preds, basic_block def_bb,\n      Each DEP_CHAINS element is a series of edges whose conditions\n      are logical conjunctions.  Together, the DEP_CHAINS vector is\n      used below to initialize an OR expression of the conjunctions.  */\n-  unsigned num_calls = 0;\n   unsigned num_chains = 0;\n   auto_vec<edge> dep_chains[MAX_NUM_CHAINS];\n-  auto_vec<edge, MAX_CHAIN_LEN + 1> cur_chain;\n \n-  if (!compute_control_dep_chain (cd_root, use_bb, dep_chains, &num_chains,\n-\t\t\t\t  cur_chain, &num_calls))\n+  if (!compute_control_dep_chain (cd_root, use_bb, dep_chains, &num_chains))\n     {\n       gcc_assert (num_chains == 0);\n       simple_control_dep_chain (dep_chains[0], cd_root, use_bb);\n@@ -2023,14 +2032,12 @@ uninit_analysis::init_from_phi_def (gphi *phi)\n \n   unsigned num_chains = 0;\n   auto_vec<edge> dep_chains[MAX_NUM_CHAINS];\n-  auto_vec<edge, MAX_CHAIN_LEN + 1> cur_chain;\n   for (unsigned i = 0; i < nedges; i++)\n     {\n       edge e = def_edges[i];\n-      unsigned num_calls = 0;\n       unsigned prev_nc = num_chains;\n       compute_control_dep_chain (cd_root, e->src, dep_chains,\n-\t\t\t\t &num_chains, cur_chain, &num_calls, in_region);\n+\t\t\t\t &num_chains, in_region);\n \n       /* Update the newly added chains with the phi operand edge.  */\n       if (EDGE_COUNT (e->src->succs) > 1)"}]}