{"sha": "0f37323cc3a2bbb35514d09127556446c64194d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzNzMyM2NjM2EyYmJiMzU1MTRkMDkxMjc1NTY0NDZjNjQxOTRkOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-10-20T07:17:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-10-20T07:17:47Z"}, "message": "mips.h (ISA_HAS_WSBH): Define.\n\ngcc/\n\t* config/mips/mips.h (ISA_HAS_WSBH): Define.\n\t* config/mips/mips.md (UNSPEC_WSBH, UNSPEC_DSBH, UNSPEC_DSHD): New\n\tconstants.\n\t(bswaphi2, bswapsi2, bswapdi2, wsbh, dsbh, dshd): New patterns.\n\ngcc/testsuite/\n\t* gcc.target/mips/bswap-1.c, gcc.target/mips/bswap-2.c,\n\tgcc.target/mips/bswap-3.c, gcc.target/mips/bswap-4.c,\n\tgcc.target/mips/bswap-5.c, gcc.target/mips/bswap-6.c: New tests.\n\nFrom-SVN: r203870", "tree": {"sha": "39209745527fbdbd85d5ca52adcdf1d7fc759bf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39209745527fbdbd85d5ca52adcdf1d7fc759bf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f37323cc3a2bbb35514d09127556446c64194d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f37323cc3a2bbb35514d09127556446c64194d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f37323cc3a2bbb35514d09127556446c64194d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f37323cc3a2bbb35514d09127556446c64194d9/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cd940de811c750dd12c3c3f82016f390eb62b84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd940de811c750dd12c3c3f82016f390eb62b84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd940de811c750dd12c3c3f82016f390eb62b84"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "8f42aedf88f5e1c801d209adb267ae38238e3723", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f37323cc3a2bbb35514d09127556446c64194d9", "patch": "@@ -1,3 +1,10 @@\n+2013-10-20  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.h (ISA_HAS_WSBH): Define.\n+\t* config/mips/mips.md (UNSPEC_WSBH, UNSPEC_DSBH, UNSPEC_DSHD): New\n+\tconstants.\n+\t(bswaphi2, bswapsi2, bswapdi2, wsbh, dsbh, dshd): New patterns.\n+\n 2013-10-19  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR target/58603"}, {"sha": "c4a2a4a6862061a41f84b2d19dbbf1061bd51b28", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=0f37323cc3a2bbb35514d09127556446c64194d9", "patch": "@@ -972,6 +972,11 @@ struct mips_cpu_info {\n \t\t\t\t  || TARGET_SMARTMIPS)\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n+/* ISA has the WSBH (word swap bytes within halfwords) instruction.\n+   64-bit targets also provide DSBH and DSHD.  */\n+#define ISA_HAS_WSBH\t\t((ISA_MIPS32R2 || ISA_MIPS64R2)\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n+\n /* ISA has data prefetch instructions.  This controls use of 'pref'.  */\n #define ISA_HAS_PREFETCH\t((ISA_MIPS4\t\t\t\t\\\n \t\t\t\t  || TARGET_LOONGSON_2EF\t\t\\"}, {"sha": "3554beb30337a1b6417674c5dc3c84161da65133", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=0f37323cc3a2bbb35514d09127556446c64194d9", "patch": "@@ -74,6 +74,11 @@\n   UNSPEC_STORE_LEFT\n   UNSPEC_STORE_RIGHT\n \n+  ;; Integer operations that are too cumbersome to describe directly.\n+  UNSPEC_WSBH\n+  UNSPEC_DSBH\n+  UNSPEC_DSHD\n+\n   ;; Floating-point moves.\n   UNSPEC_LOAD_LOW\n   UNSPEC_LOAD_HIGH\n@@ -5358,6 +5363,56 @@\n }\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"bswaphi2\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n+\t(bswap:HI (match_operand:HI 1 \"register_operand\" \"d\")))]\n+  \"ISA_HAS_WSBH\"\n+  \"wsbh\\t%0,%1\"\n+  [(set_attr \"type\" \"shift\")])\n+\n+(define_insn_and_split \"bswapsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(bswap:SI (match_operand:SI 1 \"register_operand\" \"d\")))]\n+  \"ISA_HAS_WSBH && ISA_HAS_ROR\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0) (unspec:SI [(match_dup 1)] UNSPEC_WSBH))\n+   (set (match_dup 0) (rotatert:SI (match_dup 0) (const_int 16)))]\n+  \"\"\n+  [(set_attr \"insn_count\" \"2\")])\n+\n+(define_insn_and_split \"bswapdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(bswap:DI (match_operand:DI 1 \"register_operand\" \"d\")))]\n+  \"TARGET_64BIT && ISA_HAS_WSBH\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0) (unspec:DI [(match_dup 1)] UNSPEC_DSBH))\n+   (set (match_dup 0) (unspec:DI [(match_dup 0)] UNSPEC_DSHD))]\n+  \"\"\n+  [(set_attr \"insn_count\" \"2\")])\n+\n+(define_insn \"wsbh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"d\")] UNSPEC_WSBH))]\n+  \"ISA_HAS_WSBH\"\n+  \"wsbh\\t%0,%1\"\n+  [(set_attr \"type\" \"shift\")])\n+\n+(define_insn \"dsbh\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"d\")] UNSPEC_DSBH))]\n+  \"TARGET_64BIT && ISA_HAS_WSBH\"\n+  \"dsbh\\t%0,%1\"\n+  [(set_attr \"type\" \"shift\")])\n+\n+(define_insn \"dshd\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"d\")] UNSPEC_DSHD))]\n+  \"TARGET_64BIT && ISA_HAS_WSBH\"\n+  \"dshd\\t%0,%1\"\n+  [(set_attr \"type\" \"shift\")])\n \f\n ;;\n ;;  ...................."}, {"sha": "ac6691c3c0c1acec3db25174d5b7cc210972ab3c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f37323cc3a2bbb35514d09127556446c64194d9", "patch": "@@ -1,3 +1,9 @@\n+2013-10-20  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.target/mips/bswap-1.c, gcc.target/mips/bswap-2.c,\n+\tgcc.target/mips/bswap-3.c, gcc.target/mips/bswap-4.c,\n+\tgcc.target/mips/bswap-5.c, gcc.target/mips/bswap-6.c: New tests.\n+\n 2013-10-19  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* c-c++-common/opaque-vector.c: Skip long double test on hppa."}, {"sha": "24016f2693135341386f2a2eec9a3d5e9c630b8a", "filename": "gcc/testsuite/gcc.target/mips/bswap-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-1.c?ref=0f37323cc3a2bbb35514d09127556446c64194d9", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"isa_rev>=2\" } */\n+/* { dg-skip-if \"bswap recognition needs expensive optimizations\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+NOMIPS16 unsigned short\n+foo (unsigned short x)\n+{\n+  return ((x << 8) & 0xff00) | ((x >> 8) & 0xff);\n+}\n+\n+/* { dg-final { scan-assembler \"\\twsbh\\t\" } } */"}, {"sha": "e0ca496b6d152a50fa0e2c941efa18a1b7a38b7c", "filename": "gcc/testsuite/gcc.target/mips/bswap-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-2.c?ref=0f37323cc3a2bbb35514d09127556446c64194d9", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"isa_rev>=2\" } */\n+\n+NOMIPS16 unsigned short\n+foo (unsigned short x)\n+{\n+  return __builtin_bswap16 (x);\n+}\n+\n+/* { dg-final { scan-assembler \"\\twsbh\\t\" } } */"}, {"sha": "5d2086fd32481c6bd3b1f3b86128b1ef01739298", "filename": "gcc/testsuite/gcc.target/mips/bswap-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-3.c?ref=0f37323cc3a2bbb35514d09127556446c64194d9", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-options \"isa_rev>=2\" } */\n+/* { dg-skip-if \"bswap recognition needs expensive optimizations\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+NOMIPS16 unsigned int\n+foo (unsigned int x)\n+{\n+  return (((x << 24) & 0xff000000)\n+\t  | ((x << 8) & 0xff0000)\n+\t  | ((x >> 8) & 0xff00)\n+\t  | ((x >> 24) & 0xff));\n+}\n+\n+/* { dg-final { scan-assembler \"\\twsbh\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tror\\t\" } } */"}, {"sha": "ac37a011440f9f17c0696fa064a4f2ab6c473be4", "filename": "gcc/testsuite/gcc.target/mips/bswap-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-4.c?ref=0f37323cc3a2bbb35514d09127556446c64194d9", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"isa_rev>=2\" } */\n+\n+NOMIPS16 unsigned int\n+foo (unsigned int x)\n+{\n+  return __builtin_bswap32 (x);\n+}\n+\n+/* { dg-final { scan-assembler \"\\twsbh\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tror\\t\" } } */"}, {"sha": "45520e4ab850b4033b150b297b3406c13fe750fd", "filename": "gcc/testsuite/gcc.target/mips/bswap-5.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-5.c?ref=0f37323cc3a2bbb35514d09127556446c64194d9", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"isa_rev>=2 -mgp64\" } */\n+/* { dg-skip-if \"bswap recognition needs expensive optimizations\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned long long uint64_t;\n+\n+NOMIPS16 uint64_t\n+foo (uint64_t x)\n+{\n+  return (((x << 56) & 0xff00000000000000ull)\n+\t  | ((x << 40) & 0xff000000000000ull)\n+\t  | ((x << 24) & 0xff0000000000ull)\n+\t  | ((x << 8) & 0xff00000000ull)\n+\t  | ((x >> 8) & 0xff000000)\n+\t  | ((x >> 24) & 0xff0000)\n+\t  | ((x >> 40) & 0xff00)\n+\t  | ((x >> 56) & 0xff));\n+}\n+\n+/* { dg-final { scan-assembler \"\\tdsbh\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tdshd\\t\" } } */"}, {"sha": "1145357fef1da80a471e97b8de74410c1e56d7cb", "filename": "gcc/testsuite/gcc.target/mips/bswap-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f37323cc3a2bbb35514d09127556446c64194d9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbswap-6.c?ref=0f37323cc3a2bbb35514d09127556446c64194d9", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"isa_rev>=2 -mgp64\" } */\n+\n+typedef unsigned long long uint64_t;\n+\n+NOMIPS16 uint64_t\n+foo (uint64_t x)\n+{\n+  return __builtin_bswap64 (x);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tdsbh\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tdshd\\t\" } } */"}]}