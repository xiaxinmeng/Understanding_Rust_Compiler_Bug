{"sha": "b1d5455a5efad3f380671cf818515a1a6ec94546", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkNTQ1NWE1ZWZhZDNmMzgwNjcxY2Y4MTg1MTVhMWE2ZWM5NDU0Ng==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-09-03T17:09:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-09-03T17:09:20Z"}, "message": "system.h (CONST_CAST2, [...]): New macros for type-specific casts.\n\n\t* system.h (CONST_CAST2, CONST_CAST_TREE, CONST_CAST_RTX,\n\tCONST_CAST_BB): New macros for type-specific casts.\n\t(CONST_CAST): Add a TYPE parameter and define it in terms of\n\tCONST_CAST2.\n\n\t* c-decl.c (c_make_fname_decl): Supply a TYPE for CONST_CAST.\n\t* c-lex.c (cb_ident, lex_string): Likewise,\n\t* c-typeck.c (free_all_tagged_tu_seen_up_to): Likewise,\n\t* config/i386/i386.c (ix86_function_regparm,\n\tix86_function_sseregparm): Use CONST_CAST_TREE.\n\t* config/mmix/mmix.c (mmix_encode_section_info): Supply a TYPE for\n\tCONST_CAST.\n\t* gcc.c (set_spec, read_specs, for_each_path, execute, do_spec_1,\n\tgive_switch, set_multilib_dir): Likewise,\n\t* gengtype-parse.c (string_seq, typedef_name): Likewise,\n\t* gimple-low.c (block_may_fallthru): Use CONST_CAST_TREE.\n\t* jump.c (reversed_comparison_code_parts): Use CONST_CAST_RTX.\n\t* passes.c (execute_one_pass): Supply a TYPE for CONST_CAST.\n\t* prefix.c (update_path): Likewise,\n\t* pretty-print.c (pp_base_destroy_prefix): Likewise,\n\t* rtlanal.c (keep_with_call_p): Use CONST_CAST_RTX.\n\t* tree-cfg.c (tree_can_merge_blocks_p,\n\ttree_block_ends_with_condjump_p): Use CONST_CAST_BB.\n\t* tree-eh.c (lookup_stmt_eh_region_fn): USe CONST_CAST_TREE.\n\t* tree.c (build_string): Supply a TYPE for CONST_CAST.\n\t(attribute_list_contained): Use CONST_CAST_TREE.\n\ncp:\n\t* call.c (name_as_c_string): Supply a TYPE for CONST_CAST.\n\t* decl.c (cp_make_fname_decl): Likewise,\n\t* parser.c (cp_parser_string_literal): Likewise,\n\t* tree.c (pod_type_p, zero_init_p): Use CONST_CAST_TREE.\n\t* typeck.c (cp_type_quals, cp_type_readonly, cp_has_mutable_p):\n\tLikewise,\n\nfortran:\n\t* gfortranspec.c (lang_specific_driver): Use CONST_CAST2.\n\t* options.c (gfc_post_options): Supply a TYPE for CONST_CAST.\n\t* parse.c (parse_omp_structured_block): Likewise,\n\t* st.c (gfc_free_statement): Likewise,\n\njava:\n\t* jcf-parse.c (read_class, java_parse_file): Supply a TYPE for\n\tCONST_CAST.\n\t* jcf.h (JCF_FINISH): Likewise.\n\nFrom-SVN: r128051", "tree": {"sha": "c67ebc05c0f9f25bf5e2c4cfeb978cad7945373c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c67ebc05c0f9f25bf5e2c4cfeb978cad7945373c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1d5455a5efad3f380671cf818515a1a6ec94546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d5455a5efad3f380671cf818515a1a6ec94546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d5455a5efad3f380671cf818515a1a6ec94546", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d5455a5efad3f380671cf818515a1a6ec94546/comments", "author": null, "committer": null, "parents": [{"sha": "d74b97cc7e574d56c7542f40a76b151e7088829b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74b97cc7e574d56c7542f40a76b151e7088829b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74b97cc7e574d56c7542f40a76b151e7088829b"}], "stats": {"total": 175, "additions": 115, "deletions": 60}, "files": [{"sha": "3cd2afaff0f87132a5eb61bbc1a49f2b24890ad8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1,3 +1,32 @@\n+2007-09-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* system.h (CONST_CAST2, CONST_CAST_TREE, CONST_CAST_RTX,\n+\tCONST_CAST_BB): New macros for type-specific casts.\n+\t(CONST_CAST): Add a TYPE parameter and define it in terms of\n+\tCONST_CAST2.\n+\n+\t* c-decl.c (c_make_fname_decl): Supply a TYPE for CONST_CAST.\n+\t* c-lex.c (cb_ident, lex_string): Likewise,\n+\t* c-typeck.c (free_all_tagged_tu_seen_up_to): Likewise,\n+\t* config/i386/i386.c (ix86_function_regparm,\n+\tix86_function_sseregparm): Use CONST_CAST_TREE.\n+\t* config/mmix/mmix.c (mmix_encode_section_info): Supply a TYPE for\n+\tCONST_CAST.\n+\t* gcc.c (set_spec, read_specs, for_each_path, execute, do_spec_1,\n+\tgive_switch, set_multilib_dir): Likewise,\n+\t* gengtype-parse.c (string_seq, typedef_name): Likewise,\n+\t* gimple-low.c (block_may_fallthru): Use CONST_CAST_TREE.\n+\t* jump.c (reversed_comparison_code_parts): Use CONST_CAST_RTX.\n+\t* passes.c (execute_one_pass): Supply a TYPE for CONST_CAST.\n+\t* prefix.c (update_path): Likewise,\n+\t* pretty-print.c (pp_base_destroy_prefix): Likewise,\n+\t* rtlanal.c (keep_with_call_p): Use CONST_CAST_RTX.\n+\t* tree-cfg.c (tree_can_merge_blocks_p,\n+\ttree_block_ends_with_condjump_p): Use CONST_CAST_BB.\n+\t* tree-eh.c (lookup_stmt_eh_region_fn): USe CONST_CAST_TREE.\n+\t* tree.c (build_string): Supply a TYPE for CONST_CAST.\n+\t(attribute_list_contained): Use CONST_CAST_TREE.\n+\n 2007-09-03  Krister Walfridsson  <cato@df.lth.se>\n \n \t* config/netbsd-elf.h (USE_LD_AS_NEEDED): Define."}, {"sha": "e265f675a3ed1508472be3034a45efd33e503238", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -2812,7 +2812,7 @@ c_make_fname_decl (tree id, int type_dep)\n   DECL_ARTIFICIAL (decl) = 1;\n \n   init = build_string (length + 1, name);\n-  free (CONST_CAST (name));\n+  free (CONST_CAST (char *, name));\n   TREE_TYPE (init) = type;\n   DECL_INITIAL (decl) = init;\n "}, {"sha": "bc0aeb2faa9eb52a3bdf9bf3232fb4b3cc8500d6", "filename": "gcc/c-lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -187,7 +187,7 @@ cb_ident (cpp_reader * ARG_UNUSED (pfile),\n       if (cpp_interpret_string (pfile, str, 1, &cstr, false))\n \t{\n \t  ASM_OUTPUT_IDENT (asm_out_file, (const char *) cstr.text);\n-\t  free (CONST_CAST (cstr.text));\n+\t  free (CONST_CAST (unsigned char *, cstr.text));\n \t}\n     }\n #endif\n@@ -941,7 +941,7 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n       (parse_in, strs, concats + 1, &istr, wide))\n     {\n       value = build_string (istr.len, (const char *) istr.text);\n-      free (CONST_CAST (istr.text));\n+      free (CONST_CAST (unsigned char *, istr.text));\n \n       if (c_lex_string_translate == -1)\n \t{\n@@ -962,7 +962,7 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n \t      *valp = build_string (istr.len, (const char *) istr.text);\n \t      valp = &TREE_CHAIN (*valp);\n \t    }\n-\t  free (CONST_CAST (istr.text));\n+\t  free (CONST_CAST (unsigned char *, istr.text));\n \t}\n     }\n   else"}, {"sha": "a9220810c2f3f06d7191ac22b5704c56a8c138ca", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1113,7 +1113,7 @@ free_all_tagged_tu_seen_up_to (const struct tagged_tu_seen_cache *tu_til)\n       const struct tagged_tu_seen_cache *const tu1\n \t= (const struct tagged_tu_seen_cache *) tu;\n       tu = tu1->next;\n-      free (CONST_CAST (tu1));\n+      free (CONST_CAST (struct tagged_tu_seen_cache *, tu1));\n     }\n   tagged_tu_seen_base = tu_til;\n }"}, {"sha": "dba72dfa7373e688852667c024373c634906b594", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -2972,7 +2972,7 @@ ix86_function_regparm (const_tree type, const_tree decl)\n       && flag_unit_at_a_time && !profile_flag)\n     {\n       /* FIXME: remove this CONST_CAST when cgraph.[ch] is constified.  */\n-      struct cgraph_local_info *i = cgraph_local_info ((tree)CONST_CAST(decl));\n+      struct cgraph_local_info *i = cgraph_local_info (CONST_CAST_TREE(decl));\n       if (i && i->local)\n \t{\n \t  int local_regparm, globals = 0, regno;\n@@ -3054,7 +3054,7 @@ ix86_function_sseregparm (const_tree type, const_tree decl)\n   if (decl && TARGET_SSE_MATH && flag_unit_at_a_time && !profile_flag)\n     {\n       /* FIXME: remove this CONST_CAST when cgraph.[ch] is constified.  */\n-      struct cgraph_local_info *i = cgraph_local_info ((tree)CONST_CAST(decl));\n+      struct cgraph_local_info *i = cgraph_local_info (CONST_CAST_TREE(decl));\n       if (i && i->local)\n \treturn TARGET_SSE2 ? 2 : 1;\n     }"}, {"sha": "699a30da9fdd93bcdf53450b1ccb19b10c5cd06f", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1141,7 +1141,7 @@ mmix_encode_section_info (tree decl, rtx rtl, int first)\n       char *newstr;\n \n       /* Why is the return type of ggc_alloc_string const?  */\n-      newstr = (char *) CONST_CAST (ggc_alloc_string (\"\", len + 1));\n+      newstr = CONST_CAST (char *, ggc_alloc_string (\"\", len + 1));\n \n       strcpy (newstr + 1, str);\n       *newstr = '@';"}, {"sha": "f52770d02d7ef7bce5d15df2e693ef738cf46171", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1,3 +1,12 @@\n+2007-09-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* call.c (name_as_c_string): Supply a TYPE for CONST_CAST.\n+\t* decl.c (cp_make_fname_decl): Likewise,\n+\t* parser.c (cp_parser_string_literal): Likewise,\n+\t* tree.c (pod_type_p, zero_init_p): Use CONST_CAST_TREE.\n+\t* typeck.c (cp_type_quals, cp_type_readonly, cp_has_mutable_p):\n+\tLikewise,\n+\n 2007-09-02  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/33208"}, {"sha": "8fb818b64a64e590f49589a4c374b7626d7436f6", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -5388,7 +5388,7 @@ name_as_c_string (tree name, tree type, bool *free_p)\n   if (IDENTIFIER_CTOR_OR_DTOR_P (name))\n     {\n       pretty_name\n-\t= (char *) CONST_CAST (IDENTIFIER_POINTER (constructor_name (type)));\n+\t= CONST_CAST (char *, IDENTIFIER_POINTER (constructor_name (type)));\n       /* For a destructor, add the '~'.  */\n       if (name == complete_dtor_identifier\n \t  || name == base_dtor_identifier\n@@ -5409,7 +5409,7 @@ name_as_c_string (tree name, tree type, bool *free_p)\n       *free_p = true;\n     }\n   else\n-    pretty_name = (char *) CONST_CAST (IDENTIFIER_POINTER (name));\n+    pretty_name = CONST_CAST (char *, IDENTIFIER_POINTER (name));\n \n   return pretty_name;\n }"}, {"sha": "fba084d1cd94a53a565c968f219ab8ccc2f6da6e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -3461,7 +3461,7 @@ cp_make_fname_decl (tree id, int type_dep)\n   tree decl = build_decl (VAR_DECL, id, type);\n \n   if (name)\n-    free (CONST_CAST (name));\n+    free (CONST_CAST (char *, name));\n \n   /* As we're using pushdecl_with_scope, we must set the context.  */\n   DECL_CONTEXT (decl) = current_function_decl;"}, {"sha": "d39721e78fb6e4c1bf06b4fb61b50ffcd507dde2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -2923,7 +2923,7 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok)\n       (parse_in, strs, count, &istr, wide))\n     {\n       value = build_string (istr.len, (const char *)istr.text);\n-      free (CONST_CAST (istr.text));\n+      free (CONST_CAST (unsigned char *, istr.text));\n \n       TREE_TYPE (value) = wide ? wchar_array_type_node : char_array_type_node;\n       value = fix_string_type (value);"}, {"sha": "9a1ad1335e263cca1ccd76398b2087a901919c18", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -2054,7 +2054,7 @@ pod_type_p (const_tree t)\n {\n   /* This CONST_CAST is okay because strip_array_types returns it's\n      argument unmodified and we assign it to a const_tree.  */\n-  t = strip_array_types ((tree)CONST_CAST(t));\n+  t = strip_array_types (CONST_CAST_TREE(t));\n \n   if (t == error_mark_node)\n     return 1;\n@@ -2093,7 +2093,7 @@ zero_init_p (const_tree t)\n {\n   /* This CONST_CAST is okay because strip_array_types returns it's\n      argument unmodified and we assign it to a const_tree.  */\n-  t = strip_array_types ((tree)CONST_CAST(t));\n+  t = strip_array_types (CONST_CAST_TREE(t));\n \n   if (t == error_mark_node)\n     return 1;"}, {"sha": "45988db45974aff38e7ce96212718ceb212b5240", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -6946,7 +6946,7 @@ cp_type_quals (const_tree type)\n {\n   /* This CONST_CAST is okay because strip_array_types returns it's\n      argument unmodified and we assign it to a const_tree.  */\n-  type = strip_array_types ((tree)CONST_CAST(type));\n+  type = strip_array_types (CONST_CAST_TREE(type));\n   if (type == error_mark_node)\n     return TYPE_UNQUALIFIED;\n   return TYPE_QUALS (type);\n@@ -6960,7 +6960,7 @@ cp_type_readonly (const_tree type)\n {\n   /* This CONST_CAST is okay because strip_array_types returns it's\n      argument unmodified and we assign it to a const_tree.  */\n-  type = strip_array_types ((tree)CONST_CAST(type));\n+  type = strip_array_types (CONST_CAST_TREE(type));\n   return TYPE_READONLY (type);\n }\n \n@@ -6971,7 +6971,7 @@ cp_has_mutable_p (const_tree type)\n {\n   /* This CONST_CAST is okay because strip_array_types returns it's\n      argument unmodified and we assign it to a const_tree.  */\n-  type = strip_array_types ((tree)CONST_CAST(type));\n+  type = strip_array_types (CONST_CAST_TREE(type));\n \n   return CLASS_TYPE_P (type) && CLASSTYPE_HAS_MUTABLE (type);\n }"}, {"sha": "f3f460a08f5182597e05f01cb3b6ac4ebbcfff10", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1,3 +1,10 @@\n+2007-09-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gfortranspec.c (lang_specific_driver): Use CONST_CAST2.\n+\t* options.c (gfc_post_options): Supply a TYPE for CONST_CAST.\n+\t* parse.c (parse_omp_structured_block): Likewise,\n+\t* st.c (gfc_free_statement): Likewise,\n+\n 2007-09-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31675"}, {"sha": "be9830386f731b7c9086ea07adfc6dd8e185de87", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -302,7 +302,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   g77_xargc = argc;\n   g77_xargv = argv;\n   g77_newargc = 0;\n-  g77_newargv = (const char **) CONST_CAST (argv);\n+  g77_newargv = CONST_CAST2 (const char **, const char *const *, argv);\n \n   /* First pass through arglist.\n "}, {"sha": "2d11ad7dfd6be44ca367f09ac6f6bbd0388f4e55", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -244,7 +244,7 @@ gfc_post_options (const char **pfilename)\n     gfc_add_include_path (\".\", true);\n \n   if (canon_source_file != gfc_source_file)\n-    gfc_free (CONST_CAST (canon_source_file));\n+    gfc_free (CONST_CAST (char *, canon_source_file));\n \n   /* Decide which form the file will be read in as.  */\n "}, {"sha": "38e62cde597afaf32b4da3f1fe2930685a593ce3", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -2636,7 +2636,7 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n \t      && strcmp (cp->ext.omp_name, new_st.ext.omp_name) != 0))\n \tgfc_error (\"Name after !$omp critical and !$omp end critical does \"\n \t\t   \"not match at %C\");\n-      gfc_free (CONST_CAST (new_st.ext.omp_name));\n+      gfc_free (CONST_CAST (char *, new_st.ext.omp_name));\n       break;\n     case EXEC_OMP_END_SINGLE:\n       cp->ext.omp_clauses->lists[OMP_LIST_COPYPRIVATE]"}, {"sha": "777e4eb8a25b4ac3b98337132a44e1224914e5f7", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -173,7 +173,7 @@ gfc_free_statement (gfc_code *p)\n       break;\n \n     case EXEC_OMP_CRITICAL:\n-      gfc_free (CONST_CAST (p->ext.omp_name));\n+      gfc_free (CONST_CAST (char *, p->ext.omp_name));\n       break;\n \n     case EXEC_OMP_FLUSH:"}, {"sha": "99bcd787f06df36a2c21a0282fe6d9773e2f9288", "filename": "gcc/gcc.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1888,7 +1888,7 @@ set_spec (const char *name, const char *spec)\n \n   /* Free the old spec.  */\n   if (old_spec && sl->alloc_p)\n-    free (CONST_CAST(old_spec));\n+    free (CONST_CAST(char *, old_spec));\n \n   sl->alloc_p = 1;\n }\n@@ -2193,7 +2193,7 @@ read_specs (const char *filename, int main_p)\n \n \t      set_spec (p2, *(sl->ptr_spec));\n \t      if (sl->alloc_p)\n-\t\tfree (CONST_CAST (*(sl->ptr_spec)));\n+\t\tfree (CONST_CAST (char *, *(sl->ptr_spec)));\n \n \t      *(sl->ptr_spec) = \"\";\n \t      sl->alloc_p = 0;\n@@ -2543,18 +2543,18 @@ for_each_path (const struct path_prefix *paths,\n \t Don't repeat any we have already seen.  */\n       if (multi_dir)\n \t{\n-\t  free (CONST_CAST (multi_dir));\n+\t  free (CONST_CAST (char *, multi_dir));\n \t  multi_dir = NULL;\n-\t  free (CONST_CAST (multi_suffix));\n+\t  free (CONST_CAST (char *, multi_suffix));\n \t  multi_suffix = machine_suffix;\n-\t  free (CONST_CAST (just_multi_suffix));\n+\t  free (CONST_CAST (char *, just_multi_suffix));\n \t  just_multi_suffix = just_machine_suffix;\n \t}\n       else\n \tskip_multi_dir = true;\n       if (multi_os_dir)\n \t{\n-\t  free (CONST_CAST (multi_os_dir));\n+\t  free (CONST_CAST (char *, multi_os_dir));\n \t  multi_os_dir = NULL;\n \t}\n       else\n@@ -2563,12 +2563,12 @@ for_each_path (const struct path_prefix *paths,\n \n   if (multi_dir)\n     {\n-      free (CONST_CAST (multi_dir));\n-      free (CONST_CAST (multi_suffix));\n-      free (CONST_CAST (just_multi_suffix));\n+      free (CONST_CAST (char *, multi_dir));\n+      free (CONST_CAST (char *, multi_suffix));\n+      free (CONST_CAST (char *, just_multi_suffix));\n     }\n   if (multi_os_dir)\n-    free (CONST_CAST (multi_os_dir));\n+    free (CONST_CAST (char *, multi_os_dir));\n   if (ret != path)\n     free (path);\n   return ret;\n@@ -2985,7 +2985,7 @@ execute (void)\n       errmsg = pex_run (pex,\n \t\t\t((i + 1 == n_commands ? PEX_LAST : 0)\n \t\t\t | (string == commands[i].prog ? PEX_SEARCH : 0)),\n-\t\t\tstring, (char * const *) CONST_CAST (commands[i].argv),\n+\t\t\tstring, CONST_CAST (char **, commands[i].argv),\n \t\t\tNULL, NULL, &err);\n       if (errmsg != NULL)\n \t{\n@@ -2999,7 +2999,7 @@ execute (void)\n \t}\n \n       if (string != commands[i].prog)\n-\tfree (CONST_CAST (string));\n+\tfree (CONST_CAST (char *, string));\n     }\n \n   execution_count++;\n@@ -5041,7 +5041,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n                   for (i = 0, j = 0; i < max; i++)\n                     if (outfiles[i])\n                       {\n-                        argv[j] = (char *) CONST_CAST (outfiles[i]);\n+                        argv[j] = CONST_CAST (char *, outfiles[i]);\n                         j++;\n                       }\n                   argv[j] = NULL;\n@@ -5997,13 +5997,13 @@ give_switch (int switchnum, int omit_first_word)\n \t      while (length-- && !IS_DIR_SEPARATOR (arg[length]))\n \t\tif (arg[length] == '.')\n \t\t  {\n-\t\t    ((char *)CONST_CAST(arg))[length] = 0;\n+\t\t    (CONST_CAST(char *, arg))[length] = 0;\n \t\t    dot = 1;\n \t\t    break;\n \t\t  }\n \t      do_spec_1 (arg, 1, NULL);\n \t      if (dot)\n-\t\t((char *)CONST_CAST(arg))[length] = '.';\n+\t\t(CONST_CAST(char *, arg))[length] = '.';\n \t      do_spec_1 (suffix_subst, 1, NULL);\n \t    }\n \t  else\n@@ -7456,7 +7456,7 @@ set_multilib_dir (void)\n   if (multilib_dir == NULL && multilib_os_dir != NULL\n       && strcmp (multilib_os_dir, \".\") == 0)\n     {\n-      free (CONST_CAST (multilib_os_dir));\n+      free (CONST_CAST (char *, multilib_os_dir));\n       multilib_os_dir = NULL;\n     }\n   else if (multilib_dir != NULL && multilib_os_dir == NULL)"}, {"sha": "357981ad3cb392616603a3576694a9741b6f953c", "filename": "gcc/gengtype-parse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fgengtype-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fgengtype-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-parse.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -197,9 +197,9 @@ string_seq (void)\n \n       l1 = strlen (s1);\n       l2 = strlen (s2);\n-      buf = XRESIZEVEC (char, CONST_CAST(s1), l1 + l2 + 1);\n+      buf = XRESIZEVEC (char, CONST_CAST(char *, s1), l1 + l2 + 1);\n       memcpy (buf + l1, s2, l2 + 1);\n-      XDELETE (CONST_CAST (s2));\n+      XDELETE (CONST_CAST (char *, s2));\n       s1 = buf;\n     }\n   return s1;\n@@ -221,8 +221,8 @@ typedef_name (void)\n       c2 = require (ID);\n       require (')');\n       r = concat (\"VEC_\", c1, \"_\", c2, (char *)0);\n-      free (CONST_CAST (c1));\n-      free (CONST_CAST (c2));\n+      free (CONST_CAST (char *, c1));\n+      free (CONST_CAST (char *, c2));\n       return r;\n     }\n   else"}, {"sha": "6de6eaeb6a180434938771e0e747377b25df5164", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -398,7 +398,7 @@ block_may_fallthru (const_tree block)\n {\n   /* This CONST_CAST is okay because expr_last returns it's argument\n      unmodified and we assign it to a const_tree.  */\n-  const_tree stmt = expr_last ((tree)CONST_CAST(block));\n+  const_tree stmt = expr_last (CONST_CAST_TREE(block));\n \n   switch (stmt ? TREE_CODE (stmt) : ERROR_MARK)\n     {"}, {"sha": "fcbb9dbae39a23d30e87a39874aebe7d5c0dd87f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1,3 +1,9 @@\n+2007-09-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* jcf-parse.c (read_class, java_parse_file): Supply a TYPE for\n+\tCONST_CAST.\n+\t* jcf.h (JCF_FINISH): Likewise.\n+\n 2007-08-28  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in (java.tags): Don't tag '*.y' files."}, {"sha": "397b1874194acf41827b82e5343c0cd49432cbef", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1301,7 +1301,7 @@ read_class (tree name)\n       if (path_name == 0)\n \treturn 0;\n       else\n-\tfree(CONST_CAST (path_name));\n+\tfree(CONST_CAST (char *, path_name));\n     }\n \n   current_jcf = jcf;\n@@ -1778,7 +1778,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n       file_list = list;\n     }\n   else\n-    list = (char *) CONST_CAST (main_input_filename);\n+    list = CONST_CAST (char *, main_input_filename);\n \n   while (list)\n     {"}, {"sha": "d4de2c57d542c61b0489b33255ec2ef76cc5ac34", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -164,8 +164,8 @@ typedef struct JCF GTY(()) {\n #define JCF_FINISH(JCF) { \\\n   CPOOL_FINISH(&(JCF)->cpool); \\\n   if ((JCF)->buffer) free ((JCF)->buffer); \\\n-  if ((JCF)->filename) free (CONST_CAST ((JCF)->filename)); \\\n-  if ((JCF)->classname) free (CONST_CAST ((JCF)->classname)); \\\n+  if ((JCF)->filename) free (CONST_CAST (char *, (JCF)->filename)); \\\n+  if ((JCF)->classname) free (CONST_CAST (char *, (JCF)->classname)); \\\n   (JCF)->finished = 1; }\n   \n #define CPOOL_INIT(CPOOL) \\"}, {"sha": "cd51764f03adbfda01360920a64e737944296946", "filename": "gcc/jump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -302,9 +302,9 @@ reversed_comparison_code_parts (enum rtx_code code, const_rtx arg0,\n       /* These CONST_CAST's are okay because prev_nonnote_insn just\n \t returns it's argument and we assign it to a const_rtx\n \t variable.  */\n-      for (prev = prev_nonnote_insn ((rtx)(CONST_CAST(insn)));\n+      for (prev = prev_nonnote_insn (CONST_CAST_RTX(insn));\n \t   prev != 0 && !LABEL_P (prev);\n-\t   prev = prev_nonnote_insn ((rtx)(CONST_CAST(prev))))\n+\t   prev = prev_nonnote_insn (CONST_CAST_RTX(prev)))\n \t{\n \t  const_rtx set = set_of (arg0, prev);\n \t  if (set && GET_CODE (set) == SET"}, {"sha": "e2f0676e192e0b8aef70f3fb69c8c23ea6f2a9a9", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1136,7 +1136,7 @@ execute_one_pass (struct tree_opt_pass *pass)\n   /* Flush and close dump file.  */\n   if (dump_file_name)\n     {\n-      free (CONST_CAST (dump_file_name));\n+      free (CONST_CAST (char *, dump_file_name));\n       dump_file_name = NULL;\n     }\n "}, {"sha": "c72203c22219082a5ee993143f73ac42e66cf1aa", "filename": "gcc/prefix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -266,7 +266,7 @@ update_path (const char *path, const char *key)\n \n       result = concat (key, &path[len], NULL);\n       if (free_key)\n-\tfree (CONST_CAST (key));\n+\tfree (CONST_CAST (char *, key));\n       result = translate_name (result);\n     }\n   else"}, {"sha": "8f55df29a24b8ca2c58d8372a7c4f1aa37435b81", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -633,7 +633,7 @@ pp_base_destroy_prefix (pretty_printer *pp)\n {\n   if (pp->prefix != NULL)\n     {\n-      free (CONST_CAST (pp->prefix));\n+      free (CONST_CAST (char *, pp->prefix));\n       pp->prefix = NULL;\n     }\n }"}, {"sha": "3c4331e8581cb6c5f60c18a70b4fe4de4720df98", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -3395,7 +3395,7 @@ keep_with_call_p (const_rtx insn)\n \t  /* This CONST_CAST is okay because next_nonnote_insn just\n \t     returns it's argument and we assign it to a const_rtx\n \t     variable.  */\n-\t  const_rtx i2 = next_nonnote_insn ((rtx)CONST_CAST(insn));\n+\t  const_rtx i2 = next_nonnote_insn (CONST_CAST_RTX(insn));\n \t  if (i2 && keep_with_call_p (i2))\n \t    return true;\n \t}"}, {"sha": "1696b9c92b496aca456cd4a298bcd46bf65b6501", "filename": "gcc/system.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -784,10 +784,14 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \n #if defined(__GNUC__) && GCC_VERSION != 4000\n /* GCC 4.0.x has a bug where it may ICE on this expression.  */\n-#define CONST_CAST(X) ((__extension__(union {__typeof(X)_q; void *_v;})(X))._v)\n+#define CONST_CAST2(TOTYPE,FROMTYPE,X) ((__extension__(union {FROMTYPE _q; TOTYPE _nq;})(X))._nq)\n #else\n-#define CONST_CAST(X) ((void*)(X))\n+#define CONST_CAST2(TOTYPE,FROMTYPE,X) ((TOTYPE)(FROMTYPE)(X))\n #endif\n+#define CONST_CAST(TYPE,X) CONST_CAST2(TYPE, const TYPE, (X))\n+#define CONST_CAST_TREE(X) CONST_CAST(union tree_node *, (X))\n+#define CONST_CAST_RTX(X) CONST_CAST(struct rtx_def *, (X))\n+#define CONST_CAST_BB(X) CONST_CAST(struct basic_block_def *, (X))\n \n /* Activate -Wcast-qual as a warning (not an error/-Werror).  */\n #if GCC_VERSION >= 4003"}, {"sha": "b01d7ab8b93e6a013f936d9e9125f3968b76816f", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1160,7 +1160,7 @@ tree_can_merge_blocks_p (const_basic_block a, const_basic_block b)\n      cannot merge the blocks.  */\n   /* This CONST_CAST is okay because last_stmt doesn't modify its\n      argument and the return value is assign to a const_tree.  */\n-  stmt = last_stmt ((basic_block)CONST_CAST(a));\n+  stmt = last_stmt (CONST_CAST_BB(a));\n   if (stmt && stmt_ends_bb_p (stmt))\n     return false;\n \n@@ -5922,7 +5922,7 @@ tree_block_ends_with_condjump_p (const_basic_block bb)\n {\n   /* This CONST_CAST is okay because last_stmt doesn't modify its\n      argument and the return value is not modified.  */\n-  const_tree stmt = last_stmt ((basic_block)CONST_CAST(bb));\n+  const_tree stmt = last_stmt (CONST_CAST_BB(bb));\n   return (stmt && TREE_CODE (stmt) == COND_EXPR);\n }\n "}, {"sha": "f8aed147ccf6a01cad791975bba9b92ceb93cb5a", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -157,7 +157,7 @@ lookup_stmt_eh_region_fn (struct function *ifun, const_tree t)\n \n   /* The CONST_CAST is okay because we don't modify n.stmt throughout\n      its scope, or the scope of p.  */\n-  n.stmt = (tree) CONST_CAST (t);\n+  n.stmt = CONST_CAST_TREE (t);\n   p = (struct throw_stmt_node *) htab_find (get_eh_throw_stmt_table (ifun),\n                                             &n);\n "}, {"sha": "289b5c957525eef85e4a3517639b52047310e6bf", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1194,8 +1194,8 @@ build_string (int len, const char *str)\n   TREE_CONSTANT (s) = 1;\n   TREE_INVARIANT (s) = 1;\n   TREE_STRING_LENGTH (s) = len;\n-  memcpy (CONST_CAST (TREE_STRING_POINTER (s)), str, len);\n-  ((char *) CONST_CAST (TREE_STRING_POINTER (s)))[len] = '\\0';\n+  memcpy (s->string.str, str, len);\n+  s->string.str[len] = '\\0';\n \n   return s;\n }\n@@ -4795,7 +4795,7 @@ attribute_list_contained (const_tree l1, const_tree l2)\n \t modify its argument and the return value is assigned to a\n \t const_tree.  */\n       for (attr = lookup_attribute (IDENTIFIER_POINTER (TREE_PURPOSE (t2)),\n-\t\t\t\t    (tree)CONST_CAST(l1));\n+\t\t\t\t    CONST_CAST_TREE(l1));\n \t   attr != NULL_TREE;\n \t   attr = lookup_attribute (IDENTIFIER_POINTER (TREE_PURPOSE (t2)),\n \t\t\t\t    TREE_CHAIN (attr)))"}]}