{"sha": "5490d6045a06a882ff31eacb639404dc0c9ef89a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ5MGQ2MDQ1YTA2YTg4MmZmMzFlYWNiNjM5NDA0ZGMwYzllZjg5YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-01-12T18:51:27Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-01-12T18:51:27Z"}, "message": "cpp.texi, [...]: Consistently refer to ISO C instead of ANSI C.\n\n\t* cpp.texi, extend.texi, gcc.texi, install.texi, invoke.texi,\n\ttm.texi: Consistently refer to ISO C instead of ANSI C.  Refer to\n\t-std options alongside references to -ansi.  Update some\n\tdocumentation for C99.\n\t* cpp.1: Regenerate.\n\nFrom-SVN: r38956", "tree": {"sha": "fb4bf44c735f9abf9e38f7f9106636f36c297176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb4bf44c735f9abf9e38f7f9106636f36c297176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5490d6045a06a882ff31eacb639404dc0c9ef89a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5490d6045a06a882ff31eacb639404dc0c9ef89a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5490d6045a06a882ff31eacb639404dc0c9ef89a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5490d6045a06a882ff31eacb639404dc0c9ef89a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bedc7537144d97956664af172c6d6180d4467afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedc7537144d97956664af172c6d6180d4467afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bedc7537144d97956664af172c6d6180d4467afc"}], "stats": {"total": 226, "additions": 153, "deletions": 73}, "files": [{"sha": "1de53d4f1b3d32ae63a706d8abb2267aa1fb0ac2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5490d6045a06a882ff31eacb639404dc0c9ef89a", "patch": "@@ -1,3 +1,11 @@\n+2001-01-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* cpp.texi, extend.texi, gcc.texi, install.texi, invoke.texi,\n+\ttm.texi: Consistently refer to ISO C instead of ANSI C.  Refer to\n+\t-std options alongside references to -ansi.  Update some\n+\tdocumentation for C99.\n+\t* cpp.1: Regenerate.\n+\n 2001-01-12  Andreas Jaeger  <aj@suse.de>\n \n \t* haifa-sched.c (restore_line_notes): Remove argument block B"}, {"sha": "aa00123c8ad81a12ab7488d4a3bddf63f98c6fc1", "filename": "gcc/cpp.1", "status": "modified", "additions": 78, "deletions": 33, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Fcpp.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Fcpp.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.1?ref=5490d6045a06a882ff31eacb639404dc0c9ef89a", "patch": "@@ -1,5 +1,5 @@\n .\\\" Automatically generated by Pod::Man version 1.1\n-.\\\" Wed Jan  3 20:06:19 2001\n+.\\\" Fri Jan 12 18:47:56 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -138,7 +138,7 @@\n .\\\" ======================================================================\n .\\\"\n .IX Title \"CPP 1\"\n-.TH CPP 1 \"gcc-2.97\" \"2001-01-03\" \"GNU\"\n+.TH CPP 1 \"gcc-2.97\" \"2001-01-12\" \"GNU\"\n .UC\n .SH \"NAME\"\n cpp \\- The C Preprocessor\n@@ -149,7 +149,8 @@ cpp [\\fB\\-P\\fR] [\\fB\\-C\\fR] [\\fB\\-gcc\\fR] [\\fB\\-traditional\\fR]\n     [\\fB\\-W\\fR\\fIwarn\\fR...] [\\fB\\-I\\fR\\fIdir\\fR...]\n     [\\fB\\-D\\fR\\fImacro\\fR[=\\fIdefn\\fR]...] [\\fB\\-U\\fR\\fImacro\\fR]\n     [\\fB\\-A\\fR\\fIpredicate\\fR(\\fIanswer\\fR)]\n-    [\\fB\\-M\\fR|\\fB\\-MM\\fR|\\fB\\-MD\\fR|\\fB\\-MMD\\fR [\\fB\\-MG\\fR]]\n+    [\\fB\\-M\\fR|\\fB\\-MM\\fR][\\fB\\-MG\\fR][\\fB\\-MF\\fR\\fIfilename\\fR]\n+    [\\fB\\-MP\\fR][\\fB\\-MQ\\fR\\fItarget\\fR...][\\fB\\-MT\\fR\\fItarget\\fR...]\n     [\\fB\\-x\\fR \\fIlanguage\\fR] [\\fB\\-std=\\fR\\fIstandard\\fR]\n     \\fIinfile\\fR \\fIoutfile\\fR\n .PP\n@@ -417,6 +418,9 @@ the current one and which are searched after.\n Do not search the standard system directories for header files.\n Only the directories you have specified with \\fB\\-I\\fR options\n (and the current directory, if appropriate) are searched.\n+.Sp\n+By using both \\fB\\-nostdinc\\fR and \\fB\\-I-\\fR, you can limit the include-file\n+search path to only those directories you specify explicitly.\n .Ip \"\\fB\\-nostdinc++\\fR\" 4\n .IX Item \"-nostdinc++\"\n Do not search for header files in the \\*(C+\\-specific standard directories,\n@@ -442,11 +446,17 @@ may need to use the shell's quoting syntax to protect characters such as\n spaces that have a meaning in the shell syntax.  If you use more than\n one \\fB\\-D\\fR for the same \\fIname\\fR, the rightmost definition takes\n effect.\n+.Sp\n+Any \\fB\\-D\\fR and \\fB\\-U\\fR options on the command line are processed in\n+order, and always before \\fB\\-imacros\\fR \\fIfile\\fR, regardless of the\n+order in which they are written.\n .Ip \"\\fB\\-U\\fR \\fIname\\fR\" 4\n .IX Item \"-U name\"\n-Do not predefine \\fIname\\fR.  If both \\fB\\-U\\fR and \\fB\\-D\\fR are\n-specified for one name, whichever one appears later on the command line\n-wins.\n+Do not predefine \\fIname\\fR.\n+.Sp\n+Any \\fB\\-D\\fR and \\fB\\-U\\fR options on the command line are processed in\n+order, and always before \\fB\\-imacros\\fR \\fIfile\\fR, regardless of the\n+order in which they are written.\n .Ip \"\\fB\\-undef\\fR\" 4\n .IX Item \"-undef\"\n Do not predefine any nonstandard macros.\n@@ -493,42 +503,77 @@ Like \\fB\\-dD\\fR, but emit only the macro names, not their expansions.\n .IX Item \"-dI\"\n Output \\fB#include\\fR directives in addition to the result of\n preprocessing.\n-.Ip \"\\fB\\-M [\\-MG]\\fR\" 4\n-.IX Item \"-M [-MG]\"\n+.Ip \"\\fB\\-M\\fR\" 4\n+.IX Item \"-M\"\n Instead of outputting the result of preprocessing, output a rule\n suitable for \\f(CW\\*(C`make\\*(C'\\fR describing the dependencies of the main source\n file.  The preprocessor outputs one \\f(CW\\*(C`make\\*(C'\\fR rule containing the\n object file name for that source file, a colon, and the names of all the\n included files.  If there are many included files then the rule is split\n into several lines using \\fB\\e\\fR\\-newline.\n-.Sp\n-\\&\\fB\\-MG\\fR says to treat missing header files as generated files and\n-assume they live in the same directory as the source file.  It must be\n-specified in addition to \\fB\\-M\\fR.\n-.Sp\n-This feature is used in automatic updating of makefiles.\n-.Ip \"\\fB\\-MM [\\-MG]\\fR\" 4\n-.IX Item \"-MM [-MG]\"\n-Like \\fB\\-M\\fR but mention only the files included with \\fB#include\n+.Ip \"\\fB\\-MM\\fR\" 4\n+.IX Item \"-MM\"\n+Like \\fB\\-M\\fR, but mention only the files included with \\fB#include\n \"\\fR\\fIfile\\fR\\fB\"\\fR.  System header files included with \\fB#include\n <\\fR\\fIfile\\fR\\fB>\\fR are omitted.\n-.Ip \"\\fB\\-MD\\fR \\fIfile\\fR\" 4\n-.IX Item \"-MD file\"\n-Like \\fB\\-M\\fR but the dependency information is written to \\fIfile\\fR.\n-This is in addition to compiling the file as specified \\-\\-\\- \\fB\\-MD\\fR\n-does not inhibit ordinary compilation the way \\fB\\-M\\fR does.\n+.Ip \"\\fB\\-MF\\fR \\fIfile\\fR\" 4\n+.IX Item \"-MF file\"\n+When used with \\fB\\-M\\fR or \\fB\\-MM\\fR, specifies a file to write the\n+dependencies to.  This allows the preprocessor to write the preprocessed\n+file to stdout normally.  If no \\fB\\-MF\\fR switch is given, \\s-1CPP\\s0 sends\n+the rules to stdout and suppresses normal preprocessed output.\n+.Ip \"\\fB\\-MG\\fR\" 4\n+.IX Item \"-MG\"\n+When used with \\fB\\-M\\fR or \\fB\\-MM\\fR, \\fB\\-MG\\fR says to treat missing\n+header files as generated files and assume they live in the same\n+directory as the source file.  It suppresses preprocessed output, as a\n+missing header file is ordinarily an error.\n+.Sp\n+This feature is used in automatic updating of makefiles.\n+.Ip \"\\fB\\-MP\\fR\" 4\n+.IX Item \"-MP\"\n+This option instructs \\s-1CPP\\s0 to add a phony target for each dependency\n+other than the main file, causing each to depend on nothing.  These\n+dummy rules work around errors \\f(CW\\*(C`make\\*(C'\\fR gives if you remove header\n+files without updating the \\f(CW\\*(C`Makefile\\*(C'\\fR to match.\n+.Sp\n+This is typical output:\\-\n+.Sp\n+.Vb 1\n+\\&        /tmp/test.o: /tmp/test.c /tmp/test.h\n+.Ve\n+.Vb 1\n+\\&        /tmp/test.h:\n+.Ve\n+.Ip \"\\fB\\-MQ\\fR \\fItarget\\fR\" 4\n+.IX Item \"-MQ target\"\n+.PD 0\n+.Ip \"\\fB\\-MT\\fR \\fItarget\\fR\" 4\n+.IX Item \"-MT target\"\n+.PD\n+By default \\s-1CPP\\s0 uses the main file name, including any path, and appends\n+the object suffix, normally ``.o'', to it to obtain the name of the\n+target for dependency generation.  With \\fB\\-MT\\fR you can specify a\n+target yourself, overriding the default one.\n+.Sp\n+If you want multiple targets, you can specify them as a single argument\n+to \\fB\\-MT\\fR, or use multiple \\fB\\-MT\\fR options.\n .Sp\n-When invoking \\f(CW\\*(C`gcc\\*(C'\\fR, do not specify the \\fIfile\\fR argument.\n-\\&\\f(CW\\*(C`gcc\\*(C'\\fR will create file names made by replacing \\*(L\".c\\*(R\" with \\*(L\".d\\*(R\" at\n-the end of the input file names.\n+The targets you specify are output in the order they appear on the\n+command line.  \\fB\\-MQ\\fR is identical to \\fB\\-MT\\fR, except that the\n+target name is quoted for Make, but with \\fB\\-MT\\fR it isn't.  For\n+example, \\-MT '$(objpfx)foo.o' gives\n .Sp\n-In Mach, you can use the utility \\f(CW\\*(C`md\\*(C'\\fR to merge multiple dependency\n-files into a single dependency file suitable for using with the\n-\\&\\fBmake\\fR command.\n-.Ip \"\\fB\\-MMD\\fR \\fIfile\\fR\" 4\n-.IX Item \"-MMD file\"\n-Like \\fB\\-MD\\fR except mention only user header files, not system\n-header files.\n+.Vb 1\n+\\&        $(objpfx)foo.o: /tmp/foo.c\n+.Ve\n+but \\-MQ '$(objpfx)foo.o' gives\n+.Sp\n+.Vb 1\n+\\&        $$(objpfx)foo.o: /tmp/foo.c\n+.Ve\n+The default target is automatically quoted, as if it were given with\n+\\&\\fB\\-MQ\\fR.\n .Ip \"\\fB\\-H\\fR\" 4\n .IX Item \"-H\"\n Print the name of each header file used, in addition to other normal\n@@ -668,7 +713,7 @@ common extension.\n .SH \"COPYRIGHT\"\n .IX Header \"COPYRIGHT\"\n Copyright (c) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,\n-1997, 1998, 1999, 2000\n+1997, 1998, 1999, 2000, 2001\n Free Software Foundation, Inc.\n .PP\n Permission is granted to make and distribute verbatim copies of"}, {"sha": "02b6253c53562f09c51069c8949f3abf9c9d6152", "filename": "gcc/cpp.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=5490d6045a06a882ff31eacb639404dc0c9ef89a", "patch": "@@ -42,7 +42,7 @@ into another language, under the above conditions for modified versions.\n @titlepage\n @c @finalout\n @title The C Preprocessor\n-@subtitle Last revised November 2000\n+@subtitle Last revised January 2001\n @subtitle for GCC version 2\n @author Richard M. Stallman\n @page\n@@ -1156,8 +1156,9 @@ conformance with the standard.\n \n @item __STRICT_ANSI__\n @findex __STRICT_ANSI__\n-GNU C defines this macro if and only if the @samp{-ansi} switch was\n-specified when GNU C was invoked.  Its definition is the null string.\n+GNU C defines this macro if and only if the @option{-ansi} switch, or a\n+@option{-std} switch specifying strict conformance to some version of ISO C,\n+was specified when GNU C was invoked.  Its definition is the null string.\n This macro exists primarily to direct certain GNU header files not to\n define certain traditional Unix constructs which are incompatible with\n ISO C@."}, {"sha": "45dda7cb3197d4f70d6f91a65b4f96979d3750de", "filename": "gcc/extend.texi", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=5490d6045a06a882ff31eacb639404dc0c9ef89a", "patch": "@@ -7,7 +7,7 @@\n @cindex extensions, C language\n @cindex C language extensions\n \n-GNU C provides several language features not found in ANSI standard C.\n+GNU C provides several language features not found in ISO standard C.\n (The @samp{-pedantic} option directs GNU CC to print a warning message if\n any of these features is used.)  To test for the availability of these\n features in conditional compilation, check for a predefined macro\n@@ -17,6 +17,13 @@ These extensions are available in C and Objective C.  Most of them are\n also available in C++.  @xref{C++ Extensions,,Extensions to the\n C++ Language}, for extensions that apply @emph{only} to C++.\n \n+@c FIXME: document clearly which features are in ISO C99, but also\n+@c accepted as extensions for -std=gnu89 and possibly for C++.\n+@c See PR other/930.\n+\n+@c FIXME: the documentation for preprocessor extensions here is out of\n+@c date.  See PR other/928.\n+\n @c The only difference between the two versions of this menu is that the\n @c version for clear INTERNALS has an extra node, \"Constraints\" (which\n @c appears in a separate chapter in the other version of the manual).\n@@ -590,7 +597,7 @@ typeof (int *)\n @noindent\n Here the type described is that of pointers to @code{int}.\n \n-If you are writing a header file that must work when included in ANSI C\n+If you are writing a header file that must work when included in ISO C\n programs, write @code{__typeof__} instead of @code{typeof}.\n @xref{Alternate Keywords}.\n \n@@ -1932,7 +1939,7 @@ Preprocessing Directives, cpp, The C Preprocessor}.\n @cindex old-style function definitions\n @cindex promotion of formal parameters\n \n-GNU C extends ANSI C to allow a function prototype to override a later\n+GNU C extends ISO C to allow a function prototype to override a later\n old-style non-prototype definition.  Consider the following example:\n \n @example\n@@ -1955,13 +1962,13 @@ isroot (x)   /* ??? lossage here ??? */\n @}\n @end example\n \n-Suppose the type @code{uid_t} happens to be @code{short}.  ANSI C does\n+Suppose the type @code{uid_t} happens to be @code{short}.  ISO C does\n not allow this example, because subword arguments in old-style\n non-prototype definitions are promoted.  Therefore in this example the\n function definition's argument is really an @code{int}, which does not\n match the prototype argument type of @code{short}.\n \n-This restriction of ANSI C makes it hard to write code that is portable\n+This restriction of ISO C makes it hard to write code that is portable\n to traditional C compilers, because the programmer does not know\n whether the @code{uid_t} type is @code{short}, @code{int}, or\n @code{long}.  Therefore, in cases like these GNU C allows a prototype\n@@ -1994,7 +2001,8 @@ In GNU C, you may use C++ style comments, which start with @samp{//} and\n continue until the end of the line.  Many other C implementations allow\n such comments, and they are likely to be in a future C standard.\n However, C++ style comments are not recognized if you specify\n-@w{@samp{-ansi}} or @w{@samp{-traditional}}, since they are incompatible\n+@w{@samp{-ansi}}, a @option{-std} option specifying a version of ISO C\n+before C99, or @w{@samp{-traditional}}, since they are incompatible\n with traditional constructs like @code{dividend//*comment*/divisor}.\n \n @node Dollar Signs\n@@ -2336,7 +2344,7 @@ store) instructions when copying one variable of type @code{struct S} to\n another, thus improving run-time efficiency.\n \n Note that the alignment of any given @code{struct} or @code{union} type\n-is required by the ANSI C standard to be at least a perfect multiple of\n+is required by the ISO C standard to be at least a perfect multiple of\n the lowest common multiple of the alignments of all of the members of\n the @code{struct} or @code{union} in question.  This means that you @emph{can}\n effectively adjust the alignment of a @code{struct} or @code{union}\n@@ -2512,7 +2520,7 @@ inc (int *a)\n @}\n @end example\n \n-(If you are writing a header file to be included in ANSI C programs, write\n+(If you are writing a header file to be included in ISO C programs, write\n @code{__inline__} instead of @code{inline}.  @xref{Alternate Keywords}.)\n You can also make all ``simple enough'' functions inline with the option\n @samp{-finline-functions}. \n@@ -2840,7 +2848,7 @@ For reasons similar to those described above, it is not possible to give\n an assembler instruction access to the condition code left by previous\n instructions.\n \n-If you are writing a header file that should be includable in ANSI C\n+If you are writing a header file that should be includable in ISO C\n programs, write @code{__asm__} instead of @code{asm}.  @xref{Alternate\n Keywords}.\n \n@@ -3165,15 +3173,20 @@ be deleted or moved or simplified.\n @cindex alternate keywords\n @cindex keywords, alternate\n \n-The option @samp{-traditional} disables certain keywords; @samp{-ansi}\n-disables certain others.  This causes trouble when you want to use GNU C\n-extensions, or ANSI C features, in a general-purpose header file that\n-should be usable by all programs, including ANSI C programs and traditional\n-ones.  The keywords @code{asm}, @code{typeof} and @code{inline} cannot be\n-used since they won't work in a program compiled with @samp{-ansi}, while\n-the keywords @code{const}, @code{volatile}, @code{signed}, @code{typeof}\n-and @code{inline} won't work in a program compiled with\n-@samp{-traditional}.@refill\n+The option @option{-traditional} disables certain keywords;\n+@option{-ansi} and the various @option{-std} options disable certain\n+others.  This causes trouble when you want to use GNU C extensions, or\n+ISO C features, in a general-purpose header file that should be usable\n+by all programs, including ISO C programs and traditional ones.  The\n+keywords @code{asm}, @code{typeof} and @code{inline} cannot be used\n+since they won't work in a program compiled with @option{-ansi}\n+(although @code{inline} can be used in a program compiled with\n+@option{-std=c99}), while the keywords @code{const}, @code{volatile},\n+@code{signed}, @code{typeof} and @code{inline} won't work in a program\n+compiled with @option{-traditional}.  The ISO C99 keyword\n+@code{restrict} is only available when @option{-std=gnu99} (which will\n+eventually be the default) or @option{-std=c99} (or the equivalent\n+@option{-std=iso9899:1999}) is used.@refill\n \n The way to solve these problems is to put @samp{__} at the beginning and\n end of each problematical keyword.  For example, use @code{__asm__}"}, {"sha": "6fbc6e9f9d2d19aa87c6bfee53867445f1b3970b", "filename": "gcc/gcc.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=5490d6045a06a882ff31eacb639404dc0c9ef89a", "patch": "@@ -151,7 +151,7 @@ instead of in the original English.\n @sp 2\n @center Richard M. Stallman\n @sp 3\n-@center Last updated 20 December 2000\n+@center Last updated 12 January 2001\n @sp 1\n @c The version number appears five times more in this file.\n \n@@ -2192,7 +2192,8 @@ is relevant to the design of plain @samp{gcc} without @samp{-ansi} only\n for pragmatic reasons, not as a requirement.\n \n GCC normally defines @code{__STDC__} to be 1, and in addition\n-defines @code{__STRICT_ANSI__} if you specify the @samp{-ansi} option.\n+defines @code{__STRICT_ANSI__} if you specify the @option{-ansi} option,\n+or a @option{-std} option for strict conformance to some version of ISO C.\n On some hosts, system include files use a different convention, where\n @code{__STDC__} is normally 0, but is 1 if the user specifies strict\n conformance to the C Standard.  GCC follows the host convention when"}, {"sha": "65397a4df6b31f8f0f54d57b134c42731c73a92a", "filename": "gcc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finstall.texi?ref=5490d6045a06a882ff31eacb639404dc0c9ef89a", "patch": "@@ -2267,7 +2267,7 @@ stores the fixed include files.  A cross compiled GNU CC runs\n @code{fixincludes} on the header files in @file{$(tooldir)/include}.\n (If the cross compilation header files need to be fixed, they must be\n installed before GNU CC is built.  If the cross compilation header files\n-are already suitable for ANSI C and GNU CC, nothing special need be\n+are already suitable for ISO C and GNU CC, nothing special need be\n done).\n \n @code{GPLUSPLUS_INCLUDE_DIR} means the same thing for native and cross.  It"}, {"sha": "667a0642538e445fd4beb9287845ef357ab67f5b", "filename": "gcc/invoke.texi", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=5490d6045a06a882ff31eacb639404dc0c9ef89a", "patch": "@@ -908,6 +908,11 @@ features of newer standards in so far as they do not conflict with\n previous C standards.  For example, you may use @code{__restrict__} even\n when @option{-std=c99} is not specified.\n \n+The @option{-std} options specifying some version of ISO C have the same\n+effects as @option{-ansi}, except that features that were not in ISO C89\n+but are in the specified version (for example, @samp{//} comments and\n+the @code{inline} keyword in ISO C99) are not disabled.\n+\n @xref{Standards,,Language Standards Supported by GCC}, for details of\n these standard versions.\n \n@@ -919,15 +924,19 @@ instead.  @samp{-ansi} implies @samp{-fno-asm}.\n \n In C++, this switch only affects the @code{typeof} keyword, since\n @code{asm} and @code{inline} are standard keywords.  You may want to\n-use the @samp{-fno-gnu-keywords} flag instead, which has the same effect.\n+use the @samp{-fno-gnu-keywords} flag instead, which has the same\n+effect.  In C99 mode (@option{-std=c99} or @option{-std=gnu99}), this\n+switch only affects the @code{asm} and @code{typeof} keywords, since\n+@code{inline} is a standard keyword in ISO C99.\n \n @item -fno-builtin\n @cindex builtin functions\n Don't recognize builtin functions that do not begin with\n @samp{__builtin_} as prefix.  @xref{Other Builtins,,Other built-in\n functions provided by GNU CC}, for details of the functions affected,\n-including those which are not builtin functions when @samp{-ansi} is\n-used because they do not have an ISO standard meaning.\n+including those which are not builtin functions when @option{-ansi} or\n+@option{-std} options for strict ISO C conformance are used because they\n+do not have an ISO standard meaning.\n \n GCC normally generates special code to handle certain builtin functions\n more efficiently; for instance, calls to @code{alloca} may become single\n@@ -960,7 +969,8 @@ freestanding and hosted environments.\n \n @item -trigraphs\n Support ISO C trigraphs.  You don't want to know about this\n-brain-damage.  The @samp{-ansi} option implies @samp{-trigraphs}.\n+brain-damage.  The @option{-ansi} option (and @option{-std} options for\n+strict ISO C conformance) implies @option{-trigraphs}.\n \n @cindex traditional C language\n @cindex C language, traditional\n@@ -1559,7 +1569,8 @@ programs that do not follow ISO C and ISO C++.  For ISO C, follows the\n version of the ISO C standard specified by any @samp{-std} option used.\n \n Valid ISO C and ISO C++ programs should compile properly with or without\n-this option (though a rare few will require @samp{-ansi}).  However,\n+this option (though a rare few will require @option{-ansi} or a\n+@option{-std} option specifying the required version of ISO C).  However,\n without this option, certain GNU extensions and traditional C and C++\n features are supported as well.  With this option, they are rejected.\n "}, {"sha": "402101f994a438ce1376896a72bb1b84856679c3", "filename": "gcc/tm.texi", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5490d6045a06a882ff31eacb639404dc0c9ef89a/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=5490d6045a06a882ff31eacb639404dc0c9ef89a", "patch": "@@ -547,13 +547,14 @@ Here are run-time target specifications.\n @item CPP_PREDEFINES\n Define this to be a string constant containing @samp{-D} options to\n define the predefined macros that identify this machine and system.\n-These macros will be predefined unless the @samp{-ansi} option is\n-specified.\n+These macros will be predefined unless the @option{-ansi} option (or a\n+@option{-std} option for strict ISO C conformance) is specified.\n \n In addition, a parallel set of macros are predefined, whose names are\n made by appending @samp{__} at the beginning and at the end.  These\n-@samp{__} macros are permitted by the ANSI standard, so they are\n-predefined regardless of whether @samp{-ansi} is specified.\n+@samp{__} macros are permitted by the ISO standard, so they are\n+predefined regardless of whether @option{-ansi} or a @option{-std} option\n+is specified.\n \n For example, on the Sun, one can use the following value:\n \n@@ -3001,7 +3002,7 @@ RTX may have a first operand of zero.  This indicates that the entire\n argument is also stored on the stack.\n \n @cindex @file{stdarg.h} and register arguments\n-The usual way to make the ANSI library @file{stdarg.h} work on a machine\n+The usual way to make the ISO library @file{stdarg.h} work on a machine\n where some arguments are usually passed in registers, is to cause\n nameless arguments to be passed on the stack instead.  This is done\n by making @code{FUNCTION_ARG} return 0 whenever @var{named} is 0.\n@@ -3900,10 +3901,10 @@ on the stack.  Other machines require their own implementations of\n varargs, and the two machine independent header files must have\n conditionals to include it.\n \n-ANSI @file{stdarg.h} differs from traditional @file{varargs.h} mainly in\n+ISO @file{stdarg.h} differs from traditional @file{varargs.h} mainly in\n the calling convention for @code{va_start}.  The traditional\n implementation takes just one argument, which is the variable in which\n-to store the argument pointer.  The ANSI implementation of\n+to store the argument pointer.  The ISO implementation of\n @code{va_start} takes an additional second argument.  The user is\n supposed to write the last named argument of the function here.\n \n@@ -3915,7 +3916,7 @@ below.\n @findex __builtin_saveregs\n @item __builtin_saveregs ()\n Use this built-in function to save the argument registers in memory so\n-that the varargs mechanism can access them.  Both ANSI and traditional\n+that the varargs mechanism can access them.  Both ISO and traditional\n versions of @code{va_start} must use @code{__builtin_saveregs}, unless\n you use @code{SETUP_INCOMING_VARARGS} (see below) instead.\n \n@@ -4345,8 +4346,8 @@ macro, a reasonable default is used.\n @cindex @code{bzero}, implicit usage\n @cindex @code{memset}, implicit usage\n @item TARGET_MEM_FUNCTIONS\n-Define this macro if GCC should generate calls to the System V\n-(and ANSI C) library functions @code{memcpy} and @code{memset}\n+Define this macro if GCC should generate calls to the ISO C\n+(and System V) library functions @code{memcpy} and @code{memset}\n rather than the BSD functions @code{bcopy} and @code{bzero}.\n \n @findex LIBGCC_NEEDS_DOUBLE\n@@ -8159,7 +8160,7 @@ appropriate rtl instructions.  It is used only when compiling the end of\n @item NEED_ATEXIT\n @findex NEED_ATEXIT\n Define this if the target system lacks the function @code{atexit}\n-from the ANSI C standard.  If this macro is defined, a default definition\n+from the ISO C standard.  If this macro is defined, a default definition\n will be provided to support C++.  If @code{ON_EXIT} is not defined,\n a default @code{exit} function will also be provided.\n "}]}