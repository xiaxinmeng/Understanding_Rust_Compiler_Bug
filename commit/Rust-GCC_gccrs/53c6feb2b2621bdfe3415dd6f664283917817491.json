{"sha": "53c6feb2b2621bdfe3415dd6f664283917817491", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjNmZlYjJiMjYyMWJkZmUzNDE1ZGQ2ZjY2NDI4MzkxNzgxNzQ5MQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2018-09-18T07:04:15Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2018-09-18T07:04:15Z"}, "message": "Use v2 map syntax in libgcc-unwind.map if Solaris ld supports it\n\n\t* configure.ac (solaris_ld_v2_maps): New test.\n\t* configure: Regenerate.\n\t* Makefile.in (solaris_ld_v2_maps): New variable.\n\t* config/t-slibgcc-sld (libgcc-unwind.map): Emit v2 mapfile syntax\n\tif supported.\n\nFrom-SVN: r264382", "tree": {"sha": "7410a7bb6984cef1930df018183c75fc75a692b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7410a7bb6984cef1930df018183c75fc75a692b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53c6feb2b2621bdfe3415dd6f664283917817491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c6feb2b2621bdfe3415dd6f664283917817491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c6feb2b2621bdfe3415dd6f664283917817491", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c6feb2b2621bdfe3415dd6f664283917817491/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6bf23cce3ed63800f4545cd9a79e3500b24625c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bf23cce3ed63800f4545cd9a79e3500b24625c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6bf23cce3ed63800f4545cd9a79e3500b24625c"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "3a7602ff24c161c1adefa64273fe1ffbaca3592c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c6feb2b2621bdfe3415dd6f664283917817491/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c6feb2b2621bdfe3415dd6f664283917817491/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=53c6feb2b2621bdfe3415dd6f664283917817491", "patch": "@@ -1,3 +1,11 @@\n+2018-09-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (solaris_ld_v2_maps): New test.\n+\t* configure: Regenerate.\n+\t* Makefile.in (solaris_ld_v2_maps): New variable.\n+\t* config/t-slibgcc-sld (libgcc-unwind.map): Emit v2 mapfile syntax\n+\tif supported.\n+\n 2018-08-23  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/86951"}, {"sha": "0766de585003946099fcff1558dbbaa390df3dab", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c6feb2b2621bdfe3415dd6f664283917817491/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c6feb2b2621bdfe3415dd6f664283917817491/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=53c6feb2b2621bdfe3415dd6f664283917817491", "patch": "@@ -44,6 +44,7 @@ enable_vtable_verify = @enable_vtable_verify@\n enable_decimal_float = @enable_decimal_float@\n fixed_point = @fixed_point@\n with_aix_soname = @with_aix_soname@\n+solaris_ld_v2_maps = @solaris_ld_v2_maps@\n enable_execute_stack = @enable_execute_stack@\n unwind_header = @unwind_header@\n md_unwind_header = @md_unwind_header@"}, {"sha": "03c6a65955173334f8b06bb88af6391c31a63ec5", "filename": "libgcc/config/t-slibgcc-sld", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c6feb2b2621bdfe3415dd6f664283917817491/libgcc%2Fconfig%2Ft-slibgcc-sld", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c6feb2b2621bdfe3415dd6f664283917817491/libgcc%2Fconfig%2Ft-slibgcc-sld", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-slibgcc-sld?ref=53c6feb2b2621bdfe3415dd6f664283917817491", "patch": "@@ -8,12 +8,23 @@ ifeq ($(enable_shared),yes)\n \n # Linker mapfile to enforce direct binding to libgcc_s unwinder\n # (PR target/59788).\n+# Emit v2 mapfile syntax if possible, otherwise ld -z guidance complains\n+# every time the mapfile is used.\n libgcc-unwind.map: libgcc-std.ver\n+ifeq ($(solaris_ld_v2_maps),yes)\n+\t@(echo '$$mapfile_version 2';\t\t\\\n+\techo \"SYMBOL_SCOPE {\";\t\t\t\\\n+\tfor f in `grep _Unwind_ $< | sort`; do\t\\\n+\t  echo \"\t$$f { FLAGS = EXTERN DIRECT };\"; \\\n+\tdone;\t\t\t\t\t\\\n+\techo \"};\" ) > $@\n+else\n \t@(echo \"{\";\t\t\t\t\\\n \tfor f in `grep _Unwind_ $< | sort`; do\t\\\n \t  echo \"\t$$f = EXTERN DIRECT;\";\t\\\n \tdone;\t\t\t\t\t\\\n \techo \"};\" ) > $@\n+endif\n \n # Copy libgcc-unwind.map to the place where gcc will look for it at build-time.\n install-libgcc-unwind-map-forbuild: libgcc-unwind.map"}, {"sha": "f0b6116e192ce8c13fee590833c5a5e7fa67b39b", "filename": "libgcc/configure", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c6feb2b2621bdfe3415dd6f664283917817491/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c6feb2b2621bdfe3415dd6f664283917817491/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=53c6feb2b2621bdfe3415dd6f664283917817491", "patch": "@@ -570,6 +570,7 @@ sfp_machine_header\n set_use_emutls\n set_have_cc_tls\n vis_hide\n+solaris_ld_v2_maps\n real_host_noncanonical\n accel_dir_suffix\n force_explicit_eh_registry\n@@ -5176,6 +5177,26 @@ EOF\n   ;;\n esac\n \n+# Check if Solaris linker support v2 linker mapfile syntax.\n+# Link with -nostartfiles -nodefaultlibs since neither are present while\n+# building libgcc.\n+case ${host} in\n+*-*-solaris2*)\n+  solaris_ld_v2_maps=no\n+  echo 'int main(void) {return 0;}' > conftest.c\n+  echo '$mapfile_version 2' > conftest.map\n+  if { ac_try='${CC-cc} -nostartfiles -nodefaultlibs -Wl,-M,conftest.map -o conftest conftest.c 1>&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }; then\n+      solaris_ld_v2_maps=yes\n+  fi\n+  ;;\n+esac\n+\n+\n # Check if xtensa target is configured for windowed ABI and thus needs to use\n # custom unwind code.\n # This is after config.host so we can augment tmake_file."}, {"sha": "5fcbac686f2f1133cd640580098fb543a70aa24a", "filename": "libgcc/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c6feb2b2621bdfe3415dd6f664283917817491/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c6feb2b2621bdfe3415dd6f664283917817491/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=53c6feb2b2621bdfe3415dd6f664283917817491", "patch": "@@ -459,6 +459,21 @@ EOF\n   ;;\n esac\n \n+# Check if Solaris linker support v2 linker mapfile syntax.\n+# Link with -nostartfiles -nodefaultlibs since neither are present while\n+# building libgcc.\n+case ${host} in\n+*-*-solaris2*)\n+  solaris_ld_v2_maps=no\n+  echo 'int main(void) {return 0;}' > conftest.c\n+  echo '$mapfile_version 2' > conftest.map\n+  if AC_TRY_COMMAND([${CC-cc} -nostartfiles -nodefaultlibs -Wl,-M,conftest.map -o conftest conftest.c 1>&AS_MESSAGE_LOG_FD]); then\n+      solaris_ld_v2_maps=yes\n+  fi\n+  ;;\n+esac\n+AC_SUBST(solaris_ld_v2_maps)\n+\n # Check if xtensa target is configured for windowed ABI and thus needs to use\n # custom unwind code.\n # This is after config.host so we can augment tmake_file."}]}