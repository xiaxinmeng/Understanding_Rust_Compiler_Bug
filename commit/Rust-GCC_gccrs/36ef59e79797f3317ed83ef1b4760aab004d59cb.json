{"sha": "36ef59e79797f3317ed83ef1b4760aab004d59cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZlZjU5ZTc5Nzk3ZjMzMTdlZDgzZWYxYjQ3NjBhYWIwMDRkNTljYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-09-30T16:49:55Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-09-30T16:49:55Z"}, "message": "Warning fixes:\n\n\t* actions.c (chill_handle_multi_case_label): Always return a value\n\tin function returning non-void.\n\t* except.c: Include OS headers before any local ones.\n\t* typeck.c (layout_chill_range_type): Change type of variable\n\t`negprecision' to int.\n\t(apply_chill_array_layout): Initialize variables `stepsize' and\n\t`start_bit'.\n\t(layout_chill_struct_type): Change type of variable `min_align' to\n\tunsigned int.\n\t(smash_dummy_type): Change name of variable `main' to `main_tree'.\n\nFrom-SVN: r22680", "tree": {"sha": "6a472d7252babe2acf61a1cf7852504969d64b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a472d7252babe2acf61a1cf7852504969d64b2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36ef59e79797f3317ed83ef1b4760aab004d59cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ef59e79797f3317ed83ef1b4760aab004d59cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ef59e79797f3317ed83ef1b4760aab004d59cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ef59e79797f3317ed83ef1b4760aab004d59cb/comments", "author": null, "committer": null, "parents": [{"sha": "5efaf7b00ee3751680bffd751fa86eed6007c46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efaf7b00ee3751680bffd751fa86eed6007c46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efaf7b00ee3751680bffd751fa86eed6007c46a"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "ebada8729c46568a999432c8dbb8f5d8b9064ab7", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ef59e79797f3317ed83ef1b4760aab004d59cb/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ef59e79797f3317ed83ef1b4760aab004d59cb/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=36ef59e79797f3317ed83ef1b4760aab004d59cb", "patch": "@@ -1,3 +1,18 @@\n+Wed Sep 30 19:41:36 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* actions.c (chill_handle_multi_case_label): Always return a value\n+\tin function returning non-void. \n+\n+\t* except.c: Include OS headers before any local ones.\n+\n+\t* typeck.c (layout_chill_range_type): Change type of variable\n+\t`negprecision' to int.\n+\t(apply_chill_array_layout): Initialize variables `stepsize' and\n+\t`start_bit'.\n+\t(layout_chill_struct_type): Change type of variable `min_align' to\n+\tunsigned int.\n+\t(smash_dummy_type): Change name of variable `main' to `main_tree'.\n+\n Wed Sep 30 19:24:41 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* actions.c (id_cmp): Do pointer arithmetic as `long' not `int' to"}, {"sha": "6d636b7052affd8aa5006a370dce0477ed79299b", "filename": "gcc/ch/actions.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ef59e79797f3317ed83ef1b4760aab004d59cb/gcc%2Fch%2Factions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ef59e79797f3317ed83ef1b4760aab004d59cb/gcc%2Fch%2Factions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Factions.c?ref=36ef59e79797f3317ed83ef1b4760aab004d59cb", "patch": "@@ -1229,7 +1229,7 @@ chill_handle_multi_case_label (selector, label)\n   tree expr;\n \n   if (label == NULL_TREE || TREE_CODE (label) == ERROR_MARK)\n-    return;\n+    return NULL_TREE;\n \n   if (TREE_CODE (label) == INTEGER_CST)\n     {"}, {"sha": "0a911bd5e07dcce14f2383eba10513fb14e9195e", "filename": "gcc/ch/except.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ef59e79797f3317ed83ef1b4760aab004d59cb/gcc%2Fch%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ef59e79797f3317ed83ef1b4760aab004d59cb/gcc%2Fch%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexcept.c?ref=36ef59e79797f3317ed83ef1b4760aab004d59cb", "patch": "@@ -19,11 +19,7 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #include \"config.h\"\n-#include \"tree.h\"\n-#include \"ch-tree.h\"\n-#include \"rtl.h\"\n #include \"system.h\"\n-#include \"toplev.h\"\n \n /* On Suns this can get you to the right definition if you\n    set the right value for TARGET.  */\n@@ -52,6 +48,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #endif\n #endif\n \n+#include \"tree.h\"\n+#include \"ch-tree.h\"\n+#include \"rtl.h\"\n+#include \"toplev.h\"\n+\n extern int  expand_exit_needed;\n \n static tree link_handler_decl;"}, {"sha": "a4795dfddf4019289f2e4a9a2c8b9a9b0a0d5bd0", "filename": "gcc/ch/typeck.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ef59e79797f3317ed83ef1b4760aab004d59cb/gcc%2Fch%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ef59e79797f3317ed83ef1b4760aab004d59cb/gcc%2Fch%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftypeck.c?ref=36ef59e79797f3317ed83ef1b4760aab004d59cb", "patch": "@@ -2597,7 +2597,7 @@ layout_chill_range_type (rangetype, must_be_const)\n \t\t  /* Compute number of bits to represent magnitude of a\n \t\t     negative value.  Add one to MINVALUE since range of\n \t\t     negative numbers includes the power of two.  */\n-\t\t  unsigned negprecision = floor_log2 (-minvalue - 1) + 1;\n+\t\t  int negprecision = floor_log2 (-minvalue - 1) + 1;\n \t\t  if (negprecision > precision)\n \t\t    precision = negprecision;\n \t\t  precision += 1;\t/* room for sign bit */\n@@ -2736,7 +2736,7 @@ apply_chill_array_layout (array_type)\n      tree array_type;\n {\n   tree layout, temp, what, element_type;\n-  int stepsize, word, start_bit, length, natural_length;\n+  int stepsize=0, word, start_bit=0, length, natural_length;\n   int stepsize_specified;\n   int start_bit_error = 0;\n   int length_error = 0;\n@@ -3243,7 +3243,7 @@ layout_chill_struct_type (t)\n \t}\n       else\n \t{\n-\t  int min_align = TYPE_ALIGN (TREE_TYPE (x));\n+\t  unsigned int min_align = TYPE_ALIGN (TREE_TYPE (x));\n \t  DECL_ALIGN (x) = MAX (DECL_ALIGN (x), min_align);\n \t  was_pos = 0;\n \t}\n@@ -3346,7 +3346,7 @@ smash_dummy_type (type)\n {\n   /* Save fields that we don't want to copy from ORIGIN. */ \n   tree origin = TREE_TYPE (type);\n-  tree main = TYPE_MAIN_VARIANT (origin);\n+  tree main_tree = TYPE_MAIN_VARIANT (origin);\n   int  save_uid = TYPE_UID (type);\n   struct obstack *save_obstack = TYPE_OBSTACK (type);\n   tree save_name = TYPE_NAME (type);\n@@ -3439,8 +3439,8 @@ smash_dummy_type (type)\n   if (save_readonly)\n     { /* TYPE is READ ORIGIN.\n \t Add this type to the chain of variants of TYPE.  */\n-      TYPE_NEXT_VARIANT (type) = TYPE_NEXT_VARIANT (main);\n-      TYPE_NEXT_VARIANT (main) = type;\n+      TYPE_NEXT_VARIANT (type) = TYPE_NEXT_VARIANT (main_tree);\n+      TYPE_NEXT_VARIANT (main_tree) = type;\n       TYPE_READONLY (type) = save_readonly;\n     }\n   else"}]}