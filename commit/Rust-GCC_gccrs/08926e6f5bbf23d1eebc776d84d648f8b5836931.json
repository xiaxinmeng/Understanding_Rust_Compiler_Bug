{"sha": "08926e6f5bbf23d1eebc776d84d648f8b5836931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg5MjZlNmY1YmJmMjNkMWVlYmM3NzZkODRkNjQ4ZjhiNTgzNjkzMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-12-19T11:10:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-12-19T11:10:08Z"}, "message": "re PR tree-optimization/88533 (Higher performance penalty of array-bounds checking for sparse-matrix vector multiply)\n\n2018-12-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88533\n\tRevert\n\t2018-04-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/28364\n\tPR tree-optimization/85275\n\t* tree-ssa-loop-ch.c (ch_base::copy_headers): Stop after\n\tcopying first exit test.\n\n\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Adjust.\n\n\t* tree-ssa-loop-ch.c: Include tree-phinodes.h and\n\tssa-iterators.h.\n\t(should_duplicate_loop_header_p): Track whether stmt compute\n\tloop invariants or values based on IVs.  Apart from the\n\toriginal loop header only duplicate blocks with exit tests\n\tthat are based on IVs or invariants.\n\n\t* gcc.dg/tree-ssa/copy-headers-6.c: New testcase.\n\t* gcc.dg/tree-ssa/copy-headers-7.c: Likewise.\n\t* gcc.dg/tree-ssa/ivopt_mult_1.c: Un-XFAIL.\n\t* gcc.dg/tree-ssa/ivopt_mult_2.c: Likewise.\n\nFrom-SVN: r267262", "tree": {"sha": "e0a904ac5d8b5b15f57fd336b91c9ecaf822dcaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0a904ac5d8b5b15f57fd336b91c9ecaf822dcaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08926e6f5bbf23d1eebc776d84d648f8b5836931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08926e6f5bbf23d1eebc776d84d648f8b5836931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08926e6f5bbf23d1eebc776d84d648f8b5836931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08926e6f5bbf23d1eebc776d84d648f8b5836931/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c55d60f405e4429cbcd2cf5c27c048ac226b502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c55d60f405e4429cbcd2cf5c27c048ac226b502", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c55d60f405e4429cbcd2cf5c27c048ac226b502"}], "stats": {"total": 146, "additions": 133, "deletions": 13}, "files": [{"sha": "56e50e2cbfb8b89ee076f35e50b1ecc0fd4c6768", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08926e6f5bbf23d1eebc776d84d648f8b5836931", "patch": "@@ -1,3 +1,21 @@\n+2018-12-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88533\n+\tRevert\n+\t2018-04-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/28364\n+\tPR tree-optimization/85275\n+\t* tree-ssa-loop-ch.c (ch_base::copy_headers): Stop after\n+\tcopying first exit test.\n+\n+\t* tree-ssa-loop-ch.c: Include tree-phinodes.h and\n+\tssa-iterators.h.\n+\t(should_duplicate_loop_header_p): Track whether stmt compute\n+\tloop invariants or values based on IVs.  Apart from the\n+\toriginal loop header only duplicate blocks with exit tests\n+\tthat are based on IVs or invariants.\n+\n 2018-12-19  Tom de Vries  <tdevries@suse.de>\n \n \t* config/nvptx/nvptx.c (nvptx_gen_shared_bcast, shared_prop_gen)"}, {"sha": "cb5d6195432ed2bd2d1478d82c961399802a1aff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08926e6f5bbf23d1eebc776d84d648f8b5836931", "patch": "@@ -1,3 +1,18 @@\n+2018-12-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88533\n+\tRevert\n+\t2018-04-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/28364\n+\tPR tree-optimization/85275\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Adjust.\n+\n+\t* gcc.dg/tree-ssa/copy-headers-6.c: New testcase.\n+\t* gcc.dg/tree-ssa/copy-headers-7.c: Likewise.\n+\t* gcc.dg/tree-ssa/ivopt_mult_1.c: Un-XFAIL.\n+\t* gcc.dg/tree-ssa/ivopt_mult_2.c: Likewise.\n+\n 2018-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/88541"}, {"sha": "eeafba7972c172e6bbe6d8737c9e8bd8b7811478", "filename": "gcc/testsuite/gcc.dg/tree-ssa/copy-headers-6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-6.c?ref=08926e6f5bbf23d1eebc776d84d648f8b5836931", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ch2-details\" } */\n+\n+int is_sorted(int *a, int n)\n+{\n+  for (int i = 0; i < n - 1; i++)\n+    if (a[i] > 0)\n+      return 0;\n+  return 1;\n+}\n+\n+/* Verify we apply loop header copying but only copy the IV test and\n+   not the alternate exit test.  */\n+\n+/* { dg-final { scan-tree-dump \"is now do-while loop\" \"ch2\" } } */\n+/* { dg-final { scan-tree-dump-times \"  if \" 3 \"ch2\" } } */"}, {"sha": "a0a6e6a9b570f158dbd1b8bc18bb8ebc3663aaea", "filename": "gcc/testsuite/gcc.dg/tree-ssa/copy-headers-7.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-7.c?ref=08926e6f5bbf23d1eebc776d84d648f8b5836931", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ch2-details --param logical-op-non-short-circuit=0\" } */\n+\n+int is_sorted(int *a, int n, int m, int k)\n+{\n+  for (int i = 0; i < n - 1 && m && k > i; i++)\n+    if (a[i] > a[i + 1])\n+      return 0;\n+  return 1;\n+}\n+\n+/* Verify we apply loop header copying but only copy the IV tests and\n+   the invariant test, not the alternate exit test.  */\n+\n+/* { dg-final { scan-tree-dump \"is now do-while loop\" \"ch2\" } } */\n+/* { dg-final { scan-tree-dump-times \"Will duplicate bb\" 3 \"ch2\" } } */"}, {"sha": "adfe371c7ce4163af96b19a976c86ef786a114b6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopt_mult_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_1.c?ref=08926e6f5bbf23d1eebc776d84d648f8b5836931", "patch": "@@ -20,4 +20,4 @@ long foo(long* p, long* p2, int N1, int N2)\n   return s;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Replacing\" 1 \"ivopts\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"Replacing\" 1 \"ivopts\" } } */"}, {"sha": "50d0cc5d2aee46369a2f02b5ab83cf9c37ec4ba1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopt_mult_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_2.c?ref=08926e6f5bbf23d1eebc776d84d648f8b5836931", "patch": "@@ -21,4 +21,4 @@ long foo(long* p, long* p2, int N1, int N2)\n   return s;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Replacing\" 2 \"ivopts\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"Replacing\" 2 \"ivopts\" } } */"}, {"sha": "a3395578f787946b4d7b10962504a9b5bc94347a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c?ref=08926e6f5bbf23d1eebc776d84d648f8b5836931", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-O2 -fdump-tree-thread1-stats -fdump-tree-thread2-stats -fdump-tree-dom2-stats -fdump-tree-thread3-stats -fdump-tree-dom3-stats -fdump-tree-vrp2-stats -fno-guess-branch-probability\" } */\n /* { dg-final { scan-tree-dump \"Jumps threaded: 16\"  \"thread1\" } } */\n /* { dg-final { scan-tree-dump \"Jumps threaded: 9\" \"thread2\" } } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 1\"  \"dom2\" } } */\n+/* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"dom2\" } } */\n /* aarch64 has the highest CASE_VALUES_THRESHOLD in GCC.  It's high enough\n    to change decisions in switch expansion which in turn can expose new\n    jump threading opportunities.  Skip the later tests on aarch64.  */"}, {"sha": "3a094103c2a0672141cc4c60006cb6935c13abae", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 65, "deletions": 10, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08926e6f5bbf23d1eebc776d84d648f8b5836931/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=08926e6f5bbf23d1eebc776d84d648f8b5836931", "patch": "@@ -34,6 +34,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-scopedtables.h\"\n #include \"tree-ssa-threadedge.h\"\n #include \"tree-ssa-sccvn.h\"\n+#include \"tree-phinodes.h\"\n+#include \"ssa-iterators.h\"\n #include \"params.h\"\n \n /* Duplicates headers of loops if they are small enough, so that the statements\n@@ -50,7 +52,6 @@ should_duplicate_loop_header_p (basic_block header, struct loop *loop,\n \t\t\t\tint *limit)\n {\n   gimple_stmt_iterator bsi;\n-  gimple *last;\n \n   gcc_assert (!header->aux);\n \n@@ -99,8 +100,8 @@ should_duplicate_loop_header_p (basic_block header, struct loop *loop,\n       return false;\n     }\n \n-  last = last_stmt (header);\n-  if (gimple_code (last) != GIMPLE_COND)\n+  gcond *last = dyn_cast <gcond *> (last_stmt (header));\n+  if (!last)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,\n@@ -109,10 +110,24 @@ should_duplicate_loop_header_p (basic_block header, struct loop *loop,\n       return false;\n     }\n \n-  /* Count number of instructions and punt on calls.  */\n+  for (gphi_iterator psi = gsi_start_phis (header); !gsi_end_p (psi);\n+       gsi_next (&psi))\n+    {\n+      gphi *phi = psi.phi ();\n+      tree res = gimple_phi_result (phi);\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (res))\n+\t  || POINTER_TYPE_P (TREE_TYPE (res)))\n+\tgimple_set_uid (phi, 1 /* IV */);\n+      else\n+\tgimple_set_uid (phi, 0);\n+    }\n+\n+  /* Count number of instructions and punt on calls.\n+     Populate stmts INV/IV flag to later apply heuristics to the\n+     kind of conditions we want to copy.  */\n   for (bsi = gsi_start_bb (header); !gsi_end_p (bsi); gsi_next (&bsi))\n     {\n-      last = gsi_stmt (bsi);\n+      gimple *last = gsi_stmt (bsi);\n \n       if (gimple_code (last) == GIMPLE_LABEL)\n \tcontinue;\n@@ -142,7 +157,52 @@ should_duplicate_loop_header_p (basic_block header, struct loop *loop,\n \t\t     header->index);\n \t  return false;\n \t}\n+\n+      /* Classify the stmt based on whether its computation is based\n+         on a IV or whether it is invariant in the loop.  */\n+      gimple_set_uid (last, 0);\n+      if (!gimple_vuse (last))\n+\t{\n+\t  bool inv = true;\n+\t  bool iv = false;\n+\t  ssa_op_iter i;\n+\t  tree op;\n+\t  FOR_EACH_SSA_TREE_OPERAND (op, last, i, SSA_OP_USE)\n+\t    if (!SSA_NAME_IS_DEFAULT_DEF (op)\n+\t\t&& flow_bb_inside_loop_p (loop,\n+\t\t\t\t\t  gimple_bb (SSA_NAME_DEF_STMT (op))))\n+\t      {\n+\t\tif (!(gimple_uid (SSA_NAME_DEF_STMT (op)) & 2 /* INV */))\n+\t\t  inv = false;\n+\t\tif (gimple_uid (SSA_NAME_DEF_STMT (op)) & 1 /* IV */)\n+\t\t  iv = true;\n+\t      }\n+\t  gimple_set_uid (last, (iv ? 1 : 0) | (inv ? 2 : 0));\n+\t}\n     }\n+\n+  /* If the condition tests a non-IV loop variant we do not want to rotate\n+     the loop further.  Unless this is the original loop header.  */\n+  tree lhs = gimple_cond_lhs (last);\n+  tree rhs = gimple_cond_rhs (last);\n+  if (header != loop->header\n+      && ((TREE_CODE (lhs) == SSA_NAME\n+\t   && !SSA_NAME_IS_DEFAULT_DEF (lhs)\n+\t   && flow_bb_inside_loop_p (loop, gimple_bb (SSA_NAME_DEF_STMT (lhs)))\n+\t   && gimple_uid (SSA_NAME_DEF_STMT (lhs)) == 0)\n+\t  || (TREE_CODE (rhs) == SSA_NAME\n+\t      && !SSA_NAME_IS_DEFAULT_DEF (rhs)\n+\t      && flow_bb_inside_loop_p (loop,\n+\t\t\t\t\tgimple_bb (SSA_NAME_DEF_STMT (rhs)))\n+\t      && gimple_uid (SSA_NAME_DEF_STMT (rhs)) == 0)))\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file,\n+\t\t \"  Not duplicating bb %i: condition based on non-IV loop\"\n+\t\t \"variant.\\n\", header->index);\n+      return false;\n+    }\n+\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"    Will duplicate bb %i\\n\", header->index); \n   return true;\n@@ -343,11 +403,6 @@ ch_base::copy_headers (function *fun)\n \t  bbs[n_bbs++] = header;\n \t  gcc_assert (bbs_size > n_bbs);\n \t  header = exit->dest;\n-\t  /* Make sure to stop copying after we copied the first exit test.\n-\t     Without further heuristics we do not want to rotate the loop\n-\t     any further.  */\n-\t  if (loop_exits_from_bb_p (loop, exit->src))\n-\t    break;\n \t}\n \n       if (!exit)"}]}