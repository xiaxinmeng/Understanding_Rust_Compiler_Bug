{"sha": "0efbf084f42a63c393962eb2207c826eb91c5029", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVmYmYwODRmNDJhNjNjMzkzOTYyZWIyMjA3YzgyNmViOTFjNTAyOQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2012-09-19T19:05:34Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2012-09-19T19:05:34Z"}, "message": "[multiple changes]\n\n2012-09-19  Tulio Magno Quites Machado Filho  <tuliom@linux.vnet.ibm.com>\n\n        * config/rs6000/rs6000-builtin.def: Add __builtin_ppc_get_timebase\n        and __builtin_ppc_mftb.\n        * config/rs6000/rs6000.c (rs6000_expand_zeroop_builtin): New\n        function to expand an expression that calls a built-in without\n        arguments.\n        (rs6000_expand_builtin): Add __builtin_ppc_get_timebase and\n        __builtin_ppc_mftb.\n        (rs6000_init_builtins): Likewise.\n        * config/rs6000/rs6000.md (rs6000_get_timebase): New pattern.\n        (rs6000_get_timebase_ppc32): New pattern.\n        (rs6000_mftb_<mode>): New pattern.\n\n        * doc/extend.texi (PowerPC Built-in Functions): New section.\n        (PowerPC AltiVec/VSX Built-in Functions):\n        Move some built-ins unrelated to Altivec/VSX to the new section.\n\n2012-09-19  David Edelsohn  <dje.gcc@gmail.com>\n\n        * rs6000.md (mac*): Remove extra spaces.\n        (mulhw*): Same.\n\nFrom-SVN: r191491", "tree": {"sha": "e66e46b6098e9cdaedd3c575165b2ad9b99dc209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e66e46b6098e9cdaedd3c575165b2ad9b99dc209"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0efbf084f42a63c393962eb2207c826eb91c5029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0efbf084f42a63c393962eb2207c826eb91c5029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0efbf084f42a63c393962eb2207c826eb91c5029", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0efbf084f42a63c393962eb2207c826eb91c5029/comments", "author": null, "committer": null, "parents": [{"sha": "4eddc42b63d1064dfb0fd4c4820616f672e0ccfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa"}], "stats": {"total": 258, "additions": 207, "deletions": 51}, "files": [{"sha": "3782c7c11646b2070b17d6a39949f4f4d2cab384", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbf084f42a63c393962eb2207c826eb91c5029/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbf084f42a63c393962eb2207c826eb91c5029/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0efbf084f42a63c393962eb2207c826eb91c5029", "patch": "@@ -1,3 +1,26 @@\n+2012-09-19  Tulio Magno Quites Machado Filho  <tuliom@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def: Add __builtin_ppc_get_timebase\n+\tand __builtin_ppc_mftb.\n+\t* config/rs6000/rs6000.c (rs6000_expand_zeroop_builtin): New\n+\tfunction to expand an expression that calls a built-in without\n+\targuments.\n+\t(rs6000_expand_builtin): Add __builtin_ppc_get_timebase and\n+\t__builtin_ppc_mftb.\n+\t(rs6000_init_builtins): Likewise.\n+\t* config/rs6000/rs6000.md (rs6000_get_timebase): New pattern.\n+\t(rs6000_get_timebase_ppc32): New pattern.\n+\t(rs6000_mftb_<mode>): New pattern.\n+\n+\t* doc/extend.texi (PowerPC Built-in Functions): New section.\n+\t(PowerPC AltiVec/VSX Built-in Functions):\n+\tMove some built-ins unrelated to Altivec/VSX to the new section.\n+\n+2012-09-19  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* rs6000.md (mac*): Remove extra spaces.\n+\t(mulhw*): Same.\n+\n 2012-09-19  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54089"}, {"sha": "9fa3a0f6000dcd84b2ef202fe8cad61f27a86244", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbf084f42a63c393962eb2207c826eb91c5029/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbf084f42a63c393962eb2207c826eb91c5029/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=0efbf084f42a63c393962eb2207c826eb91c5029", "patch": "@@ -1429,6 +1429,12 @@ BU_SPECIAL_X (RS6000_BUILTIN_RSQRT, \"__builtin_rsqrt\", RS6000_BTM_FRSQRTE,\n BU_SPECIAL_X (RS6000_BUILTIN_RSQRTF, \"__builtin_rsqrtf\", RS6000_BTM_FRSQRTES,\n \t      RS6000_BTC_FP)\n \n+BU_SPECIAL_X (RS6000_BUILTIN_GET_TB, \"__builtin_ppc_get_timebase\",\n+\t     RS6000_BTM_ALWAYS, RS6000_BTC_MISC)\n+\n+BU_SPECIAL_X (RS6000_BUILTIN_MFTB, \"__builtin_ppc_mftb\",\n+\t     RS6000_BTM_ALWAYS, RS6000_BTC_MISC)\n+\n /* Darwin CfString builtin.  */\n BU_SPECIAL_X (RS6000_BUILTIN_CFSTRING, \"__builtin_cfstring\", RS6000_BTM_ALWAYS,\n \t      RS6000_BTC_MISC)"}, {"sha": "007473b81c4cddc7474a64c62089439d1a493eb8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbf084f42a63c393962eb2207c826eb91c5029/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbf084f42a63c393962eb2207c826eb91c5029/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0efbf084f42a63c393962eb2207c826eb91c5029", "patch": "@@ -9748,6 +9748,30 @@ rs6000_overloaded_builtin_p (enum rs6000_builtins fncode)\n   return (rs6000_builtin_info[(int)fncode].attr & RS6000_BTC_OVERLOADED) != 0;\n }\n \n+/* Expand an expression EXP that calls a builtin without arguments.  */\n+static rtx\n+rs6000_expand_zeroop_builtin (enum insn_code icode, rtx target)\n+{\n+  rtx pat;\n+  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+\n+  if (icode == CODE_FOR_nothing)\n+    /* Builtin not supported on this processor.  */\n+    return 0;\n+\n+  if (target == 0\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+    target = gen_reg_rtx (tmode);\n+\n+  pat = GEN_FCN (icode) (target);\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+\n+  return target;\n+}\n+\n \n static rtx\n rs6000_expand_unop_builtin (enum insn_code icode, tree exp, rtx target)\n@@ -11337,6 +11361,16 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t\t\t\t   ? CODE_FOR_bpermd_di\n \t\t\t\t\t   : CODE_FOR_bpermd_si), exp, target);\n \n+    case RS6000_BUILTIN_GET_TB:\n+      return rs6000_expand_zeroop_builtin (CODE_FOR_rs6000_get_timebase,\n+\t\t\t\t\t   target);\n+\n+    case RS6000_BUILTIN_MFTB:\n+      return rs6000_expand_zeroop_builtin (((TARGET_64BIT)\n+\t\t\t\t\t    ? CODE_FOR_rs6000_mftb_di\n+\t\t\t\t\t    : CODE_FOR_rs6000_mftb_si),\n+\t\t\t\t\t   target);\n+\n     case ALTIVEC_BUILTIN_MASK_FOR_LOAD:\n     case ALTIVEC_BUILTIN_MASK_FOR_STORE:\n       {\n@@ -11621,6 +11655,18 @@ rs6000_init_builtins (void)\n \t\t\t\t POWER7_BUILTIN_BPERMD, \"__builtin_bpermd\");\n   def_builtin (\"__builtin_bpermd\", ftype, POWER7_BUILTIN_BPERMD);\n \n+  ftype = build_function_type_list (unsigned_intDI_type_node,\n+\t\t\t\t    NULL_TREE);\n+  def_builtin (\"__builtin_ppc_get_timebase\", ftype, RS6000_BUILTIN_GET_TB);\n+\n+  if (TARGET_64BIT)\n+    ftype = build_function_type_list (unsigned_intDI_type_node,\n+\t\t\t\t      NULL_TREE);\n+  else\n+    ftype = build_function_type_list (unsigned_intSI_type_node,\n+\t\t\t\t      NULL_TREE);\n+  def_builtin (\"__builtin_ppc_mftb\", ftype, RS6000_BUILTIN_MFTB);\n+\n #if TARGET_XCOFF\n   /* AIX libm provides clog as __clog.  */\n   if ((tdecl = builtin_decl_explicit (BUILT_IN_CLOG)) != NULL_TREE)"}, {"sha": "9eb0a3747cc11b790cc990db295ac0925f13579c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 99, "deletions": 33, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbf084f42a63c393962eb2207c826eb91c5029/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbf084f42a63c393962eb2207c826eb91c5029/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=0efbf084f42a63c393962eb2207c826eb91c5029", "patch": "@@ -136,6 +136,7 @@\n    UNSPECV_PROBE_STACK_RANGE\t; probe range of stack addresses\n    UNSPECV_EH_RR\t\t; eh_reg_restore\n    UNSPECV_ISYNC\t\t; isync instruction\n+   UNSPECV_MFTB\t\t\t; move from time base\n   ])\n \n \f\n@@ -991,7 +992,7 @@\n                            (match_dup 1)))\n                  (match_dup 4)))]\n   \"TARGET_MULHW\"\n-  \"macchw. %0, %1, %2\"\n+  \"macchw. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*macchw\"\n@@ -1003,7 +1004,7 @@\n                            (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))\n                  (match_operand:SI 3 \"gpc_reg_operand\" \"0\")))]\n   \"TARGET_MULHW\"\n-  \"macchw %0, %1, %2\"\n+  \"macchw %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*macchwuc\"\n@@ -1023,7 +1024,7 @@\n                            (match_dup 1)))\n                  (match_dup 4)))]\n   \"TARGET_MULHW\"\n-  \"macchwu. %0, %1, %2\"\n+  \"macchwu. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*macchwu\"\n@@ -1035,7 +1036,7 @@\n                            (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))\n                  (match_operand:SI 3 \"gpc_reg_operand\" \"0\")))]\n   \"TARGET_MULHW\"\n-  \"macchwu %0, %1, %2\"\n+  \"macchwu %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*machhwc\"\n@@ -1057,7 +1058,7 @@\n                            (const_int 16)))\n                  (match_dup 4)))]\n   \"TARGET_MULHW\"\n-  \"machhw. %0, %1, %2\"\n+  \"machhw. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*machhw\"\n@@ -1070,7 +1071,7 @@\n                            (const_int 16)))\n                  (match_operand:SI 3 \"gpc_reg_operand\" \"0\")))]\n   \"TARGET_MULHW\"\n-  \"machhw %0, %1, %2\"\n+  \"machhw %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*machhwuc\"\n@@ -1092,7 +1093,7 @@\n                            (const_int 16)))\n                  (match_dup 4)))]\n   \"TARGET_MULHW\"\n-  \"machhwu. %0, %1, %2\"\n+  \"machhwu. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*machhwu\"\n@@ -1105,7 +1106,7 @@\n                            (const_int 16)))\n                  (match_operand:SI 3 \"gpc_reg_operand\" \"0\")))]\n   \"TARGET_MULHW\"\n-  \"machhwu %0, %1, %2\"\n+  \"machhwu %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*maclhwc\"\n@@ -1123,7 +1124,7 @@\n                            (match_dup 2)))\n                  (match_dup 4)))]\n   \"TARGET_MULHW\"\n-  \"maclhw. %0, %1, %2\"\n+  \"maclhw. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*maclhw\"\n@@ -1134,7 +1135,7 @@\n                            (match_operand:HI 2 \"gpc_reg_operand\" \"r\")))\n                  (match_operand:SI 3 \"gpc_reg_operand\" \"0\")))]\n   \"TARGET_MULHW\"\n-  \"maclhw %0, %1, %2\"\n+  \"maclhw %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*maclhwuc\"\n@@ -1152,7 +1153,7 @@\n                            (match_dup 2)))\n                  (match_dup 4)))]\n   \"TARGET_MULHW\"\n-  \"maclhwu. %0, %1, %2\"\n+  \"maclhwu. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*maclhwu\"\n@@ -1163,7 +1164,7 @@\n                            (match_operand:HI 2 \"gpc_reg_operand\" \"r\")))\n                  (match_operand:SI 3 \"gpc_reg_operand\" \"0\")))]\n   \"TARGET_MULHW\"\n-  \"maclhwu %0, %1, %2\"\n+  \"maclhwu %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*nmacchwc\"\n@@ -1183,7 +1184,7 @@\n                            (sign_extend:SI\n                             (match_dup 1)))))]\n   \"TARGET_MULHW\"\n-  \"nmacchw. %0, %1, %2\"\n+  \"nmacchw. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*nmacchw\"\n@@ -1195,7 +1196,7 @@\n                            (sign_extend:SI\n                             (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))))]\n   \"TARGET_MULHW\"\n-  \"nmacchw %0, %1, %2\"\n+  \"nmacchw %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*nmachhwc\"\n@@ -1217,7 +1218,7 @@\n                             (match_dup 2)\n                             (const_int 16)))))]\n   \"TARGET_MULHW\"\n-  \"nmachhw. %0, %1, %2\"\n+  \"nmachhw. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*nmachhw\"\n@@ -1230,7 +1231,7 @@\n                             (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n                             (const_int 16)))))]\n   \"TARGET_MULHW\"\n-  \"nmachhw %0, %1, %2\"\n+  \"nmachhw %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*nmaclhwc\"\n@@ -1248,7 +1249,7 @@\n                            (sign_extend:SI\n                             (match_dup 2)))))]\n   \"TARGET_MULHW\"\n-  \"nmaclhw. %0, %1, %2\"\n+  \"nmaclhw. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*nmaclhw\"\n@@ -1259,7 +1260,7 @@\n                            (sign_extend:SI\n                             (match_operand:HI 2 \"gpc_reg_operand\" \"r\")))))]\n   \"TARGET_MULHW\"\n-  \"nmaclhw %0, %1, %2\"\n+  \"nmaclhw %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*mulchwc\"\n@@ -1277,7 +1278,7 @@\n                  (sign_extend:SI\n                   (match_dup 1))))]\n   \"TARGET_MULHW\"\n-  \"mulchw. %0, %1, %2\"\n+  \"mulchw. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*mulchw\"\n@@ -1288,7 +1289,7 @@\n                  (sign_extend:SI\n                   (match_operand:HI 1 \"gpc_reg_operand\" \"r\"))))]\n   \"TARGET_MULHW\"\n-  \"mulchw %0, %1, %2\"\n+  \"mulchw %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*mulchwuc\"\n@@ -1306,7 +1307,7 @@\n                  (zero_extend:SI\n                   (match_dup 1))))]\n   \"TARGET_MULHW\"\n-  \"mulchwu. %0, %1, %2\"\n+  \"mulchwu. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*mulchwu\"\n@@ -1317,7 +1318,7 @@\n                  (zero_extend:SI\n                   (match_operand:HI 1 \"gpc_reg_operand\" \"r\"))))]\n   \"TARGET_MULHW\"\n-  \"mulchwu %0, %1, %2\"\n+  \"mulchwu %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*mulhhwc\"\n@@ -1337,7 +1338,7 @@\n                   (match_dup 2)\n                   (const_int 16))))]\n   \"TARGET_MULHW\"\n-  \"mulhhw. %0, %1, %2\"\n+  \"mulhhw. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*mulhhw\"\n@@ -1349,7 +1350,7 @@\n                   (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n                   (const_int 16))))]\n   \"TARGET_MULHW\"\n-  \"mulhhw %0, %1, %2\"\n+  \"mulhhw %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*mulhhwuc\"\n@@ -1369,7 +1370,7 @@\n                   (match_dup 2)\n                   (const_int 16))))]\n   \"TARGET_MULHW\"\n-  \"mulhhwu. %0, %1, %2\"\n+  \"mulhhwu. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*mulhhwu\"\n@@ -1381,7 +1382,7 @@\n                   (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n                   (const_int 16))))]\n   \"TARGET_MULHW\"\n-  \"mulhhwu %0, %1, %2\"\n+  \"mulhhwu %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*mullhwc\"\n@@ -1397,7 +1398,7 @@\n                  (sign_extend:SI\n                   (match_dup 2))))]\n   \"TARGET_MULHW\"\n-  \"mullhw. %0, %1, %2\"\n+  \"mullhw. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*mullhw\"\n@@ -1407,7 +1408,7 @@\n                  (sign_extend:SI\n                   (match_operand:HI 2 \"gpc_reg_operand\" \"r\"))))]\n   \"TARGET_MULHW\"\n-  \"mullhw %0, %1, %2\"\n+  \"mullhw %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*mullhwuc\"\n@@ -1423,7 +1424,7 @@\n                  (zero_extend:SI\n                   (match_dup 2))))]\n   \"TARGET_MULHW\"\n-  \"mullhwu. %0, %1, %2\"\n+  \"mullhwu. %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \n (define_insn \"*mullhwu\"\n@@ -1433,7 +1434,7 @@\n                  (zero_extend:SI\n                   (match_operand:HI 2 \"gpc_reg_operand\" \"r\"))))]\n   \"TARGET_MULHW\"\n-  \"mullhwu %0, %1, %2\"\n+  \"mullhwu %0,%1,%2\"\n   [(set_attr \"type\" \"imul3\")])\n \f\n ;; IBM 405, 440, 464 and 476 string-search dlmzb instruction support.\n@@ -1447,7 +1448,7 @@\n                     (match_dup 2)]\n                    UNSPEC_DLMZB))]\n   \"TARGET_DLMZB\"\n-  \"dlmzb. %0, %1, %2\")\n+  \"dlmzb. %0,%1,%2\")\n \n (define_expand \"strlensi\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n@@ -7707,8 +7708,8 @@\n    mt%0 %1\n    mt%0 %1\n    nop\n-   stfs%U0%X0 %1, %0\n-   lfs%U1%X1 %0, %1\"\n+   stfs%U0%X0 %1,%0\n+   lfs%U1%X1 %0,%1\"\n   [(set_attr \"type\" \"*,*,load,store,*,*,*,mfjmpr,mtjmpr,*,*,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8,4,4,4,4,4,4\")])\n \n@@ -13873,6 +13874,71 @@\n   \"\"\n   \"\")\n \n+(define_expand \"rs6000_get_timebase\"\n+  [(use (match_operand:DI 0 \"gpc_reg_operand\" \"\"))]\n+  \"\"\n+{\n+  if (TARGET_POWERPC64)\n+    emit_insn (gen_rs6000_mftb_di (operands[0]));\n+  else\n+    emit_insn (gen_rs6000_get_timebase_ppc32 (operands[0]));\n+  DONE;\n+})\n+\n+(define_insn \"rs6000_get_timebase_ppc32\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec_volatile:DI [(const_int 0)] UNSPECV_MFTB))\n+   (clobber (match_scratch:SI 1 \"=r\"))\n+   (clobber (match_scratch:CC 2 \"=y\"))]\n+  \"!TARGET_POWERPC64\"\n+{\n+  if (WORDS_BIG_ENDIAN)\n+    if (TARGET_MFCRF)\n+      {\n+        return \"mfspr %0,269\\;\"\n+\t       \"mfspr %L0,268\\;\"\n+\t       \"mfspr %1,269\\;\"\n+\t       \"cmpw %2,%0,%1\\;\"\n+\t       \"bne- %2,$-16\";\n+      }\n+    else\n+      {\n+        return \"mftbu %0\\;\"\n+\t       \"mftb %L0\\;\"\n+\t       \"mftbu %1\\;\"\n+\t       \"cmpw %2,%0,%1\\;\"\n+\t       \"bne- %2,$-16\";\n+      }\n+  else\n+    if (TARGET_MFCRF)\n+      {\n+        return \"mfspr %L0,269\\;\"\n+\t       \"mfspr %0,268\\;\"\n+\t       \"mfspr %1,269\\;\"\n+\t       \"cmpw %2,%L0,%1\\;\"\n+\t       \"bne- %2,$-16\";\n+      }\n+    else\n+      {\n+        return \"mftbu %L0\\;\"\n+\t       \"mftb %0\\;\"\n+\t       \"mftbu %1\\;\"\n+\t       \"cmpw %2,%L0,%1\\;\"\n+\t       \"bne- %2,$-16\";\n+      }\n+})\n+\n+(define_insn \"rs6000_mftb_<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec_volatile:P [(const_int 0)] UNSPECV_MFTB))]\n+  \"\"\n+{\n+  if (TARGET_MFCRF)\n+    return \"mfspr %0,268\";\n+  else\n+    return \"mftb %0\";\n+})\n+\n \f\n \n (include \"sync.md\")"}, {"sha": "5a75d4507a9e7b31c5458009b004df0652d7b522", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbf084f42a63c393962eb2207c826eb91c5029/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbf084f42a63c393962eb2207c826eb91c5029/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0efbf084f42a63c393962eb2207c826eb91c5029", "patch": "@@ -8647,6 +8647,7 @@ instructions, but allow the compiler to schedule those calls.\n * MIPS Loongson Built-in Functions::\n * Other MIPS Built-in Functions::\n * picoChip Built-in Functions::\n+* PowerPC Built-in Functions::\n * PowerPC AltiVec/VSX Built-in Functions::\n * RX Built-in Functions::\n * SPARC VIS Built-in Functions::\n@@ -11596,6 +11597,38 @@ GCC defines the preprocessor macro @code{___GCC_HAVE_BUILTIN_MIPS_CACHE}\n when this function is available.\n @end table\n \n+@node PowerPC Built-in Functions\n+@subsection PowerPC Built-in Functions\n+\n+These built-in functions are available for the PowerPC family of\n+processors:\n+@smallexample\n+float __builtin_recipdivf (float, float);\n+float __builtin_rsqrtf (float);\n+double __builtin_recipdiv (double, double);\n+double __builtin_rsqrt (double);\n+long __builtin_bpermd (long, long);\n+uint64_t __builtin_ppc_get_timebase ();\n+unsigned long __builtin_ppc_mftb ();\n+@end smallexample\n+\n+The @code{vec_rsqrt}, @code{__builtin_rsqrt}, and\n+@code{__builtin_rsqrtf} functions generate multiple instructions to\n+implement the reciprocal sqrt functionality using reciprocal sqrt\n+estimate instructions.\n+\n+The @code{__builtin_recipdiv}, and @code{__builtin_recipdivf}\n+functions generate multiple instructions to implement division using\n+the reciprocal estimate instructions.\n+\n+The @code{__builtin_ppc_get_timebase} and @code{__builtin_ppc_mftb}\n+functions generate instructions to read the Time Base Register.  The\n+@code{__builtin_ppc_get_timebase} function may generate multiple\n+instructions and always returns the 64 bits of the Time Base Register.\n+The @code{__builtin_ppc_mftb} function always generates one instruction and\n+returns the Time Base Register value as an unsigned long, throwing away\n+the most significant word on 32-bit environments.\n+\n @node PowerPC AltiVec/VSX Built-in Functions\n @subsection PowerPC AltiVec Built-in Functions\n \n@@ -13653,24 +13686,6 @@ if the VSX instruction set is available.  The @samp{vec_vsx_ld} and\n @samp{vec_vsx_st} builtins will always generate the VSX @samp{LXVD2X},\n @samp{LXVW4X}, @samp{STXVD2X}, and @samp{STXVW4X} instructions.\n \n-GCC provides a few other builtins on Powerpc to access certain instructions:\n-@smallexample\n-float __builtin_recipdivf (float, float);\n-float __builtin_rsqrtf (float);\n-double __builtin_recipdiv (double, double);\n-double __builtin_rsqrt (double);\n-long __builtin_bpermd (long, long);\n-@end smallexample\n-\n-The @code{vec_rsqrt}, @code{__builtin_rsqrt}, and\n-@code{__builtin_rsqrtf} functions generate multiple instructions to\n-implement the reciprocal sqrt functionality using reciprocal sqrt\n-estimate instructions.\n-\n-The @code{__builtin_recipdiv}, and @code{__builtin_recipdivf}\n-functions generate multiple instructions to implement division using\n-the reciprocal estimate instructions.\n-\n @node RX Built-in Functions\n @subsection RX Built-in Functions\n GCC supports some of the RX instructions which cannot be expressed in"}]}