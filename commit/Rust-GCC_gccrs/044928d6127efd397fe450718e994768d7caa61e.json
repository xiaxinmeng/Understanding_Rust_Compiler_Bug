{"sha": "044928d6127efd397fe450718e994768d7caa61e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ0OTI4ZDYxMjdlZmQzOTdmZTQ1MDcxOGU5OTQ3NjhkN2NhYTYxZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-10-29T16:43:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-10-29T16:43:21Z"}, "message": "i386-protos.h (ix86_expand_trunc): Declare.\n\n2006-10-29  Richard Guenther  <rguenther@suse.de>\n\n\t* config/i386/i386-protos.h (ix86_expand_trunc): Declare.\n\t(ix86_expand_truncdf_32): Likewise.\n\t* config/i386/i386.c (ix86_expand_trunc): New function expanding\n\ttrunc inline for SSE math and -fno-trapping-math and if not\n\toptimizing for size.\n\t(ix86_expand_truncdf_32): Same for DFmode on 32bit archs.\n\t* config/i386/i386.md (btruncsf2, btruncdf2): Adjust expanders\n\tfor expanding btrunc inline for SSE math.\n\n\t* gcc.target/i386/math-torture/trunc.c: New testcase.\n\nFrom-SVN: r118148", "tree": {"sha": "8b6533a6eefd2ae32471956c89d21ee089fbaa2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b6533a6eefd2ae32471956c89d21ee089fbaa2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/044928d6127efd397fe450718e994768d7caa61e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/044928d6127efd397fe450718e994768d7caa61e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/044928d6127efd397fe450718e994768d7caa61e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/044928d6127efd397fe450718e994768d7caa61e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f45f0f588d8af6ed4047e0ce4351749b6c0328b"}], "stats": {"total": 182, "additions": 166, "deletions": 16}, "files": [{"sha": "c4bd38882353161a7a9a34dc954e564c15dae74e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044928d6127efd397fe450718e994768d7caa61e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044928d6127efd397fe450718e994768d7caa61e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=044928d6127efd397fe450718e994768d7caa61e", "patch": "@@ -1,3 +1,14 @@\n+2006-10-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* config/i386/i386-protos.h (ix86_expand_trunc): Declare.\n+\t(ix86_expand_truncdf_32): Likewise.\n+\t* config/i386/i386.c (ix86_expand_trunc): New function expanding\n+\ttrunc inline for SSE math and -fno-trapping-math and if not\n+\toptimizing for size.\n+\t(ix86_expand_truncdf_32): Same for DFmode on 32bit archs.\n+\t* config/i386/i386.md (btruncsf2, btruncdf2): Adjust expanders\n+\tfor expanding btrunc inline for SSE math.\n+\n 2006-10-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config.gcc (i[34567]86-*-linux*): Handle --enable-targets=all."}, {"sha": "e7154700577ff84fdb14db0211f3f37f870ce4de", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044928d6127efd397fe450718e994768d7caa61e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044928d6127efd397fe450718e994768d7caa61e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=044928d6127efd397fe450718e994768d7caa61e", "patch": "@@ -164,6 +164,8 @@ extern void ix86_expand_floorceil (rtx, rtx, bool);\n extern void ix86_expand_floorceildf_32 (rtx, rtx, bool);\n extern void ix86_expand_round (rtx, rtx);\n extern void ix86_expand_rounddf_32 (rtx, rtx);\n+extern void ix86_expand_trunc (rtx, rtx);\n+extern void ix86_expand_truncdf_32 (rtx, rtx);\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);"}, {"sha": "074ce92e668b6af973dbda09fe704f9c974fa809", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044928d6127efd397fe450718e994768d7caa61e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044928d6127efd397fe450718e994768d7caa61e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=044928d6127efd397fe450718e994768d7caa61e", "patch": "@@ -19639,6 +19639,100 @@ ix86_expand_rounddf_32 (rtx operand0, rtx operand1)\n   emit_move_insn (operand0, res);\n }\n \n+/* Expand SSE sequence for computing trunc from OPERAND1 storing\n+   into OPERAND0.  */\n+void\n+ix86_expand_trunc (rtx operand0, rtx operand1)\n+{\n+  /* C code for SSE variant we expand below.\n+        double xa = fabs (x), x2;\n+        if (!isless (xa, TWO52))\n+          return x;\n+        return (double)(long)x;\n+   */\n+  enum machine_mode mode = GET_MODE (operand0);\n+  rtx xa, xi, TWO52, label, res;\n+\n+  TWO52 = ix86_gen_TWO52 (mode);\n+\n+  /* Temporary for holding the result, initialized to the input\n+     operand to ease control flow.  */\n+  res = gen_reg_rtx (mode);\n+  emit_move_insn (res, operand1);\n+\n+  /* xa = abs (operand1) */\n+  xa = ix86_expand_sse_fabs (res, NULL);\n+\n+  /* if (!isless (xa, TWO52)) goto label; */\n+  label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n+\n+  /* x = (double)(long)x */\n+  xi = gen_reg_rtx (mode == DFmode ? DImode : SImode);\n+  expand_fix (xi, res, 0);\n+  expand_float (res, xi, 0);\n+\n+  emit_label (label);\n+  LABEL_NUSES (label) = 1;\n+\n+  emit_move_insn (operand0, res);\n+}\n+\n+/* Expand SSE sequence for computing trunc from OPERAND1 storing\n+   into OPERAND0.  */\n+void\n+ix86_expand_truncdf_32 (rtx operand0, rtx operand1)\n+{\n+  enum machine_mode mode = GET_MODE (operand0);\n+  rtx xa, mask, TWO52, label, one, res, smask;\n+\n+  /* C code for SSE variant we expand below.\n+        double xa = fabs (x), x2;\n+        if (!isless (xa, TWO52))\n+          return x;\n+        xa2 = xa + TWO52 - TWO52;\n+     Compensate:\n+        if (xa2 > xa)\n+          xa2 -= 1.0;\n+        x2 = copysign (xa2, x);\n+        return x2;\n+   */\n+\n+  TWO52 = ix86_gen_TWO52 (mode);\n+\n+  /* Temporary for holding the result, initialized to the input\n+     operand to ease control flow.  */\n+  res = gen_reg_rtx (mode);\n+  emit_move_insn (res, operand1);\n+\n+  /* xa = abs (operand1) */\n+  xa = ix86_expand_sse_fabs (res, &smask);\n+\n+  /* if (!isless (xa, TWO52)) goto label; */\n+  label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n+\n+  /* res = xa + TWO52 - TWO52; */\n+  expand_simple_binop (mode, PLUS, xa, TWO52, res, 0, OPTAB_DIRECT);\n+  expand_simple_binop (mode, MINUS, res, TWO52, res, 0, OPTAB_DIRECT);\n+\n+  /* generate 1.0 */\n+  one = force_reg (mode, const_double_from_real_value (dconst1, mode));\n+\n+  /* Compensate: res = xa2 - (res > xa ? 1 : 0)  */\n+  mask = ix86_expand_sse_compare_mask (UNGT, res, xa, false);\n+  emit_insn (gen_rtx_SET (VOIDmode, mask,\n+                          gen_rtx_AND (mode, mask, one)));\n+  expand_simple_binop (mode, MINUS,\n+                       res, mask, res, 0, OPTAB_DIRECT);\n+\n+  /* res = copysign (res, operand1) */\n+  ix86_sse_copysign_to_positive (res, res, force_reg (mode, operand1), smask);\n+\n+  emit_label (label);\n+  LABEL_NUSES (label) = 1;\n+\n+  emit_move_insn (operand0, res);\n+}\n+\n /* Expand SSE sequence for computing round from OPERAND1 storing\n    into OPERAND0.  */\n void"}, {"sha": "2da10a1c751e4f7e8ecf9f05cdc904431aac3a55", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 41, "deletions": 16, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044928d6127efd397fe450718e994768d7caa61e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044928d6127efd397fe450718e994768d7caa61e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=044928d6127efd397fe450718e994768d7caa61e", "patch": "@@ -18032,34 +18032,59 @@\n (define_expand \"btruncdf2\"\n   [(use (match_operand:DF 0 \"register_operand\" \"\"))\n    (use (match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations)\n+   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n+       && !flag_trapping_math\n+       && !optimize_size)\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  if (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n+      && !flag_trapping_math\n+      && !optimize_size)\n+    {\n+      if (TARGET_64BIT)\n+\tix86_expand_trunc (operand0, operand1);\n+      else\n+\tix86_expand_truncdf_32 (operand0, operand1);\n+    }\n+  else\n+    {\n+      rtx op0 = gen_reg_rtx (XFmode);\n+      rtx op1 = gen_reg_rtx (XFmode);\n \n-  emit_insn (gen_extenddfxf2 (op1, operands[1]));\n-  emit_insn (gen_frndintxf2_trunc (op0, op1));\n+      emit_insn (gen_extenddfxf2 (op1, operands[1]));\n+      emit_insn (gen_frndintxf2_trunc (op0, op1));\n \n-  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));\n+      emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));\n+    }\n   DONE;\n })\n \n (define_expand \"btruncsf2\"\n   [(use (match_operand:SF 0 \"register_operand\" \"\"))\n    (use (match_operand:SF 1 \"register_operand\" \"\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations)\n+   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n+       && !flag_trapping_math\n+       && !optimize_size)\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  if (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n+      && !flag_trapping_math\n+      && !optimize_size)\n+    ix86_expand_trunc (operand0, operand1);\n+  else\n+    {\n+      rtx op0 = gen_reg_rtx (XFmode);\n+      rtx op1 = gen_reg_rtx (XFmode);\n \n-  emit_insn (gen_extendsfxf2 (op1, operands[1]));\n-  emit_insn (gen_frndintxf2_trunc (op0, op1));\n+      emit_insn (gen_extendsfxf2 (op1, operands[1]));\n+      emit_insn (gen_frndintxf2_trunc (op0, op1));\n \n-  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));\n+      emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));\n+    }\n   DONE;\n })\n "}, {"sha": "067d97e9481df2e5b8cdf11f11666426ebbfc390", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044928d6127efd397fe450718e994768d7caa61e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044928d6127efd397fe450718e994768d7caa61e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=044928d6127efd397fe450718e994768d7caa61e", "patch": "@@ -1,3 +1,7 @@\n+2006-10-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/math-torture/trunc.c: New testcase.\n+\n 2006-10-29  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.target/i386/math-torture/round.c: New testcase."}, {"sha": "a71e026c51801f91cc580054f77b6e6bc9b34f4f", "filename": "gcc/testsuite/gcc.target/i386/math-torture/trunc.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044928d6127efd397fe450718e994768d7caa61e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Ftrunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044928d6127efd397fe450718e994768d7caa61e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Ftrunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Ftrunc.c?ref=044928d6127efd397fe450718e994768d7caa61e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do assemble } */\n+\n+float testlf (float x)\n+{\n+  return __builtin_truncf (x);\n+}\n+double testl (double x)\n+{\n+  return __builtin_trunc (x);\n+}\n+long double testll (long double x)\n+{\n+  return __builtin_truncl (x);\n+}"}]}