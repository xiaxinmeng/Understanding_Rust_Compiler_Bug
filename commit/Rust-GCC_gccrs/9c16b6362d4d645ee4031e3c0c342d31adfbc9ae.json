{"sha": "9c16b6362d4d645ee4031e3c0c342d31adfbc9ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMxNmI2MzYyZDRkNjQ1ZWU0MDMxZTNjMGMzNDJkMzFhZGZiYzlhZQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2007-12-15T21:39:14Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2007-12-15T21:39:14Z"}, "message": "Add CRIS v32 support.  Fix -mcc-init.\n\nFrom-SVN: r130973", "tree": {"sha": "d30979dbbf4e60666697307e6c6c7e81a0592e46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d30979dbbf4e60666697307e6c6c7e81a0592e46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c16b6362d4d645ee4031e3c0c342d31adfbc9ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c16b6362d4d645ee4031e3c0c342d31adfbc9ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c16b6362d4d645ee4031e3c0c342d31adfbc9ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c16b6362d4d645ee4031e3c0c342d31adfbc9ae/comments", "author": null, "committer": null, "parents": [{"sha": "6e86f9ab6fdb19086a4ce316899502ffde27f994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e86f9ab6fdb19086a4ce316899502ffde27f994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e86f9ab6fdb19086a4ce316899502ffde27f994"}], "stats": {"total": 187, "additions": 187, "deletions": 0}, "files": [{"sha": "fcbc33c09a196989a3e46e6d16b7fe6f83a4a549", "filename": "gcc/ChangeLog", "status": "modified", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c16b6362d4d645ee4031e3c0c342d31adfbc9ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c16b6362d4d645ee4031e3c0c342d31adfbc9ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c16b6362d4d645ee4031e3c0c342d31adfbc9ae", "patch": "@@ -1,3 +1,190 @@\n+2007-12-15  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tAdd CRIS v32 support.  Fix -mcc-init.\n+\t* config.gcc: Make crisv32-* have cpu_type cris.  Handle\n+\tcrisv32-*-elf and crisv32-*-none like cris-*-elf and cris-*-none\n+\tbut without multilibs and with target_cpu_default=32.\n+\t(crisv32-*-linux*): Handle as cris-*-linux*.  Set\n+\ttarget_cpu_default to 32 and 10 accordingly.\n+\t* config/cris/cris.c (ASSERT_PLT_UNSPEC): Remove unused macro.\n+\t(cris_movem_load_rest_p, cris_store_multiple_op_p): Remove FIXME.\n+\tChange regno_dir and regno only if !TARGET_V32.\n+\t(cris_conditional_register_usage): If TARGET_V32, set\n+\treg_alloc_order as per REG_ALLOC_ORDER_V32 and make\n+\tCRIS_ACR_REGNUM non-fixed.\n+\t(cris_print_base): Add gcc_assert for post_inc on CRIS_ACR_REGNUM.\n+\t(cris_print_operand) <case 'Z', case 'u'>: New cases.\n+\t<case REG of case 'H'>: Allow for CRIS_SRP_REGNUM.\n+\t(cris_reload_address_legitimized): Always return false for\n+\tTARGET_V32.\n+\t(cris_register_move_cost): New function, guts from\n+\tREGISTER_MOVE_COST adjusted for CRIS v32.\n+\t(cris_normal_notice_update_cc): New function split out from...\n+\t(cris_notice_update_cc): Set cc_status.flags CC_REVERSED for\n+\tTARGET_CCINIT.  Call cris_normal_notice_update_cc for CC_REV,\n+\tCC_NOOV32 and CC_NORMAL, but set cc_status.flags CC_NO_OVERFLOW\n+\tfor CC_NOOV32 and TARGET_V32.\n+\t(cris_simple_epilogue): Always return false for TARGET_V32 if\n+\tcris_return_address_on_stack yields true.\n+\t(cris_cc0_user_requires_cmp): New function.\n+\t(cris_valid_pic_const): Add argument ANY_OPERAND.  All callers\n+\tchanged.  Handle CRIS_UNSPEC_PLT_PCREL and CRIS_UNSPEC_PCREL.\n+\t(cris_asm_output_case_end): New function, guts from\n+\tASM_OUTPUT_CASE_END adjusted for CRIS v32.\n+\t(cris_override_options): Adjust for CRIS v32.  Mask out\n+\tTARGET_SIDE_EFFECT_PREFIXES and TARGET_MUL_BUG if v32.\n+\t(cris_asm_output_mi_thunk, cris_expand_epilogue)\n+\t(cris_gen_movem_load, cris_emit_movem_store)\n+\t(cris_expand_pic_call_address, cris_asm_output_symbol_ref)\n+\t(cris_asm_output_label_ref, cris_output_addr_const_extra): Adjust\n+\tfor CRIS v32.\n+\t(cris_split_movdx): Copy re-used MEM.\n+\t* config/cris/t-elfmulti: Add multilib v32 for -march=v32.\n+\t* config/cris/predicates.md\n+\t(\"cris_general_operand_or_pic_source\"): New predicate.\n+\t(\"cris_general_operand_or_plt_symbol\"): Replace by...\n+\t(\"cris_nonmemory_operand_or_callable_symbol\"): New predicate.\n+\t* config/cris/linux.h: Sanity-check TARGET_CPU_DEFAULT for\n+\tpresence and contents.\n+\t(CRIS_SUBTARGET_DEFAULT_ARCH): New macro, MASK_AVOID_GOTPLT for\n+\tv32, 0 otherwise.\n+\t(CRIS_CPP_SUBTARGET_SPEC, CRIS_CC1_SUBTARGET_SPEC,\n+\tCRIS_ASM_SUBTARGET_SPEC): Adjust for different\n+\tTARGET_CPU_DEFAULT.\n+\t(CRIS_SUBTARGET_DEFAULT): Add CRIS_SUBTARGET_DEFAULT_ARCH.\n+\t* config/cris/cris.h: Sanity-check TARGET_CPU_DEFAULT for contents.\n+\t(CRIS_DEFAULT_TUNE, CRIS_ARCH_CPP_DEFAULT)\n+\t(CRIS_DEFAULT_ASM_ARCH_OPTION): New macros.\n+\t(CRIS_CC1_SUBTARGET_SPEC): Change default tuning to use\n+\tCRIS_DEFAULT_TUNE. \n+\t(CRIS_CPP_SUBTARGET_SPEC): Ditto.  Add CRIS_ARCH_CPP_DEFAULT.\n+\t(ASM_SPEC): Add sanity-check erroring out when both -march= and\n+\t-mcpu= are specified.  Pass on either as --march=v32.\n+\t(CRIS_ASM_SUBTARGET_SPEC): When neither -march= or -mcpu= are\n+\tspecified, pass on CRIS_DEFAULT_ASM_ARCH_OPTION.\n+\t(CRIS_CPU_V32): New macro.\n+\t[!TARGET_CPU_DEFAULT]: Default-define as CRIS_CPU_BASE.\n+\t[!TARGET_DEFAULT, TARGET_CPU_DEFAULT == 32]: Move default\n+\tTARGET_DEFAULT definition after new TARGET_CPU_DEFAULT definition.\n+\tDefine v32-adjusted TARGET_DEFAULT.\n+\t(CRIS_DEFAULT_CPU_VERSION): Change to TARGET_CPU_DEFAULT from\n+\tCRIS_CPU_BASE.\n+\t(TARGET_V32): New macro.\n+\t(REG_ALLOC_ORDER_V32): New macro.\n+\t(HARD_REGNO_MODE_OK): Do not allow larger-than-register-size modes\n+\tinto CRIS_ACR_REGNUM.\n+\t(enum reg_class): New classes ACR_REGS, SPEC_ACR_REGS,\n+\tGENNONACR_REGS and SPEC_GENNONACR_REGS.\n+\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS): Adjust for new classes.\n+\t(REGNO_REG_CLASS): Give ACR_REGS for CRIS_ACR_REGNUM.\n+\t(MODE_CODE_BASE_REG_CLASS): Define, give for OCODE POST_INC\n+\tGENNONACR_REGS, BASE_REG_CLASS otherwise.\n+\t(REG_CLASS_FROM_LETTER): 'a' is for ACR_REGS.\n+\t(REGNO_MODE_CODE_OK_FOR_BASE_P): Define, refusing OCODE POST_INC\n+\tfor CRIS_ACR_REGNUM.\n+\t(PREFERRED_RELOAD_CLASS): Keep ACR_REGS as preferred.\n+\t(HARD_REGNO_RENAME_OK): Refuse CRIS_ACR_REGNUM as TO.\n+\t(EXTRA_CONSTRAINT): New constraint 'U'.\n+\t(TRAMPOLINE_TEMPLATE, TRAMPOLINE_SIZE, INITIALIZE_TRAMPOLINE)\n+\t(ASM_OUTPUT_ADDR_DIFF_ELT): Adjust for CRIS v32.\n+\t(BASE_OR_AUTOINCR_P): Refuse POST_INC for CRIS_ACR_REGNUM.\n+\t(SIMPLE_ADDRESS_P): Remove.\n+\t(GO_IF_LEGITIMATE_ADDRESS): Use BASE_OR_AUTOINCR_P, not redundant\n+\tSIMPLE_ADDRESS_P.  Make one chained if-else, finishing as\n+\tnon-match after BASE_OR_AUTOINCR_P for TARGET_V32.\n+\t(REGISTER_MOVE_COST): Just call the new function\n+\tcris_register_move_cost.\n+\t(enum cris_pic_symbol_type): Rename cris_gotrel_symbol to\n+\tcris_rel_symbol.  All users changed.\n+\t(REGISTER_NAMES): Replace \"pc\" with \"acr\".\n+\t(ADDITIONAL_REGISTER_NAMES): Add \"pc\" for 15.\n+\t(ASM_OUTPUT_REG_PUSH): Change to v32-compatible sequence.\n+\t(ASM_OUTPUT_REG_POP): Change to v32-compatible syntax.\n+\t(ASM_OUTPUT_CASE_END): Just call the new function\n+\tcris_asm_output_case_end.\n+\t* gcc/config/cris/cris.md: Group related constants together, with\n+\tcomments local.\n+\t(CRIS_UNSPEC_PLT_GOTREL, CRIS_UNSPEC_PLT_PCREL, CRIS_UNSPEC_PCREL)\n+\t(CRIS_UNSPEC_CASESI): New constants.\n+\t(CRIS_UNSPEC_PLT): Remove constant.\n+\t(CRIS_ACR_REGNUM): New constant.\n+\t(\"slottable\"): New attr alternatives \"has_return_slot\" and\n+\t\"has_call_slot\".\n+\t(\"cc\"): New attr alternatives \"noov32\" and \"rev\".\n+\t((eq_attr \"slottable\" \"has_call_slot\"))\n+\t((eq_attr \"slottable\" \"has_return_slot\")): New define_delays.\n+\t(\"movdi\", \"movsi\"): Adjust operands for CRIS v32.\n+\t(\"tstdi\", \"cmpdi\", \"adddi3\", \"subdi3\", \"uminsi3\")\n+\t(\"indirect_jump\"): Ditto.  Make define_expand.\n+\t(\"*tstdi_non_v32\", \"*tstdi_v32\", \"*tst<mode>_cmp\")\n+\t(\"*tst<mode>_non_cmp\", \"*cmpdi_non_v32\", \"*cmpdi_v32\")\n+\t(\"*movdi_v32\", \"*adddi3_non_v32\", \"*adddi3_v32\")\n+\t(\"*addsi3_non_v32\", \"*addsi3_v32\", \"*addhi3_non_v32\")\n+\t(\"*addhi3_v32\", \"*addqi3_non_v32\", \"*addqi3_v32\")\n+\t(\"*subdi3_non_v32\", \"*subdi3_v32\", \"*subsi3_non_v32\")\n+\t(\"*subsi3_v32\", \"*sub<mode>3_nonv32\", \"*sub<mode>3_v32\")\n+\t(\"*andqi3_non_v32\", \"*andqi3_v32\", \"*iorsi3_non_v32\")\n+\t(\"*iorsi3_v32\", \"*iorhi3_non_v32\", \"*iorhi3_v32\")\n+\t(\"*iorqi3_non_v32\", \"*iorqi3_v32\", \"*uminsi3_non_v32\")\n+\t(\"*uminsi3_v32\", \"*indirect_jump_non_v32\", \"*indirect_jump_v32\")\n+\t(\"*expanded_call_v32\", \"*expanded_call_value_v32\"): New patterns,\n+\tfor the corresponding standard name.\n+\t(\"tst<mode>\"): Limit to BW and make define_expand.\n+\t(\"tstsi\"): Make separate insn, adjusting for CRIS v32.\n+\t(\"*cmp_swapext<mode>\"): Adjust for v32.  Specify \"rev\" for attr \"cc\".\n+\t(\"cmpsi\", \"cmp<mode>\"): Remove special cases for zero.  Specify\n+\tattr \"cc\".\n+\t(\"*btst\"): Don't match for TARGET_CCINIT.  Replace test of\n+\tregister with compatible \"cmpq 0\".  Specify attr \"cc\".\n+\t(\"*movdi_insn_non_v32\"): New pattern, replacing \"*movdi_insn\" and\n+\tdefine_split.\n+\t(define_split for DI move): Match CRIS v32 only.\n+\t(\"*movsi_got_load\", \"*movsi_internal\", \"*addi\"): Adjust for CRIS\n+\tv32.\n+\t(\"load_multiple\", \"store_multiple\", \"*addsbw_v32\", \"*addubw_v32\")\n+\t(\"*adds<mode>_v32\", \"*addu<mode>_v32\", \"*bound<mode>_v32\")\n+\t(\"*casesi_jump_v32\", \"*expanded_andsi_v32\", \"*expanded_andhi_v32\")\n+\t(\"*extop<mode>si_v32\", \"*extopqihi_v32\", \"*andhi_lowpart_v32\")\n+\t(\"*andqi_lowpart_v32\", \"cris_casesi_v32\"): New patterns. \n+\t(\"add<mode>3\"): Make addsi3, addhi3 and addqi3 define_expand.\n+\t(\"sub<mode>3\"): Ditto subsi3, subhi3 and subqi3.\n+\t(\"ior<mode>3\"): Ditto iorsi3, iorhi3 and iorqi3.\n+\t(\"*extopqihi_non_v32\"): Replace \"*extopqihi\".\n+\t(\"*extop<mode>si_non_v32\"): Replace \"*extop<mode>si\".\n+\t(\"*addxqihi_swap_non_v32\"): Rename from \"*extopqihi_swap\", make\n+\tnon-v32 only.\n+\t(\"*extop<mode>si_swap_non_v32\"): Ditto \"*extop<mode>si_swap\".\n+\t(\"*expanded_andsi_non_v32\"): Ditto \"*expanded_andsi\".\n+\t(\"*expanded_andhi_non_v32\"): Ditto \"*expanded_andhi\".\n+\t(\"*andhi_lowpart_non_v32\"): Ditto \"*andhi_lowpart\".\n+\t(\"*andqi_lowpart_non_v32\"): Ditto \"*andqi_lowpart\".\n+\t(\"*expanded_call_non_v32\"): Ditto \"*expanded_call\".  Change from\n+\t\"cris_general_operand_or_plt_symbol\" to \"general_operand\".\n+\t(\"*expanded_call_value_non_v32\") Ditto \"*expanded_call_value\".\n+\t(\"*casesi_adds_w\", \"mstep_shift\", \"mstep_mul\")\n+\t(\"*expanded_call_side\", \"*expanded_call_value_side\")\n+\t(op-extend-split, op-extend-split-rx=rz, op-extend-split-swapped)\n+\t(op-extend-split-swapped-rx=rz, op-extend, op-split-rx=rz)\n+\t(op-split-swapped, op-split-swapped-rx=rz): Make non-v32 only.\n+\t(\"dstep_mul\", \"xorsi3\", \"one_cmplsi2\", \"<shlr>si3\")\n+\t(\"*expanded_<shlr><mode>\", \"*<shlr><mode>_lowpart\", \"ashl<mode>3\")\n+\t(\"*ashl<mode>_lowpart\", \"abssi2\", \"clzsi2\", \"bswapsi2\", \"cris_swap_bits\"): Specify \"noov32\" for\n+\tattr \"cc\".\n+\t(\"<su>mulsi3_highpart\"): Ditto.  Correct operand 0 to\n+\tregister_operand.\n+\t(\"andqi3\"): Make define_expand.\n+\t(\"*return_expanded\"): For attr \"slottable\", change from \"has_slot\"\n+\tto \"has_return_slot\".\n+\t(\"cris_casesi_non_v32\"): New pattern, old contents of \"casesi\".\n+\t(\"casesi\"): Divert into \"cris_casesi_v32\" and\n+\t\"cris_casesi_non_v32\".\n+\t(moversideqi, movemsideqi, mover2side): Require\n+\tTARGET_SIDE_EFFECT_PREFIXES.\n+\t(gotplt-to-plt, gotplt-to-plt-side): Change from CRIS_UNSPEC_PLT\n+\tto CRIS_UNSPEC_PLT_GOTREL.\n+\t* config/cris/cris-protos.h (cris_register_move_cost)\n+\t(cris_cc0_user_requires_cmp, cris_asm_output_case_end): Declare.\n+\n 2007-12-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/7081"}]}