{"sha": "240f07805db27cfc746276039c5edccb4c031070", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQwZjA3ODA1ZGIyN2NmYzc0NjI3NjAzOWM1ZWRjY2I0YzAzMTA3MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-14T09:44:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-14T09:44:46Z"}, "message": "i386: Fix ICE with V64QImode broadcast permutation with -mavx512f -mno-avx512bw\n\nThe testcase shows another problem, for TARGET_AVX512BW we have a single insn\ndoing broadcast from the first element, but don't have one for broadcast\nof 2nd+ element (so for d->perm[0] we must return false), but for\nTARGET_AVX512F && !TARGET_AVX512BW we don't even have support for that other\nbroadcast.  V64QImode case was just added to the AVX2 cases which had\ngcc_assert (!TARGET_AVX2 || d->perm[0]);\nbut for V64QImode we actually need\ngcc_assert (!TARGET_AVX512BW || d->perm[0]);\n\n2021-08-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/101896\n\t* config/i386/i386-expand.c (expand_vec_perm_broadcast_1)\n\t<case E_V64QImode>: For this mode assert\n\t!TARGET_AVX512BW || d->perm[0] rather than !TARGET_AVX2 || d->perm[0].\n\n\t* gcc.target/i386/avx512f-pr101896.c: New test.", "tree": {"sha": "db4cfe3e22b014165108e930f6b587a41bba40ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db4cfe3e22b014165108e930f6b587a41bba40ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/240f07805db27cfc746276039c5edccb4c031070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240f07805db27cfc746276039c5edccb4c031070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240f07805db27cfc746276039c5edccb4c031070", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240f07805db27cfc746276039c5edccb4c031070/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "261512fa6d56481dc37589e5cb4e288539155d57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261512fa6d56481dc37589e5cb4e288539155d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261512fa6d56481dc37589e5cb4e288539155d57"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "4d7349cfc7c51685d8e8431c05e0f113197076bf", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240f07805db27cfc746276039c5edccb4c031070/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240f07805db27cfc746276039c5edccb4c031070/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=240f07805db27cfc746276039c5edccb4c031070", "patch": "@@ -20474,7 +20474,6 @@ expand_vec_perm_broadcast_1 (struct expand_vec_perm_d *d)\n       emit_move_insn (d->target, gen_lowpart (d->vmode, dest));\n       return true;\n \n-    case E_V64QImode:\n     case E_V32QImode:\n     case E_V16HImode:\n     case E_V8SImode:\n@@ -20484,6 +20483,10 @@ expand_vec_perm_broadcast_1 (struct expand_vec_perm_d *d)\n       gcc_assert (!TARGET_AVX2 || d->perm[0]);\n       return false;\n \n+    case E_V64QImode:\n+      gcc_assert (!TARGET_AVX512BW || d->perm[0]);\n+      return false;\n+\n     case E_V32HImode:\n       gcc_assert (!TARGET_AVX512BW);\n       return false;"}, {"sha": "c1805cccac4e7f33b1066016a18a66d5e7b73bf3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr101896.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240f07805db27cfc746276039c5edccb4c031070/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr101896.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240f07805db27cfc746276039c5edccb4c031070/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr101896.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr101896.c?ref=240f07805db27cfc746276039c5edccb4c031070", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/101896 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mno-avx512bw\" } */\n+\n+#include \"../../gcc.dg/torture/vshuf-v64qi.c\""}]}