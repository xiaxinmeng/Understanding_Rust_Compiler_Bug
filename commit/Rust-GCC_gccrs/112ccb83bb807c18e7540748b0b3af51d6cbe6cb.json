{"sha": "112ccb83bb807c18e7540748b0b3af51d6cbe6cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEyY2NiODNiYjgwN2MxOGU3NTQwNzQ4YjBiM2FmNTFkNmNiZTZjYg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-08-02T01:46:40Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-08-02T01:46:40Z"}, "message": "rs6000.c (rs6000_split_multireg_move): Just abort if trying to *store* to a non-offsettable address.\n\n\t* config/rs6000/rs6000.c (rs6000_split_multireg_move): Just abort\n\tif trying to *store* to a non-offsettable address.\n\t* config/rs6000/rs6000.md (movtf_internal): Don't move GPRs to\n\ta nonoffsettable address.\n\t(movdi_internal32): Don't move GPRs to a nonoffsettable address.\n\tClean up.\n\t(movti_string): Don't move GPRs to a nonoffsettable address.\n\t(movti_ppc64): Don't move GPRs to a nonoffsettable address.  Clean up.\n\nFrom-SVN: r85419", "tree": {"sha": "5e1323dd5aebf59e11b8dfcd943dcb2e4480da27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e1323dd5aebf59e11b8dfcd943dcb2e4480da27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/112ccb83bb807c18e7540748b0b3af51d6cbe6cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112ccb83bb807c18e7540748b0b3af51d6cbe6cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112ccb83bb807c18e7540748b0b3af51d6cbe6cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112ccb83bb807c18e7540748b0b3af51d6cbe6cb/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4e41fdeecdeadee4f4b221ef38ab38122d1fc18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e41fdeecdeadee4f4b221ef38ab38122d1fc18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4e41fdeecdeadee4f4b221ef38ab38122d1fc18"}], "stats": {"total": 79, "additions": 33, "deletions": 46}, "files": [{"sha": "f604e8dc4bb3b72cd217e5ca29e21ffc0c8127dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/112ccb83bb807c18e7540748b0b3af51d6cbe6cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/112ccb83bb807c18e7540748b0b3af51d6cbe6cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=112ccb83bb807c18e7540748b0b3af51d6cbe6cb", "patch": "@@ -1,3 +1,14 @@\n+2004-08-01  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_split_multireg_move): Just abort\n+\tif trying to *store* to a non-offsettable address.\n+\t* config/rs6000/rs6000.md (movtf_internal): Don't move GPRs to\n+\ta nonoffsettable address.\n+\t(movdi_internal32): Don't move GPRs to a nonoffsettable address.\n+\tClean up.\n+\t(movti_string): Don't move GPRs to a nonoffsettable address.\n+\t(movti_ppc64): Don't move GPRs to a nonoffsettable address.  Clean up.\n+\n 2004-08-02  Ben Elliston  <bje@au.ibm.com>\n \n \tPR target/16155"}, {"sha": "773ca9ef487a0d8adb47cbfb1502e457b05ae853", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/112ccb83bb807c18e7540748b0b3af51d6cbe6cb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/112ccb83bb807c18e7540748b0b3af51d6cbe6cb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=112ccb83bb807c18e7540748b0b3af51d6cbe6cb", "patch": "@@ -11134,14 +11134,7 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n \t      dst = gen_rtx_MEM (mode, breg);\n \t    }\n \t  else if (! offsettable_memref_p (dst))\n-\t    {\n-\t      rtx newdst, basereg;\n-\t      basereg = gen_rtx_REG (Pmode, reg);\n-\t      emit_insn (gen_rtx_SET (VOIDmode, basereg, XEXP (dst, 0)));\n-\t      newdst = gen_rtx_MEM (GET_MODE (dst), basereg);\n-\t      MEM_COPY_ATTRIBUTES (newdst, dst);\n-\t      dst = newdst;\n-\t    }\n+\t    abort ();\n \t}\n \n       for (i = 0; i < nregs; i++)"}, {"sha": "dc8ce50b137554e60d9714506cf7e415ca1e76f8", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 21, "deletions": 38, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/112ccb83bb807c18e7540748b0b3af51d6cbe6cb/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/112ccb83bb807c18e7540748b0b3af51d6cbe6cb/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=112ccb83bb807c18e7540748b0b3af51d6cbe6cb", "patch": "@@ -8301,10 +8301,10 @@\n \n ; It's important to list the o->f and f->o moves before f->f because\n ; otherwise reload, given m->f, will try to pick f->f and reload it,\n-; which doesn't make progress.\n+; which doesn't make progress.  Likewise r->o<> must be before r->r.\n (define_insn_and_split \"*movtf_internal\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=o,f,f,rm,r\")\n-\t(match_operand:TF 1 \"input_operand\"         \"f,o,f,r,mGHF\"))]\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=o,f,f,r,o<>,r\")\n+\t(match_operand:TF 1 \"input_operand\"         \"f,o,f,mGHF,r,r\"))]\n   \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\n    && (gpc_reg_operand (operands[0], TFmode)\n@@ -8313,7 +8313,7 @@\n   \"&& reload_completed\"\n   [(pc)]\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; }\n-  [(set_attr \"length\" \"8,8,8,20,20\")])\n+  [(set_attr \"length\" \"8,8,8,20,20,16\")])\n \n (define_expand \"extenddftf2\"\n   [(parallel [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n@@ -8506,37 +8506,23 @@\n   \"\"\n   \"{ rs6000_emit_move (operands[0], operands[1], DImode); DONE; }\")\n \n+; List r->r after r->\"o<>\", otherwise reload will try to reload a\n+; non-offsettable address by using r->r which won't make progress.\n (define_insn \"*movdi_internal32\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,f,f,m,r,r,r,r,r\")\n-\t(match_operand:DI 1 \"input_operand\" \"r,m,r,f,m,f,IJK,n,G,H,F\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=o<>,r,r,f,f,m,r\")\n+\t(match_operand:DI 1 \"input_operand\" \"r,r,m,f,m,f,IJKnGHF\"))]\n   \"! TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n        || gpc_reg_operand (operands[1], DImode))\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    default:\n-      abort ();\n-    case 0:\n-    case 1:\n-    case 2:\n-      return \\\"#\\\";\n-    case 3:\n-      return \\\"fmr %0,%1\\\";\n-    case 4:\n-      return \\\"lfd%U1%X1 %0,%1\\\";\n-    case 5:\n-      return \\\"stfd%U0%X0 %1,%0\\\";\n-    case 6:\n-    case 7:\n-    case 8:\n-    case 9:\n-    case 10:\n-      return \\\"#\\\";\n-    }\n-}\"\n-  [(set_attr \"type\" \"*,load,store,fp,fpload,fpstore,*,*,*,*,*\")])\n+  \"@\n+   #\n+   #\n+   #\n+   fmr %0,%1\n+   lfd%U1%X1 %0,%1\n+   stfd%U0%X0 %1,%0\n+   #\"\n+  [(set_attr \"type\" \"load,*,store,fp,fpload,fpstore,*\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n@@ -8751,7 +8737,7 @@\n   [(set_attr \"type\" \"store,store,*,load,load\")])\n \n (define_insn \"*movti_string\"\n-  [(set (match_operand:TI 0 \"reg_or_mem_operand\" \"=Q,m,????r,????r,????r\")\n+  [(set (match_operand:TI 0 \"reg_or_mem_operand\" \"=Q,o<>,????r,????r,????r\")\n \t(match_operand:TI 1 \"reg_or_mem_operand\" \"r,r,r,Q,m\"))]\n   \"! TARGET_POWER && ! TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], TImode) || gpc_reg_operand (operands[1], TImode))\"\n@@ -8781,14 +8767,11 @@\n   [(set_attr \"type\" \"store,store,*,load,load\")])\n \n (define_insn \"*movti_ppc64\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=r,m,r\")\n-\t(match_operand:TI 1 \"input_operand\" \"r,r,o\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=r,o<>,r\")\n+\t(match_operand:TI 1 \"input_operand\" \"r,r,m\"))]\n   \"TARGET_POWERPC64 && (gpc_reg_operand (operands[0], TImode)\n    || gpc_reg_operand (operands[1], TImode))\"\n-  \"@\n-   #\n-   #\n-   #\"\n+  \"#\"\n   [(set_attr \"type\" \"*,load,store\")])\n \n (define_split"}]}