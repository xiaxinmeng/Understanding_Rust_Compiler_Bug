{"sha": "9245b0e84c262cc5fd8373e94de3d23a3807b122", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI0NWIwZTg0YzI2MmNjNWZkODM3M2U5NGRlM2QyM2EzODA3YjEyMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-15T15:36:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-15T17:20:06Z"}, "message": "libstdc++: Add noexcept specifiers to some range adaptors\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_util.h (view_interface): Add noexcept to\n\tempty, operator bool, data and size members.\n\t(subrange): Add noexcept to constructors.\n\t* include/std/ranges (single_view, ref_view): Add noexcept to\n\tconstructors.\n\t(views::single, views::all): Add noexcept.\n\t* testsuite/std/ranges/adaptors/all.cc: Check noexcept.\n\t* testsuite/std/ranges/single_view.cc: Likewise.", "tree": {"sha": "b51e2c58f09b4ad71afc31ce2858c7e9fc64a8f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b51e2c58f09b4ad71afc31ce2858c7e9fc64a8f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9245b0e84c262cc5fd8373e94de3d23a3807b122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9245b0e84c262cc5fd8373e94de3d23a3807b122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9245b0e84c262cc5fd8373e94de3d23a3807b122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9245b0e84c262cc5fd8373e94de3d23a3807b122/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a88fc03ba7e52d9a072f25d42bb9619fedb7892e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a88fc03ba7e52d9a072f25d42bb9619fedb7892e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a88fc03ba7e52d9a072f25d42bb9619fedb7892e"}], "stats": {"total": 135, "additions": 119, "deletions": 16}, "files": [{"sha": "dd829ed957fc68998e99f7330629fa913401e103", "filename": "libstdc++-v3/include/bits/ranges_util.h", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9245b0e84c262cc5fd8373e94de3d23a3807b122/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9245b0e84c262cc5fd8373e94de3d23a3807b122/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h?ref=9245b0e84c262cc5fd8373e94de3d23a3807b122", "patch": "@@ -77,45 +77,67 @@ namespace ranges\n \treturn static_cast<const _Derived&>(*this);\n       }\n \n+      static constexpr bool\n+      _S_bool(bool) noexcept; // not defined\n+\n+      template<typename _Tp>\n+\tstatic constexpr bool\n+\t_S_empty(_Tp& __t)\n+\tnoexcept(noexcept(_S_bool(ranges::begin(__t) == ranges::end(__t))))\n+\t{ return ranges::begin(__t) == ranges::end(__t); }\n+\n+      template<typename _Tp>\n+\tstatic constexpr auto\n+\t_S_size(_Tp& __t)\n+\tnoexcept(noexcept(ranges::end(__t) - ranges::begin(__t)))\n+\t{ return ranges::end(__t) - ranges::begin(__t); }\n+\n     public:\n       constexpr bool\n-      empty() requires forward_range<_Derived>\n-      { return ranges::begin(_M_derived()) == ranges::end(_M_derived()); }\n+      empty()\n+      noexcept(noexcept(_S_empty(_M_derived())))\n+      requires forward_range<_Derived>\n+      { return _S_empty(_M_derived()); }\n \n       constexpr bool\n-      empty() const requires forward_range<const _Derived>\n-      { return ranges::begin(_M_derived()) == ranges::end(_M_derived()); }\n+      empty() const\n+      noexcept(noexcept(_S_empty(_M_derived())))\n+      requires forward_range<const _Derived>\n+      { return _S_empty(_M_derived()); }\n \n       constexpr explicit\n-      operator bool() requires requires { ranges::empty(_M_derived()); }\n+      operator bool() noexcept(noexcept(ranges::empty(_M_derived())))\n+      requires requires { ranges::empty(_M_derived()); }\n       { return !ranges::empty(_M_derived()); }\n \n       constexpr explicit\n-      operator bool() const requires requires { ranges::empty(_M_derived()); }\n+      operator bool() const noexcept(noexcept(ranges::empty(_M_derived())))\n+      requires requires { ranges::empty(_M_derived()); }\n       { return !ranges::empty(_M_derived()); }\n \n       constexpr auto\n-      data() requires contiguous_iterator<iterator_t<_Derived>>\n-      { return to_address(ranges::begin(_M_derived())); }\n+      data() noexcept(noexcept(ranges::begin(_M_derived())))\n+      requires contiguous_iterator<iterator_t<_Derived>>\n+      { return std::to_address(ranges::begin(_M_derived())); }\n \n       constexpr auto\n-      data() const\n+      data() const noexcept(noexcept(ranges::begin(_M_derived())))\n       requires range<const _Derived>\n \t&& contiguous_iterator<iterator_t<const _Derived>>\n-      { return to_address(ranges::begin(_M_derived())); }\n+      { return std::to_address(ranges::begin(_M_derived())); }\n \n       constexpr auto\n-      size()\n+      size() noexcept(noexcept(_S_size(_M_derived())))\n       requires forward_range<_Derived>\n \t&& sized_sentinel_for<sentinel_t<_Derived>, iterator_t<_Derived>>\n-      { return ranges::end(_M_derived()) - ranges::begin(_M_derived()); }\n+      { return _S_size(_M_derived()); }\n \n       constexpr auto\n-      size() const\n+      size() const noexcept(noexcept(_S_size(_M_derived())))\n       requires forward_range<const _Derived>\n \t&& sized_sentinel_for<sentinel_t<const _Derived>,\n \t\t\t      iterator_t<const _Derived>>\n-      { return ranges::end(_M_derived()) - ranges::begin(_M_derived()); }\n+      { return _S_size(_M_derived()); }\n \n       constexpr decltype(auto)\n       front() requires forward_range<_Derived>\n@@ -223,13 +245,17 @@ namespace ranges\n \n       constexpr\n       subrange(__detail::__convertible_to_non_slicing<_It> auto __i, _Sent __s)\n+      noexcept(is_nothrow_constructible_v<_It, decltype(__i)>\n+\t       && is_nothrow_constructible_v<_Sent, _Sent&>)\n \trequires (!_S_store_size)\n       : _M_begin(std::move(__i)), _M_end(__s)\n       { }\n \n       constexpr\n       subrange(__detail::__convertible_to_non_slicing<_It> auto __i, _Sent __s,\n \t       __size_type __n)\n+      noexcept(is_nothrow_constructible_v<_It, decltype(__i)>\n+\t       && is_nothrow_constructible_v<_Sent, _Sent&>)\n \trequires (_Kind == subrange_kind::sized)\n       : _M_begin(std::move(__i)), _M_end(__s)\n       {\n@@ -242,7 +268,9 @@ namespace ranges\n \t  && __detail::__convertible_to_non_slicing<iterator_t<_Rng>, _It>\n \t  && convertible_to<sentinel_t<_Rng>, _Sent>\n \tconstexpr\n-\tsubrange(_Rng&& __r) requires _S_store_size && sized_range<_Rng>\n+\tsubrange(_Rng&& __r)\n+\tnoexcept(noexcept(subrange(__r, ranges::size(__r))))\n+\trequires _S_store_size && sized_range<_Rng>\n \t: subrange(__r, ranges::size(__r))\n \t{ }\n \n@@ -251,7 +279,9 @@ namespace ranges\n \t  && __detail::__convertible_to_non_slicing<iterator_t<_Rng>, _It>\n \t  && convertible_to<sentinel_t<_Rng>, _Sent>\n \tconstexpr\n-\tsubrange(_Rng&& __r) requires (!_S_store_size)\n+\tsubrange(_Rng&& __r)\n+\tnoexcept(noexcept(subrange(ranges::begin(__r), ranges::end(__r))))\n+\trequires (!_S_store_size)\n \t: subrange(ranges::begin(__r), ranges::end(__r))\n \t{ }\n \n@@ -260,6 +290,7 @@ namespace ranges\n \t  && convertible_to<sentinel_t<_Rng>, _Sent>\n \tconstexpr\n \tsubrange(_Rng&& __r, __size_type __n)\n+\tnoexcept(noexcept(subrange(ranges::begin(__r), ranges::end(__r), __n)))\n \trequires (_Kind == subrange_kind::sized)\n \t: subrange{ranges::begin(__r), ranges::end(__r), __n}\n \t{ }"}, {"sha": "b2943490e31ce31bf7f63f06b399e2e762d42407", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9245b0e84c262cc5fd8373e94de3d23a3807b122/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9245b0e84c262cc5fd8373e94de3d23a3807b122/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=9245b0e84c262cc5fd8373e94de3d23a3807b122", "patch": "@@ -197,11 +197,13 @@ namespace ranges\n \n       constexpr explicit\n       single_view(const _Tp& __t)\n+      noexcept(is_nothrow_copy_constructible_v<_Tp>)\n       : _M_value(__t)\n       { }\n \n       constexpr explicit\n       single_view(_Tp&& __t)\n+      noexcept(is_nothrow_move_constructible_v<_Tp>)\n       : _M_value(std::move(__t))\n       { }\n \n@@ -211,6 +213,7 @@ namespace ranges\n \trequires constructible_from<_Tp, _Args...>\n \tconstexpr explicit\n \tsingle_view(in_place_t, _Args&&... __args)\n+\tnoexcept(is_nothrow_constructible_v<_Tp, _Args...>)\n \t: _M_value{in_place, std::forward<_Args>(__args)...}\n \t{ }\n \n@@ -604,6 +607,7 @@ namespace views\n     template<typename _Tp>\n       constexpr auto\n       operator()(_Tp&& __e) const\n+      noexcept(noexcept(single_view<decay_t<_Tp>>(std::forward<_Tp>(__e))))\n       { return single_view<decay_t<_Tp>>(std::forward<_Tp>(__e)); }\n   };\n \n@@ -1022,6 +1026,7 @@ namespace views::__adaptor\n \t  && requires { _S_fun(declval<_Tp>()); }\n \tconstexpr\n \tref_view(_Tp&& __t)\n+\tnoexcept(noexcept(static_cast<_Range&>(std::declval<_Tp>())))\n \t  : _M_r(std::__addressof(static_cast<_Range&>(std::forward<_Tp>(__t))))\n \t{ }\n \n@@ -1069,12 +1074,25 @@ namespace views::__adaptor\n \n     struct _All : __adaptor::_RangeAdaptorClosure\n     {\n+      template<typename _Range>\n+\tstatic constexpr bool\n+\t_S_noexcept()\n+\t{\n+\t  if constexpr (view<decay_t<_Range>>)\n+\t    return is_nothrow_constructible_v<decay_t<_Range>, _Range>;\n+\t  else if constexpr (__detail::__can_ref_view<_Range>)\n+\t    return true;\n+\t  else\n+\t    return noexcept(subrange{std::declval<_Range>()});\n+\t}\n+\n       template<viewable_range _Range>\n \trequires view<decay_t<_Range>>\n \t  || __detail::__can_ref_view<_Range>\n \t  || __detail::__can_subrange<_Range>\n \tconstexpr auto\n \toperator()(_Range&& __r) const\n+\tnoexcept(_S_noexcept<_Range>())\n \t{\n \t  if constexpr (view<decay_t<_Range>>)\n \t    return std::forward<_Range>(__r);"}, {"sha": "9a6a31e6cb40985c2d50cdc3a833d8130a1b6f3e", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/all.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9245b0e84c262cc5fd8373e94de3d23a3807b122/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9245b0e84c262cc5fd8373e94de3d23a3807b122/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fall.cc?ref=9245b0e84c262cc5fd8373e94de3d23a3807b122", "patch": "@@ -130,6 +130,35 @@ test05()\n   static_assert(!requires { 0 | all; });\n }\n \n+template<bool B1, bool B2>\n+struct BorrowedRange\n+{\n+  int* ptr = nullptr;\n+\n+  BorrowedRange(int (&arr)[3]) noexcept : ptr(arr) { }\n+\n+  int* begin() const noexcept(B1) { return ptr; }\n+  int* end() const noexcept(B2) { return ptr + 3; }\n+};\n+\n+template<bool B1, bool B2>\n+const bool std::ranges::enable_borrowed_range<BorrowedRange<B1, B2>> = true;\n+\n+void\n+test06()\n+{\n+  int x[] { 1, 2, 3 };\n+\n+  // Using ref_view:\n+  static_assert(noexcept(views::all(x)));\n+\n+  // Using subrange:\n+  static_assert(noexcept(views::all(BorrowedRange<true, true>(x))));\n+  static_assert(!noexcept(views::all(BorrowedRange<true, false>(x))));\n+  static_assert(!noexcept(views::all(BorrowedRange<false, true>(x))));\n+  static_assert(!noexcept(views::all(BorrowedRange<false, false>(x))));\n+}\n+\n int\n main()\n {\n@@ -138,4 +167,5 @@ main()\n   static_assert(test03());\n   static_assert(test04());\n   test05();\n+  test06();\n }"}, {"sha": "c036fc8976a3d19495037ff3c6576e32a5ace67a", "filename": "libstdc++-v3/testsuite/std/ranges/single_view.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9245b0e84c262cc5fd8373e94de3d23a3807b122/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9245b0e84c262cc5fd8373e94de3d23a3807b122/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc?ref=9245b0e84c262cc5fd8373e94de3d23a3807b122", "patch": "@@ -73,10 +73,34 @@ test04()\n   std::as_const(s).data();\n }\n \n+void\n+test05()\n+{\n+  int i = 0;\n+  static_assert(noexcept(std::ranges::single_view<int>()));\n+  static_assert(noexcept(std::ranges::single_view<int>(i)));\n+  static_assert(noexcept(std::ranges::single_view<int>(1)));\n+  static_assert(noexcept(std::ranges::single_view<int>(std::in_place, 2)));\n+  static_assert(noexcept(std::ranges::views::single(i)));\n+  auto s = std::ranges::views::single(i);\n+  static_assert(noexcept(s.begin()));\n+  static_assert(noexcept(s.end()));\n+  static_assert(noexcept(s.size()));\n+  static_assert(noexcept(s.data()));\n+  static_assert(noexcept(s.empty())); // view_interface::empty()\n+  const auto cs = s;\n+  static_assert(noexcept(cs.begin()));\n+  static_assert(noexcept(cs.end()));\n+  static_assert(noexcept(cs.size()));\n+  static_assert(noexcept(cs.data()));\n+  static_assert(noexcept(cs.empty())); // view_interface::empty()\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n }"}]}