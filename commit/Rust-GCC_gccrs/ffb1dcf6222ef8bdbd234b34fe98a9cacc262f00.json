{"sha": "ffb1dcf6222ef8bdbd234b34fe98a9cacc262f00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZiMWRjZjYyMjJlZjhiZGJkMjM0YjM0ZmU5OGE5Y2FjYzI2MmYwMA==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-13T20:46:17Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-13T20:46:17Z"}, "message": "VAX: Handle constant 0 with QMATH DImode add/sub\n\nHandle constant 0 passed to the QMATH DImode add/sub handler such as\nwith:\n\n#2  0x0000000011d409b0 in gen_adddi3 (operand0=0x7ffff5c0a128,\n    operand1=0x7ffff5c60480, operand2=0x7ffff5c60470)\n    at .../gcc/config/vax/vax.md:755\n755\t  \"vax_expand_addsub_di_operands (operands, PLUS); DONE;\")\n(gdb) pr operand0\n(reg:DI 31)\n(gdb) pr operand1\n(const_int 0 [0])\n(gdb) pr operand2\n(const_int -1 [0xffffffffffffffff])\n(gdb)\n\ncausing an assertion in `vax_expand_addsub_di_operands':\n\n      gcc_assert (operands[1] != const0_rtx || code == MINUS);\n\nto trigger:\n\nduring RTL pass: expand\n.../gcc/testsuite/gcc.c-torture/compile/sync-1.c: In function 'test_op_ignore':\n.../gcc/testsuite/gcc.c-torture/compile/sync-1.c:33:10: internal compiler error: in vax_expand_addsub_di_operands, at config/vax/vax.c:2080\n0x11815003 vax_expand_addsub_di_operands(rtx_def**, rtx_code)\n\t.../gcc/config/vax/vax.c:2080\n0x11d409af gen_adddi3(rtx_def*, rtx_def*, rtx_def*)\n\t.../gcc/config/vax/vax.md:755\n0x10ea2763 rtx_insn* insn_gen_fn::operator()<rtx_def*, rtx_def*, rtx_def*>(rtx_def*, rtx_def*, rtx_def*) const\n\t.../gcc/recog.h:304\n0x10f7fc8f maybe_gen_insn(insn_code, unsigned int, expand_operand*)\n\t.../gcc/optabs.c:7402\n0x10f67f8b expand_binop_directly\n\t.../gcc/optabs.c:1122\n0x10f684cf expand_binop(machine_mode, optab_tag, rtx_def*, rtx_def*, rtx_def*, int, optab_methods)\n\t.../gcc/optabs.c:1209\n0x10f6fb4f expand_unop(machine_mode, optab_tag, rtx_def*, rtx_def*, int)\n\t.../gcc/optabs.c:3013\n0x10f6c493 expand_simple_unop(machine_mode, rtx_code, rtx_def*, rtx_def*, int)\n\t.../gcc/optabs.c:2200\n0x10f7e2f3 expand_atomic_fetch_op(rtx_def*, rtx_def*, rtx_def*, rtx_code, memmodel, bool)\n\t.../gcc/optabs.c:7021\n0x107f7523 expand_builtin_sync_operation\n\t.../gcc/builtins.c:7605\n0x107ff547 expand_builtin(tree_node*, rtx_def*, rtx_def*, machine_mode, int)\n\t.../gcc/builtins.c:9430\n0x10acda63 expand_expr_real_1(tree_node*, rtx_def*, machine_mode, expand_modifier, rtx_def**, bool)\n\t.../gcc/expr.c:11249\n0x10abeb9f expand_expr_real(tree_node*, rtx_def*, machine_mode, expand_modifier, rtx_def**, bool)\n\t.../gcc/expr.c:8486\n0x1085606b expand_expr\n\t.../gcc/expr.h:282\n0x1086157f expand_call_stmt\n\t.../gcc/cfgexpand.c:2709\n0x10865ab7 expand_gimple_stmt_1\n\t.../gcc/cfgexpand.c:3713\n0x108662fb expand_gimple_stmt\n\t.../gcc/cfgexpand.c:3877\n0x10870387 expand_gimple_basic_block\n\t.../gcc/cfgexpand.c:5918\n0x10872b6b execute\n\t.../gcc/cfgexpand.c:6602\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee <https://gcc.gnu.org/bugs/> for instructions.\ncompiler exited with status 1\nFAIL: gcc.c-torture/compile/sync-1.c   -O0  (internal compiler error)\n\ncausing numerous failures in regression testing.\n\nWhile requesting an addition operation to be produced for the constant\noperands of 0 and -1 may seem silly, technically there is nothing wrong\nwith it, and non-QMATH code (as with the `-mno-qmath' option) has no\nissues with that, so neither should QMATH code.  This operation will\nnormally be folded in later passes anyway.\n\nObserve then, that adding or subtracting constant 0 amounts to a move\n(and we even have a machine instruction available to do that with a\nsingle operation) so handle the case explicitly, swapping the addends if\nso required, removing the assertion failure and along with that 70 test\nsuite failures like:\n\nFAIL: gcc.c-torture/compile/sync-1.c   -O0  (internal compiler error)\nFAIL: gcc.c-torture/compile/sync-1.c   -O0  fetch_and_nand (test for warnings, line )\nFAIL: gcc.c-torture/compile/sync-1.c   -O0  nand_and_fetch (test for warnings, line )\nFAIL: gcc.c-torture/compile/sync-1.c   -O0  (test for excess errors)\nFAIL: gcc.c-torture/compile/sync-2.c   -O0  (internal compiler error)\nFAIL: gcc.c-torture/compile/sync-2.c   -O0   (test for warnings, line )\nFAIL: gcc.c-torture/compile/sync-2.c   -O0  (test for excess errors)\nFAIL: gcc.c-torture/compile/sync-3.c   -O0  (internal compiler error)\nFAIL: gcc.c-torture/compile/sync-3.c   -O0   (test for warnings, line )\nFAIL: gcc.c-torture/compile/sync-3.c   -O0  (test for excess errors)\n\nand similarly across all the other optimization levels and compilation\noptions covered.\n\n\tgcc/\n\t* config/vax/vax.c (vax_expand_addsub_di_operands): Handle the\n\taddition or subtraction of 0.", "tree": {"sha": "f54cac2142cd88096ef4f5ca67a723c40c00fed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f54cac2142cd88096ef4f5ca67a723c40c00fed0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffb1dcf6222ef8bdbd234b34fe98a9cacc262f00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb1dcf6222ef8bdbd234b34fe98a9cacc262f00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb1dcf6222ef8bdbd234b34fe98a9cacc262f00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb1dcf6222ef8bdbd234b34fe98a9cacc262f00/comments", "author": null, "committer": null, "parents": [{"sha": "3530ca075b083bca889ab9cdcc28d731df3a9088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3530ca075b083bca889ab9cdcc28d731df3a9088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3530ca075b083bca889ab9cdcc28d731df3a9088"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "2274cce6a5b9ebf49cf125be213bd628bc174550", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb1dcf6222ef8bdbd234b34fe98a9cacc262f00/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb1dcf6222ef8bdbd234b34fe98a9cacc262f00/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=ffb1dcf6222ef8bdbd234b34fe98a9cacc262f00", "patch": "@@ -2066,6 +2066,19 @@ vax_expand_addsub_di_operands (rtx * operands, enum rtx_code code)\n       else\n \toperands[2] = fixup_mathdi_operand (operands[2], DImode);\n \n+      /* If we are adding or subtracting 0, then this is a move.  */\n+      if (code == PLUS && operands[1] == const0_rtx)\n+\t{\n+\t  temp = operands[2];\n+\t  operands[2] = operands[1];\n+\t  operands[1] = temp;\n+\t}\n+      if (operands[2] == const0_rtx)\n+\t{\n+\t  emit_move_insn (operands[0], operands[1]);\n+\t  return;\n+\t}\n+\n       /* If we are subtracting not from ourselves [d = a - b], and because the\n \t carry ops are two operand only, we would need to do a move prior to\n \t the subtract.  And if d == b, we would need a temp otherwise"}]}