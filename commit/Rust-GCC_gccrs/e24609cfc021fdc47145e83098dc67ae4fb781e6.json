{"sha": "e24609cfc021fdc47145e83098dc67ae4fb781e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0NjA5Y2ZjMDIxZmRjNDcxNDVlODMwOThkYzY3YWU0ZmI3ODFlNg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-04-11T18:44:32Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-04-11T18:44:32Z"}, "message": "gnu-user.h: Copy from linux.h.\n\n\t* config/i386/gnu-user.h: Copy from linux.h.  Update comments.\n\t(LINK_EMULATION, GLIBC_DYNAMIC_LINKER): Remove.\n\t(SUBTARGET_EXTRA_SPECS): Use GNU_USER_LINK_EMULATION and\n\tGNU_USER_DYNAMIC_LINKER.\n\t(MD_UNWIND_SUPPORT, REG_NAME): Remove.\n\t* config/i386/gnu-user64.h: Copy from linux64.h.  Update comments.\n\t(GLIBC_DYNAMIC_LINKER32, GLIBC_DYNAMIC_LINKER64): Remove.\n\t(LINK_SPEC): Use GNU_USER_DYNAMIC_LINKER32 and\n\tGNU_USER_DYNAMIC_LINKER64.\n\t(MD_UNWIND_SUPPORT, REG_NAME): Remove.\n\t* config/i386/kfreebsd-gnu.h (LINK_EMULATION): Change to\n\tGNU_USER_LINK_EMULATION.\n\t* config/i386/linux.h (TARGET_ASM_FILE_START_FILE_DIRECTIVE,\n\tDEFAULT_PCC_STRUCT_RETURN, TARGET_TLS_DIRECT_SEG_REFS_DEFAULT,\n\tASM_COMMENT_START, DBX_REGISTER_NUMBER, NO_PROFILE_COUNTERS,\n\tMCOUNT_NAME, SUBTARGET_FRAME_POINTER_REQUIRED, SIZE_TYPE,\n\tPTRDIFF_TYPE, WCHAR_TYPE, WCHAR_TYPE_SIZE, TARGET_OS_CPP_BUILTINS,\n\tCPP_SPEC, CC1_SPEC): Remove.\n\t(LINK_EMULATION): Change to GNU_USER_LINK_EMULATION.\n\t(GNU_USER_DYNAMIC_LINKER): Define.\n\t(ASM_SPEC, SUBTARGET_EXTRA_SPECS, LINK_SPEC, ENDFILE_SPEC,\n\tASM_OUTPUT_ALIGNED_BSS, ASM_OUTPUT_MAX_SKIP_ALIGN,\n\tASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX, CRT_GET_RFIB_DATA,\n\tLIBGCC2_HAS_TF_MODE, LIBGCC2_TF_CEXT, TF_SIZE,\n\tTARGET_ASM_FILE_END, STACK_CHECK_MOVING_SP,\n\tSTACK_CHECK_STATIC_BUILTIN, TARGET_THREAD_SSP_OFFSET,\n\tTARGET_CAN_SPLIT_STACK, TARGET_THREAD_SPLIT_STACK_OFFSET): Remove.\n\t* config/i386/linux64.h (TARGET_OS_CPP_BUILTINS, CPP_SPEC,\n\tCC1_SPEC, DEFAULT_PCC_STRUCT_RETURN,\n\tTARGET_TLS_DIRECT_SEG_REFS_DEFAULT, SPEC_32, SPEC_64, ASM_SPEC,\n\tLINK_SPEC, ENDFILE_SPEC, MULTILIB_DEFAULTS, LIBGCC2_HAS_TF_MODE,\n\tLIBGCC2_TF_CEXT, TF_SIZE, TARGET_ASM_FILE_END): Remove.\n\t(GNU_USER_DYNAMIC_LINKER32, GNU_USER_DYNAMIC_LINKER64): Define.\n\t(STACK_CHECK_MOVING_SP, STACK_CHECK_STATIC_BUILTIN,\n\tTARGET_THREAD_SSP_OFFSET, TARGET_CAN_SPLIT_STACK,\n\tTARGET_THREAD_SPLIT_STACK_OFFSET): Remove.\n\t* config/i386/gnu.h (GLIBC_DYNAMIC_LINKER): Change to\n\tGNU_USER_DYNAMIC_LINKER.\n\t* config/kfreebsd-gnu.h (GLIBC_DYNAMIC_LINKER): Change to\n\tGNU_USER_DYNAMIC_LINKER.  Unconditionally undefine and redefine.\n\t* config/knetbsd-gnu.h (GLIBC_DYNAMIC_LINKER): Change to\n\tGNU_USER_DYNAMIC_LINKER.  Unconditionally undefine and redefine.\n\t* config/kopensolaris-gnu.h (GLIBC_DYNAMIC_LINKER): Change to\n\tGNU_USER_DYNAMIC_LINKER.  Unconditionally undefine and redefine.\n\t* config.gcc (i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu |\n\ti[34567]86-*-knetbsd*-gnu | i[34567]86-*-gnu* |\n\ti[34567]86-*-kopensolaris*-gnu, x86_64-*-linux* |\n\tx86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu): Use the new\n\theaders.\n\nFrom-SVN: r172271", "tree": {"sha": "c79d55b37b290fa4a231517b0f9e246a26957742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c79d55b37b290fa4a231517b0f9e246a26957742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e24609cfc021fdc47145e83098dc67ae4fb781e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24609cfc021fdc47145e83098dc67ae4fb781e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24609cfc021fdc47145e83098dc67ae4fb781e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24609cfc021fdc47145e83098dc67ae4fb781e6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fb3e11aa5b6c3096a8b3e7d098927b2875ca9b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fb3e11aa5b6c3096a8b3e7d098927b2875ca9b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fb3e11aa5b6c3096a8b3e7d098927b2875ca9b5"}], "stats": {"total": 704, "additions": 399, "deletions": 305}, "files": [{"sha": "70dfcf8ba7ceef8bee20d3bfb2f00403138be55b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e24609cfc021fdc47145e83098dc67ae4fb781e6", "patch": "@@ -1,3 +1,55 @@\n+2011-04-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/i386/gnu-user.h: Copy from linux.h.  Update comments.\n+\t(LINK_EMULATION, GLIBC_DYNAMIC_LINKER): Remove.\n+\t(SUBTARGET_EXTRA_SPECS): Use GNU_USER_LINK_EMULATION and\n+\tGNU_USER_DYNAMIC_LINKER.\n+\t(MD_UNWIND_SUPPORT, REG_NAME): Remove.\n+\t* config/i386/gnu-user64.h: Copy from linux64.h.  Update comments.\n+\t(GLIBC_DYNAMIC_LINKER32, GLIBC_DYNAMIC_LINKER64): Remove.\n+\t(LINK_SPEC): Use GNU_USER_DYNAMIC_LINKER32 and\n+\tGNU_USER_DYNAMIC_LINKER64.\n+\t(MD_UNWIND_SUPPORT, REG_NAME): Remove.\n+\t* config/i386/kfreebsd-gnu.h (LINK_EMULATION): Change to\n+\tGNU_USER_LINK_EMULATION.\n+\t* config/i386/linux.h (TARGET_ASM_FILE_START_FILE_DIRECTIVE,\n+\tDEFAULT_PCC_STRUCT_RETURN, TARGET_TLS_DIRECT_SEG_REFS_DEFAULT,\n+\tASM_COMMENT_START, DBX_REGISTER_NUMBER, NO_PROFILE_COUNTERS,\n+\tMCOUNT_NAME, SUBTARGET_FRAME_POINTER_REQUIRED, SIZE_TYPE,\n+\tPTRDIFF_TYPE, WCHAR_TYPE, WCHAR_TYPE_SIZE, TARGET_OS_CPP_BUILTINS,\n+\tCPP_SPEC, CC1_SPEC): Remove.\n+\t(LINK_EMULATION): Change to GNU_USER_LINK_EMULATION.\n+\t(GNU_USER_DYNAMIC_LINKER): Define.\n+\t(ASM_SPEC, SUBTARGET_EXTRA_SPECS, LINK_SPEC, ENDFILE_SPEC,\n+\tASM_OUTPUT_ALIGNED_BSS, ASM_OUTPUT_MAX_SKIP_ALIGN,\n+\tASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX, CRT_GET_RFIB_DATA,\n+\tLIBGCC2_HAS_TF_MODE, LIBGCC2_TF_CEXT, TF_SIZE,\n+\tTARGET_ASM_FILE_END, STACK_CHECK_MOVING_SP,\n+\tSTACK_CHECK_STATIC_BUILTIN, TARGET_THREAD_SSP_OFFSET,\n+\tTARGET_CAN_SPLIT_STACK, TARGET_THREAD_SPLIT_STACK_OFFSET): Remove.\n+\t* config/i386/linux64.h (TARGET_OS_CPP_BUILTINS, CPP_SPEC,\n+\tCC1_SPEC, DEFAULT_PCC_STRUCT_RETURN,\n+\tTARGET_TLS_DIRECT_SEG_REFS_DEFAULT, SPEC_32, SPEC_64, ASM_SPEC,\n+\tLINK_SPEC, ENDFILE_SPEC, MULTILIB_DEFAULTS, LIBGCC2_HAS_TF_MODE,\n+\tLIBGCC2_TF_CEXT, TF_SIZE, TARGET_ASM_FILE_END): Remove.\n+\t(GNU_USER_DYNAMIC_LINKER32, GNU_USER_DYNAMIC_LINKER64): Define.\n+\t(STACK_CHECK_MOVING_SP, STACK_CHECK_STATIC_BUILTIN,\n+\tTARGET_THREAD_SSP_OFFSET, TARGET_CAN_SPLIT_STACK,\n+\tTARGET_THREAD_SPLIT_STACK_OFFSET): Remove.\n+\t* config/i386/gnu.h (GLIBC_DYNAMIC_LINKER): Change to\n+\tGNU_USER_DYNAMIC_LINKER.\n+\t* config/kfreebsd-gnu.h (GLIBC_DYNAMIC_LINKER): Change to\n+\tGNU_USER_DYNAMIC_LINKER.  Unconditionally undefine and redefine.\n+\t* config/knetbsd-gnu.h (GLIBC_DYNAMIC_LINKER): Change to\n+\tGNU_USER_DYNAMIC_LINKER.  Unconditionally undefine and redefine.\n+\t* config/kopensolaris-gnu.h (GLIBC_DYNAMIC_LINKER): Change to\n+\tGNU_USER_DYNAMIC_LINKER.  Unconditionally undefine and redefine.\n+\t* config.gcc (i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu |\n+\ti[34567]86-*-knetbsd*-gnu | i[34567]86-*-gnu* |\n+\ti[34567]86-*-kopensolaris*-gnu, x86_64-*-linux* |\n+\tx86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu): Use the new\n+\theaders.\n+\n 2011-04-11  Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/9601"}, {"sha": "a95d46ee22da12c7760bb669d88906e2fbbb318f", "filename": "gcc/config.gcc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e24609cfc021fdc47145e83098dc67ae4fb781e6", "patch": "@@ -1207,7 +1207,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t# Assume modern glibc\n \t\tdefault_gnu_indirect_function=yes\n \t\tif test x$enable_targets = xall; then\n-\t\t\ttm_file=\"${tm_file} i386/x86-64.h i386/linux64.h\"\n+\t\t\ttm_file=\"${tm_file} i386/x86-64.h i386/gnu-user64.h i386/linux64.h\"\n \t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n \t\t\ttmake_file=\"${tmake_file} i386/t-linux64\"\n \t\t\tneed_64bit_hwint=yes\n@@ -1227,19 +1227,19 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\t\t;;\n \t\t\tesac\n \t\telse\n-\t\t\ttm_file=\"${tm_file} i386/linux.h\"\n+\t\t\ttm_file=\"${tm_file} i386/gnu-user.h i386/linux.h\"\n \t\tfi\n \t\t;;\n-\ti[34567]86-*-knetbsd*-gnu) tm_file=\"${tm_file} i386/linux.h knetbsd-gnu.h i386/knetbsd-gnu.h\" ;;\n-\ti[34567]86-*-kfreebsd*-gnu) tm_file=\"${tm_file} i386/linux.h kfreebsd-gnu.h i386/kfreebsd-gnu.h\" ;;\n-\ti[34567]86-*-kopensolaris*-gnu) tm_file=\"${tm_file} i386/linux.h kopensolaris-gnu.h i386/kopensolaris-gnu.h\" ;;\n-\ti[34567]86-*-gnu*) tm_file=\"$tm_file i386/linux.h gnu.h i386/gnu.h\";;\n+\ti[34567]86-*-knetbsd*-gnu) tm_file=\"${tm_file} i386/gnu-user.h i386/linux.h knetbsd-gnu.h i386/knetbsd-gnu.h\" ;;\n+\ti[34567]86-*-kfreebsd*-gnu) tm_file=\"${tm_file} i386/gnu-user.h i386/linux.h kfreebsd-gnu.h i386/kfreebsd-gnu.h\" ;;\n+\ti[34567]86-*-kopensolaris*-gnu) tm_file=\"${tm_file} i386/gnu-user.h i386/linux.h kopensolaris-gnu.h i386/kopensolaris-gnu.h\" ;;\n+\ti[34567]86-*-gnu*) tm_file=\"$tm_file i386/gnu-user.h i386/linux.h gnu.h i386/gnu.h\";;\n \tesac\n \ttmake_file=\"${tmake_file} i386/t-crtstuff i386/t-crtpc i386/t-crtfm t-dfprules\"\n \t;;\n x86_64-*-linux* | x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h \\\n-\t\t i386/x86-64.h i386/linux64.h\"\n+\t\t i386/x86-64.h i386/gnu-user64.h i386/linux64.h\"\n \tcase ${target} in\n \tx86_64-*-linux*)\n \t  default_gnu_indirect_function=glibc-2011 ;;"}, {"sha": "76a18acfe78abe5d70d5d8250facddc0acfaf95e", "filename": "gcc/config/i386/gnu-user.h", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fi386%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fi386%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user.h?ref=e24609cfc021fdc47145e83098dc67ae4fb781e6", "patch": "@@ -0,0 +1,204 @@\n+/* Definitions for Intel 386 systems using GNU userspace.\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002, 2004, 2005,\n+   2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+   Contributed by Eric Youngdale.\n+   Modified for stabs-in-ELF by H.J. Lu.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Output at beginning of assembler file.  */\n+/* The .file command should always begin the output.  */\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n+\n+/* The svr4 ABI for the i386 says that records and unions are returned\n+   in memory.  */\n+#undef DEFAULT_PCC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 1\n+\n+/* We arrange for the whole %gs segment to map the tls area.  */\n+#undef TARGET_TLS_DIRECT_SEG_REFS_DEFAULT\n+#define TARGET_TLS_DIRECT_SEG_REFS_DEFAULT MASK_TLS_DIRECT_SEG_REFS\n+\n+#undef ASM_COMMENT_START\n+#define ASM_COMMENT_START \"#\"\n+\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(n) \\\n+  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n+\n+/* Output assembler code to FILE to call the profiler.\n+   To the best of my knowledge, no GNU userspace libc has required the label\n+   argument to mcount.  */\n+\n+#define NO_PROFILE_COUNTERS\t1\n+\n+#undef MCOUNT_NAME\n+#define MCOUNT_NAME \"mcount\"\n+\n+/* The GLIBC version of mcount for the x86 assumes that there is a\n+   frame, so we cannot allow profiling without a frame pointer.  */\n+\n+#undef SUBTARGET_FRAME_POINTER_REQUIRED\n+#define SUBTARGET_FRAME_POINTER_REQUIRED crtl->profile\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+ \n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+  \n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+   \n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+    \n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tLINUX_TARGET_OS_CPP_BUILTINS();\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n+\n+#undef CC1_SPEC\n+#define CC1_SPEC \"%(cc1_cpu) %{profile:-p}\"\n+\n+/* Provide a LINK_SPEC appropriate for GNU userspace.  Here we provide support\n+   for the special GCC options -static and -shared, which allow us to\n+   link things in one of these three modes by applying the appropriate\n+   combinations of options at link-time.\n+\n+   When the -shared link option is used a final link is not being\n+   done.  */\n+\n+#undef  ASM_SPEC\n+#define ASM_SPEC \\\n+  \"--32 %{!mno-sse2avx:%{mavx:-msse2avx}} %{msse2avx:%{!mavx:-msse2avx}}\"\n+\n+#undef  SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS \\\n+  { \"link_emulation\", GNU_USER_LINK_EMULATION },\\\n+  { \"dynamic_linker\", GNU_USER_DYNAMIC_LINKER }\n+\n+#undef\tLINK_SPEC\n+#define LINK_SPEC \"-m %(link_emulation) %{shared:-shared} \\\n+  %{!shared: \\\n+    %{!static: \\\n+      %{rdynamic:-export-dynamic} \\\n+      -dynamic-linker %(dynamic_linker)} \\\n+      %{static:-static}}\"\n+\n+/* Similar to standard GNU userspace, but adding -ffast-math support.  */\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n+   %{mpc32:crtprec32.o%s} \\\n+   %{mpc64:crtprec64.o%s} \\\n+   %{mpc80:crtprec80.o%s} \\\n+   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n+\n+/* A C statement (sans semicolon) to output to the stdio stream\n+   FILE the assembler definition of uninitialized global DECL named\n+   NAME whose size is SIZE bytes and alignment is ALIGN bytes.\n+   Try to use asm_output_aligned_bss to implement this macro.  */\n+\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n+  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n+\n+/* A C statement to output to the stdio stream FILE an assembler\n+   command to advance the location counter to a multiple of 1<<LOG\n+   bytes if it is within MAX_SKIP bytes.\n+\n+   This is used to align code labels according to Intel recommendations.  */\n+\n+#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if ((LOG) != 0) {\t\t\t\t\t\t\t\\\n+      if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG));\t\\\n+      else {\t\t\t\t\t\t\t\t\\\n+\tfprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP));\t\\\n+\t/* Make sure that we have at least 8 byte alignment if > 8 byte \\\n+\t   alignment is preferred.  */\t\t\t\t\t\\\n+\tif ((LOG) > 3\t\t\t\t\t\t\t\\\n+\t    && (1 << (LOG)) > ((MAX_SKIP) + 1)\t\t\t\t\\\n+\t    && (MAX_SKIP) >= 7)\t\t\t\t\t\t\\\n+\t  fputs (\"\\t.p2align 3\\n\", (FILE));\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+#endif\n+\n+/* Handle special EH pointer encodings.  Absolute, pc-relative, and\n+   indirect are handled automatically.  */\n+#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if ((SIZE) == 4 && ((ENCODING) & 0x70) == DW_EH_PE_datarel)\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        fputs (ASM_LONG, FILE);\t\t\t\\\n+        assemble_name (FILE, XSTR (ADDR, 0));\t\t\t\t\\\n+\tfputs (((ENCODING) & DW_EH_PE_indirect ? \"@GOT\" : \"@GOTOFF\"), FILE); \\\n+        goto DONE;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Used by crtstuff.c to initialize the base of data-relative relocations.\n+   These are GOT relative on x86, so return the pic register.  */\n+#ifdef __PIC__\n+#define CRT_GET_RFIB_DATA(BASE)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    register void *ebx_ __asm__(\"ebx\");\t\t\\\n+    BASE = ebx_;\t\t\t\t\\\n+  }\n+#else\n+#define CRT_GET_RFIB_DATA(BASE)\t\t\t\t\t\t\\\n+  __asm__ (\"call\\t.LPR%=\\n\"\t\t\t\t\t\t\\\n+\t   \".LPR%=:\\n\\t\"\t\t\t\t\t\t\\\n+\t   \"pop{l}\\t%0\\n\\t\"\t\t\t\t\t\t\\\n+\t   /* Due to a GAS bug, this cannot use EAX.  That encodes\t\\\n+\t      smaller than the traditional EBX, which results in the\t\\\n+\t      offset being off by one.  */\t\t\t\t\\\n+\t   \"add{l}\\t{$_GLOBAL_OFFSET_TABLE_+[.-.LPR%=],%0\"\t\t\\\n+\t\t   \"|%0,_GLOBAL_OFFSET_TABLE_+(.-.LPR%=)}\"\t\t\\\n+\t   : \"=d\"(BASE))\n+#endif\n+\n+/* Put all *tf routines in libgcc.  */\n+#undef LIBGCC2_HAS_TF_MODE\n+#define LIBGCC2_HAS_TF_MODE 1\n+#define LIBGCC2_TF_CEXT q\n+#define TF_SIZE 113\n+\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n+\n+/* The stack pointer needs to be moved while checking the stack.  */\n+#define STACK_CHECK_MOVING_SP 1\n+\n+/* Static stack checking is supported by means of probes.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1\n+\n+#ifdef TARGET_LIBC_PROVIDES_SSP\n+/* i386 glibc provides __stack_chk_guard in %gs:0x14.  */\n+#define TARGET_THREAD_SSP_OFFSET\t0x14\n+\n+/* We steal the last transactional memory word.  */\n+#define TARGET_CAN_SPLIT_STACK\n+#define TARGET_THREAD_SPLIT_STACK_OFFSET 0x30\n+#endif"}, {"sha": "61481823faaa07ee95d910871df7e3d2b26b2c30", "filename": "gcc/config/i386/gnu-user64.h", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fi386%2Fgnu-user64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fi386%2Fgnu-user64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user64.h?ref=e24609cfc021fdc47145e83098dc67ae4fb781e6", "patch": "@@ -0,0 +1,118 @@\n+/* Definitions for AMD x86-64 using GNU userspace.\n+   Copyright (C) 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+   Contributed by Jan Hubicka <jh@suse.cz>, based on linux.h.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+\tLINUX_TARGET_OS_CPP_BUILTINS();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n+\n+#undef CC1_SPEC\n+#define CC1_SPEC \"%(cc1_cpu) %{profile:-p}\"\n+\n+/* The svr4 ABI for the i386 says that records and unions are returned\n+   in memory.  In the 64bit compilation we will turn this flag off in\n+   ix86_option_override_internal, as we never do pcc_struct_return\n+   scheme on this target.  */\n+#undef DEFAULT_PCC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 1\n+\n+/* We arrange for the whole %fs segment to map the tls area.  */\n+#undef TARGET_TLS_DIRECT_SEG_REFS_DEFAULT\n+#define TARGET_TLS_DIRECT_SEG_REFS_DEFAULT MASK_TLS_DIRECT_SEG_REFS\n+\n+/* Provide a LINK_SPEC.  Here we provide support for the special GCC\n+   options -static and -shared, which allow us to link things in one\n+   of these three modes by applying the appropriate combinations of\n+   options at link-time.\n+\n+   When the -shared link option is used a final link is not being\n+   done.  */\n+\n+#if TARGET_64BIT_DEFAULT\n+#define SPEC_32 \"m32\"\n+#define SPEC_64 \"!m32\"\n+#else\n+#define SPEC_32 \"!m64\"\n+#define SPEC_64 \"m64\"\n+#endif\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"%{\" SPEC_32 \":--32} %{\" SPEC_64 \":--64} \\\n+ %{!mno-sse2avx:%{mavx:-msse2avx}} %{msse2avx:%{!mavx:-msse2avx}}\"\n+\n+#undef\tLINK_SPEC\n+#define LINK_SPEC \"%{\" SPEC_64 \":-m elf_x86_64} %{\" SPEC_32 \":-m elf_i386} \\\n+  %{shared:-shared} \\\n+  %{!shared: \\\n+    %{!static: \\\n+      %{rdynamic:-export-dynamic} \\\n+      %{\" SPEC_32 \":-dynamic-linker \" GNU_USER_DYNAMIC_LINKER32 \"} \\\n+      %{\" SPEC_64 \":-dynamic-linker \" GNU_USER_DYNAMIC_LINKER64 \"}} \\\n+    %{static:-static}}\"\n+\n+/* Similar to standard GNU userspace, but adding -ffast-math support.  */\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n+   %{mpc32:crtprec32.o%s} \\\n+   %{mpc64:crtprec64.o%s} \\\n+   %{mpc80:crtprec80.o%s} \\\n+   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n+\n+#if TARGET_64BIT_DEFAULT\n+#define MULTILIB_DEFAULTS { \"m64\" }\n+#else\n+#define MULTILIB_DEFAULTS { \"m32\" }\n+#endif\n+\n+/* Put all *tf routines in libgcc.  */\n+#undef LIBGCC2_HAS_TF_MODE\n+#define LIBGCC2_HAS_TF_MODE 1\n+#define LIBGCC2_TF_CEXT q\n+#define TF_SIZE 113\n+\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n+\n+/* The stack pointer needs to be moved while checking the stack.  */\n+#define STACK_CHECK_MOVING_SP 1\n+\n+/* Static stack checking is supported by means of probes.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1\n+\n+#ifdef TARGET_LIBC_PROVIDES_SSP\n+/* i386 glibc provides __stack_chk_guard in %gs:0x14,\n+   x86_64 glibc provides it in %fs:0x28.  */\n+#define TARGET_THREAD_SSP_OFFSET\t(TARGET_64BIT ? 0x28 : 0x14)\n+\n+/* We steal the last transactional memory word.  */\n+#define TARGET_CAN_SPLIT_STACK\n+#define TARGET_THREAD_SPLIT_STACK_OFFSET (TARGET_64BIT ? 0x70 : 0x30)\n+#endif"}, {"sha": "a86eff473e3a4151eeaccb8a58a5b1fd74882de6", "filename": "gcc/config/i386/gnu.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fi386%2Fgnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fi386%2Fgnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu.h?ref=e24609cfc021fdc47145e83098dc67ae4fb781e6", "patch": "@@ -20,8 +20,8 @@ You should have received a copy of the GNU General Public License\n along with GCC.  If not, see <http://www.gnu.org/licenses/>.\n */\n \n-#undef GLIBC_DYNAMIC_LINKER\n-#define GLIBC_DYNAMIC_LINKER \"/lib/ld.so\"\n+#undef GNU_USER_DYNAMIC_LINKER\n+#define GNU_USER_DYNAMIC_LINKER \"/lib/ld.so\"\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%{pthread:-D_REENTRANT} %{posix:-D_POSIX_SOURCE}\""}, {"sha": "8c4be69a98cea25696856352735490b8e8390776", "filename": "gcc/config/i386/kfreebsd-gnu.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fi386%2Fkfreebsd-gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fi386%2Fkfreebsd-gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fkfreebsd-gnu.h?ref=e24609cfc021fdc47145e83098dc67ae4fb781e6", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for Intel 386 running kFreeBSD-based GNU systems with ELF format\n-   Copyright (C) 2004, 2007\n+   Copyright (C) 2004, 2007, 2011\n    Free Software Foundation, Inc.\n    Contributed by Robert Millan.\n \n@@ -19,7 +19,7 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#undef LINK_EMULATION\n-#define LINK_EMULATION \"elf_i386_fbsd\"\n+#undef GNU_USER_LINK_EMULATION\n+#define GNU_USER_LINK_EMULATION \"elf_i386_fbsd\"\n #undef REG_NAME\n #define REG_NAME(reg) sc_ ## reg"}, {"sha": "40a35ac835ee25cd8197cf86fe54da8da9b1cadd", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 2, "deletions": 185, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=e24609cfc021fdc47145e83098dc67ae4fb781e6", "patch": "@@ -20,194 +20,11 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* Output at beginning of assembler file.  */\n-/* The .file command should always begin the output.  */\n-#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n-\n-/* The svr4 ABI for the i386 says that records and unions are returned\n-   in memory.  */\n-#undef DEFAULT_PCC_STRUCT_RETURN\n-#define DEFAULT_PCC_STRUCT_RETURN 1\n-\n-/* We arrange for the whole %gs segment to map the tls area.  */\n-#undef TARGET_TLS_DIRECT_SEG_REFS_DEFAULT\n-#define TARGET_TLS_DIRECT_SEG_REFS_DEFAULT MASK_TLS_DIRECT_SEG_REFS\n-\n-#undef ASM_COMMENT_START\n-#define ASM_COMMENT_START \"#\"\n-\n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) \\\n-  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n-\n-/* Output assembler code to FILE to call the profiler.\n-   To the best of my knowledge, no Linux libc has required the label\n-   argument to mcount.  */\n-\n-#define NO_PROFILE_COUNTERS\t1\n-\n-#undef MCOUNT_NAME\n-#define MCOUNT_NAME \"mcount\"\n-\n-/* The GLIBC version of mcount for the x86 assumes that there is a\n-   frame, so we cannot allow profiling without a frame pointer.  */\n-\n-#undef SUBTARGET_FRAME_POINTER_REQUIRED\n-#define SUBTARGET_FRAME_POINTER_REQUIRED crtl->profile\n-\n-#undef SIZE_TYPE\n-#define SIZE_TYPE \"unsigned int\"\n- \n-#undef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"int\"\n-  \n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE \"long int\"\n-   \n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE BITS_PER_WORD\n-    \n-#define TARGET_OS_CPP_BUILTINS()\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-\tLINUX_TARGET_OS_CPP_BUILTINS();\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n-\n-#undef CC1_SPEC\n-#define CC1_SPEC \"%(cc1_cpu) %{profile:-p}\"\n-\n-/* Provide a LINK_SPEC appropriate for Linux.  Here we provide support\n-   for the special GCC options -static and -shared, which allow us to\n-   link things in one of these three modes by applying the appropriate\n-   combinations of options at link-time.\n-\n-   When the -shared link option is used a final link is not being\n-   done.  */\n-\n-/* These macros may be overridden in k*bsd-gnu.h and i386/k*bsd-gnu.h. */\n-#define LINK_EMULATION \"elf_i386\"\n+#define GNU_USER_LINK_EMULATION \"elf_i386\"\n #define GLIBC_DYNAMIC_LINKER \"/lib/ld-linux.so.2\"\n \n-#undef  ASM_SPEC\n-#define ASM_SPEC \\\n-  \"--32 %{!mno-sse2avx:%{mavx:-msse2avx}} %{msse2avx:%{!mavx:-msse2avx}}\"\n-\n-#undef  SUBTARGET_EXTRA_SPECS\n-#define SUBTARGET_EXTRA_SPECS \\\n-  { \"link_emulation\", LINK_EMULATION },\\\n-  { \"dynamic_linker\", LINUX_DYNAMIC_LINKER }\n-\n-#undef\tLINK_SPEC\n-#define LINK_SPEC \"-m %(link_emulation) %{shared:-shared} \\\n-  %{!shared: \\\n-    %{!static: \\\n-      %{rdynamic:-export-dynamic} \\\n-      -dynamic-linker %(dynamic_linker)} \\\n-      %{static:-static}}\"\n-\n-/* Similar to standard Linux, but adding -ffast-math support.  */\n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   %{mpc32:crtprec32.o%s} \\\n-   %{mpc64:crtprec64.o%s} \\\n-   %{mpc80:crtprec80.o%s} \\\n-   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n-\n-/* A C statement (sans semicolon) to output to the stdio stream\n-   FILE the assembler definition of uninitialized global DECL named\n-   NAME whose size is SIZE bytes and alignment is ALIGN bytes.\n-   Try to use asm_output_aligned_bss to implement this macro.  */\n-\n-#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n-  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n-\n-/* A C statement to output to the stdio stream FILE an assembler\n-   command to advance the location counter to a multiple of 1<<LOG\n-   bytes if it is within MAX_SKIP bytes.\n-\n-   This is used to align code labels according to Intel recommendations.  */\n-\n-#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n-#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if ((LOG) != 0) {\t\t\t\t\t\t\t\\\n-      if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG));\t\\\n-      else {\t\t\t\t\t\t\t\t\\\n-\tfprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP));\t\\\n-\t/* Make sure that we have at least 8 byte alignment if > 8 byte \\\n-\t   alignment is preferred.  */\t\t\t\t\t\\\n-\tif ((LOG) > 3\t\t\t\t\t\t\t\\\n-\t    && (1 << (LOG)) > ((MAX_SKIP) + 1)\t\t\t\t\\\n-\t    && (MAX_SKIP) >= 7)\t\t\t\t\t\t\\\n-\t  fputs (\"\\t.p2align 3\\n\", (FILE));\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-#endif\n-\n-/* Handle special EH pointer encodings.  Absolute, pc-relative, and\n-   indirect are handled automatically.  */\n-#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if ((SIZE) == 4 && ((ENCODING) & 0x70) == DW_EH_PE_datarel)\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        fputs (ASM_LONG, FILE);\t\t\t\\\n-        assemble_name (FILE, XSTR (ADDR, 0));\t\t\t\t\\\n-\tfputs (((ENCODING) & DW_EH_PE_indirect ? \"@GOT\" : \"@GOTOFF\"), FILE); \\\n-        goto DONE;\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* Used by crtstuff.c to initialize the base of data-relative relocations.\n-   These are GOT relative on x86, so return the pic register.  */\n-#ifdef __PIC__\n-#define CRT_GET_RFIB_DATA(BASE)\t\t\t\\\n-  {\t\t\t\t\t\t\\\n-    register void *ebx_ __asm__(\"ebx\");\t\t\\\n-    BASE = ebx_;\t\t\t\t\\\n-  }\n-#else\n-#define CRT_GET_RFIB_DATA(BASE)\t\t\t\t\t\t\\\n-  __asm__ (\"call\\t.LPR%=\\n\"\t\t\t\t\t\t\\\n-\t   \".LPR%=:\\n\\t\"\t\t\t\t\t\t\\\n-\t   \"pop{l}\\t%0\\n\\t\"\t\t\t\t\t\t\\\n-\t   /* Due to a GAS bug, this cannot use EAX.  That encodes\t\\\n-\t      smaller than the traditional EBX, which results in the\t\\\n-\t      offset being off by one.  */\t\t\t\t\\\n-\t   \"add{l}\\t{$_GLOBAL_OFFSET_TABLE_+[.-.LPR%=],%0\"\t\t\\\n-\t\t   \"|%0,_GLOBAL_OFFSET_TABLE_+(.-.LPR%=)}\"\t\t\\\n-\t   : \"=d\"(BASE))\n-#endif\n-\n-/* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n-#define LIBGCC2_TF_CEXT q\n-#define TF_SIZE 113\n-\n-#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n+#define GNU_USER_DYNAMIC_LINKER LINUX_DYNAMIC_LINKER\n \n #define MD_UNWIND_SUPPORT \"config/i386/linux-unwind.h\"\n \n-/* The stack pointer needs to be moved while checking the stack.  */\n-#define STACK_CHECK_MOVING_SP 1\n-\n-/* Static stack checking is supported by means of probes.  */\n-#define STACK_CHECK_STATIC_BUILTIN 1\n-\n-/* This macro may be overridden in i386/k*bsd-gnu.h.  */\n #define REG_NAME(reg) reg\n-\n-#ifdef TARGET_LIBC_PROVIDES_SSP\n-/* i386 glibc provides __stack_chk_guard in %gs:0x14.  */\n-#define TARGET_THREAD_SSP_OFFSET\t0x14\n-\n-/* We steal the last transactional memory word.  */\n-#define TARGET_CAN_SPLIT_STACK\n-#define TARGET_THREAD_SPLIT_STACK_OFFSET 0x30\n-#endif"}, {"sha": "467ddbe7f42cc93db89a49b472d6466f698c1f8c", "filename": "gcc/config/i386/linux64.h", "status": "modified", "additions": 2, "deletions": 93, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fi386%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fi386%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux64.h?ref=e24609cfc021fdc47145e83098dc67ae4fb781e6", "patch": "@@ -24,103 +24,12 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-\tLINUX_TARGET_OS_CPP_BUILTINS();\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n-\n-#undef CC1_SPEC\n-#define CC1_SPEC \"%(cc1_cpu) %{profile:-p}\"\n-\n-/* The svr4 ABI for the i386 says that records and unions are returned\n-   in memory.  In the 64bit compilation we will turn this flag off in\n-   ix86_option_override_internal, as we never do pcc_struct_return\n-   scheme on this target.  */\n-#undef DEFAULT_PCC_STRUCT_RETURN\n-#define DEFAULT_PCC_STRUCT_RETURN 1\n-\n-/* We arrange for the whole %fs segment to map the tls area.  */\n-#undef TARGET_TLS_DIRECT_SEG_REFS_DEFAULT\n-#define TARGET_TLS_DIRECT_SEG_REFS_DEFAULT MASK_TLS_DIRECT_SEG_REFS\n-\n-/* Provide a LINK_SPEC.  Here we provide support for the special GCC\n-   options -static and -shared, which allow us to link things in one\n-   of these three modes by applying the appropriate combinations of\n-   options at link-time.\n-\n-   When the -shared link option is used a final link is not being\n-   done.  */\n-\n #define GLIBC_DYNAMIC_LINKER32 \"/lib/ld-linux.so.2\"\n #define GLIBC_DYNAMIC_LINKER64 \"/lib64/ld-linux-x86-64.so.2\"\n \n-#if TARGET_64BIT_DEFAULT\n-#define SPEC_32 \"m32\"\n-#define SPEC_64 \"!m32\"\n-#else\n-#define SPEC_32 \"!m64\"\n-#define SPEC_64 \"m64\"\n-#endif\n-\n-#undef ASM_SPEC\n-#define ASM_SPEC \"%{\" SPEC_32 \":--32} %{\" SPEC_64 \":--64} \\\n- %{!mno-sse2avx:%{mavx:-msse2avx}} %{msse2avx:%{!mavx:-msse2avx}}\"\n-\n-#undef\tLINK_SPEC\n-#define LINK_SPEC \"%{\" SPEC_64 \":-m elf_x86_64} %{\" SPEC_32 \":-m elf_i386} \\\n-  %{shared:-shared} \\\n-  %{!shared: \\\n-    %{!static: \\\n-      %{rdynamic:-export-dynamic} \\\n-      %{\" SPEC_32 \":-dynamic-linker \" LINUX_DYNAMIC_LINKER32 \"} \\\n-      %{\" SPEC_64 \":-dynamic-linker \" LINUX_DYNAMIC_LINKER64 \"}} \\\n-    %{static:-static}}\"\n-\n-/* Similar to standard Linux, but adding -ffast-math support.  */\n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   %{mpc32:crtprec32.o%s} \\\n-   %{mpc64:crtprec64.o%s} \\\n-   %{mpc80:crtprec80.o%s} \\\n-   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n-\n-#if TARGET_64BIT_DEFAULT\n-#define MULTILIB_DEFAULTS { \"m64\" }\n-#else\n-#define MULTILIB_DEFAULTS { \"m32\" }\n-#endif\n-\n-/* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n-#define LIBGCC2_TF_CEXT q\n-#define TF_SIZE 113\n-\n-#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n+#define GNU_USER_DYNAMIC_LINKER32 LINUX_DYNAMIC_LINKER32\n+#define GNU_USER_DYNAMIC_LINKER64 LINUX_DYNAMIC_LINKER64\n \n #define MD_UNWIND_SUPPORT \"config/i386/linux-unwind.h\"\n \n-/* The stack pointer needs to be moved while checking the stack.  */\n-#define STACK_CHECK_MOVING_SP 1\n-\n-/* Static stack checking is supported by means of probes.  */\n-#define STACK_CHECK_STATIC_BUILTIN 1\n-\n-/* This macro may be overridden in i386/k*bsd-gnu.h.  */\n #define REG_NAME(reg) reg\n-\n-#ifdef TARGET_LIBC_PROVIDES_SSP\n-/* i386 glibc provides __stack_chk_guard in %gs:0x14,\n-   x86_64 glibc provides it in %fs:0x28.  */\n-#define TARGET_THREAD_SSP_OFFSET\t(TARGET_64BIT ? 0x28 : 0x14)\n-\n-/* We steal the last transactional memory word.  */\n-#define TARGET_CAN_SPLIT_STACK\n-#define TARGET_THREAD_SPLIT_STACK_OFFSET (TARGET_64BIT ? 0x70 : 0x30)\n-#endif"}, {"sha": "48da6a007937a78ec7570be98c47b6023754e854", "filename": "gcc/config/kfreebsd-gnu.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fkfreebsd-gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fkfreebsd-gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fkfreebsd-gnu.h?ref=e24609cfc021fdc47145e83098dc67ae4fb781e6", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for kFreeBSD-based GNU systems with ELF format\n-   Copyright (C) 2004, 2006, 2007\n+   Copyright (C) 2004, 2006, 2007, 2011\n    Free Software Foundation, Inc.\n    Contributed by Robert Millan.\n \n@@ -31,7 +31,5 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef GLIBC_DYNAMIC_LINKER\n-#undef GLIBC_DYNAMIC_LINKER\n-#define GLIBC_DYNAMIC_LINKER \"/lib/ld.so.1\"\n-#endif\n+#undef GNU_USER_DYNAMIC_LINKER\n+#define GNU_USER_DYNAMIC_LINKER \"/lib/ld.so.1\""}, {"sha": "dfb09e9bc15f937444d20620b6d69444df5997dc", "filename": "gcc/config/knetbsd-gnu.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fknetbsd-gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fknetbsd-gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fknetbsd-gnu.h?ref=e24609cfc021fdc47145e83098dc67ae4fb781e6", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for kNetBSD-based GNU systems with ELF format\n-   Copyright (C) 2004, 2006, 2007\n+   Copyright (C) 2004, 2006, 2007, 2011\n    Free Software Foundation, Inc.\n    Contributed by Robert Millan.\n \n@@ -32,7 +32,5 @@ along with GCC; see the file COPYING3.  If not see\n   while (0)\n \n \n-#ifdef GLIBC_DYNAMIC_LINKER\n-#undef GLIBC_DYNAMIC_LINKER\n-#define GLIBC_DYNAMIC_LINKER \"/lib/ld.so.1\"\n-#endif\n+#undef GNU_USER_DYNAMIC_LINKER\n+#define GNU_USER_DYNAMIC_LINKER \"/lib/ld.so.1\""}, {"sha": "99da2c16645d630d2564091534d1d638b502d8dd", "filename": "gcc/config/kopensolaris-gnu.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fkopensolaris-gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24609cfc021fdc47145e83098dc67ae4fb781e6/gcc%2Fconfig%2Fkopensolaris-gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fkopensolaris-gnu.h?ref=e24609cfc021fdc47145e83098dc67ae4fb781e6", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for kOpenSolaris-based GNU systems with ELF format\n-   Copyright (C) 2004, 2006, 2007, 2009\n+   Copyright (C) 2004, 2006, 2007, 2009, 2011\n    Free Software Foundation, Inc.\n    Contributed by Robert Millan.\n \n@@ -31,7 +31,5 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef GLIBC_DYNAMIC_LINKER\n-#undef GLIBC_DYNAMIC_LINKER\n-#define GLIBC_DYNAMIC_LINKER \"/lib/ld.so.1\"\n-#endif\n+#undef GNU_USER_DYNAMIC_LINKER\n+#define GNU_USER_DYNAMIC_LINKER \"/lib/ld.so.1\""}]}