{"sha": "3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2", "node_id": "C_kwDOANBUbNoAKDNlNzk1NjNhNjVlNzhkZGI2YjJlZjEwZGY3ZTFkNGUzNDQxYWFmZjI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-24T15:20:57Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-25T15:15:31Z"}, "message": "backend: Expose Bvariable class through rust-gcc header", "tree": {"sha": "2dba1bfeec3e64fd8ee3aa5e2ed4e47b5a798c6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dba1bfeec3e64fd8ee3aa5e2ed4e47b5a798c6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1416b85322cd9cd74c7a79e3270bb334ceb3a44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1416b85322cd9cd74c7a79e3270bb334ceb3a44c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1416b85322cd9cd74c7a79e3270bb334ceb3a44c"}], "stats": {"total": 88, "additions": 59, "deletions": 29}, "files": [{"sha": "9c1bb5314bcb0cabfecea23472f2ece3c5747ac5", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2", "patch": "@@ -50,38 +50,10 @@\n #include \"rust-linemap.h\"\n #include \"rust-backend.h\"\n #include \"rust-object-export.h\"\n+#include \"rust-gcc.h\"\n \n #include \"backend/rust-tree.h\"\n \n-// TODO: this will have to be significantly modified to work with Rust\n-\n-// Bvariable is a bit more complicated, because of zero-sized types.\n-// The GNU linker does not permit dynamic variables with zero size.\n-// When we see such a variable, we generate a version of the type with\n-// non-zero size.  However, when referring to the global variable, we\n-// want an expression of zero size; otherwise, if, say, the global\n-// variable is passed to a function, we will be passing a\n-// non-zero-sized value to a zero-sized value, which can lead to a\n-// miscompilation.\n-\n-class Bvariable\n-{\n-public:\n-  Bvariable (tree t) : t_ (t), orig_type_ (NULL) {}\n-\n-  Bvariable (tree t, tree orig_type) : t_ (t), orig_type_ (orig_type) {}\n-\n-  // Get the tree for use as an expression.\n-  tree get_tree (Location) const;\n-\n-  // Get the actual decl;\n-  tree get_decl () const { return this->t_; }\n-\n-private:\n-  tree t_;\n-  tree orig_type_;\n-};\n-\n // Get the tree of a variable for use as an expression.  If this is a\n // zero-sized global, create an expression that refers to the decl but\n // has zero size."}, {"sha": "085c16d0f3bb1a69be46c95e538a23c07547ccee", "filename": "gcc/rust/rust-gcc.h", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2/gcc%2Frust%2Frust-gcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2/gcc%2Frust%2Frust-gcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.h?ref=3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2", "patch": "@@ -0,0 +1,58 @@\n+// rust-gcc.cc -- Rust frontend to gcc IR.\n+// Copyright (C) 2011-2022 Free Software Foundation, Inc.\n+// Contributed by Ian Lance Taylor, Google.\n+// forked from gccgo\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-system.h\"\n+\n+// This has to be included outside of extern \"C\", so we have to\n+// include it here before tree.h includes it later.\n+#include <gmp.h>\n+\n+#include \"tree.h\"\n+#include \"rust-location.h\"\n+\n+// TODO: this will have to be significantly modified to work with Rust\n+\n+// Bvariable is a bit more complicated, because of zero-sized types.\n+// The GNU linker does not permit dynamic variables with zero size.\n+// When we see such a variable, we generate a version of the type with\n+// non-zero size.  However, when referring to the global variable, we\n+// want an expression of zero size; otherwise, if, say, the global\n+// variable is passed to a function, we will be passing a\n+// non-zero-sized value to a zero-sized value, which can lead to a\n+// miscompilation.\n+\n+class Bvariable\n+{\n+public:\n+  Bvariable (tree t) : t_ (t), orig_type_ (NULL) {}\n+\n+  Bvariable (tree t, tree orig_type) : t_ (t), orig_type_ (orig_type) {}\n+\n+  // Get the tree for use as an expression.\n+  tree get_tree (Location) const;\n+\n+  // Get the actual decl;\n+  tree get_decl () const { return this->t_; }\n+\n+private:\n+  tree t_;\n+  tree orig_type_;\n+};"}]}