{"sha": "e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThiMzdjYjZkNTZkZjJkYzZjM2QyYmI0NDFmY2UyMjdjM2M1ZDI1NA==", "commit": {"author": {"name": "Tatiana Udalova", "email": "t.udalova@samsung.com", "date": "2014-01-21T10:07:22Z"}, "committer": {"name": "Tatiana Udalova", "email": "tudalova@gcc.gnu.org", "date": "2014-01-21T10:07:22Z"}, "message": "* mklog: Avoid adding falsely changed functions to ChangeLog.\n\nFrom-SVN: r206875", "tree": {"sha": "5551103da3593309499ffe570d2af7a2a4b07832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5551103da3593309499ffe570d2af7a2a4b07832"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254/comments", "author": null, "committer": null, "parents": [{"sha": "8d81fb4ea24ba78622991141b9ad2f36bea1ec84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d81fb4ea24ba78622991141b9ad2f36bea1ec84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d81fb4ea24ba78622991141b9ad2f36bea1ec84"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "8ab57a3f28df1b35b2893c73141b1b05b86f2284", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254", "patch": "@@ -1,3 +1,7 @@\n+2014-01-21  Tatiana Udalova  <t.udalova@samsung.com>\n+\n+\t* mklog: Avoid adding falsely changed functions to ChangeLog.\n+\n 2013-12-31  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* config-list.mk: Add nios2-elf, nios2-linux-gnu. Corrected"}, {"sha": "16ce1914db6ba3d3b8f5ade558a2af7c351fe3b5", "filename": "contrib/mklog", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254/contrib%2Fmklog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254/contrib%2Fmklog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmklog?ref=e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254", "patch": "@@ -80,14 +80,31 @@ sub remove_suffixes ($) {\n \treturn $filename;\n }\n \n+# Check if line can be a function declaration:\n+# First pattern cut extra symbols added by diff\n+# second pattern checks that line is not a comment or brace\n+sub is_function  {\n+\tmy ($function, $is_context_diff) = (@_);\n+\tif ($is_context_diff) {\n+\t\t$function =~ s/^..//;\n+\t} else {\n+\t\t$function =~ s/^.//;\n+\t}\n+\treturn $function\n+\t&& ($function !~ /^[\\s{}]/);\n+}\n+\n # For every file in the .diff print all the function names in ChangeLog\n # format.\n %cl_entries = ();\n $change_msg = undef;\n $look_for_funs = 0;\n $clname = get_clname('');\n open (DFILE, $diff) or die \"Could not open file $diff for reading\";\n-while (<DFILE>) {\n+chomp (my @diff_lines = <DFILE>);\n+close (DFILE);\n+$line_idx = 0;\n+foreach (@diff_lines) {\n     # Stop processing functions if we found a new file\n \t# Remember both left and right names because one may be /dev/null.\n     if (/^[+*][+*][+*] +(\\S+)/) {\n@@ -150,6 +167,17 @@ while (<DFILE>) {\n         $look_for_funs = 0;\n     }\n \n+    # Mark if we met doubtfully changed function.\n+    $doubtfunc = 0;\n+    $is_context_diff = 0;\n+    if ($diff_lines[$line_idx] =~ /^@@ .* @@ ([a-zA-Z0-9_].*)/) {\n+\t    $doubtfunc = 1;\n+    }\n+    elsif ($diff_lines[$line_idx] =~ /^\\*\\*\\*\\*\\*\\** ([a-zA-Z0-9_].*)/) {\n+\t    $doubtfunc = 1;\n+\t    $is_context_diff = 1;\n+    }\n+\n     # If we find a new function, print it in brackets.  Special case if\n     # this is the first function in a file.  \n     #\n@@ -187,7 +215,18 @@ while (<DFILE>) {\n \t    1 while ($fn =~ s/<[^<>]*>//);\n \t    $fn =~ s/[ \\t]*$//;\n \t}\n-\tif ($fn && $seen_names{$fn} == 0) {\n+\t# Check is function really modified\n+\t$no_real_change = 0;\n+\tif ($doubtfunc) {\n+\t\t$idx = $line_idx;\n+\t# Check all lines till the first change\n+\t# for the presence of really changed function\n+\t\tdo {\n+\t\t\t++$idx;\n+\t\t\t$no_real_change = is_function ($diff_lines[$idx], $is_context_diff);\n+\t\t} while (!$no_real_change && ($diff_lines[$idx] !~  /^[\\+\\-\\!]/))\n+\t}\n+\tif ($fn && !$seen_names{$fn} && !$no_real_change) {\n \t    # If this is the first function in the file, we display it next\n \t    # to the filename, so we need an extra space before the opening\n \t    # brace.\n@@ -201,10 +240,9 @@ while (<DFILE>) {\n \t    $seen_names{$fn} = 1;\n \t}\n     }\n+\t$line_idx++;\n }\n \n-close (DFILE);\n-\n # If we have not seen any function names (ie, $change_msg is empty), we just\n # write out a ':'. This happens when there is only one file with no\n # functions."}]}