{"sha": "a1d6cdc2d7a48f9b584e2323b173176055adc53a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFkNmNkYzJkN2E0OGY5YjU4NGUyMzIzYjE3MzE3NjA1NWFkYzUzYQ==", "commit": {"author": {"name": "Mohan Embar", "email": "gnustuff@thisiscool.com", "date": "2003-08-29T04:13:04Z"}, "committer": {"name": "Mohan Embar", "email": "membar@gcc.gnu.org", "date": "2003-08-29T04:13:04Z"}, "message": "natInetAddressWin32.cc, [...]: Readded code enclosed in DISABLE_JAVA_NET defines in preparation for MinGW...\n\n\t* java/net/natInetAddressWin32.cc,\n\tjava/net/natNetworkInterfaceWin32.cc,\n\tjava/net/natPlainDatagramSocketImplWin32.cc,\n\tjava/net/natPlainSocketImplWin32.cc:\n\tReadded code enclosed in DISABLE_JAVA_NET defines\n\tin preparation for MinGW cleanup / networking\n\tpatch\n\nFrom-SVN: r70902", "tree": {"sha": "bf0128aadf8f43ded3bdc0de40a3495af107d6c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf0128aadf8f43ded3bdc0de40a3495af107d6c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1d6cdc2d7a48f9b584e2323b173176055adc53a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d6cdc2d7a48f9b584e2323b173176055adc53a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d6cdc2d7a48f9b584e2323b173176055adc53a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d6cdc2d7a48f9b584e2323b173176055adc53a/comments", "author": null, "committer": null, "parents": [{"sha": "0b3f3d2213ab28a7f1050af5c077aec000fd356c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3f3d2213ab28a7f1050af5c077aec000fd356c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3f3d2213ab28a7f1050af5c077aec000fd356c"}], "stats": {"total": 281, "additions": 281, "deletions": 0}, "files": [{"sha": "62b041342e52322cfd73ca8978686220431380ac", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d6cdc2d7a48f9b584e2323b173176055adc53a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d6cdc2d7a48f9b584e2323b173176055adc53a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a1d6cdc2d7a48f9b584e2323b173176055adc53a", "patch": "@@ -1,3 +1,13 @@\n+2003-08-28  Mohan Embar  <gnustuff@thisiscool.com>\n+\n+\t* java/net/natInetAddressWin32.cc,\n+\tjava/net/natNetworkInterfaceWin32.cc,\n+\tjava/net/natPlainDatagramSocketImplWin32.cc,\n+\tjava/net/natPlainSocketImplWin32.cc:\n+\tReadded code enclosed in DISABLE_JAVA_NET defines\n+\tin preparation for MinGW cleanup / networking\n+\tpatch\n+\n 2003-08-28  Mohan Embar  <gnustuff@thisiscool.com>\n \n \t* Makefile.am: Fixed problems with parallel makes."}, {"sha": "f6748fd56916cc8a8c50642cceecdf5925c49d64", "filename": "libjava/java/net/natInetAddressWin32.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d6cdc2d7a48f9b584e2323b173176055adc53a/libjava%2Fjava%2Fnet%2FnatInetAddressWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d6cdc2d7a48f9b584e2323b173176055adc53a/libjava%2Fjava%2Fnet%2FnatInetAddressWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatInetAddressWin32.cc?ref=a1d6cdc2d7a48f9b584e2323b173176055adc53a", "patch": "@@ -57,6 +57,34 @@ details.  */\n extern \"C\" int gethostname (char *name, int namelen);\n #endif\n \n+#ifdef DISABLE_JAVA_NET\n+\n+jbyteArray\n+java::net::InetAddress::aton (jstring)\n+{\n+  return NULL;\n+}\n+\n+jint\n+java::net::InetAddress::getFamily (jbyteArray bytes)\n+{\n+  return 0;\n+}\n+\n+JArray<java::net::InetAddress*> *\n+java::net::InetAddress::lookup (jstring, java::net::InetAddress *, jboolean)\n+{\n+  return NULL;\n+}\n+\n+jstring\n+java::net::InetAddress::getLocalHostname ()\n+{\n+  return NULL;\n+}\n+\n+#else /* DISABLE_JAVA_NET */\n+\n jbyteArray\n java::net::InetAddress::aton (jstring host)\n {\n@@ -323,3 +351,5 @@ java::net::InetAddress::getLocalHostname ()\n   // anyway, thanks to the InetAddress.localhost cache.\n   return JvNewStringUTF (chars);\n }\n+\n+#endif /* DISABLE_JAVA_NET */"}, {"sha": "47d68b5fd6501005d571e4d54b5b65e1b0d9b727", "filename": "libjava/java/net/natNetworkInterfaceWin32.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d6cdc2d7a48f9b584e2323b173176055adc53a/libjava%2Fjava%2Fnet%2FnatNetworkInterfaceWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d6cdc2d7a48f9b584e2323b173176055adc53a/libjava%2Fjava%2Fnet%2FnatNetworkInterfaceWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatNetworkInterfaceWin32.cc?ref=a1d6cdc2d7a48f9b584e2323b173176055adc53a", "patch": "@@ -52,6 +52,17 @@ details.  */\n #include <java/net/SocketException.h>\n #include <java/util/Vector.h>\n \n+#ifdef DISABLE_JAVA_NET\n+\n+::java::util::Vector*\n+java::net::NetworkInterface::getRealNetworkInterfaces ()\n+{\n+  ::java::util::Vector* ht = new ::java::util::Vector();\n+  return ht;\n+}\n+\n+#else /* DISABLE_JAVA_NET */\n+\n ::java::util::Vector*\n java::net::NetworkInterface::getRealNetworkInterfaces ()\n {\n@@ -127,3 +138,5 @@ java::net::NetworkInterface::getRealNetworkInterfaces ()\n   return ht;\n #endif /* WIN32 */\n }\n+\n+#endif // DISABLE_JAVA_NET //"}, {"sha": "d0d006d4b4397367c0cb85b40eaaf9309b69ae15", "filename": "libjava/java/net/natPlainDatagramSocketImplWin32.cc", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d6cdc2d7a48f9b584e2323b173176055adc53a/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d6cdc2d7a48f9b584e2323b173176055adc53a/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc?ref=a1d6cdc2d7a48f9b584e2323b173176055adc53a", "patch": "@@ -47,6 +47,111 @@ details.  */\n #include <java/lang/Boolean.h>\n #include <java/lang/Integer.h>\n \n+#ifdef DISABLE_JAVA_NET\n+\n+void\n+java::net::PlainDatagramSocketImpl::create ()\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.create: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainDatagramSocketImpl::bind (jint, java::net::InetAddress *)\n+{\n+  throw new BindException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.bind: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainDatagramSocketImpl::connect (java::net::InetAddress *, jint)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.connect: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainDatagramSocketImpl::disconnect ()\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.disconnect: unimplemented\"));\n+}\n+\n+jint\n+java::net::PlainDatagramSocketImpl::peek (java::net::InetAddress *)\n+{\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.peek: unimplemented\"));\n+}\n+\n+jint\n+java::net::PlainDatagramSocketImpl::peekData(java::net::DatagramPacket *)\n+{\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.peekData: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainDatagramSocketImpl::close ()\n+{\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.close: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainDatagramSocketImpl::send (java::net::DatagramPacket *)\n+{\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.send: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainDatagramSocketImpl::receive (java::net::DatagramPacket *)\n+{\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.receive: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainDatagramSocketImpl::setTimeToLive (jint)\n+{\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.setTimeToLive: unimplemented\"));\n+}\n+\n+jint\n+java::net::PlainDatagramSocketImpl::getTimeToLive ()\n+{\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.getTimeToLive: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainDatagramSocketImpl::mcastGrp (java::net::InetAddress *,\n+                                              java::net::NetworkInterface *,\n+\t\t\t\t\t      jboolean)\n+{\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.mcastGrp: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainDatagramSocketImpl::setOption (jint, java::lang::Object *)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.setOption: unimplemented\"));\n+}\n+\n+java::lang::Object *\n+java::net::PlainDatagramSocketImpl::getOption (jint)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.getOption: unimplemented\"));\n+}\n+\n+#else /* DISABLE_JAVA_NET */\n+\n+\n union SockAddr\n {\n   struct sockaddr_in address;\n@@ -763,3 +868,5 @@ java::net::PlainDatagramSocketImpl::getOption (jint optID)\n   char* strerr = strerror (errno);\n   throw new java::net::SocketException (JvNewStringUTF (strerr));\n }\n+\n+#endif /* DISABLE_JAVA_NET */"}, {"sha": "1485ea842f979f10e4295d074ff39a96ce08bd44", "filename": "libjava/java/net/natPlainSocketImplWin32.cc", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d6cdc2d7a48f9b584e2323b173176055adc53a/libjava%2Fjava%2Fnet%2FnatPlainSocketImplWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d6cdc2d7a48f9b584e2323b173176055adc53a/libjava%2Fjava%2Fnet%2FnatPlainSocketImplWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainSocketImplWin32.cc?ref=a1d6cdc2d7a48f9b584e2323b173176055adc53a", "patch": "@@ -9,6 +9,8 @@ details.  */\n #include <config.h>\n #include <platform.h>\n \n+#ifndef DISABLE_JAVA_NET\n+\n #ifdef WIN32\n \n #include <windows.h>\n@@ -52,6 +54,7 @@ read(int s, void *buf, int len)\n #include <string.h>\n \n #endif /* WIN32 */\n+#endif /* DISABLE_JAVA_NET */\n \n #if HAVE_BSTRING_H\n // Needed for bzero, implicitly used by FD_ZERO on IRIX 5.2 \n@@ -80,6 +83,122 @@ read(int s, void *buf, int len)\n #include <java/lang/ArrayIndexOutOfBoundsException.h>\n #include <java/lang/IllegalArgumentException.h>\n \n+#ifdef DISABLE_JAVA_NET\n+\n+void\n+java::net::PlainSocketImpl::create (jboolean)\n+{\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"SocketImpl.create: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainSocketImpl::bind (java::net::InetAddress *, jint)\n+{\n+  throw new BindException (\n+    JvNewStringLatin1 (\"SocketImpl.bind: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainSocketImpl::connect (java::net::SocketAddress *, jint)\n+{\n+  throw new ConnectException (\n+    JvNewStringLatin1 (\"SocketImpl.connect: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainSocketImpl::listen (jint)\n+{\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"SocketImpl.listen: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainSocketImpl::accept (java::net::PlainSocketImpl *)\n+{\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"SocketImpl.accept: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainSocketImpl::setOption (jint, java::lang::Object *)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.setOption: unimplemented\"));\n+}\n+\n+java::lang::Object *\n+java::net::PlainSocketImpl::getOption (jint)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.getOption: unimplemented\"));\n+}\n+\n+jint\n+java::net::PlainSocketImpl::read(void)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.read: unimplemented\"));\n+}\n+\n+jint\n+java::net::PlainSocketImpl::read(jbyteArray buffer, jint offset, jint count)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.read: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainSocketImpl::write(jint b)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.write: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainSocketImpl::write(jbyteArray b, jint offset, jint len)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.write: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainSocketImpl::sendUrgentData(jint data)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.sendUrgentData: unimplemented\"));\n+}\n+\n+jint\n+java::net::PlainSocketImpl::available(void)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.available: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainSocketImpl::close(void)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.close: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainSocketImpl::shutdownInput (void)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.shutdownInput: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainSocketImpl::shutdownOutput (void)\n+{\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.shutdownOutput: unimplemented\"));\n+}\n+\n+#else /* DISABLE_JAVA_NET */\n+\n union SockAddr\n {\n   struct sockaddr_in address;\n@@ -896,3 +1015,5 @@ java::net::PlainSocketImpl::shutdownOutput (void)\n   if (::shutdown (fnum, 1))\n     throw new SocketException (JvNewStringUTF (strerror (errno)));\n }\n+\n+#endif /* DISABLE_JAVA_NET */"}]}