{"sha": "a0469a32455e689977fe199de5e0dec871fb5486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA0NjlhMzI0NTVlNjg5OTc3ZmUxOTlkZTVlMGRlYzg3MWZiNTQ4Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-11T00:16:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-11T00:16:27Z"}, "message": "(rescan): Don't address outside of array when preprocessing C++\ncomments.\n\nFrom-SVN: r10118", "tree": {"sha": "2122861dbb4b4a8c35578e25e5958075bc3ec028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2122861dbb4b4a8c35578e25e5958075bc3ec028"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0469a32455e689977fe199de5e0dec871fb5486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0469a32455e689977fe199de5e0dec871fb5486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0469a32455e689977fe199de5e0dec871fb5486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0469a32455e689977fe199de5e0dec871fb5486/comments", "author": null, "committer": null, "parents": [{"sha": "d679bebf473bee3e804b0d4563a8314372833a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d679bebf473bee3e804b0d4563a8314372833a18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d679bebf473bee3e804b0d4563a8314372833a18"}], "stats": {"total": 47, "additions": 19, "deletions": 28}, "files": [{"sha": "5a98ad561ad3e7e20b375846d54ceb071e09dbbf", "filename": "gcc/cccp.c", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0469a32455e689977fe199de5e0dec871fb5486/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0469a32455e689977fe199de5e0dec871fb5486/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=a0469a32455e689977fe199de5e0dec871fb5486", "patch": "@@ -2991,38 +2991,29 @@ do { ip = &instack[indepth];\t\t\\\n \t/* C++ style comment... */\n \tstart_line = ip->lineno;\n \n-\t--ibp;\t\t\t/* Back over the slash */\n-\t--obp;\n-\n \t/* Comments are equivalent to spaces. */\n \tif (! put_out_comments)\n-\t  *obp++ = ' ';\n-\telse {\n-\t  /* must fake up a comment here */\n-\t  *obp++ = '/';\n-\t  *obp++ = '/';\n-\t}\n-\t{\n-\t  U_CHAR *before_bp = ibp+2;\n+\t  obp[-1] = ' ';\n \n-\t  while (ibp < limit) {\n-\t    if (ibp[-1] != '\\\\' && *ibp == '\\n') {\n-\t      if (put_out_comments) {\n-\t\tbcopy ((char *) before_bp, (char *) obp, ibp - before_bp);\n-\t\tobp += ibp - before_bp;\n-\t      }\n-\t      break;\n-\t    } else {\n-\t      if (*ibp == '\\n') {\n-\t\t++ip->lineno;\n-\t\t/* Copy the newline into the output buffer, in order to\n-\t\t   avoid the pain of a #line every time a multiline comment\n-\t\t   is seen.  */\n-\t\tif (!put_out_comments)\n-\t\t  *obp++ = '\\n';\n-\t\t++op->lineno;\n+\t{\n+\t  U_CHAR *before_bp = ibp;\n+\n+\t  while (++ibp < limit) {\n+\t    if (*ibp == '\\n') {\n+\t      if (ibp[-1] != '\\\\') {\n+\t\tif (put_out_comments) {\n+\t\t  bcopy ((char *) before_bp, (char *) obp, ibp - before_bp);\n+\t\t  obp += ibp - before_bp;\n+\t\t}\n+\t\tbreak;\n \t      }\n-\t      ibp++;\n+\t      ++ip->lineno;\n+\t      /* Copy the newline into the output buffer, in order to\n+\t\t avoid the pain of a #line every time a multiline comment\n+\t\t is seen.  */\n+\t      if (!put_out_comments)\n+\t\t*obp++ = '\\n';\n+\t      ++op->lineno;\n \t    }\n \t  }\n \t  break;"}]}