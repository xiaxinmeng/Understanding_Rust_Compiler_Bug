{"sha": "0640c7d139ea91870c378de96cab14d708517593", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY0MGM3ZDEzOWVhOTE4NzBjMzc4ZGU5NmNhYjE0ZDcwODUxNzU5Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-07T13:17:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-07T13:17:51Z"}, "message": "[multiple changes]\n\n2016-07-07  Vadim Godunko  <godunko@adacore.com>\n\n\t* adainit.h, adainit.c (__gnat_is_read_accessible_file): New\n\tsubprogram.\n\t(__gnat_is_write_accessible_file): New subprogram.\n\t* s-os_lib.ads, s-os_lib.adb (Is_Read_Accessible_File): New subprogram.\n\t(Is_Write_Accessible_File): New subprogram.\n\n2016-07-07  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch12.adb (Install_Body): Minor refactoring in the order\n\tof local functions.\n\t(In_Same_Scope): Change loop condition to be more expressive.\n\nFrom-SVN: r238116", "tree": {"sha": "1abcefad16cd3dadc77bc417c2d1899ee51656d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1abcefad16cd3dadc77bc417c2d1899ee51656d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0640c7d139ea91870c378de96cab14d708517593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0640c7d139ea91870c378de96cab14d708517593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0640c7d139ea91870c378de96cab14d708517593", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0640c7d139ea91870c378de96cab14d708517593/comments", "author": null, "committer": null, "parents": [{"sha": "8c519039a6363f0013d92f2e742adee4800806a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c519039a6363f0013d92f2e742adee4800806a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c519039a6363f0013d92f2e742adee4800806a0"}], "stats": {"total": 142, "additions": 116, "deletions": 26}, "files": [{"sha": "5b2b9fa10e188e7f223694f787736dca3b91a518", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0640c7d139ea91870c378de96cab14d708517593/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0640c7d139ea91870c378de96cab14d708517593/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0640c7d139ea91870c378de96cab14d708517593", "patch": "@@ -1,3 +1,17 @@\n+2016-07-07  Vadim Godunko  <godunko@adacore.com>\n+\n+\t* adainit.h, adainit.c (__gnat_is_read_accessible_file): New\n+\tsubprogram.\n+\t(__gnat_is_write_accessible_file): New subprogram.\n+\t* s-os_lib.ads, s-os_lib.adb (Is_Read_Accessible_File): New subprogram.\n+\t(Is_Write_Accessible_File): New subprogram.\n+\n+2016-07-07  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch12.adb (Install_Body): Minor refactoring in the order\n+\tof local functions.\n+\t(In_Same_Scope): Change loop condition to be more expressive.\n+\n 2016-07-07  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_ch3.adb, sem_prag.adb, sem_prag.ads, prj-ext.adb, freeze.adb,"}, {"sha": "9d8a438f0ebc129c4bb39429d406c853e3f1b3fc", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0640c7d139ea91870c378de96cab14d708517593/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0640c7d139ea91870c378de96cab14d708517593/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=0640c7d139ea91870c378de96cab14d708517593", "patch": "@@ -1911,6 +1911,20 @@ __gnat_is_readable_file_attr (char* name, struct file_attributes* attr)\n    return attr->readable;\n }\n \n+int\n+__gnat_is_read_accessible_file (char *name)\n+{\n+#if defined (_WIN32)\n+   TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n+\n+   S2WSC (wname, name, GNAT_MAX_PATH_LEN + 2);\n+\n+   return !_access (wname, 4);\n+#else\n+   return !access (name, R_OK);\n+#endif\n+}\n+\n int\n __gnat_is_readable_file (char *name)\n {\n@@ -1961,6 +1975,20 @@ __gnat_is_writable_file (char *name)\n    return __gnat_is_writable_file_attr (name, &attr);\n }\n \n+int\n+__gnat_is_write_accessible_file (char *name)\n+{\n+#if defined (_WIN32)\n+   TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n+\n+   S2WSC (wname, name, GNAT_MAX_PATH_LEN + 2);\n+\n+   return !_access (wname, 2);\n+#else\n+   return !access (name, W_OK);\n+#endif\n+}\n+\n int\n __gnat_is_executable_file_attr (char* name, struct file_attributes* attr)\n {"}, {"sha": "338b2ef70e00573050f99a241875198645fc0d9d", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0640c7d139ea91870c378de96cab14d708517593/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0640c7d139ea91870c378de96cab14d708517593/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=0640c7d139ea91870c378de96cab14d708517593", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2015, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2016, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -207,6 +207,8 @@ extern int    __gnat_is_directory\t\t      (char *);\n extern int    __gnat_is_writable_file\t\t   (char *);\n extern int    __gnat_is_readable_file\t\t   (char *name);\n extern int    __gnat_is_executable_file      (char *name);\n+extern int    __gnat_is_write_accessible_file\t(char *name);\n+extern int    __gnat_is_read_accessible_file\t(char *name);\n \n extern void   __gnat_reset_attributes (struct file_attributes *);\n extern int    __gnat_error_attributes (struct file_attributes *);"}, {"sha": "31b2f08cab9e1a398fa355a5b8a325c3f932f672", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0640c7d139ea91870c378de96cab14d708517593/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0640c7d139ea91870c378de96cab14d708517593/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=0640c7d139ea91870c378de96cab14d708517593", "patch": "@@ -1495,6 +1495,21 @@ package body System.OS_Lib is\n       return Is_Directory (F_Name'Address);\n    end Is_Directory;\n \n+   -----------------------------\n+   -- Is_Read_Accessible_File --\n+   -----------------------------\n+\n+   function Is_Read_Accessible_File (Name : String) return Boolean is\n+      function Is_Read_Accessible_File (Name : Address) return Integer;\n+      pragma Import\n+        (C, Is_Read_Accessible_File, \"__gnat_is_read_accessible_file\");\n+      F_Name : String (1 .. Name'Length + 1);\n+   begin\n+      F_Name (1 .. Name'Length) := Name;\n+      F_Name (F_Name'Last)      := ASCII.NUL;\n+      return Is_Read_Accessible_File (F_Name'Address) /= 0;\n+   end Is_Read_Accessible_File;\n+\n    ----------------------\n    -- Is_Readable_File --\n    ----------------------\n@@ -1571,6 +1586,21 @@ package body System.OS_Lib is\n       return Is_Symbolic_Link (F_Name'Address);\n    end Is_Symbolic_Link;\n \n+   ------------------------------\n+   -- Is_Write_Accessible_File --\n+   ------------------------------\n+\n+   function Is_Write_Accessible_File (Name : String) return Boolean is\n+      function Is_Write_Accessible_File (Name : Address) return Integer;\n+      pragma Import\n+        (C, Is_Write_Accessible_File, \"__gnat_is_write_accessible_file\");\n+      F_Name : String (1 .. Name'Length + 1);\n+   begin\n+      F_Name (1 .. Name'Length) := Name;\n+      F_Name (F_Name'Last)      := ASCII.NUL;\n+      return Is_Write_Accessible_File (F_Name'Address) /= 0;\n+   end Is_Write_Accessible_File;\n+\n    ----------------------\n    -- Is_Writable_File --\n    ----------------------"}, {"sha": "9004874908226bdaffd08625d030c99c82e95dbf", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0640c7d139ea91870c378de96cab14d708517593/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0640c7d139ea91870c378de96cab14d708517593/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=0640c7d139ea91870c378de96cab14d708517593", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1995-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -457,6 +457,14 @@ package System.OS_Lib is\n    --  not actually be writable due to some other process having exclusive\n    --  access.\n \n+   function Is_Read_Accessible_File (Name : String) return Boolean;\n+   --  Determines if the given string, Name, is the name of an existing file\n+   --  that is readable. Returns True if so, False otherwise.\n+\n+   function Is_Write_Accessible_File (Name : String) return Boolean;\n+   --  Determines if the given string, Name, is the name of an existing file\n+   --  that is writable. Returns True if so, False otherwise.\n+\n    function Locate_Exec_On_Path (Exec_Name : String) return String_Access;\n    --  Try to locate an executable whose name is given by Exec_Name in the\n    --  directories listed in the environment Path. If the Exec_Name does not"}, {"sha": "8533af0ecc7c493c075cad28b83cee273f2c117c", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0640c7d139ea91870c378de96cab14d708517593/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0640c7d139ea91870c378de96cab14d708517593/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=0640c7d139ea91870c378de96cab14d708517593", "patch": "@@ -713,7 +713,10 @@ package body Sem_Ch12 is\n    --  body. Early instantiations can also appear if generic, instance and\n    --  body are all in the declarative part of a subprogram or entry. Entities\n    --  of packages that are early instantiations are delayed, and their freeze\n-   --  node appears after the generic body.\n+   --  node appears after the generic body. This rather complex machinery is\n+   --  needed when nested instantiations are present, because the source does\n+   --  not carry any indication of where the corresponding instance bodies must\n+   --  be installed and frozen.\n \n    procedure Install_Formal_Packages (Par : Entity_Id);\n    --  Install the visible part of any formal of the parent that is a formal\n@@ -8927,23 +8930,13 @@ package body Sem_Ch12 is\n       Gen_Body : Node_Id;\n       Gen_Decl : Node_Id)\n    is\n-      Act_Id    : constant Entity_Id := Corresponding_Spec (Act_Body);\n-      Act_Unit  : constant Node_Id   := Unit (Cunit (Get_Source_Unit (N)));\n-      Gen_Id    : constant Entity_Id := Corresponding_Spec (Gen_Body);\n-      Par       : constant Entity_Id := Scope (Gen_Id);\n-      Gen_Unit  : constant Node_Id   :=\n-                    Unit (Cunit (Get_Source_Unit (Gen_Decl)));\n-      Orig_Body : Node_Id := Gen_Body;\n-      F_Node    : Node_Id;\n-      Body_Unit : Node_Id;\n-\n-      Must_Delay : Boolean;\n \n-      function In_Same_Scope (Generic_Id, Actual_Id : Node_Id) return Boolean;\n-      --  Check if the generic definition's scope tree and the instantiation's\n-      --  scope tree share a dependency.\n+      function In_Same_Scope (Gen_Id, Act_Id : Node_Id) return Boolean;\n+      --  Check if the generic definition and the instantiation come from\n+      --  a common scope, in which case the instance must be frozen after\n+      --  the generic body.\n \n-      function True_Sloc (N : Node_Id) return Source_Ptr;\n+      function True_Sloc (N, Act_Unit : Node_Id) return Source_Ptr;\n       --  If the instance is nested inside a generic unit, the Sloc of the\n       --  instance indicates the place of the original definition, not the\n       --  point of the current enclosing instance. Pending a better usage of\n@@ -8955,28 +8948,30 @@ package body Sem_Ch12 is\n       -- In_Same_Scope --\n       -------------------\n \n-      function In_Same_Scope (Generic_Id, Actual_Id : Node_Id) return Boolean\n-      is\n-         Act_Scop : Entity_Id := Scope (Actual_Id);\n-         Gen_Scop : Entity_Id := Scope (Generic_Id);\n+      function In_Same_Scope (Gen_Id, Act_Id : Node_Id) return Boolean is\n+         Act_Scop : Entity_Id := Scope (Act_Id);\n+         Gen_Scop : Entity_Id := Scope (Gen_Id);\n+\n       begin\n-         while Scope_Depth_Value (Act_Scop) > 0\n-           and then Scope_Depth_Value (Gen_Scop) > 0\n+         while Act_Scop /= Standard_Standard\n+           and then Gen_Scop /= Standard_Standard\n          loop\n             if Act_Scop = Gen_Scop then\n                return True;\n             end if;\n+\n             Act_Scop := Scope (Act_Scop);\n             Gen_Scop := Scope (Gen_Scop);\n          end loop;\n+\n          return False;\n       end In_Same_Scope;\n \n       ---------------\n       -- True_Sloc --\n       ---------------\n \n-      function True_Sloc (N : Node_Id) return Source_Ptr is\n+      function True_Sloc (N, Act_Unit : Node_Id) return Source_Ptr is\n          Res : Source_Ptr;\n          N1  : Node_Id;\n \n@@ -8994,6 +8989,18 @@ package body Sem_Ch12 is\n          return Res;\n       end True_Sloc;\n \n+      Act_Id    : constant Entity_Id := Corresponding_Spec (Act_Body);\n+      Act_Unit  : constant Node_Id   := Unit (Cunit (Get_Source_Unit (N)));\n+      Gen_Id    : constant Entity_Id := Corresponding_Spec (Gen_Body);\n+      Par       : constant Entity_Id := Scope (Gen_Id);\n+      Gen_Unit  : constant Node_Id   :=\n+                    Unit (Cunit (Get_Source_Unit (Gen_Decl)));\n+      Orig_Body : Node_Id := Gen_Body;\n+      F_Node    : Node_Id;\n+      Body_Unit : Node_Id;\n+\n+      Must_Delay : Boolean;\n+\n    --  Start of processing for Install_Body\n \n    begin\n@@ -9058,7 +9065,8 @@ package body Sem_Ch12 is\n           and then (Nkind_In (Gen_Unit, N_Package_Declaration,\n                                         N_Generic_Package_Declaration)\n                      or else (Gen_Unit = Body_Unit\n-                               and then True_Sloc (N) < Sloc (Orig_Body)))\n+                               and then True_Sloc (N, Act_Unit)\n+                                          < Sloc (Orig_Body)))\n           and then Is_In_Main_Unit (Original_Node (Gen_Unit))\n           and then (In_Same_Scope (Gen_Id, Act_Id)));\n "}]}