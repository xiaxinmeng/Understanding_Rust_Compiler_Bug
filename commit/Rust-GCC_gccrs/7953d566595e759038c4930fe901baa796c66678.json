{"sha": "7953d566595e759038c4930fe901baa796c66678", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk1M2Q1NjY1OTVlNzU5MDM4YzQ5MzBmZTkwMWJhYTc5NmM2NjY3OA==", "commit": {"author": {"name": "Palmer Dabbelt", "email": "palmer@dabbelt.com", "date": "2017-02-06T21:39:18Z"}, "committer": {"name": "Palmer Dabbelt", "email": "palmer@gcc.gnu.org", "date": "2017-02-06T21:39:18Z"}, "message": "Alphebetize RISC-V Options section\n\n2017-02-06  Palmer Dabbelt  <palmer@dabbelt.com>\n\n        * docs/invoke.texi (RISC-V Options): Alphabetize.\n\nFrom-SVN: r245231", "tree": {"sha": "ac8c3455884ca2b3286f72215b9da189c0170cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac8c3455884ca2b3286f72215b9da189c0170cc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7953d566595e759038c4930fe901baa796c66678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7953d566595e759038c4930fe901baa796c66678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7953d566595e759038c4930fe901baa796c66678", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7953d566595e759038c4930fe901baa796c66678/comments", "author": {"login": "palmer-dabbelt", "id": 1383006, "node_id": "MDQ6VXNlcjEzODMwMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1383006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palmer-dabbelt", "html_url": "https://github.com/palmer-dabbelt", "followers_url": "https://api.github.com/users/palmer-dabbelt/followers", "following_url": "https://api.github.com/users/palmer-dabbelt/following{/other_user}", "gists_url": "https://api.github.com/users/palmer-dabbelt/gists{/gist_id}", "starred_url": "https://api.github.com/users/palmer-dabbelt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palmer-dabbelt/subscriptions", "organizations_url": "https://api.github.com/users/palmer-dabbelt/orgs", "repos_url": "https://api.github.com/users/palmer-dabbelt/repos", "events_url": "https://api.github.com/users/palmer-dabbelt/events{/privacy}", "received_events_url": "https://api.github.com/users/palmer-dabbelt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "377ee2e435a6ad525625378597313f5d1b4d86e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/377ee2e435a6ad525625378597313f5d1b4d86e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/377ee2e435a6ad525625378597313f5d1b4d86e6"}], "stats": {"total": 162, "additions": 83, "deletions": 79}, "files": [{"sha": "38f1971df8fa7cd3f0fca2fee7be7888bf0bab74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7953d566595e759038c4930fe901baa796c66678/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7953d566595e759038c4930fe901baa796c66678/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7953d566595e759038c4930fe901baa796c66678", "patch": "@@ -1,3 +1,7 @@\n+2017-02-06  Palmer Dabbelt  <palmer@dabbelt.com>\n+\n+\t* docs/invoke.texi (RISC-V Options): Alphabetize.\n+\n 2017-02-06  Palmer Dabbelt  <palmer@dabbelt.com>\n \n \t* doc/invoke.texi (RISC-V Options): Use two spaces to separate"}, {"sha": "cabaa1b9b3594e26a4d6b9c67327298d8abb278f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 79, "deletions": 79, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7953d566595e759038c4930fe901baa796c66678/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7953d566595e759038c4930fe901baa796c66678/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7953d566595e759038c4930fe901baa796c66678", "patch": "@@ -959,6 +959,20 @@ Objective-C and Objective-C++ Dialects}.\n @emph{PowerPC Options}\n See RS/6000 and PowerPC Options.\n \n+@emph{RISC-V Options}\n+@gccoptlist{-mbranch-cost=@var{N-instruction} @gol\n+-mmemcpy  -mno-memcpy @gol\n+-mplt  -mno-plt @gol\n+-mabi=@var{ABI-string} @gol\n+-mfdiv  -mno-fdiv @gol\n+-mdiv  -mno-div @gol\n+-march=@var{ISA-string} @gol\n+-mtune=@var{processor-string} @gol\n+-msmall-data-limit=@var{N-bytes} @gol\n+-msave-restore  -mno-save-restore @gol\n+-mcmodel=@var{code-model} @gol\n+-mexplicit-relocs  -mno-explicit-relocs @gol}\n+\n @emph{RL78 Options}\n @gccoptlist{-msim  -mmul=none  -mmul=g13  -mmul=g14  -mallregs @gol\n -mcpu=g10  -mcpu=g13  -mcpu=g14  -mg10  -mg13  -mg14 @gol\n@@ -1026,20 +1040,6 @@ See RS/6000 and PowerPC Options.\n -mstack-protector-guard-offset=@var{offset} @gol\n -mlra  -mno-lra}\n \n-@emph{RISC-V Options}\n-@gccoptlist{-mbranch-cost=@var{N-instruction} @gol\n--mmemcpy  -mno-memcpy @gol\n--mplt  -mno-plt @gol\n--mabi=@var{ABI-string} @gol\n--mfdiv  -mno-fdiv @gol\n--mdiv  -mno-div @gol\n--march=@var{ISA-string} @gol\n--mtune=@var{processor-string} @gol\n--msmall-data-limit=@var{N-bytes} @gol\n--msave-restore  -mno-save-restore @gol\n--mcmodel=@var{code-model} @gol\n--mexplicit-relocs  -mno-explicit-relocs @gol}\n-\n @emph{RX Options}\n @gccoptlist{-m64bit-doubles  -m32bit-doubles  -fpu  -nofpu@gol\n -mcpu=@gol\n@@ -13756,9 +13756,9 @@ platform.\n * PDP-11 Options::\n * picoChip Options::\n * PowerPC Options::\n+* RISC-V Options::\n * RL78 Options::\n * RS/6000 and PowerPC Options::\n-* RISC-V Options::\n * RX Options::\n * S/390 and zSeries Options::\n * Score Options::\n@@ -20831,6 +20831,70 @@ these warnings.\n \n These are listed under @xref{RS/6000 and PowerPC Options}.\n \n+@node RISC-V Options\n+@subsection RISC-V Options\n+@cindex RISC-V Options\n+\n+These command-line options are defined for RISC-V targets:\n+\n+@table @gcctabopt\n+@item -mbranch-cost=@var{n}\n+@opindex mbranch-cost\n+Set the cost of branches to roughly @var{n} instructions.\n+\n+@item -mmemcpy\n+@itemx -mno-memcpy\n+@opindex mmemcpy\n+Don't optimize block moves.\n+\n+@item -mplt\n+@itemx -mno-plt\n+@opindex plt\n+When generating PIC code, allow the use of PLTs. Ignored for non-PIC.\n+\n+@item -mabi=@var{ABI-string}\n+@opindex mabi\n+Specify integer and floating-point calling convention.  This defaults to the\n+natural calling convention: e.g.@ LP64 for RV64I, ILP32 for RV32I, LP64D for\n+RV64G.\n+\n+@item -mfdiv\n+@itemx -mno-fdiv\n+@opindex mfdiv\n+Use hardware floating-point divide and square root instructions.  This requires\n+the F or D extensions for floating-point registers.\n+\n+@item -mdiv\n+@itemx -mno-div\n+@opindex mdiv\n+Use hardware instructions for integer division.  This requires the M extension.\n+\n+@item -march=@var{ISA-string}\n+@opindex march\n+Generate code for given RISC-V ISA (e.g.@ @samp{rv64im}).  ISA strings must be\n+lower-case.  Examples include @samp{rv64i}, @samp{rv32g}, and @samp{rv32imaf}.\n+\n+@item -mtune=@var{processor-string}\n+@opindex mtune\n+Optimize the output for the given processor, specified by microarchitecture\n+name.\n+\n+@item -msmall-data-limit=@var{n}\n+@opindex msmall-data-limit\n+Put global and static data smaller than @var{n} bytes into a special section\n+(on some targets).\n+\n+@item -msave-restore\n+@itemx -mno-save-restore\n+@opindex msave-restore\n+Use smaller but slower prologue and epilogue code.\n+\n+@item -mcmodel=@var{code-model}\n+@opindex mcmodel\n+Specify the code model.\n+\n+@end table\n+\n @node RL78 Options\n @subsection RL78 Options\n @cindex RL78 Options\n@@ -22152,70 +22216,6 @@ offset from that base register. The default for those is as specified in the\n relevant ABI.\n @end table\n \n-@node RISC-V Options\n-@subsection RISC-V Options\n-@cindex RISC-V Options\n-\n-These command-line options are defined for RISC-V targets:\n-\n-@table @gcctabopt\n-@item -mbranch-cost=@var{n}\n-@opindex mbranch-cost\n-Set the cost of branches to roughly @var{n} instructions.\n-\n-@item -mmemcpy\n-@itemx -mno-memcpy\n-@opindex mmemcpy\n-Don't optimize block moves.\n-\n-@item -mplt\n-@itemx -mno-plt\n-@opindex plt\n-When generating PIC code, allow the use of PLTs. Ignored for non-PIC.\n-\n-@item -mabi=@var{ABI-string}\n-@opindex mabi\n-Specify integer and floating-point calling convention.  This defaults to the\n-natural calling convention: e.g.@ LP64 for RV64I, ILP32 for RV32I, LP64D for\n-RV64G.\n-\n-@item -mfdiv\n-@itemx -mno-fdiv\n-@opindex mfdiv\n-Use hardware floating-point divide and square root instructions.  This requires\n-the F or D extensions for floating-point registers.\n-\n-@item -mdiv\n-@itemx -mno-div\n-@opindex mdiv\n-Use hardware instructions for integer division.  This requires the M extension.\n-\n-@item -march=@var{ISA-string}\n-@opindex march\n-Generate code for given RISC-V ISA (e.g.@ @samp{rv64im}).  ISA strings must be\n-lower-case.  Examples include @samp{rv64i}, @samp{rv32g}, and @samp{rv32imaf}.\n-\n-@item -mtune=@var{processor-string}\n-@opindex mtune\n-Optimize the output for the given processor, specified by microarchitecture\n-name.\n-\n-@item -msmall-data-limit=@var{n}\n-@opindex msmall-data-limit\n-Put global and static data smaller than @var{n} bytes into a special section\n-(on some targets).\n-\n-@item -msave-restore\n-@itemx -mno-save-restore\n-@opindex msave-restore\n-Use smaller but slower prologue and epilogue code.\n-\n-@item -mcmodel=@var{code-model}\n-@opindex mcmodel\n-Specify the code model.\n-\n-@end table\n-\n @node RX Options\n @subsection RX Options\n @cindex RX Options"}]}