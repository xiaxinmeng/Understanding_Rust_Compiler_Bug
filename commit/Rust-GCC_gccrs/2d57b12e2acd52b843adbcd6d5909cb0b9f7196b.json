{"sha": "2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ1N2IxMmUyYWNkNTJiODQzYWRiY2Q2ZDU5MDljYjBiOWY3MTk2Yg==", "commit": {"author": {"name": "Yuliang Wang", "email": "yuliang.wang@arm.com", "date": "2019-10-17T13:23:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-17T13:23:52Z"}, "message": "[AArch64][SVE2] Support for EOR3 and variants of BSL\n\n2019-10-17  Yuliang Wang  <yuliang.wang@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve2.md (aarch64_sve2_eor3<mode>)\n\t(aarch64_sve2_nor<mode>, aarch64_sve2_nand<mode>)\n\t(aarch64_sve2_bsl<mode>, aarch64_sve2_nbsl<mode>)\n\t(aarch64_sve2_bsl1n<mode>, aarch64_sve2_bsl2n<mode>):\n\tNew combine patterns.\n\t* config/aarch64/iterators.md (BSL_DUP): New int iterator for the\n\tabove.\n\t(bsl_1st, bsl_2nd, bsl_dup, bsl_mov): Attributes for the above.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve2/eor3_1.c: New test.\n\t* gcc.target/aarch64/sve2/nlogic_1.c: As above.\n\t* gcc.target/aarch64/sve2/nlogic_2.c: As above.\n\t* gcc.target/aarch64/sve2/bitsel_1.c: As above.\n\t* gcc.target/aarch64/sve2/bitsel_2.c: As above.\n\t* gcc.target/aarch64/sve2/bitsel_3.c: As above.\n\t* gcc.target/aarch64/sve2/bitsel_4.c: As above.\n\nFrom-SVN: r277110", "tree": {"sha": "f6350632f43285714ca4ca45428d2d9eb4e72ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6350632f43285714ca4ca45428d2d9eb4e72ad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/comments", "author": null, "committer": null, "parents": [{"sha": "9309a5470833460a6ee80cfa422b5258411be29e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9309a5470833460a6ee80cfa422b5258411be29e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9309a5470833460a6ee80cfa422b5258411be29e"}], "stats": {"total": 351, "additions": 351, "deletions": 0}, "files": [{"sha": "7eb331d60f5747fedbe8733a4eff43ecd115ed02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "patch": "@@ -1,3 +1,14 @@\n+2019-10-17  Yuliang Wang  <yuliang.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-sve2.md (aarch64_sve2_eor3<mode>)\n+\t(aarch64_sve2_nor<mode>, aarch64_sve2_nand<mode>)\n+\t(aarch64_sve2_bsl<mode>, aarch64_sve2_nbsl<mode>)\n+\t(aarch64_sve2_bsl1n<mode>, aarch64_sve2_bsl2n<mode>):\n+\tNew combine patterns.\n+\t* config/aarch64/iterators.md (BSL_DUP): New int iterator for the\n+\tabove.\n+\t(bsl_1st, bsl_2nd, bsl_dup, bsl_mov): Attributes for the above.\n+\n 2019-10-17  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree-vrp.c (value_range_base::dump): Display +INF for both"}, {"sha": "ecbee9733f038b4b96d2da65086b414ff67f985a", "filename": "gcc/config/aarch64/aarch64-sve2.md", "status": "modified", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md?ref=2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "patch": "@@ -142,3 +142,187 @@\n   }\n )\n \n+;; Unpredicated 3-way exclusive OR.\n+(define_insn \"*aarch64_sve2_eor3<mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, w, ?&w\")\n+\t(xor:SVE_I\n+\t  (xor:SVE_I\n+\t    (match_operand:SVE_I 1 \"register_operand\" \"0, w, w, w\")\n+\t    (match_operand:SVE_I 2 \"register_operand\" \"w, 0, w, w\"))\n+\t  (match_operand:SVE_I 3 \"register_operand\" \"w, w, 0, w\")))]\n+  \"TARGET_SVE2\"\n+  \"@\n+  eor3\\t%0.d, %0.d, %2.d, %3.d\n+  eor3\\t%0.d, %0.d, %1.d, %3.d\n+  eor3\\t%0.d, %0.d, %1.d, %2.d\n+  movprfx\\t%0, %1\\;eor3\\t%0.d, %0.d, %2.d, %3.d\"\n+  [(set_attr \"movprfx\" \"*,*,*,yes\")]\n+)\n+\n+;; Use NBSL for vector NOR.\n+(define_insn_and_rewrite \"*aarch64_sve2_nor<mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand 3)\n+\t   (and:SVE_I\n+\t     (not:SVE_I\n+\t       (match_operand:SVE_I 1 \"register_operand\" \"%0, w\"))\n+\t     (not:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"w, w\")))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE2\"\n+  \"@\n+  nbsl\\t%0.d, %0.d, %2.d, %0.d\n+  movprfx\\t%0, %1\\;nbsl\\t%0.d, %0.d, %2.d, %0.d\"\n+  \"&& !CONSTANT_P (operands[3])\"\n+  {\n+    operands[3] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Use NBSL for vector NAND.\n+(define_insn_and_rewrite \"*aarch64_sve2_nand<mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand 3)\n+\t   (ior:SVE_I\n+\t     (not:SVE_I\n+\t       (match_operand:SVE_I 1 \"register_operand\" \"%0, w\"))\n+\t     (not:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"w, w\")))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE2\"\n+  \"@\n+  nbsl\\t%0.d, %0.d, %2.d, %2.d\n+  movprfx\\t%0, %1\\;nbsl\\t%0.d, %0.d, %2.d, %2.d\"\n+  \"&& !CONSTANT_P (operands[3])\"\n+  {\n+    operands[3] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Unpredicated bitwise select.\n+;; (op3 ? bsl_mov : bsl_dup) == (((bsl_mov ^ bsl_dup) & op3) ^ bsl_dup)\n+(define_insn \"*aarch64_sve2_bsl<mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(xor:SVE_I\n+\t  (and:SVE_I\n+\t    (xor:SVE_I\n+\t      (match_operand:SVE_I 1 \"register_operand\" \"<bsl_1st>, w\")\n+\t      (match_operand:SVE_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n+\t    (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t  (match_dup BSL_DUP)))]\n+  \"TARGET_SVE2\"\n+  \"@\n+  bsl\\t%0.d, %0.d, %<bsl_dup>.d, %3.d\n+  movprfx\\t%0, %<bsl_mov>\\;bsl\\t%0.d, %0.d, %<bsl_dup>.d, %3.d\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Unpredicated bitwise inverted select.\n+;; (~(op3 ? bsl_mov : bsl_dup)) == (~(((bsl_mov ^ bsl_dup) & op3) ^ bsl_dup))\n+(define_insn_and_rewrite \"*aarch64_sve2_nbsl<mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand 4)\n+\t   (not:SVE_I\n+\t     (xor:SVE_I\n+\t       (and:SVE_I\n+\t\t (xor:SVE_I\n+\t\t   (match_operand:SVE_I 1 \"register_operand\" \"<bsl_1st>, w\")\n+\t\t   (match_operand:SVE_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n+\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t       (match_dup BSL_DUP)))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE2\"\n+  \"@\n+  nbsl\\t%0.d, %0.d, %<bsl_dup>.d, %3.d\n+  movprfx\\t%0, %<bsl_mov>\\;nbsl\\t%0.d, %0.d, %<bsl_dup>.d, %3.d\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Unpredicated bitwise select with inverted first operand.\n+;; (op3 ? ~bsl_mov : bsl_dup) == ((~(bsl_mov ^ bsl_dup) & op3) ^ bsl_dup)\n+(define_insn_and_rewrite \"*aarch64_sve2_bsl1n<mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(xor:SVE_I\n+\t  (and:SVE_I\n+\t    (unspec:SVE_I\n+\t      [(match_operand 4)\n+\t       (not:SVE_I\n+\t\t (xor:SVE_I\n+\t\t   (match_operand:SVE_I 1 \"register_operand\" \"<bsl_1st>, w\")\n+\t\t   (match_operand:SVE_I 2 \"register_operand\" \"<bsl_2nd>, w\")))]\n+\t      UNSPEC_PRED_X)\n+\t    (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t  (match_dup BSL_DUP)))]\n+  \"TARGET_SVE2\"\n+  \"@\n+  bsl1n\\t%0.d, %0.d, %<bsl_dup>.d, %3.d\n+  movprfx\\t%0, %<bsl_mov>\\;bsl1n\\t%0.d, %0.d, %<bsl_dup>.d, %3.d\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Unpredicated bitwise select with inverted second operand.\n+;; (bsl_dup ? bsl_mov : ~op3) == ((bsl_dup & bsl_mov) | (~op3 & ~bsl_dup))\n+(define_insn_and_rewrite \"*aarch64_sve2_bsl2n<mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(ior:SVE_I\n+\t  (and:SVE_I\n+\t    (match_operand:SVE_I 1 \"register_operand\" \"<bsl_1st>, w\")\n+\t    (match_operand:SVE_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n+\t  (unspec:SVE_I\n+\t    [(match_operand 4)\n+\t     (and:SVE_I\n+\t       (not:SVE_I\n+\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t       (not:SVE_I\n+\t\t (match_dup BSL_DUP)))]\n+\t    UNSPEC_PRED_X)))]\n+  \"TARGET_SVE2\"\n+  \"@\n+  bsl2n\\t%0.d, %0.d, %3.d, %<bsl_dup>.d\n+  movprfx\\t%0, %<bsl_mov>\\;bsl2n\\t%0.d, %0.d, %3.d, %<bsl_dup>.d\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Unpredicated bitwise select with inverted second operand, alternative form.\n+;; (bsl_dup ? bsl_mov : ~op3) == ((bsl_dup & bsl_mov) | (~bsl_dup & ~op3))\n+(define_insn_and_rewrite \"*aarch64_sve2_bsl2n<mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(ior:SVE_I\n+\t  (and:SVE_I\n+\t    (match_operand:SVE_I 1 \"register_operand\" \"<bsl_1st>, w\")\n+\t    (match_operand:SVE_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n+\t  (unspec:SVE_I\n+\t    [(match_operand 4)\n+\t     (and:SVE_I\n+\t       (not:SVE_I\n+\t\t (match_dup BSL_DUP))\n+\t       (not:SVE_I\n+\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w\")))]\n+\t    UNSPEC_PRED_X)))]\n+  \"TARGET_SVE2\"\n+  \"@\n+  bsl2n\\t%0.d, %0.d, %3.d, %<bsl_dup>.d\n+  movprfx\\t%0, %<bsl_mov>\\;bsl2n\\t%0.d, %0.d, %3.d, %<bsl_dup>.d\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)"}, {"sha": "f879fadb007a23749a523edbe7fe247dee33fa94", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "patch": "@@ -1611,6 +1611,8 @@\n \n (define_int_iterator SHRNT [UNSPEC_SHRNT UNSPEC_RSHRNT])\n \n+(define_int_iterator BSL_DUP [1 2])\n+\n (define_int_iterator DOTPROD [UNSPEC_SDOT UNSPEC_UDOT])\n \n (define_int_iterator ADDSUBHN [UNSPEC_ADDHN UNSPEC_RADDHN\n@@ -1976,6 +1978,18 @@\n \t\t\t (UNSPEC_RADDHN2 \"add\")\n \t\t\t (UNSPEC_RSUBHN2 \"sub\")])\n \n+;; BSL variants: first commutative operand.\n+(define_int_attr bsl_1st [(1 \"w\") (2 \"0\")])\n+\n+;; BSL variants: second commutative operand.\n+(define_int_attr bsl_2nd [(1 \"0\") (2 \"w\")])\n+\n+;; BSL variants: duplicated input operand.\n+(define_int_attr bsl_dup [(1 \"1\") (2 \"2\")])\n+\n+;; BSL variants: operand which requires preserving via movprfx.\n+(define_int_attr bsl_mov [(1 \"2\") (2 \"1\")])\n+\n (define_int_attr offsetlr [(UNSPEC_SSLI \"\") (UNSPEC_USLI \"\")\n \t\t\t   (UNSPEC_SSRI \"offset_\")\n \t\t\t   (UNSPEC_USRI \"offset_\")])"}, {"sha": "5ea4a731243918e36a485a60eb647e4e68d54754", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "patch": "@@ -1,3 +1,13 @@\n+2019-10-17  Yuliang Wang  <yuliang.wang@arm.com>\n+\n+\t* gcc.target/aarch64/sve2/eor3_1.c: New test.\n+\t* gcc.target/aarch64/sve2/nlogic_1.c: As above.\n+\t* gcc.target/aarch64/sve2/nlogic_2.c: As above.\n+\t* gcc.target/aarch64/sve2/bitsel_1.c: As above.\n+\t* gcc.target/aarch64/sve2/bitsel_2.c: As above.\n+\t* gcc.target/aarch64/sve2/bitsel_3.c: As above.\n+\t* gcc.target/aarch64/sve2/bitsel_4.c: As above.\n+\n 2019-10-17  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gcc.dg/tree-ssa/evrp4.c: Check for +INF instead of -1."}, {"sha": "629f74167a015077113881573d84ecd94ef3d438", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/bitsel_1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbitsel_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbitsel_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbitsel_1.c?ref=2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef OP\n+#define OP(x,y,z) (((x) & (z)) | ((y) & ~(z)))\n+#endif\n+\n+#define TYPE(N) int##N##_t\n+\n+#define TEMPLATE(SIZE)\t\t\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\t\\\n+f_##SIZE##_##OP\t\t\t\t\t\t\t\\\n+  (TYPE(SIZE) *restrict a, TYPE(SIZE) *restrict b,\t\t\\\n+   TYPE(SIZE) *restrict c, TYPE(SIZE) *restrict d, int n)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; i++)\t\t\t\t\t\\\n+    a[i] = OP (b[i], c[i], d[i]);\t\t\t\t\\\n+}\n+\n+TEMPLATE (8);\n+TEMPLATE (16);\n+TEMPLATE (32);\n+TEMPLATE (64);\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 4 \"vect\" } } */\n+\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.[bhsd]} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.[bhsd]} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tbsl\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */"}, {"sha": "ee2d4a35a1dc4dfa2f8a8efef138aaae51f5c3bc", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/bitsel_2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbitsel_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbitsel_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbitsel_2.c?ref=2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n+\n+#define OP(x,y,z) (~(((x) & (z)) | ((y) & ~(z))))\n+\n+#include \"bitsel_1.c\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 4 \"vect\" } } */\n+\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.[bhsd]} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.[bhsd]} } } */\n+/* { dg-final { scan-assembler-not {\\tnot\\tz[0-9]+\\.[bhsd]} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tnbsl\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */"}, {"sha": "d0dc713d92c21394140b941b0768ab911f262823", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/bitsel_3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbitsel_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbitsel_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbitsel_3.c?ref=2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n+\n+#define OP(x,y,z) ((~(x) & (z)) | ((y) & ~(z)))\n+\n+#include \"bitsel_1.c\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 4 \"vect\" } } */\n+\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.[bhsd]} } } */\n+/* { dg-final { scan-assembler-not {\\tbic\\tz[0-9]+\\.[bhsd]} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tbsl1n\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */"}, {"sha": "5eb71c93ae7f37e3f7c4b35b396ac4acae940542", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/bitsel_4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbitsel_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbitsel_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fbitsel_4.c?ref=2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n+\n+#define OP(x,y,z) (((x) & (z)) | (~(y) & ~(z)))\n+\n+#include \"bitsel_1.c\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 4 \"vect\" } } */\n+\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.[bhsd]} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.[bhsd]} } } */\n+/* { dg-final { scan-assembler-not {\\tnot\\tz[0-9]+\\.[bhsd]} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tbsl2n\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */"}, {"sha": "13df93e56b1b6457d536d2983a9e1f50e3c6cbee", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/eor3_1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Feor3_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Feor3_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Feor3_1.c?ref=2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n+\n+#define OP(x,y,z) ((x) ^ (y) ^ (z))\n+\n+#include \"bitsel_1.c\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 4 \"vect\" } } */\n+\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.[bhsd]} } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor3\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */"}, {"sha": "de34b6d817a15175b7a4f8d11d30651af60a6236", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/nlogic_1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fnlogic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fnlogic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fnlogic_1.c?ref=2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef OP\n+#define OP(x,y) (~((x) | (y)))\n+#endif\n+\n+#define TYPE(N) int##N##_t\n+\n+#define TEMPLATE(SIZE)\t\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\\\n+f_##SIZE##_##OP\t\t\t\t\t\t\\\n+  (TYPE(SIZE) *restrict a, TYPE(SIZE) *restrict b,\t\\\n+   TYPE(SIZE) *restrict c, int n)\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; i++)\t\t\t\t\\\n+    a[i] = OP (b[i], c[i]);\t\t\t\t\\\n+}\n+\n+TEMPLATE (8);\n+TEMPLATE (16);\n+TEMPLATE (32);\n+TEMPLATE (64);\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 4 \"vect\" } } */\n+\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.[bhsd]} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.[bhsd]} } } */\n+/* { dg-final { scan-assembler-not {\\tnot\\tz[0-9]+\\.[bhsd]} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tnbsl\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */"}, {"sha": "14400b5713e0e0829fa993ba1d6ad6213ac9f69d", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/nlogic_2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fnlogic_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d57b12e2acd52b843adbcd6d5909cb0b9f7196b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fnlogic_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fnlogic_2.c?ref=2d57b12e2acd52b843adbcd6d5909cb0b9f7196b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n+\n+#define OP(x,y) (~((x) & (y)))\n+\n+#include \"nlogic_1.c\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 4 \"vect\" } } */\n+\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.[bhsd]} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.[bhsd]} } } */\n+/* { dg-final { scan-assembler-not {\\tnot\\tz[0-9]+\\.[bhsd]} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tnbsl\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */"}]}