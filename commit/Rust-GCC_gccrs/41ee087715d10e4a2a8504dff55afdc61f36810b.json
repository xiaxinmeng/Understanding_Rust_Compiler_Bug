{"sha": "41ee087715d10e4a2a8504dff55afdc61f36810b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlZTA4NzcxNWQxMGU0YTJhODUwNGRmZjU1YWZkYzYxZjM2ODEwYg==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-05-07T19:53:15Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-05-07T19:53:15Z"}, "message": "re PR java/2598 (Runtime crash regression accessing field from enclosing class from inner class)\n\n2001-05-07  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n        * parse.y (fix_constructors): Removed unecessary assignment to\n        local. Moved assignment to `this$<n>', fixed comments and\n        indentation.\n        (build_wfl_wrap): Fixed indentation.\n        Fixes PR java/2598, java/2579 and java/2658.\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-05/msg00412.html )\n\nFrom-SVN: r41905", "tree": {"sha": "8e7961fdbd0cebd3fef67ccd91a98e62bed10ab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e7961fdbd0cebd3fef67ccd91a98e62bed10ab4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41ee087715d10e4a2a8504dff55afdc61f36810b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ee087715d10e4a2a8504dff55afdc61f36810b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41ee087715d10e4a2a8504dff55afdc61f36810b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ee087715d10e4a2a8504dff55afdc61f36810b/comments", "author": null, "committer": null, "parents": [{"sha": "5c8cfcd63d875fee498d459317f66c32e37b1bad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8cfcd63d875fee498d459317f66c32e37b1bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8cfcd63d875fee498d459317f66c32e37b1bad"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "fc09afd787243397725d423ec98b258a0370b67b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41ee087715d10e4a2a8504dff55afdc61f36810b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41ee087715d10e4a2a8504dff55afdc61f36810b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=41ee087715d10e4a2a8504dff55afdc61f36810b", "patch": "@@ -1,3 +1,11 @@\n+2001-05-07  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* parse.y (fix_constructors): Removed unecessary assignment to\n+\tlocal. Moved assignment to `this$<n>', fixed comments and\n+\tindentation.\n+\t(build_wfl_wrap): Fixed indentation.\n+\tFixes PR java/2598, java/2579 and java/2658.\n+\n 2001-05-03  Mo DeJong  <mdejong@redhat.com>\n \n         * lex.c (java_new_lexer): Call iconv_close on temp handle used to"}, {"sha": "aaff8b4fd713cbc3ad28ff0fe87d275d67cfb02c", "filename": "gcc/java/parse.y", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41ee087715d10e4a2a8504dff55afdc61f36810b/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41ee087715d10e4a2a8504dff55afdc61f36810b/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=41ee087715d10e4a2a8504dff55afdc61f36810b", "patch": "@@ -8500,7 +8500,7 @@ fix_constructors (mdecl)\n       /* We don't generate a super constructor invocation if we're\n \t compiling java.lang.Object. build_super_invocation takes care\n \t of that. */\n-      compound = java_method_add_stmt (mdecl, build_super_invocation (mdecl));\n+      java_method_add_stmt (mdecl, build_super_invocation (mdecl));\n \n       /* Insert the instance initializer block right here, after the\n          super invocation. */\n@@ -8536,24 +8536,24 @@ fix_constructors (mdecl)\n \t    found = 0;\n \t    body = NULL_TREE;\n \t  }\n+\n+      /* Generate the assignment to this$<n>, if necessary */\n+      if ((thisn_assign = build_thisn_assign ()))\n+        compound = add_stmt_to_compound (compound, NULL_TREE, thisn_assign);\n+\n       /* The constructor is missing an invocation of super() */\n       if (!found)\n \tcompound = add_stmt_to_compound (compound, NULL_TREE,\n                                          build_super_invocation (mdecl));\n-\n-      /* Explicit super() invokation should be kept as the first\n-         statement, we move it. */\n+      /* Explicit super() invokation should take place before the\n+         instance initializer blocks. */\n       else\n \t{\n \t  compound = add_stmt_to_compound (compound, NULL_TREE,\n \t\t\t\t\t   TREE_OPERAND (found_call, 0));\n \t  TREE_OPERAND (found_call, 0) = empty_stmt_node;\n \t}\n       \n-      /* Generate the assignment to this$<n>, if necessary */\n-      if ((thisn_assign = build_thisn_assign ()))\n-        compound = add_stmt_to_compound (compound, NULL_TREE, thisn_assign);\n-\n       /* Insert the instance initializer block right after. */\n       if ((ii = build_instance_initializer (mdecl)))\n \tcompound = add_stmt_to_compound (compound, NULL_TREE, ii);\n@@ -10110,7 +10110,7 @@ patch_method_invocation (patch, primary, where, from_super,\n       /* Prepare to pass hidden parameters to finit$, if any. */\n       finit_parms = build_alias_initializer_parameter_list \n \t(AIPL_FUNCTION_FINIT_INVOCATION, current_class, NULL_TREE, NULL);\n-\n+      \n       finit_call = \n \tbuild_method_invocation (build_wfl_node (finit_identifier_node),\n \t\t\t\t finit_parms);\n@@ -11973,6 +11973,7 @@ maybe_absorb_scoping_blocks ()\n    are completing them.  */\n \n /* Wrap a non WFL node around a WFL.  */\n+\n static tree\n build_wfl_wrap (node, location)\n     tree node;\n@@ -11993,7 +11994,6 @@ build_wfl_wrap (node, location)\n   return wfl;\n }\n \n-\n /* Build a super() constructor invocation. Returns empty_stmt_node if\n    we're currently dealing with the class java.lang.Object. */\n "}]}