{"sha": "c29c92c789d93848cc1c929838771bfc68cb272c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5YzkyYzc4OWQ5Mzg0OGNjMWM5Mjk4Mzg3NzFiZmM2OGNiMjcyYw==", "commit": {"author": {"name": "Feng Xue", "email": "fxue@os.amperecomputing.com", "date": "2019-06-13T04:17:42Z"}, "committer": {"name": "Feng Xue", "email": "fxue@gcc.gnu.org", "date": "2019-06-13T04:17:42Z"}, "message": "PR tree-optimization/89713 - Assume loop with an exit is finite\n\ngcc/ChangeLog:\n\n        * doc/invoke.texi (-ffinite-loops): Document new option.\n        * common.opt (-ffinite-loops): New option.\n        * tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Mark\n        IFN_GOACC_LOOP calls as necessary.\n        * tree-ssa-loop-niter.c (finite_loop_p): Assume loop with an exit\n        is finite.\n        * omp-offload.c (oacc_xform_loop): Skip lowering if return value of\n        IFN_GOACC_LOOP call is not used.\n        * opts.c (default_options_table): Enable -ffinite-loops at -O2+.\n\ngcc/testsuite/ChangeLog:\n\n        * g++.dg/tree-ssa/empty-loop.C: New test.\n        * gcc.dg/tree-ssa/dce-2.c: New test.\n        * gcc.dg/const-1.c: Add -fno-finite-loops option.\n        * gcc.dg/graphite/graphite.exp: Likewise.\n        * gcc.dg/loop-unswitch-1.c: Likewise.\n        * gcc.dg/predict-9.c: Likewise.\n        * gcc.dg/pure-2.c: Likewise.\n        * gcc.dg/tree-ssa/20040211-1.c: Likewise.\n        * gcc.dg/tree-ssa/loop-10.c: Likewise.\n        * gcc.dg/tree-ssa/split-path-6.c: Likewise.\n        * gcc.dg/tree-ssa/ssa-thread-12.c: Likewise.\n\nlibgomp/ChangeLog:\n\n        * testsuite/libgomp.oacc-c-c++-common/pr84955-1.c: New test.\n\nFrom-SVN: r272234", "tree": {"sha": "10a08875fb9bec9119ac6c0fa419923b9ac48654", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10a08875fb9bec9119ac6c0fa419923b9ac48654"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c29c92c789d93848cc1c929838771bfc68cb272c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29c92c789d93848cc1c929838771bfc68cb272c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c29c92c789d93848cc1c929838771bfc68cb272c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29c92c789d93848cc1c929838771bfc68cb272c/comments", "author": {"login": "feng-xue-ampere", "id": 95893536, "node_id": "U_kgDOBbc4IA", "avatar_url": "https://avatars.githubusercontent.com/u/95893536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feng-xue-ampere", "html_url": "https://github.com/feng-xue-ampere", "followers_url": "https://api.github.com/users/feng-xue-ampere/followers", "following_url": "https://api.github.com/users/feng-xue-ampere/following{/other_user}", "gists_url": "https://api.github.com/users/feng-xue-ampere/gists{/gist_id}", "starred_url": "https://api.github.com/users/feng-xue-ampere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feng-xue-ampere/subscriptions", "organizations_url": "https://api.github.com/users/feng-xue-ampere/orgs", "repos_url": "https://api.github.com/users/feng-xue-ampere/repos", "events_url": "https://api.github.com/users/feng-xue-ampere/events{/privacy}", "received_events_url": "https://api.github.com/users/feng-xue-ampere/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b884225bfc609606f9b169b021c4da93feba48e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b884225bfc609606f9b169b021c4da93feba48e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b884225bfc609606f9b169b021c4da93feba48e"}], "stats": {"total": 211, "additions": 201, "deletions": 10}, "files": [{"sha": "efb3b7361f281840da5edca80225dc13767f63a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -1,3 +1,16 @@\n+2019-06-13  Feng Xue  <fxue@os.amperecomputing.com>\n+\n+\tPR tree-optimization/89713\n+\t* doc/invoke.texi (-ffinite-loops): Document new option.\n+\t* common.opt (-ffinite-loops): New option.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Mark\n+\tIFN_GOACC_LOOP calls as necessary.\n+\t* tree-ssa-loop-niter.c (finite_loop_p): Assume loop with an exit\n+\tis finite.\n+\t* omp-offload.c (oacc_xform_loop): Skip lowering if return value of\n+\tIFN_GOACC_LOOP call is not used.\n+\t* opts.c (default_options_table): Enable -ffinite-loops at -O2+.\n+\n 2019-06-13  Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n \n \tPR target/88838"}, {"sha": "a1544d06824eebf41a76e014c98b949933f18752", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -1437,6 +1437,10 @@ ffinite-math-only\n Common Report Var(flag_finite_math_only) Optimization SetByCombined\n Assume no NaNs or infinities are generated.\n \n+ffinite-loops\n+Common Report Var(flag_finite_loops) Optimization\n+Assume that loops with an exit will terminate and not loop indefinitely.\n+\n ffixed-\n Common Joined RejectNegative Var(common_deferred_options) Defer\n -ffixed-<register>\tMark <register> as being unavailable to the compiler."}, {"sha": "bf9da0f0a6eb9eaebeb0cb9acefcd9784be23dd0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -413,6 +413,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdevirtualize-at-ltrans  -fdse @gol\n -fearly-inlining  -fipa-sra  -fexpensive-optimizations  -ffat-lto-objects @gol\n -ffast-math  -ffinite-math-only  -ffloat-store  -fexcess-precision=@var{style} @gol\n+-ffinite-loops @gol\n -fforward-propagate  -ffp-contract=@var{style}  -ffunction-sections @gol\n -fgcse  -fgcse-after-reload  -fgcse-las  -fgcse-lm  -fgraphite-identity @gol\n -fgcse-sm  -fhoist-adjacent-loads  -fif-conversion @gol\n@@ -8303,6 +8304,7 @@ also turns on the following optimization flags:\n -fdelete-null-pointer-checks @gol\n -fdevirtualize  -fdevirtualize-speculatively @gol\n -fexpensive-optimizations @gol\n+-ffinite-loops @gol\n -fgcse  -fgcse-lm  @gol\n -fhoist-adjacent-loads @gol\n -finline-small-functions @gol\n@@ -9524,6 +9526,15 @@ that may set @code{errno} but are otherwise free of side effects.  This flag is\n enabled by default at @option{-O2} and higher if @option{-Os} is not also\n specified.\n \n+@item -ffinite-loops\n+@opindex ffinite-loops\n+@opindex fno-finite-loops\n+Assume that a loop with an exit will eventually take the exit and not loop\n+indefinitely.  This allows the compiler to remove loops that otherwise have\n+no side-effects, not considering eventual endless looping as such.\n+\n+This option is enabled by default at @option{-O2}.\n+\n @item -ftree-dominator-opts\n @opindex ftree-dominator-opts\n Perform a variety of simple scalar cleanups (constant/copy"}, {"sha": "c8a281c6d28c9aac3e0ad33554d2c02877d7495a", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -300,14 +300,23 @@ oacc_xform_loop (gcall *call)\n   tree chunk_size = NULL_TREE;\n   unsigned mask = (unsigned) TREE_INT_CST_LOW (gimple_call_arg (call, 5));\n   tree lhs = gimple_call_lhs (call);\n-  tree type = TREE_TYPE (lhs);\n+  tree type = NULL_TREE;\n   tree diff_type = TREE_TYPE (range);\n   tree r = NULL_TREE;\n   gimple_seq seq = NULL;\n   bool chunking = false, striding = true;\n   unsigned outer_mask = mask & (~mask + 1); // Outermost partitioning\n   unsigned inner_mask = mask & ~outer_mask; // Inner partitioning (if any)\n \n+  /* Skip lowering if return value of IFN_GOACC_LOOP call is not used.  */\n+  if (!lhs)\n+    {\n+      gsi_replace_with_seq (&gsi, seq, true);\n+      return;\n+    }\n+\n+  type = TREE_TYPE (lhs);\n+\n #ifdef ACCEL_COMPILER\n   chunk_size = gimple_call_arg (call, 4);\n   if (integer_minus_onep (chunk_size)  /* Force static allocation.  */"}, {"sha": "b38bfb15a56b82cd63d2b378582fb527ed4df7bd", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -494,6 +494,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_2_PLUS, OPT_fdevirtualize, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fdevirtualize_speculatively, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fexpensive_optimizations, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_ffinite_loops, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fgcse, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fhoist_adjacent_loads, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_findirect_inlining, NULL, 1 },"}, {"sha": "f82dc9e09edc8911b91039a6a8cf255faa8141a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -1,3 +1,18 @@\n+2019-06-13  Feng Xue  <fxue@os.amperecomputing.com>\n+\n+\tPR tree-optimization/89713\n+\t* g++.dg/tree-ssa/empty-loop.C: New test.\n+\t* gcc.dg/tree-ssa/dce-2.c: New test.\n+\t* gcc.dg/const-1.c: Add -fno-finite-loops option.\n+\t* gcc.dg/graphite/graphite.exp: Likewise.\n+\t* gcc.dg/loop-unswitch-1.c: Likewise.\n+\t* gcc.dg/predict-9.c: Likewise.\n+\t* gcc.dg/pure-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/20040211-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-10.c: Likewise.\n+\t* gcc.dg/tree-ssa/split-path-6.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-thread-12.c: Likewise.\n+\n 2019-06-13  Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n \n \tPR target/88838"}, {"sha": "6b1e879e6a987965623db525f07a5f7e498e9a7e", "filename": "gcc/testsuite/g++.dg/tree-ssa/empty-loop.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fempty-loop.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fempty-loop.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fempty-loop.C?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cddce2 -ffinite-loops\" } */\n+\n+#include <string>\n+#include <vector>\n+#include <list>\n+#include <set>\n+#include <map>\n+\n+using namespace std;\n+\n+int foo (vector<string> &v, list<string> &l, set<string> &s, map<int, string> &m)\n+{\n+  for (vector<string>::iterator it = v.begin (); it != v.end (); ++it)\n+    it->length();\n+\n+  for (list<string>::iterator it = l.begin (); it != l.end (); ++it)\n+    it->length();\n+\n+  for (map<int, string>::iterator it = m.begin (); it != m.end (); ++it)\n+    it->first + it->second.length();\n+\n+  for (set<string>::iterator it0 = s.begin (); it0 != s.end(); ++it0)\n+    for (vector<string>::reverse_iterator it1 = v.rbegin(); it1 != v.rend(); ++it1)\n+      {\n+        it0->length();\n+        it1->length();\n+      }  \n+\n+  return 0;\n+}\n+/* { dg-final { scan-tree-dump-not \"if\" \"cddce2\"} } */\n+"}, {"sha": "2e95bd8e2eac640bba0c424e38cbc730215f15d8", "filename": "gcc/testsuite/gcc.dg/const-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-1.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target nonpic } } */\n-/* { dg-options \"-O2 -Wsuggest-attribute=const\" } */\n+/* { dg-options \"-O2 -Wsuggest-attribute=const -fno-finite-loops\" } */\n \n extern int extern_const(int a) __attribute__ ((const));\n "}, {"sha": "523a955e82d779d95da43009e53f5717afa9988d", "filename": "gcc/testsuite/gcc.dg/graphite/graphite.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite.exp?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -56,7 +56,7 @@ set vect_files        [lsort [glob -nocomplain $srcdir/$subdir/vect-*.c ] ]\n \n # Tests to be compiled.\n set dg-do-what-default compile\n-dg-runtest $scop_files        \"\" \"-O2 -fgraphite -fdump-tree-graphite-all\"\n+dg-runtest $scop_files        \"\" \"-O2 -fgraphite -fdump-tree-graphite-all -fno-finite-loops\"\n dg-runtest $id_files          \"\" \"-O2 -fgraphite-identity -ffast-math -fdump-tree-graphite-details\"\n \n # Tests to be run."}, {"sha": "de2fb2c0e4bcf9aca5a184d8bd04a383d1097079", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-1.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -1,6 +1,6 @@\n /* For PR rtl-optimization/27735  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-details\" } */\n+/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-details -fno-finite-loops\" } */\n \n void set_color(void);\n void xml_colorize_line(unsigned int *p, int state)"}, {"sha": "f491c511bd9d6ee558fdc581ec9b517e6596d41e", "filename": "gcc/testsuite/gcc.dg/predict-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-9.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-profile_estimate\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-profile_estimate -fno-finite-loops\" } */\n \n extern int global;\n extern int global2;"}, {"sha": "318cfd186302962253a1457359b775e6be233e83", "filename": "gcc/testsuite/gcc.dg/pure-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Fpure-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Fpure-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpure-2.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Wsuggest-attribute=pure\" } */\n+/* { dg-options \"-O2 -Wsuggest-attribute=pure -fno-finite-loops\" } */\n /* { dg-add-options bind_pic_locally } */\n \n extern int extern_const(int a) __attribute__ ((pure));"}, {"sha": "a9bdf26931aa758d85aee6174af37af5156eba7d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040211-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040211-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040211-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040211-1.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-cddce2\" } */\n+/* { dg-options \"-O2 -fdump-tree-cddce2 -fno-finite-loops\" } */\n \n struct rtx_def;\n typedef struct rtx_def *rtx;"}, {"sha": "18c1ddb819eb7a444de31c9eec93ab0fd96cc926", "filename": "gcc/testsuite/gcc.dg/tree-ssa/dce-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdce-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdce-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdce-2.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cddce1 -ffinite-loops\" } */\n+\n+typedef struct list {\n+    char pad[15];\n+    struct list *next;\n+} list;\n+\n+int data;\n+\n+list *head, *tail;\n+\n+int __attribute__((pure)) pfn (int);\n+\n+int foo (unsigned u, int s)\n+{\n+  unsigned i;\n+  list *p;\n+  int j;\n+\n+  for (i = 0; i < u; i += 2)\n+    ;\n+\n+  for (p = head; p; p = p->next)\n+    ;\n+\n+  for (j = data; j & s; j = pfn (j + 3))\n+    ;\n+\n+  for (p = head; p != tail; p = p->next)\n+    for (j = data + 1; j > s; j = pfn (j + 2))\n+      ;\n+\n+  return 0;\n+}\n+/* { dg-final { scan-tree-dump-not \"if\" \"cddce1\"} } */\n+"}, {"sha": "3d05ad2d0737cf51be6a879e17220a1fa62244ec", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-10.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fno-finite-loops\" } */\n /* { dg-require-effective-target int32plus } */\n \n int bar (void);"}, {"sha": "187c08407d5583699f6bd2c43d3c9211cab25b75", "filename": "gcc/testsuite/gcc.dg/tree-ssa/split-path-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-6.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fsplit-paths -fno-tree-cselim -fdump-tree-split-paths-details -w\" } */\n+/* { dg-options \"-O2 -fsplit-paths -fno-tree-cselim -fdump-tree-split-paths-details -w -fno-finite-loops\" } */\n \n struct __sFILE\n {"}, {"sha": "67526762f2c1aa98f333e1a5fbd9fc346d3e66f4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-thread2-details -fdump-tree-thread3-details -fdump-tree-thread4-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread2-details -fdump-tree-thread3-details -fdump-tree-thread4-details -fno-finite-loops\" } */\n /* { dg-final { scan-tree-dump \"FSM\" \"thread2\" } } */\n /* { dg-final { scan-tree-dump \"FSM\" \"thread3\" } } */\n /* { dg-final { scan-tree-dump \"FSM\" \"thread4\" { xfail *-*-* } } } */"}, {"sha": "a38899edd6cfd62b18faee8f96183b1283c3b0f2", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -245,6 +245,17 @@ mark_stmt_if_obviously_necessary (gimple *stmt, bool aggressive)\n \t    mark_stmt_necessary (stmt, true);\n \t    return;\n \t  }\n+\t/* IFN_GOACC_LOOP calls are necessary in that they are used to\n+\t   represent parameter (i.e. step, bound) of a lowered OpenACC\n+\t   partitioned loop.  But this kind of partitioned loop might not\n+\t   survive from aggressive loop removal for it has loop exit and\n+\t   is assumed to be finite.  Therefore, we need to explicitly mark\n+\t   these calls. (An example is libgomp.oacc-c-c++-common/pr84955.c) */\n+\tif (gimple_call_internal_p (stmt, IFN_GOACC_LOOP))\n+\t  {\n+\t    mark_stmt_necessary (stmt, true);\n+\t    return;\n+\t  }\n \tif (!gimple_call_lhs (stmt))\n \t  return;\n \tbreak;"}, {"sha": "f51385900ed491c62aab69e747289e92571e2a2c", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -2830,6 +2830,27 @@ finite_loop_p (struct loop *loop)\n \t\t loop->num);\n       return true;\n     }\n+\n+  if (flag_finite_loops)\n+    {\n+      unsigned i;\n+      vec<edge> exits = get_loop_exit_edges (loop);\n+      edge ex;\n+\n+      /* If the loop has a normal exit, we can assume it will terminate.  */\n+      FOR_EACH_VEC_ELT (exits, i, ex)\n+\tif (!(ex->flags & (EDGE_EH | EDGE_ABNORMAL | EDGE_FAKE)))\n+\t  {\n+\t    exits.release ();\n+\t    if (dump_file)\n+\t      fprintf (dump_file, \"Assume loop %i to be finite: it has an exit \"\n+\t\t       \"and -ffinite-loops is on.\\n\", loop->num);\n+\t    return true;\n+\t  }\n+\n+      exits.release ();\n+    }\n+\n   return false;\n }\n "}, {"sha": "35fe54851f930f9b9c24eee7e5ad8bd2ab7a3535", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -1,3 +1,8 @@\n+2019-06-13  Feng Xue  <fxue@os.amperecomputing.com>\n+\n+\tPR tree-optimization/89713\n+\t* testsuite/libgomp.oacc-c-c++-common/pr84955-1.c: New test.\n+\n 2019-06-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/90811"}, {"sha": "44767cd27c32b8ed4e5f90b801a885dc73a85409", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr84955-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c92c789d93848cc1c929838771bfc68cb272c/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr84955-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c92c789d93848cc1c929838771bfc68cb272c/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr84955-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr84955-1.c?ref=c29c92c789d93848cc1c929838771bfc68cb272c", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -fdump-tree-cddce2 -ffinite-loops\" } */\n+\n+int\n+f1 (void)\n+{\n+  int i, j;\n+\n+#pragma acc parallel loop tile(2,3)\n+  for (i = 1; i < 10; i++)\n+    for (j = 1; j < 10; j++)\n+      for (;;)\n+\t;\n+\n+  return i + j;\n+}\n+\n+int\n+f2 (void)\n+{\n+  int i, j, k;\n+\n+#pragma acc parallel loop tile(2,3)\n+  for (i = 1; i < 10; i++)\n+    for (j = 1; j < 10; j++)\n+      for (k = 1; k < 10; k++)\n+\t;\n+\n+  return i + j;\n+}\n+/* { dg-final { scan-tree-dump-not \"if\" \"cddce2\"} } */"}]}