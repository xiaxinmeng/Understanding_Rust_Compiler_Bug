{"sha": "bb4d170d7b43be4b28ef20978ab2b453f6f2c55d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI0ZDE3MGQ3YjQzYmU0YjI4ZWYyMDk3OGFiMmI0NTNmNmYyYzU1ZA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2019-08-30T08:08:42Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-08-30T08:08:42Z"}, "message": "[PR 91579] Avoid creating redundant PHI nodes in tail-call pass\n\n2019-08-30  Martin Jambor  <mjambor@suse.cz>\n\n\ttree-optimization/91579\n\t* tree-tailcall.c (tailr_arg_needs_copy): New variable.\n\t(find_tail_calls): Allocate tailr_arg_needs_copy and set its bits as\n\tappropriate.\n\t(arg_needs_copy_p): Removed.\n\t(eliminate_tail_call): Test tailr_arg_needs_copy instead of calling\n\targ_needs_copy_p.\n\t(tree_optimize_tail_calls_1): Likewise.  Free tailr_arg_needs_copy.\n\n\ttestsuite/\n\t* gcc.dg/tree-ssa/pr91579.c: New test.\n\nFrom-SVN: r275062", "tree": {"sha": "394953a5970e622f04c96ee0a7aec0a73949f6c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/394953a5970e622f04c96ee0a7aec0a73949f6c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ffb738a286543a47682c72a9410eae3f85872580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb738a286543a47682c72a9410eae3f85872580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb738a286543a47682c72a9410eae3f85872580"}], "stats": {"total": 86, "additions": 63, "deletions": 23}, "files": [{"sha": "57811a5f94618295c0b0dfc50ede5500cd147716", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb4d170d7b43be4b28ef20978ab2b453f6f2c55d", "patch": "@@ -1,3 +1,14 @@\n+2019-08-30  Martin Jambor  <mjambor@suse.cz>\n+\n+\ttree-optimization/91579\n+\t* tree-tailcall.c (tailr_arg_needs_copy): New variable.\n+\t(find_tail_calls): Allocate tailr_arg_needs_copy and set its bits as\n+\tappropriate.\n+\t(arg_needs_copy_p): Removed.\n+\t(eliminate_tail_call): Test tailr_arg_needs_copy instead of calling\n+\targ_needs_copy_p.\n+\t(tree_optimize_tail_calls_1): Likewise.  Free tailr_arg_needs_copy.\n+\n 2019-08-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386-features.c"}, {"sha": "0c5ec5325f5c12f76aafbd188fd4721abaf246df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb4d170d7b43be4b28ef20978ab2b453f6f2c55d", "patch": "@@ -1,3 +1,8 @@\n+2019-08-30  Martin Jambor  <mjambor@suse.cz>\n+\n+\ttree-optimization/91579\n+\t* gcc.dg/tree-ssa/pr91579.c: New test.\n+\n 2019-08-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/91560"}, {"sha": "ee752be1a85fc70eee3d51a98061f30073152fe1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr91579.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr91579.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr91579.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr91579.c?ref=bb4d170d7b43be4b28ef20978ab2b453f6f2c55d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-tailr1\" } */\n+\n+typedef long unsigned int size_t;\n+typedef int (*compare_t)(const void *, const void *);\n+\n+int partition (void *base, size_t nmemb, size_t size, compare_t cmp);\n+\n+void\n+my_qsort (void *base, size_t nmemb, size_t size, compare_t cmp)\n+{\n+  int pt;\n+  if (nmemb > 1)\n+    {\n+      pt = partition (base, nmemb, size, cmp);\n+      my_qsort (base, pt + 1, size, cmp);\n+      my_qsort ((void*)((char*) base + (pt + 1) * size),\n+\t\tnmemb - pt - 1, size, cmp);\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"cmp\\[^\\r\\n\\]*PHI\" \"tailr1\" } } */"}, {"sha": "4824a5e650fbc87ebb36787025c01371d8793415", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb4d170d7b43be4b28ef20978ab2b453f6f2c55d/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=bb4d170d7b43be4b28ef20978ab2b453f6f2c55d", "patch": "@@ -126,6 +126,11 @@ struct tailcall\n    accumulator.  */\n static tree m_acc, a_acc;\n \n+/* Bitmap with a bit for each function parameter which is set to true if we\n+   have to copy the parameter for conversion of tail-recursive calls.  */\n+\n+static bitmap tailr_arg_needs_copy;\n+\n static bool optimize_tail_call (struct tailcall *, bool);\n static void eliminate_tail_call (struct tailcall *);\n \n@@ -727,6 +732,18 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n \t  gimple_stmt_iterator mgsi = gsi_for_stmt (stmt);\n \t  gsi_move_before (&mgsi, &gsi);\n \t}\n+      if (!tailr_arg_needs_copy)\n+\ttailr_arg_needs_copy = BITMAP_ALLOC (NULL);\n+      for (param = DECL_ARGUMENTS (current_function_decl), idx = 0;\n+\t   param;\n+\t   param = DECL_CHAIN (param), idx++)\n+\t{\n+\t  tree ddef, arg = gimple_call_arg (call, idx);\n+\t  if (is_gimple_reg (param)\n+\t      && (ddef = ssa_default_def (cfun, param))\n+\t      && (arg != ddef))\n+\t    bitmap_set_bit (tailr_arg_needs_copy, idx);\n+\t}\n     }\n \n   nw = XNEW (struct tailcall);\n@@ -905,25 +922,6 @@ decrease_profile (basic_block bb, profile_count count)\n     }\n }\n \n-/* Returns true if argument PARAM of the tail recursive call needs to be copied\n-   when the call is eliminated.  */\n-\n-static bool\n-arg_needs_copy_p (tree param)\n-{\n-  tree def;\n-\n-  if (!is_gimple_reg (param))\n-    return false;\n-\n-  /* Parameters that are only defined but never used need not be copied.  */\n-  def = ssa_default_def (cfun, param);\n-  if (!def)\n-    return false;\n-\n-  return true;\n-}\n-\n /* Eliminates tail call described by T.  TMP_VARS is a list of\n    temporary variables used to copy the function arguments.  */\n \n@@ -1005,7 +1003,7 @@ eliminate_tail_call (struct tailcall *t)\n        param;\n        param = DECL_CHAIN (param), idx++)\n     {\n-      if (!arg_needs_copy_p (param))\n+      if (!bitmap_bit_p (tailr_arg_needs_copy, idx))\n \tcontinue;\n \n       arg = gimple_call_arg (stmt, idx);\n@@ -1139,10 +1137,11 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t      split_edge (single_succ_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun)));\n \n \t  /* Copy the args if needed.  */\n-\t  for (param = DECL_ARGUMENTS (current_function_decl);\n+\t  unsigned idx;\n+\t  for (param = DECL_ARGUMENTS (current_function_decl), idx = 0;\n \t       param;\n-\t       param = DECL_CHAIN (param))\n-\t    if (arg_needs_copy_p (param))\n+\t       param = DECL_CHAIN (param), idx++)\n+\t    if (bitmap_bit_p (tailr_arg_needs_copy, idx))\n \t      {\n \t\ttree name = ssa_default_def (cfun, param);\n \t\ttree new_name = make_ssa_name (param, SSA_NAME_DEF_STMT (name));\n@@ -1206,6 +1205,9 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n   if (phis_constructed)\n     mark_virtual_operands_for_renaming (cfun);\n \n+  if (tailr_arg_needs_copy)\n+    BITMAP_FREE (tailr_arg_needs_copy);\n+\n   if (changed)\n     return TODO_cleanup_cfg | TODO_update_ssa_only_virtuals;\n   return 0;"}]}