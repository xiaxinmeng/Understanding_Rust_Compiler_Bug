{"sha": "20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBkZWQ3YTY4YjEwZjljMmQxYWFhOTRlODlkZjQ5NGJmMGNlNDFhMA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2008-10-29T17:05:42Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2008-10-29T17:05:42Z"}, "message": "re PR middle-end/36578 (cast to long double not taken into account when result stored to a double)\n\n\tPR middle-end/36578\n\t* convert.c (convert_to_real): Do not optimize conversions of\n\tbinary arithmetic operations between binary and decimal\n\tfloating-point types.  Consider mode of target type in determining\n\tdecimal type for arithmetic.  Unless\n\tflag_unsafe_math_optimizations, do not optimize binary conversions\n\twhere this may change rounding behavior.\n\t* real.c (real_can_shorten_arithmetic): New.\n\t* real.h (real_can_shorten_arithmetic): Declare.\n\ntestsuite:\n\t* gcc.dg/dfp/convert-bfp-13.c, gcc.dg/dfp/convert-bfp-14.c,\n\tgcc.dg/dfp/convert-dfp-fold-2.c, gcc.target/i386/pr36578-1.c,\n\tgcc.target/i386/pr36578-2.c: New tests.\n\nFrom-SVN: r141432", "tree": {"sha": "f0bc48b745fe374d4990579d0ef02a2d88bb7799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0bc48b745fe374d4990579d0ef02a2d88bb7799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "669eeb28eaad6f3cb79d48a5e4176775befe0429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669eeb28eaad6f3cb79d48a5e4176775befe0429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/669eeb28eaad6f3cb79d48a5e4176775befe0429"}], "stats": {"total": 191, "additions": 186, "deletions": 5}, "files": [{"sha": "1270ebc5f2835ccfd2fe5bd16cb4a436f9a46fff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "patch": "@@ -1,3 +1,15 @@\n+2008-10-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/36578\n+\t* convert.c (convert_to_real): Do not optimize conversions of\n+\tbinary arithmetic operations between binary and decimal\n+\tfloating-point types.  Consider mode of target type in determining\n+\tdecimal type for arithmetic.  Unless\n+\tflag_unsafe_math_optimizations, do not optimize binary conversions\n+\twhere this may change rounding behavior.\n+\t* real.c (real_can_shorten_arithmetic): New.\n+\t* real.h (real_can_shorten_arithmetic): Declare.\n+\n 2008-10-29  Bernd Schmidt  <bernd.schmidt@analog.com>\n \t\n \t* config/bfin/bfin-protos.h (WA_05000257, WA_05000283, WA_05000315,"}, {"sha": "1a462e7626f52501627abca9016c87bec635713a", "filename": "gcc/convert.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "patch": "@@ -263,18 +263,22 @@ convert_to_real (tree type, tree expr)\n \t     tree arg1 = strip_float_extensions (TREE_OPERAND (expr, 1));\n \n \t     if (FLOAT_TYPE_P (TREE_TYPE (arg0))\n-\t\t && FLOAT_TYPE_P (TREE_TYPE (arg1)))\n+\t\t && FLOAT_TYPE_P (TREE_TYPE (arg1))\n+\t\t && DECIMAL_FLOAT_TYPE_P (itype) == DECIMAL_FLOAT_TYPE_P (type))\n \t       {\n \t\t  tree newtype = type;\n \n \t\t  if (TYPE_MODE (TREE_TYPE (arg0)) == SDmode\n-\t\t      || TYPE_MODE (TREE_TYPE (arg1)) == SDmode)\n+\t\t      || TYPE_MODE (TREE_TYPE (arg1)) == SDmode\n+\t\t      || TYPE_MODE (type) == SDmode)\n \t\t    newtype = dfloat32_type_node;\n \t\t  if (TYPE_MODE (TREE_TYPE (arg0)) == DDmode\n-\t\t      || TYPE_MODE (TREE_TYPE (arg1)) == DDmode)\n+\t\t      || TYPE_MODE (TREE_TYPE (arg1)) == DDmode\n+\t\t      || TYPE_MODE (type) == DDmode)\n \t\t    newtype = dfloat64_type_node;\n \t\t  if (TYPE_MODE (TREE_TYPE (arg0)) == TDmode\n-\t\t      || TYPE_MODE (TREE_TYPE (arg1)) == TDmode)\n+\t\t      || TYPE_MODE (TREE_TYPE (arg1)) == TDmode\n+\t\t      || TYPE_MODE (type) == TDmode)\n                     newtype = dfloat128_type_node;\n \t\t  if (newtype == dfloat32_type_node\n \t\t      || newtype == dfloat64_type_node\n@@ -292,7 +296,32 @@ convert_to_real (tree type, tree expr)\n \t\t    newtype = TREE_TYPE (arg0);\n \t\t  if (TYPE_PRECISION (TREE_TYPE (arg1)) > TYPE_PRECISION (newtype))\n \t\t    newtype = TREE_TYPE (arg1);\n-\t\t  if (TYPE_PRECISION (newtype) < TYPE_PRECISION (itype))\n+\t\t  /* Sometimes this transformation is safe (cannot\n+\t\t     change results through affecting double rounding\n+\t\t     cases) and sometimes it is not.  If NEWTYPE is\n+\t\t     wider than TYPE, e.g. (float)((long double)double\n+\t\t     + (long double)double) converted to\n+\t\t     (float)(double + double), the transformation is\n+\t\t     unsafe regardless of the details of the types\n+\t\t     involved; double rounding can arise if the result\n+\t\t     of NEWTYPE arithmetic is a NEWTYPE value half way\n+\t\t     between two representable TYPE values but the\n+\t\t     exact value is sufficiently different (in the\n+\t\t     right direction) for this difference to be\n+\t\t     visible in ITYPE arithmetic.  If NEWTYPE is the\n+\t\t     same as TYPE, however, the transformation may be\n+\t\t     safe depending on the types involved: it is safe\n+\t\t     if the ITYPE has strictly more than twice as many\n+\t\t     mantissa bits as TYPE, can represent infinities\n+\t\t     and NaNs if the TYPE can, and has sufficient\n+\t\t     exponent range for the product or ratio of two\n+\t\t     values representable in the TYPE to be within the\n+\t\t     range of normal values of ITYPE.  */\n+\t\t  if (TYPE_PRECISION (newtype) < TYPE_PRECISION (itype)\n+\t\t      && (flag_unsafe_math_optimizations\n+\t\t\t  || (TYPE_PRECISION (newtype) == TYPE_PRECISION (type)\n+\t\t\t      && real_can_shorten_arithmetic (TYPE_MODE (itype),\n+\t\t\t\t\t\t\t      TYPE_MODE (type)))))\n \t\t    {\n \t\t      expr = build2 (TREE_CODE (expr), newtype,\n \t\t\t\t     fold (convert_to_real (newtype, arg0)),"}, {"sha": "c5a16a867e1c4a8f0b12d269dc82b05d3f6a9e77", "filename": "gcc/real.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "patch": "@@ -1266,6 +1266,35 @@ exact_real_inverse (enum machine_mode mode, REAL_VALUE_TYPE *r)\n   *r = u;\n   return true;\n }\n+\n+/* Return true if arithmetic on values in IMODE that were promoted\n+   from values in TMODE is equivalent to direct arithmetic on values\n+   in TMODE.  */\n+\n+bool\n+real_can_shorten_arithmetic (enum machine_mode imode, enum machine_mode tmode)\n+{\n+  const struct real_format *tfmt, *ifmt;\n+  tfmt = REAL_MODE_FORMAT (tmode);\n+  ifmt = REAL_MODE_FORMAT (imode);\n+  /* These conditions are conservative rather than trying to catch the\n+     exact boundary conditions; the main case to allow is IEEE float\n+     and double.  */\n+  return (ifmt->b == tfmt->b\n+\t  && ifmt->p > 2 * tfmt->p\n+\t  && ifmt->emin < 2 * tfmt->emin - tfmt->p - 2\n+\t  && ifmt->emin < tfmt->emin - tfmt->emax - tfmt->p - 2\n+\t  && ifmt->emax > 2 * tfmt->emax + 2\n+\t  && ifmt->emax > tfmt->emax - tfmt->emin + tfmt->p + 2\n+\t  && ifmt->round_towards_zero == tfmt->round_towards_zero\n+\t  && (ifmt->has_sign_dependent_rounding\n+\t      == tfmt->has_sign_dependent_rounding)\n+\t  && ifmt->has_nans >= tfmt->has_nans\n+\t  && ifmt->has_inf >= tfmt->has_inf\n+\t  && ifmt->has_signed_zero >= tfmt->has_signed_zero\n+\t  && !MODE_COMPOSITE_P (tmode)\n+\t  && !MODE_COMPOSITE_P (imode));\n+}\n \f\n /* Render R as an integer.  */\n "}, {"sha": "5a686536608c24d283cdd55d5f497c5268410524", "filename": "gcc/real.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "patch": "@@ -438,6 +438,11 @@ extern rtx const_double_from_real_value (REAL_VALUE_TYPE, enum machine_mode);\n /* Replace R by 1/R in the given machine mode, if the result is exact.  */\n extern bool exact_real_inverse (enum machine_mode, REAL_VALUE_TYPE *);\n \n+/* Return true if arithmetic on values in IMODE that were promoted\n+   from values in TMODE is equivalent to direct arithmetic on values\n+   in TMODE.  */\n+bool real_can_shorten_arithmetic (enum machine_mode, enum machine_mode);\n+\n /* In tree.c: wrap up a REAL_VALUE_TYPE in a tree node.  */\n extern tree build_real (tree, REAL_VALUE_TYPE);\n "}, {"sha": "6e3f6f2123eae23c5d873f883f38adba4883d370", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "patch": "@@ -1,3 +1,10 @@\n+2008-10-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/36578\n+\t* gcc.dg/dfp/convert-bfp-13.c, gcc.dg/dfp/convert-bfp-14.c,\n+\tgcc.dg/dfp/convert-dfp-fold-2.c, gcc.target/i386/pr36578-1.c,\n+\tgcc.target/i386/pr36578-2.c: New tests.\n+\n 2008-10-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/37870"}, {"sha": "91a5b494884215020e808100ef53a77adbed1e16", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-13.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-13.c?ref=20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "patch": "@@ -0,0 +1,20 @@\n+/* Test for bug where fold changed binary operation to decimal\n+   depending on typedefs.  */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile double d = 1.2345675;\n+\n+typedef const volatile _Decimal32 d32;\n+\n+int\n+main (void)\n+{\n+  _Decimal32 a = (d * d);\n+  d32 b = (d * d);\n+  if (a != b)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "a1312d2a0e6b895ff5f619d0aa770c0dcac58fe1", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-14.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-14.c?ref=20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "patch": "@@ -0,0 +1,17 @@\n+/* Test for bug where fold narrowed decimal floating-point\n+   operations.  */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile _Decimal32 f = 1.23456DF;\n+volatile _Decimal64 d = 1.23456DD;\n+\n+int\n+main (void)\n+{\n+  if ((double)((_Decimal64)f * (_Decimal64)f) != (double)(d * d))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "9f0927963a159cadb946e82fc0cafe9d4ed6ae13", "filename": "gcc/testsuite/gcc.dg/dfp/convert-dfp-fold-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-fold-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-fold-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-fold-2.c?ref=20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "patch": "@@ -0,0 +1,17 @@\n+/* Test for bug where fold narrowed decimal floating-point\n+   operations.  */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile _Decimal32 f = 1.23456DF;\n+volatile _Decimal64 d = 1.23456DD;\n+\n+int\n+main (void)\n+{\n+  if ((_Decimal128)((_Decimal64)f * (_Decimal64)f) != (_Decimal128)(d * d))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "cae0d7088376eb2030d70690060930cfe7c9e199", "filename": "gcc/testsuite/gcc.target/i386/pr36578-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36578-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36578-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36578-1.c?ref=20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "patch": "@@ -0,0 +1,22 @@\n+/* Test for unsafe floating-point conversions.  PR 36578.  */\n+/* { dg-do run } */\n+/* { dg-options \"-msse2 -mfpmath=sse\" } */\n+\n+#include \"sse2-check.h\"\n+\n+extern void abort (void);\n+extern void exit (int);\n+extern int printf(const char *, ...);\n+\n+volatile double d1 = 1.0;\n+volatile double d2 = 0x1.00001p-53;\n+volatile double d3;\n+\n+static void\n+sse2_test (void)\n+{\n+  d3 = (double)((long double)d1 + (long double)d2);\n+  if (d3 != d1)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "19143cfe5ba943ccb8622730f5c0bc4464a201b7", "filename": "gcc/testsuite/gcc.target/i386/pr36578-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36578-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36578-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36578-2.c?ref=20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "patch": "@@ -0,0 +1,23 @@\n+/* Test for unsafe floating-point conversions.  */\n+/* { dg-do run } */\n+/* { dg-options \"-msse2 -mfpmath=sse\" } */\n+\n+#include \"sse2-check.h\"\n+\n+extern void abort (void);\n+extern void exit (int);\n+extern int printf(const char *, ...);\n+\n+volatile double d1 = 0x1.000001p0;\n+volatile double d2 = 0x1p-54;\n+volatile float f = 0x1.000002p0f;\n+volatile float f2;\n+\n+static void\n+sse2_test (void)\n+{\n+  f2 = (float)((long double)d1 + (long double)d2);\n+  if (f != f2)\n+    abort ();\n+  exit (0);\n+}"}]}