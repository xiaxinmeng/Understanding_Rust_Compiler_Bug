{"sha": "ec44e46396e6bc7f393ceb10d84df22b9b45f820", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM0NGU0NjM5NmU2YmM3ZjM5M2NlYjEwZDg0ZGYyMmI5YjQ1ZjgyMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-17T18:08:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-17T18:08:59Z"}, "message": "re PR c++/53549 (g++ and armadillo 3.2.0, operator() is inaccessible)\n\n\tPR c++/53549\n\t* parser.c (cp_parser_class_head): Call xref_basetypes here.\n\t(cp_parser_class_specifier_1): Not here.\n\t* pt.c (tsubst_decl) [USING_DECL]: Check uses_template_parms\n\tas well as DECL_DEPENDENT_P.\n\nFrom-SVN: r189582", "tree": {"sha": "5107b10c0438bd6ed62fa2a6257a2fa978c9d215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5107b10c0438bd6ed62fa2a6257a2fa978c9d215"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec44e46396e6bc7f393ceb10d84df22b9b45f820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec44e46396e6bc7f393ceb10d84df22b9b45f820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec44e46396e6bc7f393ceb10d84df22b9b45f820", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec44e46396e6bc7f393ceb10d84df22b9b45f820/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65876d249e4992e87c5c6aa30a87dfac88752a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65876d249e4992e87c5c6aa30a87dfac88752a60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65876d249e4992e87c5c6aa30a87dfac88752a60"}], "stats": {"total": 79, "additions": 54, "deletions": 25}, "files": [{"sha": "142a8667d448e054fdc5d5438b71d0756e258cb1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec44e46396e6bc7f393ceb10d84df22b9b45f820/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec44e46396e6bc7f393ceb10d84df22b9b45f820/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ec44e46396e6bc7f393ceb10d84df22b9b45f820", "patch": "@@ -1,3 +1,11 @@\n+2012-07-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53549\n+\t* parser.c (cp_parser_class_head): Call xref_basetypes here.\n+\t(cp_parser_class_specifier_1): Not here.\n+\t* pt.c (tsubst_decl) [USING_DECL]: Check uses_template_parms\n+\tas well as DECL_DEPENDENT_P.\n+\n 2012-07-16  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h (struct deferred_access_check): Add location."}, {"sha": "df23299efe2cab715ec687caa957330b3798d3be", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec44e46396e6bc7f393ceb10d84df22b9b45f820/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec44e46396e6bc7f393ceb10d84df22b9b45f820/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ec44e46396e6bc7f393ceb10d84df22b9b45f820", "patch": "@@ -2008,7 +2008,7 @@ static tree cp_parser_class_name\n static tree cp_parser_class_specifier\n   (cp_parser *);\n static tree cp_parser_class_head\n-  (cp_parser *, bool *, tree *);\n+  (cp_parser *, bool *);\n static enum tag_types cp_parser_class_key\n   (cp_parser *);\n static void cp_parser_member_specification_opt\n@@ -17961,15 +17961,13 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n   bool saved_in_unbraced_linkage_specification_p;\n   tree old_scope = NULL_TREE;\n   tree scope = NULL_TREE;\n-  tree bases;\n   cp_token *closing_brace;\n \n   push_deferring_access_checks (dk_no_deferred);\n \n   /* Parse the class-head.  */\n   type = cp_parser_class_head (parser,\n-\t\t\t       &nested_name_specifier_p,\n-\t\t\t       &bases);\n+\t\t\t       &nested_name_specifier_p);\n   /* If the class-head was a semantic disaster, skip the entire body\n      of the class.  */\n   if (!type)\n@@ -17986,18 +17984,6 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n       return error_mark_node;\n     }\n \n-  /* Process the base classes. If they're invalid, skip the \n-     entire class body.  */\n-  if (!xref_basetypes (type, bases))\n-    {\n-      /* Consuming the closing brace yields better error messages\n-         later on.  */\n-      if (cp_parser_skip_to_closing_brace (parser))\n-\tcp_lexer_consume_token (parser->lexer);\n-      pop_deferring_access_checks ();\n-      return error_mark_node;\n-    }\n-\n   /* Issue an error message if type-definitions are forbidden here.  */\n   cp_parser_check_type_definition (parser);\n   /* Remember that we are defining one more class.  */\n@@ -18283,14 +18269,14 @@ cp_parser_class_specifier (cp_parser* parser)\n \n static tree\n cp_parser_class_head (cp_parser* parser,\n-\t\t      bool* nested_name_specifier_p,\n-\t\t      tree *bases)\n+\t\t      bool* nested_name_specifier_p)\n {\n   tree nested_name_specifier;\n   enum tag_types class_key;\n   tree id = NULL_TREE;\n   tree type = NULL_TREE;\n   tree attributes;\n+  tree bases;\n   cp_virt_specifiers virt_specifiers = VIRT_SPEC_UNSPECIFIED;\n   bool template_id_p = false;\n   bool qualified_p = false;\n@@ -18307,8 +18293,6 @@ cp_parser_class_head (cp_parser* parser,\n   num_templates = 0;\n   parser->colon_corrects_to_scope_p = false;\n \n-  *bases = NULL_TREE;\n-\n   /* Look for the class-key.  */\n   class_key = cp_parser_class_key (parser);\n   if (class_key == none_type)\n@@ -18671,7 +18655,15 @@ cp_parser_class_head (cp_parser* parser,\n \n   /* Get the list of base-classes, if there is one.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))\n-    *bases = cp_parser_base_clause (parser);\n+    bases = cp_parser_base_clause (parser);\n+  else\n+    bases = NULL_TREE;\n+\n+  /* If we're really defining a class, process the base classes.\n+     If they're invalid, fail.  */\n+  if (type && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE)\n+      && !xref_basetypes (type, bases))\n+    type = NULL_TREE;\n \n  done:\n   /* Leave the scope given by the nested-name-specifier.  We will"}, {"sha": "542f57a30a0dbae1422ac524dc457c0f37bba9e4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec44e46396e6bc7f393ceb10d84df22b9b45f820/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec44e46396e6bc7f393ceb10d84df22b9b45f820/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ec44e46396e6bc7f393ceb10d84df22b9b45f820", "patch": "@@ -10235,8 +10235,12 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n       break;\n \n     case USING_DECL:\n-      /* We reach here only for member using decls.  */\n-      if (DECL_DEPENDENT_P (t))\n+      /* We reach here only for member using decls.  We also need to check\n+\t uses_template_parms because DECL_DEPENDENT_P is not set for a\n+\t using-declaration that designates a member of the current\n+\t instantiation (c++/53549).  */\n+      if (DECL_DEPENDENT_P (t)\n+\t  || uses_template_parms (USING_DECL_SCOPE (t)))\n \t{\n \t  r = do_class_using_decl\n \t    (tsubst_copy (USING_DECL_SCOPE (t), args, complain, in_decl),"}, {"sha": "f4e7ff58b0d8e904109d349ac019432c58092395", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec44e46396e6bc7f393ceb10d84df22b9b45f820/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec44e46396e6bc7f393ceb10d84df22b9b45f820/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec44e46396e6bc7f393ceb10d84df22b9b45f820", "patch": "@@ -1,3 +1,9 @@\n+2012-07-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53549\n+\t* g++.dg/template/current-inst1.C: New.\n+\t* g++.dg/parse/crash35.C: Adjust.\n+\n 2012-07-17  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/52101"}, {"sha": "161edad32a2a790254ef3028422a57d2e45b1d93", "filename": "gcc/testsuite/g++.dg/parse/crash35.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec44e46396e6bc7f393ceb10d84df22b9b45f820/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec44e46396e6bc7f393ceb10d84df22b9b45f820/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash35.C?ref=ec44e46396e6bc7f393ceb10d84df22b9b45f820", "patch": "@@ -3,5 +3,5 @@\n \n struct a {};\n \n-class foo : public a, a\n-{ /* { dg-error \"duplicate base type|at end of input\" } */\n+class foo : public a, a\t\t// { dg-error \"duplicate base\" }\n+{ /* { dg-error \"at end of input\" } */"}, {"sha": "8f42ef844405845d1ace2cab0e25c73781f8d145", "filename": "gcc/testsuite/g++.dg/template/current-inst1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec44e46396e6bc7f393ceb10d84df22b9b45f820/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcurrent-inst1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec44e46396e6bc7f393ceb10d84df22b9b45f820/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcurrent-inst1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcurrent-inst1.C?ref=ec44e46396e6bc7f393ceb10d84df22b9b45f820", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/53549\n+\n+template<typename T>\n+struct C2\n+{\n+  int operator()();\n+\n+  template<int> struct F2;\n+};\n+\n+\n+template<typename T>\n+template<int I>\n+struct C2<T>::F2 : C2<T>\n+{\n+  using C2<T>::operator();\n+};\n+\n+C2<int>::F2<42> f;"}]}