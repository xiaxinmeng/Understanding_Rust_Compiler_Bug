{"sha": "562a0860f15ec5da89cd3605bcab5da18421ce15", "node_id": "C_kwDOANBUbNoAKDU2MmEwODYwZjE1ZWM1ZGE4OWNkMzYwNWJjYWI1ZGExODQyMWNlMTU", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-05-26T11:16:11Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-06-08T12:32:35Z"}, "message": "ast: Fix attribute collection\n\nItems attribute were not correctly collected and thus could not be\nexpanded from a previous macro invocation.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-collector.cc (TokenCollector::visit): Fix\n\tattribute collection.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "1a20a097b5df41fa3c92666694987e32a147707f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a20a097b5df41fa3c92666694987e32a147707f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/562a0860f15ec5da89cd3605bcab5da18421ce15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/562a0860f15ec5da89cd3605bcab5da18421ce15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/562a0860f15ec5da89cd3605bcab5da18421ce15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/562a0860f15ec5da89cd3605bcab5da18421ce15/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c60b36b977da356ea4a120ffd5e0c1fc4e1aedca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60b36b977da356ea4a120ffd5e0c1fc4e1aedca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c60b36b977da356ea4a120ffd5e0c1fc4e1aedca"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "e26184979809eca015479ff0c6c5221c4c416e70", "filename": "gcc/rust/ast/rust-ast-collector.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562a0860f15ec5da89cd3605bcab5da18421ce15/gcc%2Frust%2Fast%2Frust-ast-collector.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562a0860f15ec5da89cd3605bcab5da18421ce15/gcc%2Frust%2Fast%2Frust-ast-collector.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-collector.cc?ref=562a0860f15ec5da89cd3605bcab5da18421ce15", "patch": "@@ -1630,6 +1630,7 @@ TokenCollector::visit (Module &module)\n   //\t  Item*\n   //\t}\n \n+  visit_items_as_lines (module.get_outer_attrs ());\n   visit (module.get_visibility ());\n   auto name = module.get_name ();\n   tokens.push_back (Rust::Token::make (MOD, module.get_locus ()));\n@@ -1660,6 +1661,7 @@ TokenCollector::visit (Module &module)\n void\n TokenCollector::visit (ExternCrate &crate)\n {\n+  visit_items_as_lines (crate.get_outer_attrs ());\n   tokens.push_back (Rust::Token::make (EXTERN_TOK, crate.get_locus ()));\n   tokens.push_back (Rust::Token::make (CRATE, Location ()));\n   auto ref = crate.get_referenced_crate ();\n@@ -1748,6 +1750,7 @@ TokenCollector::visit (UseTreeRebind &use_tree)\n void\n TokenCollector::visit (UseDeclaration &decl)\n {\n+  visit_items_as_lines (decl.get_outer_attrs ());\n   tokens.push_back (Rust::Token::make (USE, decl.get_locus ()));\n   visit (*decl.get_tree ());\n   tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n@@ -1762,6 +1765,7 @@ TokenCollector::visit (Function &function)\n   //      ( FunctionParameters? )\n   //      FunctionReturnType? WhereClause?\n   //      ( BlockExpression | ; )\n+  visit_items_as_lines (function.get_outer_attrs ());\n \n   visit (function.get_visibility ());\n \n@@ -1801,6 +1805,7 @@ TokenCollector::visit (TypeAlias &type_alias)\n \n   // Note: Associated types are handled by `AST::TraitItemType`.\n \n+  visit_items_as_lines (type_alias.get_outer_attrs ());\n   if (type_alias.has_visibility ())\n     visit (type_alias.get_visibility ());\n   auto alias_name = type_alias.get_new_type_name ();\n@@ -1819,6 +1824,7 @@ TokenCollector::visit (TypeAlias &type_alias)\n void\n TokenCollector::visit (StructStruct &struct_item)\n {\n+  visit_items_as_lines (struct_item.get_outer_attrs ());\n   if (struct_item.has_visibility ())\n     visit (struct_item.get_visibility ());\n   auto struct_name = struct_item.get_identifier ();\n@@ -1843,6 +1849,7 @@ TokenCollector::visit (StructStruct &struct_item)\n void\n TokenCollector::visit (TupleStruct &tuple_struct)\n {\n+  visit_items_as_lines (tuple_struct.get_outer_attrs ());\n   auto struct_name = tuple_struct.get_identifier ();\n   tokens.push_back (Rust::Token::make (STRUCT_TOK, tuple_struct.get_locus ()));\n   tokens.push_back (\n@@ -1862,6 +1869,7 @@ TokenCollector::visit (TupleStruct &tuple_struct)\n void\n TokenCollector::visit (EnumItem &item)\n {\n+  visit_items_as_lines (item.get_outer_attrs ());\n   auto id = item.get_identifier ();\n   tokens.push_back (\n     Rust::Token::make_identifier (item.get_locus (), std::move (id)));\n@@ -1901,6 +1909,7 @@ TokenCollector::visit (EnumItemDiscriminant &item)\n void\n TokenCollector::visit (Enum &enumeration)\n {\n+  visit_items_as_lines (enumeration.get_outer_attrs ());\n   if (enumeration.has_visibility ())\n     visit (enumeration.get_visibility ());\n   tokens.push_back (Rust::Token::make (ENUM_TOK, enumeration.get_locus ()));\n@@ -1936,6 +1945,7 @@ TokenCollector::visit (Union &union_item)\n void\n TokenCollector::visit (ConstantItem &item)\n {\n+  visit_items_as_lines (item.get_outer_attrs ());\n   tokens.push_back (Rust::Token::make (CONST, item.get_locus ()));\n   if (item.is_unnamed ())\n     {\n@@ -1960,6 +1970,7 @@ TokenCollector::visit (ConstantItem &item)\n void\n TokenCollector::visit (StaticItem &item)\n {\n+  visit_items_as_lines (item.get_outer_attrs ());\n   tokens.push_back (Rust::Token::make (STATIC_TOK, item.get_locus ()));\n   if (item.is_mutable ())\n     tokens.push_back (Rust::Token::make (MUT, Location ()));\n@@ -2112,6 +2123,7 @@ TokenCollector::visit (Trait &trait)\n void\n TokenCollector::visit (InherentImpl &impl)\n {\n+  visit_items_as_lines (impl.get_outer_attrs ());\n   tokens.push_back (Rust::Token::make (IMPL, impl.get_locus ()));\n   // FIXME: Handle generics\n \n@@ -2128,6 +2140,7 @@ TokenCollector::visit (InherentImpl &impl)\n void\n TokenCollector::visit (TraitImpl &impl)\n {\n+  visit_items_as_lines (impl.get_outer_attrs ());\n   tokens.push_back (Rust::Token::make (IMPL, impl.get_locus ()));\n   visit (impl.get_trait_path ());\n   tokens.push_back (Rust::Token::make (FOR, Location ()));\n@@ -2202,6 +2215,7 @@ TokenCollector::visit (ExternalFunctionItem &function)\n void\n TokenCollector::visit (ExternBlock &block)\n {\n+  visit_items_as_lines (block.get_outer_attrs ());\n   tokens.push_back (Rust::Token::make (EXTERN_TOK, block.get_locus ()));\n \n   if (block.has_abi ())"}]}