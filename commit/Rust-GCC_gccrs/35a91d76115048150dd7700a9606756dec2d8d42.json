{"sha": "35a91d76115048150dd7700a9606756dec2d8d42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVhOTFkNzYxMTUwNDgxNTBkZDc3MDBhOTYwNjc1NmRlYzJkOGQ0Mg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-01-04T01:45:48Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-01-04T01:45:48Z"}, "message": "testsuite_hooks.cc: Use __throw_exception_again instead of just throw.\n\n\t* testsuite/testsuite_hooks.cc: Use __throw_exception_again\n\tinstead of just throw.\n\nFrom-SVN: r92881", "tree": {"sha": "ea9164dd13aa7e87ea889bab18fb70b85a99bd08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea9164dd13aa7e87ea889bab18fb70b85a99bd08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35a91d76115048150dd7700a9606756dec2d8d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a91d76115048150dd7700a9606756dec2d8d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35a91d76115048150dd7700a9606756dec2d8d42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a91d76115048150dd7700a9606756dec2d8d42/comments", "author": null, "committer": null, "parents": [{"sha": "8ca82e0965810836f314b8578d888875fa8fafe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca82e0965810836f314b8578d888875fa8fafe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca82e0965810836f314b8578d888875fa8fafe3"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "12119bf3695e314d65416ce2fe8bacb6d0680042", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a91d76115048150dd7700a9606756dec2d8d42/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a91d76115048150dd7700a9606756dec2d8d42/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=35a91d76115048150dd7700a9606756dec2d8d42", "patch": "@@ -1,5 +1,8 @@\n 2005-01-03  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* testsuite/testsuite_hooks.cc: Use __throw_exception_again\n+\tinstead of just throw.\n+\n \t* testsuite/testsuite_hooks.cc: Update coypright and follow style\n \tguidelines.\n \t* testsuite/testsuite_hooks.h: Likewise."}, {"sha": "4e7887bc214a67af1f9912c10672495e3c4a020e", "filename": "libstdc++-v3/testsuite/testsuite_hooks.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a91d76115048150dd7700a9606756dec2d8d42/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a91d76115048150dd7700a9606756dec2d8d42/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc?ref=35a91d76115048150dd7700a9606756dec2d8d42", "patch": "@@ -296,13 +296,15 @@ namespace __gnu_test\n     // Get a semaphore set with one semaphore.\n     sem_set_ = semget(IPC_PRIVATE, 1, SEM_R | SEM_A);\n     if (sem_set_ == -1)\n-      throw std::runtime_error (\"could not obtain semaphore set\");\n+      __throw_exception_again \n+\tstd::runtime_error (\"could not obtain semaphore set\");\n \n     // Initialize the semaphore.\n     union semun val;\n     val.val = 0;\n     if (semctl(sem_set_, 0, SETVAL, val) == -1)\n-      throw std::runtime_error(\"could not initialize semaphore\");\n+      __throw_exception_again\n+\tstd::runtime_error(\"could not initialize semaphore\");\n #else\n     // There are no semaphores on this system.  We have no way to mark\n     // a test as \"unsupported\" at runtime, so we just exit, pretending\n@@ -327,7 +329,8 @@ namespace __gnu_test\n       { 0, 1, 0 }\n     };\n     if (semop(sem_set_, op, 1) == -1)\n-      throw std::runtime_error(\"could not signal semaphore\");\n+      __throw_exception_again\n+\tstd::runtime_error(\"could not signal semaphore\");\n #endif\n   }\n \n@@ -338,7 +341,8 @@ namespace __gnu_test\n       { 0, -1, SEM_UNDO }\n     };\n     if (semop(sem_set_, op, 1) == -1)\n-      throw std::runtime_error(\"could not wait for semaphore\");\n+      __throw_exception_again\n+\tstd::runtime_error(\"could not wait for semaphore\");\n #endif    \n   }\n }; // namespace __gnu_test"}]}