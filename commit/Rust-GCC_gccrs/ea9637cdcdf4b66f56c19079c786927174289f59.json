{"sha": "ea9637cdcdf4b66f56c19079c786927174289f59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE5NjM3Y2RjZGY0YjY2ZjU2YzE5MDc5Yzc4NjkyNzE3NDI4OWY1OQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2013-10-30T09:09:44Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-30T09:09:44Z"}, "message": "tree-core.h (tree_index): Add TI_POINTER_BOUNDS_TYPE.\n\n        * tree-core.h (tree_index): Add TI_POINTER_BOUNDS_TYPE.\n        * tree.h (POINTER_BOUNDS_P): New.\n        (BOUNDED_TYPE_P): New.\n        (BOUNDED_P): New.\n        (pointer_bounds_type_node): New.\n        * tree.c (build_common_tree_nodes): Initialize\n        pointer_bounds_type_node.\n        * gimple.h (gimple_call_get_nobnd_arg_index): New.\n        (gimple_call_num_nobnd_args): New.\n        (gimple_call_nobnd_arg): New.\n        (gimple_return_retbnd): New.\n        (gimple_return_set_retbnd): New\n        * gimple.c (gimple_build_return): Increase number of ops\n        for return statement.\n        (gimple_call_get_nobnd_arg_index): New.\n        * gimple-pretty-print.c (dump_gimple_return): Print second op.\n\nFrom-SVN: r204199", "tree": {"sha": "5587fa3d365aa2710f61defe58124d11a5e1e147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5587fa3d365aa2710f61defe58124d11a5e1e147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea9637cdcdf4b66f56c19079c786927174289f59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9637cdcdf4b66f56c19079c786927174289f59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea9637cdcdf4b66f56c19079c786927174289f59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9637cdcdf4b66f56c19079c786927174289f59/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0038da669587ccb1781a136f153a7e951d04465a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0038da669587ccb1781a136f153a7e951d04465a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0038da669587ccb1781a136f153a7e951d04465a"}], "stats": {"total": 188, "additions": 185, "deletions": 3}, "files": [{"sha": "e733a50d580b42460788b63afa91d7dc5cea2f1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea9637cdcdf4b66f56c19079c786927174289f59", "patch": "@@ -1,3 +1,22 @@\n+2013-10-30  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* tree-core.h (tree_index): Add TI_POINTER_BOUNDS_TYPE.\n+\t* tree.h (POINTER_BOUNDS_P): New.\n+\t(BOUNDED_TYPE_P): New.\n+\t(BOUNDED_P): New.\n+\t(pointer_bounds_type_node): New.\n+\t* tree.c (build_common_tree_nodes): Initialize\n+\tpointer_bounds_type_node.\n+\t* gimple.h (gimple_call_get_nobnd_arg_index): New.\n+\t(gimple_call_num_nobnd_args): New.\n+\t(gimple_call_nobnd_arg): New.\n+\t(gimple_return_retbnd): New.\n+\t(gimple_return_set_retbnd): New\n+\t* gimple.c (gimple_build_return): Increase number of ops\n+\tfor return statement.\n+\t(gimple_call_get_nobnd_arg_index): New.\n+\t* gimple-pretty-print.c (dump_gimple_return): Print second op.\n+\n 2013-10-30  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* ipa.c (cgraph_build_static_cdtor_1): Support contructors"}, {"sha": "d19b5418a367fa0829d0700567743e346f1d0f61", "filename": "gcc/chkp-builtins.def", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Fchkp-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Fchkp-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fchkp-builtins.def?ref=ea9637cdcdf4b66f56c19079c786927174289f59", "patch": "@@ -0,0 +1,73 @@\n+/* This file contains the definitions and documentation for the\n+   builtins used in the GNU compiler.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Before including this file, you should define macros:\n+\n+      DEF_BUILTIN_STUB(ENUM, NAME)\n+      DEF_CHKP_BUILTIN(ENUM, NAME, TYPE, ATTRS)\n+\n+   See builtins.def for details.  */\n+\n+/* Following builtins are used by compiler for Pointer Bounds Checker\n+   instrumentation.  Currently these generic builtins are not\n+   implemented and target has to provide his own version.  See\n+   builtin_chkp_function target hook documentation for more details.  */\n+DEF_BUILTIN_STUB (BUILT_IN_CHKP_BNDMK, \"__chkp_bndmk\")\n+DEF_BUILTIN_STUB (BUILT_IN_CHKP_BNDSTX, \"__chkp_bndstx\")\n+DEF_BUILTIN_STUB (BUILT_IN_CHKP_BNDCL, \"__chkp_bndcl\")\n+DEF_BUILTIN_STUB (BUILT_IN_CHKP_BNDCU, \"__chkp_bndcu\")\n+DEF_BUILTIN_STUB (BUILT_IN_CHKP_BNDLDX, \"__chkp_bndldx\")\n+DEF_BUILTIN_STUB (BUILT_IN_CHKP_BNDRET, \"__chkp_bndret\")\n+DEF_BUILTIN_STUB (BUILT_IN_CHKP_INTERSECT, \"__chkp_intersect\")\n+DEF_BUILTIN_STUB (BUILT_IN_CHKP_ARG_BND, \"__chkp_arg_bnd\")\n+DEF_BUILTIN_STUB (BUILT_IN_CHKP_SIZEOF, \"__chkp_sizeof\")\n+DEF_BUILTIN_STUB (BUILT_IN_CHKP_EXTRACT_LOWER, \"__chkp_extract_lower\")\n+DEF_BUILTIN_STUB (BUILT_IN_CHKP_EXTRACT_UPPER, \"__chkp_extract_upper\")\n+DEF_BUILTIN_STUB (BUILT_IN_CHKP_NARROW, \"__chkp_narrow\")\n+\n+/* Pointer Bounds Checker builtins for users.  Only\n+   BUILT_IN_CHKP_SET_PTR_BOUNDS may be redefined\n+   by target.  Other builtins calls are expanded\n+   in the Pointer Bounds Checker pass.  */\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_SET_PTR_BOUNDS, \"__bnd_set_ptr_bounds\", BT_FN_PTR_CONST_PTR_SIZE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_INIT_PTR_BOUNDS, \"__bnd_init_ptr_bounds\", BT_FN_PTR_CONST_PTR, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_NULL_PTR_BOUNDS, \"__bnd_null_ptr_bounds\", BT_FN_PTR_CONST_PTR, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_COPY_PTR_BOUNDS, \"__bnd_copy_ptr_bounds\", BT_FN_PTR_CONST_PTR_CONST_PTR, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_NARROW_PTR_BOUNDS, \"__bnd_narrow_ptr_bounds\", BT_FN_PTR_CONST_PTR_CONST_PTR_SIZE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_STORE_PTR_BOUNDS, \"__bnd_store_ptr_bounds\", BT_FN_VOID_PTRPTR_CONST_PTR, ATTR_NOTHROW_LEAF_LIST)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_CHECK_PTR_LBOUNDS, \"__bnd_chk_ptr_lbounds\", BT_FN_VOID_CONST_PTR, ATTR_NOTHROW_LEAF_LIST)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_CHECK_PTR_UBOUNDS, \"__bnd_chk_ptr_ubounds\", BT_FN_VOID_CONST_PTR, ATTR_NOTHROW_LEAF_LIST)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_CHECK_PTR_BOUNDS, \"__bnd_chk_ptr_bounds\", BT_FN_VOID_CONST_PTR_SIZE, ATTR_NOTHROW_LEAF_LIST)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_GET_PTR_LBOUND, \"__bnd_get_ptr_lbound\", BT_FN_CONST_PTR_CONST_PTR, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_GET_PTR_UBOUND, \"__bnd_get_ptr_ubound\", BT_FN_CONST_PTR_CONST_PTR, ATTR_CONST_NOTHROW_LEAF_LIST)\n+\n+/* Pointer Bounds Checker specific versions of string functions.  */\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMCPY_NOBND, \"chkp_memcpy_nobnd\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMCPY_NOCHK, \"chkp_memcpy_nochk\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMCPY_NOBND_NOCHK, \"chkp_memcpy_nobnd_nochk\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMMOVE_NOBND, \"chkp_memmove_nobnd\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMMOVE_NOCHK, \"chkp_memmove_nochk\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMMOVE_NOBND_NOCHK, \"chkp_memmove_nobnd_nochk\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMPCPY_NOBND, \"chkp_mempcpy_nobnd\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMPCPY_NOCHK, \"chkp_mempcpy_nochk\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMPCPY_NOBND_NOCHK, \"chkp_mempcpy_nobnd_nochk\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMSET_NOBND, \"chkp_memset_nobnd\", BT_FN_PTR_PTR_INT_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMSET_NOCHK, \"chkp_memset_nochk\", BT_FN_PTR_PTR_INT_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMSET_NOBND_NOCHK, \"chkp_memset_nobnd_nochk\", BT_FN_PTR_PTR_INT_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)"}, {"sha": "248dfea01af449b5aeb4b672eb3c259df476760f", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=ea9637cdcdf4b66f56c19079c786927174289f59", "patch": "@@ -539,11 +539,12 @@ dump_gimple_assign (pretty_printer *buffer, gimple gs, int spc, int flags)\n static void\n dump_gimple_return (pretty_printer *buffer, gimple gs, int spc, int flags)\n {\n-  tree t;\n+  tree t, t2;\n \n   t = gimple_return_retval (gs);\n+  t2 = gimple_return_retbnd (gs);\n   if (flags & TDF_RAW)\n-    dump_gimple_fmt (buffer, spc, flags, \"%G <%T>\", gs, t);\n+    dump_gimple_fmt (buffer, spc, flags, \"%G <%T %T>\", gs, t, t2);\n   else\n     {\n       pp_string (buffer, \"return\");\n@@ -552,6 +553,11 @@ dump_gimple_return (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t  pp_space (buffer);\n \t  dump_generic_node (buffer, t, spc, flags, false);\n \t}\n+      if (t2)\n+\t{\n+\t  pp_string (buffer, \", \");\n+\t  dump_generic_node (buffer, t2, spc, flags, false);\n+\t}\n       pp_semicolon (buffer);\n     }\n }"}, {"sha": "20f6010a1130bdbd47d00f8f2820ace6a1b8ee05", "filename": "gcc/gimple.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=ea9637cdcdf4b66f56c19079c786927174289f59", "patch": "@@ -174,7 +174,7 @@ gimple_build_with_ops_stat (enum gimple_code code, unsigned subcode,\n gimple\n gimple_build_return (tree retval)\n {\n-  gimple s = gimple_build_with_ops (GIMPLE_RETURN, ERROR_MARK, 1);\n+  gimple s = gimple_build_with_ops (GIMPLE_RETURN, ERROR_MARK, 2);\n   if (retval)\n     gimple_return_set_retval (s, retval);\n   return s;\n@@ -366,6 +366,26 @@ gimple_build_call_from_tree (tree t)\n }\n \n \n+/* Return index of INDEX's non bound argument of the call.  */\n+\n+unsigned\n+gimple_call_get_nobnd_arg_index (const_gimple gs, unsigned index)\n+{\n+  unsigned num_args = gimple_call_num_args (gs);\n+  for (unsigned n = 0; n < num_args; n++)\n+    {\n+      if (POINTER_BOUNDS_P (gimple_call_arg (gs, n)))\n+\tcontinue;\n+      else if (index)\n+\tindex--;\n+      else\n+\treturn n;\n+    }\n+\n+  gcc_unreachable ();\n+}\n+\n+\n /* Extract the operands and code for expression EXPR into *SUBCODE_P,\n    *OP1_P, *OP2_P and *OP3_P respectively.  */\n "}, {"sha": "b34424c18d3560aa2a410fb57e44953255c3d7fc", "filename": "gcc/gimple.h", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=ea9637cdcdf4b66f56c19079c786927174289f59", "patch": "@@ -918,6 +918,7 @@ extern tree get_initialized_tmp_var (tree, gimple_seq *, gimple_seq *);\n extern tree get_formal_tmp_var (tree, gimple_seq *);\n extern void declare_vars (tree, gimple, bool);\n extern void annotate_all_with_location (gimple_seq, location_t);\n+extern unsigned gimple_call_get_nobnd_arg_index (const_gimple, unsigned);\n \n /* Validation of GIMPLE expressions.  Note that these predicates only check\n    the basic form of the expression, they don't recurse to make sure that\n@@ -2413,6 +2414,32 @@ gimple_call_arg (const_gimple gs, unsigned index)\n }\n \n \n+/* Return the number of arguments used by call statement GS\n+   ignoring bound ones.  */\n+\n+static inline unsigned\n+gimple_call_num_nobnd_args (const_gimple gs)\n+{\n+  unsigned num_args = gimple_call_num_args (gs);\n+  unsigned res = num_args;\n+  for (unsigned n = 0; n < num_args; n++)\n+    if (POINTER_BOUNDS_P (gimple_call_arg (gs, n)))\n+      res--;\n+  return res;\n+}\n+\n+\n+/* Return INDEX's call argument ignoring bound ones.  */\n+static inline tree\n+gimple_call_nobnd_arg (const_gimple gs, unsigned index)\n+{\n+  /* No bound args may exist if pointers checker is off.  */\n+  if (!flag_check_pointer_bounds)\n+    return gimple_call_arg (gs, index);\n+  return gimple_call_arg (gs, gimple_call_get_nobnd_arg_index (gs, index));\n+}\n+\n+\n /* Return a pointer to the argument at position INDEX for call\n    statement GS.  */\n \n@@ -5219,6 +5246,26 @@ gimple_return_set_retval (gimple gs, tree retval)\n }\n \n \n+/* Return the return bounds for GIMPLE_RETURN GS.  */\n+\n+static inline tree\n+gimple_return_retbnd (const_gimple gs)\n+{\n+  GIMPLE_CHECK (gs, GIMPLE_RETURN);\n+  return gimple_op (gs, 1);\n+}\n+\n+\n+/* Set RETVAL to be the return bounds for GIMPLE_RETURN GS.  */\n+\n+static inline void\n+gimple_return_set_retbnd (gimple gs, tree retval)\n+{\n+  GIMPLE_CHECK (gs, GIMPLE_RETURN);\n+  gimple_set_op (gs, 1, retval);\n+}\n+\n+\n /* Returns true when the gimple statement STMT is any of the OpenMP types.  */\n \n #define CASE_GIMPLE_OMP\t\t\t\t\\"}, {"sha": "638b3ab3f68c88164981edf9e709fa8013a39a15", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=ea9637cdcdf4b66f56c19079c786927174289f59", "patch": "@@ -448,6 +448,8 @@ enum tree_index {\n   TI_FILEPTR_TYPE,\n   TI_POINTER_SIZED_TYPE,\n \n+  TI_POINTER_BOUNDS_TYPE,\n+\n   TI_DFLOAT32_TYPE,\n   TI_DFLOAT64_TYPE,\n   TI_DFLOAT128_TYPE,"}, {"sha": "094459a384bdf364e254fd634d0815a787ae512e", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ea9637cdcdf4b66f56c19079c786927174289f59", "patch": "@@ -9765,6 +9765,8 @@ build_common_tree_nodes (bool signed_char, bool short_double)\n   void_type_node = make_node (VOID_TYPE);\n   layout_type (void_type_node);\n \n+  pointer_bounds_type_node = targetm.chkp_bound_type ();\n+\n   /* We are not going to have real types in C with less than byte alignment,\n      so we might as well not have any types that claim to have it.  */\n   TYPE_ALIGN (void_type_node) = BITS_PER_UNIT;"}, {"sha": "33aea7fff12e978de9adba8d94d9703a3e563e2d", "filename": "gcc/tree.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9637cdcdf4b66f56c19079c786927174289f59/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ea9637cdcdf4b66f56c19079c786927174289f59", "patch": "@@ -546,6 +546,17 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define POINTER_BOUNDS_TYPE_P(NODE) \\\n   (TREE_CODE (NODE) == POINTER_BOUNDS_TYPE)\n \n+/* Nonzero if this node has a pointer bounds type.  */\n+#define POINTER_BOUNDS_P(NODE) \\\n+  (POINTER_BOUNDS_TYPE_P (TREE_TYPE (NODE)))\n+\n+/* Nonzero if this type supposes bounds existence.  */\n+#define BOUNDED_TYPE_P(type) (POINTER_TYPE_P (type))\n+\n+/* Nonzero for objects with bounded type.  */\n+#define BOUNDED_P(node) \\\n+  BOUNDED_TYPE_P (TREE_TYPE (node))\n+\n /* Nonzero if this type is the (possibly qualified) void type.  */\n #define VOID_TYPE_P(NODE) (TREE_CODE (NODE) == VOID_TYPE)\n \n@@ -3200,6 +3211,8 @@ tree_operand_check_code (const_tree __t, enum tree_code __code, int __i,\n #define complex_double_type_node\tglobal_trees[TI_COMPLEX_DOUBLE_TYPE]\n #define complex_long_double_type_node\tglobal_trees[TI_COMPLEX_LONG_DOUBLE_TYPE]\n \n+#define pointer_bounds_type_node        global_trees[TI_POINTER_BOUNDS_TYPE]\n+\n #define void_type_node\t\t\tglobal_trees[TI_VOID_TYPE]\n /* The C type `void *'.  */\n #define ptr_type_node\t\t\tglobal_trees[TI_PTR_TYPE]"}]}