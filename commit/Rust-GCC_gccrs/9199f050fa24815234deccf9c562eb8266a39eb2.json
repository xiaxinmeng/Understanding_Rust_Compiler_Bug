{"sha": "9199f050fa24815234deccf9c562eb8266a39eb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE5OWYwNTBmYTI0ODE1MjM0ZGVjY2Y5YzU2MmViODI2NmEzOWViMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-03-15T14:44:09Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2005-03-15T14:44:09Z"}, "message": "re PR target/18668 (use prescott's fisttp)\n\n\tPR target/18668\n\t* config/i386/i386.h (x86_fisttp): New.\n\t(TARGET_FISTTP): New macro.\n\t* config/i386/i386.c (x86_fisttp): Set for NOCONA.\n\t(output_fix_trunc): Add fisttp parameter.  Generate fisttp x87\n\tinstruction when fisttp flag is set.\n\t* config/i386/i386-protos.h (output_fix_trunc): Change declaration.\n\n\t* config/i386/i386.md (type attribute): Add fisttp.\n\t(unit attribute): Set to i387 for fisttp type.\n\t(X87MODEF, X87MODEI, SSEMODEF, SSEMODEI24): New mode macros.\n\t(fix_truncxfdi2, fix_truncxfsi2): Generate fisttp patterns for\n\tTARGET_FISTTP.\n\t(fix_truncdfdi2, fix_truncsfdi2, fix_truncdfsi2, fix_truncsfsi2):\n\tGenerate fisttp patterns for TARGET_FISTTP. Implement using mode\n\tmacros.\n\t(fix_truncxfhi2, fix_truncdfhi2, fix_truncsfhi2): Generate fisttp\n\tpatterns for TARGET_FISTTP.  Enable patterns for\n\t(TARGET_FISTTP && !TARGET_SSE_MATH). Implement using mode macros.\n\t(fix_trunc<mode>_i387_fisttp_1, fix_trunc<mode>_i387_fisttp,\n\tfix_trunc<mode>_i387_fisttp_with_temp): New instruction patterns to\n\timplement fisttp x87 insn.\n\t(fix_trunc*_i387_fisttp splitters): New patterns.\n\t(*fix_truncdi_i387, *fix_truncsi_i387, *fix_trunchi_i387):\n\tRename to *fix_trunc<mode>_i387_1.  Implement using mode macros.\n\tDisable patterns for TARGET_FISTTP.  Add comment about FLAGS_REG\n\tclobber.\n\t(fix_truncdi_memory, fix_truncdi_nomemory, fix_trunchi_nomemory):\n\tRename to fix_trunc<mode>_i387 and fix_trunc<mode>_i387_with_temp.\n\tImplement using mode macros. Disable patterns for TARGET_FISTTP.\n\t(fix_truncsi_memory, fix_truncsi_nomemory, fix_trunchi_memory,\n\tfix_trunchi_nomemory): Rename to fix_trunc<mode>_i387 and\n\tfix_trunc<mode>_i387_with_temp. Implement using mode macros.\n\tDisable patterns for TARGET_FISTTP.\n\t(fix_trunc*_i387 splitters): Implement usign mode macros.\n\t(fix_truncdfdi_sse, fix_truncsfdi_sse, fix_truncdfsi_sse,\n\tfix_truncsfsi_sse): Disable for (TARGET_FISTTP && !TARGET_SSE_MATH).\n\t(fix_trunx*_sse peephole2s): Implement using mode macros.\n\nFrom-SVN: r96477", "tree": {"sha": "2971ea71bc9e5ea4deb226810d01e91535d9727c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2971ea71bc9e5ea4deb226810d01e91535d9727c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9199f050fa24815234deccf9c562eb8266a39eb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9199f050fa24815234deccf9c562eb8266a39eb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9199f050fa24815234deccf9c562eb8266a39eb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9199f050fa24815234deccf9c562eb8266a39eb2/comments", "author": null, "committer": null, "parents": [{"sha": "9b12dc4f93f3032a60e337a71a936f6bd260c7f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b12dc4f93f3032a60e337a71a936f6bd260c7f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b12dc4f93f3032a60e337a71a936f6bd260c7f9"}], "stats": {"total": 643, "additions": 317, "deletions": 326}, "files": [{"sha": "b4489a480135cfca70e6a91cc90a7349617f4ac2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9199f050fa24815234deccf9c562eb8266a39eb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9199f050fa24815234deccf9c562eb8266a39eb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9199f050fa24815234deccf9c562eb8266a39eb2", "patch": "@@ -1,3 +1,44 @@\n+2005-03-15  Uros Bizjak  <uros@kss-loka.si>\n+\n+\tPR target/18668\n+\t* config/i386/i386.h (x86_fisttp): New.\n+\t(TARGET_FISTTP): New macro.\n+\t* config/i386/i386.c (x86_fisttp): Set for NOCONA.\n+\t(output_fix_trunc): Add fisttp parameter.  Generate fisttp x87\n+\tinstruction when fisttp flag is set.\n+\t* config/i386/i386-protos.h (output_fix_trunc): Change declaration.\n+\n+\t* config/i386/i386.md (type attribute): Add fisttp.\n+\t(unit attribute): Set to i387 for fisttp type.\n+\t(X87MODEF, X87MODEI, SSEMODEF, SSEMODEI24): New mode macros.\n+\t(fix_truncxfdi2, fix_truncxfsi2): Generate fisttp patterns for\n+\tTARGET_FISTTP.\n+\t(fix_truncdfdi2, fix_truncsfdi2, fix_truncdfsi2, fix_truncsfsi2):\n+\tGenerate fisttp patterns for TARGET_FISTTP. Implement using mode\n+\tmacros.\n+\t(fix_truncxfhi2, fix_truncdfhi2, fix_truncsfhi2): Generate fisttp\n+\tpatterns for TARGET_FISTTP.  Enable patterns for\n+\t(TARGET_FISTTP && !TARGET_SSE_MATH). Implement using mode macros.\n+\t(fix_trunc<mode>_i387_fisttp_1, fix_trunc<mode>_i387_fisttp,\n+\tfix_trunc<mode>_i387_fisttp_with_temp): New instruction patterns to\n+\timplement fisttp x87 insn.\n+\t(fix_trunc*_i387_fisttp splitters): New patterns.\n+\t(*fix_truncdi_i387, *fix_truncsi_i387, *fix_trunchi_i387):\n+\tRename to *fix_trunc<mode>_i387_1.  Implement using mode macros.\n+\tDisable patterns for TARGET_FISTTP.  Add comment about FLAGS_REG\n+\tclobber.\n+\t(fix_truncdi_memory, fix_truncdi_nomemory, fix_trunchi_nomemory):\n+\tRename to fix_trunc<mode>_i387 and fix_trunc<mode>_i387_with_temp.\n+\tImplement using mode macros. Disable patterns for TARGET_FISTTP.\n+\t(fix_truncsi_memory, fix_truncsi_nomemory, fix_trunchi_memory,\n+\tfix_trunchi_nomemory): Rename to fix_trunc<mode>_i387 and\n+\tfix_trunc<mode>_i387_with_temp. Implement using mode macros.\n+\tDisable patterns for TARGET_FISTTP.\n+\t(fix_trunc*_i387 splitters): Implement usign mode macros.\n+\t(fix_truncdfdi_sse, fix_truncsfdi_sse, fix_truncdfsi_sse,\n+\tfix_truncsfsi_sse): Disable for (TARGET_FISTTP && !TARGET_SSE_MATH).\n+\t(fix_trunx*_sse peephole2s): Implement using mode macros.\n+\n 2005-03-15  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPR rtl-optimization/20291"}, {"sha": "bf693860da71b8f732ab06e7d629d1266611b23f", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9199f050fa24815234deccf9c562eb8266a39eb2/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9199f050fa24815234deccf9c562eb8266a39eb2/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=9199f050fa24815234deccf9c562eb8266a39eb2", "patch": "@@ -117,7 +117,7 @@ extern void split_ti (rtx[], int, rtx[], rtx[]);\n extern const char *output_set_got (rtx);\n extern const char *output_387_binary_op (rtx, rtx*);\n extern const char *output_387_reg_move (rtx, rtx*);\n-extern const char *output_fix_trunc (rtx, rtx*);\n+extern const char *output_fix_trunc (rtx, rtx*, int);\n extern const char *output_fp_compare (rtx, rtx*, int, int);\n \n extern void i386_output_dwarf_dtprel (FILE*, int, rtx);"}, {"sha": "f76812f335fa29d9e79aea72db12c7b31d5d9a42", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9199f050fa24815234deccf9c562eb8266a39eb2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9199f050fa24815234deccf9c562eb8266a39eb2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9199f050fa24815234deccf9c562eb8266a39eb2", "patch": "@@ -525,6 +525,7 @@ const int x86_double_with_add = ~m_386;\n const int x86_use_bit_test = m_386;\n const int x86_unroll_strlen = m_486 | m_PENT | m_PPRO | m_ATHLON_K8 | m_K6;\n const int x86_cmove = m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n+const int x86_fisttp = m_NOCONA;\n const int x86_3dnow_a = m_ATHLON_K8;\n const int x86_deep_branch = m_PPRO | m_K6 | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n /* Branch hints were put in P4 based on simulation result. But\n@@ -7282,15 +7283,15 @@ emit_i387_cw_initialization (rtx current_mode, rtx new_mode, int mode)\n    operand may be [SDX]Fmode.  */\n \n const char *\n-output_fix_trunc (rtx insn, rtx *operands)\n+output_fix_trunc (rtx insn, rtx *operands, int fisttp)\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n   int dimode_p = GET_MODE (operands[0]) == DImode;\n \n   /* Jump through a hoop or two for DImode, since the hardware has no\n      non-popping instruction.  We used to do this a different way, but\n      that was somewhat fragile and broke with post-reload splitters.  */\n-  if (dimode_p && !stack_top_dies)\n+  if ((dimode_p || fisttp) && !stack_top_dies)\n     output_asm_insn (\"fld\\t%y1\", operands);\n \n   if (!STACK_TOP_P (operands[1]))\n@@ -7299,12 +7300,17 @@ output_fix_trunc (rtx insn, rtx *operands)\n   if (GET_CODE (operands[0]) != MEM)\n     abort ();\n \n-  output_asm_insn (\"fldcw\\t%3\", operands);\n-  if (stack_top_dies || dimode_p)\n-    output_asm_insn (\"fistp%z0\\t%0\", operands);\n+  if (fisttp)\n+      output_asm_insn (\"fisttp%z0\\t%0\", operands);\n   else\n-    output_asm_insn (\"fist%z0\\t%0\", operands);\n-  output_asm_insn (\"fldcw\\t%2\", operands);\n+    {\n+      output_asm_insn (\"fldcw\\t%3\", operands);\n+      if (stack_top_dies || dimode_p)\n+\toutput_asm_insn (\"fistp%z0\\t%0\", operands);\n+      else\n+\toutput_asm_insn (\"fist%z0\\t%0\", operands);\n+      output_asm_insn (\"fldcw\\t%2\", operands);\n+    }\n \n   return \"\";\n }"}, {"sha": "765eff8b9fdf7f5184ff8638740ba52a1cf8537f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9199f050fa24815234deccf9c562eb8266a39eb2/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9199f050fa24815234deccf9c562eb8266a39eb2/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9199f050fa24815234deccf9c562eb8266a39eb2", "patch": "@@ -229,7 +229,7 @@ extern int target_flags;\n \n #define TUNEMASK (1 << ix86_tune)\n extern const int x86_use_leave, x86_push_memory, x86_zero_extend_with_and;\n-extern const int x86_use_bit_test, x86_cmove, x86_deep_branch;\n+extern const int x86_use_bit_test, x86_cmove, x86_fisttp, x86_deep_branch;\n extern const int x86_branch_hints, x86_unroll_strlen;\n extern const int x86_double_with_add, x86_partial_reg_stall, x86_movx;\n extern const int x86_use_loop, x86_use_himode_fiop, x86_use_simode_fiop;\n@@ -258,6 +258,7 @@ extern int x86_prefetch_sse;\n /* For sane SSE instruction set generation we need fcomi instruction.  It is\n    safe to enable all CMOVE instructions.  */\n #define TARGET_CMOVE ((x86_cmove & (1 << ix86_arch)) || TARGET_SSE)\n+#define TARGET_FISTTP (x86_fisttp & (1 << ix86_arch))\n #define TARGET_DEEP_BRANCH_PREDICTION (x86_deep_branch & TUNEMASK)\n #define TARGET_BRANCH_PREDICTION_HINTS (x86_branch_hints & TUNEMASK)\n #define TARGET_DOUBLE_WITH_ADD (x86_double_with_add & TUNEMASK)"}, {"sha": "e168d112933e713cdf23b47eb5499c8499aaaf96", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 260, "deletions": 317, "changes": 577, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9199f050fa24815234deccf9c562eb8266a39eb2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9199f050fa24815234deccf9c562eb8266a39eb2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9199f050fa24815234deccf9c562eb8266a39eb2", "patch": "@@ -194,7 +194,7 @@\n    icmp,test,ibr,setcc,icmov,\n    push,pop,call,callv,leave,\n    str,cld,\n-   fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,frndint,\n+   fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,fisttp,frndint,\n    sselog,sselog1,sseiadd,sseishft,sseimul,\n    sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,sseicvt,ssediv,\n    mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\"\n@@ -207,7 +207,7 @@\n \n ;; The CPU unit operations uses.\n (define_attr \"unit\" \"integer,i387,sse,mmx,unknown\"\n-  (cond [(eq_attr \"type\" \"fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,frndint\")\n+  (cond [(eq_attr \"type\" \"fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,fisttp,frndint\")\n \t   (const_string \"i387\")\n \t (eq_attr \"type\" \"sselog,sselog1,sseiadd,sseishft,sseimul,\n \t\t\t  sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,sseicvt,ssediv\")\n@@ -442,8 +442,21 @@\n   [(set_attr \"length\" \"128\")\n    (set_attr \"type\" \"multi\")])\n \n+;; All x87 floating point modes\n+(define_mode_macro X87MODEF [SF DF XF])\n+ \n+;; All integer modes handled by x87 fisttp operator.\n+(define_mode_macro X87MODEI [HI SI DI])\n+\n ;; All integer modes handled by integer x87 operators.\n (define_mode_macro X87MODEI12 [HI SI])\n+\n+;; All SSE floating point modes\n+(define_mode_macro SSEMODEF [SF DF])\n+ \n+;; All integer modes handled by SSE cvtts?2si* operators.\n+(define_mode_macro SSEMODEI24 [SI DI])\n+\n \f\n ;; Scheduling descriptions\n \n@@ -3998,370 +4011,241 @@\n   [(set (match_dup 0) (float_truncate:DF (match_dup 1)))]\n   \"\")\n \f\n-;; %%% Break up all these bad boys.\n-\n ;; Signed conversion to DImode.\n \n (define_expand \"fix_truncxfdi2\"\n   [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n                    (fix:DI (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_80387\"\n-  \"\")\n-\n-(define_expand \"fix_truncdfdi2\"\n-  [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-                   (fix:DI (match_operand:DF 1 \"register_operand\" \"\")))\n-              (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_80387 || (TARGET_64BIT && TARGET_SSE2)\"\n {\n-  if (TARGET_64BIT && TARGET_SSE2)\n+  if (TARGET_FISTTP)\n    {\n-     rtx out = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (DImode);\n-     emit_insn (gen_fix_truncdfdi_sse (out, operands[1]));\n-     if (out != operands[0])\n-\temit_move_insn (operands[0], out);\n+     emit_insn (gen_fix_truncdi_fisttp_i387_1 (operands[0], operands[1]));\n      DONE;\n    }\n })\n \n-(define_expand \"fix_truncsfdi2\"\n+(define_expand \"fix_trunc<mode>di2\"\n   [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t           (fix:DI (match_operand:SF 1 \"register_operand\" \"\")))\n-              (clobber (reg:CC FLAGS_REG))])] \n-  \"TARGET_80387 || (TARGET_64BIT && TARGET_SSE)\"\n+                   (fix:DI (match_operand:SSEMODEF 1 \"register_operand\" \"\")))\n+              (clobber (reg:CC FLAGS_REG))])]\n+  \"TARGET_80387 || (TARGET_64BIT && SSE_FLOAT_MODE_P (<MODE>mode))\"\n {\n-  if (TARGET_64BIT && TARGET_SSE)\n+  if (TARGET_FISTTP\n+      && !(TARGET_64BIT && SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\n+   {\n+     emit_insn (gen_fix_truncdi_fisttp_i387_1 (operands[0], operands[1]));\n+     DONE;\n+   }\n+  if (TARGET_64BIT && SSE_FLOAT_MODE_P (<MODE>mode))\n    {\n      rtx out = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (DImode);\n-     emit_insn (gen_fix_truncsfdi_sse (out, operands[1]));\n+     emit_insn (gen_fix_trunc<mode>di_sse (out, operands[1]));\n      if (out != operands[0])\n \temit_move_insn (operands[0], out);\n      DONE;\n    }\n })\n \n-;; See the comments in i386.h near OPTIMIZE_MODE_SWITCHING for the description\n-;; of the machinery.\n-(define_insn_and_split \"*fix_truncdi_i387\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,?r\")\n-\t(fix:DI (match_operand 1 \"register_operand\" \"f,f\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n-   && !reload_completed && !reload_in_progress\n-   && (!SSE_FLOAT_MODE_P (GET_MODE (operands[1])) || !TARGET_64BIT)\"\n-  \"#\"\n-  \"&& 1\"\n-  [(const_int 0)]\n-{\n-  ix86_optimize_mode_switching = 1;\n-  operands[2] = assign_386_stack_local (HImode, 1);\n-  operands[3] = assign_386_stack_local (HImode, 2);\n-  if (memory_operand (operands[0], VOIDmode))\n-    emit_insn (gen_fix_truncdi_memory (operands[0], operands[1],\n-\t\t\t\t       operands[2], operands[3]));\n-  else\n-    {\n-      operands[4] = assign_386_stack_local (DImode, 0);\n-      emit_insn (gen_fix_truncdi_nomemory (operands[0], operands[1],\n-\t\t\t\t\t   operands[2], operands[3],\n-\t\t\t\t\t   operands[4]));\n-    }\n-  DONE;\n-}\n-  [(set_attr \"type\" \"fistp\")\n-   (set_attr \"i387_cw\" \"trunc\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"fix_truncdi_nomemory\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,?r\")\n-\t(fix:DI (match_operand 1 \"register_operand\" \"f,f\")))\n-   (use (match_operand:HI 2 \"memory_operand\" \"m,m\"))\n-   (use (match_operand:HI 3 \"memory_operand\" \"m,m\"))\n-   (clobber (match_operand:DI 4 \"memory_operand\" \"=m,m\"))\n-   (clobber (match_scratch:DF 5 \"=&1f,&1f\"))]\n-  \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n-   && (!SSE_FLOAT_MODE_P (GET_MODE (operands[1])) || !TARGET_64BIT)\"\n-  \"#\"\n-  [(set_attr \"type\" \"fistp\")\n-   (set_attr \"i387_cw\" \"trunc\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"fix_truncdi_memory\"\n-  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n-\t(fix:DI (match_operand 1 \"register_operand\" \"f\")))\n-   (use (match_operand:HI 2 \"memory_operand\" \"m\"))\n-   (use (match_operand:HI 3 \"memory_operand\" \"m\"))\n-   (clobber (match_scratch:DF 4 \"=&1f\"))]\n-  \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n-   && (!SSE_FLOAT_MODE_P (GET_MODE (operands[1])) || !TARGET_64BIT)\"\n-  \"* return output_fix_trunc (insn, operands);\"\n-  [(set_attr \"type\" \"fistp\")\n-   (set_attr \"i387_cw\" \"trunc\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_split \n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(fix:DI (match_operand 1 \"register_operand\" \"\")))\n-   (use (match_operand:HI 2 \"memory_operand\" \"\"))\n-   (use (match_operand:HI 3 \"memory_operand\" \"\"))\n-   (clobber (match_operand:DI 4 \"memory_operand\" \"\"))\n-   (clobber (match_scratch 5 \"\"))]\n-  \"reload_completed\"\n-  [(parallel [(set (match_dup 4) (fix:DI (match_dup 1)))\n-\t      (use (match_dup 2))\n-\t      (use (match_dup 3))\n-\t      (clobber (match_dup 5))])\n-   (set (match_dup 0) (match_dup 4))]\n-  \"\")\n-\n-(define_split \n-  [(set (match_operand:DI 0 \"memory_operand\" \"\")\n-\t(fix:DI (match_operand 1 \"register_operand\" \"\")))\n-   (use (match_operand:HI 2 \"memory_operand\" \"\"))\n-   (use (match_operand:HI 3 \"memory_operand\" \"\"))\n-   (clobber (match_operand:DI 4 \"memory_operand\" \"\"))\n-   (clobber (match_scratch 5 \"\"))]\n-  \"reload_completed\"\n-  [(parallel [(set (match_dup 0) (fix:DI (match_dup 1)))\n-\t      (use (match_dup 2))\n-\t      (use (match_dup 3))\n-\t      (clobber (match_dup 5))])]\n-  \"\")\n-\n-;; When SSE available, it is always faster to use it!\n-(define_insn \"fix_truncsfdi_sse\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(fix:DI (match_operand:SF 1 \"nonimmediate_operand\" \"x,xm\")))]\n-  \"TARGET_64BIT && TARGET_SSE\"\n-  \"cvttss2si{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"athlon_decode\" \"double,vector\")])\n-\n-;; Avoid vector decoded form of the instruction.\n-(define_peephole2\n-  [(match_scratch:SF 2 \"x\")\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(fix:DI (match_operand:SF 1 \"memory_operand\" \"\")))]\n-  \"TARGET_K8 && !optimize_size\"\n-  [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (fix:DI (match_dup 2)))]\n-  \"\")\n-\n-(define_insn \"fix_truncdfdi_sse\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(fix:DI (match_operand:DF 1 \"nonimmediate_operand\" \"Y,Ym\")))]\n-  \"TARGET_64BIT && TARGET_SSE2\"\n-  \"cvttsd2si{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseicvt,sseicvt\")\n-   (set_attr \"mode\" \"DF\")\n-   (set_attr \"athlon_decode\" \"double,vector\")])\n-\n-;; Avoid vector decoded form of the instruction.\n-(define_peephole2\n-  [(match_scratch:DF 2 \"Y\")\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(fix:DI (match_operand:DF 1 \"memory_operand\" \"\")))]\n-  \"TARGET_K8 && !optimize_size\"\n-  [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (fix:DI (match_dup 2)))]\n-  \"\")\n-\n ;; Signed conversion to SImode.\n \n (define_expand \"fix_truncxfsi2\"\n   [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t\t   (fix:SI (match_operand:XF 1 \"register_operand\" \"\")))\n+                   (fix:SI (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_80387\"\n-  \"\")\n-\n-(define_expand \"fix_truncdfsi2\"\n-  [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t           (fix:SI (match_operand:DF 1 \"register_operand\" \"\")))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_80387 || TARGET_SSE2\"\n {\n-  if (TARGET_SSE2)\n+  if (TARGET_FISTTP)\n    {\n-     rtx out = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (SImode);\n-     emit_insn (gen_fix_truncdfsi_sse (out, operands[1]));\n-     if (out != operands[0])\n-\temit_move_insn (operands[0], out);\n+     emit_insn (gen_fix_truncsi_fisttp_i387_1 (operands[0], operands[1]));\n      DONE;\n    }\n })\n \n-(define_expand \"fix_truncsfsi2\"\n+(define_expand \"fix_trunc<mode>si2\"\n   [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t           (fix:SI (match_operand:SF 1 \"register_operand\" \"\")))\n-\t      (clobber (reg:CC FLAGS_REG))])] \n-  \"TARGET_80387 || TARGET_SSE\"\n+\t           (fix:SI (match_operand:SSEMODEF 1 \"register_operand\" \"\")))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"TARGET_80387 || (SSE_FLOAT_MODE_P (<MODE>mode))\"\n {\n-  if (TARGET_SSE)\n+  if (TARGET_FISTTP\n+      && !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\n+   {\n+     emit_insn (gen_fix_truncsi_fisttp_i387_1 (operands[0], operands[1]));\n+     DONE;\n+   }\n+  if (SSE_FLOAT_MODE_P (<MODE>mode))\n    {\n      rtx out = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (SImode);\n-     emit_insn (gen_fix_truncsfsi_sse (out, operands[1]));\n+     emit_insn (gen_fix_trunc<mode>si_sse (out, operands[1]));\n      if (out != operands[0])\n \temit_move_insn (operands[0], out);\n      DONE;\n    }\n })\n \n-;; See the comments in i386.h near OPTIMIZE_MODE_SWITCHING for the description\n-;; of the machinery.\n-(define_insn_and_split \"*fix_truncsi_i387\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=m,?r\")\n-\t(fix:SI (match_operand 1 \"register_operand\" \"f,f\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n-   && !reload_completed && !reload_in_progress\n-   && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n-  \"#\"\n-  \"&& 1\"\n-  [(const_int 0)]\n+;; Signed conversion to HImode.\n+\n+(define_expand \"fix_trunc<mode>hi2\"\n+  [(parallel [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n+\t           (fix:HI (match_operand:X87MODEF 1 \"register_operand\" \"\")))\n+              (clobber (reg:CC FLAGS_REG))])]\n+  \"TARGET_80387\n+   && !(SSE_FLOAT_MODE_P (<MODE>mode) && (!TARGET_FISTTP || TARGET_SSE_MATH))\"\n {\n-  ix86_optimize_mode_switching = 1;\n-  operands[2] = assign_386_stack_local (HImode, 1);\n-  operands[3] = assign_386_stack_local (HImode, 2);\n-  if (memory_operand (operands[0], VOIDmode))\n-    emit_insn (gen_fix_truncsi_memory (operands[0], operands[1],\n-\t\t\t\t       operands[2], operands[3]));\n-  else\n-    {\n-      operands[4] = assign_386_stack_local (SImode, 0);\n-      emit_insn (gen_fix_truncsi_nomemory (operands[0], operands[1],\n-\t\t\t\t\t   operands[2], operands[3],\n-\t\t\t\t\t   operands[4]));\n-    }\n-  DONE;\n-}\n-  [(set_attr \"type\" \"fistp\")\n-   (set_attr \"i387_cw\" \"trunc\")\n-   (set_attr \"mode\" \"SI\")])\n+  if (TARGET_FISTTP)\n+   {\n+     emit_insn (gen_fix_trunchi_fisttp_i387_1 (operands[0], operands[1]));\n+     DONE;\n+   }\n+})\n \n-(define_insn \"fix_truncsi_nomemory\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=m,?r\")\n-\t(fix:SI (match_operand 1 \"register_operand\" \"f,f\")))\n-   (use (match_operand:HI 2 \"memory_operand\" \"m,m\"))\n-   (use (match_operand:HI 3 \"memory_operand\" \"m,m\"))\n-   (clobber (match_operand:SI 4 \"memory_operand\" \"=m,m\"))]\n-  \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n-   && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n-  \"#\"\n-  [(set_attr \"type\" \"fistp\")\n-   (set_attr \"i387_cw\" \"trunc\")\n-   (set_attr \"mode\" \"SI\")])\n+;; When SSE is available, it is always faster to use it!\n+(define_insn \"fix_truncsfdi_sse\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(fix:DI (match_operand:SF 1 \"nonimmediate_operand\" \"x,xm\")))]\n+  \"TARGET_64BIT && TARGET_SSE && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n+  \"cvttss2si{q}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"athlon_decode\" \"double,vector\")])\n \n-(define_insn \"fix_truncsi_memory\"\n-  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n-\t(fix:SI (match_operand 1 \"register_operand\" \"f\")))\n-   (use (match_operand:HI 2 \"memory_operand\" \"m\"))\n-   (use (match_operand:HI 3 \"memory_operand\" \"m\"))]\n-  \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n-   && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n-  \"* return output_fix_trunc (insn, operands);\"\n-  [(set_attr \"type\" \"fistp\")\n-   (set_attr \"i387_cw\" \"trunc\")\n-   (set_attr \"mode\" \"SI\")])\n+(define_insn \"fix_truncdfdi_sse\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(fix:DI (match_operand:DF 1 \"nonimmediate_operand\" \"Y,Ym\")))]\n+  \"TARGET_64BIT && TARGET_SSE2 && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n+  \"cvttsd2si{q}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"DF\")\n+   (set_attr \"athlon_decode\" \"double,vector\")])\n \n-;; When SSE available, it is always faster to use it!\n (define_insn \"fix_truncsfsi_sse\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(fix:SI (match_operand:SF 1 \"nonimmediate_operand\" \"x,xm\")))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n   \"cvttss2si\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"DF\")\n    (set_attr \"athlon_decode\" \"double,vector\")])\n \n-;; Avoid vector decoded form of the instruction.\n-(define_peephole2\n-  [(match_scratch:SF 2 \"x\")\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(fix:SI (match_operand:SF 1 \"memory_operand\" \"\")))]\n-  \"TARGET_K8 && !optimize_size\"\n-  [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (fix:SI (match_dup 2)))]\n-  \"\")\n-\n (define_insn \"fix_truncdfsi_sse\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(fix:SI (match_operand:DF 1 \"nonimmediate_operand\" \"Y,Ym\")))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n   \"cvttsd2si\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"DF\")\n    (set_attr \"athlon_decode\" \"double,vector\")])\n \n-;; Avoid vector decoded form of the instruction.\n+;; Avoid vector decoded forms of the instruction.\n (define_peephole2\n   [(match_scratch:DF 2 \"Y\")\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(fix:SI (match_operand:DF 1 \"memory_operand\" \"\")))]\n+   (set (match_operand:SSEMODEI24 0 \"register_operand\" \"\")\n+\t(fix:SSEMODEI24 (match_operand:DF 1 \"memory_operand\" \"\")))]\n   \"TARGET_K8 && !optimize_size\"\n   [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (fix:SI (match_dup 2)))]\n+   (set (match_dup 0) (fix:SSEMODEI24 (match_dup 2)))]\n   \"\")\n \n-(define_split \n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(fix:SI (match_operand 1 \"register_operand\" \"\")))\n-   (use (match_operand:HI 2 \"memory_operand\" \"\"))\n-   (use (match_operand:HI 3 \"memory_operand\" \"\"))\n-   (clobber (match_operand:SI 4 \"memory_operand\" \"\"))]\n-  \"reload_completed\"\n-  [(parallel [(set (match_dup 4) (fix:SI (match_dup 1)))\n-\t      (use (match_dup 2))\n-\t      (use (match_dup 3))])\n-   (set (match_dup 0) (match_dup 4))]\n+(define_peephole2\n+  [(match_scratch:SF 2 \"x\")\n+   (set (match_operand:SSEMODEI24 0 \"register_operand\" \"\")\n+\t(fix:SSEMODEI24 (match_operand:SF 1 \"memory_operand\" \"\")))]\n+  \"TARGET_K8 && !optimize_size\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (match_dup 0) (fix:SSEMODEI24 (match_dup 2)))]\n   \"\")\n \n-(define_split \n-  [(set (match_operand:SI 0 \"memory_operand\" \"\")\n-\t(fix:SI (match_operand 1 \"register_operand\" \"\")))\n-   (use (match_operand:HI 2 \"memory_operand\" \"\"))\n-   (use (match_operand:HI 3 \"memory_operand\" \"\"))\n-   (clobber (match_operand:SI 4 \"memory_operand\" \"\"))]\n-  \"reload_completed\"\n-  [(parallel [(set (match_dup 0) (fix:SI (match_dup 1)))\n-\t      (use (match_dup 2))\n-\t      (use (match_dup 3))])]\n-  \"\")\n+(define_insn_and_split \"fix_trunc<mode>_fisttp_i387_1\"\n+  [(set (match_operand:X87MODEI 0 \"nonimmediate_operand\" \"=m,?r\")\n+\t(fix:X87MODEI (match_operand 1 \"register_operand\" \"f,f\")))]\n+  \"TARGET_80387 && TARGET_FISTTP\n+   && FLOAT_MODE_P (GET_MODE (operands[1]))\n+   && !((SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n+\t && (TARGET_64BIT || <MODE>mode != DImode))\n+\t&& TARGET_SSE_MATH)\n+   && !(reload_completed || reload_in_progress)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  if (memory_operand (operands[0], VOIDmode))\n+    emit_insn (gen_fix_trunc<mode>_i387_fisttp (operands[0], operands[1]));\n+  else\n+    {\n+      operands[2] = assign_386_stack_local (<MODE>mode, 0);\n+      emit_insn (gen_fix_trunc<mode>_i387_fisttp_with_temp (operands[0],\n+\t\t\t\t\t\t\t    operands[1],\n+\t\t\t\t\t\t\t    operands[2]));\n+    }\n+  DONE;\n+}\n+  [(set_attr \"type\" \"fisttp\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-;; Signed conversion to HImode.\n+(define_insn \"fix_trunc<mode>_i387_fisttp\"\n+  [(set (match_operand:X87MODEI 0 \"memory_operand\" \"=m\")\n+\t(fix:X87MODEI (match_operand 1 \"register_operand\" \"f\")))\n+   (clobber (match_scratch:XF 2 \"=&1f\"))]\n+  \"TARGET_80387 && TARGET_FISTTP\n+   && FLOAT_MODE_P (GET_MODE (operands[1]))\n+   && !((SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n+\t && (TARGET_64BIT || <MODE>mode != DImode))\n+\t&& TARGET_SSE_MATH)\"\n+  \"* return output_fix_trunc (insn, operands, 1);\"\n+  [(set_attr \"type\" \"fisttp\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"fix_truncxfhi2\"\n-  [(parallel [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n-                   (fix:HI (match_operand:XF 1 \"register_operand\" \"\")))\n-              (clobber (reg:CC FLAGS_REG))])] \n-  \"TARGET_80387\"\n-  \"\")\n+(define_insn \"fix_trunc<mode>_i387_fisttp_with_temp\"\n+  [(set (match_operand:X87MODEI 0 \"nonimmediate_operand\" \"=m,?r\")\n+\t(fix:X87MODEI (match_operand 1 \"register_operand\" \"f,f\")))\n+   (clobber (match_operand:X87MODEI 2 \"memory_operand\" \"=m,m\"))\n+   (clobber (match_scratch:XF 3 \"=&1f,&1f\"))]\n+  \"TARGET_80387 && TARGET_FISTTP\n+   && FLOAT_MODE_P (GET_MODE (operands[1]))\n+   && !((SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n+\t&& (TARGET_64BIT || <MODE>mode != DImode))\n+\t&& TARGET_SSE_MATH)\"\n+  \"#\"\n+  [(set_attr \"type\" \"fisttp\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"fix_truncdfhi2\"\n-  [(parallel [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n-\t           (fix:HI (match_operand:DF 1 \"register_operand\" \"\")))\n-              (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_80387 && !TARGET_SSE2\"\n+(define_split\n+  [(set (match_operand:X87MODEI 0 \"register_operand\" \"\")\n+\t(fix:X87MODEI (match_operand 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:X87MODEI 2 \"memory_operand\" \"\"))\n+   (clobber (match_scratch 3 \"\"))]\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 2) (fix:X87MODEI (match_dup 1)))\n+\t      (clobber (match_dup 3))])\n+   (set (match_dup 0) (match_dup 2))]\n   \"\")\n \n-(define_expand \"fix_truncsfhi2\"\n-  [(parallel [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n-\t           (fix:HI (match_operand:SF 1 \"register_operand\" \"\")))\n-               (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_80387 && !TARGET_SSE\"\n+(define_split\n+  [(set (match_operand:X87MODEI 0 \"memory_operand\" \"\")\n+\t(fix:X87MODEI (match_operand 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:X87MODEI 2 \"memory_operand\" \"\"))\n+   (clobber (match_scratch 3 \"\"))]\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (fix:X87MODEI (match_dup 1)))\n+\t      (clobber (match_dup 3))])]\n   \"\")\n \n ;; See the comments in i386.h near OPTIMIZE_MODE_SWITCHING for the description\n-;; of the machinery.\n-(define_insn_and_split \"*fix_trunchi_i387\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=m,?r\")\n-\t(fix:HI (match_operand 1 \"register_operand\" \"f,f\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n-   && !reload_completed && !reload_in_progress\n-   && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n+;; of the machinery. Please note the clobber of FLAGS_REG. In i387 control\n+;; word calculation (inserted by LCM in mode switching pass) a FLAGS_REG\n+;; clobbering insns can be used. Look at emit_i387_cw_initialization ()\n+;; function in i386.c.\n+(define_insn_and_split \"*fix_trunc<mode>_i387_1\"\n+  [(set (match_operand:X87MODEI 0 \"nonimmediate_operand\" \"=m,?r\")\n+\t(fix:X87MODEI (match_operand 1 \"register_operand\" \"f,f\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_80387 && !TARGET_FISTTP\n+   && FLOAT_MODE_P (GET_MODE (operands[1]))\n+   && !(SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n+\t && (TARGET_64BIT || <MODE>mode != DImode))\n+   && !(reload_completed || reload_in_progress)\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -4370,70 +4254,129 @@\n   operands[2] = assign_386_stack_local (HImode, 1);\n   operands[3] = assign_386_stack_local (HImode, 2);\n   if (memory_operand (operands[0], VOIDmode))\n-    emit_insn (gen_fix_trunchi_memory (operands[0], operands[1],\n-\t\t\t\t       operands[2], operands[3]));\n+    emit_insn (gen_fix_trunc<mode>_i387 (operands[0], operands[1],\n+\t\t\t\t\t operands[2], operands[3]));\n   else\n     {\n-      operands[4] = assign_386_stack_local (HImode, 0);\n-      emit_insn (gen_fix_trunchi_nomemory (operands[0], operands[1],\n-\t\t\t\t\t   operands[2], operands[3],\n-\t\t\t\t\t   operands[4]));\n+      operands[4] = assign_386_stack_local (<MODE>mode, 0);\n+      emit_insn (gen_fix_trunc<mode>_i387_with_temp (operands[0], operands[1],\n+\t\t\t\t\t\t     operands[2], operands[3],\n+\t\t\t\t\t\t     operands[4]));\n     }\n   DONE;\n }\n   [(set_attr \"type\" \"fistp\")\n    (set_attr \"i387_cw\" \"trunc\")\n-   (set_attr \"mode\" \"HI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"fix_truncdi_i387\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n+\t(fix:DI (match_operand 1 \"register_operand\" \"f\")))\n+   (use (match_operand:HI 2 \"memory_operand\" \"m\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"m\"))\n+   (clobber (match_scratch:XF 4 \"=&1f\"))]\n+  \"TARGET_80387 && !TARGET_FISTTP\n+   && FLOAT_MODE_P (GET_MODE (operands[1]))\n+   && !(TARGET_64BIT && SSE_FLOAT_MODE_P (GET_MODE (operands[1])))\"\n+  \"* return output_fix_trunc (insn, operands, 0);\"\n+  [(set_attr \"type\" \"fistp\")\n+   (set_attr \"i387_cw\" \"trunc\")\n+   (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"fix_trunchi_nomemory\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=m,?r\")\n-\t(fix:HI (match_operand 1 \"register_operand\" \"f,f\")))\n+(define_insn \"fix_truncdi_i387_with_temp\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,?r\")\n+\t(fix:DI (match_operand 1 \"register_operand\" \"f,f\")))\n    (use (match_operand:HI 2 \"memory_operand\" \"m,m\"))\n    (use (match_operand:HI 3 \"memory_operand\" \"m,m\"))\n-   (clobber (match_operand:HI 4 \"memory_operand\" \"=m,m\"))]\n-  \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n-   && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n+   (clobber (match_operand:DI 4 \"memory_operand\" \"=m,m\"))\n+   (clobber (match_scratch:XF 5 \"=&1f,&1f\"))]\n+  \"TARGET_80387 && !TARGET_FISTTP\n+   && FLOAT_MODE_P (GET_MODE (operands[1]))\n+   && !(TARGET_64BIT && SSE_FLOAT_MODE_P (GET_MODE (operands[1])))\"\n   \"#\"\n   [(set_attr \"type\" \"fistp\")\n    (set_attr \"i387_cw\" \"trunc\")\n-   (set_attr \"mode\" \"HI\")])\n+   (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"fix_trunchi_memory\"\n-  [(set (match_operand:HI 0 \"memory_operand\" \"=m\")\n-\t(fix:HI (match_operand 1 \"register_operand\" \"f\")))\n+(define_split \n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(fix:DI (match_operand 1 \"register_operand\" \"\")))\n+   (use (match_operand:HI 2 \"memory_operand\" \"\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"\"))\n+   (clobber (match_operand:DI 4 \"memory_operand\" \"\"))\n+   (clobber (match_scratch 5 \"\"))]\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 4) (fix:DI (match_dup 1)))\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 5))])\n+   (set (match_dup 0) (match_dup 4))]\n+  \"\")\n+\n+(define_split \n+  [(set (match_operand:DI 0 \"memory_operand\" \"\")\n+\t(fix:DI (match_operand 1 \"register_operand\" \"\")))\n+   (use (match_operand:HI 2 \"memory_operand\" \"\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"\"))\n+   (clobber (match_operand:DI 4 \"memory_operand\" \"\"))\n+   (clobber (match_scratch 5 \"\"))]\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (fix:DI (match_dup 1)))\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 5))])]\n+  \"\")\n+\n+(define_insn \"fix_trunc<mode>_i387\"\n+  [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"=m\")\n+\t(fix:X87MODEI12 (match_operand 1 \"register_operand\" \"f\")))\n    (use (match_operand:HI 2 \"memory_operand\" \"m\"))\n    (use (match_operand:HI 3 \"memory_operand\" \"m\"))]\n-  \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n+  \"TARGET_80387 && !TARGET_FISTTP\n+   && FLOAT_MODE_P (GET_MODE (operands[1]))\n    && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n-  \"* return output_fix_trunc (insn, operands);\"\n+  \"* return output_fix_trunc (insn, operands, 0);\"\n   [(set_attr \"type\" \"fistp\")\n    (set_attr \"i387_cw\" \"trunc\")\n-   (set_attr \"mode\" \"HI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"fix_trunc<mode>_i387_with_temp\"\n+  [(set (match_operand:X87MODEI12 0 \"nonimmediate_operand\" \"=m,?r\")\n+\t(fix:X87MODEI12 (match_operand 1 \"register_operand\" \"f,f\")))\n+   (use (match_operand:HI 2 \"memory_operand\" \"m,m\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"m,m\"))\n+   (clobber (match_operand:X87MODEI12 4 \"memory_operand\" \"=m,m\"))]\n+  \"TARGET_80387 && !TARGET_FISTTP\n+   && FLOAT_MODE_P (GET_MODE (operands[1]))\n+   && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n+  \"#\"\n+  [(set_attr \"type\" \"fistp\")\n+   (set_attr \"i387_cw\" \"trunc\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_split \n-  [(set (match_operand:HI 0 \"memory_operand\" \"\")\n-\t(fix:HI (match_operand 1 \"register_operand\" \"\")))\n+  [(set (match_operand:X87MODEI12 0 \"register_operand\" \"\")\n+\t(fix:X87MODEI12 (match_operand 1 \"register_operand\" \"\")))\n    (use (match_operand:HI 2 \"memory_operand\" \"\"))\n    (use (match_operand:HI 3 \"memory_operand\" \"\"))\n-   (clobber (match_operand:HI 4 \"memory_operand\" \"\"))]\n+   (clobber (match_operand:X87MODEI12 4 \"memory_operand\" \"\"))]\n   \"reload_completed\"\n-  [(parallel [(set (match_dup 0) (fix:HI (match_dup 1)))\n+  [(parallel [(set (match_dup 4) (fix:X87MODEI12 (match_dup 1)))\n \t      (use (match_dup 2))\n-\t      (use (match_dup 3))])]\n+\t      (use (match_dup 3))])\n+   (set (match_dup 0) (match_dup 4))]\n   \"\")\n \n (define_split \n-  [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(fix:HI (match_operand 1 \"register_operand\" \"\")))\n+  [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"\")\n+\t(fix:X87MODEI12 (match_operand 1 \"register_operand\" \"\")))\n    (use (match_operand:HI 2 \"memory_operand\" \"\"))\n    (use (match_operand:HI 3 \"memory_operand\" \"\"))\n-   (clobber (match_operand:HI 4 \"memory_operand\" \"\"))]\n+   (clobber (match_operand:X87MODEI12 4 \"memory_operand\" \"\"))]\n   \"reload_completed\"\n-  [(parallel [(set (match_dup 4) (fix:HI (match_dup 1)))\n+  [(parallel [(set (match_dup 0) (fix:X87MODEI12 (match_dup 1)))\n \t      (use (match_dup 2))\n-\t      (use (match_dup 3))\n-\t      (clobber (match_dup 4))])\n-   (set (match_dup 0) (match_dup 4))]\n+\t      (use (match_dup 3))])]\n   \"\")\n \n (define_insn \"x86_fnstcw_1\""}]}