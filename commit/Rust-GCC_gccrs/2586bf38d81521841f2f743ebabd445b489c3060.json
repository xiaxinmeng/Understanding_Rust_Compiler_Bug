{"sha": "2586bf38d81521841f2f743ebabd445b489c3060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU4NmJmMzhkODE1MjE4NDFmMmY3NDNlYmFiZDQ0NWI0ODljMzA2MA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-04-19T16:01:38Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-04-19T16:01:38Z"}, "message": "os_dep.c, gc_locks.h: Import CRIS port by Simon Posnjak from gc6.4.\n\n\t* os_dep.c, include/private/gc_locks.h: Import CRIS port by\n\tSimon Posnjak from gc6.4.\n\t* include/private/gcconfig.h: Ditto.  Add M32R note from gc6.4.\n\nFrom-SVN: r98414", "tree": {"sha": "045f7a91a4f24434c2a5434be785d111b787706f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/045f7a91a4f24434c2a5434be785d111b787706f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2586bf38d81521841f2f743ebabd445b489c3060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2586bf38d81521841f2f743ebabd445b489c3060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2586bf38d81521841f2f743ebabd445b489c3060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2586bf38d81521841f2f743ebabd445b489c3060/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9be3f9b143399e0e4d65faab5aa9bd46b898d735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be3f9b143399e0e4d65faab5aa9bd46b898d735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9be3f9b143399e0e4d65faab5aa9bd46b898d735"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "2645277d7cc9344ff28727df618c2872bec55cf2", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2586bf38d81521841f2f743ebabd445b489c3060/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2586bf38d81521841f2f743ebabd445b489c3060/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=2586bf38d81521841f2f743ebabd445b489c3060", "patch": "@@ -1,3 +1,9 @@\n+2005-04-19  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* os_dep.c, include/private/gc_locks.h: Import CRIS port by\n+\tSimon Posnjak from gc6.4.\n+\t* include/private/gcconfig.h: Ditto.  Add M32R note from gc6.4.\n+\n 2005-04-17  David S. Miller  <davem@davemloft.net>\n \n \t* include/private/gcconfig.h (sparc-linux): Use LINUX_STACKBOTTOM."}, {"sha": "46605caf72dadddea3f4b88fafc5825de8215845", "filename": "boehm-gc/include/private/gc_locks.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2586bf38d81521841f2f743ebabd445b489c3060/boehm-gc%2Finclude%2Fprivate%2Fgc_locks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2586bf38d81521841f2f743ebabd445b489c3060/boehm-gc%2Finclude%2Fprivate%2Fgc_locks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgc_locks.h?ref=2586bf38d81521841f2f743ebabd445b489c3060", "patch": "@@ -215,6 +215,30 @@\n         }\n #       define GC_TEST_AND_SET_DEFINED\n #    endif /* ARM32 */\n+#    ifdef CRIS\n+        inline static int GC_test_and_set(volatile unsigned int *addr) {\n+\t  /* Ripped from linuxthreads/sysdeps/cris/pt-machine.h.\t*/\n+\t  /* Included with Hans-Peter Nilsson's permission.\t\t*/\n+\t  register unsigned long int ret;\n+\n+\t  /* Note the use of a dummy output of *addr to expose the write.\n+\t   * The memory barrier is to stop *other* writes being moved past\n+\t   * this code.\n+\t   */\n+\t    __asm__ __volatile__(\"clearf\\n\"\n+        \t\t         \"0:\\n\\t\"\n+                    \t\t \"movu.b [%2],%0\\n\\t\"\n+                    \t\t \"ax\\n\\t\"\n+                    \t\t \"move.b %3,[%2]\\n\\t\"\n+                    \t\t \"bwf 0b\\n\\t\"\n+                    \t\t \"clearf\"\n+                    \t\t : \"=&r\" (ret), \"=m\" (*addr)\n+                    \t\t : \"r\" (addr), \"r\" ((int) 1), \"m\" (*addr)\n+                    \t\t : \"memory\");\n+\t    return ret;\n+        }\n+#       define GC_TEST_AND_SET_DEFINED\n+#    endif /* CRIS */\n #    ifdef S390\n        inline static int GC_test_and_set(volatile unsigned int *addr) {\n          int ret;"}, {"sha": "5013dbd596b2f5445e5a7311716d45e1ee2d4253", "filename": "boehm-gc/include/private/gcconfig.h", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2586bf38d81521841f2f743ebabd445b489c3060/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2586bf38d81521841f2f743ebabd445b489c3060/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h?ref=2586bf38d81521841f2f743ebabd445b489c3060", "patch": "@@ -229,6 +229,12 @@\n #    define ARM32\n #    define mach_type_known\n # endif\n+# if defined(LINUX) && defined(__cris__)\n+#    ifndef CRIS\n+#\tdefine CRIS\n+#    endif\n+#    define mach_type_known\n+# endif\n # if defined(LINUX) && (defined(powerpc) || defined(__powerpc__) || defined(powerpc64) || defined(__powerpc64__))\n #    define POWERPC\n #    define mach_type_known\n@@ -476,6 +482,8 @@\n \t\t    /*\t\t   POWERPC    ==> IBM/Apple PowerPC\t*/\n \t\t    /*\t\t\t(MACOS(<=9),DARWIN(incl.MACOSX),*/\n \t\t    /*\t\t\t LINUX, NETBSD, NOSYS variants)\t*/\n+\t\t    /*\t\t   CRIS       ==> Axis Etrax\t\t*/\n+\t\t    /*\t\t   M32R\t      ==> Renesas M32R\t\t*/\n \n \n /*\n@@ -1801,6 +1809,19 @@\n #   endif\n #endif\n \n+# ifdef CRIS\n+#   define MACH_TYPE \"CRIS\"\n+#   define CPP_WORDSZ 32\n+#   define ALIGNMENT 1\n+#   define OS_TYPE \"LINUX\"\n+#   define DYNAMIC_LOADING\n+#   define LINUX_STACKBOTTOM\n+#   define USE_GENERIC_PUSH_REGS\n+#   define SEARCH_FOR_DATA_START\n+      extern int _end[];\n+#   define DATAEND (_end)\n+# endif\n+\n # ifdef SH\n #   define MACH_TYPE \"SH\"\n #   define ALIGNMENT 4\n@@ -2066,7 +2087,7 @@\n # endif\n \n # if defined(HP_PA) || defined(M88K) || defined(POWERPC) && !defined(DARWIN) \\\n-\t     || defined(LINT) || defined(MSWINCE) || defined(ARM32) \\\n+\t     || defined(LINT) || defined(MSWINCE) || defined(ARM32) || defined(CRIS) \\\n \t     || (defined(I386) && defined(__LCC__))\n \t/* Use setjmp based hack to mark from callee-save registers.    */\n \t/* The define should move to the individual platform \t\t*/"}, {"sha": "c4775c1978ba29e5336ca3679180c5ffea77269e", "filename": "boehm-gc/os_dep.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2586bf38d81521841f2f743ebabd445b489c3060/boehm-gc%2Fos_dep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2586bf38d81521841f2f743ebabd445b489c3060/boehm-gc%2Fos_dep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fos_dep.c?ref=2586bf38d81521841f2f743ebabd445b489c3060", "patch": "@@ -2519,7 +2519,11 @@ SIG_PF GC_old_segv_handler;\t/* Also old MSWIN32 ACCESS_VIOLATION filter */\n #               if defined(ARM32)\n                   char * addr = (char *)sc.fault_address;\n #               else\n-\t\t  --> architecture not supported\n+#\t\t  if defined(CRIS)\n+\t\t    char * addr = (char *)sc.regs.csraddr;\n+#\t\t  else\n+\t\t    --> architecture not supported\n+#\t\t  endif\n #               endif\n #\t      endif\n #\t    endif"}]}