{"sha": "c068c63834776a4ee7cc563b4713fc867d11b5a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA2OGM2MzgzNDc3NmE0ZWU3Y2M1NjNiNDcxM2ZjODY3ZDExYjVhNQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2003-03-10T19:45:30Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2003-03-10T19:45:30Z"}, "message": "[multiple changes]\n\n2003-03-10  2003-02-27  Mohan Embar  <gnustuff@thisiscool.com>\n\n        * include/jvm.h: removed declaration of _Jv_ThisExecutable()\n        setter; made return value of getter const char* instead of char*\n        * prims.cc: removed all references to _Jv_ThisExecutable().\n        These are in the platform-specific sections now.\n        * posix.cc: define platform-specific _Jv_ThisExecutable().\n        Handle DISABLE_MAIN_ARGS and HAVE_PROC_SELF_EXE cases\n        * win32.cc: define platform-specific _Jv_ThisExecutable()\n        using GetModuleFilename()\n        * java/lang/natRuntime.cc: set gnu.gcj.progname property\n        to argv[0] instead of _Jv_ThisExecutable()\n\n2003-03-10  Ranjit Mathew  <rmathew@hotmail.com>\n\n        * gnu/gcj/runtime/NameFinder.java (usingAddr2name): New flag\n        that is set if we are using addr2name.awk instead of addr2line.\n        (NameFinder): Set usingAddr2name if using addr2name.awk.\n        (getExternalLabel): New native method to convert a method\n        name to an external label.\n        (lookup): Convert name given by addr2line to an external label\n        before demangling.\n\n        * gnu/gcj/runtime/natNameFinder.cc (LABEL_PREFIX): New string\n        constant representing the prefix attached to method names to\n        convert them to an external label.\n        (gnu::gcj::runtime::NameFinder::getExternalLabel): Define\n        using LABEL_PREFIX.\n\nFrom-SVN: r64111", "tree": {"sha": "a4c3279fd9e6344dedbfac2337937e049b960715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4c3279fd9e6344dedbfac2337937e049b960715"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c068c63834776a4ee7cc563b4713fc867d11b5a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c068c63834776a4ee7cc563b4713fc867d11b5a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c068c63834776a4ee7cc563b4713fc867d11b5a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c068c63834776a4ee7cc563b4713fc867d11b5a5/comments", "author": null, "committer": null, "parents": [{"sha": "630287af48fcf25759f9e96d0ef39db90b5fa3af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630287af48fcf25759f9e96d0ef39db90b5fa3af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630287af48fcf25759f9e96d0ef39db90b5fa3af"}], "stats": {"total": 163, "additions": 127, "deletions": 36}, "files": [{"sha": "7fd8e12fa31ac1706c8a2f2acd72b46542e1487c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c068c63834776a4ee7cc563b4713fc867d11b5a5", "patch": "@@ -1,3 +1,32 @@\n+2003-03-10  2003-02-27  Mohan Embar  <gnustuff@thisiscool.com>\n+\n+\t* include/jvm.h: removed declaration of _Jv_ThisExecutable()\n+\tsetter; made return value of getter const char* instead of char*\n+\t* prims.cc: removed all references to _Jv_ThisExecutable().\n+\tThese are in the platform-specific sections now.\n+\t* posix.cc: define platform-specific _Jv_ThisExecutable().\n+\tHandle DISABLE_MAIN_ARGS and HAVE_PROC_SELF_EXE cases\n+\t* win32.cc: define platform-specific _Jv_ThisExecutable()\n+\tusing GetModuleFilename()\n+\t* java/lang/natRuntime.cc: set gnu.gcj.progname property\n+\tto argv[0] instead of _Jv_ThisExecutable()\n+\n+2003-03-10  Ranjit Mathew  <rmathew@hotmail.com>\n+\n+\t* gnu/gcj/runtime/NameFinder.java (usingAddr2name): New flag\n+\tthat is set if we are using addr2name.awk instead of addr2line.\n+\t(NameFinder): Set usingAddr2name if using addr2name.awk.\n+\t(getExternalLabel): New native method to convert a method \n+\tname to an external label.\n+\t(lookup): Convert name given by addr2line to an external label\n+\tbefore demangling.\n+\n+\t* gnu/gcj/runtime/natNameFinder.cc (LABEL_PREFIX): New string\n+\tconstant representing the prefix attached to method names to\n+\tconvert them to an external label.\n+\t(gnu::gcj::runtime::NameFinder::getExternalLabel): Define \n+\tusing LABEL_PREFIX.\n+\n 2003-03-10  Tom Tromey  <tromey@redhat.com>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "19820c1bd6bb28e9284440ae498a42805d0bba9a", "filename": "libjava/gnu/gcj/runtime/NameFinder.java", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Fgnu%2Fgcj%2Fruntime%2FNameFinder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Fgnu%2Fgcj%2Fruntime%2FNameFinder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FNameFinder.java?ref=c068c63834776a4ee7cc563b4713fc867d11b5a5", "patch": "@@ -102,6 +102,11 @@\n   private BufferedWriter addr2lineOut;\n   private BufferedReader addr2lineIn;\n \n+  /**\n+   * Flag set if using addr2name.awk instead of addr2line from binutils.\n+   */\n+  private boolean usingAddr2name = false;\n+\n   /**\n    * Creates a new NameFinder. Call close to get rid of any resources\n    * created while using the <code>lookup</code> methods.\n@@ -142,6 +147,7 @@ public NameFinder()\n \t      {\n \t\tString[] exec = new String[] {\"addr2name.awk\", executable};\n \t\taddr2line = runtime.exec(exec);\n+\t\tusingAddr2name = true;\n \t      }\n \t    catch (IOException ioe2) { addr2line = null; }\n \t  }\n@@ -180,6 +186,11 @@ public NameFinder()\n    */\n   native private String getAddrAsString(RawData addrs, int n);\n \n+  /**\n+   * Returns the label that is exported for the given method name.\n+   */\n+  native private String getExternalLabel(String name);\n+\n   /**\n    * If nth element of stack is an interpreted frame, return the\n    * element representing the method being interpreted.\n@@ -212,6 +223,15 @@ private StackTraceElement lookup(RawData addrs, int n)\n \t\taddr2lineOut.flush();\n \t\tname = addr2lineIn.readLine();\n \t\tfile = addr2lineIn.readLine();\n+\n+                // addr2line uses symbolic debugging information instead\n+                // of the actually exported labels as addr2name.awk does.\n+                // This name might need some modification, depending on \n+                // the system, to make it a label like that returned \n+                // by addr2name.awk or dladdr.\n+                if (! usingAddr2name)\n+                  if (name != null && ! \"??\".equals (name))\n+                    name = getExternalLabel (name);\n \t      }\n \t    catch (IOException ioe) { addr2line = null; }\n \t  }"}, {"sha": "6605e38059110fc8cf32a17a630d4fcf07c608e3", "filename": "libjava/gnu/gcj/runtime/natNameFinder.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatNameFinder.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatNameFinder.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatNameFinder.cc?ref=c068c63834776a4ee7cc563b4713fc867d11b5a5", "patch": "@@ -15,6 +15,8 @@ details.  */\n \n #include <config.h>\n \n+#include <string.h>\n+\n #include <gcj/cni.h>\n #include <jvm.h>\n #include <java/lang/String.h>\n@@ -28,6 +30,37 @@ details.  */\n #include <dlfcn.h>\n #endif\n \n+// On some systems, a prefix is attached to a method name before\n+// it is exported as a label. The GCC preprocessor predefines \n+// this prefix as the macro __USER_LABEL_PREFIX__ which expands to\n+// a string (not string constant) representing the prefix, if any.\n+#undef LABEL_PREFIX\n+#ifdef __USER_LABEL_PREFIX__\n+\n+#define USER_LABEL_PREFIX_STRING_0(s) #s\n+#define USER_LABEL_PREFIX_STRING(s) USER_LABEL_PREFIX_STRING_0(s)\n+\n+#define LABEL_PREFIX USER_LABEL_PREFIX_STRING(__USER_LABEL_PREFIX__)\n+\n+#else /* __USER_LABEL_PREFIX__ */\n+\n+#define LABEL_PREFIX \"\"\n+\n+#endif /* ! __USER_LABEL_PREFIX__ */\n+\n+java::lang::String*\n+gnu::gcj::runtime::NameFinder::getExternalLabel (java::lang::String* name)\n+{\n+  jsize nameLen = JvGetStringUTFLength (name);\n+  jsize pfxLen = strlen (LABEL_PREFIX);\n+  char *newName = (char *) JvMalloc (pfxLen + nameLen + 1);\n+  *(newName + 0) = '\\0';\n+  strcpy (newName, LABEL_PREFIX);\n+  JvGetStringUTFRegion (name, 0, nameLen, newName + pfxLen);\n+  *(newName + pfxLen + nameLen) = '\\0';\n+  return JvNewStringLatin1 (newName);\n+}\n+\n java::lang::String*\n gnu::gcj::runtime::NameFinder::getExecutable (void)\n {"}, {"sha": "38f675a1fefec016d1f86f413bd208ecf8c9544c", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=c068c63834776a4ee7cc563b4713fc867d11b5a5", "patch": "@@ -352,9 +352,8 @@ extern \"C\"\n   jlong _Jv_remJ (jlong, jlong);\n }\n \n-/* get/set the name of the running executable. */\n-extern char *_Jv_ThisExecutable (void);\n-extern void _Jv_ThisExecutable (const char *);\n+/* Get the name of the running executable. */\n+extern const char *_Jv_ThisExecutable (void);\n \n /* Return a pointer to a symbol in executable or loaded library.  */\n void *_Jv_FindSymbolInExecutable (const char *);"}, {"sha": "237b0d1be4b7007d5991fc8ad6252004389078ce", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=c068c63834776a4ee7cc563b4713fc867d11b5a5", "patch": "@@ -108,6 +108,10 @@ _Jv_SetDLLSearchPath (const char *)\n \n \f\n \n+extern int _Jv_argc;\n+extern const char **_Jv_argv;\n+  // our process' command line arguments\n+\n void\n java::lang::Runtime::exitInternal (jint status)\n {\n@@ -582,7 +586,7 @@ java::lang::Runtime::insertSystemProperties (java::util::Properties *newprops)\n     }\n \n   // The name used to invoke this process (argv[0] in C).\n-  SET (\"gnu.gcj.progname\", _Jv_ThisExecutable());\n+  SET (\"gnu.gcj.progname\", _Jv_argv[0]);\n \n   // Allow platform specific settings and overrides.\n   _Jv_platform_initProperties (newprops);"}, {"sha": "2f808334d7c8c237d98103d2e493ac2b854641b8", "filename": "libjava/posix.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Fposix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Fposix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix.cc?ref=c068c63834776a4ee7cc563b4713fc867d11b5a5", "patch": "@@ -25,6 +25,26 @@ details.  */\n extern \"C\" unsigned long long _clock (void);\n #endif\n \n+// platform-specific executable name\n+extern const char **_Jv_argv;\n+\n+#if defined(HAVE_PROC_SELF_EXE)\n+static char exec_name[20];\n+  // initialized in _Jv_platform_initialize()\n+#endif\n+\n+const char *_Jv_ThisExecutable (void)\n+{\n+#if defined(DISABLE_MAIN_ARGS)\n+  return \"[Embedded App]\";\n+#elif defined(HAVE_PROC_SELF_EXE)\n+  return exec_name;\n+    // initialized in _Jv_platform_initialize()\n+#else\n+  return _Jv_argv[0];\n+#endif\n+}\n+\n // gettimeofday implementation.\n jlong\n _Jv_platform_gettimeofday ()\n@@ -62,6 +82,11 @@ _Jv_platform_initialize (void)\n #else\n   signal (SIGPIPE, SIG_IGN);\n #endif\n+\n+#if defined (HAVE_PROC_SELF_EXE)\n+  // Compute our executable name\n+  sprintf (exec_name, \"/proc/%d/exe\", getpid ());\n+#endif\n }\n \n // Set platform-specific System properties."}, {"sha": "dc05d4b96ffda60c11ae4d95db303e2c21f65d4a", "filename": "libjava/prims.cc", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=c068c63834776a4ee7cc563b4713fc867d11b5a5", "patch": "@@ -86,9 +86,6 @@ const char *_Jv_Jar_Class_Path;\n property_pair *_Jv_Environment_Properties;\n #endif\n \n-// The name of this executable.\n-static char *_Jv_execName;\n-\n // Stash the argv pointer to benefit native libraries that need it.\n const char **_Jv_argv;\n int _Jv_argc;\n@@ -707,22 +704,6 @@ static JArray<jstring> *arg_vec;\n // The primary thread.\n static java::lang::Thread *main_thread;\n \n-char *\n-_Jv_ThisExecutable (void)\n-{\n-  return _Jv_execName;\n-}\n-\n-void\n-_Jv_ThisExecutable (const char *name)\n-{\n-  if (name)\n-    {\n-      _Jv_execName = (char *) _Jv_Malloc (strlen (name) + 1);\n-      strcpy (_Jv_execName, name);\n-    }\n-}\n-\n #ifndef DISABLE_GETENV_PROPERTIES\n \n static char *\n@@ -960,19 +941,6 @@ _Jv_RunMain (jclass klass, const char *name, int argc, const char **argv,\n \n   java::lang::Runtime *runtime = NULL;\n \n-\n-#ifdef DISABLE_MAIN_ARGS\n-  _Jv_ThisExecutable (\"[Embedded App]\");\n-#else\n-#ifdef HAVE_PROC_SELF_EXE\n-  char exec_name[20];\n-  sprintf (exec_name, \"/proc/%d/exe\", getpid ());\n-  _Jv_ThisExecutable (exec_name);\n-#else\n-  _Jv_ThisExecutable (argv[0]);\n-#endif /* HAVE_PROC_SELF_EXE */\n-#endif /* DISABLE_MAIN_ARGS */\n-\n   try\n     {\n       // Set this very early so that it is seen when java.lang.System"}, {"sha": "6fc2de08760c8bca5e023823852faed1d5791d32", "filename": "libjava/win32.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Fwin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c068c63834776a4ee7cc563b4713fc867d11b5a5/libjava%2Fwin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fwin32.cc?ref=c068c63834776a4ee7cc563b4713fc867d11b5a5", "patch": "@@ -28,6 +28,15 @@ win32_exception_handler (LPEXCEPTION_POINTERS e)\n     return EXCEPTION_CONTINUE_SEARCH;\n }\n \n+// Platform-specific executable name\n+static char exec_name[MAX_PATH];\n+  // initialized in _Jv_platform_initialize()\n+\n+const char *_Jv_ThisExecutable (void)\n+{\n+  return exec_name;\n+}\n+\n // Platform-specific VM initialization.\n void\n _Jv_platform_initialize (void)\n@@ -37,8 +46,12 @@ _Jv_platform_initialize (void)\n   if (WSAStartup (MAKEWORD (1, 1), &data))\n     MessageBox (NULL, \"Error initialising winsock library.\", \"Error\",\n \t\tMB_OK | MB_ICONEXCLAMATION);\n+  \n   // Install exception handler\n   SetUnhandledExceptionFilter (win32_exception_handler);\n+  \n+  // Initialize our executable name\n+  GetModuleFileName(NULL, exec_name, sizeof(exec_name));\n }\n \n // gettimeofday implementation."}]}