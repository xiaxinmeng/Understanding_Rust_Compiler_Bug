{"sha": "7af1cf8342f73410aba4a9edf0c54b918a6a775d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FmMWNmODM0MmY3MzQxMGFiYTRhOWVkZjBjNTRiOTE4YTZhNzc1ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-29T11:32:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-29T11:32:18Z"}, "message": "[multiple changes]\n\n2012-10-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb: Minor reformatting.\n\n2012-10-29  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Minor rewording.\n\n2012-10-29  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.ads (Is_Expanded_Dispatching_Call): New subprogram.\n\t* exp_disp.adb (Expand_Dispatching_Call): No action needed if the\n\tcall has been already expanded.\n\t(Is_Expanded_Dispatching_Call): New subprogram.\n\t* sem_disp.adb (Propagate_Tag): No action needed if the call\n\thas been already expanded.\n\n2012-10-29  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch9.adb (Create_Index_And_Data): Remove local\n\tvariable Index_Typ and its uses. The type of the index is now\n\tSystem.Tasking.Entry_Index. Update all related comments.\n\t* rtsfind.ads: Add RE_Entry_Index in tables RE_Id and RE_Unit_Table.\n\t* s-taskin.adb (Number_Of_Entries): The return type is now Entry_Index.\n\t* s-taskin.ads: The index type of Task_Entry_Names_Array is now\n\tEntry_Index.\n\t(Number_Of_Entries): The return type is now Entry_Index.\n\t* s-tpoben.adb (Number_Of_Entries): The return type is now Entry_Index.\n\t* s-tpoben.ads: The index type of Protected_Entry_Names_Array\n\tis now Entry_Index.\n\t(Number_Of_Entries): The return type is now Entry_Index.\n\n2012-10-29  Pascal Obry  <obry@adacore.com>\n\n\t* gnat_ugn.texi: Add note about SEH setup on x86-windows.\n\n2012-10-29  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* s-bignum.adb (Allocate_Bignum): Use the exact layout of\n\tBignum_Data for the overlay.\n\nFrom-SVN: r192936", "tree": {"sha": "a79b25a13d60cad12993f696eddcc4aa1cb75614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a79b25a13d60cad12993f696eddcc4aa1cb75614"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7af1cf8342f73410aba4a9edf0c54b918a6a775d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7af1cf8342f73410aba4a9edf0c54b918a6a775d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7af1cf8342f73410aba4a9edf0c54b918a6a775d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7af1cf8342f73410aba4a9edf0c54b918a6a775d/comments", "author": null, "committer": null, "parents": [{"sha": "2d7b3fa49dd6dabc94eb6ad86ccdbefdb851cf78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7b3fa49dd6dabc94eb6ad86ccdbefdb851cf78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7b3fa49dd6dabc94eb6ad86ccdbefdb851cf78"}], "stats": {"total": 186, "additions": 154, "deletions": 32}, "files": [{"sha": "96f81e75b870605d7c512206aec39f8d649af7ae", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -1,3 +1,44 @@\n+2012-10-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb: Minor reformatting.\n+\n+2012-10-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Minor rewording.\n+\n+2012-10-29  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.ads (Is_Expanded_Dispatching_Call): New subprogram.\n+\t* exp_disp.adb (Expand_Dispatching_Call): No action needed if the\n+\tcall has been already expanded.\n+\t(Is_Expanded_Dispatching_Call): New subprogram.\n+\t* sem_disp.adb (Propagate_Tag): No action needed if the call\n+\thas been already expanded.\n+\n+2012-10-29  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch9.adb (Create_Index_And_Data): Remove local\n+\tvariable Index_Typ and its uses. The type of the index is now\n+\tSystem.Tasking.Entry_Index. Update all related comments.\n+\t* rtsfind.ads: Add RE_Entry_Index in tables RE_Id and RE_Unit_Table.\n+\t* s-taskin.adb (Number_Of_Entries): The return type is now Entry_Index.\n+\t* s-taskin.ads: The index type of Task_Entry_Names_Array is now\n+\tEntry_Index.\n+\t(Number_Of_Entries): The return type is now Entry_Index.\n+\t* s-tpoben.adb (Number_Of_Entries): The return type is now Entry_Index.\n+\t* s-tpoben.ads: The index type of Protected_Entry_Names_Array\n+\tis now Entry_Index.\n+\t(Number_Of_Entries): The return type is now Entry_Index.\n+\n+2012-10-29  Pascal Obry  <obry@adacore.com>\n+\n+\t* gnat_ugn.texi: Add note about SEH setup on x86-windows.\n+\n+2012-10-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* s-bignum.adb (Allocate_Bignum): Use the exact layout of\n+\tBignum_Data for the overlay.\n+\n 2012-10-29  Thomas Quinot  <quinot@adacore.com>\n \n \t* gnat_rm.texi, sem_prag.adb, sem_util.adb, sem_util.ads,"}, {"sha": "82a7a309c723a0afd1477f093a71f7302c762a24", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -1460,39 +1460,36 @@ package body Exp_Ch9 is\n          begin\n             if No (Index) and then No (Data) then\n                declare\n-                  Count     : RE_Id;\n-                  Data_Typ  : RE_Id;\n-                  Index_Typ : RE_Id;\n-                  Size      : Entity_Id;\n+                  Count    : RE_Id;\n+                  Data_Typ : RE_Id;\n+                  Size     : Entity_Id;\n \n                begin\n                   if Is_Protected_Type (Typ) then\n-                     Count     := RO_PE_Number_Of_Entries;\n-                     Data_Typ  := RE_Protected_Entry_Names_Array;\n-                     Index_Typ := RE_Protected_Entry_Index;\n+                     Count    := RO_PE_Number_Of_Entries;\n+                     Data_Typ := RE_Protected_Entry_Names_Array;\n                   else\n-                     Count     := RO_ST_Number_Of_Entries;\n-                     Data_Typ  := RE_Task_Entry_Names_Array;\n-                     Index_Typ := RE_Task_Entry_Index;\n+                     Count    := RO_ST_Number_Of_Entries;\n+                     Data_Typ := RE_Task_Entry_Names_Array;\n                   end if;\n \n                   --  Step 1: Generate the declaration of the index variable:\n \n-                  --    Index : <Index_Typ> := 1;\n+                  --    Index : Entry_Index := 1;\n \n                   Index := Make_Temporary (Loc, 'I');\n \n                   Append_To (Stmts,\n                     Make_Object_Declaration (Loc,\n                       Defining_Identifier => Index,\n                       Object_Definition   =>\n-                        New_Reference_To (RTE (Index_Typ), Loc),\n+                        New_Reference_To (RTE (RE_Entry_Index), Loc),\n                       Expression          => Make_Integer_Literal (Loc, 1)));\n \n                   --  Step 2: Generate the declaration of an array to house all\n                   --  names:\n \n-                  --    Size : constant <Index_Typ> := <Count> (Obj_Ref);\n+                  --    Size : constant Entry_Index := <Count> (Obj_Ref);\n                   --    Data : aliased <Data_Typ> := (1 .. Size => null);\n \n                   Size := Make_Temporary (Loc, 'S');\n@@ -1502,7 +1499,7 @@ package body Exp_Ch9 is\n                       Defining_Identifier => Size,\n                       Constant_Present    => True,\n                       Object_Definition   =>\n-                        New_Reference_To (RTE (Index_Typ), Loc),\n+                        New_Reference_To (RTE (RE_Entry_Index), Loc),\n                       Expression          =>\n                         Make_Function_Call (Loc,\n                           Name                   =>"}, {"sha": "c3cd9c037b265404683d52d78c9de566aee56aea", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -703,6 +703,10 @@ package body Exp_Disp is\n         --  previously notified the violation of this restriction.\n \n         or else Restriction_Active (No_Dispatching_Calls)\n+\n+        --  No action needed if the dispatching call has been already expanded\n+\n+        or else Is_Expanded_Dispatching_Call (Name (Call_Node))\n       then\n          return;\n       end if;\n@@ -1975,6 +1979,17 @@ package body Exp_Disp is\n                and then not Restriction_Active (No_Dispatching_Calls);\n    end Has_DT;\n \n+   ----------------------------------\n+   -- Is_Expanded_Dispatching_Call --\n+   ----------------------------------\n+\n+   function Is_Expanded_Dispatching_Call (N : Node_Id) return Boolean is\n+   begin\n+      return Nkind (N) in N_Subprogram_Call\n+        and then Nkind (Name (N)) = N_Explicit_Dereference\n+        and then Is_Dispatch_Table_Entity (Etype (Name (N)));\n+   end Is_Expanded_Dispatching_Call;\n+\n    -----------------------------------------\n    -- Is_Predefined_Dispatching_Operation --\n    -----------------------------------------"}, {"sha": "f95fba5adfe8d5472f3457ae350cd9e22ad016f3", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -245,6 +245,9 @@ package Exp_Disp is\n    function Has_CPP_Constructors (Typ : Entity_Id) return Boolean;\n    --  Returns true if the type has CPP constructors\n \n+   function Is_Expanded_Dispatching_Call (N : Node_Id) return Boolean;\n+   --  Returns true if N is the expanded code of a dispatching call\n+\n    function Is_Predefined_Dispatching_Operation (E : Entity_Id) return Boolean;\n    --  Ada 2005 (AI-251): Determines if E is a predefined primitive operation\n "}, {"sha": "c6e092c81ca50e0c916ed68b8922109951203a10", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -1323,12 +1323,15 @@ pragma Attribute_Definition\n @end smallexample\n \n @noindent\n-If Attribute is a known attribute name, this pragma is equivalent to\n+If @code{Attribute} is a known attribute name, this pragma is equivalent to\n the attribute definition clause:\n+\n @smallexample @c ada\n   for Entity'Attribute use Expression;\n @end smallexample\n-else the pragma is ignored, and a warning is emitted. This allows source\n+\n+If @code{Attribute} is not a recognized attribute name, the pragma is\n+ignored, and a warning is emitted. This allows source\n code to be written that takes advantage of some new attribute, while remaining\n compilable with earlier compilers.\n "}, {"sha": "53df9a19984cbb8cde160eba2c208ca29f9e07c4", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -28346,6 +28346,38 @@ other part of your application. In this case, use GNAT to build the DLL\n or whatever environment to build your executable.\n @end enumerate\n \n+In addition to the description about C main in\n+@pxref{Mixed Language Programming} section, if the C main uses a\n+stand-alone library it is required on x86-windows to\n+setup the SEH context. For this the C main must looks like this:\n+\n+@smallexample\n+/* main.c */\n+extern void adainit (void);\n+extern void adafinal (void);\n+extern void __gnat_initialize(void*);\n+extern void call_to_ada (void);\n+\n+int main (int argc, char *argv[])\n+@{\n+  int SEH [2];\n+\n+  /* Initialize the SEH context */\n+  __gnat_initialize (&SEH);\n+\n+  adainit();\n+\n+  /* Then call Ada services in the stand-alone library */\n+\n+  call_to_ada();\n+\n+  adafinal();\n+@}\n+@end smallexample\n+\n+Note that this is not needed on x86_64-windows where the Windows\n+native SEH support is used.\n+\n @node Windows Calling Conventions\n @section Windows Calling Conventions\n @findex Stdcall"}, {"sha": "5f9c9934ca4cb31b4331adc835f157b19c772e7a", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -1531,6 +1531,7 @@ package Rtsfind is\n      RE_Simple_Mode,                     -- System.Tasking\n      RE_Terminate_Mode,                  -- System.Tasking\n      RE_Delay_Mode,                      -- System.Tasking\n+     RE_Entry_Index,                     -- System.Tasking\n      RE_Task_Entry_Index,                -- System.Tasking\n      RE_Self,                            -- System.Tasking\n \n@@ -2782,6 +2783,7 @@ package Rtsfind is\n      RE_Simple_Mode                      => System_Tasking,\n      RE_Terminate_Mode                   => System_Tasking,\n      RE_Delay_Mode                       => System_Tasking,\n+     RE_Entry_Index                      => System_Tasking,\n      RE_Task_Entry_Index                 => System_Tasking,\n      RE_Self                             => System_Tasking,\n "}, {"sha": "70486f2ddea146126d3ab977c73994b5f8168add", "filename": "gcc/ada/s-bignum.adb", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fs-bignum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fs-bignum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-bignum.adb?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -233,14 +233,27 @@ package body System.Bignums is\n             pragma Import (Ada, BD);\n \n             --  Expose a writable view of discriminant BD.Len so that we can\n-            --  initialize it.\n+            --  initialize it. We need to use the exact layout of the record\n+            --  for the overlay to shield ourselves from endianness issues.\n \n-            BL : Length;\n-            for BL'Address use BD.Len'Address;\n-            pragma Import (Ada, BL);\n+            type Bignum_Data_Header is record\n+               Len : Length;\n+               Neg : Boolean;\n+            end record;\n+\n+            for Bignum_Data_Header use record\n+               Len at 0 range 0 .. 23;\n+               Neg at 3 range 0 .. 7;\n+            end record;\n+\n+            BDH : Bignum_Data_Header;\n+            for BDH'Address use BD'Address;\n+            pragma Import (Ada, BDH);\n+\n+            pragma Assert (BDH.Len'Size = BD.Len'Size);\n \n          begin\n-            BL := Len;\n+            BDH.Len := Len;\n             return B;\n          end;\n       end if;"}, {"sha": "5baf12876554065abdfce131f8ffd6f327f776ac", "filename": "gcc/ada/s-taskin.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.adb?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -59,9 +59,9 @@ package body System.Tasking is\n    -- Number_Of_Entries --\n    -----------------------\n \n-   function Number_Of_Entries (Self_Id : Task_Id) return Task_Entry_Index is\n+   function Number_Of_Entries (Self_Id : Task_Id) return Entry_Index is\n    begin\n-      return Self_Id.Entry_Num;\n+      return Entry_Index (Self_Id.Entry_Num);\n    end Number_Of_Entries;\n \n    ----------"}, {"sha": "26cfabb8aee57c9fdf9bc2743f9747089677774a", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -253,7 +253,7 @@ package System.Tasking is\n    type String_Access is access all String;\n \n    type Task_Entry_Names_Array is\n-     array (Task_Entry_Index range <>) of String_Access;\n+     array (Entry_Index range <>) of String_Access;\n \n    type Task_Entry_Names_Access is access all Task_Entry_Names_Array;\n \n@@ -1203,7 +1203,7 @@ private\n    --  registered for removal (Expunge_Unactivated_Tasks). The \"limited\" forces\n    --  Activation_Chain to be a by-reference type; see RM-6.2(4).\n \n-   function Number_Of_Entries (Self_Id : Task_Id) return Task_Entry_Index;\n+   function Number_Of_Entries (Self_Id : Task_Id) return Entry_Index;\n    --  Given a task, return the number of entries it contains\n \n    procedure Set_Entry_Names"}, {"sha": "3249122b386aa308a45d82ea49b61035dcd315b0", "filename": "gcc/ada/s-tpoben.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fs-tpoben.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fs-tpoben.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.adb?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -359,10 +359,10 @@ package body System.Tasking.Protected_Objects.Entries is\n    -----------------------\n \n    function Number_Of_Entries\n-     (Object : Protection_Entries_Access) return Protected_Entry_Index\n+     (Object : Protection_Entries_Access) return Entry_Index\n    is\n    begin\n-      return Object.Num_Entries;\n+      return Entry_Index (Object.Num_Entries);\n    end Number_Of_Entries;\n \n    -----------------"}, {"sha": "8a91bbb03e1ecb3db6b4c14516736af4573568a5", "filename": "gcc/ada/s-tpoben.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fs-tpoben.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fs-tpoben.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.ads?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -66,10 +66,14 @@ package System.Tasking.Protected_Objects.Entries is\n    type Protected_Entry_Queue_Array is\n      array (Protected_Entry_Index range <>) of Entry_Queue;\n \n+   --  The following declarations define an array that contains the string\n+   --  names of entries and entry family members, together with an associated\n+   --  access type.\n+\n    type Protected_Entry_Names_Array is\n-     array (Protected_Entry_Index range <>) of String_Access;\n+     array (Entry_Index range <>) of String_Access;\n+\n    type Protected_Entry_Names_Access is access all Protected_Entry_Names_Array;\n-   --  Contains string name of entries and entry family members\n \n    --  The following type contains the GNARL state of a protected object.\n    --  The application-defined portion of the state (i.e. private objects)\n@@ -205,7 +209,7 @@ package System.Tasking.Protected_Objects.Entries is\n    --  read and write locks.\n \n    function Number_Of_Entries\n-     (Object : Protection_Entries_Access) return Protected_Entry_Index;\n+     (Object : Protection_Entries_Access) return Entry_Index;\n    --  Return the number of entries of a protected object\n \n    procedure Set_Ceiling"}, {"sha": "5092936559679122270b33506b9f57fef0a4db8c", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -2382,6 +2382,12 @@ package body Sem_Disp is\n          Call_Node := Expression (Actual);\n       end if;\n \n+      --  No action needed if the call has been already expanded\n+\n+      if Is_Expanded_Dispatching_Call (Call_Node) then\n+         return;\n+      end if;\n+\n       --  Do not set the Controlling_Argument if already set. This happens in\n       --  the special case of _Input (see Exp_Attr, case Input).\n "}, {"sha": "369376ad5553bd548d0e35bda67cc7359c85eda8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af1cf8342f73410aba4a9edf0c54b918a6a775d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7af1cf8342f73410aba4a9edf0c54b918a6a775d", "patch": "@@ -6930,7 +6930,7 @@ package body Sem_Prag is\n \n          when Pragma_Attribute_Definition => Attribute_Definition : declare\n             Attribute_Designator : constant Node_Id := Get_Pragma_Arg (Arg1);\n-            Aname : Name_Id;\n+            Aname                : Name_Id;\n \n          begin\n             GNAT_Pragma;\n@@ -6946,12 +6946,18 @@ package body Sem_Prag is\n \n             Check_Arg_Is_Local_Name (Arg2);\n \n+            --  If the attribute is not recognized, then issue a warning (not\n+            --  an error), and ignore the pragma.\n+\n             Aname := Chars (Attribute_Designator);\n+\n             if not Is_Attribute_Name (Aname) then\n                Bad_Attribute (Attribute_Designator, Aname, Warn => True);\n                return;\n             end if;\n \n+            --  Otherwise, rewrite the pragma as an attribute definition clause\n+\n             Rewrite (N,\n               Make_Attribute_Definition_Clause (Loc,\n                 Name       => Get_Pragma_Arg (Arg2),"}]}