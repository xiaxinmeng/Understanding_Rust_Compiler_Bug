{"sha": "57a6add274e98def9fe937eea126c56a71e65c28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdhNmFkZDI3NGU5OGRlZjlmZTkzN2VlYTEyNmM1NmE3MWU2NWMyOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-12-21T19:38:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-12-21T19:38:44Z"}, "message": "Fix handling of explicit function template arguments with TTPs.\n\ngcc/cp/\n\t* pt.c (coerce_template_parms): Consider variadic_args_p before\n\tcomplaining about too many template arguments.\nlibstdc++-v3/\n\t* testsuite/util/testsuite_tr1.h (test_property): Don't define both\n\tvariadic and non-variadic overloads.\n\nFrom-SVN: r243869", "tree": {"sha": "5853c8fc2ab669e19226a16b1a0d5c25d65ee0c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5853c8fc2ab669e19226a16b1a0d5c25d65ee0c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57a6add274e98def9fe937eea126c56a71e65c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a6add274e98def9fe937eea126c56a71e65c28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a6add274e98def9fe937eea126c56a71e65c28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a6add274e98def9fe937eea126c56a71e65c28/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9410b4fe946b3f82ff2254b46ef53573897d68e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9410b4fe946b3f82ff2254b46ef53573897d68e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9410b4fe946b3f82ff2254b46ef53573897d68e"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "05d6dba39c32cddf4a9cf655f4bad7b57a8d9d9b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a6add274e98def9fe937eea126c56a71e65c28/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a6add274e98def9fe937eea126c56a71e65c28/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=57a6add274e98def9fe937eea126c56a71e65c28", "patch": "@@ -1,5 +1,8 @@\n 2016-12-21  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (coerce_template_parms): Consider variadic_args_p before\n+\tcomplaining about too many template arguments.\n+\n \t* pt.c (process_partial_specialization): Use\n \tget_partial_spec_bindings to check that the partial specialization\n \tis more specialized than the primary template."}, {"sha": "f839c5384879fdc7c0a7de3085e134f0498518f5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a6add274e98def9fe937eea126c56a71e65c28/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a6add274e98def9fe937eea126c56a71e65c28/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=57a6add274e98def9fe937eea126c56a71e65c28", "patch": "@@ -7658,7 +7658,7 @@ coerce_template_parms (tree parms,\n   variadic_args_p = pack_expansion_args_count (inner_args);\n \n   nargs = inner_args ? NUM_TMPL_ARGS (inner_args) : 0;\n-  if ((nargs > nparms && !variadic_p)\n+  if ((nargs - variadic_args_p > nparms && !variadic_p)\n       || (nargs < nparms - variadic_p\n \t  && require_all_args\n \t  && !variadic_args_p"}, {"sha": "b1bd7a4e20895fe9d3e4b8a6e694fc2fed61d525", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ttp3.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a6add274e98def9fe937eea126c56a71e65c28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a6add274e98def9fe937eea126c56a71e65c28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp3.C?ref=57a6add274e98def9fe937eea126c56a71e65c28", "patch": "@@ -0,0 +1,23 @@\n+// Test that passing a non-variadic template to a variadic TTP works\n+// with explicit template arguments in a function call..\n+// { dg-do compile { target c++11 } }\n+\n+template<template<typename> class Property, typename Type>\n+bool test_property(typename Property<Type>::value_type value);\n+\n+template<template<typename...> class Property,\n+\t typename Type1, typename... Types>\n+bool test_property(typename Property<Type1, Types...>::value_type value);\n+\n+template <class T>\n+struct X\n+{\n+  using type = X;\n+  using value_type = int;\n+  static const value_type value = 42;\n+};\n+\n+int main()\n+{\n+  test_property<X,int>(42);\t// { dg-error \"ambiguous\" }\n+}"}, {"sha": "b3599b60235003b988e2d194a66fa28abb1b764a", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ttp3a.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a6add274e98def9fe937eea126c56a71e65c28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp3a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a6add274e98def9fe937eea126c56a71e65c28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp3a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp3a.C?ref=57a6add274e98def9fe937eea126c56a71e65c28", "patch": "@@ -0,0 +1,20 @@\n+// Test that passing a non-variadic template to a variadic TTP works\n+// with explicit template arguments in a function call..\n+// { dg-do compile { target c++11 } }\n+\n+template<template<typename...> class Property,\n+\t typename Type1, typename... Types>\n+bool test_property(typename Property<Type1, Types...>::value_type value);\n+\n+template <class T>\n+struct X\n+{\n+  using type = X;\n+  using value_type = int;\n+  static const value_type value = 42;\n+};\n+\n+int main()\n+{\n+  test_property<X,int>(42);\n+}"}, {"sha": "6263652977daa2c9428a2c17cc56e8a29297c042", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a6add274e98def9fe937eea126c56a71e65c28/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a6add274e98def9fe937eea126c56a71e65c28/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=57a6add274e98def9fe937eea126c56a71e65c28", "patch": "@@ -1,3 +1,8 @@\n+2016-12-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* testsuite/util/testsuite_tr1.h (test_property): Don't define both\n+\tvariadic and non-variadic overloads.\n+\n 2016-12-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/71444"}, {"sha": "908a788a93ef81ebe86b8cdd190c8466a0e5a4b2", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a6add274e98def9fe937eea126c56a71e65c28/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a6add274e98def9fe937eea126c56a71e65c28/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=57a6add274e98def9fe937eea126c56a71e65c28", "patch": "@@ -45,17 +45,6 @@ namespace __gnu_test\n \t      && Category<const volatile Type>::type::value == value);\n     }\n \n-  template<template<typename> class Property, typename Type>\n-#if __cplusplus >= 201103L\n-    constexpr\n-#endif\n-    bool\n-    test_property(typename Property<Type>::value_type value)\n-    {\n-      return (Property<Type>::value == value\n-\t      && Property<Type>::type::value == value);\n-    }\n-\n   // For testing tr1/type_traits/extent, which has a second template\n   // parameter.\n   template<template<typename, unsigned> class Property,\n@@ -79,6 +68,14 @@ namespace __gnu_test\n       return (Property<Type1, Types...>::value == value\n \t      && Property<Type1, Types...>::type::value == value);\n     }\n+#else\n+  template<template<typename> class Property, typename Type>\n+    bool\n+    test_property(typename Property<Type>::value_type value)\n+    {\n+      return (Property<Type>::value == value\n+\t      && Property<Type>::type::value == value);\n+    }\n #endif\n \n   template<template<typename, typename> class Relationship,"}]}