{"sha": "d479ddc0d9854905d03a3290b203a5dcb8db07eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ3OWRkYzBkOTg1NDkwNWQwM2EzMjkwYjIwM2E1ZGNiOGRiMDdlYg==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-29T12:40:43Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-29T12:40:43Z"}, "message": "doc/invoke.texi: Sort flags in 'C Language Options'\n\nAs discussed during the review of\n'[Patch] Add 'default' to -foffload=; document that flag [PR67300]'.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi (C Language Options): Sort options\n\talphabetically in optlist and also the description itself.\n\tRemove leftover -fallow-single-precision from and add missing\n\t-fgnu-tm to the optlist.", "tree": {"sha": "bb4ea66217aa3d25fa52b5b9cceaa2e25c502ea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb4ea66217aa3d25fa52b5b9cceaa2e25c502ea3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d479ddc0d9854905d03a3290b203a5dcb8db07eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d479ddc0d9854905d03a3290b203a5dcb8db07eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d479ddc0d9854905d03a3290b203a5dcb8db07eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d479ddc0d9854905d03a3290b203a5dcb8db07eb/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dfc0f2203e875621f4aeb2e2496aaeb9a2dc05b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfc0f2203e875621f4aeb2e2496aaeb9a2dc05b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dfc0f2203e875621f4aeb2e2496aaeb9a2dc05b"}], "stats": {"total": 253, "additions": 126, "deletions": 127}, "files": [{"sha": "bf529090d92209b23744c0a4f816ff55f48bd109", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 126, "deletions": 127, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d479ddc0d9854905d03a3290b203a5dcb8db07eb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d479ddc0d9854905d03a3290b203a5dcb8db07eb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d479ddc0d9854905d03a3290b203a5dcb8db07eb", "patch": "@@ -197,17 +197,16 @@ in the following sections.\n \n @item C Language Options\n @xref{C Dialect Options,,Options Controlling C Dialect}.\n-@gccoptlist{-ansi  -std=@var{standard}  -fgnu89-inline @gol\n--fpermitted-flt-eval-methods=@var{standard} @gol\n--aux-info @var{filename}  -fallow-parameterless-variadic-functions @gol\n--fno-asm  -fno-builtin  -fno-builtin-@var{function}  -fgimple@gol\n--fhosted  -ffreestanding @gol\n+@gccoptlist{-ansi  -std=@var{standard}  -aux-info @var{filename} @gol\n+-fallow-parameterless-variadic-functions  -fno-asm  @gol\n+-fno-builtin  -fno-builtin-@var{function}  -fcond-mismatch @gol\n+-ffreestanding  -fgimple  -fgnu-tm  -fgnu89-inline  -fhosted @gol\n+-flax-vector-conversions  -fms-extensions @gol\n -fopenacc  -fopenacc-dim=@var{geom} @gol\n -fopenmp  -fopenmp-simd @gol\n--fms-extensions  -fplan9-extensions  -fsso-struct=@var{endianness} @gol\n--fallow-single-precision  -fcond-mismatch  -flax-vector-conversions @gol\n--fsigned-bitfields  -fsigned-char @gol\n--funsigned-bitfields  -funsigned-char}\n+-fpermitted-flt-eval-methods=@var{standard} @gol\n+-fplan9-extensions  -fsigned-bitfields  -funsigned-bitfields @gol\n+-fsigned-char  -funsigned-char  -fsso-struct=@var{endianness}}\n \n @item C++ Language Options\n @xref{C++ Dialect Options,,Options Controlling C++ Dialect}.\n@@ -2449,50 +2448,6 @@ and will almost certainly change in incompatible ways in future\n releases.\n @end table\n \n-@item -fgnu89-inline\n-@opindex fgnu89-inline\n-The option @option{-fgnu89-inline} tells GCC to use the traditional\n-GNU semantics for @code{inline} functions when in C99 mode.\n-@xref{Inline,,An Inline Function is As Fast As a Macro}.\n-Using this option is roughly equivalent to adding the\n-@code{gnu_inline} function attribute to all inline functions\n-(@pxref{Function Attributes}).\n-\n-The option @option{-fno-gnu89-inline} explicitly tells GCC to use the\n-C99 semantics for @code{inline} when in C99 or gnu99 mode (i.e., it\n-specifies the default behavior).\n-This option is not supported in @option{-std=c90} or\n-@option{-std=gnu90} mode.\n-\n-The preprocessor macros @code{__GNUC_GNU_INLINE__} and\n-@code{__GNUC_STDC_INLINE__} may be used to check which semantics are\n-in effect for @code{inline} functions.  @xref{Common Predefined\n-Macros,,,cpp,The C Preprocessor}.\n-\n-@item -fpermitted-flt-eval-methods=@var{style}\n-@opindex fpermitted-flt-eval-methods\n-@opindex fpermitted-flt-eval-methods=c11\n-@opindex fpermitted-flt-eval-methods=ts-18661-3\n-ISO/IEC TS 18661-3 defines new permissible values for\n-@code{FLT_EVAL_METHOD} that indicate that operations and constants with\n-a semantic type that is an interchange or extended format should be\n-evaluated to the precision and range of that type.  These new values are\n-a superset of those permitted under C99/C11, which does not specify the\n-meaning of other positive values of @code{FLT_EVAL_METHOD}.  As such, code\n-conforming to C11 may not have been written expecting the possibility of\n-the new values.\n-\n-@option{-fpermitted-flt-eval-methods} specifies whether the compiler\n-should allow only the values of @code{FLT_EVAL_METHOD} specified in C99/C11,\n-or the extended set of values specified in ISO/IEC TS 18661-3.\n-\n-@var{style} is either @code{c11} or @code{ts-18661-3} as appropriate.\n-\n-The default when in a standards compliant mode (@option{-std=c11} or similar)\n-is @option{-fpermitted-flt-eval-methods=c11}.  The default when in a GNU\n-dialect (@option{-std=gnu11} or similar) is\n-@option{-fpermitted-flt-eval-methods=ts-18661-3}.\n-\n @item -aux-info @var{filename}\n @opindex aux-info\n Output to the given filename prototyped declarations for all functions\n@@ -2573,13 +2528,68 @@ built-in functions selectively when using @option{-fno-builtin} or\n #define strcpy(d, s)    __builtin_strcpy ((d), (s))\n @end smallexample\n \n+@item -fcond-mismatch\n+@opindex fcond-mismatch\n+Allow conditional expressions with mismatched types in the second and\n+third arguments.  The value of such an expression is void.  This option\n+is not supported for C++.\n+\n+@item -ffreestanding\n+@opindex ffreestanding\n+@cindex hosted environment\n+\n+Assert that compilation targets a freestanding environment.  This\n+implies @option{-fno-builtin}.  A freestanding environment\n+is one in which the standard library may not exist, and program startup may\n+not necessarily be at @code{main}.  The most obvious example is an OS kernel.\n+This is equivalent to @option{-fno-hosted}.\n+\n+@xref{Standards,,Language Standards Supported by GCC}, for details of\n+freestanding and hosted environments.\n+\n @item -fgimple\n @opindex fgimple\n \n Enable parsing of function definitions marked with @code{__GIMPLE}.\n This is an experimental feature that allows unit testing of GIMPLE\n passes.\n \n+@item -fgnu-tm\n+@opindex fgnu-tm\n+When the option @option{-fgnu-tm} is specified, the compiler\n+generates code for the Linux variant of Intel's current Transactional\n+Memory ABI specification document (Revision 1.1, May 6 2009).  This is\n+an experimental feature whose interface may change in future versions\n+of GCC, as the official specification changes.  Please note that not\n+all architectures are supported for this feature.\n+\n+For more information on GCC's support for transactional memory,\n+@xref{Enabling libitm,,The GNU Transactional Memory Library,libitm,GNU\n+Transactional Memory Library}.\n+\n+Note that the transactional memory feature is not supported with\n+non-call exceptions (@option{-fnon-call-exceptions}).\n+\n+@item -fgnu89-inline\n+@opindex fgnu89-inline\n+The option @option{-fgnu89-inline} tells GCC to use the traditional\n+GNU semantics for @code{inline} functions when in C99 mode.\n+@xref{Inline,,An Inline Function is As Fast As a Macro}.\n+Using this option is roughly equivalent to adding the\n+@code{gnu_inline} function attribute to all inline functions\n+(@pxref{Function Attributes}).\n+\n+The option @option{-fno-gnu89-inline} explicitly tells GCC to use the\n+C99 semantics for @code{inline} when in C99 or gnu99 mode (i.e., it\n+specifies the default behavior).\n+This option is not supported in @option{-std=c90} or\n+@option{-std=gnu90} mode.\n+\n+The preprocessor macros @code{__GNUC_GNU_INLINE__} and\n+@code{__GNUC_STDC_INLINE__} may be used to check which semantics are\n+in effect for @code{inline} functions.  @xref{Common Predefined\n+Macros,,,cpp,The C Preprocessor}.\n+\n @item -fhosted\n @opindex fhosted\n @cindex hosted environment\n@@ -2590,18 +2600,32 @@ entire standard library is available, and in which @code{main} has a return\n type of @code{int}.  Examples are nearly everything except a kernel.\n This is equivalent to @option{-fno-freestanding}.\n \n-@item -ffreestanding\n-@opindex ffreestanding\n-@cindex hosted environment\n+@item -flax-vector-conversions\n+@opindex flax-vector-conversions\n+Allow implicit conversions between vectors with differing numbers of\n+elements and/or incompatible element types.  This option should not be\n+used for new code.\n \n-Assert that compilation targets a freestanding environment.  This\n-implies @option{-fno-builtin}.  A freestanding environment\n-is one in which the standard library may not exist, and program startup may\n-not necessarily be at @code{main}.  The most obvious example is an OS kernel.\n-This is equivalent to @option{-fno-hosted}.\n+@item -fms-extensions\n+@opindex fms-extensions\n+Accept some non-standard constructs used in Microsoft header files.\n \n-@xref{Standards,,Language Standards Supported by GCC}, for details of\n-freestanding and hosted environments.\n+In C++ code, this allows member names in structures to be similar\n+to previous types declarations.\n+\n+@smallexample\n+typedef int UOW;\n+struct ABC @{\n+  UOW UOW;\n+@};\n+@end smallexample\n+\n+Some cases of unnamed fields in structures and unions are only\n+accepted with this option.  @xref{Unnamed Fields,,Unnamed struct/union\n+fields within structs/unions}, for details.\n+\n+Note that this option is off for all targets except for x86\n+targets using ms-abi.\n \n @item -fopenacc\n @opindex fopenacc\n@@ -2640,42 +2664,29 @@ Enable handling of OpenMP's SIMD directives with @code{#pragma omp}\n in C/C++ and @code{!$omp} in Fortran. Other OpenMP directives\n are ignored.\n \n-@item -fgnu-tm\n-@opindex fgnu-tm\n-When the option @option{-fgnu-tm} is specified, the compiler\n-generates code for the Linux variant of Intel's current Transactional\n-Memory ABI specification document (Revision 1.1, May 6 2009).  This is\n-an experimental feature whose interface may change in future versions\n-of GCC, as the official specification changes.  Please note that not\n-all architectures are supported for this feature.\n-\n-For more information on GCC's support for transactional memory,\n-@xref{Enabling libitm,,The GNU Transactional Memory Library,libitm,GNU\n-Transactional Memory Library}.\n-\n-Note that the transactional memory feature is not supported with\n-non-call exceptions (@option{-fnon-call-exceptions}).\n-\n-@item -fms-extensions\n-@opindex fms-extensions\n-Accept some non-standard constructs used in Microsoft header files.\n-\n-In C++ code, this allows member names in structures to be similar\n-to previous types declarations.\n+@item -fpermitted-flt-eval-methods=@var{style}\n+@opindex fpermitted-flt-eval-methods\n+@opindex fpermitted-flt-eval-methods=c11\n+@opindex fpermitted-flt-eval-methods=ts-18661-3\n+ISO/IEC TS 18661-3 defines new permissible values for\n+@code{FLT_EVAL_METHOD} that indicate that operations and constants with\n+a semantic type that is an interchange or extended format should be\n+evaluated to the precision and range of that type.  These new values are\n+a superset of those permitted under C99/C11, which does not specify the\n+meaning of other positive values of @code{FLT_EVAL_METHOD}.  As such, code\n+conforming to C11 may not have been written expecting the possibility of\n+the new values.\n \n-@smallexample\n-typedef int UOW;\n-struct ABC @{\n-  UOW UOW;\n-@};\n-@end smallexample\n+@option{-fpermitted-flt-eval-methods} specifies whether the compiler\n+should allow only the values of @code{FLT_EVAL_METHOD} specified in C99/C11,\n+or the extended set of values specified in ISO/IEC TS 18661-3.\n \n-Some cases of unnamed fields in structures and unions are only\n-accepted with this option.  @xref{Unnamed Fields,,Unnamed struct/union\n-fields within structs/unions}, for details.\n+@var{style} is either @code{c11} or @code{ts-18661-3} as appropriate.\n \n-Note that this option is off for all targets except for x86\n-targets using ms-abi.\n+The default when in a standards compliant mode (@option{-std=c11} or similar)\n+is @option{-fpermitted-flt-eval-methods=c11}.  The default when in a GNU\n+dialect (@option{-std=gnu11} or similar) is\n+@option{-fpermitted-flt-eval-methods=ts-18661-3}.\n \n @item -fplan9-extensions\n @opindex fplan9-extensions\n@@ -2688,17 +2699,26 @@ fields declared using a typedef.  @xref{Unnamed Fields,,Unnamed\n struct/union fields within structs/unions}, for details.  This is only\n supported for C, not C++.\n \n-@item -fcond-mismatch\n-@opindex fcond-mismatch\n-Allow conditional expressions with mismatched types in the second and\n-third arguments.  The value of such an expression is void.  This option\n-is not supported for C++.\n+@item -fsigned-bitfields\n+@itemx -funsigned-bitfields\n+@itemx -fno-signed-bitfields\n+@itemx -fno-unsigned-bitfields\n+@opindex fsigned-bitfields\n+@opindex funsigned-bitfields\n+@opindex fno-signed-bitfields\n+@opindex fno-unsigned-bitfields\n+These options control whether a bit-field is signed or unsigned, when the\n+declaration does not use either @code{signed} or @code{unsigned}.  By\n+default, such a bit-field is signed, because this is consistent: the\n+basic integer types such as @code{int} are signed types.\n \n-@item -flax-vector-conversions\n-@opindex flax-vector-conversions\n-Allow implicit conversions between vectors with differing numbers of\n-elements and/or incompatible element types.  This option should not be\n-used for new code.\n+@item -fsigned-char\n+@opindex fsigned-char\n+Let the type @code{char} be signed, like @code{signed char}.\n+\n+Note that this is equivalent to @option{-fno-unsigned-char}, which is\n+the negative form of @option{-funsigned-char}.  Likewise, the option\n+@option{-fno-signed-char} is equivalent to @option{-funsigned-char}.\n \n @item -funsigned-char\n @opindex funsigned-char\n@@ -2719,27 +2739,6 @@ The type @code{char} is always a distinct type from each of\n @code{signed char} or @code{unsigned char}, even though its behavior\n is always just like one of those two.\n \n-@item -fsigned-char\n-@opindex fsigned-char\n-Let the type @code{char} be signed, like @code{signed char}.\n-\n-Note that this is equivalent to @option{-fno-unsigned-char}, which is\n-the negative form of @option{-funsigned-char}.  Likewise, the option\n-@option{-fno-signed-char} is equivalent to @option{-funsigned-char}.\n-\n-@item -fsigned-bitfields\n-@itemx -funsigned-bitfields\n-@itemx -fno-signed-bitfields\n-@itemx -fno-unsigned-bitfields\n-@opindex fsigned-bitfields\n-@opindex funsigned-bitfields\n-@opindex fno-signed-bitfields\n-@opindex fno-unsigned-bitfields\n-These options control whether a bit-field is signed or unsigned, when the\n-declaration does not use either @code{signed} or @code{unsigned}.  By\n-default, such a bit-field is signed, because this is consistent: the\n-basic integer types such as @code{int} are signed types.\n-\n @item -fsso-struct=@var{endianness}\n @opindex fsso-struct\n Set the default scalar storage order of structures and unions to the"}]}