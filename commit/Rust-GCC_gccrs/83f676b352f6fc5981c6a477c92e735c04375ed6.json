{"sha": "83f676b352f6fc5981c6a477c92e735c04375ed6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmNjc2YjM1MmY2ZmM1OTgxYzZhNDc3YzkyZTczNWMwNDM3NWVkNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-07-07T14:23:57Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-07-07T14:23:57Z"}, "message": "pointer-set.c (pointer_set_destroy): Correct whitespace.\n\n\n\t* pointer-set.c (pointer_set_destroy): Correct whitespace.\n\t* cfgloopanal.c (dump_graph): Likewise.\n\t* dojump.c (discard_pending_stack_adjust): Likewise.\n\t* fix-header.c (TARGET_EXTRA_INCLUDE, TARGET_EXTRA_PRE_INCLUDES):\n\tLikewise.\n\t* alloc-pool.c (dump_alloc_pool_statistics): Likewise.\n\t* function.c (finalize_block_changes): Likewise.\n\t* gcc-common.c (ggc_free_overhead, dump_gcc_loc_statistics): Likewise.\n\t* tree-ssa-dce.c (clear_control_dependence_bitmap): Likewise.\n\t* rtl.c (dump_rtx_statistics): Likewise.\n\t* tree-ssa-structalias.c (sort_fieldstack, init_alias_heapvars): \n\tLikewise.\n\t* varray.c (dump_varray_statistics): Likewise.\n\t* dfp.c (encode_decimal32, decode_decimal32, encode_decimal64,\n\tdecode_decimal64, encode_decimal128, decode_decimal128,\n\tdecimal_real_to_decimal): Likewise.\n\nFrom-SVN: r115258", "tree": {"sha": "23576e37f688d2a706f1bfea77d9266942017b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23576e37f688d2a706f1bfea77d9266942017b8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83f676b352f6fc5981c6a477c92e735c04375ed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f676b352f6fc5981c6a477c92e735c04375ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f676b352f6fc5981c6a477c92e735c04375ed6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f676b352f6fc5981c6a477c92e735c04375ed6/comments", "author": null, "committer": null, "parents": [{"sha": "1ce35d260ce28d8bf428ef923169899be85a382e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce35d260ce28d8bf428ef923169899be85a382e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce35d260ce28d8bf428ef923169899be85a382e"}], "stats": {"total": 112, "additions": 73, "deletions": 39}, "files": [{"sha": "5a693525a03e60a7e883d7ba5e4d0d6dcea01b1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -1,3 +1,22 @@\n+2006-07-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* pointer-set.c (pointer_set_destroy): Correct whitespace.\n+\t* cfgloopanal.c (dump_graph): Likewise.\n+\t* dojump.c (discard_pending_stack_adjust): Likewise.\n+\t* fix-header.c (TARGET_EXTRA_INCLUDE, TARGET_EXTRA_PRE_INCLUDES):\n+\tLikewise.\n+\t* alloc-pool.c (dump_alloc_pool_statistics): Likewise.\n+\t* function.c (finalize_block_changes): Likewise.\n+\t* gcc-common.c (ggc_free_overhead, dump_gcc_loc_statistics): Likewise.\n+\t* tree-ssa-dce.c (clear_control_dependence_bitmap): Likewise.\n+\t* rtl.c (dump_rtx_statistics): Likewise.\n+\t* tree-ssa-structalias.c (sort_fieldstack, init_alias_heapvars): \n+\tLikewise.\n+\t* varray.c (dump_varray_statistics): Likewise.\n+\t* dfp.c (encode_decimal32, decode_decimal32, encode_decimal64,\n+\tdecode_decimal64, encode_decimal128, decode_decimal128,\n+\tdecimal_real_to_decimal): Likewise.\n+\n 2006-07-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/28187"}, {"sha": "fb40577953bf0a972fa6a48a0bf608892386bbc4", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -1,5 +1,5 @@\n /* Functions to support a pool of allocatable objects.\n-   Copyright (C) 1987, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005\n+   Copyright (C) 1987, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n    Contributed by Daniel Berlin <dan@cgsoftware.com>\n \n@@ -339,7 +339,8 @@ print_statistics (void **slot, void *b)\n #endif\n \n /* Output per-alloc_pool memory usage statistics.  */\n-void dump_alloc_pool_statistics (void)\n+void\n+dump_alloc_pool_statistics (void)\n {\n #ifdef GATHER_STATISTICS\n   struct output_info info;"}, {"sha": "da545838436856559e48139f8471dd2976b655f3", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -1,5 +1,5 @@\n /* Natural loop analysis code for GNU compiler.\n-   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -83,7 +83,9 @@ struct graph\n /* Dumps graph G into F.  */\n \n extern void dump_graph (FILE *, struct graph *);\n-void dump_graph (FILE *f, struct graph *g)\n+\n+void\n+dump_graph (FILE *f, struct graph *g)\n {\n   int i;\n   struct edge *e;"}, {"sha": "b388f9343930751dbb8c95e54192eaaba3dd3c64", "filename": "gcc/dfp.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Fdfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Fdfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdfp.c?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -142,7 +142,7 @@ decimal_to_decnumber (const REAL_VALUE_TYPE *r, decNumber *dn)\n \n /* Encode a real into an IEEE 754R decimal32 type.  */\n \n-void \n+void\n encode_decimal32 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \t\t  long *buf, const REAL_VALUE_TYPE *r)\n {\n@@ -164,8 +164,9 @@ encode_decimal32 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \n /* Decode an IEEE 754R decimal32 type into a real.  */\n \n-void decode_decimal32 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n-\t\t       REAL_VALUE_TYPE *r, const long *buf)\n+void\n+decode_decimal32 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n+\t\t  REAL_VALUE_TYPE *r, const long *buf)\n {\n   decNumber dn;\n   decimal32 d32;\n@@ -185,7 +186,7 @@ void decode_decimal32 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \n /* Encode a real into an IEEE 754R decimal64 type.  */\n \n-void \n+void\n encode_decimal64 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \t\t  long *buf, const REAL_VALUE_TYPE *r)\n {\n@@ -213,7 +214,7 @@ encode_decimal64 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \n /* Decode an IEEE 754R decimal64 type into a real.  */\n \n-void \n+void\n decode_decimal64 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \t\t  REAL_VALUE_TYPE *r, const long *buf)\n { \n@@ -241,7 +242,7 @@ decode_decimal64 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \n /* Encode a real into an IEEE 754R decimal128 type.  */\n \n-void \n+void\n encode_decimal128 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \t\t   long *buf, const REAL_VALUE_TYPE *r)\n {\n@@ -273,7 +274,7 @@ encode_decimal128 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \n /* Decode an IEEE 754R decimal128 type into a real.  */\n \n-void \n+void\n decode_decimal128 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \t\t   REAL_VALUE_TYPE *r, const long *buf)\n {\n@@ -444,10 +445,11 @@ decimal_real_convert (REAL_VALUE_TYPE *r, enum machine_mode mode,\n    CROP_TRAILING_ZEROS, strip trailing zeros.  Currently, not honoring\n    DIGITS or CROP_TRAILING_ZEROS.  */\n \n-void decimal_real_to_decimal (char *str, const REAL_VALUE_TYPE *r_orig,\n-\t\t\t      size_t buf_size,\n-\t\t\t      size_t digits ATTRIBUTE_UNUSED,\n-\t\t\t      int crop_trailing_zeros ATTRIBUTE_UNUSED)\n+void\n+decimal_real_to_decimal (char *str, const REAL_VALUE_TYPE *r_orig,\n+\t\t\t size_t buf_size,\n+\t\t\t size_t digits ATTRIBUTE_UNUSED,\n+\t\t\t int crop_trailing_zeros ATTRIBUTE_UNUSED)\n {\n   decimal128 *d128 = (decimal128*) r_orig->sig;\n "}, {"sha": "be0f2d4490ea4f09cb144ac57399677084ecbfcd", "filename": "gcc/dojump.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -53,7 +53,8 @@ init_pending_stack_adjust (void)\n /* Discard any pending stack adjustment.  This avoid relying on the\n    RTL optimizers to remove useless adjustments when we know the\n    stack pointer value is dead.  */\n-void discard_pending_stack_adjust (void)\n+void\n+discard_pending_stack_adjust (void)\n {\n   stack_pointer_delta -= pending_stack_adjust;\n   pending_stack_adjust = 0;"}, {"sha": "82244d058908d2aa10d2f25817d7d40de3ad91b6", "filename": "gcc/fix-header.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -1,6 +1,6 @@\n /* fix-header.c - Make C header file suitable for C++.\n    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2006 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -82,17 +82,19 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */\n #include \"errors.h\"\n \n #ifdef TARGET_EXTRA_INCLUDES\n-void TARGET_EXTRA_INCLUDES (const char *sysroot ATTRIBUTE_UNUSED,\n-\t\t\t    const char *iprefix ATTRIBUTE_UNUSED,\n-\t\t\t    int stdinc ATTRIBUTE_UNUSED)\n+void\n+TARGET_EXTRA_INCLUDES (const char *sysroot ATTRIBUTE_UNUSED,\n+\t\t       const char *iprefix ATTRIBUTE_UNUSED,\n+\t\t       int stdinc ATTRIBUTE_UNUSED)\n {\n }\n #endif\n \n #ifdef TARGET_EXTRA_PRE_INCLUDES \n-void TARGET_EXTRA_PRE_INCLUDES (const char *sysroot ATTRIBUTE_UNUSED,\n-\t\t\t    const char *iprefix ATTRIBUTE_UNUSED,\n-\t\t\t    int stdinc ATTRIBUTE_UNUSED)\n+void\n+TARGET_EXTRA_PRE_INCLUDES (const char *sysroot ATTRIBUTE_UNUSED,\n+\t\t\t   const char *iprefix ATTRIBUTE_UNUSED,\n+\t\t\t   int stdinc ATTRIBUTE_UNUSED)\n {\n }\n #endif"}, {"sha": "e912d6a90d1e4e68f7297994f03f4cdefbf4162c", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -1,6 +1,6 @@\n /* Expands front end tree to back end RTL for GCC.\n    Copyright (C) 1987, 1988, 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -5553,7 +5553,8 @@ record_block_change (tree block)\n }\n \n /* Finishes record of boundaries.  */\n-void finalize_block_changes (void)\n+void\n+finalize_block_changes (void)\n {\n   record_block_change (DECL_INITIAL (current_function_decl));\n }"}, {"sha": "fe75320bdb1cd256bd67a355fbbb5c8f6f29e159", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -1,5 +1,5 @@\n /* Simple garbage collection for the GNU compiler.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -906,7 +906,8 @@ ggc_prune_overhead_list (void)\n }\n \n /* Notice that the pointer has been freed.  */\n-void ggc_free_overhead (void *ptr)\n+void\n+ggc_free_overhead (void *ptr)\n {\n   PTR *slot = htab_find_slot_with_hash (ptr_hash, ptr, htab_hash_pointer (ptr),\n \t\t\t\t\tNO_INSERT);\n@@ -939,7 +940,8 @@ add_statistics (void **slot, void *b)\n \n /* Dump per-site memory statistics.  */\n #endif\n-void dump_ggc_loc_statistics (void)\n+void\n+dump_ggc_loc_statistics (void)\n {\n #ifdef GATHER_STATISTICS\n   int nentries = 0;"}, {"sha": "5daf88bd0bcec082d1524a96e809ab81e9dbd753", "filename": "gcc/pointer-set.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Fpointer-set.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Fpointer-set.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-set.c?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -1,5 +1,5 @@\n /* Set operations on pointers\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2006 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -84,7 +84,8 @@ pointer_set_create (void)\n }\n \n /* Reclaims all memory associated with PSET.  */\n-void pointer_set_destroy (struct pointer_set_t *pset)\n+void\n+pointer_set_destroy (struct pointer_set_t *pset)\n {\n   XDELETEVEC (pset->slots);\n   XDELETE (pset);"}, {"sha": "71bd3ae87cce8390fe355fb671c6f84256e09182", "filename": "gcc/rtl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -1,6 +1,6 @@\n /* RTL utility routines.\n    Copyright (C) 1987, 1988, 1991, 1994, 1997, 1998, 1999, 2000, 2001, 2002,\n-   2003, 2004, 2005 Free Software Foundation, Inc.\n+   2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -441,7 +441,8 @@ rtx_equal_p (rtx x, rtx y)\n   return 1;\n }\n \n-void dump_rtx_statistics (void)\n+void\n+dump_rtx_statistics (void)\n {\n #ifdef GATHER_STATISTICS\n   int i;"}, {"sha": "684ea78f15c1f41cd6da161bc70e91d1d410e9dc", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -1,5 +1,5 @@\n /* Dead code elimination pass for the GNU compiler.\n-   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Ben Elliston <bje@redhat.com>\n    and Andrew MacLeod <amacleod@redhat.com>\n    Adapted to use control dependence by Steven Bosscher, SUSE Labs.\n@@ -147,8 +147,8 @@ set_control_dependence_map_bit (basic_block bb, int edge_index)\n }\n \n /* Clear all control dependences for block BB.  */\n-static inline\n-void clear_control_dependence_bitmap (basic_block bb)\n+static inline void\n+clear_control_dependence_bitmap (basic_block bb)\n {\n   bitmap_clear (control_dependence_map[bb->index]);\n }"}, {"sha": "9be67cadb030d27c5f526764292953d5a3d5d14d", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -1,5 +1,5 @@\n /* Tree based points-to analysis\n-   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Daniel Berlin <dberlin@dberlin.org>\n \n This file is part of GCC.\n@@ -3572,7 +3572,8 @@ fieldoff_compare (const void *pa, const void *pb)\n }\n \n /* Sort a fieldstack according to the field offset and sizes.  */\n-void sort_fieldstack (VEC(fieldoff_s,heap) *fieldstack)\n+void\n+sort_fieldstack (VEC(fieldoff_s,heap) *fieldstack)\n {\n   qsort (VEC_address (fieldoff_s, fieldstack), \n \t VEC_length (fieldoff_s, fieldstack), \n@@ -4685,7 +4686,7 @@ struct tree_opt_pass pass_ipa_pta =\n };\n \n /* Initialize the heapvar for statement mapping.  */\n-void \n+void\n init_alias_heapvars (void)\n {\n   heapvar_for_stmt = htab_create_ggc (11, tree_map_hash, tree_map_eq, NULL);"}, {"sha": "9900f9e1be01adc91b5592f7ac0bf42560fc87f1", "filename": "gcc/varray.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Fvarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f676b352f6fc5981c6a477c92e735c04375ed6/gcc%2Fvarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.c?ref=83f676b352f6fc5981c6a477c92e735c04375ed6", "patch": "@@ -240,7 +240,8 @@ print_statistics (void **slot, void *b)\n #endif\n \n /* Output per-varray memory usage statistics.  */\n-void dump_varray_statistics (void)\n+void\n+dump_varray_statistics (void)\n {\n #ifdef GATHER_STATISTICS\n   struct output_info info;"}]}