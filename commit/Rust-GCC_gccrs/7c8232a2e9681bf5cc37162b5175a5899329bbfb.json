{"sha": "7c8232a2e9681bf5cc37162b5175a5899329bbfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M4MjMyYTJlOTY4MWJmNWNjMzcxNjJiNTE3NWE1ODk5MzI5YmJmYg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-27T14:46:22Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-27T14:46:22Z"}, "message": "rs6000.h (FUNCTION_ARG, [...]): Delete.\n\n\t* config/rs6000/rs6000.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/rs6000/rs6000-protos.h (function_arg_advance): Delete.\n\t(function_arg): Delete.\n\t(function_arg_boundary): Take a const_tree.\n\t* config/rs6000/rs6000.c (function_arg_boundary): Likewise.\n\t(rs6000_spe_function_arg): Likewise.\n\t(rs6000_parm_start): Likewise.\n\t(rs6000_arg_size): Likewise.\n\t(rs6000_darwin64_record_arg_advance_recurse): Likewise.\n\t(rs6000_darwin64_record_arg): Likewise.  Take a bool instead of\n\tan int.\n\t(rs6000_mixed_function_arg): Likewise.\n\t(function_arg): Rename to...\n\t(rs6000_function_arg): ...this.\n\t(function_arg_advance): Rename to...\n\t(rs6000_function_arg_advance_1): ...this\n\t(rs6000_function_arg_advance): New function.  Call it.\n\t(setup_incoming_varargs): Call rs6000_function_arg_advance_1.\n\t(rs6000_return_in_memory): Adjust call to rs6000_darwin64_record_arg.\n\t(rs6000_function_value): Likewise.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r163586", "tree": {"sha": "1cda059fb6cc83972b590ac9dead00e689286b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cda059fb6cc83972b590ac9dead00e689286b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c8232a2e9681bf5cc37162b5175a5899329bbfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8232a2e9681bf5cc37162b5175a5899329bbfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c8232a2e9681bf5cc37162b5175a5899329bbfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8232a2e9681bf5cc37162b5175a5899329bbfb/comments", "author": null, "committer": null, "parents": [{"sha": "da787decc600b8cad4b892a39a59f48400393471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da787decc600b8cad4b892a39a59f48400393471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da787decc600b8cad4b892a39a59f48400393471"}], "stats": {"total": 123, "additions": 65, "deletions": 58}, "files": [{"sha": "29671050d7f46fe0867a73f4e011000d84e71c58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8232a2e9681bf5cc37162b5175a5899329bbfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8232a2e9681bf5cc37162b5175a5899329bbfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c8232a2e9681bf5cc37162b5175a5899329bbfb", "patch": "@@ -1,3 +1,27 @@\n+2010-08-27  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/rs6000/rs6000-protos.h (function_arg_advance): Delete.\n+\t(function_arg): Delete.\n+\t(function_arg_boundary): Take a const_tree.\n+\t* config/rs6000/rs6000.c (function_arg_boundary): Likewise.\n+\t(rs6000_spe_function_arg): Likewise.\n+\t(rs6000_parm_start): Likewise.\n+\t(rs6000_arg_size): Likewise.\n+\t(rs6000_darwin64_record_arg_advance_recurse): Likewise.\n+\t(rs6000_darwin64_record_arg): Likewise.  Take a bool instead of\n+\tan int.\n+\t(rs6000_mixed_function_arg): Likewise.\n+\t(function_arg): Rename to...\n+\t(rs6000_function_arg): ...this.\n+\t(function_arg_advance): Rename to...\n+\t(rs6000_function_arg_advance_1): ...this\n+\t(rs6000_function_arg_advance): New function.  Call it.\n+\t(setup_incoming_varargs): Call rs6000_function_arg_advance_1.\n+\t(rs6000_return_in_memory): Adjust call to rs6000_darwin64_record_arg.\n+\t(rs6000_function_value): Likewise.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-08-27  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.md (enabled): Test the value of arch_enabled"}, {"sha": "79370d88435cc4b917a5586449dd6ffd846d1b6b", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8232a2e9681bf5cc37162b5175a5899329bbfb/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8232a2e9681bf5cc37162b5175a5899329bbfb/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=7c8232a2e9681bf5cc37162b5175a5899329bbfb", "patch": "@@ -136,10 +136,7 @@ extern unsigned int rs6000_special_round_type_align (tree, unsigned int,\n \t\t\t\t\t\t     unsigned int);\n extern unsigned int darwin_rs6000_special_round_type_align (tree, unsigned int,\n \t\t\t\t\t\t\t    unsigned int);\n-extern void function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t  tree, int, int);\n-extern int function_arg_boundary (enum machine_mode, tree);\n-extern rtx function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n+extern int function_arg_boundary (enum machine_mode, const_tree);\n extern tree altivec_resolve_overloaded_builtin (location_t, tree, void *);\n extern rtx rs6000_libcall_value (enum machine_mode);\n extern rtx rs6000_va_arg (tree, tree);"}, {"sha": "c5ed8d63a7e6f008b8116430786ae966f8b5d8fa", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8232a2e9681bf5cc37162b5175a5899329bbfb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8232a2e9681bf5cc37162b5175a5899329bbfb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7c8232a2e9681bf5cc37162b5175a5899329bbfb", "patch": "@@ -1155,20 +1155,25 @@ static int rs6000_tls_symbol_ref_1 (rtx *, void *);\n static const char *rs6000_get_some_local_dynamic_name (void);\n static int rs6000_get_some_local_dynamic_name_1 (rtx *, void *);\n static rtx rs6000_complex_function_value (enum machine_mode);\n-static rtx rs6000_spe_function_arg (CUMULATIVE_ARGS *,\n-\t\t\t\t    enum machine_mode, tree);\n+static rtx rs6000_spe_function_arg (const CUMULATIVE_ARGS *,\n+\t\t\t\t    enum machine_mode, const_tree);\n static void rs6000_darwin64_record_arg_advance_flush (CUMULATIVE_ARGS *,\n \t\t\t\t\t\t      HOST_WIDE_INT, int);\n static void rs6000_darwin64_record_arg_advance_recurse (CUMULATIVE_ARGS *,\n-\t\t\t\t\t\t\ttree, HOST_WIDE_INT);\n+\t\t\t\t\t\t\tconst_tree,\n+\t\t\t\t\t\t\tHOST_WIDE_INT);\n static void rs6000_darwin64_record_arg_flush (CUMULATIVE_ARGS *,\n \t\t\t\t\t      HOST_WIDE_INT,\n \t\t\t\t\t      rtx[], int *);\n static void rs6000_darwin64_record_arg_recurse (CUMULATIVE_ARGS *,\n \t\t\t\t\t\tconst_tree, HOST_WIDE_INT,\n \t\t\t\t\t\trtx[], int *);\n-static rtx rs6000_darwin64_record_arg (CUMULATIVE_ARGS *, const_tree, int, bool);\n-static rtx rs6000_mixed_function_arg (enum machine_mode, tree, int);\n+static rtx rs6000_darwin64_record_arg (CUMULATIVE_ARGS *, const_tree, bool, bool);\n+static rtx rs6000_mixed_function_arg (enum machine_mode, const_tree, int);\n+static void rs6000_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t\t const_tree, bool);\n+static rtx rs6000_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\tconst_tree, bool);\n static void rs6000_move_block_from_reg (int regno, rtx x, int nregs);\n static void setup_incoming_varargs (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree,\n@@ -1554,6 +1559,10 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #define TARGET_PASS_BY_REFERENCE rs6000_pass_by_reference\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES rs6000_arg_partial_bytes\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE rs6000_function_arg_advance\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG rs6000_function_arg\n \n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST rs6000_build_builtin_va_list\n@@ -7466,7 +7475,7 @@ rs6000_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n       valcum.vregno = ALTIVEC_ARG_MIN_REG;\n       /* Do a trial code generation as if this were going to be passed\n \t as an argument; if any part goes in memory, we return NULL.  */\n-      valret = rs6000_darwin64_record_arg (&valcum, type, 1, true);\n+      valret = rs6000_darwin64_record_arg (&valcum, type, true, true);\n       if (valret)\n \treturn false;\n       /* Otherwise fall through to more conventional ABI rules.  */\n@@ -7650,7 +7659,7 @@ function_arg_padding (enum machine_mode mode, const_tree type)\n    Quadword align large synthetic vector types.   */\n \n int\n-function_arg_boundary (enum machine_mode mode, tree type)\n+function_arg_boundary (enum machine_mode mode, const_tree type)\n {\n   if (DEFAULT_ABI == ABI_V4\n       && (GET_MODE_SIZE (mode) == 8\n@@ -7680,7 +7689,8 @@ function_arg_boundary (enum machine_mode mode, tree type)\n    the parameter area.  NWORDS of the parameter area are already used.  */\n \n static unsigned int\n-rs6000_parm_start (enum machine_mode mode, tree type, unsigned int nwords)\n+rs6000_parm_start (enum machine_mode mode, const_tree type,\n+\t\t   unsigned int nwords)\n {\n   unsigned int align;\n   unsigned int parm_offset;\n@@ -7693,7 +7703,7 @@ rs6000_parm_start (enum machine_mode mode, tree type, unsigned int nwords)\n /* Compute the size (in words) of a function argument.  */\n \n static unsigned long\n-rs6000_arg_size (enum machine_mode mode, tree type)\n+rs6000_arg_size (enum machine_mode mode, const_tree type)\n {\n   unsigned long size;\n \n@@ -7771,7 +7781,7 @@ rs6000_darwin64_record_arg_advance_flush (CUMULATIVE_ARGS *cum,\n \n static void\n rs6000_darwin64_record_arg_advance_recurse (CUMULATIVE_ARGS *cum,\n-\t\t\t\t\t    tree type,\n+\t\t\t\t\t    const_tree type,\n \t\t\t\t\t    HOST_WIDE_INT startbitpos)\n {\n   tree f;\n@@ -7867,9 +7877,9 @@ rs6000_darwin64_struct_check_p (enum machine_mode mode, const_tree type)\n    with MODE and TYPE set to that of the pointer to the arg, not the arg\n    itself.  */\n \n-void\n-function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t      tree type, int named, int depth)\n+static void\n+rs6000_function_arg_advance_1 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t       const_tree type, bool named, int depth)\n {\n \n   /* Only tick off an argument if we're not recursing.  */\n@@ -8062,6 +8072,13 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     }\n }\n \n+static void\n+rs6000_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t     const_tree type, bool named)\n+{\n+  rs6000_function_arg_advance_1 (cum, mode, type, named, 0);\n+}\n+\n static rtx\n spe_build_register_parallel (enum machine_mode mode, int gregno)\n {\n@@ -8100,8 +8117,8 @@ spe_build_register_parallel (enum machine_mode mode, int gregno)\n \n /* Determine where to put a SIMD argument on the SPE.  */\n static rtx\n-rs6000_spe_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t\t tree type)\n+rs6000_spe_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t const_tree type)\n {\n   int gregno = cum->sysv_gregno;\n \n@@ -8296,7 +8313,7 @@ rs6000_darwin64_record_arg_recurse (CUMULATIVE_ARGS *cum, const_tree type,\n \n static rtx\n rs6000_darwin64_record_arg (CUMULATIVE_ARGS *orig_cum, const_tree type,\n-\t\t\t    int named, bool retval)\n+\t\t\t    bool named, bool retval)\n {\n   rtx rvec[FIRST_PSEUDO_REGISTER];\n   int k = 1, kbase = 1;\n@@ -8341,7 +8358,8 @@ rs6000_darwin64_record_arg (CUMULATIVE_ARGS *orig_cum, const_tree type,\n /* Determine where to place an argument in 64-bit mode with 32-bit ABI.  */\n \n static rtx\n-rs6000_mixed_function_arg (enum machine_mode mode, tree type, int align_words)\n+rs6000_mixed_function_arg (enum machine_mode mode, const_tree type,\n+\t\t\t   int align_words)\n {\n   int n_units;\n   int i, k;\n@@ -8412,9 +8430,9 @@ rs6000_mixed_function_arg (enum machine_mode mode, tree type, int align_words)\n    with MODE and TYPE set to that of the pointer to the arg, not the arg\n    itself.  */\n \n-rtx\n-function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t      tree type, int named)\n+static rtx\n+rs6000_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t     const_tree type, bool named)\n {\n   enum rs6000_abi abi = DEFAULT_ABI;\n \n@@ -8861,7 +8879,7 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n   /* Skip the last named argument.  */\n   next_cum = *cum;\n-  function_arg_advance (&next_cum, mode, type, 1, 0);\n+  rs6000_function_arg_advance_1 (&next_cum, mode, type, true, 0);\n \n   if (DEFAULT_ABI == ABI_V4)\n     {\n@@ -26584,7 +26602,7 @@ rs6000_function_value (const_tree valtype,\n       valcum.vregno = ALTIVEC_ARG_MIN_REG;\n       /* Do a trial code generation as if this were going to be passed as\n \t an argument; if any part goes in memory, we return NULL.  */\n-      valret = rs6000_darwin64_record_arg (&valcum, valtype, 1, true);\n+      valret = rs6000_darwin64_record_arg (&valcum, valtype, true, true);\n       if (valret)\n \treturn valret;\n       /* Otherwise fall through to standard ABI rules.  */"}, {"sha": "5058fb58ceb3b55bfbde9cc7ba9c6a514a86f3c8", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8232a2e9681bf5cc37162b5175a5899329bbfb/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8232a2e9681bf5cc37162b5175a5899329bbfb/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=7c8232a2e9681bf5cc37162b5175a5899329bbfb", "patch": "@@ -1696,38 +1696,6 @@ typedef struct rs6000_args\n #define INIT_CUMULATIVE_LIBCALL_ARGS(CUM, MODE, LIBNAME) \\\n   init_cumulative_args (&CUM, NULL_TREE, LIBNAME, FALSE, TRUE, 0)\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n-  function_arg_advance (&CUM, MODE, TYPE, NAMED, 0)\n-\n-/* Determine where to put an argument to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).\n-\n-   On RS/6000 the first eight words of non-FP are normally in registers\n-   and the rest are pushed.  The first 13 FP args are in registers.\n-\n-   If this is floating-point and no prototype is specified, we use\n-   both an FP and integer register (or possibly FP reg and stack).  Library\n-   functions (when TYPE is zero) always have the proper types for args,\n-   so we can pass the FP value just in one register.  emit_library_function\n-   doesn't support EXPR_LIST anyway.  */\n-\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  function_arg (&CUM, MODE, TYPE, NAMED)\n-\n /* If defined, a C expression which determines whether, and in which\n    direction, to pad out an argument with extra space.  The value\n    should be of type `enum direction': either `upward' to pad above"}]}