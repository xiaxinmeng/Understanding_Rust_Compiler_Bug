{"sha": "2dff8956e37c835db601f922cadc5b1229a0a6bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmZjg5NTZlMzdjODM1ZGI2MDFmOTIyY2FkYzViMTIyOWEwYTZiZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-09-24T15:16:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-09-24T15:16:23Z"}, "message": "re PR c++/33506 (TYPE_RAISES_EXCEPTIONS dumped with attributes)\n\n\tPR c++/33506\n\t* langhooks.h (struct lang_hooks_for_types): Add type_hash_eq\n\tfield.\n\t* langhooks-def.h (LANG_HOOKS_TYPE_HASH_EQ): Define.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Add LANG_HOOKS_TYPE_HASH_EQ.\n\t* tree.c (type_hash_eq): For FUNCTION_TYPE use\n\tlang_hooks.type.type_hash_eq in addition to generic tests.\n\n\t* cp-tree.h (cxx_type_hash_eq): New prototype.\n\t* cp-objcp-common.h (LANG_HOOKS_TYPE_HASH_EQ): Redefine.\n\t* tree.c (cxx_type_hash_eq): New function.\n\n\t* g++.dg/ext/attrib29.C: New test.\n\nFrom-SVN: r128718", "tree": {"sha": "f797391d227e5aa4b01ffffd275aa29817b4403c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f797391d227e5aa4b01ffffd275aa29817b4403c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dff8956e37c835db601f922cadc5b1229a0a6bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dff8956e37c835db601f922cadc5b1229a0a6bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dff8956e37c835db601f922cadc5b1229a0a6bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dff8956e37c835db601f922cadc5b1229a0a6bd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c946ce8bb9716d31286140dad73e0d3b9e48c36b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c946ce8bb9716d31286140dad73e0d3b9e48c36b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c946ce8bb9716d31286140dad73e0d3b9e48c36b"}], "stats": {"total": 78, "additions": 71, "deletions": 7}, "files": [{"sha": "4ef90d38a7c1f281825d78bea1bb789e1bd96be1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2dff8956e37c835db601f922cadc5b1229a0a6bd", "patch": "@@ -1,3 +1,13 @@\n+2007-09-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/33506\n+\t* langhooks.h (struct lang_hooks_for_types): Add type_hash_eq\n+\tfield.\n+\t* langhooks-def.h (LANG_HOOKS_TYPE_HASH_EQ): Define.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Add LANG_HOOKS_TYPE_HASH_EQ.\n+\t* tree.c (type_hash_eq): For FUNCTION_TYPE use\n+\tlang_hooks.type.type_hash_eq in addition to generic tests.\n+\n 2007-09-24  Pranav Bhandarkar  <pranav.bhandarkar@celunite.com>\n \tRamana Radhakrishnan  <ramana@hercules.pun.celunite.com>\n "}, {"sha": "5e9b1875b2eb558e0b1596c853e3333c195d0f76", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2dff8956e37c835db601f922cadc5b1229a0a6bd", "patch": "@@ -1,3 +1,10 @@\n+2007-09-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/33506\n+\t* cp-tree.h (cxx_type_hash_eq): New prototype.\n+\t* cp-objcp-common.h (LANG_HOOKS_TYPE_HASH_EQ): Redefine.\n+\t* tree.c (cxx_type_hash_eq): New function.\n+\n 2007-09-24  Douglas Gregor  <doug.gregor@gmail.com>\n \n \tPR c++/33185\t"}, {"sha": "7f8138c6e60431805c96402336ecf631de5145c8", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=2dff8956e37c835db601f922cadc5b1229a0a6bd", "patch": "@@ -88,6 +88,8 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_COMDAT_GROUP cxx_comdat_group\n #undef  LANG_HOOKS_BUILTIN_FUNCTION\n #define LANG_HOOKS_BUILTIN_FUNCTION cxx_builtin_function\n+#undef\tLANG_HOOKS_TYPE_HASH_EQ\n+#define LANG_HOOKS_TYPE_HASH_EQ\tcxx_type_hash_eq\n \n #undef LANG_HOOKS_FUNCTION_INIT\n #define LANG_HOOKS_FUNCTION_INIT cxx_push_function_context"}, {"sha": "83f4d4232316972ae757c73130e8e7a6a79640fe", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2dff8956e37c835db601f922cadc5b1229a0a6bd", "patch": "@@ -4752,6 +4752,7 @@ extern tree rvalue\t\t\t\t(tree);\n extern tree convert_bitfield_to_declared_type   (tree);\n extern tree cp_save_expr\t\t\t(tree);\n extern bool cast_valid_in_integral_constant_expression_p (tree);\n+extern bool cxx_type_hash_eq\t\t\t(const_tree, const_tree);\n \n /* in typeck.c */\n extern int string_conv_p\t\t\t(const_tree, const_tree, int);"}, {"sha": "77aac702f208d0e6b3aca1194d6cb6069b7cbf5d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2dff8956e37c835db601f922cadc5b1229a0a6bd", "patch": "@@ -2261,6 +2261,20 @@ cp_build_type_attribute_variant (tree type, tree attributes)\n   return new_type;\n }\n \n+/* Return TRUE if TYPE1 and TYPE2 are identical for type hashing purposes.\n+   Called only after doing all language independent checks.  Only\n+   to check TYPE_RAISES_EXCEPTIONS for FUNCTION_TYPE, the rest is already\n+   compared in type_hash_eq.  */\n+\n+bool\n+cxx_type_hash_eq (const_tree typea, const_tree typeb)\n+{\n+  gcc_assert (TREE_CODE (typea) == FUNCTION_TYPE);\n+\n+  return comp_except_specs (TYPE_RAISES_EXCEPTIONS (typea),\n+\t\t\t    TYPE_RAISES_EXCEPTIONS (typeb), 1);\n+}\n+\n /* Apply FUNC to all language-specific sub-trees of TP in a pre-order\n    traversal.  Called from walk_tree.  */\n "}, {"sha": "28efd6beb49c86ef0bceb0408550e5e546def565", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=2dff8956e37c835db601f922cadc5b1229a0a6bd", "patch": "@@ -180,6 +180,7 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_TYPE_MAX_SIZE\tlhd_return_null_const_tree\n #define LANG_HOOKS_OMP_FIRSTPRIVATIZE_TYPE_SIZES \\\n   lhd_omp_firstprivatize_type_sizes\n+#define LANG_HOOKS_TYPE_HASH_EQ\t\tNULL\n #define LANG_HOOKS_HASH_TYPES\t\ttrue\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n@@ -192,6 +193,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_INCOMPLETE_TYPE_ERROR, \\\n   LANG_HOOKS_TYPE_MAX_SIZE, \\\n   LANG_HOOKS_OMP_FIRSTPRIVATIZE_TYPE_SIZES, \\\n+  LANG_HOOKS_TYPE_HASH_EQ, \\\n   LANG_HOOKS_HASH_TYPES \\\n }\n "}, {"sha": "7efe7425eb814d4bcc9a18147382603fbe66b4a0", "filename": "gcc/langhooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=2dff8956e37c835db601f922cadc5b1229a0a6bd", "patch": "@@ -129,6 +129,12 @@ struct lang_hooks_for_types\n      firstprivate variables.  */\n   void (*omp_firstprivatize_type_sizes) (struct gimplify_omp_ctx *, tree);\n \n+  /* Return TRUE if TYPE1 and TYPE2 are identical for type hashing purposes.\n+     Called only after doing all language independent checks.\n+     At present, this function is only called when both TYPE1 and TYPE2 are\n+     FUNCTION_TYPEs.  */\n+  bool (*type_hash_eq) (const_tree, const_tree);\n+\n   /* Nonzero if types that are identical are to be hashed so that only\n      one copy is kept.  If a language requires unique types for each\n      user-specified type, such as Ada, this should be set to TRUE.  */"}, {"sha": "8e146d2917a89ba45c8554563c8d9998571fbc7a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2dff8956e37c835db601f922cadc5b1229a0a6bd", "patch": "@@ -1,3 +1,8 @@\n+2007-09-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/33506\n+\t* g++.dg/ext/attrib29.C: New test.\n+\n 2007-09-23  Ollie Wild  <aaw@google.com>\n \n \t* gcc.dg/fold-bitand-1.c: New test."}, {"sha": "710a5ce276308deed889ace82e1b4ecc7c041aa2", "filename": "gcc/testsuite/g++.dg/ext/attrib29.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib29.C?ref=2dff8956e37c835db601f922cadc5b1229a0a6bd", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/33506\n+// { dg-do compile }\n+\n+extern int f1 (char *) __attribute__ ((warn_unused_result));\n+extern int f2 (char *) throw () __attribute__ ((warn_unused_result));\n+extern int f2 (char *) throw ();\n+\n+extern int f3 (char *) __attribute__ ((nonnull (1)));\n+extern int f4 (char *) throw () __attribute__ ((nonnull (1)));\n+extern int f4 (char *) throw ();"}, {"sha": "88ec29e13e37d287c0574efcd0d8e49e366dbbef", "filename": "gcc/tree.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dff8956e37c835db601f922cadc5b1229a0a6bd/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2dff8956e37c835db601f922cadc5b1229a0a6bd", "patch": "@@ -4608,17 +4608,24 @@ type_hash_eq (const void *va, const void *vb)\n \t\t\t\t      TYPE_FIELDS (b->type))));\n \n     case FUNCTION_TYPE:\n-      return (TYPE_ARG_TYPES (a->type) == TYPE_ARG_TYPES (b->type)\n-\t      || (TYPE_ARG_TYPES (a->type)\n-\t\t  && TREE_CODE (TYPE_ARG_TYPES (a->type)) == TREE_LIST\n-\t\t  && TYPE_ARG_TYPES (b->type)\n-\t\t  && TREE_CODE (TYPE_ARG_TYPES (b->type)) == TREE_LIST\n-\t\t  && type_list_equal (TYPE_ARG_TYPES (a->type),\n-\t\t\t\t      TYPE_ARG_TYPES (b->type))));\n+      if (TYPE_ARG_TYPES (a->type) == TYPE_ARG_TYPES (b->type)\n+\t  || (TYPE_ARG_TYPES (a->type)\n+\t      && TREE_CODE (TYPE_ARG_TYPES (a->type)) == TREE_LIST\n+\t      && TYPE_ARG_TYPES (b->type)\n+\t      && TREE_CODE (TYPE_ARG_TYPES (b->type)) == TREE_LIST\n+\t      && type_list_equal (TYPE_ARG_TYPES (a->type),\n+\t\t\t\t  TYPE_ARG_TYPES (b->type))))\n+\tbreak;\n+      return 0;\n \n     default:\n       return 0;\n     }\n+\n+  if (lang_hooks.types.type_hash_eq != NULL)\n+    return lang_hooks.types.type_hash_eq (a->type, b->type);\n+\n+  return 1;\n }\n \n /* Return the cached hash value.  */"}]}