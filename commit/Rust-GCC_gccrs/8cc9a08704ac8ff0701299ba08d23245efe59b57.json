{"sha": "8cc9a08704ac8ff0701299ba08d23245efe59b57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNjOWEwODcwNGFjOGZmMDcwMTI5OWJhMDhkMjMyNDVlZmU1OWI1Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-12-04T23:13:56Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-12-04T23:13:56Z"}, "message": "sparc.c (sparc_do_work_around_errata): Use mem_ref instead of MEM_P in a couple more places.\n\n\t* config/sparc/sparc.c (sparc_do_work_around_errata): Use mem_ref\n\tinstead of MEM_P in a couple more places.  Fix formatting issues.\n\nFrom-SVN: r255393", "tree": {"sha": "fe4c6c13ce5c64bef492474502759c2b83db9a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe4c6c13ce5c64bef492474502759c2b83db9a58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cc9a08704ac8ff0701299ba08d23245efe59b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc9a08704ac8ff0701299ba08d23245efe59b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cc9a08704ac8ff0701299ba08d23245efe59b57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc9a08704ac8ff0701299ba08d23245efe59b57/comments", "author": null, "committer": null, "parents": [{"sha": "472a7639ea594cc35f62d82b12b3fa7370a3c6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472a7639ea594cc35f62d82b12b3fa7370a3c6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/472a7639ea594cc35f62d82b12b3fa7370a3c6a4"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "57ef007e21eb1acad143d73eb5f89fbda1e34beb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc9a08704ac8ff0701299ba08d23245efe59b57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc9a08704ac8ff0701299ba08d23245efe59b57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cc9a08704ac8ff0701299ba08d23245efe59b57", "patch": "@@ -1,3 +1,8 @@\n+2017-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (sparc_do_work_around_errata): Use mem_ref\n+\tinstead of MEM_P in a couple more places.  Fix formatting issues.\n+\n 2017-12-04  Jim Wilson  <jimw@sifive.com>\n \n \t* config/riscv/riscv.c (riscv_for_each_saved_reg): Use GP_REG_LAST"}, {"sha": "9124ce9cf718c773736d655fa39f6c56c7edeb85", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc9a08704ac8ff0701299ba08d23245efe59b57/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc9a08704ac8ff0701299ba08d23245efe59b57/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=8cc9a08704ac8ff0701299ba08d23245efe59b57", "patch": "@@ -1050,43 +1050,42 @@ sparc_do_work_around_errata (void)\n       /* Look into the instruction in a delay slot.  */\n       if (NONJUMP_INSN_P (insn)\n \t  && (seq = dyn_cast <rtx_sequence *> (PATTERN (insn))))\n-\t  {\n-\t    jump = seq->insn (0);\n-\t    insn = seq->insn (1);\n-\t  }\n+\t{\n+\t  jump = seq->insn (0);\n+\t  insn = seq->insn (1);\n+\t}\n       else if (JUMP_P (insn))\n \tjump = insn;\n       else\n \tjump = NULL;\n \n-      /* Place a NOP at the branch target of an integer branch if it is\n-\t a floating-point operation or a floating-point branch.  */\n+      /* Place a NOP at the branch target of an integer branch if it is a\n+\t floating-point operation or a floating-point branch.  */\n       if (sparc_fix_gr712rc\n-\t  && jump != NULL_RTX\n+\t  && jump\n \t  && get_attr_branch_type (jump) == BRANCH_TYPE_ICC)\n \t{\n \t  rtx_insn *target = next_active_insn (JUMP_LABEL_AS_INSN (jump));\n \t  if (target\n \t      && (fpop_insn_p (target)\n-\t\t  || ((JUMP_P (target)\n-\t\t       && get_attr_branch_type (target) == BRANCH_TYPE_FCC))))\n+\t\t  || (JUMP_P (target)\n+\t\t      && get_attr_branch_type (target) == BRANCH_TYPE_FCC)))\n \t    emit_insn_before (gen_nop (), target);\n \t}\n \n-      /* Insert a NOP between load instruction and atomic\n-\t instruction.  Insert a NOP at branch target if load\n-\t in delay slot and atomic instruction at branch target.  */\n+      /* Insert a NOP between load instruction and atomic instruction.  Insert\n+\t a NOP at branch target if there is a load in delay slot and an atomic\n+\t instruction at branch target.  */\n       if (sparc_fix_ut700\n \t  && NONJUMP_INSN_P (insn)\n \t  && (set = single_set (insn)) != NULL_RTX\n-\t  && MEM_P (SET_SRC (set))\n+\t  && mem_ref (SET_SRC (set))\n \t  && REG_P (SET_DEST (set)))\n \t{\n \t  if (jump)\n \t    {\n \t      rtx_insn *target = next_active_insn (JUMP_LABEL_AS_INSN (jump));\n-\t      if (target\n-\t\t  && atomic_insn_for_leon3_p (target))\n+\t      if (target && atomic_insn_for_leon3_p (target))\n \t\temit_insn_before (gen_nop (), target);\n \t    }\n \n@@ -1098,7 +1097,9 @@ sparc_do_work_around_errata (void)\n \t    insert_nop = true;\n \t}\n \n-      /* Look for sequences that could trigger the GRLIB-TN-0013 errata.  */\n+      /* Look for a sequence that starts with a fdiv or fsqrt instruction and\n+\t ends with another fdiv or fsqrt instruction with no dependencies on\n+\t the former, along with an appropriate pattern in between.  */\n       if (sparc_fix_lost_divsqrt\n \t  && NONJUMP_INSN_P (insn)\n \t  && div_sqrt_insn_p (insn))\n@@ -1229,8 +1230,8 @@ sparc_do_work_around_errata (void)\n \t\t then the sequence cannot be problematic.  */\n \t      if (i == 0)\n \t\t{\n-\t\t  if (((set = single_set (after)) != NULL_RTX)\n-\t\t      && (MEM_P (SET_DEST (set)) || MEM_P (SET_SRC (set))))\n+\t\t  if ((set = single_set (after)) != NULL_RTX\n+\t\t      && (MEM_P (SET_DEST (set)) || mem_ref (SET_SRC (set))))\n \t\t    break;\n \n \t\t  after = next_active_insn (after);\n@@ -1240,21 +1241,21 @@ sparc_do_work_around_errata (void)\n \n \t      /* Add NOP if third instruction is a store.  */\n \t      if (i == 1\n-\t\t  && ((set = single_set (after)) != NULL_RTX)\n+\t\t  && (set = single_set (after)) != NULL_RTX\n \t\t  && MEM_P (SET_DEST (set)))\n \t\tinsert_nop = true;\n \t    }\n \t}\n-      else\n+\n       /* Look for a single-word load into an odd-numbered FP register.  */\n-      if (sparc_fix_at697f\n-\t  && NONJUMP_INSN_P (insn)\n-\t  && (set = single_set (insn)) != NULL_RTX\n-\t  && GET_MODE_SIZE (GET_MODE (SET_SRC (set))) == 4\n-\t  && MEM_P (SET_SRC (set))\n-\t  && REG_P (SET_DEST (set))\n-\t  && REGNO (SET_DEST (set)) > 31\n-\t  && REGNO (SET_DEST (set)) % 2 != 0)\n+      else if (sparc_fix_at697f\n+\t       && NONJUMP_INSN_P (insn)\n+\t       && (set = single_set (insn)) != NULL_RTX\n+\t       && GET_MODE_SIZE (GET_MODE (SET_SRC (set))) == 4\n+\t       && mem_ref (SET_SRC (set))\n+\t       && REG_P (SET_DEST (set))\n+\t       && REGNO (SET_DEST (set)) > 31\n+\t       && REGNO (SET_DEST (set)) % 2 != 0)\n \t{\n \t  /* The wrong dependency is on the enclosing double register.  */\n \t  const unsigned int x = REGNO (SET_DEST (set)) - 1;"}]}