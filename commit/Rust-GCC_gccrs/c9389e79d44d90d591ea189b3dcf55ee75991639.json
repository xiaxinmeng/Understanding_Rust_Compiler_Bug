{"sha": "c9389e79d44d90d591ea189b3dcf55ee75991639", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkzODllNzlkNDRkOTBkNTkxZWExODliM2RjZjU1ZWU3NTk5MTYzOQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2003-11-12T16:15:07Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2003-11-12T16:15:07Z"}, "message": "arm.md (storehi): Avoid use of explicit subreg.\n\n* arm.md (storehi): Avoid use of explicit subreg.\n(storehi_bigend, storeinthi, movhi_bigend): Likewise.\n\nFrom-SVN: r73496", "tree": {"sha": "61c496c21ed3191c057397e00a409e89cc9f8f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61c496c21ed3191c057397e00a409e89cc9f8f56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9389e79d44d90d591ea189b3dcf55ee75991639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9389e79d44d90d591ea189b3dcf55ee75991639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9389e79d44d90d591ea189b3dcf55ee75991639", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9389e79d44d90d591ea189b3dcf55ee75991639/comments", "author": null, "committer": null, "parents": [{"sha": "7e28e1a3da46cd824a80d5efddb10384cb324411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e28e1a3da46cd824a80d5efddb10384cb324411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e28e1a3da46cd824a80d5efddb10384cb324411"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "28c9c3c7758313f1fc07fcf33380e9cbe2a46f21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9389e79d44d90d591ea189b3dcf55ee75991639/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9389e79d44d90d591ea189b3dcf55ee75991639/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9389e79d44d90d591ea189b3dcf55ee75991639", "patch": "@@ -1,3 +1,8 @@\n+2003-11-12  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (storehi): Avoid use of explicit subreg.\n+\t(storehi_bigend, storeinthi, movhi_bigend): Likewise.\n+\n 2003-11-12  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* config/sh/sh.md (prefetch): New pattern."}, {"sha": "289687f3631e75b96f7c71ed03a5c049df2d5fb8", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9389e79d44d90d591ea189b3dcf55ee75991639/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9389e79d44d90d591ea189b3dcf55ee75991639/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c9389e79d44d90d591ea189b3dcf55ee75991639", "patch": "@@ -4007,7 +4007,7 @@\n    (set (match_dup 2)\n \t(ashiftrt:SI (match_operand 0 \"\" \"\") (const_int 8)))\n    ;; store the high byte\n-   (set (match_dup 4) (subreg:QI (match_dup 2) 0))]\t;explicit subreg safe\n+   (set (match_dup 4) (match_dup 5))]\n   \"TARGET_ARM\"\n   \"\n   {\n@@ -4023,15 +4023,16 @@\n     operands[1] = adjust_address (operands[1], QImode, 0);\n     operands[3] = gen_lowpart (QImode, operands[0]);\n     operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[2] = gen_reg_rtx (SImode); \n+    operands[2] = gen_reg_rtx (SImode);\n+    operands[5] = gen_lowpart (QImode, operands[2]);\n   }\"\n )\n \n (define_expand \"storehi_bigend\"\n   [(set (match_dup 4) (match_dup 3))\n    (set (match_dup 2)\n \t(ashiftrt:SI (match_operand 0 \"\" \"\") (const_int 8)))\n-   (set (match_operand 1 \"\" \"\")\t(subreg:QI (match_dup 2) 3))]\n+   (set (match_operand 1 \"\" \"\")\t(match_dup 5))]\n   \"TARGET_ARM\"\n   \"\n   {\n@@ -4048,13 +4049,14 @@\n     operands[3] = gen_lowpart (QImode, operands[0]);\n     operands[0] = gen_lowpart (SImode, operands[0]);\n     operands[2] = gen_reg_rtx (SImode);\n+    operands[5] = gen_lowpart (QImode, operands[2]);\n   }\"\n )\n \n ;; Subroutine to store a half word integer constant into memory.\n (define_expand \"storeinthi\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(subreg:QI (match_operand 1 \"\" \"\") 0))\n+\t(match_operand 1 \"\" \"\"))\n    (set (match_dup 3) (match_dup 2))]\n   \"TARGET_ARM\"\n   \"\n@@ -4095,6 +4097,7 @@\n     operands[3] = adjust_address (op0, QImode, 1);\n     operands[0] = adjust_address (operands[0], QImode, 0);\n     operands[2] = gen_lowpart (QImode, operands[2]);\n+    operands[1] = gen_lowpart (QImode, operands[1]);\n   }\"\n )\n \n@@ -4415,11 +4418,12 @@\n    (set (match_dup 3)\n \t(ashiftrt:SI (match_dup 2) (const_int 16)))\n    (set (match_operand:HI 0 \"s_register_operand\" \"\")\n-\t(subreg:HI (match_dup 3) 0))]\n+\t(match_dup 4))]\n   \"TARGET_ARM\"\n   \"\n   operands[2] = gen_reg_rtx (SImode);\n   operands[3] = gen_reg_rtx (SImode);\n+  operands[4] = gen_lowpart (HImode, operands[3]);\n   \"\n )\n "}]}