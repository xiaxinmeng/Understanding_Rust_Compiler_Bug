{"sha": "4f1da2e923a3e7d00d92bb9bc865266246b5f2ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYxZGEyZTkyM2EzZTdkMDBkOTJiYjliYzg2NTI2NjI0NmI1ZjJjYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-12-09T20:28:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-12-09T20:28:14Z"}, "message": "simplify-rtx.c (simplify_subreg): In the CONCAT case...\n\n\t* simplify-rtx.c (simplify_subreg): In the CONCAT case, check whether\n\tthe request subreg is entirely contained in the requested component.\n\t(simplify_gen_subreg): Return null for CONCATs that are rejected\n\tby simplify_subreg.\n\t* expmed.c (store_bit_field): Create a temporary when changing the\n\tvalue to an integer mode.\n\nFrom-SVN: r91965", "tree": {"sha": "17c387c65a3e8f4e3f41a72dac3abe9fb8d0a892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17c387c65a3e8f4e3f41a72dac3abe9fb8d0a892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f1da2e923a3e7d00d92bb9bc865266246b5f2ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1da2e923a3e7d00d92bb9bc865266246b5f2ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f1da2e923a3e7d00d92bb9bc865266246b5f2ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1da2e923a3e7d00d92bb9bc865266246b5f2ca/comments", "author": null, "committer": null, "parents": [{"sha": "36cea8702321ef08783a85f0512c1cc7c30f8bb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36cea8702321ef08783a85f0512c1cc7c30f8bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36cea8702321ef08783a85f0512c1cc7c30f8bb0"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "d63fe3905cc95ab723d74711f51735190015b1cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1da2e923a3e7d00d92bb9bc865266246b5f2ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1da2e923a3e7d00d92bb9bc865266246b5f2ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f1da2e923a3e7d00d92bb9bc865266246b5f2ca", "patch": "@@ -1,3 +1,12 @@\n+2004-12-09  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* simplify-rtx.c (simplify_subreg): In the CONCAT case, check whether\n+\tthe request subreg is entirely contained in the requested component.\n+\t(simplify_gen_subreg): Return null for CONCATs that are rejected\n+\tby simplify_subreg.\n+\t* expmed.c (store_bit_field): Create a temporary when changing the\n+\tvalue to an integer mode.\n+\n 2004-12-09  David Edelsohn  <edelsohn@gnu.org>\n \n \t* real.c (ibm_extended): Correct comment."}, {"sha": "10a95b3862ab9a7db70538bd5e483f38c97dc7f2", "filename": "gcc/expmed.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1da2e923a3e7d00d92bb9bc865266246b5f2ca/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1da2e923a3e7d00d92bb9bc865266246b5f2ca/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=4f1da2e923a3e7d00d92bb9bc865266246b5f2ca", "patch": "@@ -591,16 +591,18 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       offset = 0;\n     }\n \n-  /* If VALUE is a floating-point mode, access it as an integer of the\n-     corresponding size.  This can occur on a machine with 64 bit registers\n-     that uses SFmode for float.  This can also occur for unaligned float\n-     structure fields.  */\n+  /* If VALUE has a floating-point or complex mode, access it as an\n+     integer of the corresponding size.  This can occur on a machine\n+     with 64 bit registers that uses SFmode for float.  It can also\n+     occur for unaligned float or complex fields.  */\n   orig_value = value;\n-  if (GET_MODE_CLASS (GET_MODE (value)) != MODE_INT\n+  if (GET_MODE (value) != VOIDmode\n+      && GET_MODE_CLASS (GET_MODE (value)) != MODE_INT\n       && GET_MODE_CLASS (GET_MODE (value)) != MODE_PARTIAL_INT)\n-    value = gen_lowpart ((GET_MODE (value) == VOIDmode\n-\t\t\t  ? word_mode : int_mode_for_mode (GET_MODE (value))),\n-\t\t\t value);\n+    {\n+      value = gen_reg_rtx (int_mode_for_mode (GET_MODE (value)));\n+      emit_move_insn (gen_lowpart (GET_MODE (orig_value), value), orig_value);\n+    }\n \n   /* Now OFFSET is nonzero only if OP0 is memory\n      and is therefore always measured in bytes.  */"}, {"sha": "2ac56612f8ccd5be25af5c8726b20d31f642d4ab", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1da2e923a3e7d00d92bb9bc865266246b5f2ca/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1da2e923a3e7d00d92bb9bc865266246b5f2ca/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=4f1da2e923a3e7d00d92bb9bc865266246b5f2ca", "patch": "@@ -3722,17 +3722,20 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n      of real and imaginary part.  */\n   if (GET_CODE (op) == CONCAT)\n     {\n-      int is_realpart = byte < (unsigned int) GET_MODE_UNIT_SIZE (innermode);\n-      rtx part = is_realpart ? XEXP (op, 0) : XEXP (op, 1);\n-      unsigned int final_offset;\n-      rtx res;\n+      unsigned int inner_size, final_offset;\n+      rtx part, res;\n+\n+      inner_size = GET_MODE_UNIT_SIZE (innermode);\n+      part = byte < inner_size ? XEXP (op, 0) : XEXP (op, 1);\n+      final_offset = byte % inner_size;\n+      if (final_offset + GET_MODE_SIZE (outermode) > inner_size)\n+\treturn NULL_RTX;\n \n-      final_offset = byte % (GET_MODE_UNIT_SIZE (innermode));\n       res = simplify_subreg (outermode, part, GET_MODE (part), final_offset);\n       if (res)\n \treturn res;\n       if (validate_subreg (outermode, GET_MODE (part), part, final_offset))\n-        return gen_rtx_SUBREG (outermode, part, final_offset);\n+\treturn gen_rtx_SUBREG (outermode, part, final_offset);\n       return NULL_RTX;\n     }\n \n@@ -3786,7 +3789,9 @@ simplify_gen_subreg (enum machine_mode outermode, rtx op,\n   if (newx)\n     return newx;\n \n-  if (GET_CODE (op) == SUBREG || GET_MODE (op) == VOIDmode)\n+  if (GET_CODE (op) == SUBREG\n+      || GET_CODE (op) == CONCAT\n+      || GET_MODE (op) == VOIDmode)\n     return NULL_RTX;\n \n   if (validate_subreg (outermode, innermode, op, byte))"}]}