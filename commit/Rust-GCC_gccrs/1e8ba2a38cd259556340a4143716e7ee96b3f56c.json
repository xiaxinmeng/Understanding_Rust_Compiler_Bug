{"sha": "1e8ba2a38cd259556340a4143716e7ee96b3f56c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU4YmEyYTM4Y2QyNTk1NTYzNDBhNDE0MzcxNmU3ZWU5NmIzZjU2Yw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2000-11-11T12:30:16Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2000-11-11T12:30:16Z"}, "message": "* release: New file.\n\nFrom-SVN: r37384", "tree": {"sha": "d6af08d281a7397cb552a9313d130aff58551d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6af08d281a7397cb552a9313d130aff58551d56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e8ba2a38cd259556340a4143716e7ee96b3f56c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e8ba2a38cd259556340a4143716e7ee96b3f56c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e8ba2a38cd259556340a4143716e7ee96b3f56c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e8ba2a38cd259556340a4143716e7ee96b3f56c/comments", "author": null, "committer": null, "parents": [{"sha": "c1030c7c86a8097c2be12596ad54c8a771c127ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1030c7c86a8097c2be12596ad54c8a771c127ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1030c7c86a8097c2be12596ad54c8a771c127ab"}], "stats": {"total": 243, "additions": 243, "deletions": 0}, "files": [{"sha": "545057a598996dc61b0bab581d82a839b673c057", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8ba2a38cd259556340a4143716e7ee96b3f56c/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8ba2a38cd259556340a4143716e7ee96b3f56c/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=1e8ba2a38cd259556340a4143716e7ee96b3f56c", "patch": "@@ -1,3 +1,7 @@\n+2000-11-11  Jeff Law  <law@redhat.com>,\n+\n+\t* release: New file.\n+\n 2000-11-08  Jeff Law  <law@redhat.com>,\n \t    Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n "}, {"sha": "cc34fb24ce4dfec4351906212fe5ce2bbecb00aa", "filename": "contrib/release", "status": "added", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8ba2a38cd259556340a4143716e7ee96b3f56c/contrib%2Frelease", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8ba2a38cd259556340a4143716e7ee96b3f56c/contrib%2Frelease", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Frelease?ref=1e8ba2a38cd259556340a4143716e7ee96b3f56c", "patch": "@@ -0,0 +1,239 @@\n+#! /bin/sh  -x\n+#\n+# GCC release generation script.\n+#\n+# Originally written by Jeff Law <law@redhat.com>.\n+\n+PATH=/home/law/gcc:$PATH\n+\n+TMPDIR=/var/tmp\n+STATEDIR=/home/law\n+\n+export TMPDIR STATEDIR\n+\n+# We run this on the cvs server itself so we can get at the cvs\n+# files quickly.  It also assumes access to my home dir for some\n+# programs.\n+CVSROOT=/cvs/gcc\n+export CVSROOT\n+\n+# Get somewhere useful with a lot of disk space.\n+cd $TMPDIR\n+\n+# We need separate variables for the tag in the CVS sources and the\n+# name of the release directory.  Consider if we have a packaging problem\n+# and need to respin the release.  The sources do not change, but the release\n+# name changes.\n+#\n+# We used to use a tag to get the previous release, but it is more reliable to\n+# actually unpack the previous release from the ftp directory.  Consider files\n+# like .brik which are in the release, but not in the repository.\n+#\n+if test $# != 6 ; then\n+  echo \"usage: release release-tag release-name release_branch last-release-name prerelease dotag\"\n+  exit 1\n+fi\n+\n+release_tag=$1\n+release_name=$2\n+release_suffix=`echo $release_name | sed -e s#gcc-##`\n+release_branch=$3\n+last_release_name=$4\n+last_release_suffix=`echo $last_release_name | sed -e s#gcc-##`\n+prerelease=$5\n+dotag=$6\n+\n+case $last_release_name in\n+  egcs-1.0*)\n+    echo \"unprotoize.c and README.gcc need special handling\"\n+    exit 1;\n+    ;;\n+  egcs-1.1*)\n+    echo \"No java or chill in egcs-1.1*\"\n+    ;;\n+  \n+  gcc-2.95*)\n+    echo \"No testsuites in gcc-2.95*\"\n+    ;;\n+esac\n+\t\n+# Get into a temporary directory so as not to be confused by\n+# any existing CVS administration files.\n+rm -rf $$\n+mkdir $$\n+cd $$\n+\n+if test $prerelease = no -a $dotag = yes; then\n+  update_changelogs $release_name $release_branch\n+fi\n+\n+# If requested, tag the branch.   Three steps, first remove the old tag from\n+# the repository, then check out the release branch, then retag the release\n+# branch.\n+if test $dotag = yes; then\n+  rm -rf egcs\n+  cvs -Q rtag -d $release_tag egcs\n+  cvs -Q co -r $release_branch egcs\n+  cvs -Q tag -f $release_tag\n+  rm -rf egcs\n+fi\n+\n+# Get a copy of the previous release.  Get it from the ftp dir to avoid minor\n+# issues with files like .brik not being in the repository.\n+if test $prerelease = yes; then\n+  echo \"Yow!\"\n+  exit 1;\n+  zcat ~ftp/pub/gcc/snapshots/egcs-1.1.2-prerelease/$last_release_name.tar.gz | tar xf -\n+else\n+  zcat ~ftp/pub/gcc/releases/$last_release_name/$last_release_name.tar.gz | tar xf -\n+fi\n+\n+# Files/directories which are not part of the egcs-core module.\n+noncore_files=\"gcc/cp libio libstdc++ gcc/f libf2c gcc/objc libobjc gcc/ch libchill gcc/java libjava gcc/testsuite\"\n+\n+# Get the egcs core.  Note that the egcs-core module doesn't work yet, so\n+# we get the whole directory, then prune the things we do not want.\n+#\n+# Also, get the latest copy of the installation instructions and the\n+# faq in html, build plaintext versions of those documents.\n+cvs -Q export -ko -r$release_tag egcs\n+cd egcs\n+contrib/gcc_update --touch\n+cp /home/law/gcc/gcc.pot gcc/po\n+cd ..\n+cvs -Q export -ko -Dnow wwwdocs/htdocs/install\n+cvs -Q export -ko -Dnow wwwdocs/htdocs/faq.html\n+#cvs -Q export -ko -Dnow wwwdocs/htdocs/bugs.html\n+mv egcs $release_name\n+release_docs $release_name $$\n+\n+# Build a list of files in this release.\n+cd $release_name\n+find . -type f -print | sort > ../files_$release_name\n+/home/law/bin/brik -Gb -f ../files_$release_name > ../.brik_$release_name\n+cp ../.brik_$release_name ./.brik\n+\n+# Get back to the directory with the two releases in it.\n+cd ..\n+\n+# Remove anything that is not part of the core\n+for file in $noncore_files; do\n+  rm -rf $last_release_name/$file\n+  rm -rf $release_name/$file\n+done\n+\n+# Make the core tarball\n+tar cf - $release_name | gzip --best > gcc-core-$release_suffix.tar.gz\n+\n+# make empty directories for directories that disappeared so that\n+# patch will delete any files in those directories when patching up to\n+# this release\n+case $last_release_name in\n+  gcc-2.95*)\n+    mkdir $release_name/xiberty\n+    mkdir $release_name/contrib/fixinc\n+    ;;\n+esac\n+\t\n+# Diff the core modules\n+diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name $release_name > gcc-core-$last_release_suffix-$release_suffix.diff\n+\n+# Remove the core gunk\n+rm -rf $last_release_name\n+rm -rf $release_name\n+\n+\n+# Go back and get the full distributions.\n+if test $prerelease = yes; then\n+  zcat ~ftp/pub/gcc/snapshots/egcs-1.1.2-prerelease/$last_release_name.tar.gz | tar xf -\n+else\n+  zcat ~ftp/pub/gcc/releases/$last_release_name/$last_release_name.tar.gz | tar xf -\n+fi\n+\n+cvs -Q export -ko -r$release_tag egcs\n+cd egcs\n+contrib/gcc_update --touch\n+cp /home/law/gcc/gcc.pot gcc/po\n+cd ..\n+cvs -Q export -ko -Dnow wwwdocs/htdocs/install\n+cvs -Q export -ko -Dnow wwwdocs/htdocs/faq.html\n+#cvs -Q export -ko -Dnow wwwdocs/htdocs/bugs.html\n+mv egcs $release_name\n+find $release_name/gcc/testsuite -type f -print | xargs rm -f\n+release_docs $release_name $$\n+\n+\n+# No need to regenerate the .brik file.  We didn't delete it.\n+cp .brik_$release_name $release_name/.brik\n+\n+# We don't need this anymore.\n+rm .brik_$release_name\n+rm .brik_$last_release_name\n+\n+# Make tarballs\n+\n+tar cf - $release_name/.brik $release_name/gcc/f $release_name/libf2c | gzip --best > gcc-g77-$release_suffix.tar.gz\n+tar cf - $release_name/.brik $release_name/gcc/java | gzip --best > gcc-java-$release_suffix.tar.gz\n+tar cf - $release_name/.brik $release_name/gcc/ch $release_name/libchill | gzip --best > gcc-chill-$release_suffix.tar.gz\n+#tar cf - $release_name/.brik $release_name/gcc/testsuite/g77.f-torture | gzip --best > gcc-g77-testsuite-$release_suffix.tar.gz\n+tar cf - $release_name/.brik $release_name/gcc/objc $release_name/libobjc | gzip --best > gcc-objc-$release_suffix.tar.gz\n+tar cf - $release_name/.brik $release_name/gcc/cp $release_name/libio $release_name/libstdc++ | gzip --best > gcc-g++-$release_suffix.tar.gz\n+#tar cf - $release_name/.brik $release_name/gcc/testsuite/g++.old-deja | gzip --best > gcc-g++-tests-$release_suffix.tar.gz\n+#tar cf - $release_name/.brik $release_name/gcc/testsuite | gzip --best > gcc-tests-$release_suffix.tar.gz\n+tar cf - $release_name | gzip --best > $release_name.tar.gz\n+# make empty directories for directories that disappeared so that\n+# patch will delete any files in those directories when patching up to\n+# this release\n+# make empty directories for directories that disappeared so that\n+# patch will delete any files in those directories when patching up to\n+# this release\n+case $last_release_name in\n+  gcc-2.95*)\n+    mkdir $release_name/xiberty\n+    mkdir $release_name/contrib/fixinc\n+    ;;\n+esac\n+\t\n+# Now make diffs for g77, g77-testsuite objc, g++, g++-testsuite, testsuite,\n+# then the whole bloody thing.  Add libobjc, java & chill for next major\n+#release.\n+diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/gcc/f $release_name/gcc/f > gcc-g77-$last_release_suffix-$release_suffix.diff\n+diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/libf2c $release_name/libf2c >> gcc-g77-$last_release_suffix-$release_suffix.diff\n+\n+#diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/gcc/testsuite/g77.f-torture  $release_name/gcc/testsuite/g77.f-torture > gcc-g77-testsuite-$last_release_suffix-$release_suffix.diff\n+\n+diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/gcc/ch $release_name/gcc/ch > gcc-chill-$last_release_suffix-$release_suffix.diff\n+diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/libchill $release_name/libchill >> gcc-chill-$last_release_suffix-$release_suffix.diff\n+\n+diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/gcc/java $release_name/gcc/java > gcc-java-$last_release_suffix-$release_suffix.diff\n+#diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/libf2c $release_name/libf2c >> gcc-java-$last_release_suffix-$release_suffix.diff\n+\n+diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/gcc/objc $release_name/gcc/objc > gcc-objc-$last_release_suffix-$release_suffix.diff\n+mkdir $last_release_name/libobjc\n+diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/libobjc $release_name/libobjc >> gcc-objc-$last_release_suffix-$release_suffix.diff\n+\n+diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/gcc/cp $release_name/gcc/cp > gcc-g++-$last_release_suffix-$release_suffix.diff\n+diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/libio $release_name/libio >> gcc-g++-$last_release_suffix-$release_suffix.diff\n+diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/libstdc++ $release_name/libstdc++ >> gcc-g++-$last_release_suffix-$release_suffix.diff\n+\n+#diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/gcc/testsuite/g++.old-deja $release_name/gcc/testsuite/g++.old-deja > gcc-g++-tests-$last_release_suffix-$release_suffix.diff\n+\n+#diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name/gcc/testsuite $release_name/gcc/testsuite > gcc-tests-$last_release_suffix-$release_suffix.diff\n+\n+diff -x de.gmo -x fr.gmo -Nrc3p $last_release_name $release_name > gcc-$last_release_suffix-$release_suffix.diff\n+\n+\n+# Remove the old snapshot, we're done with it.\n+rm -rf $last_release_name\n+\n+\n+# Compress the diff files.\n+gzip --best *.diff\n+\n+# bzip everything too\n+\n+# Copy them to the FTP server XXX\n+\n+# Update links on the ftp server XXX\n+\n+# Announce it XXX"}]}