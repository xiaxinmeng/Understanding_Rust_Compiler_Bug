{"sha": "d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMzYzAwZTFjZWI4MmZhNDY1NjFlZTA3NmI5Y2I0MGFkNDRkYzBkYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-12-14T16:07:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-12-14T16:07:29Z"}, "message": "Make printers use singular noun for a single element\n\n\t* python/libstdcxx/v6/printers.py (num_elements): New function.\n\t(StdMapPrinter.to_string, StdSetPrinter.to_string)\n\t(StdDequePrinter.to_string, Tr1UnorderedSetPrinter.to_string)\n\t(Tr1UnorderedMapPrinter.to_string): Use num_elements.\n\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Adjust expected results\n\tto use singular noun when there is only one element.\n\t* testsuite/libstdc++-prettyprinters/debug.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/debug_cxx11.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/simple.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/tr1.cc: Likewise.\n\nFrom-SVN: r243652", "tree": {"sha": "c923fb7a40da6938459bdbe00266f38ccce2a7e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c923fb7a40da6938459bdbe00266f38ccce2a7e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c760f4a79c221408122b3f265a8039b04ce697e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c760f4a79c221408122b3f265a8039b04ce697e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c760f4a79c221408122b3f265a8039b04ce697e"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "5d7563f602124f60d266f80f6f25145a3159502c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc", "patch": "@@ -1,5 +1,17 @@\n 2016-12-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* python/libstdcxx/v6/printers.py (num_elements): New function.\n+\t(StdMapPrinter.to_string, StdSetPrinter.to_string)\n+\t(StdDequePrinter.to_string, Tr1UnorderedSetPrinter.to_string)\n+\t(Tr1UnorderedMapPrinter.to_string): Use num_elements.\n+\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Adjust expected results\n+\tto use singular noun when there is only one element.\n+\t* testsuite/libstdc++-prettyprinters/debug.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/debug_cxx11.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/simple.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/tr1.cc: Likewise.\n+\n \tPR libstdc++/59170\n \t* python/libstdcxx/v6/printers.py (StdDebugIteratorPrinter): Use\n \t_M_sequence and _M_version to detect invalid iterators."}, {"sha": "3a111d793cb40e22e8ebd5eeca90db6ce36e1cab", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc", "patch": "@@ -508,6 +508,10 @@ def to_string (self):\n         itype = self.val.type.template_argument(0)\n         return self.val.cast(itype)\n \n+def num_elements(num):\n+    \"\"\"Return either \"1 element\" or \"N elements\" depending on the argument.\"\"\"\n+    return '1 element' if num == 1 else '%d elements' % num\n+\n class StdMapPrinter:\n     \"Print a std::map or std::multimap\"\n \n@@ -539,8 +543,8 @@ def __init__ (self, typename, val):\n         self.val = val\n \n     def to_string (self):\n-        return '%s with %d elements' % (self.typename,\n-                                        len (RbtreeIterator (self.val)))\n+        return '%s with %s' % (self.typename,\n+                               num_elements(len(RbtreeIterator (self.val))))\n \n     def children (self):\n         rep_type = find_type(self.val.type, '_Rep_type')\n@@ -579,8 +583,8 @@ def __init__ (self, typename, val):\n         self.val = val\n \n     def to_string (self):\n-        return '%s with %d elements' % (self.typename,\n-                                        len (RbtreeIterator (self.val)))\n+        return '%s with %s' % (self.typename,\n+                               num_elements(len(RbtreeIterator (self.val))))\n \n     def children (self):\n         rep_type = find_type(self.val.type, '_Rep_type')\n@@ -681,7 +685,7 @@ def to_string(self):\n \n         size = self.buffer_size * delta_n + delta_s + delta_e\n \n-        return '%s with %d elements' % (self.typename, long (size))\n+        return '%s with %s' % (self.typename, num_elements(long(size)))\n \n     def children(self):\n         start = self.val['_M_impl']['_M_start']\n@@ -795,7 +799,8 @@ def hashtable (self):\n         return self.val['_M_h']\n \n     def to_string (self):\n-        return '%s with %d elements' % (self.typename, self.hashtable()['_M_element_count'])\n+        count = self.hashtable()['_M_element_count']\n+        return '%s with %s' % (self.typename, num_elements(count))\n \n     @staticmethod\n     def format_count (i):\n@@ -820,7 +825,8 @@ def hashtable (self):\n         return self.val['_M_h']\n \n     def to_string (self):\n-        return '%s with %d elements' % (self.typename, self.hashtable()['_M_element_count'])\n+        count = self.hashtable()['_M_element_count']\n+        return '%s with %s' % (self.typename, num_elements(count))\n \n     @staticmethod\n     def flatten (list):"}, {"sha": "e02997a5f798ce11f021360bb1cf73fd81dfade6", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx11.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc?ref=d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc", "patch": "@@ -113,15 +113,15 @@ main()\n \n   std::unordered_set<int> uos;\n   uos.insert(5);\n-// { dg-final { note-test uos {std::unordered_set with 1 elements = {[0] = 5}} } }\n+// { dg-final { note-test uos {std::unordered_set with 1 element = {[0] = 5}} } }\n   std::unordered_set<int> &ruos = uos;\n-// { dg-final { note-test ruos {std::unordered_set with 1 elements = {[0] = 5}} } }\n+// { dg-final { note-test ruos {std::unordered_set with 1 element = {[0] = 5}} } }\n \n   std::unordered_multiset<int> uoms;\n   uoms.insert(5);\n-// { dg-final { note-test uoms {std::unordered_multiset with 1 elements = {[0] = 5}} } }\n+// { dg-final { note-test uoms {std::unordered_multiset with 1 element = {[0] = 5}} } }\n   std::unordered_multiset<int> &ruoms = uoms;\n-// { dg-final { note-test ruoms {std::unordered_multiset with 1 elements = {[0] = 5}} } }\n+// { dg-final { note-test ruoms {std::unordered_multiset with 1 element = {[0] = 5}} } }\n \n   std::unique_ptr<datum> uptr (new datum);\n   uptr->s = \"hi bob\";"}, {"sha": "833b557b4f17346b7e7add5762befc7a5315f997", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/debug.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc?ref=d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc", "patch": "@@ -66,7 +66,7 @@ main()\n \n   std::map<std::string, int> mp;\n   mp[\"zardoz\"] = 23;\n-// { dg-final { note-test mp {std::__debug::map with 1 elements = {[\"zardoz\"] = 23}} } }\n+// { dg-final { note-test mp {std::__debug::map with 1 element = {[\"zardoz\"] = 23}} } }\n \n   std::map<std::string, int>::iterator mpiter = mp.begin();\n // { dg-final { note-test mpiter {{first = \"zardoz\", second = 23}} } }"}, {"sha": "27c3bbf56c9c33bf5db19e77ceb736fe0914049a", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/debug_cxx11.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug_cxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug_cxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug_cxx11.cc?ref=d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc", "patch": "@@ -43,13 +43,13 @@ main()\n // { dg-final { note-test *flstciter {\"dee\"}} }\n \n   std::unordered_map<std::string, int> um{ {\"zardoz\", 23} };\n-// { dg-final { note-test um {std::__debug::unordered_map with 1 elements = {[\"zardoz\"] = 23}} } }\n+// { dg-final { note-test um {std::__debug::unordered_map with 1 element = {[\"zardoz\"] = 23}} } }\n \n   std::unordered_map<std::string, int>::iterator umiter = um.begin();\n // { dg-final { note-test umiter->first {\"zardoz\"} } }\n \n   std::unordered_set<std::string> us{\"barrel\"};\n-// { dg-final { note-test us {std::__debug::unordered_set with 1 elements = {[0] = \"barrel\"}} } }\n+// { dg-final { note-test us {std::__debug::unordered_set with 1 element = {[0] = \"barrel\"}} } }\n \n   std::unordered_set<std::string>::const_iterator usciter = us.begin();\n // { dg-final { note-test *usciter {\"barrel\"} } }"}, {"sha": "fb8e0d754e68e858a8071a4ecaf24181b2d523c3", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc?ref=d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc", "patch": "@@ -68,7 +68,7 @@ main()\n \n   std::map<std::string, int> mp;\n   mp[\"zardoz\"] = 23;\n-// { dg-final { note-test mp {std::map with 1 elements = {[\"zardoz\"] = 23}} } }\n+// { dg-final { note-test mp {std::map with 1 element = {[\"zardoz\"] = 23}} } }\n \n   std::map<std::string, int>::iterator mpiter = mp.begin();\n // { dg-final { note-test mpiter {{first = \"zardoz\", second = 23}} } }"}, {"sha": "9e230e3d4d945ee4c8a97508cc00b62769d2ec5d", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple11.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc?ref=d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc", "patch": "@@ -68,7 +68,7 @@ main()\n \n   std::map<std::string, int> mp;\n   mp[\"zardoz\"] = 23;\n-// { dg-final { note-test mp {std::map with 1 elements = {[\"zardoz\"] = 23}} } }\n+// { dg-final { note-test mp {std::map with 1 element = {[\"zardoz\"] = 23}} } }\n \n   std::map<std::string, int>::iterator mpiter = mp.begin();\n // { dg-final { note-test mpiter {{first = \"zardoz\", second = 23}} } }"}, {"sha": "609b1f0c634060dfe6992b8f53ecc7aadfe717a8", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/tr1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Ftr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Ftr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Ftr1.cc?ref=d33c00e1ceb82fa46561ee076b9cb40ad44dc0dc", "patch": "@@ -71,11 +71,11 @@ main()\n \n   std::tr1::unordered_set<int> uos;\n   uos.insert(5);\n-// { dg-final { note-test uos {std::tr1::unordered_set with 1 elements = {[0] = 5}} } }\n+// { dg-final { note-test uos {std::tr1::unordered_set with 1 element = {[0] = 5}} } }\n \n   std::tr1::unordered_multiset<int> uoms;\n   uoms.insert(5);\n-// { dg-final { note-test uoms {std::tr1::unordered_multiset with 1 elements = {[0] = 5}} } }\n+// { dg-final { note-test uoms {std::tr1::unordered_multiset with 1 element = {[0] = 5}} } }\n \n   placeholder(\"\"); // Mark SPOT\n   use(eum);"}]}