{"sha": "ccacf77be5508dd5b4df59f402965196d11edb05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NhY2Y3N2JlNTUwOGRkNWI0ZGY1OWY0MDI5NjUxOTZkMTFlZGIwNQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-27T19:54:22Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-27T19:54:22Z"}, "message": "PR c++/94098 - ICE on attribute access redeclaration\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/94098\n\t* c-attribs.c (handle_access_attribute): Avoid setting TYPE_ATTRIBUTES\n\there.\n\ngcc/ChangeLog:\n\n\tPR c++/94098\n\t* calls.c (init_attr_rdwr_indices): Iterate over all access attributes.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94098\n\t* g++.dg/ext/attr-access-2.C: New test.", "tree": {"sha": "3075596dc7eefeb4b555b569ab76387f07eb17a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3075596dc7eefeb4b555b569ab76387f07eb17a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccacf77be5508dd5b4df59f402965196d11edb05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccacf77be5508dd5b4df59f402965196d11edb05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccacf77be5508dd5b4df59f402965196d11edb05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccacf77be5508dd5b4df59f402965196d11edb05/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "038769535a8cbdd3dd3e100bde3140df52f868c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038769535a8cbdd3dd3e100bde3140df52f868c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038769535a8cbdd3dd3e100bde3140df52f868c5"}], "stats": {"total": 198, "additions": 147, "deletions": 51}, "files": [{"sha": "5f7081c9c1d29815b0458ea2a03b1569b399a889", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacf77be5508dd5b4df59f402965196d11edb05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacf77be5508dd5b4df59f402965196d11edb05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccacf77be5508dd5b4df59f402965196d11edb05", "patch": "@@ -1,3 +1,8 @@\n+2020-03-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/94098\n+\t* calls.c (init_attr_rdwr_indices): Iterate over all access attributes.\n+\n 2020-03-27  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md:"}, {"sha": "30a18a36ac6aae163e58d7305993680f875ea7fe", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacf77be5508dd5b4df59f402965196d11edb05/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacf77be5508dd5b4df59f402965196d11edb05/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ccacf77be5508dd5b4df59f402965196d11edb05", "patch": "@@ -1,3 +1,9 @@\n+2020-03-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/94098\n+\t* c-attribs.c (handle_access_attribute): Avoid setting TYPE_ATTRIBUTES\n+\there.\n+\n 2020-03-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91993"}, {"sha": "f30158a258b586bbf05e53ea764b197702f411ff", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacf77be5508dd5b4df59f402965196d11edb05/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacf77be5508dd5b4df59f402965196d11edb05/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=ccacf77be5508dd5b4df59f402965196d11edb05", "patch": "@@ -4182,23 +4182,19 @@ handle_access_attribute (tree *node, tree name, tree args,\n \n   /* Replace any existing access attribute specification with\n      the concatenation above.  */\n-  attrs = remove_attribute (IDENTIFIER_POINTER (name), attrs);\n   new_attrs = tree_cons (NULL_TREE, new_attrs, NULL_TREE);\n   new_attrs = tree_cons (name, new_attrs, attrs);\n \n   if (node[1])\n     {\n       /* Repeat for the previously declared type.  */\n       attrs = TYPE_ATTRIBUTES (TREE_TYPE (node[1]));\n-      tree new_attrs\n-\t= append_access_attrs (node[1], attrs, attrstr, code, idxs);\n-      if (!new_attrs)\n+      tree attrs1 = append_access_attrs (node[1], attrs, attrstr, code, idxs);\n+      if (!attrs1)\n \treturn NULL_TREE;\n \n-      attrs = remove_attribute (IDENTIFIER_POINTER (name), attrs);\n-      new_attrs = tree_cons (NULL_TREE, new_attrs, NULL_TREE);\n-      new_attrs = tree_cons (name, new_attrs, attrs);\n-      TYPE_ATTRIBUTES (TREE_TYPE (node[1])) = new_attrs;\n+      attrs1 = tree_cons (NULL_TREE, attrs1, NULL_TREE);\n+      new_attrs = tree_cons (name, attrs1, attrs);\n     }\n \n   /* Recursively call self to \"replace\" the documented/external form"}, {"sha": "5bd922779af7144a4310f963428f8d537b509938", "filename": "gcc/calls.c", "status": "modified", "additions": 39, "deletions": 43, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacf77be5508dd5b4df59f402965196d11edb05/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacf77be5508dd5b4df59f402965196d11edb05/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ccacf77be5508dd5b4df59f402965196d11edb05", "patch": "@@ -1873,7 +1873,7 @@ struct rdwr_access_hash: int_hash<int, -1> { };\n typedef hash_map<rdwr_access_hash, attr_access> rdwr_map;\n \n /* Initialize a mapping for a call to function FNDECL declared with\n-   attribute access.  Each attribute poisitional operand inserts one\n+   attribute access.  Each attribute positional operand inserts one\n    entry into the mapping with the operand number as the key.  */\n \n static void\n@@ -1882,54 +1882,50 @@ init_attr_rdwr_indices (rdwr_map *rwm, tree fntype)\n   if (!fntype)\n     return;\n \n-  tree access = TYPE_ATTRIBUTES (fntype);\n-  /* If the function's type has no attributes there's nothing to do.  */\n-  if (!access)\n-    return;\n-\n-  access = lookup_attribute (\"access\", access);\n-  if (!access)\n-    return;\n-\n-  /* The TREE_VALUE of an attribute is a TREE_LIST whose TREE_VALUE\n-     is the attribute argument's value.  */\n-  tree mode = TREE_VALUE (access);\n-  gcc_assert (TREE_CODE (mode) == TREE_LIST);\n-  mode = TREE_VALUE (mode);\n-  gcc_assert (TREE_CODE (mode) == STRING_CST);\n-\n-  const char *modestr = TREE_STRING_POINTER (mode);\n-  for (const char *m = modestr; *m; )\n+  for (tree access = TYPE_ATTRIBUTES (fntype);\n+       (access = lookup_attribute (\"access\", access));\n+       access = TREE_CHAIN (access))\n     {\n-      attr_access acc = { };\n-\n-      switch (*m)\n+      /* The TREE_VALUE of an attribute is a TREE_LIST whose TREE_VALUE\n+\t is the attribute argument's value.  */\n+      tree mode = TREE_VALUE (access);\n+      gcc_assert (TREE_CODE (mode) == TREE_LIST);\n+      mode = TREE_VALUE (mode);\n+      gcc_assert (TREE_CODE (mode) == STRING_CST);\n+\n+      const char *modestr = TREE_STRING_POINTER (mode);\n+      for (const char *m = modestr; *m; )\n \t{\n-\tcase 'r': acc.mode = acc.read_only; break;\n-\tcase 'w': acc.mode = acc.write_only; break;\n-\tdefault: acc.mode = acc.read_write; break;\n-\t}\n+\t  attr_access acc = { };\n \n-      char *end;\n-      acc.ptrarg = strtoul (++m, &end, 10);\n-      m = end;\n-      if (*m == ',')\n-\t{\n-\t  acc.sizarg = strtoul (++m, &end, 10);\n+\t  switch (*m)\n+\t    {\n+\t    case 'r': acc.mode = acc.read_only; break;\n+\t    case 'w': acc.mode = acc.write_only; break;\n+\t    default: acc.mode = acc.read_write; break;\n+\t    }\n+\n+\t  char *end;\n+\t  acc.ptrarg = strtoul (++m, &end, 10);\n \t  m = end;\n-\t}\n-      else\n-\tacc.sizarg = UINT_MAX;\n+\t  if (*m == ',')\n+\t    {\n+\t      acc.sizarg = strtoul (++m, &end, 10);\n+\t      m = end;\n+\t    }\n+\t  else\n+\t    acc.sizarg = UINT_MAX;\n \n-      acc.ptr = NULL_TREE;\n-      acc.size = NULL_TREE;\n+\t  acc.ptr = NULL_TREE;\n+\t  acc.size = NULL_TREE;\n \n-      /* Unconditionally add an entry for the required pointer\n-\t operand of the attribute, and one for the optional size\n-\t operand when it's specified.  */\n-      rwm->put (acc.ptrarg, acc);\n-      if (acc.sizarg != UINT_MAX)\n-\trwm->put (acc.sizarg, acc);\n+\t  /* Unconditionally add an entry for the required pointer\n+\t     operand of the attribute, and one for the optional size\n+\t     operand when it's specified.  */\n+\t  rwm->put (acc.ptrarg, acc);\n+\t  if (acc.sizarg != UINT_MAX)\n+\t    rwm->put (acc.sizarg, acc);\n+\t}\n     }\n }\n "}, {"sha": "d4c7d48466b1135696a0a37e5da51bef744135fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacf77be5508dd5b4df59f402965196d11edb05/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacf77be5508dd5b4df59f402965196d11edb05/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ccacf77be5508dd5b4df59f402965196d11edb05", "patch": "@@ -1,3 +1,8 @@\n+2020-03-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/94098\n+\t* g++.dg/ext/attr-access-2.C: New test.\n+\n 2020-03-27  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/94078"}, {"sha": "46f9075a6c63d428c092619f112b426c4e9273ec", "filename": "gcc/testsuite/g++.dg/ext/attr-access-2.C", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacf77be5508dd5b4df59f402965196d11edb05/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-access-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacf77be5508dd5b4df59f402965196d11edb05/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-access-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-access-2.C?ref=ccacf77be5508dd5b4df59f402965196d11edb05", "patch": "@@ -0,0 +1,88 @@\n+/* PR c++/94098 - checking ICE on attribute access redeclaration\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+#define RO(...)  __attribute__ ((access (read_only, __VA_ARGS__)))\n+#define RW(...)  __attribute__ ((access (read_write, __VA_ARGS__)))\n+#define WO(...)  __attribute__ ((access (write_only, __VA_ARGS__)))\n+\n+typedef __INT32_TYPE__ int32_t;\n+\n+int        rdwr1_2_3_4 (void*, void*, void*, void*);\n+int RW (1) rdwr1_2_3_4 (void*, void*, void*, void*);\n+int RW (2) rdwr1_2_3_4 (void*, void*, void*, void*);\n+int RW (3) rdwr1_2_3_4 (void*, void*, void*, void*);\n+int RW (4) rdwr1_2_3_4 (void*, void*, void*, void*);\n+\n+extern int32_t x[1];\n+\n+void call_rdwrp1_2_3_4 (void)\n+{\n+  rdwr1_2_3_4 (x, x, x, x);\n+  rdwr1_2_3_4 (x, x, x, x + 1);     // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  rdwr1_2_3_4 (x, x, x + 1, x);     // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  rdwr1_2_3_4 (x, x + 1, x, x);     // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  rdwr1_2_3_4 (x + 1, x, x, x);     // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+}\n+\n+\n+int        rdwr4_3_2_1 (void*, void*, void*, void*);\n+int RW (4) rdwr4_3_2_1 (void*, void*, void*, void*);\n+int RW (3) rdwr4_3_2_1 (void*, void*, void*, void*);\n+int RW (2) rdwr4_3_2_1 (void*, void*, void*, void*);\n+int RW (1) rdwr4_3_2_1 (void*, void*, void*, void*);\n+\n+void call_rdwr4_3_2_1 (void)\n+{\n+  rdwr4_3_2_1 (x, x, x, x);\n+  rdwr4_3_2_1 (x, x, x, x + 1);     // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  rdwr4_3_2_1 (x, x, x + 1, x);     // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  rdwr4_3_2_1 (x, x + 1, x, x);     // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  rdwr4_3_2_1 (x + 1, x, x, x);     // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+}\n+\n+\n+int                             rdwrall (void*, void*, void*, void*);\n+int RW (1)                      rdwrall (void*, void*, void*, void*);\n+int RW (1) RW (2)               rdwrall (void*, void*, void*, void*);\n+int RW (1) RW (2) RW (3)        rdwrall (void*, void*, void*, void*);\n+int RW (1) RW (2) RW (3) RW (4) rdwrall (void*, void*, void*, void*);\n+\n+void call_rdwrall (void)\n+{\n+  rdwrall (x, x, x, x);\n+  rdwrall (x, x, x, x + 1);         // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  rdwrall (x, x, x + 1, x);         // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  rdwrall (x, x + 1, x, x);         // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  rdwrall (x + 1, x, x, x);         // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+}\n+\n+\n+// Verify the attribute is a part of the function's type.\n+typedef __typeof__ (rdwrall) F;\n+\n+void call_fnptr_typeof (F *f)\n+{\n+  f (x, x, x, x);\n+  f (x, x, x, x + 1);               // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  f (x, x, x + 1, x);               // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  f (x, x + 1, x, x);               // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  f (x + 1, x, x, x);               // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+}\n+\n+\n+// Verify the attribute is effective on a typedef.\n+typedef        void FWRall (void*, void*, void*, void*);\n+typedef RW (1) void FWRall (void*, void*, void*, void*);\n+typedef RW (2) void FWRall (void*, void*, void*, void*);\n+typedef RW (3) void FWRall (void*, void*, void*, void*);\n+typedef RW (4) void FWRall (void*, void*, void*, void*);\n+\n+void call_fnptr (FWRall *f)\n+{\n+  f (x, x, x, x);\n+  f (x, x, x, x + 1);               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"pr94171\" { xfail *-*-* } }\n+  f (x, x, x + 1, x);               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"pr94171\" { xfail *-*-* } }\n+  f (x, x + 1, x, x);               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"pr94171\" { xfail *-*-* } }\n+  f (x + 1, x, x, x);               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"pr94171\" { xfail *-*-* } }\n+}"}]}