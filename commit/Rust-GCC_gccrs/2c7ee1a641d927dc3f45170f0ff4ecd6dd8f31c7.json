{"sha": "2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM3ZWUxYTY0MWQ5MjdkYzNmNDUxNzBmMGZmNGVjZDZkZDhmMzFjNw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-03-29T14:37:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-03-29T14:37:11Z"}, "message": "calls.c (expand_call): Remove current_call_is_indirect nonsense.\n\n\t* calls.c (expand_call): Remove current_call_is_indirect nonsense.\n\tAdd additional argument to INIT_CUMULATIVE_ARGS.\n\t(emit_library_call): Likewise.\n\t(emit_library_call_value): Likewise.\n\t* expr.c (expand_builtin): Likewise.\n\t* function.c (assign_parms): Likewise.\n\t* cp/method.c (emit_thunk): Likewise.\n\t* config/pa/pa.h (hppa_args): New field \"indirect\".\n\t(INIT_CUMULATIVE_ARGS): Initialize \"indirect\" field.\n\t(FUNCTION_ARG): Check \"indirect\" field, rather than\n\t\"current_call_is_indirect\".\n\t* All other backends updated with new argument to\n\tINIT_CUMULATIVE_ARGS\n\nFrom-SVN: r11641", "tree": {"sha": "2387c87408945f8be6a4ed190c7deb281795a70e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2387c87408945f8be6a4ed190c7deb281795a70e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/comments", "author": null, "committer": null, "parents": [{"sha": "c4d98c846dc38fa87a9e91991e647afcc44d2f45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d98c846dc38fa87a9e91991e647afcc44d2f45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d98c846dc38fa87a9e91991e647afcc44d2f45"}], "stats": {"total": 85, "additions": 41, "deletions": 44}, "files": [{"sha": "364da8eb7ca1eb90b160dc9e8eb69a568f41983d", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -517,7 +517,7 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \n    For 1750A, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)   ((CUM) = 0)\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)   ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE."}, {"sha": "b70e13de3299db0f76effa120b479e318ecf6bd1", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -780,7 +780,7 @@ extern struct rtx_def *a29k_get_reloaded_address ();\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)  (CUM) = 0\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)  (CUM) = 0\n \n /* Same, but called for incoming args.\n "}, {"sha": "7084661467fda81510398e1a511e22c5ff1f06fa", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -872,7 +872,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)  (CUM) = 0\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)  (CUM) = 0\n \n /* Define intermediate macro to compute the size (in registers) of an argument\n    for the Alpha.  */"}, {"sha": "e8da95735476668f3edb9fb6640110ef2c7668ad", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -808,7 +808,7 @@ enum reg_class\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.\n    On the ARM, the offset starts at 0.  */\n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME)  \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT)  \\\n   ((CUM) = (((FNTYPE) && aggregate_value_p (TREE_TYPE ((FNTYPE)))) ? 4 : 0))\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "9600df3417769d62b8aea3caea2aed20bbf02172", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -461,7 +461,7 @@ struct _clipper_cum_args { int num; int size; };\n \n    clipper passes the address of a struct in r0, set num = 1 in this case */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME) \\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT) \\\n   ((CUM).num = ((FNTYPE) != 0 && aggregate_value_p (TREE_TYPE (FNTYPE))), \\\n    (CUM).size = 0)\n "}, {"sha": "9e4f8d9b082b99053672188840370bd1634d0fec", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -791,7 +791,7 @@ enum reg_class {\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0. */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME) \\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT) \\\n   ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "6590823e8199315e130c0cd62e44508c5496a486", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -1192,7 +1192,7 @@ extern struct dsp16xx_frame_info current_frame_info;\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0. */\n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)  ((CUM) = 0)\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE."}, {"sha": "30cab54b0e9217a1e11e00f74c42701b0ec9a891", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -360,7 +360,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n    On the vax, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,x)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,x,INDIRECT)\t\\\n  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "59a31084dd634ed8af47a6898801ae7df29fad88", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -503,7 +503,7 @@ extern enum reg_class regno_reg_class[];\n \n    On the Alliant, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "8b18bb09547cfee431c1e1bc5978e81d579e24f2", "filename": "gcc/config/gmicro/gmicro.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -516,7 +516,7 @@ extern enum reg_class regno_reg_class[];\n \n    On the Gmicro, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "b1a44a7928070581b3ecc4e1b686136c2a5f6cf6", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -579,7 +579,7 @@ struct cum_arg { int nbytes; struct rtx_def * libcall; };\n \n    On the H8/300, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n  ((CUM).nbytes = 0, (CUM).libcall = LIBNAME)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "e728de124c16b58cb7df4e8b6afda0519d2781d1", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -431,7 +431,7 @@ enum reg_class\n    a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME)  ((CUM) = 0)\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT)  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument of mode MODE and\n    data type TYPE.  (TYPE is null for libcalls where that information"}, {"sha": "3a419f782aac693f61af8ea0c93cec291acbb9e0", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -903,7 +903,7 @@ typedef struct i386_args {\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n   (init_cumulative_args (&CUM, FNTYPE, LIBNAME))\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "eb8baf5b61f233cdc42c5ae094c3f66305c22e4a", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -472,7 +472,7 @@ struct cumulative_args { int ints, floats; };\n    when the function gets a structure-value-address as an\n    invisible first argument.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n  ((CUM).ints = ((FNTYPE) != 0 && aggregate_value_p (TREE_TYPE ((FNTYPE))) \\\n \t\t? 4 : 0),\t\t\t\\\n   (CUM).floats = 0)"}, {"sha": "98657ba3ccc10f0a36eacade3bd9b08abe9fddc6", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -803,7 +803,7 @@ struct cum_args { int ca_nregparms; int ca_nstackparms; };\n \n    On 80960, the offset always starts at 0; the first parm reg is g0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n   ((CUM).ca_nregparms = 0, (CUM).ca_nstackparms = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "2c113303270f174782de02cf5f83b42db70cd256", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -843,7 +843,7 @@ extern enum reg_class regno_reg_class[];\n \n    On the m68k, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "126d8eab1188c6948011a0505d8a46b19efa2d16", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -762,7 +762,7 @@ struct sysV68_cumulative_args\n #define CUMULATIVE_ARGS struct sysV68_cumulative_args\n \n #undef INIT_CUMULATIVE_ARGS\n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n do {(CUM).offset = 0;\\\n (CUM).libcall = (LIBNAME) && (*XSTR((LIBNAME), 0) == '*');} while(0)\n "}, {"sha": "a6d5525f2d5d76ef12d4468df78b85f112e820a6", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -199,13 +199,13 @@ extern char * reg_names[];\n    Redefined in sysv4.h, and luna.h.  */\n #define VERSION_INFO1\t\"88open OCS/BCS, \"\n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.66 $\"\n+#define VERSION_INFO2   \"$Revision: 1.67 $\"\n #endif\n \n #ifndef VERSION_STRING\n #define VERSION_STRING  version_string\n #ifdef __STDC__\n-#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.66 $ \" __DATE__\n+#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.67 $ \" __DATE__\n #else\n #define TM_RCS_ID      \"$What: <@(#) m88k.h,v\t1.1.1.2.2.2> $\"\n #endif  /* __STDC__ */\n@@ -1046,7 +1046,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \n /* Initialize a variable CUM of type CUMULATIVE_ARGS for a call to a\n    function whose data type is FNTYPE.  For a library call, FNTYPE is 0. */\n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME) ((CUM) = 0)\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT) ((CUM) = 0)\n \n /* A C statement (sans semicolon) to update the summarizer variable\n    CUM to advance past an argument in the argument list.  The values"}, {"sha": "7fa95c6a5a3f7d898c2a3589a4f6b260dc945929", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -2002,7 +2002,7 @@ typedef struct mips_args {\n \n */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\t\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\t\\\n   init_cumulative_args (&CUM, FNTYPE, LIBNAME)\t\t\t\t\\\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "2f5109c9c8bcde0a80b638e6647388ad1724855a", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -467,7 +467,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, GEN_AND_FP_REGS,\n \n    On the ns32k, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "221f965d32d5a4de615c09e61b39876f19fe7dd8", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -863,16 +863,17 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n    if any, which holds the structure-value-address).\n    Thus 4 or more means all following args should go on the stack.  */\n \n-struct hppa_args {int words, nargs_prototype; };\n+struct hppa_args {int words, nargs_prototype, indirect; };\n \n #define CUMULATIVE_ARGS struct hppa_args\n \n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME) \\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT) \\\n   (CUM).words = 0, \t\t\t\t\t\t\t\\\n+  (CUM).indirect = INDIRECT,\t\t\t\t\t\t\\\n   (CUM).nargs_prototype = (FNTYPE && TYPE_ARG_TYPES (FNTYPE)\t\t\\\n \t\t\t   ? (list_length (TYPE_ARG_TYPES (FNTYPE)) - 1\t\\\n \t\t\t      + (TYPE_MODE (TREE_TYPE (FNTYPE)) == BLKmode \\\n@@ -963,13 +964,13 @@ struct hppa_args {int words, nargs_prototype; };\n       || (CUM).nargs_prototype > 0)\t\t\t\t\t\\\n       ? gen_rtx (REG, (MODE),\t\t\t\t\t\t\\\n \t\t (FUNCTION_ARG_SIZE ((MODE), (TYPE)) > 1\t\t\\\n-\t\t  ? (((!current_call_is_indirect \t\t\t\\\n+\t\t  ? (((!(CUM).indirect \t\t\t\t\t\\\n \t\t       || TARGET_PORTABLE_RUNTIME)\t\t\t\\\n \t\t      && (MODE) == DFmode\t\t\t\t\\\n \t\t      && ! TARGET_SOFT_FLOAT)\t\t\t\t\\\n \t\t     ? ((CUM).words ? 38 : 34)\t\t\t\t\\\n \t\t     : ((CUM).words ? 23 : 25))\t\t\t\t\\\n-\t\t  : (((!current_call_is_indirect\t\t\t\\\n+\t\t  : (((!(CUM).indirect\t\t\t\t\t\\\n \t\t       || TARGET_PORTABLE_RUNTIME)\t\t\t\\\n \t\t      && (MODE) == SFmode\t\t\t\t\\\n \t\t      && ! TARGET_SOFT_FLOAT)\t\t\t\t\\"}, {"sha": "f38a9a85b5540a0cd2fdfbfabcc39214af84c3f8", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -598,7 +598,7 @@ maybe ac0 ? - as option someday! */\n    when the function gets a structure-value-address as an\n    invisible first argument.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "881956d2beb3674cf3598c19704b555bdea0ec10", "filename": "gcc/config/pyr/pyr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fpyr%2Fpyr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fpyr%2Fpyr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpyr%2Fpyr.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -629,7 +629,7 @@ extern int inner_param_safe_helper();\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.   */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n   ((CUM) = (FNTYPE && !flag_pcc_struct_return\t\t\\\n \t    && aggregate_value_p (TREE_TYPE (FNTYPE))))\n "}, {"sha": "9fc6a4bfd024e5e8003d5b99c1f691d68ec296e0", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -591,7 +591,7 @@ struct rt_cargs {int gregs, fregs; };\n    when the function gets a structure-value-address as an\n    invisible first argument.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n   (CUM).gregs = 0,\t\t\t\t\\\n   (CUM).fregs = 0\n "}, {"sha": "669dacbf885f454d5862803dacc14779872409c7", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -1310,7 +1310,7 @@ typedef struct rs6000_args\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME) \\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT) \\\n   init_cumulative_args (&CUM, FNTYPE, LIBNAME, FALSE)\n \n /* Similar, but when scanning the definition of a procedure.  We always"}, {"sha": "c2e81b44cc254d451726bb3986b0c9ffa9db9c19", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -708,7 +708,7 @@ struct sh_args {\n    On SH, the offset always starts at 0: the first parm reg is always\n    the same reg.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT) \\\n   do {\t\t\t\t\t\t\t\t\\\n     (CUM).arg_count[(int) SH_ARG_INT] = 0;\t\t\t\\\n     (CUM).arg_count[(int) SH_ARG_FLOAT] = 0;\t\t\t\\"}, {"sha": "e811359d4bd63c8afdf41cb05c84876e2420c0cd", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -1460,7 +1460,7 @@ struct sparc_args {\n \n #if SPARC_ARCH64\n extern int sparc_arg_count,sparc_n_named_args;\n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     (CUM).arg_count[(int) SPARC_ARG_INT] = 0;\t\t\t\\\n     (CUM).arg_count[(int) SPARC_ARG_FLOAT] = 0;\t\t\t\\\n@@ -1476,7 +1476,7 @@ extern int sparc_arg_count,sparc_n_named_args;\n        : 10000);\t\t\t\t\t\t\\\n   } while (0)\n #else\n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME) ((CUM) = 0)\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT) ((CUM) = 0)\n #endif\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "75ddd4b631077948088559c62a3af58393d32d60", "filename": "gcc/config/spur/spur.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fspur%2Fspur.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fspur%2Fspur.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspur%2Fspur.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -415,7 +415,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FP_REGS, ALL_REGS, LIM_REG_CLASSES };\n    when the function gets a structure-value-address as an\n    invisible first argument.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n  ((CUM) = ((FNTYPE) != 0 && aggregate_value_p (TREE_TYPE ((FNTYPE)))))\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "cd2b641a7f67e83362d69ab353ea88956a1840b8", "filename": "gcc/config/tahoe/tahoe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -356,7 +356,7 @@ enum reg_class {NO_REGS,GENERAL_REGS,FPP_REG,ALL_REGS,LIM_REG_CLASSES};\n /* we just set CUM to 0 before the FUNCTION_ARG call. No matter what */\n /* we make it, FUNCTION_ARG will return 0 anyway\t\t     */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n  ((CUM) = 0)\n \n /* all modes push their size rounded to the nearest word boundary */"}, {"sha": "fd00fa75e7af9754b6a66e9415a5e11442b38179", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -411,7 +411,7 @@ gen_rtx (PLUS, Pmode, frame, gen_rtx (CONST_INT, VOIDmode, 12))\n \n    On the vax, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "bf1364a697c93c31c56cd073e7b1c3e1cfa8c95a", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -360,7 +360,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n \n    On the we32k, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "a417e1c0d6131a3dff387518747d15d8c0d8a56b", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -1880,7 +1880,6 @@ emit_thunk (thunk_fndecl)\n   int delta = THUNK_DELTA (thunk_fndecl);\n   int tem;\n   int failure = 0;\n-  int current_call_is_indirect = 0;\t/* needed for HPPA FUNCTION_ARG */\n \n   /* Used to remember which regs we need to emit a USE rtx for. */\n   rtx need_use[FIRST_PSEUDO_REGISTER];\n@@ -1913,7 +1912,7 @@ emit_thunk (thunk_fndecl)\n   expand_start_bindings (1);\n \n   /* Start updating where the next arg would go.  */\n-  INIT_CUMULATIVE_ARGS (args_so_far, TREE_TYPE (function), NULL_RTX);\n+  INIT_CUMULATIVE_ARGS (args_so_far, TREE_TYPE (function), NULL_RTX, 0);\n   stack_args_size.constant = 0;\n   stack_args_size.var = 0;\n   /* SETUP for possible structure return address FIXME */"}, {"sha": "c3328a1677984f2d4242349418b55c80970f7ba1", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -8631,7 +8631,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \top0 = memory_address (FUNCTION_MODE, op0);\n \n \tINIT_CUMULATIVE_ARGS (args_so_far, NULL_TREE,\n-\t\t\t      gen_rtx (SYMBOL_REF, Pmode, \"__dummy\"));\n+\t\t\t      gen_rtx (SYMBOL_REF, Pmode, \"__dummy\"), 1);\n \tnext_arg_reg = FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1);\n \n #ifndef ACCUMULATE_OUTGOING_ARGS"}, {"sha": "150aa8e4936e8b3936140b1777fab67779a7917d", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=2c7ee1a641d927dc3f45170f0ff4ecd6dd8f31c7", "patch": "@@ -3235,9 +3235,6 @@ assign_parms (fndecl, second_time)\n   int nparmregs = list_length (fnargs) + LAST_VIRTUAL_REGISTER + 1;\n   int varargs_setup = 0;\n   rtx conversion_insns = 0;\n-  /* FUNCTION_ARG may look at this variable.  Since this is not\n-     expanding a call it will always be zero in this function.  */\n-  int current_call_is_indirect = 0;\n \n   /* Nonzero if the last arg is named `__builtin_va_alist',\n      which is used on some machines for old-fashioned non-ANSI varargs.h;\n@@ -3299,7 +3296,7 @@ assign_parms (fndecl, second_time)\n #ifdef INIT_CUMULATIVE_INCOMING_ARGS\n   INIT_CUMULATIVE_INCOMING_ARGS (args_so_far, fntype, NULL_RTX);\n #else\n-  INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX);\n+  INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX, 0);\n #endif\n \n   /* We haven't yet found an argument that we must push and pretend the"}]}