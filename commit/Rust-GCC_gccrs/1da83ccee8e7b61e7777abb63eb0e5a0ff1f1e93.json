{"sha": "1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRhODNjY2VlOGU3YjYxZTc3NzdhYmI2M2ViMGU1YTBmZjFmMWU5Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-13T10:18:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-13T10:18:28Z"}, "message": "[AArch64] Make simd_immediate_info INDEX explicit\n\nThis patch tweaks the representation of SVE INDEX instructions in\nsimd_immediate_info so that it's easier to add new types of\nconstant on top.\n\n2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (simd_immediate_info::insn_type): Add\n\tINDEX.\n\t(simd_immediate_info::value, simd_immediate_info::step)\n\t(simd_immediate_info::modifier, simd_immediate_info::shift): Replace\n\twith...\n\t(simd_immediate_info::u): ...this new union.\n\t(simd_immediate_info::simd_immediate_info): Update accordingly.\n\t(aarch64_output_simd_mov_immediate): Likewise.\n\t(aarch64_output_sve_mov_immediate): Likewise.\n\nFrom-SVN: r274371", "tree": {"sha": "667f559d9bd961469d7af3e40ed02e2d3790701f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/667f559d9bd961469d7af3e40ed02e2d3790701f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e37e2bb100135e4d4afa2f4ae6445ac1201f01fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37e2bb100135e4d4afa2f4ae6445ac1201f01fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e37e2bb100135e4d4afa2f4ae6445ac1201f01fa"}], "stats": {"total": 120, "additions": 78, "deletions": 42}, "files": [{"sha": "744c897ca0accc54796f25f5a681e0fe4642b0bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93", "patch": "@@ -1,3 +1,15 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (simd_immediate_info::insn_type): Add\n+\tINDEX.\n+\t(simd_immediate_info::value, simd_immediate_info::step)\n+\t(simd_immediate_info::modifier, simd_immediate_info::shift): Replace\n+\twith...\n+\t(simd_immediate_info::u): ...this new union.\n+\t(simd_immediate_info::simd_immediate_info): Update accordingly.\n+\t(aarch64_output_simd_mov_immediate): Likewise.\n+\t(aarch64_output_sve_mov_immediate): Likewise.\n+\n 2019-08-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc/config.gcc (msp430*-*-*): Add msp430-devices.o to extra_objs and"}, {"sha": "2db099597a60f9a4bdcc52faa0e37468108cd725", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 66, "deletions": 42, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1da83ccee8e7b61e7777abb63eb0e5a0ff1f1e93", "patch": "@@ -83,7 +83,7 @@\n /* Information about a legitimate vector immediate operand.  */\n struct simd_immediate_info\n {\n-  enum insn_type { MOV, MVN };\n+  enum insn_type { MOV, MVN, INDEX };\n   enum modifier_type { LSL, MSL };\n \n   simd_immediate_info () {}\n@@ -96,29 +96,43 @@ struct simd_immediate_info\n   /* The mode of the elements.  */\n   scalar_mode elt_mode;\n \n-  /* The value of each element if all elements are the same, or the\n-     first value if the constant is a series.  */\n-  rtx value;\n-\n-  /* The value of the step if the constant is a series, null otherwise.  */\n-  rtx step;\n-\n   /* The instruction to use to move the immediate into a vector.  */\n   insn_type insn;\n \n-  /* The kind of shift modifier to use, and the number of bits to shift.\n-     This is (LSL, 0) if no shift is needed.  */\n-  modifier_type modifier;\n-  unsigned int shift;\n+  union\n+  {\n+    /* For MOV and MVN.  */\n+    struct\n+    {\n+      /* The value of each element.  */\n+      rtx value;\n+\n+      /* The kind of shift modifier to use, and the number of bits to shift.\n+\t This is (LSL, 0) if no shift is needed.  */\n+      modifier_type modifier;\n+      unsigned int shift;\n+    } mov;\n+\n+    /* For INDEX.  */\n+    struct\n+    {\n+      /* The value of the first element and the step to be added for each\n+\t subsequent element.  */\n+      rtx base, step;\n+    } index;\n+  } u;\n };\n \n /* Construct a floating-point immediate in which each element has mode\n    ELT_MODE_IN and value VALUE_IN.  */\n inline simd_immediate_info\n ::simd_immediate_info (scalar_float_mode elt_mode_in, rtx value_in)\n-  : elt_mode (elt_mode_in), value (value_in), step (NULL_RTX), insn (MOV),\n-    modifier (LSL), shift (0)\n-{}\n+  : elt_mode (elt_mode_in), insn (MOV)\n+{\n+  u.mov.value = value_in;\n+  u.mov.modifier = LSL;\n+  u.mov.shift = 0;\n+}\n \n /* Construct an integer immediate in which each element has mode ELT_MODE_IN\n    and value VALUE_IN.  The other parameters are as for the structure\n@@ -128,17 +142,22 @@ ::simd_immediate_info (scalar_int_mode elt_mode_in,\n \t\t       unsigned HOST_WIDE_INT value_in,\n \t\t       insn_type insn_in, modifier_type modifier_in,\n \t\t       unsigned int shift_in)\n-  : elt_mode (elt_mode_in), value (gen_int_mode (value_in, elt_mode_in)),\n-    step (NULL_RTX), insn (insn_in), modifier (modifier_in), shift (shift_in)\n-{}\n+  : elt_mode (elt_mode_in), insn (insn_in)\n+{\n+  u.mov.value = gen_int_mode (value_in, elt_mode_in);\n+  u.mov.modifier = modifier_in;\n+  u.mov.shift = shift_in;\n+}\n \n /* Construct an integer immediate in which each element has mode ELT_MODE_IN\n-   and where element I is equal to VALUE_IN + I * STEP_IN.  */\n+   and where element I is equal to BASE_IN + I * STEP_IN.  */\n inline simd_immediate_info\n-::simd_immediate_info (scalar_mode elt_mode_in, rtx value_in, rtx step_in)\n-  : elt_mode (elt_mode_in), value (value_in), step (step_in), insn (MOV),\n-    modifier (LSL), shift (0)\n-{}\n+::simd_immediate_info (scalar_mode elt_mode_in, rtx base_in, rtx step_in)\n+  : elt_mode (elt_mode_in), insn (INDEX)\n+{\n+  u.index.base = base_in;\n+  u.index.step = step_in;\n+}\n \n /* The current code model.  */\n enum aarch64_code_model aarch64_cmodel;\n@@ -16275,17 +16294,18 @@ aarch64_output_simd_mov_immediate (rtx const_vector, unsigned width,\n \n   if (GET_MODE_CLASS (info.elt_mode) == MODE_FLOAT)\n     {\n-      gcc_assert (info.shift == 0 && info.insn == simd_immediate_info::MOV);\n+      gcc_assert (info.insn == simd_immediate_info::MOV\n+\t\t  && info.u.mov.shift == 0);\n       /* For FP zero change it to a CONST_INT 0 and use the integer SIMD\n \t move immediate path.  */\n-      if (aarch64_float_const_zero_rtx_p (info.value))\n-        info.value = GEN_INT (0);\n+      if (aarch64_float_const_zero_rtx_p (info.u.mov.value))\n+        info.u.mov.value = GEN_INT (0);\n       else\n \t{\n \t  const unsigned int buf_size = 20;\n \t  char float_buf[buf_size] = {'\\0'};\n \t  real_to_decimal_for_mode (float_buf,\n-\t\t\t\t    CONST_DOUBLE_REAL_VALUE (info.value),\n+\t\t\t\t    CONST_DOUBLE_REAL_VALUE (info.u.mov.value),\n \t\t\t\t    buf_size, buf_size, 1, info.elt_mode);\n \n \t  if (lane_count == 1)\n@@ -16297,36 +16317,39 @@ aarch64_output_simd_mov_immediate (rtx const_vector, unsigned width,\n \t}\n     }\n \n-  gcc_assert (CONST_INT_P (info.value));\n+  gcc_assert (CONST_INT_P (info.u.mov.value));\n \n   if (which == AARCH64_CHECK_MOV)\n     {\n       mnemonic = info.insn == simd_immediate_info::MVN ? \"mvni\" : \"movi\";\n-      shift_op = info.modifier == simd_immediate_info::MSL ? \"msl\" : \"lsl\";\n+      shift_op = (info.u.mov.modifier == simd_immediate_info::MSL\n+\t\t  ? \"msl\" : \"lsl\");\n       if (lane_count == 1)\n \tsnprintf (templ, sizeof (templ), \"%s\\t%%d0, \" HOST_WIDE_INT_PRINT_HEX,\n-\t\t  mnemonic, UINTVAL (info.value));\n-      else if (info.shift)\n+\t\t  mnemonic, UINTVAL (info.u.mov.value));\n+      else if (info.u.mov.shift)\n \tsnprintf (templ, sizeof (templ), \"%s\\t%%0.%d%c, \"\n \t\t  HOST_WIDE_INT_PRINT_HEX \", %s %d\", mnemonic, lane_count,\n-\t\t  element_char, UINTVAL (info.value), shift_op, info.shift);\n+\t\t  element_char, UINTVAL (info.u.mov.value), shift_op,\n+\t\t  info.u.mov.shift);\n       else\n \tsnprintf (templ, sizeof (templ), \"%s\\t%%0.%d%c, \"\n \t\t  HOST_WIDE_INT_PRINT_HEX, mnemonic, lane_count,\n-\t\t  element_char, UINTVAL (info.value));\n+\t\t  element_char, UINTVAL (info.u.mov.value));\n     }\n   else\n     {\n       /* For AARCH64_CHECK_BIC and AARCH64_CHECK_ORR.  */\n       mnemonic = info.insn == simd_immediate_info::MVN ? \"bic\" : \"orr\";\n-      if (info.shift)\n+      if (info.u.mov.shift)\n \tsnprintf (templ, sizeof (templ), \"%s\\t%%0.%d%c, #\"\n \t\t  HOST_WIDE_INT_PRINT_DEC \", %s #%d\", mnemonic, lane_count,\n-\t\t  element_char, UINTVAL (info.value), \"lsl\", info.shift);\n+\t\t  element_char, UINTVAL (info.u.mov.value), \"lsl\",\n+\t\t  info.u.mov.shift);\n       else\n \tsnprintf (templ, sizeof (templ), \"%s\\t%%0.%d%c, #\"\n \t\t  HOST_WIDE_INT_PRINT_DEC, mnemonic, lane_count,\n-\t\t  element_char, UINTVAL (info.value));\n+\t\t  element_char, UINTVAL (info.u.mov.value));\n     }\n   return templ;\n }\n@@ -16370,24 +16393,25 @@ aarch64_output_sve_mov_immediate (rtx const_vector)\n \n   element_char = sizetochar (GET_MODE_BITSIZE (info.elt_mode));\n \n-  if (info.step)\n+  if (info.insn == simd_immediate_info::INDEX)\n     {\n       snprintf (templ, sizeof (templ), \"index\\t%%0.%c, #\"\n \t\tHOST_WIDE_INT_PRINT_DEC \", #\" HOST_WIDE_INT_PRINT_DEC,\n-\t\telement_char, INTVAL (info.value), INTVAL (info.step));\n+\t\telement_char, INTVAL (info.u.index.base),\n+\t\tINTVAL (info.u.index.step));\n       return templ;\n     }\n \n   if (GET_MODE_CLASS (info.elt_mode) == MODE_FLOAT)\n     {\n-      if (aarch64_float_const_zero_rtx_p (info.value))\n-\tinfo.value = GEN_INT (0);\n+      if (aarch64_float_const_zero_rtx_p (info.u.mov.value))\n+\tinfo.u.mov.value = GEN_INT (0);\n       else\n \t{\n \t  const int buf_size = 20;\n \t  char float_buf[buf_size] = {};\n \t  real_to_decimal_for_mode (float_buf,\n-\t\t\t\t    CONST_DOUBLE_REAL_VALUE (info.value),\n+\t\t\t\t    CONST_DOUBLE_REAL_VALUE (info.u.mov.value),\n \t\t\t\t    buf_size, buf_size, 1, info.elt_mode);\n \n \t  snprintf (templ, sizeof (templ), \"fmov\\t%%0.%c, #%s\",\n@@ -16397,7 +16421,7 @@ aarch64_output_sve_mov_immediate (rtx const_vector)\n     }\n \n   snprintf (templ, sizeof (templ), \"mov\\t%%0.%c, #\" HOST_WIDE_INT_PRINT_DEC,\n-\t    element_char, INTVAL (info.value));\n+\t    element_char, INTVAL (info.u.mov.value));\n   return templ;\n }\n "}]}