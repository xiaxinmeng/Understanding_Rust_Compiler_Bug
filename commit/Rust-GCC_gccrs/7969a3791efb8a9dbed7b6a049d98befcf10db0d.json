{"sha": "7969a3791efb8a9dbed7b6a049d98befcf10db0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk2OWEzNzkxZWZiOGE5ZGJlZDdiNmEwNDlkOThiZWZjZjEwZGIwZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-01-26T23:07:08Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-01-26T23:07:08Z"}, "message": "libjava\n\t* Updated headers.\nlibjava/classpath\n\t* tools/gnu/classpath/tools/javah/FieldHelper.java (print): Print\n\t'volatile' after field type.\n\nFrom-SVN: r121215", "tree": {"sha": "480b780978724842f7b5256099d0c2c73aa4f70d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/480b780978724842f7b5256099d0c2c73aa4f70d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7969a3791efb8a9dbed7b6a049d98befcf10db0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7969a3791efb8a9dbed7b6a049d98befcf10db0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7969a3791efb8a9dbed7b6a049d98befcf10db0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7969a3791efb8a9dbed7b6a049d98befcf10db0d/comments", "author": null, "committer": null, "parents": [{"sha": "cdd76d88c8200bcc541204daeca4770ec6221f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd76d88c8200bcc541204daeca4770ec6221f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd76d88c8200bcc541204daeca4770ec6221f5d"}], "stats": {"total": 147, "additions": 78, "deletions": 69}, "files": [{"sha": "1738f98170492ca457b0a7b633e54ef25d0174ff", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -1,3 +1,7 @@\n+2007-01-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* Updated headers.\n+\n 2007-01-25  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgcj/29594:"}, {"sha": "ef572ddc2c83c8d7b21950c6aa177942d80fba74", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -1,3 +1,8 @@\n+2007-01-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* tools/gnu/classpath/tools/javah/FieldHelper.java (print): Print\n+\t'volatile' after field type.\n+\n 2007-01-23  Marco Trudel  <mtrudel@gmx.ch>\n \n \t* java/util/Arrays.java (binarySearch): Change comparison order."}, {"sha": "9b7169fe51961148101d284ae24c515c1bd7a819", "filename": "libjava/classpath/tools/classes/gnu/classpath/tools/javah/FieldHelper.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fclasspath%2Ftools%2Fclasses%2Fgnu%2Fclasspath%2Ftools%2Fjavah%2FFieldHelper.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fclasspath%2Ftools%2Fclasses%2Fgnu%2Fclasspath%2Ftools%2Fjavah%2FFieldHelper.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Ftools%2Fclasses%2Fgnu%2Fclasspath%2Ftools%2Fjavah%2FFieldHelper.class?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d"}, {"sha": "f1c369af267afd538fa94a34067f9e069b1782fe", "filename": "libjava/classpath/tools/gnu/classpath/tools/javah/FieldHelper.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fclasspath%2Ftools%2Fgnu%2Fclasspath%2Ftools%2Fjavah%2FFieldHelper.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fclasspath%2Ftools%2Fgnu%2Fclasspath%2Ftools%2Fjavah%2FFieldHelper.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Ftools%2Fgnu%2Fclasspath%2Ftools%2Fjavah%2FFieldHelper.java?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -1,5 +1,5 @@\n /* FieldHelper.java - field helper methods for CNI\n- Copyright (C) 2006 Free Software Foundation, Inc.\n+ Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n \n  This file is part of GNU Classpath.\n \n@@ -52,12 +52,12 @@ public static boolean print(CniPrintStream out, FieldNode field,\n     out.print(\"  \");\n     if (Modifier.isStatic(field.access))\n       out.print(\"static \");\n-    if (Modifier.isVolatile(field.access))\n-      out.print(\"volatile \");\n     if ((field.value instanceof Integer) || (field.value instanceof Long))\n       out.print(\"const \");\n     out.print(Type.getType(field.desc));\n     out.print(\" \");\n+    if (Modifier.isVolatile(field.access))\n+      out.print(\"volatile \");\n     boolean result = false;\n     if (superType != null && ! Modifier.isStatic(field.access))\n       {"}, {"sha": "8061e9a94414b6d8cce405a4edbc98fc8bf2b81b", "filename": "libjava/gnu/awt/xlib/XEventLoop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fgnu%2Fawt%2Fxlib%2FXEventLoop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fgnu%2Fawt%2Fxlib%2FXEventLoop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXEventLoop.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -67,7 +67,7 @@ class gnu::awt::xlib::XEventLoop : public ::java::lang::Object\n   ::java::lang::Thread * eventLoopThread;\n public: // actually package-private\n   ::gnu::awt::LightweightRedirector * lightweightRedirector;\n-  volatile jboolean idle;\n+  jboolean volatile idle;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "c788e827531b281a12eb2fc0c2bc2a995f170307", "filename": "libjava/gnu/java/awt/peer/gtk/GThreadMutex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGThreadMutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGThreadMutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGThreadMutex.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -32,7 +32,7 @@ class gnu::java::awt::peer::gtk::GThreadMutex : public ::java::lang::Object\n \n public: // actually package-private\n   GThreadMutex();\n-  volatile jint __attribute__((aligned(__alignof__( ::java::lang::Object)))) potentialLockers;\n+  jint volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) potentialLockers;\n   ::java::lang::Object * lockForPotentialLockers;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "664fc4e121c1346abae5c5004a82d44af0d4d1e2", "filename": "libjava/gnu/java/rmi/server/ConnectionRunnerPool$ConnectionRunner.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FConnectionRunnerPool%24ConnectionRunner.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FConnectionRunnerPool%24ConnectionRunner.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FConnectionRunnerPool%24ConnectionRunner.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -36,7 +36,7 @@ class gnu::java::rmi::server::ConnectionRunnerPool$ConnectionRunner : public ::j\n   virtual void exit();\n private:\n   ::gnu::java::rmi::server::UnicastConnection * __attribute__((aligned(__alignof__( ::java::lang::Thread)))) conn;\n-  volatile jboolean exiting;\n+  jboolean volatile exiting;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "26c19ccc2ba118fa83236b7f0785764184370b45", "filename": "libjava/gnu/java/rmi/server/UnicastConnectionManager.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -70,7 +70,7 @@ class gnu::java::rmi::server::UnicastConnectionManager : public ::java::lang::Ob\n   static ::java::util::Hashtable * clients;\n   ::java::util::ArrayList * __attribute__((aligned(__alignof__( ::java::lang::Object)))) connections;\n private:\n-  volatile ::java::lang::Thread * serverThread;\n+  ::java::lang::Thread * volatile serverThread;\n   ::java::net::ServerSocket * ssock;\n public: // actually package-private\n   ::java::lang::String * serverName;"}, {"sha": "8abaa6a7e08ce4e5da34a129ce1b43764f24abbf", "filename": "libjava/java/lang/SecurityManager.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Flang%2FSecurityManager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Flang%2FSecurityManager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSecurityManager.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -74,7 +74,7 @@ class java::lang::SecurityManager : public ::java::lang::Object\n   virtual ::java::lang::ThreadGroup * getThreadGroup();\n public: // actually package-private\n   virtual void checkPackageList(::java::lang::String *, ::java::lang::String *, ::java::lang::String *);\n-  static volatile ::java::lang::SecurityManager * current;\n+  static ::java::lang::SecurityManager * volatile current;\n public: // actually protected\n   jboolean __attribute__((aligned(__alignof__( ::java::lang::Object)))) inCheck;\n public:"}, {"sha": "74e149030f76607f1646dbd79bf65724e7260927", "filename": "libjava/java/lang/Thread.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Flang%2FThread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Flang%2FThread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -144,7 +144,7 @@ class java::lang::Thread : public ::java::lang::Object\n   static const jbyte THREAD_PARK_DEAD = 3;\n   ::java::lang::Object * accessControlState;\n   ::gnu::gcj::RawData * interp_frame;\n-  volatile jint state;\n+  jint volatile state;\n   ::gnu::gcj::RawDataManaged * data;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "0013a3fc8ca9fe9024ad373c76e83cd19176d107", "filename": "libjava/java/security/VMSecureRandom$Spinner.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Fsecurity%2FVMSecureRandom%24Spinner.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Fsecurity%2FVMSecureRandom%24Spinner.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FVMSecureRandom%24Spinner.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -29,8 +29,8 @@ class java::security::VMSecureRandom$Spinner : public ::java::lang::Object\n   void stop();\n public: // actually package-private\n   static void access$0(::java::security::VMSecureRandom$Spinner *);\n-  volatile jbyte __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n-  volatile jboolean running;\n+  jbyte volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n+  jboolean volatile running;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "2667ed07c5bccce4ce43ca6db39589086d10240e", "filename": "libjava/java/util/concurrent/ConcurrentHashMap$HashEntry.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentHashMap%24HashEntry.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentHashMap%24HashEntry.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentHashMap%24HashEntry.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -18,7 +18,7 @@ class java::util::concurrent::ConcurrentHashMap$HashEntry : public ::java::lang:\n   static JArray< ::java::util::concurrent::ConcurrentHashMap$HashEntry * > * newArray(jint);\n   ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::lang::Object)))) key;\n   jint hash;\n-  volatile ::java::lang::Object * value;\n+  ::java::lang::Object * volatile value;\n   ::java::util::concurrent::ConcurrentHashMap$HashEntry * next;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "55d06e8698f3f88cb809804ff616bbe8ff1feef9", "filename": "libjava/java/util/concurrent/ConcurrentHashMap$Segment.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentHashMap%24Segment.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentHashMap%24Segment.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentHashMap%24Segment.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -31,10 +31,10 @@ class java::util::concurrent::ConcurrentHashMap$Segment : public ::java::util::c\n private:\n   static const jlong serialVersionUID = 2249069246763182397LL;\n public: // actually package-private\n-  volatile jint __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::ReentrantLock)))) count;\n+  jint volatile __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::ReentrantLock)))) count;\n   jint modCount;\n   jint threshold;\n-  volatile JArray< ::java::util::concurrent::ConcurrentHashMap$HashEntry * > * table;\n+  JArray< ::java::util::concurrent::ConcurrentHashMap$HashEntry * > * volatile table;\n   jfloat loadFactor;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "af69ba60a4e9b26f93588a0ba7b92dff7ab23c7c", "filename": "libjava/java/util/concurrent/ConcurrentLinkedQueue$Node.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentLinkedQueue%24Node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentLinkedQueue%24Node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentLinkedQueue%24Node.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -21,8 +21,8 @@ class java::util::concurrent::ConcurrentLinkedQueue$Node : public ::java::lang::\n   virtual jboolean casNext(::java::util::concurrent::ConcurrentLinkedQueue$Node *, ::java::util::concurrent::ConcurrentLinkedQueue$Node *);\n   virtual void setNext(::java::util::concurrent::ConcurrentLinkedQueue$Node *);\n private:\n-  volatile ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::lang::Object)))) item;\n-  volatile ::java::util::concurrent::ConcurrentLinkedQueue$Node * next;\n+  ::java::lang::Object * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) item;\n+  ::java::util::concurrent::ConcurrentLinkedQueue$Node * volatile next;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * nextUpdater;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * itemUpdater;\n public:"}, {"sha": "512bc0e07369f99210bb3d9c370e4f1fab154779", "filename": "libjava/java/util/concurrent/ConcurrentLinkedQueue.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentLinkedQueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentLinkedQueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentLinkedQueue.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -34,8 +34,8 @@ class java::util::concurrent::ConcurrentLinkedQueue : public ::java::util::Abstr\n   static const jlong serialVersionUID = 196745693267521676LL;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * tailUpdater;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * headUpdater;\n-  volatile ::java::util::concurrent::ConcurrentLinkedQueue$Node * __attribute__((aligned(__alignof__( ::java::util::AbstractQueue)))) head;\n-  volatile ::java::util::concurrent::ConcurrentLinkedQueue$Node * tail;\n+  ::java::util::concurrent::ConcurrentLinkedQueue$Node * volatile __attribute__((aligned(__alignof__( ::java::util::AbstractQueue)))) head;\n+  ::java::util::concurrent::ConcurrentLinkedQueue$Node * volatile tail;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "629cff881e92431da699b44b33aef2648df46e11", "filename": "libjava/java/util/concurrent/ConcurrentSkipListMap$Index.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap%24Index.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap%24Index.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap%24Index.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -19,7 +19,7 @@ class java::util::concurrent::ConcurrentSkipListMap$Index : public ::java::lang:\n   virtual jboolean unlink(::java::util::concurrent::ConcurrentSkipListMap$Index *);\n   ::java::util::concurrent::ConcurrentSkipListMap$Node * __attribute__((aligned(__alignof__( ::java::lang::Object)))) node;\n   ::java::util::concurrent::ConcurrentSkipListMap$Index * down;\n-  volatile ::java::util::concurrent::ConcurrentSkipListMap$Index * right;\n+  ::java::util::concurrent::ConcurrentSkipListMap$Index * volatile right;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * rightUpdater;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "c9d5d890d1ccb26dd20fa3e6bfeceeff62a9e00e", "filename": "libjava/java/util/concurrent/ConcurrentSkipListMap$Node.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap%24Node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap%24Node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap%24Node.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -23,8 +23,8 @@ class java::util::concurrent::ConcurrentSkipListMap$Node : public ::java::lang::\n   ::java::lang::Object * getValidValue();\n   ::java::util::AbstractMap$SimpleImmutableEntry * createSnapshot();\n   ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::lang::Object)))) key;\n-  volatile ::java::lang::Object * value;\n-  volatile ::java::util::concurrent::ConcurrentSkipListMap$Node * next;\n+  ::java::lang::Object * volatile value;\n+  ::java::util::concurrent::ConcurrentSkipListMap$Node * volatile next;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * nextUpdater;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * valueUpdater;\n public:"}, {"sha": "be9beb80ca9db6784e8473c945088f5ab77b00d6", "filename": "libjava/java/util/concurrent/ConcurrentSkipListMap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -118,7 +118,7 @@ class java::util::concurrent::ConcurrentSkipListMap : public ::java::util::Abstr\n   static const jlong serialVersionUID = -8627078645895051609LL;\n   static ::java::util::Random * seedGenerator;\n   static ::java::lang::Object * BASE_HEADER;\n-  volatile ::java::util::concurrent::ConcurrentSkipListMap$HeadIndex * __attribute__((aligned(__alignof__( ::java::util::AbstractMap)))) head;\n+  ::java::util::concurrent::ConcurrentSkipListMap$HeadIndex * volatile __attribute__((aligned(__alignof__( ::java::util::AbstractMap)))) head;\n   ::java::util::Comparator * comparator__;\n   jint randomSeed;\n   ::java::util::concurrent::ConcurrentSkipListMap$KeySet * keySet__;"}, {"sha": "4bd3890eac80e35d35d18b4c466971afbfec81e7", "filename": "libjava/java/util/concurrent/Exchanger$Node.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FExchanger%24Node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FExchanger%24Node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FExchanger%24Node.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -14,7 +14,7 @@ class java::util::concurrent::Exchanger$Node : public ::java::util::concurrent::\n public:\n   Exchanger$Node(::java::lang::Object *);\n   ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::util::concurrent::atomic::AtomicReference)))) item;\n-  volatile ::java::lang::Thread * waiter;\n+  ::java::lang::Thread * volatile waiter;\n   static ::java::lang::Class class$;\n };\n "}, {"sha": "5a0993e2656b3f4d4c30907e42c92522e3500620", "filename": "libjava/java/util/concurrent/Exchanger.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FExchanger.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FExchanger.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FExchanger.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -33,7 +33,7 @@ class java::util::concurrent::Exchanger : public ::java::lang::Object\n   static jint TIMED_SPINS;\n   static ::java::lang::Object * CANCEL;\n   static ::java::lang::Object * NULL_ITEM;\n-  volatile JArray< ::java::util::concurrent::Exchanger$Slot * > * __attribute__((aligned(__alignof__( ::java::lang::Object)))) arena;\n+  JArray< ::java::util::concurrent::Exchanger$Slot * > * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) arena;\n   ::java::util::concurrent::atomic::AtomicInteger * max;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "edaa1cad7bd9e1481f123bb92b230604d5859060", "filename": "libjava/java/util/concurrent/FutureTask$Sync.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FFutureTask%24Sync.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FFutureTask%24Sync.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FFutureTask%24Sync.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -36,7 +36,7 @@ class java::util::concurrent::FutureTask$Sync : public ::java::util::concurrent:\n   ::java::util::concurrent::Callable * __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::AbstractQueuedSynchronizer)))) callable;\n   ::java::lang::Object * result;\n   ::java::lang::Throwable * exception;\n-  volatile ::java::lang::Thread * runner;\n+  ::java::lang::Thread * volatile runner;\n public: // actually package-private\n   ::java::util::concurrent::FutureTask * this$0;\n public:"}, {"sha": "1cf8cda9db841eed1ec759b665489b8e5a0b7080", "filename": "libjava/java/util/concurrent/LinkedBlockingQueue$Node.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FLinkedBlockingQueue%24Node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FLinkedBlockingQueue%24Node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FLinkedBlockingQueue%24Node.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -13,7 +13,7 @@ class java::util::concurrent::LinkedBlockingQueue$Node : public ::java::lang::Ob\n \n public: // actually package-private\n   LinkedBlockingQueue$Node(::java::lang::Object *);\n-  volatile ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::lang::Object)))) item;\n+  ::java::lang::Object * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) item;\n   ::java::util::concurrent::LinkedBlockingQueue$Node * next;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "8e651b36a5331ec3d9bd70c79cd6d5bb5b1cf873", "filename": "libjava/java/util/concurrent/ScheduledThreadPoolExecutor.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FScheduledThreadPoolExecutor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FScheduledThreadPoolExecutor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FScheduledThreadPoolExecutor.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -45,8 +45,8 @@ class java::util::concurrent::ScheduledThreadPoolExecutor : public ::java::util:\n   static ::java::util::concurrent::atomic::AtomicLong * access$0();\n   static ::java::util::concurrent::BlockingQueue * access$1(::java::util::concurrent::ScheduledThreadPoolExecutor *);\n private:\n-  volatile jboolean __attribute__((aligned(__alignof__( ::java::util::concurrent::ThreadPoolExecutor)))) continueExistingPeriodicTasksAfterShutdown;\n-  volatile jboolean executeExistingDelayedTasksAfterShutdown;\n+  jboolean volatile __attribute__((aligned(__alignof__( ::java::util::concurrent::ThreadPoolExecutor)))) continueExistingPeriodicTasksAfterShutdown;\n+  jboolean volatile executeExistingDelayedTasksAfterShutdown;\n   static ::java::util::concurrent::atomic::AtomicLong * sequencer;\n   static jlong NANO_ORIGIN;\n public:"}, {"sha": "105c64e665904d203e88f2e505147d02a11d2265", "filename": "libjava/java/util/concurrent/SynchronousQueue$TransferQueue$QNode.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferQueue%24QNode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferQueue%24QNode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferQueue%24QNode.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -18,9 +18,9 @@ class java::util::concurrent::SynchronousQueue$TransferQueue$QNode : public ::ja\n   void tryCancel(::java::lang::Object *);\n   jboolean isCancelled();\n   jboolean isOffList();\n-  volatile ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * __attribute__((aligned(__alignof__( ::java::lang::Object)))) next;\n-  volatile ::java::lang::Object * item;\n-  volatile ::java::lang::Thread * waiter;\n+  ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) next;\n+  ::java::lang::Object * volatile item;\n+  ::java::lang::Thread * volatile waiter;\n   jboolean isData;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * nextUpdater;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * itemUpdater;"}, {"sha": "921c36377f7df3e08872fbf90d81cc963c913f4b", "filename": "libjava/java/util/concurrent/SynchronousQueue$TransferQueue.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferQueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferQueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferQueue.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -19,9 +19,9 @@ class java::util::concurrent::SynchronousQueue$TransferQueue : public ::java::ut\n   ::java::lang::Object * transfer(::java::lang::Object *, jboolean, jlong);\n   ::java::lang::Object * awaitFulfill(::java::util::concurrent::SynchronousQueue$TransferQueue$QNode *, ::java::lang::Object *, jboolean, jlong);\n   void clean(::java::util::concurrent::SynchronousQueue$TransferQueue$QNode *, ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode *);\n-  volatile ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * __attribute__((aligned(__alignof__( ::java::util::concurrent::SynchronousQueue$Transferer)))) head;\n-  volatile ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * tail;\n-  volatile ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * cleanMe;\n+  ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * volatile __attribute__((aligned(__alignof__( ::java::util::concurrent::SynchronousQueue$Transferer)))) head;\n+  ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * volatile tail;\n+  ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * volatile cleanMe;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * headUpdater;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * tailUpdater;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * cleanMeUpdater;"}, {"sha": "48e22f2a68da4037e36e1da11b4ef0bcac139649", "filename": "libjava/java/util/concurrent/SynchronousQueue$TransferStack$SNode.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferStack%24SNode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferStack%24SNode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferStack%24SNode.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -17,9 +17,9 @@ class java::util::concurrent::SynchronousQueue$TransferStack$SNode : public ::ja\n   jboolean tryMatch(::java::util::concurrent::SynchronousQueue$TransferStack$SNode *);\n   void tryCancel();\n   jboolean isCancelled();\n-  volatile ::java::util::concurrent::SynchronousQueue$TransferStack$SNode * __attribute__((aligned(__alignof__( ::java::lang::Object)))) next;\n-  volatile ::java::util::concurrent::SynchronousQueue$TransferStack$SNode * match;\n-  volatile ::java::lang::Thread * waiter;\n+  ::java::util::concurrent::SynchronousQueue$TransferStack$SNode * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) next;\n+  ::java::util::concurrent::SynchronousQueue$TransferStack$SNode * volatile match;\n+  ::java::lang::Thread * volatile waiter;\n   ::java::lang::Object * item;\n   jint mode;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * nextUpdater;"}, {"sha": "5722c419bf4816b35a62712b2c23ad9bff58f9d3", "filename": "libjava/java/util/concurrent/SynchronousQueue$TransferStack.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferStack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferStack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferStack.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -23,7 +23,7 @@ class java::util::concurrent::SynchronousQueue$TransferStack : public ::java::ut\n   static const jint REQUEST = 0;\n   static const jint DATA = 1;\n   static const jint FULFILLING = 2;\n-  volatile ::java::util::concurrent::SynchronousQueue$TransferStack$SNode * __attribute__((aligned(__alignof__( ::java::util::concurrent::SynchronousQueue$Transferer)))) head;\n+  ::java::util::concurrent::SynchronousQueue$TransferStack$SNode * volatile __attribute__((aligned(__alignof__( ::java::util::concurrent::SynchronousQueue$Transferer)))) head;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * headUpdater;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "7606ddcfe4979295e8eacec1138412337221932a", "filename": "libjava/java/util/concurrent/SynchronousQueue.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -47,7 +47,7 @@ class java::util::concurrent::SynchronousQueue : public ::java::util::AbstractQu\n   static jint maxUntimedSpins;\n   static const jlong spinForTimeoutThreshold = 1000LL;\n private:\n-  volatile ::java::util::concurrent::SynchronousQueue$Transferer * __attribute__((aligned(__alignof__( ::java::util::AbstractQueue)))) transferer;\n+  ::java::util::concurrent::SynchronousQueue$Transferer * volatile __attribute__((aligned(__alignof__( ::java::util::AbstractQueue)))) transferer;\n   ::java::util::concurrent::locks::ReentrantLock * qlock;\n   ::java::util::concurrent::SynchronousQueue$WaitQueue * waitingProducers;\n   ::java::util::concurrent::SynchronousQueue$WaitQueue * waitingConsumers;"}, {"sha": "a1b5dc3feee35c0a14831196358287962b85d3eb", "filename": "libjava/java/util/concurrent/ThreadPoolExecutor$Worker.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FThreadPoolExecutor%24Worker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FThreadPoolExecutor%24Worker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FThreadPoolExecutor%24Worker.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -24,7 +24,7 @@ class java::util::concurrent::ThreadPoolExecutor$Worker : public ::java::lang::O\n   ::java::util::concurrent::locks::ReentrantLock * __attribute__((aligned(__alignof__( ::java::lang::Object)))) runLock;\n   ::java::lang::Runnable * firstTask;\n public: // actually package-private\n-  volatile jlong completedTasks;\n+  jlong volatile completedTasks;\n   ::java::lang::Thread * thread;\n   ::java::util::concurrent::ThreadPoolExecutor * this$0;\n public:"}, {"sha": "b69b1f6559933cc69ba83a88b0ca5a2c78729544", "filename": "libjava/java/util/concurrent/ThreadPoolExecutor.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FThreadPoolExecutor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2FThreadPoolExecutor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FThreadPoolExecutor.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -71,20 +71,20 @@ class java::util::concurrent::ThreadPoolExecutor : public ::java::util::concurre\n   ::java::util::concurrent::locks::ReentrantLock * mainLock;\n   ::java::util::concurrent::locks::Condition * termination;\n   ::java::util::HashSet * workers;\n-  volatile jlong keepAliveTime;\n-  volatile jboolean allowCoreThreadTimeOut__;\n-  volatile jint corePoolSize;\n-  volatile jint maximumPoolSize;\n-  volatile jint poolSize;\n+  jlong volatile keepAliveTime;\n+  jboolean volatile allowCoreThreadTimeOut__;\n+  jint volatile corePoolSize;\n+  jint volatile maximumPoolSize;\n+  jint volatile poolSize;\n public: // actually package-private\n-  volatile jint runState;\n+  jint volatile runState;\n   static const jint RUNNING = 0;\n   static const jint SHUTDOWN = 1;\n   static const jint STOP = 2;\n   static const jint TERMINATED = 3;\n private:\n-  volatile ::java::util::concurrent::RejectedExecutionHandler * handler;\n-  volatile ::java::util::concurrent::ThreadFactory * threadFactory;\n+  ::java::util::concurrent::RejectedExecutionHandler * volatile handler;\n+  ::java::util::concurrent::ThreadFactory * volatile threadFactory;\n   jint largestPoolSize;\n   jlong completedTaskCount;\n   static ::java::util::concurrent::RejectedExecutionHandler * defaultHandler;"}, {"sha": "60d22a952ae91c97ef643d34819da661d3f9f8e0", "filename": "libjava/java/util/concurrent/atomic/AtomicBoolean.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicBoolean.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicBoolean.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicBoolean.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -35,7 +35,7 @@ class java::util::concurrent::atomic::AtomicBoolean : public ::java::lang::Objec\n   static const jlong serialVersionUID = 4654671469794556979LL;\n   static ::sun::misc::Unsafe * unsafe;\n   static jlong valueOffset;\n-  volatile jint __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n+  jint volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "136a578b514230d104afc9e060ece7c2b5d2cef0", "filename": "libjava/java/util/concurrent/atomic/AtomicInteger.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicInteger.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicInteger.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicInteger.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -45,7 +45,7 @@ class java::util::concurrent::atomic::AtomicInteger : public ::java::lang::Numbe\n   static const jlong serialVersionUID = 6214790243416807050LL;\n   static ::sun::misc::Unsafe * unsafe;\n   static jlong valueOffset;\n-  volatile jint __attribute__((aligned(__alignof__( ::java::lang::Number)))) value;\n+  jint volatile __attribute__((aligned(__alignof__( ::java::lang::Number)))) value;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "0d0c3b00f3eaacc85bc2a46735caef4a4ff3f5f7", "filename": "libjava/java/util/concurrent/atomic/AtomicLong.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicLong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicLong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicLong.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -49,7 +49,7 @@ class java::util::concurrent::atomic::AtomicLong : public ::java::lang::Number\n public: // actually package-private\n   static jboolean VM_SUPPORTS_LONG_CAS;\n private:\n-  volatile jlong __attribute__((aligned(__alignof__( ::java::lang::Number)))) value;\n+  jlong volatile __attribute__((aligned(__alignof__( ::java::lang::Number)))) value;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "363fca6ea10730ea11b804ab5febca3ff28f1753", "filename": "libjava/java/util/concurrent/atomic/AtomicReference.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicReference.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicReference.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicReference.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -35,7 +35,7 @@ class java::util::concurrent::atomic::AtomicReference : public ::java::lang::Obj\n   static const jlong serialVersionUID = -1848883965231344442LL;\n   static ::sun::misc::Unsafe * unsafe;\n   static jlong valueOffset;\n-  volatile ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n+  ::java::lang::Object * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "0976920620ff5cbca0c097d34c25eba5a0c697a1", "filename": "libjava/java/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedLongSynchronizer%24Node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedLongSynchronizer%24Node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedLongSynchronizer%24Node.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -22,10 +22,10 @@ class java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node : publi\n   static const jint CONDITION = -2;\n   static ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * SHARED;\n   static ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * EXCLUSIVE;\n-  volatile jint __attribute__((aligned(__alignof__( ::java::lang::Object)))) waitStatus;\n-  volatile ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * prev;\n-  volatile ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * next;\n-  volatile ::java::lang::Thread * thread;\n+  jint volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) waitStatus;\n+  ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * volatile prev;\n+  ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * volatile next;\n+  ::java::lang::Thread * volatile thread;\n   ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * nextWaiter;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "41f1f7cba883f6727dbbb59592e172b137ce03d0", "filename": "libjava/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedLongSynchronizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedLongSynchronizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedLongSynchronizer.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -97,9 +97,9 @@ class java::util::concurrent::locks::AbstractQueuedLongSynchronizer : public ::j\n   static void access$0();\n private:\n   static const jlong serialVersionUID = 7373984972572414692LL;\n-  volatile ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::AbstractOwnableSynchronizer)))) head;\n-  volatile ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * tail;\n-  volatile jlong state;\n+  ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * volatile __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::AbstractOwnableSynchronizer)))) head;\n+  ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * volatile tail;\n+  jlong volatile state;\n public: // actually package-private\n   static const jlong spinForTimeoutThreshold = 1000LL;\n private:"}, {"sha": "cc49550577d0307c9490adc510e58dcd8740420f", "filename": "libjava/java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedSynchronizer%24Node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedSynchronizer%24Node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedSynchronizer%24Node.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -22,10 +22,10 @@ class java::util::concurrent::locks::AbstractQueuedSynchronizer$Node : public ::\n   static const jint CONDITION = -2;\n   static ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * SHARED;\n   static ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * EXCLUSIVE;\n-  volatile jint __attribute__((aligned(__alignof__( ::java::lang::Object)))) waitStatus;\n-  volatile ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * prev;\n-  volatile ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * next;\n-  volatile ::java::lang::Thread * thread;\n+  jint volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) waitStatus;\n+  ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * volatile prev;\n+  ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * volatile next;\n+  ::java::lang::Thread * volatile thread;\n   ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * nextWaiter;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "e50fcef61af2ddda684903bfadd38d866ea74537", "filename": "libjava/java/util/concurrent/locks/AbstractQueuedSynchronizer.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedSynchronizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedSynchronizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedSynchronizer.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -97,9 +97,9 @@ class java::util::concurrent::locks::AbstractQueuedSynchronizer : public ::java:\n   static void access$0();\n private:\n   static const jlong serialVersionUID = 7373984972572414691LL;\n-  volatile ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::AbstractOwnableSynchronizer)))) head;\n-  volatile ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * tail;\n-  volatile jint state;\n+  ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * volatile __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::AbstractOwnableSynchronizer)))) head;\n+  ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * volatile tail;\n+  jint volatile state;\n public: // actually package-private\n   static const jlong spinForTimeoutThreshold = 1000LL;\n private:"}, {"sha": "58d48c9e2a8f69e68ecf105af1b53f5fd12414da", "filename": "libjava/java/util/logging/ErrorManager.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Flogging%2FErrorManager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjava%2Futil%2Flogging%2FErrorManager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Flogging%2FErrorManager.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -21,7 +21,7 @@ class java::util::logging::ErrorManager : public ::java::lang::Object\n   static const jint OPEN_FAILURE = 4;\n   static const jint FORMAT_FAILURE = 5;\n private:\n-  volatile jboolean __attribute__((aligned(__alignof__( ::java::lang::Object)))) everUsed;\n+  jboolean volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) everUsed;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "2b6cc2a134e25a53b00b6c681dc6c1ce89946df3", "filename": "libjava/javax/swing/plaf/basic/BasicSpinnerUI$2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSpinnerUI%242.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSpinnerUI%242.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSpinnerUI%242.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -46,7 +46,7 @@ class javax::swing::plaf::basic::BasicSpinnerUI$2 : public ::java::awt::event::M\n   void mouseReleased(::java::awt::event::MouseEvent *);\n public: // actually package-private\n   void increment();\n-  volatile jboolean __attribute__((aligned(__alignof__( ::java::awt::event::MouseAdapter)))) mouseDown;\n+  jboolean volatile __attribute__((aligned(__alignof__( ::java::awt::event::MouseAdapter)))) mouseDown;\n   ::javax::swing::Timer * timer;\n   ::javax::swing::plaf::basic::BasicSpinnerUI * this$0;\n public:"}, {"sha": "c6e68952cb622f6c3b8effec30198dfc17e17ffc", "filename": "libjava/javax/swing/plaf/basic/BasicSpinnerUI$4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSpinnerUI%244.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7969a3791efb8a9dbed7b6a049d98befcf10db0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSpinnerUI%244.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSpinnerUI%244.h?ref=7969a3791efb8a9dbed7b6a049d98befcf10db0d", "patch": "@@ -46,7 +46,7 @@ class javax::swing::plaf::basic::BasicSpinnerUI$4 : public ::java::awt::event::M\n   void mouseReleased(::java::awt::event::MouseEvent *);\n public: // actually package-private\n   void decrement();\n-  volatile jboolean __attribute__((aligned(__alignof__( ::java::awt::event::MouseAdapter)))) mouseDown;\n+  jboolean volatile __attribute__((aligned(__alignof__( ::java::awt::event::MouseAdapter)))) mouseDown;\n   ::javax::swing::Timer * timer;\n   ::javax::swing::plaf::basic::BasicSpinnerUI * this$0;\n public:"}]}