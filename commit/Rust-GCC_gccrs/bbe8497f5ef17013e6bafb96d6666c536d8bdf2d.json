{"sha": "bbe8497f5ef17013e6bafb96d6666c536d8bdf2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJlODQ5N2Y1ZWYxNzAxM2U2YmFmYjk2ZDY2NjZjNTM2ZDhiZGYyZA==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "1998-06-19T01:13:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-06-19T01:13:01Z"}, "message": "i386.md (movsfcc, [...]): Use emit_store_flag to support LT, LE, GE, and GT signed integer comparisons.\n\n\ufffd\n\t* i386.md (movsfcc, movdfcc, movxfcc): Use emit_store_flag\n\tto support LT, LE, GE, and GT signed integer comparisons.\n\t(movsfcc+1, movsfcc+2, movdfcc+1, movdfcc+2,\n\tmovxfcc+1, movxfcc+2): Pattern doesn't match if the comparison\n\tis LT, LE, GE, or GT.\n\t(movdicc): Remove code resulting from an earlier patch which\n\tdidn't apply correctly.\n\nFrom-SVN: r20574", "tree": {"sha": "656beca7a13baff5b1d68111019eab7bd7251d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/656beca7a13baff5b1d68111019eab7bd7251d40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbe8497f5ef17013e6bafb96d6666c536d8bdf2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe8497f5ef17013e6bafb96d6666c536d8bdf2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbe8497f5ef17013e6bafb96d6666c536d8bdf2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe8497f5ef17013e6bafb96d6666c536d8bdf2d/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4d030e5b9aff5106a5da4c1d0749c6005ec72bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d030e5b9aff5106a5da4c1d0749c6005ec72bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d030e5b9aff5106a5da4c1d0749c6005ec72bc"}], "stats": {"total": 113, "additions": 73, "deletions": 40}, "files": [{"sha": "e3dbea9ab3bcd3e1f569886c5ff135de41bab584", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 73, "deletions": 40, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe8497f5ef17013e6bafb96d6666c536d8bdf2d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe8497f5ef17013e6bafb96d6666c536d8bdf2d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bbe8497f5ef17013e6bafb96d6666c536d8bdf2d", "patch": "@@ -7368,12 +7368,36 @@ byte_xor_operation:\n   \"TARGET_CMOVE\"\n   \"\n {\n+  rtx temp;\n+\n   if (GET_MODE_CLASS (GET_MODE (i386_compare_op0)) != MODE_INT)\n     FAIL;\n \n-  operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]),\n+  /* The floating point conditional move instructions don't directly\n+     support conditions resulting from a signed integer comparison. */\n+\n+  switch (GET_CODE (operands[1]))\n+    {\n+    case LT:\n+    case LE:\n+    case GE:\n+    case GT:\n+      temp = emit_store_flag (gen_reg_rtx (QImode),\n+\t\tGET_CODE (operands[1]), i386_compare_op0, i386_compare_op1,\n+\t\tVOIDmode, 0, 0);\n+\n+      if (!temp)\n+        FAIL;\n+\n+      operands[1] = gen_rtx_fmt_ee (NE, QImode, temp, const0_rtx);\n+      break;\n+\n+    default:\n+      operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]),\n \t\t\tGET_MODE (i386_compare_op0),\n \t\t\ti386_compare_op0, i386_compare_op1);\n+      break;\n+    }\n }\")\n \n (define_insn \"\"\n@@ -7383,7 +7407,9 @@ byte_xor_operation:\n \t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn,qmn,qn\")])\n \t      (match_operand:SF 4 \"register_operand\" \"f,f,0,0,f,f\")\n \t      (match_operand:SF 5 \"register_operand\" \"0,0,f,f,f,f\")))]\n-  \"TARGET_CMOVE\"\n+  \"TARGET_CMOVE\n+    && GET_CODE (operands[1]) != LT && GET_CODE (operands[1]) != LE\n+    && GET_CODE (operands[1]) != GE && GET_CODE (operands[1]) != GT\"\n   \"#\")\n \n (define_insn \"\"\n@@ -7393,7 +7419,9 @@ byte_xor_operation:\n \t\t (match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri,rmi,ri\")])\n \t      (match_operand:SF 4 \"register_operand\" \"f,f,0,0,f,f\")\n \t      (match_operand:SF 5 \"register_operand\" \"0,0,f,f,f,f\")))]\n-  \"TARGET_CMOVE && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\"\n+  \"TARGET_CMOVE && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n+    && GET_CODE (operands[1]) != LT && GET_CODE (operands[1]) != LE\n+    && GET_CODE (operands[1]) != GE && GET_CODE (operands[1]) != GT\"\n   \"#\")\n \n (define_split\n@@ -7442,29 +7470,36 @@ byte_xor_operation:\n   \"TARGET_CMOVE\"\n   \"\n {\n+  rtx temp;\n+\n   if (GET_MODE_CLASS (GET_MODE (i386_compare_op0)) != MODE_INT)\n     FAIL;\n \n-  /* The floating point conditional move instructions don't support\n-     signed integer comparisons. */\n+  /* The floating point conditional move instructions don't directly\n+     support conditions resulting from a signed integer comparison. */\n \n   switch (GET_CODE (operands[1]))\n     {\n     case LT:\n     case LE:\n     case GE:\n     case GT:\n-      FAIL;\n-    /* NOTREACHED */\n-      break;\n+      temp = emit_store_flag (gen_reg_rtx (QImode),\n+\t\tGET_CODE (operands[1]), i386_compare_op0, i386_compare_op1,\n+\t\tVOIDmode, 0, 0);\n \n-    default:\n+      if (!temp)\n+        FAIL;\n+\n+      operands[1] = gen_rtx_fmt_ee (NE, QImode, temp, const0_rtx);\n       break;\n-    }\n \n-  operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]),\n+    default:\n+      operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]),\n \t\t\tGET_MODE (i386_compare_op0),\n \t\t\ti386_compare_op0, i386_compare_op1);\n+      break;\n+    }\n }\")\n \n (define_insn \"\"\n@@ -7474,7 +7509,9 @@ byte_xor_operation:\n \t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn,qmn,qn\")])\n \t      (match_operand:DF 4 \"register_operand\" \"f,f,0,0,f,f\")\n \t      (match_operand:DF 5 \"register_operand\" \"0,0,f,f,f,f\")))]\n-  \"TARGET_CMOVE\"\n+  \"TARGET_CMOVE\n+    && GET_CODE (operands[1]) != LT && GET_CODE (operands[1]) != LE\n+    && GET_CODE (operands[1]) != GE && GET_CODE (operands[1]) != GT\"\n   \"#\")\n \n (define_insn \"\"\n@@ -7484,7 +7521,9 @@ byte_xor_operation:\n \t\t(match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri,rmi,ri\")])\n \t      (match_operand:DF 4 \"register_operand\" \"f,f,0,0,f,f\")\n \t      (match_operand:DF 5 \"register_operand\" \"0,0,f,f,f,f\")))]\n-  \"TARGET_CMOVE && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\"\n+  \"TARGET_CMOVE && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n+    && GET_CODE (operands[1]) != LT && GET_CODE (operands[1]) != LE\n+    && GET_CODE (operands[1]) != GE && GET_CODE (operands[1]) != GT\"\n   \"#\")\n \n (define_split\n@@ -7533,29 +7572,36 @@ byte_xor_operation:\n   \"TARGET_CMOVE\"\n   \"\n {\n+  rtx temp;\n+\n   if (GET_MODE_CLASS (GET_MODE (i386_compare_op0)) != MODE_INT)\n     FAIL;\n \n-  /* The floating point conditional move instructions don't support\n-     signed integer comparisons. */\n+  /* The floating point conditional move instructions don't directly\n+     support conditions resulting from a signed integer comparison. */\n \n   switch (GET_CODE (operands[1]))\n     {\n     case LT:\n     case LE:\n     case GE:\n     case GT:\n-      FAIL;\n-    /* NOTREACHED */\n-      break;\n+      temp = emit_store_flag (gen_reg_rtx (QImode),\n+\t\tGET_CODE (operands[1]), i386_compare_op0, i386_compare_op1,\n+\t\tVOIDmode, 0, 0);\n \n-    default:\n+      if (!temp)\n+        FAIL;\n+\n+      operands[1] = gen_rtx_fmt_ee (NE, QImode, temp, const0_rtx);\n       break;\n-    }\n \n-  operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]),\n+    default:\n+      operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]),\n \t\t\tGET_MODE (i386_compare_op0),\n \t\t\ti386_compare_op0, i386_compare_op1);\n+      break;\n+    }\n }\")\n \n (define_insn \"\"\n@@ -7565,7 +7611,9 @@ byte_xor_operation:\n \t\t(match_operand:QI 3 \"general_operand\" \"qmn,qn,qmn,qn,qmn,qn\")])\n \t      (match_operand:XF 4 \"register_operand\" \"f,f,0,0,f,f\")\n \t      (match_operand:XF 5 \"register_operand\" \"0,0,f,f,f,f\")))]\n-  \"TARGET_CMOVE\"\n+  \"TARGET_CMOVE\n+    && GET_CODE (operands[1]) != LT && GET_CODE (operands[1]) != LE\n+    && GET_CODE (operands[1]) != GE && GET_CODE (operands[1]) != GT\"\n   \"#\")\n \n (define_insn \"\"\n@@ -7575,7 +7623,9 @@ byte_xor_operation:\n \t\t(match_operand 3 \"general_operand\" \"rmi,ri,rmi,ri,rmi,ri\")])\n \t      (match_operand:XF 4 \"register_operand\" \"f,f,0,0,f,f\")\n \t      (match_operand:XF 5 \"register_operand\" \"0,0,f,f,f,f\")))]\n-  \"TARGET_CMOVE && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\"\n+  \"TARGET_CMOVE && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n+    && GET_CODE (operands[1]) != LT && GET_CODE (operands[1]) != LE\n+    && GET_CODE (operands[1]) != GE && GET_CODE (operands[1]) != GT\"\n   \"#\")\n \n (define_split\n@@ -7627,23 +7677,6 @@ byte_xor_operation:\n   if (GET_MODE_CLASS (GET_MODE (i386_compare_op0)) != MODE_INT)\n     FAIL;\n \n-  /* The floating point conditional move instructions don't support\n-     signed integer comparisons. */\n-\n-  switch (GET_CODE (operands[1]))\n-    {\n-    case LT:\n-    case LE:\n-    case GE:\n-    case GT:\n-      FAIL;\n-    /* NOTREACHED */\n-      break;\n-\n-    default:\n-      break;\n-    }\n-\n   operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]),\n \t\t\tGET_MODE (i386_compare_op0),\n \t\t\ti386_compare_op0, i386_compare_op1);"}]}