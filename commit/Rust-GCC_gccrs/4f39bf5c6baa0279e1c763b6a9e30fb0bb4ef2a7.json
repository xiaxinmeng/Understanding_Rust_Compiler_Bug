{"sha": "4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYzOWJmNWM2YmFhMDI3OWUxYzc2M2I2YTllMzBmYjBiYjRlZjJhNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-15T19:05:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-15T19:05:17Z"}, "message": "re PR libstdc++/34105 (Confusing error message with missing #include <algorithm>)\n\n2007-11-15  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/34105\n\t* include/bits/stl_algobase.h: Do not include <bits/algorithmfwd.h>.\n\t(lexicographical_compare(const unsigned char*, const unsigned char*,\n\tconst unsigned char*, const unsigned char*),\n\tlexicographical_compare(const char*, const char*, const char*,\n\tconst char*)): Move to namespace (std, _GLIBCXX_STD_P).\n\t* include/parallel/algobase.h: Do not include <bits/algorithmfwd.h>.\n\t(equal): Move after mismatch.\n\t* include/bits/stl_heap.h (is_heap, is_heap_until): Reorder.\n\t* include/bits/char_traits.h: Include <bits/stl_algobase.h> instead\n\tof <bits/algorithmfwd.h>.\n\t* include/bits/stl_algo.h: Include first <bits/algorithmfwd.h>.\n\t* include/bits/algorithmfwd.h (lexicographical_compare): Do not\n\tdeclare overloads.\n\t* include/parallel/partition.h: Include <parallel/random_number.h>.\n\t* testsuite/util/testsuite_abi.cc: Include <algorithm>.\n\nFrom-SVN: r130207", "tree": {"sha": "892e71e4a0cbd22ffa49a034f35871838d86a536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/892e71e4a0cbd22ffa49a034f35871838d86a536"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/comments", "author": null, "committer": null, "parents": [{"sha": "cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6"}], "stats": {"total": 240, "additions": 125, "deletions": 115}, "files": [{"sha": "3165b3ea651f171ec60fdb1c8dd0163cab2beb20", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "patch": "@@ -1,11 +1,29 @@\n+2007-11-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/34105\n+\t* include/bits/stl_algobase.h: Do not include <bits/algorithmfwd.h>.\n+\t(lexicographical_compare(const unsigned char*, const unsigned char*,\n+\tconst unsigned char*, const unsigned char*),\n+\tlexicographical_compare(const char*, const char*, const char*,\n+\tconst char*)): Move to namespace (std, _GLIBCXX_STD_P).\n+\t* include/parallel/algobase.h: Do not include <bits/algorithmfwd.h>.\n+\t(equal): Move after mismatch.\n+\t* include/bits/stl_heap.h (is_heap, is_heap_until): Reorder.\n+\t* include/bits/char_traits.h: Include <bits/stl_algobase.h> instead\n+\tof <bits/algorithmfwd.h>.\n+\t* include/bits/stl_algo.h: Include first <bits/algorithmfwd.h>.\n+\t* include/bits/algorithmfwd.h (lexicographical_compare): Do not\n+\tdeclare overloads.\n+\t* include/parallel/partition.h: Include <parallel/random_number.h>.\n+\t* testsuite/util/testsuite_abi.cc: Include <algorithm>.\n+\n 2007-11-14  Johannes Singler  <singler@ira.uka.de>\n \n       * include/parallel/multiway_merge.h: More robust finding of an\n         arbitrary existing element inside the input sequences.\n       * include/bits/stl_algo.h: Fix typo to actually call appropriate\n         sequential version.\n \n-\n 2007-11-13  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* docs/html/documentation.html: First pass at unified table of contents."}, {"sha": "cd9250e50aaffc0d18012c6937e7c6bcc6f936d1", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "patch": "@@ -223,14 +223,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     void \n     iter_swap(_FIter1, _FIter2);\n \n-  // Specializations for char and unsigned char.\n-  inline bool\n-  lexicographical_compare(const unsigned char*, const unsigned char*, \n-\t\t\t  const unsigned char*, const unsigned char*);\n-\n-  inline bool\n-  lexicographical_compare(const char*, const char*, const char*, const char*);\n-\n   template<typename _FIter, typename _Tp>\n     _FIter \n     lower_bound(_FIter, _FIter, const _Tp&);"}, {"sha": "86277a0940a48acd3e0b12c6b7b48153a3907b91", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "patch": "@@ -43,7 +43,7 @@\n \n #pragma GCC system_header\n \n-#include <bits/algorithmfwd.h>   // std::copy, std::fill_n\n+#include <bits/stl_algobase.h>  // std::copy, std::fill_n\n #include <bits/postypes.h>      // For streampos\n #include <cstdio>               // For EOF\n #include <cwchar>               // For WEOF, wmemmove, wmemset, etc."}, {"sha": "b81a4a354cbd50cdd3f51e9f13cfb76de2fbee95", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "patch": "@@ -63,9 +63,9 @@\n #define _STL_ALGO_H 1\n \n #include <cstdlib>             // for rand\n+#include <bits/algorithmfwd.h>\n #include <bits/stl_heap.h>\n #include <bits/stl_tempbuf.h>  // for _Temporary_buffer\n-#include <bits/algorithmfwd.h>\n #include <debug/debug.h>\n \n // See concept_check.h for the __glibcxx_*_requires macros."}, {"sha": "0c3f1b21c23d69bfbbdec0caaa04eae075e9679f", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 48, "deletions": 47, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "patch": "@@ -68,7 +68,8 @@\n #include <bits/cpp_type_traits.h>\n #include <ext/type_traits.h>\n #include <ext/numeric_traits.h>\n-#include <bits/algorithmfwd.h>\n+#include <bits/stl_pair.h>\n+#include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_iterator.h>\n #include <bits/concept_check.h>\n@@ -814,50 +815,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         { return true; }\n     };\n \n-  // XXX should these be enabled-if'd for signed/unsigned types instead?\n-  inline bool\n-  lexicographical_compare(const unsigned char* __first1,\n-\t\t\t  const unsigned char* __last1,\n-\t\t\t  const unsigned char* __first2,\n-\t\t\t  const unsigned char* __last2)\n-  {\n-    __glibcxx_requires_valid_range(__first1, __last1);\n-    __glibcxx_requires_valid_range(__first2, __last2);\n-\n-    const size_t __len1 = __last1 - __first1;\n-    const size_t __len2 = __last2 - __first2;\n-    const int __result = __builtin_memcmp(__first1, __first2,\n-\t\t\t\t\t  std::min(__len1, __len2));\n-    return __result != 0 ? __result < 0 : __len1 < __len2;\n-  }\n-\n-  inline bool\n-  lexicographical_compare(const char* __first1, const char* __last1,\n-\t\t\t  const char* __first2, const char* __last2)\n-  {\n-    __glibcxx_requires_valid_range(__first1, __last1);\n-    __glibcxx_requires_valid_range(__first2, __last2);\n-\n-    if (__gnu_cxx::__numeric_traits<char>::__is_signed)\n-      {\n-\ttypedef const signed char* value_type;\n-\tvalue_type __f1 = reinterpret_cast<value_type>(__first1);\n-\tvalue_type __l1 = reinterpret_cast<value_type>(__last1);\n-\tvalue_type __f2 = reinterpret_cast<value_type>(__first2);\n-\tvalue_type __l2 = reinterpret_cast<value_type>(__last2);\t\n-\treturn _GLIBCXX_STD_P::lexicographical_compare(__f1, __l1, __f2, __l2);\n-      }\n-    else\n-      {\n-\ttypedef const unsigned char* value_type;\n-\tvalue_type __f1 = reinterpret_cast<value_type>(__first1);\n-\tvalue_type __l1 = reinterpret_cast<value_type>(__last1);\n-\tvalue_type __f2 = reinterpret_cast<value_type>(__first2);\n-\tvalue_type __l2 = reinterpret_cast<value_type>(__last2);\t\n-\treturn _GLIBCXX_STD_P::lexicographical_compare(__f1, __l1, __f2, __l2);\n-      }\n-  }\n-\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n@@ -941,7 +898,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n     {\n       typedef typename iterator_traits<_II1>::iterator_category _Category1;\n       typedef typename iterator_traits<_II2>::iterator_category _Category2;\n-      typedef __lc_rai<_Category1, _Category2> \t__rai_type;\n+      typedef std::__lc_rai<_Category1, _Category2> \t__rai_type;\n \n       // concept requirements\n       typedef typename iterator_traits<_II1>::value_type _ValueType1;\n@@ -965,6 +922,50 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       return __first1 == __last1 && __first2 != __last2;\n     }\n \n+  // XXX should these be enabled-if'd for signed/unsigned types instead?\n+  inline bool\n+  lexicographical_compare(const unsigned char* __first1,\n+\t\t\t  const unsigned char* __last1,\n+\t\t\t  const unsigned char* __first2,\n+\t\t\t  const unsigned char* __last2)\n+  {\n+    __glibcxx_requires_valid_range(__first1, __last1);\n+    __glibcxx_requires_valid_range(__first2, __last2);\n+\n+    const size_t __len1 = __last1 - __first1;\n+    const size_t __len2 = __last2 - __first2;\n+    const int __result = __builtin_memcmp(__first1, __first2,\n+\t\t\t\t\t  std::min(__len1, __len2));\n+    return __result != 0 ? __result < 0 : __len1 < __len2;\n+  }\n+\n+  inline bool\n+  lexicographical_compare(const char* __first1, const char* __last1,\n+\t\t\t  const char* __first2, const char* __last2)\n+  {\n+    __glibcxx_requires_valid_range(__first1, __last1);\n+    __glibcxx_requires_valid_range(__first2, __last2);\n+\n+    if (__gnu_cxx::__numeric_traits<char>::__is_signed)\n+      {\n+\ttypedef const signed char* value_type;\n+\tvalue_type __f1 = reinterpret_cast<value_type>(__first1);\n+\tvalue_type __l1 = reinterpret_cast<value_type>(__last1);\n+\tvalue_type __f2 = reinterpret_cast<value_type>(__first2);\n+\tvalue_type __l2 = reinterpret_cast<value_type>(__last2);\t\n+\treturn _GLIBCXX_STD_P::lexicographical_compare(__f1, __l1, __f2, __l2);\n+      }\n+    else\n+      {\n+\ttypedef const unsigned char* value_type;\n+\tvalue_type __f1 = reinterpret_cast<value_type>(__first1);\n+\tvalue_type __l1 = reinterpret_cast<value_type>(__last1);\n+\tvalue_type __f2 = reinterpret_cast<value_type>(__first2);\n+\tvalue_type __l2 = reinterpret_cast<value_type>(__last2);\t\n+\treturn _GLIBCXX_STD_P::lexicographical_compare(__f1, __l1, __f2, __l2);\n+      }\n+  }\n+\n   /**\n    *  @brief Performs \"dictionary\" comparison on ranges.\n    *  @param  first1  An input iterator.\n@@ -984,7 +985,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n     {\n       typedef typename iterator_traits<_II1>::iterator_category _Category1;\n       typedef typename iterator_traits<_II2>::iterator_category _Category2;\n-      typedef __lc_rai<_Category1, _Category2> \t__rai_type;\n+      typedef std::__lc_rai<_Category1, _Category2> \t__rai_type;\n \n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_II1>)"}, {"sha": "bbe76e796348279e47d70ee3d6ac218a12475c17", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "patch": "@@ -487,32 +487,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  /**\n-   *  @brief  Determines whether a range is a heap.\n-   *  @param  first  Start of range.\n-   *  @param  last   End of range.\n-   *  @return  True if range is a heap, false otherwise.\n-   *  @ingroup heap\n-  */\n-  template<typename _RandomAccessIterator>\n-    inline bool\n-    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n-    { return std::is_heap_until(__first, __last) == __last; }\n-\n-  /**\n-   *  @brief  Determines whether a range is a heap using comparison functor.\n-   *  @param  first  Start of range.\n-   *  @param  last   End of range.\n-   *  @param  comp   Comparison functor to use.\n-   *  @return  True if range is a heap, false otherwise.\n-   *  @ingroup heap\n-  */\n-  template<typename _RandomAccessIterator, typename _Compare>\n-    inline bool\n-    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t    _Compare __comp)\n-    { return std::is_heap_until(__first, __last, __comp) == __last; }\n-\n   /**\n    *  @brief  Search the end of a heap.\n    *  @param  first  Start of range.\n@@ -563,6 +537,32 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t\t\t\t   __last),\n \t\t\t\t\t    __comp);\n     }\n+\n+  /**\n+   *  @brief  Determines whether a range is a heap.\n+   *  @param  first  Start of range.\n+   *  @param  last   End of range.\n+   *  @return  True if range is a heap, false otherwise.\n+   *  @ingroup heap\n+  */\n+  template<typename _RandomAccessIterator>\n+    inline bool\n+    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n+    { return std::is_heap_until(__first, __last) == __last; }\n+\n+  /**\n+   *  @brief  Determines whether a range is a heap using comparison functor.\n+   *  @param  first  Start of range.\n+   *  @param  last   End of range.\n+   *  @param  comp   Comparison functor to use.\n+   *  @return  True if range is a heap, false otherwise.\n+   *  @ingroup heap\n+  */\n+  template<typename _RandomAccessIterator, typename _Compare>\n+    inline bool\n+    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n+\t    _Compare __comp)\n+    { return std::is_heap_until(__first, __last, __comp) == __last; }\n #endif\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "8e9438d8a8d17e07fb61a0d996585811fdff223e", "filename": "libstdc++-v3/include/parallel/algobase.h", "status": "modified", "additions": 28, "deletions": 31, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h?ref=4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "patch": "@@ -42,48 +42,18 @@\n #ifndef _GLIBCXX_PARALLEL_ALGOBASE_H\n #define _GLIBCXX_PARALLEL_ALGOBASE_H 1\n \n-#include <parallel/algorithmfwd.h>\n #include <bits/stl_algobase.h>\n #include <parallel/base.h>\n #include <parallel/tags.h>\n #include <parallel/settings.h>\n #include <parallel/find.h>\n #include <parallel/find_selectors.h>\n-#include <parallel/for_each.h>\n-#include <parallel/for_each_selectors.h>\n \n namespace std\n {\n namespace __parallel\n {\n-  // Sequential fallback\n-  template<typename InputIterator1, typename InputIterator2>\n-  inline bool\n-  equal(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, \n-\t__gnu_parallel::sequential_tag)\n-  { return _GLIBCXX_STD_P::equal(begin1, end1, begin2); }\n-\n-  // Sequential fallback\n-  template<typename InputIterator1, typename InputIterator2, typename Predicate>\n-  inline bool\n-  equal(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, \n-\tPredicate pred, __gnu_parallel::sequential_tag)\n-  { return _GLIBCXX_STD_P::equal(begin1, end1, begin2, pred); }\n-\n-  // Public interface\n-  template<typename InputIterator1, typename InputIterator2>\n-  inline bool\n-  equal(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2)\n-  { return mismatch(begin1, end1, begin2).first == end1; }\n-\n-  // Public interface\n-  template<typename InputIterator1, typename InputIterator2, typename Predicate>\n-  inline bool\n-  equal(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, \n-\tPredicate pred)\n-  { return mismatch(begin1, end1, begin2, pred).first == end1; }\n-\n-  // NB: lexicographical_compare equires mismatch.\n+  // NB: equal and lexicographical_compare require mismatch.\n \n   // Sequential fallback\n   template<typename InputIterator1, typename InputIterator2>\n@@ -156,6 +126,33 @@ namespace __parallel\n \t\t\t   iterator2_category());\n   }\n \n+  // Sequential fallback\n+  template<typename InputIterator1, typename InputIterator2>\n+  inline bool\n+  equal(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, \n+\t__gnu_parallel::sequential_tag)\n+  { return _GLIBCXX_STD_P::equal(begin1, end1, begin2); }\n+\n+  // Sequential fallback\n+  template<typename InputIterator1, typename InputIterator2, typename Predicate>\n+  inline bool\n+  equal(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, \n+\tPredicate pred, __gnu_parallel::sequential_tag)\n+  { return _GLIBCXX_STD_P::equal(begin1, end1, begin2, pred); }\n+\n+  // Public interface\n+  template<typename InputIterator1, typename InputIterator2>\n+  inline bool\n+  equal(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2)\n+  { return mismatch(begin1, end1, begin2).first == end1; }\n+\n+  // Public interface\n+  template<typename InputIterator1, typename InputIterator2, typename Predicate>\n+  inline bool\n+  equal(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, \n+\tPredicate pred)\n+  { return mismatch(begin1, end1, begin2, pred).first == end1; }\n+\n   // Sequential fallback\n   template<typename InputIterator1, typename InputIterator2>\n   inline bool"}, {"sha": "2b8631db73e720557c293a892972078998370306", "filename": "libstdc++-v3/include/parallel/partition.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h?ref=4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "patch": "@@ -41,6 +41,7 @@\n \n #include <parallel/basic_iterator.h>\n #include <parallel/sort.h>\n+#include <parallel/random_number.h>\n #include <bits/stl_algo.h>\n #include <parallel/parallel.h>\n "}, {"sha": "cec3ae2f3f9ca9f3ddc46db85255804489d7eeae", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=4f39bf5c6baa0279e1c763b6a9e30fb0bb4ef2a7", "patch": "@@ -35,6 +35,7 @@\n #include <fstream>\n #include <iostream>\n #include <vector>\n+#include <algorithm>\n \n using namespace std;\n "}]}