{"sha": "bae66e0f04323ba9d5daf60fcb997de925100e3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlNjZlMGYwNDMyM2JhOWQ1ZGFmNjBmY2I5OTdkZTkyNTEwMGUzZQ==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-06-10T06:22:50Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-07-13T15:38:07Z"}, "message": "Fortran  : accepts pointer initialization of DT dummy args PR45337\n\nInitialisation of a variable results in an implicit save attribute\nbeing added to the variable.  The save attribute is not allowed for\nvariables with the dummy attribute set.  Initialisation should be\nrejected for dummy variables.\n\n2020-07-13  Mark Eggleston  <markeggleston@gcc.gnu.org>\n\ngcc/fortran/\n\n\tPR fortran/45337\n\t* resolve.c (resolve_fl_variable): Remove type and intent\n\tchecks from the check for dummy.\n\n2020-07-13  Mark Eggleston  <markeggleston@gcc.gnu.org>\n\ngcc/testsuite/\n\n\tPR fortran/45337\n\t* gfortran.dg/pr45337_1.f90: New test.\n\t* gfortran.dg/pr45337_2.f90: New test.", "tree": {"sha": "b85b125c62a1c0023f5ebbcfafc9c23f8dad4160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b85b125c62a1c0023f5ebbcfafc9c23f8dad4160"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae66e0f04323ba9d5daf60fcb997de925100e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae66e0f04323ba9d5daf60fcb997de925100e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae66e0f04323ba9d5daf60fcb997de925100e3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae66e0f04323ba9d5daf60fcb997de925100e3e/comments", "author": null, "committer": null, "parents": [{"sha": "4fd124a23664c712f1bb1a7e91fa23fe83d72c0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd124a23664c712f1bb1a7e91fa23fe83d72c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd124a23664c712f1bb1a7e91fa23fe83d72c0b"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "2751c0ccf62f1a799648a509300cb954b689a2f5", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae66e0f04323ba9d5daf60fcb997de925100e3e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae66e0f04323ba9d5daf60fcb997de925100e3e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=bae66e0f04323ba9d5daf60fcb997de925100e3e", "patch": "@@ -12927,8 +12927,7 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n       else if (sym->attr.external)\n \tgfc_error (\"External %qs at %L cannot have an initializer\",\n \t\t   sym->name, &sym->declared_at);\n-      else if (sym->attr.dummy\n-\t&& !(sym->ts.type == BT_DERIVED && sym->attr.intent == INTENT_OUT))\n+      else if (sym->attr.dummy)\n \tgfc_error (\"Dummy %qs at %L cannot have an initializer\",\n \t\t   sym->name, &sym->declared_at);\n       else if (sym->attr.intrinsic)"}, {"sha": "2bb8ff244cc8b9b8290251a2638f06b6eb7c1906", "filename": "gcc/testsuite/gfortran.dg/pr45337_1.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae66e0f04323ba9d5daf60fcb997de925100e3e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr45337_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae66e0f04323ba9d5daf60fcb997de925100e3e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr45337_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr45337_1.f90?ref=bae66e0f04323ba9d5daf60fcb997de925100e3e", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+\n+module ptrmod\n+contains\n+subroutine lengthX(x, i) ! { dg-error \"Dummy 'x' at .1. cannot have an initializer\" }\n+   implicit none\n+   real, pointer, intent(out) :: x(:)=>null()\n+   integer :: i\n+   x=>null()\n+   allocate(x(i))\n+   x=i\n+end subroutine\n+end module\n+"}, {"sha": "ca7a6f53ad654b420c7cb2515cba3f483b6ade6e", "filename": "gcc/testsuite/gfortran.dg/pr45337_2.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae66e0f04323ba9d5daf60fcb997de925100e3e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr45337_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae66e0f04323ba9d5daf60fcb997de925100e3e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr45337_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr45337_2.f90?ref=bae66e0f04323ba9d5daf60fcb997de925100e3e", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+\n+type t\n+end type t\n+type t2\n+  integer :: j = 7\n+end type t2\n+contains\n+  subroutine x(a, b, c)\n+    intent(out) :: a, b, c\n+    type(t) :: a = t()\n+    type(t2) :: b = t2()\n+    type(t2) :: c\n+  end subroutine x\n+end\n+\n+! { dg-error \"Dummy .a. at .1. cannot have an initializer\" \" \" { target *-*-* } 9 }\n+! { dg-error \"Dummy .b. at .1. cannot have an initializer\" \" \" { target *-*-* } 9 }"}]}