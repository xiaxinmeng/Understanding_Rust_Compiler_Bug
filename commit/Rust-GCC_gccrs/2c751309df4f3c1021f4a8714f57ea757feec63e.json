{"sha": "2c751309df4f3c1021f4a8714f57ea757feec63e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM3NTEzMDlkZjRmM2MxMDIxZjRhODcxNGY1N2VhNzU3ZmVlYzYzZQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2007-05-31T20:58:29Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2007-05-31T20:58:29Z"}, "message": "in gcc/ 2007-05-31 Daniel Berlin <dberlin@dberlin.org>\n\nin gcc/\n2007-05-31  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* c-typeck.c (build_indirect_ref): Include type in error message.\n\t(build_binary_op): Pass types to binary_op_error.\n\t* c-common.c (binary_op_error): Take two type arguments, print out\n\ttypes with error.\n\t* c-common.h (binary_op_error): Update prototype.\nIn gcc/cp\n2007-05-31  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* typeck.c (build_binary_op): Include types in error.\n\nFrom-SVN: r125239", "tree": {"sha": "a7eb204beebfc59d90675d0ed35447f9467c1b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7eb204beebfc59d90675d0ed35447f9467c1b56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c751309df4f3c1021f4a8714f57ea757feec63e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c751309df4f3c1021f4a8714f57ea757feec63e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c751309df4f3c1021f4a8714f57ea757feec63e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c751309df4f3c1021f4a8714f57ea757feec63e/comments", "author": null, "committer": null, "parents": [{"sha": "6847c43d7348b8a1eb39ed9501666bb905b89948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6847c43d7348b8a1eb39ed9501666bb905b89948", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6847c43d7348b8a1eb39ed9501666bb905b89948"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "404db9b75c15b06c8656a0b89bde690d013d7b6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c751309df4f3c1021f4a8714f57ea757feec63e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c751309df4f3c1021f4a8714f57ea757feec63e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c751309df4f3c1021f4a8714f57ea757feec63e", "patch": "@@ -1,3 +1,11 @@\n+2007-05-31  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* c-typeck.c (build_indirect_ref): Include type in error message.\n+\t(build_binary_op): Pass types to binary_op_error.\n+\t* c-common.c (binary_op_error): Take two type arguments, print out\n+\ttypes with error.\n+\t* c-common.h (binary_op_error): Update prototype.\n+\n 2007-05-31  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c: Correct coments on -mno-sse4.\n@@ -75,6 +83,7 @@\n \t* gcc.c (main): Don't consider linker options when issuing the\n \twarning about a linker input file not being used.\n \n+>>>>>>> .r125234\n 2007-05-30  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* tree-vrp.c (compare_names): Initialize sop."}, {"sha": "2d893ff1c78fea51d119230972eecb6493f57ccd", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c751309df4f3c1021f4a8714f57ea757feec63e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c751309df4f3c1021f4a8714f57ea757feec63e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2c751309df4f3c1021f4a8714f57ea757feec63e", "patch": "@@ -2233,10 +2233,10 @@ min_precision (tree value, int unsignedp)\n }\n \f\n /* Print an error message for invalid operands to arith operation\n-   CODE.  */\n+   CODE with TYPE0 for operand 0, and TYPE1 for operand 1.  */\n \n void\n-binary_op_error (enum tree_code code)\n+binary_op_error (enum tree_code code, tree type0, tree type1)\n {\n   const char *opname;\n \n@@ -2287,7 +2287,8 @@ binary_op_error (enum tree_code code)\n     default:\n       gcc_unreachable ();\n     }\n-  error (\"invalid operands to binary %s\", opname);\n+  error (\"invalid operands to binary %s (have %qT and %qT)\", opname,\n+\t type0, type1);\n }\n \f\n /* Subroutine of build_binary_op, used for comparison operations."}, {"sha": "c60ce562a3829c5d88c59bd6fb54847bebfa0b68", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c751309df4f3c1021f4a8714f57ea757feec63e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c751309df4f3c1021f4a8714f57ea757feec63e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=2c751309df4f3c1021f4a8714f57ea757feec63e", "patch": "@@ -677,7 +677,7 @@ extern tree c_sizeof_or_alignof_type (tree, bool, int);\n extern tree c_alignof_expr (tree);\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n-extern void binary_op_error (enum tree_code);\n+extern void binary_op_error (enum tree_code, tree, tree);\n extern tree fix_string_type (tree);\n struct varray_head_tag;\n extern void constant_expression_warning (tree);"}, {"sha": "121febaaa1b0bfa8360dff74ee0bfa82354be13b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c751309df4f3c1021f4a8714f57ea757feec63e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c751309df4f3c1021f4a8714f57ea757feec63e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=2c751309df4f3c1021f4a8714f57ea757feec63e", "patch": "@@ -1923,7 +1923,7 @@ build_indirect_ref (tree ptr, const char *errorstring)\n \t}\n     }\n   else if (TREE_CODE (pointer) != ERROR_MARK)\n-    error (\"invalid type argument of %qs\", errorstring);\n+    error (\"invalid type argument of %qs (have %qT)\", errorstring, type);\n   return error_mark_node;\n }\n \n@@ -8138,7 +8138,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t  || !same_scalar_type_ignoring_signedness (TREE_TYPE (type0),\n \t\t\t\t\t\t    TREE_TYPE (type1))))\n     {\n-      binary_op_error (code);\n+      binary_op_error (code, type0, type1);\n       return error_mark_node;\n     }\n \n@@ -8438,7 +8438,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \n   if (!result_type)\n     {\n-      binary_op_error (code);\n+      binary_op_error (code, TREE_TYPE (op0), TREE_TYPE (op1));\n       return error_mark_node;\n     }\n "}, {"sha": "ea352c9138312929bba21d4d7487a6eb640a125d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c751309df4f3c1021f4a8714f57ea757feec63e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c751309df4f3c1021f4a8714f57ea757feec63e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2c751309df4f3c1021f4a8714f57ea757feec63e", "patch": "@@ -1,3 +1,7 @@\n+2007-05-31  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* typeck.c (build_binary_op): Include types in error.\n+\n 2007-05-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/31806"}, {"sha": "4219e69433e17b2dd10f3bfa92ecc6d3288657b3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c751309df4f3c1021f4a8714f57ea757feec63e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c751309df4f3c1021f4a8714f57ea757feec63e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2c751309df4f3c1021f4a8714f57ea757feec63e", "patch": "@@ -3556,7 +3556,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t      || !same_scalar_type_ignoring_signedness (TREE_TYPE (type0),\n \t\t\t\t\t\t\tTREE_TYPE (type1)))\n \t    {\n-\t      binary_op_error (code);\n+\t      binary_op_error (code, type0, type1);\n \t      return error_mark_node;\n \t    }\n \t  arithmetic_types_p = 1;"}]}