{"sha": "94829f87ca78fa846fdf1140c4a2af802488fb8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4MjlmODdjYTc4ZmE4NDZmZGYxMTQwYzRhMmFmODAyNDg4ZmI4Zg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-09-30T19:16:29Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-09-30T19:16:29Z"}, "message": "nvptx.c (nvptx_goacc_validate_dims): New.\n\n\t* config/nvptx/nvptx.c (nvptx_goacc_validate_dims): New.\n\t(TARGET_GOACC_VALIDATE_DIMS): Override.\n\t* target.def (TARGET_GOACC): New target hook prefix.\n\t(validate_dims): New hook.\n\t* targhooks.h (default_goacc_validate_dims): New.\n\t* omp-low.c (oacc_validate_dims): New.\n\t(execute_oacc_device_lower): New.\n\t(default_goacc_validate_dims): New.\n\t(pass_data_oacc_device_lower): New.\n\t(pass_oacc_device_lower): New pass.\n\t(make_pass_oacc_device_lower): New.\n\t* tree-pass.h (make_pass_oacc_device_lower): Declare.\n\t* passes.def (pass_oacc_device_lower): Add it.\n\t* doc/tm.texi: Rebuilt.\n\t* doc/tm.texi.in (TARGET_GOACC_VALIDATE_DIMS): Add hook.\n\t* doc/invoke.texi (oaccdevlow): Document tree dump flag.\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\n\nFrom-SVN: r228304", "tree": {"sha": "f710b1d5f6f8b031a6772ee5bbe8b6b99a692f7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f710b1d5f6f8b031a6772ee5bbe8b6b99a692f7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94829f87ca78fa846fdf1140c4a2af802488fb8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94829f87ca78fa846fdf1140c4a2af802488fb8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94829f87ca78fa846fdf1140c4a2af802488fb8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94829f87ca78fa846fdf1140c4a2af802488fb8f/comments", "author": null, "committer": null, "parents": [{"sha": "9a9fe2b4d216494a9992a354c337c8b2279c43b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9fe2b4d216494a9992a354c337c8b2279c43b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a9fe2b4d216494a9992a354c337c8b2279c43b8"}], "stats": {"total": 226, "additions": 226, "deletions": 0}, "files": [{"sha": "41c3af302f86bb126171274b4a2dfbbc7f3c6637", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94829f87ca78fa846fdf1140c4a2af802488fb8f", "patch": "@@ -1,3 +1,23 @@\n+2015-09-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* config/nvptx/nvptx.c (nvptx_goacc_validate_dims): New.\n+\t(TARGET_GOACC_VALIDATE_DIMS): Override.\n+\t* target.def (TARGET_GOACC): New target hook prefix.\n+\t(validate_dims): New hook.\n+\t* targhooks.h (default_goacc_validate_dims): New.\n+\t* omp-low.c (oacc_validate_dims): New.\n+\t(execute_oacc_device_lower): New.\n+\t(default_goacc_validate_dims): New.\n+\t(pass_data_oacc_device_lower): New.\n+\t(pass_oacc_device_lower): New pass.\n+\t(make_pass_oacc_device_lower): New.\n+\t* tree-pass.h (make_pass_oacc_device_lower): Declare.\n+\t* passes.def (pass_oacc_device_lower): Add it.\n+\t* doc/tm.texi: Rebuilt.\n+\t* doc/tm.texi.in (TARGET_GOACC_VALIDATE_DIMS): Add hook.\n+\t* doc/invoke.texi (oaccdevlow): Document tree dump flag.\n+\n 2015-09-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR rtl-optimization/67037"}, {"sha": "a7fdd9221c0cd3c5ad005a8862152a5d786fc117", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=94829f87ca78fa846fdf1140c4a2af802488fb8f", "patch": "@@ -2141,6 +2141,22 @@ nvptx_file_end (void)\n   fputs (func_decls.str().c_str(), asm_out_file);\n }\n \f\n+/* Validate compute dimensions of an OpenACC offload or routine, fill\n+   in non-unity defaults.  FN_LEVEL indicates the level at which a\n+   routine might spawn a loop.  It is negative for non-routines.  */\n+\n+static bool\n+nvptx_goacc_validate_dims (tree ARG_UNUSED (decl), int *ARG_UNUSED (dims),\n+\t\t\t   int ARG_UNUSED (fn_level))\n+{\n+  bool changed = false;\n+\n+  /* TODO: Leave dimensions unaltered.  Partitioned execution needs\n+     porting before filtering dimensions makes sense.  */\n+\n+  return changed;\n+}\n+\f\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE nvptx_option_override\n \n@@ -2227,6 +2243,9 @@ nvptx_file_end (void)\n #undef TARGET_VECTOR_ALIGNMENT\n #define TARGET_VECTOR_ALIGNMENT nvptx_vector_alignment\n \n+#undef TARGET_GOACC_VALIDATE_DIMS\n+#define TARGET_GOACC_VALIDATE_DIMS nvptx_goacc_validate_dims\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-nvptx.h\""}, {"sha": "c19be78943ae2192da19f78787bf0c708d91b638", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=94829f87ca78fa846fdf1140c4a2af802488fb8f", "patch": "@@ -7247,6 +7247,11 @@ is made by appending @file{.slp} to the source file name.\n Dump each function after Value Range Propagation (VRP).  The file name\n is made by appending @file{.vrp} to the source file name.\n \n+@item oaccdevlow\n+@opindex fdump-tree-oaccdevlow\n+Dump each function after applying device-specific OpenACC transformations.\n+The file name is made by appending @file{.oaccdevlow} to the source file name.\n+\n @item all\n @opindex fdump-tree-all\n Enable all the available tree dumps with the flags provided in this option."}, {"sha": "610d6c1c7b5ee8fa7706b50ce54e7aee429194a4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=94829f87ca78fa846fdf1140c4a2af802488fb8f", "patch": "@@ -5748,6 +5748,18 @@ usable.  In that case, the smaller the number is, the more desirable it is\n to use it.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_GOACC_VALIDATE_DIMS (tree @var{decl}, int @var{dims[]}, int @var{fn_level})\n+This hook should check the launch dimensions provided for an OpenACC\n+compute region, or routine.  Defaulted values are represented as -1\n+and non-constant values as 0. The @var{fn_level} is negative for the\n+function corresponding to the compute region.  For a routine is is the\n+outermost level at which partitioned execution may be spawned.  It\n+should fill in anything that needs to default to non-unity and verify\n+non-defaults.  Diagnostics should be issued as appropriate.  Return\n+true, if changes have been made.  You must override this hook to\n+provide dimensions larger than 1.\n+@end deftypefn\n+\n @node Anchored Addresses\n @section Anchored Addresses\n @cindex anchored addresses"}, {"sha": "2ee0294c25d3e747fc78718a1c855f84f8d392bc", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=94829f87ca78fa846fdf1140c4a2af802488fb8f", "patch": "@@ -4247,6 +4247,8 @@ address;  but often a machine-dependent strategy can generate better code.\n \n @hook TARGET_SIMD_CLONE_USABLE\n \n+@hook TARGET_GOACC_VALIDATE_DIMS\n+\n @node Anchored Addresses\n @section Anchored Addresses\n @cindex anchored addresses"}, {"sha": "cdcf9d6d9c8477cef406a5c70c1e07c867f93ec9", "filename": "gcc/omp-low.c", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=94829f87ca78fa846fdf1140c4a2af802488fb8f", "patch": "@@ -14020,4 +14020,146 @@ omp_finish_file (void)\n     }\n }\n \n+/* Validate and update the dimensions for offloaded FN.  ATTRS is the\n+   raw attribute.  DIMS is an array of dimensions, which is returned.\n+   Returns the function level dimensionality --  the level at which an\n+   offload routine wishes to partition a loop.  */\n+\n+static int\n+oacc_validate_dims (tree fn, tree attrs, int *dims)\n+{\n+  tree purpose[GOMP_DIM_MAX];\n+  unsigned ix;\n+  tree pos = TREE_VALUE (attrs);\n+  int fn_level = -1;\n+\n+  /* Make sure the attribute creator attached the dimension\n+     information.  */\n+  gcc_assert (pos);\n+\n+  for (ix = 0; ix != GOMP_DIM_MAX; ix++)\n+    {\n+      purpose[ix] = TREE_PURPOSE (pos);\n+\n+      if (purpose[ix])\n+\t{\n+\t  if (integer_zerop (purpose[ix]))\n+\t    fn_level = ix + 1;\n+\t  else if (fn_level < 0)\n+\t    fn_level = ix;\n+\t}\n+\n+      tree val = TREE_VALUE (pos);\n+      dims[ix] = val ? TREE_INT_CST_LOW (val) : -1;\n+      pos = TREE_CHAIN (pos);\n+    }\n+\n+  bool changed = targetm.goacc.validate_dims (fn, dims, fn_level);\n+\n+  /* Default anything left to 1.  */\n+  for (ix = 0; ix != GOMP_DIM_MAX; ix++)\n+    if (dims[ix] < 0)\n+      {\n+\tdims[ix] = 1;\n+\tchanged = true;\n+      }\n+\n+  if (changed)\n+    {\n+      /* Replace the attribute with new values.  */\n+      pos = NULL_TREE;\n+      for (ix = GOMP_DIM_MAX; ix--;)\n+\tpos = tree_cons (purpose[ix],\n+\t\t\t build_int_cst (integer_type_node, dims[ix]),\n+\t\t\t pos);\n+      replace_oacc_fn_attrib (fn, pos);\n+    }\n+\n+  return fn_level;\n+}\n+\n+/* Main entry point for oacc transformations which run on the device\n+   compiler after LTO, so we know what the target device is at this\n+   point (including the host fallback).  */\n+\n+static unsigned int\n+execute_oacc_device_lower ()\n+{\n+  tree attrs = get_oacc_fn_attrib (current_function_decl);\n+  int dims[GOMP_DIM_MAX];\n+  \n+  if (!attrs)\n+    /* Not an offloaded function.  */\n+    return 0;\n+\n+  oacc_validate_dims (current_function_decl, attrs, dims);\n+  \n+  return 0;\n+}\n+\n+/* Default launch dimension validator.  Force everything to 1.  A\n+   backend that wants to provide larger dimensions must override this\n+   hook.  */\n+\n+bool\n+default_goacc_validate_dims (tree ARG_UNUSED (decl), int *dims,\n+\t\t\t     int ARG_UNUSED (fn_level))\n+{\n+  bool changed = false;\n+\n+  for (unsigned ix = 0; ix != GOMP_DIM_MAX; ix++)\n+    {\n+      if (dims[ix] != 1)\n+\t{\n+\t  dims[ix] = 1;\n+\t  changed = true;\n+\t}\n+    }\n+\n+  return changed;\n+}\n+\n+namespace {\n+\n+const pass_data pass_data_oacc_device_lower =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"oaccdevlow\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  PROP_cfg, /* properties_required */\n+  0 /* Possibly PROP_gimple_eomp.  */, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  TODO_update_ssa | TODO_cleanup_cfg, /* todo_flags_finish */\n+};\n+\n+class pass_oacc_device_lower : public gimple_opt_pass\n+{\n+public:\n+  pass_oacc_device_lower (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_oacc_device_lower, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual unsigned int execute (function *)\n+    {\n+      bool gate = (flag_openacc != 0 && !seen_error ());\n+\n+      if (!gate)\n+\treturn 0;\n+\n+      return execute_oacc_device_lower ();\n+    }\n+\n+}; // class pass_oacc_transform\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_oacc_device_lower (gcc::context *ctxt)\n+{\n+  return new pass_oacc_device_lower (ctxt);\n+}\n+\n #include \"gt-omp-low.h\""}, {"sha": "28dea9e4b10607162795793b882c3fbcd7d8a067", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=94829f87ca78fa846fdf1140c4a2af802488fb8f", "patch": "@@ -148,6 +148,7 @@ along with GCC; see the file COPYING3.  If not see\n   INSERT_PASSES_AFTER (all_passes)\n   NEXT_PASS (pass_fixup_cfg);\n   NEXT_PASS (pass_lower_eh_dispatch);\n+  NEXT_PASS (pass_oacc_device_lower);\n   NEXT_PASS (pass_all_optimizations);\n   PUSH_INSERT_PASSES_WITHIN (pass_all_optimizations)\n       NEXT_PASS (pass_remove_cgraph_callee_edges);"}, {"sha": "d29aad5c3f89805c8ee882934b5645c12621fce0", "filename": "gcc/target.def", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=94829f87ca78fa846fdf1140c4a2af802488fb8f", "patch": "@@ -1639,6 +1639,27 @@ int, (struct cgraph_node *), NULL)\n \n HOOK_VECTOR_END (simd_clone)\n \n+/* Functions relating to openacc.  */\n+#undef HOOK_PREFIX\n+#define HOOK_PREFIX \"TARGET_GOACC_\"\n+HOOK_VECTOR (TARGET_GOACC, goacc)\n+\n+DEFHOOK\n+(validate_dims,\n+\"This hook should check the launch dimensions provided for an OpenACC\\n\\\n+compute region, or routine.  Defaulted values are represented as -1\\n\\\n+and non-constant values as 0. The @var{fn_level} is negative for the\\n\\\n+function corresponding to the compute region.  For a routine is is the\\n\\\n+outermost level at which partitioned execution may be spawned.  It\\n\\\n+should fill in anything that needs to default to non-unity and verify\\n\\\n+non-defaults.  Diagnostics should be issued as appropriate.  Return\\n\\\n+true, if changes have been made.  You must override this hook to\\n\\\n+provide dimensions larger than 1.\",\n+bool, (tree decl, int dims[], int fn_level),\n+default_goacc_validate_dims)\n+\n+HOOK_VECTOR_END (goacc)\n+\n /* Functions relating to vectorization.  */\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_VECTORIZE_\""}, {"sha": "77c284a1b56107cfa67c82bbab3344be072310cb", "filename": "gcc/targhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=94829f87ca78fa846fdf1140c4a2af802488fb8f", "patch": "@@ -107,6 +107,9 @@ extern unsigned default_add_stmt_cost (void *, int, enum vect_cost_for_stmt,\n extern void default_finish_cost (void *, unsigned *, unsigned *, unsigned *);\n extern void default_destroy_cost_data (void *);\n \n+/* OpenACC hooks.  */\n+extern bool default_goacc_validate_dims (tree, int [], int);\n+\n /* These are here, and not in hooks.[ch], because not all users of\n    hooks.h include tm.h, and thus we don't have CUMULATIVE_ARGS.  */\n "}, {"sha": "91f63a8d4a64341528139168ffc7fb08a09c1bcc", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94829f87ca78fa846fdf1140c4a2af802488fb8f/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=94829f87ca78fa846fdf1140c4a2af802488fb8f", "patch": "@@ -406,6 +406,7 @@ extern gimple_opt_pass *make_pass_lower_omp (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_diagnose_omp_blocks (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_expand_omp (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_expand_omp_ssa (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_oacc_device_lower (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_object_sizes (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_strlen (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_fold_builtins (gcc::context *ctxt);"}]}