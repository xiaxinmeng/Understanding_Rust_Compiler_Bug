{"sha": "ec494945a91a617332b243b0eaaa5d6a4653e702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM0OTQ5NDVhOTFhNjE3MzMyYjI0M2IwZWFhYTVkNmE0NjUzZTcwMg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-11-09T21:10:18Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-11-09T21:10:18Z"}, "message": "2015-11-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_algo.h\n\t(partial_sort_copy): Instantiate std::iterator_traits only if concept\n\tchecks.\n\t(lower_bound): Likewise.\n\t(upper_bound): Likewise.\n\t(equal_range): Likewise.\n\t(binary_search): Likewise.\n\t* include/bits/stl_heap.h (pop_heap): Likewise.\n\nFrom-SVN: r230052", "tree": {"sha": "f75fb59fbc5e0210e2f00f4a59409ecd1063863a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f75fb59fbc5e0210e2f00f4a59409ecd1063863a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec494945a91a617332b243b0eaaa5d6a4653e702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec494945a91a617332b243b0eaaa5d6a4653e702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec494945a91a617332b243b0eaaa5d6a4653e702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec494945a91a617332b243b0eaaa5d6a4653e702/comments", "author": null, "committer": null, "parents": [{"sha": "639fa8a31905dac4aa613dc6704e6b004c887793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639fa8a31905dac4aa613dc6704e6b004c887793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/639fa8a31905dac4aa613dc6704e6b004c887793"}], "stats": {"total": 130, "additions": 61, "deletions": 69}, "files": [{"sha": "36e787a8bdd017f17888eca5e9276fbb19c093dd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec494945a91a617332b243b0eaaa5d6a4653e702/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec494945a91a617332b243b0eaaa5d6a4653e702/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ec494945a91a617332b243b0eaaa5d6a4653e702", "patch": "@@ -1,3 +1,14 @@\n+2015-11-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_algo.h\n+\t(partial_sort_copy): Instantiate std::iterator_traits only if concept\n+\tchecks.\n+\t(lower_bound): Likewise.\n+\t(upper_bound): Likewise.\n+\t(equal_range): Likewise.\n+\t(binary_search): Likewise.\n+\t* include/bits/stl_heap.h (pop_heap): Likewise.\n+\n 2015-11-06  Kai Tietz  <ktietz70@googlemail.com>\n \n \t* testsuite/26_numerics/complex/requirements/constexpr.cc"}, {"sha": "e0c51dfa90bfd1a24a147d2f72856471d7afe295", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 48, "deletions": 65, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec494945a91a617332b243b0eaaa5d6a4653e702/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec494945a91a617332b243b0eaaa5d6a4653e702/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=ec494945a91a617332b243b0eaaa5d6a4653e702", "patch": "@@ -56,7 +56,7 @@\n #ifndef _STL_ALGO_H\n #define _STL_ALGO_H 1\n \n-#include <cstdlib>             // for rand\n+#include <cstdlib>\t     // for rand\n #include <bits/algorithmfwd.h>\n #include <bits/stl_heap.h>\n #include <bits/stl_tempbuf.h>  // for _Temporary_buffer\n@@ -306,15 +306,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  while (__unary_pred(--__backTrack))\n \t    {\n \t      if (--__remainder == 0)\n-\t        return (__first - __count); // Success\n+\t\treturn (__first - __count); // Success\n \t    }\n \t  __remainder = __count + 1 - (__first - __backTrack);\n \t}\n       return __last; // Failure\n     }\n \n   template<typename _ForwardIterator, typename _Integer,\n-           typename _UnaryPredicate>\n+\t   typename _UnaryPredicate>\n     _ForwardIterator\n     __search_n(_ForwardIterator __first, _ForwardIterator __last,\n \t       _Integer __count,\n@@ -859,15 +859,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       __first = std::__find_if(__first, __last, __pred);\n       if (__first == __last)\n-        return __first;\n+\treturn __first;\n       _ForwardIterator __result = __first;\n       ++__first;\n       for (; __first != __last; ++__first)\n-        if (!__pred(__first))\n-          {\n-            *__result = _GLIBCXX_MOVE(*__first);\n-            ++__result;\n-          }\n+\tif (!__pred(__first))\n+\t  {\n+\t    *__result = _GLIBCXX_MOVE(*__first);\n+\t    ++__result;\n+\t  }\n       return __result;\n     }\n \n@@ -1020,7 +1020,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _ForwardIterator, typename _BinaryPredicate>\n     inline _ForwardIterator\n     unique(_ForwardIterator __first, _ForwardIterator __last,\n-           _BinaryPredicate __binary_pred)\n+\t   _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<\n@@ -1466,7 +1466,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _ForwardIterator, typename _OutputIterator>\n     inline _OutputIterator\n     rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,\n-                _ForwardIterator __last, _OutputIterator __result)\n+\t\t_ForwardIterator __last, _OutputIterator __result)\n     {\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n@@ -1476,7 +1476,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_valid_range(__middle, __last);\n \n       return std::copy(__first, __middle,\n-                       std::copy(__middle, __last, __result));\n+\t\t       std::copy(__middle, __last, __result));\n     }\n \n   /// This is a helper function...\n@@ -1735,19 +1735,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _RandomAccessIterator __result_first,\n \t\t      _RandomAccessIterator __result_last)\n     {\n+#ifdef _GLIBCXX_CONCEPT_CHECKS\n       typedef typename iterator_traits<_InputIterator>::value_type\n \t_InputValueType;\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type\n \t_OutputValueType;\n-      typedef typename iterator_traits<_RandomAccessIterator>::difference_type\n-\t_DistanceType;\n+#endif\n \n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,\n \t\t\t\t  _OutputValueType>)\n       __glibcxx_function_requires(_LessThanOpConcept<_InputValueType,\n-\t\t\t\t                     _OutputValueType>)\n+\t\t\t\t\t\t     _OutputValueType>)\n       __glibcxx_function_requires(_LessThanComparableConcept<_OutputValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_irreflexive(__first, __last);\n@@ -1786,12 +1786,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _RandomAccessIterator __result_last,\n \t\t      _Compare __comp)\n     {\n+#ifdef _GLIBCXX_CONCEPT_CHECKS\n       typedef typename iterator_traits<_InputIterator>::value_type\n \t_InputValueType;\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type\n \t_OutputValueType;\n-      typedef typename iterator_traits<_RandomAccessIterator>::difference_type\n-\t_DistanceType;\n+#endif\n \n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n@@ -2020,13 +2020,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val, _Compare __comp)\n     {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type\n-\t_ValueType;\n-\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t\t\t\t  _ValueType, _Tp>)\n+\ttypename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n       __glibcxx_requires_partitioned_lower_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n       __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n@@ -2078,12 +2075,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     upper_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val)\n     {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type\n-\t_ValueType;\n-\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n+      __glibcxx_function_requires(_LessThanOpConcept<\n+\t_Tp, typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_partitioned_upper(__first, __last, __val);\n       __glibcxx_requires_irreflexive2(__first, __last);\n \n@@ -2111,13 +2106,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     upper_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val, _Compare __comp)\n     {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type\n-\t_ValueType;\n-\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t\t\t\t  _Tp, _ValueType>)\n+\t_Tp, typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_partitioned_upper_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n       __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n@@ -2186,13 +2178,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     equal_range(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val)\n     {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type\n-\t_ValueType;\n-\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)\n-      __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n+      __glibcxx_function_requires(_LessThanOpConcept<\n+\ttypename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n+      __glibcxx_function_requires(_LessThanOpConcept<\n+\t_Tp, typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_partitioned_lower(__first, __last, __val);\n       __glibcxx_requires_partitioned_upper(__first, __last, __val);\n       __glibcxx_requires_irreflexive2(__first, __last);\n@@ -2224,15 +2215,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     equal_range(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val, _Compare __comp)\n     {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type\n-\t_ValueType;\n-\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t\t\t\t  _ValueType, _Tp>)\n+\ttypename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t\t\t\t  _Tp, _ValueType>)\n+\t_Tp, typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_partitioned_lower_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n       __glibcxx_requires_partitioned_upper_pred(__first, __last,\n@@ -2259,14 +2247,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _ForwardIterator, typename _Tp>\n     bool\n     binary_search(_ForwardIterator __first, _ForwardIterator __last,\n-                  const _Tp& __val)\n+\t\t  const _Tp& __val)\n     {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type\n-\t_ValueType;\n-\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n+      __glibcxx_function_requires(_LessThanOpConcept<\n+\t_Tp, typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_partitioned_lower(__first, __last, __val);\n       __glibcxx_requires_partitioned_upper(__first, __last, __val);\n       __glibcxx_requires_irreflexive2(__first, __last);\n@@ -2295,15 +2281,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _ForwardIterator, typename _Tp, typename _Compare>\n     bool\n     binary_search(_ForwardIterator __first, _ForwardIterator __last,\n-                  const _Tp& __val, _Compare __comp)\n+\t\t  const _Tp& __val, _Compare __comp)\n     {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type\n-\t_ValueType;\n-\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t\t\t\t  _Tp, _ValueType>)\n+\t_Tp, typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_partitioned_lower_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n       __glibcxx_requires_partitioned_upper_pred(__first, __last,\n@@ -2434,7 +2417,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Pointer, typename _Compare>\n     void\n     __merge_adaptive(_BidirectionalIterator __first,\n-                     _BidirectionalIterator __middle,\n+\t\t     _BidirectionalIterator __middle,\n \t\t     _BidirectionalIterator __last,\n \t\t     _Distance __len1, _Distance __len2,\n \t\t     _Pointer __buffer, _Distance __buffer_size,\n@@ -2495,7 +2478,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Compare>\n     void\n     __merge_without_buffer(_BidirectionalIterator __first,\n-                           _BidirectionalIterator __middle,\n+\t\t\t   _BidirectionalIterator __middle,\n \t\t\t   _BidirectionalIterator __last,\n \t\t\t   _Distance __len1, _Distance __len2,\n \t\t\t   _Compare __comp)\n@@ -2550,9 +2533,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    _Compare __comp)\n     {\n       typedef typename iterator_traits<_BidirectionalIterator>::value_type\n-          _ValueType;\n+\t  _ValueType;\n       typedef typename iterator_traits<_BidirectionalIterator>::difference_type\n-          _DistanceType;\n+\t  _DistanceType;\n \n       if (__first == __middle || __middle == __last)\n \treturn;\n@@ -2725,7 +2708,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     __merge_sort_with_buffer(_RandomAccessIterator __first,\n \t\t\t     _RandomAccessIterator __last,\n-                             _Pointer __buffer, _Compare __comp)\n+\t\t\t     _Pointer __buffer, _Compare __comp)\n     {\n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type\n \t_Distance;\n@@ -2752,8 +2735,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     __stable_sort_adaptive(_RandomAccessIterator __first,\n \t\t\t   _RandomAccessIterator __last,\n-                           _Pointer __buffer, _Distance __buffer_size,\n-                           _Compare __comp)\n+\t\t\t   _Pointer __buffer, _Distance __buffer_size,\n+\t\t\t   _Compare __comp)\n     {\n       const _Distance __len = (__last - __first + 1) / 2;\n       const _RandomAccessIterator __middle = __first + __len;\n@@ -3326,7 +3309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n \n       return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)\n-\t               : pair<const _Tp&, const _Tp&>(__a, __b);\n+\t\t       : pair<const _Tp&, const _Tp&>(__a, __b);\n     }\n \n   /**\n@@ -3344,7 +3327,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)\n     {\n       return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)\n-\t                      : pair<const _Tp&, const _Tp&>(__a, __b);\n+\t\t\t      : pair<const _Tp&, const _Tp&>(__a, __b);\n     }\n \n   template<typename _ForwardIterator, typename _Compare>\n@@ -4151,7 +4134,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  consecutive elements for which the predicate returns true.\n   */\n   template<typename _ForwardIterator, typename _Integer, typename _Tp,\n-           typename _BinaryPredicate>\n+\t   typename _BinaryPredicate>\n     inline _ForwardIterator\n     search_n(_ForwardIterator __first, _ForwardIterator __last,\n \t     _Integer __count, const _Tp& __val,\n@@ -4193,8 +4176,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-            // \"the type returned by a _UnaryOperation\"\n-            __typeof__(__unary_op(*__first))>)\n+\t    // \"the type returned by a _UnaryOperation\"\n+\t    __typeof__(__unary_op(*__first))>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       for (; __first != __last; ++__first, (void)++__result)\n@@ -4232,8 +4215,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-            // \"the type returned by a _BinaryOperation\"\n-            __typeof__(__binary_op(*__first1,*__first2))>)\n+\t    // \"the type returned by a _BinaryOperation\"\n+\t    __typeof__(__binary_op(*__first1,*__first2))>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n       for (; __first1 != __last1; ++__first1, (void)++__first2, ++__result)\n@@ -4355,8 +4338,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     {\n       // concept requirements\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-            // \"the type returned by a _Generator\"\n-            __typeof__(__gen())>)\n+\t    // \"the type returned by a _Generator\"\n+\t    __typeof__(__gen())>)\n \n       for (__decltype(__n + 0) __niter = __n;\n \t   __niter > 0; --__niter, ++__first)"}, {"sha": "bbca322acd4fb29929750c025a20d1cdd5ab00d7", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec494945a91a617332b243b0eaaa5d6a4653e702/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec494945a91a617332b243b0eaaa5d6a4653e702/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=ec494945a91a617332b243b0eaaa5d6a4653e702", "patch": "@@ -264,13 +264,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline void\n     pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     {\n-      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n-\t_ValueType;\n-\n       // concept requirements\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n-      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n+\ttypename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_non_empty_range(__first, __last);\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_irreflexive(__first, __last);"}]}