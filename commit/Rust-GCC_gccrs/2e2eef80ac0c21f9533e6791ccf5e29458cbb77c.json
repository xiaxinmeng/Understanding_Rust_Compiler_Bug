{"sha": "2e2eef80ac0c21f9533e6791ccf5e29458cbb77c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUyZWVmODBhYzBjMjFmOTUzM2U2NzkxY2NmNWUyOTQ1OGNiYjc3Yw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-18T04:26:07Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-18T04:26:07Z"}, "message": "libstdc++: Fix miscellaneous issues with elements_view::_Sentinel [PR100631]\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100631\n\t* include/std/ranges (elements_view::_Iterator): Also befriend\n\t_Sentinel<!_Const>.\n\t(elements_view::_Sentinel::_M_equal): Templatize.\n\t(elements_view::_Sentinel::_M_distance_from): Split out from ...\n\t(elements_view::_Sentinel::operator-): ... here.  Depend on\n\t_Base2 instead of _Base in the return type.\n\t* testsuite/std/ranges/adaptors/elements.cc (test06, test07):\n\tNew tests.", "tree": {"sha": "0cd19995ce193eaefcac424a400a1f1362bdeb4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cd19995ce193eaefcac424a400a1f1362bdeb4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e2eef80ac0c21f9533e6791ccf5e29458cbb77c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2eef80ac0c21f9533e6791ccf5e29458cbb77c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e2eef80ac0c21f9533e6791ccf5e29458cbb77c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2eef80ac0c21f9533e6791ccf5e29458cbb77c/comments", "author": null, "committer": null, "parents": [{"sha": "a7ffc1ef6e38c01037c8894a6bc1889d6f875444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ffc1ef6e38c01037c8894a6bc1889d6f875444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ffc1ef6e38c01037c8894a6bc1889d6f875444"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "36bccd6b33b962babcb40eaaa80c331942b237bd", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2eef80ac0c21f9533e6791ccf5e29458cbb77c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2eef80ac0c21f9533e6791ccf5e29458cbb77c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=2e2eef80ac0c21f9533e6791ccf5e29458cbb77c", "patch": "@@ -3634,16 +3634,22 @@ namespace views::__adaptor\n \t    requires sized_sentinel_for<iterator_t<_Base>, iterator_t<_Base>>\n \t  { return __x._M_current - __y._M_current; }\n \n-\t  friend _Sentinel<_Const>;\n+\t  template <bool> friend struct _Sentinel;\n \t};\n \n       template<bool _Const>\n \tstruct _Sentinel\n \t{\n \tprivate:\n-\t  constexpr bool\n-\t  _M_equal(const _Iterator<_Const>& __x) const\n-\t  { return __x._M_current == _M_end; }\n+\t  template<bool _Const2>\n+\t    constexpr bool\n+\t    _M_equal(const _Iterator<_Const2>& __x) const\n+\t    { return __x._M_current == _M_end; }\n+\n+\t  template<bool _Const2>\n+\t    constexpr auto\n+\t    _M_distance_from(const _Iterator<_Const2>& __i) const\n+\t    { return _M_end - __i._M_current; }\n \n \t  using _Base = elements_view::_Base<_Const>;\n \t  sentinel_t<_Base> _M_end = sentinel_t<_Base>();\n@@ -3684,9 +3690,9 @@ namespace views::__adaptor\n \t  template<bool _Const2,\n \t\t   typename _Base2 = __detail::__maybe_const_t<_Const2, _Vp>>\n \t    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base2>>\n-\t    friend constexpr range_difference_t<_Base>\n+\t    friend constexpr range_difference_t<_Base2>\n \t    operator-(const _Sentinel& __x, const _Iterator<_Const2>& __y)\n-\t    { return __x._M_end - __y._M_current; }\n+\t    { return __x._M_distance_from(__y); }\n \n \t  friend _Sentinel<!_Const>;\n \t};"}, {"sha": "c6839e38ce54c668c351dcb92718b30cc57095cb", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/elements.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2eef80ac0c21f9533e6791ccf5e29458cbb77c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Felements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2eef80ac0c21f9533e6791ccf5e29458cbb77c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Felements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Felements.cc?ref=2e2eef80ac0c21f9533e6791ccf5e29458cbb77c", "patch": "@@ -115,6 +115,35 @@ test05()\n   VERIFY( r2[0] == 1 && r2[1] == 3 );\n }\n \n+void\n+test06()\n+{\n+  // PR libstdc++/100631\n+  auto r = views::iota(0)\n+    | views::filter([](int){ return true; })\n+    | views::take(42)\n+    | views::reverse\n+    | views::transform([](int) { return std::make_pair(42, \"hello\"); })\n+    | views::take(42)\n+    | views::keys;\n+  auto b = r.begin();\n+  auto e = r.end();\n+  e - b;\n+}\n+\n+void\n+test07()\n+{\n+  // PR libstdc++/100631 comment #2\n+  auto r = views::iota(0)\n+    | views::transform([](int) { return std::make_pair(42, \"hello\"); })\n+    | views::keys;\n+  auto b = ranges::cbegin(r);\n+  auto e = ranges::end(r);\n+  b.base() == e.base();\n+  b == e;\n+}\n+\n int\n main()\n {\n@@ -123,4 +152,6 @@ main()\n   test03();\n   test04();\n   test05();\n+  test06();\n+  test07();\n }"}]}