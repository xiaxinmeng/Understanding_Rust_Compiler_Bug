{"sha": "3e4a35628b614d3e155ae9853888d69c5e89a354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0YTM1NjI4YjYxNGQzZTE1NWFlOTg1Mzg4OGQ2OWM1ZTg5YTM1NA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-03-22T15:34:41Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-03-22T15:34:41Z"}, "message": "PR c++/9978, c++/9708\n\ncp:\n\tPR c++/9978, c++/9708\n\t* cp-tree.h (instantiate_template): Add tsubst_flags parameter.\n\t* call.c (add_template_candidate_real): Adjust\n\tinstantiate_template call.\n\t* class.c (resolve_address_of_overloaded_function): Likewise.\n\t* decl.c (build_enumerator): Set TREE_CONSTANT.\n\t* pt.c (check_instantiated_args): New.\n\t(push_inline_template_parms_recursive): Set TREE_CONSTANT,\n\tTREE_READONLY.\n\t(build_template_parm_index): Copy TREE_CONSTANT, TREE_READONLY.\n\t(reduce_template_parm_level): Likewise.\n\t(process_template_parm): Likewise.\n\t(check_explicit_specialization): Adjust instantiate_template call.\n\t(convert_template_argument): Don't check non-type argument here.\n\t(lookup_template_class): Check them here.\n\t(tsubst_friend_function): Adjust instantiate_template call.\n\t(instantiate_template): Add tsubst_flags parameter, use it. Check\n\tinstantiated args.\ntestsuite:\n\tPR c++/9978, c++/9708\n\t* g++.dg/ext/vlm1.C: Adjust expected error.\n\t* g++.dg/ext/vla2.C: New test.\n\t* g++.dg/template/arg1.C: New test.\n\t* g++.dg/template/arg2.C: New test.\n\nFrom-SVN: r64714", "tree": {"sha": "18470b6d27dbd4fa2ef409287ea10c344c20ee5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18470b6d27dbd4fa2ef409287ea10c344c20ee5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e4a35628b614d3e155ae9853888d69c5e89a354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4a35628b614d3e155ae9853888d69c5e89a354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e4a35628b614d3e155ae9853888d69c5e89a354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4a35628b614d3e155ae9853888d69c5e89a354/comments", "author": null, "committer": null, "parents": [{"sha": "c8fcf20ce6259bb102901de9df6c999afb3bc0fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8fcf20ce6259bb102901de9df6c999afb3bc0fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8fcf20ce6259bb102901de9df6c999afb3bc0fe"}], "stats": {"total": 260, "additions": 181, "deletions": 79}, "files": [{"sha": "ecc9bdaa2145a05ff2dd0a18203c933434b684a8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3e4a35628b614d3e155ae9853888d69c5e89a354", "patch": "@@ -1,3 +1,24 @@\n+2003-03-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/9978, c++/9708\n+\t* cp-tree.h (instantiate_template): Add tsubst_flags parameter.\n+\t* call.c (add_template_candidate_real): Adjust\n+\tinstantiate_template call.\n+\t* class.c (resolve_address_of_overloaded_function): Likewise.\n+\t* decl.c (build_enumerator): Set TREE_CONSTANT.\n+\t* pt.c (check_instantiated_args): New.\n+\t(push_inline_template_parms_recursive): Set TREE_CONSTANT,\n+\tTREE_READONLY.\n+\t(build_template_parm_index): Copy TREE_CONSTANT, TREE_READONLY.\n+\t(reduce_template_parm_level): Likewise.\n+\t(process_template_parm): Likewise.\n+\t(check_explicit_specialization): Adjust instantiate_template call.\n+\t(convert_template_argument): Don't check non-type argument here.\n+\t(lookup_template_class): Check them here.\n+\t(tsubst_friend_function): Adjust instantiate_template call.\n+\t(instantiate_template): Add tsubst_flags parameter, use it. Check\n+\tinstantiated args.\n+\n 2003-03-21  Zack Weinberg  <zack@codesourcery.com>\n \n \t* decl.c: Update calls to shadow_warning."}, {"sha": "3d8e17f67fef684911dc757066a3e74fc4a46ae7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3e4a35628b614d3e155ae9853888d69c5e89a354", "patch": "@@ -2275,7 +2275,7 @@ add_template_candidate_real (struct z_candidate **candidates, tree tmpl,\n   if (i != 0)\n     return NULL;\n \n-  fn = instantiate_template (tmpl, targs);\n+  fn = instantiate_template (tmpl, targs, tf_none);\n   if (fn == error_mark_node)\n     return NULL;\n "}, {"sha": "e899c5714068dc3fd0de2bd584ff4f20cc0db42e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3e4a35628b614d3e155ae9853888d69c5e89a354", "patch": "@@ -5989,7 +5989,8 @@ cannot resolve overloaded function `%D' based on conversion to type `%T'\",\n \t    continue;\n \n \t  /* Instantiate the template.  */\n-\t  instantiation = instantiate_template (fn, targs);\n+\t  instantiation = instantiate_template (fn, targs,\n+\t\t\t\t\t\tcomplain ? tf_error : tf_none);\n \t  if (instantiation == error_mark_node)\n \t    /* Instantiation failed.  */\n \t    continue;"}, {"sha": "1c871e8fcdcbb5f793ba01e991c8967c7fbf5b62", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3e4a35628b614d3e155ae9853888d69c5e89a354", "patch": "@@ -4016,7 +4016,7 @@ extern tree lookup_template_class\t\t(tree, tree, tree, tree, int, tsubst_flags_t)\n extern tree lookup_template_function            (tree, tree);\n extern int uses_template_parms\t\t\t(tree);\n extern tree instantiate_class_template\t\t(tree);\n-extern tree instantiate_template\t\t(tree, tree);\n+extern tree instantiate_template\t\t(tree, tree, tsubst_flags_t);\n extern int fn_type_unification                  (tree, tree, tree, tree, tree, unification_kind_t, int);\n extern tree tinst_for_decl\t\t\t(void);\n extern void mark_decl_instantiated\t\t(tree, int);"}, {"sha": "4756cdce9021c45585f30c471e28efc95194caae", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3e4a35628b614d3e155ae9853888d69c5e89a354", "patch": "@@ -13286,8 +13286,8 @@ build_enumerator (tree name, tree value, tree enumtype)\n     decl = build_decl (CONST_DECL, name, type);\n \n   DECL_CONTEXT (decl) = FROB_CONTEXT (context);\n+  TREE_CONSTANT (decl) = TREE_READONLY (decl) = 1;\n   DECL_INITIAL (decl) = value;\n-  TREE_READONLY (decl) = 1;\n \n   if (context && context == current_class_type)\n     /* In something like `struct S { enum E { i = 7 }; };' we put `i'"}, {"sha": "aa9a2c7280252b1afc209cbb54b623ea747f8ad3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 99, "deletions": 74, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3e4a35628b614d3e155ae9853888d69c5e89a354", "patch": "@@ -110,6 +110,7 @@ static tree coerce_template_parms PARAMS ((tree, tree, tree,\n static void tsubst_enum\tPARAMS ((tree, tree, tree));\n static tree add_to_template_args PARAMS ((tree, tree));\n static tree add_outermost_template_args PARAMS ((tree, tree));\n+static bool check_instantiated_args PARAMS ((tree, tree, tsubst_flags_t));\n static int maybe_adjust_types_for_deduction PARAMS ((unification_kind_t, tree*,\n \t\t\t\t\t\t     tree*)); \n static int  type_unification_real PARAMS ((tree, tree, tree, tree,\n@@ -429,6 +430,7 @@ push_inline_template_parms_recursive (parmlist, levels)\n \t    tree decl = build_decl (CONST_DECL, DECL_NAME (parm),\n \t\t\t\t    TREE_TYPE (parm));\n \t    DECL_ARTIFICIAL (decl) = 1;\n+\t    TREE_CONSTANT (decl) = TREE_READONLY (decl) = 1;\n \t    DECL_INITIAL (decl) = DECL_INITIAL (parm);\n \t    SET_DECL_TEMPLATE_PARM_P (decl);\n \t    pushdecl (decl);\n@@ -1839,7 +1841,7 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \t\t  targs = new_targs;\n \t\t}\n \t\t  \n-\t      return instantiate_template (tmpl, targs);\n+\t      return instantiate_template (tmpl, targs, tf_error);\n \t    }\n \n \t  /* If this is a specialization of a member template of a\n@@ -2050,6 +2052,8 @@ build_template_parm_index (index, level, orig_level, decl, type)\n   TEMPLATE_PARM_ORIG_LEVEL (t) = orig_level;\n   TEMPLATE_PARM_DECL (t) = decl;\n   TREE_TYPE (t) = type;\n+  TREE_CONSTANT (t) = TREE_CONSTANT (decl);\n+  TREE_READONLY (t) = TREE_READONLY (decl);\n \n   return t;\n }\n@@ -2069,20 +2073,21 @@ reduce_template_parm_level (index, type, levels)\n       || (TEMPLATE_PARM_LEVEL (TEMPLATE_PARM_DESCENDANTS (index))\n \t  != TEMPLATE_PARM_LEVEL (index) - levels))\n     {\n-      tree decl \n-\t= build_decl (TREE_CODE (TEMPLATE_PARM_DECL (index)),\n-\t\t      DECL_NAME (TEMPLATE_PARM_DECL (index)),\n-\t\t      type);\n-      tree t\n-\t= build_template_parm_index (TEMPLATE_PARM_IDX (index),\n+      tree orig_decl = TEMPLATE_PARM_DECL (index);\n+      tree decl, t;\n+      \n+      decl = build_decl (TREE_CODE (orig_decl), DECL_NAME (orig_decl), type);\n+      TREE_CONSTANT (decl) = TREE_CONSTANT (orig_decl);\n+      TREE_READONLY (decl) = TREE_READONLY (orig_decl);\n+      DECL_ARTIFICIAL (decl) = 1;\n+      SET_DECL_TEMPLATE_PARM_P (decl);\n+      \n+      t = build_template_parm_index (TEMPLATE_PARM_IDX (index),\n \t\t\t\t     TEMPLATE_PARM_LEVEL (index) - levels,\n \t\t\t\t     TEMPLATE_PARM_ORIG_LEVEL (index),\n \t\t\t\t     decl, type);\n       TEMPLATE_PARM_DESCENDANTS (index) = t;\n \n-      DECL_ARTIFICIAL (decl) = 1;\n-      SET_DECL_TEMPLATE_PARM_P (decl);\n-\n       /* Template template parameters need this.  */\n       DECL_TEMPLATE_PARMS (decl)\n \t= DECL_TEMPLATE_PARMS (TEMPLATE_PARM_DECL (index));\n@@ -2137,10 +2142,11 @@ process_template_parm (list, next)\n       TREE_TYPE (parm) = TYPE_MAIN_VARIANT (TREE_TYPE (parm));\n \n       /* A template parameter is not modifiable.  */\n-      TREE_READONLY (parm) = 1;\n+      TREE_READONLY (parm) = TREE_CONSTANT (parm) = 1;\n       if (invalid_nontype_parm_type_p (TREE_TYPE (parm), 1))\n         TREE_TYPE (parm) = void_type_node;\n       decl = build_decl (CONST_DECL, DECL_NAME (parm), TREE_TYPE (parm));\n+      TREE_CONSTANT (decl) = TREE_READONLY (decl) = 1;\n       DECL_INITIAL (parm) = DECL_INITIAL (decl) \n \t= build_template_parm_index (idx, processing_template_decl,\n \t\t\t\t     processing_template_decl,\n@@ -3632,39 +3638,7 @@ convert_template_argument (parm, arg, args, complain, i, in_decl)\n \t    }\n \t}\n       else\n-\t{\n-\t  val = groktypename (arg);\n-\t  if (! processing_template_decl)\n-\t    {\n-\t      /* [basic.link]: A name with no linkage (notably, the\n-\t\t name of a class or enumeration declared in a local\n-\t\t scope) shall not be used to declare an entity with\n-\t\t linkage.  This implies that names with no linkage\n-\t\t cannot be used as template arguments.  */\n-\t      tree t = no_linkage_check (val);\n-\t      if (t)\n-\t\t{\n-\t\t  if (TYPE_ANONYMOUS_P (t))\n-\t\t    pedwarn\n-\t\t      (\"template-argument `%T' uses anonymous type\", val);\n-\t\t  else\n-\t\t    error\n-\t\t      (\"template-argument `%T' uses local type `%T'\",\n-\t\t       val, t);\n-\t\t  return error_mark_node;\n-\t\t}\n-\n-\t      /* In order to avoid all sorts of complications, we do\n-\t\t not allow variably-modified types as template\n-\t\t arguments.  */\n-\t      if (variably_modified_type_p (val))\n-\t\t{\n-\t\t  error (\"template-argument `%T' is a variably modified type\",\n-\t\t\t val);\n-\t\t  return error_mark_node;\n-\t\t}\n-\t    }\n-\t}\n+\tval = groktypename (arg);\n     }\n   else\n     {\n@@ -3704,9 +3678,7 @@ convert_template_argument (parm, arg, args, complain, i, in_decl)\n /* Convert all template arguments to their appropriate types, and\n    return a vector containing the innermost resulting template\n    arguments.  If any error occurs, return error_mark_node. Error and\n-   warning messages are issued under control of COMPLAIN.  Some error\n-   messages are issued even if COMPLAIN is zero; for instance, if a\n-   template argument is composed from a local class.\n+   warning messages are issued under control of COMPLAIN.\n \n    If REQUIRE_ALL_ARGUMENTS is nonzero, all arguments must be\n    provided in ARGLIST, or else trailing parameters must have default\n@@ -4207,7 +4179,9 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope, complain)\n \n       arglist2 = coerce_template_parms (parmlist, arglist, template,\n                                         complain, /*require_all_args=*/1);\n-      if (arglist2 == error_mark_node)\n+      if (arglist2 == error_mark_node\n+\t  || (!processing_template_decl\n+\t      && check_instantiated_args (template, arglist2, complain)))\n         POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);\n \n       parm = bind_template_template_parm (TREE_TYPE (template), arglist2);\n@@ -4296,7 +4270,11 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope, complain)\n \t\t\t\t   template,\n \t                           complain, /*require_all_args=*/1);\n \n-      if (arglist == error_mark_node)\n+      if (arglist == error_mark_node\n+\t  || (!processing_template_decl\n+\t      && check_instantiated_args (template,\n+\t\t\t\t\t  INNERMOST_TEMPLATE_ARGS (arglist),\n+\t\t\t\t\t  complain)))\n \t/* We were unable to bind the arguments.  */\n \tPOP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);\n \n@@ -4919,7 +4897,7 @@ tsubst_friend_function (decl, args)\n       tmpl = determine_specialization (template_id, new_friend,\n \t\t\t\t       &new_args, \n \t\t\t\t       /*need_member_template=*/0);\n-      new_friend = instantiate_template (tmpl, new_args);\n+      new_friend = instantiate_template (tmpl, new_args, tf_error);\n       goto done;\n     }\n \n@@ -8394,18 +8372,78 @@ tsubst_copy_and_build (t, args, complain, in_decl)\n     }\n }\n \n+/* Verify that the instantiated ARGS are valid. For type arguments,\n+   make sure that the type's linkage is ok. For non-type arguments,\n+   make sure they are constants if they are integral or enumarations.\n+   Emit an error under control of COMPLAIN, and return TRUE on error. */\n+\n+static bool\n+check_instantiated_args (tmpl, args, complain)\n+     tree tmpl, args;\n+     tsubst_flags_t complain;\n+{\n+  int ix, len = DECL_NTPARMS (tmpl);\n+  bool result = false;\n+\n+  for (ix = 0; ix != len; ix++)\n+    {\n+      tree t = TREE_VEC_ELT (args, ix);\n+      \n+      if (TYPE_P (t))\n+\t{\n+\t  /* [basic.link]: A name with no linkage (notably, the name\n+\t     of a class or enumeration declared in a local scope)\n+\t     shall not be used to declare an entity with linkage.\n+\t     This implies that names with no linkage cannot be used as\n+\t     template arguments.  */\n+\t  tree nt = no_linkage_check (t);\n+\n+\t  if (nt)\n+\t    {\n+\t      if (!(complain & tf_error))\n+\t\t/*OK*/;\n+\t      else if (TYPE_ANONYMOUS_P (nt))\n+\t\terror (\"`%T' uses anonymous type\", t);\n+\t      else\n+\t\terror (\"`%T' uses local type `%T'\", t, nt);\n+\t      result = true;\n+\t    }\n+\t  /* In order to avoid all sorts of complications, we do not\n+\t     allow variably-modified types as template arguments.  */\n+\t  else if (variably_modified_type_p (t))\n+\t    {\n+\t      if (complain & tf_error)\n+\t\terror (\"`%T' is a variably modified type\", t);\n+\t      result = true;\n+\t    }\n+\t}\n+      /* A non-type argument of integral or enumerated type must be a\n+\t constant.  */\n+      else if (TREE_TYPE (t)\n+\t       && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (t))\n+\t       && !TREE_CONSTANT (t))\n+\t{\n+\t  if (complain & tf_error)\n+\t    error (\"integral expression `%E' is not constant\", t);\n+\t  result = true;\n+\t}\n+    }\n+  if (result && complain & tf_error)\n+    error (\"  trying to instantiate `%D'\", tmpl);\n+  return result;\n+}\n+\n /* Instantiate the indicated variable or function template TMPL with\n    the template arguments in TARG_PTR.  */\n \n tree\n-instantiate_template (tmpl, targ_ptr)\n+instantiate_template (tmpl, targ_ptr, complain)\n      tree tmpl, targ_ptr;\n+     tsubst_flags_t complain;\n {\n   tree fndecl;\n   tree gen_tmpl;\n   tree spec;\n-  int i, len;\n-  tree inner_args;\n \n   if (tmpl == error_mark_node)\n     return error_mark_node;\n@@ -8415,7 +8453,8 @@ instantiate_template (tmpl, targ_ptr)\n   /* If this function is a clone, handle it specially.  */\n   if (DECL_CLONED_FUNCTION_P (tmpl))\n     {\n-      tree spec = instantiate_template (DECL_CLONED_FUNCTION (tmpl), targ_ptr);\n+      tree spec = instantiate_template (DECL_CLONED_FUNCTION (tmpl), targ_ptr,\n+\t\t\t\t\tcomplain);\n       tree clone;\n       \n       /* Look for the clone.  */\n@@ -8449,34 +8488,20 @@ instantiate_template (tmpl, targ_ptr)\n \treturn spec;\n     }\n \n-  len = DECL_NTPARMS (gen_tmpl);\n-  inner_args = INNERMOST_TEMPLATE_ARGS (targ_ptr);\n-  i = len;\n-  while (i--)\n-    {\n-      tree t = TREE_VEC_ELT (inner_args, i);\n-      if (TYPE_P (t))\n-\t{\n-\t  tree nt = target_type (t);\n-\t  if (IS_AGGR_TYPE (nt) && decl_function_context (TYPE_MAIN_DECL (nt)))\n-\t    {\n-\t      error (\"type `%T' composed from a local class is not a valid template-argument\", t);\n-\t      error (\"  trying to instantiate `%D'\", gen_tmpl);\n-\t      return error_mark_node;\n-\t    }\n-\t}\n-    }\n-\n+  if (check_instantiated_args (gen_tmpl, INNERMOST_TEMPLATE_ARGS (targ_ptr),\n+\t\t\t       complain))\n+    return error_mark_node;\n+  \n   /* Make sure that we can see identifiers, and compute access\n      correctly.  The desired FUNCTION_DECL for FNDECL may or may not be\n      created earlier.  Let push_access_scope_real figure that out.  */\n   push_access_scope_real\n     (gen_tmpl, targ_ptr, tsubst (DECL_CONTEXT (gen_tmpl), targ_ptr, \n-\t\t\t\t tf_error, gen_tmpl));\n+\t\t\t\t complain, gen_tmpl));\n \n   /* substitute template parameters */\n   fndecl = tsubst (DECL_TEMPLATE_RESULT (gen_tmpl),\n-\t\t   targ_ptr, tf_error, gen_tmpl);\n+\t\t   targ_ptr, complain, gen_tmpl);\n \n   pop_access_scope (gen_tmpl);\n "}, {"sha": "901d52bb55816886d2c4cbf2eee577f68c1bd751", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e4a35628b614d3e155ae9853888d69c5e89a354", "patch": "@@ -1,3 +1,11 @@\n+2003-03-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/9978, c++/9708\n+\t* g++.dg/ext/vlm1.C: Adjust expected error.\n+\t* g++.dg/ext/vla2.C: New test.\n+\t* g++.dg/template/arg1.C: New test.\n+\t* g++.dg/template/arg2.C: New test.\n+\n 2003-03-22  Bud Davis  <bdavis9659@comcast.net>\n \n \t* g77.f-torture/execute/select.f: New test."}, {"sha": "c17dc860910cd37b86f44347177c3ea6294fc3f0", "filename": "gcc/testsuite/g++.dg/ext/vla2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla2.C?ref=3e4a35628b614d3e155ae9853888d69c5e89a354", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 21 Mar 2003 <nathan@codesourcery.com>\n+\n+// PR 9708. We unified a VLA size as a constant. Then issued bogus\n+// errors.\n+\n+template <unsigned int N>\n+char* begin(char (&a) [N] );\n+\n+void bar(int i)\n+{\n+  char d[i] ;\n+  \n+  begin(d);  // { dg-error \"no matching function\" \"\" }\n+}"}, {"sha": "13f6702771064704d2b25b6bb17c50d20b4c7db0", "filename": "gcc/testsuite/g++.dg/ext/vlm1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvlm1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvlm1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvlm1.C?ref=3e4a35628b614d3e155ae9853888d69c5e89a354", "patch": "@@ -4,7 +4,7 @@ template <class T> struct A {};\n  \n struct B {\n   static const int s;\n-  A<int[s]> a; // { dg-error \"variably modified|no type\" }\n+  A<int[s]> a; // { dg-error \"variably modified|no type|trying to instantiate\" }\n };\n  \n const int B::s=16;"}, {"sha": "f7a8b3150c69dc5f7aaf67865ec1c44027484983", "filename": "gcc/testsuite/g++.dg/template/arg1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg1.C?ref=3e4a35628b614d3e155ae9853888d69c5e89a354", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 21 Mar 2003 <nathan@codesourcery.com>\n+\n+// PR 9978. We rejected a constant expression.\n+  \n+enum { val = 1 };\n+\n+template <class T>\n+struct Bar\n+{\n+  static const int A = val;\n+  static const int B = A + 1;\n+};"}, {"sha": "5a4ff275cf328541f9c844b1b7681b79713e7554", "filename": "gcc/testsuite/g++.dg/template/arg2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a35628b614d3e155ae9853888d69c5e89a354/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg2.C?ref=3e4a35628b614d3e155ae9853888d69c5e89a354", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 21 Mar 2003 <nathan@codesourcery.com>\n+\n+// PR 9708. We accepted a local class\n+\n+template <typename T> class X {};\n+\n+void fn ()\n+{\n+  class L {};\n+  X<L> f; // { dg-error \"uses local type|trying to instantiate|expected\" \"\" }\n+}"}]}