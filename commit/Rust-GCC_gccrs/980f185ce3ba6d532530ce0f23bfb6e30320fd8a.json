{"sha": "980f185ce3ba6d532530ce0f23bfb6e30320fd8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwZjE4NWNlM2JhNmQ1MzI1MzBjZTBmMjNiZmI2ZTMwMzIwZmQ4YQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-10-05T08:17:55Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-10-05T08:17:55Z"}, "message": "re PR fortran/91926 (assumed rank optional)\n\n2019-10-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91926\n\t* trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Correct the\n\tassignment of the attribute field to account correctly for an\n\tassumed shape dummy. Assign separately to the gfc and cfi\n\tdescriptors since the atribute can be different. Add btanch to\n\tcorrectly handle missing optional dummies.\n\n2019-10-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91926\n\t* gfortran.dg/ISO_Fortran_binding_13.f90 : New test.\n\t* gfortran.dg/ISO_Fortran_binding_13.c : Additional source.\n\t* gfortran.dg/ISO_Fortran_binding_14.f90 : New test.\n\n2019-10-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91926\n\t* runtime/ISO_Fortran_binding.c (cfi_desc_to_gfc_desc): Do not\n\tmodify the bounds and offset for CFI_other.\n\nFrom-SVN: r276624", "tree": {"sha": "b40f3f5c3c1e5b8d688086087e5c32f403976dcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b40f3f5c3c1e5b8d688086087e5c32f403976dcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/980f185ce3ba6d532530ce0f23bfb6e30320fd8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980f185ce3ba6d532530ce0f23bfb6e30320fd8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980f185ce3ba6d532530ce0f23bfb6e30320fd8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/comments", "author": null, "committer": null, "parents": [{"sha": "d56cbcc0a2ae508afbbc1c3d6a6b925971ff2d6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56cbcc0a2ae508afbbc1c3d6a6b925971ff2d6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d56cbcc0a2ae508afbbc1c3d6a6b925971ff2d6e"}], "stats": {"total": 169, "additions": 160, "deletions": 9}, "files": [{"sha": "2da44e0945247838335e38d41d3d6aad6270117a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=980f185ce3ba6d532530ce0f23bfb6e30320fd8a", "patch": "@@ -1,3 +1,12 @@\n+2019-10-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91926\n+\t* trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Correct the\n+\tassignment of the attribute field to account correctly for an\n+\tassumed shape dummy. Assign separately to the gfc and cfi\n+\tdescriptors since the atribute can be different. Add btanch to\n+\tcorrectly handle missing optional dummies.\n+\n 2019-10-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran.91959\n@@ -65,7 +74,7 @@\n \tcharacter types are possible it can get the character length from\n \tgfc_expr for character literals.\n \t(gfc_dummy_typename): New functionfor gfc_typespec *, if no character\n-\tlength is present the character type is assumed and the appropriate \n+\tlength is present the character type is assumed and the appropriate\n \tstring is return otherwise it calls gfc_typename for gfc_typespec *.\n \t(gfc_typespec): for character types construct the type name with length\n \tand kind (if it is not default kind)."}, {"sha": "965ab7786a1eaf4a085c7b12178c13477eb0c87f", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=980f185ce3ba6d532530ce0f23bfb6e30320fd8a", "patch": "@@ -5202,7 +5202,9 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n   tree gfc_desc_ptr;\n   tree type;\n   tree cond;\n+  tree desc_attr;\n   int attribute;\n+  int cfi_attribute;\n   symbol_attribute attr = gfc_expr_attr (e);\n   stmtblock_t block;\n \n@@ -5211,12 +5213,20 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n   attribute = 2;\n   if (!e->rank || gfc_get_full_arrayspec_from_expr (e))\n     {\n-      if (fsym->attr.pointer)\n+      if (attr.pointer)\n \tattribute = 0;\n-      else if (fsym->attr.allocatable)\n+      else if (attr.allocatable)\n \tattribute = 1;\n     }\n \n+  /* If the formal argument is assumed shape and neither a pointer nor\n+     allocatable, it is unconditionally CFI_attribute_other.  */\n+  if (fsym->as->type == AS_ASSUMED_SHAPE\n+      && !fsym->attr.pointer && !fsym->attr.allocatable)\n+   cfi_attribute = 2;\n+  else\n+   cfi_attribute = attribute;\n+\n   if (e->rank != 0)\n     {\n       parmse->force_no_tmp = 1;\n@@ -5283,11 +5293,12 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n \t\t\t\t\t\t    parmse->expr, attr);\n     }\n \n-  /* Set the CFI attribute field.  */\n-  tmp = gfc_conv_descriptor_attribute (parmse->expr);\n+  /* Set the CFI attribute field through a temporary value for the\n+     gfc attribute.  */\n+  desc_attr = gfc_conv_descriptor_attribute (parmse->expr);\n   tmp = fold_build2_loc (input_location, MODIFY_EXPR,\n-\t\t\t void_type_node, tmp,\n-\t\t\t build_int_cst (TREE_TYPE (tmp), attribute));\n+\t\t\t void_type_node, desc_attr,\n+\t\t\t build_int_cst (TREE_TYPE (desc_attr), cfi_attribute));\n   gfc_add_expr_to_block (&parmse->pre, tmp);\n \n   /* Now pass the gfc_descriptor by reference.  */\n@@ -5305,6 +5316,12 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n \t\t\t     gfor_fndecl_gfc_to_cfi, 2, tmp, gfc_desc_ptr);\n   gfc_add_expr_to_block (&parmse->pre, tmp);\n \n+  /* Now set the gfc descriptor attribute.  */\n+  tmp = fold_build2_loc (input_location, MODIFY_EXPR,\n+\t\t\t void_type_node, desc_attr,\n+\t\t\t build_int_cst (TREE_TYPE (desc_attr), attribute));\n+  gfc_add_expr_to_block (&parmse->pre, tmp);\n+\n   /* The CFI descriptor is passed to the bind_C procedure.  */\n   parmse->expr = cfi_desc_ptr;\n \n@@ -5325,6 +5342,25 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n   tmp = build_call_expr_loc (input_location,\n \t\t\t     gfor_fndecl_cfi_to_gfc, 2, gfc_desc_ptr, tmp);\n   gfc_prepend_expr_to_block (&parmse->post, tmp);\n+\n+  /* Deal with an optional dummy being passed to an optional formal arg\n+     by finishing the pre and post blocks and making their execution\n+     conditional on the dummy being present.  */\n+  if (fsym->attr.optional && e->expr_type == EXPR_VARIABLE\n+      && e->symtree->n.sym->attr.optional)\n+    {\n+      cond = gfc_conv_expr_present (e->symtree->n.sym);\n+      tmp = fold_build2 (MODIFY_EXPR, void_type_node,\n+\t\t\t cfi_desc_ptr,\n+\t\t\t build_int_cst (pvoid_type_node, 0));\n+      tmp = build3_v (COND_EXPR, cond,\n+\t\t      gfc_finish_block (&parmse->pre), tmp);\n+      gfc_add_expr_to_block (&parmse->pre, tmp);\n+      tmp = build3_v (COND_EXPR, cond,\n+\t\t      gfc_finish_block (&parmse->post),\n+\t\t      build_empty_stmt (input_location));\n+      gfc_add_expr_to_block (&parmse->post, tmp);\n+    }\n }\n \n "}, {"sha": "e40a167a5518f03b535786109f8be07210380511", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=980f185ce3ba6d532530ce0f23bfb6e30320fd8a", "patch": "@@ -1,3 +1,10 @@\n+2019-10-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91926\n+\t* gfortran.dg/ISO_Fortran_binding_13.f90 : New test.\n+\t* gfortran.dg/ISO_Fortran_binding_13.c : Additional source.\n+\t* gfortran.dg/ISO_Fortran_binding_14.f90 : New test.\n+\n 2019-10-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91369 - Implement P0784R7: constexpr new"}, {"sha": "1ac9fc89eb1692b5100ccb432a75ab26cbeee011", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_13.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_13.c?ref=980f185ce3ba6d532530ce0f23bfb6e30320fd8a", "patch": "@@ -0,0 +1,12 @@\n+/* Test the fix for PR91926.  */\n+\n+/* Contributed by Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@hotmail.com> */\n+\n+#include <stdlib.h>\n+\n+int ifb_echo(void*);\n+\n+int ifb_echo(void *this)\n+{\n+  return this == NULL ? 1 : 2;\n+}"}, {"sha": "132a97cd4c4f0c6fc3f5217ae308df019c88acb0", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_13.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_13.f90?ref=980f185ce3ba6d532530ce0f23bfb6e30320fd8a", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run { target c99_runtime } }\n+! { dg-additional-sources ISO_Fortran_binding_13.c }\n+!\n+! Test the fix for PR91926. The additional source is the main program.\n+!\n+! Contributed by Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@hotmail.com>\n+!\n+program ifb_p\n+\n+  implicit none\n+\n+  integer :: i = 42\n+\n+  interface\n+    integer function ifb_echo_aux(this) bind(c, name=\"ifb_echo\")\n+      implicit none\n+      type(*), dimension(..), & ! removing assumed rank solves segmentation fault\n+        optional, intent(in) :: this\n+    end function ifb_echo_aux\n+  end interface\n+\n+  if (ifb_echo_aux() .ne. 1) STOP 1  ! worked\n+  if (ifb_echo() .ne. 1) stop 2      ! segmentation fault\n+  if (ifb_echo_aux(i) .ne. 2) stop 3 ! worked\n+  if (ifb_echo(i) .ne. 2) stop 4     ! worked\n+\n+  stop\n+\n+contains\n+\n+  integer function ifb_echo(this)\n+    type(*), dimension(..), &\n+      optional, intent(in) :: this\n+\n+    ifb_echo = ifb_echo_aux(this)\n+    return\n+  end function ifb_echo\n+\n+end program ifb_p"}, {"sha": "388c5438252d49342f6bd357850062697fafb7b4", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_14.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_14.f90?ref=980f185ce3ba6d532530ce0f23bfb6e30320fd8a", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+!\n+! Correct an error in the eveluation of the CFI descriptor attribute for\n+! the case where the bind_C formal argument is not an assumed shape array\n+! and not allocatable or pointer.\n+!\n+! Contributed by Gilles Gouaillardet  <gilles@rist.or.jp>\n+!\n+MODULE FOO\n+INTERFACE\n+SUBROUTINE dummy(buf) BIND(C, name=\"sync\")\n+type(*), dimension(..) :: buf\n+END SUBROUTINE\n+END INTERFACE\n+END MODULE\n+\n+PROGRAM main\n+    USE FOO\n+    IMPLICIT NONE\n+    integer(8) :: before, after\n+\n+    INTEGER, parameter :: n = 1\n+\n+    INTEGER, ALLOCATABLE :: buf(:)\n+    INTEGER :: buf2(n)\n+    INTEGER :: i\n+\n+    ALLOCATE(buf(n))\n+    before = LOC(buf(1))\n+    CALL dummy (buf)\n+    after = LOC(buf(1))\n+\n+    if (before .NE. after) stop 1\n+\n+    before = LOC(buf2(1))\n+    CALL dummy (buf)\n+    after = LOC(buf2(1))\n+\n+    if (before .NE. after) stop 2\n+\n+END PROGRAM"}, {"sha": "7736e5da937564d8be80b1d6f1093de211d91e88", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=980f185ce3ba6d532530ce0f23bfb6e30320fd8a", "patch": "@@ -1,3 +1,9 @@\n+2019-10-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91926\n+\t* runtime/ISO_Fortran_binding.c (cfi_desc_to_gfc_desc): Do not\n+\tmodify the bounds and offset for CFI_other.\n+\n 2019-10-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/91593\n@@ -14,7 +20,7 @@\n \tformatted_transfer_scalar_read, formatted_transfer_scalar_write,\n \tpre_position, next_record_r, next_record_w): Add and use\n \tFORMATTED_UNSPECIFIED to enumeration.\n-\t\n+\n 2019-09-27  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* configure: Regenerate."}, {"sha": "8cfcc98965e498e4e79f9efc412489b904ebadca", "filename": "libgfortran/runtime/ISO_Fortran_binding.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/libgfortran%2Fruntime%2FISO_Fortran_binding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980f185ce3ba6d532530ce0f23bfb6e30320fd8a/libgfortran%2Fruntime%2FISO_Fortran_binding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2FISO_Fortran_binding.c?ref=980f185ce3ba6d532530ce0f23bfb6e30320fd8a", "patch": "@@ -63,7 +63,8 @@ cfi_desc_to_gfc_desc (gfc_array_void *d, CFI_cdesc_t **s_ptr)\n   d->dtype.version = s->version;\n   GFC_DESCRIPTOR_RANK (d) = (signed char)s->rank;\n \n-  d->dtype.attribute = (signed short)s->attribute;\n+  if (d->dtype.attribute == CFI_attribute_other)\n+    return;\n \n   if (s->rank)\n     {"}]}