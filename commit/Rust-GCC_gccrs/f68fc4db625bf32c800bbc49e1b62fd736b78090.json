{"sha": "f68fc4db625bf32c800bbc49e1b62fd736b78090", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY4ZmM0ZGI2MjViZjMyYzgwMGJiYzQ5ZTFiNjJmZDczNmI3ODA5MA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2001-06-26T14:06:07Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-06-26T14:06:07Z"}, "message": "diagnostic.h (struct diagnostic_context): Add new field.\n\n\t* diagnostic.h (struct diagnostic_context): Add new field.\n\t(lang_diagnostic_starter, lang_diagnostic_finalizer): Remove\n\tdeclaratons.\n\t(global_dc): Declare.\n\t* diagnostic.c (global_diagnostic_context): New variable.\n\t(global_output_buffer): Remove.\n\t(global_dc): Define.\n\t(lang_diagnostic_starter, lang_diagnostic_finalizer): Remove\n \tdefinitions.\n\t(initialize_diagnostics): Adjust initialization.\n\t(set_diagnostic_context): Adjust setting.\n\ncp/\n\n\t* error.c (init_error): Adjust settings.\n\nFrom-SVN: r43581", "tree": {"sha": "2c4cb21103202d0c4940fa8b9d5fb916a80a23ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c4cb21103202d0c4940fa8b9d5fb916a80a23ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f68fc4db625bf32c800bbc49e1b62fd736b78090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68fc4db625bf32c800bbc49e1b62fd736b78090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f68fc4db625bf32c800bbc49e1b62fd736b78090", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68fc4db625bf32c800bbc49e1b62fd736b78090/comments", "author": null, "committer": null, "parents": [{"sha": "d7f4934bc700a83c75393b1647fcfc4abbca799b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f4934bc700a83c75393b1647fcfc4abbca799b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f4934bc700a83c75393b1647fcfc4abbca799b"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "03e00157d7537582417de7881f1fb8dcdbf20495", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68fc4db625bf32c800bbc49e1b62fd736b78090/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68fc4db625bf32c800bbc49e1b62fd736b78090/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f68fc4db625bf32c800bbc49e1b62fd736b78090", "patch": "@@ -1,3 +1,17 @@\n+2001-06-26  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* diagnostic.h (struct diagnostic_context): Add new field.\n+\t(lang_diagnostic_starter, lang_diagnostic_finalizer): Remove\n+\tdeclaratons.\n+\t(global_dc): Declare.\n+\t* diagnostic.c (global_diagnostic_context): New variable.\n+\t(global_output_buffer): Remove.\n+\t(global_dc): Define.\n+\t(lang_diagnostic_starter, lang_diagnostic_finalizer): Remove\n+\tdefinitions.\n+\t(initialize_diagnostics): Adjust initialization.\n+\t(set_diagnostic_context): Adjust setting.\n+\n 2001-06-26  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config/mips/iris5.h (UNALIGNED_INT_ASM_OP,"}, {"sha": "44233af6d7468b0a179fc4dbeb640f9becffd577", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68fc4db625bf32c800bbc49e1b62fd736b78090/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68fc4db625bf32c800bbc49e1b62fd736b78090/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f68fc4db625bf32c800bbc49e1b62fd736b78090", "patch": "@@ -1,3 +1,7 @@\n+2001-06-26  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* error.c (init_error): Adjust settings.\n+\n 2001-06-19  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* except.c (initialize_handler_parm): Expect __cxa_begin_catch to"}, {"sha": "e028a109fbee5311dc480c0f297c4382871271a0", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68fc4db625bf32c800bbc49e1b62fd736b78090/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68fc4db625bf32c800bbc49e1b62fd736b78090/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=f68fc4db625bf32c800bbc49e1b62fd736b78090", "patch": "@@ -191,13 +191,12 @@ cp_printer * cp_printers[256] =\n void\n init_error ()\n {\n-  init_output_buffer (scratch_buffer, /* prefix */NULL, /* line-width */0);\n-  \n   print_error_function = lang_print_error_function;\n-  lang_diagnostic_starter = cp_diagnostic_starter;\n-  lang_diagnostic_finalizer = cp_diagnostic_finalizer;\n-\n+  diagnostic_starter (global_dc) = cp_diagnostic_starter;\n+  diagnostic_finalizer (global_dc) = cp_diagnostic_finalizer;\n   lang_printer = cp_tree_printer;\n+  \n+  init_output_buffer (scratch_buffer, /* prefix */NULL, /* line-width */0);\n }\n \n /* Dump a scope, if deemed necessary.  */"}, {"sha": "a13c2755a2da77ed2d4e40fce299c2cf1827c3b4", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68fc4db625bf32c800bbc49e1b62fd736b78090/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68fc4db625bf32c800bbc49e1b62fd736b78090/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=f68fc4db625bf32c800bbc49e1b62fd736b78090", "patch": "@@ -108,9 +108,12 @@ extern int warnings_are_errors;\n /* Front-end specific tree formatter, if non-NULL.  */\n printer_fn lang_printer = NULL;\n \n-/* An output_buffer surrogate for stderr.  */\n-static output_buffer global_output_buffer;\n-output_buffer *diagnostic_buffer = &global_output_buffer;\n+/* A diagnostic_context surrogate for stderr.  */\n+static diagnostic_context global_diagnostic_context;\n+diagnostic_context *global_dc = &global_diagnostic_context;\n+\n+/* This will be removed shortly.  */\n+output_buffer *diagnostic_buffer = &global_diagnostic_context.buffer;\n \n /* Function of last error message;\n    more generally, function such that if next error message is in it\n@@ -126,10 +129,6 @@ static int last_error_tick;\n void (*print_error_function) PARAMS ((const char *)) =\n   default_print_error_function;\n \n-/* Hooks for language specific diagnostic messages pager and finalizer.  */\n-diagnostic_starter_fn lang_diagnostic_starter;\n-diagnostic_finalizer_fn lang_diagnostic_finalizer;\n-\n /* Maximum characters per line in automatic line wrapping mode.\n    Zero means don't wrap lines. */\n \n@@ -189,8 +188,8 @@ initialize_diagnostics ()\n   /* Proceed to actual initialization.  */\n   default_initialize_buffer (diagnostic_buffer);\n \n-  lang_diagnostic_starter = default_diagnostic_starter;\n-  lang_diagnostic_finalizer = default_diagnostic_finalizer;\n+  diagnostic_starter (global_dc) = default_diagnostic_starter;\n+  diagnostic_finalizer (global_dc) = default_diagnostic_finalizer;\n }\n \n void\n@@ -1772,8 +1771,8 @@ set_diagnostic_context (dc, msgid, args_ptr, file, line, warn)\n   diagnostic_file_location (dc) = file;\n   diagnostic_line_location (dc) = line;\n   diagnostic_is_warning (dc) = warn;\n-  diagnostic_starter (dc) = lang_diagnostic_starter;\n-  diagnostic_finalizer (dc) = lang_diagnostic_finalizer;\n+  diagnostic_starter (dc) = diagnostic_starter (global_dc);\n+  diagnostic_finalizer (dc) = diagnostic_finalizer (global_dc);\n }\n \n void"}, {"sha": "fea82ba60395d132a773eeff5733d5606640203b", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68fc4db625bf32c800bbc49e1b62fd736b78090/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68fc4db625bf32c800bbc49e1b62fd736b78090/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=f68fc4db625bf32c800bbc49e1b62fd736b78090", "patch": "@@ -132,6 +132,11 @@ struct output_buffer\n    the context of a diagnostic message.  */\n struct diagnostic_context\n {\n+  /* Where most of the diagnostic formatting work is done.  In Object\n+     Oriented terms, we'll say that diagnostic_context is a sub-class of\n+     output_buffer.  */\n+  output_buffer buffer;\n+\n   /* The diagnostic message to output.  */\n   const char *message;\n \n@@ -185,9 +190,6 @@ struct diagnostic_context\n \n extern printer_fn lang_printer;\n \n-extern diagnostic_starter_fn lang_diagnostic_starter;\n-extern diagnostic_finalizer_fn lang_diagnostic_finalizer;\n-\n extern int diagnostic_message_length_per_line;\n \n /* This output buffer is used by front-ends that directly output\n@@ -196,6 +198,7 @@ extern int diagnostic_message_length_per_line;\n    avoided.  This global buffer will go away, once all such usage\n    has been removed.  */\n extern output_buffer *diagnostic_buffer;\n+extern diagnostic_context *global_dc;\n \n #define diagnostic_kind_count(BUFFER, DK) \\\n    (BUFFER)->state.diagnostic_count[(int) DK]"}]}