{"sha": "c9244494c07bce8ef0c7830b101eb94e9eff3bc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkyNDQ0OTRjMDdiY2U4ZWYwYzc4MzBiMTAxZWI5NGU5ZWZmM2JjMA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-09-04T17:23:01Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-09-04T17:23:01Z"}, "message": "Fix ldrd offsets\n\nFix the ldrd offsets of Thumb-2 - for TARGET_LDRD the range is +-1020,\nwithout -252..4096.  This reduces the number of addressing instructions\nwhen using DI mode operations (such as in PR77308).\n\n    gcc/\n\t* config/arm/arm.c (arm_legitimate_index_p): Add comment.\n\t(thumb2_legitimate_index_p): Use correct range for DI/DF mode.\n\nFrom-SVN: r251681", "tree": {"sha": "e67de2bb38efd630c105828175444df243e7ff52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e67de2bb38efd630c105828175444df243e7ff52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9244494c07bce8ef0c7830b101eb94e9eff3bc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9244494c07bce8ef0c7830b101eb94e9eff3bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9244494c07bce8ef0c7830b101eb94e9eff3bc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9244494c07bce8ef0c7830b101eb94e9eff3bc0/comments", "author": null, "committer": null, "parents": [{"sha": "df66af3b1edaf46420191aec73311fa408cb18c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df66af3b1edaf46420191aec73311fa408cb18c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df66af3b1edaf46420191aec73311fa408cb18c1"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "74bf4a07f98e89b922375d3fabff731312dd8c60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9244494c07bce8ef0c7830b101eb94e9eff3bc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9244494c07bce8ef0c7830b101eb94e9eff3bc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9244494c07bce8ef0c7830b101eb94e9eff3bc0", "patch": "@@ -1,3 +1,8 @@\n+2017-09-04  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/arm/arm.c (arm_legitimate_index_p): Add comment.\n+\t(thumb2_legitimate_index_p): Use correct range for DI/DF mode.\n+\n 2017-09-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR target/77308"}, {"sha": "487095785414531c3e3302932e5d17848b07a8c6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9244494c07bce8ef0c7830b101eb94e9eff3bc0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9244494c07bce8ef0c7830b101eb94e9eff3bc0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c9244494c07bce8ef0c7830b101eb94e9eff3bc0", "patch": "@@ -7932,6 +7932,8 @@ arm_legitimate_index_p (machine_mode mode, rtx index, RTX_CODE outer,\n \t{\n \t  HOST_WIDE_INT val = INTVAL (index);\n \n+\t  /* Assume we emit ldrd or 2x ldr if !TARGET_LDRD.\n+\t     If vldr is selected it uses arm_coproc_mem_operand.  */\n \t  if (TARGET_LDRD)\n \t    return val > -256 && val < 256;\n \t  else\n@@ -8059,11 +8061,13 @@ thumb2_legitimate_index_p (machine_mode mode, rtx index, int strict_p)\n       if (code == CONST_INT)\n \t{\n \t  HOST_WIDE_INT val = INTVAL (index);\n-\t  /* ??? Can we assume ldrd for thumb2?  */\n-\t  /* Thumb-2 ldrd only has reg+const addressing modes.  */\n-\t  /* ldrd supports offsets of +-1020.\n-\t     However the ldr fallback does not.  */\n-\t  return val > -256 && val < 256 && (val & 3) == 0;\n+\t  /* Thumb-2 ldrd only has reg+const addressing modes.\n+\t     Assume we emit ldrd or 2x ldr if !TARGET_LDRD.\n+\t     If vldr is selected it uses arm_coproc_mem_operand.  */\n+\t  if (TARGET_LDRD)\n+\t    return IN_RANGE (val, -1020, 1020) && (val & 3) == 0;\n+\t  else\n+\t    return IN_RANGE (val, -255, 4095 - 4);\n \t}\n       else\n \treturn 0;"}]}