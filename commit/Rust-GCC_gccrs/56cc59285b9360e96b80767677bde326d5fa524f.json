{"sha": "56cc59285b9360e96b80767677bde326d5fa524f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZjYzU5Mjg1YjkzNjBlOTZiODA3Njc2NzdiZGUzMjZkNWZhNTI0Zg==", "commit": {"author": {"name": "Joel Sherrill", "email": "joel.sherrill@oarcorp.com", "date": "2008-09-05T18:46:56Z"}, "committer": {"name": "Joel Sherrill", "email": "joel@gcc.gnu.org", "date": "2008-09-05T18:46:56Z"}, "message": "s-stchop-rtems.adb: Add file missed in early commit.\n\n2008-09-05  Joel Sherrill <joel.sherrill@oarcorp.com>\n\n\t* s-stchop-rtems.adb: Add file missed in early commit.  Already\n\treferenced in gcc-interface/Makefile.in.\n\nFrom-SVN: r140042", "tree": {"sha": "1ef4b35e5d6f22711798992954e0fa814e2b5ea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ef4b35e5d6f22711798992954e0fa814e2b5ea0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56cc59285b9360e96b80767677bde326d5fa524f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56cc59285b9360e96b80767677bde326d5fa524f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56cc59285b9360e96b80767677bde326d5fa524f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56cc59285b9360e96b80767677bde326d5fa524f/comments", "author": {"login": "joelsherrill", "id": 183688, "node_id": "MDQ6VXNlcjE4MzY4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/183688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joelsherrill", "html_url": "https://github.com/joelsherrill", "followers_url": "https://api.github.com/users/joelsherrill/followers", "following_url": "https://api.github.com/users/joelsherrill/following{/other_user}", "gists_url": "https://api.github.com/users/joelsherrill/gists{/gist_id}", "starred_url": "https://api.github.com/users/joelsherrill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joelsherrill/subscriptions", "organizations_url": "https://api.github.com/users/joelsherrill/orgs", "repos_url": "https://api.github.com/users/joelsherrill/repos", "events_url": "https://api.github.com/users/joelsherrill/events{/privacy}", "received_events_url": "https://api.github.com/users/joelsherrill/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bbdcb943b5becade04d5210173ba07e4fbed5611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdcb943b5becade04d5210173ba07e4fbed5611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbdcb943b5becade04d5210173ba07e4fbed5611"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "0ce56a66a9780c637227c221dda61237f13b5005", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56cc59285b9360e96b80767677bde326d5fa524f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56cc59285b9360e96b80767677bde326d5fa524f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=56cc59285b9360e96b80767677bde326d5fa524f", "patch": "@@ -1,3 +1,8 @@\n+2008-09-05  Joel Sherrill <joel.sherrill@oarcorp.com>\n+\n+\t* s-stchop-rtems.adb: Add file missed in early commit.  Already\n+\treferenced in gcc-interface/Makefile.in.\n+\n 2008-08-30  Thomas Quinot  <quinot@adacore.com>\n \n \t* gcc-interface/Make-lang.in: Allow s-oscons.{o,ali} to"}, {"sha": "3b06bb64c3bb1bb63f3e5fbc685a1ef852f424db", "filename": "gcc/ada/s-stchop-rtems.adb", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56cc59285b9360e96b80767677bde326d5fa524f/gcc%2Fada%2Fs-stchop-rtems.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56cc59285b9360e96b80767677bde326d5fa524f/gcc%2Fada%2Fs-stchop-rtems.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stchop-rtems.adb?ref=56cc59285b9360e96b80767677bde326d5fa524f", "patch": "@@ -0,0 +1,114 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n+--                                                                          --\n+--     S Y S T E M . S T A C K _ C H E C K I N G . O P E R A T I O N S      --\n+--                                                                          --\n+--                                  B o d y                                 --\n+--                                                                          --\n+--          Copyright (C) 1999-2008, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the RTEMS version of this package.\n+--  This file should be kept synchronized with the general implementation\n+--  provided by s-stchop.adb.\n+\n+pragma Restrictions (No_Elaboration_Code);\n+--  We want to guarantee the absence of elaboration code because the\n+--  binder does not handle references to this package.\n+\n+with Ada.Exceptions;\n+\n+with Interfaces.C; use Interfaces.C;\n+\n+package body System.Stack_Checking.Operations is\n+\n+   ----------------------------\n+   -- Invalidate_Stack_Cache --\n+   ----------------------------\n+\n+   procedure Invalidate_Stack_Cache (Any_Stack : Stack_Access) is\n+      pragma Warnings (Off, Any_Stack);\n+   begin\n+      Cache := Null_Stack;\n+   end Invalidate_Stack_Cache;\n+\n+   -----------------------------\n+   -- Notify_Stack_Attributes --\n+   -----------------------------\n+\n+   procedure Notify_Stack_Attributes\n+     (Initial_SP : System.Address;\n+      Size       : System.Storage_Elements.Storage_Offset)\n+   is\n+\n+      --  RTEMS keeps all the information we need.\n+\n+      pragma Unreferenced (Size);\n+      pragma Unreferenced (Initial_SP);\n+\n+   begin\n+      null;\n+   end Notify_Stack_Attributes;\n+\n+   -----------------\n+   -- Stack_Check --\n+   -----------------\n+\n+   function Stack_Check\n+     (Stack_Address : System.Address) return Stack_Access\n+   is\n+      pragma Unreferenced (Stack_Address);\n+\n+      --  RTEMS has a routine to check this.  So use it.\n+      function rtems_stack_checker_is_blown return Interfaces.C.int;\n+      pragma Import (C,\n+         rtems_stack_checker_is_blown, \"rtems_stack_checker_is_blown\");\n+\n+   begin\n+      --  RTEMS has a routine to check this.  So use it.\n+\n+      if rtems_stack_checker_is_blown /= 0 then\n+         Ada.Exceptions.Raise_Exception\n+           (E       => Storage_Error'Identity,\n+            Message => \"stack overflow detected\");\n+      end if;\n+\n+      return null;\n+\n+   end Stack_Check;\n+\n+   ------------------------\n+   -- Update_Stack_Cache --\n+   ------------------------\n+\n+   procedure Update_Stack_Cache (Stack : Stack_Access) is\n+   begin\n+      if not Multi_Processor then\n+         Cache := Stack;\n+      end if;\n+   end Update_Stack_Cache;\n+\n+end System.Stack_Checking.Operations;"}]}