{"sha": "1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI2NWRhN2RmZDhmY2E4YmE5OWM2YWY2Y2RiYzRiMWEwNjdiODYyMA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-09-16T18:27:10Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-09-16T18:27:10Z"}, "message": "re PR target/50358 (AVR: Implement [u]maddqihi4 [u]msubqihi4 patterns on the enhanced core)\n\n\tPR target/50358\n\t* config/avr/avr.md (*ashiftqihi2.signx.1): New insn.\n\t(*maddqi4, *maddqi4.const): New insns.\n\t(*msubqi4, *msubqi4.const): New insns.\n\t* config/avr/avr.c (avr_rtx_costs): Record costs of above in cases\n\tPLUS:QI and MINUS:QI.  Increase costs of multiply-add/-sub for\n\tHImode by 1 in the case of multiplying with a CONST_INT.\n\tRecord cost of *ashiftqihi2.signx.1 in case ASHIFT:QI.\n\nFrom-SVN: r178912", "tree": {"sha": "0700ffb1a342f14f27c505db50d258963e552953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0700ffb1a342f14f27c505db50d258963e552953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71743a68ece25642e8f00467bc2e0ac58fb0b970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71743a68ece25642e8f00467bc2e0ac58fb0b970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71743a68ece25642e8f00467bc2e0ac58fb0b970"}], "stats": {"total": 128, "additions": 127, "deletions": 1}, "files": [{"sha": "25cd753744951088137518b0afb2d7045459ae6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620", "patch": "@@ -1,3 +1,14 @@\n+2011-09-16  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/50358\n+\t* config/avr/avr.md (*ashiftqihi2.signx.1): New insn.\n+\t(*maddqi4, *maddqi4.const): New insns.\n+\t(*msubqi4, *msubqi4.const): New insns.\n+\t* config/avr/avr.c (avr_rtx_costs): Record costs of above in cases\n+\tPLUS:QI and MINUS:QI.  Increase costs of multiply-add/-sub for\n+\tHImode by 1 in the case of multiplying with a CONST_INT.\n+\tRecord cost of *ashiftqihi2.signx.1 in case ASHIFT:QI.\n+\n 2011-09-15   Jan Hubicka  <jh@suse.cz>\n \n \tPR lto/50430"}, {"sha": "b69efa9507585dfe68d04f081a3419a6a0dca05f", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620", "patch": "@@ -1528,7 +1528,7 @@ notice_update_cc (rtx body ATTRIBUTE_UNUSED, rtx insn)\n       /* Insn doesn't leave CC in a usable state.  */\n       CC_STATUS_INIT;\n \n-      /* Correct CC for the ashrqi3 with the shift count as CONST_INT != 6 */\n+      /* Correct CC for the ashrqi3 with the shift count as CONST_INT < 6 */\n       set = single_set (insn);\n       if (set)\n \t{\n@@ -5570,6 +5570,17 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED,\n       switch (mode)\n \t{\n \tcase QImode:\n+          if (AVR_HAVE_MUL\n+              && MULT == GET_CODE (XEXP (x, 0))\n+              && register_operand (XEXP (x, 1), QImode))\n+            {\n+              /* multiply-add */\n+              *total = COSTS_N_INSNS (speed ? 4 : 3);\n+              /* multiply-add with constant: will be split and load constant. */\n+              if (CONST_INT_P (XEXP (XEXP (x, 0), 1)))\n+                *total = COSTS_N_INSNS (1) + *total;\n+              return true;\n+            }\n \t  *total = COSTS_N_INSNS (1);\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n@@ -5583,7 +5594,11 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED,\n               && (ZERO_EXTEND == GET_CODE (XEXP (XEXP (x, 0), 0))\n                   || SIGN_EXTEND == GET_CODE (XEXP (XEXP (x, 0), 0))))\n             {\n+              /* multiply-add */\n               *total = COSTS_N_INSNS (speed ? 5 : 4);\n+              /* multiply-add with constant: will be split and load constant. */\n+              if (CONST_INT_P (XEXP (XEXP (x, 0), 1)))\n+                *total = COSTS_N_INSNS (1) + *total;\n               return true;\n             }\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n@@ -5618,6 +5633,18 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED,\n       return true;\n \n     case MINUS:\n+      if (AVR_HAVE_MUL\n+          && QImode == mode\n+          && register_operand (XEXP (x, 0), QImode)\n+          && MULT == GET_CODE (XEXP (x, 1)))\n+        {\n+          /* multiply-sub */\n+          *total = COSTS_N_INSNS (speed ? 4 : 3);\n+          /* multiply-sub with constant: will be split and load constant. */\n+          if (CONST_INT_P (XEXP (XEXP (x, 1), 1)))\n+            *total = COSTS_N_INSNS (1) + *total;\n+          return true;\n+        }\n       if (AVR_HAVE_MUL\n           && HImode == mode\n           && register_operand (XEXP (x, 0), HImode)\n@@ -5626,7 +5653,11 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED,\n           && (ZERO_EXTEND == GET_CODE (XEXP (XEXP (x, 1), 0))\n               || SIGN_EXTEND == GET_CODE (XEXP (XEXP (x, 1), 0))))\n         {\n+          /* multiply-sub */\n           *total = COSTS_N_INSNS (speed ? 5 : 4);\n+          /* multiply-sub with constant: will be split and load constant. */\n+          if (CONST_INT_P (XEXP (XEXP (x, 1), 1)))\n+            *total = COSTS_N_INSNS (1) + *total;\n           return true;\n         }\n     case AND:\n@@ -5815,6 +5846,13 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED,\n                 }\n             }\n           \n+          if (const1_rtx == (XEXP (x, 1))\n+              && SIGN_EXTEND == GET_CODE (XEXP (x, 0)))\n+            {\n+              *total = COSTS_N_INSNS (2);\n+              return true;\n+            }\n+          \n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 5 : 41);"}, {"sha": "c16150497eb320c1ba0e16a25147b8f855f2b586", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620", "patch": "@@ -1137,6 +1137,72 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n \n+;******************************************************************************\n+; multiply-add/sub QI: $0 = $3 +/- $1*$2\n+;******************************************************************************\n+\n+(define_insn \"*maddqi4\"\n+  [(set (match_operand:QI 0 \"register_operand\"                  \"=r\")\n+        (plus:QI (mult:QI (match_operand:QI 1 \"register_operand\" \"r\")\n+                          (match_operand:QI 2 \"register_operand\" \"r\"))\n+                 (match_operand:QI 3 \"register_operand\"          \"0\")))]\n+  \n+  \"AVR_HAVE_MUL\"\n+  \"mul %1,%2\n+\tadd %A0,r0\n+\tclr __zero_reg__\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+(define_insn \"*msubqi4\"\n+  [(set (match_operand:QI 0 \"register_operand\"                   \"=r\")\n+        (minus:QI (match_operand:QI 3 \"register_operand\"          \"0\")\n+                  (mult:QI (match_operand:QI 1 \"register_operand\" \"r\")\n+                           (match_operand:QI 2 \"register_operand\" \"r\"))))]\n+  \"AVR_HAVE_MUL\"\n+  \"mul %1,%2\n+\tsub %A0,r0\n+\tclr __zero_reg__\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+(define_insn_and_split \"*maddqi4.const\"\n+  [(set (match_operand:QI 0 \"register_operand\"                   \"=r\")\n+        (plus:QI (mult:QI (match_operand:QI 1 \"register_operand\"  \"r\")\n+                          (match_operand:QI 2 \"const_int_operand\" \"n\"))\n+                 (match_operand:QI 3 \"register_operand\"           \"0\")))\n+   (clobber (match_scratch:QI 4                                 \"=&d\"))]\n+  \"AVR_HAVE_MUL\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4)\n+        (match_dup 2))\n+   ; *maddqi4\n+   (set (match_dup 0)\n+        (plus:QI (mult:QI (match_dup 1)\n+                          (match_dup 4))\n+                 (match_dup 3)))]\n+  \"\")\n+\n+(define_insn_and_split \"*msubqi4.const\"\n+  [(set (match_operand:QI 0 \"register_operand\"                    \"=r\")\n+        (minus:QI (match_operand:QI 3 \"register_operand\"           \"0\")\n+                  (mult:QI (match_operand:QI 1 \"register_operand\"  \"r\")\n+                           (match_operand:QI 2 \"const_int_operand\" \"n\"))))\n+   (clobber (match_scratch:QI 4                                  \"=&d\"))]\n+  \"AVR_HAVE_MUL\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4)\n+        (match_dup 2))\n+   ; *msubqi4\n+   (set (match_dup 0)\n+        (minus:QI (match_dup 3)\n+                  (mult:QI (match_dup 1)\n+                           (match_dup 4))))]\n+  \"\")\n+\n+\n ;******************************************************************************\n ; multiply-add/sub HI: $0 = $3 +/- $1*$2  with 8-bit values $1, $2\n ;******************************************************************************\n@@ -1497,6 +1563,17 @@\n ;; expand decides to use ASHIFT instead of MUL because ASHIFT costs are cheaper\n ;; at that time.  Fix that.\n \n+(define_insn \"*ashiftqihi2.signx.1\"\n+  [(set (match_operand:HI 0 \"register_operand\"                           \"=r,*r\")\n+        (ashift:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"0,r\"))\n+                   (const_int 1)))]\n+  \"\"\n+  \"@\n+\tlsl %A0\\;sbc %B0,%B0\n+\tmov %A0,%1\\;lsl %A0\\;sbc %B0,%B0\"\n+  [(set_attr \"length\" \"2,3\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n (define_insn_and_split \"*ashifthi3.signx.const\"\n   [(set (match_operand:HI 0 \"register_operand\"                           \"=r\")\n         (ashift:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"d\"))"}]}