{"sha": "1d09844a1cff1a78d24eba41a1443903da0bacfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQwOTg0NGExY2ZmMWE3OGQyNGViYTQxYTE0NDM5MDNkYTBiYWNmZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-12-08T08:26:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-12-08T08:26:06Z"}, "message": "P0003R5 - removal of dynamic exception specification from C++17\n\n\tP0003R5 - removal of dynamic exception specification from C++17\n\t* parser.c (cp_parser_exception_specification_opt): For C++17\n\terror out on throw ( type-id-list ), for C++11 and C++14 issue\n\t-Wdeprecated warning on it.  Formatting fix.  Treat throw()\n\tin C++17 as noexcept(true).\n\n\t* g++.dg/compat/eh/ctor1.h: Adjust for deprecation of\n\tthrow (type-id-list) in C++11 and C++14 and removal in C++17.\n\t* g++.dg/compat/eh/ctor1_y.C: Likewise.\n\t* g++.dg/compat/eh/new1_x.C: Likewise.\n\t* g++.dg/compat/eh/new1_y.C: Likewise.\n\t* g++.dg/compat/eh/spec3_x.C: Likewise.\n\t* g++.dg/compat/eh/spec3_y.C: Likewise.\n\t* g++.dg/compat/eh/template1.h: Likewise.\n\t* g++.dg/compat/eh/template1_y.C: Likewise.\n\t* g++.dg/compat/eh/unexpected1_x.C: Likewise.\n\t* g++.dg/compat/eh/unexpected1_y.C: Likewise.\n\t* g++.dg/cpp0x/auto9.C: Likewise.\n\t* g++.dg/cpp0x/defaulted23.C: Likewise.\n\t* g++.dg/cpp0x/error5.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-eh2.C: Likewise.\n\t* g++.dg/cpp0x/noexcept02.C: Likewise.\n\t* g++.dg/cpp0x/noexcept07.C: Likewise.\n\t* g++.dg/cpp0x/noexcept08.C: Likewise.\n\t* g++.dg/cpp0x/noexcept19.C: Likewise.\n\t* g++.dg/cpp0x/variadic73.C: Likewise.\n\t* g++.dg/cpp0x/variadic-throw.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type1.C: Likewise.\n\t* g++.dg/eh/async-unwind2.C: Likewise.\n\t* g++.dg/eh/cond4.C: Likewise.\n\t* g++.dg/eh/delete1.C: Likewise.\n\t* g++.dg/eh/ehopt1.C: Likewise.\n\t* g++.dg/eh/forced3.C: Likewise.\n\t* g++.dg/eh/forced4.C: Likewise.\n\t* g++.dg/eh/init-temp2.C: Likewise.\n\t* g++.dg/eh/pr38662.C: Likewise.\n\t* g++.dg/eh/pr41819.C: Likewise.\n\t* g++.dg/eh/shadow1.C: Likewise.\n\t* g++.dg/eh/spec2.C: Likewise.\n\t* g++.dg/eh/spec3.C: Likewise.\n\t* g++.dg/eh/spec5.C: Likewise.\n\t* g++.dg/eh/spec6.C: Likewise.\n\t* g++.dg/eh/spec7.C: Likewise.\n\t* g++.dg/eh/spec8.C: Likewise.\n\t* g++.dg/eh/spec9.C: Likewise.\n\t* g++.dg/eh/template1.C: Likewise.\n\t* g++.dg/eh/unexpected1.C: Likewise.\n\t* g++.dg/ext/has_nothrow_assign.C: Likewise.\n\t* g++.dg/ext/has_nothrow_constructor.C: Likewise.\n\t* g++.dg/ext/has_nothrow_copy-1.C: Likewise.\n\t* g++.dg/ext/has_nothrow_copy-2.C: Likewise.\n\t* g++.dg/ext/has_nothrow_copy-4.C: Likewise.\n\t* g++.dg/ext/has_nothrow_copy-5.C: Likewise.\n\t* g++.dg/ext/has_nothrow_copy-6.C: Likewise.\n\t* g++.dg/ext/has_nothrow_copy-7.C: Likewise.\n\t* g++.dg/gcov/gcov-7.C: Likewise.\n\t* g++.dg/init/new13.C: Likewise.\n\t* g++.dg/init/new25.C: Likewise.\n\t* g++.dg/lookup/exception1.C: Likewise.\n\t* g++.dg/opt/noreturn-1.C: Likewise.\n\t* g++.dg/other/error3.C: Likewise.\n\t* g++.dg/rtti/crash3.C: Likewise.\n\t* g++.dg/template/eh2.C: Likewise.\n\t* g++.dg/template/error36.C: Likewise.\n\t* g++.dg/tm/pr46567.C: Likewise.\n\t* g++.dg/tm/pr47340.C: Likewise.\n\t* g++.dg/torture/pr46364.C: Likewise.\n\t* g++.dg/torture/pr49394.C: Likewise.\n\t* g++.dg/torture/pr52918-1.C: Likewise.\n\t* g++.dg/torture/pr57190.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-alloca-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-fastcall-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-global-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-inline-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-inline-2.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-thiscall-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-vararg-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-vararg-2.C: Likewise.\n\t* g++.dg/tree-ssa/pr45605.C: Likewise.\n\t* g++.dg/warn/Wreturn-type-3.C: Likewise.\n\t* g++.old-deja/g++.eh/badalloc1.C: Likewise.\n\t* g++.old-deja/g++.eh/cleanup2.C: Likewise.\n\t* g++.old-deja/g++.eh/spec1.C: Likewise.\n\t* g++.old-deja/g++.eh/spec2.C: Likewise.\n\t* g++.old-deja/g++.eh/spec3.C: Likewise.\n\t* g++.old-deja/g++.eh/spec4.C: Likewise.\n\t* g++.old-deja/g++.eh/spec6.C: Likewise.\n\t* g++.old-deja/g++.eh/throw1.C: Likewise.\n\t* g++.old-deja/g++.eh/throw2.C: Likewise.\n\t* g++.old-deja/g++.eh/tmpl1.C: Likewise.\n\t* g++.old-deja/g++.eh/tmpl3.C: Likewise.\n\t* g++.old-deja/g++.mike/eh15.C: Likewise.\n\t* g++.old-deja/g++.mike/eh25.C: Likewise.\n\t* g++.old-deja/g++.mike/eh33.C: Likewise.\n\t* g++.old-deja/g++.mike/eh34.C: Likewise.\n\t* g++.old-deja/g++.mike/eh50.C: Likewise.\n\t* g++.old-deja/g++.mike/eh51.C: Likewise.\n\t* g++.old-deja/g++.mike/eh55.C: Likewise.\n\t* g++.old-deja/g++.mike/p10416.C: Likewise.\n\t* g++.old-deja/g++.other/crash28.C: Likewise.\n\t* g++.old-deja/g++.other/crash30.C: Likewise.\n\t* g++.old-deja/g++.other/new7.C: Likewise.\n\t* g++.old-deja/g++.pt/ehspec1.C: Likewise.\n\t* g++.old-deja/g++.robertl/eb123.C: Likewise.\n\n\t* testsuite/util/testsuite_new_operators.h: Include testsuite_hooks.h.\n\t(operator new): Use THROW macro.\n\nFrom-SVN: r243429", "tree": {"sha": "5ecd32fc451a6802fb2f17da35cdfddb84b114d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ecd32fc451a6802fb2f17da35cdfddb84b114d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d09844a1cff1a78d24eba41a1443903da0bacfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d09844a1cff1a78d24eba41a1443903da0bacfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d09844a1cff1a78d24eba41a1443903da0bacfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d09844a1cff1a78d24eba41a1443903da0bacfd/comments", "author": null, "committer": null, "parents": [{"sha": "23b88fda665d2f995c73336f74dcf8931f5fdf71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b88fda665d2f995c73336f74dcf8931f5fdf71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b88fda665d2f995c73336f74dcf8931f5fdf71"}], "stats": {"total": 919, "additions": 720, "deletions": 199}, "files": [{"sha": "e32516450511db13bc9fa2aec06304b9347f2ead", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,3 +1,11 @@\n+2016-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tP0003R5 - removal of dynamic exception specification from C++17\n+\t* parser.c (cp_parser_exception_specification_opt): For C++17\n+\terror out on throw ( type-id-list ), for C++11 and C++14 issue\n+\t-Wdeprecated warning on it.  Formatting fix.  Treat throw()\n+\tin C++17 as noexcept(true).\n+\n 2016-12-07  Martin Jambor  <mjambor@suse.cz>\n \n \tPR c++/78589"}, {"sha": "70e5fb33f7c93b9fa2a5319c2dc8fb7ed95676e6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -23786,21 +23786,16 @@ cp_parser_exception_specification_opt (cp_parser* parser)\n   token = cp_lexer_peek_token (parser->lexer);\n \n   /* Is it a noexcept-specification?  */\n-  type_id_list = cp_parser_noexcept_specification_opt(parser, true, NULL,\n-\t\t\t\t\t\t      false);\n+  type_id_list = cp_parser_noexcept_specification_opt (parser, true, NULL,\n+\t\t\t\t\t\t       false);\n   if (type_id_list != NULL_TREE)\n     return type_id_list;\n \n   /* If it's not `throw', then there's no exception-specification.  */\n   if (!cp_parser_is_keyword (token, RID_THROW))\n     return NULL_TREE;\n \n-#if 0\n-  /* Enable this once a lot of code has transitioned to noexcept?  */\n-  if (cxx_dialect >= cxx11 && !in_system_header_at (input_location))\n-    warning (OPT_Wdeprecated, \"dynamic exception specifications are \"\n-\t     \"deprecated in C++0x; use %<noexcept%> instead\");\n-#endif\n+  location_t loc = token->location;\n \n   /* Consume the `throw'.  */\n   cp_lexer_consume_token (parser->lexer);\n@@ -23821,7 +23816,23 @@ cp_parser_exception_specification_opt (cp_parser* parser)\n       type_id_list = cp_parser_type_id_list (parser);\n       /* Restore the saved message.  */\n       parser->type_definition_forbidden_message = saved_message;\n+\n+      if (cxx_dialect >= cxx1z)\n+\t{\n+\t  error_at (loc, \"ISO C++1z does not allow dynamic exception \"\n+\t\t\t \"specifications\");\n+\t  type_id_list = NULL_TREE;\n+\t}\n+      else if (cxx_dialect >= cxx11 && !in_system_header_at (loc))\n+\twarning_at (loc, OPT_Wdeprecated,\n+\t\t    \"dynamic exception specifications are deprecated in C++11;\"\n+\t\t    \" use %<noexcept%> instead\");\n     }\n+  /* In C++17, throw() is equivalent to noexcept (true).  throw()\n+     is deprecated in C++11 and above as well, but is still widely used,\n+     so don't warn about it yet.  */\n+  else if (cxx_dialect >= cxx1z)\n+    type_id_list = noexcept_true_spec;\n   else\n     type_id_list = empty_except_spec;\n "}, {"sha": "b6b00960420acd09326ab162b082ad5aac282fd5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 121, "deletions": 20, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,17 +1,118 @@\n+2016-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tP0003R5 - removal of dynamic exception specification from C++17\n+\t* g++.dg/compat/eh/ctor1.h: Adjust for deprecation of\n+\tthrow (type-id-list) in C++11 and C++14 and removal in C++17.\n+\t* g++.dg/compat/eh/ctor1_y.C: Likewise.\n+\t* g++.dg/compat/eh/new1_x.C: Likewise.\n+\t* g++.dg/compat/eh/new1_y.C: Likewise.\n+\t* g++.dg/compat/eh/spec3_x.C: Likewise.\n+\t* g++.dg/compat/eh/spec3_y.C: Likewise.\n+\t* g++.dg/compat/eh/template1.h: Likewise.\n+\t* g++.dg/compat/eh/template1_y.C: Likewise.\n+\t* g++.dg/compat/eh/unexpected1_x.C: Likewise.\n+\t* g++.dg/compat/eh/unexpected1_y.C: Likewise.\n+\t* g++.dg/cpp0x/auto9.C: Likewise.\n+\t* g++.dg/cpp0x/defaulted23.C: Likewise.\n+\t* g++.dg/cpp0x/error5.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-eh2.C: Likewise.\n+\t* g++.dg/cpp0x/noexcept02.C: Likewise.\n+\t* g++.dg/cpp0x/noexcept07.C: Likewise.\n+\t* g++.dg/cpp0x/noexcept08.C: Likewise.\n+\t* g++.dg/cpp0x/noexcept19.C: Likewise.\n+\t* g++.dg/cpp0x/variadic73.C: Likewise.\n+\t* g++.dg/cpp0x/variadic-throw.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type1.C: Likewise.\n+\t* g++.dg/eh/async-unwind2.C: Likewise.\n+\t* g++.dg/eh/cond4.C: Likewise.\n+\t* g++.dg/eh/delete1.C: Likewise.\n+\t* g++.dg/eh/ehopt1.C: Likewise.\n+\t* g++.dg/eh/forced3.C: Likewise.\n+\t* g++.dg/eh/forced4.C: Likewise.\n+\t* g++.dg/eh/init-temp2.C: Likewise.\n+\t* g++.dg/eh/pr38662.C: Likewise.\n+\t* g++.dg/eh/pr41819.C: Likewise.\n+\t* g++.dg/eh/shadow1.C: Likewise.\n+\t* g++.dg/eh/spec2.C: Likewise.\n+\t* g++.dg/eh/spec3.C: Likewise.\n+\t* g++.dg/eh/spec5.C: Likewise.\n+\t* g++.dg/eh/spec6.C: Likewise.\n+\t* g++.dg/eh/spec7.C: Likewise.\n+\t* g++.dg/eh/spec8.C: Likewise.\n+\t* g++.dg/eh/spec9.C: Likewise.\n+\t* g++.dg/eh/template1.C: Likewise.\n+\t* g++.dg/eh/unexpected1.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_assign.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_constructor.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-1.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-2.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-4.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-5.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-6.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-7.C: Likewise.\n+\t* g++.dg/gcov/gcov-7.C: Likewise.\n+\t* g++.dg/init/new13.C: Likewise.\n+\t* g++.dg/init/new25.C: Likewise.\n+\t* g++.dg/lookup/exception1.C: Likewise.\n+\t* g++.dg/opt/noreturn-1.C: Likewise.\n+\t* g++.dg/other/error3.C: Likewise.\n+\t* g++.dg/rtti/crash3.C: Likewise.\n+\t* g++.dg/template/eh2.C: Likewise.\n+\t* g++.dg/template/error36.C: Likewise.\n+\t* g++.dg/tm/pr46567.C: Likewise.\n+\t* g++.dg/tm/pr47340.C: Likewise.\n+\t* g++.dg/torture/pr46364.C: Likewise.\n+\t* g++.dg/torture/pr49394.C: Likewise.\n+\t* g++.dg/torture/pr52918-1.C: Likewise.\n+\t* g++.dg/torture/pr57190.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-alloca-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-fastcall-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-global-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-inline-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-inline-2.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-thiscall-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-vararg-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-vararg-2.C: Likewise.\n+\t* g++.dg/tree-ssa/pr45605.C: Likewise.\n+\t* g++.dg/warn/Wreturn-type-3.C: Likewise.\n+\t* g++.old-deja/g++.eh/badalloc1.C: Likewise.\n+\t* g++.old-deja/g++.eh/cleanup2.C: Likewise.\n+\t* g++.old-deja/g++.eh/spec1.C: Likewise.\n+\t* g++.old-deja/g++.eh/spec2.C: Likewise.\n+\t* g++.old-deja/g++.eh/spec3.C: Likewise.\n+\t* g++.old-deja/g++.eh/spec4.C: Likewise.\n+\t* g++.old-deja/g++.eh/spec6.C: Likewise.\n+\t* g++.old-deja/g++.eh/throw1.C: Likewise.\n+\t* g++.old-deja/g++.eh/throw2.C: Likewise.\n+\t* g++.old-deja/g++.eh/tmpl1.C: Likewise.\n+\t* g++.old-deja/g++.eh/tmpl3.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh15.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh25.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh33.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh34.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh50.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh51.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh55.C: Likewise.\n+\t* g++.old-deja/g++.mike/p10416.C: Likewise.\n+\t* g++.old-deja/g++.other/crash28.C: Likewise.\n+\t* g++.old-deja/g++.other/crash30.C: Likewise.\n+\t* g++.old-deja/g++.other/new7.C: Likewise.\n+\t* g++.old-deja/g++.pt/ehspec1.C: Likewise.\n+\t* g++.old-deja/g++.robertl/eb123.C: Likewise.\n+\n 2016-12-08  Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n \n-\t* gcc.target/aarch64/pr78382.c : New Testcase.\n+\t* gcc.target/aarch64/pr78382.c: New testcase.\n \n 2016-12-08  Andrew Pinski  <apinski@cavium.com>\n \n-\t* gcc.target/aarch64/pr71112.c : New Testcase.\n+\t* gcc.target/aarch64/pr71112.c: New testcase.\n \n 2016-12-07  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/77784\n \tPR middle-end/78149\n \tPR middle-end/78138\n-\n \t* c-c++-common/Wsizeof-pointer-memaccess2.c: Adjust expected diagnostic.\n \t* g++.dg/ext/builtin-object-size3.C (bar): Same.\n \t* g++.dg/ext/strncpy-chk1.C: Same.\n@@ -84,7 +185,7 @@\n \n 2016-12-07  Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n \n-\t* gcc.target/aarch64/pr71727.c : New Testcase.\n+\t* gcc.target/aarch64/pr71727.c: New testcase.\n \n 2016-12-06  Tom de Vries  <tom@codesourcery.com>\n \n@@ -873,23 +974,23 @@\n \n 2016-11-23  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n-\t* gcc.target/aarch64/ldp_stp_1.c : Add -mcpu=generic.\n-\t* gcc.target/aarch64/store-pair-1.c : Likewise.\n+\t* gcc.target/aarch64/ldp_stp_1.c: Add -mcpu=generic.\n+\t* gcc.target/aarch64/store-pair-1.c: Likewise.\n \n 2016-11-23  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n-\t* gcc.target/aarch64/fmaxmin.c : Add -fno-vect-cost-model.\n-\t* gcc.target/aarch64/fmul_fcvt_2.c : Likewise.\n-\t* gcc.target/aarch64/vect-abs-compile.c : Likewise.\n-\t* gcc.target/aarch64/vect-clz.c : Likewise.\n-\t* gcc.target/aarch64/vect-fcm-eq-d.c : Likewise.\n-\t* gcc.target/aarch64/vect-fcm-ge-d.c : Likewise.\n-\t* gcc.target/aarch64/vect-fcm-gt-d.c : Likewise.\n-\t* gcc.target/aarch64/vect-fmovd-zero.c : Likewise.\n-\t* gcc.target/aarch64/vect-fmovd.c : Likewise.\n-\t* gcc.target/aarch64/vect-fmovf-zero.c : Likewise.\n-\t* gcc.target/aarch64/vect-fmovf.c : Likewise.\n-\t* gcc.target/aarch64/vect_ctz_1.c : Likewise.\n+\t* gcc.target/aarch64/fmaxmin.c: Add -fno-vect-cost-model.\n+\t* gcc.target/aarch64/fmul_fcvt_2.c: Likewise.\n+\t* gcc.target/aarch64/vect-abs-compile.c: Likewise.\n+\t* gcc.target/aarch64/vect-clz.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-eq-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-ge-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fmovd-zero.c: Likewise.\n+\t* gcc.target/aarch64/vect-fmovd.c: Likewise.\n+\t* gcc.target/aarch64/vect-fmovf-zero.c: Likewise.\n+\t* gcc.target/aarch64/vect-fmovf.c: Likewise.\n+\t* gcc.target/aarch64/vect_ctz_1.c: Likewise.\n \n 2016-11-23  Peter Bergner  <bergner@vnet.ibm.com>\n \n@@ -7061,7 +7162,7 @@\n 2016-07-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/71883\n-\t* gfortran.dg/pr71883.f90 : New test.\n+\t* gfortran.dg/pr71883.f90: New test.\n \n 2016-07-28  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n@@ -14685,7 +14786,7 @@\n 2016-02-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/69423\n-\t* gfortran.dg/deferred_character_15.f90 : New test.\n+\t* gfortran.dg/deferred_character_15.f90: New test.\n \n 2016-02-20  Dominique d'Humieres  <dominiq@lps.ens.fr>\n "}, {"sha": "e88a62d223a7ca9af698ca59dbe71ae7c45eb49c", "filename": "gcc/testsuite/g++.dg/compat/eh/ctor1.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1.h?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -5,6 +5,12 @@ struct Foo\n \n struct Bar\n {\n-  ~Bar () throw(int);\n+  ~Bar ()\n+#if __cplusplus < 201103L\n+  throw(int)\n+#else\n+  noexcept(false)\n+#endif\n+  ;\n   Foo f;\n };"}, {"sha": "5478bb79c2d5cd007123dc46fdd1cb096edb35b4", "filename": "gcc/testsuite/g++.dg/compat/eh/ctor1_y.C", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_y.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -7,7 +7,12 @@ Foo::~Foo()\n   was_f_in_Bar_destroyed=true;\n }\n \n-Bar::~Bar() throw(int)\n+Bar::~Bar()\n+#if __cplusplus < 201103L\n+throw(int)\n+#else\n+noexcept(false)\n+#endif\n {\n   throw 1;\n }"}, {"sha": "23ac80b87fc5f25c1ee6a1506a9e9eac6aa561b4", "filename": "gcc/testsuite/g++.dg/compat/eh/new1_x.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_x.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -4,7 +4,11 @@\n extern \"C\" void exit (int);\n extern \"C\" void abort (void);\n \n-extern void * operator new[] (std::size_t s) throw (std::bad_alloc);\n+extern void * operator new[] (std::size_t s)\n+#if __cplusplus < 201103L\n+throw (std::bad_alloc)\n+#endif\n+;\n extern void operator delete[] (void *p) throw ();\n \n struct A"}, {"sha": "1dd373dd382c2e612fc55041de5996b2c760692a", "filename": "gcc/testsuite/g++.dg/compat/eh/new1_y.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_y.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -4,7 +4,10 @@\n extern int ret;\n \n void *ptr;\n-void * operator new[] (std::size_t s) throw (std::bad_alloc)\n+void * operator new[] (std::size_t s)\n+#if __cplusplus < 201103L\n+throw (std::bad_alloc)\n+#endif\n {\n   ptr = operator new (s);\n   return ptr;"}, {"sha": "4c2aefd7c0eea7b5c986914551355e4149009a29", "filename": "gcc/testsuite/g++.dg/compat/eh/spec3_x.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_x.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,6 +1,10 @@\n #include \"spec3.h\"\n \n-extern void func () throw (B,A);\n+extern void func ()\n+#if __cplusplus < 201103L\n+throw (B,A)\n+#endif\n+;\n \n void spec3_x (void)\n {"}, {"sha": "78b0914cdc5c8ab44359f7bdca3d1dd8c963721f", "filename": "gcc/testsuite/g++.dg/compat/eh/spec3_y.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fspec3_y.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -2,7 +2,10 @@\n \n A::A() {}\n \n-void func() throw (B,A)\n+void func()\n+#if __cplusplus < 201103L\n+throw (B,A)\n+#endif\n {\n   throw A();\n }"}, {"sha": "c807b4753b5061a98ce29d6337d9830986b78819", "filename": "gcc/testsuite/g++.dg/compat/eh/template1.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1.h?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -11,5 +11,9 @@ struct C\n {\n   typedef B<T> D;\n   typedef typename D::E E;\n-  void f() throw(E);\n+  void f()\n+#if __cplusplus < 201103L\n+  throw(E)\n+#endif\n+  ;\n };"}, {"sha": "39559d917d118ea3efefc2639dba3509f9ed5dbe", "filename": "gcc/testsuite/g++.dg/compat/eh/template1_y.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ftemplate1_y.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,6 +1,9 @@\n #include \"template1.h\"\n \n-template<class T> void C<T>::f (void) throw (E)\n+template<class T> void C<T>::f (void)\n+#if __cplusplus < 201103L\n+throw (E)\n+#endif\n {\n   throw E();\n }"}, {"sha": "e8f87f1bc42980ae76790886da754dffd8739b9a", "filename": "gcc/testsuite/g++.dg/compat/eh/unexpected1_x.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_x.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options \"-std=c++98\" }\n+\n #include <exception>\n \n struct One { };"}, {"sha": "182b956c5f815a6cee215132e72faa5ce4379727", "filename": "gcc/testsuite/g++.dg/compat/eh/unexpected1_y.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Funexpected1_y.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options \"-std=c++98\" }\n+\n struct One { };\n struct Two { };\n "}, {"sha": "d71e55f8c50b9eb2eef0d213592f81cc06de38ef", "filename": "gcc/testsuite/g++.dg/cpp0x/auto9.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -103,13 +103,13 @@ auto fnlate2 () -> auto *;\t\t\t// { dg-error \"invalid use of|expected\" \"\" { target\n \n void\n badthrow () throw (auto)\t\t\t// { dg-error \"invalid use of\" }\n-{\n-}\n+{\t\t\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+}\t\t\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n \n void\n badthrow2 () throw (auto &)\t\t\t// { dg-error \"invalid use of|expected\" }\n-{\n-}\n+{\t\t\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+}\t\t\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n \n template <auto V = 4> struct G {};\t\t// { dg-error \"auto\" \"\" { target { ! c++1z } } }\n "}, {"sha": "4d418873f316c77b7df639d6901125799ea1f822", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted23.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted23.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -10,22 +10,22 @@ A a;\n \n struct B\n {\n-  B() throw (int) = default; // { dg-message \"exception-specification\" }\n-};\n-\n-B b;\t\t\t\t// { dg-error \"deleted\" }\n+  B() throw (int) = default; // { dg-message \"exception-specification\" \"\" { target { ! c++1z } } }\n+};\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n+B b;\t\t\t\t// { dg-error \"deleted\" \"\" { target { ! c++1z } } }\n \n struct C\n {\n-  C() throw (int) { }\n-};\n+  C() throw (int) { }\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n+};\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n \n C c;\n \n struct D: C\n {\n-  D() throw (int) = default;\n-};\n+  D() throw (int) = default;\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n+};\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n \n D d;\n "}, {"sha": "99fb8e0b709d0ab32ef3d8ca3d700864d96603e4", "filename": "gcc/testsuite/g++.dg/cpp0x/error5.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror5.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -39,7 +39,11 @@ namespace std\n struct bad_alloc { };\n }\n \n-void* operator new(std::size_t) throw (std::bad_alloc);\n+void* operator new(std::size_t)\n+#if __cplusplus <= 201402L\n+throw (std::bad_alloc)\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n+#endif\n+;\n \n namespace std\n {"}, {"sha": "330cf95c2d0a6f753c62959d2b436154ac69efad", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-eh2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-eh2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-eh2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-eh2.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,7 +1,7 @@\n // PR c++/47263\n // PR c++/49260\n // { dg-options \"-fno-asynchronous-unwind-tables -fno-dwarf2-cfi-asm\" }\n-// { dg-do run { target c++11 } }\n+// { dg-do run { target { c++11 && { ! c++1z } } } }\n \n #include <exception>\n \n@@ -10,7 +10,7 @@ int main( void )\n   std::set_unexpected( []{ throw 0; } );\n   try\n     {\n-      []() throw( int ) { throw nullptr; }();\n+      []() throw( int ) { throw nullptr; }();\t// { dg-warning \"deprecated\" }\n     }\n   catch( int )\n     { }"}, {"sha": "77195415fba6546565397c2d91d50aafd074410d", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept02.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -10,8 +10,10 @@ void f();\n \n SA(!noexcept(f()));\n \n-void g() throw (int);\t\t// { dg-message \"previous declaration\" }\n-void g() noexcept(false);\t// { dg-error \"different exception\" }\n+void g() throw (int);\t\t// { dg-message \"previous declaration\" \"\" { target { ! c++1z } } }\n+\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n+void g() noexcept(false);\t// { dg-error \"different exception\" \"\" { target { ! c++1z } } }\n void g();\n \n void h() throw();"}, {"sha": "de16e016ff412b885dcd918379860dc3b548f4a5", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept07.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept07.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept07.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept07.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,6 +1,6 @@\n // Test that checking of a nothrow specification uses the one on the\n-// definition.\n-// { dg-do run { target c++11 } }\n+// definition.  In C++17 throw() is equivalent to noexcept(true).\n+// { dg-do run { target { c++11 && c++14_down } } }\n \n #include <exception>\n #include <cstdlib>"}, {"sha": "5a554b7379aae515406ec03eba27622e063a0d77", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept08.C", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept08.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept08.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept08.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -7,8 +7,8 @@ struct A\n   virtual void g() throw();\n   virtual void h() noexcept;\n   virtual void i() noexcept(false);\n-  virtual void j() throw(int);\n-};\n+  virtual void j() throw(int);\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n+};\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n \n struct B: A\n {\n@@ -34,16 +34,23 @@ struct D: A\n   void g() noexcept(false);\t// { dg-error \"looser\" }\n   void h() noexcept(false);\t// { dg-error \"looser\" }\n   void i() noexcept(false);\n-  void j() noexcept(false);\t// { dg-error \"looser\" }\n+  void j() noexcept(false);\t// { dg-error \"looser\" \"\" { target { ! c++1z } } }\n };\n \n struct E: A\n {\n-  void f() throw(int);\n+  void f() throw(int);\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n   void g() throw(int);\t\t// { dg-error \"looser\" }\n+\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n   void h() throw(int);\t\t// { dg-error \"looser\" }\n-  void i() throw(int);\n-  void j() throw(int);\n+\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n+  void i() throw(int);\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n+  void j() throw(int);\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n };\n \n struct F: A\n@@ -52,5 +59,5 @@ struct F: A\n   void g();\t\t\t// { dg-error \"looser\" }\n   void h();\t\t\t// { dg-error \"looser\" }\n   void i();\n-  void j();\t\t\t// { dg-error \"looser\" }\n+  void j();\t\t\t// { dg-error \"looser\" \"\" { target { ! c++1z } } }\n };"}, {"sha": "8ec4d7df4422eb734eee22c19a7c1e2b42fa4f16", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept19.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept19.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -22,7 +22,11 @@ struct C\n \n struct D\n {\n-  D () throw (int);\n+  D ()\n+#if __cplusplus <= 201402L\n+  throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n+#endif\n+  ;\n };\n \n C <D, B <D>> c;"}, {"sha": "368a67b57769ec17120361e3283854e6b1403bfe", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-throw.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-throw.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-throw.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-throw.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -9,9 +9,9 @@ template<int M, int N> struct pair\n \n template<int... M> struct S\n {\n-  template<int... N> static int foo() throw (pair <M, N>...) // { dg-error \"mismatched\" }\n-  {\n-    return 1;\n+  template<int... N> static int foo() throw (pair <M, N>...) // { dg-error \"mismatched\" \"\" { target { ! c++1z } } }\n+  {\t\t\t\t\t\t\t     // { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+    return 1;\t\t\t\t\t\t     // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n   }\n };\n \n@@ -22,5 +22,5 @@ int bar ()\n \n int wibble()\n {\n-  return S<0, 1, 2>::foo<0, 1> (); // { dg-error \"no matching\" }\n+  return S<0, 1, 2>::foo<0, 1> (); // { dg-error \"no matching\" \"\" { target { ! c++1z } } }\n }"}, {"sha": "be998d2420ca7d707bebfd41a88bf43fa462c8e2", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic73.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic73.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic73.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic73.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -3,7 +3,11 @@ struct A {};\n struct B {};\n struct C {};\n \n-template<typename... Exceptions> void f(int idx) throw(Exceptions...) {\n+template<typename... Exceptions> void f(int idx)\n+#if __cplusplus <= 201402L\n+throw(Exceptions...)\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n+#endif\n+{\n   if (idx == 0) throw A();\n   else if (idx == 1) throw B();\n   else if (idx == 2) throw C();"}, {"sha": "dfe64e550e0dcf764d961169f536e9f0ccdd516c", "filename": "gcc/testsuite/g++.dg/cpp1z/noexcept-type1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,7 +1,7 @@\n // Testcase from P0012r1\n // { dg-options -std=c++1z }\n \n-void (*p)() throw(int);\n+void (*p)() throw(int);\t       // { dg-error \"dynamic exception specification\" }\n void (**pp)() noexcept = &p;   // { dg-error \"\" } cannot convert to pointer to noexcept function\n \n struct S { typedef void (*p)(); operator p(); };"}, {"sha": "0f84901fb6e0528d92ff8ed8e7683f7ed31afe4d", "filename": "gcc/testsuite/g++.dg/eh/async-unwind2.C", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fasync-unwind2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fasync-unwind2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fasync-unwind2.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -87,8 +87,16 @@ struct Y\n \n struct Z;\n \n-X <V> baz1 (const S &) throw (E);\n-X <Z> baz2 (const X <Z> &) throw (E);\n+X <V> baz1 (const S &)\n+#if __cplusplus <= 201402L\n+throw (E)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+;\n+X <Z> baz2 (const X <Z> &)\n+#if __cplusplus <= 201402L\n+throw (E)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+;\n \n template <typename T> X<T>::X ()\n {\n@@ -112,7 +120,10 @@ template <typename T> T *X<T>::operator -> () const\n   return &y;\n }\n \n-X <V> baz1 (const S &) throw (E)\n+X <V> baz1 (const S &)\n+#if __cplusplus <= 201402L\n+throw (E)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   return X<V> ();\n }\n@@ -125,7 +136,10 @@ E::~E ()\n {\n }\n \n-X <Z> baz2 (const X <Z> &) throw (E)\n+X <Z> baz2 (const X <Z> &)\n+#if __cplusplus <= 201402L\n+throw (E)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   throw E ();\n }"}, {"sha": "17e9149b97555a228bfc22f17c48f4f64160109f", "filename": "gcc/testsuite/g++.dg/eh/cond4.C", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcond4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcond4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcond4.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -12,7 +12,13 @@ void my_terminate ()\n \n struct A {\n   A(int) { }\n-  ~A() throw(int) { throw 1; };\n+  ~A()\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#else\n+  noexcept(false)\n+#endif\n+  { throw 1; };\n };\n struct B {\n   B(A) { }"}, {"sha": "46b5307e0b46c5b0eeedc49d09271bc410bb3ab4", "filename": "gcc/testsuite/g++.dg/eh/delete1.C", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdelete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdelete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdelete1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -12,15 +12,27 @@ void operator delete (void *) throw ()\n }\n \n struct Foo {\n-  ~Foo() throw(int) {throw 1;}\n+  ~Foo()\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#else\n+  noexcept(false)\n+#endif\n+  {throw 1;}\n };\n \n struct Baz {\n   void operator delete (void *) throw ()\n   {\n     deleted = 2;\n   }\n-  virtual ~Baz() throw(int) {throw 1;}\n+  virtual ~Baz()\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#else\n+  noexcept(false)\n+#endif\n+  {throw 1;}\n };\n \n int non_virt ()"}, {"sha": "852d324cd9fd69c9db97ac6ef6f705f27a533ae4", "filename": "gcc/testsuite/g++.dg/eh/ehopt1.C", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fehopt1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fehopt1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fehopt1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -15,7 +15,13 @@ class A<int, int>\n public:\n   A(int) { ++count; if (b) throw 1; }\n   A(const A&) { ++count; if (b) throw 1; }\n-  ~A() throw(int) { --count; if (b) throw 1; }\n+  ~A()\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#else\n+  noexcept(false)\n+#endif\n+  { --count; if (b) throw 1; }\n };\n \n typedef A<int, int> B;\n@@ -26,7 +32,13 @@ class A<void *, void *>\n public:\n   A() { if (b) throw 1; }\n   A(const B&) { if (b) throw 1; }\n-  ~A() throw(int) { if (b) throw 1; }\n+  ~A()\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#else\n+  noexcept(false)\n+#endif\n+  { if (b) throw 1; }\n };\n \n typedef A<void *, void *> C;"}, {"sha": "9e92dafb08f96957dae33588cf5a1c6cb66da8f0", "filename": "gcc/testsuite/g++.dg/eh/forced3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced3.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,5 +1,6 @@\n // HP-UX libunwind.so doesn't provide _UA_END_OF_STACK.\n // { dg-do run { xfail \"ia64-hp-hpux11.*\" } }\n+// { dg-require-effective-target c++14_down }\n \n // Test that forced unwinding calls std::unexpected going \n // through a nothrow function."}, {"sha": "96408d2592ffb17fde02772873e889b55fc7ceb9", "filename": "gcc/testsuite/g++.dg/eh/forced4.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced4.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -38,7 +38,10 @@ force_unwind ()\n }\n \n static void\n-doit () throw(int)\n+doit ()\n+#if __cplusplus <= 201402L\n+throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   force_unwind ();\n }"}, {"sha": "127883ae197bb0533e75d30c39480192085bc26f", "filename": "gcc/testsuite/g++.dg/eh/init-temp2.C", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Finit-temp2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Finit-temp2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Finit-temp2.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -8,18 +8,36 @@ template <class _Tp> class AutoPtr\n public:\n   explicit AutoPtr(_Tp* __p = 0)  : _M_ptr(__p) {}\n \n-  ~AutoPtr() throw(int) { delete _M_ptr; }\n+  ~AutoPtr()\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#else\n+  noexcept(false)\n+#endif\n+  { delete _M_ptr; }\n };\n \n struct A\n {\n   A() { }\n-  ~A() throw(int) { throw 1; }\n+  ~A()\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#else\n+  noexcept(false)\n+#endif\n+  { throw 1; }\n };\n \n struct B\n {\n-  virtual ~B() throw(int);\n+  virtual ~B()\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#else\n+  noexcept(false)\n+#endif\n+  ;\n };\n \n B* f (const A &s) { throw 1; }"}, {"sha": "be3adbbd97dd8162e304349fdf4f893f4b661f3c", "filename": "gcc/testsuite/g++.dg/eh/pr38662.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr38662.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr38662.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr38662.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -2,7 +2,11 @@\n class E { };\n \n class T {\n-  int foo(bool a) throw (E) __attribute__((regparm(1)));\n+  int foo(bool a)\n+#if __cplusplus <= 201402L\n+  throw (E)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+  __attribute__((regparm(1)));\n   int bar(bool b) __attribute__((regparm(1)));\n };\n "}, {"sha": "61c65729c9d2dbd823c39b97a92090821034146b", "filename": "gcc/testsuite/g++.dg/eh/pr41819.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr41819.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr41819.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr41819.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -15,7 +15,10 @@ void f1()\n   try {} catch (...) {}\t\t// { dg-error \"\" }\n }\n \n-void f2() throw(int)\n+void f2()\n+#if __cplusplus <= 201402L\n+throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   bar();\n }"}, {"sha": "b96f65a92bb909fb13133b0e09a17daa6ca5203d", "filename": "gcc/testsuite/g++.dg/eh/shadow1.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fshadow1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fshadow1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fshadow1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -13,14 +13,14 @@ struct D : private B\n   friend class E;\n   \n   static B *baz (D *);\n-  virtual void V () throw (B);  // { dg-error \"overriding\" \"\" }\n-};\n-\n+  virtual void V () throw (B);  // { dg-error \"overriding\" \"\" { target { ! c++1z } } }\n+};\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } .-2 }\n struct E : public D\n {\n-  virtual void V () throw (D); // { dg-error \"looser throw\" \"\" }\n-};\n-\n+  virtual void V () throw (D); // { dg-error \"looser throw\" \"\" { target { ! c++1z } } }\n+};\t\t\t       // { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+\t\t\t       // { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } .-2 }\n B* foo (D *);\n \n B *D::baz (D *p)"}, {"sha": "0f512640fd3e31287b29cad830f05ab833da1c6f", "filename": "gcc/testsuite/g++.dg/eh/spec2.C", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec2.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -3,8 +3,15 @@\n struct S { void f (void); };\n \n typedef void f1 (void) throw (int); // { dg-error \"exception\" \"\" { target c++14_down } }\n+\t\t\t\t    // { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+\t\t\t\t    // { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } .-2 }\n typedef void (*f2) (void) throw (int); // { dg-error \"exception\" \"\" { target c++14_down } }\n+\t\t\t\t       // { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+\t\t\t\t       // { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } .-2 }\n typedef void (S::*f3) (void) throw (int); // { dg-error \"exception\" \"\" { target c++14_down } }\n-\n-void (*f4) (void) throw (int);\n-void (S::*f5) (void) throw (int);\n+\t\t\t\t\t  // { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+\t\t\t\t\t  // { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } .-2 }\n+void (*f4) (void) throw (int); // { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n+\t\t\t       // { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } .-1 }\n+void (S::*f5) (void) throw (int); // { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n+\t\t\t\t  // { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } .-1 }"}, {"sha": "49bbdc394276f9a6b4b82259a9dae5dc411ae274", "filename": "gcc/testsuite/g++.dg/eh/spec3.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec3.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -12,7 +12,10 @@ struct A : virtual public Base\n \n struct B {};\n \n-void func() throw (B,A)\n+void func()\n+#if __cplusplus <= 201402L\n+throw (B,A)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   throw A();\n }"}, {"sha": "5735e8d2760101db98e845f0c709eee617313e0b", "filename": "gcc/testsuite/g++.dg/eh/spec5.C", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec5.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -8,12 +8,20 @@ struct A;\n \n struct B\n {\n-  void f () throw (A);\n+  void f ()\n+#if __cplusplus <= 201402L\n+  throw (A)\n+#endif\n+  ;\n };\n \n struct A {};\n \n-void B::f () throw (A) {}\n+void B::f ()\n+#if __cplusplus <= 201402L\n+throw (A)\n+#endif\n+{}\n \n int main ()\n {"}, {"sha": "d08bd865a9ba5e003ed05f3b36287564198da538", "filename": "gcc/testsuite/g++.dg/eh/spec6.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec6.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,6 +1,7 @@\n // Test that we don't allow incomplete types in an exception-specification\n // for a definition, or at a call site.\n \n+// { dg-do compile { target c++14_down } }\n // { dg-options \"-fpermissive -w\" }\n \n struct A;\t\t\t// { dg-message \"\" }"}, {"sha": "37efedcc34cfe2c2403fb89a33b50c9018a35258", "filename": "gcc/testsuite/g++.dg/eh/spec7.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec7.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -19,7 +19,11 @@ struct D : public B {\n         } o; \n          \n         struct Raiser { \n-            Raiser()  throw( int ) {throw 1;}; \n+            Raiser()\n+#if __cplusplus <= 201402L\n+\t    throw( int )\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+\t    {throw 1;}; \n         } raiser; \n       }; \n }; "}, {"sha": "8967e8c4edd95aa3f4c61134145f7bfde1654e10", "filename": "gcc/testsuite/g++.dg/eh/spec8.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec8.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,8 +1,10 @@\n // PR c++/24817\n+// { dg-do compile { target c++14_down } }\n \n struct exception {};\n \n template <typename T> void foo() throw(exception); // { dg-message \"declaration\" }\n+\t\t\t\t\t\t   // { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } .-1 }\n template <typename T> void foo(); // { dg-error \"exception\" }\n \n struct bar"}, {"sha": "cceb98f5585009fd41df3235176d34e29c99dbb2", "filename": "gcc/testsuite/g++.dg/eh/spec9.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec9.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -4,7 +4,10 @@\n typedef int IntArray[10];\n IntArray i;\n \n-void test_array() throw (IntArray)\n+void test_array()\n+#if __cplusplus <= 201402L\n+throw (IntArray)\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   throw i;\n }"}, {"sha": "fb471b2ac8375ff3dd5664ab87f3ead5048b6955", "filename": "gcc/testsuite/g++.dg/eh/template1.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Ftemplate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Ftemplate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Ftemplate1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -17,7 +17,11 @@ struct C\n {\n   typedef B<T> D;\n   typedef typename D::E E;\n-  void f() throw(E) { throw E(); }\n+  void f()\n+#if __cplusplus <= 201402L\n+  throw(E)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+  { throw E(); }\n };\n \n int main()"}, {"sha": "cd5585face8f05eaa3150e10c7ceea8c8dd22c10", "filename": "gcc/testsuite/g++.dg/eh/unexpected1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funexpected1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funexpected1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funexpected1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,6 +1,6 @@\n // PR 3719\n // Test that an unexpected handler can rethrow to categorize.\n-// { dg-do run }\n+// { dg-do run { target c++14_down } }\n \n #include <exception>\n \n@@ -23,7 +23,7 @@ handle_unexpected ()\n }\n \n static void\n-doit () throw (Two)\n+doit () throw (Two)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 } } }\n {\n   throw One ();\n }"}, {"sha": "d84a81ca4382a270486607887026df2c75e5c6d4", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_assign.C", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -15,50 +15,56 @@ struct B\n struct C\n : public A { };\n \n+#if __cplusplus > 201402L\n+#define THROW_INT\n+#else\n+#define THROW_INT throw(int)\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+\n struct D\n {\n   D& operator=(const D&) throw() { return *this; }\n };\n \n struct E\n {\n-  E& operator=(const E&) throw(int) { return *this; }\n+  E& operator=(const E&) THROW_INT { return *this; }\n };\n \n struct E1\n {\n-  E1& operator=(const E1&) throw(int) { throw int(); return *this; }\n+  E1& operator=(const E1&) THROW_INT { throw int(); return *this; }\n };\n \n struct F\n {\n-  F() throw(int) { }\n+  F() THROW_INT { }\n };\n \n struct G\n {\n-  G() throw(int) { throw int(); }\n+  G() THROW_INT { throw int(); }\n };\n \n struct H\n {\n-  H& operator=(H&) throw(int) { return *this; }\n+  H& operator=(H&) THROW_INT { return *this; }\n };\n \n struct H1\n {\n-  H1& operator=(H1&) throw(int) { throw int(); return *this; }\n+  H1& operator=(H1&) THROW_INT { throw int(); return *this; }\n };\n \n struct I\n {\n-  I& operator=(I&) throw(int) { return *this; }\n+  I& operator=(I&) THROW_INT { return *this; }\n   I& operator=(const I&) throw() { return *this; }\n };\n \n struct I1\n {\n-  I1& operator=(I1&) throw(int) { throw int(); return *this; }\n+  I1& operator=(I1&) THROW_INT { throw int(); return *this; }\n   I1& operator=(const I1&) throw() { return *this; }\n };\n "}, {"sha": "d69b312a3a814512f7fb34c21ecf0706d7424bbc", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_constructor.C", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_constructor.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_constructor.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_constructor.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -12,6 +12,12 @@ struct B\n   A a;\n };\n \n+#if __cplusplus > 201402L\n+#define THROW_INT\n+#else\n+#define THROW_INT throw(int)\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+\n struct C \n : public A { };\n \n@@ -22,12 +28,12 @@ struct D\n \n struct E\n {\n-  E() throw(int) { }\n+  E() THROW_INT { }\n };\n \n struct E1\n {\n-  E1() throw(int) { throw int(); }\n+  E1() THROW_INT { throw int(); }\n };\n \n struct F\n@@ -37,7 +43,7 @@ struct F\n \n struct G\n {\n-  G(const G&) throw(int) { throw int(); }\n+  G(const G&) THROW_INT { throw int(); }\n };\n \n template<typename T>"}, {"sha": "0e5a9de46f9cbb6b235a61b64ddc68e80fc804c6", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_copy-1.C", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -15,19 +15,25 @@ struct B\n struct C\n : public A { };\n \n+#if __cplusplus > 201402L\n+#define THROW_INT\n+#else\n+#define THROW_INT throw(int)\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+\n struct D\n {\n   D(const D&) throw() { }\n };\n \n struct E\n {\n-  E(const E&) throw(int) { }\n+  E(const E&) THROW_INT { }\n };\n \n struct E1\n {\n-  E1(const E1&) throw(int) { throw int(); }\n+  E1(const E1&) THROW_INT { throw int(); }\n };\n \n struct F\n@@ -37,28 +43,28 @@ struct F\n \n struct G\n {\n-  G() throw(int) { throw int(); }\n+  G() THROW_INT { throw int(); }\n };\n \n struct H\n {\n-  H(H&) throw(int) { }\n+  H(H&) THROW_INT { }\n };\n \n struct H1\n {\n-  H1(H1&) throw(int) { throw int(); }\n+  H1(H1&) THROW_INT { throw int(); }\n };\n \n struct I\n {\n-  I(I&) throw(int) { }\n+  I(I&) THROW_INT { }\n   I(const I&) throw() { }\n };\n \n struct I1\n {\n-  I1(I1&) throw(int) { throw int(); }\n+  I1(I1&) THROW_INT { throw int(); }\n   I1(const I1&) throw() { }\n };\n "}, {"sha": "f15c417c2f9bf5829db8e22ea8cb8cc5a00f8a49", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_copy-2.C", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-2.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -2,8 +2,21 @@\n // { dg-do run }\n #include <cassert>\n \n-struct A { template <class T> A (T) throw (int); };\n-struct B { B (B&) throw (); template <class T> B (T) throw (int); };\n+struct A {\n+  template <class T> A (T)\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+  ;\n+};\n+struct B {\n+  B (B&) throw ();\n+  template <class T> B (T)\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+  ;\n+};\n \n int main ()\n {"}, {"sha": "4c63b963f7c1bc9ddc4e1e8ace48ee07f81b89d3", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_copy-4.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-4.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -4,7 +4,11 @@\n \n struct S {\n     S (const S&) throw ();\n-    S (...) throw (int);\n+    S (...)\n+#if __cplusplus <= 201402L\n+    throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+    ;\n };\n \n int main ()"}, {"sha": "768c9af84c05d87862a3f4f6cd1960162d30ccb7", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_copy-5.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-5.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -4,7 +4,11 @@\n \n struct S {\n     S (const S&) throw ();\n-    S (int) throw (int);\n+    S (int)\n+#if __cplusplus <= 201402L\n+    throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+    ;\n };\n \n int main ()"}, {"sha": "27f4c0ad63b41679c59600409041e816b4747744", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_copy-6.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-6.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -3,7 +3,11 @@\n \n struct S {\n     S (S&) throw ();\n-    S (const S&, int) throw (int);\n+    S (const S&, int)\n+#if __cplusplus <= 201402L\n+    throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+    ;\n };\n \n int main ()"}, {"sha": "ac2dd8c13afc8cc4c52d147718a180f615acd495", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_copy-7.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy-7.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -3,7 +3,11 @@\n \n struct S {\n     S (const S&) throw ();\n-    S (S&&) throw (int);\n+    S (S&&)\n+#if __cplusplus <= 201402L\n+    throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n+#endif\n+    ;\n };\n \n int main ()"}, {"sha": "bbc0f1046b5971a17c32fd2f1889edeb078acb7c", "filename": "gcc/testsuite/g++.dg/gcov/gcov-7.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-7.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -7,7 +7,10 @@\n \n struct foo\n {\n-  foo () throw (int)\n+  foo ()\n+#if __cplusplus <= 201402L\n+    throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n     {\t\t\t/* count (-) */\n       throw (1);\n     }"}, {"sha": "832942e74af029a89c688198f750bec576adc495", "filename": "gcc/testsuite/g++.dg/init/new13.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew13.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -6,6 +6,6 @@\n struct A\n {\n   void* operator new(__SIZE_TYPE__) throw(X);  // { dg-error \"expected|type\" }\n-};\n-\n+};\t\t\t\t\t       // { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+\t\t\t\t\t       // { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } .-2 }\n A* p = new A;"}, {"sha": "754ac92ff4a816359d1bd41345b6ac6e5f61688d", "filename": "gcc/testsuite/g++.dg/init/new25.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew25.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -5,7 +5,11 @@ class C\n {\n public:\n   void* operator new(std::size_t = 32) throw (std::bad_alloc); // { dg-error \"first parameter\" }\n+\t\t\t\t\t\t\t       // { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+\t\t\t\t\t\t\t       // { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } .-2 }\n   void* operator new[](std::size_t = 32) throw (std::bad_alloc); // { dg-error \"first parameter\" }\n+\t\t\t\t\t\t\t\t // { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n+\t\t\t\t\t\t\t\t // { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } .-2 }\n   void* operator new(std::size_t = 32, const std::nothrow_t&) throw(); // { dg-error \"first parameter\" }\n   void* operator new[](std::size_t = 32, const std::nothrow_t&) throw(); // { dg-error \"first parameter\" }\n };"}, {"sha": "00ef817ecc91f561195a66e9aa53c7f0eaa1a643", "filename": "gcc/testsuite/g++.dg/lookup/exception1.C", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fexception1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fexception1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fexception1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -11,20 +11,36 @@ namespace ns\n {\n   class Test {\n     public:\n-      inline Test() throw( Exception );\n-      inline Test(int n ) throw( Exception );\n+      inline Test()\n+#if __cplusplus <= 201402L\n+      throw( Exception )\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+      ;\n+      inline Test(int n )\n+#if __cplusplus <= 201402L\n+      throw( Exception )\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+      ;\n     private:\n       int i;\n   };\n }\n \n // This line used to fail because Exception wasn't looked up in the\n // right scope.\n-ns::Test::Test() throw( Exception ) : i( 1 )\n+ns::Test::Test()\n+#if __cplusplus <= 201402L\n+throw( Exception )\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+: i( 1 )\n {\n }\n \n-ns::Test::Test( int n ) throw( Exception ) : i( n )\n+ns::Test::Test( int n )\n+#if __cplusplus <= 201402L\n+throw( Exception )\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+: i( n )\n {\n }\n "}, {"sha": "8fe2db0d3e302bb808bf1c5cfa37d96b6e47adac", "filename": "gcc/testsuite/g++.dg/opt/noreturn-1.C", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnoreturn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnoreturn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnoreturn-1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -58,16 +58,34 @@ struct Egeneric {\n };\n \n struct infinint {\n-    void detruit() throw(Egeneric);\n-    template<class T> void infinint_from(T a) throw(Egeneric);\n-    infinint(long a = 0) throw(Egeneric) {\n+    void detruit()\n+#if __cplusplus <= 201402L\n+    throw(Egeneric)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+    ;\n+    template<class T> void infinint_from(T a)\n+#if __cplusplus <= 201402L\n+    throw(Egeneric)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+    ;\n+    infinint(long a = 0)\n+#if __cplusplus <= 201402L\n+    throw(Egeneric)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+    {\n \ttry {\n \t    infinint_from(a);\n \t} catch(Egeneric& e) {\n \t    e.stack(\"infinint::infinint\", \"long\");\n \t}\n     }\n-    ~infinint() throw(Egeneric) {\n+    ~infinint()\n+#if __cplusplus <= 201402L\n+    throw(Egeneric)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#else\n+    noexcept(false)\n+#endif\n+    {\n \ttry {\n \t    detruit();\n \t} catch(Egeneric& e) { }"}, {"sha": "1e645630ab8d9542c1f92d9613e8071f8d14747f", "filename": "gcc/testsuite/g++.dg/other/error3.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror3.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,5 +1,6 @@\n // Test for proper error message formatting; the throw() should go inside\n // the parens, as below.\n \n-void (*g() throw())();\t\t// { dg-message \"g\\\\(\\\\) throw\" \"\" }\n+void (*g() throw())();\t\t// { dg-message \"g\\\\(\\\\) throw\" \"\" { target { ! c++1z } } }\n+\t\t\t\t// { dg-message \"g\\\\(\\\\) noexcept\" \"\" { target c++1z } .-1 }\n void (*g())();\t\t\t// { dg-error \"\" \"\" }"}, {"sha": "111d3b3965fa4a514a95d887be7ab88d38ff7129", "filename": "gcc/testsuite/g++.dg/rtti/crash3.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fcrash3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fcrash3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fcrash3.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -5,6 +5,9 @@ class A {};\n class B {};\n class C : public A, public B {};\n class D : public C {};\n-void f () throw (D)\n+void f ()\n+#if __cplusplus <= 201402L\n+throw (D)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n }"}, {"sha": "3ed80a4672988f63ac72c6a58fd226fb61d595f6", "filename": "gcc/testsuite/g++.dg/template/eh2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Feh2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Feh2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Feh2.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,10 +1,10 @@\n // PR c++/23191\n // Origin: Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n-// { dg-do compile }\n+// { dg-do compile { target c++14_down } }\n \n template<typename T> struct A\n {\n     void foo() throw(typename T::X);  // { dg-error \"not a class\" }\n-};\n+};\t\t\t\t      // { dg-warning \"deprecated\" \"\" { target c++11 } .-1 }\n \n A<void> a;                            // { dg-message \"required\" }"}, {"sha": "d808c1430b18579582421b26fef36b195ca0f545", "filename": "gcc/testsuite/g++.dg/template/error36.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror36.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,9 +1,11 @@\n // PR c++/37719.C\n+// { dg-do compile { target c++14_down } }\n \n template <typename T>\n class foo {\n     void bar() throw(int); // { dg-message \"throw \\\\(int\\\\)\" }\n-};\n+};\t\t\t   // { dg-warning \"deprecated\" \"\" { target c++11 } .-1 }\n \n template <>\n void foo<int>::bar() throw(float) {} // { dg-error \"throw \\\\(float\\\\)\" }\n+\t\t\t\t     // { dg-warning \"deprecated\" \"\" { target c++11 } .-1 }"}, {"sha": "448c92cd0a2d1dedb99e12ff551078adcb2ffb5f", "filename": "gcc/testsuite/g++.dg/tm/pr46567.C", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr46567.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr46567.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr46567.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1667,8 +1667,16 @@ namespace std\n   typedef void (*new_handler)();\n   new_handler set_new_handler(new_handler) throw();\n }\n-void* operator new(std::size_t) throw (std::bad_alloc);\n-void* operator new[](std::size_t) throw (std::bad_alloc);\n+void* operator new(std::size_t)\n+#if __cplusplus <= 201402L\n+throw (std::bad_alloc)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+;\n+void* operator new[](std::size_t)\n+#if __cplusplus <= 201402L\n+throw (std::bad_alloc)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+;\n void operator delete(void*) throw();\n void operator delete[](void*) throw();\n void* operator new(std::size_t, const std::nothrow_t&) throw();"}, {"sha": "e5075e2c251d07d27b1a797a6c917481a12cdec7", "filename": "gcc/testsuite/g++.dg/tm/pr47340.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr47340.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr47340.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr47340.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,7 +1,11 @@\n // { dg-do compile }\n // { dg-options \"-fgnu-tm\" }\n \n-void* operator new(__SIZE_TYPE__) throw (int);\n+void* operator new(__SIZE_TYPE__)\n+#if __cplusplus <= 201402L\n+throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+;\n \n void *point;\n "}, {"sha": "0160e9a24d5079c51884cf0028a454c21f342acd", "filename": "gcc/testsuite/g++.dg/torture/pr46364.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr46364.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr46364.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr46364.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,7 +1,11 @@\n // { dg-do compile }\n #include <string>\n \n-void a() throw (int);\n+void a()\n+#if __cplusplus <= 201402L\n+throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+;\n void b(std::string const &);\n \n void c(std::string *e)"}, {"sha": "cd8cac33c3b3ca1877bde68822b4deddd7bdcb74", "filename": "gcc/testsuite/g++.dg/torture/pr49394.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49394.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49394.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49394.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -4,7 +4,10 @@\n struct Mutex\n {\n   bool locked;\n-  ~Mutex () throw(int)\n+  ~Mutex ()\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n   {\n     if (locked)\n       throw 0;"}, {"sha": "cb95048237b0e7b5e1947471e18c3208fe2dfab7", "filename": "gcc/testsuite/g++.dg/torture/pr52918-1.C", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr52918-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr52918-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr52918-1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -21,9 +21,16 @@ public:\n class free_list   {\n     typedef __mutex __mutex_type;\n     __mutex_type&     _M_get_mutex();\n-    void _M_get(size_t __sz) throw(bad_alloc);\n+    void _M_get(size_t __sz)\n+#if __cplusplus <= 201402L\n+    throw(bad_alloc)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+    ;\n };\n-void  free_list::_M_get(size_t __sz) throw(bad_alloc)\n+void  free_list::_M_get(size_t __sz)\n+#if __cplusplus <= 201402L\n+throw(bad_alloc)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   __mutex_type& __bfl_mutex = _M_get_mutex();\n   __bfl_mutex.unlock();"}, {"sha": "f3b7ecc1d990c8af877c77c4afeacdbc1ef024dc", "filename": "gcc/testsuite/g++.dg/torture/pr57190.C", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr57190.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr57190.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr57190.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -19,12 +19,24 @@ namespace std {\n class UIException {\n };\n class PasswordDialog {\n-    void run() throw (UIException);\n+    void run()\n+#if __cplusplus <= 201402L\n+    throw (UIException)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+    ;\n };\n class MessageBox  {\n public:\n-    MessageBox (std::string t) throw (UIException);\n-    virtual int run() throw (UIException) ;\n+    MessageBox (std::string t)\n+#if __cplusplus <= 201402L\n+    throw (UIException)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+    ;\n+    virtual int run()\n+#if __cplusplus <= 201402L\n+    throw (UIException)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+    ;\n };\n extern \"C\" {\n     struct __jmp_buf_tag   {\n@@ -33,7 +45,10 @@ extern \"C\" {\n     typedef struct __jmp_buf_tag sigjmp_buf[1];\n }\n sigjmp_buf password_dialog_sig_jmp_buf;\n-void PasswordDialog::run() throw (UIException)\n+void PasswordDialog::run()\n+#if __cplusplus <= 201402L\n+throw (UIException)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   __sigsetjmp (password_dialog_sig_jmp_buf, 1);\n   MessageBox* errmsg = __null;"}, {"sha": "7c124fe330c5016ada07c1305cdcdb5a38fb6676", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-alloca-1.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-alloca-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-alloca-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-alloca-1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -27,7 +27,10 @@ struct A : virtual public Base\n struct B {};\n \n void\n-foo (int size) throw (B,A)\n+foo (int size)\n+#if __cplusplus <= 201402L\n+throw (B,A)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   char *p = (char*) __builtin_alloca (size + 1);\n   aligned i;"}, {"sha": "165e7cca14d82a7fd69b60f37c97ae66785f661f", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-fastcall-1.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-fastcall-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-fastcall-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-fastcall-1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -21,7 +21,10 @@ struct B {};\n \n __attribute__ ((fastcall))\n void\n-foo (int j, int k, int m, int n, int o) throw (B,A)\n+foo (int j, int k, int m, int n, int o)\n+#if __cplusplus <= 201402L\n+throw (B,A)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   aligned i;\n "}, {"sha": "48a59ebf22f4a920718de4f1c53abef2a7e81b48", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-global-1.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-global-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-global-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-global-1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -21,7 +21,10 @@ struct A : virtual public Base\n struct B {};\n \n void\n-foo (void) throw (B,A)\n+foo (void)\n+#if __cplusplus <= 201402L\n+throw (B,A)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   aligned i;\n "}, {"sha": "b8c04d95ddff3dc9a75aad347d5ec1836aff8bc5", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-inline-1.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-inline-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-inline-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-inline-1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -22,7 +22,10 @@ struct B {};\n \n static void\n inline __attribute__((always_inline))\n-foo (void) throw (B,A)\n+foo (void)\n+#if __cplusplus <= 201402L\n+throw (B,A)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   aligned i;\n "}, {"sha": "53ff0ccf18b9ca51a2566d55365bab5a3d7393e8", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-inline-2.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-inline-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-inline-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-inline-2.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -28,7 +28,10 @@ struct B {};\n \n static void\n inline __attribute__((always_inline))\n-foo (int size) throw (B,A)\n+foo (int size)\n+#if __cplusplus <= 201402L\n+throw (B,A)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   char *p = (char *) __builtin_alloca (size + 1);\n   aligned i;"}, {"sha": "44f562aae13f2c5044abc1d54fd6ab82de980fb3", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-thiscall-1.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-thiscall-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-thiscall-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-thiscall-1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -21,7 +21,10 @@ struct B {};\n \n __attribute__ ((thiscall))\n void\n-foo (int j, int k, int m, int n, int o) throw (B,A)\n+foo (int j, int k, int m, int n, int o)\n+#if __cplusplus <= 201402L\n+throw (B,A)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   aligned i;\n "}, {"sha": "9c3c0f5db895c7d8faeb54301acb8ee8c9e1ff5f", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-vararg-1.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-vararg-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-vararg-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-vararg-1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -28,7 +28,10 @@ struct A : virtual public Base\n struct B {};\n \n void\n-foo (const char *fmt, ...) throw (B,A)\n+foo (const char *fmt, ...)\n+#if __cplusplus <= 201402L\n+throw (B,A)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   va_list arg;\n   char *p;"}, {"sha": "aa9b2bda8fb24e160f1bdf38b20a1fb5fb73181c", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-vararg-2.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-vararg-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-vararg-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-vararg-2.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -29,7 +29,10 @@ struct A : virtual public Base\n struct B {};\n \n void\n-test (va_list arg) throw (B,A)\n+test (va_list arg)\n+#if __cplusplus <= 201402L\n+throw (B,A)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   char *p;\n   aligned i;"}, {"sha": "5460021ae62888724ded34aab95a134168371f4f", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr45605.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr45605.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr45605.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr45605.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -15,7 +15,11 @@ struct D : public B {\n         } o; \n \n         struct Raiser { \n-            Raiser()  throw( int ) {throw 1;}; \n+            Raiser()\n+#if __cplusplus <= 201402L\n+\t    throw( int )\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+\t    {throw 1;}; \n         } raiser; \n       }; \n }; "}, {"sha": "78a3851550ff993bbaad060253afc8ae7cb07053", "filename": "gcc/testsuite/g++.dg/warn/Wreturn-type-3.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-3.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -3,7 +3,10 @@\n \n struct E{};\n \n-inline int bar() throw(E)\n+inline int bar()\n+#if __cplusplus <= 201402L\n+throw(E)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   return 0;\n }"}, {"sha": "31c7300c90bd9ede3619d6867834d8029d401a3b", "filename": "gcc/testsuite/g++.old-deja/g++.eh/badalloc1.C", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -93,19 +93,28 @@ extern \"C\" void *realloc (void *p, size_t size)\n   return r;\n }\n \n-void fn_throw() throw(int)\n+void fn_throw()\n+#if __cplusplus <= 201402L\n+throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   throw 1;\n }\n \n-void fn_rethrow() throw(int)\n+void fn_rethrow()\n+#if __cplusplus <= 201402L\n+throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   try{fn_throw();}\n   catch(int a){\n     throw;}\n }\n \n-void fn_catchthrow() throw(int)\n+void fn_catchthrow()\n+#if __cplusplus <= 201402L\n+throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   try{fn_throw();}\n   catch(int a){"}, {"sha": "d6445124f88e0175eed110f14d6893b60ea75f9a", "filename": "gcc/testsuite/g++.old-deja/g++.eh/cleanup2.C", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcleanup2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcleanup2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcleanup2.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -18,22 +18,36 @@ static int thrower ()\n \n struct X\n {\n-  X (int) throw (int);\n+  X (int)\n+#if __cplusplus <= 201402L\n+  throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+  ;\n   ~X () throw ();\n };\n \n-X::X (int) throw (int)\n+X::X (int)\n+#if __cplusplus <= 201402L\n+  throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n   {printf (\"in ctor X %s\\n\", __PRETTY_FUNCTION__); bad = true;}\n X::~X () throw ()\n   {printf (\"in dtor X %s\\n\", __PRETTY_FUNCTION__); bad = true;}\n \n struct X1 {};\n struct Y : X\n {\n-  Y() throw (int);\n+  Y()\n+#if __cplusplus <= 201402L\n+  throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+  ;\n   ~Y() throw ();\n };\n-Y::Y() throw (int)\n+Y::Y()\n+#if __cplusplus <= 201402L\n+  throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n   : X(thrower ())   // throws, so X::X is never called\n   {printf (\"in ctor Y%s\\n\", __PRETTY_FUNCTION__); bad = true;}\n Y::~Y() throw ()"}, {"sha": "ea32045117903be512a53f84848b83451c8b6cd2", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run  }\n+// { dg-do run { target c++14_down } }\n // Testing exception specifications.\n // Test 1: the original exception succeeds.\n \n@@ -9,7 +9,7 @@ void my_term ()  { exit (1); }\n void my_unexp () { throw 42; }\n \n void\n-f () throw (char, int, std::bad_exception)\n+f () throw (char, int, std::bad_exception)\t// { dg-warning \"deprecated\" \"\" { target c++11 } }\n {\n   throw 'a';\n }"}, {"sha": "d1aa6984f9f7c3f0767ca7d107b4c5aef28d3c5e", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec2.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run  }\n+// { dg-do run { target c++14_down } }\n // Testing exception specifications.\n // Test 2: the second throw succeeds.\n \n@@ -9,7 +9,7 @@ void my_term ()  { exit (1); }\n void my_unexp () { throw 42; }\n \n void\n-f () throw (int, std::bad_exception)\n+f () throw (int, std::bad_exception)\t// { dg-warning \"deprecated\" \"\" { target c++11 } }\n {\n   throw 'a';\n }"}, {"sha": "1d57df3c335f7ba713903225f066af41b4f1672a", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec3.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run  }\n+// { dg-do run { target c++14_down } }\n // Testing exception specifications.\n // Test 3: the bad_exception throw succeeds.\n \n@@ -9,7 +9,7 @@ void my_term ()  { exit (1); }\n void my_unexp () { throw 42; }\n \n void\n-f () throw (std::bad_exception)\n+f () throw (std::bad_exception)\t\t// { dg-warning \"deprecated\" \"\" { target c++11 } }\n {\n   throw 'a';\n }"}, {"sha": "e102239ed89dd37baef7d928c6afc809a43b6bd2", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec4.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run  }\n+// { dg-do run { target c++14_down } }\n // Testing exception specifications.\n // Test 4: all throws fail, call terminate.\n \n@@ -9,7 +9,7 @@ void my_term ()  { exit (0); }\n void my_unexp () { throw 42; }\n \n void\n-f () throw (short)\n+f () throw (short)\t\t// { dg-warning \"deprecated\" \"\" { target c++11 } }\n {\n   throw 'a';\n }"}, {"sha": "ed485e299ec615f632c3420ed6704043e5460d2e", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec6.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,4 +1,5 @@\n-// { dg-do assemble  }\n+// { dg-do assemble { target c++14_down } }\n+// { dg-additional-options \"-Wno-deprecated\" }\n \n // Copyright (C) 1999 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 19 Jan 1999 <nathan@acm.org>"}, {"sha": "3c4813e3f743bca8e8dd3f9a20120d81385c7544", "filename": "gcc/testsuite/g++.old-deja/g++.eh/throw1.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fthrow1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fthrow1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fthrow1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,6 +1,9 @@\n // { dg-do assemble  }\n \n-void athrow(const int & e) throw(int)\n+void athrow(const int & e)\n+#if __cplusplus <= 201402L\n+throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n    throw e;\n }"}, {"sha": "b4296ac45019c8ae7adf4724a3468393b1deb234", "filename": "gcc/testsuite/g++.old-deja/g++.eh/throw2.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fthrow2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fthrow2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fthrow2.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -4,7 +4,10 @@\n \n #define ANY int // a class with a public constructor\n \n-void athrow(const ANY & e) throw(ANY)\n+void athrow(const ANY & e)\n+#if __cplusplus <= 201402L\n+throw(ANY)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n    throw e; // { dg-bogus \"\" } discarding const\n }"}, {"sha": "c64a5222b84394858c8006b9eff0f79e53138c4d", "filename": "gcc/testsuite/g++.old-deja/g++.eh/tmpl1.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,6 +1,9 @@\n // { dg-do run  }\n template <class T>\n-void f() throw (T)\n+void f()\n+#if __cplusplus <= 201402L\n+throw (T)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   throw 7;\n }"}, {"sha": "4fc869d90b8c0e277ff6fc1db5f2fac3999e6656", "filename": "gcc/testsuite/g++.old-deja/g++.eh/tmpl3.C", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl3.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -3,9 +3,16 @@\n // Posted by Trevor Taylor <ttaylor@powerup.com.au>\n \n template<class T> struct A {\n-    void X() throw(T);\n+    void X()\n+#if __cplusplus <= 201402L\n+    throw(T)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+    ;\n };\n \n template<class T>\n inline void A<T>::X() \n-throw(T) { } \n+#if __cplusplus <= 201402L\n+throw(T)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+{ } "}, {"sha": "a8690be7ec3e950ea139de1cc4f35f0bceb670f8", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh15.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh15.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,6 +1,6 @@\n-// { dg-do assemble  }\n+// { dg-do assemble { target c++14_down } }\n // { dg-options \"-fexceptions\" }\n \n struct A {\n-  A() throw (int);\n+  A() throw (int);\t// { dg-warning \"deprecated\" \"\" { target c++11 } }\n };"}, {"sha": "a6ffd3375b5a95b74eec86c524eb26a48a8dc53e", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh25.C", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh25.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -10,7 +10,13 @@ void my_terminate() {\n \n struct A {\n   A() { }\n-  ~A() throw(int) {\n+  ~A()\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#else\n+  noexcept(false)\n+#endif\n+  {\n     std::set_terminate (my_terminate);\n     throw 1;\t\t// This throws from EH dtor, should call my_terminate\n   }"}, {"sha": "cffb0c48cda0e2a4905283fea35c7a6c05007f73", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh33.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh33.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { xfail sparc64-*-elf z8k-*-* arm-*-pe } }\n+// { dg-require-effective-target c++14_down }\n // { dg-options \"-fexceptions\" }\n \n #include <exception>\n@@ -7,7 +8,7 @@ void my_unexpected() {\n   throw 42;\n }\n \n-void foo() throw (int) { throw \"Hi\"; }\n+void foo() throw (int) { throw \"Hi\"; }\t// { dg-warning \"deprecated\" \"\" { target c++11 } }\n \n int main() {\n   std::set_unexpected (my_unexpected);"}, {"sha": "3218dd9ef3ed333aa88d6dbb5421702537c7b5b2", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh34.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh34.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { xfail sparc64-*-elf arm-*-pe } }\n+// { dg-require-effective-target c++14_down }\n \n #include <exception>\n #include <stdlib.h>"}, {"sha": "0ebaab41fa66d94c498a62b3156f4768ef59273f", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh50.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh50.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { xfail sparc64-*-elf z8k-*-* arm-*-pe } }\n+// { dg-require-effective-target c++14_down }\n // { dg-options \"-fexceptions\" }\n \n #include <exception>\n@@ -7,7 +8,7 @@ void my_unexpected() {\n   throw 42;\n }\n \n-template <class T> void foo(T) throw (int) { throw \"Hi\"; }\n+template <class T> void foo(T) throw (int) { throw \"Hi\"; }\t// { dg-warning \"deprecated\" \"\" { target c++11 } }\n \n main() {\n   std::set_unexpected (my_unexpected);"}, {"sha": "7d3cd413ee75714805a09788baa85e4be66bd9f8", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh51.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh51.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { xfail sparc64-*-elf z8k-*-* arm-*-pe } }\n+// { dg-require-effective-target c++14_down }\n // { dg-options \"-fexceptions\" }\n \n #include <exception>\n@@ -7,7 +8,7 @@ void my_unexpected() {\n   throw 42;\n }\n \n-template <class T> void foo(T) throw (T) { throw \"Hi\"; }\n+template <class T> void foo(T) throw (T) { throw \"Hi\"; }\t// { dg-warning \"deprecated\" \"\" { target c++11 } }\n \n main() {\n   std::set_unexpected (my_unexpected);"}, {"sha": "8b574f57d7bf615b28839d8791b72c0cc57876f1", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh55.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh55.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -9,7 +9,7 @@ void my_terminate_handler() {\n }\n \n void throw_an_unexpected_exception() throw() {\n-  throw 1;\n+  throw 1;\t// { dg-warning \"throw will always call terminate\" \"\" { target c++1z } }\n }\n \n int main() {"}, {"sha": "766a27b4be74e206bc2cdcce1fa2b3d0bf63ea14", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p10416.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10416.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10416.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10416.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -5,5 +5,9 @@\n \n class not_ok {\n public:\n-  void f() throw(int) { }\n+  void f()\n+#if __cplusplus <= 201402L\n+  throw(int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+  { }\n };"}, {"sha": "5ff84edafef6ebaf63938c48df69ab28a0cd28a4", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash28.C", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash28.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -27,9 +27,16 @@ class foo\n   bool b;\n public:\n   foo();\n-  void x () throw(bar);\n+  void x ()\n+#if __cplusplus <= 201402L\n+  throw(bar)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n+  ;\n };\n-void foo::x() throw(bar)\n+void foo::x()\n+#if __cplusplus <= 201402L\n+throw(bar)\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n   if (!b) throw bar (static_cast<::N::X*>(this));\t// { dg-error \"lambda expressions|expected|invalid\" } parse error\n }"}, {"sha": "50ecfd9d97f2fee22d5f30a93f174f18d7f8a811", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash30.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash30.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -8,7 +8,7 @@ struct foo\n };\n \n void foo::x() throw(bar)\t// { dg-error \"\" } parse error\n-{\n+{\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } .-1 }\n }\n \n void bar()"}, {"sha": "82eabb6d7d8a9d5cfb61369a537227e082f3733b", "filename": "gcc/testsuite/g++.old-deja/g++.other/new7.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew7.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -13,7 +13,10 @@ struct X {\n   {\n     throw 1;\n   }\n-  void* operator new ( std::size_t n ) throw ( std::bad_alloc )\n+  void* operator new ( std::size_t n )\n+#if __cplusplus <= 201402L\n+  throw ( std::bad_alloc )\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n   {\n     new_flag = true;\n     return ::operator new( n );"}, {"sha": "3630e1fbddaaa867947ff3c4208c6335276689ed", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ehspec1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fehspec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fehspec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fehspec1.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,6 +1,6 @@\n-// { dg-do assemble  }\n+// { dg-do assemble { target c++14_down } }\n // Bug: g++ forgets to instantiate A<int>\n // Contributed by Jason Merrill <jason@cygnus.com>\n \n template <class T> struct A { };\n-void f () throw (A<int>);\n+void f () throw (A<int>);\t// { dg-warning \"deprecated\" \"\" { target c++11 } }"}, {"sha": "b22f4eb54bb374a1504400b7a020b5d91418bdc1", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb123.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb123.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb123.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb123.C?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -2,7 +2,10 @@\n // { dg-options \"-O2 -W   \" }\n #include \"stdio.h\"\n \n-void writeNote() throw( int )\n+void writeNote()\n+#if __cplusplus <= 201402L\n+throw( int )\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++1z } } } }\n+#endif\n {\n     printf( \"hello world\\n\" );\n     try { }"}, {"sha": "15e1aafc2efa8b1e5b5f6ab4ff5dceb603bf1462", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -1,3 +1,8 @@\n+2016-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/util/testsuite_new_operators.h: Include testsuite_hooks.h.\n+\t(operator new): Use THROW macro.\n+\n 2016-12-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_tree.h"}, {"sha": "dea6fbe9eab86f70ad75781ef7ed4bd4d30fe62a", "filename": "libstdc++-v3/testsuite/util/testsuite_new_operators.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d09844a1cff1a78d24eba41a1443903da0bacfd/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_new_operators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d09844a1cff1a78d24eba41a1443903da0bacfd/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_new_operators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_new_operators.h?ref=1d09844a1cff1a78d24eba41a1443903da0bacfd", "patch": "@@ -23,6 +23,7 @@\n #define _GLIBCXX_TESTSUITE_NEW_OPERATORS_H\n \n #include <new>\n+#include <testsuite_hooks.h>\n \n namespace __gnu_test\n {\n@@ -38,7 +39,7 @@ namespace __gnu_test\n   { get_new_limit() = l; }\n }\n \n-void* operator new(std::size_t size) throw(std::bad_alloc)\n+void* operator new(std::size_t size) THROW(std::bad_alloc)\n {\n   if (size > __gnu_test::get_new_limit())\n     throw std::bad_alloc();"}]}