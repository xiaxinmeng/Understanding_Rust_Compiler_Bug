{"sha": "5a815b930afa24b49723919b0e7da0bd04028d28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE4MTViOTMwYWZhMjRiNDk3MjM5MTliMGU3ZGEwYmQwNDAyOGQyOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-17T20:00:34Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-17T20:00:34Z"}, "message": "compiler: Fix backend representation for interface methods.\n\nFrom-SVN: r184348", "tree": {"sha": "92b83cc481feffe8520d2878ed03b41ec6e6b74f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92b83cc481feffe8520d2878ed03b41ec6e6b74f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a815b930afa24b49723919b0e7da0bd04028d28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a815b930afa24b49723919b0e7da0bd04028d28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a815b930afa24b49723919b0e7da0bd04028d28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a815b930afa24b49723919b0e7da0bd04028d28/comments", "author": null, "committer": null, "parents": [{"sha": "7a6cb708b1a23103a7fab3e3d01b0e3933dc6c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6cb708b1a23103a7fab3e3d01b0e3933dc6c4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6cb708b1a23103a7fab3e3d01b0e3933dc6c4a"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "4ed54bb535870b9f866adc0b997d7a340e30e699", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a815b930afa24b49723919b0e7da0bd04028d28/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a815b930afa24b49723919b0e7da0bd04028d28/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=5a815b930afa24b49723919b0e7da0bd04028d28", "patch": "@@ -6886,10 +6886,37 @@ get_backend_interface_fields(Gogo* gogo, Interface_type* type,\n        p != type->methods()->end();\n        ++p, ++i)\n     {\n+      // The type of the method in Go only includes the parameters.\n+      // The actual method also has a receiver, which is always a\n+      // pointer.  We need to add that pointer type here in order to\n+      // generate the correct type for the backend.\n+      Function_type* ft = p->type()->function_type();\n+      go_assert(ft->receiver() == NULL);\n+\n+      const Typed_identifier_list* params = ft->parameters();\n+      Typed_identifier_list* mparams = new Typed_identifier_list();\n+      if (params != NULL)\n+\tmparams->reserve(params->size() + 1);\n+      Type* vt = Type::make_pointer_type(Type::make_void_type());\n+      mparams->push_back(Typed_identifier(\"\", vt, ft->location()));\n+      if (params != NULL)\n+\t{\n+\t  for (Typed_identifier_list::const_iterator pp = params->begin();\n+\t       pp != params->end();\n+\t       ++pp)\n+\t    mparams->push_back(*pp);\n+\t}\n+\n+      Typed_identifier_list* mresults = (ft->results() == NULL\n+\t\t\t\t\t ? NULL\n+\t\t\t\t\t : ft->results()->copy());\n+      Function_type* mft = Type::make_function_type(NULL, mparams, mresults,\n+\t\t\t\t\t\t    ft->location());\n+\n       mfields[i].name = Gogo::unpack_hidden_name(p->name());\n       mfields[i].btype = (use_placeholder\n-\t\t\t  ? p->type()->get_backend_placeholder(gogo)\n-\t\t\t  : p->type()->get_backend(gogo));\n+\t\t\t  ? mft->get_backend_placeholder(gogo)\n+\t\t\t  : mft->get_backend(gogo));\n       mfields[i].location = loc;\n       // Sanity check: the names should be sorted.\n       go_assert(p->name() > last_name);"}]}