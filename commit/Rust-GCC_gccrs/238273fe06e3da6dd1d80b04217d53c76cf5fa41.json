{"sha": "238273fe06e3da6dd1d80b04217d53c76cf5fa41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM4MjczZmUwNmUzZGE2ZGQxZDgwYjA0MjE3ZDUzYzc2Y2Y1ZmE0MQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-10-18T19:05:01Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-10-18T19:05:01Z"}, "message": "[arm] Improve constant handling for subvsi4.\n\nThis patch addresses constant handling in subvsi4.  Either operand may\nbe a constant.  If the second input (operand[2]) is a constant, then\nwe can canonicalize this into an addition form, providing we take care\nof the INT_MIN case.  In that case the negation has to handle the fact\nthat -INT_MIN is still INT_MIN and we need to ensure that a subtract\noperation is performed rather than an addition.  The remaining cases\nare largely duals of the usubvsi4 expansion.\n\nThis patch also fixes a technical correctness bug in the old\nexpansion, where we did not realy describe the test for overflow in\nthe RTL.  We seem to have got away with that, however...\n\n\t* config/arm/arm.md (subv<mode>4): Delete.\n\t(subvdi4): New expander pattern.\n\t(subvsi4): Likewise.  Handle some immediate values.\n\t(subvsi3_intmin): New insn pattern.\n\t(subvsi3): Likewise.\n\t(subvsi3_imm1): Likewise.\n\t* config/arm/arm.c (select_cc_mode): Also allow minus for CC_V\n\tidioms.\n\nFrom-SVN: r277189", "tree": {"sha": "177180722b23c5cf0e36552f397dbc843cb3a815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/177180722b23c5cf0e36552f397dbc843cb3a815"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/238273fe06e3da6dd1d80b04217d53c76cf5fa41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238273fe06e3da6dd1d80b04217d53c76cf5fa41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/238273fe06e3da6dd1d80b04217d53c76cf5fa41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238273fe06e3da6dd1d80b04217d53c76cf5fa41/comments", "author": null, "committer": null, "parents": [{"sha": "eff5ce0a95699d3eeded9854bff25913cfbdb2f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff5ce0a95699d3eeded9854bff25913cfbdb2f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff5ce0a95699d3eeded9854bff25913cfbdb2f3"}], "stats": {"total": 112, "additions": 105, "deletions": 7}, "files": [{"sha": "153792e3ecd1eb2728bd3a5ab83f4ca21cacc29d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238273fe06e3da6dd1d80b04217d53c76cf5fa41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238273fe06e3da6dd1d80b04217d53c76cf5fa41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=238273fe06e3da6dd1d80b04217d53c76cf5fa41", "patch": "@@ -1,3 +1,14 @@\n+2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.md (subv<mode>4): Delete.\n+\t(subvdi4): New expander pattern.\n+\t(subvsi4): Likewise.  Handle some immediate values.\n+\t(subvsi3_intmin): New insn pattern.\n+\t(subvsi3): Likewise.\n+\t(subvsi3_imm1): Likewise.\n+\t* config/arm/arm.c (select_cc_mode): Also allow minus for CC_V\n+\tidioms.\n+\n 2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm.md (usubvdi4): Allow registers or integers for"}, {"sha": "5491ad0fb43e322c073d6d6dfeed5970fa9cfa73", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238273fe06e3da6dd1d80b04217d53c76cf5fa41/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238273fe06e3da6dd1d80b04217d53c76cf5fa41/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=238273fe06e3da6dd1d80b04217d53c76cf5fa41", "patch": "@@ -15413,11 +15413,12 @@ arm_select_cc_mode (enum rtx_code op, rtx x, rtx y)\n \n   if (GET_MODE (x) == DImode\n       && (op == EQ || op == NE)\n-      && GET_CODE (x) == PLUS\n+      && (GET_CODE (x) == PLUS\n+\t  || GET_CODE (x) == MINUS)\n       && (GET_CODE (XEXP (x, 0)) == SIGN_EXTEND\n \t  || GET_CODE (XEXP (x, 1)) == SIGN_EXTEND)\n       && GET_CODE (y) == SIGN_EXTEND\n-      && GET_CODE (XEXP (y, 0)) == PLUS)\n+      && GET_CODE (XEXP (y, 0)) == GET_CODE (x))\n     return CC_Vmode;\n \n   if (GET_MODE_CLASS (GET_MODE (x)) == MODE_CC)"}, {"sha": "05b735cfccdeec2019cd625f2b66d7c297702521", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 91, "deletions": 5, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238273fe06e3da6dd1d80b04217d53c76cf5fa41/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238273fe06e3da6dd1d80b04217d53c76cf5fa41/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=238273fe06e3da6dd1d80b04217d53c76cf5fa41", "patch": "@@ -957,6 +957,22 @@\n    (set_attr \"type\" \"alus_sreg\")]\n )\n \n+(define_insn \"subvsi3_intmin\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t  (plus:DI\n+\t    (sign_extend:DI\n+\t     (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t    (const_int 2147483648))\n+\t  (sign_extend:DI (plus:SI (match_dup 1) (const_int -2147483648)))))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (match_dup 1) (const_int -2147483648)))]\n+  \"TARGET_32BIT\"\n+  \"subs%?\\\\t%0, %1, #-2147483648\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"alus_imm\")]\n+)\n+\n (define_insn \"addsi3_compareV_imm\"\n   [(set (reg:CC_V CC_REGNUM)\n \t(compare:CC_V\n@@ -1339,14 +1355,52 @@\n     (set_attr \"type\" \"adcs_reg\")]\n )\n \n-(define_expand \"subv<mode>4\"\n-  [(match_operand:SIDI 0 \"register_operand\")\n-   (match_operand:SIDI 1 \"register_operand\")\n-   (match_operand:SIDI 2 \"register_operand\")\n+(define_expand \"subvsi4\"\n+  [(match_operand:SI 0 \"s_register_operand\")\n+   (match_operand:SI 1 \"arm_rhs_operand\")\n+   (match_operand:SI 2 \"arm_add_operand\")\n+   (match_operand 3 \"\")]\n+  \"TARGET_32BIT\"\n+{\n+  if (CONST_INT_P (operands[1]) && CONST_INT_P (operands[2]))\n+    {\n+      /* If both operands are constants we can decide the result statically.  */\n+      wi::overflow_type overflow;\n+      wide_int val = wi::sub (rtx_mode_t (operands[1], SImode),\n+\t\t\t      rtx_mode_t (operands[2], SImode),\n+\t\t\t      SIGNED, &overflow);\n+      emit_move_insn (operands[0], GEN_INT (val.to_shwi ()));\n+      if (overflow != wi::OVF_NONE)\n+\temit_jump_insn (gen_jump (operands[3]));\n+      DONE;\n+    }\n+  else if (CONST_INT_P (operands[2]))\n+    {\n+      operands[2] = GEN_INT (-INTVAL (operands[2]));\n+      /* Special case for INT_MIN.  */\n+      if (INTVAL (operands[2]) == 0x80000000)\n+\temit_insn (gen_subvsi3_intmin (operands[0], operands[1]));\n+      else\n+\temit_insn (gen_addsi3_compareV_imm (operands[0], operands[1],\n+\t\t\t\t\t  operands[2]));\n+    }\n+  else if (CONST_INT_P (operands[1]))\n+    emit_insn (gen_subvsi3_imm1 (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_subvsi3 (operands[0], operands[1], operands[2]));\n+\n+  arm_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n+  DONE;\n+})\n+\n+(define_expand \"subvdi4\"\n+  [(match_operand:DI 0 \"s_register_operand\")\n+   (match_operand:DI 1 \"s_register_operand\")\n+   (match_operand:DI 2 \"s_register_operand\")\n    (match_operand 3 \"\")]\n   \"TARGET_32BIT\"\n {\n-  emit_insn (gen_sub<mode>3_compare1 (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_subdi3_compare1 (operands[0], operands[1], operands[2]));\n   arm_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n \n   DONE;\n@@ -1496,6 +1550,38 @@\n    (set_attr \"type\" \"alus_sreg\")]\n )\n \n+(define_insn \"subvsi3\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t (minus:DI\n+\t  (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"l,r\"))\n+\t  (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"l,r\")))\n+\t (sign_extend:DI (minus:SI (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=l,r\")\n+\t(minus:SI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_32BIT\"\n+  \"subs%?\\\\t%0, %1, %2\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"arch\" \"t2,*\")\n+   (set_attr \"length\" \"2,4\")\n+   (set_attr \"type\" \"alus_sreg\")]\n+)\n+\n+(define_insn \"subvsi3_imm1\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t (minus:DI\n+\t  (match_operand 1 \"arm_immediate_operand\" \"I\")\n+\t  (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\")))\n+\t (sign_extend:DI (minus:SI (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(minus:SI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_32BIT\"\n+  \"rsbs%?\\\\t%0, %2, %1\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"alus_imm\")]\n+)\n+\n (define_insn \"subsi3_carryin\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(minus:SI (minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"r,I,Pz\")"}]}