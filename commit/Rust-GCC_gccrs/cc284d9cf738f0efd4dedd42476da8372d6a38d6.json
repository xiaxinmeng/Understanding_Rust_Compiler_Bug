{"sha": "cc284d9cf738f0efd4dedd42476da8372d6a38d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MyODRkOWNmNzM4ZjBlZmQ0ZGVkZDQyNDc2ZGE4MzcyZDZhMzhkNg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-02-28T22:29:42Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-02-28T22:29:42Z"}, "message": "PR c++/87068 - missing diagnostic with fallthrough statement.\n\n\t* gimplify.c (expand_FALLTHROUGH_r): If IFN_FALLTHROUGH was found\n\tat the end of a seq, save its location to walk_stmt_info.\n\t(expand_FALLTHROUGH): Warn if IFN_FALLTHROUGH is at the end of\n\ta switch.\n\n\t* c-c++-common/Wimplicit-fallthrough-37.c: New test.\n\nFrom-SVN: r269288", "tree": {"sha": "d36b846330e81bbc43a80c1d99385e483956dabf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d36b846330e81bbc43a80c1d99385e483956dabf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc284d9cf738f0efd4dedd42476da8372d6a38d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc284d9cf738f0efd4dedd42476da8372d6a38d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc284d9cf738f0efd4dedd42476da8372d6a38d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc284d9cf738f0efd4dedd42476da8372d6a38d6/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80d6ca01843d2119c913e3adf27d20204846072f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d6ca01843d2119c913e3adf27d20204846072f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80d6ca01843d2119c913e3adf27d20204846072f"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "3ee63704fd5029d61be7eebf0dc2b71374d23017", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc284d9cf738f0efd4dedd42476da8372d6a38d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc284d9cf738f0efd4dedd42476da8372d6a38d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc284d9cf738f0efd4dedd42476da8372d6a38d6", "patch": "@@ -1,3 +1,11 @@\n+2019-02-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87068 - missing diagnostic with fallthrough statement.\n+\t* gimplify.c (expand_FALLTHROUGH_r): If IFN_FALLTHROUGH was found\n+\tat the end of a seq, save its location to walk_stmt_info.\n+\t(expand_FALLTHROUGH): Warn if IFN_FALLTHROUGH is at the end of\n+\ta switch.\n+\n 2019-02-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR lto/88585"}, {"sha": "983635ba21f1ce4f17df1511fba80d113ccda2c2", "filename": "gcc/gimplify.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc284d9cf738f0efd4dedd42476da8372d6a38d6/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc284d9cf738f0efd4dedd42476da8372d6a38d6/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=cc284d9cf738f0efd4dedd42476da8372d6a38d6", "patch": "@@ -2263,7 +2263,7 @@ maybe_warn_implicit_fallthrough (gimple_seq seq)\n \n static tree\n expand_FALLTHROUGH_r (gimple_stmt_iterator *gsi_p, bool *handled_ops_p,\n-\t\t      struct walk_stmt_info *)\n+\t\t      struct walk_stmt_info *wi)\n {\n   gimple *stmt = gsi_stmt (*gsi_p);\n \n@@ -2283,7 +2283,10 @@ expand_FALLTHROUGH_r (gimple_stmt_iterator *gsi_p, bool *handled_ops_p,\n \t{\n \t  gsi_remove (gsi_p, true);\n \t  if (gsi_end_p (*gsi_p))\n-\t    return integer_zero_node;\n+\t    {\n+\t      *static_cast<location_t *>(wi->info) = gimple_location (stmt);\n+\t      return integer_zero_node;\n+\t    }\n \n \t  bool found = false;\n \t  location_t loc = gimple_location (stmt);\n@@ -2347,8 +2350,15 @@ static void\n expand_FALLTHROUGH (gimple_seq *seq_p)\n {\n   struct walk_stmt_info wi;\n+  location_t loc;\n   memset (&wi, 0, sizeof (wi));\n+  wi.info = (void *) &loc;\n   walk_gimple_seq_mod (seq_p, expand_FALLTHROUGH_r, NULL, &wi);\n+  if (wi.callback_result == integer_zero_node)\n+    /* We've found [[fallthrough]]; at the end of a switch, which the C++\n+       standard says is ill-formed; see [dcl.attr.fallthrough].  */\n+    warning_at (loc, 0, \"attribute %<fallthrough%> not preceding \"\n+\t\t\"a case label or default label\");\n }\n \n \f"}, {"sha": "423591d3a8db0eddf5346f131f8ed679573b1bd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc284d9cf738f0efd4dedd42476da8372d6a38d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc284d9cf738f0efd4dedd42476da8372d6a38d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc284d9cf738f0efd4dedd42476da8372d6a38d6", "patch": "@@ -1,3 +1,8 @@\n+2019-02-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87068 - missing diagnostic with fallthrough statement.\n+\t* c-c++-common/Wimplicit-fallthrough-37.c: New test.\n+\n 2019-02-28  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n "}, {"sha": "644003af47d4748e74ee39eface32f68a2c20359", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-37.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc284d9cf738f0efd4dedd42476da8372d6a38d6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc284d9cf738f0efd4dedd42476da8372d6a38d6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-37.c?ref=cc284d9cf738f0efd4dedd42476da8372d6a38d6", "patch": "@@ -0,0 +1,13 @@\n+/* PR c++/87068 */\n+/* { dg-do compile } */\n+\n+void\n+f (int n)\n+{\n+  switch (n)\n+    {\n+    case 4:\n+      ++n;\n+      __attribute__((fallthrough)); /* { dg-warning \"not preceding\" } */\n+    }\n+}"}]}