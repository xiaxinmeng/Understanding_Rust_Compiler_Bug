{"sha": "201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAxY2RiNzQzODc5Y2JmZmQzOGM1M2Q4ZWJmODVmYTlmZmYxZTBlNA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-08-05T14:37:48Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-08-05T14:37:48Z"}, "message": "Makefile.in (UNWIND_H): Remove.\n\n\tgcc:\n\t* Makefile.in (UNWIND_H): Remove.\n\t(LIB2ADDEH, LIB2ADDEHSTATIC, LIB2ADDEHSHARED): Move to\n\t../libgcc/Makefile.in.\n\t(LIBUNWIND, SHLIBUNWIND_LINK, SHLIBUNWIND_INSTALL): Likewise.\n\t(LIBUNWINDDEP): Remove.\n\t(libgcc-support): Remove LIB2ADDEH, $(srcdir)/emutls.c dependencies.\n\t(libgcc.mvars): Remove LIB2ADDEH, LIB2ADDEHSTATIC, LIB2ADDEHSHARED,\n\tLIBUNWIND, SHLIBUNWIND_LINK, SHLIBUNWIND_INSTALL.\n\t(stmp-int-hdrs): Remove $(UNWIND_H) dependency.\n\tDon't copy $(UNWIND_H).\n\t* config.gcc (ia64*-*-linux*): Remove with_system_libunwind\n\thandling.\n\t* configure.ac (GCC_CHECK_UNWIND_GETIPINFO): Remove.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* emutls.c, unwind-c.c, unwind-compat.c, unwind-compat.h,\n\tunwind-dw2-fde-compat.c, unwind-dw2-fde-glibc.c, unwind-dw2-fde.c,\n\tunwind-dw2-fde.h, unwind-dw2.c, unwind-dw2.h, unwind-generic.h,\n\tunwind-pe.h, unwind-sjlj.c, unwind.inc: Move to ../libgcc.\n\t* unwind-dw2-fde-darwin.c: Move to ../libgcc/config.\n\t* config/arm/libunwind.S, config/arm/pr-support.c,\n\tconfig/arm/unwind-arm.c, config/arm/unwind-arm.h: Move to\n\t../libgcc/config/arm.\n\t* config/arm/t-bpabi (UNWIND_H, LIB2ADDEH): Remove.\n\t* config/arm/t-symbian (UNWIND_H, LIB2ADDEH): Remove.\n\t* config/frv/t-frv ($(T)frvbegin$(objext)): Use\n\t$(srcdir)/../libgcc to refer to unwind-dw2-fde.h.\n\t($(T)frvend$(objext)): Likewise.\n\t* config/ia64/t-glibc (LIB2ADDEH): Remove.\n\t* config/ia64/t-glibc-libunwind: Move to ../libgcc/config/ia64.\n\t* config/ia64/fde-glibc.c, config/ia64/fde-vms.c,\n\tconfig/ia64/unwind-ia64.c, config/ia64/unwind-ia64.h: Move to\n\t../libgcc/config/ia64.\n\t* config/ia64/t-hpux (LIB2ADDEH): Remove.\n\t* config/ia64/t-ia64 (LIB2ADDEH): Remove.\n\t* config/ia64/t-vms (LIB2ADDEH): Remove.\n\t* config/ia64/vms.h (UNW_IVMS_MODE,\n\tMD_UNW_COMPATIBLE_PERSONALITY_P): Remove.\n\t* config/picochip/t-picochip (LIB2ADDEH): Remove.\n\t* config/rs6000/aix.h (R_LR, MD_FROB_UPDATE_CONTEXT): Remove.\n\t* config/rs6000/t-darwin (LIB2ADDEH): Remove.\n\t* config/rs6000/darwin-fallback.c: Move to ../libgcc/config/rs6000.\n\t* config/sh/t-sh ($(T)unwind-dw2-Os-4-200.o): Use\n\t$(srcdir)/../libgcc to refer to unwinder sources.\n\t* config/spu/t-spu-elf (LIB2ADDEH): Remove.\n\t* config/t-darwin (LIB2ADDEH): Remove.\n\t* config/t-freebsd (LIB2ADDEH): Remove.\n\t* config/t-libunwind (LIB2ADDEH, LIB2ADDEHSTATIC): Remove.\n\t* config/t-libunwind-elf: Move to ../libgcc/config.\n\t* config/t-linux (LIB2ADDEH): Remove.\n\t* config/t-sol2 (LIB2ADDEH): Remove.\n\t* config/xtensa/t-xtensa (LIB2ADDEH): Remove.\n\t* system.h (MD_FROB_UPDATE_CONTEXT): Poison.\n\n\tgcc/po:\n\t* EXCLUDES (unwind-c.c, unwind-dw2-fde-darwin.c)\n\t(unwind-dw2-fde-glibc.c, unwind-dw2-fde.c, unwind-dw2-fde.h)\n\t(unwind-dw2.c, unwind-pe.h, unwind-sjlj.c, unwind.h): Remove.\n\n\tlibgcc:\n\t* Makefile.in (LIB2ADDEH, LIB2ADDEHSTATIC, LIB2ADDEHSHARED): New\n\tvariables.\n\t(LIBUNWIND, SHLIBUNWIND_LINK, SHLIBUNWIND_INSTALL): New variables.\n\t(LIB2ADDEH, LIB2ADDEHSTATIC, LIB2ADDEHSHARED): Add $(srcdir)/emutls.c.\n\t(install-unwind_h): New target.\n\t(all): Depend on it.\n\t* config.host (unwind_header): New variable.\n\t(*-*-freebsd*): Set tmake_file to t-eh-dw2-dip.\n\t(*-*-linux*, frv-*-*linux*, *-*-kfreebsd*-gnu, *-*-knetbsd*-gnu,\n\t*-*-gnu*): Likewise, also for *-*-kopensolaris*-gnu.\n\t(*-*-solaris2*): Add t-eh-dw2-dip to tmake_file.\n\t(arm*-*-linux*): Add arm/t-bpabi for arm*-*-linux-*eabi.\n\tSet unwind_header.\n\t(arm*-*-uclinux*): Add arm/t-bpabi for arm*-*-uclinux*eabi.\n\tSet unwind_header.\n\t(arm*-*-eabi*, arm*-*-symbianelf*): Add arm/t-bpabi for\n\tarm*-*-eabi*.\n\tAdd arm/t-symbian to tmake_file for arm*-*-symbianelf*.\n\tSet unwind_header.\n\t(ia64*-*-elf*): Add ia64/t-eh-ia64 to tmake_file.\n\t(ia64*-*-freebsd*): Likewise.\n\t(ia64*-*-linux*): Add ia64/t-glibc, ia64/t-eh-ia64, t-libunwind to\n\ttmake_file.\n\tAdd t-libunwind-elf, ia64/t-glibc-libunwind unless\n\t$with_system_libunwind.\n\t(ia64*-*-hpux*): Set tmake_file.\n\t(ia64-hp-*vms*): Add ia64/t-eh-ia64 to tmake_file.\n\t(picochip-*-*): Set tmake_file.\n\t(rs6000-ibm-aix4.[3456789]*, powerpc-ibm-aix4.[3456789]*): Set\n\tmd_unwind_header.\n\t(rs6000-ibm-aix5.1.*, powerpc-ibm-aix5.1.*): Likewise.\n\t(rs6000-ibm-aix[56789].*, powerpc-ibm-aix[56789].*): Likewise.\n\t(s390x-ibm-tpf*): Add t-eh-dw2-dip to tmake_file.\n\t(xtensa*-*-elf*): Set tmake_file.\n\t(xtensa*-*-linux*): Likewise.\n\t* configure.ac: Include ../config/unwind_ipinfo.m4.\n\tCall GCC_CHECK_UNWIND_GETIPINFO.\n\tLink unwind.h to $unwind_header.\n\t* configure: Regenerate.\n\t* emutls.c, unwind-c.c, unwind-compat.c, unwind-compat.h,\n\tunwind-dw2-fde-compat.c, unwind-dw2-fde-dip.c, unwind-dw2-fde.c,\n\tunwind-dw2-fde.h, unwind-dw2.c, unwind-dw2.h, unwind-generic.h,\n\tunwind-pe.h, unwind-sjlj.c, unwind.inc: New files.\n\t* config/unwind-dw2-fde-darwin.c: New file.\n\t* config/arm/libunwind.S, config/arm/pr-support.c,\n\tconfig/arm/t-bpabi, config/arm/t-symbian, config/arm/unwind-arm.c,\n\tconfig/arm/unwind-arm.h,: New files.\n\t* config/ia64/fde-glibc.c, config/ia64/fde-vms.c,\n\tconfig/ia64/t-eh-ia64, config/ia64/t-glibc,\n\tconfig/ia64/t-glibc-libunwind, config/ia64/t-hpux,\n\tconfig/ia64/t-vms, config/ia64/unwind-ia64.c,\n\tconfig/ia64/unwind-ia64.h: New files.\n\t* config/picochip/t-picochip: New file.\n\t* config/rs6000/aix-unwind.h, config/rs6000/darwin-fallback.c: New\n\tfiles.\n\t* config/rs6000/t-darwin (LIB2ADDEH): Set.\n\t* config/s390/t-tpf (LIB2ADDEH): Remove.\n\t* config/t-darwin (LIB2ADDEH): Set.\n\t* config/t-eh-dw2-dip: New file.\n\t* config/t-libunwind, config/t-libunwind-elf: New files.\n\t* config/t-sol2 (LIB2ADDEH): Remove.\n\t* config/xtensa/t-xtensa: New file.\n\n\tgcc/ada:\n\t* gcc-interface/Makefile.in (raise-gcc.o): Search\n\t$(srcdir)/../libgcc.\n\n\tlibgo:\n\t* Makefile.am (AM_CFLAGS): Search $(srcdir)/../libgcc.\n\t* Makefile.in: Regenerate.\n\n\tlibjava:\n\t* configure.ac (GCC_UNWIND_INCLUDE): Rename to\n\tLIBGCC_UNWIND_INCLUDE.\n\tPoint to $(multi_basedir)/./libjava/../libgcc.\n\t* configure: Regenerate.\n\t* Makefile.am (GCC_UNWIND_INCLUDE): Reflect this.\n\t* Makefile.in: Regenerate.\n\n\tlibobjc:\n\t* Makefile.in (INCLUDES): Search\n\t$(srcdir)/$(MULTISRCTOP)../libgcc.\n\n\tlibstdc++-v3:\n\t* acinclude.m4 (GLIBCXX_EXPORT_INCLUDES): Point TOPLEVEL_INCLUDES\n\tto $(toplevel_srcdir)/libgcc.\n\t* configure: Regenerate.\n\nFrom-SVN: r177447", "tree": {"sha": "80376027cf518687afe9d3c715d908e42d42c267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80376027cf518687afe9d3c715d908e42d42c267"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/comments", "author": null, "committer": null, "parents": [{"sha": "d50f4827c7062e3247baf493e646c365114c28cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50f4827c7062e3247baf493e646c365114c28cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d50f4827c7062e3247baf493e646c365114c28cd"}], "stats": {"total": 666, "additions": 421, "deletions": 245}, "files": [{"sha": "438e8bb95f0c1950ef9b3ded9836a8637e9bf7cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,3 +1,59 @@\n+2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Makefile.in (UNWIND_H): Remove.\n+\t(LIB2ADDEH, LIB2ADDEHSTATIC, LIB2ADDEHSHARED): Move to\n+\t../libgcc/Makefile.in.\n+\t(LIBUNWIND, SHLIBUNWIND_LINK, SHLIBUNWIND_INSTALL): Likewise.\n+\t(LIBUNWINDDEP): Remove.\n+\t(libgcc-support): Remove LIB2ADDEH, $(srcdir)/emutls.c dependencies.\n+\t(libgcc.mvars): Remove LIB2ADDEH, LIB2ADDEHSTATIC, LIB2ADDEHSHARED,\n+\tLIBUNWIND, SHLIBUNWIND_LINK, SHLIBUNWIND_INSTALL.\n+\t(stmp-int-hdrs): Remove $(UNWIND_H) dependency.\n+\tDon't copy $(UNWIND_H).\n+\t* config.gcc (ia64*-*-linux*): Remove with_system_libunwind\n+\thandling.\n+\t* configure.ac (GCC_CHECK_UNWIND_GETIPINFO): Remove.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* emutls.c, unwind-c.c, unwind-compat.c, unwind-compat.h,\n+\tunwind-dw2-fde-compat.c, unwind-dw2-fde-glibc.c, unwind-dw2-fde.c,\n+\tunwind-dw2-fde.h, unwind-dw2.c, unwind-dw2.h, unwind-generic.h,\n+\tunwind-pe.h, unwind-sjlj.c, unwind.inc: Move to ../libgcc.\n+\t* unwind-dw2-fde-darwin.c: Move to ../libgcc/config.\n+\t* config/arm/libunwind.S, config/arm/pr-support.c,\n+\tconfig/arm/unwind-arm.c, config/arm/unwind-arm.h: Move to\n+\t../libgcc/config/arm.\n+\t* config/arm/t-bpabi (UNWIND_H, LIB2ADDEH): Remove.\n+\t* config/arm/t-symbian (UNWIND_H, LIB2ADDEH): Remove.\n+\t* config/frv/t-frv ($(T)frvbegin$(objext)): Use\n+\t$(srcdir)/../libgcc to refer to unwind-dw2-fde.h.\n+\t($(T)frvend$(objext)): Likewise.\n+\t* config/ia64/t-glibc (LIB2ADDEH): Remove.\n+\t* config/ia64/t-glibc-libunwind: Move to ../libgcc/config/ia64.\n+\t* config/ia64/fde-glibc.c, config/ia64/fde-vms.c,\n+\tconfig/ia64/unwind-ia64.c, config/ia64/unwind-ia64.h: Move to\n+\t../libgcc/config/ia64.\n+\t* config/ia64/t-hpux (LIB2ADDEH): Remove.\n+\t* config/ia64/t-ia64 (LIB2ADDEH): Remove.\n+\t* config/ia64/t-vms (LIB2ADDEH): Remove.\n+\t* config/ia64/vms.h (UNW_IVMS_MODE,\n+\tMD_UNW_COMPATIBLE_PERSONALITY_P): Remove.\n+\t* config/picochip/t-picochip (LIB2ADDEH): Remove.\n+\t* config/rs6000/aix.h (R_LR, MD_FROB_UPDATE_CONTEXT): Remove.\n+\t* config/rs6000/t-darwin (LIB2ADDEH): Remove.\n+\t* config/rs6000/darwin-fallback.c: Move to ../libgcc/config/rs6000.\n+\t* config/sh/t-sh ($(T)unwind-dw2-Os-4-200.o): Use\n+\t$(srcdir)/../libgcc to refer to unwinder sources.\n+\t* config/spu/t-spu-elf (LIB2ADDEH): Remove.\n+\t* config/t-darwin (LIB2ADDEH): Remove.\n+\t* config/t-freebsd (LIB2ADDEH): Remove.\n+\t* config/t-libunwind (LIB2ADDEH, LIB2ADDEHSTATIC): Remove.\n+\t* config/t-libunwind-elf: Move to ../libgcc/config.\n+\t* config/t-linux (LIB2ADDEH): Remove.\n+\t* config/t-sol2 (LIB2ADDEH): Remove.\n+\t* config/xtensa/t-xtensa (LIB2ADDEH): Remove.\n+\t* system.h (MD_FROB_UPDATE_CONTEXT): Poison.\n+\n 2011-08-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (processor_alias_table): Add core-avx-i."}, {"sha": "889deb16240ee0ab94817045270c4858eefc00bc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -378,8 +378,6 @@ USER_H = $(srcdir)/ginclude/float.h \\\n USER_H_INC_NEXT_PRE = @user_headers_inc_next_pre@\n USER_H_INC_NEXT_POST = @user_headers_inc_next_post@\n \n-UNWIND_H = $(srcdir)/unwind-generic.h\n-\n # The GCC to use for compiling crt*.o.\n # Usually the one we just built.\n # Don't use this as a dependency--use $(GCC_PASSES).\n@@ -693,18 +691,6 @@ CRTSTUFF_CFLAGS = -O2 $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n   -fno-stack-protector \\\n   $(INHIBIT_LIBC_CFLAGS)\n \n-# Additional sources to handle exceptions; overridden by targets as needed.\n-LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde.c \\\n-   $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c\n-LIB2ADDEHSTATIC = $(LIB2ADDEH)\n-LIB2ADDEHSHARED = $(LIB2ADDEH)\n-\n-# Don't build libunwind by default.\n-LIBUNWIND =\n-LIBUNWINDDEP =\n-SHLIBUNWIND_LINK =\n-SHLIBUNWIND_INSTALL =\n-\n # nm flags to list global symbols in libgcc object files.\n SHLIB_NM_FLAGS = -pg\n \n@@ -1898,7 +1884,7 @@ GCC_EXTRA_PARTS := $(sort $(EXTRA_MULTILIB_PARTS) $(EXTRA_PARTS))\n \n libgcc-support: libgcc.mvars stmp-int-hdrs $(TCONFIG_H) \\\n \t$(MACHMODE_H) $(FPBIT) $(DPBIT) $(TPBIT) $(LIB2ADD) \\\n-\t$(LIB2ADD_ST) $(LIB2ADDEH) $(srcdir)/emutls.c gcov-iov.h $(SFP_MACHINE)\n+\t$(LIB2ADD_ST) gcov-iov.h $(SFP_MACHINE)\n \n libgcc.mvars: config.status Makefile $(LIB2ADD) $(LIB2ADD_ST) specs \\\n \t\txgcc$(exeext)\n@@ -1909,13 +1895,7 @@ libgcc.mvars: config.status Makefile $(LIB2ADD) $(LIB2ADD_ST) specs \\\n \techo LIB2FUNCS_EXCLUDE = '$(LIB2FUNCS_EXCLUDE)' >> tmp-libgcc.mvars\n \techo LIB2ADD = '$(call srcdirify,$(LIB2ADD))' >> tmp-libgcc.mvars\n \techo LIB2ADD_ST = '$(call srcdirify,$(LIB2ADD_ST))' >> tmp-libgcc.mvars\n-\techo LIB2ADDEH = '$(call srcdirify,$(LIB2ADDEH) $(srcdir)/emutls.c)' >> tmp-libgcc.mvars\n-\techo LIB2ADDEHSTATIC = '$(call srcdirify,$(LIB2ADDEHSTATIC) $(srcdir)/emutls.c)' >> tmp-libgcc.mvars\n-\techo LIB2ADDEHSHARED = '$(call srcdirify,$(LIB2ADDEHSHARED) $(srcdir)/emutls.c)' >> tmp-libgcc.mvars\n \techo LIB2_SIDITI_CONV_FUNCS = '$(LIB2_SIDITI_CONV_FUNCS)' >> tmp-libgcc.mvars\n-\techo LIBUNWIND = '$(call srcdirify,$(LIBUNWIND))' >> tmp-libgcc.mvars\n-\techo SHLIBUNWIND_LINK = '$(SHLIBUNWIND_LINK)' >> tmp-libgcc.mvars\n-\techo SHLIBUNWIND_INSTALL = '$(SHLIBUNWIND_INSTALL)' >> tmp-libgcc.mvars\n \techo FPBIT = '$(FPBIT)' >> tmp-libgcc.mvars\n \techo FPBIT_FUNCS = '$(FPBIT_FUNCS)' >> tmp-libgcc.mvars\n \techo LIB2_DIVMOD_FUNCS = '$(LIB2_DIVMOD_FUNCS)' >> tmp-libgcc.mvars\n@@ -4114,7 +4094,7 @@ gcov-dump$(exeext): $(GCOV_DUMP_OBJS) $(LIBDEPS)\n # be rebuilt.\n \n # Build the include directories.\n-stmp-int-hdrs: $(STMP_FIXINC) $(USER_H) $(UNWIND_H) fixinc_list\n+stmp-int-hdrs: $(STMP_FIXINC) $(USER_H) fixinc_list\n # Copy in the headers provided with gcc.\n # The sed command gets just the last file name component;\n # this is necessary because VPATH could add a dirname.\n@@ -4146,9 +4126,6 @@ stmp-int-hdrs: $(STMP_FIXINC) $(USER_H) $(UNWIND_H) fixinc_list\n \t    chmod a+r include/$$file; \\\n \t  fi; \\\n \tdone\n-\trm -f include/unwind.h\n-\tcp $(UNWIND_H) include/unwind.h\n-\tchmod a+r include/unwind.h\n \trm -f include/stdint.h\n \tif [ $(USE_GCC_STDINT) = wrap ]; then \\\n \t  rm -f include/stdint-gcc.h; \\"}, {"sha": "1b90b2f5ee6603b8cdfed2a2f58b4858542b872b", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -116,6 +116,5 @@ m4_include([../config/lib-prefix.m4])\n m4_include([../config/override.m4])\n m4_include([../config/progtest.m4])\n m4_include([../config/stdint.m4])\n-m4_include([../config/unwind_ipinfo.m4])\n m4_include([../config/warnings.m4])\n m4_include([acinclude.m4])"}, {"sha": "743fa0e57dca39535d6f8c9f73aee37e2782f3ec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,3 +1,8 @@\n+2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gcc-interface/Makefile.in (raise-gcc.o): Search\n+\t$(srcdir)/../libgcc.\n+\n 2011-08-05  Bob Duff  <duff@adacore.com>\n \n \t* sinfo.ads, sinfo.adb (Subpool_Handle_Name): New attribute for\n@@ -100,6 +105,7 @@\n \tnecessary.\n \t* put_scos.adb: Code simplification based on above change.\n \n+>>>>>>> .r177446\n 2011-08-05  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, gnatcmd.adb, switch-c.adb, exp_attr.adb, make.adb,"}, {"sha": "1e7a392edf48caa47031952a22ea4089329fa7c6", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -2773,7 +2773,7 @@ vx_stack_info.o : vx_stack_info.c\n \n raise-gcc.o : raise-gcc.c raise.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n-\t\t-iquote $(srcdir) \\\n+\t\t-iquote $(srcdir)/../libgcc \\\n \t\t$(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n cio.o     : cio.c"}, {"sha": "673b768b7704d7abffebe5f3ca0f2b661e4622b9", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1604,9 +1604,6 @@ ia64*-*-freebsd*)\n ia64*-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h ia64/sysv4.h ia64/linux.h\"\n \ttmake_file=\"${tmake_file} ia64/t-ia64 t-libunwind ia64/t-glibc\"\n-\tif test x$with_system_libunwind != xyes ; then\n-\t\ttmake_file=\"${tmake_file} t-libunwind-elf ia64/t-glibc-libunwind\"\n-\tfi\n \ttarget_cpu_default=\"MASK_GNU_AS|MASK_GNU_LD\"\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtfastmath.o\"\n \t;;"}, {"sha": "b6b5f40d7231022efa2e18fe58cd7a3ea7214f72", "filename": "gcc/config/arm/t-bpabi", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Farm%2Ft-bpabi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Farm%2Ft-bpabi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-bpabi?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -25,11 +25,6 @@ LIB2FUNCS_EXTRA = $(srcdir)/config/arm/bpabi.c \\\n \n LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/arm/fp16.c\n \n-UNWIND_H = $(srcdir)/config/arm/unwind-arm.h\n-LIB2ADDEH = $(srcdir)/config/arm/unwind-arm.c \\\n-  $(srcdir)/config/arm/libunwind.S \\\n-  $(srcdir)/config/arm/pr-support.c $(srcdir)/unwind-c.c\n-\n # Add the BPABI names.\n SHLIB_MAPFILES += $(srcdir)/config/arm/libgcc-bpabi.ver\n "}, {"sha": "f074591acbe3eb4e3c059fe50d14eb26d00a9a81", "filename": "gcc/config/arm/t-symbian", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Farm%2Ft-symbian", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Farm%2Ft-symbian", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-symbian?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -30,10 +30,6 @@ LIB1ASMFUNCS += \\\n \t_truncdfsf2 _negsf2 _addsubsf3 _muldivsf3 _cmpsf2 _unordsf2 \\\n \t_fixsfsi _fixunssfsi\n \n-# Include the gcc personality routine\n-UNWIND_H = $(srcdir)/config/arm/unwind-arm.h\n-LIB2ADDEH = $(srcdir)/unwind-c.c $(srcdir)/config/arm/pr-support.c\n-\n # Include half-float helpers.\n LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/arm/fp16.c\n "}, {"sha": "2729008879c482f5019349810b8863c1c7a0fa07", "filename": "gcc/config/frv/t-frv", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Ffrv%2Ft-frv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Ffrv%2Ft-frv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ft-frv?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+# Copyright (C) 2002, 2003, 2004, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -81,12 +81,12 @@ EXTRA_MULTILIB_PARTS=frvbegin.o frvend.o\n FRVSTUFF_CFLAGS = $(TARGET_LIBGCC2_CFLAGS)\n \n $(T)frvbegin$(objext): $(srcdir)/config/frv/frvbegin.c $(GCC_PASSES) \\\n-  $(CONFIG_H) defaults.h unwind-dw2-fde.h gbl-ctors.h\n+  $(CONFIG_H) defaults.h $(srcdir)/../libgcc/unwind-dw2-fde.h gbl-ctors.h\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) $(FRVSTUFF_CFLAGS) \\\n \t  -c $(srcdir)/config/frv/frvbegin.c -o $(T)frvbegin$(objext)\n \n $(T)frvend$(objext): $(srcdir)/config/frv/frvend.c $(GCC_PASSES) \\\n-  $(CONFIG_H) defaults.h unwind-dw2-fde.h gbl-ctors.h\n+  $(CONFIG_H) defaults.h $(srcdir)/../libgcc/unwind-dw2-fde.h gbl-ctors.h\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) $(FRVSTUFF_CFLAGS) \\\n \t  -c $(srcdir)/config/frv/frvend.c -o $(T)frvend$(objext)\n "}, {"sha": "ce18a92e27582aba97aefaf0e6eaf53f67337485", "filename": "gcc/config/ia64/t-glibc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fia64%2Ft-glibc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fia64%2Ft-glibc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-glibc?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,5 +1 @@\n-# Use system libunwind library on IA-64 GLIBC based system.\n-LIB2ADDEH = $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c \\\n-  $(srcdir)/unwind-compat.c\n-\n SHLIB_MAPFILES += $(srcdir)/config/ia64/libgcc-glibc.ver"}, {"sha": "4aa661441b2b0ba034d2a9a97675353daa689b07", "filename": "gcc/config/ia64/t-hpux", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fia64%2Ft-hpux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fia64%2Ft-hpux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-hpux?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 2001, 2002, 2003, 2004, 2005,\n-# 2006 Free Software Foundation, Inc.\n+# 2006, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -50,8 +50,6 @@ LIBGCC1_TEST =\n \n T_CFLAGS += -DUSE_LIBUNWIND_EXCEPTIONS\n \n-LIB2ADDEH = $(srcdir)/unwind-c.c\n-\n SHLIB_EXT = .so\n # Must include -lunwind in the link, so that libgcc_s.so has the necessary\n # DT_NEEDED entry for libunwind."}, {"sha": "f130f7c09d13c8c0db5452c291caa417f1bd1542", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -43,9 +43,6 @@ SHLIB_MAPFILES += $(srcdir)/config/ia64/libgcc-ia64.ver\n # Effectively disable the crtbegin/end rules using crtstuff.c\n T = disable\n \n-LIB2ADDEH = $(srcdir)/config/ia64/unwind-ia64.c $(srcdir)/unwind-sjlj.c \\\n-  $(srcdir)/unwind-c.c\n-\n ia64-c.o: $(srcdir)/config/ia64/ia64-c.c $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TREE_H) $(CPPLIB_H) $(C_COMMON_H) $(C_PRAGMA_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}, {"sha": "094d53483ee50cbd1ef70d6bb8cba405be159e32", "filename": "gcc/config/ia64/t-vms", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fia64%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fia64%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-vms?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -32,8 +32,6 @@ $(T)crtinitS.o: $(srcdir)/config/ia64/vms-crtinit.asm $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) -I. -c -o $(T)crtinitS.o -x assembler-with-cpp \\\n \t\t$(srcdir)/config/ia64/vms-crtinit.asm\n \n-LIB2ADDEH += $(srcdir)/config/ia64/fde-vms.c\n-\n # Shared library macros\n shlib_version:=$(shell echo $(BASEVER_c) | sed -e 's/\\./,/' -e 's/\\.//g')\n SHLIB_EXT = .exe"}, {"sha": "853e0239d3b52dd265970fa5d5d38b1f45800cd7", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -139,9 +139,6 @@ STATIC func_ptr __CTOR_LIST__[1]                                             \\\n /* Define this to be nonzero if static stack checking is supported.  */\n #define STACK_CHECK_STATIC_BUILTIN 1\n \n-#define UNW_IVMS_MODE(HEADER) (((HEADER) >> 44) & 0x3L)\n-#define MD_UNW_COMPATIBLE_PERSONALITY_P(HEADER) (!UNW_IVMS_MODE (HEADER))\n-\n /* Minimum amount of stack required to recover from an anticipated stack\n    overflow detection.  The default value conveys an estimate of the amount\n    of stack required to propagate an exception.  */"}, {"sha": "4df74a01fc6b1fe661b9aa286cdb4254c12de9b8", "filename": "gcc/config/picochip/t-picochip", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fpicochip%2Ft-picochip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fpicochip%2Ft-picochip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Ft-picochip?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -43,9 +43,6 @@ LIB2FUNCS_EXTRA = \\\n LIB1ASMFUNCS = _mulsc3 _divsc3\n LIB1ASMSRC = picochip/libgccExtras/fake_libgcc.asm\n \n-# Turn off the building of exception handling libraries.\n-LIB2ADDEH =\n-\n # Turn off ranlib on target libraries.\n RANLIB_FOR_TARGET = cat\n "}, {"sha": "2c678a3a247921427a2b5e233ecdea13a31645c3", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -209,40 +209,6 @@\n /* And similarly for general purpose registers.  */\n #define GP_SAVE_INLINE(FIRST_REG) ((FIRST_REG) < 32)\n \n-/* If the current unwind info (FS) does not contain explicit info\n-   saving R2, then we have to do a minor amount of code reading to\n-   figure out if it was saved.  The big problem here is that the\n-   code that does the save/restore is generated by the linker, so\n-   we have no good way to determine at compile time what to do.  */\n-\n-#define R_LR 65\n-\n-#ifdef __64BIT__\n-#define MD_FROB_UPDATE_CONTEXT(CTX, FS)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if ((FS)->regs.reg[2].how == REG_UNSAVED)\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tunsigned int *insn\t\t\t\t\t\t\\\n-\t  = (unsigned int *)\t\t\t\t\t\t\\\n-\t    _Unwind_GetGR ((CTX), R_LR);\t\t\t\t\\\n-\tif (*insn == 0xE8410028)\t\t\t\t\t\\\n-\t  _Unwind_SetGRPtr ((CTX), 2, (CTX)->cfa + 40);\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-#else\n-#define MD_FROB_UPDATE_CONTEXT(CTX, FS)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if ((FS)->regs.reg[2].how == REG_UNSAVED)\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tunsigned int *insn\t\t\t\t\t\t\\\n-\t  = (unsigned int *)\t\t\t\t\t\t\\\n-\t    _Unwind_GetGR ((CTX), R_LR);\t\t\t\t\\\n-\tif (*insn == 0x80410014)\t\t\t\t\t\\\n-\t  _Unwind_SetGRPtr ((CTX), 2, (CTX)->cfa + 20);\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-#endif\n-\n #define PROFILE_HOOK(LABEL)   output_profile_hook (LABEL)\n \n /* No version of AIX fully supports AltiVec or 64-bit instructions in"}, {"sha": "27fc07b69b38234213e6c2b68a624b905e0736ef", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006,\n-# 2007 Free Software Foundation, Inc.\n+# 2007, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -40,7 +40,5 @@ TARGET_LIBGCC2_CFLAGS = -Wa,-force_cpusubtype_ALL -pipe -mmacosx-version-min=10.\n # Export the _xlq* symbols from darwin-ldouble.c.\n SHLIB_MAPFILES += $(srcdir)/config/rs6000/libgcc-ppc64.ver\n \n-LIB2ADDEH += $(srcdir)/config/rs6000/darwin-fallback.c\n-\n darwin-fpsave.o:\t$(srcdir)/config/rs6000/darwin-asm.h\n darwin-tramp.o:\t\t$(srcdir)/config/rs6000/darwin-asm.h"}, {"sha": "27cbd3d3e88d8e2b1b35d9152878dc84defd25f0", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2006, 2008, 2009 Free Software Foundation, Inc.\n+# 2003, 2004, 2006, 2008, 2009, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -149,7 +149,7 @@ $(T)sdivsi3_i4i-Os-4-200.o: $(srcdir)/config/sh/lib1funcs-Os-4-200.asm $(GCC_PAS\n \t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $@ -DL_sdivsi3_i4i -x assembler-with-cpp $<\n $(T)udivsi3_i4i-Os-4-200.o: $(srcdir)/config/sh/lib1funcs-Os-4-200.asm $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $@ -DL_udivsi3_i4i -x assembler-with-cpp $<\n-$(T)unwind-dw2-Os-4-200.o: $(srcdir)/unwind-dw2.c $(srcdir)/unwind-generic.h unwind-pe.h unwind.inc unwind-dw2-fde.h unwind-dw2.h $(CONFIG_H) coretypes.h $(TM_H) $(MACHMODE_H) longlong.h config.status stmp-int-hdrs tsystem.h $(GCC_PASSES)\n+$(T)unwind-dw2-Os-4-200.o: $(srcdir)/../libgcc/unwind-dw2.c $(srcdir)/../libgcc/unwind-generic.h $(srcdir)/../libgcc/unwind-pe.h $(srcdir)/../libgcc/unwind.inc $(srcdir)/../libgcc/unwind-dw2-fde.h $(srcdir)/../libgcc/unwind-dw2.h $(CONFIG_H) coretypes.h $(TM_H) $(MACHMODE_H) longlong.h config.status stmp-int-hdrs tsystem.h $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) $(LIBGCC2_CFLAGS) $(INCLUDES) $(vis_hide) -fexceptions -Os -c -o $@ $<\n OBJS_Os_4_200=$(T)sdivsi3_i4i-Os-4-200.o $(T)udivsi3_i4i-Os-4-200.o $(T)unwind-dw2-Os-4-200.o\n $(T)libgcc-Os-4-200.a: $(OBJS_Os_4_200) $(GCC_PASSES)"}, {"sha": "ab680f5be881621a7ccc98de071043f85df33e32", "filename": "gcc/config/spu/t-spu-elf", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Ft-spu-elf?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -47,9 +47,6 @@ LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/spu/float_unssidf.c \\\n \t\t\t $(srcdir)/config/spu/divmodti4.c \\\n \t\t\t $(srcdir)/config/spu/divv2df3.c\n \n-LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde.c \\\n-   $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c\n-\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "d952bd39273e3047589c70b1890437c92a2e3da0", "filename": "gcc/config/t-darwin", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-darwin?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -42,10 +42,6 @@ darwin-driver.o: $(srcdir)/config/darwin-driver.c \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  $(srcdir)/config/darwin-driver.c\n \n-# Use unwind-dw2-fde-darwin\n-LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde-darwin.c \\\n-  $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c\n-\n # -pipe because there's an assembler bug, 4077127, which causes\n # it to not properly process the first # directive, causing temporary\n # file names to appear in stabs, causing the bootstrap to fail.  Using -pipe"}, {"sha": "0680618a6ec703efec0d50f05def28eda7ce1458", "filename": "gcc/config/t-freebsd", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Ft-freebsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Ft-freebsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-freebsd?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -3,7 +3,3 @@ CRTSTUFF_T_CFLAGS_S = $(CRTSTUFF_T_CFLAGS) -fPIC\n \n # Compile libgcc.a with pic.\n TARGET_LIBGCC2_CFLAGS += -fPIC\n-\n-# Use unwind-dw2-fde-glibc\n-LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde-glibc.c \\\n-  $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c"}, {"sha": "6b8d2dd1292c19a077a0cd2f07535a3a72ad7b08", "filename": "gcc/config/t-libunwind", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Ft-libunwind", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Ft-libunwind", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-libunwind?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+# Copyright (C) 2002, 2003, 2004, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -22,9 +22,6 @@\n # so that the resulting libgcc_s.so has the necessary DT_NEEDED entry for\n # libunwind.\n SHLIB_LC = -lunwind -lc\n-LIB2ADDEH = $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c \\\n-  $(srcdir)/unwind-compat.c $(srcdir)/unwind-dw2-fde-compat.c\n-LIB2ADDEHSTATIC = $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c\n \n T_CFLAGS += -DUSE_LIBUNWIND_EXCEPTIONS\n TARGET_LIBGCC2_CFLAGS += -DUSE_GAS_SYMVER"}, {"sha": "64d19ca8dd77ff1c0b62a8d2da18396de2668a71", "filename": "gcc/config/t-linux", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-linux?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -25,7 +25,3 @@ TARGET_LIBGCC2_CFLAGS = -fPIC\n # Override t-slibgcc-elf-ver to export some libgcc symbols with\n # the symbol versions that glibc used.\n SHLIB_MAPFILES += $(srcdir)/config/libgcc-glibc.ver\n-\n-# Use unwind-dw2-fde-glibc\n-LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde-glibc.c \\\n-  $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c"}, {"sha": "f53da4d3ca6617d8c42feff142a58efc9068e76f", "filename": "gcc/config/t-sol2", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-sol2?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -31,8 +31,3 @@ sol2.o: $(srcdir)/config/sol2.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \n # This is required by gcc/ada/gcc-interface/Makefile.in.\n TARGET_LIBGCC2_CFLAGS = -fPIC\n-\n-# Use unwind-dw2-fde-glibc.c.  Unless linker support and dl_iterate_phdr\n-# are present, automatically falls back to unwind-dw2-fde.c.\n-LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde-glibc.c \\\n-  $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c"}, {"sha": "641e6fe76201e011cdceaf87b8eba58951068c1d", "filename": "gcc/config/xtensa/t-xtensa", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fxtensa%2Ft-xtensa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fxtensa%2Ft-xtensa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Ft-xtensa?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,4 +1,5 @@\n-# Copyright (C) 2002, 2003, 2006, 2007, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2002, 2003, 2006, 2007, 2008, 2011\n+# Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -29,8 +30,6 @@ LIB1ASMFUNCS = _mulsi3 _divsi3 _modsi3 _udivsi3 _umodsi3 \\\n \t_truncdfsf2 _extendsfdf2\n \n LIB2FUNCS_EXTRA = $(srcdir)/config/xtensa/lib2funcs.S\n-LIB2ADDEH = $(srcdir)/config/xtensa/unwind-dw2-xtensa.c \\\n-   $(srcdir)/unwind-dw2-fde.c $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c\n \n $(T)crti.o: $(srcdir)/config/xtensa/crti.asm $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\"}, {"sha": "88bb116dc1f8ec7d68dbe918ea46eaaded4c6f46", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 44, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -894,7 +894,6 @@ enable_rpath\n with_libiconv_prefix\n enable_initfini_array\n enable_sjlj_exceptions\n-with_system_libunwind\n enable_secureplt\n enable_leading_mingw64_underscores\n enable_cld\n@@ -1659,7 +1658,6 @@ Optional Packages:\n   --with-gnu-ld           assume the C compiler uses GNU ld default=no\n   --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib\n   --without-libiconv-prefix     don't search for libiconv in includedir and libdir\n-  --with-system-libunwind use installed libunwind\n   --with-pic              try to use only PIC/non-PIC objects [default=use\n                           both]\n   --with-gnu-ld           assume the C compiler uses GNU ld [default=no]\n@@ -10855,46 +10853,6 @@ _ACEOF\n \n fi\n \n-# For platforms with the unwind ABI which includes an unwind library,\n-# libunwind, we can choose to use the system libunwind.\n-# config.gcc also contains tests of with_system_libunwind.\n-\n-\n-# Check whether --with-system-libunwind was given.\n-if test \"${with_system_libunwind+set}\" = set; then :\n-  withval=$with_system_libunwind;\n-fi\n-\n-  # If system-libunwind was not specifically set, pick a default setting.\n-  if test x$with_system_libunwind = x; then\n-    case ${target} in\n-      ia64-*-hpux*) with_system_libunwind=yes ;;\n-      *) with_system_libunwind=no ;;\n-    esac\n-  fi\n-  # Based on system-libunwind and target, do we have ipinfo?\n-  if  test x$with_system_libunwind = xyes; then\n-    case ${target} in\n-      ia64-*-*) have_unwind_getipinfo=no ;;\n-      *) have_unwind_getipinfo=yes ;;\n-    esac\n-  else\n-    # Darwin before version 9 does not have _Unwind_GetIPInfo.\n-\n-    case ${target} in\n-      *-*-darwin[3-8]|*-*-darwin[3-8].*) have_unwind_getipinfo=no ;;\n-      *) have_unwind_getipinfo=yes ;;\n-    esac\n-\n-  fi\n-\n-  if test x$have_unwind_getipinfo = xyes; then\n-\n-$as_echo \"#define HAVE_GETIPINFO 1\" >>confdefs.h\n-\n-  fi\n-\n-\n # --------------------------------------------------------\n # Build, host, and target specific configuration fragments\n # --------------------------------------------------------\n@@ -17805,7 +17763,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17808 \"configure\"\n+#line 17766 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17911,7 +17869,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17914 \"configure\"\n+#line 17872 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "81345d6f32876f7733d9249654c127a0c05ceb3f", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1184,11 +1184,6 @@ if test $force_sjlj_exceptions = yes; then\n     [Define 0/1 to force the choice for exception handling model.])\n fi\n \n-# For platforms with the unwind ABI which includes an unwind library,\n-# libunwind, we can choose to use the system libunwind.\n-# config.gcc also contains tests of with_system_libunwind.\n-GCC_CHECK_UNWIND_GETIPINFO\n-\n # --------------------------------------------------------\n # Build, host, and target specific configuration fragments\n # --------------------------------------------------------"}, {"sha": "610ca9ba7d0581365ac9be9933ba4f2edc97750e", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,3 +1,9 @@\n+2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* EXCLUDES (unwind-c.c, unwind-dw2-fde-darwin.c)\n+\t(unwind-dw2-fde-glibc.c, unwind-dw2-fde.c, unwind-dw2-fde.h)\n+\t(unwind-dw2.c, unwind-pe.h, unwind-sjlj.c, unwind.h): Remove.\n+\n 2011-07-31  Joseph Myers  <joseph@codesourcery.com>\n \n \t* de.po: Update."}, {"sha": "12fced15f72f7dcb092cdd30e9856056a17492d0", "filename": "gcc/po/EXCLUDES", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fpo%2FEXCLUDES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fpo%2FEXCLUDES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FEXCLUDES?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -44,15 +44,6 @@ libgcc2.h\n limitx.h\n limity.h\n longlong.h\n-unwind-c.c\n-unwind-dw2-fde-darwin.c\n-unwind-dw2-fde-glibc.c\n-unwind-dw2-fde.c\n-unwind-dw2-fde.h\n-unwind-dw2.c\n-unwind-pe.h\n-unwind-sjlj.c\n-unwind.h\n \n #   These programs are meant to be executed only by GCC maintainers or\n #   installers.  Such files do not need to be translated, as these"}, {"sha": "a7db6f58f851bad9cc8356540e805a7b803aac5e", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -802,7 +802,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n /* Target macros only used for code built for the target, that have\n    moved to libgcc-tm.h or have never been present elsewhere.  */\n  #pragma GCC poison DECLARE_LIBRARY_RENAMES LIBGCC2_GNU_PREFIX\t\t\\\n-\tMD_UNWIND_SUPPORT ENABLE_EXECUTE_STACK\n+\tMD_UNWIND_SUPPORT MD_FROB_UPDATE_CONTEXT ENABLE_EXECUTE_STACK\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "65d47a80278e9766a35a39d63d279cd3f7a78f37", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,3 +1,68 @@\n+2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Makefile.in (LIB2ADDEH, LIB2ADDEHSTATIC, LIB2ADDEHSHARED): New\n+\tvariables.\n+\t(LIBUNWIND, SHLIBUNWIND_LINK, SHLIBUNWIND_INSTALL): New variables.\n+\t(LIB2ADDEH, LIB2ADDEHSTATIC, LIB2ADDEHSHARED): Add $(srcdir)/emutls.c.\n+\t(install-unwind_h): New target.\n+\t(all): Depend on it.\n+\t* config.host (unwind_header): New variable.\n+\t(*-*-freebsd*): Set tmake_file to t-eh-dw2-dip.\n+\t(*-*-linux*, frv-*-*linux*, *-*-kfreebsd*-gnu, *-*-knetbsd*-gnu,\n+\t*-*-gnu*): Likewise, also for *-*-kopensolaris*-gnu.\n+\t(*-*-solaris2*): Add t-eh-dw2-dip to tmake_file.\n+\t(arm*-*-linux*): Add arm/t-bpabi for arm*-*-linux-*eabi.\n+\tSet unwind_header.\n+\t(arm*-*-uclinux*): Add arm/t-bpabi for arm*-*-uclinux*eabi.\n+\tSet unwind_header.\n+\t(arm*-*-eabi*, arm*-*-symbianelf*): Add arm/t-bpabi for\n+\tarm*-*-eabi*.\n+\tAdd arm/t-symbian to tmake_file for arm*-*-symbianelf*.\n+\tSet unwind_header.\n+\t(ia64*-*-elf*): Add ia64/t-eh-ia64 to tmake_file.\n+\t(ia64*-*-freebsd*): Likewise.\n+\t(ia64*-*-linux*): Add ia64/t-glibc, ia64/t-eh-ia64, t-libunwind to\n+\ttmake_file.\n+\tAdd t-libunwind-elf, ia64/t-glibc-libunwind unless\n+\t$with_system_libunwind.\n+\t(ia64*-*-hpux*): Set tmake_file.\n+\t(ia64-hp-*vms*): Add ia64/t-eh-ia64 to tmake_file.\n+\t(picochip-*-*): Set tmake_file.\n+\t(rs6000-ibm-aix4.[3456789]*, powerpc-ibm-aix4.[3456789]*): Set\n+\tmd_unwind_header.\n+\t(rs6000-ibm-aix5.1.*, powerpc-ibm-aix5.1.*): Likewise.\n+\t(rs6000-ibm-aix[56789].*, powerpc-ibm-aix[56789].*): Likewise.\n+\t(s390x-ibm-tpf*): Add t-eh-dw2-dip to tmake_file.\n+\t(xtensa*-*-elf*): Set tmake_file.\n+\t(xtensa*-*-linux*): Likewise.\n+\t* configure.ac: Include ../config/unwind_ipinfo.m4.\n+\tCall GCC_CHECK_UNWIND_GETIPINFO.\n+\tLink unwind.h to $unwind_header.\n+\t* configure: Regenerate.\n+\t* emutls.c, unwind-c.c, unwind-compat.c, unwind-compat.h,\n+\tunwind-dw2-fde-compat.c, unwind-dw2-fde-dip.c, unwind-dw2-fde.c,\n+\tunwind-dw2-fde.h, unwind-dw2.c, unwind-dw2.h, unwind-generic.h,\n+\tunwind-pe.h, unwind-sjlj.c, unwind.inc: New files.\n+\t* config/unwind-dw2-fde-darwin.c: New file.\n+\t* config/arm/libunwind.S, config/arm/pr-support.c,\n+\tconfig/arm/t-bpabi, config/arm/t-symbian, config/arm/unwind-arm.c,\n+\tconfig/arm/unwind-arm.h,: New files.\n+\t* config/ia64/fde-glibc.c, config/ia64/fde-vms.c,\n+\tconfig/ia64/t-eh-ia64, config/ia64/t-glibc,\n+\tconfig/ia64/t-glibc-libunwind, config/ia64/t-hpux,\n+\tconfig/ia64/t-vms, config/ia64/unwind-ia64.c,\n+\tconfig/ia64/unwind-ia64.h: New files.\n+\t* config/picochip/t-picochip: New file.\n+\t* config/rs6000/aix-unwind.h, config/rs6000/darwin-fallback.c: New\n+\tfiles.\n+\t* config/rs6000/t-darwin (LIB2ADDEH): Set.\n+\t* config/s390/t-tpf (LIB2ADDEH): Remove.\n+\t* config/t-darwin (LIB2ADDEH): Set.\n+\t* config/t-eh-dw2-dip: New file.\n+\t* config/t-libunwind, config/t-libunwind-elf: New files.\n+\t* config/t-sol2 (LIB2ADDEH): Remove.\n+\t* config/xtensa/t-xtensa: New file.\n+\n 2011-08-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/linux-unwind.h (RT_SIGRETURN_SYSCALL): New."}, {"sha": "c252d9a2217c3b069a355cd1f562e232cb5471e7", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -256,6 +256,17 @@ LIBGCC_VER_GNU_PREFIX = __\n LIBGCC_VER_FIXEDPOINT_GNU_PREFIX = __\n LIBGCC_VER_SYMBOLS_PREFIX =\n \n+# Additional sources to handle exceptions; overridden by targets as needed.\n+LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde.c \\\n+  $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c\n+LIB2ADDEHSTATIC = $(LIB2ADDEH)\n+LIB2ADDEHSHARED = $(LIB2ADDEH)\n+\n+# Don't build libunwind by default.\n+LIBUNWIND =\n+SHLIBUNWIND_LINK =\n+SHLIBUNWIND_INSTALL =\n+\n tmake_file = @tmake_file@\n include $(srcdir)/empty.mk $(tmake_file)\n \n@@ -316,6 +327,10 @@ endif\n \n LIB2ADD += enable-execute-stack.c\n \n+LIB2ADDEH += $(srcdir)/emutls.c\n+LIB2ADDEHSTATIC += $(srcdir)/emutls.c\n+LIB2ADDEHSHARED += $(srcdir)/emutls.c\n+\n # Library members defined in libgcc2.c.\n lib2funcs = _muldi3 _negdi2 _lshrdi3 _ashldi3 _ashrdi3 _cmpdi2 _ucmpdi2\t   \\\n \t    _clear_cache _trampoline __main _absvsi2 \\\n@@ -967,6 +982,12 @@ gcc-extra-parts:\n \n all: $(extra-parts)\n \n+install-unwind_h:\n+\tcp unwind.h $(gcc_objdir)/include/unwind.h\n+\tchmod a+r $(gcc_objdir)/include/unwind.h\n+\n+all: install-unwind_h\n+\n # Documentation targets (empty).\n .PHONY: info html dvi pdf install-info install-html install-pdf\n "}, {"sha": "db00c4c2d8c76f818b84581dfef241be79b799dc", "filename": "libgcc/config.host", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -57,12 +57,15 @@\n #  tmake_file\t\tA list of machine-description-specific\n #\t\t\tmakefile-fragments, if different from\n #\t\t\t\"$cpu_type/t-$cpu_type\".\n+#  unwind_header\tThe name of the header file declaring the unwind\n+#\t\t\truntime interface routines.\n \n asm_hidden_op=.hidden\n enable_execute_stack=\n extra_parts=\n tmake_file=\n md_unwind_header=no-unwind.h\n+unwind_header=unwind-generic.h\n \n # Set default cpu_type so it can be updated in each machine entry.\n cpu_type=`echo ${host} | sed 's/-.*$//'`\n@@ -171,8 +174,10 @@ case ${host} in\n   # This is the generic ELF configuration of FreeBSD.  Later\n   # machine-specific sections may refine and add to this\n   # configuration.\n+  tmake_file=t-eh-dw2-dip\n   ;;\n-*-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu | *-*-gnu*)\n+*-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu | *-*-gnu* | *-*-kopensolaris*-gnu)\n+  tmake_file=t-eh-dw2-dip\n   extra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n   ;;\n *-*-netbsd*)\n@@ -182,7 +187,9 @@ case ${host} in\n *-*-rtems*)\n   ;;\n *-*-solaris2*)\n-  tmake_file=\"$tmake_file t-sol2 t-slibgcc t-slibgcc-elf-ver\"\n+  # Unless linker support and dl_iterate_phdr are present,\n+  # unwind-dw2-fde-dip.c automatically falls back to unwind-dw2-fde.c.\n+  tmake_file=\"$tmake_file t-sol2 t-eh-dw2-dip t-slibgcc t-slibgcc-elf-ver\"\n   if test $with_gnu_ld = yes; then\n     tmake_file=\"$tmake_file t-slibgcc-gld\"\n   else\n@@ -265,14 +272,35 @@ arm*-*-netbsdelf*)\n \t;;\n arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \ttmake_file=\"${tmake_file} t-fixedpoint-gnu-prefix\"\n+\tcase ${host} in\n+\tarm*-*-linux-*eabi)\n+\t  tmake_file=\"${tmake_file} arm/t-bpabi\"\n+\t  unwind_header=config/arm/unwind-arm.h\n+\t  ;;\n+\tesac\n \t;;\n arm*-*-uclinux*)\t\t# ARM ucLinux\n \ttmake_file=\"${tmake_file} t-fixedpoint-gnu-prefix\"\n+\tcase ${host} in\n+\tarm*-*-uclinux*eabi)\n+\t  tmake_file=\"${tmake_file} arm/t-bpabi\"\n+\t  unwind_header=config/arm/unwind-arm.h\n+\t  ;;\n+\tesac\n \t;;\n arm*-*-ecos-elf)\n \t;;\n arm*-*-eabi* | arm*-*-symbianelf* )\n \ttmake_file=\"${tmake_file} t-fixedpoint-gnu-prefix\"\n+\tcase ${host} in\n+\tarm*-*-eabi*)\n+\t  tmake_file=\"${tmake_file} arm/t-bpabi\"\n+\t  ;;\n+\tarm*-*-symbianelf*)\n+\t  tmake_file=\"${tmake_file} arm/t-symbian\"\n+\t  ;;\n+\tesac\n+\tunwind_header=config/arm/unwind-arm.h\n \t;;\n arm*-*-rtems*)\n \t;;\n@@ -408,21 +436,25 @@ i[34567]86-*-interix3*)\n \t;;\n ia64*-*-elf*)\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtfastmath.o\"\n-\ttmake_file=\"ia64/t-ia64 t-crtfm\"\n+\ttmake_file=\"ia64/t-ia64 ia64/t-eh-ia64 t-crtfm\"\n \t;;\n ia64*-*-freebsd*)\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtfastmath.o\"\n-\ttmake_file=\"ia64/t-ia64 t-crtfm\"\n+\ttmake_file=\"ia64/t-ia64 ia64/t-eh-ia64 t-crtfm\"\n \t;;\n ia64*-*-linux*)\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtfastmath.o\"\n-\ttmake_file=\"ia64/t-ia64 t-crtfm t-softfp ia64/t-fprules-softfp ia64/t-softfp-compat\"\n+\ttmake_file=\"ia64/t-ia64 t-crtfm t-softfp ia64/t-fprules-softfp ia64/t-softfp-compat ia64/t-glibc ia64/t-eh-ia64 t-libunwind\"\n+\tif test x$with_system_libunwind != xyes ; then\n+\t\ttmake_file=\"${tmake_file} t-libunwind-elf ia64/t-glibc-libunwind\"\n+\tfi\n \tmd_unwind_header=ia64/linux-unwind.h\n \t;;\n ia64*-*-hpux*)\n+\ttmake_file=\"ia64/t-hpux\"\n \t;;\n ia64-hp-*vms*)\n-\ttmake_file=\"vms/t-vms vms/t-vms64 ia64/t-vms\"\n+\ttmake_file=\"vms/t-vms vms/t-vms64 ia64/t-eh-ia64 ia64/t-vms\"\n \tmd_unwind_header=ia64/vms-unwind.h\n \t;;\n iq2000*-*-elf*)\n@@ -522,6 +554,7 @@ moxie-*-*)\n pdp11-*-*)\n \t;;\n picochip-*-*)\n+\ttmake_file=picochip/t-picochip\n         ;;\n powerpc-*-darwin*)\n \tcase ${host} in\n@@ -574,10 +607,13 @@ powerpcle-*-eabisim*)\n powerpcle-*-eabi*)\n \t;;\n rs6000-ibm-aix4.[3456789]* | powerpc-ibm-aix4.[3456789]*)\n+\tmd_unwind_header=rs6000/aix-unwind.h\n \t;;\n rs6000-ibm-aix5.1.* | powerpc-ibm-aix5.1.*)\n+\tmd_unwind_header=rs6000/aix-unwind.h\n \t;;\n rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n+\tmd_unwind_header=rs6000/aix-unwind.h\n \t;;\n rx-*-elf)\n \textra_parts=\"crtbegin.o crtend.o\"\n@@ -592,7 +628,7 @@ s390x-*-linux*)\n \tmd_unwind_header=s390/linux-unwind.h\n \t;;\n s390x-ibm-tpf*)\n-\ttmake_file=\"${tmake_file} s390/t-crtstuff s390/t-tpf\"\n+\ttmake_file=\"${tmake_file} s390/t-crtstuff s390/t-tpf t-eh-dw2-dip\"\n \tmd_unwind_header=s390/tpf-unwind.h\n \t;;\n score-*-elf)\n@@ -674,8 +710,10 @@ vax-*-openbsd*)\n xstormy16-*-elf)\n \t;;\n xtensa*-*-elf*)\n+\ttmake_file=xtensa/t-xtensa\n \t;;\n xtensa*-*-linux*)\n+\ttmake_file=xtensa/t-xtensa\n \tmd_unwind_header=xtensa/linux-unwind.h\n \t;;\n am33_2.0-*-linux*)"}, {"sha": "a3a19daab4b2e4fc53ca3f2e8000b379b5b6d727", "filename": "libgcc/config/arm/libunwind.S", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Farm%2Flibunwind.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Farm%2Flibunwind.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Flibunwind.S?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,5 +1,5 @@\n /* Support functions for the unwinder.\n-   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Paul Brook\n \n@@ -40,7 +40,7 @@\n \n #ifndef __symbian__\n \n-#include \"lib1funcs.asm\"\n+#include \"config/arm/lib1funcs.asm\"\n \n .macro UNPREFIX name\n \t.global SYM (\\name)", "previous_filename": "gcc/config/arm/libunwind.S"}, {"sha": "deee661e264141c9b53ebf19b55d77ddcacf6c55", "filename": "libgcc/config/arm/pr-support.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Farm%2Fpr-support.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Farm%2Fpr-support.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fpr-support.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/config/arm/pr-support.c"}, {"sha": "a3b23dcd20c02b9ac2c18225008cbc18770dbdb5", "filename": "libgcc/config/arm/t-bpabi", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Farm%2Ft-bpabi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Farm%2Ft-bpabi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ft-bpabi?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -0,0 +1,3 @@\n+LIB2ADDEH = $(srcdir)/config/arm/unwind-arm.c \\\n+  $(srcdir)/config/arm/libunwind.S \\\n+  $(srcdir)/config/arm/pr-support.c $(srcdir)/unwind-c.c"}, {"sha": "6788d5f40b3279588b284c792eecd3265f69eef0", "filename": "libgcc/config/arm/t-symbian", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Farm%2Ft-symbian", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Farm%2Ft-symbian", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ft-symbian?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -0,0 +1,2 @@\n+# Include the gcc personality routine\n+LIB2ADDEH = $(srcdir)/unwind-c.c $(srcdir)/config/arm/pr-support.c"}, {"sha": "90d258d3c807cd2738d4e18f5a45bf5943e49fe3", "filename": "libgcc/config/arm/unwind-arm.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Farm%2Funwind-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Farm%2Funwind-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Funwind-arm.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/config/arm/unwind-arm.c"}, {"sha": "1a51d8d4824e44026683e28daf77ec21a2391d75", "filename": "libgcc/config/arm/unwind-arm.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Farm%2Funwind-arm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Farm%2Funwind-arm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Funwind-arm.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/config/arm/unwind-arm.h"}, {"sha": "12760b96edabb166fc0a2c4685f31a5d2bf85186", "filename": "libgcc/config/ia64/fde-glibc.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ffde-glibc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ffde-glibc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ffde-glibc.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/config/ia64/fde-glibc.c"}, {"sha": "c9ac5d2807607a1fd480d55d1c86db1f0a4c09e3", "filename": "libgcc/config/ia64/fde-vms.c", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ffde-vms.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ffde-vms.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ffde-vms.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2004, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2004, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Douglas B Rupp <rupp@gnat.com>\n \n    This file is part of GCC.\n@@ -32,6 +32,7 @@\n #include <stddef.h>\n #include <stdlib.h>\n #include <stdio.h>\n+#include \"md-unwind-support.h\"\n #include \"unwind-ia64.h\"\n \n #define __int64 long", "previous_filename": "gcc/config/ia64/fde-vms.c"}, {"sha": "6aa4bb930b8ce1a53c33da1d903eaaad0557dc82", "filename": "libgcc/config/ia64/t-eh-ia64", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ft-eh-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ft-eh-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ft-eh-ia64?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -0,0 +1,2 @@\n+LIB2ADDEH = $(srcdir)/config/ia64/unwind-ia64.c $(srcdir)/unwind-sjlj.c \\\n+  $(srcdir)/unwind-c.c"}, {"sha": "df4fe9c4404a91ef1ab137443bf538f9a5bec610", "filename": "libgcc/config/ia64/t-glibc", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ft-glibc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ft-glibc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ft-glibc?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -0,0 +1,3 @@\n+# Use system libunwind library on IA-64 GLIBC based system.\n+LIB2ADDEH = $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c \\\n+  $(srcdir)/unwind-compat.c"}, {"sha": "8b1736a2d67846524b78c5d1c54fe1fb880948e3", "filename": "libgcc/config/ia64/t-glibc-libunwind", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ft-glibc-libunwind", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ft-glibc-libunwind", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ft-glibc-libunwind?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,4 +1,3 @@\n # Build libunwind for IA-64 GLIBC based system.\n LIBUNWIND = $(srcdir)/config/ia64/fde-glibc.c \\\n   $(srcdir)/config/ia64/unwind-ia64.c\n-LIBUNWINDDEP = unwind.inc", "previous_filename": "gcc/config/ia64/t-glibc-libunwind"}, {"sha": "ef3387e7a61987384dc64699c3e3580d572a5fb5", "filename": "libgcc/config/ia64/t-hpux", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ft-hpux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ft-hpux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ft-hpux?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -0,0 +1 @@\n+LIB2ADDEH = $(srcdir)/unwind-c.c"}, {"sha": "9bc933adfe0820ab47541c5c4e250879e12116f1", "filename": "libgcc/config/ia64/t-vms", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ft-vms?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -0,0 +1 @@\n+LIB2ADDEH += $(srcdir)/config/ia64/fde-vms.c"}, {"sha": "e9ddfca88649a429c6b1cbdf3573ec4a2a78c574", "filename": "libgcc/config/ia64/unwind-ia64.c", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Funwind-ia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Funwind-ia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Funwind-ia64.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -41,13 +41,6 @@\n \n #ifndef __USING_SJLJ_EXCEPTIONS__\n \n-\n-/* By default, assume personality routine interface compatibility with\n-   our expectations.  */\n-#ifndef MD_UNW_COMPATIBLE_PERSONALITY_P\n-#define MD_UNW_COMPATIBLE_PERSONALITY_P(HEADER) 1\n-#endif\n-\n enum unw_application_register\n {\n   UNW_AR_BSP,\n@@ -1768,6 +1761,13 @@ _Unwind_GetBSP (struct _Unwind_Context *context)\n }\n \n #include \"md-unwind-support.h\"\n+\n+/* By default, assume personality routine interface compatibility with\n+   our expectations.  */\n+#ifndef MD_UNW_COMPATIBLE_PERSONALITY_P\n+#define MD_UNW_COMPATIBLE_PERSONALITY_P(HEADER) 1\n+#endif\n+\n \f\n static _Unwind_Reason_Code\n uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)", "previous_filename": "gcc/config/ia64/unwind-ia64.c"}, {"sha": "b98f048fdb500c2395cd387a610354c8385d0c5f", "filename": "libgcc/config/ia64/unwind-ia64.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Funwind-ia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Funwind-ia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Funwind-ia64.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/config/ia64/unwind-ia64.h"}, {"sha": "48bdc6884ea7f6b615302fd09470272d836a5c92", "filename": "libgcc/config/ia64/vms-unwind.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Fvms-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fia64%2Fvms-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Fvms-unwind.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,5 +1,5 @@\n /* DWARF2 EH unwinding support for IA64 VMS.\n-   Copyright (C) 2005-2009 Free Software Foundation, Inc.\n+   Copyright (C) 2005-2011 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -32,6 +32,9 @@\n #include <stdio.h>\n #include <string.h>\n \n+#define UNW_IVMS_MODE(HEADER) (((HEADER) >> 44) & 0x3L)\n+#define MD_UNW_COMPATIBLE_PERSONALITY_P(HEADER) (!UNW_IVMS_MODE (HEADER))\n+\n #define DYN$C_SSENTRY 66\n /* ??? would rather get the proper header file.  */\n "}, {"sha": "5135d500cbb8984ed7f10405eac568b3b196d649", "filename": "libgcc/config/picochip/t-picochip", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fpicochip%2Ft-picochip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fpicochip%2Ft-picochip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpicochip%2Ft-picochip?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -0,0 +1,2 @@\n+# Turn off the building of exception handling libraries.\n+LIB2ADDEH ="}, {"sha": "9e126595edb868ed220c592bc8510c29dd685cfa", "filename": "libgcc/config/rs6000/aix-unwind.h", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Frs6000%2Faix-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Frs6000%2Faix-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Faix-unwind.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -0,0 +1,57 @@\n+/* DWARF2 EH unwinding support for AIX.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* If the current unwind info (FS) does not contain explicit info\n+   saving R2, then we have to do a minor amount of code reading to\n+   figure out if it was saved.  The big problem here is that the\n+   code that does the save/restore is generated by the linker, so\n+   we have no good way to determine at compile time what to do.  */\n+\n+#define R_LR 65\n+\n+#ifdef __64BIT__\n+#define MD_FROB_UPDATE_CONTEXT(CTX, FS)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if ((FS)->regs.reg[2].how == REG_UNSAVED)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tunsigned int *insn\t\t\t\t\t\t\\\n+\t  = (unsigned int *)\t\t\t\t\t\t\\\n+\t    _Unwind_GetGR ((CTX), R_LR);\t\t\t\t\\\n+\tif (*insn == 0xE8410028)\t\t\t\t\t\\\n+\t  _Unwind_SetGRPtr ((CTX), 2, (CTX)->cfa + 40);\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+#else\n+#define MD_FROB_UPDATE_CONTEXT(CTX, FS)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if ((FS)->regs.reg[2].how == REG_UNSAVED)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tunsigned int *insn\t\t\t\t\t\t\\\n+\t  = (unsigned int *)\t\t\t\t\t\t\\\n+\t    _Unwind_GetGR ((CTX), R_LR);\t\t\t\t\\\n+\tif (*insn == 0x80410014)\t\t\t\t\t\\\n+\t  _Unwind_SetGRPtr ((CTX), 2, (CTX)->cfa + 20);\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+#endif"}, {"sha": "4591071ea7497fa511ee69355ecb643d1a6b852b", "filename": "libgcc/config/rs6000/darwin-fallback.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/config/rs6000/darwin-fallback.c"}, {"sha": "404df85870f9d64656860f741ba1a007bada3256", "filename": "libgcc/config/rs6000/t-darwin", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-darwin?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -3,4 +3,6 @@ DARWIN_EXTRA_CRT_BUILD_CFLAGS = -mlongcall -mmacosx-version-min=10.4\n crt2.o: $(srcdir)/config/rs6000/darwin-crt2.c\n \t$(crt_compile) $(DARWIN_EXTRA_CRT_BUILD_CFLAGS) -c $<\n \n+LIB2ADDEH += $(srcdir)/config/rs6000/darwin-fallback.c\n+\n SHLIB_VERPFX = $(gcc_srcdir)/config/rs6000/darwin-libgcc"}, {"sha": "9d416acc12d3e569134db3dd824d1a5cf46d2dd8", "filename": "libgcc/config/s390/t-tpf", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fs390%2Ft-tpf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fs390%2Ft-tpf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2Ft-tpf?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,7 +1,2 @@\n # Compile libgcc2.a with pic.\n HOST_LIBGCC2_CFLAGS += -fPIC\n-\n-# Use unwind-dw2-fde-glibc.\n-LIB2ADDEH = $(gcc_srcdir)/unwind-dw2.c $(gcc_srcdir)/unwind-dw2-fde-glibc.c \\\n-  $(gcc_srcdir)/unwind-sjlj.c $(gcc_srcdir)/unwind-c.c \\\n-  $(gcc_srcdir)/emutls.c"}, {"sha": "311b7e2679f866392b1f07565b1aa59a39ad67b5", "filename": "libgcc/config/t-darwin", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-darwin?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -2,3 +2,7 @@\n crt3.o: $(srcdir)/config/darwin-crt3.c\n \t$(crt_compile) \\\n \t  -fno-tree-dominator-opts $(DARWIN_EXTRA_CRT_BUILD_CFLAGS) -c $<\n+\n+# Use unwind-dw2-fde-darwin\n+LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/config/unwind-dw2-fde-darwin.c \\\n+  $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c"}, {"sha": "88fa103c4e7c3c54a0998af0bd68946b0b90307f", "filename": "libgcc/config/t-eh-dw2-dip", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Ft-eh-dw2-dip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Ft-eh-dw2-dip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-eh-dw2-dip?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -0,0 +1,3 @@\n+# Use unwind-dw2-fde-dip.\n+LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde-dip.c \\\n+  $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c"}, {"sha": "1c7a898675fa160a6394a06d7ffc729b1608796f", "filename": "libgcc/config/t-libunwind", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Ft-libunwind", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Ft-libunwind", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-libunwind?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -0,0 +1,3 @@\n+LIB2ADDEH = $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c \\\n+  $(srcdir)/unwind-compat.c $(srcdir)/unwind-dw2-fde-compat.c\n+LIB2ADDEHSTATIC = $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c"}, {"sha": "47a460bdd0e390e8df7acb52bb918d9785d5dcdc", "filename": "libgcc/config/t-libunwind-elf", "status": "renamed", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Ft-libunwind-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Ft-libunwind-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-libunwind-elf?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+# Copyright (C) 2004, 2005, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -18,14 +18,18 @@\n \n # Build libunwind for ELF with the GNU linker.\n \n-# Use unwind-dw2-fde-glibc\n-LIBUNWIND = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde-glibc.c\n-LIBUNWINDDEP = unwind.inc unwind-dw2-fde.h unwind-dw2-fde.c\n+SHLIB_SOLINK = @shlib_base_name@.so\n+SHLIB_OBJS = @shlib_objs@\n+SHLIB_DIR = @multilib_dir@\n+SHLIB_SLIBDIR_QUAL = @shlib_slibdir_qual@\n+\n+# Use unwind-dw2-fde-dip\n+LIBUNWIND = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde-dip.c\n \n SHLIBUNWIND_SOVERSION = 7\n SHLIBUNWIND_SONAME = @shlib_base_name@.so.$(SHLIBUNWIND_SOVERSION)\n \n-SHLIBUNWIND_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared \\\n+SHLIBUNWIND_LINK = $(CC) $(LIBGCC2_CFLAGS) -shared \\\n \t-nodefaultlibs -Wl,-h,$(SHLIBUNWIND_SONAME) \\\n \t-Wl,-z,text -Wl,-z,defs -o $(SHLIB_DIR)/$(SHLIBUNWIND_SONAME).tmp \\\n \t@multilib_flags@ $(SHLIB_OBJS) -lc && \\\n@@ -38,12 +42,10 @@ SHLIBUNWIND_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared \\\n \t   $(SHLIB_DIR)/$(SHLIBUNWIND_SONAME) && \\\n \t$(LN_S) $(SHLIBUNWIND_SONAME) $(SHLIB_DIR)/$(SHLIB_SOLINK)\n \n-# $(slibdir) double quoted to protect it from expansion while building\n-# libgcc.mk.  We want this delayed until actual install time.\n SHLIBUNWIND_INSTALL = \\\n-\t$$(SHELL) $$(srcdir)/mkinstalldirs $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL); \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(DESTDIR)$(slibdir)$(SHLIB_SLIBDIR_QUAL); \\\n \t$(INSTALL_DATA) $(SHLIB_DIR)/$(SHLIBUNWIND_SONAME) \\\n-\t  $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIBUNWIND_SONAME); \\\n-\trm -f $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_SOLINK); \\\n+\t  $(DESTDIR)$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIBUNWIND_SONAME); \\\n+\trm -f $(DESTDIR)$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_SOLINK); \\\n \t$(LN_S) $(SHLIBUNWIND_SONAME) \\\n-\t  $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_SOLINK)\n+\t  $(DESTDIR)$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_SOLINK)", "previous_filename": "gcc/config/t-libunwind-elf"}, {"sha": "bfb8f3b5cc2ee3144778f5d2ab537e9f1aee5d34", "filename": "libgcc/config/t-sol2", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-sol2?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -16,11 +16,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# Use unwind-dw2-fde-glibc.c.  Unless linker support and dl_iterate_phdr\n-# are present, automatically falls back to unwind-dw2-fde.c.\n-LIB2ADDEH = $(gcc_srcdir)/unwind-dw2.c $(gcc_srcdir)/unwind-dw2-fde-glibc.c \\\n-  $(gcc_srcdir)/unwind-sjlj.c $(gcc_srcdir)/unwind-c.c $(gcc_srcdir)/emutls.c\n-\n # gmon build rule:\n gmon.o:\t$(srcdir)/config/gmon-sol2.c\n \t$(gcc_compile) -c $<"}, {"sha": "75b404e09e98646fa95460871cd91fe9d1fb51b1", "filename": "libgcc/config/unwind-dw2-fde-darwin.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Funwind-dw2-fde-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Funwind-dw2-fde-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Funwind-dw2-fde-darwin.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-dw2-fde-darwin.c"}, {"sha": "7d9e9db0487eef6b9ee1fb7492bfc180dcc3ca0d", "filename": "libgcc/config/xtensa/t-xtensa", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fxtensa%2Ft-xtensa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fxtensa%2Ft-xtensa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fxtensa%2Ft-xtensa?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -0,0 +1,2 @@\n+LIB2ADDEH = $(srcdir)/config/xtensa/unwind-dw2-xtensa.c \\\n+   $(srcdir)/unwind-dw2-fde.c $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c"}, {"sha": "54daf7637ce829be60414326e8c990585d99f48f", "filename": "libgcc/config/xtensa/unwind-dw2-xtensa.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/config/xtensa/unwind-dw2-xtensa.c"}, {"sha": "d13b3264c99214636d66b961f438857c9a887888", "filename": "libgcc/config/xtensa/unwind-dw2-xtensa.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/config/xtensa/unwind-dw2-xtensa.h"}, {"sha": "6036338731279a7144cc030702fe130b0d54177f", "filename": "libgcc/configure", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -651,6 +651,7 @@ with_slibdir\n enable_maintainer_mode\n with_build_libsubdir\n enable_decimal_float\n+with_system_libunwind\n enable_tls\n '\n       ac_precious_vars='build_alias\n@@ -1295,6 +1296,7 @@ Optional Packages:\n   --with-ld               arrange to use the specified ld (full pathname)\n   --with-slibdir=DIR      shared libraries in DIR LIBDIR\n   --with-build-libsubdir=DIR  Directory where to find libraries for build system\n+  --with-system-libunwind use installed libunwind\n \n Some influential environment variables:\n   CC          C compiler command\n@@ -3743,6 +3745,46 @@ $as_echo \"$libgcc_cv_fixed_point\" >&6; }\n fixed_point=$libgcc_cv_fixed_point\n \n \n+# For platforms with the unwind ABI which includes an unwind library,\n+# libunwind, we can choose to use the system libunwind.\n+# config.gcc also contains tests of with_system_libunwind.\n+\n+\n+# Check whether --with-system-libunwind was given.\n+if test \"${with_system_libunwind+set}\" = set; then :\n+  withval=$with_system_libunwind;\n+fi\n+\n+  # If system-libunwind was not specifically set, pick a default setting.\n+  if test x$with_system_libunwind = x; then\n+    case ${target} in\n+      ia64-*-hpux*) with_system_libunwind=yes ;;\n+      *) with_system_libunwind=no ;;\n+    esac\n+  fi\n+  # Based on system-libunwind and target, do we have ipinfo?\n+  if  test x$with_system_libunwind = xyes; then\n+    case ${target} in\n+      ia64-*-*) have_unwind_getipinfo=no ;;\n+      *) have_unwind_getipinfo=yes ;;\n+    esac\n+  else\n+    # Darwin before version 9 does not have _Unwind_GetIPInfo.\n+\n+    case ${target} in\n+      *-*-darwin[3-8]|*-*-darwin[3-8].*) have_unwind_getipinfo=no ;;\n+      *) have_unwind_getipinfo=yes ;;\n+    esac\n+\n+  fi\n+\n+  if test x$have_unwind_getipinfo = xyes; then\n+\n+$as_echo \"#define HAVE_GETIPINFO 1\" >>confdefs.h\n+\n+  fi\n+\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if the linker ($LD) is GNU ld\" >&5\n $as_echo_n \"checking if the linker ($LD) is GNU ld... \" >&6; }\n if test \"${acl_cv_prog_gnu_ld+set}\" = set; then :\n@@ -3962,6 +4004,8 @@ tmake_file=\"${tmake_file_}\"\n \n ac_config_links=\"$ac_config_links enable-execute-stack.c:$enable_execute_stack\"\n \n+ac_config_links=\"$ac_config_links unwind.h:$unwind_header\"\n+\n ac_config_links=\"$ac_config_links md-unwind-support.h:config/$md_unwind_header\"\n \n \n@@ -4690,6 +4734,7 @@ for ac_config_target in $ac_config_targets\n do\n   case $ac_config_target in\n     \"enable-execute-stack.c\") CONFIG_LINKS=\"$CONFIG_LINKS enable-execute-stack.c:$enable_execute_stack\" ;;\n+    \"unwind.h\") CONFIG_LINKS=\"$CONFIG_LINKS unwind.h:$unwind_header\" ;;\n     \"md-unwind-support.h\") CONFIG_LINKS=\"$CONFIG_LINKS md-unwind-support.h:config/$md_unwind_header\" ;;\n     \"Makefile\") CONFIG_FILES=\"$CONFIG_FILES Makefile\" ;;\n     \"default\") CONFIG_COMMANDS=\"$CONFIG_COMMANDS default\" ;;"}, {"sha": "d96bcb4224a9c5b339296ea13c7c6841dbeadc86", "filename": "libgcc/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -7,6 +7,7 @@ sinclude(../config/no-executables.m4)\n sinclude(../config/lib-ld.m4)\n sinclude(../config/override.m4)\n sinclude(../config/dfp.m4)\n+sinclude(../config/unwind_ipinfo.m4)\n \n AC_PREREQ(2.64)\n AC_INIT([GNU C Runtime Library], 1.0,,[libgcc])\n@@ -167,6 +168,11 @@ AC_CACHE_CHECK([whether fixed-point is supported], [libgcc_cv_fixed_point],\n fixed_point=$libgcc_cv_fixed_point\n AC_SUBST(fixed_point)\n \n+# For platforms with the unwind ABI which includes an unwind library,\n+# libunwind, we can choose to use the system libunwind.\n+# config.gcc also contains tests of with_system_libunwind.\n+GCC_CHECK_UNWIND_GETIPINFO\n+\n AC_LIB_PROG_LD_GNU\n \n AC_MSG_CHECKING([for thread model used by GCC])\n@@ -277,6 +283,7 @@ AC_SUBST(cpu_type)\n AC_SUBST(extra_parts)\n AC_SUBST(asm_hidden_op)\n AC_CONFIG_LINKS([enable-execute-stack.c:$enable_execute_stack])\n+AC_CONFIG_LINKS([unwind.h:$unwind_header])\n AC_CONFIG_LINKS([md-unwind-support.h:config/$md_unwind_header])\n \n # We need multilib support."}, {"sha": "b7ee3bdfa7cec09b1f43aba5bed1132e71cea4ee", "filename": "libgcc/emutls.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Femutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Femutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Femutls.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/emutls.c"}, {"sha": "86b9f55704819fd2b712196cd464d14981b162ee", "filename": "libgcc/unwind-c.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-c.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-c.c"}, {"sha": "5b41f24688deebd1ef922340e905aa3cd497c6e0", "filename": "libgcc/unwind-compat.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-compat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-compat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-compat.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-compat.c"}, {"sha": "24c8de118013c1ded7e1f9b96ccf6125447450e7", "filename": "libgcc/unwind-compat.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-compat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-compat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-compat.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-compat.h"}, {"sha": "f305a5501a0246eabdfa25eec75b735298023e40", "filename": "libgcc/unwind-dw2-fde-compat.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-dw2-fde-compat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-dw2-fde-compat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde-compat.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-dw2-fde-compat.c"}, {"sha": "d8e3c0e934b047ddf104c86af09bc3d580440f20", "filename": "libgcc/unwind-dw2-fde-dip.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-dw2-fde-dip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-dw2-fde-dip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde-dip.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-dw2-fde-glibc.c"}, {"sha": "93d427165c46633527cf7ed5a04ca650a230c427", "filename": "libgcc/unwind-dw2-fde.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-dw2-fde.c"}, {"sha": "6d7a8dee2cf84660cb24a225ec398de0601f6b5d", "filename": "libgcc/unwind-dw2-fde.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-dw2-fde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-dw2-fde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-dw2-fde.h"}, {"sha": "19da29982b69d47a22360cc9f0f5768c37b1503b", "filename": "libgcc/unwind-dw2.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-dw2.c"}, {"sha": "2c558b4962aac507b465f9cf825a0bf7dda93c13", "filename": "libgcc/unwind-dw2.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-dw2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-dw2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-dw2.h"}, {"sha": "4ff9017b88b6afbb5ce25b5ab2a98af64c3465d5", "filename": "libgcc/unwind-generic.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-generic.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-generic.h"}, {"sha": "121f8776721a5e8b9b0c1a5a938f83bb034b7f1c", "filename": "libgcc/unwind-pe.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-pe.h?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-pe.h"}, {"sha": "c71e79858eec3ea6e512377f1d58faebd4bff12c", "filename": "libgcc/unwind-sjlj.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-sjlj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind-sjlj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-sjlj.c?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind-sjlj.c"}, {"sha": "5e2ec29c79a00884e2f448feabd364c189a79f5b", "filename": "libgcc/unwind.inc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Funwind.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind.inc?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "previous_filename": "gcc/unwind.inc"}, {"sha": "740e8d257f41b68bf3dba8838d3e46d33779d9e8", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -38,7 +38,7 @@ ACLOCAL_AMFLAGS = -I ./config -I ../config\n \n AM_CFLAGS = -fexceptions -fplan9-extensions $(SPLIT_STACK) $(WARN_CFLAGS) \\\n \t$(STRINGOPS_FLAG) \\\n-\t-I $(srcdir)/../gcc -I $(MULTIBUILDTOP)../../gcc/include\n+\t-I $(srcdir)/../libgcc -I $(MULTIBUILDTOP)../../gcc/include\n \n if USING_SPLIT_STACK\n AM_LDFLAGS = -XCClinker $(SPLIT_STACK)"}, {"sha": "42a160f3cf5154f394bc6eba42cda0704d4528c9", "filename": "libgo/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -495,7 +495,7 @@ AM_CPPFLAGS = -I $(srcdir)/runtime $(LIBFFIINCS) $(PTHREAD_CFLAGS)\n ACLOCAL_AMFLAGS = -I ./config -I ../config\n AM_CFLAGS = -fexceptions -fplan9-extensions $(SPLIT_STACK) $(WARN_CFLAGS) \\\n \t$(STRINGOPS_FLAG) \\\n-\t-I $(srcdir)/../gcc -I $(MULTIBUILDTOP)../../gcc/include\n+\t-I $(srcdir)/../libgcc -I $(MULTIBUILDTOP)../../gcc/include\n \n @USING_SPLIT_STACK_TRUE@AM_LDFLAGS = -XCClinker $(SPLIT_STACK)\n "}, {"sha": "f6bb404978e9b4a05bf30ba6f48990fc12969841", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,3 +1,12 @@\n+2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (GCC_UNWIND_INCLUDE): Rename to\n+\tLIBGCC_UNWIND_INCLUDE.\n+\tPoint to $(multi_basedir)/./libjava/../libgcc.\n+\t* configure: Regenerate.\n+\t* Makefile.am (GCC_UNWIND_INCLUDE): Reflect this.\n+\t* Makefile.in: Regenerate.\n+\n 2011-07-12  Andrew Haley  <aph@redhat.com>\n \n \t* interpret.cc (check_handler): Fix bit rot."}, {"sha": "1309defb623f5ae1a9fa2d49c361c2d80963ed45", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -342,7 +342,7 @@ LIBLINK = $(LIBTOOL) --tag=CXX $(LIBTOOLFLAGS) --mode=link $(CXX) -L$(here) \\\n CXXLINK = $(LIBTOOL) --tag=CXX $(LIBTOOLFLAGS) --mode=link $(CXXLD) \\\n \t  $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LTLDFLAGS) -o $@\n \n-GCC_UNWIND_INCLUDE = @GCC_UNWIND_INCLUDE@\n+LIBGCC_UNWIND_INCLUDE = @LIBGCC_UNWIND_INCLUDE@\n \n WARNINGS = -Wextra -Wall\n ## Some systems don't allow `$' in identifiers by default, so we force\n@@ -410,7 +410,7 @@ AM_CPPFLAGS = -I$(top_srcdir) \\\n \t-Iclasspath/include \\\n \t-I$(top_srcdir)/classpath/native/fdlibm \\\n \t$(GCINCS) $(THREADINCS) $(INCLTDL) \\\n-\t$(GCC_UNWIND_INCLUDE) $(ZINCS) $(LIBFFIINCS)\n+\t$(LIBGCC_UNWIND_INCLUDE) $(ZINCS) $(LIBFFIINCS)\n \n BOOTCLASSPATH = $(srcdir)/classpath/lib\n "}, {"sha": "e741f26d06d55ec629e73f88cc8159bbccc86ebc", "filename": "libjava/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -552,7 +552,6 @@ EXCEPTIONSPEC = @EXCEPTIONSPEC@\n EXEEXT = @EXEEXT@\n FGREP = @FGREP@\n GCC_FOR_ECJX = @GCC_FOR_ECJX@\n-GCC_UNWIND_INCLUDE = @GCC_UNWIND_INCLUDE@\n GCDEPS = @GCDEPS@\n GCINCS = @GCINCS@\n GCJ = @GCJ@\n@@ -600,6 +599,7 @@ LIBART_LIBS = @LIBART_LIBS@\n LIBDIR = @LIBDIR@\n LIBFFI = @LIBFFI@\n LIBFFIINCS = @LIBFFIINCS@\n+LIBGCC_UNWIND_INCLUDE = @LIBGCC_UNWIND_INCLUDE@\n LIBGCJDEBUG = @LIBGCJDEBUG@\n LIBGCJTESTSPEC = @LIBGCJTESTSPEC@\n LIBGCJ_BC_SPEC = @LIBGCJ_BC_SPEC@\n@@ -1040,7 +1040,7 @@ AM_CPPFLAGS = -I$(top_srcdir) \\\n \t-Iclasspath/include \\\n \t-I$(top_srcdir)/classpath/native/fdlibm \\\n \t$(GCINCS) $(THREADINCS) $(INCLTDL) \\\n-\t$(GCC_UNWIND_INCLUDE) $(ZINCS) $(LIBFFIINCS)\n+\t$(LIBGCC_UNWIND_INCLUDE) $(ZINCS) $(LIBFFIINCS)\n \n BOOTCLASSPATH = $(srcdir)/classpath/lib\n libgij_la_SOURCES = gij.cc"}, {"sha": "c2779c07c91b38c97df9501e8eab0f207b28522b", "filename": "libjava/configure", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -648,7 +648,7 @@ GCJVERSION\n toolexeclibdir\n toolexecmainlibdir\n toolexecdir\n-GCC_UNWIND_INCLUDE\n+LIBGCC_UNWIND_INCLUDE\n INSTALL_BINARIES_FALSE\n INSTALL_BINARIES_TRUE\n NEEDS_DATA_START_FALSE\n@@ -6781,7 +6781,7 @@ case \"${which_gcj}\" in\n    cross)\n       if test \"x${with_newlib}\" = \"xyes\"; then\n          # FIXME (comment): Why is this needed?\n-         GCC_UNWIND_INCLUDE=\n+         LIBGCC_UNWIND_INCLUDE=\n       fi\n       GCJH='$(target_noncanonical)-gcjh'\n    ;;\n@@ -20907,8 +20907,8 @@ else\n fi\n \n \n-# We're in the tree with gcc, and need to include some of its headers.\n-GCC_UNWIND_INCLUDE='-I$(multi_basedir)/./libjava/../gcc'\n+# We're in the tree with libgcc, and need to include some of its headers.\n+LIBGCC_UNWIND_INCLUDE='-I$(multi_basedir)/./libjava/../libgcc'\n \n if test \"x${with_newlib}\" = \"xyes\"; then\n    # We are being configured with a cross compiler.  AC_REPLACE_FUNCS"}, {"sha": "92546f72b99cc239bda465f6701908406d614497", "filename": "libjava/configure.ac", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -469,7 +469,7 @@ case \"${which_gcj}\" in\n    cross)\n       if test \"x${with_newlib}\" = \"xyes\"; then\n          # FIXME (comment): Why is this needed?\n-         GCC_UNWIND_INCLUDE=\n+         LIBGCC_UNWIND_INCLUDE=\n       fi\n       GCJH='$(target_noncanonical)-gcjh'\n    ;;\n@@ -1204,8 +1204,8 @@ AC_SUBST(HASH_SYNC_SPEC)\n \n AM_CONDITIONAL(USING_GCC, test \"$GCC\" = yes)\n \n-# We're in the tree with gcc, and need to include some of its headers.\n-GCC_UNWIND_INCLUDE='-I$(multi_basedir)/./libjava/../gcc'\n+# We're in the tree with libgcc, and need to include some of its headers.\n+LIBGCC_UNWIND_INCLUDE='-I$(multi_basedir)/./libjava/../libgcc'\n \n if test \"x${with_newlib}\" = \"xyes\"; then\n    # We are being configured with a cross compiler.  AC_REPLACE_FUNCS\n@@ -1569,7 +1569,7 @@ AM_CONDITIONAL(NATIVE, test \"$NATIVE\" = yes)\n AM_CONDITIONAL(ENABLE_SHARED, test \"$enable_shared\" = yes)\n AM_CONDITIONAL(NEEDS_DATA_START, test \"$NEEDS_DATA_START\" = yes && test \"$NATIVE\" = yes)\n AM_CONDITIONAL(INSTALL_BINARIES, test -z \"${with_multisubdir}\")\n-AC_SUBST(GCC_UNWIND_INCLUDE)\n+AC_SUBST(LIBGCC_UNWIND_INCLUDE)\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n # Calculate toolexeclibdir"}, {"sha": "61d4ac335d7f978fd512e98a6c6f426bf3b3bd7e", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,3 +1,8 @@\n+2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Makefile.in (INCLUDES): Search\n+\t$(srcdir)/$(MULTISRCTOP)../libgcc.\n+\n 2011-06-08  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/objc.h (__GNU_LIBOBJC__): Bumped to 20110608."}, {"sha": "0935ccd98d6923b5aaeab05036b656d47d39b2e3", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -101,6 +101,7 @@ OBJC_BOEHM_GC_LIBS=../boehm-gc/libgcjgc_convenience.la $(thread_libs_and_flags)\n INCLUDES = -I$(srcdir)/$(MULTISRCTOP)../gcc \\\n   -I$(srcdir)/$(MULTISRCTOP)../gcc/config \\\n   -I$(MULTIBUILDTOP)../../$(host_subdir)/gcc \\\n+  -I$(srcdir)/$(MULTISRCTOP)../libgcc \\\n   -I$(srcdir)/$(MULTISRCTOP)../include \\\n   $(OBJC_BOEHM_GC_INCLUDES)\n "}, {"sha": "a02326c6dbea756f460d08b60bb178a773641c01", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,3 +1,9 @@\n+2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* acinclude.m4 (GLIBCXX_EXPORT_INCLUDES): Point TOPLEVEL_INCLUDES\n+\tto $(toplevel_srcdir)/libgcc.\n+\t* configure: Regenerate.\n+\n 2011-08-04  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/xml/manual/build_hacking.xml: Use relative fileref for PNG"}, {"sha": "8bbc40e95f22e9d3015451c291a2d910116526f5", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -685,9 +685,9 @@ AC_DEFUN([GLIBCXX_EXPORT_INCLUDES], [\n   fi\n \n   # Stuff in the actual top level.  Currently only used by libsupc++ to\n-  # get unwind* headers from the gcc dir.\n-  #TOPLEVEL_INCLUDES='-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include'\n-  TOPLEVEL_INCLUDES='-I$(toplevel_srcdir)/gcc'\n+  # get unwind* headers from the libgcc dir.\n+  #TOPLEVEL_INCLUDES='-I$(toplevel_srcdir)/libgcc -I$(toplevel_srcdir)/include'\n+  TOPLEVEL_INCLUDES='-I$(toplevel_srcdir)/libgcc'\n \n   # Now, export this to all the little Makefiles....\n   AC_SUBST(GLIBCXX_INCLUDES)"}, {"sha": "c7be667dc8043a129b0385344cf537dade390559", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -65769,9 +65769,9 @@ $as_echo \"$gxx_include_dir\" >&6; }\n   fi\n \n   # Stuff in the actual top level.  Currently only used by libsupc++ to\n-  # get unwind* headers from the gcc dir.\n-  #TOPLEVEL_INCLUDES='-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include'\n-  TOPLEVEL_INCLUDES='-I$(toplevel_srcdir)/gcc'\n+  # get unwind* headers from the libgcc dir.\n+  #TOPLEVEL_INCLUDES='-I$(toplevel_srcdir)/libgcc -I$(toplevel_srcdir)/include'\n+  TOPLEVEL_INCLUDES='-I$(toplevel_srcdir)/libgcc'\n \n   # Now, export this to all the little Makefiles....\n "}]}