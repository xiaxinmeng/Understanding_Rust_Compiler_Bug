{"sha": "4956b1f14709e967ec5a374a4f9f5bcdadaea480", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk1NmIxZjE0NzA5ZTk2N2VjNWEzNzRhNGY5ZjViY2RhZGFlYTQ4MA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-12-14T15:11:17Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-12-14T15:11:17Z"}, "message": "re PR fortran/34398 (BOZ literals: Range checks)\n\n2007-12-14  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34398\n        * expr.c (gfc_check_assign): Add range checks for assignments of\n        * BOZs.\n        * resolve.c (resolve_ordinary_assign): Ditto.\n        * arith.c (gfc_range_check): Fix return value for complex\n        * numbers.\n\n2007-12-14  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34398\n        * gfortran.dg/nan_4.f90: New.\n\nFrom-SVN: r130932", "tree": {"sha": "5b92aa98aad961b67cdefffbc0c12ff912bfdcd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b92aa98aad961b67cdefffbc0c12ff912bfdcd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4956b1f14709e967ec5a374a4f9f5bcdadaea480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4956b1f14709e967ec5a374a4f9f5bcdadaea480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4956b1f14709e967ec5a374a4f9f5bcdadaea480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4956b1f14709e967ec5a374a4f9f5bcdadaea480/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae4dbd44baaea8b195e792c1865d02e8bf6c36b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4dbd44baaea8b195e792c1865d02e8bf6c36b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae4dbd44baaea8b195e792c1865d02e8bf6c36b8"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "40bbc53385ddf7e285f63a24002125484a4144bb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4956b1f14709e967ec5a374a4f9f5bcdadaea480/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4956b1f14709e967ec5a374a4f9f5bcdadaea480/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4956b1f14709e967ec5a374a4f9f5bcdadaea480", "patch": "@@ -1,3 +1,10 @@\n+2007-12-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34398\n+\t* expr.c (gfc_check_assign): Add range checks for assignments of BOZs.\n+\t* resolve.c (resolve_ordinary_assign): Ditto.\n+\t* arith.c (gfc_range_check): Fix return value for complex numbers.\n+\n 2007-12-14  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/34324"}, {"sha": "b06aa078c8aac0b51c2d6511326fd97aeb070fb2", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4956b1f14709e967ec5a374a4f9f5bcdadaea480/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4956b1f14709e967ec5a374a4f9f5bcdadaea480/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=4956b1f14709e967ec5a374a4f9f5bcdadaea480", "patch": "@@ -532,6 +532,7 @@ arith\n gfc_range_check (gfc_expr *e)\n {\n   arith rc;\n+  arith rc2;\n \n   switch (e->ts.type)\n     {\n@@ -558,13 +559,16 @@ gfc_range_check (gfc_expr *e)\n       if (rc == ARITH_NAN)\n \tmpfr_set_nan (e->value.complex.r);\n \n-      rc = gfc_check_real_range (e->value.complex.i, e->ts.kind);\n+      rc2 = gfc_check_real_range (e->value.complex.i, e->ts.kind);\n       if (rc == ARITH_UNDERFLOW)\n \tmpfr_set_ui (e->value.complex.i, 0, GFC_RND_MODE);\n       if (rc == ARITH_OVERFLOW)\n \tmpfr_set_inf (e->value.complex.i, mpfr_sgn (e->value.complex.i));\n       if (rc == ARITH_NAN)\n \tmpfr_set_nan (e->value.complex.i);\n+\n+      if (rc == ARITH_OK)\n+\trc = rc2;\n       break;\n \n     default:"}, {"sha": "92ad77e37a448d4d958817bc15dec7ea4c12a1af", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4956b1f14709e967ec5a374a4f9f5bcdadaea480/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4956b1f14709e967ec5a374a4f9f5bcdadaea480/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=4956b1f14709e967ec5a374a4f9f5bcdadaea480", "patch": "@@ -2755,11 +2755,28 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n   /* Handle the case of a BOZ literal on the RHS.  */\n   if (rvalue->is_boz && lvalue->ts.type != BT_INTEGER)\n     {\n+      int rc;\n       if (gfc_option.warn_surprising)\n         gfc_warning (\"BOZ literal at %L is bitwise transferred \"\n                      \"non-integer symbol '%s'\", &rvalue->where,\n                      lvalue->symtree->n.sym->name);\n       gfc_convert_boz (rvalue, &lvalue->ts);\n+      if ((rc = gfc_range_check (rvalue)) != ARITH_OK)\n+\t{\n+\t  if (rc == ARITH_UNDERFLOW)\n+\t    gfc_error (\"Arithmetic underflow of bit-wise transferred BOZ at %L\"\n+\t\t       \". This check can be disabled with the option \"\n+\t\t       \"-fno-range-check\", &rvalue->where);\n+\t  else if (rc == ARITH_OVERFLOW)\n+\t    gfc_error (\"Arithmetic overflow of bit-wise transferred BOZ at %L\"\n+\t\t       \". This check can be disabled with the option \"\n+\t\t       \"-fno-range-check\", &rvalue->where);\n+\t  else if (rc == ARITH_NAN)\n+\t    gfc_error (\"Arithmetic NaN of bit-wise transferred BOZ at %L\"\n+\t\t       \". This check can be disabled with the option \"\n+\t\t       \"-fno-range-check\", &rvalue->where);\n+\t  return FAILURE;\n+\t}\n     }\n \n   if (gfc_compare_types (&lvalue->ts, &rvalue->ts))"}, {"sha": "bee74e53c426ffbf4b16bd7ebb99c7be1aa9da47", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4956b1f14709e967ec5a374a4f9f5bcdadaea480/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4956b1f14709e967ec5a374a4f9f5bcdadaea480/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=4956b1f14709e967ec5a374a4f9f5bcdadaea480", "patch": "@@ -5921,12 +5921,29 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n   /* Handle the case of a BOZ literal on the RHS.  */\n   if (rhs->is_boz && lhs->ts.type != BT_INTEGER)\n     {\n+      int rc;\n       if (gfc_option.warn_surprising)\n \tgfc_warning (\"BOZ literal at %L is bitwise transferred \"\n \t\t     \"non-integer symbol '%s'\", &code->loc,\n \t\t     lhs->symtree->n.sym->name);\n \n       gfc_convert_boz (rhs, &lhs->ts);\n+      if ((rc = gfc_range_check (rhs)) != ARITH_OK)\n+\t{\n+\t  if (rc == ARITH_UNDERFLOW)\n+\t    gfc_error (\"Arithmetic underflow of bit-wise transferred BOZ at %L\"\n+\t\t       \". This check can be disabled with the option \"\n+\t\t       \"-fno-range-check\", &rhs->where);\n+\t  else if (rc == ARITH_OVERFLOW)\n+\t    gfc_error (\"Arithmetic overflow of bit-wise transferred BOZ at %L\"\n+\t\t       \". This check can be disabled with the option \"\n+\t\t       \"-fno-range-check\", &rhs->where);\n+\t  else if (rc == ARITH_NAN)\n+\t    gfc_error (\"Arithmetic NaN of bit-wise transferred BOZ at %L\"\n+\t\t       \". This check can be disabled with the option \"\n+\t\t       \"-fno-range-check\", &rhs->where);\n+\t  return false;\n+\t}\n     }\n \n "}, {"sha": "d021240e5570d71ed2d073a791ec9b215fc0f82c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4956b1f14709e967ec5a374a4f9f5bcdadaea480/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4956b1f14709e967ec5a374a4f9f5bcdadaea480/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4956b1f14709e967ec5a374a4f9f5bcdadaea480", "patch": "@@ -1,3 +1,8 @@\n+2007-12-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34398\n+\t* gfortran.dg/nan_4.f90: New.\n+\n 2007-12-14  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/34462"}, {"sha": "771aad02fa95e94ef23dec2f1446546384b1b08e", "filename": "gcc/testsuite/gfortran.dg/nan_4.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4956b1f14709e967ec5a374a4f9f5bcdadaea480/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4956b1f14709e967ec5a374a4f9f5bcdadaea480/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_4.f90?ref=4956b1f14709e967ec5a374a4f9f5bcdadaea480", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-std=gnu\" } \n+! { dg-options \"-std=gnu -mieee\" { target sh*-*-* } } \n+!\n+! PR fortran/34398.\n+!\n+! Check for invalid numbers in bit-wise BOZ transfers\n+!\n+program test\n+  implicit none\n+  real(4), parameter :: r0 = z'FFFFFFFF' ! { dg-error \"Arithmetic NaN\" }\n+  real(4) r\n+  data r/z'FFFFFFFF'/ ! { dg-error \"Arithmetic NaN\" }\n+  r = z'FFFFFFFF' ! { dg-error \"Arithmetic NaN\" }\n+end program test"}]}