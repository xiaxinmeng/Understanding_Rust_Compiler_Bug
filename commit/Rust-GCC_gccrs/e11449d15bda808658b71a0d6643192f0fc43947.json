{"sha": "e11449d15bda808658b71a0d6643192f0fc43947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExNDQ5ZDE1YmRhODA4NjU4YjcxYTBkNjY0MzE5MmYwZmM0Mzk0Nw==", "commit": {"author": {"name": "Fritz Reese", "email": "fritzoreese@gmail.com", "date": "2018-07-16T18:24:50Z"}, "committer": {"name": "Fritz Reese", "email": "foreese@gcc.gnu.org", "date": "2018-07-16T18:24:50Z"}, "message": "Fix handling of invalid assumed-shape/size arrays in legacy initializer lists.\n\n2018-07-16  Fritz Reese  <fritzoreese@gmail.com>\n\n    Fix handling of invalid assumed-shape/size arrays in legacy initializer\n    lists.\n\n    gcc/fortran/ChangeLog:\n\n\tPR fortran/83184\n\t* decl.c (match_old_style_init): Initialize locus of variable expr when\n\tcreating a data variable.\n\t(match_clist_expr): Verify array is explicit shape/size before\n\tattempting to allocate constant array constructor.\n\n    gcc/testsuite/ChangeLog:\n\n\tPR fortran/83184\n\t* gfortran.dg/assumed_rank_14.f90: New testcase.\n\t* gfortran.dg/assumed_rank_15.f90: New testcase.\n\t* gfortran.dg/dec_structure_8.f90: Update error messages.\n\t* gfortran.dg/dec_structure_23.f90: Update error messages.\n\nFrom-SVN: r262744", "tree": {"sha": "6b4306e60445587b53dc304533c606f4e4dbd509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b4306e60445587b53dc304533c606f4e4dbd509"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e11449d15bda808658b71a0d6643192f0fc43947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11449d15bda808658b71a0d6643192f0fc43947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11449d15bda808658b71a0d6643192f0fc43947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11449d15bda808658b71a0d6643192f0fc43947/comments", "author": {"login": "fritzr", "id": 2230564, "node_id": "MDQ6VXNlcjIyMzA1NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2230564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzr", "html_url": "https://github.com/fritzr", "followers_url": "https://api.github.com/users/fritzr/followers", "following_url": "https://api.github.com/users/fritzr/following{/other_user}", "gists_url": "https://api.github.com/users/fritzr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzr/subscriptions", "organizations_url": "https://api.github.com/users/fritzr/orgs", "repos_url": "https://api.github.com/users/fritzr/repos", "events_url": "https://api.github.com/users/fritzr/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "835e529de2dc75d9c051a178863ae68d8bf1d684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/835e529de2dc75d9c051a178863ae68d8bf1d684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/835e529de2dc75d9c051a178863ae68d8bf1d684"}], "stats": {"total": 113, "additions": 80, "deletions": 33}, "files": [{"sha": "b8c60f5ad9072ecff986e89b8f831bbf11d4dee3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e11449d15bda808658b71a0d6643192f0fc43947", "patch": "@@ -1,3 +1,11 @@\n+2018-07-16  Fritz Reese  <fritzoreese@gmail.com>\n+\n+\tPR fortran/83184\n+\t* decl.c (match_old_style_init): Initialize locus of variable expr when\n+\tcreating a data variable.\n+\t(match_clist_expr): Verify array is explicit shape/size before\n+\tattempting to allocate constant array constructor.\n+\n 2018-07-16  Fritz Reese  <fritzoreese@gmail.com>\n \n \tPR fortran/86417"}, {"sha": "1384bc717d8c753ab25b2515c9cc4d8f5aa3b925", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=e11449d15bda808658b71a0d6643192f0fc43947", "patch": "@@ -534,6 +534,7 @@ match_old_style_init (const char *name)\n   newdata = gfc_get_data ();\n   newdata->var = gfc_get_data_variable ();\n   newdata->var->expr = gfc_get_variable_expr (st);\n+  newdata->var->expr->where = sym->declared_at;\n   newdata->where = gfc_current_locus;\n \n   /* Match initial value list. This also eats the terminal '/'.  */\n@@ -659,26 +660,35 @@ match_clist_expr (gfc_expr **result, gfc_typespec *ts, gfc_array_spec *as)\n {\n   gfc_constructor_base array_head = NULL;\n   gfc_expr *expr = NULL;\n-  match m;\n+  match m = MATCH_ERROR;\n   locus where;\n   mpz_t repeat, cons_size, as_size;\n   bool scalar;\n   int cmp;\n \n   gcc_assert (ts);\n \n-  mpz_init_set_ui (repeat, 0);\n-  scalar = !as || !as->rank;\n-\n   /* We have already matched '/' - now look for a constant list, as with\n      top_val_list from decl.c, but append the result to an array.  */\n   if (gfc_match (\"/\") == MATCH_YES)\n     {\n       gfc_error (\"Empty old style initializer list at %C\");\n-      goto cleanup;\n+      return MATCH_ERROR;\n     }\n \n   where = gfc_current_locus;\n+  scalar = !as || !as->rank;\n+\n+  if (!scalar && !spec_size (as, &as_size))\n+    {\n+      gfc_error (\"Array in initializer list at %L must have an explicit shape\",\n+\t\t as->type == AS_EXPLICIT ? &as->upper[0]->where : &where);\n+      /* Nothing to cleanup yet.  */\n+      return MATCH_ERROR;\n+    }\n+\n+  mpz_init_set_ui (repeat, 0);\n+\n   for (;;)\n     {\n       m = match_data_constant (&expr);\n@@ -708,7 +718,10 @@ match_clist_expr (gfc_expr **result, gfc_typespec *ts, gfc_array_spec *as)\n \n           m = match_data_constant (&expr);\n           if (m == MATCH_NO)\n-            gfc_error (\"Expected data constant after repeat spec at %C\");\n+\t    {\n+\t      m = MATCH_ERROR;\n+\t      gfc_error (\"Expected data constant after repeat spec at %C\");\n+\t    }\n           if (m != MATCH_YES)\n             goto cleanup;\n         }\n@@ -751,6 +764,9 @@ match_clist_expr (gfc_expr **result, gfc_typespec *ts, gfc_array_spec *as)\n         goto syntax;\n     }\n \n+  /* If we break early from here out, we encountered an error.  */\n+  m = MATCH_ERROR;\n+\n   /* Set up expr as an array constructor. */\n   if (!scalar)\n     {\n@@ -763,25 +779,13 @@ match_clist_expr (gfc_expr **result, gfc_typespec *ts, gfc_array_spec *as)\n \n       /* Validate sizes.  We built expr ourselves, so cons_size will be\n \t constant (we fail above for non-constant expressions).\n-\t We still need to verify that the array-spec has constant size.  */\n-      cmp = 0;\n+\t We still need to verify that the sizes match.  */\n       gcc_assert (gfc_array_size (expr, &cons_size));\n-      if (!spec_size (as, &as_size))\n-\t{\n-\t  gfc_error (\"Expected constant array-spec in initializer list at %L\",\n-\t\t     as->type == AS_EXPLICIT ? &as->upper[0]->where : &where);\n-\t  cmp = -1;\n-\t}\n-      else\n-\t{\n-\t  /* Make sure the specs are of the same size.  */\n-\t  cmp = mpz_cmp (cons_size, as_size);\n-\t  if (cmp < 0)\n-\t    gfc_error (\"Not enough elements in array initializer at %C\");\n-\t  else if (cmp > 0)\n-\t    gfc_error (\"Too many elements in array initializer at %C\");\n-\t  mpz_clear (as_size);\n-\t}\n+      cmp = mpz_cmp (cons_size, as_size);\n+      if (cmp < 0)\n+\tgfc_error (\"Not enough elements in array initializer at %C\");\n+      else if (cmp > 0)\n+\tgfc_error (\"Too many elements in array initializer at %C\");\n       mpz_clear (cons_size);\n       if (cmp)\n \tgoto cleanup;\n@@ -796,19 +800,24 @@ match_clist_expr (gfc_expr **result, gfc_typespec *ts, gfc_array_spec *as)\n     expr->ts.u.cl->length_from_typespec = 1;\n \n   *result = expr;\n-  mpz_clear (repeat);\n-  return MATCH_YES;\n+  m = MATCH_YES;\n+  goto done;\n \n syntax:\n+  m = MATCH_ERROR;\n   gfc_error (\"Syntax error in old style initializer list at %C\");\n \n cleanup:\n   if (expr)\n     expr->value.constructor = NULL;\n   gfc_free_expr (expr);\n   gfc_constructor_free (array_head);\n+\n+done:\n   mpz_clear (repeat);\n-  return MATCH_ERROR;\n+  if (!scalar)\n+    mpz_clear (as_size);\n+  return m;\n }\n \n "}, {"sha": "75cdf509531aaa0b75619cfd8a4dafc9bc3fbde1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e11449d15bda808658b71a0d6643192f0fc43947", "patch": "@@ -1,3 +1,11 @@\n+2018-07-16  Fritz Reese  <fritzoreese@gmail.com>\n+\n+\tPR fortran/83184\n+\t* gfortran.dg/assumed_rank_14.f90: New testcase.\n+\t* gfortran.dg/assumed_rank_15.f90: New testcase.\n+\t* gfortran.dg/dec_structure_8.f90: Update error messages.\n+\t* gfortran.dg/dec_structure_23.f90: Update error messages.\n+\n 2018-07-16  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/86528"}, {"sha": "18271f91bad67fcd0338f63c2e8fe00b878700d3", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_14.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_14.f90?ref=e11449d15bda808658b71a0d6643192f0fc43947", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-std=legacy\" }\n+!\n+! PR fortran/83184\n+!\n+\n+integer n1(..) /1/\n+! { dg-error \"Assumed-rank array.*must be a dummy argument\" \"\" { target *-*-* } 7 }\n+! { dg-error \"Assumed-rank variable.*actual argument\" \"\" { target *-*-* } 7 }\n+\n+end"}, {"sha": "efeb4a5f47b2aedf48e7c73b4bc90fa89091d151", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_15.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_15.f90?ref=e11449d15bda808658b71a0d6643192f0fc43947", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec-structure\" }\n+!\n+! PR fortran/83184\n+!\n+\n+structure /s/\n+  integer n(..) /1/ ! { dg-error \"must have an explicit shape\" }\n+end structure\n+\n+end"}, {"sha": "d79ecc7ff213e5a0c485b853b9a86a2c9ed4bb54", "filename": "gcc/testsuite/gfortran.dg/dec_structure_23.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_23.f90?ref=e11449d15bda808658b71a0d6643192f0fc43947", "patch": "@@ -13,8 +13,8 @@ program p\n   integer :: nn\n   real :: rr\n   structure /s/\n-    integer x(n)    /1/   ! { dg-error \"array with nonconstant bounds\" }\n-    integer xx(nn)  /1/   ! { dg-error \"array with nonconstant bounds\" }\n-    integer xxx(rr) /1.0/ ! { dg-error \"array with nonconstant bounds\" }\n+    integer x(n)    /1/   ! { dg-error \"must have an explicit shape\" }\n+    integer xx(nn)  /1/   ! { dg-error \"must have an explicit shape\" }\n+    integer xxx(rr) /1.0/ ! { dg-error \"must have an explicit shape\" }\n   end structure\n end"}, {"sha": "f84bf15686419503cab9830eb92b9a4fbcbc720d", "filename": "gcc/testsuite/gfortran.dg/dec_structure_8.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11449d15bda808658b71a0d6643192f0fc43947/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_8.f90?ref=e11449d15bda808658b71a0d6643192f0fc43947", "patch": "@@ -6,7 +6,7 @@\n \n ! Old-style (clist) initialization\n integer,parameter :: as = 3\n-structure /t1/\n+structure /t1/              ! { dg-error \"Type definition.*T1\" }\n   integer*1 a /300_2/       ! { dg-error \"Arithmetic overflow\" }\n   integer   b //            ! { dg-error \"Empty old style initializer list\" }\n   integer   c /2*3/         ! { dg-error \"Repeat spec invalid in scalar\" }\n@@ -44,14 +44,14 @@\n \n structure /t2/\n   ENTRY here           ! { dg-error \"ENTRY statement.*cannot appear\" }\n-  integer a\n+  integer a            ! { dg-error \"Component.*already declared\" }\n   integer a            ! { dg-error \"Component.*already declared\" }\n   structure $z         ! { dg-error \"Invalid character in name\" }\n   structure //         ! { dg-error \"Invalid character in name\" }\n   structure // x       ! { dg-error \"Invalid character in name\" }\n   structure /t3/       ! { dg-error \"Invalid character in name\" }\n   structure /t3/ x,$y  ! { dg-error \"Invalid character in name\" }\n-  structure /t4/ y\n+  structure /t4/ y     ! { dg-error \"Type definition.*T4\" }\n     integer i, j, k\n   end structure\n   structure /t4/ z     ! { dg-error \"Type definition.*T4\" }"}]}