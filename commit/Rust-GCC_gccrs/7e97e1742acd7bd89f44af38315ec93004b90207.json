{"sha": "7e97e1742acd7bd89f44af38315ec93004b90207", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U5N2UxNzQyYWNkN2JkODlmNDRhZjM4MzE1ZWM5MzAwNGI5MDIwNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-23T16:56:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-23T16:56:32Z"}, "message": "Minor editing.\n\nFrom-SVN: r206989", "tree": {"sha": "c58e15f3f6daffe8f22efdf5298f0508d132a649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c58e15f3f6daffe8f22efdf5298f0508d132a649"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e97e1742acd7bd89f44af38315ec93004b90207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e97e1742acd7bd89f44af38315ec93004b90207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e97e1742acd7bd89f44af38315ec93004b90207", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e97e1742acd7bd89f44af38315ec93004b90207/comments", "author": null, "committer": null, "parents": [{"sha": "8bdc02c2379551ab629ab761eb5b916fac70178b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bdc02c2379551ab629ab761eb5b916fac70178b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bdc02c2379551ab629ab761eb5b916fac70178b"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "a4b47d952997ce150b34b0b743d526705e0e104c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e97e1742acd7bd89f44af38315ec93004b90207/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e97e1742acd7bd89f44af38315ec93004b90207/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=7e97e1742acd7bd89f44af38315ec93004b90207", "patch": "@@ -4249,14 +4249,15 @@ pragma Linker_Section (\n @end smallexample\n \n @noindent\n-@var{LOCAL_NAME} must refer to an object that is declared at the library\n-level. This pragma specifies the name of the linker section for the given\n-entity. It is equivalent to @code{__attribute__((section))} in GNU C and\n-causes @var{LOCAL_NAME} to be placed in the @var{static_string_EXPRESSION}\n-section of the executable (assuming the linker doesn't rename the section).\n-\n-The compiler normally places library-level objects in standard sections\n-depending on their type: procedures and functions generally go in the\n+@var{LOCAL_NAME} must refer to an object or a subprogram that is\n+declared at the library level. This pragma specifies the name of the\n+linker section for the given entity. It is equivalent to\n+@code{__attribute__((section))} in GNU C and causes @var{LOCAL_NAME} to\n+be placed in the @var{static_string_EXPRESSION} section of the\n+executable (assuming the linker doesn't rename the section).\n+\n+The compiler normally places library-level entities in standard sections\n+depending on the class: procedures and functions generally go in the\n @code{.text} section, initialized variables in the @code{.data} section\n and uninitialized variables in the @code{.bss} section.\n "}]}