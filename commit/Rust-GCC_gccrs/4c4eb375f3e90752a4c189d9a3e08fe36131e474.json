{"sha": "4c4eb375f3e90752a4c189d9a3e08fe36131e474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0ZWIzNzVmM2U5MDc1MmE0YzE4OWQ5YTNlMDhmZTM2MTMxZTQ3NA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2002-06-11T23:14:47Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2002-06-11T23:14:47Z"}, "message": "config.gcc (powerpc*-*-*, [...]): Don't bother including softfloat.h.\n\n\t* config.gcc (powerpc*-*-*, rs6000-*-*-*): Don't bother including\n\tsoftfloat.h.\n\t* config/rs6000/vxppc.h (CPP_ENDIAN_BIG_SPEC): Delete.\n\t(CPP_ENDIAN_LITTLE_SPEC): Delete.\n\t* config/rs6000/sysv4le.h (CPP_ENDIAN_DEFAULT_SPEC): Delete.\n\t* config/rs6000/sysv4.h (CPP_SYSV_SPEC): Delete _SOFT_FLOAT setting,\n\t__LONG_DOUBLE_128__ setting, _CALL_* setting.\n\t(CPP_DEFAULT_SPEC): Delete.\n\t(CPP_FLOAT_DEFAULT_SPEC): Delete.\n\t(CPP_LONGDOUBLE_DEFAULT_SPEC): Delete.\n\t(CPP_SYSV_DEFAULT_SPEC): Delete.\n\t(CPP_ENDIAN_BIG_SPEC): Delete.\n\t(CPP_ENDIAN_LITTLE_SPEC): Delete.\n\t(CPP_ENDIAN_SPEC): Delete.\n\t(CPP_SPEC): Don't include cpp_endian, cpp_cpu.\n\t(SUBTARGET_EXTRA_SPECS): Delete cpp_sysv_default, cpp_endian_default,\n\tcpp_endian, cpp_endian_big, cpp_endian_little, cpp_float_default,\n\tcpp_longdouble_default.\n\t* config/rs6000/softfloat.h: Delete.\n\t* config/rs6000/rs6000.h (CPP_CPU_SPEC): Delete.\n\t(EXTRA_SPECS): Delete cpp_cpu.\n\t(TARGET_CPU_CPP_BUILTINS): New.\n\t* config/rs6000/rs6000-protos.h (rs6000_cpu_cpp_builtins): New\n\tprototype.\n\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): New.\n\t* config/rs6000/linux64.h (CPP_PREDEFINES): Remove endianness defines.\n\t(CPP_DEFAULT_SPEC): Delete.\n\t* config/rs6000/eabiaix.h (CPP_SYSV_DEFAULT_SPEC): Delete.\n\t* config/rs6000/darwin.h (CPP_PREDEFINES): Don't define __BIG_ENDIAN__.\n\t* config/rs6000/beos.h (CPP_SPEC): Remove cpp_cpu.\n\t(CPP_DEFAULT_SPEC): Delete.\n\t* config/rs6000/aix51.h (CPP_SPEC): Remove cpp_cpu, -D_ARCH_PPC.\n\t(CPLUSPLUS_CPP_SPEC): Likewise.\n\t(CPP_CPU_SPEC): Delete.\n\t(CPP_DEFAULT_SPEC): Delete.\n\t* config/rs6000/aix43.h (CPP_SPEC): Remove cpp_cpu, -D_ARCH_PPC.\n\t(CPLUSPLUS_CPP_SPEC): Likewise.\n\t(CPP_CPU_SPEC): Delete.\n\t(CPP_DEFAULT_SPEC): Delete.\n\t* config/rs6000/aix41.h (CPP_SPEC): Remove cpp_cpu.\n\t(CPP_DEFAULT_SPEC): Delete.\n\t* config/rs6000/aix.h (CPP_SPEC): Remove cpp_cpu.\n\t(CPP_DEFAULT_SPEC): Delete.\n\nFrom-SVN: r54534", "tree": {"sha": "bd153325254c20b315dac9698fe9440ba8a2c693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd153325254c20b315dac9698fe9440ba8a2c693"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c4eb375f3e90752a4c189d9a3e08fe36131e474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4eb375f3e90752a4c189d9a3e08fe36131e474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4eb375f3e90752a4c189d9a3e08fe36131e474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4eb375f3e90752a4c189d9a3e08fe36131e474/comments", "author": null, "committer": null, "parents": [{"sha": "fc5c400a9a3a46787b873f63c7bcd0d933e3e06b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5c400a9a3a46787b873f63c7bcd0d933e3e06b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5c400a9a3a46787b873f63c7bcd0d933e3e06b"}], "stats": {"total": 363, "additions": 127, "deletions": 236}, "files": [{"sha": "995ee28869cf0d96df51265776b0cb1e841f03ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -1,5 +1,49 @@\n 2002-06-11  Geoffrey Keating  <geoffk@redhat.com>\n \n+\t* config.gcc (powerpc*-*-*, rs6000-*-*-*): Don't bother including\n+\tsoftfloat.h.\n+\t* config/rs6000/vxppc.h (CPP_ENDIAN_BIG_SPEC): Delete.\n+\t(CPP_ENDIAN_LITTLE_SPEC): Delete.\n+\t* config/rs6000/sysv4le.h (CPP_ENDIAN_DEFAULT_SPEC): Delete.\n+\t* config/rs6000/sysv4.h (CPP_SYSV_SPEC): Delete _SOFT_FLOAT setting,\n+\t__LONG_DOUBLE_128__ setting, _CALL_* setting.\n+\t(CPP_DEFAULT_SPEC): Delete.\n+\t(CPP_FLOAT_DEFAULT_SPEC): Delete.\n+\t(CPP_LONGDOUBLE_DEFAULT_SPEC): Delete.\n+\t(CPP_SYSV_DEFAULT_SPEC): Delete.\n+\t(CPP_ENDIAN_BIG_SPEC): Delete.\n+\t(CPP_ENDIAN_LITTLE_SPEC): Delete.\n+\t(CPP_ENDIAN_SPEC): Delete.\n+\t(CPP_SPEC): Don't include cpp_endian, cpp_cpu.\n+\t(SUBTARGET_EXTRA_SPECS): Delete cpp_sysv_default, cpp_endian_default,\n+\tcpp_endian, cpp_endian_big, cpp_endian_little, cpp_float_default,\n+\tcpp_longdouble_default.\n+\t* config/rs6000/softfloat.h: Delete.\n+\t* config/rs6000/rs6000.h (CPP_CPU_SPEC): Delete.\n+\t(EXTRA_SPECS): Delete cpp_cpu.\n+\t(TARGET_CPU_CPP_BUILTINS): New.\n+\t* config/rs6000/rs6000-protos.h (rs6000_cpu_cpp_builtins): New\n+\tprototype.\n+\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): New.\n+\t* config/rs6000/linux64.h (CPP_PREDEFINES): Remove endianness defines.\n+\t(CPP_DEFAULT_SPEC): Delete.\n+\t* config/rs6000/eabiaix.h (CPP_SYSV_DEFAULT_SPEC): Delete.\n+\t* config/rs6000/darwin.h (CPP_PREDEFINES): Don't define __BIG_ENDIAN__.\n+\t* config/rs6000/beos.h (CPP_SPEC): Remove cpp_cpu.\n+\t(CPP_DEFAULT_SPEC): Delete.\n+\t* config/rs6000/aix51.h (CPP_SPEC): Remove cpp_cpu, -D_ARCH_PPC.\n+\t(CPLUSPLUS_CPP_SPEC): Likewise.\n+\t(CPP_CPU_SPEC): Delete.\n+\t(CPP_DEFAULT_SPEC): Delete.\n+\t* config/rs6000/aix43.h (CPP_SPEC): Remove cpp_cpu, -D_ARCH_PPC.\n+\t(CPLUSPLUS_CPP_SPEC): Likewise.\n+\t(CPP_CPU_SPEC): Delete.\n+\t(CPP_DEFAULT_SPEC): Delete.\n+\t* config/rs6000/aix41.h (CPP_SPEC): Remove cpp_cpu.\n+\t(CPP_DEFAULT_SPEC): Delete.\n+\t* config/rs6000/aix.h (CPP_SPEC): Remove cpp_cpu.\n+\t(CPP_DEFAULT_SPEC): Delete.\n+\n \t* doc/gty.texi: Small updates.\n \n 2002-06-12  Gabriel Dos Reis  <gdr@codesourcery.com>"}, {"sha": "3ae8d433ef73c850f3e66a9e1bb670d16b661e09", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -2876,7 +2876,6 @@ powerpc*-*-* | rs6000-*-*)\n \n \t\tx401 | x403 | x405 | xec603e | x801 | x821 | x823 | x860)\n \t\t\ttarget_cpu_default2=\"\\\\\\\"$with_cpu\\\\\\\"\"\n-\t\t\ttm_file=\"$tm_file rs6000/softfloat.h\"\n \t\t\t;;\n \n \t\txyes | xno)"}, {"sha": "7c0a4cf41b23e6b6b8a548d3ede372a043bef176", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -48,11 +48,7 @@ Boston, MA 02111-1307, USA.  */\n    target switches.  */\n \n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\\n-   %{ansi: -D_ANSI_C_SOURCE}\\\n-   %(cpp_cpu)\"\n-\n-#undef CPP_DEFAULT_SPEC\n-#define CPP_DEFAULT_SPEC \"-D_ARCH_PWR\"\n+   %{ansi: -D_ANSI_C_SOURCE}\"\n \n #undef ASM_DEFAULT_SPEC\n #define ASM_DEFAULT_SPEC \"\""}, {"sha": "cc839b2c4945ee8c4d57e426c1d2e601f79ca056", "filename": "gcc/config/rs6000/aix41.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Faix41.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Faix41.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix41.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -41,11 +41,7 @@ Boston, MA 02111-1307, USA.  */\n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\\n    %{ansi: -D_ANSI_C_SOURCE}\\\n    %{mpe: -I/usr/lpp/ppe.poe/include}\\\n-   %{pthread: -D_THREAD_SAFE}\\\n-   %(cpp_cpu)\"\n-\n-#undef\tCPP_DEFAULT_SPEC\n-#define CPP_DEFAULT_SPEC \"-D_ARCH_COM\"\n+   %{pthread: -D_THREAD_SAFE}\"\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT MASK_NEW_MNEMONICS"}, {"sha": "fe560a2247027d893295aac5cc0640552d931609", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 4, "deletions": 38, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -103,10 +103,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\\n    %{ansi: -D_ANSI_C_SOURCE}\\\n-   %{maix64: -D__64BIT__ -D_ARCH_PPC -D__LONG_MAX__=9223372036854775807L}\\\n+   %{maix64: -D__64BIT__ -D__LONG_MAX__=9223372036854775807L}\\\n    %{mpe: -I/usr/lpp/ppe.poe/include}\\\n-   %{pthread: -D_THREAD_SAFE}\\\n-   %(cpp_cpu)\"\n+   %{pthread: -D_THREAD_SAFE}\"\n \n /* The GNU C++ standard library requires that these macros be \n    defined.  */\n@@ -116,42 +115,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n    -D_XOPEN_SOURCE_EXTENDED=1\t\t\t\\\n    -D_LARGE_FILE_API\t\t\t\t\\\n    -D_ALL_SOURCE                                \\\n-   %{maix64: -D__64BIT__ -D_ARCH_PPC -D__LONG_MAX__=9223372036854775807L}\\\n+   %{maix64: -D__64BIT__ -D__LONG_MAX__=9223372036854775807L}\\\n    %{mpe: -I/usr/lpp/ppe.poe/include}\\\n-   %{pthread: -D_THREAD_SAFE}\\\n-   %(cpp_cpu)\"\n-\n-/* Common CPP definitions used by CPP_SPEC among the various targets\n-   for handling -mcpu=xxx switches.  */\n-#undef CPP_CPU_SPEC\n-#define CPP_CPU_SPEC \\\n-\"%{!mcpu*: %{!maix64: \\\n-  %{mpower: %{!mpower2: -D_ARCH_PWR}} \\\n-  %{mpower2: -D_ARCH_PWR2} \\\n-  %{mpowerpc*: -D_ARCH_PPC} \\\n-  %{!mpower*: %{!mpowerpc*: %(cpp_default)}}}} \\\n-%{mcpu=common: -D_ARCH_COM} \\\n-%{mcpu=power: -D_ARCH_PWR} \\\n-%{mcpu=power2: -D_ARCH_PWR2} \\\n-%{mcpu=power3: -D_ARCH_PPC} \\\n-%{mcpu=power4: -D_ARCH_PPC} \\\n-%{mcpu=powerpc: -D_ARCH_PPC} \\\n-%{mcpu=rios: -D_ARCH_PWR} \\\n-%{mcpu=rios1: -D_ARCH_PWR} \\\n-%{mcpu=rios2: -D_ARCH_PWR2} \\\n-%{mcpu=rsc: -D_ARCH_PWR} \\\n-%{mcpu=rsc1: -D_ARCH_PWR} \\\n-%{mcpu=rs64a: -D_ARCH_PPC} \\\n-%{mcpu=601: -D_ARCH_PPC -D_ARCH_PWR} \\\n-%{mcpu=602: -D_ARCH_PPC} \\\n-%{mcpu=603: -D_ARCH_PPC} \\\n-%{mcpu=603e: -D_ARCH_PPC} \\\n-%{mcpu=604: -D_ARCH_PPC} \\\n-%{mcpu=620: -D_ARCH_PPC} \\\n-%{mcpu=630: -D_ARCH_PPC}\"\n-\n-#undef\tCPP_DEFAULT_SPEC\n-#define CPP_DEFAULT_SPEC \"-D_ARCH_COM\"\n+   %{pthread: -D_THREAD_SAFE}\"\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT MASK_NEW_MNEMONICS"}, {"sha": "f0b9e7df503694f2890db46e090e37fc21d82369", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 4, "deletions": 38, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -103,10 +103,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\\n   %{ansi: -D_ANSI_C_SOURCE}\\\n-  %{maix64: -D__64BIT__ -D_ARCH_PPC -D__LONG_MAX__=9223372036854775807L}\n+  %{maix64: -D__64BIT__ -D__LONG_MAX__=9223372036854775807L}\n   %{mpe: -I/usr/lpp/ppe.poe/include}\\\n-  %{pthread: -D_THREAD_SAFE}\\\n-  %(cpp_cpu)\"\n+  %{pthread: -D_THREAD_SAFE}\"\n \n /* The GNU C++ standard library requires that these macros be \n    defined.  */\n@@ -116,42 +115,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n    -D_XOPEN_SOURCE_EXTENDED=1                   \\\n    -D_LARGE_FILE_API                            \\\n    -D_ALL_SOURCE                                \\\n-   %{maix64: -D__64BIT__ -D_ARCH_PPC -D__LONG_MAX__=9223372036854775807L}\n+   %{maix64: -D__64BIT__ -D__LONG_MAX__=9223372036854775807L}\n    %{mpe: -I/usr/lpp/ppe.poe/include}\\\n-   %{pthread: -D_THREAD_SAFE}\\\n-   %(cpp_cpu)\"\n-\n-/* Common CPP definitions used by CPP_SPEC among the various targets\n-   for handling -mcpu=xxx switches.  */\n-#undef CPP_CPU_SPEC\n-#define CPP_CPU_SPEC \\\n-\"%{!mcpu*: %{!maix64: \\\n-  %{mpower: %{!mpower2: -D_ARCH_PWR}} \\\n-  %{mpower2: -D_ARCH_PWR2} \\\n-  %{mpowerpc*: -D_ARCH_PPC} \\\n-  %{!mpower*: %{!mpowerpc*: %(cpp_default)}}}} \\\n-%{mcpu=common: -D_ARCH_COM} \\\n-%{mcpu=power: -D_ARCH_PWR} \\\n-%{mcpu=power2: -D_ARCH_PWR2} \\\n-%{mcpu=power3: -D_ARCH_PPC} \\\n-%{mcpu=power4: -D_ARCH_PPC} \\\n-%{mcpu=powerpc: -D_ARCH_PPC} \\\n-%{mcpu=rios: -D_ARCH_PWR} \\\n-%{mcpu=rios1: -D_ARCH_PWR} \\\n-%{mcpu=rios2: -D_ARCH_PWR2} \\\n-%{mcpu=rsc: -D_ARCH_PWR} \\\n-%{mcpu=rsc1: -D_ARCH_PWR} \\\n-%{mcpu=rs64a: -D_ARCH_PPC} \\\n-%{mcpu=601: -D_ARCH_PPC -D_ARCH_PWR} \\\n-%{mcpu=602: -D_ARCH_PPC} \\\n-%{mcpu=603: -D_ARCH_PPC} \\\n-%{mcpu=603e: -D_ARCH_PPC} \\\n-%{mcpu=604: -D_ARCH_PPC} \\\n-%{mcpu=620: -D_ARCH_PPC} \\\n-%{mcpu=630: -D_ARCH_PPC}\"\n-\n-#undef\tCPP_DEFAULT_SPEC\n-#define CPP_DEFAULT_SPEC \"-D_ARCH_COM\"\n+   %{pthread: -D_THREAD_SAFE}\"\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT MASK_NEW_MNEMONICS"}, {"sha": "4d2952a10aa5744fbcf8c0e983c799d253e3a22e", "filename": "gcc/config/rs6000/beos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Fbeos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Fbeos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fbeos.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -43,10 +43,7 @@ Boston, MA 02111-1307, USA.  */\n #define CPP_PREDEFINES \"-D__BEOS__ -D__POWERPC__ -Asystem=beos -Acpu=powerpc -Amachine=powerpc\"\n \n #undef CPP_SPEC\n-#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE} %(cpp_cpu)\"\n-\n-#undef\tCPP_DEFAULT_SPEC\n-#define CPP_DEFAULT_SPEC \"-D_ARCH_PPC\"\n+#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\"\n \n /* This is the easiest way to disable use of gcc's builtin alloca,\n    which in the current BeOS release (DR9) is a problem because of the"}, {"sha": "a472334b7b0824428f0afa15e53f608f290c3263", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -44,7 +44,7 @@ Boston, MA 02111-1307, USA.  */\n #define SUBTARGET_OVERRIDE_OPTIONS  \\\n   rs6000_altivec_abi = 1;\n \n-#define CPP_PREDEFINES \"-D__ppc__ -D__POWERPC__ -D__NATURAL_ALIGNMENT__ -D__MACH__ -D__BIG_ENDIAN__ -D__APPLE__\"\n+#define CPP_PREDEFINES \"-D__ppc__ -D__POWERPC__ -D__NATURAL_ALIGNMENT__ -D__MACH__ -D__APPLE__\"\n \n /* We want -fPIC by default, unless we're using -static to compile for\n    the kernel or some such.  */"}, {"sha": "4e1806791346754502faeadaede057b83b97b809", "filename": "gcc/config/rs6000/eabiaix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Feabiaix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Feabiaix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabiaix.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -23,9 +23,6 @@ Boston, MA 02111-1307, USA.  */\n #undef\tRS6000_ABI_NAME\n #define RS6000_ABI_NAME \"aix\"\n \n-#undef\tCPP_SYSV_DEFAULT_SPEC\n-#define\tCPP_SYSV_DEFAULT_SPEC \"-D_CALL_AIX\"\n-\n /* Define this macro as a C expression for the initializer of an\n    array of string to tell the driver program which options are\n    defaults for this target and thus do not need to be handled"}, {"sha": "ab2a40968c9e245399370fb75c514f43b12c336f", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -36,9 +36,6 @@ Boston, MA 02111-1307, USA.  */\n #undef PROCESSOR_DEFAULT64\n #define PROCESSOR_DEFAULT64 PROCESSOR_PPC630\n \n-#undef  CPP_DEFAULT_SPEC\n-#define CPP_DEFAULT_SPEC \"-D_ARCH_PPC64\"\n-\n #undef  ASM_DEFAULT_SPEC\n #define ASM_DEFAULT_SPEC \"-mppc64\"\n \n@@ -112,7 +109,7 @@ Boston, MA 02111-1307, USA.  */\n #undef  CPP_PREDEFINES\n #define CPP_PREDEFINES \\\n  \"-D_PPC_ -D__PPC__ -D_PPC64_ -D__PPC64__ -D__powerpc__ -D__powerpc64__ \\\n-  -D_PIC_ -D__PIC__ -D_BIG_ENDIAN -D__BIG_ENDIAN__ -D__ELF__ \\\n+  -D_PIC_ -D__PIC__ -D__ELF__ \\\n   -D__LONG_MAX__=9223372036854775807L \\\n   -Acpu=powerpc64 -Amachine=powerpc64\"\n "}, {"sha": "ab31cc58f7cab6b4c6d2b5bfdee64af848e72254", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -69,3 +69,61 @@ rs6000_pragma_longcall (pfile)\n \n   rs6000_default_long_calls = (n == integer_one_node);\n }\n+\n+/* Handle defining many CPP flags based on TARGET_xxx.  As a general\n+   policy, rather than trying to guess what flags a user might want a\n+   #define for, it's better to define a flag for everything.  */\n+\n+#define builtin_define(TXT) cpp_define (pfile, TXT)\n+#define builtin_assert(TXT) cpp_assert (pfile, TXT)\n+\n+void\n+rs6000_cpu_cpp_builtins (pfile)\n+     cpp_reader *pfile;\n+{\n+  if (TARGET_POWER2)\n+    builtin_define (\"_ARCH_PWR2\");\n+  else if (TARGET_POWER)\n+    builtin_define (\"_ARCH_PWR\");\n+  if (TARGET_POWERPC)\n+    builtin_define (\"_ARCH_PPC\");\n+  if (TARGET_POWERPC64)\n+    builtin_define (\"_ARCH_PPC64\");\n+  if (! TARGET_POWER && ! TARGET_POWER2 && ! TARGET_POWERPC)\n+    builtin_define (\"_ARCH_COM\");\n+  if (TARGET_ALTIVEC)\n+    builtin_define (\"__ALTIVEC__\");\n+  if (TARGET_SOFT_FLOAT)\n+    builtin_define (\"_SOFT_FLOAT\");\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      builtin_define (\"__BIG_ENDIAN__\");\n+      builtin_define (\"_BIG_ENDIAN\");\n+      builtin_assert (\"machine=bigendian\");\n+    }\n+  else\n+    {\n+      builtin_define (\"__LITTLE_ENDIAN__\");\n+      builtin_define (\"_LITTLE_ENDIAN\");\n+      builtin_assert (\"machine=littleendian\");\n+    }\n+  if (TARGET_LONG_DOUBLE_128)\n+    builtin_define (\"__LONG_DOUBLE_128__\");\n+\n+  switch (rs6000_current_abi)\n+    {\n+    case ABI_V4:\n+      builtin_define (\"_CALL_SYSV\");\n+      break;\n+    case ABI_AIX_NODESC:\n+      builtin_define (\"_CALL_AIX\");\n+      break;\n+    case ABI_AIX:\n+      builtin_define (\"_CALL_AIXDESC\");\n+      builtin_define (\"_CALL_AIX\");\n+      break;\n+    case ABI_DARWIN:\n+      builtin_define (\"_CALL_DARWIN\");\n+      break;\n+    }\n+}"}, {"sha": "92a2f35d48098a5828ec1c9f0b3a2a60b8295438", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -183,8 +183,11 @@ extern void debug_stack_info PARAMS ((rs6000_stack_t *));\n \n extern void machopic_output_stub PARAMS ((FILE *, const char *, const char *));\n \n+/* Declare functions in rs6000-c.c */\n+\n #ifdef GCC_CPPLIB_H\n extern void rs6000_pragma_longcall PARAMS ((cpp_reader *));\n+extern void rs6000_cpu_cpp_builtins PARAMS ((cpp_reader *));\n #endif\n \n #endif  /* rs6000-protos.h */"}, {"sha": "2d8b9244431958996de3cf1e84028aef28366567", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 7, "deletions": 46, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -46,48 +46,6 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_CPU_DEFAULT ((char *)0)\n #endif\n \n-/* Common CPP definitions used by CPP_SPEC among the various targets\n-   for handling -mcpu=xxx switches.  */\n-#define CPP_CPU_SPEC \\\n-\"%{!mcpu*: \\\n-  %{mpower: %{!mpower2: -D_ARCH_PWR}} \\\n-  %{mpower2: -D_ARCH_PWR2} \\\n-  %{mpowerpc*: -D_ARCH_PPC} \\\n-  %{mno-power: %{!mpowerpc*: -D_ARCH_COM}} \\\n-  %{!mno-power: %{!mpower2: %(cpp_default)}}} \\\n-%{mcpu=common: -D_ARCH_COM} \\\n-%{mcpu=power: -D_ARCH_PWR} \\\n-%{mcpu=power2: -D_ARCH_PWR2} \\\n-%{mcpu=power3: -D_ARCH_PPC} \\\n-%{mcpu=power4: -D_ARCH_PPC} \\\n-%{mcpu=powerpc: -D_ARCH_PPC} \\\n-%{mcpu=rios: -D_ARCH_PWR} \\\n-%{mcpu=rios1: -D_ARCH_PWR} \\\n-%{mcpu=rios2: -D_ARCH_PWR2} \\\n-%{mcpu=rsc: -D_ARCH_PWR} \\\n-%{mcpu=rsc1: -D_ARCH_PWR} \\\n-%{mcpu=401: -D_ARCH_PPC} \\\n-%{mcpu=403: -D_ARCH_PPC} \\\n-%{mcpu=405: -D_ARCH_PPC} \\\n-%{mcpu=505: -D_ARCH_PPC} \\\n-%{mcpu=601: -D_ARCH_PPC -D_ARCH_PWR} \\\n-%{mcpu=602: -D_ARCH_PPC} \\\n-%{mcpu=603: -D_ARCH_PPC} \\\n-%{mcpu=603e: -D_ARCH_PPC} \\\n-%{mcpu=ec603e: -D_ARCH_PPC} \\\n-%{mcpu=604: -D_ARCH_PPC} \\\n-%{mcpu=604e: -D_ARCH_PPC} \\\n-%{mcpu=620: -D_ARCH_PPC} \\\n-%{mcpu=740: -D_ARCH_PPC} \\\n-%{mcpu=7400: -D_ARCH_PPC} \\\n-%{mcpu=7450: -D_ARCH_PPC} \\\n-%{mcpu=750: -D_ARCH_PPC} \\\n-%{mcpu=801: -D_ARCH_PPC} \\\n-%{mcpu=821: -D_ARCH_PPC} \\\n-%{mcpu=823: -D_ARCH_PPC} \\\n-%{mcpu=860: -D_ARCH_PPC} \\\n-%{maltivec: -D__ALTIVEC__}\"\n-\n /* Common ASM definitions used by ASM_SPEC among the various targets\n    for handling -mcpu=xxx switches.  */\n #define ASM_CPU_SPEC \\\n@@ -148,7 +106,6 @@ Boston, MA 02111-1307, USA.  */\n #define SUBTARGET_EXTRA_SPECS\n \n #define EXTRA_SPECS\t\t\t\t\t\t\t\\\n-  { \"cpp_cpu\",\t\t\tCPP_CPU_SPEC },\t\t\t\t\\\n   { \"cpp_default\",\t\tCPP_DEFAULT_SPEC },\t\t\t\\\n   { \"asm_cpu\",\t\t\tASM_CPU_SPEC },\t\t\t\t\\\n   { \"asm_default\",\t\tASM_DEFAULT_SPEC },\t\t\t\\\n@@ -494,15 +451,19 @@ extern int rs6000_default_long_calls;\n /* Define this to change the optimizations performed by default.  */\n #define OPTIMIZATION_OPTIONS(LEVEL,SIZE) optimization_options(LEVEL,SIZE)\n \n+/* Show we can debug even without a frame pointer.  */\n+#define CAN_DEBUG_WITHOUT_FP\n+\n /* Target pragma.  */\n #define REGISTER_TARGET_PRAGMAS(PFILE) do { \\\n   cpp_register_pragma (PFILE, 0, \"longcall\", rs6000_pragma_longcall); \\\n } while (0)\n \n-/* Show we can debug even without a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n+/* Target #defines.  */\n+#define TARGET_CPU_CPP_BUILTINS() \\\n+  rs6000_cpu_cpp_builtins (pfile)\n \f\n-/* target machine storage layout */\n+/* Target machine storage layout.  */\n \n /* Define this macro if it is advisable to hold scalars in registers\n    in a wider mode than that declared by the program.  In such cases,"}, {"sha": "c0dc10d66b567c8e05fa0de0608f5b60cf2e807d", "filename": "gcc/config/rs6000/softfloat.h", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5c400a9a3a46787b873f63c7bcd0d933e3e06b/gcc%2Fconfig%2Frs6000%2Fsoftfloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5c400a9a3a46787b873f63c7bcd0d933e3e06b/gcc%2Fconfig%2Frs6000%2Fsoftfloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsoftfloat.h?ref=fc5c400a9a3a46787b873f63c7bcd0d933e3e06b", "patch": "@@ -1,24 +0,0 @@\n-/* Target definitions for GNU compiler for PowerPC defaulting to -msoft-float\n-   Copyright (C) 2001\n-   Free Software Foundation, Inc.\n-   Contributed by Red Hat Inc.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#undef CPP_FLOAT_DEFAULT_SPEC\n-#define CPP_FLOAT_DEFAULT_SPEC \"-D_SOFT_FLOAT\""}, {"sha": "bb8538540d801294fa72ab95ae24bbb1738bd482", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 57, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -34,10 +34,6 @@ Boston, MA 02111-1307, USA.  */\n #undef\tASM_DEFAULT_SPEC\n #define\tASM_DEFAULT_SPEC \"-mppc\"\n \n-/* Override rs6000.h definition.  */\n-#undef\tCPP_DEFAULT_SPEC\n-#define\tCPP_DEFAULT_SPEC \"-D_ARCH_PPC\"\n-\n /* Small data support types.  */\n enum rs6000_sdata_type {\n   SDATA_NONE,\t\t\t/* No small data support.  */\n@@ -969,55 +965,11 @@ do {\t\t\t\t\t\t\\\n #define CPP_SYSV_SPEC \\\n \"%{mrelocatable*: -D_RELOCATABLE} \\\n %{fpic: -D__PIC__=1 -D__pic__=1} \\\n-%{!fpic: %{fPIC: -D__PIC__=2 -D__pic__=2}} \\\n-%{mlong-double-128: -D__LONG_DOUBLE_128__=1} \\\n-%{!mlong-double-64: %(cpp_longdouble_default)} \\\n-%{mcall-sysv: -D_CALL_SYSV} \\\n-%{mcall-aix: -D_CALL_AIX} %{mcall-aixdesc: -D_CALL_AIX -D_CALL_AIXDESC} \\\n-%{!mcall-sysv: %{!mcall-aix: %{!mcall-aixdesc: %(cpp_sysv_default) }}} \\\n-%{msoft-float: -D_SOFT_FLOAT} \\\n-%{!msoft-float: %{!mhard-float: \\\n-    %{mcpu=401: -D_SOFT_FLOAT} \\\n-    %{mcpu=403: -D_SOFT_FLOAT} \\\n-    %{mcpu=405: -D_SOFT_FLOAT} \\\n-    %{mcpu=ec603e: -D_SOFT_FLOAT} \\\n-    %{mcpu=801: -D_SOFT_FLOAT} \\\n-    %{mcpu=821: -D_SOFT_FLOAT} \\\n-    %{mcpu=823: -D_SOFT_FLOAT} \\\n-    %{mcpu=860: -D_SOFT_FLOAT} \\\n-    %{!mcpu*: %(cpp_float_default) }}}\"\n-\n-/* Whether floating point is disabled by default.  */\n-#define\tCPP_FLOAT_DEFAULT_SPEC \"\"\n-\n-/* Whether 'long double' is 128 bits by default.  */\n-#define\tCPP_LONGDOUBLE_DEFAULT_SPEC \"\"\n-\n-#define\tCPP_SYSV_DEFAULT_SPEC \"-D_CALL_SYSV\"\n-\n-#define CPP_ENDIAN_BIG_SPEC \"-D_BIG_ENDIAN -D__BIG_ENDIAN__ -Amachine=bigendian\"\n-\n-#define CPP_ENDIAN_LITTLE_SPEC \"-D_LITTLE_ENDIAN -D__LITTLE_ENDIAN__ -Amachine=littleendian\"\n-\n-#define\tCPP_ENDIAN_SPEC \\\n-\"%{mlittle: %(cpp_endian_little) } \\\n-%{mlittle-endian: %(cpp_endian_little) } \\\n-%{mbig: %(cpp_endian_big) } \\\n-%{mbig-endian: %(cpp_endian_big) } \\\n-%{!mlittle: %{!mlittle-endian: %{!mbig: %{!mbig-endian: \\\n-    %{mcall-freebsd: %(cpp_endian_big) } \\\n-    %{mcall-linux: %(cpp_endian_big) } \\\n-    %{mcall-gnu: %(cpp_endian_big) } \\\n-    %{mcall-netbsd: %(cpp_endian_big) } \\\n-    %{mcall-i960-old: %(cpp_endian_little) } \\\n-    %{mcall-aixdesc:  %(cpp_endian_big) } \\\n-    %{!mcall-linux: %{!mcall-gnu: %{!mcall-freebsd: %{!mcall-netbsd: %{!mcall-aixdesc: %(cpp_endian_default) }}}}}}}}}\"\n-\n-#define\tCPP_ENDIAN_DEFAULT_SPEC \"%(cpp_endian_big)\"\n+%{!fpic: %{fPIC: -D__PIC__=2 -D__pic__=2}}\"\n \n /* Override rs6000.h definition.  */\n #undef\tCPP_SPEC\n-#define\tCPP_SPEC \"%{posix: -D_POSIX_SOURCE} %(cpp_sysv) %(cpp_endian) %(cpp_cpu) \\\n+#define\tCPP_SPEC \"%{posix: -D_POSIX_SOURCE} %(cpp_sysv) \\\n %{mads: %(cpp_os_ads) } \\\n %{myellowknife: %(cpp_os_yellowknife) } \\\n %{mmvme: %(cpp_os_mvme) } \\\n@@ -1323,9 +1275,6 @@ ncrtn.o%s\"\n #undef\tSUBTARGET_EXTRA_SPECS\n #define\tSUBTARGET_EXTRA_SPECS\t\t\t\t\t\t\\\n   { \"cpp_sysv\",\t\t\tCPP_SYSV_SPEC },\t\t\t\\\n-  { \"cpp_sysv_default\",\t\tCPP_SYSV_DEFAULT_SPEC },\t\t\\\n-  { \"cpp_endian_default\",\tCPP_ENDIAN_DEFAULT_SPEC },\t\t\\\n-  { \"cpp_endian\",\t\tCPP_ENDIAN_SPEC },\t\t\t\\\n   { \"crtsavres_default\",        CRTSAVRES_DEFAULT_SPEC },              \\\n   { \"lib_ads\",\t\t\tLIB_ADS_SPEC },\t\t\t\t\\\n   { \"lib_yellowknife\",\t\tLIB_YELLOWKNIFE_SPEC },\t\t\t\\\n@@ -1390,10 +1339,6 @@ ncrtn.o%s\"\n   { \"cc1_endian_big\",\t\tCC1_ENDIAN_BIG_SPEC },\t\t\t\\\n   { \"cc1_endian_little\",\tCC1_ENDIAN_LITTLE_SPEC },\t\t\\\n   { \"cc1_endian_default\",\tCC1_ENDIAN_DEFAULT_SPEC },\t\t\\\n-  { \"cpp_endian_big\",\t\tCPP_ENDIAN_BIG_SPEC },\t\t\t\\\n-  { \"cpp_endian_little\",\tCPP_ENDIAN_LITTLE_SPEC },\t\t\\\n-  { \"cpp_float_default\",\tCPP_FLOAT_DEFAULT_SPEC },\t\t\\\n-  { \"cpp_longdouble_default\",\tCPP_LONGDOUBLE_DEFAULT_SPEC },\t\t\\\n   { \"cpp_os_ads\",\t\tCPP_OS_ADS_SPEC },\t\t\t\\\n   { \"cpp_os_yellowknife\",\tCPP_OS_YELLOWKNIFE_SPEC },\t\t\\\n   { \"cpp_os_mvme\",\t\tCPP_OS_MVME_SPEC },\t\t\t\\"}, {"sha": "fda84775cc3b3a818d224cddf4e6f631ad9ff8c1", "filename": "gcc/config/rs6000/sysv4le.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Fsysv4le.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Fsysv4le.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4le.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -23,9 +23,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_LITTLE_ENDIAN)\n \n-#undef\tCPP_ENDIAN_DEFAULT_SPEC\n-#define\tCPP_ENDIAN_DEFAULT_SPEC \"%(cpp_endian_little)\"\n-\n #undef\tCC1_ENDIAN_DEFAULT_SPEC\n #define\tCC1_ENDIAN_DEFAULT_SPEC \"%(cc1_endian_little)\"\n "}, {"sha": "79c63eaa26c240778f740630df196bf28d2cc26a", "filename": "gcc/config/rs6000/vxppc.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Fvxppc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4eb375f3e90752a4c189d9a3e08fe36131e474/gcc%2Fconfig%2Frs6000%2Fvxppc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxppc.h?ref=4c4eb375f3e90752a4c189d9a3e08fe36131e474", "patch": "@@ -44,13 +44,6 @@ Boston, MA 02111-1307, USA.  */\n -D__vxworks -D__vxworks__ -Asystem=vxworks -Asystem=embedded \\\n -Acpu=powerpc -Amachine=powerpc\"\n \n-/* Don't define _LITTLE_ENDIAN or _BIG_ENDIAN */\n-#undef\tCPP_ENDIAN_BIG_SPEC\n-#define CPP_ENDIAN_BIG_SPEC \"-D__BIG_ENDIAN__ -Amachine=bigendian\"\n-\n-#undef\tCPP_ENDIAN_LITTLE_SPEC\n-#define CPP_ENDIAN_LITTLE_SPEC \"-D__LITTLE_ENDIAN__ -Amachine=littleendian\"\n-\n /* We use stabs-in-elf for debugging */\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG"}]}