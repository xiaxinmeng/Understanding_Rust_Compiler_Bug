{"sha": "f5d67ede42caa6e1442a4776a4929a8a96907caf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVkNjdlZGU0MmNhYTZlMTQ0MmE0Nzc2YTQ5MjlhOGE5NjkwN2NhZg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-01-20T16:58:15Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-01-20T16:58:15Z"}, "message": "re PR fortran/34861 (ICE in function with entry (and result?))\n\n2008-01-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34861\n\t* resolve.c (resolve_entries): Do not do an array bounds check\n\tif the result symbols are the same.\n\n\tPR fortran/34854\n\t* module.c (read_module) : Hide the symtree of the previous\n\tversion of the symbol if this symbol is renamed.\n\n2008-01-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34784\n\t* gfortran.dg/mapping_2.f90: Correct ubound expression for h4.\n\n\tPR fortran/34861\n\t* gfortran.dg/entry_array_specs_3.f90: New test.\n\n\tPR fortran/34854\n\t* gfortran.dg/use_rename_1.f90: New test.\n\nFrom-SVN: r131679", "tree": {"sha": "dd7f7e6e4030beee514d48db62d509810015d5dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd7f7e6e4030beee514d48db62d509810015d5dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5d67ede42caa6e1442a4776a4929a8a96907caf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d67ede42caa6e1442a4776a4929a8a96907caf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5d67ede42caa6e1442a4776a4929a8a96907caf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d67ede42caa6e1442a4776a4929a8a96907caf/comments", "author": null, "committer": null, "parents": [{"sha": "bdf8f544b6775a6283d8f4cafcf50dd448e7be59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf8f544b6775a6283d8f4cafcf50dd448e7be59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdf8f544b6775a6283d8f4cafcf50dd448e7be59"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "86b028231b9a598eb39025e7f1aeed2c22bb7f26", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f5d67ede42caa6e1442a4776a4929a8a96907caf", "patch": "@@ -1,3 +1,13 @@\n+2008-01-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34861\n+\t* resolve.c (resolve_entries): Do not do an array bounds check\n+\tif the result symbols are the same.\n+\n+\tPR fortran/34854\n+\t* module.c (read_module) : Hide the symtree of the previous\n+\tversion of the symbol if this symbol is renamed.\n+\n 2008-01-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34784"}, {"sha": "fe57b9d27fe2b3eeb45cb083f15b6b440315a7b5", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=f5d67ede42caa6e1442a4776a4929a8a96907caf", "patch": "@@ -3735,7 +3735,7 @@ read_module (void)\n \n \t      /* Make symtree inaccessible by renaming if the symbol has\n \t\t been added by a USE statement without an ONLY(11.3.2).  */\n-\t      if (st && only_flag\n+\t      if (st && (only_flag || info->u.rsym.renamed)\n \t\t     && !st->n.sym->attr.use_only\n \t\t     && !st->n.sym->attr.use_rename\n \t\t     && st->n.sym->module"}, {"sha": "38f8e647422fc6496bdb3b370a75c416084b84d0", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f5d67ede42caa6e1442a4776a4929a8a96907caf", "patch": "@@ -496,7 +496,8 @@ resolve_entries (gfc_namespace *ns)\n \t      || (el->sym->result->attr.pointer\n \t\t  != ns->entries->sym->result->attr.pointer))\n \t    break;\n-\t  else if (as && fas && gfc_compare_array_spec (as, fas) == 0)\n+\t  else if (as && fas && ns->entries->sym->result != el->sym->result\n+\t\t      && gfc_compare_array_spec (as, fas) == 0)\n \t    gfc_error (\"Function %s at %L has entries with mismatched \"\n \t\t       \"array specifications\", ns->entries->sym->name,\n \t\t       &ns->entries->sym->declared_at);"}, {"sha": "61be064444830d3b19bbb3cb1a54e8aff65a8f13", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5d67ede42caa6e1442a4776a4929a8a96907caf", "patch": "@@ -1,3 +1,14 @@\n+2008-01-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34784\n+\t* gfortran.dg/mapping_2.f90: Correct ubound expression for h4.\n+\n+\tPR fortran/34861\n+\t* gfortran.dg/entry_array_specs_3.f90: New test.\n+\n+\tPR fortran/34854\n+\t* gfortran.dg/use_rename_1.f90: New test.\n+\n 2008-01-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34784"}, {"sha": "b54a27039f335febd1fc4a945cbeda88124b6610", "filename": "gcc/testsuite/gfortran.dg/entry_array_specs_3.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_array_specs_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_array_specs_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_array_specs_3.f90?ref=f5d67ede42caa6e1442a4776a4929a8a96907caf", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+!\n+! PR fortran/34861, in which the test of conformity of the result array bounds\n+! would barf because they are not known at compile time in this case.\n+!\n+! Contributed by Dick Hendrickson <dick.hendrickson@gmail.com>\n+!\n+FUNCTION I_IMFUD0 ( IDA2 , NDS4, NDS3) RESULT(I_IMFUDP)\n+  INTEGER  ::   NDS4, NDS3\n+  INTEGER  ::   IDA2(5,NDS4,NDS3,2)\n+  INTEGER  ::   I_IMFUDP(SIZE(IDA2,1), SIZE(IDA2,2), SIZE(IDA2,3), SIZE(IDA2,4))\n+  ENTRY I_IMFUDX (NDS4, NDS3, IDA2) RESULT(I_IMFUDP)\n+  ENTRY I_IMFUDY (NDS3, NDS4, IDA2) RESULT(I_IMFUDP)\n+  ENTRY I_IMFUDZ (NDS3, IDA2, NDS4) RESULT(I_IMFUDP)\n+  I_IMFUDP = 1-IDA2(:,:,:,::NDS4-NDS3)\n+END FUNCTION"}, {"sha": "a490611174cee1460bd9bcead31f6a46e1137e55", "filename": "gcc/testsuite/gfortran.dg/mapping_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ftestsuite%2Fgfortran.dg%2Fmapping_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ftestsuite%2Fgfortran.dg%2Fmapping_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmapping_2.f90?ref=f5d67ede42caa6e1442a4776a4929a8a96907caf", "patch": "@@ -11,7 +11,7 @@ module test\n       function my_string(x)\n          integer i\n          real, intent(in) :: x(:)\n-         character(0) h4(1:minval([(1,i=1,0)],1))\n+         character(0) h4(1:minval([(i,i=30,32)],15))\n          character(0) sv1(size(x,1):size(h4))\n          character(0) sv2(2*lbound(sv1,1):size(h4))\n          character(lbound(sv2,1)-3) my_string"}, {"sha": "01645f678b60c97ba9d938d91a3ef7a6a6068542", "filename": "gcc/testsuite/gfortran.dg/use_rename_1.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d67ede42caa6e1442a4776a4929a8a96907caf/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_1.f90?ref=f5d67ede42caa6e1442a4776a4929a8a96907caf", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! Tests the fix for PR34854, in which the second of the two subroutines would fail\n+! because the the type declaration of nmoltype_phase would incorrectly conflict\n+! with the type given to the module variable of the same name.\n+!\n+! Contributed by Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n+!\n+module common_init_conf\n+  integer, dimension(2) :: Nmoltype_phase\n+end module common_init_conf\n+\n+subroutine read_initial_config_nml1()\n+  use common_init_conf, nmoltype_phase_com => nmoltype_phase\n+  use common_init_conf\n+  implicit none\n+  integer :: nmoltype_phase\n+  namelist /confNmoltypePhase/ nmoltype_phase\n+end subroutine read_initial_config_nml1\n+\n+subroutine read_initial_config_nml2()\n+  use common_init_conf\n+  use common_init_conf, nmoltype_phase_com => nmoltype_phase\n+  implicit none\n+  integer :: nmoltype_phase\n+  namelist /confNmoltypePhase/ nmoltype_phase\n+end subroutine read_initial_config_nml2\n+! { dg-final { cleanup-modules \"common_init_conf\" } }"}]}