{"sha": "aeb83f098d6740d61580014ab78d33abba1168fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViODNmMDk4ZDY3NDBkNjE1ODAwMTRhYjc4ZDMzYWJiYTExNjhmYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-30T08:52:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-30T08:52:32Z"}, "message": "tree-affine.h (print_aff): Remove.\n\n2012-03-30  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-affine.h (print_aff): Remove.\n\t* tree-affine.c (print_aff): Make static.\n\t* tree-data-ref.h (access_matrix_get_index_for_parameter): Remove.\n\t(get_references_in_stmt): Likewise.\n\t(print_direction_vector): Likewise.\n\t(print_dir_vectors): Likewise.\n\t(print_dist_vectors): Likewise.\n\t(dump_subscript): Likewise.\n\t(dump_ddrs): Likewise.\n\t(dump_dist_dir_vectors): Likewise.\n\t(dump_data_references): Likewise.\n\t(dump_data_dependence_relation): Likewise.\n\t(dump_data_dependence_direction): Likewise.\n\t(dump_rdg_vertex): Likewise.\n\t(dump_rdg_component): Likewise.\n\t(debug_ddrs): Declare.\n\t(struct data_ref_loc_d): Move ...\n\t* tree-data-ref.c (struct data_ref_loc_d): ... here.\n\t(get_references_in_stmt): Make static.\n\t(dump_data_references): Likewise.\n\t(dump_subscript): Likewise.\n\t(print_direction_vector): Likewise.\n\t(print_dir_vectors): Likewise.\n\t(print_dist_vectors): Likewise.\n\t(dump_data_dependence_relation): Likewise.\n\t(dump_dist_dir_vectors): Likewise.\n\t(dump_ddrs): Likewise.\n\t(dump_rdg_vertex): Likewise.\n\t(dump_rdg_component): Likewise.\n\t(debug_ddrs): New function.\n\t(access_matrix_get_index_for_parameter): Remove.\n\nFrom-SVN: r185994", "tree": {"sha": "365ac257e1633f429586b1006dd08eb0fb6d08f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/365ac257e1633f429586b1006dd08eb0fb6d08f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeb83f098d6740d61580014ab78d33abba1168fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb83f098d6740d61580014ab78d33abba1168fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeb83f098d6740d61580014ab78d33abba1168fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb83f098d6740d61580014ab78d33abba1168fa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9268e550b893f065a23e73e76d911cea5480df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9268e550b893f065a23e73e76d911cea5480df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9268e550b893f065a23e73e76d911cea5480df9"}], "stats": {"total": 214, "additions": 90, "deletions": 124}, "files": [{"sha": "6518c699241e31581876d32fc0cbd4b51d618a9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb83f098d6740d61580014ab78d33abba1168fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb83f098d6740d61580014ab78d33abba1168fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aeb83f098d6740d61580014ab78d33abba1168fa", "patch": "@@ -1,3 +1,37 @@\n+2012-03-30  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-affine.h (print_aff): Remove.\n+\t* tree-affine.c (print_aff): Make static.\n+\t* tree-data-ref.h (access_matrix_get_index_for_parameter): Remove.\n+\t(get_references_in_stmt): Likewise.\n+\t(print_direction_vector): Likewise.\n+\t(print_dir_vectors): Likewise.\n+\t(print_dist_vectors): Likewise.\n+\t(dump_subscript): Likewise.\n+\t(dump_ddrs): Likewise.\n+\t(dump_dist_dir_vectors): Likewise.\n+\t(dump_data_references): Likewise.\n+\t(dump_data_dependence_relation): Likewise.\n+\t(dump_data_dependence_direction): Likewise.\n+\t(dump_rdg_vertex): Likewise.\n+\t(dump_rdg_component): Likewise.\n+\t(debug_ddrs): Declare.\n+\t(struct data_ref_loc_d): Move ...\n+\t* tree-data-ref.c (struct data_ref_loc_d): ... here.\n+\t(get_references_in_stmt): Make static.\n+\t(dump_data_references): Likewise.\n+\t(dump_subscript): Likewise.\n+\t(print_direction_vector): Likewise.\n+\t(print_dir_vectors): Likewise.\n+\t(print_dist_vectors): Likewise.\n+\t(dump_data_dependence_relation): Likewise.\n+\t(dump_dist_dir_vectors): Likewise.\n+\t(dump_ddrs): Likewise.\n+\t(dump_rdg_vertex): Likewise.\n+\t(dump_rdg_component): Likewise.\n+\t(debug_ddrs): New function.\n+\t(access_matrix_get_index_for_parameter): Remove.\n+\n 2012-03-30  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/vms/vms.c (VMS_CRTL_FLOAT32): Rename."}, {"sha": "7bb1645d4255f34fffab67e7f27ef5337ecca8ec", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb83f098d6740d61580014ab78d33abba1168fa/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb83f098d6740d61580014ab78d33abba1168fa/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=aeb83f098d6740d61580014ab78d33abba1168fa", "patch": "@@ -812,7 +812,7 @@ aff_combination_constant_multiple_p (aff_tree *val, aff_tree *div,\n \n /* Prints the affine VAL to the FILE. */\n \n-void\n+static void\n print_aff (FILE *file, aff_tree *val)\n {\n   unsigned i;"}, {"sha": "4d3a49df03258d0c32f77dcdf23a046bfe771283", "filename": "gcc/tree-affine.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb83f098d6740d61580014ab78d33abba1168fa/gcc%2Ftree-affine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb83f098d6740d61580014ab78d33abba1168fa/gcc%2Ftree-affine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.h?ref=aeb83f098d6740d61580014ab78d33abba1168fa", "patch": "@@ -79,5 +79,4 @@ void free_affine_expand_cache (struct pointer_map_t **);\n bool aff_comb_cannot_overlap_p (aff_tree *, double_int, double_int);\n \n /* Debugging functions.  */\n-void print_aff (FILE *, aff_tree *);\n void debug_aff (aff_tree *);"}, {"sha": "5dcafd3276567efdd6e0b1a48cb6aa1d6f7730d2", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 54, "deletions": 91, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb83f098d6740d61580014ab78d33abba1168fa/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb83f098d6740d61580014ab78d33abba1168fa/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=aeb83f098d6740d61580014ab78d33abba1168fa", "patch": "@@ -140,7 +140,7 @@ int_divides_p (int a, int b)\n \n /* Dump into FILE all the data references from DATAREFS.  */\n \n-void\n+static void\n dump_data_references (FILE *file, VEC (data_reference_p, heap) *datarefs)\n {\n   unsigned int i;\n@@ -158,27 +158,6 @@ debug_data_references (VEC (data_reference_p, heap) *datarefs)\n   dump_data_references (stderr, datarefs);\n }\n \n-/* Dump to STDERR all the dependence relations from DDRS.  */\n-\n-DEBUG_FUNCTION void\n-debug_data_dependence_relations (VEC (ddr_p, heap) *ddrs)\n-{\n-  dump_data_dependence_relations (stderr, ddrs);\n-}\n-\n-/* Dump into FILE all the dependence relations from DDRS.  */\n-\n-void\n-dump_data_dependence_relations (FILE *file,\n-\t\t\t\tVEC (ddr_p, heap) *ddrs)\n-{\n-  unsigned int i;\n-  struct data_dependence_relation *ddr;\n-\n-  FOR_EACH_VEC_ELT (ddr_p, ddrs, i, ddr)\n-    dump_data_dependence_relation (file, ddr);\n-}\n-\n /* Print to STDERR the data_reference DR.  */\n \n DEBUG_FUNCTION void\n@@ -253,7 +232,7 @@ dump_conflict_function (FILE *outf, conflict_function *cf)\n \n /* Dump function for a SUBSCRIPT structure.  */\n \n-void\n+static void\n dump_subscript (FILE *outf, struct subscript *subscript)\n {\n   conflict_function *cf = SUB_CONFLICTS_IN_A (subscript);\n@@ -286,7 +265,7 @@ dump_subscript (FILE *outf, struct subscript *subscript)\n \n /* Print the classic direction vector DIRV to OUTF.  */\n \n-void\n+static void\n print_direction_vector (FILE *outf,\n \t\t\tlambda_vector dirv,\n \t\t\tint length)\n@@ -331,7 +310,7 @@ print_direction_vector (FILE *outf,\n \n /* Print a vector of direction vectors.  */\n \n-void\n+static void\n print_dir_vectors (FILE *outf, VEC (lambda_vector, heap) *dir_vects,\n \t\t   int length)\n {\n@@ -356,9 +335,9 @@ print_lambda_vector (FILE * outfile, lambda_vector vector, int n)\n \n /* Print a vector of distance vectors.  */\n \n-void\n-print_dist_vectors  (FILE *outf, VEC (lambda_vector, heap) *dist_vects,\n-\t\t     int length)\n+static void\n+print_dist_vectors (FILE *outf, VEC (lambda_vector, heap) *dist_vects,\n+\t\t    int length)\n {\n   unsigned j;\n   lambda_vector v;\n@@ -367,17 +346,9 @@ print_dist_vectors  (FILE *outf, VEC (lambda_vector, heap) *dist_vects,\n     print_lambda_vector (outf, v, length);\n }\n \n-/* Debug version.  */\n-\n-DEBUG_FUNCTION void\n-debug_data_dependence_relation (struct data_dependence_relation *ddr)\n-{\n-  dump_data_dependence_relation (stderr, ddr);\n-}\n-\n /* Dump function for a DATA_DEPENDENCE_RELATION structure.  */\n \n-void\n+static void\n dump_data_dependence_relation (FILE *outf,\n \t\t\t       struct data_dependence_relation *ddr)\n {\n@@ -450,53 +421,41 @@ dump_data_dependence_relation (FILE *outf,\n   fprintf (outf, \")\\n\");\n }\n \n-/* Dump function for a DATA_DEPENDENCE_DIRECTION structure.  */\n+/* Debug version.  */\n \n-void\n-dump_data_dependence_direction (FILE *file,\n-\t\t\t\tenum data_dependence_direction dir)\n+DEBUG_FUNCTION void\n+debug_data_dependence_relation (struct data_dependence_relation *ddr)\n {\n-  switch (dir)\n-    {\n-    case dir_positive:\n-      fprintf (file, \"+\");\n-      break;\n-\n-    case dir_negative:\n-      fprintf (file, \"-\");\n-      break;\n-\n-    case dir_equal:\n-      fprintf (file, \"=\");\n-      break;\n+  dump_data_dependence_relation (stderr, ddr);\n+}\n \n-    case dir_positive_or_negative:\n-      fprintf (file, \"+-\");\n-      break;\n+/* Dump into FILE all the dependence relations from DDRS.  */\n \n-    case dir_positive_or_equal:\n-      fprintf (file, \"+=\");\n-      break;\n+void\n+dump_data_dependence_relations (FILE *file,\n+\t\t\t\tVEC (ddr_p, heap) *ddrs)\n+{\n+  unsigned int i;\n+  struct data_dependence_relation *ddr;\n \n-    case dir_negative_or_equal:\n-      fprintf (file, \"-=\");\n-      break;\n+  FOR_EACH_VEC_ELT (ddr_p, ddrs, i, ddr)\n+    dump_data_dependence_relation (file, ddr);\n+}\n \n-    case dir_star:\n-      fprintf (file, \"*\");\n-      break;\n+/* Dump to STDERR all the dependence relations from DDRS.  */\n \n-    default:\n-      break;\n-    }\n+DEBUG_FUNCTION void\n+debug_data_dependence_relations (VEC (ddr_p, heap) *ddrs)\n+{\n+  dump_data_dependence_relations (stderr, ddrs);\n }\n \n /* Dumps the distance and direction vectors in FILE.  DDRS contains\n    the dependence relations, and VECT_SIZE is the size of the\n    dependence vectors, or in other words the number of loops in the\n    considered nest.  */\n \n-void\n+static void\n dump_dist_dir_vectors (FILE *file, VEC (ddr_p, heap) *ddrs)\n {\n   unsigned int i, j;\n@@ -526,7 +485,7 @@ dump_dist_dir_vectors (FILE *file, VEC (ddr_p, heap) *ddrs)\n \n /* Dumps the data dependence relations DDRS in FILE.  */\n \n-void\n+static void\n dump_ddrs (FILE *file, VEC (ddr_p, heap) *ddrs)\n {\n   unsigned int i;\n@@ -538,6 +497,12 @@ dump_ddrs (FILE *file, VEC (ddr_p, heap) *ddrs)\n   fprintf (file, \"\\n\\n\");\n }\n \n+DEBUG_FUNCTION void\n+debug_ddrs (VEC (ddr_p, heap) *ddrs)\n+{\n+  dump_ddrs (stderr, ddrs);\n+}\n+\n /* Helper function for split_constant_offset.  Expresses OP0 CODE OP1\n    (the type of the result is TYPE) as VAR + OFF, where OFF is a nonzero\n    constant of type ssizetype, and returns true.  If we cannot do this\n@@ -4236,10 +4201,24 @@ compute_all_dependences (VEC (data_reference_p, heap) *datarefs,\n   return true;\n }\n \n+/* Describes a location of a memory reference.  */\n+\n+typedef struct data_ref_loc_d\n+{\n+    /* Position of the memory reference.  */\n+    tree *pos;\n+\n+      /* True if the memory reference is read.  */\n+      bool is_read;\n+} data_ref_loc;\n+\n+DEF_VEC_O (data_ref_loc);\n+DEF_VEC_ALLOC_O (data_ref_loc, heap);\n+\n /* Stores the locations of memory references in STMT to REFERENCES.  Returns\n    true if STMT clobbers memory, false otherwise.  */\n \n-bool\n+static bool\n get_references_in_stmt (gimple stmt, VEC (data_ref_loc, heap) **references)\n {\n   bool clobbers_memory = false;\n@@ -4708,7 +4687,7 @@ free_data_refs (VEC (data_reference_p, heap) *datarefs)\n \n /* Dump vertex I in RDG to FILE.  */\n \n-void\n+static void\n dump_rdg_vertex (FILE *file, struct graph *rdg, int i)\n {\n   struct vertex *v = &(rdg->vertices[i]);\n@@ -4744,7 +4723,8 @@ debug_rdg_vertex (struct graph *rdg, int i)\n /* Dump component C of RDG to FILE.  If DUMPED is non-null, set the\n    dumped vertices to that bitmap.  */\n \n-void dump_rdg_component (FILE *file, struct graph *rdg, int c, bitmap dumped)\n+static void\n+dump_rdg_component (FILE *file, struct graph *rdg, int c, bitmap dumped)\n {\n   int i;\n \n@@ -5401,20 +5381,3 @@ remove_similar_memory_refs (VEC (gimple, heap) **stmts)\n   htab_delete (seen);\n }\n \n-/* Returns the index of PARAMETER in the parameters vector of the\n-   ACCESS_MATRIX.  If PARAMETER does not exist return -1.  */\n-\n-int\n-access_matrix_get_index_for_parameter (tree parameter,\n-\t\t\t\t       struct access_matrix *access_matrix)\n-{\n-  int i;\n-  VEC (tree,heap) *lambda_parameters = AM_PARAMETERS (access_matrix);\n-  tree lambda_parameter;\n-\n-  FOR_EACH_VEC_ELT (tree, lambda_parameters, i, lambda_parameter)\n-    if (lambda_parameter == parameter)\n-      return i + AM_NB_INDUCTION_VARS (access_matrix);\n-\n-  return -1;\n-}"}, {"sha": "41a20d74206fa55443e2f9c43ae9fb5284fe8099", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb83f098d6740d61580014ab78d33abba1168fa/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb83f098d6740d61580014ab78d33abba1168fa/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=aeb83f098d6740d61580014ab78d33abba1168fa", "patch": "@@ -169,8 +169,6 @@ am_vector_index_for_loop (struct access_matrix *access_matrix, int loop_num)\n   gcc_unreachable();\n }\n \n-int access_matrix_get_index_for_parameter (tree, struct access_matrix *);\n-\n struct data_reference\n {\n   /* A pointer to the statement that contains this DR.  */\n@@ -371,22 +369,6 @@ DEF_VEC_ALLOC_P(ddr_p,heap);\n #define DDR_REVERSED_P(DDR) DDR->reversed_p\n \n \f\n-\n-/* Describes a location of a memory reference.  */\n-\n-typedef struct data_ref_loc_d\n-{\n-  /* Position of the memory reference.  */\n-  tree *pos;\n-\n-  /* True if the memory reference is read.  */\n-  bool is_read;\n-} data_ref_loc;\n-\n-DEF_VEC_O (data_ref_loc);\n-DEF_VEC_ALLOC_O (data_ref_loc, heap);\n-\n-bool get_references_in_stmt (gimple, VEC (data_ref_loc, heap) **);\n bool dr_analyze_innermost (struct data_reference *, struct loop *);\n extern bool compute_data_dependences_for_loop (struct loop *, bool,\n \t\t\t\t\t       VEC (loop_p, heap) **,\n@@ -395,23 +377,13 @@ extern bool compute_data_dependences_for_loop (struct loop *, bool,\n extern bool compute_data_dependences_for_bb (basic_block, bool,\n                                              VEC (data_reference_p, heap) **,\n                                              VEC (ddr_p, heap) **);\n-extern void print_direction_vector (FILE *, lambda_vector, int);\n-extern void print_dir_vectors (FILE *, VEC (lambda_vector, heap) *, int);\n-extern void print_dist_vectors (FILE *, VEC (lambda_vector, heap) *, int);\n-extern void dump_subscript (FILE *, struct subscript *);\n-extern void dump_ddrs (FILE *, VEC (ddr_p, heap) *);\n-extern void dump_dist_dir_vectors (FILE *, VEC (ddr_p, heap) *);\n+extern void debug_ddrs (VEC (ddr_p, heap) *);\n extern void dump_data_reference (FILE *, struct data_reference *);\n extern void debug_data_reference (struct data_reference *);\n-extern void dump_data_references (FILE *, VEC (data_reference_p, heap) *);\n extern void debug_data_references (VEC (data_reference_p, heap) *);\n extern void debug_data_dependence_relation (struct data_dependence_relation *);\n-extern void dump_data_dependence_relation (FILE *,\n-\t\t\t\t\t   struct data_dependence_relation *);\n extern void dump_data_dependence_relations (FILE *, VEC (ddr_p, heap) *);\n extern void debug_data_dependence_relations (VEC (ddr_p, heap) *);\n-extern void dump_data_dependence_direction (FILE *,\n-\t\t\t\t\t    enum data_dependence_direction);\n extern void free_dependence_relation (struct data_dependence_relation *);\n extern void free_dependence_relations (VEC (ddr_p, heap) *);\n extern void free_data_ref (data_reference_p);\n@@ -567,9 +539,7 @@ typedef struct rdg_vertex\n #define RDG_MEM_WRITE_STMT(RDG, I) RDGV_HAS_MEM_WRITE (&(RDG->vertices[I]))\n #define RDG_MEM_READS_STMT(RDG, I) RDGV_HAS_MEM_READS (&(RDG->vertices[I]))\n \n-void dump_rdg_vertex (FILE *, struct graph *, int);\n void debug_rdg_vertex (struct graph *, int);\n-void dump_rdg_component (FILE *, struct graph *, int, bitmap);\n void debug_rdg_component (struct graph *, int);\n void dump_rdg (FILE *, struct graph *);\n void debug_rdg (struct graph *);"}]}