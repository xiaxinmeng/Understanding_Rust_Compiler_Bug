{"sha": "e3b6a47f66e30920f97d8206c57bd881e3a175f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiNmE0N2Y2NmUzMDkyMGY5N2Q4MjA2YzU3YmQ4ODFlM2ExNzVmNw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-02-11T06:47:50Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-02-11T06:47:50Z"}, "message": "FileLockImpl.java, [...]: New files.\n\n2003-02-11  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/FileLockImpl.java,\n\tjava/nio/channels/FileLock.java: New files.\n\nFrom-SVN: r62681", "tree": {"sha": "eeb97a715d139a5110fc36f8a9e179ecb223218a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeb97a715d139a5110fc36f8a9e179ecb223218a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b6a47f66e30920f97d8206c57bd881e3a175f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b6a47f66e30920f97d8206c57bd881e3a175f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b6a47f66e30920f97d8206c57bd881e3a175f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b6a47f66e30920f97d8206c57bd881e3a175f7/comments", "author": null, "committer": null, "parents": [{"sha": "bde8b5818bbacb6999d559d8933ef3a5dbe3d94c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde8b5818bbacb6999d559d8933ef3a5dbe3d94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde8b5818bbacb6999d559d8933ef3a5dbe3d94c"}], "stats": {"total": 205, "additions": 205, "deletions": 0}, "files": [{"sha": "8fb09ea7c1bfc89ab9d289fda8aae2133f03909f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b6a47f66e30920f97d8206c57bd881e3a175f7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b6a47f66e30920f97d8206c57bd881e3a175f7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e3b6a47f66e30920f97d8206c57bd881e3a175f7", "patch": "@@ -1,3 +1,8 @@\n+2003-02-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/FileLockImpl.java,\n+\tjava/nio/channels/FileLock.java: New files.\n+\n 2003-02-11  Michael Koch  <konqueror@gmx.de>\n \n \t* java/nio/charset/IllegalCharsetNameException.java"}, {"sha": "2e55f6bb657947e4e6f7c776a1eeba9191e1b432", "filename": "libjava/gnu/java/nio/FileLockImpl.java", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b6a47f66e30920f97d8206c57bd881e3a175f7/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b6a47f66e30920f97d8206c57bd881e3a175f7/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java?ref=e3b6a47f66e30920f97d8206c57bd881e3a175f7", "patch": "@@ -0,0 +1,63 @@\n+/* FileChannelImpl.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.nio;\n+\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public class FileLockImpl extends FileLock\n+{\n+  public FileLockImpl (FileChannel channel, long position, long size,\n+                       boolean shared)\n+  {\n+    super (channel, position, size, shared);\n+  }\n+  \n+  public boolean isValid ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void release ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+}"}, {"sha": "1b4595e5c43f57498ae1cfa3d9c38e5a3deca12d", "filename": "libjava/java/nio/channels/FileLock.java", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b6a47f66e30920f97d8206c57bd881e3a175f7/libjava%2Fjava%2Fnio%2Fchannels%2FFileLock.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b6a47f66e30920f97d8206c57bd881e3a175f7/libjava%2Fjava%2Fnio%2Fchannels%2FFileLock.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FFileLock.java?ref=e3b6a47f66e30920f97d8206c57bd881e3a175f7", "patch": "@@ -0,0 +1,137 @@\n+/* FileLock.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.io.IOException;\n+\n+/**\n+ * @since 1.4\n+ */\n+public abstract class FileLock\n+{\n+  FileChannel channel;\n+  long position;\n+  long size;\n+  boolean shared;\n+  \n+  /**\n+   * Initializes the file lock.\n+   *\n+   * @exception IllegalArgumentException If the preconditions on the parameters do not hold\n+   */\n+  protected FileLock (FileChannel channel, long position, long size,\n+                      boolean shared)\n+  {\n+    if (position < 0 ||\n+        size < 0)\n+      throw new IllegalArgumentException ();\n+\n+    this.channel = channel;\n+    this.position = position;\n+    this.size = size;\n+    this.shared = shared;\n+  }\n+ \n+  /**\n+   * Tells whether or not this lock is valid.\n+   */\n+  public abstract boolean isValid();\n+ \n+  /**\n+   * Releases this lock.\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception ClosedChannelException If the locked channel is no longer open.\n+   */\n+  public abstract void release () throws IOException;\n+  \n+  /**\n+   * Returns the file channel upon whose file this lock is held.\n+   */\n+  public final FileChannel channel ()\n+  {\n+    return channel;\n+  }\n+\n+  /**\n+   * Tells whether this lock is shared.\n+   */\n+  public final boolean isShared ()\n+  {\n+    return shared;\n+  }    \n+\n+  /**\n+   * Tells whether or not this lock overlaps the given lock range.\n+   */\n+  public final boolean overlaps (long position, long size)\n+  {\n+    if (position > this.position +this.size)\n+      return false;\n+\n+    if (position + size < this.position)\n+      return false;\n+\n+    return true;\n+  }\n+\n+  /**\n+   * Returns the position within the file of the first byte of the\n+   * locked region.\n+   */\n+  public final long position ()\n+  {\n+    return position;\n+  }\n+    \n+  /**\n+   * Returns the size of the locked region in bytes.\n+   */\n+  public final long size ()\n+  {\n+    return size;\n+  }\n+\n+  /**\n+   * Returns a string describing the range, type, and validity of this lock.\n+   */\n+  public final String toString ()\n+  {\n+    return \"file-lock:pos=\" + position + \"size=\" + size;\n+  }\n+}"}]}