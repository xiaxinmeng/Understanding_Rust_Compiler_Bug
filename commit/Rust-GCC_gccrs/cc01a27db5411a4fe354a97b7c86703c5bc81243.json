{"sha": "cc01a27db5411a4fe354a97b7c86703c5bc81243", "node_id": "C_kwDOANBUbNoAKGNjMDFhMjdkYjU0MTFhNGZlMzU0YTk3YjdjODY3MDNjNWJjODEyNDM", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-05T20:05:35Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-05T20:05:35Z"}, "message": "middle-end: Allow backend to expand/split double word compare to 0/-1.\n\nThis patch to the middle-end's RTL expansion reorders the code in\nemit_store_flag_1 so that the backend has more control over how best\nto expand/split double word equality/inequality comparisons against\nzero or minus one.  With the current implementation, the middle-end\nalways decides to lower this idiom during RTL expansion using SUBREGs\nand word mode instructions, without ever consulting the backend's\nmachine description.  Hence on x86_64, a TImode comparison against zero\nis always expanded as:\n\n(parallel [\n  (set (reg:DI 91)\n       (ior:DI (subreg:DI (reg:TI 88) 0)\n               (subreg:DI (reg:TI 88) 8)))\n  (clobber (reg:CC 17 flags))])\n(set (reg:CCZ 17 flags)\n     (compare:CCZ (reg:DI 91)\n                  (const_int 0 [0])))\n\nThis patch, which makes no changes to the code itself, simply reorders\nthe clauses in emit_store_flag_1 so that the middle-end first attempts\nexpansion using the target's doubleword mode cstore optab/expander,\nand only if this fails, falls back to lowering to word mode operations.\nOn x86_64, this allows the expander to produce:\n\n(set (reg:CCZ 17 flags)\n     (compare:CCZ (reg:TI 88)\n                  (const_int 0 [0])))\n\nwhich is a candidate for scalar-to-vector transformations (and\ncombine simplifications etc.).  On targets that don't define a cstore\npattern for doubleword integer modes, there should be no change in\nbehaviour.  For those that do, the current behaviour can be restored\n(if desired) by restricting the expander/insn to not apply when the\ncomparison is EQ or NE, and operand[2] is either const0_rtx or\nconstm1_rtx.\n\nThis change just keeps RTL expansion more consistent (in philosophy).\nFor other doubleword comparisons, such as with operators LT and GT,\nor with constants other than zero or -1, the wishes of the backend\nare respected, and only if the optab expansion fails are the default\nfall-back implementations using narrower integer mode operations\n(and conditional jumps) used.\n\n2022-08-05  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* expmed.cc (emit_store_flag_1): Move code to expand double word\n\tequality and inequality against zero or -1, using word operations,\n\tto after trying to use the backend's cstore<mode>4 optab/expander.", "tree": {"sha": "20c4e5cf2e3c84ea150bfa85d4090c69a7c38ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20c4e5cf2e3c84ea150bfa85d4090c69a7c38ded"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc01a27db5411a4fe354a97b7c86703c5bc81243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc01a27db5411a4fe354a97b7c86703c5bc81243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc01a27db5411a4fe354a97b7c86703c5bc81243", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc01a27db5411a4fe354a97b7c86703c5bc81243/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a644cfdee53275e3d07eff0c2126dc88b87aef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a644cfdee53275e3d07eff0c2126dc88b87aef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a644cfdee53275e3d07eff0c2126dc88b87aef"}], "stats": {"total": 111, "additions": 56, "deletions": 55}, "files": [{"sha": "8d7418be418406e72a895ecddf2dc7fdb950c76c", "filename": "gcc/expmed.cc", "status": "modified", "additions": 56, "deletions": 55, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc01a27db5411a4fe354a97b7c86703c5bc81243/gcc%2Fexpmed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc01a27db5411a4fe354a97b7c86703c5bc81243/gcc%2Fexpmed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.cc?ref=cc01a27db5411a4fe354a97b7c86703c5bc81243", "patch": "@@ -5662,63 +5662,9 @@ emit_store_flag_1 (rtx target, enum rtx_code code, rtx op0, rtx op1,\n       break;\n     }\n \n-  /* If we are comparing a double-word integer with zero or -1, we can\n-     convert the comparison into one involving a single word.  */\n-  scalar_int_mode int_mode;\n-  if (is_int_mode (mode, &int_mode)\n-      && GET_MODE_BITSIZE (int_mode) == BITS_PER_WORD * 2\n-      && (!MEM_P (op0) || ! MEM_VOLATILE_P (op0)))\n-    {\n-      rtx tem;\n-      if ((code == EQ || code == NE)\n-\t  && (op1 == const0_rtx || op1 == constm1_rtx))\n-\t{\n-\t  rtx op00, op01;\n-\n-\t  /* Do a logical OR or AND of the two words and compare the\n-\t     result.  */\n-\t  op00 = simplify_gen_subreg (word_mode, op0, int_mode, 0);\n-\t  op01 = simplify_gen_subreg (word_mode, op0, int_mode, UNITS_PER_WORD);\n-\t  tem = expand_binop (word_mode,\n-\t\t\t      op1 == const0_rtx ? ior_optab : and_optab,\n-\t\t\t      op00, op01, NULL_RTX, unsignedp,\n-\t\t\t      OPTAB_DIRECT);\n-\n-\t  if (tem != 0)\n-\t    tem = emit_store_flag (NULL_RTX, code, tem, op1, word_mode,\n-\t\t\t\t   unsignedp, normalizep);\n-\t}\n-      else if ((code == LT || code == GE) && op1 == const0_rtx)\n-\t{\n-\t  rtx op0h;\n-\n-\t  /* If testing the sign bit, can just test on high word.  */\n-\t  op0h = simplify_gen_subreg (word_mode, op0, int_mode,\n-\t\t\t\t      subreg_highpart_offset (word_mode,\n-\t\t\t\t\t\t\t      int_mode));\n-\t  tem = emit_store_flag (NULL_RTX, code, op0h, op1, word_mode,\n-\t\t\t\t unsignedp, normalizep);\n-\t}\n-      else\n-\ttem = NULL_RTX;\n-\n-      if (tem)\n-\t{\n-\t  if (target_mode == VOIDmode || GET_MODE (tem) == target_mode)\n-\t    return tem;\n-\t  if (!target)\n-\t    target = gen_reg_rtx (target_mode);\n-\n-\t  convert_move (target, tem,\n-\t\t\t!val_signbit_known_set_p (word_mode,\n-\t\t\t\t\t\t  (normalizep ? normalizep\n-\t\t\t\t\t\t   : STORE_FLAG_VALUE)));\n-\t  return target;\n-\t}\n-    }\n-\n   /* If this is A < 0 or A >= 0, we can do this by taking the ones\n      complement of A (for GE) and shifting the sign bit to the low bit.  */\n+  scalar_int_mode int_mode;\n   if (op1 == const0_rtx && (code == LT || code == GE)\n       && is_int_mode (mode, &int_mode)\n       && (normalizep || STORE_FLAG_VALUE == 1\n@@ -5764,6 +5710,7 @@ emit_store_flag_1 (rtx target, enum rtx_code code, rtx op0, rtx op1,\n       return op0;\n     }\n \n+  /* Next try expanding this via the backend's cstore<mode>4.  */\n   mclass = GET_MODE_CLASS (mode);\n   FOR_EACH_MODE_FROM (compare_mode, mode)\n     {\n@@ -5788,6 +5735,60 @@ emit_store_flag_1 (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t}\n     }\n \n+  /* If we are comparing a double-word integer with zero or -1, we can\n+     convert the comparison into one involving a single word.  */\n+  if (is_int_mode (mode, &int_mode)\n+      && GET_MODE_BITSIZE (int_mode) == BITS_PER_WORD * 2\n+      && (!MEM_P (op0) || ! MEM_VOLATILE_P (op0)))\n+    {\n+      rtx tem;\n+      if ((code == EQ || code == NE)\n+\t  && (op1 == const0_rtx || op1 == constm1_rtx))\n+\t{\n+\t  rtx op00, op01;\n+\n+\t  /* Do a logical OR or AND of the two words and compare the\n+\t     result.  */\n+\t  op00 = simplify_gen_subreg (word_mode, op0, int_mode, 0);\n+\t  op01 = simplify_gen_subreg (word_mode, op0, int_mode, UNITS_PER_WORD);\n+\t  tem = expand_binop (word_mode,\n+\t\t\t      op1 == const0_rtx ? ior_optab : and_optab,\n+\t\t\t      op00, op01, NULL_RTX, unsignedp,\n+\t\t\t      OPTAB_DIRECT);\n+\n+\t  if (tem != 0)\n+\t    tem = emit_store_flag (NULL_RTX, code, tem, op1, word_mode,\n+\t\t\t\t   unsignedp, normalizep);\n+\t}\n+      else if ((code == LT || code == GE) && op1 == const0_rtx)\n+\t{\n+\t  rtx op0h;\n+\n+\t  /* If testing the sign bit, can just test on high word.  */\n+\t  op0h = simplify_gen_subreg (word_mode, op0, int_mode,\n+\t\t\t\t      subreg_highpart_offset (word_mode,\n+\t\t\t\t\t\t\t      int_mode));\n+\t  tem = emit_store_flag (NULL_RTX, code, op0h, op1, word_mode,\n+\t\t\t\t unsignedp, normalizep);\n+\t}\n+      else\n+\ttem = NULL_RTX;\n+\n+      if (tem)\n+\t{\n+\t  if (target_mode == VOIDmode || GET_MODE (tem) == target_mode)\n+\t    return tem;\n+\t  if (!target)\n+\t    target = gen_reg_rtx (target_mode);\n+\n+\t  convert_move (target, tem,\n+\t\t\t!val_signbit_known_set_p (word_mode,\n+\t\t\t\t\t\t  (normalizep ? normalizep\n+\t\t\t\t\t\t   : STORE_FLAG_VALUE)));\n+\t  return target;\n+\t}\n+    }\n+\n   return 0;\n }\n "}]}