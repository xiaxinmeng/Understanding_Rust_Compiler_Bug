{"sha": "543b4428214232de8bf9d0377a99b137756b0451", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQzYjQ0MjgyMTQyMzJkZThiZjlkMDM3N2E5OWIxMzc3NTZiMDQ1MQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2007-12-13T10:36:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:36:42Z"}, "message": "tb-alvms.c (struct tb_entry_t, [...]): Revert back to use of Procedure Value instead of Frame Pointer as the...\n\n2007-12-06  Olivier Hainque  <hainque@adacore.com>\n\n\t* tb-alvms.c (struct tb_entry_t, __gnat_backtrace): Revert back to use\n\tof Procedure Value instead of Frame Pointer as the invocation\n\tidentifier associated with the instruction pointer in each traceback\n\tentry.\n\n\t* g-trasym-vms-alpha.adb (Traceback_Entry, PV_For, FP_For,\n\tTB_Entry_For): Revert back to use of Procedure Value instead of Frame\n\tPointer as the invocation identifier passed to tbk$symbolize.\n\n\t* s-traent-vms.ads, s-traent-vms.adb\n\t(Traceback_Entry, PV_For, FP_For, TB_Entry_For): Revert back to use of\n\tProcedure Value instead of Frame Pointer as the invocation identifier\n\tpassed to tbk$symbolize.\n\nFrom-SVN: r130867", "tree": {"sha": "840680f32fb36ed98d7a8cc53b1d781bd1f21d33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/840680f32fb36ed98d7a8cc53b1d781bd1f21d33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/543b4428214232de8bf9d0377a99b137756b0451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/543b4428214232de8bf9d0377a99b137756b0451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/543b4428214232de8bf9d0377a99b137756b0451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/543b4428214232de8bf9d0377a99b137756b0451/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46edcdb100403f15510c2263d5b821546b8a482d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46edcdb100403f15510c2263d5b821546b8a482d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46edcdb100403f15510c2263d5b821546b8a482d"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "fadc9df7aabb2c9f7846803864e3dc747bb70871", "filename": "gcc/ada/g-trasym-vms-alpha.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/543b4428214232de8bf9d0377a99b137756b0451/gcc%2Fada%2Fg-trasym-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/543b4428214232de8bf9d0377a99b137756b0451/gcc%2Fada%2Fg-trasym-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym-vms-alpha.adb?ref=543b4428214232de8bf9d0377a99b137756b0451", "patch": "@@ -229,7 +229,7 @@ package body GNAT.Traceback.Symbolic is\n               (Status,\n                PC_For (Traceback (J)),\n                PC_For (Traceback (J)),\n-               FP_For (Traceback (J)),\n+               PV_For (Traceback (J)),\n                Return_Address,\n                Image_Name_Addr,\n                Module_Name_Addr,"}, {"sha": "609c44b63531207e7f039c908d8302bc506dfe69", "filename": "gcc/ada/s-traent-vms.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/543b4428214232de8bf9d0377a99b137756b0451/gcc%2Fada%2Fs-traent-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/543b4428214232de8bf9d0377a99b137756b0451/gcc%2Fada%2Fs-traent-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traent-vms.adb?ref=543b4428214232de8bf9d0377a99b137756b0451", "patch": "@@ -43,21 +43,21 @@ package body System.Traceback_Entries is\n    end PC_For;\n \n    ------------\n-   -- FP_For --\n+   -- PV_For --\n    ------------\n \n-   function FP_For (TB_Entry : Traceback_Entry) return System.Address is\n+   function PV_For (TB_Entry : Traceback_Entry) return System.Address is\n    begin\n-      return TB_Entry.FP;\n-   end FP_For;\n+      return TB_Entry.PV;\n+   end PV_For;\n \n    ------------------\n    -- TB_Entry_For --\n    ------------------\n \n    function TB_Entry_For (PC : System.Address) return Traceback_Entry is\n    begin\n-      return (PC => PC, FP => System.Null_Address);\n+      return (PC => PC, PV => System.Null_Address);\n    end TB_Entry_For;\n \n end System.Traceback_Entries;"}, {"sha": "ca9284ba256685c4fca5a17f4457db76b3c62f54", "filename": "gcc/ada/s-traent-vms.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/543b4428214232de8bf9d0377a99b137756b0451/gcc%2Fada%2Fs-traent-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/543b4428214232de8bf9d0377a99b137756b0451/gcc%2Fada%2Fs-traent-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traent-vms.ads?ref=543b4428214232de8bf9d0377a99b137756b0451", "patch": "@@ -40,22 +40,22 @@\n package System.Traceback_Entries is\n    pragma Preelaborate;\n \n-   --  Symbolization is done by a VMS service which requires an instruction\n-   --  and a frame pointer for each traceback entry.\n+   --  Symbolization is performed by a VMS service which requires more\n+   --  than an instruction pointer.\n \n    type Traceback_Entry is record\n-      PC : System.Address;\n-      FP : System.Address;\n+      PC : System.Address;  --  Program Counter\n+      PV : System.Address;  --  Procedure Value\n    end record;\n \n    pragma Suppress_Initialization (Traceback_Entry);\n \n    Null_TB_Entry : constant Traceback_Entry :=\n                      (PC => System.Null_Address,\n-                      FP => System.Null_Address);\n+                      PV => System.Null_Address);\n \n    function PC_For (TB_Entry : Traceback_Entry) return System.Address;\n-   function FP_For (TB_Entry : Traceback_Entry) return System.Address;\n+   function PV_For (TB_Entry : Traceback_Entry) return System.Address;\n \n    function TB_Entry_For (PC : System.Address) return Traceback_Entry;\n "}, {"sha": "d69128b92718c8114dde3210331ca2bb764b21c4", "filename": "gcc/ada/tb-alvms.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/543b4428214232de8bf9d0377a99b137756b0451/gcc%2Fada%2Ftb-alvms.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/543b4428214232de8bf9d0377a99b137756b0451/gcc%2Fada%2Ftb-alvms.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftb-alvms.c?ref=543b4428214232de8bf9d0377a99b137756b0451", "patch": "@@ -337,8 +337,8 @@ unwind_kernel_handler (frame_state_t * fs)\n    system functions need more than just a mere PC to compute info on a frame\n    (e.g. for non-symbolic->symbolic translation purposes).  */\n typedef struct {\n-  ADDR pc; /* instruction pointer */\n-  ADDR fp; /* frame pointer */\n+  ADDR pc;  /* Program Counter.  */\n+  ADDR pv;  /* Procedure Value.  */\n } tb_entry_t;\n \n /********************\n@@ -383,7 +383,7 @@ __gnat_backtrace (void **array, int size,\n \t  && (frame_state.pc < exclude_min || frame_state.pc > exclude_max))\n \t{\n \t  tbe->pc = (ADDR) frame_state.pc;\n-\t  tbe->fp = (ADDR) frame_state.fp;\n+\t  tbe->pv = (ADDR) PV_FOR (frame_state.fp);\n \n \t  cnt ++;\n \t  tbe ++;"}]}