{"sha": "4f647814cefff8ee95ac918a8484d5da8c415825", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY2NDc4MTRjZWZmZjhlZTk1YWM5MThhODQ4NGQ1ZGE4YzQxNTgyNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-04T01:21:24Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-04T01:21:24Z"}, "message": "std_memory.h: Revert.\n\n\n2000-07-03  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* bits/std_memory.h: Revert.\n\nFrom-SVN: r34858", "tree": {"sha": "0a468a34f9b3ef6e61ceaef10e84924c276245e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a468a34f9b3ef6e61ceaef10e84924c276245e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f647814cefff8ee95ac918a8484d5da8c415825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f647814cefff8ee95ac918a8484d5da8c415825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f647814cefff8ee95ac918a8484d5da8c415825", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f647814cefff8ee95ac918a8484d5da8c415825/comments", "author": null, "committer": null, "parents": [{"sha": "c14286b068b0dd35349304b82e50085144253c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14286b068b0dd35349304b82e50085144253c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14286b068b0dd35349304b82e50085144253c25"}], "stats": {"total": 78, "additions": 27, "deletions": 51}, "files": [{"sha": "5ee126bd8e9808b9ee43ca2e3c05c5bcc527e19d", "filename": "libstdc++-v3/bits/std_memory.h", "status": "modified", "additions": 27, "deletions": 51, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f647814cefff8ee95ac918a8484d5da8c415825/libstdc%2B%2B-v3%2Fbits%2Fstd_memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f647814cefff8ee95ac918a8484d5da8c415825/libstdc%2B%2B-v3%2Fbits%2Fstd_memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstd_memory.h?ref=4f647814cefff8ee95ac918a8484d5da8c415825", "patch": "@@ -25,28 +25,19 @@\n \n __STL_BEGIN_NAMESPACE\n \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-# if defined(__SGI_STL_USE_AUTO_PTR_CONVERSIONS) && \\\n-       defined(__STL_MEMBER_TEMPLATES)\n-\n-template<typename _Tp> class auto_ptr_ref {\n-  template<typename _Tp1> friend class auto_ptr;\n-  _Tp* _M_ptr;\n-  void*& _M_ptr_ref;\n-  explicit auto_ptr_ref(_Tp* __p, void*& __r) __STL_NOTHROW\n-    : _M_ptr(__p), _M_ptr_ref(__r) {}\n-  _Tp* _M_release() const __STL_NOTHROW {\n-    _M_ptr_ref = 0;\n-    return _M_ptr;\n-  }\n+#if defined(__SGI_STL_USE_AUTO_PTR_CONVERSIONS) && \\\n+     defined(__STL_MEMBER_TEMPLATES)\n+ \n+ template<class _Tp1> struct auto_ptr_ref {\n+   _Tp1* _M_ptr;\n+   auto_ptr_ref(_Tp1* __p) : _M_ptr(__p) {}\n };\n \n-# endif /* auto ptr conversions && member templates */\n-#endif /* _GLIBCPP_RESOLVE_LIB_DEFECTS */\n+#endif\n \n template <class _Tp> class auto_ptr {\n private:\n-  void* _M_ptr;\n+  _Tp* _M_ptr;\n \n public:\n   typedef _Tp element_type;\n@@ -55,10 +46,8 @@ template <class _Tp> class auto_ptr {\n   auto_ptr(auto_ptr& __a) __STL_NOTHROW : _M_ptr(__a.release()) {}\n \n #ifdef __STL_MEMBER_TEMPLATES\n-  template <class _Tp1> auto_ptr(auto_ptr<_Tp1>& __a) __STL_NOTHROW {\n-    _Tp* const __tmp = __a.release(); // Must have implicit conversion\n-    _M_ptr = __tmp;\n-  }\n+  template <class _Tp1> auto_ptr(auto_ptr<_Tp1>& __a) __STL_NOTHROW\n+    : _M_ptr(__a.release()) {}\n #endif /* __STL_MEMBER_TEMPLATES */\n \n   auto_ptr& operator=(auto_ptr& __a) __STL_NOTHROW {\n@@ -78,24 +67,23 @@ template <class _Tp> class auto_ptr {\n   // specification here, but omitting it is standard conforming.  Its \n   // presence can be detected only if _Tp::~_Tp() throws, but (17.4.3.6/2)\n   // this is prohibited.\n-  ~auto_ptr() { delete this->get(); }\n+  ~auto_ptr() { delete _M_ptr; }\n  \n   _Tp& operator*() const __STL_NOTHROW {\n-    return  this->get();\n+    return *_M_ptr;\n   }\n   _Tp* operator->() const __STL_NOTHROW {\n-    return static_cast<_Tp*>(_M_ptr);\n+    return _M_ptr;\n   }\n   _Tp* get() const __STL_NOTHROW {\n-    return static_cast<_Tp*>(_M_ptr);\n+    return _M_ptr;\n   }\n   _Tp* release() __STL_NOTHROW {\n-    _Tp* const __tmp = this->get();\n+    _Tp* __tmp = _M_ptr;\n     _M_ptr = 0;\n     return __tmp;\n   }\n   void reset(_Tp* __p = 0) __STL_NOTHROW {\n-    _Tp* const __tmp = this->get();\n     if (__p != _M_ptr) {\n       delete _M_ptr;\n       _M_ptr = __p;\n@@ -110,35 +98,23 @@ template <class _Tp> class auto_ptr {\n #if defined(__SGI_STL_USE_AUTO_PTR_CONVERSIONS) && \\\n     defined(__STL_MEMBER_TEMPLATES)\n \n-# ifndef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-private:\n-  template<typename _Tp1> struct auto_ptr_ref {\n-    _Tp1* _M_ptr;\n-    void*& _M_ptr_ref;\n-    explicit auto_ptr_ref(_Tp1* __p, void*& __r) __STL_NOTHROW\n-    : _M_ptr(__p), _M_ptr_ref(__r) {}\n-    _Tp1* _M_release() const __STL_NOTHROW {\n-      _M_ptr_ref = 0;\n-      return _M_ptr;\n-    }\n-  };\n-# endif /* !_GLIBCPP_RESOLVE_LIB_DEFECTS */\n-\n public:\n   auto_ptr(auto_ptr_ref<_Tp> __ref) __STL_NOTHROW\n-  : _M_ptr(__ref._M_release()) {}\n-  \n-# ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+    : _M_ptr(__ref._M_ptr) {}\n+\n   auto_ptr& operator=(auto_ptr_ref<_Tp> __ref) __STL_NOTHROW {\n-    reset(__ref._M_release());\n-    return *this; \n+    if (__ref._M_ptr != this->get()) {\n+      delete _M_ptr;\n+      _M_ptr = __ref._M_ptr;\n+    }\n+    return *this;\n   }\n-# endif /* _GLIBCPP_RESOLVE_LIB_DEFECTS */\n-  \n-  template <class _Tp1> operator auto_ptr_ref<_Tp1>() __STL_NOTHROW\n-  { return auto_ptr_ref<_Tp1>(this->get(), _M_ptr); }\n+\n+  template <class _Tp1> operator auto_ptr_ref<_Tp1>() __STL_NOTHROW \n+    { return auto_ptr_ref<_Tp>(this->release()); }\n   template <class _Tp1> operator auto_ptr<_Tp1>() __STL_NOTHROW\n-  { return auto_ptr<_Tp1>(this->release()); }\n+    { return auto_ptr<_Tp1>(this->release()); }\n+\n #endif /* auto ptr conversions && member templates */\n };\n "}]}