{"sha": "f954bd2c81520966ffccdd2786bab6415bd6f6ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk1NGJkMmM4MTUyMDk2NmZmY2NkZDI3ODZiYWI2NDE1YmQ2ZjZhYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-11T16:54:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-11T16:54:49Z"}, "message": "opts.c (warning_as_error_callback, [...]): Remove.\n\n\t* opts.c (warning_as_error_callback,\n\tregister_warning_as_error_callback): Remove.\n\t(enable_warning_as_error): Don't use warning_as_error_callback.\n\t* opts.h (register_warning_as_error_callback): Remove.\n\nc-family:\n\t* c-opts.c (warning_as_error_callback): Remove.\n\t(c_common_initialize_diagnostics): Don't call\n\tregister_warning_as_error_callback.\n\t(c_common_handle_option): Handle -Werror=normalized= here.\n\ntestsuite:\n\t* gcc.dg/cpp/warn-normalized-3.c: Update expected note text.\n\nFrom-SVN: r166606", "tree": {"sha": "2057187053c110209cde5ca5305225655fda8d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2057187053c110209cde5ca5305225655fda8d8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f954bd2c81520966ffccdd2786bab6415bd6f6ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f954bd2c81520966ffccdd2786bab6415bd6f6ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f954bd2c81520966ffccdd2786bab6415bd6f6ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f954bd2c81520966ffccdd2786bab6415bd6f6ac/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f09e731173ce7b5fbe6731b0afde5390663147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f09e731173ce7b5fbe6731b0afde5390663147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f09e731173ce7b5fbe6731b0afde5390663147"}], "stats": {"total": 152, "additions": 38, "deletions": 114}, "files": [{"sha": "d60e21c1c5291e654df66445796442467d2711c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f954bd2c81520966ffccdd2786bab6415bd6f6ac", "patch": "@@ -1,3 +1,10 @@\n+2010-11-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* opts.c (warning_as_error_callback,\n+\tregister_warning_as_error_callback): Remove.\n+\t(enable_warning_as_error): Don't use warning_as_error_callback.\n+\t* opts.h (register_warning_as_error_callback): Remove.\n+\n 2010-11-11  Richard Henderson  <rth@redhat.com>\n \n \t* tree-ssa-math-opts.c (convert_mult_to_fma): Handle a NEGATE_EXPR"}, {"sha": "a9a55b3da43d801e2c8285a78bb0b4ef3d104c81", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f954bd2c81520966ffccdd2786bab6415bd6f6ac", "patch": "@@ -1,3 +1,10 @@\n+2010-11-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-opts.c (warning_as_error_callback): Remove.\n+\t(c_common_initialize_diagnostics): Don't call\n+\tregister_warning_as_error_callback.\n+\t(c_common_handle_option): Handle -Werror=normalized= here.\n+\n 2010-11-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (handle_mode_attribute): Use %' and word \"signedness\""}, {"sha": "1a281c86fc89eaeb3e8bcc6b8af1a42851cae0e1", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 19, "deletions": 96, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=f954bd2c81520966ffccdd2786bab6415bd6f6ac", "patch": "@@ -144,89 +144,6 @@ defer_opt (enum opt_code code, const char *arg)\n   deferred_count++;\n }\n \n-/* -Werror= may set a warning option to enable a warning that is emitted\n-   by the preprocessor.  Set any corresponding flag in cpp_opts.  */\n-\n-static void\n-warning_as_error_callback (int option_index)\n-{\n-  switch (option_index)\n-    {\n-      default:\n-\t/* Ignore options not associated with the preprocessor.  */\n-\tbreak;\n-\n-      case OPT_Wdeprecated:\n-\tcpp_opts->cpp_warn_deprecated = 1;\n-\tbreak;\n-\n-      case OPT_Wcomment:\n-\tcpp_opts->warn_comments = 1;\n-\tbreak;\n-\n-      case OPT_Wtrigraphs:\n-\tcpp_opts->warn_trigraphs = 1;\n-\tbreak;\n-\n-      case OPT_Wmultichar:\n-\tcpp_opts->warn_multichar = 1;\n-\tbreak;\n-\n-      case OPT_Wtraditional:\n-\tcpp_opts->cpp_warn_traditional = 1;\n-\tbreak;\n-\n-      case OPT_Wlong_long:\n-\tcpp_opts->cpp_warn_long_long = 1;\n-\tbreak;\n-\n-      case OPT_Wendif_labels:\n-\tcpp_opts->warn_endif_labels = 1;\n-\tbreak;\n-\n-      case OPT_Wvariadic_macros:\n-\t/* Set the local flag that is used later to update cpp_opts.  */\n-\twarn_variadic_macros = 1;\n-\tbreak;\n-\n-      case OPT_Wbuiltin_macro_redefined:\n-\tcpp_opts->warn_builtin_macro_redefined = 1;\n-\tbreak;\n-\n-      case OPT_Wundef:\n-\tcpp_opts->warn_undef = 1;\n-\tbreak;\n-\n-      case OPT_Wunused_macros:\n-\t/* Set the local flag that is used later to update cpp_opts.  */\n-\twarn_unused_macros = 1;\n-\tbreak;\n-\n-      case OPT_Wc___compat:\n-\t/* Add warnings in the same way as c_common_handle_option below.  */\n-\tif (warn_enum_compare == -1)\n-\t  warn_enum_compare = 1;\n-\tif (warn_jump_misses_init == -1)\n-\t  warn_jump_misses_init = 1;\n-\tcpp_opts->warn_cxx_operator_names = 1;\n-\tbreak;\n-\n-      case OPT_Wnormalized_:\n-\tinform (input_location, \"-Werror=normalized=: Set -Wnormalized=nfc\");\n-\tcpp_opts->warn_normalize = normalized_C;\n-\tbreak;\n-\n-      case OPT_Winvalid_pch:\n-\tcpp_opts->warn_invalid_pch = 1;\n-\tbreak;\n-\n-      case OPT_Wcpp:\n-\t/* Handled by standard diagnostics using the option's associated\n-\t   boolean variable.  */\n-\tbreak;\n-    }\n-}\n-\n /* Return language mask for option parsing.  */\n unsigned int\n c_common_option_lang_mask (void)\n@@ -240,9 +157,6 @@ c_common_option_lang_mask (void)\n void\n c_common_initialize_diagnostics (diagnostic_context *context)\n {\n-  /* Register callback for warnings enabled by -Werror=.  */\n-  register_warning_as_error_callback (warning_as_error_callback);\n-\n   /* This is conditionalized only because that is the way the front\n      ends used to do it.  Maybe this should be unconditional?  */\n   if (c_dialect_cxx ())\n@@ -560,17 +474,26 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_Wnormalized_:\n-      if (!value || (arg && strcasecmp (arg, \"none\") == 0))\n-\tcpp_opts->warn_normalize = normalized_none;\n-      else if (!arg || strcasecmp (arg, \"nfkc\") == 0)\n-\tcpp_opts->warn_normalize = normalized_KC;\n-      else if (strcasecmp (arg, \"id\") == 0)\n-\tcpp_opts->warn_normalize = normalized_identifier_C;\n-      else if (strcasecmp (arg, \"nfc\") == 0)\n-\tcpp_opts->warn_normalize = normalized_C;\n+      if (kind == DK_ERROR)\n+\t{\n+\t  gcc_assert (!arg);\n+\t  inform (input_location, \"-Werror=normalized=: set -Wnormalized=nfc\");\n+\t  cpp_opts->warn_normalize = normalized_C;\n+\t}\n       else\n-\terror (\"argument %qs to %<-Wnormalized%> not recognized\", arg);\n-      break;\n+\t{\n+\t  if (!value || (arg && strcasecmp (arg, \"none\") == 0))\n+\t    cpp_opts->warn_normalize = normalized_none;\n+\t  else if (!arg || strcasecmp (arg, \"nfkc\") == 0)\n+\t    cpp_opts->warn_normalize = normalized_KC;\n+\t  else if (strcasecmp (arg, \"id\") == 0)\n+\t    cpp_opts->warn_normalize = normalized_identifier_C;\n+\t  else if (strcasecmp (arg, \"nfc\") == 0)\n+\t    cpp_opts->warn_normalize = normalized_C;\n+\t  else\n+\t    error (\"argument %qs to %<-Wnormalized%> not recognized\", arg);\n+\t  break;\n+\t}\n \n     case OPT_Wreturn_type:\n       warn_return_type = value;"}, {"sha": "53ae59660478cf2229e8db424d34c3fd9c6ed4b1", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=f954bd2c81520966ffccdd2786bab6415bd6f6ac", "patch": "@@ -2393,19 +2393,6 @@ get_option_state (struct gcc_options *opts, int option,\n   return true;\n }\n \n-/* Callback function, called when -Werror= enables a warning.  */\n-\n-static void (*warning_as_error_callback) (int) = NULL;\n-\n-/* Register a callback for enable_warning_as_error calls.  */\n-\n-void\n-register_warning_as_error_callback (void (*callback) (int))\n-{\n-  gcc_assert (warning_as_error_callback == NULL || callback == NULL);\n-  warning_as_error_callback = callback;\n-}\n-\n /* Enable (or disable if VALUE is 0) a warning option ARG (language\n    mask LANG_MASK, option handlers HANDLERS) as an error for\n    diagnostic context DC (possibly NULL).  This is used by\n@@ -2449,9 +2436,6 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n \t\t\t\t     option_index, NULL, value, lang_mask,\n \t\t\t\t     (int)kind, handlers,\n \t\t\t\t     dc);\n-\n-\t  if (warning_as_error_callback)\n-\t    warning_as_error_callback (option_index);\n \t}\n     }\n   free (new_option);"}, {"sha": "069333b7f7404101db80ef3b358bc4880beb0fa2", "filename": "gcc/opts.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=f954bd2c81520966ffccdd2786bab6415bd6f6ac", "patch": "@@ -257,7 +257,6 @@ extern void read_cmdline_option (struct gcc_options *opts,\n \t\t\t\t unsigned int lang_mask,\n \t\t\t\t const struct cl_option_handlers *handlers,\n \t\t\t\t diagnostic_context *dc);\n-extern void register_warning_as_error_callback (void (*callback) (int));\n extern void enable_warning_as_error (const char *arg, int value,\n \t\t\t\t     unsigned int lang_mask,\n \t\t\t\t     const struct cl_option_handlers *handlers,"}, {"sha": "9aedbfe9a657ca9d86f35d876e36ed0f8e12511c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f954bd2c81520966ffccdd2786bab6415bd6f6ac", "patch": "@@ -1,3 +1,7 @@\n+2010-11-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/cpp/warn-normalized-3.c: Update expected note text.\n+\n 2010-11-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/46388"}, {"sha": "43ea76a0e78eb3af8ce71855bb514e8fda6a7f93", "filename": "gcc/testsuite/gcc.dg/cpp/warn-normalized-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f954bd2c81520966ffccdd2786bab6415bd6f6ac/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c?ref=f954bd2c81520966ffccdd2786bab6415bd6f6ac", "patch": "@@ -1,5 +1,5 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -fextended-identifiers -Werror=normalized=\" }\n /* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n-        // { dg-prune-output \".*-Werror=normalized=: Set -Wnormalized=nfc.*\" }\n+        // { dg-prune-output \".*-Werror=normalized=: set -Wnormalized=nfc.*\" }\n \\u0F43  // { dg-error \"`.U00000f43' is not in NFC .-Werror=normalized=.\" }"}]}