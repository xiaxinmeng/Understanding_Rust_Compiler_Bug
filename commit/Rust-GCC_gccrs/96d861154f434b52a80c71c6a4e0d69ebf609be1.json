{"sha": "96d861154f434b52a80c71c6a4e0d69ebf609be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZkODYxMTU0ZjQzNGI1MmE4MGM3MWM2YTRlMGQ2OWViZjYwOWJlMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-10-07T21:07:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-10-07T21:07:10Z"}, "message": "i386: Fix representation of 256-bit vpblendw.\n\nFrom-SVN: r179697", "tree": {"sha": "1e27407511fc3cee5c2af4b022f81ec6374b5404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e27407511fc3cee5c2af4b022f81ec6374b5404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96d861154f434b52a80c71c6a4e0d69ebf609be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d861154f434b52a80c71c6a4e0d69ebf609be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d861154f434b52a80c71c6a4e0d69ebf609be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d861154f434b52a80c71c6a4e0d69ebf609be1/comments", "author": null, "committer": null, "parents": [{"sha": "621babd8d07859054fb78b9ca4fa97ffd4fd5c0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621babd8d07859054fb78b9ca4fa97ffd4fd5c0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/621babd8d07859054fb78b9ca4fa97ffd4fd5c0e"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "128072fc7c4ccdbf1ec095756cebdbde70018abd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d861154f434b52a80c71c6a4e0d69ebf609be1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d861154f434b52a80c71c6a4e0d69ebf609be1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96d861154f434b52a80c71c6a4e0d69ebf609be1", "patch": "@@ -1,3 +1,9 @@\n+2011-10-07  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/predicates.md (avx2_pblendw_operand): New.\n+\t* config/i386/sse.md (sse4_1_pblendw): Un-macroize.\n+\t(avx2_pblendw, *avx2_pblendw): New expander and insn.\n+\n 2011-10-07  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (bdesc_args): Update code for"}, {"sha": "9ac3f9dab8090aeccaa9718371b16084443b1804", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d861154f434b52a80c71c6a4e0d69ebf609be1/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d861154f434b52a80c71c6a4e0d69ebf609be1/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=96d861154f434b52a80c71c6a4e0d69ebf609be1", "patch": "@@ -1210,3 +1210,12 @@\n       return false;\n   return true;\n })\n+\n+;; Return true if OP is a proper third operand to vpblendw256.\n+(define_predicate \"avx2_pblendw_operand\"\n+  (match_code \"const_int\")\n+{\n+  HOST_WIDE_INT val = INTVAL (op);\n+  HOST_WIDE_INT low = val & 0xff;\n+  return val == (low << 8) | low;\n+})"}, {"sha": "9dc9b461473fccc8c1fd8d14f3c5722ef51833f5", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d861154f434b52a80c71c6a4e0d69ebf609be1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d861154f434b52a80c71c6a4e0d69ebf609be1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=96d861154f434b52a80c71c6a4e0d69ebf609be1", "patch": "@@ -9417,11 +9417,11 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<sse4_1_avx2>_pblendw\"\n-  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,x\")\n-\t(vec_merge:VI2_AVX2\n-\t  (match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"xm,xm\")\n-\t  (match_operand:VI2_AVX2 1 \"register_operand\" \"0,x\")\n+(define_insn \"sse4_1_pblendw\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n+\t(vec_merge:V8HI\n+\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\")\n+\t  (match_operand:V8HI 1 \"register_operand\" \"0,x\")\n \t  (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n\")))]\n   \"TARGET_SSE4_1\"\n   \"@\n@@ -9432,7 +9432,37 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n+   (set_attr \"mode\" \"TI\")])\n+\n+;; The builtin uses an 8-bit immediate.  Expand that.\n+(define_expand \"avx2_pblendw\"\n+  [(set (match_operand:V16HI 0 \"register_operand\" \"\")\n+\t(vec_merge:V16HI\n+\t  (match_operand:V16HI 2 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:V16HI 1 \"register_operand\" \"\")\n+\t  (match_operand:SI 3 \"const_0_to_255_operand\" \"\")))]\n+  \"TARGET_AVX2\"\n+{\n+  HOST_WIDE_INT val = INTVAL (operands[3]) & 0xff;\n+  operands[3] = GEN_INT (val << 8 | val);\n+})\n+\n+(define_insn \"*avx2_pblendw\"\n+  [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V16HI\n+\t  (match_operand:V16HI 2 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:V16HI 1 \"register_operand\" \"x\")\n+\t  (match_operand:SI 3 \"avx2_pblendw_operand\" \"n\")))]\n+  \"TARGET_SSE4_1\"\n+{\n+  operands[3] = GEN_INT (INTVAL (operands[3]) & 0xff);\n+  return \"vpblendw\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+}\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"OI\")])\n \n (define_insn \"avx2_pblendd<mode>\"\n   [(set (match_operand:VI4_AVX2 0 \"register_operand\" \"=x\")"}]}