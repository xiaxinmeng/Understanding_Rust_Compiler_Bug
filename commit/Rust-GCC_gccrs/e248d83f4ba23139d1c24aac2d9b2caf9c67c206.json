{"sha": "e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0OGQ4M2Y0YmEyMzEzOWQxYzI0YWFjMmQ5YjJjYWY5YzY3YzIwNg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2013-04-19T12:00:27Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2013-04-19T12:00:27Z"}, "message": "re PR tree-optimization/56718 (Early inlining prevents type based devirtualization)\n\n2013-04-19  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/56718\n\t* ipa-cp.c (ipa_value_from_known_type_jfunc): Moved...\n\t* ipa-prop.c (ipa_binfo_from_known_type_jfunc): ...here, renamed\n\tand made public.  Adjusted all callers.\n\t(ipa_intraprocedural_devirtualization): New function.\n\t* ipa-prop.h (ipa_binfo_from_known_type_jfunc): Declare.\n\t(ipa_intraprocedural_devirtualization): Likewise.\n\t* Makefile.in (tree-ssa-pre.o): Add ipa-prop.h to dependencies.\n\ntestsuite/\n\t* g++.dg/ipa/imm-devirt-1.C: New test.\n\t* g++.dg/ipa/imm-devirt-2.C: Likewise.\n\nFrom-SVN: r198088", "tree": {"sha": "48a1cde54c03eeceeb5712488b900a74b29947ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48a1cde54c03eeceeb5712488b900a74b29947ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4891e8f8cdeb34ad392a8cf374ce9b8ee54a177f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4891e8f8cdeb34ad392a8cf374ce9b8ee54a177f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4891e8f8cdeb34ad392a8cf374ce9b8ee54a177f"}], "stats": {"total": 246, "additions": 228, "deletions": 18}, "files": [{"sha": "43ed933b77a4eedcee345eeedf56528e179e5ae0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "patch": "@@ -1,3 +1,14 @@\n+2013-04-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/56718\n+\t* ipa-cp.c (ipa_value_from_known_type_jfunc): Moved...\n+\t* ipa-prop.c (ipa_binfo_from_known_type_jfunc): ...here, renamed\n+\tand made public.  Adjusted all callers.\n+\t(ipa_intraprocedural_devirtualization): New function.\n+\t* ipa-prop.h (ipa_binfo_from_known_type_jfunc): Declare.\n+\t(ipa_intraprocedural_devirtualization): Likewise.\n+\t* Makefile.in (tree-ssa-pre.o): Add ipa-prop.h to dependencies.\n+\n 2013-04-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57000"}, {"sha": "a91224bae519eb4c8486908088765991d9dbf64e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "patch": "@@ -2369,7 +2369,8 @@ tree-ssa-pre.o : tree-ssa-pre.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(TM_H) coretypes.h $(TREE_PASS_H) $(FLAGS_H) langhooks.h \\\n    $(CFGLOOP_H) alloc-pool.h $(BASIC_BLOCK_H) $(BITMAP_H) $(HASH_TABLE_H) \\\n    $(GIMPLE_H) $(TREE_INLINE_H) tree-iterator.h tree-ssa-sccvn.h $(PARAMS_H) \\\n-   $(DBGCNT_H) tree-scalar-evolution.h $(GIMPLE_PRETTY_PRINT_H) domwalk.h\n+   $(DBGCNT_H) tree-scalar-evolution.h $(GIMPLE_PRETTY_PRINT_H) domwalk.h \\\n+   $(IPA_PROP_H)\n tree-ssa-sccvn.o : tree-ssa-sccvn.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) \\\n    $(TM_H) coretypes.h $(DUMPFILE_H) $(FLAGS_H) $(CFGLOOP_H) \\"}, {"sha": "48521cfffbf380c4115c010b2c58ae86601dd410", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "patch": "@@ -791,20 +791,6 @@ ipa_get_jf_ancestor_result (struct ipa_jump_func *jfunc, tree input)\n     return NULL_TREE;\n }\n \n-/* Extract the acual BINFO being described by JFUNC which must be a known type\n-   jump function.  */\n-\n-static tree\n-ipa_value_from_known_type_jfunc (struct ipa_jump_func *jfunc)\n-{\n-  tree base_binfo = TYPE_BINFO (ipa_get_jf_known_type_base_type (jfunc));\n-  if (!base_binfo)\n-    return NULL_TREE;\n-  return get_binfo_at_offset (base_binfo,\n-\t\t\t      ipa_get_jf_known_type_offset (jfunc),\n-\t\t\t      ipa_get_jf_known_type_component_type (jfunc));\n-}\n-\n /* Determine whether JFUNC evaluates to a known value (that is either a\n    constant or a binfo) and if so, return it.  Otherwise return NULL. INFO\n    describes the caller node so that pass-through jump functions can be\n@@ -816,7 +802,7 @@ ipa_value_from_jfunc (struct ipa_node_params *info, struct ipa_jump_func *jfunc)\n   if (jfunc->type == IPA_JF_CONST)\n     return ipa_get_jf_constant (jfunc);\n   else if (jfunc->type == IPA_JF_KNOWN_TYPE)\n-    return ipa_value_from_known_type_jfunc (jfunc);\n+    return ipa_binfo_from_known_type_jfunc (jfunc);\n   else if (jfunc->type == IPA_JF_PASS_THROUGH\n \t   || jfunc->type == IPA_JF_ANCESTOR)\n     {\n@@ -1103,7 +1089,7 @@ propagate_scalar_accross_jump_function (struct cgraph_edge *cs,\n \n       if (jfunc->type == IPA_JF_KNOWN_TYPE)\n \t{\n-\t  val = ipa_value_from_known_type_jfunc (jfunc);\n+\t  val = ipa_binfo_from_known_type_jfunc (jfunc);\n \t  if (!val)\n \t    return set_lattice_contains_variable (dest_lat);\n \t}"}, {"sha": "8d1363a786a0200e9c252d12018cd9a272790e65", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "patch": "@@ -356,6 +356,20 @@ ipa_set_ancestor_jf (struct ipa_jump_func *jfunc, HOST_WIDE_INT offset,\n   jfunc->value.ancestor.agg_preserved = agg_preserved;\n }\n \n+/* Extract the acual BINFO being described by JFUNC which must be a known type\n+   jump function.  */\n+\n+tree\n+ipa_binfo_from_known_type_jfunc (struct ipa_jump_func *jfunc)\n+{\n+  tree base_binfo = TYPE_BINFO (jfunc->value.known_type.base_type);\n+  if (!base_binfo)\n+    return NULL_TREE;\n+  return get_binfo_at_offset (base_binfo,\n+\t\t\t      jfunc->value.known_type.offset,\n+\t\t\t      jfunc->value.known_type.component_type);\n+}\n+\n /* Structure to be passed in between detect_type_change and\n    check_stmt_for_type_change.  */\n \n@@ -1957,6 +1971,30 @@ ipa_analyze_node (struct cgraph_node *node)\n   pop_cfun ();\n }\n \n+/* Given a statement CALL which must be a GIMPLE_CALL calling an OBJ_TYPE_REF\n+   attempt a type-based devirtualization.  If successful, return the\n+   target function declaration, otherwise return NULL.  */\n+\n+tree\n+ipa_intraprocedural_devirtualization (gimple call)\n+{\n+  tree binfo, token, fndecl;\n+  struct ipa_jump_func jfunc;\n+  tree otr = gimple_call_fn (call);\n+\n+  jfunc.type = IPA_JF_UNKNOWN;\n+  compute_known_type_jump_func (OBJ_TYPE_REF_OBJECT (otr), &jfunc,\n+\t\t\t\tcall);\n+  if (jfunc.type != IPA_JF_KNOWN_TYPE)\n+    return NULL_TREE;\n+  binfo = ipa_binfo_from_known_type_jfunc (&jfunc);\n+  if (!binfo)\n+    return NULL_TREE;\n+  token = OBJ_TYPE_REF_TOKEN (otr);\n+  fndecl = gimple_get_virt_method_for_binfo (tree_low_cst (token, 1),\n+\t\t\t\t\t     binfo);\n+  return fndecl;\n+}\n \n /* Update the jump function DST when the call graph edge corresponding to SRC is\n    is being inlined, knowing that DST is of type ancestor and src of known"}, {"sha": "5bc99be03b3a01065b47f3686a9f19c3d3943d42", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "patch": "@@ -507,6 +507,8 @@ tree ipa_get_indirect_edge_target (struct cgraph_edge *ie,\n \t\t\t\t   vec<tree> ,\n \t\t\t\t   vec<ipa_agg_jump_function_p> );\n struct cgraph_edge *ipa_make_edge_direct_to_target (struct cgraph_edge *, tree);\n+tree ipa_binfo_from_known_type_jfunc (struct ipa_jump_func *);\n+tree ipa_intraprocedural_devirtualization (gimple);\n \n /* Functions related to both.  */\n void ipa_analyze_node (struct cgraph_node *);"}, {"sha": "58b0fca12cef410fe0980511a0653c5458a8ec03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "patch": "@@ -1,3 +1,9 @@\n+2013-04-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/56718\n+\t* g++.dg/ipa/imm-devirt-1.C: New test.\n+\t* g++.dg/ipa/imm-devirt-2.C: Likewise.\n+\n 2013-04-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57000"}, {"sha": "32f7258a452e3ebeeb09c0930e658891108df7fc", "filename": "gcc/testsuite/g++.dg/ipa/imm-devirt-1.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fimm-devirt-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fimm-devirt-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fimm-devirt-1.C?ref=e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "patch": "@@ -0,0 +1,62 @@\n+/* Verify that virtual calls are folded even early inlining puts them into one\n+   function with the definition.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-fre1-details\"  } */\n+\n+extern \"C\" void abort (void);\n+\n+class A\n+{\n+public:\n+  int data;\n+  virtual int foo (int i);\n+};\n+\n+\n+class B : public A\n+{\n+public:\n+  __attribute__ ((noinline)) B();\n+  virtual int foo (int i);\n+};\n+\n+int __attribute__ ((noinline)) A::foo (int i)\n+{\n+  return i + 1;\n+}\n+\n+int __attribute__ ((noinline)) B::foo (int i)\n+{\n+  return i + 2;\n+}\n+\n+int __attribute__ ((noinline,noclone)) get_input(void)\n+{\n+  return 1;\n+}\n+\n+__attribute__ ((noinline)) B::B()\n+{\n+}\n+\n+static inline int middleman_1 (class A *obj, int i)\n+{\n+  return obj->foo (i);\n+}\n+\n+static inline int middleman_2 (class B *obj, int i)\n+{\n+  return middleman_1 (obj, i);\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+  class B b;\n+\n+  if (middleman_2 (&b, get_input ()) != 3)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replacing call target with foo\" \"fre1\"  } } */\n+/* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "5bddc2fcb26fa93221c1c81af0781d1b48aedf77", "filename": "gcc/testsuite/g++.dg/ipa/imm-devirt-2.C", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fimm-devirt-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fimm-devirt-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fimm-devirt-2.C?ref=e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "patch": "@@ -0,0 +1,95 @@\n+/* Verify that virtual calls are folded even early inlining puts them into one\n+   function with the definition.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-fre1-details\"  } */\n+\n+extern \"C\" void abort (void);\n+\n+class Distraction\n+{\n+public:\n+  float f;\n+  double d;\n+  Distraction ()\n+  {\n+    f = 8.3;\n+    d = 10.2;\n+  }\n+  virtual float bar (float z);\n+};\n+\n+class A\n+{\n+public:\n+  int data;\n+  virtual int foo (int i);\n+};\n+\n+class B : public A\n+{\n+public:\n+  int data_2;\n+  virtual int foo (int i);\n+  virtual int baz (int i);\n+};\n+\n+\n+class C : public Distraction, public B\n+{\n+public:\n+  __attribute__ ((noinline)) C();\n+  virtual int foo (int i);\n+};\n+\n+float __attribute__ ((noinline)) Distraction::bar (float z)\n+{\n+  f += z;\n+  return f/2;\n+}\n+\n+int __attribute__ ((noinline)) A::foo (int i)\n+{\n+  return i + 1;\n+}\n+\n+int __attribute__ ((noinline)) B::foo (int i)\n+{\n+  return i + 2;\n+}\n+\n+int __attribute__ ((noinline)) B::baz (int i)\n+{\n+  return i * 15;\n+}\n+\n+int __attribute__ ((noinline)) C::foo (int i)\n+{\n+  return i + 3;\n+}\n+\n+int __attribute__ ((noinline,noclone)) get_input(void)\n+{\n+  return 1;\n+}\n+\n+static inline int middleman (class A *obj, int i)\n+{\n+  return obj->foo (i);\n+}\n+\n+__attribute__ ((noinline)) C::C()\n+{\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+  class C c;\n+\n+  if (middleman (&c, get_input ()) != 4)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replacing call target\" \"fre1\"  } } */\n+/* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "345ebcceaad4e40f4ff6fa86c76a2412d62fb512", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e248d83f4ba23139d1c24aac2d9b2caf9c67c206/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=e248d83f4ba23139d1c24aac2d9b2caf9c67c206", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"dbgcnt.h\"\n #include \"domwalk.h\"\n+#include \"ipa-prop.h\"\n \n /* TODO:\n \n@@ -4326,7 +4327,15 @@ eliminate_bb (dom_walk_data *, basic_block b)\n \t    fn = VN_INFO (orig_fn)->valnum;\n \t  else if (TREE_CODE (orig_fn) == OBJ_TYPE_REF\n \t\t   && TREE_CODE (OBJ_TYPE_REF_EXPR (orig_fn)) == SSA_NAME)\n-\t    fn = VN_INFO (OBJ_TYPE_REF_EXPR (orig_fn))->valnum;\n+\t    {\n+\t      fn = VN_INFO (OBJ_TYPE_REF_EXPR (orig_fn))->valnum;\n+\t      if (!gimple_call_addr_fndecl (fn))\n+\t\t{\n+\t\t  fn = ipa_intraprocedural_devirtualization (stmt);\n+\t\t  if (fn)\n+\t\t    fn = build_fold_addr_expr (fn);\n+\t\t}\n+\t    }\n \t  else\n \t    continue;\n \t  if (gimple_call_addr_fndecl (fn) != NULL_TREE"}]}