{"sha": "fd05eb8097447db2163a7900a2db30be7aaf9851", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQwNWViODA5NzQ0N2RiMjE2M2E3OTAwYTJkYjMwYmU3YWFmOTg1MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-03-06T18:03:55Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-03-06T18:03:55Z"}, "message": "builtins.c (built_in_class_names, [...]): Constify a char*.\n\n\t* builtins.c (built_in_class_names, built_in_names): Constify a\n\tchar*.\n\n\t* gmon-sol2.c (monstartup, moncontrol): Cast ptrs to long, not\n\tint.\n\t(_mcleanup): Ensure value matches format specifier in sprintf.\n\n\t* cpphash.c (special_symbol): Don't needlessly cast away\n\tconst-ness.\n\n\t* cppinit.c (base_name): Delete unused prototype.\n\n\t* mkdeps.c (deps_init): Make definition K&R safe.\n\n\t* tree.h (built_in_class_names, built_in_names): Constify a\n\tchar*.\n\nf:\n\t* ansify.c (die_unless): Don't use ANSI string concatenation.\n\t(die): Mark with ATTRIBUTE_NORETURN.\n\nFrom-SVN: r32364", "tree": {"sha": "7fa5d8f5f3c3151a83a03d4b9ff54f281c145164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fa5d8f5f3c3151a83a03d4b9ff54f281c145164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd05eb8097447db2163a7900a2db30be7aaf9851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd05eb8097447db2163a7900a2db30be7aaf9851", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd05eb8097447db2163a7900a2db30be7aaf9851", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd05eb8097447db2163a7900a2db30be7aaf9851/comments", "author": null, "committer": null, "parents": [{"sha": "c137830fba1ab6f1ae91ad5aec71573af7023c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c137830fba1ab6f1ae91ad5aec71573af7023c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c137830fba1ab6f1ae91ad5aec71573af7023c9d"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "5428664dd00e2d3655a525be7a0170a17c32f91a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd05eb8097447db2163a7900a2db30be7aaf9851", "patch": "@@ -1,3 +1,22 @@\n+2000-03-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (built_in_class_names, built_in_names): Constify a\n+\tchar*.\n+\n+\t* gmon-sol2.c (monstartup, moncontrol): Cast ptrs to long, not\n+\tint.\n+\t(_mcleanup): Ensure value matches format specifier in sprintf.\n+\n+\t* cpphash.c (special_symbol): Don't needlessly cast away\n+\tconst-ness.\n+\n+\t* cppinit.c (base_name): Delete unused prototype.\n+\n+\t* mkdeps.c (deps_init): Make definition K&R safe.\n+\n+\t* tree.h (built_in_class_names, built_in_names): Constify a\n+\tchar*.\n+\n 2000-03-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/sparc/sparc.c (eligible_for_epilogue_delay): Accept"}, {"sha": "a38f3c4b861b052f315b567a0589b667c944d22b", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=fd05eb8097447db2163a7900a2db30be7aaf9851", "patch": "@@ -57,10 +57,10 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* Define the names of the builtin function types and codes.  */\n-char *built_in_class_names[4]\n+const char *const built_in_class_names[4]\n   = {\"NOT_BUILT_IN\", \"BUILT_IN_FRONTEND\", \"BUILT_IN_MD\", \"BUILT_IN_NORMAL\"};\n \n-char *built_in_names[(int) END_BUILTINS] =\n+const char *const built_in_names[(int) END_BUILTINS] =\n {\"BUILT_IN_ALLOCA\", \"BUILT_IN_ABS\", \"BUILT_IN_FABS\", \"BUILT_IN_LABS\",\n   \"BUILT_IN_FFS\", \"BUILT_IN_DIV\", \"BUILT_IN_LDIV\", \"BUILT_IN_FFLOOR\",\n   \"BUILT_IN_FCEIL\", \"BUILT_IN_FMOD\", \"BUILT_IN_FREM\", \"BUILT_IN_MEMCPY\","}, {"sha": "1e5f0da94672371170a9ecd45591e12de3b94372", "filename": "gcc/config/sparc/gmon-sol2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c?ref=fd05eb8097447db2163a7900a2db30be7aaf9851", "patch": "@@ -102,10 +102,10 @@ void monstartup(lowpc, highpc)\n \t *\tso the rest of the scaling (here and in gprof) stays in ints.\n \t */\n     lowpc = (char *)\n-\t    ROUNDDOWN((unsigned)lowpc, HISTFRACTION*sizeof(HISTCOUNTER));\n+\t    ROUNDDOWN((unsigned long)lowpc, HISTFRACTION*sizeof(HISTCOUNTER));\n     s_lowpc = lowpc;\n     highpc = (char *)\n-\t    ROUNDUP((unsigned)highpc, HISTFRACTION*sizeof(HISTCOUNTER));\n+\t    ROUNDUP((unsigned long)highpc, HISTFRACTION*sizeof(HISTCOUNTER));\n     s_highpc = highpc;\n     s_textsize = highpc - lowpc;\n     monsize = (s_textsize / HISTFRACTION) + sizeof(struct phdr);\n@@ -195,7 +195,7 @@ _mcleanup()\n \telse\n \t    progname++;\n \n-\tsprintf(buf, \"%s/%ld.%s\", profdir, getpid(), progname);\n+\tsprintf(buf, \"%s/%ld.%s\", profdir, (long) getpid(), progname);\n \tproffile = buf;\n     } else {\n \tproffile = \"gmon.out\";\n@@ -412,7 +412,7 @@ static void moncontrol(mode)\n \t/* start */\n \tprofil((unsigned short *)(sbuf + sizeof(struct phdr)),\n \t       ssiz - sizeof(struct phdr),\n-\t       (int)s_lowpc, s_scale);\n+\t       (long)s_lowpc, s_scale);\n \tprofiling = 0;\n     } else {\n \t/* stop */"}, {"sha": "bb772eb72c9777f0f8f729c1d014af0c907a57f1", "filename": "gcc/cpphash.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=fd05eb8097447db2163a7900a2db30be7aaf9851", "patch": "@@ -897,7 +897,7 @@ special_symbol (hp, pfile)\n       while (!ip->nominal_fname && ip != CPP_NULL_BUFFER (pfile))\n \tip = CPP_PREV_BUFFER (ip);\n       if (ip->system_header_p\n-\t  && !cpp_lookup (pfile, (U_CHAR *) \"__STRICT_ANSI__\", 15))\n+\t  && !cpp_lookup (pfile, (const U_CHAR *) \"__STRICT_ANSI__\", 15))\n \tCPP_PUTC_Q (pfile, '0');\n       else\n #endif"}, {"sha": "4286ecbe31506dbff416b85e53e383b04311f100", "filename": "gcc/cppinit.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=fd05eb8097447db2163a7900a2db30be7aaf9851", "patch": "@@ -178,7 +178,6 @@ static void initialize_builtins\t\tPARAMS ((cpp_reader *));\n static void append_include_chain\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t struct cpp_pending *,\n \t\t\t\t\t\t char *, int, int));\n-static char *base_name\t\t\tPARAMS ((const char *));\n static void dump_special_to_buffer\tPARAMS ((cpp_reader *, const char *));\n static void initialize_dependency_output PARAMS ((cpp_reader *));\n static void initialize_standard_includes PARAMS ((cpp_reader *));"}, {"sha": "780482abf6ee157b29d573343e69bc049bd4e15c", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=fd05eb8097447db2163a7900a2db30be7aaf9851", "patch": "@@ -1,3 +1,8 @@\n+Mon Mar  6 13:01:19 2000  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ansify.c (die_unless): Don't use ANSI string concatenation.\n+\t(die): Mark with ATTRIBUTE_NORETURN.\n+\n Wed Mar  1 00:31:44 2000  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n \n \t* com.c (current_function_decl): Move to toplev.c."}, {"sha": "d2eea9118e2768dd624c6e5e68e82991f1357a5b", "filename": "gcc/f/ansify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Ff%2Fansify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Ff%2Fansify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fansify.c?ref=fd05eb8097447db2163a7900a2db30be7aaf9851", "patch": "@@ -45,12 +45,12 @@ typedef enum\n #define die_unless(c) \\\n   do if (!(c)) \\\n     { \\\n-      fprintf (stderr, \"%s:%lu: \" #c \"\\n\", argv[1], lineno); \\\n+      fprintf (stderr, \"%s:%lu: %s\\n\", argv[1], lineno, #c); \\\n       die (); \\\n     } \\\n   while(0)\n \n-static void\n+static void ATTRIBUTE_NORETURN\n die (void)\n {\n   exit (1);"}, {"sha": "7b0f2716564a8dbb59bee4efc788ecb83e3268b3", "filename": "gcc/mkdeps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkdeps.c?ref=fd05eb8097447db2163a7900a2db30be7aaf9851", "patch": "@@ -127,7 +127,7 @@ base_name (fname)\n /* Public routines.  */\n \n struct deps *\n-deps_init (void)\n+deps_init ()\n {\n   struct deps *d = (struct deps *) xmalloc (sizeof (struct deps));\n "}, {"sha": "458fd5149207d014ecd93900f723009c04a380a1", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd05eb8097447db2163a7900a2db30be7aaf9851/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fd05eb8097447db2163a7900a2db30be7aaf9851", "patch": "@@ -78,7 +78,7 @@ enum built_in_class\n };\n \n /* Names for the above.  */\n-extern char *built_in_class_names[4];\n+extern const char *const built_in_class_names[4];\n \n /* Codes that identify the various built in functions\n    so that expand_call can identify them quickly.  */\n@@ -155,7 +155,7 @@ enum built_in_function\n };\n \n /* Names for the above.  */\n-extern char *built_in_names[(int) END_BUILTINS];\n+extern const char *const built_in_names[(int) END_BUILTINS];\n \f\n /* The definition of tree nodes fills the next several pages.  */\n "}]}