{"sha": "091ccc066d24b0356374e4fdacb4613062289508", "node_id": "C_kwDOANBUbNoAKDA5MWNjYzA2NmQyNGIwMzU2Mzc0ZTRmZGFjYjQ2MTMwNjIyODk1MDg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-26T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-26T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "ab961790d085a0d4f12ee1c04b1461517bfc6898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab961790d085a0d4f12ee1c04b1461517bfc6898"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/091ccc066d24b0356374e4fdacb4613062289508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091ccc066d24b0356374e4fdacb4613062289508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091ccc066d24b0356374e4fdacb4613062289508", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091ccc066d24b0356374e4fdacb4613062289508/comments", "author": null, "committer": null, "parents": [{"sha": "9664c46545601728698a6e3352b32ffcf9a4ade7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9664c46545601728698a6e3352b32ffcf9a4ade7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9664c46545601728698a6e3352b32ffcf9a4ade7"}], "stats": {"total": 255, "additions": 254, "deletions": 1}, "files": [{"sha": "041c645c004d0656b71ea21d3ac1c1fc0e36a3ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091ccc066d24b0356374e4fdacb4613062289508/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091ccc066d24b0356374e4fdacb4613062289508/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=091ccc066d24b0356374e4fdacb4613062289508", "patch": "@@ -1,3 +1,118 @@\n+2021-11-25  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-cp.c (ipa_value_range_from_jfunc): Remove forgotten early return.\n+\n+2021-11-25  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/103406\n+\t* match.pd (minus @0 @0): Check tree_expr_maybe_infinite_p.\n+\n+2021-11-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/103227\n+\t* ipa-prop.h (ipa_get_param): New overload.  Move bits of the existing\n+\tone to the new one.\n+\t* ipa-param-manipulation.h (ipa_param_adjustments): New member\n+\tfunction get_updated_index_or_split.\n+\t* ipa-param-manipulation.c\n+\t(ipa_param_adjustments::get_updated_index_or_split): New function.\n+\t* ipa-prop.c (adjust_agg_replacement_values): Reimplement, add\n+\tcapability to identify scalarized parameters and perform substitution\n+\ton them.\n+\t(ipcp_transform_function): Create descriptors earlier, handle new\n+\treturn values of adjust_agg_replacement_values.\n+\n+2021-11-25  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::compute_ranges_defined): Remove.\n+\t(path_range_query::compute_ranges_in_block): Revert to bitmap order.\n+\t* gimple-range-path.h: Remove compute_ranges_defined.\n+\n+2021-11-25  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tPR target/103396\n+\t* config/gcn/gcn.c (move_callee_saved_registers): Ensure that the\n+\tnumber of spilled registers is counted correctly.\n+\n+2021-11-25  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-prop.h (ipa_node_params::ipa_node_params): Initialize\n+\tnode_is_self_scc.\n+\n+2021-11-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/103359\n+\t* gimple-range-fold.cc (fold_using_range::range_of_phi): If arg is\n+\tequivalent to def, don't initially include it's range.\n+\n+2021-11-25  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Do not check\n+\tgimple_static_chain.\n+\n+2021-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* cgraphunit.c (symbol_table::output_weakrefs): Remove\n+\tunreachable init.\n+\t(get_alias_symbol): Remove now unused function.\n+\n+2021-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgrtl.c (rtl_verify_fallthru): Do not stop verifying\n+\twith fatal_insn.\n+\t(skip_insns_after_block): Remove unreachable break and continue.\n+\n+2021-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgexpand.c (label_rtx_for_bb): Remove dead loop construct.\n+\n+2021-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* regset.h (REG_SET_EMPTY_P): New macro.\n+\t* cfgcleanup.c (thread_jump): Use REG_SET_EMPTY_P.\n+\n+2021-11-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Use @option for -Wuninitialized.\n+\n+2021-11-25  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103254\n+\t* gimple-range-path.cc (path_range_query::compute_ranges): Move\n+\texported boolean code...\n+\t(path_range_query::compute_imports): ...here.\n+\n+2021-11-25  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103254\n+\t* gimple-range-path.cc (path_range_query::compute_ranges_defined): New\n+\t(path_range_query::compute_ranges_in_block): Move to\n+\tcompute_ranges_defined.\n+\t* gimple-range-path.h (compute_ranges_defined): New.\n+\n+2021-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103417\n+\t* match.pd ((X & Y) CMP 0): Only handle eq and ne.  Commonalize\n+\tcommon tests.\n+\n+2021-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103376\n+\t* gimple-ssa-store-merging.c (perform_symbolic_merge): For\n+\tBIT_IOR_EXPR, if masked1 && masked2 && masked1 != masked2, don't\n+\tpunt, but set the corresponding result byte to MARKER_BYTE_UNKNOWN.\n+\tFor BIT_XOR_EXPR similarly and if masked1 == masked2 and the\n+\tbyte isn't MARKER_BYTE_UNKNOWN, set the corresponding result byte to\n+\t0.\n+\n+2021-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102611\n+\t* doc/invoke.texi (-Wcomma-subscript): Document that for\n+\t-std=c++20 the option isn't enabled by default with -Wno-deprecated\n+\tbut for -std=c++23 it is.\n+\n 2021-11-24  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-modref.c (implicit_eaf_flags_for_edge_and_arg): Break out from..."}, {"sha": "045d8fc9bc873d1da34f8394a5ca16f1e62f108c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091ccc066d24b0356374e4fdacb4613062289508/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091ccc066d24b0356374e4fdacb4613062289508/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=091ccc066d24b0356374e4fdacb4613062289508", "patch": "@@ -1 +1 @@\n-20211125\n+20211126"}, {"sha": "813062e2340be9e6af3896927febf45f8595d1b8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091ccc066d24b0356374e4fdacb4613062289508/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091ccc066d24b0356374e4fdacb4613062289508/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=091ccc066d24b0356374e4fdacb4613062289508", "patch": "@@ -1,3 +1,11 @@\n+2021-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102611\n+\t* c-opts.c (c_common_post_options): Enable -Wcomma-subscript by\n+\tdefault for C++23 regardless of warn_deprecated.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Predefine\n+\t__cpp_multidimensional_subscript=202110L for C++23.\n+\n 2021-11-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/88232"}, {"sha": "6ac1e3da0191e7e54ce03fefa31e3146a0ac6d5d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091ccc066d24b0356374e4fdacb4613062289508/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091ccc066d24b0356374e4fdacb4613062289508/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=091ccc066d24b0356374e4fdacb4613062289508", "patch": "@@ -1,3 +1,44 @@\n+2021-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101180\n+\t* pt.c (apply_late_template_attributes): Return early if there are no\n+\tdependent attributes.\n+\n+2021-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102611\n+\t* cp-tree.h (build_op_subscript): Implement P2128R6\n+\t- Multidimensional subscript operator.  Declare.\n+\t(class releasing_vec): Add release method.\n+\t(grok_array_decl): Remove bool argument, add vec<tree, va_gc> **\n+\tand tsubst_flags_t arguments.\n+\t(build_min_non_dep_op_overload): Declare another overload.\n+\t* parser.c (cp_parser_parenthesized_expression_list_elt): New function.\n+\t(cp_parser_postfix_open_square_expression): Mention C++23 syntax in\n+\tfunction comment.  For C++23 parse zero or more than one initializer\n+\tclauses in expression list, adjust grok_array_decl caller.\n+\t(cp_parser_parenthesized_expression_list): Use\n+\tcp_parser_parenthesized_expression_list_elt.\n+\t(cp_parser_builtin_offsetof): Adjust grok_array_decl caller.\n+\t* decl.c (grok_op_properties): For C++23 don't check number\n+\tof arguments of operator[].\n+\t* decl2.c (grok_array_decl): Remove decltype_p argument, add\n+\tindex_exp_list and complain arguments.  If index_exp is NULL,\n+\thandle *index_exp_list as the subscript expression list.\n+\t* tree.c (build_min_non_dep_op_overload): New overload.\n+\t* call.c (add_operator_candidates, build_over_call): Adjust comments\n+\tfor removal of build_new_op_1.\n+\t(build_op_subscript): New function.\n+\t* pt.c (tsubst_copy_and_build_call_args): New function.\n+\t(tsubst_copy_and_build) <case ARRAY_REF>: If second\n+\toperand is magic CALL_EXPR with ovl_op_identifier (ARRAY_REF)\n+\tas CALL_EXPR_FN, tsubst CALL_EXPR arguments including expanding\n+\tpack expressions in it and call grok_array_decl instead of\n+\tbuild_x_array_ref.\n+\t<case CALL_EXPR>: Use tsubst_copy_and_build_call_args.\n+\t* semantics.c (handle_omp_array_sections_1): Adjust grok_array_decl\n+\tcaller.\n+\n 2021-11-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/103347"}, {"sha": "3f1741e6c0d786224bcc1d27d428c7c3d8b27945", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091ccc066d24b0356374e4fdacb4613062289508/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091ccc066d24b0356374e4fdacb4613062289508/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=091ccc066d24b0356374e4fdacb4613062289508", "patch": "@@ -1,3 +1,61 @@\n+2021-11-25  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/ipa/inline10.c: New test.\n+\n+2021-11-25  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/103406\n+\t* gcc.dg/pr103406.c: New test case.\n+\n+2021-11-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/103227\n+\t* gcc.dg/ipa/pr103227-1.c: New test.\n+\t* gcc.dg/ipa/pr103227-3.c: Likewise.\n+\t* gcc.dg/ipa/pr103227-2.c: Likewise.\n+\t* gfortran.dg/pr53787.f90: Disable IPA-SRA.\n+\n+2021-11-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/102648\n+\t* gcc.dg/pr102648.c: New.\n+\n+2021-11-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/103359\n+\t* gcc.dg/pr103359.c: New.\n+\n+2021-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103417\n+\t* gcc.c-torture/execute/pr103417.c: New test.\n+\n+2021-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103376\n+\t* gcc.dg/optimize-bswapsi-7.c: New test.\n+\n+2021-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102611\n+\t* g++.dg/cpp2a/comma1.C: Expect different diagnostics for C++23.\n+\t* g++.dg/cpp2a/comma3.C: Likewise.\n+\t* g++.dg/cpp2a/comma4.C: Expect diagnostics for C++23.\n+\t* g++.dg/cpp2a/comma5.C: Expect different diagnostics for C++23.\n+\t* g++.dg/cpp23/feat-cxx2b.C: Test __cpp_multidimensional_subscript\n+\tpredefined macro.\n+\t* g++.dg/cpp23/subscript1.C: New test.\n+\t* g++.dg/cpp23/subscript2.C: New test.\n+\t* g++.dg/cpp23/subscript3.C: New test.\n+\t* g++.dg/cpp23/subscript4.C: New test.\n+\t* g++.dg/cpp23/subscript5.C: New test.\n+\t* g++.dg/cpp23/subscript6.C: New test.\n+\n+2021-11-25  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/pr103194-5.c: Include <stdint.h>.\n+\tReplace long with int64_t.\n+\n 2021-11-24  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.c-torture/execute/pr103405.c: New test."}, {"sha": "bf3cad2d3aaf6a8f2bf8928c206dabfcb9f8610b", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091ccc066d24b0356374e4fdacb4613062289508/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091ccc066d24b0356374e4fdacb4613062289508/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=091ccc066d24b0356374e4fdacb4613062289508", "patch": "@@ -1,3 +1,12 @@\n+2021-11-25  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* unwind-dw2-fde-dip.c (struct unw_eh_callback_data): Add hdr.\n+\tRemove func, ret.\n+\t(find_fde_tail): New function.  Split from\n+\t_Unwind_IteratePhdrCallback.  Move the result initialization\n+\tfrom _Unwind_Find_FDE.\n+\t(_Unwind_Find_FDE): Updated to call find_fde_tail.\n+\n 2021-11-22  Florian Weimer  <fweimer@redhat.com>\n \n \t* unwind-dw2-fde-dip.c (NEED_DBASE_MEMBER): Define."}, {"sha": "a12383b6e3f4747507498fb6a6793d4650c57ac9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091ccc066d24b0356374e4fdacb4613062289508/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091ccc066d24b0356374e4fdacb4613062289508/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=091ccc066d24b0356374e4fdacb4613062289508", "patch": "@@ -1,3 +1,25 @@\n+2021-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/tuple/comparison_operators/overloaded2.cc:\n+\tRemove dg-error for C++11_only error.\n+\n+2021-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96416\n+\t* include/bits/ptr_traits.h (pointer_traits): Reimplement to be\n+\tSFINAE-friendly (LWG 3545).\n+\t* testsuite/20_util/pointer_traits/lwg3545.cc: New test.\n+\t* testsuite/20_util/to_address/1_neg.cc: Adjust dg-error line.\n+\t* testsuite/20_util/to_address/lwg3545.cc: New test.\n+\n+2021-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101608\n+\t* include/bits/ranges_algobase.h (__fill_n_fn): Check for\n+\tconstant evaluation before using memset.\n+\t* testsuite/25_algorithms/fill_n/constrained.cc: Check\n+\tbyte-sized values as well.\n+\n 2021-11-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/libstdc++-prettyprinters/80276.cc: Add xfail for"}]}