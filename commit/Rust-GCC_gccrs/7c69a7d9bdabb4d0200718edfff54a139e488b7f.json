{"sha": "7c69a7d9bdabb4d0200718edfff54a139e488b7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M2OWE3ZDliZGFiYjRkMDIwMDcxOGVkZmZmNTRhMTM5ZTQ4OGI3Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-03-22T14:23:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-03-22T14:23:27Z"}, "message": "PR libstdc++/85040 fix std::less<void> etc. ambiguities\n\n\tPR libstdc++/85040\n\t* include/bits/stl_function.h (greater::__not_overloaded)\n\t(less::__not_overloaded, greater_equal::__not_overloaded)\n\t(less_equal::__not_overloaded): Fix ambiguous specializations.\n\t* testsuite/20_util/function_objects/comparisons_pointer.cc: Add\n\ttests for type with overlaoded operators.\n\nFrom-SVN: r258773", "tree": {"sha": "7afede0eb45c1aeb24a6377f8775913809408748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7afede0eb45c1aeb24a6377f8775913809408748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c69a7d9bdabb4d0200718edfff54a139e488b7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c69a7d9bdabb4d0200718edfff54a139e488b7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c69a7d9bdabb4d0200718edfff54a139e488b7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c69a7d9bdabb4d0200718edfff54a139e488b7f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ece7d31f429306945b5fb8b31496d2725bd74a13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece7d31f429306945b5fb8b31496d2725bd74a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece7d31f429306945b5fb8b31496d2725bd74a13"}], "stats": {"total": 119, "additions": 79, "deletions": 40}, "files": [{"sha": "5d2620dcca07f43ac1d937dbf96fa4800857e566", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c69a7d9bdabb4d0200718edfff54a139e488b7f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c69a7d9bdabb4d0200718edfff54a139e488b7f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7c69a7d9bdabb4d0200718edfff54a139e488b7f", "patch": "@@ -1,3 +1,12 @@\n+2018-03-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/85040\n+\t* include/bits/stl_function.h (greater::__not_overloaded)\n+\t(less::__not_overloaded, greater_equal::__not_overloaded)\n+\t(less_equal::__not_overloaded): Fix ambiguous specializations.\n+\t* testsuite/20_util/function_objects/comparisons_pointer.cc: Add\n+\ttests for type with overlaoded operators.\n+\n 2018-03-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR libstdc++/77691"}, {"sha": "9e81ad3f20e30324ba19c09fd1b5782b7ad35b29", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 36, "deletions": 40, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c69a7d9bdabb4d0200718edfff54a139e488b7f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c69a7d9bdabb4d0200718edfff54a139e488b7f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=7c69a7d9bdabb4d0200718edfff54a139e488b7f", "patch": "@@ -523,15 +523,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      static_cast<const volatile void*>(std::forward<_Up>(__u)));\n \t}\n \n-      template<typename _Tp, typename _Up, typename = void>\n-\tstruct __not_overloaded;\n-\n-      // False if we can call operator>(T,U)\n-      template<typename _Tp, typename _Up>\n-\tstruct __not_overloaded<_Tp, _Up, __void_t<\n-\t  decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>\n-\t: false_type { };\n-\n+      // True if there is no viable operator> member function.\n       template<typename _Tp, typename _Up, typename = void>\n \tstruct __not_overloaded2 : true_type { };\n \n@@ -541,8 +533,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>\n \t: false_type { };\n \n+      // True if there is no overloaded operator> for these operands.\n+      template<typename _Tp, typename _Up, typename = void>\n+\tstruct __not_overloaded : __not_overloaded2<_Tp, _Up> { };\n+\n+      // False if we can call operator>(T,U)\n       template<typename _Tp, typename _Up>\n-\tstruct __not_overloaded<_Tp, _Up> : __not_overloaded2<_Tp, _Up> { };\n+\tstruct __not_overloaded<_Tp, _Up, __void_t<\n+\t  decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>\n+\t: false_type { };\n \n       template<typename _Tp, typename _Up>\n \tusing __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,\n@@ -586,15 +585,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      static_cast<const volatile void*>(std::forward<_Up>(__u)));\n \t}\n \n-      template<typename _Tp, typename _Up, typename = void>\n-\tstruct __not_overloaded;\n-\n-      // False if we can call operator<(T,U)\n-      template<typename _Tp, typename _Up>\n-\tstruct __not_overloaded<_Tp, _Up, __void_t<\n-\t  decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>\n-\t: false_type { };\n-\n+      // True if there is no viable operator< member function.\n       template<typename _Tp, typename _Up, typename = void>\n \tstruct __not_overloaded2 : true_type { };\n \n@@ -604,8 +595,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>\n \t: false_type { };\n \n+      // True if there is no overloaded operator< for these operands.\n+      template<typename _Tp, typename _Up, typename = void>\n+\tstruct __not_overloaded : __not_overloaded2<_Tp, _Up> { };\n+\n+      // False if we can call operator<(T,U)\n       template<typename _Tp, typename _Up>\n-\tstruct __not_overloaded<_Tp, _Up> : __not_overloaded2<_Tp, _Up> { };\n+\tstruct __not_overloaded<_Tp, _Up, __void_t<\n+\t  decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>\n+\t: false_type { };\n \n       template<typename _Tp, typename _Up>\n \tusing __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,\n@@ -649,15 +647,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      static_cast<const volatile void*>(std::forward<_Up>(__u)));\n \t}\n \n-      template<typename _Tp, typename _Up, typename = void>\n-\tstruct __not_overloaded;\n-\n-      // False if we can call operator>=(T,U)\n-      template<typename _Tp, typename _Up>\n-\tstruct __not_overloaded<_Tp, _Up, __void_t<\n-\t  decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>\n-\t: false_type { };\n-\n+      // True if there is no viable operator>= member function.\n       template<typename _Tp, typename _Up, typename = void>\n \tstruct __not_overloaded2 : true_type { };\n \n@@ -667,8 +657,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>\n \t: false_type { };\n \n+      // True if there is no overloaded operator>= for these operands.\n+      template<typename _Tp, typename _Up, typename = void>\n+\tstruct __not_overloaded : __not_overloaded2<_Tp, _Up> { };\n+\n+      // False if we can call operator>=(T,U)\n       template<typename _Tp, typename _Up>\n-\tstruct __not_overloaded<_Tp, _Up> : __not_overloaded2<_Tp, _Up> { };\n+\tstruct __not_overloaded<_Tp, _Up, __void_t<\n+\t  decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>\n+\t: false_type { };\n \n       template<typename _Tp, typename _Up>\n \tusing __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,\n@@ -712,15 +709,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      static_cast<const volatile void*>(std::forward<_Up>(__u)));\n \t}\n \n-      template<typename _Tp, typename _Up, typename = void>\n-\tstruct __not_overloaded;\n-\n-      // False if we can call operator<=(T,U)\n-      template<typename _Tp, typename _Up>\n-\tstruct __not_overloaded<_Tp, _Up, __void_t<\n-\t  decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>\n-\t: false_type { };\n-\n+      // True if there is no viable operator<= member function.\n       template<typename _Tp, typename _Up, typename = void>\n \tstruct __not_overloaded2 : true_type { };\n \n@@ -730,8 +719,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>\n \t: false_type { };\n \n+      // True if there is no overloaded operator<= for these operands.\n+      template<typename _Tp, typename _Up, typename = void>\n+\tstruct __not_overloaded : __not_overloaded2<_Tp, _Up> { };\n+\n+      // False if we can call operator<=(T,U)\n       template<typename _Tp, typename _Up>\n-\tstruct __not_overloaded<_Tp, _Up> : __not_overloaded2<_Tp, _Up> { };\n+\tstruct __not_overloaded<_Tp, _Up, __void_t<\n+\t  decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>\n+\t: false_type { };\n \n       template<typename _Tp, typename _Up>\n \tusing __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,"}, {"sha": "7cec294f8c258b0d0cce0e739b67afa37dc9030b", "filename": "libstdc++-v3/testsuite/20_util/function_objects/comparisons_pointer.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c69a7d9bdabb4d0200718edfff54a139e488b7f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fcomparisons_pointer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c69a7d9bdabb4d0200718edfff54a139e488b7f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fcomparisons_pointer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fcomparisons_pointer.cc?ref=7c69a7d9bdabb4d0200718edfff54a139e488b7f", "patch": "@@ -195,6 +195,39 @@ test05()\n #endif\n }\n \n+struct Overloaded {\n+  bool operator>(int) { return true; }\n+  bool operator<(int) { return false; }\n+  bool operator>=(int) { return true; }\n+  bool operator<=(int) { return false; }\n+};\n+bool operator>(Overloaded, Overloaded) { return false; }\n+bool operator<(Overloaded, Overloaded) { return false; }\n+bool operator>=(Overloaded, Overloaded) { return true; }\n+bool operator<=(Overloaded, Overloaded) { return true; }\n+\n+void\n+test06()\n+{\n+#if __cplusplus >= 201402L\n+  std::greater<void> gt;\n+  std::less<void> lt;\n+  std::greater_equal<void> ge;\n+  std::less_equal<void> le;\n+\n+  Overloaded o;\n+  VERIFY( !gt(o, o) );\n+  VERIFY( !lt(o, o) );\n+  VERIFY( ge(o, o) );\n+  VERIFY( le(o, o) );\n+\n+  VERIFY( gt(o, 1) );\n+  VERIFY( !lt(o, 1) );\n+  VERIFY( ge(o, 1) );\n+  VERIFY( !le(o, 1) );\n+#endif\n+}\n+\n int\n main()\n {\n@@ -203,4 +236,5 @@ main()\n   test03();\n   test04();\n   test05();\n+  test06();\n }"}]}