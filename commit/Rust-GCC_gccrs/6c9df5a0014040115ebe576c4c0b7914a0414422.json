{"sha": "6c9df5a0014040115ebe576c4c0b7914a0414422", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM5ZGY1YTAwMTQwNDAxMTVlYmU1NzZjNGMwYjc5MTRhMDQxNDQyMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-07-04T12:10:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-07-04T12:10:40Z"}, "message": "re PR middle-end/53844 (GCC generates suboptimal code for unused members of classes in some cases on multiple targets.)\n\n2012-07-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/53844\n\t* tree-ssa-dse.c (dse_possible_dead_store_p): Properly handle\n\tthe loop virtual PHI.\n\n\t* g++.dg/tree-ssa/pr53844.C: New testcase.\n\nFrom-SVN: r189256", "tree": {"sha": "5351f6868c854e291586eee626ce32773354d355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5351f6868c854e291586eee626ce32773354d355"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c9df5a0014040115ebe576c4c0b7914a0414422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9df5a0014040115ebe576c4c0b7914a0414422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c9df5a0014040115ebe576c4c0b7914a0414422", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9df5a0014040115ebe576c4c0b7914a0414422/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1b6bbea37bb9e0dfaba80f5d7483fcd7ac9baa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b6bbea37bb9e0dfaba80f5d7483fcd7ac9baa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b6bbea37bb9e0dfaba80f5d7483fcd7ac9baa6"}], "stats": {"total": 101, "additions": 99, "deletions": 2}, "files": [{"sha": "c33c5a5b4b047f2d7aac841df6c1eac176f0fe33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9df5a0014040115ebe576c4c0b7914a0414422/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9df5a0014040115ebe576c4c0b7914a0414422/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c9df5a0014040115ebe576c4c0b7914a0414422", "patch": "@@ -1,3 +1,9 @@\n+2012-07-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53844\n+\t* tree-ssa-dse.c (dse_possible_dead_store_p): Properly handle\n+\tthe loop virtual PHI.\n+\n 2012-07-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53849"}, {"sha": "3d1fda9e16ca6096394ef12c499fddfe329800e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9df5a0014040115ebe576c4c0b7914a0414422/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9df5a0014040115ebe576c4c0b7914a0414422/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c9df5a0014040115ebe576c4c0b7914a0414422", "patch": "@@ -1,3 +1,8 @@\n+2012-07-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53844\n+\t* g++.dg/tree-ssa/pr53844.C: New testcase.\n+\n 2012-07-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53849"}, {"sha": "0be29d86cbfeac67c19e2827454cd970a09f1c75", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr53844.C", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9df5a0014040115ebe576c4c0b7914a0414422/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr53844.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9df5a0014040115ebe576c4c0b7914a0414422/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr53844.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr53844.C?ref=6c9df5a0014040115ebe576c4c0b7914a0414422", "patch": "@@ -0,0 +1,78 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -fdump-tree-optimized-vops\" }\n+\n+struct VBase;\n+\n+//Very minimal numeric vector class where Base provides the policy\n+template<typename Base=VBase>\n+struct Vector : public Base{\n+\t\n+\tinline Vector(const Base& b)\n+\t:Base(b)\n+\t{\n+\t}\n+\n+\t//Assignment from any other sort of Vector\n+\ttemplate<typename Base2>\n+\tvoid operator= (const Vector<Base2>& from)\n+\t{\n+\t\tfor(int i=0; i<100; i++){\n+\t\t\t(*this)[i]=from[i];\n+\t\t}\n+\t}\n+};\n+\n+\n+//Base class to represent pointer as a Vector\n+struct VBase{\n+\tdouble * const my_data;\n+\n+\tdouble& operator[](int i) {\n+\t\treturn my_data[i];\n+\t}\n+\n+\tconst double& operator[](int i) const {\n+\t\treturn my_data[i];\n+\t}\n+};\n+\n+//Base class providing very minimalistic expression template\n+template<class B2> struct ScalarMulExpr\n+{\n+\tconst int& mul;\n+\tconst Vector<B2>& vec;\n+\n+\tint size() const\n+\t{\n+\t\treturn vec.size();\n+\t}\n+\n+\tdouble operator[](int i) const\n+\t{\n+\t\treturn vec[i]*mul;\n+\t}\n+\n+\tScalarMulExpr(const Vector<B2>& vec_, const int& m)\n+\t:mul(m),vec(vec_)\n+\t{\n+\t}\n+};\n+\n+//Allow vector to be multiplied by a scalar\n+template<class B2>\n+Vector<ScalarMulExpr<B2> > operator*(const Vector<B2>& lhs, const int& rhs)\n+{\n+\treturn ScalarMulExpr<B2>(lhs, rhs);\n+}\n+\n+//Test function producing suboptimal asm code\n+void test(const Vector<>& in, Vector<>& out, int i)\n+{\n+\tout=in*1*1*1*1*1*1*1*1*1*1*1;\n+}\n+\n+// There should be a single store remaining, inside the loops.  All\n+// dead stores to unused temporaries should have been removed.\n+\n+// { dg-final { scan-tree-dump-times \"VDEF\" 1 \"optimized\" } }\n+// { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "04cc6ad5009c20e942b98b980df90fd1b30d2eea", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9df5a0014040115ebe576c4c0b7914a0414422/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9df5a0014040115ebe576c4c0b7914a0414422/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=6c9df5a0014040115ebe576c4c0b7914a0414422", "patch": "@@ -94,7 +94,7 @@ dse_possible_dead_store_p (gimple stmt, gimple *use_stmt)\n   temp = stmt;\n   do\n     {\n-      gimple use_stmt;\n+      gimple use_stmt, defvar_def;\n       imm_use_iterator ui;\n       bool fail = false;\n       tree defvar;\n@@ -108,6 +108,7 @@ dse_possible_dead_store_p (gimple stmt, gimple *use_stmt)\n \tdefvar = PHI_RESULT (temp);\n       else\n \tdefvar = gimple_vdef (temp);\n+      defvar_def = temp;\n       temp = NULL;\n       FOR_EACH_IMM_USE_STMT (use_stmt, ui, defvar)\n \t{\n@@ -139,7 +140,14 @@ dse_possible_dead_store_p (gimple stmt, gimple *use_stmt)\n \t\t  fail = true;\n \t\t  BREAK_FROM_IMM_USE_STMT (ui);\n \t\t}\n-\t      temp = use_stmt;\n+\t      /* Do not consider the PHI as use if it dominates the \n+\t         stmt defining the virtual operand we are processing,\n+\t\t we have processed it already in this case.  */\n+\t      if (gimple_bb (defvar_def) != gimple_bb (use_stmt)\n+\t\t  && !dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t      gimple_bb (defvar_def),\n+\t\t\t\t      gimple_bb (use_stmt)))\n+\t\ttemp = use_stmt;\n \t    }\n \t  /* If the statement is a use the store is not dead.  */\n \t  else if (ref_maybe_used_by_stmt_p (use_stmt,"}]}