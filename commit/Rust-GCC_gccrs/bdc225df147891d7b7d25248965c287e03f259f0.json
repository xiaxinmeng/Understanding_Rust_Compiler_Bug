{"sha": "bdc225df147891d7b7d25248965c287e03f259f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRjMjI1ZGYxNDc4OTFkN2I3ZDI1MjQ4OTY1YzI4N2UwM2YyNTlmMA==", "commit": {"author": {"name": "Ranjit Mathew", "email": "rmathew@hotmail.com", "date": "2003-09-17T15:26:59Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-09-17T15:26:59Z"}, "message": "re PR java/9577 (Linker error for legal Java/CNI code if method parameters are reversed)\n\n2003-09-17  Ranjit Mathew  <rmathew@hotmail.com>\n\n\tFixes PR java/9577\n\t* mangle.c (find_compression_record_match): Skip\n\tover a \"6JArray\" (the array template mangled string)\n\tIDENTIFIER_NODE.\n\t(mangle_array_type): Correct minor typo.\n\t(atms): Move definition to the beginning.\n\nFrom-SVN: r71461", "tree": {"sha": "354f4e8b822950fa085e3b8496381b41f9a2936c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/354f4e8b822950fa085e3b8496381b41f9a2936c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdc225df147891d7b7d25248965c287e03f259f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc225df147891d7b7d25248965c287e03f259f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc225df147891d7b7d25248965c287e03f259f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc225df147891d7b7d25248965c287e03f259f0/comments", "author": null, "committer": null, "parents": [{"sha": "25a017631e4436acdab266c85c043946affd07ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a017631e4436acdab266c85c043946affd07ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a017631e4436acdab266c85c043946affd07ae"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "a3cee9517485909d793d3e12f93494fd40972cc5", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc225df147891d7b7d25248965c287e03f259f0/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc225df147891d7b7d25248965c287e03f259f0/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=bdc225df147891d7b7d25248965c287e03f259f0", "patch": "@@ -1,3 +1,12 @@\n+2003-09-17  Ranjit Mathew  <rmathew@hotmail.com>\n+\n+\tFixes PR java/9577\n+\t* mangle.c (find_compression_record_match): Skip\n+\tover a \"6JArray\" (the array template mangled string)\n+\tIDENTIFIER_NODE.\n+\t(mangle_array_type): Correct minor typo.\n+\t(atms): Move definition to the beginning.\n+\n 2003-09-16  Bryce McKinlay  <bryce@mckinlay.net.nz>\n \n \t* class.c (add_miranda_methods): Ensure super-interfaces are laid "}, {"sha": "e545cbc1fac1f070144241ebaf0f06428765700f", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc225df147891d7b7d25248965c287e03f259f0/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc225df147891d7b7d25248965c287e03f259f0/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=bdc225df147891d7b7d25248965c287e03f259f0", "patch": "@@ -67,6 +67,9 @@ struct obstack *mangle_obstack;\n #define MANGLE_RAW_STRING(S) \\\n   obstack_grow (mangle_obstack, (S), sizeof (S)-1)\n \n+/* atms: array template mangled string. */\n+static GTY(()) tree atms;\n+\n /* This is the mangling interface: a decl, a class field (.class) and\n    the vtable. */\n \n@@ -233,7 +236,7 @@ mangle_type (tree type)\n    already seen, so they can be reused. For example, java.lang.Object\n    would generate three entries: two package names and a type. If\n    java.lang.String is presented next, the java.lang will be matched\n-   against the first two entries (and kept for compression as S_0), and\n+   against the first two entries (and kept for compression as S0_), and\n    type String would be added to the table. See mangle_record_type.\n    COMPRESSION_NEXT is the index to the location of the next insertion\n    of an element.  */\n@@ -301,12 +304,16 @@ find_compression_record_match (tree type, tree *next_current)\n \t    i++;\n \t    break;\n \t  }\n+        else if (atms && TREE_VEC_ELT (compression_table, j) == atms)\n+          {\n+            /* Skip over a \"6JArray\". */\n+          }\n \telse\n \t  {\n \t    /* We don't want to match an element that appears in the middle\n \t    of a package name, so skip forward to the next complete type name.\n-\t    IDENTIFIER_NODEs are partial package names while RECORD_TYPEs\n-\t    represent complete type names. */\n+\t    IDENTIFIER_NODEs (except for a \"6JArray\") are partial package\n+            names while RECORD_TYPEs represent complete type names. */\n \t    while (j < compression_next \n \t\t   && TREE_CODE (TREE_VEC_ELT (compression_table, j)) == \n \t\t      IDENTIFIER_NODE)\n@@ -413,11 +420,9 @@ mangle_pointer_type (tree type)\n \n /* Mangle an array type. Search for an easy solution first, then go\n    through the process of finding out whether the bare array type or even\n-   the template indicator where already used an compress appropriately.\n+   the template indicator were already used and compressed appropriately.\n    It handles pointers. */\n \n-/* atms: array template mangled string. */\n-static GTY(()) tree atms;\n static void\n mangle_array_type (tree p_type)\n {\n@@ -436,7 +441,7 @@ mangle_array_type (tree p_type)\n       atms = get_identifier (\"6JArray\");\n     }\n \n-  /* Maybe we have what we're looking in the compression table. */\n+  /* Maybe we have what we're looking for in the compression table. */\n   if ((match = find_compression_array_match (p_type)) >= 0)\n     {\n       emit_compression_string (match);"}]}