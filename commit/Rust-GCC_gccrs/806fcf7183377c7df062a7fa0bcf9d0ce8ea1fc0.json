{"sha": "806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA2ZmNmNzE4MzM3N2M3ZGYwNjJhN2ZhMGJjZjlkMGNlOGVhMWZjMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-09-05T08:54:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-09-05T08:54:14Z"}, "message": "trans.c (adjust_for_implicit_deref): New function.\n\n\t* gcc-interface/trans.c (adjust_for_implicit_deref): New function.\n\t(gnat_to_gnu) <N_Explicit_Dereference>: Translate result type first.\n\t(N_Indexed_Component): Invoke adjust_for_implicit_deref on the prefix.\n\t(N_Slice): Likewise.\n\t(N_Selected_Component): Likewise.  Do not try again to translate it.\n\t(N_Free_Statement): Invoke adjust_for_implicit_deref on the expression.\n\nFrom-SVN: r251699", "tree": {"sha": "684b70e6fa1324bfcc46054aefb1c77695912f6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/684b70e6fa1324bfcc46054aefb1c77695912f6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/comments", "author": null, "committer": null, "parents": [{"sha": "e45f84a5f9cf7e31ae46c6c557f6896d0b1db5c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45f84a5f9cf7e31ae46c6c557f6896d0b1db5c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45f84a5f9cf7e31ae46c6c557f6896d0b1db5c2"}], "stats": {"total": 93, "additions": 77, "deletions": 16}, "files": [{"sha": "61cd24bf370cf4e7b5f3aebf37e3b79c39fc7f33", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0", "patch": "@@ -1,3 +1,12 @@\n+2017-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (adjust_for_implicit_deref): New function.\n+\t(gnat_to_gnu) <N_Explicit_Dereference>: Translate result type first.\n+\t(N_Indexed_Component): Invoke adjust_for_implicit_deref on the prefix.\n+\t(N_Slice): Likewise.\n+\t(N_Selected_Component): Likewise.  Do not try again to translate it.\n+\t(N_Free_Statement): Invoke adjust_for_implicit_deref on the expression.\n+\n 2017-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* repinfo.ads: Document new treatment of dynamic values."}, {"sha": "78d918fcd89c4fe9aa0f0c238ece317074e780ab", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0", "patch": "@@ -242,6 +242,7 @@ static bool addressable_p (tree, tree);\n static tree assoc_to_constructor (Entity_Id, Node_Id, tree);\n static tree pos_to_constructor (Node_Id, tree, Entity_Id);\n static void validate_unchecked_conversion (Node_Id);\n+static Node_Id adjust_for_implicit_deref (Node_Id);\n static tree maybe_implicit_deref (tree);\n static void set_expr_location_from_node (tree, Node_Id, bool = false);\n static void set_gnu_expr_location_from_node (tree, Node_Id);\n@@ -6274,8 +6275,9 @@ gnat_to_gnu (Node_Id gnat_node)\n     /*************************************/\n \n     case N_Explicit_Dereference:\n-      gnu_result = gnat_to_gnu (Prefix (gnat_node));\n+      /* Make sure the designated type is complete before dereferencing.  */\n       gnu_result_type = get_unpadded_type (Etype (gnat_node));\n+      gnu_result = gnat_to_gnu (Prefix (gnat_node));\n       gnu_result = build_unary_op (INDIRECT_REF, NULL_TREE, gnu_result);\n \n       /* If atomic access is required on the RHS, build the atomic load.  */\n@@ -6286,7 +6288,8 @@ gnat_to_gnu (Node_Id gnat_node)\n \n     case N_Indexed_Component:\n       {\n-\ttree gnu_array_object = gnat_to_gnu (Prefix (gnat_node));\n+\ttree gnu_array_object\n+\t  = gnat_to_gnu (adjust_for_implicit_deref (Prefix (gnat_node)));\n \ttree gnu_type;\n \tint ndim;\n \tint i;\n@@ -6399,7 +6402,8 @@ gnat_to_gnu (Node_Id gnat_node)\n \n     case N_Slice:\n       {\n-\ttree gnu_array_object = gnat_to_gnu (Prefix (gnat_node));\n+\ttree gnu_array_object\n+\t  = gnat_to_gnu (adjust_for_implicit_deref (Prefix (gnat_node)));\n \n \tgnu_result_type = get_unpadded_type (Etype (gnat_node));\n \n@@ -6423,7 +6427,8 @@ gnat_to_gnu (Node_Id gnat_node)\n \n     case N_Selected_Component:\n       {\n-\tEntity_Id gnat_prefix = Prefix (gnat_node);\n+\tEntity_Id gnat_prefix\n+\t  = adjust_for_implicit_deref (Prefix (gnat_node));\n \tEntity_Id gnat_field = Entity (Selector_Name (gnat_node));\n \ttree gnu_prefix = gnat_to_gnu (gnat_prefix);\n \n@@ -6456,17 +6461,6 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  {\n \t    tree gnu_field = gnat_to_gnu_field_decl (gnat_field);\n \n-\t    /* If the prefix has incomplete type, try again to translate it.\n-\t       The idea is that the translation of the field just above may\n-\t       have completed it through gnat_to_gnu_entity, in case it is\n-\t       the dereference of an access to Taft Amendment type used in\n-\t       the instantiation of a generic body from an external unit.  */\n-\t    if (!COMPLETE_TYPE_P (TREE_TYPE (gnu_prefix)))\n-\t      {\n-\t\tgnu_prefix = gnat_to_gnu (gnat_prefix);\n-\t\tgnu_prefix = maybe_implicit_deref (gnu_prefix);\n-\t      }\n-\n \t    gnu_result\n \t      = build_component_ref (gnu_prefix, gnu_field,\n \t\t\t\t     (Nkind (Parent (gnat_node))\n@@ -7725,7 +7719,8 @@ gnat_to_gnu (Node_Id gnat_node)\n     case N_Free_Statement:\n       if (!type_annotate_only)\n \t{\n-\t  tree gnu_ptr = gnat_to_gnu (Expression (gnat_node));\n+\t  tree gnu_ptr\n+\t    = gnat_to_gnu (adjust_for_implicit_deref (Expression (gnat_node)));\n \t  tree gnu_ptr_type = TREE_TYPE (gnu_ptr);\n \t  tree gnu_obj_type, gnu_actual_obj_type;\n \n@@ -9913,6 +9908,21 @@ validate_unchecked_conversion (Node_Id gnat_node)\n     }\n }\n \f\n+/* EXP is to be used in a context where access objects are implicitly\n+   dereferenced.  Handle the cases when it is an access object.  */\n+\n+static Node_Id\n+adjust_for_implicit_deref (Node_Id exp)\n+{\n+  Entity_Id type = Underlying_Type (Etype (exp));\n+\n+  /* Make sure the designated type is complete before dereferencing.  */\n+  if (Is_Access_Type (type))\n+    gnat_to_gnu_entity (Designated_Type (type), NULL_TREE, false);\n+\n+  return exp;\n+}\n+\n /* EXP is to be treated as an array or record.  Handle the cases when it is\n    an access object and perform the required dereferences.  */\n "}, {"sha": "f6210be478bd150c2a72757e74141f9ac39b4841", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0", "patch": "@@ -1,3 +1,8 @@\n+2017-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/taft_type4.adb: New test.\n+\t* gnat.dg/taft_type4_pkg.ad[sb]: New helper.\n+\n 2017-09-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82102"}, {"sha": "f6758638a63d1d8f83ed710cb9a45965a73fc17c", "filename": "gcc/testsuite/gnat.dg/taft_type4.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/gcc%2Ftestsuite%2Fgnat.dg%2Ftaft_type4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/gcc%2Ftestsuite%2Fgnat.dg%2Ftaft_type4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftaft_type4.adb?ref=806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0", "patch": "@@ -0,0 +1,10 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatn\" }\n+\n+with Taft_Type4_Pkg; use Taft_Type4_Pkg;\n+\n+procedure Taft_Type4 is\n+  Obj : T;\n+begin\n+  Proc (Obj);\n+end;"}, {"sha": "40039c7cae7e90fa2c8df4e17f1bc7b85c8b6b36", "filename": "gcc/testsuite/gnat.dg/taft_type4_pkg.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/gcc%2Ftestsuite%2Fgnat.dg%2Ftaft_type4_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/gcc%2Ftestsuite%2Fgnat.dg%2Ftaft_type4_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftaft_type4_pkg.adb?ref=806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0", "patch": "@@ -0,0 +1,14 @@\n+with Unchecked_Deallocation;\n+\n+package body Taft_Type4_Pkg is\n+\n+  type Obj_T is null record;\n+\n+  procedure Unchecked_Free is new Unchecked_Deallocation (Obj_T, T);\n+\n+  procedure Proc (L : in out T) is\n+  begin\n+    Unchecked_Free (L);\n+  end;\n+\n+end Taft_Type4_Pkg;"}, {"sha": "6b0dc349c4814bd8591e48adf6fa59a327151f70", "filename": "gcc/testsuite/gnat.dg/taft_type4_pkg.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/gcc%2Ftestsuite%2Fgnat.dg%2Ftaft_type4_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0/gcc%2Ftestsuite%2Fgnat.dg%2Ftaft_type4_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftaft_type4_pkg.ads?ref=806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0", "patch": "@@ -0,0 +1,13 @@\n+package Taft_Type4_Pkg is\n+\n+  type T is private;\n+\n+  procedure Proc (L : in out T);\n+  pragma Inline (Proc);\n+\n+private\n+\n+  type Obj_T;\n+  type T is access Obj_T;\n+\n+end Taft_Type4_Pkg;"}]}