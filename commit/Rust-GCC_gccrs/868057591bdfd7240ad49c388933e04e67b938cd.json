{"sha": "868057591bdfd7240ad49c388933e04e67b938cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY4MDU3NTkxYmRmZDcyNDBhZDQ5YzM4ODkzM2UwNGU2N2I5MzhjZA==", "commit": {"author": {"name": "Nicolas Pitre", "email": "nico@cam.org", "date": "2005-09-01T19:01:20Z"}, "committer": {"name": "Nicolas Pitre", "email": "nico@gcc.gnu.org", "date": "2005-09-01T19:01:20Z"}, "message": "arm.c (arm_legitimize_address): Split absolute addresses to alow matching ARM pre-indexed addressing mode.\n\n* config/arm/arm.c (arm_legitimize_address): Split absolute addresses\nto alow matching ARM pre-indexed addressing mode.\n(arm_override_options): Remove now irrelevant comment.\n\nFrom-SVN: r103742", "tree": {"sha": "3ed7820625fdf8f37679f4b8e034f9c1d176c700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ed7820625fdf8f37679f4b8e034f9c1d176c700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/868057591bdfd7240ad49c388933e04e67b938cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868057591bdfd7240ad49c388933e04e67b938cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/868057591bdfd7240ad49c388933e04e67b938cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868057591bdfd7240ad49c388933e04e67b938cd/comments", "author": null, "committer": null, "parents": [{"sha": "d442d7d9dd849cf41b0a287662dfa8384a5fa8fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d442d7d9dd849cf41b0a287662dfa8384a5fa8fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d442d7d9dd849cf41b0a287662dfa8384a5fa8fb"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "5c8abe538c9e08c12f3d0a7a8dcde24bbc7dc030", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868057591bdfd7240ad49c388933e04e67b938cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868057591bdfd7240ad49c388933e04e67b938cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=868057591bdfd7240ad49c388933e04e67b938cd", "patch": "@@ -1,3 +1,9 @@\n+2005-09-01  Nicolas Pitre <nico@cam.org>\n+\n+\t* config/arm/arm.c (arm_legitimize_address): Split absolute addresses\n+\tto alow matching ARM pre-indexed addressing mode.\n+\t(arm_override_options): Remove now irrelevant comment.\n+\n 2005-09-01  Phil Edwards  <phil@codesourcery.com>\n \n \t* config.gcc (i*86-wrs-vxworks):  Update.  Split out vxworksae target."}, {"sha": "128edb699e292f99677888d075deeb3c8518e80b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868057591bdfd7240ad49c388933e04e67b938cd/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868057591bdfd7240ad49c388933e04e67b938cd/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=868057591bdfd7240ad49c388933e04e67b938cd", "patch": "@@ -1234,10 +1234,6 @@ arm_override_options (void)\n \n   if (optimize_size)\n     {\n-      /* There's some dispute as to whether this should be 1 or 2.  However,\n-\t experiments seem to show that in pathological cases a setting of\n-\t 1 degrades less severely than a setting of 2.  This could change if\n-\t other parts of the compiler change their behavior.  */\n       arm_constant_limit = 1;\n \n       /* If optimizing for size, bump the number of instructions that we\n@@ -3759,6 +3755,34 @@ arm_legitimize_address (rtx x, rtx orig_x, enum machine_mode mode)\n \tx = gen_rtx_MINUS (SImode, xop0, xop1);\n     }\n \n+  /* Make sure to take full advantage of the pre-indexed addressing mode\n+     with absolute addresses which often allows for the base register to\n+     be factorized for multiple adjacent memory references, and it might\n+     even allows for the mini pool to be avoided entirely. */\n+  else if (GET_CODE (x) == CONST_INT && optimize > 0)\n+    {\n+      unsigned int bits;\n+      HOST_WIDE_INT mask, base, index;\n+      rtx base_reg;\n+\n+      /* ldr and ldrb can use a 12 bit index, ldrsb and the rest can only\n+         use a 8 bit index. So let's use a 12 bit index for SImode only and\n+         hope that arm_gen_constant will enable ldrb to use more bits. */\n+      bits = (mode == SImode) ? 12 : 8;\n+      mask = (1 << bits) - 1;\n+      base = INTVAL (x) & ~mask;\n+      index = INTVAL (x) & mask;\n+      if (bit_count (base) > (32 - bits)/2)\n+        {\n+\t  /* It'll most probably be more efficient to generate the base\n+\t     with more bits set and use a negative index instead. */\n+\t  base |= mask;\n+\t  index -= mask;\n+\t}\n+      base_reg = force_reg (SImode, GEN_INT (base));\n+      x = gen_rtx_PLUS (SImode, base_reg, GEN_INT (index));\n+    }\n+\n   if (flag_pic)\n     {\n       /* We need to find and carefully transform any SYMBOL and LABEL"}]}