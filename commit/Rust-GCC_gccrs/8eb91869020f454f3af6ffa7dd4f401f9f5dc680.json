{"sha": "8eb91869020f454f3af6ffa7dd4f401f9f5dc680", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGViOTE4NjkwMjBmNDU0ZjNhZjZmZmE3ZGQ0ZjQwMWY5ZjVkYzY4MA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2017-08-29T14:41:53Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2017-08-29T14:41:53Z"}, "message": "re PR tree-optimization/81503 (Wrong code at -O2)\n\n[gcc]\n\n2017-08-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\t    Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81503\n\t* gimple-ssa-strength-reduction.c (replace_mult_candidate): Ensure\n\tfolded constant fits in the target type; reorder tests for clarity.\n\n[gcc/testsuite]\n\n2017-08-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/81503\n\t* gcc.c-torture/execute/pr81503.c: New file.\n\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\nCo-Authored-By: Richard Biener <rguenther@suse.de>\n\nFrom-SVN: r251414", "tree": {"sha": "19ab13514dabe8402f00630db523b30c00b46403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19ab13514dabe8402f00630db523b30c00b46403"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eb91869020f454f3af6ffa7dd4f401f9f5dc680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb91869020f454f3af6ffa7dd4f401f9f5dc680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb91869020f454f3af6ffa7dd4f401f9f5dc680", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb91869020f454f3af6ffa7dd4f401f9f5dc680/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9dc3d6a96167b4c84824be5e472fba4956297033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc3d6a96167b4c84824be5e472fba4956297033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dc3d6a96167b4c84824be5e472fba4956297033"}], "stats": {"total": 192, "additions": 110, "deletions": 82}, "files": [{"sha": "f1037f6fea110aca3886b1ddd0b9b580008b852e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb91869020f454f3af6ffa7dd4f401f9f5dc680/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb91869020f454f3af6ffa7dd4f401f9f5dc680/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8eb91869020f454f3af6ffa7dd4f401f9f5dc680", "patch": "@@ -1,3 +1,11 @@\n+2017-08-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81503\n+\t* gimple-ssa-strength-reduction.c (replace_mult_candidate): Ensure\n+\tfolded constant fits in the target type; reorder tests for clarity.\n+\n 2017-08-29  Martin Liska  <mliska@suse.cz>\n \n \t* passes.def: Include pass_lower_switch."}, {"sha": "8fe7c1776c1f155d6b484df009b5b56b8097694e", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 82, "deletions": 82, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb91869020f454f3af6ffa7dd4f401f9f5dc680/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb91869020f454f3af6ffa7dd4f401f9f5dc680/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=8eb91869020f454f3af6ffa7dd4f401f9f5dc680", "patch": "@@ -2089,104 +2089,104 @@ replace_mult_candidate (slsr_cand_t c, tree basis_name, widest_int bump)\n   tree target_type = TREE_TYPE (gimple_assign_lhs (c->cand_stmt));\n   enum tree_code cand_code = gimple_assign_rhs_code (c->cand_stmt);\n \n-  /* It is highly unlikely, but possible, that the resulting\n-     bump doesn't fit in a HWI.  Abandon the replacement\n-     in this case.  This does not affect siblings or dependents\n-     of C.  Restriction to signed HWI is conservative for unsigned\n-     types but allows for safe negation without twisted logic.  */\n-  if (wi::fits_shwi_p (bump)\n-      && bump.to_shwi () != HOST_WIDE_INT_MIN\n-      /* It is not useful to replace casts, copies, negates, or adds of\n-\t an SSA name and a constant.  */\n-      && cand_code != SSA_NAME\n-      && !CONVERT_EXPR_CODE_P (cand_code)\n-      && cand_code != PLUS_EXPR\n-      && cand_code != POINTER_PLUS_EXPR\n-      && cand_code != MINUS_EXPR\n-      && cand_code != NEGATE_EXPR)\n-    {\n-      enum tree_code code = PLUS_EXPR;\n-      tree bump_tree;\n-      gimple *stmt_to_print = NULL;\n+  /* It is not useful to replace casts, copies, negates, or adds of\n+     an SSA name and a constant.  */\n+  if (cand_code == SSA_NAME\n+      || CONVERT_EXPR_CODE_P (cand_code)\n+      || cand_code == PLUS_EXPR\n+      || cand_code == POINTER_PLUS_EXPR\n+      || cand_code == MINUS_EXPR\n+      || cand_code == NEGATE_EXPR)\n+    return;\n \n-      /* If the basis name and the candidate's LHS have incompatible\n-\t types, introduce a cast.  */\n-      if (!useless_type_conversion_p (target_type, TREE_TYPE (basis_name)))\n-\tbasis_name = introduce_cast_before_cand (c, target_type, basis_name);\n-      if (wi::neg_p (bump))\n-\t{\n-\t  code = MINUS_EXPR;\n-\t  bump = -bump;\n-\t}\n+  enum tree_code code = PLUS_EXPR;\n+  tree bump_tree;\n+  gimple *stmt_to_print = NULL;\n \n-      bump_tree = wide_int_to_tree (target_type, bump);\n+  if (wi::neg_p (bump))\n+    {\n+      code = MINUS_EXPR;\n+      bump = -bump;\n+    }\n+\n+  /* It is possible that the resulting bump doesn't fit in target_type.\n+     Abandon the replacement in this case.  This does not affect\n+     siblings or dependents of C.  */\n+  if (bump != wi::ext (bump, TYPE_PRECISION (target_type),\n+\t\t       TYPE_SIGN (target_type)))\n+    return;\n+\n+  bump_tree = wide_int_to_tree (target_type, bump);\n+\n+  /* If the basis name and the candidate's LHS have incompatible types,\n+     introduce a cast.  */\n+  if (!useless_type_conversion_p (target_type, TREE_TYPE (basis_name)))\n+    basis_name = introduce_cast_before_cand (c, target_type, basis_name);\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fputs (\"Replacing: \", dump_file);\n+      print_gimple_stmt (dump_file, c->cand_stmt, 0);\n+    }\n \n+  if (bump == 0)\n+    {\n+      tree lhs = gimple_assign_lhs (c->cand_stmt);\n+      gassign *copy_stmt = gimple_build_assign (lhs, basis_name);\n+      gimple_stmt_iterator gsi = gsi_for_stmt (c->cand_stmt);\n+      slsr_cand_t cc = c;\n+      gimple_set_location (copy_stmt, gimple_location (c->cand_stmt));\n+      gsi_replace (&gsi, copy_stmt, false);\n+      c->cand_stmt = copy_stmt;\n+      while (cc->next_interp)\n+\t{\n+\t  cc = lookup_cand (cc->next_interp);\n+\t  cc->cand_stmt = copy_stmt;\n+\t}\n       if (dump_file && (dump_flags & TDF_DETAILS))\n+\tstmt_to_print = copy_stmt;\n+    }\n+  else\n+    {\n+      tree rhs1, rhs2;\n+      if (cand_code != NEGATE_EXPR) {\n+\trhs1 = gimple_assign_rhs1 (c->cand_stmt);\n+\trhs2 = gimple_assign_rhs2 (c->cand_stmt);\n+      }\n+      if (cand_code != NEGATE_EXPR\n+\t  && ((operand_equal_p (rhs1, basis_name, 0)\n+\t       && operand_equal_p (rhs2, bump_tree, 0))\n+\t      || (operand_equal_p (rhs1, bump_tree, 0)\n+\t\t  && operand_equal_p (rhs2, basis_name, 0))))\n \t{\n-\t  fputs (\"Replacing: \", dump_file);\n-\t  print_gimple_stmt (dump_file, c->cand_stmt, 0);\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fputs (\"(duplicate, not actually replacing)\", dump_file);\n+\t      stmt_to_print = c->cand_stmt;\n+\t    }\n \t}\n-\n-      if (bump == 0)\n+      else\n \t{\n-\t  tree lhs = gimple_assign_lhs (c->cand_stmt);\n-\t  gassign *copy_stmt = gimple_build_assign (lhs, basis_name);\n \t  gimple_stmt_iterator gsi = gsi_for_stmt (c->cand_stmt);\n \t  slsr_cand_t cc = c;\n-\t  gimple_set_location (copy_stmt, gimple_location (c->cand_stmt));\n-\t  gsi_replace (&gsi, copy_stmt, false);\n-\t  c->cand_stmt = copy_stmt;\n+\t  gimple_assign_set_rhs_with_ops (&gsi, code, basis_name, bump_tree);\n+\t  update_stmt (gsi_stmt (gsi));\n+\t  c->cand_stmt = gsi_stmt (gsi);\n \t  while (cc->next_interp)\n \t    {\n \t      cc = lookup_cand (cc->next_interp);\n-\t      cc->cand_stmt = copy_stmt;\n+\t      cc->cand_stmt = gsi_stmt (gsi);\n \t    }\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    stmt_to_print = copy_stmt;\n-\t}\n-      else\n-\t{\n-\t  tree rhs1, rhs2;\n-\t  if (cand_code != NEGATE_EXPR) {\n-\t    rhs1 = gimple_assign_rhs1 (c->cand_stmt);\n-\t    rhs2 = gimple_assign_rhs2 (c->cand_stmt);\n-\t  }\n-\t  if (cand_code != NEGATE_EXPR\n-\t      && ((operand_equal_p (rhs1, basis_name, 0)\n-\t\t   && operand_equal_p (rhs2, bump_tree, 0))\n-\t\t  || (operand_equal_p (rhs1, bump_tree, 0)\n-\t\t      && operand_equal_p (rhs2, basis_name, 0))))\n-\t    {\n-\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t{\n-\t\t  fputs (\"(duplicate, not actually replacing)\", dump_file);\n-\t\t  stmt_to_print = c->cand_stmt;\n-\t\t}\n-\t    }\n-\t  else\n-\t    {\n-\t      gimple_stmt_iterator gsi = gsi_for_stmt (c->cand_stmt);\n-\t      slsr_cand_t cc = c;\n-\t      gimple_assign_set_rhs_with_ops (&gsi, code,\n-\t\t\t\t\t      basis_name, bump_tree);\n-\t      update_stmt (gsi_stmt (gsi));\n-              c->cand_stmt = gsi_stmt (gsi);\n-\t      while (cc->next_interp)\n-\t\t{\n-\t\t  cc = lookup_cand (cc->next_interp);\n-\t\t  cc->cand_stmt = gsi_stmt (gsi);\n-\t\t}\n-\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\tstmt_to_print = gsi_stmt (gsi);\n-\t    }\n+\t    stmt_to_print = gsi_stmt (gsi);\n \t}\n+    }\n   \n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  fputs (\"With: \", dump_file);\n-\t  print_gimple_stmt (dump_file, stmt_to_print, 0);\n-\t  fputs (\"\\n\", dump_file);\n-  \t}\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fputs (\"With: \", dump_file);\n+      print_gimple_stmt (dump_file, stmt_to_print, 0);\n+      fputs (\"\\n\", dump_file);\n     }\n }\n "}, {"sha": "23fc3989a504a18c327882d1adac2bbfdd4f6d06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb91869020f454f3af6ffa7dd4f401f9f5dc680/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb91869020f454f3af6ffa7dd4f401f9f5dc680/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8eb91869020f454f3af6ffa7dd4f401f9f5dc680", "patch": "@@ -1,3 +1,8 @@\n+2017-08-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/81503\n+\t* gcc.c-torture/execute/pr81503.c: New file.\n+\n 2017-08-29  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/tree-prof/update-loopch.c: Scan patterns in"}, {"sha": "5fc6cb0e83c9215a839348956d1c0168e73509e1", "filename": "gcc/testsuite/gcc.c-torture/execute/pr81503.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb91869020f454f3af6ffa7dd4f401f9f5dc680/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81503.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb91869020f454f3af6ffa7dd4f401f9f5dc680/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81503.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81503.c?ref=8eb91869020f454f3af6ffa7dd4f401f9f5dc680", "patch": "@@ -0,0 +1,15 @@\n+unsigned short a = 41461;\n+unsigned short b = 3419;\n+int c = 0;\n+\n+void foo() {\n+  if (a + b * ~(0 != 5))\n+    c = -~(b * ~(0 != 5)) + 2147483647;\n+}\n+\n+int main() {\n+  foo();\n+  if (c != 2147476810)\n+    return -1;\n+  return 0;\n+}"}]}