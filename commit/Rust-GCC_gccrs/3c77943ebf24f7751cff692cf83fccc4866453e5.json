{"sha": "3c77943ebf24f7751cff692cf83fccc4866453e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3Nzk0M2ViZjI0Zjc3NTFjZmY2OTJjZjgzZmNjYzQ4NjY0NTNlNQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2017-04-25T10:08:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T10:08:00Z"}, "message": "checks.adb (Determine_Range_R): Special case type conversions from integer to float in order to get bounds in...\n\n2017-04-25  Yannick Moy  <moy@adacore.com>\n\n\t* checks.adb (Determine_Range_R): Special case type conversions\n\tfrom integer to float in order to get bounds in that case too.\n\t* eval_fat.adb (Machine): Avoid issuing warnings in GNATprove\n\tmode, for computations involved in interval checking.\n\nFrom-SVN: r247172", "tree": {"sha": "19cc2c37b4fab98bb4e59452146fcf1789f27587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19cc2c37b4fab98bb4e59452146fcf1789f27587"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c77943ebf24f7751cff692cf83fccc4866453e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c77943ebf24f7751cff692cf83fccc4866453e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c77943ebf24f7751cff692cf83fccc4866453e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c77943ebf24f7751cff692cf83fccc4866453e5/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "468afa1adac2c78fbe8c4c427d41d3697168ec99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/468afa1adac2c78fbe8c4c427d41d3697168ec99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/468afa1adac2c78fbe8c4c427d41d3697168ec99"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "3c9e1ac23911ab5db5c3b40eb7743a0add14b6da", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c77943ebf24f7751cff692cf83fccc4866453e5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c77943ebf24f7751cff692cf83fccc4866453e5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3c77943ebf24f7751cff692cf83fccc4866453e5", "patch": "@@ -1,3 +1,10 @@\n+2017-04-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* checks.adb (Determine_Range_R): Special case type conversions\n+\tfrom integer to float in order to get bounds in that case too.\n+\t* eval_fat.adb (Machine): Avoid issuing warnings in GNATprove\n+\tmode, for computations involved in interval checking.\n+\n 2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* checks.adb (Insert_Valid_Check): Partially reimplement validity"}, {"sha": "9bf008ba69c45b163dda66755fb2723a42b67ee4", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c77943ebf24f7751cff692cf83fccc4866453e5/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c77943ebf24f7751cff692cf83fccc4866453e5/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=3c77943ebf24f7751cff692cf83fccc4866453e5", "patch": "@@ -5119,11 +5119,33 @@ package body Checks is\n                end if;\n             end if;\n \n-         --  For type conversion from one floating-point type to another, we\n-         --  can refine the range using the converted value.\n-\n          when N_Type_Conversion =>\n-            Determine_Range_R (Expression (N), OK1, Lor, Hir, Assume_Valid);\n+\n+            --  For type conversion from one floating-point type to another, we\n+            --  can refine the range using the converted value.\n+\n+            if Is_Floating_Point_Type (Etype (Expression (N))) then\n+               Determine_Range_R (Expression (N), OK1, Lor, Hir, Assume_Valid);\n+\n+            --  When converting an integer to a floating-point type, determine\n+            --  the range in integer first, and then convert the bounds.\n+\n+            elsif Is_Discrete_Type (Etype (Expression (N))) then\n+               declare\n+                  Lor_Int, Hir_Int : Uint;\n+               begin\n+                  Determine_Range (Expression (N), OK1, Lor_Int, Hir_Int,\n+                                   Assume_Valid);\n+\n+                  if OK1 then\n+                     Lor := Round_Machine (UR_From_Uint (Lor_Int));\n+                     Hir := Round_Machine (UR_From_Uint (Hir_Int));\n+                  end if;\n+               end;\n+\n+            else\n+               OK1 := False;\n+            end if;\n \n          --  Nothing special to do for all other expression kinds\n "}, {"sha": "394098ad7a1f7cdbe6cc0153b40e63c7f1d8c707", "filename": "gcc/ada/eval_fat.adb", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c77943ebf24f7751cff692cf83fccc4866453e5/gcc%2Fada%2Feval_fat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c77943ebf24f7751cff692cf83fccc4866453e5/gcc%2Fada%2Feval_fat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feval_fat.adb?ref=3c77943ebf24f7751cff692cf83fccc4866453e5", "patch": "@@ -25,6 +25,7 @@\n \n with Einfo;    use Einfo;\n with Errout;   use Errout;\n+with Opt;      use Opt;\n with Sem_Util; use Sem_Util;\n \n package body Eval_Fat is\n@@ -505,15 +506,23 @@ package body Eval_Fat is\n             Emin_Den : constant UI := Machine_Emin_Value (RT)\n                                         - Machine_Mantissa_Value (RT) + Uint_1;\n          begin\n+            --  Do not issue warnings about underflows in GNATprove mode,\n+            --  as calling Machine as part of interval checking may lead\n+            --  to spurious warnings.\n+\n             if X_Exp < Emin_Den or not Has_Denormals (RT) then\n                if Has_Signed_Zeros (RT) and then UR_Is_Negative (X) then\n-                  Error_Msg_N\n-                    (\"floating-point value underflows to -0.0??\", Enode);\n+                  if not GNATprove_Mode then\n+                     Error_Msg_N\n+                       (\"floating-point value underflows to -0.0??\", Enode);\n+                  end if;\n                   return Ureal_M_0;\n \n                else\n-                  Error_Msg_N\n-                    (\"floating-point value underflows to 0.0??\", Enode);\n+                  if not GNATprove_Mode then\n+                     Error_Msg_N\n+                       (\"floating-point value underflows to 0.0??\", Enode);\n+                  end if;\n                   return Ureal_0;\n                end if;\n \n@@ -543,10 +552,16 @@ package body Eval_Fat is\n                      UR_Is_Negative (X));\n \n                begin\n+                  --  Do not issue warnings about loss of precision in\n+                  --  GNATprove mode, as calling Machine as part of\n+                  --  interval checking may lead to spurious warnings.\n+\n                   if X_Frac_Denorm /= X_Frac then\n-                     Error_Msg_N\n-                       (\"gradual underflow causes loss of precision??\",\n-                        Enode);\n+                     if not GNATprove_Mode then\n+                        Error_Msg_N\n+                          (\"gradual underflow causes loss of precision??\",\n+                           Enode);\n+                     end if;\n                      X_Frac := X_Frac_Denorm;\n                   end if;\n                end;"}]}