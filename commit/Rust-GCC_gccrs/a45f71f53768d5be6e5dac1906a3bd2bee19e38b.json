{"sha": "a45f71f53768d5be6e5dac1906a3bd2bee19e38b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ1ZjcxZjUzNzY4ZDViZTZlNWRhYzE5MDZhM2JkMmJlZTE5ZTM4Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2004-09-15T09:05:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2004-09-15T09:05:03Z"}, "message": "expr.c (string_constant): Handle also read-only variables initialized to string literals.\n\n\t* expr.c (string_constant): Handle also read-only variables\n\tinitialized to string literals.\n\n\t* gcc.c-torture/execute/builtins/strlen-3.c: New test.\n\t* gcc.c-torture/execute/builtins/strlen-3-lib.c: New.\n\nFrom-SVN: r87540", "tree": {"sha": "0cbdbd1cbd67bff87c68a499e533bf6a9938dc68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cbdbd1cbd67bff87c68a499e533bf6a9938dc68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a45f71f53768d5be6e5dac1906a3bd2bee19e38b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45f71f53768d5be6e5dac1906a3bd2bee19e38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45f71f53768d5be6e5dac1906a3bd2bee19e38b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45f71f53768d5be6e5dac1906a3bd2bee19e38b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a520f407392f0a984e7b74aa819e9f6eb3b0b90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a520f407392f0a984e7b74aa819e9f6eb3b0b90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a520f407392f0a984e7b74aa819e9f6eb3b0b90"}], "stats": {"total": 165, "additions": 148, "deletions": 17}, "files": [{"sha": "0696e50aa768849c157ab7a7204dd7095c48496f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45f71f53768d5be6e5dac1906a3bd2bee19e38b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45f71f53768d5be6e5dac1906a3bd2bee19e38b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a45f71f53768d5be6e5dac1906a3bd2bee19e38b", "patch": "@@ -1,5 +1,8 @@\n 2004-09-15  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* expr.c (string_constant): Handle also read-only variables\n+\tinitialized to string literals.\n+\n \t* builtins.c (expand_builtin_memmove): Optimize memmove (x, y, 1)\n \tinto memcpy (x, y, 1) if memcpy can be expanded inline.\n "}, {"sha": "e5ed2f654c504dea67c8813d11ba49fb8d5f6b74", "filename": "gcc/expr.c", "status": "modified", "additions": 73, "deletions": 17, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45f71f53768d5be6e5dac1906a3bd2bee19e38b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45f71f53768d5be6e5dac1906a3bd2bee19e38b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a45f71f53768d5be6e5dac1906a3bd2bee19e38b", "patch": "@@ -8299,20 +8299,31 @@ is_aligning_offset (tree offset, tree exp)\n tree\n string_constant (tree arg, tree *ptr_offset)\n {\n+  tree array, offset;\n   STRIP_NOPS (arg);\n \n-  if (TREE_CODE (arg) == ADDR_EXPR\n-      && TREE_CODE (TREE_OPERAND (arg, 0)) == STRING_CST)\n+  if (TREE_CODE (arg) == ADDR_EXPR)\n     {\n-      *ptr_offset = size_zero_node;\n-      return TREE_OPERAND (arg, 0);\n-    }\n-  if (TREE_CODE (arg) == ADDR_EXPR\n-      && TREE_CODE (TREE_OPERAND (arg, 0)) == ARRAY_REF\n-      && TREE_CODE (TREE_OPERAND (TREE_OPERAND (arg, 0), 0)) == STRING_CST)\n-    {\n-      *ptr_offset = convert (sizetype, TREE_OPERAND (TREE_OPERAND (arg, 0), 1));\n-      return TREE_OPERAND (TREE_OPERAND (arg, 0), 0);\n+      if (TREE_CODE (TREE_OPERAND (arg, 0)) == STRING_CST)\n+\t{\n+\t  *ptr_offset = size_zero_node;\n+\t  return TREE_OPERAND (arg, 0);\n+\t}\n+      else if (TREE_CODE (TREE_OPERAND (arg, 0)) == VAR_DECL)\n+\t{\n+\t  array = TREE_OPERAND (arg, 0);\n+\t  offset = size_zero_node;\n+\t}\n+      else if (TREE_CODE (TREE_OPERAND (arg, 0)) == ARRAY_REF)\n+\t{\n+\t  array = TREE_OPERAND (TREE_OPERAND (arg, 0), 0);\n+\t  offset = TREE_OPERAND (TREE_OPERAND (arg, 0), 1);\n+\t  if (TREE_CODE (array) != STRING_CST\n+\t      && TREE_CODE (array) != VAR_DECL)\n+\t    return 0;\n+\t}\n+      else\n+\treturn 0;\n     }\n   else if (TREE_CODE (arg) == PLUS_EXPR)\n     {\n@@ -8323,17 +8334,62 @@ string_constant (tree arg, tree *ptr_offset)\n       STRIP_NOPS (arg1);\n \n       if (TREE_CODE (arg0) == ADDR_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (arg0, 0)) == STRING_CST)\n+\t  && (TREE_CODE (TREE_OPERAND (arg0, 0)) == STRING_CST\n+\t      || TREE_CODE (TREE_OPERAND (arg0, 0)) == VAR_DECL))\n \t{\n-\t  *ptr_offset = convert (sizetype, arg1);\n-\t  return TREE_OPERAND (arg0, 0);\n+\t  array = TREE_OPERAND (arg0, 0);\n+\t  offset = arg1;\n \t}\n       else if (TREE_CODE (arg1) == ADDR_EXPR\n-\t       && TREE_CODE (TREE_OPERAND (arg1, 0)) == STRING_CST)\n+\t       && (TREE_CODE (TREE_OPERAND (arg1, 0)) == STRING_CST\n+\t\t   || TREE_CODE (TREE_OPERAND (arg1, 0)) == VAR_DECL))\n \t{\n-\t  *ptr_offset = convert (sizetype, arg0);\n-\t  return TREE_OPERAND (arg1, 0);\n+\t  array = TREE_OPERAND (arg1, 0);\n+\t  offset = arg0;\n \t}\n+      else\n+\treturn 0;\n+    }\n+  else\n+    return 0;\n+\n+  if (TREE_CODE (array) == STRING_CST)\n+    {\n+      *ptr_offset = convert (sizetype, offset);\n+      return array;\n+    }\n+  else if (TREE_CODE (array) == VAR_DECL)\n+    {\n+      int length;\n+\n+      /* Variables initialized to string literals can be handled too.  */\n+      if (DECL_INITIAL (array) == NULL_TREE\n+\t  || TREE_CODE (DECL_INITIAL (array)) != STRING_CST)\n+\treturn 0;\n+\n+      /* If they are read-only, non-volatile and bind locally.  */\n+      if (! TREE_READONLY (array)\n+\t  || TREE_SIDE_EFFECTS (array)\n+\t  || ! targetm.binds_local_p (array))\n+\treturn 0;\n+\n+      /* Avoid const char foo[4] = \"abcde\";  */\n+      if (DECL_SIZE_UNIT (array) == NULL_TREE\n+\t  || TREE_CODE (DECL_SIZE_UNIT (array)) != INTEGER_CST\n+\t  || (length = TREE_STRING_LENGTH (DECL_INITIAL (array))) <= 0\n+\t  || compare_tree_int (DECL_SIZE_UNIT (array), length) < 0)\n+\treturn 0;\n+\n+      /* If variable is bigger than the string literal, OFFSET must be constant\n+\t and inside of the bounds of the string literal.  */\n+      offset = convert (sizetype, offset);\n+      if (compare_tree_int (DECL_SIZE_UNIT (array), length) > 0\n+\t  && (! host_integerp (offset, 1)\n+\t      || compare_tree_int (offset, length) >= 0))\n+\treturn 0;\n+\n+      *ptr_offset = offset;\n+      return DECL_INITIAL (array);\n     }\n \n   return 0;"}, {"sha": "d2d481d14013745ba113ce2bf049cb713e719d6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45f71f53768d5be6e5dac1906a3bd2bee19e38b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45f71f53768d5be6e5dac1906a3bd2bee19e38b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a45f71f53768d5be6e5dac1906a3bd2bee19e38b", "patch": "@@ -1,5 +1,8 @@\n 2004-09-15  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.c-torture/execute/builtins/strlen-3.c: New test.\n+\t* gcc.c-torture/execute/builtins/strlen-3-lib.c: New.\n+\n \t* gcc.c-torture/execute/builtins/memmove.c (main_test): Formatting.\n \t* gcc.c-torture/execute/builtins/memmove-2.c: New test.\n \t* gcc.c-torture/execute/builtins/memmove-2-lib.c: New."}, {"sha": "9753c2498f1afd86dcc4a1db5232a91276a8234c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strlen-3-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45f71f53768d5be6e5dac1906a3bd2bee19e38b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-3-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45f71f53768d5be6e5dac1906a3bd2bee19e38b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-3-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-3-lib.c?ref=a45f71f53768d5be6e5dac1906a3bd2bee19e38b", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strlen.c\""}, {"sha": "f912c0267db1a3f48a0a6418fef7658594309c6e", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strlen-3.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45f71f53768d5be6e5dac1906a3bd2bee19e38b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45f71f53768d5be6e5dac1906a3bd2bee19e38b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-3.c?ref=a45f71f53768d5be6e5dac1906a3bd2bee19e38b", "patch": "@@ -0,0 +1,68 @@\n+/* Copyright (C) 2004  Free Software Foundation.\n+\n+   Test strlen on const variables initialized to string literals.\n+\n+   Written by Jakub Jelinek, 9/14/2004.  */\n+\n+extern void abort (void);\n+extern __SIZE_TYPE__ strlen (const char *);\n+extern char *strcpy (char *, const char *);\n+const char bar[] = \"Hello, World!\";\n+const char baz[] = \"hello, world?\";\n+const char larger[20] = \"short string\";\n+extern volatile int inside_main;\n+\n+int l1 = 1;\n+int x = 6;\n+\n+void\n+main_test(void)\n+{\n+  const char *foo;\n+  int i;\n+\n+  if (strlen (bar) != 13)\n+    abort ();\n+\n+  if (strlen (bar + 3) != 10)\n+    abort ();\n+\n+  if (strlen (&bar[6]) != 7)\n+    abort ();\n+\n+  if (strlen (bar + (x++ & 7)) != 7)\n+    abort ();\n+  if (x != 7)\n+    abort ();\n+\n+#ifdef __OPTIMIZE__\n+  foo = bar;\n+  for (i = 0; i < 4; ++i)\n+    {\n+      if (i == l1 - 1)\n+\tfoo = \"HELLO, WORLD!\";\n+      else if (i == l1)\n+\tfoo = bar;\n+      else if (i == l1 + 1)\n+\tfoo = \"hello, world!\";\n+      else\n+\tfoo = baz;\n+    }\n+  if (strlen (foo) != 13)\n+    abort ();\n+#endif\n+\n+  if (strlen (larger) != 12)\n+    abort ();\n+  if (strlen (&larger[10]) != 2)\n+    abort ();\n+\n+  inside_main = 0;\n+  /* This will result in strlen call, because larger\n+     array is bigger than its initializer.  */\n+  if (strlen (larger + (x++ & 7)) != 5)\n+    abort ();\n+  if (x != 8)\n+    abort ();\n+  inside_main = 1;\n+}"}]}