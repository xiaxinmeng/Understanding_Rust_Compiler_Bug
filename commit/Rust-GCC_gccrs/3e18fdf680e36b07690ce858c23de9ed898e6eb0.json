{"sha": "3e18fdf680e36b07690ce858c23de9ed898e6eb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UxOGZkZjY4MGUzNmIwNzY5MGNlODU4YzIzZGU5ZWQ4OThlNmViMA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-05-04T06:31:27Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-05-04T06:31:27Z"}, "message": "invoke.texi (i386 Options): Delete references to -malign-jumps, -malign-loops, -malign-functions.\n\n\t* invoke.texi (i386 Options): Delete references to -malign-jumps,\n\t-malign-loops, -malign-functions.\n\t* i386.c (ix86_align_funcs): Delete.\n\t(ix86_align_loops): Delete.\n\t(ix86_align_jumps): Delete.\n\t(override_options): Mark -malign-* as obsolete.  Emulate their\n\tbehaviour with the -falign-* options.  Default -falign-* from\n\tthe processor table.\n\t* i386.h (FUNCTION_BOUNDARY): Define to 16; revert Richard Kenner's\n\tpatch of Wed May 2 13:09:36 2001.\n\t(LOOP_ALIGN): Delete.\n\t(LOOP_ALIGN_MAX_SKIP): Delete.\n\t(LABEL_ALIGN_AFTER_BARRIER): Delete.\n\t(LABEL_ALIGN_AFTER_BARRIER_MAX_SKIP): Delete.\n\nFrom-SVN: r41825", "tree": {"sha": "c6fab85cef7a72555f257a789f9e9c28b20ef6f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6fab85cef7a72555f257a789f9e9c28b20ef6f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e18fdf680e36b07690ce858c23de9ed898e6eb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e18fdf680e36b07690ce858c23de9ed898e6eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e18fdf680e36b07690ce858c23de9ed898e6eb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e18fdf680e36b07690ce858c23de9ed898e6eb0/comments", "author": null, "committer": null, "parents": [{"sha": "8e9eff6bc04068f44def72f44a5f11027d7eb3dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9eff6bc04068f44def72f44a5f11027d7eb3dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9eff6bc04068f44def72f44a5f11027d7eb3dc"}], "stats": {"total": 130, "additions": 59, "deletions": 71}, "files": [{"sha": "9c2306899aab57a81c2c4fc21bccf1e48c91df34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e18fdf680e36b07690ce858c23de9ed898e6eb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e18fdf680e36b07690ce858c23de9ed898e6eb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e18fdf680e36b07690ce858c23de9ed898e6eb0", "patch": "@@ -1,3 +1,20 @@\n+2001-05-03  Geoff Keating  <geoffk@redhat.com>\n+\n+\t* invoke.texi (i386 Options): Delete references to -malign-jumps,\n+\t-malign-loops, -malign-functions.\n+\t* i386.c (ix86_align_funcs): Delete.\n+\t(ix86_align_loops): Delete.\n+\t(ix86_align_jumps): Delete.\n+\t(override_options): Mark -malign-* as obsolete.  Emulate their\n+\tbehaviour with the -falign-* options.  Default -falign-* from\n+\tthe processor table.\n+\t* i386.h (FUNCTION_BOUNDARY): Define to 16; revert Richard Kenner's\n+\tpatch of Wed May 2 13:09:36 2001.\n+\t(LOOP_ALIGN): Delete.\n+\t(LOOP_ALIGN_MAX_SKIP): Delete.\n+\t(LABEL_ALIGN_AFTER_BARRIER): Delete.\n+\t(LABEL_ALIGN_AFTER_BARRIER_MAX_SKIP): Delete.\n+\n 2001-05-04  Andreas Jaeger  <aj@suse.de>\n \n \t* except.h: Add prototype declaration for"}, {"sha": "689b3af5b404a8abd3758eabeb24b5d88d4769b1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 39, "deletions": 29, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e18fdf680e36b07690ce858c23de9ed898e6eb0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e18fdf680e36b07690ce858c23de9ed898e6eb0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3e18fdf680e36b07690ce858c23de9ed898e6eb0", "patch": "@@ -532,14 +532,7 @@ int ix86_branch_cost;\n const char *ix86_branch_cost_string;\n \n /* Power of two alignment for functions.  */\n-int ix86_align_funcs;\n const char *ix86_align_funcs_string;\n-\n-/* Power of two alignment for loops.  */\n-int ix86_align_loops;\n-\n-/* Power of two alignment for non-loop jumps.  */\n-int ix86_align_jumps;\n \f\n static void output_pic_addr_const PARAMS ((FILE *, rtx, int));\n static void put_condition_code PARAMS ((enum rtx_code, enum machine_mode,\n@@ -751,40 +744,57 @@ override_options ()\n    if (TARGET_64BIT)\n      ix86_regparm = REGPARM_MAX;\n \n-  /* Validate -malign-loops= value, or provide default.  */\n-  ix86_align_loops = processor_target_table[ix86_cpu].align_loop;\n+  /* If the user has provided any of the -malign-* options,\n+     warn and use that value only if -falign-* is not set.  \n+     Remove this code in GCC 3.2 or later.  */\n   if (ix86_align_loops_string)\n     {\n-      i = atoi (ix86_align_loops_string);\n-      if (i < 0 || i > MAX_CODE_ALIGN)\n-\terror (\"-malign-loops=%d is not between 0 and %d\", i, MAX_CODE_ALIGN);\n-      else\n-\tix86_align_loops = i;\n+      warning (\"-malign-loops is obsolete, use -falign-loops\");\n+      if (align_loops == 0)\n+\t{\n+\t  i = atoi (ix86_align_loops_string);\n+\t  if (i < 0 || i > MAX_CODE_ALIGN)\n+\t    error (\"-malign-loops=%d is not between 0 and %d\", i, MAX_CODE_ALIGN);\n+\t  else\n+\t    align_loops = 1 << i;\n+\t}\n     }\n \n-  /* Validate -malign-jumps= value, or provide default.  */\n-  ix86_align_jumps = processor_target_table[ix86_cpu].align_jump;\n   if (ix86_align_jumps_string)\n     {\n-      i = atoi (ix86_align_jumps_string);\n-      if (i < 0 || i > MAX_CODE_ALIGN)\n-\terror (\"-malign-jumps=%d is not between 0 and %d\", i, MAX_CODE_ALIGN);\n-      else\n-\tix86_align_jumps = i;\n+      warning (\"-malign-jumps is obsolete, use -falign-jumps\");\n+      if (align_jumps == 0)\n+\t{\n+\t  i = atoi (ix86_align_jumps_string);\n+\t  if (i < 0 || i > MAX_CODE_ALIGN)\n+\t    error (\"-malign-loops=%d is not between 0 and %d\", i, MAX_CODE_ALIGN);\n+\t  else\n+\t    align_jumps = 1 << i;\n+\t}\n     }\n \n-  /* Validate -malign-functions= value, or provide default.  */\n-  ix86_align_funcs = processor_target_table[ix86_cpu].align_func;\n   if (ix86_align_funcs_string)\n     {\n-      i = atoi (ix86_align_funcs_string);\n-      if (i < 0 || i > MAX_CODE_ALIGN)\n-\terror (\"-malign-functions=%d is not between 0 and %d\",\n-\t       i, MAX_CODE_ALIGN);\n-      else\n-\tix86_align_funcs = i;\n+      warning (\"-malign-functions is obsolete, use -falign-functions\");\n+      if (align_functions == 0)\n+\t{\n+\t  i = atoi (ix86_align_funcs_string);\n+\t  if (i < 0 || i > MAX_CODE_ALIGN)\n+\t    error (\"-malign-loops=%d is not between 0 and %d\", i, MAX_CODE_ALIGN);\n+\t  else\n+\t    align_functions = 1 << i;\n+\t}\n     }\n \n+  /* Default align_* from the processor table.  */\n+#define abs(n) (n < 0 ? -n : n)\n+  if (align_loops == 0)\n+    align_loops = 1 << abs (processor_target_table[ix86_cpu].align_loop);\n+  if (align_jumps == 0)\n+    align_jumps = 1 << abs (processor_target_table[ix86_cpu].align_jump);\n+  if (align_functions == 0)\n+    align_functions = 1 << abs (processor_target_table[ix86_cpu].align_func);\n+\n   /* Validate -mpreferred-stack-boundary= value, or provide default.\n      The default of 128 bits is for Pentium III's SSE __m128.  */\n   ix86_preferred_stack_boundary = 128;"}, {"sha": "0c0a7cdb387fd4704ab88267e602f634c2c2e11a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e18fdf680e36b07690ce858c23de9ed898e6eb0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e18fdf680e36b07690ce858c23de9ed898e6eb0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3e18fdf680e36b07690ce858c23de9ed898e6eb0", "patch": "@@ -587,10 +587,7 @@ extern int ix86_arch;\n #define PREFERRED_STACK_BOUNDARY ix86_preferred_stack_boundary\n \n /* Allocation boundary for the code of a function. */\n-#define FUNCTION_BOUNDARY \\\n-   ((unsigned int) 1 << ((ix86_align_funcs >= 0\t\t\t\t\\\n-\t\t\t  ? ix86_align_funcs : -ix86_align_funcs)\t\\\n-\t\t\t + 3))\n+#define FUNCTION_BOUNDARY 16\n \n /* Alignment of field after `int : 0' in a structure. */\n \n@@ -601,7 +598,7 @@ extern int ix86_arch;\n    might need to be aligned. No data type wants to be aligned\n    rounder than this.\n    \n-   Pentium+ preferrs DFmode values to be alignmed to 64 bit boundary\n+   Pentium+ preferrs DFmode values to be aligned to 64 bit boundary\n    and Pentium Pro XFmode values at 128 bit boundaries.  */\n \n #define BIGGEST_ALIGNMENT 128\n@@ -670,18 +667,6 @@ extern int ix86_arch;\n    and give entire struct the alignment of an int.  */\n /* Required on the 386 since it doesn't have bitfield insns.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n-\n-/* Align loop starts for optimal branching.  */\n-#define LOOP_ALIGN(LABEL) \\\n-\t(ix86_align_loops < 0 ? -ix86_align_loops : ix86_align_loops)\n-#define LOOP_ALIGN_MAX_SKIP \\\n-\t(ix86_align_loops < -3 ? (1<<(-ix86_align_loops-1))-1 : 0)\n-\n-/* This is how to align an instruction for optimal branching.  */\n-#define LABEL_ALIGN_AFTER_BARRIER(LABEL) \\\n-\t(ix86_align_jumps < 0 ? -ix86_align_jumps : ix86_align_jumps)\n-#define LABEL_ALIGN_AFTER_BARRIER_MAX_SKIP \\\n-\t(ix86_align_jumps < -3 ? (1<<(-ix86_align_jumps-1))-1 : 0)\n \f\n /* Standard register usage.  */\n \n@@ -3138,9 +3123,6 @@ extern const char *ix86_align_funcs_string;\t/* power of two alignment for functi\n extern const char *ix86_preferred_stack_boundary_string;/* power of two alignment for stack boundary */\n extern const char *ix86_branch_cost_string;\t/* values 1-5: see jump.c */\n extern int ix86_regparm;\t\t\t/* ix86_regparm_string as a number */\n-extern int ix86_align_loops;\t\t\t/* power of two alignment for loops */\n-extern int ix86_align_jumps;\t\t\t/* power of two alignment for non-loop jumps */\n-extern int ix86_align_funcs;\t\t\t/* power of two alignment for functions */\n extern int ix86_preferred_stack_boundary;\t/* preferred stack boundary alignment in bits */\n extern int ix86_branch_cost;\t\t\t/* values 1-5: see jump.c */\n extern const char * const hi_reg_name[];\t/* names for 16 bit regs */"}, {"sha": "307b03be9d0b450f44ae566b5f9f38ec909fd232", "filename": "gcc/invoke.texi", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e18fdf680e36b07690ce858c23de9ed898e6eb0/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e18fdf680e36b07690ce858c23de9ed898e6eb0/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=3e18fdf680e36b07690ce858c23de9ed898e6eb0", "patch": "@@ -470,8 +470,7 @@ in the following sections.\n -mintel-syntax -mieee-fp  -mno-fancy-math-387 @gol\n -mno-fp-ret-in-387  -msoft-float  -msvr3-shlib @gol\n -mno-wide-multiply  -mrtd  -malign-double @gol\n--malign-jumps=@var{num}  -malign-loops=@var{num} @gol\n--malign-functions=@var{num} -mpreferred-stack-boundary=@var{num} @gol\n+-mpreferred-stack-boundary=@var{num} @gol\n -mthreads -mno-align-stringops -minline-all-stringops @gol\n -mpush-args -maccumulate-outgoing-args -m128bit-long-double @gol\n -m96bit-long-double -mregparm=@var{num}}\n@@ -6865,26 +6864,6 @@ function by using the function attribute @samp{regparm}.\n value, including any libraries.  This includes the system libraries and\n startup modules.\n \n-@item -malign-loops=@var{num}\n-Align loops to a 2 raised to a @var{num} byte boundary.  If\n-@samp{-malign-loops} is not specified, the default is 2 unless\n-gas 2.8 (or later) is being used in which case the default is\n-to align the loop on a 16 byte boundary if it is less than 8\n-bytes away.\n-\n-@item -malign-jumps=@var{num}\n-Align instructions that are only jumped to to a 2 raised to a @var{num}\n-byte boundary.  If @samp{-malign-jumps} is not specified, the default is\n-2 if optimizing for a 386, and 4 if optimizing for a 486 unless\n-gas 2.8 (or later) is being used in which case the default is\n-to align the instruction on a 16 byte boundary if it is less\n-than 8 bytes away.\n-\n-@item -malign-functions=@var{num}\n-Align the start of functions to a 2 raised to @var{num} byte boundary.\n-If @samp{-malign-functions} is not specified, the default is 2 if optimizing\n-for a 386, and 4 if optimizing for a 486.\n-\n @item -mpreferred-stack-boundary=@var{num}\n Attempt to keep the stack boundary aligned to a 2 raised to @var{num}\n byte boundary.  If @samp{-mpreferred-stack-boundary} is not specified,"}]}