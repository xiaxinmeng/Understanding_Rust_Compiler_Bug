{"sha": "3cae214f76deaf8271e26b094d6d14a31e537e00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NhZTIxNGY3NmRlYWY4MjcxZTI2YjA5NGQ2ZDE0YTMxZTUzN2UwMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-11-25T12:23:43Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-11-25T12:23:43Z"}, "message": "[multiple changes]\n\n2016-11-25  Andre Vehreschild  <vehre@gcc.gnu.org>\n\tPaul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/78293\n\t* trans-expr.c (gfc_conv_procedure_call): Prepend deallocation\n\tof alloctable components to post, rather than adding to\n\tse->post.\n\t* trans-stmt.c (gfc_trans_allocate): Move deallocation of expr3\n\tallocatable components so that all expr3s are visited.\n\n2016-11-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/78293\n\t* gfortran.dg/allocatable_function_10.f90: New test.\n\t* gfortran.dg/class_array_15.f03: Increase builtin_free count\n\tfrom 11 to 12.\n\nFrom-SVN: r242875", "tree": {"sha": "8fab2ee64998246794f0a8a8a5297074ab5045fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fab2ee64998246794f0a8a8a5297074ab5045fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cae214f76deaf8271e26b094d6d14a31e537e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cae214f76deaf8271e26b094d6d14a31e537e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cae214f76deaf8271e26b094d6d14a31e537e00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cae214f76deaf8271e26b094d6d14a31e537e00/comments", "author": null, "committer": null, "parents": [{"sha": "ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d"}], "stats": {"total": 101, "additions": 87, "deletions": 14}, "files": [{"sha": "737a22c906ffb9837539a95c47e08788b7a4f2dc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cae214f76deaf8271e26b094d6d14a31e537e00/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cae214f76deaf8271e26b094d6d14a31e537e00/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3cae214f76deaf8271e26b094d6d14a31e537e00", "patch": "@@ -1,3 +1,20 @@\n+2016-11-25  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/78293\n+\t* trans-expr.c (gfc_conv_procedure_call): Prepend deallocation\n+\tof alloctable components to post, rather than adding to\n+\tse->post.\n+\t* trans-stmt.c (gfc_trans_allocate): Move deallocation of expr3\n+\tallocatable components so that all expr3s are visited.\n+\n+2016-11-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/78293\n+\t* gfortran.dg/allocatable_function_10.f90: New test.\n+\t* gfortran.dg/class_array_15.f03: Increase builtin_free count\n+\tfrom 11 to 12.\n+\n 2016-11-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/78500"}, {"sha": "1c2d5e1ed3aad3e1cbe33491cba790b4f1711e87", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cae214f76deaf8271e26b094d6d14a31e537e00/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cae214f76deaf8271e26b094d6d14a31e537e00/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=3cae214f76deaf8271e26b094d6d14a31e537e00", "patch": "@@ -5568,7 +5568,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \n \t  tmp = gfc_deallocate_alloc_comp (e->ts.u.derived, tmp, parm_rank);\n \n-\t  gfc_add_expr_to_block (&se->post, tmp);\n+\t  gfc_prepend_expr_to_block (&post, tmp);\n         }\n \n       /* Add argument checking of passing an unallocated/NULL actual to"}, {"sha": "19ecf68528517255be4840f2496c500b9722604a", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cae214f76deaf8271e26b094d6d14a31e537e00/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cae214f76deaf8271e26b094d6d14a31e537e00/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=3cae214f76deaf8271e26b094d6d14a31e537e00", "patch": "@@ -5684,17 +5684,6 @@ gfc_trans_allocate (gfc_code * code)\n \t    }\n \t  gfc_add_modify_loc (input_location, &block, var, tmp);\n \n-\t  /* Deallocate any allocatable components after all the allocations\n-\t     and assignments of expr3 have been completed.  */\n-\t  if (code->expr3->ts.type == BT_DERIVED\n-\t      && code->expr3->rank == 0\n-\t      && code->expr3->ts.u.derived->attr.alloc_comp)\n-\t    {\n-\t      tmp = gfc_deallocate_alloc_comp (code->expr3->ts.u.derived,\n-\t\t\t\t\t       var, 0);\n-\t      gfc_add_expr_to_block (&post, tmp);\n-\t    }\n-\n \t  expr3 = var;\n \t  if (se.string_length)\n \t    /* Evaluate it assuming that it also is complicated like expr3.  */\n@@ -5705,6 +5694,20 @@ gfc_trans_allocate (gfc_code * code)\n \t  expr3 = se.expr;\n \t  expr3_len = se.string_length;\n \t}\n+\n+      /* Deallocate any allocatable components in expressions that use a\n+\t temporary, i.e. are not of expr-type EXPR_VARIABLE or force the\n+\t use of a temporary, after the assignment of expr3 is completed.  */\n+      if ((code->expr3->ts.type == BT_DERIVED\n+\t   || code->expr3->ts.type == BT_CLASS)\n+\t  && (code->expr3->expr_type != EXPR_VARIABLE || temp_var_needed)\n+\t  && code->expr3->ts.u.derived->attr.alloc_comp)\n+\t{\n+\t  tmp = gfc_deallocate_alloc_comp (code->expr3->ts.u.derived,\n+\t\t\t\t\t   expr3, code->expr3->rank);\n+\t  gfc_prepend_expr_to_block (&post, tmp);\n+\t}\n+\n       /* Store what the expr3 is to be used for.  */\n       if (e3_is == E3_UNSET)\n \te3_is = expr3 != NULL_TREE ?"}, {"sha": "87d6fca44dc5ab2d11bb5d368c7c1e6c8e9416cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cae214f76deaf8271e26b094d6d14a31e537e00/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cae214f76deaf8271e26b094d6d14a31e537e00/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3cae214f76deaf8271e26b094d6d14a31e537e00", "patch": "@@ -1,3 +1,10 @@\n+2016-11-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/78293\n+\t* gfortran.dg/allocatable_function_10.f90: New test.\n+\t* gfortran.dg/class_array_15.f03: Increase builtin_free count\n+\tfrom 11 to 12.\n+\n 2016-11-25  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR middle-end/78507\n@@ -45,7 +52,7 @@\n 2016-11-25  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* gcc.dg/pr64277.c: Use __INT32_TYPE__ for targets\n-\twith sizeof(int) < 4. \n+\twith sizeof(int) < 4.\n \n 2016-11-24  Martin Sebor  <msebor@redhat.com>\n "}, {"sha": "8d171976b01efc6111f2fae202a6d125a2c9d014", "filename": "gcc/testsuite/gfortran.dg/allocatable_function_10.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cae214f76deaf8271e26b094d6d14a31e537e00/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cae214f76deaf8271e26b094d6d14a31e537e00/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_10.f90?ref=3cae214f76deaf8271e26b094d6d14a31e537e00", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR78293. The deallocations are present at the\n+! end of the main programme to aid memory leak searching. The\n+! allocation in 'tt' leaked memory from an intermediate temporary\n+! for the array constructor.\n+!\n+! Contributed by Andrew Benson  <abensonca@gmail.com>\n+!\n+module m\n+  implicit none\n+\n+  type t\n+     integer, allocatable, dimension(:) :: r\n+  end type t\n+\n+contains\n+\n+  function tt(a,b)\n+    implicit none\n+    type(t), allocatable, dimension(:) :: tt\n+    type(t), intent(in), dimension(:) :: a,b\n+    allocate(tt, source = [a,b])\n+  end function tt\n+\n+  function ts(arg)\n+    implicit none\n+    type(t), allocatable, dimension(:) :: ts\n+    integer, intent(in) :: arg(:)\n+    allocate(ts(1))\n+    allocate(ts(1)%r, source = arg)\n+    return\n+  end function ts\n+\n+end module m\n+\n+program p\n+  use m\n+  implicit none\n+  type(t), dimension(2) :: c\n+  c=tt(ts([99,199,1999]),ts([42,142]))\n+  if (any (c(1)%r .ne. [99,199,1999])) call abort\n+  if (any (c(2)%r .ne. [42,142])) call abort\n+  deallocate(c(1)%r)\n+  deallocate(c(2)%r)\n+end program p"}, {"sha": "fd9e04c28285fb796d1df8a48ab8ac51490bde91", "filename": "gcc/testsuite/gfortran.dg/class_array_15.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cae214f76deaf8271e26b094d6d14a31e537e00/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_15.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cae214f76deaf8271e26b094d6d14a31e537e00/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_15.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_15.f03?ref=3cae214f76deaf8271e26b094d6d14a31e537e00", "patch": "@@ -115,4 +115,4 @@ subroutine pr54992  ! This test remains as the original.\n   bh => bhGet(b,instance=2)\n   if (loc (b) .ne. loc(bh%hostNode)) call abort\n end\n-! { dg-final { scan-tree-dump-times \"builtin_free\" 11 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"builtin_free\" 12 \"original\" } }"}]}