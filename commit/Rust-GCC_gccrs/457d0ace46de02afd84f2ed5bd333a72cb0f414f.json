{"sha": "457d0ace46de02afd84f2ed5bd333a72cb0f414f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU3ZDBhY2U0NmRlMDJhZmQ4NGYyZWQ1YmQzMzNhNzJjYjBmNDE0Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-02-03T17:21:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-02-03T17:21:49Z"}, "message": "re PR c++/64877 (strange warning message from -Waddress)\n\n/cp\n2015-02-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/64877\n\t* typeck.c (cp_build_binary_op): Avoid spurious -Waddress warnings\n\tfor generated expressions.\n\n/testsuite\n2015-02-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/64877\n\t* g++.dg/warn/Waddress-2.C: New.\n\nFrom-SVN: r220374", "tree": {"sha": "f58584a32004449f8bc41aa2b394634c095aaadc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f58584a32004449f8bc41aa2b394634c095aaadc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/457d0ace46de02afd84f2ed5bd333a72cb0f414f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/457d0ace46de02afd84f2ed5bd333a72cb0f414f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/457d0ace46de02afd84f2ed5bd333a72cb0f414f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/457d0ace46de02afd84f2ed5bd333a72cb0f414f/comments", "author": null, "committer": null, "parents": [{"sha": "2cb844ce9cf37fdd75438e27b515371ad1f71405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb844ce9cf37fdd75438e27b515371ad1f71405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cb844ce9cf37fdd75438e27b515371ad1f71405"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "60d7e676d9578501a633cf6a95c3add25fb0f961", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457d0ace46de02afd84f2ed5bd333a72cb0f414f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457d0ace46de02afd84f2ed5bd333a72cb0f414f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=457d0ace46de02afd84f2ed5bd333a72cb0f414f", "patch": "@@ -1,3 +1,9 @@\n+2015-02-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/64877\n+\t* typeck.c (cp_build_binary_op): Avoid spurious -Waddress warnings\n+\tfor generated expressions.\n+\n 2015-02-02  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/64901"}, {"sha": "4c128b7ebe472cf255094da12080acaa65043800", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457d0ace46de02afd84f2ed5bd333a72cb0f414f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457d0ace46de02afd84f2ed5bd333a72cb0f414f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=457d0ace46de02afd84f2ed5bd333a72cb0f414f", "patch": "@@ -4415,7 +4415,8 @@ cp_build_binary_op (location_t location,\n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op0, 0)))\n \t    {\n \t      if ((complain & tf_warning)\n-\t\t  && c_inhibit_evaluation_warnings == 0)\n+\t\t  && c_inhibit_evaluation_warnings == 0\n+\t\t  && !TREE_NO_WARNING (op0))\n \t\twarning (OPT_Waddress, \"the address of %qD will never be NULL\",\n \t\t\t TREE_OPERAND (op0, 0));\n \t    }\n@@ -4436,7 +4437,8 @@ cp_build_binary_op (location_t location,\n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op1, 0)))\n \t    {\n \t      if ((complain & tf_warning)\n-\t\t  && c_inhibit_evaluation_warnings == 0)\n+\t\t  && c_inhibit_evaluation_warnings == 0\n+\t\t  && !TREE_NO_WARNING (op1))\n \t\twarning (OPT_Waddress, \"the address of %qD will never be NULL\",\n \t\t\t TREE_OPERAND (op1, 0));\n \t    }\n@@ -4537,6 +4539,9 @@ cp_build_binary_op (location_t location,\n \t    op1 = save_expr (op1);\n \n \t  pfn0 = pfn_from_ptrmemfunc (op0);\n+\t  /* Avoid -Waddress warnings (c++/64877).  */\n+\t  if (TREE_CODE (pfn0) == ADDR_EXPR)\n+\t    TREE_NO_WARNING (pfn0) = 1;\n \t  pfn1 = pfn_from_ptrmemfunc (op1);\n \t  delta0 = delta_from_ptrmemfunc (op0);\n \t  delta1 = delta_from_ptrmemfunc (op1);"}, {"sha": "00c0450dbb597aac433f7b8f5b6edbbc514b6490", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457d0ace46de02afd84f2ed5bd333a72cb0f414f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457d0ace46de02afd84f2ed5bd333a72cb0f414f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=457d0ace46de02afd84f2ed5bd333a72cb0f414f", "patch": "@@ -1,9 +1,14 @@\n+2015-02-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/64877\n+\t* g++.dg/warn/Waddress-2.C: New.\n+\n 2015-02-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR middle-end/61225\n-\tgcc.target/i386/pr49095.c: XFAIL for ia32.\n+\t* gcc.target/i386/pr49095.c: XFAIL for ia32.\n \n-2015-02-03    <dodji@redhat.com>\n+2015-02-03  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR preprocessor/64803\n \t* gcc.dg/cpp/builtin-macro-1.c: New test case."}, {"sha": "58594f9629ccbe9aa635e3e4e6b542b0caf6290e", "filename": "gcc/testsuite/g++.dg/warn/Waddress-2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457d0ace46de02afd84f2ed5bd333a72cb0f414f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457d0ace46de02afd84f2ed5bd333a72cb0f414f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-2.C?ref=457d0ace46de02afd84f2ed5bd333a72cb0f414f", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/64877\n+// { dg-options \"-Waddress\" }\n+\n+template<class Derived>\n+struct S\n+{\n+  void m() {\n+  }\n+\n+  S()\n+  {\n+    if (&S<Derived>::Unwrap != &Derived::Unwrap)\n+      m();\n+  }\n+\n+  void Unwrap() {\n+  }\n+};\n+\n+struct T : public S<T>\n+{\n+};\n+\n+T t;"}]}