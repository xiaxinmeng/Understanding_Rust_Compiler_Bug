{"sha": "89d56d793c77e9b35b46a0c48402a1fcb1142fbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlkNTZkNzkzYzc3ZTliMzViNDZhMGM0ODQwMmExZmNiMTE0MmZiZQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-01-20T19:09:58Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-01-20T19:09:58Z"}, "message": "re PR target/55433 ([LRA] ICE on excessive reloads)\n\n2013-01-20  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/55433\n\t* lra-constraints.c (curr_insn_transform): Don't reuse original\n\tinsn for secondary memory move when memory mode should be\n\tdifferent.\n\nFrom-SVN: r195322", "tree": {"sha": "24f3380d074ddd93ec8a83d05a5e346e89be540d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24f3380d074ddd93ec8a83d05a5e346e89be540d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89d56d793c77e9b35b46a0c48402a1fcb1142fbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d56d793c77e9b35b46a0c48402a1fcb1142fbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d56d793c77e9b35b46a0c48402a1fcb1142fbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d56d793c77e9b35b46a0c48402a1fcb1142fbe/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d76b6ea41791f792e202cde0eb5227cd1de80201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76b6ea41791f792e202cde0eb5227cd1de80201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d76b6ea41791f792e202cde0eb5227cd1de80201"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "7a38ef1092dfc5273bec70df10e75b91e3ad6dda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d56d793c77e9b35b46a0c48402a1fcb1142fbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d56d793c77e9b35b46a0c48402a1fcb1142fbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89d56d793c77e9b35b46a0c48402a1fcb1142fbe", "patch": "@@ -1,3 +1,10 @@\n+2013-01-20  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/55433\n+\t* lra-constraints.c (curr_insn_transform): Don't reuse original\n+\tinsn for secondary memory move when memory mode should be\n+\tdifferent.\n+\n 2013-01-20  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* config/pa/pa.md (atomic_loaddi, atomic_loaddi_1, atomic_storedi,"}, {"sha": "01c8cf143cfdc2bcb3a28c130922555f8dbca626", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d56d793c77e9b35b46a0c48402a1fcb1142fbe/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d56d793c77e9b35b46a0c48402a1fcb1142fbe/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=89d56d793c77e9b35b46a0c48402a1fcb1142fbe", "patch": "@@ -2791,7 +2791,7 @@ curr_insn_transform (void)\n \n   if (use_sec_mem_p)\n     {\n-      rtx new_reg, src, dest, rld, rld_subst;\n+      rtx new_reg, src, dest, rld;\n       enum machine_mode sec_mode, rld_mode;\n \n       lra_assert (sec_mem_p);\n@@ -2811,17 +2811,28 @@ curr_insn_transform (void)\n \t\t\t\t    NO_REGS, \"secondary\");\n       /* If the mode is changed, it should be wider.  */\n       lra_assert (GET_MODE_SIZE (sec_mode) >= GET_MODE_SIZE (rld_mode));\n-      rld_subst = (sec_mode == rld_mode ? new_reg : gen_lowpart_SUBREG (rld_mode, new_reg));\n-      if (dest == rld)\n-\t{\n-\t  *curr_id->operand_loc[0] = rld_subst;\n+      if (sec_mode != rld_mode)\n+        {\n+\t  /* If the target says specifically to use another mode for\n+\t     secondary memory moves we can not reuse the original\n+\t     insn.  */\n+         after = emit_spill_move (false, new_reg, dest);\n+         lra_process_new_insns (curr_insn, NULL_RTX, after,\n+                                \"Inserting the sec. move\");\n+         before = emit_spill_move (true, new_reg, src);\n+         lra_process_new_insns (curr_insn, before, NULL_RTX, \"Changing on\");\n+         lra_set_insn_deleted (curr_insn);\n+       }\n+      else if (dest == rld)\n+       {\n+         *curr_id->operand_loc[0] = new_reg;\n \t  after = emit_spill_move (false, new_reg, dest);\n \t  lra_process_new_insns (curr_insn, NULL_RTX, after,\n \t\t\t\t \"Inserting the sec. move\");\n \t}\n       else\n \t{\n-\t  *curr_id->operand_loc[1] = rld_subst;\n+\t  *curr_id->operand_loc[1] = new_reg;\n \t  before = emit_spill_move (true, new_reg, src);\n \t  lra_process_new_insns (curr_insn, before, NULL_RTX,\n \t\t\t\t \"Inserting the sec. move\");"}]}