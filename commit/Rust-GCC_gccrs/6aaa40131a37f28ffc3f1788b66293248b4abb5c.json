{"sha": "6aaa40131a37f28ffc3f1788b66293248b4abb5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhYTQwMTMxYTM3ZjI4ZmZjM2YxNzg4YjY2MjkzMjQ4YjRhYmI1Yw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-11-09T12:32:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-11-09T12:32:20Z"}, "message": "re PR target/33604 (Revision 119502 causes significantly slower results with 4.3/4.4 compared to 4.2)\n\n2007-11-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/33604\n\t* tree-ssa-forwprop.c (tree_ssa_forward_propagate_single_use_vars):\n\tDisregard changes in CV qualifiers of pointed to types for\n\tforward propagating ADDR_EXPRs.\n\t* tree-ssa-ccp.c (fold_stmt_r): Preserve volatileness of the original\n\texpression.\n\n\t* g++.dg/tree-ssa/pr33604.C: New testcase.\n\t* gcc.dg/pr32721.c: Adjust pattern.\n\nFrom-SVN: r130040", "tree": {"sha": "7d2129cd384ed49e7ccc4d5da76366ff0ada7d49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d2129cd384ed49e7ccc4d5da76366ff0ada7d49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aaa40131a37f28ffc3f1788b66293248b4abb5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aaa40131a37f28ffc3f1788b66293248b4abb5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aaa40131a37f28ffc3f1788b66293248b4abb5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aaa40131a37f28ffc3f1788b66293248b4abb5c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "ce33a5b302d585ca749bccb26efe389685835f5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaa40131a37f28ffc3f1788b66293248b4abb5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaa40131a37f28ffc3f1788b66293248b4abb5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6aaa40131a37f28ffc3f1788b66293248b4abb5c", "patch": "@@ -1,3 +1,12 @@\n+2007-11-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/33604\n+\t* tree-ssa-forwprop.c (tree_ssa_forward_propagate_single_use_vars):\n+\tDisregard changes in CV qualifiers of pointed to types for\n+\tforward propagating ADDR_EXPRs.\n+\t* tree-ssa-ccp.c (fold_stmt_r): Preserve volatileness of the original\n+\texpression.\n+\n 2007-11-09  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* dse.c (find_shift_sequence): Always choose an integer mode for"}, {"sha": "5cb97b983540c612fe2884d6558bc2a3087babd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaa40131a37f28ffc3f1788b66293248b4abb5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaa40131a37f28ffc3f1788b66293248b4abb5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6aaa40131a37f28ffc3f1788b66293248b4abb5c", "patch": "@@ -1,3 +1,9 @@\n+2007-11-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/33604\n+\t* g++.dg/tree-ssa/pr33604.C: New testcase.\n+\t* gcc.dg/pr32721.c: Adjust pattern.\n+\n 2007-11-09  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* gcc.target/mips/dse-1.c: Disable."}, {"sha": "d78006220edd170c7760a793382dc54de100591c", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr33604.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaa40131a37f28ffc3f1788b66293248b4abb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr33604.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaa40131a37f28ffc3f1788b66293248b4abb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr33604.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr33604.C?ref=6aaa40131a37f28ffc3f1788b66293248b4abb5c", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+\n+struct Value\n+{\n+  double value;\n+  Value(double value_) : value (value_) {}\n+  operator double() const { return value; }\n+  Value& operator=(double other) { value = other; }\n+};\n+\n+struct Ref\n+{\n+  const Value& m;\n+  Ref(const Value& m_) : m(m_) {}\n+  operator double() const { return m; }\n+};\n+\n+struct Diff\n+{\n+  const Ref lhs, rhs;\n+  Diff(const Value& lhs_, const Value& rhs_) : lhs(lhs_), rhs(rhs_) {}\n+  operator double() const { return lhs - rhs; }\n+};\n+\n+extern \"C\" void abort (void);\n+int main(int argc, char *argv[])\n+{\n+  Value I(1), m(4);\n+  for(int a = 0; a < 1000; a++)\n+    m = Diff (I, m);\n+\n+  if (!(m / 4 == I))\n+    abort ();\n+  return 0;\n+}\n+\n+/* Check that we forward propagated\n+     D.2182_13 = (struct Ref *) &D.2137.lhs;\n+   to\n+     D.2182_13->lhs.m ={v} &I;\n+   yielding\n+     D.2137.lhs.m ={v} &I;  */\n+\n+/* { dg-final { scan-tree-dump-times \"D\\\\\\.....\\\\\\..hs\\\\\\.m =\" 2 \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "b62272b56ffd54b4373c846f49f8965ff3052f38", "filename": "gcc/testsuite/gcc.dg/pr32721.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaa40131a37f28ffc3f1788b66293248b4abb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32721.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaa40131a37f28ffc3f1788b66293248b4abb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32721.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32721.c?ref=6aaa40131a37f28ffc3f1788b66293248b4abb5c", "patch": "@@ -14,5 +14,6 @@ spinlock1 = &spinlock[1];\n  while (*spinlock0);\n }\n \n-/* { dg-final { scan-tree-dump \"={v} \\\\*spinlock0\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"={v} .*spinlock\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"spinlock.* ={v}\" \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "301316d6e9e316d77f709828b5ef8fd9df575ff8", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaa40131a37f28ffc3f1788b66293248b4abb5c/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaa40131a37f28ffc3f1788b66293248b4abb5c/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=6aaa40131a37f28ffc3f1788b66293248b4abb5c", "patch": "@@ -2034,6 +2034,7 @@ fold_stmt_r (tree *expr_p, int *walk_subtrees, void *data)\n   bool *inside_addr_expr_p = fold_stmt_r_data->inside_addr_expr_p;\n   bool *changed_p = fold_stmt_r_data->changed_p;\n   tree expr = *expr_p, t;\n+  bool volatile_p = TREE_THIS_VOLATILE (expr);\n \n   /* ??? It'd be nice if walk_tree had a pre-order option.  */\n   switch (TREE_CODE (expr))\n@@ -2159,6 +2160,8 @@ fold_stmt_r (tree *expr_p, int *walk_subtrees, void *data)\n \n   if (t)\n     {\n+      /* Preserve volatileness of the original expression.  */\n+      TREE_THIS_VOLATILE (t) = volatile_p;\n       *expr_p = t;\n       *changed_p = true;\n     }"}, {"sha": "bacd34e7f4dcee6bc027bf740d5464ac25ad0cc2", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaa40131a37f28ffc3f1788b66293248b4abb5c/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaa40131a37f28ffc3f1788b66293248b4abb5c/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=6aaa40131a37f28ffc3f1788b66293248b4abb5c", "patch": "@@ -952,7 +952,15 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \t\t  continue;\n \t\t}\n \n-\t      if (TREE_CODE (rhs) == ADDR_EXPR)\n+\t      if (TREE_CODE (rhs) == ADDR_EXPR\n+\t\t  /* We can also disregard changes in CV qualifiers for\n+\t\t     the dereferenced value.  */\n+\t\t  || ((TREE_CODE (rhs) == NOP_EXPR\n+\t\t       || TREE_CODE (rhs) == CONVERT_EXPR)\n+\t\t      && TREE_CODE (TREE_OPERAND (rhs, 0)) == ADDR_EXPR\n+\t\t      && POINTER_TYPE_P (TREE_TYPE (rhs))\n+\t\t      && useless_type_conversion_p (TREE_TYPE (TREE_TYPE (rhs)),\n+\t\t\t\t\t\t    TREE_TYPE (TREE_TYPE (TREE_OPERAND (rhs, 0))))))\n \t\t{\n \t\t  if (forward_propagate_addr_expr (lhs, rhs))\n \t\t    {"}]}