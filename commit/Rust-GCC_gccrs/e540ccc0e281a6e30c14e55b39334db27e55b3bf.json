{"sha": "e540ccc0e281a6e30c14e55b39334db27e55b3bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU0MGNjYzBlMjgxYTZlMzBjMTRlNTViMzkzMzRkYjI3ZTU1YjNiZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-07-31T21:08:55Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-07-31T21:08:55Z"}, "message": "c-family: clean up the data tables in c-format.c\n\nThe format_char_info tables in c-format.c for our own formats contain\na lot of repetition.\n\nThis patch adds a macro to express the conversion specifiers implemented\nwithin pp_format, making it clearer which are custom ones added by the\nvarious diagnostic_format_decoder callbacks.\n\nDoing so uncovered a few mistakes in the data (based on comparison with\nthe source of the diagnostic_format_decoder callbacks, and the notes\nbelow), which the patch fixes:\n\n- gcc_diag_char_table didn't have 'Z', but it *is* implemented by pp_format.\n\n- removed erroneous 'G' and 'K' entries from gcc_diag_char_table: they're\n  implemented by default_tree_printer (and thus in \"tdiag\") and by the\n  C/C++ FEs, but not in pp_format.\n\n- removed \"v\" (lower case) from gcc_tdiag_char_table and\n  gcc_cxxdiag_char_table\n\nNotes:\n\npretty-print.h uses this for ATTRIBUTE_GCC_PPDIAG, used by pp_printf\nand pp_verbatim:\n\nwhereas diagnostic-core.h uses this for ATTRIBUTE_GCC_DIAG, used by\nthe various diagnostic functions:\n\n/* If we haven't already defined a front-end-specific diagnostics\n   style, use the generic one.  */\n\nHence I'm assuming that __gcc_diag__ is for use for when we don't\nknow what kind of diagnostic_format_decoder we have, and we can\nonly rely on pp_format's core functionality, where __gcc_tdiag__\nis allowed to assume default_tree_printer.\n\ngcc/c-family/ChangeLog:\n\t* c-format.c (PP_FORMAT_CHAR_TABLE): New macro, based on existing\n\ttable entries for gcc_diag_char_table, and the 'Z' entry from\n\tgcc_tdiag_char_table, changing the \"chain\" entry for 'Z' from\n\t&gcc_tdiag_char_table[0] to &gcc_diag_char_table[0].\n\t(gcc_diag_char_table): Use PP_FORMAT_CHAR_TABLE, implicitly\n\tadding missing \"Z\" for this table.  Remove erroneous \"G\" and \"K\"\n\tentries.\n\t(gcc_tdiag_char_table): Use PP_FORMAT_CHAR_TABLE.  Remove \"v\".\n\t(gcc_cdiag_char_table): Use PP_FORMAT_CHAR_TABLE.\n\t(gcc_cxxdiag_char_table): Use PP_FORMAT_CHAR_TABLE.  Remove \"v\".\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/format/gcc_diag-1.c (foo): Update the %v tests for\n\ttdiag and cxxdiag.\n\t* gcc.dg/format/gcc_diag-10.c (test_diag): Update tests of %G\n\tand %K.\n\nFrom-SVN: r263181", "tree": {"sha": "865d39a86fd15f60edef5bfc3c1dcd613b307fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/865d39a86fd15f60edef5bfc3c1dcd613b307fdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e540ccc0e281a6e30c14e55b39334db27e55b3bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e540ccc0e281a6e30c14e55b39334db27e55b3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e540ccc0e281a6e30c14e55b39334db27e55b3bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e540ccc0e281a6e30c14e55b39334db27e55b3bf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31d87dd2368e1ecc527829f0da7c99a46cd16542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d87dd2368e1ecc527829f0da7c99a46cd16542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31d87dd2368e1ecc527829f0da7c99a46cd16542"}], "stats": {"total": 130, "additions": 55, "deletions": 75}, "files": [{"sha": "eb9cbc5bb06b56be1939a05f6b2fce444985fc9a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e540ccc0e281a6e30c14e55b39334db27e55b3bf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e540ccc0e281a6e30c14e55b39334db27e55b3bf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e540ccc0e281a6e30c14e55b39334db27e55b3bf", "patch": "@@ -1,3 +1,16 @@\n+2018-07-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-format.c (PP_FORMAT_CHAR_TABLE): New macro, based on existing\n+\ttable entries for gcc_diag_char_table, and the 'Z' entry from\n+\tgcc_tdiag_char_table, changing the \"chain\" entry for 'Z' from\n+\t&gcc_tdiag_char_table[0] to &gcc_diag_char_table[0].\n+\t(gcc_diag_char_table): Use PP_FORMAT_CHAR_TABLE, implicitly\n+\tadding missing \"Z\" for this table.  Remove erroneous \"G\" and \"K\"\n+\tentries.\n+\t(gcc_tdiag_char_table): Use PP_FORMAT_CHAR_TABLE.  Remove \"v\".\n+\t(gcc_cdiag_char_table): Use PP_FORMAT_CHAR_TABLE.\n+\t(gcc_cxxdiag_char_table): Use PP_FORMAT_CHAR_TABLE.  Remove \"v\".\n+\n 2018-07-31  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* c-common.c (speculation_safe_resolve_call): New function."}, {"sha": "82841e454c756795c1ad1960c0c2a86a08577aed", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 31, "deletions": 68, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e540ccc0e281a6e30c14e55b39334db27e55b3bf/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e540ccc0e281a6e30c14e55b39334db27e55b3bf/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=e540ccc0e281a6e30c14e55b39334db27e55b3bf", "patch": "@@ -679,43 +679,40 @@ static const format_char_info asm_fprintf_char_table[] =\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n+/* GCC-specific format_char_info arrays.  */\n+\n+/* The conversion specifiers implemented within pp_format, and thus supported\n+   by all pretty_printer instances within GCC.  */\n+\n+#define PP_FORMAT_CHAR_TABLE \\\n+  { \"di\",  0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T89_L,   T9L_LL,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL }, \\\n+  { \"ox\",  0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL }, \\\n+  { \"u\",   0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL }, \\\n+  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL }, \\\n+  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"pq\", \"cR\", NULL }, \\\n+  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"c\",  NULL }, \\\n+  { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"//cR\",   NULL }, \\\n+  { \"<\",   0, STD_C89, NOARGUMENTS, \"\",      \"<\",   NULL }, \\\n+  { \">\",   0, STD_C89, NOARGUMENTS, \"\",      \">\",   NULL }, \\\n+  { \"'\" ,  0, STD_C89, NOARGUMENTS, \"\",      \"\",    NULL }, \\\n+  { \"R\",   0, STD_C89, NOARGUMENTS, \"\",     \"\\\\\",   NULL }, \\\n+  { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL }, \\\n+  { \"Z\",   1, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"\", &gcc_diag_char_table[0] }\n+\n static const format_char_info gcc_diag_char_table[] =\n {\n-  /* C89 conversion specifiers.  */\n-  { \"di\",  0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T89_L,   T9L_LL,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"ox\",  0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"u\",   0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"pq\", \"cR\", NULL },\n-  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"c\",  NULL },\n-\n-  /* Custom conversion specifiers.  */\n+  /* The conversion specifiers implemented within pp_format.  */\n+  PP_FORMAT_CHAR_TABLE,\n \n-  /* G requires a \"gcall*\" argument at runtime.  */\n-  { \"G\",   1, STD_C89, { T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"\\\"\",   NULL },\n-  /* K requires a \"tree\" argument at runtime.  */\n-  { \"K\",   1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"\\\"\",   NULL },\n-\n-  { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"//cR\",   NULL },\n-  { \"<\",   0, STD_C89, NOARGUMENTS, \"\",      \"<\",   NULL },\n-  { \">\",   0, STD_C89, NOARGUMENTS, \"\",      \">\",   NULL },\n-  { \"'\" ,  0, STD_C89, NOARGUMENTS, \"\",      \"\",    NULL },\n-  { \"R\",   0, STD_C89, NOARGUMENTS, \"\",     \"\\\\\",   NULL },\n-  { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info gcc_tdiag_char_table[] =\n {\n-  /* C89 conversion specifiers.  */\n-  { \"di\",  0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T89_L,   T9L_LL,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"ox\",  0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"u\",   0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"pq\", \"cR\", NULL },\n-  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"c\",  NULL },\n+  /* The conversion specifiers implemented within pp_format.  */\n+  PP_FORMAT_CHAR_TABLE,\n \n-  /* Custom conversion specifiers.  */\n+  /* Custom conversion specifiers implemented by default_tree_printer.  */\n \n   /* These will require a \"tree\" at runtime.  */\n   { \"DFTV\", 1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"'\",   NULL },\n@@ -725,29 +722,15 @@ static const format_char_info gcc_tdiag_char_table[] =\n   /* G requires a \"gcall*\" argument at runtime.  */\n   { \"G\", 1, STD_C89, { T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n \n-  { \"v\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n-\n-  { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"/cR\",   NULL },\n-  { \"<\",   0, STD_C89, NOARGUMENTS, \"\",      \"<\",   NULL },\n-  { \">\",   0, STD_C89, NOARGUMENTS, \"\",      \">\",   NULL },\n-  { \"'\",   0, STD_C89, NOARGUMENTS, \"\",      \"\",    NULL },\n-  { \"R\",   0, STD_C89, NOARGUMENTS, \"\",     \"\\\\\",   NULL },\n-  { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n-  { \"Z\",   1, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"\", &gcc_tdiag_char_table[0] },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info gcc_cdiag_char_table[] =\n {\n-  /* C89 conversion specifiers.  */\n-  { \"di\",  0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T89_L,   T9L_LL,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"ox\",  0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"u\",   0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"pq\", \"cR\", NULL },\n-  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"c\",  NULL },\n+  /* The conversion specifiers implemented within pp_format.  */\n+  PP_FORMAT_CHAR_TABLE,\n \n-  /* Custom conversion specifiers.  */\n+  /* Custom conversion specifiers implemented by c_tree_printer.  */\n \n   /* These will require a \"tree\" at runtime.  */\n   { \"DFTV\", 1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"'\",   NULL },\n@@ -759,47 +742,27 @@ static const format_char_info gcc_cdiag_char_table[] =\n \n   { \"v\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n \n-  { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"/cR\",   NULL },\n-  { \"<\",   0, STD_C89, NOARGUMENTS, \"\",      \"<\",  NULL },\n-  { \">\",   0, STD_C89, NOARGUMENTS, \"\",      \">\",  NULL },\n-  { \"'\",   0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n-  { \"R\",   0, STD_C89, NOARGUMENTS, \"\",     \"\\\\\",  NULL },\n-  { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n-  { \"Z\",   1, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"\", &gcc_tdiag_char_table[0] },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info gcc_cxxdiag_char_table[] =\n {\n-  /* C89 conversion specifiers.  */\n-  { \"di\",  0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T89_L,   T9L_LL,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"ox\",  0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"u\",   0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"pq\", \"cR\", NULL },\n-  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"c\",  NULL },\n+  /* The conversion specifiers implemented within pp_format.  */\n+  PP_FORMAT_CHAR_TABLE,\n \n-  /* Custom conversion specifiers.  */\n+  /* Custom conversion specifiers implemented by cp_printer.  */\n \n   /* These will require a \"tree\" at runtime.  */\n   { \"ADFHISTVX\",1,STD_C89,{ T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+#\",   \"'\",   NULL },\n   { \"E\", 1,STD_C89,{ T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+#\",   \"\",   NULL },\n   { \"K\", 1, STD_C89,{ T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",   \"\\\"\",   NULL },\n-  { \"v\", 0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n \n   /* G requires a \"gcall*\" argument at runtime.  */\n   { \"G\", 1, STD_C89,{ T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",   \"\\\"\",   NULL },\n \n   /* These accept either an 'int' or an 'enum tree_code' (which is handled as an 'int'.)  */\n   { \"CLOPQ\",0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n \n-  { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"/cR\",   NULL },\n-  { \"<\",   0, STD_C89, NOARGUMENTS, \"\",      \"<\",   NULL },\n-  { \">\",   0, STD_C89, NOARGUMENTS, \"\",      \">\",   NULL },\n-  { \"'\",   0, STD_C89, NOARGUMENTS, \"\",      \"\",    NULL },\n-  { \"R\",   0, STD_C89, NOARGUMENTS, \"\",      \"\\\\\",  NULL },\n-  { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n-  { \"Z\",   1, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"\", &gcc_tdiag_char_table[0] },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n "}, {"sha": "b764a6504a5fb61b4377949dc98b210b3049edc3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e540ccc0e281a6e30c14e55b39334db27e55b3bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e540ccc0e281a6e30c14e55b39334db27e55b3bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e540ccc0e281a6e30c14e55b39334db27e55b3bf", "patch": "@@ -1,3 +1,10 @@\n+2018-07-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/format/gcc_diag-1.c (foo): Update the %v tests for\n+\ttdiag and cxxdiag.\n+\t* gcc.dg/format/gcc_diag-10.c (test_diag): Update tests of %G\n+\tand %K.\n+\n 2018-07-31  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* c-c++-common/spec-barrier-1.c: New test."}, {"sha": "034e0974d22ac9dbbdd40900d389811096230759", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e540ccc0e281a6e30c14e55b39334db27e55b3bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e540ccc0e281a6e30c14e55b39334db27e55b3bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c?ref=e540ccc0e281a6e30c14e55b39334db27e55b3bf", "patch": "@@ -87,9 +87,9 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   cxxdiag (\"%<%+#A%+#D%+#E%+#F%+#T%+#V%>\", t1, t1, t1, t1, t1, t1);\n   cxxdiag (\"%C%L%O%P%Q\", i, i, i, i, i);\n \n-  tdiag (\"%v%qv%#v\", i, i, i);\n+  tdiag (\"%v\", i); /* { dg-warning \"format\" } */\n   cdiag (\"%v%qv%#v\", i, i, i);\n-  cxxdiag (\"%v%qv%#v\", i, i, i);\n+  cxxdiag (\"%v\", i); /* { dg-warning \"format\" } */\n \n   tdiag (\"%Z\", v, v_len);\n   cdiag (\"%Z\", v, v_len);"}, {"sha": "ab9bc2fff346c86717011e12232b4a3cb1508e76", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-10.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e540ccc0e281a6e30c14e55b39334db27e55b3bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e540ccc0e281a6e30c14e55b39334db27e55b3bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-10.c?ref=e540ccc0e281a6e30c14e55b39334db27e55b3bf", "patch": "@@ -32,8 +32,8 @@ void test_diag (tree t, gcall *gc)\n   diag (\"%>\");   /* { dg-warning \"unmatched quoting directive \" } */\n   diag (\"%<foo%<bar%>%>\");   /* { dg-warning \"nested quoting directive\" } */\n \n-  diag (\"%G\", gc);\n-  diag (\"%K\", t);\n+  diag (\"%G\", gc); /* { dg-warning \"format\" } */\n+  diag (\"%K\", t); /* { dg-warning \"format\" } */\n \n   diag (\"%R\");       /* { dg-warning \"unmatched color reset directive\" } */\n   diag (\"%r\", \"\");   /* { dg-warning \"unterminated color directive\" } */\n@@ -42,9 +42,6 @@ void test_diag (tree t, gcall *gc)\n   diag (\"%r%r%R\", \"\", \"\");\n   diag (\"%r%R%r%R\", \"\", \"\");\n \n-  diag (\"%<%G%>\", gc);  /* { dg-warning \".G. conversion used within a quoted sequence\" } */\n-  diag (\"%<%K%>\", t);   /* { dg-warning \".K. conversion used within a quoted sequence\" } */\n-\n   diag (\"%<%R%>\");      /* { dg-warning \"unmatched color reset directive\" } */\n   diag (\"%<%r%>\", \"\");  /* { dg-warning \"unterminated color directive\" } */\n   diag (\"%<%r%R%>\", \"\");"}]}