{"sha": "280fcbfab4eab60574d827533e6ca4c4e7cdf732", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgwZmNiZmFiNGVhYjYwNTc0ZDgyNzUzM2U2Y2E0YzRlN2NkZjczMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-08-08T15:22:16Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-08-08T15:22:16Z"}, "message": "mips-protos.h (mips_symbol_context): New enumeration.\n\ngcc/\n\t* config/mips/mips-protos.h (mips_symbol_context): New enumeration.\n\t* config/mips/mips.c (mips_classify_symbol): Take a context argument.\n\t(mips_symbolic_constant_p): Likewise.  Update the call to\n\tmips_classify_symbol.\n\t(mips_classify_address): Update the calls to mips_symbolic_constant_p.\n\t(mips_const_insns): Likewise.  Update the call to mips_classify_symbol.\n\t(mips_legitimize_address): Update the call to mips_symbolic_constant_p.\n\t(print_operand_reloc): Add a context argument.  Update the call to\n\tmips_symbolic_constant_p.\n\t(print_operand): Update the calls to print_operand_reloc.\n\t(print_operand_address): Use print_operand_reloc rather than\n\tprint_operand.\n\t(mips_rewrite_small_data_p): Add a context argument.  Update the call\n\tto mips_symbolic_constant_p.\n\t(mips_small_data_pattern_1): Make DATA the containing mem.\n\tUpdate the call to mips_rewrite_small_data_p.\n\t(mips_rewrite_small_data_1): Likewise.\n\t(mips_use_anchors_for_symbol_p): Update the call to\n\tmips_symbolic_constant_p.\n\t* config/mips/predicates.md (const_call_insn_operand): Likewise.\n\t(splittable_symbolic_operand): Likewise.\n\t(move_operand): Likewise.\n\t(absolute_symbolic_operand): Likewise.\n\t(got_disp_operand): Likewise.\n\t(got_page_ofst_operand): Likewise.\n\nFrom-SVN: r127295", "tree": {"sha": "257de26a35c98ec1f77709b20a5b1c9122bf366b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/257de26a35c98ec1f77709b20a5b1c9122bf366b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/280fcbfab4eab60574d827533e6ca4c4e7cdf732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280fcbfab4eab60574d827533e6ca4c4e7cdf732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/280fcbfab4eab60574d827533e6ca4c4e7cdf732", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280fcbfab4eab60574d827533e6ca4c4e7cdf732/comments", "author": null, "committer": null, "parents": [{"sha": "67da85da7923399850541459ffb67c812ef0625d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67da85da7923399850541459ffb67c812ef0625d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67da85da7923399850541459ffb67c812ef0625d"}], "stats": {"total": 159, "additions": 117, "deletions": 42}, "files": [{"sha": "c5ad71601cb7ce0f464c92082198ff25e19d1804", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280fcbfab4eab60574d827533e6ca4c4e7cdf732/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280fcbfab4eab60574d827533e6ca4c4e7cdf732/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=280fcbfab4eab60574d827533e6ca4c4e7cdf732", "patch": "@@ -1,3 +1,31 @@\n+2007-08-08  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips-protos.h (mips_symbol_context): New enumeration.\n+\t* config/mips/mips.c (mips_classify_symbol): Take a context argument.\n+\t(mips_symbolic_constant_p): Likewise.  Update the call to\n+\tmips_classify_symbol.\n+\t(mips_classify_address): Update the calls to mips_symbolic_constant_p.\n+\t(mips_const_insns): Likewise.  Update the call to mips_classify_symbol.\n+\t(mips_legitimize_address): Update the call to mips_symbolic_constant_p.\n+\t(print_operand_reloc): Add a context argument.  Update the call to\n+\tmips_symbolic_constant_p.\n+\t(print_operand): Update the calls to print_operand_reloc.\n+\t(print_operand_address): Use print_operand_reloc rather than\n+\tprint_operand.\n+\t(mips_rewrite_small_data_p): Add a context argument.  Update the call\n+\tto mips_symbolic_constant_p.\n+\t(mips_small_data_pattern_1): Make DATA the containing mem.\n+\tUpdate the call to mips_rewrite_small_data_p.\n+\t(mips_rewrite_small_data_1): Likewise.\n+\t(mips_use_anchors_for_symbol_p): Update the call to\n+\tmips_symbolic_constant_p.\n+\t* config/mips/predicates.md (const_call_insn_operand): Likewise.\n+\t(splittable_symbolic_operand): Likewise.\n+\t(move_operand): Likewise.\n+\t(absolute_symbolic_operand): Likewise.\n+\t(got_disp_operand): Likewise.\n+\t(got_page_ofst_operand): Likewise.\n+\n 2007-08-08  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips-protos.h (SYMBOL_GENERAL): Rename to..."}, {"sha": "f88c7c9ecd6e2964511e7558f1a708d4a40a8a03", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280fcbfab4eab60574d827533e6ca4c4e7cdf732/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280fcbfab4eab60574d827533e6ca4c4e7cdf732/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=280fcbfab4eab60574d827533e6ca4c4e7cdf732", "patch": "@@ -25,6 +25,22 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_MIPS_PROTOS_H\n #define GCC_MIPS_PROTOS_H\n \n+/* Describes how a symbol is used.\n+\n+   SYMBOL_CONTEXT_CALL\n+       The symbol is used as the target of a call instruction.\n+\n+   SYMBOL_CONTEXT_LEA\n+       The symbol is used in a load-address operation.\n+\n+   SYMBOL_CONTEXT_MEM\n+       The symbol is used as the address in a MEM.  */\n+enum mips_symbol_context {\n+  SYMBOL_CONTEXT_CALL,\n+  SYMBOL_CONTEXT_LEA,\n+  SYMBOL_CONTEXT_MEM\n+};\n+\n /* Classifies a SYMBOL_REF, LABEL_REF or UNSPEC address.\n \n    SYMBOL_ABSOLUTE\n@@ -140,7 +156,8 @@ enum mips_loadgp_style {\n \n struct mips16e_save_restore_info;\n \n-extern bool mips_symbolic_constant_p (rtx, enum mips_symbol_type *);\n+extern bool mips_symbolic_constant_p (rtx, enum mips_symbol_context,\n+\t\t\t\t      enum mips_symbol_type *);\n extern int mips_regno_mode_ok_for_base_p (int, enum machine_mode, int);\n extern bool mips_stack_address_p (rtx, enum machine_mode);\n extern int mips_address_insns (rtx, enum machine_mode);"}, {"sha": "416f19ac9f4d64fb006cdc8c924b0344fab5fc0a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 61, "deletions": 34, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280fcbfab4eab60574d827533e6ca4c4e7cdf732/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280fcbfab4eab60574d827533e6ca4c4e7cdf732/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=280fcbfab4eab60574d827533e6ca4c4e7cdf732", "patch": "@@ -287,7 +287,6 @@ struct mips_address_info;\n struct mips_integer_op;\n struct mips_sim;\n \n-static enum mips_symbol_type mips_classify_symbol (rtx);\n static bool mips_valid_base_register_p (rtx, enum machine_mode, int);\n static bool mips_symbolic_address_p (enum mips_symbol_type, enum machine_mode);\n static bool mips_classify_address (struct mips_address_info *, rtx,\n@@ -321,9 +320,9 @@ static void mips_set_architecture (const struct mips_cpu_info *);\n static void mips_set_tune (const struct mips_cpu_info *);\n static bool mips_handle_option (size_t, const char *, int);\n static struct machine_function *mips_init_machine_status (void);\n-static void print_operand_reloc (FILE *, rtx, const char **);\n+static void print_operand_reloc (FILE *, rtx, enum mips_symbol_context,\n+\t\t\t\t const char **);\n static void mips_file_start (void);\n-static bool mips_rewrite_small_data_p (rtx);\n static int mips_small_data_pattern_1 (rtx *, void *);\n static int mips_rewrite_small_data_1 (rtx *, void *);\n static bool mips_function_has_gp_insn (void);\n@@ -1435,10 +1434,11 @@ mips_symbol_binds_local_p (rtx x)\n \t  : SYMBOL_REF_LOCAL_P (x));\n }\n \n-/* Classify symbol X, which must be a SYMBOL_REF or a LABEL_REF.  */\n+/* Return the method that should be used to access SYMBOL_REF or\n+   LABEL_REF X in context CONTEXT.  */\n \n static enum mips_symbol_type\n-mips_classify_symbol (rtx x)\n+mips_classify_symbol (rtx x, enum mips_symbol_context context ATTRIBUTE_UNUSED)\n {\n   if (TARGET_RTP_PIC)\n     return SYMBOL_GOT_DISP;\n@@ -1528,12 +1528,12 @@ mips_offset_within_alignment_p (rtx x, HOST_WIDE_INT offset)\n   return offset >= 0 && offset < align;\n }\n \n-/* Return true if X is a symbolic constant that can be calculated in\n-   the same way as a bare symbol.  If it is, store the type of the\n-   symbol in *SYMBOL_TYPE.  */\n+/* Return true if X is a symbolic constant that can be used in context\n+   CONTEXT.  If it is, store the type of the symbol in *SYMBOL_TYPE.  */\n \n bool\n-mips_symbolic_constant_p (rtx x, enum mips_symbol_type *symbol_type)\n+mips_symbolic_constant_p (rtx x, enum mips_symbol_context context,\n+\t\t\t  enum mips_symbol_type *symbol_type)\n {\n   rtx offset;\n \n@@ -1545,7 +1545,7 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_type *symbol_type)\n     }\n   else if (GET_CODE (x) == SYMBOL_REF || GET_CODE (x) == LABEL_REF)\n     {\n-      *symbol_type = mips_classify_symbol (x);\n+      *symbol_type = mips_classify_symbol (x, context);\n       if (*symbol_type == SYMBOL_TLS)\n \treturn false;\n     }\n@@ -1747,7 +1747,8 @@ mips_classify_address (struct mips_address_info *info, rtx x,\n       info->reg = XEXP (x, 0);\n       info->offset = XEXP (x, 1);\n       return (mips_valid_base_register_p (info->reg, mode, strict)\n-\t      && mips_symbolic_constant_p (info->offset, &info->symbol_type)\n+\t      && mips_symbolic_constant_p (info->offset, SYMBOL_CONTEXT_MEM,\n+\t\t\t\t\t   &info->symbol_type)\n \t      && mips_symbolic_address_p (info->symbol_type, mode)\n \t      && mips_lo_relocs[info->symbol_type] != 0);\n \n@@ -1761,7 +1762,8 @@ mips_classify_address (struct mips_address_info *info, rtx x,\n     case LABEL_REF:\n     case SYMBOL_REF:\n       info->type = ADDRESS_SYMBOLIC;\n-      return (mips_symbolic_constant_p (x, &info->symbol_type)\n+      return (mips_symbolic_constant_p (x, SYMBOL_CONTEXT_MEM,\n+\t\t\t\t\t&info->symbol_type)\n \t      && mips_symbolic_address_p (info->symbol_type, mode)\n \t      && !mips_split_p[info->symbol_type]);\n \n@@ -2002,7 +2004,8 @@ mips_const_insns (rtx x)\n     {\n     case HIGH:\n       if (TARGET_MIPS16\n-\t  || !mips_symbolic_constant_p (XEXP (x, 0), &symbol_type)\n+\t  || !mips_symbolic_constant_p (XEXP (x, 0), SYMBOL_CONTEXT_LEA,\n+\t\t\t\t\t&symbol_type)\n \t  || !mips_split_p[symbol_type])\n \treturn 0;\n \n@@ -2031,7 +2034,7 @@ mips_const_insns (rtx x)\n \treturn 1;\n \n       /* See if we can refer to X directly.  */\n-      if (mips_symbolic_constant_p (x, &symbol_type))\n+      if (mips_symbolic_constant_p (x, SYMBOL_CONTEXT_LEA, &symbol_type))\n \treturn mips_symbol_insns (symbol_type);\n \n       /* Otherwise try splitting the constant into a base and offset.\n@@ -2053,7 +2056,7 @@ mips_const_insns (rtx x)\n \n     case SYMBOL_REF:\n     case LABEL_REF:\n-      return mips_symbol_insns (mips_classify_symbol (x));\n+      return mips_symbol_insns (mips_classify_symbol (x, SYMBOL_CONTEXT_LEA));\n \n     default:\n       return 0;\n@@ -2340,7 +2343,7 @@ mips_legitimize_address (rtx *xloc, enum machine_mode mode)\n     }\n \n   /* See if the address can split into a high part and a LO_SUM.  */\n-  if (mips_symbolic_constant_p (*xloc, &symbol_type)\n+  if (mips_symbolic_constant_p (*xloc, SYMBOL_CONTEXT_MEM, &symbol_type)\n       && mips_symbolic_address_p (symbol_type, mode)\n       && mips_split_p[symbol_type])\n     {\n@@ -5943,11 +5946,11 @@ print_operand (FILE *file, rtx op, int letter)\n       if (GET_CODE (op) == HIGH)\n \top = XEXP (op, 0);\n \n-      print_operand_reloc (file, op, mips_hi_relocs);\n+      print_operand_reloc (file, op, SYMBOL_CONTEXT_LEA, mips_hi_relocs);\n     }\n \n   else if (letter == 'R')\n-    print_operand_reloc (file, op, mips_lo_relocs);\n+    print_operand_reloc (file, op, SYMBOL_CONTEXT_LEA, mips_lo_relocs);\n \n   else if (letter == 'Y')\n     {\n@@ -6038,17 +6041,19 @@ print_operand (FILE *file, rtx op, int letter)\n }\n \n \n-/* Print symbolic operand OP, which is part of a HIGH or LO_SUM.\n-   RELOCS is the array of relocations to use.  */\n+/* Print symbolic operand OP, which is part of a HIGH or LO_SUM\n+   in context CONTEXT.  RELOCS is the array of relocations to use.  */\n \n static void\n-print_operand_reloc (FILE *file, rtx op, const char **relocs)\n+print_operand_reloc (FILE *file, rtx op, enum mips_symbol_context context,\n+\t\t     const char **relocs)\n {\n   enum mips_symbol_type symbol_type;\n   const char *p;\n   rtx base, offset;\n \n-  if (!mips_symbolic_constant_p (op, &symbol_type) || relocs[symbol_type] == 0)\n+  if (!mips_symbolic_constant_p (op, context, &symbol_type)\n+      || relocs[symbol_type] == 0)\n     fatal_insn (\"PRINT_OPERAND, invalid operand for relocation\", op);\n \n   /* If OP uses an UNSPEC address, we want to print the inner symbol.  */\n@@ -6079,7 +6084,8 @@ print_operand_address (FILE *file, rtx x)\n \treturn;\n \n       case ADDRESS_LO_SUM:\n-\tprint_operand (file, addr.offset, 'R');\n+\tprint_operand_reloc (file, addr.offset, SYMBOL_CONTEXT_MEM,\n+\t\t\t     mips_lo_relocs);\n \tfprintf (file, \"(%s)\", reg_names[REGNO (addr.reg)]);\n \treturn;\n \n@@ -6429,29 +6435,40 @@ mips_finish_declare_object (FILE *stream, tree decl, int top_level, int at_end)\n }\n #endif\n \f\n-/* Return true if X is a small data address that can be rewritten\n-   as a LO_SUM.  */\n+/* Return true if X in context CONTEXT is a small data address that can\n+   be rewritten as a LO_SUM.  */\n \n static bool\n-mips_rewrite_small_data_p (rtx x)\n+mips_rewrite_small_data_p (rtx x, enum mips_symbol_context context)\n {\n   enum mips_symbol_type symbol_type;\n \n   return (TARGET_EXPLICIT_RELOCS\n-\t  && mips_symbolic_constant_p (x, &symbol_type)\n+\t  && mips_symbolic_constant_p (x, context, &symbol_type)\n \t  && symbol_type == SYMBOL_GP_RELATIVE);\n }\n \n \n-/* A for_each_rtx callback for mips_small_data_pattern_p.  */\n+/* A for_each_rtx callback for mips_small_data_pattern_p.  DATA is the\n+   containing MEM, or null if none.  */\n \n static int\n-mips_small_data_pattern_1 (rtx *loc, void *data ATTRIBUTE_UNUSED)\n+mips_small_data_pattern_1 (rtx *loc, void *data)\n {\n+  enum mips_symbol_context context;\n+\n   if (GET_CODE (*loc) == LO_SUM)\n     return -1;\n \n-  return mips_rewrite_small_data_p (*loc);\n+  if (MEM_P (*loc))\n+    {\n+      if (for_each_rtx (&XEXP (*loc, 0), mips_small_data_pattern_1, *loc))\n+\treturn 1;\n+      return -1;\n+    }\n+\n+  context = data ? SYMBOL_CONTEXT_MEM : SYMBOL_CONTEXT_LEA;\n+  return mips_rewrite_small_data_p (*loc, context);\n }\n \n /* Return true if OP refers to small data symbols directly, not through\n@@ -6463,12 +6480,22 @@ mips_small_data_pattern_p (rtx op)\n   return for_each_rtx (&op, mips_small_data_pattern_1, 0);\n }\n \f\n-/* A for_each_rtx callback, used by mips_rewrite_small_data.  */\n+/* A for_each_rtx callback, used by mips_rewrite_small_data.\n+   DATA is the containing MEM, or null if none.  */\n \n static int\n-mips_rewrite_small_data_1 (rtx *loc, void *data ATTRIBUTE_UNUSED)\n+mips_rewrite_small_data_1 (rtx *loc, void *data)\n {\n-  if (mips_rewrite_small_data_p (*loc))\n+  enum mips_symbol_context context;\n+\n+  if (MEM_P (*loc))\n+    {\n+      for_each_rtx (&XEXP (*loc, 0), mips_rewrite_small_data_1, *loc);\n+      return -1;\n+    }\n+\n+  context = data ? SYMBOL_CONTEXT_MEM : SYMBOL_CONTEXT_LEA;\n+  if (mips_rewrite_small_data_p (*loc, context))\n     *loc = gen_rtx_LO_SUM (Pmode, pic_offset_table_rtx, *loc);\n \n   if (GET_CODE (*loc) == LO_SUM)\n@@ -8307,7 +8334,7 @@ mips_in_small_data_p (tree decl)\n static bool\n mips_use_anchors_for_symbol_p (rtx symbol)\n {\n-  switch (mips_classify_symbol (symbol))\n+  switch (mips_classify_symbol (symbol, SYMBOL_CONTEXT_MEM))\n     {\n     case SYMBOL_PC_RELATIVE:\n     case SYMBOL_GP_RELATIVE:"}, {"sha": "1171291f508a603530d0dded00048cb9092c833b", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280fcbfab4eab60574d827533e6ca4c4e7cdf732/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280fcbfab4eab60574d827533e6ca4c4e7cdf732/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=280fcbfab4eab60574d827533e6ca4c4e7cdf732", "patch": "@@ -96,7 +96,7 @@\n {\n   enum mips_symbol_type symbol_type;\n \n-  if (!mips_symbolic_constant_p (op, &symbol_type))\n+  if (!mips_symbolic_constant_p (op, SYMBOL_CONTEXT_CALL, &symbol_type))\n     return false;\n \n   switch (symbol_type)\n@@ -160,7 +160,7 @@\n   (match_code \"const,symbol_ref,label_ref\")\n {\n   enum mips_symbol_type symbol_type;\n-  return (mips_symbolic_constant_p (op, &symbol_type)\n+  return (mips_symbolic_constant_p (op, SYMBOL_CONTEXT_LEA, &symbol_type)\n \t  && mips_split_p[symbol_type]);\n })\n \n@@ -211,7 +211,7 @@\n     case LABEL_REF:\n       if (CONST_GP_P (op))\n \treturn true;\n-      return (mips_symbolic_constant_p (op, &symbol_type)\n+      return (mips_symbolic_constant_p (op, SYMBOL_CONTEXT_LEA, &symbol_type)\n \t      && !mips_split_p[symbol_type]);\n \n     default:\n@@ -226,28 +226,31 @@\n   (match_code \"const,symbol_ref,label_ref\")\n {\n   enum mips_symbol_type type;\n-  return mips_symbolic_constant_p (op, &type);\n+  return mips_symbolic_constant_p (op, SYMBOL_CONTEXT_LEA, &type);\n })\n \n (define_predicate \"absolute_symbolic_operand\"\n   (match_code \"const,symbol_ref,label_ref\")\n {\n   enum mips_symbol_type type;\n-  return mips_symbolic_constant_p (op, &type) && type == SYMBOL_ABSOLUTE;\n+  return (mips_symbolic_constant_p (op, SYMBOL_CONTEXT_LEA, &type)\n+\t  && type == SYMBOL_ABSOLUTE);\n })\n \n (define_predicate \"got_disp_operand\"\n   (match_code \"const,symbol_ref,label_ref\")\n {\n   enum mips_symbol_type type;\n-  return mips_symbolic_constant_p (op, &type) && type == SYMBOL_GOT_DISP;\n+  return (mips_symbolic_constant_p (op, SYMBOL_CONTEXT_LEA, &type)\n+\t  && type == SYMBOL_GOT_DISP);\n })\n \n (define_predicate \"got_page_ofst_operand\"\n   (match_code \"const,symbol_ref,label_ref\")\n {\n   enum mips_symbol_type type;\n-  return mips_symbolic_constant_p (op, &type) && type == SYMBOL_GOT_PAGE_OFST;\n+  return (mips_symbolic_constant_p (op, SYMBOL_CONTEXT_LEA, &type)\n+\t  && type == SYMBOL_GOT_PAGE_OFST);\n })\n \n (define_predicate \"symbol_ref_operand\""}]}