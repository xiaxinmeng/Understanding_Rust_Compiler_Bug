{"sha": "ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMwZmY5ZjI3M2ZmNWQxZTExYTZjY2Q3OWIyN2YzM2Q1OTJlZWJkMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-12-20T09:05:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-20T09:05:04Z"}, "message": "ubsan.c: Include tree-ssanames.h, asan.h and gimplify-me.h.\n\n\t* ubsan.c: Include tree-ssanames.h, asan.h and gimplify-me.h.\n\t(ubsan_type_descriptor): Handle BOOLEAN_TYPE and ENUMERAL_TYPE\n\tlike INTEGER_TYPE.\n\t(instrument_bool_enum_load): New function.\n\t(ubsan_pass): Call it.\n\t(gate_ubsan): Also enable for SANITIZE_BOOL or SANITIZE_ENUM.\n\t* asan.c (create_cond_insert_point): No longer static.\n\t* asan.h (create_cond_insert_point): Declare.\n\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE): New\n\tbuilt-in.\n\t* opts.c (common_handle_option): Handle -fsanitize=bool and\n\t-fsanitize=enum.\n\t* builtins.c (fold_builtin_memory_op): When sanitizing bool\n\tand enum loads, don't use enum or bool types for memcpy folding.\n\t* flag-types.h (SANITIZE_BOOL, SANITIZE_ENUM): New.\n\t(SANITIZE_UNDEFINED): Or these in.\n\n\t* c-c++-common/ubsan/load-bool-enum.c: New test.\n\nFrom-SVN: r206143", "tree": {"sha": "1532e9443ebd8eec5317be98cd328850b93ce329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1532e9443ebd8eec5317be98cd328850b93ce329"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "634bdae96bb7ff880eeaaf35e6a91e38607a5783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634bdae96bb7ff880eeaaf35e6a91e38607a5783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/634bdae96bb7ff880eeaaf35e6a91e38607a5783"}], "stats": {"total": 200, "additions": 197, "deletions": 3}, "files": [{"sha": "ccffe8e0933b2947fba5026fdc199ea67bbf3ab6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "patch": "@@ -1,3 +1,22 @@\n+2013-12-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* ubsan.c: Include tree-ssanames.h, asan.h and gimplify-me.h.\n+\t(ubsan_type_descriptor): Handle BOOLEAN_TYPE and ENUMERAL_TYPE\n+\tlike INTEGER_TYPE.\n+\t(instrument_bool_enum_load): New function.\n+\t(ubsan_pass): Call it.\n+\t(gate_ubsan): Also enable for SANITIZE_BOOL or SANITIZE_ENUM.\n+\t* asan.c (create_cond_insert_point): No longer static.\n+\t* asan.h (create_cond_insert_point): Declare.\n+\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE): New\n+\tbuilt-in.\n+\t* opts.c (common_handle_option): Handle -fsanitize=bool and\n+\t-fsanitize=enum.\n+\t* builtins.c (fold_builtin_memory_op): When sanitizing bool\n+\tand enum loads, don't use enum or bool types for memcpy folding.\n+\t* flag-types.h (SANITIZE_BOOL, SANITIZE_ENUM): New.\n+\t(SANITIZE_UNDEFINED): Or these in.\n+\n 2013-12-20  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.h (NDS32_MODE_TYPE_ALIGN): New macro."}, {"sha": "d4059d6e7dd05c5fe1b6abb6c56d339c612b86d0", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "patch": "@@ -1337,7 +1337,7 @@ report_error_func (bool is_store, int size_in_bytes)\n     same as what ITER was pointing to prior to calling this function,\n     if BEFORE_P is true; otherwise, it is its following statement.  */\n \n-static gimple_stmt_iterator\n+gimple_stmt_iterator\n create_cond_insert_point (gimple_stmt_iterator *iter,\n \t\t\t  bool before_p,\n \t\t\t  bool then_more_likely_p,"}, {"sha": "8ffd90e94f4b1f560cfae28cb732c304402f75b6", "filename": "gcc/asan.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "patch": "@@ -29,6 +29,9 @@ extern bool asan_protect_global (tree);\n extern void initialize_sanitizer_builtins (void);\n extern tree asan_dynamic_init_call (bool);\n \n+extern gimple_stmt_iterator create_cond_insert_point\n+     (gimple_stmt_iterator *, bool, bool, bool, basic_block *, basic_block *);\n+\n /* Alias set for accessing the shadow memory.  */\n extern alias_set_type asan_shadow_set;\n "}, {"sha": "5b6d39a8b60a3db0ec087e1cd1fb1fddf0851f5f", "filename": "gcc/builtins.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "patch": "@@ -8912,6 +8912,29 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n       off0 = build_int_cst (build_pointer_type_for_mode (char_type_node,\n \t\t\t\t\t\t\t ptr_mode, true), 0);\n \n+      /* For -fsanitize={bool,enum} make sure the load isn't performed in\n+\t the bool or enum type.  */\n+      if (((flag_sanitize & SANITIZE_BOOL)\n+\t   && TREE_CODE (desttype) == BOOLEAN_TYPE)\n+\t  || ((flag_sanitize & SANITIZE_ENUM)\n+\t      && TREE_CODE (desttype) == ENUMERAL_TYPE))\n+\t{\n+\t  tree destitype\n+\t    = lang_hooks.types.type_for_mode (TYPE_MODE (desttype),\n+\t\t\t\t\t      TYPE_UNSIGNED (desttype));\n+\t  desttype = build_aligned_type (destitype, TYPE_ALIGN (desttype));\n+\t}\n+      if (((flag_sanitize & SANITIZE_BOOL)\n+\t   && TREE_CODE (srctype) == BOOLEAN_TYPE)\n+\t  || ((flag_sanitize & SANITIZE_ENUM)\n+\t      && TREE_CODE (srctype) == ENUMERAL_TYPE))\n+\t{\n+\t  tree srcitype\n+\t    = lang_hooks.types.type_for_mode (TYPE_MODE (srctype),\n+\t\t\t\t\t      TYPE_UNSIGNED (srctype));\n+\t  srctype = build_aligned_type (srcitype, TYPE_ALIGN (srctype));\n+\t}\n+\n       destvar = dest;\n       STRIP_NOPS (destvar);\n       if (TREE_CODE (destvar) == ADDR_EXPR"}, {"sha": "e4792dd3cfd6beac6490c1782b06e7fbd3216d8e", "filename": "gcc/flag-types.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "patch": "@@ -216,9 +216,11 @@ enum sanitize_code {\n   SANITIZE_NULL = 1 << 7,\n   SANITIZE_RETURN = 1 << 8,\n   SANITIZE_SI_OVERFLOW = 1 << 9,\n+  SANITIZE_BOOL = 1 << 10,\n+  SANITIZE_ENUM = 1 << 11,\n   SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE\n \t\t       | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN\n-\t\t       | SANITIZE_SI_OVERFLOW\n+\t\t       | SANITIZE_SI_OVERFLOW | SANITIZE_BOOL | SANITIZE_ENUM\n };\n \n /* flag_vtable_verify initialization levels. */"}, {"sha": "251605ceb96a1274e7583b60a10ca45985fe85bf", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "patch": "@@ -1462,6 +1462,8 @@ common_handle_option (struct gcc_options *opts,\n \t      { \"null\", SANITIZE_NULL, sizeof \"null\" - 1 },\n \t      { \"signed-integer-overflow\", SANITIZE_SI_OVERFLOW,\n \t\tsizeof \"signed-integer-overflow\" -1 },\n+\t      { \"bool\", SANITIZE_BOOL, sizeof \"bool\" - 1 },\n+\t      { \"enum\", SANITIZE_ENUM, sizeof \"enum\" - 1 },\n \t      { NULL, 0, 0 }\n \t    };\n \t    const char *comma;"}, {"sha": "43f7467fc2aad737d0a005641d4479b05b90c1e0", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "patch": "@@ -331,3 +331,7 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW,\n \t\t      \"__ubsan_handle_negate_overflow\",\n \t\t      BT_FN_VOID_PTR_PTR,\n \t\t      ATTR_COLD_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE,\n+\t\t      \"__ubsan_handle_load_invalid_value\",\n+\t\t      BT_FN_VOID_PTR_PTR,\n+\t\t      ATTR_COLD_NOTHROW_LEAF_LIST)"}, {"sha": "4d994b414727d5de114ab35ae20972aef6f155c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "patch": "@@ -1,3 +1,7 @@\n+2013-12-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/ubsan/load-bool-enum.c: New test.\n+\n 2013-12-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t * lib/target-supports.exp (check_effective_target_arm_crypto_ok):"}, {"sha": "db346cbf7197f82cca0fb48a293e6647d2f76073", "filename": "gcc/testsuite/c-c++-common/ubsan/load-bool-enum.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fload-bool-enum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fload-bool-enum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fload-bool-enum.c?ref=ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=bool,enum\" } */\n+\n+#ifndef __cplusplus\n+#define bool _Bool\n+#endif\n+enum A { B = -3, C = 2 } a;\n+bool b;\n+\n+__attribute__((noinline, noclone)) enum A\n+foo (bool *p)\n+{\n+  *p = b;   /* { dg-output \"load-bool-enum.c:13:\\[^\\n\\r]*runtime error: load of value 4, which is not a valid value for type '(_B|b)ool'(\\n|\\r\\n|\\r)\" } */\n+  return a; /* { dg-output \"\\[^\\n\\r]*load-bool-enum.c:14:\\[^\\n\\r]*runtime error: load of value 9, which is not a valid value for type 'A'(\\n|\\r\\n|\\r)\" { target c++ } } */\n+}\n+\n+int\n+main ()\n+{\n+  char c = 4;\n+  int d = 9;\n+  if (sizeof (int) != sizeof (a) || sizeof (b) != 1)\n+    return 0;\n+  __builtin_memcpy (&a, &d, sizeof (int));\n+  __builtin_memcpy (&b, &c, 1);\n+  bool e;\n+  foo (&e);\n+  return 0;\n+}"}, {"sha": "dfc9fbc6ab67ed9519ef10f1a86ab000c90da753", "filename": "gcc/ubsan.c", "status": "modified", "additions": 109, "deletions": 1, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=ac0ff9f273ff5d1e11a6ccd79b27f33d592eebd3", "patch": "@@ -43,6 +43,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-common.h\"\n #include \"rtl.h\"\n #include \"expr.h\"\n+#include \"tree-ssanames.h\"\n+#include \"asan.h\"\n+#include \"gimplify-me.h\"\n \n /* Map from a tree to a VAR_DECL tree.  */\n \n@@ -344,6 +347,8 @@ ubsan_type_descriptor (tree type, bool want_pointer_type_p)\n \n   switch (TREE_CODE (type))\n     {\n+    case BOOLEAN_TYPE:\n+    case ENUMERAL_TYPE:\n     case INTEGER_TYPE:\n       tkind = 0x0000;\n       break;\n@@ -733,6 +738,104 @@ instrument_si_overflow (gimple_stmt_iterator gsi)\n     }\n }\n \n+/* Instrument loads from (non-bitfield) bool and C++ enum values\n+   to check if the memory value is outside of the range of the valid\n+   type values.  */\n+\n+static void\n+instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  tree rhs = gimple_assign_rhs1 (stmt);\n+  tree type = TREE_TYPE (rhs);\n+  tree minv = NULL_TREE, maxv = NULL_TREE;\n+\n+  if (TREE_CODE (type) == BOOLEAN_TYPE && (flag_sanitize & SANITIZE_BOOL))\n+    {\n+      minv = boolean_false_node;\n+      maxv = boolean_true_node;\n+    }\n+  else if (TREE_CODE (type) == ENUMERAL_TYPE\n+\t   && (flag_sanitize & SANITIZE_ENUM)\n+\t   && TREE_TYPE (type) != NULL_TREE\n+\t   && TREE_CODE (TREE_TYPE (type)) == INTEGER_TYPE\n+\t   && (TYPE_PRECISION (TREE_TYPE (type))\n+\t       < GET_MODE_PRECISION (TYPE_MODE (type))))\n+    {\n+      minv = TYPE_MIN_VALUE (TREE_TYPE (type));\n+      maxv = TYPE_MAX_VALUE (TREE_TYPE (type));\n+    }\n+  else\n+    return;\n+\n+  int modebitsize = GET_MODE_BITSIZE (TYPE_MODE (type));\n+  HOST_WIDE_INT bitsize, bitpos;\n+  tree offset;\n+  enum machine_mode mode;\n+  int volatilep = 0, unsignedp = 0;\n+  tree base = get_inner_reference (rhs, &bitsize, &bitpos, &offset, &mode,\n+\t\t\t\t   &unsignedp, &volatilep, false);\n+  tree utype = build_nonstandard_integer_type (modebitsize, 1);\n+\n+  if ((TREE_CODE (base) == VAR_DECL && DECL_HARD_REGISTER (base))\n+      || (bitpos % modebitsize) != 0\n+      || bitsize != modebitsize\n+      || GET_MODE_BITSIZE (TYPE_MODE (utype)) != modebitsize\n+      || TREE_CODE (gimple_assign_lhs (stmt)) != SSA_NAME)\n+    return;\n+\n+  location_t loc = gimple_location (stmt);\n+  tree ptype = build_pointer_type (TREE_TYPE (rhs));\n+  tree atype = reference_alias_ptr_type (rhs);\n+  gimple g = gimple_build_assign (make_ssa_name (ptype, NULL),\n+\t\t\t\t  build_fold_addr_expr (rhs));\n+  gimple_set_location (g, loc);\n+  gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+  tree mem = build2 (MEM_REF, utype, gimple_assign_lhs (g),\n+\t\t     build_int_cst (atype, 0));\n+  tree urhs = make_ssa_name (utype, NULL);\n+  g = gimple_build_assign (urhs, mem);\n+  gimple_set_location (g, loc);\n+  gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+  minv = fold_convert (utype, minv);\n+  maxv = fold_convert (utype, maxv);\n+  if (!integer_zerop (minv))\n+    {\n+      g = gimple_build_assign_with_ops (MINUS_EXPR,\n+\t\t\t\t\tmake_ssa_name (utype, NULL),\n+\t\t\t\t\turhs, minv);\n+      gimple_set_location (g, loc);\n+      gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+    }\n+\n+  gimple_stmt_iterator gsi2 = *gsi;\n+  basic_block then_bb, fallthru_bb;\n+  *gsi = create_cond_insert_point (gsi, true, false, true,\n+\t\t\t\t   &then_bb, &fallthru_bb);\n+  g = gimple_build_cond (GT_EXPR, gimple_assign_lhs (g),\n+\t\t\t int_const_binop (MINUS_EXPR, maxv, minv),\n+\t\t\t NULL_TREE, NULL_TREE);\n+  gimple_set_location (g, loc);\n+  gsi_insert_after (gsi, g, GSI_NEW_STMT);\n+\n+  gimple_assign_set_rhs_with_ops (&gsi2, NOP_EXPR, urhs, NULL_TREE);\n+  update_stmt (stmt);\n+\n+  tree data = ubsan_create_data (\"__ubsan_invalid_value_data\",\n+\t\t\t\t loc, NULL,\n+\t\t\t\t ubsan_type_descriptor (type, false),\n+\t\t\t\t NULL_TREE);\n+  data = build_fold_addr_expr_loc (loc, data);\n+  tree fn = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE);\n+\n+  gsi2 = gsi_after_labels (then_bb);\n+  tree val = force_gimple_operand_gsi (&gsi2, ubsan_encode_value (urhs),\n+\t\t\t\t       true, NULL_TREE, true, GSI_SAME_STMT);\n+  g = gimple_build_call (fn, 2, data, val);\n+  gimple_set_location (g, loc);\n+  gsi_insert_before (&gsi2, g, GSI_SAME_STMT);\n+}\n+\n /* Gate and execute functions for ubsan pass.  */\n \n static unsigned int\n@@ -764,6 +867,10 @@ ubsan_pass (void)\n \t\tinstrument_null (gsi, false);\n \t    }\n \n+\t  if (flag_sanitize & (SANITIZE_BOOL | SANITIZE_ENUM)\n+\t      && gimple_assign_load_p (stmt))\n+\t    instrument_bool_enum_load (&gsi);\n+\n \t  gsi_next (&gsi);\n \t}\n     }\n@@ -773,7 +880,8 @@ ubsan_pass (void)\n static bool\n gate_ubsan (void)\n {\n-  return flag_sanitize & (SANITIZE_NULL | SANITIZE_SI_OVERFLOW);\n+  return flag_sanitize & (SANITIZE_NULL | SANITIZE_SI_OVERFLOW\n+\t\t\t  | SANITIZE_BOOL | SANITIZE_ENUM);\n }\n \n namespace {"}]}