{"sha": "7d806eba2b6b9726455861ecab9705cb123f0df7", "node_id": "C_kwDOANBUbNoAKDdkODA2ZWJhMmI2Yjk3MjY0NTU4NjFlY2FiOTcwNWNiMTIzZjBkZjc", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-11T12:16:45Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-11T15:18:02Z"}, "message": "ast: lowering: Add translate_visibility() static function\n\nThis function desugars `AST::Visibility`s into `HIR::Visibility`s,\nperforming all the necessary checks and conversions", "tree": {"sha": "f746a8bae6d6cfe81c75d0fe32c05f87349047b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f746a8bae6d6cfe81c75d0fe32c05f87349047b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d806eba2b6b9726455861ecab9705cb123f0df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d806eba2b6b9726455861ecab9705cb123f0df7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d806eba2b6b9726455861ecab9705cb123f0df7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d806eba2b6b9726455861ecab9705cb123f0df7/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a264a36932288c2a1fe848b03eab977267761dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a264a36932288c2a1fe848b03eab977267761dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a264a36932288c2a1fe848b03eab977267761dd"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "aa6bef42f71f245120cef74664c9d45ce5e08e94", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d806eba2b6b9726455861ecab9705cb123f0df7/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d806eba2b6b9726455861ecab9705cb123f0df7/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=7d806eba2b6b9726455861ecab9705cb123f0df7", "patch": "@@ -632,6 +632,8 @@ struct Visibility\n     : public_vis_type (public_vis_type), in_path (std::move (in_path))\n   {}\n \n+  PublicVisType get_public_vis_type () { return public_vis_type; }\n+\n   // Returns whether visibility is in an error state.\n   bool is_error () const\n   {\n@@ -684,6 +686,7 @@ struct Visibility\n   }\n \n   std::string as_string () const;\n+  const SimplePath &get_path () const { return in_path; }\n \n protected:\n   // Clone function implementation - not currently virtual but may be if"}, {"sha": "c926926c26e0fd5376bd45d5581daf8993dd41e2", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d806eba2b6b9726455861ecab9705cb123f0df7/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d806eba2b6b9726455861ecab9705cb123f0df7/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=7d806eba2b6b9726455861ecab9705cb123f0df7", "patch": "@@ -21,6 +21,7 @@\n \n #include \"rust-diagnostics.h\"\n \n+#include \"rust-ast-lower.h\"\n #include \"rust-ast-lower-base.h\"\n #include \"rust-ast-lower-enumitem.h\"\n #include \"rust-ast-lower-type.h\"\n@@ -59,7 +60,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     // should be lowered from module.get_vis()\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (module.get_visibility ());\n \n     auto items = std::vector<std::unique_ptr<Item>> ();\n \n@@ -99,7 +100,7 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (alias.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n     if (alias.has_generics ())\n@@ -146,15 +147,16 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (struct_decl.get_visibility ());\n \n     std::vector<HIR::TupleField> fields;\n     for (AST::TupleField &field : struct_decl.get_fields ())\n       {\n \tif (field.get_field_type ()->is_marked_for_strip ())\n \t  continue;\n \n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\t// FIXME: How do we get the visibility from here?\n+\tHIR::Visibility vis = translate_visibility (field.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n@@ -209,7 +211,8 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    HIR::Visibility vis = translate_visibility (struct_decl.get_visibility ());\n \n     bool is_unit = struct_decl.is_unit_struct ();\n     std::vector<HIR::StructField> fields;\n@@ -218,7 +221,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \tif (field.get_field_type ()->is_marked_for_strip ())\n \t  continue;\n \n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Visibility vis = translate_visibility (field.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n@@ -276,7 +279,7 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (enum_decl.get_visibility ());\n \n     // bool is_unit = enum_decl.is_zero_variant ();\n     std::vector<std::unique_ptr<HIR::EnumItem>> items;\n@@ -326,15 +329,16 @@ class ASTLoweringItem : public ASTLoweringBase\n \t  std::unique_ptr<HIR::WhereClauseItem> (i));\n       }\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (union_decl.get_visibility ());\n \n     std::vector<HIR::StructField> variants;\n     for (AST::StructField &variant : union_decl.get_variants ())\n       {\n \tif (variant.get_field_type ()->is_marked_for_strip ())\n \t  continue;\n \n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\t// FIXME: Does visibility apply here?\n+\tHIR::Visibility vis = translate_visibility (variant.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (variant.get_field_type ().get ());\n \n@@ -375,7 +379,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \n   void visit (AST::StaticItem &var) override\n   {\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (var.get_visibility ());\n \n     HIR::Type *type = ASTLoweringType::translate (var.get_type ().get ());\n     HIR::Expr *expr = ASTLoweringExpr::translate (var.get_expr ().get ());\n@@ -401,7 +405,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \n   void visit (AST::ConstantItem &constant) override\n   {\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (constant.get_visibility ());\n \n     HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n     HIR::Expr *expr = ASTLoweringExpr::translate (constant.get_expr ().get ());\n@@ -441,7 +445,7 @@ class ASTLoweringItem : public ASTLoweringBase\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers\n       = lower_qualifiers (function.get_qualifiers ());\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (function.get_visibility ());\n \n     // need\n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n@@ -530,7 +534,7 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (impl_block.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n     if (impl_block.has_generics ())\n@@ -619,7 +623,7 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n \n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (trait.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n     if (trait.has_generics ())\n@@ -692,7 +696,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t  std::unique_ptr<HIR::WhereClauseItem> (i));\n       }\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (impl_block.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n     if (impl_block.has_generics ())\n@@ -774,7 +778,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \n   void visit (AST::ExternBlock &extern_block) override\n   {\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (extern_block.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::ExternalItem>> extern_items;\n     for (auto &item : extern_block.get_extern_items ())"}, {"sha": "1da823a8e32987eae9de36a3f33299cb893bf756", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d806eba2b6b9726455861ecab9705cb123f0df7/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d806eba2b6b9726455861ecab9705cb123f0df7/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=7d806eba2b6b9726455861ecab9705cb123f0df7", "patch": "@@ -26,6 +26,41 @@\n namespace Rust {\n namespace HIR {\n \n+Visibility\n+translate_visibility (const AST::Visibility &vis)\n+{\n+  // FIXME: How do we create a private visibility here? Is it always private if\n+  // the AST vis is an error?\n+  // FIXME: We need to add a `create_private()` static function to the\n+  // AST::Visibility class and use it when the vis is empty in the parser...\n+  if (vis.is_error ())\n+    return Visibility::create_error ();\n+\n+  // FIXME: ... And then use this?\n+  // if (vis.is_private ())\n+  //   return Visibility::create_private ();\n+\n+  switch (vis.get_public_vis_type ())\n+    {\n+    case AST::Visibility::NONE:\n+      return Visibility (Visibility::VisType::PUBLIC);\n+    case AST::Visibility::SELF:\n+      return Visibility (Visibility::VisType::PRIVATE);\n+    // Desugar pub(crate) into pub(in crate) and so on\n+    case AST::Visibility::CRATE:\n+      return Visibility (Visibility::PUBLIC,\n+\t\t\t AST::SimplePath::from_str (\"crate\"));\n+    case AST::Visibility::SUPER:\n+      return Visibility (Visibility::PUBLIC,\n+\t\t\t AST::SimplePath::from_str (\"super\"));\n+    case AST::Visibility::IN_PATH:\n+      return Visibility (Visibility::VisType::PUBLIC, vis.get_path ());\n+      break;\n+    }\n+\n+  return Visibility::create_error ();\n+}\n+\n ASTLowering::ASTLowering (AST::Crate &astCrate) : astCrate (astCrate) {}\n \n ASTLowering::~ASTLowering () {}"}, {"sha": "e1df5b24b33cd49ef05ad7dce328a13411f23867", "filename": "gcc/rust/hir/rust-ast-lower.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d806eba2b6b9726455861ecab9705cb123f0df7/gcc%2Frust%2Fhir%2Frust-ast-lower.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d806eba2b6b9726455861ecab9705cb123f0df7/gcc%2Frust%2Fhir%2Frust-ast-lower.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.h?ref=7d806eba2b6b9726455861ecab9705cb123f0df7", "patch": "@@ -32,6 +32,14 @@ namespace HIR {\n bool\n struct_field_name_exists (std::vector<HIR::StructField> &fields,\n \t\t\t  HIR::StructField &new_field);\n+\n+/**\n+ * Lowers a Visibility from the AST into an HIR Visibility, desugaring it in\n+ * the process\n+ */\n+Visibility\n+translate_visibility (const AST::Visibility &vis);\n+\n class ASTLowering\n {\n public:"}]}