{"sha": "bb727b5ae32bf10d1e7597f064382b9214584271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI3MjdiNWFlMzJiZjEwZDFlNzU5N2YwNjQzODJiOTIxNDU4NDI3MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-25T09:30:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-25T09:30:38Z"}, "message": "[multiple changes]\n\nTue Nov 25 01:26:55 1997  Bruno Haible <haible@ilog.fr>:\n\n\t* dwarf2out.c (ASM_OUTPUT_DWARF_DELTA1): Implement.\n\nMon Nov 24 22:41:55 1997  Jason Merrill  <jason@yorick.cygnus.com>\n\n\t* except.c (get_dynamic_handler_chain): Build up a FUNCTION_DECL.\n\t* optabs.c (init_optabs): Lose get_dynamic_handler_chain_libfunc.\n\t* expr.h: Likewise.\n\nFrom-SVN: r16696", "tree": {"sha": "ca6591a7b866135d15eb5a98ad1717ce4efd9672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca6591a7b866135d15eb5a98ad1717ce4efd9672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb727b5ae32bf10d1e7597f064382b9214584271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb727b5ae32bf10d1e7597f064382b9214584271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb727b5ae32bf10d1e7597f064382b9214584271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb727b5ae32bf10d1e7597f064382b9214584271/comments", "author": null, "committer": null, "parents": [{"sha": "9b49329391a65b2ead788a9ffce9f7547ce4fd36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b49329391a65b2ead788a9ffce9f7547ce4fd36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b49329391a65b2ead788a9ffce9f7547ce4fd36"}], "stats": {"total": 93, "additions": 75, "deletions": 18}, "files": [{"sha": "647638c5d329b5bfbc19fc90ca8df6e52574ce55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb727b5ae32bf10d1e7597f064382b9214584271/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb727b5ae32bf10d1e7597f064382b9214584271/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb727b5ae32bf10d1e7597f064382b9214584271", "patch": "@@ -1,3 +1,13 @@\n+Tue Nov 25 01:26:55 1997  Bruno Haible <haible@ilog.fr>:\n+\n+\t* dwarf2out.c (ASM_OUTPUT_DWARF_DELTA1): Implement.\n+\n+Mon Nov 24 22:41:55 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* except.c (get_dynamic_handler_chain): Build up a FUNCTION_DECL.\n+\t* optabs.c (init_optabs): Lose get_dynamic_handler_chain_libfunc.\n+\t* expr.h: Likewise.\n+\n Fri Nov 21 15:20:05 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (program_transform_cross_name): Clean up \"-e\" confusion."}, {"sha": "e9bae0026f95309ca045cd3c35e9caacfd2e97db", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb727b5ae32bf10d1e7597f064382b9214584271/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb727b5ae32bf10d1e7597f064382b9214584271/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=bb727b5ae32bf10d1e7597f064382b9214584271", "patch": "@@ -266,6 +266,15 @@ static unsigned reg_number\t\tPROTO((rtx));\n   fprintf ((FILE), \"\\t%s\\t0x%x\", ASM_BYTE_OP, VALUE)\n #endif\n \n+#ifndef ASM_OUTPUT_DWARF_DELTA1\n+#define ASM_OUTPUT_DWARF_DELTA1(FILE,LABEL1,LABEL2)\t\t\t\\\n+ do {\tfprintf ((FILE), \"\\t%s\\t\", ASM_BYTE_OP);\t\t\t\\\n+\tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n+\tfprintf (FILE, \"-\");\t\t\t\t\t\t\\\n+\tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n+  } while (0)\n+#endif\n+\n #ifdef UNALIGNED_INT_ASM_OP\n \n #ifndef UNALIGNED_OFFSET_ASM_OP\n@@ -1451,8 +1460,11 @@ output_cfi (cfi, fde)\n           fputc ('\\n', asm_out_file);\n \t  break;\n \tcase DW_CFA_advance_loc1:\n-\t  /* TODO: not currently implemented.  */\n-\t  abort ();\n+\t  ASM_OUTPUT_DWARF_DELTA1 (asm_out_file,\n+\t\t\t\t   cfi->dw_cfi_oprnd1.dw_cfi_addr,\n+\t\t\t\t   fde->dw_fde_current_label);\n+\t  fputc ('\\n', asm_out_file);\n+\t  fde->dw_fde_current_label = cfi->dw_cfi_oprnd1.dw_cfi_addr;\n \t  break;\n \tcase DW_CFA_advance_loc2:\n           ASM_OUTPUT_DWARF_DELTA2 (asm_out_file,"}, {"sha": "cdfa9777a90f44e6b7b78b69afe1fadf09a2fa13", "filename": "gcc/except.c", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb727b5ae32bf10d1e7597f064382b9214584271/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb727b5ae32bf10d1e7597f064382b9214584271/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=bb727b5ae32bf10d1e7597f064382b9214584271", "patch": "@@ -743,24 +743,44 @@ get_dynamic_handler_chain ()\n       rtx dhc, insns;\n       start_sequence ();\n \n-      dhc = emit_library_call_value (get_dynamic_handler_chain_libfunc,\n-\t\t\t\t     NULL_RTX, 1,\n-\t\t\t\t     Pmode, 0);\n-      current_function_dhc = copy_to_reg (dhc);\n+      /* ... */\n       insns = get_insns ();\n       end_sequence ();\n       emit_insns_before (insns, get_first_nonparm_insn ());\n     }\n-#else\n-  rtx dhc;\n-  dhc = emit_library_call_value (get_dynamic_handler_chain_libfunc,\n-\t\t\t\t NULL_RTX, 1,\n-\t\t\t\t Pmode, 0);\n-  current_function_dhc = copy_to_reg (dhc);\n-#endif\n-\n   /* We don't want a copy of the dhc, but rather, the single dhc.  */\n   return gen_rtx (MEM, Pmode, current_function_dhc);\n+#endif\n+\n+  static tree fn;\n+  tree expr;\n+\n+  if (fn == NULL_TREE)\n+    {\n+      tree fntype;\n+      fn = get_identifier (\"__get_dynamic_handler_chain\");\n+      push_obstacks_nochange ();\n+      end_temporary_allocation ();\n+      fntype = build_pointer_type (build_pointer_type\n+\t\t\t\t   (build_pointer_type (void_type_node)));\n+      fntype = build_function_type (fntype, NULL_TREE);\n+      fn = build_decl (FUNCTION_DECL, fn, fntype);\n+      DECL_EXTERNAL (fn) = 1;\n+      TREE_PUBLIC (fn) = 1;\n+      DECL_ARTIFICIAL (fn) = 1;\n+      TREE_READONLY (fn) = 1;\n+      make_decl_rtl (fn, NULL_PTR, 1);\n+      assemble_external (fn);\n+      pop_obstacks ();\n+    }\n+\n+  expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n+  expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n+\t\texpr, NULL_TREE, NULL_TREE);\n+  TREE_SIDE_EFFECTS (expr) = 1;\n+  expr = build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (expr)), expr);\n+\n+  return expand_expr (expr, NULL_RTX, VOIDmode, 0);\n }\n \n /* Get a reference to the dynamic cleanup chain.  It points to the"}, {"sha": "aec539a422fc92c4e10f69caf211a8f735e6b295", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb727b5ae32bf10d1e7597f064382b9214584271/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb727b5ae32bf10d1e7597f064382b9214584271/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=bb727b5ae32bf10d1e7597f064382b9214584271", "patch": "@@ -416,7 +416,6 @@ extern rtx sjpopnthrow_libfunc;\n extern rtx terminate_libfunc;\n extern rtx setjmp_libfunc;\n extern rtx longjmp_libfunc;\n-extern rtx get_dynamic_handler_chain_libfunc;\n \n extern rtx eqhf2_libfunc;\n extern rtx nehf2_libfunc;"}, {"sha": "067db59ef7b0e6e57f180f250427f5312257838d", "filename": "gcc/optabs.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb727b5ae32bf10d1e7597f064382b9214584271/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb727b5ae32bf10d1e7597f064382b9214584271/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=bb727b5ae32bf10d1e7597f064382b9214584271", "patch": "@@ -1,5 +1,5 @@\n /* Expand the basic unary and binary arithmetic operations, for GNU compiler.\n-   Copyright (C) 1987, 88, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92-96, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -20,6 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n+#include <stdio.h>\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n@@ -124,7 +125,6 @@ rtx sjpopnthrow_libfunc;\n rtx terminate_libfunc;\n rtx setjmp_libfunc;\n rtx longjmp_libfunc;\n-rtx get_dynamic_handler_chain_libfunc;\n \n rtx eqhf2_libfunc;\n rtx nehf2_libfunc;\n@@ -213,6 +213,7 @@ rtx chkr_check_addr_libfunc;\n rtx chkr_set_right_libfunc;\n rtx chkr_copy_bitmap_libfunc;\n rtx chkr_check_exec_libfunc;\n+rtx chkr_check_str_libfunc;\n \n /* Indexed by the rtx-code for a conditional (eg. EQ, LT,...)\n    gives the gen_function to make a branch to test that condition.  */\n@@ -2959,6 +2960,9 @@ emit_float_lib_cmp (x, y, comparison)\n       case LE:\n \tlibfunc = lehf2_libfunc;\n \tbreak;\n+\n+      default:\n+\tbreak;\n       }\n   else if (mode == SFmode)\n     switch (comparison)\n@@ -2986,6 +2990,9 @@ emit_float_lib_cmp (x, y, comparison)\n       case LE:\n \tlibfunc = lesf2_libfunc;\n \tbreak;\n+\n+      default:\n+\tbreak;\n       }\n   else if (mode == DFmode)\n     switch (comparison)\n@@ -3013,6 +3020,9 @@ emit_float_lib_cmp (x, y, comparison)\n       case LE:\n \tlibfunc = ledf2_libfunc;\n \tbreak;\n+\n+      default:\n+\tbreak;\n       }\n   else if (mode == XFmode)\n     switch (comparison)\n@@ -3040,6 +3050,9 @@ emit_float_lib_cmp (x, y, comparison)\n       case LE:\n \tlibfunc = lexf2_libfunc;\n \tbreak;\n+\n+      default:\n+\tbreak;\n       }\n   else if (mode == TFmode)\n     switch (comparison)\n@@ -3067,6 +3080,9 @@ emit_float_lib_cmp (x, y, comparison)\n       case LE:\n \tlibfunc = letf2_libfunc;\n \tbreak;\n+\n+      default:\n+\tbreak;\n       }\n   else\n     {\n@@ -4289,7 +4305,6 @@ init_optabs ()\n   setjmp_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"setjmp\");\n   longjmp_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"longjmp\");\n #endif\n-  get_dynamic_handler_chain_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__get_dynamic_handler_chain\");\n \n   eqhf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__eqhf2\");\n   nehf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__nehf2\");\n@@ -4379,6 +4394,7 @@ init_optabs ()\n   chkr_set_right_libfunc = gen_rtx (SYMBOL_REF, VOIDmode, \"chkr_set_right\");\n   chkr_copy_bitmap_libfunc = gen_rtx (SYMBOL_REF, VOIDmode, \"chkr_copy_bitmap\");\n   chkr_check_exec_libfunc = gen_rtx (SYMBOL_REF, VOIDmode, \"chkr_check_exec\");\n+  chkr_check_str_libfunc = gen_rtx (SYMBOL_REF, VOIDmode, \"chkr_check_str\");\n \n #ifdef INIT_TARGET_OPTABS\n   /* Allow the target to add more libcalls or rename some, etc.  */"}]}