{"sha": "43502b83135b5a368972e6c5f57f945d002e7c50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1MDJiODMxMzViNWEzNjg5NzJlNmM1ZjU3Zjk0NWQwMDJlN2M1MA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-11-19T20:15:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-11-19T20:15:45Z"}, "message": "tree-ssa-dom.c (record_equivalences_from_phis): Fix handling of degenerates resulting from ignoring an edge.\n\n        * tree-ssa-dom.c (record_equivalences_from_phis): Fix handling\n        of degenerates resulting from ignoring an edge.\n\nFrom-SVN: r254938", "tree": {"sha": "31322f916a322ae66dd935bbeb04f0da8be18bd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31322f916a322ae66dd935bbeb04f0da8be18bd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43502b83135b5a368972e6c5f57f945d002e7c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43502b83135b5a368972e6c5f57f945d002e7c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43502b83135b5a368972e6c5f57f945d002e7c50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43502b83135b5a368972e6c5f57f945d002e7c50/comments", "author": null, "committer": null, "parents": [{"sha": "8a4a6d2e844df54583cd8fac181586b10f63fe25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a4a6d2e844df54583cd8fac181586b10f63fe25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a4a6d2e844df54583cd8fac181586b10f63fe25"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "5ce981d087194102faaa4ed6b07167076ecbe7de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43502b83135b5a368972e6c5f57f945d002e7c50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43502b83135b5a368972e6c5f57f945d002e7c50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43502b83135b5a368972e6c5f57f945d002e7c50", "patch": "@@ -1,3 +1,8 @@\n+2017-11-19  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (record_equivalences_from_phis): Fix handling\n+\tof degenerates resulting from ignoring an edge.\n+\n 2017-11-19  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/81360"}, {"sha": "916d66134c38be50ed956fe7815d4b964697e87e", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43502b83135b5a368972e6c5f57f945d002e7c50/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43502b83135b5a368972e6c5f57f945d002e7c50/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=43502b83135b5a368972e6c5f57f945d002e7c50", "patch": "@@ -1011,6 +1011,7 @@ record_equivalences_from_phis (basic_block bb)\n       tree rhs = NULL;\n       size_t i;\n \n+      bool ignored_phi_arg = false;\n       for (i = 0; i < gimple_phi_num_args (phi); i++)\n \t{\n \t  tree t = gimple_phi_arg_def (phi, i);\n@@ -1021,10 +1022,14 @@ record_equivalences_from_phis (basic_block bb)\n \t  if (lhs == t)\n \t    continue;\n \n-\t  /* If the associated edge is not marked as executable, then it\n-\t     can be ignored.  */\n+\t  /* We want to track if we ignored any PHI arguments because\n+\t     their associated edges were not executable.  This impacts\n+\t     whether or not we can use any equivalence we might discover.  */\n \t  if ((gimple_phi_arg_edge (phi, i)->flags & EDGE_EXECUTABLE) == 0)\n-\t    continue;\n+\t    {\n+\t      ignored_phi_arg = true;\n+\t      continue;\n+\t    }\n \n \t  t = dom_valueize (t);\n \n@@ -1049,9 +1054,15 @@ record_equivalences_from_phis (basic_block bb)\n \t a useful equivalence.  We do not need to record unwind data for\n \t this, since this is a true assignment and not an equivalence\n \t inferred from a comparison.  All uses of this ssa name are dominated\n-\t by this assignment, so unwinding just costs time and space.  */\n+\t by this assignment, so unwinding just costs time and space.\n+\n+\t Note that if we ignored a PHI argument and the resulting equivalence\n+\t is SSA_NAME = SSA_NAME.  Then we can not use the equivalence as the\n+\t uses of the LHS SSA_NAME are not necessarily dominated by the\n+\t assignment of the RHS SSA_NAME.  */\n       if (i == gimple_phi_num_args (phi)\n-\t  && may_propagate_copy (lhs, rhs))\n+\t  && may_propagate_copy (lhs, rhs)\n+\t  && (!ignored_phi_arg || TREE_CODE (rhs) != SSA_NAME))\n \tset_ssa_name_value (lhs, rhs);\n     }\n }"}]}