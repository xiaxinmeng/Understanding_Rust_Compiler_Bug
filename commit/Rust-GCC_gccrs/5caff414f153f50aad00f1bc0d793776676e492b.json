{"sha": "5caff414f153f50aad00f1bc0d793776676e492b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNhZmY0MTRmMTUzZjUwYWFkMDBmMWJjMGQ3OTM3NzY2NzZlNDkyYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-09-11T11:02:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-09-11T11:02:14Z"}, "message": "Implement N4258 noexcept for std::basic_string.\n\n\tPR libstdc++/58265\n\t* doc/xml/manual/intro.xml: Document LWG 2063 and 2064 resolutions.\n\t* doc/html/manual/bugs.html: Regenerate.\n\t* include/bits/basic_string.h (basic_string): Implement N4258. Add\n\tcorrect exception-specifications and propagate allocators correctly.\n\t* include/bits/basic_string.tcc (basic_string::swap): Propagate\n\tallocators correctly.\n\t* include/debug/string (__gnu_debug::basic_string): Add correct\n\texceptions-specifications and allcoator-extended constructors.\n\t* testsuite/21_strings/basic_string/allocator/char/copy.cc: New.\n\t* testsuite/21_strings/basic_string/allocator/char/copy_assign.cc:\n\tNew.\n\t* testsuite/21_strings/basic_string/allocator/char/minimal.cc: New.\n\t* testsuite/21_strings/basic_string/allocator/char/move.cc: New.\n\t* testsuite/21_strings/basic_string/allocator/char/move_assign.cc:\n\tNew.\n\t* testsuite/21_strings/basic_string/allocator/char/noexcept.cc: New.\n\t* testsuite/21_strings/basic_string/allocator/char/swap.cc: New.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy.cc: New.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc:\n\tNew.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/minimal.cc: New.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/move.cc: New.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/move_assign.cc:\n\tNew.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/noexcept.cc: New.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/swap.cc: New.\n\t* testsuite/util/testsuite_allocator.h (tracker_allocator): Define\n\tdefaulted assignment operators.\n\nFrom-SVN: r227681", "tree": {"sha": "7f874e1b19838f08d31b01a85708c48602ae8eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f874e1b19838f08d31b01a85708c48602ae8eb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5caff414f153f50aad00f1bc0d793776676e492b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5caff414f153f50aad00f1bc0d793776676e492b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5caff414f153f50aad00f1bc0d793776676e492b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5caff414f153f50aad00f1bc0d793776676e492b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "997ed914e2c1ca4083affd78fd22569f5e734d08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997ed914e2c1ca4083affd78fd22569f5e734d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/997ed914e2c1ca4083affd78fd22569f5e734d08"}], "stats": {"total": 1483, "additions": 1450, "deletions": 33}, "files": [{"sha": "3bd33ba504c387070d74217caf3681bb060ab977", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -1,5 +1,35 @@\n 2015-09-11  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/58265\n+\t* doc/xml/manual/intro.xml: Document LWG 2063 and 2064 resolutions.\n+\t* doc/html/manual/bugs.html: Regenerate.\n+\t* include/bits/basic_string.h (basic_string): Implement N4258. Add\n+\tcorrect exception-specifications and propagate allocators correctly.\n+\t* include/bits/basic_string.tcc (basic_string::swap): Propagate\n+\tallocators correctly.\n+\t* include/debug/string (__gnu_debug::basic_string): Add correct\n+\texceptions-specifications and allcoator-extended constructors.\n+\t* testsuite/21_strings/basic_string/allocator/char/copy.cc: New.\n+\t* testsuite/21_strings/basic_string/allocator/char/copy_assign.cc:\n+\tNew.\n+\t* testsuite/21_strings/basic_string/allocator/char/minimal.cc: New.\n+\t* testsuite/21_strings/basic_string/allocator/char/move.cc: New.\n+\t* testsuite/21_strings/basic_string/allocator/char/move_assign.cc:\n+\tNew.\n+\t* testsuite/21_strings/basic_string/allocator/char/noexcept.cc: New.\n+\t* testsuite/21_strings/basic_string/allocator/char/swap.cc: New.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy.cc: New.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc:\n+\tNew.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/minimal.cc: New.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/move.cc: New.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/move_assign.cc:\n+\tNew.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/noexcept.cc: New.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/swap.cc: New.\n+\t* testsuite/util/testsuite_allocator.h (tracker_allocator): Define\n+\tdefaulted assignment operators.\n+\n \tPR libstdc++/65092\n \t* include/bits/stl_queue.h (queue, priority_queue): Add\n \tallocator-extended constructors."}, {"sha": "65ffc01a45be557ec3575ea5dff506afbe81d4cf", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -366,6 +366,12 @@\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2059\" target=\"_top\">2059</a>:\n \t<span class=\"emphasis\"><em>C++0x ambiguity problem with map::erase</em></span>\n     </span></dt><dd><p>Add additional overloads.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2063\" target=\"_top\">2063</a>:\n+\t<span class=\"emphasis\"><em>Contradictory requirements for string move assignment</em></span>\n+    </span></dt><dd><p>Respect propagation trait for move assignment.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2064\" target=\"_top\">2064</a>:\n+\t<span class=\"emphasis\"><em>More noexcept issues in basic_string</em></span>\n+    </span></dt><dd><p>Add noexcept to the comparison operators.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2067\" target=\"_top\">2067</a>:\n \t<span class=\"emphasis\"><em>packaged_task should have deleted copy c'tor with const parameter</em></span>\n     </span></dt><dd><p>Fix signatures."}, {"sha": "2aa9ba7a896d78f5734841e5915b5922f40b9366", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -850,6 +850,18 @@ requirements of the license of GCC.\n     <listitem><para>Add additional overloads.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2063\">2063</link>:\n+\t<emphasis>Contradictory requirements for string move assignment</emphasis>\n+    </term>\n+    <listitem><para>Respect propagation trait for move assignment.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2064\">2064</link>:\n+\t<emphasis>More noexcept issues in basic_string</emphasis>\n+    </term>\n+    <listitem><para>Add noexcept to the comparison operators.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2067\">2067</link>:\n \t<emphasis>packaged_task should have deleted copy c'tor with const parameter</emphasis>\n     </term>"}, {"sha": "e6e7bb525ba7bfa2aa77b5d5ce578ce56707940e", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 91, "deletions": 10, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -379,17 +379,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @brief  Default constructor creates an empty string.\n        */\n       basic_string()\n-#if __cplusplus >= 201103L\n-      noexcept(is_nothrow_default_constructible<_Alloc>::value)\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)\n       : _M_dataplus(_M_local_data())\n       { _M_set_length(0); }\n \n       /**\n        *  @brief  Construct an empty string using allocator @a a.\n        */\n       explicit\n-      basic_string(const _Alloc& __a)\n+      basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT\n       : _M_dataplus(_M_local_data(), __a)\n       { _M_set_length(0); }\n \n@@ -398,7 +396,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __str  Source string.\n        */\n       basic_string(const basic_string& __str)\n-      : _M_dataplus(_M_local_data(), __str._M_get_allocator()) // TODO A traits\n+      : _M_dataplus(_M_local_data(),\n+\t\t    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))\n       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }\n \n       /**\n@@ -511,10 +510,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { _M_construct(__str.begin(), __str.end()); }\n \n       basic_string(basic_string&& __str, const _Alloc& __a)\n+      noexcept(_Alloc_traits::_S_always_equal())\n       : _M_dataplus(_M_local_data(), __a)\n       {\n-\tif (__str.get_allocator() == __a)\n-\t  *this = std::move(__str);\n+\tif (__str._M_is_local())\n+\t  {\n+\t    traits_type::copy(_M_local_buf, __str._M_local_buf,\n+\t\t\t      _S_local_capacity + 1);\n+\t    _M_length(__str.length());\n+\t    __str._M_set_length(0);\n+\t  }\n+\telse if (_Alloc_traits::_S_always_equal()\n+\t    || __str.get_allocator() == __a)\n+\t  {\n+\t    _M_data(__str._M_data());\n+\t    _M_length(__str.length());\n+\t    _M_capacity(__str._M_allocated_capacity);\n+\t    __str._M_data(__str._M_local_buf);\n+\t    __str._M_set_length(0);\n+\t  }\n \telse\n \t  _M_construct(__str.begin(), __str.end());\n       }\n@@ -550,7 +564,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_string&\n       operator=(const basic_string& __str)\n-      { return this->assign(__str); }\n+      {\n+#if __cplusplus >= 201103L\n+\tif (_Alloc_traits::_S_propagate_on_copy_assign())\n+\t  {\n+\t    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()\n+\t\t&& _M_get_allocator() != __str._M_get_allocator())\n+\t      {\n+\t\t// replacement allocator cannot free existing storage\n+\t\t_M_destroy(_M_allocated_capacity);\n+\t\t_M_data(_M_local_data());\n+\t\t_M_set_length(0);\n+\t      }\n+\t    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());\n+\t  }\n+#endif\n+\treturn this->assign(__str);\n+      }\n \n       /**\n        *  @brief  Copy contents of @a s into this string.\n@@ -587,8 +617,51 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       // 2063. Contradictory requirements for string move assignment\n       basic_string&\n       operator=(basic_string&& __str)\n+      noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n-\tthis->swap(__str);\n+\tif (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()\n+\t    && !_Alloc_traits::_S_always_equal()\n+\t    && _M_get_allocator() != __str._M_get_allocator())\n+\t  {\n+\t    // Destroy existing storage before replacing allocator.\n+\t    _M_destroy(_M_allocated_capacity);\n+\t    _M_data(_M_local_data());\n+\t    _M_set_length(0);\n+\t  }\n+\t// Replace allocator if POCMA is true.\n+\tstd::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());\n+\n+\tif (!__str._M_is_local()\n+\t    && (_Alloc_traits::_S_propagate_on_move_assign()\n+\t      || _Alloc_traits::_S_always_equal()))\n+\t  {\n+\t    pointer __data = nullptr;\n+\t    size_type __capacity;\n+\t    if (!_M_is_local())\n+\t      {\n+\t\tif (_Alloc_traits::_S_always_equal())\n+\t\t  {\n+\t\t    __data = _M_data();\n+\t\t    __capacity = _M_allocated_capacity;\n+\t\t  }\n+\t\telse\n+\t\t  _M_destroy(_M_allocated_capacity);\n+\t      }\n+\n+\t    _M_data(__str._M_data());\n+\t    _M_length(__str.length());\n+\t    _M_capacity(__str._M_allocated_capacity);\n+\t    if (__data)\n+\t      {\n+\t\t__str._M_data(__data);\n+\t\t__str._M_capacity(__capacity);\n+\t      }\n+\t    else\n+\t      __str._M_data(__str._M_local_buf);\n+\t  }\n+\telse\n+\t    assign(__str);\n+\t__str.clear();\n \treturn *this;\n       }\n \n@@ -1119,6 +1192,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_string&\n       assign(basic_string&& __str)\n+      noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 2063. Contradictory requirements for string move assignment\n@@ -4961,13 +5035,14 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     inline bool\n     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.compare(__rhs) == 0; }\n \n   template<typename _CharT>\n     inline\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type\n     operator==(const basic_string<_CharT>& __lhs,\n-\t       const basic_string<_CharT>& __rhs)\n+\t       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT\n     { return (__lhs.size() == __rhs.size()\n \t      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),\n \t\t\t\t\t\t    __lhs.size())); }\n@@ -5007,6 +5082,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     inline bool\n     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return !(__lhs == __rhs); }\n \n   /**\n@@ -5044,6 +5120,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     inline bool\n     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.compare(__rhs) < 0; }\n \n   /**\n@@ -5081,6 +5158,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     inline bool\n     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.compare(__rhs) > 0; }\n \n   /**\n@@ -5118,6 +5196,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     inline bool\n     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.compare(__rhs) <= 0; }\n \n   /**\n@@ -5155,6 +5234,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     inline bool\n     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.compare(__rhs) >= 0; }\n \n   /**\n@@ -5192,6 +5272,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     inline void\n     swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t basic_string<_CharT, _Traits, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n "}, {"sha": "56af86471e5f7868274bbda08b04c1f3b5ecc371", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -61,11 +61,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (this == &__s)\n \treturn;\n \n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 431. Swapping containers with unequal allocators.\n-      // TODO propagation traits\n-      std::__alloc_swap<allocator_type>::_S_do_it(_M_get_allocator(),\n-\t\t\t\t\t\t  __s._M_get_allocator());\n+      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());\n \n       if (_M_is_local())\n \tif (__s._M_is_local())\n@@ -404,7 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       if (__new_size <= this->capacity())\n \t{\n-\t  _CharT* __p = this->_M_data() + __pos1;\n+\t  pointer __p = this->_M_data() + __pos1;\n \n \t  const size_type __how_much = __old_size - __pos1 - __n1;\n \t  if (__how_much && __n1 != __n2)\n@@ -433,7 +429,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       if (__new_size <= this->capacity())\n \t{\n-\t  _CharT* __p = this->_M_data() + __pos;\n+\t  pointer __p = this->_M_data() + __pos;\n \n \t  const size_type __how_much = __old_size - __pos - __len1;\n \t  if (_M_disjunct(__s))"}, {"sha": "d1f4a565aa271879db605aeddf72f3cf7ca63afd", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -36,19 +36,19 @@\n \n namespace __gnu_debug\n {\n-  /// Class std::basic_string with safety/checking/debug instrumentation.\n-  template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n-\t   typename _Allocator = std::allocator<_CharT> >\n-    class basic_string\n-    : public __gnu_debug::_Safe_container<\n-\tbasic_string<_CharT, _Traits, _Allocator>,\n-\t_Allocator, _Safe_sequence, bool(_GLIBCXX_USE_CXX11_ABI)>,\n-      public std::basic_string<_CharT, _Traits, _Allocator>\n-    {\n-      typedef std::basic_string<_CharT, _Traits, _Allocator>\t_Base;\n-      typedef __gnu_debug::_Safe_container<\n-\tbasic_string, _Allocator, _Safe_sequence, bool(_GLIBCXX_USE_CXX11_ABI)>\n-\t_Safe;\n+/// Class std::basic_string with safety/checking/debug instrumentation.\n+template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n+\t typename _Allocator = std::allocator<_CharT> >\n+  class basic_string\n+  : public __gnu_debug::_Safe_container<\n+      basic_string<_CharT, _Traits, _Allocator>,\n+      _Allocator, _Safe_sequence, bool(_GLIBCXX_USE_CXX11_ABI)>,\n+    public std::basic_string<_CharT, _Traits, _Allocator>\n+  {\n+    typedef std::basic_string<_CharT, _Traits, _Allocator>\t_Base;\n+    typedef __gnu_debug::_Safe_container<\n+      basic_string, _Allocator, _Safe_sequence, bool(_GLIBCXX_USE_CXX11_ABI)>\n+      _Safe;\n \n   public:\n     // types:\n@@ -72,9 +72,13 @@ namespace __gnu_debug\n \n     using _Base::npos;\n \n+    basic_string()\n+    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_default_constructible<_Base>::value)\n+    : _Base() { }\n+\n     // 21.3.1 construct/copy/destroy:\n-    explicit basic_string(const _Allocator& __a = _Allocator())\n-    // _GLIBCXX_NOEXCEPT\n+    explicit\n+    basic_string(const _Allocator& __a) _GLIBCXX_NOEXCEPT\n     : _Base(__a) { }\n \n #if __cplusplus < 201103L\n@@ -91,7 +95,19 @@ namespace __gnu_debug\n     : _Base(__l, __a)\n     { }\n \n+#if _GLIBCXX_USE_CXX11_ABI\n+    basic_string(const basic_string& __s, const _Allocator& __a)\n+    : _Base(__s, __a) { }\n+\n+    basic_string(basic_string&& __s, const _Allocator& __a)\n+    : _Base(std::move(__s), __a) { }\n+#endif\n+\n     ~basic_string() = default;\n+\n+    // Provides conversion from a normal-mode string to a debug-mode string\n+    basic_string(_Base&& __base) noexcept\n+    : _Base(std::move(__base)) { }\n #endif // C++11\n \n     // Provides conversion from a normal-mode string to a debug-mode string\n@@ -278,7 +294,7 @@ namespace __gnu_debug\n     reference\n     operator[](size_type __pos) // _GLIBCXX_NOEXCEPT\n     {\n-#ifdef _GLIBCXX_DEBUG_PEDANTIC\n+#if __cplusplus < 201103L && defined(_GLIBCXX_DEBUG_PEDANTIC)\n       __glibcxx_check_subscript(__pos);\n #else\n       // as an extension v3 allows s[s.size()] when s is non-const.\n@@ -413,6 +429,7 @@ namespace __gnu_debug\n #if __cplusplus >= 201103L\n     basic_string&\n     assign(basic_string&& __x)\n+    noexcept(noexcept(std::declval<_Base&>().assign(std::move(__x))))\n     {\n       _Base::assign(std::move(__x));\n       this->_M_invalidate_all();\n@@ -729,6 +746,7 @@ namespace __gnu_debug\n \n     void\n     swap(basic_string& __x)\n+    _GLIBCXX_NOEXCEPT_IF(std::__is_nothrow_swappable<_Base>::value)\n     {\n       _Safe::_M_swap(__x);\n       _Base::swap(__x);"}, {"sha": "d02e9b93ecaac84a03d5e0dc90ed8508bc7ce7d3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/copy.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,97 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+ \n+#if _GLIBCXX_USE_CXX11_ABI\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+\n+  v1.assign(1, c);\n+  test_type v2(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(0 == v2.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v3(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(0 == v3.get_allocator().get_personality());\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+\n+  v1.assign(1, c);\n+  test_type v2(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v3(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v3.get_allocator().get_personality());\n+}\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+\n+  v1.assign(1, c);\n+  test_type v2(v1, alloc_type(2));\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v3(v1, alloc_type(3));\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(3 == v3.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}\n+#else\n+int main()\n+{\n+  // COW strings don't support C++11 allocators\n+}\n+#endif"}, {"sha": "94e0796116869a93a8770e2812cb8dc55fac3c83", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/copy_assign.cc", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy_assign.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,114 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+ \n+#if _GLIBCXX_USE_CXX11_ABI\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+\n+  v1.assign(1, c);\n+  test_type v2(alloc_type(2));\n+  v2.assign(1, c);\n+  v2 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+\n+  v1.assign(1, c);\n+  test_type v3(alloc_type(3));\n+  v3.assign(100, c);\n+  v3 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(3 == v3.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v4(alloc_type(4));\n+  v4.assign(1, c);\n+  v4 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(4 == v4.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v5(alloc_type(5));\n+  v5.assign(100, c);\n+  v5 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(5 == v5.get_allocator().get_personality());\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+\n+  v1.assign(1, c);\n+  test_type v2(alloc_type(2));\n+  v2.assign(1, c);\n+  v2 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+\n+  v1.assign(1, c);\n+  test_type v3(alloc_type(3));\n+  v3.assign(100, c);\n+  v3 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v3.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v4(alloc_type(4));\n+  v4.assign(1, c);\n+  v4 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v4.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v5(alloc_type(5));\n+  v5.assign(100, c);\n+  v5 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v5.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+#else\n+int main()\n+{\n+  // COW strings don't support C++11 allocators\n+}\n+#endif"}, {"sha": "4bfd4cabe42ed07128b69dc7c378ea2a72473e9d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/minimal.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fminimal.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+ \n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::SimpleAllocator;\n+\n+template class std::basic_string<C,traits, SimpleAllocator<C>>;\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_CXX11_ABI\n+  typedef SimpleAllocator<C> alloc_type;\n+  typedef std::allocator_traits<alloc_type> traits_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v(alloc_type{});\n+  v.assign(1, c);\n+  v.assign(100, c);\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "113df8fe9e55ce93944e3ede60d83a7bd302a70a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/move.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+#if _GLIBCXX_USE_CXX11_ABI\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::uneq_allocator;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef uneq_allocator<C> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  v1.assign(1, c);\n+  test_type v2(std::move(v1));\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef uneq_allocator<C> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  v1.assign(1, c);\n+  test_type v2(std::move(v1), alloc_type(2));\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+#else\n+int main()\n+{\n+  // COW strings don't support C++11 allocators\n+}\n+#endif"}, {"sha": "153ffd2810dc6687d8755cc1ca54b801f0242c90", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/move_assign.cc", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove_assign.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,160 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+ \n+#if _GLIBCXX_USE_CXX11_ABI\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(alloc_type(1));\n+  v1.assign(1, c);\n+  test_type v2(alloc_type(2));\n+  v2.assign(1, c);\n+  v2 = std::move(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+\n+  test_type v3(alloc_type(3));\n+  v3.assign(1, c);\n+  test_type v4(alloc_type(4));\n+  v4.assign(100, c);\n+  v4 = std::move(v3);\n+  VERIFY(3 == v3.get_allocator().get_personality());\n+  VERIFY(4 == v4.get_allocator().get_personality());\n+\n+  test_type v5(alloc_type(5));\n+  v5.assign(100, c);\n+  test_type v6(alloc_type(6));\n+  v6.assign(1, c);\n+  v6 = std::move(v5);\n+  VERIFY(5 == v5.get_allocator().get_personality());\n+  VERIFY(6 == v6.get_allocator().get_personality());\n+\n+  test_type v7(alloc_type(7));\n+  v7.assign(100, c);\n+  test_type v8(alloc_type(8));\n+  v8.assign(100, c);\n+  v8 = std::move(v7);\n+  VERIFY(7 == v7.get_allocator().get_personality());\n+  VERIFY(8 == v8.get_allocator().get_personality());\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(alloc_type(1));\n+  v1.assign(1, c);\n+  test_type v2(alloc_type(2));\n+  v2.assign(1, c);\n+  v2 = std::move(v1);\n+  VERIFY(0 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+\n+  test_type v3(alloc_type(3));\n+  v3.assign(1, c);\n+  test_type v4(alloc_type(4));\n+  v4.assign(100, c);\n+  v4 = std::move(v3);\n+  VERIFY(0 == v3.get_allocator().get_personality());\n+  VERIFY(3 == v4.get_allocator().get_personality());\n+\n+  test_type v5(alloc_type(5));\n+  v5.assign(100, c);\n+  test_type v6(alloc_type(6));\n+  v6.assign(1, c);\n+  v6 = std::move(v5);\n+  VERIFY(0 == v5.get_allocator().get_personality());\n+  VERIFY(5 == v6.get_allocator().get_personality());\n+\n+  test_type v7(alloc_type(7));\n+  v7.assign(100, c);\n+  test_type v8(alloc_type(8));\n+  v8.assign(100, c);\n+  v8 = std::move(v7);\n+  VERIFY(0 == v7.get_allocator().get_personality());\n+  VERIFY(7 == v8.get_allocator().get_personality());\n+}\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(alloc_type(1));\n+  v1.assign(1, c);\n+  test_type v2(alloc_type(1));\n+  v2.assign(1, c);\n+  v2 = std::move(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+\n+  test_type v3(alloc_type(3));\n+  v3.assign(1, c);\n+  test_type v4(alloc_type(3));\n+  v4.assign(100, c);\n+  v4 = std::move(v3);\n+  VERIFY(3 == v3.get_allocator().get_personality());\n+  VERIFY(3 == v4.get_allocator().get_personality());\n+\n+  test_type v5(alloc_type(5));\n+  v5.assign(100, c);\n+  test_type v6(alloc_type(5));\n+  v6.assign(1, c);\n+  v6 = std::move(v5);\n+  VERIFY(5 == v5.get_allocator().get_personality());\n+  VERIFY(5 == v6.get_allocator().get_personality());\n+\n+  test_type v7(alloc_type(7));\n+  v7.assign(100, c);\n+  test_type v8(alloc_type(7));\n+  v8.assign(100, c);\n+  v8 = std::move(v7);\n+  VERIFY(7 == v7.get_allocator().get_personality());\n+  VERIFY(7 == v8.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}\n+#else\n+int main()\n+{\n+  // COW strings don't support C++11 allocators\n+}\n+#endif"}, {"sha": "8733ea186cfa6c31949068717cd113687a51b084", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/noexcept.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fnoexcept.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_allocator.h>\n+ \n+#if _GLIBCXX_USE_CXX11_ABI\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  typedef std::allocator<C> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  // this is a GNU extension for std::allocator\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n+}\n+\n+void test02()\n+{\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(alloc_type(2));\n+  static_assert( !noexcept( v1 = std::move(v2) ), \"Move assign can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n+}\n+\n+void test03()\n+{\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(alloc_type(2));\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n+}\n+#endif"}, {"sha": "21003eb392d34e27f2bbefc132a27b103e7fa127", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/swap.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fswap.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+ \n+#if _GLIBCXX_USE_CXX11_ABI\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::propagating_allocator;\n+\n+// It is undefined behaviour to swap() containers wth unequal allocators\n+// if the allocator doesn't propagate, so ensure the allocators compare\n+// equal, while still being able to test propagation via get_personality().\n+bool\n+operator==(const propagating_allocator<C, false>&,\n+           const propagating_allocator<C, false>&)\n+{\n+  return true;\n+}\n+\n+bool\n+operator!=(const propagating_allocator<C, false>&,\n+           const propagating_allocator<C, false>&)\n+{\n+  return false;\n+}\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  v1.push_back(C());\n+  test_type v2(alloc_type(2));\n+  v2.push_back(C());\n+  std::swap(v1, v2);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+  // swap back so assertions in uneq_allocator::deallocate don't fail\n+  std::swap(v1, v2);\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  v1.push_back(C());\n+  test_type v2(alloc_type(2));\n+  v2.push_back(C());\n+  std::swap(v1, v2);\n+  VERIFY(2 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+#else\n+int main()\n+{\n+  // COW strings don't support C++11 allocators\n+}\n+#endif"}, {"sha": "c95e2eff59992806516281bc24d9a98e4a5d0cf0", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/copy.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,97 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+ \n+#if _GLIBCXX_USE_CXX11_ABI && defined(_GLIBCXX_USE_WCHAR_T)\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+\n+  v1.assign(1, c);\n+  test_type v2(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(0 == v2.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v3(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(0 == v3.get_allocator().get_personality());\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+\n+  v1.assign(1, c);\n+  test_type v2(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v3(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v3.get_allocator().get_personality());\n+}\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+\n+  v1.assign(1, c);\n+  test_type v2(v1, alloc_type(2));\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v3(v1, alloc_type(3));\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(3 == v3.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}\n+#else\n+int main()\n+{\n+  // COW strings don't support C++11 allocators\n+}\n+#endif"}, {"sha": "f69dff74effe7e0b5dcb80a6fe304d0ec8d8e3ea", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy_assign.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,114 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+ \n+#if _GLIBCXX_USE_CXX11_ABI && defined(_GLIBCXX_USE_WCHAR_T)\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+\n+  v1.assign(1, c);\n+  test_type v2(alloc_type(2));\n+  v2.assign(1, c);\n+  v2 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+\n+  v1.assign(1, c);\n+  test_type v3(alloc_type(3));\n+  v3.assign(100, c);\n+  v3 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(3 == v3.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v4(alloc_type(4));\n+  v4.assign(1, c);\n+  v4 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(4 == v4.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v5(alloc_type(5));\n+  v5.assign(100, c);\n+  v5 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(5 == v5.get_allocator().get_personality());\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+\n+  v1.assign(1, c);\n+  test_type v2(alloc_type(2));\n+  v2.assign(1, c);\n+  v2 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+\n+  v1.assign(1, c);\n+  test_type v3(alloc_type(3));\n+  v3.assign(100, c);\n+  v3 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v3.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v4(alloc_type(4));\n+  v4.assign(1, c);\n+  v4 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v4.get_allocator().get_personality());\n+\n+  v1.assign(100, c);\n+  test_type v5(alloc_type(5));\n+  v5.assign(100, c);\n+  v5 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v5.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+#else\n+int main()\n+{\n+  // COW strings don't support C++11 allocators\n+}\n+#endif"}, {"sha": "bfba87cc76bb289d553f8d5fc05ac1905515469f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/minimal.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fminimal.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+ \n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::SimpleAllocator;\n+\n+template class std::basic_string<C,traits, SimpleAllocator<C>>;\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_CXX11_ABI && defined(_GLIBCXX_USE_WCHAR_T)\n+  typedef SimpleAllocator<C> alloc_type;\n+  typedef std::allocator_traits<alloc_type> traits_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v(alloc_type{});\n+  v.assign(1, c);\n+  v.assign(100, c);\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "88927a631245b21b3478234ce147af7467925a3b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/move.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+#if _GLIBCXX_USE_CXX11_ABI && defined(_GLIBCXX_USE_WCHAR_T)\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::uneq_allocator;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef uneq_allocator<C> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  v1.assign(1, c);\n+  test_type v2(std::move(v1));\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef uneq_allocator<C> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  v1.assign(1, c);\n+  test_type v2(std::move(v1), alloc_type(2));\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+#else\n+int main()\n+{\n+  // COW strings don't support C++11 allocators\n+}\n+#endif"}, {"sha": "45283a71c70fa457fc49ee10ef9980a0c03ef31b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/move_assign.cc", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove_assign.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,160 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+ \n+#if _GLIBCXX_USE_CXX11_ABI && defined(_GLIBCXX_USE_WCHAR_T)\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(alloc_type(1));\n+  v1.assign(1, c);\n+  test_type v2(alloc_type(2));\n+  v2.assign(1, c);\n+  v2 = std::move(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+\n+  test_type v3(alloc_type(3));\n+  v3.assign(1, c);\n+  test_type v4(alloc_type(4));\n+  v4.assign(100, c);\n+  v4 = std::move(v3);\n+  VERIFY(3 == v3.get_allocator().get_personality());\n+  VERIFY(4 == v4.get_allocator().get_personality());\n+\n+  test_type v5(alloc_type(5));\n+  v5.assign(100, c);\n+  test_type v6(alloc_type(6));\n+  v6.assign(1, c);\n+  v6 = std::move(v5);\n+  VERIFY(5 == v5.get_allocator().get_personality());\n+  VERIFY(6 == v6.get_allocator().get_personality());\n+\n+  test_type v7(alloc_type(7));\n+  v7.assign(100, c);\n+  test_type v8(alloc_type(8));\n+  v8.assign(100, c);\n+  v8 = std::move(v7);\n+  VERIFY(7 == v7.get_allocator().get_personality());\n+  VERIFY(8 == v8.get_allocator().get_personality());\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(alloc_type(1));\n+  v1.assign(1, c);\n+  test_type v2(alloc_type(2));\n+  v2.assign(1, c);\n+  v2 = std::move(v1);\n+  VERIFY(0 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+\n+  test_type v3(alloc_type(3));\n+  v3.assign(1, c);\n+  test_type v4(alloc_type(4));\n+  v4.assign(100, c);\n+  v4 = std::move(v3);\n+  VERIFY(0 == v3.get_allocator().get_personality());\n+  VERIFY(3 == v4.get_allocator().get_personality());\n+\n+  test_type v5(alloc_type(5));\n+  v5.assign(100, c);\n+  test_type v6(alloc_type(6));\n+  v6.assign(1, c);\n+  v6 = std::move(v5);\n+  VERIFY(0 == v5.get_allocator().get_personality());\n+  VERIFY(5 == v6.get_allocator().get_personality());\n+\n+  test_type v7(alloc_type(7));\n+  v7.assign(100, c);\n+  test_type v8(alloc_type(8));\n+  v8.assign(100, c);\n+  v8 = std::move(v7);\n+  VERIFY(0 == v7.get_allocator().get_personality());\n+  VERIFY(7 == v8.get_allocator().get_personality());\n+}\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(alloc_type(1));\n+  v1.assign(1, c);\n+  test_type v2(alloc_type(1));\n+  v2.assign(1, c);\n+  v2 = std::move(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+\n+  test_type v3(alloc_type(3));\n+  v3.assign(1, c);\n+  test_type v4(alloc_type(3));\n+  v4.assign(100, c);\n+  v4 = std::move(v3);\n+  VERIFY(3 == v3.get_allocator().get_personality());\n+  VERIFY(3 == v4.get_allocator().get_personality());\n+\n+  test_type v5(alloc_type(5));\n+  v5.assign(100, c);\n+  test_type v6(alloc_type(5));\n+  v6.assign(1, c);\n+  v6 = std::move(v5);\n+  VERIFY(5 == v5.get_allocator().get_personality());\n+  VERIFY(5 == v6.get_allocator().get_personality());\n+\n+  test_type v7(alloc_type(7));\n+  v7.assign(100, c);\n+  test_type v8(alloc_type(7));\n+  v8.assign(100, c);\n+  v8 = std::move(v7);\n+  VERIFY(7 == v7.get_allocator().get_personality());\n+  VERIFY(7 == v8.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}\n+#else\n+int main()\n+{\n+  // COW strings don't support C++11 allocators\n+}\n+#endif"}, {"sha": "5fb3c1bd8a5a2bed2375d86a9719810222a2a6df", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/noexcept.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fnoexcept.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_allocator.h>\n+ \n+#if _GLIBCXX_USE_CXX11_ABI && defined(_GLIBCXX_USE_WCHAR_T)\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  typedef std::allocator<C> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  // this is a GNU extension for std::allocator\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n+}\n+\n+void test02()\n+{\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(alloc_type(2));\n+  static_assert( !noexcept( v1 = std::move(v2) ), \"Move assign can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n+}\n+\n+void test03()\n+{\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(alloc_type(2));\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n+}\n+#endif"}, {"sha": "5490f9e7d032552031ca723ec415f3baf636fb5e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/swap.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fswap.cc?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+ \n+#if _GLIBCXX_USE_CXX11_ABI && defined(_GLIBCXX_USE_WCHAR_T)\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::propagating_allocator;\n+\n+// It is undefined behaviour to swap() containers wth unequal allocators\n+// if the allocator doesn't propagate, so ensure the allocators compare\n+// equal, while still being able to test propagation via get_personality().\n+bool\n+operator==(const propagating_allocator<C, false>&,\n+           const propagating_allocator<C, false>&)\n+{\n+  return true;\n+}\n+\n+bool\n+operator!=(const propagating_allocator<C, false>&,\n+           const propagating_allocator<C, false>&)\n+{\n+  return false;\n+}\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  v1.push_back(C());\n+  test_type v2(alloc_type(2));\n+  v2.push_back(C());\n+  std::swap(v1, v2);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+  // swap back so assertions in uneq_allocator::deallocate don't fail\n+  std::swap(v1, v2);\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  v1.push_back(C());\n+  test_type v2(alloc_type(2));\n+  v2.push_back(C());\n+  std::swap(v1, v2);\n+  VERIFY(2 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+#else\n+int main()\n+{\n+  // COW strings don't support C++11 allocators\n+}\n+#endif"}, {"sha": "2fa6a96303737396595af02821d626d0934cbede", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5caff414f153f50aad00f1bc0d793776676e492b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=5caff414f153f50aad00f1bc0d793776676e492b", "patch": "@@ -119,6 +119,8 @@ namespace __gnu_test\n       tracker_allocator() = default;\n       tracker_allocator(const tracker_allocator&) = default;\n       tracker_allocator(tracker_allocator&&) = default;\n+      tracker_allocator& operator=(const tracker_allocator&) = default;\n+      tracker_allocator& operator=(tracker_allocator&&) = default;\n \n       // Perfect forwarding constructor.\n       template<typename... _Args>"}]}