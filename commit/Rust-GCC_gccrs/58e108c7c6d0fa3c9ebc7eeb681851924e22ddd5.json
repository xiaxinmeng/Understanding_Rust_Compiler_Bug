{"sha": "58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThlMTA4YzdjNmQwZmEzYzllYmM3ZWViNjgxODUxOTI0ZTIyZGRkNQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-05-07T15:53:17Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-05-11T17:09:57Z"}, "message": "Implement basic rustc legacy symbol mangling\n\nRust supports two different symbol mangling methods legacy and V0. V0 is\nthe goal but its not yet stable. This implements the legacy method but\nwith a dummy hash value since it requires a sip128 implementation to\ngenerate the apropriate hash which can be done in a sperate change.\n\nThis change allows us to actually assemble generic functions and avoid\nbad symbol duplications.\n\nAddresses #305", "tree": {"sha": "95c03868e9d05a84000e29187e2e5ccba431cd35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95c03868e9d05a84000e29187e2e5ccba431cd35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c04343dbab902e5b8a5f047266645a5e7d40a5ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04343dbab902e5b8a5f047266645a5e7d40a5ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04343dbab902e5b8a5f047266645a5e7d40a5ed"}], "stats": {"total": 115, "additions": 93, "deletions": 22}, "files": [{"sha": "7db4ea20d67f54e622f7b66379d847a92f3fab9e", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5", "patch": "@@ -258,6 +258,11 @@ class Context\n     return pop;\n   }\n \n+  std::string mangle_item (const std::string &name) const;\n+\n+  std::string mangle_impl_item (const TyTy::BaseType *self,\n+\t\t\t\tconst std::string &name) const;\n+\n private:\n   ::Backend *backend;\n   Resolver::Resolver *resolver;"}, {"sha": "f2caa2e1d3837c94838f1cd1bbc760758ae91cba", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5", "patch": "@@ -112,15 +112,17 @@ class CompileInherentImplItem : public HIRCompileBase\n     ::Btype *compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n \n     unsigned int flags = 0;\n-    std::string fn_identifier\n-      = self->get_name () + \"_\" + function.get_function_name ();\n \n     // if its the main fn or pub visibility mark its as DECL_PUBLIC\n     // please see https://github.com/Rust-GCC/gccrs/pull/137\n     if (function.has_visibility ())\n       flags |= Backend::function_is_visible;\n \n-    std::string asm_name = fn_identifier;\n+    std::string fn_identifier\n+      = self->get_name () + \"_\" + function.get_function_name ();\n+    std::string asm_name\n+      = ctx->mangle_impl_item (self, function.get_function_name ());\n+\n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, fn_identifier,\n \t\t\t\t       asm_name, flags, function.get_locus ());\n@@ -291,15 +293,17 @@ class CompileInherentImplItem : public HIRCompileBase\n     ::Btype *compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n \n     unsigned int flags = 0;\n-    std::string fn_identifier\n-      = self->get_name () + \"_\" + method.get_method_name ();\n \n     // if its the main fn or pub visibility mark its as DECL_PUBLIC\n     // please see https://github.com/Rust-GCC/gccrs/pull/137\n     if (method.has_visibility ())\n       flags |= Backend::function_is_visible;\n \n-    std::string asm_name = fn_identifier;\n+    std::string fn_identifier\n+      = self->get_name () + \"_\" + method.get_method_name ();\n+    std::string asm_name\n+      = ctx->mangle_impl_item (self, method.get_method_name ());\n+\n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, fn_identifier,\n \t\t\t\t       asm_name, flags, method.get_locus ());"}, {"sha": "5a7d846fd494672cae04848ccd75fae6e3de59ff", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5", "patch": "@@ -53,8 +53,7 @@ class CompileItem : public HIRCompileBase\n     Bexpression *value = CompileExpr::Compile (var.get_expr (), ctx);\n \n     std::string name = var.get_identifier ();\n-    // FIXME need name mangling\n-    std::string asm_name = \"__\" + var.get_identifier ();\n+    std::string asm_name = ctx->mangle_item (name);\n \n     bool is_external = false;\n     bool is_hidden = false;\n@@ -147,21 +146,11 @@ class CompileItem : public HIRCompileBase\n \n     std::string ir_symbol_name = function.get_function_name ();\n     std::string asm_name = function.get_function_name ();\n-    if (!is_main_fn)\n-      {\n-\t// FIXME need name mangling\n-\tif (concrete == nullptr)\n-\t  asm_name = \"__\" + function.get_function_name ();\n-\telse\n-\t  {\n-\t    ir_symbol_name\n-\t      = function.get_function_name () + fntype->subst_as_string ();\n \n-\t    asm_name = \"__\" + function.get_function_name ();\n-\t    for (auto &sub : fntype->get_substs ())\n-\t      asm_name += \"G\" + sub.as_string ();\n-\t  }\n-      }\n+    // we don't mangle the main fn since we haven't implemented the main shim\n+    // yet\n+    if (!is_main_fn)\n+      asm_name = ctx->mangle_item (ir_symbol_name);\n \n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,"}, {"sha": "9dd3b57bbe9da47a5c11dc70102ebc86ecebe7a0", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5", "patch": "@@ -413,5 +413,73 @@ HIRCompileBase::compile_function_body (\n     }\n }\n \n+// Mr Mangle time\n+\n+static const std::string kMangledSymbolPrefix = \"_ZN\";\n+static const std::string kMangledSymbolDelim = \"E\";\n+static const std::string kMangledGenericDelim = \"$C$\";\n+static const std::string kMangledSubstBegin = \"$LT$\";\n+static const std::string kMangledSubstEnd = \"$GT$\";\n+\n+static std::string\n+mangle_name (const std::string &name)\n+{\n+  return std::to_string (name.size ()) + name;\n+}\n+\n+static std::string\n+dummy_hash ()\n+{\n+  return \"h0123456789abcdef\";\n+}\n+\n+static std::string\n+mangle_self (const TyTy::BaseType *self)\n+{\n+  if (self->get_kind () != TyTy::TypeKind::ADT)\n+    return mangle_name (self->get_name ());\n+\n+  const TyTy::ADTType *s = static_cast<const TyTy::ADTType *> (self);\n+  std::string buf = s->get_identifier ();\n+\n+  if (s->has_subsititions_defined ())\n+    {\n+      buf += kMangledSubstBegin;\n+\n+      const std::vector<TyTy::SubstitutionParamMapping> &params\n+\t= s->get_substs ();\n+      for (size_t i = 0; i < params.size (); i++)\n+\t{\n+\t  const TyTy::SubstitutionParamMapping &sub = params.at (i);\n+\t  buf += sub.as_string ();\n+\n+\t  if ((i + 1) < params.size ())\n+\t    buf += kMangledGenericDelim;\n+\t}\n+\n+      buf += kMangledSubstEnd;\n+    }\n+\n+  return mangle_name (buf);\n+}\n+\n+std::string\n+Context::mangle_item (const std::string &name) const\n+{\n+  const std::string &crate_name = mappings->get_current_crate_name ();\n+  return kMangledSymbolPrefix + mangle_name (crate_name) + mangle_name (name)\n+\t + mangle_name (dummy_hash ()) + kMangledSymbolDelim;\n+}\n+\n+std::string\n+Context::mangle_impl_item (const TyTy::BaseType *self,\n+\t\t\t   const std::string &name) const\n+{\n+  const std::string &crate_name = mappings->get_current_crate_name ();\n+  return kMangledSymbolPrefix + mangle_name (crate_name) + mangle_self (self)\n+\t + mangle_name (name) + mangle_name (dummy_hash ())\n+\t + kMangledSymbolDelim;\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "aa709ecf21e1f060f90d097ce901f7b7a35aba90", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=58e108c7c6d0fa3c9ebc7eeb681851924e22ddd5", "patch": "@@ -618,6 +618,11 @@ class SubstitutionRef\n \n   std::vector<SubstitutionParamMapping> &get_substs () { return substitutions; }\n \n+  const std::vector<SubstitutionParamMapping> &get_substs () const\n+  {\n+    return substitutions;\n+  }\n+\n   std::vector<SubstitutionParamMapping> clone_substs ()\n   {\n     std::vector<SubstitutionParamMapping> clone;"}]}