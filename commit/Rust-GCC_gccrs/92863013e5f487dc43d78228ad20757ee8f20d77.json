{"sha": "92863013e5f487dc43d78228ad20757ee8f20d77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4NjMwMTNlNWY0ODdkYzQzZDc4MjI4YWQyMDc1N2VlOGYyMGQ3Nw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-12-14T22:16:43Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-12-14T22:16:43Z"}, "message": "PR 79738 - Documentation for __attribute__((const)) slightly misleading\n\ngcc/ChangeLog:\n\t* doc/extend.texi (attribute const, pure): Clarify.\n\nFrom-SVN: r267156", "tree": {"sha": "6ffd46c59e02eaa1b9f7f9e80c0a76083186ff0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ffd46c59e02eaa1b9f7f9e80c0a76083186ff0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92863013e5f487dc43d78228ad20757ee8f20d77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92863013e5f487dc43d78228ad20757ee8f20d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92863013e5f487dc43d78228ad20757ee8f20d77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92863013e5f487dc43d78228ad20757ee8f20d77/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fd156b1bb5bb993e1b614008ac1a0eff58a6953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd156b1bb5bb993e1b614008ac1a0eff58a6953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd156b1bb5bb993e1b614008ac1a0eff58a6953"}], "stats": {"total": 103, "additions": 73, "deletions": 30}, "files": [{"sha": "68f8f6d4193eb856fd6ea9a3806c5339891ce29f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92863013e5f487dc43d78228ad20757ee8f20d77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92863013e5f487dc43d78228ad20757ee8f20d77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92863013e5f487dc43d78228ad20757ee8f20d77", "patch": "@@ -1,3 +1,8 @@\n+2018-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR web/79738\n+\t* doc/extend.texi (attribute const, pure): Clarify.\n+\n 2018-12-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (rest_of_insert_endbranch): Insert ENDBR"}, {"sha": "dcaedc8dfdb526a7bc1dcbc3e192d56346779233", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 68, "deletions": 30, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92863013e5f487dc43d78228ad20757ee8f20d77/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92863013e5f487dc43d78228ad20757ee8f20d77/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=92863013e5f487dc43d78228ad20757ee8f20d77", "patch": "@@ -2594,25 +2594,45 @@ are automatically detected and this attribute is ignored.\n @item const\n @cindex @code{const} function attribute\n @cindex functions that have no side effects\n-Many functions do not examine any values except their arguments, and\n-have no effects except to return a value.  Calls to such functions lend\n-themselves to optimization such as common subexpression elimination.\n-The presence of the @code{const} attribute on a function declaration \n-allows GCC to emit more efficient code for some calls to the function.  \n+Calls to functions whose return value is not affected by changes to\n+the observable state of the program and that have no observable effects\n+on such state other than to return a value may lend themselves to\n+optimizations such as common subexpression elimination.  Declaring such\n+functions with the @code{const} attribute allows GCC to avoid emitting\n+some calls in repeated invocations of the function with the same argument\n+values.\n+\n+For example,\n+\n+@smallexample\n+int square (int) __attribute__ ((const));\n+@end smallexample\n+\n+@noindent\n+tells GCC that subsequent calls to function @code{square} with the same\n+argument value can be replaced by the result of the first call regardless\n+of the statements in between.\n+\n+The @code{const} attribute prohibits a function from reading objects\n+that affect its return value between successive invocations.  However,\n+functions declared with the attribute can safely read objects that do\n+not change their return value, such as non-volatile constants.\n \n The @code{const} attribute imposes greater restrictions on a function's\n-definition than the similar @code{pure} attribute below because it\n-additionally prohibits the function from reading memory except for\n-constant global variables.  Decorating the same function with\n-both the @code{const} and the @code{pure} attribute is diagnosed.\n+definition than the similar @code{pure} attribute.  Declaring the same\n+function with both the @code{const} and the @code{pure} attribute is\n+diagnosed.  Because a const function cannot have any observable side\n+effects it does not make sense for it to return @code{void}.  Declaring\n+such a function is diagnosed.\n \n @cindex pointer arguments\n Note that a function that has pointer arguments and examines the data\n-pointed to must @emph{not} be declared @code{const}.  Likewise, a\n-function that calls a non-@code{const} function usually must not be\n-@code{const}.  Because a @code{const} function cannot have any side\n-effects it does not make sense for such a function to return @code{void}.\n-Declaring such a function is diagnosed.\n+pointed to must @emph{not} be declared @code{const} if the pointed-to\n+data might change between successive invocations of the function.  In\n+general, since a function cannot distinguish data that might change\n+from data that cannot, const functions should never take pointer or,\n+in C++, reference arguments. Likewise, a function that calls a non-const\n+function usually must not be const itself.\n \n @item constructor\n @itemx destructor\n@@ -3377,34 +3397,52 @@ to prevent recursion.\n @item pure\n @cindex @code{pure} function attribute\n @cindex functions that have no side effects\n-Many functions have no effects except the return value and their\n-return value depends only on the parameters and/or global variables.\n-Calls to such functions can be subject\n-to common subexpression elimination and loop optimization just as an\n-arithmetic operator would be.  These functions should be declared\n-with the attribute @code{pure}.  For example,\n+\n+Calls to functions that have no observable effects on the state of\n+the program other than to return a value may lend themselves to optimizations\n+such as common subexpression elimination.  Declaring such functions with\n+the @code{pure} attribute allows GCC to avoid emitting some calls in repeated\n+invocations of the function with the same argument values.\n+\n+The @code{pure} attribute prohibits a function from modifying the state\n+of the program that is observable by means other than inspecting\n+the function's return value.  However, functions declared with the @code{pure}\n+attribute can safely read any non-volatile objects, and modify the value of\n+objects in a way that does not affect their return value or the observable\n+state of the program.\n+\n+For example,\n \n @smallexample\n-int square (int) __attribute__ ((pure));\n+int hash (char *) __attribute__ ((pure));\n @end smallexample\n \n @noindent\n-says that the hypothetical function @code{square} is safe to call\n-fewer times than the program says.\n+tells GCC that subsequent calls to the function @code{hash} with the same\n+string can be replaced by the result of the first call provided the state\n+of the program observable by @code{hash}, including the contents of the array\n+itself, does not change in between.  Even though @code{hash} takes a non-const\n+pointer argument it must not modify the array it points to, or any other object\n+whose value the rest of the program may depend on.  However, the caller may\n+safely change the contents of the array between successive calls to\n+the function (doing so disables the optimization).  The restriction also\n+applies to member objects referenced by the @code{this} pointer in C++\n+non-static member functions.\n \n Some common examples of pure functions are @code{strlen} or @code{memcmp}.\n Interesting non-pure functions are functions with infinite loops or those\n depending on volatile memory or other system resource, that may change between\n-two consecutive calls (such as @code{feof} in a multithreading environment).\n+consecutive calls (such as the standard C @code{feof} function in\n+a multithreading environment).\n \n The @code{pure} attribute imposes similar but looser restrictions on\n a function's definition than the @code{const} attribute: @code{pure}\n-allows the function to read any non-volatile memory, not just\n-constant global variables.  Decorating the same function with\n-both the @code{pure} and the @code{const} attribute is diagnosed.\n-Because a @code{pure} function cannot have any side effects it does not\n-make sense for such a function to return @code{void}.  Declaring such\n-a function is diagnosed.\n+allows the function to read any non-volatile memory, even if it changes\n+in between successive invocations of the function.  Declaring the same\n+function with both the @code{pure} and the @code{const} attribute is\n+diagnosed.  Because a pure function cannot have any observable side\n+effects it does not make sense for such a function to return @code{void}.\n+Declaring such a function is diagnosed.\n \n @item returns_nonnull\n @cindex @code{returns_nonnull} function attribute"}]}