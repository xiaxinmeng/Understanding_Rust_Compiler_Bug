{"sha": "d211a298ce7c5ff8b34323e0575480fc9f80ada9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxMWEyOThjZTdjNWZmOGIzNDMyM2UwNTc1NDgwZmM5ZjgwYWRhOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-09-21T16:20:12Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-09-21T16:20:12Z"}, "message": "re PR c++/7503 ((x < Y ? X : Y) used for assignment causes wrong code)\n\n\n\tPR c++/7503\n\t* tree.c (lvalue_p_1):  Disallow MIN_EXPR and MAX_EXPR as lvalues\n\tif either operand has side-effects.\n\t* typeck.c (rationalize_conditional_expr): Assert that neither\n\toperand of MIN_EXPR or MAX_EXPR has side-effects.\n\t(build_modify_expr):  Add support for MIN_EXPR and MAX_EXPR.\n\tCheck that the \"lhs\" is a valid lvalue, i.e. that neither operand\n\tof a MIN_EXPR or MAX_EXPR has a side-effect.\n\n\t* g++.dg/opt/pr7503-1.C: New testcase for COND_EXPR lvalues.\n\t* g++.dg/opt/pr7503-2.C: New testcase for <? and >? lvalues.\n\t* g++.dg/opt/pr7503-3.C: New testcase for invalid <? lvalue errors.\n\t* g++.dg/opt/pr7503-4.C: New testcase for <?= and >?= assignments.\n\t* g++.dg/opt/pr7503-5.C: New testcase for side-effects with <?=.\n\nFrom-SVN: r87810", "tree": {"sha": "bdfafe1c2a29f4aa6bfe3cb981e141f67ff30e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdfafe1c2a29f4aa6bfe3cb981e141f67ff30e50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d211a298ce7c5ff8b34323e0575480fc9f80ada9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d211a298ce7c5ff8b34323e0575480fc9f80ada9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d211a298ce7c5ff8b34323e0575480fc9f80ada9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d211a298ce7c5ff8b34323e0575480fc9f80ada9/comments", "author": null, "committer": null, "parents": [{"sha": "f0c721ad7cc43cb007beb8a55cb088f17a2a065b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c721ad7cc43cb007beb8a55cb088f17a2a065b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c721ad7cc43cb007beb8a55cb088f17a2a065b"}], "stats": {"total": 461, "additions": 461, "deletions": 0}, "files": [{"sha": "e9e6d4240df7ccfe2099eff4066e572ea10d346e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d211a298ce7c5ff8b34323e0575480fc9f80ada9", "patch": "@@ -1,3 +1,14 @@\n+2004-09-21  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c++/7503\n+\t* tree.c (lvalue_p_1):  Disallow MIN_EXPR and MAX_EXPR as lvalues\n+\tif either operand has side-effects.\n+\t* typeck.c (rationalize_conditional_expr): Assert that neither\n+\toperand of MIN_EXPR or MAX_EXPR has side-effects.\n+\t(build_modify_expr):  Add support for MIN_EXPR and MAX_EXPR.\n+\tCheck that the \"lhs\" is a valid lvalue, i.e. that neither operand\n+\tof a MIN_EXPR or MAX_EXPR has a side-effect.\n+\n 2004-09-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (struct lang_type_header): Remove"}, {"sha": "fc3516d8e8a8b8f823c54f378487d014811f316c", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=d211a298ce7c5ff8b34323e0575480fc9f80ada9", "patch": "@@ -129,6 +129,10 @@ lvalue_p_1 (tree ref,\n       gcc_unreachable ();\n     case MAX_EXPR:\n     case MIN_EXPR:\n+      /* Disallow <? and >? as lvalues if either argument side-effects.  */\n+      if (TREE_SIDE_EFFECTS (TREE_OPERAND (ref, 0))\n+\t  || TREE_SIDE_EFFECTS (TREE_OPERAND (ref, 1)))\n+\treturn clk_none;\n       op1_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 0),\n \t\t\t\t    treat_class_rvalues_as_lvalues);\n       op2_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 1),"}, {"sha": "164f7a34a71aa0ad14d748ad42a1071ddc2f86cf", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d211a298ce7c5ff8b34323e0575480fc9f80ada9", "patch": "@@ -1524,6 +1524,9 @@ rationalize_conditional_expr (enum tree_code code, tree t)\n      are equal, so we know what conditional expression this used to be.  */\n   if (TREE_CODE (t) == MIN_EXPR || TREE_CODE (t) == MAX_EXPR)\n     {\n+      /* The following code is incorrect if either operand side-effects.  */\n+      gcc_assert (!TREE_SIDE_EFFECTS (TREE_OPERAND (t, 0))\n+\t\t  && !TREE_SIDE_EFFECTS (TREE_OPERAND (t, 1)));\n       return\n \tbuild_conditional_expr (build_x_binary_op ((TREE_CODE (t) == MIN_EXPR\n \t\t\t\t\t\t    ? LE_EXPR : GE_EXPR),\n@@ -5038,6 +5041,25 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n \treturn error_mark_node;\n       return build2 (COMPOUND_EXPR, lhstype, lhs, newrhs);\n \n+    case MIN_EXPR:\n+    case MAX_EXPR:\n+      /* MIN_EXPR and MAX_EXPR are currently only permitted as lvalues,\n+\t when neither operand has side-effects.  */\n+      if (!lvalue_or_else (lhs, \"assignment\"))\n+\treturn error_mark_node;\n+\n+      gcc_assert (!TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 0))\n+\t\t  && !TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 1)));\n+\n+      lhs = build3 (COND_EXPR, TREE_TYPE (lhs),\n+\t\t    build2 (TREE_CODE (lhs) == MIN_EXPR ? LE_EXPR : GE_EXPR,\n+\t\t\t    boolean_type_node,\n+\t\t\t    TREE_OPERAND (lhs, 0),\n+\t\t\t    TREE_OPERAND (lhs, 1)),\n+\t\t    TREE_OPERAND (lhs, 0),\n+\t\t    TREE_OPERAND (lhs, 1));\n+      /* Fall through.  */\n+\n       /* Handle (a ? b : c) used as an \"lvalue\".  */\n     case COND_EXPR:\n       {"}, {"sha": "c52f7ba68dde9de84c70cd3d7d01baa3225d5a89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d211a298ce7c5ff8b34323e0575480fc9f80ada9", "patch": "@@ -1,3 +1,12 @@\n+2004-09-21  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c++/7503\n+\t* g++.dg/opt/pr7503-1.C: New testcase for COND_EXPR lvalues.\n+\t* g++.dg/opt/pr7503-2.C: New testcase for <? and >? lvalues.\n+\t* g++.dg/opt/pr7503-3.C: New testcase for invalid <? lvalue errors.\n+\t* g++.dg/opt/pr7503-4.C: New testcase for <?= and >?= assignments.\n+\t* g++.dg/opt/pr7503-5.C: New testcase for side-effects with <?=.\n+\n 2004-09-21  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR fortran/17286"}, {"sha": "d366a618030d83b611d42532a72b712116e776fa", "filename": "gcc/testsuite/g++.dg/opt/pr7503-1.C", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-1.C?ref=d211a298ce7c5ff8b34323e0575480fc9f80ada9", "patch": "@@ -0,0 +1,148 @@\n+// PR c++/7503\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort();\n+\n+void test1a()\n+{\n+  int A = 4;\n+  int B = 4;\n+\n+  (A > B ? A : B) = 1;\n+  if (A != 4 || B != 1)\n+    abort ();\n+}\n+\n+void test1b()\n+{\n+  int A = 3;\n+  int B = 5;\n+\n+  (A > B ? A : B) = 1;\n+  if (A != 3 || B != 1)\n+    abort ();\n+}\n+\n+void test1c()\n+{\n+  int A = 5;\n+  int B = 3;\n+\n+  (A > B ? A : B) = 1;\n+  if (A != 1 || B != 3)\n+    abort ();\n+}\n+\n+void test2a()\n+{\n+  int A = 4;\n+  int B = 4;\n+\n+  (A >= B ? A : B) = 1;\n+  if (A != 1 || B != 4)\n+    abort ();\n+}\n+\n+void test2b()\n+{\n+  int A = 3;\n+  int B = 5;\n+\n+  (A >= B ? A : B) = 1;\n+  if (A != 3 || B != 1)\n+    abort ();\n+}\n+\n+void test2c()\n+{\n+  int A = 5;\n+  int B = 3;\n+\n+  (A >= B ? A : B) = 1;\n+  if (A != 1 || B != 3)\n+    abort ();\n+}\n+\n+void test3a()\n+{\n+  int A = 4;\n+  int B = 4;\n+\n+  (A < B ? A : B) = 1;\n+  if (A != 4 || B != 1)\n+    abort ();\n+}\n+\n+void test3b()\n+{\n+  int A = 3;\n+  int B = 5;\n+\n+  (A < B ? A : B) = 1;\n+  if (A != 1 || B != 5)\n+    abort ();\n+}\n+\n+void test3c()\n+{\n+  int A = 5;\n+  int B = 3;\n+\n+  (A < B ? A : B) = 1;\n+  if (A != 5 || B != 1)\n+    abort ();\n+}\n+\n+void test4a()\n+{\n+  int A = 4;\n+  int B = 4;\n+\n+  (A <= B ? A : B) = 1;\n+  if (A != 1 || B != 4)\n+    abort ();\n+}\n+\n+void test4b()\n+{\n+  int A = 3;\n+  int B = 5;\n+\n+  (A <= B ? A : B) = 1;\n+  if (A != 1 || B != 5)\n+    abort ();\n+}\n+\n+void test4c()\n+{\n+  int A = 5;\n+  int B = 3;\n+\n+  (A <= B ? A : B) = 1;\n+  if (A != 5 || B != 1)\n+    abort ();\n+}\n+\n+\n+int main()\n+{\n+  test1a();\n+  test1b();\n+  test1c();\n+\n+  test2a();\n+  test2b();\n+  test2c();\n+\n+  test3a();\n+  test3b();\n+  test3c();\n+\n+  test4a();\n+  test4b();\n+  test4c();\n+\n+  return 0;\n+}\n+"}, {"sha": "68bb143e45ee88f343308f75a122f0182ee68306", "filename": "gcc/testsuite/g++.dg/opt/pr7503-2.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-2.C?ref=d211a298ce7c5ff8b34323e0575480fc9f80ada9", "patch": "@@ -0,0 +1,79 @@\n+// PR c++/7503\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort();\n+\n+void test1a()\n+{\n+  int A = 4;\n+  int B = 4;\n+\n+  (A >? B) = 1;\n+  if (A != 1 || B != 4)\n+    abort ();\n+}\n+\n+void test1b()\n+{\n+  int A = 3;\n+  int B = 5;\n+\n+  (A >? B) = 1;\n+  if (A != 3 || B != 1)\n+    abort ();\n+}\n+\n+void test1c()\n+{\n+  int A = 5;\n+  int B = 3;\n+\n+  (A >? B) = 1;\n+  if (A != 1 || B != 3)\n+    abort ();\n+}\n+\n+\n+void test2a()\n+{\n+  int A = 4;\n+  int B = 4;\n+\n+  (A <? B) = 1;\n+  if (A != 1 || B != 4)\n+    abort ();\n+}\n+\n+void test2b()\n+{\n+  int A = 3;\n+  int B = 5;\n+\n+  (A <? B) = 1;\n+  if (A != 1 || B != 5)\n+    abort ();\n+}\n+\n+void test2c()\n+{\n+  int A = 5;\n+  int B = 3;\n+\n+  (A <? B) = 1;\n+  if (A != 5 || B != 1)\n+    abort ();\n+}\n+\n+\n+int main()\n+{\n+  test1a();\n+  test1b();\n+  test1c();\n+  test2a();\n+  test2b();\n+  test2c();\n+  return 0;\n+}\n+"}, {"sha": "ed223f4dc2c468dd112fae5b5d74cdb841100688", "filename": "gcc/testsuite/g++.dg/opt/pr7503-3.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-3.C?ref=d211a298ce7c5ff8b34323e0575480fc9f80ada9", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/7503\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+extern int A, B;\n+\n+void test1()\n+{\n+  (A++ <? B) = 0;  // { dg-error \"non-lvalue in assignment\" }\n+}\n+\n+void test2()\n+{\n+  (A <? B++) = 0;  // { dg-error \"non-lvalue in assignment\" }\n+}\n+\n+void test3()\n+{\n+  (A++ >? B) = 0;  // { dg-error \"non-lvalue in assignment\" }\n+}\n+\n+void test4()\n+{\n+  (A >? B++) = 0;  // { dg-error \"non-lvalue in assignment\" }\n+}\n+"}, {"sha": "06ac901229ffbbf6d2609978805bc93dee08b5f3", "filename": "gcc/testsuite/g++.dg/opt/pr7503-4.C", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-4.C?ref=d211a298ce7c5ff8b34323e0575480fc9f80ada9", "patch": "@@ -0,0 +1,81 @@\n+// PR c++/7503\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort();\n+\n+void test1a()\n+{\n+  int A = 4;\n+  int B = 4;\n+\n+  A >?= B;\n+  if (A != 4 || B != 4)\n+    abort ();\n+}\n+\n+void test1b()\n+{\n+  int A = 3;\n+  int B = 5;\n+\n+  A >?= B;\n+  if (A != 5 || B != 5)\n+    abort ();\n+}\n+\n+void test1c()\n+{\n+  int A = 5;\n+  int B = 3;\n+\n+  A >?= B;\n+  if (A != 5 || B != 3)\n+    abort ();\n+}\n+\n+\n+void test2a()\n+{\n+  int A = 4;\n+  int B = 4;\n+\n+  A <?= B;\n+  if (A != 4 || B != 4)\n+    abort ();\n+}\n+\n+void test2b()\n+{\n+  int A = 3;\n+  int B = 5;\n+\n+  A <?= B;\n+  if (A != 3 || B != 5)\n+    abort ();\n+}\n+\n+void test2c()\n+{\n+  int A = 5;\n+  int B = 3;\n+\n+  A <?= B;\n+  if (A != 3 || B != 3)\n+    abort ();\n+}\n+\n+\n+int main()\n+{\n+  test1a();\n+  test1b();\n+  test1c();\n+\n+  test2a();\n+  test2b();\n+  test2c();\n+\n+  return 0;\n+}\n+"}, {"sha": "9e1e719f5c2c2956b0cb89f8f1a0a42ea67a4dfb", "filename": "gcc/testsuite/g++.dg/opt/pr7503-5.C", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d211a298ce7c5ff8b34323e0575480fc9f80ada9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-5.C?ref=d211a298ce7c5ff8b34323e0575480fc9f80ada9", "patch": "@@ -0,0 +1,81 @@\n+// PR c++/7503\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort();\n+\n+void test1a()\n+{\n+  int A = 4;\n+  int B = 4;\n+\n+  A >?= B++;\n+  if (A != 4 || B != 5)\n+    abort ();\n+}\n+\n+void test1b()\n+{\n+  int A = 3;\n+  int B = 5;\n+\n+  A >?= B++;\n+  if (A != 5 || B != 6)\n+    abort ();\n+}\n+\n+void test1c()\n+{\n+  int A = 5;\n+  int B = 3;\n+\n+  A >?= B++;\n+  if (A != 5 || B != 4)\n+    abort ();\n+}\n+\n+\n+void test2a()\n+{\n+  int A = 4;\n+  int B = 4;\n+\n+  A <?= B++;\n+  if (A != 4 || B != 5)\n+    abort ();\n+}\n+\n+void test2b()\n+{\n+  int A = 3;\n+  int B = 5;\n+\n+  A <?= B++;\n+  if (A != 3 || B != 6)\n+    abort ();\n+}\n+\n+void test2c()\n+{\n+  int A = 5;\n+  int B = 3;\n+\n+  A <?= B++;\n+  if (A != 3 || B != 4)\n+    abort ();\n+}\n+\n+\n+int main()\n+{\n+  test1a();\n+  test1b();\n+  test1c();\n+\n+  test2a();\n+  test2b();\n+  test2c();\n+\n+  return 0;\n+}\n+"}]}