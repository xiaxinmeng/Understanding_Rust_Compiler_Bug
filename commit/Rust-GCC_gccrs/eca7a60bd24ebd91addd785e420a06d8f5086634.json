{"sha": "eca7a60bd24ebd91addd785e420a06d8f5086634", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNhN2E2MGJkMjRlYmQ5MWFkZGQ3ODVlNDIwYTA2ZDhmNTA4NjYzNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-06-06T20:19:46Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-06-06T20:19:46Z"}, "message": "Fix ICE in ODR enum streaming [PR95548]\n\ngcc/ChangeLog:\n\n2020-06-06  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR lto/95548\n\t* ipa-devirt.c (struct odr_enum_val): Turn values to wide_int.\n\t(ipa_odr_summary_write): Update streaming.\n\t(ipa_odr_read_section): Update streaming.\n\ngcc/testsuite/ChangeLog:\n\n2020-06-06  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* g++.dg/torture/pr95548.C: New test.", "tree": {"sha": "457114e586504a54a8c5cd4e1355745682fe024a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/457114e586504a54a8c5cd4e1355745682fe024a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eca7a60bd24ebd91addd785e420a06d8f5086634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca7a60bd24ebd91addd785e420a06d8f5086634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca7a60bd24ebd91addd785e420a06d8f5086634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca7a60bd24ebd91addd785e420a06d8f5086634/comments", "author": null, "committer": null, "parents": [{"sha": "1ca05dead046d88c4bd9e7b8f3129269a5c5eea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca05dead046d88c4bd9e7b8f3129269a5c5eea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca05dead046d88c4bd9e7b8f3129269a5c5eea4"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "0340decba9b1431b7337a16d9c715358b62eab5b", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7a60bd24ebd91addd785e420a06d8f5086634/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7a60bd24ebd91addd785e420a06d8f5086634/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=eca7a60bd24ebd91addd785e420a06d8f5086634", "patch": "@@ -505,7 +505,7 @@ static GTY(()) vec <tree, va_gc> *odr_enums;\n struct odr_enum_val\n {\n   const char *name;\n-  HOST_WIDE_INT val;\n+  wide_int val;\n   location_t locus;\n };\n \n@@ -4048,8 +4048,9 @@ ipa_odr_summary_write (void)\n \t      streamer_write_string (ob, ob->main_stream,\n \t\t\t\t     IDENTIFIER_POINTER (TREE_PURPOSE (e)),\n \t\t\t\t     true);\n-\t      streamer_write_hwi (ob, tree_to_shwi\n-\t\t\t\t\t(DECL_INITIAL (TREE_VALUE (e))));\n+\t      streamer_write_wide_int (ob,\n+\t\t\t\t       wi::to_wide (DECL_INITIAL\n+\t\t\t\t\t\t      (TREE_VALUE (e))));\n \t    }\n \n \t  bitpack_d bp = bitpack_create (ob->main_stream);\n@@ -4080,7 +4081,7 @@ ipa_odr_summary_write (void)\n \t    {\n \t      streamer_write_string (ob, ob->main_stream,\n \t\t\t\t     this_enum.vals[j].name, true);\n-\t      streamer_write_hwi (ob, this_enum.vals[j].val);\n+\t      streamer_write_wide_int (ob, this_enum.vals[j].val);\n \t    }\n \n \t  bitpack_d bp = bitpack_create (ob->main_stream);\n@@ -4139,49 +4140,71 @@ ipa_odr_read_section (struct lto_file_decl_data *file_data, const char *data,\n       class odr_enum &this_enum\n \t\t = odr_enum_map->get_or_insert (xstrdup (name), &existed_p);\n \n+      /* If this is first time we see the enum, remember its definition.  */\n       if (!existed_p)\n \t{\n \t  this_enum.vals.safe_grow_cleared (nvals);\n \t  this_enum.warned = false;\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"enum %s\\n{\\n\", name);\n \t  for (unsigned j = 0; j < nvals; j++)\n \t    {\n \t      const char *val_name = streamer_read_string (data_in, &ib);\n \t      obstack_grow (&odr_enum_obstack, val_name, strlen (val_name) + 1);\n \t      this_enum.vals[j].name = XOBFINISH (&odr_enum_obstack, char *);\n-\t      this_enum.vals[j].val = streamer_read_hwi (&ib);\n+\t      this_enum.vals[j].val = streamer_read_wide_int (&ib);\n+\t      if (dump_file)\n+\t\tfprintf (dump_file, \"  %s = \" HOST_WIDE_INT_PRINT_DEC \",\\n\",\n+\t\t\t val_name, wi::fits_shwi_p (this_enum.vals[j].val)\n+\t\t\t ? this_enum.vals[j].val.to_shwi () : -1);\n \t    }\n \t  bitpack_d bp = streamer_read_bitpack (&ib);\n \t  stream_input_location (&this_enum.locus, &bp, data_in);\n \t  for (unsigned j = 0; j < nvals; j++)\n \t    stream_input_location (&this_enum.vals[j].locus, &bp, data_in);\n \t  data_in->location_cache.apply_location_cache ();\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"}\\n\");\n \t}\n+      /* If we already have definition, compare it with new one and output\n+\t warnings if they differs.  */\n       else\n \t{\n \t  int do_warning = -1;\n \t  char *warn_name = NULL;\n-\t  HOST_WIDE_INT warn_value = 0;\n+\t  wide_int warn_value = wi::zero (1);\n \n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"Comparing enum %s\\n\", name);\n+\n+\t  /* Look for differences which we will warn about later once locations\n+\t     are streamed.  */\n \t  for (unsigned j = 0; j < nvals; j++)\n \t    {\n \t      const char *id = streamer_read_string (data_in, &ib);\n-\t      HOST_WIDE_INT val = streamer_read_hwi (&ib);\n+\t      wide_int val = streamer_read_wide_int (&ib);\n \n-\t      if (do_warning != -1 || j > this_enum.vals.length ())\n+\t      if (do_warning != -1 || j >= this_enum.vals.length ())\n \t\tcontinue;\n \t      if (strcmp (id, this_enum.vals[j].name)\n \t\t  || val != this_enum.vals[j].val)\n \t\t{\n \t\t  warn_name = xstrdup (id);\n \t\t  warn_value = val;\n \t\t  do_warning = j;\n+\t\t  if (dump_file)\n+\t\t    fprintf (dump_file, \"  Different on entry %i\\n\", j);\n \t\t}\n \t    }\n-\t  bitpack_d bp = streamer_read_bitpack (&ib);\n \n+\t  /* Stream in locations, but do not apply them unless we are going\n+\t     to warn.  */\n+\t  bitpack_d bp = streamer_read_bitpack (&ib);\n \t  location_t locus;\n+\n \t  stream_input_location (&locus, &bp, data_in);\n \n+\t  /* Did we find a difference?  */\n \t  if (do_warning != -1 || nvals != this_enum.vals.length ())\n \t    {\n \t      data_in->location_cache.apply_location_cache ();\n@@ -4213,26 +4236,40 @@ ipa_odr_read_section (struct lto_file_decl_data *file_data, const char *data,\n \t    }\n \t  else\n \t    data_in->location_cache.revert_location_cache ();\n+\n+\t  /* Finally look up for location of the actual value that diverged.  */\n \t  for (unsigned j = 0; j < nvals; j++)\n \t    {\n \t      location_t id_locus;\n \n \t      data_in->location_cache.revert_location_cache ();\n \t      stream_input_location (&id_locus, &bp, data_in);\n+\n \t      if ((int) j == do_warning)\n \t\t{\n \t\t  data_in->location_cache.apply_location_cache ();\n+\n \t\t  if (strcmp (warn_name, this_enum.vals[j].name))\n \t\t    inform (this_enum.vals[j].locus,\n \t\t\t    \"name %qs differs from name %qs defined\"\n \t\t\t    \" in another translation unit\",\n \t\t\t    this_enum.vals[j].name, warn_name);\n-\t\t  else\n+\t\t  /* FIXME: In case there is easy way to print wide_ints,\n+\t\t     perhaps we could do it here instead of overlfow checpl.  */\n+\t\t  else if (wi::fits_shwi_p (this_enum.vals[j].val)\n+\t\t\t   && wi::fits_shwi_p (warn_value))\n \t\t    inform (this_enum.vals[j].locus,\n \t\t\t    \"name %qs is defined to \" HOST_WIDE_INT_PRINT_DEC\n \t\t\t    \" while another translation unit defines \"\n \t\t\t    \"it as \" HOST_WIDE_INT_PRINT_DEC,\n-\t\t\t    warn_name, this_enum.vals[j].val, warn_value);\n+\t\t\t    warn_name, this_enum.vals[j].val.to_shwi (),\n+\t\t\t    warn_value.to_shwi ());\n+\t\t  else\n+\t\t    inform (this_enum.vals[j].locus,\n+\t\t\t    \"name %qs is defined to different value \"\n+\t\t\t    \"in another translation unit\",\n+\t\t\t    warn_name);\n+\n \t\t  inform (id_locus,\n \t\t\t  \"mismatching definition\");\n \t\t}"}, {"sha": "bca4f753f7eb91560cf105d01053ef9bb0b85fe0", "filename": "gcc/testsuite/g++.dg/torture/pr95548.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7a60bd24ebd91addd785e420a06d8f5086634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr95548.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7a60bd24ebd91addd785e420a06d8f5086634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr95548.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr95548.C?ref=eca7a60bd24ebd91addd785e420a06d8f5086634", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+enum a { b = (unsigned long)-1 } c;\n+#ifdef __SIZEOF_INT128__\n+enum c { d = (unsigned long)-1 } e;\n+#endif\n+main()\n+{\n+}"}]}