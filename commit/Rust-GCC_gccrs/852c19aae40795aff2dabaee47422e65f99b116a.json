{"sha": "852c19aae40795aff2dabaee47422e65f99b116a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyYzE5YWFlNDA3OTVhZmYyZGFiYWVlNDc0MjJlNjVmOTliMTE2YQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "pop@cri.ensmp.fr", "date": "2005-08-15T07:51:42Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2005-08-15T07:51:42Z"}, "message": "re PR tree-optimization/23386 (bitmap.c is being miscompiled (VRP))\n\n\tPR 23386\n \t* tree-data-ref.c (estimate_niter_from_size_of_data): When\n \tstep is negative compute the estimation from init downwards to\n \tzero.\n\n\t* testsuite/gcc.dg/tree-ssa/pr23386.c: New.\n\nFrom-SVN: r103106", "tree": {"sha": "5b3c0b02617e1703f136627dfce53def821570d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b3c0b02617e1703f136627dfce53def821570d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/852c19aae40795aff2dabaee47422e65f99b116a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852c19aae40795aff2dabaee47422e65f99b116a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852c19aae40795aff2dabaee47422e65f99b116a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852c19aae40795aff2dabaee47422e65f99b116a/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "309b0e4232a331e7293d6086cef1573201a10507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/309b0e4232a331e7293d6086cef1573201a10507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/309b0e4232a331e7293d6086cef1573201a10507"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "e8c85944ef69eab5fc7fc8e325b73a147b77a03a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c19aae40795aff2dabaee47422e65f99b116a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c19aae40795aff2dabaee47422e65f99b116a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=852c19aae40795aff2dabaee47422e65f99b116a", "patch": "@@ -1,3 +1,9 @@\n+2005-08-15  Sebastian Pop  <pop@cri.ensmp.fr>\n+\n+\tPR 23386\n+\t* tree-data-ref.c (estimate_niter_from_size_of_data): When\n+\tstep is negative compute the estimation from init downwards to zero.\n+\t\n 2005-08-14  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* fold-const (fold_binary): Call fold_build2 instead of fold (build."}, {"sha": "d322f995b97970d5c7cc86b13a36ff5e89155197", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23386.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c19aae40795aff2dabaee47422e65f99b116a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c19aae40795aff2dabaee47422e65f99b116a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23386.c?ref=852c19aae40795aff2dabaee47422e65f99b116a", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+int f[100];\n+int g[100];\n+unsigned char\n+f1 (int a, int b)\n+{\n+  __SIZE_TYPE__ ix;\n+  if (a)\n+    return 1;\n+  for (ix = 4; ix--;)\n+      if (f[ix] != g[ix])\n+\t  return 0;\n+  return 1;\n+}\n+\n+int main(void)\n+{\n+  if (!f1 (0, 2))\n+    __builtin_abort();\n+  return 0;\n+}\n+"}, {"sha": "1848128551ad2955742d23b8ff452ca8ccd952b0", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c19aae40795aff2dabaee47422e65f99b116a/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c19aae40795aff2dabaee47422e65f99b116a/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=852c19aae40795aff2dabaee47422e65f99b116a", "patch": "@@ -751,7 +751,7 @@ estimate_niter_from_size_of_data (struct loop *loop,\n \t\t\t\t  tree access_fn, \n \t\t\t\t  tree stmt)\n {\n-  tree estimation;\n+  tree estimation = NULL_TREE;\n   tree array_size, data_size, element_size;\n   tree init, step;\n \n@@ -773,11 +773,28 @@ estimate_niter_from_size_of_data (struct loop *loop,\n       && TREE_CODE (init) == INTEGER_CST\n       && TREE_CODE (step) == INTEGER_CST)\n     {\n-      estimation = fold_build2 (CEIL_DIV_EXPR, integer_type_node,\n-\t\t\t\tfold_build2 (MINUS_EXPR, integer_type_node,\n-\t\t\t\t\t     data_size, init), step);\n-\n-      record_estimate (loop, estimation, boolean_true_node, stmt);\n+      tree i_plus_s = fold_build2 (PLUS_EXPR, integer_type_node, init, step);\n+      tree sign = fold_build2 (GT_EXPR, boolean_type_node, i_plus_s, init);\n+\n+      if (sign == boolean_true_node)\n+\testimation = fold_build2 (CEIL_DIV_EXPR, integer_type_node,\n+\t\t\t\t  fold_build2 (MINUS_EXPR, integer_type_node,\n+\t\t\t\t\t       data_size, init), step);\n+\n+      /* When the step is negative, as in PR23386: (init = 3, step =\n+\t 0ffffffff, data_size = 100), we have to compute the\n+\t estimation as ceil_div (init, 0 - step) + 1.  */\n+      else if (sign == boolean_false_node)\n+\testimation = \n+\t  fold_build2 (PLUS_EXPR, integer_type_node,\n+\t\t       fold_build2 (CEIL_DIV_EXPR, integer_type_node,\n+\t\t\t\t    init,\n+\t\t\t\t    fold_build2 (MINUS_EXPR, unsigned_type_node,\n+\t\t\t\t\t\t integer_zero_node, step)),\n+\t\t       integer_one_node);\n+\n+      if (estimation)\n+\trecord_estimate (loop, estimation, boolean_true_node, stmt);\n     }\n }\n "}]}