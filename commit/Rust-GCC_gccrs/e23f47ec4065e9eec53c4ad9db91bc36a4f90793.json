{"sha": "e23f47ec4065e9eec53c4ad9db91bc36a4f90793", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzZjQ3ZWM0MDY1ZTllZWM1M2M0YWQ5ZGI5MWJjMzZhNGY5MDc5Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-22T21:26:48Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-22T21:27:35Z"}, "message": "i386: Use SWI48DWI mode iterator for abs and maxmin [PR97873]\n\nGenerate special double mode sequence also for TImode on 64bit targets.\n\n2020-11-22  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\n\tPR target/97873\n\ngcc/\n\t* config/i386/i386.md (abs<mode>2): Use SWI48DWI mode iterator.\n\t(*abs<dwi>2_doubleword): Use DWIH mode iterator.\n\n\t(<maxmin:code><mode>3): Use SWI48DWI mode iterator.\n\t(*<maxmin:code><dwi>3_doubleword): Use DWIH mode iterator.\n\ngcc/testsuite/\n\t* gcc.target/i386/pr97873-2.c: New test.", "tree": {"sha": "b11fbf0779b3e971e693060c3d6d456a2d0a2db7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b11fbf0779b3e971e693060c3d6d456a2d0a2db7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e23f47ec4065e9eec53c4ad9db91bc36a4f90793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23f47ec4065e9eec53c4ad9db91bc36a4f90793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23f47ec4065e9eec53c4ad9db91bc36a4f90793", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23f47ec4065e9eec53c4ad9db91bc36a4f90793/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f16897cb4b1468374d63b1a6b12d8b7be845874a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16897cb4b1468374d63b1a6b12d8b7be845874a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f16897cb4b1468374d63b1a6b12d8b7be845874a"}], "stats": {"total": 227, "additions": 126, "deletions": 101}, "files": [{"sha": "2beaee5418dafe860e9e88602f78639673b9feb5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 103, "deletions": 101, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23f47ec4065e9eec53c4ad9db91bc36a4f90793/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23f47ec4065e9eec53c4ad9db91bc36a4f90793/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e23f47ec4065e9eec53c4ad9db91bc36a4f90793", "patch": "@@ -10180,9 +10180,9 @@\n \n (define_expand \"abs<mode>2\"\n   [(parallel\n-    [(set (match_operand:SWI48x 0 \"register_operand\")\n-\t  (abs:SWI48x\n-\t    (match_operand:SWI48x 1 \"general_operand\")))\n+    [(set (match_operand:SWI48DWI 0 \"register_operand\")\n+\t  (abs:SWI48DWI\n+\t    (match_operand:SWI48DWI 1 \"general_operand\")))\n      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_CMOVE\"\n {\n@@ -10208,37 +10208,12 @@\n     }\n })\n \n-(define_insn_and_split \"*abs<mode>2_1\"\n-  [(set (match_operand:SWI48 0 \"register_operand\")\n-\t(abs:SWI48\n-\t  (match_operand:SWI48 1 \"general_operand\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_CMOVE && ix86_pre_reload_split ()\"\n-   \"#\"\n-   \"&& 1\"\n-  [(parallel\n-     [(set (reg:CCGOC FLAGS_REG)\n-\t   (compare:CCGOC\n-\t     (neg:SWI48 (match_dup 1))\n-\t     (const_int 0)))\n-      (set (match_dup 2)\n-\t   (neg:SWI48 (match_dup 1)))])\n-   (set (match_dup 0)\n-        (if_then_else:SWI48\n-\t  (ge (reg:CCGOC FLAGS_REG) (const_int 0))\n-\t  (match_dup 2)\n-\t  (match_dup 1)))]\n-{\n-  operands[1] = force_reg (<MODE>mode, operands[1]);\n-  operands[2] = gen_reg_rtx (<MODE>mode);\n-})\n-\n-(define_insn_and_split \"*absdi2_doubleword\"\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(abs:DI\n-\t  (match_operand:DI 1 \"general_operand\")))\n+(define_insn_and_split \"*abs<dwi>2_doubleword\"\n+  [(set (match_operand:<DWI> 0 \"register_operand\")\n+\t(abs:<DWI>\n+\t  (match_operand:<DWI> 1 \"general_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT && TARGET_CMOVE\n+  \"TARGET_CMOVE\n    && ix86_pre_reload_split ()\"\n    \"#\"\n    \"&& 1\"\n@@ -10255,25 +10230,51 @@\n    (parallel\n      [(set (reg:CCGOC FLAGS_REG)\n \t   (compare:CCGOC\n-\t     (neg:SI (match_dup 5))\n+\t     (neg:DWIH (match_dup 5))\n \t     (const_int 0)))\n       (set (match_dup 5)\n-\t   (neg:SI (match_dup 5)))])\n+\t   (neg:DWIH (match_dup 5)))])\n    (set (match_dup 0)\n-        (if_then_else:SI\n+        (if_then_else:DWIH\n \t  (ge (reg:CCGOC FLAGS_REG) (const_int 0))\n \t  (match_dup 2)\n \t  (match_dup 1)))\n    (set (match_dup 3)\n-        (if_then_else:SI\n+        (if_then_else:DWIH\n \t  (ge (reg:CCGOC FLAGS_REG) (const_int 0))\n \t  (match_dup 5)\n \t  (match_dup 4)))]\n {\n-  operands[1] = force_reg (DImode, operands[1]);\n-  operands[2] = gen_reg_rtx (DImode);\n+  operands[1] = force_reg (<DWI>mode, operands[1]);\n+  operands[2] = gen_reg_rtx (<DWI>mode);\n \n-  split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);\n+  split_double_mode (<DWI>mode, &operands[0], 3, &operands[0], &operands[3]);\n+})\n+\n+(define_insn_and_split \"*abs<mode>2_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(abs:SWI48\n+\t  (match_operand:SWI48 1 \"general_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_CMOVE\n+   && ix86_pre_reload_split ()\"\n+   \"#\"\n+   \"&& 1\"\n+  [(parallel\n+     [(set (reg:CCGOC FLAGS_REG)\n+\t   (compare:CCGOC\n+\t     (neg:SWI48 (match_dup 1))\n+\t     (const_int 0)))\n+      (set (match_dup 2)\n+\t   (neg:SWI48 (match_dup 1)))])\n+   (set (match_dup 0)\n+        (if_then_else:SWI48\n+\t  (ge (reg:CCGOC FLAGS_REG) (const_int 0))\n+\t  (match_dup 2)\n+\t  (match_dup 1)))]\n+{\n+  operands[1] = force_reg (<MODE>mode, operands[1]);\n+  operands[2] = gen_reg_rtx (<MODE>mode);\n })\n \n (define_expand \"<code>tf2\"\n@@ -18966,13 +18967,71 @@\n \n (define_expand \"<code><mode>3\"\n   [(parallel\n-    [(set (match_operand:SWI48x 0 \"register_operand\")\n-\t  (maxmin:SWI48x\n-\t    (match_operand:SWI48x 1 \"register_operand\")\n-\t    (match_operand:SWI48x 2 \"general_operand\")))\n+    [(set (match_operand:SWI48DWI 0 \"register_operand\")\n+\t  (maxmin:SWI48DWI\n+\t    (match_operand:SWI48DWI 1 \"register_operand\")\n+\t    (match_operand:SWI48DWI 2 \"general_operand\")))\n      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_CMOVE\")\n \n+(define_insn_and_split \"*<code><dwi>3_doubleword\"\n+  [(set (match_operand:<DWI> 0 \"register_operand\")\n+\t(maxmin:<DWI>\n+\t  (match_operand:<DWI> 1 \"register_operand\")\n+\t  (match_operand:<DWI> 2 \"general_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_CMOVE\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(if_then_else:DWIH (match_dup 6)\n+\t  (match_dup 1)\n+\t  (match_dup 2)))\n+   (set (match_dup 3)\n+\t(if_then_else:DWIH (match_dup 6)\n+\t  (match_dup 4)\n+\t  (match_dup 5)))]\n+{\n+  operands[2] = force_reg (<DWI>mode, operands[2]);\n+\n+  split_double_mode (<DWI>mode, &operands[0], 3, &operands[0], &operands[3]);\n+\n+  rtx cmplo[2] = { operands[1], operands[2] };\n+  rtx cmphi[2] = { operands[4], operands[5] };\n+\n+  enum rtx_code code = <maxmin_rel>;\n+\n+  switch (code)\n+    {\n+    case LE: case LEU:\n+      std::swap (cmplo[0], cmplo[1]);\n+      std::swap (cmphi[0], cmphi[1]);\n+      code = swap_condition (code);\n+      /* FALLTHRU */\n+\n+    case GE: case GEU:\n+      {\n+\tbool uns = (code == GEU);\n+\trtx (*sbb_insn) (machine_mode, rtx, rtx, rtx)\n+\t  = uns ? gen_sub3_carry_ccc : gen_sub3_carry_ccgz;\n+\n+\temit_insn (gen_cmp_1 (<MODE>mode, cmplo[0], cmplo[1]));\n+\n+\trtx tmp = gen_rtx_SCRATCH (<MODE>mode);\n+\temit_insn (sbb_insn (<MODE>mode, tmp, cmphi[0], cmphi[1]));\n+\n+\trtx flags = gen_rtx_REG (uns ? CCCmode : CCGZmode, FLAGS_REG);\n+\toperands[6] = gen_rtx_fmt_ee (code, VOIDmode, flags, const0_rtx);\n+\n+\tbreak;\n+      }\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+})\n+\n (define_insn_and_split \"*<code><mode>3_1\"\n   [(set (match_operand:SWI48 0 \"register_operand\")\n \t(maxmin:SWI48\n@@ -19027,63 +19086,6 @@\n   operands[3] = gen_rtx_fmt_ee (code, VOIDmode, flags, const0_rtx);\n })\n \n-(define_insn_and_split \"*<code>di3_doubleword\"\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(maxmin:DI (match_operand:DI 1 \"register_operand\")\n-\t\t   (match_operand:DI 2 \"general_operand\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT && TARGET_CMOVE\n-   && ix86_pre_reload_split ()\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (match_dup 0)\n-\t(if_then_else:SI (match_dup 6)\n-\t  (match_dup 1)\n-\t  (match_dup 2)))\n-   (set (match_dup 3)\n-\t(if_then_else:SI (match_dup 6)\n-\t  (match_dup 4)\n-\t  (match_dup 5)))]\n-{\n-  operands[2] = force_reg (DImode, operands[2]);\n-\n-  split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);\n-\n-  rtx cmplo[2] = { operands[1], operands[2] };\n-  rtx cmphi[2] = { operands[4], operands[5] };\n-\n-  enum rtx_code code = <maxmin_rel>;\n-\n-  switch (code)\n-    {\n-    case LE: case LEU:\n-      std::swap (cmplo[0], cmplo[1]);\n-      std::swap (cmphi[0], cmphi[1]);\n-      code = swap_condition (code);\n-      /* FALLTHRU */\n-\n-    case GE: case GEU:\n-      {\n-\tbool uns = (code == GEU);\n-\trtx (*sbb_insn) (machine_mode, rtx, rtx, rtx)\n-\t  = uns ? gen_sub3_carry_ccc : gen_sub3_carry_ccgz;\n-\n-\temit_insn (gen_cmp_1 (SImode, cmplo[0], cmplo[1]));\n-\n-\trtx tmp = gen_rtx_SCRATCH (SImode);\n-\temit_insn (sbb_insn (SImode, tmp, cmphi[0], cmphi[1]));\n-\n-\trtx flags = gen_rtx_REG (uns ? CCCmode : CCGZmode, FLAGS_REG);\n-\toperands[6] = gen_rtx_fmt_ee (code, VOIDmode, flags, const0_rtx);\n-\n-\tbreak;\n-      }\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-})\n-\n ;; Avoid clearing a register between a flags setting comparison and its use,\n ;; i.e. prefer \"xorl %eax,%eax; test/cmp\" over \"test/cmp; movl $0, %eax\".\n (define_peephole2"}, {"sha": "22519ab5af6fd21c8bcd7c3d9522e2dceb2c17e8", "filename": "gcc/testsuite/gcc.target/i386/pr97873-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23f47ec4065e9eec53c4ad9db91bc36a4f90793/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97873-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23f47ec4065e9eec53c4ad9db91bc36a4f90793/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97873-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97873-2.c?ref=e23f47ec4065e9eec53c4ad9db91bc36a4f90793", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/97873 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-sse3 -mtune=generic\" } */\n+\n+#ifdef __SIZEOF_INT128__\n+typedef __int128_t T;\n+#else\n+typedef long long T;\n+#endif\n+\n+T test_abs (T x)\n+{\n+  return (x < 0) ? -x : x;\n+}\n+\n+/* { dg-final { scan-assembler \"adc\" } } */\n+\n+T test_smin (T x, T y)\n+{\n+  return (x < y) ? x : y;\n+}\n+\n+/* { dg-final { scan-assembler \"sbb\" } } */"}]}