{"sha": "ef230b38360a3565c7cf88023fc109e3e76e119b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYyMzBiMzgzNjBhMzU2NWM3Y2Y4ODAyM2ZjMTA5ZTNlNzZlMTE5Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-22T18:53:32Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-22T18:53:32Z"}, "message": "re PR bootstrap/49104 (bootstrap failure on AMD K6-2 with illegal instruction (cmove) in stage2)\n\n\tPR target/49104\n\t* config/i386/cpuid.h (bit_MMXEXT): New define.\n\nlibcpp/ChangeLog:\n\n2011-05-22  Uros Bizjak  <ubizjak@gmail.com>\n\n\tPR target/49104\n\t* lex.c (init_vectorized_lexer): Do not set \"minimum\" when __3dNOW_A__\n\tis defined.  Check bit_MMXEXT and bit_CMOV to use search_line_mmx.\n\nFrom-SVN: r174032", "tree": {"sha": "9e5fdec048d251da342293835312e65384c5ceea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e5fdec048d251da342293835312e65384c5ceea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef230b38360a3565c7cf88023fc109e3e76e119b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef230b38360a3565c7cf88023fc109e3e76e119b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef230b38360a3565c7cf88023fc109e3e76e119b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef230b38360a3565c7cf88023fc109e3e76e119b/comments", "author": null, "committer": null, "parents": [{"sha": "7a1db261dec3c7da38f1576a03ec44167649c1af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1db261dec3c7da38f1576a03ec44167649c1af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1db261dec3c7da38f1576a03ec44167649c1af"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "81e2d20fa2d67ff09dfffc9109de3b8a02e713f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef230b38360a3565c7cf88023fc109e3e76e119b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef230b38360a3565c7cf88023fc109e3e76e119b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef230b38360a3565c7cf88023fc109e3e76e119b", "patch": "@@ -1,3 +1,8 @@\n+2011-05-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/49104\n+\t* config/i386/cpuid.h (bit_MMXEXT): New define.\n+\n 2011-05-22  Nick Clifton  <nickc@redhat.com>\n \n \t* config/stormy16/stormy16.c (xstormy16_init_builtins): prevent\n@@ -7,8 +12,7 @@\n 2011-05-22  Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR tree-optimization/49087\n-\t* tree-vect-loop.c (vect_is_slp_reduction): Fail if\n-\tLHS has no uses.\n+\t* tree-vect-loop.c (vect_is_slp_reduction): Fail if LHS has no uses.\n \n 2011-05-21  Jason Merrill  <jason@redhat.com>\n \n@@ -45,8 +49,7 @@\n \t* opt-read.awk: New.  Split out of optc-gen.awk and opth-gen.awk.\n \t* optc-gen.awk: Move common code to opt-read.awk.\n \t* opth-gen.awk: Likewise.\n-\t* Makefile.in (options.c, s-options-h): Update to use\n-\topt-read.awk.\n+\t* Makefile.in (options.c, s-options-h): Update to use opt-read.awk.\n \n 2011-05-20  Nathan Froyd  <froydnj@codesourcery.com>\n "}, {"sha": "3c3f47b0030dcabba041197d7888ffb515d28f31", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef230b38360a3565c7cf88023fc109e3e76e119b/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef230b38360a3565c7cf88023fc109e3e76e119b/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=ef230b38360a3565c7cf88023fc109e3e76e119b", "patch": "@@ -57,6 +57,7 @@\n #define bit_TBM         (1 << 21)\n \n /* %edx */\n+#define bit_MMXEXT\t(1 << 22)\n #define bit_LM\t\t(1 << 29)\n #define bit_3DNOWP\t(1 << 30)\n #define bit_3DNOW\t(1 << 31)"}, {"sha": "2630138b6e496167ab623682d0fd1cb7fac4116c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef230b38360a3565c7cf88023fc109e3e76e119b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef230b38360a3565c7cf88023fc109e3e76e119b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=ef230b38360a3565c7cf88023fc109e3e76e119b", "patch": "@@ -1,3 +1,9 @@\n+2011-05-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/49104\n+\t* lex.c (init_vectorized_lexer): Do not set \"minimum\" when __3dNOW_A__\n+\tis defined.  Check bit_MMXEXT and bit_CMOV to use search_line_mmx.\n+\n 2011-04-25  Jan Kratochvil  <jan.kratochvil@redhat.com>\n \n \t* system.h (ENUM_BITFIELD): Remove."}, {"sha": "bbce62ca095a825ecd0a62d5f1aa8f85203e988c", "filename": "libcpp/lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef230b38360a3565c7cf88023fc109e3e76e119b/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef230b38360a3565c7cf88023fc109e3e76e119b/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=ef230b38360a3565c7cf88023fc109e3e76e119b", "patch": "@@ -294,7 +294,7 @@ static const char repl_chars[4][16] __attribute__((aligned(16))) = {\n /* A version of the fast scanner using MMX vectorized byte compare insns.\n \n    This uses the PMOVMSKB instruction which was introduced with \"MMX2\",\n-   which was packaged into SSE1; it is also present in the AMD 3dNOW-A\n+   which was packaged into SSE1; it is also present in the AMD MMX\n    extension.  Mark the function as using \"sse\" so that we emit a real\n    \"emms\" instruction, rather than the 3dNOW \"femms\" instruction.  */\n \n@@ -488,7 +488,7 @@ init_vectorized_lexer (void)\n   minimum = 3;\n #elif defined(__SSE2__)\n   minimum = 2;\n-#elif defined(__SSE__) || defined(__3dNOW_A__)\n+#elif defined(__SSE__)\n   minimum = 1;\n #endif\n \n@@ -505,7 +505,7 @@ init_vectorized_lexer (void)\n     }\n   else if (__get_cpuid (0x80000001, &dummy, &dummy, &dummy, &edx))\n     {\n-      if (minimum == 1 || edx & bit_3DNOWP)\n+      if (minimum == 1 || (edx & (bit_MMXEXT | bit_CMOV)))\n \timpl = search_line_mmx;\n     }\n "}]}