{"sha": "a3e7bde5b0ab530b10483818d52504f7942ecdd5", "node_id": "C_kwDOANBUbNoAKGEzZTdiZGU1YjBhYjUzMGIxMDQ4MzgxOGQ1MjUwNGY3OTQyZWNkZDU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-15T16:30:25Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-03-25T08:47:34Z"}, "message": "mappings: Keep exported macro IDs\n\ngcc/rust/ChangeLog:\n\n\t* hir/rust-ast-lower-item.cc (ASTLoweringItem::visit): Add new visitor\n\tfor AST::MacroRulesDefinition.\n\t* hir/rust-ast-lower-item.h: Declare above mentioned visitor.\n\t* metadata/rust-export-metadata.cc (ExportContext::emit_macro): New function.\n\t* metadata/rust-export-metadata.h: Declare it.\n\t(PublicInterface::gather_export_data): Go through each exported macro.\n\t* util/rust-hir-map.cc (Mappings::insert_exported_macro): New function.\n\t(Mappings::get_exported_macros): New function.\n\t* util/rust-hir-map.h: Add new mappings for exported macros.", "tree": {"sha": "463d2d324d29ba7ee00a3244c33470848cceae65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/463d2d324d29ba7ee00a3244c33470848cceae65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3e7bde5b0ab530b10483818d52504f7942ecdd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e7bde5b0ab530b10483818d52504f7942ecdd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e7bde5b0ab530b10483818d52504f7942ecdd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e7bde5b0ab530b10483818d52504f7942ecdd5/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "9e580a61210c2b70657ee4f5b86c5982d543b45f", "filename": "gcc/rust/hir/rust-ast-lower-item.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e7bde5b0ab530b10483818d52504f7942ecdd5/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e7bde5b0ab530b10483818d52504f7942ecdd5/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc?ref=a3e7bde5b0ab530b10483818d52504f7942ecdd5", "patch": "@@ -705,6 +705,14 @@ ASTLoweringItem::visit (AST::ExternBlock &extern_block)\n   translated = lower_extern_block (extern_block);\n }\n \n+void\n+ASTLoweringItem::visit (AST::MacroRulesDefinition &def)\n+{\n+  for (const auto &attr : def.get_outer_attrs ())\n+    if (attr.get_path ().as_string () == \"macro_export\")\n+      mappings->insert_exported_macro (def);\n+}\n+\n HIR::SimplePath\n ASTLoweringSimplePath::translate (const AST::SimplePath &path)\n {"}, {"sha": "c0ecff459bff775c9fc56faf64f199cf43b852a7", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e7bde5b0ab530b10483818d52504f7942ecdd5/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e7bde5b0ab530b10483818d52504f7942ecdd5/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=a3e7bde5b0ab530b10483818d52504f7942ecdd5", "patch": "@@ -44,6 +44,7 @@ class ASTLoweringItem : public ASTLoweringBase\n   void visit (AST::Trait &trait) override;\n   void visit (AST::TraitImpl &impl_block) override;\n   void visit (AST::ExternBlock &extern_block) override;\n+  void visit (AST::MacroRulesDefinition &rules_def) override;\n \n private:\n   ASTLoweringItem () : translated (nullptr) {}"}, {"sha": "c65448b9191b58113382294c072443c1220aade0", "filename": "gcc/rust/metadata/rust-export-metadata.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e7bde5b0ab530b10483818d52504f7942ecdd5/gcc%2Frust%2Fmetadata%2Frust-export-metadata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e7bde5b0ab530b10483818d52504f7942ecdd5/gcc%2Frust%2Fmetadata%2Frust-export-metadata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fmetadata%2Frust-export-metadata.cc?ref=a3e7bde5b0ab530b10483818d52504f7942ecdd5", "patch": "@@ -144,6 +144,21 @@ ExportContext::emit_function (const HIR::Function &fn)\n   public_interface_buffer += oss.str ();\n }\n \n+void\n+ExportContext::emit_macro (NodeId macro)\n+{\n+  std::stringstream oss;\n+  AST::Dump dumper (oss);\n+\n+  AST::Item *item;\n+  auto ok = mappings->lookup_ast_item (macro, &item);\n+  rust_assert (ok);\n+\n+  dumper.go (*item);\n+\n+  public_interface_buffer += oss.str ();\n+}\n+\n const std::string &\n ExportContext::get_interface_buffer () const\n {\n@@ -215,6 +230,9 @@ PublicInterface::gather_export_data ()\n       if (is_crate_public (vis_item))\n \tvis_item.accept_vis (visitor);\n     }\n+\n+  for (const auto &macro : mappings.get_exported_macros ())\n+    context.emit_macro (macro);\n }\n \n void"}, {"sha": "c498788a0b222e5ece901dc2aa496d67f7225b78", "filename": "gcc/rust/metadata/rust-export-metadata.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e7bde5b0ab530b10483818d52504f7942ecdd5/gcc%2Frust%2Fmetadata%2Frust-export-metadata.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e7bde5b0ab530b10483818d52504f7942ecdd5/gcc%2Frust%2Fmetadata%2Frust-export-metadata.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fmetadata%2Frust-export-metadata.h?ref=a3e7bde5b0ab530b10483818d52504f7942ecdd5", "patch": "@@ -41,9 +41,15 @@ class ExportContext\n   const HIR::Module &pop_module_scope ();\n \n   void emit_trait (const HIR::Trait &trait);\n-\n   void emit_function (const HIR::Function &fn);\n \n+  /**\n+   * Macros are a bit particular - they only live at the AST level, so we can\n+   * directly refer to them using their NodeId. There's no need to keep an HIR\n+   * node for them.\n+   */\n+  void emit_macro (NodeId macro);\n+\n   const std::string &get_interface_buffer () const;\n \n private:"}, {"sha": "eb476d251d9573c9dd3dd5f5e72c215b43d82501", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e7bde5b0ab530b10483818d52504f7942ecdd5/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e7bde5b0ab530b10483818d52504f7942ecdd5/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=a3e7bde5b0ab530b10483818d52504f7942ecdd5", "patch": "@@ -941,6 +941,18 @@ Mappings::lookup_macro_invocation (AST::MacroInvocation &invoc,\n   return true;\n }\n \n+void\n+Mappings::insert_exported_macro (AST::MacroRulesDefinition &def)\n+{\n+  exportedMacros.emplace_back (def.get_node_id ());\n+}\n+\n+std::vector<NodeId> &\n+Mappings::get_exported_macros ()\n+{\n+  return exportedMacros;\n+}\n+\n void\n Mappings::insert_visibility (NodeId id, Privacy::ModuleVisibility visibility)\n {"}, {"sha": "9f333f44389c82595a68428fcb90ecfabbdac291", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e7bde5b0ab530b10483818d52504f7942ecdd5/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e7bde5b0ab530b10483818d52504f7942ecdd5/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=a3e7bde5b0ab530b10483818d52504f7942ecdd5", "patch": "@@ -279,6 +279,9 @@ class Mappings\n   bool lookup_macro_invocation (AST::MacroInvocation &invoc,\n \t\t\t\tAST::MacroRulesDefinition **def);\n \n+  void insert_exported_macro (AST::MacroRulesDefinition &def);\n+  std::vector<NodeId> &get_exported_macros ();\n+\n   void insert_visibility (NodeId id, Privacy::ModuleVisibility visibility);\n   bool lookup_visibility (NodeId id, Privacy::ModuleVisibility &def);\n \n@@ -350,6 +353,7 @@ class Mappings\n   // macros\n   std::map<NodeId, AST::MacroRulesDefinition *> macroMappings;\n   std::map<NodeId, AST::MacroRulesDefinition *> macroInvocations;\n+  std::vector<NodeId> exportedMacros;\n \n   // crate names\n   std::map<CrateNum, std::string> crate_names;"}]}