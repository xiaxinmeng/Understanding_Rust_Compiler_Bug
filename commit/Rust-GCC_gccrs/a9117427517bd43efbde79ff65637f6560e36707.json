{"sha": "a9117427517bd43efbde79ff65637f6560e36707", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkxMTc0Mjc1MTdiZDQzZWZiZGU3OWZmNjU2MzdmNjU2MGUzNjcwNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-10-17T10:12:23Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-17T10:12:23Z"}, "message": "via Alexandre Oliva <aoliva@redhat.com>\n\n\n2000-10-17  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\tvia Alexandre Oliva  <aoliva@redhat.com>\n\t* libsupc++/Makefile.am: Add --tag CXX, --tag CC, comments.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* src/Makefile.am: Duplicate code.\n\t* src/Makefile.in: Regenerate.\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_RELIBGCC): Take this out.\n\t* aclocal.m4: Regenerate.\n\t* configure.in: And here.\n\t* configure: Regenerate.\n\n\t* acinclude.m4 (GLIBCPP_CHECK_LINKER_FEATURES): Disable\n\ttest for SECTION_LDFLAGS.\n\nFrom-SVN: r36902", "tree": {"sha": "13cd6ffa087a1f9fe8c9aeedabef854fd6e73674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13cd6ffa087a1f9fe8c9aeedabef854fd6e73674"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9117427517bd43efbde79ff65637f6560e36707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9117427517bd43efbde79ff65637f6560e36707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9117427517bd43efbde79ff65637f6560e36707", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9117427517bd43efbde79ff65637f6560e36707/comments", "author": null, "committer": null, "parents": [{"sha": "2683ed8d12f52394b5eb7635af05bec68064ea58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2683ed8d12f52394b5eb7635af05bec68064ea58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2683ed8d12f52394b5eb7635af05bec68064ea58"}], "stats": {"total": 2228, "additions": 1103, "deletions": 1125}, "files": [{"sha": "ba0fa7dddf3d9744c04930cdf7d358e7569516be", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a9117427517bd43efbde79ff65637f6560e36707", "patch": "@@ -1,3 +1,19 @@\n+2000-10-17  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\tvia Alexandre Oliva  <aoliva@redhat.com>\n+\t* libsupc++/Makefile.am: Add --tag CXX, --tag CC, comments.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* src/Makefile.am: Duplicate code.\n+\t* src/Makefile.in: Regenerate.\n+\t\n+\t* acinclude.m4 (GLIBCPP_ENABLE_RELIBGCC): Take this out.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.in: And here.\n+\t* configure: Regenerate.\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_LINKER_FEATURES): Disable\n+\ttest for SECTION_LDFLAGS.\n+\n 2000-10-16  Benjamin Kosnik  <bkoz@gnu.org>\n \n \tShadow headers would work if libsupc++ was strict about namespaces."}, {"sha": "24c086f18b451e14919ba89a67a14b0378213b13", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=a9117427517bd43efbde79ff65637f6560e36707", "patch": "@@ -76,7 +76,6 @@ DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n-GCC_OBJDIR = @GCC_OBJDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n GLIBCPP_CFLAGS = @GLIBCPP_CFLAGS@"}, {"sha": "9eff7d887b4c3cf3be7913cde5d9fba6061f4bde", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 17, "deletions": 52, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=a9117427517bd43efbde79ff65637f6560e36707", "patch": "@@ -255,29 +255,33 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n   # by now (in libtool), but require it now just to be safe...\n+  SECTION_LDFLAGS=''\n+  OPT_LDFLAGS=''\n   AC_REQUIRE([AC_PROG_LD])\n-  if test \"$ac_cv_prog_gnu_ld\" = \"no\"; then\n-    SECTION_LDFLAGS=''\n-    OPT_LDFLAGS=''\n-\n-  else   # GNU ld it is!  Joy and bunny rabbits!\n+  if test \"$ac_cv_prog_gnu_ld\" = \"yes\"; then\n+    # GNU ld it is!  Joy and bunny rabbits!\n \n     # All these tests are for C++; save the language and the compiler flags.\n     # Need to do this so that g++ won't try to link in libstdc++\n     ac_test_CFLAGS=\"${CFLAGS+set}\"\n     ac_save_CFLAGS=\"$CFLAGS\"\n-    CFLAGS='-x c++  -Wl,--gc-sections'\n+#    CFLAGS='-x c++  -Wl,--gc-sections'\n+#XXX\n+    CFLAGS=''\n \n     # Check for -Wl,--gc-sections\n     # XXX This test is broken at the moment, as symbols required for\n     # linking are now in libsupc++ (not built yet.....). In addition, \n-    # this test has cored on solaris in the past.\n+    # this test has cored on solaris in the past. In addition,\n+    # --gc-sections doesn't really work at the moment (keeps on discarding\n+    # used sections, first .eh_frame and now some of the glibc sections for\n+    # iconv). Bzzzzt. Thanks for playing, maybe next time.\n     AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n     AC_TRY_RUN([\n      int main(void) \n      {\n-       //try { throw 1; }\n-       //catch (...) { };\n+       try { throw 1; }\n+       catch (...) { };\n        return 0;\n      }\n     ], [ac_sectionLDflags=yes],[ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n@@ -288,9 +292,12 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n       CFLAGS=''\n     fi\n     if test \"$ac_sectionLDflags\" = \"yes\"; then\n-      SECTION_LDFLAGS='-Wl,--gc-sections'\n+#      SECTION_LDFLAGS='-Wl,--gc-sections'\n+#XXX\n+      SECTION_LDFLAGS=''\n     fi\n     AC_MSG_RESULT($ac_sectionLDflags)\n+\n     OPT_LDFLAGS='-Wl,-O1'\n \n   fi\n@@ -1177,48 +1184,6 @@ AC_SUBST(EXTRA_CXX_FLAGS)\n ])\n \n \n-dnl\n-dnl Check for instructions to automatically rebuild libgcc.a.  Requires,\n-dnl of course, the location of the gcc objdir.  Note that if --disable-\n-dnl namespaces is in effect, rebuilding libgcc.a is an expensive no-op.\n-dnl\n-dnl GLIBCPP_ENABLE_RELIBGCC\n-dnl --enable-libgcc-rebuild=/absolute/path/to/gcc/objdir sets GCC_OBJDIR\n-dnl     (presumably in the top-level Makefile) to /absol.../objdir\n-dnl --disable-libgcc-rebuild will not touch libgcc.a at all (maybe print\n-dnl     a warning if this is given along with --enable-namespaces), by\n-dnl     setting GCC_OBJDIR to `no'.\n-dnl  +  Doing this by default is going to be interesting.  What default\n-dnl     \"on\" value can there be?\n-dnl  +  Usage:  GLIBCPP_ENABLE_RELIBGCC[(DEFAULT)]\n-dnl       The default path should be ../.. if bundled with GCC source.\n-dnl       If ommitted, it defaults to `no'.\n-dnl\n-AC_DEFUN(GLIBCPP_ENABLE_RELIBGCC, [dnl\n-define([GLIBCPP_ENABLE_RELIBGCC_DEFAULT], ifelse($1,, no, $1))dnl\n-AC_ARG_ENABLE(libgcc-rebuild,\n-changequote(<<, >>)dnl\n-<<  --enable-libgcc-rebuild=DIR     also rebuild libgcc.a; DIR is\n-                                  the GCC objdir; see install.html>>,\n-changequote([, ])dnl\n-[case \"$enableval\" in\n- yes) AC_MSG_ERROR([--enable-libgcc-rebuild needs a pathname]) ;;\n- no)  enable_libgcc_rebuild=no ;;\n- *)   if test -d \"$enableval\" && test -d \"${enableval}/gcc\" && \\\n-         test -d \"${enableval}/libiberty\"\n-      then\n-         enable_libgcc_rebuild=\"$enableval\"\n-      else\n-         AC_MSG_ERROR([\"$enableval\" does not appear to be the GCC objdir])\n-      fi\n-      ;;\n- esac],\n-enable_libgcc_rebuild=GLIBCPP_ENABLE_RELIBGCC_DEFAULT)dnl\n-GCC_OBJDIR=\"$enable_libgcc_rebuild\"\n-AC_SUBST(GCC_OBJDIR)\n-])\n-\n-\n dnl\n dnl Check for which I/O library to use:  libio, or something specific.\n dnl"}, {"sha": "5b2673f4b9c16caa1b9f66a7060fca6c7caf2a3b", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 17, "deletions": 52, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=a9117427517bd43efbde79ff65637f6560e36707", "patch": "@@ -267,29 +267,33 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n   # by now (in libtool), but require it now just to be safe...\n+  SECTION_LDFLAGS=''\n+  OPT_LDFLAGS=''\n   AC_REQUIRE([AC_PROG_LD])\n-  if test \"$ac_cv_prog_gnu_ld\" = \"no\"; then\n-    SECTION_LDFLAGS=''\n-    OPT_LDFLAGS=''\n-\n-  else   # GNU ld it is!  Joy and bunny rabbits!\n+  if test \"$ac_cv_prog_gnu_ld\" = \"yes\"; then\n+    # GNU ld it is!  Joy and bunny rabbits!\n \n     # All these tests are for C++; save the language and the compiler flags.\n     # Need to do this so that g++ won't try to link in libstdc++\n     ac_test_CFLAGS=\"${CFLAGS+set}\"\n     ac_save_CFLAGS=\"$CFLAGS\"\n-    CFLAGS='-x c++  -Wl,--gc-sections'\n+#    CFLAGS='-x c++  -Wl,--gc-sections'\n+#XXX\n+    CFLAGS=''\n \n     # Check for -Wl,--gc-sections\n     # XXX This test is broken at the moment, as symbols required for\n     # linking are now in libsupc++ (not built yet.....). In addition, \n-    # this test has cored on solaris in the past.\n+    # this test has cored on solaris in the past. In addition,\n+    # --gc-sections doesn't really work at the moment (keeps on discarding\n+    # used sections, first .eh_frame and now some of the glibc sections for\n+    # iconv). Bzzzzt. Thanks for playing, maybe next time.\n     AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n     AC_TRY_RUN([\n      int main(void) \n      {\n-       //try { throw 1; }\n-       //catch (...) { };\n+       try { throw 1; }\n+       catch (...) { };\n        return 0;\n      }\n     ], [ac_sectionLDflags=yes],[ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n@@ -300,9 +304,12 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n       CFLAGS=''\n     fi\n     if test \"$ac_sectionLDflags\" = \"yes\"; then\n-      SECTION_LDFLAGS='-Wl,--gc-sections'\n+#      SECTION_LDFLAGS='-Wl,--gc-sections'\n+#XXX\n+      SECTION_LDFLAGS=''\n     fi\n     AC_MSG_RESULT($ac_sectionLDflags)\n+\n     OPT_LDFLAGS='-Wl,-O1'\n \n   fi\n@@ -1189,48 +1196,6 @@ AC_SUBST(EXTRA_CXX_FLAGS)\n ])\n \n \n-dnl\n-dnl Check for instructions to automatically rebuild libgcc.a.  Requires,\n-dnl of course, the location of the gcc objdir.  Note that if --disable-\n-dnl namespaces is in effect, rebuilding libgcc.a is an expensive no-op.\n-dnl\n-dnl GLIBCPP_ENABLE_RELIBGCC\n-dnl --enable-libgcc-rebuild=/absolute/path/to/gcc/objdir sets GCC_OBJDIR\n-dnl     (presumably in the top-level Makefile) to /absol.../objdir\n-dnl --disable-libgcc-rebuild will not touch libgcc.a at all (maybe print\n-dnl     a warning if this is given along with --enable-namespaces), by\n-dnl     setting GCC_OBJDIR to `no'.\n-dnl  +  Doing this by default is going to be interesting.  What default\n-dnl     \"on\" value can there be?\n-dnl  +  Usage:  GLIBCPP_ENABLE_RELIBGCC[(DEFAULT)]\n-dnl       The default path should be ../.. if bundled with GCC source.\n-dnl       If ommitted, it defaults to `no'.\n-dnl\n-AC_DEFUN(GLIBCPP_ENABLE_RELIBGCC, [dnl\n-define([GLIBCPP_ENABLE_RELIBGCC_DEFAULT], ifelse($1,, no, $1))dnl\n-AC_ARG_ENABLE(libgcc-rebuild,\n-changequote(<<, >>)dnl\n-<<  --enable-libgcc-rebuild=DIR     also rebuild libgcc.a; DIR is\n-                                  the GCC objdir; see install.html>>,\n-changequote([, ])dnl\n-[case \"$enableval\" in\n- yes) AC_MSG_ERROR([--enable-libgcc-rebuild needs a pathname]) ;;\n- no)  enable_libgcc_rebuild=no ;;\n- *)   if test -d \"$enableval\" && test -d \"${enableval}/gcc\" && \\\n-         test -d \"${enableval}/libiberty\"\n-      then\n-         enable_libgcc_rebuild=\"$enableval\"\n-      else\n-         AC_MSG_ERROR([\"$enableval\" does not appear to be the GCC objdir])\n-      fi\n-      ;;\n- esac],\n-enable_libgcc_rebuild=GLIBCPP_ENABLE_RELIBGCC_DEFAULT)dnl\n-GCC_OBJDIR=\"$enable_libgcc_rebuild\"\n-AC_SUBST(GCC_OBJDIR)\n-])\n-\n-\n dnl\n dnl Check for which I/O library to use:  libio, or something specific.\n dnl"}, {"sha": "b4282b4c6c1eb658029442c5d3628f00cda6f58a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 927, "deletions": 927, "changes": 1854, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=a9117427517bd43efbde79ff65637f6560e36707"}, {"sha": "e4c03f55b179fcf167e74985dd1d7e6a05fafe80", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=a9117427517bd43efbde79ff65637f6560e36707", "patch": "@@ -38,7 +38,6 @@ GLIBCPP_ENABLE_LONG_LONG(yes)\n GLIBCPP_ENABLE_SHADOW(no)\n GLIBCPP_ENABLE_THREADS\n GLIBCPP_ENABLE_ATOMICITY\n-#GLIBCPP_ENABLE_RELIBGCC([../..])\n GLIBCPP_ENABLE_CXX_FLAGS([none])\n \n \n@@ -245,16 +244,10 @@ if test ! -f stamp-limits; then\n   touch stamp-limits\n fi\n \n+\n # Sanity checking & User-visible messages.\n # Checks down here, otherwise they get scrolled off before\n # the user will notice.\n-if test \"$enable_libgcc_rebuild\" = \"no\"; then\n-  AC_MSG_WARN([libgcc.a will not match mangled symbols unless it is rebuilt])\n-else\n-  # Other things besides namespaces can make this true as well, but none\n-  # of them are done automatically... yet\n-  AC_MSG_WARN([no point in rebuilding libgcc.a if namespaces aren't used])\n-fi\n \n # Trying to get more people to read documentation.  Possibly remove\n # check and warn all the time. There is no \"informational\" AC_MSG_"}, {"sha": "8777d2451a54f0847ad8a5c6c1467a7cfd2b802f", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=a9117427517bd43efbde79ff65637f6560e36707", "patch": "@@ -74,7 +74,6 @@ DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n-GCC_OBJDIR = @GCC_OBJDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n GLIBCPP_CFLAGS = @GLIBCPP_CFLAGS@"}, {"sha": "9d5f25de98bfca99983716da2d36422a4ed185e3", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=a9117427517bd43efbde79ff65637f6560e36707", "patch": "@@ -74,7 +74,6 @@ DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n-GCC_OBJDIR = @GCC_OBJDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n GLIBCPP_CFLAGS = @GLIBCPP_CFLAGS@"}, {"sha": "ef8c1632b472093e647607eedde578efa620bb2d", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=a9117427517bd43efbde79ff65637f6560e36707", "patch": "@@ -116,32 +116,42 @@ LIBTOOL = @LIBTOOL@ --tag disable-shared\n LIBSUPCXX_CXXFLAGS = -prefer-pic\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n-# modified in a per-library or per-sub-library way.\n-# Need to manually set this option because CONFIG_CXXFLAGS has to be at\n-# the end of the compile line so that -O2 can be overridden as the\n-# occasion call for it. (ie, --enable-debug)\n+# modified in a per-library or per-sub-library way.  Need to manually\n+# set this option because CONFIG_CXXFLAGS has to be after\n+# OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n+# as the occasion call for it. (ie, --enable-debug)\n AM_CXXFLAGS = \\\n \t-fno-implicit-templates \\\n \t$(LIBSUPCXX_CXXFLAGS) \\\n \t$(WARN_CXXFLAGS) \\\n \t$(OPTIMIZE_CXXFLAGS) \\\n \t$(CONFIG_CXXFLAGS) \n \n-# Need to explicitly set this so that AM_CXXFLAGS is last. In\n-# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n-# an include diretory, which screws up shadow headers. (That way,\n-# things like -O2 passed down from the toplevel can be overridden by\n-# --enable-debug.)\n-LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n-\n-# We have a problem when building the shared libstdc++ object if the\n-# rules automake generates would be used.  We cannot allow CXX to be used\n-# in libtool since this would add -lstdc++ to the link line which of\n-# course is impossible.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n-\n-\n-\n \n+# libstdc++ libtool notes\n+\n+# 1) Need to explicitly set LTCXXCOMPILE so that AM_CXXFLAGS is\n+# last. (That way, things like -O2 passed down from the toplevel can\n+# be overridden by --enable-debug.)\n+\n+# 2) In general, libtool expects an argument such as `--tag=CXX' when\n+# using the C++ compiler, because that will enable the settings\n+# detected when C++ support was being configured.  However, when no\n+# such flag is given in the command line, libtool attempts to figure\n+# it out by matching the compiler name in each configuration section\n+# against a prefix of the command line.  The problem is that, if the\n+# compiler name and its initial flags stored in the libtool\n+# configuration file don't match those in the command line, libtool\n+# can't decide which configuration to use, and it gives up.  The\n+# correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n+# CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n+# attempt to infer which configuration to use\n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n+# 3) We have a problem when building the shared libstdc++ object if\n+# the rules automake generates would be used.  We cannot allow CXX to\n+# be used in libtool since this would add -lstdc++ to the link line\n+# which of course is problematic at this point.\n+CXXLINK = $(LIBTOOL) --tag CC --mode=link \"$(CC)\" \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@"}, {"sha": "e278197c14539a22b629a25b1fb87b5e94a4acc0", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=a9117427517bd43efbde79ff65637f6560e36707", "patch": "@@ -74,7 +74,6 @@ DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n-GCC_OBJDIR = @GCC_OBJDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n GLIBCPP_CFLAGS = @GLIBCPP_CFLAGS@\n@@ -164,26 +163,40 @@ LIBTOOL = @LIBTOOL@ --tag disable-shared\n LIBSUPCXX_CXXFLAGS = -prefer-pic\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n-# modified in a per-library or per-sub-library way.\n-# Need to manually set this option because CONFIG_CXXFLAGS has to be at\n-# the end of the compile line so that -O2 can be overridden as the\n-# occasion call for it. (ie, --enable-debug)\n+# modified in a per-library or per-sub-library way.  Need to manually\n+# set this option because CONFIG_CXXFLAGS has to be after\n+# OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n+# as the occasion call for it. (ie, --enable-debug)\n AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n-# Need to explicitly set this so that AM_CXXFLAGS is last. In\n-# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n-# an include diretory, which screws up shadow headers. (That way,\n-# things like -O2 passed down from the toplevel can be overridden by\n-# --enable-debug.)\n-LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+# libstdc++ libtool notes\n \n+# 1) Need to explicitly set LTCXXCOMPILE so that AM_CXXFLAGS is\n+# last. (That way, things like -O2 passed down from the toplevel can\n+# be overridden by --enable-debug.)\n+\n+# 2) In general, libtool expects an argument such as `--tag=CXX' when\n+# using the C++ compiler, because that will enable the settings\n+# detected when C++ support was being configured.  However, when no\n+# such flag is given in the command line, libtool attempts to figure\n+# it out by matching the compiler name in each configuration section\n+# against a prefix of the command line.  The problem is that, if the\n+# compiler name and its initial flags stored in the libtool\n+# configuration file don't match those in the command line, libtool\n+# can't decide which configuration to use, and it gives up.  The\n+# correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n+# CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n+# attempt to infer which configuration to use\n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+\n+# 3) We have a problem when building the shared libstdc++ object if\n+# the rules automake generates would be used.  We cannot allow CXX to\n+# be used in libtool since this would add -lstdc++ to the link line\n+# which of course is problematic at this point.\n+CXXLINK = $(LIBTOOL) --tag CC --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n-# We have a problem when building the shared libstdc++ object if the\n-# rules automake generates would be used.  We cannot allow CXX to be used\n-# in libtool since this would add -lstdc++ to the link line which of\n-# course is impossible.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "d7ebb237f9b45de49ea38275c051a491ee9114a1", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=a9117427517bd43efbde79ff65637f6560e36707", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.40 2000/10/12 12:02:10 bkoz Exp $\n+## $Id: Makefile.am,v 1.41 2000/10/15 08:45:33 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -300,36 +300,42 @@ tmp-libstdc++.INC: Makefile\n \n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n-# modified in a per-library or per-sub-library way.\n-# Need to manually set this option because CONFIG_CXXFLAGS has to be at\n-# the end of the compile line so that -O2 can be overridden as the\n-# occasion call for it. (ie, --enable-debug)\n+# modified in a per-library or per-sub-library way.  Need to manually\n+# set this option because CONFIG_CXXFLAGS has to be after\n+# OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n+# as the occasion call for it. (ie, --enable-debug)\n AM_CXXFLAGS = \\\n \t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n \t$(WARN_CXXFLAGS) \\\n \t$(OPTIMIZE_CXXFLAGS) \\\n \t$(CONFIG_CXXFLAGS) \n \n-# Need to explicitly set this so that AM_CXXFLAGS is last. In\n-# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n-# an include diretory, which screws up shadow headers. (That way,\n-# things like -O2 passed down from the toplevel can be overridden by\n-# --enable-debug.)\n-LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n-\n-# We have a problem when building the shared libstdc++ object if the\n-# rules automake generates would be used.  We cannot allow CXX to be used\n-# in libtool since this would add -lstdc++ to the link line which of\n-# course is impossible.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n-\n-\n-\n-\n-\n-\n-\n-\n \n+# libstdc++ libtool notes\n+\n+# 1) Need to explicitly set LTCXXCOMPILE so that AM_CXXFLAGS is\n+# last. (That way, things like -O2 passed down from the toplevel can\n+# be overridden by --enable-debug.)\n+\n+# 2) In general, libtool expects an argument such as `--tag=CXX' when\n+# using the C++ compiler, because that will enable the settings\n+# detected when C++ support was being configured.  However, when no\n+# such flag is given in the command line, libtool attempts to figure\n+# it out by matching the compiler name in each configuration section\n+# against a prefix of the command line.  The problem is that, if the\n+# compiler name and its initial flags stored in the libtool\n+# configuration file don't match those in the command line, libtool\n+# can't decide which configuration to use, and it gives up.  The\n+# correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n+# CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n+# attempt to infer which configuration to use\n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n+# 3) We have a problem when building the shared libstdc++ object if\n+# the rules automake generates would be used.  We cannot allow CXX to\n+# be used in libtool since this would add -lstdc++ to the link line\n+# which of course is problematic at this point.\n+CXXLINK = $(LIBTOOL) --tag CC --mode=link \"$(CC)\" \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@"}, {"sha": "c2d71aca9879932799243de19e3d3f85e94f79d4", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9117427517bd43efbde79ff65637f6560e36707/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=a9117427517bd43efbde79ff65637f6560e36707", "patch": "@@ -73,7 +73,6 @@ DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n-GCC_OBJDIR = @GCC_OBJDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n GLIBCPP_CFLAGS = @GLIBCPP_CFLAGS@\n@@ -189,26 +188,40 @@ libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = $(prefix)/include/g++-@libstdcxx_interface@\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n-# modified in a per-library or per-sub-library way.\n-# Need to manually set this option because CONFIG_CXXFLAGS has to be at\n-# the end of the compile line so that -O2 can be overridden as the\n-# occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n-\n-\n-# Need to explicitly set this so that AM_CXXFLAGS is last. In\n-# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n-# an include diretory, which screws up shadow headers. (That way,\n-# things like -O2 passed down from the toplevel can be overridden by\n-# --enable-debug.)\n-LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n-\n-\n-# We have a problem when building the shared libstdc++ object if the\n-# rules automake generates would be used.  We cannot allow CXX to be used\n-# in libtool since this would add -lstdc++ to the link line which of\n-# course is impossible.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+# modified in a per-library or per-sub-library way.  Need to manually\n+# set this option because CONFIG_CXXFLAGS has to be after\n+# OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n+# as the occasion call for it. (ie, --enable-debug)\n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+\n+\n+# libstdc++ libtool notes\n+\n+# 1) Need to explicitly set LTCXXCOMPILE so that AM_CXXFLAGS is\n+# last. (That way, things like -O2 passed down from the toplevel can\n+# be overridden by --enable-debug.)\n+\n+# 2) In general, libtool expects an argument such as `--tag=CXX' when\n+# using the C++ compiler, because that will enable the settings\n+# detected when C++ support was being configured.  However, when no\n+# such flag is given in the command line, libtool attempts to figure\n+# it out by matching the compiler name in each configuration section\n+# against a prefix of the command line.  The problem is that, if the\n+# compiler name and its initial flags stored in the libtool\n+# configuration file don't match those in the command line, libtool\n+# can't decide which configuration to use, and it gives up.  The\n+# correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n+# CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n+# attempt to infer which configuration to use\n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+\n+# 3) We have a problem when building the shared libstdc++ object if\n+# the rules automake generates would be used.  We cannot allow CXX to\n+# be used in libtool since this would add -lstdc++ to the link line\n+# which of course is problematic at this point.\n+CXXLINK = $(LIBTOOL) --tag CC --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}]}