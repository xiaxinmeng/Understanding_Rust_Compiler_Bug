{"sha": "93554f3bce5bd42d8671559a774818767979cdae", "node_id": "C_kwDOANBUbNoAKDkzNTU0ZjNiY2U1YmQ0MmQ4NjcxNTU5YTc3NDgxODc2Nzk3OWNkYWU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-13T21:04:57Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-14T12:32:49Z"}, "message": "Add initial constant evaluation to blocks\n\nBlockExpressions are usually evaluated by create a temporary variable to\nhold the result of the tail expression in the correctly. Const expressions\ndo not have a context of a block so we must fold the value to store it\ncorrectly without the need for temporary variables or a stack. To do this\nwe can leverage the fact that our constexpr code can fold simple CallExpr's\nso in this patch we actually generate an implicit artifical function for\nthe block but do not add it to the translation unit and we then generate\nan artifical CallExpr and pass it to the constant folder system, and then\nassign the ConstDecl to this folded value thus reusing all of our existing\nBlockExpression code instead of a seperate system.\n\nFixes #799", "tree": {"sha": "03b1cac2b3442af423cd565b0168682e6d4541b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03b1cac2b3442af423cd565b0168682e6d4541b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93554f3bce5bd42d8671559a774818767979cdae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93554f3bce5bd42d8671559a774818767979cdae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93554f3bce5bd42d8671559a774818767979cdae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93554f3bce5bd42d8671559a774818767979cdae/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9ffd4308d70da55b4c698b07b484063bcda0b01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ffd4308d70da55b4c698b07b484063bcda0b01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ffd4308d70da55b4c698b07b484063bcda0b01"}], "stats": {"total": 121, "additions": 102, "deletions": 19}, "files": [{"sha": "e96317605df3f940d0635b029e0005a03ff7de05", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93554f3bce5bd42d8671559a774818767979cdae/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93554f3bce5bd42d8671559a774818767979cdae/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=93554f3bce5bd42d8671559a774818767979cdae", "patch": "@@ -37,8 +37,7 @@ class HIRCompileBase : public HIR::HIRFullVisitorBase\n \n   Context *get_context () { return ctx; }\n \n-  void compile_function_body (tree fndecl,\n-\t\t\t      std::unique_ptr<HIR::BlockExpr> &function_body,\n+  void compile_function_body (tree fndecl, HIR::BlockExpr &function_body,\n \t\t\t      bool has_return_type);\n \n   bool compile_locals_for_block (Resolver::Rib &rib, tree fndecl,"}, {"sha": "5f4d87920e85d58933c91fb72cea64c49ab69885", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93554f3bce5bd42d8671559a774818767979cdae/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93554f3bce5bd42d8671559a774818767979cdae/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=93554f3bce5bd42d8671559a774818767979cdae", "patch": "@@ -288,7 +288,7 @@ class CompileInherentImplItem : public HIRCompileBase\n \n     ctx->push_fn (fndecl, return_address);\n \n-    compile_function_body (fndecl, function.get_definition (),\n+    compile_function_body (fndecl, *function.get_definition ().get (),\n \t\t\t   function.has_function_return_type ());\n \n     ctx->pop_block ();\n@@ -548,7 +548,7 @@ class CompileTraitItem : public HIRCompileBase\n \n     ctx->push_fn (fndecl, return_address);\n \n-    compile_function_body (fndecl, func.get_block_expr (),\n+    compile_function_body (fndecl, *func.get_block_expr ().get (),\n \t\t\t   function.has_return_type ());\n \n     ctx->pop_block ();"}, {"sha": "208a2a5da286fdf397d70505c16e2cbb870b4c65", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 76, "deletions": 8, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93554f3bce5bd42d8671559a774818767979cdae/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93554f3bce5bd42d8671559a774818767979cdae/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=93554f3bce5bd42d8671559a774818767979cdae", "patch": "@@ -91,25 +91,93 @@ class CompileItem : public HIRCompileBase\n \n   void visit (HIR::ConstantItem &constant) override\n   {\n+    // resolve the type\n     TyTy::BaseType *resolved_type = nullptr;\n     bool ok\n       = ctx->get_tyctx ()->lookup_type (constant.get_mappings ().get_hirid (),\n \t\t\t\t\t&resolved_type);\n     rust_assert (ok);\n \n-    tree type = TyTyResolveCompile::compile (ctx, resolved_type);\n-    tree const_type = build_qualified_type (type, TYPE_QUAL_CONST);\n-\n-    tree value = CompileExpr::Compile (constant.get_expr (), ctx);\n-    tree folded_expr = ConstCtx::fold (value);\n-\n+    // canonical path\n     const Resolver::CanonicalPath *canonical_path = nullptr;\n     ok = ctx->get_mappings ()->lookup_canonical_path (\n       constant.get_mappings ().get_crate_num (),\n       constant.get_mappings ().get_nodeid (), &canonical_path);\n     rust_assert (ok);\n-\n     std::string ident = canonical_path->get ();\n+\n+    // types\n+    tree type = TyTyResolveCompile::compile (ctx, resolved_type);\n+    tree const_type = build_qualified_type (type, TYPE_QUAL_CONST);\n+\n+    HIR::Expr *const_value_expr = constant.get_expr ();\n+    bool is_block_expr\n+      = const_value_expr->get_expression_type () == HIR::Expr::ExprType::Block;\n+\n+    // compile the expression\n+    tree folded_expr = error_mark_node;\n+    if (!is_block_expr)\n+      {\n+\ttree value = CompileExpr::Compile (constant.get_expr (), ctx);\n+\tfolded_expr = ConstCtx::fold (value);\n+      }\n+    else\n+      {\n+\t// in order to compile a block expr we want to reuse as much existing\n+\t// machineary that we already have. This means the best approach is to\n+\t// make a _fake_ function with a block so it can hold onto temps then\n+\t// use our constexpr code to fold it completely or error_mark_node\n+\tBackend::typed_identifier receiver;\n+\ttree compiled_fn_type = ctx->get_backend ()->function_type (\n+\t  receiver, {},\n+\t  {Backend::typed_identifier (\"_\", const_type, constant.get_locus ())},\n+\t  NULL, constant.get_locus ());\n+\n+\ttree fndecl\n+\t  = ctx->get_backend ()->function (compiled_fn_type, ident, \"\",\n+\t\t\t\t\t   Backend::function_read_only,\n+\t\t\t\t\t   constant.get_locus ());\n+\n+\ttree enclosing_scope = NULL_TREE;\n+\tHIR::BlockExpr *function_body\n+\t  = static_cast<HIR::BlockExpr *> (constant.get_expr ());\n+\tLocation start_location = function_body->get_locus ();\n+\tLocation end_location = function_body->get_closing_locus ();\n+\n+\ttree code_block\n+\t  = ctx->get_backend ()->block (fndecl, enclosing_scope, {},\n+\t\t\t\t\tstart_location, end_location);\n+\tctx->push_block (code_block);\n+\n+\tbool address_is_taken = false;\n+\ttree ret_var_stmt = NULL_TREE;\n+\tBvariable *return_address = ctx->get_backend ()->temporary_variable (\n+\t  fndecl, code_block, const_type, NULL, address_is_taken,\n+\t  constant.get_locus (), &ret_var_stmt);\n+\n+\tctx->add_statement (ret_var_stmt);\n+\tctx->push_fn (fndecl, return_address);\n+\n+\tcompile_function_body (fndecl, *function_body, true);\n+\n+\tctx->pop_block ();\n+\n+\tauto body = ctx->get_backend ()->block_statement (code_block);\n+\tif (!ctx->get_backend ()->function_set_body (fndecl, body))\n+\t  {\n+\t    rust_error_at (constant.get_locus (),\n+\t\t\t   \"failed to set body to constant function\");\n+\t    return;\n+\t  }\n+\n+\tctx->pop_fn ();\n+\n+\t// lets fold it into a call expr\n+\ttree call = build_call_array_loc (constant.get_locus ().gcc_location (),\n+\t\t\t\t\t  const_type, fndecl, 0, NULL);\n+\tfolded_expr = ConstCtx::fold (call);\n+      }\n+\n     tree const_expr\n       = ctx->get_backend ()->named_constant_expression (const_type, ident,\n \t\t\t\t\t\t\tfolded_expr,\n@@ -297,7 +365,7 @@ class CompileItem : public HIRCompileBase\n \n     ctx->push_fn (fndecl, return_address);\n \n-    compile_function_body (fndecl, function.get_definition (),\n+    compile_function_body (fndecl, *function.get_definition ().get (),\n \t\t\t   function.has_function_return_type ());\n \n     ctx->pop_block ();"}, {"sha": "7208ed009f6585b5eae1bbcbb43c90b57ff47482", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93554f3bce5bd42d8671559a774818767979cdae/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93554f3bce5bd42d8671559a774818767979cdae/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=93554f3bce5bd42d8671559a774818767979cdae", "patch": "@@ -207,11 +207,11 @@ CompileStructExprField::visit (HIR::StructExprFieldIdentifier &field)\n // Shared methods in compilation\n \n void\n-HIRCompileBase::compile_function_body (\n-  tree fndecl, std::unique_ptr<HIR::BlockExpr> &function_body,\n-  bool has_return_type)\n+HIRCompileBase::compile_function_body (tree fndecl,\n+\t\t\t\t       HIR::BlockExpr &function_body,\n+\t\t\t\t       bool has_return_type)\n {\n-  for (auto &s : function_body->get_statements ())\n+  for (auto &s : function_body.get_statements ())\n     {\n       auto compiled_expr = CompileStmt::Compile (s.get (), ctx);\n       if (compiled_expr != nullptr)\n@@ -222,12 +222,12 @@ HIRCompileBase::compile_function_body (\n \t}\n     }\n \n-  if (function_body->has_expr ())\n+  if (function_body.has_expr ())\n     {\n       // the previous passes will ensure this is a valid return\n       // or a valid trailing expression\n       tree compiled_expr\n-\t= CompileExpr::Compile (function_body->expr.get (), ctx);\n+\t= CompileExpr::Compile (function_body.expr.get (), ctx);\n \n       if (compiled_expr != nullptr)\n \t{\n@@ -238,7 +238,7 @@ HIRCompileBase::compile_function_body (\n \n \t      auto ret = ctx->get_backend ()->return_statement (\n \t\tfndecl, retstmts,\n-\t\tfunction_body->get_final_expr ()->get_locus ());\n+\t\tfunction_body.get_final_expr ()->get_locus ());\n \t      ctx->add_statement (ret);\n \t    }\n \t  else"}, {"sha": "c525648fe0bc6e2964c802cf5212bed975ba89c1", "filename": "gcc/testsuite/rust/execute/torture/const_fold2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93554f3bce5bd42d8671559a774818767979cdae/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fconst_fold2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93554f3bce5bd42d8671559a774818767979cdae/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fconst_fold2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fconst_fold2.rs?ref=93554f3bce5bd42d8671559a774818767979cdae", "patch": "@@ -0,0 +1,16 @@\n+// { dg-additional-options \"-w\" }\n+const A: i32 = 1;\n+const B: i32 = { A + 2 };\n+\n+const fn test() -> i32 {\n+    B\n+}\n+\n+const C: i32 = {\n+    const a: i32 = 4;\n+    test() + a\n+};\n+\n+fn main() -> i32 {\n+    C - 7\n+}"}]}