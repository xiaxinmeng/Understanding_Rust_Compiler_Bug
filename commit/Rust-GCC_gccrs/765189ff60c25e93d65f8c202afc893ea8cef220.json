{"sha": "765189ff60c25e93d65f8c202afc893ea8cef220", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY1MTg5ZmY2MGMyNWU5M2Q2NWY4YzIwMmFmYzg5M2VhOGNlZjIyMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-05-09T04:50:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-05-09T04:50:15Z"}, "message": "c.opt (Wc++11-compat): Make primary.\n\ngcc/c-family/\n\t* c.opt (Wc++11-compat): Make primary.  Rename var warn_cxx11_compat.\n\t* c-opts.c: Adjust.\ngcc/cp/\n\t* cp-gimplify.c, parser.c: Adjust.\n\nFrom-SVN: r222962", "tree": {"sha": "b59d2738088b3f645d400b99f7c6f12dfeff9a7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b59d2738088b3f645d400b99f7c6f12dfeff9a7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/765189ff60c25e93d65f8c202afc893ea8cef220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765189ff60c25e93d65f8c202afc893ea8cef220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765189ff60c25e93d65f8c202afc893ea8cef220", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765189ff60c25e93d65f8c202afc893ea8cef220/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe191308ddc9bb7095d01bcd11dcaf1f38c84bab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe191308ddc9bb7095d01bcd11dcaf1f38c84bab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe191308ddc9bb7095d01bcd11dcaf1f38c84bab"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "1019aeae740b6b4da61f457768ced0a3cd359206", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765189ff60c25e93d65f8c202afc893ea8cef220/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765189ff60c25e93d65f8c202afc893ea8cef220/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=765189ff60c25e93d65f8c202afc893ea8cef220", "patch": "@@ -1,5 +1,8 @@\n 2015-05-08  Jason Merrill  <jason@redhat.com>\n \n+\t* c.opt (Wc++11-compat): Make primary.  Rename var warn_cxx11_compat.\n+\t* c-opts.c: Adjust.\n+\n \t* c.opt (Wc++0x-compat): Also set cpp_warn_cxx11_compat.\n \n 2015-05-08  Marek Polacek  <polacek@redhat.com>"}, {"sha": "8b1767414b98933f9929a80753b1b75df31d918d", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765189ff60c25e93d65f8c202afc893ea8cef220/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765189ff60c25e93d65f8c202afc893ea8cef220/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=765189ff60c25e93d65f8c202afc893ea8cef220", "patch": "@@ -900,7 +900,7 @@ c_common_post_options (const char **pfilename)\n     {\n       /* If we're allowing C++0x constructs, don't warn about C++98\n \t identifiers which are keywords in C++0x.  */\n-      warn_cxx0x_compat = 0;\n+      warn_cxx11_compat = 0;\n \n       if (warn_narrowing == -1)\n \twarn_narrowing = 1;"}, {"sha": "e244a6db06ec8c6a9c71cfcb3f8f33c0f6d7e72f", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765189ff60c25e93d65f8c202afc893ea8cef220/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765189ff60c25e93d65f8c202afc893ea8cef220/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=765189ff60c25e93d65f8c202afc893ea8cef220", "patch": "@@ -312,11 +312,10 @@ C ObjC Var(warn_cxx_compat) CPP(warn_cxx_operator_names) CppReason(CPP_W_CXX_OPE\n Warn about C constructs that are not in the common subset of C and C++\n \n Wc++0x-compat\n-C++ ObjC++ Var(warn_cxx0x_compat) Warning LangEnabledBy(C++ ObjC++,Wall) Init(0) CPP(cpp_warn_cxx11_compat) CppReason(CPP_W_CXX11_COMPAT)\n-Deprecated in favor of -Wc++11-compat\n+C++ ObjC++ Warning Alias(Wc++11-compat) Undocumented\n \n Wc++11-compat\n-C++ ObjC++ Warning Alias(Wc++0x-compat)\n+C++ ObjC++ Var(warn_cxx11_compat) Warning LangEnabledBy(C++ ObjC++,Wall) Init(0) CPP(cpp_warn_cxx11_compat) CppReason(CPP_W_CXX11_COMPAT)\n Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 2011\n \n Wc++14-compat\n@@ -627,7 +626,7 @@ C ObjC C++ ObjC++ CPP(warn_multichar) CppReason(CPP_W_MULTICHAR) Var(cpp_warn_mu\n Warn about use of multi-character character constants\n \n Wnarrowing\n-C ObjC C++ ObjC++ Warning Var(warn_narrowing) Init(-1) LangEnabledBy(C++ ObjC++,Wall || Wc++0x-compat)\n+C ObjC C++ ObjC++ Warning Var(warn_narrowing) Init(-1) LangEnabledBy(C++ ObjC++,Wall || Wc++11-compat)\n Warn about narrowing conversions within { } that are ill-formed in C++11\n \n Wnested-externs"}, {"sha": "e776b00f5d82dc3d54a58be900f09012af602f50", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765189ff60c25e93d65f8c202afc893ea8cef220/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765189ff60c25e93d65f8c202afc893ea8cef220/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=765189ff60c25e93d65f8c202afc893ea8cef220", "patch": "@@ -1,3 +1,8 @@\n+2015-05-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-gimplify.c, parser.c: Adjust to -Wc++11-compat replacing\n+\t-Wc++0x-compat.\n+\n 2015-05-08  Jason Merrill  <jason@redhat.com>\n \n \t* decl2.c (mangling_aliases): New variable."}, {"sha": "d5a64fc667f712e1e2cb50794fa60e9d17f28161", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765189ff60c25e93d65f8c202afc893ea8cef220/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765189ff60c25e93d65f8c202afc893ea8cef220/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=765189ff60c25e93d65f8c202afc893ea8cef220", "patch": "@@ -1231,13 +1231,13 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n \t}\n       else\n \t{\n-\t  if (warn_cxx0x_compat && cxx_dialect < cxx11\n+\t  if (warn_cxx11_compat && cxx_dialect < cxx11\n \t      && DECL_DESTRUCTOR_P (current_function_decl)\n \t      && (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (current_function_decl))\n \t\t  == NULL_TREE)\n \t      && (get_defaulted_eh_spec (current_function_decl)\n \t\t  == empty_except_spec))\n-\t    warning_at (loc, OPT_Wc__0x_compat,\n+\t    warning_at (loc, OPT_Wc__11_compat,\n \t\t\t\"in C++11 this throw will terminate because \"\n \t\t\t\"destructors default to noexcept\");\n \t}"}, {"sha": "6f746a1d3624c33dabb9989732fad0d61bef8451", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765189ff60c25e93d65f8c202afc893ea8cef220/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765189ff60c25e93d65f8c202afc893ea8cef220/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=765189ff60c25e93d65f8c202afc893ea8cef220", "patch": "@@ -802,13 +802,13 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer, cp_token *token)\n \t}\n       else\n \t{\n-          if (warn_cxx0x_compat\n+          if (warn_cxx11_compat\n               && C_RID_CODE (token->u.value) >= RID_FIRST_CXX0X\n               && C_RID_CODE (token->u.value) <= RID_LAST_CXX0X)\n             {\n               /* Warn about the C++0x keyword (but still treat it as\n                  an identifier).  */\n-              warning (OPT_Wc__0x_compat, \n+              warning (OPT_Wc__11_compat, \n                        \"identifier %qE is a keyword in C++11\",\n                        token->u.value);\n \n@@ -8162,11 +8162,11 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n       /* Get an operator token.  */\n       token = cp_lexer_peek_token (parser->lexer);\n \n-      if (warn_cxx0x_compat\n+      if (warn_cxx11_compat\n           && token->type == CPP_RSHIFT\n           && !parser->greater_than_is_operator_p)\n         {\n-          if (warning_at (token->location, OPT_Wc__0x_compat,\n+          if (warning_at (token->location, OPT_Wc__11_compat,\n \t\t\t  \"%<>>%> operator is treated\"\n \t\t\t  \" as two right angle brackets in C++11\"))\n \t    inform (token->location,\n@@ -11873,7 +11873,7 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \n               /* Complain about `auto' as a storage specifier, if\n                  we're complaining about C++0x compatibility.  */\n-              warning_at (token->location, OPT_Wc__0x_compat, \"%<auto%>\"\n+              warning_at (token->location, OPT_Wc__11_compat, \"%<auto%>\"\n \t\t\t  \" changes meaning in C++11; please remove it\");\n \n               /* Set the storage class anyway.  */"}]}