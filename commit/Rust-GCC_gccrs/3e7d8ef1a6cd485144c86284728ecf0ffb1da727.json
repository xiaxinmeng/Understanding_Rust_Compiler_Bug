{"sha": "3e7d8ef1a6cd485144c86284728ecf0ffb1da727", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U3ZDhlZjFhNmNkNDg1MTQ0Yzg2Mjg0NzI4ZWNmMGZmYjFkYTcyNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-12-12T15:34:09Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-12-12T15:34:09Z"}, "message": "gthr-single.h (__gthread_active_p): Add prototype arguments.\n\n\t* gthr-single.h (__gthread_active_p): Add prototype arguments.\n\n\t* libgcc2.c (__udivmoddi4): Remove unnecessary decls.\n\t(__dummy, __builtin_saveregs, __bb_exit_trace_func, __bb_init_prg,\n\t__bb_trace_func, __bb_trace_func_ret, __bb_trace_ret,\n\tfunction_ptr, getpagesize, __enable_execute_stack,\n\t__enable_execute_stack, __clear_insn_cache,\n\t__enable_execute_stack, __do_global_dtors, __do_global_ctors,\n\t_cleanup, _exit, __default_terminate, __terminate_func,\n\t__terminate, __empty, __throw, new_eh_context,\n\teh_context_initialize, eh_context_static, eh_context_specific,\n\tget_eh_context, __get_eh_context, __get_eh_info,\n\tinit_reg_size_table, eh_threads_initialize,\n\t__get_dynamic_handler_chain, __sjthrow, __sjpopnthrow,\n\t__unwinding_cleanup, throw_helper, __throw, __rethrow,\n\t__pure_virtual): Add prototype arguments.\n\t(__bb_exit_func): Cast a sizeof to long when comparing against one.\n\tCast a signed value to unsigned long when comparing against one.\n\t(new_eh_context): Wrap in _GTHREADS macro.\n\t(__sjthrow, __sjpopnthrow): Initialize variable `cleanup' at\n\tdeclaration.\n\t(in_reg_window): Mark parameters with __attribute__ ((__unused__)).\n\t(throw_helper): Initialize variables `handler_p' and `pc_p'.\n\nFrom-SVN: r30872", "tree": {"sha": "66db03115727a06a537c0b6e45b1435eda978747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66db03115727a06a537c0b6e45b1435eda978747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e7d8ef1a6cd485144c86284728ecf0ffb1da727", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7d8ef1a6cd485144c86284728ecf0ffb1da727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e7d8ef1a6cd485144c86284728ecf0ffb1da727", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7d8ef1a6cd485144c86284728ecf0ffb1da727/comments", "author": null, "committer": null, "parents": [{"sha": "5249faded4335d7d53112df497be43d4292f818e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5249faded4335d7d53112df497be43d4292f818e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5249faded4335d7d53112df497be43d4292f818e"}], "stats": {"total": 156, "additions": 87, "deletions": 69}, "files": [{"sha": "82e9630f451d7ac3c5b627b9c8699a3d9f64ab9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7d8ef1a6cd485144c86284728ecf0ffb1da727/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7d8ef1a6cd485144c86284728ecf0ffb1da727/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e7d8ef1a6cd485144c86284728ecf0ffb1da727", "patch": "@@ -1,3 +1,29 @@\n+1999-12-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gthr-single.h (__gthread_active_p): Add prototype arguments.\n+\n+\t* libgcc2.c (__udivmoddi4): Remove unnecessary decls.\n+\t(__dummy, __builtin_saveregs, __bb_exit_trace_func, __bb_init_prg,\n+\t__bb_trace_func, __bb_trace_func_ret, __bb_trace_ret,\n+\tfunction_ptr, getpagesize, __enable_execute_stack,\n+\t__enable_execute_stack, __clear_insn_cache,\n+\t__enable_execute_stack, __do_global_dtors, __do_global_ctors,\n+\t_cleanup, _exit, __default_terminate, __terminate_func,\n+\t__terminate, __empty, __throw, new_eh_context,\n+\teh_context_initialize, eh_context_static, eh_context_specific,\n+\tget_eh_context, __get_eh_context, __get_eh_info,\n+\tinit_reg_size_table, eh_threads_initialize,\n+\t__get_dynamic_handler_chain, __sjthrow, __sjpopnthrow,\n+\t__unwinding_cleanup, throw_helper, __throw, __rethrow,\n+\t__pure_virtual): Add prototype arguments.\t\n+\t(__bb_exit_func): Cast a sizeof to long when comparing against one.\n+\tCast a signed value to unsigned long when comparing against one.\n+\t(new_eh_context): Wrap in _GTHREADS macro.\n+\t(__sjthrow, __sjpopnthrow): Initialize variable `cleanup' at\n+\tdeclaration.\n+\t(in_reg_window): Mark parameters with __attribute__ ((__unused__)).\n+\t(throw_helper): Initialize variables `handler_p' and `pc_p'.\n+\t\n 1999-12-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* combine.c (record_promoted_value): Remove unused variable"}, {"sha": "69c34122294167ce82596f3a906f7c6c4d983f42", "filename": "gcc/gthr-single.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7d8ef1a6cd485144c86284728ecf0ffb1da727/gcc%2Fgthr-single.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7d8ef1a6cd485144c86284728ecf0ffb1da727/gcc%2Fgthr-single.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-single.h?ref=3e7d8ef1a6cd485144c86284728ecf0ffb1da727", "patch": "@@ -36,7 +36,7 @@ typedef int __gthread_mutex_t;\n #define __GTHREAD_MUTEX_INIT 0\n \n static inline int\n-__gthread_active_p ()\n+__gthread_active_p (void)\n {\n   return 0;\n }"}, {"sha": "37534fd46ceff931862fc2f02d813d77817d9820", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 60, "deletions": 68, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7d8ef1a6cd485144c86284728ecf0ffb1da727/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7d8ef1a6cd485144c86284728ecf0ffb1da727/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=3e7d8ef1a6cd485144c86284728ecf0ffb1da727", "patch": "@@ -675,8 +675,6 @@ __udivmoddi4 (UDItype n, UDItype d, UDItype *rp)\n #endif\n \n #ifdef L_divdi3\n-UDItype __udivmoddi4 ();\n-\n DItype\n __divdi3 (DItype u, DItype v)\n {\n@@ -703,7 +701,6 @@ __divdi3 (DItype u, DItype v)\n #endif\n \n #ifdef L_moddi3\n-UDItype __udivmoddi4 ();\n DItype\n __moddi3 (DItype u, DItype v)\n {\n@@ -729,7 +726,6 @@ __moddi3 (DItype u, DItype v)\n #endif\n \n #ifdef L_umoddi3\n-UDItype __udivmoddi4 ();\n UDItype\n __umoddi3 (UDItype u, UDItype v)\n {\n@@ -742,7 +738,6 @@ __umoddi3 (UDItype u, UDItype v)\n #endif\n \n #ifdef L_udivdi3\n-UDItype __udivmoddi4 ();\n UDItype\n __udivdi3 (UDItype n, UDItype d)\n {\n@@ -1193,7 +1188,7 @@ __gcc_bcmp (unsigned char *s1, unsigned char *s2, size_t size)\n \f\f\n #ifdef L__dummy\n void\n-__dummy () {}\n+__dummy (void) {}\n #endif\n \n #ifdef L_varargs\n@@ -1409,7 +1404,7 @@ asm (\"___builtin_saveregs:\");\n #else /* not __mips__, etc.  */\n \n void *\n-__builtin_saveregs ()\n+__builtin_saveregs (void)\n {\n   abort ();\n }\n@@ -1629,7 +1624,7 @@ __bb_exit_func (void)\n       for (ptr = bb_head; ptr != (struct bb *) 0; ptr = ptr->next)\n \t{\n \t  int i;\n-\t  int func_p\t= (ptr->nwords >= sizeof (struct bb)\n+\t  int func_p\t= (ptr->nwords >= (long) sizeof (struct bb)\n \t\t\t   && ptr->nwords <= 1000\n \t\t\t   && ptr->functions);\n \t  int line_p\t= (func_p && ptr->line_nums);\n@@ -1658,7 +1653,7 @@ __bb_exit_func (void)\n \t      if (cnt_max < ptr->counts[i])\n \t\tcnt_max = ptr->counts[i];\n \n-\t      if (addr_p && addr_max < ptr->addresses[i])\n+\t      if (addr_p && (unsigned long) addr_max < ptr->addresses[i])\n \t\taddr_max = ptr->addresses[i];\n \n \t      if (line_p && line_max < ptr->line_nums[i])\n@@ -1898,7 +1893,7 @@ gclose (FILE *f)\n /* Called once per program.  */\n \n static void\n-__bb_exit_trace_func ()\n+__bb_exit_trace_func (void)\n {\n   FILE *file = fopen (\"bb.out\", \"a\");\n   struct bb_func *f;\n@@ -2093,7 +2088,7 @@ found:        ;\n /* Called once per program.  */\n \n static void\n-__bb_init_prg ()\n+__bb_init_prg (void)\n {\n   FILE *file;\n   char buf[BBINBUFSIZE];\n@@ -2199,7 +2194,7 @@ __bb_init_prg ()\n /* Called upon entering a basic block.  */\n \n void\n-__bb_trace_func ()\n+__bb_trace_func (void)\n {\n   struct bb_edge *bucket;\n \n@@ -2272,7 +2267,7 @@ __bb_trace_func ()\n /* Called when returning from a function and `__bb_showret__' is set.  */\n \n static void\n-__bb_trace_func_ret ()\n+__bb_trace_func_ret (void)\n {\n   struct bb_edge *bucket;\n \n@@ -2370,7 +2365,7 @@ __bb_init_file (struct bb *blocks)\n /* Called when exiting from a function.  */\n \n void\n-__bb_trace_ret ()\n+__bb_trace_ret (void)\n {\n \n   MACHINE_STATE_SAVE(\"2\")\n@@ -2492,7 +2487,7 @@ __clear_cache (char *beg __attribute__((__unused__)),\n   int offset;\n   void *start_addr\n   void *end_addr;\n-  typedef (*function_ptr) ();\n+  typedef (*function_ptr) (void);\n \n #if (INSN_CACHE_SIZE / INSN_CACHE_LINE_WIDTH) < 16\n   /* It's cheaper to clear the whole cache.\n@@ -2595,7 +2590,8 @@ __clear_cache (char *beg __attribute__((__unused__)),\n \n #if defined(WINNT) && ! defined(__CYGWIN__) && ! defined (_UWIN)\n \n-long getpagesize()\n+long\n+getpagesize (void)\n {\n #ifdef _ALPHA_\n   return 8192;\n@@ -2684,7 +2680,7 @@ __enable_execute_stack (char *addr)\n #include <machine/machparam.h>\n \n void\n-__enable_execute_stack ()\n+__enable_execute_stack (void)\n {\n   int fp;\n   static unsigned lowest = USRSTACK;\n@@ -2711,7 +2707,7 @@ __enable_execute_stack ()\n #include <sys/m88kbcs.h>\n \n void\n-__enable_execute_stack ()\n+__enable_execute_stack (void)\n {\n   int save_errno;\n   static unsigned long lowest = USRSTACK;\n@@ -2761,7 +2757,7 @@ noerror:\\n\\\n    This is called from FINALIZE_TRAMPOLINE in mot3300.h.  */\n \n void\n-__clear_insn_cache ()\n+__clear_insn_cache (void)\n {\n #ifdef MCT_TEXT\n   int save_errno;\n@@ -2792,7 +2788,7 @@ __clear_insn_cache ()\n    mremap promises to clear the i-cache.  */\n \n void\n-__enable_execute_stack ()\n+__enable_execute_stack (void)\n {\n   int fp;\n   if (mprotect (((unsigned int)&fp/PAGSIZ)*PAGSIZ, PAGSIZ,\n@@ -2862,7 +2858,7 @@ extern unsigned char __EH_FRAME_BEGIN__[];\n /* Run all the global destructors on exit from the program.  */\n \n void\n-__do_global_dtors ()\n+__do_global_dtors (void)\n {\n #ifdef DO_GLOBAL_DTORS_BODY\n   DO_GLOBAL_DTORS_BODY;\n@@ -2891,7 +2887,7 @@ __do_global_dtors ()\n /* Run all the global constructors on entry to the program.  */\n \n void\n-__do_global_ctors ()\n+__do_global_ctors (void)\n {\n #ifdef EH_FRAME_SECTION\n   {\n@@ -2995,8 +2991,8 @@ atexit (func_ptr func)\n   return (0);\n }\n \n-extern void _cleanup ();\n-extern void _exit () __attribute__ ((noreturn));\n+extern void _cleanup (void);\n+extern void _exit (int) __attribute__ ((__noreturn__));\n \n void \n exit (int status)\n@@ -3042,15 +3038,16 @@ atexit (func_ptr func)\n extern void __default_terminate (void) __attribute__ ((__noreturn__));\n \n void\n-__default_terminate ()\n+__default_terminate (void)\n {\n   abort ();\n }\n \n-void (*__terminate_func)() = __default_terminate;\n+void (*__terminate_func)(void) __attribute__ ((__noreturn__)) =\n+  __default_terminate;\n \n void\n-__terminate ()\n+__terminate (void)\n {\n   (*__terminate_func)();\n }\n@@ -3068,7 +3065,7 @@ __throw_type_match (void *catch_type, void *throw_type, void *obj)\n }\n \n void\n-__empty ()\n+__empty (void)\n {\n }\n \f\n@@ -3082,10 +3079,11 @@ __empty ()\n \n /* Allocate and return a new EH context structure. */\n \n-extern void __throw ();\n+extern void __throw (void);\n \n+#if __GTHREADS\n static void *\n-new_eh_context ()\n+new_eh_context (void)\n {\n   struct eh_full_context {\n     struct eh_context c;\n@@ -3109,7 +3107,6 @@ new_eh_context ()\n   return &ehfc->c;\n }\n \n-#if __GTHREADS\n static __gthread_key_t eh_context_key;\n \n /* Destructor for struct eh_context. */\n@@ -3124,27 +3121,27 @@ eh_context_free (void *ptr)\n \n /* Pointer to function to return EH context. */\n \n-static struct eh_context *eh_context_initialize ();\n-static struct eh_context *eh_context_static ();\n+static struct eh_context *eh_context_initialize (void);\n+static struct eh_context *eh_context_static (void);\n #if __GTHREADS\n-static struct eh_context *eh_context_specific ();\n+static struct eh_context *eh_context_specific (void);\n #endif\n \n-static struct eh_context *(*get_eh_context) () = &eh_context_initialize;\n+static struct eh_context *(*get_eh_context) (void) = &eh_context_initialize;\n \n /* Routine to get EH context.\n    This one will simply call the function pointer. */\n \n void *\n-__get_eh_context ()\n+__get_eh_context (void)\n {\n   return (void *) (*get_eh_context) ();\n }\n \n /* Get and set the language specific info pointer. */\n \n void **\n-__get_eh_info ()\n+__get_eh_info (void)\n {\n   struct eh_context *eh = (*get_eh_context) ();\n   return &eh->info;\n@@ -3155,7 +3152,7 @@ static int dwarf_reg_size_table_initialized = 0;\n static char dwarf_reg_size_table[FIRST_PSEUDO_REGISTER];\n \n static void\n-init_reg_size_table ()\n+init_reg_size_table (void)\n {\n   __builtin_init_dwarf_reg_size_table (dwarf_reg_size_table);\n   dwarf_reg_size_table_initialized = 1;\n@@ -3164,7 +3161,7 @@ init_reg_size_table ()\n \n #if __GTHREADS\n static void\n-eh_threads_initialize ()\n+eh_threads_initialize (void)\n {\n   /* Try to create the key.  If it fails, revert to static method,\n      otherwise start using thread specific EH contexts. */\n@@ -3180,7 +3177,7 @@ eh_threads_initialize ()\n    pointer to another routine. */\n \n static struct eh_context *\n-eh_context_initialize ()\n+eh_context_initialize (void)\n {\n #if __GTHREADS\n \n@@ -3220,7 +3217,7 @@ eh_context_initialize ()\n /* Return a static EH context. */\n \n static struct eh_context *\n-eh_context_static ()\n+eh_context_static (void)\n {\n   static struct eh_context eh;\n   static int initialized;\n@@ -3239,7 +3236,7 @@ eh_context_static ()\n /* Return a thread specific EH context. */\n \n static struct eh_context *\n-eh_context_specific ()\n+eh_context_specific (void)\n {\n   struct eh_context *eh;\n   eh = (struct eh_context *) __gthread_getspecific (eh_context_key);\n@@ -3268,7 +3265,7 @@ extern void longjmp (void *, int);\n    use for exception handling. */\n \n void ***\n-__get_dynamic_handler_chain ()\n+__get_dynamic_handler_chain (void)\n {\n   struct eh_context *eh = (*get_eh_context) ();\n   return &eh->dynamic_handler_chain;\n@@ -3285,18 +3282,15 @@ __get_dynamic_handler_chain ()\n extern void __sjthrow (void) __attribute__ ((__noreturn__));\n \n void\n-__sjthrow ()\n+__sjthrow (void)\n {\n   struct eh_context *eh = (*get_eh_context) ();\n   void ***dhc = &eh->dynamic_handler_chain;\n   void *jmpbuf;\n   void (*func)(void *, int);\n   void *arg;\n-  void ***cleanup;\n-\n-  /* The cleanup chain is one word into the buffer.  Get the cleanup\n-     chain.  */\n-  cleanup = (void***)&(*dhc)[1];\n+  /* The cleanup chain is one word into the buffer.  Get the cleanup chain. */\n+  void ***cleanup = (void***)&(*dhc)[1];\n \n   /* If there are any cleanups in the chain, run them now.  */\n   if (cleanup[0])\n@@ -3363,17 +3357,14 @@ __sjthrow ()\n extern void __sjpopnthrow (void) __attribute__ ((__noreturn__));\n \n void\n-__sjpopnthrow ()\n+__sjpopnthrow (void)\n {\n   struct eh_context *eh = (*get_eh_context) ();\n   void ***dhc = &eh->dynamic_handler_chain;\n   void (*func)(void *, int);\n   void *arg;\n-  void ***cleanup;\n-\n-  /* The cleanup chain is one word into the buffer.  Get the cleanup\n-     chain.  */\n-  cleanup = (void***)&(*dhc)[1];\n+  /* The cleanup chain is one word into the buffer.  Get the cleanup chain. */\n+  void ***cleanup = (void***)&(*dhc)[1];\n \n   /* If there are any cleanups in the chain, run them now.  */\n   if (cleanup[0])\n@@ -3622,7 +3613,12 @@ in_reg_window (int reg, frame_state *udata)\n #endif\n }\n #else\n-static inline int in_reg_window (int reg, frame_state *udata) { return 0; }\n+static inline int\n+in_reg_window (int reg __attribute__ ((__unused__)),\n+\t       frame_state *udata __attribute__ ((__unused__)))\n+{\n+  return 0;\n+}\n #endif /* INCOMING_REGNO */\n \n /* Get the address of register REG as saved in UDATA, where SUB_UDATA is a\n@@ -3718,7 +3714,7 @@ next_stack_level (void *pc, frame_state *udata, frame_state *caller_udata)\n \n /* Hook to call before __terminate if only cleanup handlers remain. */\n void \n-__unwinding_cleanup ()\n+__unwinding_cleanup (void)\n {\n }\n \n@@ -3736,19 +3732,16 @@ __unwinding_cleanup ()\n    OFFSET_P is where we return the SP adjustment offset.  */\n \n static void *\n-throw_helper (eh, pc, my_udata, offset_p)\n-     struct eh_context *eh;\n-     void *pc;\n-     frame_state *my_udata;\n-     long *offset_p;\n+throw_helper (struct eh_context *eh, void *pc, frame_state *my_udata,\n+\t      long *offset_p)\n {\n   frame_state ustruct2, *udata = &ustruct2;\n   frame_state ustruct;\n   frame_state *sub_udata = &ustruct;\n   void *saved_pc = pc;\n   void *handler;\n-  void *handler_p;\n-  void *pc_p;\n+  void *handler_p = 0;\n+  void *pc_p = 0;\n   frame_state saved_ustruct;\n   int new_eh_model;\n   int cleanup = 0;\n@@ -3919,7 +3912,7 @@ throw_helper (eh, pc, my_udata, offset_p)\n /*extern void __throw(void) __attribute__ ((__noreturn__));*/\n \n void\n-__throw ()\n+__throw (void)\n {\n   struct eh_context *eh = (*get_eh_context) ();\n   void *pc, *handler;\n@@ -3964,8 +3957,7 @@ __throw ()\n /*extern void __rethrow(void *) __attribute__ ((__noreturn__));*/\n \n void\n-__rethrow (index)\n-     void *index;\n+__rethrow (void *index)\n {\n   struct eh_context *eh = (*get_eh_context) ();\n   void *pc, *handler;\n@@ -4033,7 +4025,7 @@ __rethrow (index)\n extern void __terminate (void) __attribute__ ((__noreturn__));\n \n void\n-__pure_virtual ()\n+__pure_virtual (void)\n {\n #ifndef inhibit_libc\n   write (2, MESSAGE, sizeof (MESSAGE) - 1);"}]}