{"sha": "1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5NWZiYWQ4OWQ2ZDhlNmU2YTc4YTI1ZDdhMWZiMjdlMjkzZjFhZg==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2005-09-20T08:12:46Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2005-09-20T08:12:46Z"}, "message": "vect-40.c: Remove pointers to \"aligned types\".\n\n        * gcc.dg/vect/vect-40.c: Remove pointers to \"aligned types\".\n        Use pointers to local alignable arrays instead. Added comments.\n        * gcc.dg/vect/vect-46.c: Likewise.\n        * gcc.dg/vect/vect-48.c: Likewise.\n        * gcc.dg/vect/vect-49.c: Likewise.\n        * gcc.dg/vect/vect-52.c: Likewise.\n        * gcc.dg/vect/vect-53.c: Likewise.\n        * gcc.dg/vect/vect-54.c: Likewise.\n        * gcc.dg/vect/vect-56.c: Likewise.\n        * gcc.dg/vect/vect-57.c: Likewise.\n        * gcc.dg/vect/vect-58.c: Likewise.\n        * gcc.dg/vect/vect-60.c: Likewise.\n        * gcc.dg/vect/vect-61.c: Likewise.\n\n        * gcc.dg/vect/vect-42.c: Remove pointers to \"aligned types\".\n        The test is no longer vectorizable on vect_no_align targets.\n        * gcc.dg/vect/vect-43.c: Likewsie.\n\n        * gcc.dg/vect/vect-44.c: Added comments.\n        * gcc.dg/vect/vect-45.c: Added comments.\n        * gcc.dg/vect/vect-50.c: Added comments.\n        * gcc.dg/vect/vect-51.c: Added comments.\n\n        * gcc.dg/vect/vect-95.c: Use aligned arrays instead of arrays to\n        aligned type.\n        * gcc.dg/vect/Os-vect-95.c: Likewise.\n\n        * gcc.dg/vect/vect-41.c: Test removed.\n        * gcc.dg/vect/vect-47.c: Test removed.\n        * gcc.dg/vect/vect-55.c: Test removed.\n        * gcc.dg/vect/vect-59.c: Test removed.\n\nFrom-SVN: r104448", "tree": {"sha": "d84f37260e995c1366ac605833bbb0de0a2794e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d84f37260e995c1366ac605833bbb0de0a2794e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/comments", "author": null, "committer": null, "parents": [{"sha": "39278c14cc716a115fcf1bc0859af436094fdd3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39278c14cc716a115fcf1bc0859af436094fdd3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39278c14cc716a115fcf1bc0859af436094fdd3c"}], "stats": {"total": 675, "additions": 292, "deletions": 383}, "files": [{"sha": "64f08bd59283340e38eaba1a6ee3997bf10502f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -1,3 +1,37 @@\n+2005-09-20  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* gcc.dg/vect/vect-40.c: Remove pointers to \"aligned types\".\n+\tUse pointers to local alignable arrays instead. Added comments.\n+\t* gcc.dg/vect/vect-46.c: Likewise.\n+\t* gcc.dg/vect/vect-48.c: Likewise.\n+\t* gcc.dg/vect/vect-49.c: Likewise.\n+\t* gcc.dg/vect/vect-52.c: Likewise.\n+\t* gcc.dg/vect/vect-53.c: Likewise.\n+\t* gcc.dg/vect/vect-54.c: Likewise.\n+\t* gcc.dg/vect/vect-56.c: Likewise.\n+\t* gcc.dg/vect/vect-57.c: Likewise.\n+\t* gcc.dg/vect/vect-58.c: Likewise.\n+\t* gcc.dg/vect/vect-60.c: Likewise.\n+\t* gcc.dg/vect/vect-61.c: Likewise.\n+\n+\t* gcc.dg/vect/vect-42.c: Remove pointers to \"aligned types\".\n+\tThe test is no longer vectorizable on vect_no_align targets.\n+\t* gcc.dg/vect/vect-43.c: Likewsie.\n+\n+\t* gcc.dg/vect/vect-44.c: Added comments.\n+\t* gcc.dg/vect/vect-45.c: Added comments.\n+\t* gcc.dg/vect/vect-50.c: Added comments.\n+\t* gcc.dg/vect/vect-51.c: Added comments.\n+\n+\t* gcc.dg/vect/vect-95.c: Use aligned arrays instead of arrays to\n+\taligned type.\n+\t* gcc.dg/vect/Os-vect-95.c: Likewise. \n+\n+\t* gcc.dg/vect/vect-41.c: Test removed.\n+\t* gcc.dg/vect/vect-47.c: Test removed.\n+\t* gcc.dg/vect/vect-55.c: Test removed.\n+\t* gcc.dg/vect/vect-59.c: Test removed.\n+\n 2005-09-20  Dorit Nuzman  <dorit@il.ibm.com>\n         \n \t* gcc.dg/vect/pr16105.c: Replace \"aligned types\" with regular types."}, {"sha": "be7168b30ff787935bc7cae319ba83cd8d628515", "filename": "gcc/testsuite/gcc.dg/vect/Os-vect-95.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FOs-vect-95.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FOs-vect-95.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FOs-vect-95.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,8 +5,6 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n void bar (float *pd, float *pa, float *pb, float *pc) \n {\n   int i;\n@@ -43,8 +41,8 @@ main1 (int n, float * __restrict__ pd, float * __restrict__ pa, float * __restri\n int main (void)\n {\n   int i;\n-  afloat a[N];\n-  afloat d[N+1];\n+  float a[N] __attribute__ ((__aligned__(16)));\n+  float d[N+1] __attribute__ ((__aligned__(16)));\n   float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n   float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n "}, {"sha": "43db7bff8f294cc22c1d368722d7c99aaac0aa0b", "filename": "gcc/testsuite/gcc.dg/vect/vect-40.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-40.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,9 +5,7 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc) \n+void bar (float *pa, float *pb, float *pc) \n {\n   int i;\n \n@@ -21,31 +19,37 @@ void bar (afloat *pa, afloat *pb, afloat *pc)\n   return;\n }\n \n+/* Aligned pointer accesses.\n+   The loop bound is known and divisible by the vectorization factor.\n+   No aliasing problems.\n+   vect-46.c is similar to this one with one difference: \n+        the loop bound is unknown.  */\n \n int\n-main1 (afloat * __restrict__ pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+main1 ()\n {\n   int i;\n+  float a[N] __attribute__ ((__aligned__(16)));\n+  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  float *pa = a;\n+  float *pb = b;\n+  float *pc = c;\n \n   for (i = 0; i < N; i++)\n     {\n       pa[i] = pb[i] * pc[i];\n     }\n \n+  bar (pa,pb,pc);\n+\n   return 0;\n }\n \n int main (void)\n {\n-  int i;\n-  float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n-\n   check_vect ();\n-\n-  main1 (a,b,c);\n-  bar (a,b,c);\n+  main1 ();\n   return 0;\n }\n "}, {"sha": "ee2ccdf4b878395103a321eb50fb3fe24201ee72", "filename": "gcc/testsuite/gcc.dg/vect/vect-41.c", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39278c14cc716a115fcf1bc0859af436094fdd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39278c14cc716a115fcf1bc0859af436094fdd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-41.c?ref=39278c14cc716a115fcf1bc0859af436094fdd3c", "patch": "@@ -1,55 +0,0 @@\n-/* { dg-require-effective-target vect_float } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 256\n-\n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc) \n-{\n-  int i;\n-\n-  /* check results:  */\n-  for (i = 0; i < N; i++)\n-    {\n-      if (pa[i] != (pb[i] * pc[i]))\n-\tabort ();\n-    }\n-\n-  return;\n-}\n-\n-\n-int\n-main1 (afloat * pa, afloat * pb, afloat * pc)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      pa[i] = pb[i] * pc[i];\n-    }\n-\n-  bar (pa,pb,pc);\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{\n-  int i;\n-  float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n-\n-  check_vect ();\n-\n-  main1 (a,b,c);\n-  return 0;\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ea50fc41405b4435ad6969d97ce18af14e5ed947", "filename": "gcc/testsuite/gcc.dg/vect/vect-42.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,9 +5,7 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc) \n+void bar (float *pa, float *pb, float *pc) \n {\n   int i;\n \n@@ -21,15 +19,19 @@ void bar (afloat *pa, afloat *pb, afloat *pc)\n   return;\n }\n \n+/* Unaligned write access, aligned read accesses.\n+   Since we are handling an unaligned store by peeling the loop,\n+   the loads will become unaligned.\n+   The loop bound is known and divisible by the vectorization factor.\n+   No aliasing problems.  */\n \n int\n-main1 (afloat * __restrict__ pa)\n+main1 (float * __restrict__ pa)\n {\n   int i;\n   float pb[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n   float pc[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n-\n   for (i = 0; i < N; i++)\n     {\n       pa[i] = pb[i] * pc[i];\n@@ -52,6 +54,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"} } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8594a3320d6967aeb7c59102173bcec3881138c6", "filename": "gcc/testsuite/gcc.dg/vect/vect-43.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-43.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,9 +5,7 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc) \n+void bar (float *pa, float *pb, float *pc) \n {\n   int i;\n \n@@ -23,7 +21,7 @@ void bar (afloat *pa, afloat *pb, afloat *pc)\n \n \n int\n-main1 (afloat * pa)\n+main1 (float *pa)\n {\n   int i;\n   float pb[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n@@ -41,11 +39,11 @@ main1 (afloat * pa)\n }\n \n int\n-main2 (afloat * pa)\n+main2 (float * pa)\n {\n   int i;\n-  afloat pb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  afloat pc[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  float pb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float pc[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n   /* Vectorizable: pb and pc addresses do not escape.  */\n   for (i = 0; i < N; i++)\n@@ -67,8 +65,6 @@ int main (void)\n {\n   int i;\n   float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n   check_vect ();\n \n@@ -77,6 +73,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "78c7abd487551cf30963b55a38607d3fc1254e06", "filename": "gcc/testsuite/gcc.dg/vect/vect-44.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-44.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -19,6 +19,14 @@ void bar (float *pa, float *pb, float *pc)\n   return;\n }\n \n+/* Unaligned pointer accesses, with unknown alignment.\n+   The loop bound is known and divisible by the vectorization factor.\n+   No aliasing problems.\n+   vect-50.c is similar to this one with one difference:\n+        the loop bound is unknown.\n+   vect-45.c is similar to this one with one difference:\n+        can't prove that pointers don't alias.  */\n+\n int\n main1 (float * __restrict__ pa, float * __restrict__ pb, float * __restrict__ pc)\n {"}, {"sha": "8a998564319a33e1ced6f3a8b231fda63a508f2f", "filename": "gcc/testsuite/gcc.dg/vect/vect-45.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-45.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,7 +5,6 @@\n \n #define N 256\n \n-\n void bar (const float *pa, const float *pb, const float *pc) \n {\n   int i;\n@@ -20,6 +19,13 @@ void bar (const float *pa, const float *pb, const float *pc)\n   return;\n }\n \n+/* Unaligned pointer accesses, with unknown alignment.\n+   The loop bound is known and divisible by the vectorization factor.\n+   Can't prove that the pointers don't alias.\n+   vect-51.c is similar to this one with one difference:\n+        the loop bound is unknown.\n+   vect-44.c is similar to this one with one difference:\n+        Aliasing is not a problem.  */\n \n int\n main1 (float *pa, float *pb, float *pc)"}, {"sha": "08db542b40311c8a1275839058376d10d7ee9755", "filename": "gcc/testsuite/gcc.dg/vect/vect-46.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-46.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,9 +5,7 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc)\n+void bar (float *pa, float *pb, float *pc)\n {\n   int i;\n \n@@ -21,32 +19,37 @@ void bar (afloat *pa, afloat *pb, afloat *pc)\n   return;\n }\n \n+/* Aligned pointer accesses.\n+   The loop bound is unknown.\n+   No aliasing problems.\n+   vect-40.c is similar to this one with one difference:\n+        the loop bound is known.  */\n \n int\n-main1 (int n , afloat * __restrict__ pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+main1 (int n)\n {\n   int i;\n+  float a[N] __attribute__ ((__aligned__(16)));  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  float *pa = a;\n+  float *pb = b;\n+  float *pc = c;\n \n   for (i = 0; i < n; i++)\n     {\n       pa[i] = pb[i] * pc[i];\n     }\n \n+  bar (pa,pb,pc);\n+\n   return 0;\n }\n \n int main (void)\n {\n   int i;\n   int n=N;\n-  float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n-\n   check_vect ();\n-\n-  main1 (n,a,b,c);\n-  bar (a,b,c);\n+  main1 (n);\n   return 0;\n }\n "}, {"sha": "4f21ffc88c8ae77826fa315f1e0f94ee2693bc8f", "filename": "gcc/testsuite/gcc.dg/vect/vect-47.c", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39278c14cc716a115fcf1bc0859af436094fdd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39278c14cc716a115fcf1bc0859af436094fdd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-47.c?ref=39278c14cc716a115fcf1bc0859af436094fdd3c", "patch": "@@ -1,56 +0,0 @@\n-/* { dg-require-effective-target vect_float } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 256\n-\n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc)\n-{\n-  int i;\n-\n-  /* check results:  */\n-  for (i = 0; i < N; i++)\n-    {\n-      if (pa[i] != (pb[i] * pc[i]))\n-\tabort ();\n-    }\n-\n-  return;\n-}\n-\n-\n-int\n-main1 (int n , afloat *  pa, afloat *  pb, afloat *  pc)\n-{\n-  int i;\n-\n-  for (i = 0; i < n; i++)\n-    {\n-      pa[i] = pb[i] * pc[i];\n-    }\n-\n-  bar (pa,pb,pc);\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{\n-  int i;\n-  int n=N;\n-  float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n-\n-  check_vect ();\n-\n-  main1 (n,a,b,c);\n-  return 0;\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "38135d952fd35a73b6d641092caac1af251f4e6b", "filename": "gcc/testsuite/gcc.dg/vect/vect-48.c", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,49 +5,47 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n+/* Unaligned pointer read accesses, aligned write access.\n+   The loop bound is known and divisible by the vectorization factor.\n+   No aliasing problems.\n+   vect-56.c is similar to this one with one difference:\n+        the alignment of the read accesses is known.\n+   vect-52.c is similar to this one with one difference:\n+        the loop bound is unknown.\n+   vect-49.c is similar to this one with one difference:\n+        aliasing is a problem.  */\n \n-void bar (float *pa, float *pb, float *pc) \n+int\n+main1 (float *pb, float *pc)\n {\n+  float pa[N] __attribute__ ((__aligned__(16)));\n   int i;\n \n-  /* check results:  */\n   for (i = 0; i < N; i++)\n     {\n-      if (pa[i] != (pb[i] * pc[i]))\n-\tabort ();\n+      pa[i] = pb[i] * pc[i];\n     }\n \n-  return;\n-}\n-\n-\n-int\n-main1 (afloat * __restrict__ pa, float * __restrict__ pb, float * __restrict__ pc)\n-{\n-  int i;\n-\n+  /* check results:  */\n   for (i = 0; i < N; i++)\n     {\n-      pa[i] = pb[i] * pc[i];\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n     }\n \n-  bar (pa,pb,pc);\n-\n   return 0;\n }\n \n int main (void)\n {\n   int i;\n-  float a[N] __attribute__ ((__aligned__(16)));\n   float b[N+1] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60};\n   float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n   check_vect ();\n \n-  main1 (a,b,c);\n-  main1 (a,&b[1],c);\n+  main1 (b,c);\n+  main1 (&b[1],c);\n \n   return 0;\n }"}, {"sha": "8dfd0e749b53fe040dd2fa49c406fcd22c3444db", "filename": "gcc/testsuite/gcc.dg/vect/vect-49.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-49.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,9 +5,7 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (const float *pa, const float *pb, const float *pc) \n+void bar (float *pa, float *pb, float *pc) \n {\n   int i;\n \n@@ -21,10 +19,18 @@ void bar (const float *pa, const float *pb, const float *pc)\n   return;\n }\n \n+/* Unaligned pointer read accesses, aligned pointer write access.\n+   The loop bound is known and divisible by the vectorization factor.\n+   Can't prove that the pointers don't alias.\n+   vect-53.c is similar to this one with one difference:\n+        the loop bound is unknown.\n+   vect-48.c is similar to this one with one difference:\n+        aliasing is not a problem.  */\n \n int\n-main1 (afloat *pa, float *pb, float *pc)\n+main1 (float *pb, float *pc)\n {\n+  float pa[N] __attribute__ ((__aligned__(16)));\n   int i;\n \n   for (i = 0; i < N; i++)\n@@ -40,13 +46,14 @@ main1 (afloat *pa, float *pb, float *pc)\n int main (void)\n {\n   int i;\n-  float a[N];\n-  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  float b[N+1] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60};\n+  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n   check_vect ();\n \n-  main1 (a,b,c);\n+  main1 (b,c);\n+  main1 (&b[1],c);\n+\n   return 0;\n }\n "}, {"sha": "aed2399046b140ddd3c9352d8fc4ffaee5ea6052", "filename": "gcc/testsuite/gcc.dg/vect/vect-50.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-50.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,7 +5,6 @@\n \n #define N 256\n \n-\n void bar (float *pa, float *pb, float *pc) \n {\n   int i;\n@@ -20,7 +19,6 @@ void bar (float *pa, float *pb, float *pc)\n   return;\n }\n \n-\n int\n main1 (int n, float * __restrict__ pa, float * __restrict__ pb, float * __restrict__ pc)\n {\n@@ -36,6 +34,14 @@ main1 (int n, float * __restrict__ pa, float * __restrict__ pb, float * __restri\n   return 0;\n }\n \n+/* Unaligned pointer accesses, with unknown alignment.\n+   The loop bound is unknown.\n+   No aliasing problems.\n+   vect-44.c is similar to this one with one difference:\n+        the loop bound is known.  \n+   vect-51.c is similar to this one with one difference:\n+        can't prove that pointers don't alias.  */\n+\n int main (void)\n {\n   int i;"}, {"sha": "541a5ffef3b0181920fc59d7e1f78e735792f594", "filename": "gcc/testsuite/gcc.dg/vect/vect-51.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-51.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-51.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-51.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,7 +5,6 @@\n \n #define N 256\n \n-\n void bar (const float *pa, const float *pb, const float *pc) \n {\n   int i;\n@@ -20,6 +19,13 @@ void bar (const float *pa, const float *pb, const float *pc)\n   return;\n }\n \n+/* Unaligned pointer accesses, with unknown alignment.\n+   The loop bound is unknown.\n+   Can't prove that the pointers don't alias.\n+   vect-45.c is similar to this one with one difference:\n+        the loop bound is known.\n+   vect-50.c is similar to this one with one difference:\n+        Aliasing is not a problem.  */\n \n int\n main1 (int n, float *pa, float *pb, float *pc)"}, {"sha": "bddbc83796526f7e0e74c43d25a49ee9ea79e0e6", "filename": "gcc/testsuite/gcc.dg/vect/vect-52.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,34 +5,33 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (float *pa, float *pb, float *pc) \n-{\n-  int i;\n-\n-  /* check results:  */\n-  for (i = 0; i < N; i++)\n-    {\n-      if (pa[i] != (pb[i] * pc[i]))\n-\tabort ();\n-    }\n-\n-  return;\n-}\n-\n+/* Unaligned pointer read accesses, aligned write access.\n+   The loop bound is unknown.\n+   No aliasing problems.\n+   vect-60.c is similar to this one with one difference:\n+        the alignment of the read accesses is known.\n+   vect-48.c is similar to this one with one difference:\n+        the loop bound is known.\n+   vect-53.c is similar to this one with one difference:\n+        aliasing is a problem.  */\n \n int\n-main1 (int n, afloat * __restrict__ pa, float * __restrict__ pb, float * __restrict__ pc)\n+main1 (int n, float *pb, float *pc)\n {\n+  float pa[N] __attribute__ ((__aligned__(16)));\n   int i;\n \n   for (i = 0; i < n; i++)\n     {\n       pa[i] = pb[i] * pc[i];\n     }\n \n-  bar (pa,pb,pc);\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    { \n+      if (pa[i] != (pb[i] * pc[i]))\n+        abort ();\n+    }\n \n   return 0;\n }\n@@ -46,8 +45,9 @@ int main (void)\n \n   check_vect ();\n \n-  main1 (N,a,&b[1],c);\n-  main1 (N,a,&b[1],&c[1]);\n+  main1 (N,&b[1],c);\n+  main1 (N,&b[1],&c[1]);\n+\n   return 0;\n }\n "}, {"sha": "91eaabeb93b2d16d5fd65ad3c954e5c4a024cdb6", "filename": "gcc/testsuite/gcc.dg/vect/vect-53.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-53.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-53.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-53.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,8 +5,6 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n void bar (const float *pa, const float *pb, const float *pc) \n {\n   int i;\n@@ -21,10 +19,18 @@ void bar (const float *pa, const float *pb, const float *pc)\n   return;\n }\n \n+/* Unaligned pointer read accesses, aligned pointer write access.\n+   The loop bound is unknown.\n+   Can't prove that the pointers don't alias.\n+   vect-49.c is similar to this one with one difference:\n+        the loop bound is known.\n+   vect-52.c is similar to this one with one difference:\n+        aliasing is not a problem.  */\n \n int\n-main1 (int n, afloat *pa, float *pb, float *pc)\n+main1 (int n, float *pb, float *pc)\n {\n+  float pa[N] __attribute__ ((__aligned__(16)));\n   int i;\n \n   for (i = 0; i < n; i++)\n@@ -46,8 +52,9 @@ int main (void)\n \n   check_vect ();\n \n-  main1 (N,a,&b[1],c);\n-  main1 (N,a,&b[1],&c[1]);\n+  main1 (N,&b[1],c);\n+  main1 (N,&b[1],&c[1]);\n+\n   return 0;\n }\n "}, {"sha": "05962dfd35f7f7b2786e58fa95a80747ce21a935", "filename": "gcc/testsuite/gcc.dg/vect/vect-54.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,9 +5,7 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc)\n+void bar (float *pa, float *pb, float *pc)\n {\n   int i;\n \n@@ -21,32 +19,40 @@ void bar (afloat *pa, afloat *pb, afloat *pc)\n   return;\n }\n \n+/* Unaligned pointer accesses, with a known alignment.\n+   The loop bound is known and divisible by the vectorization factor.\n+   No aliasing problems.\n+   vect-58.c is similar to this one with one difference:\n+        the loop bound is unknown.  */\n \n int\n-main1 (afloat * __restrict__ pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+main1 ()\n {\n   int i;\n+  float a[N] __attribute__ ((__aligned__(16)));\n+  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  float *pa = a;\n+  float *pb = b;\n+  float *pc = c;\n \n   for (i = 0; i < N/2; i++)\n     {\n       pa[i+1] = pb[i+1] * pc[i+1];\n     }\n \n-  bar (pa,pb,pc);\n+  bar (a,b,c);\n \n   return 0;\n }\n \n int main (void)\n {\n   int i;\n-  float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n   check_vect ();\n+  main1 ();\n \n-  main1 (a,b,c);\n   return 0;\n }\n "}, {"sha": "6601b2fc7f1785544f9a1714d68d25ed021eb185", "filename": "gcc/testsuite/gcc.dg/vect/vect-55.c", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39278c14cc716a115fcf1bc0859af436094fdd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39278c14cc716a115fcf1bc0859af436094fdd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-55.c?ref=39278c14cc716a115fcf1bc0859af436094fdd3c", "patch": "@@ -1,54 +0,0 @@\n-/* { dg-require-effective-target vect_float } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 256\n-\n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc)\n-{\n-  int i;\n-\n-  /* check results:  */\n-  for (i = 0; i < N/2; i++)\n-    {\n-      if (pa[i+1] != (pb[i+1] * pc[i+1]))\n-\tabort ();\n-    }\n-\n-  return;\n-}\n-\n-\n-int\n-main1 (afloat *  pa, afloat *  pb, afloat *  pc)\n-{\n-  int i;\n-\n-  for (i = 0; i < N/2; i++)\n-    {\n-      pa[i+1] = pb[i+1] * pc[i+1];\n-    }\n-\n-  bar (pa,pb,pc);\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{\n-  int i;\n-  float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n-\n-  check_vect ();\n-\n-  main1 (a,b,c);\n-  return 0;\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d74afab374b8912e11c122b7bba270f813d0ee69", "filename": "gcc/testsuite/gcc.dg/vect/vect-56.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,48 +5,63 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc)\n+void bar (float *pa, float *pb, float *pc)\n {\n   int i;\n \n   /* check results:  */\n   for (i = 0; i < N/2; i++)\n     {\n       if (pa[i] != (pb[i+1] * pc[i+1]))\n-\tabort ();\n+        abort ();\n     }\n \n   return;\n }\n \n+/* Unaligned pointer read accesses, aligned write access.\n+   The loop bound is known and divisible by the vectorization factor.\n+   No aliasing problems.\n+   vect-48.c is similar to this one with one difference:\n+        the alignment of the read accesses is unknown.\n+   vect-60.c is similar to this one with one difference:\n+        the loop bound is unknown.\n+   vect-57.c is similar to this one with two differences:\n+        aliasing is a problem, and the write access has unknown alignment.  */\n \n int\n-main1 (afloat * __restrict__ pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+main1 ()\n {\n   int i;\n+  float a[N] __attribute__ ((__aligned__(16)));\n+  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  float *pa = a;\n+  float *pb = b;\n+  float *pc = c;\n \n   for (i = 0; i < N/2; i++)\n     {\n       pa[i] = pb[i+1] * pc[i+1];\n     }\n \n-  bar (pa,pb,pc);\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (pa[i] != (pb[i+1] * pc[i+1]))\n+        abort ();\n+    }\n \n   return 0;\n }\n \n int main (void)\n {\n   int i;\n-  float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n   check_vect ();\n+  main1 ();\n \n-  main1 (a,b,c);\n   return 0;\n }\n "}, {"sha": "bcac95a03938db2188ac8676c9c20d011969b5e6", "filename": "gcc/testsuite/gcc.dg/vect/vect-57.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-57.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-57.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-57.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,34 +5,44 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc)\n+void bar (float *pa, float *pb, float *pc)\n {\n   int i;\n \n   /* check results:  */\n   for (i = 0; i < N/2; i++)\n     {\n       if (pa[i] != (pb[i+1] * pc[i+1]))\n-\tabort ();\n+        abort ();\n     }\n \n   return;\n }\n \n+/* Unaligned pointer read accesses with known alignment,\n+   and an unaligned write access with unknown alignment.\n+   The loop bound is known and divisible by the vectorization factor.\n+   Can't prove that the pointers don't alias.\n+   vect-61.c is similar to this one with one difference:\n+        the loop bound is unknown.\n+   vect-56.c is similar to this one with two differences:\n+        aliasing is a problem, and the write access is aligned.  */\n \n int\n-main1 (afloat *  pa, afloat *  pb, afloat * pc)\n+main1 (float *pa)\n {\n   int i;\n+  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  float *pb = b;\n+  float *pc = c;\n \n   for (i = 0; i < N/2; i++)\n     {\n       pa[i] = pb[i+1] * pc[i+1];\n     }\n \n-  bar (pa,pb,pc);\n+  bar (pa, pb, pc);\n \n   return 0;\n }\n@@ -41,12 +51,10 @@ int main (void)\n {\n   int i;\n   float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n   check_vect ();\n+  main1 (a);\n \n-  main1 (a,b,c);\n   return 0;\n }\n "}, {"sha": "89f6de639245e1708f30209fe8421a6e700ff5ff", "filename": "gcc/testsuite/gcc.dg/vect/vect-58.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-58.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-58.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-58.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,9 +5,7 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc)\n+void bar (float *pa, float *pb, float *pc)\n {\n   int i;\n \n@@ -21,18 +19,27 @@ void bar (afloat *pa, afloat *pb, afloat *pc)\n   return;\n }\n \n+/* Unaligned pointer accesses, with a known alignment.\n+   The loop bound is unknown.\n+   No aliasing problems.\n+   vect-54.c is similar to this one with one difference:\n+        the loop bound is known.  */\n \n int\n-main1 (int n , afloat * __restrict__ pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+main1 (int n)\n {\n   int i;\n+  float a[N] __attribute__ ((__aligned__(16)));  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  float *pa = a;\n+  float *pb = b;\n+  float *pc = c;\n \n   for (i = 0; i < n/2; i++)\n     {\n       pa[i+1] = pb[i+1] * pc[i+1];\n     }\n \n-  bar (pa,pb,pc);\n+  bar (a,b,c);\n \n   return 0;\n }\n@@ -41,13 +48,10 @@ int main (void)\n {\n   int i;\n   int n=N;\n-  float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n   check_vect ();\n+  main1 (n);\n \n-  main1 (n,a,b,c);\n   return 0;\n }\n "}, {"sha": "c061a3a28e572e381c4494760c90c55566cbbcad", "filename": "gcc/testsuite/gcc.dg/vect/vect-59.c", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39278c14cc716a115fcf1bc0859af436094fdd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-59.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39278c14cc716a115fcf1bc0859af436094fdd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-59.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-59.c?ref=39278c14cc716a115fcf1bc0859af436094fdd3c", "patch": "@@ -1,55 +0,0 @@\n-/* { dg-require-effective-target vect_float } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 256\n-\n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc)\n-{\n-  int i;\n-\n-  /* check results:  */\n-  for (i = 0; i < N/2; i++)\n-    {\n-      if (pa[i+1] != (pb[i+1] * pc[i+1]))\n-\tabort ();\n-    }\n-\n-  return;\n-}\n-\n-\n-int\n-main1 (int n , afloat *  pa, afloat *  pb, afloat *  pc)\n-{\n-  int i;\n-\n-  for (i = 0; i < n/2; i++)\n-    {\n-      pa[i+1] = pb[i+1] * pc[i+1];\n-    }\n-\n-  bar (pa,pb,pc);\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{\n-  int i;\n-  int n=N;\n-  float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n-\n-  check_vect ();\n-\n-  main1 (n,a,b,c);\n-  return 0;\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6fbcb9414373d94043d3f35482cf3888cb7da959", "filename": "gcc/testsuite/gcc.dg/vect/vect-60.c", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,9 +5,7 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc)\n+void bar (float *pa, float *pb, float *pc)\n {\n   int i;\n \n@@ -21,18 +19,38 @@ void bar (afloat *pa, afloat *pb, afloat *pc)\n   return;\n }\n \n+/* Unaligned pointer read accesses, aligned write access.\n+   The loop bound is unknown\n+   No aliasing problems.\n+   vect-52.c is similar to this one with one difference:\n+        the alignment of the read accesses is unknown.\n+   vect-56.c is similar to this one with one difference:\n+        the loop bound is known.\n+   vect-61.c is similar to this one with two differences:\n+        aliasing is not a problem, and the write access has unknown alignment.  */\n \n int\n-main1 (int n , afloat * __restrict__ pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+main1 (int n)\n {\n   int i;\n+  float a[N] __attribute__ ((__aligned__(16)));\n+  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  float *pa = a;\n+  float *pb = b;\n+  float *pc = c;\n \n   for (i = 0; i < n/2; i++)\n     {\n       pa[i] = pb[i+1] * pc[i+1];\n     }\n \n-  bar (pa,pb,pc);\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (pa[i] != (pb[i+1] * pc[i+1]))\n+        abort ();\n+    }\n \n   return 0;\n }\n@@ -41,13 +59,10 @@ int main (void)\n {\n   int i;\n   int n=N;\n-  float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n   check_vect ();\n+  main1 (n);\n \n-  main1 (n,a,b,c);\n   return 0;\n }\n "}, {"sha": "9f4e8e9882b2c41caf0529c371603a1fe0a80fe5", "filename": "gcc/testsuite/gcc.dg/vect/vect-61.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-61.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-61.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-61.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -6,9 +6,7 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n-void bar (afloat *pa, afloat *pb, afloat *pc)\n+void bar (float *pa, float *pb, float *pc)\n {\n   int i;\n \n@@ -22,11 +20,23 @@ void bar (afloat *pa, afloat *pb, afloat *pc)\n   return;\n }\n \n+/* Unaligned pointer read accesses with known alignment,\n+   and an unaligned write access with unknown alignment.\n+   The loop bound is iunknown.\n+   Can't prove that the pointers don't alias.\n+   vect-57.c is similar to this one with one difference:\n+        the loop bound is known.\n+   vect-60.c is similar to this one with two differences:\n+        aliasing is not a problem, and the write access is unaligned.  */\n \n int\n-main1 (int n , afloat *  pa, afloat *  pb, afloat *  pc)\n+main1 (int n , float *pa)\n {\n   int i;\n+  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  float *pb = b;\n+  float *pc = c;\n \n   for (i = 0; i < n/2; i++)\n     {\n@@ -43,12 +53,10 @@ int main (void)\n   int i;\n   int n=N;\n   float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n   check_vect ();\n+  main1 (n,a);\n \n-  main1 (n,a,b,c);\n   return 0;\n }\n "}, {"sha": "935f608e71ec61c90cd5753f535b0911d5e3a581", "filename": "gcc/testsuite/gcc.dg/vect/vect-95.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-95.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-95.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-95.c?ref=1c95fbad89d6d8e6e6a78a25d7a1fb27e293f1af", "patch": "@@ -5,8 +5,6 @@\n \n #define N 256\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n void bar (float *pd, float *pa, float *pb, float *pc) \n {\n   int i;\n@@ -43,8 +41,8 @@ main1 (int n, float * __restrict__ pd, float * __restrict__ pa, float * __restri\n int main (void)\n {\n   int i;\n-  afloat a[N];\n-  afloat d[N+1];\n+  float a[N] __attribute__ ((__aligned__(16)));\n+  float d[N+1] __attribute__ ((__aligned__(16)));\n   float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n   float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n@@ -59,12 +57,12 @@ int main (void)\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n \n-/* For targets that support unaligned loads we version for the two unaligned stores and\n-   generate misaligned accesses for the loads. For targets that don't support unaligned\n-   loads we version for all four accesses.  */\n+/* For targets that support unaligned loads we version for the two unaligned \n+   stores and generate misaligned accesses for the loads. For targets that \n+   don't support unaligned loads we version for all four accesses.  */\n \n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { xfail vect_no_align } } } */\n-/*  { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target vect_no_align } } }\n+/*  { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target vect_no_align } } } */\n /*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 4 \"vect\" { target vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}