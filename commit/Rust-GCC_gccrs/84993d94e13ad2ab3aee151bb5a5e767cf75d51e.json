{"sha": "84993d94e13ad2ab3aee151bb5a5e767cf75d51e", "node_id": "C_kwDOANBUbNoAKDg0OTkzZDk0ZTEzYWQyYWIzYWVlMTUxYmI1YTVlNzY3Y2Y3NWQ1MWU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-11T12:52:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-11T12:52:44Z"}, "message": "c++: Fix up constant expression __builtin_convertvector folding [PR104472]\n\nThe following testcase ICEs, because due to the -frounding-math\nfold_const_call fails, which is it returns NULL, and returning NULL from\ncxx_eval* is wrong, all the callers rely on them to either return folded\nvalue or original with *non_constant_p = true.\n\nThe following patch does that, and additionally falls through into the\ndefault case where there is diagnostics for the !ctx->quiet case too.\n\n2022-02-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/104472\n\t* constexpr.cc (cxx_eval_internal_function) <case IFN_VEC_CONVERT>:\n\tOnly return fold_const_call result if it is non-NULL.  Otherwise\n\tfall through into the default: case to return t, set *non_constant_p\n\tand emit diagnostics if needed.\n\n\t* g++.dg/cpp0x/constexpr-104472.C: New test.", "tree": {"sha": "63393b62cb2ff535bad7f56e8184b17c380a59b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63393b62cb2ff535bad7f56e8184b17c380a59b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84993d94e13ad2ab3aee151bb5a5e767cf75d51e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84993d94e13ad2ab3aee151bb5a5e767cf75d51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84993d94e13ad2ab3aee151bb5a5e767cf75d51e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84993d94e13ad2ab3aee151bb5a5e767cf75d51e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb76c0ad35f96505ecd9213849ebc3df6163a0f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb76c0ad35f96505ecd9213849ebc3df6163a0f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb76c0ad35f96505ecd9213849ebc3df6163a0f7"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "87f3a7bb7a336fcc77cd534d9f7f8aa0808ffbab", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84993d94e13ad2ab3aee151bb5a5e767cf75d51e/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84993d94e13ad2ab3aee151bb5a5e767cf75d51e/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=84993d94e13ad2ab3aee151bb5a5e767cf75d51e", "patch": "@@ -1840,13 +1840,10 @@ cxx_eval_internal_function (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t\t false, non_constant_p,\n \t\t\t\t\t\t overflow_p);\n \tif (TREE_CODE (arg) == VECTOR_CST)\n-\t  return fold_const_call (CFN_VEC_CONVERT, TREE_TYPE (t), arg);\n-\telse\n-\t  {\n-\t    *non_constant_p = true;\n-\t    return t;\n-\t  }\n+\t  if (tree r = fold_const_call (CFN_VEC_CONVERT, TREE_TYPE (t), arg))\n+\t    return r;\n       }\n+      /* FALLTHRU */\n \n     default:\n       if (!ctx->quiet)"}, {"sha": "c9c8bf414feec2183506f9b534bf7dd83f26949e", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-104472.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84993d94e13ad2ab3aee151bb5a5e767cf75d51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-104472.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84993d94e13ad2ab3aee151bb5a5e767cf75d51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-104472.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-104472.C?ref=84993d94e13ad2ab3aee151bb5a5e767cf75d51e", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/104472\n+// { dg-options \"-O2 -frounding-math\" }\n+// { dg-add-options float16 }\n+// { dg-require-effective-target float16 }\n+\n+typedef short __attribute__((__vector_size__ (16))) V;\n+typedef _Float16 __attribute__((__vector_size__ (16))) F;\n+\n+V v = __builtin_convertvector (__builtin_convertvector ((V){5534}, F), V) < 8;"}]}