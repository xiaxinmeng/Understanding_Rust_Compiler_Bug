{"sha": "c112cf2bca734befb14c10e8ae1df17821505f44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzExMmNmMmJjYTczNGJlZmIxNGMxMGU4YWUxZGYxNzgyMTUwNWY0NA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-09-10T11:55:21Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-09-10T11:55:21Z"}, "message": "darwin.c, [...]: Fix comment typos.\n\n\t* config/darwin.c, config/alpha/alpha.h, config/arm/arm.c,\n\tconfig/arm/arm.h, config/arm/arm.md, config/arm/bpabi.h,\n\tconfig/arm/predicates.md, config/frv/frv.c, config/frv/frv.md,\n\tconfig/h8300/h8300.md, config/i386/gmm_malloc.h,\n\tconfig/ia64/ia64.md, config/ip2k/libgcc.S,\n\tconfig/mips/mips-ps-3d.md, config/mips/mips.c,\n\tconfig/rs6000/rs6000.c, config/s390/s390.c,\n\tconfig/sh/symbian.c: Fix comment typos.\n\nFrom-SVN: r87295", "tree": {"sha": "5af829e1813c9d326fb247778244da439b3bba47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5af829e1813c9d326fb247778244da439b3bba47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c112cf2bca734befb14c10e8ae1df17821505f44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c112cf2bca734befb14c10e8ae1df17821505f44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c112cf2bca734befb14c10e8ae1df17821505f44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c112cf2bca734befb14c10e8ae1df17821505f44/comments", "author": null, "committer": null, "parents": [{"sha": "2790879fd1ea798d9914cb5c17cc6a7f86c78f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2790879fd1ea798d9914cb5c17cc6a7f86c78f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2790879fd1ea798d9914cb5c17cc6a7f86c78f6f"}], "stats": {"total": 81, "additions": 46, "deletions": 35}, "files": [{"sha": "71223aa95412e3b2b1db9288ee6bd372c33cf23c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -1,3 +1,14 @@\n+2004-09-10  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/darwin.c, config/alpha/alpha.h, config/arm/arm.c,\n+\tconfig/arm/arm.h, config/arm/arm.md, config/arm/bpabi.h,\n+\tconfig/arm/predicates.md, config/frv/frv.c, config/frv/frv.md,\n+\tconfig/h8300/h8300.md, config/i386/gmm_malloc.h,\n+\tconfig/ia64/ia64.md, config/ip2k/libgcc.S,\n+\tconfig/mips/mips-ps-3d.md, config/mips/mips.c,\n+\tconfig/rs6000/rs6000.c, config/s390/s390.c,\n+\tconfig/sh/symbian.c: Fix comment typos.\n+\n 2004-09-10  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.c (s390_emit_prologue): Added missing"}, {"sha": "25327d9e3cbb7c32400fadd03cbd80d1adca83ef", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -476,7 +476,7 @@ extern const char *alpha_tls_size_string; /* For -mtls-size= */\n \n    Note that small vector types can get mapped onto integer modes at the\n    whim of not appearing in alpha-modes.def.  We never promoted these\n-   values before; don't do so now that we've trimed the set of modes to\n+   values before; don't do so now that we've trimmed the set of modes to\n    those actually implemented in the backend.  */\n \n #define PROMOTE_MODE(MODE,UNSIGNEDP,TYPE)\t\t\t\\"}, {"sha": "a999fe46f98af6f301b2b2267c7893eda8dfcf89", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -634,7 +634,7 @@ bit_count (unsigned long value)\n   return count;\n }\n \n-/* Set up library functions uqniue to ARM.  */\n+/* Set up library functions unique to ARM.  */\n \n static void\n arm_init_libfuncs (void)\n@@ -654,7 +654,7 @@ arm_init_libfuncs (void)\n   set_optab_libfunc (neg_optab, DFmode, \"__aeabi_dneg\");\n   set_optab_libfunc (sub_optab, DFmode, \"__aeabi_dsub\");\n \n-  /* Double-precision comparisions.  Table 3.  */\n+  /* Double-precision comparisons.  Table 3.  */\n   set_optab_libfunc (eq_optab, DFmode, \"__aeabi_dcmpeq\");\n   set_optab_libfunc (ne_optab, DFmode, NULL);\n   set_optab_libfunc (lt_optab, DFmode, \"__aeabi_dcmplt\");\n@@ -670,7 +670,7 @@ arm_init_libfuncs (void)\n   set_optab_libfunc (neg_optab, SFmode, \"__aeabi_fneg\");\n   set_optab_libfunc (sub_optab, SFmode, \"__aeabi_fsub\");\n \n-  /* Single-precision comparisions.  Table 5.  */\n+  /* Single-precision comparisons.  Table 5.  */\n   set_optab_libfunc (eq_optab, SFmode, \"__aeabi_fcmpeq\");\n   set_optab_libfunc (ne_optab, SFmode, NULL);\n   set_optab_libfunc (lt_optab, SFmode, \"__aeabi_fcmplt\");\n@@ -693,7 +693,7 @@ arm_init_libfuncs (void)\n   set_conv_libfunc (trunc_optab, SFmode, DFmode, \"__aeabi_d2f\");\n   set_conv_libfunc (sext_optab, DFmode, SFmode, \"__aeabi_f2d\");\n \n-  /* Integer to floating-point converisons.  Table 8.  */\n+  /* Integer to floating-point conversions.  Table 8.  */\n   set_conv_libfunc (sfloat_optab, DFmode, SImode, \"__aeabi_i2d\");\n   set_conv_libfunc (ufloat_optab, DFmode, SImode, \"__aeabi_ui2d\");\n   set_conv_libfunc (sfloat_optab, DFmode, DImode, \"__aeabi_l2d\");\n@@ -2823,7 +2823,7 @@ arm_is_longcall_p (rtx sym_ref, int call_cookie, int call_symbol)\n     {\n       if (flag_function_sections\n \t  || DECL_SECTION_NAME (current_function_decl))\n-\t/* c.3 is handled by the defintion of the\n+\t/* c.3 is handled by the definition of the\n \t   ARM_DECLARE_FUNCTION_SIZE macro.  */\n \treturn 1;\n     }\n@@ -12900,7 +12900,7 @@ thumb_expand_prologue (void)\n       return;\n     }\n \n-  /* Load the pic recister before setting the frame pointer, so we can use r7\n+  /* Load the pic register before setting the frame pointer, so we can use r7\n      as a temporary work register.  */\n   if (flag_pic)\n     arm_load_pic_register ();"}, {"sha": "c8f88f0233926c5f1617c0ad293422597953f4a0", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -2059,7 +2059,7 @@ typedef struct\n \n /* Set the short-call flag for any function compiled in the current\n    compilation unit.  We skip this for functions with the section\n-   attirubte when long-calls are in effect as this tells the compiler\n+   attribute when long-calls are in effect as this tells the compiler\n    that the section might be placed a long way from the caller.\n    See arm_is_longcall_p() for more information.  */\n #define ARM_DECLARE_FUNCTION_SIZE(STREAM, NAME, DECL)\t\\"}, {"sha": "13e81e495edc73b6e7ce5ee2a08f6b76db04d6c7", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -117,7 +117,7 @@\n    (VUNSPEC_WCMP_EQ  11) ; Used by the iWMMXt WCMPEQ instructions\n    (VUNSPEC_WCMP_GTU 12) ; Used by the iWMMXt WCMPGTU instructions\n    (VUNSPEC_WCMP_GT  13) ; Used by the iwMMXT WCMPGT instructions\n-   (VUNSPEC_EH_RETURN 20); Use to overrite the return address for exception\n+   (VUNSPEC_EH_RETURN 20); Use to override the return address for exception\n \t\t\t ; handling.\n   ]\n )"}, {"sha": "c15257728d4f83b6decfff8579a8f43d18d06db0", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -33,7 +33,7 @@\n    calling convention.  */\n #define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) TARGET_BPABI\n \n-/* The BPABI integer comparision routines return { -1, 0, 1 }.  */\n+/* The BPABI integer comparison routines return { -1, 0, 1 }.  */\n #define TARGET_LIB_INT_CMP_BIASED !TARGET_BPABI\n \n /* Tell the assembler to build BPABI binaries.  */"}, {"sha": "79b28e7ed1892113d9cb9eaa771201cbbb410810", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -171,7 +171,7 @@\n   (and (match_code \"plus,minus,ior,xor,and\")\n        (match_test \"mode == GET_MODE (op)\")))\n \n-;; True for logical binary opertors.\n+;; True for logical binary operators.\n (define_special_predicate \"logical_binary_operator\"\n   (and (match_code \"ior,xor,and\")\n        (match_test \"mode == GET_MODE (op)\")))"}, {"sha": "cd1d47b66bde698373009fdfe9a39cfd7fb73ec4", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -62,7 +62,7 @@ Boston, MA 02111-1307, USA.  */\n    are required by consumers of the generated code.  Currently, gdb\n    uses this to patch in a jump to the overriding function, this\n    allows all uses of the old name to forward to the replacement,\n-   including existing function poiinters and virtual methods.  See\n+   including existing function pointers and virtual methods.  See\n    rs6000_emit_prologue for the code that handles the nop insertions.\n  \n    The added indirection allows gdb to redirect accesses to static"}, {"sha": "e2e01fe2b23ee6eeb5661fa4eac7aa6429b86d81", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -8638,7 +8638,7 @@ frv_pack_insn_p (rtx insn)\n \n        - Conditional instructions are scheduled on the assumption that\n \t they will be executed.  This is usually a good thing, since it\n-\t tends to avoid unncessary stalls in the conditional code.\n+\t tends to avoid unnecessary stalls in the conditional code.\n \t But we want to pack conditional instructions as tightly as\n \t possible, in order to optimize the case where they aren't\n \t executed.\n@@ -9553,7 +9553,7 @@ frv_int_to_acc (enum insn_code icode, int opnum, rtx opval)\n \n   /* ACCs and ACCGs are implicity global registers if media instrinsics\n      are being used.  We set up this lazily to avoid creating lots of\n-     unncessary call_insn rtl in non-media code.  */\n+     unnecessary call_insn rtl in non-media code.  */\n   for (i = 0; i <= ACC_MASK; i++)\n     if ((i & ACC_MASK) == i)\n       global_regs[i + ACC_FIRST] = global_regs[i + ACCG_FIRST] = 1;\n@@ -9647,7 +9647,7 @@ frv_read_iacc_argument (enum machine_mode mode, tree *arglistptr)\n     }\n \n   /* IACCs are implicity global registers.  We set up this lazily to\n-     avoid creating lots of unncessary call_insn rtl when IACCs aren't\n+     avoid creating lots of unnecessary call_insn rtl when IACCs aren't\n      being used.  */\n   regno = INTVAL (op) + IACC_FIRST;\n   for (i = 0; i < HARD_REGNO_NREGS (regno, mode); i++)"}, {"sha": "fc6e95f09f54f39bc497b59dab1a04699634bf88", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -477,7 +477,7 @@\n ;;\t     X + L when each S''[X] is added.  If so, set S to the\n ;;\t     concatenation of S[0]...S[L-1] and S'', then goto (i).\n ;;\n-;;\t (h) If (g) found no permuation, abort.\n+;;\t (h) If (g) found no permutation, abort.\n ;;\n ;;\t (i) S is now the sorted sequence for this group, meaning that S[X]\n ;;\t     issues to unit X.  Trim any unwanted nops from the end of S."}, {"sha": "2eec3513c79f8bdb21f74e2462abf35ba5ef2e3c", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -5994,7 +5994,7 @@\n \t    (match_operand 3 \"h8300_src_operand\" \"\")]))\n    (set (match_operand 4 \"memory_operand\" \"\")\n \t(match_dup 0))]\n-  \"0 /* Disabale because it break compiling fp-bit.c.  */\n+  \"0 /* Disable because it breaks compiling fp-bit.c.  */\n    && TARGET_H8300SX\n    && peep2_reg_dead_p (3, operands[0])\n    && !reg_overlap_mentioned_p (operands[0], operands[3])\n@@ -6024,7 +6024,7 @@\n \t(match_operator 3 \"h8sx_binary_memory_operator\"\n \t   [(match_operand 4 \"h8300_dst_operand\" \"\")\n \t    (match_dup 0)]))]\n-  \"0 /* Disabale because it break compiling fp-bit.c.  */\n+  \"0 /* Disable because it breaks compiling fp-bit.c.  */\n    && TARGET_H8300SX\n    && peep2_reg_dead_p (2, operands[0])\n    && !reg_overlap_mentioned_p (operands[0], operands[4])\""}, {"sha": "5e626640ae4634998f87d6597643061ca8f2892f", "filename": "gcc/config/i386/gmm_malloc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fi386%2Fgmm_malloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fi386%2Fgmm_malloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgmm_malloc.h?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -47,7 +47,7 @@ _mm_malloc (size_t size, size_t align)\n     return ((void *) 0);\n \n  /* Assume malloc'd pointer is aligned at least to sizeof (void*).\n-    If necesary, add another sizeof (void*) to store the value\n+    If necessary, add another sizeof (void*) to store the value\n     returned by malloc. Effectively this enforces a minimum alignment\n     of sizeof double. */     \n     if (align < 2 * sizeof (void *))"}, {"sha": "31f14bb1765cfc46287760677e2ec522ec726900", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -345,7 +345,7 @@\n    (and (match_code \"const_int\")\n         (match_test \"INTVAL (op) >= 0 && INTVAL (op) < 32\")))\n \n-;; True if OP is one of the immediate valuse 2, 4, 8, or 16.\n+;; True if OP is one of the immediate values 2, 4, 8, or 16.\n (define_predicate \"shladd_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) == 2 || INTVAL (op) == 4 ||"}, {"sha": "a01b2f7204ad1fdb9fba77dfb4ec43201f53e9da", "filename": "gcc/config/ip2k/libgcc.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fip2k%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fip2k%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Flibgcc.S?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -1498,7 +1498,7 @@ _abort:\n #endif\n \n #if defined(Lwrite)\n-\t/* Dummy entrypoint to suppress problems with glue code.  */\n+\t/* Dummy entry point to suppress problems with glue code.  */\n \t.sect\t.text.libgcc,\"ax\"\n \t.global\t_write\n \t.func\twrite, _write"}, {"sha": "911c4a4555d2965b5ce735f7ae18261fc868b677", "filename": "gcc/config/mips/mips-ps-3d.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -277,7 +277,7 @@\n    (set_attr \"mode\" \"SF\")])\n \n ;----------------------------------------------------------------------------\n-; Floating Point Comparisions for Scalars\n+; Floating Point Comparisons for Scalars\n ;----------------------------------------------------------------------------\n \n (define_insn \"mips_cabs_cond_<fmt>\"\n@@ -293,7 +293,7 @@\n \n \n ;----------------------------------------------------------------------------\n-; Floating Point Comparisions for Four Singles\n+; Floating Point Comparisons for Four Singles\n ;----------------------------------------------------------------------------\n \n (define_insn_and_split \"mips_c_cond_4s\"\n@@ -356,7 +356,7 @@\n \n \n ;----------------------------------------------------------------------------\n-; Floating Point Comparisions for Paired Singles\n+; Floating Point Comparisons for Paired Singles\n ;----------------------------------------------------------------------------\n \n (define_insn \"mips_c_cond_ps\""}, {"sha": "f0887d5c5f52af71945a1cfe65b4d02cff84fa20", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -1935,7 +1935,7 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total)\n \n \t Given the choice between \"li R1,0...255\" and \"move R1,R2\"\n \t (where R2 is a known constant), it is usually better to use \"li\",\n-\t since we do not want to unnessarily extend the lifetime of R2.  */\n+\t since we do not want to unnecessarily extend the lifetime of R2.  */\n       if (outer_code == SET\n \t  && INTVAL (x) >= 0\n \t  && INTVAL (x) < 256)\n@@ -9604,7 +9604,7 @@ mips_expand_builtin_direct (enum insn_code icode, rtx target, tree arglist)\n /* Expand a __builtin_mips_movt_*_ps() or __builtin_mips_movf_*_ps()\n    function (TYPE says which).  ARGLIST is the list of arguments to the\n    function, ICODE is the instruction that should be used to compare\n-   the first two arguments, and COND is the conditon it should test.\n+   the first two arguments, and COND is the condition it should test.\n    TARGET, if nonnull, suggests a good place to put the result.  */\n \n static rtx"}, {"sha": "4e31b2ccafb834de99382ff5c5f9380fcf81942f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -17188,7 +17188,7 @@ rs6000_rtx_costs (rtx x, int code, int outer_code, int *total)\n     case MEM:\n       /* When optimizing for size, MEM should be slightly more expensive\n \t than generating address, e.g., (plus (reg) (const)).\n-\t L1 cache latecy is about two instructions.  */\n+\t L1 cache latency is about two instructions.  */\n       *total = optimize_size ? COSTS_N_INSNS (1) + 1 : COSTS_N_INSNS (2);\n       return true;\n "}, {"sha": "f59317a68037d6b2db26b56a97d94252111bf904", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -2543,7 +2543,7 @@ legitimate_la_operand_p (register rtx op)\n   return FALSE;\n }\n \n-/* Return 1 if it is valid *and* preferrable to use LA to\n+/* Return 1 if it is valid *and* preferable to use LA to\n    compute the sum of OP1 and OP2.  */\n \n int"}, {"sha": "b729fea4fcc2bcf858dac3953ef1e95e4a6aade5", "filename": "gcc/config/sh/symbian.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fsh%2Fsymbian.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c112cf2bca734befb14c10e8ae1df17821505f44/gcc%2Fconfig%2Fsh%2Fsymbian.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsymbian.c?ref=c112cf2bca734befb14c10e8ae1df17821505f44", "patch": "@@ -230,8 +230,8 @@ sh_symbian_mark_dllexport (tree decl)\n      /* Remove DLL_IMPORT_PREFIX.\n \tNote - we do not issue a warning here.  In Symbian's environment it\n \tis legitimate for a prototype to be marked as dllimport and the\n-\tcorresponding defintion to be marked as dllexport.  The prototypes\n-\tare in headers used everywhere and the defintion is in a translation\n+\tcorresponding definition to be marked as dllexport.  The prototypes\n+\tare in headers used everywhere and the definition is in a translation\n \tunit which has included the header in order to ensure argument\n \tcorrectness.  */\n       oldname += strlen (DLL_IMPORT_PREFIX);\n@@ -448,8 +448,8 @@ sh_symbian_handle_dll_attribute (tree *pnode, tree name, tree args,\n \t}\n     }\n \n-  /* If the node is an overloaded constructor or desctructor, then we must\n-     make sure that the attribute is propogated along the overload chain,\n+  /* If the node is an overloaded constructor or destructor, then we must\n+     make sure that the attribute is propagated along the overload chain,\n      as it is these overloaded functions which will be emitted, rather than\n      the user declared constructor itself.  */\n   if (TREE_CODE (TREE_TYPE (node)) == METHOD_TYPE\n@@ -488,7 +488,7 @@ sh_symbian_handle_dll_attribute (tree *pnode, tree name, tree args,\n \n \t  symbian_add_attribute (function, attr);\n \n-\t  /* Propogate the attribute to any function thunks as well.  */\n+\t  /* Propagate the attribute to any function thunks as well.  */\n \t  for (thunk = DECL_THUNKS (function); thunk; thunk = TREE_CHAIN (thunk))\n \t    if (TREE_CODE (thunk) == FUNCTION_DECL)\n \t      symbian_add_attribute (thunk, attr);\n@@ -497,7 +497,7 @@ sh_symbian_handle_dll_attribute (tree *pnode, tree name, tree args,\n \n   if (TREE_CODE (node) == FUNCTION_DECL && DECL_VIRTUAL_P (node))\n     {\n-      /* Propogate the attribute to any thunks of this function.  */\n+      /* Propagate the attribute to any thunks of this function.  */\n       for (thunk = DECL_THUNKS (node); thunk; thunk = TREE_CHAIN (thunk))\n \tif (TREE_CODE (thunk) == FUNCTION_DECL)\n \t  symbian_add_attribute (thunk, attr);\n@@ -879,7 +879,7 @@ symbian_import_export_class (tree ctype, int import_export)\n   return import_export;\n }\n \n-/* Dummy defintion of this array for cc1 building purposes.  */\n+/* Dummy definition of this array for cc1 building purposes.  */\n tree cp_global_trees[CPTI_MAX] __attribute__((weak));\n \n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)"}]}