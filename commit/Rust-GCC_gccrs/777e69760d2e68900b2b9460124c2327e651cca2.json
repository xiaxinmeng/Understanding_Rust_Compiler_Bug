{"sha": "777e69760d2e68900b2b9460124c2327e651cca2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3ZTY5NzYwZDJlNjg5MDBiMmI5NDYwMTI0YzIzMjdlNjUxY2NhMg==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2013-03-28T20:33:15Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2013-03-28T20:33:15Z"}, "message": "[AArch64] Only maintain frame record when required or desired\n\nFrom-SVN: r197215", "tree": {"sha": "ff7fa57e34cbea528d986b1de7bf48c327f702da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff7fa57e34cbea528d986b1de7bf48c327f702da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/777e69760d2e68900b2b9460124c2327e651cca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777e69760d2e68900b2b9460124c2327e651cca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777e69760d2e68900b2b9460124c2327e651cca2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777e69760d2e68900b2b9460124c2327e651cca2/comments", "author": null, "committer": null, "parents": [{"sha": "2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b24855e1efd2caad72bf7b6132a3be0981cdfe3"}], "stats": {"total": 375, "additions": 370, "deletions": 5}, "files": [{"sha": "858d96ebd98d171ff5fb13cc958381e55664ca5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -1,3 +1,8 @@\n+2013-03-28  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/aarch64/aarch64.md (aarch64_can_eliminate): Keep frame\n+\trecord only when desired or required.\n+\n 2013-03-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*vec_extract2vdi_1): Merge with"}, {"sha": "6a024d0904464d7e5765de7dcaa364dfa4e05541", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -3879,14 +3879,21 @@ aarch64_can_eliminate (const int from, const int to)\n     }\n   else\n     {\n-      /* If we decided that we didn't need a frame pointer but then used\n-\t LR in the function, then we do need a frame pointer after all, so\n-\t prevent this elimination to ensure a frame pointer is used.  */\n-\n+      /* If we decided that we didn't need a leaf frame pointer but then used\n+\t LR in the function, then we'll want a frame pointer after all, so\n+\t prevent this elimination to ensure a frame pointer is used.\n+\n+\t NOTE: the original value of flag_omit_frame_pointer gets trashed\n+\t IFF flag_omit_leaf_frame_pointer is true, so we check the value\n+\t of faked_omit_frame_pointer here (which is true when we always\n+\t wish to keep non-leaf frame pointers but only wish to keep leaf frame\n+\t pointers when LR is clobbered).  */\n       if (from == FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM\n-\t  && df_regs_ever_live_p (LR_REGNUM))\n+\t  && df_regs_ever_live_p (LR_REGNUM)\n+\t  && faked_omit_frame_pointer)\n \treturn false;\n     }\n+\n   return true;\n }\n "}, {"sha": "c1f0392b0bc84f6aa2d2c3013659b97e4f5ca520", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -1,3 +1,16 @@\n+2013-03-28  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* gcc.target/aarch64/inc/asm-adder-clobber-lr.c: New test.\n+\t* gcc.target/aarch64/inc/asm-adder-no-clobber-lr.c: Likewise.\n+\t* gcc.target/aarch64/test-framepointer-1.c: Likewise.\n+\t* gcc.target/aarch64/test-framepointer-2.c: Likewise.\n+\t* gcc.target/aarch64/test-framepointer-3.c: Likewise.\n+\t* gcc.target/aarch64/test-framepointer-4.c: Likewise.\n+\t* gcc.target/aarch64/test-framepointer-5.c: Likewise.\n+\t* gcc.target/aarch64/test-framepointer-6.c: Likewise.\n+\t* gcc.target/aarch64/test-framepointer-7.c: Likewise.\n+\t* gcc.target/aarch64/test-framepointer-8.c: Likewise.\n+\n 2013-03-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56725"}, {"sha": "8a02abc07266c43c8a19076d9956416324e4fcbc", "filename": "gcc/testsuite/gcc.target/aarch64/asm-adder-clobber-lr.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-adder-clobber-lr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-adder-clobber-lr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-adder-clobber-lr.c?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -0,0 +1,48 @@\n+extern void abort (void);\n+\n+int\n+adder (int a, int b)\n+{\n+  int result;\n+  __asm__ (\"add %w0,%w1,%w2\" : \"=r\"(result) : \"r\"(a), \"r\"(b) : \"x30\");\n+  return result;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  int i;\n+  int total = argc;\n+  for (i = 0; i < 20; i++)\n+    total = adder (total, i);\n+\n+  if (total != (190 + argc))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+extern void abort (void);\n+\n+int\n+adder (int a, int b)\n+{\n+  int result;\n+  __asm__ (\"add %w0,%w1,%w2\" : \"=r\"(result) : \"r\"(a), \"r\"(b) : \"x30\");\n+  return result;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  int i;\n+  int total = argc;\n+  for (i = 0; i < 20; i++)\n+    total = adder (total, i);\n+\n+  if (total != (190 + argc))\n+    abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "f60cfd3ed6416a3b0faf186d71e935676c65fe20", "filename": "gcc/testsuite/gcc.target/aarch64/asm-adder-no-clobber-lr.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-adder-no-clobber-lr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-adder-no-clobber-lr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-adder-no-clobber-lr.c?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -0,0 +1,48 @@\n+extern void abort (void);\n+\n+int\n+adder (int a, int b)\n+{\n+  int result;\n+  __asm__ (\"add %w0,%w1,%w2\" : \"=r\"(result) : \"r\"(a), \"r\"(b) : );\n+  return result;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  int i;\n+  int total = argc;\n+  for (i = 0; i < 20; i++)\n+    total = adder (total, i);\n+\n+  if (total != (190 + argc))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+extern void abort (void);\n+\n+int\n+adder (int a, int b)\n+{\n+  int result;\n+  __asm__ (\"add %w0,%w1,%w2\" : \"=r\"(result) : \"r\"(a), \"r\"(b) : );\n+  return result;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  int i;\n+  int total = argc;\n+  for (i = 0; i < 20; i++)\n+    total = adder (total, i);\n+\n+  if (total != (190 + argc))\n+    abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "ae109591744750b4563d7fef0155b4c2cbb0cfd5", "filename": "gcc/testsuite/gcc.target/aarch64/test-framepointer-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-1.c?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-no-clobber-lr.c\"\n+\n+/* omit-frame-pointer is FALSE.\n+   omit-leaf-frame-pointer is FALSE.\n+   LR is not being clobbered in the leaf.\n+\n+   With no frame pointer omissions, we expect a frame record\n+   for main and the leaf.  */\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-no-clobber-lr.c\"\n+\n+/* omit-frame-pointer is FALSE.\n+   omit-leaf-frame-pointer is FALSE.\n+   LR is not being clobbered in the leaf.\n+\n+   With no frame pointer omissions, we expect a frame record\n+   for main and the leaf.  */\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "71bc58da84f84c54df7ee5704df742ae3bd9bb63", "filename": "gcc/testsuite/gcc.target/aarch64/test-framepointer-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-2.c?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -mno-omit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-no-clobber-lr.c\"\n+\n+/* omit-frame-pointer is TRUE.\n+   omit-leaf-frame-pointer is false, but irrelevant due to omit-frame-pointer.\n+   LR is not being clobbered in the leaf.\n+\n+   Since we asked to have no frame pointers anywhere, we expect no frame\n+   record in main or the leaf.  */\n+\n+/* { dg-final { scan-assembler-not \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -mno-omit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-no-clobber-lr.c\"\n+\n+/* omit-frame-pointer is TRUE.\n+   omit-leaf-frame-pointer is false, but irrelevant due to omit-frame-pointer.\n+   LR is not being clobbered in the leaf.\n+\n+   Since we asked to have no frame pointers anywhere, we expect no frame\n+   record in main or the leaf.  */\n+\n+/* { dg-final { scan-assembler-not \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "de1b32c18c31d9300830befc2e0c9e37a4f1a149", "filename": "gcc/testsuite/gcc.target/aarch64/test-framepointer-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-3.c?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -momit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-no-clobber-lr.c\"\n+\n+/* omit-frame-pointer is TRUE.\n+   omit-leaf-frame-pointer is true, but irrelevant due to omit-frame-pointer.\n+   LR is not being clobbered in the leaf.\n+\n+   Since we asked to have no frame pointers anywhere, we expect no frame\n+   record in main or the leaf.  */\n+\n+/* { dg-final { scan-assembler-not \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -momit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-no-clobber-lr.c\"\n+\n+/* omit-frame-pointer is TRUE.\n+   omit-leaf-frame-pointer is true, but irrelevant due to omit-frame-pointer.\n+   LR is not being clobbered in the leaf.\n+\n+   Since we asked to have no frame pointers anywhere, we expect no frame\n+   record in main or the leaf.  */\n+\n+/* { dg-final { scan-assembler-not \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d339263c4c3a801f82681c95363b72a728fb98fd", "filename": "gcc/testsuite/gcc.target/aarch64/test-framepointer-4.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-4.c?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer -momit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-no-clobber-lr.c\"\n+\n+/* omit-frame-pointer is FALSE.\n+   omit-leaf-frame-pointer is TRUE.\n+   LR is not being clobbered in the leaf.\n+\n+   Unless we are removing all frame records, it's OK to remove the frame\n+   record for a leaf where LR is not clobbered.  Therefore, we expect a\n+   frame record only in main.  */\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 1 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer -momit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-no-clobber-lr.c\"\n+\n+/* omit-frame-pointer is FALSE.\n+   omit-leaf-frame-pointer is TRUE.\n+   LR is not being clobbered in the leaf.\n+\n+   Unless we are removing all frame records, it's OK to remove the frame\n+   record for a leaf where LR is not clobbered.  Therefore, we expect a\n+   frame record only in main.  */\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 1 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4be297a5e4a36a4294ef0a8b1b068c0e28333087", "filename": "gcc/testsuite/gcc.target/aarch64/test-framepointer-5.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-5.c?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-clobber-lr.c\"\n+\n+/* omit-frame-pointer is FALSE.\n+   omit-leaf-frame-pointer is FALSE.\n+   LR is being clobbered in the leaf.\n+\n+   With no frame pointer omissions, we expect a frame record for main\n+   and the leaf.  */\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-clobber-lr.c\"\n+\n+/* omit-frame-pointer is FALSE.\n+   omit-leaf-frame-pointer is FALSE.\n+   LR is being clobbered in the leaf.\n+\n+   With no frame pointer omissions, we expect a frame record for main\n+   and the leaf.  */\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "bf53962608a824b7fa09cf9675d918dcc4d77566", "filename": "gcc/testsuite/gcc.target/aarch64/test-framepointer-6.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-6.c?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -mno-omit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-clobber-lr.c\"\n+\n+/* omit-frame-pointer is TRUE.\n+   omit-leaf-frame-pointer is false, but irrelevant due to omit-frame-pointer.\n+   LR is being clobbered in the leaf.\n+\n+   Since we asked to have no frame pointers anywhere, we expect no frame\n+   record in main or the leaf.  */\n+\n+/* { dg-final { scan-assembler-not \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -mno-omit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-clobber-lr.c\"\n+\n+/* omit-frame-pointer is TRUE.\n+   omit-leaf-frame-pointer is false, but irrelevant due to omit-frame-pointer.\n+   LR is being clobbered in the leaf.\n+\n+   Since we asked to have no frame pointers anywhere, we expect no frame\n+   record in main or the leaf.  */\n+\n+/* { dg-final { scan-assembler-not \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9e88ae3bd6a8c56275879913286b6d3b0c8724e7", "filename": "gcc/testsuite/gcc.target/aarch64/test-framepointer-7.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-7.c?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -momit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-clobber-lr.c\"\n+\n+/* omit-frame-pointer is TRUE.\n+   omit-leaf-frame-pointer is true, but irrelevant due to omit-frame-pointer.\n+   LR is being clobbered in the leaf.\n+\n+   Since we asked to have no frame pointers anywhere, we expect no frame\n+   record in main or the leaf.  */\n+\n+/* { dg-final { scan-assembler-not \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -momit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-clobber-lr.c\"\n+\n+/* omit-frame-pointer is TRUE.\n+   omit-leaf-frame-pointer is true, but irrelevant due to omit-frame-pointer.\n+   LR is being clobbered in the leaf.\n+\n+   Since we asked to have no frame pointers anywhere, we expect no frame\n+   record in main or the leaf.  */\n+\n+/* { dg-final { scan-assembler-not \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "08d7667ea7716f86b5e467c3b6e017f3155a8b0f", "filename": "gcc/testsuite/gcc.target/aarch64/test-framepointer-8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777e69760d2e68900b2b9460124c2327e651cca2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-framepointer-8.c?ref=777e69760d2e68900b2b9460124c2327e651cca2", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer -momit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-clobber-lr.c\"\n+\n+/* omit-frame-pointer is FALSE.\n+   omit-leaf-frame-pointer is TRUE.\n+   LR is being clobbered in the leaf.\n+\n+   Unless we are removing all frame records (which we aren't), it's\n+   not OK to remove the frame record for a leaf where LR is clobbered.\n+   Therefore, we expect a frame record in main and leaf.  */\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer -momit-leaf-frame-pointer -fno-inline --save-temps\" } */\n+\n+#include \"asm-adder-clobber-lr.c\"\n+\n+/* omit-frame-pointer is FALSE.\n+   omit-leaf-frame-pointer is TRUE.\n+   LR is being clobbered in the leaf.\n+\n+   Unless we are removing all frame records (which we aren't), it's\n+   not OK to remove the frame record for a leaf where LR is clobbered.\n+   Therefore, we expect a frame record in main and leaf.  */\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}