{"sha": "94dccd9d27e6b682760440cc5693e7f049676ae1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRkY2NkOWQyN2U2YjY4Mjc2MDQ0MGNjNTY5M2U3ZjA0OTY3NmFlMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-31T20:19:31Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-31T20:19:31Z"}, "message": "(shorten_compare): Undo previous change.\n\nInstead, just suppress warnings if both args are constant.\n\nFrom-SVN: r5957", "tree": {"sha": "43562a24742295ea60d48a89553e59f1b65a520a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43562a24742295ea60d48a89553e59f1b65a520a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94dccd9d27e6b682760440cc5693e7f049676ae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94dccd9d27e6b682760440cc5693e7f049676ae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94dccd9d27e6b682760440cc5693e7f049676ae1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94dccd9d27e6b682760440cc5693e7f049676ae1/comments", "author": null, "committer": null, "parents": [{"sha": "0c316b201f9ba9e2627615d8dc9860297fb7c8c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c316b201f9ba9e2627615d8dc9860297fb7c8c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c316b201f9ba9e2627615d8dc9860297fb7c8c8"}], "stats": {"total": 13, "additions": 4, "deletions": 9}, "files": [{"sha": "58c83a6f154357c072ff61c3107041c2bd47a83c", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94dccd9d27e6b682760440cc5693e7f049676ae1/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94dccd9d27e6b682760440cc5693e7f049676ae1/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=94dccd9d27e6b682760440cc5693e7f049676ae1", "patch": "@@ -1236,6 +1236,8 @@ binary_op_error (code)\n /* Subroutine of build_binary_op, used for comparison operations.\n    See if the operands have both been converted from subword integer types\n    and, if so, perhaps change them both back to their original type.\n+   This function is also responsible for converting the two operands\n+   to the proper common type for comparison.\n \n    The arguments of this function are all pointers to local variables\n    of build_binary_op: OP0_PTR is &OP0, OP1_PTR is &OP1,\n@@ -1259,13 +1261,6 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n   tree primop0, primop1;\n   enum tree_code code = *rescode_ptr;\n \n-  /* Don't do anything if both args are constant.\n-     This avoids confusing warnings.  The caller will fold properly.  */\n-  if ((TREE_CODE (op0) == INTEGER_CST || TREE_CODE (op0) == REAL_CST)\n-      &&\n-      (TREE_CODE (op1) == INTEGER_CST || TREE_CODE (op1) == REAL_CST))\n-    return 0;\n-\n   /* Throw away any conversions to wider types\n      already present in the operands.  */\n \n@@ -1452,7 +1447,7 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t  type = unsigned_type (type);\n \t}\n \n-      if (!max_gt && !unsignedp0)\n+      if (!max_gt && !unsignedp0 && TREE_CODE (primop1) != INTEGER_CST)\n \t{\n \t  /* This is the case of (char)x >?< 0x80, which people used to use\n \t     expecting old C compilers to change the 0x80 into -0x80.  */\n@@ -1462,7 +1457,7 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t    warning (\"comparison is always 1 due to limited range of data type\");\n \t}\n \n-      if (!min_lt && unsignedp0)\n+      if (!min_lt && unsignedp0 && TREE_CODE (primop1) != INTEGER_CST)\n \t{\n \t  /* This is the case of (unsigned char)x >?< -1 or < 0.  */\n \t  if (val == integer_zero_node)"}]}