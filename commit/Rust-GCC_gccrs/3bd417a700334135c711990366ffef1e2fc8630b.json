{"sha": "3bd417a700334135c711990366ffef1e2fc8630b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JkNDE3YTcwMDMzNDEzNWM3MTE5OTAzNjZmZmVmMWUyZmM4NjMwYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-04-20T22:47:43Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-04-20T22:47:43Z"}, "message": "BufferedReader.java, [...]: Imports from Classpath.\n\n\t* java/io/BufferedReader.java, java/io/BufferedWriter.java,\n\tjava/io/DataInput.java, java/io/DataOutput.java: Imports from\n\tClasspath.\n\nFrom-SVN: r65868", "tree": {"sha": "8d3681222817096386ac878534861cd66c371acf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d3681222817096386ac878534861cd66c371acf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bd417a700334135c711990366ffef1e2fc8630b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd417a700334135c711990366ffef1e2fc8630b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd417a700334135c711990366ffef1e2fc8630b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd417a700334135c711990366ffef1e2fc8630b/comments", "author": null, "committer": null, "parents": [{"sha": "ef963bc8a17d341114bde2cbc082830f92455f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef963bc8a17d341114bde2cbc082830f92455f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef963bc8a17d341114bde2cbc082830f92455f0f"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "319e3fbf48e585f46f1110c88a85102e7781a49d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd417a700334135c711990366ffef1e2fc8630b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd417a700334135c711990366ffef1e2fc8630b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3bd417a700334135c711990366ffef1e2fc8630b", "patch": "@@ -1,3 +1,9 @@\n+2003-04-20  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/io/BufferedReader.java, java/io/BufferedWriter.java,\n+\tjava/io/DataInput.java, java/io/DataOutput.java: Imports from\n+\tClasspath.\n+\n 2003-04-19  Tom Tromey  <tromey@redhat.com>\n \n \t* java/sql/Date.java, java/sql/DriverManager.java,"}, {"sha": "eb2e2d29efe696862a12e3cac10ae0ea8b6d3144", "filename": "libjava/java/io/BufferedReader.java", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd417a700334135c711990366ffef1e2fc8630b/libjava%2Fjava%2Fio%2FBufferedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd417a700334135c711990366ffef1e2fc8630b/libjava%2Fjava%2Fio%2FBufferedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedReader.java?ref=3bd417a700334135c711990366ffef1e2fc8630b", "patch": "@@ -1,5 +1,6 @@\n /* BufferedReader.java\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 \n+     Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -48,7 +49,7 @@\n  * underlying implementation to provide a possibly more efficient read\n  * mechanism.  It maintains the buffer and buffer state in instance \n  * variables that are available to subclasses.  The default buffer size\n- * of 512 chars can be overridden by the creator of the stream.\n+ * of 8192 chars can be overridden by the creator of the stream.\n  * <p>\n  * This class also implements mark/reset functionality.  It is capable\n  * of remembering any number of input chars, to the limits of\n@@ -89,7 +90,7 @@ public class BufferedReader extends Reader\n \n   /**\n     * Create a new <code>BufferedReader</code> that will read from the \n-    * specified subordinate stream with a default buffer size of 4096 chars.\n+    * specified subordinate stream with a default buffer size of 8192 chars.\n     *\n     * @param in The subordinate stream to read from\n     */\n@@ -104,7 +105,7 @@ public BufferedReader(Reader in)\n    * caller.\n    *\n    * @param in The subordinate stream to read from\n-   * @param bufsize The buffer size to use\n+   * @param size The buffer size to use\n    */\n   public BufferedReader(Reader in, int size)\n   {\n@@ -114,7 +115,8 @@ public BufferedReader(Reader in, int size)\n   }\n \n   /**\n-   * This method closes the stream \n+   * This method closes the underlying stream and frees any associated\n+   * resources.\n    *\n    * @exception IOException If an error occurs\n    */\n@@ -143,7 +145,7 @@ public boolean markSupported()\n   /**\n    * Mark a position in the input to which the stream can be\n    * \"reset\" by calling the <code>reset()</code> method.  The parameter\n-   * <code>readlimit</code> is the number of chars that can be read from the \n+   * <code>readLimit</code> is the number of chars that can be read from the \n    * stream after setting the mark before the mark becomes invalid.  For\n    * example, if <code>mark()</code> is called with a read limit of 10, then \n    * when 11 chars of data are read from the stream before the \n@@ -155,7 +157,7 @@ public boolean markSupported()\n    * not dependent on the subordinate stream supporting mark/reset\n    * functionality.\n    *\n-   * @param readlimit The number of chars that can be read before the mark \n+   * @param readLimit The number of chars that can be read before the mark \n    *        becomes invalid\n    *\n    * @exception IOException If an error occurs\n@@ -240,7 +242,7 @@ public void reset() throws IOException\n \n   /**\n    * This method determines whether or not a stream is ready to be read.  If\n-   * This method returns <code>false</code> then this stream could (but is\n+   * this method returns <code>false</code> then this stream could (but is\n    * not guaranteed to) block on the next read attempt.\n    *\n    * @return <code>true</code> if this stream is ready to be read, \n@@ -478,7 +480,7 @@ public String readLine() throws IOException\n    * <code>skip</code> method on the underlying stream to skip the \n    * remaining chars.\n    *\n-   * @param num_chars The requested number of chars to skip\n+   * @param numChars The requested number of chars to skip\n    *\n    * @return The actual number of chars skipped.\n    *"}, {"sha": "b35ca6ea3903af6ecef6e195cdbbeba538617267", "filename": "libjava/java/io/BufferedWriter.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd417a700334135c711990366ffef1e2fc8630b/libjava%2Fjava%2Fio%2FBufferedWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd417a700334135c711990366ffef1e2fc8630b/libjava%2Fjava%2Fio%2FBufferedWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedWriter.java?ref=3bd417a700334135c711990366ffef1e2fc8630b", "patch": "@@ -61,7 +61,7 @@ public class BufferedWriter extends Writer\n   /**\n    * This method initializes a new <code>BufferedWriter</code> instance\n    * that will write to the specified subordinate <code>Writer</code>\n-   * and which will use a default buffer size of 512 chars.\n+   * and which will use a default buffer size of 8192 chars.\n    *\n    * @param out The underlying <code>Writer</code> to write data to\n    */"}, {"sha": "2d92006618a22e6d7dde5e0fbf4a65c2ed4a9707", "filename": "libjava/java/io/DataInput.java", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd417a700334135c711990366ffef1e2fc8630b/libjava%2Fjava%2Fio%2FDataInput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd417a700334135c711990366ffef1e2fc8630b/libjava%2Fjava%2Fio%2FDataInput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataInput.java?ref=3bd417a700334135c711990366ffef1e2fc8630b", "patch": "@@ -68,6 +68,8 @@\n    * @exception EOFException If end of file is reached before \n    * reading the boolean\n    * @exception IOException If any other error occurs\n+   *\n+   * @see DataOutput#writeBoolean\n    */\n   boolean readBoolean() throws EOFException, IOException;\n \n@@ -84,7 +86,7 @@\n    * @exception EOFException If end of file is reached before reading the byte\n    * @exception IOException If any other error occurs\n    *\n-   * @see DataOutput#writeBoolean\n+   * @see DataOutput#writeByte\n    */\n   byte readByte() throws EOFException, IOException;\n \n@@ -143,7 +145,7 @@\n    * first and second byte read from the stream respectively, they will be\n    * transformed to a <code>short</code> in the following manner:\n    * <p>\n-   * <code>(short)((byte1 << 8) + (byte2 & 0xFF))</code>\n+   * <code>(short)(((byte1 & 0xFF) << 8) + (byte2 & 0xFF))</code>\n    * <p>\n    * The value returned is in the range of -32768 to 32767.\n    * <p>\n@@ -234,7 +236,7 @@\n    * <code>(long)(((byte1 & 0xFF) << 56) + ((byte2 & 0xFF) << 48) + \n    * ((byte3 & 0xFF) << 40) + ((byte4 & 0xFF) << 32) + \n    * ((byte5 & 0xFF) << 24) + ((byte6 & 0xFF) << 16) + \n-   * ((byte7 & 0xFF) << 8) + (byte9 & 0xFF)))\n+   * ((byte7 & 0xFF) << 8) + (byte8 & 0xFF)))\n    * </code>\n    * <p>\n    * The value returned is in the range of -9223372036854775808 to\n@@ -316,14 +318,10 @@\n    * charaters are discarded and are not returned as part of the string.\n    * A line is also terminated by an end of file condition.\n    * <p>\n-   * This method can read data that was written by an object implementing the\n-   * <code>writeLine()</code> method in <code>DataOutput</code>.\n    *\n    * @return The line read as a <code>String</code>\n    *\n    * @exception IOException If an error occurs\n-   *\n-   * @see DataOutput#writeLine\n    */\n   String readLine() throws IOException;\n \n@@ -442,6 +440,7 @@ void readFully(byte[] buf, int offset, int len)\n    * This method skips and discards the specified number of bytes in an\n    * input stream.  Note that this method may skip less than the requested\n    * number of bytes.  The actual number of bytes skipped is returned.\n+   * No bytes are skipped if a negative number is passed to this method.\n    *\n    * @param numBytes The number of bytes to skip\n    *"}, {"sha": "e07eb6289694bb8fedff7e73d855613ee27a771a", "filename": "libjava/java/io/DataOutput.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd417a700334135c711990366ffef1e2fc8630b/libjava%2Fjava%2Fio%2FDataOutput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd417a700334135c711990366ffef1e2fc8630b/libjava%2Fjava%2Fio%2FDataOutput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataOutput.java?ref=3bd417a700334135c711990366ffef1e2fc8630b", "patch": "@@ -111,7 +111,7 @@\n   void writeChar(int value) throws IOException;\n \n   /**\n-   * This method writes a Java char value to an output stream.  The\n+   * This method writes a Java short value to an output stream.  The\n    * char to be written will be in the lowest 16 bits of the <code>int</code>\n    * value passed.  These bytes will be written \"big endian\".  That is,\n    * with the high byte written first in the following manner:\n@@ -236,7 +236,7 @@\n   void writeBytes(String value) throws IOException;\n \n   /**\n-   * This method writes all the bytes of a <code>String</code> to an \n+   * This method writes all the characters of a <code>String</code> to an \n    * output stream as an array of <code>char</code>'s. Each character\n    * is written using the method specified in the <code>writeChar</code>\n    * method. "}]}