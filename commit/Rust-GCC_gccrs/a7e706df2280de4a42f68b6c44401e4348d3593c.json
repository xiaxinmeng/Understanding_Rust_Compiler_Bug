{"sha": "a7e706df2280de4a42f68b6c44401e4348d3593c", "node_id": "C_kwDOANBUbNoAKGE3ZTcwNmRmMjI4MGRlNGE0MmY2OGI2YzQ0NDAxZTQzNDhkMzU5M2M", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-20T11:58:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-21T13:02:58Z"}, "message": "tree-optimization/108793 - niter compute type mismatch\n\nWhen computing the number of iterations until wrap types are mixed up,\neventually leading to checking ICEs with a pointer bitwise inversion.\nThe following uses niter_type for the calculation.\n\n\tPR tree-optimization/108793\n\t* tree-ssa-loop-niter.cc (number_of_iterations_until_wrap):\n\tUse convert operands to niter_type when computing num.\n\n\t* gcc.dg/torture/pr108793.c: New testcase.", "tree": {"sha": "e693cda033b51bd08424591afdde3fa0a296f2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e693cda033b51bd08424591afdde3fa0a296f2d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7e706df2280de4a42f68b6c44401e4348d3593c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e706df2280de4a42f68b6c44401e4348d3593c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7e706df2280de4a42f68b6c44401e4348d3593c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e706df2280de4a42f68b6c44401e4348d3593c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e28c5b33b987374f753b32306b0d3ecf610b64f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28c5b33b987374f753b32306b0d3ecf610b64f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e28c5b33b987374f753b32306b0d3ecf610b64f2"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "83973eb05d9088892a3951bb5177dabf1b0557f0", "filename": "gcc/testsuite/gcc.dg/torture/pr108793.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e706df2280de4a42f68b6c44401e4348d3593c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr108793.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e706df2280de4a42f68b6c44401e4348d3593c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr108793.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr108793.c?ref=a7e706df2280de4a42f68b6c44401e4348d3593c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+typedef int *p;\n+extern p a[], b[];\n+int f () {\n+  int n = 0;\n+  for (p* i = &a[0]; i > &b[0]; i++)\n+    n++;\n+  return n;\n+}"}, {"sha": "dc4c7a418f644160f6ee48a190c8bebf70f8914f", "filename": "gcc/tree-ssa-loop-niter.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e706df2280de4a42f68b6c44401e4348d3593c/gcc%2Ftree-ssa-loop-niter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e706df2280de4a42f68b6c44401e4348d3593c/gcc%2Ftree-ssa-loop-niter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.cc?ref=a7e706df2280de4a42f68b6c44401e4348d3593c", "patch": "@@ -1494,8 +1494,9 @@ number_of_iterations_until_wrap (class loop *loop, tree type, affine_iv *iv0,\n       if (integer_zerop (assumptions))\n \treturn false;\n \n-      num = fold_build2 (MINUS_EXPR, niter_type, wide_int_to_tree (type, max),\n-\t\t\t iv1->base);\n+      num = fold_build2 (MINUS_EXPR, niter_type,\n+\t\t\t wide_int_to_tree (niter_type, max),\n+\t\t\t fold_convert (niter_type, iv1->base));\n \n       /* When base has the form iv + 1, if we know iv >= n, then iv + 1 < n\n \t only when iv + 1 overflows, i.e. when iv == TYPE_VALUE_MAX.  */\n@@ -1531,8 +1532,9 @@ number_of_iterations_until_wrap (class loop *loop, tree type, affine_iv *iv0,\n       if (integer_zerop (assumptions))\n \treturn false;\n \n-      num = fold_build2 (MINUS_EXPR, niter_type, iv0->base,\n-\t\t\t wide_int_to_tree (type, min));\n+      num = fold_build2 (MINUS_EXPR, niter_type,\n+\t\t\t fold_convert (niter_type, iv0->base),\n+\t\t\t wide_int_to_tree (niter_type, min));\n       low = min;\n       if (TREE_CODE (iv0->base) == INTEGER_CST)\n \thigh = wi::to_wide (iv0->base) + 1;\n@@ -1546,7 +1548,6 @@ number_of_iterations_until_wrap (class loop *loop, tree type, affine_iv *iv0,\n \n   /* (delta + step - 1) / step */\n   step = fold_convert (niter_type, step);\n-  num = fold_convert (niter_type, num);\n   num = fold_build2 (PLUS_EXPR, niter_type, num, step);\n   niter->niter = fold_build2 (FLOOR_DIV_EXPR, niter_type, num, step);\n "}]}