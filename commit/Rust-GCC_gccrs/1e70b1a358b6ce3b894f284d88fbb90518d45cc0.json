{"sha": "1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU3MGIxYTM1OGI2Y2UzYjg5NGYyODRkODhmYmI5MDUxOGQ0NWNjMA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-10-18T20:19:53Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-10-18T20:19:53Z"}, "message": "revamp ada.numerics.aux\n\nInstead of mapping elementary functions for all types to a single\ntype, use the intrinsics available for the various base types.\n\nA new Ada.Numerics.Aux_Generic_Float is introduced to explicitly\ndispatch, based on the 'Digits attribute of the base type, to the\nvarious newly-added Aux_Short_Float, Aux_Float, Aux_Long_Float, or\nAux_Long_Long_Float.\n\nThe Aux_Short_Float unit is implemented in terms of the Aux_Float one,\nand the others rely on the elementary functions from the C Math\nlibrary for float, double and long double types, respectively.\n\nAn Aux_Linker_Options is added, and units that import intrinsics from\nlibm/libc depend on it to provide the \"-lm\" linker option if needed.\nThe option is provided by default, but there is an alternate version\nthat doesn't, that is used for vxworks targets.\n\nThe Aux variant that used to open-code Sin and Cos for the ancient\nppc-darwin, because of insufficient precision in libc, is dropped,\nalong with the alternate dummy body for Aux.  Both are presumed no\nlonger needed.\n\nThe original Ada.Numerics.Aux is retained, for backward compatibility,\nas a wrapper for a newly-added Aux_Compat, that renames\nAux_Long_Float, except on x86, in which an alternate version renames\nAux_Long_Long_Float.\n\nGeneric_Elementary_Functions and Generic_Complex_Types are adjusted to\nuse Aux_Generic_Float, avoiding the type conversions and inefficiencies of\ncomputing results in higher precision than requested.\n\nGeneric_Complex_Elementary_Functions is adjusted to enable an\nadditional instance of the sincos optimization, even without -gnatn.\n\n\nfor  gcc/ada/ChangeLog\n\n\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Compile Ada.Numerics\n\tchild units Aux_Generic_Float, Aux_Long_Long_Float, Aux_Long_Float,\n\tAux_Float, Aux_Short_Float, Aux_Compat, and Aux_Linker_Options.\n\t(X86_TARGET_PAIRS): Drop dummy body for Aux.  Use x86 version\n\tof Aux_Compat.\n\t(X86_64_TARGET_PAIRS): Likewise.\n\t(LIBGNAT_TARGET_PAIRS): On VxWorks, select the nolibm\n\tvariants.  Drop the darwin version of Aux.  Drop the redundant\n\tlibc-x86 numaux variants on x86* kfreebsd variants.\n\t* libgnat/a-nagefl.ads: New Aux_Generic_Float.\n\t* libgnat/a-naliop.ads: New Aux_Linker_Options.\n\t* libgnat/a-naliop__nolibm.ads: New.\n\t* libgnat/a-nallfl.ads: New Aux_Long_Long_Float.\n\t* libgnat/a-nalofl.ads: New Aux_Long_Float.\n\t* libgnat/a-nuaufl.ads: New Aux_Float.\n\t* libgnat/a-nashfl.ads: New Aux_Short_Float.\n\t* libgnat/a-ngcefu.adb (Exp): Factor out the Im (X) passed to\n\tSin and Cos in the Complex variant too.\n\t* libgnat/a-ngcoty.adb: Switch to Aux_Generic_Float.  Drop\n\tredundant conversions.\n\t* libgnat/a-ngelfu.adb: Likewise.\n\t* libgnat/a-nuauco.ads: New Aux_Compat.\n\t* libgnat/a-nuauco__x86.ads: New.\n\t* libgnat/a-numaux.ads: Replace with Compat wrapper.\n\t* libgnat/a-numaux__darwin.adb: Remove.\n\t* libgnat/a-numaux__darwin.ads: Remove.\n\t* libgnat/a-numaux__dummy.adb: Remove.\n\t* libgnat/a-numaux__libc-x86.ads: Remove.\n\t* libgnat/a-numaux__vxworks.ads: Remove.", "tree": {"sha": "c944e5cf3eb433dcea8fbc2ad4a850c7d38846cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c944e5cf3eb433dcea8fbc2ad4a850c7d38846cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/comments", "author": null, "committer": null, "parents": [{"sha": "476036b35c5e9203735b19b9967ff0e9932c8c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476036b35c5e9203735b19b9967ff0e9932c8c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476036b35c5e9203735b19b9967ff0e9932c8c31"}], "stats": {"total": 1075, "additions": 598, "deletions": 477}, "files": [{"sha": "2bc95dba7aa920c7812b1d96f8808cc938a1440e", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -234,6 +234,13 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-nudira$(objext) \\\n   a-nuelfu$(objext) \\\n   a-nuflra$(objext) \\\n+  a-nagefl$(objext) \\\n+  a-nallfl$(objext) \\\n+  a-nalofl$(objext) \\\n+  a-nuaufl$(objext) \\\n+  a-nashfl$(objext) \\\n+  a-nuauco$(objext) \\\n+  a-naliop$(objext) \\\n   a-numaux$(objext) \\\n   a-numeri$(objext) \\\n   a-nurear$(objext) \\\n@@ -834,13 +841,11 @@ ATOMICS_BUILTINS_TARGET_PAIRS = \\\n # Special version of units for x86 and x86-64 platforms.\n \n X86_TARGET_PAIRS = \\\n-  a-numaux.ads<libgnat/a-numaux__libc-x86.ads \\\n-  a-numaux.adb<libgnat/a-numaux__dummy.adb \\\n+  a-nuauco.ads<libgnat/a-nuauco__x86.ads \\\n   s-atocou.adb<libgnat/s-atocou__x86.adb\n \n X86_64_TARGET_PAIRS = \\\n-  a-numaux.ads<libgnat/a-numaux__libc-x86.ads \\\n-  a-numaux.adb<libgnat/a-numaux__dummy.adb \\\n+  a-nuauco.ads<libgnat/a-nuauco__x86.ads \\\n   s-atocou.adb<libgnat/s-atocou__builtin.adb\n \n # Implementation of symbolic traceback based on dwarf\n@@ -916,7 +921,7 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworksspe vxworks7% vxworks7spe\n \n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<libgnarl/a-intnam__vxworks.ads \\\n-  a-numaux.ads<libgnat/a-numaux__vxworks.ads \\\n+  a-naliop.ads<libgnat/a-naliop__nolibm.ads \\\n   s-inmaop.adb<libgnarl/s-inmaop__vxworks.adb \\\n   s-intman.ads<libgnarl/s-intman__vxworks.ads \\\n   s-intman.adb<libgnarl/s-intman__vxworks.adb \\\n@@ -1039,7 +1044,7 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworksae vxworksaespe,$(target_cpu) $(t\n   LIBGNAT_TARGET_PAIRS = \\\n   a-elchha.adb<libgnat/a-elchha__vxworks-ppc-full.adb \\\n   a-intnam.ads<libgnarl/a-intnam__vxworks.ads \\\n-  a-numaux.ads<libgnat/a-numaux__vxworks.ads \\\n+  a-naliop.ads<libgnat/a-naliop__nolibm.ads \\\n   g-io.adb<hie/g-io__vxworks-cert.adb \\\n   s-inmaop.adb<libgnarl/s-inmaop__vxworks.adb \\\n   s-interr.adb<libgnarl/s-interr__vxworks.adb \\\n@@ -1095,7 +1100,7 @@ ifeq ($(strip $(filter-out %86 wrs vxworksae,$(target_cpu) $(target_vendor) $(ta\n   LIBGNAT_TARGET_PAIRS = \\\n   a-elchha.adb<libgnat/a-elchha__vxworks-ppc-full.adb \\\n   a-intnam.ads<libgnarl/a-intnam__vxworks.ads \\\n-  a-numaux.ads<libgnat/a-numaux__vxworks.ads \\\n+  a-naliop.ads<libgnat/a-naliop__nolibm.ads \\\n   g-io.adb<hie/g-io__vxworks-cert.adb \\\n   s-inmaop.adb<libgnarl/s-inmaop__vxworks.adb \\\n   s-interr.adb<libgnarl/s-interr__vxworks.adb \\\n@@ -1314,7 +1319,7 @@ ifeq ($(strip $(filter-out aarch64 arm% coff wrs vx%,$(target_cpu) $(target_vend\n \n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<libgnarl/a-intnam__vxworks.ads \\\n-  a-numaux.ads<libgnat/a-numaux__vxworks.ads \\\n+  a-naliop.ads<libgnat/a-naliop__nolibm.ads \\\n   s-inmaop.adb<libgnarl/s-inmaop__vxworks.adb \\\n   s-interr.adb<libgnarl/s-interr__vxworks.adb \\\n   s-intman.ads<libgnarl/s-intman__vxworks.ads \\\n@@ -1648,8 +1653,6 @@ endif\n ifeq ($(strip $(filter-out x86_64 kfreebsd%,$(target_cpu) $(target_os))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<libgnarl/a-intnam__freebsd.ads \\\n-  a-numaux.ads<libgnat/a-numaux__libc-x86.ads \\\n-  a-numaux.adb<libgnat/a-numaux__dummy.adb \\\n   s-inmaop.adb<libgnarl/s-inmaop__posix.adb \\\n   s-intman.adb<libgnarl/s-intman__posix.adb \\\n   s-osinte.adb<libgnarl/s-osinte__posix.adb \\\n@@ -2302,7 +2305,7 @@ ifeq ($(strip $(filter-out %ia64 linux%,$(target_cpu) $(target_os))),)\n   a-exetim.adb<libgnarl/a-exetim__posix.adb \\\n   a-exetim.ads<libgnarl/a-exetim__default.ads \\\n   a-intnam.ads<libgnarl/a-intnam__linux.ads \\\n-  a-numaux.ads<libgnat/a-numaux__libc-x86.ads \\\n+  a-nuauco.ads<libgnat/a-nuauco__x86.ads \\\n   a-synbar.adb<libgnarl/a-synbar__posix.adb \\\n   a-synbar.ads<libgnarl/a-synbar__posix.ads \\\n   s-inmaop.adb<libgnarl/s-inmaop__posix.adb \\\n@@ -2550,8 +2553,6 @@ ifeq ($(strip $(filter-out darwin%,$(target_os))),)\n     LIBGNAT_TARGET_PAIRS += \\\n       s-intman.adb<libgnarl/s-intman__posix.adb \\\n       s-osprim.adb<libgnat/s-osprim__posix.adb \\\n-      a-numaux.ads<libgnat/a-numaux__darwin.ads \\\n-      a-numaux.adb<libgnat/a-numaux__darwin.adb \\\n       $(ATOMICS_TARGET_PAIRS) \\\n       $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n       system.ads<libgnat/system-darwin-ppc.ads"}, {"sha": "926039107e44a64038390061b739d3eafe8686c4", "filename": "gcc/ada/libgnat/a-nagefl.ads", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nagefl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nagefl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nagefl.ads?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--       A D A . N U M E R I C S . A U X _ G E N E R I C _ F L O A T        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                            (Generic Wrapper)                             --\n+--                                                                          --\n+--          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides the basic computational interface for the generic\n+--  elementary functions. The C library version interfaces with the routines\n+--  in the C mathematical library.\n+\n+--  This version here is for use with normal Unix math functions.\n+\n+with Ada.Numerics.Aux_Long_Long_Float;\n+with Ada.Numerics.Aux_Long_Float;\n+with Ada.Numerics.Aux_Float;\n+with Ada.Numerics.Aux_Short_Float;\n+\n+generic\n+   type T is digits <>;\n+package Ada.Numerics.Aux_Generic_Float is\n+   pragma Pure;\n+\n+   package LLF renames Aux_Long_Long_Float;\n+   package LF renames Aux_Long_Float;\n+   package F renames Aux_Float;\n+   package SF renames Aux_Short_Float;\n+\n+   function Sin (X : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Sin (LLF.T (X)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Sin (LF.T (X)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Sin (F.T (X)))\n+         else T'Base (SF.Sin (SF.T (X))));\n+\n+   function Cos (X : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Cos (LLF.T (X)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Cos (LF.T (X)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Cos (F.T (X)))\n+         else T'Base (SF.Cos (SF.T (X))));\n+\n+   function Tan (X : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Tan (LLF.T (X)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Tan (LF.T (X)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Tan (F.T (X)))\n+         else T'Base (SF.Tan (SF.T (X))));\n+\n+   function Exp (X : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Exp (LLF.T (X)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Exp (LF.T (X)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Exp (F.T (X)))\n+         else T'Base (SF.Exp (SF.T (X))));\n+\n+   function Sqrt (X : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Sqrt (LLF.T (X)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Sqrt (LF.T (X)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Sqrt (F.T (X)))\n+         else T'Base (SF.Sqrt (SF.T (X))));\n+\n+   function Log (X : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Log (LLF.T (X)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Log (LF.T (X)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Log (F.T (X)))\n+         else T'Base (SF.Log (SF.T (X))));\n+\n+   function Acos (X : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Acos (LLF.T (X)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Acos (LF.T (X)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Acos (F.T (X)))\n+         else T'Base (SF.Acos (SF.T (X))));\n+\n+   function Asin (X : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Asin (LLF.T (X)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Asin (LF.T (X)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Asin (F.T (X)))\n+         else T'Base (SF.Asin (SF.T (X))));\n+\n+   function Atan (X : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Atan (LLF.T (X)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Atan (LF.T (X)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Atan (F.T (X)))\n+         else T'Base (SF.Atan (SF.T (X))));\n+\n+   function Sinh (X : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Sinh (LLF.T (X)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Sinh (LF.T (X)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Sinh (F.T (X)))\n+         else T'Base (SF.Sinh (SF.T (X))));\n+\n+   function Cosh (X : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Cosh (LLF.T (X)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Cosh (LF.T (X)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Cosh (F.T (X)))\n+         else T'Base (SF.Cosh (SF.T (X))));\n+\n+   function Tanh (X : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Tanh (LLF.T (X)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Tanh (LF.T (X)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Tanh (F.T (X)))\n+         else T'Base (SF.Tanh (SF.T (X))));\n+\n+   function Pow (X, Y : T'Base) return T'Base\n+   is (if T'Base'Digits > LF.T'Digits\n+         then T'Base (LLF.Pow (LLF.T (X), LLF.T (Y)))\n+         elsif T'Base'Digits > F.T'Digits\n+         then T'Base (LF.Pow (LF.T (X), LF.T (Y)))\n+         elsif T'Base'Digits > SF.T'Digits\n+         then T'Base (F.Pow (F.T (X), F.T (Y)))\n+         else T'Base (SF.Pow (SF.T (X), SF.T (Y))));\n+\n+end Ada.Numerics.Aux_Generic_Float;"}, {"sha": "81de811240e79dfff84002f5ca0072a002ef5c98", "filename": "gcc/ada/libgnat/a-naliop.ads", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-naliop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-naliop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-naliop.ads?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -0,0 +1,45 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--      A D A . N U M E R I C S . A U X _ L I N K E R _ O P T I O N S       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                     Copyright (C) 2001-2020, AdaCore                     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package is used to provide target specific linker_options for\n+--  the support of C Library Math functions as required by other\n+--  children packages of Ada.Numerics.Aux.\n+\n+--  This is a version for default use that links with -lm. An\n+--  alternate __nolibm version is to be used where no additional\n+--  libraries are required.\n+\n+--  This package should not be directly with'ed by an application program\n+\n+package Ada.Numerics.Aux_Linker_Options is\n+   pragma Pure;\n+   pragma Linker_Options (\"-lm\");\n+end Ada.Numerics.Aux_Linker_Options;"}, {"sha": "dc1969a7a9fa2b57aa9feb19dccd35ddaa6a4217", "filename": "gcc/ada/libgnat/a-naliop__nolibm.ads", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-naliop__nolibm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-naliop__nolibm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-naliop__nolibm.ads?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -0,0 +1,43 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--      A D A . N U M E R I C S . A U X _ L I N K E R _ O P T I O N S       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                     Copyright (C) 2001-2020, AdaCore                     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package is used to provide target specific linker_options for\n+--  the support of C Library Math functions as required by other\n+--  children packages of Ada.Numerics.Aux.\n+\n+--  This is a version to be used where no additional libraries are\n+--  required.\n+\n+--  This package should not be directly with'ed by an application program\n+\n+package Ada.Numerics.Aux_Linker_Options is\n+   pragma Pure;\n+end Ada.Numerics.Aux_Linker_Options;"}, {"sha": "ca998fadc3428a382cbf4d9490ad6040f5a4e727", "filename": "gcc/ada/libgnat/a-nallfl.ads", "status": "renamed", "additions": 37, "deletions": 47, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nallfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nallfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nallfl.ads?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -2,10 +2,10 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---                     A D A . N U M E R I C S . A U X                      --\n+--     A D A . N U M E R I C S . A U X . L O N G _ L O N G _ F L O A T      --\n --                                                                          --\n --                                 S p e c                                  --\n---                       (C Library Version, VxWorks)                       --\n+--                  (C Math Library Version, Long Long Float)               --\n --                                                                          --\n --          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -30,68 +30,58 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Version for use on VxWorks (where we have no libm.a library), so the pragma\n---  Linker_Options (\"-lm\") is omitted in this version.\n+--  This package provides the basic computational interface for the generic\n+--  elementary functions. The C library version interfaces with the routines\n+--  in the C mathematical library, and is thus quite portable.\n \n-package Ada.Numerics.Aux is\n+with Ada.Numerics.Aux_Linker_Options;\n+pragma Warnings (Off, Ada.Numerics.Aux_Linker_Options);\n+\n+package Ada.Numerics.Aux_Long_Long_Float is\n    pragma Pure;\n \n-   type Double is new Long_Float;\n-   --  Type Double is the type used to call the C routines\n+   subtype T is Long_Long_Float;\n \n    --  We import these functions directly from C. Note that we label them\n    --  all as pure functions, because indeed all of them are in fact pure.\n \n-   function Sin (X : Double) return Double;\n-   pragma Import (Intrinsic, Sin, \"sin\");\n-   pragma Pure_Function (Sin);\n+   function Sin (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"sinl\";\n \n-   function Cos (X : Double) return Double;\n-   pragma Import (Intrinsic, Cos, \"cos\");\n-   pragma Pure_Function (Cos);\n+   function Cos (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"cosl\";\n \n-   function Tan (X : Double) return Double;\n-   pragma Import (Intrinsic, Tan, \"tan\");\n-   pragma Pure_Function (Tan);\n+   function Tan (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"tanl\";\n \n-   function Exp (X : Double) return Double;\n-   pragma Import (Intrinsic, Exp, \"exp\");\n-   pragma Pure_Function (Exp);\n+   function Exp (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"expl\";\n \n-   function Sqrt (X : Double) return Double;\n-   pragma Import (Intrinsic, Sqrt, \"sqrt\");\n-   pragma Pure_Function (Sqrt);\n+   function Sqrt (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"sqrtl\";\n \n-   function Log (X : Double) return Double;\n-   pragma Import (Intrinsic, Log, \"log\");\n-   pragma Pure_Function (Log);\n+   function Log (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"logl\";\n \n-   function Acos (X : Double) return Double;\n-   pragma Import (Intrinsic, Acos, \"acos\");\n-   pragma Pure_Function (Acos);\n+   function Acos (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"acosl\";\n \n-   function Asin (X : Double) return Double;\n-   pragma Import (Intrinsic, Asin, \"asin\");\n-   pragma Pure_Function (Asin);\n+   function Asin (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"asinl\";\n \n-   function Atan (X : Double) return Double;\n-   pragma Import (Intrinsic, Atan, \"atan\");\n-   pragma Pure_Function (Atan);\n+   function Atan (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"atanl\";\n \n-   function Sinh (X : Double) return Double;\n-   pragma Import (Intrinsic, Sinh, \"sinh\");\n-   pragma Pure_Function (Sinh);\n+   function Sinh (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"sinhl\";\n \n-   function Cosh (X : Double) return Double;\n-   pragma Import (Intrinsic, Cosh, \"cosh\");\n-   pragma Pure_Function (Cosh);\n+   function Cosh (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"coshl\";\n \n-   function Tanh (X : Double) return Double;\n-   pragma Import (Intrinsic, Tanh, \"tanh\");\n-   pragma Pure_Function (Tanh);\n+   function Tanh (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"tanhl\";\n \n-   function Pow (X, Y : Double) return Double;\n-   pragma Import (Intrinsic, Pow, \"pow\");\n-   pragma Pure_Function (Pow);\n+   function Pow (X, Y : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"powl\";\n \n-end Ada.Numerics.Aux;\n+end Ada.Numerics.Aux_Long_Long_Float;", "previous_filename": "gcc/ada/libgnat/a-numaux__vxworks.ads"}, {"sha": "4cdf2f4ac9f7f8beb20eac1966177ec33d9d0da5", "filename": "gcc/ada/libgnat/a-nalofl.ads", "status": "renamed", "additions": 39, "deletions": 55, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nalofl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nalofl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nalofl.ads?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -2,10 +2,10 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---                     A D A . N U M E R I C S . A U X                      --\n+--          A D A . N U M E R I C S . A U X _ L O N G _ F L O A T           --\n --                                                                          --\n --                                 S p e c                                  --\n---                          (Apple OS X Version)                            --\n+--                     (C Math Library Version, Long Float)                 --\n --                                                                          --\n --          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -30,74 +30,58 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This version is for use on OS X. It uses the normal Unix math functions,\n---  except for sine/cosine which have been implemented directly in Ada to get\n---  the required accuracy.\n+--  This package provides the basic computational interface for the generic\n+--  elementary functions. The C library version interfaces with the routines\n+--  in the C mathematical library, and is thus quite portable.\n \n-package Ada.Numerics.Aux is\n-   pragma Pure;\n-\n-   pragma Linker_Options (\"-lm\");\n-\n-   type Double is new Long_Float;\n-   --  Type Double is the type used to call the C routines\n+with Ada.Numerics.Aux_Linker_Options;\n+pragma Warnings (Off, Ada.Numerics.Aux_Linker_Options);\n \n-   --  The following functions have been implemented in Ada, since\n-   --  the OS X math library didn't meet accuracy requirements for\n-   --  argument reduction. The implementation here has been tailored\n-   --  to match Ada strict mode Numerics requirements while maintaining\n-   --  maximum efficiency.\n-   function Sin (X : Double) return Double;\n-   pragma Inline (Sin);\n+package Ada.Numerics.Aux_Long_Float is\n+   pragma Pure;\n \n-   function Cos (X : Double) return Double;\n-   pragma Inline (Cos);\n+   subtype T is Long_Float;\n \n    --  We import these functions directly from C. Note that we label them\n    --  all as pure functions, because indeed all of them are in fact pure.\n \n-   function Tan (X : Double) return Double;\n-   pragma Import (Intrinsic, Tan, \"tan\");\n-   pragma Pure_Function (Tan);\n+   function Sin (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"sin\";\n+\n+   function Cos (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"cos\";\n+\n+   function Tan (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"tan\";\n \n-   function Exp (X : Double) return Double;\n-   pragma Import (Intrinsic, Exp, \"exp\");\n-   pragma Pure_Function (Exp);\n+   function Exp (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"exp\";\n \n-   function Sqrt (X : Double) return Double;\n-   pragma Import (Intrinsic, Sqrt, \"sqrt\");\n-   pragma Pure_Function (Sqrt);\n+   function Sqrt (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"sqrt\";\n \n-   function Log (X : Double) return Double;\n-   pragma Import (Intrinsic, Log, \"log\");\n-   pragma Pure_Function (Log);\n+   function Log (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"log\";\n \n-   function Acos (X : Double) return Double;\n-   pragma Import (Intrinsic, Acos, \"acos\");\n-   pragma Pure_Function (Acos);\n+   function Acos (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"acos\";\n \n-   function Asin (X : Double) return Double;\n-   pragma Import (Intrinsic, Asin, \"asin\");\n-   pragma Pure_Function (Asin);\n+   function Asin (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"asin\";\n \n-   function Atan (X : Double) return Double;\n-   pragma Import (Intrinsic, Atan, \"atan\");\n-   pragma Pure_Function (Atan);\n+   function Atan (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"atan\";\n \n-   function Sinh (X : Double) return Double;\n-   pragma Import (Intrinsic, Sinh, \"sinh\");\n-   pragma Pure_Function (Sinh);\n+   function Sinh (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"sinh\";\n \n-   function Cosh (X : Double) return Double;\n-   pragma Import (Intrinsic, Cosh, \"cosh\");\n-   pragma Pure_Function (Cosh);\n+   function Cosh (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"cosh\";\n \n-   function Tanh (X : Double) return Double;\n-   pragma Import (Intrinsic, Tanh, \"tanh\");\n-   pragma Pure_Function (Tanh);\n+   function Tanh (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"tanh\";\n \n-   function Pow (X, Y : Double) return Double;\n-   pragma Import (Intrinsic, Pow, \"pow\");\n-   pragma Pure_Function (Pow);\n+   function Pow (X, Y : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"pow\";\n \n-end Ada.Numerics.Aux;\n+end Ada.Numerics.Aux_Long_Float;", "previous_filename": "gcc/ada/libgnat/a-numaux__darwin.ads"}, {"sha": "eaee8622badec9f1b87d38fea94ad66edb9ccb7b", "filename": "gcc/ada/libgnat/a-nashfl.ads", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nashfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nashfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nashfl.ads?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -0,0 +1,87 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--         A D A . N U M E R I C S . A U X _ S H O R T _ F L O A T          --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                  (Short Float Wrapper in terms of Float)                 --\n+--                                                                          --\n+--          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides the basic computational interface for the\n+--  generic elementary functions. The functions in this unit are\n+--  wrappers for those in the Float package.\n+\n+with Ada.Numerics.Aux_Float;\n+\n+package Ada.Numerics.Aux_Short_Float is\n+   pragma Pure;\n+\n+   subtype T is Short_Float;\n+   package Aux renames Ada.Numerics.Aux_Float;\n+   subtype W is Aux.T;\n+\n+   --  Use the Aux implementation.\n+\n+   function Sin (X : T) return T\n+   is (T (Aux.Sin (W (X))));\n+\n+   function Cos (X : T) return T\n+   is (T (Aux.Cos (W (X))));\n+\n+   function Tan (X : T) return T\n+   is (T (Aux.Tan (W (X))));\n+\n+   function Exp (X : T) return T\n+   is (T (Aux.Exp (W (X))));\n+\n+   function Sqrt (X : T) return T\n+   is (T (Aux.Sqrt (W (X))));\n+\n+   function Log (X : T) return T\n+   is (T (Aux.Log (W (X))));\n+\n+   function Acos (X : T) return T\n+   is (T (Aux.Acos (W (X))));\n+\n+   function Asin (X : T) return T\n+   is (T (Aux.Asin (W (X))));\n+\n+   function Atan (X : T) return T\n+   is (T (Aux.Atan (W (X))));\n+\n+   function Sinh (X : T) return T\n+   is (T (Aux.Sinh (W (X))));\n+\n+   function Cosh (X : T) return T\n+   is (T (Aux.Cosh (W (X))));\n+\n+   function Tanh (X : T) return T\n+   is (T (Aux.Tanh (W (X))));\n+\n+   function Pow (X, Y : T) return T\n+   is (T (Aux.Pow (W (X), W (Y))));\n+\n+end Ada.Numerics.Aux_Short_Float;"}, {"sha": "d47a14f2078f7a5fa300bc1af96ddadcc017270d", "filename": "gcc/ada/libgnat/a-ngcefu.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-ngcefu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-ngcefu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ngcefu.adb?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -481,11 +481,12 @@ package body Ada.Numerics.Generic_Complex_Elementary_Functions is\n    ---------\n \n    function Exp (X : Complex) return Complex is\n+      ImX : constant Real'Base := Im (X);\n       EXP_RE_X : constant Real'Base := Exp (Re (X));\n \n    begin\n-      return Compose_From_Cartesian (EXP_RE_X * Cos (Im (X)),\n-                                     EXP_RE_X * Sin (Im (X)));\n+      return Compose_From_Cartesian (EXP_RE_X * Cos (ImX),\n+                                     EXP_RE_X * Sin (ImX));\n    end Exp;\n \n    function Exp (X : Imaginary) return Complex is"}, {"sha": "b369dfcfc39bd77ea8e11775bf880ffc28cded72", "filename": "gcc/ada/libgnat/a-ngcoty.adb", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-ngcoty.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-ngcoty.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ngcoty.adb?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -29,10 +29,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Numerics.Aux; use Ada.Numerics.Aux;\n+with Ada.Numerics.Aux_Generic_Float;\n \n package body Ada.Numerics.Generic_Complex_Types is\n \n+   package Aux is new Ada.Numerics.Aux_Generic_Float (Real);\n+\n    subtype R is Real'Base;\n \n    Two_Pi  : constant R := R (2.0) * Pi;\n@@ -440,7 +442,7 @@ package body Ada.Numerics.Generic_Complex_Types is\n          end if;\n \n       else\n-         arg := R (Atan (Double (abs (b / a))));\n+         arg := Aux.Atan (abs (b / a));\n \n          if a > 0.0 then\n             if b > 0.0 then\n@@ -507,8 +509,8 @@ package body Ada.Numerics.Generic_Complex_Types is\n       if Modulus = 0.0 then\n          return (0.0, 0.0);\n       else\n-         return (Modulus * R (Cos (Double (Argument))),\n-                 Modulus * R (Sin (Double (Argument))));\n+         return (Modulus * Aux.Cos (Argument),\n+                 Modulus * Aux.Sin (Argument));\n       end if;\n    end Compose_From_Polar;\n \n@@ -536,8 +538,8 @@ package body Ada.Numerics.Generic_Complex_Types is\n             return (0.0, -Modulus);\n          else\n             Arg := Two_Pi * Argument / Cycle;\n-            return (Modulus * R (Cos (Double (Arg))),\n-                    Modulus * R (Sin (Double (Arg))));\n+            return (Modulus * Aux.Cos (Arg),\n+                    Modulus * Aux.Sin (Arg));\n          end if;\n       else\n          raise Argument_Error;\n@@ -597,8 +599,8 @@ package body Ada.Numerics.Generic_Complex_Types is\n       exception\n          when Constraint_Error =>\n             pragma Assert (X.Re /= 0.0);\n-            return R (Double (abs (X.Re))\n-              * Sqrt (1.0 + (Double (X.Im) / Double (X.Re)) ** 2));\n+            return R (abs (X.Re))\n+              * Aux.Sqrt (1.0 + (R (X.Im) / R (X.Re)) ** 2);\n       end;\n \n       begin\n@@ -612,8 +614,8 @@ package body Ada.Numerics.Generic_Complex_Types is\n       exception\n          when Constraint_Error =>\n             pragma Assert (X.Im /= 0.0);\n-            return R (Double (abs (X.Im))\n-              * Sqrt (1.0 + (Double (X.Re) / Double (X.Im)) ** 2));\n+            return R (abs (X.Im))\n+              * Aux.Sqrt (1.0 + (R (X.Re) / R (X.Im)) ** 2);\n       end;\n \n       --  Now deal with cases of underflow. If only one of the squares\n@@ -632,13 +634,11 @@ package body Ada.Numerics.Generic_Complex_Types is\n \n             else\n                if abs (X.Re) > abs (X.Im) then\n-                  return\n-                    R (Double (abs (X.Re))\n-                      * Sqrt (1.0 + (Double (X.Im) / Double (X.Re)) ** 2));\n+                  return R (abs (X.Re))\n+                    * Aux.Sqrt (1.0 + (R (X.Im) / R (X.Re)) ** 2);\n                else\n-                  return\n-                    R (Double (abs (X.Im))\n-                      * Sqrt (1.0 + (Double (X.Re) / Double (X.Im)) ** 2));\n+                  return R (abs (X.Im))\n+                    * Aux.Sqrt (1.0 + (R (X.Re) / R (X.Im)) ** 2);\n                end if;\n             end if;\n \n@@ -652,7 +652,7 @@ package body Ada.Numerics.Generic_Complex_Types is\n       --  In all other cases, the naive computation will do\n \n       else\n-         return R (Sqrt (Double (Re2 + Im2)));\n+         return Aux.Sqrt (Re2 + Im2);\n       end if;\n    end Modulus;\n "}, {"sha": "3f7c3d1dc2829584ecec96daa74df047b4ae789f", "filename": "gcc/ada/libgnat/a-ngelfu.adb", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-ngelfu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-ngelfu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ngelfu.adb?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -36,21 +36,20 @@\n --  Uses functions sqrt, exp, log, pow, sin, asin, cos, acos, tan, atan, sinh,\n --  cosh, tanh from C library via math.h\n \n-with Ada.Numerics.Aux;\n+with Ada.Numerics.Aux_Generic_Float;\n \n package body Ada.Numerics.Generic_Elementary_Functions with\n   SPARK_Mode => Off\n is\n \n-   use type Ada.Numerics.Aux.Double;\n+   package Aux is new Ada.Numerics.Aux_Generic_Float (Float_Type);\n \n    Sqrt_Two : constant := 1.41421_35623_73095_04880_16887_24209_69807_85696;\n    Log_Two  : constant := 0.69314_71805_59945_30941_72321_21458_17656_80755;\n \n    Half_Log_Two : constant := Log_Two / 2;\n \n    subtype T is Float_Type'Base;\n-   subtype Double is Aux.Double;\n \n    Two_Pi  : constant T := 2.0 * Pi;\n    Half_Pi : constant T := Pi / 2.0;\n@@ -150,17 +149,15 @@ is\n                      Rest := Rest - 0.25;\n                   end if;\n \n-                  Result := Result *\n-                    Float_Type'Base (Aux.Pow (Double (Left), Double (Rest)));\n+                  Result := Result * Aux.Pow (Left, Rest);\n \n                   if Right >= 0.0 then\n                      return Result;\n                   else\n                      return (1.0 / Result);\n                   end if;\n                else\n-                  return\n-                    Float_Type'Base (Aux.Pow (Double (Left), Double (Right)));\n+                  return Aux.Pow (Left, Right);\n                end if;\n             end if;\n \n@@ -194,7 +191,7 @@ is\n          return Pi;\n       end if;\n \n-      Temp := Float_Type'Base (Aux.Acos (Double (X)));\n+      Temp := Aux.Acos (X);\n \n       if Temp < 0.0 then\n          Temp := Pi + Temp;\n@@ -332,7 +329,7 @@ is\n          return -(Pi / 2.0);\n       end if;\n \n-      return Float_Type'Base (Aux.Asin (Double (X)));\n+      return Aux.Asin (X);\n    end Arcsin;\n \n    --  Arbitrary cycle\n@@ -515,7 +512,7 @@ is\n          return 1.0;\n       end if;\n \n-      return Float_Type'Base (Aux.Cos (Double (X)));\n+      return Aux.Cos (X);\n    end Cos;\n \n    --  Arbitrary cycle\n@@ -568,7 +565,7 @@ is\n          return 1.0 / X;\n       end if;\n \n-      return 1.0 / Float_Type'Base (Aux.Tan (Double (X)));\n+      return 1.0 / Aux.Tan (X);\n    end Cot;\n \n    --  Arbitrary cycle\n@@ -617,7 +614,7 @@ is\n          return 1.0 / X;\n       end if;\n \n-      return 1.0 / Float_Type'Base (Aux.Tanh (Double (X)));\n+      return 1.0 / Aux.Tanh (X);\n    end Coth;\n \n    ---------\n@@ -632,7 +629,7 @@ is\n          return 1.0;\n       end if;\n \n-      Result := Float_Type'Base (Aux.Exp (Double (X)));\n+      Result := Aux.Exp (X);\n \n       --  Deal with case of Exp returning IEEE infinity. If Machine_Overflows\n       --  is False, then we can just leave it as an infinity (and indeed we\n@@ -716,7 +713,7 @@ is\n       Raw_Atan :=\n         (if Z < Sqrt_Epsilon then Z\n          elsif Z = 1.0 then Pi / 4.0\n-         else Float_Type'Base (Aux.Atan (Double (Z))));\n+         else Aux.Atan (Z));\n \n       if abs Y > abs X then\n          Raw_Atan := Half_Pi - Raw_Atan;\n@@ -747,7 +744,7 @@ is\n          return 0.0;\n       end if;\n \n-      return Float_Type'Base (Aux.Log (Double (X)));\n+      return Aux.Log (X);\n    end Log;\n \n    --  Arbitrary base\n@@ -767,7 +764,7 @@ is\n          return 0.0;\n       end if;\n \n-      return Float_Type'Base (Aux.Log (Double (X)) / Aux.Log (Double (Base)));\n+      return Aux.Log (X) / Aux.Log (Base);\n    end Log;\n \n    ---------\n@@ -782,7 +779,7 @@ is\n          return X;\n       end if;\n \n-      return Float_Type'Base (Aux.Sin (Double (X)));\n+      return Aux.Sin (X);\n    end Sin;\n \n    --  Arbitrary cycle\n@@ -816,7 +813,7 @@ is\n       --  Could test for 12.0 * abs T = Cycle, and return an exact value in\n       --  those cases. It is not clear this is worth the extra test though.\n \n-      return Float_Type'Base (Aux.Sin (Double (T / Cycle * Two_Pi)));\n+      return Aux.Sin (T / Cycle * Two_Pi);\n    end Sin;\n \n    ----------\n@@ -899,7 +896,7 @@ is\n          return X;\n       end if;\n \n-      return Float_Type'Base (Aux.Sqrt (Double (X)));\n+      return Aux.Sqrt (X);\n    end Sqrt;\n \n    ---------\n@@ -919,7 +916,7 @@ is\n       --  with, it is impossible for X to be exactly pi/2, and the result is\n       --  always in range.\n \n-      return Float_Type'Base (Aux.Tan (Double (X)));\n+      return Aux.Tan (X);\n    end Tan;\n \n    --  Arbitrary cycle\n@@ -992,7 +989,7 @@ is\n          return X + X * R;\n \n       else\n-         return Float_Type'Base (Aux.Tanh (Double (X)));\n+         return Aux.Tanh (X);\n       end if;\n    end Tanh;\n "}, {"sha": "7fd49a8acd77ba37ece2a46a2f87e26976aecf81", "filename": "gcc/ada/libgnat/a-nuauco.ads", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nuauco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nuauco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nuauco.ads?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -0,0 +1,40 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--              A D A . N U M E R I C S . A U X _ C O M P A T               --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                     Copyright (C) 2001-2020, AdaCore                     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package is used to provide the default type for the\n+--  backward-compatibility Ada.Numerics.Aux interface.  This is\n+--  Long_Float for most platforms, but there is an alternate version\n+--  for x86 and x86_64 that uses the Long_Long_Float type.\n+\n+--  This package should not be directly with'ed by an application program\n+\n+with Ada.Numerics.Aux_Long_Float;\n+package Ada.Numerics.Aux_Compat renames Ada.Numerics.Aux_Long_Float;"}, {"sha": "f1fbb31a0f1fd451c1bf4f28ce499c94a7cbbb4e", "filename": "gcc/ada/libgnat/a-nuauco__x86.ads", "status": "renamed", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nuauco__x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nuauco__x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nuauco__x86.ads?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -1,12 +1,12 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n+--                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                     A D A . N U M E R I C S . A U X                      --\n+--              A D A . N U M E R I C S . A U X . C O M P A T               --\n --                                                                          --\n---                                 B o d y                                  --\n+--                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n+--                     Copyright (C) 2001-2020, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,4 +29,11 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma No_Body;\n+--  This package is used to provide the default type for the\n+--  backward-compatibility Ada.Numerics.Aux interface.  This is a\n+--  version for x86 and x86_64, that uses the Long_Long_Float type.\n+\n+--  This package should not be directly with'ed by an application program\n+\n+with Ada.Numerics.Aux_Long_Long_Float;\n+package Ada.Numerics.Aux_Compat renames Ada.Numerics.Aux_Long_Long_Float;", "previous_filename": "gcc/ada/libgnat/a-numaux__dummy.adb"}, {"sha": "16a34aebade1cc39fe09207e26251b8a28b9d79f", "filename": "gcc/ada/libgnat/a-nuaufl.ads", "status": "renamed", "additions": 37, "deletions": 47, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nuaufl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-nuaufl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nuaufl.ads?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -2,10 +2,10 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---                     A D A . N U M E R I C S . A U X                      --\n+--               A D A . N U M E R I C S . A U X _ F L O A T                --\n --                                                                          --\n --                                 S p e c                                  --\n---                       (C Library Version for x86)                        --\n+--                      (C Math Library Version, Float)                     --\n --                                                                          --\n --          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -30,68 +30,58 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This version is for the x86 using the 80-bit x86 long double format\n+--  This package provides the basic computational interface for the generic\n+--  elementary functions. The C library version interfaces with the routines\n+--  in the C mathematical library, and is thus quite portable.\n \n-package Ada.Numerics.Aux is\n-   pragma Pure;\n+with Ada.Numerics.Aux_Linker_Options;\n+pragma Warnings (Off, Ada.Numerics.Aux_Linker_Options);\n \n-   pragma Linker_Options (\"-lm\");\n+package Ada.Numerics.Aux_Float is\n+   pragma Pure;\n \n-   type Double is new Long_Long_Float;\n+   subtype T is Float;\n \n    --  We import these functions directly from C. Note that we label them\n    --  all as pure functions, because indeed all of them are in fact pure.\n \n-   function Sin (X : Double) return Double;\n-   pragma Import (Intrinsic, Sin, \"sinl\");\n-   pragma Pure_Function (Sin);\n+   function Sin (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"sinf\";\n \n-   function Cos (X : Double) return Double;\n-   pragma Import (Intrinsic, Cos, \"cosl\");\n-   pragma Pure_Function (Cos);\n+   function Cos (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"cosf\";\n \n-   function Tan (X : Double) return Double;\n-   pragma Import (Intrinsic, Tan, \"tanl\");\n-   pragma Pure_Function (Tan);\n+   function Tan (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"tanf\";\n \n-   function Exp (X : Double) return Double;\n-   pragma Import (Intrinsic, Exp, \"expl\");\n-   pragma Pure_Function (Exp);\n+   function Exp (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"expf\";\n \n-   function Sqrt (X : Double) return Double;\n-   pragma Import (Intrinsic, Sqrt, \"sqrtl\");\n-   pragma Pure_Function (Sqrt);\n+   function Sqrt (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"sqrtf\";\n \n-   function Log (X : Double) return Double;\n-   pragma Import (Intrinsic, Log, \"logl\");\n-   pragma Pure_Function (Log);\n+   function Log (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"logf\";\n \n-   function Acos (X : Double) return Double;\n-   pragma Import (Intrinsic, Acos, \"acosl\");\n-   pragma Pure_Function (Acos);\n+   function Acos (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"acosf\";\n \n-   function Asin (X : Double) return Double;\n-   pragma Import (Intrinsic, Asin, \"asinl\");\n-   pragma Pure_Function (Asin);\n+   function Asin (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"asinf\";\n \n-   function Atan (X : Double) return Double;\n-   pragma Import (Intrinsic, Atan, \"atanl\");\n-   pragma Pure_Function (Atan);\n+   function Atan (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"atanf\";\n \n-   function Sinh (X : Double) return Double;\n-   pragma Import (Intrinsic, Sinh, \"sinhl\");\n-   pragma Pure_Function (Sinh);\n+   function Sinh (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"sinhf\";\n \n-   function Cosh (X : Double) return Double;\n-   pragma Import (Intrinsic, Cosh, \"coshl\");\n-   pragma Pure_Function (Cosh);\n+   function Cosh (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"coshf\";\n \n-   function Tanh (X : Double) return Double;\n-   pragma Import (Intrinsic, Tanh, \"tanhl\");\n-   pragma Pure_Function (Tanh);\n+   function Tanh (X : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"tanhf\";\n \n-   function Pow (X, Y : Double) return Double;\n-   pragma Import (Intrinsic, Pow, \"powl\");\n-   pragma Pure_Function (Pow);\n+   function Pow (X, Y : T) return T with\n+     Import, Convention => Intrinsic, External_Name => \"powf\";\n \n-end Ada.Numerics.Aux;\n+end Ada.Numerics.Aux_Float;", "previous_filename": "gcc/ada/libgnat/a-numaux__libc-x86.ads"}, {"sha": "42ed336d379a87160acf28c456c23205e788f2ce", "filename": "gcc/ada/libgnat/a-numaux.ads", "status": "modified", "additions": 35, "deletions": 59, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-numaux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70b1a358b6ce3b894f284d88fbb90518d45cc0/gcc%2Fada%2Flibgnat%2Fa-numaux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-numaux.ads?ref=1e70b1a358b6ce3b894f284d88fbb90518d45cc0", "patch": "@@ -5,7 +5,6 @@\n --                     A D A . N U M E R I C S . A U X                      --\n --                                                                          --\n --                                 S p e c                                  --\n---                       (C Library Version, non-x86)                       --\n --                                                                          --\n --          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -30,83 +29,60 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package provides the basic computational interface for the generic\n---  elementary functions. The C library version interfaces with the routines\n---  in the C mathematical library, and is thus quite portable, although it may\n---  not necessarily meet the requirements for accuracy in the numerics annex.\n---  One advantage of using this package is that it will interface directly to\n---  hardware instructions, such as the those provided on the Intel x86.\n+--  This is a backward-compatibility unit, for users of this internal\n+--  package before the introduction of Aux.Generic_Float.\n \n---  This version here is for use with normal Unix math functions. Alternative\n---  versions are provided for special situations:\n-\n---    a-numaux-darwin    For PowerPC/Darwin (special handling of sin/cos)\n---    a-numaux-libc-x86  For the x86, using 80-bit long double format\n---    a-numaux-x86       For the x86, using 80-bit long double format with\n---                       inline asm statements\n---    a-numaux-vxworks   For use on VxWorks (where we have no libm.a library)\n+with Ada.Numerics.Aux_Compat;\n \n package Ada.Numerics.Aux is\n    pragma Pure;\n \n-   pragma Linker_Options (\"-lm\");\n+   package Aux renames Aux_Compat;\n+\n+   type Double is new Aux.T;\n \n-   type Double is new Long_Float;\n-   --  Type Double is the type used to call the C routines\n+   subtype T is Double;\n+   subtype W is Aux.T;\n \n-   --  We import these functions directly from C. Note that we label them\n-   --  all as pure functions, because indeed all of them are in fact pure.\n+   --  Use the Aux implementation.\n \n-   function Sin (X : Double) return Double;\n-   pragma Import (Intrinsic, Sin, \"sin\");\n-   pragma Pure_Function (Sin);\n+   function Sin (X : T) return T\n+   is (T (Aux.Sin (W (X))));\n \n-   function Cos (X : Double) return Double;\n-   pragma Import (Intrinsic, Cos, \"cos\");\n-   pragma Pure_Function (Cos);\n+   function Cos (X : T) return T\n+   is (T (Aux.Cos (W (X))));\n \n-   function Tan (X : Double) return Double;\n-   pragma Import (Intrinsic, Tan, \"tan\");\n-   pragma Pure_Function (Tan);\n+   function Tan (X : T) return T\n+   is (T (Aux.Tan (W (X))));\n \n-   function Exp (X : Double) return Double;\n-   pragma Import (Intrinsic, Exp, \"exp\");\n-   pragma Pure_Function (Exp);\n+   function Exp (X : T) return T\n+   is (T (Aux.Exp (W (X))));\n \n-   function Sqrt (X : Double) return Double;\n-   pragma Import (Intrinsic, Sqrt, \"sqrt\");\n-   pragma Pure_Function (Sqrt);\n+   function Sqrt (X : T) return T\n+   is (T (Aux.Sqrt (W (X))));\n \n-   function Log (X : Double) return Double;\n-   pragma Import (Intrinsic, Log, \"log\");\n-   pragma Pure_Function (Log);\n+   function Log (X : T) return T\n+   is (T (Aux.Log (W (X))));\n \n-   function Acos (X : Double) return Double;\n-   pragma Import (Intrinsic, Acos, \"acos\");\n-   pragma Pure_Function (Acos);\n+   function Acos (X : T) return T\n+   is (T (Aux.Acos (W (X))));\n \n-   function Asin (X : Double) return Double;\n-   pragma Import (Intrinsic, Asin, \"asin\");\n-   pragma Pure_Function (Asin);\n+   function Asin (X : T) return T\n+   is (T (Aux.Asin (W (X))));\n \n-   function Atan (X : Double) return Double;\n-   pragma Import (Intrinsic, Atan, \"atan\");\n-   pragma Pure_Function (Atan);\n+   function Atan (X : T) return T\n+   is (T (Aux.Atan (W (X))));\n \n-   function Sinh (X : Double) return Double;\n-   pragma Import (Intrinsic, Sinh, \"sinh\");\n-   pragma Pure_Function (Sinh);\n+   function Sinh (X : T) return T\n+   is (T (Aux.Sinh (W (X))));\n \n-   function Cosh (X : Double) return Double;\n-   pragma Import (Intrinsic, Cosh, \"cosh\");\n-   pragma Pure_Function (Cosh);\n+   function Cosh (X : T) return T\n+   is (T (Aux.Cosh (W (X))));\n \n-   function Tanh (X : Double) return Double;\n-   pragma Import (Intrinsic, Tanh, \"tanh\");\n-   pragma Pure_Function (Tanh);\n+   function Tanh (X : T) return T\n+   is (T (Aux.Tanh (W (X))));\n \n-   function Pow (X, Y : Double) return Double;\n-   pragma Import (Intrinsic, Pow, \"pow\");\n-   pragma Pure_Function (Pow);\n+   function Pow (X, Y : T) return T\n+   is (T (Aux.Pow (W (X), W (Y))));\n \n end Ada.Numerics.Aux;"}, {"sha": "85fdd2468b5fbfdf8426acf940cb7b095f214d56", "filename": "gcc/ada/libgnat/a-numaux__darwin.adb", "status": "removed", "additions": 0, "deletions": 211, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476036b35c5e9203735b19b9967ff0e9932c8c31/gcc%2Fada%2Flibgnat%2Fa-numaux__darwin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476036b35c5e9203735b19b9967ff0e9932c8c31/gcc%2Fada%2Flibgnat%2Fa-numaux__darwin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-numaux__darwin.adb?ref=476036b35c5e9203735b19b9967ff0e9932c8c31", "patch": "@@ -1,211 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                     A D A . N U M E R I C S . A U X                      --\n---                                                                          --\n---                                 B o d y                                  --\n---                          (Apple OS X Version)                            --\n---                                                                          --\n---          Copyright (C) 1998-2020, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package body Ada.Numerics.Aux is\n-\n-   -----------------------\n-   -- Local subprograms --\n-   -----------------------\n-\n-   function Is_Nan (X : Double) return Boolean;\n-   --  Return True iff X is a IEEE NaN value\n-\n-   procedure Reduce (X : in out Double; Q : out Natural);\n-   --  Implement reduction of X by Pi/2. Q is the quadrant of the final\n-   --  result in the range 0..3. The absolute value of X is at most Pi/4.\n-   --  It is needed to avoid a loss of accuracy for sin near Pi and cos\n-   --  near Pi/2 due to the use of an insufficiently precise value of Pi\n-   --  in the range reduction.\n-\n-   --  The following two functions implement Chebishev approximations\n-   --  of the trigonometric functions in their reduced domain.\n-   --  These approximations have been computed using Maple.\n-\n-   function Sine_Approx (X : Double) return Double;\n-   function Cosine_Approx (X : Double) return Double;\n-\n-   pragma Inline (Reduce);\n-   pragma Inline (Sine_Approx);\n-   pragma Inline (Cosine_Approx);\n-\n-   -------------------\n-   -- Cosine_Approx --\n-   -------------------\n-\n-   function Cosine_Approx (X : Double) return Double is\n-      XX : constant Double := X * X;\n-   begin\n-      return (((((16#8.DC57FBD05F640#E-08 * XX\n-              - 16#4.9F7D00BF25D80#E-06) * XX\n-              + 16#1.A019F7FDEFCC2#E-04) * XX\n-              - 16#5.B05B058F18B20#E-03) * XX\n-              + 16#A.AAAAAAAA73FA8#E-02) * XX\n-              - 16#7.FFFFFFFFFFDE4#E-01) * XX\n-              - 16#3.655E64869ECCE#E-14 + 1.0;\n-   end Cosine_Approx;\n-\n-   -----------------\n-   -- Sine_Approx --\n-   -----------------\n-\n-   function Sine_Approx (X : Double) return Double is\n-      XX : constant Double := X * X;\n-   begin\n-      return (((((16#A.EA2D4ABE41808#E-09 * XX\n-              - 16#6.B974C10F9D078#E-07) * XX\n-              + 16#2.E3BC673425B0E#E-05) * XX\n-              - 16#D.00D00CCA7AF00#E-04) * XX\n-              + 16#2.222222221B190#E-02) * XX\n-              - 16#2.AAAAAAAAAAA44#E-01) * (XX * X) + X;\n-   end Sine_Approx;\n-\n-   ------------\n-   -- Is_Nan --\n-   ------------\n-\n-   function Is_Nan (X : Double) return Boolean is\n-   begin\n-      --  The IEEE NaN values are the only ones that do not equal themselves\n-\n-      return X /= X;\n-   end Is_Nan;\n-\n-   ------------\n-   -- Reduce --\n-   ------------\n-\n-   procedure Reduce (X : in out Double; Q : out Natural) is\n-      Half_Pi     : constant := Pi / 2.0;\n-      Two_Over_Pi : constant := 2.0 / Pi;\n-\n-      HM : constant := Integer'Min (Double'Machine_Mantissa / 2, Natural'Size);\n-      M  : constant Double := 0.5 + 2.0**(1 - HM); -- Splitting constant\n-      P1 : constant Double := Double'Leading_Part (Half_Pi, HM);\n-      P2 : constant Double := Double'Leading_Part (Half_Pi - P1, HM);\n-      P3 : constant Double := Double'Leading_Part (Half_Pi - P1 - P2, HM);\n-      P4 : constant Double := Double'Leading_Part (Half_Pi - P1 - P2 - P3, HM);\n-      P5 : constant Double := Double'Leading_Part (Half_Pi - P1 - P2 - P3\n-                                                                 - P4, HM);\n-      P6 : constant Double := Double'Model (Half_Pi - P1 - P2 - P3 - P4 - P5);\n-      K  : Double;\n-      R  : Integer;\n-\n-   begin\n-      --  For X < 2.0**HM, all products below are computed exactly.\n-      --  Due to cancellation effects all subtractions are exact as well.\n-      --  As no double extended floating-point number has more than 75\n-      --  zeros after the binary point, the result will be the correctly\n-      --  rounded result of X - K * (Pi / 2.0).\n-\n-      K := X * Two_Over_Pi;\n-      while abs K >= 2.0**HM loop\n-         K := K * M - (K * M - K);\n-         X :=\n-           (((((X - K * P1) - K * P2) - K * P3) - K * P4) - K * P5) - K * P6;\n-         K := X * Two_Over_Pi;\n-      end loop;\n-\n-      --  If K is not a number (because X was not finite) raise exception\n-\n-      if Is_Nan (K) then\n-         raise Constraint_Error;\n-      end if;\n-\n-      --  Go through an integer temporary so as to use machine instructions\n-\n-      R := Integer (Double'Rounding (K));\n-      Q := R mod 4;\n-      K := Double (R);\n-      X := (((((X - K * P1) - K * P2) - K * P3) - K * P4) - K * P5) - K * P6;\n-   end Reduce;\n-\n-   ---------\n-   -- Cos --\n-   ---------\n-\n-   function Cos (X : Double) return Double is\n-      Reduced_X : Double := abs X;\n-      Quadrant  : Natural range 0 .. 3;\n-\n-   begin\n-      if Reduced_X > Pi / 4.0 then\n-         Reduce (Reduced_X, Quadrant);\n-\n-         case Quadrant is\n-            when 0 =>\n-               return Cosine_Approx (Reduced_X);\n-\n-            when 1 =>\n-               return Sine_Approx (-Reduced_X);\n-\n-            when 2 =>\n-               return -Cosine_Approx (Reduced_X);\n-\n-            when 3 =>\n-               return Sine_Approx (Reduced_X);\n-         end case;\n-      end if;\n-\n-      return Cosine_Approx (Reduced_X);\n-   end Cos;\n-\n-   ---------\n-   -- Sin --\n-   ---------\n-\n-   function Sin (X : Double) return Double is\n-      Reduced_X : Double := X;\n-      Quadrant  : Natural range 0 .. 3;\n-\n-   begin\n-      if abs X > Pi / 4.0 then\n-         Reduce (Reduced_X, Quadrant);\n-\n-         case Quadrant is\n-            when 0 =>\n-               return Sine_Approx (Reduced_X);\n-\n-            when 1 =>\n-               return Cosine_Approx (Reduced_X);\n-\n-            when 2 =>\n-               return Sine_Approx (-Reduced_X);\n-\n-            when 3 =>\n-               return -Cosine_Approx (Reduced_X);\n-         end case;\n-      end if;\n-\n-      return Sine_Approx (Reduced_X);\n-   end Sin;\n-\n-end Ada.Numerics.Aux;"}]}