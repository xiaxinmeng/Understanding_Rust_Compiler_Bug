{"sha": "8998354f8d860e1db063add78f20e521ff514cf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5ODM1NGY4ZDg2MGUxZGIwNjNhZGQ3OGYyMGU1MjFmZjUxNGNmMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:07:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:07:34Z"}, "message": "hash-table.h: Update comments.\n\ngcc/\n\t* hash-table.h: Update comments.\n\nFrom-SVN: r224965", "tree": {"sha": "3e3232c4da8a26293da0e8610ac87b4730fcbdb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e3232c4da8a26293da0e8610ac87b4730fcbdb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8998354f8d860e1db063add78f20e521ff514cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8998354f8d860e1db063add78f20e521ff514cf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8998354f8d860e1db063add78f20e521ff514cf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8998354f8d860e1db063add78f20e521ff514cf2/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b32ca1dfaf130c7cd946c917905f21854c260efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32ca1dfaf130c7cd946c917905f21854c260efa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b32ca1dfaf130c7cd946c917905f21854c260efa"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "49f8515cede95921b567f3ef03b2dbdf064f7340", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8998354f8d860e1db063add78f20e521ff514cf2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8998354f8d860e1db063add78f20e521ff514cf2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8998354f8d860e1db063add78f20e521ff514cf2", "patch": "@@ -1,3 +1,7 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-table.h: Update comments.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hash-traits.h (default_hash_traits): New structure."}, {"sha": "12e0c965d13b0757271378d6dab144de66f9326d", "filename": "gcc/hash-table.h", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8998354f8d860e1db063add78f20e521ff514cf2/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8998354f8d860e1db063add78f20e521ff514cf2/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=8998354f8d860e1db063add78f20e521ff514cf2", "patch": "@@ -37,15 +37,16 @@ along with GCC; see the file COPYING3.  If not see\n          - A typedef named 'value_type' to the value type (from above).\n \n          - A static member function named 'hash' that takes a value_type\n-         pointer and returns a hashval_t value.\n+         (or 'const value_type &') and returns a hashval_t value.\n \n-         - A typedef named 'compare_type' that is used to test when an value\n+         - A typedef named 'compare_type' that is used to test when a value\n          is found.  This type is the comparison type.  Usually, it will be the\n          same as value_type.  If it is not the same type, you must generally\n          explicitly compute hash values and pass them to the hash table.\n \n          - A static member function named 'equal' that takes a value_type\n-         pointer and a compare_type pointer, and returns a bool.\n+         and a compare_type, and returns a bool.  Both arguments can be\n+         const references.\n \n          - A static function named 'remove' that takes an value_type pointer\n          and frees the memory allocated by it.  This function is used when\n@@ -68,7 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n \n       4. The template type used to describe how hash table memory\n       is allocated.  This type is called the allocator type.  It is\n-      parameterized on the value type.  It provides four functions.\n+      parameterized on the value type.  It provides two functions:\n \n          - A static member function named 'data_alloc'.  This function\n          allocates the data elements in the table.\n@@ -120,10 +121,16 @@ along with GCC; see the file COPYING3.  If not see\n \n       2. Choose a hash function.  Write the static 'hash' member function.\n \n-      3. Choose an equality testing function.  In most cases, its two\n-      arguments will be value_type pointers.  If not, the first argument must\n-      be a value_type pointer, and the second argument a compare_type pointer.\n+      3. Decide whether the lookup function should take as input an object\n+\t of type value_type or something more restricted.  Define compare_type\n+\t accordingly.\n \n+      4. Choose an equality testing function 'equal' that compares a value_type\n+\t and a compare_type.\n+\n+   If your elements are pointers, it is usually easiest to start with one\n+   of the generic pointer descriptors described below and override the bits\n+   you need to change.\n \n    AN EXAMPLE DESCRIPTOR TYPE\n \n@@ -163,11 +170,19 @@ along with GCC; see the file COPYING3.  If not see\n \n    EASY DESCRIPTORS FOR POINTERS\n \n-   The class template pointer_hash provides everything you need to hash\n-   pointers (as opposed to what they point to).  So, to instantiate a hash\n-   table over pointers to whatever_type,\n+   There are four descriptors for pointer elements, one for each of\n+   the removal policies above:\n+\n+   * nofree_ptr_hash (based on typed_noop_remove)\n+   * free_ptr_hash (based on typed_free_remove)\n+   * ggc_ptr_hash (based on ggc_remove)\n+   * ggc_cache_ptr_hash (based on ggc_cache_remove)\n+\n+   These descriptors hash and compare elements by their pointer value,\n+   rather than what they point to.  So, to instantiate a hash table over\n+   pointers to whatever_type, without freeing the whatever_types, use:\n \n-      hash_table <pointer_hash <whatever_type>> whatever_type_hash_table;\n+      hash_table <nofree_ptr_hash <whatever_type> > whatever_type_hash_table;\n \n \n    HASH TABLE ITERATORS\n@@ -327,20 +342,9 @@ class mem_usage;\n \n /* User-facing hash table type.\n \n-   The table stores elements of type Descriptor::value_type.\n-\n-   It hashes values with the hash member function.\n-     The table currently works with relatively weak hash functions.\n-     Use typed_pointer_hash <Value> when hashing pointers instead of objects.\n-\n-   It compares elements with the equal member function.\n-     Two elements with the same hash may not be equal.\n-     Use typed_pointer_equal <Value> when hashing pointers instead of objects.\n-\n-   It removes elements with the remove member function.\n-     This feature is useful for freeing memory.\n-     Derive from typed_null_remove <Value> when not freeing objects.\n-     Derive from typed_free_remove <Value> when doing a simple object free.\n+   The table stores elements of type Descriptor::value_type and uses\n+   the static descriptor functions described at the top of the file\n+   to hash, compare and remove elements.\n \n    Specify the template Allocator to allocate and free memory.\n      The default is xcallocator.\n@@ -363,7 +367,6 @@ class hash_table\n   ~hash_table ();\n \n   /* Create a hash_table in gc memory.  */\n-\n   static hash_table *\n   create_ggc (size_t n CXX_MEM_STAT_INFO)\n   {\n@@ -387,15 +390,14 @@ class hash_table\n   /* This function clears a specified SLOT in a hash table.  It is\n      useful when you've already done the lookup and don't want to do it\n      again. */\n-\n   void clear_slot (value_type *);\n \n   /* This function searches for a hash table entry equal to the given\n      COMPARABLE element starting with the given HASH value.  It cannot\n      be used to insert or delete an element. */\n   value_type &find_with_hash (const compare_type &, hashval_t);\n \n-/* Like find_slot_with_hash, but compute the hash value from the element.  */\n+  /* Like find_slot_with_hash, but compute the hash value from the element.  */\n   value_type &find (const value_type &value)\n     {\n       return find_with_hash (value, Descriptor::hash (value));\n@@ -421,7 +423,8 @@ class hash_table\n      matching element in the hash table, this function does nothing. */\n   void remove_elt_with_hash (const compare_type &, hashval_t);\n \n-/* Like remove_elt_with_hash, but compute the hash value from the element.  */\n+  /* Like remove_elt_with_hash, but compute the hash value from the\n+     element.  */\n   void remove_elt (const value_type &value)\n     {\n       remove_elt_with_hash (value, Descriptor::hash (value));\n@@ -662,7 +665,7 @@ hash_table<Descriptor, Allocator>::find_empty_slot_for_expand (hashval_t hash)\n    table entries is changed.  If memory allocation fails, this function\n    will abort.  */\n \n-\t  template<typename Descriptor, template<typename Type> class Allocator>\n+template<typename Descriptor, template<typename Type> class Allocator>\n void\n hash_table<Descriptor, Allocator>::expand ()\n {"}]}