{"sha": "acda9c8d8de4012b9074fde06755a9047e5e9b06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkYTljOGQ4ZGU0MDEyYjkwNzRmZGUwNjc1NWE5MDQ3ZTVlOWIwNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-23T13:08:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-23T13:08:24Z"}, "message": "Don't declare fns that use \"tree\" if tree.h not included.\n\n(prepare_call_address, emit_call_1): Remove decls.\n(promoted_input_arg): Add prototype.\n(fix_lexical_addr): Remove duplicate decl.\n(copy_function_value, expand_stmt_expr): Delete; no such functions.\n\nFrom-SVN: r3846", "tree": {"sha": "99b5d2f70469e7bddf772eb9245dd5a41b251c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99b5d2f70469e7bddf772eb9245dd5a41b251c4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acda9c8d8de4012b9074fde06755a9047e5e9b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acda9c8d8de4012b9074fde06755a9047e5e9b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acda9c8d8de4012b9074fde06755a9047e5e9b06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acda9c8d8de4012b9074fde06755a9047e5e9b06/comments", "author": null, "committer": null, "parents": [{"sha": "0006469db877d2d2b4f782c7293698962f167350", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0006469db877d2d2b4f782c7293698962f167350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0006469db877d2d2b4f782c7293698962f167350"}], "stats": {"total": 40, "additions": 1, "deletions": 39}, "files": [{"sha": "4305972708a594b8b31e07af996cacb46a955567", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acda9c8d8de4012b9074fde06755a9047e5e9b06/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acda9c8d8de4012b9074fde06755a9047e5e9b06/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=acda9c8d8de4012b9074fde06755a9047e5e9b06", "patch": "@@ -689,48 +689,18 @@ extern rtx trampoline_address PROTO((tree));\n extern rtx hard_function_value PROTO((tree, tree));\n \n \n-extern rtx prepare_call_address PROTO((rtx, tree, rtx*));\n-\n extern rtx expand_call PROTO((tree, rtx, int));\n-extern void emit_call_1 PROTO((rtx, tree, int, int, rtx, rtx, int, rtx, int));\n \n extern rtx expand_shift PROTO((enum tree_code, enum machine_mode, rtx, tree, rtx, int));\n extern rtx expand_divmod PROTO((int, enum tree_code, enum machine_mode, rtx, rtx, rtx, int));\n extern void locate_and_pad_parm PROTO((enum machine_mode, tree, int, tree, struct args_size *, struct args_size *, struct args_size *));\n extern rtx expand_inline_function PROTO((tree, tree, rtx, int, tree, rtx));\n /* Return the CODE_LABEL rtx for a LABEL_DECL, creating it if necessary.  */\n extern rtx label_rtx PROTO((tree));\n-#else\n-/* Return an rtx for the size in bytes of the value of an expr.  */\n-extern rtx expr_size ();\n-\n-extern rtx lookup_static_chain ();\n-\n-/* Convert a stack slot address ADDR valid in function FNDECL\n-   into an address valid in this function (using a static chain).  */\n-extern rtx fix_lexical_addr ();\n-\n-/* Return the address of the trampoline for entering nested fn FUNCTION.  */\n-extern rtx trampoline_address ();\n-\n-/* Return an rtx that refers to the value returned by a function\n-   in its original home.  This becomes invalid if any more code is emitted.  */\n-extern rtx hard_function_value ();\n-\n-extern rtx prepare_call_address ();\n-extern rtx expand_call ();\n-extern void emit_call_1 ();\n-extern rtx expand_shift ();\n-extern rtx expand_divmod ();\n-extern void locate_and_pad_parm ();\n-extern rtx expand_inline_function ();\n-\n-/* Return the CODE_LABEL rtx for a LABEL_DECL, creating it if necessary.  */\n-extern rtx label_rtx ();\n #endif\n \n /* Indicate how an input argument register was promoted.  */\n-extern rtx promoted_input_arg ();\n+extern rtx promoted_input_arg PROTO((int, enum machine_mode *, int *));\n \n /* Return an rtx like arg but sans any constant terms.\n    Returns the original rtx if it has no constant terms.\n@@ -755,10 +725,6 @@ extern rtx change_address PROTO((rtx, enum machine_mode, rtx));\n \n extern rtx validize_mem PROTO((rtx));\n \n-/* Convert a stack slot address ADDR valid in function FNDECL\n-   into an address valid in this function (using a static chain).  */\n-extern rtx fix_lexical_addr ();\n-\n /* Assemble the static constant template for function entry trampolines.  */\n extern rtx assemble_trampoline_template PROTO((void));\n \n@@ -818,9 +784,6 @@ extern rtx function_value ();\n    in its original home.  This becomes invalid if any more code is emitted.  */\n extern rtx hard_libcall_value PROTO((enum machine_mode));\n \n-/* Emit code to copy function value to a specified place.  */\n-extern void copy_function_value ();\n-\n /* Given an rtx, return an rtx for a value rounded up to a multiple\n    of STACK_BOUNDARY / BITS_PER_UNIT.  */\n extern rtx round_push PROTO((rtx));\n@@ -831,7 +794,6 @@ extern rtx store_bit_field PROTO((rtx, int, int, enum machine_mode, rtx, int, in\n extern rtx extract_bit_field PROTO((rtx, int, int, int, rtx, enum machine_mode, enum machine_mode, int, int));\n extern rtx expand_mult PROTO((enum machine_mode, rtx, rtx, rtx, int));\n extern rtx expand_mult_add PROTO((rtx, rtx, rtx, rtx,enum machine_mode, int));\n-extern rtx expand_stmt_expr ();\n \n extern rtx assemble_static_space PROTO((int));\n "}]}