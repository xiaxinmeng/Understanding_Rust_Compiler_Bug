{"sha": "c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQzNGU1ZmZmYzAwZWExNjgxZTIzZjRlMGNiYzFkYzJlMjhlOGE2ZA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-06T18:30:52Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-06T18:35:16Z"}, "message": "Add check for TypeBounds on argument substitutions\n\nTypeParameters contain specified bounds, when we substitute them we need\nto ensure that the argument satisfies those bounds otherwise... it fails\nthe contract.\n\nThis change only checks this specific case as a nice isolated PR to\ndemonstrate the mechanism's we require. Specified bounds are checked but\nwe must also probe for what bounds are available for the type.\n\nAddreses #440", "tree": {"sha": "09673c041f73a019b399a4adc57225bc54a43510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09673c041f73a019b399a4adc57225bc54a43510"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41e3fb5d2018690243a38c79a60fcc32eb73b013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e3fb5d2018690243a38c79a60fcc32eb73b013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e3fb5d2018690243a38c79a60fcc32eb73b013"}], "stats": {"total": 106, "additions": 102, "deletions": 4}, "files": [{"sha": "3238631789c2b063295b6244653f21ca34ff5995", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d", "patch": "@@ -27,13 +27,41 @@\n #include \"rust-tyty-cast.h\"\n #include \"rust-hir-map.h\"\n #include \"rust-substitution-mapper.h\"\n+#include \"rust-hir-trait-ref.h\"\n+#include \"rust-hir-type-bounds.h\"\n \n extern ::Backend *\n rust_get_backend ();\n \n namespace Rust {\n namespace TyTy {\n \n+bool\n+BaseType::satisfies_bound (const TypeBoundPredicate &predicate) const\n+{\n+  const Resolver::TraitReference *query = predicate.get ();\n+  for (auto &bound : specified_bounds)\n+    {\n+      const Resolver::TraitReference *item = bound.get ();\n+      bool found = item->get_mappings ().get_defid ()\n+\t\t   == query->get_mappings ().get_defid ();\n+      if (found)\n+\treturn true;\n+    }\n+\n+  std::vector<std::reference_wrapper<Resolver::TraitReference>> probed\n+    = Resolver::TypeBoundsProbe::Probe (this);\n+  for (const Resolver::TraitReference &bound : probed)\n+    {\n+      bool found = bound.get_mappings ().get_defid ()\n+\t\t   == query->get_mappings ().get_defid ();\n+      if (found)\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n TyVar::TyVar (HirId ref) : ref (ref)\n {\n   // ensure this reference is defined within the context\n@@ -556,7 +584,7 @@ ADTType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n       bool ok\n \t= subst_mappings.get_argument_for_symbol (sub.get_param_ty (), &arg);\n       if (ok)\n-\tsub.fill_param_ty (arg.get_tyty ());\n+\tsub.fill_param_ty (arg.get_tyty (), subst_mappings.get_locus ());\n     }\n \n   adt->iterate_fields ([&] (StructFieldType *field) mutable -> bool {\n@@ -811,7 +839,7 @@ FnType::is_equal (const BaseType &other) const\n BaseType *\n FnType::clone () const\n {\n-  std::vector<std::pair<HIR::Pattern *, BaseType *> > cloned_params;\n+  std::vector<std::pair<HIR::Pattern *, BaseType *>> cloned_params;\n   for (auto &p : params)\n     cloned_params.push_back (\n       std::pair<HIR::Pattern *, BaseType *> (p.first, p.second->clone ()));\n@@ -836,7 +864,7 @@ FnType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n       bool ok\n \t= subst_mappings.get_argument_for_symbol (sub.get_param_ty (), &arg);\n       if (ok)\n-\tsub.fill_param_ty (arg.get_tyty ());\n+\tsub.fill_param_ty (arg.get_tyty (), subst_mappings.get_locus ());\n     }\n \n   auto fty = fn->get_return_type ();"}, {"sha": "6fe67c7769eb40b6aa6483bfffb910fe770d7abc", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d", "patch": "@@ -172,7 +172,21 @@ class TypeBoundsMappings\n     return specified_bounds;\n   }\n \n+  std::string bounds_as_string () const\n+  {\n+    std::string buf;\n+    for (auto &b : specified_bounds)\n+      buf += b.as_string () + \", \";\n+\n+    return \"bounds:[\" + buf + \"]\";\n+  }\n+\n protected:\n+  void add_bound (TypeBoundPredicate predicate)\n+  {\n+    specified_bounds.push_back (predicate);\n+  }\n+\n   std::vector<TypeBoundPredicate> specified_bounds;\n };\n \n@@ -237,6 +251,37 @@ class BaseType : public TypeBoundsMappings\n     return get_kind () == other.get_kind ();\n   }\n \n+  bool satisfies_bound (const TypeBoundPredicate &predicate) const;\n+\n+  bool bounds_compatible (const BaseType &other, Location locus) const\n+  {\n+    std::vector<std::reference_wrapper<const TypeBoundPredicate>>\n+      unsatisfied_bounds;\n+    for (auto &bound : get_specified_bounds ())\n+      {\n+\tif (!other.satisfies_bound (bound))\n+\t  unsatisfied_bounds.push_back (bound);\n+      }\n+\n+    if (unsatisfied_bounds.size () > 0)\n+      {\n+\tRichLocation r (locus);\n+\trust_error_at (r, \"bounds not satisfied for %s\",\n+\t\t       other.as_string ().c_str ());\n+\treturn false;\n+      }\n+\n+    return unsatisfied_bounds.size () == 0;\n+  }\n+\n+  void inherit_bounds (const BaseType &other)\n+  {\n+    for (auto &bound : other.get_specified_bounds ())\n+      {\n+\tadd_bound (bound);\n+      }\n+  }\n+\n   virtual bool is_unit () const { return false; }\n \n   virtual bool is_concrete () const { return true; }\n@@ -575,8 +620,18 @@ class SubstitutionParamMapping\n \n   std::string as_string () const { return param->as_string (); }\n \n-  void fill_param_ty (BaseType *type)\n+  void fill_param_ty (BaseType *type, Location locus)\n   {\n+    if (type->get_kind () == TyTy::TypeKind::INFER)\n+      {\n+\ttype->inherit_bounds (*param);\n+      }\n+    else\n+      {\n+\tif (!param->bounds_compatible (*type, locus))\n+\t  return;\n+      }\n+\n     if (type->get_kind () == TypeKind::PARAM)\n       {\n \tdelete param;"}, {"sha": "3579b5a0842ca9c0739de6bb544c66f236c00495", "filename": "gcc/testsuite/rust/compile/traits6.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits6.rs?ref=c434e5fffc00ea1681e23f4e0cbc1dc2e28e8a6d", "patch": "@@ -0,0 +1,15 @@\n+trait Foo {\n+    fn default() -> i32;\n+}\n+\n+struct Bar(i32);\n+\n+fn type_bound_test<T: Foo>() -> i32 {\n+    T::default()\n+}\n+\n+fn main() {\n+    let a;\n+    a = type_bound_test::<Bar>();\n+    // { dg-error \"bounds not satisfied for Bar\" \"\" { target *-*-* } .-1 }\n+}"}]}