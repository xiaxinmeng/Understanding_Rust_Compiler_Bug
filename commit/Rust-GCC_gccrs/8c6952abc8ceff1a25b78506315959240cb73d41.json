{"sha": "8c6952abc8ceff1a25b78506315959240cb73d41", "node_id": "C_kwDOANBUbNoAKDhjNjk1MmFiYzhjZWZmMWEyNWI3ODUwNjMxNTk1OTI0MGNiNzNkNDE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-08-30T14:43:47Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-08-30T14:43:47Z"}, "message": "Rearrange unbounded_hashmap_traits\n\nint_hash combines two kinds of operation:\n\n(1) hashing and equality of integers\n(2) using spare integer encodings to represent empty and deleted slots\n\n(1) is really independent of (2), and could be useful in cases where\nno spare integer encodings are available.  This patch adds a base class\n(int_hash_base) for (1) and makes int_hash inherit from it.\n\nIf we follow a similar style for future hashes, we can make\nunbounded_hashmap_traits take the \"base\" hash for the key\nas a template parameter, rather than requiring every type of\nkey to have a separate derivative of unbounded_hashmap_traits.\nA later patch applies this to vector keys.\n\nNo functional change intended.\n\ngcc/\n\t* hash-traits.h (int_hash_base): New struct, split out from...\n\t(int_hash): ...this class, which now inherits from int_hash_base.\n\t* hash-map-traits.h (unbounded_hashmap_traits): Take a template\n\tparameter for the key that provides hash and equality functions.\n\t(unbounded_int_hashmap_traits): Turn into a type alias of\n\tunbounded_hashmap_traits.", "tree": {"sha": "23c566e5b3ec7993a6fcc691a9ad2e2fcede37e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23c566e5b3ec7993a6fcc691a9ad2e2fcede37e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c6952abc8ceff1a25b78506315959240cb73d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6952abc8ceff1a25b78506315959240cb73d41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c6952abc8ceff1a25b78506315959240cb73d41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6952abc8ceff1a25b78506315959240cb73d41/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bac880a19633b96608548b412739379df1c10dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bac880a19633b96608548b412739379df1c10dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bac880a19633b96608548b412739379df1c10dc"}], "stats": {"total": 116, "additions": 65, "deletions": 51}, "files": [{"sha": "d729d358070e9c150b3806c0a05d9eb534d90089", "filename": "gcc/hash-map-traits.h", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6952abc8ceff1a25b78506315959240cb73d41/gcc%2Fhash-map-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6952abc8ceff1a25b78506315959240cb73d41/gcc%2Fhash-map-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-traits.h?ref=8c6952abc8ceff1a25b78506315959240cb73d41", "patch": "@@ -105,14 +105,19 @@ struct simple_cache_map_traits: public simple_hashmap_traits<H,Value>\n   static const bool maybe_mx = false;\n };\n \n-/* Implement traits for a hash_map with values of type Value for cases\n-   in which the key cannot represent empty and deleted slots.  Instead\n-   record empty and deleted entries in Value.  Derived classes must\n-   implement the hash and equal_keys functions.  */\n+/* Implement traits for a hash_map with keys of type Key and values of\n+   type Value for cases in which the key cannot represent empty and\n+   deleted slots.  Instead record empty and deleted entries in Value.  */\n \n-template <typename Value>\n+template <typename Key, typename Value>\n struct unbounded_hashmap_traits\n {\n+  typedef typename Key::value_type key_type;\n+\n+  static hashval_t hash (const typename Key::value_type &);\n+  static bool equal_keys (const typename Key::value_type &,\n+\t\t\t  const typename Key::compare_type &);\n+\n   template <typename T> static inline void remove (T &);\n   static const bool empty_zero_p = default_hash_traits <Value>::empty_zero_p;\n   template <typename T> static inline bool is_empty (const T &);\n@@ -121,42 +126,59 @@ struct unbounded_hashmap_traits\n   template <typename T> static inline void mark_deleted (T &);\n };\n \n-template <typename Value>\n+template <typename Key, typename Value>\n+inline hashval_t\n+unbounded_hashmap_traits <Key, Value>\n+::hash (const typename Key::value_type &key)\n+{\n+  return Key::hash (key);\n+}\n+\n+template <typename Key, typename Value>\n+inline bool\n+unbounded_hashmap_traits <Key, Value>\n+::equal_keys (const typename Key::value_type &x,\n+\t      const typename Key::compare_type &y)\n+{\n+  return Key::equal (x, y);\n+}\n+\n+template <typename Key, typename Value>\n template <typename T>\n inline void\n-unbounded_hashmap_traits <Value>::remove (T &entry)\n+unbounded_hashmap_traits <Key, Value>::remove (T &entry)\n {\n   default_hash_traits <Value>::remove (entry.m_value);\n }\n \n-template <typename Value>\n+template <typename Key, typename Value>\n template <typename T>\n inline bool\n-unbounded_hashmap_traits <Value>::is_empty (const T &entry)\n+unbounded_hashmap_traits <Key, Value>::is_empty (const T &entry)\n {\n   return default_hash_traits <Value>::is_empty (entry.m_value);\n }\n \n-template <typename Value>\n+template <typename Key, typename Value>\n template <typename T>\n inline bool\n-unbounded_hashmap_traits <Value>::is_deleted (const T &entry)\n+unbounded_hashmap_traits <Key, Value>::is_deleted (const T &entry)\n {\n   return default_hash_traits <Value>::is_deleted (entry.m_value);\n }\n \n-template <typename Value>\n+template <typename Key, typename Value>\n template <typename T>\n inline void\n-unbounded_hashmap_traits <Value>::mark_empty (T &entry)\n+unbounded_hashmap_traits <Key, Value>::mark_empty (T &entry)\n {\n   default_hash_traits <Value>::mark_empty (entry.m_value);\n }\n \n-template <typename Value>\n+template <typename Key, typename Value>\n template <typename T>\n inline void\n-unbounded_hashmap_traits <Value>::mark_deleted (T &entry)\n+unbounded_hashmap_traits <Key, Value>::mark_deleted (T &entry)\n {\n   default_hash_traits <Value>::mark_deleted (entry.m_value);\n }\n@@ -166,25 +188,7 @@ unbounded_hashmap_traits <Value>::mark_deleted (T &entry)\n    slots.  */\n \n template <typename Key, typename Value>\n-struct unbounded_int_hashmap_traits : unbounded_hashmap_traits <Value>\n-{\n-  typedef Key key_type;\n-  static inline hashval_t hash (Key);\n-  static inline bool equal_keys (Key, Key);\n-};\n-\n-template <typename Key, typename Value>\n-inline hashval_t\n-unbounded_int_hashmap_traits <Key, Value>::hash (Key k)\n-{\n-  return k;\n-}\n-\n-template <typename Key, typename Value>\n-inline bool\n-unbounded_int_hashmap_traits <Key, Value>::equal_keys (Key k1, Key k2)\n-{\n-  return k1 == k2;\n-}\n+using unbounded_int_hashmap_traits\n+  = unbounded_hashmap_traits <int_hash_base <Key>, Value>;\n \n #endif // HASH_MAP_TRAITS_H"}, {"sha": "55b81eb0f9ea91980a1e253c1e379620b5a33572", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6952abc8ceff1a25b78506315959240cb73d41/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6952abc8ceff1a25b78506315959240cb73d41/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=8c6952abc8ceff1a25b78506315959240cb73d41", "patch": "@@ -85,41 +85,51 @@ typed_noop_remove <Type>::remove (Type &)\n {\n }\n \n+/* Base traits for integer type Type, providing just the hash and\n+   comparison functionality.  */\n \n-/* Hasher for integer type Type in which Empty is a spare value that can be\n-   used to mark empty slots.  If Deleted != Empty then Deleted is another\n-   spare value that can be used for deleted slots; if Deleted == Empty then\n-   hash table entries cannot be deleted.  */\n-\n-template <typename Type, Type Empty, Type Deleted = Empty>\n-struct int_hash : typed_noop_remove <Type>\n+template <typename Type>\n+struct int_hash_base : typed_noop_remove <Type>\n {\n   typedef Type value_type;\n   typedef Type compare_type;\n \n   static inline hashval_t hash (value_type);\n   static inline bool equal (value_type existing, value_type candidate);\n-  static inline void mark_deleted (Type &);\n-  static const bool empty_zero_p = Empty == 0;\n-  static inline void mark_empty (Type &);\n-  static inline bool is_deleted (Type);\n-  static inline bool is_empty (Type);\n };\n \n-template <typename Type, Type Empty, Type Deleted>\n+template <typename Type>\n inline hashval_t\n-int_hash <Type, Empty, Deleted>::hash (value_type x)\n+int_hash_base <Type>::hash (value_type x)\n {\n   return x;\n }\n \n-template <typename Type, Type Empty, Type Deleted>\n+template <typename Type>\n inline bool\n-int_hash <Type, Empty, Deleted>::equal (value_type x, value_type y)\n+int_hash_base <Type>::equal (value_type x, value_type y)\n {\n   return x == y;\n }\n \n+/* Hasher for integer type Type in which Empty is a spare value that can be\n+   used to mark empty slots.  If Deleted != Empty then Deleted is another\n+   spare value that can be used for deleted slots; if Deleted == Empty then\n+   hash table entries cannot be deleted.  */\n+\n+template <typename Type, Type Empty, Type Deleted = Empty>\n+struct int_hash : int_hash_base <Type>\n+{\n+  typedef Type value_type;\n+  typedef Type compare_type;\n+\n+  static inline void mark_deleted (Type &);\n+  static const bool empty_zero_p = Empty == 0;\n+  static inline void mark_empty (Type &);\n+  static inline bool is_deleted (Type);\n+  static inline bool is_empty (Type);\n+};\n+\n template <typename Type, Type Empty, Type Deleted>\n inline void\n int_hash <Type, Empty, Deleted>::mark_deleted (Type &x)"}]}