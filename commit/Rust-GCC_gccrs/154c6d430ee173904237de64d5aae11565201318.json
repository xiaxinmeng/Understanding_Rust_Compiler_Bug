{"sha": "154c6d430ee173904237de64d5aae11565201318", "node_id": "C_kwDOANBUbNoAKDE1NGM2ZDQzMGVlMTczOTA0MjM3ZGU2NGQ1YWFlMTE1NjUyMDEzMTg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-20T18:41:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-20T18:42:28Z"}, "message": "doc: Fix documentation around 'asm' keyword in C++\n\nThe documentation on asm statements suggests asm is always a GNU\nextension, but it's been part of ISO C++ since the first standard.\n\nThe documentation of -fno-asm is wrong for C++ as it states that it only\naffects typeof, but actually it affects typeof and asm (despite asm\nbeing part of ISO C++).\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi (Basic Asm): Clarify that asm is not an\n\textension in C++.\n\t* doc/invoke.texi (-fno-asm): Fix description for C++.", "tree": {"sha": "cc68a8d85ac866b452cb25e711e7926964b1776a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc68a8d85ac866b452cb25e711e7926964b1776a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/154c6d430ee173904237de64d5aae11565201318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154c6d430ee173904237de64d5aae11565201318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/154c6d430ee173904237de64d5aae11565201318", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154c6d430ee173904237de64d5aae11565201318/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "885f9b4ad59a1c37742b68505edc80c7f419d9a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885f9b4ad59a1c37742b68505edc80c7f419d9a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/885f9b4ad59a1c37742b68505edc80c7f419d9a4"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "eee4c6737bbfa9529fd613a0197d513121d058ec", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154c6d430ee173904237de64d5aae11565201318/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154c6d430ee173904237de64d5aae11565201318/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=154c6d430ee173904237de64d5aae11565201318", "patch": "@@ -9728,10 +9728,12 @@ A basic @code{asm} statement has the following syntax:\n asm @var{asm-qualifiers} ( @var{AssemblerInstructions} )\n @end example\n \n-The @code{asm} keyword is a GNU extension.\n-When writing code that can be compiled with @option{-ansi} and the\n-various @option{-std} options, use @code{__asm__} instead of \n-@code{asm} (@pxref{Alternate Keywords}).\n+For the C language, the @code{asm} keyword is a GNU extension.\n+When writing C code that can be compiled with @option{-ansi} and the\n+@option{-std} options that select C dialects without GNU extensions, use\n+@code{__asm__} instead of @code{asm} (@pxref{Alternate Keywords}).  For\n+the C++ language, @code{asm} is a standard keyword, but @code{__asm__}\n+can be used for code compiled with @option{-fno-asm}.\n \n @subsubheading Qualifiers\n @table @code"}, {"sha": "6d1e328571a08449a52bac137bc0994795fae06c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154c6d430ee173904237de64d5aae11565201318/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154c6d430ee173904237de64d5aae11565201318/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=154c6d430ee173904237de64d5aae11565201318", "patch": "@@ -2485,14 +2485,14 @@ supported for C as this construct is allowed by C++.\n Do not recognize @code{asm}, @code{inline} or @code{typeof} as a\n keyword, so that code can use these words as identifiers.  You can use\n the keywords @code{__asm__}, @code{__inline__} and @code{__typeof__}\n-instead.  @option{-ansi} implies @option{-fno-asm}.\n-\n-In C++, this switch only affects the @code{typeof} keyword, since\n-@code{asm} and @code{inline} are standard keywords.  You may want to\n-use the @option{-fno-gnu-keywords} flag instead, which has the same\n-effect.  In C99 mode (@option{-std=c99} or @option{-std=gnu99}), this\n-switch only affects the @code{asm} and @code{typeof} keywords, since\n-@code{inline} is a standard keyword in ISO C99.\n+instead.  In C, @option{-ansi} implies @option{-fno-asm}.\n+\n+In C++, @code{inline} is a standard keyword and is not affected by\n+this switch.  You may want to use the @option{-fno-gnu-keywords} flag\n+instead, which disables @code{typeof} but not @code{asm} and\n+@code{inline}.  In C99 mode (@option{-std=c99} or @option{-std=gnu99}),\n+this switch only affects the @code{asm} and @code{typeof} keywords,\n+since @code{inline} is a standard keyword in ISO C99.\n \n @item -fno-builtin\n @itemx -fno-builtin-@var{function}"}]}