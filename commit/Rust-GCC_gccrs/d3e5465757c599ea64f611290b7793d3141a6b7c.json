{"sha": "d3e5465757c599ea64f611290b7793d3141a6b7c", "node_id": "C_kwDOANBUbNoAKGQzZTU0NjU3NTdjNTk5ZWE2NGY2MTEyOTBiNzc5M2QzMTQxYTZiN2M", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-10-05T15:50:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-10-07T13:22:32Z"}, "message": "gimplify: prevent some C++ temporary elision\n\nIn this testcase, we were optimizing away the temporary for f(), but\nC++17 and above are clear that there is a temporary, and because its\ndestructor has visible side-effects we can't optimize it away under the\nas-if rule.  So disable this optimization for TREE_ADDRESSABLE type.\n\nI moved the declaration of volatile_p after the call to\ngimple_fold_indirect_ref_rhs to minimize indentation changes; I don't see\nany way the value of that flag could be affected by the call.\n\ngcc/ChangeLog:\n\n\t* gimplify.cc (gimplify_modify_expr_rhs): Don't optimize\n\tx = *(A*)&<expr> to x = <expr> for a TREE_ADDRESSABLE type.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/init/elide9.C: New test.", "tree": {"sha": "42223c603e13701c6d5569b2960677af795ca609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42223c603e13701c6d5569b2960677af795ca609"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3e5465757c599ea64f611290b7793d3141a6b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e5465757c599ea64f611290b7793d3141a6b7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3e5465757c599ea64f611290b7793d3141a6b7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e5465757c599ea64f611290b7793d3141a6b7c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89228e3985c5cdf6be58a3b5b1afcad91e9e3422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89228e3985c5cdf6be58a3b5b1afcad91e9e3422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89228e3985c5cdf6be58a3b5b1afcad91e9e3422"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "d4209ea74a3dc54e4a23047873efa82b7ea88c62", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e5465757c599ea64f611290b7793d3141a6b7c/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e5465757c599ea64f611290b7793d3141a6b7c/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=d3e5465757c599ea64f611290b7793d3141a6b7c", "patch": "@@ -5620,7 +5620,7 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p,\n \t    }\n \t  break;\n \tcase INDIRECT_REF:\n-\t  {\n+\t  if (!TREE_ADDRESSABLE (TREE_TYPE (*from_p)))\n \t    /* If we have code like\n \n \t     *(const A*)(A*)&x\n@@ -5629,11 +5629,13 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p,\n \t     of \"A\"), treat the entire expression as identical to \"x\".\n \t     This kind of code arises in C++ when an object is bound\n \t     to a const reference, and if \"x\" is a TARGET_EXPR we want\n-\t     to take advantage of the optimization below.  */\n-\t    bool volatile_p = TREE_THIS_VOLATILE (*from_p);\n-\t    tree t = gimple_fold_indirect_ref_rhs (TREE_OPERAND (*from_p, 0));\n-\t    if (t)\n+\t     to take advantage of the optimization below.  But not if\n+\t     the type is TREE_ADDRESSABLE; then C++17 says that the\n+\t     TARGET_EXPR needs to be a temporary.  */\n+\t    if (tree t\n+\t\t= gimple_fold_indirect_ref_rhs (TREE_OPERAND (*from_p, 0)))\n \t      {\n+\t\tbool volatile_p = TREE_THIS_VOLATILE (*from_p);\n \t\tif (TREE_THIS_VOLATILE (t) != volatile_p)\n \t\t  {\n \t\t    if (DECL_P (t))\n@@ -5646,8 +5648,7 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p,\n \t\tret = GS_OK;\n \t\tchanged = true;\n \t      }\n-\t    break;\n-\t  }\n+\t  break;\n \n \tcase TARGET_EXPR:\n \t  {"}, {"sha": "810d60a94a4418547d497a39140b32cb58802261", "filename": "gcc/testsuite/g++.dg/init/elide9.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e5465757c599ea64f611290b7793d3141a6b7c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Felide9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e5465757c599ea64f611290b7793d3141a6b7c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Felide9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Felide9.C?ref=d3e5465757c599ea64f611290b7793d3141a6b7c", "patch": "@@ -0,0 +1,25 @@\n+// The static_cast should prevent temporary elision.\n+// { dg-do run { target c++11 } }\n+\n+int d;\n+struct A\n+{\n+  int i;\n+  A() { }\n+  ~A() { ++d; }\n+};\n+\n+A f() { return A(); }\n+\n+struct B\n+{\n+  A a;\n+  B(): a(static_cast<A&&>(f())) {}\n+};\n+\n+int main()\n+{\n+  { B b; }\n+  if (d != 2)\n+    return -1;\n+}"}]}