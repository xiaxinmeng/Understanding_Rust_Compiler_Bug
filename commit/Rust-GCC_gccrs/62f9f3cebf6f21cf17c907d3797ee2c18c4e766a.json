{"sha": "62f9f3cebf6f21cf17c907d3797ee2c18c4e766a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJmOWYzY2ViZjZmMjFjZjE3YzkwN2QzNzk3ZWUyYzE4YzRlNzY2YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-10-30T15:08:27Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-10-30T15:08:27Z"}, "message": "utils.c (MAX_FIXED_MODE_SIZE): Delete.\n\n\t* gcc-interface/utils.c (MAX_FIXED_MODE_SIZE): Delete.\n\t(create_field_decl): Update description.  In a packed record, round\n\tthe size up to a byte boundary only if the field's type has BLKmode.\n\t* gcc-interface/gigi.h (create_field_decl): Update description.\n\nFrom-SVN: r153755", "tree": {"sha": "edf00858bed91c30e215f2a984fab28ab914d921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edf00858bed91c30e215f2a984fab28ab914d921"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a/comments", "author": null, "committer": null, "parents": [{"sha": "e15f1ff6b0969cd0afb1f5581b26914ada61b889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15f1ff6b0969cd0afb1f5581b26914ada61b889", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e15f1ff6b0969cd0afb1f5581b26914ada61b889"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "4dc41876af48c8574278cc7daf89f2fc18e63116", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=62f9f3cebf6f21cf17c907d3797ee2c18c4e766a", "patch": "@@ -1,3 +1,10 @@\n+2009-10-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (MAX_FIXED_MODE_SIZE): Delete.\n+\t(create_field_decl): Update description.  In a packed record, round\n+\tthe size up to a byte boundary only if the field's type has BLKmode.\n+\t* gcc-interface/gigi.h (create_field_decl): Update description.\n+\n 2009-10-30  Emmanuel Briot  <briot@adacore.com>\n \n \t* make.adb (Start_Compile_If_Possible): Compute location of resulting"}, {"sha": "82d193bfc5cf9bc9f7cd571066f56c95cad3ad7e", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=62f9f3cebf6f21cf17c907d3797ee2c18c4e766a", "patch": "@@ -643,12 +643,13 @@ extern void record_global_renaming_pointer (tree decl);\n /* Invalidate the global renaming pointers.  */\n extern void invalidate_global_renaming_pointers (void);\n \n-/* Returns a FIELD_DECL node. FIELD_NAME the field name, FIELD_TYPE is its\n-   type, and RECORD_TYPE is the type of the parent.  PACKED is nonzero if\n-   this field is in a record type with a \"pragma pack\".  If SIZE is nonzero\n-   it is the specified size for this field.  If POS is nonzero, it is the bit\n-   position.  If ADDRESSABLE is nonzero, it means we are allowed to take\n-   the address of this field for aliasing purposes.  */\n+/* Return a FIELD_DECL node.  FIELD_NAME is the field's name, FIELD_TYPE is\n+   its type and RECORD_TYPE is the type of the enclosing record.  PACKED is\n+   1 if the enclosing record is packed, -1 if it has Component_Alignment of\n+   Storage_Unit.  If SIZE is nonzero, it is the specified size of the field.\n+   If POS is nonzero, it is the bit position.  If ADDRESSABLE is nonzero, it\n+   means we are allowed to take the address of the field; if it is negative,\n+   we should not make a bitfield, which is used by make_aligning_type.  */\n extern tree create_field_decl (tree field_name, tree field_type,\n                                tree record_type, int packed, tree size,\n                                tree pos, int addressable);"}, {"sha": "6ee5a9128565fc9fa0efb545f6f9c6384395b097", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=62f9f3cebf6f21cf17c907d3797ee2c18c4e766a", "patch": "@@ -59,10 +59,6 @@\n #include \"ada-tree.h\"\n #include \"gigi.h\"\n \n-#ifndef MAX_FIXED_MODE_SIZE\n-#define MAX_FIXED_MODE_SIZE GET_MODE_BITSIZE (DImode)\n-#endif\n-\n #ifndef MAX_BITS_PER_WORD\n #define MAX_BITS_PER_WORD  BITS_PER_WORD\n #endif\n@@ -1457,13 +1453,13 @@ aggregate_type_contains_array_p (tree type)\n     }\n }\n \n-/* Return a FIELD_DECL node.  FIELD_NAME the field name, FIELD_TYPE is its\n-   type, and RECORD_TYPE is the type of the parent.  PACKED is nonzero if\n-   this field is in a record type with a \"pragma pack\".  If SIZE is nonzero\n-   it is the specified size for this field.  If POS is nonzero, it is the bit\n-   position.  If ADDRESSABLE is nonzero, it means we are allowed to take\n-   the address of this field for aliasing purposes. If it is negative, we\n-   should not make a bitfield, which is used by make_aligning_type.   */\n+/* Return a FIELD_DECL node.  FIELD_NAME is the field's name, FIELD_TYPE is\n+   its type and RECORD_TYPE is the type of the enclosing record.  PACKED is\n+   1 if the enclosing record is packed, -1 if it has Component_Alignment of\n+   Storage_Unit.  If SIZE is nonzero, it is the specified size of the field.\n+   If POS is nonzero, it is the bit position.  If ADDRESSABLE is nonzero, it\n+   means we are allowed to take the address of the field; if it is negative,\n+   we should not make a bitfield, which is used by make_aligning_type.  */\n \n tree\n create_field_decl (tree field_name, tree field_type, tree record_type,\n@@ -1497,12 +1493,8 @@ create_field_decl (tree field_name, tree field_type, tree record_type,\n   else if (packed == 1)\n     {\n       size = rm_size (field_type);\n-\n-      /* For a constant size larger than MAX_FIXED_MODE_SIZE, round up to\n-         byte.  */\n-      if (TREE_CODE (size) == INTEGER_CST\n-          && compare_tree_int (size, MAX_FIXED_MODE_SIZE) > 0)\n-        size = round_up (size, BITS_PER_UNIT);\n+      if (TYPE_MODE (field_type) == BLKmode)\n+\tsize = round_up (size, BITS_PER_UNIT);\n     }\n \n   /* If we may, according to ADDRESSABLE, make a bitfield if a size is"}, {"sha": "bf00de68197dce2e21f29d145a9089e5f79a8f35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62f9f3cebf6f21cf17c907d3797ee2c18c4e766a", "patch": "@@ -1,3 +1,7 @@\n+2009-10-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/pack5.ads: New test.\n+\n 2009-10-30  Andrew Jenner  <andrew@codesourcery.com>\n \n \t* lib/target-supports.exp: Handle powerpc-*-elf."}, {"sha": "65c8fc744def62fdc4fdd40e7d536287cba2b72e", "filename": "gcc/testsuite/gnat.dg/specs/pack5.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f9f3cebf6f21cf17c907d3797ee2c18c4e766a/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack5.ads?ref=62f9f3cebf6f21cf17c907d3797ee2c18c4e766a", "patch": "@@ -0,0 +1,13 @@\n+package Pack5 is\n+\n+   type Small is range -32 .. 31;\n+\n+   type Arr is array (Integer range <>) of Small;\n+   pragma Pack (Arr);\n+\n+   type Rec is record\n+      Y: Arr (1 .. 10);\n+    end record;\n+   pragma Pack (Rec);\n+\n+end Pack5;"}]}