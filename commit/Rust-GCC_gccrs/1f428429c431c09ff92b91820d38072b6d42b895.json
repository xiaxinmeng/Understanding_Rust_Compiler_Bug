{"sha": "1f428429c431c09ff92b91820d38072b6d42b895", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY0Mjg0MjljNDMxYzA5ZmY5MmI5MTgyMGQzODA3MmI2ZDQyYjg5NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-04-27T18:37:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-04-27T18:37:32Z"}, "message": "move.h (move_if_noexcept): Add.\n\n2011-04-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/move.h (move_if_noexcept): Add.\n\t* testsuite/20_util/move_if_noexcept/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/20_util/move_if_noexcept/1.cc: Likewise.\n\nFrom-SVN: r173044", "tree": {"sha": "75d9883f51e5234ed24a523323d1258cdeee6e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75d9883f51e5234ed24a523323d1258cdeee6e0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f428429c431c09ff92b91820d38072b6d42b895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f428429c431c09ff92b91820d38072b6d42b895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f428429c431c09ff92b91820d38072b6d42b895", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f428429c431c09ff92b91820d38072b6d42b895/comments", "author": null, "committer": null, "parents": [{"sha": "cbb734aa019ae7569549ba2cfa1887dd230f6d74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbb734aa019ae7569549ba2cfa1887dd230f6d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbb734aa019ae7569549ba2cfa1887dd230f6d74"}], "stats": {"total": 183, "additions": 180, "deletions": 3}, "files": [{"sha": "901e7b8f2d0fe29873f7776245238f6b5523904a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f428429c431c09ff92b91820d38072b6d42b895/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f428429c431c09ff92b91820d38072b6d42b895/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f428429c431c09ff92b91820d38072b6d42b895", "patch": "@@ -1,3 +1,10 @@\n+2011-04-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/move.h (move_if_noexcept): Add.\n+\t* testsuite/20_util/move_if_noexcept/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/20_util/move_if_noexcept/1.cc: Likewise.\n+\n 2011-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/type_traits (struct underlying_type): Add."}, {"sha": "a6dd2378eda2ac5ab83f64ba5b8beb631383f5d2", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f428429c431c09ff92b91820d38072b6d42b895/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f428429c431c09ff92b91820d38072b6d42b895/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=1f428429c431c09ff92b91820d38072b6d42b895", "patch": "@@ -1,6 +1,6 @@\n // Move, forward and identity for C++0x + swap -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -73,7 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief Move a value.\n-   *  @ingroup mutating_algorithms\n+   *  @ingroup utilities\n    *  @param  __t  A thing of arbitrary type.\n    *  @return Same, moved.\n   */\n@@ -82,12 +82,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     move(_Tp&& __t)\n     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n \n+  /**\n+   *  @brief Move unless it could throw and the type is copyable.\n+   *  @ingroup utilities\n+   *  @param  __x  A thing of arbitrary type.\n+   *  @return Same, possibly moved.\n+   */\n+  template<typename _Tp>\n+    inline typename\n+    conditional<(!is_nothrow_move_constructible<_Tp>::value\n+\t\t && is_copy_constructible<_Tp>::value),\n+                const _Tp&, _Tp&&>::type\n+    move_if_noexcept(_Tp& __x) noexcept\n+    { return std::move(__x); }\n+\n   /// declval, from type_traits.\n \n   /**\n    *  @brief Returns the actual address of the object or function\n    *         referenced by r, even in the presence of an overloaded\n    *         operator&.\n+   *  @ingroup utilities\n    *  @param  __r  Reference to an object or function.\n    *  @return   The actual address.\n   */\n@@ -112,7 +127,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief Swaps two values.\n-   *  @ingroup mutating_algorithms\n+   *  @ingroup utilities\n    *  @param  __a  A thing of arbitrary type.\n    *  @param  __b  Another thing of arbitrary type.\n    *  @return   Nothing."}, {"sha": "f7169b0e85e51bd356f9efed94769cc7b6428650", "filename": "libstdc++-v3/testsuite/20_util/move_if_noexcept/1.cc", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f428429c431c09ff92b91820d38072b6d42b895/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmove_if_noexcept%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f428429c431c09ff92b91820d38072b6d42b895/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmove_if_noexcept%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmove_if_noexcept%2F1.cc?ref=1f428429c431c09ff92b91820d38072b6d42b895", "patch": "@@ -0,0 +1,119 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-04-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+struct noexcept_move_copy\n+{\n+  noexcept_move_copy()\n+  : status(true)\n+  { };\n+\n+  noexcept_move_copy(noexcept_move_copy&& r) noexcept\n+  { r.status = false; };\n+\n+  noexcept_move_copy(const noexcept_move_copy&) = default;\n+\n+  operator bool() { return status; }\n+\n+private:\n+  bool status;\n+};\n+\n+struct noexcept_move_no_copy\n+{\n+  noexcept_move_no_copy()\n+  : status(true)\n+  { };\n+\n+  noexcept_move_no_copy(noexcept_move_no_copy&& r) noexcept\n+  { r.status = false; };\n+\n+  noexcept_move_no_copy(const noexcept_move_no_copy&) = delete;\n+\n+  operator bool() { return status; }\n+\n+private:\n+  bool status;\n+};\n+\n+struct except_move_copy\n+{\n+  except_move_copy()\n+  : status(true)\n+  { };\n+\n+  except_move_copy(except_move_copy&& r) noexcept(false)\n+  { r.status = false; };\n+\n+  except_move_copy(const except_move_copy&) = default;\n+\n+  operator bool() { return status; }\n+\n+private:\n+  bool status;\n+};\n+\n+struct except_move_no_copy\n+{\n+  except_move_no_copy()\n+  : status(true)\n+  { };\n+\n+  except_move_no_copy(except_move_no_copy&& r) noexcept(false)\n+  { r.status = false; };\n+\n+  except_move_no_copy(const except_move_no_copy&) = delete;\n+\n+  operator bool() { return status; }\n+\n+private:\n+  bool status;\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  noexcept_move_copy nemc1;\n+  auto nemc2 __attribute__((unused)) = std::move_if_noexcept(nemc1);\n+  VERIFY( nemc1 == false );\n+\n+  noexcept_move_no_copy nemnc1;\n+  auto nemnc2 __attribute__((unused)) = std::move_if_noexcept(nemnc1);\n+  VERIFY( nemnc1 == false );\n+\n+  except_move_copy emc1;\n+  auto emc2 __attribute__((unused)) = std::move_if_noexcept(emc1);\n+  VERIFY( emc1 == true );\n+\n+  except_move_no_copy emnc1;\n+  auto emnc2 __attribute__((unused)) = std::move_if_noexcept(emnc1);\n+  VERIFY( emnc1 == false );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "37ea6d6ef98a1199425742aa6bfeb52ca921aef0", "filename": "libstdc++-v3/testsuite/20_util/move_if_noexcept/requirements/explicit_instantiation.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f428429c431c09ff92b91820d38072b6d42b895/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmove_if_noexcept%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f428429c431c09ff92b91820d38072b6d42b895/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmove_if_noexcept%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmove_if_noexcept%2Frequirements%2Fexplicit_instantiation.cc?ref=1f428429c431c09ff92b91820d38072b6d42b895", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2011-04-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing utility with NO OTHER INCLUDES.\n+\n+#include <utility>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  \n+  template\n+  std::conditional<(!std::is_nothrow_move_constructible<test_type>::value\n+\t\t    && std::is_copy_constructible<test_type>::value),\n+\t\t   const test_type&, test_type&&>::type\n+  move_if_noexcept(test_type&);\n+}"}]}