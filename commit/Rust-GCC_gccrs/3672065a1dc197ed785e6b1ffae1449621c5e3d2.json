{"sha": "3672065a1dc197ed785e6b1ffae1449621c5e3d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY3MjA2NWExZGMxOTdlZDc4NWU2YjFmZmFlMTQ0OTYyMWM1ZTNkMg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-01-08T15:12:34Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-01-08T15:12:34Z"}, "message": "re PR fortran/34681 (SAVEd derived type with allocatable components causes ICE)\n\n2008-01-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34681\n\t* trans_array.c (gfc_trans_deferred_array): Do not null the\n\tdata pointer on entering scope, nor deallocate it on leaving\n\tscope, if the symbol has the 'save' attribute.\n\n\tPR fortran/34704\n\t* trans_decl.c (gfc_finish_var_decl): Derived types with\n\tallocatable components and an initializer must be TREE_STATIC.\n\n2008-01-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34681\n\tPR fortran/34704\n\t* gfortran.dg/alloc_comp_default_init_1.f90: New test.\n\nFrom-SVN: r131395", "tree": {"sha": "be9570725d190ba3b7ea072d185fef893ed52e81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be9570725d190ba3b7ea072d185fef893ed52e81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3672065a1dc197ed785e6b1ffae1449621c5e3d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3672065a1dc197ed785e6b1ffae1449621c5e3d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3672065a1dc197ed785e6b1ffae1449621c5e3d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3672065a1dc197ed785e6b1ffae1449621c5e3d2/comments", "author": null, "committer": null, "parents": [{"sha": "8bce96f5a03f2a240c402550c158882f4bd93fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bce96f5a03f2a240c402550c158882f4bd93fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bce96f5a03f2a240c402550c158882f4bd93fd6"}], "stats": {"total": 108, "additions": 106, "deletions": 2}, "files": [{"sha": "dd2492dc97e4f26af4b11375e6e620ab68549084", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3672065a1dc197ed785e6b1ffae1449621c5e3d2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3672065a1dc197ed785e6b1ffae1449621c5e3d2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3672065a1dc197ed785e6b1ffae1449621c5e3d2", "patch": "@@ -1,3 +1,14 @@\n+2008-01-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34681\n+\t* trans_array.c (gfc_trans_deferred_array): Do not null the\n+\tdata pointer on entering scope, nor deallocate it on leaving\n+\tscope, if the symbol has the 'save' attribute.\n+\n+\tPR fortran/34704\n+\t* trans_decl.c (gfc_finish_var_decl): Derived types with\n+\tallocatable components and an initializer must be TREE_STATIC.\n+\n 2008-01-07  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34672"}, {"sha": "f8d90820f9cee051492026cfad98211b1a252394", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3672065a1dc197ed785e6b1ffae1449621c5e3d2/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3672065a1dc197ed785e6b1ffae1449621c5e3d2/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=3672065a1dc197ed785e6b1ffae1449621c5e3d2", "patch": "@@ -5527,7 +5527,7 @@ gfc_trans_deferred_array (gfc_symbol * sym, tree body)\n     }\n   \n   /* NULLIFY the data pointer.  */\n-  if (GFC_DESCRIPTOR_TYPE_P (type))\n+  if (GFC_DESCRIPTOR_TYPE_P (type) && !sym->attr.save)\n     gfc_conv_descriptor_data_set (&fnblock, descriptor, null_pointer_node);\n \n   gfc_add_expr_to_block (&fnblock, body);\n@@ -5545,7 +5545,7 @@ gfc_trans_deferred_array (gfc_symbol * sym, tree body)\n       gfc_add_expr_to_block (&fnblock, tmp);\n     }\n \n-  if (sym->attr.allocatable)\n+  if (sym->attr.allocatable && !sym->attr.save)\n     {\n       tmp = gfc_trans_dealloc_allocated (sym->backend_decl);\n       gfc_add_expr_to_block (&fnblock, tmp);"}, {"sha": "79a3e8b8c316021de76ea5524cd3fc2bf8816e2e", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3672065a1dc197ed785e6b1ffae1449621c5e3d2/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3672065a1dc197ed785e6b1ffae1449621c5e3d2/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=3672065a1dc197ed785e6b1ffae1449621c5e3d2", "patch": "@@ -525,6 +525,9 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n      SAVE_EXPLICIT.  */\n   if (!sym->attr.use_assoc\n \t&& (sym->attr.save != SAVE_NONE || sym->attr.data\n+\t      || (sym->ts.type == BT_DERIVED\n+\t\t    && sym->ts.derived->attr.alloc_comp\n+\t\t    && sym->value)\n \t      || (sym->value && sym->ns->proc_name->attr.is_main_program)))\n     TREE_STATIC (decl) = 1;\n "}, {"sha": "5b95e2969f5a1b2d86e430633a82cd523df762fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3672065a1dc197ed785e6b1ffae1449621c5e3d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3672065a1dc197ed785e6b1ffae1449621c5e3d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3672065a1dc197ed785e6b1ffae1449621c5e3d2", "patch": "@@ -1,3 +1,9 @@\n+2008-01-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34681\n+\tPR fortran/34704\n+\t* gfortran.dg/alloc_comp_default_init_1.f90: New test.\n+\n 2008-01-07  Janis Johnson  <janis187@us.ibm.com>\n \n \t* lib/target-supports.exp (check_effective_target_powerpc_spu): New."}, {"sha": "48947cd2e666fcf9aac3923e4fec0b459141b8fe", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_default_init_1.f90", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3672065a1dc197ed785e6b1ffae1449621c5e3d2/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_default_init_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3672065a1dc197ed785e6b1ffae1449621c5e3d2/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_default_init_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_default_init_1.f90?ref=3672065a1dc197ed785e6b1ffae1449621c5e3d2", "patch": "@@ -0,0 +1,84 @@\n+! { dg-do run }\n+! Checks the fixes for PR34681 and PR34704, in which various mixtures\r\n+! of default initializer and allocatable array were not being handled\r\n+! correctly for derived types with allocatable components.\n+!\n+! Contributed by Paolo Giannozzi <p.giannozzi@fisica.uniud.it>\n+!\n+program boh\n+  integer :: c1, c2, c3, c4, c5\r\n+  !\r\n+  call mah (0, c1) ! These calls deal with PR34681\r\n+  call mah (1, c2)\r\n+  call mah (2, c3)\r\n+  !\n+  if (c1 /= c2) call abort\n+  if (c1 /= c3) call abort\r\n+  !\r\n+  call mah0 (c4) ! These calls deal with PR34704\r\n+  call mah1 (c5)\r\n+  !\n+  if (c4 /= c5) call abort\n+  !\r\n+end program boh\r\n+!\r\n+subroutine mah (i, c)\r\n+  !\r\n+  integer, intent(in) :: i\r\n+  integer, intent(OUT) :: c\r\n+  !\r\n+  type mix_type\r\n+     real(8), allocatable :: a(:)\r\n+     complex(8), allocatable :: b(:)\r\n+  end type mix_type\r\n+  type(mix_type), allocatable, save :: t(:)\r\n+  integer :: j, n=1024\r\n+  !\r\n+  if (i==0) then\r\n+     allocate (t(1))\r\n+     allocate (t(1)%a(n))\r\n+     allocate (t(1)%b(n))\r\n+     do j=1,n\r\n+        t(1)%a(j) = j\r\n+        t(1)%b(j) = n-j\r\n+     end do\r\n+  end if\r\n+  c = sum( t(1)%a(:) ) + sum( t(1)%b(:) )\r\n+  if ( i==2) then\r\n+     deallocate (t(1)%b)\r\n+     deallocate (t(1)%a)\r\n+     deallocate (t)\r\n+  end if\r\n+end subroutine mah\n+\n+subroutine mah0 (c)\r\n+  !\r\n+  integer, intent(OUT) :: c\r\n+  type mix_type\r\n+     real(8), allocatable :: a(:)\r\n+     integer :: n=1023\r\n+  end type mix_type\r\n+  type(mix_type) :: t\r\n+  !\r\n+  allocate(t%a(1))\r\n+  t%a=3.1415926\r\n+  c = t%n\r\n+  deallocate(t%a)\r\n+  !\r\n+end subroutine mah0\r\n+!\r\n+subroutine mah1 (c)\r\n+  !\r\n+  integer, intent(OUT) :: c\r\n+  type mix_type\r\n+     real(8), allocatable :: a(:)\r\n+     integer :: n=1023\r\n+  end type mix_type\r\n+  type(mix_type), save :: t\r\n+  !\r\n+  allocate(t%a(1))\r\n+  t%a=3.1415926\r\n+  c = t%n\r\n+  deallocate(t%a)\r\n+  !\r\n+end subroutine mah1\r"}]}