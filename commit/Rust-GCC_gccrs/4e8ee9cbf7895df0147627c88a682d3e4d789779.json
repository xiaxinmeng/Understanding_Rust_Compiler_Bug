{"sha": "4e8ee9cbf7895df0147627c88a682d3e4d789779", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU4ZWU5Y2JmNzg5NWRmMDE0NzYyN2M4OGE2ODJkM2U0ZDc4OTc3OQ==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2012-05-08T21:22:28Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2012-05-08T21:22:28Z"}, "message": "This patch adds functionality to libgcov to enable user applications to collect...\n\nThis patch adds functionality to libgcov to enable user applications to\ncollect profile data only in regions of interest. This is useful, for\nexample, to collect profile data from a long-running server only\nduring the time when it is serving requests.\n\nSpecifically, the new routines __gcov_reset will clear all profile counters\nto zero and __gcov_dump will write out the profile information collected so\nfar. A global variable is used to prevent writing out the profile a\nsecond time during exit.\n\n2012-05-08   Teresa Johnson  <tejohnson@google.com>\n\n\t* libgcc/libgcov.c (gcov_clear, __gcov_reset): New functions.\n\t(__gcov_dump): Ditto.\n\t(gcov_dump_complete): New global variable.\n\t(gcov_exit): Export hidden to enable use in L_gcov_dump.\n\t(__gcov_flush): Outline functionality now in gcov_clear.\n\t* libgcc/Makefile.in (L_gcov_reset, L_gcov_dump): Define.\n\t* gcc/gcov-io.h (__gcov_reset, __gcov_dump): Declare.\n\t* gcc/doc/gcov.texi: Add note on using __gcov_reset and __gcov_dump.\n\nFrom-SVN: r187297", "tree": {"sha": "e8169275509aad912d8d4b57d59a52610ef8bcc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8169275509aad912d8d4b57d59a52610ef8bcc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e8ee9cbf7895df0147627c88a682d3e4d789779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8ee9cbf7895df0147627c88a682d3e4d789779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e8ee9cbf7895df0147627c88a682d3e4d789779", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8ee9cbf7895df0147627c88a682d3e4d789779/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "564fe867d8a1abfaa30303b3eca98e9b782fcdc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564fe867d8a1abfaa30303b3eca98e9b782fcdc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/564fe867d8a1abfaa30303b3eca98e9b782fcdc9"}], "stats": {"total": 137, "additions": 111, "deletions": 26}, "files": [{"sha": "a3f5a8fd9d6c4f64d1968b3c6a67c3f1ab046824", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8ee9cbf7895df0147627c88a682d3e4d789779/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8ee9cbf7895df0147627c88a682d3e4d789779/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e8ee9cbf7895df0147627c88a682d3e4d789779", "patch": "@@ -1,3 +1,8 @@\n+2012-05-08   Teresa Johnson  <tejohnson@google.com>\n+\n+\t* gcov-io.h (__gcov_reset, __gcov_dump): Declare.\n+\t* doc/gcov.texi: Add note on using __gcov_reset and __gcov_dump.\n+\n 2012-05-08  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_call_edge_duplication_hooks): Export."}, {"sha": "7256664c0ee9ecb7951f6f2cf941721186ab84a4", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8ee9cbf7895df0147627c88a682d3e4d789779/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8ee9cbf7895df0147627c88a682d3e4d789779/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=4e8ee9cbf7895df0147627c88a682d3e4d789779", "patch": "@@ -538,6 +538,12 @@ now be calculable at compile time in some instances.  Because the\n coverage of all the uses of the inline function will be shown for the\n same source lines, the line counts themselves might seem inconsistent.\n \n+Long-running applications can use the @code{_gcov_reset} and @code{_gcov_dump}\n+facilities to restrict profile collection to the program region of\n+interest. Calling @code{_gcov_reset(void)} will clear all profile counters\n+to zero, and calling @code{_gcov_dump(void)} will cause the profile information\n+collected at that point to be dumped to @file{.gcda} output files.\n+\n @c man end\n \n @node Gcov Data Files"}, {"sha": "c15e64b197b64762770726259c3edd683c4f5dd0", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8ee9cbf7895df0147627c88a682d3e4d789779/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8ee9cbf7895df0147627c88a682d3e4d789779/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=4e8ee9cbf7895df0147627c88a682d3e4d789779", "patch": "@@ -458,6 +458,12 @@ extern void __gcov_init (struct gcov_info *) ATTRIBUTE_HIDDEN;\n /* Called before fork, to avoid double counting.  */\n extern void __gcov_flush (void) ATTRIBUTE_HIDDEN;\n \n+/* Function to reset all counters to 0.  */\n+extern void __gcov_reset (void);\n+\n+/* Function to enable early write of profile information so far.  */\n+extern void __gcov_dump (void);\n+\n /* The merge function that just sums the counters.  */\n extern void __gcov_merge_add (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n "}, {"sha": "9b5c53a126aea1483c341b7b8a08bcab5610dc60", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8ee9cbf7895df0147627c88a682d3e4d789779/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8ee9cbf7895df0147627c88a682d3e4d789779/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=4e8ee9cbf7895df0147627c88a682d3e4d789779", "patch": "@@ -1,3 +1,12 @@\n+2012-05-08   Teresa Johnson  <tejohnson@google.com>\n+\n+\t* libgcov.c (gcov_clear, __gcov_reset): New functions.\n+\t(__gcov_dump): Ditto.\n+\t(gcov_dump_complete): New global variable.\n+\t(gcov_exit): Export hidden to enable use in L_gcov_dump.\n+\t(__gcov_flush): Outline functionality now in gcov_clear.\n+\t* Makefile.in (L_gcov_reset, L_gcov_dump): Define.\n+\n 2012-04-28  Aurelien Jarno  <aurelien@aurel32.net>\n \n \t* config.host (mips64*-*-linux*, mipsisa64*-*-linux*): Remove. "}, {"sha": "e9ea2e9c90d800d308e164aaa7a3f941decdb4a7", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8ee9cbf7895df0147627c88a682d3e4d789779/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8ee9cbf7895df0147627c88a682d3e4d789779/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=4e8ee9cbf7895df0147627c88a682d3e4d789779", "patch": "@@ -849,7 +849,7 @@ include $(iterator)\n # Defined in libgcov.c, included only in gcov library\n LIBGCOV = _gcov _gcov_merge_add _gcov_merge_single _gcov_merge_delta \\\n     _gcov_fork _gcov_execl _gcov_execlp _gcov_execle \\\n-    _gcov_execv _gcov_execvp _gcov_execve \\\n+    _gcov_execv _gcov_execvp _gcov_execve _gcov_reset _gcov_dump \\\n     _gcov_interval_profiler _gcov_pow2_profiler _gcov_one_value_profiler \\\n     _gcov_indirect_call_profiler _gcov_average_profiler _gcov_ior_profiler \\\n     _gcov_merge_ior"}, {"sha": "8ed897117f723f2ab4f4f0b6be31414ca8b829d7", "filename": "libgcc/libgcov.c", "status": "modified", "additions": 84, "deletions": 25, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8ee9cbf7895df0147627c88a682d3e4d789779/libgcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8ee9cbf7895df0147627c88a682d3e4d789779/libgcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.c?ref=4e8ee9cbf7895df0147627c88a682d3e4d789779", "patch": "@@ -50,6 +50,14 @@ void __gcov_init (struct gcov_info *p __attribute__ ((unused))) {}\n void __gcov_flush (void) {}\n #endif\n \n+#ifdef L_gcov_reset\n+void __gcov_reset (void) {}\n+#endif\n+\n+#ifdef L_gcov_dump\n+void __gcov_dump (void) {}\n+#endif\n+\n #ifdef L_gcov_merge_add\n void __gcov_merge_add (gcov_type *counters  __attribute__ ((unused)),\n \t\t       unsigned n_counters __attribute__ ((unused))) {}\n@@ -74,6 +82,10 @@ void __gcov_merge_delta (gcov_type *counters  __attribute__ ((unused)),\n #include <sys/stat.h>\n #endif\n \n+extern void gcov_clear (void) ATTRIBUTE_HIDDEN;\n+extern void gcov_exit (void) ATTRIBUTE_HIDDEN;\n+extern int gcov_dump_complete ATTRIBUTE_HIDDEN;\n+\n #ifdef L_gcov\n #include \"gcov-io.c\"\n \n@@ -91,6 +103,9 @@ static struct gcov_info *gcov_list;\n /* Size of the longest file name. */\n static size_t gcov_max_filename = 0;\n \n+/* Flag when the profile has already been dumped via __gcov_dump().  */\n+int gcov_dump_complete = 0;\n+\n /* Make sure path component of the given FILENAME exists, create\n    missing directories. FILENAME must be writable.\n    Returns zero on success, or -1 if an error occurred.  */\n@@ -268,7 +283,7 @@ gcov_version (struct gcov_info *ptr, gcov_unsigned_t version,\n    in two separate programs, and we must keep the two program\n    summaries separate.  */\n \n-static void\n+void\n gcov_exit (void)\n {\n   struct gcov_info *gi_ptr;\n@@ -286,6 +301,11 @@ gcov_exit (void)\n   char *gi_filename, *gi_filename_up;\n   gcov_unsigned_t crc32 = 0;\n \n+  /* Prevent the counters from being dumped a second time on exit when the\n+     application already wrote out the profile using __gcov_dump().  */\n+  if (gcov_dump_complete)\n+    return;\n+\n   memset (&all_prg, 0, sizeof (all_prg));\n   /* Find the totals for this execution.  */\n   memset (&this_prg, 0, sizeof (this_prg));\n@@ -679,6 +699,37 @@ gcov_exit (void)\n     }\n }\n \n+/* Reset all counters to zero.  */\n+\n+void\n+gcov_clear (void)\n+{\n+  const struct gcov_info *gi_ptr;\n+\n+  for (gi_ptr = gcov_list; gi_ptr; gi_ptr = gi_ptr->next)\n+    {\n+      unsigned f_ix;\n+\n+      for (f_ix = 0; f_ix < gi_ptr->n_functions; f_ix++)\n+\t{\n+\t  unsigned t_ix;\n+\t  const struct gcov_fn_info *gfi_ptr = gi_ptr->functions[f_ix];\n+\n+\t  if (!gfi_ptr || gfi_ptr->key != gi_ptr)\n+\t    continue;\n+\t  const struct gcov_ctr_info *ci_ptr = gfi_ptr->ctrs;\n+\t  for (t_ix = 0; t_ix != GCOV_COUNTERS; t_ix++)\n+\t    {\n+\t      if (!gi_ptr->merge[t_ix])\n+\t\tcontinue;\n+\t      \n+\t      memset (ci_ptr->values, 0, sizeof (gcov_type) * ci_ptr->num);\n+\t      ci_ptr++;\n+\t    }\n+\t}\n+    }\n+}\n+\n /* Add a new object file onto the bb chain.  Invoked automatically\n    when running an object file's global ctors.  */\n \n@@ -730,40 +781,48 @@ init_mx_once (void)\n void\n __gcov_flush (void)\n {\n-  const struct gcov_info *gi_ptr;\n-\n   init_mx_once ();\n   __gthread_mutex_lock (&__gcov_flush_mx);\n \n   gcov_exit ();\n-  for (gi_ptr = gcov_list; gi_ptr; gi_ptr = gi_ptr->next)\n-    {\n-      unsigned f_ix;\n-\n-      for (f_ix = 0; f_ix < gi_ptr->n_functions; f_ix++)\n-\t{\n-\t  unsigned t_ix;\n-\t  const struct gcov_fn_info *gfi_ptr = gi_ptr->functions[f_ix];\n-\n-\t  if (!gfi_ptr || gfi_ptr->key != gi_ptr)\n-\t    continue;\n-\t  const struct gcov_ctr_info *ci_ptr = gfi_ptr->ctrs;\n-\t  for (t_ix = 0; t_ix != GCOV_COUNTERS; t_ix++)\n-\t    {\n-\t      if (!gi_ptr->merge[t_ix])\n-\t\tcontinue;\n-\t      \n-\t      memset (ci_ptr->values, 0, sizeof (gcov_type) * ci_ptr->num);\n-\t      ci_ptr++;\n-\t    }\n-\t}\n-    }\n+  gcov_clear ();\n \n   __gthread_mutex_unlock (&__gcov_flush_mx);\n }\n \n #endif /* L_gcov */\n \n+#ifdef L_gcov_reset\n+\n+/* Function that can be called from application to reset counters to zero,\n+   in order to collect profile in region of interest.  */\n+\n+void\n+__gcov_reset (void)\n+{\n+  gcov_clear ();\n+  /* Re-enable dumping to support collecting profile in multiple regions\n+     of interest.  */\n+  gcov_dump_complete = 0;\n+}\n+\n+#endif /* L_gcov_reset */\n+\n+#ifdef L_gcov_dump\n+\n+/* Function that can be called from application to write profile collected\n+   so far, in order to collect profile in region of interest.  */\n+\n+void\n+__gcov_dump (void)\n+{\n+  gcov_exit ();\n+  /* Prevent profile from being dumped a second time on application exit.  */\n+  gcov_dump_complete = 1;\n+}\n+\n+#endif /* L_gcov_dump */\n+\n #ifdef L_gcov_merge_add\n /* The profile merging function that just adds the counters.  It is given\n    an array COUNTERS of N_COUNTERS old counters and it reads the same number"}]}