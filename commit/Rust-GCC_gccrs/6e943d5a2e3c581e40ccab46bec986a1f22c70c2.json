{"sha": "6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU5NDNkNWEyZTNjNTgxZTQwY2NhYjQ2YmVjOTg2YTFmMjJjNzBjMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-04-01T22:22:52Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-04-01T22:22:52Z"}, "message": "analyzer: record per-enode saved_diagnostics\n\nVarious places iterate through all of the saved_diagnostics to find\njust the ones that are at a given enode.  This patch adds a per-enode\nrecord of the diagnostics that are at each node, to save iterating\nthrough all of the diagnostics each time.\n\ngcc/analyzer/ChangeLog:\n\t* diagnostic-manager.cc (diagnostic_manager::add_diagnostic): Make\n\tenode param non-constant, and call add_diagnostic on it.  Add\n\tenode index to log message.\n\t(diagnostic_manager::add_diagnostic): Make enode param\n\tnon-constant.\n\t* diagnostic-manager.h (diagnostic_manager::add_diagnostic):\n\tLikewise for both decls.\n\t* engine.cc\n\t(impl_region_model_context::impl_region_model_context): Likewise\n\tfor enode_for_diag.\n\t(impl_sm_context::impl_sm_context): Likewise.\n\t(impl_sm_context::m_enode_for_diag): Likewise.\n\t(exploded_node::dump_dot): Don't pass the diagnostic manager\n\tto dump_saved_diagnostics.\n\t(exploded_node::dump_saved_diagnostics): Drop param.  Iterate\n\tdirectly through all saved diagnostics for the enode, rather\n\tthan all saved diagnostics in the diagnostic_manager and\n\tfiltering.\n\t(exploded_node::on_stmt): Make non-const.\n\t(exploded_node::on_edge): Likewise.\n\t(exploded_node::on_longjmp): Likewise.\n\t(exploded_node::detect_leaks): Likewise.\n\t(exploded_graph::get_or_create_node): Make enode_for_diag param\n\tnon-const.\n\t(exploded_graph_annotator::print_enode): Iterate\n\tdirectly through all saved diagnostics for the enode, rather\n\tthan all saved diagnostics in the diagnostic_manager and\n\tfiltering.\n\t* exploded-graph.h\n\t(impl_region_model_context::impl_region_model_context): Make\n\tenode_for_diag param non-constant.\n\t(impl_region_model_context::m_enode_for_diag): Likewise.\n\t(exploded_node::dump_saved_diagnostics): Drop param.\n\t(exploded_node::on_stmt): Make non-const.\n\t(exploded_node::on_edge): Likewise.\n\t(exploded_node::on_longjmp): Likewise.\n\t(exploded_node::detect_leaks): Likewise.\n\t(exploded_node::add_diagnostic): New.\n\t(exploded_node::get_num_diagnostics): New.\n\t(exploded_node::get_saved_diagnostic): New.\n\t(exploded_node::m_saved_diagnostics): New.\n\t(exploded_graph::get_or_create_node): Make enode_for_diag param\n\tnon-constant.\n\t* feasible-graph.cc (feasible_node::dump_dot): Drop\n\tdiagnostic_manager from call to dump_saved_diagnostics.\n\t* program-state.cc (program_state::on_edge): Convert enode param\n\tto non-const pointer.\n\t(program_state::prune_for_point): Likewise for enode_for_diag\n\tparam.\n\t* program-state.h (program_state::on_edge): Convert enode param\n\tto non-const pointer.\n\t(program_state::prune_for_point): Likewise for enode_for_diag\n\tparam.", "tree": {"sha": "ea25b0beb527ae5bce1d974c9a7d1bd59f6b498b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea25b0beb527ae5bce1d974c9a7d1bd59f6b498b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a60ffc297b9d4903543a25538e62e7fb39420a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a60ffc297b9d4903543a25538e62e7fb39420a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a60ffc297b9d4903543a25538e62e7fb39420a9"}], "stats": {"total": 120, "additions": 65, "deletions": 55}, "files": [{"sha": "9ec3e899e85c9917cd3824ee54192fd05406db10", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "patch": "@@ -791,7 +791,7 @@ diagnostic_manager::diagnostic_manager (logger *logger, engine *eng,\n \n void\n diagnostic_manager::add_diagnostic (const state_machine *sm,\n-\t\t\t\t    const exploded_node *enode,\n+\t\t\t\t    exploded_node *enode,\n \t\t\t\t    const supernode *snode, const gimple *stmt,\n \t\t\t\t    stmt_finder *finder,\n \t\t\t\t    tree var,\n@@ -809,16 +809,17 @@ diagnostic_manager::add_diagnostic (const state_machine *sm,\n     = new saved_diagnostic (sm, enode, snode, stmt, finder, var, sval,\n \t\t\t    state, d, m_saved_diagnostics.length ());\n   m_saved_diagnostics.safe_push (sd);\n+  enode->add_diagnostic (sd);\n   if (get_logger ())\n-    log (\"adding saved diagnostic %i at SN %i: %qs\",\n+    log (\"adding saved diagnostic %i at SN %i to EN %i: %qs\",\n \t sd->get_index (),\n-\t snode->m_index, d->get_kind ());\n+\t snode->m_index, enode->m_index, d->get_kind ());\n }\n \n /* Queue pending_diagnostic D at ENODE for later emission.  */\n \n void\n-diagnostic_manager::add_diagnostic (const exploded_node *enode,\n+diagnostic_manager::add_diagnostic (exploded_node *enode,\n \t\t\t\t    const supernode *snode, const gimple *stmt,\n \t\t\t\t    stmt_finder *finder,\n \t\t\t\t    pending_diagnostic *d)"}, {"sha": "fc8ac2650c20d147275d0bdbaf752e0b1a6a042b", "filename": "gcc/analyzer/diagnostic-manager.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.h?ref=6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "patch": "@@ -101,15 +101,15 @@ class diagnostic_manager : public log_user\n   json::object *to_json () const;\n \n   void add_diagnostic (const state_machine *sm,\n-\t\t       const exploded_node *enode,\n+\t\t       exploded_node *enode,\n \t\t       const supernode *snode, const gimple *stmt,\n \t\t       stmt_finder *finder,\n \t\t       tree var,\n \t\t       const svalue *sval,\n \t\t       state_machine::state_t state,\n \t\t       pending_diagnostic *d);\n \n-  void add_diagnostic (const exploded_node *enode,\n+  void add_diagnostic (exploded_node *enode,\n \t\t       const supernode *snode, const gimple *stmt,\n \t\t       stmt_finder *finder,\n \t\t       pending_diagnostic *d);"}, {"sha": "857d43450d17a29ec94f5c52c227a0a17f4fff8b", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "patch": "@@ -75,7 +75,7 @@ namespace ana {\n \n impl_region_model_context::\n impl_region_model_context (exploded_graph &eg,\n-\t\t\t   const exploded_node *enode_for_diag,\n+\t\t\t   exploded_node *enode_for_diag,\n \t\t\t   const program_state *old_state,\n \t\t\t   program_state *new_state,\n \t\t\t   const gimple *stmt,\n@@ -199,7 +199,7 @@ class impl_sm_context : public sm_context\n   impl_sm_context (exploded_graph &eg,\n \t\t   int sm_idx,\n \t\t   const state_machine &sm,\n-\t\t   const exploded_node *enode_for_diag,\n+\t\t   exploded_node *enode_for_diag,\n \t\t   const program_state *old_state,\n \t\t   program_state *new_state,\n \t\t   const sm_state_map *old_smap,\n@@ -352,7 +352,7 @@ class impl_sm_context : public sm_context\n \n   log_user m_logger;\n   exploded_graph &m_eg;\n-  const exploded_node *m_enode_for_diag;\n+  exploded_node *m_enode_for_diag;\n   const program_state *m_old_state;\n   program_state *m_new_state;\n   const sm_state_map *m_old_smap;\n@@ -950,7 +950,7 @@ exploded_node::dump_dot (graphviz_out *gv, const dump_args_t &args) const\n       dump_processed_stmts (pp);\n     }\n \n-  dump_saved_diagnostics (pp, args.m_eg.get_diagnostic_manager ());\n+  dump_saved_diagnostics (pp);\n \n   args.dump_extra_info (this, pp);\n \n@@ -988,18 +988,15 @@ exploded_node::dump_processed_stmts (pretty_printer *pp) const\n /* Dump any saved_diagnostics at this enode to PP.  */\n \n void\n-exploded_node::dump_saved_diagnostics (pretty_printer *pp,\n-\t\t\t\t       const diagnostic_manager &dm) const\n+exploded_node::dump_saved_diagnostics (pretty_printer *pp) const\n {\n-  for (unsigned i = 0; i < dm.get_num_diagnostics (); i++)\n+  unsigned i;\n+  const saved_diagnostic *sd;\n+  FOR_EACH_VEC_ELT (m_saved_diagnostics, i, sd)\n     {\n-      const saved_diagnostic *sd = dm.get_saved_diagnostic (i);\n-      if (sd->m_enode == this)\n-\t{\n-\t  pp_printf (pp, \"DIAGNOSTIC: %s (sd: %i)\",\n-\t\t     sd->m_d->get_kind (), sd->get_index ());\n-\t  pp_newline (pp);\n-\t}\n+      pp_printf (pp, \"DIAGNOSTIC: %s (sd: %i)\",\n+\t\t sd->m_d->get_kind (), sd->get_index ());\n+      pp_newline (pp);\n     }\n }\n \n@@ -1119,7 +1116,7 @@ exploded_node::on_stmt_flags\n exploded_node::on_stmt (exploded_graph &eg,\n \t\t\tconst supernode *snode,\n \t\t\tconst gimple *stmt,\n-\t\t\tprogram_state *state) const\n+\t\t\tprogram_state *state)\n {\n   logger *logger = eg.get_logger ();\n   LOG_SCOPE (logger);\n@@ -1303,14 +1300,14 @@ bool\n exploded_node::on_edge (exploded_graph &eg,\n \t\t\tconst superedge *succ,\n \t\t\tprogram_point *next_point,\n-\t\t\tprogram_state *next_state) const\n+\t\t\tprogram_state *next_state)\n {\n   LOG_FUNC (eg.get_logger ());\n \n   if (!next_point->on_edge (eg, succ))\n     return false;\n \n-  if (!next_state->on_edge (eg, *this, succ))\n+  if (!next_state->on_edge (eg, this, succ))\n     return false;\n \n   return true;\n@@ -1435,7 +1432,7 @@ void\n exploded_node::on_longjmp (exploded_graph &eg,\n \t\t\t   const gcall *longjmp_call,\n \t\t\t   program_state *new_state,\n-\t\t\t   region_model_context *ctxt) const\n+\t\t\t   region_model_context *ctxt)\n {\n   tree buf_ptr = gimple_call_arg (longjmp_call, 0);\n   gcc_assert (POINTER_TYPE_P (TREE_TYPE (buf_ptr)));\n@@ -1544,7 +1541,7 @@ exploded_node::on_longjmp (exploded_graph &eg,\n    leaks.  */\n \n void\n-exploded_node::detect_leaks (exploded_graph &eg) const\n+exploded_node::detect_leaks (exploded_graph &eg)\n {\n   LOG_FUNC_1 (eg.get_logger (), \"EN: %i\", m_index);\n \n@@ -2163,7 +2160,7 @@ exploded_graph::add_function_entry (function *fun)\n exploded_node *\n exploded_graph::get_or_create_node (const program_point &point,\n \t\t\t\t    const program_state &state,\n-\t\t\t\t    const exploded_node *enode_for_diag)\n+\t\t\t\t    exploded_node *enode_for_diag)\n {\n   logger * const logger = get_logger ();\n   LOG_FUNC (logger);\n@@ -4664,16 +4661,13 @@ class exploded_graph_annotator : public dot_annotator\n \tbreak;\n       }\n     gv->end_tdtr ();\n+\n     /* Dump any saved_diagnostics at this enode.  */\n-    {\n-      const diagnostic_manager &dm = m_eg.get_diagnostic_manager ();\n-      for (unsigned i = 0; i < dm.get_num_diagnostics (); i++)\n-\t{\n-\t  const saved_diagnostic *sd = dm.get_saved_diagnostic (i);\n-\t  if (sd->m_enode == enode)\n-\t    print_saved_diagnostic (gv, sd);\n-\t}\n-    }\n+    for (unsigned i = 0; i < enode->get_num_diagnostics (); i++)\n+      {\n+\tconst saved_diagnostic *sd = enode->get_saved_diagnostic (i);\n+\tprint_saved_diagnostic (gv, sd);\n+      }\n     pp_printf (pp, \"</TABLE>\");\n     pp_printf (pp, \"</TD>\");\n   }"}, {"sha": "2566641148064f869d14ae3b482cbb2b11a3257d", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "patch": "@@ -30,7 +30,7 @@ class impl_region_model_context : public region_model_context\n {\n  public:\n   impl_region_model_context (exploded_graph &eg,\n-\t\t\t     const exploded_node *enode_for_diag,\n+\t\t\t     exploded_node *enode_for_diag,\n \n \t\t\t     /* TODO: should we be getting the ECs from the\n \t\t\t\told state, rather than the new?  */\n@@ -70,7 +70,7 @@ class impl_region_model_context : public region_model_context\n \n   exploded_graph *m_eg;\n   log_user m_logger;\n-  const exploded_node *m_enode_for_diag;\n+  exploded_node *m_enode_for_diag;\n   const program_state *m_old_state;\n   program_state *m_new_state;\n   const gimple *m_stmt;\n@@ -186,8 +186,7 @@ class exploded_node : public dnode<eg_traits>\n   void dump (const extrinsic_state &ext_state) const;\n \n   void dump_processed_stmts (pretty_printer *pp) const;\n-  void dump_saved_diagnostics (pretty_printer *pp,\n-\t\t\t       const diagnostic_manager &dm) const;\n+  void dump_saved_diagnostics (pretty_printer *pp) const;\n \n   json::object *to_json (const extrinsic_state &ext_state) const;\n \n@@ -227,17 +226,17 @@ class exploded_node : public dnode<eg_traits>\n   on_stmt_flags on_stmt (exploded_graph &eg,\n \t\t\t const supernode *snode,\n \t\t\t const gimple *stmt,\n-\t\t\t program_state *state) const;\n+\t\t\t program_state *state);\n   bool on_edge (exploded_graph &eg,\n \t\tconst superedge *succ,\n \t\tprogram_point *next_point,\n-\t\tprogram_state *next_state) const;\n+\t\tprogram_state *next_state);\n   void on_longjmp (exploded_graph &eg,\n \t\t   const gcall *call,\n \t\t   program_state *new_state,\n-\t\t   region_model_context *ctxt) const;\n+\t\t   region_model_context *ctxt);\n \n-  void detect_leaks (exploded_graph &eg) const;\n+  void detect_leaks (exploded_graph &eg);\n \n   const program_point &get_point () const { return m_ps.get_point (); }\n   const supernode *get_supernode () const\n@@ -269,6 +268,19 @@ class exploded_node : public dnode<eg_traits>\n     m_status = status;\n   }\n \n+  void add_diagnostic (const saved_diagnostic *sd)\n+  {\n+    m_saved_diagnostics.safe_push (sd);\n+  }\n+  unsigned get_num_diagnostics () const\n+  {\n+    return m_saved_diagnostics.length ();\n+  }\n+  const saved_diagnostic *get_saved_diagnostic (unsigned idx) const\n+  {\n+    return m_saved_diagnostics[idx];\n+  }\n+\n private:\n   DISABLE_COPY_AND_ASSIGN (exploded_node);\n \n@@ -278,6 +290,10 @@ class exploded_node : public dnode<eg_traits>\n \n   enum status m_status;\n \n+  /* The saved_diagnostics at this enode, borrowed from the\n+     diagnostic_manager.  */\n+  auto_vec <const saved_diagnostic *> m_saved_diagnostics;\n+\n public:\n   /* The index of this exploded_node.  */\n   const int m_index;\n@@ -761,7 +777,7 @@ class exploded_graph : public digraph<eg_traits>\n \n   exploded_node *get_or_create_node (const program_point &point,\n \t\t\t\t     const program_state &state,\n-\t\t\t\t     const exploded_node *enode_for_diag);\n+\t\t\t\t     exploded_node *enode_for_diag);\n   exploded_edge *add_edge (exploded_node *src, exploded_node *dest,\n \t\t\t   const superedge *sedge,\n \t\t\t   exploded_edge::custom_info_t *custom = NULL);"}, {"sha": "675bda9e7e57b34824b8c7a56e53fc129c6c47d1", "filename": "gcc/analyzer/feasible-graph.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Ffeasible-graph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Ffeasible-graph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ffeasible-graph.cc?ref=6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "patch": "@@ -79,7 +79,7 @@ base_feasible_node::dump_dot_id (pretty_printer *pp) const\n \n void\n feasible_node::dump_dot (graphviz_out *gv,\n-\t\t\tconst dump_args_t &args) const\n+\t\t\tconst dump_args_t &) const\n {\n   pretty_printer *pp = gv->get_pp ();\n \n@@ -102,8 +102,7 @@ feasible_node::dump_dot (graphviz_out *gv,\n   pp_newline (pp);\n \n   m_inner_node->dump_processed_stmts (pp);\n-  m_inner_node->dump_saved_diagnostics\n-    (pp, args.m_inner_args.m_eg.get_diagnostic_manager ());\n+  m_inner_node->dump_saved_diagnostics (pp);\n \n   pp_write_text_as_dot_label_to_stream (pp, /*for_record=*/true);\n "}, {"sha": "347cb290d107a9386a8c0f1dcc2d0670a6700faf", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "patch": "@@ -959,11 +959,11 @@ program_state::get_current_function () const\n \n bool\n program_state::on_edge (exploded_graph &eg,\n-\t\t\tconst exploded_node &enode,\n+\t\t\texploded_node *enode,\n \t\t\tconst superedge *succ)\n {\n   /* Update state.  */\n-  const program_point &point = enode.get_point ();\n+  const program_point &point = enode->get_point ();\n   const gimple *last_stmt = point.get_supernode ()->get_last_stmt ();\n \n   /* For conditionals and switch statements, add the\n@@ -975,8 +975,8 @@ program_state::on_edge (exploded_graph &eg,\n      sm-state transitions (e.g. transitions due to ptrs becoming known\n      to be NULL or non-NULL) */\n \n-  impl_region_model_context ctxt (eg, &enode,\n-\t\t\t\t  &enode.get_state (),\n+  impl_region_model_context ctxt (eg, enode,\n+\t\t\t\t  &enode->get_state (),\n \t\t\t\t  this,\n \t\t\t\t  last_stmt);\n   if (!m_region_model->maybe_update_for_edge (*succ,\n@@ -991,7 +991,7 @@ program_state::on_edge (exploded_graph &eg,\n       return false;\n     }\n \n-  program_state::detect_leaks (enode.get_state (), *this,\n+  program_state::detect_leaks (enode->get_state (), *this,\n \t\t\t\tNULL, eg.get_ext_state (),\n \t\t\t\t&ctxt);\n \n@@ -1007,7 +1007,7 @@ program_state::on_edge (exploded_graph &eg,\n program_state\n program_state::prune_for_point (exploded_graph &eg,\n \t\t\t\tconst program_point &point,\n-\t\t\t\tconst exploded_node *enode_for_diag) const\n+\t\t\t\texploded_node *enode_for_diag) const\n {\n   logger * const logger = eg.get_logger ();\n   LOG_SCOPE (logger);"}, {"sha": "71b6f0187a4842fbda10bb650210556c50f5e231", "filename": "gcc/analyzer/program-state.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Fprogram-state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e943d5a2e3c581e40ccab46bec986a1f22c70c2/gcc%2Fanalyzer%2Fprogram-state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.h?ref=6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "patch": "@@ -221,12 +221,12 @@ class program_state\n   function * get_current_function () const;\n \n   bool on_edge (exploded_graph &eg,\n-\t\tconst exploded_node &enode,\n+\t\texploded_node *enode,\n \t\tconst superedge *succ);\n \n   program_state prune_for_point (exploded_graph &eg,\n \t\t\t\t const program_point &point,\n-\t\t\t\t const exploded_node *enode_for_diag) const;\n+\t\t\t\t exploded_node *enode_for_diag) const;\n \n   tree get_representative_tree (const svalue *sval) const;\n "}]}