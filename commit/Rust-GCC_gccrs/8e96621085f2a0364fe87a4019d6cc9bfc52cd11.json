{"sha": "8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5NjYyMTA4NWYyYTAzNjRmZTg3YTQwMTlkNmNjOWJmYzUyY2QxMQ==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@gmail.com", "date": "2019-03-02T00:36:22Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2019-03-02T00:36:22Z"}, "message": "RISC-V: Generalize -march support, add ELF attribute support.\n\n\tKito Cheng  <kito.cheng@gmail.com>\n\tMonk Chiang  <sh.chiang04@gmail.com>\n\n\tgcc/\n\t* common/config/riscv/riscv-common.c: Include sstream.\n\t(riscv_subset_list::to_string): New.\n\t(riscv_arch_str): Likewise.\n\t* config.gcc (riscv*-*-*): Handle --with-riscv-attribute=\n\t* config.in: Regen.\n\t* config/riscv/riscv-protos.h (riscv_arch_str): New.\n\t* config/riscv/riscv.c (INCLUDE_STRING): Defined.\n\t(riscv_emit_attribute): New.\n\t(riscv_file_start): Emit attribute if needed.\n\t(riscv_option_override): Init riscv_emit_attribute_p.\n\t* config/riscv/riscv.opt (mriscv-attribute): New option.\n\t* configure.ac (riscv*-*-*): Check binutils is supporting ELF\n\t* configure: Regen.\n\t* doc/install.texi: Document --with-riscv-attribute.\n\t* doc/invoke.texi: Document -mriscv-attribute.\n\n\t* common/config/riscv/riscv-common.c:\n\tInclude config/riscv/riscv-protos.h.\n\t(INCLUDE_STRING): Defined.\n\t(RISCV_DONT_CARE_VERSION): Defined.\n\t(riscv_subset_t): Declare.\n\t(riscv_subset_t::riscv_subset_t): New.\n\t(riscv_subset_list): Declare.\n\t(riscv_subset_list::riscv_subset_list): New.\n\t(riscv_subset_list::~riscv_subset_list): Likewise.\n\t(riscv_subset_list::parsing_subset_version): Likewise.\n\t(riscv_subset_list::parse_std_ext): Likewise.\n\t(riscv_subset_list::parse_sv_or_non_std_ext): Likewise.\n\t(riscv_subset_list::add): Likewise.\n\t(riscv_subset_list::lookup): Likewise.\n\t(riscv_subset_list::xlen): Likewise.\n\t(riscv_subset_list::parse): Likewise.\n\t(riscv_supported_std_ext): Likewise.\n\t(current_subset_list): Likewise.\n\t(riscv_parse_arch_string): Using riscv_subset_list::parse to\n\tparse.\n\n\tgcc/testsuite/\n\t* gcc.target/riscv/attribute-1.c: New.\n\t* gcc.target/riscv/attribute-2.c: Likewise.\n\t* gcc.target/riscv/attribute-3.c: Likewise.\n\t* gcc.target/riscv/attribute-4.c: Likewise.\n\t* gcc.target/riscv/attribute-5.c: Likewise.\n\t* gcc.target/riscv/attribute-6.c: Likewise.\n\t* gcc.target/riscv/attribute-7.c: Likewise.\n\t* gcc.target/riscv/attribute-8.c: Likewise.\n\t* gcc.target/riscv/attribute-9.c: Likewise.\n\n\t* gcc.target/riscv/arch-1.c: New.\n\t* gcc.target/riscv/arch-2.c: Likewise.\n\t* gcc.target/riscv/arch-3.c: Likewise.\n\t* gcc.target/riscv/arch-4.c: Likewise.\n\nCo-Authored-By: Monk Chiang <sh.chiang04@gmail.com>\n\nFrom-SVN: r269337", "tree": {"sha": "bbe9691899218d19a0877138b5a2ea5b867af3af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbe9691899218d19a0877138b5a2ea5b867af3af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe3732876f2b5ec20c7811a42893772045648aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe3732876f2b5ec20c7811a42893772045648aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe3732876f2b5ec20c7811a42893772045648aa2"}], "stats": {"total": 822, "additions": 763, "deletions": 59}, "files": [{"sha": "96693d336fa0d88689947632a9f73022e8c99c21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -1,3 +1,43 @@\n+2019-03-01  Kito Cheng  <kito.cheng@gmail.com>\n+\t    Monk Chiang  <sh.chiang04@gmail.com>\n+\n+\t* common/config/riscv/riscv-common.c: Include sstream.\n+\t(riscv_subset_list::to_string): New.\n+\t(riscv_arch_str): Likewise.\n+\t* config.gcc (riscv*-*-*): Handle --with-riscv-attribute=\n+\t* config.in: Regen.\n+\t* config/riscv/riscv-protos.h (riscv_arch_str): New.\n+\t* config/riscv/riscv.c (INCLUDE_STRING): Defined.\n+\t(riscv_emit_attribute): New.\n+\t(riscv_file_start): Emit attribute if needed.\n+\t(riscv_option_override): Init riscv_emit_attribute_p.\n+\t* config/riscv/riscv.opt (mriscv-attribute): New option.\n+\t* configure.ac (riscv*-*-*): Check binutils is supporting ELF\n+\t* configure: Regen.\n+\t* doc/install.texi: Document --with-riscv-attribute.\n+\t* doc/invoke.texi: Document -mriscv-attribute.\n+\n+\t* common/config/riscv/riscv-common.c:\n+\tInclude config/riscv/riscv-protos.h.\n+\t(INCLUDE_STRING): Defined.\n+\t(RISCV_DONT_CARE_VERSION): Defined.\n+\t(riscv_subset_t): Declare.\n+\t(riscv_subset_t::riscv_subset_t): New.\n+\t(riscv_subset_list): Declare.\n+\t(riscv_subset_list::riscv_subset_list): New.\n+\t(riscv_subset_list::~riscv_subset_list): Likewise.\n+\t(riscv_subset_list::parsing_subset_version): Likewise.\n+\t(riscv_subset_list::parse_std_ext): Likewise.\n+\t(riscv_subset_list::parse_sv_or_non_std_ext): Likewise.\n+\t(riscv_subset_list::add): Likewise.\n+\t(riscv_subset_list::lookup): Likewise.\n+\t(riscv_subset_list::xlen): Likewise.\n+\t(riscv_subset_list::parse): Likewise.\n+\t(riscv_supported_std_ext): Likewise.\n+\t(current_subset_list): Likewise.\n+\t(riscv_parse_arch_string): Using riscv_subset_list::parse to\n+\tparse.\n+\n 2019-03-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (rs6000_option_override_internal): If"}, {"sha": "16ddb26b174465eb89c3cb0bc0425e1cb0e04372", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 506, "deletions": 57, "changes": 563, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -17,6 +17,9 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+#include <sstream>\n+\n+#define INCLUDE_STRING\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n@@ -26,99 +29,545 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"flags.h\"\n #include \"diagnostic-core.h\"\n+#include \"config/riscv/riscv-protos.h\"\n \n-/* Parse a RISC-V ISA string into an option mask.  Must clear or set all arch\n-   dependent mask bits, in case more than one -march string is passed.  */\n+#define RISCV_DONT_CARE_VERSION -1\n \n-static void\n-riscv_parse_arch_string (const char *isa, int *flags, location_t loc)\n+/* Subset info.  */\n+struct riscv_subset_t\n {\n-  const char *p = isa;\n+  riscv_subset_t ();\n \n-  if (strncmp (p, \"rv32\", 4) == 0)\n-    *flags &= ~MASK_64BIT, p += 4;\n-  else if (strncmp (p, \"rv64\", 4) == 0)\n-    *flags |= MASK_64BIT, p += 4;\n-  else\n+  std::string name;\n+  int major_version;\n+  int minor_version;\n+  struct riscv_subset_t *next;\n+};\n+\n+/* Subset list.  */\n+class riscv_subset_list\n+{\n+private:\n+  /* Original arch string.  */\n+  const char *m_arch;\n+\n+  /* Location of arch string, used for report error.  */\n+  location_t m_loc;\n+\n+  /* Head of subset info list.  */\n+  riscv_subset_t *m_head;\n+\n+  /* Tail of subset info list.  */\n+  riscv_subset_t *m_tail;\n+\n+  /* X-len of m_arch. */\n+  unsigned m_xlen;\n+\n+  riscv_subset_list (const char *, location_t);\n+\n+  const char *parsing_subset_version (const char *, unsigned *, unsigned *,\n+\t\t\t\t      unsigned, unsigned, bool);\n+\n+  const char *parse_std_ext (const char *);\n+\n+  const char *parse_sv_or_non_std_ext (const char *, const char *,\n+\t\t\t\t       const char *);\n+\n+public:\n+  ~riscv_subset_list ();\n+\n+  void add (const char *, int, int);\n+\n+  riscv_subset_t *lookup (const char *,\n+\t\t\t  int major_version = RISCV_DONT_CARE_VERSION,\n+\t\t\t  int minor_version = RISCV_DONT_CARE_VERSION) const;\n+\n+  std::string to_string () const;\n+\n+  unsigned xlen() const {return m_xlen;};\n+\n+  static riscv_subset_list *parse (const char *, location_t);\n+\n+};\n+\n+static const char *riscv_supported_std_ext (void);\n+\n+static riscv_subset_list *current_subset_list = NULL;\n+\n+riscv_subset_t::riscv_subset_t ()\n+  : name (), major_version (0), minor_version (0), next (NULL)\n+{\n+}\n+\n+riscv_subset_list::riscv_subset_list (const char *arch, location_t loc)\n+  : m_arch (arch), m_loc (loc), m_head (NULL), m_tail (NULL), m_xlen (0)\n+{\n+}\n+\n+riscv_subset_list::~riscv_subset_list ()\n+{\n+  if (!m_head)\n+    return;\n+\n+  riscv_subset_t *item = this->m_head;\n+  while (item != NULL)\n     {\n-      error_at (loc, \"-march=%s: ISA string must begin with rv32 or rv64\", isa);\n-      return;\n+      riscv_subset_t *next = item->next;\n+      delete item;\n+      item = next;\n     }\n+}\n \n-  if (*p == 'g')\n-    {\n-      p++;\n+/* Add new subset to list.  */\n \n-      *flags &= ~MASK_RVE;\n+void\n+riscv_subset_list::add (const char *subset, int major_version,\n+\t\t\tint minor_version)\n+{\n+  riscv_subset_t *s = new riscv_subset_t ();\n \n-      *flags |= MASK_MUL;\n-      *flags |= MASK_ATOMIC;\n-      *flags |= MASK_HARD_FLOAT;\n-      *flags |= MASK_DOUBLE_FLOAT;\n-    }\n-  else if (*p == 'i')\n+  if (m_head == NULL)\n+    m_head = s;\n+\n+  s->name = subset;\n+  s->major_version = major_version;\n+  s->minor_version = minor_version;\n+  s->next = NULL;\n+\n+  if (m_tail != NULL)\n+    m_tail->next = s;\n+\n+  m_tail = s;\n+}\n+\n+/* Convert subset info to string with explicit version info.  */\n+\n+std::string\n+riscv_subset_list::to_string () const\n+{\n+  std::ostringstream oss;\n+  oss << \"rv\" << m_xlen;\n+\n+  bool first = true;\n+  riscv_subset_t *subset = m_head;\n+\n+  while (subset != NULL)\n     {\n-      p++;\n+      if (!first)\n+\toss << '_';\n+      first = false;\n+\n+      oss << subset->name\n+\t  << subset->major_version\n+\t  << 'p'\n+\t  << subset->minor_version;\n+      subset = subset->next;\n+    }\n+\n+  return oss.str ();\n+}\n+\n+/* Find subset in list with version checking, return NULL if not found.\n+   major/minor version checking can be ignored if major_version/minor_version\n+   is RISCV_DONT_CARE_VERSION.  */\n+\n+riscv_subset_t *\n+riscv_subset_list::lookup (const char *subset, int major_version,\n+\t\t\t   int minor_version) const\n+{\n+  riscv_subset_t *s;\n+\n+  for (s = m_head; s != NULL; s = s->next)\n+    if (strcasecmp (s->name.c_str (), subset) == 0)\n+      {\n+\tif ((major_version != RISCV_DONT_CARE_VERSION)\n+\t    && (s->major_version != major_version))\n+\t  return NULL;\n+\n+\tif ((minor_version != RISCV_DONT_CARE_VERSION)\n+\t    && (s->minor_version != minor_version))\n+\t  return NULL;\n+\n+\treturn s;\n+      }\n+\n+  return s;\n+}\n+\n+/* Return string which contains all supported standard extensions in\n+   canonical order.  */\n \n-      *flags &= ~MASK_RVE;\n+static const char *\n+riscv_supported_std_ext (void)\n+{\n+  return \"mafdqlcbjtpvn\";\n+}\n+\n+/* Parsing subset version.\n \n-      *flags &= ~MASK_MUL;\n-      if (*p == 'm')\n-\t*flags |= MASK_MUL, p++;\n+   Return Value:\n+     Points to the end of version\n \n-      *flags &= ~MASK_ATOMIC;\n-      if (*p == 'a')\n-\t*flags |= MASK_ATOMIC, p++;\n+   Arguments:\n+     `p`: Current parsing position.\n+     `major_version`: Parsing result of major version, using\n+      default_major_version if version is not present in arch string.\n+     `minor_version`: Parsing result of minor version, set to 0 if version is\n+     not present in arch string, but set to `default_minor_version` if\n+     `major_version` using default_major_version.\n+     `default_major_version`: Default major version.\n+     `default_minor_version`: Default minor version.\n+     `std_ext_p`: True if parsing std extension.  */\n \n-      *flags &= ~(MASK_HARD_FLOAT | MASK_DOUBLE_FLOAT);\n-      if (*p == 'f')\n+const char *\n+riscv_subset_list::parsing_subset_version (const char *p,\n+\t\t\t\t\t   unsigned *major_version,\n+\t\t\t\t\t   unsigned *minor_version,\n+\t\t\t\t\t   unsigned default_major_version,\n+\t\t\t\t\t   unsigned default_minor_version,\n+\t\t\t\t\t   bool std_ext_p)\n+{\n+  bool major_p = true;\n+  unsigned version = 0;\n+  unsigned major = 0;\n+  unsigned minor = 0;\n+  char np;\n+\n+  for (; *p; ++p)\n+    {\n+      if (*p == 'p')\n \t{\n-\t  *flags |= MASK_HARD_FLOAT, p++;\n+\t  np = *(p + 1);\n \n-\t  if (*p == 'd')\n+\t  if (!ISDIGIT (np))\n \t    {\n-\t      *flags |= MASK_DOUBLE_FLOAT;\n-\t      p++;\n+\t      /* Might be beginning of `p` extension.  */\n+\t      if (std_ext_p)\n+\t\t{\n+\t\t  *major_version = version;\n+\t\t  *minor_version = 0;\n+\t\t  return p;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  error_at (m_loc, \"-march=%s: Expect number after `%dp'.\",\n+\t\t\t    m_arch, version);\n+\t\t  return NULL;\n+\t\t}\n \t    }\n+\n+\t  major = version;\n+\t  major_p = false;\n+\t  version = 0;\n \t}\n+      else if (ISDIGIT (*p))\n+\tversion = (version * 10) + (*p - '0');\n+      else\n+\tbreak;\n     }\n-  else if (*p == 'e')\n+\n+  if (major_p)\n+    major = version;\n+  else\n+    minor = version;\n+\n+  if (major == 0 && minor == 0)\n+    {\n+      /* We didn't find any version string, use default version.  */\n+      *major_version = default_major_version;\n+      *minor_version = default_minor_version;\n+    }\n+  else\n+    {\n+      *major_version = major;\n+      *minor_version = minor;\n+    }\n+  return p;\n+}\n+\n+/* Parsing function for standard extensions.\n+\n+   Return Value:\n+     Points to the end of extensions.\n+\n+   Arguments:\n+     `p`: Current parsing position.  */\n+\n+const char *\n+riscv_subset_list::parse_std_ext (const char *p)\n+{\n+  const char *all_std_exts = riscv_supported_std_ext ();\n+  const char *std_exts = all_std_exts;\n+\n+  unsigned major_version = 0;\n+  unsigned minor_version = 0;\n+  char std_ext = '\\0';\n+\n+  /* First letter must start with i, e or g.  */\n+  switch (*p)\n     {\n+    case 'i':\n+      p++;\n+      p = parsing_subset_version (p, &major_version, &minor_version,\n+\t\t\t\t  /* default_major_version= */ 2,\n+\t\t\t\t  /* default_minor_version= */ 0,\n+\t\t\t\t  /* std_ext_p= */ true);\n+      add (\"i\", major_version, minor_version);\n+      break;\n+\n+    case 'e':\n       p++;\n+      p = parsing_subset_version (p, &major_version, &minor_version,\n+\t\t\t\t  /* default_major_version= */ 1,\n+\t\t\t\t  /* default_minor_version= */ 9,\n+\t\t\t\t  /* std_ext_p= */ true);\n \n-      *flags |= MASK_RVE;\n+      add (\"e\", major_version, minor_version);\n \n-      if (*flags & MASK_64BIT)\n+      if (m_xlen > 32)\n \t{\n-\t  error (\"RV64E is not a valid base ISA\");\n-\t  return;\n+\t  error_at (m_loc, \"-march=%s: rv%de is not a valid base ISA\", m_arch,\n+\t\t    m_xlen);\n+\t  return NULL;\n \t}\n+      break;\n \n-      *flags &= ~MASK_MUL;\n-      if (*p == 'm')\n-\t*flags |= MASK_MUL, p++;\n+    case 'g':\n+      p++;\n+      p = parsing_subset_version (p, &major_version, &minor_version,\n+\t\t\t\t  /* default_major_version= */ 2,\n+\t\t\t\t  /* default_minor_version= */ 0,\n+\t\t\t\t  /* std_ext_p= */ true);\n+      add (\"i\", major_version, minor_version);\n \n-      *flags &= ~MASK_ATOMIC;\n-      if (*p == 'a')\n-\t*flags |= MASK_ATOMIC, p++;\n+      for (; *std_exts != 'q'; std_exts++)\n+\t{\n+\t  const char subset[] = {*std_exts, '\\0'};\n+\t  add (subset, major_version, minor_version);\n+\t}\n+      break;\n \n-      *flags &= ~(MASK_HARD_FLOAT | MASK_DOUBLE_FLOAT);\n+    default:\n+      error_at (m_loc, \"-march=%s: first ISA subset must be `e', `i' or `g'\",\n+\t\tm_arch);\n+      return NULL;\n     }\n-  else\n+\n+  while (*p)\n     {\n-      error_at (loc, \"-march=%s: invalid ISA string\", isa);\n-      return;\n+      char subset[2] = {0, 0};\n+\n+      if (*p == 'x' || *p == 's')\n+\tbreak;\n+\n+      if (*p == '_')\n+\t{\n+\t  p++;\n+\t  continue;\n+\t}\n+\n+      std_ext = *p;\n+\n+      /* Checking canonical order.  */\n+      while (*std_exts && std_ext != *std_exts)\n+\tstd_exts++;\n+\n+      if (std_ext != *std_exts)\n+\t{\n+\t  if (strchr (all_std_exts, std_ext) == NULL)\n+\t    error_at (m_loc, \"-march=%s: unsupported ISA subset `%c'\",\n+\t\t      m_arch, *p);\n+\t  else\n+\t    error_at (m_loc,\n+\t\t      \"-march=%s: ISA string is not in canonical order. `%c'\",\n+\t\t      m_arch, *p);\n+\t  return NULL;\n+\t}\n+\n+      std_exts++;\n+\n+      p++;\n+      p = parsing_subset_version (p, &major_version, &minor_version,\n+\t\t\t\t  /* default_major_version= */ 2,\n+\t\t\t\t  /* default_minor_version= */ 0,\n+\t\t\t\t  /* std_ext_p= */ true);\n+\n+      subset[0] = std_ext;\n+\n+      add (subset, major_version, minor_version);\n     }\n+  return p;\n+}\n \n-  *flags &= ~MASK_RVC;\n-  if (*p == 'c')\n-    *flags |= MASK_RVC, p++;\n+/* Parsing function for non-standard and supervisor extensions.\n \n-  if (*p)\n+   Return Value:\n+     Points to the end of extensions.\n+\n+   Arguments:\n+     `p`: Current parsing position.\n+     `ext_type`: What kind of extensions, 'x', 's' or 'sx'.\n+     `ext_type_str`: Full name for kind of extension.  */\n+\n+const char *\n+riscv_subset_list::parse_sv_or_non_std_ext (const char *p,\n+\t\t\t\t\t    const char *ext_type,\n+\t\t\t\t\t    const char *ext_type_str)\n+{\n+  unsigned major_version = 0;\n+  unsigned minor_version = 0;\n+  size_t ext_type_len = strlen (ext_type);\n+\n+  while (*p)\n     {\n-      error_at (loc, \"-march=%s: unsupported ISA substring %qs\", isa, p);\n-      return;\n+      if (*p == '_')\n+\t{\n+\t  p++;\n+\t  continue;\n+\t}\n+\n+      if (strncmp (p, ext_type, ext_type_len) != 0)\n+\tbreak;\n+\n+      /* It's non-standard supervisor extension if it prefix with sx.  */\n+      if ((ext_type[0] == 's') && (ext_type_len == 1)\n+\t  && (*(p + 1) == 'x'))\n+\tbreak;\n+\n+      char *subset = xstrdup (p);\n+      char *q = subset;\n+      const char *end_of_version;\n+\n+      while (*++q != '\\0' && *q != '_' && !ISDIGIT (*q))\n+\t;\n+\n+      end_of_version\n+\t= parsing_subset_version (q, &major_version, &minor_version,\n+\t\t\t\t  /* default_major_version= */ 2,\n+\t\t\t\t  /* default_minor_version= */ 0,\n+\t\t\t\t  /* std_ext_p= */ FALSE);\n+\n+      *q = '\\0';\n+\n+      add (subset, major_version, minor_version);\n+      free (subset);\n+      p += end_of_version - subset;\n+\n+      if (*p != '\\0' && *p != '_')\n+\t{\n+\t  error_at (m_loc, \"-march=%s: %s must separate with _\",\n+\t\t    m_arch, ext_type_str);\n+\t  return NULL;\n+\t}\n     }\n+\n+  return p;\n+}\n+\n+/* Parsing arch string to subset list, return NULL if parsing failed.  */\n+\n+riscv_subset_list *\n+riscv_subset_list::parse (const char *arch, location_t loc)\n+{\n+  riscv_subset_list *subset_list = new riscv_subset_list (arch, loc);\n+  const char *p = arch;\n+  if (strncmp (p, \"rv32\", 4) == 0)\n+    {\n+      subset_list->m_xlen = 32;\n+      p += 4;\n+    }\n+  else if (strncmp (p, \"rv64\", 4) == 0)\n+    {\n+      subset_list->m_xlen = 64;\n+      p += 4;\n+    }\n+  else\n+    {\n+      error_at (loc, \"-march=%s: ISA string must begin with rv32 or rv64\",\n+\t\tarch);\n+      goto fail;\n+    }\n+\n+  /* Parsing standard extension.  */\n+  p = subset_list->parse_std_ext (p);\n+\n+  if (p == NULL)\n+    goto fail;\n+\n+  /* Parsing non-standard extension.  */\n+  p = subset_list->parse_sv_or_non_std_ext (p, \"x\", \"non-standard extension\");\n+\n+  if (p == NULL)\n+    goto fail;\n+\n+  /* Parsing supervisor extension.  */\n+  p = subset_list->parse_sv_or_non_std_ext (p, \"s\", \"supervisor extension\");\n+\n+  if (p == NULL)\n+    goto fail;\n+\n+  /* Parsing non-standard supervisor extension.  */\n+  p = subset_list->parse_sv_or_non_std_ext\n+    (p, \"sx\", \"non-standard supervisor extension\");\n+\n+  if (p == NULL)\n+    goto fail;\n+\n+  return subset_list;\n+\n+fail:\n+  delete subset_list;\n+  return NULL;\n+}\n+\n+/* Return the current arch string.  */\n+\n+std::string\n+riscv_arch_str ()\n+{\n+  gcc_assert (current_subset_list);\n+  return current_subset_list->to_string ();\n+}\n+\n+/* Parse a RISC-V ISA string into an option mask.  Must clear or set all arch\n+   dependent mask bits, in case more than one -march string is passed.  */\n+\n+static void\n+riscv_parse_arch_string (const char *isa, int *flags, location_t loc)\n+{\n+  riscv_subset_list *subset_list;\n+  subset_list = riscv_subset_list::parse (isa, loc);\n+  if (!subset_list)\n+    return;\n+\n+  if (subset_list->xlen () == 32)\n+    *flags &= ~MASK_64BIT;\n+  else if (subset_list->xlen () == 64)\n+    *flags |= MASK_64BIT;\n+\n+  *flags &= ~MASK_RVE;\n+  if (subset_list->lookup (\"e\"))\n+    *flags |= MASK_RVE;\n+\n+  *flags &= ~MASK_MUL;\n+  if (subset_list->lookup (\"m\"))\n+    *flags |= MASK_MUL;\n+\n+  *flags &= ~MASK_ATOMIC;\n+  if (subset_list->lookup (\"a\"))\n+    *flags |= MASK_ATOMIC;\n+\n+  *flags &= ~(MASK_HARD_FLOAT | MASK_DOUBLE_FLOAT);\n+  if (subset_list->lookup (\"f\"))\n+    *flags |= MASK_HARD_FLOAT;\n+\n+  if (subset_list->lookup (\"d\"))\n+    *flags |= MASK_DOUBLE_FLOAT;\n+\n+  if (current_subset_list)\n+    delete current_subset_list;\n+\n+  current_subset_list = subset_list;\n }\n \n /* Implement TARGET_HANDLE_OPTION.  */"}, {"sha": "3eb2e800fc53683fcdb0fcbdfb7a2f45f217d96f", "filename": "gcc/config.gcc", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -4211,14 +4211,38 @@ case \"${target}\" in\n \t\t;;\n \n \triscv*-*-*)\n-\t\tsupported_defaults=\"abi arch tune\"\n+\t\tsupported_defaults=\"abi arch tune riscv_attribute\"\n \n \t\tcase \"${target}\" in\n \t\triscv-* | riscv32*) xlen=32 ;;\n \t\triscv64*) xlen=64 ;;\n \t\t*) echo \"Unsupported RISC-V target ${target}\" 1>&2; exit 1 ;;\n \t\tesac\n \n+\t\tcase \"${with_riscv_attribute}\" in\n+\t\tyes)\n+\t\t\ttm_defines=\"${tm_defines} TARGET_RISCV_ATTRIBUTE=1\"\n+\t\t\t;;\n+\t\tno)\n+\t\t\ttm_defines=\"${tm_defines} TARGET_RISCV_ATTRIBUTE=0\"\n+\t\t\t;;\n+\t\t\"\"|default)\n+\t\t\tcase \"${target}\" in\n+\t\t\triscv*-*-elf*)\n+\t\t\t\ttm_defines=\"${tm_defines} TARGET_RISCV_ATTRIBUTE=1\"\n+\t\t\t\t;;\n+\t\t\t*)\n+\t\t\t\ttm_defines=\"${tm_defines} TARGET_RISCV_ATTRIBUTE=0\"\n+\t\t\t\t;;\n+\t\t\tesac\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"--with-riscv-attribute=${with_riscv_attribute} is not supported.  The argument must begin with yes, no or default.\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\n+\n \t\t# Infer arch from --with-arch, --target, and --with-abi.\n \t\tcase \"${with_arch}\" in\n \t\trv32e* | rv32i* | rv32g* | rv64i* | rv64g*)"}, {"sha": "a718ceaf3daedbbeec6e411051a914caf7526147", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -601,6 +601,12 @@\n #endif\n \n \n+/* Define if your assembler supports .attribute. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_RISCV_ATTRIBUTE\n+#endif\n+\n+\n /* Define if your assembler supports relocs needed by -fpic. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_SMALL_PIC_RELOCS"}, {"sha": "b81eff0c04be895194c44ab60c451d6d66552bda", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -84,4 +84,7 @@ extern rtx riscv_expand_builtin (tree, rtx, rtx, machine_mode, int);\n extern tree riscv_builtin_decl (unsigned int, bool);\n extern void riscv_init_builtins (void);\n \n+/* Routines implemented in riscv-common.c.  */\n+extern std::string riscv_arch_str ();\n+\n #endif /* ! GCC_RISCV_PROTOS_H */"}, {"sha": "f8b608bb6ce8dad96bc56bc09fb7098100e14f17", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #define IN_TARGET_CODE 1\n \n+#define INCLUDE_STRING\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n@@ -4177,6 +4178,20 @@ riscv_issue_rate (void)\n   return tune_info->issue_rate;\n }\n \n+/* Auxiliary function to emit RISC-V ELF attribute. */\n+static void\n+riscv_emit_attribute ()\n+{\n+  fprintf (asm_out_file, \"\\t.attribute arch, \\\"%s\\\"\\n\",\n+\t   riscv_arch_str ().c_str ());\n+\n+  fprintf (asm_out_file, \"\\t.attribute unaligned_access, %d\\n\",\n+           TARGET_STRICT_ALIGN ? 0 : 1);\n+\n+  fprintf (asm_out_file, \"\\t.attribute stack_align, %d\\n\",\n+           riscv_stack_boundary / 8);\n+}\n+\n /* Implement TARGET_ASM_FILE_START.  */\n \n static void\n@@ -4191,6 +4206,9 @@ riscv_file_start (void)\n      relaxation in the assembler.  */\n   if (! riscv_mrelax)\n     fprintf (asm_out_file, \"\\t.option norelax\\n\");\n+\n+  if (riscv_emit_attribute_p)\n+    riscv_emit_attribute ();\n }\n \n /* Implement TARGET_ASM_OUTPUT_MI_THUNK.  Generate rtl rather than asm text\n@@ -4361,6 +4379,17 @@ riscv_option_override (void)\n \n       riscv_stack_boundary = 8 << riscv_preferred_stack_boundary_arg;\n     }\n+\n+  if (riscv_emit_attribute_p < 0)\n+#ifdef HAVE_AS_RISCV_ATTRIBUTE\n+    riscv_emit_attribute_p = TARGET_RISCV_ATTRIBUTE;\n+#else\n+    riscv_emit_attribute_p = 0;\n+\n+  if (riscv_emit_attribute_p)\n+    error (\"-mriscv-attribute RISC-V ELF attribute requires GNU as 2.32\"\n+\t   \" [-mriscv-attribute]\");\n+#endif\n }\n \n /* Implement TARGET_CONDITIONAL_REGISTER_USAGE.  */"}, {"sha": "3b25f9a1014affa9c1534686d434a56fea39bd9b", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -127,3 +127,7 @@ Mask(DOUBLE_FLOAT)\n Mask(RVC)\n \n Mask(RVE)\n+\n+mriscv-attribute\n+Target Report Var(riscv_emit_attribute_p) Init(-1)\n+Emit RISC-V ELF attribute."}, {"sha": "ba9c3dc69db2a2cda58be53c3b34ad7907775967", "filename": "gcc/configure", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -27602,6 +27602,43 @@ fi\n        && test x$with_nan != x; then\n       as_fn_error $? \"Requesting --with-nan= requires assembler support for -mnan=\" \"$LINENO\" 5\n     fi\n+    ;;\n+    riscv*-*-*)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .attribute support\" >&5\n+$as_echo_n \"checking assembler for .attribute support... \" >&6; }\n+if ${gcc_cv_as_riscv_attribute+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_riscv_attribute=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 32 \\) \\* 1000 + 0`\n+  then gcc_cv_as_riscv_attribute=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    $as_echo '.attribute stack_align,4' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_riscv_attribute=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_riscv_attribute\" >&5\n+$as_echo \"$gcc_cv_as_riscv_attribute\" >&6; }\n+if test $gcc_cv_as_riscv_attribute = yes; then\n+\n+$as_echo \"#define HAVE_AS_RISCV_ATTRIBUTE 1\" >>confdefs.h\n+\n+fi\n+\n     ;;\n     s390*-*-*)\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .gnu_attribute support\" >&5"}, {"sha": "b49670ad2d997f3c4c03647c4824badb53c58295", "filename": "gcc/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -4881,6 +4881,13 @@ pointers into PC-relative form.])\n \t[Requesting --with-nan= requires assembler support for -mnan=])\n     fi\n     ;;\n+    riscv*-*-*)\n+    gcc_GAS_CHECK_FEATURE([.attribute support],\n+      gcc_cv_as_riscv_attribute, [2,32,0],,\n+      [.attribute stack_align,4],,\n+      [AC_DEFINE(HAVE_AS_RISCV_ATTRIBUTE, 1,\n+\t  [Define if your assembler supports .attribute.])])\n+    ;;\n     s390*-*-*)\n     gcc_GAS_CHECK_FEATURE([.gnu_attribute support],\n       gcc_cv_as_s390_gnu_attribute, [2,18,0],,"}, {"sha": "8d7bee5f89b1c92fafa7ee9430e2ee7a55da878b", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -2161,6 +2161,13 @@ is used, it is enabled on Linux/x86 if target binutils\n supports @code{Intel CET} instructions and disabled otherwise.\n In this case the target libraries are configured to get additional\n @option{-fcf-protection} option.\n+\n+@item --with-riscv-attribute=@samp{yes}, @samp{no} or @samp{default}\n+Generate RISC-V attribute by default, in order to record extra build\n+information in object.\n+\n+The option is disabled by default. It is enabled on RISC-V/ELF (bare-metal)\n+target if target binutils supported.\n @end table\n \n @subheading Cross-Compiler-Specific Options"}, {"sha": "df0883f2fc9fc44b19186b09c6e55d81ba78cec0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -1057,7 +1057,8 @@ See RS/6000 and PowerPC Options.\n -mstrict-align  -mno-strict-align @gol\n -mcmodel=medlow  -mcmodel=medany @gol\n -mexplicit-relocs  -mno-explicit-relocs @gol\n--mrelax  -mno-relax}\n+-mrelax  -mno-relax @gol\n+-mriscv-attribute  -mmo-riscv-attribute}\n \n @emph{RL78 Options}\n @gccoptlist{-msim  -mmul=none  -mmul=g13  -mmul=g14  -mallregs @gol\n@@ -23825,6 +23826,10 @@ Take advantage of linker relaxations to reduce the number of instructions\n required to materialize symbol addresses. The default is to take advantage of\n linker relaxations.\n \n+@item -memit-attribute\n+@itemx -mno-emit-attribute\n+Emit (do not emit) RISC-V attribute to record extra information into ELF\n+objects.  This feature requires at least binutils 2.32.\n @end table\n \n @node RL78 Options"}, {"sha": "53da7a94ea0594380e56c0ed3fd61c8ee2b899fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -1,3 +1,21 @@\n+2019-03-01  Kito Cheng  <kito.cheng@gmail.com>\n+\t    Monk Chiang  <sh.chiang04@gmail.com>\n+\n+\t* gcc.target/riscv/attribute-1.c: New.\n+\t* gcc.target/riscv/attribute-2.c: Likewise.\n+\t* gcc.target/riscv/attribute-3.c: Likewise.\n+\t* gcc.target/riscv/attribute-4.c: Likewise.\n+\t* gcc.target/riscv/attribute-5.c: Likewise.\n+\t* gcc.target/riscv/attribute-6.c: Likewise.\n+\t* gcc.target/riscv/attribute-7.c: Likewise.\n+\t* gcc.target/riscv/attribute-8.c: Likewise.\n+\t* gcc.target/riscv/attribute-9.c: Likewise.\n+\n+\t* gcc.target/riscv/arch-1.c: New.\n+\t* gcc.target/riscv/arch-2.c: Likewise.\n+\t* gcc.target/riscv/arch-3.c: Likewise.\n+\t* gcc.target/riscv/arch-4.c: Likewise.\n+\n 2019-03-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/89497"}, {"sha": "83d5c8a54c444b9b211240006ec7192e8b623191", "filename": "gcc/testsuite/gcc.target/riscv/arch-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-1.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -march=rv32i -march=rv32I -mabi=ilp32\" } */\n+int foo()\n+{\n+}\n+/* { dg-error \".-march=rv32I: first ISA subset must be `e', `i' or `g'\" \"\" { target *-*-* } 0 } */"}, {"sha": "36b7850d7c6457a7cfb9539ad48bde9085f3e6fd", "filename": "gcc/testsuite/gcc.target/riscv/arch-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-2.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -march=rv32ixabc_xfoo -mabi=ilp32\" } */\n+int foo()\n+{\n+}"}, {"sha": "6aaa0a650fa12946f856fed52385383254c48909", "filename": "gcc/testsuite/gcc.target/riscv/arch-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-3.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -march=rv32ixbar_sabc_sxfoo -mabi=ilp32\" } */\n+int foo()\n+{\n+}"}, {"sha": "6e55a7eaef52ac0f83178d1fccf59f80b6ba32c8", "filename": "gcc/testsuite/gcc.target/riscv/arch-4.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-4.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -march=rv32i2p3_m4p2 -mabi=ilp32\" } */\n+int foo()\n+{\n+}"}, {"sha": "7150f492b070645618dc6025b2991f26cbd86316", "filename": "gcc/testsuite/gcc.target/riscv/attribute-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-1.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute arch\" } } */"}, {"sha": "3636a1a29f3ff09e9d7afac51eddf1ef563801a7", "filename": "gcc/testsuite/gcc.target/riscv/attribute-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-2.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mno-riscv-attribute\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler-not \".attribute arch\" } } */"}, {"sha": "735992df79114cb7415933366608af624bf73ed7", "filename": "gcc/testsuite/gcc.target/riscv/attribute-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-3.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -mpreferred-stack-boundary=8\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute stack_align, 256\" } } */"}, {"sha": "404faada308f64fe88b272c29777f4a995c6b7c3", "filename": "gcc/testsuite/gcc.target/riscv/attribute-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-4.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -mstrict-align\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute unaligned_access, 0\" } } */"}, {"sha": "de8909435b1603ae20c3c7b44a30a30f0e143aa4", "filename": "gcc/testsuite/gcc.target/riscv/attribute-5.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-5.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -mno-strict-align\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute unaligned_access, 1\" } } */"}, {"sha": "c75b0d62200540666779e24b09be2948a8c862e0", "filename": "gcc/testsuite/gcc.target/riscv/attribute-6.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-6.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32g2p0 -mabi=ilp32\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_m2p0_a2p0_f2p0_d2p0\\\"\" } } */"}, {"sha": "3d033931b6f9e036695ec354d4663ea9efabd092", "filename": "gcc/testsuite/gcc.target/riscv/attribute-7.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-7.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32e1p9 -mabi=ilp32e\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32e1p9\\\"\" } } */"}, {"sha": "1d1617638050fb0ee7ec852518bd5fc7c81144d9", "filename": "gcc/testsuite/gcc.target/riscv/attribute-8.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-8.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32i2p0xv5_xabc -mabi=ilp32\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_xv5p0_xabc2p0\\\"\" } } */"}, {"sha": "670944a1cbefa71f61a21cb7a588055a9ccd5369", "filename": "gcc/testsuite/gcc.target/riscv/attribute-9.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e96621085f2a0364fe87a4019d6cc9bfc52cd11/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-9.c?ref=8e96621085f2a0364fe87a4019d6cc9bfc52cd11", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32i2p0xbar_sabc_sxfoo -mabi=ilp32e\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_xbar2p0_sabc2p0_sxfoo2p0\\\"\" } } */"}]}