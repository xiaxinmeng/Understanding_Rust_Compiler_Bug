{"sha": "d4cd08dda5f66955b84700ce89bbe2a5e29426f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRjZDA4ZGRhNWY2Njk1NWI4NDcwMGNlODliYmUyYTVlMjk0MjZmMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-03-12T23:32:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-03-12T23:32:03Z"}, "message": "howto.html: Add entry for DR 253 [Ready].\n\n2004-03-12  Paolo Carlini  <pcarlini@suse.de>\n\n\t* docs/html/ext/howto.html: Add entry for DR 253 [Ready].\n\t* include/bits/gslice_array.h: Add comment about DR 253.\n\t* include/bits/indirect_array.h: Likewise.\n\t* include/bits/mask_array.h: Likewise.\n\t* include/bits/slice_array.h: Likewise.\n\nFrom-SVN: r79412", "tree": {"sha": "428580660e92eb5b7a56fe1c1cf18369dedfa1bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/428580660e92eb5b7a56fe1c1cf18369dedfa1bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4cd08dda5f66955b84700ce89bbe2a5e29426f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4cd08dda5f66955b84700ce89bbe2a5e29426f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4cd08dda5f66955b84700ce89bbe2a5e29426f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/comments", "author": null, "committer": null, "parents": [{"sha": "c973d557baa81d9f9d55f1107f94d3904ba4ba6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c973d557baa81d9f9d55f1107f94d3904ba4ba6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c973d557baa81d9f9d55f1107f94d3904ba4ba6b"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "5e93b5e6a128fdf30de283c6b9cb56c93007f2ae", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d4cd08dda5f66955b84700ce89bbe2a5e29426f2", "patch": "@@ -1,3 +1,11 @@\n+2004-03-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* docs/html/ext/howto.html: Add entry for DR 253 [Ready].\n+\t* include/bits/gslice_array.h: Add comment about DR 253.\n+\t* include/bits/indirect_array.h: Likewise.\n+\t* include/bits/mask_array.h: Likewise.\n+\t* include/bits/slice_array.h: Likewise.\n+\n 2004-03-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/20_util/allocator/14176.cc: New."}, {"sha": "f17c6173c08a6222fdc926d1ebd1ecf8f755f0f3", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=d4cd08dda5f66955b84700ce89bbe2a5e29426f2", "patch": "@@ -412,6 +412,14 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>This nested typdef was originally not specified.\n     </dd>\n \n+    <dt><a href=\"lwg-active.html#253\">253</a>:\n+        <em>valarray helper functions are almost entirely useless</em>\n+    </dt>\n+    <dd>Make the copy constructor and copy-assignment operator declarations\n+        public in gslice_array, indirect_array, mask_array, slice_array; provide\n+\tdefinitions.\n+    </dd>\n+\n     <dt><a href=\"lwg-defects.html#265\">265</a>:\n         <em>std::pair::pair() effects overly restrictive</em>\n     </dt>"}, {"sha": "7e2e6848e88395e11edce3c8bb9a989cd20a8826", "filename": "libstdc++-v3/include/bits/gslice_array.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h?ref=d4cd08dda5f66955b84700ce89bbe2a5e29426f2", "patch": "@@ -61,11 +61,12 @@ namespace std {\n     public:\n       typedef _Tp value_type;\n \n-      // this constructor needs to be implemented.\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 253. valarray helper functions are almost entirely useless\n+\n       ///  Copy constructor.  Both slices refer to the same underlying array.\n       gslice_array(const gslice_array&);\n \n-      // This operator must be public.  See DR-253.\n       ///  Assignment operator.  Assigns slice elements to corresponding\n       ///  elements of @a a.\n       gslice_array& operator=(const gslice_array&);\n@@ -134,13 +135,13 @@ namespace std {\n     inline\n     gslice_array<_Tp>::gslice_array(_Array<_Tp> __a,\n \t\t\t\t    const valarray<size_t>& __i)\n-      : _M_array(__a), _M_index(__i) {}\n+    : _M_array(__a), _M_index(__i) {}\n \n \n   template<typename _Tp>\n     inline\n     gslice_array<_Tp>::gslice_array(const gslice_array<_Tp>& __a)\n-      : _M_array(__a._M_array), _M_index(__a._M_index) {}\n+    : _M_array(__a._M_array), _M_index(__a._M_index) {}\n \n \n   template<typename _Tp>"}, {"sha": "912f522450db4f285ae23fc492089878fa198353", "filename": "libstdc++-v3/include/bits/indirect_array.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h?ref=d4cd08dda5f66955b84700ce89bbe2a5e29426f2", "patch": "@@ -63,11 +63,12 @@ namespace std\n     public:\n       typedef _Tp value_type;\n \n-      // this constructor needs to be implemented.\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 253. valarray helper functions are almost entirely useless\n+\n       ///  Copy constructor.  Both slices refer to the same underlying array.\n       indirect_array(const indirect_array&);\n \n-      // XXX: This is a proposed resolution for DR-253.\n       ///  Assignment operator.  Assigns elements to corresponding elements\n       ///  of @a a.\n       indirect_array& operator=(const indirect_array&);\n@@ -139,13 +140,13 @@ namespace std\n   template<typename _Tp>\n     inline\n     indirect_array<_Tp>::indirect_array(const indirect_array<_Tp>& __a)\n-      : _M_sz(__a._M_sz), _M_index(__a._M_index), _M_array(__a._M_array) {}\n+    : _M_sz(__a._M_sz), _M_index(__a._M_index), _M_array(__a._M_array) {}\n \n   template<typename _Tp>\n      inline\n      indirect_array<_Tp>::indirect_array(_Array<_Tp> __a, size_t __s,\n \t\t\t\t\t _Array<size_t> __i)\n-       : _M_sz(__s), _M_index(__i), _M_array(__a) {}\n+     : _M_sz(__s), _M_index(__i), _M_array(__a) {}\n \n   template<typename _Tp>\n      inline indirect_array<_Tp>&"}, {"sha": "1a694f3c61ffb1f453dac7a6c156e7d7f44a01c3", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=d4cd08dda5f66955b84700ce89bbe2a5e29426f2", "patch": "@@ -63,11 +63,12 @@ namespace std {\n     public:\n       typedef _Tp value_type;\n \n-      // this constructor needs to be implemented.\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 253. valarray helper functions are almost entirely useless\n+\n       ///  Copy constructor.  Both slices refer to the same underlying array.\n       mask_array (const mask_array&);\n       \n-      // This operator must be public.  See DR-253.\n       ///  Assignment operator.  Assigns elements to corresponding elements\n       ///  of @a a.\n       mask_array& operator=(const mask_array&);\n@@ -136,12 +137,12 @@ namespace std {\n \n   template<typename _Tp>\n     inline mask_array<_Tp>::mask_array(const mask_array<_Tp>& a)\n-      : _M_sz(a._M_sz), _M_mask(a._M_mask), _M_array(a._M_array) {}\n+    : _M_sz(a._M_sz), _M_mask(a._M_mask), _M_array(a._M_array) {}\n \n   template<typename _Tp>\n     inline\n     mask_array<_Tp>::mask_array(_Array<_Tp> __a, size_t __s, _Array<bool> __m)\n-      : _M_sz(__s), _M_mask(__m), _M_array(__a) {}\n+    : _M_sz(__s), _M_mask(__m), _M_array(__a) {}\n \n   template<typename _Tp>\n     inline mask_array<_Tp>&"}, {"sha": "31c89bcdb61d638506449a304fec3e440a8043fb", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4cd08dda5f66955b84700ce89bbe2a5e29426f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=d4cd08dda5f66955b84700ce89bbe2a5e29426f2", "patch": "@@ -123,11 +123,12 @@ namespace std\n     public:\n       typedef _Tp value_type;\n \n-      // This constructor is implemented since we need to return a value.\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 253. valarray helper functions are almost entirely useless\n+\n       ///  Copy constructor.  Both slices refer to the same underlying array.\n       slice_array(const slice_array&);\n \n-      // This operator must be public.  See DR-253.\n       ///  Assignment operator.  Assigns slice elements to corresponding\n       ///  elements of @a a.\n       slice_array& operator=(const slice_array&);\n@@ -196,13 +197,13 @@ namespace std\n   template<typename _Tp>\n     inline\n     slice_array<_Tp>::slice_array(_Array<_Tp> __a, const slice& __s)\n-      : _M_sz(__s.size()), _M_stride(__s.stride()),\n-\t_M_array(__a.begin() + __s.start()) {}\n+    : _M_sz(__s.size()), _M_stride(__s.stride()),\n+      _M_array(__a.begin() + __s.start()) {}\n \n   template<typename _Tp>\n     inline\n     slice_array<_Tp>::slice_array(const slice_array<_Tp>& a)\n-      : _M_sz(a._M_sz), _M_stride(a._M_stride), _M_array(a._M_array) {}\n+    : _M_sz(a._M_sz), _M_stride(a._M_stride), _M_array(a._M_array) {}\n \n   //    template<typename _Tp>\n   //    inline slice_array<_Tp>::~slice_array () {}"}]}