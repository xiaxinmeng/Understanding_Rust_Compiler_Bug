{"sha": "0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUzNGY2ZDg0MmYyY2Q3ZjlhZWNkYzMyYmZkYzE0ZGNmNmM4MTFlNQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-09-01T15:32:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-09-01T15:32:15Z"}, "message": "re PR tree-optimization/82052 (ICE with \"-O3 -m32\" on x86_64-linux-gnu (internal compiler error: in pop_to_marker, at tree-ssa-scopedtables.c:71))\n\n\tPR tree-optimization/82052\n\t* tree-ssa-scopedtables.c (avail_exprs_stack::lookup_avail_expr):\n\tAlways initialize the returned slot after a hash table miss\n\twhen INSERT is true.\n\n\tPR tree-optimization/82052\n\t* gcc.c-torture/compile/pr82052.c: New test.\n\nFrom-SVN: r251600", "tree": {"sha": "ce2e148bfb473de6103fdeb11d4f303933564971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce2e148bfb473de6103fdeb11d4f303933564971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5/comments", "author": null, "committer": null, "parents": [{"sha": "44acb9ba2b8ed7b588d5975773e591f477ef35c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44acb9ba2b8ed7b588d5975773e591f477ef35c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44acb9ba2b8ed7b588d5975773e591f477ef35c2"}], "stats": {"total": 420, "additions": 416, "deletions": 4}, "files": [{"sha": "f9e49e0cc942684c0e64a0c98096d422d23d9b74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5", "patch": "@@ -1,3 +1,10 @@\n+2017-09-01  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/82052\n+\t* tree-ssa-scopedtables.c (avail_exprs_stack::lookup_avail_expr):\n+\tAlways initialize the returned slot after a hash table miss\n+\twhen INSERT is true.\n+\n 2017-09-01  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* config/s390/s390.md (mem_signal_fence): Remove."}, {"sha": "9ace97b5b2520049cf3a749868da25f80a19a777", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5", "patch": "@@ -1,3 +1,8 @@\n+2017-09-01  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/82052\n+\t* gcc.c-torture/compile/pr82052.c: New test.\n+\n 2017-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/81923"}, {"sha": "44419855745d79e2dc719c80cafc17c658610efd", "filename": "gcc/testsuite/gcc.c-torture/compile/pr82052.c", "status": "added", "additions": 391, "deletions": 0, "changes": 391, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82052.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82052.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82052.c?ref=0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5", "patch": "@@ -0,0 +1,391 @@\n+typedef unsigned char uint8_t;\n+typedef unsigned short uint16_t;\n+typedef unsigned uint32_t;\n+char a, t9, t22;\n+uint32_t c[56];\n+uint32_t d, t, t1, t5, t13, t19, t31, t36, t40;\n+struct {\n+  unsigned f0 : 1;\n+  unsigned f7 : 4;\n+} l, t3;\n+uint16_t g, t17, t29 = 65531, t42 = 1;\n+short m, t6, t11, t12, t20, t27 = 1, t34 = 7, t38, t43, s;\n+uint8_t p, u, t2, t4, t14, t24, t33, t44 = 50, t90;\n+int f, h = 5, n, o = 40211, q, v = 2, w, t7, t8, t10, t15, t16, t18, t21, t25,\n+       t26, t28, t30 = 3743393910, t32, t37 = 105423096, t39, t46, t47, t48,\n+       t49, t88, t89, x, y;\n+char r;\n+char t23;\n+uint16_t t35[][7][2];\n+static uint8_t t41;\n+char z[][8][3];\n+char fn1(char p1, int p2) { return p1 < 0 ?: p1 >> p2; }\n+short fn2() {}\n+void fn3(uint8_t p1) { d = d >> 8 ^ c[(d ^ p1) & 5]; }\n+void fn4(uint32_t p1, int p2) {\n+  int e;\n+  uint8_t b = e;\n+  d = 8 ^ c[(d ^ b) & 5];\n+  fn3(e >> 8);\n+  fn3(e >> 6);\n+  fn3(e >> 24);\n+  if (p2)\n+    printf(0);\n+}\n+int fn5(p1) {\n+  if (t37)\n+    for (; t28;)\n+      ;\n+}\n+uint16_t fn6(char p1, int p2) {\n+  int k;\n+  for (; t32; t32++)\n+    for (; t32 < 8; t32++)\n+      fn4(t23, k);\n+}\n+uint8_t fn7(p1) { return 1; }\n+uint32_t fn8(uint8_t p1, uint32_t p2) {\n+  t22 = t44 | 1;\n+  t34--;\n+  l.f7 = p2;\n+  fn4(t18, t88);\n+  fn4(t17, t88);\n+  fn4(t3.f0, t88);\n+  fn4(t16, t88);\n+  fn4(t15, t88);\n+  fn4(t14, t88);\n+  fn4(t13, t88);\n+  fn4(t12, t88);\n+  fn4(t11, t88);\n+  fn4(t3.f7, t88);\n+  fn4(h, t39);\n+  fn4(t10, t88);\n+  fn4(t9, t88);\n+  fn4(t8, t88);\n+  fn4(t7, t88);\n+  fn4(t6, t88);\n+  fn4(t5, t88);\n+  return t32;\n+}\n+uint32_t fn9(p1) {\n+  h = 5;\n+  int t45;\n+  for (; o; o = 0)\n+    if (n)\n+      break;\n+  f = 0;\n+  for (; f < 10; f++) {\n+    t45 = 0;\n+    for (; t45 < 3; t45++)\n+      fn4(z[f][t32][t45], f);\n+  }\n+  return t4;\n+}\n+short fn10(char p1, uint16_t p2, char p3, char p5) {\n+  int i, k, t91;\n+  z[t24][h][t89] = i = 0;\n+  for (; i < 6; i++)\n+    fn4(t38, 1);\n+  if (p3 <= p1 != t90)\n+    fn4(t41, 3);\n+  else {\n+    t91 = 0;\n+    for (; t91 < 3; t91++) {\n+      fn4(z[t32][i][t91], t37);\n+      if (t37) {\n+        fn4(z[t39][t39][k], f);\n+        if (f)\n+          printf(\"\", t39);\n+        printf(\"\", t32);\n+      }\n+    }\n+  }\n+  for (; p; p++) {\n+    if (x)\n+      break;\n+    if (t37)\n+      break;\n+  }\n+  for (; t24; t24++)\n+    t29++;\n+  w = t29 = p5;\n+}\n+static int fn11() {\n+  char t50, t52;\n+  short t51, t56 = 49061, t65;\n+  uint32_t t53 = 3, t55 = 4272075807, t64;\n+  int t54 = 14,\n+      t57 = ~(t55 | t30 & t | ~(~t37 | (v | t43 / t53) | g >> (t56 & f))),\n+      t58 = ~(t57 ^ t53 | (t55 >> f & t37) / ~v & ~(t56 / ~g));\n+  uint16_t t59 = ~(t57 / (g | t | ~(t58 & t43) & t30 / (t55 / ~(v ^ t37))));\n+LABEL_XgXgd:\n+  if (!(t56 < t58)) {\n+    t57 = t30;\n+    t58 = t59 = g;\n+    t30 = ~(t58 & ~v & t & t56 | t53);\n+    f = ~t57 | ~t & ~(t30 ^ f) / ~(t37 ^ ~t55 & (t43 | t59 | v)) ^ g;\n+    if (t37) {\n+      printf(\"\", (long long)t30, (long long)f);\n+      g = ~(~(~g | ~v << ~t37) << ~f << t43 | t53 / (t30 | t55));\n+      f = ~(~t59 ^ ~(~(t56 & t37) ^ t) >> t43 | ~t30 / t53 >> t57);\n+    }\n+  }\n+  int t60 = ~((~t42 >> t24 | ~-~(~s & t33) & u ^ t | 4 ^ t30 & r) + t32);\n+  uint32_t t61 =\n+      ~(-(t30 ^ t33) & -(~(t60 & t | 4 | ~r & t42) + (~t32 >> s) & -t24));\n+  uint8_t t62 = ~(~(t61 & ~(s | t33 | u)) ^ t60 | -(t | -t30) & ~(t24 & r));\n+  if (s) {\n+    t61 = t;\n+  LABEL_RhRhd:\n+    t32 = ~(t33 & (t24 | r) + u + t60 | (t32 | (~s | t) & t42) + 4);\n+    t = ~(-(t32 ^ ~t60 ^ t42) & (t33 | t) + t62 + u ^ ~s + ~(~t30 - t61));\n+    u = ~(r & ~s ^ -t33 | t24) + t + t32 + t60 + (t62 & t42 ^ u);\n+    if (t61 > t24) {\n+      printf(\"\", (long long)t32);\n+      u = ~(~(~t60 | t30) | ~t) + (t42 ^ t62 & ~t32 | ~s & r + (4 & u));\n+    }\n+    while (t53 || t40) {\n+      t60 = 0;\n+      for (; t60 < 8; t60++)\n+        fn4(t23, t32);\n+    }\n+    if (t32)\n+      if (t60 || t42 > t24) {\n+        printf(\"\", u);\n+        goto LABEL_ahahd;\n+      }\n+  }\n+  t32 = t60;\n+  t = t61;\n+  u = t62;\n+  t30 = t57;\n+  int t63 = ~(~t53 >> t30 | l.f7 / ~t54 - t34 + ~t44 / (~q | t43) | ~t39);\n+  if (t29 < t40)\n+    for (;; t40++)\n+      for (; t48; t48++)\n+        t38 = 0;\n+  if (t40)\n+    t63 = q;\n+  t64 = t53;\n+  t65 = t34;\n+  q = ~l.f7 % ~(~t65 / ~t43 - t44 & t54 | t39 % (~t30 | q & (t56 | t53)));\n+LABEL_ahahd:\n+  t53 = ~(~t30 % ~t34 & ~t44 + ((t63 | t43) + (q | t65 | -l.f7) & t53));\n+  uint8_t t66 =\n+      -(-t29 & (-t42 & (u + t30 ^ t36) ^ t24 >> -t54 / t37 & (-l.f7 | ~t2)));\n+  uint16_t t67 = -(-(~t24 + t54 ^ ~t2 >> l.f7 ^ t42) | u | t29);\n+  int t68 = -t24 & t42 & ~l.f7 ^ -t66 ^ u;\n+  if (u)\n+    t54 = ~(~t37 / -t42 * t2 - t66) + ~(-(t54 / t67) % t29) & t68;\n+  t34 = ~(~(t54 - t64) % t44 % (t34 - (l.f7 & t39))) + (t53 | t43 || q) - t63;\n+  if (t30 > q) {\n+    p++;\n+    z[t44][t58][t57] = 1;\n+    t1++;\n+  }\n+  if (t2 && t44)\n+    q = t63;\n+  int t69 = ~(~t1 / v & (t40 && t54) << (q & t32)) ^ t28 / t53 & t39;\n+  if (t69 < t30) {\n+    uint8_t t70 = ~t32 + t46 + r | s ^ v & t55 << ~t40 | l.f0 & t33,\n+            t71 = ~(~t55 | (v | t33) + (~(~t32 + ~t70) ^ t46 | l.f0) + ~s);\n+    char t72 = -(t55 | r | ~s | ~t46 ^ t71 << t40 ^ t31 | v ^ t33) & -t70;\n+    if (t31 < t71) {\n+      uint8_t t73 = -((v + u & -f) % ~r + ~(~t29 | t42) | ~t54 * (t46 ^ t36)),\n+              t74 = ~(-f | t42 + t54);\n+      char t75 = ~(~(-t46 ^ r / v | ~t74 + t54 - t73) - ~t29);\n+      if (t33) {\n+        t73 = u;\n+        t33 = ~(-t73 / ~(~(~v * f / t54) / -(-(t33 | u) & t75 + t29) ^ t46));\n+        r = r * ~t75 & (t29 ^ t36) ^ t73 * -t74 % t46 - ~u + t33;\n+        printf(\"\", (long long)u);\n+        r = -(~(t73 & t36 & (t33 & t46) % ~r) / ~(t54 / ~t74 << -v));\n+        t33 = ~((t33 ^ -(t74 ^ r)) + (-t46 << t42 | ~f) + ~t29 / v) >> ~u * t73;\n+        goto LABEL_RhRhd;\n+      }\n+      l.f0 = -(-t55 | -(-t32 << s & t71) ^ r & -(t46 + t70));\n+      r = ~(~t31 | -(-(t70 | t71 + t46) ^ -s ^ (-l.f0 ^ t72 ^ t40) & t74));\n+      if (l.f0 && l.f0 > t70)\n+        printf(\"\", t74);\n+    LABEL_RhRhh:\n+      if (v > r)\n+        goto LABEL_XgXgd;\n+      if (r && t72) {\n+        printf(\"\", (long long)r);\n+        goto LABEL_XgXgd;\n+      }\n+    }\n+    t33 = t70;\n+    l.f0 = t71;\n+    r = t72;\n+    t54 = ~(~t69 | (q & t28) / ~(t32 && t1) / t39 | ~v ^ (t30 && t40));\n+    if (t54 && t44) {\n+      for (; s; s++)\n+        for (; t27; t27++)\n+          for (; t28; t28++)\n+            z[s][t27][t28] = 0;\n+      for (; t32; t32++)\n+        fn4(y, t46);\n+    }\n+    printf(\"\", t47, t32, t32);\n+    printf(\"\", (long long)t54);\n+    if (t28 && t69) {\n+      printf(\"\", (long long)t53);\n+      goto LABEL_ahahd;\n+    }\n+  }\n+  if (t32 > 4097347)\n+    for (; t69 < 2; t69++) {\n+      for (; t49; t49++)\n+        for (; t46; t46++)\n+          z[u][1][1] = 1;\n+      fn4(t35[t69][f][t69], t37);\n+      if (t37)\n+        for (; t58 < 3; t58++)\n+          z[t24][t63][t58] = 1;\n+      printf(\"\", t69, f, t69);\n+    }\n+  if (t44 <= 50 && t44)\n+    t53 = t64;\n+  while (t36 && t55 < t2)\n+    for (; t57;) {\n+      fn4(t41, v);\n+      if (v)\n+        printf(\"\", t58, t54, t57);\n+    }\n+  f = t58;\n+  if (t)\n+    g = t59;\n+  uint8_t t76 = (t33 & l.f0 % t30) + t40 ^ 4 * t53 / u + l.f7;\n+  uint16_t t77 = ~(-(-t29 % ((t30 + t76 ^ -u) * ~(g ^ t40) ^ t53)) * ~-~t33);\n+  uint32_t t78 =\n+      ~(l.f0 + t29 % (4 * (l.f7 / t53 | g) % t30 + ~t33)) - (t77 + ~u);\n+  if (t78 < t40) {\n+  LABEL__h_hl:\n+    t77 = t29;\n+    t78 = t40;\n+    u = ~(t33 >> l.f7) - (g * (t76 | u) >> t78 | ~(l.f0 << t40 ^ 4 | t30));\n+    t29 = ~(l.f0 | ~t53 % t76 * t78 % u + t29 | g) % ~-~t40 | l.f7;\n+    t40 = ~(-t78 / 4 % t30 % ~(t33 | t29 | -t77) + ~(-l.f7 % ~t40 & l.f0) * -u);\n+    if (l.f7) {\n+      printf(\"\", (long long)u);\n+      goto LABEL_RhRhh;\n+    }\n+    if (t76 > t77) {\n+      printf(\"\", (long long)t29);\n+      printf(\"\", (long long)t40);\n+      t40 = ~(-t53 % ((-t33 << t78) % l.f7)) | t40 / g * -t29 >> u;\n+      u = ~(4 % l.f7 * ~t29 | t78 / t53 + t40 & ~g * t33 % t76 - u);\n+      goto LABEL__h_hl;\n+    }\n+  }\n+  t29 = t40 = t78;\n+  short t79 = h;\n+  uint32_t t80 = ~(~(t37 % (t32 || t44)) % ~(~u & t28 || t33 - h));\n+  uint8_t t81 = t33 / t34 / t32;\n+  if (t31 > g)\n+    q = 2;\n+  uint8_t t82 =\n+      -(l.f7 + ~t24 + (~t2 ^ -t30) | ~(-(4 & t34 + t43) | ~(t36 | o | t53)));\n+  short t83 = ~(-(l.f7 + t34 & t53 | (4 + (o >> t24) | t30) | t2 | t36) + ~t82);\n+  int t84 = ~(t2 | ~(t53 < t24) ^ o) + (t83 + t30 ^ t43 & l.f7 > 4) >> ~-~t34;\n+  t30 = ~(~t82 + t30 + t2 | -o & t84 + ~(4 | -t36) & (t43 & (t34 & ~l.f7)));\n+  t40 = ~(~v << ~t40 / t27) - ~(v & t2 * p) % ~t27 % (~h - t) & ~o;\n+  t27 = ~(1 % v + t27 >> -t27 / (-t ^ -h) & -t37 ^ o);\n+  v = -(t2 + t40 ^ v) % (-t27 | ~p % h & t37 / o + ~t27 & t);\n+  if (h > 5) {\n+    printf(\"\", (long long)t40);\n+    goto LABEL_ahahd;\n+  }\n+  if (t37 > 431447816) {\n+    printf(\"\", (long long)t27);\n+    goto LABEL_XgXgd;\n+  }\n+  if (1 > t27) {\n+    printf(\"\", (long long)v);\n+    goto LABEL_RhRhd;\n+  }\n+  t30 = t84;\n+  s = h;\n+  t31 = t80;\n+  t52 = fn1(t53, 4);\n+  x = fn5(f && fn2(t46 = g = t52,\n+                   fn6(fn7(fn8(f, fn9(fn10(t51, f, t53, t53)))) < t21, t53)));\n+  t50 = a - t55;\n+  t54 = (t20 == (0 != t19)) + t50;\n+  if (t33 < t54 || t30)\n+    q = t54;\n+  for (; t24; ++t24) {\n+    int t85 = -(~(t55 | -t36) ^ t40 + o | ~g & (t43 ^ t56)),\n+        t86 = t55 ^ t36 << l.f7 ^ g & (t56 ^ t85 | ~t44 | t37);\n+    uint32_t t87 = l.f7 + ~t40 ^ t44 ^ (t56 ^ ~t55 + g ^ -t85 & t43 & o);\n+    if (t87) {\n+      t86 = t37;\n+      if (t44)\n+        goto LABEL_ahahd;\n+      if (t87) {\n+        printf(\"\", (long long)t55);\n+        continue;\n+      }\n+    }\n+    o = t37 = t86;\n+    t55 = t87;\n+  }\n+  return t26;\n+}\n+int main() {\n+  int i, j, k;\n+  {\n+    uint32_t t92;\n+    int i, j;\n+    i = 0;\n+    for (; i < 56; i++) {\n+      t92 = i;\n+      j = 8;\n+      for (; j; j--)\n+        if (t92 & 1)\n+          t92 = t92 >> 1 ^ 2;\n+        else\n+          t92 >>= 1;\n+      c[i] = t92;\n+    }\n+  }\n+  fn11();\n+  fn4(f, 0);\n+  printf(\"\", g);\n+  fn4(h, 0);\n+  printf(\"\", l.f0);\n+  fn4(n, 0);\n+  fn4(o, 0);\n+  printf(\"\", p);\n+  fn4(t, 0);\n+  printf(\"\", m);\n+  printf(\"\", s);\n+  fn4(q, 0);\n+  printf(\"\", r);\n+  printf(\"\", u);\n+  fn4(v, 0);\n+  for (; i < 4; i++) {\n+    j = 0;\n+    for (; j < 5; j++)\n+      ;\n+  }\n+  for (; i < 0; i++)\n+    for (; k < 3; k++)\n+      fn4(z[i][j][k], 0);\n+  fn4(t1, 0);\n+  i = 0;\n+  for (; i < 7; i++) {\n+    j = 0;\n+    for (; j < 8; j++)\n+      fn4(t23, 0);\n+  }\n+  printf(\"\", t24);\n+  fn4(t28, 0);\n+  printf(\"\", t29);\n+  fn4(t28, 0);\n+  printf(\"\", t29);\n+  fn4(t25, 0);\n+  fn4(t30, 0);\n+  printf(\"\", t27);\n+}"}, {"sha": "27e0c68b846f65ddca095233d9538a84fbf37039", "filename": "gcc/tree-ssa-scopedtables.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5/gcc%2Ftree-ssa-scopedtables.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5/gcc%2Ftree-ssa-scopedtables.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-scopedtables.c?ref=0e34f6d842f2cd7f9aecdc32bfdc14dcf6c811e5", "patch": "@@ -258,15 +258,24 @@ avail_exprs_stack::lookup_avail_expr (gimple *stmt, bool insert, bool tbaa_p)\n     {\n       /* If we did not find the expression in the hash table, we may still\n \t be able to produce a result for some expressions.  */\n-      tree alt = avail_exprs_stack::simplify_binary_operation (stmt, element);\n-      if (alt)\n-\treturn alt;\n+      tree retval = avail_exprs_stack::simplify_binary_operation (stmt,\n+\t\t\t\t\t\t\t\t  element);\n \n+      /* We have, in effect, allocated *SLOT for ELEMENT at this point.\n+\t We must initialize *SLOT to a real entry, even if we found a\n+\t way to prove ELEMENT was a constant after not finding ELEMENT\n+\t in the hash table.\n+\n+\t An uninitialized or empty slot is an indication no prior objects\n+\t entered into the hash table had a hash collection with ELEMENT.\n+\n+\t If we fail to do so and had such entries in the table, they\n+\t would become unreachable.  */\n       class expr_hash_elt *element2 = new expr_hash_elt (element);\n       *slot = element2;\n \n       record_expr (element2, NULL, '2');\n-      return NULL_TREE;\n+      return retval;\n     }\n \n   /* If we found a redundant memory operation do an alias walk to"}]}