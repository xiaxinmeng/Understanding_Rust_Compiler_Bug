{"sha": "a4edaf835918f2dd4a2c36659b3639438a0d1a38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRlZGFmODM1OTE4ZjJkZDRhMmMzNjY1OWIzNjM5NDM4YTBkMWEzOA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2008-05-27T11:41:10Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2008-05-27T11:41:10Z"}, "message": "defaults.h (TARGET_MEM_CONSTRAINT): New target macro added.\n\n2008-05-27  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* defaults.h (TARGET_MEM_CONSTRAINT): New target macro added.\n\t* postreload.c (reload_cse_simplify_operands): Replace 'm'\n\tconstraint with TARGET_MEM_CONSTRAINT.\n\t* recog.c (asm_operand_ok, preprocess_constraints,\n\tconstrain_operands): Likewise.\n\t* regclass.c (record_reg_classes): Likewise.\n\t* reload.c (find_reloads, alternative_allows_const_pool_ref):\n\tLikewise.\n\t* reload1.c (maybe_fix_stack_asms): Likewise.\n\t* stmt.c (parse_output_constraint, parse_input_constraint):\n\tLikewise.\n\t* recog.h: Adjust comment.\n\t* genpreds.c (generic_constraint_letters): Remove 'm' constraint.\n\t* genoutput.c (note_constraint): Don't emit error for 'm'\n\tconstraint.\n\t* doc/md.texi: Add a note to description of 'm' constraint.\n\t* doc/tm.texi: Document the new TARGET_MEM_CONSTRAINT macro.\n\nFrom-SVN: r136011", "tree": {"sha": "434ad6c0e7449499b85133dba8b2068b274857f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/434ad6c0e7449499b85133dba8b2068b274857f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4edaf835918f2dd4a2c36659b3639438a0d1a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4edaf835918f2dd4a2c36659b3639438a0d1a38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4edaf835918f2dd4a2c36659b3639438a0d1a38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4edaf835918f2dd4a2c36659b3639438a0d1a38/comments", "author": null, "committer": null, "parents": [{"sha": "79d2a7279ffca5617a15c9082369110fd491efda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d2a7279ffca5617a15c9082369110fd491efda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d2a7279ffca5617a15c9082369110fd491efda"}], "stats": {"total": 84, "additions": 64, "deletions": 20}, "files": [{"sha": "a26bec4eed4cecd3ba04b168a295fff687e748e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -1,3 +1,23 @@\n+2008-05-27  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* defaults.h (TARGET_MEM_CONSTRAINT): New target macro added.\n+\t* postreload.c (reload_cse_simplify_operands): Replace 'm'\n+\tconstraint with TARGET_MEM_CONSTRAINT.\n+\t* recog.c (asm_operand_ok, preprocess_constraints,\n+\tconstrain_operands): Likewise.\n+\t* regclass.c (record_reg_classes): Likewise.\n+\t* reload.c (find_reloads, alternative_allows_const_pool_ref):\n+\tLikewise.\n+\t* reload1.c (maybe_fix_stack_asms): Likewise.\n+\t* stmt.c (parse_output_constraint, parse_input_constraint):\n+\tLikewise.\n+\t* recog.h: Adjust comment.\n+\t* genpreds.c (generic_constraint_letters): Remove 'm' constraint.\n+\t* genoutput.c (note_constraint): Don't emit error for 'm'\n+\tconstraint.\n+\t* doc/md.texi: Add a note to description of 'm' constraint.\n+\t* doc/tm.texi: Document the new TARGET_MEM_CONSTRAINT macro.\n+\n 2008-05-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-sra.c (sra_type_can_be_decomposed_p) <RECORD_TYPE>: Make sure"}, {"sha": "3eecd8db81a67c9b47742f773b61ea59081a5ce4", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -902,6 +902,10 @@ along with GCC; see the file COPYING3.  If not see\n #define LEGITIMATE_PIC_OPERAND_P(X) 1\n #endif\n \n+#ifndef TARGET_MEM_CONSTRAINT\n+#define TARGET_MEM_CONSTRAINT 'm'\n+#endif\n+\n #ifndef REVERSIBLE_CC_MODE\n #define REVERSIBLE_CC_MODE(MODE) 0\n #endif"}, {"sha": "ee8021c7d59759c9f9da50db96f2e5d52319218b", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -1085,6 +1085,8 @@ number of constraints and modifiers.\n @item @samp{m}\n A memory operand is allowed, with any kind of address that the machine\n supports in general.\n+Note that the letter used for the general memory constraint can be\n+re-defined by a back end using the @code{TARGET_MEM_CONSTRAINT} macro.\n \n @cindex offsettable address\n @cindex @samp{o} in constraint"}, {"sha": "3e4d2b7b5bf72d6ac7469f73d175fc401e020706", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -5315,6 +5315,17 @@ into the @code{symbol_ref}, and then check for it here.  When you see a\n Format}.\n @end defmac\n \n+@defmac TARGET_MEM_CONSTRAINT\n+A single character to be used instead of the default @code{'m'}\n+character for general memory addresses.  This defines the constraint\n+letter which matches the memory addresses accepted by\n+@code{GO_IF_LEGITIMATE_ADDRESS_P}.  Define this macro if you want to\n+support new address formats in your back end without changing the\n+semantics of the @code{'m'} constraint.  This is necessary in order to\n+preserve functionality of inline assembly constructs using the\n+@code{'m'} constraint.\n+@end defmac\n+\n @defmac FIND_BASE_TERM (@var{x})\n A C expression to determine the base term of address @var{x}.\n This macro is used in only one place: `find_base_term' in alias.c."}, {"sha": "be4fb00bc7c50e0f4598117b5c4428153c831fd2", "filename": "gcc/genoutput.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -1122,7 +1122,10 @@ note_constraint (rtx exp, int lineno)\n   unsigned int namelen = strlen (name);\n   struct constraint_data **iter, **slot, *new;\n \n-  if (strchr (indep_constraints, name[0]))\n+  /* The 'm' constraint is special here since that constraint letter\n+     can be overridden by the back end by defining the\n+     TARGET_MEM_CONSTRAINT macro.  */\n+  if (strchr (indep_constraints, name[0]) && name[0] != 'm')\n     {\n       if (name[1] == '\\0')\n \tmessage_with_line (lineno, \"constraint letter '%s' cannot be \""}, {"sha": "b292784247ad9f42567afa164374fcd35ba7a175", "filename": "gcc/genpreds.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -690,8 +690,11 @@ static struct constraint_data **last_constraint_ptr = &first_constraint;\n   for (iter_ = first_constraint; iter_; iter_ = iter_->next_textual)\n \n /* These letters, and all names beginning with them, are reserved for\n-   generic constraints.  */\n-static const char generic_constraint_letters[] = \"EFVXgimnoprs\";\n+   generic constraints.\n+   The 'm' constraint is not mentioned here since that constraint\n+   letter can be overridden by the back end by defining the\n+   TARGET_MEM_CONSTRAINT macro.  */\n+static const char generic_constraint_letters[] = \"EFVXginoprs\";\n \n /* Machine-independent code expects that constraints with these\n    (initial) letters will allow only (a subset of all) CONST_INTs.  */"}, {"sha": "15a14f001c65064178c467ff9f13a94934f675b8", "filename": "gcc/postreload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -542,12 +542,12 @@ reload_cse_simplify_operands (rtx insn, rtx testreg)\n \t\tcase '*':  case '%':\n \t\tcase '0':  case '1':  case '2':  case '3':  case '4':\n \t\tcase '5':  case '6':  case '7':  case '8':  case '9':\n-\t\tcase 'm':  case '<':  case '>':  case 'V':  case 'o':\n+\t\tcase '<':  case '>':  case 'V':  case 'o':\n \t\tcase 'E':  case 'F':  case 'G':  case 'H':\n \t\tcase 's':  case 'i':  case 'n':\n \t\tcase 'I':  case 'J':  case 'K':  case 'L':\n \t\tcase 'M':  case 'N':  case 'O':  case 'P':\n-\t\tcase 'p': case 'X':\n+\t\tcase 'p':  case 'X':  case TARGET_MEM_CONSTRAINT:\n \t\t  /* These don't say anything we care about.  */\n \t\t  break;\n "}, {"sha": "a8994ea856e609510c495786f18a3ece3f733b8f", "filename": "gcc/recog.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -1543,7 +1543,7 @@ asm_operand_ok (rtx op, const char *constraint)\n \t    result = 1;\n \t  break;\n \n-\tcase 'm':\n+\tcase TARGET_MEM_CONSTRAINT:\n \tcase 'V': /* non-offsettable */\n \t  if (memory_operand (op, VOIDmode))\n \t    result = 1;\n@@ -2082,7 +2082,7 @@ preprocess_constraints (void)\n \t\t  }\n \t\t  continue;\n \n-\t\tcase 'm':\n+\t\tcase TARGET_MEM_CONSTRAINT:\n \t\t  op_alt[j].memory_ok = 1;\n \t\t  break;\n \t\tcase '<':\n@@ -2355,7 +2355,7 @@ constrain_operands (int strict)\n \t\twin = 1;\n \t\tbreak;\n \n-\t      case 'm':\n+\t      case TARGET_MEM_CONSTRAINT:\n \t\t/* Memory operands must be valid, to the extent\n \t\t   required by STRICT.  */\n \t\tif (MEM_P (op))"}, {"sha": "a7e22e6e349b0136b76a0d697492890cea7db47d", "filename": "gcc/recog.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -50,7 +50,8 @@ struct operand_alternative\n \n   /* Nonzero if '&' was found in the constraint string.  */\n   unsigned int earlyclobber:1;\n-  /* Nonzero if 'm' was found in the constraint string.  */\n+  /* Nonzero if TARGET_MEM_CONSTRAINT was found in the constraint\n+     string.  */\n   unsigned int memory_ok:1;\n   /* Nonzero if 'o' was found in the constraint string.  */\n   unsigned int offmem_ok:1;"}, {"sha": "1194c5ca75d1e49e14fdd6c50c4e0c140bd80475", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -1701,7 +1701,7 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t    [(int) base_reg_class (VOIDmode, ADDRESS, SCRATCH)];\n \t\t  break;\n \n-\t\tcase 'm':  case 'o':  case 'V':\n+\t\tcase TARGET_MEM_CONSTRAINT:  case 'o':  case 'V':\n \t\t  /* It doesn't seem worth distinguishing between offsettable\n \t\t     and non-offsettable addresses here.  */\n \t\t  allows_mem[i] = 1;"}, {"sha": "b6880ea7bc93e0f9fa67969d16aaa66c3edea8d7", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -3182,7 +3182,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\tbadop = 0;\n \t\tbreak;\n \n-\t      case 'm':\n+\t      case TARGET_MEM_CONSTRAINT:\n \t\tif (force_reload)\n \t\t  break;\n \t\tif (MEM_P (operand)\n@@ -4522,7 +4522,7 @@ alternative_allows_const_pool_ref (rtx mem, const char *constraint, int altnum)\n       while (*constraint++ != ',');\n       altnum--;\n     }\n-  /* Scan the requested alternative for 'm' or 'o'.\n+  /* Scan the requested alternative for TARGET_MEM_CONSTRAINT or 'o'.\n      If one of them is present, this alternative accepts the result of\n      passing a constant-pool reference through find_reloads_toplev.\n \n@@ -4533,7 +4533,7 @@ alternative_allows_const_pool_ref (rtx mem, const char *constraint, int altnum)\n   for (; (c = *constraint) && c != ',' && c != '#';\n        constraint += CONSTRAINT_LEN (c, constraint))\n     {\n-      if (c == 'm' || c == 'o')\n+      if (c == TARGET_MEM_CONSTRAINT || c == 'o')\n \treturn true;\n #ifdef EXTRA_CONSTRAINT_STR\n       if (EXTRA_MEMORY_CONSTRAINT (c, constraint)"}, {"sha": "51d3f4c4d19d8ac6a4b54cc163d0d9c9715c8567", "filename": "gcc/reload1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -1454,11 +1454,11 @@ maybe_fix_stack_asms (void)\n \t      switch (c)\n \t\t{\n \t\tcase '=': case '+': case '*': case '%': case '?': case '!':\n-\t\tcase '0': case '1': case '2': case '3': case '4': case 'm':\n-\t\tcase '<': case '>': case 'V': case 'o': case '&': case 'E':\n-\t\tcase 'F': case 's': case 'i': case 'n': case 'X': case 'I':\n-\t\tcase 'J': case 'K': case 'L': case 'M': case 'N': case 'O':\n-\t\tcase 'P':\n+\t\tcase '0': case '1': case '2': case '3': case '4': case '<':\n+\t\tcase '>': case 'V': case 'o': case '&': case 'E': case 'F':\n+\t\tcase 's': case 'i': case 'n': case 'X': case 'I': case 'J':\n+\t\tcase 'K': case 'L': case 'M': case 'N': case 'O': case 'P':\n+\t\tcase TARGET_MEM_CONSTRAINT:\n \t\t  break;\n \n \t\tcase 'p':"}, {"sha": "57e8ad4db7e25ca0905be03da26696e0ba89555a", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4edaf835918f2dd4a2c36659b3639438a0d1a38/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=a4edaf835918f2dd4a2c36659b3639438a0d1a38", "patch": "@@ -363,7 +363,7 @@ parse_output_constraint (const char **constraint_p, int operand_num,\n \t  }\n \tbreak;\n \n-      case 'V':  case 'm':  case 'o':\n+      case 'V':  case TARGET_MEM_CONSTRAINT:  case 'o':\n \t*allows_mem = true;\n \tbreak;\n \n@@ -462,7 +462,7 @@ parse_input_constraint (const char **constraint_p, int input_num,\n \t  }\n \tbreak;\n \n-      case 'V':  case 'm':  case 'o':\n+      case 'V':  case TARGET_MEM_CONSTRAINT:  case 'o':\n \t*allows_mem = true;\n \tbreak;\n "}]}