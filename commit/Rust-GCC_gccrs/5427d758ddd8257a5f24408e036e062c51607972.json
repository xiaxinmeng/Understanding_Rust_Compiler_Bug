{"sha": "5427d758ddd8257a5f24408e036e062c51607972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQyN2Q3NThkZGQ4MjU3YTVmMjQ0MDhlMDM2ZTA2MmM1MTYwNzk3Mg==", "commit": {"author": {"name": "Michael Tiemann", "email": "tiemann@axon.cygnus.com", "date": "1998-03-04T12:13:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-03-04T12:13:02Z"}, "message": "rtti.c (get_tinfo_fn_dynamic): If this function is called an FLAG_RTTI is unset...\n\n\t* rtti.c (get_tinfo_fn_dynamic): If this function is called an\n\tFLAG_RTTI is unset, initialize type info machinery and continue\n\twith FLAG_RTTI enabled.\n\t(get_typeid): Ditto.\n\nFrom-SVN: r18401", "tree": {"sha": "deb5a0d852a03ca7f0c85ee68e929773bc431402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deb5a0d852a03ca7f0c85ee68e929773bc431402"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5427d758ddd8257a5f24408e036e062c51607972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5427d758ddd8257a5f24408e036e062c51607972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5427d758ddd8257a5f24408e036e062c51607972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5427d758ddd8257a5f24408e036e062c51607972/comments", "author": null, "committer": null, "parents": [{"sha": "8f279ed7be97a4cafd8701062618fb06068793a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f279ed7be97a4cafd8701062618fb06068793a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f279ed7be97a4cafd8701062618fb06068793a1"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "c088b9b48b093d64bdf8ee4fe567a835e482a518", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5427d758ddd8257a5f24408e036e062c51607972/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5427d758ddd8257a5f24408e036e062c51607972/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5427d758ddd8257a5f24408e036e062c51607972", "patch": "@@ -1,3 +1,10 @@\n+Wed Mar  4 12:11:53 1998  Michael Tiemann  <tiemann@axon.cygnus.com>\n+\n+\t* rtti.c (get_tinfo_fn_dynamic): If this function is called an\n+\tFLAG_RTTI is unset, initialize type info machinery and continue\n+\twith FLAG_RTTI enabled.\n+\t(get_typeid): Ditto.\n+\n Wed Mar  4 11:47:55 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* typeck.c (unary_complex_lvalue): &D::i has type B::* if i comes"}, {"sha": "84f0395832b2db4f35782511fa992b9659aee22b", "filename": "gcc/cp/gxxint.texi", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5427d758ddd8257a5f24408e036e062c51607972/gcc%2Fcp%2Fgxxint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5427d758ddd8257a5f24408e036e062c51607972/gcc%2Fcp%2Fgxxint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxxint.texi?ref=5427d758ddd8257a5f24408e036e062c51607972", "patch": "@@ -1578,6 +1578,11 @@ we are concerned here about a lower-level interface primarily\n intended for methods written in Java, but that can also be used for C++\n (and less easily C).\n \n+Note that on systems that follow BSD tradition, a C identifier @code{var}\n+would get \"mangled\" into the assembler name @samp{_var}.  On such\n+systems, all other mangled names are also prefixed by a @samp{_}\n+which is not shown in the following examples.\n+\n @subsection Method name mangling\n \n C++ mangles a method by emitting the function name, followed by @code{__},\n@@ -1646,6 +1651,7 @@ entire mangled method name is followed by a @samp{U}.\n For example, the method @code{X\\u0319::M\\u002B(int)} is encoded as\n @samp{M_002b__U6X_0319iU}.\n \n+\n @subsection Pointer and reference types\n \n A C++ pointer type is mangled as @samp{P} followed by the\n@@ -1706,6 +1712,28 @@ as if it were the C++ type @code{JArray<T>}.\n For example @code{java.lang.String[]} is encoded as\n @samp{Pt6JArray1ZPQ34java4lang6String}.\n \n+@subsection Static fields\n+\n+Both C++ and Java classes can have static fields.\n+These are allocated statically, and are shared among all instances.\n+\n+The mangling starts with a prefix (@samp{_} in most systems), which is\n+followed by the mangling\n+of the class name, followed by the \"joiner\" and finally the field name.\n+The joiner (see @code{JOINER} in @code{cp-tree.h}) is a special\n+separator character.  For historical reasons (and idiosyncracies\n+of assembler syntax) it can @samp{$} or @samp{.} (or even\n+@samp{_} on a few systems).  If the joiner is @samp{_} then the prefix\n+is @samp{__static_} instead of just @samp{_}.\n+\n+For example @code{Foo::Bar::var} (or @code{Foo.Bar.var} in Java syntax)\n+would be encoded as @samp{_Q23Foo3Bar$var} or @samp{_Q23Foo3Bar.var}\n+(or rarely @samp{__static_Q23Foo3Bar_var}).\n+\n+If the name of a static variable needs Unicode escapes,\n+the Unicode indicator @samp{U} comes before the \"joiner\".\n+This @code{\\u1234Foo::var\\u3445} becomes @code{_U8_1234FooU.var_3445}.\n+\n @subsection Table of demangling code characters\n \n The following special characters are used in mangling:"}, {"sha": "90d42802237705ad210ecb151a818234511f20c9", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5427d758ddd8257a5f24408e036e062c51607972/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5427d758ddd8257a5f24408e036e062c51607972/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=5427d758ddd8257a5f24408e036e062c51607972", "patch": "@@ -846,6 +846,7 @@ init_lex ()\n       UNSET_RESERVED_WORD (\"classof\");\n       UNSET_RESERVED_WORD (\"headof\");\n     }\n+\n   if (! flag_handle_signatures || flag_no_gnu_keywords)\n     {\n       /* Easiest way to not recognize signature"}, {"sha": "e866e3c023a441cef5cb4ab8cf524445bf083c18", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5427d758ddd8257a5f24408e036e062c51607972/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5427d758ddd8257a5f24408e036e062c51607972/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=5427d758ddd8257a5f24408e036e062c51607972", "patch": "@@ -205,7 +205,13 @@ get_tinfo_fn_dynamic (exp)\n       tree t;\n \n       if (! flag_rtti)\n-\twarning (\"taking dynamic typeid of object without -frtti\");\n+\t{\n+\t  warning (\"taking dynamic typeid of object without -frtti\");\n+\t  push_obstacks (&permanent_obstack, &permanent_obstack);\n+\t  init_rtti_processing ();\n+\t  pop_obstacks ();\n+\t  flag_rtti = 1;\n+\t}\n \n       /* If we don't have rtti stuff, get to a sub-object that does.  */\n       if (! CLASSTYPE_VFIELDS (type))\n@@ -387,6 +393,15 @@ get_typeid (type)\n   if (type == error_mark_node)\n     return error_mark_node;\n   \n+  if (! flag_rtti)\n+    {\n+      warning (\"requesting typeid of object without -frtti\");\n+      push_obstacks (&permanent_obstack, &permanent_obstack);\n+      init_rtti_processing ();\n+      pop_obstacks ();\n+      flag_rtti = 1;\n+    }\n+\n   if (processing_template_decl)\n     return build_min_nt (TYPEID_EXPR, type);\n "}]}