{"sha": "f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhNTM3ZTM5MDVhOWEwOThmOGY0YWNhYThjZDhlNGZjMWJlMDdmZg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-01-05T10:03:01Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-01-05T10:03:01Z"}, "message": "S/390: Unroll mvc loop for memcpy with small constant lengths.\n\nSee the memset unrolling patch.  The very same applies to memcpys with\nconstant lengths.\n\n2017-01-05  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.c (s390_expand_movmem): Unroll MVC loop for\n\tsmall constant length operands.\n\ngcc/testsuite/ChangeLog:\n\n2017-01-05  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/memcpy-1.c: New test.\n\nFrom-SVN: r244098", "tree": {"sha": "e6245aa60b9f5216e1a26cbf9d907172f30404f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6245aa60b9f5216e1a26cbf9d907172f30404f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff/comments", "author": null, "committer": null, "parents": [{"sha": "8597cd335e507057e7df5dcc0c157cbd9a5bcbdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8597cd335e507057e7df5dcc0c157cbd9a5bcbdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8597cd335e507057e7df5dcc0c157cbd9a5bcbdd"}], "stats": {"total": 78, "additions": 75, "deletions": 3}, "files": [{"sha": "9bd98eb4f919d678daf57c7ddde3e9374ac86932", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff", "patch": "@@ -5246,10 +5246,25 @@ s390_expand_movmem (rtx dst, rtx src, rtx len)\n       && (GET_CODE (len) != CONST_INT || INTVAL (len) > (1<<16)))\n     return false;\n \n-  if (GET_CODE (len) == CONST_INT && INTVAL (len) >= 0 && INTVAL (len) <= 256)\n+  /* Expand memcpy for constant length operands without a loop if it\n+     is shorter that way.\n+\n+     With a constant length argument a\n+     memcpy loop (without pfd) is 36 bytes -> 6 * mvc  */\n+  if (GET_CODE (len) == CONST_INT\n+      && INTVAL (len) >= 0\n+      && INTVAL (len) <= 256 * 6\n+      && (!TARGET_MVCLE || INTVAL (len) <= 256))\n     {\n-      if (INTVAL (len) > 0)\n-        emit_insn (gen_movmem_short (dst, src, GEN_INT (INTVAL (len) - 1)));\n+      HOST_WIDE_INT o, l;\n+\n+      for (l = INTVAL (len), o = 0; l > 0; l -= 256, o += 256)\n+\t{\n+\t  rtx newdst = adjust_address (dst, BLKmode, o);\n+\t  rtx newsrc = adjust_address (src, BLKmode, o);\n+\t  emit_insn (gen_movmem_short (newdst, newsrc,\n+\t\t\t\t       GEN_INT (l > 256 ? 255 : l - 1)));\n+\t}\n     }\n \n   else if (TARGET_MVCLE)"}, {"sha": "46734e9cab4b9609c21d9c5331e7ececa9b04b93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff", "patch": "@@ -1,3 +1,7 @@\n+2017-01-05  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/memcpy-1.c: New test.\n+\n 2017-01-04  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/78812"}, {"sha": "58c1b490b6724a3af8d475f50b4ba78f0f57902e", "filename": "gcc/testsuite/gcc.target/s390/memcpy-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmemcpy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmemcpy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmemcpy-1.c?ref=f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff", "patch": "@@ -0,0 +1,53 @@\n+/* Make sure that short memcpy's with constant length are emitted\n+   without loop statements.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch\" } */\n+\n+/* 3 MVCs */\n+void\n+*memcpy1(void *dest, const void *src)\n+{\n+  return __builtin_memcpy (dest, src, 700);\n+}\n+\n+/* NOP */\n+void\n+*memcpy2(void *dest, const void *src)\n+{\n+  return __builtin_memcpy (dest, src, 0);\n+}\n+\n+/* 1 MVC */\n+void\n+*memcpy3(void *dest, const void *src)\n+{\n+  return __builtin_memcpy (dest, src, 256);\n+}\n+\n+/* 2 MVCs */\n+void\n+*memcpy4(void *dest, const void *src)\n+{\n+  return __builtin_memcpy (dest, src, 512);\n+}\n+\n+/* 3 MVCs */\n+void\n+*memcpy5(void *dest, const void *src)\n+{\n+  return __builtin_memcpy (dest, src, 768);\n+}\n+\n+/* Loop with 2 MVCs */\n+void\n+*memcpy6(void *dest, const void *src)\n+{\n+  return __builtin_memcpy (dest, src, 1537);\n+}\n+\n+/* memcpy6 uses a loop - check for the two load address instructions\n+   used to increment src and dest.  */\n+/* { dg-final { scan-assembler-times \"la\" 2 } } */\n+\n+/* { dg-final { scan-assembler-times \"mvc\" 11 } } */"}]}