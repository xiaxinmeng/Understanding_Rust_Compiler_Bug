{"sha": "b67b9225f72e4b2d58e535c78dbeff83f94c8f66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY3YjkyMjVmNzJlNGIyZDU4ZTUzNWM3OGRiZWZmODNmOTRjOGY2Ng==", "commit": {"author": {"name": "David Pagan", "email": "dave.pagan@oracle.com", "date": "2018-05-30T22:55:38Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-05-30T22:55:38Z"}, "message": "re PR c/55976 (-Werror=return-type should error on returning a value from a void function)\n\n2018-05-30  David Pagan  <dave.pagan@oracle.com>\n\n\tPR c/55976\n\t* c-decl.c (grokdeclarator): Update check for return type warnings.\n\t(start_function): Likewise.\n\t(finish_function): Likewise.\n\t* c-typeck.c (c_finish_return): Update check for return type warnings.\n\tPass OPT_Wreturn_type to pedwarn when appropriate.\n\n\tPR c/55976\n\t* c-opts.c (c_common_post_options): Set default for warn_return_type\n\tfor C++/C++ with ObjC extensions only. For C, makes it possible to\n\tdifferentiate between default (no option), -Wreturn-type, and\n\t-Wno-return-type.\n\n\tPR c/55976\n\t* gcc.dg/noncompile/pr55976-1.c: New test.\n\t* gcc.dg/noncompile/pr55976-2.c: New test.\n\nFrom-SVN: r260978", "tree": {"sha": "bd00a7c76e46ddf69b97e2eb349f2abd1e3a4325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd00a7c76e46ddf69b97e2eb349f2abd1e3a4325"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b67b9225f72e4b2d58e535c78dbeff83f94c8f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b67b9225f72e4b2d58e535c78dbeff83f94c8f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b67b9225f72e4b2d58e535c78dbeff83f94c8f66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/comments", "author": null, "committer": null, "parents": [{"sha": "e91c9fe5008f21f582142bfa8d50481f5991829e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91c9fe5008f21f582142bfa8d50481f5991829e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e91c9fe5008f21f582142bfa8d50481f5991829e"}], "stats": {"total": 73, "additions": 64, "deletions": 9}, "files": [{"sha": "d7f68046c222a09435eced577dd8e4bdf18f61ec", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b67b9225f72e4b2d58e535c78dbeff83f94c8f66", "patch": "@@ -1,3 +1,11 @@\n+2018-04-22  David Pagan  <dave.pagan@oracle.com>\n+\n+\tPR c/55976\n+\t* c-opts.c (c_common_post_options): Set default for warn_return_type\n+\tfor C++/C++ with ObjC extensions only. For C, makes it possible to \n+\tdifferentiate between default (no option), -Wreturn-type, and\n+\t-Wno-return-type.\n+\n 2018-05-29  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt (Winit-list-lifetime): New flag."}, {"sha": "ddaaef37e1d47166270e521632fbe68ad6dd4e0c", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=b67b9225f72e4b2d58e535c78dbeff83f94c8f66", "patch": "@@ -994,8 +994,9 @@ c_common_post_options (const char **pfilename)\n \tflag_extern_tls_init = 1;\n     }\n \n-  if (warn_return_type == -1)\n-    warn_return_type = c_dialect_cxx ();\n+  /* Enable by default only for C++ and C++ with ObjC extensions.  */\n+  if (warn_return_type == -1 && c_dialect_cxx ())\n+    warn_return_type = 1;\n \n   if (num_in_fnames > 1)\n     error (\"too many filenames given.  Type %s --help for usage\","}, {"sha": "1be683d2c81379547e4f5d7a06abb7de7bb602ba", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b67b9225f72e4b2d58e535c78dbeff83f94c8f66", "patch": "@@ -1,3 +1,12 @@\n+2018-05-30  David Pagan  <dave.pagan@oracle.com>\n+\n+\tPR c/55976\n+\t* c-decl.c (grokdeclarator): Update check for return type warnings.\n+\t(start_function): Likewise.\n+\t(finish_function): Likewise.\n+\t* c-typeck.c (c_finish_return): Update check for return type warnings.\n+\tPass OPT_Wreturn_type to pedwarn when appropriate.\n+\n 2018-05-18  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gimple-parser.c (c_parser_gimple_postfix_expression): Remove"}, {"sha": "54f58a56cde6db5b33e905d4e6b86e94ae9c3913", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=b67b9225f72e4b2d58e535c78dbeff83f94c8f66", "patch": "@@ -5758,7 +5758,7 @@ grokdeclarator (const struct c_declarator *declarator,\n       /* Issue a warning if this is an ISO C 99 program or if\n \t -Wreturn-type and this is a function, or if -Wimplicit;\n \t prefer the former warning since it is more explicit.  */\n-      if ((warn_implicit_int || warn_return_type || flag_isoc99)\n+      if ((warn_implicit_int || warn_return_type > 0 || flag_isoc99)\n \t  && funcdef_flag)\n \twarn_about_return_type = 1;\n       else\n@@ -8752,7 +8752,7 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n \n   if (warn_about_return_type)\n     warn_defaults_to (loc, flag_isoc99 ? OPT_Wimplicit_int\n-\t\t\t   : (warn_return_type ? OPT_Wreturn_type\n+\t\t\t   : (warn_return_type > 0 ? OPT_Wreturn_type\n \t\t\t      : OPT_Wimplicit_int),\n \t\t      \"return type defaults to %<int%>\");\n \n@@ -9463,8 +9463,9 @@ finish_function (void)\n \n   finish_fname_decls ();\n \n-  /* Complain if there's just no return statement.  */\n-  if (warn_return_type\n+  /* Complain if there's no return statement only if option specified on\n+     command line.  */\n+  if (warn_return_type > 0\n       && TREE_CODE (TREE_TYPE (TREE_TYPE (fndecl))) != VOID_TYPE\n       && !current_function_returns_value && !current_function_returns_null\n       /* Don't complain if we are no-return.  */"}, {"sha": "f346eaef031181c9078c359469968dc3b820f9eb", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=b67b9225f72e4b2d58e535c78dbeff83f94c8f66", "patch": "@@ -10133,13 +10133,13 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n   if (!retval)\n     {\n       current_function_returns_null = 1;\n-      if ((warn_return_type || flag_isoc99)\n+      if ((warn_return_type >= 0 || flag_isoc99)\n \t  && valtype != NULL_TREE && TREE_CODE (valtype) != VOID_TYPE)\n \t{\n \t  bool warned_here;\n \t  if (flag_isoc99)\n \t    warned_here = pedwarn\n-\t      (loc, 0,\n+\t      (loc, warn_return_type >= 0 ? OPT_Wreturn_type : 0,\n \t       \"%<return%> with no value, in function returning non-void\");\n \t  else\n \t    warned_here = warning_at\n@@ -10157,7 +10157,7 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n       bool warned_here;\n       if (TREE_CODE (TREE_TYPE (retval)) != VOID_TYPE)\n \twarned_here = pedwarn\n-\t  (xloc, 0,\n+\t  (xloc, warn_return_type >= 0 ? OPT_Wreturn_type : 0,\n \t   \"%<return%> with a value, in function returning void\");\n       else\n \twarned_here = pedwarn"}, {"sha": "338cbb254b3bf973d6b854f0e526f5ee5b5b6c17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b67b9225f72e4b2d58e535c78dbeff83f94c8f66", "patch": "@@ -1,3 +1,9 @@\n+2018-05-30  David Pagan  <dave.pagan@oracle.com>\n+\n+\tPR c/55976\n+\t* gcc.dg/noncompile/pr55976-1.c: New test.\n+\t* gcc.dg/noncompile/pr55976-2.c: New test.\n+\n 2018-05-30  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.dg/lto/20111213-1_0.c: Fix template."}, {"sha": "b3e63283c906c6adff81c710774578440eccb153", "filename": "gcc/testsuite/gcc.dg/noncompile/pr55976-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr55976-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr55976-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr55976-1.c?ref=b67b9225f72e4b2d58e535c78dbeff83f94c8f66", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/55976 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Werror=return-type\" } */\n+\n+/* Verify warnings for return type become errors.  */\n+\n+void t () { return 1; } /* { dg-error \"return\" \"function returning void\" } */\n+int b () { return; } /* { dg-error \"return\" \"function returning non-void\" } */\n+\n+int main()\n+{\n+  t(); b();\n+  return 0;\n+}"}, {"sha": "0e493d0e8af5b77add542f917615b506ef7808af", "filename": "gcc/testsuite/gcc.dg/noncompile/pr55976-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr55976-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b67b9225f72e4b2d58e535c78dbeff83f94c8f66/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr55976-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr55976-2.c?ref=b67b9225f72e4b2d58e535c78dbeff83f94c8f66", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/55976 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-return-type\" } */\n+\n+/* Verify that -Wno-return-type turns off warnings about function return\n+   type.  */\n+\n+void t () { return 1; } /* normally generates function returning void */\n+int b () { return; } /* normally generates function returning non-void */\n+\n+int main()\n+{\n+  t (); b ();\n+  return 0;\n+}\n+"}]}