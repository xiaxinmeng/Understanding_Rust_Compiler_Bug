{"sha": "5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVjOGVkYjU2ZWE3N2Y4NjI3YjZmYzdiOWY5NTc1MWQyN2NkOTE2Mg==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2018-08-21T14:49:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-08-21T14:49:49Z"}, "message": "[Ada] Add a new gnat tool vxlink\n\nVxLink is a helper tool used as a wrapper around g++/gcc to build\nVxWorks DKM (Downloadable Kernel Modules).\n\nSuch DKM is a partially linked object that includes entry points for\nconstructors and destructors.\n\nThis tool thus uses g++ to generate an intermediate partially linked\nobject, retrieves the list of constructors and destructors in it and\nproduces a C file that lists those ctors/dtors in a way that is\nunderstood be VxWorks kernel. It then links this file with the\nintermediate object to produce a valid DKM.\n\n2018-08-21  Jerome Lambourg  <lambourg@adacore.com>\n\ngcc/ada/\n\n\t* vxlink-bind.adb, vxlink-bind.ads, vxlink-link.adb,\n\tvxlink-link.ads, vxlink-main.adb, vxlink.adb, vxlink.ads: Add a\n\tnew tool vxlink to handle VxWorks constructors in DKMs.\n\t* gcc-interface/Makefile.in: add rules to build vxlink\n\nFrom-SVN: r263736", "tree": {"sha": "6e9cb10f5d42f631279ee16e67c2e4b38116af55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e9cb10f5d42f631279ee16e67c2e4b38116af55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "084e3bd183b1b7253f1216b5b165bde7bfbf6bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084e3bd183b1b7253f1216b5b165bde7bfbf6bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084e3bd183b1b7253f1216b5b165bde7bfbf6bf6"}], "stats": {"total": 1189, "additions": 1189, "deletions": 0}, "files": [{"sha": "8d0da5a6e356ee836f47a623c822882866bce2be", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "patch": "@@ -1,3 +1,10 @@\n+2018-08-21  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* vxlink-bind.adb, vxlink-bind.ads, vxlink-link.adb,\n+\tvxlink-link.ads, vxlink-main.adb, vxlink.adb, vxlink.ads: Add a\n+\tnew tool vxlink to handle VxWorks constructors in DKMs.\n+\t* gcc-interface/Makefile.in: add rules to build vxlink\n+\n 2018-08-21  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Analyze_Subprogram_Body_Helper, Mask_Type):"}, {"sha": "4d870c2f9ceb2d59f6dcda184f520206fea306ab", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "patch": "@@ -441,6 +441,11 @@ ifeq ($(ENABLE_VXADDR2LINE),true)\n \t  TOOLSCASE=cross top_buildir=../../.. \\\n \t  ../../vxaddr2line$(exeext)\n endif\n+ifeq ($(ENABLE_VXLINK),true)\n+\t$(MAKE) -C tools -f ../Makefile $(TOOLS_FLAGS_TO_PASS) \\\n+\t  TOOLSCASE=cross top_build=../../.. \\\n+\t  ../../vxlink$(exeext)\n+endif\n \n common-tools: ../stamp-tools\n \t$(GNATMAKE) -j0 -c -b $(ADA_INCLUDES) \\\n@@ -478,6 +483,12 @@ common-tools: ../stamp-tools\n \t$(GNATLINK) -v vxaddr2line -o $@ \\\n \t  --GCC=\"$(CC) $(ADA_INCLUDES)\" --LINK=\"$(GCC_LINK)\" ../targext.o $(CLIB)\n \n+../../vxlink$(exeext): ../stamp-tools\n+\t$(GNATMAKE) -c  $(ADA_INCLUDES) vxlink-main --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n+\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) vxlink-main\n+\t$(GNATLINK) -v vxlink-main -o $@ \\\n+\t  --GCC=\"$(CC) $(ADA_INCLUDES)\" --LINK=\"$(GCC_LINK)\"\n+\n gnatmake-re: ../stamp-tools\n \t$(GNATMAKE) -j0 $(ADA_INCLUDES) -u sdefault --GCC=\"$(CC) $(MOST_ADA_FLAGS)\"\n \t$(GNATMAKE) -j0 -c $(ADA_INCLUDES) gnatmake --GCC=\"$(CC) $(ALL_ADAFLAGS)\""}, {"sha": "9f456944506d67bfe606e6dc008d1980f2f3ce96", "filename": "gcc/ada/vxlink-bind.adb", "status": "added", "additions": 390, "deletions": 0, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink-bind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink-bind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink-bind.adb?ref=5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "patch": "@@ -0,0 +1,390 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                          V X L I N K . B I N D                           --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                     Copyright (C) 2018, AdaCore                          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Ada_2012;\n+\n+with Ada.Text_IO;       use Ada.Text_IO;\n+with Ada.IO_Exceptions;\n+with Ada.Strings.Fixed;\n+\n+with GNAT.Regpat;       use GNAT.Regpat;\n+\n+package body VxLink.Bind is\n+\n+   function Split_Lines (S : String) return Strings_List.Vector;\n+\n+   function Split (S : String; C : Character) return Strings_List.Vector;\n+\n+   function Parse_Nm_Output (S : String) return Symbol_Sets.Set;\n+\n+   procedure Emit_Module_Dtor\n+     (FP : File_Type);\n+\n+   procedure Emit_CDtor\n+     (FP  : File_Type;\n+      Var : String;\n+      Set : Symbol_Sets.Set);\n+\n+   -----------------\n+   -- Split_Lines --\n+   -----------------\n+\n+   function Split_Lines (S : String) return Strings_List.Vector\n+   is\n+      Last : Natural := S'First;\n+      Ret  : Strings_List.Vector;\n+   begin\n+      for J in S'Range loop\n+         if S (J) = ASCII.CR\n+           and then J < S'Last\n+           and then S (J + 1) = ASCII.LF\n+         then\n+            Ret.Append (S (Last .. J - 1));\n+            Last := J + 2;\n+         elsif S (J) = ASCII.LF then\n+            Ret.Append (S (Last .. J - 1));\n+            Last := J + 1;\n+         end if;\n+      end loop;\n+\n+      if Last <= S'Last then\n+         Ret.Append (S (Last .. S'Last));\n+      end if;\n+\n+      return Ret;\n+   end Split_Lines;\n+\n+   -----------\n+   -- Split --\n+   -----------\n+\n+   function Split (S : String; C : Character) return Strings_List.Vector\n+   is\n+      Last : Natural := S'First;\n+      Ret  : Strings_List.Vector;\n+   begin\n+      for J in S'Range loop\n+         if S (J) = C then\n+            if J > Last then\n+               Ret.Append (S (Last .. J - 1));\n+            end if;\n+\n+            Last := J + 1;\n+         end if;\n+      end loop;\n+\n+      if Last <= S'Last then\n+         Ret.Append (S (Last .. S'Last));\n+      end if;\n+\n+      return Ret;\n+   end Split;\n+\n+   ---------------------\n+   -- Parse_Nm_Output --\n+   ---------------------\n+\n+   function Parse_Nm_Output (S : String) return Symbol_Sets.Set\n+   is\n+      Nm_Regexp        : constant Pattern_Matcher :=\n+                           Compile (\"^[0-9A-Za-z]* ([a-zA-Z]) (.*)$\");\n+      type CDTor_Type is\n+        (CTOR_Diab,\n+         CTOR_Gcc,\n+         DTOR_Diab,\n+         DTOR_Gcc);\n+      subtype CTOR_Type is CDTor_Type range CTOR_Diab .. CTOR_Gcc;\n+      CTOR_DIAB_Regexp : aliased constant Pattern_Matcher :=\n+                           Compile (\"^__?STI__*([0-9]+)_\");\n+      CTOR_GCC_Regexp  : aliased constant Pattern_Matcher :=\n+                           Compile (\"^__?GLOBAL_.I._*([0-9]+)_\");\n+      DTOR_DIAB_Regexp : aliased constant Pattern_Matcher :=\n+                           Compile (\"^__?STD__*([0-9]+)_\");\n+      DTOR_GCC_Regexp  : aliased constant Pattern_Matcher :=\n+                           Compile (\"^__?GLOBAL_.D._*([0-9]+)_\");\n+      type Regexp_Access is access constant Pattern_Matcher;\n+      CDTor_Regexps    : constant array (CDTor_Type) of Regexp_Access :=\n+                           (CTOR_Diab => CTOR_DIAB_Regexp'Access,\n+                            CTOR_Gcc  => CTOR_GCC_Regexp'Access,\n+                            DTOR_Diab => DTOR_DIAB_Regexp'Access,\n+                            DTOR_Gcc  => DTOR_GCC_Regexp'Access);\n+      Result           : Symbol_Sets.Set;\n+\n+   begin\n+      for Line of Split_Lines (S) loop\n+         declare\n+            Sym     : Symbol;\n+            Nm_Grps : Match_Array (0 .. 2);\n+            Ctor_Grps : Match_Array (0 .. 1);\n+         begin\n+            Match (Nm_Regexp, Line, Nm_Grps);\n+\n+            if Nm_Grps (0) /= No_Match then\n+               declare\n+                  Sym_Type : constant Character :=\n+                               Line (Nm_Grps (1).First);\n+                  Sym_Name : constant String :=\n+                               Line (Nm_Grps (2).First .. Nm_Grps (2).Last);\n+               begin\n+                  Sym :=\n+                    (Name     => To_Unbounded_String (Sym_Name),\n+                     Cat      => Sym_Type,\n+                     Internal => False,\n+                     Kind     => Sym_Other,\n+                     Priority => -1);\n+\n+                  for J in CDTor_Regexps'Range loop\n+                     Match (CDTor_Regexps (J).all, Sym_Name, Ctor_Grps);\n+\n+                     if Ctor_Grps (0) /= No_Match then\n+                        if J in CTOR_Type then\n+                           Sym.Kind := Sym_Ctor;\n+                        else\n+                           Sym.Kind := Sym_Dtor;\n+                        end if;\n+\n+                        Sym.Priority := Integer'Value\n+                          (Line (Ctor_Grps (1).First .. Ctor_Grps (1).Last));\n+\n+                        exit;\n+                     end if;\n+                  end loop;\n+\n+                  Result.Include (Sym);\n+               end;\n+            end if;\n+         end;\n+      end loop;\n+\n+      return Result;\n+   end Parse_Nm_Output;\n+\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize\n+     (Binder      : out VxLink_Binder;\n+      Object_File : String)\n+   is\n+      Args                   : Arguments_List;\n+      Module_Dtor_Not_Needed : Boolean := False;\n+      Module_Dtor_Needed     : Boolean := False;\n+\n+   begin\n+      Args.Append (Nm);\n+      Args.Append (Object_File);\n+\n+      declare\n+         Output  : constant String := Run (Args);\n+         Symbols : Symbol_Sets.Set;\n+      begin\n+         if Is_Error_State then\n+            return;\n+         end if;\n+\n+         Symbols := Parse_Nm_Output (Output);\n+\n+         for Sym of Symbols loop\n+            if Sym.Kind = Sym_Ctor then\n+               Binder.Constructors.Insert (Sym);\n+            elsif Sym.Kind = Sym_Dtor then\n+               Binder.Destructors.Insert (Sym);\n+            elsif Match (\"_?__.*_atexit$\", To_String (Sym.Name)) then\n+               if Sym.Cat = 'T' then\n+                  Module_Dtor_Not_Needed := True;\n+               elsif Sym.Cat = 'U' then\n+                  Module_Dtor_Needed := True;\n+               end if;\n+            end if;\n+         end loop;\n+\n+         Binder.Module_Dtor_Needed :=\n+           not Module_Dtor_Not_Needed and then Module_Dtor_Needed;\n+      end;\n+   end Initialize;\n+\n+   --------------------\n+   -- Parse_Tag_File --\n+   --------------------\n+\n+   procedure Parse_Tag_File\n+     (Binder : in out VxLink_Binder;\n+      File   : String)\n+   is\n+      FP   : Ada.Text_IO.File_Type;\n+\n+   begin\n+      Open\n+        (FP,\n+         Mode => In_File,\n+         Name => File);\n+      loop\n+         declare\n+            Line   : constant String :=\n+                      Ada.Strings.Fixed.Trim\n+                        (Get_Line (FP), Ada.Strings.Both);\n+            Tokens : Strings_List.Vector;\n+\n+         begin\n+            if Line'Length = 0 then\n+               --  Skip empty lines\n+               null;\n+\n+            elsif Line (Line'First) = '#' then\n+               --  Skip comment\n+               null;\n+\n+            else\n+               Tokens := Split (Line, ' ');\n+               if Tokens.First_Element = \"section\" then\n+                  --  Sections are not used for tags, only when building\n+                  --  kernels. So skip for now\n+                  null;\n+               else\n+                  Binder.Tags_List.Append (Line);\n+               end if;\n+            end if;\n+         end;\n+      end loop;\n+\n+   exception\n+      when Ada.IO_Exceptions.End_Error =>\n+         Close (FP);\n+      when others =>\n+         Log_Error (\"Cannot open file \" & File &\n+                      \". DKM tags won't be generated\");\n+   end Parse_Tag_File;\n+\n+   ----------------------\n+   -- Emit_Module_Dtor --\n+   ----------------------\n+\n+   procedure Emit_Module_Dtor\n+     (FP : File_Type)\n+   is\n+      Dtor_Name : constant String := \"_GLOBAL__D_65536_0_cxa_finalize\";\n+   begin\n+      Put_Line (FP, \"extern void __cxa_finalize(void *);\");\n+      Put_Line (FP, \"static void \" & Dtor_Name & \"()\");\n+      Put_Line (FP, \"{\");\n+      Put_Line (FP, \"  __cxa_finalize(&__dso_handle);\");\n+      Put_Line (FP, \"}\");\n+      Put_Line (FP, \"\");\n+   end Emit_Module_Dtor;\n+\n+   ----------------\n+   -- Emit_CDtor --\n+   ----------------\n+\n+   procedure Emit_CDtor\n+     (FP  : File_Type;\n+      Var : String;\n+      Set : Symbol_Sets.Set)\n+   is\n+   begin\n+      for Sym of Set loop\n+         if not Sym.Internal then\n+            Put_Line (FP, \"extern void \" & To_String (Sym.Name) & \"();\");\n+         end if;\n+      end loop;\n+\n+      New_Line (FP);\n+\n+      Put_Line (FP, \"extern void (*\" & Var & \"[])();\");\n+      Put_Line (FP, \"void (*\" & Var & \"[])() =\");\n+      Put_Line (FP, \"  {\");\n+      for Sym of Set loop\n+         Put_Line (FP, \"  \" & To_String (Sym.Name) & \",\");\n+      end loop;\n+      Put_Line (FP, \"  0};\");\n+      New_Line (FP);\n+   end Emit_CDtor;\n+\n+   ---------------\n+   -- Emit_CTDT --\n+   ---------------\n+\n+   procedure Emit_CTDT\n+     (Binder    : in out VxLink_Binder;\n+      Namespace : String)\n+   is\n+      FP         : Ada.Text_IO.File_Type;\n+      CDtor_File : constant String := Namespace & \"-cdtor.c\";\n+   begin\n+      Binder.CTDT_File := To_Unbounded_String (CDtor_File);\n+      Create\n+        (File => FP,\n+         Name => CDtor_File);\n+      Put_Line (FP, \"#if defined(_HAVE_TOOL_XTORS)\");\n+      Put_Line (FP, \"#include <vxWorks.h>\");\n+      if Binder.Module_Dtor_Needed then\n+         Put_Line (FP, \"#define _WRS_NEED_CALL_CXA_FINALIZE\");\n+      end if;\n+      Put_Line (FP, \"#include TOOL_HEADER (toolXtors.h)\");\n+      Put_Line (FP, \"#else\");\n+      Put_Line (FP, \"\");\n+\n+      if Binder.Module_Dtor_Needed then\n+         Emit_Module_Dtor (FP);\n+      end if;\n+\n+      Emit_CDtor (FP, \"_ctors\", Binder.Constructors);\n+      Emit_CDtor (FP, \"_dtors\", Binder.Destructors);\n+\n+      Put_Line (FP, \"#endif\");\n+\n+      if not Binder.Tags_List.Is_Empty then\n+         New_Line (FP);\n+         Put_Line (FP, \"/* build variables */\");\n+         Put_Line (FP, \"__asm(\"\"  .section \\\"\".wrs_build_vars\\\"\",\\\"\"a\\\"\"\"\");\");\n+         for Tag of Binder.Tags_List loop\n+            Put_Line (FP, \"__asm(\"\"  .ascii \\\"\"\" & Tag & \"\\\"\"\"\");\");\n+            Put_Line (FP, \"__asm(\"\"  .byte 0\"\");\");\n+         end loop;\n+         Put_Line (FP, \"__asm(\"\"  .ascii \\\"\"end\\\"\"\"\");\");\n+         Put_Line (FP, \"__asm(\"\"  .byte 0\"\");\");\n+      end if;\n+\n+      Close (FP);\n+\n+   exception\n+      when others =>\n+         Close (FP);\n+         Set_Error_State (\"Internal error\");\n+         raise;\n+   end Emit_CTDT;\n+\n+   ---------------\n+   -- CTDT_File --\n+   ---------------\n+\n+   function CTDT_File (Binder : VxLink_Binder) return String\n+   is\n+   begin\n+      return To_String (Binder.CTDT_File);\n+   end CTDT_File;\n+\n+end VxLink.Bind;"}, {"sha": "7e6a1b09e482495ff30ee38acb400a3b202bd383", "filename": "gcc/ada/vxlink-bind.ads", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink-bind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink-bind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink-bind.ads?ref=5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "patch": "@@ -0,0 +1,87 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                          V X L I N K . B I N D                           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                     Copyright (C) 2018, AdaCore                          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Ada_2012;\n+\n+private with Ada.Containers.Ordered_Sets;\n+private with Ada.Strings.Unbounded;\n+\n+package VxLink.Bind is\n+\n+   type VxLink_Binder is private;\n+\n+   procedure Initialize\n+     (Binder      : out VxLink_Binder;\n+      Object_File : String);\n+\n+   procedure Parse_Tag_File\n+     (Binder : in out VxLink_Binder;\n+      File   : String);\n+\n+   procedure Emit_CTDT\n+     (Binder    : in out VxLink_Binder;\n+      Namespace : String);\n+\n+   function CTDT_File (Binder : VxLink_Binder) return String;\n+\n+private\n+\n+   use Ada.Strings.Unbounded;\n+\n+   type Symbol_Kind is (Sym_Ctor, Sym_Dtor, Sym_Other);\n+\n+   type Symbol is record\n+      Name     : Unbounded_String;\n+      Cat      : Character;\n+      Internal : Boolean;\n+      Kind     : Symbol_Kind;\n+      Priority : Integer;\n+   end record;\n+\n+   function \"=\" (S1, S2 : Symbol) return Boolean\n+   is (S1.Name = S2.Name and then S1.Cat = S2.Cat);\n+\n+   function \"<\" (S1, S2 : Symbol) return Boolean\n+   is (if S1.Priority /= S2.Priority\n+       then S1.Priority < S2.Priority\n+       elsif S1.Name /= S2.Name\n+       then S1.Name < S2.Name\n+       else S1.Cat < S2.Cat);\n+\n+   package Symbol_Sets is new Ada.Containers.Ordered_Sets\n+     (Symbol,\n+      \"<\" => \"<\",\n+      \"=\" => \"=\");\n+\n+   type VxLink_Binder is record\n+      CTDT_File          : Unbounded_String;\n+      Constructors       : Symbol_Sets.Set;\n+      Destructors        : Symbol_Sets.Set;\n+      Module_Dtor_Needed : Boolean;\n+      EH_Frame_Needed    : Boolean;\n+      Tags_List          : Strings_List.Vector;\n+   end record;\n+\n+end VxLink.Bind;"}, {"sha": "5211074aee84e20c0e2fa814866ee995a22f3751", "filename": "gcc/ada/vxlink-link.adb", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink-link.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink-link.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink-link.adb?ref=5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "patch": "@@ -0,0 +1,194 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                          V X L I N K . L I N K                           --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                     Copyright (C) 2018, AdaCore                          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Ada_2012;\n+\n+with Ada.Command_Line;          use Ada.Command_Line;\n+with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n+\n+package body VxLink.Link is\n+\n+   Gcc : constant String := VxLink.Gcc;\n+\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize\n+     (Linker : out VxLink_Linker)\n+   is\n+      Leading        : Boolean := True;\n+      Next_Is_Object : Boolean := False;\n+\n+   begin\n+      for J in 1 .. Ada.Command_Line.Argument_Count loop\n+         declare\n+            Arg : String renames Argument (J);\n+         begin\n+            if Next_Is_Object then\n+               Next_Is_Object     := False;\n+               Linker.Dest_Object := To_Unbounded_String (Arg);\n+               Leading            := False;\n+\n+            elsif Argument (J) = \"-o\" then\n+               Next_Is_Object := True;\n+\n+            elsif Argument (J) = \"-noauto-register\" then\n+               --  Filter out this argument, and do not generate _ctors/_dtors\n+               Linker.Add_CDtors := False;\n+            elsif Arg = \"-v\" and then not Is_Verbose then\n+               --  first -v means VxLink should be verbose, two -v passes -v to\n+               --  the linker.\n+               Set_Verbose (True);\n+            else\n+               if Arg = \"-nostdlib\" or Arg = \"-nostartfiles\" then\n+                  Linker.Add_CDtors := False;\n+               end if;\n+\n+               if Leading then\n+                  Linker.Args_Leading.Append (Arg);\n+               else\n+                  Linker.Args_Trailing.Append (Arg);\n+               end if;\n+            end if;\n+         end;\n+      end loop;\n+\n+      if Linker.Dest_Object = Null_Unbounded_String then\n+         Set_Error_State (\"no output object is defined\");\n+      elsif Linker.Add_CDtors then\n+         --  We'll need to create intermediate artefacts, so we'll use the\n+         --  destination object as base namespace just in case we have\n+         --  several link operations in the same directory\n+         declare\n+            Obj : constant String :=\n+                    Base_Name (To_String (Linker.Dest_Object));\n+\n+         begin\n+            for J in reverse Obj'Range loop\n+               if Obj (J) = '.' then\n+                  Linker.Dest_Base :=\n+                    To_Unbounded_String (Obj (Obj'First .. J - 1));\n+                  exit;\n+               end if;\n+            end loop;\n+\n+            Linker.Partial_Obj := Linker.Dest_Base & \"-partial.o\";\n+         end;\n+      end if;\n+   end Initialize;\n+\n+   -----------------\n+   -- Needs_CDtor --\n+   -----------------\n+\n+   function Needs_CDtor (Linker : VxLink_Linker) return Boolean is\n+   begin\n+      return Linker.Add_CDtors;\n+   end Needs_CDtor;\n+\n+   --------------------\n+   -- Partial_Object --\n+   --------------------\n+\n+   function Partial_Object (Linker : VxLink_Linker) return String is\n+   begin\n+      return To_String (Linker.Partial_Obj);\n+   end Partial_Object;\n+\n+   ---------------\n+   -- Namespace --\n+   ---------------\n+\n+   function Namespace (Linker : VxLink_Linker) return String is\n+   begin\n+      return To_String (Linker.Dest_Base);\n+   end Namespace;\n+\n+   ---------------------\n+   -- Do_Initial_Link --\n+   ---------------------\n+\n+   procedure Do_Initial_Link (Linker : VxLink_Linker)\n+   is\n+      Args : Arguments_List;\n+      Gxx_Path : constant String := Gxx;\n+   begin\n+      if Is_Error_State then\n+         return;\n+      end if;\n+\n+      if Gxx_Path'Length /= 0 then\n+         Args.Append (Gxx);\n+      else\n+         Args.Append (Gcc);\n+      end if;\n+      Args.Append (Linker.Args_Leading);\n+      Args.Append (\"-o\");\n+\n+      if Linker.Add_CDtors then\n+         Args.Append (To_String (Linker.Partial_Obj));\n+      else\n+         Args.Append (To_String (Linker.Dest_Object));\n+      end if;\n+\n+      Args.Append (Linker.Args_Trailing);\n+\n+      if not Linker.Add_CDtors then\n+         Args.Append (\"-nostartfiles\");\n+      end if;\n+\n+      Run (Args);\n+   end Do_Initial_Link;\n+\n+   -------------------\n+   -- Do_Final_Link --\n+   -------------------\n+\n+   procedure Do_Final_Link\n+     (Linker   : VxLink_Linker;\n+      Ctdt_Obj : String)\n+   is\n+      Args : Arguments_List;\n+   begin\n+      if not Linker.Add_CDtors then\n+         return;\n+      end if;\n+\n+      if Is_Error_State then\n+         return;\n+      end if;\n+\n+      Args.Append (Gcc);\n+      Args.Append (\"-nostdlib\");\n+      Args.Append (Ctdt_Obj);\n+      Args.Append (To_String (Linker.Partial_Obj));\n+      Args.Append (\"-o\");\n+      Args.Append (To_String (Linker.Dest_Object));\n+\n+      Run (Args);\n+   end Do_Final_Link;\n+\n+end VxLink.Link;"}, {"sha": "4c46f4872707714b924c18ffe5cc387c1ff4faa8", "filename": "gcc/ada/vxlink-link.ads", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink-link.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink-link.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink-link.ads?ref=5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "patch": "@@ -0,0 +1,63 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                          V X L I N K . L I N K                           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                     Copyright (C) 2018, AdaCore                          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Ada_2012;\n+\n+private with Ada.Strings.Unbounded;\n+\n+package VxLink.Link is\n+\n+   type VxLink_Linker is private;\n+\n+   procedure Initialize\n+     (Linker : out VxLink_Linker);\n+\n+   function Needs_CDtor (Linker : VxLink_Linker) return Boolean;\n+\n+   function Partial_Object (Linker : VxLink_Linker) return String;\n+\n+   function Namespace (Linker : VxLink_Linker) return String;\n+\n+   procedure Do_Initial_Link\n+     (Linker : VxLink_Linker);\n+\n+   procedure Do_Final_Link\n+     (Linker   : VxLink_Linker;\n+      Ctdt_Obj : String);\n+\n+private\n+\n+   use Ada.Strings.Unbounded;\n+\n+   type VxLink_Linker is record\n+      Args_Leading  : Arguments_List;\n+      Args_Trailing : Arguments_List;\n+      Add_CDtors    : Boolean := True;\n+      Dest_Object   : Unbounded_String;\n+      Dest_Base     : Unbounded_String;\n+      Partial_Obj   : Unbounded_String;\n+   end record;\n+\n+end VxLink.Link;"}, {"sha": "04a22c3ef0c95172cf7f5bfa0933fe1939bfe19f", "filename": "gcc/ada/vxlink-main.adb", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink-main.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink-main.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink-main.adb?ref=5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "patch": "@@ -0,0 +1,81 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                          V X L I N K . M A I N                           --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                     Copyright (C) 2018, AdaCore                          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  VxLink is a helper tool used as a wrapper around g++/gcc to build VxWorks\n+--  DKM (Downloadable Kernel Modules).\n+--  Such DKM is a partially linked object that contains entry points for\n+--  constructors and destructors. This tool thus uses g++ to generate an\n+--  intermediate partially linked object, retrieves the list of constructors\n+--  and destructors in it and produces a C file that lists those ctors/dtors\n+--  in a way that is understood be VxWorks kernel. It then links this file\n+--  with the intermediate object to produce a valid DKM.\n+\n+pragma Ada_2012;\n+\n+with GNAT.OS_Lib; use GNAT.OS_Lib;\n+\n+with VxLink.Link; use VxLink.Link;\n+with VxLink.Bind; use VxLink.Bind;\n+\n+procedure VxLink.Main is\n+   Linker  : VxLink_Linker;\n+   Binder  : VxLink_Binder;\n+   VSB_Dir : String_Access := Getenv (\"VSB_DIR\");\n+begin\n+   Initialize (Linker);\n+\n+   if Is_Error_State then\n+      return;\n+   end if;\n+\n+   Do_Initial_Link (Linker);\n+\n+   if Is_Error_State then\n+      return;\n+   end if;\n+\n+   if not Needs_CDtor (Linker) then\n+      --  Initial link is enough, let's return\n+      return;\n+   end if;\n+\n+   if VSB_Dir /= null and then VSB_Dir'Length > 0 then\n+      declare\n+         DKM_Tag_File : constant String :=\n+                          Normalize_Pathname\n+                            (\"krnl/tags/dkm.tags\", VSB_Dir.all);\n+      begin\n+         if Is_Regular_File (DKM_Tag_File) then\n+            Parse_Tag_File (Binder, DKM_Tag_File);\n+         end if;\n+      end;\n+   end if;\n+\n+   Initialize (Binder, Object_File => Partial_Object (Linker));\n+   Emit_CTDT (Binder, Namespace => Namespace (Linker));\n+\n+   Do_Final_Link (Linker, CTDT_File (Binder));\n+   Free (VSB_Dir);\n+end VxLink.Main;"}, {"sha": "400ad225b8e83f2fe9542066244d16c42554511c", "filename": "gcc/ada/vxlink.adb", "status": "added", "additions": 288, "deletions": 0, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink.adb?ref=5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "patch": "@@ -0,0 +1,288 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                               V X L I N K                                --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                     Copyright (C) 2018, AdaCore                          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Ada_2012;\n+\n+with Ada.Command_Line;\n+with Ada.Strings.Unbounded;     use Ada.Strings.Unbounded;\n+with Ada.Text_IO;\n+\n+with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n+with GNAT.Expect;               use GNAT.Expect;\n+with GNAT.OS_Lib;               use GNAT.OS_Lib;\n+\n+package body VxLink is\n+\n+   Target_Triplet : Unbounded_String := Null_Unbounded_String;\n+   Verbose        : Boolean := False;\n+   Error_State    : Boolean := False;\n+\n+   function Triplet return String;\n+\n+   function Which (Exe : String) return String;\n+\n+   -------------\n+   -- Triplet --\n+   -------------\n+\n+   function Triplet return String is\n+   begin\n+      if Target_Triplet = Null_Unbounded_String then\n+         declare\n+            Exe : constant String := File_Name (Ada.Command_Line.Command_Name);\n+         begin\n+            for J in reverse Exe'Range loop\n+               if Exe (J) = '-' then\n+                  Target_Triplet := To_Unbounded_String (Exe (Exe'First .. J));\n+                  exit;\n+               end if;\n+            end loop;\n+         end;\n+      end if;\n+\n+      return To_String (Target_Triplet);\n+   end Triplet;\n+\n+   -----------\n+   -- Which --\n+   -----------\n+\n+   function Which (Exe : String) return String\n+   is\n+      Suffix   : GNAT.OS_Lib.String_Access := Get_Executable_Suffix;\n+      Basename : constant String := Exe & Suffix.all;\n+      Path     : GNAT.OS_Lib.String_Access := Getenv (\"PATH\");\n+      Last     : Natural := Path'First;\n+\n+   begin\n+      Free (Suffix);\n+\n+      for J in Path'Range loop\n+         if Path (J) = Path_Separator then\n+            declare\n+               Full : constant String := Normalize_Pathname\n+                 (Name           => Basename,\n+                  Directory      => Path (Last .. J - 1),\n+                  Resolve_Links  => False,\n+                  Case_Sensitive => True);\n+            begin\n+               if Is_Executable_File (Full) then\n+                  Free (Path);\n+\n+                  return Full;\n+               end if;\n+            end;\n+\n+            Last := J + 1;\n+         end if;\n+      end loop;\n+\n+      Free (Path);\n+\n+      return \"\";\n+   end Which;\n+\n+   -----------------\n+   -- Set_Verbose --\n+   -----------------\n+\n+   procedure Set_Verbose (Value : Boolean)\n+   is\n+   begin\n+      Verbose := Value;\n+   end Set_Verbose;\n+\n+   ----------------\n+   -- Is_Verbose --\n+   ----------------\n+\n+   function Is_Verbose return Boolean\n+   is\n+   begin\n+      return Verbose;\n+   end Is_Verbose;\n+\n+   ---------------------\n+   -- Set_Error_State --\n+   ---------------------\n+\n+   procedure Set_Error_State (Message : String)\n+   is\n+   begin\n+      Log_Error (\"Error: \" & Message);\n+      Error_State := True;\n+      Ada.Command_Line.Set_Exit_Status (1);\n+   end Set_Error_State;\n+\n+   --------------------\n+   -- Is_Error_State --\n+   --------------------\n+\n+   function Is_Error_State return Boolean\n+   is\n+   begin\n+      return Error_State;\n+   end Is_Error_State;\n+\n+   --------------\n+   -- Log_Info --\n+   --------------\n+\n+   procedure Log_Info (S : String)\n+   is\n+   begin\n+      if Verbose then\n+         Ada.Text_IO.Put_Line (S);\n+      end if;\n+   end Log_Info;\n+\n+   ---------------\n+   -- Log_Error --\n+   ---------------\n+\n+   procedure Log_Error (S : String)\n+   is\n+   begin\n+      Ada.Text_IO.Put_Line (Ada.Text_IO.Standard_Error, S);\n+   end Log_Error;\n+\n+   ---------\n+   -- Run --\n+   ---------\n+\n+   procedure Run (Arguments : Arguments_List)\n+   is\n+      Output : constant String := Run (Arguments);\n+   begin\n+      if not Is_Error_State then\n+         --  In case of erroneous execution, the function version of run will\n+         --  have already displayed the output\n+         Ada.Text_IO.Put (Output);\n+      end if;\n+   end Run;\n+\n+   ---------\n+   -- Run --\n+   ---------\n+\n+   function Run (Arguments : Arguments_List) return String\n+   is\n+      Args       : GNAT.OS_Lib.Argument_List_Access :=\n+                     new GNAT.OS_Lib.Argument_List\n+                       (1 .. Natural (Arguments.Length) - 1);\n+      Base       : constant String := Base_Name (Arguments.First_Element);\n+      Status     : aliased Integer := 0;\n+      Debug_Line : Unbounded_String;\n+      Add_Quotes : Boolean;\n+\n+   begin\n+      if Verbose then\n+         Append (Debug_Line, Base);\n+      end if;\n+\n+      for J in Arguments.First_Index + 1 .. Arguments.Last_Index loop\n+         declare\n+            Arg : String renames Arguments.Element (J);\n+         begin\n+            Args (J - 1) := new String'(Arg);\n+\n+            if Verbose then\n+               Add_Quotes := False;\n+\n+               for K in Arg'Range loop\n+                  if Arg (K) = ' ' then\n+                     Add_Quotes := True;\n+                     exit;\n+                  end if;\n+               end loop;\n+\n+               Append (Debug_Line, ' ');\n+\n+               if Add_Quotes then\n+                  Append (Debug_Line, '\"' & Arg & '\"');\n+               else\n+                  Append (Debug_Line, Arg);\n+               end if;\n+            end if;\n+         end;\n+      end loop;\n+\n+      if Verbose then\n+         Ada.Text_IO.Put_Line (To_String (Debug_Line));\n+      end if;\n+\n+      declare\n+         Ret : constant String :=\n+                 Get_Command_Output\n+                   (Command    => Arguments.First_Element,\n+                    Arguments  => Args.all,\n+                    Input      => \"\",\n+                    Status     => Status'Access,\n+                    Err_To_Out => True);\n+      begin\n+         GNAT.OS_Lib.Free (Args);\n+\n+         if Status /= 0 then\n+            Ada.Text_IO.Put_Line (Ret);\n+            Set_Error_State\n+              (Base_Name (Arguments.First_Element) &\n+                 \" returned\" & Status'Image);\n+         end if;\n+\n+         return Ret;\n+      end;\n+   end Run;\n+\n+   ---------\n+   -- Gcc --\n+   ---------\n+\n+   function Gcc return String\n+   is\n+   begin\n+      return Which (Triplet & \"gcc\");\n+   end Gcc;\n+\n+   ---------\n+   -- Gxx --\n+   ---------\n+\n+   function Gxx return String\n+   is\n+   begin\n+      return Which (Triplet & \"g++\");\n+   end Gxx;\n+\n+   --------\n+   -- Nm --\n+   --------\n+\n+   function Nm return String\n+   is\n+   begin\n+      return Which (Triplet & \"nm\");\n+   end Nm;\n+\n+end VxLink;"}, {"sha": "37ae5d7023a212f0da18f7a3fe5d5684796b2de9", "filename": "gcc/ada/vxlink.ads", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162/gcc%2Fada%2Fvxlink.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink.ads?ref=5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "patch": "@@ -0,0 +1,68 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                               V X L I N K                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                     Copyright (C) 2018, AdaCore                          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  See vxlink-main.adb for a description of the tool.\n+--\n+--  This package contains only common utility functions used by the other\n+--  child packages.\n+\n+pragma Ada_2012;\n+\n+with Ada.Containers.Indefinite_Vectors;\n+\n+package VxLink is\n+\n+   package Strings_List is new Ada.Containers.Indefinite_Vectors\n+     (Positive, String);\n+\n+   subtype Arguments_List is Strings_List.Vector;\n+\n+   procedure Set_Verbose (Value : Boolean);\n+   function Is_Verbose return Boolean;\n+\n+   procedure Set_Error_State (Message : String);\n+   function Is_Error_State return Boolean;\n+\n+   procedure Log_Info (S : String);\n+   procedure Log_Error (S : String);\n+\n+   procedure Run (Arguments : Arguments_List);\n+\n+   function Run (Arguments : Arguments_List) return String;\n+\n+   function Gcc return String;\n+   --  Current toolchain's gcc command\n+\n+   function Gxx return String;\n+   --  Current toolchain's g++ command\n+\n+   function Nm return String;\n+   --  Current toolchain's nm command\n+\n+   function Ends_With (Str, Suffix : String) return Boolean\n+   is (Str'Length >= Suffix'Length\n+       and then Str (Str'Last - Suffix'Length + 1 .. Str'Last) = Suffix);\n+\n+end VxLink;"}]}