{"sha": "0178d64465a03fdfa6e37f6f0750ad7d55e446f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3OGQ2NDQ2NWEwM2ZkZmE2ZTM3ZjZmMDc1MGFkN2Q1NWU0NDZmMQ==", "commit": {"author": {"name": "Vinodha Ramasamy", "email": "vinodha@google.com", "date": "2008-06-10T20:21:24Z"}, "committer": {"name": "Doug Kwan", "email": "dougkwan@gcc.gnu.org", "date": "2008-06-10T20:21:24Z"}, "message": "value_prob.c (tree_divmod_fixed_value_transform): Use gcov_type.\n\n2008-06-10  Vinodha Ramasamy  <vinodha@google.com>\n        * value_prob.c (tree_divmod_fixed_value_transform): Use gcov_type.\n\tAvoid division by 0.\n\t(tree_mod_pow2_value_transform): Likewise.\n\t(tree_ic_transform): Likewise.\n\t(tree_stringops_transform): Likewise.\n\t(tree_mod_subtract_transform): Likewise.\n\t* tree-inline-c (copy_bb): Corrected int type to gcov_type.\n\t(copy_edges_for_bb): Likewise.\n\t(initialize_cfun): Likewise.\n\nFrom-SVN: r136639", "tree": {"sha": "88d8b55c16f6064fef54091f016757be543e80c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88d8b55c16f6064fef54091f016757be543e80c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0178d64465a03fdfa6e37f6f0750ad7d55e446f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0178d64465a03fdfa6e37f6f0750ad7d55e446f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0178d64465a03fdfa6e37f6f0750ad7d55e446f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0178d64465a03fdfa6e37f6f0750ad7d55e446f1/comments", "author": null, "committer": null, "parents": [{"sha": "88b9490b3361c8e7a901134936cd5013abc85158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b9490b3361c8e7a901134936cd5013abc85158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b9490b3361c8e7a901134936cd5013abc85158"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "cf40b3751f94b8d184530a1dbb40cb16163a0c2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0178d64465a03fdfa6e37f6f0750ad7d55e446f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0178d64465a03fdfa6e37f6f0750ad7d55e446f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0178d64465a03fdfa6e37f6f0750ad7d55e446f1", "patch": "@@ -1,3 +1,14 @@\n+2008-06-10  Vinodha Ramasamy  <vinodha@google.com>\n+        * value_prob.c (tree_divmod_fixed_value_transform): Use gcov_type.\n+\tAvoid division by 0.\n+\t(tree_mod_pow2_value_transform): Likewise.\n+\t(tree_ic_transform): Likewise.\n+\t(tree_stringops_transform): Likewise.\n+\t(tree_mod_subtract_transform): Likewise.\n+\t* tree-inline-c (copy_bb): Corrected int type to gcov_type.\n+\t(copy_edges_for_bb): Likewise.\n+\t(initialize_cfun): Likewise.\n+\n 2008-06-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*btdi_rex64): Change operand 1 predicate to"}, {"sha": "cb97db1326baf32bc9710ee3e3f10a5ba93a21e3", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0178d64465a03fdfa6e37f6f0750ad7d55e446f1/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0178d64465a03fdfa6e37f6f0750ad7d55e446f1/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=0178d64465a03fdfa6e37f6f0750ad7d55e446f1", "patch": "@@ -795,7 +795,8 @@ copy_body_r (tree *tp, int *walk_subtrees, void *data)\n    later  */\n \n static basic_block\n-copy_bb (copy_body_data *id, basic_block bb, int frequency_scale, int count_scale)\n+copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n+         gcov_type count_scale)\n {\n   block_stmt_iterator bsi, copy_bsi;\n   basic_block copy_basic_block;\n@@ -1108,7 +1109,7 @@ update_ssa_across_abnormal_edges (basic_block bb, basic_block ret_bb,\n    accordingly.  Edges will be taken care of later.  Assume aux\n    pointers to point to the copies of each BB.  */\n static void\n-copy_edges_for_bb (basic_block bb, int count_scale, basic_block ret_bb)\n+copy_edges_for_bb (basic_block bb, gcov_type count_scale, basic_block ret_bb)\n {\n   basic_block new_bb = (basic_block) bb->aux;\n   edge_iterator ei;\n@@ -1257,7 +1258,7 @@ initialize_cfun (tree new_fndecl, tree callee_fndecl, gcov_type count,\n   struct function *new_cfun\n      = (struct function *) ggc_alloc_cleared (sizeof (struct function));\n   struct function *src_cfun = DECL_STRUCT_FUNCTION (callee_fndecl);\n-  int count_scale, frequency_scale;\n+  gcov_type count_scale, frequency_scale;\n \n   if (ENTRY_BLOCK_PTR_FOR_FUNCTION (src_cfun)->count)\n     count_scale = (REG_BR_PROB_BASE * count\n@@ -1321,7 +1322,7 @@ copy_cfg_body (copy_body_data * id, gcov_type count, int frequency,\n   struct function *cfun_to_copy;\n   basic_block bb;\n   tree new_fndecl = NULL;\n-  int count_scale, frequency_scale;\n+  gcov_type count_scale, frequency_scale;\n   int last;\n \n   if (ENTRY_BLOCK_PTR_FOR_FUNCTION (src_cfun)->count)"}, {"sha": "38ed8b25fdf476145faec4d5539fd0fa675986d6", "filename": "gcc/value-prof.c", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0178d64465a03fdfa6e37f6f0750ad7d55e446f1/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0178d64465a03fdfa6e37f6f0750ad7d55e446f1/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=0178d64465a03fdfa6e37f6f0750ad7d55e446f1", "patch": "@@ -610,7 +610,7 @@ tree_divmod_fixed_value_transform (tree stmt)\n   enum tree_code code;\n   gcov_type val, count, all;\n   tree modify, op, op1, op2, result, value, tree_val;\n-  int prob;\n+  gcov_type prob;\n \n   modify = stmt;\n   if (TREE_CODE (stmt) == RETURN_EXPR\n@@ -651,7 +651,10 @@ tree_divmod_fixed_value_transform (tree stmt)\n     return false;\n \n   /* Compute probability of taking the optimal path.  */\n-  prob = (count * REG_BR_PROB_BASE + all / 2) / all;\n+  if (all > 0)\n+    prob = (count * REG_BR_PROB_BASE + all / 2) / all;\n+  else\n+    prob = 0;\n \n   tree_val = build_int_cst_wide (get_gcov_type (),\n \t\t\t\t (unsigned HOST_WIDE_INT) val,\n@@ -770,7 +773,7 @@ tree_mod_pow2_value_transform (tree stmt)\n   enum tree_code code;\n   gcov_type count, wrong_values, all;\n   tree modify, op, op1, op2, result, value;\n-  int prob;\n+  gcov_type prob;\n \n   modify = stmt;\n   if (TREE_CODE (stmt) == RETURN_EXPR\n@@ -817,7 +820,10 @@ tree_mod_pow2_value_transform (tree stmt)\n   if (check_counter (stmt, \"pow2\", all, bb_for_stmt (stmt)->count))\n     return false;\n \n-  prob = (count * REG_BR_PROB_BASE + all / 2) / all;\n+  if (all > 0)\n+    prob = (count * REG_BR_PROB_BASE + all / 2) / all;\n+  else\n+    prob = 0;\n \n   result = tree_mod_pow2 (stmt, op, op1, op2, prob, count, all);\n \n@@ -949,7 +955,7 @@ tree_mod_subtract_transform (tree stmt)\n   enum tree_code code;\n   gcov_type count, wrong_values, all;\n   tree modify, op, op1, op2, result, value;\n-  int prob1, prob2;\n+  gcov_type prob1, prob2;\n   unsigned int i, steps;\n   gcov_type count1, count2;\n \n@@ -1016,8 +1022,15 @@ tree_mod_subtract_transform (tree stmt)\n     }\n \n   /* Compute probability of taking the optimal path(s).  */\n-  prob1 = (count1 * REG_BR_PROB_BASE + all / 2) / all;\n-  prob2 = (count2 * REG_BR_PROB_BASE + all / 2) / all;\n+  if (all > 0)\n+    {\n+      prob1 = (count1 * REG_BR_PROB_BASE + all / 2) / all;\n+      prob2 = (count2 * REG_BR_PROB_BASE + all / 2) / all;\n+    }\n+  else\n+    {\n+      prob1 = prob2 = 0;\n+    }\n \n   /* In practice, \"steps\" is always 2.  This interface reflects this,\n      and will need to be changed if \"steps\" can change.  */\n@@ -1174,7 +1187,7 @@ tree_ic_transform (tree stmt)\n {\n   histogram_value histogram;\n   gcov_type val, count, all;\n-  int prob;\n+  gcov_type prob;\n   tree call, callee, modify;\n   struct cgraph_node *direct_call;\n   \n@@ -1200,7 +1213,10 @@ tree_ic_transform (tree stmt)\n   if (4 * count <= 3 * all)\n     return false;\n \n-  prob = (count * REG_BR_PROB_BASE + all / 2) / all;\n+  if (all > 0)\n+    prob = (count * REG_BR_PROB_BASE + all / 2) / all;\n+  else\n+    prob = 0;\n   direct_call = find_func_by_pid ((int)val);\n \n   if (direct_call == NULL)\n@@ -1365,7 +1381,7 @@ tree_stringops_transform (block_stmt_iterator *bsi)\n   tree value;\n   tree dest, src;\n   unsigned int dest_align, src_align;\n-  int prob;\n+  gcov_type prob;\n   tree tree_val;\n \n   if (!call)\n@@ -1399,7 +1415,10 @@ tree_stringops_transform (block_stmt_iterator *bsi)\n     return false;\n   if (check_counter (stmt, \"value\", all, bb_for_stmt (stmt)->count))\n     return false;\n-  prob = (count * REG_BR_PROB_BASE + all / 2) / all;\n+  if (all > 0)\n+    prob = (count * REG_BR_PROB_BASE + all / 2) / all;\n+  else\n+    prob = 0;\n   dest = CALL_EXPR_ARG (call, 0);\n   dest_align = get_pointer_alignment (dest, BIGGEST_ALIGNMENT);\n   switch (fcode)\n@@ -1727,4 +1746,3 @@ value_profile_transformations (void)\n   return (value_prof_hooks->value_profile_transformations) ();\n }\n \f\n-"}]}