{"sha": "2cc41601d9a948e8d612a21c3b9a44ce0b977747", "node_id": "C_kwDOANBUbNoAKDJjYzQxNjAxZDlhOTQ4ZThkNjEyYTIxYzNiOWE0NGNlMGI5Nzc3NDc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-21T16:04:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-21T16:04:54Z"}, "message": "c++: Don't shortcut TREE_CONSTANT vector type CONSTRUCTORs in cxx_eval_constant_expression [PR107295]\n\nThe excess precision support broke building skia (dependency of firefox)\non ia32 (it has something like the a constexpr variable), but as the other\ncases show, it is actually a preexisting problem if one uses casts from\nconstants with wider floating point types.\nThe problem is that cxx_eval_constant_expression tries to short-cut\nprocessing of TREE_CONSTANT CONSTRUCTORs if they satisfy\nreduced_constant_expression_p - instead of calling cxx_eval_bare_aggregate\non them it just verifies flags and if they are TREE_CONSTANT even after\nthat, just fold.\nNow, on the testcase we have a TREE_CONSTANT CONSTRUCTOR containing\nTREE_CONSTANT NOP_EXPR of REAL_CST.  And, fold, which isn't recursive,\ndoesn't optimize that into VECTOR_CST, while later on we are only able\nto optimize VECTOR_CST arithmetics, not arithmetics with vector\nCONSTRUCTORs.\nThe following patch fixes that by rejecting CONSTRUCTORs with vector type\nin reduced_constant_expression_p regardless of whether they have\nCONSTRUCTOR_NO_CLEARING set or not, folding result in cxx_eval_bare_aggregate\neven if nothing has changed but it wasn't non-constant and removing folding\nfrom the TREE_CONSTANT reduced_constant_expression_p short-cut.\n\n2022-10-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/107295\n\t* constexpr.cc (reduced_constant_expression_p) <case CONSTRUCTOR>:\n\tReturn false for VECTOR_TYPE CONSTRUCTORs even without\n\tCONSTRUCTOR_NO_CLEARING set on them.\n\t(cxx_eval_bare_aggregate): If constant but !changed, fold before\n\treturning VECTOR_TYPE_P CONSTRUCTOR.\n\t(cxx_eval_constant_expression) <case CONSTRUCTOR>: Don't fold\n\tTREE_CONSTANT CONSTRUCTOR, just return it.\n\n\t* g++.dg/ext/vector42.C: New test.", "tree": {"sha": "9ad44790376961af9de1d283b6edca8546cd5cc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ad44790376961af9de1d283b6edca8546cd5cc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cc41601d9a948e8d612a21c3b9a44ce0b977747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc41601d9a948e8d612a21c3b9a44ce0b977747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc41601d9a948e8d612a21c3b9a44ce0b977747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc41601d9a948e8d612a21c3b9a44ce0b977747/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf3b532b524ecacb3202ab2c8af419ffaaab7cff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3b532b524ecacb3202ab2c8af419ffaaab7cff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3b532b524ecacb3202ab2c8af419ffaaab7cff"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "c3ee970a724b1067d91c96b1d04ff86f49e5dc46", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc41601d9a948e8d612a21c3b9a44ce0b977747/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc41601d9a948e8d612a21c3b9a44ce0b977747/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=2cc41601d9a948e8d612a21c3b9a44ce0b977747", "patch": "@@ -3104,12 +3104,12 @@ reduced_constant_expression_p (tree t)\n     case CONSTRUCTOR:\n       /* And we need to handle PTRMEM_CST wrapped in a CONSTRUCTOR.  */\n       tree field;\n+      if (TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n+\t/* An initialized vector would have a VECTOR_CST.  */\n+\treturn false;\n       if (CONSTRUCTOR_NO_CLEARING (t))\n \t{\n-\t  if (TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n-\t    /* An initialized vector would have a VECTOR_CST.  */\n-\t    return false;\n-\t  else if (TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE)\n+\t  if (TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE)\n \t    {\n \t      /* There must be a valid constant initializer at every array\n \t\t index.  */\n@@ -4956,8 +4956,14 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n \t  TREE_SIDE_EFFECTS (ctx->ctor) = side_effects_p;\n \t}\n     }\n-  if (*non_constant_p || !changed)\n+  if (*non_constant_p)\n     return t;\n+  if (!changed)\n+    {\n+      if (VECTOR_TYPE_P (type))\n+\tt = fold (t);\n+      return t;\n+    }\n   t = ctx->ctor;\n   if (!t)\n     t = build_constructor (type, NULL);\n@@ -7387,11 +7393,10 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n     case CONSTRUCTOR:\n       if (TREE_CONSTANT (t) && reduced_constant_expression_p (t))\n \t{\n-\t  /* Don't re-process a constant CONSTRUCTOR, but do fold it to\n-\t     VECTOR_CST if applicable.  */\n+\t  /* Don't re-process a constant CONSTRUCTOR.  */\n \t  verify_constructor_flags (t);\n \t  if (TREE_CONSTANT (t))\n-\t    return fold (t);\n+\t    return t;\n \t}\n       r = cxx_eval_bare_aggregate (ctx, t, lval,\n \t\t\t\t   non_constant_p, overflow_p);"}, {"sha": "e7810971ca16bf5b4cf4978bd9348e6a2cb317df", "filename": "gcc/testsuite/g++.dg/ext/vector42.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc41601d9a948e8d612a21c3b9a44ce0b977747/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc41601d9a948e8d612a21c3b9a44ce0b977747/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector42.C?ref=2cc41601d9a948e8d612a21c3b9a44ce0b977747", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/107295\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T> struct A {\n+  typedef T __attribute__((vector_size (sizeof (int)))) V;\n+};\n+template <int, typename T> using B = typename A<T>::V;\n+template <typename T> using V = B<4, T>;\n+using F = V<float>;\n+constexpr F a = F () + 0.0f;\n+constexpr F b = F () + (float) 0.0;\n+constexpr F c = F () + (float) 0.0L;"}]}