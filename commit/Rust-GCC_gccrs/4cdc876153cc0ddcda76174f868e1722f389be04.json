{"sha": "4cdc876153cc0ddcda76174f868e1722f389be04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNkYzg3NjE1M2NjMGRkY2RhNzYxNzRmODY4ZTE3MjJmMzg5YmUwNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-10-05T17:42:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-10-05T17:42:00Z"}, "message": "[multiple changes]\n\n2009-10-05  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* include/decimal/decimal: Warn if decimal floating point types\n\tare not available.\n\t* acinclude.m4 (GLIBCXX_ENABLE_DECIMAL_FLOAT): New.\n\t* configure.ac: Use it.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\n2009-10-05  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/Makefile.am: Remove stray line break.\n\n\t* include/decimal/decimal: Brief class doxygen markup.\n\t* libsupc++/exception: Whitespace cleanup.\n\n\t* testsuite/libstdc++-dg/conformance.exp: Add testsuite directory\n\tdecimal.\n\t* scripts/create_testsuite_files (dlist): Same.\n\n\t* doc/xml/manual/using.xml: One column in table. Move after TR1.\n\n\t* testsuite/decimal/bad-cast.cc: Move to...\n\t* testsuite/decimal/cast_neg.cc: ...here.\n\t* testsuite/decimal/bad-mixed-mode.cc: Move to...\n\t* testsuite/decimal/mixed-mode_neg.cc: ...here.\n\t* testsuite/decimal/bad-operator.cc: Move to...\n\t* testsuite/decimal/operator_neg.cc: ...here.\n\n\t* doc/doxygen/user.cfg.in (INPUT): Add decimal/decimal.\n\n2009-10-05  Janis Johnson  <janis187@us.ibm.com>\n\n\t* doc/Makefile.am: Process new file.\n\t* doc/xml/manual/intro.xml: Ditto.\n\t* doc/xml/manual/using.xml: Document new header.\n\t* doc/xml/manual/status_cxxdecimal.xml: New file.\n\t* include/Makefile.am: Process new headers.\n\t* include/decimal/decimal: New file.\n\t* include/decimal/decimal.h: New file.\n\n2009-10-05  Janis Johnson  <janis187@us.ibm.com>\n\n\t* testsuite/decimal: New directory.\n\t* testsuite/decimal/bad-cast.cc: New test.\n\t* testsuite/decimal/bad-mixed-mode.cc: New test.\n\t* testsuite/decimal/bad-operator.cc: New test.\n\t* testsuite/decimal/binary-arith.cc: New test.\n\t* testsuite/decimal/comparison.cc: New test.\n\t* testsuite/decimal/compound-assignment.cc: New test.\n\t* testsuite/decimal/compound-assignment-memfunc.cc: New test.\n\t* testsuite/decimal/conversion-from-float.cc: New test.\n\t* testsuite/decimal/conversion-from-integral.cc: New test.\n\t* testsuite/decimal/conversion-to-generic-float.cc: New test.\n\t* testsuite/decimal/conversion-to-integral.cc: New test.\n\t* testsuite/decimal/ctor.cc: New test.\n\t* testsuite/decimal/incdec.cc: New test.\n\t* testsuite/decimal/incdec-memfunc.cc: New test.\n\t* testsuite/decimal/make-decimal.cc: New test.\n\t* testsuite/decimal/unary-arith.cc: New test.\n\nFrom-SVN: r152457", "tree": {"sha": "96b34fadf9c78b6f9e01a6f3cdd1675170a3d996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96b34fadf9c78b6f9e01a6f3cdd1675170a3d996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cdc876153cc0ddcda76174f868e1722f389be04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdc876153cc0ddcda76174f868e1722f389be04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cdc876153cc0ddcda76174f868e1722f389be04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdc876153cc0ddcda76174f868e1722f389be04/comments", "author": null, "committer": null, "parents": [{"sha": "8fc7e474ff38a3b4219f552597673cec1ed58e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc7e474ff38a3b4219f552597673cec1ed58e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc7e474ff38a3b4219f552597673cec1ed58e9f"}], "stats": {"total": 4550, "additions": 4511, "deletions": 39}, "files": [{"sha": "4cb095fda1a5ab924e93ee64ecddc04c93c10ab6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -1,3 +1,65 @@\n+2009-10-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/decimal/decimal: Warn if decimal floating point types\n+\tare not available.\n+\t* acinclude.m4 (GLIBCXX_ENABLE_DECIMAL_FLOAT): New.\n+\t* configure.ac: Use it.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n+2009-10-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/Makefile.am: Remove stray line break.\n+\n+\t* include/decimal/decimal: Brief class doxygen markup.\n+\t* libsupc++/exception: Whitespace cleanup.\n+\n+\t* testsuite/libstdc++-dg/conformance.exp: Add testsuite directory\n+\tdecimal.\n+\t* scripts/create_testsuite_files (dlist): Same.\n+\n+\t* doc/xml/manual/using.xml: One column in table. Move after TR1.\n+\n+\t* testsuite/decimal/bad-cast.cc: Move to...\n+\t* testsuite/decimal/cast_neg.cc: ...here.\n+\t* testsuite/decimal/bad-mixed-mode.cc: Move to...\n+\t* testsuite/decimal/mixed-mode_neg.cc: ...here.\n+\t* testsuite/decimal/bad-operator.cc: Move to...\n+\t* testsuite/decimal/operator_neg.cc: ...here.\n+\n+\t* doc/doxygen/user.cfg.in (INPUT): Add decimal/decimal.\n+\n+2009-10-05  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/Makefile.am: Process new file.\n+\t* doc/xml/manual/intro.xml: Ditto.\n+\t* doc/xml/manual/using.xml: Document new header.\n+\t* doc/xml/manual/status_cxxdecimal.xml: New file.\n+\t* include/Makefile.am: Process new headers.\n+\t* include/decimal/decimal: New file.\n+\t* include/decimal/decimal.h: New file.\n+\n+2009-10-05  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* testsuite/decimal: New directory.\n+\t* testsuite/decimal/bad-cast.cc: New test.\n+\t* testsuite/decimal/bad-mixed-mode.cc: New test.\n+\t* testsuite/decimal/bad-operator.cc: New test.\n+\t* testsuite/decimal/binary-arith.cc: New test.\n+\t* testsuite/decimal/comparison.cc: New test.\n+\t* testsuite/decimal/compound-assignment.cc: New test.\n+\t* testsuite/decimal/compound-assignment-memfunc.cc: New test.\n+\t* testsuite/decimal/conversion-from-float.cc: New test.\n+\t* testsuite/decimal/conversion-from-integral.cc: New test.\n+\t* testsuite/decimal/conversion-to-generic-float.cc: New test.\n+\t* testsuite/decimal/conversion-to-integral.cc: New test.\n+\t* testsuite/decimal/ctor.cc: New test.\n+\t* testsuite/decimal/incdec.cc: New test.\n+\t* testsuite/decimal/incdec-memfunc.cc: New test.\n+\t* testsuite/decimal/make-decimal.cc: New test.\n+\t* testsuite/decimal/unary-arith.cc: New test.\n+\n 2009-10-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/lib/libstdc++.exp (check_v3_target_rvalref): Remove."}, {"sha": "51e35ea42a62c35837754ead3a725476ebff95fe", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -2221,6 +2221,44 @@ AC_DEFUN([GLIBCXX_ENABLE_LONG_LONG], [\n ])\n \n \n+dnl\n+dnl Check for decimal floating point.\n+dnl See:\n+dnl http://gcc.gnu.org/onlinedocs/gcc/Decimal-Float.html#Decimal-Float\n+dnl\n+dnl This checks to see if the host supports decimal floating point types.\n+dnl\n+dnl Defines:\n+dnl  _GLIBCXX_USE_DECIMAL_FLOAT\n+dnl\n+AC_DEFUN([GLIBCXX_ENABLE_DECIMAL_FLOAT], [\n+\n+  # Fake what AC_TRY_COMPILE does, without linking as this is\n+  # unnecessary for this test.\n+\n+    cat > conftest.$ac_ext << EOF\n+[#]line __oline__ \"configure\"\n+int main()\n+{\n+  _Decimal32 d1;\n+  _Decimal64 d2;\n+  _Decimal128 d3;\n+  return 0;\n+}\n+EOF\n+\n+    AC_MSG_CHECKING([for ISO/IEC TR 24733 ])\n+    if AC_TRY_EVAL(ac_compile); then\n+      AC_DEFINE(_GLIBCXX_USE_DECIMAL_FLOAT, 1,\n+      [Define if ISO/IEC TR 24733 decimal floating point types are supported on this host.])\n+      enable_dfp=yes\n+    else\n+      enable_dfp=no\n+    fi\n+    AC_MSG_RESULT($enable_dfp)\n+    rm -f conftest*\n+])\n+\n dnl\n dnl Check for template specializations for the 'wchar_t' type.\n dnl"}, {"sha": "80419606a1e026d417f64db0f85fca5e8cedf09b", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -262,9 +262,6 @@\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n-/* Define to 1 if you have the <execinfo.h> header file. */\n-#undef HAVE_EXECINFO_H\n-\n /* Define to 1 if you have the `modf' function. */\n #undef HAVE_MODF\n \n@@ -772,6 +769,10 @@\n /* Defined if clock_gettime has realtime clock support. */\n #undef _GLIBCXX_USE_CLOCK_REALTIME\n \n+/* Define if ISO/IEC TR 24733 decimal floating point types are supported on\n+   this host. */\n+#undef _GLIBCXX_USE_DECIMAL_FLOAT\n+\n /* Defined if gettimeofday is available. */\n #undef _GLIBCXX_USE_GETTIMEOFDAY\n "}, {"sha": "bdd7a0592c79097d5fd6ca626f194ac2cde0f40a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -7926,7 +7926,7 @@ fi\n \n # On IRIX 5.3, sys/types and inttypes.h are conflicting.\n for ac_header in sys/types.h sys/stat.h stdlib.h string.h memory.h strings.h \\\n-\t\t  inttypes.h stdint.h unistd.h execinfo.h\n+\t\t  inttypes.h stdint.h unistd.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n ac_fn_c_check_header_compile \"$LINENO\" \"$ac_header\" \"$as_ac_Header\" \"$ac_includes_default\n@@ -15358,6 +15358,40 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n \n \n \n+\n+  # Fake what AC_TRY_COMPILE does, without linking as this is\n+  # unnecessary for this test.\n+\n+    cat > conftest.$ac_ext << EOF\n+#line 15366 \"configure\"\n+int main()\n+{\n+  _Decimal32 d1;\n+  _Decimal64 d2;\n+  _Decimal128 d3;\n+  return 0;\n+}\n+EOF\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO/IEC TR 24733 \" >&5\n+$as_echo_n \"checking for ISO/IEC TR 24733 ... \" >&6; }\n+    if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n+  (eval $ac_compile) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; then\n+\n+$as_echo \"#define _GLIBCXX_USE_DECIMAL_FLOAT 1\" >>confdefs.h\n+\n+      enable_dfp=yes\n+    else\n+      enable_dfp=no\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_dfp\" >&5\n+$as_echo \"$enable_dfp\" >&6; }\n+    rm -f conftest*\n+\n+\n # Checks for compiler support that doesn't require linking.\n \n   # All these tests are for C++; save the language and the compiler flags."}, {"sha": "1fd8119b51d39caecb1a37f562b839e2afd08ea0", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -128,6 +128,7 @@ GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n GLIBCXX_ENABLE_PCH($is_hosted)\n GLIBCXX_ENABLE_THREADS\n GLIBCXX_ENABLE_ATOMIC_BUILTINS\n+GLIBCXX_ENABLE_DECIMAL_FLOAT\n \n # Checks for compiler support that doesn't require linking.\n GLIBCXX_CHECK_COMPILER_FEATURES"}, {"sha": "947a6d477e8d95bc77d2dae9c177d5ca690e23e2", "filename": "libstdc++-v3/doc/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fdoc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fdoc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.am?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -107,6 +107,7 @@ xml_sources = \\\n \t${xml_srcdir}/manual/status_cxx1998.xml \\\n \t${xml_srcdir}/manual/status_cxx200x.xml \\\n \t${xml_srcdir}/manual/status_cxxtr1.xml \\\n+\t${xml_srcdir}/manual/status_cxxtr24733.xml \\\n \t${xml_srcdir}/manual/strings.xml \\\n \t${xml_srcdir}/manual/support.xml \\\n \t${xml_srcdir}/manual/test.xml \\"}, {"sha": "50935ffe1589e32b1f6902efa4b8075a3bfccc45", "filename": "libstdc++-v3/doc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -319,6 +319,7 @@ xml_sources = \\\n \t${xml_srcdir}/manual/status_cxx1998.xml \\\n \t${xml_srcdir}/manual/status_cxx200x.xml \\\n \t${xml_srcdir}/manual/status_cxxtr1.xml \\\n+\t${xml_srcdir}/manual/status_cxxtr24733.xml \\\n \t${xml_srcdir}/manual/strings.xml \\\n \t${xml_srcdir}/manual/support.xml \\\n \t${xml_srcdir}/manual/test.xml \\"}, {"sha": "a26c5450e79c352a1fafd1a668f886582ee6f093", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -727,6 +727,7 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          include/tr1_impl/unordered_set \\\n                          include/tr1_impl/utility \\\n                          include/tr1_impl \\\n+                         include/decimal/decimal \\\n                          include/ \\\n                          include/@host_alias@/bits \\\n                          include/backward \\"}, {"sha": "d4e1d12d896d8ba94cd942bc96dabddef09517ec", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -44,6 +44,11 @@\n     <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n \t\tparse=\"xml\" href=\"status_cxx200x.xml\">\n     </xi:include>    \n+\n+    <!-- Section 01.4 : Status C++ TR24733 -->\n+    <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t\tparse=\"xml\" href=\"status_cxxtr24733.xml\">\n+    </xi:include>\n   </sect1>\n \n   <!-- Section 02 : License -->"}, {"sha": "08e9a436703abfb35a9f95bfb39d782221fbab5f", "filename": "libstdc++-v3/doc/xml/manual/status_cxxtr24733.xml", "status": "added", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxxtr24733.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxxtr24733.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxxtr24733.xml?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,299 @@\n+<sect2 id=\"status.iso.tr24733\" xreflabel=\"Status C++ TR24733\">\n+<?dbhtml filename=\"status_iso_cxxtr24733.html\"?>\n+ \n+<sect2info>\n+  <keywordset>\n+    <keyword>\n+      TR 24733\n+    </keyword>\n+  </keywordset>\n+</sect2info>\n+\n+<title>C++ TR 24733</title>\n+\n+<para>\n+This table is based on the table of contents of\n+ISO/IEC TR 24733 Date: 2009-08-28\n+Extension for the programming language C++ to support\n+decimal floating-point arithmetic\n+</para>\n+\n+<para>\n+This page describes the TR 24733 support in mainline GCC SVN, not in any\n+particular release.\n+</para>\n+\n+<!-- Status is Yes or No, Broken/Partial-->\n+<!-- \n+   Yes\n+\n+   No \n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+   Broken/Partial \n+      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n+-->\n+<table frame='all'>\n+<title>C++ TR 24733 Implementation Status</title>\n+<tgroup cols='4' align='left' colsep='0' rowsep='1'>\n+<colspec colname='c1'></colspec>\n+<colspec colname='c2'></colspec>\n+<colspec colname='c3'></colspec>\n+<colspec colname='c4'></colspec>\n+  <thead>\n+    <row>\n+      <entry>Section</entry>\n+      <entry>Description</entry>\n+      <entry>Status</entry>\n+      <entry>Comments</entry>\n+    </row>\n+  </thead>\n+\n+  <tbody>\n+    <row>\n+      <entry>\n+\t<emphasis>0</emphasis>\n+      </entry>\n+      <entry namest=\"c2\" nameend=\"c4\" align=\"left\">\n+\t<emphasis>Introduction</emphasis>\n+      </entry>\n+    </row>\n+\n+    <row>\n+      <entry>\n+\t<emphasis>1</emphasis>\n+      </entry>\n+      <entry namest=\"c2\" nameend=\"c4\" align=\"left\">\n+\t<emphasis>Normative references</emphasis>\n+      </entry>\n+    </row>\n+\n+    <row>\n+      <entry>\n+\t<emphasis>2</emphasis>\n+      </entry>\n+      <entry namest=\"c2\" nameend=\"c4\" align=\"left\">\n+\t<emphasis>Conventions</emphasis>\n+      </entry>\n+    </row>\n+\n+    <row>\n+      <entry>\n+\t<emphasis>3</emphasis>\n+      </entry>\n+      <entry namest=\"c2\" nameend=\"c4\" align=\"left\">\n+\t<emphasis>Decimal floating-point types</emphasis>\n+      </entry>\n+    </row>\n+\n+    <row>\n+      <entry>3.1</entry>\n+      <entry>Characteristics of decimal floating-point types</entry>\n+      <entry></entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <entry>3.2</entry>\n+      <entry>Decimal Types</entry>\n+      <entry></entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n+      <entry>3.2.1</entry>\n+      <entry>Class <code>decimal</code> synopsis</entry>\n+      <entry>Partial</entry>\n+      <entry>Missing declarations for formatted input/output; non-conforming extension for functions converting to integral type</entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n+      <entry>3.2.2</entry>\n+      <entry>Class <code>decimal32</code></entry>\n+      <entry>Partial</entry>\n+      <entry>Missing 3.2.2.5 conversion to integral type; conforming extension for conversion from scalar decimal floating-point</entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n+      <entry>3.2.3</entry>\n+      <entry>Class <code>decimal64</code></entry>\n+      <entry>Partial</entry>\n+      <entry>Missing 3.2.3.5 conversion to integral type; conforming extension for conversion from scalar decimal floating-point</entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n+      <entry>3.2.4</entry>\n+      <entry>Class <code>decimal128</code></entry>\n+      <entry>Partial</entry>\n+      <entry>Missing 3.2.4.5 conversion to integral type; conforming extension for conversion from scalar decimal floating-point</entry>\n+    </row>\n+    <row>\n+      <entry>3.2.5</entry>\n+      <entry>Initialization from coefficient and exponent</entry>\n+      <entry>Y</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <entry>3.2.6</entry>\n+      <entry>Conversion to generic floating-point type</entry>\n+      <entry>Y</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <entry>3.2.7</entry>\n+      <entry>Unary arithmetic operators</entry>\n+      <entry>Y</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <entry>3.2.8</entry>\n+      <entry>Binary arithmetic operators</entry>\n+      <entry>Y</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <entry>3.2.9</entry>\n+      <entry>Comparison operators</entry>\n+      <entry>Y</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry>3.2.10</entry>\n+      <entry>Formatted input</entry>\n+      <entry>N</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry>3.2.11</entry>\n+      <entry>Formatted output</entry>\n+      <entry>N</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry>3.3</entry>\n+      <entry>Additions to header <code>limits</code></entry>\n+      <entry>N</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <entry>3.4</entry>\n+      <entry>Headers <code>cfloat</code> and <code>float.h</code></entry>\n+      <entry></entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <entry>3.4.2</entry>\n+      <entry>Additions to header <code>cfloat</code> synopsis</entry>\n+      <entry>Y</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n+      <entry>3.4.3</entry>\n+      <entry>Additions to header <code>float.h</code> synopsis</entry>\n+      <entry>N</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <entry>3.4.4</entry>\n+      <entry>Maximum finite value</entry>\n+      <entry>Y</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <entry>3.4.5</entry>\n+      <entry>Epsilon</entry>\n+      <entry>Y</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <entry>3.4.6</entry>\n+      <entry>Minimum positive normal value</entry>\n+      <entry>Y</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <entry>3.4.7</entry>\n+      <entry>Minimum positive subnormal value</entry>\n+      <entry>Y</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <entry>3.4.8</entry>\n+      <entry>Evaluation format</entry>\n+      <entry>Y</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry>3.5</entry>\n+      <entry>Additions to <code>cfenv</code> and <code>fenv.h</code></entry>\n+      <entry>Outside the scope of GCC</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry>3.6</entry>\n+      <entry>Additions to <code>cmath</code> and <code>math.h</code></entry>\n+      <entry>Outside the scope of GCC</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry>3.7</entry>\n+      <entry>Additions to <code>cstdio</code> and <code>stdio.h</code></entry>\n+      <entry>Outside the scope of GCC</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry>3.8</entry>\n+      <entry>Additions to <code>cstdlib</code> and <code>stdlib.h</code></entry>\n+      <entry>Outside the scope of GCC</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry>3.9</entry>\n+      <entry>Additions to <code>cwchar</code> and <code>wchar.h</code></entry>\n+      <entry>Outside the scope of GCC</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry>3.10</entry>\n+      <entry>Facets</entry>\n+      <entry>N</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry>3.11</entry>\n+      <entry>Type traits</entry>\n+      <entry>N</entry>\n+      <entry></entry>\n+    </row>\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry>3.12</entry>\n+      <entry>Hash functions</entry>\n+      <entry>N</entry>\n+      <entry></entry>\n+    </row>\n+\n+    <row>\n+      <entry>\n+\t<emphasis>4</emphasis>\n+      </entry>\n+      <entry namest=\"c2\" nameend=\"c4\" align=\"left\">\n+\t<emphasis>Notes on C compatibility</emphasis>\n+      </entry>\n+    </row>\n+\n+  </tbody>\n+</tgroup>\n+</table>\n+\n+\n+</sect2>"}, {"sha": "bf25bb766ac2d6a17e76543402b7759e4cb599b8", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -360,7 +360,7 @@ mode, i.e. <literal>-std=c++0x</literal> or <literal>-std=gnu++0x</literal>.\n </para>\n \n <table frame='all'>\n-<title>C++ TR1 Library Headers</title>\n+<title>C++ TR 1 Library Headers</title>\n <tgroup cols='5' align='left' colsep='1' rowsep='1'>\n <colspec colname='c1'></colspec>\n <colspec colname='c2'></colspec>\n@@ -395,7 +395,7 @@ mode, i.e. <literal>-std=c++0x</literal> or <literal>-std=gnu++0x</literal>.\n \n \n <table frame='all'>\n-<title>C++ TR1 Library Headers for C Library Facilities</title>\n+<title>C++ TR 1 Library Headers for C Library Facilities</title>\n <tgroup cols='5' align='left' colsep='1' rowsep='1'>\n <colspec colname='c1'></colspec>\n <colspec colname='c2'></colspec>\n@@ -430,6 +430,24 @@ mode, i.e. <literal>-std=c++0x</literal> or <literal>-std=gnu++0x</literal>.\n </tgroup>\n </table>\n \n+\n+<para>Decimal floating-point arithmetic is available if the C++\n+compiler supports scalar decimal floating-point types defined via\n+<code>__attribute__((mode(SD|DD|LD)))</code>.\n+</para>\n+\n+<table frame='all'>\n+<title>C++ TR 24733 Decimal Floating-Point Header</title>\n+<tgroup cols='1' align='left' colsep='1' rowsep='1'>\n+<colspec colname='c1'></colspec>\n+<tbody>\n+<row>\n+<entry><filename class=\"headerfile\">decimal/decimal</filename></entry>\n+</row>\n+</tbody>\n+</tgroup>\n+</table>\n+\n <para>\n   Also included are files for the C++ ABI interface:\n </para>"}, {"sha": "196ccb9911fd74e76af734960af504d5bc625a80", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -618,6 +618,11 @@ tr1_impl_headers = \\\n \t${tr1_impl_srcdir}/unordered_set \\\n \t${tr1_impl_srcdir}/utility\n \n+decimal_srcdir = ${glibcxx_srcdir}/include/decimal\n+decimal_builddir = ./decimal\n+decimal_headers = \\\n+\t${decimal_srcdir}/decimal \\\n+\t${decimal_srcdir}/decimal.h\n \n # This is the common subset of C++ files that all three \"C\" header models use.\n c_base_srcdir = $(C_INCLUDE_DIR)\n@@ -896,8 +901,8 @@ endif\n allstamped = \\\n \tstamp-std stamp-bits stamp-c_base stamp-c_base_extra \\\n \tstamp-c_compatibility  stamp-backward stamp-ext stamp-pb \\\n-\tstamp-tr1 stamp-tr1-impl stamp-debug stamp-parallel stamp-host \\\n-    stamp-profile stamp-profile-impl\n+\tstamp-tr1 stamp-tr1-impl stamp-decimal stamp-debug \\\n+\tstamp-parallel stamp-profile stamp-profile-impl stamp-host \n \n # List of all files that are created by explicit building, editing, or\n # catenation.\n@@ -1011,6 +1016,11 @@ stamp-tr1-impl: ${tr1_impl_headers}\n \t@-cd ${tr1_impl_builddir} && $(LN_S) $? . 2>/dev/null\n \t@$(STAMP) stamp-tr1-impl\n \n+stamp-decimal: ${decimal_headers}\n+\t@-mkdir -p ${decimal_builddir}\n+\t@-cd ${decimal_builddir} && $(LN_S) $? . 2>/dev/null\n+\t@$(STAMP) stamp-decimal\n+\n stamp-debug: ${debug_headers}\n \t@-mkdir -p ${debug_builddir}\n \t@-cd ${debug_builddir} && $(LN_S) $? . 2>/dev/null\n@@ -1239,6 +1249,9 @@ install-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${tr1_impl_builddir}\n \tfor file in ${tr1_impl_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${tr1_impl_builddir}; done\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${decimal_builddir}\n+\tfor file in ${decimal_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${decimal_builddir}; done\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${c_base_builddir}\n \tfor file in ${c_base_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${c_base_builddir}; done\n@@ -1283,9 +1296,10 @@ clean-local:\n # directory. (This is more of an example of how this kind of rule can\n # be made.)\n .PRECIOUS: $(std_headers) $(c_base_headers) $(tr1_headers) $(tr1_impl_headers)\n-\t   $(ext_headers)\n+\t   $(decimal_headers) $(ext_headers)\n $(std_headers): ; @:\n $(c_base_headers): ; @:\n $(tr1_headers): ; @:\n $(tr1_impl_headers): ; @:\n+$(decimal_headers): ; @:\n $(ext_headers): ; @:"}, {"sha": "b1c457e2ea62d7169c3eaf3aea1b2cf423dad90a", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -14,6 +14,8 @@\n # PARTICULAR PURPOSE.\n \n @SET_MAKE@\n+\n+#o# Makefile for the include subdirectory of the GNU C++ Standard library.\n VPATH = @srcdir@\n pkgdatadir = $(datadir)/@PACKAGE@\n pkgincludedir = $(includedir)/@PACKAGE@\n@@ -856,6 +858,12 @@ tr1_impl_headers = \\\n \t${tr1_impl_srcdir}/unordered_set \\\n \t${tr1_impl_srcdir}/utility\n \n+decimal_srcdir = ${glibcxx_srcdir}/include/decimal\n+decimal_builddir = ./decimal\n+decimal_headers = \\\n+\t${decimal_srcdir}/decimal \\\n+\t${decimal_srcdir}/decimal.h\n+\n \n # This is the common subset of C++ files that all three \"C\" header models use.\n c_base_srcdir = $(C_INCLUDE_DIR)\n@@ -1006,20 +1014,21 @@ parallel_builddir = ./parallel\n profile_srcdir = ${glibcxx_srcdir}/include/profile\n profile_builddir = ./profile\n profile_headers = \\\n-    ${profile_srcdir}/base.h \\\n-    ${profile_srcdir}/unordered_map \\\n-    ${profile_srcdir}/unordered_set \\\n-    ${profile_srcdir}/vector \\\n-    ${profile_srcdir}/bitset \\\n-    ${profile_srcdir}/deque \\\n-    ${profile_srcdir}/list \\\n-    ${profile_srcdir}/map \\\n-    ${profile_srcdir}/map.h \\\n-    ${profile_srcdir}/multimap.h \\\n-    ${profile_srcdir}/multiset.h \\\n-    ${profile_srcdir}/set \\\n-    ${profile_srcdir}/set.h \\\n-    ${profile_srcdir}/hashtable.h\n+\t${profile_srcdir}/base.h \\\n+\t${profile_srcdir}/unordered_map \\\n+\t${profile_srcdir}/unordered_set \\\n+\t${profile_srcdir}/vector \\\n+\t${profile_srcdir}/bitset \\\n+\t${profile_srcdir}/deque \\\n+\t${profile_srcdir}/list \\\n+\t${profile_srcdir}/map \\\n+\t${profile_srcdir}/map.h \\\n+\t${profile_srcdir}/multimap.h \\\n+\t${profile_srcdir}/multiset.h \\\n+\t${profile_srcdir}/set \\\n+\t${profile_srcdir}/set.h \\\n+\t${profile_srcdir}/hashtable.h\n+\n profile_impl_srcdir = ${glibcxx_srcdir}/include/profile/impl\n profile_impl_builddir = ./profile/impl\n profile_impl_headers = \\\n@@ -1116,8 +1125,8 @@ PCHFLAGS = -x c++-header $(CXXFLAGS)\n allstamped = \\\n \tstamp-std stamp-bits stamp-c_base stamp-c_base_extra \\\n \tstamp-c_compatibility  stamp-backward stamp-ext stamp-pb \\\n-\tstamp-tr1 stamp-tr1-impl stamp-debug stamp-parallel stamp-host \\\n-    stamp-profile stamp-profile-impl\n+\tstamp-tr1 stamp-tr1-impl stamp-decimal stamp-debug \\\n+\tstamp-parallel stamp-profile stamp-profile-impl stamp-host \n \n \n # List of all files that are created by explicit building, editing, or\n@@ -1424,6 +1433,11 @@ stamp-tr1-impl: ${tr1_impl_headers}\n \t@-cd ${tr1_impl_builddir} && $(LN_S) $? . 2>/dev/null\n \t@$(STAMP) stamp-tr1-impl\n \n+stamp-decimal: ${decimal_headers}\n+\t@-mkdir -p ${decimal_builddir}\n+\t@-cd ${decimal_builddir} && $(LN_S) $? . 2>/dev/null\n+\t@$(STAMP) stamp-decimal\n+\n stamp-debug: ${debug_headers}\n \t@-mkdir -p ${debug_builddir}\n \t@-cd ${debug_builddir} && $(LN_S) $? . 2>/dev/null\n@@ -1640,6 +1654,9 @@ install-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${tr1_impl_builddir}\n \tfor file in ${tr1_impl_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${tr1_impl_builddir}; done\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${decimal_builddir}\n+\tfor file in ${decimal_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${decimal_builddir}; done\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${c_base_builddir}\n \tfor file in ${c_base_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${c_base_builddir}; done\n@@ -1660,8 +1677,7 @@ install-headers:\n \t  $(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${parallel_builddir};\\\n \tfor file in $$parallel_headers_install; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${parallel_builddir}; done\n-\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${profile_builddir} \\\n-\t\t$(DESTDIR)${gxx_include_dir}/${profile_builddir}/impl\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${profile_builddir}\n \tfor file in ${profile_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${profile_builddir}; done\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${profile_impl_builddir}\n@@ -1682,11 +1698,12 @@ clean-local:\n # directory. (This is more of an example of how this kind of rule can\n # be made.)\n .PRECIOUS: $(std_headers) $(c_base_headers) $(tr1_headers) $(tr1_impl_headers)\n-\t   $(ext_headers)\n+\t   $(decimal_headers) $(ext_headers)\n $(std_headers): ; @:\n $(c_base_headers): ; @:\n $(tr1_headers): ; @:\n $(tr1_impl_headers): ; @:\n+$(decimal_headers): ; @:\n $(ext_headers): ; @:\n \n # Tell versions [3.59,3.63) of GNU make to not export all variables."}, {"sha": "589b76511460519c171e42f4f5dd6fd8583aa1e3", "filename": "libstdc++-v3/include/decimal/decimal", "status": "added", "additions": 482, "deletions": 0, "changes": 482, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,482 @@\n+// <decimal> -*- C++ -*-\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/decimal/decimal\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+// ISO/IEC TR 24733 \n+// Written by Janis Johnson <janis187@us.ibm.com>\n+\n+#ifndef _GLIBCXX_DECIMAL\n+#define _GLIBCXX_DECIMAL 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+\n+#ifndef _GLIBCXX_USE_DECIMAL_FLOAT\n+#error This file requires compiler and library support for ISO/IEC TR 24733 \\\n+that is currently not available.\n+#endif\n+\n+namespace std\n+{\n+  /**\n+    * @defgroup decimal Decimal Floating-Point Arithmetic\n+    * @ingroup numerics\n+    *\n+    * Classes and functions for decimal floating-point arithmetic.\n+    * @{\n+    */\n+\n+  /** @namespace std::decimal\n+    * @brief ISO/IEC TR 24733 Decimal floating-point arithmetic.\n+    */\n+namespace decimal\n+{\n+  class decimal32;\n+  class decimal64;\n+  class decimal128;\n+\n+  // 3.2.5  Initialization from coefficient and exponent.\n+  static decimal32 make_decimal32(long long __coeff, int __exp);\n+  static decimal32 make_decimal32(unsigned long long __coeff, int __exp);\n+  static decimal64 make_decimal64(long long __coeff, int __exp);\n+  static decimal64 make_decimal64(unsigned long long __coeff, int __exp);\n+  static decimal128 make_decimal128(long long __coeff, int __exp);\n+  static decimal128 make_decimal128(unsigned long long __coeff, int __exp);\n+\n+  /// Non-conforming extension: Conversion to integral type.\n+  long long decimal32_to_long_long(decimal32 __d);\n+  long long decimal64_to_long_long(decimal64 __d);\n+  long long decimal128_to_long_long(decimal128 __d);\n+  long long decimal_to_long_long(decimal32 __d);\n+  long long decimal_to_long_long(decimal64 __d);\n+  long long decimal_to_long_long(decimal128 __d);\n+\n+  // 3.2.6  Conversion to generic floating-point type.\n+  float decimal32_to_float(decimal32 __d);\n+  float decimal64_to_float(decimal64 __d);\n+  float decimal128_to_float(decimal128 __d);\n+  float decimal_to_float(decimal32 __d);\n+  float decimal_to_float(decimal64 __d);\n+  float decimal_to_float(decimal128 __d);\n+\n+  double decimal32_to_double(decimal32 __d);\n+  double decimal64_to_double(decimal64 __d);\n+  double decimal128_to_double(decimal128 __d);\n+  double decimal_to_double(decimal32 __d);\n+  double decimal_to_double(decimal64 __d);\n+  double decimal_to_double(decimal128 __d);\n+\n+  long double decimal32_to_long_double(decimal32 __d);\n+  long double decimal64_to_long_double(decimal64 __d);\n+  long double decimal128_to_long_double(decimal128 __d);\n+  long double decimal_to_long_double(decimal32 __d);\n+  long double decimal_to_long_double(decimal64 __d);\n+  long double decimal_to_long_double(decimal128 __d);\n+\n+  // 3.2.7  Unary arithmetic operators.\n+  decimal32  operator+(decimal32 __rhs);\n+  decimal64  operator+(decimal64 __rhs);\n+  decimal128 operator+(decimal128 __rhs);\n+  decimal32  operator-(decimal32 __rhs);\n+  decimal64  operator-(decimal64 __rhs);\n+  decimal128 operator-(decimal128 __rhs);\n+\n+  // 3.2.8  Binary arithmetic operators.\n+#define _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(_Op, _T1, _T2, _T3)\t\\\n+  _T1 operator _Op(_T2 lhs, _T3 __rhs);\n+#define _DECLARE_DECIMAL_BINARY_OP_WITH_INT(_Op, _Tp)\t\t\\\n+  _Tp operator _Op(_Tp lhs, int __rhs);\t\t\t\t\\\n+  _Tp operator _Op(_Tp lhs, unsigned int __rhs);\t\t\\\n+  _Tp operator _Op(_Tp lhs, long __rhs);\t\t\t\\\n+  _Tp operator _Op(_Tp lhs, unsigned long __rhs);\t\t\\\n+  _Tp operator _Op(_Tp lhs, long long __rhs);\t\t\t\\\n+  _Tp operator _Op(_Tp lhs, unsigned long long __rhs);\t\t\\\n+  _Tp operator _Op(int lhs, _Tp __rhs);\t\t\t\t\\\n+  _Tp operator _Op(unsigned int lhs, _Tp __rhs);\t\t\\\n+  _Tp operator _Op(long lhs, _Tp __rhs);\t\t\t\\\n+  _Tp operator _Op(unsigned long lhs, _Tp __rhs);\t\t\\\n+  _Tp operator _Op(long long lhs, _Tp __rhs);\t\t\t\\\n+  _Tp operator _Op(unsigned long long lhs, _Tp __rhs);\n+\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal32, decimal32, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_INT(+, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal64, decimal32, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal64, decimal64, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal64, decimal64, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_INT(+, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal128, decimal32, decimal128)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal128, decimal64, decimal128)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal128, decimal128, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal128, decimal128, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal128, decimal128, decimal128)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_INT(+, decimal128)\n+\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal32, decimal32, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_INT(-, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal64, decimal32, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal64, decimal64, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal64, decimal64, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_INT(-, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal128, decimal32, decimal128)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal128, decimal64, decimal128)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal128, decimal128, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal128, decimal128, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal128, decimal128, decimal128)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_INT(-, decimal128)\n+\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal32, decimal32, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_INT(*, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal64, decimal32, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal64, decimal64, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal64, decimal64, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_INT(*, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal128, decimal32, decimal128)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal128, decimal64, decimal128)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal128, decimal128, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal128, decimal128, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal128, decimal128, decimal128)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_INT(*, decimal128)\n+\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal32, decimal32, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_INT(/, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal64, decimal32, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal64, decimal64, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal64, decimal64, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_INT(/, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal128, decimal32, decimal128)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal128, decimal64, decimal128)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal128, decimal128, decimal32)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal128, decimal128, decimal64)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal128, decimal128, decimal128)\n+  _DECLARE_DECIMAL_BINARY_OP_WITH_INT(/, decimal128)\n+\n+#undef _DECLARE_DECIMAL_BINARY_OP_WITH_DEC\n+#undef _DECLARE_DECIMAL_BINARY_OP_WITH_INT\n+\n+  // 3.2.9  Comparison operators.\n+#define _DECLARE_DECIMAL_COMPARISON(_Op, _T)\t\t\t\t\\\n+  bool operator _Op(_T lhs, decimal32  _rhs);\t\t\t\t\\\n+  bool operator _Op(_T lhs, decimal64  _rhs);\t\t\t\t\\\n+  bool operator _Op(_T lhs, decimal128  _rhs);\t\t\t\t\\\n+  bool operator _Op(_T lhs, int  _rhs);\t\t\t\t\t\\\n+  bool operator _Op(_T lhs, unsigned int  _rhs);\t\t\t\\\n+  bool operator _Op(_T lhs, long  _rhs);\t\t\t\t\\\n+  bool operator _Op(_T lhs, unsigned long  _rhs);\t\t\t\\\n+  bool operator _Op(_T lhs, long long  _rhs);\t\t\t\t\\\n+  bool operator _Op(_T lhs, unsigned long long  _rhs);\t\t\t\\\n+  bool operator _Op(int lhs, _T  _rhs);\t\t\t\t\t\\\n+  bool operator _Op(unsigned int lhs, _T  _rhs);\t\t\t\\\n+  bool operator _Op(long lhs, _T  _rhs);\t\t\t\t\\\n+  bool operator _Op(unsigned long lhs, _T  _rhs);\t\t\t\\\n+  bool operator _Op(long long lhs, _T  _rhs);\t\t\t\t\\\n+  bool operator _Op(unsigned long long lhs, _T  _rhs);\n+\n+  _DECLARE_DECIMAL_COMPARISON(==, decimal32)\n+  _DECLARE_DECIMAL_COMPARISON(==, decimal64)\n+  _DECLARE_DECIMAL_COMPARISON(==, decimal128)\n+\n+  _DECLARE_DECIMAL_COMPARISON(!=, decimal32)\n+  _DECLARE_DECIMAL_COMPARISON(!=, decimal64)\n+  _DECLARE_DECIMAL_COMPARISON(!=, decimal128)\n+\n+  _DECLARE_DECIMAL_COMPARISON(<, decimal32)\n+  _DECLARE_DECIMAL_COMPARISON(<, decimal64)\n+  _DECLARE_DECIMAL_COMPARISON(<, decimal128)\n+\n+  _DECLARE_DECIMAL_COMPARISON(>=, decimal32)\n+  _DECLARE_DECIMAL_COMPARISON(>=, decimal64)\n+  _DECLARE_DECIMAL_COMPARISON(>=, decimal128)\n+\n+  _DECLARE_DECIMAL_COMPARISON(>, decimal32)\n+  _DECLARE_DECIMAL_COMPARISON(>, decimal64)\n+  _DECLARE_DECIMAL_COMPARISON(>, decimal128)\n+\n+  _DECLARE_DECIMAL_COMPARISON(>=, decimal32)\n+  _DECLARE_DECIMAL_COMPARISON(>=, decimal64)\n+  _DECLARE_DECIMAL_COMPARISON(>=, decimal128)\n+\n+#undef _DECLARE_DECIMAL_COMPARISON\n+\n+  /// 3.2.2  Class decimal32.\n+  class decimal32\n+  {\n+  public:\n+    typedef float __decfloat32 __attribute__((mode(SD)));\n+\n+    // 3.2.2.2  Construct/copy/destroy.\n+    decimal32()\t\t\t\t\t: __val(0.e-101DF) {}\n+\n+    // 3.2.2.3  Conversion from floating-point type.\n+    explicit decimal32(decimal64 __d64);\n+    explicit decimal32(decimal128 __d128);\n+    explicit decimal32(float __r)\t\t: __val(__r) {}\n+    explicit decimal32(double __r)\t\t: __val(__r) {}\n+    explicit decimal32(long double __r)\t\t: __val(__r) {}\n+\n+    // 3.2.2.4  Conversion from integral type.\n+    decimal32(int __z)\t\t\t\t: __val(__z) {}\n+    decimal32(unsigned int __z)\t\t\t: __val(__z) {}\n+    decimal32(long __z)\t\t\t\t: __val(__z) {}\n+    decimal32(unsigned long __z)\t\t: __val(__z) {}\n+    decimal32(long long __z)\t\t\t: __val(__z) {}\n+    decimal32(unsigned long long __z)\t\t: __val(__z) {}\n+\n+    /// Conforming extension: Conversion from scalar decimal type.\n+    decimal32(__decfloat32 __z)\t\t\t: __val(__z) {}\n+\n+    // 3.2.2.5  Conversion to integral type. (DISABLED)\n+    //operator long long() const { return (long long)__val; }\n+\n+    // 3.2.2.6  Increment and decrement operators.\n+    decimal32& operator++()\n+    {\n+      __val += 1;\n+      return *this;\n+    }\n+\n+    decimal32 operator++(int)\n+    {\n+      decimal32 __tmp = *this;\n+      __val += 1;\n+      return __tmp;\n+    }\n+\n+    decimal32& operator--()\n+    {\n+      __val -= 1;\n+      return *this;\n+    }\n+\n+    decimal32   operator--(int)\n+    {\n+      decimal32 __tmp = *this;\n+      __val -= 1;\n+      return __tmp;\n+    }\n+\n+    // 3.2.2.7  Compound assignment.\n+#define _DECLARE_DECIMAL32_COMPOUND_ASSIGNMENT(_Op)\t\\\n+    decimal32& operator _Op(decimal32 __rhs);\t\t\\\n+    decimal32& operator _Op(decimal64 __rhs);\t\t\\\n+    decimal32& operator _Op(decimal128 __rhs);\t\t\\\n+    decimal32& operator _Op(int __rhs);\t\t\t\\\n+    decimal32& operator _Op(unsigned int __rhs);\t\\\n+    decimal32& operator _Op(long __rhs);\t\t\\\n+    decimal32& operator _Op(unsigned long __rhs);\t\\\n+    decimal32& operator _Op(long long __rhs);\t\t\\\n+    decimal32& operator _Op(unsigned long long __rhs);\n+\n+    _DECLARE_DECIMAL32_COMPOUND_ASSIGNMENT(+=)\n+    _DECLARE_DECIMAL32_COMPOUND_ASSIGNMENT(-=)\n+    _DECLARE_DECIMAL32_COMPOUND_ASSIGNMENT(*=)\n+    _DECLARE_DECIMAL32_COMPOUND_ASSIGNMENT(/=)\n+#undef _DECLARE_DECIMAL32_COMPOUND_ASSIGNMENT\n+\n+  private:\n+    __decfloat32 __val;\n+\n+  public:\n+    __decfloat32 __getval(void) { return __val; }\n+    void __setval(__decfloat32 __x) { __val = __x; }\n+  };\n+\n+  /// 3.2.3  Class decimal64.\n+  class decimal64\n+  {\n+  public:\n+    typedef float __decfloat64 __attribute__((mode(DD)));\n+\n+    // 3.2.3.2  Construct/copy/destroy.\n+    decimal64()\t\t\t\t\t: __val(0.e-398dd) {}\n+\n+    // 3.2.3.3  Conversion from floating-point type.\n+\t     decimal64(decimal32 d32);\n+    explicit decimal64(decimal128 d128);\n+    explicit decimal64(float __r)\t\t: __val(__r) {}\n+    explicit decimal64(double __r)\t\t: __val(__r) {}\n+    explicit decimal64(long double __r)\t\t: __val(__r) {}\n+\n+    // 3.2.3.4  Conversion from integral type.\n+    decimal64(int __z)\t\t\t\t: __val(__z) {}\n+    decimal64(unsigned int __z)\t\t\t: __val(__z) {}\n+    decimal64(long __z)\t\t\t\t: __val(__z) {}\n+    decimal64(unsigned long __z)\t\t: __val(__z) {}\n+    decimal64(long long __z)\t\t\t: __val(__z) {}\n+    decimal64(unsigned long long __z)\t\t: __val(__z) {}\n+\n+    /// Conforming extension: Conversion from scalar decimal type.\n+    decimal64(__decfloat64 __z)\t\t\t: __val(__z) {}\n+\n+    // 3.2.3.5  Conversion to integral type. (DISABLED)\n+    //operator long long() const { return (long long)__val; }\n+\n+    // 3.2.3.6  Increment and decrement operators.\n+    decimal64& operator++()\n+    {\n+      __val += 1;\n+      return *this;\n+    }\n+\n+    decimal64 operator++(int)\n+    {\n+      decimal64 __tmp = *this;\n+      __val += 1;\n+      return __tmp;\n+    }\n+\n+    decimal64& operator--()\n+    {\n+      __val -= 1;\n+      return *this;\n+    }\n+\n+    decimal64 operator--(int)\n+    {\n+      decimal64 __tmp = *this;\n+      __val -= 1;\n+      return __tmp;\n+    }\n+\n+    // 3.2.3.7  Compound assignment.\n+#define _DECLARE_DECIMAL64_COMPOUND_ASSIGNMENT(_Op)\t\\\n+    decimal64& operator _Op(decimal32 __rhs);\t\t\\\n+    decimal64& operator _Op(decimal64 __rhs);\t\t\\\n+    decimal64& operator _Op(decimal128 __rhs);\t\t\\\n+    decimal64& operator _Op(int __rhs);\t\t\t\\\n+    decimal64& operator _Op(unsigned int __rhs);\t\\\n+    decimal64& operator _Op(long __rhs);\t\t\\\n+    decimal64& operator _Op(unsigned long __rhs);\t\\\n+    decimal64& operator _Op(long long __rhs);\t\t\\\n+    decimal64& operator _Op(unsigned long long __rhs);\n+\n+    _DECLARE_DECIMAL64_COMPOUND_ASSIGNMENT(+=)\n+    _DECLARE_DECIMAL64_COMPOUND_ASSIGNMENT(-=)\n+    _DECLARE_DECIMAL64_COMPOUND_ASSIGNMENT(*=)\n+    _DECLARE_DECIMAL64_COMPOUND_ASSIGNMENT(/=)\n+#undef _DECLARE_DECIMAL64_COMPOUND_ASSIGNMENT\n+\n+  private:\n+    __decfloat64 __val;\n+\n+  public:\n+    __decfloat64 __getval(void) { return __val; }\n+    void __setval(__decfloat64 __x) { __val = __x; }\n+  };\n+\n+  /// 3.2.4  Class decimal128.\n+  class decimal128\n+  {\n+  public:\n+    typedef float __decfloat128 __attribute__((mode(TD)));\n+\n+    // 3.2.4.2  Construct/copy/destroy.\n+    decimal128()\t\t\t\t: __val(0.e-6176DL) {}\n+\n+    // 3.2.4.3  Conversion from floating-point type.\n+\t     decimal128(decimal32 d32);\n+\t     decimal128(decimal64 d64);\n+    explicit decimal128(float __r)\t\t: __val(__r) {}\n+    explicit decimal128(double __r)\t\t: __val(__r) {}\n+    explicit decimal128(long double __r)\t: __val(__r) {}\n+\n+\n+    // 3.2.4.4  Conversion from integral type.\n+    decimal128(int __z)\t\t\t\t: __val(__z) {}\n+    decimal128(unsigned int __z)\t\t: __val(__z) {}\n+    decimal128(long __z)\t\t\t: __val(__z) {}\n+    decimal128(unsigned long __z)\t\t: __val(__z) {}\n+    decimal128(long long __z)\t\t\t: __val(__z) {}\n+    decimal128(unsigned long long __z)\t\t: __val(__z) {}\n+\n+    /// Conforming extension: Conversion from scalar decimal type.\n+    decimal128(__decfloat128 __z)\t\t: __val(__z) {}\n+\n+    // 3.2.4.5  Conversion to integral type. (DISABLED)\n+    //operator long long() const { return (long long)__val; }\n+\n+    // 3.2.4.6  Increment and decrement operators.\n+    decimal128& operator++()\n+    {\n+      __val += 1;\n+      return *this;\n+    }\n+\n+    decimal128 operator++(int)\n+    {\n+      decimal128 __tmp = *this;\n+      __val += 1;\n+      return __tmp;\n+    }\n+\n+    decimal128& operator--()\n+    {\n+      __val -= 1;\n+      return *this;\n+    }\n+\n+    decimal128   operator--(int)\n+    {\n+      decimal128 __tmp = *this;\n+      __val -= 1;\n+      return __tmp;\n+    }\n+\n+    // 3.2.4.7  Compound assignment.\n+#define _DECLARE_DECIMAL128_COMPOUND_ASSIGNMENT(_Op)\t\\\n+    decimal128& operator _Op(decimal32 __rhs);\t\t\\\n+    decimal128& operator _Op(decimal64 __rhs);\t\t\\\n+    decimal128& operator _Op(decimal128 __rhs);\t\t\\\n+    decimal128& operator _Op(int __rhs);\t\t\\\n+    decimal128& operator _Op(unsigned int __rhs);\t\\\n+    decimal128& operator _Op(long __rhs);\t\t\\\n+    decimal128& operator _Op(unsigned long __rhs);\t\\\n+    decimal128& operator _Op(long long __rhs);\t\t\\\n+    decimal128& operator _Op(unsigned long long __rhs);\n+\n+    _DECLARE_DECIMAL128_COMPOUND_ASSIGNMENT(+=)\n+    _DECLARE_DECIMAL128_COMPOUND_ASSIGNMENT(-=)\n+    _DECLARE_DECIMAL128_COMPOUND_ASSIGNMENT(*=)\n+    _DECLARE_DECIMAL128_COMPOUND_ASSIGNMENT(/=)\n+#undef _DECLARE_DECIMAL128_COMPOUND_ASSIGNMENT\n+\n+  private:\n+    __decfloat128 __val;\n+\n+  public:\n+    __decfloat128 __getval(void) { return __val; }\n+    void __setval(__decfloat128 __x) { __val = __x; }\n+  };\n+\n+#define _GLIBCXX_USE_DECIMAL_ 1\n+\n+} // namespace decimal\n+  // @} group decimal\n+} // namespace std\n+\n+#include <decimal/decimal.h>\n+\n+#endif /* _GLIBCXX_DECIMAL */"}, {"sha": "002f6ca9b5207c8660efb3c598672ee9b0f9157b", "filename": "libstdc++-v3/include/decimal/decimal.h", "status": "added", "additions": 519, "deletions": 0, "changes": 519, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,519 @@\n+// decimal classes -*- C++ -*-\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/decimal.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+// ISO/IEC TR 24733\n+// Written by Janis Johnson <janis187@us.ibm.com>\n+\n+#ifndef _GLIBCXX_DECIMAL_IMPL\n+#define _GLIBCXX_DECIMAL_IMPL 1\n+\n+#pragma GCC system_header\n+\n+namespace std\n+{\n+namespace decimal\n+{\n+  // ISO/IEC TR 24733  3.2.[234].1  Construct/copy/destroy.\n+\n+  inline decimal32::decimal32(decimal64 r)\t: __val(r.__getval()) {}\n+  inline decimal32::decimal32(decimal128 r)\t: __val(r.__getval()) {}\n+  inline decimal64::decimal64(decimal32 r)\t: __val(r.__getval()) {}\n+  inline decimal64::decimal64(decimal128 r)\t: __val(r.__getval()) {}\n+  inline decimal128::decimal128(decimal32 r)\t: __val(r.__getval()) {}\n+  inline decimal128::decimal128(decimal64 r)\t: __val(r.__getval()) {}\n+\n+  // ISO/IEC TR 24733  3.2.[234].6  Compound assignment.\n+\n+#define _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC(_Op1, _Op2, _T1, _T2)\t\\\n+  inline _T1& _T1::operator _Op1(_T2 __rhs)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    __setval(__getval() _Op2 __rhs.__getval());\t\t\t\t\\\n+    return *this;\t\t\t\t\t\t\t\\\n+  }\n+\n+#define _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_Op1, _Op2, _T1, _T2)\t\\\n+  inline _T1& _T1::operator _Op1(_T2 __rhs)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    __setval(__getval() _Op2 __rhs);\t\t\t\t\t\\\n+    return *this;\t\t\t\t\t\t\t\\\n+  }\n+\n+#define _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(_O1, _O2, _T1)\t\t\\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC(_O1,_O2,_T1, decimal32)\t\\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC(_O1,_O2,_T1, decimal64)\t\\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC(_O1,_O2,_T1, decimal128)\t\\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_O1,_O2,_T1, int)\t\t\\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_O1,_O2,_T1, unsigned int)\t\\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_O1,_O2,_T1, long)\t\t\\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_O1,_O2,_T1, unsigned long)\t\\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_O1,_O2,_T1, long long)\t\\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_O1,_O2,_T1, unsigned long long)\n+\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(+=, +, decimal32)\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(-=, -, decimal32)\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(*=, *, decimal32)\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(/=, /, decimal32)\n+\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(+=, +, decimal64)\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(-=, -, decimal64)\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(*=, *, decimal64)\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(/=, /, decimal64)\n+\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(+=, +, decimal128)\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(-=, -, decimal128)\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(*=, *, decimal128)\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(/=, /, decimal128)\n+\n+#undef _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC\n+#undef _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT\n+#undef _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS\n+\n+  // Extension: Conversion to integral type.\n+\n+  inline long long decimal32_to_long_long(decimal32 __d)\n+  {\n+    return (long long)__d.__getval();\n+  }\n+\n+  inline long long decimal64_to_long_long(decimal64 __d)\n+  {\n+    return (long long)__d.__getval();\n+  }\n+\n+  inline long long decimal128_to_long_long(decimal128 __d)\n+  {\n+    return (long long)__d.__getval();\n+  }\n+\n+  inline long long decimal_to_long_long(decimal32 __d)\n+  {\n+    return (long long)__d.__getval();\n+  }\n+\n+  inline long long decimal_to_long_long(decimal64 __d)\n+  {\n+    return (long long)__d.__getval();\n+  }\n+\n+  inline long long decimal_to_long_long(decimal128 __d)\n+  {\n+    return (long long)__d.__getval();\n+  }\n+\n+  // ISO/IEC TR 24733  3.2.5  Initialization from coefficient and exponent.\n+\n+  static decimal32 make_decimal32(long long __coeff, int __exponent)\n+  {\n+    decimal32 __decexp = 1, __multiplier;\n+\n+    if (__exponent < 0)\n+      {\n+\t__multiplier = 1.E-1DF;\n+\t__exponent = -__exponent;\n+      }\n+    else\n+      __multiplier = 1.E1DF;\n+\n+    for (int i = 0; i < __exponent; i++)\n+      __decexp *= __multiplier;\n+\n+    return __coeff * __decexp;\n+  }\n+\n+  static decimal32 make_decimal32(unsigned long long __coeff, int __exponent)\n+  {\n+    decimal32 __decexp = 1, __multiplier;\n+\n+    if (__exponent < 0)\n+      {\n+\t__multiplier = 1.E-1DF;\n+\t__exponent = -__exponent;\n+      }\n+    else\n+      __multiplier = 1.E1DF;\n+\n+    for (int i = 0; i < __exponent; i++)\n+      __decexp *= __multiplier;\n+\n+    return __coeff * __decexp;\n+  }\n+\n+  static decimal64 make_decimal64(long long __coeff, int __exponent)\n+  {\n+    decimal64 __decexp = 1, __multiplier;\n+\n+    if (__exponent < 0)\n+      {\n+\t__multiplier = 1.E-1DD;\n+\t__exponent = -__exponent;\n+      }\n+    else\n+      __multiplier = 1.E1DD;\n+\n+    for (int i = 0; i < __exponent; i++)\n+      __decexp *= __multiplier;\n+\n+    return __coeff * __decexp;\n+  }\n+\n+  static decimal64 make_decimal64(unsigned long long __coeff, int __exponent)\n+  {\n+    decimal64 __decexp = 1, __multiplier;\n+\n+    if (__exponent < 0)\n+      {\n+\t__multiplier = 1.E-1DD;\n+\t__exponent = -__exponent;\n+      }\n+    else\n+      __multiplier = 1.E1DD;\n+\n+    for (int i = 0; i < __exponent; i++)\n+      __decexp *= __multiplier;\n+\n+    return __coeff * __decexp;\n+  }\n+\n+  static decimal128 make_decimal128(long long __coeff, int __exponent)\n+  {\n+    decimal128 __decexp = 1, __multiplier;\n+\n+    if (__exponent < 0)\n+      {\n+\t__multiplier = 1.E-1DL;\n+\t__exponent = -__exponent;\n+      }\n+    else\n+      __multiplier = 1.E1DL;\n+\n+    for (int i = 0; i < __exponent; i++)\n+      __decexp *= __multiplier;\n+\n+    return __coeff * __decexp;\n+  }\n+\n+  static decimal128 make_decimal128(unsigned long long __coeff, int __exponent)\n+  {\n+    decimal128 __decexp = 1, __multiplier;\n+\n+    if (__exponent < 0)\n+      {\n+\t__multiplier = 1.E-1DL;\n+\t__exponent = -__exponent;\n+      }\n+    else\n+      __multiplier = 1.E1DL;\n+\n+    for (int i = 0; i < __exponent; i++)\n+      __decexp *= __multiplier;\n+\n+    return __coeff * __decexp;\n+  }\n+\n+  // ISO/IEC TR 24733  3.2.6  Conversion to generic floating-point type.\n+\n+  inline float decimal32_to_float(decimal32 __d)\n+  {\n+    return (float)__d.__getval();\n+  }\n+\n+  inline float decimal64_to_float(decimal64 __d)\n+  {\n+    return (float)__d.__getval();\n+  }\n+\n+  inline float decimal128_to_float(decimal128 __d)\n+  {\n+    return (float)__d.__getval();\n+  }\n+\n+  inline float decimal_to_float(decimal32 __d)\n+  {\n+    return (float)__d.__getval();\n+  }\n+\n+  inline float decimal_to_float(decimal64 __d)\n+  {\n+    return (float)__d.__getval();\n+  }\n+\n+  inline float decimal_to_float(decimal128 __d)\n+  {\n+    return (float)__d.__getval();\n+  }\n+\n+  inline double decimal32_to_double(decimal32 __d)\n+  {\n+    return (double)__d.__getval();\n+  }\n+\n+  inline double decimal64_to_double(decimal64 __d)\n+  {\n+    return (double)__d.__getval();\n+  }\n+\n+  inline double decimal128_to_double(decimal128 __d)\n+  {\n+    return (double)__d.__getval();\n+  }\n+\n+  inline double decimal_to_double(decimal32 __d)\n+  {\n+    return (double)__d.__getval();\n+  }\n+\n+  inline double decimal_to_double(decimal64 __d)\n+  {\n+    return (double)__d.__getval();\n+  }\n+\n+  inline double decimal_to_double(decimal128 __d)\n+  {\n+    return (double)__d.__getval();\n+  }\n+\n+  inline long double decimal32_to_long_double(decimal32 __d)\n+  {\n+    return (long double)__d.__getval();\n+  }\n+\n+  inline long double decimal64_to_long_double(decimal64 __d)\n+  {\n+    return (long double)__d.__getval();\n+  }\n+\n+  inline long double decimal128_to_long_double(decimal128 __d)\n+  {\n+    return (long double)__d.__getval();\n+  }\n+\n+  inline long double decimal_to_long_double(decimal32 __d)\n+  {\n+    return (long double)__d.__getval();\n+  }\n+\n+  inline long double decimal_to_long_double(decimal64 __d)\n+  {\n+    return (long double)__d.__getval();\n+  }\n+\n+  inline long double decimal_to_long_double(decimal128 __d)\n+  {\n+    return (long double)__d.__getval();\n+  }\n+\n+  // ISO/IEC TR 24733  3.2.7  Unary arithmetic operators.\n+\n+#define _DEFINE_DECIMAL_UNARY_OP(_Op, _T)\t\\\n+  inline _T operator _Op(_T __rhs)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    _T __tmp;\t\t\t\t\t\\\n+    __tmp.__setval(0 _Op __rhs.__getval());\t\\\n+    return __tmp;\t\t\t\t\\\n+  }\n+\n+  _DEFINE_DECIMAL_UNARY_OP(+, decimal32)\n+  _DEFINE_DECIMAL_UNARY_OP(+, decimal64)\n+  _DEFINE_DECIMAL_UNARY_OP(+, decimal128)\n+  _DEFINE_DECIMAL_UNARY_OP(-, decimal32)\n+  _DEFINE_DECIMAL_UNARY_OP(-, decimal64)\n+  _DEFINE_DECIMAL_UNARY_OP(-, decimal128)\n+\n+#undef _DEFINE_DECIMAL_UNARY_OP\n+\n+  // ISO/IEC TR 24733  3.2.8  Binary arithmetic operators.\n+\n+#define _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(_Op, _T1, _T2, _T3)\t\\\n+  inline _T1 operator _Op(_T2 lhs, _T3 __rhs)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    _T1 retval;\t\t\t\t\t\t\t\\\n+    retval.__setval(lhs.__getval() _Op __rhs.__getval());\t\\\n+    return retval;\t\t\t\t\t\t\\\n+  }\n+\n+#define _DEFINE_DECIMAL_BINARY_OP_BOTH(_Op, _T1, _T2, _T3)\t\\\n+  inline _T1 operator _Op(_T2 lhs, _T3 __rhs)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    _T1 retval;\t\t\t\t\t\t\t\\\n+    retval.__setval(lhs.__getval() _Op __rhs.__getval());\t\\\n+    return retval;\t\t\t\t\t\t\\\n+  }\n+\n+#define _DEFINE_DECIMAL_BINARY_OP_LHS(_Op, _T1, _T2)\t\t\\\n+  inline _T1 operator _Op(_T1 lhs, _T2 __rhs)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    _T1 retval;\t\t\t\t\t\t\t\\\n+    retval.__setval(lhs.__getval() _Op __rhs);\t\t\t\\\n+    return retval;\t\t\t\t\t\t\\\n+  }\n+\n+#define _DEFINE_DECIMAL_BINARY_OP_RHS(_Op, _T1, _T2)\t\t\\\n+  inline _T1 operator _Op(_T2 lhs, _T1 __rhs)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    _T1 retval;\t\t\t\t\t\t\t\\\n+    retval.__setval(lhs _Op __rhs.__getval());\t\t\t\\\n+    return retval;\t\t\t\t\t\t\\\n+  }\n+\n+#define _DEFINE_DECIMAL_BINARY_OP_WITH_INT(_Op,_Tp)\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op,_Tp, int);\t\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op,_Tp, unsigned int);\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op,_Tp, long);\t\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op,_Tp, unsigned long);\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op,_Tp, long long);\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op,_Tp, unsigned long long);\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op,_Tp, int);\t\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op,_Tp, unsigned int);\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op,_Tp, long);\t\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op,_Tp, unsigned long);\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op,_Tp, long long);\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op,_Tp, unsigned long long);\t\\\n+\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal32, decimal32, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_INT(+, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal64, decimal32, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal64, decimal64, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal64, decimal64, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_INT(+, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal128, decimal32, decimal128)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal128, decimal64, decimal128)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal128, decimal128, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal128, decimal128, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal128, decimal128, decimal128)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_INT(+, decimal128)\n+\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal32, decimal32, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_INT(-, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal64, decimal32, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal64, decimal64, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal64, decimal64, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_INT(-, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal128, decimal32, decimal128)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal128, decimal64, decimal128)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal128, decimal128, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal128, decimal128, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(-, decimal128, decimal128, decimal128)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_INT(-, decimal128)\n+\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal32, decimal32, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_INT(*, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal64, decimal32, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal64, decimal64, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal64, decimal64, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_INT(*, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal128, decimal32, decimal128)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal128, decimal64, decimal128)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal128, decimal128, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal128, decimal128, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(*, decimal128, decimal128, decimal128)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_INT(*, decimal128)\n+\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal32, decimal32, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_INT(/, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal64, decimal32, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal64, decimal64, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal64, decimal64, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_INT(/, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal128, decimal32, decimal128)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal128, decimal64, decimal128)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal128, decimal128, decimal32)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal128, decimal128, decimal64)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(/, decimal128, decimal128, decimal128)\n+  _DEFINE_DECIMAL_BINARY_OP_WITH_INT(/, decimal128)\n+\n+#undef _DEFINE_DECIMAL_BINARY_OP_WITH_DEC\n+#undef _DEFINE_DECIMAL_BINARY_OP_BOTH\n+#undef _DEFINE_DECIMAL_BINARY_OP_LHS\n+#undef _DEFINE_DECIMAL_BINARY_OP_RHS\n+#undef _DEFINE_DECIMAL_BINARY_OP_WITH_INT\n+\n+  // ISO/IEC TR 24733  3.2.9  Comparison operators.\n+\n+#define _DEFINE_DECIMAL_COMPARISON_BOTH(_Op, _T1, _T2)\t\\\n+  inline bool operator _Op(_T1 lhs, _T2 __rhs)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return lhs.__getval() _Op __rhs.__getval();\t\t\\\n+  }\n+\n+#define _DEFINE_DECIMAL_COMPARISON_LHS(_Op, _T1, _T2)\t\\\n+  inline bool operator _Op(_T1 lhs, _T2 __rhs)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return lhs.__getval() _Op __rhs;\t\t\t\\\n+  }\n+#define _DEFINE_DECIMAL_COMPARISON_RHS(_Op, _T1, _T2)\t\\\n+  inline bool operator _Op(_T1 lhs, _T2 __rhs)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return lhs _Op __rhs.__getval();\t\t\t\\\n+  }\n+\n+#define _DEFINE_DECIMAL_COMPARISONS(_Op, _Tp)\t\t\t\\\n+  _DEFINE_DECIMAL_COMPARISON_BOTH(_Op, _Tp, decimal32)\t\t\\\n+  _DEFINE_DECIMAL_COMPARISON_BOTH(_Op, _Tp, decimal64)\t\t\\\n+  _DEFINE_DECIMAL_COMPARISON_BOTH(_Op, _Tp, decimal128)\t\t\\\n+  _DEFINE_DECIMAL_COMPARISON_LHS(_Op, _Tp, int)\t\t\t\\\n+  _DEFINE_DECIMAL_COMPARISON_LHS(_Op, _Tp, unsigned int)\t\\\n+  _DEFINE_DECIMAL_COMPARISON_LHS(_Op, _Tp, long)\t\t\\\n+  _DEFINE_DECIMAL_COMPARISON_LHS(_Op, _Tp, unsigned long)\t\\\n+  _DEFINE_DECIMAL_COMPARISON_LHS(_Op, _Tp, long long)\t\t\\\n+  _DEFINE_DECIMAL_COMPARISON_LHS(_Op, _Tp, unsigned long long)\t\\\n+  _DEFINE_DECIMAL_COMPARISON_RHS(_Op, int, _Tp)\t\t\t\\\n+  _DEFINE_DECIMAL_COMPARISON_RHS(_Op, unsigned int, _Tp)\t\\\n+  _DEFINE_DECIMAL_COMPARISON_RHS(_Op, long, _Tp)\t\t\\\n+  _DEFINE_DECIMAL_COMPARISON_RHS(_Op, unsigned long, _Tp)\t\\\n+  _DEFINE_DECIMAL_COMPARISON_RHS(_Op, long long, _Tp)\t\t\\\n+  _DEFINE_DECIMAL_COMPARISON_RHS(_Op, unsigned long long, _Tp)\n+\n+  _DEFINE_DECIMAL_COMPARISONS(==, decimal32)\n+  _DEFINE_DECIMAL_COMPARISONS(==, decimal64)\n+  _DEFINE_DECIMAL_COMPARISONS(==, decimal128)\n+  _DEFINE_DECIMAL_COMPARISONS(!=, decimal32)\n+  _DEFINE_DECIMAL_COMPARISONS(!=, decimal64)\n+  _DEFINE_DECIMAL_COMPARISONS(!=, decimal128)\n+  _DEFINE_DECIMAL_COMPARISONS(<,  decimal32)\n+  _DEFINE_DECIMAL_COMPARISONS(<,  decimal64)\n+  _DEFINE_DECIMAL_COMPARISONS(<,  decimal128)\n+  _DEFINE_DECIMAL_COMPARISONS(<=, decimal32)\n+  _DEFINE_DECIMAL_COMPARISONS(<=, decimal64)\n+  _DEFINE_DECIMAL_COMPARISONS(<=, decimal128)\n+  _DEFINE_DECIMAL_COMPARISONS(>,  decimal32)\n+  _DEFINE_DECIMAL_COMPARISONS(>,  decimal64)\n+  _DEFINE_DECIMAL_COMPARISONS(>,  decimal128)\n+  _DEFINE_DECIMAL_COMPARISONS(>=, decimal32)\n+  _DEFINE_DECIMAL_COMPARISONS(>=, decimal64)\n+  _DEFINE_DECIMAL_COMPARISONS(>=, decimal128)\n+\n+#undef _DEFINE_DECIMAL_COMPARISON_BOTH\n+#undef _DEFINE_DECIMAL_COMPARISON_LHS\n+#undef _DEFINE_DECIMAL_COMPARISON_RHS\n+#undef _DEFINE_DECIMAL_COMPARISONS\n+\n+} // namespace decimal\n+} // namespace std\n+\n+#endif /* _GLIBCXX_DECIMAL_IMPL */"}, {"sha": "26dbf0da1ec03b01817028b5349dffd2aace6d80", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -10,12 +10,12 @@\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation; either version 3, or (at your option)\n // any later version.\n-// \n+//\n // GCC is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n-// \n+//\n // Under Section 7 of GPL version 3, you are granted additional\n // permissions described in the GCC Runtime Library Exception, version\n // 3.1, as published by the Free Software Foundation.\n@@ -38,7 +38,7 @@\n \n extern \"C++\" {\n \n-namespace std \n+namespace std\n {\n   /**\n    * @defgroup exceptions Exceptions\n@@ -56,7 +56,7 @@ namespace std\n    *  your own %exception classes, or use a different hierarchy, or to\n    *  throw non-class data (e.g., fundamental types).\n    */\n-  class exception \n+  class exception\n   {\n   public:\n     exception() throw() { }\n@@ -69,7 +69,7 @@ namespace std\n \n   /** If an %exception is thrown which is not listed in a function's\n    *  %exception specification, one of these may be thrown.  */\n-  class bad_exception : public exception \n+  class bad_exception : public exception\n   {\n   public:\n     bad_exception() throw() { }\n@@ -119,10 +119,10 @@ namespace std\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n-  /** \n+  /**\n    *  @brief A replacement for the standard terminate_handler which\n    *  prints more information about the terminating exception (if any)\n-   *  on stderr.  \n+   *  on stderr.\n    *\n    *  @ingroup exceptions\n    *\n@@ -138,7 +138,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   void __verbose_terminate_handler();\n \n _GLIBCXX_END_NAMESPACE\n-  \n+\n } // extern \"C++\"\n \n #pragma GCC visibility pop"}, {"sha": "f4a0bcd80e0d5eb2d1f0410de48a5c51cf93b241", "filename": "libstdc++-v3/scripts/create_testsuite_files", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -32,7 +32,7 @@ cd $srcdir\n # This is the ugly version of \"everything but the current directory\".  It's\n # what has to happen when find(1) doesn't support -mindepth, or -xtype.\n dlist=`echo [0-9][0-9]*`\n-dlist=\"$dlist abi backward ext performance tr1\"\n+dlist=\"$dlist abi backward ext performance tr1 decimal\"\n find $dlist \"(\" -type f -o -type l \")\" -name \"*.cc\" -print > $tmp.01\n find $dlist \"(\" -type f -o -type l \")\" -name \"*.c\" -print > $tmp.02\n cat  $tmp.01 $tmp.02 | sort > $tmp.1"}, {"sha": "cae3d6c07fe0daee4e877eae52b037c820d65268", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -299,7 +299,7 @@ libgomp_flags = -B${glibcxx_builddir}/../libgomp \\\n atomic_flags = $(ATOMIC_FLAGS)\n parallel_flags = \"unix/-D_GLIBCXX_PARALLEL/-fopenmp\"\n \n-# Runs the testsuite in profile\n+# Runs the testsuite in profile mode.\n profile_flags = \"unix/-D_GLIBCXX_PROFILE\"\n \n # By adding these files here, automake will remove them for 'make clean'\n@@ -652,7 +652,7 @@ check-profile: site.exp\n \tfi; \\\n \tsrcdir=`$(am__cd) $(srcdir) && pwd`; export srcdir; \\\n \tEXPECT=$(EXPECT); export EXPECT; \\\n-\t$(MAKE) CXXFLAGS=\"$(atomic_flags)\" RUNTESTFLAGS=\"$(RUNTESTFLAGS) conformance.exp --outdir $${outputdir} --objdir $${outputdir} --target_board=$(profile_flags)\" check-DEJAGNU; )\n+\t$(MAKE) CXXFLAGS=\"$(atomic_flags) \" RUNTESTFLAGS=\"$(RUNTESTFLAGS) conformance.exp --outdir $${outputdir} --objdir $${outputdir} --target_board=$(profile_flags)\" check-DEJAGNU; )\n \n .PHONY: baseline_symbols new-abi-baseline \\\n \tcheck-abi check-compile check-performance check-parallel check-profile"}, {"sha": "e613ff08fa0f39af09d6f49acca698bb77384f93", "filename": "libstdc++-v3/testsuite/decimal/binary-arith.cc", "status": "added", "additions": 372, "deletions": 0, "changes": 372, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fbinary-arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fbinary-arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fbinary-arith.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,372 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.8  Binary arithmetic operators.\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+decimal32 d32 (5);\n+decimal64 d64 (-10);\n+decimal128 d128 (25);\n+int si = -20;\n+unsigned int ui = 50;\n+long sl = -10;\n+unsigned long ul = 20;\n+long long sll = -25;\n+unsigned long long ull = 50;\n+\n+void\n+binary_add_32 (void)\n+{\n+  decimal32 a (1000), b;\n+\n+  b = si + a;   VERIFY (b == 980);\n+  b = ui + a;   VERIFY (b == 1050);\n+  b = sl + a;   VERIFY (b == 990);\n+  b = ul + a;   VERIFY (b == 1020);\n+  b = sll + a;  VERIFY (b == 975);\n+  b = ull + a;  VERIFY (b == 1050);\n+  b = d32 + a;  VERIFY (b == 1005);\n+  b = (decimal32)(d64 + a);  VERIFY (b == 990);\n+  b = (decimal32)(d128 + a); VERIFY (b == 1025);\n+\n+  b = a + si;   VERIFY (b == 980);\n+  b = a + ui;   VERIFY (b == 1050);\n+  b = a + sl;   VERIFY (b == 990);\n+  b = a + ul;   VERIFY (b == 1020);\n+  b = a + sll;  VERIFY (b == 975);\n+  b = a + ull;  VERIFY (b == 1050);\n+  b = a + d32;  VERIFY (b == 1005);\n+  b = (decimal32)(a + d64);  VERIFY (b == 990);\n+  b = (decimal32)(a + d128); VERIFY (b == 1025);\n+}\n+\n+void\n+binary_subtract_32 (void)\n+{\n+  decimal32 a (1000), b;\n+\n+  b = a - si;   VERIFY (b == 1020);\n+  b = a - ui;   VERIFY (b == 950);\n+  b = a - sl;   VERIFY (b == 1010);\n+  b = a - ul;   VERIFY (b == 980);\n+  b = a - sll;  VERIFY (b == 1025);\n+  b = a - ull;  VERIFY (b == 950);\n+  b = a - d32;  VERIFY (b == 995);\n+  b = (decimal32)(a - d64);  VERIFY (b == 1010);\n+  b = (decimal32)(a - d128); VERIFY (b == 975);\n+\n+  a = -1000;\n+  b = si - a;   VERIFY (b == 980);\n+  b = ui - a;   VERIFY (b == 1050);\n+  b = sl - a;   VERIFY (b == 990);\n+  b = ul - a;   VERIFY (b == 1020);\n+  b = sll - a;  VERIFY (b == 975);\n+  b = ull - a;  VERIFY (b == 1050);\n+  b = d32 - a;  VERIFY (b == 1005);\n+  b = (decimal32)(d64 - a);  VERIFY (b == 990);\n+  b = (decimal32)(d128 - a); VERIFY (b == 1025);\n+}\n+\n+void\n+binary_multiply_32 (void)\n+{\n+  decimal32 a (1000), b;\n+\n+  b = a * si;   VERIFY (b == -20000);\n+  b = a * ui;   VERIFY (b == 50000);\n+  b = a * sl;   VERIFY (b == -10000);\n+  b = a * ul;   VERIFY (b == 20000);\n+  b = a * sll;  VERIFY (b == -25000);\n+  b = a * ull;  VERIFY (b == 50000);\n+  b = a * d32;  VERIFY (b == 5000);\n+  b = (decimal32)(a * d64);  VERIFY (b == -10000);\n+  b = (decimal32)(a * d128); VERIFY (b == 25000);\n+\n+  b = si * a;   VERIFY (b == -20000);\n+  b = ui * a;   VERIFY (b == 50000);\n+  b = sl * a;   VERIFY (b == -10000);\n+  b = ul * a;   VERIFY (b == 20000);\n+  b = sll * a;  VERIFY (b == -25000);\n+  b = ull * a;  VERIFY (b == 50000);\n+  b = d32 * a;  VERIFY (b == 5000);\n+  b = (decimal32)(d64 * a);  VERIFY (b == -10000);\n+  b = (decimal32)(d128 * a); VERIFY (b == 25000);\n+}\n+\n+void\n+binary_divide_32 (void)\n+{\n+  decimal32 a (1000), b;\n+\n+  b = a / si;   VERIFY (b == -50);\n+  b = a / ui;   VERIFY (b == 20);\n+  b = a / sl;   VERIFY (b == -100);\n+  b = a / ul;   VERIFY (b == 50);\n+  b = a / sll;  VERIFY (b == -40);\n+  b = a / ull;  VERIFY (b == 20);\n+  b = a / d32;  VERIFY (b == 200);\n+  b = (decimal32)(a / d64);  VERIFY (b == -100);\n+  b = (decimal32)(a / d128); VERIFY (b == 40);\n+\n+  a = 5;\n+  b = si / a;   VERIFY (b == -4);\n+  b = ui / a;   VERIFY (b == 10);\n+  b = sl / a;   VERIFY (b == -2);\n+  b = ul / a;   VERIFY (b == 4);\n+  b = sll / a;  VERIFY (b == -5);\n+  b = ull / a;  VERIFY (b == 10);\n+  b = d32 / a;  VERIFY (b == 1);\n+  b = (decimal32)(d64 / a);  VERIFY (b == -2);\n+  b = (decimal32)(d128 / a); VERIFY (b == 5);\n+}\n+\n+void\n+binary_add_64 (void)\n+{\n+  decimal64 a (1000), b;\n+\n+  b = a + si;   VERIFY (b == 980);\n+  b = a + ui;   VERIFY (b == 1050);\n+  b = a + sl;   VERIFY (b == 990);\n+  b = a + ul;   VERIFY (b == 1020);\n+  b = a + sll;  VERIFY (b == 975);\n+  b = a + ull;  VERIFY (b == 1050);\n+  b = a + d32;  VERIFY (b == 1005);\n+  b = a + d64;  VERIFY (b == 990);\n+  b = (decimal64)(a + d128); VERIFY (b == 1025);\n+\n+  b = a + si;   VERIFY (b == 980);\n+  b = a + ui;   VERIFY (b == 1050);\n+  b = a + sl;   VERIFY (b == 990);\n+  b = a + ul;   VERIFY (b == 1020);\n+  b = a + sll;  VERIFY (b == 975);\n+  b = a + ull;  VERIFY (b == 1050);\n+  b = a + d32;  VERIFY (b == 1005);\n+  b = a + d64;  VERIFY (b == 990);\n+  b = (decimal64)(a + d128); VERIFY (b == 1025);\n+}\n+\n+void\n+binary_subtract_64 (void)\n+{\n+  decimal64 a (1000), b;\n+\n+  b = a - si;   VERIFY (b == 1020);\n+  b = a - ui;   VERIFY (b == 950);\n+  b = a - sl;   VERIFY (b == 1010);\n+  b = a - ul;   VERIFY (b == 980);\n+  b = a - sll;  VERIFY (b == 1025);\n+  b = a - ull;  VERIFY (b == 950);\n+  b = a - d32;  VERIFY (b == 995);\n+  b = a - d64;  VERIFY (b == 1010);\n+  b = (decimal64)(a - d128); VERIFY (b == 975);\n+\n+  a = -1000;\n+  b = si - a;   VERIFY (b == 980);\n+  b = ui - a;   VERIFY (b == 1050);\n+  b = sl - a;   VERIFY (b == 990);\n+  b = ul - a;   VERIFY (b == 1020);\n+  b = sll - a;  VERIFY (b == 975);\n+  b = ull - a;  VERIFY (b == 1050);\n+  b = d32 - a;  VERIFY (b == 1005);\n+  b = d64 - a;  VERIFY (b == 990);\n+  b = (decimal64)(d128 - a); VERIFY (b == 1025);\n+}\n+\n+void\n+binary_multiply_64 (void)\n+{\n+  decimal64 a (1000), b;\n+\n+  b = a * si;   VERIFY (b == -20000);\n+  b = a * ui;   VERIFY (b == 50000);\n+  b = a * sl;   VERIFY (b == -10000);\n+  b = a * ul;   VERIFY (b == 20000);\n+  b = a * sll;  VERIFY (b == -25000);\n+  b = a * ull;  VERIFY (b == 50000);\n+  b = a * d32;  VERIFY (b == 5000);\n+  b = a * d64;  VERIFY (b == -10000);\n+  b = (decimal64)(a * d128); VERIFY (b == 25000);\n+\n+  b = si * a;   VERIFY (b == -20000);\n+  b = ui * a;   VERIFY (b == 50000);\n+  b = sl * a;   VERIFY (b == -10000);\n+  b = ul * a;   VERIFY (b == 20000);\n+  b = sll * a;  VERIFY (b == -25000);\n+  b = ull * a;  VERIFY (b == 50000);\n+  b = d32 * a;  VERIFY (b == 5000);\n+  b = d64 * a;  VERIFY (b == -10000);\n+  b = (decimal64)(d128 * a); VERIFY (b == 25000);\n+}\n+\n+void\n+binary_divide_64 (void)\n+{\n+  decimal64 a (1000), b;\n+\n+  b = a / si;   VERIFY (b == -50);\n+  b = a / ui;   VERIFY (b == 20);\n+  b = a / sl;   VERIFY (b == -100);\n+  b = a / ul;   VERIFY (b == 50);\n+  b = a / sll;  VERIFY (b == -40);\n+  b = a / ull;  VERIFY (b == 20);\n+  b = a / d32;  VERIFY (b == 200);\n+  b = a / d64;  VERIFY (b == -100);\n+  b = (decimal64)(a / d128); VERIFY (b == 40);\n+\n+  a = 5;\n+  b = si / a;   VERIFY (b == -4);\n+  b = ui / a;   VERIFY (b == 10);\n+  b = sl / a;   VERIFY (b == -2);\n+  b = ul / a;   VERIFY (b == 4);\n+  b = sll / a;  VERIFY (b == -5);\n+  b = ull / a;  VERIFY (b == 10);\n+  b = d32 / a;  VERIFY (b == 1);\n+  b = d64 / a;  VERIFY (b == -2);\n+  b = (decimal64)(d128 / a); VERIFY (b == 5);\n+}\n+\n+void\n+binary_add_128 (void)\n+{\n+  decimal128 a (1000), b;\n+\n+  b = a + si;   VERIFY (b == 980);\n+  b = a + ui;   VERIFY (b == 1050);\n+  b = a + sl;   VERIFY (b == 990);\n+  b = a + ul;   VERIFY (b == 1020);\n+  b = a + sll;  VERIFY (b == 975);\n+  b = a + ull;  VERIFY (b == 1050);\n+  b = a + d32;  VERIFY (b == 1005);\n+  b = a + d64;  VERIFY (b == 990);\n+  b = a + d128; VERIFY (b == 1025);\n+\n+  b = a + si;   VERIFY (b == 980);\n+  b = a + ui;   VERIFY (b == 1050);\n+  b = a + sl;   VERIFY (b == 990);\n+  b = a + ul;   VERIFY (b == 1020);\n+  b = a + sll;  VERIFY (b == 975);\n+  b = a + ull;  VERIFY (b == 1050);\n+  b = a + d32;  VERIFY (b == 1005);\n+  b = a + d64;  VERIFY (b == 990);\n+  b = a + d128; VERIFY (b == 1025);\n+}\n+\n+void\n+binary_subtract_128 (void)\n+{\n+  decimal128 a (1000), b;\n+\n+  b = a - si;   VERIFY (b == 1020);\n+  b = a - ui;   VERIFY (b == 950);\n+  b = a - sl;   VERIFY (b == 1010);\n+  b = a - ul;   VERIFY (b == 980);\n+  b = a - sll;  VERIFY (b == 1025);\n+  b = a - ull;  VERIFY (b == 950);\n+  b = a - d32;  VERIFY (b == 995);\n+  b = a - d64;  VERIFY (b == 1010);\n+  b = a - d128; VERIFY (b == 975);\n+\n+  a = -1000;\n+  b = si - a;   VERIFY (b == 980);\n+  b = ui - a;   VERIFY (b == 1050);\n+  b = sl - a;   VERIFY (b == 990);\n+  b = ul - a;   VERIFY (b == 1020);\n+  b = sll - a;  VERIFY (b == 975);\n+  b = ull - a;  VERIFY (b == 1050);\n+  b = d32 - a;  VERIFY (b == 1005);\n+  b = d64 - a;  VERIFY (b == 990);\n+  b = d128 - a; VERIFY (b == 1025);\n+}\n+\n+void\n+binary_multiply_128 (void)\n+{\n+  decimal128 a (1000), b;\n+\n+  b = a * si;   VERIFY (b == -20000);\n+  b = a * ui;   VERIFY (b == 50000);\n+  b = a * sl;   VERIFY (b == -10000);\n+  b = a * ul;   VERIFY (b == 20000);\n+  b = a * sll;  VERIFY (b == -25000);\n+  b = a * ull;  VERIFY (b == 50000);\n+  b = a * d32;  VERIFY (b == 5000);\n+  b = a * d64;  VERIFY (b == -10000);\n+  b = a * d128; VERIFY (b == 25000);\n+\n+  b = si * a;   VERIFY (b == -20000);\n+  b = ui * a;   VERIFY (b == 50000);\n+  b = sl * a;   VERIFY (b == -10000);\n+  b = ul * a;   VERIFY (b == 20000);\n+  b = sll * a;  VERIFY (b == -25000);\n+  b = ull * a;  VERIFY (b == 50000);\n+  b = d32 * a;  VERIFY (b == 5000);\n+  b = d64 * a;  VERIFY (b == -10000);\n+  b = d128 * a; VERIFY (b == 25000);\n+}\n+\n+void\n+binary_divide_128 (void)\n+{\n+  decimal128 a (1000), b;\n+\n+  b = a / si;   VERIFY (b == -50);\n+  b = a / ui;   VERIFY (b == 20);\n+  b = a / sl;   VERIFY (b == -100);\n+  b = a / ul;   VERIFY (b == 50);\n+  b = a / sll;  VERIFY (b == -40);\n+  b = a / ull;  VERIFY (b == 20);\n+  b = a / d32;  VERIFY (b == 200);\n+  b = a / d64;  VERIFY (b == -100);\n+  b = a / d128; VERIFY (b == 40);\n+\n+  a = 5;\n+  b = si / a;   VERIFY (b == -4);\n+  b = ui / a;   VERIFY (b == 10);\n+  b = sl / a;   VERIFY (b == -2);\n+  b = ul / a;   VERIFY (b == 4);\n+  b = sll / a;  VERIFY (b == -5);\n+  b = ull / a;  VERIFY (b == 10);\n+  b = d32 / a;  VERIFY (b == 1);\n+  b = d64 / a;  VERIFY (b == -2);\n+  b = d128 / a; VERIFY (b == 5);\n+}\n+\n+int\n+main ()\n+{\n+  binary_add_32 ();\n+  binary_subtract_32 ();\n+  binary_multiply_32 ();\n+  binary_divide_32 ();\n+\n+  binary_add_64 ();\n+  binary_subtract_64 ();\n+  binary_multiply_64 ();\n+  binary_divide_64 ();\n+\n+  binary_add_128 ();\n+  binary_subtract_128 ();\n+  binary_multiply_128 ();\n+  binary_divide_128 ();\n+}"}, {"sha": "7069fbb8c6fea8ca665d5022536ed2532ebb703a", "filename": "libstdc++-v3/testsuite/decimal/cast_neg.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcast_neg.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,62 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733 doesn't say explicitly that the conversion from a\n+// decimal floating-point type to a generic float type is prohibited but\n+// it implies that in section 4.3 when it says \"In C, objects of decimal\n+// floating-oint type can be converted to generic floating-point type by\n+// means of an explicit cast.  In C++ this is not possible.\"  Check that\n+// attempt to do a cast are flagged as errors.\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+float f;\n+double d;\n+long double ld;\n+decimal32 d32;\n+decimal64 d64;\n+decimal128 d128;\n+\n+void\n+foo (void)\n+{\n+  f = d32;\t\t\t// { dg-error \"error\" }\n+  f = d64;\t\t\t// { dg-error \"error\" }\n+  f = d128;\t\t\t// { dg-error \"error\" }\n+  d = d32;\t\t\t// { dg-error \"error\" }\n+  d = d64;\t\t\t// { dg-error \"error\" }\n+  d = d128;\t\t\t// { dg-error \"error\" }\n+  ld = d32;\t\t\t// { dg-error \"error\" }\n+  ld = d64;\t\t\t// { dg-error \"error\" }\n+  ld = d128;\t\t\t// { dg-error \"error\" }\n+\n+  f = (float)d32;\t\t// { dg-error \"error\" }\n+  f = (float)d64;\t\t// { dg-error \"error\" }\n+  f = (float)d128;\t\t// { dg-error \"error\" }\n+  d = (double)d32;\t\t// { dg-error \"error\" }\n+  d = (double)d64;\t\t// { dg-error \"error\" }\n+  d = (double)d128;\t\t// { dg-error \"error\" }\n+  ld = (long double)d32;\t// { dg-error \"error\" }\n+  ld = (long double)d64;\t// { dg-error \"error\" }\n+  ld = (long double)d128;\t// { dg-error \"error\" }\n+}"}, {"sha": "724938dd925b0a09a625f08f9bff210b10fa9a2d", "filename": "libstdc++-v3/testsuite/decimal/comparison.cc", "status": "added", "additions": 546, "deletions": 0, "changes": 546, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcomparison.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcomparison.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcomparison.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,546 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.9  Comparison operators.\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+decimal32 d32 (5);\n+decimal64 d64 (-10);\n+decimal128 d128 (25);\n+int si = -20;\n+unsigned int ui = 50;\n+long sl = -10;\n+unsigned long ul = 20;\n+long long sll = -25;\n+unsigned long long ull = 50;\n+\n+void\n+compare_eq_32 (void)\n+{\n+  decimal32 a;\n+\n+  a = si;   VERIFY (a == si);   VERIFY (si == a);\n+  a = ui;   VERIFY (a == ui);   VERIFY (ui == a);\n+  a = sl;   VERIFY (a == sl);   VERIFY (sl == a);\n+  a = ul;   VERIFY (a == ul);   VERIFY (ul == a);\n+  a = sll;  VERIFY (a == sll);  VERIFY (sll == a);\n+  a = ull;  VERIFY (a == ull);  VERIFY (ull == a);\n+  a = d32;  VERIFY (a == d32);  VERIFY (d32 == a);\n+  a = (decimal32)d64;  VERIFY (a == d64);  VERIFY (d64 == a);\n+  a = (decimal32)d128; VERIFY (a == d128); VERIFY (d128 == a);\n+}\n+\n+void\n+compare_ne_32 (void)\n+{\n+  decimal32 a = 100;\n+\n+  VERIFY (a != si);   VERIFY (si != a);\n+  VERIFY (a != ui);   VERIFY (ui != a);\n+  VERIFY (a != sl);   VERIFY (sl != a);\n+  VERIFY (a != ul);   VERIFY (ul != a);\n+  VERIFY (a != sll);  VERIFY (sll != a);\n+  VERIFY (a != ull);  VERIFY (ull != a);\n+  VERIFY (a != d32);  VERIFY (d32 != a);\n+  VERIFY (a != d64);  VERIFY (d64 != a);\n+  VERIFY (a != d128); VERIFY (d128 != a);\n+}\n+\n+void\n+compare_lt_32 (void)\n+{\n+  decimal32 a = -100;\n+\n+  VERIFY (a < si);\n+  VERIFY (a < ui);\n+  VERIFY (a < sl);\n+  VERIFY (a < ul);\n+  VERIFY (a < sll);\n+  VERIFY (a < ull);\n+  VERIFY (a < d32);\n+  VERIFY (a < d64);\n+  VERIFY (a < d128);\n+\n+  a = 100;\n+  VERIFY (si < a);\n+  VERIFY (ui < a);\n+  VERIFY (sl < a);\n+  VERIFY (ul < a);\n+  VERIFY (sll < a);\n+  VERIFY (ull < a);\n+  VERIFY (d32 < a);\n+  VERIFY (d64 < a);\n+  VERIFY (d128 < a);\n+}\n+\n+void\n+compare_le_32 (void)\n+{\n+  decimal32 a;\n+\n+  a = si;   VERIFY (a <= si);   VERIFY (si <= a);\n+  a = ui;   VERIFY (a <= ui);   VERIFY (ui <= a);\n+  a = sl;   VERIFY (a <= sl);   VERIFY (sl <= a);\n+  a = ul;   VERIFY (a <= ul);   VERIFY (ul <= a);\n+  a = sll;  VERIFY (a <= sll);  VERIFY (sll <= a);\n+  a = ull;  VERIFY (a <= ull);  VERIFY (ull <= a);\n+  a = d32;  VERIFY (a <= d32);  VERIFY (d32 <= a);\n+  a = (decimal32)d64;  VERIFY (a <= d64);  VERIFY (d64 <= a);\n+  a = (decimal32)d128; VERIFY (a <= d128); VERIFY (d128 <= a);\n+\n+  a = -100;\n+  VERIFY (a <= si);\n+  VERIFY (a <= ui);\n+  VERIFY (a <= sl);\n+  VERIFY (a <= ul);\n+  VERIFY (a <= sll);\n+  VERIFY (a <= ull);\n+  VERIFY (a <= d32);\n+  VERIFY (a <= d64);\n+  VERIFY (a <= d128);\n+\n+  a = 100;\n+  VERIFY (si <= a);\n+  VERIFY (ui <= a);\n+  VERIFY (sl <= a);\n+  VERIFY (ul <= a);\n+  VERIFY (sll <= a);\n+  VERIFY (ull <= a);\n+  VERIFY (d32 <= a);\n+  VERIFY (d64 <= a);\n+  VERIFY (d128 <= a);\n+}\n+\n+void\n+compare_gt_32 (void)\n+{\n+  decimal32 a = 100;\n+\n+  VERIFY (a > si);\n+  VERIFY (a > ui);\n+  VERIFY (a > sl);\n+  VERIFY (a > ul);\n+  VERIFY (a > sll);\n+  VERIFY (a > ull);\n+  VERIFY (a > d32);\n+  VERIFY (a > d64);\n+  VERIFY (a > d128);\n+\n+  a = -100;\n+  VERIFY (si > a);\n+  VERIFY (ui > a);\n+  VERIFY (sl > a);\n+  VERIFY (ul > a);\n+  VERIFY (sll > a);\n+  VERIFY (ull > a);\n+  VERIFY (d32 > a);\n+  VERIFY (d64 > a);\n+  VERIFY (d128 > a);\n+}\n+\n+void\n+compare_ge_32 (void)\n+{\n+  decimal32 a;\n+\n+  a = si;   VERIFY (a >= si);   VERIFY (si <= a);\n+  a = ui;   VERIFY (a >= ui);   VERIFY (ui <= a);\n+  a = sl;   VERIFY (a >= sl);   VERIFY (sl <= a);\n+  a = ul;   VERIFY (a >= ul);   VERIFY (ul <= a);\n+  a = sll;  VERIFY (a >= sll);  VERIFY (sll <= a);\n+  a = ull;  VERIFY (a >= ull);  VERIFY (ull <= a);\n+  a = d32;  VERIFY (a >= d32);  VERIFY (d32 <= a);\n+  a = (decimal32)d64;  VERIFY (a >= d64);  VERIFY (d64 <= a);\n+  a = (decimal32)d128; VERIFY (a >= d128); VERIFY (d128 <= a);\n+\n+  a = 100;\n+  VERIFY (a >= si);\n+  VERIFY (a >= ui);\n+  VERIFY (a >= sl);\n+  VERIFY (a >= ul);\n+  VERIFY (a >= sll);\n+  VERIFY (a >= ull);\n+  VERIFY (a >= d32);\n+  VERIFY (a >= d64);\n+  VERIFY (a >= d128);\n+\n+  a = -100;\n+  VERIFY (si >= a);\n+  VERIFY (ui >= a);\n+  VERIFY (sl >= a);\n+  VERIFY (ul >= a);\n+  VERIFY (sll >= a);\n+  VERIFY (ull >= a);\n+  VERIFY (d32 >= a);\n+  VERIFY (d64 >= a);\n+  VERIFY (d128 >= a);\n+}\n+\n+void\n+compare_eq_64 (void)\n+{\n+  decimal64 a;\n+\n+  a = si;   VERIFY (a == si);   VERIFY (si == a);\n+  a = ui;   VERIFY (a == ui);   VERIFY (ui == a);\n+  a = sl;   VERIFY (a == sl);   VERIFY (sl == a);\n+  a = ul;   VERIFY (a == ul);   VERIFY (ul == a);\n+  a = sll;  VERIFY (a == sll);  VERIFY (sll == a);\n+  a = ull;  VERIFY (a == ull);  VERIFY (ull == a);\n+  a = d32;  VERIFY (a == d32);  VERIFY (d32 == a);\n+  a = d64;  VERIFY (a == d64);  VERIFY (d64 == a);\n+  a = (decimal64)d128; VERIFY (a == d128); VERIFY (d128 == a);\n+}\n+\n+void\n+compare_ne_64 (void)\n+{\n+  decimal64 a = 100;\n+\n+  VERIFY (a != si);   VERIFY (si != a);\n+  VERIFY (a != ui);   VERIFY (ui != a);\n+  VERIFY (a != sl);   VERIFY (sl != a);\n+  VERIFY (a != ul);   VERIFY (ul != a);\n+  VERIFY (a != sll);  VERIFY (sll != a);\n+  VERIFY (a != ull);  VERIFY (ull != a);\n+  VERIFY (a != d32);  VERIFY (d32 != a);\n+  VERIFY (a != d64);  VERIFY (d64 != a);\n+  VERIFY (a != d128); VERIFY (d128 != a);\n+}\n+\n+void\n+compare_lt_64 (void)\n+{\n+  decimal64 a = -100;\n+\n+  VERIFY (a < si);\n+  VERIFY (a < ui);\n+  VERIFY (a < sl);\n+  VERIFY (a < ul);\n+  VERIFY (a < sll);\n+  VERIFY (a < ull);\n+  VERIFY (a < d32);\n+  VERIFY (a < d64);\n+  VERIFY (a < d128);\n+\n+  a = 100;\n+  VERIFY (si < a);\n+  VERIFY (ui < a);\n+  VERIFY (sl < a);\n+  VERIFY (ul < a);\n+  VERIFY (sll < a);\n+  VERIFY (ull < a);\n+  VERIFY (d32 < a);\n+  VERIFY (d64 < a);\n+  VERIFY (d128 < a);\n+}\n+\n+void\n+compare_le_64 (void)\n+{\n+  decimal64 a;\n+\n+  a = si;   VERIFY (a <= si);   VERIFY (si <= a);\n+  a = ui;   VERIFY (a <= ui);   VERIFY (ui <= a);\n+  a = sl;   VERIFY (a <= sl);   VERIFY (sl <= a);\n+  a = ul;   VERIFY (a <= ul);   VERIFY (ul <= a);\n+  a = sll;  VERIFY (a <= sll);  VERIFY (sll <= a);\n+  a = ull;  VERIFY (a <= ull);  VERIFY (ull <= a);\n+  a = d32;  VERIFY (a <= d32);  VERIFY (d32 <= a);\n+  a = (decimal32)d64;  VERIFY (a <= d64);  VERIFY (d64 <= a);\n+  a = (decimal32)d128; VERIFY (a <= d128); VERIFY (d128 <= a);\n+\n+  a = -100;\n+  VERIFY (a <= si);\n+  VERIFY (a <= ui);\n+  VERIFY (a <= sl);\n+  VERIFY (a <= ul);\n+  VERIFY (a <= sll);\n+  VERIFY (a <= ull);\n+  VERIFY (a <= d32);\n+  VERIFY (a <= d64);\n+  VERIFY (a <= d128);\n+\n+  a = 100;\n+  VERIFY (si <= a);\n+  VERIFY (ui <= a);\n+  VERIFY (sl <= a);\n+  VERIFY (ul <= a);\n+  VERIFY (sll <= a);\n+  VERIFY (ull <= a);\n+  VERIFY (d32 <= a);\n+  VERIFY (d64 <= a);\n+  VERIFY (d128 <= a);\n+}\n+\n+void\n+compare_gt_64 (void)\n+{\n+  decimal64 a = 100;\n+\n+  VERIFY (a > si);\n+  VERIFY (a > ui);\n+  VERIFY (a > sl);\n+  VERIFY (a > ul);\n+  VERIFY (a > sll);\n+  VERIFY (a > ull);\n+  VERIFY (a > d32);\n+  VERIFY (a > d64);\n+  VERIFY (a > d128);\n+\n+  a = -100;\n+  VERIFY (si > a);\n+  VERIFY (ui > a);\n+  VERIFY (sl > a);\n+  VERIFY (ul > a);\n+  VERIFY (sll > a);\n+  VERIFY (ull > a);\n+  VERIFY (d32 > a);\n+  VERIFY (d64 > a);\n+  VERIFY (d128 > a);\n+}\n+\n+void\n+compare_ge_64 (void)\n+{\n+  decimal64 a;\n+\n+  a = si;   VERIFY (a >= si);   VERIFY (si <= a);\n+  a = ui;   VERIFY (a >= ui);   VERIFY (ui <= a);\n+  a = sl;   VERIFY (a >= sl);   VERIFY (sl <= a);\n+  a = ul;   VERIFY (a >= ul);   VERIFY (ul <= a);\n+  a = sll;  VERIFY (a >= sll);  VERIFY (sll <= a);\n+  a = ull;  VERIFY (a >= ull);  VERIFY (ull <= a);\n+  a = d32;  VERIFY (a >= d32);  VERIFY (d32 <= a);\n+  a = (decimal32)d64;  VERIFY (a >= d64);  VERIFY (d64 <= a);\n+  a = (decimal32)d128; VERIFY (a >= d128); VERIFY (d128 <= a);\n+\n+  a = 100;\n+  VERIFY (a >= si);\n+  VERIFY (a >= ui);\n+  VERIFY (a >= sl);\n+  VERIFY (a >= ul);\n+  VERIFY (a >= sll);\n+  VERIFY (a >= ull);\n+  VERIFY (a >= d32);\n+  VERIFY (a >= d64);\n+  VERIFY (a >= d128);\n+\n+  a = -100;\n+  VERIFY (si >= a);\n+  VERIFY (ui >= a);\n+  VERIFY (sl >= a);\n+  VERIFY (ul >= a);\n+  VERIFY (sll >= a);\n+  VERIFY (ull >= a);\n+  VERIFY (d32 >= a);\n+  VERIFY (d64 >= a);\n+  VERIFY (d128 >= a);\n+}\n+\n+void\n+compare_eq_128 (void)\n+{\n+  decimal128 a;\n+\n+  a = si;   VERIFY (a == si);   VERIFY (si == a);\n+  a = ui;   VERIFY (a == ui);   VERIFY (ui == a);\n+  a = sl;   VERIFY (a == sl);   VERIFY (sl == a);\n+  a = ul;   VERIFY (a == ul);   VERIFY (ul == a);\n+  a = sll;  VERIFY (a == sll);  VERIFY (sll == a);\n+  a = ull;  VERIFY (a == ull);  VERIFY (ull == a);\n+  a = d32;  VERIFY (a == d32);  VERIFY (d32 == a);\n+  a = d64;  VERIFY (a == d64);  VERIFY (d64 == a);\n+  a = d128; VERIFY (a == d128); VERIFY (d128 == a);\n+}\n+\n+void\n+compare_ne_128 (void)\n+{\n+  decimal128 a = 100;\n+\n+  VERIFY (a != si);   VERIFY (si != a);\n+  VERIFY (a != ui);   VERIFY (ui != a);\n+  VERIFY (a != sl);   VERIFY (sl != a);\n+  VERIFY (a != ul);   VERIFY (ul != a);\n+  VERIFY (a != sll);  VERIFY (sll != a);\n+  VERIFY (a != ull);  VERIFY (ull != a);\n+  VERIFY (a != d32);  VERIFY (d32 != a);\n+  VERIFY (a != d64);  VERIFY (d64 != a);\n+  VERIFY (a != d128); VERIFY (d128 != a);\n+}\n+\n+void\n+compare_lt_128 (void)\n+{\n+  decimal128 a = -100;\n+\n+  VERIFY (a < si);\n+  VERIFY (a < ui);\n+  VERIFY (a < sl);\n+  VERIFY (a < ul);\n+  VERIFY (a < sll);\n+  VERIFY (a < ull);\n+  VERIFY (a < d32);\n+  VERIFY (a < d64);\n+  VERIFY (a < d128);\n+\n+  a = 100;\n+  VERIFY (si < a);\n+  VERIFY (ui < a);\n+  VERIFY (sl < a);\n+  VERIFY (ul < a);\n+  VERIFY (sll < a);\n+  VERIFY (ull < a);\n+  VERIFY (d32 < a);\n+  VERIFY (d64 < a);\n+  VERIFY (d128 < a);\n+}\n+\n+void\n+compare_le_128 (void)\n+{\n+  decimal128 a;\n+\n+  a = si;   VERIFY (a <= si);   VERIFY (si <= a);\n+  a = ui;   VERIFY (a <= ui);   VERIFY (ui <= a);\n+  a = sl;   VERIFY (a <= sl);   VERIFY (sl <= a);\n+  a = ul;   VERIFY (a <= ul);   VERIFY (ul <= a);\n+  a = sll;  VERIFY (a <= sll);  VERIFY (sll <= a);\n+  a = ull;  VERIFY (a <= ull);  VERIFY (ull <= a);\n+  a = d32;  VERIFY (a <= d32);  VERIFY (d32 <= a);\n+  a = (decimal32)d64;  VERIFY (a <= d64);  VERIFY (d64 <= a);\n+  a = (decimal32)d128; VERIFY (a <= d128); VERIFY (d128 <= a);\n+\n+  a = -100;\n+  VERIFY (a <= si);\n+  VERIFY (a <= ui);\n+  VERIFY (a <= sl);\n+  VERIFY (a <= ul);\n+  VERIFY (a <= sll);\n+  VERIFY (a <= ull);\n+  VERIFY (a <= d32);\n+  VERIFY (a <= d64);\n+  VERIFY (a <= d128);\n+\n+  a = 100;\n+  VERIFY (si <= a);\n+  VERIFY (ui <= a);\n+  VERIFY (sl <= a);\n+  VERIFY (ul <= a);\n+  VERIFY (sll <= a);\n+  VERIFY (ull <= a);\n+  VERIFY (d32 <= a);\n+  VERIFY (d64 <= a);\n+  VERIFY (d128 <= a);\n+}\n+\n+void\n+compare_gt_128 (void)\n+{\n+  decimal128 a = 100;\n+\n+  VERIFY (a > si);\n+  VERIFY (a > ui);\n+  VERIFY (a > sl);\n+  VERIFY (a > ul);\n+  VERIFY (a > sll);\n+  VERIFY (a > ull);\n+  VERIFY (a > d32);\n+  VERIFY (a > d64);\n+  VERIFY (a > d128);\n+\n+  a = -100;\n+  VERIFY (si > a);\n+  VERIFY (ui > a);\n+  VERIFY (sl > a);\n+  VERIFY (ul > a);\n+  VERIFY (sll > a);\n+  VERIFY (ull > a);\n+  VERIFY (d32 > a);\n+  VERIFY (d64 > a);\n+  VERIFY (d128 > a);\n+}\n+\n+void\n+compare_ge_128 (void)\n+{\n+  decimal128 a;\n+\n+  a = si;   VERIFY (a >= si);   VERIFY (si <= a);\n+  a = ui;   VERIFY (a >= ui);   VERIFY (ui <= a);\n+  a = sl;   VERIFY (a >= sl);   VERIFY (sl <= a);\n+  a = ul;   VERIFY (a >= ul);   VERIFY (ul <= a);\n+  a = sll;  VERIFY (a >= sll);  VERIFY (sll <= a);\n+  a = ull;  VERIFY (a >= ull);  VERIFY (ull <= a);\n+  a = d32;  VERIFY (a >= d32);  VERIFY (d32 <= a);\n+  a = (decimal32)d64;  VERIFY (a >= d64);  VERIFY (d64 <= a);\n+  a = (decimal32)d128; VERIFY (a >= d128); VERIFY (d128 <= a);\n+\n+  a = 100;\n+  VERIFY (a >= si);\n+  VERIFY (a >= ui);\n+  VERIFY (a >= sl);\n+  VERIFY (a >= ul);\n+  VERIFY (a >= sll);\n+  VERIFY (a >= ull);\n+  VERIFY (a >= d32);\n+  VERIFY (a >= d64);\n+  VERIFY (a >= d128);\n+\n+  a = -100;\n+  VERIFY (si >= a);\n+  VERIFY (ui >= a);\n+  VERIFY (sl >= a);\n+  VERIFY (ul >= a);\n+  VERIFY (sll >= a);\n+  VERIFY (ull >= a);\n+  VERIFY (d32 >= a);\n+  VERIFY (d64 >= a);\n+  VERIFY (d128 >= a);\n+}\n+\n+int\n+main ()\n+{\n+  compare_eq_32 ();\n+  compare_ne_32 ();\n+  compare_lt_32 ();\n+  compare_le_32 ();\n+  compare_gt_32 ();\n+  compare_ge_32 ();\n+\n+  compare_eq_64 ();\n+  compare_ne_64 ();\n+  compare_lt_64 ();\n+  compare_le_64 ();\n+  compare_gt_64 ();\n+  compare_ge_64 ();\n+\n+  compare_eq_128 ();\n+  compare_ne_128 ();\n+  compare_lt_128 ();\n+  compare_le_128 ();\n+  compare_gt_128 ();\n+  compare_ge_128 ();\n+}"}, {"sha": "dc38fb3d13eb78a92d76a398c90e8895a2eacaa5", "filename": "libstdc++-v3/testsuite/decimal/compound-assignment-memfunc.cc", "status": "added", "additions": 250, "deletions": 0, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment-memfunc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment-memfunc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment-memfunc.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,250 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.2.6  Compound assignment (decimal32).\n+// ISO/IEC TR 24733  3.2.3.6  Compound assignment (decimal64).\n+// ISO/IEC TR 24733  3.2.4.6  Compound assignment (decimal128).\n+\n+// Access member functions directly.\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+decimal32 d32 (5);\n+decimal64 d64 (-10);\n+decimal128 d128 (25);\n+int si = -2;\n+unsigned int ui = 5;\n+long sl = -10;\n+unsigned long ul = 20;\n+long long sll = -25;\n+unsigned long long ull = 50;\n+\n+void\n+compound_assignment_add_32 (void)\n+{\n+  decimal32 a (1000), b;\n+\n+  b = a; b.operator+=(d32);  VERIFY (b == 1005);\n+  b = a; b.operator+=(d64);  VERIFY (b == 990);\n+  b = a; b.operator+=(d128); VERIFY (b == 1025);\n+  b = a; b.operator+=(si);   VERIFY (b == 998);\n+  b = a; b.operator+=(ui);   VERIFY (b == 1005);\n+  b = a; b.operator+=(sl);   VERIFY (b == 990);\n+  b = a; b.operator+=(ul);   VERIFY (b == 1020);\n+  b = a; b.operator+=(sll);  VERIFY (b == 975);\n+  b = a; b.operator+=(ull);  VERIFY (b == 1050);\n+}\n+\n+void\n+compound_assignment_subtract_32 (void)\n+{\n+  decimal32 a (1000), b;\n+\n+  b = a; b.operator-=(d32);  VERIFY (b == 995);\n+  b = a; b.operator-=(d64);  VERIFY (b == 1010);\n+  b = a; b.operator-=(d128); VERIFY (b == 975);\n+  b = a; b.operator-=(si);   VERIFY (b == 1002);\n+  b = a; b.operator-=(ui);   VERIFY (b == 995);\n+  b = a; b.operator-=(sl);   VERIFY (b == 1010);\n+  b = a; b.operator-=(ul);   VERIFY (b == 980);\n+  b = a; b.operator-=(sll);  VERIFY (b == 1025);\n+  b = a; b.operator-=(ull);  VERIFY (b == 950);\n+}\n+\n+void\n+compound_assignment_multiply_32 (void)\n+{\n+  decimal32 a (1000), b;\n+\n+  b = a; b.operator*=(d32);  VERIFY (b == 5000);\n+  b = a; b.operator*=(d64);  VERIFY (b == -10000);\n+  b = a; b.operator*=(d128); VERIFY (b == 25000);\n+  b = a; b.operator*=(si);   VERIFY (b == -2000);\n+  b = a; b.operator*=(ui);   VERIFY (b == 5000);\n+  b = a; b.operator*=(sl);   VERIFY (b == -10000);\n+  b = a; b.operator*=(ul);   VERIFY (b == 20000);\n+  b = a; b.operator*=(sll);  VERIFY (b == -25000);\n+  b = a; b.operator*=(ull);  VERIFY (b == 50000);\n+}\n+\n+void\n+compound_assignment_divide_32 (void)\n+{\n+  decimal32 a (1000), b;\n+\n+  b = a; b.operator/=(d32);  VERIFY (b == 200);\n+  b = a; b.operator/=(d64);  VERIFY (b == -100);\n+  b = a; b.operator/=(d128); VERIFY (b == 40);\n+  b = a; b.operator/=(si);   VERIFY (b == -500);\n+  b = a; b.operator/=(ui);   VERIFY (b == 200);\n+  b = a; b.operator/=(sl);   VERIFY (b == -100);\n+  b = a; b.operator/=(ul);   VERIFY (b == 50);\n+  b = a; b.operator/=(sll);  VERIFY (b == -40);\n+  b = a; b.operator/=(ull);  VERIFY (b == 20);\n+}\n+\n+void\n+compound_assignment_add_64 (void)\n+{\n+  decimal64 a (1000), b;\n+\n+  b = a; b.operator+=(d32);  VERIFY (b == 1005);\n+  b = a; b.operator+=(d64);  VERIFY (b == 990);\n+  b = a; b.operator+=(d128); VERIFY (b == 1025);\n+  b = a; b.operator+=(si);   VERIFY (b == 998);\n+  b = a; b.operator+=(ui);   VERIFY (b == 1005);\n+  b = a; b.operator+=(sl);   VERIFY (b == 990);\n+  b = a; b.operator+=(ul);   VERIFY (b == 1020);\n+  b = a; b.operator+=(sll);  VERIFY (b == 975);\n+  b = a; b.operator+=(ull);  VERIFY (b == 1050);\n+}\n+\n+void\n+compound_assignment_subtract_64 (void)\n+{\n+  decimal64 a (1000), b;\n+\n+  b = a; b.operator-=(d32);  VERIFY (b == 995);\n+  b = a; b.operator-=(d64);  VERIFY (b == 1010);\n+  b = a; b.operator-=(d128); VERIFY (b == 975);\n+  b = a; b.operator-=(si);   VERIFY (b == 1002);\n+  b = a; b.operator-=(ui);   VERIFY (b == 995);\n+  b = a; b.operator-=(sl);   VERIFY (b == 1010);\n+  b = a; b.operator-=(ul);   VERIFY (b == 980);\n+  b = a; b.operator-=(sll);  VERIFY (b == 1025);\n+  b = a; b.operator-=(ull);  VERIFY (b == 950);\n+}\n+\n+void\n+compound_assignment_multiply_64 (void)\n+{\n+  decimal64 a (1000), b;\n+\n+  b = a; b.operator*=(d32);  VERIFY (b == 5000);\n+  b = a; b.operator*=(d64);  VERIFY (b == -10000);\n+  b = a; b.operator*=(d128); VERIFY (b == 25000);\n+  b = a; b.operator*=(si);   VERIFY (b == -2000);\n+  b = a; b.operator*=(ui);   VERIFY (b == 5000);\n+  b = a; b.operator*=(sl);   VERIFY (b == -10000);\n+  b = a; b.operator*=(ul);   VERIFY (b == 20000);\n+  b = a; b.operator*=(sll);  VERIFY (b == -25000);\n+  b = a; b.operator*=(ull);  VERIFY (b == 50000);\n+}\n+\n+void\n+compound_assignment_divide_64 (void)\n+{\n+  decimal64 a (1000), b;\n+\n+  b = a; b.operator/=(d32);  VERIFY (b == 200);\n+  b = a; b.operator/=(d64);  VERIFY (b == -100);\n+  b = a; b.operator/=(d128); VERIFY (b == 40);\n+  b = a; b.operator/=(si);   VERIFY (b == -500);\n+  b = a; b.operator/=(ui);   VERIFY (b == 200);\n+  b = a; b.operator/=(sl);   VERIFY (b == -100);\n+  b = a; b.operator/=(ul);   VERIFY (b == 50);\n+  b = a; b.operator/=(sll);  VERIFY (b == -40);\n+  b = a; b.operator/=(ull);  VERIFY (b == 20);\n+}\n+\n+void\n+compound_assignment_add_128 (void)\n+{\n+  decimal128 a (1000), b;\n+\n+  b = a; b.operator+=(d32);  VERIFY (b == 1005);\n+  b = a; b.operator+=(d64);  VERIFY (b == 990);\n+  b = a; b.operator+=(d128); VERIFY (b == 1025);\n+  b = a; b.operator+=(si);   VERIFY (b == 998);\n+  b = a; b.operator+=(ui);   VERIFY (b == 1005);\n+  b = a; b.operator+=(sl);   VERIFY (b == 990);\n+  b = a; b.operator+=(ul);   VERIFY (b == 1020);\n+  b = a; b.operator+=(sll);  VERIFY (b == 975);\n+  b = a; b.operator+=(ull);  VERIFY (b == 1050);\n+}\n+\n+void\n+compound_assignment_subtract_128 (void)\n+{\n+  decimal128 a (1000), b;\n+\n+  b = a; b.operator-=(d32);  VERIFY (b == 995);\n+  b = a; b.operator-=(d64);  VERIFY (b == 1010);\n+  b = a; b.operator-=(d128); VERIFY (b == 975);\n+  b = a; b.operator-=(si);   VERIFY (b == 1002);\n+  b = a; b.operator-=(ui);   VERIFY (b == 995);\n+  b = a; b.operator-=(sl);   VERIFY (b == 1010);\n+  b = a; b.operator-=(ul);   VERIFY (b == 980);\n+  b = a; b.operator-=(sll);  VERIFY (b == 1025);\n+  b = a; b.operator-=(ull);  VERIFY (b == 950);\n+}\n+\n+void\n+compound_assignment_multiply_128 (void)\n+{\n+  decimal128 a (1000), b;\n+\n+  b = a; b.operator*=(d32);  VERIFY (b == 5000);\n+  b = a; b.operator*=(d64);  VERIFY (b == -10000);\n+  b = a; b.operator*=(d128); VERIFY (b == 25000);\n+  b = a; b.operator*=(si);   VERIFY (b == -2000);\n+  b = a; b.operator*=(ui);   VERIFY (b == 5000);\n+  b = a; b.operator*=(sl);   VERIFY (b == -10000);\n+  b = a; b.operator*=(ul);   VERIFY (b == 20000);\n+  b = a; b.operator*=(sll);  VERIFY (b == -25000);\n+  b = a; b.operator*=(ull);  VERIFY (b == 50000);\n+}\n+\n+void\n+compound_assignment_divide_128 (void)\n+{\n+  decimal128 a (1000), b;\n+\n+  b = a; b.operator/=(d32);  VERIFY (b == 200);\n+  b = a; b.operator/=(d64);  VERIFY (b == -100);\n+  b = a; b.operator/=(d128); VERIFY (b == 40);\n+  b = a; b.operator/=(si);   VERIFY (b == -500);\n+  b = a; b.operator/=(ui);   VERIFY (b == 200);\n+  b = a; b.operator/=(sl);   VERIFY (b == -100);\n+  b = a; b.operator/=(ul);   VERIFY (b == 50);\n+  b = a; b.operator/=(sll);  VERIFY (b == -40);\n+  b = a; b.operator/=(ull);  VERIFY (b == 20);\n+}\n+\n+int\n+main ()\n+{\n+  compound_assignment_add_32 ();\n+  compound_assignment_subtract_32 ();\n+  compound_assignment_multiply_32 ();\n+  compound_assignment_divide_32 ();\n+\n+  compound_assignment_add_64 ();\n+  compound_assignment_subtract_64 ();\n+  compound_assignment_multiply_64 ();\n+  compound_assignment_divide_64 ();\n+\n+  compound_assignment_add_128 ();\n+  compound_assignment_subtract_128 ();\n+  compound_assignment_multiply_128 ();\n+  compound_assignment_divide_128 ();\n+}"}, {"sha": "6d833e7140f12db33ba21092045d9453c8169e37", "filename": "libstdc++-v3/testsuite/decimal/compound-assignment.cc", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,248 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.2.6  Compound assignment (decimal32).\n+// ISO/IEC TR 24733  3.2.3.6  Compound assignment (decimal64).\n+// ISO/IEC TR 24733  3.2.4.6  Compound assignment (decimal128).\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+decimal32 d32 (5);\n+decimal64 d64 (-10);\n+decimal128 d128 (25);\n+int si = -2;\n+unsigned int ui = 5;\n+long sl = -10;\n+unsigned long ul = 20;\n+long long sll = -25;\n+unsigned long long ull = 50;\n+\n+void\n+compound_assignment_add_32 (void)\n+{\n+  decimal32 a (1000), b;\n+\n+  b = a; b += d32;  VERIFY (b == 1005);\n+  b = a; b += d64;  VERIFY (b == 990);\n+  b = a; b += d128; VERIFY (b == 1025);\n+  b = a; b += si;   VERIFY (b == 998);\n+  b = a; b += ui;   VERIFY (b == 1005);\n+  b = a; b += sl;   VERIFY (b == 990);\n+  b = a; b += ul;   VERIFY (b == 1020);\n+  b = a; b += sll;  VERIFY (b == 975);\n+  b = a; b += ull;  VERIFY (b == 1050);\n+}\n+\n+void\n+compound_assignment_subtract_32 (void)\n+{\n+  decimal32 a (1000), b;\n+\n+  b = a; b -= d32;  VERIFY (b == 995);\n+  b = a; b -= d64;  VERIFY (b == 1010);\n+  b = a; b -= d128; VERIFY (b == 975);\n+  b = a; b -= si;   VERIFY (b == 1002);\n+  b = a; b -= ui;   VERIFY (b == 995);\n+  b = a; b -= sl;   VERIFY (b == 1010);\n+  b = a; b -= ul;   VERIFY (b == 980);\n+  b = a; b -= sll;  VERIFY (b == 1025);\n+  b = a; b -= ull;  VERIFY (b == 950);\n+}\n+\n+void\n+compound_assignment_multiply_32 (void)\n+{\n+  decimal32 a (1000), b;\n+\n+  b = a; b *= d32;  VERIFY (b == 5000);\n+  b = a; b *= d64;  VERIFY (b == -10000);\n+  b = a; b *= d128; VERIFY (b == 25000);\n+  b = a; b *= si;   VERIFY (b == -2000);\n+  b = a; b *= ui;   VERIFY (b == 5000);\n+  b = a; b *= sl;   VERIFY (b == -10000);\n+  b = a; b *= ul;   VERIFY (b == 20000);\n+  b = a; b *= sll;  VERIFY (b == -25000);\n+  b = a; b *= ull;  VERIFY (b == 50000);\n+}\n+\n+void\n+compound_assignment_divide_32 (void)\n+{\n+  decimal32 a (1000), b;\n+\n+  b = a; b /= d32;  VERIFY (b == 200);\n+  b = a; b /= d64;  VERIFY (b == -100);\n+  b = a; b /= d128; VERIFY (b == 40);\n+  b = a; b /= si;   VERIFY (b == -500);\n+  b = a; b /= ui;   VERIFY (b == 200);\n+  b = a; b /= sl;   VERIFY (b == -100);\n+  b = a; b /= ul;   VERIFY (b == 50);\n+  b = a; b /= sll;  VERIFY (b == -40);\n+  b = a; b /= ull;  VERIFY (b == 20);\n+}\n+\n+void\n+compound_assignment_add_64 (void)\n+{\n+  decimal64 a (1000), b;\n+\n+  b = a; b += d32;  VERIFY (b == 1005);\n+  b = a; b += d64;  VERIFY (b == 990);\n+  b = a; b += d128; VERIFY (b == 1025);\n+  b = a; b += si;   VERIFY (b == 998);\n+  b = a; b += ui;   VERIFY (b == 1005);\n+  b = a; b += sl;   VERIFY (b == 990);\n+  b = a; b += ul;   VERIFY (b == 1020);\n+  b = a; b += sll;  VERIFY (b == 975);\n+  b = a; b += ull;  VERIFY (b == 1050);\n+}\n+\n+void\n+compound_assignment_subtract_64 (void)\n+{\n+  decimal64 a (1000), b;\n+\n+  b = a; b -= d32;  VERIFY (b == 995);\n+  b = a; b -= d64;  VERIFY (b == 1010);\n+  b = a; b -= d128; VERIFY (b == 975);\n+  b = a; b -= si;   VERIFY (b == 1002);\n+  b = a; b -= ui;   VERIFY (b == 995);\n+  b = a; b -= sl;   VERIFY (b == 1010);\n+  b = a; b -= ul;   VERIFY (b == 980);\n+  b = a; b -= sll;  VERIFY (b == 1025);\n+  b = a; b -= ull;  VERIFY (b == 950);\n+}\n+\n+void\n+compound_assignment_multiply_64 (void)\n+{\n+  decimal64 a (1000), b;\n+\n+  b = a; b *= d32;  VERIFY (b == 5000);\n+  b = a; b *= d64;  VERIFY (b == -10000);\n+  b = a; b *= d128; VERIFY (b == 25000);\n+  b = a; b *= si;   VERIFY (b == -2000);\n+  b = a; b *= ui;   VERIFY (b == 5000);\n+  b = a; b *= sl;   VERIFY (b == -10000);\n+  b = a; b *= ul;   VERIFY (b == 20000);\n+  b = a; b *= sll;  VERIFY (b == -25000);\n+  b = a; b *= ull;  VERIFY (b == 50000);\n+}\n+\n+void\n+compound_assignment_divide_64 (void)\n+{\n+  decimal64 a (1000), b;\n+\n+  b = a; b /= d32;  VERIFY (b == 200);\n+  b = a; b /= d64;  VERIFY (b == -100);\n+  b = a; b /= d128; VERIFY (b == 40);\n+  b = a; b /= si;   VERIFY (b == -500);\n+  b = a; b /= ui;   VERIFY (b == 200);\n+  b = a; b /= sl;   VERIFY (b == -100);\n+  b = a; b /= ul;   VERIFY (b == 50);\n+  b = a; b /= sll;  VERIFY (b == -40);\n+  b = a; b /= ull;  VERIFY (b == 20);\n+}\n+\n+void\n+compound_assignment_add_128 (void)\n+{\n+  decimal128 a (1000), b;\n+\n+  b = a; b += d32;  VERIFY (b == 1005);\n+  b = a; b += d64;  VERIFY (b == 990);\n+  b = a; b += d128; VERIFY (b == 1025);\n+  b = a; b += si;   VERIFY (b == 998);\n+  b = a; b += ui;   VERIFY (b == 1005);\n+  b = a; b += sl;   VERIFY (b == 990);\n+  b = a; b += ul;   VERIFY (b == 1020);\n+  b = a; b += sll;  VERIFY (b == 975);\n+  b = a; b += ull;  VERIFY (b == 1050);\n+}\n+\n+void\n+compound_assignment_subtract_128 (void)\n+{\n+  decimal128 a (1000), b;\n+\n+  b = a; b -= d32;  VERIFY (b == 995);\n+  b = a; b -= d64;  VERIFY (b == 1010);\n+  b = a; b -= d128; VERIFY (b == 975);\n+  b = a; b -= si;   VERIFY (b == 1002);\n+  b = a; b -= ui;   VERIFY (b == 995);\n+  b = a; b -= sl;   VERIFY (b == 1010);\n+  b = a; b -= ul;   VERIFY (b == 980);\n+  b = a; b -= sll;  VERIFY (b == 1025);\n+  b = a; b -= ull;  VERIFY (b == 950);\n+}\n+\n+void\n+compound_assignment_multiply_128 (void)\n+{\n+  decimal128 a (1000), b;\n+\n+  b = a; b *= d32;  VERIFY (b == 5000);\n+  b = a; b *= d64;  VERIFY (b == -10000);\n+  b = a; b *= d128; VERIFY (b == 25000);\n+  b = a; b *= si;   VERIFY (b == -2000);\n+  b = a; b *= ui;   VERIFY (b == 5000);\n+  b = a; b *= sl;   VERIFY (b == -10000);\n+  b = a; b *= ul;   VERIFY (b == 20000);\n+  b = a; b *= sll;  VERIFY (b == -25000);\n+  b = a; b *= ull;  VERIFY (b == 50000);\n+}\n+\n+void\n+compound_assignment_divide_128 (void)\n+{\n+  decimal128 a (1000), b;\n+\n+  b = a; b /= d32;  VERIFY (b == 200);\n+  b = a; b /= d64;  VERIFY (b == -100);\n+  b = a; b /= d128; VERIFY (b == 40);\n+  b = a; b /= si;   VERIFY (b == -500);\n+  b = a; b /= ui;   VERIFY (b == 200);\n+  b = a; b /= sl;   VERIFY (b == -100);\n+  b = a; b /= ul;   VERIFY (b == 50);\n+  b = a; b /= sll;  VERIFY (b == -40);\n+  b = a; b /= ull;  VERIFY (b == 20);\n+}\n+\n+int\n+main ()\n+{\n+  compound_assignment_add_32 ();\n+  compound_assignment_subtract_32 ();\n+  compound_assignment_multiply_32 ();\n+  compound_assignment_divide_32 ();\n+\n+  compound_assignment_add_64 ();\n+  compound_assignment_subtract_64 ();\n+  compound_assignment_multiply_64 ();\n+  compound_assignment_divide_64 ();\n+\n+  compound_assignment_add_128 ();\n+  compound_assignment_subtract_128 ();\n+  compound_assignment_multiply_128 ();\n+  compound_assignment_divide_128 ();\n+}"}, {"sha": "9c5197d1a694d3b4921a0822ff79f8f024b79f8c", "filename": "libstdc++-v3/testsuite/decimal/conversion-from-float.cc", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-float.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,101 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.2.2  Conversion from floating-point type (decimal32).\n+// ISO/IEC TR 24733  3.2.3.2  Conversion from floating-point type (decimal64).\n+// ISO/IEC TR 24733  3.2.4.2  Conversion from floating-point type (decimal128).\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+void\n+conversion_from_float_32 ()\n+{\n+  decimal32 d32(123);\n+  decimal64 d64(234);\n+  decimal128 d128(345);\n+  float f = 456.F;\n+  double d = 567.;\n+  long double ld = 678.L;\n+\n+  d32 = (decimal32) d64;\n+  VERIFY (d32 == make_decimal32 (234LL, 0));\n+  d32 = (decimal32) d128;\n+  VERIFY (d32 == make_decimal32 (345LL, 0));\n+  d32 = (decimal32) f;\n+  VERIFY (d32 == make_decimal32 (456LL, 0));\n+  d32 = (decimal32) d;\n+  VERIFY (d32 == make_decimal32 (567LL, 0));\n+  d32 = (decimal32) ld;\n+  VERIFY (d32 == make_decimal32 (678LL, 0));\n+}\n+\n+void\n+conversion_from_float_64 ()\n+{\n+  decimal32 d32(123);\n+  decimal64 d64(234);\n+  decimal128 d128(345);\n+  float f = 456.F;\n+  double d = 567.;\n+  long double ld = 678.L;\n+\n+  d64 = d32;\n+  VERIFY (d64 == make_decimal64 (123LL, 0));\n+  d64 = (decimal64) d128;\n+  VERIFY (d64 == make_decimal64 (345LL, 0));\n+  d64 = (decimal64) f;\n+  VERIFY (d64 == make_decimal64 (456LL, 0));\n+  d64 = (decimal64) d;\n+  VERIFY (d64 == make_decimal64 (567LL, 0));\n+  d64 = (decimal64) ld;\n+  VERIFY (d64 == make_decimal64 (678LL, 0));\n+}\n+\n+void\n+conversion_from_float_128 ()\n+{\n+  decimal32 d32(123);\n+  decimal64 d64(234);\n+  decimal128 d128(345);\n+  float f = 456.F;\n+  double d = 567.;\n+  long double ld = 678.L;\n+\n+  d128 = d32;\n+  VERIFY (d128 == make_decimal128 (123LL, 0));\n+  d128 = d64;\n+  VERIFY (d128 == make_decimal128 (234LL, 0));\n+  d128 = (decimal128) f;\n+  VERIFY (d128 == make_decimal128 (456LL, 0));\n+  d128 = (decimal128) d;\n+  VERIFY (d128 == make_decimal128 (567LL, 0));\n+  d128 = (decimal128) ld;\n+  VERIFY (d128 == make_decimal128 (678LL, 0));\n+}\n+\n+int\n+main ()\n+{\n+  conversion_from_float_32 ();\n+  conversion_from_float_64 ();\n+  conversion_from_float_128 ();\n+}"}, {"sha": "5ba1806eb68b4918372c80bfbf1e9661a68ac4f0", "filename": "libstdc++-v3/testsuite/decimal/conversion-from-integral.cc", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-integral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-integral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-integral.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,193 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.2.3  Conversion from integral type (decimal32).\n+// ISO/IEC TR 24733  3.2.3.3  Conversion from integral type (decimal64).\n+// ISO/IEC TR 24733  3.2.4.3  Conversion from integral type (decimal128).\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+void\n+conversion_from_integral_p32 ()\n+{\n+  decimal32 d;\n+  decimal32 from_si (1);\n+  decimal32 from_ui (2U);\n+  decimal32 from_sl (3L);\n+  decimal32 from_ul (4UL);\n+  decimal32 from_sll (5LL);\n+  decimal32 from_ull (6ULL);\n+\n+  d++; VERIFY (from_si == d);\n+  d++; VERIFY (from_ui == d);\n+  d++; VERIFY (from_sl == d);\n+  d++; VERIFY (from_ul == d);\n+  d++; VERIFY (from_sll == d);\n+  d++; VERIFY (from_ull == d);\n+\n+  from_si = 7;\n+  d++; VERIFY (from_si == d);\n+  from_ui = 8U;\n+  d++; VERIFY (from_ui == d);\n+  from_sl = 9L;\n+  d++; VERIFY (from_sl == d);\n+  from_ul = 10UL;\n+  d++; VERIFY (from_ul == d);\n+  from_sll = 11LL;\n+  d++; VERIFY (from_sll == d);\n+  from_ull = 12ULL;\n+  d++; VERIFY (from_ull == d);\n+}\n+\n+void\n+conversion_from_integral_m32 ()\n+{\n+  decimal32 d;\n+  decimal32 from_si (-1);\n+  decimal32 from_sl (-2L);\n+  decimal32 from_sll (-3LL);\n+\n+  d--; VERIFY (from_si == d);\n+  d--; VERIFY (from_sl == d);\n+  d--; VERIFY (from_sll == d);\n+\n+  from_si = -4;\n+  d--; VERIFY (from_si == d);\n+  from_sl = -5L;\n+  d--; VERIFY (from_sl == d);\n+  from_sll = -6LL;\n+  d--; VERIFY (from_sll == d);\n+}\n+\n+void\n+conversion_from_integral_p64 ()\n+{\n+  decimal64 d;\n+  decimal64 from_si (1);\n+  decimal64 from_ui (2U);\n+  decimal64 from_sl (3L);\n+  decimal64 from_ul (4UL);\n+  decimal64 from_sll (5LL);\n+  decimal64 from_ull (6ULL);\n+\n+  d++; VERIFY (from_si == d);\n+  d++; VERIFY (from_ui == d);\n+  d++; VERIFY (from_sl == d);\n+  d++; VERIFY (from_ul == d);\n+  d++; VERIFY (from_sll == d);\n+  d++; VERIFY (from_ull == d);\n+\n+  from_si = 7;\n+  d++; VERIFY (from_si == d);\n+  from_ui = 8U;\n+  d++; VERIFY (from_ui == d);\n+  from_sl = 9L;\n+  d++; VERIFY (from_sl == d);\n+  from_ul = 10UL;\n+  d++; VERIFY (from_ul == d);\n+  from_sll = 11LL;\n+  d++; VERIFY (from_sll == d);\n+  from_ull = 12ULL;\n+  d++; VERIFY (from_ull == d);\n+}\n+\n+void\n+conversion_from_integral_m64 ()\n+{\n+  decimal64 d;\n+  decimal64 from_si (-1);\n+  decimal64 from_sl (-2L);\n+  decimal64 from_sll (-3LL);\n+\n+  d--; VERIFY (from_si == d);\n+  d--; VERIFY (from_sl == d);\n+  d--; VERIFY (from_sll == d);\n+\n+  from_si = -4;\n+  d--; VERIFY (from_si == d);\n+  from_sl = -5L;\n+  d--; VERIFY (from_sl == d);\n+  from_sll = -6LL;\n+  d--; VERIFY (from_sll == d);\n+}\n+\n+void\n+conversion_from_integral_p128 ()\n+{\n+  decimal128 d;\n+  decimal128 from_si (1);\n+  decimal128 from_ui (2U);\n+  decimal128 from_sl (3L);\n+  decimal128 from_ul (4UL);\n+  decimal128 from_sll (5LL);\n+  decimal128 from_ull (6ULL);\n+\n+  d++; VERIFY (from_si == d);\n+  d++; VERIFY (from_ui == d);\n+  d++; VERIFY (from_sl == d);\n+  d++; VERIFY (from_ul == d);\n+  d++; VERIFY (from_sll == d);\n+  d++; VERIFY (from_ull == d);\n+\n+  from_si = 7;\n+  d++; VERIFY (from_si == d);\n+  from_ui = 8U;\n+  d++; VERIFY (from_ui == d);\n+  from_sl = 9L;\n+  d++; VERIFY (from_sl == d);\n+  from_ul = 10UL;\n+  d++; VERIFY (from_ul == d);\n+  from_sll = 11LL;\n+  d++; VERIFY (from_sll == d);\n+  from_ull = 12ULL;\n+}\n+\n+void\n+conversion_from_integral_m128 ()\n+{\n+  decimal128 d;\n+  decimal128 from_si (-1);\n+  decimal128 from_sl (-2L);\n+  decimal128 from_sll (-3LL);\n+\n+  d--; VERIFY (from_si == d);\n+  d--; VERIFY (from_sl == d);\n+  d--; VERIFY (from_sll == d);\n+\n+  from_si = -4;\n+  d--; VERIFY (from_si == d);\n+  from_sl = -5L;\n+  d--; VERIFY (from_sl == d);\n+  from_sll = -6LL;\n+  d--; VERIFY (from_sll == d);\n+}\n+\n+int\n+main ()\n+{\n+  conversion_from_integral_p32 ();\n+  conversion_from_integral_m32 ();\n+  conversion_from_integral_p64 ();\n+  conversion_from_integral_m64 ();\n+  conversion_from_integral_p128 ();\n+  conversion_from_integral_m128 ();\n+}"}, {"sha": "9a9e335cf6ef9f9a6833a9f3d8618c6df84235fb", "filename": "libstdc++-v3/testsuite/decimal/conversion-to-generic-float.cc", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-generic-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-generic-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-generic-float.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,105 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.6  Conversion to generic floating-point type.\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+void\n+conversion_to_generic_float_32 ()\n+{\n+  std::decimal::decimal32 d32(123);\n+  float f;\n+  double d;\n+  long double ld;\n+\n+  f = decimal32_to_float (d32);\n+  VERIFY (f == 123.F);\n+  d = decimal32_to_double (d32);\n+  VERIFY (d == 123.);\n+  ld = decimal32_to_long_double (d32);\n+  VERIFY (ld == 123.L);\n+\n+  d32++;\n+  f = decimal_to_float (d32);\n+  VERIFY (f == 124.F);\n+  d = decimal_to_double (d32);\n+  VERIFY (d == 124.);\n+  ld = decimal_to_long_double (d32);\n+  VERIFY (ld == 124.L);\n+}\n+\n+void\n+conversion_to_generic_float_64 ()\n+{\n+  std::decimal::decimal64 d64(234);\n+  float f;\n+  double d;\n+  long double ld;\n+\n+  f = decimal64_to_float (d64);\n+  VERIFY (f == 234.F);\n+  d = decimal64_to_double (d64);\n+  VERIFY (d == 234.);\n+  ld = decimal64_to_long_double (d64);\n+  VERIFY (ld == 234.L);\n+\n+  d64++;\n+  f = decimal_to_float (d64);\n+  VERIFY (f == 235.F);\n+  d = decimal_to_double (d64);\n+  VERIFY (d == 235.);\n+  ld = decimal_to_long_double (d64);\n+  VERIFY (ld == 235.L);\n+}\n+\n+void\n+conversion_to_generic_float_128 ()\n+{\n+  std::decimal::decimal128 d128(345);\n+  float f;\n+  double d;\n+  long double ld;\n+\n+  f = decimal128_to_float (d128);\n+  VERIFY (f == 345.F);\n+  d = decimal128_to_double (d128);\n+  VERIFY (d == 345.);\n+  ld = decimal128_to_long_double (d128);\n+  VERIFY (ld == 345.L);\n+\n+  d128++;\n+  f = decimal_to_float (d128);\n+  VERIFY (f == 346.F);\n+  d = decimal_to_double (d128);\n+  VERIFY (d == 346.);\n+  ld = decimal_to_long_double (d128);\n+  VERIFY (ld == 346.L);\n+}\n+\n+int\n+main ()\n+{\n+  conversion_to_generic_float_32 ();\n+  conversion_to_generic_float_64 ();\n+  conversion_to_generic_float_128 ();\n+}"}, {"sha": "36c5485c97a611fdeb43c45be3743e10180176e5", "filename": "libstdc++-v3/testsuite/decimal/conversion-to-integral.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-integral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-integral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-integral.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.2.4  Conversion to integral type (decimal32).\n+// ISO/IEC TR 24733  3.2.3.4  Conversion to integral type (decimal64).\n+// ISO/IEC TR 24733  3.2.4.4  Conversion to integral type (decimal128).\n+\n+#include <decimal/decimal>\n+#include <climits>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// Use extension to replace implicit long long conversion with function call.\n+#define LONGLONG(X) decimal_to_long_long(X)\n+\n+using namespace std::decimal;\n+\n+void\n+conversion_to_integral_32 (void)\n+{\n+  #undef MAXVAL\n+  #define MAXVAL 999999LL\n+  decimal32 a, b (1), c (-1), d (MAXVAL), e (-MAXVAL);\n+  long long ll;\n+\n+  ll = LONGLONG (a); VERIFY (ll == 0LL);\n+  ll = LONGLONG (b); VERIFY (ll == 1LL);\n+  ll = LONGLONG (c); VERIFY (ll == -1LL);\n+  ll = LONGLONG (d); VERIFY (ll == MAXVAL);\n+  ll = LONGLONG (e); VERIFY (ll == -MAXVAL);\n+}\n+\n+void\n+conversion_to_integral_64 (void)\n+{\n+  #undef MAXVAL\n+  #define MAXVAL 999999999999999LL\n+  decimal64 a, b (1), c (-1), d (MAXVAL), e (-MAXVAL);\n+  long long ll;\n+\n+  ll = LONGLONG (a); VERIFY (ll == 0LL);\n+  ll = LONGLONG (b); VERIFY (ll == 1LL);\n+  ll = LONGLONG (c); VERIFY (ll == -1LL);\n+  ll = LONGLONG (d); VERIFY (ll == MAXVAL);\n+  ll = LONGLONG (e); VERIFY (ll == -MAXVAL);\n+}\n+\n+void\n+conversion_to_integral_128 (void)\n+{\n+  #undef MAXVAL\n+  #define MAXVAL LONG_LONG_MAX\n+  decimal128 a, b (1), c (-1), d (MAXVAL), e (-MAXVAL);\n+  long long ll;\n+\n+  ll = LONGLONG (a); VERIFY (ll == 0LL);\n+  ll = LONGLONG (b); VERIFY (ll == 1LL);\n+  ll = LONGLONG (c); VERIFY (ll == -1LL);\n+  ll = LONGLONG (d); VERIFY (ll == MAXVAL);\n+  ll = LONGLONG (e); VERIFY (ll == -MAXVAL);\n+}\n+\n+int\n+main ()\n+{\n+  conversion_to_integral_32 ();\n+  conversion_to_integral_64 ();\n+  conversion_to_integral_128 ();\n+}"}, {"sha": "378741b6f27bcf265e0413b2241e2a14140160bf", "filename": "libstdc++-v3/testsuite/decimal/ctor.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fctor.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.2.1  Construct/copy/destroy (decimal32).\n+// ISO/IEC TR 24733  3.2.3.1  Construct/copy/destroy (decimal64).\n+// ISO/IEC TR 24733  3.2.4.1  Construct/copy/destroy (decimal128).\n+\n+// Test the default constructor.\n+\n+#include <decimal/decimal>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+void\n+ctor_32 (void)\n+{\n+  decimal32 a;\n+  float b __attribute__((mode(SD))) = 0.e-101DF;\n+\n+  VERIFY (memcmp (&a, &b, 4) == 0);\n+}\n+\n+void\n+ctor_64 (void)\n+{\n+  decimal64 a;\n+  float b __attribute__((mode(DD))) = 0.e-398DD;\n+\n+  VERIFY (memcmp (&a, &b, 8) == 0);\n+}\n+\n+void\n+ctor_128 (void)\n+{\n+  decimal128 a;\n+  float b __attribute__((mode(TD))) = 0.e-6176DL;\n+\n+  VERIFY (memcmp (&a, &b, 16) == 0);\n+}\n+\n+int\n+main ()\n+{\n+  ctor_32 ();\n+  ctor_64 ();\n+  ctor_128 ();\n+}"}, {"sha": "690224d452a329e95da24143b10b452f0db3167a", "filename": "libstdc++-v3/testsuite/decimal/incdec-memfunc.cc", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec-memfunc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec-memfunc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec-memfunc.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,181 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.2.5  Increment and decrement operators (decimal32).\n+// ISO/IEC TR 24733  3.2.3.5  Increment and decrement operators (decimal64).\n+// ISO/IEC TR 24733  3.2.4.5  Increment and decrement operators (decimal128).\n+\n+// Access member functions directly.\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+// Use extension to replace implicit long long conversion with function call.\n+#define LONGLONG(X) decimal_to_long_long(X)\n+\n+using namespace std::decimal;\n+\n+void\n+incdec32 (void)\n+{\n+  int ival;\n+  std::decimal::decimal32 a(11), b, c;\n+\n+  // Verify that we get the expected value of b after assignment.\n+  b = a;\n+  ival = LONGLONG (b); VERIFY (ival == 11);\n+\n+  // Check that the increment and decrement operators change the value\n+  // of the original class.\n+  b = a;\n+  b.operator++();\n+  ival = LONGLONG (b); VERIFY (ival == 12);\n+\n+  b = a;\n+  b.operator++(1);\n+  ival = LONGLONG (b); VERIFY (ival == 12);\n+\n+  b = a;\n+  b.operator--();\n+  ival = LONGLONG (b); VERIFY (ival == 10);\n+\n+  b = a;\n+  b.operator--(1);\n+  ival = LONGLONG (b); VERIFY (ival == 10);\n+\n+  // Check that the increment and decrement operators return the\n+  // correct value.\n+  b = a;\n+  c = b.operator++();\n+  ival = LONGLONG (c); VERIFY (ival == 12);\n+\n+  b = a;\n+  c = b.operator++(1);\n+  ival = LONGLONG (c); VERIFY (ival == 11);\n+\n+  b = a;\n+  c = b.operator--();\n+  ival = LONGLONG (c); VERIFY (ival == 10);\n+\n+  b = a;\n+  c = b.operator--(1);\n+  ival = LONGLONG (c); VERIFY (ival == 11);\n+}\n+\n+void\n+incdec64 (void)\n+{\n+  int ival;\n+  std::decimal::decimal64 a(11), b, c;\n+\n+  // Verify that we get the expected value of b after assignment.\n+  b = a;\n+  ival = LONGLONG (b); VERIFY (ival == 11);\n+\n+  // Check that the increment and decrement operators change the value\n+  // of the original class.\n+  b = a;\n+  b.operator++();\n+  ival = LONGLONG (b); VERIFY (ival == 12);\n+\n+  b = a;\n+  b.operator++(1);\n+  ival = LONGLONG (b); VERIFY (ival == 12);\n+\n+  b = a;\n+  b.operator--();\n+  ival = LONGLONG (b); VERIFY (ival == 10);\n+\n+  b = a;\n+  b.operator--(1);\n+  ival = LONGLONG (b); VERIFY (ival == 10);\n+\n+  // Check that the increment and decrement operators return the\n+  // correct value.\n+  b = a;\n+  c = b.operator++();\n+  ival = LONGLONG (c); VERIFY (ival == 12);\n+\n+  b = a;\n+  c = b.operator++(1);\n+  ival = LONGLONG (c); VERIFY (ival == 11);\n+\n+  b = a;\n+  c = b.operator--();\n+  ival = LONGLONG (c); VERIFY (ival == 10);\n+\n+  b = a;\n+  c = b.operator--(1);\n+  ival = LONGLONG (c); VERIFY (ival == 11);\n+}\n+\n+void\n+incdec128 (void)\n+{\n+  int ival;\n+  std::decimal::decimal128 a(11), b, c;\n+\n+  // Verify that we get the expected value of b after assignment.\n+  b = a;\n+  ival = LONGLONG (b); VERIFY (ival == 11);\n+\n+  // Check that the increment and decrement operators change the value\n+  // of the original class.\n+  b = a;\n+  b.operator++();\n+  ival = LONGLONG (b); VERIFY (ival == 12);\n+\n+  b = a;\n+  b.operator++(1);\n+  ival = LONGLONG (b); VERIFY (ival == 12);\n+\n+  b = a;\n+  b.operator--();\n+  ival = LONGLONG (b); VERIFY (ival == 10);\n+\n+  b = a;\n+  b.operator--(1);\n+  ival = LONGLONG (b); VERIFY (ival == 10);\n+\n+  // Check that the increment and decrement operators return the\n+  // correct value.\n+  b = a;\n+  c = b.operator++();\n+  ival = LONGLONG (c); VERIFY (ival == 12);\n+\n+  b = a;\n+  c = b.operator++(1);\n+  ival = LONGLONG (c); VERIFY (ival == 11);\n+\n+  b = a;\n+  c = b.operator--();\n+  ival = LONGLONG (c); VERIFY (ival == 10);\n+\n+  b = a;\n+  c = b.operator--(1);\n+  ival = LONGLONG (c); VERIFY (ival == 11);\n+}\n+\n+int\n+main ()\n+{\n+  incdec32 ();\n+  incdec64 ();\n+  incdec128 ();\n+}"}, {"sha": "6286395feccf557537cdbd765a95be296b66c3d5", "filename": "libstdc++-v3/testsuite/decimal/incdec.cc", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,179 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.2.5  Increment and decrement operators (decimal32).\n+// ISO/IEC TR 24733  3.2.3.5  Increment and decrement operators (decimal64).\n+// ISO/IEC TR 24733  3.2.4.5  Increment and decrement operators (decimal128).\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+// Use extension to replace implicit long long conversion with function call.\n+#define LONGLONG(X) decimal_to_long_long(X)\n+\n+using namespace std::decimal;\n+\n+void\n+incdec32 (void)\n+{\n+  int ival;\n+  std::decimal::decimal32 a(11), b, c;\n+\n+  // Verify that we get the expected value of b after assignment.\n+  b = a;\n+  ival = LONGLONG (b); VERIFY (ival == 11);\n+\n+  // Check that the increment and decrement operators change the value\n+  // of the original class.\n+  b = a;\n+  ++b;\n+  ival = LONGLONG (b); VERIFY (ival == 12);\n+\n+  b = a;\n+  b++;\n+  ival = LONGLONG (b); VERIFY (ival == 12);\n+\n+  b = a;\n+  --b;\n+  ival = LONGLONG (b); VERIFY (ival == 10);\n+\n+  b = a;\n+  b--;\n+  ival = LONGLONG (b); VERIFY (ival == 10);\n+\n+  // Check that the increment and decrement operators return the\n+  // correct value.\n+  b = a;\n+  c = ++b;\n+  ival = LONGLONG (c); VERIFY (ival == 12);\n+\n+  b = a;\n+  c = b++;\n+  ival = LONGLONG (c); VERIFY (ival == 11);\n+\n+  b = a;\n+  c = --b;\n+  ival = LONGLONG (c); VERIFY (ival == 10);\n+\n+  b = a;\n+  c = b--;\n+  ival = LONGLONG (c); VERIFY (ival == 11);\n+}\n+\n+void\n+incdec64 (void)\n+{\n+  int ival;\n+  std::decimal::decimal64 a(11), b, c;\n+\n+  // Verify that we get the expected value of b after assignment.\n+  b = a;\n+  ival = LONGLONG (b); VERIFY (ival == 11);\n+\n+  // Check that the increment and decrement operators change the value\n+  // of the original class.\n+  b = a;\n+  ++b;\n+  ival = LONGLONG (b); VERIFY (ival == 12);\n+\n+  b = a;\n+  b++;\n+  ival = LONGLONG (b); VERIFY (ival == 12);\n+\n+  b = a;\n+  --b;\n+  ival = LONGLONG (b); VERIFY (ival == 10);\n+\n+  b = a;\n+  b--;\n+  ival = LONGLONG (b); VERIFY (ival == 10);\n+\n+  // Check that the increment and decrement operators return the\n+  // correct value.\n+  b = a;\n+  c = ++b;\n+  ival = LONGLONG (c); VERIFY (ival == 12);\n+\n+  b = a;\n+  c = b++;\n+  ival = LONGLONG (c); VERIFY (ival == 11);\n+\n+  b = a;\n+  c = --b;\n+  ival = LONGLONG (c); VERIFY (ival == 10);\n+\n+  b = a;\n+  c = b--;\n+  ival = LONGLONG (c); VERIFY (ival == 11);\n+}\n+\n+void\n+incdec128 (void)\n+{\n+  int ival;\n+  std::decimal::decimal128 a(11), b, c;\n+\n+  // Verify that we get the expected value of b after assignment.\n+  b = a;\n+  ival = LONGLONG (b); VERIFY (ival == 11);\n+\n+  // Check that the increment and decrement operators change the value\n+  // of the original class.\n+  b = a;\n+  ++b;\n+  ival = LONGLONG (b); VERIFY (ival == 12);\n+\n+  b = a;\n+  b++;\n+  ival = LONGLONG (b); VERIFY (ival == 12);\n+\n+  b = a;\n+  --b;\n+  ival = LONGLONG (b); VERIFY (ival == 10);\n+\n+  b = a;\n+  b--;\n+  ival = LONGLONG (b); VERIFY (ival == 10);\n+\n+  // Check that the increment and decrement operators return the\n+  // correct value.\n+  b = a;\n+  c = ++b;\n+  ival = LONGLONG (c); VERIFY (ival == 12);\n+\n+  b = a;\n+  c = b++;\n+  ival = LONGLONG (c); VERIFY (ival == 11);\n+\n+  b = a;\n+  c = --b;\n+  ival = LONGLONG (c); VERIFY (ival == 10);\n+\n+  b = a;\n+  c = b--;\n+  ival = LONGLONG (c); VERIFY (ival == 11);\n+}\n+\n+int\n+main ()\n+{\n+  incdec32 ();\n+  incdec64 ();\n+  incdec128 ();\n+}"}, {"sha": "7be1c7dd208e31959f042a1408d337bafd73f9f9", "filename": "libstdc++-v3/testsuite/decimal/make-decimal.cc", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmake-decimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmake-decimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmake-decimal.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,132 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.5  Initialization from coefficient and exponent.\n+\n+#include <decimal/decimal>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+#define PASTE2(A,B) A ## B\n+#define PASTE(A,B) PASTE2(A,B)\n+\n+#define TESTVAL_NEG(COEFF,ESIGN,EXP,SUF,NUM,SIZE)\t\t\t\\\n+  x = PASTE(PASTE(PASTE(PASTE(PASTE(COEFF,.),E),ESIGN),EXP),SUF);\t\\\n+  sll = PASTE(COEFF,LL);\t\t\t\t\t\t\\\n+  i = ESIGN EXP;\t\t\t\t\t\t\t\\\n+  a = PASTE(make_decimal,32) (sll, i);\t\t\t\t\t\\\n+  b = PASTE(make_decimal,32) (PASTE(COEFF,LL), ESIGN EXP);\t\\\n+  VERIFY ((__builtin_memcmp ((void *)&x, (void *)&a, SIZE) == 0)\t\\\n+          && (__builtin_memcmp ((void *)&x, (void *)&b,SIZE) == 0));\n+\n+#define TESTVAL_NONNEG(COEFF,ESIGN,EXP,SUF,NUM,SIZE)\t\t\t\\\n+  x = PASTE(PASTE(PASTE(PASTE(PASTE(COEFF,.),E),ESIGN),EXP),SUF);\t\\\n+  sll = PASTE(COEFF,LL);\t\t\t\t\t\t\\\n+  ull = PASTE(COEFF,ULL);\t\t\t\t\t\t\\\n+  i = ESIGN EXP;\t\t\t\t\t\t\t\\\n+  a = PASTE(make_decimal,32) (sll, i);\t\t\t\t\t\\\n+  b = PASTE(make_decimal,32) (PASTE(COEFF,LL), ESIGN EXP);\t\t\\\n+  c = PASTE(make_decimal,32) (ull, i);\t\t\t\t\t\\\n+  d = PASTE(make_decimal,32) (PASTE(COEFF,ULL), ESIGN EXP);\t\t\\\n+  VERIFY ((__builtin_memcmp ((void *)&x, (void *)&a, SIZE) == 0)\t\\\n+          && (__builtin_memcmp ((void *)&x, (void *)&b,SIZE) == 0)\t\\\n+          && (__builtin_memcmp ((void *)&x, (void *)&c,SIZE) == 0)\t\\\n+          && (__builtin_memcmp ((void *)&x, (void *)&d,SIZE) == 0));\n+\n+using namespace std::decimal;\n+\n+void\n+make_decimal_32 (void)\n+{\n+  decimal32 a, b, c, d;\n+  float x __attribute__((mode(SD)));\n+  int i;\n+  unsigned long sz = sizeof (decimal32);\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG (0, +, 0, DF, 32, sz); \n+  TESTVAL_NONNEG (5, +, 1, DF, 32, sz);\n+  TESTVAL_NONNEG (50, +, 0, DF, 32, sz);\n+  TESTVAL_NONNEG (500, +, 0, DF, 32, sz);\n+  TESTVAL_NEG (-25, -, 3, DF, 32, sz)\n+  TESTVAL_NEG (-500, +, 0, DF, 32, sz);\n+  TESTVAL_NONNEG (999999, +, 91, DF, 32, sz);\n+  TESTVAL_NONNEG (1, -, 9, DF, 32, sz);\n+  TESTVAL_NONNEG (1, -, 90, DF, 32, sz);\n+  TESTVAL_NONNEG (1, -, 95, DF, 32, sz);\n+  TESTVAL_NONNEG (1, -, 101, DF, 32, sz);\n+  TESTVAL_NEG (-1, -, 101, DF, 32, sz);\n+}\n+\n+void\n+make_decimal_64 (void)\n+{\n+  decimal64 a, b, c, d;\n+  float x __attribute__((mode(DD)));\n+  int i;\n+  unsigned long sz = sizeof (decimal64);\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG (0, +, 0, DF, 64, sz); \n+  TESTVAL_NONNEG (5, +, 1, DF, 64, sz);\n+  TESTVAL_NONNEG (50, +, 0, DF, 64, sz);\n+  TESTVAL_NONNEG (500, +, 0, DF, 64, sz);\n+  TESTVAL_NEG (-25, -, 3, DF, 64, sz)\n+  TESTVAL_NEG (-500, +, 0, DF, 64, sz);\n+  TESTVAL_NONNEG (999999, +, 91, DF, 64, sz);\n+  TESTVAL_NONNEG (1, -, 9, DF, 64, sz);\n+  TESTVAL_NONNEG (1, -, 90, DF, 64, sz);\n+  TESTVAL_NONNEG (1, -, 95, DF, 64, sz);\n+  TESTVAL_NONNEG (1, -, 101, DF, 64, sz);\n+  TESTVAL_NEG (-1, -, 101, DF, 64, sz);\n+}\n+\n+void\n+make_decimal_128 (void)\n+{\n+  decimal128 a, b, c, d;\n+  float x __attribute__((mode(TD)));\n+  int i;\n+  unsigned long sz = sizeof (decimal128);\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG (0, +, 0, DF, 128, sz); \n+  TESTVAL_NONNEG (5, +, 1, DF, 128, sz);\n+  TESTVAL_NONNEG (50, +, 0, DF, 128, sz);\n+  TESTVAL_NONNEG (500, +, 0, DF, 128, sz);\n+  TESTVAL_NEG (-25, -, 3, DF, 128, sz)\n+  TESTVAL_NEG (-500, +, 0, DF, 128, sz);\n+  TESTVAL_NONNEG (999999, +, 91, DF, 128, sz);\n+  TESTVAL_NONNEG (1, -, 9, DF, 128, sz);\n+  TESTVAL_NONNEG (1, -, 90, DF, 128, sz);\n+  TESTVAL_NONNEG (1, -, 95, DF, 128, sz);\n+  TESTVAL_NONNEG (1, -, 101, DF, 128, sz);\n+  TESTVAL_NEG (-1, -, 101, DF, 128, sz);\n+}\n+\n+int\n+main ()\n+{\n+  make_decimal_32 ();\n+  make_decimal_64 ();\n+  make_decimal_128 ();\n+}"}, {"sha": "3cf3f7d00745eb5fc9e21fb6022e0245ab72b9b5", "filename": "libstdc++-v3/testsuite/decimal/mixed-mode_neg.cc", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode_neg.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,206 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-require-effective-target-dfp }\n+\n+// Test that binary operators do not accept mixed decimal and generic\n+// floating-point operands.  This isn't explicity prohibited in\n+// ISO/IEC TR 24733 but it is prohibited in C, and in C++ there should\n+// not be an implicit conversion from a decimal floating-point type to\n+// a generic floating-point type.\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+decimal32 a32, b32, c32;\n+decimal64 a64, b64, c64;\n+decimal128 a128, b128, c128;\n+float f;\n+double d;\n+long double ld;\n+bool b1, b2, b3, b4, b5, b6;\n+\n+void\n+bad_add (void)\n+{\n+  a32 = b32 + f;\t// { dg-error \"error\" }\n+  a32 = ld + b32;\t// { dg-error \"error\" }\n+  a64 = b64 + d;\t// { dg-error \"error\" }\n+  a64 = ld + b64;\t// { dg-error \"error\" }\n+  a128 = b128 + ld;\t// { dg-error \"error\" }\n+  a128 = d + b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_subtract (void)\n+{\n+  a32 = b32 - f;\t// { dg-error \"error\" }\n+  a32 = ld - b32;\t// { dg-error \"error\" }\n+  a64 = b64 - d;\t// { dg-error \"error\" }\n+  a64 = ld - b64;\t// { dg-error \"error\" }\n+  a128 = b128 - ld;\t// { dg-error \"error\" }\n+  a128 = d - b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_multiply (void)\n+{\n+  a32 = b32 * f;\t// { dg-error \"error\" }\n+  a32 = ld * b32;\t// { dg-error \"error\" }\n+  a64 = b64 * d;\t// { dg-error \"error\" }\n+  a64 = ld * b64;\t// { dg-error \"error\" }\n+  a128 = b128 * ld;\t// { dg-error \"error\" }\n+  a128 = d * b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_divide (void)\n+{\n+  a32 = b32 / f;\t// { dg-error \"error\" }\n+  a32 = ld / b32;\t// { dg-error \"error\" }\n+  a64 = b64 / d;\t// { dg-error \"error\" }\n+  a64 = ld / b64;\t// { dg-error \"error\" }\n+  a128 = b128 / ld;\t// { dg-error \"error\" }\n+  a128 = d / b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_eq (void)\n+{\n+  b1 = b32 == f;\t// { dg-error \"error\" }\n+  b2 = ld == b32;\t// { dg-error \"error\" }\n+  b3 = b64 == d;\t// { dg-error \"error\" }\n+  b4 = ld == b64;\t// { dg-error \"error\" }\n+  b5 = b128 == ld;\t// { dg-error \"error\" }\n+  b6 = d == b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_ne (void)\n+{\n+  b1 = b32 != f;\t// { dg-error \"error\" }\n+  b2 = ld != b32;\t// { dg-error \"error\" }\n+  b3 = b64 != d;\t// { dg-error \"error\" }\n+  b4 = ld != b64;\t// { dg-error \"error\" }\n+  b5 = b128 != ld;\t// { dg-error \"error\" }\n+  b6 = d != b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_lt (void)\n+{\n+  b1 = b32 < f;\t\t// { dg-error \"error\" }\n+  b2 = ld < b32;\t// { dg-error \"error\" }\n+  b3 = b64 < d;\t\t// { dg-error \"error\" }\n+  b4 = ld < b64;\t// { dg-error \"error\" }\n+  b5 = b128 < ld;\t// { dg-error \"error\" }\n+  b6 = d < b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_le (void)\n+{\n+  b1 = b32 <= f;\t// { dg-error \"error\" }\n+  b2 = ld <= b32;\t// { dg-error \"error\" }\n+  b3 = b64 <= d;\t// { dg-error \"error\" }\n+  b4 = ld <= b64;\t// { dg-error \"error\" }\n+  b5 = b128 <= ld;\t// { dg-error \"error\" }\n+  b6 = d <= b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_gt (void)\n+{\n+  b1 = b32 > f;\t\t// { dg-error \"error\" }\n+  b2 = ld > b32;\t// { dg-error \"error\" }\n+  b3 = b64 > d;\t\t// { dg-error \"error\" }\n+  b4 = ld > b64;\t// { dg-error \"error\" }\n+  b5 = b128 > ld;\t// { dg-error \"error\" }\n+  b6 = d > b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_ge (void)\n+{\n+  b1 = b32 >= f;\t// { dg-error \"error\" }\n+  b2 = ld >= b32;\t// { dg-error \"error\" }\n+  b3 = b64 >= d;\t// { dg-error \"error\" }\n+  b4 = ld >= b64;\t// { dg-error \"error\" }\n+  b5 = b128 >= ld;\t// { dg-error \"error\" }\n+  b6 = d >= b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_pluseq (void)\n+{\n+  a32 += f;\t\t// { dg-error \"error\" }\n+  a32 += d;\t\t// { dg-error \"error\" }\n+  a32 += ld;\t\t// { dg-error \"error\" }\n+  a64 += f;\t\t// { dg-error \"error\" }\n+  a64 += d;\t\t// { dg-error \"error\" }\n+  a64 += ld;\t\t// { dg-error \"error\" }\n+  a128 += f;\t\t// { dg-error \"error\" }\n+  a128 += d;\t\t// { dg-error \"error\" }\n+  a128 += ld;\t\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_minuseq (void)\n+{\n+  a32 -= f;\t\t// { dg-error \"error\" }\n+  a32 -= d;\t\t// { dg-error \"error\" }\n+  a32 -= ld;\t\t// { dg-error \"error\" }\n+  a64 -= f;\t\t// { dg-error \"error\" }\n+  a64 -= d;\t\t// { dg-error \"error\" }\n+  a64 -= ld;\t\t// { dg-error \"error\" }\n+  a128 -= f;\t\t// { dg-error \"error\" }\n+  a128 -= d;\t\t// { dg-error \"error\" }\n+  a128 -= ld;\t\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_timeseq (void)\n+{\n+  a32 *= f;\t\t// { dg-error \"error\" }\n+  a32 *= d;\t\t// { dg-error \"error\" }\n+  a32 *= ld;\t\t// { dg-error \"error\" }\n+  a64 *= f;\t\t// { dg-error \"error\" }\n+  a64 *= d;\t\t// { dg-error \"error\" }\n+  a64 *= ld;\t\t// { dg-error \"error\" }\n+  a128 *= f;\t\t// { dg-error \"error\" }\n+  a128 *= d;\t\t// { dg-error \"error\" }\n+  a128 *= ld;\t\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_divideeq (void)\n+{\n+  a32 /= f;\t\t// { dg-error \"error\" }\n+  a32 /= d;\t\t// { dg-error \"error\" }\n+  a32 /= ld;\t\t// { dg-error \"error\" }\n+  a64 /= f;\t\t// { dg-error \"error\" }\n+  a64 /= d;\t\t// { dg-error \"error\" }\n+  a64 /= ld;\t\t// { dg-error \"error\" }\n+  a128 /= f;\t\t// { dg-error \"error\" }\n+  a128 /= d;\t\t// { dg-error \"error\" }\n+  a128 /= ld;\t\t// { dg-error \"error\" }\n+}\n+\n+// { dg-excess-errors \"notes about candidates\" }"}, {"sha": "d40af81460915ef097ec5533643f111536e8aa7a", "filename": "libstdc++-v3/testsuite/decimal/operator_neg.cc", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Foperator_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Foperator_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Foperator_neg.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,160 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-require-effective-target-dfp }\n+\n+// Test that C++ binary operators that are restricted to integer operands\n+// do not accept decimal float operands.\n+\n+#include <decimal/decimal>\n+\n+using namespace std::decimal;\n+\n+decimal32 a32, b32, c32;\n+decimal64 a64, b64, c64;\n+decimal128 a128, b128, c128;\n+\n+void\n+modulus (void)\n+{\n+  a32 = b32 % c32;\t// { dg-error \"error\" } \n+  a64 = b64 % c64;\t// { dg-error \"error\" } \n+  a128 = b128 % c128;\t// { dg-error \"error\" } \n+  a128 = b32 % c128;\t// { dg-error \"error\" } \n+  a128 = b64 % c128;\t// { dg-error \"error\" } \n+  a32 = 100 % c32;\t// { dg-error \"error\" } \n+  a64 = 10 % c64;\t// { dg-error \"error\" } \n+  a128 = 1000 % c128;\t// { dg-error \"error\" } \n+  a32 = b32 % 7;\t// { dg-error \"error\" } \n+  a64 = b64 % 5;\t// { dg-error \"error\" } \n+  a128 = b128 % 3;\t// { dg-error \"error\" } \n+}\n+\n+void\n+bitwise_right_shift (void)\n+{\n+  a32 = b32 >> c32;\t// { dg-error \"error\" }\n+  a64 = b64 >> c64;\t// { dg-error \"error\" }\n+  a128 = b128 >> c128;\t// { dg-error \"error\" }\n+  a128 = b32 >> c128;\t// { dg-error \"error\" }\n+  a128 = b64 >> c128;\t// { dg-error \"error\" }\n+  a32 = 100 >> c32;\t// { dg-error \"error\" }\n+  a64 = 10 >> c64;\t// { dg-error \"error\" }\n+  a128 = 1000 >> c128;\t// { dg-error \"error\" }\n+  a32 = b32 >> 7;\t// { dg-error \"error\" }\n+  a64 = b64 >> 5;\t// { dg-error \"error\" }\n+  a128 = b128 >> 3;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bitwise_left_shift (void)\n+{\n+  a32 = b32 << c32;\t// { dg-error \"error\" } \n+  a64 = b64 << c64;\t// { dg-error \"error\" } \n+  a128 = b128 << c128;\t// { dg-error \"error\" } \n+  a128 = b32 << c128;\t// { dg-error \"error\" } \n+  a128 = b64 << c128;\t// { dg-error \"error\" } \n+  a32 = 100 << c32;\t// { dg-error \"error\" } \n+  a64 = 10 << c64;\t// { dg-error \"error\" } \n+  a128 = 1000 << c128;\t// { dg-error \"error\" } \n+  a32 = b32 << 7;\t// { dg-error \"error\" } \n+  a64 = b64 << 5;\t// { dg-error \"error\" } \n+  a128 = b128 << 3;\t// { dg-error \"error\" } \n+}\n+\n+void\n+bitwise_exclusive_or (void)\n+{\n+  a32 = b32 ^ c32;\t// { dg-error \"error\" } \n+  a64 = b64 ^ c64;\t// { dg-error \"error\" } \n+  a128 = b128 ^ c128;\t// { dg-error \"error\" } \n+  a128 = b32 ^ c128;\t// { dg-error \"error\" } \n+  a128 = b64 ^ c128;\t// { dg-error \"error\" } \n+  a32 = 100 ^ c32;\t// { dg-error \"error\" } \n+  a64 = 10 ^ c64;\t// { dg-error \"error\" } \n+  a128 = 1000 ^ c128;\t// { dg-error \"error\" } \n+  a32 = b32 ^ 7;\t// { dg-error \"error\" } \n+  a64 = b64 ^ 5;\t// { dg-error \"error\" } \n+  a128 = b128 ^ 3;\t// { dg-error \"error\" } \n+}\n+\n+void\n+bitwise_inclusive_or (void)\n+{\n+  a32 = b32 | c32;\t// { dg-error \"error\" } \n+  a64 = b64 | c64;\t// { dg-error \"error\" } \n+  a128 = b128 | c128;\t// { dg-error \"error\" } \n+  a128 = b32 | c128;\t// { dg-error \"error\" } \n+  a128 = b64 | c128;\t// { dg-error \"error\" } \n+  a32 = 100 | c32;\t// { dg-error \"error\" } \n+  a64 = 10 | c64;\t// { dg-error \"error\" } \n+  a128 = 1000 | c128;\t// { dg-error \"error\" } \n+  a32 = b32 | 7;\t// { dg-error \"error\" } \n+  a64 = b64 | 5;\t// { dg-error \"error\" } \n+  a128 = b128 | 3;\t// { dg-error \"error\" } \n+}\n+\n+void\n+logical_and (void)\n+{\n+  a32 = b32 && c32;\t// { dg-error \"error\" } \n+  a64 = b64 && c64;\t// { dg-error \"error\" } \n+  a128 = b128 && c128;\t// { dg-error \"error\" } \n+  a128 = b32 && c128;\t// { dg-error \"error\" } \n+  a128 = b64 && c128;\t// { dg-error \"error\" } \n+  a32 = 100 && c32;\t// { dg-error \"error\" } \n+  a64 = 10 && c64;\t// { dg-error \"error\" } \n+  a128 = 1000 && c128;\t// { dg-error \"error\" } \n+  a32 = b32 && 7;\t// { dg-error \"error\" } \n+  a64 = b64 && 5;\t// { dg-error \"error\" } \n+  a128 = b128 && 3;\t// { dg-error \"error\" } \n+}\n+\n+void\n+logical_or (void)\n+{\n+  a32 = b32 || c32;\t// { dg-error \"error\" } \n+  a64 = b64 || c64;\t// { dg-error \"error\" } \n+  a128 = b128 || c128;\t// { dg-error \"error\" } \n+  a128 = b32 || c128;\t// { dg-error \"error\" } \n+  a128 = b64 || c128;\t// { dg-error \"error\" } \n+  a32 = 100 || c32;\t// { dg-error \"error\" } \n+  a64 = 10 || c64;\t// { dg-error \"error\" } \n+  a128 = 1000 || c128;\t// { dg-error \"error\" } \n+  a32 = b32 || 7;\t// { dg-error \"error\" } \n+  a64 = b64 || 5;\t// { dg-error \"error\" } \n+  a128 = b128 || 3;\t// { dg-error \"error\" } \n+}\n+\n+void\n+bitwise_complement (void)\n+{\n+  a32 = ~b32;\t\t// { dg-error \"error\" } \n+  a64 = ~b64;\t\t// { dg-error \"error\" } \n+  a128 = ~b128;\t\t// { dg-error \"error\" } \n+}\n+\n+void\n+logical_not (void)\n+{\n+  a32 = !b32;\t\t// { dg-error \"error\" } \n+  a64 = !b64;\t\t// { dg-error \"error\" } \n+  a128 = !b128;\t\t// { dg-error \"error\" } \n+}\n+\n+// { dg-excess-errors \"\" { target *-*-* } }"}, {"sha": "dcb8a085ac8a6b4f3b89296f3847d77fda3e725f", "filename": "libstdc++-v3/testsuite/decimal/unary-arith.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Funary-arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Funary-arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Funary-arith.cc?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -0,0 +1,93 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target-dfp }\n+\n+// ISO/IEC TR 24733  3.2.7  Unary arithmetic operators.\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+decimal32 a32 (20), b32 (-20);\n+decimal64 a64 (124), b64 (-124);\n+decimal128 a128 (5001), b128 (-5001);\n+\n+void\n+unary_plus_32 (void)\n+{\n+  decimal32 a;\n+\n+  a = +a32; VERIFY (a == a32);\n+  a = +b32; VERIFY (a == b32);\n+}\n+\n+void\n+unary_minus_32 (void)\n+{\n+  decimal32 a;\n+\n+  a = -a32; VERIFY (a == b32);\n+  a = -b32; VERIFY (a == a32);\n+}\n+\n+void\n+unary_plus_64 (void)\n+{\n+  decimal64 a;\n+\n+  a = +a64; VERIFY (a == a64);\n+  a = +b64; VERIFY (a == b64);\n+}\n+\n+void\n+unary_minus_64 (void)\n+{\n+  decimal64 a;\n+\n+  a = -a64; VERIFY (a == b64);\n+  a = -b64; VERIFY (a == a64);\n+}\n+\n+void\n+unary_plus_128 (void)\n+{\n+  decimal128 a;\n+\n+  a = +a128; VERIFY (a == a128);\n+  a = +b128; VERIFY (a == b128);\n+}\n+\n+void\n+unary_minus_128 (void)\n+{\n+  decimal128 a;\n+\n+  a = -a128; VERIFY (a == b128);\n+  a = -b128; VERIFY (a == a128);\n+}\n+\n+int main ()\n+{\n+  unary_plus_32 ();\n+  unary_minus_32 ();\n+  unary_plus_64 ();\n+  unary_minus_64 ();\n+  unary_plus_128 ();\n+  unary_minus_128 ();\n+}"}, {"sha": "ae339496cdaac21b663f48192594868b118ae31e", "filename": "libstdc++-v3/testsuite/libstdc++-dg/conformance.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fconformance.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdc876153cc0ddcda76174f868e1722f389be04/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fconformance.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fconformance.exp?ref=4cdc876153cc0ddcda76174f868e1722f389be04", "patch": "@@ -58,6 +58,7 @@ if {[info exists tests_file] && [file exists $tests_file]} {\n     lappend subdirs \"$srcdir/ext\"\n     lappend subdirs \"$srcdir/performance\"\n     lappend subdirs \"$srcdir/tr1\"\n+    lappend subdirs \"$srcdir/decimal\"\n     verbose \"subdirs are $subdirs\"\n \n     # Find all the tests."}]}