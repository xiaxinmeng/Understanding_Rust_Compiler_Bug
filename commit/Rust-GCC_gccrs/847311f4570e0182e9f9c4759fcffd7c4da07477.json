{"sha": "847311f4570e0182e9f9c4759fcffd7c4da07477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ3MzExZjQ1NzBlMDE4MmU5ZjljNDc1OWZjZmZkN2M0ZGEwNzQ3Nw==", "commit": {"author": {"name": "Andrew Lewycky", "email": "andrew@mxc.ca", "date": "2003-03-12T22:24:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-03-12T22:24:48Z"}, "message": "re PR c++/7050 (g++ segfaults on: (i ? get_string() : throw))\n\n        PR c++/7050\n        * expr.c (store_expr): Don't attempt to store void-typed trees,\n        just evaluate them for side effects.\n        * cp/expr.c (cxx_expand_expr): Return const0_rtx for throw\n        expressions.\n\nFrom-SVN: r64268", "tree": {"sha": "c8a7fb056d60c96eb16729f4d66e63d6bfdcbd45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8a7fb056d60c96eb16729f4d66e63d6bfdcbd45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/847311f4570e0182e9f9c4759fcffd7c4da07477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847311f4570e0182e9f9c4759fcffd7c4da07477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847311f4570e0182e9f9c4759fcffd7c4da07477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847311f4570e0182e9f9c4759fcffd7c4da07477/comments", "author": {"login": "andrewlewycky", "id": 704850, "node_id": "MDQ6VXNlcjcwNDg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewlewycky", "html_url": "https://github.com/andrewlewycky", "followers_url": "https://api.github.com/users/andrewlewycky/followers", "following_url": "https://api.github.com/users/andrewlewycky/following{/other_user}", "gists_url": "https://api.github.com/users/andrewlewycky/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewlewycky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewlewycky/subscriptions", "organizations_url": "https://api.github.com/users/andrewlewycky/orgs", "repos_url": "https://api.github.com/users/andrewlewycky/repos", "events_url": "https://api.github.com/users/andrewlewycky/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewlewycky/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff8b9ca85f20291cddd44025f1f395bffe433133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8b9ca85f20291cddd44025f1f395bffe433133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff8b9ca85f20291cddd44025f1f395bffe433133"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "30dbe70a6d3be338d069b238c958334b3fafd61c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847311f4570e0182e9f9c4759fcffd7c4da07477/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847311f4570e0182e9f9c4759fcffd7c4da07477/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=847311f4570e0182e9f9c4759fcffd7c4da07477", "patch": "@@ -1,3 +1,9 @@\n+2003-03-12  Andrew Lewycky  <andrew@mxc.ca>\n+\n+\tPR c++/7050\n+\t* expr.c (store_expr): Don't attempt to store void-typed trees,\n+\tjust evaluate them for side effects.\n+\n 2003-03-12  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* cppfiles.c (cpp_rename_file, cpp_push_include): New.\n@@ -9,10 +15,10 @@\n \n 2003-03-12  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n-        * aclocal.m4: Introduce gcc_GAS_VERSION_GTE_IFELSE,\n-        _gcc_COMPUTE_GAS_VERSION.\n-        * configure.in: Use them.\n-        * configure: Regenerate.\n+\t* aclocal.m4: Introduce gcc_GAS_VERSION_GTE_IFELSE,\n+\t_gcc_COMPUTE_GAS_VERSION.\n+\t* configure.in: Use them.\n+\t* configure: Regenerate.\n \n 2003-03-12  Bob Wilson  <bob.wilson@acm.org>\n "}, {"sha": "71d753625b8fe037c085a103f6d3447c2c8e9131", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847311f4570e0182e9f9c4759fcffd7c4da07477/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847311f4570e0182e9f9c4759fcffd7c4da07477/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=847311f4570e0182e9f9c4759fcffd7c4da07477", "patch": "@@ -1,3 +1,9 @@\n+2003-03-12  Andrew Lewycky  <andrew@mxc.ca>\n+\n+\tPR c++/7050\n+\t* expr.c (cxx_expand_expr): Return const0_rtx for throw\n+\texpressions.\n+\n 2003-03-11  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/9474"}, {"sha": "160a946ef9a7cfd51fa35258eaed544f54d15c42", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847311f4570e0182e9f9c4759fcffd7c4da07477/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847311f4570e0182e9f9c4759fcffd7c4da07477/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=847311f4570e0182e9f9c4759fcffd7c4da07477", "patch": "@@ -105,7 +105,7 @@ cxx_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier)\n       \n     case THROW_EXPR:\n       expand_expr (TREE_OPERAND (exp, 0), const0_rtx, VOIDmode, 0);\n-      return NULL;\n+      return const0_rtx;\n \n     case MUST_NOT_THROW_EXPR:\n       expand_eh_region_start ();"}, {"sha": "e540fb231588b3dbd1f03bf8113527451b46b351", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847311f4570e0182e9f9c4759fcffd7c4da07477/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847311f4570e0182e9f9c4759fcffd7c4da07477/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=847311f4570e0182e9f9c4759fcffd7c4da07477", "patch": "@@ -4354,6 +4354,16 @@ store_expr (exp, target, want_value)\n   int dont_return_target = 0;\n   int dont_store_target = 0;\n \n+  if (VOID_TYPE_P (TREE_TYPE (exp)))\n+    {\n+      /* C++ can generate ?: expressions with a throw expression in one\n+\t branch and an rvalue in the other. Here, we resolve attempts to\n+\t store the throw expression's nonexistant result. */\n+      if (want_value)\n+\tabort ();\n+      expand_expr (exp, const0_rtx, VOIDmode, 0);\n+      return NULL_RTX;\n+    }\n   if (TREE_CODE (exp) == COMPOUND_EXPR)\n     {\n       /* Perform first part of compound expression, then assign from second"}]}