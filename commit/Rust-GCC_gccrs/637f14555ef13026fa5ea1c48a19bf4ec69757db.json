{"sha": "637f14555ef13026fa5ea1c48a19bf4ec69757db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM3ZjE0NTU1ZWYxMzAyNmZhNWVhMWM0OGExOWJmNGVjNjk3NTdkYg==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2010-04-27T02:40:19Z"}, "committer": {"name": "Shujing Zhao", "email": "pzhao@gcc.gnu.org", "date": "2010-04-27T02:40:19Z"}, "message": "re PR c/32207 (missing warnings about address of 'x'.)\n\ngcc/\n2010-04-27  Shujing Zhao  <pearly.zhao@oracle.com>\n\n        PR c/32207\n        * c-typeck.c (build_binary_op): Move forward check for comparison\n        pointer with null pointer constant and adjust the diagnostic message.\n\ngcc/testsuite/\n2010-04-27  Shujing Zhao  <pearly.zhao@oracle.com>\n\n        PR c/32207\n        * gcc.dg/pr32207.c: New test.\n        * gcc.dg/misc-column.c: Adjust expected warning.\n        * gcc.dg/Walways-true-1.c: Likewise.\n        * gcc.dg/Walways-true-2.c: Likewise.\n        * gcc.dg/warn-addr-cmp.c: Likewise.\n\nFrom-SVN: r158765", "tree": {"sha": "7230e18c8516cc8e381f0ff99c5b65d40e195eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7230e18c8516cc8e381f0ff99c5b65d40e195eb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/637f14555ef13026fa5ea1c48a19bf4ec69757db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637f14555ef13026fa5ea1c48a19bf4ec69757db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/637f14555ef13026fa5ea1c48a19bf4ec69757db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637f14555ef13026fa5ea1c48a19bf4ec69757db/comments", "author": null, "committer": null, "parents": [{"sha": "f04230786429c9880df751676ae8e635a07b2033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f04230786429c9880df751676ae8e635a07b2033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f04230786429c9880df751676ae8e635a07b2033"}], "stats": {"total": 128, "additions": 85, "deletions": 43}, "files": [{"sha": "26b5d22546839e4b334d743c7a4a42d8f08d576b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=637f14555ef13026fa5ea1c48a19bf4ec69757db", "patch": "@@ -1,3 +1,9 @@\n+2010-04-27  Shujing Zhao  <pearly.zhao@oracle.com>\n+\t\n+\tPR c/32207\n+\t* c-typeck.c (build_binary_op): Move forward check for comparison\n+\tpointer with null pointer constant and adjust the diagnostic message.\n+\n 2010-04-27  Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \tPR lto/42776"}, {"sha": "96b2ab156ad0782b6028e4021ac866d099dc4a6a", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=637f14555ef13026fa5ea1c48a19bf4ec69757db", "patch": "@@ -9503,6 +9503,46 @@ build_binary_op (location_t location, enum tree_code code,\n \t  && (code1 == INTEGER_TYPE || code1 == REAL_TYPE\n \t      || code1 == FIXED_POINT_TYPE || code1 == COMPLEX_TYPE))\n \tshort_compare = 1;\n+      else if (code0 == POINTER_TYPE && null_pointer_constant_p (orig_op1))\n+\t{\n+\t  if (TREE_CODE (op0) == ADDR_EXPR\n+\t      && decl_with_nonnull_addr_p (TREE_OPERAND (op0, 0)))\n+\t    {\n+\t      if (code == EQ_EXPR)\n+\t\twarning_at (location,\n+\t\t\t    OPT_Waddress,\n+\t\t\t    \"the comparison will always evaluate as %<false%> \"\n+\t\t\t    \"for the address of %qD will never be NULL\",\n+\t\t\t    TREE_OPERAND (op0, 0));\n+\t      else\n+\t\twarning_at (location,\n+\t\t\t    OPT_Waddress,\n+\t\t\t    \"the comparison will always evaluate as %<true%> \"\n+\t\t\t    \"for the address of %qD will never be NULL\",\n+\t\t\t    TREE_OPERAND (op0, 0));\n+\t    }\n+\t  result_type = type0;\n+\t}\n+      else if (code1 == POINTER_TYPE && null_pointer_constant_p (orig_op0))\n+\t{\n+\t  if (TREE_CODE (op1) == ADDR_EXPR\n+\t      && decl_with_nonnull_addr_p (TREE_OPERAND (op1, 0)))\n+\t    {\n+\t      if (code == EQ_EXPR)\n+\t\twarning_at (location,\n+\t\t\t    OPT_Waddress, \n+\t\t\t    \"the comparison will always evaluate as %<false%> \"\n+\t\t\t    \"for the address of %qD will never be NULL\",\n+\t\t\t    TREE_OPERAND (op1, 0));\n+\t      else\n+\t\twarning_at (location,\n+\t\t\t    OPT_Waddress,\n+\t\t\t    \"the comparison will always evaluate as %<true%> \"\n+\t\t\t    \"for the address of %qD will never be NULL\",\n+\t\t\t    TREE_OPERAND (op1, 0));\n+\t    }\n+\t  result_type = type1;\n+\t}\n       else if (code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n \t{\n \t  tree tt0 = TREE_TYPE (type0);\n@@ -9516,10 +9556,6 @@ build_binary_op (location_t location, enum tree_code code,\n \t     and both must be object or both incomplete.  */\n \t  if (comp_target_types (location, type0, type1))\n \t    result_type = common_pointer_type (type0, type1);\n-\t  else if (null_pointer_constant_p (orig_op0))\n-\t    result_type = type1;\n-\t  else if (null_pointer_constant_p (orig_op1))\n-\t    result_type = type0;\n \t  else if (!addr_space_superset (as0, as1, &as_common))\n \t    {\n \t      error_at (location, \"comparison of pointers to \"\n@@ -9551,24 +9587,6 @@ build_binary_op (location_t location, enum tree_code code,\n \t\t\t      (build_qualified_type (void_type_node, qual));\n \t    }\n \t}\n-      else if (code0 == POINTER_TYPE && null_pointer_constant_p (orig_op1))\n-\t{\n-\t  if (TREE_CODE (op0) == ADDR_EXPR\n-\t      && decl_with_nonnull_addr_p (TREE_OPERAND (op0, 0)))\n-\t    warning_at (location,\n-\t\t\tOPT_Waddress, \"the address of %qD will never be NULL\",\n-\t\t\tTREE_OPERAND (op0, 0));\n-\t  result_type = type0;\n-\t}\n-      else if (code1 == POINTER_TYPE && null_pointer_constant_p (orig_op0))\n-\t{\n-\t  if (TREE_CODE (op1) == ADDR_EXPR\n-\t      && decl_with_nonnull_addr_p (TREE_OPERAND (op1, 0)))\n-\t    warning_at (location,\n-\t\t\tOPT_Waddress, \"the address of %qD will never be NULL\",\n-\t\t\tTREE_OPERAND (op1, 0));\n-\t  result_type = type1;\n-\t}\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n \t  result_type = type0;"}, {"sha": "e94e8e70762aefc6bf3ecdcba603061b5f9dfde2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=637f14555ef13026fa5ea1c48a19bf4ec69757db", "patch": "@@ -1,3 +1,12 @@\n+2010-04-27  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\tPR c/32207\n+\t* gcc.dg/pr32207.c: New test.\n+\t* gcc.dg/misc-column.c: Adjust expected warning.\n+\t* gcc.dg/Walways-true-1.c: Likewise.\n+\t* gcc.dg/Walways-true-2.c: Likewise.\n+\t* gcc.dg/warn-addr-cmp.c: Likewise.\n+\n 2010-04-27  Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \tPR lto/42776"}, {"sha": "274ec32b38b706e562019efd47bee924dc732e97", "filename": "gcc/testsuite/gcc.dg/Walways-true-1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-1.c?ref=637f14555ef13026fa5ea1c48a19bf4ec69757db", "patch": "@@ -26,32 +26,32 @@ bar (int a)\n     foo (5);\n   if (&&lab)\t/* { dg-warning \"7:always evaluate as\" \"correct warning\" } */\n     foo (6);\n-  if (foo == 0)\t/* { dg-warning \"11:never be NULL\" \"correct warning\" } */\n+  if (foo == 0)\t/* { dg-warning \"11:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n     foo (7);\n   if (foo (1) == 0)\n     foo (8);\n-  if (&i == 0)\t/* { dg-warning \"10:never be NULL\" \"correct warning\" } */\n+  if (&i == 0)\t/* { dg-warning \"10:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n     foo (9);\n   if (i == 0)\n     foo (10);\n-  if (&a == 0)\t/* { dg-warning \"10:never be NULL\" \"correct warning\" } */\n+  if (&a == 0)\t/* { dg-warning \"10:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n     foo (11);\n   if (a == 0)\n     foo (12);\n-  if (&&lab == 0) /* { dg-warning \"13:never be NULL\" \"correct warning\" } */\n+  if (&&lab == 0) /* { dg-warning \"13:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n     foo (13);\n-  if (0 == foo)\t/* { dg-warning \"9:never be NULL\" \"correct warning\" } */\n+  if (0 == foo)\t/* { dg-warning \"9:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n     foo (14);\n   if (0 == foo (1))\n     foo (15);\n-  if (0 == &i)\t/* { dg-warning \"9:never be NULL\" \"correct warning\" } */\n+  if (0 == &i)\t/* { dg-warning \"9:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n     foo (16);\n   if (0 == i)\n     foo (17);\n-  if (0 == &a)\t/* { dg-warning \"9:never be NULL\" \"correct warning\" } */\n+  if (0 == &a)\t/* { dg-warning \"9:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n     foo (18);\n   if (0 == a)\n     foo (19);\n-  if (0 == &&lab) /* { dg-warning \"9:never be NULL\" \"correct warning\" } */\n+  if (0 == &&lab) /* { dg-warning \"9:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n     foo (20);\n }"}, {"sha": "3978a446188d8e4d3f149188a61b490470c1ecd0", "filename": "gcc/testsuite/gcc.dg/Walways-true-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-2.c?ref=637f14555ef13026fa5ea1c48a19bf4ec69757db", "patch": "@@ -37,11 +37,11 @@ bar (int a)\n     foo (9);\n   if (i == 0)\n     foo (10);\n-  if (&a == 0)\t/* { dg-warning \"never be NULL\" \"correct warning\" } */\n+  if (&a == 0)\t/* { dg-warning \"the comparison will always evaluate to 'false'\" \"correct warning\" } */\n     foo (11);\n   if (a == 0)\n     foo (12);\n-  if (&&lab == 0) /* { dg-warning \"never be NULL\" \"correct warning\" } */\n+  if (&&lab == 0) /* { dg-warning \"the comparison will always evaluate to 'false'\" \"correct warning\" } */\n     foo (13);\n   if (0 == foo)\n     foo (14);\n@@ -51,10 +51,10 @@ bar (int a)\n     foo (16);\n   if (0 == i)\n     foo (17);\n-  if (0 == &a)\t/* { dg-warning \"never be NULL\" \"correct warning\" } */\n+  if (0 == &a)\t/* { dg-warning \"the comparison will always evaluate to 'false'\" \"correct warning\" } */\n     foo (18);\n   if (0 == a)\n     foo (19);\n-  if (0 == &&lab) /* { dg-warning \"never be NULL\" \"correct warning\" } */\n+  if (0 == &&lab) /* { dg-warning \"the comparison will always evaluate to 'false'\" \"correct warning\" } */\n     foo (20);\n }"}, {"sha": "f69f98884d9e87ddef29261a8560e49accad0988", "filename": "gcc/testsuite/gcc.dg/misc-column.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Ftestsuite%2Fgcc.dg%2Fmisc-column.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Ftestsuite%2Fgcc.dg%2Fmisc-column.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmisc-column.c?ref=637f14555ef13026fa5ea1c48a19bf4ec69757db", "patch": "@@ -19,7 +19,7 @@ void foo (void)\n   if (p < q) /* { dg-warning \"9:comparison of distinct pointer types\" } */\n     bar ();\n \n-  if (&p == 0) /* { dg-warning \"10:will never be NULL\" } */\n+  if (&p == 0) /* { dg-warning \"10:comparison will always evaluate to 'false'\" } */\n     bar();\n \n   if (p == 4) /* { dg-warning \"9:comparison between pointer and integer\" } */"}, {"sha": "549d51a9e9d1296781dfbe1eaba2c177f44aa1b6", "filename": "gcc/testsuite/gcc.dg/pr32207.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32207.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32207.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32207.c?ref=637f14555ef13026fa5ea1c48a19bf4ec69757db", "patch": "@@ -0,0 +1,9 @@\n+/* Test warning for comparison non-null address with null pointer constant. */\n+/* Origin: Pawel Sikora <pluto@agmk.net> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Waddress\" } */\n+extern void z();\n+\n+void f() { if ( z ) z(); } /* { dg-warning \"always evaluate as\" } */\n+void g() { if ( z != 0 ) z(); } /* { dg-warning \"the comparison will always evaluate to 'true'\" } */\n+void h() { if ( z != (void*)0 ) z(); } /* { dg-warning \"the comparison will always evaluate to 'true'\" } */"}, {"sha": "c1e68f5c5987f2a4f86e08e789906f5c2f9e0ea3", "filename": "gcc/testsuite/gcc.dg/warn-addr-cmp.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-addr-cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f14555ef13026fa5ea1c48a19bf4ec69757db/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-addr-cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-addr-cmp.c?ref=637f14555ef13026fa5ea1c48a19bf4ec69757db", "patch": "@@ -36,13 +36,13 @@ test_func_cmp (void)\n int\n test_func_cmp_rhs_zero (void)\n {\n-  if (func == 0)     /* { dg-warning \"the address of 'func'\" } */\n+  if (func == 0)     /* { dg-warning \"the comparison will always evaluate to 'false'\" } */\n     return 1;\n-  if (func != 0)     /* { dg-warning \"the address of 'func'\" } */\n+  if (func != 0)     /* { dg-warning \"the comparison will always evaluate to 'true'\" } */\n     return 1;\n-  if (&var == 0)     /* { dg-warning \"the address of 'var'\" } */\n+  if (&var == 0)     /* { dg-warning \"the comparison will always evaluate to 'false'\" } */\n     return 1;\n-  if (&var != 0)     /* { dg-warning \"the address of 'var'\" } */\n+  if (&var != 0)     /* { dg-warning \"the comparison will always evaluate to 'true'\" } */\n     return 1;\n   if (weak_func == 0)\n     return 1;\n@@ -59,13 +59,13 @@ test_func_cmp_rhs_zero (void)\n int\n test_func_cmp_lhs_zero (void)\n {\n-  if (0 == func)     /* { dg-warning \"the address of 'func'\" } */\n+  if (0 == func)     /* { dg-warning \"the comparison will always evaluate to 'false'\" } */\n     return 1;\n-  if (0 != func)     /* { dg-warning \"the address of 'func'\" } */\n+  if (0 != func)     /* { dg-warning \"the comparison will always evaluate to 'true'\" } */\n     return 1;\n-  if (0 == &var)     /* { dg-warning \"the address of 'var'\" } */\n+  if (0 == &var)     /* { dg-warning \"the comparison will always evaluate to 'false'\" } */\n     return 1;\n-  if (0 != &var)     /* { dg-warning \"the address of 'var'\" } */\n+  if (0 != &var)     /* { dg-warning \"the comparison will always evaluate to 'true'\" } */\n     return 1;\n   if (0 == weak_func)\n     return 1;"}]}