{"sha": "4c5cf0b29adf3d1c90881ec44691e1189a6bf453", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM1Y2YwYjI5YWRmM2QxYzkwODgxZWM0NDY5MWUxMTg5YTZiZjQ1Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-02-02T17:46:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-02-02T17:46:56Z"}, "message": "* tree.c (handle_abi_tag_attribute): Diagnose invalid arguments.\n\nFrom-SVN: r220356", "tree": {"sha": "84f1f32d8b6cb0021381f096ab06ef0a2fc595d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84f1f32d8b6cb0021381f096ab06ef0a2fc595d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c5cf0b29adf3d1c90881ec44691e1189a6bf453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c5cf0b29adf3d1c90881ec44691e1189a6bf453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c5cf0b29adf3d1c90881ec44691e1189a6bf453", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c5cf0b29adf3d1c90881ec44691e1189a6bf453/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "2e5e2a53d18f4769d43a74addad718c5bc4e8f79", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c5cf0b29adf3d1c90881ec44691e1189a6bf453/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c5cf0b29adf3d1c90881ec44691e1189a6bf453/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4c5cf0b29adf3d1c90881ec44691e1189a6bf453", "patch": "@@ -1,3 +1,7 @@\n+2015-02-02  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.c (handle_abi_tag_attribute): Diagnose invalid arguments.\n+\n 2015-01-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* class.c, except.c, parser.c, pt.c: All callers of fatal_error"}, {"sha": "c51e42d2a40590b473d2d3f9a5ad59d900e53daa", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c5cf0b29adf3d1c90881ec44691e1189a6bf453/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c5cf0b29adf3d1c90881ec44691e1189a6bf453/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4c5cf0b29adf3d1c90881ec44691e1189a6bf453", "patch": "@@ -3501,6 +3501,50 @@ static tree\n handle_abi_tag_attribute (tree* node, tree name, tree args,\n \t\t\t  int flags, bool* no_add_attrs)\n {\n+  for (tree arg = args; arg; arg = TREE_CHAIN (arg))\n+    {\n+      tree elt = TREE_VALUE (arg);\n+      if (TREE_CODE (elt) != STRING_CST\n+\t  || (!same_type_ignoring_top_level_qualifiers_p\n+\t      (strip_array_types (TREE_TYPE (elt)),\n+\t       char_type_node)))\n+\t{\n+\t  error (\"arguments to the %qE attribute must be narrow string \"\n+\t\t \"literals\", name);\n+\t  goto fail;\n+\t}\n+      const char *begin = TREE_STRING_POINTER (elt);\n+      const char *end = begin + TREE_STRING_LENGTH (elt);\n+      for (const char *p = begin; p != end; ++p)\n+\t{\n+\t  char c = *p;\n+\t  if (p == begin)\n+\t    {\n+\t      if (!ISALPHA (c) && c != '_')\n+\t\t{\n+\t\t  error (\"arguments to the %qE attribute must contain valid \"\n+\t\t\t \"identifiers\", name);\n+\t\t  inform (input_location, \"%<%c%> is not a valid first \"\n+\t\t\t  \"character for an identifier\", c);\n+\t\t  goto fail;\n+\t\t}\n+\t    }\n+\t  else if (p == end - 1)\n+\t    gcc_assert (c == 0);\n+\t  else\n+\t    {\n+\t      if (!ISALNUM (c) && c != '_')\n+\t\t{\n+\t\t  error (\"arguments to the %qE attribute must contain valid \"\n+\t\t\t \"identifiers\", name);\n+\t\t  inform (input_location, \"%<%c%> is not a valid character \"\n+\t\t\t  \"in an identifier\", c);\n+\t\t  goto fail;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n   if (TYPE_P (*node))\n     {\n       if (!OVERLOAD_TYPE_P (*node))"}, {"sha": "34e8da3bb582a0a52275a5c9ed6b921aba310659", "filename": "gcc/testsuite/g++.dg/abi/abi-tag13.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c5cf0b29adf3d1c90881ec44691e1189a6bf453/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c5cf0b29adf3d1c90881ec44691e1189a6bf453/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag13.C?ref=4c5cf0b29adf3d1c90881ec44691e1189a6bf453", "patch": "@@ -0,0 +1,5 @@\n+const char *foo = \"bar\";\n+void __attribute((abi_tag(foo))) f1() {}  // { dg-error \"abi_tag\" }\n+void __attribute((abi_tag(L\"foo\"))) f2(); // { dg-error \"abi_tag\" }\n+void __attribute((abi_tag(\"3foo\"))) f3(); // { dg-error \"abi_tag\" }\n+void __attribute((abi_tag(1))) f5();\t  // { dg-error \"abi_tag\" }"}]}