{"sha": "185ce11b15dec339ddda83aa7a5fcb4ac200466d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg1Y2UxMWIxNWRlYzMzOWRkZGE4M2FhN2E1ZmNiNGFjMjAwNDY2ZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-07-13T19:23:57Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-07-13T19:23:57Z"}, "message": "Reverting incorrectly applied change\n\nFrom-SVN: r35021", "tree": {"sha": "021de56fc43c8eb0462c19ba75b2920850228023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/021de56fc43c8eb0462c19ba75b2920850228023"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/185ce11b15dec339ddda83aa7a5fcb4ac200466d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/185ce11b15dec339ddda83aa7a5fcb4ac200466d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/185ce11b15dec339ddda83aa7a5fcb4ac200466d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/185ce11b15dec339ddda83aa7a5fcb4ac200466d/comments", "author": null, "committer": null, "parents": [{"sha": "2021c8d296ff2d3bfaef27ece005c00c8540c7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2021c8d296ff2d3bfaef27ece005c00c8540c7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2021c8d296ff2d3bfaef27ece005c00c8540c7af"}], "stats": {"total": 24, "additions": 2, "deletions": 22}, "files": [{"sha": "538c1a24f547da9381772d0399b335f84f245668", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185ce11b15dec339ddda83aa7a5fcb4ac200466d/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185ce11b15dec339ddda83aa7a5fcb4ac200466d/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=185ce11b15dec339ddda83aa7a5fcb4ac200466d", "patch": "@@ -290,7 +290,6 @@ static struct jcf_block * get_jcf_label_here PARAMS ((struct jcf_partial *));\n static void put_linenumber PARAMS ((int, struct jcf_partial *));\n static void localvar_alloc PARAMS ((tree, struct jcf_partial *));\n static void localvar_free PARAMS ((tree, struct jcf_partial *));\n-static void localvar_finish PARAMS ((tree, struct jcf_partial *));\n static int get_access_flags PARAMS ((tree));\n static void write_chunks PARAMS ((FILE *, struct chunk *));\n static int adjust_typed_op PARAMS ((tree, int));\n@@ -645,25 +644,6 @@ localvar_free (decl, state)\n     }\n }\n \n-/* Like localvar_free, but leaves the variable allocated.  This lets\n-   us avoid problems with inappropriate variable reuse in some\n-   situations.  */\n-static void\n-localvar_finish (decl, state)\n-     tree decl;     \n-     struct jcf_partial *state;\n-{\n-  struct jcf_block *end_label = get_jcf_label_here (state);\n-  int index = DECL_LOCAL_INDEX (decl);\n-  register struct localvar_info **ptr = &localvar_buffer [index];\n-  register struct localvar_info *info = *ptr;\n-\n-  info->end_label = end_label;\n-\n-  if (info->decl != decl)\n-    abort ();\n-}\n-\n \f\n #define STACK_TARGET 1\n #define IGNORE_TARGET 2\n@@ -2399,7 +2379,7 @@ generate_bytecode_insns (exp, target, state)\n \tRESERVE (1);\n \tOP1 (OPCODE_athrow);\n \tNOTE_POP (1);\n-\tlocalvar_finish (exception_decl, state);\n+\tlocalvar_free (exception_decl, state);\n \n \t/* The finally block.  First save return PC into return_link. */\n \tdefine_jcf_label (finally_label, state);\n@@ -2408,7 +2388,7 @@ generate_bytecode_insns (exp, target, state)\n \n \tgenerate_bytecode_insns (finally, IGNORE_TARGET, state);\n \tmaybe_wide (OPCODE_ret, DECL_LOCAL_INDEX (return_link), state);\n-\tlocalvar_finish (return_link, state);\n+\tlocalvar_free (return_link, state);\n \tdefine_jcf_label (finished_label, state);\n       }\n       break;"}]}