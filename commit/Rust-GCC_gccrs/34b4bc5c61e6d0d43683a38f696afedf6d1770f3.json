{"sha": "34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRiNGJjNWM2MWU2ZDBkNDM2ODNhMzhmNjk2YWZlZGY2ZDE3NzBmMw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-12T20:45:29Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-12T20:45:29Z"}, "message": "re PR fortran/30964 (optional arguments to random_seed)\n\n\tPR fortran/30964\n\tPR fortran/33054\n\n\t* trans-expr.c (gfc_conv_function_call): When no formal argument\n\tlist is available, we still substitute missing optional arguments.\n\t* check.c (gfc_check_random_seed): Correct the check on the\n\tnumber of arguments to RANDOM_SEED.\n\t* intrinsic.c (add_subroutines): Add a resolution function to\n\tRANDOM_SEED.\n\t* iresolve.c (gfc_resolve_random_seed): New function.\n\t* intrinsic.h (gfc_resolve_random_seed): New prototype.\n\n\t* intrinsics/random.c (random_seed): Rename into random_seed_i4.\n\t(random_seed_i8): New function.\n\t* gfortran.map (GFORTRAN_1.0): Remove _gfortran_random_seed,\n\tadd _gfortran_random_seed_i4 and _gfortran_random_seed_i8.\n\t* libgfortran.h (iexport_proto): Replace random_seed by\n\trandom_seed_i4 and random_seed_i8.\n\t* runtime/main.c (init): Call the new random_seed_i4.\n\n\t* gfortran.dg/random_4.f90: New test.\n\t* gfortran.dg/random_5.f90: New test.\n\t* gfortran.dg/random_6.f90: New test.\n\t* gfortran.dg/random_7.f90: New test.\n\nFrom-SVN: r127383", "tree": {"sha": "1aa675f2be8264295523bb56ade85d71e6c31e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1aa675f2be8264295523bb56ade85d71e6c31e8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74"}], "stats": {"total": 299, "additions": 248, "deletions": 51}, "files": [{"sha": "acbe9a7cf773926f6866e4390c7a266bf1d1fd60", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -1,3 +1,16 @@\n+2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/30964\n+\tPR fortran/33054\n+\t* trans-expr.c (gfc_conv_function_call): When no formal argument\n+\tlist is available, we still substitute missing optional arguments.\n+\t* check.c (gfc_check_random_seed): Correct the check on the\n+\tnumber of arguments to RANDOM_SEED.\n+\t* intrinsic.c (add_subroutines): Add a resolution function to\n+\tRANDOM_SEED.\n+\t* iresolve.c (gfc_resolve_random_seed): New function.\n+\t* intrinsic.h (gfc_resolve_random_seed): New prototype.\n+\n 2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/32860"}, {"sha": "23955deab9d33ea9cd685a7ca58952674869696c", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -2880,8 +2880,15 @@ gfc_check_random_number (gfc_expr *harvest)\n try\n gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n {\n+  unsigned int nargs = 0;\n+  locus *where = NULL;\n+\n   if (size != NULL)\n     {\n+      if (size->expr_type != EXPR_VARIABLE\n+\t  || !size->symtree->n.sym->attr.optional)\n+\tnargs++;\n+\n       if (scalar_check (size, 0) == FAILURE)\n \treturn FAILURE;\n \n@@ -2897,10 +2904,12 @@ gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n \n   if (put != NULL)\n     {\n-\n-      if (size != NULL)\n-\tgfc_error (\"Too many arguments to %s at %L\", gfc_current_intrinsic,\n-\t\t    &put->where);\n+      if (put->expr_type != EXPR_VARIABLE\n+\t  || !put->symtree->n.sym->attr.optional)\n+\t{\n+\t  nargs++;\n+\t  where = &put->where;\n+\t}\n \n       if (array_check (put, 1) == FAILURE)\n \treturn FAILURE;\n@@ -2917,10 +2926,12 @@ gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n \n   if (get != NULL)\n     {\n-\n-      if (size != NULL || put != NULL)\n-\tgfc_error (\"Too many arguments to %s at %L\", gfc_current_intrinsic,\n-\t\t   &get->where);\n+      if (get->expr_type != EXPR_VARIABLE\n+\t  || !get->symtree->n.sym->attr.optional)\n+\t{\n+\t  nargs++;\n+\t  where = &get->where;\n+\t}\n \n       if (array_check (get, 2) == FAILURE)\n \treturn FAILURE;\n@@ -2938,6 +2949,10 @@ gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n \treturn FAILURE;\n     }\n \n+  /* RANDOM_SEED may not have more than one non-optional argument.  */\n+  if (nargs > 1)\n+    gfc_error (\"Too many arguments to %s at %L\", gfc_current_intrinsic, where);\n+\n   return SUCCESS;\n }\n "}, {"sha": "7f02245c7fbfb978764887ba6e77dfe5c9a52f8e", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -2467,8 +2467,9 @@ add_subroutines (void)\n \t      gfc_check_random_number, NULL, gfc_resolve_random_number,\n \t      h, BT_REAL, dr, REQUIRED);\n \n-  add_sym_3s (\"random_seed\", GFC_ISYM_RANDOM_SEED, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_F95,\n-\t      gfc_check_random_seed, NULL, NULL,\n+  add_sym_3s (\"random_seed\", GFC_ISYM_RANDOM_SEED, NO_CLASS,\n+\t      BT_UNKNOWN, 0, GFC_STD_F95,\n+\t      gfc_check_random_seed, NULL, gfc_resolve_random_seed,\n \t      sz, BT_INTEGER, di, OPTIONAL, pt, BT_INTEGER, di, OPTIONAL,\n \t      gt, BT_INTEGER, di, OPTIONAL);\n "}, {"sha": "1e03e0cdd307c23cfe07fe4e9405b528187a8bd7", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -487,6 +487,7 @@ void gfc_resolve_ltime (gfc_code *);\n void gfc_resolve_mvbits (gfc_code *);\n void gfc_resolve_perror (gfc_code *);\n void gfc_resolve_random_number (gfc_code *);\n+void gfc_resolve_random_seed (gfc_code *);\n void gfc_resolve_rename_sub (gfc_code *);\n void gfc_resolve_link_sub (gfc_code *);\n void gfc_resolve_symlnk_sub (gfc_code *);"}, {"sha": "6232374161e2763241a28bbaebdb0857e6b12490", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -2506,6 +2506,16 @@ gfc_resolve_random_number (gfc_code *c)\n }\n \n \n+void\n+gfc_resolve_random_seed (gfc_code *c)\n+{\n+  const char *name;\n+\n+  name = gfc_get_string (PREFIX (\"random_seed_i%d\"), gfc_default_integer_kind);\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+\n void\n gfc_resolve_rename_sub (gfc_code *c)\n {"}, {"sha": "d421a7347e2f62960648c6a0931887bec22d731c", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -2303,36 +2303,38 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t    } \n \t}\n \n-      if (fsym)\n+      /* The case with fsym->attr.optional is that of a user subroutine\n+\t with an interface indicating an optional argument.  When we call\n+\t an intrinsic subroutine, however, fsym is NULL, but we might still\n+\t have an optional argument, so we proceed to the substitution\n+\t just in case.  */\n+      if (e && (fsym == NULL || fsym->attr.optional))\n \t{\n-\t  if (e)\n+\t  /* If an optional argument is itself an optional dummy argument,\n+\t     check its presence and substitute a null if absent.  */\n+\t  if (e->expr_type == EXPR_VARIABLE\n+\t      && e->symtree->n.sym->attr.optional)\n+\t    gfc_conv_missing_dummy (&parmse, e, fsym ? fsym->ts : e->ts);\n+\t}\n+\n+      if (fsym && e)\n+\t{\n+\t  /* Obtain the character length of an assumed character length\n+\t     length procedure from the typespec.  */\n+\t  if (fsym->ts.type == BT_CHARACTER\n+\t      && parmse.string_length == NULL_TREE\n+\t      && e->ts.type == BT_PROCEDURE\n+\t      && e->symtree->n.sym->ts.type == BT_CHARACTER\n+\t      && e->symtree->n.sym->ts.cl->length != NULL)\n \t    {\n-\t      /* If an optional argument is itself an optional dummy\n-\t\t argument, check its presence and substitute a null\n-\t\t if absent.  */\n-\t      if (e->expr_type == EXPR_VARIABLE\n-\t\t    && e->symtree->n.sym->attr.optional\n-\t\t    && fsym->attr.optional)\n-\t\tgfc_conv_missing_dummy (&parmse, e, fsym->ts);\n-\n-\t      /* Obtain the character length of an assumed character\n-\t\t length procedure from the typespec.  */\n-\t      if (fsym->ts.type == BT_CHARACTER\n-\t\t    && parmse.string_length == NULL_TREE\n-\t\t    && e->ts.type == BT_PROCEDURE\n-\t\t    && e->symtree->n.sym->ts.type == BT_CHARACTER\n-\t\t    && e->symtree->n.sym->ts.cl->length != NULL)\n-\t\t{\n-\t\t  gfc_conv_const_charlen (e->symtree->n.sym->ts.cl);\n-\t\t  parmse.string_length\n-\t\t\t= e->symtree->n.sym->ts.cl->backend_decl;\n-\t\t}\n+\t      gfc_conv_const_charlen (e->symtree->n.sym->ts.cl);\n+\t      parmse.string_length = e->symtree->n.sym->ts.cl->backend_decl;\n \t    }\n-\n-\t  if (need_interface_mapping)\n-\t    gfc_add_interface_mapping (&mapping, fsym, &parmse);\n \t}\n \n+      if (fsym && need_interface_mapping)\n+\tgfc_add_interface_mapping (&mapping, fsym, &parmse);\n+\n       gfc_add_block_to_block (&se->pre, &parmse.pre);\n       gfc_add_block_to_block (&post, &parmse.post);\n "}, {"sha": "6640aee6794c5c9e31b3be20ea354c2a8e99c948", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -1,3 +1,12 @@\n+2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/30964\n+\tPR fortran/33054\n+\t* gfortran.dg/random_4.f90: New test.\n+\t* gfortran.dg/random_5.f90: New test.\n+\t* gfortran.dg/random_6.f90: New test.\n+\t* gfortran.dg/random_7.f90: New test.\n+\n 2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/32860"}, {"sha": "416b17c00866253c88a32d2a68be9dc8b8ea05f5", "filename": "gcc/testsuite/gfortran.dg/random_4.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_4.f90?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do run }\n+!\n+program trs\n+  implicit none\n+  integer :: size, ierr\n+  integer, allocatable, dimension(:) :: seed, check\n+  call test_random_seed(size)\n+  allocate(seed(size),check(size))\n+  call test_random_seed(put=seed)\n+  call test_random_seed(get=check)\n+  if (any (seed /= check)) call abort\n+contains\n+  subroutine test_random_seed(size, put, get)\n+    integer, optional :: size\n+    integer, dimension(:), optional :: put\n+    integer, dimension(:), optional :: get\n+    call random_seed(size, put, get)\n+  end subroutine test_random_seed\n+end program trs"}, {"sha": "418bd68fb704fbb692833ef4cbe8f5035a2e3d71", "filename": "gcc/testsuite/gfortran.dg/random_5.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_5.f90?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do run }\n+! { dg-shouldfail \"\" }\n+!\n+program trs\n+  implicit none\n+  integer :: size\n+  integer :: seed(50)\n+  call test_random_seed(size,seed)\n+contains\n+  subroutine test_random_seed(size, put, get)\n+    integer, optional :: size\n+    integer, dimension(:), optional :: put\n+    integer, dimension(:), optional :: get\n+    call random_seed(size, put, get)\n+  end subroutine test_random_seed\n+end program trs\n+! { dg-output \"Fortran runtime error: RANDOM_SEED should have at most one argument present.*\" }"}, {"sha": "078c8af01f5472f90e447d53b7a00288654f1bd3", "filename": "gcc/testsuite/gfortran.dg/random_6.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_6.f90?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+!\n+subroutine test1 (size, put, get)\n+  integer :: size\n+  integer, dimension(:), optional :: put\n+  integer, dimension(:), optional :: get\n+  call random_seed(size, put, get)\n+end\n+\n+subroutine test2 (size, put, get)\n+  integer, optional :: size\n+  integer, dimension(:) :: put\n+  integer, dimension(:) :: get\n+  call random_seed(size, put, get) ! { dg-error \"Too many arguments\" }\n+end"}, {"sha": "46d8ccb881627200379c0a01faab6a1fa78a7ada", "filename": "gcc/testsuite/gfortran.dg/random_7.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_7.f90?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+! { dg-options \"-fdefault-integer-8\" }\n+!\n+program trs\n+  implicit none\n+  integer :: size, ierr\n+  integer, allocatable, dimension(:) :: seed, check\n+  call test_random_seed(size)\n+  allocate(seed(size),check(size))\n+  call test_random_seed(put=seed)\n+  call test_random_seed(get=check)\n+  if (any (seed /= check)) call abort\n+contains\n+  subroutine test_random_seed(size, put, get)\n+    integer, optional :: size\n+    integer, dimension(:), optional :: put\n+    integer, dimension(:), optional :: get\n+    call random_seed(size, put, get)\n+  end subroutine test_random_seed\n+end program trs"}, {"sha": "1d4055b02e170ec07d623fbb4c16809c97211208", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -1,3 +1,15 @@\n+2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/30964\n+\tPR fortran/33054\n+\t* intrinsics/random.c (random_seed): Rename into random_seed_i4.\n+\t(random_seed_i8): New function.\n+\t* gfortran.map (GFORTRAN_1.0): Remove _gfortran_random_seed,\n+\tadd _gfortran_random_seed_i4 and _gfortran_random_seed_i8.\n+\t* libgfortran.h (iexport_proto): Replace random_seed by\n+\trandom_seed_i4 and random_seed_i8.\n+\t* runtime/main.c (init): Call the new random_seed_i4.\n+\n 2007-08-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \t    Tobias Burnus  <burnus@gcc.gnu.org>\n "}, {"sha": "31ca41e9f88272ee4e28509db62ad9eaf49875bd", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -553,7 +553,8 @@ GFORTRAN_1.0 {\n     _gfortran_random_r16;\n     _gfortran_random_r4;\n     _gfortran_random_r8;\n-    _gfortran_random_seed;\n+    _gfortran_random_seed_i4;\n+    _gfortran_random_seed_i8;\n     _gfortran_rename_i4;\n     _gfortran_rename_i4_sub;\n     _gfortran_rename_i8;"}, {"sha": "f64f21c5b80d12956a226aa0f2160eeaabc7c5cd", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 70, "deletions": 11, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RANDOM intrinsics\n-   Copyright 2002, 2004, 2005, 2006 Free Software Foundation, Inc.\n+   Copyright 2002, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n    Contributed by Lars Segerlund <seger@linuxmail.org>\n    and Steve Kargl.\n \n@@ -32,6 +32,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n #include <gthr.h>\n+#include <string.h>\n \n extern void random_r4 (GFC_REAL_4 *);\n iexport_proto(random_r4);\n@@ -644,22 +645,22 @@ arandom_r16 (gfc_array_r16 *x)\n    must be called with no argument or exactly one argument.  */\n \n void\n-random_seed (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n+random_seed_i4 (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n {\n   int i;\n \n   __gthread_mutex_lock (&random_lock);\n \n-  if (size == NULL && put == NULL && get == NULL)\n-    {\n-      /* From the standard: \"If no argument is present, the processor assigns\n-         a processor-dependent value to the seed.\"  */\n+  /* Check that we only have one argument present.  */\n+  if ((size ? 1 : 0) + (put ? 1 : 0) + (get ? 1 : 0) > 1)\n+    runtime_error (\"RANDOM_SEED should have at most one argument present.\");\n \n-      for (i=0; i<kiss_size; i++)\n+  /* From the standard: \"If no argument is present, the processor assigns\n+     a processor-dependent value to the seed.\"  */\n+  if (size == NULL && put == NULL && get == NULL)\n+      for (i = 0; i < kiss_size; i++)\n \tkiss_seed[i] = kiss_default_seed[i];\n \n-    }\n-\n   if (size != NULL)\n     *size = kiss_size;\n \n@@ -675,7 +676,7 @@ random_seed (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n \n       /*  This code now should do correct strides.  */\n       for (i = 0; i < kiss_size; i++)\n-\tkiss_seed[i] =(GFC_UINTEGER_4) put->data[i * put->dim[0].stride];\n+\tkiss_seed[i] = (GFC_UINTEGER_4) put->data[i * put->dim[0].stride];\n     }\n \n   /* Return the seed to GET data.  */\n@@ -696,7 +697,65 @@ random_seed (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n \n   __gthread_mutex_unlock (&random_lock);\n }\n-iexport(random_seed);\n+iexport(random_seed_i4);\n+\n+\n+void\n+random_seed_i8 (GFC_INTEGER_8 *size, gfc_array_i8 *put, gfc_array_i8 *get)\n+{\n+  int i;\n+\n+  __gthread_mutex_lock (&random_lock);\n+\n+  /* Check that we only have one argument present.  */\n+  if ((size ? 1 : 0) + (put ? 1 : 0) + (get ? 1 : 0) > 1)\n+    runtime_error (\"RANDOM_SEED should have at most one argument present.\");\n+\n+  /* From the standard: \"If no argument is present, the processor assigns\n+     a processor-dependent value to the seed.\"  */\n+  if (size == NULL && put == NULL && get == NULL)\n+      for (i = 0; i < kiss_size; i++)\n+\tkiss_seed[i] = kiss_default_seed[i];\n+\n+  if (size != NULL)\n+    *size = kiss_size / 2;\n+\n+  if (put != NULL)\n+    {\n+      /* If the rank of the array is not 1, abort.  */\n+      if (GFC_DESCRIPTOR_RANK (put) != 1)\n+        runtime_error (\"Array rank of PUT is not 1.\");\n+\n+      /* If the array is too small, abort.  */\n+      if (((put->dim[0].ubound + 1 - put->dim[0].lbound)) < kiss_size / 2)\n+        runtime_error (\"Array size of PUT is too small.\");\n+\n+      /*  This code now should do correct strides.  */\n+      for (i = 0; i < kiss_size; i += 2)\n+\tmemcpy (&kiss_seed[i], &(put->data[i * put->dim[0].stride]),\n+\t\tsizeof (GFC_UINTEGER_8));\n+    }\n+\n+  /* Return the seed to GET data.  */\n+  if (get != NULL)\n+    {\n+      /* If the rank of the array is not 1, abort.  */\n+      if (GFC_DESCRIPTOR_RANK (get) != 1)\n+\truntime_error (\"Array rank of GET is not 1.\");\n+\n+      /* If the array is too small, abort.  */\n+      if (((get->dim[0].ubound + 1 - get->dim[0].lbound)) < kiss_size / 2)\n+\truntime_error (\"Array size of GET is too small.\");\n+\n+      /*  This code now should do correct strides.  */\n+      for (i = 0; i < kiss_size; i += 2)\n+\tmemcpy (&(get->data[i * get->dim[0].stride]), &kiss_seed[i],\n+\t\tsizeof (GFC_UINTEGER_8));\n+    }\n+\n+  __gthread_mutex_unlock (&random_lock);\n+}\n+iexport(random_seed_i8);\n \n \n #ifndef __GTHREAD_MUTEX_INIT"}, {"sha": "ce6d28e9f95f8425dcbddf39ce8f337773231d29", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -768,9 +768,12 @@ iexport_proto(compare_string);\n \n /* random.c */\n \n-extern void random_seed (GFC_INTEGER_4 * size, gfc_array_i4 * put,\n-\t\t\t gfc_array_i4 * get);\n-iexport_proto(random_seed);\n+extern void random_seed_i4 (GFC_INTEGER_4 * size, gfc_array_i4 * put,\n+\t\t\t    gfc_array_i4 * get);\n+iexport_proto(random_seed_i4);\n+extern void random_seed_i8 (GFC_INTEGER_8 * size, gfc_array_i8 * put,\n+\t\t\t    gfc_array_i8 * get);\n+iexport_proto(random_seed_i8);\n \n /* size.c */\n "}, {"sha": "87adcd228ce0443d12b0d405ce46812befb2fdf0", "filename": "libgfortran/runtime/main.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/libgfortran%2Fruntime%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34b4bc5c61e6d0d43683a38f696afedf6d1770f3/libgfortran%2Fruntime%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmain.c?ref=34b4bc5c61e6d0d43683a38f696afedf6d1770f3", "patch": "@@ -162,7 +162,7 @@ init (void)\n   /* if (argc > 1 && strcmp(argv[1], \"--resume\") == 0) resume();  */\n #endif\n \n-  random_seed(NULL,NULL,NULL);\n+  random_seed_i4 (NULL, NULL, NULL);\n }\n \n "}]}