{"sha": "8af61113c7c4ec81ef7d4947a9e59d980333e397", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFmNjExMTNjN2M0ZWM4MWVmN2Q0OTQ3YTllNTlkOTgwMzMzZTM5Nw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-07-09T01:17:28Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-07-09T01:17:28Z"}, "message": "re PR other/11370 (-Wunreachable-code gives false complaints)\n\n\n\tPR c/11370\n\t* calls.c (emit_call_1): Don't bother popping the arguments off of\n\tthe stack after a noreturn function call;  The adjustment is dead.\n\t(expand_call): Likewise.\n\n\t* gcc.dg/Wunreachable-6.c: New testcase.\n\t* gcc.dg/Wunreachable-7.c: New testcase.\n\nFrom-SVN: r69119", "tree": {"sha": "2d332d084bfac5b9cdcc4d9879b6b97227ad5b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d332d084bfac5b9cdcc4d9879b6b97227ad5b7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8af61113c7c4ec81ef7d4947a9e59d980333e397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af61113c7c4ec81ef7d4947a9e59d980333e397", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8af61113c7c4ec81ef7d4947a9e59d980333e397", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af61113c7c4ec81ef7d4947a9e59d980333e397/comments", "author": null, "committer": null, "parents": [{"sha": "436bcda146cf914b1211274a158c1b4b9d2a68a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436bcda146cf914b1211274a158c1b4b9d2a68a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/436bcda146cf914b1211274a158c1b4b9d2a68a2"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "733ff95fea9b9a997128b87ac61b30f814a77793", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8af61113c7c4ec81ef7d4947a9e59d980333e397/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8af61113c7c4ec81ef7d4947a9e59d980333e397/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8af61113c7c4ec81ef7d4947a9e59d980333e397", "patch": "@@ -1,3 +1,10 @@\n+2003-07-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c/11370\n+\t* calls.c (emit_call_1): Don't bother popping the arguments off of\n+\tthe stack after a noreturn function call;  The adjustment is dead.\n+\t(expand_call): Likewise.\n+\n 2003-07-08  Geoffrey Keating  <geoffk@apple.com>\n \n \t* expr.c (MOVE_MAX_PIECES): Move from here..."}, {"sha": "700564a33dbcb49dd775e78fee514dbaba26b072", "filename": "gcc/calls.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8af61113c7c4ec81ef7d4947a9e59d980333e397/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8af61113c7c4ec81ef7d4947a9e59d980333e397/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=8af61113c7c4ec81ef7d4947a9e59d980333e397", "patch": "@@ -529,6 +529,10 @@ emit_call_1 (rtx funexp, tree fndecl ATTRIBUTE_UNUSED, tree funtype ATTRIBUTE_UN\n      if the context of the call as a whole permits.  */\n   inhibit_defer_pop = old_inhibit_defer_pop;\n \n+  /* Don't bother cleaning up after a noreturn function.  */\n+  if (ecf_flags & (ECF_NORETURN | ECF_LONGJMP))\n+    return;\n+\n   if (n_popped > 0)\n     {\n       if (!already_popped)\n@@ -3074,6 +3078,10 @@ expand_call (tree exp, rtx target, int ignore)\n \t    }\n \n \t  emit_barrier_after (last);\n+\n+\t  /* Stack adjustments after a noreturn call are dead code.  */\n+\t  stack_pointer_delta = old_stack_allocated;\n+\t  pending_stack_adjust = 0;\n \t}\n \n       if (flags & ECF_LONGJMP)\n@@ -3304,8 +3312,9 @@ expand_call (tree exp, rtx target, int ignore)\n \t  normal_call_insns = insns;\n \n \t  /* Verify that we've deallocated all the stack we used.  */\n-\t  if (old_stack_allocated !=\n-\t      stack_pointer_delta - pending_stack_adjust)\n+\t  if (! (flags & (ECF_NORETURN | ECF_LONGJMP))\n+\t      && old_stack_allocated != stack_pointer_delta\n+\t\t\t\t\t- pending_stack_adjust)\n \t    abort ();\n \t}\n "}, {"sha": "cbd7cae9c1f8d84c1525b37a74e278d5cbdad997", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8af61113c7c4ec81ef7d4947a9e59d980333e397/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8af61113c7c4ec81ef7d4947a9e59d980333e397/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8af61113c7c4ec81ef7d4947a9e59d980333e397", "patch": "@@ -1,3 +1,9 @@\n+2003-07-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c/11370\n+\t* gcc.dg/Wunreachable-6.c: New testcase.\n+\t* gcc.dg/Wunreachable-7.c: New testcase.\n+\n 2003-07-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/11420"}, {"sha": "77b6228fc862cd1699ea4ed13bb3d1fdf0d1364f", "filename": "gcc/testsuite/gcc.dg/Wunreachable-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8af61113c7c4ec81ef7d4947a9e59d980333e397/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8af61113c7c4ec81ef7d4947a9e59d980333e397/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-6.c?ref=8af61113c7c4ec81ef7d4947a9e59d980333e397", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/11370  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunreachable-code\" } */\n+\n+int main(int argc, char *argv[])\n+{\n+  if (argc != 1)\n+    exit(1);\n+\n+  {\n+    int ix;  /* { dg-bogus \"will never be executed\" } */\n+    ix = printf(\"hello\\n\");\n+    printf(\"%d\\n\", ix);\n+  }\n+\n+  return 0;\n+}\n+"}, {"sha": "a19c94a176092972aa01fce79b98b278d9108bde", "filename": "gcc/testsuite/gcc.dg/Wunreachable-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8af61113c7c4ec81ef7d4947a9e59d980333e397/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8af61113c7c4ec81ef7d4947a9e59d980333e397/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-7.c?ref=8af61113c7c4ec81ef7d4947a9e59d980333e397", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/11370  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wunreachable-code\" } */\n+\n+int main(int argc, char *argv[])\n+{\n+  if (argc != 1)\n+    exit(1);\n+\n+  {\n+    int ix;  /* { dg-bogus \"will never be executed\" } */\n+    ix = printf(\"hello\\n\");\n+    printf(\"%d\\n\", ix);\n+  }\n+\n+  return 0;\n+}\n+"}]}