{"sha": "22903f220864893e2cbf17d763a83d268f35ee68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5MDNmMjIwODY0ODkzZTJjYmYxN2Q3NjNhODNkMjY4ZjM1ZWU2OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-01-26T11:45:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-01-26T11:45:40Z"}, "message": "trans.c (Iterate_Acc_Clause_Arg): Fix formatting.\n\n\t* gcc-interface/trans.c (Iterate_Acc_Clause_Arg): Fix formatting.\n\t(Acc_gnat_to_gnu): Likewise.\n\t(Acc_Data_to_gnu): Likewise.\n\t(Acc_Var_to_gnu): Likewise.\n\t(Acc_Reduc_to_gnu): Likewise.\n\t(Acc_Size_List_to_gnu): Likewise.\n\t(Pragma_to_gnu) <Pragma_Acc_Loop>: Likewise.\n\t<Pragma_Acc_Data>): Likewise.\n\t(find_loop_for): Remove default value for parameters.\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Op_And>: Merge into...\n\t<N_Op_Eq>): ...this.\n\nFrom-SVN: r268289", "tree": {"sha": "d450a16b8e13659b4fa874fa5d486723e610909b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d450a16b8e13659b4fa874fa5d486723e610909b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22903f220864893e2cbf17d763a83d268f35ee68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22903f220864893e2cbf17d763a83d268f35ee68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22903f220864893e2cbf17d763a83d268f35ee68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22903f220864893e2cbf17d763a83d268f35ee68/comments", "author": null, "committer": null, "parents": [{"sha": "03160cc9d6a54017ced6e3f8566649b63f42a040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03160cc9d6a54017ced6e3f8566649b63f42a040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03160cc9d6a54017ced6e3f8566649b63f42a040"}], "stats": {"total": 145, "additions": 84, "deletions": 61}, "files": [{"sha": "40e3ed5c5df69e0e317ed8f5623a412c8397b612", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22903f220864893e2cbf17d763a83d268f35ee68/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22903f220864893e2cbf17d763a83d268f35ee68/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=22903f220864893e2cbf17d763a83d268f35ee68", "patch": "@@ -1,3 +1,17 @@\n+2019-01-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Iterate_Acc_Clause_Arg): Fix formatting.\n+\t(Acc_gnat_to_gnu): Likewise.\n+\t(Acc_Data_to_gnu): Likewise.\n+\t(Acc_Var_to_gnu): Likewise.\n+\t(Acc_Reduc_to_gnu): Likewise.\n+\t(Acc_Size_List_to_gnu): Likewise.\n+\t(Pragma_to_gnu) <Pragma_Acc_Loop>: Likewise.\n+\t<Pragma_Acc_Data>): Likewise.\n+\t(find_loop_for): Remove default value for parameters.\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Op_And>: Merge into...\n+\t<N_Op_Eq>): ...this.\n+\n 2019-01-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (annotate_value) <INTEGER_CST>: Use test on"}, {"sha": "b00c2482ad5fdac5a5bf16fc5b1c7cc40bd18a3e", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 70, "deletions": 61, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22903f220864893e2cbf17d763a83d268f35ee68/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22903f220864893e2cbf17d763a83d268f35ee68/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=22903f220864893e2cbf17d763a83d268f35ee68", "patch": "@@ -1253,7 +1253,6 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n   return gnu_result;\n }\n \f\n-\n /* If GNAT_EXPR is an N_Identifier, N_Integer_Literal or N_Operator_Symbol,\n    call FN on it.  If GNAT_EXPR is an aggregate, call FN on each of its\n    elements.  In both cases, pass GNU_EXPR and DATA as additional arguments.\n@@ -1285,16 +1284,19 @@ Iterate_Acc_Clause_Arg (Node_Id gnat_expr, tree gnu_expr,\n \t    gnu_expr = fn (Expression (gnat_list_expr), gnu_expr, data);\n \t}\n       else\n-\t  gcc_unreachable();\n-\tbreak;\n+\tgcc_unreachable ();\n+      break;\n+\n     case N_Identifier:\n     case N_Integer_Literal:\n     case N_Operator_Symbol:\n-\tgnu_expr = fn (gnat_expr, gnu_expr, data);\n-\tbreak;\n+      gnu_expr = fn (gnat_expr, gnu_expr, data);\n+      break;\n+\n     default:\n-\tgcc_unreachable();\n+      gcc_unreachable ();\n     }\n+\n   return gnu_expr;\n }\n \n@@ -1329,18 +1331,19 @@ Acc_gnat_to_gnu (Node_Id gnat_node)\n static tree\n Acc_Data_to_gnu (Node_Id gnat_expr, tree gnu_clauses, void* data)\n {\n-  tree gnu_clause;\n-  enum gomp_map_kind kind = *((enum gomp_map_kind*) data);\n-  gnu_clause = build_omp_clause (EXPR_LOCATION(gnu_loop_stack->last ()->stmt),\n-\t\t\t\t OMP_CLAUSE_MAP);\n+  const enum gomp_map_kind kind = *((enum gomp_map_kind*) data);\n+  tree gnu_clause\n+    = build_omp_clause (EXPR_LOCATION(gnu_loop_stack->last ()->stmt),\n+\t\t        OMP_CLAUSE_MAP);\n \n   gcc_assert (Nkind (gnat_expr) == N_Identifier);\n-  OMP_CLAUSE_DECL (gnu_clause) =\n-    gnat_to_gnu_entity (Entity (gnat_expr), NULL_TREE, false);\n+  OMP_CLAUSE_DECL (gnu_clause)\n+    = gnat_to_gnu_entity (Entity (gnat_expr), NULL_TREE, false);\n \n   TREE_ADDRESSABLE (OMP_CLAUSE_DECL (gnu_clause)) = 1;\n   OMP_CLAUSE_SET_MAP_KIND (gnu_clause, kind);\n   OMP_CLAUSE_CHAIN (gnu_clause) = gnu_clauses;\n+\n   return gnu_clause;\n }\n \n@@ -1353,13 +1356,13 @@ Acc_Data_to_gnu (Node_Id gnat_expr, tree gnu_clauses, void* data)\n static tree\n Acc_Var_to_gnu (Node_Id gnat_expr, tree gnu_clauses, void* data)\n {\n-  tree gnu_clause;\n-  enum omp_clause_code kind = *((enum omp_clause_code*) data);\n-  gnu_clause =\n-    build_omp_clause (EXPR_LOCATION (gnu_loop_stack->last ()->stmt), kind);\n+  const enum omp_clause_code kind = *((enum omp_clause_code*) data);\n+  tree gnu_clause\n+    = build_omp_clause (EXPR_LOCATION (gnu_loop_stack->last ()->stmt), kind);\n \n   OMP_CLAUSE_DECL (gnu_clause) = Acc_gnat_to_gnu (gnat_expr);\n   OMP_CLAUSE_CHAIN (gnu_clause) = gnu_clauses;\n+\n   return gnu_clause;\n }\n \n@@ -1372,13 +1375,15 @@ Acc_Var_to_gnu (Node_Id gnat_expr, tree gnu_clauses, void* data)\n static tree\n Acc_Reduc_Var_to_gnu (Node_Id gnat_expr, tree gnu_clauses, void* data)\n {\n-  tree gnu_clause;\n-  tree_code code = *((tree_code*) data);\n-  gnu_clause = build_omp_clause (EXPR_LOCATION (gnu_loop_stack->last ()->stmt),\n-\t\t\t\t OMP_CLAUSE_REDUCTION);\n+  const tree_code code = *((tree_code*) data);\n+  tree gnu_clause\n+    = build_omp_clause (EXPR_LOCATION (gnu_loop_stack->last ()->stmt),\n+\t\t\tOMP_CLAUSE_REDUCTION);\n+\n   OMP_CLAUSE_DECL (gnu_clause) = Acc_gnat_to_gnu (gnat_expr);\n   OMP_CLAUSE_REDUCTION_CODE (gnu_clause) = code;\n   OMP_CLAUSE_CHAIN (gnu_clause) = gnu_clauses;\n+\n   return gnu_clause;\n }\n \n@@ -1389,6 +1394,7 @@ static tree\n Acc_Reduc_to_gnu (Node_Id gnat_expr)\n {\n   tree gnu_clauses = NULL_TREE;\n+\n   for (Node_Id gnat_op = First (Component_Associations (gnat_expr));\n        Present (gnat_op);\n        gnat_op = Next (gnat_op))\n@@ -1421,8 +1427,9 @@ Acc_Reduc_to_gnu (Node_Id gnat_expr)\n \t    code = TRUTH_ORIF_EXPR;\n \t  break;\n \tdefault:\n-\t  gcc_unreachable();\n+\t  gcc_unreachable ();\n \t}\n+\n       /* Unsupported reduction operation.  This should have been\n \t caught in sem_prag.adb.  */\n       gcc_assert (code != ERROR_MARK);\n@@ -1432,6 +1439,7 @@ Acc_Reduc_to_gnu (Node_Id gnat_expr)\n \t\t\t\t\t    Acc_Reduc_Var_to_gnu,\n \t\t\t\t\t    &code);\n     }\n+\n   return gnu_clauses;\n }\n \n@@ -1461,15 +1469,15 @@ Acc_Size_Expr_to_gnu (Node_Id gnat_expr, tree gnu_clauses, void *)\n static tree\n Acc_Size_List_to_gnu (Node_Id gnat_expr)\n {\n-  tree gnu_clause;\n-  tree gnu_list;\n-\n-  gnu_clause = build_omp_clause (EXPR_LOCATION (gnu_loop_stack->last ()->stmt),\n-\t\t\t\t OMP_CLAUSE_TILE);\n-  gnu_list = Iterate_Acc_Clause_Arg (gnat_expr, NULL_TREE,\n-\t\t\t\t     Acc_Size_Expr_to_gnu,\n-\t\t\t\t     NULL);\n+  tree gnu_clause\n+    = build_omp_clause (EXPR_LOCATION (gnu_loop_stack->last ()->stmt),\n+\t\t        OMP_CLAUSE_TILE);\n+  tree gnu_list = Iterate_Acc_Clause_Arg (gnat_expr, NULL_TREE,\n+\t\t\t\t\t  Acc_Size_Expr_to_gnu,\n+\t\t\t\t\t  NULL);\n+\n   OMP_CLAUSE_TILE_LIST (gnu_clause) = nreverse (gnu_list);\n+\n   return gnu_clause;\n }\n \n@@ -1535,11 +1543,14 @@ Pragma_to_gnu (Node_Id gnat_node)\n \n     case Pragma_Acc_Loop:\n       {\n-\ttree gnu_clauses = gnu_loop_stack->last ()->omp_loop_clauses;\n \tif (!flag_openacc)\n-          break;\n-        if (!Present (Pragma_Argument_Associations (gnat_node)))\n \t  break;\n+\n+\ttree gnu_clauses = gnu_loop_stack->last ()->omp_loop_clauses;\n+\n+\tif (!Present (Pragma_Argument_Associations (gnat_node)))\n+\t  break;\n+\n \tfor (gnat_temp = First (Pragma_Argument_Associations (gnat_node));\n \t     Present (gnat_temp);\n \t     gnat_temp = Next (gnat_temp))\n@@ -1572,7 +1583,7 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t\t    kind = OMP_CLAUSE_WORKER;\n \t\t    break;\n \t\t  default:\n-\t\t    gcc_unreachable();\n+\t\t    gcc_unreachable ();\n \t\t  }\n \t\tgnu_clause = build_omp_clause (EXPR_LOCATION\n \t\t\t\t\t       (gnu_loop_stack->last ()->stmt),\n@@ -1592,7 +1603,7 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t\t    break;\n \t\t  case Name_Device_Type:\n \t\t    /* Unimplemented by GCC yet.  */\n-\t\t    gcc_unreachable();\n+\t\t    gcc_unreachable ();\n \t\t    break;\n \t\t  case Name_Independent:\n \t\t    gnu_clause = build_omp_clause\n@@ -1617,7 +1628,7 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t\t    /* These are for the Loop+Kernel combination, which is\n \t\t       unimplemented by the frontend for now.  */\n \t\t  default:\n-\t\t    gcc_unreachable();\n+\t\t    gcc_unreachable ();\n \t\t  }\n \t      }\n \t    OMP_CLAUSE_CHAIN (gnu_clause) = gnu_clauses;\n@@ -1626,6 +1637,7 @@ Pragma_to_gnu (Node_Id gnat_node)\n \tgnu_loop_stack->last ()->omp_loop_clauses = gnu_clauses;\n       }\n     break;\n+\n     /* Grouping the transformation of these pragmas together makes sense\n        because they are mutually exclusive, share most of their clauses and\n        the verification that each clause can legally appear for the pragma has\n@@ -1771,7 +1783,8 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t\tclause_code = OMP_CLAUSE_FIRSTPRIVATE;\n \t\tgnu_clauses = Iterate_Acc_Clause_Arg (gnat_expr, gnu_clauses,\n \t\t\t\t\t\t      Acc_Var_to_gnu,\n-\t\t\t\t\t\t      &clause_code); break;\n+\t\t\t\t\t\t      &clause_code);\n+\t\tbreak;\n \n \t      case Name_Default:\n \t\tgnu_clause = build_omp_clause (EXPR_LOCATION\n@@ -1982,7 +1995,6 @@ Pragma_to_gnu (Node_Id gnat_node)\n   return gnu_result;\n }\n \f\n-\n /* Check the inline status of nested function FNDECL wrt its parent function.\n \n    If a non-inline nested function is referenced from an inline external\n@@ -3126,7 +3138,7 @@ inside_loop_p (void)\n    subtraction; otherwise, return NULL.  */\n \n static struct loop_info_d *\n-find_loop_for (tree expr, tree *disp = NULL, bool *neg_p = NULL)\n+find_loop_for (tree expr, tree *disp, bool *neg_p)\n {\n   tree var, add, cst;\n   bool minus_p;\n@@ -7373,29 +7385,6 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t\t    gnu_result_type, gnu_lhs, gnu_rhs);\n       break;\n \n-    case N_Op_And:\n-    case N_Op_Or:\n-    case N_Op_Xor:\n-      /* These can either be operations on booleans or on modular types.\n-\t Fall through for boolean types since that's the way GNU_CODES is\n-\t set up.  */\n-      if (Is_Modular_Integer_Type (Underlying_Type (Etype (gnat_node))))\n-\t{\n-\t  enum tree_code code\n-\t    = (kind == N_Op_Or ? BIT_IOR_EXPR\n-\t       : kind == N_Op_And ? BIT_AND_EXPR\n-\t       : BIT_XOR_EXPR);\n-\n-\t  gnu_lhs = gnat_to_gnu (Left_Opnd (gnat_node));\n-\t  gnu_rhs = gnat_to_gnu (Right_Opnd (gnat_node));\n-\t  gnu_result_type = get_unpadded_type (Etype (gnat_node));\n-\t  gnu_result = build_binary_op (code, gnu_result_type,\n-\t\t\t\t\tgnu_lhs, gnu_rhs);\n-\t  break;\n-\t}\n-\n-      /* ... fall through ... */\n-\n     case N_Op_Eq:\n     case N_Op_Ne:\n     case N_Op_Lt:\n@@ -7412,6 +7401,9 @@ gnat_to_gnu (Node_Id gnat_node)\n     case N_Op_Shift_Left:\n     case N_Op_Shift_Right:\n     case N_Op_Shift_Right_Arithmetic:\n+    case N_Op_And:\n+    case N_Op_Or:\n+    case N_Op_Xor:\n     case N_And_Then:\n     case N_Or_Else:\n       {\n@@ -7420,6 +7412,23 @@ gnat_to_gnu (Node_Id gnat_node)\n \tlocation_t saved_location = input_location;\n \ttree gnu_type;\n \n+\t/* Fix operations set up for boolean types in GNU_CODES above.  */\n+\tif (Is_Modular_Integer_Type (Underlying_Type (Etype (gnat_node))))\n+\t  switch (kind)\n+\t    {\n+\t    case N_Op_And:\n+\t      code = BIT_AND_EXPR;\n+\t      break;\n+\t    case N_Op_Or:\n+\t      code = BIT_IOR_EXPR;\n+\t      break;\n+\t    case N_Op_Xor:\n+\t      code = BIT_XOR_EXPR;\n+\t      break;\n+\t    default:\n+\t      break;\n+\t    }\n+\n \tgnu_lhs = gnat_to_gnu (Left_Opnd (gnat_node));\n \tgnu_rhs = gnat_to_gnu (Right_Opnd (gnat_node));\n \tgnu_type = gnu_result_type = get_unpadded_type (Etype (gnat_node));"}]}