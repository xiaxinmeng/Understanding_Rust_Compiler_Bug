{"sha": "bf73f6d2a0b897f8d38687a909517a5b6d3e61e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3M2Y2ZDJhMGI4OTdmOGQzODY4N2E5MDk1MTdhNWI2ZDNlNjFlMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2006-01-19T17:18:29Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-01-19T17:18:29Z"}, "message": "re PR target/15642 (NAN Is Not a Constant Because __APPLE_CC__ is Not Defined (OK in Apple 3.3.0))\n\n2006-01-19  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR target/15642\n        * inclhack.def (AAB_darwin7_9_long_double_funcs [replace]): Define\n        __APPLE_CC_ as 1345.\n        (broken_nan): New.\n        * fixincl.x: Regenerate.\n\nFrom-SVN: r109973", "tree": {"sha": "99f7365a5420536b7d1c3193d74566b73b7efc70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99f7365a5420536b7d1c3193d74566b73b7efc70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf73f6d2a0b897f8d38687a909517a5b6d3e61e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf73f6d2a0b897f8d38687a909517a5b6d3e61e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf73f6d2a0b897f8d38687a909517a5b6d3e61e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf73f6d2a0b897f8d38687a909517a5b6d3e61e0/comments", "author": null, "committer": null, "parents": [{"sha": "786872fdd199d325b62e93c681e28cb4599e7303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786872fdd199d325b62e93c681e28cb4599e7303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786872fdd199d325b62e93c681e28cb4599e7303"}], "stats": {"total": 101, "additions": 90, "deletions": 11}, "files": [{"sha": "ede9e0b8be5636b19568201b47d6e85787fabac2", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf73f6d2a0b897f8d38687a909517a5b6d3e61e0/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf73f6d2a0b897f8d38687a909517a5b6d3e61e0/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=bf73f6d2a0b897f8d38687a909517a5b6d3e61e0", "patch": "@@ -1,3 +1,11 @@\n+2006-01-19  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR target/15642\n+\t* inclhack.def (AAB_darwin7_9_long_double_funcs [replace]): Define\n+\t__APPLE_CC_ as 1345.\n+\t(broken_nan): New.\n+\t* fixincl.x: Regenerate.\n+\n 2005-11-24  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixincl.c(write_replacement) \"here strings\" in AutoGen often/generally"}, {"sha": "01071730a0a6f65c2e6c6bb9826f6c2ecf11b6db", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 62, "deletions": 11, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf73f6d2a0b897f8d38687a909517a5b6d3e61e0/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf73f6d2a0b897f8d38687a909517a5b6d3e61e0/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=bf73f6d2a0b897f8d38687a909517a5b6d3e61e0", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Thursday November 24, 2005 at 09:46:46 PM PST\n+ * It has been AutoGen-ed  Thursday January 19, 2006 at 12:17:28 PM EST\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Thu Nov 24 21:46:46 PST 2005\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Thu Jan 19 12:17:28 EST 2006\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 193 fixup descriptions.\n+ * This file contains 194 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -26,19 +26,18 @@\n  *  \n  *  You may redistribute it and/or modify it under the terms of the\n  *  GNU General Public License, as published by the Free Software\n- *  Foundation; either version 2 of the License, or (at your option)\n- *  any later version.\n+ *  Foundation; either version 2, or (at your option) any later version.\n  *  \n  *  inclhack is distributed in the hope that it will be useful,\n  *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n  *  See the GNU General Public License for more details.\n  *  \n  *  You should have received a copy of the GNU General Public License\n- *  along with inclhack.  If not, write to:\n- *  \tThe Free Software Foundation, Inc.,\n- *  \t51 Franklin Street, Fifth Floor\n- *  \tBoston, MA  02110-1301, USA.\n+ *  along with inclhack.  See the file \"COPYING\".  If not,\n+ *  write to:  The Free Software Foundation, Inc.,\n+ *             59 Temple Place - Suite 330,\n+ *             Boston,  MA  02111-1307, USA.\n  */\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -77,7 +76,11 @@ static const char* apzAab_Darwin7_9_Long_Double_FuncsPatch[] = {\n \"/* This file prototypes the long double functions available on Mac OS\\n\\\n    10.3.9.  */\\n\\\n #ifndef __MATH__\\n\\\n+# undef __APPLE_CC__\\n\\\n+# define __APPLE_CC__  1345\\n\\\n # include_next <architecture/ppc/math.h>\\n\\\n+# undef __APPLE_CC__\\n\\\n+# define __APPLE_CC__ 1\\n\\\n # ifndef __LIBMLDBL_COMPAT\\n\\\n #  ifdef __LONG_DOUBLE_128__\\n\\\n #   define __LIBMLDBL_COMPAT(sym) __asm(\\\"_\\\" #sym \\\"$LDBL128\\\")\\n\\\n@@ -1675,6 +1678,48 @@ static const char* apzBroken_CabsPatch[] = {\n     \"^extern[ \\t]+double[ \\t]+cabs[ \\t]*\\\\([^\\\\)]*\\\\);\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Broken_Nan fix\n+ */\n+tSCC zBroken_NanName[] =\n+     \"broken_nan\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zBroken_NanList[] =\n+  \"|architecture/ppc/math.h|architecture/i386/math.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzBroken_NanMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zBroken_NanSelect0[] =\n+       \"#if defined(__APPLE_CC__) && (__APPLE_CC__ >= 1345)\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zBroken_NanBypass0[] =\n+       \"powl\";\n+\n+#define    BROKEN_NAN_TEST_CT  2\n+static tTestDesc aBroken_NanTests[] = {\n+  { TT_NEGREP,   zBroken_NanBypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zBroken_NanSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Broken_Nan\n+ */\n+static const char* apzBroken_NanPatch[] = {\n+    \"format\",\n+    \"#if 1\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Bsd_Stdio_Attrs_Conflict fix\n@@ -7849,9 +7894,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          235\n+#define REGEX_COUNT          237\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            193\n+#define FIX_COUNT            194\n \n /*\n  *  Enumerate the fixes\n@@ -7894,6 +7939,7 @@ typedef enum {\n     BROKEN_ASSERT_STDIO_FIXIDX,\n     BROKEN_ASSERT_STDLIB_FIXIDX,\n     BROKEN_CABS_FIXIDX,\n+    BROKEN_NAN_FIXIDX,\n     BSD_STDIO_ATTRS_CONFLICT_FIXIDX,\n     CTRL_QUOTES_DEF_FIXIDX,\n     CTRL_QUOTES_USE_FIXIDX,\n@@ -8238,6 +8284,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      BROKEN_CABS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aBroken_CabsTests,   apzBroken_CabsPatch, 0 },\n \n+  {  zBroken_NanName,    zBroken_NanList,\n+     apzBroken_NanMachs,\n+     BROKEN_NAN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aBroken_NanTests,   apzBroken_NanPatch, 0 },\n+\n   {  zBsd_Stdio_Attrs_ConflictName,    zBsd_Stdio_Attrs_ConflictList,\n      apzBsd_Stdio_Attrs_ConflictMachs,\n      BSD_STDIO_ATTRS_CONFLICT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "e1721421bff5eb9757e22fb4aaab7d0c24facb77", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf73f6d2a0b897f8d38687a909517a5b6d3e61e0/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf73f6d2a0b897f8d38687a909517a5b6d3e61e0/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=bf73f6d2a0b897f8d38687a909517a5b6d3e61e0", "patch": "@@ -20,6 +20,7 @@ autogen definitions fixincl;\n FIXINC_DEBUG = yes;\n #endif\n \n+\n /*\n  *  On Mac OS 10.3.9, the 'long double' functions are available in\n  *  libSystem, but are not prototyped in math.h.\n@@ -33,7 +34,11 @@ fix = {\n /* This file prototypes the long double functions available on Mac OS\n    10.3.9.  */\n #ifndef __MATH__\n+# undef __APPLE_CC__\n+# define __APPLE_CC__  1345\n # include_next <architecture/ppc/math.h>\n+# undef __APPLE_CC__\n+# define __APPLE_CC__ 1\n # ifndef __LIBMLDBL_COMPAT\n #  ifdef __LONG_DOUBLE_128__\n #   define __LIBMLDBL_COMPAT(sym) __asm(\"_\" #sym \"$LDBL128\")\n@@ -1042,6 +1047,21 @@ fix = {\n \t\t\"extern double\tcabs(struct __cabs_s);\";\n };\n \n+/*\n+ * Fixup Darwin's broken check for __builtin_nanf.\n+ */ \n+    \n+fix = {\n+    hackname  = broken_nan;\n+    files     = \"architecture/ppc/math.h\";\n+    files     = \"architecture/i386/math.h\";\n+    select    = \"#if defined(__APPLE_CC__) && (__APPLE_CC__ >= 1345)\";\n+    bypass    = \"powl\";\n+    c_fix     = format; \n+    c_fix_arg = \"#if 1\";\n+    test_text = \"#if defined(__APPLE_CC__) && (__APPLE_CC__ >= 1345)\";\n+}; \n+\n \n /*\n  *  Various systems derived from BSD4.4 contain a macro definition"}]}