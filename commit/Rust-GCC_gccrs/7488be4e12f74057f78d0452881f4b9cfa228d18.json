{"sha": "7488be4e12f74057f78d0452881f4b9cfa228d18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ4OGJlNGUxMmY3NDA1N2Y3OGQwNDUyODgxZjRiOWNmYTIyOGQxOA==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-01-06T07:47:31Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-01-06T07:47:31Z"}, "message": "(DEBUG_PRINT_REG): Print regno along with printable name.\n\n(CONST_COSTS): Handle integer CONST_DOUBLE correctly.\n(PREFERRED_RELOAD_CLASS): Allow integer CONST_DOUBLE into int regs.\n\nFrom-SVN: r3117", "tree": {"sha": "30aa87864456273cc54c8353a95184114a125d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30aa87864456273cc54c8353a95184114a125d30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7488be4e12f74057f78d0452881f4b9cfa228d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7488be4e12f74057f78d0452881f4b9cfa228d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7488be4e12f74057f78d0452881f4b9cfa228d18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7488be4e12f74057f78d0452881f4b9cfa228d18/comments", "author": null, "committer": null, "parents": [{"sha": "b491172aeef9ed48101efe6be43fe82a4a031072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b491172aeef9ed48101efe6be43fe82a4a031072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b491172aeef9ed48101efe6be43fe82a4a031072"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "73b6f255c1d80e3b243cf6c8db3f15b15fcbf13f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7488be4e12f74057f78d0452881f4b9cfa228d18/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7488be4e12f74057f78d0452881f4b9cfa228d18/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7488be4e12f74057f78d0452881f4b9cfa228d18", "patch": "@@ -524,16 +524,18 @@ extern enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n    reloaded into floating registers (since no move-insn can do that)\n    and we ensure that QImodes aren't reloaded into the esi or edi reg.  */\n \n-/* Don't put CONST_DOUBLE into FLOAT_REGS.\n+/* Don't put float CONST_DOUBLE into any regs.\n    QImode must go into class Q_REGS.\n    MODE_INT must not go into FLOAT_REGS. */\n \n-#define PREFERRED_RELOAD_CLASS(X,CLASS)\t\t\t\\\n-  (GET_CODE (X) == CONST_DOUBLE\t\t\t\t\\\n-   ? NO_REGS\t\t\t\t\t\t\\\n-   : GET_MODE (X) == QImode\t\t\t\t\\\n+#define PREFERRED_RELOAD_CLASS(X,CLASS)\t\\\n+  (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != VOIDmode\t\t\\\n+   ? NO_REGS\t\t\t\t\t\t\t\t\\\n+   : GET_MODE (X) == QImode\t\t\t\t\t\t\\\n    ? (! reg_class_subset_p ((CLASS), Q_REGS) ? Q_REGS : (CLASS))\t\\\n-   : (GET_MODE_CLASS (GET_MODE (X)) == MODE_INT && (CLASS) == FLOAT_REGS ? \\\n+   : ((CLASS) == FLOAT_REGS\t\t\t\t\t\t\\\n+      && (GET_MODE (X) == VOIDmode\t\t\t\t\t\\\n+\t  || GET_MODE_CLASS (GET_MODE (X)) == MODE_INT) ?\t\t\\\n       GENERAL_REGS : (CLASS)))\n \n /* Return the maximum number of consecutive registers\n@@ -1180,7 +1182,10 @@ while (0)\n     return flag_pic && SYMBOLIC_CONST (RTX) ? 2 : 0;\t\t\\\n   case CONST_DOUBLE:\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      int code = standard_80387_constant_p (RTX);\t\t\\\n+      int code;\t\t\t\t\t\t\t\\\n+      if (GET_MODE (RTX) == VOIDmode)\t\t\t\t\\\n+\treturn 2;\t\t\t\t\t\t\\\n+      code = standard_80387_constant_p (RTX);\t\t\t\\\n       return code == 1 ? 0 :\t\t\t\t\t\\\n \t     code == 2 ? 1 :\t\t\t\t\t\\\n \t\t\t 2;\t\t\t\t\t\\\n@@ -1510,7 +1515,7 @@ extern char *qi_high_reg_name[];\n #define DEBUG_PRINT_REG(X, CODE, FILE) \\\n   do { static char *hi_name[] = HI_REGISTER_NAMES;\t\\\n        static char *qi_name[] = QI_REGISTER_NAMES;\t\\\n-       fprintf (FILE, \"%s\", RP);\t\t\t\\\n+       fprintf (FILE, \"%d %s\", REGNO (X), RP);\t\\\n        if (REGNO (X) == ARG_POINTER_REGNUM)\t\t\\\n \t { fputs (\"argp\", FILE); break; }\t\t\\\n        if (STACK_TOP_P (X))\t\t\t\t\\"}]}