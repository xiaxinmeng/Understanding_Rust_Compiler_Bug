{"sha": "1a627b35d37649103f629cd15139387d09c4b703", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE2MjdiMzVkMzc2NDkxMDNmNjI5Y2QxNTEzOTM4N2QwOWM0YjcwMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-04-21T09:38:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-04-21T09:38:43Z"}, "message": "target.def (legitimate_constant_p): New hook.\n\ngcc/\n\t* target.def (legitimate_constant_p): New hook.\n\t* doc/tm.texi.in (LEGITIMATE_CONSTANT_P): Replace with...\n\t(TARGET_LEGITIMATE_CONSTANT_P): ...this.\n\t* doc/tm.texi: Regenerate.\n\t* hooks.h (hook_bool_mode_rtx_true): Declare.\n\t* hooks.c (hook_bool_mode_rtx_true): Define.\n\t* system.h (LEGITIMATE_CONSTANT_P): Poison.\n\t* calls.c (precompute_register_parameters): Replace uses of\n\tLEGITIMATE_CONSTANT_P with targetm.legitimate_constant_p.\n\t(emit_library_call_value_1): Likewise.\n\t* expr.c (move_block_to_reg, can_store_by_pieces, emit_move_insn)\n\t(compress_float_constant, emit_push_insn, expand_expr_real_1): Likewise.\n\t* ira-costs.c (scan_one_insn): Likewise.\n\t* recog.c (general_operand, immediate_operand): Likewise.\n\t* reload.c (find_reloads_toplev, find_reloads_address_part): Likewise.\n\t* reload1.c (init_eliminable_invariants): Likewise.\n\n\t* config/alpha/alpha-protos.h (alpha_legitimate_constant_p): Add a\n\tmode argument.\n\t* config/alpha/alpha.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/alpha/alpha.c (alpha_legitimate_constant_p): Add a mode\n\targument.\n\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t* config/alpha/predicates.md (input_operand): Update call to\n\talpha_legitimate_constant_p.\n\n\t* config/arm/arm-protos.h (arm_cannot_force_const_mem): Delete.\n\t* config/arm/arm.h (ARM_LEGITIMATE_CONSTANT_P): Likewise.\n\t(THUMB_LEGITIMATE_CONSTANT_P, LEGITIMATE_CONSTANT_P): Likewise.\n\t* config/arm/arm.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(arm_legitimate_constant_p_1, thumb_legitimate_constant_p)\n\t(arm_legitimate_constant_p): New functions.\n\t(arm_cannot_force_const_mem): Make static.\n\n\t* config/avr/avr.h (LEGITIMATE_CONSTANT_P): Delete.\n\n\t* config/bfin/bfin-protos.h (bfin_legitimate_constant_p): Delete.\n\t* config/bfin/bfin.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/bfin/bfin.c (expand_move): Use targetm.legitimate_constant_p\n\tinstead of bfin_legitimate_constant_p.\n\t(bfin_legitimate_constant_p): Make static.  Add a mode argument.\n\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n\n\t* config/cris/cris.h (LEGITIMATE_CONSTANT_P): Delete.\n\n\t* config/fr30/fr30.h (LEGITIMATE_CONSTANT_P): Delete.\n\n\t* config/frv/frv-protos.h (frv_legitimate_constant_p): Delete.\n\t* config/frv/frv.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/frv/frv.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(frv_legitimate_constant_p): Make static.  Add a mode argument.\n\n\t* config/h8300/h8300-protos.h (h8300_legitimate_constant_p): Delete.\n\t* config/h8300/h8300.h (LEGITIMATE_CONSTANT_P): Likewise.\n\t* config/h8300/h8300.c (h8300_legitimate_constant_p): Likewise.\n\n\t* config/i386/i386-protos.h (legitimate_constant_p): Delete.\n\t* config/i386/i386.h (LEGITIMATE_CONSTANT_P): Likewise.\n\t* config/i386/i386.c (legitimate_constant_p): Rename to...\n\t(ix86_legitimate_constant_p): ...this.  Make static.  Add a mode\n\targument.\n\t(ix86_cannot_force_const_mem): Update accordingly.\n\t(ix86_legitimate_address_p): Likewise.\n\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t* config/i386/i386.md: Update commentary.\n\n\t* config/ia64/ia64-protos.h (ia64_legitimate_constant_p): Delete.\n\t* config/ia64/ia64.h (LEGITIMATE_CONSTANT_P): Likewise.\n\t* config/ia64/ia64.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(ia64_legitimate_constant_p): Make static.  Add a mode argument.\n\n\t* config/iq2000/iq2000.h (LEGITIMATE_CONSTANT_P): Delete.\n\n\t* config/lm32/lm32-protos.h (lm32_legitimate_constant_p): Delete.\n\t* config/lm32/lm32.h (LEGITIMATE_CONSTANT_P): Likewise.\n\t* config/lm32/lm32.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(lm32_legitimate_constant_p): Make static.  Add a mode argument.\n\n\t* config/m32c/m32c-protos.h (m32c_legitimate_constant_p): Delete.\n\t* config/m32c/m32c.h (LEGITIMATE_CONSTANT_P): Likewise.\n\t* config/m32c/m32c.c (m32c_legitimate_constant_p): Likewise.\n\n\t* config/m32r/m32r.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/m32r/m32r.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(m32r_legitimate_constant_p): New function.\n\n\t* config/m68k/m68k-protos.h (m68k_legitimate_constant_p): Declare.\n\t* config/m68k/m68k.h (CONSTANT_ADDRESS_P): Call it instead of\n\tLEGITIMATE_CONSTANT_P.\n\t(LEGITIMATE_CONSTANT_P): Delete.\n\t* config/m68k/m68k.c (m68k_expand_prologue): Call\n\tm68k_legitimate_constant_p instead of LEGITIMATE_CONSTANT_P.\n\t(m68k_legitimate_constant_p): New function.\n\t* config/m68k/m68k.md: Update comments.\n\n\t* config/mcore/mcore.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/mcore/mcore.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(mcore_legitimate_constant_p): New function.\n\n\t* config/mep/mep-protos.h (mep_legitimate_constant_p): Delete.\n\t* config/mep/mep.h (LEGITIMATE_CONSTANT_P): Likewise.\n\t* config/mep/mep.c (mep_legitimate_constant_p): Make static.\n\tAdd a mode argument.\n\t(mep_legitimate_address): Update accordingly.\n\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n\n\t* config/microblaze/microblaze-protos.h (microblaze_const_double_ok):\n\tDelete.\n\t* config/microblaze/microblaze.h (LEGITIMATE_CONSTANT_P): Likewise.\n\t* config/microblaze/microblaze.c (microblaze_const_double_ok): Make\n\tstatic.  Check OP's mode for VOIDmode.\n\t(microblaze_legitimate_constant_p): New function.\n\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n\n\t* config/mips/mips.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/mips/mips.c (mips_legitimate_constant_p): New function.\n\t(mips_cannot_force_const_mem): Use it instead of LEGITIMATE_CONSTANT_P.\n\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t* config/mips/predicates.md: Update comments.\n\n\t* config/mmix/mmix-protos.h (mmix_legitimate_constant_p): Delete.\n\t* config/mmix/mmix.h (LEGITIMATE_CONSTANT_P): Likewise.\n\t* config/mmix/mmix.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(mmix_legitimate_constant_p): Make static, return a bool, and take\n\ta mode argument.\n\t(mmix_print_operand_address): Update accordingly.\n\n\t* config/mn10300/mn10300-protos.h (mn10300_legitimate_constant_p):\n\tDelete.\n\t* config/mn10300/mn10300.h (LEGITIMATE_CONSTANT_P): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_legitimate_constant_p):\n\tMake static.  Add a mode argument.\n\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n\n\t* config/moxie/moxie.h (LEGITIMATE_CONSTANT_P): Delete.\n\n\t* config/pa/pa.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/pa/pa.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(pa_legitimate_constant_p): New function.\n\n\t* config/picochip/picochip.h (LEGITIMATE_CONSTANT_P): Delete.\n\n\t* config/pdp11/pdp11.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/pdp11/pdp11.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(pdp11_legitimate_constant_p): New function.\n\n\t* config/rs6000/rs6000.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/rs6000/rs6000.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(rs6000_legitimate_constant_p): New function.\n\n\t* config/rx/rx-protos.h (rx_is_legitimate_constant): Replace with...\n\t(rx_legitimate_constant_p): ...this.\n\t* config/rx/rx.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/rx/rx.c (rx_is_legitimate_constant): Replace with...\n\t(rx_legitimate_constant_p): ...this.\n\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t* config/rx/rx.md (mov<register_modes:mode>): Update accordingly.\n\n\t* config/s390/s390-protos.h (legitimate_constant_p): Delete.\n\t* config/s390/s390.h (LEGITIMATE_CONSTANT_P): Likewise.\n\t* config/s390/s390.c (legitimate_constant_p): Rename to...\n\t(s390_legitimate_constant_p): ...this.  Make static, return a bool,\n\tand add a mode argument.\n\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n\n\t* config/score/score.h (LEGITIMATE_CONSTANT_P): Delete.\n\n\t* config/sh/sh.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/sh/sh.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(sh_legitimate_constant_p): New function.\n\n\t* config/sparc/sparc-protos.h (legitimate_constant_p): Delete.\n\t* config/sparc/sparc.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/sparc/sparc.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(legitimate_constant_p): Rename to...\n\t(sparc_legitimate_constant_p): ...this.  Make static.  Add a mode\n\targument.\n\t(constant_address_p): Update accordingly.\n\n\t* config/spu/spu-protos.h (spu_legitimate_constant_p): Add a mode\n\targument and return a bool.\n\t* config/spu/spu.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/spu/spu.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(spu_legitimate_constant_p): Add a mode argument and return a bool.\n\t(spu_rtx_costs): Update accordingly.\n\t* config/spu/predicates.md (vec_imm_operand): Likewise.\n\n\t* config/stormy16/stormy16.h (LEGITIMATE_CONSTANT_P): Delete.\n\n\t* config/v850/v850.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/v850/v850.c (v850_legitimate_constant_p): New function.\n\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n\n\t* config/vax/vax-protos.h (legitimate_constant_p): Delete.\n\t* config/vax/vax.h (LEGITIMATE_CONSTANT_P): Likewise.\n\t* config/vax/vax.c (legitimate_constant_p): Likewise.\n\n\t* config/xtensa/xtensa.h (LEGITIMATE_CONSTANT_P): Delete.\n\t* config/xtensa/xtensa.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n\t(xtensa_legitimate_constant_p): New function.\n\nFrom-SVN: r172814", "tree": {"sha": "ee9985e6dc9e4455022070aeb97c47413720a1e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee9985e6dc9e4455022070aeb97c47413720a1e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a627b35d37649103f629cd15139387d09c4b703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a627b35d37649103f629cd15139387d09c4b703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a627b35d37649103f629cd15139387d09c4b703", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a627b35d37649103f629cd15139387d09c4b703/comments", "author": null, "committer": null, "parents": [{"sha": "fbbf66e77a385fc1901fdc33c1d977681cab39bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbbf66e77a385fc1901fdc33c1d977681cab39bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbbf66e77a385fc1901fdc33c1d977681cab39bf"}], "stats": {"total": 1013, "additions": 615, "deletions": 398}, "files": [{"sha": "95f931b75708ccc5b169fd7c937814d61e45c1f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1,3 +1,206 @@\n+2011-04-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* target.def (legitimate_constant_p): New hook.\n+\t* doc/tm.texi.in (LEGITIMATE_CONSTANT_P): Replace with...\n+\t(TARGET_LEGITIMATE_CONSTANT_P): ...this.\n+\t* doc/tm.texi: Regenerate.\n+\t* hooks.h (hook_bool_mode_rtx_true): Declare.\n+\t* hooks.c (hook_bool_mode_rtx_true): Define.\n+\t* system.h (LEGITIMATE_CONSTANT_P): Poison.\n+\t* calls.c (precompute_register_parameters): Replace uses of\n+\tLEGITIMATE_CONSTANT_P with targetm.legitimate_constant_p.\n+\t(emit_library_call_value_1): Likewise.\n+\t* expr.c (move_block_to_reg, can_store_by_pieces, emit_move_insn)\n+\t(compress_float_constant, emit_push_insn, expand_expr_real_1): Likewise.\n+\t* ira-costs.c (scan_one_insn): Likewise.\n+\t* recog.c (general_operand, immediate_operand): Likewise.\n+\t* reload.c (find_reloads_toplev, find_reloads_address_part): Likewise.\n+\t* reload1.c (init_eliminable_invariants): Likewise.\n+\n+\t* config/alpha/alpha-protos.h (alpha_legitimate_constant_p): Add a\n+\tmode argument.\n+\t* config/alpha/alpha.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/alpha/alpha.c (alpha_legitimate_constant_p): Add a mode\n+\targument.\n+\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t* config/alpha/predicates.md (input_operand): Update call to\n+\talpha_legitimate_constant_p.\n+\n+\t* config/arm/arm-protos.h (arm_cannot_force_const_mem): Delete.\n+\t* config/arm/arm.h (ARM_LEGITIMATE_CONSTANT_P): Likewise.\n+\t(THUMB_LEGITIMATE_CONSTANT_P, LEGITIMATE_CONSTANT_P): Likewise.\n+\t* config/arm/arm.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(arm_legitimate_constant_p_1, thumb_legitimate_constant_p)\n+\t(arm_legitimate_constant_p): New functions.\n+\t(arm_cannot_force_const_mem): Make static.\n+\n+\t* config/avr/avr.h (LEGITIMATE_CONSTANT_P): Delete.\n+\n+\t* config/bfin/bfin-protos.h (bfin_legitimate_constant_p): Delete.\n+\t* config/bfin/bfin.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/bfin/bfin.c (expand_move): Use targetm.legitimate_constant_p\n+\tinstead of bfin_legitimate_constant_p.\n+\t(bfin_legitimate_constant_p): Make static.  Add a mode argument.\n+\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\n+\t* config/cris/cris.h (LEGITIMATE_CONSTANT_P): Delete.\n+\n+\t* config/fr30/fr30.h (LEGITIMATE_CONSTANT_P): Delete.\n+\n+\t* config/frv/frv-protos.h (frv_legitimate_constant_p): Delete.\n+\t* config/frv/frv.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/frv/frv.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(frv_legitimate_constant_p): Make static.  Add a mode argument.\n+\n+\t* config/h8300/h8300-protos.h (h8300_legitimate_constant_p): Delete.\n+\t* config/h8300/h8300.h (LEGITIMATE_CONSTANT_P): Likewise.\n+\t* config/h8300/h8300.c (h8300_legitimate_constant_p): Likewise.\n+\n+\t* config/i386/i386-protos.h (legitimate_constant_p): Delete.\n+\t* config/i386/i386.h (LEGITIMATE_CONSTANT_P): Likewise.\n+\t* config/i386/i386.c (legitimate_constant_p): Rename to...\n+\t(ix86_legitimate_constant_p): ...this.  Make static.  Add a mode\n+\targument.\n+\t(ix86_cannot_force_const_mem): Update accordingly.\n+\t(ix86_legitimate_address_p): Likewise.\n+\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t* config/i386/i386.md: Update commentary.\n+\n+\t* config/ia64/ia64-protos.h (ia64_legitimate_constant_p): Delete.\n+\t* config/ia64/ia64.h (LEGITIMATE_CONSTANT_P): Likewise.\n+\t* config/ia64/ia64.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(ia64_legitimate_constant_p): Make static.  Add a mode argument.\n+\n+\t* config/iq2000/iq2000.h (LEGITIMATE_CONSTANT_P): Delete.\n+\n+\t* config/lm32/lm32-protos.h (lm32_legitimate_constant_p): Delete.\n+\t* config/lm32/lm32.h (LEGITIMATE_CONSTANT_P): Likewise.\n+\t* config/lm32/lm32.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(lm32_legitimate_constant_p): Make static.  Add a mode argument.\n+\n+\t* config/m32c/m32c-protos.h (m32c_legitimate_constant_p): Delete.\n+\t* config/m32c/m32c.h (LEGITIMATE_CONSTANT_P): Likewise.\n+\t* config/m32c/m32c.c (m32c_legitimate_constant_p): Likewise.\n+\n+\t* config/m32r/m32r.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/m32r/m32r.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(m32r_legitimate_constant_p): New function.\n+\n+\t* config/m68k/m68k-protos.h (m68k_legitimate_constant_p): Declare.\n+\t* config/m68k/m68k.h (CONSTANT_ADDRESS_P): Call it instead of\n+\tLEGITIMATE_CONSTANT_P.\n+\t(LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/m68k/m68k.c (m68k_expand_prologue): Call\n+\tm68k_legitimate_constant_p instead of LEGITIMATE_CONSTANT_P.\n+\t(m68k_legitimate_constant_p): New function.\n+\t* config/m68k/m68k.md: Update comments.\n+\n+\t* config/mcore/mcore.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/mcore/mcore.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(mcore_legitimate_constant_p): New function.\n+\n+\t* config/mep/mep-protos.h (mep_legitimate_constant_p): Delete.\n+\t* config/mep/mep.h (LEGITIMATE_CONSTANT_P): Likewise.\n+\t* config/mep/mep.c (mep_legitimate_constant_p): Make static.\n+\tAdd a mode argument.\n+\t(mep_legitimate_address): Update accordingly.\n+\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\n+\t* config/microblaze/microblaze-protos.h (microblaze_const_double_ok):\n+\tDelete.\n+\t* config/microblaze/microblaze.h (LEGITIMATE_CONSTANT_P): Likewise.\n+\t* config/microblaze/microblaze.c (microblaze_const_double_ok): Make\n+\tstatic.  Check OP's mode for VOIDmode.\n+\t(microblaze_legitimate_constant_p): New function.\n+\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\n+\t* config/mips/mips.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/mips/mips.c (mips_legitimate_constant_p): New function.\n+\t(mips_cannot_force_const_mem): Use it instead of LEGITIMATE_CONSTANT_P.\n+\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t* config/mips/predicates.md: Update comments.\n+\n+\t* config/mmix/mmix-protos.h (mmix_legitimate_constant_p): Delete.\n+\t* config/mmix/mmix.h (LEGITIMATE_CONSTANT_P): Likewise.\n+\t* config/mmix/mmix.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(mmix_legitimate_constant_p): Make static, return a bool, and take\n+\ta mode argument.\n+\t(mmix_print_operand_address): Update accordingly.\n+\n+\t* config/mn10300/mn10300-protos.h (mn10300_legitimate_constant_p):\n+\tDelete.\n+\t* config/mn10300/mn10300.h (LEGITIMATE_CONSTANT_P): Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_legitimate_constant_p):\n+\tMake static.  Add a mode argument.\n+\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\n+\t* config/moxie/moxie.h (LEGITIMATE_CONSTANT_P): Delete.\n+\n+\t* config/pa/pa.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/pa/pa.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(pa_legitimate_constant_p): New function.\n+\n+\t* config/picochip/picochip.h (LEGITIMATE_CONSTANT_P): Delete.\n+\n+\t* config/pdp11/pdp11.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/pdp11/pdp11.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(pdp11_legitimate_constant_p): New function.\n+\n+\t* config/rs6000/rs6000.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/rs6000/rs6000.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(rs6000_legitimate_constant_p): New function.\n+\n+\t* config/rx/rx-protos.h (rx_is_legitimate_constant): Replace with...\n+\t(rx_legitimate_constant_p): ...this.\n+\t* config/rx/rx.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/rx/rx.c (rx_is_legitimate_constant): Replace with...\n+\t(rx_legitimate_constant_p): ...this.\n+\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t* config/rx/rx.md (mov<register_modes:mode>): Update accordingly.\n+\n+\t* config/s390/s390-protos.h (legitimate_constant_p): Delete.\n+\t* config/s390/s390.h (LEGITIMATE_CONSTANT_P): Likewise.\n+\t* config/s390/s390.c (legitimate_constant_p): Rename to...\n+\t(s390_legitimate_constant_p): ...this.  Make static, return a bool,\n+\tand add a mode argument.\n+\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\n+\t* config/score/score.h (LEGITIMATE_CONSTANT_P): Delete.\n+\n+\t* config/sh/sh.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/sh/sh.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(sh_legitimate_constant_p): New function.\n+\n+\t* config/sparc/sparc-protos.h (legitimate_constant_p): Delete.\n+\t* config/sparc/sparc.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/sparc/sparc.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(legitimate_constant_p): Rename to...\n+\t(sparc_legitimate_constant_p): ...this.  Make static.  Add a mode\n+\targument.\n+\t(constant_address_p): Update accordingly.\n+\n+\t* config/spu/spu-protos.h (spu_legitimate_constant_p): Add a mode\n+\targument and return a bool.\n+\t* config/spu/spu.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/spu/spu.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(spu_legitimate_constant_p): Add a mode argument and return a bool.\n+\t(spu_rtx_costs): Update accordingly.\n+\t* config/spu/predicates.md (vec_imm_operand): Likewise.\n+\n+\t* config/stormy16/stormy16.h (LEGITIMATE_CONSTANT_P): Delete.\n+\n+\t* config/v850/v850.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/v850/v850.c (v850_legitimate_constant_p): New function.\n+\t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\n+\t* config/vax/vax-protos.h (legitimate_constant_p): Delete.\n+\t* config/vax/vax.h (LEGITIMATE_CONSTANT_P): Likewise.\n+\t* config/vax/vax.c (legitimate_constant_p): Likewise.\n+\n+\t* config/xtensa/xtensa.h (LEGITIMATE_CONSTANT_P): Delete.\n+\t* config/xtensa/xtensa.c (TARGET_LEGITIMATE_CONSTANT_P): Define.\n+\t(xtensa_legitimate_constant_p): New function.\n+\n 2011-04-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* target.def (cannot_force_const_mem): Add a mode argument."}, {"sha": "89b248cef389f76be88428d48e6d01c59faa163f", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -690,7 +690,7 @@ precompute_register_parameters (int num_actuals, struct arg_data *args,\n \t/* If the value is a non-legitimate constant, force it into a\n \t   pseudo now.  TLS symbols sometimes need a call to resolve.  */\n \tif (CONSTANT_P (args[i].value)\n-\t    && !LEGITIMATE_CONSTANT_P (args[i].value))\n+\t    && !targetm.legitimate_constant_p (args[i].mode, args[i].value))\n \t  args[i].value = force_reg (args[i].mode, args[i].value);\n \n \t/* If we are to promote the function arg to a wider mode,\n@@ -3447,7 +3447,8 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \n       /* Make sure it is a reasonable operand for a move or push insn.  */\n       if (!REG_P (addr) && !MEM_P (addr)\n-\t  && ! (CONSTANT_P (addr) && LEGITIMATE_CONSTANT_P (addr)))\n+\t  && !(CONSTANT_P (addr)\n+\t       && targetm.legitimate_constant_p (Pmode, addr)))\n \taddr = force_operand (addr, NULL_RTX);\n \n       argvec[count].value = addr;\n@@ -3488,7 +3489,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \n       /* Make sure it is a reasonable operand for a move or push insn.  */\n       if (!REG_P (val) && !MEM_P (val)\n-\t  && ! (CONSTANT_P (val) && LEGITIMATE_CONSTANT_P (val)))\n+\t  && !(CONSTANT_P (val) && targetm.legitimate_constant_p (mode, val)))\n \tval = force_operand (val, NULL_RTX);\n \n       if (pass_by_reference (&args_so_far, mode, NULL_TREE, 1))"}, {"sha": "58723aa81a463a22c8a6c29e8929cd22fd3173fc", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -34,7 +34,7 @@ extern void alpha_output_filename (FILE *, const char *);\n extern rtx alpha_tablejump_addr_vec (rtx);\n extern rtx alpha_tablejump_best_label (rtx);\n \n-extern bool alpha_legitimate_constant_p (rtx);\n+extern bool alpha_legitimate_constant_p (enum machine_mode, rtx);\n extern rtx alpha_legitimize_reload_address (rtx, enum machine_mode,\n \t\t\t\t\t    int, int, int);\n "}, {"sha": "4cbafa02f912f8defee2cecd37ea122c8e3f0c17", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -2023,15 +2023,14 @@ alpha_extract_integer (rtx x, HOST_WIDE_INT *p0, HOST_WIDE_INT *p1)\n   *p1 = i1;\n }\n \n-/* Implement LEGITIMATE_CONSTANT_P.  This is all constants for which we\n-   are willing to load the value into a register via a move pattern.\n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.  This is all constants for which\n+   we are willing to load the value into a register via a move pattern.\n    Normally this is all symbolic constants, integral constants that\n    take three or fewer instructions, and floating-point zero.  */\n \n bool\n-alpha_legitimate_constant_p (rtx x)\n+alpha_legitimate_constant_p (enum machine_mode mode, rtx x)\n {\n-  enum machine_mode mode = GET_MODE (x);\n   HOST_WIDE_INT i0, i1;\n \n   switch (GET_CODE (x))\n@@ -9864,6 +9863,8 @@ alpha_conditional_register_usage (void)\n #define TARGET_FUNCTION_OK_FOR_SIBCALL alpha_function_ok_for_sibcall\n #undef TARGET_CANNOT_COPY_INSN_P\n #define TARGET_CANNOT_COPY_INSN_P alpha_cannot_copy_insn_p\n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P alpha_legitimate_constant_p\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM alpha_cannot_force_const_mem\n "}, {"sha": "15567cd3cf7bef2bce4c1abde56748cf8eced5d4", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -808,11 +808,6 @@ extern int alpha_memory_latency;\n   (CONST_INT_P (X)\t\t\\\n    && (unsigned HOST_WIDE_INT) (INTVAL (X) + 0x8000) < 0x10000)\n \n-/* Include all constant integers and constant doubles, but not\n-   floating-point, except for floating-point zero.  */\n-\n-#define LEGITIMATE_CONSTANT_P  alpha_legitimate_constant_p\n-\n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n    We have two alternate definitions for each of them."}, {"sha": "c1e3115aeada2b9fc2a6c60a188fd5692a253d83", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -218,14 +218,14 @@\n \n     case CONST_VECTOR:\n       if (reload_in_progress || reload_completed)\n-\treturn alpha_legitimate_constant_p (op);\n+\treturn alpha_legitimate_constant_p (mode, op);\n       return op == CONST0_RTX (mode);\n \n     case CONST_INT:\n       if (mode == QImode || mode == HImode)\n \treturn true;\n       if (reload_in_progress || reload_completed)\n-\treturn alpha_legitimate_constant_p (op);\n+\treturn alpha_legitimate_constant_p (mode, op);\n       return add_operand (op, mode);\n \n     default:"}, {"sha": "fa252833dae667151b1dbc16ed3611a476ae2cd7", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -82,7 +82,6 @@ extern void neon_disambiguate_copy (rtx *, rtx *, rtx *, unsigned int);\n extern enum reg_class coproc_secondary_reload_class (enum machine_mode, rtx,\n \t\t\t\t\t\t     bool);\n extern bool arm_tls_referenced_p (rtx);\n-extern bool arm_cannot_force_const_mem (enum machine_mode, rtx);\n \n extern int cirrus_memory_offset (rtx);\n extern int arm_coproc_mem_operand (rtx, bool);"}, {"sha": "97d2d6f47e58aa273dbce7f0669711615ef0503f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -144,6 +144,8 @@ static void arm_internal_label (FILE *, const char *, unsigned long);\n static void arm_output_mi_thunk (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t tree);\n static bool arm_have_conditional_execution (void);\n+static bool arm_cannot_force_const_mem (enum machine_mode, rtx);\n+static bool arm_legitimate_constant_p (enum machine_mode, rtx);\n static bool arm_rtx_costs_1 (rtx, enum rtx_code, int*, bool);\n static bool arm_size_rtx_costs (rtx, enum rtx_code, enum rtx_code, int *);\n static bool arm_slowmul_rtx_costs (rtx, enum rtx_code, enum rtx_code, int *, bool);\n@@ -528,6 +530,9 @@ static const struct default_options arm_option_optimization_table[] =\n #undef TARGET_HAVE_CONDITIONAL_EXECUTION\n #define TARGET_HAVE_CONDITIONAL_EXECUTION arm_have_conditional_execution\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P arm_legitimate_constant_p\n+\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM arm_cannot_force_const_mem\n \n@@ -6497,9 +6502,41 @@ arm_tls_referenced_p (rtx x)\n   return for_each_rtx (&x, arm_tls_operand_p_1, NULL);\n }\n \n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.\n+\n+   On the ARM, allow any integer (invalid ones are removed later by insn\n+   patterns), nice doubles and symbol_refs which refer to the function's\n+   constant pool XXX.\n+\n+   When generating pic allow anything.  */\n+\n+static bool\n+arm_legitimate_constant_p_1 (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+{\n+  return flag_pic || !label_mentioned_p (x);\n+}\n+\n+static bool\n+thumb_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+{\n+  return (GET_CODE (x) == CONST_INT\n+\t  || GET_CODE (x) == CONST_DOUBLE\n+\t  || CONSTANT_ADDRESS_P (x)\n+\t  || flag_pic);\n+}\n+\n+static bool\n+arm_legitimate_constant_p (enum machine_mode mode, rtx x)\n+{\n+  return (!arm_cannot_force_const_mem (mode, x)\n+\t  && (TARGET_32BIT\n+\t      ? arm_legitimate_constant_p_1 (mode, x)\n+\t      : thumb_legitimate_constant_p (mode, x)));\n+}\n+\n /* Implement TARGET_CANNOT_FORCE_CONST_MEM.  */\n \n-bool\n+static bool\n arm_cannot_force_const_mem (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n {\n   rtx base, offset;"}, {"sha": "43323942a44cb0e63a834d73a826472732344628", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1746,27 +1746,6 @@ typedef struct\n #define TARGET_DEFAULT_WORD_RELOCATIONS 0\n #endif\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.\n-\n-   On the ARM, allow any integer (invalid ones are removed later by insn\n-   patterns), nice doubles and symbol_refs which refer to the function's\n-   constant pool XXX.\n-\n-   When generating pic allow anything.  */\n-#define ARM_LEGITIMATE_CONSTANT_P(X)\t(flag_pic || ! label_mentioned_p (X))\n-\n-#define THUMB_LEGITIMATE_CONSTANT_P(X)\t\\\n- (   GET_CODE (X) == CONST_INT\t\t\\\n-  || GET_CODE (X) == CONST_DOUBLE\t\\\n-  || CONSTANT_ADDRESS_P (X)\t\t\\\n-  || flag_pic)\n-\n-#define LEGITIMATE_CONSTANT_P(X)\t\t\t\\\n-  (!arm_cannot_force_const_mem (VOIDmode, X)\t\t\\\n-   && (TARGET_32BIT ? ARM_LEGITIMATE_CONSTANT_P (X)\t\\\n-\t\t    : THUMB_LEGITIMATE_CONSTANT_P (X)))\n-\n #ifndef SUBTARGET_NAME_ENCODING_LENGTHS\n #define SUBTARGET_NAME_ENCODING_LENGTHS\n #endif"}, {"sha": "5f4ceff021446134f1b05d5578653931074134af", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -421,8 +421,6 @@ do {\t\t\t\t\t\t\t\t\t    \\\n     }\t\t\t\t\t\t\t\t\t    \\\n } while(0)\n \n-#define LEGITIMATE_CONSTANT_P(X) 1\n-\n #define BRANCH_COST(speed_p, predictable_p) 0\n \n #define SLOW_BYTE_ACCESS 0"}, {"sha": "40c641c46c06864f52c9c74b5b732cba1892c7b0", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -73,7 +73,6 @@ extern char *bfin_asm_long (void);\n extern char *bfin_asm_short (void);\n extern int log2constp (unsigned HOST_WIDE_INT);\n \n-extern bool bfin_legitimate_constant_p (rtx);\n extern int hard_regno_mode_ok (int, Mmode);\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx);\t  \n extern HOST_WIDE_INT bfin_initial_elimination_offset (int, int);"}, {"sha": "25316cf679c04cd8a89110fbd86f5d76f07a9a29", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -2163,7 +2163,7 @@ expand_move (rtx *operands, enum machine_mode mode)\n   else if (mode == SImode && GET_CODE (op) == CONST\n \t   && GET_CODE (XEXP (op, 0)) == PLUS\n \t   && GET_CODE (XEXP (XEXP (op, 0), 0)) == SYMBOL_REF\n-\t   && !bfin_legitimate_constant_p (op))\n+\t   && !targetm.legitimate_constant_p (mode, op))\n     {\n       rtx dest = operands[0];\n       rtx op0, op1;\n@@ -3070,8 +3070,8 @@ bfin_cannot_force_const_mem (enum machine_mode mode ATTRIBUTE_UNUSED,\n    This ensures that flat binaries never have to deal with relocations\n    crossing section boundaries.  */\n \n-bool\n-bfin_legitimate_constant_p (rtx x)\n+static bool\n+bfin_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n {\n   rtx sym;\n   HOST_WIDE_INT offset;\n@@ -6682,6 +6682,9 @@ bfin_conditional_register_usage (void)\n #undef TARGET_DELEGITIMIZE_ADDRESS\n #define TARGET_DELEGITIMIZE_ADDRESS bfin_delegitimize_address\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P bfin_legitimate_constant_p\n+\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM bfin_cannot_force_const_mem\n "}, {"sha": "8577db7a6de43eac7c55900383f00034ed3af051", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -784,13 +784,6 @@ typedef struct {\n \n /* Addressing Modes */\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   symbol_ref are not legitimate and will be put into constant pool.\n-   See force_const_mem().\n-   If -mno-pool, all constants are legitimate.\n- */\n-#define LEGITIMATE_CONSTANT_P(X) bfin_legitimate_constant_p (X)\n-\n /*   A number, the maximum number of registers that can appear in a\n      valid memory address.  Note that it is up to you to specify a\n      value equal to the maximum number that `TARGET_LEGITIMATE_ADDRESS_P'"}, {"sha": "57bdd4677c20068f44993ccd78ba1512638b6dc1", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1020,8 +1020,6 @@ struct cum_args {int regs;};\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define LEGITIMATE_CONSTANT_P(X) 1\n-\n \n /* Node: Condition Code */\n "}, {"sha": "d98840849079c6ae2344ee7e5708e295606c860d", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -667,12 +667,6 @@ enum reg_class\n    will reload one or both registers only if neither labeling works.  */\n #define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n \n-/* A C expression that is nonzero if X is a legitimate constant for an\n-   immediate operand on the target machine.  You can assume that X satisfies\n-   `CONSTANT_P', so you need not check this.  In fact, `1' is a suitable\n-   definition for this macro on machines where anything `CONSTANT_P' is valid.  */\n-#define LEGITIMATE_CONSTANT_P(X) 1\n-\n /*}}}*/ \f\n /*{{{  Describing Relative Costs of Operations */ \n "}, {"sha": "62e2506f31e49f905db2c2ef29c28542a8493783", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -79,7 +79,6 @@ extern int frv_hard_regno_mode_ok\t(int, enum machine_mode);\n extern int frv_hard_regno_nregs\t\t(int, enum machine_mode);\n extern int frv_class_max_nregs\t\t(enum reg_class rclass,\n \t\t\t\t\t enum machine_mode mode);\n-extern int frv_legitimate_constant_p\t(rtx);\n extern enum machine_mode frv_select_cc_mode (enum rtx_code, rtx, rtx);\n #endif\t/* RTX_CODE */\n "}, {"sha": "9e2f7189b1bc4ff086bf9cf43ac1789f910dc3b6", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -372,6 +372,7 @@ static int frv_memory_move_cost\t\t\t(enum machine_mode,\n static void frv_asm_out_constructor\t\t(rtx, int);\n static void frv_asm_out_destructor\t\t(rtx, int);\n static bool frv_function_symbol_referenced_p\t(rtx);\n+static bool frv_legitimate_constant_p\t\t(enum machine_mode, rtx);\n static bool frv_cannot_force_const_mem\t\t(enum machine_mode, rtx);\n static const char *unspec_got_name\t\t(int);\n static void frv_output_const_unspec\t\t(FILE *,\n@@ -472,6 +473,8 @@ static const struct default_options frv_option_optimization_table[] =\n \n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL frv_function_ok_for_sibcall\n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P frv_legitimate_constant_p\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM frv_cannot_force_const_mem\n \n@@ -603,7 +606,7 @@ frv_const_unspec_p (rtx x, struct frv_unspec *unspec)\n    We never allow constants to be forced into memory for TARGET_FDPIC.\n    This is necessary for several reasons:\n \n-   1. Since LEGITIMATE_CONSTANT_P rejects constant pool addresses, the\n+   1. Since frv_legitimate_constant_p rejects constant pool addresses, the\n       target-independent code will try to force them into the constant\n       pool, thus leading to infinite recursion.\n \n@@ -6749,16 +6752,14 @@ frv_class_max_nregs (enum reg_class rclass, enum machine_mode mode)\n    `CONSTANT_P', so you need not check this.  In fact, `1' is a suitable\n    definition for this macro on machines where anything `CONSTANT_P' is valid.  */\n \n-int\n-frv_legitimate_constant_p (rtx x)\n+static bool\n+frv_legitimate_constant_p (enum machine_mode mode, rtx x)\n {\n-  enum machine_mode mode = GET_MODE (x);\n-\n   /* frv_cannot_force_const_mem always returns true for FDPIC.  This\n      means that the move expanders will be expected to deal with most\n      kinds of constant, regardless of what we return here.\n \n-     However, among its other duties, LEGITIMATE_CONSTANT_P decides whether\n+     However, among its other duties, frv_legitimate_constant_p decides whether\n      a constant can be entered into reg_equiv_constant[].  If we return true,\n      reload can create new instances of the constant whenever it likes.\n \n@@ -6775,7 +6776,7 @@ frv_legitimate_constant_p (rtx x)\n     return TRUE;\n \n   /* double integer constants are ok.  */\n-  if (mode == VOIDmode || mode == DImode)\n+  if (GET_MODE (x) == VOIDmode || mode == DImode)\n     return TRUE;\n \n   /* 0 is always ok.  */"}, {"sha": "0255951732273751ecdbeaf25763743fa2f6b3e3", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1502,12 +1502,6 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n \n #define FIND_BASE_TERM frv_find_base_term\n \n-/* A C expression that is nonzero if X is a legitimate constant for an\n-   immediate operand on the target machine.  You can assume that X satisfies\n-   `CONSTANT_P', so you need not check this.  In fact, `1' is a suitable\n-   definition for this macro on machines where anything `CONSTANT_P' is valid.  */\n-#define LEGITIMATE_CONSTANT_P(X) frv_legitimate_constant_p (X)\n-\n /* The load-and-update commands allow pre-modification in addresses.\n    The index has to be in a register.  */\n #define HAVE_PRE_MODIFY_REG 1"}, {"sha": "da3b75ab3bd4bff172ffa6a83d7419e27075907c", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -60,8 +60,6 @@ extern int byte_accesses_mergeable_p (rtx, rtx);\n extern int same_cmp_preceding_p (rtx);\n extern int same_cmp_following_p (rtx);\n \n-extern int h8300_legitimate_constant_p (rtx);\n-\n /* Used in builtins.c */\n extern rtx h8300_return_addr_rtx (int, rtx);\n "}, {"sha": "de41d702f467b8198e1276c52be87beb4a4d59a5", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -5749,14 +5749,6 @@ h8300_hard_regno_scratch_ok (unsigned int regno)\n }\n \n \n-/* Return nonzero if X is a legitimate constant.  */\n-\n-int\n-h8300_legitimate_constant_p (rtx x ATTRIBUTE_UNUSED)\n-{\n-  return 1;\n-}\n-\n /* Return nonzero if X is a REG or SUBREG suitable as a base register.  */\n \n static int"}, {"sha": "015df60015469233372816747d8bd4bc5b36c2dc", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -528,11 +528,6 @@ struct cum_arg\n        && INTVAL (X) < (TARGET_H8300 ? 0x10000 : 0x1000000))\t\\\n    || (GET_CODE (X) == HIGH || GET_CODE (X) == CONST))\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n-\n-#define LEGITIMATE_CONSTANT_P(X) (h8300_legitimate_constant_p (X))\n-\n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n    We have two alternate definitions for each of them."}, {"sha": "ccba8484bdc3db3f4f7399971afa52d00570fe9f", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -55,7 +55,6 @@ extern bool ix86_expand_movmem (rtx, rtx, rtx, rtx, rtx, rtx);\n extern bool ix86_expand_setmem (rtx, rtx, rtx, rtx, rtx, rtx);\n extern bool ix86_expand_strlen (rtx, rtx, rtx, rtx);\n \n-extern bool legitimate_constant_p (rtx);\n extern bool constant_address_p (rtx);\n extern bool legitimate_pic_operand_p (rtx);\n extern bool legitimate_pic_address_disp_p (rtx);"}, {"sha": "b55c67bb56490e3daecabef0ee078310f2eb3355", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -11918,8 +11918,8 @@ darwin_local_data_pic (rtx disp)\n /* Determine if a given RTX is a valid constant.  We already know this\n    satisfies CONSTANT_P.  */\n \n-bool\n-legitimate_constant_p (rtx x)\n+static bool\n+ix86_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n {\n   switch (GET_CODE (x))\n     {\n@@ -12005,7 +12005,7 @@ legitimate_constant_p (rtx x)\n    is checked above.  */\n \n static bool\n-ix86_cannot_force_const_mem (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+ix86_cannot_force_const_mem (enum machine_mode mode, rtx x)\n {\n   /* We can always put integral constants and vectors in memory.  */\n   switch (GET_CODE (x))\n@@ -12018,7 +12018,7 @@ ix86_cannot_force_const_mem (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n     default:\n       break;\n     }\n-  return !legitimate_constant_p (x);\n+  return !ix86_legitimate_constant_p (mode, x);\n }\n \n \n@@ -12356,7 +12356,8 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t    /* Displacement is an invalid pic construct.  */\n \t    return false;\n #if TARGET_MACHO\n-\t  else if (MACHO_DYNAMIC_NO_PIC_P && !legitimate_constant_p (disp))\n+\t  else if (MACHO_DYNAMIC_NO_PIC_P\n+\t\t   && !ix86_legitimate_constant_p (Pmode, disp))\n \t    /* displacment must be referenced via non_lazy_pointer */\n \t    return false;\n #endif\n@@ -12386,9 +12387,9 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n       else if (GET_CODE (disp) != LABEL_REF\n \t       && !CONST_INT_P (disp)\n \t       && (GET_CODE (disp) != CONST\n-\t\t   || !legitimate_constant_p (disp))\n+\t\t   || !ix86_legitimate_constant_p (Pmode, disp))\n \t       && (GET_CODE (disp) != SYMBOL_REF\n-\t\t   || !legitimate_constant_p (disp)))\n+\t\t   || !ix86_legitimate_constant_p (Pmode, disp)))\n \t/* Displacement is not constant.  */\n \treturn false;\n       else if (TARGET_64BIT\n@@ -35454,6 +35455,9 @@ ix86_autovectorize_vector_sizes (void)\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P ix86_legitimate_address_p\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P ix86_legitimate_constant_p\n+\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED ix86_frame_pointer_required\n "}, {"sha": "5baa2b842e839448ad617c13f7b85c7c72ab2b25", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1644,11 +1644,6 @@ typedef struct ix86_args {\n \n #define CONSTANT_ADDRESS_P(X)  constant_address_p (X)\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n-\n-#define LEGITIMATE_CONSTANT_P(X)  legitimate_constant_p (X)\n-\n /* If defined, a C expression to determine the base term of address X.\n    This macro is used in only one place: `find_base_term' in alias.c.\n "}, {"sha": "ff0e723593c4fbf2ba21801d53846c5d09167d0e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -4056,7 +4056,7 @@\n   \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n {\n   /* ??? Needed for compress_float_constant since all fp constants\n-     are LEGITIMATE_CONSTANT_P.  */\n+     are TARGET_LEGITIMATE_CONSTANT_P.  */\n   if (GET_CODE (operands[1]) == CONST_DOUBLE)\n     {\n       if ((!TARGET_SSE2 || TARGET_MIX_SSE_I387)\n@@ -4162,7 +4162,7 @@\n   \"TARGET_80387\"\n {\n   /* ??? Needed for compress_float_constant since all fp constants\n-     are LEGITIMATE_CONSTANT_P.  */\n+     are TARGET_LEGITIMATE_CONSTANT_P.  */\n   if (GET_CODE (operands[1]) == CONST_DOUBLE)\n     {\n       if (standard_80387_constant_p (operands[1]) > 0)\n@@ -6076,7 +6076,7 @@\n \n ;; Convert lea to the lea pattern to avoid flags dependency.\n ;; ??? This pattern handles immediate operands that do not satisfy immediate\n-;; operand predicate (LEGITIMATE_CONSTANT_P) in the previous pattern.\n+;; operand predicate (TARGET_LEGITIMATE_CONSTANT_P) in the previous pattern.\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")"}, {"sha": "627271e8d7d7cb069c65a63415d7ab6c5786b61e", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -26,8 +26,6 @@ extern int ia64_st_address_bypass_p (rtx, rtx);\n extern int ia64_ld_address_bypass_p (rtx, rtx);\n extern int ia64_produce_address_p (rtx);\n \n-extern bool ia64_legitimate_constant_p (rtx);\n-\n extern rtx ia64_expand_move (rtx, rtx);\n extern int ia64_move_ok (rtx, rtx);\n extern int ia64_load_pair_ok (rtx, rtx);"}, {"sha": "6c6904bc4f24e38c83d51687a08b8f98f0a39d35", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -316,6 +316,7 @@ static rtx ia64_struct_value_rtx (tree, int);\n static tree ia64_gimplify_va_arg (tree, tree, gimple_seq *, gimple_seq *);\n static bool ia64_scalar_mode_supported_p (enum machine_mode mode);\n static bool ia64_vector_mode_supported_p (enum machine_mode mode);\n+static bool ia64_legitimate_constant_p (enum machine_mode, rtx);\n static bool ia64_cannot_force_const_mem (enum machine_mode, rtx);\n static const char *ia64_mangle_type (const_tree);\n static const char *ia64_invalid_conversion (const_tree, const_tree);\n@@ -605,6 +606,9 @@ static const struct default_options ia64_option_optimization_table[] =\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION ia64_handle_option\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P ia64_legitimate_constant_p\n+\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM ia64_cannot_force_const_mem\n \n@@ -953,8 +957,8 @@ tls_symbolic_operand_type (rtx addr)\n /* Return true if X is a constant that is valid for some immediate\n    field in an instruction.  */\n \n-bool\n-ia64_legitimate_constant_p (rtx x)\n+static bool\n+ia64_legitimate_constant_p (enum machine_mode mode, rtx x)\n {\n   switch (GET_CODE (x))\n     {\n@@ -963,8 +967,7 @@ ia64_legitimate_constant_p (rtx x)\n       return true;\n \n     case CONST_DOUBLE:\n-      if (GET_MODE (x) == VOIDmode || GET_MODE (x) == SFmode\n-\t  || GET_MODE (x) == DFmode)\n+      if (GET_MODE (x) == VOIDmode || mode == SFmode || mode == DFmode)\n \treturn true;\n       return satisfies_constraint_G (x);\n \n@@ -986,25 +989,21 @@ ia64_legitimate_constant_p (rtx x)\n \t      op = XEXP (XEXP (op, 0), 0);\n \t    }\n \n-          if (any_offset_symbol_operand (op, GET_MODE (op))\n-              || function_operand (op, GET_MODE (op)))\n+          if (any_offset_symbol_operand (op, mode)\n+              || function_operand (op, mode))\n             return true;\n-\t  if (aligned_offset_symbol_operand (op, GET_MODE (op)))\n+\t  if (aligned_offset_symbol_operand (op, mode))\n \t    return (addend & 0x3fff) == 0;\n \t  return false;\n \t}\n       return false;\n \n     case CONST_VECTOR:\n-      {\n-\tenum machine_mode mode = GET_MODE (x);\n-\n-\tif (mode == V2SFmode)\n-\t  return satisfies_constraint_Y (x);\n+      if (mode == V2SFmode)\n+\treturn satisfies_constraint_Y (x);\n \n-\treturn (GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n-\t\t&& GET_MODE_SIZE (mode) <= 8);\n-      }\n+      return (GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n+\t      && GET_MODE_SIZE (mode) <= 8);\n \n     default:\n       return false;"}, {"sha": "2da614998e15df7c94680e1067f5dd402ff0f970", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1200,11 +1200,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    use as an index register.  This is needed for POST_MODIFY.  */\n \n #define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n-\n-/* A C expression that is nonzero if X is a legitimate constant for an\n-   immediate operand on the target machine.  */\n-\n-#define LEGITIMATE_CONSTANT_P(X) ia64_legitimate_constant_p (X)\n \f\n /* Condition Code Status */\n "}, {"sha": "b9717ff0f52ab9df06c393173b44ce610e00b5db", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -389,8 +389,6 @@ typedef struct iq2000_args\n \n #define REG_OK_FOR_INDEX_P(X) 0\n \n-#define LEGITIMATE_CONSTANT_P(X) (1)\n-\n \f\n /* Describing Relative Costs of Operations.  */\n "}, {"sha": "aad36743279aad24d24b9e11790153b7643624b3", "filename": "gcc/config/lm32/lm32-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Flm32%2Flm32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Flm32%2Flm32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -36,4 +36,3 @@ extern rtx lm32_legitimize_pic_address (rtx, enum machine_mode, rtx);\n extern void lm32_expand_scc (rtx operands[]);\n extern void lm32_expand_conditional_branch (rtx operands[]);\n extern bool lm32_move_ok (enum machine_mode, rtx operands[2]);\n-extern bool lm32_legitimate_constant_p (rtx);"}, {"sha": "ac368c84bac7cb2d00dc131b08b3029a08145421", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -81,6 +81,7 @@ static rtx lm32_function_arg (CUMULATIVE_ARGS * cum,\n static void lm32_function_arg_advance (CUMULATIVE_ARGS * cum,\n \t\t\t\t       enum machine_mode mode,\n \t\t\t\t       const_tree type, bool named);\n+static bool lm32_legitimate_constant_p (enum machine_mode, rtx);\n \n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options lm32_option_optimization_table[] =\n@@ -119,6 +120,8 @@ static const struct default_options lm32_option_optimization_table[] =\n #define TARGET_LEGITIMATE_ADDRESS_P lm32_legitimate_address_p\n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P lm32_legitimate_constant_p\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -1235,13 +1238,13 @@ lm32_move_ok (enum machine_mode mode, rtx operands[2]) {\n   return true;\n }\n \n-/* Implement LEGITIMATE_CONSTANT_P.  */\n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.  */\n \n-bool\n-lm32_legitimate_constant_p (rtx x)\n+static bool\n+lm32_legitimate_constant_p (enum machine_mode mode, rtx x)\n {\n   /* 32-bit addresses require multiple instructions.  */  \n-  if (!flag_pic && reloc_operand (x, GET_MODE (x)))\n+  if (!flag_pic && reloc_operand (x, mode))\n     return false; \n   \n   return true;"}, {"sha": "75a24160fd919405b51f1e0dcaf15855f99bf5b6", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -346,8 +346,6 @@ enum reg_class\n #define REG_OK_FOR_BASE_P(X) NONSTRICT_REG_OK_FOR_BASE_P(X)\n #endif\n \n-#define LEGITIMATE_CONSTANT_P(X) lm32_legitimate_constant_p (X)\n-\n /*-------------------------*/\n /* Condition Code Status.  */\n /*-------------------------*/"}, {"sha": "fdaa8a8beaccb45fb8d2370e0d2ad02da1bbd37c", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -65,7 +65,6 @@ int  m32c_hard_regno_ok (int, MM);\n bool m32c_illegal_subreg_p (rtx);\n bool m32c_immd_dbl_mov (rtx *, MM);\n rtx  m32c_incoming_return_addr_rtx (void);\n-int  m32c_legitimate_constant_p (rtx);\n int  m32c_legitimize_reload_address (rtx *, MM, int, int, int);\n int  m32c_limit_reload_class (MM, int);\n int  m32c_modes_tieable_p (MM, MM);"}, {"sha": "3770fefb6da220b584e0715ab1b01d63167bb8f6", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -2148,15 +2148,6 @@ m32c_legitimize_reload_address (rtx * x,\n   return 0;\n }\n \n-/* Implements LEGITIMATE_CONSTANT_P.  We split large constants anyway,\n-   so we can allow anything.  */\n-int\n-m32c_legitimate_constant_p (rtx x ATTRIBUTE_UNUSED)\n-{\n-  return 1;\n-}\n-\n-\n /* Return the appropriate mode for a named address pointer.  */\n #undef TARGET_ADDR_SPACE_POINTER_MODE\n #define TARGET_ADDR_SPACE_POINTER_MODE m32c_addr_space_pointer_mode"}, {"sha": "1a44b1b156dba48722886aad208019505c508582", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -570,8 +570,6 @@ typedef struct m32c_cumulative_args\n \tif (m32c_legitimize_reload_address(&(X),MODE,OPNUM,TYPE,IND_LEVELS)) \\\n \t  goto WIN;\n \n-#define LEGITIMATE_CONSTANT_P(X) m32c_legitimate_constant_p (X)\n-\n /* Address spaces.  */\n #define ADDR_SPACE_FAR\t1\n "}, {"sha": "1580f47edd1368935c0306e3d73212723aa2aa73", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -99,6 +99,7 @@ static void m32r_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n static bool m32r_can_eliminate (const int, const int);\n static void m32r_conditional_register_usage (void);\n static void m32r_trampoline_init (rtx, tree, rtx);\n+static bool m32r_legitimate_constant_p (enum machine_mode, rtx);\n \f\n /* M32R specific attributes.  */\n \n@@ -211,6 +212,9 @@ static const struct default_options m32r_option_optimization_table[] =\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT m32r_trampoline_init\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P m32r_legitimate_constant_p\n+\n #undef  TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO\t\tsjlj_except_unwind_info\n \n@@ -2935,3 +2939,21 @@ m32r_conditional_register_usage (void)\n       call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n     }\n }\n+\n+/* Implement TARGET_LEGITIMATE_CONSTANT_P\n+\n+   We don't allow (plus symbol large-constant) as the relocations can't\n+   describe it.  INTVAL > 32767 handles both 16-bit and 24-bit relocations.\n+   We allow all CONST_DOUBLE's as the md file patterns will force the\n+   constant to memory if they can't handle them.  */\n+\n+static bool\n+m32r_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+{\n+  return !(GET_CODE (x) == CONST\n+\t   && GET_CODE (XEXP (x, 0)) == PLUS\n+\t   && (GET_CODE (XEXP (XEXP (x, 0), 0)) == SYMBOL_REF\n+\t       || GET_CODE (XEXP (XEXP (x, 0), 0)) == LABEL_REF)\n+\t   && CONST_INT_P (XEXP (XEXP (x, 0), 1))\n+\t   && UINTVAL (XEXP (XEXP (x, 0), 1)) > 32767);\n+}"}, {"sha": "50b5b2aa1a3e82775350bac1de81fc96cdb3422d", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -749,19 +749,6 @@ L2:     .word STATIC\n    ||  CONST_INT_P (X)  \\\n    || (GET_CODE (X) == CONST      \\\n        && ! (flag_pic && ! m32r_legitimate_pic_operand_p (X))))\n-\n-/* Nonzero if the constant value X is a legitimate general operand.\n-   We don't allow (plus symbol large-constant) as the relocations can't\n-   describe it.  INTVAL > 32767 handles both 16-bit and 24-bit relocations.\n-   We allow all CONST_DOUBLE's as the md file patterns will force the\n-   constant to memory if they can't handle them.  */\n-\n-#define LEGITIMATE_CONSTANT_P(X)\t\t\t\t\t\\\n-  (! (GET_CODE (X) == CONST\t\t\t\t\t\t\\\n-      && GET_CODE (XEXP (X, 0)) == PLUS\t\t\t\t\t\\\n-      && (GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF || GET_CODE (XEXP (XEXP (X, 0), 0)) == LABEL_REF) \\\n-      && CONST_INT_P (XEXP (XEXP (X, 0), 1))\t\t\t\\\n-      && (unsigned HOST_WIDE_INT) INTVAL (XEXP (XEXP (X, 0), 1)) > 32767))\n \f\n /* Condition code usage.  */\n "}, {"sha": "8017cf25ed03c740198270c69a35be38ebb0e3d0", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -56,6 +56,7 @@ extern void notice_update_cc (rtx, rtx);\n extern bool m68k_legitimate_base_reg_p (rtx, bool);\n extern bool m68k_legitimate_index_reg_p (rtx, bool);\n extern bool m68k_illegitimate_symbolic_constant_p (rtx);\n+extern bool m68k_legitimate_constant_p (enum machine_mode, rtx);\n extern bool m68k_matches_q_p (rtx);\n extern bool m68k_matches_u_p (rtx);\n extern rtx legitimize_pic_address (rtx, enum machine_mode, rtx);"}, {"sha": "b01e54f505e95089115576a5ac4b39a88d51af06", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -299,6 +299,9 @@ const char *m68k_library_id_string = \"_current_shared_library_a5_offset_\";\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE m68k_function_arg_advance\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P m68k_legitimate_constant_p\n+\n static const struct attribute_spec m68k_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n@@ -1034,7 +1037,7 @@ m68k_expand_prologue (void)\n       && GET_CODE (stack_limit_rtx) == SYMBOL_REF)\n     {\n       limit = plus_constant (stack_limit_rtx, current_frame.size + 4);\n-      if (!LEGITIMATE_CONSTANT_P (limit))\n+      if (!m68k_legitimate_constant_p (Pmode, limit))\n \t{\n \t  emit_move_insn (gen_rtx_REG (Pmode, D0_REG), limit);\n \t  limit = gen_rtx_REG (Pmode, D0_REG);\n@@ -2163,6 +2166,14 @@ m68k_legitimate_mem_p (rtx x, struct m68k_address *address)\n \t\t\t\t     address));\n }\n \n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.  */\n+\n+bool\n+m68k_legitimate_constant_p (enum machine_mode mode, rtx x)\n+{\n+  return mode != XFmode && !m68k_illegitimate_symbolic_constant_p (x);\n+}\n+\n /* Return true if X matches the 'Q' constraint.  It must be a memory\n    with a base address and no constant offset or index.  */\n "}, {"sha": "3c9dbb3ceb4085c66c287ac279b57b607c905e67", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -664,13 +664,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n   ((GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n     || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n     || GET_CODE (X) == HIGH)\t\t\t\t\t\t\\\n-   && LEGITIMATE_CONSTANT_P (X))\n-\n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n-#define LEGITIMATE_CONSTANT_P(X)\t\t\t\t\\\n-  (GET_MODE (X) != XFmode\t\t\t\t\t\\\n-   && !m68k_illegitimate_symbolic_constant_p (X))\n+   && m68k_legitimate_constant_p (Pmode, X))\n \n #ifndef REG_OK_STRICT\n #define REG_STRICT_P 0"}, {"sha": "16697bf95f770597a54f7a6329a0c675913a744a", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1383,7 +1383,7 @@\n ;; ??? The XFmode patterns are schizophrenic about whether constants are\n ;; allowed.  Most but not all have predicates and constraint that disallow\n ;; constants.  Most but not all have output templates that handle constants.\n-;; See also LEGITIMATE_CONSTANT_P.\n+;; See also TARGET_LEGITIMATE_CONSTANT_P.\n \n (define_expand \"movxf\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")"}, {"sha": "32ff5fddf96eda9de8563d03451e53e2ff940e6d", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -138,6 +138,7 @@ static unsigned int mcore_function_arg_boundary (enum machine_mode,\n static void       mcore_asm_trampoline_template (FILE *);\n static void       mcore_trampoline_init\t\t(rtx, tree, rtx);\n static void       mcore_option_override\t\t(void);\n+static bool       mcore_legitimate_constant_p   (enum machine_mode, rtx);\n \f\n /* MCore specific attributes.  */\n \n@@ -247,6 +248,9 @@ static const struct default_options mcore_option_optimization_table[] =\n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P mcore_legitimate_constant_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Adjust the stack and return the number of bytes taken to do it.  */\n@@ -3205,3 +3209,13 @@ mcore_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   mem = adjust_address (m_tramp, SImode, 12);\n   emit_move_insn (mem, fnaddr);\n }\n+\n+/* Implement TARGET_LEGITIMATE_CONSTANT_P\n+\n+   On the MCore, allow anything but a double.  */\n+\n+static bool\n+mcore_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+{\n+  return GET_CODE (x) != CONST_DOUBLE;\n+}"}, {"sha": "278a8ccf0dc179167cd70fc898d50c7dbc7712e3", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -529,13 +529,6 @@ extern const enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n /* Recognize any constant value that is a valid address.  */\n #define CONSTANT_ADDRESS_P(X) \t (GET_CODE (X) == LABEL_REF)\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.\n-\n-   On the MCore, allow anything but a double.  */\n-#define LEGITIMATE_CONSTANT_P(X) (GET_CODE(X) != CONST_DOUBLE \\\n-\t\t\t\t  && CONSTANT_P (X))\n-\n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n    We have two alternate definitions for each of them."}, {"sha": "edfbaf7575c297d8e36378ee9e55194039b5c33f", "filename": "gcc/config/mep/mep-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -43,7 +43,6 @@ extern void mep_split_wide_move (rtx *, enum machine_mode);\n #ifdef RTX_CODE\n extern bool mep_expand_setcc (rtx *);\n extern rtx mep_expand_cbranch (rtx *);\n-extern bool mep_legitimate_constant_p (rtx);\n #endif\n extern const char *mep_emit_cbranch (rtx *, int);\n extern void mep_expand_call (rtx *, int);"}, {"sha": "60cf4ebff71846609d6b03bda3eac374784c7f3f", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1195,9 +1195,10 @@ mep_multi_slot (rtx x)\n   return get_attr_slot (x) == SLOT_MULTI;\n }\n \n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.  */\n \n-bool\n-mep_legitimate_constant_p (rtx x)\n+static bool\n+mep_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n {\n   /* We can't convert symbol values to gp- or tp-rel values after\n      reload, as reload might have used $gp or $tp for other\n@@ -1300,7 +1301,7 @@ mep_legitimate_address (enum machine_mode mode, rtx x, int strict)\n \n   if ((mode == SImode || mode == SFmode)\n       && CONSTANT_P (x)\n-      && LEGITIMATE_CONSTANT_P (x)\n+      && mep_legitimate_constant_p (mode, x)\n       && the_tag != 't' && the_tag != 'b')\n     {\n       if (GET_CODE (x) != CONST_INT\n@@ -7477,6 +7478,8 @@ mep_asm_init_sections (void)\n #define TARGET_CONDITIONAL_REGISTER_USAGE\tmep_conditional_register_usage\n #undef  TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT\t\tmep_trampoline_init\n+#undef  TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P\tmep_legitimate_constant_p\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "f5de83f5d1d79712a6b9c30152cbe3b3056b0db3", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -566,9 +566,6 @@ typedef struct\n \n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n \n-#define LEGITIMATE_CONSTANT_P(X) \\\n-  mep_legitimate_constant_p(X)\n-\n #define SELECT_CC_MODE(OP, X, Y)  CCmode\n \f\n "}, {"sha": "0a7d1c7f56dcb2450867afefb5c6e3be1c4db44d", "filename": "gcc/config/microblaze/microblaze-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -35,7 +35,6 @@ extern void microblaze_expand_divide (rtx *);\n extern void microblaze_expand_conditional_branch (enum machine_mode, rtx *); \n extern void microblaze_expand_conditional_branch_sf (rtx *); \n extern int microblaze_can_use_return_insn (void);\n-extern int microblaze_const_double_ok (rtx, enum machine_mode);\n extern void print_operand (FILE *, rtx, int);\n extern void print_operand_address (FILE *, rtx);\n extern void init_cumulative_args (CUMULATIVE_ARGS *,tree, rtx);"}, {"sha": "1cec425b15d8abc9946e67976c7974d7f52ca772", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -152,7 +152,7 @@ int microblaze_no_unsafe_delay;\n enum pipeline_type microblaze_pipe = MICROBLAZE_PIPE_5;\n \n /* High and low marks for floating point values which we will accept\n-   as legitimate constants for LEGITIMATE_CONSTANT_P.  These are\n+   as legitimate constants for TARGET_LEGITIMATE_CONSTANT_P.  These are\n    initialized in override_options.  */\n REAL_VALUE_TYPE dfhigh, dflow, sfhigh, sflow;\n \n@@ -210,15 +210,15 @@ static int microblaze_interrupt_function_p (tree);\n section *sdata2_section;\n \n /* Return truth value if a CONST_DOUBLE is ok to be a legitimate constant.  */\n-int\n+static bool\n microblaze_const_double_ok (rtx op, enum machine_mode mode)\n {\n   REAL_VALUE_TYPE d;\n \n   if (GET_CODE (op) != CONST_DOUBLE)\n     return 0;\n \n-  if (mode == VOIDmode)\n+  if (GET_MODE (op) == VOIDmode)\n     return 1;\n \n   if (mode != SFmode && mode != DFmode)\n@@ -2951,6 +2951,16 @@ microblaze_adjust_cost (rtx insn ATTRIBUTE_UNUSED, rtx link,\n     return 0;\n   return cost;\n }\n+\n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.\n+\n+   At present, GAS doesn't understand li.[sd], so don't allow it\n+   to be generated at present.  */\n+static bool\n+microblaze_legitimate_constant_p (enum machine_mode mode, rtx x)\n+{\n+  return GET_CODE (x) != CONST_DOUBLE || microblaze_const_double_ok (x, mode);\n+}\n \f\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO      microblaze_encode_section_info\n@@ -3040,6 +3050,9 @@ microblaze_adjust_cost (rtx insn ATTRIBUTE_UNUSED, rtx link,\n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO  sjlj_except_unwind_info\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P microblaze_legitimate_constant_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-microblaze.h\""}, {"sha": "6cfbf68fae75c0bbe430e48bbb0fc3265450b857", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -524,12 +524,6 @@ typedef struct microblaze_args\n    addresses which require two reload registers.  */\n #define LEGITIMATE_PIC_OPERAND_P(X)  (!pic_address_needs_scratch (X))\n \n-/* At present, GAS doesn't understand li.[sd], so don't allow it\n-   to be generated at present.  */\n-#define LEGITIMATE_CONSTANT_P(X)\t\t\t\t\\\n-  (GET_CODE (X) != CONST_DOUBLE\t\t\t\t\t\\\n-    || microblaze_const_double_ok (X, GET_MODE (X)))\n-\n #define CASE_VECTOR_MODE\t\t\t(SImode)\n \n #ifndef DEFAULT_SIGNED_CHAR"}, {"sha": "12caf8e9169e3eb9eb2001ad9c8b6169dd4d5036", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1535,6 +1535,14 @@ mips_build_integer (struct mips_integer_op *codes,\n     }\n }\n \f\n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.  */\n+\n+static bool\n+mips_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+{\n+  return mips_const_insns (x) > 0;\n+}\n+\f\n /* Return true if symbols of type TYPE require a GOT access.  */\n \n static bool\n@@ -1997,7 +2005,7 @@ mips_tls_symbol_ref_1 (rtx *x, void *data ATTRIBUTE_UNUSED)\n /* Implement TARGET_CANNOT_FORCE_CONST_MEM.  */\n \n static bool\n-mips_cannot_force_const_mem (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+mips_cannot_force_const_mem (enum machine_mode mode, rtx x)\n {\n   enum mips_symbol_type type;\n   rtx base, offset;\n@@ -2016,7 +2024,7 @@ mips_cannot_force_const_mem (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n      references, reload will consider forcing C into memory and using\n      one of the instruction's memory alternatives.  Returning false\n      here will force it to use an input reload instead.  */\n-  if (CONST_INT_P (x) && LEGITIMATE_CONSTANT_P (x))\n+  if (CONST_INT_P (x) && mips_legitimate_constant_p (mode, x))\n     return true;\n \n   split_const (x, &base, &offset);\n@@ -16572,6 +16580,9 @@ mips_shift_truncation_mask (enum machine_mode mode)\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM mips_cannot_force_const_mem\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P mips_legitimate_constant_p\n+\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO mips_encode_section_info\n "}, {"sha": "4386ce0028e6b1671852dd43cdb5d849fc2ffc95", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -2317,8 +2317,6 @@ typedef struct mips_args {\n #define CONSTANT_ADDRESS_P(X) \\\n   (CONSTANT_P (X) && memory_address_p (SImode, X))\n \n-#define LEGITIMATE_CONSTANT_P(X) (mips_const_insns (X) > 0)\n-\n /* This handles the magic '..CURRENT_FUNCTION' symbol, which means\n    'the start of the function that this code is output in'.  */\n "}, {"sha": "022868becd95aeb9111a664ef60f91ede2f4f0cf", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -173,7 +173,7 @@\n (define_predicate \"splittable_const_int_operand\"\n   (match_code \"const_int\")\n {\n-  /* When generating mips16 code, LEGITIMATE_CONSTANT_P rejects\n+  /* When generating mips16 code, TARGET_LEGITIMATE_CONSTANT_P rejects\n      CONST_INTs that can't be loaded using simple insns.  */\n   if (TARGET_MIPS16)\n     return false;"}, {"sha": "c609c1a2e356fd2822dff7d1a5988f422619e6b9", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -73,7 +73,6 @@ extern rtx mmix_return_addr_rtx (int, rtx);\n extern rtx mmix_eh_return_stackadj_rtx (void);\n extern rtx mmix_eh_return_handler_rtx (void);\n extern int mmix_constant_address_p (rtx);\n-extern int mmix_legitimate_constant_p (rtx);\n extern void mmix_print_operand (FILE *, rtx, int);\n extern void mmix_print_operand_address (FILE *, rtx);\n extern void mmix_expand_prologue (void);"}, {"sha": "80f0d8439a48cca8561420284e16ee91d39857fd", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -130,6 +130,7 @@ static void mmix_target_asm_function_prologue (FILE *, HOST_WIDE_INT);\n static void mmix_target_asm_function_end_prologue (FILE *);\n static void mmix_target_asm_function_epilogue (FILE *, HOST_WIDE_INT);\n static bool mmix_legitimate_address_p (enum machine_mode, rtx, bool);\n+static bool mmix_legitimate_constant_p (enum machine_mode, rtx);\n static void mmix_reorg (void);\n static void mmix_asm_output_mi_thunk\n   (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree);\n@@ -252,6 +253,8 @@ static const struct default_options mmix_option_optimization_table[] =\n \n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tmmix_legitimate_address_p\n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P\tmmix_legitimate_constant_p\n \n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED mmix_frame_pointer_required\n@@ -1152,10 +1155,10 @@ mmix_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n   return TARGET_BASE_ADDRESSES && mmix_constant_address_p (x);\n }\n \n-/* LEGITIMATE_CONSTANT_P.  */\n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.  */\n \n-int\n-mmix_legitimate_constant_p (rtx x)\n+static bool\n+mmix_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n {\n   RTX_CODE code = GET_CODE (x);\n \n@@ -1829,7 +1832,7 @@ mmix_print_operand_address (FILE *stream, rtx x)\n \t}\n     }\n \n-  if (TARGET_BASE_ADDRESSES && mmix_legitimate_constant_p (x))\n+  if (TARGET_BASE_ADDRESSES && mmix_legitimate_constant_p (Pmode, x))\n     {\n       output_addr_const (stream, x);\n       return;"}, {"sha": "09e50e04b10352430414d3da223ef413768b110e", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -614,9 +614,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n #define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n \n-#define LEGITIMATE_CONSTANT_P(X) \\\n- mmix_legitimate_constant_p (X)\n-\n \n /* Node: Condition Code */\n "}, {"sha": "b8c19fd87605a4d3acfeaf070156f241730237c4", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -30,7 +30,6 @@ extern rtx   mn10300_legitimize_reload_address (rtx, Mmode, int, int, int);\n extern bool  mn10300_function_value_regno_p (const unsigned int);\n extern int   mn10300_get_live_callee_saved_regs (void);\n extern bool  mn10300_hard_regno_mode_ok (unsigned int, Mmode);\n-extern bool  mn10300_legitimate_constant_p (rtx);\n extern bool  mn10300_modes_tieable (Mmode, Mmode);\n extern Cstar mn10300_output_add (rtx[3], bool);\n extern void  mn10300_print_operand (FILE *, rtx, int);"}, {"sha": "635b1cb4583d8849f04614723b6d30566dfb63b5", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -2051,13 +2051,13 @@ mn10300_legitimize_reload_address (rtx x,\n   return any_change ? x : NULL_RTX;\n }\n \n-/* Used by LEGITIMATE_CONSTANT_P().  Returns TRUE if X is a valid\n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.  Returns TRUE if X is a valid\n    constant.  Note that some \"constants\" aren't valid, such as TLS\n    symbols and unconverted GOT-based references, so we eliminate\n    those here.  */\n \n-bool\n-mn10300_legitimate_constant_p (rtx x)\n+static bool\n+mn10300_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n {\n   switch (GET_CODE (x))\n     {\n@@ -3209,6 +3209,8 @@ mn10300_reorg (void)\n #define TARGET_LEGITIMATE_ADDRESS_P\tmn10300_legitimate_address_p\n #undef  TARGET_DELEGITIMIZE_ADDRESS\n #define TARGET_DELEGITIMIZE_ADDRESS\tmn10300_delegitimize_address\n+#undef  TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P\tmn10300_legitimate_constant_p\n \n #undef  TARGET_PREFERRED_RELOAD_CLASS\n #define TARGET_PREFERRED_RELOAD_CLASS mn10300_preferred_reload_class"}, {"sha": "a0e17d845db2ffb67c355b7ad40cb5bec3e52147", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -557,10 +557,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n } while (0)\n \f\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n-#define LEGITIMATE_CONSTANT_P(X) mn10300_legitimate_constant_p (X)\n-\n /* Zero if this needs fixing up to become PIC.  */\n \n #define LEGITIMATE_PIC_OPERAND_P(X) \\"}, {"sha": "86c666314412c3c4ba4808005a9233d22e628782", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -441,10 +441,6 @@ enum reg_class\n /* All load operations zero extend.  */\n #define LOAD_EXTEND_OP(MEM) ZERO_EXTEND\n \n-/* A C expression that is nonzero if X is a legitimate constant for\n-   an immediate operand on the target machine.  */\n-#define LEGITIMATE_CONSTANT_P(X) 1\n-\n /* A number, the maximum number of registers that can appear in a\n    valid memory address.  */\n #define MAX_REGS_PER_ADDRESS 1"}, {"sha": "e3260c4105f1fa38ffba035c0900e2ab0d644a49", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -188,6 +188,7 @@ static void pa_conditional_register_usage (void);\n static enum machine_mode pa_c_mode_for_suffix (char);\n static section *pa_function_section (tree, enum node_frequency, bool, bool);\n static bool pa_cannot_force_const_mem (enum machine_mode, rtx);\n+static bool pa_legitimate_constant_p (enum machine_mode, rtx);\n \n /* The following extra sections are only used for SOM.  */\n static GTY(()) section *som_readonly_data_section;\n@@ -397,6 +398,9 @@ static const struct default_options pa_option_optimization_table[] =\n #undef TARGET_ASM_FUNCTION_SECTION\n #define TARGET_ASM_FUNCTION_SECTION pa_function_section\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P pa_legitimate_constant_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Parse the -mfixed-range= option string.  */\n@@ -10276,4 +10280,40 @@ pa_function_section (tree decl, enum node_frequency freq,\n   return default_function_section (decl, freq, startup, exit);\n }\n \n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.\n+\n+   In 64-bit mode, we reject CONST_DOUBLES.  We also reject CONST_INTS\n+   that need more than three instructions to load prior to reload.  This\n+   limit is somewhat arbitrary.  It takes three instructions to load a\n+   CONST_INT from memory but two are memory accesses.  It may be better\n+   to increase the allowed range for CONST_INTS.  We may also be able\n+   to handle CONST_DOUBLES.  */\n+\n+static bool\n+pa_legitimate_constant_p (enum machine_mode mode, rtx x)\n+{\n+  if (GET_MODE_CLASS (mode) == MODE_FLOAT && x != CONST0_RTX (mode))\n+    return false;\n+\n+  if (!NEW_HP_ASSEMBLER && !TARGET_GAS && GET_CODE (x) == LABEL_REF)\n+    return false;\n+\n+  if (TARGET_64BIT && GET_CODE (x) == CONST_DOUBLE)\n+    return false;\n+\n+  if (TARGET_64BIT\n+      && HOST_BITS_PER_WIDE_INT > 32\n+      && GET_CODE (x) == CONST_INT\n+      && !reload_in_progress\n+      && !reload_completed\n+      && !LEGITIMATE_64BIT_CONST_INT_P (INTVAL (x))\n+      && !cint_ok_for_move (INTVAL (x)))\n+    return false;\n+\n+  if (function_label_operand (x, mode))\n+    return false;\n+\n+  return true;\n+}\n+\n #include \"gt-pa.h\""}, {"sha": "f401707c9df721ef012fcd498ab20d9b40a4368b", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -806,37 +806,6 @@ extern int may_call_alloca;\n #define LEGITIMATE_64BIT_CONST_INT_P(X) \\\n   ((X) >= MIN_LEGIT_64BIT_CONST_INT && (X) < MAX_LEGIT_64BIT_CONST_INT)\n \n-/* A C expression that is nonzero if X is a legitimate constant for an\n-   immediate operand.\n-\n-   We include all constant integers and constant doubles, but not\n-   floating-point, except for floating-point zero.  We reject LABEL_REFs\n-   if we're not using gas or the new HP assembler. \n-\n-   In 64-bit mode, we reject CONST_DOUBLES.  We also reject CONST_INTS\n-   that need more than three instructions to load prior to reload.  This\n-   limit is somewhat arbitrary.  It takes three instructions to load a\n-   CONST_INT from memory but two are memory accesses.  It may be better\n-   to increase the allowed range for CONST_INTS.  We may also be able\n-   to handle CONST_DOUBLES.  */\n-\n-#define LEGITIMATE_CONSTANT_P(X)\t\t\t\t\\\n-  ((GET_MODE_CLASS (GET_MODE (X)) != MODE_FLOAT\t\t\t\\\n-    || (X) == CONST0_RTX (GET_MODE (X)))\t\t\t\\\n-   && (NEW_HP_ASSEMBLER\t\t\t\t\t\t\\\n-       || TARGET_GAS\t\t\t\t\t\t\\\n-       || GET_CODE (X) != LABEL_REF)\t\t\t\t\\\n-   && (!TARGET_64BIT\t\t\t\t\t\t\\\n-       || GET_CODE (X) != CONST_DOUBLE)\t\t\t\t\\\n-   && (!TARGET_64BIT\t\t\t\t\t\t\\\n-       || HOST_BITS_PER_WIDE_INT <= 32\t\t\t\t\\\n-       || GET_CODE (X) != CONST_INT\t\t\t\t\\\n-       || reload_in_progress\t\t\t\t\t\\\n-       || reload_completed\t\t\t\t\t\\\n-       || LEGITIMATE_64BIT_CONST_INT_P (INTVAL (X))\t\t\\\n-       || cint_ok_for_move (INTVAL (X)))\t\t\t\\\n-   && !function_label_operand (X, VOIDmode))\n-\n /* Target flags set on a symbol_ref.  */\n \n /* Set by ASM_OUTPUT_SYMBOL_REF when a symbol_ref is output.  */"}, {"sha": "fc0c92b8d02e700473125ac6cafb58f9340a5265", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -157,6 +157,7 @@ static rtx pdp11_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n static void pdp11_function_arg_advance (CUMULATIVE_ARGS *,\n \t\t\t\t\tenum machine_mode, const_tree, bool);\n static void pdp11_conditional_register_usage (void);\n+static bool pdp11_legitimate_constant_p (enum machine_mode, rtx);\n \n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n \n@@ -243,6 +244,9 @@ static const struct default_options pdp11_option_optimization_table[] =\n \n #undef  TARGET_PRINT_OPERAND_PUNCT_VALID_P\n #define TARGET_PRINT_OPERAND_PUNCT_VALID_P pdp11_asm_print_operand_punct_valid_p\n+\n+#undef  TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P pdp11_legitimate_constant_p\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n \n@@ -1926,4 +1930,12 @@ pdp11_function_section (tree decl ATTRIBUTE_UNUSED,\n   return NULL;\n }\n \n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.  */\n+\n+static bool\n+pdp11_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+{\n+  return GET_CODE (x) != CONST_DOUBLE || legitimate_const_double_p (x);\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "5d389ec4edb33c1c1e177f8dd6b746d4ff86c781", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -418,12 +418,6 @@ extern int may_call_alloca;\n \n #define MAX_REGS_PER_ADDRESS 1\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n-\n-#define LEGITIMATE_CONSTANT_P(X)                                        \\\n-  (GET_CODE (X) != CONST_DOUBLE || legitimate_const_double_p (X))\n-\n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n    We have two alternate definitions for each of them."}, {"sha": "abe6d6432b59584a92a9960548f1278352ac53e9", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -452,11 +452,6 @@ do {                                                                         \\\n     goto WIN;                                                                \\\n   } while(0);                                                                \\\n \n-/* Nonzero if the constant rtx X is a legitimate general operand.  X\n-   satisfies CONSTANT_P.  */\n-\n-#define LEGITIMATE_CONSTANT_P(X) 1\n-\n \f\n /* Condition Code Status  */\n "}, {"sha": "4f095a26207f3487a8b9db19063edffc326c62ba", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1213,6 +1213,7 @@ static bool rs6000_can_eliminate (const int, const int);\n static void rs6000_conditional_register_usage (void);\n static void rs6000_trampoline_init (rtx, tree, rtx);\n static bool rs6000_cannot_force_const_mem (enum machine_mode, rtx);\n+static bool rs6000_legitimate_constant_p (enum machine_mode, rtx);\n \n /* Hash table stuff for keeping track of TOC entries.  */\n \n@@ -1670,6 +1671,9 @@ static const struct default_options rs6000_option_optimization_table[] =\n #undef TARGET_SET_CURRENT_FUNCTION\n #define TARGET_SET_CURRENT_FUNCTION rs6000_set_current_function\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P rs6000_legitimate_constant_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n \n@@ -28275,5 +28279,22 @@ rs6000_address_for_altivec (rtx x)\n   return x;\n }\n \n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.\n+\n+   On the RS/6000, all integer constants are acceptable, most won't be valid\n+   for particular insns, though.  Only easy FP constants are acceptable.  */\n+\n+static bool\n+rs6000_legitimate_constant_p (enum machine_mode mode, rtx x)\n+{\n+  if (rs6000_tls_referenced_p (x))\n+    return false;\n+\n+  return ((GET_CODE (x) != CONST_DOUBLE && GET_CODE (x) != CONST_VECTOR)\n+\t  || GET_MODE (x) == VOIDmode\n+\t  || (TARGET_POWERPC64 && mode == DImode)\n+\t  || easy_fp_constant (x, mode)\n+\t  || easy_vector_constant (x, mode));\n+}\n \n #include \"gt-rs6000.h\""}, {"sha": "5ae62af7ebf9fccfe36937ea65b89798ccb1ae64", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1728,22 +1728,6 @@ typedef struct rs6000_args\n    || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n    || GET_CODE (X) == HIGH)\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.\n-\n-   On the RS/6000, all integer constants are acceptable, most won't be valid\n-   for particular insns, though.  Only easy FP constants are\n-   acceptable.  */\n-\n-#define LEGITIMATE_CONSTANT_P(X)\t\t\t\t\\\n-  (((GET_CODE (X) != CONST_DOUBLE\t\t\t\t\\\n-     && GET_CODE (X) != CONST_VECTOR)\t\t\t\t\\\n-    || GET_MODE (X) == VOIDmode\t\t\t\t\t\\\n-    || (TARGET_POWERPC64 && GET_MODE (X) == DImode)\t\t\\\n-    || easy_fp_constant (X, GET_MODE (X))\t\t\t\\\n-    || easy_vector_constant (X, GET_MODE (X)))\t\t\t\\\n-   && !rs6000_tls_referenced_p (X))\n-\n #define EASY_VECTOR_15(n) ((n) >= -16 && (n) <= 15)\n #define EASY_VECTOR_15_ADD_SELF(n) (!EASY_VECTOR_15((n))\t\\\n \t\t\t\t    && EASY_VECTOR_15((n) >> 1) \\"}, {"sha": "544a30dd38bbeb758027aa835b0b3b1cac965177", "filename": "gcc/config/rx/rx-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Frx%2Frx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Frx%2Frx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -36,7 +36,7 @@ extern void             rx_emit_stack_popm (rtx *, bool);\n extern void             rx_emit_stack_pushm (rtx *);\n extern void\t\trx_expand_epilogue (bool);\n extern char *\t\trx_gen_move_template (rtx *, bool);\n-extern bool\t\trx_is_legitimate_constant (rtx);\n+extern bool\t\trx_legitimate_constant_p (enum machine_mode, rtx);\n extern bool\t\trx_is_restricted_memory_address (rtx, Mmode);\n extern bool\t\trx_match_ccmode (rtx, Mmode);\n extern void\t\trx_notice_update_cc (rtx body, rtx insn);"}, {"sha": "1009c5409bc33606dfe77fe5942847f12415c2bf", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1347,7 +1347,7 @@ gen_safe_add (rtx dest, rtx src, rtx val, bool is_frame_related)\n     insn = emit_insn (gen_addsi3 (dest, src, val));\n   else\n     {\n-      /* Wrap VAL in an UNSPEC so that rx_is_legitimate_constant\n+      /* Wrap VAL in an UNSPEC so that rx_legitimate_constant_p\n \t will not reject it.  */\n       val = gen_rtx_CONST (SImode, gen_rtx_UNSPEC (SImode, gen_rtvec (1, val), UNSPEC_CONST));\n       insn = emit_insn (gen_addsi3 (dest, src, val));\n@@ -2446,7 +2446,7 @@ rx_is_ms_bitfield_layout (const_tree record_type ATTRIBUTE_UNUSED)\n    operand on the RX.  X is already known to satisfy CONSTANT_P.  */\n \n bool\n-rx_is_legitimate_constant (rtx x)\n+rx_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n {\n   switch (GET_CODE (x))\n     {\n@@ -3052,6 +3052,9 @@ rx_adjust_insn_length (rtx insn, int current_length)\n #undef  TARGET_FLAGS_REGNUM\n #define TARGET_FLAGS_REGNUM\t\t\tCC_REG\n \n+#undef  TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P\t\trx_legitimate_constant_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* #include \"gt-rx.h\" */"}, {"sha": "742d83f341481808c601d84c04935fe9b98ff6b9", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -144,8 +144,6 @@\n \n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)   1\n \n-#define LEGITIMATE_CONSTANT_P(X) \trx_is_legitimate_constant (X)\n-\n #define HAVE_PRE_DECCREMENT\t\t1\n #define HAVE_POST_INCREMENT\t\t1\n "}, {"sha": "824d246cb84d7f5aef1cbbafc42e510e9c9e4130", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -556,7 +556,7 @@\n     if (MEM_P (operand0) && MEM_P (operand1))\n       operands[1] = copy_to_mode_reg (<register_modes:MODE>mode, operand1);\n     if (CONST_INT_P (operand1)\n-        && ! rx_is_legitimate_constant (operand1))\n+        && ! rx_legitimate_constant_p (<register_modes:MODE>mode, operand1))\n       FAIL;\n   }\n )"}, {"sha": "79fce849a163a40be5707345d1db02db8bdb0f59", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -66,7 +66,6 @@ extern bool tls_symbolic_reference_mentioned_p (rtx);\n extern bool legitimate_la_operand_p (rtx);\n extern bool preferred_la_operand_p (rtx, rtx);\n extern int legitimate_pic_operand_p (rtx);\n-extern int legitimate_constant_p (rtx);\n extern bool legitimate_reload_constant_p (rtx);\n extern rtx legitimize_pic_address (rtx, rtx);\n extern rtx legitimize_reload_address (rtx, enum machine_mode, int, int);"}, {"sha": "7d02b7f2fbfe144db1e83a866ec3b7e1378710e5", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -2777,15 +2777,15 @@ legitimate_pic_operand_p (rtx op)\n /* Returns true if the constant value OP is a legitimate general operand.\n    It is given that OP satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n \n-int\n-legitimate_constant_p (rtx op)\n+static bool\n+s390_legitimate_constant_p (enum machine_mode mode, rtx op)\n {\n   /* Accept all non-symbolic constants.  */\n   if (!SYMBOLIC_CONST (op))\n     return 1;\n \n   /* Accept immediate LARL operands.  */\n-  if (TARGET_CPU_ZARCH && larl_operand (op, VOIDmode))\n+  if (TARGET_CPU_ZARCH && larl_operand (op, mode))\n     return 1;\n \n   /* Thread-local symbols are never legal constants.  This is\n@@ -10829,6 +10829,9 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P s390_legitimate_address_p\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P s390_legitimate_constant_p\n+\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE s390_can_eliminate\n "}, {"sha": "47e0b1a5662add6429cd66bf67180116d1f2aac4", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -697,11 +697,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n-#define LEGITIMATE_CONSTANT_P(X) \\\n-     legitimate_constant_p (X)\n-\n /* Helper macro for s390.c and s390.md to check for symbolic constants.  */\n #define SYMBOLIC_CONST(X)       \\\n (GET_CODE (X) == SYMBOL_REF                                             \\"}, {"sha": "1f9975600fecc50114580ff7f53beb9d017eb774", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -598,8 +598,6 @@ typedef struct score_args\n \n #define REG_OK_FOR_INDEX_P(X) 0\n \n-#define LEGITIMATE_CONSTANT_P(X)        1\n-\n /* Condition Code Status.  */\n #define SELECT_CC_MODE(OP, X, Y)        score_select_cc_mode (OP, X, Y)\n "}, {"sha": "c84c510eba308f9116b09ab7dc6fcf7a471251eb", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -305,6 +305,7 @@ static int sh2a_function_vector_p (tree);\n static void sh_trampoline_init (rtx, tree, rtx);\n static rtx sh_trampoline_adjust_address (rtx);\n static void sh_conditional_register_usage (void);\n+static bool sh_legitimate_constant_p (enum machine_mode, rtx);\n \f\n static const struct attribute_spec sh_attribute_table[] =\n {\n@@ -598,6 +599,9 @@ static const struct default_options sh_option_optimization_table[] =\n #undef TARGET_TRAMPOLINE_ADJUST_ADDRESS\n #define TARGET_TRAMPOLINE_ADJUST_ADDRESS sh_trampoline_adjust_address\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P\tsh_legitimate_constant_p\n+\n /* Machine-specific symbol_ref flags.  */\n #define SYMBOL_FLAG_FUNCVEC_FUNCTION    (SYMBOL_FLAG_MACH_DEP << 0)\n \n@@ -12625,6 +12629,22 @@ sh_conditional_register_usage (void)\n \tSET_HARD_REG_BIT (reg_class_contents[SIBCALL_REGS], regno);\n }\n \n+/* Implement TARGET_LEGITIMATE_CONSTANT_P\n+\n+   can_store_by_pieces constructs VOIDmode CONST_DOUBLEs.  */\n+\n+static bool\n+sh_legitimate_constant_p (enum machine_mode mode, rtx x)\n+{\n+  return (TARGET_SHMEDIA\n+\t  ? ((mode != DFmode && GET_MODE_CLASS (mode) != MODE_VECTOR_FLOAT)\n+\t     || x == CONST0_RTX (mode)\n+\t     || !TARGET_SHMEDIA_FPU\n+\t     || TARGET_SHMEDIA64)\n+\t  : (GET_CODE (x) != CONST_DOUBLE\n+\t     || mode == DFmode || mode == SFmode\n+\t     || mode == DImode || GET_MODE (x) == VOIDmode));\n+}\n \n enum sh_divide_strategy_e sh_div_strategy = SH_DIV_STRATEGY_DEFAULT;\n "}, {"sha": "4876fd6c9cd83edf475dcc49ae8b02a9fe185b04", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1761,20 +1761,6 @@ struct sh_args {\n \n #define CONSTANT_ADDRESS_P(X)\t(GET_CODE (X) == LABEL_REF)\n \n-/* Nonzero if the constant value X is a legitimate general operand.  */\n-/* can_store_by_pieces constructs VOIDmode CONST_DOUBLEs.  */\n-\n-#define LEGITIMATE_CONSTANT_P(X) \\\n-  (TARGET_SHMEDIA\t\t\t\t\t\t\t\\\n-   ? ((GET_MODE (X) != DFmode\t\t\t\t\t\t\\\n-       && GET_MODE_CLASS (GET_MODE (X)) != MODE_VECTOR_FLOAT)\t\t\\\n-      || (X) == CONST0_RTX (GET_MODE (X))\t\t\t\t\\\n-      || ! TARGET_SHMEDIA_FPU\t\t\t\t\t\t\\\n-      || TARGET_SHMEDIA64)\t\t\t\t\t\t\\\n-   : (GET_CODE (X) != CONST_DOUBLE\t\t\t\t\t\\\n-      || GET_MODE (X) == DFmode || GET_MODE (X) == SFmode\t\t\\\n-      || GET_MODE (X) == DImode || GET_MODE (X) == VOIDmode))\n-\n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n    The suitable hard regs are always accepted and all pseudo regs"}, {"sha": "fd9a3211fdb032ca4dd7e743b72cff2c9471f81f", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -56,7 +56,6 @@ extern void sparc_emit_fixunsdi (rtx [2], enum machine_mode);\n extern void emit_tfmode_binop (enum rtx_code, rtx *);\n extern void emit_tfmode_unop (enum rtx_code, rtx *);\n extern void emit_tfmode_cvt (enum rtx_code, rtx *);\n-extern bool legitimate_constant_p (rtx);\n extern bool constant_address_p (rtx);\n extern bool legitimate_pic_operand_p (rtx);\n extern rtx sparc_legitimize_reload_address (rtx, enum machine_mode, int, int,"}, {"sha": "4a1795ef5ae384827e1484a37093b241472a530a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -382,6 +382,7 @@ static void sparc_output_addr_vec (rtx);\n static void sparc_output_addr_diff_vec (rtx);\n static void sparc_output_deferred_case_vectors (void);\n static bool sparc_legitimate_address_p (enum machine_mode, rtx, bool);\n+static bool sparc_legitimate_constant_p (enum machine_mode, rtx);\n static rtx sparc_builtin_saveregs (void);\n static int epilogue_renumber (rtx *, int);\n static bool sparc_assemble_integer (rtx, unsigned int, int);\n@@ -660,6 +661,9 @@ static const struct default_options sparc_option_optimization_table[] =\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P sparc_legitimate_address_p\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P sparc_legitimate_constant_p\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT sparc_trampoline_init\n \n@@ -3017,8 +3021,8 @@ pic_address_needs_scratch (rtx x)\n /* Determine if a given RTX is a valid constant.  We already know this\n    satisfies CONSTANT_P.  */\n \n-bool\n-legitimate_constant_p (rtx x)\n+static bool\n+sparc_legitimate_constant_p (enum machine_mode mode, rtx x)\n {\n   switch (GET_CODE (x))\n     {\n@@ -3035,8 +3039,8 @@ legitimate_constant_p (rtx x)\n       /* Floating point constants are generally not ok.\n \t The only exception is 0.0 in VIS.  */\n       if (TARGET_VIS\n-\t  && SCALAR_FLOAT_MODE_P (GET_MODE (x))\n-\t  && const_zero_operand (x, GET_MODE (x)))\n+\t  && SCALAR_FLOAT_MODE_P (mode)\n+\t  && const_zero_operand (x, mode))\n \treturn true;\n \n       return false;\n@@ -3045,7 +3049,7 @@ legitimate_constant_p (rtx x)\n       /* Vector constants are generally not ok.\n \t The only exception is 0 in VIS.  */\n       if (TARGET_VIS\n-\t  && const_zero_operand (x, GET_MODE (x)))\n+\t  && const_zero_operand (x, mode))\n \treturn true;\n \n       return false;\n@@ -3072,10 +3076,10 @@ constant_address_p (rtx x)\n     case CONST:\n       if (flag_pic && pic_address_needs_scratch (x))\n \treturn false;\n-      return legitimate_constant_p (x);\n+      return sparc_legitimate_constant_p (Pmode, x);\n \n     case SYMBOL_REF:\n-      return !flag_pic && legitimate_constant_p (x);\n+      return !flag_pic && sparc_legitimate_constant_p (Pmode, x);\n \n     default:\n       return false;"}, {"sha": "79c7f572b68f97e1a18a486da12abb08dde225d9", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1539,12 +1539,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define LEGITIMATE_PIC_OPERAND_P(X) legitimate_pic_operand_p (X)\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   Anything can be made to work except floating point constants.\n-   If TARGET_VIS, 0.0 can be made to work as well.  */\n-\n-#define LEGITIMATE_CONSTANT_P(X) legitimate_constant_p (X)\n-\n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n    We have two alternate definitions for each of them."}, {"sha": "2d2e77b5e4499f4d238fa4043c53227294c5c844", "filename": "gcc/config/spu/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fspu%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fspu%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fpredicates.md?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -58,7 +58,7 @@\n \n (define_predicate \"vec_imm_operand\"\n   (and (match_code \"const_int,const_double,const_vector\")\n-       (match_test \"spu_legitimate_constant_p (op)\")))\n+       (match_test \"spu_legitimate_constant_p (mode, op)\")))\n \n (define_predicate \"spu_arith_operand\"\n   (match_code \"reg,subreg,const_int,const_vector\")"}, {"sha": "675af02872334d9e592d5c81845e120fd8135c22", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -52,7 +52,7 @@ extern int arith_immediate_p (rtx op, enum machine_mode mode,\n extern bool exp2_immediate_p (rtx op, enum machine_mode mode, int low,\n \t\t\t      int high);\n extern int spu_constant_address_p (rtx x);\n-extern int spu_legitimate_constant_p (rtx x);\n+extern bool spu_legitimate_constant_p (enum machine_mode, rtx);\n extern int spu_initial_elimination_offset (int from, int to);\n extern rtx spu_function_value (const_tree type, const_tree func);\n extern void spu_setup_incoming_varargs (int *cum, enum machine_mode mode,"}, {"sha": "4142e7e229a976a7fbaead82399c4bb48e2f345f", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -477,6 +477,9 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P spu_legitimate_address_p\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P spu_legitimate_constant_p\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT spu_trampoline_init\n \n@@ -3733,8 +3736,8 @@ ea_symbol_ref (rtx *px, void *data ATTRIBUTE_UNUSED)\n    - a 64-bit constant where the high and low bits are identical\n      (DImode, DFmode)\n    - a 128-bit constant where the four 32-bit words match.  */\n-int\n-spu_legitimate_constant_p (rtx x)\n+bool\n+spu_legitimate_constant_p (enum machine_mode mode, rtx x)\n {\n   if (GET_CODE (x) == HIGH)\n     x = XEXP (x, 0);\n@@ -3746,7 +3749,7 @@ spu_legitimate_constant_p (rtx x)\n \n   /* V4SI with all identical symbols is valid. */\n   if (!flag_pic\n-      && GET_MODE (x) == V4SImode\n+      && mode == V4SImode\n       && (GET_CODE (CONST_VECTOR_ELT (x, 0)) == SYMBOL_REF\n \t  || GET_CODE (CONST_VECTOR_ELT (x, 0)) == LABEL_REF\n \t  || GET_CODE (CONST_VECTOR_ELT (x, 0)) == CONST))\n@@ -5439,7 +5442,7 @@ spu_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n      of a CONST_VECTOR here (or in CONST_COSTS) doesn't help though\n      because this cost will only be compared against a single insn. \n      if (code == CONST_VECTOR)\n-       return (LEGITIMATE_CONSTANT_P(x)) ? cost : COSTS_N_INSNS(6);\n+       return spu_legitimate_constant_p (mode, x) ? cost : COSTS_N_INSNS (6);\n    */\n \n   /* Use defaults for float operations.  Not accurate but good enough. */"}, {"sha": "16258911ef3b0a1a54d51f6e0da9842ff45c8979", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -393,8 +393,6 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n \n #define MAX_REGS_PER_ADDRESS 2\n \n-#define LEGITIMATE_CONSTANT_P(X) spu_legitimate_constant_p(X)\n-\n \f\n /* Costs */\n "}, {"sha": "871e523a67b659d1a7c0b5887eec932fec25adb0", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -342,8 +342,6 @@ enum reg_class\n \n #define MAX_REGS_PER_ADDRESS 1\n \n-#define LEGITIMATE_CONSTANT_P(X) 1\n-\n \f\n /* Describing Relative Costs of Operations.  */\n "}, {"sha": "86509e0ac4cb3c9d4608f7d29e9a22bfb37bfb5d", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -3117,6 +3117,19 @@ v850_issue_rate (void)\n {\n   return (TARGET_V850E2_ALL? 2 : 1);\n }\n+\n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.  */\n+\n+static bool\n+v850_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+{\n+  return (GET_CODE (x) == CONST_DOUBLE\n+\t  || !(GET_CODE (x) == CONST\n+\t       && GET_CODE (XEXP (x, 0)) == PLUS\n+\t       && GET_CODE (XEXP (XEXP (x, 0), 0)) == SYMBOL_REF\n+\t       && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT\n+\t       && !CONST_OK_FOR_K (INTVAL (XEXP (XEXP (x, 0), 1)))));\n+}\n \f\n /* V850 specific attributes.  */\n \n@@ -3234,6 +3247,9 @@ static const struct attribute_spec v850_attribute_table[] =\n #undef  TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE v850_option_optimization_table\n \n+#undef  TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P v850_legitimate_constant_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-v850.h\""}, {"sha": "5079936f416038744daffc7b10ea0ab86a289fd8", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -633,17 +633,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n \f\n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n-\n-#define LEGITIMATE_CONSTANT_P(X)\t\t\t\t\t\\\n-  (GET_CODE (X) == CONST_DOUBLE\t\t\t\t\t\t\\\n-   || !(GET_CODE (X) == CONST\t\t\t\t\t\t\\\n-\t&& GET_CODE (XEXP (X, 0)) == PLUS\t\t\t\t\\\n-\t&& GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF\t\t\\\n-\t&& GET_CODE (XEXP (XEXP (X, 0), 1)) == CONST_INT\t\t\\\n-\t&& ! CONST_OK_FOR_K (INTVAL (XEXP (XEXP (X, 0), 1)))))\n-\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.\n "}, {"sha": "a8f88bfa12603ebf38780d9b82fed731c1ffa474", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -19,7 +19,6 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n extern bool legitimate_constant_address_p (rtx);\n-extern bool legitimate_constant_p (rtx);\n extern bool vax_mode_dependent_address_p (rtx);\n \n #ifdef RTX_CODE"}, {"sha": "cc8c3f67e94ad9d48844bae1966fe6ed8f0db781", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1603,15 +1603,6 @@ legitimate_constant_address_p (rtx x)\n    return true;\n }\n \n-/* True if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n-\n-bool\n-legitimate_constant_p (rtx x ATTRIBUTE_UNUSED)\n-{\n-  return true;\n-}\n-\n /* The other macros defined here are used only in legitimate_address_p ().  */\n \n /* Nonzero if X is a hard reg that can be used as an index"}, {"sha": "a3e9d83e8f8688da91ed20498d9b03bd8a54e930", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -412,11 +412,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n #define CONSTANT_ADDRESS_P(X) legitimate_constant_address_p (X)\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n-\n-#define LEGITIMATE_CONSTANT_P(X) legitimate_constant_p (X)\n-\n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n    We have two alternate definitions for each of them."}, {"sha": "c312f50eca260ff449010a72de967192d9cc420b", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -173,6 +173,7 @@ static reg_class_t xtensa_secondary_reload (bool, rtx, reg_class_t,\n \t\t\t\t\t    struct secondary_reload_info *);\n \n static bool constantpool_address_p (const_rtx addr);\n+static bool xtensa_legitimate_constant_p (enum machine_mode, rtx);\n \n static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n   REG_ALLOC_ORDER;\n@@ -309,6 +310,9 @@ static const struct default_options xtensa_option_optimization_table[] =\n #undef TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n #define TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA xtensa_output_addr_const_extra\n \n+#undef TARGET_LEGITIMATE_CONSTANT_P\n+#define TARGET_LEGITIMATE_CONSTANT_P xtensa_legitimate_constant_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f\n@@ -3719,5 +3723,12 @@ xtensa_trampoline_init (rtx m_tramp, tree fndecl, rtx chain)\n \t\t     LCT_NORMAL, VOIDmode, 1, XEXP (m_tramp, 0), Pmode);\n }\n \n+/* Implement TARGET_LEGITIMATE_CONSTANT_P.  */\n+\n+static bool\n+xtensa_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+{\n+  return !xtensa_tls_referenced_p (x);\n+}\n \n #include \"gt-xtensa.h\""}, {"sha": "d3ce14794432cbfda2f09951f4d1ee3aafe3b428", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -671,10 +671,6 @@ typedef struct xtensa_args\n     || GET_CODE (X) == CONST_INT || GET_CODE (X) == HIGH\t\t\\\n     || (GET_CODE (X) == CONST)))\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n-#define LEGITIMATE_CONSTANT_P(X) (! xtensa_tls_referenced_p (X))\n-\n /* A C expression that is nonzero if X is a legitimate immediate\n    operand on the target machine when generating position independent\n    code.  */"}, {"sha": "a89d0ecc83d1d0ecd1e3e648cc9a55ef0a166bb1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -2522,7 +2522,7 @@ instruction for loading an immediate value into a floating-point\n register, so @code{TARGET_PREFERRED_RELOAD_CLASS} returns @code{NO_REGS} when\n @var{x} is a floating-point constant.  If the constant can't be loaded\n into any kind of register, code generation will be better if\n-@code{LEGITIMATE_CONSTANT_P} makes the constant illegitimate instead\n+@code{TARGET_LEGITIMATE_CONSTANT_P} makes the constant illegitimate instead\n of using @code{TARGET_PREFERRED_RELOAD_CLASS}.\n \n If an insn has pseudos in it after register allocation, reload will go\n@@ -2559,8 +2559,8 @@ instruction for loading an immediate value into a floating-point\n register, so @code{PREFERRED_RELOAD_CLASS} returns @code{NO_REGS} when\n @var{x} is a floating-point constant.  If the constant can't be loaded\n into any kind of register, code generation will be better if\n-@code{LEGITIMATE_CONSTANT_P} makes the constant illegitimate instead\n-of using @code{PREFERRED_RELOAD_CLASS}.\n+@code{TARGET_LEGITIMATE_CONSTANT_P} makes the constant illegitimate instead\n+of using @code{TARGET_PREFERRED_RELOAD_CLASS}.\n \n If an insn has pseudos in it after register allocation, reload will go\n through the alternatives and call repeatedly @code{PREFERRED_RELOAD_CLASS}\n@@ -5535,13 +5535,13 @@ These are obsolete macros, replaced by the\n @code{TARGET_MODE_DEPENDENT_ADDRESS_P} target hook.\n @end defmac\n \n-@defmac LEGITIMATE_CONSTANT_P (@var{x})\n-A C expression that is nonzero if @var{x} is a legitimate constant for\n-an immediate operand on the target machine.  You can assume that\n-@var{x} satisfies @code{CONSTANT_P}, so you need not check this.  In fact,\n-@samp{1} is a suitable definition for this macro on machines where\n-anything @code{CONSTANT_P} is valid.\n-@end defmac\n+@deftypefn {Target Hook} bool TARGET_LEGITIMATE_CONSTANT_P (enum machine_mode @var{mode}, rtx @var{x})\n+This hook returns true if @var{x} is a legitimate constant for a\n+@var{mode}-mode immediate operand on the target machine.  You can assume that\n+@var{x} satisfies @code{CONSTANT_P}, so you need not check this.\n+\n+The default definition returns true.\n+@end deftypefn\n \n @deftypefn {Target Hook} rtx TARGET_DELEGITIMIZE_ADDRESS (rtx @var{x})\n This hook is used to undo the possibly obfuscating effects of the"}, {"sha": "4637088a8197d9f218a724fb9429b6ec8aa5d74c", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -2510,7 +2510,7 @@ instruction for loading an immediate value into a floating-point\n register, so @code{TARGET_PREFERRED_RELOAD_CLASS} returns @code{NO_REGS} when\n @var{x} is a floating-point constant.  If the constant can't be loaded\n into any kind of register, code generation will be better if\n-@code{LEGITIMATE_CONSTANT_P} makes the constant illegitimate instead\n+@code{TARGET_LEGITIMATE_CONSTANT_P} makes the constant illegitimate instead\n of using @code{TARGET_PREFERRED_RELOAD_CLASS}.\n \n If an insn has pseudos in it after register allocation, reload will go\n@@ -2547,8 +2547,8 @@ instruction for loading an immediate value into a floating-point\n register, so @code{PREFERRED_RELOAD_CLASS} returns @code{NO_REGS} when\n @var{x} is a floating-point constant.  If the constant can't be loaded\n into any kind of register, code generation will be better if\n-@code{LEGITIMATE_CONSTANT_P} makes the constant illegitimate instead\n-of using @code{PREFERRED_RELOAD_CLASS}.\n+@code{TARGET_LEGITIMATE_CONSTANT_P} makes the constant illegitimate instead\n+of using @code{TARGET_PREFERRED_RELOAD_CLASS}.\n \n If an insn has pseudos in it after register allocation, reload will go\n through the alternatives and call repeatedly @code{PREFERRED_RELOAD_CLASS}\n@@ -5513,13 +5513,13 @@ These are obsolete macros, replaced by the\n @code{TARGET_MODE_DEPENDENT_ADDRESS_P} target hook.\n @end defmac\n \n-@defmac LEGITIMATE_CONSTANT_P (@var{x})\n-A C expression that is nonzero if @var{x} is a legitimate constant for\n-an immediate operand on the target machine.  You can assume that\n-@var{x} satisfies @code{CONSTANT_P}, so you need not check this.  In fact,\n-@samp{1} is a suitable definition for this macro on machines where\n-anything @code{CONSTANT_P} is valid.\n-@end defmac\n+@hook TARGET_LEGITIMATE_CONSTANT_P\n+This hook returns true if @var{x} is a legitimate constant for a\n+@var{mode}-mode immediate operand on the target machine.  You can assume that\n+@var{x} satisfies @code{CONSTANT_P}, so you need not check this.\n+\n+The default definition returns true.\n+@end deftypefn\n \n @hook TARGET_DELEGITIMIZE_ADDRESS\n This hook is used to undo the possibly obfuscating effects of the"}, {"sha": "ecaf1d798a25a8183b97200c153f1c56999cb52b", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1485,7 +1485,7 @@ move_block_to_reg (int regno, rtx x, int nregs, enum machine_mode mode)\n   if (nregs == 0)\n     return;\n \n-  if (CONSTANT_P (x) && ! LEGITIMATE_CONSTANT_P (x))\n+  if (CONSTANT_P (x) && !targetm.legitimate_constant_p (mode, x))\n     x = validize_mem (force_const_mem (mode, x));\n \n   /* See if the machine can do this with a load multiple insn.  */\n@@ -2296,7 +2296,7 @@ can_store_by_pieces (unsigned HOST_WIDE_INT len,\n \t\t    offset -= size;\n \n \t\t  cst = (*constfun) (constfundata, offset, mode);\n-\t\t  if (!LEGITIMATE_CONSTANT_P (cst))\n+\t\t  if (!targetm.legitimate_constant_p (mode, cst))\n \t\t    return 0;\n \n \t\t  if (!reverse)\n@@ -3329,7 +3329,7 @@ emit_move_insn (rtx x, rtx y)\n \n       y_cst = y;\n \n-      if (!LEGITIMATE_CONSTANT_P (y))\n+      if (!targetm.legitimate_constant_p (mode, y))\n \t{\n \t  y = force_const_mem (mode, y);\n \n@@ -3385,7 +3385,7 @@ compress_float_constant (rtx x, rtx y)\n \n   REAL_VALUE_FROM_CONST_DOUBLE (r, y);\n \n-  if (LEGITIMATE_CONSTANT_P (y))\n+  if (targetm.legitimate_constant_p (dstmode, y))\n     oldcost = rtx_cost (y, SET, speed);\n   else\n     oldcost = rtx_cost (force_const_mem (dstmode, y), SET, speed);\n@@ -3408,7 +3408,7 @@ compress_float_constant (rtx x, rtx y)\n \n       trunc_y = CONST_DOUBLE_FROM_REAL_VALUE (r, srcmode);\n \n-      if (LEGITIMATE_CONSTANT_P (trunc_y))\n+      if (targetm.legitimate_constant_p (srcmode, trunc_y))\n \t{\n \t  /* Skip if the target needs extra instructions to perform\n \t     the extension.  */\n@@ -3820,7 +3820,7 @@ emit_push_insn (rtx x, enum machine_mode mode, tree type, rtx size,\n \t by setting SKIP to 0.  */\n       skip = (reg_parm_stack_space == 0) ? 0 : not_stack;\n \n-      if (CONSTANT_P (x) && ! LEGITIMATE_CONSTANT_P (x))\n+      if (CONSTANT_P (x) && !targetm.legitimate_constant_p (mode, x))\n \tx = validize_mem (force_const_mem (mode, x));\n \n       /* If X is a hard register in a non-integer mode, copy it into a pseudo;\n@@ -9093,7 +9093,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t   constant and we don't need a memory reference.  */\n \tif (CONSTANT_P (op0)\n \t    && mode2 != BLKmode\n-\t    && LEGITIMATE_CONSTANT_P (op0)\n+\t    && targetm.legitimate_constant_p (mode2, op0)\n \t    && !must_force_mem)\n \t  op0 = force_reg (mode2, op0);\n "}, {"sha": "7791a14fbee5223f35b746defe5d9a725f7594cb", "filename": "gcc/hooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -109,6 +109,14 @@ hook_bool_mode_rtx_false (enum machine_mode mode ATTRIBUTE_UNUSED,\n   return false;\n }\n \n+/* Generic hook that takes (enum machine_mode, rtx) and returns true.  */\n+bool\n+hook_bool_mode_rtx_true (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t rtx value ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n /* Generic hook that takes (FILE *, const char *) and does nothing.  */\n void\n hook_void_FILEptr_constcharptr (FILE *a ATTRIBUTE_UNUSED, const char *b ATTRIBUTE_UNUSED)"}, {"sha": "11dd7a9d816e27f44aa492ed57e755241cdd6c28", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -35,6 +35,7 @@ extern bool hook_bool_mode_true (enum machine_mode);\n extern bool hook_bool_mode_const_rtx_false (enum machine_mode, const_rtx);\n extern bool hook_bool_mode_const_rtx_true (enum machine_mode, const_rtx);\n extern bool hook_bool_mode_rtx_false (enum machine_mode, rtx);\n+extern bool hook_bool_mode_rtx_true (enum machine_mode, rtx);\n extern bool hook_bool_tree_false (tree);\n extern bool hook_bool_const_tree_false (const_tree);\n extern bool hook_bool_tree_true (tree);"}, {"sha": "f517386ceef0c2525cecb0cbaa22869ddd1ac725", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1294,7 +1294,8 @@ scan_one_insn (rtx insn)\n       && (note = find_reg_note (insn, REG_EQUIV, NULL_RTX)) != NULL_RTX\n       && ((MEM_P (XEXP (note, 0)))\n \t  || (CONSTANT_P (XEXP (note, 0))\n-\t      && LEGITIMATE_CONSTANT_P (XEXP (note, 0))\n+\t      && targetm.legitimate_constant_p (GET_MODE (SET_DEST (set)),\n+\t\t\t\t\t\tXEXP (note, 0))\n \t      && REG_N_SETS (REGNO (SET_DEST (set))) == 1)))\n     {\n       enum reg_class cl = GENERAL_REGS;"}, {"sha": "afe985e2f2711f241ca501b3f06985075fc38714", "filename": "gcc/recog.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -930,7 +930,9 @@ general_operand (rtx op, enum machine_mode mode)\n     return ((GET_MODE (op) == VOIDmode || GET_MODE (op) == mode\n \t     || mode == VOIDmode)\n \t    && (! flag_pic || LEGITIMATE_PIC_OPERAND_P (op))\n-\t    && LEGITIMATE_CONSTANT_P (op));\n+\t    && targetm.legitimate_constant_p (mode == VOIDmode\n+\t\t\t\t\t      ? GET_MODE (op)\n+\t\t\t\t\t      : mode, op));\n \n   /* Except for certain constants with VOIDmode, already checked for,\n      OP's mode must match MODE if MODE specifies a mode.  */\n@@ -1107,7 +1109,9 @@ immediate_operand (rtx op, enum machine_mode mode)\n \t  && (GET_MODE (op) == mode || mode == VOIDmode\n \t      || GET_MODE (op) == VOIDmode)\n \t  && (! flag_pic || LEGITIMATE_PIC_OPERAND_P (op))\n-\t  && LEGITIMATE_CONSTANT_P (op));\n+\t  && targetm.legitimate_constant_p (mode == VOIDmode\n+\t\t\t\t\t    ? GET_MODE (op)\n+\t\t\t\t\t    : mode, op));\n }\n \n /* Returns 1 if OP is an operand that is a CONST_INT.  */"}, {"sha": "045e5594195ab525a52001a78dca1762b26f9ca4", "filename": "gcc/reload.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -4721,7 +4721,8 @@ find_reloads_toplev (rtx x, int opnum, enum reload_type type,\n \t    simplify_gen_subreg (GET_MODE (x), reg_equiv_constant (regno),\n \t\t\t\t GET_MODE (SUBREG_REG (x)), SUBREG_BYTE (x));\n \t  gcc_assert (tem);\n-\t  if (CONSTANT_P (tem) && !LEGITIMATE_CONSTANT_P (tem))\n+\t  if (CONSTANT_P (tem)\n+\t      && !targetm.legitimate_constant_p (GET_MODE (x), tem))\n \t    {\n \t      tem = force_const_mem (GET_MODE (x), tem);\n \t      i = find_reloads_address (GET_MODE (tem), &tem, XEXP (tem, 0),\n@@ -6047,7 +6048,7 @@ find_reloads_address_part (rtx x, rtx *loc, enum reg_class rclass,\n \t\t\t   enum reload_type type, int ind_levels)\n {\n   if (CONSTANT_P (x)\n-      && (! LEGITIMATE_CONSTANT_P (x)\n+      && (!targetm.legitimate_constant_p (mode, x)\n \t  || targetm.preferred_reload_class (x, rclass) == NO_REGS))\n     {\n       x = force_const_mem (mode, x);\n@@ -6057,7 +6058,7 @@ find_reloads_address_part (rtx x, rtx *loc, enum reg_class rclass,\n \n   else if (GET_CODE (x) == PLUS\n \t   && CONSTANT_P (XEXP (x, 1))\n-\t   && (! LEGITIMATE_CONSTANT_P (XEXP (x, 1))\n+\t   && (!targetm.legitimate_constant_p (GET_MODE (x), XEXP (x, 1))\n \t       || targetm.preferred_reload_class (XEXP (x, 1), rclass)\n \t\t   == NO_REGS))\n     {"}, {"sha": "ea7df99580dca80c90bf97fdd3a326ba5cc78189", "filename": "gcc/reload1.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -4161,6 +4161,9 @@ init_eliminable_invariants (rtx first, bool do_subregs)\n \t\t}\n \t      else if (function_invariant_p (x))\n \t\t{\n+\t\t  enum machine_mode mode;\n+\n+\t\t  mode = GET_MODE (SET_DEST (set));\n \t\t  if (GET_CODE (x) == PLUS)\n \t\t    {\n \t\t      /* This is PLUS of frame pointer and a constant,\n@@ -4173,12 +4176,11 @@ init_eliminable_invariants (rtx first, bool do_subregs)\n \t\t      reg_equiv_invariant (i) = x;\n \t\t      num_eliminable_invariants++;\n \t\t    }\n-\t\t  else if (LEGITIMATE_CONSTANT_P (x))\n+\t\t  else if (targetm.legitimate_constant_p (mode, x))\n \t\t    reg_equiv_constant (i) = x;\n \t\t  else\n \t\t    {\n-\t\t      reg_equiv_memory_loc (i)\n-\t\t\t= force_const_mem (GET_MODE (SET_DEST (set)), x);\n+\t\t      reg_equiv_memory_loc (i) = force_const_mem (mode, x);\n \t\t      if (! reg_equiv_memory_loc (i))\n \t\t\treg_equiv_init (i) = NULL_RTX;\n \t\t    }"}, {"sha": "81daaf1320d6bed180e0fed3774f4e83f9f077ba", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -768,7 +768,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tLABEL_ALIGN_MAX_SKIP LOOP_ALIGN_MAX_SKIP\t\t\t\\\n \tLABEL_ALIGN_AFTER_BARRIER_MAX_SKIP JUMP_ALIGN_MAX_SKIP \t\t\\\n \tCAN_DEBUG_WITHOUT_FP UNLIKELY_EXECUTED_TEXT_SECTION_NAME\t\\\n-\tHOT_TEXT_SECTION_NAME\n+\tHOT_TEXT_SECTION_NAME LEGITIMATE_CONSTANT_P\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "ea4d3e95aec48c08492778ac6aa141c63ae58c63", "filename": "gcc/target.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a627b35d37649103f629cd15139387d09c4b703/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=1a627b35d37649103f629cd15139387d09c4b703", "patch": "@@ -1291,6 +1291,13 @@ DEFHOOK\n  unsigned, (unsigned nunroll, struct loop *loop),\n  NULL)\n \n+/* True if X is a legitimate MODE-mode immediate operand.  */\n+DEFHOOK\n+(legitimate_constant_p,\n+ \"\",\n+ bool, (enum machine_mode mode, rtx x),\n+ hook_bool_mode_rtx_true)\n+\n /* True if the constant X cannot be placed in the constant pool.  */\n DEFHOOK\n (cannot_force_const_mem,"}]}