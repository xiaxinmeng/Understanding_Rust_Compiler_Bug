{"sha": "a3ef23490a906c6e8e6a3309f9a8f6a470709384", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNlZjIzNDkwYTkwNmM2ZThlNmEzMzA5ZjlhOGY2YTQ3MDcwOTM4NA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2007-10-29T00:26:20Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2007-10-29T00:26:20Z"}, "message": "cris.c: Include df.h.\n\n\t* config/cris/cris.c: Include df.h.\n\t(cris_address_cost): Add gcc_assert for canonicalization\n\tassumptions.  For PLUS with MULT or register, correct\n\ttest for register in other arm.  Tweak comments.\n\nFrom-SVN: r129713", "tree": {"sha": "9a278b36ae23249b2eb1eef4781b7f217c1ec261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a278b36ae23249b2eb1eef4781b7f217c1ec261"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3ef23490a906c6e8e6a3309f9a8f6a470709384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ef23490a906c6e8e6a3309f9a8f6a470709384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ef23490a906c6e8e6a3309f9a8f6a470709384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ef23490a906c6e8e6a3309f9a8f6a470709384/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f153d30adabbb6114ed95e19cdc19a3fdbfd4122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f153d30adabbb6114ed95e19cdc19a3fdbfd4122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f153d30adabbb6114ed95e19cdc19a3fdbfd4122"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "8f1da9ee4356359fb2d2afb6844c611b65487e67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ef23490a906c6e8e6a3309f9a8f6a470709384/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ef23490a906c6e8e6a3309f9a8f6a470709384/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3ef23490a906c6e8e6a3309f9a8f6a470709384", "patch": "@@ -1,3 +1,10 @@\n+2007-10-29  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.c: Include df.h.\n+\t(cris_address_cost): Add gcc_assert for canonicalization\n+\tassumptions.  For PLUS with MULT or register, correct\n+\ttest for register in other arm.  Tweak comments.\n+\n 2007-10-28  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-operands.c (add_vars_for_offset): Add parameter"}, {"sha": "cc588044ce629091934d46c437d3482b621fcced", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ef23490a906c6e8e6a3309f9a8f6a470709384/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ef23490a906c6e8e6a3309f9a8f6a470709384/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=a3ef23490a906c6e8e6a3309f9a8f6a470709384", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"ggc.h\"\n #include \"optabs.h\"\n+#include \"df.h\"\n \n /* Usable when we have an amount to add or subtract, and want the\n    optimal size of the insn.  */\n@@ -1716,7 +1717,12 @@ cris_address_cost (rtx x)\n   /* The metric to use for the cost-macros is unclear.\n      The metric used here is (the number of cycles needed) / 2,\n      where we consider equal a cycle for a word of code and a cycle to\n-     read memory.  */\n+     read memory.  FIXME: Adding \"+ 1\" to all values would avoid\n+     returning 0, as tree-ssa-loop-ivopts.c as of r128272 \"normalizes\"\n+     0 to 1, thereby giving equal costs to [rN + rM] and [rN].\n+     Unfortunately(?) such a hack would expose other pessimizations,\n+     at least with g++.dg/tree-ssa/ivopts-1.C, adding insns to the\n+     loop there, without apparent reason.  */\n \n   /* The cheapest addressing modes get 0, since nothing extra is needed.  */\n   if (BASE_OR_AUTOINCR_P (x))\n@@ -1738,34 +1744,34 @@ cris_address_cost (rtx x)\n       rtx tem1 = XEXP (x, 0);\n       rtx tem2 = XEXP (x, 1);\n \n-    /* A BIAP is 2 extra bytes for the prefix insn, nothing more.  We\n-       recognize the typical MULT which is always in tem1 because of\n-       insn canonicalization.  */\n-    if ((GET_CODE (tem1) == MULT && BIAP_INDEX_P (tem1))\n-\t|| REG_P (tem1))\n-      return 2 / 2;\n-\n-    /* A BDAP (quick) is 2 extra bytes.  Any constant operand to the\n-       PLUS is always found in tem2.  */\n-    if (CONST_INT_P (tem2) && INTVAL (tem2) < 128 && INTVAL (tem2) >= -128)\n-      return 2 / 2;\n-\n-    /* A BDAP -32768 .. 32767 is like BDAP quick, but with 2 extra\n-       bytes.  */\n-    if (CONST_INT_P (tem2) && CONST_OK_FOR_LETTER_P (INTVAL (tem2), 'L'))\n-      return (2 + 2) / 2;\n-\n-    /* A BDAP with some other constant is 2 bytes extra.  */\n-    if (CONSTANT_P (tem2))\n-      return (2 + 2 + 2) / 2;\n+      /* We'll \"assume\" canonical RTX.  */\n+      gcc_assert (REG_P (tem1) || GET_CODE (tem1) == MULT);\n \n-    /* BDAP with something indirect should have a higher cost than\n-       BIAP with register.   FIXME: Should it cost like a MEM or more?  */\n-    /* Don't need to check it, it's the only one left.\n-       FIXME:  There was a REG test missing, perhaps there are others.\n-       Think more.  */\n-    return (2 + 2 + 2) / 2;\n-  }\n+      /* A BIAP is 2 extra bytes for the prefix insn, nothing more.  We\n+\t recognize the typical MULT which is always in tem1 because of\n+\t insn canonicalization.  */\n+      if ((GET_CODE (tem1) == MULT && BIAP_INDEX_P (tem1))\n+\t  || REG_P (tem2))\n+\treturn 2 / 2;\n+\n+      /* A BDAP (quick) is 2 extra bytes.  Any constant operand to the\n+\t PLUS is always found in tem2.  */\n+      if (CONST_INT_P (tem2) && INTVAL (tem2) < 128 && INTVAL (tem2) >= -128)\n+\treturn 2 / 2;\n+\n+      /* A BDAP -32768 .. 32767 is like BDAP quick, but with 2 extra\n+\t bytes.  */\n+      if (CONST_INT_P (tem2) && CONST_OK_FOR_LETTER_P (INTVAL (tem2), 'L'))\n+\treturn (2 + 2) / 2;\n+\n+      /* A BDAP with some other constant is 2 bytes extra.  */\n+      if (CONSTANT_P (tem2))\n+\treturn (2 + 2 + 2) / 2;\n+\n+      /* BDAP with something indirect should have a higher cost than\n+\t BIAP with register.   FIXME: Should it cost like a MEM or more?  */\n+      return (2 + 2 + 2) / 2;\n+    }\n \n   /* What else?  Return a high cost.  It matters only for valid\n      addressing modes.  */"}]}