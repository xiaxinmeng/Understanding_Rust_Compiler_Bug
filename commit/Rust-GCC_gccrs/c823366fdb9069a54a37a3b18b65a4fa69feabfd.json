{"sha": "c823366fdb9069a54a37a3b18b65a4fa69feabfd", "node_id": "C_kwDOANBUbNoAKGM4MjMzNjZmZGI5MDY5YTU0YTM3YTNiMThiNjVhNGZhNjlmZWFiZmQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-03T16:04:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-03T16:04:37Z"}, "message": "c++: Disallow jumps into statement expressions\n\nOn Fri, Sep 30, 2022 at 04:39:25PM -0400, Jason Merrill wrote:\n> > --- gcc/cp/decl.cc.jj       2022-09-22 00:14:55.478599363 +0200\n> > +++ gcc/cp/decl.cc  2022-09-22 00:24:01.121178256 +0200\n> > @@ -223,6 +223,7 @@ struct GTY((for_user)) named_label_entry\n> >     bool in_transaction_scope;\n> >     bool in_constexpr_if;\n> >     bool in_consteval_if;\n> > +  bool in_assume;\n>\n> I think it would be better to reject jumps into statement-expressions like\n> the C front-end.\n\nOk, here is a self-contained patch that does that.\n\n2022-10-03  Jakub Jelinek  <jakub@redhat.com>\n\n\t* cp-tree.h (BCS_STMT_EXPR): New enumerator.\n\t* name-lookup.h (enum scope_kind): Add sk_stmt_expr.\n\t* name-lookup.cc (begin_scope): Handle sk_stmt_expr like sk_block.\n\t* semantics.cc (begin_compound_stmt): For BCS_STMT_EXPR use\n\tsk_stmt_expr.\n\t* parser.cc (cp_parser_statement_expr): Use BCS_STMT_EXPR instead of\n\tBCS_NORMAL.\n\t* decl.cc (struct named_label_entry): Add in_stmt_expr.\n\t(poplevel_named_label_1): Handle sk_stmt_expr.\n\t(check_previous_goto_1): Diagnose entering of statement expression.\n\t(check_goto): Likewise.\n\n\t* g++.dg/ext/stmtexpr24.C: New test.", "tree": {"sha": "284c769f2c9d889c8544317303262be6baec790c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/284c769f2c9d889c8544317303262be6baec790c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c823366fdb9069a54a37a3b18b65a4fa69feabfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c823366fdb9069a54a37a3b18b65a4fa69feabfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c823366fdb9069a54a37a3b18b65a4fa69feabfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c823366fdb9069a54a37a3b18b65a4fa69feabfd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ba34c4e869e83a8d2a2e02b9a2e6727bf662bb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba34c4e869e83a8d2a2e02b9a2e6727bf662bb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ba34c4e869e83a8d2a2e02b9a2e6727bf662bb4"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "e734bf434371077e1454dac354f5e49a3d73f5d6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c823366fdb9069a54a37a3b18b65a4fa69feabfd", "patch": "@@ -7599,7 +7599,8 @@ enum {\n   BCS_NO_SCOPE = 1,\n   BCS_TRY_BLOCK = 2,\n   BCS_FN_BODY = 4,\n-  BCS_TRANSACTION = 8\n+  BCS_TRANSACTION = 8,\n+  BCS_STMT_EXPR = 16\n };\n extern tree begin_compound_stmt\t\t\t(unsigned int);\n "}, {"sha": "07148b9fd4ea77c5dda2fc71ac3c6f556a2ca8b0", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=c823366fdb9069a54a37a3b18b65a4fa69feabfd", "patch": "@@ -223,6 +223,7 @@ struct GTY((for_user)) named_label_entry {\n   bool in_transaction_scope;\n   bool in_constexpr_if;\n   bool in_consteval_if;\n+  bool in_stmt_expr;\n };\n \n #define named_labels cp_function_chain->x_named_labels\n@@ -538,6 +539,9 @@ poplevel_named_label_1 (named_label_entry **slot, cp_binding_level *bl)\n \tcase sk_transaction:\n \t  ent->in_transaction_scope = true;\n \t  break;\n+\tcase sk_stmt_expr:\n+\t  ent->in_stmt_expr = true;\n+\t  break;\n \tcase sk_block:\n \t  if (level_for_constexpr_if (bl->level_chain))\n \t    ent->in_constexpr_if = true;\n@@ -3487,7 +3491,7 @@ check_previous_goto_1 (tree decl, cp_binding_level* level, tree names,\n   bool complained = false;\n   int identified = 0;\n   bool saw_eh = false, saw_omp = false, saw_tm = false, saw_cxif = false;\n-  bool saw_ceif = false;\n+  bool saw_ceif = false, saw_se = false;\n \n   if (exited_omp)\n     {\n@@ -3560,6 +3564,12 @@ check_previous_goto_1 (tree decl, cp_binding_level* level, tree names,\n \t  saw_tm = true;\n \t  break;\n \n+\tcase sk_stmt_expr:\n+\t  if (!saw_se)\n+\t    inf = G_(\"  enters statement expression\");\n+\t  saw_se = true;\n+\t  break;\n+\n \tcase sk_block:\n \t  if (!saw_cxif && level_for_constexpr_if (b->level_chain))\n \t    {\n@@ -3650,12 +3660,13 @@ check_goto (tree decl)\n \n   if (ent->in_try_scope || ent->in_catch_scope || ent->in_transaction_scope\n       || ent->in_constexpr_if || ent->in_consteval_if\n-      || ent->in_omp_scope || !vec_safe_is_empty (ent->bad_decls))\n+      || ent->in_omp_scope || ent->in_stmt_expr\n+      || !vec_safe_is_empty (ent->bad_decls))\n     {\n       diagnostic_t diag_kind = DK_PERMERROR;\n       if (ent->in_try_scope || ent->in_catch_scope || ent->in_constexpr_if\n \t  || ent->in_consteval_if || ent->in_transaction_scope\n-\t  || ent->in_omp_scope)\n+\t  || ent->in_omp_scope || ent->in_stmt_expr)\n \tdiag_kind = DK_ERROR;\n       complained = identify_goto (decl, DECL_SOURCE_LOCATION (decl),\n \t\t\t\t  &input_location, diag_kind);\n@@ -3703,6 +3714,8 @@ check_goto (tree decl)\n \tinform (input_location, \"  enters %<constexpr if%> statement\");\n       else if (ent->in_consteval_if)\n \tinform (input_location, \"  enters %<consteval if%> statement\");\n+      else if (ent->in_stmt_expr)\n+\tinform (input_location, \"  enters statement expression\");\n     }\n \n   if (ent->in_omp_scope)"}, {"sha": "d6757d1fe5de5015396096f1c9fcd23593495d62", "filename": "gcc/cp/name-lookup.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Fcp%2Fname-lookup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Fcp%2Fname-lookup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.cc?ref=c823366fdb9069a54a37a3b18b65a4fa69feabfd", "patch": "@@ -4296,6 +4296,7 @@ begin_scope (scope_kind kind, tree entity)\n     case sk_scoped_enum:\n     case sk_transaction:\n     case sk_omp:\n+    case sk_stmt_expr:\n       scope->keep = keep_next_level_flag;\n       break;\n "}, {"sha": "7201ae8ead8ef337c4249d9c3fba96ab93ff28b4", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=c823366fdb9069a54a37a3b18b65a4fa69feabfd", "patch": "@@ -200,6 +200,7 @@ enum scope_kind {\n \t\t\tinit-statement.  */\n   sk_cond,\t     /* The scope of the variable declared in the condition\n \t\t\tof an if or switch statement.  */\n+  sk_stmt_expr,\t     /* GNU statement expression block.  */\n   sk_function_parms, /* The scope containing function parameters.  */\n   sk_class,\t     /* The scope containing the members of a class.  */\n   sk_scoped_enum,    /* The scope containing the enumerators of a C++11"}, {"sha": "6c4f840f9d771deceae55224d368d18fc92415e5", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=c823366fdb9069a54a37a3b18b65a4fa69feabfd", "patch": "@@ -5272,7 +5272,7 @@ cp_parser_statement_expr (cp_parser *parser)\n   /* Start the statement-expression.  */\n   tree expr = begin_stmt_expr ();\n   /* Parse the compound-statement.  */\n-  cp_parser_compound_statement (parser, expr, BCS_NORMAL, false);\n+  cp_parser_compound_statement (parser, expr, BCS_STMT_EXPR, false);\n   /* Finish up.  */\n   expr = finish_stmt_expr (expr, false);\n   /* Consume the ')'.  */"}, {"sha": "58b5b433692283646629a9ca2e1ea893906f7e55", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=c823366fdb9069a54a37a3b18b65a4fa69feabfd", "patch": "@@ -1761,6 +1761,8 @@ begin_compound_stmt (unsigned int flags)\n \tsk = sk_try;\n       else if (flags & BCS_TRANSACTION)\n \tsk = sk_transaction;\n+      else if (flags & BCS_STMT_EXPR)\n+\tsk = sk_stmt_expr;\n       r = do_pushlevel (sk);\n     }\n "}, {"sha": "907d027c6ed9054fdaf675be02c26c08aeafaf77", "filename": "gcc/testsuite/g++.dg/ext/stmtexpr24.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c823366fdb9069a54a37a3b18b65a4fa69feabfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr24.C?ref=c823366fdb9069a54a37a3b18b65a4fa69feabfd", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+void\n+foo (int x)\n+{\n+  bool a = false;\n+  if (x == 1)\n+    goto l1;\t\t\t\t\t\t// { dg-message \"from here\" }\n+  a = ({ l0:; if (x == 0) goto l0; true; });\n+  a = ({ if (x == 0) throw 1; true; });\n+  a = ({ l1:; true; });\t\t\t\t\t// { dg-error \"jump to label 'l1'\" }\n+\t\t\t\t\t\t\t// { dg-message \"enters statement expression\" \"\" { target *-*-* } .-1 }\n+  a = ({ l2:; true; });\t\t\t\t\t// { dg-error \"jump to label 'l2'\" }\n+  switch (x)\n+    {\n+    case 2:\n+      a = ({ case 3:; true; });\t\t\t\t// { dg-error \"jump to case label\" }\n+\t\t\t\t\t\t\t// { dg-message \"enters statement expression\" \"\" { target *-*-* } .-1 }\n+      a = ({ default:; true; });\t\t\t// { dg-error \"jump to case label\" }\n+\t\t\t\t\t\t\t// { dg-message \"enters statement expression\" \"\" { target *-*-* } .-1 }\n+      break;\n+    }\n+  if (x == 4)\n+    goto l2;\t\t\t\t\t\t// { dg-message \"from here\" }\n+\t\t\t\t\t\t\t// { dg-message \"enters statement expression\" \"\" { target *-*-* } .-1 }\n+}"}]}