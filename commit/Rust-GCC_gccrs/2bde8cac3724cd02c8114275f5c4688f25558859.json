{"sha": "2bde8cac3724cd02c8114275f5c4688f25558859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJkZThjYWMzNzI0Y2QwMmM4MTE0Mjc1ZjVjNDY4OGYyNTU1ODg1OQ==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2014-09-25T04:43:19Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2014-09-25T04:43:19Z"}, "message": "re PR libstdc++/63199 (Inserting std::wregex to std::vector loses some std::wregex values)\n\n\tPR libstdc++/63199\n\t* include/bits/regex.h (basic_regex::basic_regex, basic_regex::assign,\n\tbasic_regex::imbue, basic_regex::getloc, basic_regex::swap): Add\n\t_M_loc for basic_regex.\n\t* include/bits/regex_automaton.h: Add _M_traits for _NFA.\n\t* include/bits/regex_compiler.h (_Compiler::_M_get_nfa, __compile_nfa):\n\tMake _Compiler::_M_nfa heap allocated.\n\t* include/bits/regex_compiler.tcc (_Compiler::_Compiler): Make\n\t_Compiler::_M_nfa heap allocated.\n\t* include/bits/regex_executor.h (_Executor::_M_is_word):\n\tFix accessing _M_traits.\n\t* include/bits/regex_executor.tcc (_Executor::_M_dfs):\n\tFix accessing _M_traits.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/63199.cc:\n\tNew testcase.\n\nFrom-SVN: r215578", "tree": {"sha": "4794d1c6345fb4cf7144353f372fc2b99920c7a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4794d1c6345fb4cf7144353f372fc2b99920c7a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bde8cac3724cd02c8114275f5c4688f25558859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bde8cac3724cd02c8114275f5c4688f25558859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bde8cac3724cd02c8114275f5c4688f25558859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bde8cac3724cd02c8114275f5c4688f25558859/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21a9ce6e0e7d79661b0f3d46623e3027a5860765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a9ce6e0e7d79661b0f3d46623e3027a5860765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a9ce6e0e7d79661b0f3d46623e3027a5860765"}], "stats": {"total": 278, "additions": 187, "deletions": 91}, "files": [{"sha": "eb1348c31078e8360b094b81a3227e6c338b5909", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2bde8cac3724cd02c8114275f5c4688f25558859", "patch": "@@ -1,3 +1,21 @@\n+2014-09-25  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/63199\n+\t* include/bits/regex.h (basic_regex::basic_regex, basic_regex::assign,\n+\tbasic_regex::imbue, basic_regex::getloc, basic_regex::swap): Add\n+\t_M_loc for basic_regex.\n+\t* include/bits/regex_automaton.h: Add _M_traits for _NFA.\n+\t* include/bits/regex_compiler.h (_Compiler::_M_get_nfa, __compile_nfa):\n+\tMake _Compiler::_M_nfa heap allocated.\n+\t* include/bits/regex_compiler.tcc (_Compiler::_Compiler): Make\n+\t_Compiler::_M_nfa heap allocated.\n+\t* include/bits/regex_executor.h (_Executor::_M_is_word):\n+\tFix accessing _M_traits.\n+\t* include/bits/regex_executor.tcc (_Executor::_M_dfs):\n+\tFix accessing _M_traits.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/63199.cc:\n+\tNew testcase.\n+\n 2014-09-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/abi/pre/gnu.ver: Make GLIBCXX_3.4 patterns stricter so the"}, {"sha": "4ec20d74901290b15c663fac0d8776debe2d8374", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=2bde8cac3724cd02c8114275f5c4688f25558859", "patch": "@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline std::shared_ptr<_NFA<_TraitsT>>\n     __compile_nfa(const typename _TraitsT::char_type* __first,\n \t\t  const typename _TraitsT::char_type* __last,\n-\t\t  const _TraitsT& __traits,\n+\t\t  const typename _TraitsT::locale_type& __loc,\n \t\t  regex_constants::syntax_option_type __flags);\n \n _GLIBCXX_END_NAMESPACE_VERSION\n@@ -433,7 +433,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * character sequence.\n        */\n       basic_regex()\n-      : _M_flags(ECMAScript), _M_automaton(nullptr)\n+      : _M_flags(ECMAScript), _M_loc(), _M_original_str(), _M_automaton(nullptr)\n       { }\n \n       /**\n@@ -481,10 +481,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * @param __rhs A @p regex object.\n        */\n-      basic_regex(const basic_regex&& __rhs) noexcept\n-      : _M_flags(__rhs._M_flags), _M_traits(__rhs._M_traits),\n-\t_M_automaton(std::move(__rhs._M_automaton))\n-      { }\n+      basic_regex(basic_regex&& __rhs) noexcept = default;\n \n       /**\n        * @brief Constructs a basic regular expression from the string\n@@ -520,12 +517,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbasic_regex(_FwdIter __first, _FwdIter __last,\n \t\t    flag_type __f = ECMAScript)\n \t: _M_flags(__f),\n+\t  _M_loc(),\n \t  _M_original_str(__first, __last),\n-\t  _M_automaton(__detail::__compile_nfa(_M_original_str.c_str(),\n-\t\t\t\t\t       _M_original_str.c_str()\n-\t\t\t\t\t\t + _M_original_str.size(),\n-\t\t\t\t\t       _M_traits,\n-\t\t\t\t\t       _M_flags))\n+\t  _M_automaton(__detail::__compile_nfa<_Rx_traits>(\n+\t    _M_original_str.c_str(),\n+\t    _M_original_str.c_str() + _M_original_str.size(),\n+\t    _M_loc,\n+\t    _M_flags))\n \t{ }\n \n       /**\n@@ -662,9 +660,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_flags = __flags;\n \t  _M_original_str.assign(__s.begin(), __s.end());\n \t  auto __p = _M_original_str.c_str();\n-\t  _M_automaton = __detail::__compile_nfa(__p,\n-\t\t\t\t\t\t __p + _M_original_str.size(),\n-\t\t\t\t\t\t _M_traits, _M_flags);\n+\t  _M_automaton = __detail::__compile_nfa<_Rx_traits>(\n+\t    __p,\n+\t    __p + _M_original_str.size(),\n+\t    _M_loc,\n+\t    _M_flags);\n \t  return *this;\n \t}\n \n@@ -728,9 +728,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       locale_type\n       imbue(locale_type __loc)\n       {\n-\tauto __ret = _M_traits.imbue(__loc);\n-\tthis->assign(_M_original_str, _M_flags);\n-\treturn __ret;\n+\tstd::swap(__loc, _M_loc);\n+\tif (_M_automaton != nullptr)\n+\t  this->assign(_M_original_str, _M_flags);\n+\treturn __loc;\n       }\n \n       /**\n@@ -739,7 +740,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       locale_type\n       getloc() const\n-      { return _M_traits.getloc(); }\n+      { return _M_loc; }\n \n       // [7.8.6] swap\n       /**\n@@ -751,7 +752,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       swap(basic_regex& __rhs)\n       {\n \tstd::swap(_M_flags, __rhs._M_flags);\n-\tstd::swap(_M_traits, __rhs._M_traits);\n+\tstd::swap(_M_loc, __rhs._M_loc);\n+\tstd::swap(_M_original_str, __rhs._M_original_str);\n \tstd::swap(_M_automaton, __rhs._M_automaton);\n       }\n \n@@ -761,7 +763,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { _M_automaton->_M_dot(__ostr); }\n #endif\n \n-    protected:\n+    private:\n       typedef std::shared_ptr<__detail::_NFA<_Rx_traits>> _AutomatonPtr;\n \n       template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n@@ -775,7 +777,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tfriend class __detail::_Executor;\n \n       flag_type              _M_flags;\n-      _Rx_traits             _M_traits;\n+      locale_type            _M_loc;\n       basic_string<_Ch_type> _M_original_str;\n       _AutomatonPtr          _M_automaton;\n     };"}, {"sha": "1395dab3476d2342aec4e4c1d248469fc46f826e", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=2bde8cac3724cd02c8114275f5c4688f25558859", "patch": "@@ -160,7 +160,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _State<_TraitsT>\t\t\t\t_StateT;\n       typedef _Matcher<typename _TraitsT::char_type>\t_MatcherT;\n \n-      using _NFA_base::_NFA_base;\n+      _NFA(const typename _TraitsT::locale_type& __loc, _FlagT __flags)\n+      : _NFA_base(__flags)\n+      { _M_traits.imbue(__loc); }\n \n       // for performance reasons _NFA objects should only be moved not copied\n       _NFA(const _NFA&) = delete;\n@@ -272,6 +274,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::ostream&\n       _M_dot(std::ostream& __ostr) const;\n #endif\n+    public:\n+      _TraitsT                  _M_traits;\n     };\n \n   /// Describes a sequence of one or more %_State, its current start"}, {"sha": "1bbc09dd9dcc109347a9ada817c3031b4813211e", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=2bde8cac3724cd02c8114275f5c4688f25558859", "patch": "@@ -57,11 +57,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef regex_constants::syntax_option_type _FlagT;\n \n       _Compiler(_IterT __b, _IterT __e,\n-\t\tconst _TraitsT& __traits, _FlagT __flags);\n+\t\tconst typename _TraitsT::locale_type& __traits, _FlagT __flags);\n \n       std::shared_ptr<_RegexT>\n       _M_get_nfa()\n-      { return make_shared<_RegexT>(std::move(_M_nfa)); }\n+      { return std::move(_M_nfa); }\n \n     private:\n       typedef _Scanner<_CharT>               _ScannerT;\n@@ -135,24 +135,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn ret;\n       }\n \n-      _FlagT          _M_flags;\n-      const _TraitsT& _M_traits;\n-      const _CtypeT&  _M_ctype;\n-      _ScannerT       _M_scanner;\n-      _RegexT         _M_nfa;\n-      _StringT        _M_value;\n-      _StackT         _M_stack;\n+      _FlagT              _M_flags;\n+      _ScannerT           _M_scanner;\n+      shared_ptr<_RegexT> _M_nfa;\n+      _StringT            _M_value;\n+      _StackT             _M_stack;\n+      const _TraitsT&     _M_traits;\n+      const _CtypeT&      _M_ctype;\n     };\n \n   template<typename _TraitsT>\n     inline std::shared_ptr<_NFA<_TraitsT>>\n     __compile_nfa(const typename _TraitsT::char_type* __first,\n \t\t  const typename _TraitsT::char_type* __last,\n-\t\t  const _TraitsT& __traits,\n+\t\t  const typename _TraitsT::locale_type& __loc,\n \t\t  regex_constants::syntax_option_type __flags)\n     {\n       using _Cmplr = _Compiler<_TraitsT>;\n-      return _Cmplr(__first, __last, __traits, __flags)._M_get_nfa();\n+      return _Cmplr(__first, __last, __loc, __flags)._M_get_nfa();\n     }\n \n   // [28.13.14]"}, {"sha": "349d92a1200e8c572ba82b647032a967761fc871", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 54, "deletions": 51, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=2bde8cac3724cd02c8114275f5c4688f25558859", "patch": "@@ -62,7 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _TraitsT>\n     _Compiler<_TraitsT>::\n     _Compiler(_IterT __b, _IterT __e,\n-\t      const _TraitsT& __traits, _FlagT __flags)\n+\t      const typename _TraitsT::locale_type& __loc, _FlagT __flags)\n     : _M_flags((__flags\n \t\t& (regex_constants::ECMAScript\n \t\t   | regex_constants::basic\n@@ -72,21 +72,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   | regex_constants::awk))\n \t       ? __flags\n \t       : __flags | regex_constants::ECMAScript),\n-    _M_traits(__traits),\n-    _M_ctype(std::use_facet<_CtypeT>(_M_traits.getloc())),\n-    _M_scanner(__b, __e, _M_flags, _M_traits.getloc()),\n-    _M_nfa(_M_flags)\n+      _M_scanner(__b, __e, _M_flags, __loc),\n+      _M_nfa(make_shared<_RegexT>(__loc, _M_flags)),\n+      _M_traits(_M_nfa->_M_traits),\n+      _M_ctype(std::use_facet<_CtypeT>(__loc))\n     {\n-      _StateSeqT __r(_M_nfa, _M_nfa._M_start());\n-      __r._M_append(_M_nfa._M_insert_subexpr_begin());\n+      _StateSeqT __r(*_M_nfa, _M_nfa->_M_start());\n+      __r._M_append(_M_nfa->_M_insert_subexpr_begin());\n       this->_M_disjunction();\n       if (!_M_match_token(_ScannerT::_S_token_eof))\n \t__throw_regex_error(regex_constants::error_paren);\n       __r._M_append(_M_pop());\n       _GLIBCXX_DEBUG_ASSERT(_M_stack.empty());\n-      __r._M_append(_M_nfa._M_insert_subexpr_end());\n-      __r._M_append(_M_nfa._M_insert_accept());\n-      _M_nfa._M_eliminate_dummy();\n+      __r._M_append(_M_nfa->_M_insert_subexpr_end());\n+      __r._M_append(_M_nfa->_M_insert_accept());\n+      _M_nfa->_M_eliminate_dummy();\n     }\n \n   template<typename _TraitsT>\n@@ -100,15 +100,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _StateSeqT __alt1 = _M_pop();\n \t  this->_M_alternative();\n \t  _StateSeqT __alt2 = _M_pop();\n-\t  auto __end = _M_nfa._M_insert_dummy();\n+\t  auto __end = _M_nfa->_M_insert_dummy();\n \t  __alt1._M_append(__end);\n \t  __alt2._M_append(__end);\n \t  // __alt2 is state._M_next, __alt1 is state._M_alt. The executor\n \t  // executes _M_alt before _M_next, as well as executing left\n \t  // alternative before right one.\n-\t  _M_stack.push(_StateSeqT(_M_nfa,\n-\t\t\t\t   _M_nfa._M_insert_alt(__alt2._M_start,\n-\t\t\t\t\t\t\t__alt1._M_start, false),\n+\t  _M_stack.push(_StateSeqT(*_M_nfa,\n+\t\t\t\t   _M_nfa->_M_insert_alt(\n+\t\t\t\t     __alt2._M_start, __alt1._M_start, false),\n \t\t\t\t   __end));\n \t}\n     }\n@@ -126,7 +126,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_stack.push(__re);\n \t}\n       else\n-\t_M_stack.push(_StateSeqT(_M_nfa, _M_nfa._M_insert_dummy()));\n+\t_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->_M_insert_dummy()));\n     }\n \n   template<typename _TraitsT>\n@@ -150,12 +150,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_assertion()\n     {\n       if (_M_match_token(_ScannerT::_S_token_line_begin))\n-\t_M_stack.push(_StateSeqT(_M_nfa, _M_nfa._M_insert_line_begin()));\n+\t_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->_M_insert_line_begin()));\n       else if (_M_match_token(_ScannerT::_S_token_line_end))\n-\t_M_stack.push(_StateSeqT(_M_nfa, _M_nfa._M_insert_line_end()));\n+\t_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->_M_insert_line_end()));\n       else if (_M_match_token(_ScannerT::_S_token_word_bound))\n \t// _M_value[0] == 'n' means it's negative, say \"not word boundary\".\n-\t_M_stack.push(_StateSeqT(_M_nfa, _M_nfa.\n+\t_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->\n \t      _M_insert_word_bound(_M_value[0] == 'n')));\n       else if (_M_match_token(_ScannerT::_S_token_subexpr_lookahead_begin))\n \t{\n@@ -164,11 +164,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))\n \t    __throw_regex_error(regex_constants::error_paren);\n \t  auto __tmp = _M_pop();\n-\t  __tmp._M_append(_M_nfa._M_insert_accept());\n+\t  __tmp._M_append(_M_nfa->_M_insert_accept());\n \t  _M_stack.push(\n \t      _StateSeqT(\n-\t\t_M_nfa,\n-\t\t_M_nfa._M_insert_lookahead(__tmp._M_start, __neg)));\n+\t\t*_M_nfa,\n+\t\t_M_nfa->_M_insert_lookahead(__tmp._M_start, __neg)));\n \t}\n       else\n \treturn false;\n@@ -191,26 +191,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  __init();\n \t  auto __e = _M_pop();\n-\t  _StateSeqT __r(_M_nfa, _M_nfa._M_insert_repeat(_S_invalid_state_id,\n-\t\t\t\t\t\t\t __e._M_start, __neg));\n+\t  _StateSeqT __r(*_M_nfa,\n+\t\t\t _M_nfa->_M_insert_repeat(_S_invalid_state_id,\n+\t\t\t\t\t\t  __e._M_start, __neg));\n \t  __e._M_append(__r);\n \t  _M_stack.push(__r);\n \t}\n       else if (_M_match_token(_ScannerT::_S_token_closure1))\n \t{\n \t  __init();\n \t  auto __e = _M_pop();\n-\t  __e._M_append(_M_nfa._M_insert_repeat(_S_invalid_state_id,\n-\t\t\t\t\t\t__e._M_start, __neg));\n+\t  __e._M_append(_M_nfa->_M_insert_repeat(_S_invalid_state_id,\n+\t\t\t\t\t\t __e._M_start, __neg));\n \t  _M_stack.push(__e);\n \t}\n       else if (_M_match_token(_ScannerT::_S_token_opt))\n \t{\n \t  __init();\n \t  auto __e = _M_pop();\n-\t  auto __end = _M_nfa._M_insert_dummy();\n-\t  _StateSeqT __r(_M_nfa, _M_nfa._M_insert_repeat(_S_invalid_state_id,\n-\t\t\t\t\t\t\t __e._M_start, __neg));\n+\t  auto __end = _M_nfa->_M_insert_dummy();\n+\t  _StateSeqT __r(*_M_nfa,\n+\t\t\t _M_nfa->_M_insert_repeat(_S_invalid_state_id,\n+\t\t\t\t\t\t  __e._M_start, __neg));\n \t  __e._M_append(__end);\n \t  __r._M_append(__end);\n \t  _M_stack.push(__r);\n@@ -222,7 +224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (!_M_match_token(_ScannerT::_S_token_dup_count))\n \t    __throw_regex_error(regex_constants::error_badbrace);\n \t  _StateSeqT __r(_M_pop());\n-\t  _StateSeqT __e(_M_nfa, _M_nfa._M_insert_dummy());\n+\t  _StateSeqT __e(*_M_nfa, _M_nfa->_M_insert_dummy());\n \t  long __min_rep = _M_cur_int_value(10);\n \t  bool __infi = false;\n \t  long __n;\n@@ -246,33 +248,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (__infi)\n \t    {\n \t      auto __tmp = __r._M_clone();\n-\t      _StateSeqT __s(_M_nfa,\n-\t\t\t     _M_nfa._M_insert_repeat(_S_invalid_state_id,\n-\t\t\t\t\t\t     __tmp._M_start, __neg));\n+\t      _StateSeqT __s(*_M_nfa,\n+\t\t\t     _M_nfa->_M_insert_repeat(_S_invalid_state_id,\n+\t\t\t\t\t\t      __tmp._M_start, __neg));\n \t      __tmp._M_append(__s);\n \t      __e._M_append(__s);\n \t    }\n \t  else\n \t    {\n \t      if (__n < 0)\n \t\t__throw_regex_error(regex_constants::error_badbrace);\n-\t      auto __end = _M_nfa._M_insert_dummy();\n+\t      auto __end = _M_nfa->_M_insert_dummy();\n \t      // _M_alt is the \"match more\" branch, and _M_next is the\n \t      // \"match less\" one. Switch _M_alt and _M_next of all created\n \t      // nodes. This is a hack but IMO works well.\n \t      std::stack<_StateIdT> __stack;\n \t      for (long __i = 0; __i < __n; ++__i)\n \t\t{\n \t\t  auto __tmp = __r._M_clone();\n-\t\t  auto __alt = _M_nfa._M_insert_repeat(__tmp._M_start,\n-\t\t\t\t\t\t       __end, __neg);\n+\t\t  auto __alt = _M_nfa->_M_insert_repeat(__tmp._M_start,\n+\t\t\t\t\t\t\t__end, __neg);\n \t\t  __stack.push(__alt);\n-\t\t  __e._M_append(_StateSeqT(_M_nfa, __alt, __tmp._M_end));\n+\t\t  __e._M_append(_StateSeqT(*_M_nfa, __alt, __tmp._M_end));\n \t\t}\n \t      __e._M_append(__end);\n \t      while (!__stack.empty())\n \t\t{\n-\t\t  auto& __tmp = _M_nfa[__stack.top()];\n+\t\t  auto& __tmp = (*_M_nfa)[__stack.top()];\n \t\t  __stack.pop();\n \t\t  swap(__tmp._M_next, __tmp._M_alt);\n \t\t}\n@@ -313,13 +315,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       else if (_M_try_char())\n \t__INSERT_REGEX_MATCHER(_M_insert_char_matcher);\n       else if (_M_match_token(_ScannerT::_S_token_backref))\n-\t_M_stack.push(_StateSeqT(_M_nfa, _M_nfa.\n+\t_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->\n \t\t\t\t _M_insert_backref(_M_cur_int_value(10))));\n       else if (_M_match_token(_ScannerT::_S_token_quoted_class))\n \t__INSERT_REGEX_MATCHER(_M_insert_character_class_matcher);\n       else if (_M_match_token(_ScannerT::_S_token_subexpr_no_group_begin))\n \t{\n-\t  _StateSeqT __r(_M_nfa, _M_nfa._M_insert_dummy());\n+\t  _StateSeqT __r(*_M_nfa, _M_nfa->_M_insert_dummy());\n \t  this->_M_disjunction();\n \t  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))\n \t    __throw_regex_error(regex_constants::error_paren);\n@@ -328,12 +330,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       else if (_M_match_token(_ScannerT::_S_token_subexpr_begin))\n \t{\n-\t  _StateSeqT __r(_M_nfa, _M_nfa._M_insert_subexpr_begin());\n+\t  _StateSeqT __r(*_M_nfa, _M_nfa->_M_insert_subexpr_begin());\n \t  this->_M_disjunction();\n \t  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))\n \t    __throw_regex_error(regex_constants::error_paren);\n \t  __r._M_append(_M_pop());\n-\t  __r._M_append(_M_nfa._M_insert_subexpr_end());\n+\t  __r._M_append(_M_nfa->_M_insert_subexpr_end());\n \t  _M_stack.push(__r);\n \t}\n       else if (!_M_bracket_expression())\n@@ -361,8 +363,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Compiler<_TraitsT>::\n     _M_insert_any_matcher_ecma()\n     {\n-      _M_stack.push(_StateSeqT(_M_nfa,\n-\t_M_nfa._M_insert_matcher\n+      _M_stack.push(_StateSeqT(*_M_nfa,\n+\t_M_nfa->_M_insert_matcher\n \t  (_AnyMatcher<_TraitsT, true, __icase, __collate>\n \t    (_M_traits))));\n     }\n@@ -373,8 +375,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Compiler<_TraitsT>::\n     _M_insert_any_matcher_posix()\n     {\n-      _M_stack.push(_StateSeqT(_M_nfa,\n-\t_M_nfa._M_insert_matcher\n+      _M_stack.push(_StateSeqT(*_M_nfa,\n+\t_M_nfa->_M_insert_matcher\n \t  (_AnyMatcher<_TraitsT, false, __icase, __collate>\n \t    (_M_traits))));\n     }\n@@ -385,8 +387,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Compiler<_TraitsT>::\n     _M_insert_char_matcher()\n     {\n-      _M_stack.push(_StateSeqT(_M_nfa,\n-\t_M_nfa._M_insert_matcher\n+      _M_stack.push(_StateSeqT(*_M_nfa,\n+\t_M_nfa->_M_insert_matcher\n \t  (_CharMatcher<_TraitsT, __icase, __collate>\n \t    (_M_value[0], _M_traits))));\n     }\n@@ -402,8 +404,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);\n       __matcher._M_add_character_class(_M_value, false);\n       __matcher._M_ready();\n-      _M_stack.push(_StateSeqT(_M_nfa,\n-\t_M_nfa._M_insert_matcher(std::move(__matcher))));\n+      _M_stack.push(_StateSeqT(*_M_nfa,\n+\t_M_nfa->_M_insert_matcher(std::move(__matcher))));\n     }\n \n   template<typename _TraitsT>\n@@ -416,8 +418,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       while (!_M_match_token(_ScannerT::_S_token_bracket_end))\n \t_M_expression_term(__matcher);\n       __matcher._M_ready();\n-      _M_stack.push(_StateSeqT(_M_nfa,\n-\t\t\t       _M_nfa._M_insert_matcher(std::move(__matcher))));\n+      _M_stack.push(_StateSeqT(\n+\t\t      *_M_nfa,\n+\t\t      _M_nfa->_M_insert_matcher(std::move(__matcher))));\n     }\n \n   template<typename _TraitsT>"}, {"sha": "cd9e55d9689aa7479b278e6288613966ff9df70d", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=2bde8cac3724cd02c8114275f5c4688f25558859", "patch": "@@ -125,8 +125,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_is_word(_CharT __ch) const\n       {\n \tstatic const _CharT __s[2] = { 'w' };\n-\treturn _M_re._M_traits.isctype\n-\t  (__ch, _M_re._M_traits.lookup_classname(__s, __s+1));\n+\treturn _M_re._M_automaton->_M_traits.isctype\n+\t  (__ch, _M_re._M_automaton->_M_traits.lookup_classname(__s, __s+1));\n       }\n \n       bool"}, {"sha": "5eab85265a5afb27a54558b6b7930bda103bc5c3", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=2bde8cac3724cd02c8114275f5c4688f25558859", "patch": "@@ -312,9 +312,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t __last != _M_end && __tmp != __submatch.second;\n \t\t ++__tmp)\n \t      ++__last;\n-\t    if (_M_re._M_traits.transform(__submatch.first,\n-\t\t\t\t\t\t__submatch.second)\n-\t\t== _M_re._M_traits.transform(_M_current, __last))\n+\t    if (_M_re._M_automaton->_M_traits.transform(__submatch.first,\n+\t\t\t\t\t\t\t__submatch.second)\n+\t\t== _M_re._M_automaton->_M_traits.transform(_M_current, __last))\n \t      {\n \t\tif (__last != _M_current)\n \t\t  {\n@@ -380,8 +380,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tcase _S_opcode_alternative:\n \t  if (_M_nfa._M_flags & regex_constants::ECMAScript)\n \t    {\n-\t      // TODO: Let DFS support ECMAScript's alternative operation.\n-\t      _GLIBCXX_DEBUG_ASSERT(!__dfs_mode);\n+\t      // TODO: Let BFS support ECMAScript's alternative operation.\n+\t      _GLIBCXX_DEBUG_ASSERT(__dfs_mode);\n \t      _M_dfs(__match_mode, __state._M_alt);\n \t      // Pick lhs if it matches. Only try rhs if it doesn't.\n \t      if (!_M_has_sol)"}, {"sha": "cbb23f7de539458702d38a9a0262bfae4a521947", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/63199.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2F63199.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bde8cac3724cd02c8114275f5c4688f25558859/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2F63199.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2F63199.cc?ref=2bde8cac3724cd02c8114275f5c4688f25558859", "patch": "@@ -0,0 +1,69 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n+\n+// libstdc++/63199\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::setlocale(LC_ALL, \"\");\n+\n+  std::wstring current_token(L\"II.\");\n+\n+  std::vector<std::wregex> regex_vector;\n+\n+  for (int i = 0; i < 4; ++i)\n+  {\n+    std::regex_constants::syntax_option_type flag;\n+    flag = std::regex_constants::ECMAScript | std::regex_constants::icase;\n+\n+    std::wregex reg;\n+    reg.imbue(std::locale(\"\"));\n+    reg.assign(L\"^(M*(?:CM|DC{1,3}|D|CD|C{1,3}){0,1}(?:XC|LX{1,3}|L|XL|X{1,3}){0,1}(?:IX|VI{0,3}|IV|I{1,3}){0,1}\\\\.)$\", flag);\n+\n+    regex_vector.emplace_back(reg);\n+  }\n+\n+  for (auto cit = regex_vector.cbegin(); cit != regex_vector.cend(); ++cit)\n+  {\n+    std::wstring::const_iterator it1 = current_token.begin();\n+    std::wstring::const_iterator it2 = current_token.end();\n+    std::wsmatch current_token_match;\n+\n+    regex_match_debug(it1, it2, current_token_match, *cit);\n+    VERIFY(current_token_match[0] == current_token);\n+    VERIFY(current_token_match[1] == current_token);\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}