{"sha": "8f0b1526e04c80fd3cc30f692f482df14939088b", "node_id": "C_kwDOANBUbNoAKDhmMGIxNTI2ZTA0YzgwZmQzY2MzMGY2OTJmNDgyZGYxNDkzOTA4OGI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-14T15:06:33Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:35Z"}, "message": "gccrs: Support outer attribute handling on trait items just like normal items\n\ngcc/rust/ChangeLog:\n\n\t* hir/rust-ast-lower-base.h (class ItemWrapper): New class.\n\t* hir/rust-ast-lower-base.cc (ASTLoweringBase::handle_outer_attributes): Use\n\t`ItemWrapper` class.\n\t(ASTLoweringBase::handle_doc_item_attribute): Likewise.\n\t(ASTLoweringBase::handle_lang_item_attribute): Likewise.\n\t* hir/rust-ast-lower-implitem.h: Check outer attributes on items.\n\t* hir/tree/rust-hir-item.h: Add `get_trait_locus` methods.\n\t* hir/tree/rust-hir.h: Likewise.\n\t* util/rust-hir-map.h: Add defId mappings and associated functions.\n\t* util/rust-hir-map.cc (Mappings::insert_defid_mapping): Implement insertion to said\n\tmappings.\n\t(Mappings::lookup_trait_item_defid): And looking up said mappings.", "tree": {"sha": "6f073fd86bca5240d90db3144eccf3ecdb24f32d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f073fd86bca5240d90db3144eccf3ecdb24f32d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f0b1526e04c80fd3cc30f692f482df14939088b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0b1526e04c80fd3cc30f692f482df14939088b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f0b1526e04c80fd3cc30f692f482df14939088b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0b1526e04c80fd3cc30f692f482df14939088b/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acbaadfa46d0833a28b935e5cfab1bc2b30467a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbaadfa46d0833a28b935e5cfab1bc2b30467a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acbaadfa46d0833a28b935e5cfab1bc2b30467a6"}], "stats": {"total": 87, "additions": 72, "deletions": 15}, "files": [{"sha": "098014ff92b9703c9da2520023b96c0b7b45769c", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=8f0b1526e04c80fd3cc30f692f482df14939088b", "patch": "@@ -824,7 +824,7 @@ ASTLoweringBase::lower_qualifiers (const AST::FunctionQualifiers &qualifiers)\n }\n \n void\n-ASTLoweringBase::handle_outer_attributes (const HIR::Item &item)\n+ASTLoweringBase::handle_outer_attributes (const ItemWrapper &item)\n {\n   for (const auto &attr : item.get_outer_attrs ())\n     {\n@@ -855,7 +855,7 @@ ASTLoweringBase::handle_outer_attributes (const HIR::Item &item)\n }\n \n void\n-ASTLoweringBase::handle_doc_item_attribute (const HIR::Item &item,\n+ASTLoweringBase::handle_doc_item_attribute (const ItemWrapper &item,\n \t\t\t\t\t    const AST::Attribute &attr)\n {\n   auto simple_doc_comment = attr.has_attr_input ()\n@@ -878,7 +878,7 @@ ASTLoweringBase::handle_doc_item_attribute (const HIR::Item &item,\n }\n \n void\n-ASTLoweringBase::handle_lang_item_attribute (const HIR::Item &item,\n+ASTLoweringBase::handle_lang_item_attribute (const ItemWrapper &item,\n \t\t\t\t\t     const AST::Attribute &attr)\n {\n   auto &literal = static_cast<AST::AttrInputLiteral &> (attr.get_attr_input ());"}, {"sha": "adcbc5d2f695fe8e74a74ba64e2d407ceaba8d6c", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=8f0b1526e04c80fd3cc30f692f482df14939088b", "patch": "@@ -29,6 +29,30 @@\n namespace Rust {\n namespace HIR {\n \n+// proxy class so we can do attribute checking on items and trait items\n+class ItemWrapper\n+{\n+public:\n+  ItemWrapper (const HIR::Item &item)\n+    : mappings (item.get_mappings ()), locus (item.get_locus ()),\n+      outer_attrs (item.get_outer_attrs ())\n+  {}\n+\n+  ItemWrapper (const HIR::TraitItem &item)\n+    : mappings (item.get_mappings ()), locus (item.get_trait_locus ()),\n+      outer_attrs (item.get_outer_attrs ())\n+  {}\n+\n+  const Analysis::NodeMapping &get_mappings () const { return mappings; }\n+  Location get_locus () const { return locus; }\n+  const AST::AttrVec &get_outer_attrs () const { return outer_attrs; }\n+\n+private:\n+  const Analysis::NodeMapping &mappings;\n+  Location locus;\n+  const AST::AttrVec &outer_attrs;\n+};\n+\n // base class to allow derivatives to overload as needed\n class ASTLoweringBase : public AST::ASTVisitor\n {\n@@ -264,12 +288,12 @@ class ASTLoweringBase : public AST::ASTVisitor\n   HIR::FunctionQualifiers\n   lower_qualifiers (const AST::FunctionQualifiers &qualifiers);\n \n-  void handle_outer_attributes (const HIR::Item &item);\n+  void handle_outer_attributes (const ItemWrapper &item);\n \n-  void handle_lang_item_attribute (const HIR::Item &item,\n+  void handle_lang_item_attribute (const ItemWrapper &item,\n \t\t\t\t   const AST::Attribute &attr);\n \n-  void handle_doc_item_attribute (const HIR::Item &item,\n+  void handle_doc_item_attribute (const ItemWrapper &item,\n \t\t\t\t  const AST::Attribute &attr);\n \n   bool is_known_attribute (const std::string &attribute_path) const;"}, {"sha": "709bb5730463f1afc989e8997bb7759b5817b647", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=8f0b1526e04c80fd3cc30f692f482df14939088b", "patch": "@@ -305,16 +305,14 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \n     if (resolver.translated != nullptr)\n       {\n-\t// FIXME\n+\tauto id = resolver.translated->get_mappings ().get_hirid ();\n+\tauto defid = resolver.translated->get_mappings ().get_defid ();\n+\tauto locus = resolver.translated->get_trait_locus ();\n \n-\t// auto id = resolver.translated->get_mappings ().get_hirid ();\n-\t// auto defid = resolver.translated->get_mappings ().get_defid ();\n-\t// auto locus = resolver.translated->get_locus ();\n-\n-\t// resolver.handle_outer_attributes (*resolver.translated);\n+\tresolver.handle_outer_attributes (*resolver.translated);\n \tresolver.mappings->insert_hir_trait_item (resolver.translated);\n-\t// resolver.mappings->insert_location (id, locus);\n-\t// resolver.mappings->insert_defid_mapping (defid, resolver.item_cast);\n+\tresolver.mappings->insert_location (id, locus);\n+\tresolver.mappings->insert_defid_mapping (defid, resolver.translated);\n       }\n \n     return resolver.translated;"}, {"sha": "7f665159572e58570823b0296c90cdbf837bbefc", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=8f0b1526e04c80fd3cc30f692f482df14939088b", "patch": "@@ -2394,6 +2394,8 @@ class TraitItemFunc : public TraitItem\n     return outer_attrs;\n   }\n \n+  Location get_trait_locus () const override { return get_locus (); }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemFunc *clone_trait_item_impl () const override\n@@ -2480,6 +2482,8 @@ class TraitItemConst : public TraitItem\n     return outer_attrs;\n   }\n \n+  Location get_trait_locus () const override { return get_locus (); }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemConst *clone_trait_item_impl () const override\n@@ -2567,6 +2571,8 @@ class TraitItemType : public TraitItem\n     return outer_attrs;\n   }\n \n+  Location get_trait_locus () const override { return get_locus (); }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemType *clone_trait_item_impl () const override"}, {"sha": "aa305f1590cbcc4bf5cc1c49d922807c78ab10c5", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=8f0b1526e04c80fd3cc30f692f482df14939088b", "patch": "@@ -796,7 +796,9 @@ class TraitItem : public Node\n \n   virtual const std::string trait_identifier () const = 0;\n \n-  const Analysis::NodeMapping get_mappings () const { return mappings; }\n+  const Analysis::NodeMapping &get_mappings () const { return mappings; }\n+\n+  virtual Location get_trait_locus () const = 0;\n \n   virtual TraitItemKind get_item_kind () const = 0;\n "}, {"sha": "4aeb7f5ae18659079e76fc7334b31306d91c77b6", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=8f0b1526e04c80fd3cc30f692f482df14939088b", "patch": "@@ -316,6 +316,7 @@ Mappings::insert_defid_mapping (DefId id, HIR::Item *item)\n \n   rust_assert (lookup_defid (id) == nullptr);\n   rust_assert (lookup_local_defid (crate_num, local_def_id) == nullptr);\n+  rust_assert (lookup_trait_item_defid (id) == nullptr);\n \n   defIdMappings[id] = item;\n   insert_local_defid_mapping (crate_num, local_def_id, item);\n@@ -331,6 +332,29 @@ Mappings::lookup_defid (DefId id)\n   return it->second;\n }\n \n+void\n+Mappings::insert_defid_mapping (DefId id, HIR::TraitItem *item)\n+{\n+  CrateNum crate_num = id.crateNum;\n+  LocalDefId local_def_id = id.localDefId;\n+\n+  rust_assert (lookup_defid (id) == nullptr);\n+  rust_assert (lookup_local_defid (crate_num, local_def_id) == nullptr);\n+  rust_assert (lookup_trait_item_defid (id) == nullptr);\n+\n+  defIdTraitItemMappings[id] = item;\n+}\n+\n+HIR::TraitItem *\n+Mappings::lookup_trait_item_defid (DefId id)\n+{\n+  auto it = defIdTraitItemMappings.find (id);\n+  if (it == defIdTraitItemMappings.end ())\n+    return nullptr;\n+\n+  return it->second;\n+}\n+\n void\n Mappings::insert_hir_item (HIR::Item *item)\n {"}, {"sha": "13cae717031a92e47df7bdc1edf71705deb6c65f", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0b1526e04c80fd3cc30f692f482df14939088b/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=8f0b1526e04c80fd3cc30f692f482df14939088b", "patch": "@@ -104,6 +104,8 @@ class Mappings\n \n   void insert_defid_mapping (DefId id, HIR::Item *item);\n   HIR::Item *lookup_defid (DefId id);\n+  void insert_defid_mapping (DefId id, HIR::TraitItem *item);\n+  HIR::TraitItem *lookup_trait_item_defid (DefId id);\n \n   void insert_local_defid_mapping (CrateNum crateNum, LocalDefId id,\n \t\t\t\t   HIR::Item *item);\n@@ -307,6 +309,7 @@ class Mappings\n   std::map<CrateNum, AST::Crate *> ast_crate_mappings;\n   std::map<CrateNum, HIR::Crate *> hir_crate_mappings;\n   std::map<DefId, HIR::Item *> defIdMappings;\n+  std::map<DefId, HIR::TraitItem *> defIdTraitItemMappings;\n   std::map<CrateNum, std::map<LocalDefId, HIR::Item *>> localDefIdMappings;\n \n   std::map<HirId, HIR::Module *> hirModuleMappings;"}]}