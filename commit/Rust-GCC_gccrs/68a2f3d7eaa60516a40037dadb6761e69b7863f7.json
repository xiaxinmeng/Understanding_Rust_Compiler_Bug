{"sha": "68a2f3d7eaa60516a40037dadb6761e69b7863f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhMmYzZDdlYWE2MDUxNmE0MDAzN2RhZGI2NzYxZTY5Yjc4NjNmNw==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-02-16T07:42:32Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-19T10:34:59Z"}, "message": "Renamed `TyBase` to `BaseType`", "tree": {"sha": "2bcc568d87448ada6d31da37366044f0eb6ec439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bcc568d87448ada6d31da37366044f0eb6ec439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68a2f3d7eaa60516a40037dadb6761e69b7863f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a2f3d7eaa60516a40037dadb6761e69b7863f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a2f3d7eaa60516a40037dadb6761e69b7863f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a2f3d7eaa60516a40037dadb6761e69b7863f7/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "642cc5ed4ffcf0a334cec450e536e5b948819271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642cc5ed4ffcf0a334cec450e536e5b948819271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/642cc5ed4ffcf0a334cec450e536e5b948819271"}], "stats": {"total": 634, "additions": 317, "deletions": 317}, "files": [{"sha": "c5ae3bb0c7c47ba7a82a83cc52d5d13322e3011f", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -53,7 +53,7 @@ class Context\n \trust_assert (\n \t  tyctx->lookup_type_by_node_id ((*it)->get_node_id (), &ref));\n \n-\tTyTy::TyBase *lookup;\n+\tTyTy::BaseType *lookup;\n \trust_assert (tyctx->lookup_type (ref, &lookup));\n \n \tauto compiled = TyTyCompile::compile (backend, lookup);\n@@ -261,7 +261,7 @@ class Context\n class TyTyResolveCompile : public TyTy::TyVisitor\n {\n public:\n-  static ::Btype *compile (Context *ctx, TyTy::TyBase *ty)\n+  static ::Btype *compile (Context *ctx, TyTy::BaseType *ty)\n   {\n     TyTyResolveCompile compiler (ctx);\n     ty->accept_vis (compiler);\n@@ -355,7 +355,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     std::vector<Backend::Btyped_identifier> fields;\n     for (size_t i = 0; i < type.num_fields (); i++)\n       {\n-\tTyTy::TyBase *field = type.get_field (i);\n+\tTyTy::BaseType *field = type.get_field (i);\n \tBtype *compiled_field_ty\n \t  = TyTyCompile::compile (ctx->get_backend (), field);\n "}, {"sha": "00625df1e66029d8ec8b5efdb936fab48ae0f5c5", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -57,7 +57,7 @@ class CompileExpr : public HIRCompileBase\n \treturn;\n       }\n \n-    TyTy::TyBase *tyty = nullptr;\n+    TyTy::BaseType *tyty = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n \t\t\t\t\t &tyty))\n       {\n@@ -177,7 +177,7 @@ class CompileExpr : public HIRCompileBase\n \t      return;\n \t    }\n \n-\t  TyTy::TyBase *tyty = nullptr;\n+\t  TyTy::BaseType *tyty = nullptr;\n \t  if (!ctx->get_tyctx ()->lookup_type (\n \t\texpr.get_mappings ().get_hirid (), &tyty))\n \t    {\n@@ -203,7 +203,7 @@ class CompileExpr : public HIRCompileBase\n \t      return;\n \t    }\n \n-\t  TyTy::TyBase *tyty = nullptr;\n+\t  TyTy::BaseType *tyty = nullptr;\n \t  if (!ctx->get_tyctx ()->lookup_type (\n \t\texpr.get_mappings ().get_hirid (), &tyty))\n \t    {\n@@ -256,7 +256,7 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::ArrayExpr &expr)\n   {\n-    TyTy::TyBase *tyty = nullptr;\n+    TyTy::BaseType *tyty = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n \t\t\t\t\t &tyty))\n       {\n@@ -428,7 +428,7 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::IfExprConseqElse &expr)\n   {\n-    TyTy::TyBase *if_type = nullptr;\n+    TyTy::BaseType *if_type = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n \t\t\t\t\t &if_type))\n       {\n@@ -465,7 +465,7 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::IfExprConseqIf &expr)\n   {\n-    TyTy::TyBase *if_type = nullptr;\n+    TyTy::BaseType *if_type = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n \t\t\t\t\t &if_type))\n       {\n@@ -502,7 +502,7 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::BlockExpr &expr)\n   {\n-    TyTy::TyBase *block_tyty = nullptr;\n+    TyTy::BaseType *block_tyty = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n \t\t\t\t\t &block_tyty))\n       {\n@@ -564,7 +564,7 @@ class CompileExpr : public HIRCompileBase\n   void visit (HIR::FieldAccessExpr &expr)\n   {\n     // resolve the receiver back to ADT type\n-    TyTy::TyBase *receiver = nullptr;\n+    TyTy::BaseType *receiver = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (\n \t  expr.get_receiver_expr ()->get_mappings ().get_hirid (), &receiver))\n       {\n@@ -593,7 +593,7 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::LoopExpr &expr)\n   {\n-    TyTy::TyBase *block_tyty = nullptr;\n+    TyTy::BaseType *block_tyty = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n \t\t\t\t\t &block_tyty))\n       {\n@@ -830,7 +830,7 @@ class CompileExpr : public HIRCompileBase\n     Bexpression *main_expr\n       = CompileExpr::Compile (expr.get_expr ().get (), ctx);\n \n-    TyTy::TyBase *tyty = nullptr;\n+    TyTy::BaseType *tyty = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n \t\t\t\t\t &tyty))\n       {"}, {"sha": "3da269ab9155450959216571aa28cff58c30b0df", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -32,7 +32,7 @@ namespace Compile {\n class CompileInherentImplItem : public HIRCompileBase\n {\n public:\n-  static void Compile (TyTy::TyBase *self, HIR::InherentImplItem *item,\n+  static void Compile (TyTy::BaseType *self, HIR::InherentImplItem *item,\n \t\t       Context *ctx, bool compile_fns)\n   {\n     CompileInherentImplItem compiler (self, ctx, compile_fns);\n@@ -41,7 +41,7 @@ class CompileInherentImplItem : public HIRCompileBase\n \n   void visit (HIR::ConstantItem &constant)\n   {\n-    TyTy::TyBase *resolved_type = nullptr;\n+    TyTy::BaseType *resolved_type = nullptr;\n     bool ok\n       = ctx->get_tyctx ()->lookup_type (constant.get_mappings ().get_hirid (),\n \t\t\t\t\t&resolved_type);\n@@ -74,7 +74,7 @@ class CompileInherentImplItem : public HIRCompileBase\n \t  return;\n       }\n \n-    TyTy::TyBase *fntype_tyty;\n+    TyTy::BaseType *fntype_tyty;\n     if (!ctx->get_tyctx ()->lookup_type (function.get_mappings ().get_hirid (),\n \t\t\t\t\t &fntype_tyty))\n       {\n@@ -110,7 +110,7 @@ class CompileInherentImplItem : public HIRCompileBase\n \n     // setup the params\n \n-    TyTy::TyBase *tyret = fntype->return_type ();\n+    TyTy::BaseType *tyret = fntype->return_type ();\n     std::vector<Bvariable *> param_vars;\n \n     size_t i = 0;\n@@ -238,7 +238,7 @@ class CompileInherentImplItem : public HIRCompileBase\n \t  return;\n       }\n \n-    TyTy::TyBase *fntype_tyty;\n+    TyTy::BaseType *fntype_tyty;\n     if (!ctx->get_tyctx ()->lookup_type (method.get_mappings ().get_hirid (),\n \t\t\t\t\t &fntype_tyty))\n       {\n@@ -273,11 +273,11 @@ class CompileInherentImplItem : public HIRCompileBase\n     ctx->insert_function_decl (method.get_mappings ().get_hirid (), fndecl);\n \n     // setup the params\n-    TyTy::TyBase *tyret = fntype->return_type ();\n+    TyTy::BaseType *tyret = fntype->return_type ();\n     std::vector<Bvariable *> param_vars;\n \n     // insert self\n-    TyTy::TyBase *self_tyty_lookup = nullptr;\n+    TyTy::BaseType *self_tyty_lookup = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (\n \t  method.get_self_param ().get_mappings ().get_hirid (),\n \t  &self_tyty_lookup))\n@@ -428,11 +428,11 @@ class CompileInherentImplItem : public HIRCompileBase\n   }\n \n private:\n-  CompileInherentImplItem (TyTy::TyBase *self, Context *ctx, bool compile_fns)\n+  CompileInherentImplItem (TyTy::BaseType *self, Context *ctx, bool compile_fns)\n     : HIRCompileBase (ctx), self (self), compile_fns (compile_fns)\n   {}\n \n-  TyTy::TyBase *self;\n+  TyTy::BaseType *self;\n   bool compile_fns;\n };\n "}, {"sha": "cfbe969cbfaa424ae9c4a783a7bfb855ecbd34c1", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -41,7 +41,7 @@ class CompileItem : public HIRCompileBase\n \n   void visit (HIR::TupleStruct &struct_decl)\n   {\n-    TyTy::TyBase *resolved = nullptr;\n+    TyTy::BaseType *resolved = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (\n \t  struct_decl.get_mappings ().get_hirid (), &resolved))\n       {\n@@ -55,7 +55,7 @@ class CompileItem : public HIRCompileBase\n \n   void visit (HIR::StructStruct &struct_decl)\n   {\n-    TyTy::TyBase *resolved = nullptr;\n+    TyTy::BaseType *resolved = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (\n \t  struct_decl.get_mappings ().get_hirid (), &resolved))\n       {\n@@ -69,7 +69,7 @@ class CompileItem : public HIRCompileBase\n \n   void visit (HIR::StaticItem &var)\n   {\n-    TyTy::TyBase *resolved_type = nullptr;\n+    TyTy::BaseType *resolved_type = nullptr;\n     bool ok = ctx->get_tyctx ()->lookup_type (var.get_mappings ().get_hirid (),\n \t\t\t\t\t      &resolved_type);\n     rust_assert (ok);\n@@ -97,7 +97,7 @@ class CompileItem : public HIRCompileBase\n \n   void visit (HIR::ConstantItem &constant)\n   {\n-    TyTy::TyBase *resolved_type = nullptr;\n+    TyTy::BaseType *resolved_type = nullptr;\n     bool ok\n       = ctx->get_tyctx ()->lookup_type (constant.get_mappings ().get_hirid (),\n \t\t\t\t\t&resolved_type);\n@@ -129,7 +129,7 @@ class CompileItem : public HIRCompileBase\n \t  return;\n       }\n \n-    TyTy::TyBase *fntype_tyty;\n+    TyTy::BaseType *fntype_tyty;\n     if (!ctx->get_tyctx ()->lookup_type (function.get_mappings ().get_hirid (),\n \t\t\t\t\t &fntype_tyty))\n       {\n@@ -169,7 +169,7 @@ class CompileItem : public HIRCompileBase\n \n     // setup the params\n \n-    TyTy::TyBase *tyret = fntype->return_type ();\n+    TyTy::BaseType *tyret = fntype->return_type ();\n     std::vector<Bvariable *> param_vars;\n \n     size_t i = 0;\n@@ -282,7 +282,7 @@ class CompileItem : public HIRCompileBase\n \n   void visit (HIR::InherentImpl &impl_block)\n   {\n-    TyTy::TyBase *self_lookup = nullptr;\n+    TyTy::BaseType *self_lookup = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (\n \t  impl_block.get_type ()->get_mappings ().get_hirid (), &self_lookup))\n       {"}, {"sha": "b99b97533ccfedd2e89d0da3e0aee7260c17338e", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -58,7 +58,7 @@ class CompileStmt : public HIRCompileBase\n     if (!stmt.has_init_expr ())\n       return;\n \n-    TyTy::TyBase *ty = nullptr;\n+    TyTy::BaseType *ty = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (stmt.get_mappings ().get_hirid (),\n \t\t\t\t\t &ty))\n       {"}, {"sha": "aed96e3b8f0552e46eaf0b9e12ce24a51b06cf84", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -34,7 +34,7 @@ namespace Compile {\n class TyTyCompile : public TyTy::TyVisitor\n {\n public:\n-  static ::Btype *compile (::Backend *backend, TyTy::TyBase *ty)\n+  static ::Btype *compile (::Backend *backend, TyTy::BaseType *ty)\n   {\n     TyTyCompile compiler (backend);\n     ty->accept_vis (compiler);"}, {"sha": "7069d95d88b56b56ffc28da277a4fac817a46be6", "filename": "gcc/rust/backend/rust-compile-var-decl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -41,7 +41,7 @@ class CompileVarDecl : public HIRCompileBase\n   void visit (HIR::LetStmt &stmt)\n   {\n     locus = stmt.get_locus ();\n-    TyTy::TyBase *resolved_type = nullptr;\n+    TyTy::BaseType *resolved_type = nullptr;\n     bool ok = ctx->get_tyctx ()->lookup_type (stmt.get_mappings ().get_hirid (),\n \t\t\t\t\t      &resolved_type);\n     rust_assert (ok);"}, {"sha": "61bacf371ff29d318693bbbddebf2cad5205b58c", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -125,7 +125,7 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \t  return;\n \t}\n \n-      TyTy::TyBase *self_type = nullptr;\n+      TyTy::BaseType *self_type = nullptr;\n       if (!ctx->get_tyctx ()->lookup_type (\n \t    expr.get_receiver ()->get_mappings ().get_hirid (), &self_type))\n \t{"}, {"sha": "95009d63260ef1ed779dc26e2565ee87208758cf", "filename": "gcc/rust/typecheck/rust-hir-method-resolve.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-method-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-method-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-method-resolve.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -29,7 +29,7 @@ namespace Resolver {\n class MethodResolution : public TypeCheckBase\n {\n public:\n-  static std::vector<HIR::Method *> Probe (TyTy::TyBase *receiver,\n+  static std::vector<HIR::Method *> Probe (TyTy::BaseType *receiver,\n \t\t\t\t\t   HIR::PathExprSegment method_name)\n   {\n     MethodResolution probe (receiver, method_name);\n@@ -47,7 +47,7 @@ class MethodResolution : public TypeCheckBase\n \n   void visit (HIR::Method &method)\n   {\n-    TyTy::TyBase *self_lookup = nullptr;\n+    TyTy::BaseType *self_lookup = nullptr;\n     if (!context->lookup_type (\n \t  method.get_self_param ().get_mappings ().get_hirid (), &self_lookup))\n       {\n@@ -79,11 +79,11 @@ class MethodResolution : public TypeCheckBase\n   }\n \n private:\n-  MethodResolution (TyTy::TyBase *receiver, HIR::PathExprSegment method_name)\n+  MethodResolution (TyTy::BaseType *receiver, HIR::PathExprSegment method_name)\n     : TypeCheckBase (), receiver (receiver), method_name (method_name)\n   {}\n \n-  TyTy::TyBase *receiver;\n+  TyTy::BaseType *receiver;\n   HIR::PathExprSegment method_name;\n \n   std::vector<HIR::Method *> probed;"}, {"sha": "2cd60f3532d7bda10d07a6ef7aaa49933a9813c4", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -32,7 +32,7 @@ namespace Resolver {\n class TypeCheckExpr : public TypeCheckBase\n {\n public:\n-  static TyTy::TyBase *Resolve (HIR::Expr *expr, bool inside_loop)\n+  static TyTy::BaseType *Resolve (HIR::Expr *expr, bool inside_loop)\n   {\n     TypeCheckExpr resolver (inside_loop);\n     expr->accept_vis (resolver);\n@@ -163,7 +163,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::CallExpr &expr)\n   {\n-    TyTy::TyBase *function_tyty\n+    TyTy::BaseType *function_tyty\n       = TypeCheckExpr::Resolve (expr.get_fnexpr (), false);\n     if (function_tyty == nullptr)\n       return;\n@@ -212,7 +212,7 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n \n     auto resolved_method = probes.at (0);\n-    TyTy::TyBase *lookup;\n+    TyTy::BaseType *lookup;\n     if (!context->lookup_type (resolved_method->get_mappings ().get_hirid (),\n \t\t\t       &lookup))\n       {\n@@ -335,7 +335,7 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n \n     // the base reference for this name _must_ have a type set\n-    TyTy::TyBase *lookup;\n+    TyTy::BaseType *lookup;\n     if (!context->lookup_type (ref, &lookup))\n       {\n \trust_error_at (mappings->lookup_location (ref),\n@@ -592,7 +592,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::ArrayIndexExpr &expr)\n   {\n-    TyTy::TyBase *size_ty;\n+    TyTy::BaseType *size_ty;\n     if (!context->lookup_builtin (\"usize\", &size_ty))\n       {\n \trust_error_at (\n@@ -647,7 +647,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::ArrayElemsValues &elems)\n   {\n-    std::vector<TyTy::TyBase *> types;\n+    std::vector<TyTy::BaseType *> types;\n     elems.iterate ([&] (HIR::Expr *e) mutable -> bool {\n       types.push_back (TypeCheckExpr::Resolve (e, false));\n       return true;\n@@ -760,7 +760,7 @@ class TypeCheckExpr : public TypeCheckBase\n   void visit (HIR::LoopExpr &expr)\n   {\n     context->push_new_loop_context (expr.get_mappings ().get_hirid ());\n-    TyTy::TyBase *block_expr\n+    TyTy::BaseType *block_expr\n       = TypeCheckExpr::Resolve (expr.get_loop_block ().get (), true);\n     if (block_expr->get_kind () != TyTy::TypeKind::UNIT)\n       {\n@@ -769,7 +769,7 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    TyTy::TyBase *loop_context_type = context->pop_loop_context ();\n+    TyTy::BaseType *loop_context_type = context->pop_loop_context ();\n \n     bool loop_context_type_infered\n       = (loop_context_type->get_kind () != TyTy::TypeKind::INFER)\n@@ -787,7 +787,7 @@ class TypeCheckExpr : public TypeCheckBase\n     context->push_new_while_loop_context (expr.get_mappings ().get_hirid ());\n \n     TypeCheckExpr::Resolve (expr.get_predicate_expr ().get (), false);\n-    TyTy::TyBase *block_expr\n+    TyTy::BaseType *block_expr\n       = TypeCheckExpr::Resolve (expr.get_loop_block ().get (), true);\n \n     if (block_expr->get_kind () != TyTy::TypeKind::UNIT)\n@@ -811,18 +811,18 @@ class TypeCheckExpr : public TypeCheckBase\n \n     if (expr.has_break_expr ())\n       {\n-\tTyTy::TyBase *break_expr_tyty\n+\tTyTy::BaseType *break_expr_tyty\n \t  = TypeCheckExpr::Resolve (expr.get_expr ().get (), false);\n \n-\tTyTy::TyBase *loop_context = context->peek_loop_context ();\n+\tTyTy::BaseType *loop_context = context->peek_loop_context ();\n \tif (loop_context->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    rust_error_at (expr.get_locus (),\n \t\t\t   \"can only break with a value inside `loop`\");\n \t    return;\n \t  }\n \n-\tTyTy::TyBase *combined = loop_context->combine (break_expr_tyty);\n+\tTyTy::BaseType *combined = loop_context->combine (break_expr_tyty);\n \tcontext->swap_head_loop_context (combined);\n       }\n \n@@ -843,7 +843,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::BorrowExpr &expr)\n   {\n-    TyTy::TyBase *resolved_base\n+    TyTy::BaseType *resolved_base\n       = TypeCheckExpr::Resolve (expr.get_expr ().get (), false);\n \n     // FIXME double_reference\n@@ -854,7 +854,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::DereferenceExpr &expr)\n   {\n-    TyTy::TyBase *resolved_base\n+    TyTy::BaseType *resolved_base\n       = TypeCheckExpr::Resolve (expr.get_expr ().get (), false);\n     if (resolved_base->get_kind () != TyTy::TypeKind::REF)\n       {\n@@ -874,7 +874,7 @@ class TypeCheckExpr : public TypeCheckBase\n   {}\n \n   bool\n-  validate_arithmetic_type (TyTy::TyBase *type,\n+  validate_arithmetic_type (TyTy::BaseType *type,\n \t\t\t    HIR::ArithmeticOrLogicalExpr::ExprType expr_type)\n   {\n     // https://doc.rust-lang.org/reference/expressions/operator-expr.html#arithmetic-and-logical-binary-operators\n@@ -919,8 +919,8 @@ class TypeCheckExpr : public TypeCheckBase\n     gcc_unreachable ();\n   }\n \n-  TyTy::TyBase *infered;\n-  TyTy::TyBase *infered_array_elems;\n+  TyTy::BaseType *infered;\n+  TyTy::BaseType *infered_array_elems;\n \n   bool inside_loop;\n };"}, {"sha": "6a744c835739188f430eff02e8aad1727b96705c", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -31,24 +31,24 @@ namespace Resolver {\n class TypeCheckTopLevelImplItem : public TypeCheckBase\n {\n public:\n-  static void Resolve (HIR::InherentImplItem *item, TyTy::TyBase *self)\n+  static void Resolve (HIR::InherentImplItem *item, TyTy::BaseType *self)\n   {\n     TypeCheckTopLevelImplItem resolver (self);\n     item->accept_vis (resolver);\n   }\n \n   void visit (HIR::ConstantItem &constant)\n   {\n-    TyTy::TyBase *type = TypeCheckType::Resolve (constant.get_type ());\n-    TyTy::TyBase *expr_type\n+    TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ());\n+    TyTy::BaseType *expr_type\n       = TypeCheckExpr::Resolve (constant.get_expr (), false);\n \n     context->insert_type (constant.get_mappings (), type->combine (expr_type));\n   }\n \n   void visit (HIR::Function &function)\n   {\n-    TyTy::TyBase *ret_type = nullptr;\n+    TyTy::BaseType *ret_type = nullptr;\n     if (!function.has_function_return_type ())\n       ret_type = new TyTy::UnitType (function.get_mappings ().get_hirid ());\n     else\n@@ -65,13 +65,13 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \tret_type->set_ref (function.return_type->get_mappings ().get_hirid ());\n       }\n \n-    std::vector<std::pair<HIR::Pattern *, TyTy::TyBase *> > params;\n+    std::vector<std::pair<HIR::Pattern *, TyTy::BaseType *> > params;\n     for (auto &param : function.function_params)\n       {\n \t// get the name as well required for later on\n \tauto param_tyty = TypeCheckType::Resolve (param.get_type ());\n \tparams.push_back (\n-\t  std::pair<HIR::Pattern *, TyTy::TyBase *> (param.get_param_name (),\n+\t  std::pair<HIR::Pattern *, TyTy::BaseType *> (param.get_param_name (),\n \t\t\t\t\t\t     param_tyty));\n \n \tcontext->insert_type (param.get_mappings (), param_tyty);\n@@ -84,7 +84,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \n   void visit (HIR::Method &method)\n   {\n-    TyTy::TyBase *ret_type = nullptr;\n+    TyTy::BaseType *ret_type = nullptr;\n     if (!method.has_function_return_type ())\n       ret_type = new TyTy::UnitType (method.get_mappings ().get_hirid ());\n     else\n@@ -104,7 +104,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n       }\n \n     // hold all the params to the fndef\n-    std::vector<std::pair<HIR::Pattern *, TyTy::TyBase *> > params;\n+    std::vector<std::pair<HIR::Pattern *, TyTy::BaseType *> > params;\n \n     // add the self param at the front\n     HIR::SelfParam &self_param = method.get_self_param ();\n@@ -115,14 +115,14 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \t\t\t\t    std::unique_ptr<HIR::Pattern> (nullptr));\n     context->insert_type (self_param.get_mappings (), self->clone ());\n     params.push_back (\n-      std::pair<HIR::Pattern *, TyTy::TyBase *> (self_pattern, self->clone ()));\n+      std::pair<HIR::Pattern *, TyTy::BaseType *> (self_pattern, self->clone ()));\n \n     for (auto &param : method.get_function_params ())\n       {\n \t// get the name as well required for later on\n \tauto param_tyty = TypeCheckType::Resolve (param.get_type ());\n \tparams.push_back (\n-\t  std::pair<HIR::Pattern *, TyTy::TyBase *> (param.get_param_name (),\n+\t  std::pair<HIR::Pattern *, TyTy::BaseType *> (param.get_param_name (),\n \t\t\t\t\t\t     param_tyty));\n \n \tcontext->insert_type (param.get_mappings (), param_tyty);\n@@ -134,24 +134,24 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckTopLevelImplItem (TyTy::TyBase *self) : TypeCheckBase (), self (self)\n+  TypeCheckTopLevelImplItem (TyTy::BaseType *self) : TypeCheckBase (), self (self)\n   {}\n \n-  TyTy::TyBase *self;\n+  TyTy::BaseType *self;\n };\n \n class TypeCheckImplItem : public TypeCheckBase\n {\n public:\n-  static void Resolve (HIR::InherentImplItem *item, TyTy::TyBase *self)\n+  static void Resolve (HIR::InherentImplItem *item, TyTy::BaseType *self)\n   {\n     TypeCheckImplItem resolver (self);\n     item->accept_vis (resolver);\n   }\n \n   void visit (HIR::Function &function)\n   {\n-    TyTy::TyBase *lookup;\n+    TyTy::BaseType *lookup;\n     if (!context->lookup_type (function.get_mappings ().get_hirid (), &lookup))\n       {\n \trust_error_at (function.get_locus (), \"failed to lookup function type\");\n@@ -183,7 +183,7 @@ class TypeCheckImplItem : public TypeCheckBase\n \n   void visit (HIR::Method &method)\n   {\n-    TyTy::TyBase *lookup;\n+    TyTy::BaseType *lookup;\n     if (!context->lookup_type (method.get_mappings ().get_hirid (), &lookup))\n       {\n \trust_error_at (method.get_locus (), \"failed to lookup function type\");\n@@ -215,9 +215,9 @@ class TypeCheckImplItem : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckImplItem (TyTy::TyBase *self) : TypeCheckBase (), self (self) {}\n+  TypeCheckImplItem (TyTy::BaseType *self) : TypeCheckBase (), self (self) {}\n \n-  TyTy::TyBase *self;\n+  TyTy::BaseType *self;\n };\n \n } // namespace Resolver"}, {"sha": "35a1028af18019c4e7e6a098ba6f6d9e6a01c98e", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -40,7 +40,7 @@ class TypeCheckItem : public TypeCheckBase\n \n   void visit (HIR::InherentImpl &impl_block) override\n   {\n-    TyTy::TyBase *self = nullptr;\n+    TyTy::BaseType *self = nullptr;\n     if (!context->lookup_type (\n \t  impl_block.get_type ()->get_mappings ().get_hirid (), &self))\n       {\n@@ -55,7 +55,7 @@ class TypeCheckItem : public TypeCheckBase\n \n   void visit (HIR::Function &function) override\n   {\n-    TyTy::TyBase *lookup;\n+    TyTy::BaseType *lookup;\n     if (!context->lookup_type (function.get_mappings ().get_hirid (), &lookup))\n       {\n \trust_error_at (function.locus, \"failed to lookup function type\");"}, {"sha": "9b7d6880807b1dc9fdb7423c0acd902cd4c90e5f", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -30,7 +30,7 @@ namespace Resolver {\n class TypeCheckStmt : public TypeCheckBase\n {\n public:\n-  static TyTy::TyBase *Resolve (HIR::Stmt *stmt, bool inside_loop)\n+  static TyTy::BaseType *Resolve (HIR::Stmt *stmt, bool inside_loop)\n   {\n     TypeCheckStmt resolver (inside_loop);\n     stmt->accept_vis (resolver);\n@@ -51,7 +51,7 @@ class TypeCheckStmt : public TypeCheckBase\n   {\n     infered = new TyTy::UnitType (stmt.get_mappings ().get_hirid ());\n \n-    TyTy::TyBase *init_expr_ty = nullptr;\n+    TyTy::BaseType *init_expr_ty = nullptr;\n     if (stmt.has_init_expr ())\n       {\n \tinit_expr_ty\n@@ -65,7 +65,7 @@ class TypeCheckStmt : public TypeCheckBase\n \tinit_expr_ty->append_reference (ref);\n       }\n \n-    TyTy::TyBase *specified_ty = nullptr;\n+    TyTy::BaseType *specified_ty = nullptr;\n     if (stmt.has_type ())\n       specified_ty = TypeCheckType::Resolve (stmt.get_type ());\n \n@@ -110,7 +110,7 @@ class TypeCheckStmt : public TypeCheckBase\n     : TypeCheckBase (), infered (nullptr), inside_loop (inside_loop)\n   {}\n \n-  TyTy::TyBase *infered;\n+  TyTy::BaseType *infered;\n   bool inside_loop;\n };\n "}, {"sha": "87473915edf327c2659daac1885d56991d7c49df", "filename": "gcc/rust/typecheck/rust-hir-type-check-struct-field.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct-field.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct-field.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct-field.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -30,7 +30,7 @@ namespace Resolver {\n class TypeCheckStructExpr : public TypeCheckBase\n {\n public:\n-  static TyTy::TyBase *Resolve (HIR::StructExprStructFields *expr)\n+  static TyTy::BaseType *Resolve (HIR::StructExprStructFields *expr)\n   {\n     TypeCheckStructExpr resolver;\n     expr->accept_vis (resolver);\n@@ -53,9 +53,9 @@ class TypeCheckStructExpr : public TypeCheckBase\n     : TypeCheckBase (), resolved (nullptr), struct_path_resolved (nullptr)\n   {}\n \n-  TyTy::TyBase *resolved;\n+  TyTy::BaseType *resolved;\n   TyTy::ADTType *struct_path_resolved;\n-  TyTy::TyBase *resolved_field;\n+  TyTy::BaseType *resolved_field;\n   std::set<std::string> fields_assigned;\n   std::map<size_t, HIR::StructExprField *> adtFieldIndexToField;\n };"}, {"sha": "d22329546ecf7f545fa98601893f39971cb8c759", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -44,7 +44,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n     size_t idx = 0;\n     struct_decl.iterate ([&] (HIR::TupleField &field) mutable -> bool {\n-      TyTy::TyBase *field_type\n+      TyTy::BaseType *field_type\n \t= TypeCheckType::Resolve (field.get_field_type ().get ());\n       TyTy::StructFieldType *ty_field\n \t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n@@ -55,7 +55,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n       return true;\n     });\n \n-    TyTy::TyBase *type\n+    TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n \t\t\t   struct_decl.get_identifier (), std::move (fields));\n \n@@ -66,7 +66,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n   {\n     std::vector<TyTy::StructFieldType *> fields;\n     struct_decl.iterate ([&] (HIR::StructField &field) mutable -> bool {\n-      TyTy::TyBase *field_type\n+      TyTy::BaseType *field_type\n \t= TypeCheckType::Resolve (field.get_field_type ().get ());\n       TyTy::StructFieldType *ty_field\n \t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n@@ -76,7 +76,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n       return true;\n     });\n \n-    TyTy::TyBase *type\n+    TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n \t\t\t   struct_decl.get_identifier (), std::move (fields));\n \n@@ -85,24 +85,24 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n   void visit (HIR::StaticItem &var)\n   {\n-    TyTy::TyBase *type = TypeCheckType::Resolve (var.get_type ());\n-    TyTy::TyBase *expr_type = TypeCheckExpr::Resolve (var.get_expr (), false);\n+    TyTy::BaseType *type = TypeCheckType::Resolve (var.get_type ());\n+    TyTy::BaseType *expr_type = TypeCheckExpr::Resolve (var.get_expr (), false);\n \n     context->insert_type (var.get_mappings (), type->combine (expr_type));\n   }\n \n   void visit (HIR::ConstantItem &constant)\n   {\n-    TyTy::TyBase *type = TypeCheckType::Resolve (constant.get_type ());\n-    TyTy::TyBase *expr_type\n+    TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ());\n+    TyTy::BaseType *expr_type\n       = TypeCheckExpr::Resolve (constant.get_expr (), false);\n \n     context->insert_type (constant.get_mappings (), type->combine (expr_type));\n   }\n \n   void visit (HIR::Function &function)\n   {\n-    TyTy::TyBase *ret_type = nullptr;\n+    TyTy::BaseType *ret_type = nullptr;\n     if (!function.has_function_return_type ())\n       ret_type = new TyTy::UnitType (function.get_mappings ().get_hirid ());\n     else\n@@ -119,13 +119,13 @@ class TypeCheckTopLevel : public TypeCheckBase\n \tret_type->set_ref (function.return_type->get_mappings ().get_hirid ());\n       }\n \n-    std::vector<std::pair<HIR::Pattern *, TyTy::TyBase *> > params;\n+    std::vector<std::pair<HIR::Pattern *, TyTy::BaseType *> > params;\n     for (auto &param : function.function_params)\n       {\n \t// get the name as well required for later on\n \tauto param_tyty = TypeCheckType::Resolve (param.get_type ());\n \tparams.push_back (\n-\t  std::pair<HIR::Pattern *, TyTy::TyBase *> (param.get_param_name (),\n+\t  std::pair<HIR::Pattern *, TyTy::BaseType *> (param.get_param_name (),\n \t\t\t\t\t\t     param_tyty));\n \n \tcontext->insert_type (param.get_mappings (), param_tyty);"}, {"sha": "74896e26e647f9666aebb12aea298228855ae34c", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -65,7 +65,7 @@ class ArrayCapacityConstant : public TypeCheckBase\n class TypeCheckType : public TypeCheckBase\n {\n public:\n-  static TyTy::TyBase *Resolve (HIR::Type *type)\n+  static TyTy::BaseType *Resolve (HIR::Type *type)\n   {\n     TypeCheckType resolver;\n     type->accept_vis (resolver);\n@@ -83,12 +83,12 @@ class TypeCheckType : public TypeCheckBase\n \n   void visit (HIR::BareFunctionType &fntype)\n   {\n-    TyTy::TyBase *return_type\n+    TyTy::BaseType *return_type\n       = fntype.has_return_type ()\n \t  ? TypeCheckType::Resolve (fntype.get_return_type ().get ())\n \t  : new TyTy::UnitType (fntype.get_mappings ().get_hirid ());\n \n-    std::vector<std::pair<HIR::Pattern *, TyTy::TyBase *> > params;\n+    std::vector<std::pair<HIR::Pattern *, TyTy::BaseType *> > params;\n     for (auto &param : fntype.get_function_params ())\n       {\n \tstd::unique_ptr<HIR::Pattern> to_bind;\n@@ -100,9 +100,9 @@ class TypeCheckType : public TypeCheckBase\n \t  = new HIR::IdentifierPattern (param.get_name (), param.get_locus (),\n \t\t\t\t\tis_ref, is_mut, std::move (to_bind));\n \n-\tTyTy::TyBase *ptype = TypeCheckType::Resolve (param.get_type ().get ());\n+\tTyTy::BaseType *ptype = TypeCheckType::Resolve (param.get_type ().get ());\n \tparams.push_back (\n-\t  std::pair<HIR::Pattern *, TyTy::TyBase *> (pattern, ptype));\n+\t  std::pair<HIR::Pattern *, TyTy::BaseType *> (pattern, ptype));\n       }\n \n     translated = new TyTy::FnType (fntype.get_mappings ().get_hirid (),\n@@ -171,14 +171,14 @@ class TypeCheckType : public TypeCheckBase\n \treturn;\n       }\n \n-    TyTy::TyBase *base = TypeCheckType::Resolve (type.get_element_type ());\n+    TyTy::BaseType *base = TypeCheckType::Resolve (type.get_element_type ());\n     translated\n       = new TyTy::ArrayType (type.get_mappings ().get_hirid (), capacity, base);\n   }\n \n   void visit (HIR::ReferenceType &type)\n   {\n-    TyTy::TyBase *base = TypeCheckType::Resolve (type.get_base_type ().get ());\n+    TyTy::BaseType *base = TypeCheckType::Resolve (type.get_base_type ().get ());\n     translated = new TyTy::ReferenceType (type.get_mappings ().get_hirid (),\n \t\t\t\t\t  base->get_ref ());\n   }\n@@ -192,7 +192,7 @@ class TypeCheckType : public TypeCheckBase\n private:\n   TypeCheckType () : TypeCheckBase (), translated (nullptr) {}\n \n-  TyTy::TyBase *translated;\n+  TyTy::BaseType *translated;\n };\n \n } // namespace Resolver"}, {"sha": "87abb8ca6432447ec21d555684947f6d71233985", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -47,7 +47,7 @@ TypeResolution::Resolve (HIR::Crate &crate)\n   auto mappings = Analysis::Mappings::get ();\n   auto context = TypeCheckContext::get ();\n \n-  context->iterate ([&] (HirId id, TyTy::TyBase *ty) mutable -> bool {\n+  context->iterate ([&] (HirId id, TyTy::BaseType *ty) mutable -> bool {\n     if (ty->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (mappings->lookup_location (id),\n@@ -69,7 +69,7 @@ TypeResolution::Resolve (HIR::Crate &crate)\n \tbreak;\n \n \tcase TyTy::InferType::INTEGRAL: {\n-\t  TyTy::TyBase *default_integer;\n+\t  TyTy::BaseType *default_integer;\n \t  bool ok = context->lookup_builtin (\"i32\", &default_integer);\n \t  rust_assert (ok);\n \n@@ -83,7 +83,7 @@ TypeResolution::Resolve (HIR::Crate &crate)\n \tbreak;\n \n \tcase TyTy::InferType::FLOAT: {\n-\t  TyTy::TyBase *default_float;\n+\t  TyTy::BaseType *default_float;\n \t  bool ok = context->lookup_builtin (\"f32\", &default_float);\n \t  rust_assert (ok);\n \n@@ -105,7 +105,7 @@ TypeResolution::Resolve (HIR::Crate &crate)\n void\n TypeCheckExpr::visit (HIR::BlockExpr &expr)\n {\n-  TyTy::TyBase *block_tyty\n+  TyTy::BaseType *block_tyty\n     = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n \n   expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n@@ -161,7 +161,7 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n   resolved = struct_path_resolved;\n   if (struct_expr.has_struct_base ())\n     {\n-      TyTy::TyBase *base_resolved\n+      TyTy::BaseType *base_resolved\n \t= TypeCheckExpr::Resolve (struct_expr.struct_base->base_struct.get (),\n \t\t\t\t  false);\n       resolved = struct_path_resolved->combine (base_resolved);\n@@ -300,7 +300,7 @@ TypeCheckStructExpr::visit (HIR::PathInExpression &expr)\n     }\n \n   // the base reference for this name _must_ have a type set\n-  TyTy::TyBase *lookup;\n+  TyTy::BaseType *lookup;\n   if (!context->lookup_type (ref, &lookup))\n     {\n       rust_error_at (mappings->lookup_location (ref),\n@@ -329,7 +329,7 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifierValue &field)\n     }\n \n   size_t field_index;\n-  TyTy::TyBase *value = TypeCheckExpr::Resolve (field.get_value (), false);\n+  TyTy::BaseType *value = TypeCheckExpr::Resolve (field.get_value (), false);\n   TyTy::StructFieldType *field_type\n     = struct_path_resolved->get_field (field.field_name, &field_index);\n   if (field_type == nullptr)\n@@ -358,7 +358,7 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIndexValue &field)\n     }\n \n   size_t field_index;\n-  TyTy::TyBase *value = TypeCheckExpr::Resolve (field.get_value (), false);\n+  TyTy::BaseType *value = TypeCheckExpr::Resolve (field.get_value (), false);\n   TyTy::StructFieldType *field_type\n     = struct_path_resolved->get_field (field_name, &field_index);\n   if (field_type == nullptr)\n@@ -398,7 +398,7 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifier &field)\n   // existing code to figure out the type\n   HIR::IdentifierExpr expr (field.get_mappings (), field.get_field_name (),\n \t\t\t    field.get_locus ());\n-  TyTy::TyBase *value = TypeCheckExpr::Resolve (&expr, false);\n+  TyTy::BaseType *value = TypeCheckExpr::Resolve (&expr, false);\n \n   resolved_field = field_type->get_field_type ()->combine (value);\n   if (resolved_field != nullptr)"}, {"sha": "753004aa0b93198a49d2f885ca8101b622ffad40", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -33,21 +33,21 @@ class TypeCheckContext\n \n   ~TypeCheckContext ();\n \n-  bool lookup_builtin (NodeId id, TyTy::TyBase **type);\n-  bool lookup_builtin (std::string name, TyTy::TyBase **type);\n-  void insert_builtin (HirId id, NodeId ref, TyTy::TyBase *type);\n+  bool lookup_builtin (NodeId id, TyTy::BaseType **type);\n+  bool lookup_builtin (std::string name, TyTy::BaseType **type);\n+  void insert_builtin (HirId id, NodeId ref, TyTy::BaseType *type);\n \n-  void insert_type (const Analysis::NodeMapping &mappings, TyTy::TyBase *type);\n-  bool lookup_type (HirId id, TyTy::TyBase **type);\n+  void insert_type (const Analysis::NodeMapping &mappings, TyTy::BaseType *type);\n+  bool lookup_type (HirId id, TyTy::BaseType **type);\n \n   void insert_type_by_node_id (NodeId ref, HirId id);\n   bool lookup_type_by_node_id (NodeId ref, HirId *id);\n \n-  TyTy::TyBase *peek_return_type ();\n-  void push_return_type (TyTy::TyBase *return_type);\n+  TyTy::BaseType *peek_return_type ();\n+  void push_return_type (TyTy::BaseType *return_type);\n   void pop_return_type ();\n \n-  void iterate (std::function<bool (HirId, TyTy::TyBase *)> cb)\n+  void iterate (std::function<bool (HirId, TyTy::BaseType *)> cb)\n   {\n     for (auto it = resolved.begin (); it != resolved.end (); it++)\n       {\n@@ -58,27 +58,27 @@ class TypeCheckContext\n \n   void push_new_loop_context (HirId id)\n   {\n-    TyTy::TyBase *infer_var\n+    TyTy::BaseType *infer_var\n       = new TyTy::InferType (id, TyTy::InferType::InferTypeKind::GENERAL);\n     loop_type_stack.push_back (infer_var);\n   }\n \n   void push_new_while_loop_context (HirId id)\n   {\n-    TyTy::TyBase *infer_var = new TyTy::ErrorType (id);\n+    TyTy::BaseType *infer_var = new TyTy::ErrorType (id);\n     loop_type_stack.push_back (infer_var);\n   }\n \n-  TyTy::TyBase *peek_loop_context () { return loop_type_stack.back (); }\n+  TyTy::BaseType *peek_loop_context () { return loop_type_stack.back (); }\n \n-  TyTy::TyBase *pop_loop_context ()\n+  TyTy::BaseType *pop_loop_context ()\n   {\n     auto back = peek_loop_context ();\n     loop_type_stack.pop_back ();\n     return back;\n   }\n \n-  void swap_head_loop_context (TyTy::TyBase *val)\n+  void swap_head_loop_context (TyTy::BaseType *val)\n   {\n     loop_type_stack.pop_back ();\n     loop_type_stack.push_back (val);\n@@ -88,10 +88,10 @@ class TypeCheckContext\n   TypeCheckContext ();\n \n   std::map<NodeId, HirId> node_id_refs;\n-  std::map<HirId, TyTy::TyBase *> resolved;\n-  std::vector<std::unique_ptr<TyTy::TyBase> > builtins;\n-  std::vector<TyTy::TyBase *> return_type_stack;\n-  std::vector<TyTy::TyBase *> loop_type_stack;\n+  std::map<HirId, TyTy::BaseType *> resolved;\n+  std::vector<std::unique_ptr<TyTy::BaseType> > builtins;\n+  std::vector<TyTy::BaseType *> return_type_stack;\n+  std::vector<TyTy::BaseType *> loop_type_stack;\n };\n \n class TypeResolution"}, {"sha": "7e52f659c2af929193096bb6a3e7a35a5fb775cf", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -180,7 +180,7 @@ class TypeResolverDump : public TypeCheckBase\n protected:\n   std::string type_string (const Analysis::NodeMapping &mappings)\n   {\n-    TyTy::TyBase *lookup = nullptr;\n+    TyTy::BaseType *lookup = nullptr;\n     if (!context->lookup_type (mappings.get_hirid (), &lookup))\n       return \"<error>\";\n "}, {"sha": "ff1c627997b1fcca7eee64a38d42c5b4f3b74439", "filename": "gcc/rust/typecheck/rust-tyctx.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -36,7 +36,7 @@ TypeCheckContext::TypeCheckContext () {}\n TypeCheckContext::~TypeCheckContext () {}\n \n bool\n-TypeCheckContext::lookup_builtin (NodeId id, TyTy::TyBase **type)\n+TypeCheckContext::lookup_builtin (NodeId id, TyTy::BaseType **type)\n {\n   auto ref_it = node_id_refs.find (id);\n   if (ref_it == node_id_refs.end ())\n@@ -51,7 +51,7 @@ TypeCheckContext::lookup_builtin (NodeId id, TyTy::TyBase **type)\n }\n \n bool\n-TypeCheckContext::lookup_builtin (std::string name, TyTy::TyBase **type)\n+TypeCheckContext::lookup_builtin (std::string name, TyTy::BaseType **type)\n {\n   for (auto &builtin : builtins)\n     {\n@@ -65,16 +65,16 @@ TypeCheckContext::lookup_builtin (std::string name, TyTy::TyBase **type)\n }\n \n void\n-TypeCheckContext::insert_builtin (HirId id, NodeId ref, TyTy::TyBase *type)\n+TypeCheckContext::insert_builtin (HirId id, NodeId ref, TyTy::BaseType *type)\n {\n   node_id_refs[ref] = id;\n   resolved[id] = type;\n-  builtins.push_back (std::unique_ptr<TyTy::TyBase> (type));\n+  builtins.push_back (std::unique_ptr<TyTy::BaseType> (type));\n }\n \n void\n TypeCheckContext::insert_type (const Analysis::NodeMapping &mappings,\n-\t\t\t       TyTy::TyBase *type)\n+\t\t\t       TyTy::BaseType *type)\n {\n   rust_assert (type != nullptr);\n   NodeId ref = mappings.get_nodeid ();\n@@ -84,7 +84,7 @@ TypeCheckContext::insert_type (const Analysis::NodeMapping &mappings,\n }\n \n bool\n-TypeCheckContext::lookup_type (HirId id, TyTy::TyBase **type)\n+TypeCheckContext::lookup_type (HirId id, TyTy::BaseType **type)\n {\n   auto it = resolved.find (id);\n   if (it == resolved.end ())\n@@ -112,14 +112,14 @@ TypeCheckContext::lookup_type_by_node_id (NodeId ref, HirId *id)\n   return true;\n }\n \n-TyTy::TyBase *\n+TyTy::BaseType *\n TypeCheckContext::peek_return_type ()\n {\n   return return_type_stack.back ();\n }\n \n void\n-TypeCheckContext::push_return_type (TyTy::TyBase *return_type)\n+TypeCheckContext::push_return_type (TyTy::BaseType *return_type)\n {\n   return_type_stack.push_back (return_type);\n }"}, {"sha": "d6e5879b1e9b18993af95383f231a07cd29d2c43", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -31,7 +31,7 @@ namespace TyTy {\n class TypeCheckCallExpr : private TyVisitor\n {\n public:\n-  static TyBase *go (TyBase *ref, HIR::CallExpr &call,\n+  static BaseType *go (BaseType *ref, HIR::CallExpr &call,\n \t\t     Resolver::TypeCheckContext *context)\n   {\n     TypeCheckCallExpr checker (call, context);\n@@ -66,7 +66,7 @@ class TypeCheckCallExpr : private TyVisitor\n       mappings (Analysis::Mappings::get ())\n   {}\n \n-  TyBase *resolved;\n+  BaseType *resolved;\n   HIR::CallExpr &call;\n   Resolver::TypeCheckContext *context;\n   Analysis::Mappings *mappings;\n@@ -75,7 +75,7 @@ class TypeCheckCallExpr : private TyVisitor\n class TypeCheckMethodCallExpr : private TyVisitor\n {\n public:\n-  static TyBase *go (TyBase *ref, HIR::MethodCallExpr &call,\n+  static BaseType *go (BaseType *ref, HIR::MethodCallExpr &call,\n \t\t     Resolver::TypeCheckContext *context)\n   {\n     TypeCheckMethodCallExpr checker (call, context);\n@@ -109,7 +109,7 @@ class TypeCheckMethodCallExpr : private TyVisitor\n       mappings (Analysis::Mappings::get ())\n   {}\n \n-  TyBase *resolved;\n+  BaseType *resolved;\n   HIR::MethodCallExpr &call;\n   Resolver::TypeCheckContext *context;\n   Analysis::Mappings *mappings;"}, {"sha": "f5c74a5c034d72f731fab8bf16becfd9ab0d2f37", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -33,7 +33,7 @@ class BaseRules : public TyVisitor\n public:\n   virtual ~BaseRules () {}\n \n-  TyBase *combine (TyBase *other)\n+  BaseType *combine (BaseType *other)\n   {\n     other->accept_vis (*this);\n     if (resolved != nullptr)\n@@ -50,7 +50,7 @@ class BaseRules : public TyVisitor\n \t  {\n \t    for (auto &ref : resolved->get_combined_refs ())\n \t      {\n-\t\tTyTy::TyBase *ref_tyty = nullptr;\n+\t\tTyTy::BaseType *ref_tyty = nullptr;\n \t\tbool ok = context->lookup_type (ref, &ref_tyty);\n \t\tif (!ok)\n \t\t  continue;\n@@ -185,7 +185,7 @@ class BaseRules : public TyVisitor\n   }\n \n protected:\n-  BaseRules (TyBase *base)\n+  BaseRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n       context (Resolver::TypeCheckContext::get ()), base (base),\n       resolved (new ErrorType (base->get_ref (), base->get_ref ()))\n@@ -194,8 +194,8 @@ class BaseRules : public TyVisitor\n   Analysis::Mappings *mappings;\n   Resolver::TypeCheckContext *context;\n \n-  TyBase *base;\n-  TyBase *resolved;\n+  BaseType *base;\n+  BaseType *resolved;\n };\n \n class InferRules : public BaseRules\n@@ -423,7 +423,7 @@ class StructFieldTypeRules : public BaseRules\n \n   void visit (StructFieldType &type)\n   {\n-    TyBase *ty = base->get_field_type ()->combine (type.get_field_type ());\n+    BaseType *ty = base->get_field_type ()->combine (type.get_field_type ());\n     if (ty == nullptr)\n       return;\n \n@@ -474,7 +474,7 @@ class FnRules : public BaseRules\n \treturn;\n       }\n \n-    // FIXME add an abstract method for is_equal on TyBase\n+    // FIXME add an abstract method for is_equal on BaseType\n     for (size_t i = 0; i < base->num_params (); i++)\n       {\n \tauto a = base->param_at (i).second;\n@@ -670,7 +670,7 @@ class ADTRules : public BaseRules\n \tTyTy::StructFieldType *base_field = base->get_field (i);\n \tTyTy::StructFieldType *other_field = type.get_field (i);\n \n-\tTyBase *combined = base_field->combine (other_field);\n+\tBaseType *combined = base_field->combine (other_field);\n \tif (combined == nullptr)\n \t  {\n \t    BaseRules::visit (type);\n@@ -704,10 +704,10 @@ class TupleRules : public BaseRules\n     std::vector<HirId> fields;\n     for (size_t i = 0; i < base->num_fields (); i++)\n       {\n-\tTyBase *bo = base->get_field (i);\n-\tTyBase *fo = type.get_field (i);\n+\tBaseType *bo = base->get_field (i);\n+\tBaseType *fo = type.get_field (i);\n \n-\tTyBase *combined = bo->combine (fo);\n+\tBaseType *combined = bo->combine (fo);\n \tif (combined == nullptr)\n \t  {\n \t    BaseRules::visit (type);\n@@ -806,7 +806,7 @@ class ReferenceRules : public BaseRules\n     auto base_type = base->get_base ();\n     auto other_base_type = type.get_base ();\n \n-    TyTy::TyBase *base_resolved = base_type->combine (other_base_type);\n+    TyTy::BaseType *base_resolved = base_type->combine (other_base_type);\n     resolved = new ReferenceType (base->get_ref (), base->get_ty_ref (),\n \t\t\t\t  base_resolved->get_ref ());\n   }"}, {"sha": "e6e8c63e5adb67cbc720507e07461a70b977cdb1", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -37,14 +37,14 @@ UnitType::as_string () const\n   return \"()\";\n }\n \n-TyBase *\n-UnitType::combine (TyBase *other)\n+BaseType *\n+UnitType::combine (BaseType *other)\n {\n   UnitRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n UnitType::clone ()\n {\n   return new UnitType (get_ref (), get_ty_ref (), get_combined_refs ());\n@@ -71,14 +71,14 @@ InferType::as_string () const\n   return \"<infer::error>\";\n }\n \n-TyBase *\n-InferType::combine (TyBase *other)\n+BaseType *\n+InferType::combine (BaseType *other)\n {\n   InferRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n InferType::clone ()\n {\n   return new InferType (get_ref (), get_ty_ref (), get_infer_kind (),\n@@ -97,15 +97,15 @@ ErrorType::as_string () const\n   return \"<tyty::error>\";\n }\n \n-TyBase *\n-ErrorType::combine (TyBase *other)\n+BaseType *\n+ErrorType::combine (BaseType *other)\n {\n   // FIXME\n   // rust_error_at ();\n   return this;\n }\n \n-TyBase *\n+BaseType *\n ErrorType::clone ()\n {\n   return new ErrorType (get_ref (), get_ty_ref (), get_combined_refs ());\n@@ -123,14 +123,14 @@ StructFieldType::as_string () const\n   return name + \":\" + ty->as_string ();\n }\n \n-TyBase *\n-StructFieldType::combine (TyBase *other)\n+BaseType *\n+StructFieldType::combine (BaseType *other)\n {\n   StructFieldTypeRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n StructFieldType::clone ()\n {\n   return new StructFieldType (get_ref (), get_ty_ref (), get_name (),\n@@ -158,14 +158,14 @@ ADTType::as_string () const\n   return identifier;\n }\n \n-TyBase *\n-ADTType::combine (TyBase *other)\n+BaseType *\n+ADTType::combine (BaseType *other)\n {\n   ADTRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n ADTType::clone ()\n {\n   std::vector<StructFieldType *> cloned_fields;\n@@ -186,32 +186,32 @@ std::string\n TupleType::as_string () const\n {\n   std::string fields_buffer;\n-  iterate_fields ([&] (TyBase *field) mutable -> bool {\n+  iterate_fields ([&] (BaseType *field) mutable -> bool {\n     fields_buffer += field->as_string ();\n     fields_buffer += \", \";\n     return true;\n   });\n   return \"(\" + fields_buffer + \")\";\n }\n \n-TyBase *\n+BaseType *\n TupleType::get_field (size_t index) const\n {\n   auto context = Resolver::TypeCheckContext::get ();\n-  TyBase *lookup = nullptr;\n+  BaseType *lookup = nullptr;\n   bool ok = context->lookup_type (fields.at (index), &lookup);\n   rust_assert (ok);\n   return lookup;\n }\n \n-TyBase *\n-TupleType::combine (TyBase *other)\n+BaseType *\n+TupleType::combine (BaseType *other)\n {\n   TupleRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n TupleType::clone ()\n {\n   return new TupleType (get_ref (), get_ty_ref (), fields,\n@@ -240,20 +240,20 @@ FnType::as_string () const\n   return \"fn (\" + params_str + \") -> \" + ret_str;\n }\n \n-TyBase *\n-FnType::combine (TyBase *other)\n+BaseType *\n+FnType::combine (BaseType *other)\n {\n   FnRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n FnType::clone ()\n {\n-  std::vector<std::pair<HIR::Pattern *, TyBase *> > cloned_params;\n+  std::vector<std::pair<HIR::Pattern *, BaseType *> > cloned_params;\n   for (auto &p : params)\n     cloned_params.push_back (\n-      std::pair<HIR::Pattern *, TyBase *> (p.first, p.second->clone ()));\n+      std::pair<HIR::Pattern *, BaseType *> (p.first, p.second->clone ()));\n \n   return new FnType (get_ref (), get_ty_ref (), cloned_params,\n \t\t     get_return_type ()->clone (), get_combined_refs ());\n@@ -272,24 +272,24 @@ ArrayType::as_string () const\n \t + \"]\";\n }\n \n-TyBase *\n-ArrayType::combine (TyBase *other)\n+BaseType *\n+ArrayType::combine (BaseType *other)\n {\n   ArrayRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n ArrayType::get_type () const\n {\n   auto context = Resolver::TypeCheckContext::get ();\n-  TyBase *lookup = nullptr;\n+  BaseType *lookup = nullptr;\n   bool ok = context->lookup_type (element_type_id, &lookup);\n   rust_assert (ok);\n   return lookup;\n }\n \n-TyBase *\n+BaseType *\n ArrayType::clone ()\n {\n   return new ArrayType (get_ref (), get_ty_ref (), get_capacity (),\n@@ -308,14 +308,14 @@ BoolType::as_string () const\n   return \"bool\";\n }\n \n-TyBase *\n-BoolType::combine (TyBase *other)\n+BaseType *\n+BoolType::combine (BaseType *other)\n {\n   BoolRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n BoolType::clone ()\n {\n   return new BoolType (get_ref (), get_ty_ref (), get_combined_refs ());\n@@ -347,14 +347,14 @@ IntType::as_string () const\n   return \"__unknown_int_type\";\n }\n \n-TyBase *\n-IntType::combine (TyBase *other)\n+BaseType *\n+IntType::combine (BaseType *other)\n {\n   IntRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n IntType::clone ()\n {\n   return new IntType (get_ref (), get_ty_ref (), get_kind (),\n@@ -387,14 +387,14 @@ UintType::as_string () const\n   return \"__unknown_uint_type\";\n }\n \n-TyBase *\n-UintType::combine (TyBase *other)\n+BaseType *\n+UintType::combine (BaseType *other)\n {\n   UintRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n UintType::clone ()\n {\n   return new UintType (get_ref (), get_ty_ref (), get_kind (),\n@@ -421,14 +421,14 @@ FloatType::as_string () const\n   return \"__unknown_float_type\";\n }\n \n-TyBase *\n-FloatType::combine (TyBase *other)\n+BaseType *\n+FloatType::combine (BaseType *other)\n {\n   FloatRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n FloatType::clone ()\n {\n   return new FloatType (get_ref (), get_ty_ref (), get_kind (),\n@@ -447,14 +447,14 @@ USizeType::as_string () const\n   return \"usize\";\n }\n \n-TyBase *\n-USizeType::combine (TyBase *other)\n+BaseType *\n+USizeType::combine (BaseType *other)\n {\n   USizeRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n USizeType::clone ()\n {\n   return new USizeType (get_ref (), get_ty_ref (), get_combined_refs ());\n@@ -472,14 +472,14 @@ ISizeType::as_string () const\n   return \"isize\";\n }\n \n-TyBase *\n-ISizeType::combine (TyBase *other)\n+BaseType *\n+ISizeType::combine (BaseType *other)\n {\n   ISizeRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n ISizeType::clone ()\n {\n   return new ISizeType (get_ref (), get_ty_ref (), get_combined_refs ());\n@@ -497,14 +497,14 @@ CharType::as_string () const\n   return \"char\";\n }\n \n-TyBase *\n-CharType::combine (TyBase *other)\n+BaseType *\n+CharType::combine (BaseType *other)\n {\n   CharRules r (this);\n   return r.combine (other);\n }\n \n-TyBase *\n+BaseType *\n CharType::clone ()\n {\n   return new CharType (get_ref (), get_ty_ref (), get_combined_refs ());\n@@ -522,34 +522,34 @@ ReferenceType::as_string () const\n   return \"&\" + get_base ()->as_string ();\n }\n \n-TyBase *\n-ReferenceType::combine (TyBase *other)\n+BaseType *\n+ReferenceType::combine (BaseType *other)\n {\n   ReferenceRules r (this);\n   return r.combine (other);\n }\n \n-const TyBase *\n+const BaseType *\n ReferenceType::get_base () const\n {\n   auto context = Resolver::TypeCheckContext::get ();\n-  TyBase *lookup = nullptr;\n+  BaseType *lookup = nullptr;\n   bool ok = context->lookup_type (base, &lookup);\n   rust_assert (ok);\n   return lookup;\n }\n \n-TyBase *\n+BaseType *\n ReferenceType::get_base ()\n {\n   auto context = Resolver::TypeCheckContext::get ();\n-  TyBase *lookup = nullptr;\n+  BaseType *lookup = nullptr;\n   bool ok = context->lookup_type (base, &lookup);\n   rust_assert (ok);\n   return lookup;\n }\n \n-TyBase *\n+BaseType *\n ReferenceType::clone ()\n {\n   return new ReferenceType (get_ref (), get_ty_ref (), base,\n@@ -572,9 +572,9 @@ TypeCheckCallExpr::visit (ADTType &type)\n   size_t i = 0;\n   call.iterate_params ([&] (HIR::Expr *p) mutable -> bool {\n     StructFieldType *field = type.get_field (i);\n-    TyBase *field_tyty = field->get_field_type ();\n+    BaseType *field_tyty = field->get_field_type ();\n \n-    TyBase *arg = Resolver::TypeCheckExpr::Resolve (p, false);\n+    BaseType *arg = Resolver::TypeCheckExpr::Resolve (p, false);\n     if (arg == nullptr)\n       {\n \trust_error_at (p->get_locus_slow (), \"failed to resolve argument type\");"}, {"sha": "2b63b93ae970b909597e9fb151eda8f83ff25e24", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 106, "deletions": 106, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a2f3d7eaa60516a40037dadb6761e69b7863f7/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=68a2f3d7eaa60516a40037dadb6761e69b7863f7", "patch": "@@ -50,10 +50,10 @@ enum TypeKind\n };\n \n class TyVisitor;\n-class TyBase\n+class BaseType\n {\n public:\n-  virtual ~TyBase () {}\n+  virtual ~BaseType () {}\n \n   HirId get_ref () const { return ref; }\n \n@@ -67,20 +67,20 @@ class TyBase\n \n   virtual std::string as_string () const = 0;\n \n-  virtual TyBase *combine (TyBase *other) = 0;\n+  virtual BaseType *combine (BaseType *other) = 0;\n \n   virtual bool is_unit () const { return kind == TypeKind::UNIT; }\n \n   TypeKind get_kind () const { return kind; }\n \n-  virtual TyBase *clone () = 0;\n+  virtual BaseType *clone () = 0;\n \n   std::set<HirId> get_combined_refs () { return combined; }\n \n   void append_reference (HirId id) { combined.insert (id); }\n \n protected:\n-  TyBase (HirId ref, HirId ty_ref, TypeKind kind,\n+  BaseType (HirId ref, HirId ty_ref, TypeKind kind,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : kind (kind), ref (ref), ty_ref (ty_ref), combined (refs)\n   {}\n@@ -92,7 +92,7 @@ class TyBase\n   std::set<HirId> combined;\n };\n \n-class InferType : public TyBase\n+class InferType : public BaseType\n {\n public:\n   enum InferTypeKind\n@@ -104,12 +104,12 @@ class InferType : public TyBase\n \n   InferType (HirId ref, InferTypeKind infer_kind,\n \t     std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::INFER, refs), infer_kind (infer_kind)\n+    : BaseType (ref, ref, TypeKind::INFER, refs), infer_kind (infer_kind)\n   {}\n \n   InferType (HirId ref, HirId ty_ref, InferTypeKind infer_kind,\n \t     std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::INFER, refs), infer_kind (infer_kind)\n+    : BaseType (ref, ty_ref, TypeKind::INFER, refs), infer_kind (infer_kind)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -118,25 +118,25 @@ class InferType : public TyBase\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n \n   InferTypeKind get_infer_kind () const { return infer_kind; }\n \n private:\n   InferTypeKind infer_kind;\n };\n \n-class ErrorType : public TyBase\n+class ErrorType : public BaseType\n {\n public:\n   ErrorType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::ERROR, refs)\n+    : BaseType (ref, ref, TypeKind::ERROR, refs)\n   {}\n \n   ErrorType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::ERROR, refs)\n+    : BaseType (ref, ty_ref, TypeKind::ERROR, refs)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -145,20 +145,20 @@ class ErrorType : public TyBase\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n };\n \n-class UnitType : public TyBase\n+class UnitType : public BaseType\n {\n public:\n   UnitType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::UNIT, refs)\n+    : BaseType (ref, ref, TypeKind::UNIT, refs)\n   {}\n \n   UnitType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::UNIT, refs)\n+    : BaseType (ref, ty_ref, TypeKind::UNIT, refs)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -167,22 +167,22 @@ class UnitType : public TyBase\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n };\n \n-class StructFieldType : public TyBase\n+class StructFieldType : public BaseType\n {\n public:\n-  StructFieldType (HirId ref, std::string name, TyBase *ty,\n+  StructFieldType (HirId ref, std::string name, BaseType *ty,\n \t\t   std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::FIELD, refs), name (name), ty (ty)\n+    : BaseType (ref, ref, TypeKind::FIELD, refs), name (name), ty (ty)\n   {}\n \n-  StructFieldType (HirId ref, HirId ty_ref, std::string name, TyBase *ty,\n+  StructFieldType (HirId ref, HirId ty_ref, std::string name, BaseType *ty,\n \t\t   std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::FIELD, refs), name (name), ty (ty)\n+    : BaseType (ref, ty_ref, TypeKind::FIELD, refs), name (name), ty (ty)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -191,30 +191,30 @@ class StructFieldType : public TyBase\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n   std::string get_name () const { return name; }\n \n-  TyBase *get_field_type () { return ty; }\n+  BaseType *get_field_type () { return ty; }\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n \n private:\n   std::string name;\n-  TyBase *ty;\n+  BaseType *ty;\n };\n \n-class TupleType : public TyBase\n+class TupleType : public BaseType\n {\n public:\n   TupleType (HirId ref, std::vector<HirId> fields,\n \t     std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::TUPLE, refs), fields (fields)\n+    : BaseType (ref, ref, TypeKind::TUPLE, refs), fields (fields)\n   {}\n \n   TupleType (HirId ref, HirId ty_ref, std::vector<HirId> fields,\n \t     std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::TUPLE, refs), fields (fields)\n+    : BaseType (ref, ty_ref, TypeKind::TUPLE, refs), fields (fields)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -223,15 +223,15 @@ class TupleType : public TyBase\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n   size_t num_fields () const { return fields.size (); }\n \n-  TyBase *get_field (size_t index) const;\n+  BaseType *get_field (size_t index) const;\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n \n-  void iterate_fields (std::function<bool (TyBase *)> cb) const\n+  void iterate_fields (std::function<bool (BaseType *)> cb) const\n   {\n     for (size_t i = 0; i < num_fields (); i++)\n       {\n@@ -244,20 +244,20 @@ class TupleType : public TyBase\n   std::vector<HirId> fields;\n };\n \n-class ADTType : public TyBase\n+class ADTType : public BaseType\n {\n public:\n   ADTType (HirId ref, std::string identifier,\n \t   std::vector<StructFieldType *> fields,\n \t   std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::ADT, refs), identifier (identifier),\n+    : BaseType (ref, ref, TypeKind::ADT, refs), identifier (identifier),\n       fields (fields)\n   {}\n \n   ADTType (HirId ref, HirId ty_ref, std::string identifier,\n \t   std::vector<StructFieldType *> fields,\n \t   std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::ADT, refs), identifier (identifier),\n+    : BaseType (ref, ty_ref, TypeKind::ADT, refs), identifier (identifier),\n       fields (fields)\n   {}\n \n@@ -267,7 +267,7 @@ class ADTType : public TyBase\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n   size_t num_fields () const { return fields.size (); }\n \n@@ -292,7 +292,7 @@ class ADTType : public TyBase\n     return nullptr;\n   }\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n \n   std::vector<StructFieldType *> &get_fields () { return fields; }\n   const std::vector<StructFieldType *> &get_fields () const { return fields; }\n@@ -311,105 +311,105 @@ class ADTType : public TyBase\n   std::vector<StructFieldType *> fields;\n };\n \n-class FnType : public TyBase\n+class FnType : public BaseType\n {\n public:\n-  FnType (HirId ref, std::vector<std::pair<HIR::Pattern *, TyBase *> > params,\n-\t  TyBase *type, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::FNDEF, refs), params (std::move (params)),\n+  FnType (HirId ref, std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n+\t  BaseType *type, std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ref, TypeKind::FNDEF, refs), params (std::move (params)),\n       type (type)\n   {}\n \n   FnType (HirId ref, HirId ty_ref,\n-\t  std::vector<std::pair<HIR::Pattern *, TyBase *> > params,\n-\t  TyBase *type, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::FNDEF, refs), params (params), type (type)\n+\t  std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n+\t  BaseType *type, std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ty_ref, TypeKind::FNDEF, refs), params (params), type (type)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n \n-  TyBase *return_type () { return type; }\n+  BaseType *return_type () { return type; }\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n   size_t num_params () const { return params.size (); }\n \n-  std::vector<std::pair<HIR::Pattern *, TyBase *> > &get_params ()\n+  std::vector<std::pair<HIR::Pattern *, BaseType *> > &get_params ()\n   {\n     return params;\n   }\n \n-  std::pair<HIR::Pattern *, TyBase *> &param_at (size_t idx)\n+  std::pair<HIR::Pattern *, BaseType *> &param_at (size_t idx)\n   {\n     return params[idx];\n   }\n \n-  TyBase *get_return_type () { return type; }\n+  BaseType *get_return_type () { return type; }\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n \n private:\n-  std::vector<std::pair<HIR::Pattern *, TyBase *> > params;\n-  TyBase *type;\n+  std::vector<std::pair<HIR::Pattern *, BaseType *> > params;\n+  BaseType *type;\n };\n \n-class ArrayType : public TyBase\n+class ArrayType : public BaseType\n {\n public:\n-  ArrayType (HirId ref, size_t capacity, TyBase *type,\n+  ArrayType (HirId ref, size_t capacity, BaseType *type,\n \t     std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::ARRAY, refs), capacity (capacity),\n+    : BaseType (ref, ref, TypeKind::ARRAY, refs), capacity (capacity),\n       element_type_id (type->get_ref ())\n   {}\n \n-  ArrayType (HirId ref, HirId ty_ref, size_t capacity, TyBase *type,\n+  ArrayType (HirId ref, HirId ty_ref, size_t capacity, BaseType *type,\n \t     std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::ARRAY, refs), capacity (capacity),\n+    : BaseType (ref, ty_ref, TypeKind::ARRAY, refs), capacity (capacity),\n       element_type_id (type->get_ref ())\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n   size_t get_capacity () const { return capacity; }\n \n   HirId element_type_ref () const { return element_type_id; }\n \n-  TyBase *get_type () const;\n+  BaseType *get_type () const;\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n \n private:\n   size_t capacity;\n   HirId element_type_id;\n };\n \n-class BoolType : public TyBase\n+class BoolType : public BaseType\n {\n public:\n   BoolType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::BOOL, refs)\n+    : BaseType (ref, ref, TypeKind::BOOL, refs)\n   {}\n \n   BoolType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::BOOL, refs)\n+    : BaseType (ref, ty_ref, TypeKind::BOOL, refs)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n };\n \n-class IntType : public TyBase\n+class IntType : public BaseType\n {\n public:\n   enum IntKind\n@@ -422,29 +422,29 @@ class IntType : public TyBase\n   };\n \n   IntType (HirId ref, IntKind kind, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::INT, refs), int_kind (kind)\n+    : BaseType (ref, ref, TypeKind::INT, refs), int_kind (kind)\n   {}\n \n   IntType (HirId ref, HirId ty_ref, IntKind kind,\n \t   std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::INT, refs), int_kind (kind)\n+    : BaseType (ref, ty_ref, TypeKind::INT, refs), int_kind (kind)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n   IntKind get_kind () const { return int_kind; }\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n \n private:\n   IntKind int_kind;\n };\n \n-class UintType : public TyBase\n+class UintType : public BaseType\n {\n public:\n   enum UintKind\n@@ -457,29 +457,29 @@ class UintType : public TyBase\n   };\n \n   UintType (HirId ref, UintKind kind, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::UINT, refs), uint_kind (kind)\n+    : BaseType (ref, ref, TypeKind::UINT, refs), uint_kind (kind)\n   {}\n \n   UintType (HirId ref, HirId ty_ref, UintKind kind,\n \t    std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::UINT, refs), uint_kind (kind)\n+    : BaseType (ref, ty_ref, TypeKind::UINT, refs), uint_kind (kind)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n   UintKind get_kind () const { return uint_kind; }\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n \n private:\n   UintKind uint_kind;\n };\n \n-class FloatType : public TyBase\n+class FloatType : public BaseType\n {\n public:\n   enum FloatKind\n@@ -490,113 +490,113 @@ class FloatType : public TyBase\n \n   FloatType (HirId ref, FloatKind kind,\n \t     std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::FLOAT, refs), float_kind (kind)\n+    : BaseType (ref, ref, TypeKind::FLOAT, refs), float_kind (kind)\n   {}\n \n   FloatType (HirId ref, HirId ty_ref, FloatKind kind,\n \t     std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::FLOAT, refs), float_kind (kind)\n+    : BaseType (ref, ty_ref, TypeKind::FLOAT, refs), float_kind (kind)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n   FloatKind get_kind () const { return float_kind; }\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n \n private:\n   FloatKind float_kind;\n };\n \n-class USizeType : public TyBase\n+class USizeType : public BaseType\n {\n public:\n   USizeType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::USIZE)\n+    : BaseType (ref, ref, TypeKind::USIZE)\n   {}\n \n   USizeType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::USIZE)\n+    : BaseType (ref, ty_ref, TypeKind::USIZE)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n };\n \n-class ISizeType : public TyBase\n+class ISizeType : public BaseType\n {\n public:\n   ISizeType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::ISIZE)\n+    : BaseType (ref, ref, TypeKind::ISIZE)\n   {}\n \n   ISizeType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::ISIZE)\n+    : BaseType (ref, ty_ref, TypeKind::ISIZE)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n };\n \n-class CharType : public TyBase\n+class CharType : public BaseType\n {\n public:\n   CharType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::CHAR)\n+    : BaseType (ref, ref, TypeKind::CHAR)\n   {}\n \n   CharType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::CHAR)\n+    : BaseType (ref, ty_ref, TypeKind::CHAR)\n \n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n };\n \n-class ReferenceType : public TyBase\n+class ReferenceType : public BaseType\n {\n public:\n   ReferenceType (HirId ref, HirId base,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ref, TypeKind::REF), base (base)\n+    : BaseType (ref, ref, TypeKind::REF), base (base)\n   {}\n \n   ReferenceType (HirId ref, HirId ty_ref, HirId base,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n-    : TyBase (ref, ty_ref, TypeKind::REF), base (base)\n+    : BaseType (ref, ty_ref, TypeKind::REF), base (base)\n   {}\n \n-  const TyTy::TyBase *get_base () const;\n+  const TyTy::BaseType *get_base () const;\n \n-  TyTy::TyBase *get_base ();\n+  TyTy::BaseType *get_base ();\n \n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n \n-  TyBase *combine (TyBase *other) override;\n+  BaseType *combine (BaseType *other) override;\n \n-  TyBase *clone () final override;\n+  BaseType *clone () final override;\n \n private:\n   HirId base;"}]}