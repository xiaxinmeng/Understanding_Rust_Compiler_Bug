{"sha": "9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJjNjA3YzBlYTEyYzQ3Y2EzMTRkMWJmNWI0YTQ0YmMwN2YxN2Q3NA==", "commit": {"author": {"name": "Igor Zamyatin", "email": "igor.zamyatin@intel.com", "date": "2012-09-25T13:05:23Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-09-25T13:05:23Z"}, "message": "Update long double tests for long double size == double size\n\n2012-09-25  Igor Zamyatin  <igor.zamyatin@intel.com>\n\n\t* gcc.target/i386/20030217-1.c: Added check for\n\tlarge_long_double effective target.\n\t* gcc.target/i386/387-3.c: Likewise.\n\t* gcc.target/i386/387-4.c: Likewise.\n\t* gcc.target/i386/pr36578-1.c: Likewise.\n\t* gcc.target/i386/excess-precision-1.c: Added new code for the case\n\twhen long double size is equal double size.\n\t* gcc.target/i386/excess-precision-1.c: Likewise.\n\t* gcc.target/i386/pr36578-2.c: Likewise.\n\t* gcc.target/i386/20030217-2.c: New testcase.\n\nFrom-SVN: r191704", "tree": {"sha": "e837a5d93503ea8b6205cd25a252d3210e9990f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e837a5d93503ea8b6205cd25a252d3210e9990f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/comments", "author": {"login": "Garra1980", "id": 25365940, "node_id": "MDQ6VXNlcjI1MzY1OTQw", "avatar_url": "https://avatars.githubusercontent.com/u/25365940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Garra1980", "html_url": "https://github.com/Garra1980", "followers_url": "https://api.github.com/users/Garra1980/followers", "following_url": "https://api.github.com/users/Garra1980/following{/other_user}", "gists_url": "https://api.github.com/users/Garra1980/gists{/gist_id}", "starred_url": "https://api.github.com/users/Garra1980/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Garra1980/subscriptions", "organizations_url": "https://api.github.com/users/Garra1980/orgs", "repos_url": "https://api.github.com/users/Garra1980/repos", "events_url": "https://api.github.com/users/Garra1980/events{/privacy}", "received_events_url": "https://api.github.com/users/Garra1980/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5717e1f6488ce9b376e1f4a45787687538ec2993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5717e1f6488ce9b376e1f4a45787687538ec2993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5717e1f6488ce9b376e1f4a45787687538ec2993"}], "stats": {"total": 103, "additions": 81, "deletions": 22}, "files": [{"sha": "e5a481fdf858d72344c90b940d2883e123258266", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74", "patch": "@@ -1,3 +1,16 @@\n+2012-09-25  Igor Zamyatin  <igor.zamyatin@intel.com>\n+\n+\t* gcc.target/i386/20030217-1.c: Added check for\n+\tlarge_long_double effective target.\n+\t* gcc.target/i386/387-3.c: Likewise.\n+\t* gcc.target/i386/387-4.c: Likewise.\n+\t* gcc.target/i386/pr36578-1.c: Likewise.\n+\t* gcc.target/i386/excess-precision-1.c: Added new code for the case\n+\twhen long double size is equal double size.\n+\t* gcc.target/i386/excess-precision-1.c: Likewise.\n+\t* gcc.target/i386/pr36578-2.c: Likewise.\n+\t* gcc.target/i386/20030217-2.c: New testcase.\n+\n 2012-09-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/54676"}, {"sha": "d2b24802bab2841ae922f69c4a19800a9f7b84e2", "filename": "gcc/testsuite/gcc.target/i386/20030217-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20030217-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20030217-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20030217-1.c?ref=9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74", "patch": "@@ -2,6 +2,7 @@\n    are parsed correctly.  */\n /* { dg-do run } */\n /* { dg-options \"-std=c99\" } */\n+/* { dg-require-effective-target large_long_double } */\n \n long double d = 0x0.0000003ffffffff00000p-16357L;\n long double e = 0x0.0000003ffffffff00000p-16356L;"}, {"sha": "1b8dc8bab3ffebbc90d564e5168017aab791b221", "filename": "gcc/testsuite/gcc.target/i386/387-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-3.c?ref=9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74", "patch": "@@ -2,6 +2,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mfpmath=387 -mfancy-math-387\" } */\n /* { dg-final { scan-assembler \"fldpi\" } } */\n+/* { dg-require-effective-target large_long_double } */\n \n long double add_pi(long double x)\n {"}, {"sha": "27c48ed20ab278fec6fe548b3d142cdae7a3dbf4", "filename": "gcc/testsuite/gcc.target/i386/387-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-4.c?ref=9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mfancy-math-387\" } */\n /* { dg-final { scan-assembler \"fldpi\" } } */\n+/* { dg-require-effective-target large_long_double } */\n \n long double atanl (long double);\n "}, {"sha": "1bd3b8868bb47efa8159366b67d9c4b7ab9787e8", "filename": "gcc/testsuite/gcc.target/i386/excess-precision-1.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-1.c?ref=9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74", "patch": "@@ -38,12 +38,22 @@ test_add (void)\n     abort ();\n   if (f1 + f2 < fadd1)\n     abort ();\n-  if (d1 + d2 + d3 == dadd2)\n-    abort ();\n-  if (!(d1 + d2 + d3 > dadd2))\n-    abort ();\n-  if (!(d1 + d2 + d3 >= dadd2))\n-    abort ();\n+  if (sizeof(long double) > sizeof(double)) {\n+    if ( d1 + d2 + d3 == dadd2)\n+      abort ();\n+    if (!(d1 + d2 + d3 > dadd2))\n+      abort ();\n+    if (!(d1 + d2 + d3 >= dadd2))\n+      abort ();\n+  }\n+  else {\n+    if ( d1 + d2 + d3 != dadd2 )\n+      abort();\n+    if ( d1 + d2 + d3 < dadd2 )\n+      abort();\n+    if ( d1 + d2 + d3 > dadd2 )\n+      abort();\n+  }\n }\n \n volatile long double ldsub1 = 1.0l - 0x1.0p-30l;\n@@ -90,10 +100,18 @@ test_mul (void)\n     abort ();\n   if ((0, dbl_min * dbl_min * dbl_min) != dbl_min3)\n     abort ();\n-  if (dbl_min * dbl_min * dbl_min == 0)\n-    abort ();\n-  if ((flt_min * flt_min ? dbl_min * dbl_min * dbl_min : 0) == 0)\n-    abort ();\n+  if (sizeof(long double) > sizeof(double) ) {\n+    if (dbl_min * dbl_min * dbl_min == 0)\n+      abort ();\n+    if ((flt_min * flt_min ? dbl_min * dbl_min * dbl_min : 0) == 0)\n+      abort ();\n+  }\n+  else {\n+    if (dbl_min * dbl_min * dbl_min != 0)\n+      abort ();\n+    if ((flt_min * flt_min ? dbl_min * dbl_min * dbl_min : 1) != 0)\n+      abort ();\n+  }\n   if ((flt_min * flt_min ? : 0) == 0)\n     abort ();\n }"}, {"sha": "1fd038a87073d6bc2d6f39886818c1de1d1e3ec1", "filename": "gcc/testsuite/gcc.target/i386/excess-precision-3.c", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-3.c?ref=9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74", "patch": "@@ -15,6 +15,7 @@ volatile float f3 = 0x1.0p-60f;\n volatile double d1 = 1.0;\n volatile double d2 = 0x1.0p-30;\n volatile double d3 = 0x1.0p-60;\n+volatile double d3d = 0x1.0p-52;\n volatile float fadd1 = 1.0f + 0x1.0p-30f;\n volatile double dadd2 = 1.0 + 0x1.0p-30 + 0x1.0p-60;\n volatile double dh = 0x1.0p-24;\n@@ -35,9 +36,15 @@ test_assign (void)\n   if (d != dadd2)\n     abort ();\n   /* Verify rounding direct to float without double rounding.  */\n-  f = d1 + dh + d3;\n-  if (f != fha)\n-    abort ();\n+  if (sizeof(long double) > sizeof(double)  )  {\n+    f = d1 + dh + d3;\n+    if (f != fha)\n+      abort ();\n+  } else {\n+      f = d1 + dh + d3d;\n+      if (f != fha)\n+        abort ();\n+  }\n }\n \n void\n@@ -193,16 +200,28 @@ test_builtin (void)\n     abort ();\n   if (!__builtin_islessgreater (flt_min * flt_min, 0.0f))\n     abort ();\n-  if (!__builtin_isgreater (dbl_min * dbl_min, 0.0))\n-    abort ();\n   if (!__builtin_isgreaterequal (dbl_min * dbl_min, 0.0))\n     abort ();\n-  if (!__builtin_isless (0.0, dbl_min * dbl_min))\n-    abort ();\n-  if (__builtin_islessequal (dbl_min * dbl_min, 0.0))\n-    abort ();\n-  if (!__builtin_islessgreater (dbl_min * dbl_min, 0.0))\n-    abort ();\n+  if (sizeof(long double) > sizeof(double)  ) {\n+    if (!__builtin_isgreater (dbl_min * dbl_min, 0.0))\n+      abort ();\n+    if (!__builtin_isless (0.0, dbl_min * dbl_min))\n+      abort ();\n+    if (__builtin_islessequal (dbl_min * dbl_min, 0.0))\n+      abort ();\n+    if (!__builtin_islessgreater (dbl_min * dbl_min, 0.0))\n+      abort ();\n+  }\n+  else {\n+    if (__builtin_isgreater (dbl_min * dbl_min, 0.0))\n+      abort ();\n+    if (__builtin_isless (0.0, dbl_min * dbl_min))\n+      abort ();\n+    if (!__builtin_islessequal (dbl_min * dbl_min, 0.0))\n+      abort ();\n+    if (__builtin_islessgreater (dbl_min * dbl_min, 0.0))\n+      abort ();\n+  }\n }\n \n int"}, {"sha": "5ede23a11a8f0c17193cad67b3469409acf35ed2", "filename": "gcc/testsuite/gcc.target/i386/pr36578-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36578-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36578-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36578-1.c?ref=9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74", "patch": "@@ -2,6 +2,7 @@\n /* { dg-do run } */\n /* { dg-options \"-msse2 -mfpmath=sse\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target large_long_double } */\n \n #include \"sse2-check.h\"\n "}, {"sha": "bfde2cb0ffa6de295536a8f85af17bc50f86e1b0", "filename": "gcc/testsuite/gcc.target/i386/pr36578-2.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36578-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36578-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36578-2.c?ref=9bc607c0ea12c47ca314d1bf5b4a44bc07f17d74", "patch": "@@ -11,13 +11,18 @@ extern int printf(const char *, ...);\n \n volatile double d1 = 0x1.000001p0;\n volatile double d2 = 0x1p-54;\n+volatile double d2d = 0x1p-52;\n volatile float f = 0x1.000002p0f;\n volatile float f2;\n \n static void\n sse2_test (void)\n {\n-  f2 = (float)((long double)d1 + (long double)d2);\n+  if (sizeof(long double) > sizeof(double)  ) {\n+\tf2 = (float)((long double)d1 + (long double)d2);\n+  } else {\n+\tf2 = (float)((long double)d1 + (long double)d2d);\n+  }\n   if (f != f2)\n     abort ();\n   exit (0);"}]}