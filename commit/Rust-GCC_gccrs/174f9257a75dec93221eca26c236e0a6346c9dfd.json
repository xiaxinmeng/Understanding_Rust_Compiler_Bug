{"sha": "174f9257a75dec93221eca26c236e0a6346c9dfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc0ZjkyNTdhNzVkZWM5MzIyMWVjYTI2YzIzNmUwYTYzNDZjOWRmZA==", "commit": {"author": {"name": "Antony Polukhin", "email": "antoshkka@gmail.com", "date": "2021-08-17T12:50:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-17T15:53:19Z"}, "message": "libstdc++: Optimize std::seed_seq construction\n\nWhen std::seed_seq is constructed from random access iterators we can\ndetect the internal vector size in O(1). Reserving memory for elements\nin such cases may avoid multiple memory allocations.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/random.tcc (seed_seq::seed_seq): Reserve capacity\n\tif distance is O(1).\n\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n\tline number.\n\nCo-authored-by: Jonathan Wakely <jwakely@redhat.com>", "tree": {"sha": "6fc0349205f903bfe82210a028baea03c4ecbe2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fc0349205f903bfe82210a028baea03c4ecbe2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/174f9257a75dec93221eca26c236e0a6346c9dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174f9257a75dec93221eca26c236e0a6346c9dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/174f9257a75dec93221eca26c236e0a6346c9dfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174f9257a75dec93221eca26c236e0a6346c9dfd/comments", "author": {"login": "apolukhin", "id": 1700098, "node_id": "MDQ6VXNlcjE3MDAwOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1700098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apolukhin", "html_url": "https://github.com/apolukhin", "followers_url": "https://api.github.com/users/apolukhin/followers", "following_url": "https://api.github.com/users/apolukhin/following{/other_user}", "gists_url": "https://api.github.com/users/apolukhin/gists{/gist_id}", "starred_url": "https://api.github.com/users/apolukhin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apolukhin/subscriptions", "organizations_url": "https://api.github.com/users/apolukhin/orgs", "repos_url": "https://api.github.com/users/apolukhin/repos", "events_url": "https://api.github.com/users/apolukhin/events{/privacy}", "received_events_url": "https://api.github.com/users/apolukhin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "897a15f355632bdc31871554892eca5512b3c370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897a15f355632bdc31871554892eca5512b3c370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/897a15f355632bdc31871554892eca5512b3c370"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "023fded7f5d9045b225b9325a0c7065d292ccc46", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f9257a75dec93221eca26c236e0a6346c9dfd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f9257a75dec93221eca26c236e0a6346c9dfd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=174f9257a75dec93221eca26c236e0a6346c9dfd", "patch": "@@ -3240,6 +3240,7 @@ namespace __detail\n   template<typename _IntType, typename>\n     seed_seq::seed_seq(std::initializer_list<_IntType> __il)\n     {\n+      _M_v.reserve(__il.size());\n       for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter)\n \t_M_v.push_back(__detail::__mod<result_type,\n \t\t       __detail::_Shift<result_type, 32>::__value>(*__iter));\n@@ -3248,6 +3249,9 @@ namespace __detail\n   template<typename _InputIterator>\n     seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end)\n     {\n+      if _GLIBCXX17_CONSTEXPR (__is_random_access_iter<_InputIterator>::value)\n+\t_M_v.reserve(std::distance(__begin, __end));\n+\n       for (_InputIterator __iter = __begin; __iter != __end; ++__iter)\n \t_M_v.push_back(__detail::__mod<result_type,\n \t\t       __detail::_Shift<result_type, 32>::__value>(*__iter));"}, {"sha": "3ab9c44232e3ebb1f134ca6b4a825ce7deebb496", "filename": "libstdc++-v3/testsuite/26_numerics/random/pr60037-neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f9257a75dec93221eca26c236e0a6346c9dfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f9257a75dec93221eca26c236e0a6346c9dfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc?ref=174f9257a75dec93221eca26c236e0a6346c9dfd", "patch": "@@ -12,4 +12,4 @@ auto x = std::generate_canonical<std::size_t,\n \n // { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 169 }\n \n-// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3352 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3356 }"}]}