{"sha": "533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "node_id": "C_kwDOANBUbNoAKDUzM2UxZWYzY2E0ODFiMDNiNjhiM2U3YzZiY2M3Y2UwZDE0MTMxYmI", "commit": {"author": {"name": "TieWay59", "email": "tieway59@foxmail.com", "date": "2023-05-13T07:49:42Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-06-13T08:12:29Z"}, "message": "Remove obsolete error diagnostic\n\nfixes https://github.com/Rust-GCC/gccrs/issues/2064\n\nRemove every `{ dg-error \"failed to type resolve expression\" }`\nannotation that causes a failure when running the testsuite.\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-expr.cc: Remove obsolete error diagnostic\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/break1.rs: remove dg-error \"failed to type resolve expression\"\n\t* rust/compile/break2.rs: Likewise\n\t* rust/compile/cfg2.rs: Likewise\n\t* rust/compile/continue1.rs: Likewise\n\t* rust/compile/generics4.rs: Likewise\n\t* rust/compile/generics6.rs: Likewise\n\t* rust/compile/generics7.rs: Likewise\n\t* rust/compile/issue-2029.rs: Likewise\n\t* rust/compile/issue-2139.rs: Likewise\n\t* rust/compile/issue-2190-1.rs: Likewise\n\t* rust/compile/issue-925.rs: Likewise\n\t* rust/compile/method1.rs: Likewise\n\t* rust/compile/shadow1.rs: Likewise\n\t* rust/compile/type-bindings1.rs: Likewise\n\t* rust/compile/unary_negation.rs: Likewise\n\t* rust/compile/unary_not.rs: Likewise\n\t* rust/compile/unconstrained_type_param.rs: Likewise\n\t* rust/compile/usize1.rs: Likewise\n\nSigned-off-by: Taiwei Wu <tieway59@foxmail.com>", "tree": {"sha": "117126e1cdf6de8ff8546fbc93b07bf8d243e498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/117126e1cdf6de8ff8546fbc93b07bf8d243e498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/comments", "author": {"login": "TieWay59", "id": 40034603, "node_id": "MDQ6VXNlcjQwMDM0NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/40034603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TieWay59", "html_url": "https://github.com/TieWay59", "followers_url": "https://api.github.com/users/TieWay59/followers", "following_url": "https://api.github.com/users/TieWay59/following{/other_user}", "gists_url": "https://api.github.com/users/TieWay59/gists{/gist_id}", "starred_url": "https://api.github.com/users/TieWay59/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TieWay59/subscriptions", "organizations_url": "https://api.github.com/users/TieWay59/orgs", "repos_url": "https://api.github.com/users/TieWay59/repos", "events_url": "https://api.github.com/users/TieWay59/events{/privacy}", "received_events_url": "https://api.github.com/users/TieWay59/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eedab85e02b8bd5841a36c0600cf397a255a718e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedab85e02b8bd5841a36c0600cf397a255a718e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eedab85e02b8bd5841a36c0600cf397a255a718e"}], "stats": {"total": 37, "additions": 4, "deletions": 33}, "files": [{"sha": "1db4cff420b7d09156d4334a67d6bb9f6db6d6d9", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -41,13 +41,7 @@ TypeCheckExpr::Resolve (HIR::Expr *expr)\n   expr->accept_vis (resolver);\n \n   if (resolver.infered == nullptr)\n-    {\n-      // FIXME\n-      // this is an internal error message for debugging and should be removed\n-      // at some point\n-      rust_error_at (expr->get_locus (), \"failed to type resolve expression\");\n-      return new TyTy::ErrorType (expr->get_mappings ().get_hirid ());\n-    }\n+    return new TyTy::ErrorType (expr->get_mappings ().get_hirid ());\n \n   auto ref = expr->get_mappings ().get_hirid ();\n   resolver.infered->set_ref (ref);"}, {"sha": "e33077f6e2a4ac45df8c1fbc15f3cb14c7af7520", "filename": "gcc/testsuite/rust/compile/break1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak1.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     let a;\n     a = 1;\n     break a; // { dg-error \"cannot 'break' outside of a loop\" }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "7d580316932976cf48b1034f29a9bc3448640fe3", "filename": "gcc/testsuite/rust/compile/break2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak2.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -6,7 +6,6 @@ fn main() {\n     while b > 10 {\n         if (b == 2) {\n             break b;  // { dg-error \"can only break with a value inside 'loop'\" }\n-            // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n         }\n         c = a + b;\n         a = b;"}, {"sha": "e4c90d96dd492c24002e8750bf66687ca0220b9c", "filename": "gcc/testsuite/rust/compile/cfg2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg2.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -9,5 +9,4 @@ fn main() {\n     let a = Foo;\n     a.test();\n     // { dg-error \"failed to resolve method for .test.\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "f1b58f69271c6c4de2a2e0d8c788b5a70ac0984b", "filename": "gcc/testsuite/rust/compile/continue1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcontinue1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcontinue1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcontinue1.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -4,7 +4,6 @@ fn main() {\n \n     let _fib = {\n         continue; // { dg-error \"cannot 'continue' outside of a loop\" }\n-        // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n         123\n     };\n }"}, {"sha": "e8fe23cd2688ae34e8e48801c74a6f4d7a9243be", "filename": "gcc/testsuite/rust/compile/generics4.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics4.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -3,14 +3,10 @@ struct GenericStruct<T>(T, usize);\n fn main() {\n     let a2;\n     a2 = GenericStruct::<i8, i32>(1, 456); // { dg-error \"generic item takes at most 1 type arguments but 2 were supplied\" }\n-                                           // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n-                                           // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-2 }\n-                                           // { duplicate _dg-error {failed to type resolve expression} \"\" { target *-*-* } .-3 }\n+                                           // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-1 }\n \n     let b2: i32 = a2.0;\n     // { dg-error {Expected Tuple or ADT got: T\\?} \"\" { target *-*-* } .-1 }\n-    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-2 }\n     let c2: usize = a2.1;\n     // { dg-error {Expected Tuple or ADT got: T\\?} \"\" { target *-*-* } .-1 }\n-    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-2 }\n }"}, {"sha": "ad5b682d0ba732148d5616e6f0d2f57510ce41b8", "filename": "gcc/testsuite/rust/compile/generics6.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics6.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -24,8 +24,6 @@ impl Foo<f32> {\n \n fn main() {\n     let a: i32 = Foo::test(); // { dg-error \"multiple applicable items in scope for: test\" }\n-    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n-    // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-2 }\n-    // { duplicate _dg-error {failed to type resolve expression} \"\" { target *-*-* } .-3 }\n+    // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-1 }\n }\n "}, {"sha": "aeb91a6fb419808afada1bd94e8f1dd97ea19ce3", "filename": "gcc/testsuite/rust/compile/generics7.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics7.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -24,5 +24,4 @@ fn main() {\n     let a = Foo { a: 123 };\n     a.bar();\n     // { dg-error \"multiple candidates found for method .bar.\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "78569631eb1167e4849fe6be9d4029f23e47e50d", "filename": "gcc/testsuite/rust/compile/issue-2029.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2029.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2029.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2029.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -5,7 +5,6 @@ fn foo(_: usize) -> Foo {\n \n fn main() {\n     match Foo(true) {\n-        // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n         foo(x)\n         // { dg-error \"expected tuple struct/variant, found\" \"\" { target *-*-* } .-1 }\n         => ()"}, {"sha": "77bf78d13a7fe805fc2709719d0d778624b28477", "filename": "gcc/testsuite/rust/compile/issue-2139.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2139.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2139.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2139.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -12,5 +12,4 @@ fn main() {\n     let a: u16 = 123;\n     a.foo();\n     // { dg-error \"failed to resolve method for .foo.\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "3e43e54104970cd22cb916806a56b44da2a61087", "filename": "gcc/testsuite/rust/compile/issue-2190-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2190-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2190-1.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -7,5 +7,4 @@ trait Deref {\n fn foo<T: Deref<Target = i32>>(t: &T) -> i32 {\n     t.max(2)\n     // { dg-error \"failed to resolve method for .max.\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "930b192c3d309fb817f8f7181cfb264ffd97a7dc", "filename": "gcc/testsuite/rust/compile/issue-925.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-925.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-925.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-925.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -19,5 +19,4 @@ fn test() {\n     let a = S;\n     a.foo();\n     // { dg-error \"multiple candidates found for method .foo.\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "d371bf271f81677558b4c15b6e45bb3ac0a15fb8", "filename": "gcc/testsuite/rust/compile/method1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod1.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -9,5 +9,4 @@ pub fn main() {\n \n     a.test();\n     // { dg-error \"failed to resolve method for .test.\" \"\" { target *-*-* } .-1 }\n-    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-2 }\n }"}, {"sha": "cef972adf3391e9eaf0f2ba100968a446ae5920f", "filename": "gcc/testsuite/rust/compile/shadow1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fshadow1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fshadow1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fshadow1.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -3,5 +3,4 @@ fn main() {\n     let mut x;\n     x = true;\n     x = x + 2; // { dg-error \"cannot apply this operator to types bool and <integer>\"  }\n-               // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n }"}, {"sha": "dc0e274fdd5f6204efff32ea141c335fe03f1104", "filename": "gcc/testsuite/rust/compile/type-bindings1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftype-bindings1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftype-bindings1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftype-bindings1.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -4,7 +4,5 @@ fn main() {\n     let a;\n     a = Foo::<A = i32, B = f32>(123f32);\n     // { dg-error \"associated type bindings are not allowed here\" \"\" { target *-*-* } .-1 }\n-    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-2 }\n-    // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-3 }\n-    // { duplicate _dg-error {failed to type resolve expression} \"\" { target *-*-* } .-4 }\n+    // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-2 }\n }"}, {"sha": "bb59d19eed862b2d832ba4cb2c20f8e885e1abd6", "filename": "gcc/testsuite/rust/compile/unary_negation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_negation.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_negation.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_negation.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -5,5 +5,4 @@ fn main() {\n     let d: i32 = !3;\n \n     let e: f32 = -true; // // { dg-error \"cannot apply unary - to bool\" }\n-    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n }"}, {"sha": "7e4de3dc0303056365469cce2b6df0c7ebb11d08", "filename": "gcc/testsuite/rust/compile/unary_not.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_not.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_not.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_not.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -5,5 +5,4 @@ fn main() {\n     let d: i32 = !3;\n \n     let e: f32 = !5f32; // { dg-error \"cannot apply unary '!' to f32\" }\n-    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n }"}, {"sha": "a510332f167c6762972b3b8a779565e7ad5bbfe5", "filename": "gcc/testsuite/rust/compile/unconstrained_type_param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Funconstrained_type_param.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Funconstrained_type_param.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funconstrained_type_param.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -11,5 +11,4 @@ fn main() {\n     let a = Foo::test();\n     // { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n     // { dg-error \"Failed to resolve expression of function call\" \"\" { target *-*-* } .-2 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-3 }\n }"}, {"sha": "36cb99b5574a759f6e75000e593985271d43d9db", "filename": "gcc/testsuite/rust/compile/usize1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fusize1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fusize1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fusize1.rs?ref=533e1ef3ca481b03b68b3e7c6bcc7ce0d14131bb", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     let a = [1, 2, 3];\n     let b: u32 = 1;\n     let c = a[b]; // { dg-error \"the type ...integer..CAPACITY.. cannot be indexed by .u32.\" }\n-                  // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n }"}]}