{"sha": "60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBhZjAwNWY0YmJmYzBjMDNmYjNhMDgxZDRkYTgzNWQ0YWExYWI1ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-01-13T18:57:45Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-01-13T18:57:45Z"}, "message": "ifstream_extract_float.cc: New.\n\n\n2004-01-13  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/performance/ifstream_extract_float.cc: New.\n\t* testsuite/performance/ofstream_insert_float.cc: Float generation\n\tmatches above.\n\n\t* 20_util/auto_ptr.cc, auto_ptr_neg.cc: Break into...\n\t* 20_util/auto_ptr/1.cc: ...this.\n\t* 20_util/auto_ptr/2.cc: Same.\n\t* 20_util/auto_ptr/3.cc: Same.\n\t* 20_util/auto_ptr/3946.cc: Same.\n\t* 20_util/auto_ptr/4.cc: Same.\n\t* 20_util/auto_ptr/5.cc: Same.\n\t* 20_util/auto_ptr/6.cc: Same.\n\t* 20_util/auto_ptr/7.cc: Same.\n\t* 20_util/auto_ptr/assign_neg.cc\n\t* 20_util/pairs.cc: Break into...\n\t* 20_util/pair/1.cc: ...this.\n\t* 20_util/pair/2.cc: Same.\n\t* 20_util/pair/3.cc: Same.\n\t* 20_util/pair/4.cc: Same.\n\nFrom-SVN: r75811", "tree": {"sha": "d69d9477ee35d4917366af928132e9854d89bb65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d69d9477ee35d4917366af928132e9854d89bb65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/comments", "author": null, "committer": null, "parents": [{"sha": "d8ef7deccb6f1b263de9820f3eefb7a9c3d03a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ef7deccb6f1b263de9820f3eefb7a9c3d03a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ef7deccb6f1b263de9820f3eefb7a9c3d03a5f"}], "stats": {"total": 1297, "additions": 956, "deletions": 341}, "files": [{"sha": "642263d2ea690e285813cf720ca5af5442da8976", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -1,3 +1,25 @@\n+2004-01-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/performance/ifstream_extract_float.cc: New.\n+\t* testsuite/performance/ofstream_insert_float.cc: Float generation\n+\tmatches above.\n+\n+\t* 20_util/auto_ptr.cc, auto_ptr_neg.cc: Break into...\n+\t* 20_util/auto_ptr/1.cc: ...this.\n+\t* 20_util/auto_ptr/2.cc: Same.\n+\t* 20_util/auto_ptr/3.cc: Same.\n+\t* 20_util/auto_ptr/3946.cc: Same.\n+\t* 20_util/auto_ptr/4.cc: Same.\n+\t* 20_util/auto_ptr/5.cc: Same.\n+\t* 20_util/auto_ptr/6.cc: Same.\n+\t* 20_util/auto_ptr/7.cc: Same.\n+\t* 20_util/auto_ptr/assign_neg.cc\n+\t* 20_util/pairs.cc: Break into...\n+\t* 20_util/pair/1.cc: ...this.\n+\t* 20_util/pair/2.cc: Same.\n+\t* 20_util/pair/3.cc: Same.\n+\t* 20_util/pair/4.cc: Same.\n+\n 2004-01-13  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (num_get::do_get(void*&)):"}, {"sha": "110d4b2d4bf055a20838979be58fc48a5faa8f6b", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr.cc", "status": "removed", "additions": 0, "deletions": 277, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ef7deccb6f1b263de9820f3eefb7a9c3d03a5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ef7deccb6f1b263de9820f3eefb7a9c3d03a5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr.cc?ref=d8ef7deccb6f1b263de9820f3eefb7a9c3d03a5f", "patch": "@@ -1,277 +0,0 @@\n-// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 20.4.5 Template class auto_ptr [lib.auto.ptr]\n-\n-#include <memory>\n-#include <testsuite_hooks.h>\n-\n-struct A\n-{\n-  A() { ++ctor_count; }\n-  virtual ~A() { ++dtor_count; }\n-  static long ctor_count;\n-  static long dtor_count;\n-};\n-long A::ctor_count = 0;\n-long A::dtor_count = 0;\n-\n-struct B : A\n-{\n-  B() { ++ctor_count; }\n-  virtual ~B() { ++dtor_count; }\n-  static long ctor_count;\n-  static long dtor_count;\n-};\n-long B::ctor_count = 0;\n-long B::dtor_count = 0;\n-\n-\n-struct reset_count_struct\n-{\n-  ~reset_count_struct()\n-  {\n-    A::ctor_count = 0;\n-    A::dtor_count = 0;\n-    B::ctor_count = 0;\n-    B::dtor_count = 0;\n-  }\n-};\n-\n-\n-// 20.4.5.1 auto_ptr constructors [lib.auto.ptr.cons]\n-\n-// Construction from pointer\n-int\n-test01()\n-{\n-  reset_count_struct __attribute__((unused)) reset;\n-  bool test __attribute__((unused)) = true;\n-\n-  std::auto_ptr<A> A_default;\n-  VERIFY( A_default.get() == 0 );\n-  VERIFY( A::ctor_count == 0 );\n-  VERIFY( A::dtor_count == 0 );\n-  VERIFY( B::ctor_count == 0 );\n-  VERIFY( B::dtor_count == 0 );\n-\n-  std::auto_ptr<A> A_from_A(new A);\n-  VERIFY( A_from_A.get() != 0 );\n-  VERIFY( A::ctor_count == 1 );\n-  VERIFY( A::dtor_count == 0 );\n-  VERIFY( B::ctor_count == 0 );\n-  VERIFY( B::dtor_count == 0 );\n-\n-  std::auto_ptr<A> A_from_B(new B);\n-  VERIFY( A_from_B.get() != 0 );\n-  VERIFY( A::ctor_count == 2 );\n-  VERIFY( A::dtor_count == 0 );\n-  VERIFY( B::ctor_count == 1 );\n-  VERIFY( B::dtor_count == 0 );\n-\n-  return 0;\n-}\n-\n-// Construction from std::auto_ptr\n-int\n-test02()\n-{\n-  reset_count_struct __attribute__((unused)) reset;\n-  bool test __attribute__((unused)) = true;\n-\n-  std::auto_ptr<A> A_from_A(new A);\n-  std::auto_ptr<B> B_from_B(new B);\n-\n-  std::auto_ptr<A> A_from_ptr_A(A_from_A);\n-  std::auto_ptr<A> A_from_ptr_B(B_from_B);\n-  VERIFY( A_from_A.get() == 0 );\n-  VERIFY( B_from_B.get() == 0 );\n-  VERIFY( A_from_ptr_A.get() != 0 );\n-  VERIFY( A_from_ptr_B.get() != 0 );\n-  VERIFY( A::ctor_count == 2 );\n-  VERIFY( A::dtor_count == 0 );\n-  VERIFY( B::ctor_count == 1 );\n-  VERIFY( B::dtor_count == 0 );\n-\n-  return 0;\n-}\n-\n-// Assignment from std::auto_ptr\n-int\n-test03()\n-{\n-  reset_count_struct __attribute__((unused)) reset;\n-  bool test __attribute__((unused)) = true;\n-\n-  std::auto_ptr<A> A_from_ptr_A;\n-  std::auto_ptr<A> A_from_ptr_B;\n-  std::auto_ptr<A> A_from_A(new A);\n-  std::auto_ptr<B> B_from_B(new B);\n-\n-  A_from_ptr_A = A_from_A;\n-  A_from_ptr_B = B_from_B;\n-  VERIFY( A_from_A.get() == 0 );\n-  VERIFY( B_from_B.get() == 0 );\n-  VERIFY( A_from_ptr_A.get() != 0 );\n-  VERIFY( A_from_ptr_B.get() != 0 );\n-  VERIFY( A::ctor_count == 2 );\n-  VERIFY( A::dtor_count == 0 );\n-  VERIFY( B::ctor_count == 1 );\n-  VERIFY( B::dtor_count == 0 );\n-\n-  return 0;\n-}\n-\n-// Destruction\n-int\n-test04()\n-{\n-  reset_count_struct __attribute__((unused)) reset;\n-  bool test __attribute__((unused)) = true;\n-\n-  {/*lifetine scope*/\n-    std::auto_ptr<A> A_from_A(new A);\n-    std::auto_ptr<A> A_from_B(new B);\n-    std::auto_ptr<B> B_from_B(new B);\n-  }/*destructors called here*/\n-\n-  VERIFY( A::ctor_count == 3 );\n-  VERIFY( A::dtor_count == 3 );\n-  VERIFY( B::ctor_count == 2 );\n-  VERIFY( B::dtor_count == 2 );\n-\n-  return 0;\n-}\n-\n-// Class member construction/destruction\n-template <typename T>\n-class pimpl\n-{\n-public:\n-  pimpl() : p_impl(new T) {}\n-private:\n-  std::auto_ptr<T> p_impl;\n-};\n-\n-int \n-test05()\n-{\n-  bool test __attribute__((unused)) = true;\n-  reset_count_struct __attribute__((unused)) reset;\n-\n-  pimpl<A>();\n-  pimpl<B>();\n-  VERIFY( A::ctor_count == 2 );\n-  VERIFY( A::dtor_count == 2 );\n-  VERIFY( B::ctor_count == 1 );\n-  VERIFY( B::dtor_count == 1 );\n-  return 0;\n-}\n-\n-\n-// 20.4.5.2 auto_ptr members [lib.auto.ptr.members]\n-\n-// Member access\n-int\n-test06()\n-{\n-  reset_count_struct __attribute__((unused)) reset;\n-  bool test __attribute__((unused)) = true;\n-\n-  std::auto_ptr<A> A_from_A(new A);\n-  std::auto_ptr<A> A_from_A_ptr(A_from_A.release());\n-  VERIFY( A_from_A.get() == 0 );\n-  VERIFY( A_from_A_ptr.get() != 0 );\n-  VERIFY( A_from_A_ptr->ctor_count == 1 );\n-  VERIFY( (*A_from_A_ptr).dtor_count == 0 );\n-\n-  A* A_ptr = A_from_A_ptr.get();\n-\n-  A_from_A_ptr.reset(A_ptr);\n-  VERIFY( A_from_A_ptr.get() == A_ptr );\n-  VERIFY( A_from_A_ptr->ctor_count == 1 );\n-  VERIFY( (*A_from_A_ptr).dtor_count == 0 );\n-\n-  A_from_A_ptr.reset(new A);\n-  VERIFY( A_from_A_ptr.get() != A_ptr );\n-  VERIFY( A_from_A_ptr->ctor_count == 2 );\n-  VERIFY( (*A_from_A_ptr).dtor_count == 1 );\n-  return 0;\n-}\n-\n-\n-// 20.4.5.3 auto_ptr conversions [lib.auto.ptr.conv]\n-\n-// Parameters and return values\n-template <typename T>\n-static std::auto_ptr<T> source()\n-{\n-  return std::auto_ptr<T>(new T);\n-}\n-\n-template <typename T>\n-static void drain(std::auto_ptr<T>)\n-{}\n-\n-int\n-test07()\n-{\n-  bool test __attribute__((unused)) = true;\n-  reset_count_struct __attribute__((unused)) reset;\n-\n-  drain(source<A>());\n-  // The resolution of core issue 84, now a DR, breaks this call.\n-  // drain<A>(source<B>());\n-  drain(source<B>());\n-  VERIFY( A::ctor_count == 2 );\n-  VERIFY( A::dtor_count == 2 );\n-  VERIFY( B::ctor_count == 1 );\n-  VERIFY( B::dtor_count == 1 );\n-  return 0;\n-}\n-\n-// libstdc++/3946\n-// http://gcc.gnu.org/ml/libstdc++/2002-07/msg00024.html\n-struct Base { };\n-struct Derived : public Base { };\n-\n-std::auto_ptr<Derived> \n-conversiontest08() { return std::auto_ptr<Derived>(new Derived); }\n-\n-void\n-test08()\n-{\n-  std::auto_ptr<Base> ptr;\n-  ptr = conversiontest08();\n-}\n-\n-\n-int \n-main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-  test06();\n-  test07();\n-  test08();\n-\n-  return 0;\n-}"}, {"sha": "8e150b0187ce002595817e3fc1d685d72a99eb6e", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr/1.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F1.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -0,0 +1,95 @@\n+// Copyright (C) 2000, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.5 Template class auto_ptr [lib.auto.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A() { ++ctor_count; }\n+  virtual ~A() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long A::ctor_count = 0;\n+long A::dtor_count = 0;\n+\n+struct B : A\n+{\n+  B() { ++ctor_count; }\n+  virtual ~B() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long B::ctor_count = 0;\n+long B::dtor_count = 0;\n+\n+\n+struct reset_count_struct\n+{\n+  ~reset_count_struct()\n+  {\n+    A::ctor_count = 0;\n+    A::dtor_count = 0;\n+    B::ctor_count = 0;\n+    B::dtor_count = 0;\n+  }\n+};\n+\n+\n+// 20.4.5.1 auto_ptr constructors [lib.auto.ptr.cons]\n+\n+// Construction from pointer\n+int\n+test01()\n+{\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n+\n+  std::auto_ptr<A> A_default;\n+  VERIFY( A_default.get() == 0 );\n+  VERIFY( A::ctor_count == 0 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 0 );\n+  VERIFY( B::dtor_count == 0 );\n+\n+  std::auto_ptr<A> A_from_A(new A);\n+  VERIFY( A_from_A.get() != 0 );\n+  VERIFY( A::ctor_count == 1 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 0 );\n+  VERIFY( B::dtor_count == 0 );\n+\n+  std::auto_ptr<A> A_from_B(new B);\n+  VERIFY( A_from_B.get() != 0 );\n+  VERIFY( A::ctor_count == 2 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 1 );\n+  VERIFY( B::dtor_count == 0 );\n+\n+  return 0;\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6ce31d1fe88c3fa1d2070b8f11791bf91cd1fc09", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr/2.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F2.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2000, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.5 Template class auto_ptr [lib.auto.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A() { ++ctor_count; }\n+  virtual ~A() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long A::ctor_count = 0;\n+long A::dtor_count = 0;\n+\n+struct B : A\n+{\n+  B() { ++ctor_count; }\n+  virtual ~B() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long B::ctor_count = 0;\n+long B::dtor_count = 0;\n+\n+\n+struct reset_count_struct\n+{\n+  ~reset_count_struct()\n+  {\n+    A::ctor_count = 0;\n+    A::dtor_count = 0;\n+    B::ctor_count = 0;\n+    B::dtor_count = 0;\n+  }\n+};\n+\n+// Construction from std::auto_ptr\n+int\n+test02()\n+{\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n+\n+  std::auto_ptr<A> A_from_A(new A);\n+  std::auto_ptr<B> B_from_B(new B);\n+\n+  std::auto_ptr<A> A_from_ptr_A(A_from_A);\n+  std::auto_ptr<A> A_from_ptr_B(B_from_B);\n+  VERIFY( A_from_A.get() == 0 );\n+  VERIFY( B_from_B.get() == 0 );\n+  VERIFY( A_from_ptr_A.get() != 0 );\n+  VERIFY( A_from_ptr_B.get() != 0 );\n+  VERIFY( A::ctor_count == 2 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 1 );\n+  VERIFY( B::dtor_count == 0 );\n+\n+  return 0;\n+}\n+\n+int \n+main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "8090d277783437912643912b6c5742e8628a4d1c", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr/3.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F3.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -0,0 +1,87 @@\n+// Copyright (C) 2000, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.5 Template class auto_ptr [lib.auto.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A() { ++ctor_count; }\n+  virtual ~A() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long A::ctor_count = 0;\n+long A::dtor_count = 0;\n+\n+struct B : A\n+{\n+  B() { ++ctor_count; }\n+  virtual ~B() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long B::ctor_count = 0;\n+long B::dtor_count = 0;\n+\n+\n+struct reset_count_struct\n+{\n+  ~reset_count_struct()\n+  {\n+    A::ctor_count = 0;\n+    A::dtor_count = 0;\n+    B::ctor_count = 0;\n+    B::dtor_count = 0;\n+  }\n+};\n+\n+// Assignment from std::auto_ptr\n+int\n+test03()\n+{\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n+\n+  std::auto_ptr<A> A_from_ptr_A;\n+  std::auto_ptr<A> A_from_ptr_B;\n+  std::auto_ptr<A> A_from_A(new A);\n+  std::auto_ptr<B> B_from_B(new B);\n+\n+  A_from_ptr_A = A_from_A;\n+  A_from_ptr_B = B_from_B;\n+  VERIFY( A_from_A.get() == 0 );\n+  VERIFY( B_from_B.get() == 0 );\n+  VERIFY( A_from_ptr_A.get() != 0 );\n+  VERIFY( A_from_ptr_B.get() != 0 );\n+  VERIFY( A::ctor_count == 2 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 1 );\n+  VERIFY( B::dtor_count == 0 );\n+\n+  return 0;\n+}\n+\n+int \n+main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "191ba6f9306607d99ae610263729794f9e633626", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr/3946.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F3946.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F3946.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F3946.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2000, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.5 Template class auto_ptr [lib.auto.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3946\n+// http://gcc.gnu.org/ml/libstdc++/2002-07/msg00024.html\n+struct Base { };\n+struct Derived : public Base { };\n+\n+std::auto_ptr<Derived> \n+conversiontest08() { return std::auto_ptr<Derived>(new Derived); }\n+\n+void\n+test08()\n+{\n+  std::auto_ptr<Base> ptr;\n+  ptr = conversiontest08();\n+}\n+\n+\n+int \n+main()\n+{\n+  test08();\n+  return 0;\n+}"}, {"sha": "18148005573259d33af72901657e5860bf8669ce", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr/4.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F4.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -0,0 +1,83 @@\n+// Copyright (C) 2000, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.5 Template class auto_ptr [lib.auto.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A() { ++ctor_count; }\n+  virtual ~A() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long A::ctor_count = 0;\n+long A::dtor_count = 0;\n+\n+struct B : A\n+{\n+  B() { ++ctor_count; }\n+  virtual ~B() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long B::ctor_count = 0;\n+long B::dtor_count = 0;\n+\n+\n+struct reset_count_struct\n+{\n+  ~reset_count_struct()\n+  {\n+    A::ctor_count = 0;\n+    A::dtor_count = 0;\n+    B::ctor_count = 0;\n+    B::dtor_count = 0;\n+  }\n+};\n+\n+\n+// Destruction\n+int\n+test04()\n+{\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n+\n+  {/*lifetine scope*/\n+    std::auto_ptr<A> A_from_A(new A);\n+    std::auto_ptr<A> A_from_B(new B);\n+    std::auto_ptr<B> B_from_B(new B);\n+  }/*destructors called here*/\n+\n+  VERIFY( A::ctor_count == 3 );\n+  VERIFY( A::dtor_count == 3 );\n+  VERIFY( B::ctor_count == 2 );\n+  VERIFY( B::dtor_count == 2 );\n+\n+  return 0;\n+}\n+\n+int \n+main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "77969816496cfc14cf985fb3d9517a1a684b1d92", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr/5.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F5.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -0,0 +1,87 @@\n+// Copyright (C) 2000, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.5 Template class auto_ptr [lib.auto.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A() { ++ctor_count; }\n+  virtual ~A() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long A::ctor_count = 0;\n+long A::dtor_count = 0;\n+\n+struct B : A\n+{\n+  B() { ++ctor_count; }\n+  virtual ~B() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long B::ctor_count = 0;\n+long B::dtor_count = 0;\n+\n+\n+struct reset_count_struct\n+{\n+  ~reset_count_struct()\n+  {\n+    A::ctor_count = 0;\n+    A::dtor_count = 0;\n+    B::ctor_count = 0;\n+    B::dtor_count = 0;\n+  }\n+};\n+\n+\n+// Class member construction/destruction\n+template <typename T>\n+class pimpl\n+{\n+public:\n+  pimpl() : p_impl(new T) {}\n+private:\n+  std::auto_ptr<T> p_impl;\n+};\n+\n+int \n+test05()\n+{\n+  bool test __attribute__((unused)) = true;\n+  reset_count_struct __attribute__((unused)) reset;\n+\n+  pimpl<A>();\n+  pimpl<B>();\n+  VERIFY( A::ctor_count == 2 );\n+  VERIFY( A::dtor_count == 2 );\n+  VERIFY( B::ctor_count == 1 );\n+  VERIFY( B::dtor_count == 1 );\n+  return 0;\n+}\n+\n+int \n+main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "e4e13d9d6b0d7b630ba69d02c4d439066f992de6", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr/6.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F6.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -0,0 +1,91 @@\n+// Copyright (C) 2000, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.5 Template class auto_ptr [lib.auto.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A() { ++ctor_count; }\n+  virtual ~A() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long A::ctor_count = 0;\n+long A::dtor_count = 0;\n+\n+struct B : A\n+{\n+  B() { ++ctor_count; }\n+  virtual ~B() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long B::ctor_count = 0;\n+long B::dtor_count = 0;\n+\n+\n+struct reset_count_struct\n+{\n+  ~reset_count_struct()\n+  {\n+    A::ctor_count = 0;\n+    A::dtor_count = 0;\n+    B::ctor_count = 0;\n+    B::dtor_count = 0;\n+  }\n+};\n+\n+// 20.4.5.2 auto_ptr members [lib.auto.ptr.members]\n+\n+// Member access\n+int\n+test06()\n+{\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n+\n+  std::auto_ptr<A> A_from_A(new A);\n+  std::auto_ptr<A> A_from_A_ptr(A_from_A.release());\n+  VERIFY( A_from_A.get() == 0 );\n+  VERIFY( A_from_A_ptr.get() != 0 );\n+  VERIFY( A_from_A_ptr->ctor_count == 1 );\n+  VERIFY( (*A_from_A_ptr).dtor_count == 0 );\n+\n+  A* A_ptr = A_from_A_ptr.get();\n+\n+  A_from_A_ptr.reset(A_ptr);\n+  VERIFY( A_from_A_ptr.get() == A_ptr );\n+  VERIFY( A_from_A_ptr->ctor_count == 1 );\n+  VERIFY( (*A_from_A_ptr).dtor_count == 0 );\n+\n+  A_from_A_ptr.reset(new A);\n+  VERIFY( A_from_A_ptr.get() != A_ptr );\n+  VERIFY( A_from_A_ptr->ctor_count == 2 );\n+  VERIFY( (*A_from_A_ptr).dtor_count == 1 );\n+  return 0;\n+}\n+\n+int \n+main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "a77ba51cb584b3d4b8e966b2aee520d11985807c", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr/7.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2F7.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -0,0 +1,91 @@\n+// Copyright (C) 2000, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.5 Template class auto_ptr [lib.auto.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A() { ++ctor_count; }\n+  virtual ~A() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long A::ctor_count = 0;\n+long A::dtor_count = 0;\n+\n+struct B : A\n+{\n+  B() { ++ctor_count; }\n+  virtual ~B() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long B::ctor_count = 0;\n+long B::dtor_count = 0;\n+\n+\n+struct reset_count_struct\n+{\n+  ~reset_count_struct()\n+  {\n+    A::ctor_count = 0;\n+    A::dtor_count = 0;\n+    B::ctor_count = 0;\n+    B::dtor_count = 0;\n+  }\n+};\n+\n+// 20.4.5.3 auto_ptr conversions [lib.auto.ptr.conv]\n+\n+// Parameters and return values\n+template <typename T>\n+static std::auto_ptr<T> source()\n+{\n+  return std::auto_ptr<T>(new T);\n+}\n+\n+template <typename T>\n+static void drain(std::auto_ptr<T>)\n+{}\n+\n+int\n+test07()\n+{\n+  bool test __attribute__((unused)) = true;\n+  reset_count_struct __attribute__((unused)) reset;\n+\n+  drain(source<A>());\n+  // The resolution of core issue 84, now a DR, breaks this call.\n+  // drain<A>(source<B>());\n+  drain(source<B>());\n+  VERIFY( A::ctor_count == 2 );\n+  VERIFY( A::dtor_count == 2 );\n+  VERIFY( B::ctor_count == 1 );\n+  VERIFY( B::dtor_count == 1 );\n+  return 0;\n+}\n+\n+int \n+main()\n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "15a6ae43986b88b76d36e13069a21dc27ec21a30", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr/assign_neg.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2Fassign_neg.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "previous_filename": "libstdc++-v3/testsuite/20_util/auto_ptr_neg.cc"}, {"sha": "7ccee6dd569b89d637429159d8826a1c8e6d0e53", "filename": "libstdc++-v3/testsuite/20_util/pair/1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F1.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -0,0 +1,79 @@\n+// 2001-06-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.2.2 Pairs\n+\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+class gnu_obj\n+{\n+  int i;\n+public:\n+  gnu_obj(int arg = 0): i(arg) { }\n+  bool operator==(const gnu_obj& rhs) const { return i == rhs.i; }\n+  bool operator<(const gnu_obj& rhs) const { return i < rhs.i; }\n+};\n+\n+template<typename T>\n+  struct gnu_t\n+  {\n+    bool b;\n+  public:\n+    gnu_t(bool arg = 0): b(arg) { }\n+    bool operator==(const gnu_t& rhs) const { return b == rhs.b; }\n+    bool operator<(const gnu_t& rhs) const { return int(b) < int(rhs.b); }\n+  };\n+\n+\n+// heterogeneous\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::pair<bool, long> p_bl_1(true, 433);\n+  std::pair<bool, long> p_bl_2 = std::make_pair(true, 433);\n+  VERIFY( p_bl_1 == p_bl_2 );\n+  VERIFY( !(p_bl_1 < p_bl_2) );\n+\n+  std::pair<const char*, float> p_sf_1(\"total enlightenment\", 433.00);\n+  std::pair<const char*, float> p_sf_2 = std::make_pair(\"total enlightenment\", \n+\t\t\t\t\t\t\t433.00);\n+  VERIFY( p_sf_1 == p_sf_2 );\n+  VERIFY( !(p_sf_1 < p_sf_2) );\n+\n+  std::pair<const char*, gnu_obj> p_sg_1(\"enlightenment\", gnu_obj(5));\n+  std::pair<const char*, gnu_obj> p_sg_2 = std::make_pair(\"enlightenment\", \n+\t\t\t\t\t\t\t  gnu_obj(5));\n+  VERIFY( p_sg_1 == p_sg_2 );\n+  VERIFY( !(p_sg_1 < p_sg_2) );\n+\n+  std::pair<gnu_t<long>, gnu_obj> p_st_1(gnu_t<long>(false), gnu_obj(5));\n+  std::pair<gnu_t<long>, gnu_obj> p_st_2 = std::make_pair(gnu_t<long>(false),\n+\t\t\t\t\t\t\t  gnu_obj(5));\n+  VERIFY( p_st_1 == p_st_2 );\n+  VERIFY( !(p_st_1 < p_st_2) );\n+}\n+\n+int main() \n+{ \n+  test01(); \n+  return 0;\n+}"}, {"sha": "82d928c2d01a7e1ed87c2280159764e9d9c0dfe3", "filename": "libstdc++-v3/testsuite/20_util/pair/2.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F2.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -0,0 +1,60 @@\n+// 2001-06-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.2.2 Pairs\n+\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+class gnu_obj\n+{\n+  int i;\n+public:\n+  gnu_obj(int arg = 0): i(arg) { }\n+  bool operator==(const gnu_obj& rhs) const { return i == rhs.i; }\n+  bool operator<(const gnu_obj& rhs) const { return i < rhs.i; }\n+};\n+\n+template<typename T>\n+  struct gnu_t\n+  {\n+    bool b;\n+  public:\n+    gnu_t(bool arg = 0): b(arg) { }\n+    bool operator==(const gnu_t& rhs) const { return b == rhs.b; }\n+    bool operator<(const gnu_t& rhs) const { return int(b) < int(rhs.b); }\n+  };\n+\n+// homogeneous\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::pair<bool, bool> p_bb_1(true, false);\n+  std::pair<bool, bool> p_bb_2 = std::make_pair(true, false);\n+  VERIFY( p_bb_1 == p_bb_2 );\n+  VERIFY( !(p_bb_1 < p_bb_2) );\n+}\n+\n+int main() \n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "bac0e7eb9744e3771042885102c648644f85e63f", "filename": "libstdc++-v3/testsuite/20_util/pair/3.cc", "status": "renamed", "additions": 2, "deletions": 63, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F3.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -1,6 +1,6 @@\n // 2001-06-18  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -43,47 +43,6 @@ template<typename T>\n   };\n \n \n-// heterogeneous\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::pair<bool, long> p_bl_1(true, 433);\n-  std::pair<bool, long> p_bl_2 = std::make_pair(true, 433);\n-  VERIFY( p_bl_1 == p_bl_2 );\n-  VERIFY( !(p_bl_1 < p_bl_2) );\n-\n-  std::pair<const char*, float> p_sf_1(\"total enlightenment\", 433.00);\n-  std::pair<const char*, float> p_sf_2 = std::make_pair(\"total enlightenment\", \n-\t\t\t\t\t\t\t433.00);\n-  VERIFY( p_sf_1 == p_sf_2 );\n-  VERIFY( !(p_sf_1 < p_sf_2) );\n-\n-  std::pair<const char*, gnu_obj> p_sg_1(\"enlightenment\", gnu_obj(5));\n-  std::pair<const char*, gnu_obj> p_sg_2 = std::make_pair(\"enlightenment\", \n-\t\t\t\t\t\t\t  gnu_obj(5));\n-  VERIFY( p_sg_1 == p_sg_2 );\n-  VERIFY( !(p_sg_1 < p_sg_2) );\n-\n-  std::pair<gnu_t<long>, gnu_obj> p_st_1(gnu_t<long>(false), gnu_obj(5));\n-  std::pair<gnu_t<long>, gnu_obj> p_st_2 = std::make_pair(gnu_t<long>(false),\n-\t\t\t\t\t\t\t  gnu_obj(5));\n-  VERIFY( p_st_1 == p_st_2 );\n-  VERIFY( !(p_st_1 < p_st_2) );\n-}\n-\n-// homogeneous\n-void test02()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::pair<bool, bool> p_bb_1(true, false);\n-  std::pair<bool, bool> p_bb_2 = std::make_pair(true, false);\n-  VERIFY( p_bb_1 == p_bb_2 );\n-  VERIFY( !(p_bb_1 < p_bb_2) );\n-}\n-\n-\n // const\n void test03()\n {\n@@ -113,28 +72,8 @@ void test03()\n   VERIFY( !(p_st_1 < p_st_2) );\n }\n \n-// const&\n-void test04()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const gnu_obj& obj1 = gnu_obj(5);\n-  const std::pair<const char*, gnu_obj> p_sg_1(\"enlightenment\", obj1);\n-  const std::pair<const char*, gnu_obj> p_sg_2 = \n-    std::make_pair(\"enlightenment\", obj1);\n-  VERIFY( p_sg_1 == p_sg_2 );\n-  VERIFY( !(p_sg_1 < p_sg_2) );\n-\n-  const gnu_t<long>& tmpl1 = gnu_t<long>(false);\n-  const std::pair<gnu_t<long>, gnu_obj> p_st_1(tmpl1, obj1);\n-  const std::pair<gnu_t<long>, gnu_obj> p_st_2 = std::make_pair(tmpl1, obj1);\n-  VERIFY( p_st_1 == p_st_2 );\n-  VERIFY( !(p_st_1 < p_st_2) );\n-}\n-\n int main() \n { \n-  test01(); \n-  test02();\n   test03();\n-  test04();\n+  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/20_util/pairs.cc"}, {"sha": "f6a1b5697d78d24db8275109b2472ce54f52e100", "filename": "libstdc++-v3/testsuite/20_util/pair/4.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F4.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -0,0 +1,67 @@\n+// 2001-06-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.2.2 Pairs\n+\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+class gnu_obj\n+{\n+  int i;\n+public:\n+  gnu_obj(int arg = 0): i(arg) { }\n+  bool operator==(const gnu_obj& rhs) const { return i == rhs.i; }\n+  bool operator<(const gnu_obj& rhs) const { return i < rhs.i; }\n+};\n+\n+template<typename T>\n+  struct gnu_t\n+  {\n+    bool b;\n+  public:\n+    gnu_t(bool arg = 0): b(arg) { }\n+    bool operator==(const gnu_t& rhs) const { return b == rhs.b; }\n+    bool operator<(const gnu_t& rhs) const { return int(b) < int(rhs.b); }\n+  };\n+\n+// const&\n+void test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const gnu_obj& obj1 = gnu_obj(5);\n+  const std::pair<const char*, gnu_obj> p_sg_1(\"enlightenment\", obj1);\n+  const std::pair<const char*, gnu_obj> p_sg_2 = \n+    std::make_pair(\"enlightenment\", obj1);\n+  VERIFY( p_sg_1 == p_sg_2 );\n+  VERIFY( !(p_sg_1 < p_sg_2) );\n+\n+  const gnu_t<long>& tmpl1 = gnu_t<long>(false);\n+  const std::pair<gnu_t<long>, gnu_obj> p_st_1(tmpl1, obj1);\n+  const std::pair<gnu_t<long>, gnu_obj> p_st_2 = std::make_pair(tmpl1, obj1);\n+  VERIFY( p_st_1 == p_st_2 );\n+  VERIFY( !(p_st_1 < p_st_2) );\n+}\n+\n+int main() \n+{ \n+  test04();\n+  return 0;\n+}"}, {"sha": "5c6b421954129d84251e236f5ae2f7027433f327", "filename": "libstdc++-v3/testsuite/performance/ifstream_extract_float.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fifstream_extract_float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fifstream_extract_float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fifstream_extract_float.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <fstream>\n+#include <testsuite_performance.h>\n+\n+int main() \n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+  const int iterations = 10000000;\n+\n+  {\n+    ofstream out(\"tmp_perf_float.txt\");\n+    for (int i = 0; i < iterations; ++i)\n+      {\n+\tfloat f = i * 3.14159265358979323846;\n+\tout << f << \"\\n\";\n+      }\n+  }\n+\n+  {\n+    ifstream in(\"tmp_perf_float.txt\");\n+    float f;\n+    start_counters(time, resource);  \n+    for (int j, i = 0; i < iterations; ++i)\n+      in >> f;\n+    stop_counters(time, resource);\n+    report_performance(__FILE__, \"\", time, resource);\n+  }\n+\n+  unlink(\"tmp_perf_int.txt\");\n+  return 0;\n+};"}, {"sha": "57e8c0e70779319a96fd028d58f43e5ce1b84848", "filename": "libstdc++-v3/testsuite/performance/ofstream_insert_float.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc?ref=60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "patch": "@@ -42,7 +42,7 @@ int main()\n   start_counters(time, resource);\n   for (int i = 0; i < iterations; ++i)\n     {\n-      float f = static_cast<float>(i);\n+      float f = i * 3.14159265358979323846;\n       out << f << \"\\n\";\n     }\n   stop_counters(time, resource);"}]}