{"sha": "5087048c12395ee380b8040e9ecf399b64e1cf66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA4NzA0OGMxMjM5NWVlMzgwYjgwNDBlOWVjZjM5OWI2NGUxY2Y2Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T16:22:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T16:22:58Z"}, "message": "[multiple changes]\n\n2010-06-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_aggr.adb (Rewrite_Discriminant): Fix predicate used to identify\n\treference to discriminant (can be an expanded name as well as an\n\tidentifier).\n\n2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb: Clarify comment.\n\n2010-06-22  Geert Bosch  <bosch@adacore.com>\n\n\t* exp_imgv.adb (Expand_Image_Attribute): Treat ordinary fixed point\n\twith decimal small as decimal types, avoiding floating-point arithmetic.\n\t(Has_Decimal_Small): New function.\n\t* einfo.ads, einfo.adb (Aft_Value): New synthesized attributed for\n\tfixed point types.\n\t* sem_attr.adb (Eval_Attribute): Remove Aft_Value function and update\n\tcallers to call the new function in Einfo that takes the entity as\n\tparameter.\n\nFrom-SVN: r161200", "tree": {"sha": "a9a02f49a226ae852a959602d7df85ceb26d807b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9a02f49a226ae852a959602d7df85ceb26d807b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5087048c12395ee380b8040e9ecf399b64e1cf66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5087048c12395ee380b8040e9ecf399b64e1cf66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5087048c12395ee380b8040e9ecf399b64e1cf66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5087048c12395ee380b8040e9ecf399b64e1cf66/comments", "author": null, "committer": null, "parents": [{"sha": "50b2e859965b43c6537acabd9a4e882204c89b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b2e859965b43c6537acabd9a4e882204c89b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b2e859965b43c6537acabd9a4e882204c89b42"}], "stats": {"total": 102, "additions": 72, "deletions": 30}, "files": [{"sha": "c8fda574cf2da0526a1f527fbe21eacfdce644fe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5087048c12395ee380b8040e9ecf399b64e1cf66", "patch": "@@ -1,3 +1,24 @@\n+2010-06-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_aggr.adb (Rewrite_Discriminant): Fix predicate used to identify\n+\treference to discriminant (can be an expanded name as well as an\n+\tidentifier).\n+\n+2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb: Clarify comment.\n+\n+2010-06-22  Geert Bosch  <bosch@adacore.com>\n+\n+\t* exp_imgv.adb (Expand_Image_Attribute): Treat ordinary fixed point\n+\twith decimal small as decimal types, avoiding floating-point arithmetic.\n+\t(Has_Decimal_Small): New function.\n+\t* einfo.ads, einfo.adb (Aft_Value): New synthesized attributed for\n+\tfixed point types.\n+\t* sem_attr.adb (Eval_Attribute): Remove Aft_Value function and update\n+\tcallers to call the new function in Einfo that takes the entity as\n+\tparameter.\n+\n 2010-06-22  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, sem_ch8.adb: Minor reformatting."}, {"sha": "e57323a20b7aace1eb5887f22d7566c57fb3bd30", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=5087048c12395ee380b8040e9ecf399b64e1cf66", "patch": "@@ -570,6 +570,18 @@ package body Einfo is\n       return Flag104 (Id);\n    end Address_Taken;\n \n+   function Aft_Value (Id : E) return U is\n+      Result    : Nat := 1;\n+      Delta_Val : Ureal := Delta_Value (Id);\n+   begin\n+      while Delta_Val < Ureal_Tenth loop\n+         Delta_Val := Delta_Val * Ureal_10;\n+         Result := Result + 1;\n+      end loop;\n+\n+      return UI_From_Int (Result);\n+   end Aft_Value;\n+\n    function Alias (Id : E) return E is\n    begin\n       pragma Assert"}, {"sha": "becf4dca17976cbff86b2a295f5c6a672f9d5b71", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=5087048c12395ee380b8040e9ecf399b64e1cf66", "patch": "@@ -350,6 +350,10 @@ package Einfo is\n --       make sure that the address can be meaningfully taken, and also in\n --       the case of subprograms to control output of certain warnings.\n \n+--    Aft_Value (synthesized)\n+--       Applies to fixed and decimal types. Computes a universal integer\n+--       that holds value of the Aft attribute for the type.\n+\n --    Alias (Node18)\n --       Present in overloaded entities (literals, subprograms, entries) and\n --       subprograms that cover a primitive operation of an abstract interface\n@@ -4832,6 +4836,7 @@ package Einfo is\n    --    Small_Value                         (Ureal21)\n    --    Has_Machine_Radix_Clause            (Flag83)\n    --    Machine_Radix_10                    (Flag84)\n+   --    Aft_Value                           (synth)\n    --    Type_Low_Bound                      (synth)\n    --    Type_High_Bound                     (synth)\n    --    (plus type attributes)\n@@ -5114,6 +5119,7 @@ package Einfo is\n    --    Scalar_Range                        (Node20)\n    --    Small_Value                         (Ureal21)\n    --    Has_Small_Clause                    (Flag67)\n+   --    Aft_Value                           (synth)\n    --    Type_Low_Bound                      (synth)\n    --    Type_High_Bound                     (synth)\n    --    (plus type attributes)\n@@ -6113,6 +6119,7 @@ package Einfo is\n    --  so they do not correspond to defined fields in the entity itself.\n \n    function Address_Clause                      (Id : E) return N;\n+   function Aft_Value                           (Id : E) return U;\n    function Alignment_Clause                    (Id : E) return N;\n    function Base_Type                           (Id : E) return E;\n    function Declaration_Node                    (Id : E) return N;"}, {"sha": "36045190d530f280de71520c98b688911a4add8a", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=5087048c12395ee380b8040e9ecf399b64e1cf66", "patch": "@@ -2427,7 +2427,7 @@ package body Exp_Aggr is\n \n       function Rewrite_Discriminant (Expr : Node_Id) return Traverse_Result is\n       begin\n-         if Nkind (Expr) = N_Identifier\n+         if Is_Entity_Name (Expr)\n            and then Present (Entity (Expr))\n            and then Ekind (Entity (Expr)) = E_In_Parameter\n            and then Present (Discriminal_Link (Entity (Expr)))"}, {"sha": "93b884cf2f65bb0f3bee67f59ba5fb19434eb2d1", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=5087048c12395ee380b8040e9ecf399b64e1cf66", "patch": "@@ -4764,8 +4764,9 @@ package body Exp_Ch6 is\n \n    function Is_Build_In_Place_Function (E : Entity_Id) return Boolean is\n    begin\n-      --  This function is called in some rare cases when expansion is off.\n-      --  In those cases the build_in_place expansion will not take place.\n+      --  This function is called from Expand_Subtype_From_Expr during\n+      --  semantic analysis, even when expansion is off. In those cases\n+      --  the build_in_place expansion will not take place.\n \n       if not Expander_Active then\n          return False;"}, {"sha": "9c0be21634e31f53b9f44e13dc61bffbd7005aaf", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=5087048c12395ee380b8040e9ecf399b64e1cf66", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,9 +43,15 @@ with Stringt;  use Stringt;\n with Tbuild;   use Tbuild;\n with Ttypes;   use Ttypes;\n with Uintp;    use Uintp;\n+with Urealp;   use Urealp;\n \n package body Exp_Imgv is\n \n+   function Has_Decimal_Small (E : Entity_Id) return Boolean;\n+   --  Applies to all entities. True for a Decimal_Fixed_Point_Type, or an\n+   --  Ordinary_Fixed_Point_Type with a small that is a negative power of ten.\n+   --  Shouldn't this be in einfo.adb or sem_aux.adb???\n+\n    ------------------------------------\n    -- Build_Enumeration_Image_Tables --\n    ------------------------------------\n@@ -330,7 +336,7 @@ package body Exp_Imgv is\n             Tent := RTE (RE_Long_Long_Unsigned);\n          end if;\n \n-      elsif Is_Decimal_Fixed_Point_Type (Rtyp) then\n+      elsif Is_Fixed_Point_Type (Rtyp) and then Has_Decimal_Small (Rtyp) then\n          if UI_To_Int (Esize (Rtyp)) <= Standard_Integer_Size then\n             Imid := RE_Image_Decimal;\n             Tent := Standard_Integer;\n@@ -451,6 +457,11 @@ package body Exp_Imgv is\n              Prefix         => New_Reference_To (Ptyp, Loc),\n              Attribute_Name => Name_Aft));\n \n+         if Has_Decimal_Small (Rtyp) then\n+            Set_Conversion_OK (First (Arg_List));\n+            Set_Etype (First (Arg_List), Tent);\n+         end if;\n+\n       --  For decimal, append Scale and also set to do literal conversion\n \n       elsif Is_Decimal_Fixed_Point_Type (Rtyp) then\n@@ -1240,4 +1251,16 @@ package body Exp_Imgv is\n       Analyze_And_Resolve (N, Typ);\n    end Expand_Width_Attribute;\n \n+   -----------------------\n+   -- Has_Decimal_Small --\n+   -----------------------\n+\n+   function Has_Decimal_Small (E : Entity_Id) return Boolean is\n+   begin\n+      return Is_Decimal_Fixed_Point_Type (E)\n+        or else\n+          (Is_Ordinary_Fixed_Point_Type (E)\n+             and then Ureal_10**Aft_Value (E) * Small_Value (E) = Ureal_1);\n+   end Has_Decimal_Small;\n+\n end Exp_Imgv;"}, {"sha": "1b9fcf3ded250874100e719690f25e597653c9a8", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5087048c12395ee380b8040e9ecf399b64e1cf66/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=5087048c12395ee380b8040e9ecf399b64e1cf66", "patch": "@@ -4805,10 +4805,6 @@ package body Sem_Attr is\n       --  processing, since otherwise gigi might see an attribute which it is\n       --  unprepared to deal with.\n \n-      function Aft_Value return Nat;\n-      --  Computes Aft value for current attribute prefix (used by Aft itself\n-      --  and also by Width for computing the Width of a fixed point type).\n-\n       procedure Check_Concurrent_Discriminant (Bound : Node_Id);\n       --  If Bound is a reference to a discriminant of a task or protected type\n       --  occurring within the object's body, rewrite attribute reference into\n@@ -4880,25 +4876,6 @@ package body Sem_Attr is\n       --  Verify that the prefix of a potentially static array attribute\n       --  satisfies the conditions of 4.9 (14).\n \n-      ---------------\n-      -- Aft_Value --\n-      ---------------\n-\n-      function Aft_Value return Nat is\n-         Result    : Nat;\n-         Delta_Val : Ureal;\n-\n-      begin\n-         Result := 1;\n-         Delta_Val := Delta_Value (P_Type);\n-         while Delta_Val < Ureal_Tenth loop\n-            Delta_Val := Delta_Val * Ureal_10;\n-            Result := Result + 1;\n-         end loop;\n-\n-         return Result;\n-      end Aft_Value;\n-\n       -----------------------------------\n       -- Check_Concurrent_Discriminant --\n       -----------------------------------\n@@ -5786,7 +5763,7 @@ package body Sem_Attr is\n       ---------\n \n       when Attribute_Aft =>\n-         Fold_Uint (N, UI_From_Int (Aft_Value), True);\n+         Fold_Uint (N, Aft_Value (P_Type), True);\n \n       ---------------\n       -- Alignment --\n@@ -7364,7 +7341,8 @@ package body Sem_Attr is\n                   --  For fixed-point type width is Fore + 1 + Aft (RM 3.5(34))\n \n                   Fold_Uint\n-                    (N, UI_From_Int (Fore_Value + 1 + Aft_Value), True);\n+                    (N, UI_From_Int (Fore_Value + 1) + Aft_Value (P_Type),\n+                     True);\n                end if;\n \n             --  Discrete types"}]}