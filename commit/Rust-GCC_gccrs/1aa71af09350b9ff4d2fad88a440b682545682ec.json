{"sha": "1aa71af09350b9ff4d2fad88a440b682545682ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFhNzFhZjA5MzUwYjlmZjRkMmZhZDg4YTQ0MGI2ODI1NDU2ODJlYw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-11T03:05:40Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-31T09:43:59Z"}, "message": "Refine expander vec_unpacku_float_hi_v16si/vec_unpacku_float_lo_v16si\n\ngcc/\n\tPR target/96551\n\t* config/i386/sse.md (vec_unpacku_float_hi_v16si): For vector\n\tcompare to integer mask, don't use gen_rtx_LT, use\n\tix86_expand_mask_vec_cmp instead.\n\t(vec_unpacku_float_hi_v16si): Ditto.\n\ngcc/testsuite\n\t* gcc.target/i386/avx512f-pr96551-1.c: New test.\n\t* gcc.target/i386/avx512f-pr96551-2.c: New test.", "tree": {"sha": "0dba644967686c21270ec562c017857ecaf02425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dba644967686c21270ec562c017857ecaf02425"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aa71af09350b9ff4d2fad88a440b682545682ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa71af09350b9ff4d2fad88a440b682545682ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa71af09350b9ff4d2fad88a440b682545682ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa71af09350b9ff4d2fad88a440b682545682ec/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f5b724844a28bea3dbb2a5c0b88bdce89ec4cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f5b724844a28bea3dbb2a5c0b88bdce89ec4cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f5b724844a28bea3dbb2a5c0b88bdce89ec4cb"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "8250325e1a39bf07802044bfb965d290785e9d11", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa71af09350b9ff4d2fad88a440b682545682ec/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa71af09350b9ff4d2fad88a440b682545682ec/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1aa71af09350b9ff4d2fad88a440b682545682ec", "patch": "@@ -7026,7 +7026,7 @@\n \n   emit_insn (gen_vec_extract_hi_v16si (tmp[3], operands[1]));\n   emit_insn (gen_floatv8siv8df2 (tmp[2], tmp[3]));\n-  emit_insn (gen_rtx_SET (k, gen_rtx_LT (QImode, tmp[2], tmp[0])));\n+  ix86_expand_mask_vec_cmp (k, LT, tmp[2], tmp[0]);\n   emit_insn (gen_addv8df3_mask (tmp[2], tmp[2], tmp[1], tmp[2], k));\n   emit_move_insn (operands[0], tmp[2]);\n   DONE;\n@@ -7073,7 +7073,7 @@\n   k = gen_reg_rtx (QImode);\n \n   emit_insn (gen_avx512f_cvtdq2pd512_2 (tmp[2], operands[1]));\n-  emit_insn (gen_rtx_SET (k, gen_rtx_LT (QImode, tmp[2], tmp[0])));\n+  ix86_expand_mask_vec_cmp (k, LT, tmp[2], tmp[0]);\n   emit_insn (gen_addv8df3_mask (tmp[2], tmp[2], tmp[1], tmp[2], k));\n   emit_move_insn (operands[0], tmp[2]);\n   DONE;"}, {"sha": "598bb6e85f3938cadaa11a2f911af782cddaf4cf", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr96551-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa71af09350b9ff4d2fad88a440b682545682ec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96551-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa71af09350b9ff4d2fad88a440b682545682ec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96551-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96551-1.c?ref=1aa71af09350b9ff4d2fad88a440b682545682ec", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mprefer-vector-width=512\" } */\n+\n+unsigned int a[256];\n+double b[256];\n+\n+void\n+__attribute__ ((noipa, optimize (\"tree-vectorize\")))\n+foo(void)\n+{\n+  int i;\n+\n+  for (i=0; i<256; ++i)\n+    b[i] = a[i];\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtdq2pd\\[^\\n\\]*zmm\" } } */\n+"}, {"sha": "f8bb1da7966b796ffe45ae6699be79cece5574f9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr96551-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa71af09350b9ff4d2fad88a440b682545682ec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96551-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa71af09350b9ff4d2fad88a440b682545682ec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96551-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96551-2.c?ref=1aa71af09350b9ff4d2fad88a440b682545682ec", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mprefer-vector-width=512\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#ifndef TEST\n+#define TEST test_512\n+#endif\n+\n+#include \"avx512f-pr96551-1.c\"\n+\n+void\n+test_512 (void)\n+{\n+  double exp[256];\n+  for (int i = 0; i != 256; i++)\n+    {\n+      a[i] = i * i + 3 * i + 13;\n+      exp[i] = a[i];\n+      b[i] = 0;\n+    }\n+\n+  foo ();\n+\n+  for (int i = 0; i != 256; i++)\n+    if (exp[i] != b[i])\n+      abort ();\n+}"}]}