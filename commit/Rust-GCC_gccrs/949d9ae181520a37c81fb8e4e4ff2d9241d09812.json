{"sha": "949d9ae181520a37c81fb8e4e4ff2d9241d09812", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ5ZDlhZTE4MTUyMGEzN2M4MWZiOGU0ZTRmZjJkOTI0MWQwOTgxMg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-06-26T11:01:15Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-06-26T11:01:15Z"}, "message": "throw_allocator.h: Fixes for -fno-exceptions.\n\n2007-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/throw_allocator.h: Fixes for -fno-exceptions.\n\t* testsuite/util/testsuite_shared.cc: Same.\n\t* testsuite/util/io/illegal_input_error.hpp: Same.\n\t* testsuite/util/io/verified_cmd_line_input.cc: Same.\n\n\t* libsupc++/typeinfo (type_info): Correct comment formatting,\n\tclarify member access and public interface.\n\t* libsupc++/exception: Less compressed comments.\n\t* libsupc++/new: Same.\n\nFrom-SVN: r126016", "tree": {"sha": "c08f612197e36b298606bc1f8799f4950b34b0ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c08f612197e36b298606bc1f8799f4950b34b0ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/949d9ae181520a37c81fb8e4e4ff2d9241d09812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949d9ae181520a37c81fb8e4e4ff2d9241d09812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/949d9ae181520a37c81fb8e4e4ff2d9241d09812", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949d9ae181520a37c81fb8e4e4ff2d9241d09812/comments", "author": null, "committer": null, "parents": [{"sha": "12c7b51e3e3e27a31c7b0aabf93610024967339a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12c7b51e3e3e27a31c7b0aabf93610024967339a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12c7b51e3e3e27a31c7b0aabf93610024967339a"}], "stats": {"total": 168, "additions": 100, "deletions": 68}, "files": [{"sha": "bfcfc777079f141a7848303e5a51f6204df0ea67", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=949d9ae181520a37c81fb8e4e4ff2d9241d09812", "patch": "@@ -1,3 +1,15 @@\n+2007-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/throw_allocator.h: Fixes for -fno-exceptions.\n+\t* testsuite/util/testsuite_shared.cc: Same.\n+\t* testsuite/util/io/illegal_input_error.hpp: Same.\n+\t* testsuite/util/io/verified_cmd_line_input.cc: Same.\n+\n+\t* libsupc++/typeinfo (type_info): Correct comment formatting,\n+\tclarify member access and public interface.\n+\t* libsupc++/exception: Less compressed comments.\n+\t* libsupc++/new: Same.\n+\t\n 2007-06-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_list.h: Rename guard macro consistently with"}, {"sha": "9a3dbef32fdc0c42037a0ad8c566e1ffc001ae48", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=949d9ae181520a37c81fb8e4e4ff2d9241d09812", "patch": "@@ -63,6 +63,7 @@\n #include <stdexcept>\n #include <utility>\n #include <tr1/random>\n+#include <bits/functexcept.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -82,10 +83,20 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     std::tr1::mt19937 _M_generator;\n   };\n \n-\n   struct forced_exception_error : public std::exception\n   { };\n \n+  // Substitute for concurrence_error object in the case of -fno-exceptions.\n+  inline void\n+  __throw_forced_exception_error()\n+  {\n+#if __EXCEPTIONS\n+    throw forced_exception_error();\n+#else\n+    __builtin_abort();\n+#endif\n+  }\n+\n   class throw_allocator_base\n   {\n   public:\n@@ -329,7 +340,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \terror += '\\n';\n \tprint_to_string(error, make_entry(p, size));\n \tprint_to_string(error, *found_it);\n-\tthrow std::logic_error(error);\n+\tstd::__throw_logic_error(error.c_str());\n       }\n     _S_map.insert(make_entry(p, size));\n   }\n@@ -355,7 +366,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \terror += \"null erase!\";\n \terror += '\\n';\n \tprint_to_string(error, make_entry(p, size));\n-\tthrow std::logic_error(error);\n+\tstd::__throw_logic_error(error.c_str());\n       }\n \n     if (found_it->second.second != size)\n@@ -365,7 +376,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \terror += '\\n';\n \tprint_to_string(error, make_entry(p, size));\n \tprint_to_string(error, *found_it);\n-\tthrow std::logic_error(error);\n+\tstd::__throw_logic_error(error.c_str());\n       }\n   }\n \n@@ -386,15 +397,15 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \tstd::string error(\"throw_allocator_base::check_allocated by label \");\n \terror += '\\n';\n \terror += found;\n-\tthrow std::logic_error(error);\n+\tstd::__throw_logic_error(error.c_str());\n       }\t\n   }\n \n   void\n   throw_allocator_base::throw_conditionally()\n   {\n     if (_S_g.get_prob() < _S_throw_prob)\n-      throw forced_exception_error();\n+      __throw_forced_exception_error();\n   }\n \n   void"}, {"sha": "a7e2db78dd19776a52f51f1cf396d1e908349abc", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=949d9ae181520a37c81fb8e4e4ff2d9241d09812", "patch": "@@ -58,6 +58,7 @@ namespace std\n   public:\n     exception() throw() { }\n     virtual ~exception() throw();\n+\n     /** Returns a C-style character string describing the general cause\n      *  of the current error.  */\n     virtual const char* what() const throw();\n@@ -69,26 +70,31 @@ namespace std\n   {\n   public:\n     bad_exception() throw() { }\n+\n     // This declaration is not useless:\n     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n     virtual ~bad_exception() throw();\n+\n     // See comment in eh_exception.cc.\n     virtual const char* what() const throw();\n   };\n \n   /// If you write a replacement %terminate handler, it must be of this type.\n   typedef void (*terminate_handler) ();\n+\n   /// If you write a replacement %unexpected handler, it must be of this type.\n   typedef void (*unexpected_handler) ();\n \n   /// Takes a new handler function as an argument, returns the old function.\n   terminate_handler set_terminate(terminate_handler) throw();\n+\n   /** The runtime will call this function if %exception handling must be\n    *  abandoned for any reason.  It can also be called by the user.  */\n   void terminate() __attribute__ ((__noreturn__));\n \n   /// Takes a new handler function as an argument, returns the old function.\n   unexpected_handler set_unexpected(unexpected_handler) throw();\n+\n   /** The runtime will call this function if an %exception is thrown which\n    *  violates the function's %exception specification.  */\n   void unexpected() __attribute__ ((__noreturn__));"}, {"sha": "a821783b14a64063bb18e571c1edb119ada2a179", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=949d9ae181520a37c81fb8e4e4ff2d9241d09812", "patch": "@@ -59,19 +59,25 @@ namespace std\n   {\n   public:\n     bad_alloc() throw() { }\n+\n     // This declaration is not useless:\n     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n     virtual ~bad_alloc() throw();\n+\n     // See comment in eh_exception.cc.\n     virtual const char* what() const throw();\n   };\n \n   struct nothrow_t { };\n+\n   extern const nothrow_t nothrow;\n+\n   /** If you write your own error handler to be called by @c new, it must\n    *  be of this type.  */\n   typedef void (*new_handler)();\n-  /// Takes a replacement handler as the argument, returns the previous handler.\n+\n+  /// Takes a replacement handler as the argument, returns the\n+  /// previous handler.\n   new_handler set_new_handler(new_handler) throw();\n } // namespace std\n "}, {"sha": "cfcbbcc08968d5c80505832215f2471d84b63924", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=949d9ae181520a37c81fb8e4e4ff2d9241d09812", "patch": "@@ -93,32 +93,20 @@ namespace std\n   class type_info \n   {\n   public:\n-    /** Destructor. Being the first non-inline virtual function, this\n+    /** Destructor first. Being the first non-inline virtual function, this\n      *  controls in which translation unit the vtable is emitted. The\n      *  compiler makes use of that information to know where to emit\n      *  the runtime-mandated type_info structures in the new-abi.  */\n     virtual ~type_info();\n \n-  private:\n-    /// Assigning type_info is not supported.  Made private.\n-    type_info& operator=(const type_info&);\n-    type_info(const type_info&);\n-    \n-  protected:\n-    const char *__name;\n-    \n-  protected:\n-    explicit type_info(const char *__n): __name(__n) { }\n-    \n-  public:\n-    // the public interface\n     /** Returns an @e implementation-defined byte string; this is not\n      *  portable between compilers!  */\n     const char* name() const\n     { return __name; }\n \n #if !__GXX_TYPEINFO_EQUALITY_INLINE\n     bool before(const type_info& __arg) const;\n+\n     // In old abi, or when weak symbols are not supported, there can\n     // be multiple instances of a type_info object for one\n     // type. Uniqueness must use the _name value, not object address.\n@@ -133,19 +121,13 @@ namespace std\n     // and therefore address comparisons are sufficient.\n     bool before(const type_info& __arg) const\n     { return __name < __arg.__name; }\n+\n     bool operator==(const type_info& __arg) const\n     { return __name == __arg.__name; }\n #endif\n     bool operator!=(const type_info& __arg) const\n     { return !operator==(__arg); }\n     \n-    // the internal interface\n-  public:\n-    // return true if this is a pointer type of some kind\n-    virtual bool __is_pointer_p() const;\n-    // return true if this is a function type\n-    virtual bool __is_function_p() const;\n-\n     // Try and catch a thrown type. Store an adjusted pointer to the\n     // caught type in THR_OBJ. If THR_TYPE is not a pointer type, then\n     // THR_OBJ points to the thrown object. If THR_TYPE is a pointer\n@@ -155,9 +137,25 @@ namespace std\n     virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,\n \t\t\t    unsigned __outer) const;\n \n-    // internally used during catch matching\n+    // Internally used during catch matching\n     virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,\n \t\t\t     void **__obj_ptr) const;\n+\n+   // Return true if this is a pointer type of some kind\n+    virtual bool __is_pointer_p() const;\n+\n+    // Return true if this is a function type\n+    virtual bool __is_function_p() const;\n+\n+  protected:\n+    const char *__name;\n+    \n+    explicit type_info(const char *__n): __name(__n) { }\n+    \n+  private:\n+    /// Assigning type_info is not supported.\n+    type_info& operator=(const type_info&);\n+    type_info(const type_info&);\n   };\n \n   /**\n@@ -169,9 +167,11 @@ namespace std\n   {\n   public:\n     bad_cast() throw() { }\n+\n     // This declaration is not useless:\n     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n     virtual ~bad_cast() throw();\n+\n     // See comment in eh_exception.cc.\n     virtual const char* what() const throw();\n   };\n@@ -181,9 +181,11 @@ namespace std\n   {\n   public:\n     bad_typeid () throw() { }\n+\n     // This declaration is not useless:\n     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n     virtual ~bad_typeid() throw();\n+\n     // See comment in eh_exception.cc.\n     virtual const char* what() const throw();\n   };"}, {"sha": "63675f9850cf670c6e24cb76ba33b71d187d6dde", "filename": "libstdc++-v3/testsuite/util/io/illegal_input_error.hpp", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fio%2Fillegal_input_error.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fio%2Fillegal_input_error.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fio%2Fillegal_input_error.hpp?ref=949d9ae181520a37c81fb8e4e4ff2d9241d09812", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -47,17 +47,26 @@\n #ifndef PB_DS_ILLEGAL_INPUT_EX_HPP\n #define PB_DS_ILLEGAL_INPUT_EX_HPP\n \n+#include <exception>\n+\n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n-    class illegal_input_error\n+    class illegal_input_error : public std::exception\n     { };\n \n+    // Substitute for concurrence_error object in the case of -fno-exceptions.\n+    inline void\n+    __throw_illegal_input_error()\n+    {\n+#if __EXCEPTIONS\n+      throw illegal_input_error();\n+#else\n+      __builtin_abort();\n+#endif\n+    }\n   } // namespace test\n-\n } // namespace pb_ds\n \n #endif // #ifndef PB_DS_ILLEGAL_INPUT_EX_HPP"}, {"sha": "c24cd6fc10e1a0503b536cd4c4356328259aaa86", "filename": "libstdc++-v3/testsuite/util/io/verified_cmd_line_input.cc", "status": "modified", "additions": 16, "deletions": 31, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fio%2Fverified_cmd_line_input.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fio%2Fverified_cmd_line_input.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fio%2Fverified_cmd_line_input.cc?ref=949d9ae181520a37c81fb8e4e4ff2d9241d09812", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -48,84 +48,69 @@\n #include <limits.h>\n #include <utility>\n #include <stdlib.h>\n+#include <bits/functexcept.h>\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     void\n     verify_argc(size_t given, size_t required)\n     {\n       if (given != required)\n-        throw illegal_input_error();\n+\t__throw_illegal_input_error();\n     }\n \n     void\n     verify_prob(double prob)\n     {\n       if (prob < 0 || prob > 1)\n-        throw illegal_input_error();\n+        __throw_illegal_input_error();\n     }\n \n     std::string\n     get_cmd_line_str(int argc, char* a_p_argv[], int argn)\n     {\n       if (argc <= argn)\n-        throw illegal_input_error();\n-\n+        __throw_illegal_input_error();\n       const std::string ret(a_p_argv[argn]);\n-\n-      return (ret);\n+      return ret;\n     }\n \n     double\n     get_cmd_line_prob(int argc, char* a_p_argv[], int argn)\n     {\n       if (argc <= argn)\n-        throw illegal_input_error();\n-\n+        __throw_illegal_input_error();\n       const double ret = ::atof(a_p_argv[argn]);\n-\n       verify_prob(ret);\n-\n-      return (ret);\n+      return ret;\n     }\n \n     size_t\n     get_cmd_line_size(int argc, char* a_p_argv[], int argn)\n     {\n       if (argc <= argn)\n-        throw illegal_input_error();\n-\n+        __throw_illegal_input_error();\n       const size_t ret = static_cast<size_t>(::atoi(a_p_argv[argn]));\n-\n-      return (ret);\n+      return ret;\n     }\n \n     bool\n     get_cmd_line_bool(int argc, char* a_p_argv[], int argn)\n     {\n       if (argc <= argn)\n-        throw illegal_input_error();\n+        __throw_illegal_input_error();\n \n       const std::string opt(a_p_argv[argn]);\n-\n       if (opt.size() != 1)\n-        throw illegal_input_error();\n-\n+        __throw_illegal_input_error();\n       if (opt[0] == 't')\n-        return (true);\n-\n+        return true;\n       if (opt[0] == 'f')\n-        return (false);\n-\n-      throw illegal_input_error();\n-\n-      return (false);\n+        return false;\n+      __throw_illegal_input_error();\n+      return false;\n     }\n-\n   } // namespace test\n-\n } // namespace pb_ds"}, {"sha": "cf09c2d3f163b118b9ec2ef7289e9744a39ad09b", "filename": "libstdc++-v3/testsuite/util/testsuite_shared.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_shared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949d9ae181520a37c81fb8e4e4ff2d9241d09812/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_shared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_shared.cc?ref=949d9ae181520a37c81fb8e4e4ff2d9241d09812", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,6 +21,7 @@\n #include <iostream>\n #include <sstream>\n #include <ext/mt_allocator.h>\n+#include <bits/functexcept.h>\n \n // libstdc++/22309\n extern \"C\" void\n@@ -43,7 +44,7 @@ try_throw_exception()\n {\n   try\n     {\n-      throw std::bad_exception();\n+      std::__throw_bad_exception();\n     }\n   catch (const std::exception& e)\n     { }\n@@ -68,5 +69,5 @@ try_function_random_fail()\n     }\n \n   // Randomly throw. See if other threads cleanup.\n-  throw std::bad_exception();\n+  std::__throw_bad_exception();\n }"}]}