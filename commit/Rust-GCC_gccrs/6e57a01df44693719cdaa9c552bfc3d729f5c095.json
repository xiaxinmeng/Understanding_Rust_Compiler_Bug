{"sha": "6e57a01df44693719cdaa9c552bfc3d729f5c095", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1N2EwMWRmNDQ2OTM3MTljZGFhOWM1NTJiZmMzZDcyOWY1YzA5NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-05-05T21:07:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-05-05T21:07:05Z"}, "message": "tree.h: Remove DECL_BY_REFERENCE from private_flag comment.\n\n\t* tree.h: Remove DECL_BY_REFERENCE from private_flag comment.\n\t(struct tree_base): Adjust spacing for 8 bit boundaries.\n\t(struct tree_decl_common): Add decl_by_reference_flag bit.\n\t(DECL_BY_REFERENCE): Adjust.\n\t* print-tree.c (print_node): For VAR_DECL, PARM_DECL or RESULT_DECL,\n\tprint DECL_BY_REFERENCE bit.\n\t* dbxout.c (DECL_ACCESSIBILITY_CHAR): Revert last change.\n\t* dwarf2out.c (loc_by_reference, gen_decl_die): Check\n\tDECL_BY_REFERENCE for all VAR_DECLs, not just non-static ones.\n\t(gen_variable_die): Likewise.  Check TREE_PRIVATE/TREE_PROTECTED\n\tunconditionally.\n\nFrom-SVN: r147135", "tree": {"sha": "533ece87754450454a84166bbf313727a22c4856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/533ece87754450454a84166bbf313727a22c4856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e57a01df44693719cdaa9c552bfc3d729f5c095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e57a01df44693719cdaa9c552bfc3d729f5c095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e57a01df44693719cdaa9c552bfc3d729f5c095", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e57a01df44693719cdaa9c552bfc3d729f5c095/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21c3348aea87865dfa7e1d3ab3a6fa32a13bf325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c3348aea87865dfa7e1d3ab3a6fa32a13bf325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c3348aea87865dfa7e1d3ab3a6fa32a13bf325"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "a4271b052acee186728f6fd983a0e5198dcaa84e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e57a01df44693719cdaa9c552bfc3d729f5c095/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e57a01df44693719cdaa9c552bfc3d729f5c095/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e57a01df44693719cdaa9c552bfc3d729f5c095", "patch": "@@ -1,3 +1,17 @@\n+2009-05-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h: Remove DECL_BY_REFERENCE from private_flag comment.\n+\t(struct tree_base): Adjust spacing for 8 bit boundaries.\n+\t(struct tree_decl_common): Add decl_by_reference_flag bit.\n+\t(DECL_BY_REFERENCE): Adjust.\n+\t* print-tree.c (print_node): For VAR_DECL, PARM_DECL or RESULT_DECL,\n+\tprint DECL_BY_REFERENCE bit.\n+\t* dbxout.c (DECL_ACCESSIBILITY_CHAR): Revert last change.\n+\t* dwarf2out.c (loc_by_reference, gen_decl_die): Check\n+\tDECL_BY_REFERENCE for all VAR_DECLs, not just non-static ones.\n+\t(gen_variable_die): Likewise.  Check TREE_PRIVATE/TREE_PROTECTED\n+\tunconditionally.\n+\n 2009-05-05  Joseph Myers  <joseph@codesourcery.com>\n \n \t* dwarf.h: Remove."}, {"sha": "dd05076bb63e4feade5e3d72e0b1c5fda1ca42c3", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e57a01df44693719cdaa9c552bfc3d729f5c095/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e57a01df44693719cdaa9c552bfc3d729f5c095/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=6e57a01df44693719cdaa9c552bfc3d729f5c095", "patch": "@@ -1398,9 +1398,7 @@ dbxout_type_index (tree type)\n /* Used in several places: evaluates to '0' for a private decl,\n    '1' for a protected decl, '2' for a public decl.  */\n #define DECL_ACCESSIBILITY_CHAR(DECL) \\\n-((TREE_CODE (DECL) != PARM_DECL && TREE_CODE (DECL) != RESULT_DECL \\\n-  && (TREE_CODE (DECL) != VAR_DECL || TREE_STATIC (DECL)) \\\n-  && TREE_PRIVATE (DECL)) ? '0' : TREE_PROTECTED (DECL) ? '1' : '2')\n+(TREE_PRIVATE (DECL) ? '0' : TREE_PROTECTED (DECL) ? '1' : '2')\n \n /* Subroutine of `dbxout_type'.  Output the type fields of TYPE.\n    This must be a separate function because anonymous unions require"}, {"sha": "73a31ecd9b83a5b17972c1c309f08d98039094f7", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e57a01df44693719cdaa9c552bfc3d729f5c095/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e57a01df44693719cdaa9c552bfc3d729f5c095/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6e57a01df44693719cdaa9c552bfc3d729f5c095", "patch": "@@ -11715,7 +11715,7 @@ loc_by_reference (dw_loc_descr_ref loc, tree decl)\n \n   if ((TREE_CODE (decl) != PARM_DECL\n        && TREE_CODE (decl) != RESULT_DECL\n-       && (TREE_CODE (decl) != VAR_DECL || TREE_STATIC (decl)))\n+       && TREE_CODE (decl) != VAR_DECL)\n       || !DECL_BY_REFERENCE (decl))\n     return loc;\n \n@@ -14048,19 +14048,13 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n   else\n     {\n       tree type = TREE_TYPE (decl);\n-      bool private_flag_valid = true;\n \n       add_name_and_src_coords_attributes (var_die, decl);\n       if ((TREE_CODE (decl) == PARM_DECL\n \t   || TREE_CODE (decl) == RESULT_DECL\n-\t   || (TREE_CODE (decl) == VAR_DECL && !TREE_STATIC (decl)))\n+\t   || TREE_CODE (decl) == VAR_DECL)\n \t  && DECL_BY_REFERENCE (decl))\n-\t{\n-\t  add_type_attribute (var_die, TREE_TYPE (type), 0, 0, context_die);\n-\t  /* DECL_BY_REFERENCE uses the same bit as TREE_PRIVATE,\n-\t     for PARM_DECL, RESULT_DECL or non-static VAR_DECL.  */\n-\t  private_flag_valid = false;\n-\t}\n+\tadd_type_attribute (var_die, TREE_TYPE (type), 0, 0, context_die);\n       else\n \tadd_type_attribute (var_die, type, TREE_READONLY (decl),\n \t\t\t    TREE_THIS_VOLATILE (decl), context_die);\n@@ -14073,7 +14067,7 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n \n       if (TREE_PROTECTED (decl))\n \tadd_AT_unsigned (var_die, DW_AT_accessibility, DW_ACCESS_protected);\n-      else if (private_flag_valid && TREE_PRIVATE (decl))\n+      else if (TREE_PRIVATE (decl))\n \tadd_AT_unsigned (var_die, DW_AT_accessibility, DW_ACCESS_private);\n     }\n \n@@ -15307,8 +15301,7 @@ gen_decl_die (tree decl, tree origin, dw_die_ref context_die)\n       /* Output any DIEs that are needed to specify the type of this data\n \t object.  */\n       if ((TREE_CODE (decl_or_origin) == RESULT_DECL\n-\t   || (TREE_CODE (decl_or_origin) == VAR_DECL\n-\t       && !TREE_STATIC (decl_or_origin)))\n+\t   || TREE_CODE (decl_or_origin) == VAR_DECL)\n           && DECL_BY_REFERENCE (decl_or_origin))\n \tgen_type_die (TREE_TYPE (TREE_TYPE (decl_or_origin)), context_die);\n       else"}, {"sha": "0d352642157cff924fd41ebb5ed8d11c3a90bdc3", "filename": "gcc/print-tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e57a01df44693719cdaa9c552bfc3d729f5c095/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e57a01df44693719cdaa9c552bfc3d729f5c095/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=6e57a01df44693719cdaa9c552bfc3d729f5c095", "patch": "@@ -448,6 +448,10 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t  fprintf (file, \" %s\", GET_MODE_NAME (mode));\n \t}\n \n+      if ((code == VAR_DECL || code == PARM_DECL || code == RESULT_DECL)\n+\t  && DECL_BY_REFERENCE (node))\n+\tfputs (\" passed-by-reference\", file);\n+\n       if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS)  && DECL_DEFER_OUTPUT (node))\n \tfputs (\" defer-output\", file);\n "}, {"sha": "cb4b369cd63e89265a6fb9d681a35998bfe0c0ac", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e57a01df44693719cdaa9c552bfc3d729f5c095/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e57a01df44693719cdaa9c552bfc3d729f5c095/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6e57a01df44693719cdaa9c552bfc3d729f5c095", "patch": "@@ -362,15 +362,16 @@ struct GTY(()) tree_base {\n   unsigned protected_flag : 1;\n   unsigned deprecated_flag : 1;\n   unsigned saturating_flag : 1;\n-  unsigned default_def_flag : 1;\n \n+  unsigned default_def_flag : 1;\n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;\n   unsigned lang_flag_2 : 1;\n   unsigned lang_flag_3 : 1;\n   unsigned lang_flag_4 : 1;\n   unsigned lang_flag_5 : 1;\n   unsigned lang_flag_6 : 1;\n+\n   unsigned visited : 1;\n \n   unsigned spare : 23;\n@@ -475,9 +476,6 @@ struct GTY(()) tree_common {\n        CALL_EXPR_RETURN_SLOT_OPT in\n            CALL_EXPR\n \n-       DECL_BY_REFERENCE in\n-           PARM_DECL, RESULT_DECL, VAR_DECL (only !TREE_STATIC)\n-\n        OMP_SECTION_LAST in\n            OMP_SECTION\n \n@@ -1294,10 +1292,12 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define CALL_EXPR_RETURN_SLOT_OPT(NODE) \\\n   (CALL_EXPR_CHECK (NODE)->base.private_flag)\n \n-/* In a RESULT_DECL, PARM_DECL or VAR_DECL without TREE_STATIC, means that it is\n+/* In a RESULT_DECL, PARM_DECL and VAR_DECL, means that it is\n    passed by invisible reference (and the TREE_TYPE is a pointer to the true\n    type).  */\n-#define DECL_BY_REFERENCE(NODE) (DECL_COMMON_CHECK (NODE)->base.private_flag)\n+#define DECL_BY_REFERENCE(NODE) \\\n+  (TREE_CHECK3 (NODE, VAR_DECL, PARM_DECL, \\\n+\t\tRESULT_DECL)->decl_common.decl_by_reference_flag)\n \n /* In a CALL_EXPR, means that the call is the jump from a thunk to the\n    thunked-to function.  */\n@@ -2651,8 +2651,10 @@ struct GTY(()) tree_decl_common {\n   unsigned gimple_reg_flag : 1;\n   /* In a DECL with pointer type, set if no TBAA should be done.  */\n   unsigned no_tbaa_flag : 1;\n+  /* In VAR_DECL, PARM_DECL and RESULT_DECL, this is DECL_BY_REFERENCE.  */\n+  unsigned decl_by_reference_flag : 1;\n   /* Padding so that 'off_align' can be on a 32-bit boundary.  */\n-  unsigned decl_common_unused : 2;\n+  unsigned decl_common_unused : 1;\n \n   /* DECL_OFFSET_ALIGN, used only for FIELD_DECLs.  */\n   unsigned int off_align : 8;"}]}