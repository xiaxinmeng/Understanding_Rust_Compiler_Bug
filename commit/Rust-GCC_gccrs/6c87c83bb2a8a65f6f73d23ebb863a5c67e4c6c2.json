{"sha": "6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM4N2M4M2JiMmE4YTY1ZjZmNzNkMjNlYmI4NjNhNWM2N2U0YzZjMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-19T08:36:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-19T08:36:53Z"}, "message": "[Ada] Lift restriction on instantiations that are compilation units\n\nThis change lifts the restriction that was still present in the new\non-demand instantiation scheme for the body of generics instantiated in\nnon-main units.\n\nThe instantiations that are compilation units were still dealt with in\nthe old-fashioned way, that is to say the decision of instantiating the\nbody was still made up front during the analysis of the instance\ndeclaration, instead of being deferred until after a call to an inlined\nsubprogram is encountered.\n\nThis should save a few more cycles when full inlining across units is\nenabled, but there should otherwise be no functional changes.\n\n2019-08-19  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* inline.adb (Add_Inlined_Body): Do not special-case instances\n\tthat are compilation units.\n\t(Add_Pending_Instantiation): Likewise.\n\t(Instantiate_Body): Skip instantiations that are compilation\n\tunits and have already been performed.\n\t* sem_ch12.adb (Needs_Body_Instantiated): Do not special-case\n\tinstances that are compilation units.\n\t(Load_Parent_Of_Generic): Be prepared for parent that is a\n\tcompilation unit but whose instantiation node has not been\n\treplaced.\n\ngcc/testsuite/\n\n\t* gnat.dg/generic_inst12.adb, gnat.dg/generic_inst12_pkg1.adb,\n\tgnat.dg/generic_inst12_pkg1.ads,\n\tgnat.dg/generic_inst12_pkg2.ads: New testcase.\n\nFrom-SVN: r274657", "tree": {"sha": "b582d19735f1d5a68c96a8932cda41a4b7c7ccff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b582d19735f1d5a68c96a8932cda41a4b7c7ccff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/comments", "author": null, "committer": null, "parents": [{"sha": "92b635e518dfb3bc6829601c38a2c55ea8791887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92b635e518dfb3bc6829601c38a2c55ea8791887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92b635e518dfb3bc6829601c38a2c55ea8791887"}], "stats": {"total": 117, "additions": 93, "deletions": 24}, "files": [{"sha": "2ac5309292f8330df1f9370e42950395a8396854", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2", "patch": "@@ -1,3 +1,16 @@\n+2019-08-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inline.adb (Add_Inlined_Body): Do not special-case instances\n+\tthat are compilation units.\n+\t(Add_Pending_Instantiation): Likewise.\n+\t(Instantiate_Body): Skip instantiations that are compilation\n+\tunits and have already been performed.\n+\t* sem_ch12.adb (Needs_Body_Instantiated): Do not special-case\n+\tinstances that are compilation units.\n+\t(Load_Parent_Of_Generic): Be prepared for parent that is a\n+\tcompilation unit but whose instantiation node has not been\n+\treplaced.\n+\n 2019-08-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* inline.adb (Initialize, Lock): Deal with"}, {"sha": "46daa487e709b3e1a616a6cc3aa0d00da6ecc001", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2", "patch": "@@ -611,12 +611,11 @@ package body Inline is\n                   Inst_Decl := Unit_Declaration_Node (Inst);\n \n                   --  Do not inline the instance if the body already exists,\n-                  --  or if the instance is a compilation unit, or else if\n-                  --  the instance node is simply missing.\n+                  --  or the instance node is simply missing.\n \n                   if Present (Corresponding_Body (Inst_Decl))\n-                    or else Nkind (Parent (Inst_Decl)) = N_Compilation_Unit\n-                    or else No (Next (Inst_Decl))\n+                    or else (Nkind (Parent (Inst_Decl)) /= N_Compilation_Unit\n+                              and then No (Next (Inst_Decl)))\n                   then\n                      Set_Is_Called (Inst);\n                   else\n@@ -797,13 +796,11 @@ package body Inline is\n \n          To_Pending_Instantiations.Set (Act_Decl, Index);\n \n-         --  If an instantiation is either a compilation unit or is in the main\n-         --  unit or subunit or is a nested subprogram, then its body is needed\n-         --  as per the analysis already done in Analyze_Package_Instantiation\n-         --  and Analyze_Subprogram_Instantiation.\n+         --  If an instantiation is in the main unit or subunit, or is a nested\n+         --  subprogram, then its body is needed as per the analysis done in\n+         --  Analyze_Package_Instantiation & Analyze_Subprogram_Instantiation.\n \n-         if Nkind (Parent (Inst)) = N_Compilation_Unit\n-           or else In_Main_Unit_Or_Subunit (Act_Decl_Id)\n+         if In_Main_Unit_Or_Subunit (Act_Decl_Id)\n            or else (Is_Subprogram (Act_Decl_Id)\n                      and then Is_Nested (Act_Decl_Id))\n          then\n@@ -4460,6 +4457,13 @@ package body Inline is\n          if No (Info.Inst_Node) then\n             null;\n \n+         --  If the instantiation node is a package body, this means that the\n+         --  instance is a compilation unit and the instantiation has already\n+         --  been performed by Build_Instance_Compilation_Unit_Nodes.\n+\n+         elsif Nkind (Info.Inst_Node) = N_Package_Body then\n+            null;\n+\n          elsif Nkind (Info.Act_Decl) = N_Package_Declaration then\n             Instantiate_Package_Body (Info);\n             Add_Scope_To_Clean (Defining_Entity (Info.Act_Decl));"}, {"sha": "17de328d29f081b7de110a16e1dc192275e18d3b", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2", "patch": "@@ -3921,19 +3921,15 @@ package body Sem_Ch12 is\n             return False;\n          end if;\n \n-         --  Here we have a special handling for back-end inlining: if the\n-         --  instantiation is not a compilation unit, then we want to have\n-         --  its body instantiated. The reason is that Might_Inline_Subp\n-         --  does not catch all the cases (since it does not recurse into\n-         --  nested packages) so this avoids the need to patch things up\n-         --  at a later stage. Moreover the instantiations that are not\n-         --  compilation units are only performed on demand when back-end\n+         --  Here we have a special handling for back-end inlining: if inline\n+         --  processing is required, then we unconditionally want to have the\n+         --  body instantiated. The reason is that Might_Inline_Subp does not\n+         --  catch all the cases (as it does not recurse into nested packages)\n+         --  so this avoids the need to patch things up afterwards. Moreover,\n+         --  these instantiations are only performed on demand when back-end\n          --  inlining is enabled, so this causes very little extra work.\n \n-         if Nkind (Parent (N)) /= N_Compilation_Unit\n-           and then Inline_Processing_Required\n-           and then Back_End_Inlining\n-         then\n+         if Inline_Processing_Required and then Back_End_Inlining then\n             return True;\n          end if;\n \n@@ -13699,15 +13695,26 @@ package body Sem_Ch12 is\n               and then\n                 Nkind (Original_Node (True_Parent)) = N_Package_Instantiation\n             then\n-               --  Parent is a compilation unit that is an instantiation.\n-               --  Instantiation node has been replaced with package decl.\n+               --  Parent is a compilation unit that is an instantiation, and\n+               --  instantiation node has been replaced with package decl.\n \n                Inst_Node := Original_Node (True_Parent);\n                exit;\n \n             elsif Nkind (True_Parent) = N_Package_Declaration\n-              and then Present (Generic_Parent (Specification (True_Parent)))\n+             and then Nkind (Parent (True_Parent)) = N_Compilation_Unit\n+             and then\n+               Nkind (Unit (Parent (True_Parent))) = N_Package_Instantiation\n+            then\n+               --  Parent is a compilation unit that is an instantiation, but\n+               --  instantiation node has not been replaced with package decl.\n+\n+               Inst_Node := Unit (Parent (True_Parent));\n+               exit;\n+\n+            elsif Nkind (True_Parent) = N_Package_Declaration\n               and then Nkind (Parent (True_Parent)) /= N_Compilation_Unit\n+              and then Present (Generic_Parent (Specification (True_Parent)))\n             then\n                --  Parent is an instantiation within another specification.\n                --  Declaration for instance has been inserted before original"}, {"sha": "0f246bf7bd17d0db1eaaab5e9b71222450c7c16f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2", "patch": "@@ -1,3 +1,9 @@\n+2019-08-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/generic_inst12.adb, gnat.dg/generic_inst12_pkg1.adb,\n+\tgnat.dg/generic_inst12_pkg1.ads,\n+\tgnat.dg/generic_inst12_pkg2.ads: New testcase.\n+\n 2019-08-19  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/warn28.adb, gnat.dg/warn28.ads: New testcase."}, {"sha": "4f9974900c38792f142a32537fb7047d4f54133d", "filename": "gcc/testsuite/gnat.dg/generic_inst12.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst12.adb?ref=6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2", "patch": "@@ -0,0 +1,12 @@\n+--  { dg-do run }\n+--  { dg-options \"-O -gnatn\" }\n+with Generic_Inst12_Pkg2;\n+\n+procedure Generic_Inst12 is\n+\n+  procedure My_Inner_G is new Generic_Inst12_Pkg2.Inner_G;\n+\n+begin\n+  My_Inner_G (1);\n+  Generic_Inst12_Pkg2.Proc (1);\n+end;"}, {"sha": "e4eced5544160c60b5a780cd2991384908e218d4", "filename": "gcc/testsuite/gnat.dg/generic_inst12_pkg1.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst12_pkg1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst12_pkg1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst12_pkg1.adb?ref=6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2", "patch": "@@ -0,0 +1,13 @@\n+package body Generic_Inst12_Pkg1 is\n+\n+  procedure Inner_G (Val : T) is\n+  begin\n+    null;\n+  end;\n+\n+  procedure Proc (Val : T) is\n+  begin\n+    null;\n+  end;\n+\n+end Generic_Inst12_Pkg1;"}, {"sha": "27de7cb91c8082e9105f8a07593964b15ea6cbf8", "filename": "gcc/testsuite/gnat.dg/generic_inst12_pkg1.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst12_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst12_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst12_pkg1.ads?ref=6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2", "patch": "@@ -0,0 +1,11 @@\n+generic\n+  type T is private;\n+package Generic_Inst12_Pkg1 is\n+\n+  generic\n+  procedure Inner_G (Val : T);\n+\n+  procedure Proc (Val : T);\n+  pragma Inline (Proc);\n+\n+end Generic_Inst12_Pkg1;"}, {"sha": "60519add0cb30f2d9dc17e7d52d02507afd42ef4", "filename": "gcc/testsuite/gnat.dg/generic_inst12_pkg2.ads", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst12_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst12_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst12_pkg2.ads?ref=6c87c83bb2a8a65f6f73d23ebb863a5c67e4c6c2", "patch": "@@ -0,0 +1,3 @@\n+with Generic_Inst12_Pkg1;\n+\n+package Generic_Inst12_Pkg2 is new Generic_Inst12_Pkg1 (Integer);"}]}