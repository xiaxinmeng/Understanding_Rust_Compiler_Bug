{"sha": "7a157266876058eee921323240e4bfd7e5a84fba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExNTcyNjY4NzYwNThlZWU5MjEzMjMyNDBlNGJmZDdlNWE4NGZiYQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-01-31T14:16:22Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-01-31T14:16:22Z"}, "message": "Use pointer sized array indices.\n\nUsing pointer sized variables (e.g. size_t / ptrdiff_t) when the\nvariables are used as array indices allows accessing larger arrays,\nand can be a slight performance improvement due to no need for sign or\nzero extending, or masking.\n\nRegtested on x86_64-pc-linux-gnu.\n\nlibgfortran/ChangeLog:\n\n2018-01-31  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* generated/cshift1_16.c (cshift1): Regenerated.\n\t* generated/cshift1_4.c (cshift1): Regenerated.\n\t* generated/cshift1_8.c (cshift1): Regenerated.\n\t* generated/eoshift1_16.c (eoshift1): Regenerated.\n\t* generated/eoshift1_4.c (eoshift1): Regenerated.\n\t* generated/eoshift1_8.c (eoshift1): Regenerated.\n\t* generated/eoshift3_16.c (eoshift3): Regenerated.\n\t* generated/eoshift3_4.c (eoshift3): Regenerated.\n\t* generated/eoshift3_8.c (eoshift3): Regenerated.\n\t* generated/in_pack_c10.c (internal_pack_c10): Regenerated.\n\t* generated/in_pack_c16.c (internal_pack_c16): Regenerated.\n\t* generated/in_pack_c4.c (internal_pack_c4): Regenerated.\n\t* generated/in_pack_c8.c (internal_pack_c8): Regenerated.\n\t* generated/in_pack_i1.c (internal_pack_1): Regenerated.\n\t* generated/in_pack_i16.c (internal_pack_16): Regenerated.\n\t* generated/in_pack_i2.c (internal_pack_2): Regenerated.\n\t* generated/in_pack_i4.c (internal_pack_4): Regenerated.\n\t* generated/in_pack_i8.c (internal_pack_8): Regenerated.\n\t* generated/in_pack_r10.c (internal_pack_r10): Regenerated.\n\t* generated/in_pack_r16.c (internal_pack_r16): Regenerated.\n\t* generated/in_pack_r4.c (internal_pack_r4): Regenerated.\n\t* generated/in_pack_r8.c (internal_pack_r8): Regenerated.\n\t* generated/in_unpack_c10.c (internal_unpack_c10): Regenerated.\n\t* generated/in_unpack_c16.c (internal_unpack_c16): Regenerated.\n\t* generated/in_unpack_c4.c (internal_unpack_c4): Regenerated.\n\t* generated/in_unpack_c8.c (internal_unpack_c8): Regenerated.\n\t* generated/in_unpack_i1.c (internal_unpack_1): Regenerated.\n\t* generated/in_unpack_i16.c (internal_unpack_16): Regenerated.\n\t* generated/in_unpack_i2.c (internal_unpack_2): Regenerated.\n\t* generated/in_unpack_i4.c (internal_unpack_4): Regenerated.\n\t* generated/in_unpack_i8.c (internal_unpack_8): Regenerated.\n\t* generated/in_unpack_r10.c (internal_unpack_r10): Regenerated.\n\t* generated/in_unpack_r16.c (internal_unpack_r16): Regenerated.\n\t* generated/in_unpack_r4.c (internal_unpack_r4): Regenerated.\n\t* generated/in_unpack_r8.c (internal_unpack_r8): Regenerated.\n\t* generated/reshape_c10.c (reshape_c10): Regenerated.\n\t* generated/reshape_c16.c (reshape_c16): Regenerated.\n\t* generated/reshape_c4.c (reshape_c4): Regenerated.\n\t* generated/reshape_c8.c (reshape_c8): Regenerated.\n\t* generated/reshape_i16.c (reshape_16): Regenerated.\n\t* generated/reshape_i4.c (reshape_4): Regenerated.\n\t* generated/reshape_i8.c (reshape_8): Regenerated.\n\t* generated/reshape_r10.c (reshape_r10): Regenerated.\n\t* generated/reshape_r16.c (reshape_r16): Regenerated.\n\t* generated/reshape_r4.c (reshape_r4): Regenerated.\n\t* generated/reshape_r8.c (reshape_r8): Regenerated.\n\t* generated/shape_i1.c (shape_1): Regenerated.\n\t* generated/shape_i16.c (shape_16): Regenerated.\n\t* generated/shape_i2.c (shape_2): Regenerated.\n\t* generated/shape_i4.c (shape_4): Regenerated.\n\t* generated/shape_i8.c (shape_8): Regenerated.\n\t* generated/spread_c10.c (spread_scalar_c10): Regenerated.\n\t* generated/spread_c16.c (spread_scalar_c16): Regenerated.\n\t* generated/spread_c4.c (spread_scalar_c4): Regenerated.\n\t* generated/spread_c8.c (spread_scalar_c8): Regenerated.\n\t* generated/spread_i1.c (spread_scalar_i1): Regenerated.\n\t* generated/spread_i16.c (spread_scalar_i16): Regenerated.\n\t* generated/spread_i2.c (spread_scalar_i2): Regenerated.\n\t* generated/spread_i4.c (spread_scalar_i4): Regenerated.\n\t* generated/spread_i8.c (spread_scalar_i8): Regenerated.\n\t* generated/spread_r10.c (spread_scalar_r10): Regenerated.\n\t* generated/spread_r16.c (spread_scalar_r16): Regenerated.\n\t* generated/spread_r4.c (spread_scalar_r4): Regenerated.\n\t* generated/spread_r8.c (spread_scalar_r8): Regenerated.\n\t* intrinsics/random.c (jump): Use size_t for array index in loop.\n\t(getosrandom): Likewise.\n\t(arandom_r4): Make n an index_type.\n\t(arandom_r8): Likewise.\n\t(arandom_r10): Likewise.\n\t(arandom_r16): Likewise.\n\t(scramble_seed): Use size_t for array index in loop.\n\t* m4/cshift1.m4: Make i an index_type.\n\t* m4/eoshift1.m4: Likewise.\n\t* m4/eoshift3.m4: Likewise.\n\t* m4/in_pack.m4: Make n an index_type.\n\t* m4/in_unpack.m4: Likewise.\n\t* m4/reshape.m4: Make n and dim index_type's.\n\t* m4/shape.m4: Make n an index_type.\n\t* m4/spread.m4: Likewise, use index_type argument rather than\n\tcopying to int.\n\t* runtime/bounds.c (bounds_ifunction_return): Make n an\n\tindex_type.\n\t* runtime/in_pack_generic.c (internal_pack): Likewise.\n\t* runtime/in_unpack_generic.c (internal_unpack): Make n and size\n\tindex_type's.\n\nFrom-SVN: r257234", "tree": {"sha": "e8ba29378820ddd29c4b97a197217560ac1a8f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8ba29378820ddd29c4b97a197217560ac1a8f19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a157266876058eee921323240e4bfd7e5a84fba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a157266876058eee921323240e4bfd7e5a84fba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a157266876058eee921323240e4bfd7e5a84fba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a157266876058eee921323240e4bfd7e5a84fba/comments", "author": null, "committer": null, "parents": [{"sha": "9f3dcd14146c29ca01507051ae9729a0f5569173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3dcd14146c29ca01507051ae9729a0f5569173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f3dcd14146c29ca01507051ae9729a0f5569173"}], "stats": {"total": 764, "additions": 370, "deletions": 394}, "files": [{"sha": "77ae9f76809ae31010fa548a340db89e93c1fe8c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -1,3 +1,91 @@\n+2018-01-31  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* generated/cshift1_16.c (cshift1): Regenerated.\n+\t* generated/cshift1_4.c (cshift1): Regenerated.\n+\t* generated/cshift1_8.c (cshift1): Regenerated.\n+\t* generated/eoshift1_16.c (eoshift1): Regenerated.\n+\t* generated/eoshift1_4.c (eoshift1): Regenerated.\n+\t* generated/eoshift1_8.c (eoshift1): Regenerated.\n+\t* generated/eoshift3_16.c (eoshift3): Regenerated.\n+\t* generated/eoshift3_4.c (eoshift3): Regenerated.\n+\t* generated/eoshift3_8.c (eoshift3): Regenerated.\n+\t* generated/in_pack_c10.c (internal_pack_c10): Regenerated.\n+\t* generated/in_pack_c16.c (internal_pack_c16): Regenerated.\n+\t* generated/in_pack_c4.c (internal_pack_c4): Regenerated.\n+\t* generated/in_pack_c8.c (internal_pack_c8): Regenerated.\n+\t* generated/in_pack_i1.c (internal_pack_1): Regenerated.\n+\t* generated/in_pack_i16.c (internal_pack_16): Regenerated.\n+\t* generated/in_pack_i2.c (internal_pack_2): Regenerated.\n+\t* generated/in_pack_i4.c (internal_pack_4): Regenerated.\n+\t* generated/in_pack_i8.c (internal_pack_8): Regenerated.\n+\t* generated/in_pack_r10.c (internal_pack_r10): Regenerated.\n+\t* generated/in_pack_r16.c (internal_pack_r16): Regenerated.\n+\t* generated/in_pack_r4.c (internal_pack_r4): Regenerated.\n+\t* generated/in_pack_r8.c (internal_pack_r8): Regenerated.\n+\t* generated/in_unpack_c10.c (internal_unpack_c10): Regenerated.\n+\t* generated/in_unpack_c16.c (internal_unpack_c16): Regenerated.\n+\t* generated/in_unpack_c4.c (internal_unpack_c4): Regenerated.\n+\t* generated/in_unpack_c8.c (internal_unpack_c8): Regenerated.\n+\t* generated/in_unpack_i1.c (internal_unpack_1): Regenerated.\n+\t* generated/in_unpack_i16.c (internal_unpack_16): Regenerated.\n+\t* generated/in_unpack_i2.c (internal_unpack_2): Regenerated.\n+\t* generated/in_unpack_i4.c (internal_unpack_4): Regenerated.\n+\t* generated/in_unpack_i8.c (internal_unpack_8): Regenerated.\n+\t* generated/in_unpack_r10.c (internal_unpack_r10): Regenerated.\n+\t* generated/in_unpack_r16.c (internal_unpack_r16): Regenerated.\n+\t* generated/in_unpack_r4.c (internal_unpack_r4): Regenerated.\n+\t* generated/in_unpack_r8.c (internal_unpack_r8): Regenerated.\n+\t* generated/reshape_c10.c (reshape_c10): Regenerated.\n+\t* generated/reshape_c16.c (reshape_c16): Regenerated.\n+\t* generated/reshape_c4.c (reshape_c4): Regenerated.\n+\t* generated/reshape_c8.c (reshape_c8): Regenerated.\n+\t* generated/reshape_i16.c (reshape_16): Regenerated.\n+\t* generated/reshape_i4.c (reshape_4): Regenerated.\n+\t* generated/reshape_i8.c (reshape_8): Regenerated.\n+\t* generated/reshape_r10.c (reshape_r10): Regenerated.\n+\t* generated/reshape_r16.c (reshape_r16): Regenerated.\n+\t* generated/reshape_r4.c (reshape_r4): Regenerated.\n+\t* generated/reshape_r8.c (reshape_r8): Regenerated.\n+\t* generated/shape_i1.c (shape_1): Regenerated.\n+\t* generated/shape_i16.c (shape_16): Regenerated.\n+\t* generated/shape_i2.c (shape_2): Regenerated.\n+\t* generated/shape_i4.c (shape_4): Regenerated.\n+\t* generated/shape_i8.c (shape_8): Regenerated.\n+\t* generated/spread_c10.c (spread_scalar_c10): Regenerated.\n+\t* generated/spread_c16.c (spread_scalar_c16): Regenerated.\n+\t* generated/spread_c4.c (spread_scalar_c4): Regenerated.\n+\t* generated/spread_c8.c (spread_scalar_c8): Regenerated.\n+\t* generated/spread_i1.c (spread_scalar_i1): Regenerated.\n+\t* generated/spread_i16.c (spread_scalar_i16): Regenerated.\n+\t* generated/spread_i2.c (spread_scalar_i2): Regenerated.\n+\t* generated/spread_i4.c (spread_scalar_i4): Regenerated.\n+\t* generated/spread_i8.c (spread_scalar_i8): Regenerated.\n+\t* generated/spread_r10.c (spread_scalar_r10): Regenerated.\n+\t* generated/spread_r16.c (spread_scalar_r16): Regenerated.\n+\t* generated/spread_r4.c (spread_scalar_r4): Regenerated.\n+\t* generated/spread_r8.c (spread_scalar_r8): Regenerated.\n+\t* intrinsics/random.c (jump): Use size_t for array index in loop.\n+\t(getosrandom): Likewise.\n+\t(arandom_r4): Make n an index_type.\n+\t(arandom_r8): Likewise.\n+\t(arandom_r10): Likewise.\n+\t(arandom_r16): Likewise.\n+\t(scramble_seed): Use size_t for array index in loop.\n+\t* m4/cshift1.m4: Make i an index_type.\n+\t* m4/eoshift1.m4: Likewise.\n+\t* m4/eoshift3.m4: Likewise.\n+\t* m4/in_pack.m4: Make n an index_type.\n+\t* m4/in_unpack.m4: Likewise.\n+\t* m4/reshape.m4: Make n and dim index_type's.\n+\t* m4/shape.m4: Make n an index_type.\n+\t* m4/spread.m4: Likewise, use index_type argument rather than\n+\tcopying to int.\n+\t* runtime/bounds.c (bounds_ifunction_return): Make n an\n+\tindex_type.\n+\t* runtime/in_pack_generic.c (internal_pack): Likewise.\n+\t* runtime/in_unpack_generic.c (internal_unpack): Make n and size\n+\tindex_type's.\n+\n 2018-01-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/37577"}, {"sha": "6ebca1a7650b7f5070bf85caa3ab21776c0c3c6d", "filename": "libgfortran/generated/cshift1_16.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fcshift1_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fcshift1_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -77,12 +77,10 @@ cshift1 (gfc_array_char * const restrict ret,\n \n   if (ret->base_addr == NULL)\n     {\n-      int i;\n-\n       ret->base_addr = xmallocarray (arraysize, size);\n       ret->offset = 0;\n       GFC_DTYPE_COPY(ret,array);\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+      for (index_type i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n "}, {"sha": "f28875f4ddda8097833475c89c3fb19d14b2c59a", "filename": "libgfortran/generated/cshift1_4.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fcshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fcshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -77,12 +77,10 @@ cshift1 (gfc_array_char * const restrict ret,\n \n   if (ret->base_addr == NULL)\n     {\n-      int i;\n-\n       ret->base_addr = xmallocarray (arraysize, size);\n       ret->offset = 0;\n       GFC_DTYPE_COPY(ret,array);\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+      for (index_type i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n "}, {"sha": "3914dc637e8e71fd1c6f16729d43e09011bf4685", "filename": "libgfortran/generated/cshift1_8.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fcshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fcshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -77,12 +77,10 @@ cshift1 (gfc_array_char * const restrict ret,\n \n   if (ret->base_addr == NULL)\n     {\n-      int i;\n-\n       ret->base_addr = xmallocarray (arraysize, size);\n       ret->offset = 0;\n       GFC_DTYPE_COPY(ret,array);\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+      for (index_type i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n "}, {"sha": "39c06e49eefe9c2111bafd0b54fc414ff490d80e", "filename": "libgfortran/generated/eoshift1_16.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Feoshift1_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Feoshift1_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -84,11 +84,9 @@ eoshift1 (gfc_array_char * const restrict ret,\n   arraysize = size0 ((array_t *) array);\n   if (ret->base_addr == NULL)\n     {\n-      int i;\n-\n       ret->offset = 0;\n       GFC_DTYPE_COPY(ret,array);\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+      for (index_type i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n "}, {"sha": "6848c50d88cda4df6602e3e6df03bb876d27f862", "filename": "libgfortran/generated/eoshift1_4.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Feoshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Feoshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -84,11 +84,9 @@ eoshift1 (gfc_array_char * const restrict ret,\n   arraysize = size0 ((array_t *) array);\n   if (ret->base_addr == NULL)\n     {\n-      int i;\n-\n       ret->offset = 0;\n       GFC_DTYPE_COPY(ret,array);\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+      for (index_type i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n "}, {"sha": "7444db763fec34e60885f43bf1b74009d93a1e6b", "filename": "libgfortran/generated/eoshift1_8.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Feoshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Feoshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -84,11 +84,9 @@ eoshift1 (gfc_array_char * const restrict ret,\n   arraysize = size0 ((array_t *) array);\n   if (ret->base_addr == NULL)\n     {\n-      int i;\n-\n       ret->offset = 0;\n       GFC_DTYPE_COPY(ret,array);\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+      for (index_type i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n "}, {"sha": "cf4a8d062fa3d28d7cdea8216d9499accfb767ca", "filename": "libgfortran/generated/eoshift3_16.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Feoshift3_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Feoshift3_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -85,12 +85,10 @@ eoshift3 (gfc_array_char * const restrict ret,\n \n   if (ret->base_addr == NULL)\n     {\n-      int i;\n-\n       ret->base_addr = xmallocarray (arraysize, size);\n       ret->offset = 0;\n       GFC_DTYPE_COPY(ret,array);\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+      for (index_type i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n "}, {"sha": "f47577a67a21ac1cfae91db8a353a841ce349dc1", "filename": "libgfortran/generated/eoshift3_4.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Feoshift3_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Feoshift3_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -85,12 +85,10 @@ eoshift3 (gfc_array_char * const restrict ret,\n \n   if (ret->base_addr == NULL)\n     {\n-      int i;\n-\n       ret->base_addr = xmallocarray (arraysize, size);\n       ret->offset = 0;\n       GFC_DTYPE_COPY(ret,array);\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+      for (index_type i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n "}, {"sha": "b2814db72ceb30a105ab77241e7920b84b2bf104", "filename": "libgfortran/generated/eoshift3_8.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Feoshift3_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Feoshift3_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -85,12 +85,10 @@ eoshift3 (gfc_array_char * const restrict ret,\n \n   if (ret->base_addr == NULL)\n     {\n-      int i;\n-\n       ret->base_addr = xmallocarray (arraysize, size);\n       ret->offset = 0;\n       GFC_DTYPE_COPY(ret,array);\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+      for (index_type i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n "}, {"sha": "9c2ee4fc4470a5c6c6aeb266496987aafb5c6bbf", "filename": "libgfortran/generated/in_pack_c10.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_c10.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_c10 (gfc_array_c10 * source)\n   const GFC_COMPLEX_10 *src;\n   GFC_COMPLEX_10 * restrict dest;\n   GFC_COMPLEX_10 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_c10 (gfc_array_c10 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_c10 (gfc_array_c10 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "9aab669fd11d026d83f9f4d4ffb2f7ad556faee9", "filename": "libgfortran/generated/in_pack_c16.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_c16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_c16 (gfc_array_c16 * source)\n   const GFC_COMPLEX_16 *src;\n   GFC_COMPLEX_16 * restrict dest;\n   GFC_COMPLEX_16 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_c16 (gfc_array_c16 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_c16 (gfc_array_c16 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "55fdd76a5d5f49678341199452e43db142419c44", "filename": "libgfortran/generated/in_pack_c4.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_c4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_c4 (gfc_array_c4 * source)\n   const GFC_COMPLEX_4 *src;\n   GFC_COMPLEX_4 * restrict dest;\n   GFC_COMPLEX_4 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_c4 (gfc_array_c4 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_c4 (gfc_array_c4 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "c8d873232fd5d143ed00c22b45f17535e7262d53", "filename": "libgfortran/generated/in_pack_c8.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_c8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_c8 (gfc_array_c8 * source)\n   const GFC_COMPLEX_8 *src;\n   GFC_COMPLEX_8 * restrict dest;\n   GFC_COMPLEX_8 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_c8 (gfc_array_c8 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_c8 (gfc_array_c8 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "83cdeadeb12f3f58fac58b8f11d01887f29c7e57", "filename": "libgfortran/generated/in_pack_i1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i1.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_1 (gfc_array_i1 * source)\n   const GFC_INTEGER_1 *src;\n   GFC_INTEGER_1 * restrict dest;\n   GFC_INTEGER_1 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_1 (gfc_array_i1 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_1 (gfc_array_i1 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "746f5c441ac67da5b39ce91387c24c46619543cf", "filename": "libgfortran/generated/in_pack_i16.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_16 (gfc_array_i16 * source)\n   const GFC_INTEGER_16 *src;\n   GFC_INTEGER_16 * restrict dest;\n   GFC_INTEGER_16 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_16 (gfc_array_i16 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_16 (gfc_array_i16 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "47f66115690f591701d7a935259dc5044f0f1d95", "filename": "libgfortran/generated/in_pack_i2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i2.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_2 (gfc_array_i2 * source)\n   const GFC_INTEGER_2 *src;\n   GFC_INTEGER_2 * restrict dest;\n   GFC_INTEGER_2 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_2 (gfc_array_i2 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_2 (gfc_array_i2 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "dea118b54a90518eaa788f16f1ec6b445d05cb11", "filename": "libgfortran/generated/in_pack_i4.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_4 (gfc_array_i4 * source)\n   const GFC_INTEGER_4 *src;\n   GFC_INTEGER_4 * restrict dest;\n   GFC_INTEGER_4 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_4 (gfc_array_i4 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_4 (gfc_array_i4 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "086614b1561d2a9626478330db865bfee5c5fda4", "filename": "libgfortran/generated/in_pack_i8.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_8 (gfc_array_i8 * source)\n   const GFC_INTEGER_8 *src;\n   GFC_INTEGER_8 * restrict dest;\n   GFC_INTEGER_8 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_8 (gfc_array_i8 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_8 (gfc_array_i8 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "47fcc3a2c7d6107e9f6f5f8591bed94312624f39", "filename": "libgfortran/generated/in_pack_r10.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_r10.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_r10 (gfc_array_r10 * source)\n   const GFC_REAL_10 *src;\n   GFC_REAL_10 * restrict dest;\n   GFC_REAL_10 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_r10 (gfc_array_r10 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_r10 (gfc_array_r10 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "6d51cb47770ff61f5250647c58baa39f6f1c2ec9", "filename": "libgfortran/generated/in_pack_r16.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_r16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_r16 (gfc_array_r16 * source)\n   const GFC_REAL_16 *src;\n   GFC_REAL_16 * restrict dest;\n   GFC_REAL_16 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_r16 (gfc_array_r16 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_r16 (gfc_array_r16 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "6bc1f0f05b74c6c5381817c0cfd84a62f5879716", "filename": "libgfortran/generated/in_pack_r4.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_r4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_r4 (gfc_array_r4 * source)\n   const GFC_REAL_4 *src;\n   GFC_REAL_4 * restrict dest;\n   GFC_REAL_4 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_r4 (gfc_array_r4 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_r4 (gfc_array_r4 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "bf9acb181a79cadb4b984ee439d98888e64706cb", "filename": "libgfortran/generated/in_pack_r8.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_pack_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_r8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -43,7 +43,6 @@ internal_pack_r8 (gfc_array_r8 * source)\n   const GFC_REAL_8 *src;\n   GFC_REAL_8 * restrict dest;\n   GFC_REAL_8 *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -52,7 +51,7 @@ internal_pack_r8 (gfc_array_r8 * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -88,7 +87,7 @@ internal_pack_r8 (gfc_array_r8 * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "b85529c1a77d6376a99c85758576392a704c6a45", "filename": "libgfortran/generated/in_unpack_c10.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_c10.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_c10 (gfc_array_c10 * d, const GFC_COMPLEX_10 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_COMPLEX_10 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_c10 (gfc_array_c10 * d, const GFC_COMPLEX_10 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "16fd0322c5880223c5704a62e4a8244560ac2a65", "filename": "libgfortran/generated/in_unpack_c16.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_c16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_c16 (gfc_array_c16 * d, const GFC_COMPLEX_16 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_COMPLEX_16 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_c16 (gfc_array_c16 * d, const GFC_COMPLEX_16 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "320dc95d2a5aa2f358c149c67ac01131573cebab", "filename": "libgfortran/generated/in_unpack_c4.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_c4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_c4 (gfc_array_c4 * d, const GFC_COMPLEX_4 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_COMPLEX_4 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_c4 (gfc_array_c4 * d, const GFC_COMPLEX_4 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "64030e07aacb14b0e5ffbb733028dd174799dbf0", "filename": "libgfortran/generated/in_unpack_c8.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_c8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_c8 (gfc_array_c8 * d, const GFC_COMPLEX_8 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_COMPLEX_8 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_c8 (gfc_array_c8 * d, const GFC_COMPLEX_8 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "e96eb69a8601244db9e7762746a585bb13ca40c4", "filename": "libgfortran/generated/in_unpack_i1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_i1.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_1 (gfc_array_i1 * d, const GFC_INTEGER_1 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_INTEGER_1 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_1 (gfc_array_i1 * d, const GFC_INTEGER_1 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "54fe60ad457f41a7b1fc3035ccd30e260153d19a", "filename": "libgfortran/generated/in_unpack_i16.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_i16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_16 (gfc_array_i16 * d, const GFC_INTEGER_16 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_INTEGER_16 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_16 (gfc_array_i16 * d, const GFC_INTEGER_16 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "6d0195d73fc2301993e7b19c32d88a6d2f6e9d8c", "filename": "libgfortran/generated/in_unpack_i2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_i2.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_2 (gfc_array_i2 * d, const GFC_INTEGER_2 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_INTEGER_2 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_2 (gfc_array_i2 * d, const GFC_INTEGER_2 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "86102ab857c7074684dceab0affca0e7f096c43a", "filename": "libgfortran/generated/in_unpack_i4.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_i4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_4 (gfc_array_i4 * d, const GFC_INTEGER_4 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_INTEGER_4 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_4 (gfc_array_i4 * d, const GFC_INTEGER_4 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "e51547d3104dcca847edab7d82acbd05f87896c8", "filename": "libgfortran/generated/in_unpack_i8.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_i8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_8 (gfc_array_i8 * d, const GFC_INTEGER_8 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_INTEGER_8 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_8 (gfc_array_i8 * d, const GFC_INTEGER_8 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "8a301be58cbeba5a4382c5b797ff2d72475e28aa", "filename": "libgfortran/generated/in_unpack_r10.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_r10.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_r10 (gfc_array_r10 * d, const GFC_REAL_10 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_REAL_10 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_r10 (gfc_array_r10 * d, const GFC_REAL_10 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "03ecae7e10650d261ece440d23a0b735f3e58141", "filename": "libgfortran/generated/in_unpack_r16.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_r16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_r16 (gfc_array_r16 * d, const GFC_REAL_16 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_REAL_16 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_r16 (gfc_array_r16 * d, const GFC_REAL_16 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "086cc6ac895f59cdaa2d34e1a1bea1c8f0e42b7a", "filename": "libgfortran/generated/in_unpack_r4.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_r4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_r4 (gfc_array_r4 * d, const GFC_REAL_4 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_REAL_4 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_r4 (gfc_array_r4 * d, const GFC_REAL_4 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "d7dd5ea7f0ea48c5d1ab97b5ee8c4abafafaf9fb", "filename": "libgfortran/generated/in_unpack_r8.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fin_unpack_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_unpack_r8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -39,15 +39,14 @@ internal_unpack_r8 (gfc_array_r8 * d, const GFC_REAL_8 * src)\n   index_type dim;\n   index_type dsize;\n   GFC_REAL_8 * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -77,7 +76,7 @@ internal_unpack_r8 (gfc_array_r8 * d, const GFC_REAL_8 * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "dbea98d17386273854ad99804cccb8f86e86f0d3", "filename": "libgfortran/generated/reshape_c10.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c10.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -72,8 +72,6 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n   const GFC_COMPLEX_10 *pptr;\n \n   const GFC_COMPLEX_10 *src;\n-  int n;\n-  int dim;\n   int sempty, pempty, shape_empty;\n   index_type shape_data[GFC_MAX_DIMENSIONS];\n \n@@ -87,7 +85,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n \n   shape_empty = 0;\n \n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n       shape_data[n] = shape->base_addr[n * GFC_DESCRIPTOR_STRIDE(shape,0)];\n       if (shape_data[n] <= 0)\n@@ -102,7 +100,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n       index_type alloc_size;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rex = shape_data[n];\n \n@@ -129,7 +127,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       pempty = 0;\n-      for (n = 0; n < pdim; n++)\n+      for (index_type n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = GFC_DESCRIPTOR_STRIDE(pad,n);\n@@ -160,7 +158,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n       index_type ret_extent, source_extent;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rs *= shape_data[n];\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(ret,n);\n@@ -173,7 +171,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n \n       source_extent = 1;\n       sdim = GFC_DESCRIPTOR_RANK (source);\n-      for (n = 0; n < sdim; n++)\n+      for (index_type n = 0; n < sdim; n++)\n \t{\n \t  index_type se;\n \t  se = GFC_DESCRIPTOR_EXTENT(source,n);\n@@ -190,10 +188,10 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n \t  int seen[GFC_MAX_DIMENSIONS];\n \t  index_type v;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    seen[n] = 0;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    {\n \t      v = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n \n@@ -211,8 +209,9 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n     }\n \n   rsize = 1;\n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n+      index_type dim;\n       if (order)\n         dim = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n       else\n@@ -243,7 +242,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n \n   ssize = 1;\n   sempty = 0;\n-  for (n = 0; n < sdim; n++)\n+  for (index_type n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -283,7 +282,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n       src = pptr;\n       sptr = pptr;\n       sdim = pdim;\n-      for (dim = 0; dim < pdim; dim++)\n+      for (index_type dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n@@ -303,7 +302,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n       scount[0]++;\n \n       /* Advance to the next destination element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (rcount[n] == rextent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -343,7 +342,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n                   /* Switch to the pad array.  */\n                   sptr = NULL;\n                   sdim = pdim;\n-                  for (dim = 0; dim < pdim; dim++)\n+                  for (index_type dim = 0; dim < pdim; dim++)\n                     {\n                       scount[dim] = pcount[dim];\n                       sextent[dim] = pextent[dim];"}, {"sha": "4cf875f1518e9deddf4fb9d81d841c9da56b4ddd", "filename": "libgfortran/generated/reshape_c16.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -72,8 +72,6 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n   const GFC_COMPLEX_16 *pptr;\n \n   const GFC_COMPLEX_16 *src;\n-  int n;\n-  int dim;\n   int sempty, pempty, shape_empty;\n   index_type shape_data[GFC_MAX_DIMENSIONS];\n \n@@ -87,7 +85,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n \n   shape_empty = 0;\n \n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n       shape_data[n] = shape->base_addr[n * GFC_DESCRIPTOR_STRIDE(shape,0)];\n       if (shape_data[n] <= 0)\n@@ -102,7 +100,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n       index_type alloc_size;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rex = shape_data[n];\n \n@@ -129,7 +127,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       pempty = 0;\n-      for (n = 0; n < pdim; n++)\n+      for (index_type n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = GFC_DESCRIPTOR_STRIDE(pad,n);\n@@ -160,7 +158,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n       index_type ret_extent, source_extent;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rs *= shape_data[n];\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(ret,n);\n@@ -173,7 +171,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n \n       source_extent = 1;\n       sdim = GFC_DESCRIPTOR_RANK (source);\n-      for (n = 0; n < sdim; n++)\n+      for (index_type n = 0; n < sdim; n++)\n \t{\n \t  index_type se;\n \t  se = GFC_DESCRIPTOR_EXTENT(source,n);\n@@ -190,10 +188,10 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n \t  int seen[GFC_MAX_DIMENSIONS];\n \t  index_type v;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    seen[n] = 0;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    {\n \t      v = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n \n@@ -211,8 +209,9 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n     }\n \n   rsize = 1;\n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n+      index_type dim;\n       if (order)\n         dim = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n       else\n@@ -243,7 +242,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n \n   ssize = 1;\n   sempty = 0;\n-  for (n = 0; n < sdim; n++)\n+  for (index_type n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -283,7 +282,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n       src = pptr;\n       sptr = pptr;\n       sdim = pdim;\n-      for (dim = 0; dim < pdim; dim++)\n+      for (index_type dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n@@ -303,7 +302,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n       scount[0]++;\n \n       /* Advance to the next destination element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (rcount[n] == rextent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -343,7 +342,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n                   /* Switch to the pad array.  */\n                   sptr = NULL;\n                   sdim = pdim;\n-                  for (dim = 0; dim < pdim; dim++)\n+                  for (index_type dim = 0; dim < pdim; dim++)\n                     {\n                       scount[dim] = pcount[dim];\n                       sextent[dim] = pextent[dim];"}, {"sha": "da718ad9a44b6610ad4e32dbb7a093ec3611c3f4", "filename": "libgfortran/generated/reshape_c4.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -72,8 +72,6 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n   const GFC_COMPLEX_4 *pptr;\n \n   const GFC_COMPLEX_4 *src;\n-  int n;\n-  int dim;\n   int sempty, pempty, shape_empty;\n   index_type shape_data[GFC_MAX_DIMENSIONS];\n \n@@ -87,7 +85,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n \n   shape_empty = 0;\n \n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n       shape_data[n] = shape->base_addr[n * GFC_DESCRIPTOR_STRIDE(shape,0)];\n       if (shape_data[n] <= 0)\n@@ -102,7 +100,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n       index_type alloc_size;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rex = shape_data[n];\n \n@@ -129,7 +127,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       pempty = 0;\n-      for (n = 0; n < pdim; n++)\n+      for (index_type n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = GFC_DESCRIPTOR_STRIDE(pad,n);\n@@ -160,7 +158,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n       index_type ret_extent, source_extent;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rs *= shape_data[n];\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(ret,n);\n@@ -173,7 +171,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n \n       source_extent = 1;\n       sdim = GFC_DESCRIPTOR_RANK (source);\n-      for (n = 0; n < sdim; n++)\n+      for (index_type n = 0; n < sdim; n++)\n \t{\n \t  index_type se;\n \t  se = GFC_DESCRIPTOR_EXTENT(source,n);\n@@ -190,10 +188,10 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n \t  int seen[GFC_MAX_DIMENSIONS];\n \t  index_type v;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    seen[n] = 0;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    {\n \t      v = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n \n@@ -211,8 +209,9 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n     }\n \n   rsize = 1;\n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n+      index_type dim;\n       if (order)\n         dim = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n       else\n@@ -243,7 +242,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n \n   ssize = 1;\n   sempty = 0;\n-  for (n = 0; n < sdim; n++)\n+  for (index_type n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -283,7 +282,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n       src = pptr;\n       sptr = pptr;\n       sdim = pdim;\n-      for (dim = 0; dim < pdim; dim++)\n+      for (index_type dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n@@ -303,7 +302,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n       scount[0]++;\n \n       /* Advance to the next destination element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (rcount[n] == rextent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -343,7 +342,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n                   /* Switch to the pad array.  */\n                   sptr = NULL;\n                   sdim = pdim;\n-                  for (dim = 0; dim < pdim; dim++)\n+                  for (index_type dim = 0; dim < pdim; dim++)\n                     {\n                       scount[dim] = pcount[dim];\n                       sextent[dim] = pextent[dim];"}, {"sha": "9fa7aca1abd9ee0bdede2f37507933c8edd106aa", "filename": "libgfortran/generated/reshape_c8.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -72,8 +72,6 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n   const GFC_COMPLEX_8 *pptr;\n \n   const GFC_COMPLEX_8 *src;\n-  int n;\n-  int dim;\n   int sempty, pempty, shape_empty;\n   index_type shape_data[GFC_MAX_DIMENSIONS];\n \n@@ -87,7 +85,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n \n   shape_empty = 0;\n \n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n       shape_data[n] = shape->base_addr[n * GFC_DESCRIPTOR_STRIDE(shape,0)];\n       if (shape_data[n] <= 0)\n@@ -102,7 +100,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n       index_type alloc_size;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rex = shape_data[n];\n \n@@ -129,7 +127,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       pempty = 0;\n-      for (n = 0; n < pdim; n++)\n+      for (index_type n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = GFC_DESCRIPTOR_STRIDE(pad,n);\n@@ -160,7 +158,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n       index_type ret_extent, source_extent;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rs *= shape_data[n];\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(ret,n);\n@@ -173,7 +171,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n \n       source_extent = 1;\n       sdim = GFC_DESCRIPTOR_RANK (source);\n-      for (n = 0; n < sdim; n++)\n+      for (index_type n = 0; n < sdim; n++)\n \t{\n \t  index_type se;\n \t  se = GFC_DESCRIPTOR_EXTENT(source,n);\n@@ -190,10 +188,10 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n \t  int seen[GFC_MAX_DIMENSIONS];\n \t  index_type v;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    seen[n] = 0;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    {\n \t      v = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n \n@@ -211,8 +209,9 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n     }\n \n   rsize = 1;\n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n+      index_type dim;\n       if (order)\n         dim = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n       else\n@@ -243,7 +242,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n \n   ssize = 1;\n   sempty = 0;\n-  for (n = 0; n < sdim; n++)\n+  for (index_type n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -283,7 +282,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n       src = pptr;\n       sptr = pptr;\n       sdim = pdim;\n-      for (dim = 0; dim < pdim; dim++)\n+      for (index_type dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n@@ -303,7 +302,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n       scount[0]++;\n \n       /* Advance to the next destination element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (rcount[n] == rextent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -343,7 +342,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n                   /* Switch to the pad array.  */\n                   sptr = NULL;\n                   sdim = pdim;\n-                  for (dim = 0; dim < pdim; dim++)\n+                  for (index_type dim = 0; dim < pdim; dim++)\n                     {\n                       scount[dim] = pcount[dim];\n                       sextent[dim] = pextent[dim];"}, {"sha": "8d3e218cdd6ab7e962118ba0fff5fcba6cc1edf2", "filename": "libgfortran/generated/reshape_i16.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -72,8 +72,6 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n   const GFC_INTEGER_16 *pptr;\n \n   const GFC_INTEGER_16 *src;\n-  int n;\n-  int dim;\n   int sempty, pempty, shape_empty;\n   index_type shape_data[GFC_MAX_DIMENSIONS];\n \n@@ -87,7 +85,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n \n   shape_empty = 0;\n \n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n       shape_data[n] = shape->base_addr[n * GFC_DESCRIPTOR_STRIDE(shape,0)];\n       if (shape_data[n] <= 0)\n@@ -102,7 +100,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n       index_type alloc_size;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rex = shape_data[n];\n \n@@ -129,7 +127,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       pempty = 0;\n-      for (n = 0; n < pdim; n++)\n+      for (index_type n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = GFC_DESCRIPTOR_STRIDE(pad,n);\n@@ -160,7 +158,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n       index_type ret_extent, source_extent;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rs *= shape_data[n];\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(ret,n);\n@@ -173,7 +171,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n \n       source_extent = 1;\n       sdim = GFC_DESCRIPTOR_RANK (source);\n-      for (n = 0; n < sdim; n++)\n+      for (index_type n = 0; n < sdim; n++)\n \t{\n \t  index_type se;\n \t  se = GFC_DESCRIPTOR_EXTENT(source,n);\n@@ -190,10 +188,10 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n \t  int seen[GFC_MAX_DIMENSIONS];\n \t  index_type v;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    seen[n] = 0;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    {\n \t      v = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n \n@@ -211,8 +209,9 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n     }\n \n   rsize = 1;\n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n+      index_type dim;\n       if (order)\n         dim = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n       else\n@@ -243,7 +242,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n \n   ssize = 1;\n   sempty = 0;\n-  for (n = 0; n < sdim; n++)\n+  for (index_type n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -283,7 +282,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n       src = pptr;\n       sptr = pptr;\n       sdim = pdim;\n-      for (dim = 0; dim < pdim; dim++)\n+      for (index_type dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n@@ -303,7 +302,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n       scount[0]++;\n \n       /* Advance to the next destination element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (rcount[n] == rextent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -343,7 +342,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n                   /* Switch to the pad array.  */\n                   sptr = NULL;\n                   sdim = pdim;\n-                  for (dim = 0; dim < pdim; dim++)\n+                  for (index_type dim = 0; dim < pdim; dim++)\n                     {\n                       scount[dim] = pcount[dim];\n                       sextent[dim] = pextent[dim];"}, {"sha": "d5348529290a6c01e7010f7e51aff50fec216ecd", "filename": "libgfortran/generated/reshape_i4.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -72,8 +72,6 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n   const GFC_INTEGER_4 *pptr;\n \n   const GFC_INTEGER_4 *src;\n-  int n;\n-  int dim;\n   int sempty, pempty, shape_empty;\n   index_type shape_data[GFC_MAX_DIMENSIONS];\n \n@@ -87,7 +85,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n \n   shape_empty = 0;\n \n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n       shape_data[n] = shape->base_addr[n * GFC_DESCRIPTOR_STRIDE(shape,0)];\n       if (shape_data[n] <= 0)\n@@ -102,7 +100,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n       index_type alloc_size;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rex = shape_data[n];\n \n@@ -129,7 +127,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       pempty = 0;\n-      for (n = 0; n < pdim; n++)\n+      for (index_type n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = GFC_DESCRIPTOR_STRIDE(pad,n);\n@@ -160,7 +158,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n       index_type ret_extent, source_extent;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rs *= shape_data[n];\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(ret,n);\n@@ -173,7 +171,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n \n       source_extent = 1;\n       sdim = GFC_DESCRIPTOR_RANK (source);\n-      for (n = 0; n < sdim; n++)\n+      for (index_type n = 0; n < sdim; n++)\n \t{\n \t  index_type se;\n \t  se = GFC_DESCRIPTOR_EXTENT(source,n);\n@@ -190,10 +188,10 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n \t  int seen[GFC_MAX_DIMENSIONS];\n \t  index_type v;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    seen[n] = 0;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    {\n \t      v = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n \n@@ -211,8 +209,9 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n     }\n \n   rsize = 1;\n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n+      index_type dim;\n       if (order)\n         dim = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n       else\n@@ -243,7 +242,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n \n   ssize = 1;\n   sempty = 0;\n-  for (n = 0; n < sdim; n++)\n+  for (index_type n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -283,7 +282,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n       src = pptr;\n       sptr = pptr;\n       sdim = pdim;\n-      for (dim = 0; dim < pdim; dim++)\n+      for (index_type dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n@@ -303,7 +302,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n       scount[0]++;\n \n       /* Advance to the next destination element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (rcount[n] == rextent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -343,7 +342,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n                   /* Switch to the pad array.  */\n                   sptr = NULL;\n                   sdim = pdim;\n-                  for (dim = 0; dim < pdim; dim++)\n+                  for (index_type dim = 0; dim < pdim; dim++)\n                     {\n                       scount[dim] = pcount[dim];\n                       sextent[dim] = pextent[dim];"}, {"sha": "205d45efd256a9999d8afb9b5594f826ac41228b", "filename": "libgfortran/generated/reshape_i8.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -72,8 +72,6 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n   const GFC_INTEGER_8 *pptr;\n \n   const GFC_INTEGER_8 *src;\n-  int n;\n-  int dim;\n   int sempty, pempty, shape_empty;\n   index_type shape_data[GFC_MAX_DIMENSIONS];\n \n@@ -87,7 +85,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n \n   shape_empty = 0;\n \n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n       shape_data[n] = shape->base_addr[n * GFC_DESCRIPTOR_STRIDE(shape,0)];\n       if (shape_data[n] <= 0)\n@@ -102,7 +100,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n       index_type alloc_size;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rex = shape_data[n];\n \n@@ -129,7 +127,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       pempty = 0;\n-      for (n = 0; n < pdim; n++)\n+      for (index_type n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = GFC_DESCRIPTOR_STRIDE(pad,n);\n@@ -160,7 +158,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n       index_type ret_extent, source_extent;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rs *= shape_data[n];\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(ret,n);\n@@ -173,7 +171,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n \n       source_extent = 1;\n       sdim = GFC_DESCRIPTOR_RANK (source);\n-      for (n = 0; n < sdim; n++)\n+      for (index_type n = 0; n < sdim; n++)\n \t{\n \t  index_type se;\n \t  se = GFC_DESCRIPTOR_EXTENT(source,n);\n@@ -190,10 +188,10 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n \t  int seen[GFC_MAX_DIMENSIONS];\n \t  index_type v;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    seen[n] = 0;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    {\n \t      v = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n \n@@ -211,8 +209,9 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n     }\n \n   rsize = 1;\n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n+      index_type dim;\n       if (order)\n         dim = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n       else\n@@ -243,7 +242,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n \n   ssize = 1;\n   sempty = 0;\n-  for (n = 0; n < sdim; n++)\n+  for (index_type n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -283,7 +282,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n       src = pptr;\n       sptr = pptr;\n       sdim = pdim;\n-      for (dim = 0; dim < pdim; dim++)\n+      for (index_type dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n@@ -303,7 +302,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n       scount[0]++;\n \n       /* Advance to the next destination element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (rcount[n] == rextent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -343,7 +342,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n                   /* Switch to the pad array.  */\n                   sptr = NULL;\n                   sdim = pdim;\n-                  for (dim = 0; dim < pdim; dim++)\n+                  for (index_type dim = 0; dim < pdim; dim++)\n                     {\n                       scount[dim] = pcount[dim];\n                       sextent[dim] = pextent[dim];"}, {"sha": "15e68f1f2bae1181060beece6905a2f35997a385", "filename": "libgfortran/generated/reshape_r10.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r10.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -72,8 +72,6 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n   const GFC_REAL_10 *pptr;\n \n   const GFC_REAL_10 *src;\n-  int n;\n-  int dim;\n   int sempty, pempty, shape_empty;\n   index_type shape_data[GFC_MAX_DIMENSIONS];\n \n@@ -87,7 +85,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n \n   shape_empty = 0;\n \n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n       shape_data[n] = shape->base_addr[n * GFC_DESCRIPTOR_STRIDE(shape,0)];\n       if (shape_data[n] <= 0)\n@@ -102,7 +100,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n       index_type alloc_size;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rex = shape_data[n];\n \n@@ -129,7 +127,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       pempty = 0;\n-      for (n = 0; n < pdim; n++)\n+      for (index_type n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = GFC_DESCRIPTOR_STRIDE(pad,n);\n@@ -160,7 +158,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n       index_type ret_extent, source_extent;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rs *= shape_data[n];\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(ret,n);\n@@ -173,7 +171,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n \n       source_extent = 1;\n       sdim = GFC_DESCRIPTOR_RANK (source);\n-      for (n = 0; n < sdim; n++)\n+      for (index_type n = 0; n < sdim; n++)\n \t{\n \t  index_type se;\n \t  se = GFC_DESCRIPTOR_EXTENT(source,n);\n@@ -190,10 +188,10 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n \t  int seen[GFC_MAX_DIMENSIONS];\n \t  index_type v;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    seen[n] = 0;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    {\n \t      v = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n \n@@ -211,8 +209,9 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n     }\n \n   rsize = 1;\n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n+      index_type dim;\n       if (order)\n         dim = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n       else\n@@ -243,7 +242,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n \n   ssize = 1;\n   sempty = 0;\n-  for (n = 0; n < sdim; n++)\n+  for (index_type n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -283,7 +282,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n       src = pptr;\n       sptr = pptr;\n       sdim = pdim;\n-      for (dim = 0; dim < pdim; dim++)\n+      for (index_type dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n@@ -303,7 +302,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n       scount[0]++;\n \n       /* Advance to the next destination element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (rcount[n] == rextent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -343,7 +342,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n                   /* Switch to the pad array.  */\n                   sptr = NULL;\n                   sdim = pdim;\n-                  for (dim = 0; dim < pdim; dim++)\n+                  for (index_type dim = 0; dim < pdim; dim++)\n                     {\n                       scount[dim] = pcount[dim];\n                       sextent[dim] = pextent[dim];"}, {"sha": "4e17d31fb7d23e67077110e89e0fb74c878923f1", "filename": "libgfortran/generated/reshape_r16.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -72,8 +72,6 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n   const GFC_REAL_16 *pptr;\n \n   const GFC_REAL_16 *src;\n-  int n;\n-  int dim;\n   int sempty, pempty, shape_empty;\n   index_type shape_data[GFC_MAX_DIMENSIONS];\n \n@@ -87,7 +85,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n \n   shape_empty = 0;\n \n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n       shape_data[n] = shape->base_addr[n * GFC_DESCRIPTOR_STRIDE(shape,0)];\n       if (shape_data[n] <= 0)\n@@ -102,7 +100,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n       index_type alloc_size;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rex = shape_data[n];\n \n@@ -129,7 +127,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       pempty = 0;\n-      for (n = 0; n < pdim; n++)\n+      for (index_type n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = GFC_DESCRIPTOR_STRIDE(pad,n);\n@@ -160,7 +158,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n       index_type ret_extent, source_extent;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rs *= shape_data[n];\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(ret,n);\n@@ -173,7 +171,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n \n       source_extent = 1;\n       sdim = GFC_DESCRIPTOR_RANK (source);\n-      for (n = 0; n < sdim; n++)\n+      for (index_type n = 0; n < sdim; n++)\n \t{\n \t  index_type se;\n \t  se = GFC_DESCRIPTOR_EXTENT(source,n);\n@@ -190,10 +188,10 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n \t  int seen[GFC_MAX_DIMENSIONS];\n \t  index_type v;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    seen[n] = 0;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    {\n \t      v = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n \n@@ -211,8 +209,9 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n     }\n \n   rsize = 1;\n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n+      index_type dim;\n       if (order)\n         dim = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n       else\n@@ -243,7 +242,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n \n   ssize = 1;\n   sempty = 0;\n-  for (n = 0; n < sdim; n++)\n+  for (index_type n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -283,7 +282,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n       src = pptr;\n       sptr = pptr;\n       sdim = pdim;\n-      for (dim = 0; dim < pdim; dim++)\n+      for (index_type dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n@@ -303,7 +302,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n       scount[0]++;\n \n       /* Advance to the next destination element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (rcount[n] == rextent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -343,7 +342,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n                   /* Switch to the pad array.  */\n                   sptr = NULL;\n                   sdim = pdim;\n-                  for (dim = 0; dim < pdim; dim++)\n+                  for (index_type dim = 0; dim < pdim; dim++)\n                     {\n                       scount[dim] = pcount[dim];\n                       sextent[dim] = pextent[dim];"}, {"sha": "7f419b113c18b6d46c3045700625c1bcc71ab15d", "filename": "libgfortran/generated/reshape_r4.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -72,8 +72,6 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n   const GFC_REAL_4 *pptr;\n \n   const GFC_REAL_4 *src;\n-  int n;\n-  int dim;\n   int sempty, pempty, shape_empty;\n   index_type shape_data[GFC_MAX_DIMENSIONS];\n \n@@ -87,7 +85,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n \n   shape_empty = 0;\n \n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n       shape_data[n] = shape->base_addr[n * GFC_DESCRIPTOR_STRIDE(shape,0)];\n       if (shape_data[n] <= 0)\n@@ -102,7 +100,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n       index_type alloc_size;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rex = shape_data[n];\n \n@@ -129,7 +127,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       pempty = 0;\n-      for (n = 0; n < pdim; n++)\n+      for (index_type n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = GFC_DESCRIPTOR_STRIDE(pad,n);\n@@ -160,7 +158,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n       index_type ret_extent, source_extent;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rs *= shape_data[n];\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(ret,n);\n@@ -173,7 +171,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n \n       source_extent = 1;\n       sdim = GFC_DESCRIPTOR_RANK (source);\n-      for (n = 0; n < sdim; n++)\n+      for (index_type n = 0; n < sdim; n++)\n \t{\n \t  index_type se;\n \t  se = GFC_DESCRIPTOR_EXTENT(source,n);\n@@ -190,10 +188,10 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n \t  int seen[GFC_MAX_DIMENSIONS];\n \t  index_type v;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    seen[n] = 0;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    {\n \t      v = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n \n@@ -211,8 +209,9 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n     }\n \n   rsize = 1;\n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n+      index_type dim;\n       if (order)\n         dim = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n       else\n@@ -243,7 +242,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n \n   ssize = 1;\n   sempty = 0;\n-  for (n = 0; n < sdim; n++)\n+  for (index_type n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -283,7 +282,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n       src = pptr;\n       sptr = pptr;\n       sdim = pdim;\n-      for (dim = 0; dim < pdim; dim++)\n+      for (index_type dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n@@ -303,7 +302,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n       scount[0]++;\n \n       /* Advance to the next destination element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (rcount[n] == rextent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -343,7 +342,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n                   /* Switch to the pad array.  */\n                   sptr = NULL;\n                   sdim = pdim;\n-                  for (dim = 0; dim < pdim; dim++)\n+                  for (index_type dim = 0; dim < pdim; dim++)\n                     {\n                       scount[dim] = pcount[dim];\n                       sextent[dim] = pextent[dim];"}, {"sha": "0315b0b36ad1b16fb7f0a58ad69ac9b8cc41b267", "filename": "libgfortran/generated/reshape_r8.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Freshape_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -72,8 +72,6 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n   const GFC_REAL_8 *pptr;\n \n   const GFC_REAL_8 *src;\n-  int n;\n-  int dim;\n   int sempty, pempty, shape_empty;\n   index_type shape_data[GFC_MAX_DIMENSIONS];\n \n@@ -87,7 +85,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n \n   shape_empty = 0;\n \n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n       shape_data[n] = shape->base_addr[n * GFC_DESCRIPTOR_STRIDE(shape,0)];\n       if (shape_data[n] <= 0)\n@@ -102,7 +100,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n       index_type alloc_size;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rex = shape_data[n];\n \n@@ -129,7 +127,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       pempty = 0;\n-      for (n = 0; n < pdim; n++)\n+      for (index_type n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = GFC_DESCRIPTOR_STRIDE(pad,n);\n@@ -160,7 +158,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n       index_type ret_extent, source_extent;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rs *= shape_data[n];\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(ret,n);\n@@ -173,7 +171,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n \n       source_extent = 1;\n       sdim = GFC_DESCRIPTOR_RANK (source);\n-      for (n = 0; n < sdim; n++)\n+      for (index_type n = 0; n < sdim; n++)\n \t{\n \t  index_type se;\n \t  se = GFC_DESCRIPTOR_EXTENT(source,n);\n@@ -190,10 +188,10 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n \t  int seen[GFC_MAX_DIMENSIONS];\n \t  index_type v;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    seen[n] = 0;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    {\n \t      v = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n \n@@ -211,8 +209,9 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n     }\n \n   rsize = 1;\n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n+      index_type dim;\n       if (order)\n         dim = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n       else\n@@ -243,7 +242,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n \n   ssize = 1;\n   sempty = 0;\n-  for (n = 0; n < sdim; n++)\n+  for (index_type n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -283,7 +282,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n       src = pptr;\n       sptr = pptr;\n       sdim = pdim;\n-      for (dim = 0; dim < pdim; dim++)\n+      for (index_type dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n@@ -303,7 +302,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n       scount[0]++;\n \n       /* Advance to the next destination element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (rcount[n] == rextent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -343,7 +342,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n                   /* Switch to the pad array.  */\n                   sptr = NULL;\n                   sdim = pdim;\n-                  for (dim = 0; dim < pdim; dim++)\n+                  for (index_type dim = 0; dim < pdim; dim++)\n                     {\n                       scount[dim] = pcount[dim];\n                       sextent[dim] = pextent[dim];"}, {"sha": "c50022257fb5690a72de89c6dfa74cb6753597b1", "filename": "libgfortran/generated/shape_i1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fshape_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fshape_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i1.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -36,12 +36,10 @@ void\n shape_1 (gfc_array_i1 * const restrict ret, \n \tconst array_t * const restrict array)\n {\n-  int n;\n   index_type stride;\n   index_type extent;\n-  int rank;\n \n-  rank = GFC_DESCRIPTOR_RANK (array);\n+  int rank = GFC_DESCRIPTOR_RANK (array);\n \n   if (ret->base_addr == NULL)\n     {\n@@ -55,7 +53,7 @@ shape_1 (gfc_array_i1 * const restrict ret,\n   if (GFC_DESCRIPTOR_EXTENT(ret,0) < 1)\n     return;\n \n-  for (n = 0; n < rank; n++)\n+  for (index_type n = 0; n < rank; n++)\n     {\n       extent = GFC_DESCRIPTOR_EXTENT(array,n);\n       ret->base_addr[n * stride] = extent > 0 ? extent : 0 ;"}, {"sha": "5b1498f62fbe2ce40ccf1613fdbad8bbb830d302", "filename": "libgfortran/generated/shape_i16.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fshape_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fshape_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -36,12 +36,10 @@ void\n shape_16 (gfc_array_i16 * const restrict ret, \n \tconst array_t * const restrict array)\n {\n-  int n;\n   index_type stride;\n   index_type extent;\n-  int rank;\n \n-  rank = GFC_DESCRIPTOR_RANK (array);\n+  int rank = GFC_DESCRIPTOR_RANK (array);\n \n   if (ret->base_addr == NULL)\n     {\n@@ -55,7 +53,7 @@ shape_16 (gfc_array_i16 * const restrict ret,\n   if (GFC_DESCRIPTOR_EXTENT(ret,0) < 1)\n     return;\n \n-  for (n = 0; n < rank; n++)\n+  for (index_type n = 0; n < rank; n++)\n     {\n       extent = GFC_DESCRIPTOR_EXTENT(array,n);\n       ret->base_addr[n * stride] = extent > 0 ? extent : 0 ;"}, {"sha": "d9536c7726ec142b3af11bfb513b33ff8005e18e", "filename": "libgfortran/generated/shape_i2.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fshape_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fshape_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i2.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -36,12 +36,10 @@ void\n shape_2 (gfc_array_i2 * const restrict ret, \n \tconst array_t * const restrict array)\n {\n-  int n;\n   index_type stride;\n   index_type extent;\n-  int rank;\n \n-  rank = GFC_DESCRIPTOR_RANK (array);\n+  int rank = GFC_DESCRIPTOR_RANK (array);\n \n   if (ret->base_addr == NULL)\n     {\n@@ -55,7 +53,7 @@ shape_2 (gfc_array_i2 * const restrict ret,\n   if (GFC_DESCRIPTOR_EXTENT(ret,0) < 1)\n     return;\n \n-  for (n = 0; n < rank; n++)\n+  for (index_type n = 0; n < rank; n++)\n     {\n       extent = GFC_DESCRIPTOR_EXTENT(array,n);\n       ret->base_addr[n * stride] = extent > 0 ? extent : 0 ;"}, {"sha": "798d0fe2f592e971bf1e00d41348e3ad61bd886c", "filename": "libgfortran/generated/shape_i4.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -36,12 +36,10 @@ void\n shape_4 (gfc_array_i4 * const restrict ret, \n \tconst array_t * const restrict array)\n {\n-  int n;\n   index_type stride;\n   index_type extent;\n-  int rank;\n \n-  rank = GFC_DESCRIPTOR_RANK (array);\n+  int rank = GFC_DESCRIPTOR_RANK (array);\n \n   if (ret->base_addr == NULL)\n     {\n@@ -55,7 +53,7 @@ shape_4 (gfc_array_i4 * const restrict ret,\n   if (GFC_DESCRIPTOR_EXTENT(ret,0) < 1)\n     return;\n \n-  for (n = 0; n < rank; n++)\n+  for (index_type n = 0; n < rank; n++)\n     {\n       extent = GFC_DESCRIPTOR_EXTENT(array,n);\n       ret->base_addr[n * stride] = extent > 0 ? extent : 0 ;"}, {"sha": "d885d8232f4b50a461c0504df622b49b4c5ad4e6", "filename": "libgfortran/generated/shape_i8.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -36,12 +36,10 @@ void\n shape_8 (gfc_array_i8 * const restrict ret, \n \tconst array_t * const restrict array)\n {\n-  int n;\n   index_type stride;\n   index_type extent;\n-  int rank;\n \n-  rank = GFC_DESCRIPTOR_RANK (array);\n+  int rank = GFC_DESCRIPTOR_RANK (array);\n \n   if (ret->base_addr == NULL)\n     {\n@@ -55,7 +53,7 @@ shape_8 (gfc_array_i8 * const restrict ret,\n   if (GFC_DESCRIPTOR_EXTENT(ret,0) < 1)\n     return;\n \n-  for (n = 0; n < rank; n++)\n+  for (index_type n = 0; n < rank; n++)\n     {\n       extent = GFC_DESCRIPTOR_EXTENT(array,n);\n       ret->base_addr[n * stride] = extent > 0 ? extent : 0 ;"}, {"sha": "fdde4c4f8d9994de7ed04e827a42c79ab0fd90ad", "filename": "libgfortran/generated/spread_c10.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_c10.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_c10 (gfc_array_c10 *ret, const gfc_array_c10 *source,\n \n void\n spread_scalar_c10 (gfc_array_c10 *ret, const GFC_COMPLEX_10 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_COMPLEX_10 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_c10 (gfc_array_c10 *ret, const GFC_COMPLEX_10 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "a6cb709e3884c96ee37a760922bf23cdcfc59008", "filename": "libgfortran/generated/spread_c16.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_c16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_c16 (gfc_array_c16 *ret, const gfc_array_c16 *source,\n \n void\n spread_scalar_c16 (gfc_array_c16 *ret, const GFC_COMPLEX_16 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_COMPLEX_16 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_c16 (gfc_array_c16 *ret, const GFC_COMPLEX_16 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "b9b75f188ed65890ddef39f86eab11ee5cae1f51", "filename": "libgfortran/generated/spread_c4.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_c4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_c4 (gfc_array_c4 *ret, const gfc_array_c4 *source,\n \n void\n spread_scalar_c4 (gfc_array_c4 *ret, const GFC_COMPLEX_4 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_COMPLEX_4 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_c4 (gfc_array_c4 *ret, const GFC_COMPLEX_4 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "2d1dbca2478aa902b030147622ec6ab6a30c4ff4", "filename": "libgfortran/generated/spread_c8.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_c8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_c8 (gfc_array_c8 *ret, const gfc_array_c8 *source,\n \n void\n spread_scalar_c8 (gfc_array_c8 *ret, const GFC_COMPLEX_8 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_COMPLEX_8 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_c8 (gfc_array_c8 *ret, const GFC_COMPLEX_8 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "f06fd50e8dcd6824020063ab7d8b0d896ac60ab2", "filename": "libgfortran/generated/spread_i1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i1.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_i1 (gfc_array_i1 *ret, const gfc_array_i1 *source,\n \n void\n spread_scalar_i1 (gfc_array_i1 *ret, const GFC_INTEGER_1 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_INTEGER_1 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_i1 (gfc_array_i1 *ret, const GFC_INTEGER_1 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "19f15d712eed046337342c3788270142390c8b94", "filename": "libgfortran/generated/spread_i16.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_i16 (gfc_array_i16 *ret, const gfc_array_i16 *source,\n \n void\n spread_scalar_i16 (gfc_array_i16 *ret, const GFC_INTEGER_16 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_INTEGER_16 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_i16 (gfc_array_i16 *ret, const GFC_INTEGER_16 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "eeb28999573f9c5558de051f001448d2034fdb7c", "filename": "libgfortran/generated/spread_i2.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i2.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_i2 (gfc_array_i2 *ret, const gfc_array_i2 *source,\n \n void\n spread_scalar_i2 (gfc_array_i2 *ret, const GFC_INTEGER_2 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_INTEGER_2 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_i2 (gfc_array_i2 *ret, const GFC_INTEGER_2 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "463e153ed73c19d591aec86ba57e740e1aac4b25", "filename": "libgfortran/generated/spread_i4.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_i4 (gfc_array_i4 *ret, const gfc_array_i4 *source,\n \n void\n spread_scalar_i4 (gfc_array_i4 *ret, const GFC_INTEGER_4 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_INTEGER_4 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_i4 (gfc_array_i4 *ret, const GFC_INTEGER_4 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "fe416818b07ecd0a8ee772fd900f37defc448f24", "filename": "libgfortran/generated/spread_i8.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_i8 (gfc_array_i8 *ret, const gfc_array_i8 *source,\n \n void\n spread_scalar_i8 (gfc_array_i8 *ret, const GFC_INTEGER_8 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_INTEGER_8 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_i8 (gfc_array_i8 *ret, const GFC_INTEGER_8 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "4aec65d4333f5e9bddca54af1327c22cddbef480", "filename": "libgfortran/generated/spread_r10.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_r10.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_r10 (gfc_array_r10 *ret, const gfc_array_r10 *source,\n \n void\n spread_scalar_r10 (gfc_array_r10 *ret, const GFC_REAL_10 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_REAL_10 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_r10 (gfc_array_r10 *ret, const GFC_REAL_10 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "8e1e9c7925efcf82e04ca45973f17560a135f68f", "filename": "libgfortran/generated/spread_r16.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_r16.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_r16 (gfc_array_r16 *ret, const gfc_array_r16 *source,\n \n void\n spread_scalar_r16 (gfc_array_r16 *ret, const GFC_REAL_16 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_REAL_16 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_r16 (gfc_array_r16 *ret, const GFC_REAL_16 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "431452f51a323d7a039dd28b21db90e3991a8500", "filename": "libgfortran/generated/spread_r4.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_r4.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_r4 (gfc_array_r4 *ret, const gfc_array_r4 *source,\n \n void\n spread_scalar_r4 (gfc_array_r4 *ret, const GFC_REAL_4 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_REAL_4 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_r4 (gfc_array_r4 *ret, const GFC_REAL_4 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "d89c8d2966014b3d6f561f8560fcf0e2d8591b80", "filename": "libgfortran/generated/spread_r8.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fgenerated%2Fspread_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_r8.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -227,10 +227,8 @@ spread_r8 (gfc_array_r8 *ret, const gfc_array_r8 *source,\n \n void\n spread_scalar_r8 (gfc_array_r8 *ret, const GFC_REAL_8 *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   GFC_REAL_8 * restrict dest;\n   index_type stride;\n \n@@ -256,7 +254,7 @@ spread_scalar_r8 (gfc_array_r8 *ret, const GFC_REAL_8 *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "234c5ff95fdaeb50c89ade0f7d5c742824d54383", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -259,7 +259,7 @@ jump (xorshift1024star_state* rs)\n   };\n \n   uint64_t t[16] = { 0 };\n-  for(unsigned int i = 0; i < sizeof JUMP / sizeof *JUMP; i++)\n+  for(size_t i = 0; i < sizeof JUMP / sizeof *JUMP; i++)\n     for(int b = 0; b < 64; b++)\n       {\n \tif (JUMP[i] & 1ULL << b)\n@@ -306,7 +306,7 @@ getosrandom (void *buf, size_t buflen)\n   /* rand_s is available in MinGW-w64 but not plain MinGW.  */\n #if defined(__MINGW64_VERSION_MAJOR)\n   unsigned int* b = buf;\n-  for (unsigned i = 0; i < buflen / sizeof (unsigned int); i++)\n+  for (size_t i = 0; i < buflen / sizeof (unsigned int); i++)\n     rand_s (&b[i]);\n   return buflen;\n #else\n@@ -462,14 +462,12 @@ arandom_r4 (gfc_array_r4 *x)\n   index_type dim;\n   GFC_REAL_4 *dest;\n   xorshift1024star_state* rs = get_rand_state();\n-  int n;\n-\n \n   dest = x->base_addr;\n \n   dim = GFC_DESCRIPTOR_RANK (x);\n \n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(x,n);\n@@ -494,7 +492,7 @@ arandom_r4 (gfc_array_r4 *x)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -531,13 +529,12 @@ arandom_r8 (gfc_array_r8 *x)\n   index_type dim;\n   GFC_REAL_8 *dest;\n   xorshift1024star_state* rs = get_rand_state();\n-  int n;\n \n   dest = x->base_addr;\n \n   dim = GFC_DESCRIPTOR_RANK (x);\n \n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(x,n);\n@@ -561,7 +558,7 @@ arandom_r8 (gfc_array_r8 *x)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -600,13 +597,12 @@ arandom_r10 (gfc_array_r10 *x)\n   index_type dim;\n   GFC_REAL_10 *dest;\n   xorshift1024star_state* rs = get_rand_state();\n-  int n;\n \n   dest = x->base_addr;\n \n   dim = GFC_DESCRIPTOR_RANK (x);\n \n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(x,n);\n@@ -630,7 +626,7 @@ arandom_r10 (gfc_array_r10 *x)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -671,13 +667,12 @@ arandom_r16 (gfc_array_r16 *x)\n   index_type dim;\n   GFC_REAL_16 *dest;\n   xorshift1024star_state* rs = get_rand_state();\n-  int n;\n \n   dest = x->base_addr;\n \n   dim = GFC_DESCRIPTOR_RANK (x);\n \n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(x,n);\n@@ -702,7 +697,7 @@ arandom_r16 (gfc_array_r16 *x)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -751,7 +746,7 @@ static const uint64_t xor_keys[] = {\n static void\n scramble_seed (uint64_t *dest, const uint64_t *src)\n {\n-  for (int i = 0; i < (int) SZU64; i++)\n+  for (size_t i = 0; i < SZU64; i++)\n     dest[i] = src[i] ^ xor_keys[i];\n }\n "}, {"sha": "504d4d00bc780d5eec4bdc5a83be45ecee037cae", "filename": "libgfortran/m4/cshift1.m4", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Fcshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Fcshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fcshift1.m4?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -78,12 +78,10 @@ cshift1 (gfc_array_char * const restrict ret,\n \n   if (ret->base_addr == NULL)\n     {\n-      int i;\n-\n       ret->base_addr = xmallocarray (arraysize, size);\n       ret->offset = 0;\n       GFC_DTYPE_COPY(ret,array);\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+      for (index_type i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n "}, {"sha": "ab3f6ce6a196ff96f41d75793310005d96c36e67", "filename": "libgfortran/m4/eoshift1.m4", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Feoshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Feoshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift1.m4?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -85,11 +85,9 @@ eoshift1 (gfc_array_char * const restrict ret,\n   arraysize = size0 ((array_t *) array);\n   if (ret->base_addr == NULL)\n     {\n-      int i;\n-\n       ret->offset = 0;\n       GFC_DTYPE_COPY(ret,array);\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+      for (index_type i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n "}, {"sha": "504cc7ba93a959fd1880f98895e20a1f6fcc3896", "filename": "libgfortran/m4/eoshift3.m4", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Feoshift3.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Feoshift3.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift3.m4?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -86,12 +86,10 @@ eoshift3 (gfc_array_char * const restrict ret,\n \n   if (ret->base_addr == NULL)\n     {\n-      int i;\n-\n       ret->base_addr = xmallocarray (arraysize, size);\n       ret->offset = 0;\n       GFC_DTYPE_COPY(ret,array);\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+      for (index_type i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n "}, {"sha": "2dce24bc03f47e178c1bca0e7d515f483a807ff5", "filename": "libgfortran/m4/in_pack.m4", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Fin_pack.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Fin_pack.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fin_pack.m4?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -46,7 +46,6 @@ internal_pack_'rtype_ccode` ('rtype` * source)\n   const 'rtype_name` *src;\n   'rtype_name` * restrict dest;\n   'rtype_name` *destptr;\n-  int n;\n   int packed;\n \n   /* TODO: Investigate how we can figure out if this is a temporary\n@@ -55,7 +54,7 @@ internal_pack_'rtype_ccode` ('rtype` * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -91,7 +90,7 @@ internal_pack_'rtype_ccode` ('rtype` * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "b6ca9b242fe07962180b76062a109ef34a108777", "filename": "libgfortran/m4/in_unpack.m4", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Fin_unpack.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Fin_unpack.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fin_unpack.m4?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -42,15 +42,14 @@ internal_unpack_'rtype_ccode` ('rtype` * d, const 'rtype_name` * src)\n   index_type dim;\n   index_type dsize;\n   'rtype_name` * restrict dest;\n-  int n;\n \n   dest = d->base_addr;\n   if (src == dest || !src)\n     return;\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -80,7 +79,7 @@ internal_unpack_'rtype_ccode` ('rtype` * d, const 'rtype_name` * src)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "108911685dedc3d7b101fd16c06dfbdc1e582409", "filename": "libgfortran/m4/reshape.m4", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Freshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Freshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Freshape.m4?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -76,8 +76,6 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n   const 'rtype_name` *pptr;\n \n   const 'rtype_name` *src;\n-  int n;\n-  int dim;\n   int sempty, pempty, shape_empty;\n   index_type shape_data[GFC_MAX_DIMENSIONS];\n \n@@ -91,7 +89,7 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n \n   shape_empty = 0;\n \n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n       shape_data[n] = shape->base_addr[n * GFC_DESCRIPTOR_STRIDE(shape,0)];\n       if (shape_data[n] <= 0)\n@@ -106,7 +104,7 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n       index_type alloc_size;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rex = shape_data[n];\n \n@@ -133,7 +131,7 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       pempty = 0;\n-      for (n = 0; n < pdim; n++)\n+      for (index_type n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = GFC_DESCRIPTOR_STRIDE(pad,n);\n@@ -164,7 +162,7 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n       index_type ret_extent, source_extent;\n \n       rs = 1;\n-      for (n = 0; n < rdim; n++)\n+      for (index_type n = 0; n < rdim; n++)\n \t{\n \t  rs *= shape_data[n];\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(ret,n);\n@@ -177,7 +175,7 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n \n       source_extent = 1;\n       sdim = GFC_DESCRIPTOR_RANK (source);\n-      for (n = 0; n < sdim; n++)\n+      for (index_type n = 0; n < sdim; n++)\n \t{\n \t  index_type se;\n \t  se = GFC_DESCRIPTOR_EXTENT(source,n);\n@@ -194,10 +192,10 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n \t  int seen[GFC_MAX_DIMENSIONS];\n \t  index_type v;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    seen[n] = 0;\n \n-\t  for (n = 0; n < rdim; n++)\n+\t  for (index_type n = 0; n < rdim; n++)\n \t    {\n \t      v = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n \n@@ -215,8 +213,9 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n     }\n \n   rsize = 1;\n-  for (n = 0; n < rdim; n++)\n+  for (index_type n = 0; n < rdim; n++)\n     {\n+      index_type dim;\n       if (order)\n         dim = order->base_addr[n * GFC_DESCRIPTOR_STRIDE(order,0)] - 1;\n       else\n@@ -247,7 +246,7 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n \n   ssize = 1;\n   sempty = 0;\n-  for (n = 0; n < sdim; n++)\n+  for (index_type n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -287,7 +286,7 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n       src = pptr;\n       sptr = pptr;\n       sdim = pdim;\n-      for (dim = 0; dim < pdim; dim++)\n+      for (index_type dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n@@ -307,7 +306,7 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n       scount[0]++;\n \n       /* Advance to the next destination element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (rcount[n] == rextent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment\n@@ -347,7 +346,7 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n                   /* Switch to the pad array.  */\n                   sptr = NULL;\n                   sdim = pdim;\n-                  for (dim = 0; dim < pdim; dim++)\n+                  for (index_type dim = 0; dim < pdim; dim++)\n                     {\n                       scount[dim] = pcount[dim];\n                       sextent[dim] = pextent[dim];"}, {"sha": "ac0b88038a3cc992ff22a7259130ab3df675c10f", "filename": "libgfortran/m4/shape.m4", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Fshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Fshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fshape.m4?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -37,12 +37,10 @@ void\n shape_'rtype_kind` ('rtype` * const restrict ret, \n \tconst array_t * const restrict array)\n {\n-  int n;\n   index_type stride;\n   index_type extent;\n-  int rank;\n \n-  rank = GFC_DESCRIPTOR_RANK (array);\n+  int rank = GFC_DESCRIPTOR_RANK (array);\n \n   if (ret->base_addr == NULL)\n     {\n@@ -56,7 +54,7 @@ shape_'rtype_kind` ('rtype` * const restrict ret,\n   if (GFC_DESCRIPTOR_EXTENT(ret,0) < 1)\n     return;\n \n-  for (n = 0; n < rank; n++)\n+  for (index_type n = 0; n < rank; n++)\n     {\n       extent = GFC_DESCRIPTOR_EXTENT(array,n);\n       ret->base_addr[n * stride] = extent > 0 ? extent : 0 ;"}, {"sha": "b5a0b4ed363d6d0668455c7d131769e522a1873c", "filename": "libgfortran/m4/spread.m4", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Fspread.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fm4%2Fspread.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fspread.m4?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -228,10 +228,8 @@ spread_'rtype_code` ('rtype` *ret, const 'rtype` *source,\n \n void\n spread_scalar_'rtype_code` ('rtype` *ret, const 'rtype_name` *source,\n-\t\t\tconst index_type along, const index_type pncopies)\n+\t\t\tconst index_type along, const index_type ncopies)\n {\n-  int n;\n-  int ncopies = pncopies;\n   'rtype_name` * restrict dest;\n   index_type stride;\n \n@@ -257,7 +255,7 @@ spread_scalar_'rtype_code` ('rtype` *ret, const 'rtype_name` *source,\n   dest = ret->base_addr;\n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);\n \n-  for (n = 0; n < ncopies; n++)\n+  for (index_type n = 0; n < ncopies; n++)\n     {\n       *dest = *source;\n       dest += stride;"}, {"sha": "35af02cb3d99197420e05c9c82cfc324b540665b", "filename": "libgfortran/runtime/bounds.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fruntime%2Fbounds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fruntime%2Fbounds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fbounds.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -62,15 +62,14 @@ bounds_ifunction_return (array_t * a, const index_type * extent,\n \t\t\t const char * a_name, const char * intrinsic)\n {\n   int empty;\n-  int n;\n   int rank;\n   index_type a_size;\n \n   rank = GFC_DESCRIPTOR_RANK (a);\n   a_size = size0 (a);\n \n   empty = 0;\n-  for (n = 0; n < rank; n++)\n+  for (index_type n = 0; n < rank; n++)\n     {\n       if (extent[n] == 0)\n \tempty = 1;\n@@ -89,7 +88,7 @@ bounds_ifunction_return (array_t * a, const index_type * extent,\n \t\t       \" intrinsic: should not be zero-sized\",\n \t\t       a_name, intrinsic);\n \n-      for (n = 0; n < rank; n++)\n+      for (index_type n = 0; n < rank; n++)\n \t{\n \t  index_type a_extent;\n \t  a_extent = GFC_DESCRIPTOR_EXTENT(a, n);"}, {"sha": "0721ac837ff345e1587ca058030e7a0fbc071c44", "filename": "libgfortran/runtime/in_pack_generic.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fruntime%2Fin_pack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fruntime%2Fin_pack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_pack_generic.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -41,7 +41,6 @@ internal_pack (gfc_array_char * source)\n   const char *src;\n   char *dest;\n   void *destptr;\n-  int n;\n   int packed;\n   index_type size;\n   index_type type_size;\n@@ -163,7 +162,7 @@ internal_pack (gfc_array_char * source)\n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(source,n);\n@@ -199,7 +198,7 @@ internal_pack (gfc_array_char * source)\n       src += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}, {"sha": "866b4f0f5ecbd8889038bc46d05e68eab27156d1", "filename": "libgfortran/runtime/in_unpack_generic.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fruntime%2Fin_unpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a157266876058eee921323240e4bfd7e5a84fba/libgfortran%2Fruntime%2Fin_unpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_unpack_generic.c?ref=7a157266876058eee921323240e4bfd7e5a84fba", "patch": "@@ -40,8 +40,7 @@ internal_unpack (gfc_array_char * d, const void * s)\n   index_type dsize;\n   char *dest;\n   const char *src;\n-  int n;\n-  int size;\n+  index_type size;\n   int type_size;\n \n   dest = d->base_addr;\n@@ -190,7 +189,7 @@ internal_unpack (gfc_array_char * d, const void * s)\n \n   dim = GFC_DESCRIPTOR_RANK (d);\n   dsize = 1;\n-  for (n = 0; n < dim; n++)\n+  for (index_type n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       stride[n] = GFC_DESCRIPTOR_STRIDE(d,n);\n@@ -223,7 +222,7 @@ internal_unpack (gfc_array_char * d, const void * s)\n       dest += stride0;\n       count[0]++;\n       /* Advance to the next source element.  */\n-      n = 0;\n+      index_type n = 0;\n       while (count[n] == extent[n])\n         {\n           /* When we get to the end of a dimension, reset it and increment"}]}