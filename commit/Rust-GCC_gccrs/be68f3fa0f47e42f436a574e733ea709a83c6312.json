{"sha": "be68f3fa0f47e42f436a574e733ea709a83c6312", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU2OGYzZmEwZjQ3ZTQyZjQzNmE1NzRlNzMzZWE3MDlhODNjNjMxMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-06-23T07:32:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-06-23T07:32:45Z"}, "message": "decl.c (bad_specifiers): Add const location_t* parameter and use locations in error messages about...\n\n/cp\n2018-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (bad_specifiers): Add const location_t* parameter and\n\tuse locations in error messages about 'inline' and 'virtual'.\n\t(mark_inline_variable): Add location_t parameter and use it in\n\terror_at and pedwarn messages.\n\t(grokdeclarator): Use declspecs->locations[ds_constexpr],\n\tdeclspecs->locations[ds_concept], declspecs->locations[ds_virtual],\n\tdeclspecs->locations[ds_inline] in many error messages; adjust\n\tbad_specifiers and mark_inline_variable calls.\n\t(grokvardecl): Use declspecs->locations[ds_concept] in error message.\n\n/testsuite\n2018-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/concepts/locations1.C: New.\n\t* g++.dg/cpp0x/locations1.C: Likewise.\n\t* g++.dg/cpp1z/inline-var2.C: Test locations too.\n\t* g++.dg/cpp1z/inline-var3.C: Likewise.\n\nFrom-SVN: r261982", "tree": {"sha": "bc4528f34d36534d8e448b2148346f52c00b1616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc4528f34d36534d8e448b2148346f52c00b1616"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be68f3fa0f47e42f436a574e733ea709a83c6312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be68f3fa0f47e42f436a574e733ea709a83c6312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be68f3fa0f47e42f436a574e733ea709a83c6312", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be68f3fa0f47e42f436a574e733ea709a83c6312/comments", "author": null, "committer": null, "parents": [{"sha": "9f8a749e915a1bbafc8bdbfcf3b8342d3db58cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8a749e915a1bbafc8bdbfcf3b8342d3db58cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f8a749e915a1bbafc8bdbfcf3b8342d3db58cb2"}], "stats": {"total": 274, "additions": 181, "deletions": 93}, "files": [{"sha": "aec8eb79b7d64200d2984b45957a116e0d07d0ed", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=be68f3fa0f47e42f436a574e733ea709a83c6312", "patch": "@@ -1,3 +1,15 @@\n+2018-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (bad_specifiers): Add const location_t* parameter and\n+\tuse locations in error messages about 'inline' and 'virtual'.\n+\t(mark_inline_variable): Add location_t parameter and use it in\n+\terror_at and pedwarn messages.\n+\t(grokdeclarator): Use declspecs->locations[ds_constexpr],\n+\tdeclspecs->locations[ds_concept], declspecs->locations[ds_virtual],\n+\tdeclspecs->locations[ds_inline] in many error messages; adjust\n+\tbad_specifiers and mark_inline_variable calls.\n+\t(grokvardecl): Use declspecs->locations[ds_concept] in error message.\n+\n 2018-06-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86219 - ICE with erroneous initializer in template."}, {"sha": "c04b9b7d457f122b8ddad6535c91ba811c67553d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 67, "deletions": 42, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=be68f3fa0f47e42f436a574e733ea709a83c6312", "patch": "@@ -8406,40 +8406,48 @@ bad_specifiers (tree object,\n \t\tint quals,\n \t\tint inlinep,\n \t\tint friendp,\n-\t\tint raises)\n+\t\tint raises,\n+\t\tconst location_t* locations)\n {\n   switch (type)\n     {\n       case BSP_VAR:\n \tif (virtualp)\n-\t  error (\"%qD declared as a %<virtual%> variable\", object);\n+\t  error_at (locations[ds_virtual],\n+\t\t    \"%qD declared as a %<virtual%> variable\", object);\n \tif (quals)\n \t  error (\"%<const%> and %<volatile%> function specifiers on \"\n \t         \"%qD invalid in variable declaration\", object);\n \tbreak;\n       case BSP_PARM:\n \tif (virtualp)\n-\t  error (\"%qD declared as a %<virtual%> parameter\", object);\n+\t  error_at (locations[ds_virtual],\n+\t\t    \"%qD declared as a %<virtual%> parameter\", object);\n \tif (inlinep)\n-\t  error (\"%qD declared as an %<inline%> parameter\", object);\n+\t  error_at (locations[ds_inline],\n+\t\t    \"%qD declared as an %<inline%> parameter\", object);\n \tif (quals)\n \t  error (\"%<const%> and %<volatile%> function specifiers on \"\n \t  \t \"%qD invalid in parameter declaration\", object);\n \tbreak;\n       case BSP_TYPE:\n \tif (virtualp)\n-\t  error (\"%qD declared as a %<virtual%> type\", object);\n+\t  error_at (locations[ds_virtual],\n+\t\t    \"%qD declared as a %<virtual%> type\", object);\n \tif (inlinep)\n-\t  error (\"%qD declared as an %<inline%> type\", object);\n+\t  error_at (locations[ds_inline],\n+\t\t    \"%qD declared as an %<inline%> type\", object);\n \tif (quals)\n \t  error (\"%<const%> and %<volatile%> function specifiers on \"\n \t  \t \"%qD invalid in type declaration\", object);\n \tbreak;\n       case BSP_FIELD:\n \tif (virtualp)\n-\t  error (\"%qD declared as a %<virtual%> field\", object);\n+\t  error_at (locations[ds_virtual],\n+\t\t    \"%qD declared as a %<virtual%> field\", object);\n \tif (inlinep)\n-\t  error (\"%qD declared as an %<inline%> field\", object);\n+\t  error_at (locations[ds_inline],\n+\t\t    \"%qD declared as an %<inline%> field\", object);\n \tif (quals)\n \t  error (\"%<const%> and %<volatile%> function specifiers on \"\n \t  \t \"%qD invalid in field declaration\", object);\n@@ -9254,7 +9262,8 @@ grokvardecl (tree type,\n     {\n       if (!processing_template_decl)\n         {\n-          error (\"a non-template variable cannot be %<concept%>\");\n+          error_at (declspecs->locations[ds_concept],\n+\t\t    \"a non-template variable cannot be %<concept%>\");\n           return NULL_TREE;\n         }\n       else\n@@ -9920,18 +9929,17 @@ check_var_type (tree identifier, tree type)\n /* Handle declaring DECL as an inline variable.  */\n \n static void\n-mark_inline_variable (tree decl)\n+mark_inline_variable (tree decl, location_t loc)\n {\n   bool inlinep = true;\n   if (! toplevel_bindings_p ())\n     {\n-      error (\"%<inline%> specifier invalid for variable \"\n-\t     \"%qD declared at block scope\", decl);\n+      error_at (loc, \"%<inline%> specifier invalid for variable \"\n+\t\t\"%qD declared at block scope\", decl);\n       inlinep = false;\n     }\n   else if (cxx_dialect < cxx17)\n-    pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n-\t     \"inline variables are only available \"\n+    pedwarn (loc, 0, \"inline variables are only available \"\n \t     \"with -std=c++17 or -std=gnu++17\");\n   if (inlinep)\n     {\n@@ -10375,13 +10383,15 @@ grokdeclarator (const cp_declarator *declarator,\n \n   if (concept_p && typedef_p)\n     {\n-      error (\"%<concept%> cannot appear in a typedef declaration\");\n+      error_at (declspecs->locations[ds_concept],\n+\t\t\"%<concept%> cannot appear in a typedef declaration\");\n       return error_mark_node;\n     }\n \n   if (constexpr_p && typedef_p)\n     {\n-      error (\"%<constexpr%> cannot appear in a typedef declaration\");\n+      error_at (declspecs->locations[ds_constexpr],\n+\t\t\"%<constexpr%> cannot appear in a typedef declaration\");\n       return error_mark_node;\n     }\n \n@@ -10485,7 +10495,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t \"ISO C++ forbids declaration of %qs with no type\", name);\n       else\n \twarning (OPT_Wreturn_type,\n-                 \"ISO C++ forbids declaration of %qs with no type\", name);\n+\t\t \"ISO C++ forbids declaration of %qs with no type\", name);\n \n       if (type_was_error_mark_node && template_parm_flag)\n \t/* FIXME we should be able to propagate the error_mark_node as is\n@@ -10731,12 +10741,14 @@ grokdeclarator (const cp_declarator *declarator,\n \n       /* Function parameters cannot be concept. */\n       if (concept_p)\n-          error (\"a parameter cannot be declared %<concept%>\");\n+\terror_at (declspecs->locations[ds_concept],\n+\t\t  \"a parameter cannot be declared %<concept%>\");\n       /* Function parameters cannot be constexpr.  If we saw one, moan\n          and pretend it wasn't there.  */\n       else if (constexpr_p)\n         {\n-          error (\"a parameter cannot be declared %<constexpr%>\");\n+          error_at (declspecs->locations[ds_constexpr],\n+\t\t    \"a parameter cannot be declared %<constexpr%>\");\n           constexpr_p = 0;\n         }\n     }\n@@ -11210,7 +11222,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t      explicitp = 2;\n \t\t    if (virtualp)\n \t\t      {\n-\t\t\tpermerror (input_location,\n+\t\t\tpermerror (declspecs->locations[ds_virtual],\n \t\t\t\t   \"constructors cannot be declared %<virtual%>\");\n \t\t\tvirtualp = 0;\n \t\t      }\n@@ -11768,7 +11780,8 @@ grokdeclarator (const cp_declarator *declarator,\n \n       bad_specifiers (decl, BSP_TYPE, virtualp,\n \t\t      memfn_quals != TYPE_UNQUALIFIED,\n-\t\t      inlinep, friendp, raises != NULL_TREE);\n+\t\t      inlinep, friendp, raises != NULL_TREE,\n+\t\t      declspecs->locations);\n \n       if (decl_spec_seq_has_spec_p (declspecs, ds_alias))\n \t/* Acknowledge that this was written:\n@@ -11974,7 +11987,8 @@ grokdeclarator (const cp_declarator *declarator,\n \n \tbad_specifiers (decl, BSP_PARM, virtualp,\n \t\t\tmemfn_quals != TYPE_UNQUALIFIED,\n-\t\t\tinlinep, friendp, raises != NULL_TREE);\n+\t\t\tinlinep, friendp, raises != NULL_TREE,\n+\t\t\tdeclspecs->locations);\n       }\n     else if (decl_context == FIELD)\n       {\n@@ -12061,17 +12075,19 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t   ARM 9.5 */\n \t\tif (virtualp && TREE_CODE (ctype) == UNION_TYPE)\n \t\t  {\n-\t\t    error (\"function %qD declared %<virtual%> inside a union\",\n-\t\t\t   unqualified_id);\n+\t\t    error_at (declspecs->locations[ds_virtual],\n+\t\t\t      \"function %qD declared %<virtual%> inside a union\",\n+\t\t\t      unqualified_id);\n \t\t    return error_mark_node;\n \t\t  }\n \n \t\tif (virtualp\n \t\t    && identifier_p (unqualified_id)\n \t\t    && IDENTIFIER_NEWDEL_OP_P (unqualified_id))\n \t\t  {\n-\t\t    error (\"%qD cannot be declared %<virtual%>, since it \"\n-\t\t\t   \"is always static\", unqualified_id);\n+\t\t    error_at (declspecs->locations[ds_virtual],\n+\t\t\t      \"%qD cannot be declared %<virtual%>, since it \"\n+\t\t\t      \"is always static\", unqualified_id);\n \t\t    virtualp = 0;\n \t\t  }\n \t      }\n@@ -12097,12 +12113,14 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t  }\n                 if (concept_p)\n                   {\n-                    error (\"a destructor cannot be %<concept%>\");\n+                    error_at (declspecs->locations[ds_concept],\n+\t\t\t      \"a destructor cannot be %<concept%>\");\n                     return error_mark_node;\n                   }\n                 if (constexpr_p)\n                   {\n-                    error (\"a destructor cannot be %<constexpr%>\");\n+                    error_at (declspecs->locations[ds_constexpr],\n+\t\t\t      \"a destructor cannot be %<constexpr%>\");\n                     return error_mark_node;\n                   }\n \t      }\n@@ -12116,12 +12134,14 @@ grokdeclarator (const cp_declarator *declarator,\n \t    if (sfk == sfk_constructor)\n \t      if (concept_p)\n \t\t{\n-\t\t  error (\"a constructor cannot be %<concept%>\");\n+\t\t  error_at (declspecs->locations[ds_concept],\n+\t\t\t    \"a constructor cannot be %<concept%>\");\n \t\t  return error_mark_node;\n \t\t}\n \t    if (concept_p)\n \t      {\n-\t\terror (\"a concept cannot be a member function\");\n+\t\terror_at (declspecs->locations[ds_concept],\n+\t\t\t  \"a concept cannot be a member function\");\n \t\tconcept_p = false;\n \t      }\n \n@@ -12248,8 +12268,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t\t\t    VAR_DECL, unqualified_id, type);\n \t\tset_linkage_for_static_data_member (decl);\n \t\tif (concept_p)\n-\t\t    error (\"static data member %qE declared %<concept%>\",\n-\t\t\t   unqualified_id);\n+\t\t  error_at (declspecs->locations[ds_concept],\n+\t\t\t    \"static data member %qE declared %<concept%>\",\n+\t\t\t    unqualified_id);\n \t\telse if (constexpr_p && !initialized)\n \t\t  {\n \t\t    error (\"%<constexpr%> static data member %qD must have an \"\n@@ -12258,7 +12279,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t  }\n \n \t\tif (inlinep)\n-\t\t  mark_inline_variable (decl);\n+\t\t  mark_inline_variable (decl, declspecs->locations[ds_inline]);\n \n \t\tif (!DECL_VAR_DECLARED_INLINE_P (decl)\n \t\t    && !(cxx_dialect >= cxx17 && constexpr_p))\n@@ -12280,12 +12301,14 @@ grokdeclarator (const cp_declarator *declarator,\n \t    else\n \t      {\n \t\tif (concept_p)\n-\t\t  error (\"non-static data member %qE declared %<concept%>\",\n-\t\t\t unqualified_id);\n+\t\t  error_at (declspecs->locations[ds_concept],\n+\t\t\t    \"non-static data member %qE declared %<concept%>\",\n+\t\t\t    unqualified_id);\n                 else if (constexpr_p)\n \t\t  {\n-\t\t    error (\"non-static data member %qE declared %<constexpr%>\",\n-\t\t\t   unqualified_id);\n+\t\t    error_at (declspecs->locations[ds_constexpr],\n+\t\t\t      \"non-static data member %qE declared %<constexpr%>\",\n+\t\t\t      unqualified_id);\n \t\t    constexpr_p = false;\n \t\t  }\n \t\tdecl = build_decl (input_location,\n@@ -12320,7 +12343,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t    bad_specifiers (decl, BSP_FIELD, virtualp,\n \t\t\t    memfn_quals != TYPE_UNQUALIFIED,\n \t\t\t    staticp ? false : inlinep, friendp,\n-\t\t\t    raises != NULL_TREE);\n+\t\t\t    raises != NULL_TREE,\n+\t\t\t    declspecs->locations);\n \t  }\n       }\n     else if (TREE_CODE (type) == FUNCTION_TYPE\n@@ -12363,11 +12387,11 @@ grokdeclarator (const cp_declarator *declarator,\n \t    && pedantic)\n \t  {\n \t    if (storage_class == sc_static)\n-\t      pedwarn (input_location, OPT_Wpedantic, \n+\t      pedwarn (declspecs->locations[ds_storage_class], OPT_Wpedantic, \n \t\t       \"%<static%> specifier invalid for function %qs \"\n \t\t       \"declared out of global scope\", name);\n \t    else\n-\t      pedwarn (input_location, OPT_Wpedantic, \n+\t      pedwarn (declspecs->locations[ds_inline], OPT_Wpedantic, \n \t\t       \"%<inline%> specifier invalid for function %qs \"\n \t\t       \"declared out of global scope\", name);\n \t  }\n@@ -12456,7 +12480,8 @@ grokdeclarator (const cp_declarator *declarator,\n \n \tbad_specifiers (decl, BSP_VAR, virtualp,\n \t\t\tmemfn_quals != TYPE_UNQUALIFIED,\n-\t\t\tinlinep, friendp, raises != NULL_TREE);\n+\t\t\tinlinep, friendp, raises != NULL_TREE,\n+\t\t\tdeclspecs->locations);\n \n \tif (ctype)\n \t  {\n@@ -12489,7 +12514,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  }\n \n \tif (inlinep)\n-\t  mark_inline_variable (decl);\n+\t  mark_inline_variable (decl, declspecs->locations[ds_inline]);\n \tif (innermost_code == cdk_decomp)\n \t  {\n \t    gcc_assert (declarator && declarator->kind == cdk_decomp);"}, {"sha": "01218b3bafd2ea3f017e2c16d6e9b5bba90e925c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be68f3fa0f47e42f436a574e733ea709a83c6312", "patch": "@@ -1,3 +1,10 @@\n+2018-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/concepts/locations1.C: New.\n+\t* g++.dg/cpp0x/locations1.C: Likewise.\n+\t* g++.dg/cpp1z/inline-var2.C: Test locations too.\n+\t* g++.dg/cpp1z/inline-var3.C: Likewise.\n+\n 2018-06-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/86281"}, {"sha": "6e7529b0ee1a9d22047bb5bef9d047643216393e", "filename": "gcc/testsuite/g++.dg/concepts/locations1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Flocations1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Flocations1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Flocations1.C?ref=be68f3fa0f47e42f436a574e733ea709a83c6312", "patch": "@@ -0,0 +1,15 @@\n+// { dg-additional-options \"-std=c++17 -fconcepts\" }\n+\n+struct S\n+{\n+  concept S();  // { dg-error \"3:a constructor cannot be .concept.\" }\n+  concept int s = 1;  // { dg-error \"3:non-static data member .s. declared .concept.\" }\n+  concept void foo();  // { dg-error \"3:a concept cannot be a member function\" }\n+  concept ~S();  // { dg-error \"3:a destructor cannot be .concept.\" }\n+};\n+\n+typedef concept int my_int;  // { dg-error \"9:.concept. cannot appear in a typedef declaration\" }\n+\n+void bar(concept int);  // { dg-error \"10:a parameter cannot be declared .concept.\" }\n+\n+concept int i = 0;  // { dg-error \"1:a non-template variable cannot be .concept.\" }"}, {"sha": "6de0368fcbc89472756a609b8dd7e259f3f665e4", "filename": "gcc/testsuite/g++.dg/cpp0x/locations1.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flocations1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flocations1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flocations1.C?ref=be68f3fa0f47e42f436a574e733ea709a83c6312", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile { target c++11 } }\n+\n+void foo()\n+{\n+  static void bar1();  // { dg-error \"3:.static. specifier invalid\" }\n+// { dg-error \"3:cannot declare static function\" \"\" { target *-*-* } .-1 }\n+  inline void bar2();  // { dg-error \"3:.inline. specifier invalid\" }\n+}\n+\n+struct S\n+{\n+  virtual S();  // { dg-error \"3:constructors cannot be declared .virtual.\" }\n+  constexpr int s = 1;  // { dg-error \"3:non-static data member .s. declared .constexpr.\" }\n+  constexpr ~S();  // { dg-error \"3:a destructor cannot be .constexpr.\" }\n+};\n+\n+typedef constexpr int my_int;  // { dg-error \"9:.constexpr. cannot appear in a typedef declaration\" }\n+\n+union U\n+{\n+  virtual void foo();  // { dg-error \"3:function .foo. declared .virtual. inside a union\" }\n+};\n+\n+struct T\n+{\n+  virtual void operator delete(void*);  // { dg-error \"3:.operator delete. cannot be declared .virtual.\" }\n+};\n+\n+void bar(constexpr int);  // { dg-error \"10:a parameter cannot be declared .constexpr.\" }"}, {"sha": "1a016fa8216bb3b187515eeab27cedaa41e12ebc", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var2.C", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var2.C?ref=be68f3fa0f47e42f436a574e733ea709a83c6312", "patch": "@@ -1,57 +1,57 @@\n // { dg-do compile { target c++11 } }\n // { dg-options \"-Wdeprecated\" }\n \n-inline int var1 = 4;\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-static inline int var7 = 9;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+inline int var1 = 4;\t\t\t\t// { dg-warning \"1:inline variables are only available with\" \"\" { target c++14_down } }\n+static inline int var7 = 9;\t\t\t// { dg-warning \"8:inline variables are only available with\" \"\" { target c++14_down } }\n namespace N\n {\n-  int inline var2;\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  inline const int var6 = 8;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static inline double var8 = 2.0;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  extern inline char var10;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  int inline var2;\t\t\t\t// { dg-warning \"7:inline variables are only available with\" \"\" { target c++14_down } }\n+  inline const int var6 = 8;\t\t\t// { dg-warning \"3:inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline double var8 = 2.0;\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  extern inline char var10;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n }\n struct S\n {\n   static constexpr int var3 = 5;\n-  static inline int var4 = 6;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline int var4 = 6;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n   static constexpr int var5 = 7;\n-  static inline double var9 = 3.0;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static constexpr inline int var11 = 11;\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline double var9 = 3.0;\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  static constexpr inline int var11 = 11;\t// { dg-warning \"20:inline variables are only available with\" \"\" { target c++14_down } }\n };\n const int S::var3;\t\t\t\t// { dg-warning \"redundant redeclaration of\" \"\" { target c++17 } }\n const int S::var3;\t\t\t\t// { dg-error \"redefinition of\" \"\" { target c++14_down } }\n extern int foo (int);\t\t\t\t// { dg-warning \"redundant redeclaration of\" \"\" { target c++17 } .-1 }\n extern int bar (int);\n struct T { T () { t = foo (3); } T (int x) { t = foo (x); } int t; };\n-inline int var12 = foo (0);\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-int inline var13 = foo (1);\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+inline int var12 = foo (0);\t\t\t// { dg-warning \"1:inline variables are only available with\" \"\" { target c++14_down } }\n+int inline var13 = foo (1);\t\t\t// { dg-warning \"5:inline variables are only available with\" \"\" { target c++14_down } }\n struct U\n {\n-  static inline int var14 = foo (2);\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static inline T var15;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static inline T var16 = 4;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static int inline var17 = foo (5);\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline int var14 = foo (2);\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline T var15;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline T var16 = 4;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  static int inline var17 = foo (5);\t\t// { dg-warning \"14:inline variables are only available with\" \"\" { target c++14_down } }\n   static constexpr double var18 = 4.0;\n };\n-extern inline int var19;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-extern inline int var20;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+extern inline int var19;\t\t\t// { dg-warning \"8:inline variables are only available with\" \"\" { target c++14_down } }\n+extern inline int var20;\t\t\t// { dg-warning \"8:inline variables are only available with\" \"\" { target c++14_down } }\n int &ref19 = var19;\t\t\t\t// { dg-error \"odr-used inline variable 'var19' is not defined\" \"\" { target *-*-* } .-2 }\n int sz20 = sizeof (var20);\n struct V\n {\n-  static struct A var21;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } .+1 }\n+  static struct A var21;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } .+1 }\n   static inline struct B var22;\t\t\t// { dg-error \"has incomplete type\" }\n   static inline struct C var23 = {};\t\t// { dg-error \"has incomplete type\" }\n-};\t\t\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } .-1 }\n+};\t\t\t\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } .-1 }\n struct W\n {\n-  static inline int var24;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static inline const int var25;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline int var24;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline const int var25;\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n \t\t\t\t\t\t// { dg-error \"uninitialized const\" \"\" { target *-*-* } .-1 }\n-  static inline int var26 = 5;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static inline const int var27 = 6;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static inline double var28 = { 4.0 };\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static const inline double var29 = { 5.0 };\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline int var26 = 5;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline const int var27 = 6;\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline double var28 = { 4.0 };\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  static const inline double var29 = { 5.0 };\t// { dg-warning \"16:inline variables are only available with\" \"\" { target c++14_down } }\n };\n int W::var24;\t\t\t\t\t// { dg-error \"redefinition of\" }\n const int W::var25;\t\t\t\t// { dg-error \"redefinition of\" }\n@@ -61,23 +61,23 @@ double W::var28;\t\t\t\t// { dg-error \"redefinition of\" }\n double const W::var29;\t\t\t\t// { dg-error \"redefinition of\" }\n struct X\n {\n-  inline int var30;\t\t\t\t// { dg-error \"'var30' declared as an 'inline' field\" }\n+  inline int var30;\t\t\t\t// { dg-error \"3:'var30' declared as an 'inline' field\" }\n };\n-inline typedef int TT;\t\t\t\t// { dg-error \"'TT' declared as an 'inline' type\" }\n+inline typedef int TT;\t\t\t\t// { dg-error \"1:'TT' declared as an 'inline' type\" }\n int\n-foo (inline int var31)\t\t\t\t// { dg-error \"'var31' declared as an 'inline' parameter\" }\n+foo (inline int var31)\t\t\t\t// { dg-error \"6:'var31' declared as an 'inline' parameter\" }\n {\n-  inline int var32;\t\t\t\t// { dg-error \"'inline' specifier invalid for variable 'var32' declared at block scope\" }\n-  static inline int var33;\t\t\t// { dg-error \"'inline' specifier invalid for variable 'var33' declared at block scope\" }\n+  inline int var32;\t\t\t\t// { dg-error \"3:'inline' specifier invalid for variable 'var32' declared at block scope\" }\n+  static inline int var33;\t\t\t// { dg-error \"10:'inline' specifier invalid for variable 'var33' declared at block scope\" }\n   return 0;\n }\n template <typename A, typename B, typename C>\n struct Y\n {\n-  static A var34;\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } .+1 }\n+  static A var34;\t\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } .+1 }\n   static inline B var35;\t\t\t// { dg-error \"has incomplete type\" }\n   static inline C var36;\t\t\t// { dg-error \"has incomplete type\" }\n-};\t\t\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } .-1 }\n+};\t\t\t\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } .-1 }\n struct A;\n struct B;\n struct C;\n@@ -88,15 +88,15 @@ C *ptr36 = &Y<A, B, C>::var36;\n template <int N>\n struct Z\n {\n-  static inline int var37;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static inline const int var38;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline int var37;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline const int var38;\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n \t\t\t\t\t\t// { dg-error \"uninitialized const\" \"\" { target *-*-* } .-1 }\n-  static inline int var39 = 5;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static inline const int var40 = 6;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static inline double var41 = { 4.0 };\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  static const inline double var42 = { 5.0 };\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline int var39 = 5;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline const int var40 = 6;\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline double var41 = { 4.0 };\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n+  static const inline double var42 = { 5.0 };\t// { dg-warning \"16:inline variables are only available with\" \"\" { target c++14_down } }\n   static constexpr int var43 = 5;\n-  static constexpr inline int var44 = 5;\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static constexpr inline int var44 = 5;\t// { dg-warning \"20:inline variables are only available with\" \"\" { target c++14_down } }\n };\n template <int N>\n int Z<N>::var37;\t\t\t\t// { dg-error \"redefinition of\" }"}, {"sha": "d3607937780ca72bbed71b4a4043fdbd897c121c", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var3.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be68f3fa0f47e42f436a574e733ea709a83c6312/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var3.C?ref=be68f3fa0f47e42f436a574e733ea709a83c6312", "patch": "@@ -4,39 +4,39 @@\n // aren't emitted into assembly even at -O0.\n // { dg-final { scan-assembler-not \"inlvarvariable\" } }\n \n-inline int inlvarvariable1 = 1;\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-const inline int inlvarvariable2 = 2;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+inline int inlvarvariable1 = 1;\t\t\t\t// { dg-warning \"1:inline variables are only available with\" \"\" { target c++14_down } }\n+const inline int inlvarvariable2 = 2;\t\t\t// { dg-warning \"7:inline variables are only available with\" \"\" { target c++14_down } }\n namespace N\n {\n-  int inline inlvarvariable3;\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n-  const int inline inlvarvariable4 = 4;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  int inline inlvarvariable3;\t\t\t\t// { dg-warning \"7:inline variables are only available with\" \"\" { target c++14_down } }\n+  const int inline inlvarvariable4 = 4;\t\t\t// { dg-warning \"13:inline variables are only available with\" \"\" { target c++14_down } }\n }\n struct S\n {\n-  static inline double inlvarvariable5 = 5.0;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline double inlvarvariable5 = 5.0;\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n #if __cplusplus >= 201103L\n   static constexpr int inlvarvariable6 = 6;\n-  static inline constexpr int inlvarvariable7 = 7;\t// { dg-warning \"inline variables are only available with\" \"\" { target { c++11 && c++14_down } } }\n+  static inline constexpr int inlvarvariable7 = 7;\t// { dg-warning \"10:inline variables are only available with\" \"\" { target { c++11 && c++14_down } } }\n #endif\n };\n template <int N>\t\t\t\t\t// { dg-warning \"variable templates only available with\" \"\" { target c++11_down } .+1 }\n-inline int inlvarvariable8;\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+inline int inlvarvariable8;\t\t\t\t// { dg-warning \"1:inline variables are only available with\" \"\" { target c++14_down } }\n template <int N>\t\t\t\t\t// { dg-warning \"variable templates only available with\" \"\" { target c++11_down } .+1 }\n-const int inline inlvarvariable9 = 9;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+const int inline inlvarvariable9 = 9;\t\t\t// { dg-warning \"11:inline variables are only available with\" \"\" { target c++14_down } }\n namespace N\n {\n   template <int N>\t\t\t\t\t// { dg-warning \"variable templates only available with\" \"\" { target c++11_down } .+1 }\n-  int inline inlvarvariable10 = 10;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  int inline inlvarvariable10 = 10;\t\t\t// { dg-warning \"7:inline variables are only available with\" \"\" { target c++14_down } }\n   template <int N>\t\t\t\t\t// { dg-warning \"variable templates only available with\" \"\" { target c++11_down } .+1 }\n-  const inline double inlvarvariable11 = 11.0;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  const inline double inlvarvariable11 = 11.0;\t\t// { dg-warning \"9:inline variables are only available with\" \"\" { target c++14_down } }\n }\n template <int N>\n struct T\n {\n-  static inline int inlvarvariable12 = 12;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline int inlvarvariable12 = 12;\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n #if __cplusplus >= 201103L\n   static constexpr int inlvarvariable13 = 13;\n-  static inline constexpr double inlvarvariable14 = 14.0; // { dg-warning \"inline variables are only available with\" \"\" { target { c++11 && c++14_down } } }\n+  static inline constexpr double inlvarvariable14 = 14.0; // { dg-warning \"10:inline variables are only available with\" \"\" { target { c++11 && c++14_down } } }\n #endif\n };\n #if __cplusplus < 201103L"}]}