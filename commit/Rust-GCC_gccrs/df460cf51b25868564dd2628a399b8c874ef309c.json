{"sha": "df460cf51b25868564dd2628a399b8c874ef309c", "node_id": "C_kwDOANBUbNoAKGRmNDYwY2Y1MWIyNTg2ODU2NGRkMjYyOGEzOTliOGM4NzRlZjMwOWM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-01T02:26:42Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-01T02:26:42Z"}, "message": "analyzer: more bounds-checking wording tweaks [PR106626]\n\nThis patch tweaks the wording of -Wanalyzer-out-of-bounds:\n\n* use the spellings/terminology of CWE:\n  * replace \"underread\" with \"under-read\", as per:\n     https://cwe.mitre.org/data/definitions/127.html\n  * replace \"overread\" with \"over-read\" as per:\n     https://cwe.mitre.org/data/definitions/126.html\n  * replace \"underflow\" with \"underwrite\" as per:\n    https://cwe.mitre.org/data/definitions/124.html\n\n* wherever known, specify the memory region of the bad access,\nso that it says e.g. \"heap-based buffer over-read\"\nor \"stack-based buffer over-read\"\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106626\n\t* bounds-checking.cc (out_of_bounds::get_memory_space): New.\n\t(buffer_overflow::emit): Use it.\n\t(class buffer_overread): Rename to...\n\t(class buffer_over_read): ...this.\n\t(buffer_over_read::emit): Specify which memory space the read is\n\tfrom, where known.  Change \"overread\" to \"over-read\".\n\t(class buffer_underflow): Rename to...\n\t(class buffer_underwrite): ...this.\n\t(buffer_underwrite::emit): Specify which memory space the write is\n\tto, where known.  Change \"underflow\" to \"underwrite\".\n\t(class buffer_underread): Rename to...\n\t(class buffer_under_read): Rename to...\n\t(buffer_under_read::emit): Specify which memory space the read is\n\tfrom, where known.  Change \"underread\" to \"under-read\".\n\t(symbolic_past_the_end::get_memory_space): New.\n\t(symbolic_buffer_overflow::emit): Use it.\n\t(class symbolic_buffer_overread): Rename to...\n\t(class symbolic_buffer_over_read): ...this.\n\t(symbolic_buffer_over_read::emit): Specify which memory space the\n\tread is from, where known.  Change \"overread\" to \"over-read\".\n\t(region_model::check_symbolic_bounds): Update for class renaming.\n\t(region_model::check_region_bounds): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106626\n\t* gcc.dg/analyzer/call-summaries-2.c: Update expected results.\n\t* gcc.dg/analyzer/out-of-bounds-1.c: Likewise.\n\t* gcc.dg/analyzer/out-of-bounds-2.c: Likewise.\n\t* gcc.dg/analyzer/out-of-bounds-3.c: Likewise.\n\t* gcc.dg/analyzer/out-of-bounds-4.c: Likewise.\n\t* gcc.dg/analyzer/out-of-bounds-5.c: Likewise.\n\t* gcc.dg/analyzer/out-of-bounds-container_of.c: Likewise.\n\t* gcc.dg/analyzer/out-of-bounds-read-char-arr.c: Likewise.  Rename\n\tfunctions from \"int_arr_\" to \"char_arr_\".\n\t* gcc.dg/analyzer/out-of-bounds-read-int-arr.c: Update expected\n\tresults.\n\t* gcc.dg/analyzer/out-of-bounds-read-struct-arr.c: New test.\n\t* gcc.dg/analyzer/out-of-bounds-write-char-arr.c: Update expected\n\tresults.  Rename functions from \"int_arr_\" to \"char_arr_\".\n\t* gcc.dg/analyzer/out-of-bounds-write-int-arr.c: Update expected\n\tresults.\n\t* gcc.dg/analyzer/out-of-bounds-write-struct-arr.c: New test.\n\t* gcc.dg/analyzer/pr101962.c: Update expected results.\n\t* gcc.dg/analyzer/realloc-5.c: Update expected results.\n\t* gcc.dg/analyzer/zlib-3.c: Update expected results.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "622fffcc4e92705df91d412e317fc1438b5be010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/622fffcc4e92705df91d412e317fc1438b5be010"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df460cf51b25868564dd2628a399b8c874ef309c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df460cf51b25868564dd2628a399b8c874ef309c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df460cf51b25868564dd2628a399b8c874ef309c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df460cf51b25868564dd2628a399b8c874ef309c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c655699ed51b0c987e5472767db48b19044ae05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c655699ed51b0c987e5472767db48b19044ae05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c655699ed51b0c987e5472767db48b19044ae05"}], "stats": {"total": 436, "additions": 327, "deletions": 109}, "files": [{"sha": "bc7d2dd17ae9207e7c68bd26d61ec696cf02bf3e", "filename": "gcc/analyzer/bounds-checking.cc", "status": "modified", "additions": 99, "deletions": 34, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Fanalyzer%2Fbounds-checking.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Fanalyzer%2Fbounds-checking.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fbounds-checking.cc?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -71,6 +71,11 @@ class out_of_bounds : public pending_diagnostic_subclass<out_of_bounds>\n   }\n \n protected:\n+  enum memory_space get_memory_space () const\n+  {\n+    return m_reg->get_memory_space ();\n+  }\n+\n   /* Potentially add a note about valid ways to index this array, such\n      as (given \"int arr[10];\"):\n        note: valid subscripts for 'arr' are '[0]' to '[9]'\n@@ -150,7 +155,7 @@ class buffer_overflow : public past_the_end\n   {\n     diagnostic_metadata m;\n     bool warned;\n-    switch (m_reg->get_memory_space ())\n+    switch (get_memory_space ())\n       {\n       default:\n \tm.add_cwe (787);\n@@ -234,22 +239,36 @@ class buffer_overflow : public past_the_end\n   }\n };\n \n-/* Concrete subclass to complain about buffer overreads.  */\n+/* Concrete subclass to complain about buffer over-reads.  */\n \n-class buffer_overread : public past_the_end\n+class buffer_over_read : public past_the_end\n {\n public:\n-  buffer_overread (const region *reg, tree diag_arg,\n-\t\t   byte_range range, tree byte_bound)\n+  buffer_over_read (const region *reg, tree diag_arg,\n+\t\t    byte_range range, tree byte_bound)\n   : past_the_end (reg, diag_arg, range, byte_bound)\n   {}\n \n   bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n+    bool warned;\n     m.add_cwe (126);\n-    bool warned = warning_meta (rich_loc, m, get_controlling_option (),\n-\t\t\t\t\"buffer overread\");\n+    switch (get_memory_space ())\n+      {\n+      default:\n+\twarned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t       \"buffer over-read\");\n+\tbreak;\n+      case MEMSPACE_STACK:\n+\twarned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t       \"stack-based buffer over-read\");\n+\tbreak;\n+      case MEMSPACE_HEAP:\n+\twarned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t       \"heap-based buffer over-read\");\n+\tbreak;\n+      }\n \n     if (warned)\n       {\n@@ -316,21 +335,35 @@ class buffer_overread : public past_the_end\n   }\n };\n \n-/* Concrete subclass to complain about buffer underflows.  */\n+/* Concrete subclass to complain about buffer underwrites.  */\n \n-class buffer_underflow : public out_of_bounds\n+class buffer_underwrite : public out_of_bounds\n {\n public:\n-  buffer_underflow (const region *reg, tree diag_arg, byte_range range)\n+  buffer_underwrite (const region *reg, tree diag_arg, byte_range range)\n   : out_of_bounds (reg, diag_arg, range)\n   {}\n \n   bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n+    bool warned;\n     m.add_cwe (124);\n-    bool warned = warning_meta (rich_loc, m, get_controlling_option (),\n-\t\t\t\t\"buffer underflow\");\n+    switch (get_memory_space ())\n+      {\n+      default:\n+\twarned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t       \"buffer underwrite\");\n+\tbreak;\n+      case MEMSPACE_STACK:\n+\twarned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t       \"stack-based buffer underwrite\");\n+\tbreak;\n+      case MEMSPACE_HEAP:\n+\twarned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t       \"heap-based buffer underwrite\");\n+\tbreak;\n+      }\n     if (warned)\n       maybe_describe_array_bounds (rich_loc->get_loc ());\n     return warned;\n@@ -368,21 +401,35 @@ class buffer_underflow : public out_of_bounds\n   }\n };\n \n-/* Concrete subclass to complain about buffer underreads.  */\n+/* Concrete subclass to complain about buffer under-reads.  */\n \n-class buffer_underread : public out_of_bounds\n+class buffer_under_read : public out_of_bounds\n {\n public:\n-  buffer_underread (const region *reg, tree diag_arg, byte_range range)\n+  buffer_under_read (const region *reg, tree diag_arg, byte_range range)\n   : out_of_bounds (reg, diag_arg, range)\n   {}\n \n   bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n+    bool warned;\n     m.add_cwe (127);\n-    bool warned = warning_meta (rich_loc, m, get_controlling_option (),\n-\t\t\t\t\"buffer underread\");\n+    switch (get_memory_space ())\n+      {\n+      default:\n+\twarned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t       \"buffer under-read\");\n+\tbreak;\n+      case MEMSPACE_STACK:\n+\twarned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t       \"stack-based buffer under-read\");\n+\tbreak;\n+      case MEMSPACE_HEAP:\n+\twarned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t       \"heap-based buffer under-read\");\n+\tbreak;\n+      }\n     if (warned)\n       maybe_describe_array_bounds (rich_loc->get_loc ());\n     return warned;\n@@ -519,6 +566,11 @@ class symbolic_past_the_end\n   }\n \n protected:\n+  enum memory_space get_memory_space () const\n+  {\n+    return m_reg->get_memory_space ();\n+  }\n+\n   const region *m_reg;\n   tree m_diag_arg;\n   tree m_offset;\n@@ -542,7 +594,7 @@ class symbolic_buffer_overflow : public symbolic_past_the_end\n   bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n-    switch (m_reg->get_memory_space ())\n+    switch (get_memory_space ())\n       {\n       default:\n \tm.add_cwe (787);\n@@ -560,13 +612,13 @@ class symbolic_buffer_overflow : public symbolic_past_the_end\n   }\n };\n \n-/* Concrete subclass to complain about overreads with symbolic values.  */\n+/* Concrete subclass to complain about over-reads with symbolic values.  */\n \n-class symbolic_buffer_overread : public symbolic_past_the_end\n+class symbolic_buffer_over_read : public symbolic_past_the_end\n {\n public:\n-  symbolic_buffer_overread (const region *reg, tree diag_arg, tree offset,\n-\t\t\t    tree num_bytes, tree capacity)\n+  symbolic_buffer_over_read (const region *reg, tree diag_arg, tree offset,\n+\t\t\t     tree num_bytes, tree capacity)\n   : symbolic_past_the_end (reg, diag_arg, offset, num_bytes, capacity)\n   {\n     m_dir_str = \"read\";\n@@ -576,8 +628,21 @@ class symbolic_buffer_overread : public symbolic_past_the_end\n   {\n     diagnostic_metadata m;\n     m.add_cwe (126);\n-    return warning_meta (rich_loc, m, get_controlling_option (),\n-\t\t\t \"buffer overread\");\n+    switch (get_memory_space ())\n+      {\n+      default:\n+\tm.add_cwe (787);\n+\treturn warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t     \"buffer over-read\");\n+      case MEMSPACE_STACK:\n+\tm.add_cwe (121);\n+\treturn warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t     \"stack-based buffer over-read\");\n+      case MEMSPACE_HEAP:\n+\tm.add_cwe (122);\n+\treturn warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t     \"heap-based buffer over-read\");\n+      }\n   }\n };\n \n@@ -609,11 +674,11 @@ region_model::check_symbolic_bounds (const region *base_reg,\n \t  gcc_unreachable ();\n \t  break;\n \tcase DIR_READ:\n-\t  ctxt->warn (make_unique<symbolic_buffer_overread> (base_reg,\n-\t\t\t\t\t\t\t     diag_arg,\n-\t\t\t\t\t\t\t     offset_tree,\n-\t\t\t\t\t\t\t     num_bytes_tree,\n-\t\t\t\t\t\t\t     capacity_tree));\n+\t  ctxt->warn (make_unique<symbolic_buffer_over_read> (base_reg,\n+\t\t\t\t\t\t\t      diag_arg,\n+\t\t\t\t\t\t\t      offset_tree,\n+\t\t\t\t\t\t\t      num_bytes_tree,\n+\t\t\t\t\t\t\t      capacity_tree));\n \t  break;\n \tcase DIR_WRITE:\n \t  ctxt->warn (make_unique<symbolic_buffer_overflow> (base_reg,\n@@ -701,7 +766,7 @@ region_model::check_region_bounds (const region *reg,\n   /* NUM_BYTES_TREE should always be interpreted as unsigned.  */\n   byte_offset_t num_bytes_unsigned = wi::to_offset (num_bytes_tree);\n   byte_range read_bytes (offset, num_bytes_unsigned);\n-  /* If read_bytes has a subset < 0, we do have an underflow.  */\n+  /* If read_bytes has a subset < 0, we do have an underwrite.  */\n   if (read_bytes.falls_short_of_p (0, &out))\n     {\n       tree diag_arg = get_representative_tree (base_reg);\n@@ -711,10 +776,10 @@ region_model::check_region_bounds (const region *reg,\n \t  gcc_unreachable ();\n \t  break;\n \tcase DIR_READ:\n-\t  ctxt->warn (make_unique<buffer_underread> (reg, diag_arg, out));\n+\t  ctxt->warn (make_unique<buffer_under_read> (reg, diag_arg, out));\n \t  break;\n \tcase DIR_WRITE:\n-\t  ctxt->warn (make_unique<buffer_underflow> (reg, diag_arg, out));\n+\t  ctxt->warn (make_unique<buffer_underwrite> (reg, diag_arg, out));\n \t  break;\n \t}\n     }\n@@ -739,8 +804,8 @@ region_model::check_region_bounds (const region *reg,\n \t  gcc_unreachable ();\n \t  break;\n \tcase DIR_READ:\n-\t  ctxt->warn (make_unique<buffer_overread> (reg, diag_arg,\n-\t\t\t\t\t\t    out, byte_bound));\n+\t  ctxt->warn (make_unique<buffer_over_read> (reg, diag_arg,\n+\t\t\t\t\t\t     out, byte_bound));\n \t  break;\n \tcase DIR_WRITE:\n \t  ctxt->warn (make_unique<buffer_overflow> (reg, diag_arg,"}, {"sha": "22ca475b2ed15b7f4f9e4b856ed413dccbf50f55", "filename": "gcc/testsuite/gcc.dg/analyzer/call-summaries-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-2.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -329,7 +329,7 @@ int test_returns_element_ptr (int j)\n   __analyzer_eval (*returns_element_ptr (0) == 7); /* { dg-warning \"TRUE\" } */\n   __analyzer_eval (*returns_element_ptr (1) == 8); /* { dg-warning \"TRUE\" } */\n   __analyzer_eval (*returns_element_ptr (2) == 9); /* { dg-warning \"TRUE\" } */\n-  return *returns_element_ptr (3); /* { dg-warning \"buffer overread\" } */\n+  return *returns_element_ptr (3); /* { dg-warning \"buffer over-read\" } */\n   /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[2\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-1 } */\n }\n "}, {"sha": "977476ed2fb31a2fcf8e3e87a7009db3313e020b", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-1.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -93,7 +93,7 @@ void test6 (void)\n \n   /* { dg-warning \"buffer overflow\" \"warning\" { target *-*-* } test6b } */\n   /* { dg-message \"\" \"note\" { target *-*-* } test6b } */\n-  /* { dg-warning \"buffer overread\" \"warning\" { target *-*-* } test6c } */\n+  /* { dg-warning \"buffer over-read\" \"warning\" { target *-*-* } test6c } */\n   /* { dg-message \"\" \"note\" { target *-*-* } test6c } */\n }\n \n@@ -116,7 +116,7 @@ void test7 (void)\n   fn (destBuf, srcBuf, returnChunkSize (destBuf)); /* { dg-line test7 } */\n \n   // TODO: Should we handle widening_svalues as a follow-up?\n-  /* { dg-warning \"overread\" \"warning\" { xfail *-*-* } test7 } */\n+  /* { dg-warning \"over-read\" \"warning\" { xfail *-*-* } test7 } */\n   /* { dg-warning \"overflow\" \"warning\" { xfail *-*-* } test7 } */\n   /* { dg-message \"\" \"note\" { xfail *-*-* } test7 } */\n }"}, {"sha": "1330090f348f9b79db5efb413f53e58268a52380", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-2.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-2.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -3,7 +3,7 @@\n #include <stdio.h>\n #include <stdint.h>\n \n-/* Wanalyzer-out-of-bounds tests for buffer overreads.  */\n+/* Wanalyzer-out-of-bounds tests for buffer over-reads.  */\n \n /* Avoid folding of memcpy.  */\n typedef void * (*memcpy_t) (void *dst, const void *src, size_t n);\n@@ -21,8 +21,9 @@ void test1 (void)\n   memset (id_sequence, 0, 3 * sizeof(int));\n   printf (\"%i\", id_sequence[3]); /* { dg-line test1 } */\n \n-  /* { dg-warning \"overread\" \"warning\" { target *-*-* } test1 } */\n-  /* { dg-message \"\" \"note\" { target *-*-* } test1 } */\n+  /* { dg-warning \"stack-based buffer over-read\" \"warning\" { target *-*-* } test1 } */\n+  /* { dg-message \"read of 4 bytes from after the end of 'id_sequence'\" \"num bad bytes note\" { target *-*-* } test1 } */\n+  /* { dg-message \"valid subscripts for 'id_sequence' are '\\\\\\[0\\\\\\]' to '\\\\\\[2\\\\\\]'\" \"valid subscript note\" { target *-*-* } test1 } */\n }\n \n void test2 (void)\n@@ -46,7 +47,7 @@ void test3 (void)\n   for (int i = n; i > 0; i--)\n     sum += arr[i]; /* { dg-line test3 } */\n \n-  /* { dg-warning \"overread\" \"warning\" { target *-*-* } test3 } */\n+  /* { dg-warning \"stack-based buffer over-read\" \"warning\" { target *-*-* } test3 } */\n   /* { dg-message \"\" \"note\" { target *-*-* } test3 } */\n }\n \n@@ -78,6 +79,8 @@ void test5 (void)\n     sum += *(arr + i); /* { dg-line test5 } */\n \n   free (arr);\n-  /* { dg-warning \"overread\" \"warning\" { target *-*-* } test5 } */\n-  /* { dg-message \"\" \"note\" { target *-*-* } test5 } */\n+  /* { dg-warning \"heap-based buffer over-read\" \"bounds warning\" { target *-*-* } test5 } */\n+  /* { dg-message \"read of 4 bytes from after the end of the region\" \"num bad bytes note\" { target *-*-* } test5 } */\n+\n+  /* { dg-warning \"use of uninitialized value\" \"uninit warning\" { target *-*-* } test5 } */\n }"}, {"sha": "5fd9cc3c6b1fa07595e04a634713ef8f6ea3d8a8", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-3.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-3.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -2,7 +2,7 @@\n #include <string.h>\n #include <stdint.h>\n \n-/* Wanalyzer-out-of-bounds tests for buffer underreads and writes.  */\n+/* Wanalyzer-out-of-bounds tests for buffer under-reads and underwrites.  */\n \n /* Avoid folding of memcpy.  */\n typedef void * (*memcpy_t) (void *dst, const void *src, size_t n);\n@@ -19,8 +19,9 @@ void test1 (void)\n   int *e = buf - 1;\n   *e = 42; /* { dg-line test1 } */\n \n-  /* { dg-warning \"underflow\" \"warning\" { target *-*-* } test1 } */\n-  /* { dg-message \"\" \"note\" { target *-*-* } test1 } */\n+  /* { dg-warning \"stack-based buffer underwrite\" \"warning\" { target *-*-* } test1 } */\n+  /* { dg-message \"out-of-bounds write from byte -4 till byte -1 but 'buf' starts at byte 0\" \"final event\" { target *-*-* } test1 } */\n+  /* { dg-message \"valid subscripts for 'buf' are '\\\\\\[0\\\\\\]' to '\\\\\\[3\\\\\\]'\" \"valid subscript note\" { target *-*-* } test1 } */\n }\n \n void test2 (void)\n@@ -38,8 +39,9 @@ void test3 (void)\n   *e = 123;\n   *(e - 2) = 321; /* { dg-line test3 } */\n \n-  /* { dg-warning \"underflow\" \"warning\" { target *-*-* } test3 } */\n-  /* { dg-message \"\" \"note\" { target *-*-* } test3 } */\n+  /* { dg-warning \"stack-based buffer underwrite\" \"warning\" { target *-*-* } test3 } */\n+  /* { dg-message \"out-of-bounds write from byte -4 till byte -1 but 'buf' starts at byte 0\" \"final event\" { target *-*-* } test3 } */\n+  /* { dg-message \"valid subscripts for 'buf' are '\\\\\\[0\\\\\\]' to '\\\\\\[3\\\\\\]'\" \"valid subscript note\" { target *-*-* } test3 } */\n }\n \n void test4 (void)\n@@ -50,8 +52,9 @@ void test4 (void)\n   int n = -4;\n   fn (&(buf[n]), buf, sizeof (int));  /* { dg-line test4 } */\n \n-  /* { dg-warning \"underflow\" \"warning\" { target *-*-* } test4 } */\n-  /* { dg-message \"\" \"note\" { target *-*-* } test4 } */\n+  /* { dg-warning \"stack-based buffer underwrite\" \"warning\" { target *-*-* } test4 } */\n+  /* { dg-message \"out-of-bounds write from byte -16 till byte -13 but 'buf' starts at byte 0\" \"final event\" { target *-*-* } test4 } */\n+  /* { dg-message \"valid subscripts for 'buf' are '\\\\\\[0\\\\\\]' to '\\\\\\[3\\\\\\]'\" \"valid subscript note\" { target *-*-* } test4 } */\n }\n \n void test5 (void)\n@@ -63,8 +66,9 @@ void test5 (void)\n   for (int i = 4; i >= 0; i++)\n     sum += *(buf - i); /* { dg-line test5 } */\n \n-  /* { dg-warning \"underread\" \"warning\" { target *-*-* } test5 } */\n-  /* { dg-message \"\" \"note\" { target *-*-* } test5 } */\n+  /* { dg-warning \"stack-based buffer under-read\" \"warning\" { target *-*-* } test5 } */\n+  /* { dg-message \"out-of-bounds read from byte -16 till byte -13 but 'buf' starts at byte 0\" \"final event\" { target *-*-* } test5 } */\n+  /* { dg-message \"valid subscripts for 'buf' are '\\\\\\[0\\\\\\]' to '\\\\\\[3\\\\\\]'\" \"valid subscript note\" { target *-*-* } test5 } */\n }\n \n void test6 (void)\n@@ -86,6 +90,7 @@ void test8 (void)\n   int n = -4;\n   fn (buf, &(buf[n]), sizeof (int));  /* { dg-line test8 } */\n \n-  /* { dg-warning \"underread\" \"warning\" { target *-*-* } test8 } */\n-  /* { dg-message \"\" \"note\" { target *-*-* } test8 } */\n+  /* { dg-warning \"stack-based buffer under-read\" \"warning\" { target *-*-* } test8 } */\n+  /* { dg-message \"out-of-bounds read from byte -16 till byte -13 but 'buf' starts at byte 0\" \"note\" { target *-*-* } test8 } */\n+  /* { dg-message \"valid subscripts for 'buf' are '\\\\\\[0\\\\\\]' to '\\\\\\[3\\\\\\]'\" \"valid subscript note\" { target *-*-* } test8 } */\n }"}, {"sha": "9cd8bda76c3f3baf213a4cba5a89a9bf932ad6ae", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-4.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-4.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -11,8 +11,9 @@ void test1 (void)\n   char dst[5];\n   strcpy (dst, \"Hello\"); /* { dg-line test1 } */\n \n-  /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test1 } */\n-  /* { dg-message \"dst\" \"note\" { target *-*-* } test1 } */\n+  /* { dg-warning \"stack-based buffer overflow\" \"warning\" { target *-*-* } test1 } */\n+  /* { dg-message \"write of 1 byte to beyond the end of 'dst'\" \"num bad bytes note\" { target *-*-* } test1 } */\n+  /* { dg-message \"valid subscripts for 'dst' are '\\\\\\[0\\\\\\]' to '\\\\\\[4\\\\\\]'\" \"valid subscript note\" { target *-*-* } test1 } */\n }\n \n void test2 (void)\n@@ -27,8 +28,9 @@ void test3 (void)\n   char dst[5];\n   strcpy (dst, src); /* { dg-line test3 } */\n \n-  /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test3 } */\n-  /* { dg-message \"dst\" \"note\" { target *-*-* } test3 } */\n+  /* { dg-warning \"stack-based buffer overflow\" \"warning\" { target *-*-* } test3 } */\n+  /* { dg-message \"write of 1 byte to beyond the end of 'dst'\" \"num bad bytes note\" { target *-*-* } test3 } */\n+  /* { dg-message \"valid subscripts for 'dst' are '\\\\\\[0\\\\\\]' to '\\\\\\[4\\\\\\]'\" \"valid subscript note\" { target *-*-* } test3 } */\n }\n \n void test4 (void)\n@@ -51,8 +53,9 @@ void test5 (void)\n   char dst[5];\n   strcpy (dst, str); /* { dg-line test5 } */\n \n-  /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test5 } */\n-  /* { dg-message \"dst\" \"note\" { target *-*-* } test5 } */\n+  /* { dg-warning \"stack-based buffer overflow\" \"warning\" { target *-*-* } test5 } */\n+  /* { dg-message \"write of 1 byte to beyond the end of 'dst'\" \"num bad bytes note\" { target *-*-* } test5 } */\n+  /* { dg-message \"valid subscripts for 'dst' are '\\\\\\[0\\\\\\]' to '\\\\\\[4\\\\\\]'\" \"valid subscript note\" { target *-*-* } test5 } */\n }\n \n void test6 (void)"}, {"sha": "52fea79152e6af25c0b94df23fbabe4bd1c16a3c", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-5.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-5.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -13,7 +13,7 @@ void test1 (size_t size)\n   char *buf = __builtin_malloc (size);\n   if (!buf) return;\n \n-  buf[size] = '\\0'; /* { dg-warning \"overflow\" } */\n+  buf[size] = '\\0'; /* { dg-warning \"heap-based buffer overflow\" } */\n   free (buf);\n }\n \n@@ -22,7 +22,7 @@ void test2 (size_t size)\n   char *buf = __builtin_malloc (size);\n   if (!buf) return;\n \n-  buf[size + 1] = '\\0'; /* { dg-warning \"overflow\" } */\n+  buf[size + 1] = '\\0'; /* { dg-warning \"heap-based buffer overflow\" } */\n   free (buf);\n }\n \n@@ -31,33 +31,33 @@ void test3 (size_t size, size_t op)\n   char *buf = __builtin_malloc (size);\n   if (!buf) return;\n \n-  buf[size + op] = '\\0'; /* { dg-warning \"overflow\" } */\n+  buf[size + op] = '\\0'; /* { dg-warning \"heap-based buffer overflow\" } */\n   free (buf);\n }\n \n void test4 (size_t size, unsigned short s)\n {\n   char *buf = __builtin_alloca (size);\n-  buf[size + s] = '\\0'; /* { dg-warning \"overflow\" } */\n+  buf[size + s] = '\\0'; /* { dg-warning \"stack-based buffer overflow\" } */\n }\n \n void test5 (size_t size)\n {\n   int32_t *buf = __builtin_alloca (4 * size);\n-  buf[size] = 42; /* { dg-warning \"overflow\" } */\n+  buf[size] = 42; /* { dg-warning \"stack-based buffer overflow\" } */\n }\n \n void test6 (size_t size)\n {\n   int32_t *buf = __builtin_alloca (4 * size);\n   memset (buf, 0, 4 * size);\n-  int32_t last = *(buf + 4 * size); /* { dg-warning \"overread\" } */\n+  int32_t last = *(buf + 4 * size); /* { dg-warning \"stack-based buffer over-read\" } */\n }\n \n void test7 (size_t size)\n {\n   int32_t *buf = __builtin_alloca (4 * size + 3); /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size\" } */\n-  buf[size] = 42; /* { dg-warning \"overflow\" } */\n+  buf[size] = 42; /* { dg-warning \"stack-based buffer overflow\" } */\n }\n \n /* Test where the offset itself is not out-of-bounds\n@@ -68,7 +68,7 @@ void test8 (size_t size, size_t offset)\n   char src[size];\n   char dst[size];\n   memcpy (dst, src, size + offset); /* { dg-line test8 } */\n-  /* { dg-warning \"overread\" \"warning\" { target *-*-* } test8 } */\n+  /* { dg-warning \"over-read\" \"warning\" { target *-*-* } test8 } */\n   /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test8 } */\n }\n \n@@ -77,7 +77,7 @@ void test9 (size_t size, size_t offset)\n   int32_t src[size];\n   int32_t dst[size];\n   memcpy (dst, src, 4 * size + 1); /* { dg-line test9 } */\n-  /* { dg-warning \"overread\" \"warning\" { target *-*-* } test9 } */\n+  /* { dg-warning \"over-read\" \"warning\" { target *-*-* } test9 } */\n   /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test9 } */\n }\n \n@@ -151,6 +151,6 @@ char *test99 (const char *x, const char *y)\n   __builtin_memcpy (result, x, len_x);\n   __builtin_memcpy (result + len_x, y, len_y);\n   /* BUG (symptom): off-by-one out-of-bounds write to heap.  */\n-  result[len_x + len_y] = '\\0'; /* { dg-warning \"overflow\" } */\n+  result[len_x + len_y] = '\\0'; /* { dg-warning \"heap-based buffer overflow\" } */\n   return result;\n }"}, {"sha": "ef460f4e7724c2b1c5fa34c801a0393a57188bae", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-container_of.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-container_of.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-container_of.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-container_of.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -44,8 +44,8 @@ int test (struct outer *outer_p, struct inner *inner_p)\n   sum += o->i; /* { dg-line testB } */\n \n   return sum;\n-  /* { dg-warning \"underread\" \"warning\" { target *-*-* } testA } */\n+  /* { dg-warning \"stack-based buffer under-read\" \"warning\" { target *-*-* } testA } */\n   /* { dg-message \"\" \"note\" { target *-*-* } testA } */\n-  /* { dg-warning \"underread\" \"warning\" { target *-*-* } testB } */\n+  /* { dg-warning \"stack-based buffer under-read\" \"warning\" { target *-*-* } testB } */\n   /* { dg-message \"\" \"note\" { target *-*-* } testB } */\n }"}, {"sha": "f6d0dda9fb95cd36783b86df4ead3f7b403e491a", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-read-char-arr.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-char-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-char-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-char-arr.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -1,50 +1,56 @@\n char arr[10]; /* { dg-message \"capacity is 10 bytes\" } */\n \n-char int_arr_read_element_before_start_far(void)\n+char char_arr_read_element_before_start_far(void)\n {\n-  return arr[-100]; /* { dg-warning \"buffer underread\" \"warning\" } */\n+  return arr[-100]; /* { dg-warning \"buffer under-read\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read at byte -100 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n-char int_arr_read_element_before_start_near(void)\n+char char_arr_read_element_before_start_near(void)\n {\n-  return arr[-2]; /* { dg-warning \"buffer underread\" \"warning\" } */\n+  return arr[-2]; /* { dg-warning \"buffer under-read\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read at byte -2 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n-char int_arr_read_element_before_start_off_by_one(void)\n+char char_arr_read_element_before_start_off_by_one(void)\n {\n-  return arr[-1]; /* { dg-warning \"buffer underread\" \"warning\" } */\n+  return arr[-1]; /* { dg-warning \"buffer under-read\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read at byte -1 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n-char int_arr_read_element_at_start(void)\n+char char_arr_read_element_at_start(void)\n {\n   return arr[0];\n }\n \n-char int_arr_read_element_at_end(void)\n+char char_arr_read_element_at_end(void)\n {\n   return arr[9];\n }\n \n-char int_arr_read_element_after_end_off_by_one(void)\n+char char_arr_read_element_after_end_off_by_one(void)\n {\n-  return arr[10]; /* { dg-warning \"buffer overread\" \"warning\" } */\n+  return arr[10]; /* { dg-warning \"buffer over-read\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read at byte 10 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"read of 1 byte from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }\n \n-char int_arr_read_element_after_end_near(void)\n+char char_arr_read_element_after_end_near(void)\n {\n-  return arr[11]; /* { dg-warning \"buffer overread\" \"warning\" } */\n+  return arr[11]; /* { dg-warning \"buffer over-read\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read at byte 11 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"read of 1 byte from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }\n \n-char int_arr_read_element_after_end_far(void)\n+char char_arr_read_element_after_end_far(void)\n {\n-  return arr[100]; /* { dg-warning \"buffer overread\" \"warning\" } */\n+  return arr[100]; /* { dg-warning \"buffer over-read\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read at byte 100 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"read of 1 byte from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }"}, {"sha": "f1b6e11977777b517dbe63dfc97950ff46e9f7c1", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-read-int-arr.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-int-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-int-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-int-arr.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -4,20 +4,23 @@ int32_t arr[10]; /* { dg-message \"capacity is 40 bytes\" } */\n \n int32_t int_arr_read_element_before_start_far(void)\n {\n-  return arr[-100]; /* { dg-warning \"buffer underread\" \"warning\" } */\n+  return arr[-100]; /* { dg-warning \"buffer under-read\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read from byte -400 till byte -397 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n int32_t int_arr_read_element_before_start_near(void)\n {\n-  return arr[-2]; /* { dg-warning \"buffer underread\" \"warning\" } */\n+  return arr[-2]; /* { dg-warning \"buffer under-read\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read from byte -8 till byte -5 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n int32_t int_arr_read_element_before_start_off_by_one(void)\n {\n-  return arr[-1]; /* { dg-warning \"buffer underread\" \"warning\" } */\n+  return arr[-1]; /* { dg-warning \"buffer under-read\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read from byte -4 till byte -1 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n int32_t int_arr_read_element_at_start(void)\n@@ -32,21 +35,24 @@ int32_t int_arr_read_element_at_end(void)\n \n int32_t int_arr_read_element_after_end_off_by_one(void)\n {\n-  return arr[10]; /* { dg-warning \"buffer overread\" \"warning\" } */\n+  return arr[10]; /* { dg-warning \"buffer over-read\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read from byte 40 till byte 43 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"read of 4 bytes from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }\n \n int32_t int_arr_read_element_after_end_near(void)\n {\n-  return arr[11]; /* { dg-warning \"buffer overread\" \"warning\" } */\n+  return arr[11]; /* { dg-warning \"buffer over-read\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read from byte 44 till byte 47 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"read of 4 bytes from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }\n \n int32_t int_arr_read_element_after_end_far(void)\n {\n-  return arr[100]; /* { dg-warning \"buffer overread\" \"warning\" } */\n+  return arr[100]; /* { dg-warning \"buffer over-read\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read from byte 400 till byte 403 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"read of 4 bytes from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }"}, {"sha": "0f50bb92290198013adf9705236972ff36083103", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-read-struct-arr.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-struct-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-struct-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-struct-arr.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -0,0 +1,65 @@\n+#include <stdint.h>\n+\n+struct st\n+{\n+  char buf[16];\n+  int32_t x;\n+  int32_t y;\n+};\n+\n+struct st arr[10];\n+\n+int32_t struct_arr_read_x_element_before_start_far(void)\n+{\n+  return arr[-100].x; /* { dg-warning \"buffer under-read\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read from byte -2384 till byte -2381 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n+}\n+\n+int32_t struct_arr_read_x_element_before_start_near(void)\n+{\n+  return arr[-2].x; /* { dg-warning \"buffer under-read\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read from byte -32 till byte -29 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n+}\n+\n+int32_t struct_arr_read_x_element_before_start_off_by_one(void)\n+{\n+  return arr[-1].x; /* { dg-warning \"buffer under-read\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read from byte -8 till byte -5 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n+}\n+\n+int32_t struct_arr_read_x_element_at_start(void)\n+{\n+  return arr[0].x;\n+}\n+\n+int32_t struct_arr_read_x_element_at_end(void)\n+{\n+  return arr[9].x;\n+}\n+\n+int32_t struct_arr_read_x_element_after_end_off_by_one(void)\n+{\n+  return arr[10].x; /* { dg-warning \"buffer over-read\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read from byte 256 till byte 259 but 'arr' ends at byte 240\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"read of 4 bytes from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n+}\n+\n+int32_t struct_arr_read_x_element_after_end_near(void)\n+{\n+  return arr[11].x; /* { dg-warning \"buffer over-read\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read from byte 280 till byte 283 but 'arr' ends at byte 240\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"read of 4 bytes from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n+}\n+\n+int32_t struct_arr_read_x_element_after_end_far(void)\n+{\n+  return arr[100].x; /* { dg-warning \"buffer over-read\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read from byte 2416 till byte 2419 but 'arr' ends at byte 240\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"read of 4 bytes from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n+}"}, {"sha": "2f3bbfa2dc238a74aff263dd0d2e6da784db819c", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-write-char-arr.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -1,53 +1,53 @@\n char arr[10]; /* { dg-message \"capacity is 10 bytes\" } */\n \n-void int_arr_write_element_before_start_far(char x)\n+void char_arr_write_element_before_start_far(char x)\n {\n-  arr[-100] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n+  arr[-100] = x; /* { dg-warning \"buffer underwrite\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte -100 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n-void int_arr_write_element_before_start_near(char x)\n+void char_arr_write_element_before_start_near(char x)\n {\n-  arr[-2] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n+  arr[-2] = x; /* { dg-warning \"buffer underwrite\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte -2 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n-void int_arr_write_element_before_start_off_by_one(char x)\n+void char_arr_write_element_before_start_off_by_one(char x)\n {\n-  arr[-1] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n+  arr[-1] = x; /* { dg-warning \"buffer underwrite\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte -1 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n-void int_arr_write_element_at_start(char x)\n+void char_arr_write_element_at_start(char x)\n {\n   arr[0] = x;\n }\n \n-void int_arr_write_element_at_end(char x)\n+void char_arr_write_element_at_end(char x)\n {\n   arr[9] = x;\n }\n \n-void int_arr_write_element_after_end_off_by_one(char x)\n+void char_arr_write_element_after_end_off_by_one(char x)\n {\n   arr[10] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte 10 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"write of 1 byte to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n   /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }\n \n-void int_arr_write_element_after_end_near(char x)\n+void char_arr_write_element_after_end_near(char x)\n {\n   arr[11] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte 11 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"write of 1 byte to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n   /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }\n \n-void int_arr_write_element_after_end_far(char x)\n+void char_arr_write_element_after_end_far(char x)\n {\n   arr[100] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte 100 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */"}, {"sha": "0adb78996414b3e0f5010ceca9416ed77550be52", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-write-int-arr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -4,21 +4,21 @@ int32_t arr[10]; /* { dg-message \"capacity is 40 bytes\" } */\n \n void int_arr_write_element_before_start_far(int32_t x)\n {\n-  arr[-100] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n+  arr[-100] = x; /* { dg-warning \"buffer underwrite\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write from byte -400 till byte -397 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n void int_arr_write_element_before_start_near(int32_t x)\n {\n-  arr[-2] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n+  arr[-2] = x; /* { dg-warning \"buffer underwrite\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write from byte -8 till byte -5 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n void int_arr_write_element_before_start_off_by_one(int32_t x)\n {\n-  arr[-1] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n+  arr[-1] = x; /* { dg-warning \"buffer underwrite\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write from byte -4 till byte -1 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }"}, {"sha": "cf6b458f44b90cf7a52f4f7ab565983e74135094", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-write-struct-arr.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-struct-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-struct-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-struct-arr.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -0,0 +1,65 @@\n+#include <stdint.h>\n+\n+struct st\n+{\n+  char buf[16];\n+  int32_t x;\n+  int32_t y;\n+};\n+\n+struct st arr[10];\n+\n+void struct_arr_write_x_element_before_start_far(int32_t x)\n+{\n+  arr[-100].x = x; /* { dg-warning \"buffer underwrite\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write from byte -2384 till byte -2381 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n+}\n+\n+void struct_arr_write_x_element_before_start_near(int32_t x)\n+{\n+  arr[-2].x = x; /* { dg-warning \"buffer underwrite\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write from byte -32 till byte -29 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n+}\n+\n+void struct_arr_write_x_element_before_start_off_by_one(int32_t x)\n+{\n+  arr[-1].x = x; /* { dg-warning \"buffer underwrite\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write from byte -8 till byte -5 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n+}\n+\n+void struct_arr_write_x_element_at_start(int32_t x)\n+{\n+  arr[0].x = x;\n+}\n+\n+void struct_arr_write_x_element_at_end(int32_t x)\n+{\n+  arr[9].x = x;\n+}\n+\n+void struct_arr_write_x_element_after_end_off_by_one(int32_t x)\n+{\n+  arr[10].x = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write from byte 256 till byte 259 but 'arr' ends at byte 240\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"write of 4 bytes to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n+}\n+\n+void struct_arr_write_x_element_after_end_near(int32_t x)\n+{\n+  arr[11].x = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write from byte 280 till byte 283 but 'arr' ends at byte 240\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"write of 4 bytes to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n+}\n+\n+void struct_arr_write_x_element_after_end_far(int32_t x)\n+{\n+  arr[100].x = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write from byte 2416 till byte 2419 but 'arr' ends at byte 240\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"write of 4 bytes to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n+}"}, {"sha": "08c0aba5cbffd291f74f15eba56755ad93a2f945", "filename": "gcc/testsuite/gcc.dg/analyzer/pr101962.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101962.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101962.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101962.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -25,7 +25,7 @@ test_1 (void)\n   return *a; /* { dg-line test_1 } */\n \n   /* { dg-warning \"use of uninitialized value '\\\\*a'\" \"warning\" { target *-*-* } test_1 } */\n-  /* { dg-warning \"overread\" \"warning\" { target *-*-* } test_1 } */\n+  /* { dg-warning \"stack-based buffer over-read\" \"warning\" { target *-*-* } test_1 } */\n }\n \n static const char * __attribute__((noinline))"}, {"sha": "75f0b70a99635f92a437f57aa0676c3be06b0e81", "filename": "gcc/testsuite/gcc.dg/analyzer/realloc-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-5.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -37,7 +37,7 @@ void test_1 ()\n       __analyzer_eval (q[8] == 1); /* { dg-line eval } */\n     \n       /* { dg-warning \"UNKNOWN\" \"warning\" { target *-*-* } eval } */\n-      /* { dg-warning \"overread\" \"warning\" { target *-*-* } eval } */\n+      /* { dg-warning \"heap-based buffer over-read\" \"warning\" { target *-*-* } eval } */\n       /* { dg-warning \"use of uninitialized value\" \"warning\" { target *-*-* } eval } */\n     }\n "}, {"sha": "def83006a71692ba65039566dbb682959f36518b", "filename": "gcc/testsuite/gcc.dg/analyzer/zlib-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df460cf51b25868564dd2628a399b8c874ef309c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-3.c?ref=df460cf51b25868564dd2628a399b8c874ef309c", "patch": "@@ -184,7 +184,7 @@ static int huft_build(uInt *b, uInt n, uInt s, const uInt *d, const uInt *e,\n       mask = (1 << w) - 1;\n       /* The analyzer thinks that h can be -1 here.\n          This is probably a false positive. */\n-      while ((i & mask) !=  x[h]) { /* { dg-bogus \"underread\" \"\" { xfail *-*-* } } */\n+      while ((i & mask) !=  x[h]) { /* { dg-bogus \"under-read\" \"\" { xfail *-*-* } } */\n         h--;\n         w -= l;\n         mask = (1 << w) - 1;"}]}