{"sha": "90b510e4aa33eec927376c42e608a5f569d264c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBiNTEwZTRhYTMzZWVjOTI3Mzc2YzQyZTYwOGE1ZjU2OWQyNjRjNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-13T13:14:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-13T13:14:44Z"}, "message": "[multiple changes]\n\n2015-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sigtramp-ios.c, init.c: Minor cosmetic tweaks.\n\n2015-11-13  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* s-gloloc.adb, g-debpoo.adb: Minor reformatting.\n\n2015-11-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iterator_Specification): Improve error\n\tmessage for the case the iterable name (array or container)\n\tis a component that depends on a discriminant.\n\n2015-11-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Indicate_Name_And_Type): If the analysis of\n\tone interpretation succeeds, set type of name in call, for\n\tcompleteness.\n\t(Try_Container_Indexing): If there are multiple indexing\n\tfunctions, collect possible interpretations that are compatible\n\twith given parameters, and add implicit dereference types when\n\tpresent.\n\t* sem_util.adb (Build_Explicit_Dereference): If the expression\n\tis an overloaded function call use the given discriminant to\n\tresolve the call, and set properly the type of the call and of\n\tthe resulting dereference.\n\n2015-11-13  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Pragma Constant_After_Elaboration can\n\tnow apply to a variable without an initialization expression.\n\n2015-11-13  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch9.adb (Add_Matching_Formals): Parameter Actuals is now of mode\n\tIN OUT. Create a new list when list Actuals is not present.\n\t(Build_Contract_Wrapper): Create the wrapper\n\tonly when the entry has at least on checked contract case or\n\tpre/postcondition. Ensure that the call to the original entry\n\tlacks an actual parameter list when the entry appears without\n\tformal parameters.\n\t(Expand_Entry_Declaration): Code cleanup.\n\n2015-11-13  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Continue the analysis\n\tafter encountering an illegal aspect Part_Of.\n\n2015-11-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference, case\n\tOverlaps_Storage): Add copies for nodes that represent the integer\n\taddresses of the two actuals, to prevent identical nodes in the\n\ttree, which the backend cannot handle properly.\n\nFrom-SVN: r230316", "tree": {"sha": "af2453061ba4ef908f40aa510009165f091f8ec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af2453061ba4ef908f40aa510009165f091f8ec0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90b510e4aa33eec927376c42e608a5f569d264c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b510e4aa33eec927376c42e608a5f569d264c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b510e4aa33eec927376c42e608a5f569d264c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b510e4aa33eec927376c42e608a5f569d264c7/comments", "author": null, "committer": null, "parents": [{"sha": "6672e402095eb9df8517918c58929c145b9c1bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6672e402095eb9df8517918c58929c145b9c1bc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6672e402095eb9df8517918c58929c145b9c1bc2"}], "stats": {"total": 282, "additions": 192, "deletions": 90}, "files": [{"sha": "eb9d2fde025a7812ae5b13e0bf1cb5c9fe082e0d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=90b510e4aa33eec927376c42e608a5f569d264c7", "patch": "@@ -1,3 +1,59 @@\n+2015-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sigtramp-ios.c, init.c: Minor cosmetic tweaks.\n+\n+2015-11-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* s-gloloc.adb, g-debpoo.adb: Minor reformatting.\n+\n+2015-11-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Improve error\n+\tmessage for the case the iterable name (array or container)\n+\tis a component that depends on a discriminant.\n+\n+2015-11-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Indicate_Name_And_Type): If the analysis of\n+\tone interpretation succeeds, set type of name in call, for\n+\tcompleteness.\n+\t(Try_Container_Indexing): If there are multiple indexing\n+\tfunctions, collect possible interpretations that are compatible\n+\twith given parameters, and add implicit dereference types when\n+\tpresent.\n+\t* sem_util.adb (Build_Explicit_Dereference): If the expression\n+\tis an overloaded function call use the given discriminant to\n+\tresolve the call, and set properly the type of the call and of\n+\tthe resulting dereference.\n+\n+2015-11-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Pragma Constant_After_Elaboration can\n+\tnow apply to a variable without an initialization expression.\n+\n+2015-11-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch9.adb (Add_Matching_Formals): Parameter Actuals is now of mode\n+\tIN OUT. Create a new list when list Actuals is not present.\n+\t(Build_Contract_Wrapper): Create the wrapper\n+\tonly when the entry has at least on checked contract case or\n+\tpre/postcondition. Ensure that the call to the original entry\n+\tlacks an actual parameter list when the entry appears without\n+\tformal parameters.\n+\t(Expand_Entry_Declaration): Code cleanup.\n+\n+2015-11-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Continue the analysis\n+\tafter encountering an illegal aspect Part_Of.\n+\n+2015-11-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference, case\n+\tOverlaps_Storage): Add copies for nodes that represent the integer\n+\taddresses of the two actuals, to prevent identical nodes in the\n+\ttree, which the backend cannot handle properly.\n+\n 2015-11-13  Bob Duff  <duff@adacore.com>\n \n \t* sem_ch6.adb (Check_Private_Overriding): Change"}, {"sha": "50176e7de64cb9235a5923fc24d260845977ca9a", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=90b510e4aa33eec927376c42e608a5f569d264c7", "patch": "@@ -4462,7 +4462,7 @@ package body Exp_Attr is\n \n          X   : constant Node_Id := Prefix (N);\n          Y   : constant Node_Id := First (Expressions (N));\n-         --  The argumens\n+         --  The arguments\n \n          X_Addr, Y_Addr : Node_Id;\n          --  the expressions for their integer addresses\n@@ -4483,7 +4483,9 @@ package body Exp_Attr is\n \n          --  with the proper address operations. We convert addresses to\n          --  integer addresses to use predefined arithmetic. The size is\n-         --  expressed in storage units.\n+         --  expressed in storage units. We add copies of X_Addr and Y_Addr\n+         --  to prevent the appearance of the same node in two places in\n+         --  the tree.\n \n          X_Addr :=\n            Unchecked_Convert_To (RTE (RE_Integer_Address),\n@@ -4528,7 +4530,7 @@ package body Exp_Attr is\n                Make_Op_Ge (Loc,\n                   Left_Opnd   =>\n                    Make_Op_Add (Loc,\n-                     Left_Opnd  => X_Addr,\n+                     Left_Opnd  => New_Copy_Tree (X_Addr),\n                      Right_Opnd =>\n                        Make_Op_Subtract (Loc,\n                          Left_Opnd  => X_Size,\n@@ -4537,7 +4539,7 @@ package body Exp_Attr is\n \n                Make_Op_Ge (Loc,\n                    Make_Op_Add (Loc,\n-                     Left_Opnd  => Y_Addr,\n+                     Left_Opnd  => New_Copy_Tree (Y_Addr),\n                      Right_Opnd =>\n                        Make_Op_Subtract (Loc,\n                          Left_Opnd  => Y_Size,"}, {"sha": "bd9a2af9551104a46bfe102c81b1bbd9d4015051", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 63, "deletions": 44, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=90b510e4aa33eec927376c42e608a5f569d264c7", "patch": "@@ -1234,7 +1234,9 @@ package body Exp_Ch9 is\n       --  Conc_Typ. Obj_Id is the entity of the wrapper formal parameter which\n       --  represents the concurrent object.\n \n-      procedure Add_Matching_Formals (Formals : List_Id; Actuals : List_Id);\n+      procedure Add_Matching_Formals\n+        (Formals : List_Id;\n+         Actuals : in out List_Id);\n       --  Add formal parameters that match those of entry E to list Formals.\n       --  The routine also adds matching actuals for the new formals to list\n       --  Actuals.\n@@ -1281,7 +1283,10 @@ package body Exp_Ch9 is\n       -- Add_Matching_Formals --\n       --------------------------\n \n-      procedure Add_Matching_Formals (Formals : List_Id; Actuals : List_Id) is\n+      procedure Add_Matching_Formals\n+        (Formals : List_Id;\n+         Actuals : in out List_Id)\n+      is\n          Formal     : Entity_Id;\n          New_Formal : Entity_Id;\n \n@@ -1301,6 +1306,10 @@ package body Exp_Ch9 is\n                 Parameter_Type      =>\n                   New_Occurrence_Of (Etype (Formal), Loc)));\n \n+            if No (Actuals) then\n+               Actuals := New_List;\n+            end if;\n+\n             Append_To (Actuals, New_Occurrence_Of (New_Formal, Loc));\n             Next_Formal (Formal);\n          end loop;\n@@ -1327,7 +1336,7 @@ package body Exp_Ch9 is\n       --  Local variables\n \n       Items      : constant Node_Id := Contract (E);\n-      Actuals    : List_Id;\n+      Actuals    : List_Id := No_List;\n       Call       : Node_Id;\n       Call_Nam   : Node_Id;\n       Decls      : List_Id := No_List;\n@@ -1384,6 +1393,7 @@ package body Exp_Ch9 is\n          while Present (Prag) loop\n             if Nam_In (Pragma_Name (Prag), Name_Postcondition,\n                                            Name_Precondition)\n+              and then Is_Checked (Prag)\n             then\n                Has_Pragma := True;\n                Transfer_Pragma (Prag, To => Decls);\n@@ -1397,7 +1407,9 @@ package body Exp_Ch9 is\n \n          Prag := Contract_Test_Cases (Items);\n          while Present (Prag) loop\n-            if Pragma_Name (Prag) = Name_Contract_Cases then\n+            if Pragma_Name (Prag) = Name_Contract_Cases\n+              and then Is_Checked (Prag)\n+            then\n                Has_Pragma := True;\n                Transfer_Pragma (Prag, To => Decls);\n             end if;\n@@ -1455,17 +1467,16 @@ package body Exp_Ch9 is\n              Expressions => New_List (New_Occurrence_Of (Index_Id, Loc)));\n       end if;\n \n-      Actuals := New_List;\n-      Call    :=\n-        Make_Procedure_Call_Statement (Loc,\n-          Name                   => Call_Nam,\n-          Parameter_Associations => Actuals);\n-\n       --  Add formal parameters to match those of the entry and build actuals\n       --  for the entry call.\n \n       Add_Matching_Formals (Formals, Actuals);\n \n+      Call :=\n+        Make_Procedure_Call_Statement (Loc,\n+          Name                   => Call_Nam,\n+          Parameter_Associations => Actuals);\n+\n       --  Add renaming declarations for the discriminants of the enclosing type\n       --  as the various contract items may reference them.\n \n@@ -9030,15 +9041,13 @@ package body Exp_Ch9 is\n       Body_Id      : Entity_Id;\n       Cdecls       : List_Id;\n       Comp         : Node_Id;\n-      Comp_Id      : Entity_Id;\n       Current_Node : Node_Id := N;\n       E_Count      : Int;\n       Entries_Aggr : Node_Id;\n       New_Priv     : Node_Id;\n       Object_Comp  : Node_Id;\n       Priv         : Node_Id;\n       Rec_Decl     : Node_Id;\n-      Sub          : Node_Id;\n \n       procedure Check_Inlining (Subp : Entity_Id);\n       --  If the original operation has a pragma Inline, propagate the flag\n@@ -9051,9 +9060,9 @@ package body Exp_Ch9 is\n       --  static because of a discriminant constraint we can specialize the\n       --  warning by mentioning discriminants explicitly.\n \n-      procedure Expand_Entry_Declaration (Comp : Entity_Id);\n-      --  Create the subprograms for the barrier and for the body, and append\n-      --  then to Entry_Bodies_Array.\n+      procedure Expand_Entry_Declaration (Decl : Node_Id);\n+      --  Create the entry barrier and the procedure body for entry declaration\n+      --  Decl. All generated subprograms are added to Entry_Bodies_Array.\n \n       function Static_Component_Size (Comp : Entity_Id) return Boolean;\n       --  When compiling under the Ravenscar profile, private components must\n@@ -9173,51 +9182,57 @@ package body Exp_Ch9 is\n       -- Expand_Entry_Declaration --\n       ------------------------------\n \n-      procedure Expand_Entry_Declaration (Comp : Entity_Id) is\n-         Bdef : Entity_Id;\n-         Edef : Entity_Id;\n+      procedure Expand_Entry_Declaration (Decl : Node_Id) is\n+         Ent_Id : constant Entity_Id := Defining_Entity (Decl);\n+         Bar_Id : Entity_Id;\n+         Bod_Id : Entity_Id;\n+         Subp   : Node_Id;\n \n       begin\n          E_Count := E_Count + 1;\n-         Comp_Id := Defining_Identifier (Comp);\n \n-         Edef :=\n+         --  Create the protected body subprogram\n+\n+         Bod_Id :=\n            Make_Defining_Identifier (Loc,\n-             Chars => Build_Selected_Name (Prot_Typ, Comp_Id, 'E'));\n-         Sub :=\n+             Chars => Build_Selected_Name (Prot_Typ, Ent_Id, 'E'));\n+         Set_Protected_Body_Subprogram (Ent_Id, Bod_Id);\n+\n+         Subp :=\n            Make_Subprogram_Declaration (Loc,\n              Specification =>\n-               Build_Protected_Entry_Specification (Loc, Edef, Comp_Id));\n+               Build_Protected_Entry_Specification (Loc, Bod_Id, Ent_Id));\n+\n+         Insert_After (Current_Node, Subp);\n+         Current_Node := Subp;\n \n-         Insert_After (Current_Node, Sub);\n-         Analyze (Sub);\n+         Analyze (Subp);\n \n          --  Build a wrapper procedure to handle contract cases, preconditions,\n          --  and postconditions.\n \n-         Build_Contract_Wrapper (Comp_Id, N);\n-\n-         Set_Protected_Body_Subprogram\n-           (Defining_Identifier (Comp),\n-            Defining_Unit_Name (Specification (Sub)));\n+         Build_Contract_Wrapper (Ent_Id, N);\n \n-         Current_Node := Sub;\n+         --  Create the barrier function\n \n-         Bdef :=\n+         Bar_Id :=\n            Make_Defining_Identifier (Loc,\n-             Chars => Build_Selected_Name (Prot_Typ, Comp_Id, 'B'));\n-         Sub :=\n+             Chars => Build_Selected_Name (Prot_Typ, Ent_Id, 'B'));\n+         Set_Barrier_Function (Ent_Id, Bar_Id);\n+\n+         Subp :=\n            Make_Subprogram_Declaration (Loc,\n              Specification =>\n-               Build_Barrier_Function_Specification (Loc, Bdef));\n-         Set_Is_Entry_Barrier_Function (Sub);\n+               Build_Barrier_Function_Specification (Loc, Bar_Id));\n+         Set_Is_Entry_Barrier_Function (Subp);\n+\n+         Insert_After (Current_Node, Subp);\n+         Current_Node := Subp;\n+\n+         Analyze (Subp);\n \n-         Insert_After (Current_Node, Sub);\n-         Analyze (Sub);\n-         Set_Protected_Body_Subprogram (Bdef, Bdef);\n-         Set_Barrier_Function (Comp_Id, Bdef);\n-         Set_Scope (Bdef, Scope (Comp_Id));\n-         Current_Node := Sub;\n+         Set_Protected_Body_Subprogram (Bar_Id, Bar_Id);\n+         Set_Scope (Bar_Id, Scope (Ent_Id));\n \n          --  Collect pointers to the protected subprogram and the barrier\n          --  of the current entry, for insertion into Entry_Bodies_Array.\n@@ -9226,10 +9241,10 @@ package body Exp_Ch9 is\n            Make_Aggregate (Loc,\n              Expressions => New_List (\n                Make_Attribute_Reference (Loc,\n-                 Prefix         => New_Occurrence_Of (Bdef, Loc),\n+                 Prefix         => New_Occurrence_Of (Bar_Id, Loc),\n                  Attribute_Name => Name_Unrestricted_Access),\n                Make_Attribute_Reference (Loc,\n-                 Prefix         => New_Occurrence_Of (Edef, Loc),\n+                 Prefix         => New_Occurrence_Of (Bod_Id, Loc),\n                  Attribute_Name => Name_Unrestricted_Access))));\n       end Expand_Entry_Declaration;\n \n@@ -9260,6 +9275,10 @@ package body Exp_Ch9 is\n          Append_Freeze_Action (Prot_Proc, RTS_Call);\n       end Register_Handler;\n \n+      --  Local variables\n+\n+      Sub : Node_Id;\n+\n    --  Start of processing for Expand_N_Protected_Type_Declaration\n \n    begin"}, {"sha": "c5664a9939d21afdb29f63a0828baf229b3d6fa3", "filename": "gcc/ada/g-debpoo.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fg-debpoo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fg-debpoo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-debpoo.adb?ref=90b510e4aa33eec927376c42e608a5f569d264c7", "patch": "@@ -482,6 +482,7 @@ package body GNAT.Debug_Pools is\n       --  Warning: secondary stack cannot be used here. When System.Memory\n       --  implementation uses Debug_Pool, Print_Address can be called during\n       --  secondary stack creation for foreign threads.\n+\n       Put (File, Image_C (Addr));\n    end Print_Address;\n "}, {"sha": "4f7341e4e798272adf9003f7ce2bbe706bb1343e", "filename": "gcc/ada/init.c", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=90b510e4aa33eec927376c42e608a5f569d264c7", "patch": "@@ -324,9 +324,7 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n    propagation after the required low level adjustments.  */\n \n static void\n-__gnat_error_handler (int sig,\n-\t\t      siginfo_t *si ATTRIBUTE_UNUSED,\n-\t\t      void *ucontext ATTRIBUTE_UNUSED)\n+__gnat_error_handler (int sig, siginfo_t *si ATTRIBUTE_UNUSED, void *ucontext)\n {\n   struct Exception_Data *exception;\n   const char *msg;\n@@ -683,7 +681,7 @@ __gnat_error_handler (int sig)\n }\n \n void\n-__gnat_install_handler(void)\n+__gnat_install_handler (void)\n {\n   struct sigaction act;\n \n@@ -1930,10 +1928,9 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED,\n \t\t\t\t void *sc ATTRIBUTE_UNUSED)\n {\n   /* In case of ARM exceptions, the registers context have the PC pointing\n-     to the instruction that raised the signal. However the Unwinder expects\n-     the instruction to be in the range ]PC,PC+1].\n-      */\n-  uintptr_t *pc_addr; /* address of the pc value to restore */\n+     to the instruction that raised the signal.  However the unwinder expects\n+     the instruction to be in the range ]PC,PC+1].  */\n+  uintptr_t *pc_addr;\n #ifdef __RTP__\n   mcontext_t *mcontext = &((ucontext_t *) sc)->uc_mcontext;\n   pc_addr = (uintptr_t*)&mcontext->regs.pc;\n@@ -1997,7 +1994,7 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n   __gnat_adjust_context_for_raise (sig, sc);\n #endif\n \n-  #include \"sigtramp.h\"\n+#include \"sigtramp.h\"\n \n   __gnat_sigtramp (sig, (void *)si, (void *)sc,\n \t\t   (__sigtramphandler_t *)&__gnat_map_signal);\n@@ -2189,7 +2186,7 @@ __gnat_error_handler (int sig)\n }\n \n void\n-__gnat_install_handler(void)\n+__gnat_install_handler (void)\n {\n   struct sigaction act;\n \n@@ -2252,7 +2249,7 @@ __gnat_error_handler (int sig)\n }\n \n void\n-__gnat_install_handler(void)\n+__gnat_install_handler (void)\n {\n   struct sigaction act;\n \n@@ -2443,8 +2440,8 @@ __gnat_error_handler (int sig, siginfo_t *si, void *ucontext)\n {\n   __gnat_adjust_context_for_raise (sig, ucontext);\n \n+  /* The Darwin libc comes with a signal trampoline, except for ARM64.  */\n #ifdef __arm64__\n-  /* Use a trampoline so that the unwinder won't see the signal frame.  */\n   __gnat_sigtramp (sig, (void *)si, ucontext,\n \t\t   (__sigtramphandler_t *)&__gnat_map_signal);\n #else\n@@ -2515,7 +2512,7 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n static void\n __gnat_map_signal (int sig,\n \t\t   siginfo_t *si ATTRIBUTE_UNUSED,\n-\t\t   void *ucontext ATTRIBUTE_UNUSED)\n+\t\t   void *mcontext ATTRIBUTE_UNUSED)\n {\n   struct Exception_Data *exception;\n   const char *msg;\n@@ -2546,9 +2543,7 @@ __gnat_map_signal (int sig,\n }\n \n static void\n-__gnat_error_handler (int sig,\n-\t\t      siginfo_t *si ATTRIBUTE_UNUSED,\n-\t\t      void *ucontext ATTRIBUTE_UNUSED)\n+__gnat_error_handler (int sig, siginfo_t *si, void *ucontext)\n {\n   __gnat_adjust_context_for_raise (sig, ucontext);\n "}, {"sha": "6dfc5277a7b290f72125368c827284eeeb79c072", "filename": "gcc/ada/s-gloloc.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fs-gloloc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fs-gloloc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-gloloc.adb?ref=90b510e4aa33eec927376c42e608a5f569d264c7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -51,7 +51,7 @@ package body System.Global_Locks is\n       File    : String;\n       Wait    : Duration := 0.1;\n       Retries : Natural  := Natural'Last);\n-   --  Create a lock file File in directory Dir. If the file  cannot be\n+   --  Create a lock file File in directory Dir. If the file cannot be\n    --  locked because someone already owns the lock, this procedure\n    --  waits Wait seconds and retries at most Retries times. If the file\n    --  still cannot be locked, Lock_Error is raised. The default is to try"}, {"sha": "56b81b43dae5dc5c1ff6d625f21ac39612af5ea0", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=90b510e4aa33eec927376c42e608a5f569d264c7", "patch": "@@ -2673,7 +2673,6 @@ package body Sem_Ch13 is\n \n                      Decorate (Aspect, Aitem);\n                      Insert_Pragma (Aitem);\n-                     goto Continue;\n \n                   else\n                      Error_Msg_NE\n@@ -2682,6 +2681,8 @@ package body Sem_Ch13 is\n                         Aspect, Id);\n                   end if;\n \n+                  goto Continue;\n+\n                --  SPARK_Mode\n \n                when Aspect_SPARK_Mode =>"}, {"sha": "68988d3c3b2b8b9cea4a4a2fff0101e9f5f34301", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=90b510e4aa33eec927376c42e608a5f569d264c7", "patch": "@@ -3073,6 +3073,7 @@ package body Sem_Ch4 is\n          if not Is_Type (Nam) then\n             if Is_Entity_Name (Name (N)) then\n                Set_Entity (Name (N), Nam);\n+               Set_Etype (Name (N), Etype (Nam));\n \n             elsif Nkind (Name (N)) = N_Selected_Component then\n                Set_Entity (Selector_Name (Name (N)),  Nam);\n@@ -7456,6 +7457,9 @@ package body Sem_Ch4 is\n          end if;\n \n       else\n+         --  If there are multiple indexing functions, build a function call\n+         --  and analyze it for each of the possible interpretations.\n+\n          Indexing :=\n            Make_Function_Call (Loc,\n              Name                   =>\n@@ -7464,6 +7468,8 @@ package body Sem_Ch4 is\n \n          Set_Parent (Indexing, Parent (N));\n          Set_Generalized_Indexing (N, Indexing);\n+         Set_Etype (N, Any_Type);\n+         Set_Etype (Name (Indexing), Any_Type);\n \n          declare\n             I       : Interp_Index;\n@@ -7473,21 +7479,24 @@ package body Sem_Ch4 is\n          begin\n             Get_First_Interp (Func_Name, I, It);\n             Set_Etype (Indexing, Any_Type);\n+\n             while Present (It.Nam) loop\n                Analyze_One_Call (Indexing, It.Nam, False, Success);\n \n                if Success then\n-                  Set_Etype  (Name (Indexing), It.Typ);\n-                  Set_Entity (Name (Indexing), It.Nam);\n-                  Set_Etype (N, Etype (Indexing));\n \n-                  --  Add implicit dereference interpretation\n+                  --  Function in current interpretation is a valid candidate.\n+                  --  Its result type is also a potential type for the\n+                  --  original Indexed_Component node.\n+\n+                  Add_One_Interp (Name (Indexing), It.Nam, It.Typ);\n+                  Add_One_Interp (N, It.Nam, It.Typ);\n+\n+                  --  Add implicit dereference interpretation to original node\n \n                   if Has_Discriminants (Etype (It.Nam)) then\n                      Check_Implicit_Dereference (N, Etype (It.Nam));\n                   end if;\n-\n-                  exit;\n                end if;\n \n                Get_Next_Interp (I, It);"}, {"sha": "519aab41503d89ce45d28d95d0e63fd0982aaff9", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=90b510e4aa33eec927376c42e608a5f569d264c7", "patch": "@@ -2057,19 +2057,20 @@ package body Sem_Ch5 is\n \n             Set_Is_Aliased (Def_Id, Has_Aliased_Components (Typ));\n \n-            --  AI12-0151 stipulates that the container cannot be a component\n-            --  that depends on a discriminant if the enclosing object is\n-            --  mutable, to prevent a modification of the container in the\n-            --  course of an iteration.\n+            --  AI12-0047 stipulates that the domain (array or container)\n+            --  cannot be a component that depends on a discriminant if the\n+            --  enclosing object is mutable, to prevent a modification of the\n+            --  dowmain of iteration in the course of an iteration.\n \n-            --  Should comment on need to go to Original_Node ???\n+            --  If the object is an expression it has been captured in a\n+            --  temporary, so examine original node.\n \n             if Nkind (Original_Node (Iter_Name)) = N_Selected_Component\n               and then Is_Dependent_Component_Of_Mutable_Object\n                          (Original_Node (Iter_Name))\n             then\n                Error_Msg_N\n-                 (\"container cannot be a discriminant-dependent \"\n+                 (\"iterable name cannot be a discriminant-dependent \"\n                   & \"component of a mutable object\", N);\n             end if;\n "}, {"sha": "d2df5d6a0ce0351f9751449d3be4d2d4a4a6fb0e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=90b510e4aa33eec927376c42e608a5f569d264c7", "patch": "@@ -12604,22 +12604,15 @@ package body Sem_Prag is\n \n             Obj_Id := Defining_Entity (Obj_Decl);\n \n-            --  The object declaration must be a library-level variable with\n-            --  an initialization expression. The expression must depend on\n-            --  a variable, parameter, or another constant_after_elaboration,\n-            --  but the compiler cannot detect this property, as this requires\n-            --  full flow analysis (SPARK RM 3.3.1).\n+            --  The object declaration must be a library-level variable which\n+            --  is either explicitly initialized or obtains a value during the\n+            --  elaboration of a package body (SPARK RM 3.3.1).\n \n             if Ekind (Obj_Id) = E_Variable then\n                if not Is_Library_Level_Entity (Obj_Id) then\n                   Error_Pragma\n                     (\"pragma % must apply to a library level variable\");\n                   return;\n-\n-               elsif not Has_Init_Expression (Obj_Decl) then\n-                  Error_Pragma\n-                    (\"pragma % must apply to a variable with initialization \"\n-                     & \"expression\");\n                end if;\n \n             --  Otherwise the pragma applies to a constant, which is illegal"}, {"sha": "712d03d258dada27bf039026675e3a33a40e3258", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=90b510e4aa33eec927376c42e608a5f569d264c7", "patch": "@@ -1732,6 +1732,8 @@ package body Sem_Util is\n       Disc : Entity_Id)\n    is\n       Loc : constant Source_Ptr := Sloc (Expr);\n+      I   : Interp_Index;\n+      It  : Interp;\n \n    begin\n       --  An entity of a type with a reference aspect is overloaded with\n@@ -1744,6 +1746,29 @@ package body Sem_Util is\n          Set_Etype (Expr, Etype (Entity (Expr)));\n \n       elsif Nkind (Expr) = N_Function_Call then\n+\n+         --  If the name of the indexing function is overloaded, locate the one\n+         --  whose return type has an implicit dereference on the desired\n+         --  discriminant, and set entity and type of function call.\n+\n+         if Is_Overloaded (Name (Expr)) then\n+            Get_First_Interp (Name (Expr), I, It);\n+\n+            while Present (It.Nam) loop\n+               if Ekind ((It.Typ)) = E_Record_Type\n+                 and then First_Entity ((It.Typ)) = Disc\n+               then\n+                  Set_Entity (Name (Expr), It.Nam);\n+                  Set_Etype (Name (Expr), Etype (It.Nam));\n+                  exit;\n+               end if;\n+\n+               Get_Next_Interp (I, It);\n+            end loop;\n+         end if;\n+\n+         --  Set type of call from resolved function name.\n+\n          Set_Etype (Expr, Etype (Name (Expr)));\n       end if;\n "}, {"sha": "03e798df6a50a4d0253e132f49feebc8433bdd5e", "filename": "gcc/ada/sigtramp-ios.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fsigtramp-ios.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b510e4aa33eec927376c42e608a5f569d264c7/gcc%2Fada%2Fsigtramp-ios.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-ios.c?ref=90b510e4aa33eec927376c42e608a5f569d264c7", "patch": "@@ -178,7 +178,7 @@ void __gnat_sigtramp (int signo, void *si, void *ucontext,\n   TCR(COMMON_LONG128_CFI(GR(27))) \\\n   TCR(COMMON_LONG128_CFI(GR(28))) \\\n   TCR(COMMON_LONG128_CFI(GR(29))) \\\n-  TCR(COMMON_LONG256_CFI(PC)) \\\n+  TCR(COMMON_LONG256_CFI(PC))\n \n /* Trampoline body block\n    ---------------------  */"}]}