{"sha": "c9080ba2a7ff9d0ec82729d54e550b554b78db88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkwODBiYTJhN2ZmOWQwZWM4MjcyOWQ1NGU1NTBiNTU0Yjc4ZGI4OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-14T07:27:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-14T07:27:04Z"}, "message": "tree-ssa-dom.c (record_temporary_equivalences): Merge wideing type conversion case from record_equivalences_from_incoming_edge...\n\n2015-07-14  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-dom.c (record_temporary_equivalences): Merge\n\twideing type conversion case from record_equivalences_from_incoming_edge\n\tand use record_equality to record equivalences.\n\t(record_equivalences_from_incoming_edge): Call\n\trecord_temporary_equivalences.\n\nFrom-SVN: r225761", "tree": {"sha": "caf8ef0708871f020b8482d4e5745eeb69c7199c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caf8ef0708871f020b8482d4e5745eeb69c7199c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9080ba2a7ff9d0ec82729d54e550b554b78db88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9080ba2a7ff9d0ec82729d54e550b554b78db88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9080ba2a7ff9d0ec82729d54e550b554b78db88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9080ba2a7ff9d0ec82729d54e550b554b78db88/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fdc6c67ad030e6caf88f391eb1deac0ce3679b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fdc6c67ad030e6caf88f391eb1deac0ce3679b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fdc6c67ad030e6caf88f391eb1deac0ce3679b3"}], "stats": {"total": 98, "additions": 44, "deletions": 54}, "files": [{"sha": "3143c3b1be0b73f5520126d0e02021f6b49e92dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9080ba2a7ff9d0ec82729d54e550b554b78db88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9080ba2a7ff9d0ec82729d54e550b554b78db88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9080ba2a7ff9d0ec82729d54e550b554b78db88", "patch": "@@ -1,3 +1,11 @@\n+2015-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-dom.c (record_temporary_equivalences): Merge\n+\twideing type conversion case from record_equivalences_from_incoming_edge\n+\tand use record_equality to record equivalences.\n+\t(record_equivalences_from_incoming_edge): Call\n+\trecord_temporary_equivalences.\n+\n 2015-07-14  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (struct operand): Add OP_IF and OP_WITH op_types."}, {"sha": "77f4ac0f72f1112b5b47cef0362e47901d468aa5", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 36, "deletions": 54, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9080ba2a7ff9d0ec82729d54e550b554b78db88/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9080ba2a7ff9d0ec82729d54e550b554b78db88/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=c9080ba2a7ff9d0ec82729d54e550b554b78db88", "patch": "@@ -1420,8 +1420,41 @@ record_temporary_equivalences (edge e)\n       tree rhs = edge_info->rhs;\n \n       /* If we have a simple NAME = VALUE equivalence, record it.  */\n-      if (lhs && TREE_CODE (lhs) == SSA_NAME)\n-\tconst_and_copies->record_const_or_copy (lhs, rhs);\n+      if (lhs)\n+\trecord_equality (lhs, rhs);\n+\n+      /* If LHS is an SSA_NAME and RHS is a constant integer and LHS was\n+\t set via a widening type conversion, then we may be able to record\n+\t additional equivalences.  */\n+      if (lhs\n+\t  && TREE_CODE (lhs) == SSA_NAME\n+\t  && is_gimple_constant (rhs)\n+\t  && TREE_CODE (rhs) == INTEGER_CST)\n+\t{\n+\t  gimple defstmt = SSA_NAME_DEF_STMT (lhs);\n+\n+\t  if (defstmt\n+\t      && is_gimple_assign (defstmt)\n+\t      && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (defstmt)))\n+\t    {\n+\t      tree old_rhs = gimple_assign_rhs1 (defstmt);\n+\n+\t      /* If the conversion widens the original value and\n+\t\t the constant is in the range of the type of OLD_RHS,\n+\t\t then convert the constant and record the equivalence.\n+\n+\t\t Note that int_fits_type_p does not check the precision\n+\t\t if the upper and lower bounds are OK.  */\n+\t      if (INTEGRAL_TYPE_P (TREE_TYPE (old_rhs))\n+\t\t  && (TYPE_PRECISION (TREE_TYPE (lhs))\n+\t\t      > TYPE_PRECISION (TREE_TYPE (old_rhs)))\n+\t\t  && int_fits_type_p (rhs, TREE_TYPE (old_rhs)))\n+\t\t{\n+\t\t  tree newval = fold_convert (TREE_TYPE (old_rhs), rhs);\n+\t\t  record_equality (old_rhs, newval);\n+\t\t}\n+\t    }\n+\t}\n \n       /* If we have 0 = COND or 1 = COND equivalences, record them\n \t into our expression hash tables.  */\n@@ -1568,7 +1601,6 @@ record_equivalences_from_incoming_edge (basic_block bb)\n {\n   edge e;\n   basic_block parent;\n-  struct edge_info *edge_info;\n \n   /* If our parent block ended with a control statement, then we may be\n      able to record some equivalences based on which outgoing edge from\n@@ -1580,57 +1612,7 @@ record_equivalences_from_incoming_edge (basic_block bb)\n   /* If we had a single incoming edge from our parent block, then enter\n      any data associated with the edge into our tables.  */\n   if (e && e->src == parent)\n-    {\n-      unsigned int i;\n-\n-      edge_info = (struct edge_info *) e->aux;\n-\n-      if (edge_info)\n-\t{\n-\t  tree lhs = edge_info->lhs;\n-\t  tree rhs = edge_info->rhs;\n-\t  cond_equivalence *eq;\n-\n-\t  if (lhs)\n-\t    record_equality (lhs, rhs);\n-\n-\t  /* If LHS is an SSA_NAME and RHS is a constant integer and LHS was\n-\t     set via a widening type conversion, then we may be able to record\n-\t     additional equivalences.  */\n-\t  if (lhs\n-\t      && TREE_CODE (lhs) == SSA_NAME\n-\t      && is_gimple_constant (rhs)\n-\t      && TREE_CODE (rhs) == INTEGER_CST)\n-\t    {\n-\t      gimple defstmt = SSA_NAME_DEF_STMT (lhs);\n-\n-\t      if (defstmt\n-\t\t  && is_gimple_assign (defstmt)\n-\t\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (defstmt)))\n-\t\t{\n-\t\t  tree old_rhs = gimple_assign_rhs1 (defstmt);\n-\n-\t\t  /* If the conversion widens the original value and\n-\t\t     the constant is in the range of the type of OLD_RHS,\n-\t\t     then convert the constant and record the equivalence.\n-\n-\t\t     Note that int_fits_type_p does not check the precision\n-\t\t     if the upper and lower bounds are OK.  */\n-\t\t  if (INTEGRAL_TYPE_P (TREE_TYPE (old_rhs))\n-\t\t      && (TYPE_PRECISION (TREE_TYPE (lhs))\n-\t\t\t  > TYPE_PRECISION (TREE_TYPE (old_rhs)))\n-\t\t      && int_fits_type_p (rhs, TREE_TYPE (old_rhs)))\n-\t\t    {\n-\t\t      tree newval = fold_convert (TREE_TYPE (old_rhs), rhs);\n-\t\t      record_equality (old_rhs, newval);\n-\t\t    }\n-\t\t}\n-\t    }\n-\n-\t  for (i = 0; edge_info->cond_equivalences.iterate (i, &eq); ++i)\n-\t    record_cond (eq);\n-\t}\n-    }\n+    record_temporary_equivalences (e);\n }\n \n /* Dump SSA statistics on FILE.  */"}]}