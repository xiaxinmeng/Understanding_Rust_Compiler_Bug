{"sha": "caa16d41773bf442acb6bb8768b1c9a829ca8cab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FhMTZkNDE3NzNiZjQ0MmFjYjZiYjg3NjhiMWM5YTgyOWNhOGNhYg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2014-03-07T11:30:40Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2014-03-07T11:30:40Z"}, "message": "Disable local dynamic TLS model on Solaris/x86 if as/ld cannot handle it\n\n\t* configure.ac (TLS_SECTION_ASM_FLAG): Save as tls_section_flag.\n\t(LIB_TLS_SPEC): Save as ld_tls_libs.\n\t(HAVE_AS_IX86_TLSLDMPLT): Define as 1/0.\n\t(HAVE_AS_IX86_TLSLDM): New test.\n\t* configure, config.in: Regenerate.\n\t* config/i386/i386.c (legitimize_tls_address): Fall back to\n\tTLS_MODEL_GLOBAL_DYNAMIC on 32-bit Solaris/x86 if tool chain\n\tcannot support TLS_MODEL_LOCAL_DYNAMIC.\n\t* config/i386/i386.md (*tls_local_dynamic_base_32_gnu): Use if\n\tinstead of #ifdef in HAVE_AS_IX86_TLSLDMPLT test.\n\nFrom-SVN: r208398", "tree": {"sha": "a011634132cdbafc0a5e5fb3639e9669412d7f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a011634132cdbafc0a5e5fb3639e9669412d7f10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caa16d41773bf442acb6bb8768b1c9a829ca8cab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa16d41773bf442acb6bb8768b1c9a829ca8cab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa16d41773bf442acb6bb8768b1c9a829ca8cab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa16d41773bf442acb6bb8768b1c9a829ca8cab/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3d83ffe34d35ed33b9d633f80ba5bad41aea5a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d83ffe34d35ed33b9d633f80ba5bad41aea5a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d83ffe34d35ed33b9d633f80ba5bad41aea5a0"}], "stats": {"total": 166, "additions": 153, "deletions": 13}, "files": [{"sha": "feef2ce8d6349604f5098b81943f08f2b21a9457", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa16d41773bf442acb6bb8768b1c9a829ca8cab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa16d41773bf442acb6bb8768b1c9a829ca8cab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=caa16d41773bf442acb6bb8768b1c9a829ca8cab", "patch": "@@ -1,3 +1,16 @@\n+2014-03-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (TLS_SECTION_ASM_FLAG): Save as tls_section_flag.\n+\t(LIB_TLS_SPEC): Save as ld_tls_libs.\n+\t(HAVE_AS_IX86_TLSLDMPLT): Define as 1/0.\n+\t(HAVE_AS_IX86_TLSLDM): New test.\n+\t* configure, config.in: Regenerate.\n+\t* config/i386/i386.c (legitimize_tls_address): Fall back to\n+\tTLS_MODEL_GLOBAL_DYNAMIC on 32-bit Solaris/x86 if tool chain\n+\tcannot support TLS_MODEL_LOCAL_DYNAMIC.\n+\t* config/i386/i386.md (*tls_local_dynamic_base_32_gnu): Use if\n+\tinstead of #ifdef in HAVE_AS_IX86_TLSLDMPLT test.\n+\n 2014-03-07  Paulo Matos  <paulo@matos-sorge.com>\n \n \t* common.opt (fira-loop-pressure): Mark as optimization."}, {"sha": "af02866dd3399240ec6e30a060ed15126c8c8528", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa16d41773bf442acb6bb8768b1c9a829ca8cab/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa16d41773bf442acb6bb8768b1c9a829ca8cab/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=caa16d41773bf442acb6bb8768b1c9a829ca8cab", "patch": "@@ -369,7 +369,13 @@\n #endif\n \n \n-/* Define if your assembler and linker support @tlsldmplt. */\n+/* Define to 1 if your assembler and linker support @tlsldm. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_IX86_TLSLDM\n+#endif\n+\n+\n+/* Define to 1 if your assembler and linker support @tlsldmplt. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_IX86_TLSLDMPLT\n #endif"}, {"sha": "9e33d5309fc0e2ce27cc217e2ec70b7aca61cd72", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa16d41773bf442acb6bb8768b1c9a829ca8cab/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa16d41773bf442acb6bb8768b1c9a829ca8cab/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=caa16d41773bf442acb6bb8768b1c9a829ca8cab", "patch": "@@ -13396,6 +13396,13 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n   enum machine_mode tp_mode = Pmode;\n   int type;\n \n+  /* Fall back to global dynamic model if tool chain cannot support local\n+     dynamic.  */\n+  if (TARGET_SUN_TLS && !TARGET_64BIT\n+      && !HAVE_AS_IX86_TLSLDMPLT && !HAVE_AS_IX86_TLSLDM\n+      && model == TLS_MODEL_LOCAL_DYNAMIC)\n+    model = TLS_MODEL_GLOBAL_DYNAMIC;\n+\n   switch (model)\n     {\n     case TLS_MODEL_GLOBAL_DYNAMIC:"}, {"sha": "ea1d85f76a5563036a60f4cd081b5600376f010f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa16d41773bf442acb6bb8768b1c9a829ca8cab/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa16d41773bf442acb6bb8768b1c9a829ca8cab/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=caa16d41773bf442acb6bb8768b1c9a829ca8cab", "patch": "@@ -12962,11 +12962,12 @@\n   output_asm_insn\n     (\"lea{l}\\t{%&@tlsldm(%1), %0|%0, %&@tlsldm[%1]}\", operands);\n   if (TARGET_SUN_TLS)\n-#ifdef HAVE_AS_IX86_TLSLDMPLT\n-    return \"call\\t%&@tlsldmplt\";\n-#else\n-    return \"call\\t%p2@plt\";\n-#endif\n+    {\n+      if (HAVE_AS_IX86_TLSLDMPLT)\n+\treturn \"call\\t%&@tlsldmplt\";\n+      else\n+\treturn \"call\\t%p2@plt\";\n+    }\n   return \"call\\t%P2\";\n }\n   [(set_attr \"type\" \"multi\")"}, {"sha": "297238daef34907408cfa148ec51b11e881188f8", "filename": "gcc/configure", "status": "modified", "additions": 74, "deletions": 4, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa16d41773bf442acb6bb8768b1c9a829ca8cab/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa16d41773bf442acb6bb8768b1c9a829ca8cab/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=caa16d41773bf442acb6bb8768b1c9a829ca8cab", "patch": "@@ -10970,6 +10970,10 @@ else\n     force_sjlj_exceptions=yes\n     enableval=yes\n     ;;\n+  lm32*-*-*)\n+     force_sjlj_exceptions=yes\n+     enableval=yes\n+     ;;\n   *)\n     force_sjlj_exceptions=no\n     ;;\n@@ -17923,7 +17927,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17926 \"configure\"\n+#line 17930 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18029,7 +18033,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18032 \"configure\"\n+#line 18036 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -23298,6 +23302,7 @@ foo:\t.long\t25\n \t.section .tdata,\"awt\",@progbits'\n       tls_first_major=0\n       tls_first_minor=0\n+      tls_section_flag=t\n \n $as_echo \"#define TLS_SECTION_ASM_FLAG 't'\" >>confdefs.h\n \n@@ -23306,6 +23311,7 @@ $as_echo \"#define TLS_SECTION_ASM_FLAG 't'\" >>confdefs.h\n \t.section \".tdata\",\"awT\",@progbits'\n       tls_first_major=2\n       tls_first_minor=14\n+      tls_section_flag=T\n       tls_as_opt=\"--fatal-warnings\"\n     fi\n     conftest_s=\"$conftest_s\n@@ -23336,6 +23342,7 @@ foo:\t.long\t25\n \tmovq\t$foo@TPOFF, %rax'\n \ttls_first_major=2\n \ttls_first_minor=14\n+\ttls_section_flag=T\n \ttls_as_opt=--fatal-warnings\n \t;;\n   ia64-*-*)\n@@ -23782,6 +23789,7 @@ else\n   set_have_as_tls=no\n fi\n \n+    ld_tls_libs=\"$LIBS\"\n     # Clear LIBS if we cannot support TLS.\n     if test $set_have_as_tls = no; then\n       LIBS=\n@@ -25205,11 +25213,73 @@ else\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_ix86_tlsldmplt\" >&5\n $as_echo \"$gcc_cv_as_ix86_tlsldmplt\" >&6; }\n-if test $gcc_cv_as_ix86_tlsldmplt = yes; then\n \n-$as_echo \"#define HAVE_AS_IX86_TLSLDMPLT 1\" >>confdefs.h\n \n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_AS_IX86_TLSLDMPLT `if test $gcc_cv_as_ix86_tlsldmplt = yes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n+\n+    # Enforce 32-bit output with gas and gld.\n+    if test x$gas = xyes; then\n+      as_ix86_tls_ldm_opt=\"--32\"\n+    fi\n+    if echo \"$ld_ver\" | grep GNU > /dev/null; then\n+      if $gcc_cv_ld -V 2>/dev/null | grep elf_i386_sol2 > /dev/null; then\n+        ld_ix86_tls_ldm_opt=\"-melf_i386_sol2\"\n+      else\n+        ld_ix86_tls_ldm_opt=\"-melf_i386\"\n+      fi\n+    fi\n+    conftest_s='\n+\t.section .text,\"ax\",@progbits\n+        .globl  _start\n+        .type   _start, @function\n+_start:\n+\tleal\tvalue@tlsldm(%ebx), %eax\n+\tcall\t___tls_get_addr@plt\n+\n+        .section .tdata,\"aw'$tls_section_flag'\",@progbits\n+        .type\tvalue, @object\n+value:'\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for R_386_TLS_LDM reloc\" >&5\n+$as_echo_n \"checking assembler for R_386_TLS_LDM reloc... \" >&6; }\n+if test \"${gcc_cv_as_ix86_tlsldm+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_ix86_tlsldm=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags $as_ix86_tls_ldm_opt -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tif test x$gcc_cv_ld != x && test x$gcc_cv_objdump != x \\\n+\t    && $gcc_cv_ld $ld_ix86_tls_ldm_opt -o conftest conftest.o $ld_tls_libs -lc > /dev/null 2>&1; then\n+\t   if $gcc_cv_objdump -d conftest 2>/dev/null | grep nop > /dev/null \\\n+\t      || dis conftest 2>/dev/null | grep nop > /dev/null; then\n+\t     gcc_cv_as_ix86_tlsldm=yes\n+\t   fi\n+\t fi\n+\t rm -f conftest\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_ix86_tlsldm\" >&5\n+$as_echo \"$gcc_cv_as_ix86_tlsldm\" >&6; }\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_AS_IX86_TLSLDM `if test $gcc_cv_as_ix86_tlsldm = yes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n \n     ;;\n "}, {"sha": "156d46c2ad675c0e908d5df54bce942483f2255b", "filename": "gcc/configure.ac", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa16d41773bf442acb6bb8768b1c9a829ca8cab/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa16d41773bf442acb6bb8768b1c9a829ca8cab/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=caa16d41773bf442acb6bb8768b1c9a829ca8cab", "patch": "@@ -2973,6 +2973,7 @@ foo:\t.long\t25\n \t.section .tdata,\"awt\",@progbits'\n       tls_first_major=0\n       tls_first_minor=0\n+      tls_section_flag=t\n changequote([,])dnl\n       AC_DEFINE(TLS_SECTION_ASM_FLAG, 't',\n [Define to the flag used to mark TLS sections if the default (`T') doesn't work.])\n@@ -2982,6 +2983,7 @@ changequote(,)dnl\n \t.section \".tdata\",\"awT\",@progbits'\n       tls_first_major=2\n       tls_first_minor=14\n+      tls_section_flag=T\n       tls_as_opt=\"--fatal-warnings\"\n     fi\n     conftest_s=\"$conftest_s\n@@ -3012,6 +3014,7 @@ foo:\t.long\t25\n \tmovq\t$foo@TPOFF, %rax'\n \ttls_first_major=2\n \ttls_first_minor=14\n+\ttls_section_flag=T\n \ttls_as_opt=--fatal-warnings\n \t;;\n   ia64-*-*)\n@@ -3368,6 +3371,7 @@ case \"$target\" in\n     # (32-bit x86) only lived in libthread, so check for that.  Keep\n     # set_have_as_tls if found, disable if not.\n     AC_SEARCH_LIBS([$tga_func], [thread],, [set_have_as_tls=no])\n+    ld_tls_libs=\"$LIBS\"\n     # Clear LIBS if we cannot support TLS.\n     if test $set_have_as_tls = no; then\n       LIBS=\n@@ -3924,9 +3928,48 @@ foo:\tnop\n \t && $gcc_cv_ld -o conftest conftest.o -G > /dev/null 2>&1; then\n \t   gcc_cv_as_ix86_tlsldmplt=yes\n \t fi\n-\t rm -f conftest],\n-      [AC_DEFINE(HAVE_AS_IX86_TLSLDMPLT, 1,\n-        [Define if your assembler and linker support @tlsldmplt.])])\n+\t rm -f conftest])\n+    AC_DEFINE_UNQUOTED(HAVE_AS_IX86_TLSLDMPLT,\n+      [`if test $gcc_cv_as_ix86_tlsldmplt = yes; then echo 1; else echo 0; fi`],\n+      [Define to 1 if your assembler and linker support @tlsldmplt.])\n+\n+    # Enforce 32-bit output with gas and gld.\n+    if test x$gas = xyes; then\n+      as_ix86_tls_ldm_opt=\"--32\"\n+    fi\n+    if echo \"$ld_ver\" | grep GNU > /dev/null; then\n+      if $gcc_cv_ld -V 2>/dev/null | grep elf_i386_sol2 > /dev/null; then\n+        ld_ix86_tls_ldm_opt=\"-melf_i386_sol2\"\n+      else\n+        ld_ix86_tls_ldm_opt=\"-melf_i386\"\n+      fi\n+    fi\n+    conftest_s='\n+\t.section .text,\"ax\",@progbits\n+        .globl  _start\n+        .type   _start, @function\n+_start:      \n+\tleal\tvalue@tlsldm(%ebx), %eax\n+\tcall\t___tls_get_addr@plt\n+\n+        .section .tdata,\"aw'$tls_section_flag'\",@progbits\n+        .type\tvalue, @object\n+value:'\n+    gcc_GAS_CHECK_FEATURE([R_386_TLS_LDM reloc],\n+        gcc_cv_as_ix86_tlsldm,,\n+\t[$as_ix86_tls_ldm_opt],\n+\t[$conftest_s],\n+\t[if test x$gcc_cv_ld != x && test x$gcc_cv_objdump != x \\\n+\t    && $gcc_cv_ld $ld_ix86_tls_ldm_opt -o conftest conftest.o $ld_tls_libs -lc > /dev/null 2>&1; then\n+\t   if $gcc_cv_objdump -d conftest 2>/dev/null | grep nop > /dev/null \\\n+\t      || dis conftest 2>/dev/null | grep nop > /dev/null; then\n+\t     gcc_cv_as_ix86_tlsldm=yes\n+\t   fi\n+\t fi\n+\t rm -f conftest])\n+    AC_DEFINE_UNQUOTED(HAVE_AS_IX86_TLSLDM,\n+      [`if test $gcc_cv_as_ix86_tlsldm = yes; then echo 1; else echo 0; fi`],\n+      [Define to 1 if your assembler and linker support @tlsldm.])\n \n     ;;\n "}]}