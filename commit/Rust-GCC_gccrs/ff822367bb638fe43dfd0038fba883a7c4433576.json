{"sha": "ff822367bb638fe43dfd0038fba883a7c4433576", "node_id": "C_kwDOANBUbNoAKGZmODIyMzY3YmI2MzhmZTQzZGZkMDAzOGZiYTg4M2E3YzQ0MzM1NzY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-15T00:17:35Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-15T00:17:35Z"}, "message": "Daily bump.", "tree": {"sha": "912a739e6453a77e86c34c9a837c29bc66a6f698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/912a739e6453a77e86c34c9a837c29bc66a6f698"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff822367bb638fe43dfd0038fba883a7c4433576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff822367bb638fe43dfd0038fba883a7c4433576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff822367bb638fe43dfd0038fba883a7c4433576", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff822367bb638fe43dfd0038fba883a7c4433576/comments", "author": null, "committer": null, "parents": [{"sha": "0abc63a5ea4550c9e75e81b05a153dfb4b234446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0abc63a5ea4550c9e75e81b05a153dfb4b234446", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0abc63a5ea4550c9e75e81b05a153dfb4b234446"}], "stats": {"total": 310, "additions": 309, "deletions": 1}, "files": [{"sha": "773bafba76128bec26b0a70801aeb1d4ff0a7cac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff822367bb638fe43dfd0038fba883a7c4433576/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff822367bb638fe43dfd0038fba883a7c4433576/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff822367bb638fe43dfd0038fba883a7c4433576", "patch": "@@ -1,3 +1,182 @@\n+2022-09-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (frange_add_zeros): New.\n+\t(build_le): Call frange_add_zeros.\n+\t(build_ge): Same.\n+\t(foperator_equal::op1_range): Same.\n+\t(foperator_not_equal::op1_range): Same.\n+\n+2022-09-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (build_le): Accept frange instead of number.\n+\t(build_lt): Same.\n+\t(build_ge): Same.\n+\t(build_gt): Same.\n+\t(foperator_lt::op1_range): Pass full range to build_*.\n+\t(foperator_lt::op2_range): Same.\n+\t(foperator_le::op1_range): Same.\n+\t(foperator_le::op2_range): Same.\n+\t(foperator_gt::op1_range): Same.\n+\t(foperator_gt::op2_range): Same.\n+\t(foperator_ge::op1_range): Same.\n+\t(foperator_ge::op2_range): Same.\n+\n+2022-09-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (frange::set): Use set_nan.\n+\t* value-range.h (frange::set_nan): Inline code originally in\n+\tset().\n+\n+2022-09-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (frange_set_nan): Remove.\n+\t(build_lt): Use set_nan, update_nan, clear_nan.\n+\t(build_gt): Same.\n+\t(foperator_equal::op1_range): Same.\n+\t(foperator_not_equal::op1_range): Same.\n+\t(foperator_lt::op1_range): Same.\n+\t(foperator_lt::op2_range): Same.\n+\t(foperator_le::op1_range): Same.\n+\t(foperator_le::op2_range): Same.\n+\t(foperator_gt::op1_range): Same.\n+\t(foperator_gt::op2_range): Same.\n+\t(foperator_ge::op1_range): Same.\n+\t(foperator_ge::op2_range): Same.\n+\t(foperator_unordered::op1_range): Same.\n+\t(foperator_ordered::op1_range): Same.\n+\t* value-query.cc (range_query::get_tree_range): Same.\n+\t* value-range.cc (frange::set_nan): Same.\n+\t(frange::update_nan): Same.\n+\t(frange::union_): Same.\n+\t(frange::intersect): Same.\n+\t(range_tests_nan): Same.\n+\t(range_tests_signed_zeros): Same.\n+\t(range_tests_signbit): Same.\n+\t(range_tests_floats): Same.\n+\t* value-range.h (class frange): Add update_nan and clear_nan.\n+\t(frange::set_nan): New.\n+\n+2022-09-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-query.cc (range_query::get_tree_range): Remove check for overflow.\n+\t* value-range-pretty-print.cc (vrange_printer::visit): Move read\n+\tof type until after undefined_p is checked.\n+\t* value-range.cc (frange::set): Remove asserts for REAL_CST.\n+\t(frange::contains_p): Tidy up.\n+\t(range_tests_nan):  Add comment.\n+\t* value-range.h (frange::type): Check for undefined_p.\n+\t(frange::set_undefined): Remove set of endpoints.\n+\n+2022-09-14  Julian Brown  <julian@codesourcery.com>\n+\n+\t* gimplify.cc (omp_group_last): Allow GOMP_MAP_ATTACH_DETACH after\n+\tGOMP_MAP_STRUCT (for reindexing).\n+\t(omp_gather_mapping_groups): Reimplement using...\n+\t(omp_gather_mapping_groups_1): This new function.  Stop processing at\n+\tGATHER_SENTINEL.\n+\t(omp_group_base): Allow GOMP_MAP_TO_PSET without any following node.\n+\t(omp_index_mapping_groups): Reimplement using...\n+\t(omp_index_mapping_groups_1): This new function.  Handle\n+\tREINDEX_SENTINEL.\n+\t(omp_reindex_mapping_groups, omp_mapped_by_containing_struct): New\n+\tfunctions.\n+\t(omp_tsort_mapping_groups_1): Adjust handling of base group being the\n+\tsame as current group.  Use omp_mapped_by_containing_struct.\n+\t(omp_build_struct_sibling_lists): Use omp_mapped_by_containing_struct\n+\tand omp_reindex_mapping_groups.  Robustify group deletion for reordered\n+\tlists.\n+\t(gimplify_scan_omp_clauses): Update calls to\n+\tomp_build_struct_sibling_lists.\n+\n+2022-09-14  Julian Brown  <julian@codesourcery.com>\n+\n+\t* gimplify.cc (gimplify_omp_var_data): Remove GOVD_MAP_HAS_ATTACHMENTS.\n+\t(GOMP_FIRSTPRIVATE_IMPLICIT): Renumber.\n+\t(insert_struct_comp_map): Refactor function into...\n+\t(build_omp_struct_comp_nodes): This new function.  Remove list handling\n+\tand improve self-documentation.\n+\t(extract_base_bit_offset): Remove BASE_REF, OFFSETP parameters.  Move\n+\tcode to strip outer parts of address out of function, but strip no-op\n+\tconversions.\n+\t(omp_mapping_group): Add DELETED field for use during reindexing.\n+\t(omp_strip_components_and_deref, omp_strip_indirections): New functions.\n+\t(omp_group_last, omp_group_base): Add GOMP_MAP_STRUCT handling.\n+\t(omp_gather_mapping_groups): Initialise DELETED field for new groups.\n+\t(omp_index_mapping_groups): Notice DELETED groups when (re)indexing.\n+\t(omp_siblist_insert_node_after, omp_siblist_move_node_after,\n+\tomp_siblist_move_nodes_after, omp_siblist_move_concat_nodes_after): New\n+\thelper functions.\n+\t(omp_accumulate_sibling_list): New function to build up GOMP_MAP_STRUCT\n+\tnode groups for sibling lists. Outlined from gimplify_scan_omp_clauses.\n+\t(omp_build_struct_sibling_lists): New function.\n+\t(gimplify_scan_omp_clauses): Remove struct_map_to_clause,\n+\tstruct_seen_clause, struct_deref_set.  Call\n+\tomp_build_struct_sibling_lists as pre-pass instead of handling sibling\n+\tlists in the function's main processing loop.\n+\t(gimplify_adjust_omp_clauses_1): Remove GOVD_MAP_HAS_ATTACHMENTS\n+\thandling, unused now.\n+\t* omp-low.cc (scan_sharing_clauses): Handle pointer-type indirect\n+\tstruct references, and references to pointers to structs also.\n+\n+2022-09-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106938\n+\t* tree-cfg.cc (execute_fixup_cfg): Purge dead abnormal\n+\tedges for all last stmts in a block.  Do EH cleanup\n+\tonly on the last stmt in a block.\n+\n+2022-09-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/106936\n+\t* value-query.cc (range_query::get_value_range): Remove assert.\n+\n+2022-09-14  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* config/mips/mips.cc (mips_option_override): Drop unused variable.\n+\n+2022-09-14  Julian Brown  <julian@codesourcery.com>\n+\n+\t* gimplify.cc (is_or_contains_p, omp_target_reorder_clauses): Delete\n+\tfunctions.\n+\t(omp_tsort_mark): Add enum.\n+\t(omp_mapping_group): Add struct.\n+\t(debug_mapping_group, omp_get_base_pointer, omp_get_attachment,\n+\tomp_group_last, omp_gather_mapping_groups, omp_group_base,\n+\tomp_index_mapping_groups, omp_containing_struct,\n+\tomp_tsort_mapping_groups_1, omp_tsort_mapping_groups,\n+\tomp_segregate_mapping_groups, omp_reorder_mapping_groups): New\n+\tfunctions.\n+\t(gimplify_scan_omp_clauses): Call above functions instead of\n+\tomp_target_reorder_clauses, unless we've seen an error.\n+\t* omp-low.cc (scan_sharing_clauses): Avoid strict test if we haven't\n+\tsorted mapping groups.\n+\n+2022-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/106878\n+\t* tree-cfg.cc (verify_gimple_assign_binary): Disallow pointer,\n+\treference or OFFSET_TYPE BIT_IOR_EXPR, BIT_XOR_EXPR or, unless\n+\tthe second argument is INTEGER_CST, BIT_AND_EXPR.\n+\t* match.pd ((type) X op CST -> (type) (X op ((type-x) CST)),\n+\t(type) (((type2) X) op Y) -> (X op (type) Y)): Punt for\n+\tPOINTER_TYPE_P or OFFSET_TYPE.\n+\t* tree-ssa-reassoc.cc (optimize_range_tests_cmp_bitwise): For\n+\tpointers cast them to pointer sized integers first.\n+\n+2022-09-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106934\n+\t* tree-ssa.cc (non_rewritable_mem_ref_base): Avoid BIT_FIELD_REFs\n+\tof bitfields.\n+\t(maybe_rewrite_mem_ref_base): Likewise.\n+\n+2022-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/106905\n+\t* tree-vect-loop.cc (vectorizable_nonlinear_induction): Return\n+\tfalse when !vect_use_loop_mask_for_alignment_p (loop_vinfo) &&\n+\tLOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo) < 0.\n+\n 2022-09-13  Roger Sayle  <roger@nextmovesoftware.com>\n \n \tPR target/106877"}, {"sha": "437b57288fae87eeb38374bcd219148953954114", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff822367bb638fe43dfd0038fba883a7c4433576/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff822367bb638fe43dfd0038fba883a7c4433576/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ff822367bb638fe43dfd0038fba883a7c4433576", "patch": "@@ -1 +1 @@\n-20220914\n+20220915"}, {"sha": "03e616336cfd1b025b4df47b5d28c24361cdfcad", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff822367bb638fe43dfd0038fba883a7c4433576/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff822367bb638fe43dfd0038fba883a7c4433576/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ff822367bb638fe43dfd0038fba883a7c4433576", "patch": "@@ -1,3 +1,8 @@\n+2022-09-14  Julian Brown  <julian@codesourcery.com>\n+\n+\t* c-typeck.cc (c_finish_omp_clauses): Remove whole mapping node group\n+\ton error.\n+\n 2022-09-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-parser.cc (c_parser_static_assert_declaration_no_semi)"}, {"sha": "0a360a7265d6cc7a7a860b776ebd443d20177451", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff822367bb638fe43dfd0038fba883a7c4433576/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff822367bb638fe43dfd0038fba883a7c4433576/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ff822367bb638fe43dfd0038fba883a7c4433576", "patch": "@@ -1,3 +1,7 @@\n+2022-09-14  Julian Brown  <julian@codesourcery.com>\n+\n+\t* semantics.cc (finish_omp_clauses): Likewise.\n+\n 2022-09-13  Patrick Palka  <ppalka@redhat.com>\n \n \t* cp-tree.h (mark_used): Remove single-parameter overload.  Add"}, {"sha": "1839f57756292ac31e904e8da73a465eae8deffa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff822367bb638fe43dfd0038fba883a7c4433576/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff822367bb638fe43dfd0038fba883a7c4433576/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ff822367bb638fe43dfd0038fba883a7c4433576", "patch": "@@ -1,3 +1,9 @@\n+2022-09-14  Julian Brown  <julian@codesourcery.com>\n+\n+\t* trans-openmp.cc (gfc_trans_omp_clauses): Don't create\n+\tGOMP_MAP_TO_PSET mappings for class metadata, nor GOMP_MAP_POINTER\n+\tmappings for POINTER_TYPE_P decls.\n+\n 2022-09-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/95644"}, {"sha": "fd350e879329592fd72880cbeb64987080a24e74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff822367bb638fe43dfd0038fba883a7c4433576/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff822367bb638fe43dfd0038fba883a7c4433576/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff822367bb638fe43dfd0038fba883a7c4433576", "patch": "@@ -1,3 +1,67 @@\n+2022-09-14  Julian Brown  <julian@codesourcery.com>\n+\n+\t* g++.dg/goacc/member-array-acc.C: New test.\n+\t* g++.dg/gomp/member-array-omp.C: New test.\n+\t* g++.dg/gomp/target-3.C: Update expected output.\n+\t* g++.dg/gomp/target-lambda-1.C: Likewise.\n+\t* g++.dg/gomp/target-this-2.C: Likewise.\n+\t* c-c++-common/goacc/deep-copy-arrayofstruct.c: Move test from here.\n+\t* c-c++-common/gomp/target-50.c: New test.\n+\n+2022-09-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106938\n+\t* gcc.dg/pr106938.c: New testcase.\n+\n+2022-09-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/106936\n+\t* g++.dg/tree-ssa/pr106936.C: New test.\n+\n+2022-09-14  Julian Brown  <julian@codesourcery.com>\n+\n+\t* g++.dg/gomp/target-lambda-1.C: Adjust expected output.\n+\t* g++.dg/gomp/target-this-3.C: Likewise.\n+\t* g++.dg/gomp/target-this-4.C: Likewise.\n+\n+2022-09-14  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.target/s390/ifcvt-one-insn-bool.c: Add -mzarch.\n+\t* gcc.target/s390/ifcvt-one-insn-char.c: Dito.\n+\t* gcc.target/s390/ifcvt-two-insns-bool.c: Dito.\n+\t* gcc.target/s390/ifcvt-two-insns-int.c: Dito.\n+\t* gcc.target/s390/ifcvt-two-insns-long.c: Add -mzarch and change\n+\tlong into long long.\n+\n+2022-09-14  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/vperm-rev-z14.c: Add -save-temps.\n+\t* gcc.target/s390/vector/vperm-rev-z15.c: Likewise.\n+\n+2022-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/106878\n+\t* gcc.c-torture/compile/pr106878.c: New test.\n+\n+2022-09-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106934\n+\t* gfortran.dg/pr106934.f90: New testcase.\n+\n+2022-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr106905.c: New test.\n+\t* gcc.target/ia64/pr106905.c: New test.\n+\n+2022-09-14  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\t    Yvan ROUX   <yvan.roux@foss.st.com>\n+\n+\tPR target/95720\n+\t* lib/g++.exp: Moved gluefile block to after flags have been\n+\t  prefixed for the target_compile call.\n+\t* lib/gcc.exp: Likewise.\n+\t* lib/wrapper.exp: Reset adjusted state flag.\n+\n 2022-09-13  Roger Sayle  <roger@nextmovesoftware.com>\n \n \tPR target/106877"}, {"sha": "d3b4758a2a9df83db98846f502fb82c9d9d0dff2", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff822367bb638fe43dfd0038fba883a7c4433576/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff822367bb638fe43dfd0038fba883a7c4433576/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ff822367bb638fe43dfd0038fba883a7c4433576", "patch": "@@ -1,3 +1,11 @@\n+2022-09-14  Julian Brown  <julian@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-15.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-16.c: New test.\n+\t* testsuite/libgomp.oacc-c++/deep-copy-17.C: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-arrayofstruct.c: Move\n+\ttest to here, make \"run\" test.\n+\n 2022-09-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/106906"}, {"sha": "b20194d9b0e5fb9abaf3f0459c3b09dbda93091a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff822367bb638fe43dfd0038fba883a7c4433576/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff822367bb638fe43dfd0038fba883a7c4433576/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ff822367bb638fe43dfd0038fba883a7c4433576", "patch": "@@ -1,3 +1,45 @@\n+2022-09-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/shared_ptr_atomic.h (_GLIBCXX_TSAN_MUTEX_DESTROY)\n+\t(_GLIBCXX_TSAN_MUTEX_PRE_LOCK, _GLIBCXX_TSAN_MUTEX_POST_LOCK)\n+\t(_GLIBCXX_TSAN_MUTEX_PRE_UNLOCK, _GLIBCXX_TSAN_MUTEX_POST_UNLOCK)\n+\t(_GLIBCXX_TSAN_MUTEX_PRE_SIGNAL, _GLIBCXX_TSAN_MUTEX_POST_SIGNAL):\n+\tDefine macros for TSan annotation functions.\n+\t(_Sp_atomic::_Atomic_count): Add annotations.\n+\n+2022-09-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_tempbuf.h: Include <new>.\n+\n+2022-09-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/17_intro/names.cc: Explain why poison pragma can't\n+\tbe used.\n+\n+2022-09-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/future\n+\t(_State_baseV2::__setter(exception_ptr&, promise&)): Add\n+\tassertion for LWG 2276 precondition.\n+\t* testsuite/30_threads/promise/members/set_exception_neg.cc:\n+\tNew test.\n+\n+2022-09-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/intro.xml: Document LWG 1203.\n+\t* doc/html/*: Regenerate.\n+\n+2022-09-14  Philipp Fent  <fent@in.tum.de>\n+\n+\t* python/libstdcxx/v6/printers.py (access_streambuf_ptrs):\n+\tNew helper function.\n+\t(StdStringBufPrinter, StdStringStreamPrinter): New printers.\n+\t(build_libstdcxx_dictionary): Register stringstream printers.\n+\t* testsuite/libstdc++-prettyprinters/debug.cc: Check string\n+\tstreams.\n+\t* testsuite/libstdc++-prettyprinters/simple.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.\n+\n 2022-09-13  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/ranges (__detail::__slide_caches_nothing): Define."}]}