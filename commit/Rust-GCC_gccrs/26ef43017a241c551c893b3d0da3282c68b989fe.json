{"sha": "26ef43017a241c551c893b3d0da3282c68b989fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlZjQzMDE3YTI0MWM1NTFjODkzYjNkMGRhMzI4MmM2OGI5ODlmZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2006-05-02T19:54:20Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2006-05-02T19:54:20Z"}, "message": "re PR tree-optimization/27364 (VRP miscompiles some unsigned math)\n\n\n\tPR tree-optimization/27364\n\t* tree-vrp.c (vrp_int_const_binop): Fix detection of overflow from\n\tmultiply expressions.\n\n\t* gcc.c-torture/execute/pr27364.c: New test.\n\nFrom-SVN: r113481", "tree": {"sha": "fb6626d3659e936c2efbe650999f417c6e9eb12a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb6626d3659e936c2efbe650999f417c6e9eb12a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26ef43017a241c551c893b3d0da3282c68b989fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ef43017a241c551c893b3d0da3282c68b989fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ef43017a241c551c893b3d0da3282c68b989fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ef43017a241c551c893b3d0da3282c68b989fe/comments", "author": null, "committer": null, "parents": [{"sha": "e6cbdf26b4b126b1271818399b4069fa9d40d850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6cbdf26b4b126b1271818399b4069fa9d40d850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6cbdf26b4b126b1271818399b4069fa9d40d850"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "28e261605e276f003e4075837ae74d3a372884ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef43017a241c551c893b3d0da3282c68b989fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef43017a241c551c893b3d0da3282c68b989fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26ef43017a241c551c893b3d0da3282c68b989fe", "patch": "@@ -1,3 +1,9 @@\n+2006-05-02  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/27364\n+\t* tree-vrp.c (vrp_int_const_binop): Fix detection of overflow from\n+\tmultiply expressions.\n+\n 2006-05-02  Tom Tromey  <tromey@redhat.com>\n \n \t* tree-flow-inline.h (op_iter_init_phiuse): Fixed typo."}, {"sha": "2a654bc87d5a2e28b7a5fd9dc8fdb65df38dcc76", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef43017a241c551c893b3d0da3282c68b989fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef43017a241c551c893b3d0da3282c68b989fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26ef43017a241c551c893b3d0da3282c68b989fe", "patch": "@@ -1,3 +1,8 @@\n+2006-05-02  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/27364\n+\t* gcc.c-torture/execute/pr27364.c: New test.\n+\n 2006-05-02  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/27309"}, {"sha": "aa608b2a2fedd9ac75c4023e3ce088d4241095b9", "filename": "gcc/testsuite/gcc.c-torture/execute/pr27364.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef43017a241c551c893b3d0da3282c68b989fe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr27364.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef43017a241c551c893b3d0da3282c68b989fe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr27364.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr27364.c?ref=26ef43017a241c551c893b3d0da3282c68b989fe", "patch": "@@ -0,0 +1,13 @@\n+int f(unsigned number_of_digits_to_use)\n+{\n+  if (number_of_digits_to_use >1294)\n+    return 0;\n+  return (number_of_digits_to_use * 3321928 / 1000000 + 1) /16;\n+}\n+\n+int main(void)\n+{\n+  if (f(11) != 2)\n+    __builtin_abort ();\n+  exit (0);\n+}"}, {"sha": "d487df62caa36c882c5a0e7b09044188f0b2f4cd", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef43017a241c551c893b3d0da3282c68b989fe/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef43017a241c551c893b3d0da3282c68b989fe/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=26ef43017a241c551c893b3d0da3282c68b989fe", "patch": "@@ -1191,17 +1191,39 @@ vrp_int_const_binop (enum tree_code code, tree val1, tree val2)\n   if (TYPE_UNSIGNED (TREE_TYPE (val1)))\n     {\n       int checkz = compare_values (res, val1);\n+      bool overflow = false;\n \n       /* Ensure that res = val1 [+*] val2 >= val1\n          or that res = val1 - val2 <= val1.  */\n-      if (((code == PLUS_EXPR || code == MULT_EXPR)\n+      if ((code == PLUS_EXPR\n \t   && !(checkz == 1 || checkz == 0))\n           || (code == MINUS_EXPR\n \t      && !(checkz == 0 || checkz == -1)))\n+\t{\n+\t  overflow = true;\n+\t}\n+      /* Checking for multiplication overflow is done by dividing the\n+\t output of the multiplication by the first input of the\n+\t multiplication.  If the result of that division operation is\n+\t not equal to the second input of the multiplication, then the\n+\t multiplication overflowed.  */\n+      else if (code == MULT_EXPR && !integer_zerop (val1))\n+\t{\n+\t  tree tmp = int_const_binop (TRUNC_DIV_EXPR,\n+\t\t\t\t      TYPE_MAX_VALUE (TREE_TYPE (val1)),\n+\t\t\t\t      val1, 0);\n+\t  int check = compare_values (tmp, val2);\n+\n+\t  if (check != 0)\n+\t    overflow = true;\n+\t}\n+\n+      if (overflow)\n \t{\n \t  res = copy_node (res);\n \t  TREE_OVERFLOW (res) = 1;\n \t}\n+\n     }\n   else if (TREE_OVERFLOW (res)\n \t   && !TREE_OVERFLOW (val1)"}]}