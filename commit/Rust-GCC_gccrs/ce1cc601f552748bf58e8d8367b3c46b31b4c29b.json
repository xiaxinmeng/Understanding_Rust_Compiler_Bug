{"sha": "ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UxY2M2MDFmNTUyNzQ4YmY1OGU4ZDgzNjdiM2M0NmIzMWI0YzI5Yg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-11-19T13:15:51Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-11-19T13:15:51Z"}, "message": "Warning fixes:\n\n\t* builtins.c (c_getstr): Constify variable.\n\t* gmon-sol2.c (_mcleanup): Comment out #endif labels.\n\t* conflict.c (const_conflict_graph_arc): New typedef.\n\t(arc_hash, arc_eq): Avoid needlessly casting away const-ness.\n\t* cppmacro.c (builtin_macro): Likewise.\n\t* dwarf2out.c (output_comp_unit): Constify variable.\n\t* fix-header.c (v_fatal): Add ATTRIBUTE_PRINTF.\n\t* protoize.c (IS_SAME_PATH_CHAR): Use TOUPPER, not toupper.\n\t* ssa.c (ssa_rename_from_hash_function): Avoid needlessly casting\n\taway const-ness.\n\t* tradcpp.c (rescan, do_line, macroexpand, macarg): Use\n\tISALNUM/ISDIGIT/ISPRINT, not isalnum/isdigit/isprint.\n\t* varasm.c (const_str_htab_hash, const_str_htab_eq,\n\tcompare_constant_1, record_constant_1): Constify.\n\nFrom-SVN: r37565", "tree": {"sha": "eaf63c52b5062fa22f55d651138eb5cd20b0a102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaf63c52b5062fa22f55d651138eb5cd20b0a102"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/comments", "author": null, "committer": null, "parents": [{"sha": "7e9355c669fa0c9e362b40b60cb3268605e2f12e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9355c669fa0c9e362b40b60cb3268605e2f12e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e9355c669fa0c9e362b40b60cb3268605e2f12e"}], "stats": {"total": 73, "additions": 46, "deletions": 27}, "files": [{"sha": "7788cd03504cdd5e9c40495ef6a5d21402d32270", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "patch": "@@ -1,3 +1,20 @@\n+2000-11-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (c_getstr): Constify variable.\n+\t* gmon-sol2.c (_mcleanup): Comment out #endif labels.\n+\t* conflict.c (const_conflict_graph_arc): New typedef.\n+\t(arc_hash, arc_eq): Avoid needlessly casting away const-ness.\n+\t* cppmacro.c (builtin_macro): Likewise.\n+\t* dwarf2out.c (output_comp_unit): Constify variable.\n+\t* fix-header.c (v_fatal): Add ATTRIBUTE_PRINTF.\n+\t* protoize.c (IS_SAME_PATH_CHAR): Use TOUPPER, not toupper.\n+\t* ssa.c (ssa_rename_from_hash_function): Avoid needlessly casting\n+\taway const-ness.\n+\t* tradcpp.c (rescan, do_line, macroexpand, macarg): Use\n+\tISALNUM/ISDIGIT/ISPRINT, not isalnum/isdigit/isprint. \n+\t* varasm.c (const_str_htab_hash, const_str_htab_eq,\n+\tcompare_constant_1, record_constant_1): Constify.\n+\n 2000-11-18  Richard Henderson  <rth@redhat.com>\n \n \t* c-decl.c (grokdeclarator): Special case the creation of an"}, {"sha": "221cba6f34b0c16161ae9978da5b3550e32cd29c", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "patch": "@@ -278,7 +278,7 @@ c_getstr (src)\n {\n   tree offset_node;\n   int offset, max;\n-  char *ptr;\n+  const char *ptr;\n \n   src = string_constant (src, &offset_node);\n   if (src == 0)\n@@ -301,7 +301,7 @@ c_getstr (src)\n \treturn 0;\n     }\n \n-  return (const char *) ptr + offset;\n+  return ptr + offset;\n }\n \n /* Given TEM, a pointer to a stack frame, follow the dynamic chain COUNT"}, {"sha": "6d6696644d9108d90357d1eb0f4340533c5e52e0", "filename": "gcc/config/sparc/gmon-sol2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c?ref=ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "patch": "@@ -208,7 +208,7 @@ _mcleanup()\n     }\n #   ifdef DEBUG\n \tfprintf( stderr , \"[mcleanup] sbuf 0x%x ssiz %d\\n\" , sbuf , ssiz );\n-#   endif DEBUG\n+#   endif /* DEBUG */\n     write( fd , sbuf , ssiz );\n     endfrom = s_textsize / (HASHFRACTION * sizeof(*froms));\n     for ( fromindex = 0 ; fromindex < endfrom ; fromindex++ ) {\n@@ -221,7 +221,7 @@ _mcleanup()\n \t\tfprintf( stderr ,\n \t\t\t\"[mcleanup] frompc 0x%x selfpc 0x%x count %d\\n\" ,\n \t\t\tfrompc , tos[toindex].selfpc , tos[toindex].count );\n-#\t    endif DEBUG\n+#\t    endif /* DEBUG */\n \t    rawarc.raw_frompc = (unsigned long) frompc;\n \t    rawarc.raw_selfpc = (unsigned long) tos[toindex].selfpc;\n \t    rawarc.raw_count = tos[toindex].count;"}, {"sha": "c233d234bb8df57a4bb57af1726e058828071833", "filename": "gcc/conflict.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fconflict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fconflict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconflict.c?ref=ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "patch": "@@ -85,6 +85,7 @@ struct conflict_graph_arc_def\n };\n \n typedef struct conflict_graph_arc_def *conflict_graph_arc;\n+typedef const struct conflict_graph_arc_def *const_conflict_graph_arc;\n \n \n /* A conflict graph.  */\n@@ -127,7 +128,7 @@ static unsigned\n arc_hash (arcp)\n      const void *arcp;\n {\n-  conflict_graph_arc arc = (conflict_graph_arc) arcp;\n+  const_conflict_graph_arc arc = (const_conflict_graph_arc) arcp;\n \n   return CONFLICT_HASH_FN (arc->smaller, arc->larger);\n }\n@@ -140,8 +141,8 @@ arc_eq (arcp1, arcp2)\n      const void *arcp1;\n      const void *arcp2;\n {\n-  conflict_graph_arc arc1 = (conflict_graph_arc) arcp1;\n-  conflict_graph_arc arc2 = (conflict_graph_arc) arcp2;\n+  const_conflict_graph_arc arc1 = (const_conflict_graph_arc) arcp1;\n+  const_conflict_graph_arc arc2 = (const_conflict_graph_arc) arcp2;\n \n   return arc1->smaller == arc2->smaller && arc1->larger == arc2->larger;\n }"}, {"sha": "978f4cbd804aa96a82aac395f35db1806a06da72", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "patch": "@@ -170,7 +170,7 @@ builtin_macro (pfile, token)\n \t    file = ip->nominal_fname;\n \t  }\n \tmake_string_token (pfile->string_pool, token,\n-\t\t\t   (U_CHAR *) file, strlen (file));\n+\t\t\t   (const U_CHAR *) file, strlen (file));\n       }\n       break;\n \t"}, {"sha": "6ddd9824d16f5243b3b6726b781ddf7348589a8c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "patch": "@@ -6110,7 +6110,7 @@ static void\n output_comp_unit (die)\n      dw_die_ref die;\n {\n-  char *secname;\n+  const char *secname;\n \n   if (die->die_child == 0)\n     return;\n@@ -6126,12 +6126,13 @@ output_comp_unit (die)\n \n   if (die->die_symbol)\n     {\n-      secname = (char *) alloca (strlen (die->die_symbol) + 24);\n-      sprintf (secname, \".gnu.linkonce.wi.%s\", die->die_symbol);\n+      char *tmp = (char *) alloca (strlen (die->die_symbol) + 24);\n+      sprintf (tmp, \".gnu.linkonce.wi.%s\", die->die_symbol);\n+      secname = tmp;\n       die->die_symbol = NULL;\n     }\n   else\n-    secname = (char *) DEBUG_INFO_SECTION;\n+    secname = (const char *) DEBUG_INFO_SECTION;\n \n   /* Output debugging information.  */\n   fputc ('\\n', asm_out_file);"}, {"sha": "be377de6b7acdaacbdf7d360aa51984a8dce80fa", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "patch": "@@ -77,7 +77,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"scan.h\"\n #include \"cpplib.h\"\n \n-static void v_fatal PARAMS ((const char *, va_list)) ATTRIBUTE_NORETURN;\n+static void v_fatal PARAMS ((const char *, va_list)) ATTRIBUTE_PRINTF (1,0) ATTRIBUTE_NORETURN;\n static void fatal PARAMS ((const char *, ...)) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n \n sstring buf;"}, {"sha": "6816952ef09ed30835a66a1be644806252238a3b", "filename": "gcc/protoize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "patch": "@@ -36,7 +36,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Macro to see if the path elements match.  */\n #ifdef HAVE_DOS_BASED_FILE_SYSTEM\n-#define IS_SAME_PATH_CHAR(a,b) (toupper (a) == toupper (b))\n+#define IS_SAME_PATH_CHAR(a,b) (TOUPPER (a) == TOUPPER (b))\n #else\n #define IS_SAME_PATH_CHAR(a,b) ((a) == (b))\n #endif"}, {"sha": "d57720e032f9f76a47d09591045457d1b3ad3f0b", "filename": "gcc/ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "patch": "@@ -384,7 +384,7 @@ static hashval_t\n ssa_rename_from_hash_function (srfp)\n      const void *srfp;\n {\n-  return ((ssa_rename_from_pair *) srfp)->reg;\n+  return ((const ssa_rename_from_pair *) srfp)->reg;\n }\n \n /* Test whether two hash table entries SRFP1 and SRFP2 are equal.  */"}, {"sha": "1117748fb1abff2b7f2262b05ffb5eeadbcec264", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "patch": "@@ -1359,7 +1359,7 @@ do { ip = &instack[indepth];\t\t\\\n \t    ibp += 2;\n \t  }\n \t  c = *ibp++;\n-\t  if (!isalnum (c) && c != '.' && c != '_') {\n+\t  if (!ISALNUM (c) && c != '.' && c != '_') {\n \t    --ibp;\n \t    break;\n \t  }\n@@ -2888,7 +2888,7 @@ do_line (buf, limit, op, keyword)\n   bp = tem.buf;\n   SKIP_WHITE_SPACE (bp);\n \n-  if (!isdigit (*bp)) {\n+  if (!ISDIGIT (*bp)) {\n     error (\"invalid format #line command\");\n     return;\n   }\n@@ -2899,7 +2899,7 @@ do_line (buf, limit, op, keyword)\n   new_lineno = atoi ((const char *)bp) - 1;\n \n   /* skip over the line number.  */\n-  while (isdigit (*bp))\n+  while (ISDIGIT (*bp))\n     bp++;\n \n #if 0 /* #line 10\"foo.c\" is supposed to be allowed.  */\n@@ -3726,7 +3726,7 @@ macroexpand (hp, op)\n \t    /* Escape these chars */\n \t    if (c == '\\\"' || (in_string && c == '\\\\'))\n \t      xbuf[totlen++] = '\\\\';\n-\t    if (isprint (c))\n+\t    if (ISPRINT (c))\n \t      xbuf[totlen++] = c;\n \t    else {\n \t      sprintf ((char *) &xbuf[totlen], \"\\\\%03o\", (unsigned int) c);\n@@ -3928,7 +3928,7 @@ macarg (argptr)\n \t in case we need to keep it all.  */\n       if (c == '\\\"' || c == '\\\\') /* escape these chars */\n \ttotlen++;\n-      else if (!isprint (c))\n+      else if (!ISPRINT (c))\n \ttotlen += 3;\n     }\n     argptr->stringified_length = totlen;"}, {"sha": "170cf09ab1ccd9b979f5271d275152f4bd702bda", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1cc601f552748bf58e8d8367b3c46b31b4c29b/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=ce1cc601f552748bf58e8d8367b3c46b31b4c29b", "patch": "@@ -2402,7 +2402,7 @@ static hashval_t\n const_str_htab_hash (x)\n      const void *x;\n {\n-  return STRHASH (((struct deferred_string *) x)->label);\n+  return STRHASH (((const struct deferred_string *) x)->label);\n }\n \n /* Returns non-zero if the value represented by X (which is really a\n@@ -2414,7 +2414,7 @@ const_str_htab_eq (x, y)\n      const void *x;\n      const void *y;\n {\n-  return (((struct deferred_string *) x)->label == (char *) y);\n+  return (((const struct deferred_string *) x)->label == (const char *) y);\n }\n \n /* Delete the hash table entry dfsp.  */\n@@ -2607,7 +2607,7 @@ compare_constant_1 (exp, p)\n       if ((enum machine_mode) *p++ != TYPE_MODE (TREE_TYPE (exp)))\n \treturn 0;\n \n-      strp = (unsigned char *)TREE_STRING_POINTER (exp);\n+      strp = (const unsigned char *)TREE_STRING_POINTER (exp);\n       len = TREE_STRING_LENGTH (exp);\n       if (memcmp ((char *) &TREE_STRING_LENGTH (exp), p,\n \t\tsizeof TREE_STRING_LENGTH (exp)))\n@@ -2750,8 +2750,8 @@ compare_constant_1 (exp, p)\n \t    return 0;\n \n \t/* Compare symbol name.  */\n-\tstrp = (unsigned char *) XSTR (value.base, 0);\n-\tlen = strlen ((char *) strp) + 1;\n+\tstrp = (const unsigned char *) XSTR (value.base, 0);\n+\tlen = strlen ((const char *) strp) + 1;\n       }\n       break;\n \n@@ -2816,7 +2816,7 @@ static void\n record_constant_1 (exp)\n      tree exp;\n {\n-  register unsigned char *strp;\n+  register const unsigned char *strp;\n   register int len;\n   register enum tree_code code = TREE_CODE (exp);\n \n@@ -2841,7 +2841,7 @@ record_constant_1 (exp)\n \treturn;\n \n       obstack_1grow (&permanent_obstack, TYPE_MODE (TREE_TYPE (exp)));\n-      strp = (unsigned char *) TREE_STRING_POINTER (exp);\n+      strp = (const unsigned char *) TREE_STRING_POINTER (exp);\n       len = TREE_STRING_LENGTH (exp);\n       obstack_grow (&permanent_obstack, (char *) &TREE_STRING_LENGTH (exp),\n \t\t    sizeof TREE_STRING_LENGTH (exp));"}]}