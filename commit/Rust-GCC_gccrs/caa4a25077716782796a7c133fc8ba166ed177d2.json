{"sha": "caa4a25077716782796a7c133fc8ba166ed177d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FhNGEyNTA3NzcxNjc4Mjc5NmE3YzEzM2ZjOGJhMTY2ZWQxNzdkMg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-07-20T15:33:35Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-07-20T15:33:35Z"}, "message": "postreload.c (fixup_debug_insns): Remove arg REGNO.\n\n\t* postreload.c (fixup_debug_insns): Remove arg REGNO.  New args\n\tFROM and TO.  All callers changed.  Don't look for tracked uses,\n\tjust scan the RTL for DEBUG_INSNs and substitute.\n\t(reload_combine_recognize_pattern): Call fixup_debug_insns.\n\t(reload_combine): Ignore DEBUG_INSNs.\n\nFrom-SVN: r162342", "tree": {"sha": "5d9b414b7d62089c738caec405c2421c1b43b238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d9b414b7d62089c738caec405c2421c1b43b238"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caa4a25077716782796a7c133fc8ba166ed177d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa4a25077716782796a7c133fc8ba166ed177d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa4a25077716782796a7c133fc8ba166ed177d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa4a25077716782796a7c133fc8ba166ed177d2/comments", "author": null, "committer": null, "parents": [{"sha": "be5fda91fbeaf7447f651c3516de040b4a51b35b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5fda91fbeaf7447f651c3516de040b4a51b35b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be5fda91fbeaf7447f651c3516de040b4a51b35b"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "1ef6d9363750b5f6bf5d389d003bfd4ff99c3308", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa4a25077716782796a7c133fc8ba166ed177d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa4a25077716782796a7c133fc8ba166ed177d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=caa4a25077716782796a7c133fc8ba166ed177d2", "patch": "@@ -1,3 +1,11 @@\n+2010-07-20  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* postreload.c (fixup_debug_insns): Remove arg REGNO.  New args\n+\tFROM and TO.  All callers changed.  Don't look for tracked uses,\n+\tjust scan the RTL for DEBUG_INSNs and substitute.\n+\t(reload_combine_recognize_pattern): Call fixup_debug_insns.\n+\t(reload_combine): Ignore DEBUG_INSNs.\n+\n 2010-07-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* var-tracking.c (vt_expand_loc, vt_expand_loc_dummy): Bump maximum"}, {"sha": "4ac21374d0048da6c1c1ea456634c4d15f436d72", "filename": "gcc/postreload.c", "status": "modified", "additions": 27, "deletions": 36, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa4a25077716782796a7c133fc8ba166ed177d2/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa4a25077716782796a7c133fc8ba166ed177d2/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=caa4a25077716782796a7c133fc8ba166ed177d2", "patch": "@@ -848,41 +848,26 @@ reload_combine_closest_single_use (unsigned regno, int ruid_limit)\n   return retval;\n }\n \n-/* After we've moved an add insn, fix up any debug insns that occur between\n-   the old location of the add and the new location.  REGNO is the destination\n-   register of the add insn; REG is the corresponding RTX.  REPLACEMENT is\n-   the SET_SRC of the add.  MIN_RUID specifies the ruid of the insn after\n-   which we've placed the add, we ignore any debug insns after it.  */\n+/* After we've moved an add insn, fix up any debug insns that occur\n+   between the old location of the add and the new location.  REG is\n+   the destination register of the add insn; REPLACEMENT is the\n+   SET_SRC of the add.  FROM and TO specify the range in which we\n+   should make this change on debug insns.  */\n \n static void\n-fixup_debug_insns (unsigned regno, rtx reg, rtx replacement, int min_ruid)\n+fixup_debug_insns (rtx reg, rtx replacement, rtx from, rtx to)\n {\n-  struct reg_use *use;\n-  int from = reload_combine_ruid;\n-  for (;;)\n+  rtx insn;\n+  for (insn = from; insn != to; insn = NEXT_INSN (insn))\n     {\n       rtx t;\n-      rtx use_insn = NULL_RTX;\n-      if (from < min_ruid)\n-\tbreak;\n-      use = reload_combine_closest_single_use (regno, from);\n-      if (use)\n-\t{\n-\t  from = use->ruid;\n-\t  use_insn = use->insn;\n-\t}\n-      else\n-\tbreak;\n-      \n-      if (NONDEBUG_INSN_P (use->insn))\n+\n+      if (!DEBUG_INSN_P (insn))\n \tcontinue;\n-      t = INSN_VAR_LOCATION_LOC (use_insn);\n+      \n+      t = INSN_VAR_LOCATION_LOC (insn);\n       t = simplify_replace_rtx (t, reg, copy_rtx (replacement));\n-      validate_change (use->insn,\n-\t\t       &INSN_VAR_LOCATION_LOC (use->insn), t, 0);\n-      reload_combine_purge_insn_uses (use_insn);\n-      reload_combine_note_use (&PATTERN (use_insn), use_insn,\n-\t\t\t       use->ruid, NULL_RTX);\n+      validate_change (insn, &INSN_VAR_LOCATION_LOC (insn), t, 0);\n     }\n }\n \n@@ -1063,8 +1048,8 @@ reload_combine_recognize_const_pattern (rtx insn)\n     /* Process the add normally.  */\n     return false;\n \n-  fixup_debug_insns (regno, reg, src, add_moved_after_ruid);\n-  \n+  fixup_debug_insns (reg, src, insn, add_moved_after_insn);\n+\n   reorder_insns (insn, insn, add_moved_after_insn);\n   reload_combine_purge_reg_uses_after_ruid (regno, add_moved_after_ruid);\n   reload_combine_split_ruids (add_moved_after_ruid - 1);\n@@ -1191,15 +1176,21 @@ reload_combine_recognize_pattern (rtx insn)\n \n \t  if (apply_change_group ())\n \t    {\n+\t      struct reg_use *lowest_ruid = NULL;\n+\n \t      /* For every new use of REG_SUM, we have to record the use\n \t\t of BASE therein, i.e. operand 1.  */\n \t      for (i = reg_state[regno].use_index;\n \t\t   i < RELOAD_COMBINE_MAX_USES; i++)\n-\t\treload_combine_note_use\n-\t\t  (&XEXP (*reg_state[regno].reg_use[i].usep, 1),\n-\t\t   reg_state[regno].reg_use[i].insn,\n-\t\t   reg_state[regno].reg_use[i].ruid,\n-\t\t   reg_state[regno].reg_use[i].containing_mem);\n+\t\t{\n+\t\t  struct reg_use *use = reg_state[regno].reg_use + i;\n+\t\t  reload_combine_note_use (&XEXP (*use->usep, 1), use->insn,\n+\t\t\t\t\t   use->ruid, use->containing_mem);\n+\t\t  if (lowest_ruid == NULL || use->ruid < lowest_ruid->ruid)\n+\t\t    lowest_ruid = use;\n+\t\t}\n+\n+\t      fixup_debug_insns (reg, reg_sum, insn, lowest_ruid->insn);\n \n \t      /* Delete the reg-reg addition.  */\n \t      delete_insn (insn);\n@@ -1313,7 +1304,7 @@ reload_combine (void)\n \t  if (! fixed_regs[r])\n \t      reg_state[r].use_index = RELOAD_COMBINE_MAX_USES;\n \n-      if (! INSN_P (insn))\n+      if (! NONDEBUG_INSN_P (insn))\n \tcontinue;\n \n       reload_combine_ruid++;"}]}