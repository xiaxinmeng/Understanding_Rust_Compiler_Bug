{"sha": "45b48129d5e03ba60d434986f480a46ab119ddb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDViNDgxMjlkNWUwM2JhNjBkNDM0OTg2ZjQ4MGE0NmFiMTE5ZGRiNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-19T18:26:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-19T18:26:41Z"}, "message": "PR67085 move comparison functions in heap operations\n\n\tPR libstdc++/67085\n\t* include/bits/stl_heap.h (push_heap, __adjust_heap, __pop_heap)\n\t(pop_heap, __make_heap, make_heap, __sort_heap, sort_heap): Use\n\t_GLIBCXX_MOVE when passing comparison function to other functions.\n\t(is_heap_until, is_heap): Use std::move when passing comparison\n\tfunction.\n\t* testsuite/23_containers/priority_queue/67085.cc: New test.\n\nFrom-SVN: r244648", "tree": {"sha": "8aab2cd8aea06cb33329d28f3824493f7d7d3c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aab2cd8aea06cb33329d28f3824493f7d7d3c92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45b48129d5e03ba60d434986f480a46ab119ddb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b48129d5e03ba60d434986f480a46ab119ddb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45b48129d5e03ba60d434986f480a46ab119ddb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b48129d5e03ba60d434986f480a46ab119ddb7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c048038f8d50d5f3c657451b216f6ef751887bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c048038f8d50d5f3c657451b216f6ef751887bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c048038f8d50d5f3c657451b216f6ef751887bd8"}], "stats": {"total": 83, "additions": 73, "deletions": 10}, "files": [{"sha": "7fd289dfd08452aaa75fb9a978491bdee1a615e3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b48129d5e03ba60d434986f480a46ab119ddb7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b48129d5e03ba60d434986f480a46ab119ddb7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=45b48129d5e03ba60d434986f480a46ab119ddb7", "patch": "@@ -1,5 +1,13 @@\n 2017-01-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/67085\n+\t* include/bits/stl_heap.h (push_heap, __adjust_heap, __pop_heap)\n+\t(pop_heap, __make_heap, make_heap, __sort_heap, sort_heap): Use\n+\t_GLIBCXX_MOVE when passing comparison function to other functions.\n+\t(is_heap_until, is_heap): Use std::move when passing comparison\n+\tfunction.\n+\t* testsuite/23_containers/priority_queue/67085.cc: New test.\n+\n \tPR libstdc++/78905\n \t* doc/xml/manual/abi.xml (abi.versioning.history): Add markup to\n \tmacro names, filenames, and literal values. Document _GLIBCXX_RELEASE."}, {"sha": "c82ce7753ed7cddc57b7a32d25e5f7df7ccfd637", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b48129d5e03ba60d434986f480a46ab119ddb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b48129d5e03ba60d434986f480a46ab119ddb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=45b48129d5e03ba60d434986f480a46ab119ddb7", "patch": "@@ -200,7 +200,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));\n       std::__push_heap(__first, _DistanceType((__last - __first) - 1),\n \t\t       _DistanceType(0), _GLIBCXX_MOVE(__value),\n-\t\t       __gnu_cxx::__ops::__iter_comp_val(__comp));\n+\t\t       __gnu_cxx::__ops::\n+\t\t       __iter_comp_val(_GLIBCXX_MOVE(__comp)));\n     }\n \n   template<typename _RandomAccessIterator, typename _Distance,\n@@ -229,7 +230,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       std::__push_heap(__first, __holeIndex, __topIndex, \n \t\t       _GLIBCXX_MOVE(__value),\n-\t\t       __gnu_cxx::__ops::__iter_comp_val(__comp));\n+\t\t       __gnu_cxx::__ops::\n+\t\t       __iter_comp_val(_GLIBCXX_MOVE(__comp)));\n     }\n \n   template<typename _RandomAccessIterator, typename _Compare>\n@@ -246,7 +248,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       *__result = _GLIBCXX_MOVE(*__first);\n       std::__adjust_heap(__first, _DistanceType(0),\n \t\t\t _DistanceType(__last - __first),\n-\t\t\t _GLIBCXX_MOVE(__value), __comp);\n+\t\t\t _GLIBCXX_MOVE(__value), _GLIBCXX_MOVE(__comp));\n     }\n \n   /**\n@@ -310,7 +312,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  --__last;\n \t  std::__pop_heap(__first, __last, __last,\n-\t\t\t  __gnu_cxx::__ops::__iter_comp_iter(__comp));\n+\t\t\t  __gnu_cxx::__ops::\n+\t\t\t  __iter_comp_iter(_GLIBCXX_MOVE(__comp)));\n \t}\n     }\n \n@@ -333,7 +336,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));\n \t  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),\n-\t\t\t     __comp);\n+\t\t\t     _GLIBCXX_MOVE(__comp));\n \t  if (__parent == 0)\n \t    return;\n \t  __parent--;\n@@ -386,7 +389,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       std::__make_heap(__first, __last,\n-\t\t       __gnu_cxx::__ops::__iter_comp_iter(__comp));\n+\t\t       __gnu_cxx::__ops::\n+\t\t       __iter_comp_iter(_GLIBCXX_MOVE(__comp)));\n     }\n \n   template<typename _RandomAccessIterator, typename _Compare>\n@@ -397,7 +401,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       while (__last - __first > 1)\n \t{\n \t  --__last;\n-\t  std::__pop_heap(__first, __last, __last, __comp);\n+\t  std::__pop_heap(__first, __last, __last, _GLIBCXX_MOVE(__comp));\n \t}\n     }\n \n@@ -449,7 +453,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_heap_pred(__first, __last, __comp);\n \n       std::__sort_heap(__first, __last,\n-\t\t       __gnu_cxx::__ops::__iter_comp_iter(__comp));\n+\t\t       __gnu_cxx::__ops::\n+\t\t       __iter_comp_iter(_GLIBCXX_MOVE(__comp)));\n     }\n \n #if __cplusplus >= 201103L\n@@ -504,7 +509,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       return __first\n \t+ std::__is_heap_until(__first, std::distance(__first, __last),\n-\t\t\t       __gnu_cxx::__ops::__iter_comp_iter(__comp));\n+\t\t\t       __gnu_cxx::__ops::\n+\t\t\t       __iter_comp_iter(std::move(__comp)));\n     }\n \n   /**\n@@ -531,7 +537,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t    _Compare __comp)\n-    { return std::is_heap_until(__first, __last, __comp) == __last; }\n+    {\n+      return std::is_heap_until(__first, __last, std::move(__comp))\n+\t== __last;\n+    }\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "5a3ca32c3a812ab8f4415457855c836573cd36fb", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/67085.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b48129d5e03ba60d434986f480a46ab119ddb7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2F67085.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b48129d5e03ba60d434986f480a46ab119ddb7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2F67085.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2F67085.cc?ref=45b48129d5e03ba60d434986f480a46ab119ddb7", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <queue>\n+#include <testsuite_hooks.h>\n+\n+unsigned count;\n+\n+struct CopyCounter : std::less<int>\n+{\n+  CopyCounter() = default;\n+  CopyCounter(const CopyCounter&) { ++count; }\n+  CopyCounter(CopyCounter&&) = default;\n+};\n+\n+void\n+test01()\n+{\n+  int v[] = {1, 2, 3, 4};\n+  std::priority_queue<int, std::vector<int>, CopyCounter> q{v, v+4};\n+  VERIFY(count == 2);\n+  q.push(1);\n+  VERIFY(count == 3);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}