{"sha": "1ebadc609b97abf76eddff241200b4dcf8b10eb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWViYWRjNjA5Yjk3YWJmNzZlZGRmZjI0MTIwMGI0ZGNmOGIxMGViOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-10-14T17:13:57Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-10-14T17:13:57Z"}, "message": "jcf-dump.c (print_constant, [...]): Don't call a variadic function with a non-literal format string.\n\n\t* jcf-dump.c (print_constant, disassemble_method): Don't call a\n\tvariadic function with a non-literal format string.\n\n\t* parse-scan.y (report_main_declaration): Likewise.\n\n\t* parse.h (ERROR_CAST_NEEDED_TO_INTEGRAL): Likewise.\n\n\t* parse.y (read_import_dir, patch_assignment, patch_binop,\n\tpatch_array_ref): Likewise.\n\n\t* typeck.c (build_java_array_type): Likewise.\n\n\t* verify.c (verify_jvm_instructions): Likewise.\n\nFrom-SVN: r29981", "tree": {"sha": "ec9cc3db1f41e003ff786220d74ae92ec3483df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec9cc3db1f41e003ff786220d74ae92ec3483df3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ebadc609b97abf76eddff241200b4dcf8b10eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebadc609b97abf76eddff241200b4dcf8b10eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ebadc609b97abf76eddff241200b4dcf8b10eb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebadc609b97abf76eddff241200b4dcf8b10eb9/comments", "author": null, "committer": null, "parents": [{"sha": "fe50c0eb3bcd01019e3b8e610b3906510a5d4b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe50c0eb3bcd01019e3b8e610b3906510a5d4b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe50c0eb3bcd01019e3b8e610b3906510a5d4b8e"}], "stats": {"total": 217, "additions": 138, "deletions": 79}, "files": [{"sha": "81b883469a6f72f1d1231567c148c6a693d20dbb", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=1ebadc609b97abf76eddff241200b4dcf8b10eb9", "patch": "@@ -1,3 +1,19 @@\n+1999-10-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* jcf-dump.c (print_constant, disassemble_method): Don't call a\n+\tvariadic function with a non-literal format string.\n+\n+\t* parse-scan.y (report_main_declaration): Likewise.\n+\n+\t* parse.h (ERROR_CAST_NEEDED_TO_INTEGRAL): Likewise.\n+\n+\t* parse.y (read_import_dir, patch_assignment, patch_binop,\n+\tpatch_array_ref): Likewise.\n+\n+\t* typeck.c (build_java_array_type): Likewise.\n+\n+\t* verify.c (verify_jvm_instructions): Likewise.\n+\n Tue Oct 12 22:28:10 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* jcf-write.c (RELOCATION_VALUE_1): Fixed integer value from 0 to 1."}, {"sha": "becf7471c1f0b18baed2c90cde29571f42654085", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=1ebadc609b97abf76eddff241200b4dcf8b10eb9", "patch": "@@ -386,7 +386,12 @@ DEFUN(print_constant, (out, jcf, index, verbosity),\n     case CONSTANT_Class:\n       n = JPOOL_USHORT1 (jcf, index);\n       if (verbosity > 0)\n-\tfprintf (out, verbosity > 1 ? \"Class name: %d=\" : \"Class \", n);\n+\t{\n+\t  if (verbosity > 1)\n+\t    fprintf (out, \"Class name: %d=\", n);\n+\t  else\n+\t    fprintf (out, \"Class \");\n+\t}\n       if (! CPOOL_INDEX_IN_RANGE (&jcf->cpool, n))\n \tfprintf (out, \"<out of range>\");\n       else if (verbosity < 2 && JPOOL_TAG (jcf, n) == CONSTANT_Utf8)\n@@ -412,8 +417,10 @@ DEFUN(print_constant, (out, jcf, index, verbosity),\n \telse if (verbosity > 0)\n \t    fprintf (out, \"%s \", str);\n \tprint_constant_terse (out, jcf, tclass, CONSTANT_Class);\n-\tfprintf (out, verbosity < 2 ? \".\" : \" name_and_type: %d=<\",\n-\t\t name_and_type);\n+\tif (verbosity < 2)\n+\t  fprintf (out, \".\");\n+\telse\n+\t  fprintf (out, \" name_and_type: %d=<\", name_and_type);\n \tprint_constant_terse (out, jcf, name_and_type, CONSTANT_NameAndType);\n \tif (verbosity == 2)\n \t  fputc ('>', out);\n@@ -422,7 +429,12 @@ DEFUN(print_constant, (out, jcf, index, verbosity),\n     case CONSTANT_String:\n       j = JPOOL_USHORT1 (jcf, index);\n       if (verbosity > 0)\n-\tfprintf (out, verbosity > 1 ? \"String %d=\" : \"String \", j);\n+\t{\n+\t  if (verbosity > 1)\n+\t    fprintf (out, \"String %d=\", j);\n+\t  else\n+\t    fprintf (out, \"String \");\n+\t}\n       print_constant_terse (out, jcf, j, CONSTANT_Utf8);\n       break;\n     case CONSTANT_Integer:\n@@ -473,8 +485,12 @@ DEFUN(print_constant, (out, jcf, index, verbosity),\n \tuint16 name = JPOOL_USHORT1 (jcf, index);\n \tuint16 sig = JPOOL_USHORT2 (jcf, index);\n \tif (verbosity > 0)\n-\t  fprintf (out, verbosity > 1 ? \"%s name: %d=\" : \"%s \",\n-\t\t   \"NameAndType\", name);\n+\t  {\n+\t    if (verbosity > 1)\n+\t      fprintf (out, \"NameAndType name: %d=\", name);\n+\t    else\n+\t      fprintf (out, \"NameAndType \");\n+\t  }\n \tprint_name (out, jcf, name);\n \tif (verbosity <= 1)\n \t  fputc (' ', out);\n@@ -1002,19 +1018,17 @@ DEFUN(disassemble_method, (jcf, byte_ops, len),\n #define ARRAY_NEW(TYPE) ARRAY_NEW_##TYPE\n #define ARRAY_NEW_NUM \\\n  INT_temp = IMMEDIATE_u1; \\\n- { const char *str; \\\n-  switch (INT_temp) {  \\\n-    case  4: str = \"boolean\"; break; \\\n-    case  5: str = \"char\"; break; \\\n-    case  6: str = \"float\"; break; \\\n-    case  7: str = \"double\"; break; \\\n-    case  8: str = \"byte\"; break; \\\n-    case  9: str = \"short\"; break; \\\n-    case 10: str = \"int\"; break; \\\n-    case 11: str = \"long\"; break; \\\n-    default: str = \"<unknown type code %d>\"; break; \\\n-  } \\\n-  fputc (' ', out); fprintf (out, str, INT_temp); }\n+ { switch (INT_temp) {  \\\n+    case  4: fputs (\" boolean\", out); break; \\\n+    case  5: fputs (\" char\", out); break; \\\n+    case  6: fputs (\" float\", out); break; \\\n+    case  7: fputs (\" double\", out); break; \\\n+    case  8: fputs (\" byte\", out); break; \\\n+    case  9: fputs (\" short\", out); break; \\\n+    case 10: fputs (\" int\", out); break; \\\n+    case 11: fputs (\" long\", out); break; \\\n+    default: fprintf (out, \" <unknown type code %ld>\", (long)INT_temp); break;\\\n+  } }\n \n #define ARRAY_NEW_PTR  \\\n   fputc (' ', out); print_constant_ref (out, jcf, IMMEDIATE_u2);"}, {"sha": "e69996f6c6944383a5f6ebbc4c3118c47361ad16", "filename": "gcc/java/parse-scan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fparse-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fparse-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.c?ref=1ebadc609b97abf76eddff241200b4dcf8b10eb9", "patch": "@@ -2406,7 +2406,7 @@ report_main_declaration (declarator)\n \t  if (package_name)\n \t    fprintf (out, \"%s.%s \", package_name, current_class);\n \t  else\n-\t    fprintf (out, current_class);\n+\t    fprintf (out, \"%s\", current_class);\n \t  previous_output = 1;\n \t}\n     }"}, {"sha": "f5da6f993bfa8f5e542cd80250a4ae2d8caff2aa", "filename": "gcc/java/parse-scan.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fparse-scan.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fparse-scan.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.y?ref=1ebadc609b97abf76eddff241200b4dcf8b10eb9", "patch": "@@ -1156,7 +1156,7 @@ report_main_declaration (declarator)\n \t  if (package_name)\n \t    fprintf (out, \"%s.%s \", package_name, current_class);\n \t  else\n-\t    fprintf (out, current_class);\n+\t    fprintf (out, \"%s\", current_class);\n \t  previous_output = 1;\n \t}\n     }"}, {"sha": "9cc96f823308d453ba31c1e1bb15d0d2455a5dcf", "filename": "gcc/java/parse.c", "status": "modified", "additions": 34, "deletions": 26, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=1ebadc609b97abf76eddff241200b4dcf8b10eb9", "patch": "@@ -2388,10 +2388,8 @@ int yydebug;\t\t\t/*  nonzero means print parse trace\t*/\n \n /* Prevent warning if -Wstrict-prototypes.  */\n #ifdef __GNUC__\n-#ifndef YYPARSE_PARAM\n int yyparse (void);\n #endif\n-#endif\n \f\n #if __GNUC__ > 1\t\t/* GNU C and GNU C++ define this.  */\n #define __yy_memcpy(TO,FROM,COUNT)\t__builtin_memcpy(TO,FROM,COUNT)\n@@ -7911,11 +7909,9 @@ read_import_dir (wfl)\n       static int first = 1;\n       if (first)\n \t{\n-\t  char buffer [256];\n-\t  sprintf (buffer, \"Can't find default package `%s'. Check \"\n-\t\t   \"the CLASSPATH environment variable and the access to the \"\n-\t\t   \"archives.\", package_name);\n-\t  error (buffer);\n+\t  error (\"Can't find default package `%s'. Check \"\n+\t\t \"the CLASSPATH environment variable and the access to the \"\n+\t\t \"archives.\", package_name);\n \t  java_error_count++;\n \t  first = 0;\n \t}\n@@ -11717,11 +11713,14 @@ patch_assignment (node, wfl_op1, wfl_op2)\n \t    strcpy (operation, \"`='\");\n \t}\n \n-      parse_error_context \n-\t(wfl, (!valid_cast_to_p (rhs_type, lhs_type) ?\n-\t       \"Incompatible type for %s. Can't convert `%s' to `%s'\" :\n-\t       \"Incompatible type for %s. Explicit cast \"\n-\t       \"needed to convert `%s' to `%s'\"), operation, t1, t2);\n+      if (!valid_cast_to_p (rhs_type, lhs_type))\n+\tparse_error_context (wfl, \"Incompatible type for %s. \"\n+\t\t\t     \"Can't convert `%s' to `%s'\",\n+\t\t\t     operation, t1, t2);\n+      else\n+\tparse_error_context (wfl, \"Incompatible type for %s. \"\n+\t\t\t     \"Explicit cast needed to convert `%s' to `%s'\",\n+\t\t\t     operation, t1, t2);\n       free (t1); free (t2);\n       error_found = 1;\n     }\n@@ -12325,13 +12324,21 @@ patch_binop (node, wfl_op1, wfl_op2)\n \t  if (!JINTEGRAL_TYPE_P (op1_type))\n \t    ERROR_CAST_NEEDED_TO_INTEGRAL (wfl_operator, node, op1_type);\n \t  else\n-\t    parse_error_context \n-\t      (wfl_operator, (JPRIMITIVE_TYPE_P (op2_type) ? \n-\t       \"Incompatible type for `%s'. Explicit cast needed to convert \"\n-\t       \"shift distance from `%s' to integral\" : \n-\t       \"Incompatible type for `%s'. Can't convert shift distance from \"\n-\t       \"`%s' to integral\"), \n-\t       operator_string (node), lang_printable_name (op2_type, 0));\n+\t    {\n+\t      if (JPRIMITIVE_TYPE_P (op2_type))\n+\t\tparse_error_context (wfl_operator,\n+\t\t\t\t     \"Incompatible type for `%s'. \"\n+\t\t\t\t     \"Explicit cast needed to convert \"\n+\t\t\t\t     \"shift distance from `%s' to integral\",\n+\t\t\t\t     operator_string (node),\n+\t\t\t\t     lang_printable_name (op2_type, 0));\n+\t      else\n+\t\tparse_error_context (wfl_operator, \"Incompatible type for `%s'.\"\n+\t\t\t\t     \" Can't convert shift distance from \"\n+\t\t\t\t     \"`%s' to integral\", \n+\t\t\t\t     operator_string (node),\n+\t\t\t\t     lang_printable_name (op2_type, 0));\n+\t    }\n \t  TREE_TYPE (node) = error_mark_node;\n \t  error_found = 1;\n \t  break;\n@@ -13191,13 +13198,14 @@ patch_array_ref (node)\n   index = do_unary_numeric_promotion (index);\n   if (TREE_TYPE (index) != int_type_node)\n     {\n-      int could_cast = valid_cast_to_p (index_type, int_type_node);\n-      parse_error_context \n-\t(wfl_operator, \n-\t (could_cast ? \"Incompatible type for `[]'. Explicit cast needed to \"\n-\t  \"convert `%s' to `int'\" : \"Incompatible type for `[]'. \"\n-\t  \"Can't convert `%s' to `int'\"),\n-\t lang_printable_name (index_type, 0));\n+      if (valid_cast_to_p (index_type, int_type_node))\n+\tparse_error_context (wfl_operator, \"Incompatible type for `[]'. \"\n+\t\t\t     \"Explicit cast needed to convert `%s' to `int'\",\n+\t\t\t     lang_printable_name (index_type, 0));\n+      else\n+\tparse_error_context (wfl_operator, \"Incompatible type for `[]'. \"\n+\t\t\t     \"Can't convert `%s' to `int'\",\n+\t\t\t     lang_printable_name (index_type, 0));\n       TREE_TYPE (node) = error_mark_node;\n       error_found = 1;\n     }"}, {"sha": "f4c05e948b171435d9f2158c5b19ce691d3659bf", "filename": "gcc/java/parse.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=1ebadc609b97abf76eddff241200b4dcf8b10eb9", "patch": "@@ -222,12 +222,19 @@ extern tree stabilize_reference PROTO ((tree));\n      \"numeric type\", operator_string ((NODE)), lang_printable_name ((TYPE), 0))\n \n #define ERROR_CAST_NEEDED_TO_INTEGRAL(OPERATOR, NODE, TYPE)\t\t\\\n-  parse_error_context\t\t\t\t\t\t\t\\\n-    ((OPERATOR), (JPRIMITIVE_TYPE_P (TYPE) ?\t\t\t\t\\\n-     \"Incompatible type for `%s'. Explicit cast needed to convert \"\t\\\n-      \"`%s' to integral\" : \"Incompatible type for `%s'. Can't convert \"\t\\\n-      \"`%s' to integral\"), operator_string ((NODE)),\t\t\t\\\n-      lang_printable_name ((TYPE), 0))\n+do {\t\t\t\t\t\t\t\t\t\\\n+  tree _operator = (OPERATOR), _node = (NODE), _type = (TYPE);\t\t\\\n+  if (JPRIMITIVE_TYPE_P (_type))\t\t\t\t\t\\\n+    parse_error_context (_operator, \"Incompatible type for `%s'. Explicit\" \\\n+                         \" cast needed to convert `%s' to integral\",\t\\\n+\t\t\t operator_string(_node),\t\t\t\\\n+\t\t\t lang_printable_name (_type, 0));\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    parse_error_context (_operator, \"Incompatible type for `%s'. Can't\" \\\n+                         \" convert `%s' to integral\",\t\t\t\\\n+\t\t\t operator_string(_node),\t\t\t\\\n+\t\t\t lang_printable_name (_type, 0));\t\t\\\n+} while (0)\n \n #define ERROR_VARIABLE_NOT_INITIALIZED(WFL, V)\t\t\t\\\n   parse_error_context\t\t\t\t\t\t\\"}, {"sha": "0459ed36c1a85e26796c9ef5000aacaaa836aad7", "filename": "gcc/java/parse.y", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=1ebadc609b97abf76eddff241200b4dcf8b10eb9", "patch": "@@ -5324,11 +5324,9 @@ read_import_dir (wfl)\n       static int first = 1;\n       if (first)\n \t{\n-\t  char buffer [256];\n-\t  sprintf (buffer, \"Can't find default package `%s'. Check \"\n-\t\t   \"the CLASSPATH environment variable and the access to the \"\n-\t\t   \"archives.\", package_name);\n-\t  error (buffer);\n+\t  error (\"Can't find default package `%s'. Check \"\n+\t\t \"the CLASSPATH environment variable and the access to the \"\n+\t\t \"archives.\", package_name);\n \t  java_error_count++;\n \t  first = 0;\n \t}\n@@ -9130,11 +9128,14 @@ patch_assignment (node, wfl_op1, wfl_op2)\n \t    strcpy (operation, \"`='\");\n \t}\n \n-      parse_error_context \n-\t(wfl, (!valid_cast_to_p (rhs_type, lhs_type) ?\n-\t       \"Incompatible type for %s. Can't convert `%s' to `%s'\" :\n-\t       \"Incompatible type for %s. Explicit cast \"\n-\t       \"needed to convert `%s' to `%s'\"), operation, t1, t2);\n+      if (!valid_cast_to_p (rhs_type, lhs_type))\n+\tparse_error_context (wfl, \"Incompatible type for %s. \"\n+\t\t\t     \"Can't convert `%s' to `%s'\",\n+\t\t\t     operation, t1, t2);\n+      else\n+\tparse_error_context (wfl, \"Incompatible type for %s. \"\n+\t\t\t     \"Explicit cast needed to convert `%s' to `%s'\",\n+\t\t\t     operation, t1, t2);\n       free (t1); free (t2);\n       error_found = 1;\n     }\n@@ -9738,13 +9739,21 @@ patch_binop (node, wfl_op1, wfl_op2)\n \t  if (!JINTEGRAL_TYPE_P (op1_type))\n \t    ERROR_CAST_NEEDED_TO_INTEGRAL (wfl_operator, node, op1_type);\n \t  else\n-\t    parse_error_context \n-\t      (wfl_operator, (JPRIMITIVE_TYPE_P (op2_type) ? \n-\t       \"Incompatible type for `%s'. Explicit cast needed to convert \"\n-\t       \"shift distance from `%s' to integral\" : \n-\t       \"Incompatible type for `%s'. Can't convert shift distance from \"\n-\t       \"`%s' to integral\"), \n-\t       operator_string (node), lang_printable_name (op2_type, 0));\n+\t    {\n+\t      if (JPRIMITIVE_TYPE_P (op2_type))\n+\t\tparse_error_context (wfl_operator,\n+\t\t\t\t     \"Incompatible type for `%s'. \"\n+\t\t\t\t     \"Explicit cast needed to convert \"\n+\t\t\t\t     \"shift distance from `%s' to integral\",\n+\t\t\t\t     operator_string (node),\n+\t\t\t\t     lang_printable_name (op2_type, 0));\n+\t      else\n+\t\tparse_error_context (wfl_operator, \"Incompatible type for `%s'.\"\n+\t\t\t\t     \" Can't convert shift distance from \"\n+\t\t\t\t     \"`%s' to integral\", \n+\t\t\t\t     operator_string (node),\n+\t\t\t\t     lang_printable_name (op2_type, 0));\n+\t    }\n \t  TREE_TYPE (node) = error_mark_node;\n \t  error_found = 1;\n \t  break;\n@@ -10604,13 +10613,14 @@ patch_array_ref (node)\n   index = do_unary_numeric_promotion (index);\n   if (TREE_TYPE (index) != int_type_node)\n     {\n-      int could_cast = valid_cast_to_p (index_type, int_type_node);\n-      parse_error_context \n-\t(wfl_operator, \n-\t (could_cast ? \"Incompatible type for `[]'. Explicit cast needed to \"\n-\t  \"convert `%s' to `int'\" : \"Incompatible type for `[]'. \"\n-\t  \"Can't convert `%s' to `int'\"),\n-\t lang_printable_name (index_type, 0));\n+      if (valid_cast_to_p (index_type, int_type_node))\n+\tparse_error_context (wfl_operator, \"Incompatible type for `[]'. \"\n+\t\t\t     \"Explicit cast needed to convert `%s' to `int'\",\n+\t\t\t     lang_printable_name (index_type, 0));\n+      else\n+\tparse_error_context (wfl_operator, \"Incompatible type for `[]'. \"\n+\t\t\t     \"Can't convert `%s' to `int'\",\n+\t\t\t     lang_printable_name (index_type, 0));\n       TREE_TYPE (node) = error_mark_node;\n       error_found = 1;\n     }"}, {"sha": "924265fc3ff154be8b18771525806b9eea6265d4", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=1ebadc609b97abf76eddff241200b4dcf8b10eb9", "patch": "@@ -374,7 +374,11 @@ build_java_array_type (element_type, length)\n   char buf[12];\n   tree elsig = build_java_signature (element_type);\n   tree el_name = element_type;\n-  sprintf (buf, length >= 0 ? \"[%d\" : \"[\", length);\n+  buf[0] = '[';\n+  if (length >= 0)\n+    sprintf (buf+1, HOST_WIDE_INT_PRINT_DEC, length);\n+  else\n+    buf[1] = '\\0';\n   sig = ident_subst (IDENTIFIER_POINTER (elsig), IDENTIFIER_LENGTH (elsig),\n \t\t     buf, 0, 0, \"\");\n   t = IDENTIFIER_SIGNATURE_TYPE (sig);"}, {"sha": "41ad823cb462e95f4bab29a005da59056fe23f15", "filename": "gcc/java/verify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebadc609b97abf76eddff241200b4dcf8b10eb9/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=1ebadc609b97abf76eddff241200b4dcf8b10eb9", "patch": "@@ -1344,6 +1344,6 @@ verify_jvm_instructions (jcf, byte_ops, length)\n   goto verify_error;\n  verify_error:\n   error (\"verification error at PC=%d\", oldpc);\n-  error (message);\n+  error (\"%s\", message);\n   return 0;\n }"}]}