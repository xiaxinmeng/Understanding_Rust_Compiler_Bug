{"sha": "2d180af122bda9206c06441fee99f9adf873bdde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQxODBhZjEyMmJkYTkyMDZjMDY0NDFmZWU5OWY5YWRmODczYmRkZQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2014-07-29T14:55:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T14:55:24Z"}, "message": "2014-07-29  Yannick Moy  <moy@adacore.com>\n\n\t* debug.adb Enable GNATprove inlining under debug flag -gnatdQ for now.\n\t* inline.ads, inline.adb (Can_Be_Inlined_In_GNATprove_Mode): New\n\tfunction to decide when a subprogram can be inlined in GNATprove mode.\n\t(Check_And_Build_Body_To_Inline): Include GNATprove_Mode as a\n\tcondition for possible inlining.\n\t* sem_ch10.adb (Analyze_Compilation_Unit): Remove special case\n\tfor Inline_Always in GNATprove mode.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Build inlined\n\tbody for subprograms in GNATprove mode, under debug flag -gnatdQ.\n\t* sem_prag.adb Minor change in comments.\n\t* sem_res.adb (Resolve_Call): Only perform GNATprove inlining\n\tinside subprograms marked as SPARK_Mode On.\n\t* sinfo.ads: Minor typo fix.\n\nFrom-SVN: r213205", "tree": {"sha": "28bb3481554fc9b101482e1edc13c60506976e79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28bb3481554fc9b101482e1edc13c60506976e79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d180af122bda9206c06441fee99f9adf873bdde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d180af122bda9206c06441fee99f9adf873bdde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d180af122bda9206c06441fee99f9adf873bdde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d180af122bda9206c06441fee99f9adf873bdde/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ae243127908fa14634e086d2e55b8a996f95a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae243127908fa14634e086d2e55b8a996f95a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae243127908fa14634e086d2e55b8a996f95a2c"}], "stats": {"total": 268, "additions": 240, "deletions": 28}, "files": [{"sha": "aaf8a1453946dbdd8521bc0798954764eba0ec4d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2d180af122bda9206c06441fee99f9adf873bdde", "patch": "@@ -1,3 +1,19 @@\n+2014-07-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* debug.adb Enable GNATprove inlining under debug flag -gnatdQ for now.\n+\t* inline.ads, inline.adb (Can_Be_Inlined_In_GNATprove_Mode): New\n+\tfunction to decide when a subprogram can be inlined in GNATprove mode.\n+\t(Check_And_Build_Body_To_Inline): Include GNATprove_Mode as a\n+\tcondition for possible inlining.\n+\t* sem_ch10.adb (Analyze_Compilation_Unit): Remove special case\n+\tfor Inline_Always in GNATprove mode.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Build inlined\n+\tbody for subprograms in GNATprove mode, under debug flag -gnatdQ.\n+\t* sem_prag.adb Minor change in comments.\n+\t* sem_res.adb (Resolve_Call): Only perform GNATprove inlining\n+\tinside subprograms marked as SPARK_Mode On.\n+\t* sinfo.ads: Minor typo fix.\n+\n 2014-07-29  Vincent Celier  <celier@adacore.com>\n \n \t* frontend.adb: Add dependency on gnat.adc when taken into account"}, {"sha": "5e9c0daf02ae136a4ed5f0be80b6849c64531ce6", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=2d180af122bda9206c06441fee99f9adf873bdde", "patch": "@@ -80,7 +80,7 @@ package body Debug is\n    --  dN   No file name information in exception messages\n    --  dO   Output immediate error messages\n    --  dP   Do not check for controlled objects in preelaborable packages\n-   --  dQ\n+   --  dQ   Enable inlining in GNATprove mode\n    --  dR   Bypass check for correct version of s-rpc\n    --  dS   Never convert numbers to machine numbers in Sem_Eval\n    --  dT   Convert to machine numbers only for constant declarations\n@@ -438,6 +438,10 @@ package body Debug is\n    --       in preelaborable packages, but this restriction is a huge pain,\n    --       especially in the predefined library units.\n \n+   --  dQ   Enable inlining in GNATprove mode. Although expansion is not set in\n+   --       GNATprove mode, inlining is useful for improving the precision of\n+   --       formal verification. Under a debug flag until fully reliable.\n+\n    --  dR   Bypass the check for a proper version of s-rpc being present\n    --       to use the -gnatz? switch. This allows debugging of the use\n    --       of stubs generation without needing to have GLADE (or some"}, {"sha": "dda78d6a2560179c94f998ccbdb97a4894df2d1a", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 155, "deletions": 5, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=2d180af122bda9206c06441fee99f9adf873bdde", "patch": "@@ -44,8 +44,10 @@ with Sem_Ch8;  use Sem_Ch8;\n with Sem_Ch10; use Sem_Ch10;\n with Sem_Ch12; use Sem_Ch12;\n with Sem_Eval; use Sem_Eval;\n+with Sem_Prag; use Sem_Prag;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n+with Sinput;   use Sinput;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Uname;    use Uname;\n@@ -1257,12 +1259,13 @@ package body Inline is\n          end if;\n       end if;\n \n-      --  We do not inline a subprogram  that is too large, unless it is\n-      --  marked Inline_Always. This pragma does not suppress the other\n-      --  checks on inlining (forbidden declarations, handlers, etc).\n+      --  We do not inline a subprogram that is too large, unless it is marked\n+      --  Inline_Always or we are in GNATprove mode. This pragma does not\n+      --  suppress the other checks on inlining (forbidden declarations,\n+      --  handlers, etc).\n \n       if Stat_Count > Max_Size\n-        and then not Has_Pragma_Inline_Always (Subp)\n+        and then not (Has_Pragma_Inline_Always (Subp) or else GNATprove_Mode)\n       then\n          Cannot_Inline (\"cannot inline& (body too large)?\", N, Subp);\n          return;\n@@ -1454,6 +1457,152 @@ package body Inline is\n       end if;\n    end Cannot_Inline;\n \n+   --------------------------------------\n+   -- Can_Be_Inlined_In_GNATprove_Mode --\n+   --------------------------------------\n+\n+   function Can_Be_Inlined_In_GNATprove_Mode\n+     (Spec_Id : Entity_Id;\n+      Body_Id : Entity_Id) return Boolean\n+   is\n+      function Has_Some_Contract (Id : Entity_Id) return Boolean;\n+      --  Returns True if subprogram Id has any contract (Pre, Post, Global,\n+      --  Depends, etc.)\n+\n+      function In_Some_Private_Part (N : Node_Id) return Boolean;\n+      --  Returns True if node N is defined in the private part of a package\n+\n+      function In_Unit_Body (N : Node_Id) return Boolean;\n+      --  Returns True if node N is defined in the body of a unit\n+\n+      function Is_Expression_Function (Id : Entity_Id) return Boolean;\n+      --  Returns True if subprogram Id was defined originally as an expression\n+      --  function.\n+\n+      -----------------------\n+      -- Has_Some_Contract --\n+      -----------------------\n+\n+      function Has_Some_Contract (Id : Entity_Id) return Boolean is\n+         Items : constant Node_Id := Contract (Id);\n+      begin\n+         return Present (Items)\n+           and then (Present (Pre_Post_Conditions (Items))\n+                       or else\n+                     Present (Contract_Test_Cases (Items))\n+                       or else\n+                     Present (Classifications (Items)));\n+      end Has_Some_Contract;\n+\n+      --------------------------\n+      -- In_Some_Private_Part --\n+      --------------------------\n+\n+      function In_Some_Private_Part (N : Node_Id) return Boolean is\n+         P  : Node_Id := N;\n+         PP : Node_Id;\n+      begin\n+         while Present (P)\n+           and then Present (Parent (P))\n+         loop\n+            PP := Parent (P);\n+\n+            if Nkind (PP) = N_Package_Specification\n+              and then List_Containing (P) = Private_Declarations (PP)\n+            then\n+               return True;\n+            end if;\n+\n+            P := PP;\n+         end loop;\n+         return False;\n+      end In_Some_Private_Part;\n+\n+      ------------------\n+      -- In_Unit_Body --\n+      ------------------\n+\n+      function In_Unit_Body (N : Node_Id) return Boolean is\n+         CU : constant Node_Id := Enclosing_Comp_Unit_Node (N);\n+      begin\n+         return Present (CU)\n+           and then Nkind_In (Unit (CU), N_Package_Body,\n+                                         N_Subprogram_Body,\n+                                         N_Subunit);\n+      end In_Unit_Body;\n+\n+      ----------------------------\n+      -- Is_Expression_Function --\n+      ----------------------------\n+\n+      function Is_Expression_Function (Id : Entity_Id) return Boolean is\n+         Decl : constant Node_Id := Parent (Parent (Id));\n+      begin\n+         return Nkind (Original_Node (Decl)) = N_Expression_Function;\n+      end Is_Expression_Function;\n+\n+      Id : Entity_Id;  --  Procedure or function entity for the subprogram\n+\n+   --  Start of Can_Be_Inlined_In_GNATprove_Mode\n+\n+   begin\n+      if Present (Spec_Id) then\n+         Id := Spec_Id;\n+      else\n+         Id := Body_Id;\n+      end if;\n+\n+      --  Do not inline unit-level subprograms\n+\n+      if Nkind (Parent (Id)) = N_Defining_Program_Unit_Name then\n+         return False;\n+\n+      --  Do not inline subprograms declared in the visible part of a library\n+      --  package.\n+\n+      elsif Is_Library_Level_Entity (Id)\n+        and then not In_Unit_Body (Id)\n+        and then not In_Some_Private_Part (Id)\n+      then\n+         return False;\n+\n+      --  Do not inline subprograms that have a contract on the spec or the\n+      --  body. Use the contract(s) instead in GNATprove.\n+\n+      elsif (Present (Spec_Id) and then Has_Some_Contract (Spec_Id))\n+        or else Has_Some_Contract (Body_Id)\n+      then\n+         return False;\n+\n+      --  Do not inline expression functions\n+\n+      elsif (Present (Spec_Id) and then Is_Expression_Function (Spec_Id))\n+        or else Is_Expression_Function (Body_Id)\n+      then\n+         return False;\n+\n+      --  Only inline subprograms whose body is marked SPARK_Mode On\n+\n+      elsif No (SPARK_Pragma (Body_Id))\n+        or else Get_SPARK_Mode_From_Pragma (SPARK_Pragma (Body_Id)) /= On\n+      then\n+         return False;\n+\n+      --  Subprograms in generic instances are currently not inlined, to avoid\n+      --  problems with inlining of standard library subprograms.\n+\n+      elsif Instantiation_Location (Sloc (Id)) /= No_Location then\n+         return False;\n+\n+      --  Otherwise, this is a subprogram declared inside the private part of a\n+      --  package, or inside a package body, or locally in a subprogram, and it\n+      --  does not have any contract. Inline it.\n+\n+      else\n+         return True;\n+      end if;\n+   end Can_Be_Inlined_In_GNATprove_Mode;\n+\n    ------------------------------------\n    -- Check_And_Build_Body_To_Inline --\n    ------------------------------------\n@@ -2009,7 +2158,8 @@ package body Inline is\n \n          Decl       : constant Node_Id := Unit_Declaration_Node (Spec_Id);\n          May_Inline : constant Boolean :=\n-                        Has_Pragma_Inline_Always (Spec_Id)\n+                        GNATprove_Mode\n+                          or else Has_Pragma_Inline_Always (Spec_Id)\n                           or else (Has_Pragma_Inline (Spec_Id)\n                                     and then ((Optimization_Level > 0\n                                                 and then Ekind (Spec_Id)"}, {"sha": "a4a95279524dbcc8c2dd85993768324cfb08340b", "filename": "gcc/ada/inline.ads", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Finline.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Finline.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.ads?ref=2d180af122bda9206c06441fee99f9adf873bdde", "patch": "@@ -23,7 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This module handles three kinds of inlining activity:\n+--  This module handles four kinds of inlining activity:\n \n --  a) Instantiation of generic bodies. This is done unconditionally, after\n --  analysis and expansion of the main unit.\n@@ -37,10 +37,12 @@\n \n --  c) Front-end inlining for Inline_Always subprograms. This is primarily an\n --  expansion activity that is performed for performance reasons, and when the\n---  target does not use the gcc backend. Inline_Always can also be used in the\n---  context of GNATprove, to perform source transformations to simplify proof\n---  obligations. The machinery used in both cases is similar, but there are\n---  fewer restrictions on the source of subprograms in the latter case.\n+--  target does not use the gcc backend.\n+\n+--  d) Front-end inlining for GNATprove, to perform source transformations\n+--  to simplify formal verification. The machinery used is the same than for\n+--  Inline_Always subprograms, but there are fewer restrictions on the source\n+--  of subprograms.\n \n with Alloc;\n with Opt;    use Opt;\n@@ -233,4 +235,11 @@ package Inline is\n    --  If an instantiation appears in unreachable code, delete the pending\n    --  body instance.\n \n+   function Can_Be_Inlined_In_GNATprove_Mode\n+     (Spec_Id : Entity_Id;\n+      Body_Id : Entity_Id) return Boolean;\n+   --  Returns True if the subprogram identified by Spec_Id (possibly Empty)\n+   --  and Body_Id (not Empty) can be inlined in GNATprove mode. GNATprove\n+   --  relies on this to adapt its treatment of the subprogram.\n+\n end Inline;"}, {"sha": "a58a8a40d1848bb7912c89281162c5ee2f702cec", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=2d180af122bda9206c06441fee99f9adf873bdde", "patch": "@@ -1203,10 +1203,9 @@ package body Sem_Ch10 is\n         and then Get_Cunit_Unit_Number (N) /= Main_Unit\n \n         --  We don't need to do this if the Expander is not active, since there\n-        --  is no code to inline. However an exception is that we do the call\n-        --  in GNATprove mode, since the resulting inlining eases proofs.\n+        --  is no code to inline.\n \n-        and then (Expander_Active or GNATprove_Mode)\n+        and then Expander_Active\n       then\n          declare\n             Save_Style_Check : constant Boolean := Style_Check;"}, {"sha": "727a3beb7d72f6226fbb05ace4b6fb7ec7cb86d3", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=2d180af122bda9206c06441fee99f9adf873bdde", "patch": "@@ -3341,29 +3341,64 @@ package body Sem_Ch6 is\n \n       --  Note: Normally we don't do any inlining if expansion is off, since\n       --  we won't generate code in any case. An exception arises in GNATprove\n-      --  mode where we want to expand calls in place whenever possible, even\n-      --  with expansion disabled since the inlining eases proofs.\n+      --  mode where we want to expand some calls in place, even with expansion\n+      --  disabled, since the inlining eases formal verification.\n \n       --  Old semantics\n \n       if not Debug_Flag_Dot_K then\n          if Present (Spec_Id)\n-           and then (Expander_Active or else GNATprove_Mode)\n+           and then Expander_Active\n            and then\n              (Has_Pragma_Inline_Always (Spec_Id)\n-               or else (Has_Pragma_Inline (Spec_Id) and Front_End_Inlining))\n+              or else (Has_Pragma_Inline (Spec_Id) and Front_End_Inlining))\n+         then\n+            Build_Body_To_Inline (N, Spec_Id);\n+\n+         --  In GNATprove mode, inline only when there is a separate subprogram\n+         --  declaration for now, as inlining of subprogram bodies acting as\n+         --  declarations, or subprogram stubs, are not supported by frontend\n+         --  inlining. This inlining should occur after analysis of the body,\n+         --  so that it is known whether the value of SPARK_Mode applicable to\n+         --  the body, which can be defined by a pragma inside the body.\n+\n+         elsif GNATprove_Mode\n+           and then Debug_Flag_QQ\n+           and then Full_Analysis\n+           and then not Inside_A_Generic\n+           and then Present (Spec_Id)\n+           and then\n+             Nkind (Parent (Parent (Spec_Id))) = N_Subprogram_Declaration\n+           and then Can_Be_Inlined_In_GNATprove_Mode (Spec_Id, Body_Id)\n          then\n             Build_Body_To_Inline (N, Spec_Id);\n          end if;\n \n       --  New semantics (enabled by debug flag gnatd.k for testing)\n \n-      elsif (Expander_Active or else GNATprove_Mode)\n+      elsif Expander_Active\n         and then Serious_Errors_Detected = 0\n         and then Present (Spec_Id)\n         and then Has_Pragma_Inline (Spec_Id)\n       then\n          Check_And_Build_Body_To_Inline (N, Spec_Id, Body_Id);\n+\n+      --  In GNATprove mode, inline only when there is a separate subprogram\n+      --  declaration for now, as inlining of subprogram bodies acting as\n+      --  declarations, or subprogram stubs, are not supported by frontend\n+      --  inlining. This inlining should occur after analysis of the body, so\n+      --  that it is known whether the value of SPARK_Mode applicable to the\n+      --  body, which can be defined by a pragma inside the body.\n+\n+      elsif GNATprove_Mode\n+        and then Debug_Flag_QQ\n+        and then Full_Analysis\n+        and then not Inside_A_Generic\n+        and then Present (Spec_Id)\n+        and then Nkind (Parent (Parent (Spec_Id))) = N_Subprogram_Declaration\n+        and then Can_Be_Inlined_In_GNATprove_Mode (Spec_Id, Body_Id)\n+      then\n+         Check_And_Build_Body_To_Inline (N, Spec_Id, Body_Id);\n       end if;\n \n       --  Ada 2005 (AI-262): In library subprogram bodies, after the analysis"}, {"sha": "a25f451a00c609f5ea7bfffed5fb405cdcb85fe6", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2d180af122bda9206c06441fee99f9adf873bdde", "patch": "@@ -15389,10 +15389,8 @@ package body Sem_Prag is\n             --  if caused walk order issues.\n \n             --  Historical note: this pragma used to be disabled in GNATprove\n-            --  mode as well, but that was odd since walk order shoult not be\n-            --  an issue in that case. Furthermore, we now like to do as much\n-            --  front-end inlining as possible in GNATprove mode since it makes\n-            --  proving things easier.\n+            --  mode as well, but that was odd since walk order should not be\n+            --  an issue in that case.\n \n             if not CodePeer_Mode then\n                Process_Inline (Enabled);"}, {"sha": "0e73216971f1e422fd7ebbb80f5285037b909045", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=2d180af122bda9206c06441fee99f9adf873bdde", "patch": "@@ -6124,15 +6124,16 @@ package body Sem_Res is\n       Eval_Call (N);\n       Check_Elab_Call (N);\n \n-      --  In GNATprove_Mode expansion is disabled, but we want to inline\n-      --  subprograms that are marked Inline_Always, since the inlining\n-      --  is useful in making it easier to prove things about the inlined body.\n-      --  Indirect calls, through a subprogram type, cannot be inlined.\n+      --  In GNATprove mode, expansion is disabled, but we want to inline\n+      --  some subprograms to facilitate formal verification. Indirect calls,\n+      --  through a subprogram type, cannot be inlined. Inlining is only\n+      --  performed for calls for which SPARK_Mode is On.\n \n       if GNATprove_Mode\n         and then Is_Overloadable (Nam)\n         and then Nkind (Unit_Declaration_Node (Nam)) = N_Subprogram_Declaration\n         and then Present (Body_To_Inline (Unit_Declaration_Node (Nam)))\n+        and then SPARK_Mode = On\n       then\n          Expand_Inlined_Call (N, Nam, Nam);\n       end if;"}, {"sha": "427919e7d3a99ed5c0bde134b3f4b85c51e480b6", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d180af122bda9206c06441fee99f9adf873bdde/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=2d180af122bda9206c06441fee99f9adf873bdde", "patch": "@@ -817,7 +817,7 @@ package Sinfo is\n    --    set, it means that the front end can assure no overlap of operands.\n \n    --  Body_To_Inline (Node3-Sem)\n-   --    present in subprogram declarations. Denotes analyzed but unexpanded\n+   --    Present in subprogram declarations. Denotes analyzed but unexpanded\n    --    body of subprogram, to be used when inlining calls. Present when the\n    --    subprogram has an Inline pragma and inlining is enabled. If the\n    --    declaration is completed by a renaming_as_body, and the renamed en-"}]}