{"sha": "ce7e39367a180e676da3632bbfaa012a77a354d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U3ZTM5MzY3YTE4MGU2NzZkYTM2MzJiYmZhYTAxMmE3N2EzNTRkOQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-04-06T16:11:13Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-04-06T16:11:13Z"}, "message": "URLConnection.java: Import classes directly.\n\n2003-04-06  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/URLConnection.java:\n\tImport classes directly.\n\t(URLConnection): Merged class documentation with classpath.\n\t(url): Moved, documentation from classpath added.\n\t(doInput): Moved, documentation from classpath added.\n\t(doOutput): Moved, documentation from classpath added.\n\t(allowUserInteraction): Moved.\n\t(useCaches): Moved, documentation from classpath added.\n\t(ifModifiedSince): Moved, documentation from classpath added.\n\t(connected): Moved, documentation from classpath added.\n\nFrom-SVN: r65301", "tree": {"sha": "39a1a760ed913996e603be7bf5d25a270de87b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39a1a760ed913996e603be7bf5d25a270de87b1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce7e39367a180e676da3632bbfaa012a77a354d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7e39367a180e676da3632bbfaa012a77a354d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce7e39367a180e676da3632bbfaa012a77a354d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7e39367a180e676da3632bbfaa012a77a354d9/comments", "author": null, "committer": null, "parents": [{"sha": "af5fcbd02e4a9f17a53fc27dd90db17a79ab96f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5fcbd02e4a9f17a53fc27dd90db17a79ab96f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af5fcbd02e4a9f17a53fc27dd90db17a79ab96f3"}], "stats": {"total": 108, "additions": 93, "deletions": 15}, "files": [{"sha": "c59b2addbf4fc9cc3fa02a3b766ceea3563357e0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7e39367a180e676da3632bbfaa012a77a354d9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7e39367a180e676da3632bbfaa012a77a354d9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ce7e39367a180e676da3632bbfaa012a77a354d9", "patch": "@@ -1,3 +1,16 @@\n+2003-04-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/URLConnection.java:\n+\tImport classes directly.\n+\t(URLConnection): Merged class documentation with classpath.\n+\t(url): Moved, documentation from classpath added.\n+\t(doInput): Moved, documentation from classpath added.\n+\t(doOutput): Moved, documentation from classpath added.\n+\t(allowUserInteraction): Moved.\n+\t(useCaches): Moved, documentation from classpath added.\n+\t(ifModifiedSince): Moved, documentation from classpath added.\n+\t(connected): Moved, documentation from classpath added.\n+\n 2003-04-06  Michael Koch  <konqueror@gmx.de>\n \n \t* java/io/FileInputStream.java"}, {"sha": "98204308b9edeb158eebac638ac5248c071f0610", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 80, "deletions": 15, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7e39367a180e676da3632bbfaa012a77a354d9/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7e39367a180e676da3632bbfaa012a77a354d9/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=ce7e39367a180e676da3632bbfaa012a77a354d9", "patch": "@@ -38,39 +38,60 @@\n \n package java.net;\n \n-import java.io.*;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.security.Permission;\n+import java.security.AllPermission;\n import java.text.ParsePosition;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.Locale;\n import java.util.Hashtable;\n import java.util.Map;\n import java.util.StringTokenizer;\n-import java.security.Permission;\n-import java.security.AllPermission;\n import gnu.gcj.io.MimeTypes;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 5, 1999.\n- */\n-\n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  One guessContentTypeFrom... methods not implemented.\n  *    getContent method assumes content type from response; see comment there.\n  */\n \n+/**\n+ * This class models a connection that retrieves the information pointed\n+ * to by a URL object.  This is typically a connection to a remote node\n+ * on the network, but could be a simple disk read.\n+ * <p>\n+ * A URLConnection object is normally created by calling the openConnection()\n+ * method of a URL object.  This method is somewhat misnamed because it does\n+ * not actually open the connection.  Instead, it return an unconnected\n+ * instance of this object.  The caller then has the opportunity to set\n+ * various connection options prior to calling the actual connect() method.\n+ * <p>\n+ * After the connection has been opened, there are a number of methods in\n+ * this class that access various attributes of the data, typically\n+ * represented by headers sent in advance of the actual data itself.\n+ * <p>\n+ * Also of note are the getInputStream and getContent() methods which allow\n+ * the caller to retrieve the actual data from the connection.  Note that\n+ * for some types of connections, writing is also allowed.  The setDoOutput()\n+ * method must be called prior to connecing in order to enable this, then\n+ * the getOutputStream method called after the connection in order to\n+ * obtain a stream to write the output to.\n+ * <p>\n+ * The getContent() method is of particular note.  This method returns an\n+ * Object that encapsulates the data returned.  There is no way do determine\n+ * the type of object that will be returned in advance.  This is determined\n+ * by the actual content handlers as described in the description of that\n+ * method.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ */\n public abstract class URLConnection\n {\n-  protected URL url;\n-  protected boolean doInput = true;\n-  protected boolean doOutput = false;\n-  protected boolean allowUserInteraction;\n-  protected boolean useCaches;\n-  protected long ifModifiedSince = 0L;\n-  protected boolean connected = false;\n   private static boolean defaultAllowUserInteraction = false;\n   private static boolean defaultUseCaches = true;\n   private static FileNameMap fileNameMap;  // Set by the URLConnection subclass.\n@@ -81,6 +102,50 @@\n   private static SimpleDateFormat dateFormat1, dateFormat2, dateFormat3;\n   private static boolean dateformats_initialized = false;\n \n+  /**\n+   * This is the URL associated with this connection\n+   */\n+  protected URL url;\n+\n+  /**\n+   * Indicates whether or not input can be read from this URL\n+   */\n+  protected boolean doInput = true;\n+  \n+  /**\n+   * Indicates whether or not output can be sent to this URL\n+   */\n+  protected boolean doOutput = false;\n+  \n+  protected boolean allowUserInteraction;\n+\n+  /**\n+   * If this flag is set, the protocol is allowed to cache data whenever\n+   * it can (caching is not guaranteed). If it is not set, the protocol\n+   * must a get a fresh copy of the data.\n+   * <p>\n+   * This field is set by the setUseCaches method and returned by the\n+   * getUseCaches method.\n+   *\n+   * Its default value is that determined by the last invocation of\n+   * setDefaultUseCaches\n+   */\n+  protected boolean useCaches;\n+\n+  /**\n+   * If this value is non-zero, then the connection will only attempt to\n+   * fetch the document pointed to by the URL if the document has been\n+   * modified more recently than the date set in this variable.  That date\n+   * should be specified as the number of seconds since 1/1/1970 GMT.\n+   */\n+  protected long ifModifiedSince = 0L;\n+\n+  /**\n+   * Indicates whether or not a connection has been established to the\n+   * destination specified in the URL\n+   */\n+  protected boolean connected = false;\n+  \n   /**\n    * Creates a URL connection to a given URL. A real connection is not made.\n    * Use #connect to do this."}]}