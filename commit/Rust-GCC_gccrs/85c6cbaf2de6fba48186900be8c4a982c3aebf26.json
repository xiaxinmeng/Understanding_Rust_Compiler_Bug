{"sha": "85c6cbaf2de6fba48186900be8c4a982c3aebf26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVjNmNiYWYyZGU2ZmJhNDgxODY5MDBiZThjNGE5ODJjM2FlYmYyNg==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "1998-07-15T17:27:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-15T17:27:24Z"}, "message": "decl2.c (add_using_namespace): Iterate over namespaces used indirectly.\n\n\t* decl2.c (add_using_namespace): Iterate over namespaces used\n\tindirectly.\n\t* decl.c (lookup_name_real): Accept namespace aliases as locals.\n\t(cat_namespace_levels): Ignore aliases.\n\t(duplicate_decls): Ignore duplicate aliases.\n\t* decl2.c (do_namespace_alias): Process block level namespace\n\taliases. Store alias with pushdecl. Remove odr errors.\n\t* parse.y (namespace_alias): New non-terminal.\n\t(extdef): Use it.\n\nFrom-SVN: r21201", "tree": {"sha": "3fe6e16ce78fcc46c4f4238a0440c920014cbdbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fe6e16ce78fcc46c4f4238a0440c920014cbdbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85c6cbaf2de6fba48186900be8c4a982c3aebf26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c6cbaf2de6fba48186900be8c4a982c3aebf26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85c6cbaf2de6fba48186900be8c4a982c3aebf26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c6cbaf2de6fba48186900be8c4a982c3aebf26/comments", "author": null, "committer": null, "parents": [{"sha": "2d39086779c6d404d8b61ea08c2ff343000dfd77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d39086779c6d404d8b61ea08c2ff343000dfd77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d39086779c6d404d8b61ea08c2ff343000dfd77"}], "stats": {"total": 8708, "additions": 4351, "deletions": 4357}, "files": [{"sha": "00ee76abda8351eca0bc555f47b4ccaa3df7d8fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c6cbaf2de6fba48186900be8c4a982c3aebf26/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c6cbaf2de6fba48186900be8c4a982c3aebf26/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=85c6cbaf2de6fba48186900be8c4a982c3aebf26", "patch": "@@ -1,3 +1,16 @@\n+1998-07-15  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* decl2.c (add_using_namespace): Iterate over namespaces used\n+\tindirectly.\n+\n+\t* decl.c (lookup_name_real): Accept namespace aliases as locals.\n+\t(cat_namespace_levels): Ignore aliases.\n+\t(duplicate_decls): Ignore duplicate aliases.\n+\t* decl2.c (do_namespace_alias): Process block level namespace\n+\taliases. Store alias with pushdecl. Remove odr errors.\n+\t* parse.y (namespace_alias): New non-terminal.\n+\t(extdef): Use it.\n+\n 1998-07-15  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (arg_assoc_type): Handle METHOD_TYPE like FUNCTION_TYPE."}, {"sha": "10b64bcb88c3ade2a6815083dbedd3ffc8d23711", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c6cbaf2de6fba48186900be8c4a982c3aebf26/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c6cbaf2de6fba48186900be8c4a982c3aebf26/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=85c6cbaf2de6fba48186900be8c4a982c3aebf26", "patch": "@@ -1865,7 +1865,8 @@ cat_namespace_levels()\n   /* The nested namespaces appear in the names list of their ancestors. */\n   for (current = last; current; current = TREE_CHAIN (current))\n     {\n-      if (TREE_CODE (current) != NAMESPACE_DECL)\n+      if (TREE_CODE (current) != NAMESPACE_DECL\n+          || DECL_NAMESPACE_ALIAS (current))\n \tcontinue;\n       if (!DECL_LANG_SPECIFIC (current))\n \t{\n@@ -2740,6 +2741,11 @@ duplicate_decls (newdecl, olddecl)\n     /* One of the declarations is a template instantiation, and the\n        other is not a template at all.  That's OK.  */\n     return 0;\n+  else if (TREE_CODE (newdecl) == NAMESPACE_DECL\n+           && DECL_NAMESPACE_ALIAS (newdecl)\n+           && DECL_NAMESPACE_ALIAS (newdecl) == DECL_NAMESPACE_ALIAS (olddecl))\n+    /* Redeclaration of namespace alias, ignore it. */\n+    return 1;\n   else\n     {\n       char *errmsg = redeclaration_error_message (newdecl, olddecl);\n@@ -4913,12 +4919,26 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n \n   locval = classval = NULL_TREE;\n \n-  if (!namespaces_only && !current_binding_level->namespace_p\n-      && IDENTIFIER_LOCAL_VALUE (name)\n-      /* Kludge to avoid infinite recursion with identifier_type_value.  */\n-      && (prefer_type <= 0\n-          || TREE_CODE (IDENTIFIER_LOCAL_VALUE (name)) == TYPE_DECL))\n-    locval = IDENTIFIER_LOCAL_VALUE (name);\n+  if (!current_binding_level->namespace_p\n+      && IDENTIFIER_LOCAL_VALUE (name))\n+    switch (TREE_CODE (IDENTIFIER_LOCAL_VALUE (name)))\n+      {\n+      case NAMESPACE_DECL:\n+        /* A namespace is rejected only if we strictly require types. */\n+        if (prefer_type <= 1)\n+          locval = IDENTIFIER_LOCAL_VALUE (name);\n+        break;\n+      case TYPE_DECL:\n+        /* A type is rejected only if we strictly require namespaces. */\n+        if (!namespaces_only)\n+          locval = IDENTIFIER_LOCAL_VALUE (name);\n+        break;\n+      default:\n+        /* We require neither types or namespaces. */\n+        if (!namespaces_only && prefer_type <= 0)\n+          locval = IDENTIFIER_LOCAL_VALUE (name);\n+        break;\n+      }\n \n   /* In C++ class fields are between local and global scope,\n      just before the global scope.  */"}, {"sha": "fb09e8cdb809da504a43dc290e2fd5c293187142", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c6cbaf2de6fba48186900be8c4a982c3aebf26/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c6cbaf2de6fba48186900be8c4a982c3aebf26/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=85c6cbaf2de6fba48186900be8c4a982c3aebf26", "patch": "@@ -3877,9 +3877,14 @@ add_using_namespace (user, used, indirect)\n   /* Add user to the used's users list. */\n   DECL_NAMESPACE_USERS (used)\n     = perm_tree_cons (user, 0, DECL_NAMESPACE_USERS (used));\n-\t\t      \n-  for (iter = DECL_NAMESPACE_USERS (user); iter; iter = TREE_CHAIN (iter))\n+\n+  /* Recursively add all namespaces used. */\n+  for (iter = DECL_NAMESPACE_USING (used); iter; iter = TREE_CHAIN (iter))\n     /* indirect usage */\n+    add_using_namespace (user, TREE_PURPOSE (iter), 1);\n+\n+  /* Tell everyone using us about the new used namespaces. */\n+  for (iter = DECL_NAMESPACE_USERS (user); iter; iter = TREE_CHAIN (iter))\n     add_using_namespace (TREE_PURPOSE (iter), used, 1);\n }\n \n@@ -4370,25 +4375,10 @@ do_namespace_alias (alias, namespace)\n \n   namespace = ORIGINAL_NAMESPACE (namespace);\n \n-  binding = binding_for_name (alias, current_namespace);\n-  old = BINDING_VALUE (binding);\n-  if (old)\n-    {\n-      if (TREE_CODE (old) == NAMESPACE_DECL\n-          && DECL_NAMESPACE_ALIAS (old) == namespace)\n-        /* Ok: redeclaration. */\n-        return;\n-      cp_error (\"invalid namespace alias `%D'\", alias);\n-      cp_error_at (\"`%D' previously declared here\", old);\n-    }\n-  else\n-    {\n-      /* Build the alias. */\n-      alias = build_lang_decl (NAMESPACE_DECL, alias, void_type_node);     \n-      DECL_NAMESPACE_ALIAS (alias) = namespace;\n-      DECL_CONTEXT (alias) = FROB_CONTEXT (current_namespace);\n-      BINDING_VALUE (binding) = alias;\n-    }\n+  /* Build the alias. */\n+  alias = build_lang_decl (NAMESPACE_DECL, alias, void_type_node);     \n+  DECL_NAMESPACE_ALIAS (alias) = namespace;\n+  pushdecl (alias);\n }\n \n /* Check a non-member using-declaration. Return the name and scope"}, {"sha": "827c6d52fc4219ba0dcf6a433aa173ec49087546", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 4289, "deletions": 4323, "changes": 8612, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c6cbaf2de6fba48186900be8c4a982c3aebf26/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c6cbaf2de6fba48186900be8c4a982c3aebf26/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=85c6cbaf2de6fba48186900be8c4a982c3aebf26"}, {"sha": "a7623397e159f86472c8de849a9bcc5972cf9b9b", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c6cbaf2de6fba48186900be8c4a982c3aebf26/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c6cbaf2de6fba48186900be8c4a982c3aebf26/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=85c6cbaf2de6fba48186900be8c4a982c3aebf26", "patch": "@@ -403,7 +403,16 @@ extdef:\n \t\t{ push_namespace (NULL_TREE); }\n \t  extdefs_opt '}'\n \t\t{ pop_namespace (); }\n-\t| NAMESPACE identifier '=' \n+\t| namespace_alias\n+\t| using_decl ';'\n+\t\t{ do_toplevel_using_decl ($1); }\n+\t| using_directive\n+\t| extension extdef\n+\t\t{ pedantic = $<itype>1; }\n+\t;\n+\n+namespace_alias:\n+          NAMESPACE identifier '=' \n                 { begin_only_namespace_names (); }\n           any_id ';'\n \t\t{\n@@ -412,11 +421,6 @@ extdef:\n \t\t    $5 = lastiddecl;\n \t\t  do_namespace_alias ($2, $5);\n \t\t}\n-\t| using_decl ';'\n-\t\t{ do_toplevel_using_decl ($1); }\n-\t| using_directive\n-\t| extension extdef\n-\t\t{ pedantic = $<itype>1; }\n \t;\n \n using_decl:\n@@ -3288,6 +3292,7 @@ simple_stmt:\n \t| using_directive\n \t| namespace_using_decl\n \t        { do_local_using_decl ($1); }\n+\t| namespace_alias\n \t;\n \n function_try_block:"}]}