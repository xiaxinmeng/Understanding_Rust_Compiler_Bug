{"sha": "559d2f1e0eafd96c19dc5324db1a466286c0e7fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU5ZDJmMWUwZWFmZDk2YzE5ZGM1MzI0ZGIxYTQ2NjI4NmMwZTdmYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-08T15:15:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-08T15:19:12Z"}, "message": "c++: Don't cache constexpr functions which are passed pointers to heap or static vars being constructed [PR99859]\n\nWhen cxx_bind_parameters_in_call is called e.g. on a method on an automatic\nvariable, we evaluate the argument and because ADDR_EXPR of an automatic\ndecl is not TREE_CONSTANT, we set *non_constant_args and don't cache it.\nBut when it is called on an object located on the heap (allocated using\nC++20 constexpr new) where we represent it as TREE_STATIC artificial\nvar, or when it is called on a static var that is currently being\nconstructed, such ADDR_EXPRs are TREE_CONSTANT and we happily cache\nsuch calls, but they can in those cases have side-effects in the heap\nor static var objects and so caching them means such side-effects will\nhappen only once and not as many times as that method or function is called.\nFurthermore, as Patrick mentioned in the PR, the argument doesn't need to be\njust ADDR_EXPR of the heap or static var or its components, but it could be\na CONSTRUCTOR that has the ADDR_EXPR embedded anywhere.\nAnd the incorrectly cached function doesn't need to modify the pointed vars\nor their components, but some caller could be changing them in between the\ncall that was cached and the call that used the cached result.\n\nThe following patch fixes it by setting *non_constant_args also when\nthe argument contains somewhere such an ADDR_EXPR, either of a heap\nartificial var or component thereof, or of a static var currently being\nconstructed (where for that it uses the same check as\ncxx_eval_store_expression, ctx->global->values.get (...); addresses of\nother static variables would be rejected by cxx_eval_store_expression\nand therefore it is ok to cache such calls).\n\n2021-04-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/99859\n\t* constexpr.c (addr_of_non_const_var): New function.\n\t(cxx_bind_parameters_in_call): Set *non_constant_args to true\n\teven if cp_walk_tree on arg with addr_of_non_const_var callback\n\treturns true.\n\n\t* g++.dg/cpp1y/constexpr-99859-1.C: New test.\n\t* g++.dg/cpp1y/constexpr-99859-2.C: New test.\n\t* g++.dg/cpp2a/constexpr-new18.C: New test.\n\t* g++.dg/cpp2a/constexpr-new19.C: New test.", "tree": {"sha": "ca7eba8859cf502d26615e6a956cfb86443a0732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca7eba8859cf502d26615e6a956cfb86443a0732"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/559d2f1e0eafd96c19dc5324db1a466286c0e7fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/559d2f1e0eafd96c19dc5324db1a466286c0e7fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/559d2f1e0eafd96c19dc5324db1a466286c0e7fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/559d2f1e0eafd96c19dc5324db1a466286c0e7fc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca4641a3b536c9301a6dcb6cb2e26bd4717b47d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4641a3b536c9301a6dcb6cb2e26bd4717b47d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4641a3b536c9301a6dcb6cb2e26bd4717b47d9"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "c8d9dae36fb32690946423f39257201f8f3e5446", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559d2f1e0eafd96c19dc5324db1a466286c0e7fc/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559d2f1e0eafd96c19dc5324db1a466286c0e7fc/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=559d2f1e0eafd96c19dc5324db1a466286c0e7fc", "patch": "@@ -1555,6 +1555,32 @@ free_constructor (tree t)\n     }\n }\n \n+/* Helper function of cxx_bind_parameters_in_call.  Return non-NULL\n+   if *TP is address of a static variable (or part of it) currently being\n+   constructed or of a heap artificial variable.  */\n+\n+static tree\n+addr_of_non_const_var (tree *tp, int *walk_subtrees, void *data)\n+{\n+  if (TREE_CODE (*tp) == ADDR_EXPR)\n+    if (tree var = get_base_address (TREE_OPERAND (*tp, 0)))\n+      if (VAR_P (var) && TREE_STATIC (var))\n+\t{\n+\t  if (DECL_NAME (var) == heap_uninit_identifier\n+\t      || DECL_NAME (var) == heap_identifier\n+\t      || DECL_NAME (var) == heap_vec_uninit_identifier\n+\t      || DECL_NAME (var) == heap_vec_identifier)\n+\t    return var;\n+\n+\t  constexpr_global_ctx *global = (constexpr_global_ctx *) data;\n+\t  if (global->values.get (var))\n+\t    return var;\n+\t}\n+  if (TYPE_P (*tp))\n+    *walk_subtrees = false;\n+  return NULL_TREE;\n+}\n+\n /* Subroutine of cxx_eval_call_expression.\n    We are processing a call expression (either CALL_EXPR or\n    AGGR_INIT_EXPR) in the context of CTX.  Evaluate\n@@ -1616,6 +1642,15 @@ cxx_bind_parameters_in_call (const constexpr_ctx *ctx, tree t,\n \t    /* The destructor needs to see any modifications the callee makes\n \t       to the argument.  */\n \t    *non_constant_args = true;\n+\t    /* If arg is or contains address of a heap artificial variable or\n+\t       of a static variable being constructed, avoid caching the\n+\t       function call, as those variables might be modified by the\n+\t       function, or might be modified by the callers in between\n+\t       the cached function and just read by the function.  */\n+\t  else if (!*non_constant_args\n+\t\t   && cp_walk_tree (&arg, addr_of_non_const_var, ctx->global,\n+\t\t\t\t    NULL))\n+\t    *non_constant_args = true;\n \n \t  /* For virtual calls, adjust the this argument, so that it is\n \t     the object on which the method is called, rather than"}, {"sha": "dea5a5b56f807c556c4a0b108d4d7d47cf86c272", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-99859-1.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559d2f1e0eafd96c19dc5324db1a466286c0e7fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-99859-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559d2f1e0eafd96c19dc5324db1a466286c0e7fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-99859-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-99859-1.C?ref=559d2f1e0eafd96c19dc5324db1a466286c0e7fc", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/99859\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int\n+foo (int *x)\n+{\n+  return ++*x;\n+}\n+\n+struct S { constexpr S () : a(0) { foo (&a); foo (&a); } int a; };\n+constexpr S s = S ();\n+static_assert (s.a == 2, \"\");\n+\n+struct R { int *p; };\n+\n+constexpr int\n+bar (R x)\n+{\n+  return ++*x.p;\n+}\n+\n+struct T { int a = 0; constexpr T () { bar (R{&a}); bar (R{&a}); } };\n+constexpr T t = T ();\n+static_assert (t.a == 2, \"\");"}, {"sha": "a249f4746664c54b7cc5c7faebfc36e98564ec6c", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-99859-2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559d2f1e0eafd96c19dc5324db1a466286c0e7fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-99859-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559d2f1e0eafd96c19dc5324db1a466286c0e7fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-99859-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-99859-2.C?ref=559d2f1e0eafd96c19dc5324db1a466286c0e7fc", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/99859\n+// { dg-do compile { target c++14 } }\n+\n+struct A\n+{\n+  int i;\n+  constexpr int f() { return i; }\n+  constexpr A() : i(0) { i = f(); i = 1; i = f(); }\n+};\n+\n+constexpr A a = A();\n+static_assert (a.i == 1, \"\");"}, {"sha": "24b298aafd45a002e06aebe4f00f63d9a434929e", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new18.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559d2f1e0eafd96c19dc5324db1a466286c0e7fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559d2f1e0eafd96c19dc5324db1a466286c0e7fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new18.C?ref=559d2f1e0eafd96c19dc5324db1a466286c0e7fc", "patch": "@@ -0,0 +1,45 @@\n+// PR c++/99859\n+// { dg-do compile { target c++20 } }\n+\n+template <class T>\n+struct intrusive_ptr\n+{\n+  T *ptr = nullptr;\n+  constexpr explicit intrusive_ptr(T* p) : ptr(p) {\n+    ++ptr->count_;\n+  }\n+  constexpr ~intrusive_ptr() {\n+    if (ptr->dec() == 0)\n+      delete ptr;\n+  }\n+  constexpr intrusive_ptr(intrusive_ptr const& a) : ptr(a.ptr) {\n+    ++ptr->count_;\n+  }\n+};\n+\n+struct Foo {\n+  int count_ = 0;\n+  constexpr int dec() {\n+    return --count_;\n+  }\n+};\n+\n+constexpr bool baz() {\n+  Foo f { 4 };\n+  intrusive_ptr a(&f);\n+  return true;\n+}\n+constexpr bool x = baz();\n+\n+constexpr void bar(intrusive_ptr<Foo> a) \n+{\n+  if (a.ptr->count_ != 2) throw 1;\n+}\n+\n+constexpr bool foo() {\n+  intrusive_ptr a(new Foo());\n+  bar(a);\n+  return true;\n+}\n+\n+static_assert(foo());"}, {"sha": "7a73deed69310f4d934f88e62b955f55319c4a20", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new19.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559d2f1e0eafd96c19dc5324db1a466286c0e7fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559d2f1e0eafd96c19dc5324db1a466286c0e7fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new19.C?ref=559d2f1e0eafd96c19dc5324db1a466286c0e7fc", "patch": "@@ -0,0 +1,43 @@\n+// PR c++/99859\n+// { dg-do compile { target c++20 } }\n+\n+constexpr void\n+foo (int *x)\n+{\n+  ++*x;\n+}\n+\n+constexpr int\n+bar ()\n+{\n+  int *x = new int (0);\n+  foo (x);\n+  foo (x);\n+  int y = *x;\n+  delete x;\n+  return y;\n+}\n+\n+static_assert (bar () == 2);\n+\n+struct R { int a, *b; };\n+\n+constexpr void\n+baz (R x)\n+{\n+  ++*x.b;\n+}\n+\n+constexpr int\n+qux ()\n+{\n+  int *x = new int (0);\n+  R r{1, x};\n+  baz (r);\n+  baz (r);\n+  int y = *x;\n+  delete x;\n+  return y;\n+}\n+\n+static_assert (qux () == 2);"}]}