{"sha": "7f6c22585229b43b13fc9c8d3c08aedd9f7c493a", "node_id": "C_kwDOANBUbNoAKDdmNmMyMjU4NTIyOWI0M2IxM2ZjOWM4ZDNjMDhhZWRkOWY3YzQ5M2E", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-27T19:31:35Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-28T12:30:06Z"}, "message": "Make back_threader_registry inherit from back_jt_path_registry.\n\nWhen a class's only purpose is to expose the methods of its only\nmember, it's really a derived class ;-).\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadbackward.c (class back_threader_registry):\n\tInherit from back_jt_path_registry.\n\t(back_threader_registry::thread_through_all_blocks): Remove.\n\t(back_threader_registry::register_path): Remove\n\tm_lowlevel_registry prefix.", "tree": {"sha": "399029c293f6bf95648cb838a5c52831c9ecab76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/399029c293f6bf95648cb838a5c52831c9ecab76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f6c22585229b43b13fc9c8d3c08aedd9f7c493a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f6c22585229b43b13fc9c8d3c08aedd9f7c493a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f6c22585229b43b13fc9c8d3c08aedd9f7c493a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f6c22585229b43b13fc9c8d3c08aedd9f7c493a/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a84b9d5373c7e67fd0ab2a412c22162cdf969c91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84b9d5373c7e67fd0ab2a412c22162cdf969c91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a84b9d5373c7e67fd0ab2a412c22162cdf969c91"}], "stats": {"total": 21, "additions": 5, "deletions": 16}, "files": [{"sha": "6c1b15904ce6d6f80a73054d1d9d16d3953ec9ca", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f6c22585229b43b13fc9c8d3c08aedd9f7c493a/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f6c22585229b43b13fc9c8d3c08aedd9f7c493a/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=7f6c22585229b43b13fc9c8d3c08aedd9f7c493a", "patch": "@@ -49,13 +49,10 @@ along with GCC; see the file COPYING3.  If not see\n // registered with register_path(), thread_through_all_blocks() is called\n // to modify the CFG.\n \n-class back_threader_registry\n+class back_threader_registry : public back_jt_path_registry\n {\n public:\n   bool register_path (const vec<basic_block> &, edge taken);\n-  bool thread_through_all_blocks (bool may_peel_loop_headers);\n-private:\n-  back_jt_path_registry m_lowlevel_registry;\n };\n \n // Class to abstract the profitability code for the backwards threader.\n@@ -541,12 +538,6 @@ back_threader::debug ()\n   dump (stderr);\n }\n \n-bool\n-back_threader_registry::thread_through_all_blocks (bool may_peel_loop_headers)\n-{\n-  return m_lowlevel_registry.thread_through_all_blocks (may_peel_loop_headers);\n-}\n-\n /* Examine jump threading path PATH and return TRUE if it is profitable to\n    thread it, otherwise return FALSE.\n \n@@ -873,8 +864,7 @@ bool\n back_threader_registry::register_path (const vec<basic_block> &m_path,\n \t\t\t\t       edge taken_edge)\n {\n-  vec<jump_thread_edge *> *jump_thread_path\n-    = m_lowlevel_registry.allocate_thread_path ();\n+  vec<jump_thread_edge *> *jump_thread_path = allocate_thread_path ();\n \n   // The generic copier ignores the edge type.  We can build the\n   // thread edges with any type.\n@@ -885,12 +875,11 @@ back_threader_registry::register_path (const vec<basic_block> &m_path,\n \n       edge e = find_edge (bb1, bb2);\n       gcc_assert (e);\n-      m_lowlevel_registry.push_edge (jump_thread_path, e, EDGE_COPY_SRC_BLOCK);\n+      push_edge (jump_thread_path, e, EDGE_COPY_SRC_BLOCK);\n     }\n \n-  m_lowlevel_registry.push_edge (jump_thread_path,\n-\t\t\t\t taken_edge, EDGE_NO_COPY_SRC_BLOCK);\n-  m_lowlevel_registry.register_jump_thread (jump_thread_path);\n+  push_edge (jump_thread_path, taken_edge, EDGE_NO_COPY_SRC_BLOCK);\n+  register_jump_thread (jump_thread_path);\n   return true;\n }\n "}]}