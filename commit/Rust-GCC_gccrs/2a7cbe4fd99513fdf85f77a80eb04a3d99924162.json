{"sha": "2a7cbe4fd99513fdf85f77a80eb04a3d99924162", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE3Y2JlNGZkOTk1MTNmZGY4NWY3N2E4MGViMDRhM2Q5OTkyNDE2Mg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-03-01T10:57:15Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-01T12:41:45Z"}, "message": "Ensure compilation fails when Struct is constructed with CallExpr\n\nCallExpr is only used for TupleStructs, so this needs to refelect rustc\nbehaviour.", "tree": {"sha": "5d94fe72e0efaccdef6465fe4065685bc3bbb25c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d94fe72e0efaccdef6465fe4065685bc3bbb25c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a7cbe4fd99513fdf85f77a80eb04a3d99924162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7cbe4fd99513fdf85f77a80eb04a3d99924162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a7cbe4fd99513fdf85f77a80eb04a3d99924162", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7cbe4fd99513fdf85f77a80eb04a3d99924162/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f879526899b4680b65da052f4ef396577e6ba621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f879526899b4680b65da052f4ef396577e6ba621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f879526899b4680b65da052f4ef396577e6ba621"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "a729cfe72d91ce9e3944dc9f61c2c8220450cf5f", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a7cbe4fd99513fdf85f77a80eb04a3d99924162/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a7cbe4fd99513fdf85f77a80eb04a3d99924162/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=2a7cbe4fd99513fdf85f77a80eb04a3d99924162", "patch": "@@ -72,8 +72,8 @@ class TypeCheckTopLevel : public TypeCheckBase\n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n \t\t\t   mappings->get_next_hir_id (),\n-\t\t\t   struct_decl.get_identifier (), std::move (fields),\n-\t\t\t   std::move (substitions));\n+\t\t\t   struct_decl.get_identifier (), true,\n+\t\t\t   std::move (fields), std::move (substitions));\n \n     context->insert_type (struct_decl.get_mappings (), type);\n   }\n@@ -109,8 +109,8 @@ class TypeCheckTopLevel : public TypeCheckBase\n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n \t\t\t   mappings->get_next_hir_id (),\n-\t\t\t   struct_decl.get_identifier (), std::move (fields),\n-\t\t\t   std::move (substitions));\n+\t\t\t   struct_decl.get_identifier (), false,\n+\t\t\t   std::move (fields), std::move (substitions));\n \n     context->insert_type (struct_decl.get_mappings (), type);\n   }"}, {"sha": "7fbef0cbc5f7463c748496a2e66749a91001cdc4", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a7cbe4fd99513fdf85f77a80eb04a3d99924162/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a7cbe4fd99513fdf85f77a80eb04a3d99924162/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=2a7cbe4fd99513fdf85f77a80eb04a3d99924162", "patch": "@@ -204,8 +204,8 @@ ADTType::clone ()\n   for (auto &f : fields)\n     cloned_fields.push_back ((StructFieldType *) f->clone ());\n \n-  return new ADTType (get_ref (), get_ty_ref (), identifier, cloned_fields,\n-\t\t      clone_substs (), get_combined_refs ());\n+  return new ADTType (get_ref (), get_ty_ref (), identifier, get_is_tuple (),\n+\t\t      cloned_fields, clone_substs (), get_combined_refs ());\n }\n \n ADTType *\n@@ -804,6 +804,15 @@ ParamType::resolve ()\n void\n TypeCheckCallExpr::visit (ADTType &type)\n {\n+  if (!type.get_is_tuple ())\n+    {\n+      rust_error_at (\n+\tcall.get_locus (),\n+\t\"expected function, tuple struct or tuple variant, found struct `%s`\",\n+\ttype.get_name ().c_str ());\n+      return;\n+    }\n+\n   if (call.num_params () != type.num_fields ())\n     {\n       rust_error_at (call.get_locus (),"}, {"sha": "8f7174820932fce92714c3aa5fc8680e16e1ee52", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a7cbe4fd99513fdf85f77a80eb04a3d99924162/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a7cbe4fd99513fdf85f77a80eb04a3d99924162/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=2a7cbe4fd99513fdf85f77a80eb04a3d99924162", "patch": "@@ -392,24 +392,26 @@ template <class T> class SubstitionRef\n class ADTType : public BaseType, public SubstitionRef<ADTType>\n {\n public:\n-  ADTType (HirId ref, std::string identifier,\n+  ADTType (HirId ref, std::string identifier, bool is_tuple,\n \t   std::vector<StructFieldType *> fields,\n \t   std::vector<SubstitionMapping> subst_refs,\n \t   std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::ADT, refs),\n       SubstitionRef (std::move (subst_refs)), identifier (identifier),\n-      fields (fields)\n+      fields (fields), is_tuple (is_tuple)\n   {}\n \n-  ADTType (HirId ref, HirId ty_ref, std::string identifier,\n+  ADTType (HirId ref, HirId ty_ref, std::string identifier, bool is_tuple,\n \t   std::vector<StructFieldType *> fields,\n \t   std::vector<SubstitionMapping> subst_refs,\n \t   std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::ADT, refs),\n       SubstitionRef (std::move (subst_refs)), identifier (identifier),\n-      fields (fields)\n+      fields (fields), is_tuple (is_tuple)\n   {}\n \n+  bool get_is_tuple () { return is_tuple; }\n+\n   void accept_vis (TyVisitor &vis) override;\n \n   bool is_unit () const override { return false; }\n@@ -484,6 +486,7 @@ class ADTType : public BaseType, public SubstitionRef<ADTType>\n private:\n   std::string identifier;\n   std::vector<StructFieldType *> fields;\n+  bool is_tuple;\n };\n \n class FnType : public BaseType"}]}