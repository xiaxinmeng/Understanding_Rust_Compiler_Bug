{"sha": "d649cc968042b4f44c72aa3068fb3421ba5c873e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY0OWNjOTY4MDQyYjRmNDRjNzJhYTMwNjhmYjM0MjFiYTVjODczZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-20T16:28:31Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-20T16:28:31Z"}, "message": "(ASM_SPEC): Deleted.\n\n(STRUCT_VALUE_REGNUM): Redefine as register a0.\n(STATIC_CHAIN_REGNUM): Redefine as register a1.\n(TRAMPOLINE_TEMPLATE): Redefine to use the right register.\n\nFrom-SVN: r11577", "tree": {"sha": "489da36125a28d590be97b2861c63a2209ab9913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/489da36125a28d590be97b2861c63a2209ab9913"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d649cc968042b4f44c72aa3068fb3421ba5c873e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d649cc968042b4f44c72aa3068fb3421ba5c873e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d649cc968042b4f44c72aa3068fb3421ba5c873e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d649cc968042b4f44c72aa3068fb3421ba5c873e/comments", "author": null, "committer": null, "parents": [{"sha": "7565a035be546e2a97a4377a92fe89ed15e3b1de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7565a035be546e2a97a4377a92fe89ed15e3b1de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7565a035be546e2a97a4377a92fe89ed15e3b1de"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "8dffb7077cfcaf5e3d98a4ba85f65fe565feaccf", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d649cc968042b4f44c72aa3068fb3421ba5c873e/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d649cc968042b4f44c72aa3068fb3421ba5c873e/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=d649cc968042b4f44c72aa3068fb3421ba5c873e", "patch": "@@ -100,9 +100,6 @@ Boston, MA 02111-1307, USA.  */\n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n \n-#undef ASM_SPEC\n-#define ASM_SPEC \"%{m68030} %{m68040} %{fpic:-k} %{fPIC:-k}\"\n-\n #define CPP_PREDEFINES \\\n   \"-D__ELF__ -Dunix -Dmc68000 -Dmc68020 -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(m68k) -Amachine(m68k)\"\n \n@@ -199,6 +196,19 @@ Boston, MA 02111-1307, USA.  */\n     fprintf (FILE, \"\\tjbsr _mcount\\n\");\t\t\t\t\t\\\n }\n \n+/* Register in which address to store a structure value is passed to a\n+   function.  The default in m68k.h is a1.  For m68k/SVR4 it is a0. */\n+\n+#undef STRUCT_VALUE_REGNUM\n+#define STRUCT_VALUE_REGNUM 8\n+\n+/* Register in which static-chain is passed to a function.  The\n+   default in m68k.h is a0, but that is already the struct value\n+   regnum.  Make it a1 instead.  */\n+\n+#undef STATIC_CHAIN_REGNUM\n+#define STATIC_CHAIN_REGNUM 9\n+\n /* How to renumber registers for dbx and gdb.\n    On the Sun-3, the floating point registers have numbers\n    18 to 25, not 16 to 23 as they do in the compiler.  */\n@@ -292,3 +302,21 @@ do {\t\t\t\t\t\t\t\t\t\\\n    technique. */\n #undef PCC_STATIC_STRUCT_RETURN\n #define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* Output assembler code for a block containing the constant parts\n+   of a trampoline, leaving space for the variable parts.  */\n+\n+/* On m68k svr4, the trampoline is different from the generic version\n+   in that we use a1 as the static call chain.  */\n+\n+#undef TRAMPOLINE_TEMPLATE\n+#define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x207b));\t\\\n+  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 8));\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x2f3a));\t\\\n+  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 8));\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x4e75));\t\\\n+  ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\t\\\n+  ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\t\\\n+}"}]}