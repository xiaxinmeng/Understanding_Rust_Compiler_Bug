{"sha": "d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ0Y2M0MDQ3YjVlYzRjYjc0YTc3ZjRiYzQ2ZTY0MzhkODNmMWVkNQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2003-03-03T20:57:19Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2003-03-03T20:57:19Z"}, "message": "Fix sh-elf linker relaxation:\n\ngcc:\n\t* config/sh/sh.h (EXTRA_SPECS): Add subtarget_asm_relax_spec and\n\tsubtarget_asm_isa_spec.\n\t(SUBTARGET_ASM_RELAX_SPEC, SUBTARGET_ASM_ISA_SPEC): Define.\n\t(ASM_SPEC): Define as SH_ASM_SPEC.\n\t(SH_ASM_SPEC): New; take the role of ASM_SPEC, but safe from svr4.h.\n\tUse subtarget_asm_relax_spec and subtarget_asm_isa_spec.\n\t* config/sh/elf.h (ASM_SPEC): Use SH_ASM_SPEC.\n\t(SUBTARGET_ASM_ISA_SPEC): Undef / define.\ngcc/testsuite:\n\tgcc.dg/sh-relax.c: New test.\n\ninclude/elf:\n\t* sh.h (EF_SH_MERGE_MACH): Make sure SH2E & SH3/SH3E merge to SH3E,\n\tand SH2E & SH4 merge to SH4, not SH2E.\n\ngas:\n\t* config/tc-sh.c (sh_dsp): Replace with preset_target_arch.\n\t(md_begin): Use preset_target_arch.\n\t(md_longopts): Make isa option unconditional.\n\t(md_parse_option): Make OPTION_DSP and OPTION_ISA sh4 / any\n\tset preset_target_arch.\n\t(md_apply_fix3): If BFD_ASSEMBLER, adjust SWITCH_TABLE fixups\n\tby -S_GET_VALUE  (fixP->fx_subsy).\n\t(tc_gen_reloc): For SWITCH_TABLE fixups, the symbol is fixp->fx_subsy,\n\tand the addend is 0.\n\tAdjust addend of R_SH_IND12W relocations by fixp->fx_offset - 4.\n\t* config/tc-sh.h (TC_FORCE_RELOCATION_SUB_LOCAL): Define.\n\nbfd:\n\telf32-sh.c (sh_elf_howto_tab): Make R_SH_IND12W into an ordinary\n\trelocation (no special function), and make it non-partial_inplace.\n\t(sh_elf_relax_section): When creating a bsr, use a consistent value\n\tno matter if the symbol is extern or not;  set addend to -4.\n\tDon't swap load / non-load instructions for SH4.\n\t(sh_elf_relax_delete_bytes): In R_SH_IND12W case, check the offset\n\trather than if the symbol is external to determine if adjusting the\n\toffset makes sense.  Adjust the addend too if appropriate.\n\t(sh_elf_relocate_section): In R_SH_IND12W, don't fiddle with the\n\trelocation.\n\nFrom-SVN: r63732", "tree": {"sha": "232365b6c709ead625008c573f69aa1b9152fb89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/232365b6c709ead625008c573f69aa1b9152fb89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5/comments", "author": null, "committer": null, "parents": [{"sha": "53f70c1b3be511895748fa362792d3c5c19bf13b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f70c1b3be511895748fa362792d3c5c19bf13b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f70c1b3be511895748fa362792d3c5c19bf13b"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "dcfe1f9c1e850f9eeed80d86039e4113b934bcbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5", "patch": "@@ -1,4 +1,13 @@\n-Mon Mar  3 19:47:26 2003  J\"orn Rennecke <joern.rennecke@superh.com>\n+Mon Mar  3 20:45:25 2003  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* config/sh/sh.h (EXTRA_SPECS): Add subtarget_asm_relax_spec and\n+\tsubtarget_asm_isa_spec.\n+\t(SUBTARGET_ASM_RELAX_SPEC, SUBTARGET_ASM_ISA_SPEC): Define.\n+\t(ASM_SPEC): Define as SH_ASM_SPEC.\n+\t(SH_ASM_SPEC): New; take the role of ASM_SPEC, but safe from svr4.h.\n+\tUse subtarget_asm_relax_spec and subtarget_asm_isa_spec.\n+\t* config/sh/elf.h (ASM_SPEC): Use SH_ASM_SPEC.\n+\t(SUBTARGET_ASM_ISA_SPEC): Undef / define.\n \n \t* sh.h (OVERRIDE_OPTIONS): Set default values for align_loops\n \tand align_jumps if not set."}, {"sha": "1eed0899c0eb62aff450743697e4a7da9b129685", "filename": "gcc/config/sh/elf.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5/gcc%2Fconfig%2Fsh%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5/gcc%2Fconfig%2Fsh%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Felf.h?ref=d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5", "patch": "@@ -68,9 +68,12 @@ Boston, MA 02111-1307, USA.  */\n \n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE (TARGET_SH5 ? \"long int\" : \"int\")\n+\n /* Pass -ml and -mrelax to the assembler and linker.  */\n #undef ASM_SPEC\n-#define ASM_SPEC  \"%(subtarget_asm_endian_spec) %{mrelax:-relax} \\\n+#define ASM_SPEC SH_ASM_SPEC\n+#undef SUBTARGET_ASM_ISA_SPEC\n+#define SUBTARGET_ASM_ISA_SPEC \"\\\n %{m5-compact:--isa=SHcompact} %{m5-compact-nofpu:--isa=SHcompact} \\\n %{m5-32media:--isa=SHmedia --abi=32} %{m5-32media-nofpu:--isa=SHmedia --abi=32} \\\n %{m5-64media:--isa=SHmedia --abi=64} %{m5-64media-nofpu:--isa=SHmedia --abi=64}\""}, {"sha": "0be5f8932dd8f8ba638ff210af6b6e580eedc093", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5", "patch": "@@ -359,9 +359,21 @@ extern int target_flags;\n   { \"subtarget_link_emul_suffix\", SUBTARGET_LINK_EMUL_SUFFIX },\t\\\n   { \"subtarget_link_spec\", SUBTARGET_LINK_SPEC },\t\t\\\n   { \"subtarget_asm_endian_spec\", SUBTARGET_ASM_ENDIAN_SPEC },\t\\\n+  { \"subtarget_asm_relax_spec\", SUBTARGET_ASM_RELAX_SPEC },\t\\\n+  { \"subtarget_asm_isa_spec\", SUBTARGET_ASM_ISA_SPEC },\t\\\n   SUBTARGET_EXTRA_SPECS\n \n-#define ASM_SPEC  \"%(subtarget_asm_endian_spec) %{mrelax:-relax}\"\n+#if TARGET_CPU_DEFAULT & HARD_SH4_BIT\n+#define SUBTARGET_ASM_RELAX_SPEC \"%{!m[1235]*:-isa=sh4}\"\n+#else\n+#define SUBTARGET_ASM_RELAX_SPEC \"%{m4*:-isa=sh4}\"\n+#endif\n+\n+#define SH_ASM_SPEC \\\n+ \"%(subtarget_asm_endian_spec) %{mrelax:-relax %(subtarget_asm_relax_spec)}\\\n+%(subtarget_asm_isa_spec)\"\n+\n+#define ASM_SPEC SH_ASM_SPEC\n \n #ifndef SUBTARGET_ASM_ENDIAN_SPEC\n #if TARGET_ENDIAN_DEFAULT == LITTLE_ENDIAN_BIT\n@@ -371,6 +383,8 @@ extern int target_flags;\n #endif\n #endif\n \n+#define SUBTARGET_ASM_ISA_SPEC \"\"\n+\n #define LINK_EMUL_PREFIX \"sh%{ml:l}\"\n \n #if TARGET_CPU_DEFAULT & SH5_BIT"}, {"sha": "7dff81d8fde8ff509dd46161e57928126c702db7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5", "patch": "@@ -1,3 +1,7 @@\n+Mon Mar  3 20:42:04 2003  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* gcc.dg/sh-relax.c: New SH-only test.\n+\n 2003-03-03  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.c-torture/compile/20010327-1.c: Back out last change.  Add"}, {"sha": "418a8ca6ecbe47e8540609bfd53f90e7c9fe8059", "filename": "gcc/testsuite/gcc.dg/sh-relax.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5/gcc%2Ftestsuite%2Fgcc.dg%2Fsh-relax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5/gcc%2Ftestsuite%2Fgcc.dg%2Fsh-relax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsh-relax.c?ref=d44cc4047b5ec4cb74a77f4bc46e6438d83f1ed5", "patch": "@@ -0,0 +1,40 @@\n+/* Check that -mrelax works.  */\n+/* { dg-do run { target sh-*-* sh?-*-* sh64-*-* } } */\n+/* { dg-options \"-O1 -mrelax\" } */\n+\n+extern int qwerty (int);\n+\n+int\n+f (int i)\n+{\n+  return qwerty (i) + 1;\n+}\n+\n+int\n+qwerty (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\n+      return 'q';\n+    case 2:\n+      return 'w';\n+    case 3:\n+      return 'e';\n+    case 4:\n+      return 'r';\n+    case 5:\n+      return 't';\n+    case 6:\n+      return 'y';\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  if (f (1) != 'q' + 1 || f (2) != 'w' + 1 || f (3) != 'e' + 1\n+      || f(4) != 'r' + 1 || f (5) != 't' + 1 || f (6) != 'y' + 1)\n+    abort ();\n+  return 0;\n+}"}]}