{"sha": "ec3fd6be49164d13e2cc5ee40b73120c6badeff6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMzZmQ2YmU0OTE2NGQxM2UyY2M1ZWU0MGI3MzEyMGM2YmFkZWZmNg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-31T00:59:40Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-31T00:59:40Z"}, "message": "ChangeLog, [...]: Fix spelling errors.\n\n\t* ChangeLog, actions.c, ch-tree.def, decl.c, except.c, inout.c,\n\ttasking.c, typeck.c: Fix spelling errors.\n\nFrom-SVN: r46668", "tree": {"sha": "bb1ae63568d55551b12edbe5f5f9a9bcb516997f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb1ae63568d55551b12edbe5f5f9a9bcb516997f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec3fd6be49164d13e2cc5ee40b73120c6badeff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec3fd6be49164d13e2cc5ee40b73120c6badeff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec3fd6be49164d13e2cc5ee40b73120c6badeff6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a1b79c3999ec7b2c0d3cbfa9f924baab709b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a1b79c3999ec7b2c0d3cbfa9f924baab709b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a1b79c3999ec7b2c0d3cbfa9f924baab709b1e"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "4f39a2028e010511fbaf934790cf5bb008202a15", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=ec3fd6be49164d13e2cc5ee40b73120c6badeff6", "patch": "@@ -1,3 +1,8 @@\n+2001-10-31  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* ChangeLog, actions.c, ch-tree.def, decl.c, except.c, inout.c,\n+\ttasking.c, typeck.c: Fix spelling errors.\n+\n 2001-10-29  Zack Weinberg  <zack@codesourcery.com>\n \n \t* convert.c, inout.c, loop.c, nloop.c, tasking.c, timing.c,\n@@ -864,7 +869,7 @@ Wed Oct  7 12:19:21 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n Thu Oct  1 10:43:45 1998  Nick Clifton  <nickc@cygnus.com>\n \n-\t* lex.c: Replace occurances of HANDLE_SYSV_PRAGMA with\n+\t* lex.c: Replace occurrences of HANDLE_SYSV_PRAGMA with\n \tHANDLE_GENERIC_PRAGMAS.\n \t(handle_generic_pragma): New function: Parse generic pragmas.\n \n@@ -1120,7 +1125,7 @@ Sat Sep  5 23:49:50 1998  Jeffrey A Law  (law@cygnus.com)\n \n Sat Sep  5 22:25:51 1998  Richard Henderson  <rth@cygnus.com>\n \n-\t* Makefile.in: Update dependancies for top-level gcc files that moved.\n+\t* Makefile.in: Update dependencies for top-level gcc files that moved.\n \n Sat Sep  5 02:21:08 1998  Jeffrey A Law  (law@cygnus.com)\n \n@@ -1396,7 +1401,7 @@ Thu Feb 19 17:33:06 1998  Dave Brolley  <brolley@cygnus.com>\n \n Wed Feb 18 23:48:57 1998  Richard Henderson  <rth@cygnus.com>\n \n-\t* Make-lang.in (cc1chill): Kill lingering bc-opcode.h dependancy.\n+\t* Make-lang.in (cc1chill): Kill lingering bc-opcode.h dependency.\n \n Wed Feb 18 17:35:05 1998  Dave Brolley  <brolley@cygnus.com>\n \n@@ -2043,7 +2048,7 @@ Wed Oct  4 05:14:00 1995  Wilfried Moser  <moser@rtl.cygnus.com>\n \n \t* grant.c (print_integer_selective): In case of a RANGE of\n \ta SET mode, try to find and grant the parent mode.\n-\t(grant_seized_identifier): Dont write it out, if the identifier\n+\t(grant_seized_identifier): Don't write it out, if the identifier\n \tdoesn't have a seize file (it may come from a SPEC MODULE\n \tdefined in the compilation unit).\n \n@@ -2325,7 +2330,7 @@ Mon Jun 19 06:01:42 1995  Wilfried Moser  <moser@rtl.cygnus.com>\n \n \t* grant.c (write_spec_module): If not GRANT ALL specified,\n \twrite only this identifiers to grant file which are\n-\tneccessary to form a prober grant file. This will shorten\n+\tnecessary to form a prober grant file. This will shorten\n \tgrant files and speed up compilation.\n \t(decode_constant_selective, decode_mode_selective,\n \tget_type_selective, decode_decl_selective,\n@@ -8488,7 +8493,7 @@ Fri Aug 13 16:36:36 1993  Per Bothner  (bothner@kalessin.cygnus.com)\n \t* ch-parse.y (optprogendname, optname):  Rename to opt_end_label.\n \t* ch-parse.y:  Add support for compound name strings, but defer\n \tusing all over teh place, due to parser ambiguities.\n-\tHowver, do use defining_occurrence where appropriate.\n+\tHowever, do use defining_occurrence where appropriate.\n \t* ch-parse.y:  Re-write syntax and semantics of GRANT and SEIZE\n \tstatements to support Blue Book functionality.  Neato!\n \n@@ -10526,7 +10531,7 @@ Fri Apr  2 21:55:14 1993  Per Bothner  (bothner@rtl.cygnus.com)\n \tNow, a grantfile is a spec module and contains all the\n \ttop-level declarations of the granting module, not just\n \tthose that are granted.  It also contains explicit grant\n-\tstatments naming those declared names that are granted.\n+\tstatements naming those declared names that are granted.\n \tIt also has seize statements and use_seize_file directives\n \tto correctly handle transitive dependencies.\n \n@@ -11229,7 +11234,7 @@ Fri Jan 29 17:18:22 1993  Per Bothner  (bothner@rtl.cygnus.com)\n \n \t* Makefile.in (install-libchill, install-librmt):  Removed.\n \t* ch-actions.c (build_chill_exception_decl):  Change decl\n-\tto initialized char array, rather than unitialized common.\n+\tto initialized char array, rather than uninitialized common.\n \t(Simplifies extracting string name of exception.)\n \t* ch-actions.c:  Adjust interface to cause_exception accordingly.\n \t* ch-typeck.c (build_chill_array_ref):  Cause rangefail if"}, {"sha": "afbd4239548cffa260f97f29c4ba6d657417515a", "filename": "gcc/ch/actions.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Factions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Factions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Factions.c?ref=ec3fd6be49164d13e2cc5ee40b73120c6badeff6", "patch": "@@ -1749,7 +1749,7 @@ chill_expand_assignment (lhs, modifycode, rhs)\n   \t\t\t    NULL_TREE)))))))));\n     }\n \n-  /* The following is probably superceded by the\n+  /* The following is probably superseded by the\n      above code for SET_IN_EXPR. FIXME! */\n   else if (TREE_CODE (lhs) == BIT_FIELD_REF)\n     {"}, {"sha": "08e8e4f05618ac4eea24969068c46d876dfa7d1e", "filename": "gcc/ch/ch-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Fch-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Fch-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fch-tree.def?ref=ec3fd6be49164d13e2cc5ee40b73120c6badeff6", "patch": "@@ -35,7 +35,7 @@ DEFTREECODE (CLASS_METHOD_DECL, \"class_method_decl\", 'd', 0)\n \n /* A 'SEIZE (OLD->NEW)!POSTFIX' or 'GRANT (OLD->NEW)!POSTFIX' is\n    represented as an ALIAS_DECL where DECL_OLD_PREFIX, DECL_NEW_PREFIX,\n-   and DECL_POSTFIX points to OLD, NEW, and POSTFIX, repectively.\n+   and DECL_POSTFIX points to OLD, NEW, and POSTFIX, respectively.\n    These are IDENTIFIER_NODEs, or NULL if empty.\n    DECL_NAME is NEW!POSTFIX.  After binding, DECL_ABSTRACT_ORIGIN\n    (if not an error_mark) points to a decl whose DECL_NAME is OLD!POSTFIX."}, {"sha": "f1f53833da9702f487fbc455b600206d31f4f94c", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=ec3fd6be49164d13e2cc5ee40b73120c6badeff6", "patch": "@@ -4475,7 +4475,7 @@ layout_enum (enumtype)\n     }\n \n   /* Fix all error_mark_nodes in enum. Increment maxnode and assign value.\n-     This is neccessary to make a duplicate value check in the enum */\n+     This is necessary to make a duplicate value check in the enum */\n   for (pair = values; pair; pair = TREE_CHAIN (pair))\n     {\n       tree decl = TREE_VALUE (pair);"}, {"sha": "1c8ef242231e172e977fba90db0ac41a422463ab", "filename": "gcc/ch/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexcept.c?ref=ec3fd6be49164d13e2cc5ee40b73120c6badeff6", "patch": "@@ -130,7 +130,7 @@ static tree BISJ;\n static tree jbuf_ident, prev_ident, handlers_ident;\n static tree exception_stack_decl = 0;\n \n-/* Chain of cleanups assocated with exception handlers.\n+/* Chain of cleanups associated with exception handlers.\n    The TREE_PURPOSE is an INTEGER_CST whose value is the\n    DECL_ACTION_NESTING_LEVEL (when the handled actions was entered).\n    The TREE_VALUE is an expression to expand when we exit that action. */"}, {"sha": "2f747cebba12ac5861dfd483af37e021713a03ff", "filename": "gcc/ch/inout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Finout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Finout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Finout.c?ref=ec3fd6be49164d13e2cc5ee40b73120c6badeff6", "patch": "@@ -4577,7 +4577,7 @@ build_chill_readtext (text_arg, exprlist)\n   return build1 (CONVERT_EXPR, void_type_node, integer_zero_node);\n }\n \n-/* this function build all neccesary enum-tables used for\n+/* this function build all necessary enum-tables used for\n    WRITETEXT or READTEXT of an enum */\n \n void build_enum_tables ()"}, {"sha": "8a12e4d91d0d30586bdb891d0e030381c0378131", "filename": "gcc/ch/tasking.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Ftasking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Ftasking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftasking.c?ref=ec3fd6be49164d13e2cc5ee40b73120c6badeff6", "patch": "@@ -1959,7 +1959,7 @@ build_receive_buffer_case_label (buffer, loclist)\n \n   if (TREE_CHAIN (loclist) != NULL_TREE)\n     {\n-      error (\"buffer receive alternative requires only 1 defining occurence.\");\n+      error (\"buffer receive alternative requires only 1 defining occurrence.\");\n       return error_mark_node;\n     }\n \n@@ -1969,7 +1969,7 @@ build_receive_buffer_case_label (buffer, loclist)\n \n       /* here we change the mode of rc_state->sig_code to\n \t REF ARRAY (0:65535) REF __tmp_DESCR_type.\n-\t This is neccesary, cause we cannot evaluate the buffer twice\n+\t This is necessary, cause we cannot evaluate the buffer twice\n \t (once here where we compare against the address of the buffer\n \t and second in build_receive_buffer_case_end, where we use the\n \t address build the descriptor, which gets passed to __wait_buffer).\n@@ -2046,7 +2046,7 @@ build_receive_buffer_case_label (buffer, loclist)\n \n   if (! CH_LOCATION_P (var))\n     {\n-      error (\"defining occurence in receive buffer alternative must be a location.\");\n+      error (\"defining occurrence in receive buffer alternative must be a location.\");\n       had_errors = 1;\n     }\n \n@@ -2097,7 +2097,7 @@ build_receive_case_label (signame, loclist)\n  * LABEL_CNT is the case-label counter passed from build_receive_case_start.\n  * ELSE_CLAUSE defines if the RECEIVE CASE action had an ELSE(1) or not(0).\n  * BUF_LIST is a tree-list of tree-lists, where TREE_VALUE defines the \n- * BUFFER location and TREE_PURPOSE defines the defining occurence.\n+ * BUFFER location and TREE_PURPOSE defines the defining occurrence.\n  */\n static void\n build_receive_buffer_case_end (buf_list, else_clause)"}, {"sha": "12d3f991d96a781c3e433a0e6a588b5c213d71ef", "filename": "gcc/ch/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fd6be49164d13e2cc5ee40b73120c6badeff6/gcc%2Fch%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftypeck.c?ref=ec3fd6be49164d13e2cc5ee40b73120c6badeff6", "patch": "@@ -570,7 +570,7 @@ build_chill_array_ref_1 (array, idx)\n   if (! integer_zerop (TYPE_MIN_VALUE (domain)))\n     {\n       /* The C part of the compiler doesn't understand how to do\n-\t arithmetic with dissimilar enum types.  So we check compatability\n+\t arithmetic with dissimilar enum types.  So we check compatibility\n \t here, and perform the math in INTEGER_TYPE.  */\n       if (TREE_CODE (TREE_TYPE (idx)) == ENUMERAL_TYPE\n \t  && chill_comptypes (TREE_TYPE (idx), domain, 0))\n@@ -1114,7 +1114,7 @@ build_chill_cast (type, expr)\n   if (expr_type_is_discrete && type_is_discrete)\n     {\n       /* do an overflow check\n-\t FIXME: is this always neccessary ??? */\n+\t FIXME: is this always necessary ??? */\n       /* FIXME: don't do range chacking when target type is PTR.\n \t PTR doesn't have MIN and MAXVALUE. result is sigsegv. */\n       if (range_checking && type != ptr_type_node)"}]}