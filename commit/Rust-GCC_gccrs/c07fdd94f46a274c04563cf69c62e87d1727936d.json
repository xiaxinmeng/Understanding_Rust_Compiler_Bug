{"sha": "c07fdd94f46a274c04563cf69c62e87d1727936d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA3ZmRkOTRmNDZhMjc0YzA0NTYzY2Y2OWM2MmU4N2QxNzI3OTM2ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-08-16T10:16:15Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-08-16T10:16:15Z"}, "message": "re PR middle-end/32897 (Invalid rematerialisation of subregs)\n\ngcc/\n\tPR middle-end/32897\n\t* reload.c (find_reloads): Check that the memory returned by\n\tfind_reloads_toplev was not the result of forcing a constant\n\tto memory.\n\t(find_reloads_toplev): Always use simplify_gen_subreg to get\n\tthe subreg of a constant.  If the result is also a constant,\n\tbut not a legitimate one, force it into the constant pool\n\tand reload its address.\n\ngcc/testsuite/\n\t* gcc.dg/torture/pr32897.c: New test.\n\nFrom-SVN: r127536", "tree": {"sha": "24148aafcfc6b92104799dde10993008c3662278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24148aafcfc6b92104799dde10993008c3662278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c07fdd94f46a274c04563cf69c62e87d1727936d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c07fdd94f46a274c04563cf69c62e87d1727936d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c07fdd94f46a274c04563cf69c62e87d1727936d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c07fdd94f46a274c04563cf69c62e87d1727936d/comments", "author": null, "committer": null, "parents": [{"sha": "684939cef5c8dee565d3711b720c45c5b6596b8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684939cef5c8dee565d3711b720c45c5b6596b8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/684939cef5c8dee565d3711b720c45c5b6596b8a"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "2a5d7f5c922e6c300cd4087e566399d3dbad3ef2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c07fdd94f46a274c04563cf69c62e87d1727936d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c07fdd94f46a274c04563cf69c62e87d1727936d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c07fdd94f46a274c04563cf69c62e87d1727936d", "patch": "@@ -1,3 +1,14 @@\n+2007-08-16  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR middle-end/32897\n+\t* reload.c (find_reloads): Check that the memory returned by\n+\tfind_reloads_toplev was not the result of forcing a constant\n+\tto memory.\n+\t(find_reloads_toplev): Always use simplify_gen_subreg to get\n+\tthe subreg of a constant.  If the result is also a constant,\n+\tbut not a legitimate one, force it into the constant pool\n+\tand reload its address.\n+\n 2007-08-15  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_rtx_costs): Add CLZ, CTZ, and"}, {"sha": "06ce96bfd387775d3a81206887c0281d40bdceb4", "filename": "gcc/reload.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c07fdd94f46a274c04563cf69c62e87d1727936d/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c07fdd94f46a274c04563cf69c62e87d1727936d/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=c07fdd94f46a274c04563cf69c62e87d1727936d", "patch": "@@ -2794,7 +2794,8 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t      && MEM_P (op)\n \t      && REG_P (reg)\n \t      && (GET_MODE_SIZE (GET_MODE (reg))\n-\t\t  >= GET_MODE_SIZE (GET_MODE (op))))\n+\t\t  >= GET_MODE_SIZE (GET_MODE (op)))\n+\t      && reg_equiv_constant[REGNO (reg)] == 0)\n \t    set_unique_reg_note (emit_insn_before (gen_rtx_USE (VOIDmode, reg),\n \t\t\t\t\t\t   insn),\n \t\t\t\t REG_EQUAL, reg_equiv_memory_loc[REGNO (reg)]);\n@@ -4600,14 +4601,6 @@ find_reloads_toplev (rtx x, int opnum, enum reload_type type,\n       int regno = REGNO (SUBREG_REG (x));\n       rtx tem;\n \n-      if (subreg_lowpart_p (x)\n-\t  && regno >= FIRST_PSEUDO_REGISTER\n-\t  && reg_renumber[regno] < 0\n-\t  && reg_equiv_constant[regno] != 0\n-\t  && (tem = gen_lowpart_common (GET_MODE (x),\n-\t\t\t\t\treg_equiv_constant[regno])) != 0)\n-\treturn tem;\n-\n       if (regno >= FIRST_PSEUDO_REGISTER\n \t  && reg_renumber[regno] < 0\n \t  && reg_equiv_constant[regno] != 0)\n@@ -4616,6 +4609,15 @@ find_reloads_toplev (rtx x, int opnum, enum reload_type type,\n \t    simplify_gen_subreg (GET_MODE (x), reg_equiv_constant[regno],\n \t\t\t\t GET_MODE (SUBREG_REG (x)), SUBREG_BYTE (x));\n \t  gcc_assert (tem);\n+\t  if (CONSTANT_P (tem) && !LEGITIMATE_CONSTANT_P (tem))\n+\t    {\n+\t      tem = force_const_mem (GET_MODE (x), tem);\n+\t      i = find_reloads_address (GET_MODE (tem), &tem, XEXP (tem, 0),\n+\t\t\t\t\t&XEXP (tem, 0), opnum, type,\n+\t\t\t\t\tind_levels, insn);\n+\t      if (address_reloaded)\n+\t\t*address_reloaded = i;\n+\t    }\n \t  return tem;\n \t}\n "}, {"sha": "0b79ae97313588c38395b914d6812ab5bfcf4c8a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c07fdd94f46a274c04563cf69c62e87d1727936d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c07fdd94f46a274c04563cf69c62e87d1727936d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c07fdd94f46a274c04563cf69c62e87d1727936d", "patch": "@@ -1,3 +1,7 @@\n+2007-08-16  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* gcc.dg/torture/pr32897.c: New test.\n+\n 2007-08-16  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/31132"}, {"sha": "3dc43ece058d84b6547e23485d33cea107a3e3a3", "filename": "gcc/testsuite/gcc.dg/torture/pr32897.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c07fdd94f46a274c04563cf69c62e87d1727936d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr32897.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c07fdd94f46a274c04563cf69c62e87d1727936d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr32897.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr32897.c?ref=c07fdd94f46a274c04563cf69c62e87d1727936d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-options \"-G0\" { target mips*-*-* } } */\n+\n+volatile int g[32];\n+long long gll;\n+double gd;\n+\n+#define MULTI(X) \\\n+\tX( 1), X( 2), X( 3), X( 4), X( 5), X( 6), X( 7), X( 8), X( 9), X(10), \\\n+\tX(11), X(12), X(13), X(14), X(15), X(16), X(17), X(18), X(19), X(20), \\\n+\tX(21), X(22), X(23), X(24), X(25), X(26), X(27), X(28), X(29), X(30)\n+\n+#define DECLARE(INDEX) x##INDEX\n+#define COPY_IN(INDEX) x##INDEX = g[INDEX]\n+#define COPY_OUT(INDEX) g[INDEX] = x##INDEX\n+\n+void\n+test (int n)\n+{\n+  union { long long l; double d; } u = { 0x12345678 };\n+  gll = u.l;\n+  int MULTI (DECLARE);\n+  MULTI (COPY_IN);\n+  MULTI (COPY_OUT);\n+  MULTI (COPY_OUT);\n+  MULTI (COPY_OUT);\n+  gd = u.d;\n+}"}]}