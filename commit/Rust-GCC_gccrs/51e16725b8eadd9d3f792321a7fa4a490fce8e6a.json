{"sha": "51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlMTY3MjViOGVhZGQ5ZDNmNzkyMzIxYTdmYTRhNDkwZmNlOGU2YQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-04-08T14:16:38Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-04-08T14:16:38Z"}, "message": "configure.ac (libgcj_ld_export_all): Set for windows native targets to export-all-symbols.\n\n2011-04-08  Kai Tietz  <ktietz@redhat.com>\n\n\t* configure.ac (libgcj_ld_export_all): Set for windows\n\tnative targets to export-all-symbols.\n\t(LIBGCJ_LD_EXPORT_ALL): Export libgcj_ld_export_all.\n\t* Makefile.am (libgcj_la_LDFLAGS): Add LIBGCJ_LD_EXPORT_ALL.\n\t* sysdep/i386/backtrace.h (MAIN_FUNC): Define for windows\n\tnative targets to DllMain.\n\t* gcj/javaprims.h (JNICALL): Define it dependent\n\tfor different windows targets.\n\t* include/jni_md.h: Likewise.\n\t* headers.txt (_Jv_JNI_ToReflectedField): Mark\n\tJNICALLS for friends.\n\t(_Jv_JNI_ToReflectedMethod): Likewise.\n\t* java/lang/Class.h: Regenerated.\n\t* java/lang/reflect/Field.h: Regenerated.\n\t* java/lang/reflect/Constructor.h: Regenerated.\n\t* java/lang/reflect/Method.h: Regenerated.\n\t* configure: Regenerated.\n\t* Makefile.in: Regenerated.\n\t* include/Makefile.in: Regenerated.\n\t* testsuite/Makefile.in: Regenerated.\n\t* gcj/Makefile.in: Regenerated.\n\nFrom-SVN: r172186", "tree": {"sha": "76a36003a27d06ea6d4a27f75f4ad725f9efcda5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76a36003a27d06ea6d4a27f75f4ad725f9efcda5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/comments", "author": null, "committer": null, "parents": [{"sha": "9d40778b0c1b175d5d85fe37de1fb9f90006415f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d40778b0c1b175d5d85fe37de1fb9f90006415f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d40778b0c1b175d5d85fe37de1fb9f90006415f"}], "stats": {"total": 137, "additions": 111, "deletions": 26}, "files": [{"sha": "51dd786b528aec1719c5fbea5e25a350f3a2085c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -1,3 +1,27 @@\n+2011-04-08  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* configure.ac (libgcj_ld_export_all): Set for windows\n+\tnative targets to export-all-symbols.\n+\t(LIBGCJ_LD_EXPORT_ALL): Export libgcj_ld_export_all.\n+\t* Makefile.am (libgcj_la_LDFLAGS): Add LIBGCJ_LD_EXPORT_ALL.\n+\t* sysdep/i386/backtrace.h (MAIN_FUNC): Define for windows\n+\tnative targets to DllMain.\n+\t* gcj/javaprims.h (JNICALL): Define it dependent\n+\tfor different windows targets.\n+\t* include/jni_md.h: Likewise.\n+\t* headers.txt (_Jv_JNI_ToReflectedField): Mark\n+\tJNICALLS for friends.\n+\t(_Jv_JNI_ToReflectedMethod): Likewise.\n+\t* java/lang/Class.h: Regenerated.\n+\t* java/lang/reflect/Field.h: Regenerated.\n+\t* java/lang/reflect/Constructor.h: Regenerated.\n+\t* java/lang/reflect/Method.h: Regenerated.\n+\t* configure: Regenerated.\n+\t* Makefile.in: Regenerated.\n+\t* include/Makefile.in: Regenerated.\n+\t* testsuite/Makefile.in: Regenerated.\n+\t* gcj/Makefile.in: Regenerated.\n+\n 2011-04-04  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac: Redirect $JAR -cf@ output to /dev/null."}, {"sha": "152170862c07007c7759d72416306e42850e59c4", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -492,7 +492,7 @@ xlib_nat_files = $(xlib_nat_source_files:.cc=.lo)\n libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLDFLAGS) $(extra_ldflags) $(THREADLIBS) \\\n \t$(LIBLTDL) $(SYS_ZLIBS) $(LIBJAVA_LDFLAGS_NOUNDEF) \\\n \t-version-info `grep -v '^\\#' $(srcdir)/libtool-version` \\\n-\t$(LIBGCJ_LD_SYMBOLIC_FUNCTIONS)\n+\t$(LIBGCJ_LD_SYMBOLIC_FUNCTIONS) $(LIBGCJ_LD_EXPORT_ALL)\n libgcj_la_LIBADD = \\\n \tclasspath/native/fdlibm/libfdlibm.la \\\n \tjava/lang/Object.lo \\"}, {"sha": "6c966a1efd5b73d2f96e78c5ad7581b0fde4e721", "filename": "libjava/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -606,6 +606,7 @@ LIBGCJ_BC_SPEC = @LIBGCJ_BC_SPEC@\n LIBGCJ_CFLAGS = @LIBGCJ_CFLAGS@\n LIBGCJ_CXXFLAGS = @LIBGCJ_CXXFLAGS@\n LIBGCJ_JAVAFLAGS = @LIBGCJ_JAVAFLAGS@\n+LIBGCJ_LD_EXPORT_ALL = @LIBGCJ_LD_EXPORT_ALL@\n LIBGCJ_LD_SYMBOLIC = @LIBGCJ_LD_SYMBOLIC@\n LIBGCJ_LD_SYMBOLIC_FUNCTIONS = @LIBGCJ_LD_SYMBOLIC_FUNCTIONS@\n LIBGCJ_SPEC = @LIBGCJ_SPEC@\n@@ -1066,7 +1067,7 @@ xlib_nat_files = $(xlib_nat_source_files:.cc=.lo)\n libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLDFLAGS) $(extra_ldflags) $(THREADLIBS) \\\n \t$(LIBLTDL) $(SYS_ZLIBS) $(LIBJAVA_LDFLAGS_NOUNDEF) \\\n \t-version-info `grep -v '^\\#' $(srcdir)/libtool-version` \\\n-\t$(LIBGCJ_LD_SYMBOLIC_FUNCTIONS)\n+\t$(LIBGCJ_LD_SYMBOLIC_FUNCTIONS) $(LIBGCJ_LD_EXPORT_ALL)\n \n libgcj_la_LIBADD = \\\n \tclasspath/native/fdlibm/libfdlibm.la \\"}, {"sha": "8d7f0d572158f3b88bedd5732d898947193cd12b", "filename": "libjava/configure", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -786,6 +786,7 @@ TOOLKIT\n LIBGCJDEBUG\n BUILD_SUBLIBS_FALSE\n BUILD_SUBLIBS_TRUE\n+LIBGCJ_LD_EXPORT_ALL\n LIBGCJ_LD_SYMBOLIC_FUNCTIONS\n LIBGCJ_LD_SYMBOLIC\n LIBGCJ_SUBLIB_CORE_EXTRA_DEPS\n@@ -5957,13 +5958,25 @@ if test -z \"$libgcj_ld_symbolic\"; then\n   libgcj_ld_symbolic=$SYMBOLIC_LDFLAGS\n fi\n \n+# for windows native targets enforce export of all symbols for shared libgcj.\n+libgcj_ld_export_all=\n+case \"$host\" in\n+      *mingw*)\n+\tlibgcj_ld_export_all=-Wl,--export-all-symbols\n+\t;;\n+      *)\n+        ;;\n+esac\n+\n LIBGCJ_CFLAGS=\"${libgcj_cflags}\"\n LIBGCJ_CXXFLAGS=\"${libgcj_cxxflags}\"\n LIBGCJ_JAVAFLAGS=\"${libgcj_javaflags}\"\n LIBGCJ_SUBLIB_LTFLAGS=\"${libgcj_sublib_ltflags}\"\n LIBGCJ_SUBLIB_CORE_EXTRA_DEPS=\"${libgcj_sublib_core_extra_deps}\"\n LIBGCJ_LD_SYMBOLIC=\"${libgcj_ld_symbolic}\"\n LIBGCJ_LD_SYMBOLIC_FUNCTIONS=\"${libgcj_ld_symbolic_functions}\"\n+LIBGCJ_LD_EXPORT_ALL=\"${libgcj_ld_export_all}\"\n+\n \n \n \n@@ -13346,7 +13359,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 13349 \"configure\"\n+#line 13362 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13452,7 +13465,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 13455 \"configure\"\n+#line 13468 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19445,7 +19458,7 @@ if test \"${enable_sjlj_exceptions+set}\" = set; then :\n   enableval=$enable_sjlj_exceptions; :\n else\n   cat > conftest.$ac_ext << EOF\n-#line 19448 \"configure\"\n+#line 19461 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -20540,6 +20553,9 @@ arm*linux*eabi)\n *-*-cygwin)\n     extra_ldflags_libjava=-liconv\n     ;;\n+*-*-mingw*)\n+    extra_ldflags_libjava=-lws2_32\n+    ;;\n esac\n \n LIBMATHSPEC="}, {"sha": "4cbff945f86d0ec4057671e60ccf7aeca9385759", "filename": "libjava/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -214,20 +214,32 @@ if test -z \"$libgcj_ld_symbolic\"; then\n   libgcj_ld_symbolic=$SYMBOLIC_LDFLAGS\n fi\n \n+# for windows native targets enforce export of all symbols for shared libgcj.\n+libgcj_ld_export_all=\n+case \"$host\" in\n+      *mingw*)\n+\tlibgcj_ld_export_all=-Wl,--export-all-symbols\n+\t;;\n+      *)\n+        ;;\n+esac\n+\n LIBGCJ_CFLAGS=\"${libgcj_cflags}\"\n LIBGCJ_CXXFLAGS=\"${libgcj_cxxflags}\"\n LIBGCJ_JAVAFLAGS=\"${libgcj_javaflags}\"\n LIBGCJ_SUBLIB_LTFLAGS=\"${libgcj_sublib_ltflags}\"\n LIBGCJ_SUBLIB_CORE_EXTRA_DEPS=\"${libgcj_sublib_core_extra_deps}\"\n LIBGCJ_LD_SYMBOLIC=\"${libgcj_ld_symbolic}\"\n LIBGCJ_LD_SYMBOLIC_FUNCTIONS=\"${libgcj_ld_symbolic_functions}\"\n+LIBGCJ_LD_EXPORT_ALL=\"${libgcj_ld_export_all}\"\n AC_SUBST(LIBGCJ_CFLAGS)\n AC_SUBST(LIBGCJ_CXXFLAGS)\n AC_SUBST(LIBGCJ_JAVAFLAGS)\n AC_SUBST(LIBGCJ_SUBLIB_LTFLAGS)\n AC_SUBST(LIBGCJ_SUBLIB_CORE_EXTRA_DEPS)\n AC_SUBST(LIBGCJ_LD_SYMBOLIC)\n AC_SUBST(LIBGCJ_LD_SYMBOLIC_FUNCTIONS)\n+AC_SUBST(LIBGCJ_LD_EXPORT_ALL)\n \n # Only use libltdl for non-newlib builds.\n if test \"x${with_newlib}\" = \"x\" || test \"x${with_newlib}\" = \"xno\"; then\n@@ -930,6 +942,9 @@ arm*linux*eabi)\n *-*-cygwin)\n     extra_ldflags_libjava=-liconv\n     ;;\n+*-*-mingw*)\n+    extra_ldflags_libjava=-lws2_32\n+    ;;\n esac\n \n LIBMATHSPEC="}, {"sha": "4497938127107b857afcbb49f9cd4bb03c54c7fa", "filename": "libjava/gcj/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fgcj%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fgcj%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2FMakefile.in?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -189,6 +189,7 @@ LIBGCJ_BC_SPEC = @LIBGCJ_BC_SPEC@\n LIBGCJ_CFLAGS = @LIBGCJ_CFLAGS@\n LIBGCJ_CXXFLAGS = @LIBGCJ_CXXFLAGS@\n LIBGCJ_JAVAFLAGS = @LIBGCJ_JAVAFLAGS@\n+LIBGCJ_LD_EXPORT_ALL = @LIBGCJ_LD_EXPORT_ALL@\n LIBGCJ_LD_SYMBOLIC = @LIBGCJ_LD_SYMBOLIC@\n LIBGCJ_LD_SYMBOLIC_FUNCTIONS = @LIBGCJ_LD_SYMBOLIC_FUNCTIONS@\n LIBGCJ_SPEC = @LIBGCJ_SPEC@"}, {"sha": "3d4c3c947cb82e07710f9557bef25a7116f66f53", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -26,6 +26,15 @@ details.  */\n #undef FALSE\n #define FALSE FALSE\n \n+// JNI calling convention also defined in jni.h  */\n+#ifndef JNICALL\n+ #if (defined (_WIN32) || defined (__WIN32__) || defined (WIN32)) && !defined (_WIN64)\n+  #define JNICALL __stdcall\n+ #else\n+  #define JNICALL\n+ #endif\n+#endif\n+\n // To force selection of correct types that will mangle consistently\n // across platforms.\n extern \"Java\""}, {"sha": "bc1331db7b6c02ad5a4667ab017e34319e661877", "filename": "libjava/headers.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fheaders.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fheaders.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fheaders.txt?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -41,26 +41,26 @@ friend jstring (::_Jv_AllocString) (jsize);\n \n class java/lang/reflect/Constructor\n prepend jmethodID _Jv_FromReflectedConstructor (java::lang::reflect::Constructor *);\n-prepend jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n+prepend jobject JNICALL _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n friend jmethodID (::_Jv_FromReflectedConstructor) (java::lang::reflect::Constructor *);\n-friend jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n+friend jobject JNICALL (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n friend class java::lang::Class;\n \n class java/lang/reflect/Field\n prepend jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);\n-prepend jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);\n+prepend jobject JNICALL _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);\n prepend jobject _Jv_getFieldInternal (java::lang::reflect::Field *f, jclass c, jobject o);\n friend jfieldID (::_Jv_FromReflectedField) (java::lang::reflect::Field *);\n-friend jobject (::_Jv_JNI_ToReflectedField) (_Jv_JNIEnv*, jclass, jfieldID, jboolean);\n+friend jobject JNICALL (::_Jv_JNI_ToReflectedField) (_Jv_JNIEnv*, jclass, jfieldID, jboolean);\n friend class java::lang::Class;\n friend jobject (::_Jv_getFieldInternal) (java::lang::reflect::Field *f, jclass c, jobject o);\n \n class java/lang/reflect/Method\n prepend jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);\n-prepend jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n+prepend jobject JNICALL _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n prepend ::java::lang::reflect::Method *_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);\n friend jmethodID (::_Jv_FromReflectedMethod) (java::lang::reflect::Method *);\n-friend jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n+friend jobject JNICALL (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n friend class java::lang::Class;\n friend class java::io::ObjectInputStream;\n friend java::lang::reflect::Method* ::_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);"}, {"sha": "e6b043c378daaf5362d20197e70a103b835ad9bc", "filename": "libjava/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.in?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -190,6 +190,7 @@ LIBGCJ_BC_SPEC = @LIBGCJ_BC_SPEC@\n LIBGCJ_CFLAGS = @LIBGCJ_CFLAGS@\n LIBGCJ_CXXFLAGS = @LIBGCJ_CXXFLAGS@\n LIBGCJ_JAVAFLAGS = @LIBGCJ_JAVAFLAGS@\n+LIBGCJ_LD_EXPORT_ALL = @LIBGCJ_LD_EXPORT_ALL@\n LIBGCJ_LD_SYMBOLIC = @LIBGCJ_LD_SYMBOLIC@\n LIBGCJ_LD_SYMBOLIC_FUNCTIONS = @LIBGCJ_LD_SYMBOLIC_FUNCTIONS@\n LIBGCJ_SPEC = @LIBGCJ_SPEC@"}, {"sha": "403812704957cc10741ea346d91adfd320ab0651", "filename": "libjava/include/jni_md.h", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Finclude%2Fjni_md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Finclude%2Fjni_md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjni_md.h?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -65,6 +65,15 @@ typedef struct _Jv_JavaVM JavaVM;\n      reused between non-nesting JNI calls.  */\t\t\t\t\\\n   struct _Jv_JNI_LocalFrame *bottom_locals;\n \n+/*  JNI calling convention.  Also defined in javaprims.h. */\n+#ifndef JNICALL\n+#if (defined (_WIN32) || defined (__WIN32__) || defined (WIN32)) \\\n+    && !defined (_WIN64)\n+  #define JNICALL __stdcall\n+ #else\n+  #define JNICALL\n+ #endif\n+#endif\n \n #else /* __GCJ_JNI_IMPL__ */\n \n@@ -117,14 +126,17 @@ typedef uint16_t jchar;\n \n \n /* Linkage and calling conventions. */\n-#if defined (_WIN32) || defined (__WIN32__) || defined (WIN32)\n+#if (defined (_WIN32) || defined (__WIN32__) || defined (WIN32)) \\\n+    && !defined (_WIN64)\n \n #define JNIIMPORT        __declspec(dllimport)\n #define JNIEXPORT        __declspec(dllexport)\n \n-#define JNICALL          __stdcall\n+#ifndef JNICALL\n+#define JNICALL __stdcall\n+#endif\n \n-#else /* !( _WIN32 || __WIN32__ || WIN32) */\n+#else /* !( _WIN32 || __WIN32__ || WIN32) || _WIN64 */\n \n #define JNIIMPORT\n #if defined(__GNUC__) && __GNUC__ > 3\n@@ -133,9 +145,11 @@ typedef uint16_t jchar;\n #define JNIEXPORT\n #endif\n \n+#ifndef JNICALL\n #define JNICALL\n+#endif\n \n-#endif /* !( _WIN32 || __WIN32__ || WIN32) */\n+#endif /* !( _WIN32 || __WIN32__ || WIN32) || _WIN64 */\n \n /* These defines apply to symbols in libgcj */\n #ifdef __GCJ_DLL__"}, {"sha": "a05bdb0ad04ec4441c698808815f0b955348a0f7", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -251,10 +251,10 @@ bool _Jv_getInterfaceMethod(jclass, jclass&, int&,\n \t\t\t    const _Jv_Utf8Const*,\n \t\t\t    const _Jv_Utf8Const*);\n \n-jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv *, jclass, jfieldID,\n-\t\t\t\t  jboolean);\n-jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID,\n-\t\t\t\t   jboolean);\n+jobject JNICALL _Jv_JNI_ToReflectedField (_Jv_JNIEnv *, jclass, jfieldID,\n+\t\t\t\t\t  jboolean);\n+jobject JNICALL _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t   jboolean);\n jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);\n \n jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);"}, {"sha": "1491ed7b5cf2f476e7b2799cbf9363c4bd88d89e", "filename": "libjava/java/lang/reflect/Constructor.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fjava%2Flang%2Freflect%2FConstructor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fjava%2Flang%2Freflect%2FConstructor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FConstructor.h?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -11,7 +11,7 @@\n \n \n jmethodID _Jv_FromReflectedConstructor (java::lang::reflect::Constructor *);\n-jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n+jobject JNICALL _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n \n class java::lang::reflect::Constructor : public ::java::lang::reflect::AccessibleObject\n {\n@@ -58,7 +58,7 @@ class java::lang::reflect::Constructor : public ::java::lang::reflect::Accessibl\n   static ::java::lang::Class class$;\n \n   friend jmethodID (::_Jv_FromReflectedConstructor) (java::lang::reflect::Constructor *);\n-  friend jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n+  friend jobject JNICALL (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n   friend class java::lang::Class;\n };\n "}, {"sha": "9eb71c3e30e9cfd4e2f136403fd54be3ddeba221", "filename": "libjava/java/lang/reflect/Field.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fjava%2Flang%2Freflect%2FField.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fjava%2Flang%2Freflect%2FField.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FField.h?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -11,7 +11,7 @@\n \n \n jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);\n-jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);\n+jobject JNICALL _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);\n jobject _Jv_getFieldInternal (java::lang::reflect::Field *f, jclass c, jobject o);\n \n class java::lang::reflect::Field : public ::java::lang::reflect::AccessibleObject\n@@ -90,7 +90,7 @@ class java::lang::reflect::Field : public ::java::lang::reflect::AccessibleObjec\n   static ::java::lang::Class class$;\n \n   friend jfieldID (::_Jv_FromReflectedField) (java::lang::reflect::Field *);\n-  friend jobject (::_Jv_JNI_ToReflectedField) (_Jv_JNIEnv*, jclass, jfieldID, jboolean);\n+  friend jobject JNICALL (::_Jv_JNI_ToReflectedField) (_Jv_JNIEnv*, jclass, jfieldID, jboolean);\n   friend class java::lang::Class;\n   friend jobject (::_Jv_getFieldInternal) (java::lang::reflect::Field *f, jclass c, jobject o);\n };"}, {"sha": "914e04bede896b5367e990886604ff3bdaa18ed8", "filename": "libjava/java/lang/reflect/Method.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fjava%2Flang%2Freflect%2FMethod.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fjava%2Flang%2Freflect%2FMethod.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FMethod.h?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -11,7 +11,7 @@\n \n \n jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);\n-jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n+jobject JNICALL _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n ::java::lang::reflect::Method *_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);\n \n class java::lang::reflect::Method : public ::java::lang::reflect::AccessibleObject\n@@ -75,7 +75,7 @@ class java::lang::reflect::Method : public ::java::lang::reflect::AccessibleObje\n   static ::java::lang::Class class$;\n \n   friend jmethodID (::_Jv_FromReflectedMethod) (java::lang::reflect::Method *);\n-  friend jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n+  friend jobject JNICALL (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n   friend class java::lang::Class;\n   friend class java::io::ObjectInputStream;\n   friend java::lang::reflect::Method* ::_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);"}, {"sha": "1bad2e1492f9c5542b219b1d9daa5ce9b8e2c9a4", "filename": "libjava/sysdep/i386/backtrace.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fsysdep%2Fi386%2Fbacktrace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Fsysdep%2Fi386%2Fbacktrace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fi386%2Fbacktrace.h?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -17,7 +17,10 @@ details.  */\n /* To allow this to link as a DLL.  */\n #define MAIN_FUNC dll_crt0__FP11per_process\n extern \"C\" int MAIN_FUNC () __declspec(dllimport);\n-#else /* !__CYGWIN__ */\n+#elif defined (_WIN32)\n+#define MAIN_FUNC DllMain\n+extern \"C\" int __stdcall MAIN_FUNC (void *, unsigned long, void *);\n+#else /* !__CYGWIN__ && !_WIN32 */\n #define MAIN_FUNC main\n extern int MAIN_FUNC (int, char **);\n #endif /* ?__CYGWIN__ */"}, {"sha": "a3ac9d81f4ab0048cd7ea2e8e3ccf9e3fc6a827d", "filename": "libjava/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e16725b8eadd9d3f792321a7fa4a490fce8e6a/libjava%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FMakefile.in?ref=51e16725b8eadd9d3f792321a7fa4a490fce8e6a", "patch": "@@ -165,6 +165,7 @@ LIBGCJ_BC_SPEC = @LIBGCJ_BC_SPEC@\n LIBGCJ_CFLAGS = @LIBGCJ_CFLAGS@\n LIBGCJ_CXXFLAGS = @LIBGCJ_CXXFLAGS@\n LIBGCJ_JAVAFLAGS = @LIBGCJ_JAVAFLAGS@\n+LIBGCJ_LD_EXPORT_ALL = @LIBGCJ_LD_EXPORT_ALL@\n LIBGCJ_LD_SYMBOLIC = @LIBGCJ_LD_SYMBOLIC@\n LIBGCJ_LD_SYMBOLIC_FUNCTIONS = @LIBGCJ_LD_SYMBOLIC_FUNCTIONS@\n LIBGCJ_SPEC = @LIBGCJ_SPEC@"}]}