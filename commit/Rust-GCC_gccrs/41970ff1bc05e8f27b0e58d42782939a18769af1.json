{"sha": "41970ff1bc05e8f27b0e58d42782939a18769af1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE5NzBmZjFiYzA1ZThmMjdiMGU1OGQ0Mjc4MjkzOWExODc2OWFmMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-08-28T14:51:45Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-08-28T14:51:45Z"}, "message": "cp-tree.h (insert_late_enum_def_into_classtype_sorted_fields): Delete.\n\n\t* cp-tree.h (insert_late_enum_def_into_classtype_sorted_fields):\n\tDelete.\n\t* name-lookup.h (set_class_bindings,\n\tinsert_late_enum_def_bindings): Declare.\n\t* decl.c (finish_enum_value_list): Adjust for\n\tinsert_late_enum_def_bindings name change.\n\t* class.c (finish_struct_1): Call set_class_bindings.\n\t(count_fields, add_fields_to_record_type,\n\tadd_enum_fields_to_record_type, sorted_fields_type_new,\n\tinsert_into_classtype_sorted_fields,\n\tinsert_late_enum_def_into_classtype_sorted_fields): Move to ...\n\t* name-lookup.h (count_fields, add_fields_to_record_type,\n\tadd_enum_fields_to_record_type, sorted_fields_type_new,\n\tset_class_bindings, insert_late_enum_def_bindings): ... here.\n\nFrom-SVN: r251387", "tree": {"sha": "86d76159dc7ea7da90404d0613d08e9d2bcfc6c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d76159dc7ea7da90404d0613d08e9d2bcfc6c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41970ff1bc05e8f27b0e58d42782939a18769af1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41970ff1bc05e8f27b0e58d42782939a18769af1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41970ff1bc05e8f27b0e58d42782939a18769af1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41970ff1bc05e8f27b0e58d42782939a18769af1/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e54c2581c540202cc0d777c4de6185d95e663233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54c2581c540202cc0d777c4de6185d95e663233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e54c2581c540202cc0d777c4de6185d95e663233"}], "stats": {"total": 255, "additions": 131, "deletions": 124}, "files": [{"sha": "16d4635305a623f1fd18fa65c7730f5f8c760754", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41970ff1bc05e8f27b0e58d42782939a18769af1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41970ff1bc05e8f27b0e58d42782939a18769af1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=41970ff1bc05e8f27b0e58d42782939a18769af1", "patch": "@@ -1,6 +1,23 @@\n+2017-08-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (insert_late_enum_def_into_classtype_sorted_fields):\n+\tDelete.\n+\t* name-lookup.h (set_class_bindings,\n+\tinsert_late_enum_def_bindings): Declare.\n+\t* decl.c (finish_enum_value_list): Adjust for\n+\tinsert_late_enum_def_bindings name change.\n+\t* class.c (finish_struct_1): Call set_class_bindings.\n+\t(count_fields, add_fields_to_record_type,\n+\tadd_enum_fields_to_record_type, sorted_fields_type_new,\n+\tinsert_into_classtype_sorted_fields,\n+\tinsert_late_enum_def_into_classtype_sorted_fields): Move to ...\n+\t* name-lookup.h (count_fields, add_fields_to_record_type,\n+\tadd_enum_fields_to_record_type, sorted_fields_type_new,\n+\tset_class_bindings, insert_late_enum_def_bindings): ... here.\n+\n 2017-08-25  Nathan Sidwell  <nathan@acm.org>\n \n-\t* class.c (method_name_cmp, resort_method_name_cmp): Method names\n+\t* class.c (method_name_cmp, resort_method_name_cmp): Methods\n \tcan never be NULL.\n \n \tConversion operators have a special name"}, {"sha": "28cf7dcdb5fc0210e1ccf70e2c6041d5676efe6e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 120, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41970ff1bc05e8f27b0e58d42782939a18769af1/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41970ff1bc05e8f27b0e58d42782939a18769af1/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=41970ff1bc05e8f27b0e58d42782939a18769af1", "patch": "@@ -139,9 +139,6 @@ static tree build_simple_base_path (tree expr, tree binfo);\n static tree build_vtbl_ref_1 (tree, tree);\n static void build_vtbl_initializer (tree, tree, tree, tree, int *,\n \t\t\t\t    vec<constructor_elt, va_gc> **);\n-static int count_fields (tree);\n-static int add_fields_to_record_type (tree, struct sorted_fields_type*, int);\n-static void insert_into_classtype_sorted_fields (tree, tree, int);\n static bool check_bitfield_decl (tree);\n static bool check_field_decl (tree, tree, int *, int *);\n static void check_field_decls (tree, tree *, int *, int *);\n@@ -3378,61 +3375,6 @@ add_implicitly_declared_members (tree t, tree* access_decls,\n     }\n }\n \n-/* Subroutine of insert_into_classtype_sorted_fields.  Recursively\n-   count the number of fields in TYPE, including anonymous union\n-   members.  */\n-\n-static int\n-count_fields (tree fields)\n-{\n-  tree x;\n-  int n_fields = 0;\n-  for (x = fields; x; x = DECL_CHAIN (x))\n-    {\n-      if (DECL_DECLARES_FUNCTION_P (x))\n-\t/* Functions are dealt with separately.  */;\n-      else if (TREE_CODE (x) == FIELD_DECL && ANON_AGGR_TYPE_P (TREE_TYPE (x)))\n-\tn_fields += count_fields (TYPE_FIELDS (TREE_TYPE (x)));\n-      else\n-\tn_fields += 1;\n-    }\n-  return n_fields;\n-}\n-\n-/* Subroutine of insert_into_classtype_sorted_fields.  Recursively add\n-   all the fields in the TREE_LIST FIELDS to the SORTED_FIELDS_TYPE\n-   elts, starting at offset IDX.  */\n-\n-static int\n-add_fields_to_record_type (tree fields, struct sorted_fields_type *field_vec, int idx)\n-{\n-  tree x;\n-  for (x = fields; x; x = DECL_CHAIN (x))\n-    {\n-      if (DECL_DECLARES_FUNCTION_P (x))\n-\t/* Functions are handled separately.  */;\n-      else if (TREE_CODE (x) == FIELD_DECL && ANON_AGGR_TYPE_P (TREE_TYPE (x)))\n-\tidx = add_fields_to_record_type (TYPE_FIELDS (TREE_TYPE (x)), field_vec, idx);\n-      else\n-\tfield_vec->elts[idx++] = x;\n-    }\n-  return idx;\n-}\n-\n-/* Add all of the enum values of ENUMTYPE, to the FIELD_VEC elts,\n-   starting at offset IDX.  */\n-\n-static int\n-add_enum_fields_to_record_type (tree enumtype,\n-\t\t\t\tstruct sorted_fields_type *field_vec,\n-\t\t\t\tint idx)\n-{\n-  tree values;\n-  for (values = TYPE_VALUES (enumtype); values; values = TREE_CHAIN (values))\n-      field_vec->elts[idx++] = TREE_VALUE (values);\n-  return idx;\n-}\n-\n /* FIELD is a bit-field.  We are finishing the processing for its\n    enclosing type.  Issue any appropriate messages and set appropriate\n    flags.  Returns false if an error has been diagnosed.  */\n@@ -6592,21 +6534,6 @@ determine_key_method (tree type)\n   return;\n }\n \n-\n-/* Allocate and return an instance of struct sorted_fields_type with\n-   N fields.  */\n-\n-static struct sorted_fields_type *\n-sorted_fields_type_new (int n)\n-{\n-  struct sorted_fields_type *sft;\n-  sft = (sorted_fields_type *) ggc_internal_alloc (sizeof (sorted_fields_type)\n-\t\t\t\t      + n * sizeof (tree));\n-  sft->len = n;\n-\n-  return sft;\n-}\n-\n /* Helper of find_flexarrays.  Return true when FLD refers to a non-static\n    class data member of non-zero size, otherwise false.  */\n \n@@ -7145,14 +7072,7 @@ finish_struct_1 (tree t)\n \t&& same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (x)), t))\n       SET_DECL_MODE (x, TYPE_MODE (t));\n \n-  /* Done with FIELDS...now decide whether to sort these for\n-     faster lookups later.\n-\n-     We use a small number because most searches fail (succeeding\n-     ultimately as the search bores through the inheritance\n-     hierarchy), and we want this failure to occur quickly.  */\n-\n-  insert_into_classtype_sorted_fields (TYPE_FIELDS (t), t, 8);\n+  set_class_bindings (t, TYPE_FIELDS (t));\n \n   /* Complain if one of the field types requires lower visibility.  */\n   constrain_class_visibility (t);\n@@ -7220,45 +7140,6 @@ finish_struct_1 (tree t)\n     }\n }\n \n-/* Insert FIELDS into T for the sorted case if the FIELDS count is\n-   equal to THRESHOLD or greater than THRESHOLD.  */\n-\n-static void \n-insert_into_classtype_sorted_fields (tree fields, tree t, int threshold)\n-{\n-  int n_fields = count_fields (fields);\n-  if (n_fields >= threshold)\n-    {\n-      struct sorted_fields_type *field_vec = sorted_fields_type_new (n_fields);\n-      add_fields_to_record_type (fields, field_vec, 0);\n-      qsort (field_vec->elts, n_fields, sizeof (tree), field_decl_cmp);\n-      CLASSTYPE_SORTED_FIELDS (t) = field_vec;\n-    }\n-}\n-\n-/* Insert lately defined enum ENUMTYPE into T for the sorted case.  */\n-\n-void\n-insert_late_enum_def_into_classtype_sorted_fields (tree enumtype, tree t)\n-{\n-  struct sorted_fields_type *sorted_fields = CLASSTYPE_SORTED_FIELDS (t);\n-  if (sorted_fields)\n-    {\n-      int i;\n-      int n_fields\n-\t= list_length (TYPE_VALUES (enumtype)) + sorted_fields->len;\n-      struct sorted_fields_type *field_vec = sorted_fields_type_new (n_fields);\n-      \n-      for (i = 0; i < sorted_fields->len; ++i)\n-\tfield_vec->elts[i] = sorted_fields->elts[i];\n-\n-      add_enum_fields_to_record_type (enumtype, field_vec,\n-\t\t\t\t      sorted_fields->len);\n-      qsort (field_vec->elts, n_fields, sizeof (tree), field_decl_cmp);\n-      CLASSTYPE_SORTED_FIELDS (t) = field_vec;\n-    }\n-}\n-\n /* When T was built up, the member declarations were added in reverse\n    order.  Rearrange them to declaration order.  */\n "}, {"sha": "8f882d6eb6c232f6ab4ea00da7280962a702794f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41970ff1bc05e8f27b0e58d42782939a18769af1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41970ff1bc05e8f27b0e58d42782939a18769af1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=41970ff1bc05e8f27b0e58d42782939a18769af1", "patch": "@@ -6023,7 +6023,6 @@ extern tree* decl_cloned_function_p\t\t(const_tree, bool);\n extern void clone_function_decl\t\t\t(tree, bool);\n extern void adjust_clone_args\t\t\t(tree);\n extern void deduce_noexcept_on_destructor       (tree);\n-extern void insert_late_enum_def_into_classtype_sorted_fields (tree, tree);\n extern bool uniquely_derived_from_p             (tree, tree);\n extern bool publicly_uniquely_derived_p         (tree, tree);\n extern tree common_enclosing_class\t\t(tree, tree);"}, {"sha": "73b61b58d998642f22a7b6d8dc271b86cc873a65", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41970ff1bc05e8f27b0e58d42782939a18769af1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41970ff1bc05e8f27b0e58d42782939a18769af1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=41970ff1bc05e8f27b0e58d42782939a18769af1", "patch": "@@ -14316,8 +14316,7 @@ finish_enum_value_list (tree enumtype)\n       && COMPLETE_TYPE_P (current_class_type)\n       && UNSCOPED_ENUM_P (enumtype))\n     {\n-      insert_late_enum_def_into_classtype_sorted_fields (enumtype,\n-\t\t\t\t\t\t\t current_class_type);\n+      insert_late_enum_def_bindings (enumtype, current_class_type);\n       fixup_type_variants (current_class_type);\n     }\n "}, {"sha": "3c4781eef5d80cffb842d5652911194305dc1d79", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41970ff1bc05e8f27b0e58d42782939a18769af1/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41970ff1bc05e8f27b0e58d42782939a18769af1/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=41970ff1bc05e8f27b0e58d42782939a18769af1", "patch": "@@ -1312,6 +1312,115 @@ lookup_fnfields_slot (tree type, tree name)\n   return lookup_fnfields_slot_nolazy (type, name);\n }\n \n+/* Allocate and return an instance of struct sorted_fields_type with\n+   N fields.  */\n+\n+static struct sorted_fields_type *\n+sorted_fields_type_new (int n)\n+{\n+  struct sorted_fields_type *sft;\n+  sft = (sorted_fields_type *) ggc_internal_alloc (sizeof (sorted_fields_type)\n+\t\t\t\t      + n * sizeof (tree));\n+  sft->len = n;\n+\n+  return sft;\n+}\n+\n+/* Subroutine of insert_into_classtype_sorted_fields.  Recursively\n+   count the number of fields in TYPE, including anonymous union\n+   members.  */\n+\n+static int\n+count_fields (tree fields)\n+{\n+  tree x;\n+  int n_fields = 0;\n+  for (x = fields; x; x = DECL_CHAIN (x))\n+    {\n+      if (DECL_DECLARES_FUNCTION_P (x))\n+\t/* Functions are dealt with separately.  */;\n+      else if (TREE_CODE (x) == FIELD_DECL && ANON_AGGR_TYPE_P (TREE_TYPE (x)))\n+\tn_fields += count_fields (TYPE_FIELDS (TREE_TYPE (x)));\n+      else\n+\tn_fields += 1;\n+    }\n+  return n_fields;\n+}\n+\n+/* Subroutine of insert_into_classtype_sorted_fields.  Recursively add\n+   all the fields in the TREE_LIST FIELDS to the SORTED_FIELDS_TYPE\n+   elts, starting at offset IDX.  */\n+\n+static int\n+add_fields_to_record_type (tree fields, struct sorted_fields_type *field_vec,\n+\t\t\t   int idx)\n+{\n+  tree x;\n+  for (x = fields; x; x = DECL_CHAIN (x))\n+    {\n+      if (DECL_DECLARES_FUNCTION_P (x))\n+\t/* Functions are handled separately.  */;\n+      else if (TREE_CODE (x) == FIELD_DECL && ANON_AGGR_TYPE_P (TREE_TYPE (x)))\n+\tidx = add_fields_to_record_type (TYPE_FIELDS (TREE_TYPE (x)), field_vec, idx);\n+      else\n+\tfield_vec->elts[idx++] = x;\n+    }\n+  return idx;\n+}\n+\n+/* Add all of the enum values of ENUMTYPE, to the FIELD_VEC elts,\n+   starting at offset IDX.  */\n+\n+static int\n+add_enum_fields_to_record_type (tree enumtype,\n+\t\t\t\tstruct sorted_fields_type *field_vec,\n+\t\t\t\tint idx)\n+{\n+  tree values;\n+  for (values = TYPE_VALUES (enumtype); values; values = TREE_CHAIN (values))\n+      field_vec->elts[idx++] = TREE_VALUE (values);\n+  return idx;\n+}\n+\n+/* Insert FIELDS into T for the sorted case if the FIELDS count is\n+   equal to THRESHOLD or greater than THRESHOLD.  */\n+\n+void \n+set_class_bindings (tree klass, tree fields)\n+{\n+  int n_fields = count_fields (fields);\n+  if (n_fields >= 8)\n+    {\n+      struct sorted_fields_type *field_vec = sorted_fields_type_new (n_fields);\n+      add_fields_to_record_type (fields, field_vec, 0);\n+      qsort (field_vec->elts, n_fields, sizeof (tree), field_decl_cmp);\n+      CLASSTYPE_SORTED_FIELDS (klass) = field_vec;\n+    }\n+}\n+\n+/* Insert lately defined enum ENUMTYPE into T for the sorted case.  */\n+\n+void\n+insert_late_enum_def_bindings (tree enumtype, tree t)\n+{\n+  struct sorted_fields_type *sorted_fields = CLASSTYPE_SORTED_FIELDS (t);\n+  if (sorted_fields)\n+    {\n+      int i;\n+      int n_fields\n+\t= list_length (TYPE_VALUES (enumtype)) + sorted_fields->len;\n+      struct sorted_fields_type *field_vec = sorted_fields_type_new (n_fields);\n+      \n+      for (i = 0; i < sorted_fields->len; ++i)\n+\tfield_vec->elts[i] = sorted_fields->elts[i];\n+\n+      add_enum_fields_to_record_type (enumtype, field_vec,\n+\t\t\t\t      sorted_fields->len);\n+      qsort (field_vec->elts, n_fields, sizeof (tree), field_decl_cmp);\n+      CLASSTYPE_SORTED_FIELDS (t) = field_vec;\n+    }\n+}\n+\n /* Compute the chain index of a binding_entry given the HASH value of its\n    name and the total COUNT of chains.  COUNT is assumed to be a power\n    of 2.  */"}, {"sha": "a6bbd4af5f5ac0baba4a46b51a92cb863d7edcea", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41970ff1bc05e8f27b0e58d42782939a18769af1/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41970ff1bc05e8f27b0e58d42782939a18769af1/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=41970ff1bc05e8f27b0e58d42782939a18769af1", "patch": "@@ -322,6 +322,8 @@ extern tree lookup_arg_dependent (tree, tree, vec<tree, va_gc> *);\n extern tree lookup_field_1\t\t\t(tree, tree, bool);\n extern tree lookup_fnfields_slot\t\t(tree, tree);\n extern tree lookup_fnfields_slot_nolazy\t\t(tree, tree);\n+extern void set_class_bindings (tree, tree);\n+extern void insert_late_enum_def_bindings (tree, tree);\n extern tree innermost_non_namespace_value (tree);\n extern cxx_binding *outer_binding (tree, cxx_binding *, bool);\n extern void cp_emit_debug_info_for_using (tree, tree);"}]}