{"sha": "d8bc9819d9ca357fe35784180985c43643b9f7eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhiYzk4MTlkOWNhMzU3ZmUzNTc4NDE4MDk4NWM0MzY0M2I5ZjdlYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-06-09T23:37:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-06-09T23:37:28Z"}, "message": "acinclude.m4 ([GLIBCXX_CHECK_RANDOM_TR1]): New, check for the availability of \"/dev/random\" and \"/dev/urandom\".\n\n2006-06-09  Paolo Carlini  <pcarlini@suse.de>\n\n\t* acinclude.m4 ([GLIBCXX_CHECK_RANDOM_TR1]): New, check for\n\tthe availability of \"/dev/random\" and \"/dev/urandom\".\n\t* configure.ac: Use it.\n\t* include/tr1/random (random_device): Implement, a fall-back for\n\tsystems not providing \"/dev/random\" and \"/dev/urandom\" included.\n\t* testsuite/tr1/5_numerical_facilities/random/random_device/\n\tcons/default.cc: New.\n\t* testsuite/tr1/5_numerical_facilities/random/random_device/\n\tcons/token.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/random_device/\n\trequirements/typedefs.cc: Likewise.\n\t* config.h.in: Regenerate.\n\t* configure: Likewise.\n\n\t* testsuite/tr1/5_numerical_facilities/random/mersenne_twister/\n\tcons/gen1.cc: Minor tweak, add bool test.\n\nFrom-SVN: r114529", "tree": {"sha": "b0b35b54857630cba67404df1c6d5bb2c1d445fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0b35b54857630cba67404df1c6d5bb2c1d445fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8bc9819d9ca357fe35784180985c43643b9f7eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8bc9819d9ca357fe35784180985c43643b9f7eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8bc9819d9ca357fe35784180985c43643b9f7eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8bc9819d9ca357fe35784180985c43643b9f7eb/comments", "author": null, "committer": null, "parents": [{"sha": "1a492601a1e4a1e5e16a2de9c10065ce062394e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a492601a1e4a1e5e16a2de9c10065ce062394e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a492601a1e4a1e5e16a2de9c10065ce062394e4"}], "stats": {"total": 310, "additions": 300, "deletions": 10}, "files": [{"sha": "a2b158edb8f7fb5b21e289832eb659015b60a23a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d8bc9819d9ca357fe35784180985c43643b9f7eb", "patch": "@@ -1,3 +1,22 @@\n+2006-06-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* acinclude.m4 ([GLIBCXX_CHECK_RANDOM_TR1]): New, check for\n+\tthe availability of \"/dev/random\" and \"/dev/urandom\".\n+\t* configure.ac: Use it.\n+\t* include/tr1/random (random_device): Implement, a fall-back for\n+\tsystems not providing \"/dev/random\" and \"/dev/urandom\" included.\n+\t* testsuite/tr1/5_numerical_facilities/random/random_device/\n+\tcons/default.cc: New.\n+\t* testsuite/tr1/5_numerical_facilities/random/random_device/\n+\tcons/token.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/random_device/\n+\trequirements/typedefs.cc: Likewise.\n+\t* config.h.in: Regenerate.\n+\t* configure: Likewise.\n+\n+\t* testsuite/tr1/5_numerical_facilities/random/mersenne_twister/\n+\tcons/gen1.cc: Minor tweak, add bool test.\n+\n 2006-06-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/util: New directory."}, {"sha": "f58a84fc05a6e2ea1d946d7087d1b5bd3ea86ee8", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=d8bc9819d9ca357fe35784180985c43643b9f7eb", "patch": "@@ -1268,6 +1268,32 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n   AC_LANG_RESTORE\n ])\n \n+dnl\n+dnl Check whether \"dev/random\" and \"dev/urandom\" are available for the\n+dnl random_device of \"TR1\" (Chapter 5.1, \"Random number generation\").\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_RANDOM_TR1], [\n+\n+  AC_MSG_CHECKING([for \"dev/random\" and \"dev/urandom\" for TR1 random_device])\n+  AC_CACHE_VAL(ac_random_tr1, [\n+  AC_TRY_RUN([#include <stdio.h>\n+\t      int main()\n+\t      {\n+                return !(fopen(\"/dev/random\", \"r\")\n+                         && fopen(\"/dev/urandom\", \"r\"));\n+\t      }\t      \n+\t     ],\n+             [ac_random_tr1=yes], [ac_random_tr1=no],\n+\t     [ac_random_tr1=no])\n+  ])\n+  AC_MSG_RESULT($ac_random_tr1)\n+  if test x\"$ac_random_tr1\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_RANDOM_TR1, 1,\n+              [Define if dev/random and dev/urandom are available for\n+\t       the random_device of TR1 (Chapter 5.1).])\n+  fi\n+\n+])\n \n dnl\n dnl Check for what type of C headers to use."}, {"sha": "ba53014434dd65d844a52c15515a9629dd969b7f", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=d8bc9819d9ca357fe35784180985c43643b9f7eb", "patch": "@@ -744,6 +744,10 @@\n /* Define if NLS translations are to be used. */\n #undef _GLIBCXX_USE_NLS\n \n+/* Define if dev/random and dev/urandom are available for the random_device of\n+   TR1 (Chapter 5.1). */\n+#undef _GLIBCXX_USE_RANDOM_TR1\n+\n /* Define if code specialized for wchar_t should be used. */\n #undef _GLIBCXX_USE_WCHAR_T\n "}, {"sha": "1c2698d35242a08e845341c738e417bc73f1c6ae", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=d8bc9819d9ca357fe35784180985c43643b9f7eb", "patch": "@@ -31113,6 +31113,69 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+  # For dev/random and dev/urandom for TR1.\n+\n+\n+  echo \"$as_me:$LINENO: checking for \\\"dev/random\\\" and \\\"dev/urandom\\\" for TR1 random_device\" >&5\n+echo $ECHO_N \"checking for \\\"dev/random\\\" and \\\"dev/urandom\\\" for TR1 random_device... $ECHO_C\" >&6\n+  if test \"${ac_random_tr1+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  if test \"$cross_compiling\" = yes; then\n+  ac_random_tr1=no\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <stdio.h>\n+\t      int main()\n+\t      {\n+                return !(fopen(\"/dev/random\", \"r\")\n+                         && fopen(\"/dev/urandom\", \"r\"));\n+\t      }\n+\n+_ACEOF\n+rm -f conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_random_tr1=yes\n+else\n+  echo \"$as_me: program exited with status $ac_status\" >&5\n+echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+( exit $ac_status )\n+ac_random_tr1=no\n+fi\n+rm -f core *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_random_tr1\" >&5\n+echo \"${ECHO_T}$ac_random_tr1\" >&6\n+  if test x\"$ac_random_tr1\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_RANDOM_TR1 1\n+_ACEOF\n+\n+  fi\n+\n+\n+\n   # For TLS support.\n \n    # Check whether --enable-tls or --disable-tls was given."}, {"sha": "88018c3d57b57f3c54e0ff5d337da4f66db86966", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=d8bc9819d9ca357fe35784180985c43643b9f7eb", "patch": "@@ -160,6 +160,9 @@ if $GLIBCXX_IS_NATIVE; then\n   # For C99 support to TR1.\n   GLIBCXX_CHECK_C99_TR1\n \n+  # For dev/random and dev/urandom for TR1.\n+  GLIBCXX_CHECK_RANDOM_TR1\n+\n   # For TLS support.\n   GCC_CHECK_TLS\n "}, {"sha": "4a797c11629045ccf4130221fcffe9927751b1e6", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 61, "deletions": 9, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=d8bc9819d9ca357fe35784180985c43643b9f7eb", "patch": "@@ -44,6 +44,8 @@\n #include <iosfwd>\n #include <limits>\n #include <tr1/type_traits>\n+#include <sstream>\n+#include <fstream>\n \n namespace std\n {\n@@ -1157,10 +1159,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   /**\n    * A standard interface to a platform-specific non-deterministic random number\n    * generator (if any are available).\n-   *\n-   * @todo The underlying interface is system-specific and needs to be factored\n-   * into the generated configury mechs.  For example, the use of \"/dev/random\"\n-   * under a Linux OS would be appropriate.\n    */\n   class random_device\n   {\n@@ -1169,15 +1167,69 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     typedef unsigned int result_type;\n     \n     // constructors, destructors and member functions\n-    explicit random_device(const std::string& __token = \"unimplemented\");\n-    result_type min() const;\n-    result_type max() const;\n-    double entropy() const;\n-    result_type operator()();\n+\n+#ifdef _GLIBCXX_USE_RANDOM_TR1\n+    explicit\n+    random_device(const std::string& __token = \"/dev/urandom\")\n+    {\n+      if ((__token != \"/dev/urandom\" && __token != \"/dev/random\")\n+\t  || !_M_filebuf.open(__token.c_str(), std::ios_base::in))\n+\tstd::__throw_runtime_error(__N(\"random_device::\"\n+\t\t\t\t       \"random_device(const std::string&)\"));\n+    }\n+\n+    ~random_device()\n+    { _M_filebuf.close(); }\n+\n+#else\n+    explicit\n+    random_device(const std::string& __token = \"rand\")\n+    {\n+      if (__token != \"rand\")\n+\t{\n+\t  std::stringstream __ss(__token);\n+\t  unsigned int __seed;\n+\t  __ss >> __seed;\n+\t  if (__ss.fail())\n+\t    std::__throw_runtime_error(__N(\"random_device::random_device\"\n+\t\t\t\t\t   \"(const std::string&)\"));\n+\t  else\n+\t    std::srand(__seed);\n+\t}\n+    }\n+#endif\n+\n+    result_type\n+    min() const\n+    { return std::numeric_limits<result_type>::min(); }\n+\n+    result_type\n+    max() const\n+    { return std::numeric_limits<result_type>::max(); }\n+\n+    double\n+    entropy() const\n+    { return 0.0; }\n+\n+    result_type\n+    operator()()\n+    {\n+#ifdef _GLIBCXX_USE_RANDOM_TR1\n+      result_type __ret;\n+      _M_filebuf.sgetn(reinterpret_cast<char*>(&__ret), sizeof(result_type));\n+      return __ret;\n+#else\n+      return max() * (std::rand() / double(RAND_MAX));\n+#endif\n+    }\n \n   private:\n     random_device(const random_device&);\n     void operator=(const random_device&);\n+\n+#ifdef _GLIBCXX_USE_RANDOM_TR1\n+    std::filebuf _M_filebuf;\n+#endif    \n   };\n \n   /* @} */ // group tr1_random_generators"}, {"sha": "7861954a13ffa092e856e18c80b05cfaea579260", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/mersenne_twister/cons/gen1.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fgen1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fgen1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fgen1.cc?ref=d8bc9819d9ca357fe35784180985c43643b9f7eb", "patch": "@@ -34,7 +34,8 @@ gen()\n \n void\n test01() \n-{ \n+{\n+  bool test __attribute__((unused)) = true;\n   using namespace std::tr1;\n \n   mersenne_twister<"}, {"sha": "5150c5e494f1303969fbd35fa158b0c91c4f4ab4", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/random_device/cons/default.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Fcons%2Fdefault.cc?ref=d8bc9819d9ca357fe35784180985c43643b9f7eb", "patch": "@@ -0,0 +1,43 @@\n+// 2006-06-09  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.6 class random_device [tr.rand.device]\n+// 5.1.1 Table 15 default ctor\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using namespace std::tr1;\n+  random_device x;\n+  \n+  VERIFY( x.min() == std::numeric_limits<random_device::result_type>::min() );\n+  VERIFY( x.max() == std::numeric_limits<random_device::result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9a6686bbedc8d19c9052aeb4e90c4f77b9f5bb14", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/random_device/cons/token.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc?ref=d8bc9819d9ca357fe35784180985c43643b9f7eb", "patch": "@@ -0,0 +1,47 @@\n+// 2006-06-09  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.6 class random_device [tr.rand.device]\n+// 5.1.6, p3\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+#ifdef _GLIBCXX_USE_RANDOM_TR1\n+  random_device x(\"/dev/random\");\n+#else\n+  random_device x(\"0\");\n+#endif\n+\n+  VERIFY( x.min() == std::numeric_limits<random_device::result_type>::min() );\n+  VERIFY( x.max() == std::numeric_limits<random_device::result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "28363cbcdc45442442bca527e929e2e9d10631fb", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/random_device/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bc9819d9ca357fe35784180985c43643b9f7eb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Frequirements%2Ftypedefs.cc?ref=d8bc9819d9ca357fe35784180985c43643b9f7eb", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+//\n+// 2006-06-09  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.6 class random_device [tr.rand.device]\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  typedef std::tr1::random_device test_type;\n+  typedef test_type::result_type result_type;\n+}"}]}