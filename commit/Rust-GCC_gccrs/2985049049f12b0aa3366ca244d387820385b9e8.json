{"sha": "2985049049f12b0aa3366ca244d387820385b9e8", "node_id": "C_kwDOANBUbNoAKDI5ODUwNDkwNDlmMTJiMGFhMzM2NmNhMjQ0ZDM4NzgyMDM4NWI5ZTg", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-09-01T02:14:36Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-09-01T02:15:59Z"}, "message": "rs6000: Don't ICE when we disassemble an MMA variable [PR101322]\n\nWhen we expand an MMA disassemble built-in with C++ using a pointer that\nis cast to a valid MMA type, the type isn't passed down to the expand\nmachinery and we end up using the base type of the pointer which leads to\nan ICE.  This patch enforces we always use the correct MMA type regardless\nof the pointer type being used.\n\n2022-08-31  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/101322\n\t* config/rs6000/rs6000-builtin.cc (rs6000_gimple_fold_mma_builtin):\n\tEnforce the use of a valid MMA pointer type.\n\ngcc/testsuite/\n\tPR target/101322\n\t* g++.target/powerpc/pr101322.C: New test.", "tree": {"sha": "353205dd0fa6f0f681b5e849111c99b451789de4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/353205dd0fa6f0f681b5e849111c99b451789de4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2985049049f12b0aa3366ca244d387820385b9e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2985049049f12b0aa3366ca244d387820385b9e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2985049049f12b0aa3366ca244d387820385b9e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2985049049f12b0aa3366ca244d387820385b9e8/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8c83ab9d5142a305bbd75c7ff0e41eae38433df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c83ab9d5142a305bbd75c7ff0e41eae38433df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8c83ab9d5142a305bbd75c7ff0e41eae38433df"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "e6948b9abb7dcfaaac44af44d62310ef9ae9edd5", "filename": "gcc/config/rs6000/rs6000-builtin.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2985049049f12b0aa3366ca244d387820385b9e8/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2985049049f12b0aa3366ca244d387820385b9e8/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc?ref=2985049049f12b0aa3366ca244d387820385b9e8", "patch": "@@ -1085,7 +1085,12 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi,\n       unsigned nvec = (fncode == RS6000_BIF_DISASSEMBLE_ACC) ? 4 : 2;\n       tree dst_ptr = gimple_call_arg (stmt, 0);\n       tree src_ptr = gimple_call_arg (stmt, 1);\n-      tree src_type = TREE_TYPE (src_ptr);\n+      tree src_type = (fncode == RS6000_BIF_DISASSEMBLE_ACC)\n+\t\t      ? build_pointer_type (vector_quad_type_node)\n+\t\t      : build_pointer_type (vector_pair_type_node);\n+      if (TREE_TYPE (src_ptr) != src_type)\n+\tsrc_ptr = build1 (NOP_EXPR, src_type, src_ptr);\n+\n       tree src = create_tmp_reg_or_ssa_name (TREE_TYPE (src_type));\n       gimplify_assign (src, build_simple_mem_ref (src_ptr), &new_seq);\n "}, {"sha": "43eaf3afcd4b96731727eb2eca817d5e82bfb41b", "filename": "gcc/testsuite/g++.target/powerpc/pr101322.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2985049049f12b0aa3366ca244d387820385b9e8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr101322.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2985049049f12b0aa3366ca244d387820385b9e8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr101322.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr101322.C?ref=2985049049f12b0aa3366ca244d387820385b9e8", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/101322 */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Verify we don't ICE on the following test cases.  */\n+\n+void\n+foo (char *resp, char *vpp)\n+{\n+  __builtin_vsx_disassemble_pair (resp, (__vector_pair *) vpp);\n+}\n+\n+void\n+bar (char *resp, char *vpp)\n+{\n+  __builtin_mma_disassemble_acc (resp, (__vector_quad *)vpp);\n+}"}]}