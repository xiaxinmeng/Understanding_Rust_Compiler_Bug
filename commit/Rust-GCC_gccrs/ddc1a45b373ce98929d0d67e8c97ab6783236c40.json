{"sha": "ddc1a45b373ce98929d0d67e8c97ab6783236c40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRjMWE0NWIzNzNjZTk4OTI5ZDBkNjdlOGM5N2FiNjc4MzIzNmM0MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-09-16T04:34:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-09-16T04:34:28Z"}, "message": "PR c++/30277 - int-width bit-field promotion.\n\nHere, if cp_perform_integral_promotions saw that the TREE_TYPE of a\nbit-field reference was the same as the type it promotes to, it didn't do\nanything.  But then decay_conversion saw that the bit-field reference was\nunchanged, and converted it to its declared type.  So I needed to add\nsomething to make it clear that promotion has been done.  But then the 33819\nchange caused trouble by looking through the NOP_EXPR I just added.  This\nwas the wrong fix for that bug; I've now fixed that better by recognizing in\ncp_perform_integral_promotions that we won't promote a bit-field larger than\n32 bits, so we should use the declared type.\n\n\tPR c++/33819 - long bit-field promotion.\n\t* typeck.c (cp_perform_integral_promotions): Handle large bit-fields\n\tproperly.  Handle 32-bit non-int bit-fields properly.\n\t(is_bitfield_expr_with_lowered_type): Don't look through NOP_EXPR.\n\nFrom-SVN: r275746", "tree": {"sha": "b9bb7f45f7ac6bf4b3c98acb45531feae12abf9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9bb7f45f7ac6bf4b3c98acb45531feae12abf9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddc1a45b373ce98929d0d67e8c97ab6783236c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc1a45b373ce98929d0d67e8c97ab6783236c40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc1a45b373ce98929d0d67e8c97ab6783236c40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc1a45b373ce98929d0d67e8c97ab6783236c40/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47518e131f299f69d0c14f7e5efe83609185ed9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47518e131f299f69d0c14f7e5efe83609185ed9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47518e131f299f69d0c14f7e5efe83609185ed9f"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "7bf28f81faea86ca8892d4bc355c810657495de2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc1a45b373ce98929d0d67e8c97ab6783236c40/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc1a45b373ce98929d0d67e8c97ab6783236c40/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ddc1a45b373ce98929d0d67e8c97ab6783236c40", "patch": "@@ -1,5 +1,11 @@\n 2019-09-15  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/30277 - int-width bit-field promotion.\n+\tPR c++/33819 - long bit-field promotion.\n+\t* typeck.c (cp_perform_integral_promotions): Handle large bit-fields\n+\tproperly.  Handle 32-bit non-int bit-fields properly.\n+\t(is_bitfield_expr_with_lowered_type): Don't look through NOP_EXPR.\n+\n \tPR c++/82165 - enum bitfields and operator overloading.\n \t* call.c (build_new_op_1): Use unlowered_expr_type.\n "}, {"sha": "c6bf41ee7a4e8f06b8d55161d2e509fd9c3b406e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc1a45b373ce98929d0d67e8c97ab6783236c40/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc1a45b373ce98929d0d67e8c97ab6783236c40/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ddc1a45b373ce98929d0d67e8c97ab6783236c40", "patch": "@@ -1971,12 +1971,6 @@ is_bitfield_expr_with_lowered_type (const_tree exp)\n       else\n \treturn NULL_TREE;\n \n-    CASE_CONVERT:\n-      if (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (exp, 0)))\n-\t  == TYPE_MAIN_VARIANT (TREE_TYPE (exp)))\n-\treturn is_bitfield_expr_with_lowered_type (TREE_OPERAND (exp, 0));\n-      /* Fallthrough.  */\n-\n     default:\n       return NULL_TREE;\n     }\n@@ -2189,20 +2183,33 @@ cp_perform_integral_promotions (tree expr, tsubst_flags_t complain)\n   if (error_operand_p (expr))\n     return error_mark_node;\n \n+  type = TREE_TYPE (expr);\n+\n   /* [conv.prom]\n \n-     If the bitfield has an enumerated type, it is treated as any\n-     other value of that type for promotion purposes.  */\n-  type = is_bitfield_expr_with_lowered_type (expr);\n-  if (!type || TREE_CODE (type) != ENUMERAL_TYPE)\n-    type = TREE_TYPE (expr);\n+     A prvalue for an integral bit-field (11.3.9) can be converted to a prvalue\n+     of type int if int can represent all the values of the bit-field;\n+     otherwise, it can be converted to unsigned int if unsigned int can\n+     represent all the values of the bit-field. If the bit-field is larger yet,\n+     no integral promotion applies to it. If the bit-field has an enumerated\n+     type, it is treated as any other value of that type for promotion\n+     purposes.  */\n+  tree bitfield_type = is_bitfield_expr_with_lowered_type (expr);\n+  if (bitfield_type\n+      && (TREE_CODE (bitfield_type) == ENUMERAL_TYPE\n+\t  || TYPE_PRECISION (type) > TYPE_PRECISION (integer_type_node)))\n+    type = bitfield_type;\n+\n   gcc_assert (INTEGRAL_OR_ENUMERATION_TYPE_P (type));\n   /* Scoped enums don't promote.  */\n   if (SCOPED_ENUM_P (type))\n     return expr;\n   promoted_type = type_promotes_to (type);\n   if (type != promoted_type)\n     expr = cp_convert (promoted_type, expr, complain);\n+  else if (bitfield_type && bitfield_type != type)\n+    /* Prevent decay_conversion from converting to bitfield_type.  */\n+    expr = build_nop (type, expr);\n   return expr;\n }\n "}, {"sha": "546af85ba1082e9ba3a5df5c218d7f21e73408b6", "filename": "gcc/testsuite/g++.dg/expr/bitfield14.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc1a45b373ce98929d0d67e8c97ab6783236c40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc1a45b373ce98929d0d67e8c97ab6783236c40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield14.C?ref=ddc1a45b373ce98929d0d67e8c97ab6783236c40", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/30277\n+// { dg-do compile { target c++11 } }\n+\n+struct S\n+{\n+  signed long l: 32;\n+};\n+\n+void foo(long) = delete;\n+void foo(int) {}\n+\n+int main()\n+{\n+  S x = {1};\n+  foo(x.l+0);\n+  return 0;\n+}"}]}