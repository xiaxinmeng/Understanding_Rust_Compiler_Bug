{"sha": "8dc421e03520f7b1d2ccd73648985c83998604bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRjNDIxZTAzNTIwZjdiMWQyY2NkNzM2NDg5ODVjODM5OTg2MDRiYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-04-13T23:21:21Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-13T23:21:21Z"}, "message": "Use backend interface for go and defer statements.\n\nChange defer stack from tree to Expression.\n\nFrom-SVN: r172402", "tree": {"sha": "12891b40b73b55524a731253846a51b5cd780fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12891b40b73b55524a731253846a51b5cd780fff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dc421e03520f7b1d2ccd73648985c83998604bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc421e03520f7b1d2ccd73648985c83998604bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc421e03520f7b1d2ccd73648985c83998604bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc421e03520f7b1d2ccd73648985c83998604bc/comments", "author": null, "committer": null, "parents": [{"sha": "123c516a9ee069efe6783682ff0bfbf28ec94919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/123c516a9ee069efe6783682ff0bfbf28ec94919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/123c516a9ee069efe6783682ff0bfbf28ec94919"}], "stats": {"total": 263, "additions": 133, "deletions": 130}, "files": [{"sha": "002c9e36c0e15d9085e2ec1229d3646b5542702c", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=8dc421e03520f7b1d2ccd73648985c83998604bc", "patch": "@@ -1,3 +1,7 @@\n+2011-04-13  Ian Lance Taylor  <iant@google.com>\n+\n+\t* Make-lang.in (go/gogo-tree.o): depend on $(GO_RUNTIME_H).\n+\n 2011-04-13  Ian Lance Taylor  <iant@google.com>\n \n \t* Make-lang.in (GO_OBJS): Add go/runtime.o."}, {"sha": "c20cebdec4ebd9f19beed01a233010d55ee942b8", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=8dc421e03520f7b1d2ccd73648985c83998604bc", "patch": "@@ -262,7 +262,7 @@ go/go-dump.o: go/gofrontend/go-dump.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n go/gogo-tree.o: go/gofrontend/gogo-tree.cc $(GO_SYSTEM_H) $(TOPLEV_H) \\\n \t$(TREE_H) $(GIMPLE_H) tree-iterator.h $(CGRAPH_H) langhooks.h \\\n \tconvert.h output.h $(DIAGNOSTIC_H) $(GO_TYPES_H) \\\n-\t$(GO_EXPRESSIONS_H) $(GO_STATEMENTS_H) $(GO_GOGO_H)\n+\t$(GO_EXPRESSIONS_H) $(GO_STATEMENTS_H) $(GO_RUNTIME_H) $(GO_GOGO_H)\n go/gogo.o: go/gofrontend/gogo.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n \tgo/gofrontend/go-dump.h $(GO_LEX_H) $(GO_TYPES_H) $(GO_STATEMENTS_H) \\\n \t$(GO_EXPRESSIONS_H) go/gofrontend/dataflow.h $(GO_RUNTIME_H) \\"}, {"sha": "1cf36dd731eebd25d3735ac0df15dd59165ce06e", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 31, "deletions": 54, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=8dc421e03520f7b1d2ccd73648985c83998604bc", "patch": "@@ -31,6 +31,7 @@ extern \"C\"\n #include \"types.h\"\n #include \"expressions.h\"\n #include \"statements.h\"\n+#include \"runtime.h\"\n #include \"gogo.h\"\n \n // Whether we have seen any errors.\n@@ -1585,13 +1586,22 @@ Function::build_tree(Gogo* gogo, Named_object* named_function)\n \n       // Declare variables if necessary.\n       tree bind = NULL_TREE;\n-      if (declare_vars != NULL_TREE)\n+      tree defer_init = NULL_TREE;\n+      if (declare_vars != NULL_TREE || this->defer_stack_ != NULL)\n \t{\n \t  tree block = make_node(BLOCK);\n \t  BLOCK_SUPERCONTEXT(block) = fndecl;\n \t  DECL_INITIAL(fndecl) = block;\n \t  BLOCK_VARS(block) = declare_vars;\n \t  TREE_USED(block) = 1;\n+\n+\t  if (this->defer_stack_ != NULL)\n+\t    {\n+\t      Translate_context dcontext(gogo, named_function, this->block_,\n+\t\t\t\t\t block);\n+\t      defer_init = this->defer_stack_->get_tree(&dcontext);\n+\t    }\n+\n \t  bind = build3(BIND_EXPR, void_type_node, BLOCK_VARS(block),\n \t\t\tNULL_TREE, block);\n \t  TREE_SIDE_EFFECTS(bind) = 1;\n@@ -1615,10 +1625,8 @@ Function::build_tree(Gogo* gogo, Named_object* named_function)\n \n       // If we have a defer stack, initialize it at the start of a\n       // function.\n-      if (this->defer_stack_ != NULL_TREE)\n+      if (defer_init != NULL_TREE && defer_init != error_mark_node)\n \t{\n-\t  tree defer_init = build1(DECL_EXPR, void_type_node,\n-\t\t\t\t   this->defer_stack_);\n \t  SET_EXPR_LOCATION(defer_init, this->block_->start_location());\n \t  append_to_statement_list(defer_init, &init);\n \n@@ -1663,17 +1671,15 @@ Function::build_defer_wrapper(Gogo* gogo, Named_object* named_function,\n   // purpose is to stop the stack unwinding if a deferred function\n   // calls recover.  There are more details in\n   // libgo/runtime/go-unwind.c.\n+\n   tree stmt_list = NULL_TREE;\n-  static tree check_fndecl;\n-  tree call = Gogo::call_builtin(&check_fndecl,\n-\t\t\t\t end_loc,\n-\t\t\t\t \"__go_check_defer\",\n-\t\t\t\t 1,\n-\t\t\t\t void_type_node,\n-\t\t\t\t ptr_type_node,\n-\t\t\t\t this->defer_stack(end_loc));\n-  if (call != error_mark_node)\n-    append_to_statement_list(call, &stmt_list);\n+\n+  Expression* call = Runtime::make_call(Runtime::CHECK_DEFER, end_loc, 1,\n+\t\t\t\t\tthis->defer_stack(end_loc));\n+  Translate_context context(gogo, named_function, NULL, NULL);\n+  tree call_tree = call->get_tree(&context);\n+  if (call_tree != error_mark_node)\n+    append_to_statement_list(call_tree, &stmt_list);\n \n   tree retval = this->return_value(gogo, named_function, end_loc, &stmt_list);\n   tree set;\n@@ -1704,24 +1710,17 @@ Function::build_defer_wrapper(Gogo* gogo, Named_object* named_function,\n \t\t\t\t      label);\n   append_to_statement_list(define_label, &stmt_list);\n \n-  static tree undefer_fndecl;\n-  tree undefer = Gogo::call_builtin(&undefer_fndecl,\n-\t\t\t\t    end_loc,\n-\t\t\t\t    \"__go_undefer\",\n-\t\t\t\t    1,\n-\t\t\t\t    void_type_node,\n-\t\t\t\t    ptr_type_node,\n-\t\t\t\t    this->defer_stack(end_loc));\n-  if (undefer_fndecl != NULL_TREE)\n-    TREE_NOTHROW(undefer_fndecl) = 0;\n-\n-  tree defer = Gogo::call_builtin(&check_fndecl,\n-\t\t\t\t  end_loc,\n-\t\t\t\t  \"__go_check_defer\",\n-\t\t\t\t  1,\n-\t\t\t\t  void_type_node,\n-\t\t\t\t  ptr_type_node,\n-\t\t\t\t  this->defer_stack(end_loc));\n+  call = Runtime::make_call(Runtime::UNDEFER, end_loc, 1,\n+\t\t\t    this->defer_stack(end_loc));\n+  tree undefer = call->get_tree(&context);\n+\n+  call = Runtime::make_call(Runtime::CHECK_DEFER, end_loc, 1,\n+\t\t\t    this->defer_stack(end_loc));\n+  tree defer = call->get_tree(&context);\n+\n+  if (undefer == error_mark_node || defer == error_mark_node)\n+    return;\n+\n   tree jump = fold_build1_loc(end_loc, GOTO_EXPR, void_type_node, label);\n   tree catch_body = build2(COMPOUND_EXPR, void_type_node, defer, jump);\n   catch_body = build2(CATCH_EXPR, void_type_node, NULL, catch_body);\n@@ -1794,28 +1793,6 @@ Function::return_value(Gogo* gogo, Named_object* named_function,\n     }\n }\n \n-// Get the tree for the variable holding the defer stack for this\n-// function.  At least at present, the value of this variable is not\n-// used.  However, a pointer to this variable is used as a marker for\n-// the functions on the defer stack associated with this function.\n-// Doing things this way permits inlining a function which uses defer.\n-\n-tree\n-Function::defer_stack(source_location location)\n-{\n-  if (this->defer_stack_ == NULL_TREE)\n-    {\n-      tree var = create_tmp_var(ptr_type_node, \"DEFER\");\n-      DECL_INITIAL(var) = null_pointer_node;\n-      DECL_SOURCE_LOCATION(var) = location;\n-      TREE_ADDRESSABLE(var) = 1;\n-      this->defer_stack_ = var;\n-    }\n-  return fold_convert_loc(location, ptr_type_node,\n-\t\t\t  build_fold_addr_expr_loc(location,\n-\t\t\t\t\t\t   this->defer_stack_));\n-}\n-\n // Get a tree for the statements in a block.\n \n tree"}, {"sha": "91a7526aecef8741a08bdf4d243232482792655b", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=8dc421e03520f7b1d2ccd73648985c83998604bc", "patch": "@@ -2884,6 +2884,29 @@ Function::determine_types()\n     this->block_->determine_types();\n }\n \n+// Get a pointer to the variable holding the defer stack for this\n+// function, making it if necessary.  At least at present, the value\n+// of this variable is not used.  However, a pointer to this variable\n+// is used as a marker for the functions on the defer stack associated\n+// with this function.  Doing things this way permits inlining a\n+// function which uses defer.\n+\n+Expression*\n+Function::defer_stack(source_location location)\n+{\n+  Type* t = Type::make_pointer_type(Type::make_void_type());\n+  if (this->defer_stack_ == NULL)\n+    {\n+      Expression* n = Expression::make_nil(location);\n+      this->defer_stack_ = Statement::make_temporary(t, n, location);\n+      this->defer_stack_->set_is_address_taken();\n+    }\n+  Expression* ref = Expression::make_temporary_reference(this->defer_stack_,\n+\t\t\t\t\t\t\t location);\n+  Expression* addr = Expression::make_unary(OPERATOR_AND, ref, location);\n+  return Expression::make_unsafe_cast(t, addr, location);\n+}\n+\n // Export the function.\n \n void"}, {"sha": "f958b9c58ccc493703d491e0c2b5bd4a638b9aa1", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=8dc421e03520f7b1d2ccd73648985c83998604bc", "patch": "@@ -17,6 +17,7 @@ class Typed_identifier_list;\n class Function_type;\n class Expression;\n class Statement;\n+class Temporary_statement;\n class Block;\n class Function;\n class Bindings;\n@@ -977,7 +978,7 @@ class Function\n   return_value(Gogo*, Named_object*, source_location, tree* stmt_list) const;\n \n   // Get a tree for the variable holding the defer stack.\n-  tree\n+  Expression*\n   defer_stack(source_location);\n \n   // Export the function.\n@@ -1033,9 +1034,10 @@ class Function\n   Labels labels_;\n   // The function decl.\n   tree fndecl_;\n-  // A variable holding the defer stack variable.  This is NULL unless\n-  // we actually need a defer stack.\n-  tree defer_stack_;\n+  // The defer stack variable.  A pointer to this variable is used to\n+  // distinguish the defer stack for one function from another.  This\n+  // is NULL unless we actually need a defer stack.\n+  Temporary_statement* defer_stack_;\n   // True if the result variables are named.\n   bool results_are_named_;\n   // True if this function calls the predeclared recover function."}, {"sha": "6ca8bf54a369a24429ee1d0f9fa71c11747b4cbb", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 65, "deletions": 68, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=8dc421e03520f7b1d2ccd73648985c83998604bc", "patch": "@@ -1718,17 +1718,39 @@ class Simplify_thunk_traverse : public Traverse\n {\n  public:\n   Simplify_thunk_traverse(Gogo* gogo)\n-    : Traverse(traverse_blocks),\n-      gogo_(gogo)\n+    : Traverse(traverse_functions | traverse_blocks),\n+      gogo_(gogo), function_(NULL)\n   { }\n \n+  int\n+  function(Named_object*);\n+\n   int\n   block(Block*);\n \n  private:\n+  // General IR.\n   Gogo* gogo_;\n+  // The function we are traversing.\n+  Named_object* function_;\n };\n \n+// Keep track of the current function while looking for thunks.\n+\n+int\n+Simplify_thunk_traverse::function(Named_object* no)\n+{\n+  gcc_assert(this->function_ == NULL);\n+  this->function_ = no;\n+  int t = no->func_value()->traverse(this);\n+  this->function_ = NULL;\n+  if (t == TRAVERSE_EXIT)\n+    return t;\n+  return TRAVERSE_SKIP_COMPONENTS;\n+}\n+\n+// Look for thunks in a block.\n+\n int\n Simplify_thunk_traverse::block(Block* b)\n {\n@@ -1739,7 +1761,7 @@ Simplify_thunk_traverse::block(Block* b)\n   Thunk_statement* stat = b->statements()->back()->thunk_statement();\n   if (stat == NULL)\n     return TRAVERSE_CONTINUE;\n-  if (stat->simplify_statement(this->gogo_, b))\n+  if (stat->simplify_statement(this->gogo_, this->function_, b))\n     return TRAVERSE_SKIP_COMPONENTS;\n   return TRAVERSE_CONTINUE;\n }\n@@ -1761,13 +1783,23 @@ Gogo::simplify_thunk_statements()\n // struct to a thunk.  The thunk does the real call.\n \n bool\n-Thunk_statement::simplify_statement(Gogo* gogo, Block* block)\n+Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n+\t\t\t\t    Block* block)\n {\n   if (this->classification() == STATEMENT_ERROR)\n     return false;\n   if (this->call_->is_error_expression())\n     return false;\n \n+  if (this->classification() == STATEMENT_DEFER)\n+    {\n+      // Make sure that the defer stack exists for the function.  We\n+      // will use when converting this statement to the backend\n+      // representation, but we want it to exist when we start\n+      // converting the function.\n+      function->func_value()->defer_stack(this->location());\n+    }\n+\n   Call_expression* ce = this->call_->call_expression();\n   Function_type* fntype = ce->get_function_type();\n   if (fntype == NULL)\n@@ -2160,61 +2192,44 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name,\n \n // Get the function and argument trees.\n \n-void\n-Thunk_statement::get_fn_and_arg(Translate_context* context, tree* pfn,\n-\t\t\t\ttree* parg)\n+bool\n+Thunk_statement::get_fn_and_arg(Expression** pfn, Expression** parg)\n {\n   if (this->call_->is_error_expression())\n-    {\n-      *pfn = error_mark_node;\n-      *parg = error_mark_node;\n-      return;\n-    }\n+    return false;\n \n   Call_expression* ce = this->call_->call_expression();\n \n-  Expression* fn = ce->fn();\n-  *pfn = fn->get_tree(context);\n+  *pfn = ce->fn();\n \n   const Expression_list* args = ce->args();\n   if (args == NULL || args->empty())\n-    *parg = null_pointer_node;\n+    *parg = Expression::make_nil(this->location());\n   else\n     {\n       gcc_assert(args->size() == 1);\n-      *parg = args->front()->get_tree(context);\n+      *parg = args->front();\n     }\n+\n+  return true;\n }\n \n // Class Go_statement.\n \n tree\n Go_statement::do_get_tree(Translate_context* context)\n {\n-  tree fn_tree;\n-  tree arg_tree;\n-  this->get_fn_and_arg(context, &fn_tree, &arg_tree);\n-\n-  static tree go_fndecl;\n-\n-  tree fn_arg_type = NULL_TREE;\n-  if (go_fndecl == NULL_TREE)\n-    {\n-      // Only build FN_ARG_TYPE if we need it.\n-      tree subargtypes = tree_cons(NULL_TREE, ptr_type_node, void_list_node);\n-      tree subfntype = build_function_type(ptr_type_node, subargtypes);\n-      fn_arg_type = build_pointer_type(subfntype);\n-    }\n+  Expression* fn;\n+  Expression* arg;\n+  if (!this->get_fn_and_arg(&fn, &arg))\n+    return error_mark_node;\n \n-  return Gogo::call_builtin(&go_fndecl,\n-\t\t\t    this->location(),\n-\t\t\t    \"__go_go\",\n-\t\t\t    2,\n-\t\t\t    void_type_node,\n-\t\t\t    fn_arg_type,\n-\t\t\t    fn_tree,\n-\t\t\t    ptr_type_node,\n-\t\t\t    arg_tree);\n+  Expression* call = Runtime::make_call(Runtime::GO, this->location(), 2,\n+\t\t\t\t\tfn, arg);\n+  tree call_tree = call->get_tree(context);\n+  Bexpression* call_bexpr = tree_to_expr(call_tree);\n+  Bstatement* ret = context->backend()->expression_statement(call_bexpr);\n+  return stat_to_tree(ret);\n }\n \n // Make a go statement.\n@@ -2230,38 +2245,20 @@ Statement::make_go_statement(Call_expression* call, source_location location)\n tree\n Defer_statement::do_get_tree(Translate_context* context)\n {\n-  source_location loc = this->location();\n-\n-  tree fn_tree;\n-  tree arg_tree;\n-  this->get_fn_and_arg(context, &fn_tree, &arg_tree);\n-  if (fn_tree == error_mark_node || arg_tree == error_mark_node)\n+  Expression* fn;\n+  Expression* arg;\n+  if (!this->get_fn_and_arg(&fn, &arg))\n     return error_mark_node;\n \n-  static tree defer_fndecl;\n-\n-  tree fn_arg_type = NULL_TREE;\n-  if (defer_fndecl == NULL_TREE)\n-    {\n-      // Only build FN_ARG_TYPE if we need it.\n-      tree subargtypes = tree_cons(NULL_TREE, ptr_type_node, void_list_node);\n-      tree subfntype = build_function_type(ptr_type_node, subargtypes);\n-      fn_arg_type = build_pointer_type(subfntype);\n-    }\n+  source_location loc = this->location();\n+  Expression* ds = context->function()->func_value()->defer_stack(loc);\n \n-  tree defer_stack = context->function()->func_value()->defer_stack(loc);\n-\n-  return Gogo::call_builtin(&defer_fndecl,\n-\t\t\t    loc,\n-\t\t\t    \"__go_defer\",\n-\t\t\t    3,\n-\t\t\t    void_type_node,\n-\t\t\t    ptr_type_node,\n-\t\t\t    defer_stack,\n-\t\t\t    fn_arg_type,\n-\t\t\t    fn_tree,\n-\t\t\t    ptr_type_node,\n-\t\t\t    arg_tree);\n+  Expression* call = Runtime::make_call(Runtime::DEFER, loc, 3,\n+\t\t\t\t\tds, fn, arg);\n+  tree call_tree = call->get_tree(context);\n+  Bexpression* call_bexpr = tree_to_expr(call_tree);\n+  Bstatement* ret = context->backend()->expression_statement(call_bexpr);\n+  return stat_to_tree(ret);\n }\n \n // Make a defer statement."}, {"sha": "2436bb54aa81c553d1d3abbdd4b88f161d6fb0fb", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc421e03520f7b1d2ccd73648985c83998604bc/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=8dc421e03520f7b1d2ccd73648985c83998604bc", "patch": "@@ -852,7 +852,7 @@ class Thunk_statement : public Statement\n   // Simplify a go or defer statement so that it only uses a single\n   // parameter.\n   bool\n-  simplify_statement(Gogo*, Block*);\n+  simplify_statement(Gogo*, Named_object*, Block*);\n \n  protected:\n   int\n@@ -868,8 +868,8 @@ class Thunk_statement : public Statement\n   do_check_types(Gogo*);\n \n   // Return the function and argument trees for the call.\n-  void\n-  get_fn_and_arg(Translate_context*, tree* pfn, tree* parg);\n+  bool\n+  get_fn_and_arg(Expression** pfn, Expression** parg);\n \n  private:\n   // Return whether this is a simple go statement."}]}