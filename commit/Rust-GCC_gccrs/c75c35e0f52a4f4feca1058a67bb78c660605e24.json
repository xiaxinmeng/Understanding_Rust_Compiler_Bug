{"sha": "c75c35e0f52a4f4feca1058a67bb78c660605e24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1YzM1ZTBmNTJhNGY0ZmVjYTEwNThhNjdiYjc4YzY2MDYwNWUyNA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-03-21T12:25:03Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-03-21T12:25:03Z"}, "message": "[parloops] Handle canonicalize_loop_ivs failure\n\n2018-03-21  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/83126\n\t* tree-parloops.c (num_phis): New function.\n\t(gen_parallel_loop): Detect and handle canonicalize_loop_ivs failure.\n\n\t* gcc.dg/graphite/pr83126.c: New test.\n\nFrom-SVN: r258713", "tree": {"sha": "89fc88f54ef5d689e690b8555d9dd7a0c188dc40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89fc88f54ef5d689e690b8555d9dd7a0c188dc40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c75c35e0f52a4f4feca1058a67bb78c660605e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75c35e0f52a4f4feca1058a67bb78c660605e24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c75c35e0f52a4f4feca1058a67bb78c660605e24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75c35e0f52a4f4feca1058a67bb78c660605e24/comments", "author": null, "committer": null, "parents": [{"sha": "f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82ece6b59622033b3dabf124d999d6f2fb1b6d7"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "8c70daa323f2d62c9d53427dcf77795d2091af64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75c35e0f52a4f4feca1058a67bb78c660605e24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75c35e0f52a4f4feca1058a67bb78c660605e24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c75c35e0f52a4f4feca1058a67bb78c660605e24", "patch": "@@ -1,3 +1,9 @@\n+2018-03-21  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/83126\n+\t* tree-parloops.c (num_phis): New function.\n+\t(gen_parallel_loop): Detect and handle canonicalize_loop_ivs failure.\n+\n 2018-03-21  Nathan Sidwell  <nathan@acm.org>\n \n \t* doc/extend.texi (Deprecated Features): Update deprecared flags,"}, {"sha": "64c8d977b1102553ad536af0f836774ff3af28f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75c35e0f52a4f4feca1058a67bb78c660605e24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75c35e0f52a4f4feca1058a67bb78c660605e24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c75c35e0f52a4f4feca1058a67bb78c660605e24", "patch": "@@ -1,3 +1,8 @@\n+2018-03-21  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/83126\n+\t* gcc.dg/graphite/pr83126.c: New test.\n+\n 2018-03-21  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/ext/anon-struct6.C: Adjust."}, {"sha": "663d05970c23865881d936b16541f7f9980788a7", "filename": "gcc/testsuite/gcc.dg/graphite/pr83126.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75c35e0f52a4f4feca1058a67bb78c660605e24/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr83126.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75c35e0f52a4f4feca1058a67bb78c660605e24/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr83126.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr83126.c?ref=c75c35e0f52a4f4feca1058a67bb78c660605e24", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-additional-options \"-w -ftree-parallelize-loops=2 -floop-parallelize-all -O1\" }  */\n+\n+void\n+ew (unsigned short int c9, int stuff)\n+{\n+  int e1;\n+\n+  for (;;)\n+    {\n+      unsigned int *by = &e1;\n+      int *fd = &stuff;\n+\n+      *fd = c9;\n+      fd = *fd;\n+      if (*fd != 0)\n+\tfor (*by = 0; *by < 2; ++*by)\n+\t  c9 *= e1;\n+    }\n+}"}, {"sha": "3a788ccf1b74083b07e0e6347870bde1ccddb444", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75c35e0f52a4f4feca1058a67bb78c660605e24/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75c35e0f52a4f4feca1058a67bb78c660605e24/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=c75c35e0f52a4f4feca1058a67bb78c660605e24", "patch": "@@ -2235,6 +2235,25 @@ create_parallel_loop (struct loop *loop, tree loop_fn, tree data,\n   calculate_dominance_info (CDI_DOMINATORS);\n }\n \n+/* Return number of phis in bb.  If COUNT_VIRTUAL_P is false, don't count the\n+   virtual phi.  */\n+\n+static unsigned int\n+num_phis (basic_block bb, bool count_virtual_p)\n+{\n+  unsigned int nr_phis = 0;\n+  gphi_iterator gsi;\n+  for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      if (!count_virtual_p && virtual_operand_p (PHI_RESULT (gsi.phi ())))\n+\tcontinue;\n+\n+      nr_phis++;\n+    }\n+\n+  return nr_phis;\n+}\n+\n /* Generates code to execute the iterations of LOOP in N_THREADS\n    threads in parallel, which can be 0 if that number is to be determined\n    later.\n@@ -2370,6 +2389,26 @@ gen_parallel_loop (struct loop *loop,\n \n   /* Base all the induction variables in LOOP on a single control one.  */\n   canonicalize_loop_ivs (loop, &nit, true);\n+  if (num_phis (loop->header, false) != reduction_list->elements () + 1)\n+    {\n+      /* The call to canonicalize_loop_ivs above failed to \"base all the\n+\t induction variables in LOOP on a single control one\".  Do damage\n+\t control.  */\n+      basic_block preheader = loop_preheader_edge (loop)->src;\n+      basic_block cond_bb = single_pred (preheader);\n+      gcond *cond = as_a <gcond *> (gsi_stmt (gsi_last_bb (cond_bb)));\n+      gimple_cond_make_true (cond);\n+      update_stmt (cond);\n+      /* We've gotten rid of the duplicate loop created by loop_version, but\n+\t we can't undo whatever canonicalize_loop_ivs has done.\n+\t TODO: Fix this properly by ensuring that the call to\n+\t canonicalize_loop_ivs succeeds.  */\n+      if (dump_file\n+\t  && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"canonicalize_loop_ivs failed for loop %d,\"\n+\t\t \" aborting transformation\\n\", loop->num);\n+      return;\n+    }\n \n   /* Ensure that the exit condition is the first statement in the loop.\n      The common case is that latch of the loop is empty (apart from the"}]}