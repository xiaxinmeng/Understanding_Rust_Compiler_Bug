{"sha": "0c6110a1264ffeb89764aba0ffb41aff60e31192", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2MTEwYTEyNjRmZmViODk3NjRhYmEwZmZiNDFhZmY2MGUzMTE5Mg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-11-26T15:13:02Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-11-26T15:13:02Z"}, "message": "[AArch64] Add NEON intrinsics vqrdmlah and vqrdmlsh.\n\n        gcc/\n\t* gcc/config/aarch64/arm_neon.h (vqrdmlah_s16, vqrdmlah_s32): New.\n\t(vqrdmlahq_s16, vqrdmlahq_s32): New.\n\t(vqrdmlsh_s16, vqrdmlsh_s32): New.\n\t(vqrdmlshq_s16, vqrdmlshq_s32): New.\n\n        gcc/testsuite\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlXh.inc: New file,\n\tsupport code for vqrdml{as}h tests.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlah.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlsh.c: New.\n\nFrom-SVN: r230971", "tree": {"sha": "7b1ce6bfa4dce426529e0ed8cde9c8ee5df62d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b1ce6bfa4dce426529e0ed8cde9c8ee5df62d87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c6110a1264ffeb89764aba0ffb41aff60e31192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6110a1264ffeb89764aba0ffb41aff60e31192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6110a1264ffeb89764aba0ffb41aff60e31192", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6110a1264ffeb89764aba0ffb41aff60e31192/comments", "author": null, "committer": null, "parents": [{"sha": "a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e"}], "stats": {"total": 323, "additions": 323, "deletions": 0}, "files": [{"sha": "e169551de26af86116dc608b21791bb8490d7e2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6110a1264ffeb89764aba0ffb41aff60e31192/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6110a1264ffeb89764aba0ffb41aff60e31192/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c6110a1264ffeb89764aba0ffb41aff60e31192", "patch": "@@ -1,3 +1,10 @@\n+2015-11-26  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc/config/aarch64/arm_neon.h (vqrdmlah_s16, vqrdmlah_s32): New.\n+\t(vqrdmlahq_s16, vqrdmlahq_s32): New.\n+\t(vqrdmlsh_s16, vqrdmlsh_s32): New.\n+\t(vqrdmlshq_s16, vqrdmlshq_s32): New.\n+\n 2015-11-26  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Add"}, {"sha": "63f1627ce4cec01b4892b59268ca7521d256dffa", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6110a1264ffeb89764aba0ffb41aff60e31192/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6110a1264ffeb89764aba0ffb41aff60e31192/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=0c6110a1264ffeb89764aba0ffb41aff60e31192", "patch": "@@ -11213,6 +11213,59 @@ vbslq_u64 (uint64x2_t __a, uint64x2_t __b, uint64x2_t __c)\n   return __builtin_aarch64_simd_bslv2di_uuuu (__a, __b, __c);\n }\n \n+/* ARMv8.1 instrinsics.  */\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.1-a\")\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vqrdmlah_s16 (int16x4_t __a, int16x4_t __b, int16x4_t __c)\n+{\n+  return __builtin_aarch64_sqrdmlahv4hi (__a, __b, __c);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vqrdmlah_s32 (int32x2_t __a, int32x2_t __b, int32x2_t __c)\n+{\n+  return __builtin_aarch64_sqrdmlahv2si (__a, __b, __c);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vqrdmlahq_s16 (int16x8_t __a, int16x8_t __b, int16x8_t __c)\n+{\n+  return __builtin_aarch64_sqrdmlahv8hi (__a, __b, __c);\n+}\n+\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vqrdmlahq_s32 (int32x4_t __a, int32x4_t __b, int32x4_t __c)\n+{\n+  return __builtin_aarch64_sqrdmlahv4si (__a, __b, __c);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vqrdmlsh_s16 (int16x4_t __a, int16x4_t __b, int16x4_t __c)\n+{\n+  return __builtin_aarch64_sqrdmlshv4hi (__a, __b, __c);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vqrdmlsh_s32 (int32x2_t __a, int32x2_t __b, int32x2_t __c)\n+{\n+  return __builtin_aarch64_sqrdmlshv2si (__a, __b, __c);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vqrdmlshq_s16 (int16x8_t __a, int16x8_t __b, int16x8_t __c)\n+{\n+  return __builtin_aarch64_sqrdmlshv8hi (__a, __b, __c);\n+}\n+\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vqrdmlshq_s32 (int32x4_t __a, int32x4_t __b, int32x4_t __c)\n+{\n+  return __builtin_aarch64_sqrdmlshv4si (__a, __b, __c);\n+}\n+#pragma GCC pop_options\n+\n #pragma GCC push_options\n #pragma GCC target (\"+nothing+crypto\")\n /* vaes  */"}, {"sha": "f326a3fecd8b3a06f14121dfb62f5e292374e7d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6110a1264ffeb89764aba0ffb41aff60e31192/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6110a1264ffeb89764aba0ffb41aff60e31192/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c6110a1264ffeb89764aba0ffb41aff60e31192", "patch": "@@ -1,3 +1,10 @@\n+2015-11-26  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlXh.inc: New file,\n+\tsupport code for vqrdml{as}h tests.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlah.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlsh.c: New.\n+\n 2015-11-26  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* lib/target-supports.exp (add_options_for_arm_v8_1a_neon): New."}, {"sha": "a504ca68d465cebf804f917af09c9ed584304831", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmlXh.inc", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6110a1264ffeb89764aba0ffb41aff60e31192/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqrdmlXh.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6110a1264ffeb89764aba0ffb41aff60e31192/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqrdmlXh.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqrdmlXh.inc?ref=0c6110a1264ffeb89764aba0ffb41aff60e31192", "patch": "@@ -0,0 +1,138 @@\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1 (NAME)\n+\n+void FNNAME (INSN) (void)\n+{\n+  /* vector_res = vqrdmlah (vector, vector2, vector3, vector4),\n+     then store the result.  */\n+#define TEST_VQRDMLAH2(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  Set_Neon_Cumulative_Sat (0, VECT_VAR (vector_res, T1, W, N));\t\t\\\n+  VECT_VAR (vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W (VECT_VAR (vector, T1, W, N),\t\t\t\\\n+\t\t       VECT_VAR (vector2, T1, W, N),\t\t\t\\\n+\t\t       VECT_VAR (vector3, T1, W, N));\t\t\t\\\n+  vst1##Q##_##T2##W (VECT_VAR (result, T1, W, N),\t\t\t\\\n+\t\t     VECT_VAR (vector_res, T1, W, N));\t\t\t\\\n+  CHECK_CUMULATIVE_SAT (TEST_MSG, T1, W, N,\t\t\t\t\\\n+\t\t\tEXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* Two auxliary macros are necessary to expand INSN.  */\n+#define TEST_VQRDMLAH1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQRDMLAH2 (INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_VQRDMLAH(Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n+  TEST_VQRDMLAH1 (INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  DECL_VARIABLE (vector, int, 16, 4);\n+  DECL_VARIABLE (vector, int, 32, 2);\n+  DECL_VARIABLE (vector, int, 16, 8);\n+  DECL_VARIABLE (vector, int, 32, 4);\n+\n+  DECL_VARIABLE (vector_res, int, 16, 4);\n+  DECL_VARIABLE (vector_res, int, 32, 2);\n+  DECL_VARIABLE (vector_res, int, 16, 8);\n+  DECL_VARIABLE (vector_res, int, 32, 4);\n+\n+  DECL_VARIABLE (vector2, int, 16, 4);\n+  DECL_VARIABLE (vector2, int, 32, 2);\n+  DECL_VARIABLE (vector2, int, 16, 8);\n+  DECL_VARIABLE (vector2, int, 32, 4);\n+\n+  DECL_VARIABLE (vector3, int, 16, 4);\n+  DECL_VARIABLE (vector3, int, 32, 2);\n+  DECL_VARIABLE (vector3, int, 16, 8);\n+  DECL_VARIABLE (vector3, int, 32, 4);\n+\n+  clean_results ();\n+\n+  VLOAD (vector, buffer, , int, s, 16, 4);\n+  VLOAD (vector, buffer, , int, s, 32, 2);\n+  VLOAD (vector, buffer, q, int, s, 16, 8);\n+  VLOAD (vector, buffer, q, int, s, 32, 4);\n+\n+  /* Initialize vector2.  */\n+  VDUP (vector2, , int, s, 16, 4, 0x5555);\n+  VDUP (vector2, , int, s, 32, 2, 0xBB);\n+  VDUP (vector2, q, int, s, 16, 8, 0xBB);\n+  VDUP (vector2, q, int, s, 32, 4, 0x22);\n+\n+  /* Initialize vector3.  */\n+  VDUP (vector3, , int, s, 16, 4, 0x5555);\n+  VDUP (vector3, , int, s, 32, 2, 0xBB);\n+  VDUP (vector3, q, int, s, 16, 8, 0x33);\n+  VDUP (vector3, q, int, s, 32, 4, 0x22);\n+\n+#define CMT \"\"\n+  TEST_VQRDMLAH ( , int, s, 16, 4, expected_cumulative_sat, CMT);\n+  TEST_VQRDMLAH ( , int, s, 32, 2, expected_cumulative_sat, CMT);\n+  TEST_VQRDMLAH (q, int, s, 16, 8, expected_cumulative_sat, CMT);\n+  TEST_VQRDMLAH (q, int, s, 32, 4, expected_cumulative_sat, CMT);\n+\n+  CHECK (TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK (TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK (TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK (TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+\n+  /* Now use input values such that the multiplication causes\n+     saturation.  */\n+#define TEST_MSG_MUL \" (check mul cumulative saturation)\"\n+  VDUP (vector, , int, s, 16, 4, 0x8000);\n+  VDUP (vector, , int, s, 32, 2, 0x80000000);\n+  VDUP (vector, q, int, s, 16, 8, 0x8000);\n+  VDUP (vector, q, int, s, 32, 4, 0x80000000);\n+  VDUP (vector2, , int, s, 16, 4, 0x8000);\n+  VDUP (vector2, , int, s, 32, 2, 0x80000000);\n+  VDUP (vector2, q, int, s, 16, 8, 0x8000);\n+  VDUP (vector2, q, int, s, 32, 4, 0x80000000);\n+  VDUP (vector3, , int, s, 16, 4, 0x8000);\n+  VDUP (vector3, , int, s, 32, 2, 0x80000000);\n+  VDUP (vector3, q, int, s, 16, 8, 0x8000);\n+  VDUP (vector3, q, int, s, 32, 4, 0x80000000);\n+\n+  TEST_VQRDMLAH ( , int, s, 16, 4, expected_cumulative_sat_mul, TEST_MSG_MUL);\n+  TEST_VQRDMLAH ( , int, s, 32, 2, expected_cumulative_sat_mul, TEST_MSG_MUL);\n+  TEST_VQRDMLAH (q, int, s, 16, 8, expected_cumulative_sat_mul, TEST_MSG_MUL);\n+  TEST_VQRDMLAH (q, int, s, 32, 4, expected_cumulative_sat_mul, TEST_MSG_MUL);\n+\n+  CHECK (TEST_MSG, int, 16, 4, PRIx16, expected_mul, TEST_MSG_MUL);\n+  CHECK (TEST_MSG, int, 32, 2, PRIx32, expected_mul, TEST_MSG_MUL);\n+  CHECK (TEST_MSG, int, 16, 8, PRIx16, expected_mul, TEST_MSG_MUL);\n+  CHECK (TEST_MSG, int, 32, 4, PRIx32, expected_mul, TEST_MSG_MUL);\n+\n+  /* Use input values where rounding produces a result equal to the\n+     saturation value, but does not set the saturation flag.  */\n+#define TEST_MSG_ROUND \" (check rounding)\"\n+  VDUP (vector, , int, s, 16, 4, 0x8000);\n+  VDUP (vector, , int, s, 32, 2, 0x80000000);\n+  VDUP (vector, q, int, s, 16, 8, 0x8000);\n+  VDUP (vector, q, int, s, 32, 4, 0x80000000);\n+  VDUP (vector2, , int, s, 16, 4, 0x8001);\n+  VDUP (vector2, , int, s, 32, 2, 0x80000001);\n+  VDUP (vector2, q, int, s, 16, 8, 0x8001);\n+  VDUP (vector2, q, int, s, 32, 4, 0x80000001);\n+  VDUP (vector3, , int, s, 16, 4, 0x8001);\n+  VDUP (vector3, , int, s, 32, 2, 0x80000001);\n+  VDUP (vector3, q, int, s, 16, 8, 0x8001);\n+  VDUP (vector3, q, int, s, 32, 4, 0x80000001);\n+\n+  TEST_VQRDMLAH ( , int, s, 16, 4, expected_cumulative_sat_round, \\\n+\t\t TEST_MSG_ROUND);\n+  TEST_VQRDMLAH ( , int, s, 32, 2, expected_cumulative_sat_round, \\\n+\t\t TEST_MSG_ROUND);\n+  TEST_VQRDMLAH (q, int, s, 16, 8, expected_cumulative_sat_round, \\\n+\t\t TEST_MSG_ROUND);\n+  TEST_VQRDMLAH (q, int, s, 32, 4, expected_cumulative_sat_round, \\\n+\t\t TEST_MSG_ROUND);\n+\n+  CHECK (TEST_MSG, int, 16, 4, PRIx16, expected_round, TEST_MSG_ROUND);\n+  CHECK (TEST_MSG, int, 32, 2, PRIx32, expected_round, TEST_MSG_ROUND);\n+  CHECK (TEST_MSG, int, 16, 8, PRIx16, expected_round, TEST_MSG_ROUND);\n+  CHECK (TEST_MSG, int, 32, 4, PRIx32, expected_round, TEST_MSG_ROUND);\n+}\n+\n+int\n+main (void)\n+{\n+  FNNAME (INSN) ();\n+  return 0;\n+}"}, {"sha": "148d94c6196ec11b6f9eea968e39a31cdcb29a18", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmlah.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6110a1264ffeb89764aba0ffb41aff60e31192/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6110a1264ffeb89764aba0ffb41aff60e31192/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlah.c?ref=0c6110a1264ffeb89764aba0ffb41aff60e31192", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-require-effective-target arm_v8_1a_neon_hw } */\n+/* { dg-add-options arm_v8_1a_neon } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR (expected_cumulative_sat, int, 16, 4) = 0;\n+int VECT_VAR (expected_cumulative_sat, int, 32, 2) = 0;\n+int VECT_VAR (expected_cumulative_sat, int, 16, 8) = 0;\n+int VECT_VAR (expected_cumulative_sat, int, 32, 4) = 0;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL (expected, int, 16, 4) [] = { 0x38d3, 0x38d4, 0x38d5, 0x38d6 };\n+VECT_VAR_DECL (expected, int, 32, 2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL (expected, int, 16, 8) [] = { 0xfff0,  0xfff1, 0xfff2,  0xfff3,\n+\t\t\t\t\t    0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL (expected, int, 32, 4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t    0xfffffff2, 0xfffffff3 };\n+\n+/* Expected values of cumulative_saturation flag when multiplication\n+   saturates.  */\n+int VECT_VAR (expected_cumulative_sat_mul, int, 16, 4) = 0;\n+int VECT_VAR (expected_cumulative_sat_mul, int, 32, 2) = 0;\n+int VECT_VAR (expected_cumulative_sat_mul, int, 16, 8) = 0;\n+int VECT_VAR (expected_cumulative_sat_mul, int, 32, 4) = 0;\n+\n+/* Expected results when multiplication saturates.  */\n+VECT_VAR_DECL (expected_mul, int, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_mul, int, 32, 2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL (expected_mul, int, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_mul, int, 32, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected values of cumulative_saturation flag when rounding\n+   should not cause saturation.  */\n+int VECT_VAR (expected_cumulative_sat_round, int, 16, 4) = 0;\n+int VECT_VAR (expected_cumulative_sat_round, int, 32, 2) = 0;\n+int VECT_VAR (expected_cumulative_sat_round, int, 16, 8) = 0;\n+int VECT_VAR (expected_cumulative_sat_round, int, 32, 4) = 0;\n+\n+/* Expected results when rounding should not cause saturation.  */\n+VECT_VAR_DECL (expected_round, int, 16, 4) [] = { 0xfffe, 0xfffe,\n+\t\t\t\t\t\t  0xfffe, 0xfffe };\n+VECT_VAR_DECL (expected_round, int, 32, 2) [] = { 0xfffffffe, 0xfffffffe };\n+VECT_VAR_DECL (expected_round, int, 16, 8) [] = { 0xfffe, 0xfffe,\n+\t\t\t\t\t\t  0xfffe, 0xfffe,\n+\t\t\t\t\t\t  0xfffe, 0xfffe,\n+\t\t\t\t\t\t  0xfffe, 0xfffe };\n+VECT_VAR_DECL (expected_round, int, 32, 4) [] = { 0xfffffffe, 0xfffffffe,\n+\t\t\t\t\t\t  0xfffffffe, 0xfffffffe };\n+\n+#define INSN vqrdmlah\n+#define TEST_MSG \"VQRDMLAH\"\n+\n+#include \"vqrdmlXh.inc\""}, {"sha": "91c3b34806d4cfeeb009ab35e7019e44eb65ca76", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmlsh.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6110a1264ffeb89764aba0ffb41aff60e31192/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6110a1264ffeb89764aba0ffb41aff60e31192/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlsh.c?ref=0c6110a1264ffeb89764aba0ffb41aff60e31192", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-require-effective-target arm_v8_1a_neon_hw } */\n+/* { dg-add-options arm_v8_1a_neon } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR (expected_cumulative_sat, int, 16, 4) = 0;\n+int VECT_VAR (expected_cumulative_sat, int, 32, 2) = 0;\n+int VECT_VAR (expected_cumulative_sat, int, 16, 8) = 0;\n+int VECT_VAR (expected_cumulative_sat, int, 32, 4) = 0;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL (expected, int, 16, 4) [] = { 0xc70d, 0xc70e, 0xc70f, 0xc710 };\n+VECT_VAR_DECL (expected, int, 32, 2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL (expected, int, 16, 8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t    0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL (expected, int, 32, 4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t    0xfffffff2, 0xfffffff3 };\n+\n+/* Expected values of cumulative_saturation flag when multiplication\n+   saturates.  */\n+int VECT_VAR (expected_cumulative_sat_mul, int, 16, 4) = 1;\n+int VECT_VAR (expected_cumulative_sat_mul, int, 32, 2) = 1;\n+int VECT_VAR (expected_cumulative_sat_mul, int, 16, 8) = 1;\n+int VECT_VAR (expected_cumulative_sat_mul, int, 32, 4) = 1;\n+\n+/* Expected results when multiplication saturates.  */\n+VECT_VAR_DECL (expected_mul, int, 16, 4) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t0x8000, 0x8000 };\n+VECT_VAR_DECL (expected_mul, int, 32, 2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL (expected_mul, int, 16, 8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t0x8000, 0x8000,\n+\t\t\t\t\t\t0x8000, 0x8000,\n+\t\t\t\t\t\t0x8000, 0x8000 };\n+VECT_VAR_DECL (expected_mul, int, 32, 4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t0x80000000, 0x80000000 };\n+\n+/* Expected values of cumulative_saturation flag when rounding\n+   should not cause saturation.  */\n+int VECT_VAR (expected_cumulative_sat_round, int, 16, 4) = 1;\n+int VECT_VAR (expected_cumulative_sat_round, int, 32, 2) = 1;\n+int VECT_VAR (expected_cumulative_sat_round, int, 16, 8) = 1;\n+int VECT_VAR (expected_cumulative_sat_round, int, 32, 4) = 1;\n+\n+/* Expected results when rounding should not cause saturation.  */\n+VECT_VAR_DECL (expected_round, int, 16, 4) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000 };\n+VECT_VAR_DECL (expected_round, int, 32, 2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL (expected_round, int, 16, 8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000 };\n+VECT_VAR_DECL (expected_round, int, 32, 4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t  0x80000000, 0x80000000 };\n+\n+#define INSN vqrdmlsh\n+#define TEST_MSG \"VQRDMLSH\"\n+\n+#include \"vqrdmlXh.inc\""}]}