{"sha": "b0d71df9409c7c7449b2969ce48f93061a6638c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBkNzFkZjk0MDljN2M3NDQ5YjI5NjljZTQ4ZjkzMDYxYTY2MzhjMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-30T11:48:12Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-30T11:48:12Z"}, "message": "(nonzero_bits, case REG): Ignore REG_POINTER_ALIGNMENT.\n\nRestore old code for SP, but use it for all pointers to defined locations in\nthe frame.\n\nFrom-SVN: r11123", "tree": {"sha": "e3ed4114e4ccc105c0ca9a2eda93e2f61932ed1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ed4114e4ccc105c0ca9a2eda93e2f61932ed1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0d71df9409c7c7449b2969ce48f93061a6638c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d71df9409c7c7449b2969ce48f93061a6638c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0d71df9409c7c7449b2969ce48f93061a6638c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d71df9409c7c7449b2969ce48f93061a6638c1/comments", "author": null, "committer": null, "parents": [{"sha": "3f83ac49044ab7a3ac8420c4294edae820c9577e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f83ac49044ab7a3ac8420c4294edae820c9577e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f83ac49044ab7a3ac8420c4294edae820c9577e"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "3e916010fb89d7d08815d775ba05e7814815f5e7", "filename": "gcc/combine.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d71df9409c7c7449b2969ce48f93061a6638c1/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d71df9409c7c7449b2969ce48f93061a6638c1/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b0d71df9409c7c7449b2969ce48f93061a6638c1", "patch": "@@ -6921,25 +6921,30 @@ nonzero_bits (x, mode)\n \tnonzero &= GET_MODE_MASK (ptr_mode);\n #endif\n \n-      /* We may know something about the alignment of this register.\n-\t But if PUSH_ROUNDING is defined, it is possible for the\n+#ifdef STACK_BOUNDARY\n+      /* If this is the stack pointer, we may know something about its\n+\t alignment.  If PUSH_ROUNDING is defined, it is possible for the\n \t stack to be momentarily aligned only to that amount, so we pick\n \t the least alignment.  */\n \n-      if (REGNO_POINTER_ALIGN (REGNO (x)) != 0)\n+      if (x == stack_pointer_rtx || x == frame_pointer_rtx\n+\t  || x == arg_pointer_rtx || x == hard_frame_pointer_rtx\n+\t  || (REGNO (x) >= FIRST_VIRTUAL_REGISTER\n+\t      && REGNO (x) <= LAST_VIRTUAL_REGISTER))\n \t{\n-\t  int alignment = REGNO_POINTER_ALIGN (REGNO (x));\n+\t  int sp_alignment = STACK_BOUNDARY / BITS_PER_UNIT;\n \n #ifdef PUSH_ROUNDING\n \t  if (REGNO (x) == STACK_POINTER_REGNUM)\n-\t    alignment = MIN (PUSH_ROUNDING (1), alignment);\n+\t    sp_alignment = MIN (PUSH_ROUNDING (1), sp_alignment);\n #endif\n \n \t  /* We must return here, otherwise we may get a worse result from\n \t     one of the choices below.  There is nothing useful below as\n \t     far as the stack pointer is concerned.  */\n-\t  return nonzero &= ~ (alignment - 1);\n+\t  return nonzero &= ~ (sp_alignment - 1);\n \t}\n+#endif\n \n       /* If X is a register whose nonzero bits value is current, use it.\n \t Otherwise, if X is a register whose value we can find, use that"}]}