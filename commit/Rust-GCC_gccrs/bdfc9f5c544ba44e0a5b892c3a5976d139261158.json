{"sha": "bdfc9f5c544ba44e0a5b892c3a5976d139261158", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRmYzlmNWM1NDRiYTQ0ZTBhNWI4OTJjM2E1OTc2ZDEzOTI2MTE1OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-12-15T14:13:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-12-15T14:13:36Z"}, "message": "PR59170 make pretty printers check for singular iterators\n\n\tPR libstdc++/59170\n\t* python/libstdcxx/v6/printers.py (StdListIteratorPrinter.to_string)\n\t(StdSlistIteratorPrinter.to_string, StdVectorIteratorPrinter.to_string)\n\t(StdRbtreeIteratorPrinter.to_string)\n\t(StdDequeIteratorPrinter.to_string): Add check for value-initialized\n\titerators.\n\t* testsuite/libstdc++-prettyprinters/simple.cc: Test them.\n\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.\n\nFrom-SVN: r243692", "tree": {"sha": "e0c4334f0da476def753f05ddcaa1936ba9c0289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0c4334f0da476def753f05ddcaa1936ba9c0289"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdfc9f5c544ba44e0a5b892c3a5976d139261158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfc9f5c544ba44e0a5b892c3a5976d139261158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdfc9f5c544ba44e0a5b892c3a5976d139261158", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfc9f5c544ba44e0a5b892c3a5976d139261158/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fec5ce248546144be3bec8655fd72c091c813594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec5ce248546144be3bec8655fd72c091c813594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fec5ce248546144be3bec8655fd72c091c813594"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "cbed9d881c701be4c012e34e537328bea682697a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfc9f5c544ba44e0a5b892c3a5976d139261158/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfc9f5c544ba44e0a5b892c3a5976d139261158/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bdfc9f5c544ba44e0a5b892c3a5976d139261158", "patch": "@@ -1,5 +1,14 @@\n 2016-12-15  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/59170\n+\t* python/libstdcxx/v6/printers.py (StdListIteratorPrinter.to_string)\n+\t(StdSlistIteratorPrinter.to_string, StdVectorIteratorPrinter.to_string)\n+\t(StdRbtreeIteratorPrinter.to_string)\n+\t(StdDequeIteratorPrinter.to_string): Add check for value-initialized\n+\titerators.\n+\t* testsuite/libstdc++-prettyprinters/simple.cc: Test them.\n+\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.\n+\n \tPR libstdc++/59161\n \t* python/libstdcxx/v6/printers.py (StdListIteratorPrinter.to_string)\n \t(StdSlistIteratorPrinter.to_string, StdVectorIteratorPrinter.to_string)"}, {"sha": "86de1ca5263bad94c019e565d6132e7cb2fccf6d", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfc9f5c544ba44e0a5b892c3a5976d139261158/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfc9f5c544ba44e0a5b892c3a5976d139261158/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=bdfc9f5c544ba44e0a5b892c3a5976d139261158", "patch": "@@ -200,6 +200,8 @@ def __init__(self, typename, val):\n         self.typename = typename\n \n     def to_string(self):\n+        if not self.val['_M_node']:\n+            return 'non-dereferenceable iterator for std::list'\n         nodetype = find_type(self.val.type, '_Node')\n         nodetype = nodetype.strip_typedefs().pointer()\n         node = self.val['_M_node'].cast(nodetype).dereference()\n@@ -246,6 +248,8 @@ def __init__(self, typename, val):\n         self.val = val\n \n     def to_string(self):\n+        if not self.val['_M_node']:\n+            return 'non-dereferenceable iterator for __gnu_cxx::slist'\n         nodetype = find_type(self.val.type, '_Node')\n         nodetype = nodetype.strip_typedefs().pointer()\n         return str(self.val['_M_node'].cast(nodetype).dereference()['_M_data'])\n@@ -333,6 +337,8 @@ def __init__(self, typename, val):\n         self.val = val\n \n     def to_string(self):\n+        if not self.val['_M_current']:\n+            return 'non-dereferenceable iterator for std::vector'\n         return str(self.val['_M_current'].dereference())\n \n class StdTuplePrinter:\n@@ -494,6 +500,8 @@ def __init__ (self, typename, val):\n         self.link_type = nodetype.strip_typedefs().pointer()\n \n     def to_string (self):\n+        if not self.val['_M_node']:\n+            return 'non-dereferenceable iterator for associative container'\n         node = self.val['_M_node'].cast(self.link_type).dereference()\n         return str(get_value_from_Rb_tree_node(node))\n \n@@ -708,6 +716,8 @@ def __init__(self, typename, val):\n         self.val = val\n \n     def to_string(self):\n+        if not self.val['_M_cur']:\n+            return 'non-dereferenceable iterator for std::deque'\n         return str(self.val['_M_cur'].dereference())\n \n class StdStringPrinter:"}, {"sha": "35fbb90816bbcb6bdd72399077f2b8c706a74585", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfc9f5c544ba44e0a5b892c3a5976d139261158/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfc9f5c544ba44e0a5b892c3a5976d139261158/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc?ref=bdfc9f5c544ba44e0a5b892c3a5976d139261158", "patch": "@@ -30,6 +30,7 @@\n #include <list>\n #include <map>\n #include <set>\n+#include <vector>\n #include <ext/slist>\n \n int\n@@ -50,6 +51,9 @@ main()\n   deq.push_back(\"two\");\n // { dg-final { note-test deq {std::deque with 2 elements = {\"one\", \"two\"}} } }\n \n+  std::deque<int>::iterator deqiter0;\n+// { dg-final { note-test deqiter0 {non-dereferenceable iterator for std::deque} } }\n+\n   std::deque<std::string>::iterator deqiter = deq.begin();\n // { dg-final { note-test deqiter {\"one\"} } }\n \n@@ -58,6 +62,9 @@ main()\n   lst.push_back(\"two\");\n // { dg-final { note-test lst {std::list = {[0] = \"one\", [1] = \"two\"}} } }\n \n+  std::list<int>::iterator lstiter0;\n+// { dg-final { note-test lstiter0 {non-dereferenceable iterator for std::list} } }\n+\n   std::list<std::string>::iterator lstiter = lst.begin();\n   tem = *lstiter;\n // { dg-final { note-test lstiter {\"one\"}} }\n@@ -73,6 +80,9 @@ main()\n   std::map<std::string, int>::iterator mpiter = mp.begin();\n // { dg-final { note-test mpiter {{first = \"zardoz\", second = 23}} } }\n \n+  std::map<std::string, int>::iterator mpiter0;\n+// { dg-final { note-test mpiter0 {non-dereferenceable iterator for associative container} } }\n+\n   // PR 67440\n   std::set<int> intset;\n   intset.insert(2);\n@@ -88,6 +98,20 @@ main()\n   std::set<std::string>::const_iterator spciter = sp.begin();\n // { dg-final { note-test spciter {\"barrel\"} } }\n \n+  std::set<int>::iterator spiter0;\n+// { dg-final { note-test spiter0 {non-dereferenceable iterator for associative container} } }\n+\n+  std::vector<int> v;\n+  v.push_back(1);\n+  v.push_back(2);\n+  v.erase(v.begin());\n+// { dg-final { note-test v {std::vector of length 1, capacity 2 = {2}} } }\n+  std::vector<int>::iterator viter3 = v.begin();\n+// { dg-final { note-test viter3 {2} } }\n+\n+  std::vector<int>::iterator viter0;\n+// { dg-final { note-test viter0 {non-dereferenceable iterator for std::vector} } }\n+\n   __gnu_cxx::slist<int> sll;\n   sll.push_front(23);\n   sll.push_front(47);\n@@ -96,6 +120,9 @@ main()\n   __gnu_cxx::slist<int>::iterator slliter = sll.begin();\n // { dg-final { note-test slliter {47} } }\n \n+  __gnu_cxx::slist<int>::iterator slliter0;\n+// { dg-final { note-test slliter0 {non-dereferenceable iterator for __gnu_cxx::slist} } }\n+\n   std::cout << \"\\n\";\n   return 0;\t\t\t// Mark SPOT\n }"}, {"sha": "8efe00e813484fcba5de7a05565cb510a24a8074", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple11.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfc9f5c544ba44e0a5b892c3a5976d139261158/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfc9f5c544ba44e0a5b892c3a5976d139261158/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc?ref=bdfc9f5c544ba44e0a5b892c3a5976d139261158", "patch": "@@ -30,6 +30,7 @@\n #include <list>\n #include <map>\n #include <set>\n+#include <vector>\n #include <ext/slist>\n \n int\n@@ -53,6 +54,9 @@ main()\n   std::deque<std::string>::iterator deqiter = deq.begin();\n // { dg-final { note-test deqiter {\"one\"} } }\n \n+  std::deque<int>::iterator deqiter0;\n+// { dg-final { note-test deqiter0 {non-dereferenceable iterator for std::deque} } }\n+\n   std::list<std::string> lst;\n   lst.push_back(\"one\");\n   lst.push_back(\"two\");\n@@ -66,13 +70,19 @@ main()\n   tem = *lstciter;\n // { dg-final { note-test lstciter {\"one\"}} }\n \n+  std::list<int>::iterator lstiter0;\n+// { dg-final { note-test lstiter0 {non-dereferenceable iterator for std::list} } }\n+\n   std::map<std::string, int> mp;\n   mp[\"zardoz\"] = 23;\n // { dg-final { note-test mp {std::map with 1 element = {[\"zardoz\"] = 23}} } }\n \n   std::map<std::string, int>::iterator mpiter = mp.begin();\n // { dg-final { note-test mpiter {{first = \"zardoz\", second = 23}} } }\n \n+  std::map<std::string, int>::iterator mpiter0;\n+// { dg-final { note-test mpiter0 {non-dereferenceable iterator for associative container} } }\n+\n   // PR 67440\n   const std::set<int> const_intset = {2, 3};\n // { dg-final { note-test const_intset {std::set with 2 elements = {[0] = 2, [1] = 3}} } }\n@@ -85,6 +95,20 @@ main()\n   std::set<std::string>::const_iterator spciter = sp.begin();\n // { dg-final { note-test spciter {\"barrel\"} } }\n \n+  std::set<int>::iterator spiter0;\n+// { dg-final { note-test spiter0 {non-dereferenceable iterator for associative container} } }\n+\n+  std::vector<int> v;\n+  v.push_back(1);\n+  v.push_back(2);\n+  v.erase(v.begin());\n+// { dg-final { note-test v {std::vector of length 1, capacity 2 = {2}} } }\n+  std::vector<int>::iterator viter3 = v.begin();\n+// { dg-final { note-test viter3 {2} } }\n+\n+  std::vector<int>::iterator viter0;\n+// { dg-final { note-test viter0 {non-dereferenceable iterator for std::vector} } }\n+\n   __gnu_cxx::slist<int> sll;\n   sll.push_front(23);\n   sll.push_front(47);\n@@ -93,6 +117,9 @@ main()\n   __gnu_cxx::slist<int>::iterator slliter = sll.begin();\n // { dg-final { note-test slliter {47} } }\n \n+  __gnu_cxx::slist<int>::iterator slliter0;\n+// { dg-final { note-test slliter0 {non-dereferenceable iterator for __gnu_cxx::slist} } }\n+\n   std::cout << \"\\n\";\n   return 0;\t\t\t// Mark SPOT\n }"}]}