{"sha": "71956db351f1941cf9ebaf35130163832a93478e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE5NTZkYjM1MWYxOTQxY2Y5ZWJhZjM1MTMwMTYzODMyYTkzNDc4ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-11T17:33:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-11T17:33:02Z"}, "message": "re PR tree-optimization/16422 (gcc.c-torture/execute/980223.c fails)\n\n        PR tree-opt/16422\n        * tree-sra.c (generate_one_element_init): New.\n        (generate_element_init): Use it.\n        (scalarize_init): Push/pop gimplify context around it.\n        (find_new_referenced_vars_1, find_new_referenced_vars): New.\n        * gimplify.c (gimplify_expr): Allow SSA_NAME.\n\nFrom-SVN: r84523", "tree": {"sha": "8146ef6f5aea440a5957f4a51db24a79e005dab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8146ef6f5aea440a5957f4a51db24a79e005dab9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71956db351f1941cf9ebaf35130163832a93478e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71956db351f1941cf9ebaf35130163832a93478e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71956db351f1941cf9ebaf35130163832a93478e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71956db351f1941cf9ebaf35130163832a93478e/comments", "author": null, "committer": null, "parents": [{"sha": "a083c04af2e5652416f2d53a3690c38a614a2ea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a083c04af2e5652416f2d53a3690c38a614a2ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a083c04af2e5652416f2d53a3690c38a614a2ea3"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "3ab7cedeadb38b26d9c984a173e444cd89a5e8c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71956db351f1941cf9ebaf35130163832a93478e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71956db351f1941cf9ebaf35130163832a93478e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71956db351f1941cf9ebaf35130163832a93478e", "patch": "@@ -1,3 +1,12 @@\n+2004-07-11  Richard Henderson  <rth@redhat.com>\n+\n+\tPR tree-opt/16422\n+\t* tree-sra.c (generate_one_element_init): New.\n+\t(generate_element_init): Use it.\n+\t(scalarize_init): Push/pop gimplify context around it.\n+\t(find_new_referenced_vars_1, find_new_referenced_vars): New.\n+\t* gimplify.c (gimplify_expr): Allow SSA_NAME.\n+\n 2004-07-11  Roger Sayle  <roger@eyesopen.com>\n \n \t* rtlanal.c (insn_rtx_cost): New function, moved and renamed from"}, {"sha": "5b8762067694fc3cf924caf14640dccbfb283399", "filename": "gcc/gimplify.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71956db351f1941cf9ebaf35130163832a93478e/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71956db351f1941cf9ebaf35130163832a93478e/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=71956db351f1941cf9ebaf35130163832a93478e", "patch": "@@ -3816,6 +3816,11 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t    ret = GS_ALL_DONE;\n \t  break;\n \n+\tcase SSA_NAME:\n+\t  /* Allow callbacks into the gimplifier during optimization.  */\n+\t  ret = GS_ALL_DONE;\n+\t  break;\n+\n \tdefault:\n \t  /* If this is a comparison of objects of aggregate type, handle\n \t     it specially (by converting to a call to memcmp).  It would be"}, {"sha": "1a4e5586c4f73ec9ada18af9ad4f3bac9bf03b42", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71956db351f1941cf9ebaf35130163832a93478e/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71956db351f1941cf9ebaf35130163832a93478e/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=71956db351f1941cf9ebaf35130163832a93478e", "patch": "@@ -1513,6 +1513,55 @@ generate_element_zero (struct sra_elt *elt, tree *list_p)\n     }\n }\n \n+/* Find all variables within the gimplified statement that were not previously\n+   visible to the function and add them to the referenced variables list.  */\n+\n+static tree\n+find_new_referenced_vars_1 (tree *tp, int *walk_subtrees,\n+\t\t\t    void *data ATTRIBUTE_UNUSED)\n+{\n+  tree t = *tp;\n+\n+  if (TREE_CODE (t) == VAR_DECL && !var_ann (t))\n+    add_referenced_tmp_var (t);\n+\n+  if (DECL_P (t) || TYPE_P (t))\n+    *walk_subtrees = 0;\n+\n+  return NULL;\n+}\n+\n+static inline void\n+find_new_referenced_vars (tree *stmt_p)\n+{\n+  walk_tree (stmt_p, find_new_referenced_vars_1, NULL, NULL);\n+}\n+\n+/* Generate an assignment VAR = INIT, where INIT may need gimplification.\n+   Add the result to *LIST_P.  */\n+\n+static void\n+generate_one_element_init (tree var, tree init, tree *list_p)\n+{\n+  tree stmt;\n+\n+  /* The replacement can be almost arbitrarily complex.  Gimplify.  */\n+  stmt = build (MODIFY_EXPR, void_type_node, var, init);\n+  gimplify_stmt (&stmt);\n+\n+  /* The replacement can expose previously unreferenced variables.  */\n+  if (TREE_CODE (stmt) == STATEMENT_LIST)\n+    {\n+      tree_stmt_iterator i;\n+      for (i = tsi_start (stmt); !tsi_end_p (i); tsi_next (&i))\n+\tfind_new_referenced_vars (tsi_stmt_ptr (i));\n+    }\n+  else\n+    find_new_referenced_vars (&stmt);\n+\n+  append_to_statement_list (stmt, list_p);\n+}\n+\n /* Generate a set of assignment statements in *LIST_P to set all instantiated\n    elements under ELT with the contents of the initializer INIT.  In addition,\n    mark all assigned elements VISITED; this allows easy coordination with\n@@ -1536,8 +1585,7 @@ generate_element_init (struct sra_elt *elt, tree init, tree *list_p)\n     {\n       if (elt->replacement)\n \t{\n-\t  t = build (MODIFY_EXPR, void_type_node, elt->replacement, init);\n-\t  append_to_statement_list (t, list_p);\n+\t  generate_one_element_init (elt->replacement, init, list_p);\n \t  elt->visited = true;\n \t}\n       return result;\n@@ -1774,7 +1822,11 @@ scalarize_init (struct sra_elt *lhs_elt, tree rhs, block_stmt_iterator *bsi)\n \n   /* Generate initialization statements for all members extant in the RHS.  */\n   if (rhs)\n-    result = generate_element_init (lhs_elt, rhs, &list);\n+    {\n+      push_gimplify_context ();\n+      result = generate_element_init (lhs_elt, rhs, &list);\n+      pop_gimplify_context (NULL);\n+    }\n \n   /* CONSTRUCTOR is defined such that any member not mentioned is assigned\n      a zero value.  Initialize the rest of the instantiated elements.  */"}]}