{"sha": "72c0f64330a0a5500fe97bf829ce181a28820fdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJjMGY2NDMzMGEwYTU1MDBmZTk3YmY4MjljZTE4MWEyODgyMGZkZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-11-27T14:17:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-11-27T14:17:28Z"}, "message": "re PR tree-optimization/68559 (Excessive peeling for gaps)\n\n2015-11-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68559\n\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Move\n\tpeeling for gap checks ...\n\t* tree-vect-stmts.c (vectorizable_load): ... here and relax\n\tfor SLP.\n\t* tree-vect-loop.c (vect_analyze_loop_2): Re-set\n\tLOOP_VINFO_PEELING_FOR_GAPS before re-trying without SLP.\n\n\t* gcc.dg/vect/slp-perm-4.c: Adjust again.\n\t* gcc.dg/vect/pr45752.c: Likewise.\n\nFrom-SVN: r231015", "tree": {"sha": "7b174d0e3a941e415681d1d52723e50d8079280a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b174d0e3a941e415681d1d52723e50d8079280a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72c0f64330a0a5500fe97bf829ce181a28820fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c0f64330a0a5500fe97bf829ce181a28820fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72c0f64330a0a5500fe97bf829ce181a28820fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c0f64330a0a5500fe97bf829ce181a28820fdf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00e5241831c1227615a45b7bcba29c393671cb3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e5241831c1227615a45b7bcba29c393671cb3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00e5241831c1227615a45b7bcba29c393671cb3f"}], "stats": {"total": 121, "additions": 59, "deletions": 62}, "files": [{"sha": "505c693b1d1a8e647682eca5bfb7977c27080f0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72c0f64330a0a5500fe97bf829ce181a28820fdf", "patch": "@@ -1,3 +1,13 @@\n+2015-11-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68559\n+\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Move\n+\tpeeling for gap checks ...\n+\t* tree-vect-stmts.c (vectorizable_load): ... here and relax\n+\tfor SLP.\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Re-set\n+\tLOOP_VINFO_PEELING_FOR_GAPS before re-trying without SLP.\n+\n 2015-11-27  Nathan Sidwell  <nathan@acm.org>\n \n \t* config/nvptx/nvptx-protos.h (nvptx_record_needed_decl): Don't"}, {"sha": "d58666e1bf9bbc3b9c19c386a64460b067213a54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72c0f64330a0a5500fe97bf829ce181a28820fdf", "patch": "@@ -1,3 +1,9 @@\n+2015-11-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68559\n+\t* gcc.dg/vect/slp-perm-4.c: Adjust again.\n+\t* gcc.dg/vect/pr45752.c: Likewise.\n+\n 2015-11-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/68250"}, {"sha": "0736a74e0c61e1f20302429b14c3a945183e0471", "filename": "gcc/testsuite/gcc.dg/vect/pr45752.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45752.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45752.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45752.c?ref=72c0f64330a0a5500fe97bf829ce181a28820fdf", "patch": "@@ -33,7 +33,7 @@\n #define M34 7716\n #define M44 16\n \n-#define N 40\n+#define N 20\n \n void foo (unsigned int *__restrict__ pInput,\n           unsigned int *__restrict__ pOutput,\n@@ -77,14 +77,10 @@ int main (int argc, const char* argv[])\n   unsigned int input[N], output[N], i, input2[N], output2[N];\n   unsigned int check_results[N]\n     = {3208, 1334, 28764, 35679, 2789, 13028, 4754, 168364, 91254, 12399, \n-    22848, 8174, 307964, 146829, 22009, 32668, 11594, 447564, 202404, 31619, \n-    42488, 15014, 587164, 257979, 41229, 52308, 18434, 726764, 313554, 50839, \n-    62128, 21854, 866364, 369129, 60449, 71948, 25274, 1005964, 424704, 70059};\n+    22848, 8174, 307964, 146829, 22009, 32668, 11594, 447564, 202404, 31619 };\n   unsigned int check_results2[N]\n     = {7136, 2702, 84604, 57909, 6633, 16956, 6122, 224204, 113484, 16243, \n-    26776, 9542, 363804, 169059, 25853, 36596, 12962, 503404, 224634, 35463, \n-    46416, 16382, 643004, 280209, 45073, 56236, 19802, 782604, 335784, 54683, \n-    66056, 23222, 922204, 391359, 64293, 75876, 26642, 1061804, 446934, 73903};\n+    26776, 9542, 363804, 169059, 25853, 36596, 12962, 503404, 224634, 35463 };\n \n   check_vect ();\n \n@@ -108,4 +104,5 @@ int main (int argc, const char* argv[])\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n+/* { dg-final { scan-tree-dump-times \"gaps requires scalar epilogue loop\" 0 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target vect_perm } } } */"}, {"sha": "80bc58c2ea08381270dd8607fe90fd40333deb5f", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-4.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c?ref=72c0f64330a0a5500fe97bf829ce181a28820fdf", "patch": "@@ -33,7 +33,7 @@\n #define M34 7716\n #define M44 16\n \n-#define N 40\n+#define N 20\n \n void foo (unsigned int *__restrict__ pInput, unsigned int *__restrict__ pOutput)\n {\n@@ -60,9 +60,7 @@ int main (int argc, const char* argv[])\n   unsigned int input[N], output[N], i;\n   unsigned int check_results[N]\n     = {3208, 1334, 28764, 35679, 2789, 13028, 4754, 168364, 91254, 12399, \n-    22848, 8174, 307964, 146829, 22009, 32668, 11594, 447564, 202404, 31619, \n-    42488, 15014, 587164, 257979, 41229, 52308, 18434, 726764, 313554, 50839, \n-    62128, 21854, 866364, 369129, 60449, 71948, 25274, 1005964, 424704, 70059};\n+    22848, 8174, 307964, 146829, 22009, 32668, 11594, 447564, 202404, 31619};\n \n   check_vect ();\n \n@@ -85,5 +83,5 @@ int main (int argc, const char* argv[])\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"gaps requires scalar epilogue loop\" 0 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_perm } } } */\n-"}, {"sha": "7962e360fb9f5d9b0bc7473df223ff360c4de35c", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=72c0f64330a0a5500fe97bf829ce181a28820fdf", "patch": "@@ -2166,10 +2166,6 @@ vect_analyze_group_access_1 (struct data_reference *dr)\n   HOST_WIDE_INT dr_step = -1;\n   HOST_WIDE_INT groupsize, last_accessed_element = 1;\n   bool slp_impossible = false;\n-  struct loop *loop = NULL;\n-\n-  if (loop_vinfo)\n-    loop = LOOP_VINFO_LOOP (loop_vinfo);\n \n   /* For interleaving, GROUPSIZE is STEP counted in elements, i.e., the\n      size of the interleaving group (including gaps).  */\n@@ -2227,24 +2223,6 @@ vect_analyze_group_access_1 (struct data_reference *dr)\n \t      dump_printf (MSG_NOTE, \"\\n\");\n \t    }\n \n-\t  if (loop_vinfo)\n-\t    {\n-\t      if (dump_enabled_p ())\n-\t\tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t                 \"Data access with gaps requires scalar \"\n-\t\t                 \"epilogue loop\\n\");\n-              if (loop->inner)\n-                {\n-                  if (dump_enabled_p ())\n-                    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-                                     \"Peeling for outer loop is not\"\n-                                     \" supported\\n\");\n-                  return false;\n-                }\n-\n-              LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo) = true;\n-\t    }\n-\n \t  return true;\n \t}\n \n@@ -2399,29 +2377,6 @@ vect_analyze_group_access_1 (struct data_reference *dr)\n           if (bb_vinfo)\n             BB_VINFO_GROUPED_STORES (bb_vinfo).safe_push (stmt);\n         }\n-\n-      /* If there is a gap in the end of the group or the group size cannot\n-         be made a multiple of the vector element count then we access excess\n-\t elements in the last iteration and thus need to peel that off.  */\n-      if (loop_vinfo\n-\t  && (groupsize - last_accessed_element > 0\n-\t      || exact_log2 (groupsize) == -1))\n-\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t                     \"Data access with gaps requires scalar \"\n-\t                     \"epilogue loop\\n\");\n-          if (loop->inner)\n-            {\n-              if (dump_enabled_p ())\n-                dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-                                 \"Peeling for outer loop is not supported\\n\");\n-              return false;\n-            }\n-\n-          LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo) = true;\n-\t}\n     }\n \n   return true;"}, {"sha": "7d1f555be79d033b93a9ed6143f6b019ce7f053e", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=72c0f64330a0a5500fe97bf829ce181a28820fdf", "patch": "@@ -2190,6 +2190,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal)\n     = init_cost (LOOP_VINFO_LOOP (loop_vinfo));\n   /* Reset assorted flags.  */\n   LOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = false;\n+  LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo) = false;\n   LOOP_VINFO_COST_MODEL_THRESHOLD (loop_vinfo) = 0;\n \n   goto start_over;"}, {"sha": "3b078da1320631a3ce2d4dd90ae27aa054c2e54f", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c0f64330a0a5500fe97bf829ce181a28820fdf/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=72c0f64330a0a5500fe97bf829ce181a28820fdf", "patch": "@@ -6246,15 +6246,45 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n          that leaves unused vector loads around punt - we at least create\n \t very sub-optimal code in that case (and blow up memory,\n \t see PR65518).  */\n+      bool force_peeling = false;\n       if (first_stmt == stmt\n-\t  && !GROUP_NEXT_ELEMENT (stmt_info)\n-\t  && GROUP_SIZE (stmt_info) > TYPE_VECTOR_SUBPARTS (vectype))\n+\t  && !GROUP_NEXT_ELEMENT (stmt_info))\n+\t{\n+\t  if (GROUP_SIZE (stmt_info) > TYPE_VECTOR_SUBPARTS (vectype))\n+\t    {\n+\t      if (dump_enabled_p ())\n+\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t \"single-element interleaving not supported \"\n+\t\t\t\t \"for not adjacent vector loads\\n\");\n+\t      return false;\n+\t    }\n+\n+\t  /* Single-element interleaving requires peeling for gaps.  */\n+\t  force_peeling = true;\n+\t}\n+\n+      /* If there is a gap in the end of the group or the group size cannot\n+         be made a multiple of the vector element count then we access excess\n+\t elements in the last iteration and thus need to peel that off.  */\n+      if (loop_vinfo\n+\t  && ! STMT_VINFO_STRIDED_P (stmt_info)\n+\t  && (force_peeling\n+\t      || GROUP_GAP (vinfo_for_stmt (first_stmt)) != 0\n+\t      || (!slp && vf % GROUP_SIZE (vinfo_for_stmt (first_stmt)) != 0)))\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t     \"single-element interleaving not supported \"\n-\t\t\t     \"for not adjacent vector loads\\n\");\n-\t  return false;\n+\t\t\t     \"Data access with gaps requires scalar \"\n+\t\t\t     \"epilogue loop\\n\");\n+\t  if (loop->inner)\n+\t    {\n+\t      if (dump_enabled_p ())\n+\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t \"Peeling for outer loop is not supported\\n\");\n+\t      return false;\n+\t    }\n+\n+\t  LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo) = true;\n \t}\n \n       if (slp && SLP_TREE_LOAD_PERMUTATION (slp_node).exists ())"}]}