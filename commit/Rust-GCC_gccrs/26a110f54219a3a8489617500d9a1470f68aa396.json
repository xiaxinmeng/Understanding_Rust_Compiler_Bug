{"sha": "26a110f54219a3a8489617500d9a1470f68aa396", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZhMTEwZjU0MjE5YTNhODQ4OTYxNzUwMGQ5YTE0NzBmNjhhYTM5Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-08-25T22:39:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-08-25T22:39:05Z"}, "message": "ia64.h (struct machine_function): Add n_varargs.\n\n        * config/ia64/ia64.h (struct machine_function): Add n_varargs.\n        * config/ia64/ia64.c (ia64_compute_frame_size): Use it.\n        (ia64_expand_prologue): Likewise.\n        (ia64_setup_incoming_varargs): Set it.  Properly skip the current\n        argument for stdargs.\n\nFrom-SVN: r35994", "tree": {"sha": "a539e560b3367ff78302cbc791b4340db59158ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a539e560b3367ff78302cbc791b4340db59158ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26a110f54219a3a8489617500d9a1470f68aa396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a110f54219a3a8489617500d9a1470f68aa396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26a110f54219a3a8489617500d9a1470f68aa396", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a110f54219a3a8489617500d9a1470f68aa396/comments", "author": null, "committer": null, "parents": [{"sha": "ecff20d49e0f694936d291998a8c60384d952d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecff20d49e0f694936d291998a8c60384d952d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecff20d49e0f694936d291998a8c60384d952d81"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "4a3bc018e5732d53cf1e62e1b2f53dbb86d9e3d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a110f54219a3a8489617500d9a1470f68aa396/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a110f54219a3a8489617500d9a1470f68aa396/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26a110f54219a3a8489617500d9a1470f68aa396", "patch": "@@ -1,3 +1,11 @@\n+2000-08-25  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/ia64/ia64.h (struct machine_function): Add n_varargs.\n+\t* config/ia64/ia64.c (ia64_compute_frame_size): Use it.\n+\t(ia64_expand_prologue): Likewise.\n+\t(ia64_setup_incoming_varargs): Set it.  Properly skip the current\n+\targument for stdargs.\n+\n 2000-08-25  Jason Merrill  <jason@redhat.com>\n \n \t* integrate.c (expand_inline_function): Pull out the original decl."}, {"sha": "f42d7b1a4df921abcbdda8668117555f428791f1", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a110f54219a3a8489617500d9a1470f68aa396/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a110f54219a3a8489617500d9a1470f68aa396/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=26a110f54219a3a8489617500d9a1470f68aa396", "patch": "@@ -1183,7 +1183,7 @@ ia64_compute_frame_size (size)\n       break;\n   current_frame_info.n_local_regs = regno - LOC_REG (0) + 1;\n \n-  if (current_function_varargs || current_function_stdarg)\n+  if (cfun->machine->n_varargs > 0)\n     current_frame_info.n_input_regs = 8;\n   else\n     {\n@@ -1323,7 +1323,7 @@ ia64_compute_frame_size (size)\n \n   /* If we're forced to use st8.spill, we're forced to save and restore\n      ar.unat as well.  */\n-  if (spilled_gr_p || current_function_varargs || current_function_stdarg)\n+  if (spilled_gr_p || cfun->machine->n_varargs)\n     {\n       SET_HARD_REG_BIT (mask, AR_UNAT_REGNUM);\n       current_frame_info.reg_save_ar_unat = find_gr_spill (spill_size == 0);\n@@ -1782,7 +1782,7 @@ ia64_expand_prologue ()\n \n   /* Set up frame pointer, stack pointer, and spill iterators.  */\n \n-  n_varargs = current_function_pretend_args_size / UNITS_PER_WORD;\n+  n_varargs = cfun->machine->n_varargs;\n   setup_spill_pointers (current_frame_info.n_spilled + n_varargs,\n \t\t\tstack_pointer_rtx, 0);\n \n@@ -2437,17 +2437,21 @@ ia64_initialize_trampoline (addr, fnaddr, static_chain)\n void\n ia64_setup_incoming_varargs (cum, int_mode, type, pretend_size, second_time)\n      CUMULATIVE_ARGS cum;\n-     int             int_mode ATTRIBUTE_UNUSED;\n-     tree            type ATTRIBUTE_UNUSED;\n+     int             int_mode;\n+     tree            type;\n      int *           pretend_size;\n      int\t     second_time ATTRIBUTE_UNUSED;\n {\n-  /* If this is a stdarg function, then don't save the current argument.  */\n-  int offset = ! current_function_varargs;\n+  /* If this is a stdarg function, then skip the current argument.  */\n+  if (! current_function_varargs)\n+    ia64_function_arg_advance (&cum, int_mode, type, 1);\n \n   if (cum.words < MAX_ARGUMENT_SLOTS)\n-    *pretend_size = ((MAX_ARGUMENT_SLOTS - cum.words - offset)\n-\t\t     * UNITS_PER_WORD);\n+    {\n+      int n = MAX_ARGUMENT_SLOTS - cum.words;\n+      *pretend_size = n * UNITS_PER_WORD;\n+      cfun->machine->n_varargs = n;\n+    }\n }\n \n /* Check whether TYPE is a homogeneous floating point aggregate.  If"}, {"sha": "0c8197ab6ac01f194330f866f8ddc49ccf21c08d", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a110f54219a3a8489617500d9a1470f68aa396/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a110f54219a3a8489617500d9a1470f68aa396/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=26a110f54219a3a8489617500d9a1470f68aa396", "patch": "@@ -2795,6 +2795,9 @@ struct machine_function\n \n   /* The GP value save register.  */\n   struct rtx_def* ia64_gp_save;\n+\n+  /* The number of varargs registers to save.  */\n+  int n_varargs;\n };\n \n "}]}