{"sha": "b7babd5d428f7439b7cd83077b7c3d902570e0ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdiYWJkNWQ0MjhmNzQzOWI3Y2Q4MzA3N2I3YzNkOTAyNTcwZTBlYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-04-22T22:32:54Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-04-22T22:32:54Z"}, "message": "utils2.c (build_binary_op): If operation's type is an enumeral or a boolean type...\n\n\t* gcc-interface/utils2.c (build_binary_op) <PLUS_EXPR>: If operation's\n\ttype is an enumeral or a boolean type, change it to an integer type\n\twith the same mode and signedness.\n\nFrom-SVN: r146625", "tree": {"sha": "beedd09a228d7c271f4269d3c601ccd2aa414c7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beedd09a228d7c271f4269d3c601ccd2aa414c7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7babd5d428f7439b7cd83077b7c3d902570e0ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7babd5d428f7439b7cd83077b7c3d902570e0ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7babd5d428f7439b7cd83077b7c3d902570e0ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7babd5d428f7439b7cd83077b7c3d902570e0ea/comments", "author": null, "committer": null, "parents": [{"sha": "5225a1389d0058ac8f64153efa64c8e07ec13c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5225a1389d0058ac8f64153efa64c8e07ec13c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5225a1389d0058ac8f64153efa64c8e07ec13c9a"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "6f31942e86923414c26b096b41f29ce3f8adfa57", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7babd5d428f7439b7cd83077b7c3d902570e0ea/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7babd5d428f7439b7cd83077b7c3d902570e0ea/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b7babd5d428f7439b7cd83077b7c3d902570e0ea", "patch": "@@ -1,3 +1,9 @@\n+2009-04-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils2.c (build_binary_op) <PLUS_EXPR>: If operation's\n+\ttype is an enumeral or a boolean type, change it to an integer type\n+\twith the same mode and signedness.\n+\n 2009-04-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (create_var_decl_1): Do not emit debug info"}, {"sha": "d6b7d684de7d358b6a2b509be8db5def275ef5a7", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7babd5d428f7439b7cd83077b7c3d902570e0ea/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7babd5d428f7439b7cd83077b7c3d902570e0ea/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=b7babd5d428f7439b7cd83077b7c3d902570e0ea", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2008, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2009, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -1010,11 +1010,15 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \n     case PLUS_EXPR:\n     case MINUS_EXPR:\n-      /* Avoid doing arithmetics in BOOLEAN_TYPE like the other compilers.\n-\t Contrary to C, Ada doesn't allow arithmetics in Standard.Boolean\n-\t but we can generate addition or subtraction for 'Succ and 'Pred.  */\n-      if (operation_type && TREE_CODE (operation_type) == BOOLEAN_TYPE)\n-\toperation_type = left_base_type = right_base_type = integer_type_node;\n+      /* Avoid doing arithmetics in ENUMERAL_TYPE or BOOLEAN_TYPE like the\n+\t other compilers.  Contrary to C, Ada doesn't allow arithmetics in\n+\t these types but can generate addition/subtraction for Succ/Pred.  */\n+      if (operation_type\n+\t  && (TREE_CODE (operation_type) == ENUMERAL_TYPE\n+\t      || TREE_CODE (operation_type) == BOOLEAN_TYPE))\n+\toperation_type = left_base_type = right_base_type\n+\t  = gnat_type_for_mode (TYPE_MODE (operation_type),\n+\t\t\t\tTYPE_UNSIGNED (operation_type));\n \n       /* ... fall through ... */\n \n@@ -2199,7 +2203,7 @@ fill_vms_descriptor (tree expr, Entity_Id gnat_formal, Node_Id gnat_actual)\n \t  add_stmt (build3 (COND_EXPR, void_type_node,\n \t\t\t    build_binary_op (GE_EXPR, long_integer_type_node,\n \t\t\t\t\t     convert (long_integer_type_node,\n-\t\t\t\t\t\t      addr64expr), \n+\t\t\t\t\t\t      addr64expr),\n \t\t\t\t\t     malloc64low),\n \t\t\t    build_call_raise (CE_Range_Check_Failed, gnat_actual,\n \t\t\t\t\t      N_Raise_Constraint_Error),"}, {"sha": "8002f79601a16a306abb970c79a11428baf05fd9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7babd5d428f7439b7cd83077b7c3d902570e0ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7babd5d428f7439b7cd83077b7c3d902570e0ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b7babd5d428f7439b7cd83077b7c3d902570e0ea", "patch": "@@ -1,3 +1,8 @@\n+2009-04-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/enum2.adb: New test.\n+\t* gnat.dg/enum2_pkg.ads: New helper.\n+\n 2009-04-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/39855"}, {"sha": "e98252a19261864254f634f90e7297fbe791f982", "filename": "gcc/testsuite/gnat.dg/enum2.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7babd5d428f7439b7cd83077b7c3d902570e0ea/gcc%2Ftestsuite%2Fgnat.dg%2Fenum2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7babd5d428f7439b7cd83077b7c3d902570e0ea/gcc%2Ftestsuite%2Fgnat.dg%2Fenum2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fenum2.adb?ref=b7babd5d428f7439b7cd83077b7c3d902570e0ea", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnat05 -O2\" }\n+\n+with Enum2_Pkg; use Enum2_Pkg;\n+\n+procedure Enum2 is\n+  type Enum is (A, B, C, D);\n+  Table : array (B .. C, 1 .. 1) of F_String := (others => (others => Null_String));\n+begin\n+  Table := (others => (others => Null_String));\n+end;"}, {"sha": "20112d23c5cd5561db7e1309722c2a12cba80b90", "filename": "gcc/testsuite/gnat.dg/enum2_pkg.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7babd5d428f7439b7cd83077b7c3d902570e0ea/gcc%2Ftestsuite%2Fgnat.dg%2Fenum2_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7babd5d428f7439b7cd83077b7c3d902570e0ea/gcc%2Ftestsuite%2Fgnat.dg%2Fenum2_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fenum2_pkg.ads?ref=b7babd5d428f7439b7cd83077b7c3d902570e0ea", "patch": "@@ -0,0 +1,8 @@\n+with Ada.Finalization; use Ada.Finalization;\n+\n+package Enum2_Pkg is\n+  type F_String is new Controlled with record\n+    Data : access String;\n+  end record;\n+  Null_String : constant F_String := (Controlled with Data => null);\n+end Enum2_Pkg;"}]}