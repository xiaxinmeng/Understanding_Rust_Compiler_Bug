{"sha": "815ca4d336e254a4869946343460afc8ff6b21c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE1Y2E0ZDMzNmUyNTRhNDg2OTk0NjM0MzQ2MGFmYzhmZjZiMjFjNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-27T01:05:38Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-27T01:05:38Z"}, "message": "libgo: Update to current Go library.\n\nFrom-SVN: r205426", "tree": {"sha": "a639e5c4b06bb7971b24112a25fdae25a1b3d863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a639e5c4b06bb7971b24112a25fdae25a1b3d863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/815ca4d336e254a4869946343460afc8ff6b21c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815ca4d336e254a4869946343460afc8ff6b21c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815ca4d336e254a4869946343460afc8ff6b21c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815ca4d336e254a4869946343460afc8ff6b21c7/comments", "author": null, "committer": null, "parents": [{"sha": "40a373f1d56a77524d9047ab66176b9d2a82cb57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a373f1d56a77524d9047ab66176b9d2a82cb57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40a373f1d56a77524d9047ab66176b9d2a82cb57"}], "stats": {"total": 301, "additions": 241, "deletions": 60}, "files": [{"sha": "14d78eae0e9a86ea031c05d00036c5780ba40e43", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -1,4 +1,4 @@\n-7ebbddd21330\n+65bf677ab8d8\n \n The first line of this file holds the Mercurial revision number of the\n last merge done from the master library sources."}, {"sha": "0828e63c656899f27a3af97688f8944c83f6092b", "filename": "libgo/go/database/sql/driver/driver.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fdatabase%2Fsql%2Fdriver%2Fdriver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fdatabase%2Fsql%2Fdriver%2Fdriver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fdriver%2Fdriver.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -140,8 +140,8 @@ type Stmt interface {\n }\n \n // ColumnConverter may be optionally implemented by Stmt if the\n-// the statement is aware of its own columns' types and can\n-// convert from any type to a driver Value.\n+// statement is aware of its own columns' types and can convert from\n+// any type to a driver Value.\n type ColumnConverter interface {\n \t// ColumnConverter returns a ValueConverter for the provided\n \t// column index.  If the type of a specific column isn't known"}, {"sha": "dddf5a3f257257f78b7d95acbe108198ae8df200", "filename": "libgo/go/database/sql/sql.go", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -201,7 +201,7 @@ type DB struct {\n \tconnRequests *list.List // of connRequest\n \tnumOpen      int\n \tpendingOpens int\n-\t// Used to sygnal the need for new connections\n+\t// Used to signal the need for new connections\n \t// a goroutine running connectionOpener() reads on this chan and\n \t// maybeOpenNewConnections sends on the chan (one send per needed connection)\n \t// It is closed during db.Close(). The close tells the connectionOpener\n@@ -1637,7 +1637,16 @@ func (r *Row) Scan(dest ...interface{}) error {\n \n // A Result summarizes an executed SQL command.\n type Result interface {\n+\t// LastInsertId returns the integer generated by the database\n+\t// in response to a command. Typically this will be from an\n+\t// \"auto increment\" column when inserting a new row. Not all\n+\t// databases support this feature, and the syntax of such\n+\t// statements varies.\n \tLastInsertId() (int64, error)\n+\n+\t// RowsAffected returns the number of rows affected by an\n+\t// update, insert, or delete. Not every database or database\n+\t// driver may support this.\n \tRowsAffected() (int64, error)\n }\n "}, {"sha": "68503c742f6e2900e1ce99aeca7235cdb43ac0ac", "filename": "libgo/go/debug/dwarf/const.go", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fdebug%2Fdwarf%2Fconst.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fdebug%2Fdwarf%2Fconst.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fconst.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -207,9 +207,8 @@ const (\n \tformRef8        format = 0x14\n \tformRefUdata    format = 0x15\n \tformIndirect    format = 0x16\n-\t// following are defined in DWARF 4\n \tformSecOffset   format = 0x17\n-\tformExprLoc     format = 0x18\n+\tformExprloc     format = 0x18\n \tformFlagPresent format = 0x19\n \tformRefSig8     format = 0x20\n )"}, {"sha": "e0d3229fb4942f2ab38338ead4fa258880bb49c9", "filename": "libgo/go/debug/dwarf/entry.go", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fdebug%2Fdwarf%2Fentry.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fdebug%2Fdwarf%2Fentry.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fentry.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -185,29 +185,15 @@ func (b *buf) entry(atab abbrevTable, ubase Offset) *Entry {\n \t\tcase formUdata:\n \t\t\tval = int64(b.uint())\n \n-\t\t// exprloc\n-\t\tcase formExprLoc:\n-\t\t\tval = b.bytes(int(b.uint()))\n-\n \t\t// flag\n \t\tcase formFlag:\n \t\t\tval = b.uint8() == 1\n+\t\t// New in DWARF 4.\n \t\tcase formFlagPresent:\n \t\t\t// The attribute is implicitly indicated as present, and no value is\n \t\t\t// encoded in the debugging information entry itself.\n \t\t\tval = true\n \n-\t\t// lineptr, loclistptr, macptr, rangelistptr\n-\t\tcase formSecOffset:\n-\t\t\tis64, known := b.format.dwarf64()\n-\t\t\tif !known {\n-\t\t\t\tb.error(\"unknown size for DW_FORM_sec_offset\")\n-\t\t\t} else if is64 {\n-\t\t\t\tval = Offset(b.uint64())\n-\t\t\t} else {\n-\t\t\t\tval = Offset(b.uint32())\n-\t\t\t}\n-\n \t\t// reference to other entry\n \t\tcase formRefAddr:\n \t\t\tvers := b.format.version()\n@@ -235,8 +221,6 @@ func (b *buf) entry(atab abbrevTable, ubase Offset) *Entry {\n \t\t\tval = Offset(b.uint64()) + ubase\n \t\tcase formRefUdata:\n \t\t\tval = Offset(b.uint()) + ubase\n-\t\tcase formRefSig8:\n-\t\t\tval = b.uint64()\n \n \t\t// string\n \t\tcase formString:\n@@ -253,6 +237,30 @@ func (b *buf) entry(atab abbrevTable, ubase Offset) *Entry {\n \t\t\t\tb.err = b1.err\n \t\t\t\treturn nil\n \t\t\t}\n+\n+\t\t// lineptr, loclistptr, macptr, rangelistptr\n+\t\t// New in DWARF 4, but clang can generate them with -gdwarf-2.\n+\t\t// Section reference, replacing use of formData4 and formData8.\n+\t\tcase formSecOffset:\n+\t\t\tis64, known := b.format.dwarf64()\n+\t\t\tif !known {\n+\t\t\t\tb.error(\"unknown size for DW_FORM_sec_offset\")\n+\t\t\t} else if is64 {\n+\t\t\t\tval = int64(b.uint64())\n+\t\t\t} else {\n+\t\t\t\tval = int64(b.uint32())\n+\t\t\t}\n+\n+\t\t// exprloc\n+\t\t// New in DWARF 4.\n+\t\tcase formExprloc:\n+\t\t\tval = b.bytes(int(b.uint()))\n+\n+\t\t// reference\n+\t\t// New in DWARF 4.\n+\t\tcase formRefSig8:\n+\t\t\t// 64-bit type signature.\n+\t\t\tval = b.uint64()\n \t\t}\n \t\te.Field[i].Val = val\n \t}"}, {"sha": "d0acaba1adcb61d00b83bcfa1399a95c8aa2d7d6", "filename": "libgo/go/encoding/gob/doc.go", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fencoding%2Fgob%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fencoding%2Fgob%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fdoc.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -86,13 +86,13 @@ Functions and channels will not be sent in a gob. Attempting to encode such a va\n at top the level will fail. A struct field of chan or func type is treated exactly\n like an unexported field and is ignored.\n \n-Gob can encode a value of any type implementing the GobEncoder,\n-encoding.BinaryMarshaler, or encoding.TextMarshaler interfaces by calling the\n-corresponding method, in that order of preference.\n+Gob can encode a value of any type implementing the GobEncoder or\n+encoding.BinaryMarshaler interfaces by calling the corresponding method,\n+in that order of preference.\n \n-Gob can decode a value of any type implementing the GobDecoder,\n-encoding.BinaryUnmarshaler, or encoding.TextUnmarshaler interfaces by calling\n-the corresponding method, again in that order of preference.\n+Gob can decode a value of any type implementing the GobDecoder or\n+encoding.BinaryUnmarshaler interfaces by calling the corresponding method,\n+again in that order of preference.\n \n Encoding Details\n "}, {"sha": "0193e2b67d4312b452676cbd787b0563eed55998", "filename": "libgo/go/encoding/gob/gobencdec_test.go", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fencoding%2Fgob%2Fgobencdec_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fencoding%2Fgob%2Fgobencdec_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fgobencdec_test.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -11,6 +11,7 @@ import (\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n+\t\"net\"\n \t\"strings\"\n \t\"testing\"\n \t\"time\"\n@@ -767,3 +768,17 @@ func TestGobEncodePtrError(t *testing.T) {\n \t\tt.Fatalf(\"expected nil, got %v\", err2)\n \t}\n }\n+\n+func TestNetIP(t *testing.T) {\n+\t// Encoding of net.IP{1,2,3,4} in Go 1.1.\n+\tenc := []byte{0x07, 0x0a, 0x00, 0x04, 0x01, 0x02, 0x03, 0x04}\n+\n+\tvar ip net.IP\n+\terr := NewDecoder(bytes.NewReader(enc)).Decode(&ip)\n+\tif err != nil {\n+\t\tt.Fatalf(\"decode: %v\", err)\n+\t}\n+\tif ip.String() != \"1.2.3.4\" {\n+\t\tt.Errorf(\"decoded to %v, want 1.2.3.4\", ip.String())\n+\t}\n+}"}, {"sha": "cad1452795318e55700849fa093c5945525e3562", "filename": "libgo/go/encoding/gob/type.go", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fencoding%2Fgob%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fencoding%2Fgob%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Ftype.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -88,18 +88,25 @@ func validUserType(rt reflect.Type) (ut *userTypeInfo, err error) {\n \t\tut.externalEnc, ut.encIndir = xGob, indir\n \t} else if ok, indir := implementsInterface(ut.user, binaryMarshalerInterfaceType); ok {\n \t\tut.externalEnc, ut.encIndir = xBinary, indir\n-\t} else if ok, indir := implementsInterface(ut.user, textMarshalerInterfaceType); ok {\n-\t\tut.externalEnc, ut.encIndir = xText, indir\n \t}\n \n+\t// NOTE(rsc): Would like to allow MarshalText here, but results in incompatibility\n+\t// with older encodings for net.IP. See golang.org/issue/6760.\n+\t// } else if ok, indir := implementsInterface(ut.user, textMarshalerInterfaceType); ok {\n+\t// \tut.externalEnc, ut.encIndir = xText, indir\n+\t// }\n+\n \tif ok, indir := implementsInterface(ut.user, gobDecoderInterfaceType); ok {\n \t\tut.externalDec, ut.decIndir = xGob, indir\n \t} else if ok, indir := implementsInterface(ut.user, binaryUnmarshalerInterfaceType); ok {\n \t\tut.externalDec, ut.decIndir = xBinary, indir\n-\t} else if ok, indir := implementsInterface(ut.user, textUnmarshalerInterfaceType); ok {\n-\t\tut.externalDec, ut.decIndir = xText, indir\n \t}\n \n+\t// See note above.\n+\t// } else if ok, indir := implementsInterface(ut.user, textUnmarshalerInterfaceType); ok {\n+\t// \tut.externalDec, ut.decIndir = xText, indir\n+\t// }\n+\n \tuserTypeCache[rt] = ut\n \treturn\n }"}, {"sha": "8890508f8555b5b2e3847a4d133ca249862bb153", "filename": "libgo/go/encoding/xml/read.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fencoding%2Fxml%2Fread.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fencoding%2Fxml%2Fread.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fread.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -53,7 +53,7 @@ import (\n //      Unmarshal records the attribute value in that field.\n //\n //   * If the XML element contains character data, that data is\n-//      accumulated in the first struct field that has tag \"chardata\".\n+//      accumulated in the first struct field that has tag \",chardata\".\n //      The struct field may have type []byte or string.\n //      If there is no such field, the character data is discarded.\n //"}, {"sha": "c90080b7cc1752c8d8b344e560e1601cc197c9b0", "filename": "libgo/go/go/doc/synopsis.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fgo%2Fdoc%2Fsynopsis.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fgo%2Fdoc%2Fsynopsis.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fsynopsis.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -22,6 +22,9 @@ func firstSentenceLen(s string) int {\n \t\tif q == ' ' && p == '.' && (!unicode.IsUpper(pp) || unicode.IsUpper(ppp)) {\n \t\t\treturn i\n \t\t}\n+\t\tif p == '\u3002' || p == '\uff0e' {\n+\t\t\treturn i\n+\t\t}\n \t\tppp, pp, p = pp, p, q\n \t}\n \treturn len(s)"}, {"sha": "59b253cb8dcea1185635b383b7dc8f7a33a03f55", "filename": "libgo/go/go/doc/synopsis_test.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fgo%2Fdoc%2Fsynopsis_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fgo%2Fdoc%2Fsynopsis_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fsynopsis_test.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -28,6 +28,8 @@ var tests = []struct {\n \t{\"P. Q.   \", 8, \"P. Q.\"},\n \t{\"Package \u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1 \u03ba\u03cc\u03c3\u03bc\u03b5.\", 36, \"Package \u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1 \u03ba\u03cc\u03c3\u03bc\u03b5.\"},\n \t{\"Package \u3053\u3093\u306b\u3061\u306f \u4e16\u754c\\n\", 31, \"Package \u3053\u3093\u306b\u3061\u306f \u4e16\u754c\"},\n+\t{\"Package \u3053\u3093\u306b\u3061\u306f\u3002\u4e16\u754c\", 26, \"Package \u3053\u3093\u306b\u3061\u306f\u3002\"},\n+\t{\"Package \uc548\ub155\uff0e\u4e16\u754c\", 17, \"Package \uc548\ub155\uff0e\"},\n \t{\"Package foo does bar.\", 21, \"Package foo does bar.\"},\n \t{\"Copyright 2012 Google, Inc. Package foo does bar.\", 27, \"\"},\n \t{\"All Rights reserved. Package foo does bar.\", 20, \"\"},"}, {"sha": "b07ed0baa942df8444ea668275a2354f2797c4fe", "filename": "libgo/go/net/hosts_test.go", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Fhosts_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Fhosts_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhosts_test.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -53,6 +53,19 @@ func TestLookupStaticHost(t *testing.T) {\n \thostsPath = p\n }\n \n+// https://code.google.com/p/go/issues/detail?id=6646\n+func TestSingleLineHostsFile(t *testing.T) {\n+\tp := hostsPath\n+\thostsPath = \"testdata/hosts_singleline\"\n+\n+\tips := lookupStaticHost(\"odin\")\n+\tif len(ips) != 1 || ips[0] != \"127.0.0.2\" {\n+\t\tt.Errorf(\"lookupStaticHost = %v, want %v\", ips, []string{\"127.0.0.2\"})\n+\t}\n+\n+\thostsPath = p\n+}\n+\n func TestLookupHost(t *testing.T) {\n \t// Can't depend on this to return anything in particular,\n \t// but if it does return something, make sure it doesn't"}, {"sha": "265499fb00d23a563ba17dca6010a9a6384182e6", "filename": "libgo/go/net/http/httputil/dump.go", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -45,13 +45,27 @@ func (c *dumpConn) SetDeadline(t time.Time) error      { return nil }\n func (c *dumpConn) SetReadDeadline(t time.Time) error  { return nil }\n func (c *dumpConn) SetWriteDeadline(t time.Time) error { return nil }\n \n+type neverEnding byte\n+\n+func (b neverEnding) Read(p []byte) (n int, err error) {\n+\tfor i := range p {\n+\t\tp[i] = byte(b)\n+\t}\n+\treturn len(p), nil\n+}\n+\n // DumpRequestOut is like DumpRequest but includes\n // headers that the standard http.Transport adds,\n // such as User-Agent.\n func DumpRequestOut(req *http.Request, body bool) ([]byte, error) {\n \tsave := req.Body\n+\tdummyBody := false\n \tif !body || req.Body == nil {\n \t\treq.Body = nil\n+\t\tif req.ContentLength != 0 {\n+\t\t\treq.Body = ioutil.NopCloser(io.LimitReader(neverEnding('x'), req.ContentLength))\n+\t\t\tdummyBody = true\n+\t\t}\n \t} else {\n \t\tvar err error\n \t\tsave, req.Body, err = drainBody(req.Body)\n@@ -99,7 +113,19 @@ func DumpRequestOut(req *http.Request, body bool) ([]byte, error) {\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\treturn buf.Bytes(), nil\n+\tdump := buf.Bytes()\n+\n+\t// If we used a dummy body above, remove it now.\n+\t// TODO: if the req.ContentLength is large, we allocate memory\n+\t// unnecessarily just to slice it off here.  But this is just\n+\t// a debug function, so this is acceptable for now. We could\n+\t// discard the body earlier if this matters.\n+\tif dummyBody {\n+\t\tif i := bytes.Index(dump, []byte(\"\\r\\n\\r\\n\")); i >= 0 {\n+\t\t\tdump = dump[:i+4]\n+\t\t}\n+\t}\n+\treturn dump, nil\n }\n \n // delegateReader is a reader that delegates to another reader,"}, {"sha": "987a820487d9d4f6c7e85b30d561470b63b83391", "filename": "libgo/go/net/http/httputil/dump_test.go", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump_test.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -20,6 +20,7 @@ type dumpTest struct {\n \n \tWantDump    string\n \tWantDumpOut string\n+\tNoBody      bool // if true, set DumpRequest{,Out} body to false\n }\n \n var dumpTests = []dumpTest{\n@@ -83,6 +84,31 @@ var dumpTests = []dumpTest{\n \t\t\t\"User-Agent: Go 1.1 package http\\r\\n\" +\n \t\t\t\"Accept-Encoding: gzip\\r\\n\\r\\n\",\n \t},\n+\n+\t// Request with Body, but Dump requested without it.\n+\t{\n+\t\tReq: http.Request{\n+\t\t\tMethod: \"POST\",\n+\t\t\tURL: &url.URL{\n+\t\t\t\tScheme: \"http\",\n+\t\t\t\tHost:   \"post.tld\",\n+\t\t\t\tPath:   \"/\",\n+\t\t\t},\n+\t\t\tContentLength: 6,\n+\t\t\tProtoMajor:    1,\n+\t\t\tProtoMinor:    1,\n+\t\t},\n+\n+\t\tBody: []byte(\"abcdef\"),\n+\n+\t\tWantDumpOut: \"POST / HTTP/1.1\\r\\n\" +\n+\t\t\t\"Host: post.tld\\r\\n\" +\n+\t\t\t\"User-Agent: Go 1.1 package http\\r\\n\" +\n+\t\t\t\"Content-Length: 6\\r\\n\" +\n+\t\t\t\"Accept-Encoding: gzip\\r\\n\\r\\n\",\n+\n+\t\tNoBody: true,\n+\t},\n }\n \n func TestDumpRequest(t *testing.T) {\n@@ -105,7 +131,7 @@ func TestDumpRequest(t *testing.T) {\n \n \t\tif tt.WantDump != \"\" {\n \t\t\tsetBody()\n-\t\t\tdump, err := DumpRequest(&tt.Req, true)\n+\t\t\tdump, err := DumpRequest(&tt.Req, !tt.NoBody)\n \t\t\tif err != nil {\n \t\t\t\tt.Errorf(\"DumpRequest #%d: %s\", i, err)\n \t\t\t\tcontinue\n@@ -118,7 +144,7 @@ func TestDumpRequest(t *testing.T) {\n \n \t\tif tt.WantDumpOut != \"\" {\n \t\t\tsetBody()\n-\t\t\tdump, err := DumpRequestOut(&tt.Req, true)\n+\t\t\tdump, err := DumpRequestOut(&tt.Req, !tt.NoBody)\n \t\t\tif err != nil {\n \t\t\t\tt.Errorf(\"DumpRequestOut #%d: %s\", i, err)\n \t\t\t\tcontinue"}, {"sha": "6056de248e052e39bf0ebed84269a5dcd21ec420", "filename": "libgo/go/net/parse.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Fparse.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Fparse.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fparse.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -54,7 +54,7 @@ func (f *file) readLine() (s string, ok bool) {\n \t\tif n >= 0 {\n \t\t\tf.data = f.data[0 : ln+n]\n \t\t}\n-\t\tif err == io.EOF {\n+\t\tif err == io.EOF || err == io.ErrUnexpectedEOF {\n \t\t\tf.atEOF = true\n \t\t}\n \t}"}, {"sha": "5f5f74a3fadf666681457ad3ff4ecc48a3e8c07e", "filename": "libgo/go/net/testdata/hosts_singleline", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Ftestdata%2Fhosts_singleline", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Ftestdata%2Fhosts_singleline", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftestdata%2Fhosts_singleline?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -0,0 +1 @@\n+127.0.0.2\todin\n\\ No newline at end of file"}, {"sha": "b0c07413c19dbf23c269cb06e5033fba77e8c568", "filename": "libgo/go/net/textproto/reader.go", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Ftextproto%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Ftextproto%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftextproto%2Freader.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -574,13 +574,10 @@ func canonicalMIMEHeaderKey(a []byte) string {\n \t\t// and upper case after each dash.\n \t\t// (Host, User-Agent, If-Modified-Since).\n \t\t// MIME headers are ASCII only, so no Unicode issues.\n-\t\tif a[i] == ' ' {\n-\t\t\ta[i] = '-'\n-\t\t\tupper = true\n-\t\t\tcontinue\n-\t\t}\n \t\tc := a[i]\n-\t\tif upper && 'a' <= c && c <= 'z' {\n+\t\tif c == ' ' {\n+\t\t\tc = '-'\n+\t\t} else if upper && 'a' <= c && c <= 'z' {\n \t\t\tc -= toLower\n \t\t} else if !upper && 'A' <= c && c <= 'Z' {\n \t\t\tc += toLower"}, {"sha": "cc12912b634bea67ad0013aeec4838739545fd0d", "filename": "libgo/go/net/textproto/reader_test.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Ftextproto%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Ftextproto%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftextproto%2Freader_test.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -25,6 +25,10 @@ var canonicalHeaderKeyTests = []canonicalHeaderKeyTest{\n \t{\"user-agent\", \"User-Agent\"},\n \t{\"USER-AGENT\", \"User-Agent\"},\n \t{\"\u00fcser-agenT\", \"\u00fcser-Agent\"}, // non-ASCII unchanged\n+\n+\t// This caused a panic due to mishandling of a space:\n+\t{\"C Ontent-Transfer-Encoding\", \"C-Ontent-Transfer-Encoding\"},\n+\t{\"foo bar\", \"Foo-Bar\"},\n }\n \n func TestCanonicalMIMEHeaderKey(t *testing.T) {"}, {"sha": "3b3787202b7dca6c2f6d4df9afed6b9eb9e96a41", "filename": "libgo/go/net/url/url.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Furl%2Furl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fnet%2Furl%2Furl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Furl%2Furl.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -558,8 +558,8 @@ func parseQuery(m Values, query string) (err error) {\n \treturn err\n }\n \n-// Encode encodes the values into ``URL encoded'' form.\n-// e.g. \"foo=bar&bar=baz\"\n+// Encode encodes the values into ``URL encoded'' form\n+// (\"bar=baz&foo=quux\") sorted by key.\n func (v Values) Encode() string {\n \tif v == nil {\n \t\treturn \"\""}, {"sha": "e8e42569bb368ddf38d22f172ea359bd57e1a9fa", "filename": "libgo/go/os/file_unix.go", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fos%2Ffile_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fos%2Ffile_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Ffile_unix.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -176,14 +176,11 @@ func (f *File) readdir(n int) (fi []FileInfo, err error) {\n \tfi = make([]FileInfo, len(names))\n \tfor i, filename := range names {\n \t\tfip, lerr := lstat(dirname + filename)\n-\t\tif lerr == nil {\n-\t\t\tfi[i] = fip\n-\t\t} else {\n+\t\tif lerr != nil {\n \t\t\tfi[i] = &fileStat{name: filename}\n-\t\t\tif err == nil {\n-\t\t\t\terr = lerr\n-\t\t\t}\n+\t\t\tcontinue\n \t\t}\n+\t\tfi[i] = fip\n \t}\n \treturn fi, err\n }"}, {"sha": "b0fc0256de415a4cdf1e4b3865f5f2aec4baef4d", "filename": "libgo/go/os/os_unix_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fos%2Fos_unix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fos%2Fos_unix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fos_unix_test.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -92,8 +92,8 @@ func TestReaddirWithBadLstat(t *testing.T) {\n \tdefer func() { *LstatP = Lstat }()\n \n \tdirs, err := handle.Readdir(-1)\n-\tif err != ErrInvalid {\n-\t\tt.Fatalf(\"Expected Readdir to return ErrInvalid, got %v\", err)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Expected Readdir to return no error, got %v\", err)\n \t}\n \tfoundfail := false\n \tfor _, dir := range dirs {"}, {"sha": "52d63b2e22936e2dabe2dcbe4ee8b43b9ab65b19", "filename": "libgo/go/runtime/pprof/pprof_test.go", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fruntime%2Fpprof%2Fpprof_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fruntime%2Fpprof%2Fpprof_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fpprof%2Fpprof_test.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -8,6 +8,7 @@ import (\n \t\"bytes\"\n \t\"fmt\"\n \t\"hash/crc32\"\n+\t\"math/big\"\n \t\"os/exec\"\n \t\"regexp\"\n \t\"runtime\"\n@@ -123,6 +124,10 @@ func testCPUProfile(t *testing.T, need []string, f func()) {\n \t\t}\n \t})\n \n+\tif len(need) == 0 {\n+\t\treturn\n+\t}\n+\n \tvar total uintptr\n \tfor i, name := range need {\n \t\ttotal += have[i]\n@@ -237,6 +242,26 @@ func TestGoroutineSwitch(t *testing.T) {\n \t}\n }\n \n+// Test that profiling of division operations is okay, especially on ARM. See issue 6681.\n+func TestMathBigDivide(t *testing.T) {\n+\ttestCPUProfile(t, nil, func() {\n+\t\tt := time.After(5 * time.Second)\n+\t\tpi := new(big.Int)\n+\t\tfor {\n+\t\t\tfor i := 0; i < 100; i++ {\n+\t\t\t\tn := big.NewInt(2646693125139304345)\n+\t\t\t\td := big.NewInt(842468587426513207)\n+\t\t\t\tpi.Div(n, d)\n+\t\t\t}\n+\t\t\tselect {\n+\t\t\tcase <-t:\n+\t\t\t\treturn\n+\t\t\tdefault:\n+\t\t\t}\n+\t\t}\n+\t})\n+}\n+\n // Operating systems that are expected to fail the tests. See issue 6047.\n var badOS = map[string]bool{\n \t\"darwin\":  true,"}, {"sha": "54c9323e0489137a5b19f8f5ab2974c8d2d89014", "filename": "libgo/go/strings/replace.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fstrings%2Freplace.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fstrings%2Freplace.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrings%2Freplace.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -364,17 +364,18 @@ func makeSingleStringReplacer(pattern string, value string) *singleStringReplace\n \n func (r *singleStringReplacer) Replace(s string) string {\n \tvar buf []byte\n-\ti := 0\n+\ti, matched := 0, false\n \tfor {\n \t\tmatch := r.finder.next(s[i:])\n \t\tif match == -1 {\n \t\t\tbreak\n \t\t}\n+\t\tmatched = true\n \t\tbuf = append(buf, s[i:i+match]...)\n \t\tbuf = append(buf, r.value...)\n \t\ti += match + len(r.finder.pattern)\n \t}\n-\tif buf == nil {\n+\tif !matched {\n \t\treturn s\n \t}\n \tbuf = append(buf, s[i:]...)"}, {"sha": "82e4b6ef08ebfa46a60a4a2e4daf745d4cfb9f39", "filename": "libgo/go/strings/replace_test.go", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fstrings%2Freplace_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Fstrings%2Freplace_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrings%2Freplace_test.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -261,10 +261,21 @@ func TestReplacer(t *testing.T) {\n \ttestCases = append(testCases,\n \t\ttestCase{abcMatcher, \"\", \"\"},\n \t\ttestCase{abcMatcher, \"ab\", \"ab\"},\n+\t\ttestCase{abcMatcher, \"abc\", \"[match]\"},\n \t\ttestCase{abcMatcher, \"abcd\", \"[match]d\"},\n \t\ttestCase{abcMatcher, \"cabcabcdabca\", \"c[match][match]d[match]a\"},\n \t)\n \n+\t// Issue 6659 cases (more single string replacer)\n+\n+\tnoHello := NewReplacer(\"Hello\", \"\")\n+\ttestCases = append(testCases,\n+\t\ttestCase{noHello, \"Hello\", \"\"},\n+\t\ttestCase{noHello, \"Hellox\", \"x\"},\n+\t\ttestCase{noHello, \"xHello\", \"x\"},\n+\t\ttestCase{noHello, \"xHellox\", \"xx\"},\n+\t)\n+\n \t// No-arg test cases.\n \n \tnop := NewReplacer()"}, {"sha": "52dc166dd93c2417da92322fe3e47482e95fcc09", "filename": "libgo/go/testing/testing.go", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Ftesting%2Ftesting.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Ftesting%2Ftesting.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftesting%2Ftesting.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -73,17 +73,19 @@\n //\n // Example functions without output comments are compiled but not executed.\n //\n-// The naming convention to declare examples for a function F, a type T and\n+// The naming convention to declare examples for the package, a function F, a type T and\n // method M on type T are:\n //\n+//     func Example() { ... }\n //     func ExampleF() { ... }\n //     func ExampleT() { ... }\n //     func ExampleT_M() { ... }\n //\n-// Multiple example functions for a type/function/method may be provided by\n+// Multiple example functions for a package/type/function/method may be provided by\n // appending a distinct suffix to the name. The suffix must start with a\n // lower-case letter.\n //\n+//     func Example_suffix() { ... }\n //     func ExampleF_suffix() { ... }\n //     func ExampleT_suffix() { ... }\n //     func ExampleT_M_suffix() { ... }"}, {"sha": "6cd535f6b197a76fdf55dd3d96c883451ae10459", "filename": "libgo/go/time/export_test.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Ftime%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Ftime%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fexport_test.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -18,4 +18,7 @@ func ForceUSPacificForTesting() {\n \tlocalOnce.Do(initTestingZone)\n }\n \n-var ParseTimeZone = parseTimeZone\n+var (\n+\tForceZipFileForTesting = forceZipFileForTesting\n+\tParseTimeZone          = parseTimeZone\n+)"}, {"sha": "53ae97ea0afd280524b201f0c11df0ff87a482cc", "filename": "libgo/go/time/time_test.go", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Ftime%2Ftime_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Ftime%2Ftime_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Ftime_test.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -578,6 +578,18 @@ func TestParseInSydney(t *testing.T) {\n \t}\n }\n \n+func TestLoadLocationZipFile(t *testing.T) {\n+\tt.Skip(\"gccgo does not use the zip file\")\n+\n+\tForceZipFileForTesting(true)\n+\tdefer ForceZipFileForTesting(false)\n+\n+\t_, err := LoadLocation(\"Australia/Sydney\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+}\n+\n var rubyTests = []ParseTest{\n \t{\"RubyDate\", RubyDate, \"Thu Feb 04 21:00:57 -0800 2010\", true, true, 1, 0},\n \t// Ignore the time zone in the test. If it parses, it'll be OK."}, {"sha": "0e8f3811bedc1d4d1919e9c717651dfffa5cb881", "filename": "libgo/go/time/zoneinfo_plan9.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Ftime%2Fzoneinfo_plan9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Ftime%2Fzoneinfo_plan9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fzoneinfo_plan9.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -154,3 +154,7 @@ func loadLocation(name string) (*Location, error) {\n \t}\n \treturn nil, errors.New(\"unknown time zone \" + name)\n }\n+\n+func forceZipFileForTesting(zipOnly bool) {\n+\t// We only use the zip file anyway.\n+}"}, {"sha": "1a4d115b932cd29b3270209da332915e5b464b3c", "filename": "libgo/go/time/zoneinfo_unix.go", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Ftime%2Fzoneinfo_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Ftime%2Fzoneinfo_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fzoneinfo_unix.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -28,7 +28,19 @@ var zoneDirs = []string{\n \t\"/usr/share/zoneinfo/\",\n \t\"/usr/share/lib/zoneinfo/\",\n \t\"/usr/lib/locale/TZ/\",\n-\truntime.GOROOT() + \"/lib/time/zoneinfo/\",\n+\truntime.GOROOT() + \"/lib/time/zoneinfo.zip\",\n+}\n+\n+var origZoneDirs = zoneDirs\n+\n+func forceZipFileForTesting(zipOnly bool) {\n+\tzoneDirs = make([]string, len(origZoneDirs))\n+\tcopy(zoneDirs, origZoneDirs)\n+\tif zipOnly {\n+\t\tfor i := 0; i < len(zoneDirs)-1; i++ {\n+\t\t\tzoneDirs[i] = \"/XXXNOEXIST\"\n+\t\t}\n+\t}\n }\n \n func initLocal() {"}, {"sha": "be4e5c13ff018104e1d86503b679dc7f68cc9efa", "filename": "libgo/go/time/zoneinfo_windows.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Ftime%2Fzoneinfo_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815ca4d336e254a4869946343460afc8ff6b21c7/libgo%2Fgo%2Ftime%2Fzoneinfo_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fzoneinfo_windows.go?ref=815ca4d336e254a4869946343460afc8ff6b21c7", "patch": "@@ -264,3 +264,7 @@ func loadLocation(name string) (*Location, error) {\n \t}\n \treturn nil, errors.New(\"unknown time zone \" + name)\n }\n+\n+func forceZipFileForTesting(zipOnly bool) {\n+\t// We only use the zip file anyway.\n+}"}]}