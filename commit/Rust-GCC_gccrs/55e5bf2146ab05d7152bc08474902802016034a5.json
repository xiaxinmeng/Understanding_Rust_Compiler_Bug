{"sha": "55e5bf2146ab05d7152bc08474902802016034a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVlNWJmMjE0NmFiMDVkNzE1MmJjMDg0NzQ5MDI4MDIwMTYwMzRhNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-10T00:03:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-10T00:03:23Z"}, "message": "DR 1402 PR c++/53733\n\n\tDR 1402\n\tPR c++/53733\n\t* cp-tree.h (FNDECL_SUPPRESS_IMPLICIT_DECL): New.\n\t(struct lang_decl_fn): Add suppress_implicit_decl field.\n\t* method.c (implicitly_declare_fn): Check it.\n\t(process_subob_fn): Add no_implicit_p parm.\n\t(walk_field_subobs, synthesized_method_walk): Likewise.\n\t(maybe_explain_implicit_delete): Adjust.\n\t(explain_implicit_non_constexpr): Adjust.\n\nFrom-SVN: r189396", "tree": {"sha": "dfa4dbe4fedcfc227486b3bcbf1eba6c29b00bd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfa4dbe4fedcfc227486b3bcbf1eba6c29b00bd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55e5bf2146ab05d7152bc08474902802016034a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e5bf2146ab05d7152bc08474902802016034a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55e5bf2146ab05d7152bc08474902802016034a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e5bf2146ab05d7152bc08474902802016034a5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60b9991b6105eeba6f825a2d300a9c35d2bfdf81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b9991b6105eeba6f825a2d300a9c35d2bfdf81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60b9991b6105eeba6f825a2d300a9c35d2bfdf81"}], "stats": {"total": 100, "additions": 77, "deletions": 23}, "files": [{"sha": "310b44259b987bb97eb3c381a6ef8944520be689", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e5bf2146ab05d7152bc08474902802016034a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e5bf2146ab05d7152bc08474902802016034a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=55e5bf2146ab05d7152bc08474902802016034a5", "patch": "@@ -1,5 +1,15 @@\n 2012-07-10  Jason Merrill  <jason@redhat.com>\n \n+\tDR 1402\n+\tPR c++/53733\n+\t* cp-tree.h (FNDECL_SUPPRESS_IMPLICIT_DECL): New.\n+\t(struct lang_decl_fn): Add suppress_implicit_decl field.\n+\t* method.c (implicitly_declare_fn): Check it.\n+\t(process_subob_fn): Add no_implicit_p parm.\n+\t(walk_field_subobs, synthesized_method_walk): Likewise.\n+\t(maybe_explain_implicit_delete): Adjust.\n+\t(explain_implicit_non_constexpr): Adjust.\n+\n \t* method.c (synthesized_method_walk): Avoid changing\n \tEH spec based on cleanups in other places, too.\n "}, {"sha": "10efa2a663a43797f74569d36628132199ed40f9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e5bf2146ab05d7152bc08474902802016034a5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e5bf2146ab05d7152bc08474902802016034a5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=55e5bf2146ab05d7152bc08474902802016034a5", "patch": "@@ -1940,7 +1940,7 @@ struct GTY(()) lang_decl_fn {\n   unsigned thunk_p : 1;\n   unsigned this_thunk_p : 1;\n   unsigned hidden_friend_p : 1;\n-  /* 1 spare bit.  */\n+  unsigned suppress_implicit_decl : 1;\n \n   /* For a non-thunk function decl, this is a tree list of\n      friendly classes. For a thunk function decl, it is the\n@@ -3107,6 +3107,12 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define DECL_HIDDEN_FRIEND_P(NODE) \\\n   (LANG_DECL_FN_CHECK (DECL_COMMON_CHECK (NODE))->hidden_friend_p)\n \n+/* Nonzero if NODE is a FUNCTION_DECL generated by implicitly_declare_fn\n+   that we shouldn't actually declare implicitly; it is only used for\n+   comparing to an =default declaration.  */\n+#define FNDECL_SUPPRESS_IMPLICIT_DECL(NODE) \\\n+  (LANG_DECL_FN_CHECK (DECL_COMMON_CHECK (NODE))->suppress_implicit_decl)\n+\n /* Nonzero if DECL has been declared threadprivate by\n    #pragma omp threadprivate.  */\n #define CP_DECL_THREADPRIVATE_P(DECL) \\"}, {"sha": "79edf81b24f7da28a1fd54c1318fdddb0dc9c0eb", "filename": "gcc/cp/method.c", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e5bf2146ab05d7152bc08474902802016034a5/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e5bf2146ab05d7152bc08474902802016034a5/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=55e5bf2146ab05d7152bc08474902802016034a5", "patch": "@@ -922,7 +922,7 @@ get_copy_assign (tree type)\n \n static void\n process_subob_fn (tree fn, bool move_p, tree *spec_p, bool *trivial_p,\n-\t\t  bool *deleted_p, bool *constexpr_p,\n+\t\t  bool *deleted_p, bool *constexpr_p, bool *no_implicit_p,\n \t\t  const char *msg, tree arg)\n {\n   if (!fn || fn == error_mark_node)\n@@ -948,12 +948,10 @@ process_subob_fn (tree fn, bool move_p, tree *spec_p, bool *trivial_p,\n \t}\n     }\n \n+  /* Core 1402: A non-trivial copy op suppresses the implicit\n+     declaration of the move ctor/op=.  */\n   if (move_p && !move_fn_p (fn) && !trivial_fn_p (fn))\n-    {\n-      if (msg)\n-\terror (msg, arg);\n-      goto bad;\n-    }\n+    *no_implicit_p = true;\n \n   if (constexpr_p && !DECL_DECLARED_CONSTEXPR_P (fn))\n     {\n@@ -980,8 +978,8 @@ static void\n walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n \t\t   int quals, bool copy_arg_p, bool move_p,\n \t\t   bool assign_p, tree *spec_p, bool *trivial_p,\n-\t\t   bool *deleted_p, bool *constexpr_p, const char *msg,\n-\t\t   int flags, tsubst_flags_t complain)\n+\t\t   bool *deleted_p, bool *constexpr_p, bool *no_implicit_p,\n+\t\t   const char *msg, int flags, tsubst_flags_t complain)\n {\n   tree field;\n   for (field = fields; field; field = DECL_CHAIN (field))\n@@ -1079,7 +1077,8 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n \t{\n \t  walk_field_subobs (TYPE_FIELDS (mem_type), fnname, sfk, quals,\n \t\t\t     copy_arg_p, move_p, assign_p, spec_p, trivial_p,\n-\t\t\t     deleted_p, constexpr_p, msg, flags, complain);\n+\t\t\t     deleted_p, constexpr_p, no_implicit_p,\n+\t\t\t     msg, flags, complain);\n \t  continue;\n \t}\n \n@@ -1096,7 +1095,7 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n       rval = locate_fn_flags (mem_type, fnname, argtype, flags, complain);\n \n       process_subob_fn (rval, move_p, spec_p, trivial_p, deleted_p,\n-\t\t\tconstexpr_p, msg, field);\n+\t\t\tconstexpr_p, no_implicit_p, msg, field);\n     }\n }\n \n@@ -1110,7 +1109,7 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n static void\n synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t\t\t tree *spec_p, bool *trivial_p, bool *deleted_p,\n-\t\t\t bool *constexpr_p, bool diag)\n+\t\t\t bool *constexpr_p, bool *no_implicit_p, bool diag)\n {\n   tree binfo, base_binfo, scope, fnname, rval, argtype;\n   bool move_p, copy_arg_p, assign_p, expected_trivial, check_vdtor;\n@@ -1198,6 +1197,9 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n   if (trivial_p)\n     *trivial_p = expected_trivial;\n \n+  if (no_implicit_p)\n+    *no_implicit_p = false;\n+\n   /* The TYPE_HAS_COMPLEX_* flags tell us about constraints from base\n      class versions and other properties of the type.  But a subobject\n      class can be trivially copyable and yet have overload resolution\n@@ -1256,7 +1258,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n       rval = locate_fn_flags (base_binfo, fnname, argtype, flags, complain);\n \n       process_subob_fn (rval, move_p, spec_p, trivial_p, deleted_p,\n-\t\t\tconstexpr_p, msg, basetype);\n+\t\t\tconstexpr_p, no_implicit_p, msg, basetype);\n       if (ctor_p && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (basetype))\n \t{\n \t  /* In a constructor we also need to check the subobject\n@@ -1269,7 +1271,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t     throw) or exception-specification (a throw from one of the\n \t     dtors would be a double-fault).  */\n \t  process_subob_fn (rval, false, NULL, NULL,\n-\t\t\t    deleted_p, NULL, NULL,\n+\t\t\t    deleted_p, NULL, NULL, NULL,\n \t\t\t    basetype);\n \t}\n \n@@ -1310,13 +1312,13 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t  rval = locate_fn_flags (base_binfo, fnname, argtype, flags, complain);\n \n \t  process_subob_fn (rval, move_p, spec_p, trivial_p, deleted_p,\n-\t\t\t    constexpr_p, msg, basetype);\n+\t\t\t    constexpr_p, no_implicit_p, msg, basetype);\n \t  if (ctor_p && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (basetype))\n \t    {\n \t      rval = locate_fn_flags (base_binfo, complete_dtor_identifier,\n \t\t\t\t      NULL_TREE, flags, complain);\n \t      process_subob_fn (rval, false, NULL, NULL,\n-\t\t\t\tdeleted_p, NULL, NULL,\n+\t\t\t\tdeleted_p, NULL, NULL, NULL,\n \t\t\t\tbasetype);\n \t    }\n \t}\n@@ -1331,13 +1333,14 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t   \"constructor or trivial copy constructor\");\n   walk_field_subobs (TYPE_FIELDS (ctype), fnname, sfk, quals,\n \t\t     copy_arg_p, move_p, assign_p, spec_p, trivial_p,\n-\t\t     deleted_p, constexpr_p, msg, flags, complain);\n+\t\t     deleted_p, constexpr_p, no_implicit_p,\n+\t\t     msg, flags, complain);\n   if (ctor_p)\n     walk_field_subobs (TYPE_FIELDS (ctype), complete_dtor_identifier,\n \t\t       sfk_destructor, TYPE_UNQUALIFIED, false,\n \t\t       false, false, NULL, NULL,\n \t\t       deleted_p, NULL,\n-\t\t       NULL, flags, complain);\n+\t\t       NULL, NULL, flags, complain);\n \n   pop_scope (scope);\n \n@@ -1407,7 +1410,7 @@ maybe_explain_implicit_delete (tree decl)\n \t\t \"definition would be ill-formed:\", decl);\n \t  pop_scope (scope);\n \t  synthesized_method_walk (ctype, sfk, const_p,\n-\t\t\t\t   NULL, NULL, NULL, NULL, true);\n+\t\t\t\t   NULL, NULL, NULL, NULL, NULL, true);\n \t}\n \n       input_location = loc;\n@@ -1427,7 +1430,7 @@ explain_implicit_non_constexpr (tree decl)\n   bool dummy;\n   synthesized_method_walk (DECL_CLASS_CONTEXT (decl),\n \t\t\t   special_function_p (decl), const_p,\n-\t\t\t   NULL, NULL, NULL, &dummy, true);\n+\t\t\t   NULL, NULL, NULL, &dummy, NULL, true);\n }\n \n /* Implicitly declare the special function indicated by KIND, as a\n@@ -1451,6 +1454,7 @@ implicitly_declare_fn (special_function_kind kind, tree type, bool const_p)\n   bool deleted_p;\n   bool trivial_p;\n   bool constexpr_p;\n+  bool no_implicit_p;\n \n   /* Because we create declarations for implicitly declared functions\n      lazily, we may be creating the declaration for a member of TYPE\n@@ -1520,7 +1524,7 @@ implicitly_declare_fn (special_function_kind kind, tree type, bool const_p)\n     }\n \n   synthesized_method_walk (type, kind, const_p, &raises, &trivial_p,\n-\t\t\t   &deleted_p, &constexpr_p, false);\n+\t\t\t   &deleted_p, &constexpr_p, &no_implicit_p, false);\n   /* Don't bother marking a deleted constructor as constexpr.  */\n   if (deleted_p)\n     constexpr_p = false;\n@@ -1585,6 +1589,7 @@ implicitly_declare_fn (special_function_kind kind, tree type, bool const_p)\n       DECL_DELETED_FN (fn) = deleted_p;\n       DECL_DECLARED_CONSTEXPR_P (fn) = constexpr_p;\n     }\n+  FNDECL_SUPPRESS_IMPLICIT_DECL (fn) = no_implicit_p;\n   DECL_EXTERNAL (fn) = true;\n   DECL_NOT_REALLY_EXTERN (fn) = 1;\n   DECL_DECLARED_INLINE_P (fn) = 1;\n@@ -1777,6 +1782,10 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n \t  || sfk == sfk_move_assignment))\n     return NULL_TREE;\n \n+  /* We also suppress implicit move if it would call a non-trivial copy.  */\n+  if (FNDECL_SUPPRESS_IMPLICIT_DECL (fn))\n+    return NULL_TREE;\n+\n   /* A destructor may be virtual.  */\n   if (sfk == sfk_destructor\n       || sfk == sfk_move_assignment"}, {"sha": "9787afecf44b4f1dc62762028794d3b0a159135b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e5bf2146ab05d7152bc08474902802016034a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e5bf2146ab05d7152bc08474902802016034a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=55e5bf2146ab05d7152bc08474902802016034a5", "patch": "@@ -1,5 +1,9 @@\n 2012-07-10  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53733\n+\t* g++.dg/cpp0x/defaulted36.C: New.\n+\t* g++.dg/cpp0x/defaulted21.C: Adjust.\n+\n \t* g++.dg/cpp0x/implicit13.C: Add vbase and member tests.\n \n 2012-07-09  Sterling Augustine  <saugustine@google.com>"}, {"sha": "51505dc460e9af22e42c548dac28f7c6c51796b2", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted21.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e5bf2146ab05d7152bc08474902802016034a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e5bf2146ab05d7152bc08474902802016034a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted21.C?ref=55e5bf2146ab05d7152bc08474902802016034a5", "patch": "@@ -3,7 +3,8 @@\n \n struct U {\n   U();\n-  U(U const&);\n+private:\n+  U(U const&);\t\t\t// { dg-error \"private\" }\n };\n \n struct X {\n@@ -13,7 +14,7 @@ struct X {\n };\n \n X::X(X&&)=default;\t\t// { dg-message \"implicitly deleted\" }\n-// { dg-error \"does not have a move constructor\" \"\" { target *-*-* } 15 }\n+// { dg-prune-output \"within this context\" }\n \n X f() {\n   return X();"}, {"sha": "1360f608e69b9a7d0536a5d12137e79e5f9a4fc8", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted36.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e5bf2146ab05d7152bc08474902802016034a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e5bf2146ab05d7152bc08474902802016034a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted36.C?ref=55e5bf2146ab05d7152bc08474902802016034a5", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/53733\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T>\n+struct wrap\n+{\n+  wrap() = default;\n+  wrap(wrap&&) = default; // Line 5\n+  wrap(const wrap&) = default;\n+\n+  T t;\n+};\n+\n+struct S {\n+  S() = default;\n+  S(const S&){}\n+  S(S&&) = default;\n+};\n+\n+typedef wrap<const S> W;\n+\n+W get() { return W(); } // Line 19\n+\n+int main() {}"}]}