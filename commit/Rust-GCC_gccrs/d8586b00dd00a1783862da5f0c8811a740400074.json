{"sha": "d8586b00dd00a1783862da5f0c8811a740400074", "node_id": "C_kwDOANBUbNoAKGQ4NTg2YjAwZGQwMGExNzgzODYyZGE1ZjBjODgxMWE3NDA0MDAwNzQ", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-28T17:46:15Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-28T17:48:41Z"}, "message": "analyzer: add .fpath.txt dumps to -fdump-analyzer-feasibility\n\nI found this extension to -fdump-analyzer-feasibility very helpful when\ndebugging PR analyzer/105285.\n\ngcc/analyzer/ChangeLog:\n\t* diagnostic-manager.cc (epath_finder::process_worklist_item):\n\tCall dump_feasible_path when a path that reaches the the target\n\tenode is found.\n\t(epath_finder::dump_feasible_path): New.\n\t* engine.cc (feasibility_state::dump_to_pp): New.\n\t* exploded-graph.h (feasibility_state::dump_to_pp): New decl.\n\t* feasible-graph.cc (feasible_graph::dump_feasible_path): New.\n\t* feasible-graph.h (feasible_graph::dump_feasible_path): New\n\tdecls.\n\t* program-point.cc (function_point::print): Fix missing trailing\n\tnewlines.\n\t* program-point.h (program_point::print_source_line): Remove\n\tunimplemented decl.\n\ngcc/ChangeLog:\n\t* doc/invoke.texi (-fdump-analyzer-feasibility): Mention the\n\tfpath.txt output.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "cc23674ed7415bb569e850bc0005b398c65cf225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc23674ed7415bb569e850bc0005b398c65cf225"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8586b00dd00a1783862da5f0c8811a740400074", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8586b00dd00a1783862da5f0c8811a740400074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8586b00dd00a1783862da5f0c8811a740400074", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8586b00dd00a1783862da5f0c8811a740400074/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "509fd16da8528444dccc98cef57a18a295c3f1b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509fd16da8528444dccc98cef57a18a295c3f1b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/509fd16da8528444dccc98cef57a18a295c3f1b4"}], "stats": {"total": 115, "additions": 112, "deletions": 3}, "files": [{"sha": "5bd4cd49cac2a658603fa726d1d6e445deddd0f6", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=d8586b00dd00a1783862da5f0c8811a740400074", "patch": "@@ -112,6 +112,10 @@ class epath_finder\n   void dump_feasible_graph (const exploded_node *target_enode,\n \t\t\t    const char *desc, unsigned diag_idx,\n \t\t\t    const feasible_graph &fg);\n+  void dump_feasible_path (const exploded_node *target_enode,\n+\t\t\t   unsigned diag_idx,\n+\t\t\t   const feasible_graph &fg,\n+\t\t\t   const feasible_node &fnode) const;\n \n   const exploded_graph &m_eg;\n   shortest_exploded_paths *m_sep;\n@@ -510,6 +514,9 @@ epath_finder::process_worklist_item (feasible_worklist *worklist,\n \t\t\t     target_enode->m_index, diag_idx,\n \t\t\t     succ_fnode->get_path_length ());\n \t      *out_best_path = fg->make_epath (succ_fnode);\n+\t      if (flag_dump_analyzer_feasibility)\n+\t\tdump_feasible_path (target_enode, diag_idx, *fg, *succ_fnode);\n+\n \t      /* Success: stop the worklist iteration.  */\n \t      return false;\n \t    }\n@@ -608,6 +615,23 @@ epath_finder::dump_feasible_graph (const exploded_node *target_enode,\n   free (filename);\n }\n \n+/* Dump the path to FNODE to \"BASE_NAME.DIAG_IDX.to-enN.fpath.txt\".  */\n+\n+void\n+epath_finder::dump_feasible_path (const exploded_node *target_enode,\n+\t\t\t\t  unsigned diag_idx,\n+\t\t\t\t  const feasible_graph &fg,\n+\t\t\t\t  const feasible_node &fnode) const\n+{\n+  auto_timevar tv (TV_ANALYZER_DUMP);\n+  pretty_printer pp;\n+  pp_printf (&pp, \"%s.%i.to-en%i.fpath.txt\",\n+\t     dump_base_name, diag_idx, target_enode->m_index);\n+  char *filename = xstrdup (pp_formatted_text (&pp));\n+  fg.dump_feasible_path (fnode, filename);\n+  free (filename);\n+}\n+\n /* class saved_diagnostic.  */\n \n /* saved_diagnostic's ctor."}, {"sha": "e43406e35562e9af7df53b417b4255c53054f2d5", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=d8586b00dd00a1783862da5f0c8811a740400074", "patch": "@@ -4605,6 +4605,15 @@ feasibility_state::maybe_update_for_edge (logger *logger,\n   return true;\n }\n \n+/* Dump this object to PP.  */\n+\n+void\n+feasibility_state::dump_to_pp (pretty_printer *pp,\n+\t\t\t       bool simple, bool multiline) const\n+{\n+  m_model.dump_to_pp (pp, simple, multiline);\n+}\n+\n /* A family of cluster subclasses for use when generating .dot output for\n    exploded graphs (-fdump-analyzer-exploded-graph), for grouping the\n    enodes into hierarchical boxes."}, {"sha": "2dcdcc55b2a2f6ca6dfe8fd962dbd39fa1322c9a", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=d8586b00dd00a1783862da5f0c8811a740400074", "patch": "@@ -1001,6 +1001,8 @@ class feasibility_state\n   const region_model &get_model () const { return m_model; }\n   const auto_sbitmap &get_snodes_visited () const { return m_snodes_visited; }\n \n+  void dump_to_pp (pretty_printer *pp, bool simple, bool multiline) const;\n+\n private:\n   region_model m_model;\n   auto_sbitmap m_snodes_visited;"}, {"sha": "fe7e79fe90229b7c9dc122d3f1e38ace37f9e8f3", "filename": "gcc/analyzer/feasible-graph.cc", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Ffeasible-graph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Ffeasible-graph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ffeasible-graph.cc?ref=d8586b00dd00a1783862da5f0c8811a740400074", "patch": "@@ -218,6 +218,71 @@ feasible_graph::make_epath (feasible_node *fnode) const\n   return epath;\n }\n \n+/* Dump the path to DST_FNODE in textual form to PP.  */\n+\n+void\n+feasible_graph::dump_feasible_path (const feasible_node &dst_fnode,\n+\t\t\t\t    pretty_printer *pp) const\n+{\n+  const feasible_node *fnode = &dst_fnode;\n+\n+  auto_vec<const feasible_edge *> fpath;\n+\n+  /* FG is actually a tree.  Built the path backwards, by walking\n+     backwards from FNODE until we reach the origin.  */\n+  while (fnode->get_inner_node ()->m_index != 0)\n+    {\n+      gcc_assert (fnode->m_preds.length () == 1);\n+      feasible_edge *pred_fedge\n+\t= static_cast <feasible_edge *> (fnode->m_preds[0]);\n+      fpath.safe_push (pred_fedge);\n+      fnode = static_cast <const feasible_node *> (pred_fedge->m_src);\n+    }\n+\n+  /* Now reverse it.  */\n+  fpath.reverse ();\n+\n+  for (unsigned i = 0; i < fpath.length (); i++)\n+    {\n+      const feasible_edge *fedge = fpath[i];\n+      const feasible_node *src_fnode\n+\t= static_cast <const feasible_node *> (fedge->m_src);\n+      const feasible_node *dest_fnode\n+\t= static_cast <const feasible_node *> (fedge->m_dest);\n+\n+      pp_printf (pp, \"fpath[%i]: FN %i (EN %i) -> FN %i (EN %i)\",\n+\t\t i,\n+\t\t src_fnode->get_index (),\n+\t\t src_fnode->get_inner_node ()->m_index,\n+\t\t dest_fnode->get_index (),\n+\t\t dest_fnode->get_inner_node ()->m_index);\n+      pp_newline (pp);\n+      pp_printf (pp, \"  FN %i (EN %i):\",\n+\t\t dest_fnode->get_index (),\n+\t\t dest_fnode->get_inner_node ()->m_index);\n+      pp_newline (pp);\n+      const program_point &point = dest_fnode->get_inner_node ()->get_point ();\n+      point.print (pp, format (true));\n+      dest_fnode->get_state ().dump_to_pp (pp, true, true);\n+      pp_newline (pp);\n+    }\n+}\n+\n+/* Dump the path to DST_FNODE in textual form to FILENAME.  */\n+\n+void\n+feasible_graph::dump_feasible_path (const feasible_node &dst_fnode,\n+\t\t\t\t    const char *filename) const\n+{\n+  FILE *fp = fopen (filename, \"w\");\n+  pretty_printer pp;\n+  pp_format_decoder (&pp) = default_tree_printer;\n+  pp.buffer->stream = fp;\n+  dump_feasible_path (dst_fnode, &pp);\n+  pp_flush (&pp);\n+  fclose (fp);\n+}\n+\n /* Dump stats about this graph to LOGGER.  */\n \n void"}, {"sha": "f1868af3cf8cead6b557738ab549ca0c2a90c9e6", "filename": "gcc/analyzer/feasible-graph.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Ffeasible-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Ffeasible-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ffeasible-graph.h?ref=d8586b00dd00a1783862da5f0c8811a740400074", "patch": "@@ -197,11 +197,17 @@ class feasible_graph : public digraph <fg_traits>\n \n   exploded_path *make_epath (feasible_node *fnode) const;\n \n+  void dump_feasible_path (const feasible_node &dst_fnode,\n+\t\t\t   const char *filename) const;\n+\n   unsigned get_num_infeasible () const { return m_num_infeasible; }\n \n   void log_stats (logger *logger) const;\n \n private:\n+  void dump_feasible_path (const feasible_node &dst_fnode,\n+\t\t\t   pretty_printer *pp) const;\n+\n   unsigned m_num_infeasible;\n };\n "}, {"sha": "8fa7066fea5a4ca75020483a145848d856505fd0", "filename": "gcc/analyzer/program-point.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Fprogram-point.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Fprogram-point.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-point.cc?ref=d8586b00dd00a1783862da5f0c8811a740400074", "patch": "@@ -114,6 +114,8 @@ function_point::print (pretty_printer *pp, const format &f) const\n \n     case PK_ORIGIN:\n       pp_printf (pp, \"origin\");\n+      if (f.m_newlines)\n+\tpp_newline (pp);\n       break;\n \n     case PK_BEFORE_SUPERNODE:\n@@ -156,6 +158,8 @@ function_point::print (pretty_printer *pp, const format &f) const\n \n     case PK_AFTER_SUPERNODE:\n       pp_printf (pp, \"after SN: %i\", m_supernode->m_index);\n+      if (f.m_newlines)\n+\tpp_newline (pp);\n       break;\n     }\n }"}, {"sha": "6084c9e3004d9398e19dc772ec5891a7af03c603", "filename": "gcc/analyzer/program-point.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Fprogram-point.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fanalyzer%2Fprogram-point.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-point.h?ref=d8586b00dd00a1783862da5f0c8811a740400074", "patch": "@@ -179,7 +179,6 @@ class program_point\n   }\n \n   void print (pretty_printer *pp, const format &f) const;\n-  void print_source_line (pretty_printer *pp) const;\n   void dump () const;\n \n   json::object *to_json () const;"}, {"sha": "b2d2cea455731f643a8257cc1eb6805b99937206", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8586b00dd00a1783862da5f0c8811a740400074/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d8586b00dd00a1783862da5f0c8811a740400074", "patch": "@@ -10198,8 +10198,8 @@ diagnostic to @file{@var{file}.@var{idx}.@var{kind}.epath.txt}.\n @opindex dump-analyzer-feasibility\n Dump internal details about the analyzer's search for feasible paths.\n The details are written in a form suitable for viewing with GraphViz\n-to filenames of the form @file{@var{file}.*.fg.dot} and\n-@file{@var{file}.*.tg.dot}.\n+to filenames of the form @file{@var{file}.*.fg.dot},\n+@file{@var{file}.*.tg.dot}, and @file{@var{file}.*.fpath.txt}.\n \n @item -fdump-analyzer-json\n @opindex fdump-analyzer-json"}]}