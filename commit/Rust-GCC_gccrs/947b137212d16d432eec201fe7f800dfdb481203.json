{"sha": "947b137212d16d432eec201fe7f800dfdb481203", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ3YjEzNzIxMmQxNmQ0MzJlZWMyMDFmZTdmODAwZGZkYjQ4MTIwMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-02-01T11:03:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-02-01T11:03:36Z"}, "message": "[AArch64] Use all SVE LD1RQ variants\n\nThe fallback way of handling a repeated 128-bit constant vector for SVE\nis to force the 128 bits to the constant pool and use LD1RQ to load it.\nPreviously the code always used the byte variant of LD1RQ (LD1RQB),\nwith a preceding BSWAP for big-endian targets.  However, that BSWAP\ndoesn't handle all cases correctly.\n\nThe simplest fix seemed to be to use the LD1RQ appropriate for the\nelement size.\n\nThis helps to fix some of the sve/slp_*.c tests for aarch64_be,\nalthough a later patch is needed as well.\n\n2018-02-01  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (sve_ld1rq): Replace with...\n\t(*sve_ld1rq<Vesize>): ... this new pattern.  Handle all element sizes,\n\tnot just bytes.\n\t* config/aarch64/aarch64.c (aarch64_expand_sve_widened_duplicate):\n\tRemove BSWAP handing for big-endian targets and use the form of\n\tLD1RQ appropariate for the mode.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/slp_2.c: Expect LD1RQD rather than LD1RQB.\n\t* gcc.target/aarch64/sve/slp_3.c: Expect LD1RQW rather than LD1RQB.\n\t* gcc.target/aarch64/sve/slp_4.c: Expect LD1RQH rather than LD1RQB.\n\nReviewed-by: James Greenhalgh <james.greenhalgh@arm.com>\n\nFrom-SVN: r257287", "tree": {"sha": "115e9e9973ba12da75e94cd4bf7582ef41c8db9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/115e9e9973ba12da75e94cd4bf7582ef41c8db9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/947b137212d16d432eec201fe7f800dfdb481203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947b137212d16d432eec201fe7f800dfdb481203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/947b137212d16d432eec201fe7f800dfdb481203", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947b137212d16d432eec201fe7f800dfdb481203/comments", "author": null, "committer": null, "parents": [{"sha": "f9093f23517498f99768816fb11849b798db85e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9093f23517498f99768816fb11849b798db85e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9093f23517498f99768816fb11849b798db85e9"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "36d3f50ce9e3078abe3c78b9e2e6e38eae49573f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947b137212d16d432eec201fe7f800dfdb481203/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947b137212d16d432eec201fe7f800dfdb481203/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=947b137212d16d432eec201fe7f800dfdb481203", "patch": "@@ -1,3 +1,12 @@\n+2018-02-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md (sve_ld1rq): Replace with...\n+\t(*sve_ld1rq<Vesize>): ... this new pattern.  Handle all element sizes,\n+\tnot just bytes.\n+\t* config/aarch64/aarch64.c (aarch64_expand_sve_widened_duplicate):\n+\tRemove BSWAP handing for big-endian targets and use the form of\n+\tLD1RQ appropariate for the mode.\n+\n 2018-02-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* config/aarch64/aarch64.c (aarch64_simd_valid_immediate): Handle"}, {"sha": "068fd8cbf81a15830e8d00541de078eae1303291", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947b137212d16d432eec201fe7f800dfdb481203/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947b137212d16d432eec201fe7f800dfdb481203/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=947b137212d16d432eec201fe7f800dfdb481203", "patch": "@@ -652,14 +652,14 @@\n ;; Load 128 bits from memory and duplicate to fill a vector.  Since there\n ;; are so few operations on 128-bit \"elements\", we don't define a VNx1TI\n ;; and simply use vectors of bytes instead.\n-(define_insn \"sve_ld1rq\"\n-  [(set (match_operand:VNx16QI 0 \"register_operand\" \"=w\")\n-\t(unspec:VNx16QI\n-\t  [(match_operand:VNx16BI 1 \"register_operand\" \"Upl\")\n+(define_insn \"*sve_ld1rq<Vesize>\"\n+  [(set (match_operand:SVE_ALL 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_ALL\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n \t   (match_operand:TI 2 \"aarch64_sve_ld1r_operand\" \"Uty\")]\n \t  UNSPEC_LD1RQ))]\n   \"TARGET_SVE\"\n-  \"ld1rqb\\t%0.b, %1/z, %2\"\n+  \"ld1rq<Vesize>\\t%0.<Vetype>, %1/z, %2\"\n )\n \n ;; Implement a predicate broadcast by shifting the low bit of the scalar"}, {"sha": "ae142b45bdf099ba48a2f1e9deb290e46e9ee0e8", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947b137212d16d432eec201fe7f800dfdb481203/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947b137212d16d432eec201fe7f800dfdb481203/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=947b137212d16d432eec201fe7f800dfdb481203", "patch": "@@ -2787,16 +2787,7 @@ aarch64_expand_sve_widened_duplicate (rtx dest, scalar_int_mode src_mode,\n       return true;\n     }\n \n-  /* The bytes are loaded in little-endian order, so do a byteswap on\n-     big-endian targets.  */\n-  if (BYTES_BIG_ENDIAN)\n-    {\n-      src = simplify_unary_operation (BSWAP, src_mode, src, src_mode);\n-      if (!src)\n-\treturn NULL_RTX;\n-    }\n-\n-  /* Use LD1RQ to load the 128 bits from memory.  */\n+  /* Use LD1RQ[BHWD] to load the 128 bits from memory.  */\n   src = force_const_mem (src_mode, src);\n   if (!src)\n     return false;\n@@ -2808,8 +2799,12 @@ aarch64_expand_sve_widened_duplicate (rtx dest, scalar_int_mode src_mode,\n       src = replace_equiv_address (src, addr);\n     }\n \n-  rtx ptrue = force_reg (VNx16BImode, CONSTM1_RTX (VNx16BImode));\n-  emit_insn (gen_sve_ld1rq (gen_lowpart (VNx16QImode, dest), ptrue, src));\n+  machine_mode mode = GET_MODE (dest);\n+  unsigned int elem_bytes = GET_MODE_UNIT_SIZE (mode);\n+  machine_mode pred_mode = aarch64_sve_pred_mode (elem_bytes).require ();\n+  rtx ptrue = force_reg (pred_mode, CONSTM1_RTX (pred_mode));\n+  src = gen_rtx_UNSPEC (mode, gen_rtvec (2, ptrue, src), UNSPEC_LD1RQ);\n+  emit_insn (gen_rtx_SET (dest, src));\n   return true;\n }\n "}, {"sha": "f440d1e42c8c5be7920fcccbc99c7a93d29f7c3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947b137212d16d432eec201fe7f800dfdb481203/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947b137212d16d432eec201fe7f800dfdb481203/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=947b137212d16d432eec201fe7f800dfdb481203", "patch": "@@ -1,3 +1,9 @@\n+2018-02-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/slp_2.c: Expect LD1RQD rather than LD1RQB.\n+\t* gcc.target/aarch64/sve/slp_3.c: Expect LD1RQW rather than LD1RQB.\n+\t* gcc.target/aarch64/sve/slp_4.c: Expect LD1RQH rather than LD1RQB.\n+\n 2018-02-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/81661"}, {"sha": "657abb0e902ee99da281363da64a91a45ba218a5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947b137212d16d432eec201fe7f800dfdb481203/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947b137212d16d432eec201fe7f800dfdb481203/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_2.c?ref=947b137212d16d432eec201fe7f800dfdb481203", "patch": "@@ -32,7 +32,7 @@ TEST_ALL (VEC_PERM)\n /* { dg-final { scan-assembler-times {\\tld1rh\\tz[0-9]+\\.h, } 2 } } */\n /* { dg-final { scan-assembler-times {\\tld1rw\\tz[0-9]+\\.s, } 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1rd\\tz[0-9]+\\.d, } 3 } } */\n-/* { dg-final { scan-assembler-times {\\tld1rqb\\tz[0-9]+\\.b, } 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1rqd\\tz[0-9]+\\.d, } 3 } } */\n /* { dg-final { scan-assembler-not {\\tzip1\\t} } } */\n /* { dg-final { scan-assembler-not {\\tzip2\\t} } } */\n "}, {"sha": "dd47502134b530a0ccb007758b5290f13783d412", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947b137212d16d432eec201fe7f800dfdb481203/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947b137212d16d432eec201fe7f800dfdb481203/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_3.c?ref=947b137212d16d432eec201fe7f800dfdb481203", "patch": "@@ -36,7 +36,7 @@ TEST_ALL (VEC_PERM)\n /* 1 for each 16-bit type and 4 for double.  */\n /* { dg-final { scan-assembler-times {\\tld1rd\\tz[0-9]+\\.d, } 7 } } */\n /* 1 for each 32-bit type.  */\n-/* { dg-final { scan-assembler-times {\\tld1rqb\\tz[0-9]+\\.b, } 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1rqw\\tz[0-9]+\\.s, } 3 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #41\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #25\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #31\\n} 2 } } */"}, {"sha": "026fa8c82af0a10589cab5eeffb865cf3dfdba4f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947b137212d16d432eec201fe7f800dfdb481203/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947b137212d16d432eec201fe7f800dfdb481203/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_4.c?ref=947b137212d16d432eec201fe7f800dfdb481203", "patch": "@@ -38,7 +38,7 @@ TEST_ALL (VEC_PERM)\n /* 1 for each 8-bit type, 4 for each 32-bit type and 8 for double.  */\n /* { dg-final { scan-assembler-times {\\tld1rd\\tz[0-9]+\\.d, } 22 } } */\n /* 1 for each 16-bit type.  */\n-/* { dg-final { scan-assembler-times {\\tld1rqb\\tz[0-9]\\.b, } 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1rqh\\tz[0-9]\\.h, } 3 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #99\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #11\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #17\\n} 2 } } */"}]}