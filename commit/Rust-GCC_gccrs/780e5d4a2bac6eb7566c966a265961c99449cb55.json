{"sha": "780e5d4a2bac6eb7566c966a265961c99449cb55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgwZTVkNGEyYmFjNmViNzU2NmM5NjZhMjY1OTYxYzk5NDQ5Y2I1NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-19T07:21:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-19T07:30:03Z"}, "message": "openmp: Handle lastprivate on combined target correctly [PR99928]\n\nThis patch deals with 2 issues:\n1) the gimplifier couldn't differentiate between\n #pragma omp parallel master\n #pragma omp taskloop simd\nand\n #pragma omp parallel master taskloop simd\nwhen there is a significant difference for clause handling between\nthe two; as master construct doesn't have any clauses, we don't currently\nrepresent it during gimplification by an gimplification omp context at all,\nso this patch makes sure we don't set OMP_PARALLEL_COMBINED on parallel master\nwhen not combined further.  If we ever add a separate master context during\ngimplification, we'd use ORT_COMBINED_MASTER vs. ORT_MASTER (or MASKED probably).\n2) lastprivate when combined with target should be map(tofrom:) on the target,\nthis change handles it only when not combined with firstprivate though, that\nwill need further work (similarly to linear or reduction).\n\n2021-05-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/99928\ngcc/\n\t* tree.h (OMP_MASTER_COMBINED): Define.\n\t* gimplify.c (gimplify_scan_omp_clauses): Rewrite lastprivate\n\thandling for outer combined/composite constructs to a loop.\n\tHandle lastprivate on combined target.\n\t(gimplify_expr): Formatting fix.\ngcc/c/\n\t* c-parser.c (c_parser_omp_master): Set OMP_MASTER_COMBINED on\n\tmaster when combined with taskloop.\n\t(c_parser_omp_parallel): Don't set OMP_PARALLEL_COMBINED on\n\tparallel master when not combined with taskloop.\ngcc/cp/\n\t* parser.c (cp_parser_omp_master): Set OMP_MASTER_COMBINED on\n\tmaster when combined with taskloop.\n\t(cp_parser_omp_parallel): Don't set OMP_PARALLEL_COMBINED on\n\tparallel master when not combined with taskloop.\ngcc/testsuite/\n\t* c-c++-common/gomp/pr99928-2.c: Remove all xfails.\n\t* c-c++-common/gomp/pr99928-12.c: New test.", "tree": {"sha": "510b86779d95345c176551b89007e22cb017b275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/510b86779d95345c176551b89007e22cb017b275"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/780e5d4a2bac6eb7566c966a265961c99449cb55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/780e5d4a2bac6eb7566c966a265961c99449cb55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/780e5d4a2bac6eb7566c966a265961c99449cb55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/780e5d4a2bac6eb7566c966a265961c99449cb55/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6c62ba41d905db5c10f573d0e0faa84656f1731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c62ba41d905db5c10f573d0e0faa84656f1731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c62ba41d905db5c10f573d0e0faa84656f1731"}], "stats": {"total": 194, "additions": 108, "deletions": 86}, "files": [{"sha": "b9930d487fde93d2c2401617d295572274f87d8a", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780e5d4a2bac6eb7566c966a265961c99449cb55/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780e5d4a2bac6eb7566c966a265961c99449cb55/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=780e5d4a2bac6eb7566c966a265961c99449cb55", "patch": "@@ -18826,6 +18826,7 @@ c_parser_omp_master (location_t loc, c_parser *parser,\n \t  if (ret == NULL_TREE)\n \t    return ret;\n \t  ret = c_finish_omp_master (loc, block);\n+\t  OMP_MASTER_COMBINED (ret) = 1;\n \t  return ret;\n \t}\n     }\n@@ -19126,7 +19127,16 @@ c_parser_omp_parallel (location_t loc, c_parser *parser,\n \t\t\t\t\tblock);\n \t  if (ret == NULL)\n \t    return ret;\n-\t  OMP_PARALLEL_COMBINED (stmt) = 1;\n+\t  /* master doesn't have any clauses and during gimplification\n+\t     isn't represented by a gimplification omp context, so for\n+\t     #pragma omp parallel master don't set OMP_PARALLEL_COMBINED,\n+\t     so that\n+\t     #pragma omp parallel master\n+\t     #pragma omp taskloop simd lastprivate (x)\n+\t     isn't confused with\n+\t     #pragma omp parallel master taskloop simd lastprivate (x)  */\n+\t  if (OMP_MASTER_COMBINED (ret))\n+\t    OMP_PARALLEL_COMBINED (stmt) = 1;\n \t  return stmt;\n \t}\n       else if (strcmp (p, \"loop\") == 0)"}, {"sha": "f3503b13a5a52431d32f451c87717814e2ed9319", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780e5d4a2bac6eb7566c966a265961c99449cb55/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780e5d4a2bac6eb7566c966a265961c99449cb55/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=780e5d4a2bac6eb7566c966a265961c99449cb55", "patch": "@@ -40922,7 +40922,9 @@ cp_parser_omp_master (cp_parser *parser, cp_token *pragma_tok,\n \t  tree body = finish_omp_structured_block (sb);\n \t  if (ret == NULL)\n \t    return ret;\n-\t  return c_finish_omp_master (loc, body);\n+\t  ret = c_finish_omp_master (loc, body);\n+\t  OMP_MASTER_COMBINED (ret) = 1;\n+\t  return ret;\n \t}\n     }\n   if (!flag_openmp)  /* flag_openmp_simd  */\n@@ -41206,7 +41208,16 @@ cp_parser_omp_parallel (cp_parser *parser, cp_token *pragma_tok,\n \t\t\t\t      block);\n \t  if (ret == NULL_TREE)\n \t    return ret;\n-\t  OMP_PARALLEL_COMBINED (stmt) = 1;\n+\t  /* master doesn't have any clauses and during gimplification\n+\t     isn't represented by a gimplification omp context, so for\n+\t     #pragma omp parallel master don't set OMP_PARALLEL_COMBINED,\n+\t     so that\n+\t     #pragma omp parallel master\n+\t     #pragma omp taskloop simd lastprivate (x)\n+\t     isn't confused with\n+\t     #pragma omp parallel master taskloop simd lastprivate (x)  */\n+\t  if (OMP_MASTER_COMBINED (ret))\n+\t    OMP_PARALLEL_COMBINED (stmt) = 1;\n \t  return stmt;\n \t}\n       else if (strcmp (p, \"loop\") == 0)"}, {"sha": "2730f2251874999af2cfa48ec4f0fb7a64834bf5", "filename": "gcc/gimplify.c", "status": "modified", "additions": 38, "deletions": 65, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780e5d4a2bac6eb7566c966a265961c99449cb55/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780e5d4a2bac6eb7566c966a265961c99449cb55/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=780e5d4a2bac6eb7566c966a265961c99449cb55", "patch": "@@ -8642,75 +8642,48 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t    }\n \t  if (OMP_CLAUSE_LASTPRIVATE_CONDITIONAL (c))\n \t    flags |= GOVD_LASTPRIVATE_CONDITIONAL;\n-\t  if (outer_ctx\n-\t      && (outer_ctx->region_type == ORT_COMBINED_PARALLEL\n-\t\t  || ((outer_ctx->region_type & ORT_COMBINED_TEAMS)\n-\t\t      == ORT_COMBINED_TEAMS))\n-\t      && splay_tree_lookup (outer_ctx->variables,\n-\t\t\t\t    (splay_tree_key) decl) == NULL)\n-\t    {\n-\t      omp_add_variable (outer_ctx, decl, GOVD_SHARED | GOVD_SEEN);\n-\t      if (outer_ctx->outer_context)\n-\t\tomp_notice_variable (outer_ctx->outer_context, decl, true);\n-\t    }\n-\t  else if (outer_ctx\n-\t\t   && (outer_ctx->region_type & ORT_TASK) != 0\n-\t\t   && outer_ctx->combined_loop\n-\t\t   && splay_tree_lookup (outer_ctx->variables,\n-\t\t\t\t\t (splay_tree_key) decl) == NULL)\n-\t    {\n-\t      omp_add_variable (outer_ctx, decl, GOVD_LASTPRIVATE | GOVD_SEEN);\n-\t      if (outer_ctx->outer_context)\n-\t\tomp_notice_variable (outer_ctx->outer_context, decl, true);\n-\t    }\n-\t  else if (outer_ctx\n-\t\t   && (outer_ctx->region_type == ORT_WORKSHARE\n-\t\t       || outer_ctx->region_type == ORT_ACC)\n-\t\t   && outer_ctx->combined_loop\n-\t\t   && splay_tree_lookup (outer_ctx->variables,\n-\t\t\t\t\t (splay_tree_key) decl) == NULL\n-\t\t   && !omp_check_private (outer_ctx, decl, false))\n-\t    {\n-\t      omp_add_variable (outer_ctx, decl, GOVD_LASTPRIVATE | GOVD_SEEN);\n-\t      if (outer_ctx->outer_context\n-\t\t  && (outer_ctx->outer_context->region_type\n-\t\t      == ORT_COMBINED_PARALLEL)\n-\t\t  && splay_tree_lookup (outer_ctx->outer_context->variables,\n+\t  struct gimplify_omp_ctx *octx;\n+\t  for (octx = outer_ctx; octx; octx = octx->outer_context)\n+\t    {\n+\t      if ((octx->region_type == ORT_COMBINED_PARALLEL\n+\t\t   || ((octx->region_type & ORT_COMBINED_TEAMS)\n+\t\t\t== ORT_COMBINED_TEAMS))\n+\t\t  && splay_tree_lookup (octx->variables,\n \t\t\t\t\t(splay_tree_key) decl) == NULL)\n \t\t{\n-\t\t  struct gimplify_omp_ctx *octx = outer_ctx->outer_context;\n \t\t  omp_add_variable (octx, decl, GOVD_SHARED | GOVD_SEEN);\n-\t\t  if (octx->outer_context)\n-\t\t    {\n-\t\t      octx = octx->outer_context;\n-\t\t      if (octx->region_type == ORT_WORKSHARE\n-\t\t\t  && octx->combined_loop\n-\t\t\t  && splay_tree_lookup (octx->variables,\n-\t\t\t\t\t\t(splay_tree_key) decl) == NULL\n-\t\t\t  && !omp_check_private (octx, decl, false))\n-\t\t\t{\n-\t\t\t  omp_add_variable (octx, decl,\n-\t\t\t\t\t    GOVD_LASTPRIVATE | GOVD_SEEN);\n-\t\t\t  octx = octx->outer_context;\n-\t\t\t  if (octx\n-\t\t\t      && ((octx->region_type & ORT_COMBINED_TEAMS)\n-\t\t\t\t  == ORT_COMBINED_TEAMS)\n-\t\t\t      && (splay_tree_lookup (octx->variables,\n-\t\t\t\t\t\t     (splay_tree_key) decl)\n-\t\t\t\t  == NULL))\n-\t\t\t    {\n-\t\t\t      omp_add_variable (octx, decl,\n-\t\t\t\t\t\tGOVD_SHARED | GOVD_SEEN);\n-\t\t\t      octx = octx->outer_context;\n-\t\t\t    }\n-\t\t\t}\n-\t\t      if (octx)\n-\t\t\tomp_notice_variable (octx, decl, true);\n-\t\t    }\n+\t\t  continue;\n \t\t}\n-\t      else if (outer_ctx->outer_context)\n-\t\tomp_notice_variable (outer_ctx->outer_context, decl, true);\n+\t      if ((octx->region_type & ORT_TASK) != 0\n+\t\t  && octx->combined_loop\n+\t\t  && splay_tree_lookup (octx->variables,\n+\t\t\t\t\t(splay_tree_key) decl) == NULL)\n+\t\t{\n+\t\t  omp_add_variable (octx, decl, GOVD_LASTPRIVATE | GOVD_SEEN);\n+\t\t  continue;\n+\t\t}\n+\t      if ((octx->region_type == ORT_WORKSHARE\n+\t\t   || octx->region_type == ORT_ACC)\n+\t\t  && octx->combined_loop\n+\t\t  && splay_tree_lookup (octx->variables,\n+\t\t\t\t\t(splay_tree_key) decl) == NULL\n+\t\t  && !omp_check_private (octx, decl, false))\n+\t\t{\n+\t\t  omp_add_variable (octx, decl, GOVD_LASTPRIVATE | GOVD_SEEN);\n+\t\t  continue;\n+\t\t}\n+\t      if (octx->region_type == ORT_COMBINED_TARGET\n+\t\t  && splay_tree_lookup (octx->variables,\n+\t\t\t\t\t(splay_tree_key) decl) == NULL)\n+\t\t{\n+\t\t  omp_add_variable (octx, decl, GOVD_MAP | GOVD_SEEN);\n+\t\t  octx = octx->outer_context;\n+\t\t  break;\n+\t\t}\n+\t      break;\n \t    }\n+\t  if (octx && octx != outer_ctx)\n+\t    omp_notice_variable (octx, decl, true);\n \t  goto do_add;\n \tcase OMP_CLAUSE_REDUCTION:\n \t  if (OMP_CLAUSE_REDUCTION_TASK (c))\n@@ -14643,7 +14616,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t        g = gimple_build_omp_section (body);\n \t        break;\n \t      case OMP_MASTER:\n-\t        g = gimple_build_omp_master (body);\n+\t\tg = gimple_build_omp_master (body);\n \t\tbreak;\n \t      case OMP_ORDERED:\n \t\tg = gimplify_omp_ordered (*expr_p, body);"}, {"sha": "be0c5c0315df680380fedce7bdcb1199e8ea3281", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-12.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780e5d4a2bac6eb7566c966a265961c99449cb55/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780e5d4a2bac6eb7566c966a265961c99449cb55/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-12.c?ref=780e5d4a2bac6eb7566c966a265961c99449cb55", "patch": "@@ -0,0 +1,23 @@\n+/* PR middle-end/99928 */\n+/* { dg-do compile } */\n+\n+int\n+foo (void)\n+{\n+  int l = 0;\n+  #pragma omp parallel master taskloop simd lastprivate (l) default(none)\t/* { dg-bogus \"'l' not specified in enclosing 'parallel'\" } */\n+  for (int i = 0; i < 16; i++)\n+    l = i;\n+  return l;\n+}\n+\n+int\n+bar (void)\n+{\n+  int l = 0;\n+  #pragma omp parallel master default(none)\t/* { dg-message \"enclosing 'parallel'\" } */\n+  #pragma omp taskloop simd lastprivate (l)\t/* { dg-error \"'l' not specified in enclosing 'parallel'\" } */\n+  for (int i = 0; i < 16; i++)\n+    l = i;\n+  return l;\n+}"}, {"sha": "6ba3d46907c662a16d632badb064bd698e8a604d", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-2.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780e5d4a2bac6eb7566c966a265961c99449cb55/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780e5d4a2bac6eb7566c966a265961c99449cb55/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-2.c?ref=780e5d4a2bac6eb7566c966a265961c99449cb55", "patch": "@@ -92,47 +92,47 @@ bar (void)\n     #pragma omp section\n     l10 = 2;\n   }\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l11\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l11\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l11\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l11\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l11\\\\)\" \"gimple\" } } *//* FIXME.  */\n   #pragma omp target parallel for lastprivate (l11)\n   for (int i = 0; i < 64; i++)\n     l11 = i;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l12\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l12\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l12\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l12\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l12\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l12\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l12\\\\)\" \"gimple\" } } */\n   #pragma omp target parallel for simd lastprivate (l12)\n   for (int i = 0; i < 64; i++)\n     l12 = i;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j01\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j01\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j01\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j01\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j01\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j01\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j01\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   #pragma omp target parallel loop lastprivate (j01)\n   for (j01 = 0; j01 < 64; j01++)\n     ;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l13\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l13\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l13\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l13\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l13\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l13\\\\)\" \"gimple\" } } */\n   #pragma omp target teams distribute lastprivate (l13)\n   for (int i = 0; i < 64; i++)\n     l13 = i;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l14\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l14\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l14\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l14\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l14\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l14\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l14\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l14\\\\)\" \"gimple\" } } *//* FIXME.  */\n   #pragma omp target teams distribute parallel for lastprivate (l14)\n   for (int i = 0; i < 64; i++)\n     l14 = i;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l15\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l15\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l15\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l15\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l15\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l15\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l15\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n@@ -141,16 +141,16 @@ bar (void)\n   #pragma omp target teams distribute parallel for simd lastprivate (l15)\n   for (int i = 0; i < 64; i++)\n     l15 = i;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l16\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l16\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l16\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l16\\\\)\" \"gimple\" } } */\n   #pragma omp target teams distribute simd lastprivate (l16)\n   for (int i = 0; i < 64; i++)\n     l16 = i;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j02\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j02\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j02\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j02\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j02\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j02\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j02\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n@@ -159,8 +159,8 @@ bar (void)\n   #pragma omp target teams loop lastprivate (j02)\n   for (j02 = 0; j02 < 64; j02++)\n     ;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l17\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l17\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l17\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l17\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l17\\\\)\" \"gimple\" } } */\n   #pragma omp target simd lastprivate (l17)\n   for (int i = 0; i < 64; i++)"}, {"sha": "64612cfa3680b497c3cffe360132ba0f35aa6af0", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780e5d4a2bac6eb7566c966a265961c99449cb55/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780e5d4a2bac6eb7566c966a265961c99449cb55/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=780e5d4a2bac6eb7566c966a265961c99449cb55", "patch": "@@ -1502,6 +1502,11 @@ class auto_suppress_location_wrappers\n #define OMP_TARGET_COMBINED(NODE) \\\n   (OMP_TARGET_CHECK (NODE)->base.private_flag)\n \n+/* True on an OMP_MASTER statement if it represents an explicit\n+   combined master constructs.  */\n+#define OMP_MASTER_COMBINED(NODE) \\\n+  (OMP_MASTER_CHECK (NODE)->base.private_flag)\n+\n /* Memory order for OMP_ATOMIC*.  */\n #define OMP_ATOMIC_MEMORY_ORDER(NODE) \\\n   (TREE_RANGE_CHECK (NODE, OMP_ATOMIC, \\"}]}