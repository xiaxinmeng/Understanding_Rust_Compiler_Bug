{"sha": "4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIzYTZiY2JjY2U5YTNlOWI1ODc5MWJhNzJiYWM4ZjllYjY3Y2YzNw==", "commit": {"author": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-02-21T20:46:52Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-02-21T20:46:52Z"}, "message": "altivec.md (altivec_lvxl): Rename as *altivec_lvxl_<mode>_internal and use VM2 iterator instead of V4SI.\n\ngcc:\n\n2014-02-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/altivec.md (altivec_lvxl): Rename as\n\t*altivec_lvxl_<mode>_internal and use VM2 iterator instead of\n\tV4SI.\n\t(altivec_lvxl_<mode>): New define_expand incorporating\n\t-maltivec=be semantics where needed.\n\t(altivec_lvx): Rename as *altivec_lvx_<mode>_internal.\n\t(altivec_lvx_<mode>): New define_expand incorporating -maltivec=be\n\tsemantics where needed.\n\t(altivec_stvx): Rename as *altivec_stvx_<mode>_internal.\n\t(altivec_stvx_<mode>): New define_expand incorporating\n\t-maltivec=be semantics where needed.\n\t(altivec_stvxl): Rename as *altivec_stvxl_<mode>_internal and use\n\tVM2 iterator instead of V4SI.\n\t(altivec_stvxl_<mode>): New define_expand incorporating\n\t-maltivec=be semantics where needed.\n\t* config/rs6000/rs6000-builtin.def: Add new built-in definitions\n\tLVXL_V2DF, LVXL_V2DI, LVXL_V4SF, LVXL_V4SI, LVXL_V8HI, LVXL_V16QI,\n\tLVX_V2DF, LVX_V2DI, LVX_V4SF, LVX_V4SI, LVX_V8HI, LVX_V16QI,\n\tSTVX_V2DF, STVX_V2DI, STVX_V4SF, STVX_V4SI, STVX_V8HI, STVX_V16QI,\n\tSTVXL_V2DF, STVXL_V2DI, STVXL_V4SF, STVXL_V4SI, STVXL_V8HI,\n\tSTVXL_V16QI.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Replace\n\tALTIVEC_BUILTIN_LVX with ALTIVEC_BUILTIN_LVX_<MODE> throughout;\n\tsimilarly for ALTIVEC_BUILTIN_LVXL, ALTIVEC_BUILTIN_STVX, and\n\tALTIVEC_BUILTIN_STVXL.\n\t* config/rs6000/rs6000-protos.h (altivec_expand_lvx_be): New\n\tprototype.\n\t(altivec_expand_stvx_be): Likewise.\n\t* config/rs6000/rs6000.c (swap_selector_for_mode): New function.\n\t(altivec_expand_lvx_be): Likewise.\n\t(altivec_expand_stvx_be): Likewise.\n\t(altivec_expand_builtin): Add cases for\n\tALTIVEC_BUILTIN_STVX_<MODE>, ALTIVEC_BUILTIN_STVXL_<MODE>,\n\tALTIVEC_BUILTIN_LVXL_<MODE>, and ALTIVEC_BUILTIN_LVX_<MODE>.\n\t(altivec_init_builtins): Add definitions for\n\t__builtin_altivec_lvxl_<mode>, __builtin_altivec_lvx_<mode>,\n\t__builtin_altivec_stvx_<mode>, and\n\t__builtin_altivec_stvxl_<mode>.\n\n\ngcc/testsuite:\n\n2014-02-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.dg/vmx/ld.c: New test.\n\t* gcc.dg/vmx/ld-be-order.c: New test.\n\t* gcc.dg/vmx/ld-vsx.c: New test.\n\t* gcc.dg/vmx/ld-vsx-be-order.c: New test.\n\t* gcc.dg/vmx/ldl.c: New test.\n\t* gcc.dg/vmx/ldl-be-order.c: New test.\n\t* gcc.dg/vmx/ldl-vsx.c: New test.\n\t* gcc.dg/vmx/ldl-vsx-be-order.c: New test.\n\t* gcc.dg/vmx/st.c: New test.\n\t* gcc.dg/vmx/st-be-order.c: New test.\n\t* gcc.dg/vmx/st-vsx.c: New test.\n\t* gcc.dg/vmx/st-vsx-be-order.c: New test.\n\t* gcc.dg/vmx/stl.c: New test.\n\t* gcc.dg/vmx/stl-be-order.c: New test.\n\t* gcc.dg/vmx/stl-vsx.c: New test.\n\t* gcc.dg/vmx/stl-vsx-be-order.c: New test.\n\nFrom-SVN: r208019", "tree": {"sha": "6a265ce4f4dfd2e0a3cf3c522a1528464397f492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a265ce4f4dfd2e0a3cf3c522a1528464397f492"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/comments", "author": null, "committer": null, "parents": [{"sha": "1af73690cd7e81cbf37c67ded66443ecd891fc44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af73690cd7e81cbf37c67ded66443ecd891fc44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af73690cd7e81cbf37c67ded66443ecd891fc44"}], "stats": {"total": 1465, "additions": 1349, "deletions": 116}, "files": [{"sha": "115354a2d50a6167db6ff1414823a3ccf8a8030b", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -2343,16 +2343,44 @@\n   \"lvewx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n-(define_insn \"altivec_lvxl\"\n+(define_expand \"altivec_lvxl_<mode>\"\n   [(parallel\n-    [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-\t  (match_operand:V4SI 1 \"memory_operand\" \"Z\"))\n+    [(set (match_operand:VM2 0 \"register_operand\" \"=v\")\n+\t  (match_operand:VM2 1 \"memory_operand\" \"Z\"))\n+     (unspec [(const_int 0)] UNSPEC_SET_VSCR)])]\n+  \"TARGET_ALTIVEC\"\n+{\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      altivec_expand_lvx_be (operands[0], operands[1], <MODE>mode, UNSPEC_SET_VSCR);\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*altivec_lvxl_<mode>_internal\"\n+  [(parallel\n+    [(set (match_operand:VM2 0 \"register_operand\" \"=v\")\n+\t  (match_operand:VM2 1 \"memory_operand\" \"Z\"))\n      (unspec [(const_int 0)] UNSPEC_SET_VSCR)])]\n   \"TARGET_ALTIVEC\"\n-  \"lvxl %0,%y1\"\n+  \"lvx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n-(define_insn \"altivec_lvx_<mode>\"\n+(define_expand \"altivec_lvx_<mode>\"\n+  [(parallel\n+    [(set (match_operand:VM2 0 \"register_operand\" \"=v\")\n+\t  (match_operand:VM2 1 \"memory_operand\" \"Z\"))\n+     (unspec [(const_int 0)] UNSPEC_LVX)])]\n+  \"TARGET_ALTIVEC\"\n+{\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      altivec_expand_lvx_be (operands[0], operands[1], <MODE>mode, UNSPEC_LVX);\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*altivec_lvx_<mode>_internal\"\n   [(parallel\n     [(set (match_operand:VM2 0 \"register_operand\" \"=v\")\n \t  (match_operand:VM2 1 \"memory_operand\" \"Z\"))\n@@ -2361,7 +2389,21 @@\n   \"lvx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n-(define_insn \"altivec_stvx_<mode>\"\n+(define_expand \"altivec_stvx_<mode>\"\n+  [(parallel\n+    [(set (match_operand:VM2 0 \"memory_operand\" \"=Z\")\n+\t  (match_operand:VM2 1 \"register_operand\" \"v\"))\n+     (unspec [(const_int 0)] UNSPEC_STVX)])]\n+  \"TARGET_ALTIVEC\"\n+{\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      altivec_expand_stvx_be (operands[0], operands[1], <MODE>mode, UNSPEC_STVX);\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*altivec_stvx_<mode>_internal\"\n   [(parallel\n     [(set (match_operand:VM2 0 \"memory_operand\" \"=Z\")\n \t  (match_operand:VM2 1 \"register_operand\" \"v\"))\n@@ -2370,10 +2412,24 @@\n   \"stvx %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n-(define_insn \"altivec_stvxl\"\n+(define_expand \"altivec_stvxl_<mode>\"\n+  [(parallel\n+    [(set (match_operand:VM2 0 \"memory_operand\" \"=Z\")\n+\t  (match_operand:VM2 1 \"register_operand\" \"v\"))\n+     (unspec [(const_int 0)] UNSPEC_STVXL)])]\n+  \"TARGET_ALTIVEC\"\n+{\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      altivec_expand_stvx_be (operands[0], operands[1], <MODE>mode, UNSPEC_STVXL);\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*altivec_stvxl_<mode>_internal\"\n   [(parallel\n-    [(set (match_operand:V4SI 0 \"memory_operand\" \"=Z\")\n-\t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n+    [(set (match_operand:VM2 0 \"memory_operand\" \"=Z\")\n+\t  (match_operand:VM2 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] UNSPEC_STVXL)])]\n   \"TARGET_ALTIVEC\"\n   \"stvxl %1,%y0\""}, {"sha": "46df66b7b73e45b9ffae119cd7ea29fc6b2aa07f", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -793,8 +793,26 @@ BU_ALTIVEC_X (LVEBX,\t\t\"lvebx\",\t    MEM)\n BU_ALTIVEC_X (LVEHX,\t\t\"lvehx\",\t    MEM)\n BU_ALTIVEC_X (LVEWX,\t\t\"lvewx\",\t    MEM)\n BU_ALTIVEC_X (LVXL,\t\t\"lvxl\",\t\t    MEM)\n+BU_ALTIVEC_X (LVXL_V2DF,\t\"lvxl_v2df\",\t    MEM)\n+BU_ALTIVEC_X (LVXL_V2DI,\t\"lvxl_v2di\",\t    MEM)\n+BU_ALTIVEC_X (LVXL_V4SF,\t\"lvxl_v4sf\",\t    MEM)\n+BU_ALTIVEC_X (LVXL_V4SI,\t\"lvxl_v4si\",\t    MEM)\n+BU_ALTIVEC_X (LVXL_V8HI,\t\"lvxl_v8hi\",\t    MEM)\n+BU_ALTIVEC_X (LVXL_V16QI,\t\"lvxl_v16qi\",\t    MEM)\n BU_ALTIVEC_X (LVX,\t\t\"lvx\",\t\t    MEM)\n+BU_ALTIVEC_X (LVX_V2DF,\t\t\"lvx_v2df\",\t    MEM)\n+BU_ALTIVEC_X (LVX_V2DI,\t\t\"lvx_v2di\",\t    MEM)\n+BU_ALTIVEC_X (LVX_V4SF,\t\t\"lvx_v4sf\",\t    MEM)\n+BU_ALTIVEC_X (LVX_V4SI,\t\t\"lvx_v4si\",\t    MEM)\n+BU_ALTIVEC_X (LVX_V8HI,\t\t\"lvx_v8hi\",\t    MEM)\n+BU_ALTIVEC_X (LVX_V16QI,\t\"lvx_v16qi\",\t    MEM)\n BU_ALTIVEC_X (STVX,\t\t\"stvx\",\t\t    MEM)\n+BU_ALTIVEC_X (STVX_V2DF,\t\"stvx_v2df\",\t    MEM)\n+BU_ALTIVEC_X (STVX_V2DI,\t\"stvx_v2di\",\t    MEM)\n+BU_ALTIVEC_X (STVX_V4SF,\t\"stvx_v4sf\",\t    MEM)\n+BU_ALTIVEC_X (STVX_V4SI,\t\"stvx_v4si\",\t    MEM)\n+BU_ALTIVEC_X (STVX_V8HI,\t\"stvx_v8hi\",\t    MEM)\n+BU_ALTIVEC_X (STVX_V16QI,\t\"stvx_v16qi\",\t    MEM)\n BU_ALTIVEC_C (LVLX,\t\t\"lvlx\",\t\t    MEM)\n BU_ALTIVEC_C (LVLXL,\t\t\"lvlxl\",\t    MEM)\n BU_ALTIVEC_C (LVRX,\t\t\"lvrx\",\t\t    MEM)\n@@ -803,6 +821,12 @@ BU_ALTIVEC_X (STVEBX,\t\t\"stvebx\",\t    MEM)\n BU_ALTIVEC_X (STVEHX,\t\t\"stvehx\",\t    MEM)\n BU_ALTIVEC_X (STVEWX,\t\t\"stvewx\",\t    MEM)\n BU_ALTIVEC_X (STVXL,\t\t\"stvxl\",\t    MEM)\n+BU_ALTIVEC_X (STVXL_V2DF,\t\"stvxl_v2df\",\t    MEM)\n+BU_ALTIVEC_X (STVXL_V2DI,\t\"stvxl_v2di\",\t    MEM)\n+BU_ALTIVEC_X (STVXL_V4SF,\t\"stvxl_v4sf\",\t    MEM)\n+BU_ALTIVEC_X (STVXL_V4SI,\t\"stvxl_v4si\",\t    MEM)\n+BU_ALTIVEC_X (STVXL_V8HI,\t\"stvxl_v8hi\",\t    MEM)\n+BU_ALTIVEC_X (STVXL_V16QI,\t\"stvxl_v16qi\",\t    MEM)\n BU_ALTIVEC_C (STVLX,\t\t\"stvlx\",\t    MEM)\n BU_ALTIVEC_C (STVLXL,\t\t\"stvlxl\",\t    MEM)\n BU_ALTIVEC_C (STVRX,\t\t\"stvrx\",\t    MEM)"}, {"sha": "73edd2b895aa4ee590faa3b6d350c199bd6a881b", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 105, "deletions": 105, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -1108,54 +1108,54 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { VSX_BUILTIN_VEC_DIV, VSX_BUILTIN_XVDIVDP,\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V2DI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DI,\n     RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V2DI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V4SI,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_long, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_long, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V8HI,\n     RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V8HI,\n     RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V8HI,\n     RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V8HI,\n     RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V16QI,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX,\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDE, ALTIVEC_BUILTIN_LVEBX,\n     RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n@@ -1193,55 +1193,55 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LVEBX, ALTIVEC_BUILTIN_LVEBX,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_long, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_long, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V8HI,\n     RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V8HI,\n     RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V8HI,\n     RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V8HI,\n     RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V16QI,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V16QI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V2DI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL,\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V2DI,\n     RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LVSL, ALTIVEC_BUILTIN_LVSL,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n@@ -2857,63 +2857,63 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_NOT_OPAQUE },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_16QI,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_NOT_OPAQUE },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DF,\n     RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DI,\n     RS6000_BTI_void, RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V2DI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DI,\n     RS6000_BTI_void, RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_bool_V2DI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V4SF,\n     RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V4SF,\n     RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V4SI,\n     RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V4SI,\n     RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V4SI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V4SI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V4SI,\n     RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V4SI,\n     RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V4SI,\n     RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V8HI,\n     RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V8HI,\n     RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V8HI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V8HI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V8HI,\n     RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V8HI,\n     RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V8HI,\n     RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V16QI,\n     RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V16QI,\n     RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V16QI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V16QI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V16QI,\n     RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V16QI,\n     RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V16QI,\n     RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n-  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX,\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V8HI,\n     RS6000_BTI_void, RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI },\n   { ALTIVEC_BUILTIN_VEC_STE, ALTIVEC_BUILTIN_STVEBX,\n     RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n@@ -2985,64 +2985,64 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_void },\n   { ALTIVEC_BUILTIN_VEC_STVEBX, ALTIVEC_BUILTIN_STVEBX,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_void },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V4SF,\n     RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V4SF,\n     RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V4SI,\n     RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V4SI,\n     RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V4SI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V4SI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V4SI,\n     RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V4SI,\n     RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V4SI,\n     RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V8HI,\n     RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V8HI,\n     RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V8HI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V8HI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V8HI,\n     RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V8HI,\n     RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V8HI,\n     RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V16QI,\n     RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V16QI,\n     RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V16QI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V16QI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V16QI,\n     RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V16QI,\n     RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V16QI,\n     RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V8HI,\n     RS6000_BTI_void, RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V2DF,\n     RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V2DF,\n     RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V2DI,\n     RS6000_BTI_void, RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V2DI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V2DI },\n-  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n+  { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL_V2DI,\n     RS6000_BTI_void, RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_bool_V2DI },\n   { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,"}, {"sha": "84d466ec890054ce14f1e2d215f43def51240d22", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -58,6 +58,8 @@ extern void rs6000_expand_vector_extract (rtx, rtx, int);\n extern bool altivec_expand_vec_perm_const (rtx op[4]);\n extern void altivec_expand_vec_perm_le (rtx op[4]);\n extern bool rs6000_expand_vec_perm_const (rtx op[4]);\n+extern void altivec_expand_lvx_be (rtx, rtx, enum machine_mode, unsigned);\n+extern void altivec_expand_stvx_be (rtx, rtx, enum machine_mode, unsigned);\n extern void rs6000_expand_extract_even (rtx, rtx, rtx);\n extern void rs6000_expand_interleave (rtx, rtx, rtx, bool);\n extern void build_mask64_2_operands (rtx, rtx *);"}, {"sha": "a9c99bdc1ccf2a7983a64cdbdc6d5c1977e6abff", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 181, "deletions": 2, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -11808,6 +11808,83 @@ paired_expand_lv_builtin (enum insn_code icode, tree exp, rtx target)\n   return target;\n }\n \n+/* Return a constant vector for use as a little-endian permute control vector\n+   to reverse the order of elements of the given vector mode.  */\n+static rtx\n+swap_selector_for_mode (enum machine_mode mode)\n+{\n+  /* These are little endian vectors, so their elements are reversed\n+     from what you would normally expect for a permute control vector.  */\n+  unsigned int swap2[16] = {7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8};\n+  unsigned int swap4[16] = {3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12};\n+  unsigned int swap8[16] = {1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14};\n+  unsigned int swap16[16] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  unsigned int *swaparray, i;\n+  rtx perm[16];\n+\n+  switch (mode)\n+    {\n+    case V2DFmode:\n+    case V2DImode:\n+      swaparray = swap2;\n+      break;\n+    case V4SFmode:\n+    case V4SImode:\n+      swaparray = swap4;\n+      break;\n+    case V8HImode:\n+      swaparray = swap8;\n+      break;\n+    case V16QImode:\n+      swaparray = swap16;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  for (i = 0; i < 16; ++i)\n+    perm[i] = GEN_INT (swaparray[i]);\n+\n+  return force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, gen_rtvec_v (16, perm)));\n+}\n+\n+/* Generate code for an \"lvx\" or \"lvxl\" built-in for a little endian target\n+   with -maltivec=be specified.  Issue the load followed by an element-reversing\n+   permute.  */\n+void\n+altivec_expand_lvx_be (rtx op0, rtx op1, enum machine_mode mode, unsigned unspec)\n+{\n+  rtx tmp = gen_reg_rtx (mode);\n+  rtx load = gen_rtx_SET (VOIDmode, tmp, op1);\n+  rtx lvx = gen_rtx_UNSPEC (mode, gen_rtvec (1, const0_rtx), unspec);\n+  rtx par = gen_rtx_PARALLEL (mode, gen_rtvec (2, load, lvx));\n+  rtx sel = swap_selector_for_mode (mode);\n+  rtx vperm = gen_rtx_UNSPEC (mode, gen_rtvec (3, tmp, tmp, sel), UNSPEC_VPERM);\n+\n+  gcc_assert (REG_P (op0));\n+  emit_insn (par);\n+  emit_insn (gen_rtx_SET (VOIDmode, op0, vperm));\n+}\n+\n+/* Generate code for a \"stvx\" or \"stvxl\" built-in for a little endian target\n+   with -maltivec=be specified.  Issue the store preceded by an element-reversing\n+   permute.  */\n+void\n+altivec_expand_stvx_be (rtx op0, rtx op1, enum machine_mode mode, unsigned unspec)\n+{\n+  rtx tmp = gen_reg_rtx (mode);\n+  rtx store = gen_rtx_SET (VOIDmode, op0, tmp);\n+  rtx stvx = gen_rtx_UNSPEC (mode, gen_rtvec (1, const0_rtx), unspec);\n+  rtx par = gen_rtx_PARALLEL (mode, gen_rtvec (2, store, stvx));\n+  rtx sel = swap_selector_for_mode (mode);\n+  rtx vperm;\n+\n+  gcc_assert (REG_P (op1));\n+  vperm = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op1, sel), UNSPEC_VPERM);\n+  emit_insn (gen_rtx_SET (VOIDmode, tmp, vperm));\n+  emit_insn (par);\n+}\n+\n static rtx\n altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target, bool blk)\n {\n@@ -12597,16 +12674,38 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n \n   switch (fcode)\n     {\n+    case ALTIVEC_BUILTIN_STVX_V2DF:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v2df, exp);\n+    case ALTIVEC_BUILTIN_STVX_V2DI:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v2di, exp);\n+    case ALTIVEC_BUILTIN_STVX_V4SF:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v4sf, exp);\n     case ALTIVEC_BUILTIN_STVX:\n+    case ALTIVEC_BUILTIN_STVX_V4SI:\n       return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v4si, exp);\n+    case ALTIVEC_BUILTIN_STVX_V8HI:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v8hi, exp);\n+    case ALTIVEC_BUILTIN_STVX_V16QI:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v16qi, exp);\n     case ALTIVEC_BUILTIN_STVEBX:\n       return altivec_expand_stv_builtin (CODE_FOR_altivec_stvebx, exp);\n     case ALTIVEC_BUILTIN_STVEHX:\n       return altivec_expand_stv_builtin (CODE_FOR_altivec_stvehx, exp);\n     case ALTIVEC_BUILTIN_STVEWX:\n       return altivec_expand_stv_builtin (CODE_FOR_altivec_stvewx, exp);\n+    case ALTIVEC_BUILTIN_STVXL_V2DF:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvxl_v2df, exp);\n+    case ALTIVEC_BUILTIN_STVXL_V2DI:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvxl_v2di, exp);\n+    case ALTIVEC_BUILTIN_STVXL_V4SF:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvxl_v4sf, exp);\n     case ALTIVEC_BUILTIN_STVXL:\n-      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvxl, exp);\n+    case ALTIVEC_BUILTIN_STVXL_V4SI:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvxl_v4si, exp);\n+    case ALTIVEC_BUILTIN_STVXL_V8HI:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvxl_v8hi, exp);\n+    case ALTIVEC_BUILTIN_STVXL_V16QI:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvxl_v16qi, exp);\n \n     case ALTIVEC_BUILTIN_STVLX:\n       return altivec_expand_stv_builtin (CODE_FOR_altivec_stvlx, exp);\n@@ -12750,12 +12849,44 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     case ALTIVEC_BUILTIN_LVEWX:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvewx,\n \t\t\t\t\texp, target, false);\n+    case ALTIVEC_BUILTIN_LVXL_V2DF:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvxl_v2df,\n+\t\t\t\t\texp, target, false);\n+    case ALTIVEC_BUILTIN_LVXL_V2DI:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvxl_v2di,\n+\t\t\t\t\texp, target, false);\n+    case ALTIVEC_BUILTIN_LVXL_V4SF:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvxl_v4sf,\n+\t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVXL:\n-      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvxl,\n+    case ALTIVEC_BUILTIN_LVXL_V4SI:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvxl_v4si,\n+\t\t\t\t\texp, target, false);\n+    case ALTIVEC_BUILTIN_LVXL_V8HI:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvxl_v8hi,\n+\t\t\t\t\texp, target, false);\n+    case ALTIVEC_BUILTIN_LVXL_V16QI:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvxl_v16qi,\n+\t\t\t\t\texp, target, false);\n+    case ALTIVEC_BUILTIN_LVX_V2DF:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v2df,\n+\t\t\t\t\texp, target, false);\n+    case ALTIVEC_BUILTIN_LVX_V2DI:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v2di,\n+\t\t\t\t\texp, target, false);\n+    case ALTIVEC_BUILTIN_LVX_V4SF:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v4sf,\n \t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVX:\n+    case ALTIVEC_BUILTIN_LVX_V4SI:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v4si,\n \t\t\t\t\texp, target, false);\n+    case ALTIVEC_BUILTIN_LVX_V8HI:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v8hi,\n+\t\t\t\t\texp, target, false);\n+    case ALTIVEC_BUILTIN_LVX_V16QI:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v16qi,\n+\t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVLX:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvlx,\n \t\t\t\t\texp, target, true);\n@@ -14085,10 +14216,58 @@ altivec_init_builtins (void)\n   def_builtin (\"__builtin_altivec_lvehx\", v8hi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVEHX);\n   def_builtin (\"__builtin_altivec_lvewx\", v4si_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVEWX);\n   def_builtin (\"__builtin_altivec_lvxl\", v4si_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVXL);\n+  def_builtin (\"__builtin_altivec_lvxl_v2df\", v2df_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVXL_V2DF);\n+  def_builtin (\"__builtin_altivec_lvxl_v2di\", v2di_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVXL_V2DI);\n+  def_builtin (\"__builtin_altivec_lvxl_v4sf\", v4sf_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVXL_V4SF);\n+  def_builtin (\"__builtin_altivec_lvxl_v4si\", v4si_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVXL_V4SI);\n+  def_builtin (\"__builtin_altivec_lvxl_v8hi\", v8hi_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVXL_V8HI);\n+  def_builtin (\"__builtin_altivec_lvxl_v16qi\", v16qi_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVXL_V16QI);\n   def_builtin (\"__builtin_altivec_lvx\", v4si_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVX);\n+  def_builtin (\"__builtin_altivec_lvx_v2df\", v2df_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVX_V2DF);\n+  def_builtin (\"__builtin_altivec_lvx_v2di\", v2di_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVX_V2DI);\n+  def_builtin (\"__builtin_altivec_lvx_v4sf\", v4sf_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVX_V4SF);\n+  def_builtin (\"__builtin_altivec_lvx_v4si\", v4si_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVX_V4SI);\n+  def_builtin (\"__builtin_altivec_lvx_v8hi\", v8hi_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVX_V8HI);\n+  def_builtin (\"__builtin_altivec_lvx_v16qi\", v16qi_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVX_V16QI);\n   def_builtin (\"__builtin_altivec_stvx\", void_ftype_v4si_long_pvoid, ALTIVEC_BUILTIN_STVX);\n+  def_builtin (\"__builtin_altivec_stvx_v2df\", void_ftype_v2df_long_pvoid,\n+\t       ALTIVEC_BUILTIN_STVX_V2DF);\n+  def_builtin (\"__builtin_altivec_stvx_v2di\", void_ftype_v2di_long_pvoid,\n+\t       ALTIVEC_BUILTIN_STVX_V2DI);\n+  def_builtin (\"__builtin_altivec_stvx_v4sf\", void_ftype_v4sf_long_pvoid,\n+\t       ALTIVEC_BUILTIN_STVX_V4SF);\n+  def_builtin (\"__builtin_altivec_stvx_v4si\", void_ftype_v4si_long_pvoid,\n+\t       ALTIVEC_BUILTIN_STVX_V4SI);\n+  def_builtin (\"__builtin_altivec_stvx_v8hi\", void_ftype_v8hi_long_pvoid,\n+\t       ALTIVEC_BUILTIN_STVX_V8HI);\n+  def_builtin (\"__builtin_altivec_stvx_v16qi\", void_ftype_v16qi_long_pvoid,\n+\t       ALTIVEC_BUILTIN_STVX_V16QI);\n   def_builtin (\"__builtin_altivec_stvewx\", void_ftype_v4si_long_pvoid, ALTIVEC_BUILTIN_STVEWX);\n   def_builtin (\"__builtin_altivec_stvxl\", void_ftype_v4si_long_pvoid, ALTIVEC_BUILTIN_STVXL);\n+  def_builtin (\"__builtin_altivec_stvxl_v2df\", void_ftype_v2df_long_pvoid,\n+\t       ALTIVEC_BUILTIN_STVXL_V2DF);\n+  def_builtin (\"__builtin_altivec_stvxl_v2di\", void_ftype_v2di_long_pvoid,\n+\t       ALTIVEC_BUILTIN_STVXL_V2DI);\n+  def_builtin (\"__builtin_altivec_stvxl_v4sf\", void_ftype_v4sf_long_pvoid,\n+\t       ALTIVEC_BUILTIN_STVXL_V4SF);\n+  def_builtin (\"__builtin_altivec_stvxl_v4si\", void_ftype_v4si_long_pvoid,\n+\t       ALTIVEC_BUILTIN_STVXL_V4SI);\n+  def_builtin (\"__builtin_altivec_stvxl_v8hi\", void_ftype_v8hi_long_pvoid,\n+\t       ALTIVEC_BUILTIN_STVXL_V8HI);\n+  def_builtin (\"__builtin_altivec_stvxl_v16qi\", void_ftype_v16qi_long_pvoid,\n+\t       ALTIVEC_BUILTIN_STVXL_V16QI);\n   def_builtin (\"__builtin_altivec_stvebx\", void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_STVEBX);\n   def_builtin (\"__builtin_altivec_stvehx\", void_ftype_v8hi_long_pvoid, ALTIVEC_BUILTIN_STVEHX);\n   def_builtin (\"__builtin_vec_ld\", opaque_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LD);"}, {"sha": "903b997c9a361f7f95105ddde40e079e816c705c", "filename": "gcc/testsuite/gcc.dg/vmx/ld-be-order.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-be-order.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,107 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned char svuc[16] __attribute__ ((aligned (16)));\n+static signed char svsc[16] __attribute__ ((aligned (16)));\n+static unsigned char svbc[16] __attribute__ ((aligned (16)));\n+static unsigned short svus[8] __attribute__ ((aligned (16)));\n+static signed short svss[8] __attribute__ ((aligned (16)));\n+static unsigned short svbs[8] __attribute__ ((aligned (16)));\n+static unsigned short svp[8] __attribute__ ((aligned (16)));\n+static unsigned int svui[4] __attribute__ ((aligned (16)));\n+static signed int svsi[4] __attribute__ ((aligned (16)));\n+static unsigned int svbi[4] __attribute__ ((aligned (16)));\n+static float svf[4] __attribute__ ((aligned (16)));\n+\n+static void init ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 16; ++i)\n+    {\n+      svuc[i] = i;\n+      svsc[i] = i - 8;\n+      svbc[i] = (i % 2) ? 0xff : 0;\n+    }\n+  for (i = 0; i < 8; ++i)\n+    {\n+      svus[i] = i;\n+      svss[i] = i - 4;\n+      svbs[i] = (i % 2) ? 0xffff : 0;\n+      svp[i] = i;\n+    }\n+  for (i = 0; i < 4; ++i)\n+    {\n+      svui[i] = i;\n+      svsi[i] = i - 2;\n+      svbi[i] = (i % 2) ? 0xffffffff : 0;\n+      svf[i] = i * 1.0f;\n+    }\n+}\n+\n+static void test ()\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector unsigned char evuc = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+  vector signed char evsc = {7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8};\n+  vector bool char evbc = {255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0};\n+  vector unsigned short evus = {7,6,5,4,3,2,1,0};\n+  vector signed short evss = {3,2,1,0,-1,-2,-3,-4};\n+  vector bool short evbs = {65535,0,65535,0,65535,0,65535,0};\n+  vector pixel evp = {7,6,5,4,3,2,1,0};\n+  vector unsigned int evui = {3,2,1,0};\n+  vector signed int evsi = {1,0,-1,-2};\n+  vector bool int evbi = {0xffffffff,0,0xffffffff,0};\n+  vector float evf = {3.0,2.0,1.0,0.0};\n+#else\n+  vector unsigned char evuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char evsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector bool char evbc = {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255};\n+  vector unsigned short evus = {0,1,2,3,4,5,6,7};\n+  vector signed short evss = {-4,-3,-2,-1,0,1,2,3};\n+  vector bool short evbs = {0,65535,0,65535,0,65535,0,65535};\n+  vector pixel evp = {0,1,2,3,4,5,6,7};\n+  vector unsigned int evui = {0,1,2,3};\n+  vector signed int evsi = {-2,-1,0,1};\n+  vector bool int evbi = {0,0xffffffff,0,0xffffffff};\n+  vector float evf = {0.0,1.0,2.0,3.0};\n+#endif\n+\n+  vector unsigned char vuc;\n+  vector signed char vsc;\n+  vector bool char vbc;\n+  vector unsigned short vus;\n+  vector signed short vss;\n+  vector bool short vbs;\n+  vector pixel vp;\n+  vector unsigned int vui;\n+  vector signed int vsi;\n+  vector bool int vbi;\n+  vector float vf;\n+\n+  init ();\n+\n+  vuc = vec_ld (0, (vector unsigned char *)svuc);\n+  vsc = vec_ld (0, (vector signed char *)svsc);\n+  vbc = vec_ld (0, (vector bool char *)svbc);\n+  vus = vec_ld (0, (vector unsigned short *)svus);\n+  vss = vec_ld (0, (vector signed short *)svss);\n+  vbs = vec_ld (0, (vector bool short *)svbs);\n+  vp  = vec_ld (0, (vector pixel *)svp);\n+  vui = vec_ld (0, (vector unsigned int *)svui);\n+  vsi = vec_ld (0, (vector signed int *)svsi);\n+  vbi = vec_ld (0, (vector bool int *)svbi);\n+  vf  = vec_ld (0, (vector float *)svf);\n+\n+  check (vec_all_eq (vuc, evuc), \"vuc\");\n+  check (vec_all_eq (vsc, evsc), \"vsc\");\n+  check (vec_all_eq (vbc, evbc), \"vbc\");\n+  check (vec_all_eq (vus, evus), \"vus\");\n+  check (vec_all_eq (vss, evss), \"vss\");\n+  check (vec_all_eq (vbs, evbs), \"vbs\");\n+  check (vec_all_eq (vp,  evp ), \"vp\" );\n+  check (vec_all_eq (vui, evui), \"vui\");\n+  check (vec_all_eq (vsi, evsi), \"vsi\");\n+  check (vec_all_eq (vbi, evbi), \"vbi\");\n+  check (vec_all_eq (vf,  evf ), \"vf\" );\n+}"}, {"sha": "64ea0ba021a07a5053f7ad448a749e77d6a6ef52", "filename": "gcc/testsuite/gcc.dg/vmx/ld-vsx-be-order.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-vsx-be-order.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned long svul[2] __attribute__ ((aligned (16)));\n+static double svd[2] __attribute__ ((aligned (16)));\n+\n+static void init ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 2; ++i)\n+    {\n+      svul[i] = i;\n+      svd[i] = i * 1.0;\n+    }\n+}\n+\n+static void test ()\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector unsigned long evul = {1,0};\n+  vector double evd = {1.0,0.0};\n+#else\n+  vector unsigned long evul = {0,1};\n+  vector double evd = {0.0,1.0};\n+#endif\n+\n+  vector unsigned long vul;\n+  vector double vd;\n+\n+  init ();\n+\n+  vul = vec_ld (0, (vector unsigned long *)svul);\n+  vd  = vec_ld (0, (vector double *)svd);\n+\n+  check (vec_all_eq (vul, evul), \"vul\");\n+  check (vec_all_eq (vd,  evd ), \"vd\" );\n+}"}, {"sha": "87da7bfea111c33e404162184e48032269c72caa", "filename": "gcc/testsuite/gcc.dg/vmx/ld-vsx.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-vsx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-vsx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-vsx.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned long svul[2] __attribute__ ((aligned (16)));\n+static double svd[2] __attribute__ ((aligned (16)));\n+\n+static void init ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 2; ++i)\n+    {\n+      svul[i] = i;\n+      svd[i] = i * 1.0;\n+    }\n+}\n+\n+static void test ()\n+{\n+  vector unsigned long evul = {0,1};\n+  vector double evd = {0.0,1.0};\n+\n+  vector unsigned long vul;\n+  vector double vd;\n+\n+  init ();\n+\n+  vul = vec_ld (0, (vector unsigned long *)svul);\n+  vd  = vec_ld (0, (vector double *)svd);\n+\n+  check (vec_all_eq (vul, evul), \"vul\");\n+  check (vec_all_eq (vd,  evd ), \"vd\" );\n+}"}, {"sha": "851fbd58a5769005f08a5bcac2b5cfffde24cae4", "filename": "gcc/testsuite/gcc.dg/vmx/ld.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,91 @@\n+#include \"harness.h\"\n+\n+static unsigned char svuc[16] __attribute__ ((aligned (16)));\n+static signed char svsc[16] __attribute__ ((aligned (16)));\n+static unsigned char svbc[16] __attribute__ ((aligned (16)));\n+static unsigned short svus[8] __attribute__ ((aligned (16)));\n+static signed short svss[8] __attribute__ ((aligned (16)));\n+static unsigned short svbs[8] __attribute__ ((aligned (16)));\n+static unsigned short svp[8] __attribute__ ((aligned (16)));\n+static unsigned int svui[4] __attribute__ ((aligned (16)));\n+static signed int svsi[4] __attribute__ ((aligned (16)));\n+static unsigned int svbi[4] __attribute__ ((aligned (16)));\n+static float svf[4] __attribute__ ((aligned (16)));\n+\n+static void init ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 16; ++i)\n+    {\n+      svuc[i] = i;\n+      svsc[i] = i - 8;\n+      svbc[i] = (i % 2) ? 0xff : 0;\n+    }\n+  for (i = 0; i < 8; ++i)\n+    {\n+      svus[i] = i;\n+      svss[i] = i - 4;\n+      svbs[i] = (i % 2) ? 0xffff : 0;\n+      svp[i] = i;\n+    }\n+  for (i = 0; i < 4; ++i)\n+    {\n+      svui[i] = i;\n+      svsi[i] = i - 2;\n+      svbi[i] = (i % 2) ? 0xffffffff : 0;\n+      svf[i] = i * 1.0f;\n+    }\n+}\n+\n+static void test ()\n+{\n+  vector unsigned char evuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char evsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector bool char evbc = {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255};\n+  vector unsigned short evus = {0,1,2,3,4,5,6,7};\n+  vector signed short evss = {-4,-3,-2,-1,0,1,2,3};\n+  vector bool short evbs = {0,65535,0,65535,0,65535,0,65535};\n+  vector pixel evp = {0,1,2,3,4,5,6,7};\n+  vector unsigned int evui = {0,1,2,3};\n+  vector signed int evsi = {-2,-1,0,1};\n+  vector bool int evbi = {0,0xffffffff,0,0xffffffff};\n+  vector float evf = {0.0,1.0,2.0,3.0};\n+\n+  vector unsigned char vuc;\n+  vector signed char vsc;\n+  vector bool char vbc;\n+  vector unsigned short vus;\n+  vector signed short vss;\n+  vector bool short vbs;\n+  vector pixel vp;\n+  vector unsigned int vui;\n+  vector signed int vsi;\n+  vector bool int vbi;\n+  vector float vf;\n+\n+  init ();\n+\n+  vuc = vec_ld (0, (vector unsigned char *)svuc);\n+  vsc = vec_ld (0, (vector signed char *)svsc);\n+  vbc = vec_ld (0, (vector bool char *)svbc);\n+  vus = vec_ld (0, (vector unsigned short *)svus);\n+  vss = vec_ld (0, (vector signed short *)svss);\n+  vbs = vec_ld (0, (vector bool short *)svbs);\n+  vp  = vec_ld (0, (vector pixel *)svp);\n+  vui = vec_ld (0, (vector unsigned int *)svui);\n+  vsi = vec_ld (0, (vector signed int *)svsi);\n+  vbi = vec_ld (0, (vector bool int *)svbi);\n+  vf  = vec_ld (0, (vector float *)svf);\n+\n+  check (vec_all_eq (vuc, evuc), \"vuc\");\n+  check (vec_all_eq (vsc, evsc), \"vsc\");\n+  check (vec_all_eq (vbc, evbc), \"vbc\");\n+  check (vec_all_eq (vus, evus), \"vus\");\n+  check (vec_all_eq (vss, evss), \"vss\");\n+  check (vec_all_eq (vbs, evbs), \"vbs\");\n+  check (vec_all_eq (vp,  evp ), \"vp\" );\n+  check (vec_all_eq (vui, evui), \"vui\");\n+  check (vec_all_eq (vsi, evsi), \"vsi\");\n+  check (vec_all_eq (vbi, evbi), \"vbi\");\n+  check (vec_all_eq (vf,  evf ), \"vf\" );\n+}"}, {"sha": "397849fe1f5f61ecf488af5f843a1d4e99cdb107", "filename": "gcc/testsuite/gcc.dg/vmx/ldl-be-order.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-be-order.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,107 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned char svuc[16] __attribute__ ((aligned (16)));\n+static signed char svsc[16] __attribute__ ((aligned (16)));\n+static unsigned char svbc[16] __attribute__ ((aligned (16)));\n+static unsigned short svus[8] __attribute__ ((aligned (16)));\n+static signed short svss[8] __attribute__ ((aligned (16)));\n+static unsigned short svbs[8] __attribute__ ((aligned (16)));\n+static unsigned short svp[8] __attribute__ ((aligned (16)));\n+static unsigned int svui[4] __attribute__ ((aligned (16)));\n+static signed int svsi[4] __attribute__ ((aligned (16)));\n+static unsigned int svbi[4] __attribute__ ((aligned (16)));\n+static float svf[4] __attribute__ ((aligned (16)));\n+\n+static void init ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 16; ++i)\n+    {\n+      svuc[i] = i;\n+      svsc[i] = i - 8;\n+      svbc[i] = (i % 2) ? 0xff : 0;\n+    }\n+  for (i = 0; i < 8; ++i)\n+    {\n+      svus[i] = i;\n+      svss[i] = i - 4;\n+      svbs[i] = (i % 2) ? 0xffff : 0;\n+      svp[i] = i;\n+    }\n+  for (i = 0; i < 4; ++i)\n+    {\n+      svui[i] = i;\n+      svsi[i] = i - 2;\n+      svbi[i] = (i % 2) ? 0xffffffff : 0;\n+      svf[i] = i * 1.0f;\n+    }\n+}\n+\n+static void test ()\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector unsigned char evuc = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+  vector signed char evsc = {7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8};\n+  vector bool char evbc = {255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0};\n+  vector unsigned short evus = {7,6,5,4,3,2,1,0};\n+  vector signed short evss = {3,2,1,0,-1,-2,-3,-4};\n+  vector bool short evbs = {65535,0,65535,0,65535,0,65535,0};\n+  vector pixel evp = {7,6,5,4,3,2,1,0};\n+  vector unsigned int evui = {3,2,1,0};\n+  vector signed int evsi = {1,0,-1,-2};\n+  vector bool int evbi = {0xffffffff,0,0xffffffff,0};\n+  vector float evf = {3.0,2.0,1.0,0.0};\n+#else\n+  vector unsigned char evuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char evsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector bool char evbc = {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255};\n+  vector unsigned short evus = {0,1,2,3,4,5,6,7};\n+  vector signed short evss = {-4,-3,-2,-1,0,1,2,3};\n+  vector bool short evbs = {0,65535,0,65535,0,65535,0,65535};\n+  vector pixel evp = {0,1,2,3,4,5,6,7};\n+  vector unsigned int evui = {0,1,2,3};\n+  vector signed int evsi = {-2,-1,0,1};\n+  vector bool int evbi = {0,0xffffffff,0,0xffffffff};\n+  vector float evf = {0.0,1.0,2.0,3.0};\n+#endif\n+\n+  vector unsigned char vuc;\n+  vector signed char vsc;\n+  vector bool char vbc;\n+  vector unsigned short vus;\n+  vector signed short vss;\n+  vector bool short vbs;\n+  vector pixel vp;\n+  vector unsigned int vui;\n+  vector signed int vsi;\n+  vector bool int vbi;\n+  vector float vf;\n+\n+  init ();\n+\n+  vuc = vec_ldl (0, (vector unsigned char *)svuc);\n+  vsc = vec_ldl (0, (vector signed char *)svsc);\n+  vbc = vec_ldl (0, (vector bool char *)svbc);\n+  vus = vec_ldl (0, (vector unsigned short *)svus);\n+  vss = vec_ldl (0, (vector signed short *)svss);\n+  vbs = vec_ldl (0, (vector bool short *)svbs);\n+  vp  = vec_ldl (0, (vector pixel *)svp);\n+  vui = vec_ldl (0, (vector unsigned int *)svui);\n+  vsi = vec_ldl (0, (vector signed int *)svsi);\n+  vbi = vec_ldl (0, (vector bool int *)svbi);\n+  vf  = vec_ldl (0, (vector float *)svf);\n+\n+  check (vec_all_eq (vuc, evuc), \"vuc\");\n+  check (vec_all_eq (vsc, evsc), \"vsc\");\n+  check (vec_all_eq (vbc, evbc), \"vbc\");\n+  check (vec_all_eq (vus, evus), \"vus\");\n+  check (vec_all_eq (vss, evss), \"vss\");\n+  check (vec_all_eq (vbs, evbs), \"vbs\");\n+  check (vec_all_eq (vp,  evp ), \"vp\" );\n+  check (vec_all_eq (vui, evui), \"vui\");\n+  check (vec_all_eq (vsi, evsi), \"vsi\");\n+  check (vec_all_eq (vbi, evbi), \"vbi\");\n+  check (vec_all_eq (vf,  evf ), \"vf\" );\n+}"}, {"sha": "6a5cdd429b08cdab58a239b86aad3213fc0b4ec2", "filename": "gcc/testsuite/gcc.dg/vmx/ldl-vsx-be-order.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-vsx-be-order.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned long svul[2] __attribute__ ((aligned (16)));\n+static double svd[2] __attribute__ ((aligned (16)));\n+\n+static void init ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 2; ++i)\n+    {\n+      svul[i] = i;\n+      svd[i] = i * 1.0;\n+    }\n+}\n+\n+static void test ()\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector unsigned long evul = {1,0};\n+  vector double evd = {1.0,0.0};\n+#else\n+  vector unsigned long evul = {0,1};\n+  vector double evd = {0.0,1.0};\n+#endif\n+\n+  vector unsigned long vul;\n+  vector double vd;\n+\n+  init ();\n+\n+  vul = vec_ldl (0, (vector unsigned long *)svul);\n+  vd  = vec_ldl (0, (vector double *)svd);\n+\n+  check (vec_all_eq (vul, evul), \"vul\");\n+  check (vec_all_eq (vd,  evd ), \"vd\" );\n+}"}, {"sha": "c330413789350499271246b0398e81f70f1305d5", "filename": "gcc/testsuite/gcc.dg/vmx/ldl-vsx.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-vsx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-vsx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-vsx.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned long svul[2] __attribute__ ((aligned (16)));\n+static double svd[2] __attribute__ ((aligned (16)));\n+\n+static void init ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 2; ++i)\n+    {\n+      svul[i] = i;\n+      svd[i] = i * 1.0;\n+    }\n+}\n+\n+static void test ()\n+{\n+  vector unsigned long evul = {0,1};\n+  vector double evd = {0.0,1.0};\n+\n+  vector unsigned long vul;\n+  vector double vd;\n+\n+  init ();\n+\n+  vul = vec_ldl (0, (vector unsigned long *)svul);\n+  vd  = vec_ldl (0, (vector double *)svd);\n+\n+  check (vec_all_eq (vul, evul), \"vul\");\n+  check (vec_all_eq (vd,  evd ), \"vd\" );\n+}"}, {"sha": "3f9a603e33a6bfd7e786202d901da605a5aabe81", "filename": "gcc/testsuite/gcc.dg/vmx/ldl.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,91 @@\n+#include \"harness.h\"\n+\n+static unsigned char svuc[16] __attribute__ ((aligned (16)));\n+static signed char svsc[16] __attribute__ ((aligned (16)));\n+static unsigned char svbc[16] __attribute__ ((aligned (16)));\n+static unsigned short svus[8] __attribute__ ((aligned (16)));\n+static signed short svss[8] __attribute__ ((aligned (16)));\n+static unsigned short svbs[8] __attribute__ ((aligned (16)));\n+static unsigned short svp[8] __attribute__ ((aligned (16)));\n+static unsigned int svui[4] __attribute__ ((aligned (16)));\n+static signed int svsi[4] __attribute__ ((aligned (16)));\n+static unsigned int svbi[4] __attribute__ ((aligned (16)));\n+static float svf[4] __attribute__ ((aligned (16)));\n+\n+static void init ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 16; ++i)\n+    {\n+      svuc[i] = i;\n+      svsc[i] = i - 8;\n+      svbc[i] = (i % 2) ? 0xff : 0;\n+    }\n+  for (i = 0; i < 8; ++i)\n+    {\n+      svus[i] = i;\n+      svss[i] = i - 4;\n+      svbs[i] = (i % 2) ? 0xffff : 0;\n+      svp[i] = i;\n+    }\n+  for (i = 0; i < 4; ++i)\n+    {\n+      svui[i] = i;\n+      svsi[i] = i - 2;\n+      svbi[i] = (i % 2) ? 0xffffffff : 0;\n+      svf[i] = i * 1.0f;\n+    }\n+}\n+\n+static void test ()\n+{\n+  vector unsigned char evuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char evsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector bool char evbc = {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255};\n+  vector unsigned short evus = {0,1,2,3,4,5,6,7};\n+  vector signed short evss = {-4,-3,-2,-1,0,1,2,3};\n+  vector bool short evbs = {0,65535,0,65535,0,65535,0,65535};\n+  vector pixel evp = {0,1,2,3,4,5,6,7};\n+  vector unsigned int evui = {0,1,2,3};\n+  vector signed int evsi = {-2,-1,0,1};\n+  vector bool int evbi = {0,0xffffffff,0,0xffffffff};\n+  vector float evf = {0.0,1.0,2.0,3.0};\n+\n+  vector unsigned char vuc;\n+  vector signed char vsc;\n+  vector bool char vbc;\n+  vector unsigned short vus;\n+  vector signed short vss;\n+  vector bool short vbs;\n+  vector pixel vp;\n+  vector unsigned int vui;\n+  vector signed int vsi;\n+  vector bool int vbi;\n+  vector float vf;\n+\n+  init ();\n+\n+  vuc = vec_ldl (0, (vector unsigned char *)svuc);\n+  vsc = vec_ldl (0, (vector signed char *)svsc);\n+  vbc = vec_ldl (0, (vector bool char *)svbc);\n+  vus = vec_ldl (0, (vector unsigned short *)svus);\n+  vss = vec_ldl (0, (vector signed short *)svss);\n+  vbs = vec_ldl (0, (vector bool short *)svbs);\n+  vp  = vec_ldl (0, (vector pixel *)svp);\n+  vui = vec_ldl (0, (vector unsigned int *)svui);\n+  vsi = vec_ldl (0, (vector signed int *)svsi);\n+  vbi = vec_ldl (0, (vector bool int *)svbi);\n+  vf  = vec_ldl (0, (vector float *)svf);\n+\n+  check (vec_all_eq (vuc, evuc), \"vuc\");\n+  check (vec_all_eq (vsc, evsc), \"vsc\");\n+  check (vec_all_eq (vbc, evbc), \"vbc\");\n+  check (vec_all_eq (vus, evus), \"vus\");\n+  check (vec_all_eq (vss, evss), \"vss\");\n+  check (vec_all_eq (vbs, evbs), \"vbs\");\n+  check (vec_all_eq (vp,  evp ), \"vp\" );\n+  check (vec_all_eq (vui, evui), \"vui\");\n+  check (vec_all_eq (vsi, evsi), \"vsi\");\n+  check (vec_all_eq (vbi, evbi), \"vbi\");\n+  check (vec_all_eq (vf,  evf ), \"vf\" );\n+}"}, {"sha": "1a7b01bb5a17b6e3b8d9ae7ac225de3d37e9c7c5", "filename": "gcc/testsuite/gcc.dg/vmx/st-be-order.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-be-order.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned char svuc[16] __attribute__ ((aligned (16)));\n+static signed char svsc[16] __attribute__ ((aligned (16)));\n+static unsigned char svbc[16] __attribute__ ((aligned (16)));\n+static unsigned short svus[8] __attribute__ ((aligned (16)));\n+static signed short svss[8] __attribute__ ((aligned (16)));\n+static unsigned short svbs[8] __attribute__ ((aligned (16)));\n+static unsigned short svp[8] __attribute__ ((aligned (16)));\n+static unsigned int svui[4] __attribute__ ((aligned (16)));\n+static signed int svsi[4] __attribute__ ((aligned (16)));\n+static unsigned int svbi[4] __attribute__ ((aligned (16)));\n+static float svf[4] __attribute__ ((aligned (16)));\n+\n+static void check_arrays ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 16; ++i)\n+    {\n+      check (svuc[i] == i, \"svuc\");\n+      check (svsc[i] == i - 8, \"svsc\");\n+      check (svbc[i] == ((i % 2) ? 0xff : 0), \"svbc\");\n+    }\n+  for (i = 0; i < 8; ++i)\n+    {\n+      check (svus[i] == i, \"svus\");\n+      check (svss[i] == i - 4, \"svss\");\n+      check (svbs[i] == ((i % 2) ? 0xffff : 0), \"svbs\");\n+      check (svp[i] == i, \"svp\");\n+    }\n+  for (i = 0; i < 4; ++i)\n+    {\n+      check (svui[i] == i, \"svui\");\n+      check (svsi[i] == i - 2, \"svsi\");\n+      check (svbi[i] == ((i % 2) ? 0xffffffff : 0), \"svbi\");\n+      check (svf[i] == i * 1.0f, \"svf\");\n+    }\n+}\n+\n+static void test ()\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector unsigned char vuc = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+  vector signed char vsc = {7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8};\n+  vector bool char vbc = {255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0};\n+  vector unsigned short vus = {7,6,5,4,3,2,1,0};\n+  vector signed short vss = {3,2,1,0,-1,-2,-3,-4};\n+  vector bool short vbs = {65535,0,65535,0,65535,0,65535,0};\n+  vector pixel vp = {7,6,5,4,3,2,1,0};\n+  vector unsigned int vui = {3,2,1,0};\n+  vector signed int vsi = {1,0,-1,-2};\n+  vector bool int vbi = {0xffffffff,0,0xffffffff,0};\n+  vector float vf = {3.0,2.0,1.0,0.0};\n+#else\n+  vector unsigned char vuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector bool char vbc = {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255};\n+  vector unsigned short vus = {0,1,2,3,4,5,6,7};\n+  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n+  vector bool short vbs = {0,65535,0,65535,0,65535,0,65535};\n+  vector pixel vp = {0,1,2,3,4,5,6,7};\n+  vector unsigned int vui = {0,1,2,3};\n+  vector signed int vsi = {-2,-1,0,1};\n+  vector bool int vbi = {0,0xffffffff,0,0xffffffff};\n+  vector float vf = {0.0,1.0,2.0,3.0};\n+#endif\n+\n+  vec_st (vuc, 0, (vector unsigned char *)svuc);\n+  vec_st (vsc, 0, (vector signed char *)svsc);\n+  vec_st (vbc, 0, (vector bool char *)svbc);\n+  vec_st (vus, 0, (vector unsigned short *)svus);\n+  vec_st (vss, 0, (vector signed short *)svss);\n+  vec_st (vbs, 0, (vector bool short *)svbs);\n+  vec_st (vp,  0, (vector pixel *)svp);\n+  vec_st (vui, 0, (vector unsigned int *)svui);\n+  vec_st (vsi, 0, (vector signed int *)svsi);\n+  vec_st (vbi, 0, (vector bool int *)svbi);\n+  vec_st (vf,  0, (vector float *)svf);\n+\n+  check_arrays ();\n+}"}, {"sha": "6656a8acc5802afdb1b45732eee7f1ed309915ca", "filename": "gcc/testsuite/gcc.dg/vmx/st-vsx-be-order.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-vsx-be-order.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned long svul[2] __attribute__ ((aligned (16)));\n+static double svd[2] __attribute__ ((aligned (16)));\n+\n+static void check_arrays ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 2; ++i)\n+    {\n+      check (svul[i] == i, \"svul\");\n+      check (svd[i] == i * 1.0, \"svd\");\n+    }\n+}\n+\n+static void test ()\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector unsigned long vul = {1,0};\n+  vector double vd = {1.0,0.0};\n+#else\n+  vector unsigned long vul = {0,1};\n+  vector double vd = {0.0,1.0};\n+#endif\n+\n+  vec_st (vul, 0, (vector unsigned long *)svul);\n+  vec_st (vd,  0, (vector double *)svd);\n+\n+  check_arrays ();\n+}"}, {"sha": "8505ea9babbc440cb3360f5de88f16a0417e644e", "filename": "gcc/testsuite/gcc.dg/vmx/st-vsx.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-vsx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-vsx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-vsx.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned long svul[2] __attribute__ ((aligned (16)));\n+static double svd[2] __attribute__ ((aligned (16)));\n+\n+static void check_arrays ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 2; ++i)\n+    {\n+      check (svul[i] == i, \"svul\");\n+      check (svd[i] == i * 1.0, \"svd\");\n+    }\n+}\n+\n+static void test ()\n+{\n+  vector unsigned long vul = {0,1};\n+  vector double vd = {0.0,1.0};\n+\n+  vec_st (vul, 0, (vector unsigned long *)svul);\n+  vec_st (vd,  0, (vector double *)svd);\n+\n+  check_arrays ();\n+}"}, {"sha": "3339b728314474fcf69736bf83d65d366d8a43ad", "filename": "gcc/testsuite/gcc.dg/vmx/st.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,67 @@\n+#include \"harness.h\"\n+\n+static unsigned char svuc[16] __attribute__ ((aligned (16)));\n+static signed char svsc[16] __attribute__ ((aligned (16)));\n+static unsigned char svbc[16] __attribute__ ((aligned (16)));\n+static unsigned short svus[8] __attribute__ ((aligned (16)));\n+static signed short svss[8] __attribute__ ((aligned (16)));\n+static unsigned short svbs[8] __attribute__ ((aligned (16)));\n+static unsigned short svp[8] __attribute__ ((aligned (16)));\n+static unsigned int svui[4] __attribute__ ((aligned (16)));\n+static signed int svsi[4] __attribute__ ((aligned (16)));\n+static unsigned int svbi[4] __attribute__ ((aligned (16)));\n+static float svf[4] __attribute__ ((aligned (16)));\n+\n+static void check_arrays ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 16; ++i)\n+    {\n+      check (svuc[i] == i, \"svuc\");\n+      check (svsc[i] == i - 8, \"svsc\");\n+      check (svbc[i] == ((i % 2) ? 0xff : 0), \"svbc\");\n+    }\n+  for (i = 0; i < 8; ++i)\n+    {\n+      check (svus[i] == i, \"svus\");\n+      check (svss[i] == i - 4, \"svss\");\n+      check (svbs[i] == ((i % 2) ? 0xffff : 0), \"svbs\");\n+      check (svp[i] == i, \"svp\");\n+    }\n+  for (i = 0; i < 4; ++i)\n+    {\n+      check (svui[i] == i, \"svui\");\n+      check (svsi[i] == i - 2, \"svsi\");\n+      check (svbi[i] == ((i % 2) ? 0xffffffff : 0), \"svbi\");\n+      check (svf[i] == i * 1.0f, \"svf\");\n+    }\n+}\n+\n+static void test ()\n+{\n+  vector unsigned char vuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector bool char vbc = {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255};\n+  vector unsigned short vus = {0,1,2,3,4,5,6,7};\n+  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n+  vector bool short vbs = {0,65535,0,65535,0,65535,0,65535};\n+  vector pixel vp = {0,1,2,3,4,5,6,7};\n+  vector unsigned int vui = {0,1,2,3};\n+  vector signed int vsi = {-2,-1,0,1};\n+  vector bool int vbi = {0,0xffffffff,0,0xffffffff};\n+  vector float vf = {0.0,1.0,2.0,3.0};\n+\n+  vec_st (vuc, 0, (vector unsigned char *)svuc);\n+  vec_st (vsc, 0, (vector signed char *)svsc);\n+  vec_st (vbc, 0, (vector bool char *)svbc);\n+  vec_st (vus, 0, (vector unsigned short *)svus);\n+  vec_st (vss, 0, (vector signed short *)svss);\n+  vec_st (vbs, 0, (vector bool short *)svbs);\n+  vec_st (vp,  0, (vector pixel *)svp);\n+  vec_st (vui, 0, (vector unsigned int *)svui);\n+  vec_st (vsi, 0, (vector signed int *)svsi);\n+  vec_st (vbi, 0, (vector bool int *)svbi);\n+  vec_st (vf,  0, (vector float *)svf);\n+\n+  check_arrays ();\n+}"}, {"sha": "7f00a036499c3e37f5623a11560c4985f638a7cf", "filename": "gcc/testsuite/gcc.dg/vmx/stl-be-order.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-be-order.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned char svuc[16] __attribute__ ((aligned (16)));\n+static signed char svsc[16] __attribute__ ((aligned (16)));\n+static unsigned char svbc[16] __attribute__ ((aligned (16)));\n+static unsigned short svus[8] __attribute__ ((aligned (16)));\n+static signed short svss[8] __attribute__ ((aligned (16)));\n+static unsigned short svbs[8] __attribute__ ((aligned (16)));\n+static unsigned short svp[8] __attribute__ ((aligned (16)));\n+static unsigned int svui[4] __attribute__ ((aligned (16)));\n+static signed int svsi[4] __attribute__ ((aligned (16)));\n+static unsigned int svbi[4] __attribute__ ((aligned (16)));\n+static float svf[4] __attribute__ ((aligned (16)));\n+\n+static void check_arrays ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 16; ++i)\n+    {\n+      check (svuc[i] == i, \"svuc\");\n+      check (svsc[i] == i - 8, \"svsc\");\n+      check (svbc[i] == ((i % 2) ? 0xff : 0), \"svbc\");\n+    }\n+  for (i = 0; i < 8; ++i)\n+    {\n+      check (svus[i] == i, \"svus\");\n+      check (svss[i] == i - 4, \"svss\");\n+      check (svbs[i] == ((i % 2) ? 0xffff : 0), \"svbs\");\n+      check (svp[i] == i, \"svp\");\n+    }\n+  for (i = 0; i < 4; ++i)\n+    {\n+      check (svui[i] == i, \"svui\");\n+      check (svsi[i] == i - 2, \"svsi\");\n+      check (svbi[i] == ((i % 2) ? 0xffffffff : 0), \"svbi\");\n+      check (svf[i] == i * 1.0f, \"svf\");\n+    }\n+}\n+\n+static void test ()\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector unsigned char vuc = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+  vector signed char vsc = {7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8};\n+  vector bool char vbc = {255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0};\n+  vector unsigned short vus = {7,6,5,4,3,2,1,0};\n+  vector signed short vss = {3,2,1,0,-1,-2,-3,-4};\n+  vector bool short vbs = {65535,0,65535,0,65535,0,65535,0};\n+  vector pixel vp = {7,6,5,4,3,2,1,0};\n+  vector unsigned int vui = {3,2,1,0};\n+  vector signed int vsi = {1,0,-1,-2};\n+  vector bool int vbi = {0xffffffff,0,0xffffffff,0};\n+  vector float vf = {3.0,2.0,1.0,0.0};\n+#else\n+  vector unsigned char vuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector bool char vbc = {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255};\n+  vector unsigned short vus = {0,1,2,3,4,5,6,7};\n+  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n+  vector bool short vbs = {0,65535,0,65535,0,65535,0,65535};\n+  vector pixel vp = {0,1,2,3,4,5,6,7};\n+  vector unsigned int vui = {0,1,2,3};\n+  vector signed int vsi = {-2,-1,0,1};\n+  vector bool int vbi = {0,0xffffffff,0,0xffffffff};\n+  vector float vf = {0.0,1.0,2.0,3.0};\n+#endif\n+\n+  vec_stl (vuc, 0, (vector unsigned char *)svuc);\n+  vec_stl (vsc, 0, (vector signed char *)svsc);\n+  vec_stl (vbc, 0, (vector bool char *)svbc);\n+  vec_stl (vus, 0, (vector unsigned short *)svus);\n+  vec_stl (vss, 0, (vector signed short *)svss);\n+  vec_stl (vbs, 0, (vector bool short *)svbs);\n+  vec_stl (vp,  0, (vector pixel *)svp);\n+  vec_stl (vui, 0, (vector unsigned int *)svui);\n+  vec_stl (vsi, 0, (vector signed int *)svsi);\n+  vec_stl (vbi, 0, (vector bool int *)svbi);\n+  vec_stl (vf,  0, (vector float *)svf);\n+\n+  check_arrays ();\n+}"}, {"sha": "14ac80059014683083db755e38680808bbeec9e6", "filename": "gcc/testsuite/gcc.dg/vmx/stl-vsx-be-order.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-vsx-be-order.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned long svul[2] __attribute__ ((aligned (16)));\n+static double svd[2] __attribute__ ((aligned (16)));\n+\n+static void check_arrays ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 2; ++i)\n+    {\n+      check (svul[i] == i, \"svul\");\n+      check (svd[i] == i * 1.0, \"svd\");\n+    }\n+}\n+\n+static void test ()\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector unsigned long vul = {1,0};\n+  vector double vd = {1.0,0.0};\n+#else\n+  vector unsigned long vul = {0,1};\n+  vector double vd = {0.0,1.0};\n+#endif\n+\n+  vec_stl (vul, 0, (vector unsigned long *)svul);\n+  vec_stl (vd,  0, (vector double *)svd);\n+\n+  check_arrays ();\n+}"}, {"sha": "7e7be7b93cca8c931708fc8742e6c7a4120d0b03", "filename": "gcc/testsuite/gcc.dg/vmx/stl-vsx.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-vsx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-vsx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-vsx.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned long svul[2] __attribute__ ((aligned (16)));\n+static double svd[2] __attribute__ ((aligned (16)));\n+\n+static void check_arrays ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 2; ++i)\n+    {\n+      check (svul[i] == i, \"svul\");\n+      check (svd[i] == i * 1.0, \"svd\");\n+    }\n+}\n+\n+static void test ()\n+{\n+  vector unsigned long vul = {0,1};\n+  vector double vd = {0.0,1.0};\n+\n+  vec_stl (vul, 0, (vector unsigned long *)svul);\n+  vec_stl (vd,  0, (vector double *)svd);\n+\n+  check_arrays ();\n+}"}, {"sha": "9ebd8782a4d2c2583fb6e22a64e00a4ee8e0bd02", "filename": "gcc/testsuite/gcc.dg/vmx/stl.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl.c?ref=4b3a6bcbcce9a3e9b58791ba72bac8f9eb67cf37", "patch": "@@ -0,0 +1,67 @@\n+#include \"harness.h\"\n+\n+static unsigned char svuc[16] __attribute__ ((aligned (16)));\n+static signed char svsc[16] __attribute__ ((aligned (16)));\n+static unsigned char svbc[16] __attribute__ ((aligned (16)));\n+static unsigned short svus[8] __attribute__ ((aligned (16)));\n+static signed short svss[8] __attribute__ ((aligned (16)));\n+static unsigned short svbs[8] __attribute__ ((aligned (16)));\n+static unsigned short svp[8] __attribute__ ((aligned (16)));\n+static unsigned int svui[4] __attribute__ ((aligned (16)));\n+static signed int svsi[4] __attribute__ ((aligned (16)));\n+static unsigned int svbi[4] __attribute__ ((aligned (16)));\n+static float svf[4] __attribute__ ((aligned (16)));\n+\n+static void check_arrays ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 16; ++i)\n+    {\n+      check (svuc[i] == i, \"svuc\");\n+      check (svsc[i] == i - 8, \"svsc\");\n+      check (svbc[i] == ((i % 2) ? 0xff : 0), \"svbc\");\n+    }\n+  for (i = 0; i < 8; ++i)\n+    {\n+      check (svus[i] == i, \"svus\");\n+      check (svss[i] == i - 4, \"svss\");\n+      check (svbs[i] == ((i % 2) ? 0xffff : 0), \"svbs\");\n+      check (svp[i] == i, \"svp\");\n+    }\n+  for (i = 0; i < 4; ++i)\n+    {\n+      check (svui[i] == i, \"svui\");\n+      check (svsi[i] == i - 2, \"svsi\");\n+      check (svbi[i] == ((i % 2) ? 0xffffffff : 0), \"svbi\");\n+      check (svf[i] == i * 1.0f, \"svf\");\n+    }\n+}\n+\n+static void test ()\n+{\n+  vector unsigned char vuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector bool char vbc = {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255};\n+  vector unsigned short vus = {0,1,2,3,4,5,6,7};\n+  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n+  vector bool short vbs = {0,65535,0,65535,0,65535,0,65535};\n+  vector pixel vp = {0,1,2,3,4,5,6,7};\n+  vector unsigned int vui = {0,1,2,3};\n+  vector signed int vsi = {-2,-1,0,1};\n+  vector bool int vbi = {0,0xffffffff,0,0xffffffff};\n+  vector float vf = {0.0,1.0,2.0,3.0};\n+\n+  vec_stl (vuc, 0, (vector unsigned char *)svuc);\n+  vec_stl (vsc, 0, (vector signed char *)svsc);\n+  vec_stl (vbc, 0, (vector bool char *)svbc);\n+  vec_stl (vus, 0, (vector unsigned short *)svus);\n+  vec_stl (vss, 0, (vector signed short *)svss);\n+  vec_stl (vbs, 0, (vector bool short *)svbs);\n+  vec_stl (vp,  0, (vector pixel *)svp);\n+  vec_stl (vui, 0, (vector unsigned int *)svui);\n+  vec_stl (vsi, 0, (vector signed int *)svsi);\n+  vec_stl (vbi, 0, (vector bool int *)svbi);\n+  vec_stl (vf,  0, (vector float *)svf);\n+\n+  check_arrays ();\n+}"}]}