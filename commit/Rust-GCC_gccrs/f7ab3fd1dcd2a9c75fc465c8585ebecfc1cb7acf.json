{"sha": "f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdhYjNmZDFkY2QyYTljNzVmYzQ2NWM4NTg1ZWJlY2ZjMWNiN2FjZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-10-13T22:46:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-10-13T22:46:58Z"}, "message": "istream.tcc (operator>>(__istream_type& (*)(__istream_type&)), operator>>(__ios_type& (*)(__ios_type&)), operator>>(ios_base& (*)(ios_base&))): Move...\n\n2006-10-13  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/istream.tcc (operator>>(__istream_type&\n\t(*)(__istream_type&)), operator>>(__ios_type& (*)(__ios_type&)),\n\toperator>>(ios_base& (*)(ios_base&))): Move...\n\t* include/std/std_istream.h: ... here.\n\t(operator>>(basic_istream<char,>&, unsigned char&),\n\toperator>>(basic_istream<char,>&, signed char&),\n\toperator>>(basic_istream<char,>&, unsigned char*),\n\toperator>>(basic_istream<char,>&, signed char*)): Mark inline.\n\t* include/bits/ostream.tcc (operator<<(__ostream_type&\n\t(*)(__ostream_type&)), operator<<(__ios_type& (*)(__ios_type&)),\n\toperator<<(ios_base& (*)(ios_base&))): Move...\n\t* include/std/std_ostream.h: ... here.\n\t(operator<<(basic_ostream<>&, _CharT),\n\toperator<<(basic_ostream<>&, char),\n\toperator<<(basic_ostream<char,>&, char),\n\toperator<<(basic_ostream<char,>&, signed char),\n\toperator<<(basic_ostream<char,>&, unsigned char),\n\toperator<<(basic_ostream<>&, const _CharT*),\n\toperator<<(basic_ostream<char,>&, const char*),\n\toperator<<(basic_ostream<char,>&, const signed char*),\n\toperator<<(basic_ostream<char,>&, const unsigned char*),\n\tendl(basic_ostream<>&), ends(basic_ostream<>&),\n\tflush(basic_ostream<>&)): Mark inline.\n\nFrom-SVN: r117715", "tree": {"sha": "7a5ebbbba647ee21f587ad70018c5accb76f8a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a5ebbbba647ee21f587ad70018c5accb76f8a03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf/comments", "author": null, "committer": null, "parents": [{"sha": "164ea65a2737fccce0cd4bfd742014eeb8c45d57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164ea65a2737fccce0cd4bfd742014eeb8c45d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/164ea65a2737fccce0cd4bfd742014eeb8c45d57"}], "stats": {"total": 189, "additions": 93, "deletions": 96}, "files": [{"sha": "9df166145286122f55ea6ba4e0acd2ea3c93bc10", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf", "patch": "@@ -1,3 +1,29 @@\n+2006-10-13  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/istream.tcc (operator>>(__istream_type&\n+\t(*)(__istream_type&)), operator>>(__ios_type& (*)(__ios_type&)),\n+\toperator>>(ios_base& (*)(ios_base&))): Move...\n+\t* include/std/std_istream.h: ... here.\n+\t(operator>>(basic_istream<char,>&, unsigned char&),\n+\toperator>>(basic_istream<char,>&, signed char&),\n+\toperator>>(basic_istream<char,>&, unsigned char*),\n+\toperator>>(basic_istream<char,>&, signed char*)): Mark inline.\n+\t* include/bits/ostream.tcc (operator<<(__ostream_type&\n+\t(*)(__ostream_type&)), operator<<(__ios_type& (*)(__ios_type&)),\n+\toperator<<(ios_base& (*)(ios_base&))): Move...\n+\t* include/std/std_ostream.h: ... here.\n+\t(operator<<(basic_ostream<>&, _CharT),\n+\toperator<<(basic_ostream<>&, char),\n+\toperator<<(basic_ostream<char,>&, char),\n+\toperator<<(basic_ostream<char,>&, signed char),\n+\toperator<<(basic_ostream<char,>&, unsigned char),\n+\toperator<<(basic_ostream<>&, const _CharT*),\n+\toperator<<(basic_ostream<char,>&, const char*),\n+\toperator<<(basic_ostream<char,>&, const signed char*),\n+\toperator<<(basic_ostream<char,>&, const unsigned char*),\n+\tendl(basic_ostream<>&), ends(basic_ostream<>&),\n+\tflush(basic_ostream<>&)): Mark inline.\n+\n 2006-10-13  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/28277 (partial: ostream bits 2)"}, {"sha": "39ee2c75772a93c0a10a4e0faf40fa005c4e2d0b", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf", "patch": "@@ -85,30 +85,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(__istream_type& (*__pf)(__istream_type&))\n-    { return __pf(*this); }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(__ios_type& (*__pf)(__ios_type&))\n-    {\n-      __pf(*this);\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(ios_base& (*__pf)(ios_base&))\n-    {\n-      __pf(*this);\n-      return *this;\n-    }\n-\n   template<typename _CharT, typename _Traits>\n     template<typename _ValueT>\n       basic_istream<_CharT, _Traits>&"}, {"sha": "5bfde44dd3a8547f561fcfef0ab86a8d986de6fc", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf", "patch": "@@ -61,41 +61,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t__os.setstate(ios_base::failbit);\n     }\n \n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(__ostream_type& (*__pf)(__ostream_type&))\n-    {\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // DR 60. What is a formatted input function?\n-      // The inserters for manipulators are *not* formatted output functions.\n-      return __pf(*this);\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(__ios_type& (*__pf)(__ios_type&))\n-    {\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // DR 60. What is a formatted input function?\n-      // The inserters for manipulators are *not* formatted output functions.\n-      __pf(*this);\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(ios_base& (*__pf)(ios_base&))\n-    {\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // DR 60. What is a formatted input function?\n-      // The inserters for manipulators are *not* formatted output functions.\n-      __pf(*this);\n-      return *this;\n-    }\n-\n   template<typename _CharT, typename _Traits>\n     template<typename _ValueT>\n       basic_ostream<_CharT, _Traits>&"}, {"sha": "e81c9cd9252b6b576beaac3efc4a449863cfb7e9", "filename": "libstdc++-v3/include/std/std_istream.h", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h?ref=f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf", "patch": "@@ -127,14 +127,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  functions in constructs like \"std::cin >> std::ws\".  For more\n        *  information, see the iomanip header.\n       */\n-      inline __istream_type&\n-      operator>>(__istream_type& (*__pf)(__istream_type&));\n+      __istream_type&\n+      operator>>(__istream_type& (*__pf)(__istream_type&))\n+      { return __pf(*this); }\n \n-      inline __istream_type&\n-      operator>>(__ios_type& (*__pf)(__ios_type&));\n+      __istream_type&\n+      operator>>(__ios_type& (*__pf)(__ios_type&))\n+      { \n+\t__pf(*this);\n+\treturn *this;\n+      }\n \n-      inline __istream_type&\n-      operator>>(ios_base& (*__pf)(ios_base&));\n+      __istream_type&\n+      operator>>(ios_base& (*__pf)(ios_base&))\n+      {\n+\t__pf(*this);\n+\treturn *this;\n+      }\n       //@}\n       \n       // [27.6.1.2.2] arithmetic extractors\n@@ -247,7 +256,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @return  The number of characters extracted by the previous\n        *           unformatted input function dispatched for this stream.\n       */\n-      inline streamsize \n+      streamsize \n       gcount() const \n       { return _M_gcount; }\n       \n@@ -331,7 +340,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  Returns @c get(s,n,widen('\\n')).\n       */\n-      inline __istream_type& \n+      __istream_type& \n       get(char_type* __s, streamsize __n)\n       { return this->get(__s, __n, this->widen('\\n')); }\n \n@@ -364,7 +373,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  Returns @c get(sb,widen('\\n')).\n       */\n-      inline __istream_type&\n+      __istream_type&\n       get(__streambuf_type& __sb)\n       { return this->get(__sb, this->widen('\\n')); }\n \n@@ -404,7 +413,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  Returns @c getline(s,n,widen('\\n')).\n       */\n-      inline __istream_type& \n+      __istream_type& \n       getline(char_type* __s, streamsize __n)\n       { return this->getline(__s, __n, this->widen('\\n')); }\n \n@@ -675,7 +684,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  For ease of use, sentries may be converted to booleans.  The\n        *  return value is that of the sentry state (true == okay).\n       */\n-      operator bool() const { return _M_ok; }\n+      operator bool() const\n+      { return _M_ok; }\n \n     private:\n       bool _M_ok;\n@@ -699,12 +709,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);\n \n   template<class _Traits>\n-    basic_istream<char, _Traits>&\n+    inline basic_istream<char, _Traits>&\n     operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n     { return (__in >> reinterpret_cast<char&>(__c)); }\n \n   template<class _Traits>\n-    basic_istream<char, _Traits>&\n+    inline basic_istream<char, _Traits>&\n     operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n     { return (__in >> reinterpret_cast<char&>(__c)); }\n   //@}\n@@ -745,12 +755,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     operator>>(basic_istream<char>& __in, char* __s);\n \n   template<class _Traits>\n-    basic_istream<char, _Traits>&\n+    inline basic_istream<char, _Traits>&\n     operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\n     { return (__in >> reinterpret_cast<char*>(__s)); }\n \n   template<class _Traits>\n-    basic_istream<char, _Traits>&\n+    inline basic_istream<char, _Traits>&\n     operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n     { return (__in >> reinterpret_cast<char*>(__s)); }\n   //@}"}, {"sha": "5cac2c1760a7ee2a2c6396540f44530d8f7981c9", "filename": "libstdc++-v3/include/std/std_ostream.h", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h?ref=f7ab3fd1dcd2a9c75fc465c8585ebecfc1cb7acf", "patch": "@@ -131,14 +131,34 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  functions in constructs like \"std::cout << std::endl\".  For more\n        *  information, see the iomanip header.\n       */\n-      inline __ostream_type&\n-      operator<<(__ostream_type& (*__pf)(__ostream_type&));\n-      \n-      inline __ostream_type&\n-      operator<<(__ios_type& (*__pf)(__ios_type&));\n-      \n-      inline __ostream_type&\n-      operator<<(ios_base& (*__pf) (ios_base&));\n+      __ostream_type&\n+      operator<<(__ostream_type& (*__pf)(__ostream_type&))\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// DR 60. What is a formatted input function?\n+\t// The inserters for manipulators are *not* formatted output functions.\n+\treturn __pf(*this);\n+      }\n+\n+      __ostream_type&\n+      operator<<(__ios_type& (*__pf)(__ios_type&))\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// DR 60. What is a formatted input function?\n+\t// The inserters for manipulators are *not* formatted output functions.\n+\t__pf(*this);\n+\treturn *this;\n+      }\n+\n+      __ostream_type&\n+      operator<<(ios_base& (*__pf) (ios_base&))\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// DR 60. What is a formatted input function?\n+\t// The inserters for manipulators are *not* formatted output functions.\n+\t__pf(*this);\n+\treturn *this;\n+      }\n       //@}\n \n       // [27.6.2.5.2] arithmetic inserters\n@@ -405,7 +425,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       // Data Members:\n       bool \t\t\t\t_M_ok;\n-      basic_ostream<_CharT,_Traits>& \t_M_os;\n+      basic_ostream<_CharT, _Traits>& \t_M_os;\n       \n     public:\n       /**\n@@ -420,7 +440,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  true (\"okay\").\n       */\n       explicit\n-      sentry(basic_ostream<_CharT,_Traits>& __os);\n+      sentry(basic_ostream<_CharT, _Traits>& __os);\n \n       /**\n        *  @brief  Possibly flushes the stream.\n@@ -469,29 +489,29 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @c char, the character is widened before insertion.\n   */\n   template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n+    inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)\n     { return __out._M_insert(&__c, 1); }\n \n   template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n+    inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)\n     { return (__out << __out.widen(__c)); }\n \n   // Specialization\n   template <class _Traits> \n-    basic_ostream<char, _Traits>&\n+    inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, char __c)\n     { return __out._M_insert(&__c, 1); }\n \n   // Signed and unsigned\n   template<class _Traits>\n-    basic_ostream<char, _Traits>&\n+    inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)\n     { return (__out << static_cast<char>(__c)); }\n   \n   template<class _Traits>\n-    basic_ostream<char, _Traits>&\n+    inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)\n     { return (__out << static_cast<char>(__c)); }\n   //@}\n@@ -511,7 +531,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  determined by [22.2.2.2.2]).  @c out.width(0) is then called.\n   */\n   template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n+    inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)\n     {\n       if (!__s)\n@@ -527,7 +547,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // Partial specializationss\n   template<class _Traits>\n-    basic_ostream<char, _Traits>&\n+    inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)\n     {\n       if (!__s)\n@@ -539,12 +559,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // Signed and unsigned\n   template<class _Traits>\n-    basic_ostream<char, _Traits>&\n+    inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)\n     { return (__out << reinterpret_cast<const char*>(__s)); }\n \n   template<class _Traits>\n-    basic_ostream<char, _Traits> &\n+    inline basic_ostream<char, _Traits> &\n     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)\n     { return (__out << reinterpret_cast<const char*>(__s)); }\n   //@}\n@@ -559,7 +579,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  on this subject.\n   */\n   template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>& \n+    inline basic_ostream<_CharT, _Traits>& \n     endl(basic_ostream<_CharT, _Traits>& __os)\n     { return flush(__os.put(__os.widen('\\n'))); }\n \n@@ -570,7 +590,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  this correctly writes the ASCII @c NUL character string terminator.\n   */\n   template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>& \n+    inline basic_ostream<_CharT, _Traits>& \n     ends(basic_ostream<_CharT, _Traits>& __os)\n     { return __os.put(_CharT()); }\n   \n@@ -580,7 +600,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  This manipulator simply calls the stream's @c flush() member function.\n   */\n   template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>& \n+    inline basic_ostream<_CharT, _Traits>& \n     flush(basic_ostream<_CharT, _Traits>& __os)\n     { return __os.flush(); }\n "}]}