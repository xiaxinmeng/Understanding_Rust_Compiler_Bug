{"sha": "c081d0a3b0291297f04a05c833d2ffa8de3a7a1a", "node_id": "C_kwDOANBUbNoAKGMwODFkMGEzYjAyOTEyOTdmMDRhMDVjODMzZDJmZmE4ZGUzYTdhMWE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-03T10:10:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-03T10:12:46Z"}, "message": "middle-end/103033 - drop native_interpret_expr with .DEFERRED_INIT expansion\n\nThis drops the use of native_interpret_expr which can fail even though\ncan_native_interpret_expr_p returns true in favor of simply folding\nthe VIEW_CONVERT_EXPR punning.\n\n2021-11-03  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/103033\n\t* internal-fn.c (expand_DEFERRED_INIT): Elide the\n\tnative_interpret_expr path in favor of folding the\n\tVIEW_CONVERT_EXPR generated when punning the RHS.", "tree": {"sha": "db558f5c00a7af1a531c327e355bb0cf8cf18566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db558f5c00a7af1a531c327e355bb0cf8cf18566"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c081d0a3b0291297f04a05c833d2ffa8de3a7a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c081d0a3b0291297f04a05c833d2ffa8de3a7a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c081d0a3b0291297f04a05c833d2ffa8de3a7a1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c081d0a3b0291297f04a05c833d2ffa8de3a7a1a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea2ab805acdd023f1c43302723c1fa1349be9cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2ab805acdd023f1c43302723c1fa1349be9cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2ab805acdd023f1c43302723c1fa1349be9cca"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "0cba95411a63423484dda5b1251f47de24e926ba", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c081d0a3b0291297f04a05c833d2ffa8de3a7a1a/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c081d0a3b0291297f04a05c833d2ffa8de3a7a1a/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=c081d0a3b0291297f04a05c833d2ffa8de3a7a1a", "patch": "@@ -3070,9 +3070,11 @@ expand_DEFERRED_INIT (internal_fn, gcall *stmt)\n     }\n   else\n     {\n-      /* If this variable is in a register use expand_assignment.  */\n+      /* If this variable is in a register use expand_assignment.\n+\t For boolean scalars force zero-init.  */\n       tree init;\n-      if (tree_fits_uhwi_p (var_size)\n+      if (TREE_CODE (TREE_TYPE (lhs)) != BOOLEAN_TYPE\n+\t  && tree_fits_uhwi_p (var_size)\n \t  && (init_type == AUTO_INIT_PATTERN\n \t      || !is_gimple_reg_type (var_type))\n \t  && int_mode_for_size (tree_to_uhwi (var_size) * BITS_PER_UNIT,\n@@ -3082,21 +3084,16 @@ expand_DEFERRED_INIT (internal_fn, gcall *stmt)\n \t  unsigned char *buf = (unsigned char *) xmalloc (total_bytes);\n \t  memset (buf, (init_type == AUTO_INIT_PATTERN\n \t\t\t? INIT_PATTERN_VALUE : 0), total_bytes);\n-\t  if (can_native_interpret_type_p (var_type))\n-\t    init = native_interpret_expr (var_type, buf, total_bytes);\n+\t  tree itype = build_nonstandard_integer_type\n+\t\t\t (total_bytes * BITS_PER_UNIT, 1);\n+\t  wide_int w = wi::from_buffer (buf, total_bytes);\n+\t  init = wide_int_to_tree (itype, w);\n+\t  /* Pun the LHS to make sure its type has constant size\n+\t     unless it is an SSA name where that's already known.  */\n+\t  if (TREE_CODE (lhs) != SSA_NAME)\n+\t    lhs = build1 (VIEW_CONVERT_EXPR, itype, lhs);\n \t  else\n-\t    {\n-\t      tree itype = build_nonstandard_integer_type\n-\t\t\t     (total_bytes * BITS_PER_UNIT, 1);\n-\t      wide_int w = wi::from_buffer (buf, total_bytes);\n-\t      init = wide_int_to_tree (itype, w);\n-\t      /* Pun the LHS to make sure its type has constant size\n-\t\t unless it is an SSA name where that's already known.  */\n-\t      if (TREE_CODE (lhs) != SSA_NAME)\n-\t\tlhs = build1 (VIEW_CONVERT_EXPR, itype, lhs);\n-\t      else\n-\t\tinit = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (lhs), init);\n-\t    }\n+\t    init = fold_build1 (VIEW_CONVERT_EXPR, TREE_TYPE (lhs), init);\n \t}\n       else\n \t/* Use zero-init also for variable-length sizes.  */"}]}