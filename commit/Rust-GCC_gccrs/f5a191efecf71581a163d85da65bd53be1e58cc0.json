{"sha": "f5a191efecf71581a163d85da65bd53be1e58cc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhMTkxZWZlY2Y3MTU4MWExNjNkODVkYTY1YmQ1M2JlMWU1OGNjMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-11-18T23:02:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-11-18T23:02:22Z"}, "message": "typeck.c (cp_build_addr_expr_1): Use cp_expr_loc_or_input_loc in three places.\n\n/cp\n2019-11-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (cp_build_addr_expr_1): Use cp_expr_loc_or_input_loc\n\tin three places.\n\t(cxx_sizeof_expr): Use it in one additional place.\n\t(cxx_alignof_expr): Likewise.\n\t(lvalue_or_else): Likewise.\n\n/testsuite\n2019-11-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/addressof2.C: Test locations too.\n\t* g++.dg/cpp0x/rv-lvalue-req.C: Likewise.\n\t* g++.dg/expr/crash2.C: Likewise.\n\t* g++.dg/expr/lval1.C: Likewise.\n\t* g++.dg/expr/unary2.C: Likewise.\n\t* g++.dg/ext/lvaddr.C: Likewise.\n\t* g++.dg/ext/lvalue1.C: Likewise.\n\t* g++.dg/tree-ssa/pr20280.C: Likewise.\n\t* g++.dg/warn/Wplacement-new-size.C: Likewise.\n\t* g++.old-deja/g++.brendan/alignof.C: Likewise.\n\t* g++.old-deja/g++.brendan/sizeof2.C: Likewise.\n\t* g++.old-deja/g++.law/temps1.C: Likewise.\n\nFrom-SVN: r278424", "tree": {"sha": "b60f68126acfc30078c2c7623fd52268a52ee599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b60f68126acfc30078c2c7623fd52268a52ee599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5a191efecf71581a163d85da65bd53be1e58cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a191efecf71581a163d85da65bd53be1e58cc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a191efecf71581a163d85da65bd53be1e58cc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a191efecf71581a163d85da65bd53be1e58cc0/comments", "author": null, "committer": null, "parents": [{"sha": "de83907ada394e5be1343fac4fca5d9b5de3db4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de83907ada394e5be1343fac4fca5d9b5de3db4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de83907ada394e5be1343fac4fca5d9b5de3db4f"}], "stats": {"total": 96, "additions": 62, "deletions": 34}, "files": [{"sha": "9bf64dfa6269ea570aa8d979d35c0a8c338af034", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -1,3 +1,11 @@\n+2019-11-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (cp_build_addr_expr_1): Use cp_expr_loc_or_input_loc\n+\tin three places.\n+\t(cxx_sizeof_expr): Use it in one additional place.\n+\t(cxx_alignof_expr): Likewise.\n+\t(lvalue_or_else): Likewise.\n+\n 2019-11-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91962 - ICE with reference binding and qualification conversion."}, {"sha": "100ae8f81864b1e3d4f50440ed3d3d0672ea7090", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -1765,7 +1765,8 @@ cxx_sizeof_expr (tree e, tsubst_flags_t complain)\n   if (bitfield_p (e))\n     {\n       if (complain & tf_error)\n-        error (\"invalid application of %<sizeof%> to a bit-field\");\n+\terror_at (cp_expr_loc_or_input_loc (e),\n+\t\t  \"invalid application of %<sizeof%> to a bit-field\");\n       else\n         return error_mark_node;\n       e = char_type_node;\n@@ -1825,7 +1826,8 @@ cxx_alignof_expr (tree e, tsubst_flags_t complain)\n   else if (bitfield_p (e))\n     {\n       if (complain & tf_error)\n-        error (\"invalid application of %<__alignof%> to a bit-field\");\n+\terror_at (cp_expr_loc_or_input_loc (e),\n+\t\t  \"invalid application of %<__alignof%> to a bit-field\");\n       else\n         return error_mark_node;\n       t = size_one_node;\n@@ -6127,15 +6129,16 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n       if (kind == clk_none)\n \t{\n \t  if (complain & tf_error)\n-\t    lvalue_error (input_location, lv_addressof);\n+\t    lvalue_error (cp_expr_loc_or_input_loc (arg), lv_addressof);\n \t  return error_mark_node;\n \t}\n       if (strict_lvalue && (kind & (clk_rvalueref|clk_class)))\n \t{\n \t  if (!(complain & tf_error))\n \t    return error_mark_node;\n \t  /* Make this a permerror because we used to accept it.  */\n-\t  permerror (input_location, \"taking address of rvalue\");\n+\t  permerror (cp_expr_loc_or_input_loc (arg),\n+\t\t     \"taking address of rvalue\");\n \t}\n     }\n \n@@ -6229,7 +6232,8 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n   if (bitfield_p (arg))\n     {\n       if (complain & tf_error)\n-\terror (\"attempt to take address of bit-field\");\n+\terror_at (cp_expr_loc_or_input_loc (arg),\n+\t\t  \"attempt to take address of bit-field\");\n       return error_mark_node;\n     }\n \n@@ -10432,7 +10436,7 @@ lvalue_or_else (tree ref, enum lvalue_use use, tsubst_flags_t complain)\n   if (kind == clk_none)\n     {\n       if (complain & tf_error)\n-\tlvalue_error (input_location, use);\n+\tlvalue_error (cp_expr_loc_or_input_loc (ref), use);\n       return 0;\n     }\n   else if (kind & (clk_rvalueref|clk_class))"}, {"sha": "f05382c87a730e194a0a36c919607b5a653ccd12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -1,3 +1,18 @@\n+2019-11-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/addressof2.C: Test locations too.\n+\t* g++.dg/cpp0x/rv-lvalue-req.C: Likewise.\n+\t* g++.dg/expr/crash2.C: Likewise.\n+\t* g++.dg/expr/lval1.C: Likewise.\n+\t* g++.dg/expr/unary2.C: Likewise.\n+\t* g++.dg/ext/lvaddr.C: Likewise.\n+\t* g++.dg/ext/lvalue1.C: Likewise.\n+\t* g++.dg/tree-ssa/pr20280.C: Likewise.\n+\t* g++.dg/warn/Wplacement-new-size.C: Likewise.\n+\t* g++.old-deja/g++.brendan/alignof.C: Likewise.\n+\t* g++.old-deja/g++.brendan/sizeof2.C: Likewise.\n+\t* g++.old-deja/g++.law/temps1.C: Likewise.\n+\n 2019-11-18  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/92493"}, {"sha": "1fa71a27b2bd3e16e51136fec17d42bf61b81b3c", "filename": "gcc/testsuite/g++.dg/cpp0x/addressof2.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof2.C?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -8,26 +8,26 @@ addressof (T &x) noexcept\n   return __builtin_addressof (x);\n }\n \n-auto a = __builtin_addressof (1);\t\t// { dg-error \"lvalue required as unary\" }\n-auto b = addressof (1);\t\t\t\t// { dg-error \"cannot bind non-const lvalue reference of type\" }\n+auto a = __builtin_addressof (1);\t\t// { dg-error \"31:lvalue required as unary\" }\n+auto b = addressof (1);\t\t\t\t// { dg-error \"21:cannot bind non-const lvalue reference of type\" }\n \n struct S { int s : 5; int t; void foo (); } s;\n \n auto c = __builtin_addressof (s);\n auto d = addressof (s);\n-auto e = __builtin_addressof (s.s);\t\t// { dg-error \"attempt to take address of bit-field\" }\n-auto f = addressof (s.s);\t\t\t// { dg-error \"cannot bind bit-field\" }\n-auto g = __builtin_addressof (S{});\t\t// { dg-error \"taking address of rvalue\" }\n-auto h = addressof (S{});\t\t\t// { dg-error \"cannot bind non-const lvalue reference of type\" }\n-auto i = __builtin_addressof (S::t);\t\t// { dg-error \"invalid use of non-static data member\" }\n-auto j = __builtin_addressof (S::foo);\t\t// { dg-error \"invalid use of non-static member function\" }\n+auto e = __builtin_addressof (s.s);\t\t// { dg-error \"33:attempt to take address of bit-field\" }\n+auto f = addressof (s.s);\t\t\t// { dg-error \"23:cannot bind bit-field\" }\n+auto g = __builtin_addressof (S{});\t\t// { dg-error \"31:taking address of rvalue\" }\n+auto h = addressof (S{});\t\t\t// { dg-error \"21:cannot bind non-const lvalue reference of type\" }\n+auto i = __builtin_addressof (S::t);\t\t// { dg-error \"34:invalid use of non-static data member\" }\n+auto j = __builtin_addressof (S::foo);\t\t// { dg-error \"34:invalid use of non-static member function\" }\n \n void\n foo (bool b)\n {\n   lab:;\n   char c;\n   long long int d;\n-  auto k = __builtin_addressof (lab);\t\t// { dg-error \"was not declared in this scope\" }\n-  auto l = __builtin_addressof (b ? c : d);\t// { dg-error \"lvalue required as unary\" }\n+  auto k = __builtin_addressof (lab);\t\t// { dg-error \"33:.lab. was not declared in this scope\" }\n+  auto l = __builtin_addressof (b ? c : d);\t// { dg-error \"35:lvalue required as unary\" }\n }"}, {"sha": "815587d194cbaedcb7474d636001b1f3ea080ee6", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-lvalue-req.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-lvalue-req.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-lvalue-req.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-lvalue-req.C?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -4,7 +4,7 @@ template <class T> T&& declval();\n \n int main()\n {\n-  &declval<int>();\t\t        // { dg-error \"rvalue\" }\n+  &declval<int>();\t\t        // { dg-error \"16:taking address of rvalue\" }\n   declval<int>() = declval<int>();\t// { dg-error \"15:using rvalue as lvalue\" }\n   declval<int>()++;\t\t\t// { dg-error \"15:using rvalue as lvalue\" }\n   --declval<int>();\t\t\t// { dg-error \"17:using rvalue as lvalue\" }"}, {"sha": "a7d60c201cafa7f717bb9a97bf0891591b8dc02c", "filename": "gcc/testsuite/g++.dg/expr/crash2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcrash2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcrash2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcrash2.C?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -8,7 +8,7 @@ int& foo::x=temp;\n \n int main() {\n   int x = 3;\n-  &foo::x = x; // { dg-error \"\" }\n+  &foo::x = x; // { dg-error \"3:lvalue required\" }\n   return 0;\n }\n "}, {"sha": "73d156c605137666143bc6c4dbfa0e60dd486086", "filename": "gcc/testsuite/g++.dg/expr/lval1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval1.C?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -3,5 +3,5 @@\n void f ()\n {\n   int n;\n-  (char) n = 1; // { dg-error \"\" }\n+  (char) n = 1; // { dg-error \"3:lvalue required\" }\n }"}, {"sha": "5962bfe19c9437d734121e4939fdd2c78ca279de", "filename": "gcc/testsuite/g++.dg/expr/unary2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Funary2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Funary2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Funary2.C?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -8,8 +8,8 @@ int n;\n \n void f(void)\n {\n-  -n = 0;        // { dg-error \"lvalue\" }\n-  +n = 0;        // { dg-error \"lvalue\" }\n+  -n = 0;        // { dg-error \"3:lvalue\" }\n+  +n = 0;        // { dg-error \"3:lvalue\" }\n }\n \n template <int>"}, {"sha": "6657eea5e1342783320f80cbb045d6b54ceefbbc", "filename": "gcc/testsuite/g++.dg/ext/lvaddr.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flvaddr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flvaddr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flvaddr.C?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -6,5 +6,5 @@\n void f()\n {\n   int n;\n-  char* p = &(char) n;\t\t// { dg-error \"lvalue\" }\n+  char* p = &(char) n;\t\t// { dg-error \"14:lvalue\" }\n }"}, {"sha": "43f2d699b9dfb603bbed363f0c2791239d907a09", "filename": "gcc/testsuite/g++.dg/ext/lvalue1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flvalue1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flvalue1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flvalue1.C?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -4,7 +4,7 @@ int main ()\n {\n   char c;\n \n-  static_cast<int>(c) = 2; // { dg-error \"lvalue\" \"not an lvalue\" }\n+  static_cast<int>(c) = 2; // { dg-error \"3:lvalue\" \"not an lvalue\" }\n \n   return c != 2;\n }"}, {"sha": "61b070c10fd60bec8998ffd8c3e26ab9f2a127da", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr20280.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr20280.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr20280.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr20280.C?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -57,7 +57,8 @@ void f(X &x, bool b)\n   h (b ? x.i : x.k);\n   h (b ? x.j : x.k);\n \n-  (long &)(b ? x.i : x.j); // { dg-error \"address of bit-field\" }\n-  (long &)(b ? x.i : x.k); // { dg-error \"address of bit-field\" }\n-  (long &)(b ? x.j : x.k); // { dg-error \"address of bit-field\" }\n+  (long &)(b ? x.i : x.j); // { dg-error \"18:attempt to take address of bit-field\" }\n+  (long &)(b ? x.i : x.k); // { dg-error \"18:attempt to take address of bit-field\" }\n+  // { dg-error \"24:attempt to take address of bit-field\" \"\" { target *-*-* } .-1 }\n+  (long &)(b ? x.j : x.k); // { dg-error \"24:attempt to take address of bit-field\" }\n }"}, {"sha": "2bafff34577fa2c807f6f5be66357a442ba9421e", "filename": "gcc/testsuite/g++.dg/warn/Wplacement-new-size.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size.C?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -314,11 +314,11 @@ void test (void *p, int n)\n     new (&sssac4_2) char[sizeof sssac4_2 + 1];   // { dg-warning \"placement\" }\n \n     // taking the address of a temporary is allowed with -fpermissive\n-    new (&fsc ().c) int;                // { dg-warning \"address|placement\" }\n-    new (&fasc1 ().ac) int;             // { dg-warning \"address|placement\" }\n-    new (&fasc2 ().ac) int;             // { dg-warning \"address|placement\" }\n-    new (&fasc3 ().ac) int;             // { dg-warning \"address|placement\" }\n-    new (&fasc4 ().ac) int;             // { dg-warning \"address|placement\" }\n+    new (&fsc ().c) int;                // { dg-warning \"18:taking address|placement\" }\n+    new (&fasc1 ().ac) int;             // { dg-warning \"20:taking address|placement\" }\n+    new (&fasc2 ().ac) int;             // { dg-warning \"20:taking address|placement\" }\n+    new (&fasc3 ().ac) int;             // { dg-warning \"20:taking address|placement\" }\n+    new (&fasc4 ().ac) int;             // { dg-warning \"20:taking address|placement\" }\n \n     new (&uac1) int;                    // { dg-warning \"placement\" }\n     new (&uac2) int;                    // { dg-warning \"placement\" }"}, {"sha": "a8906aff70c79afe45d92485f0cc1c7f7c81435b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/alignof.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Falignof.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Falignof.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Falignof.C?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -5,7 +5,7 @@ struct bar { int bit : 1; };\n void foo (int *r, bar t)\n {\n   // doing alignof on a bit-field should be illegal\n-  __alignof__ (t.bit);// { dg-error \"\" } .*\n+  __alignof__ (t.bit);// { dg-error \"18:invalid application\" } .*\n \n   // both of these (a regular ref and an INDIRECT_REF) should work\n   __alignof__ (r);"}, {"sha": "23176fa3583161b8f55d6d5720ec3fbbf5e0b1fe", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/sizeof2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof2.C?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -12,7 +12,7 @@ main()\n {\n   // sizeof may not be applied to a bit-field\n   foo f;\n-  int i = sizeof (f.bit);// { dg-error \"\" } .*\n+  int i = sizeof (f.bit);// { dg-error \"21:invalid application\" } .*\n \n   return 0;\n }"}, {"sha": "618cb5f7dea2da0f9132dcc40c655835ac8742cb", "filename": "gcc/testsuite/g++.old-deja/g++.law/temps1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a191efecf71581a163d85da65bd53be1e58cc0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C?ref=f5a191efecf71581a163d85da65bd53be1e58cc0", "patch": "@@ -17,4 +17,4 @@ struct cookie\n };\n \n cookie cat(&foo(\"apabepa\"));// { dg-warning \"deprecated conversion|forbids converting a string constant\" \"dep\" }\n-// { dg-warning \"taking address of rvalue\" \"add\" { target *-*-* } .-1 }\n+// { dg-warning \"13:taking address of rvalue\" \"add\" { target *-*-* } .-1 }"}]}