{"sha": "596455ce057d68deec9e7a3e308a10364c2d4498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk2NDU1Y2UwNTdkNjhkZWVjOWU3YTNlMzA4YTEwMzY0YzJkNDQ5OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-04T22:14:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-04T22:14:02Z"}, "message": "optabs.h (optab_handlers): Change type of insn_code to int.\n\ngcc/\n\t* optabs.h (optab_handlers): Change type of insn_code to int.\n\t(optab_handler, set_optab_handler, convert_optab_handler)\n\t(set_convert_optab_handler): Treat the insn_code field as \"insn_code -\n\tCODE_FOR_nothing\".\n\t* optabs.c (optab_table, convert_optab_table): Always zero-initialize.\n\t(init_insn_codes): Zero both the above arrays.\n\t(init_optabs): Never call init_insn_codes first time around.\n\nFrom-SVN: r161809", "tree": {"sha": "485e2dfab01d9fdfedead6728bacde5e33853595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/485e2dfab01d9fdfedead6728bacde5e33853595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/596455ce057d68deec9e7a3e308a10364c2d4498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596455ce057d68deec9e7a3e308a10364c2d4498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/596455ce057d68deec9e7a3e308a10364c2d4498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596455ce057d68deec9e7a3e308a10364c2d4498/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "947131ba4e351e264f3aa3a7ccd6b0c82bcc7ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947131ba4e351e264f3aa3a7ccd6b0c82bcc7ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/947131ba4e351e264f3aa3a7ccd6b0c82bcc7ebd"}], "stats": {"total": 78, "additions": 24, "deletions": 54}, "files": [{"sha": "dd77b5ff04eaf5f765f55665e89cfe0d9109dcd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596455ce057d68deec9e7a3e308a10364c2d4498/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596455ce057d68deec9e7a3e308a10364c2d4498/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=596455ce057d68deec9e7a3e308a10364c2d4498", "patch": "@@ -1,3 +1,13 @@\n+2010-07-04  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* optabs.h (optab_handlers): Change type of insn_code to int.\n+\t(optab_handler, set_optab_handler, convert_optab_handler)\n+\t(set_convert_optab_handler): Treat the insn_code field as \"insn_code -\n+\tCODE_FOR_nothing\".\n+\t* optabs.c (optab_table, convert_optab_table): Always zero-initialize.\n+\t(init_insn_codes): Zero both the above arrays.\n+\t(init_optabs): Never call init_insn_codes first time around.\n+\n 2010-07-04  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* optabs.h (optab_handler, convert_optab_handler): Turn into"}, {"sha": "29dd6d00c01b05c4139b662fb5bdec2da93c1422", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596455ce057d68deec9e7a3e308a10364c2d4498/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596455ce057d68deec9e7a3e308a10364c2d4498/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=596455ce057d68deec9e7a3e308a10364c2d4498", "patch": "@@ -53,27 +53,12 @@ along with GCC; see the file COPYING3.  If not see\n \n    See expr.h for documentation of these optabs.  */\n \n-#if GCC_VERSION >= 4000 && HAVE_DESIGNATED_INITIALIZERS\n-__extension__ struct optab_d optab_table[OTI_MAX]\n-  = { [0 ... OTI_MAX - 1].handlers[0 ... NUM_MACHINE_MODES - 1].insn_code\n-      = CODE_FOR_nothing };\n-#else\n-/* init_insn_codes will do runtime initialization otherwise.  */\n struct optab_d optab_table[OTI_MAX];\n-#endif\n \n rtx libfunc_table[LTI_MAX];\n \n /* Tables of patterns for converting one mode to another.  */\n-#if GCC_VERSION >= 4000 && HAVE_DESIGNATED_INITIALIZERS\n-__extension__ struct convert_optab_d convert_optab_table[COI_MAX]\n-  = { [0 ... COI_MAX - 1].handlers[0 ... NUM_MACHINE_MODES - 1]\n-\t[0 ... NUM_MACHINE_MODES - 1].insn_code\n-      = CODE_FOR_nothing };\n-#else\n-/* init_convert_optab will do runtime initialization otherwise.  */\n struct convert_optab_d convert_optab_table[COI_MAX];\n-#endif\n \n /* Contains the optab used for each rtx code.  */\n optab code_to_optab[NUM_RTX_CODE + 1];\n@@ -5452,28 +5437,8 @@ have_insn_for (enum rtx_code code, enum machine_mode mode)\n static void\n init_insn_codes (void)\n {\n-  unsigned int i;\n-\n-  for (i = 0; i < (unsigned int) OTI_MAX; i++)\n-    {\n-      unsigned int j;\n-      optab op;\n-\n-      op = &optab_table[i];\n-      for (j = 0; j < NUM_MACHINE_MODES; j++)\n-\tset_optab_handler (op, (enum machine_mode) j, CODE_FOR_nothing);\n-    }\n-  for (i = 0; i < (unsigned int) COI_MAX; i++)\n-    {\n-      unsigned int j, k;\n-      convert_optab op;\n-\n-      op = &convert_optab_table[i];\n-      for (j = 0; j < NUM_MACHINE_MODES; j++)\n-\tfor (k = 0; k < NUM_MACHINE_MODES; k++)\n-\t  set_convert_optab_handler (op, (enum machine_mode) j,\n-\t\t\t\t     (enum machine_mode) k, CODE_FOR_nothing);\n-    }\n+  memset (optab_table, 0, sizeof (optab_table));\n+  memset (convert_optab_table, 0, sizeof (convert_optab_table));\n }\n \n /* Initialize OP's code to CODE, and write it into the code_to_optab table.  */\n@@ -6182,9 +6147,7 @@ void\n init_optabs (void)\n {\n   unsigned int i;\n-#if GCC_VERSION >= 4000 && HAVE_DESIGNATED_INITIALIZERS\n   static bool reinit;\n-#endif\n \n   libfunc_hash = htab_create_ggc (10, hash_libfunc, eq_libfunc, NULL);\n   /* Start by initializing all tables to contain CODE_FOR_nothing.  */\n@@ -6200,14 +6163,10 @@ init_optabs (void)\n       vcondu_gen_code[i] = CODE_FOR_nothing;\n     }\n \n-#if GCC_VERSION >= 4000 && HAVE_DESIGNATED_INITIALIZERS\n   /* We statically initialize the insn_codes with the equivalent of\n      CODE_FOR_nothing.  */\n   if (reinit)\n     init_insn_codes ();\n-#else\n-  init_insn_codes ();\n-#endif\n \n   init_optab (add_optab, PLUS);\n   init_optabv (addv_optab, PLUS);\n@@ -6682,9 +6641,7 @@ init_optabs (void)\n   /* Allow the target to add more libcalls or rename some, etc.  */\n   targetm.init_libfuncs ();\n \n-#if GCC_VERSION >= 4000 && HAVE_DESIGNATED_INITIALIZERS\n   reinit = true;\n-#endif\n }\n \n /* Print information about the current contents of the optabs on"}, {"sha": "c37fd41bf29efccf8b1e73a42b0af7a61ba8252f", "filename": "gcc/optabs.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596455ce057d68deec9e7a3e308a10364c2d4498/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596455ce057d68deec9e7a3e308a10364c2d4498/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=596455ce057d68deec9e7a3e308a10364c2d4498", "patch": "@@ -29,18 +29,17 @@ along with GCC; see the file COPYING3.  If not see\n \n    For example, add_optab applies to addition.\n \n-   The insn_code slot is the enum insn_code that says how to\n-   generate an insn for this operation on a particular machine mode.\n-   It is CODE_FOR_nothing if there is no such insn on the target machine.\n-\n    The `lib_call' slot is the name of the library function that\n    can be used to perform the operation.\n \n    A few optabs, such as move_optab, are used by special code.  */\n \n struct optab_handlers\n {\n-  enum insn_code insn_code;\n+  /* I - CODE_FOR_nothing, where I is either the insn code of the\n+     associated insn generator or CODE_FOR_nothing if there is no such\n+     insn on the target machine.  */\n+  int insn_code;\n };\n \n struct optab_d\n@@ -788,15 +787,16 @@ extern rtx expand_vec_shift_expr (sepops, rtx);\n static inline enum insn_code\n optab_handler (optab op, enum machine_mode mode)\n {\n-  return op->handlers[(int) mode].insn_code;\n+  return (enum insn_code) (op->handlers[(int) mode].insn_code\n+\t\t\t   + (int) CODE_FOR_nothing);\n }\n \n /* Record that insn CODE should be used to implement mode MODE of OP.  */\n \n static inline void\n set_optab_handler (optab op, enum machine_mode mode, enum insn_code code)\n {\n-  op->handlers[(int) mode].insn_code = code;\n+  op->handlers[(int) mode].insn_code = (int) code - (int) CODE_FOR_nothing;\n }\n \n /* Return the insn used to perform conversion OP from mode FROM_MODE\n@@ -807,7 +807,9 @@ static inline enum insn_code\n convert_optab_handler (convert_optab op, enum machine_mode to_mode,\n \t\t       enum machine_mode from_mode)\n {\n-  return op->handlers[(int) to_mode][(int) from_mode].insn_code;\n+  return ((enum insn_code)\n+\t  (op->handlers[(int) to_mode][(int) from_mode].insn_code\n+\t   + (int) CODE_FOR_nothing));\n }\n \n /* Record that insn CODE should be used to perform conversion OP\n@@ -817,7 +819,8 @@ static inline void\n set_convert_optab_handler (convert_optab op, enum machine_mode to_mode,\n \t\t\t   enum machine_mode from_mode, enum insn_code code)\n {\n-  op->handlers[(int) to_mode][(int) from_mode].insn_code = code;\n+  op->handlers[(int) to_mode][(int) from_mode].insn_code\n+    = (int) code - (int) CODE_FOR_nothing;\n }\n \n extern rtx optab_libfunc (optab optab, enum machine_mode mode);"}]}