{"sha": "726ac11ebd7552453d39f084cf9d05d2bbc91b58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI2YWMxMWViZDc1NTI0NTNkMzlmMDg0Y2Y5ZDA1ZDJiYmM5MWI1OA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-04-17T02:38:50Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-04-17T02:38:50Z"}, "message": "re PR target/26961 (ICE simplify_subreg:3813)\n\n\n\tPR target/26961\n\t* fold-const.c (fold_ternary): When converting \"A ? B : C\" into either\n\t\"A op B\" or \"A op C\", we may need to convert A to the type of B and C.\n\n\t* gcc.dg/fold-cond-1.c: New test case.\n\t* gcc.dg/pr26961-1.c: Likewise.\n\nFrom-SVN: r113001", "tree": {"sha": "2246af5954be107f6f28cf1fb9e1c7dd4cd48008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2246af5954be107f6f28cf1fb9e1c7dd4cd48008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/726ac11ebd7552453d39f084cf9d05d2bbc91b58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726ac11ebd7552453d39f084cf9d05d2bbc91b58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/726ac11ebd7552453d39f084cf9d05d2bbc91b58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726ac11ebd7552453d39f084cf9d05d2bbc91b58/comments", "author": null, "committer": null, "parents": [{"sha": "27b996417598f927b5d40c4477a917c898848e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b996417598f927b5d40c4477a917c898848e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27b996417598f927b5d40c4477a917c898848e0e"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "90f18a906f972122669322e8b6b0ddfcb516f3f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726ac11ebd7552453d39f084cf9d05d2bbc91b58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726ac11ebd7552453d39f084cf9d05d2bbc91b58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=726ac11ebd7552453d39f084cf9d05d2bbc91b58", "patch": "@@ -1,3 +1,9 @@\n+2006-04-16  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR target/26961\n+\t* fold-const.c (fold_ternary): When converting \"A ? B : C\" into either\n+\t\"A op B\" or \"A op C\", we may need to convert A to the type of B and C.\n+\n 2006-04-16  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* target.h (struct gcc_target): Add mode_rep_extended."}, {"sha": "deb568cd3af792b0274da5fc066d2003164402e6", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726ac11ebd7552453d39f084cf9d05d2bbc91b58/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726ac11ebd7552453d39f084cf9d05d2bbc91b58/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=726ac11ebd7552453d39f084cf9d05d2bbc91b58", "patch": "@@ -11073,7 +11073,9 @@ fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n       if (integer_zerop (op2)\n \t  && truth_value_p (TREE_CODE (arg0))\n \t  && truth_value_p (TREE_CODE (arg1)))\n-\treturn fold_build2 (TRUTH_ANDIF_EXPR, type, arg0, arg1);\n+\treturn fold_build2 (TRUTH_ANDIF_EXPR, type,\n+\t\t\t    fold_convert (type, arg0),\n+\t\t\t    arg1);\n \n       /* Convert A ? B : 1 into !A || B if A and B are truth values.  */\n       if (integer_onep (op2)\n@@ -11083,7 +11085,9 @@ fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n \t  /* Only perform transformation if ARG0 is easily inverted.  */\n \t  tem = invert_truthvalue (arg0);\n \t  if (TREE_CODE (tem) != TRUTH_NOT_EXPR)\n-\t    return fold_build2 (TRUTH_ORIF_EXPR, type, tem, arg1);\n+\t    return fold_build2 (TRUTH_ORIF_EXPR, type,\n+\t\t\t\tfold_convert (type, tem),\n+\t\t\t\targ1);\n \t}\n \n       /* Convert A ? 0 : B into !A && B if A and B are truth values.  */\n@@ -11094,14 +11098,18 @@ fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n \t  /* Only perform transformation if ARG0 is easily inverted.  */\n \t  tem = invert_truthvalue (arg0);\n \t  if (TREE_CODE (tem) != TRUTH_NOT_EXPR)\n-\t    return fold_build2 (TRUTH_ANDIF_EXPR, type, tem, op2);\n+\t    return fold_build2 (TRUTH_ANDIF_EXPR, type,\n+\t\t\t\tfold_convert (type, tem),\n+\t\t\t\top2);\n \t}\n \n       /* Convert A ? 1 : B into A || B if A and B are truth values.  */\n       if (integer_onep (arg1)\n \t  && truth_value_p (TREE_CODE (arg0))\n \t  && truth_value_p (TREE_CODE (op2)))\n-\treturn fold_build2 (TRUTH_ORIF_EXPR, type, arg0, op2);\n+\treturn fold_build2 (TRUTH_ORIF_EXPR, type,\n+\t\t\t    fold_convert (type, arg0),\n+\t\t\t    op2);\n \n       return NULL_TREE;\n "}, {"sha": "32e2d114b62106925452509ada817639e35eb01b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726ac11ebd7552453d39f084cf9d05d2bbc91b58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726ac11ebd7552453d39f084cf9d05d2bbc91b58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=726ac11ebd7552453d39f084cf9d05d2bbc91b58", "patch": "@@ -1,3 +1,9 @@\n+2006-04-16  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR target/26961\n+\t* gcc.dg/fold-cond-1.c: New test case.\n+\t* gcc.dg/pr26961-1.c: Likewise.\n+\n 2006-04-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/27138"}, {"sha": "e9212d1ae7b0aa21a4b317c2f100fe289c24fc1d", "filename": "gcc/testsuite/gcc.dg/fold-cond-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726ac11ebd7552453d39f084cf9d05d2bbc91b58/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cond-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726ac11ebd7552453d39f084cf9d05d2bbc91b58/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cond-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cond-1.c?ref=726ac11ebd7552453d39f084cf9d05d2bbc91b58", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+_Bool test1(int a, int b)\n+{\n+  return a ? b : 0;\n+}\n+\n+_Bool test2(int c, int d)\n+{\n+  return c ? d : 1;\n+}\n+\n+_Bool test3(int e, int f)\n+{\n+  return e ? 0 : f;\n+}\n+\n+_Bool test4(int g, int h)\n+{\n+  return g ? 1 : h;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"a != 0 \\&\\& b != 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"c == 0 \\\\|\\\\| d != 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"e == 0 \\&\\& f != 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(g \\\\| h\\\\) != 0\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}, {"sha": "56907d89d47aececb657827247e5b0a3e8035f23", "filename": "gcc/testsuite/gcc.dg/pr26961-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726ac11ebd7552453d39f084cf9d05d2bbc91b58/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26961-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726ac11ebd7552453d39f084cf9d05d2bbc91b58/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26961-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26961-1.c?ref=726ac11ebd7552453d39f084cf9d05d2bbc91b58", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+long long foo(int i, int j)\n+{\n+  return i ? (long long)(!j) : 0;\n+}\n+"}]}