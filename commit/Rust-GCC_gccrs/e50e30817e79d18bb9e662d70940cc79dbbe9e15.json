{"sha": "e50e30817e79d18bb9e662d70940cc79dbbe9e15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUwZTMwODE3ZTc5ZDE4YmI5ZTY2MmQ3MDk0MGNjNzlkYmJlOWUxNQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2009-04-29T15:09:37Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2009-04-29T15:09:37Z"}, "message": "bfin.c (bfin_optimize_loop): If we need a scratch reg, scan backwards to try to find a constant to initialize it.\n\n\t* config/bfin/bfin.c (bfin_optimize_loop): If we need a scratch reg,\n\tscan backwards to try to find a constant to initialize it.\n\nFrom-SVN: r146974", "tree": {"sha": "51bc7db7b1cc5b4f481f3d9a3bdd6a7cc894e484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51bc7db7b1cc5b4f481f3d9a3bdd6a7cc894e484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e50e30817e79d18bb9e662d70940cc79dbbe9e15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e50e30817e79d18bb9e662d70940cc79dbbe9e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e50e30817e79d18bb9e662d70940cc79dbbe9e15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e50e30817e79d18bb9e662d70940cc79dbbe9e15/comments", "author": null, "committer": null, "parents": [{"sha": "7c90021d8ec7d24c128859b2bacb0fab720e2dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c90021d8ec7d24c128859b2bacb0fab720e2dfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c90021d8ec7d24c128859b2bacb0fab720e2dfe"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "8f8e05d6f90592f94ac09fed55f3e682da3b5c69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50e30817e79d18bb9e662d70940cc79dbbe9e15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50e30817e79d18bb9e662d70940cc79dbbe9e15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e50e30817e79d18bb9e662d70940cc79dbbe9e15", "patch": "@@ -1,3 +1,8 @@\n+2009-04-29  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.c (bfin_optimize_loop): If we need a scratch reg,\n+\tscan backwards to try to find a constant to initialize it.\n+\n 2009-04-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/39937"}, {"sha": "0808522afdfc8d090365b9606964430b442f5728", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50e30817e79d18bb9e662d70940cc79dbbe9e15/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50e30817e79d18bb9e662d70940cc79dbbe9e15/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=e50e30817e79d18bb9e662d70940cc79dbbe9e15", "patch": "@@ -3784,7 +3784,7 @@ bfin_optimize_loop (loop_info loop)\n   rtx insn, last_insn;\n   rtx loop_init, start_label, end_label;\n   rtx reg_lc0, reg_lc1, reg_lt0, reg_lt1, reg_lb0, reg_lb1;\n-  rtx iter_reg, scratchreg;\n+  rtx iter_reg, scratchreg, scratch_init, scratch_init_insn;\n   rtx lc_reg, lt_reg, lb_reg;\n   rtx seq, seq_end;\n   int length;\n@@ -3838,18 +3838,40 @@ bfin_optimize_loop (loop_info loop)\n       goto bad_loop;\n     }\n   scratchreg = NULL_RTX;\n+  scratch_init = iter_reg;\n+  scratch_init_insn = NULL_RTX;\n   if (!PREG_P (iter_reg) && loop->incoming_src)\n     {\n+      basic_block bb_in = loop->incoming_src;\n       int i;\n       for (i = REG_P0; i <= REG_P5; i++)\n \tif ((df_regs_ever_live_p (i)\n \t     || (funkind (TREE_TYPE (current_function_decl)) == SUBROUTINE\n \t\t && call_used_regs[i]))\n-\t    && !REGNO_REG_SET_P (df_get_live_out (loop->incoming_src), i))\n+\t    && !REGNO_REG_SET_P (df_get_live_out (bb_in), i))\n \t  {\n \t    scratchreg = gen_rtx_REG (SImode, i);\n \t    break;\n \t  }\n+      for (insn = BB_END (bb_in); insn != BB_HEAD (bb_in);\n+\t   insn = PREV_INSN (insn))\n+\t{\n+\t  rtx set;\n+\t  if (NOTE_P (insn) || BARRIER_P (insn))\n+\t    continue;\n+\t  set = single_set (insn);\n+\t  if (set && rtx_equal_p (SET_DEST (set), iter_reg))\n+\t    {\n+\t      if (CONSTANT_P (SET_SRC (set)))\n+\t\t{\n+\t\t  scratch_init = SET_SRC (set);\n+\t\t  scratch_init_insn = insn;\n+\t\t}\n+\t      break;\n+\t    }\n+\t  else if (reg_mentioned_p (iter_reg, PATTERN (insn)))\n+\t    break;\n+\t}\n     }\n \n   if (loop->incoming_src)\n@@ -4092,11 +4114,13 @@ bfin_optimize_loop (loop_info loop)\n     }\n   else if (scratchreg != NULL_RTX)\n     {\n-      emit_insn (gen_movsi (scratchreg, iter_reg));\n+      emit_insn (gen_movsi (scratchreg, scratch_init));\n       loop_init = gen_lsetup_with_autoinit (lt_reg, start_label,\n \t\t\t\t\t    lb_reg, end_label,\n \t\t\t\t\t    lc_reg, scratchreg);\n       seq_end = emit_insn (loop_init);\n+      if (scratch_init_insn != NULL_RTX)\n+\tdelete_insn (scratch_init_insn);\n     }\n   else\n     {\n@@ -4106,12 +4130,14 @@ bfin_optimize_loop (loop_info loop)\n       rtx pop = gen_frame_mem (SImode,\n \t\t\t       gen_rtx_POST_INC (SImode, stack_pointer_rtx));\n       emit_insn (gen_movsi (push, p0reg));\n-      emit_insn (gen_movsi (p0reg, iter_reg));\n+      emit_insn (gen_movsi (p0reg, scratch_init));\n       loop_init = gen_lsetup_with_autoinit (lt_reg, start_label,\n \t\t\t\t\t    lb_reg, end_label,\n \t\t\t\t\t    lc_reg, p0reg);\n       emit_insn (loop_init);\n       seq_end = emit_insn (gen_movsi (p0reg, pop));\n+      if (scratch_init_insn != NULL_RTX)\n+\tdelete_insn (scratch_init_insn);\n     }\n \n   if (dump_file)"}]}