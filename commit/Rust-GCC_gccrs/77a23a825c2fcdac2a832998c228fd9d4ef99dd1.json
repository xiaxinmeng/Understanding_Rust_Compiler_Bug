{"sha": "77a23a825c2fcdac2a832998c228fd9d4ef99dd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdhMjNhODI1YzJmY2RhYzJhODMyOTk4YzIyOGZkOWQ0ZWY5OWRkMQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-09-11T08:15:12Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-09-28T22:23:53Z"}, "message": "irange_allocator class\n\nThis is the irange storage class.  It is used to allocate the\nminimum amount of storage needed for a given irange.  Storage is\nautomatically freed at destruction of the storage class.\n\nIt is meant for long term storage, as opposed to int_range_max\nwhich is meant for intermediate temporary results on the stack.\n\nThe general gist is:\n\n\tirange_allocator alloc;\n\n\t// Allocate an irange of 5 sub-ranges.\n\tirange *p = alloc.allocate (5);\n\n\t// Allocate an irange of 3 sub-ranges.\n\tirange *q = alloc.allocate (3);\n\n\t// Allocate an irange with as many sub-ranges as are currently\n\t// used in \"some_other_range\".\n\tirange *r = alloc.allocate (some_other_range);\n\ngcc/ChangeLog:\n\n\t* value-range.h (class irange): Add irange_allocator friend.\n\t(class irange_allocator): New.", "tree": {"sha": "731874d5e64de27b803291879d0369a66280085f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/731874d5e64de27b803291879d0369a66280085f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77a23a825c2fcdac2a832998c228fd9d4ef99dd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a23a825c2fcdac2a832998c228fd9d4ef99dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a23a825c2fcdac2a832998c228fd9d4ef99dd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a23a825c2fcdac2a832998c228fd9d4ef99dd1/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c56ce673d1e1d4508e82053a32011f807c6088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c56ce673d1e1d4508e82053a32011f807c6088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69c56ce673d1e1d4508e82053a32011f807c6088"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "c875e713d6524bcf0934e21a9f3c8496b280843b", "filename": "gcc/value-range.h", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a23a825c2fcdac2a832998c228fd9d4ef99dd1/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a23a825c2fcdac2a832998c228fd9d4ef99dd1/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=77a23a825c2fcdac2a832998c228fd9d4ef99dd1", "patch": "@@ -43,6 +43,7 @@ enum value_range_kind\n \n class irange\n {\n+  friend class irange_allocator;\n public:\n   // In-place setters.\n   void set (tree, tree, value_range_kind = VR_RANGE);\n@@ -619,4 +620,68 @@ vrp_val_min (const_tree type)\n   return NULL_TREE;\n }\n \n+// This is the irange storage class.  It is used to allocate the\n+// minimum amount of storage needed for a given irange.  Storage is\n+// automatically freed at destruction of the storage class.\n+//\n+// It is meant for long term storage, as opposed to int_range_max\n+// which is meant for intermediate temporary results on the stack.\n+//\n+// The newly allocated irange is initialized to the empty set\n+// (undefined_p() is true).\n+\n+class irange_allocator\n+{\n+public:\n+  irange_allocator ();\n+  ~irange_allocator ();\n+  // Return a new range with NUM_PAIRS.\n+  irange *allocate (unsigned num_pairs);\n+  // Return a copy of SRC with the minimum amount of sub-ranges needed\n+  // to represent it.\n+  irange *allocate (const irange &src);\n+private:\n+  DISABLE_COPY_AND_ASSIGN (irange_allocator);\n+  struct obstack m_obstack;\n+};\n+\n+inline\n+irange_allocator::irange_allocator ()\n+{\n+  obstack_init (&m_obstack);\n+}\n+\n+inline\n+irange_allocator::~irange_allocator ()\n+{\n+  obstack_free (&m_obstack, NULL);\n+}\n+\n+// Return a new range with NUM_PAIRS.\n+\n+inline irange *\n+irange_allocator::allocate (unsigned num_pairs)\n+{\n+  // Never allocate 0 pairs.\n+  // Don't allocate 1 either, or we get legacy value_range's.\n+  if (num_pairs < 2)\n+    num_pairs = 2;\n+\n+  struct newir {\n+    irange range;\n+    tree mem[1];\n+  };\n+  size_t nbytes = (sizeof (newir) + sizeof (tree) * 2 * (num_pairs - 1));\n+  struct newir *r = (newir *) obstack_alloc (&m_obstack, nbytes);\n+  return new (r) irange (r->mem, num_pairs);\n+}\n+\n+inline irange *\n+irange_allocator::allocate (const irange &src)\n+{\n+  irange *r = allocate (src.num_pairs ());\n+  *r = src;\n+  return r;\n+}\n+\n #endif // GCC_VALUE_RANGE_H"}]}