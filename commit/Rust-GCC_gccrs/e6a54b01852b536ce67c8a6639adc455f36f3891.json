{"sha": "e6a54b01852b536ce67c8a6639adc455f36f3891", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZhNTRiMDE4NTJiNTM2Y2U2N2M4YTY2MzlhZGM0NTVmMzZmMzg5MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-06-01T20:49:18Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-06-01T20:49:18Z"}, "message": "gimplify.c (gimplify_modify_expr_rhs): Use simple test on the size.\n\n\t* gimplify.c (gimplify_modify_expr_rhs): Use simple test on the size.\n\t* cgraph.c (cgraph_redirect_edge_call_stmt_to_callee): Do not remove\n\tthe LHS of a no-return call if its type has variable size.\n\t* tree-cfgcleanup.c (fixup_noreturn_call): Likewise.\n\t* tree-cfg.c (verify_gimple_call): Accept these no-return calls.\n\nFrom-SVN: r223997", "tree": {"sha": "83d3f1184dd0b41ae0e5c786c8add2d6cfd17d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83d3f1184dd0b41ae0e5c786c8add2d6cfd17d07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6a54b01852b536ce67c8a6639adc455f36f3891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a54b01852b536ce67c8a6639adc455f36f3891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a54b01852b536ce67c8a6639adc455f36f3891", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a54b01852b536ce67c8a6639adc455f36f3891/comments", "author": null, "committer": null, "parents": [{"sha": "418dd5cefef6cd8d80de3997a0590503d653bc04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/418dd5cefef6cd8d80de3997a0590503d653bc04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/418dd5cefef6cd8d80de3997a0590503d653bc04"}], "stats": {"total": 101, "additions": 85, "deletions": 16}, "files": [{"sha": "a19528320f199e7fce4f1584607005f47e3a3821", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6a54b01852b536ce67c8a6639adc455f36f3891", "patch": "@@ -1,3 +1,11 @@\n+2015-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimplify.c (gimplify_modify_expr_rhs): Use simple test on the size.\n+\t* cgraph.c (cgraph_redirect_edge_call_stmt_to_callee): Do not remove\n+\tthe LHS of a no-return call if its type has variable size.\n+\t* tree-cfgcleanup.c (fixup_noreturn_call): Likewise.\n+\t* tree-cfg.c (verify_gimple_call): Accept these no-return calls.\n+\n 2015-06-01  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* read-rtl.c: Adapt to use HAVE_DECL_ATOLL instead of HAVE_ATOLL."}, {"sha": "2ded5af546e1e499074642988fed12fef9ba0921", "filename": "gcc/cgraph.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=e6a54b01852b536ce67c8a6639adc455f36f3891", "patch": "@@ -1464,8 +1464,10 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n       update_stmt_fn (DECL_STRUCT_FUNCTION (e->caller->decl), new_stmt);\n     }\n \n-  /* If the call becomes noreturn, remove the lhs.  */\n-  if (lhs && (gimple_call_flags (new_stmt) & ECF_NORETURN))\n+  /* If the call becomes noreturn, remove the LHS if possible.  */\n+  if (lhs\n+      && (gimple_call_flags (new_stmt) & ECF_NORETURN)\n+      && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs))) == INTEGER_CST)\n     {\n       if (TREE_CODE (lhs) == SSA_NAME)\n \t{"}, {"sha": "58a60bfd62a8238f4a8f1fcfc7bbbe9e5c1bbefa", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e6a54b01852b536ce67c8a6639adc455f36f3891", "patch": "@@ -4341,7 +4341,8 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p,\n \t\t/* It's OK to use the target directly if it's being\n \t\t   initialized. */\n \t\tuse_target = true;\n-\t      else if (variably_modified_type_p (TREE_TYPE (*to_p), NULL_TREE))\n+\t      else if (TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (*to_p)))\n+\t\t       != INTEGER_CST)\n \t\t/* Always use the target and thus RSO for variable-sized types.\n \t\t   GIMPLE cannot deal with a variable-sized assignment\n \t\t   embedded in a call statement.  */"}, {"sha": "09395da513ca38d0e7285bdb9fc7b08abb3bfcaa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6a54b01852b536ce67c8a6639adc455f36f3891", "patch": "@@ -1,3 +1,8 @@\n+2015-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/varsize_return2.ads: New test.\n+\t* gnat.dg/specs/varsize_return2_pkg.ad[sb]: New helper.\n+\n 2015-06-01  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \t* gcc.dg/vect/vect-outer-simd-1.c: New test."}, {"sha": "1f7d1a0d86039d6e5c736f21c2d3ff1718117c1f", "filename": "gcc/testsuite/gnat.dg/specs/varsize_return2.ads", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvarsize_return2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvarsize_return2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvarsize_return2.ads?ref=e6a54b01852b536ce67c8a6639adc455f36f3891", "patch": "@@ -0,0 +1,12 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O\" }\n+\n+with Varsize_Return2_Pkg; use Varsize_Return2_Pkg;\n+\n+package Varsize_Return2 is\n+\n+   package My_G is new G (0);\n+\n+   Result : constant T := My_G.Get;\n+\n+end Varsize_Return2;"}, {"sha": "f37d2fafd6d608088ca9d164b4fd4230c2d6504c", "filename": "gcc/testsuite/gnat.dg/specs/varsize_return2_pkg.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvarsize_return2_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvarsize_return2_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvarsize_return2_pkg.adb?ref=e6a54b01852b536ce67c8a6639adc455f36f3891", "patch": "@@ -0,0 +1,18 @@\n+package body Varsize_Return2_Pkg is\r\n+\r\n+   function Len return Positive is\r\n+   begin\r\n+      return 4;\r\n+   end;\r\n+\r\n+   package body G is\r\n+\r\n+      function Get return Small_T is\r\n+      begin\r\n+         raise Program_Error;\r\n+         return Get;\r\n+      end;\r\n+\r\n+   end G;\r\n+\r\n+end Varsize_Return2_Pkg;\r"}, {"sha": "1fe40b9b285108f41004d00c4071c77343132cfb", "filename": "gcc/testsuite/gnat.dg/specs/varsize_return2_pkg.ads", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvarsize_return2_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvarsize_return2_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvarsize_return2_pkg.ads?ref=e6a54b01852b536ce67c8a6639adc455f36f3891", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-excess-errors \"no code generated\" }\n+\n+package Varsize_Return2_Pkg is\n+\n+   type T (D: Positive) is record\n+      Data: String (1 .. D);\n+   end record;\n+\n+   function Len return Positive;\n+\n+   generic\n+      I : Integer;\n+   package G is\n+\n+      subtype Small_T is T(Len);\n+      function Get return Small_T;\n+\n+   end G;\n+\n+end Varsize_Return2_Pkg;"}, {"sha": "c53cf3e76e965295effbfcf482ebf37c847d81f6", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=e6a54b01852b536ce67c8a6639adc455f36f3891", "patch": "@@ -3391,37 +3391,38 @@ verify_gimple_call (gcall *stmt)\n        return true;\n      }\n \n-  if (gimple_call_lhs (stmt)\n-      && (!is_gimple_lvalue (gimple_call_lhs (stmt))\n-\t  || verify_types_in_gimple_reference (gimple_call_lhs (stmt), true)))\n+  tree lhs = gimple_call_lhs (stmt);\n+  if (lhs\n+      && (!is_gimple_lvalue (lhs)\n+\t  || verify_types_in_gimple_reference (lhs, true)))\n     {\n       error (\"invalid LHS in gimple call\");\n       return true;\n     }\n \n-  if (gimple_call_ctrl_altering_p (stmt)\n-      && gimple_call_lhs (stmt)\n-      && gimple_call_noreturn_p (stmt))\n+  if (lhs\n+      && gimple_call_ctrl_altering_p (stmt)\n+      && gimple_call_noreturn_p (stmt)\n+      && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs))) == INTEGER_CST)\n     {\n       error (\"LHS in noreturn call\");\n       return true;\n     }\n \n   fntype = gimple_call_fntype (stmt);\n   if (fntype\n-      && gimple_call_lhs (stmt)\n-      && !useless_type_conversion_p (TREE_TYPE (gimple_call_lhs (stmt)),\n-\t\t\t\t     TREE_TYPE (fntype))\n+      && lhs\n+      && !useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (fntype))\n       /* ???  At least C++ misses conversions at assignments from\n \t void * call results.\n \t ???  Java is completely off.  Especially with functions\n \t returning java.lang.Object.\n \t For now simply allow arbitrary pointer type conversions.  */\n-      && !(POINTER_TYPE_P (TREE_TYPE (gimple_call_lhs (stmt)))\n+      && !(POINTER_TYPE_P (TREE_TYPE (lhs))\n \t   && POINTER_TYPE_P (TREE_TYPE (fntype))))\n     {\n       error (\"invalid conversion in gimple call\");\n-      debug_generic_stmt (TREE_TYPE (gimple_call_lhs (stmt)));\n+      debug_generic_stmt (TREE_TYPE (lhs));\n       debug_generic_stmt (TREE_TYPE (fntype));\n       return true;\n     }"}, {"sha": "562f59236148d7967cefaefa2283eb45bd5ef6e6", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a54b01852b536ce67c8a6639adc455f36f3891/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=e6a54b01852b536ce67c8a6639adc455f36f3891", "patch": "@@ -612,9 +612,11 @@ fixup_noreturn_call (gimple stmt)\n \t}\n     }\n \n-  /* If there is an LHS, remove it.  */\n+  /* If there is an LHS, remove it, but only if its type has fixed size.\n+     The LHS will need to be recreated during RTL expansion and creating\n+     temporaries of variable-sized types is not supported.  */\n   tree lhs = gimple_call_lhs (stmt);\n-  if (lhs)\n+  if (lhs && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs))) == INTEGER_CST)\n     {\n       gimple_call_set_lhs (stmt, NULL_TREE);\n "}]}