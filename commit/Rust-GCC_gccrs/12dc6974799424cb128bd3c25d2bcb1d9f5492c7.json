{"sha": "12dc6974799424cb128bd3c25d2bcb1d9f5492c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJkYzY5NzQ3OTk0MjRjYjEyOGJkM2MyNWQyYmNiMWQ5ZjU0OTJjNw==", "commit": {"author": {"name": "Sofiane Naci", "email": "sofiane.naci@arm.com", "date": "2013-05-09T08:25:30Z"}, "committer": {"name": "Sofiane Naci", "email": "sofiane@gcc.gnu.org", "date": "2013-05-09T08:25:30Z"}, "message": "aarch64.md: New movtf split.\n\n\t* config/aarch64/aarch64.md: New movtf split.\n\t(*movtf_aarch64): Update.\n\t(aarch64_movdi_tilow): Handle TF modes and rename to\n\taarch64_movdi_<mode>low.\n\t(aarch64_movdi_tihigh): Handle TF modes and rename to\n\taarch64_movdi_<mode>high\n\t(aarch64_movtihigh_di): Handle TF modes and rename to\n\taarch64_mov<mode>high_di\n\t(aarch64_movtilow_di): Handle TF modes and rename to\n\taarch64_mov<mode>low_di\n\t(aarch64_movtilow_tilow): Remove spurious whitespace.\n\t* config/aarch64/aarch64.c (aarch64_split_128bit_move): Handle TFmode\n\tsplits.\n\t(aarch64_print_operand): Update.\n\nFrom-SVN: r198735", "tree": {"sha": "eb7af063206d6704bc35474b92d1c2ee9eb20cf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb7af063206d6704bc35474b92d1c2ee9eb20cf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12dc6974799424cb128bd3c25d2bcb1d9f5492c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12dc6974799424cb128bd3c25d2bcb1d9f5492c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12dc6974799424cb128bd3c25d2bcb1d9f5492c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12dc6974799424cb128bd3c25d2bcb1d9f5492c7/comments", "author": null, "committer": null, "parents": [{"sha": "227eb3436021c366d97c34f0bd6ad8de7a854b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/227eb3436021c366d97c34f0bd6ad8de7a854b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/227eb3436021c366d97c34f0bd6ad8de7a854b63"}], "stats": {"total": 171, "additions": 106, "deletions": 65}, "files": [{"sha": "4c04ea4a6130d64ac6cfe9f572def8696ec0ae5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12dc6974799424cb128bd3c25d2bcb1d9f5492c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12dc6974799424cb128bd3c25d2bcb1d9f5492c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12dc6974799424cb128bd3c25d2bcb1d9f5492c7", "patch": "@@ -1,3 +1,20 @@\n+2013-05-09  Sofiane Naci  <sofiane.naci@arm.com>\n+\n+\t* config/aarch64/aarch64.md: New movtf split.\n+\t(*movtf_aarch64): Update.\n+\t(aarch64_movdi_tilow): Handle TF modes and rename to\n+\taarch64_movdi_<mode>low.\n+\t(aarch64_movdi_tihigh): Handle TF modes and rename to\n+\taarch64_movdi_<mode>high\n+\t(aarch64_movtihigh_di): Handle TF modes and rename to\n+\taarch64_mov<mode>high_di\n+\t(aarch64_movtilow_di): Handle TF modes and rename to\n+\taarch64_mov<mode>low_di\n+\t(aarch64_movtilow_tilow): Remove spurious whitespace.\n+\t* config/aarch64/aarch64.c (aarch64_split_128bit_move): Handle TFmode\n+\tsplits.\n+\t(aarch64_print_operand): Update.\n+\n 2013-05-09  Alan Modra  <amodra@gmail.com>\n \n \t* configure.ac (HAVE_AS_TLS): Enable tests for powerpcle and"}, {"sha": "b57416c8de5d918565519a0041a5563fb7044e70", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 65, "deletions": 49, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12dc6974799424cb128bd3c25d2bcb1d9f5492c7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12dc6974799424cb128bd3c25d2bcb1d9f5492c7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=12dc6974799424cb128bd3c25d2bcb1d9f5492c7", "patch": "@@ -604,49 +604,85 @@ aarch64_split_128bit_move (rtx dst, rtx src)\n {\n   rtx low_dst;\n \n-  gcc_assert (GET_MODE (dst) == TImode);\n+  enum machine_mode src_mode = GET_MODE (src);\n+  enum machine_mode dst_mode = GET_MODE (dst);\n+  int src_regno = REGNO (src);\n+  int dst_regno = REGNO (dst);\n+\n+  gcc_assert (dst_mode == TImode || dst_mode == TFmode);\n \n   if (REG_P (dst) && REG_P (src))\n     {\n-      int src_regno = REGNO (src);\n-      int dst_regno = REGNO (dst);\n-\n-      gcc_assert (GET_MODE (src) == TImode);\n+      gcc_assert (src_mode == TImode || src_mode == TFmode);\n \n       /* Handle r -> w, w -> r.  */\n       if (FP_REGNUM_P (dst_regno) && GP_REGNUM_P (src_regno))\n \t{\n-\t  emit_insn (gen_aarch64_movtilow_di (dst,\n-\t\t\t\t\t      gen_lowpart (word_mode, src)));\n-\t  emit_insn (gen_aarch64_movtihigh_di (dst,\n-\t\t\t\t\t       gen_highpart (word_mode, src)));\n-\t  return;\n+\t  switch (src_mode) {\n+\t  case TImode:\n+\t    emit_insn\n+\t      (gen_aarch64_movtilow_di (dst, gen_lowpart (word_mode, src)));\n+\t    emit_insn\n+\t      (gen_aarch64_movtihigh_di (dst, gen_highpart (word_mode, src)));\n+\t    return;\n+\t  case TFmode:\n+\t    emit_insn\n+\t      (gen_aarch64_movtflow_di (dst, gen_lowpart (word_mode, src)));\n+\t    emit_insn\n+\t      (gen_aarch64_movtfhigh_di (dst, gen_highpart (word_mode, src)));\n+\t    return;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n \t}\n       else if (GP_REGNUM_P (dst_regno) && FP_REGNUM_P (src_regno))\n \t{\n-\t  emit_insn (gen_aarch64_movdi_tilow (gen_lowpart (word_mode, dst),\n-\t\t\t\t\t      src));\n-\t  emit_insn (gen_aarch64_movdi_tihigh (gen_highpart (word_mode, dst),\n-\t\t\t\t\t       src));\n-\t  return;\n+\t  switch (src_mode) {\n+\t  case TImode:\n+\t    emit_insn\n+\t      (gen_aarch64_movdi_tilow (gen_lowpart (word_mode, dst), src));\n+\t    emit_insn\n+\t      (gen_aarch64_movdi_tihigh (gen_highpart (word_mode, dst), src));\n+\t    return;\n+\t  case TFmode:\n+\t    emit_insn\n+\t      (gen_aarch64_movdi_tflow (gen_lowpart (word_mode, dst), src));\n+\t    emit_insn\n+\t      (gen_aarch64_movdi_tfhigh (gen_highpart (word_mode, dst), src));\n+\t    return;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n \t}\n       /* Fall through to r -> r cases.  */\n     }\n \n-  low_dst = gen_lowpart (word_mode, dst);\n-  if (REG_P (low_dst)\n-      && reg_overlap_mentioned_p (low_dst, src))\n-    {\n-      aarch64_emit_move (gen_highpart (word_mode, dst),\n-\t\t\t gen_highpart_mode (word_mode, TImode, src));\n-      aarch64_emit_move (low_dst, gen_lowpart (word_mode, src));\n-    }\n-  else\n-    {\n-      aarch64_emit_move (low_dst, gen_lowpart (word_mode, src));\n-      aarch64_emit_move (gen_highpart (word_mode, dst),\n-\t\t\t gen_highpart_mode (word_mode, TImode, src));\n-    }\n+  switch (dst_mode) {\n+  case TImode:\n+    low_dst = gen_lowpart (word_mode, dst);\n+    if (REG_P (low_dst)\n+\t&& reg_overlap_mentioned_p (low_dst, src))\n+      {\n+\taarch64_emit_move (gen_highpart (word_mode, dst),\n+\t\t\t   gen_highpart_mode (word_mode, TImode, src));\n+\taarch64_emit_move (low_dst, gen_lowpart (word_mode, src));\n+      }\n+    else\n+      {\n+\taarch64_emit_move (low_dst, gen_lowpart (word_mode, src));\n+\taarch64_emit_move (gen_highpart (word_mode, dst),\n+\t\t\t   gen_highpart_mode (word_mode, TImode, src));\n+      }\n+    return;\n+  case TFmode:\n+    emit_move_insn (gen_rtx_REG (DFmode, dst_regno),\n+\t\t    gen_rtx_REG (DFmode, src_regno));\n+    emit_move_insn (gen_rtx_REG (DFmode, dst_regno + 1),\n+\t\t    gen_rtx_REG (DFmode, src_regno + 1));\n+    return;\n+  default:\n+    gcc_unreachable ();\n+  }\n }\n \n bool\n@@ -3324,26 +3360,6 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n       asm_fprintf (f, \"%s\", reg_names [REGNO (x) + 1]);\n       break;\n \n-    case 'Q':\n-      /* Print the least significant register of a pair (TImode) of regs.  */\n-      if (GET_CODE (x) != REG || !GP_REGNUM_P (REGNO (x) + 1))\n-\t{\n-\t  output_operand_lossage (\"invalid operand for '%%%c'\", code);\n-\t  return;\n-\t}\n-      asm_fprintf (f, \"%s\", reg_names [REGNO (x) + (WORDS_BIG_ENDIAN ? 1 : 0)]);\n-      break;\n-\n-    case 'R':\n-      /* Print the most significant register of a pair (TImode) of regs.  */\n-      if (GET_CODE (x) != REG || !GP_REGNUM_P (REGNO (x) + 1))\n-\t{\n-\t  output_operand_lossage (\"invalid operand for '%%%c'\", code);\n-\t  return;\n-\t}\n-      asm_fprintf (f, \"%s\", reg_names [REGNO (x) + (WORDS_BIG_ENDIAN ? 0 : 1)]);\n-      break;\n-\n     case 'm':\n       /* Print a condition (eq, ne, etc).  */\n "}, {"sha": "b27bcdaa97c8b4fb16e5b8f81e98e09e5508b9ba", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12dc6974799424cb128bd3c25d2bcb1d9f5492c7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12dc6974799424cb128bd3c25d2bcb1d9f5492c7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=12dc6974799424cb128bd3c25d2bcb1d9f5492c7", "patch": "@@ -997,9 +997,9 @@\n     || register_operand (operands[1], TFmode))\"\n   \"@\n    orr\\\\t%0.16b, %1.16b, %1.16b\n-   mov\\\\t%0, %1\\;mov\\\\t%H0, %H1\n-   fmov\\\\t%d0, %Q1\\;fmov\\\\t%0.d[1], %R1\n-   fmov\\\\t%Q0, %d1\\;fmov\\\\t%R0, %1.d[1]\n+   #\n+   #\n+   #\n    movi\\\\t%0.2d, #0\n    fmov\\\\t%s0, wzr\n    ldr\\\\t%q0, %1\n@@ -1013,6 +1013,17 @@\n    (set_attr \"simd\" \"yes,*,*,*,yes,*,*,*,*,*\")]\n )\n \n+(define_split\n+   [(set (match_operand:TF 0 \"register_operand\" \"\")\n+\t (match_operand:TF 1 \"aarch64_reg_or_imm\" \"\"))]\n+  \"reload_completed && aarch64_split_128bit_move_p (operands[0], operands[1])\"\n+  [(const_int 0)]\n+  {\n+    aarch64_split_128bit_move (operands[0], operands[1]);\n+    DONE;\n+  }\n+)\n+\n ;; Operands 1 and 3 are tied together by the final condition; so we allow\n ;; fairly lax checking on the second memory operation.\n (define_insn \"load_pair<mode>\"\n@@ -3550,20 +3561,20 @@\n ;; after or during reload as we don't want these patterns to start\n ;; kicking in during the combiner.\n  \n-(define_insn \"aarch64_movdi_tilow\"\n+(define_insn \"aarch64_movdi_<mode>low\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (truncate:DI (match_operand:TI 1 \"register_operand\" \"w\")))]\n+        (truncate:DI (match_operand:TX 1 \"register_operand\" \"w\")))]\n   \"reload_completed || reload_in_progress\"\n   \"fmov\\\\t%x0, %d1\"\n   [(set_attr \"v8type\" \"fmovf2i\")\n    (set_attr \"mode\"   \"DI\")\n    (set_attr \"length\" \"4\")\n   ])\n \n-(define_insn \"aarch64_movdi_tihigh\"\n+(define_insn \"aarch64_movdi_<mode>high\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (truncate:DI\n-\t  (lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"w\")\n+\t  (lshiftrt:TX (match_operand:TX 1 \"register_operand\" \"w\")\n \t\t       (const_int 64))))]\n   \"reload_completed || reload_in_progress\"\n   \"fmov\\\\t%x0, %1.d[1]\"\n@@ -3572,24 +3583,22 @@\n    (set_attr \"length\" \"4\")\n   ])\n \n-(define_insn \"aarch64_movtihigh_di\"\n-  [(set (zero_extract:TI (match_operand:TI 0 \"register_operand\" \"+w\")\n+(define_insn \"aarch64_mov<mode>high_di\"\n+  [(set (zero_extract:TX (match_operand:TX 0 \"register_operand\" \"+w\")\n                          (const_int 64) (const_int 64))\n-        (zero_extend:TI (match_operand:DI 1 \"register_operand\" \"r\")))]\n+        (zero_extend:TX (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"reload_completed || reload_in_progress\"\n   \"fmov\\\\t%0.d[1], %x1\"\n-\n   [(set_attr \"v8type\" \"fmovi2f\")\n    (set_attr \"mode\"   \"DI\")\n    (set_attr \"length\" \"4\")\n   ])\n \n-(define_insn \"aarch64_movtilow_di\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"=w\")\n-        (zero_extend:TI (match_operand:DI 1 \"register_operand\" \"r\")))]\n+(define_insn \"aarch64_mov<mode>low_di\"\n+  [(set (match_operand:TX 0 \"register_operand\" \"=w\")\n+        (zero_extend:TX (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"reload_completed || reload_in_progress\"\n   \"fmov\\\\t%d0, %x1\"\n-\n   [(set_attr \"v8type\" \"fmovi2f\")\n    (set_attr \"mode\"   \"DI\")\n    (set_attr \"length\" \"4\")\n@@ -3601,7 +3610,6 @@\n \t  (truncate:DI (match_operand:TI 1 \"register_operand\" \"w\"))))]\n   \"reload_completed || reload_in_progress\"\n   \"fmov\\\\t%d0, %d1\"\n-\n   [(set_attr \"v8type\" \"fmovi2f\")\n    (set_attr \"mode\"   \"DI\")\n    (set_attr \"length\" \"4\")"}]}