{"sha": "4ca738b329b3afee1f0f68cb0f3540db79b5a4ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNhNzM4YjMyOWIzYWZlZTFmMGY2OGNiMGYzNTQwZGI3OWI1YTRhYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:24:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:24:08Z"}, "message": "regcprop.c: Include rtl-iter.h.\n\ngcc/\n\t* regcprop.c: Include rtl-iter.h.\n\t(kill_value): Take a const_rtx.\n\t(kill_autoinc_value): Turn from being a for_each_rtx callback\n\tto being a function that examines each subrtx itself.\n\t(copyprop_hardreg_forward_1): Update accordingly.\n\nFrom-SVN: r214651", "tree": {"sha": "e5796d8aecf499be10565e3e0560938e53dad88b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5796d8aecf499be10565e3e0560938e53dad88b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ca738b329b3afee1f0f68cb0f3540db79b5a4ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca738b329b3afee1f0f68cb0f3540db79b5a4ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca738b329b3afee1f0f68cb0f3540db79b5a4ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca738b329b3afee1f0f68cb0f3540db79b5a4ac/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c0cda9157f9cf2b2394e99a0be9079e9743eb7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0cda9157f9cf2b2394e99a0be9079e9743eb7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0cda9157f9cf2b2394e99a0be9079e9743eb7c"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "5deaac3dd85eccc48a0e7db26b7d7cb792b17f93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca738b329b3afee1f0f68cb0f3540db79b5a4ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca738b329b3afee1f0f68cb0f3540db79b5a4ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ca738b329b3afee1f0f68cb0f3540db79b5a4ac", "patch": "@@ -1,3 +1,11 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* regcprop.c: Include rtl-iter.h.\n+\t(kill_value): Take a const_rtx.\n+\t(kill_autoinc_value): Turn from being a for_each_rtx callback\n+\tto being a function that examines each subrtx itself.\n+\t(copyprop_hardreg_forward_1): Update accordingly.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* reg-stack.c: Include rtl-iter.h."}, {"sha": "e65f89df168280769824fd7ec85299353b1d912c", "filename": "gcc/regcprop.c", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca738b329b3afee1f0f68cb0f3540db79b5a4ac/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca738b329b3afee1f0f68cb0f3540db79b5a4ac/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=4ca738b329b3afee1f0f68cb0f3540db79b5a4ac", "patch": "@@ -36,6 +36,7 @@\n #include \"obstack.h\"\n #include \"tree-pass.h\"\n #include \"df.h\"\n+#include \"rtl-iter.h\"\n \n /* The following code does forward propagation of hard register copies.\n    The object is to eliminate as many dependencies as possible, so that\n@@ -81,12 +82,11 @@ static bool skip_debug_insn_p;\n \n static void kill_value_one_regno (unsigned, struct value_data *);\n static void kill_value_regno (unsigned, unsigned, struct value_data *);\n-static void kill_value (rtx, struct value_data *);\n+static void kill_value (const_rtx, struct value_data *);\n static void set_value_regno (unsigned, enum machine_mode, struct value_data *);\n static void init_value_data (struct value_data *);\n static void kill_clobbered_value (rtx, const_rtx, void *);\n static void kill_set_value (rtx, const_rtx, void *);\n-static int kill_autoinc_value (rtx *, void *);\n static void copy_value (rtx, rtx, struct value_data *);\n static bool mode_change_ok (enum machine_mode, enum machine_mode,\n \t\t\t    unsigned int);\n@@ -190,16 +190,13 @@ kill_value_regno (unsigned int regno, unsigned int nregs,\n    so that we mind the mode the register is in.  */\n \n static void\n-kill_value (rtx x, struct value_data *vd)\n+kill_value (const_rtx x, struct value_data *vd)\n {\n-  rtx orig_rtx = x;\n-\n   if (GET_CODE (x) == SUBREG)\n     {\n-      x = simplify_subreg (GET_MODE (x), SUBREG_REG (x),\n-\t\t\t   GET_MODE (SUBREG_REG (x)), SUBREG_BYTE (x));\n-      if (x == NULL_RTX)\n-\tx = SUBREG_REG (orig_rtx);\n+      rtx tmp = simplify_subreg (GET_MODE (x), SUBREG_REG (x),\n+\t\t\t\t GET_MODE (SUBREG_REG (x)), SUBREG_BYTE (x));\n+      x = tmp ? tmp : SUBREG_REG (x);\n     }\n   if (REG_P (x))\n     {\n@@ -276,25 +273,24 @@ kill_set_value (rtx x, const_rtx set, void *data)\n     }\n }\n \n-/* Called through for_each_rtx.  Kill any register used as the base of an\n-   auto-increment expression, and install that register as the root of its\n-   own value list.  */\n+/* Kill any register used in X as the base of an auto-increment expression,\n+   and install that register as the root of its own value list.  */\n \n-static int\n-kill_autoinc_value (rtx *px, void *data)\n+static void\n+kill_autoinc_value (rtx insn, struct value_data *vd)\n {\n-  rtx x = *px;\n-  struct value_data *const vd = (struct value_data *) data;\n-\n-  if (GET_RTX_CLASS (GET_CODE (x)) == RTX_AUTOINC)\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, PATTERN (insn), NONCONST)\n     {\n-      x = XEXP (x, 0);\n-      kill_value (x, vd);\n-      set_value_regno (REGNO (x), GET_MODE (x), vd);\n-      return -1;\n+      const_rtx x = *iter;\n+      if (GET_RTX_CLASS (GET_CODE (x)) == RTX_AUTOINC)\n+\t{\n+\t  x = XEXP (x, 0);\n+\t  kill_value (x, vd);\n+\t  set_value_regno (REGNO (x), GET_MODE (x), vd);\n+\t  iter.skip_subrtxes ();\n+\t}\n     }\n-\n-  return 0;\n }\n \n /* Assert that SRC has been copied to DEST.  Adjust the data structures\n@@ -807,7 +803,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \n       /* Kill all auto-incremented values.  */\n       /* ??? REG_INC is useless, since stack pushes aren't done that way.  */\n-      for_each_rtx (&PATTERN (insn), kill_autoinc_value, vd);\n+      kill_autoinc_value (insn, vd);\n \n       /* Kill all early-clobbered operands.  */\n       for (i = 0; i < n_ops; i++)"}]}