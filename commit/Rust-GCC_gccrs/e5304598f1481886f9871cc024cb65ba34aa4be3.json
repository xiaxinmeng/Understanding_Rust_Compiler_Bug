{"sha": "e5304598f1481886f9871cc024cb65ba34aa4be3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzMDQ1OThmMTQ4MTg4NmY5ODcxY2MwMjRjYjY1YmEzNGFhNGJlMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-09T11:29:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-09T11:29:32Z"}, "message": "calls: Fix a memory leak in maybe_warn_rdwr_sizes [PR99004]\n\nThe print_generic_expr_to_str function ends with\nreturn xstrdup (...); and therefore expects the caller to free\nthe argument.\n\nThe following patch does that after it has been copied.\nInstead of doing const_cast to cast away const char * to char *,\nbecause the code uses s0 and s1 in so few places, I chose just\nto change the types of the two variables so that const_cast\nis not needed.  After all, it is a heap allocated string that\nthis function owns and so if it wanted, it could change it too.\n\n2021-02-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/99004\n\t* calls.c (maybe_warn_rdwr_sizes): Change s0 and s1 type from\n\tconst char * to char * and free those pointers after use.", "tree": {"sha": "e97fdc96192c579e5526c77fd96b726d5c6cc014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e97fdc96192c579e5526c77fd96b726d5c6cc014"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5304598f1481886f9871cc024cb65ba34aa4be3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5304598f1481886f9871cc024cb65ba34aa4be3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5304598f1481886f9871cc024cb65ba34aa4be3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5304598f1481886f9871cc024cb65ba34aa4be3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "283653f45595f53db486cbc2f1f10091cb45ea3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283653f45595f53db486cbc2f1f10091cb45ea3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/283653f45595f53db486cbc2f1f10091cb45ea3b"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "1fea022ad8af799b3456bf6376bc55a6a78beeb0", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5304598f1481886f9871cc024cb65ba34aa4be3/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5304598f1481886f9871cc024cb65ba34aa4be3/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=e5304598f1481886f9871cc024cb65ba34aa4be3", "patch": "@@ -2032,19 +2032,21 @@ maybe_warn_rdwr_sizes (rdwr_map *rwm, tree fndecl, tree fntype, tree exp)\n       tree sizrng[2] = { size_zero_node, build_all_ones_cst (sizetype) };\n       if (get_size_range (access_size, sizrng, true))\n \t{\n-\t  const char *s0 = print_generic_expr_to_str (sizrng[0]);\n+\t  char *s0 = print_generic_expr_to_str (sizrng[0]);\n \t  if (tree_int_cst_equal (sizrng[0], sizrng[1]))\n \t    {\n \t      gcc_checking_assert (strlen (s0) < sizeof sizstr);\n \t      strcpy (sizstr, s0);\n \t    }\n \t  else\n \t    {\n-\t      const char *s1 = print_generic_expr_to_str (sizrng[1]);\n+\t      char *s1 = print_generic_expr_to_str (sizrng[1]);\n \t      gcc_checking_assert (strlen (s0) + strlen (s1)\n \t\t\t\t   < sizeof sizstr - 4);\n \t      sprintf (sizstr, \"[%s, %s]\", s0, s1);\n+\t      free (s1);\n \t    }\n+\t  free (s0);\n \t}\n       else\n \t*sizstr = '\\0';"}]}