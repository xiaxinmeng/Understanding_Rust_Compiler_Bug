{"sha": "25ebc085581bdd410ccb6d8be688c9775eb642d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVlYmMwODU1ODFiZGQ0MTBjY2I2ZDhiZTY4OGM5Nzc1ZWI2NDJkOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T12:52:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T12:52:57Z"}, "message": "[multiple changes]\n\n2011-08-29  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-exstat.adb (String_To_EO): Do no set Cleanup_Flag.\n\t* a-exexda.adb (Set_Exception_C_Msg): Ditto.\n\t(Set_Exception_Msg): Ditto.\n\t* a-exexpr-gcc.adb (Setup_Current_Excep): Ditto.  Do not set\n\tPrivate_Data.\n\t* a-except.adb, a-except-2005.adb (Save_Occurrence_No_Private): Remove.\n\tUse Save_Occurrence instead of Save_Occurrence_No_Private.\n\t(Raise_With_Msg): Remove Cleanup_Flag.\n\t* a-except.ads, a-except-2005.ads (Exception_Occurrence): Remove\n\tClean_Flag and Private_Data components.\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Ignore packing in Alfa mode, like\n\tin CodePeer mode.\n\t* sem_ch3.adb (Signed_Integer_Type_Declaration): Correct the generation\n\tof an explicitly declared type, so that the base types of the original\n\ttype and this generated type are the same, and a \"type\" (not a subtype\n\tlike previously).\n\t* errout.adb (Special_Msg_Delete): Do not issue messages \"Size too\n\tsmall\" in Alfa mode, like in CodePeer mode.\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Ignore rep\n\tclauses in Alfa mode.\n\n2011-08-29  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch6.ads, exp_ch6.adb (Is_Null_Procedure): Move the spec of this\n\tfunction to the package spec.\n\t* sem_ch6.adb (Find_Corresponding_Spec, New_Overloaded_Entity): For\n\tinternally generated bodies of null procedures locate the internally\n\tgenerated spec enforcing mode conformance.\n\t(Is_Interface_Conformant): Ensure that the controlling formal of the\n\tprimitives match.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case Inline): In an instance, do not\n\treject the pragma if it appears to apply to a formal subprogram.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_Allocator_Expression): Use consistent name for\n\tinner expression, to prevent double evaluation.\n\nFrom-SVN: r178216", "tree": {"sha": "ac649f73e38def9883197d6f34e3b6007624c553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac649f73e38def9883197d6f34e3b6007624c553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25ebc085581bdd410ccb6d8be688c9775eb642d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25ebc085581bdd410ccb6d8be688c9775eb642d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25ebc085581bdd410ccb6d8be688c9775eb642d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25ebc085581bdd410ccb6d8be688c9775eb642d9/comments", "author": null, "committer": null, "parents": [{"sha": "590549fbed8b78dc7fbe8708ab4a25e0a5939995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/590549fbed8b78dc7fbe8708ab4a25e0a5939995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/590549fbed8b78dc7fbe8708ab4a25e0a5939995"}], "stats": {"total": 302, "additions": 161, "deletions": 141}, "files": [{"sha": "c84d5230ac4641f8a4b716138b4dcdcf918e8317", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -1,3 +1,49 @@\n+2011-08-29  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-exstat.adb (String_To_EO): Do no set Cleanup_Flag.\n+\t* a-exexda.adb (Set_Exception_C_Msg): Ditto.\n+\t(Set_Exception_Msg): Ditto.\n+\t* a-exexpr-gcc.adb (Setup_Current_Excep): Ditto.  Do not set\n+\tPrivate_Data.\n+\t* a-except.adb, a-except-2005.adb (Save_Occurrence_No_Private): Remove.\n+\tUse Save_Occurrence instead of Save_Occurrence_No_Private.\n+\t(Raise_With_Msg): Remove Cleanup_Flag.\n+\t* a-except.ads, a-except-2005.ads (Exception_Occurrence): Remove\n+\tClean_Flag and Private_Data components.\n+\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Ignore packing in Alfa mode, like\n+\tin CodePeer mode.\n+\t* sem_ch3.adb (Signed_Integer_Type_Declaration): Correct the generation\n+\tof an explicitly declared type, so that the base types of the original\n+\ttype and this generated type are the same, and a \"type\" (not a subtype\n+\tlike previously).\n+\t* errout.adb (Special_Msg_Delete): Do not issue messages \"Size too\n+\tsmall\" in Alfa mode, like in CodePeer mode.\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Ignore rep\n+\tclauses in Alfa mode.\n+\n+2011-08-29  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.ads, exp_ch6.adb (Is_Null_Procedure): Move the spec of this\n+\tfunction to the package spec.\n+\t* sem_ch6.adb (Find_Corresponding_Spec, New_Overloaded_Entity): For\n+\tinternally generated bodies of null procedures locate the internally\n+\tgenerated spec enforcing mode conformance.\n+\t(Is_Interface_Conformant): Ensure that the controlling formal of the\n+\tprimitives match.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Inline): In an instance, do not\n+\treject the pragma if it appears to apply to a formal subprogram.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Use consistent name for\n+\tinner expression, to prevent double evaluation.\n+\n 2011-08-29  Tristan Gingold  <gingold@adacore.com>\n \n \t* a-exexpr.adb (Propagate_Exception): Remove all the parameters as"}, {"sha": "6dbdeba0b75d0e3e3dcefccb9e3753699da83ffe", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 12, "deletions": 38, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -380,18 +380,6 @@ package body Ada.Exceptions is\n    --  the TSD (all fields of this exception occurrence are set). Abort\n    --  is deferred before the reraise operation.\n \n-   --  Save_Occurrence variations: As the management of the private data\n-   --  attached to occurrences is delicate, whether or not pointers to such\n-   --  data has to be copied in various situations is better made explicit.\n-   --  The following procedures provide an internal interface to help making\n-   --  this explicit.\n-\n-   procedure Save_Occurrence_No_Private\n-     (Target : out Exception_Occurrence;\n-      Source : Exception_Occurrence);\n-   --  Copy all the components of Source to Target, except the\n-   --  Private_Data pointer.\n-\n    procedure Transfer_Occurrence\n      (Target : Exception_Occurrence_Access;\n       Source : Exception_Occurrence);\n@@ -1006,7 +994,6 @@ package body Ada.Exceptions is\n       Excep.Exception_Raised := False;\n       Excep.Id               := E;\n       Excep.Num_Tracebacks   := 0;\n-      Excep.Cleanup_Flag     := False;\n       Excep.Pid              := Local_Partition_ID;\n \n       --  The following is a common pattern, should be abstracted\n@@ -1274,7 +1261,7 @@ package body Ada.Exceptions is\n             Abort_Defer.all;\n          end if;\n \n-         Save_Occurrence_No_Private (Get_Current_Excep.all.all, X);\n+         Save_Occurrence (Get_Current_Excep.all.all, X);\n          Raise_Current_Excep (X.Id);\n       end if;\n    end Reraise_Occurrence;\n@@ -1289,7 +1276,7 @@ package body Ada.Exceptions is\n          Abort_Defer.all;\n       end if;\n \n-      Save_Occurrence_No_Private (Get_Current_Excep.all.all, X);\n+      Save_Occurrence (Get_Current_Excep.all.all, X);\n       Raise_Current_Excep (X.Id);\n    end Reraise_Occurrence_Always;\n \n@@ -1299,7 +1286,7 @@ package body Ada.Exceptions is\n \n    procedure Reraise_Occurrence_No_Defer (X : Exception_Occurrence) is\n    begin\n-      Save_Occurrence_No_Private (Get_Current_Excep.all.all, X);\n+      Save_Occurrence (Get_Current_Excep.all.all, X);\n       Raise_Current_Excep (X.Id);\n    end Reraise_Occurrence_No_Defer;\n \n@@ -1311,38 +1298,25 @@ package body Ada.Exceptions is\n      (Target : out Exception_Occurrence;\n       Source : Exception_Occurrence)\n    is\n-   begin\n-      Save_Occurrence_No_Private (Target, Source);\n-   end Save_Occurrence;\n-\n-   function Save_Occurrence (Source : Exception_Occurrence) return EOA is\n-      Target : constant EOA := new Exception_Occurrence;\n-   begin\n-      Save_Occurrence (Target.all, Source);\n-      return Target;\n-   end Save_Occurrence;\n-\n-   --------------------------------\n-   -- Save_Occurrence_No_Private --\n-   --------------------------------\n-\n-   procedure Save_Occurrence_No_Private\n-     (Target : out Exception_Occurrence;\n-      Source : Exception_Occurrence)\n-   is\n    begin\n       Target.Id             := Source.Id;\n       Target.Msg_Length     := Source.Msg_Length;\n       Target.Num_Tracebacks := Source.Num_Tracebacks;\n       Target.Pid            := Source.Pid;\n-      Target.Cleanup_Flag   := Source.Cleanup_Flag;\n \n       Target.Msg (1 .. Target.Msg_Length) :=\n         Source.Msg (1 .. Target.Msg_Length);\n \n       Target.Tracebacks (1 .. Target.Num_Tracebacks) :=\n         Source.Tracebacks (1 .. Target.Num_Tracebacks);\n-   end Save_Occurrence_No_Private;\n+   end Save_Occurrence;\n+\n+   function Save_Occurrence (Source : Exception_Occurrence) return EOA is\n+      Target : constant EOA := new Exception_Occurrence;\n+   begin\n+      Save_Occurrence (Target.all, Source);\n+      return Target;\n+   end Save_Occurrence;\n \n    -------------------------\n    -- Transfer_Occurrence --\n@@ -1353,7 +1327,7 @@ package body Ada.Exceptions is\n       Source : Exception_Occurrence)\n    is\n    begin\n-      Save_Occurrence_No_Private (Target.all, Source);\n+      Save_Occurrence (Target.all, Source);\n    end Transfer_Occurrence;\n \n    -------------------"}, {"sha": "aed0f2087547f8040233e783676f71d50964376b", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -301,13 +301,6 @@ private\n       Msg : String (1 .. Exception_Msg_Max_Length);\n       --  Characters of message\n \n-      Cleanup_Flag : Boolean := False;\n-      --  The cleanup flag is normally False, it is set True for an exception\n-      --  occurrence passed to a cleanup routine, and will still be set True\n-      --  when the cleanup routine does a Reraise_Occurrence call using this\n-      --  exception occurrence. This is used to avoid recording a bogus trace\n-      --  back entry from this reraise call.\n-\n       Exception_Raised : Boolean := False;\n       --  Set to true to indicate that this exception occurrence has actually\n       --  been raised. When an exception occurrence is first created, this is\n@@ -325,11 +318,6 @@ private\n \n       Tracebacks : Tracebacks_Array;\n       --  Stored tracebacks (in Tracebacks (1 .. Num_Tracebacks))\n-\n-      Private_Data : System.Address := System.Null_Address;\n-      --  Field used by low level exception mechanism to store specific data.\n-      --  Currently used by the GCC exception mechanism to store a pointer to\n-      --  a GNAT_GCC_Exception.\n    end record;\n \n    function \"=\" (Left, Right : Exception_Occurrence) return Boolean\n@@ -347,11 +335,9 @@ private\n      Id               => null,\n      Msg_Length       => 0,\n      Msg              => (others => ' '),\n-     Cleanup_Flag     => False,\n      Exception_Raised => False,\n      Pid              => 0,\n      Num_Tracebacks   => 0,\n-     Tracebacks       => (others => TBE.Null_TB_Entry),\n-     Private_Data     => System.Null_Address);\n+     Tracebacks       => (others => TBE.Null_TB_Entry));\n \n end Ada.Exceptions;"}, {"sha": "4d5d181786fab27e60104508a84e56f46662a118", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 12, "deletions": 44, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -341,18 +341,6 @@ package body Ada.Exceptions is\n    --  (all fields of this exception occurrence are set). Abort is deferred\n    --  before the reraise operation.\n \n-   --  Save_Occurrence variations: As the management of the private data\n-   --  attached to occurrences is delicate, whether or not pointers to such\n-   --  data has to be copied in various situations is better made explicit.\n-   --  The following procedures provide an internal interface to help making\n-   --  this explicit.\n-\n-   procedure Save_Occurrence_No_Private\n-     (Target : out Exception_Occurrence;\n-      Source : Exception_Occurrence);\n-   --  Copy all the components of Source to Target, except the\n-   --  Private_Data pointer.\n-\n    procedure Transfer_Occurrence\n      (Target : Exception_Occurrence_Access;\n       Source : Exception_Occurrence);\n@@ -959,7 +947,6 @@ package body Ada.Exceptions is\n       Excep.Exception_Raised := False;\n       Excep.Id               := E;\n       Excep.Num_Tracebacks   := 0;\n-      Excep.Cleanup_Flag     := False;\n       Excep.Pid              := Local_Partition_ID;\n       Abort_Defer.all;\n       Raise_Current_Excep (E);\n@@ -1164,7 +1151,7 @@ package body Ada.Exceptions is\n    begin\n       if X.Id /= null then\n          Abort_Defer.all;\n-         Save_Occurrence_No_Private (Get_Current_Excep.all.all, X);\n+         Save_Occurrence (Get_Current_Excep.all.all, X);\n          Raise_Current_Excep (X.Id);\n       end if;\n    end Reraise_Occurrence;\n@@ -1176,7 +1163,7 @@ package body Ada.Exceptions is\n    procedure Reraise_Occurrence_Always (X : Exception_Occurrence) is\n    begin\n       Abort_Defer.all;\n-      Save_Occurrence_No_Private (Get_Current_Excep.all.all, X);\n+      Save_Occurrence (Get_Current_Excep.all.all, X);\n       Raise_Current_Excep (X.Id);\n    end Reraise_Occurrence_Always;\n \n@@ -1186,7 +1173,7 @@ package body Ada.Exceptions is\n \n    procedure Reraise_Occurrence_No_Defer (X : Exception_Occurrence) is\n    begin\n-      Save_Occurrence_No_Private (Get_Current_Excep.all.all, X);\n+      Save_Occurrence (Get_Current_Excep.all.all, X);\n       Raise_Current_Excep (X.Id);\n    end Reraise_Occurrence_No_Defer;\n \n@@ -1198,38 +1185,25 @@ package body Ada.Exceptions is\n      (Target : out Exception_Occurrence;\n       Source : Exception_Occurrence)\n    is\n-   begin\n-      Save_Occurrence_No_Private (Target, Source);\n-   end Save_Occurrence;\n-\n-   function Save_Occurrence (Source : Exception_Occurrence) return EOA is\n-      Target : constant EOA := new Exception_Occurrence;\n-   begin\n-      Save_Occurrence (Target.all, Source);\n-      return Target;\n-   end Save_Occurrence;\n-\n-   --------------------------------\n-   -- Save_Occurrence_No_Private --\n-   --------------------------------\n-\n-   procedure Save_Occurrence_No_Private\n-     (Target : out Exception_Occurrence;\n-      Source : Exception_Occurrence)\n-   is\n    begin\n       Target.Id             := Source.Id;\n       Target.Msg_Length     := Source.Msg_Length;\n       Target.Num_Tracebacks := Source.Num_Tracebacks;\n       Target.Pid            := Source.Pid;\n-      Target.Cleanup_Flag   := Source.Cleanup_Flag;\n \n       Target.Msg (1 .. Target.Msg_Length) :=\n         Source.Msg (1 .. Target.Msg_Length);\n \n       Target.Tracebacks (1 .. Target.Num_Tracebacks) :=\n         Source.Tracebacks (1 .. Target.Num_Tracebacks);\n-   end Save_Occurrence_No_Private;\n+   end Save_Occurrence;\n+\n+   function Save_Occurrence (Source : Exception_Occurrence) return EOA is\n+      Target : constant EOA := new Exception_Occurrence;\n+   begin\n+      Save_Occurrence (Target.all, Source);\n+      return Target;\n+   end Save_Occurrence;\n \n    -------------------------\n    -- Transfer_Occurrence --\n@@ -1240,13 +1214,7 @@ package body Ada.Exceptions is\n       Source : Exception_Occurrence)\n    is\n    begin\n-      --  Setup Target as an exception to be propagated in the calling task\n-      --  (rendezvous-wise), taking care not to clobber the associated private\n-      --  data. Target is expected to be a pointer to the calling task's fixed\n-      --  TSD occurrence, which is very different from Get_Current_Excep here\n-      --  because this subprogram is called from the called task.\n-\n-      Save_Occurrence_No_Private (Target.all, Source);\n+      Save_Occurrence (Target.all, Source);\n    end Transfer_Occurrence;\n \n    -------------------"}, {"sha": "22f0cee9bebde2de4c607329102317f3ad1fd6e2", "filename": "gcc/ada/a-except.ads", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.ads?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -271,13 +271,6 @@ private\n       Msg : String (1 .. Exception_Msg_Max_Length);\n       --  Characters of message\n \n-      Cleanup_Flag : Boolean := False;\n-      --  The cleanup flag is normally False, it is set True for an exception\n-      --  occurrence passed to a cleanup routine, and will still be set True\n-      --  when the cleanup routine does a Reraise_Occurrence call using this\n-      --  exception occurrence. This is used to avoid recording a bogus trace\n-      --  back entry from this reraise call.\n-\n       Exception_Raised : Boolean := False;\n       --  Set to true to indicate that this exception occurrence has actually\n       --  been raised. When an exception occurrence is first created, this is\n@@ -295,11 +288,6 @@ private\n \n       Tracebacks : Tracebacks_Array;\n       --  Stored tracebacks (in Tracebacks (1 .. Num_Tracebacks))\n-\n-      Private_Data : System.Address := System.Null_Address;\n-      --  Field used by low level exception mechanism to store specific data.\n-      --  Currently used by the GCC exception mechanism to store a pointer to\n-      --  a GNAT_GCC_Exception.\n    end record;\n \n    function \"=\" (Left, Right : Exception_Occurrence) return Boolean\n@@ -317,11 +305,9 @@ private\n      Id               => null,\n      Msg_Length       => 0,\n      Msg              => (others => ' '),\n-     Cleanup_Flag     => False,\n      Exception_Raised => False,\n      Pid              => 0,\n      Num_Tracebacks   => 0,\n-     Tracebacks       => (others => TBE.Null_TB_Entry),\n-     Private_Data     => System.Null_Address);\n+     Tracebacks       => (others => TBE.Null_TB_Entry));\n \n end Ada.Exceptions;"}, {"sha": "69a1accc4658fabf8be805f6185ae86a939406a9", "filename": "gcc/ada/a-exexda.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-exexda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-exexda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexda.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -617,7 +617,6 @@ package body Exception_Data is\n       Excep.Num_Tracebacks   := 0;\n       Excep.Pid              := Local_Partition_ID;\n       Excep.Msg_Length       := 0;\n-      Excep.Cleanup_Flag     := False;\n \n       while To_Ptr (Msg1) (Excep.Msg_Length + 1) /= ASCII.NUL\n         and then Excep.Msg_Length < Exception_Msg_Max_Length\n@@ -668,7 +667,6 @@ package body Exception_Data is\n       Excep.Id               := Id;\n       Excep.Num_Tracebacks   := 0;\n       Excep.Pid              := Local_Partition_ID;\n-      Excep.Cleanup_Flag     := False;\n \n    end Set_Exception_Msg;\n "}, {"sha": "7a460e0773804ef53089f3ba34f6d48d4a615c2e", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -350,11 +350,9 @@ package body Exception_Propagation is\n \n          Excep.Id := Foreign_Exception'Access;\n          Excep.Msg_Length := 0;\n-         Excep.Cleanup_Flag := False;\n          Excep.Exception_Raised := True;\n          Excep.Pid := Local_Partition_ID;\n          Excep.Num_Tracebacks := 0;\n-         Excep.Private_Data := System.Null_Address;\n       end if;\n    end Setup_Current_Excep;\n "}, {"sha": "f5674e5e8677d84aa570919030d35ca5b5aa24c9", "filename": "gcc/ada/a-exstat.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-exstat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fa-exstat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exstat.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -144,8 +144,6 @@ package body Stream_Attributes is\n          return Null_Occurrence;\n \n       else\n-         X.Cleanup_Flag := False;\n-\n          To := S'First - 2;\n          Next_String;\n "}, {"sha": "3f9acbfb98e359e7a1f831750a824215273d145d", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -2832,10 +2832,10 @@ package body Errout is\n \n       elsif Msg = \"size for& too small, minimum allowed is ^\" then\n \n-         --  Suppress \"size too small\" errors in CodePeer mode, since pragma\n-         --  Pack is also ignored in this configuration.\n+         --  Suppress \"size too small\" errors in CodePeer mode and ALFA mode,\n+         --  since pragma Pack is also ignored in this configuration.\n \n-         if CodePeer_Mode then\n+         if CodePeer_Mode or ALFA_Mode then\n             return True;\n \n          --  When a size is wrong for a frozen type there is no explicit size"}, {"sha": "637e544bcea586b79a87d33cf8e4bafa4a76c1ee", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -1165,7 +1165,8 @@ package body Exp_Ch4 is\n                Insert_Action (Exp,\n                  Make_Subtype_Declaration (Loc,\n                    Defining_Identifier => ConstrT,\n-                   Subtype_Indication  => Make_Subtype_From_Expr (Exp, T)));\n+                   Subtype_Indication  =>\n+                     Make_Subtype_From_Expr (Internal_Exp, T)));\n                Freeze_Itype (ConstrT, Exp);\n                Rewrite (Exp, OK_Convert_To (ConstrT, Internal_Exp));\n             end;"}, {"sha": "49e471d5f039c3305b088d54449f739254639080", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -223,10 +223,6 @@ package body Exp_Ch6 is\n    --  reference to the object itself, and the call becomes a call to the\n    --  corresponding protected subprogram.\n \n-   function Is_Null_Procedure (Subp : Entity_Id) return Boolean;\n-   --  Predicate to recognize stubbed procedures and null procedures, which\n-   --  can be inlined unconditionally in all cases.\n-\n    procedure Expand_Simple_Function_Return (N : Node_Id);\n    --  Expand simple return from function. In the case where we are returning\n    --  from a function body this is called by Expand_N_Simple_Return_Statement."}, {"sha": "1896ce21069dd76c27ca91fce0678ce0596fa1f6", "filename": "gcc/ada/exp_ch6.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fexp_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fexp_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.ads?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -119,6 +119,10 @@ package Exp_Ch6 is\n    --  that requires handling as a build-in-place call or is a qualified\n    --  expression applied to such a call; otherwise returns False.\n \n+   function Is_Null_Procedure (Subp : Entity_Id) return Boolean;\n+   --  Predicate to recognize stubbed procedures and null procedures, which\n+   --  can be inlined unconditionally in all cases.\n+\n    procedure Make_Build_In_Place_Call_In_Allocator\n      (Allocator     : Node_Id;\n       Function_Call : Node_Id);"}, {"sha": "e4c56948fe68758df70059eb6b192f14412d22c9", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -2246,12 +2246,14 @@ package body Freeze is\n \n            and then RM_Size (Rec) >= Scalar_Component_Total_RM_Size\n \n-           --  Never do implicit packing in CodePeer mode since we don't do\n-           --  any packing in this mode, since this generates over-complex\n-           --  code that confuses CodePeer, and in general, CodePeer does not\n-           --  care about the internal representation of objects.\n+           --  Never do implicit packing in CodePeer or ALFA modes since\n+           --  we don't do any packing in this mode, since this generates\n+           --  over-complex code that confuses static analysis, and in\n+           --  general, neither CodePeer not GNATprove care about the\n+           --  internal representation of objects.\n \n            and then not CodePeer_Mode\n+           and then not ALFA_Mode\n          then\n             --  If implicit packing enabled, do it\n \n@@ -3066,6 +3068,7 @@ package body Freeze is\n                     and then not Is_Packed (Root_Type (E))\n                     and then not Has_Component_Size_Clause (Root_Type (E))\n                     and then not CodePeer_Mode\n+                    and then not ALFA_Mode\n                   then\n                      Get_Index_Bounds (First_Index (E), Lo, Hi);\n "}, {"sha": "fcece69bbfef5a1f7bf7777eff8d4c2a3d073637", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -2004,9 +2004,10 @@ package body Sem_Ch13 is\n       end if;\n \n       --  Process Ignore_Rep_Clauses option (we also ignore rep clauses in\n-      --  CodePeer mode, since they are not relevant in that context).\n+      --  CodePeer mode or ALFA mode, since they are not relevant in these\n+      --  contexts).\n \n-      if Ignore_Rep_Clauses or CodePeer_Mode then\n+      if Ignore_Rep_Clauses or CodePeer_Mode or ALFA_Mode then\n          case Id is\n \n             --  The following should be ignored. They do not affect legality\n@@ -2026,8 +2027,8 @@ package body Sem_Ch13 is\n                Rewrite (N, Make_Null_Statement (Sloc (N)));\n                return;\n \n-            --  We do not want too ignore 'Small in CodePeer_Mode, since it\n-            --  has an impact on the exact computations performed.\n+            --  We do not want too ignore 'Small in CodePeer_Mode or ALFA_Mode,\n+            --  since it has an impact on the exact computations performed.\n \n             --  Perhaps 'Small should also not be ignored by\n             --  Ignore_Rep_Clauses ???"}, {"sha": "2ab8ab1bf4febd112c353f9840038c384e006e53", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -19771,14 +19771,14 @@ package body Sem_Ch3 is\n       if ALFA_Mode then\n \n          --  If the range of the type is already symmetric with a possible\n-         --  extra negative value, just make the type its own base type.\n+         --  extra negative value, leave it this way.\n \n          if UI_Le (Lo_Val, Hi_Val)\n            and then (UI_Eq (Lo_Val, UI_Negate (Hi_Val))\n                       or else\n                         UI_Eq (Lo_Val, UI_Sub (UI_Negate (Hi_Val), Uint_1)))\n          then\n-            Set_Etype (T, T);\n+            null;\n \n          else\n             declare\n@@ -19830,7 +19830,8 @@ package body Sem_Ch3 is\n                      High_Bound => Ubound));\n \n                Analyze (Decl);\n-               Set_Etype (Implicit_Base, Implicit_Base);\n+               Set_Etype (Implicit_Base, Base_Type (Implicit_Base));\n+               Set_Etype (T, Base_Type (Implicit_Base));\n                Insert_Before (Parent (Def), Decl);\n             end;\n          end if;"}, {"sha": "d6eb55da231a440a4f537187c17bdd111116dfce", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -6362,7 +6362,19 @@ package body Sem_Ch6 is\n                   end if;\n                end if;\n \n-               if not Has_Completion (E) then\n+               --  Ada 2012 (AI05-0165): For internally generated bodies of\n+               --  null procedures locate the internally generated spec. We\n+               --  enforce mode conformance since a tagged type may inherit\n+               --  from interfaces several null primitives which differ only\n+               --  in the mode of the formals.\n+\n+               if not (Comes_From_Source (E))\n+                 and then Is_Null_Procedure (E)\n+                 and then not Mode_Conformant (Designator, E)\n+               then\n+                  null;\n+\n+               elsif not Has_Completion (E) then\n                   if Nkind (N) /= N_Subprogram_Body_Stub then\n                      Set_Corresponding_Spec (N, E);\n                   end if;\n@@ -7037,6 +7049,30 @@ package body Sem_Ch6 is\n       Iface : constant Entity_Id := Find_Dispatching_Type (Iface_Prim);\n       Typ   : constant Entity_Id := Find_Dispatching_Type (Prim);\n \n+      function Controlling_Formal (Prim : Entity_Id) return Entity_Id;\n+      --  Return the controlling formal of Prim\n+\n+      function Controlling_Formal (Prim : Entity_Id) return Entity_Id is\n+         E : Entity_Id := First_Entity (Prim);\n+      begin\n+         while Present (E) loop\n+            if Is_Formal (E) and then Is_Controlling_Formal (E) then\n+               return E;\n+            end if;\n+\n+            Next_Entity (E);\n+         end loop;\n+\n+         return Empty;\n+      end Controlling_Formal;\n+\n+      --  Local variables\n+\n+      Iface_Ctrl_F : constant Entity_Id := Controlling_Formal (Iface_Prim);\n+      Prim_Ctrl_F  : constant Entity_Id := Controlling_Formal (Prim);\n+\n+   --  Start of processing for Is_Interface_Conformant\n+\n    begin\n       pragma Assert (Is_Subprogram (Iface_Prim)\n         and then Is_Subprogram (Prim)\n@@ -7060,8 +7096,17 @@ package body Sem_Ch6 is\n       then\n          return False;\n \n-      --  Case of a procedure, or a function that does not have a controlling\n-      --  result (I or access I).\n+      --  The mode of the controlling formals must match\n+\n+      elsif Present (Iface_Ctrl_F)\n+         and then Present (Prim_Ctrl_F)\n+         and then Ekind (Iface_Ctrl_F) /= Ekind (Prim_Ctrl_F)\n+      then\n+         return False;\n+\n+      --  Case of a procedure, or a function whose result type matches the\n+      --  result type of the interface primitive, or a function that has no\n+      --  controlling result (I or access I).\n \n       elsif Ekind (Iface_Prim) = E_Procedure\n         or else Etype (Prim) = Etype (Iface_Prim)\n@@ -8254,6 +8299,18 @@ package body Sem_Ch6 is\n             if Scope (E) /= Current_Scope then\n                null;\n \n+            --  Ada 2012 (AI05-0165): For internally generated bodies of\n+            --  null procedures locate the internally generated spec. We\n+            --  enforce mode conformance since a tagged type may inherit\n+            --  from interfaces several null primitives which differ only\n+            --  in the mode of the formals.\n+\n+            elsif not Comes_From_Source (S)\n+              and then Is_Null_Procedure (S)\n+              and then not Mode_Conformant (E, S)\n+            then\n+               null;\n+\n             --  Check if we have type conformance\n \n             elsif Type_Conformant (E, S) then"}, {"sha": "8bf98ba7ea9e49938a89c7696aa9a79751a61fbf", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -4694,9 +4694,12 @@ package body Sem_Prag is\n \n                   --  Inline is a program unit pragma (RM 10.1.5) and cannot\n                   --  appear in a formal part to apply to a formal subprogram.\n+                  --  Do not apply check within an instance or a formal package\n+                  --  the test will have been applied to the original generic.\n \n                   elsif Nkind (Decl) in N_Formal_Subprogram_Declaration\n                     and then List_Containing (Decl) = List_Containing (N)\n+                    and then not In_Instance\n                   then\n                      Error_Msg_N\n                        (\"Inline cannot apply to a formal subprogram\", N);"}]}