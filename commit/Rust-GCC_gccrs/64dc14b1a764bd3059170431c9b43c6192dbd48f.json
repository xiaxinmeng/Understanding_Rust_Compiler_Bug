{"sha": "64dc14b1a764bd3059170431c9b43c6192dbd48f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRkYzE0YjFhNzY0YmQzMDU5MTcwNDMxYzliNDNjNjE5MmRiZDQ4Zg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-10-22T09:04:22Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-03T08:35:33Z"}, "message": "[OpenACC] Enable inconsistent nested 'reduction' clauses checking for OpenACC 'kernels'\n\n\tgcc/\n\t* omp-low.c (scan_omp_for) <OpenACC>: Move earlier inconsistent\n\tnested 'reduction' clauses checking.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/nested-reductions-1-kernels.c: Extend.\n\t* c-c++-common/goacc/nested-reductions-2-kernels.c: Likewise.\n\t* gfortran.dg/goacc/nested-reductions-1-kernels.f90: Likewise.\n\t* gfortran.dg/goacc/nested-reductions-2-kernels.f90: Likewise.", "tree": {"sha": "2aa43ca4750250953ed7a6a7ea370854c173409a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aa43ca4750250953ed7a6a7ea370854c173409a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64dc14b1a764bd3059170431c9b43c6192dbd48f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64dc14b1a764bd3059170431c9b43c6192dbd48f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64dc14b1a764bd3059170431c9b43c6192dbd48f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64dc14b1a764bd3059170431c9b43c6192dbd48f/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fedf3e94efe774b8c0539d344130a7b25f50a881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fedf3e94efe774b8c0539d344130a7b25f50a881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fedf3e94efe774b8c0539d344130a7b25f50a881"}], "stats": {"total": 1103, "additions": 1063, "deletions": 40}, "files": [{"sha": "2f1a544bd46ec0121d8fd0e2b5e37e1d651889d6", "filename": "gcc/omp-low.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64dc14b1a764bd3059170431c9b43c6192dbd48f/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64dc14b1a764bd3059170431c9b43c6192dbd48f/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=64dc14b1a764bd3059170431c9b43c6192dbd48f", "patch": "@@ -2454,23 +2454,7 @@ scan_omp_for (gomp_for *stmt, omp_context *outer_ctx)\n \t  }\n \n       if (tgt && is_oacc_kernels (tgt))\n-\t{\n-\t  /* Strip out reductions, as they are not handled yet.  */\n-\t  tree *prev_ptr = &clauses;\n-\n-\t  while (tree probe = *prev_ptr)\n-\t    {\n-\t      tree *next_ptr = &OMP_CLAUSE_CHAIN (probe);\n-\t      \n-\t      if (OMP_CLAUSE_CODE (probe) == OMP_CLAUSE_REDUCTION)\n-\t\t*prev_ptr = *next_ptr;\n-\t      else\n-\t\tprev_ptr = next_ptr;\n-\t    }\n-\n-\t  gimple_omp_for_set_clauses (stmt, clauses);\n-\t  check_oacc_kernel_gwv (stmt, ctx);\n-\t}\n+\tcheck_oacc_kernel_gwv (stmt, ctx);\n \n       /* Collect all variables named in reductions on this loop.  Ensure\n \t that, if this loop has a reduction on some variable v, and there is\n@@ -2553,6 +2537,24 @@ scan_omp_for (gomp_for *stmt, omp_context *outer_ctx)\n       ctx->outer_reduction_clauses\n \t= chainon (unshare_expr (ctx->local_reduction_clauses),\n \t\t   ctx->outer_reduction_clauses);\n+\n+      if (tgt && is_oacc_kernels (tgt))\n+\t{\n+\t  /* Strip out reductions, as they are not handled yet.  */\n+\t  tree *prev_ptr = &clauses;\n+\n+\t  while (tree probe = *prev_ptr)\n+\t    {\n+\t      tree *next_ptr = &OMP_CLAUSE_CHAIN (probe);\n+\n+\t      if (OMP_CLAUSE_CODE (probe) == OMP_CLAUSE_REDUCTION)\n+\t\t*prev_ptr = *next_ptr;\n+\t      else\n+\t\tprev_ptr = next_ptr;\n+\t    }\n+\n+\t  gimple_omp_for_set_clauses (stmt, clauses);\n+\t}\n     }\n \n   scan_sharing_clauses (clauses, ctx);"}, {"sha": "9323e2c8d7e36a8312d30cad4c89927bb8dd07a9", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-1-kernels.c", "status": "modified", "additions": 197, "deletions": 2, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64dc14b1a764bd3059170431c9b43c6192dbd48f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64dc14b1a764bd3059170431c9b43c6192dbd48f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-kernels.c?ref=64dc14b1a764bd3059170431c9b43c6192dbd48f", "patch": "@@ -6,8 +6,6 @@ void acc_kernels (void)\n {\n   int i, j, k, sum, diff;\n \n-  /* FIXME:  These tests are not meaningful yet because reductions in\n-     kernels regions are not supported yet.  */\n   #pragma acc kernels\n   {\n     #pragma acc loop reduction(+:sum)\n@@ -16,6 +14,12 @@ void acc_kernels (void)\n         for (k = 0; k < 10; k++)\n           sum = 1;\n \n+    #pragma acc loop collapse(2) reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n       #pragma acc loop reduction(+:sum)\n@@ -25,17 +29,208 @@ void acc_kernels (void)\n \n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n       for (j = 0; j < 10; j++)\n         #pragma acc loop reduction(+:sum)\n         for (k = 0; k < 10; k++)\n           sum = 1;\n \n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(-:diff)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+/* The same tests as above, but using a combined kernels loop construct.  */\n+\n+void acc_kernels_loop (void)\n+{\n+  int i, j, k, l, sum, diff;\n+\n+  #pragma acc kernels loop\n+  for (int h = 0; h < 10; ++h)\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop collapse(2) reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n       #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum) // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+/* The same tests as above, but now the outermost reduction clause is on\n+   the kernels region, not the outermost loop.  */\n+\n+void acc_kernels_reduction (void)\n+{\n+  /* In contrast to the 'parallel' construct, the 'reduction' clause is not\n+     supported on the 'kernels' construct.  */\n+}\n+\n+/* The same tests as above, but using a combined kernels loop construct, and\n+   the outermost reduction clause is on that one, not the outermost loop.  */\n+void acc_kernels_loop_reduction (void)\n+{\n+  int i, j, k, sum, diff;\n+\n+  #pragma acc kernels loop reduction(+:sum)\n+  for (int h = 0; h < 10; ++h)\n+  {\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum) // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n       for (j = 0; j < 10; j++)\n         #pragma acc loop reduction(+:sum)\n         for (k = 0; k < 10; k++)\n           sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n   }\n }"}, {"sha": "dec7dbda45dc31ff91775796193aca0bb048ec90", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-2-kernels.c", "status": "modified", "additions": 263, "deletions": 8, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64dc14b1a764bd3059170431c9b43c6192dbd48f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64dc14b1a764bd3059170431c9b43c6192dbd48f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-kernels.c?ref=64dc14b1a764bd3059170431c9b43c6192dbd48f", "patch": "@@ -4,47 +4,302 @@\n \n void acc_kernels (void)\n {\n-  int i, j, k, sum, diff;\n+  int i, j, k, l, sum, diff;\n \n-  /* FIXME:  No diagnostics are produced for these loops because reductions\n-     in kernels regions are not supported yet.  */\n   #pragma acc kernels\n   {\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n       for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n         for (k = 0; k < 10; k++)\n           sum = 1;\n \n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n-      #pragma acc loop\n+      #pragma acc loop collapse(2) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n       for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" } \n         for (k = 0; k < 10; k++)\n           sum = 1;\n \n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n-      #pragma acc loop reduction(-:diff)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n       for (j = 0; j < 10; j++)\n-        #pragma acc loop\n+        #pragma acc loop reduction(-:sum)\n         for (k = 0; k < 10; k++)\n           sum = 1;\n \n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n-      #pragma acc loop\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+/* The same tests as above, but using a combined kernels loop construct.  */\n+\n+void acc_kernels_loop (void)\n+{\n+  int i, j, k, l, sum, diff;\n+\n+  #pragma acc kernels loop\n+  for (int h = 0; h < 10; ++h)\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n       for (j = 0; j < 10; j++)\n         #pragma acc loop reduction(+:sum)\n         for (k = 0; k < 10; k++)\n           sum = 1;\n \n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n-      #pragma acc loop reduction(-:sum)\n+      #pragma acc loop collapse(2) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(-:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+/* The same tests as above, but now the outermost reduction clause is on\n+   the kernels region, not the outermost loop.  */\n+void acc_kernels_reduction (void)\n+{\n+  /* In contrast to the 'parallel' construct, the 'reduction' clause is not\n+     supported on the 'kernels' construct.  */\n+}\n+\n+/* The same tests as above, but using a combined kernels loop construct, and\n+   the outermost reduction clause is on that one, not the outermost loop.  */\n+void acc_kernels_loop_reduction (void)\n+{\n+  int i, j, k, l, sum, diff;\n+\n+  #pragma acc kernels loop reduction(+:sum)\n+  for (int h = 0; h < 10; ++h)\n+  {\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n       for (j = 0; j < 10; j++)\n         #pragma acc loop reduction(+:sum)\n         for (k = 0; k < 10; k++)\n           sum = 1;\n+\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(-:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(max:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(max:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+      #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" })\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 } \n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n   }\n }"}, {"sha": "60cb63006c3c75ee81dde7a0a5b54d002d14c6f7", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-1-kernels.f90", "status": "modified", "additions": 248, "deletions": 3, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64dc14b1a764bd3059170431c9b43c6192dbd48f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-kernels.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64dc14b1a764bd3059170431c9b43c6192dbd48f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-kernels.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-kernels.f90?ref=64dc14b1a764bd3059170431c9b43c6192dbd48f", "patch": "@@ -6,8 +6,6 @@ subroutine acc_kernels ()\n   implicit none (type, external)\n   integer :: i, j, k, sum, diff\n \n-  ! FIXME:  These tests are not meaningful yet because reductions in\n-  ! kernels regions are not supported yet.\n   !$acc kernels\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n@@ -18,6 +16,15 @@ subroutine acc_kernels ()\n       end do\n     end do\n \n+    !$acc loop collapse(2) reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       !$acc loop reduction(+:sum)\n@@ -28,6 +35,15 @@ subroutine acc_kernels ()\n       end do\n     end do\n \n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop collapse(2) reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n \n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n@@ -39,7 +55,6 @@ subroutine acc_kernels ()\n       end do\n     end do\n \n-\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       !$acc loop reduction(+:sum)\n@@ -51,5 +66,235 @@ subroutine acc_kernels ()\n       end do\n     end do\n \n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(-:diff)\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n   !$acc end kernels\n end subroutine acc_kernels\n+\n+! The same tests as above, but using a combined kernels loop construct.\n+\n+subroutine acc_kernels_loop ()\n+  implicit none (type, external)\n+  integer :: h, i, j, k, l, sum, diff\n+\n+  !$acc kernels loop\n+  do h = 1, 10\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop collapse(2) reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop collapse(2) reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+  end do\n+end subroutine acc_kernels_loop\n+\n+! The same tests as above, but now the outermost reduction clause is on\n+! the kernels region, not the outermost loop.  */\n+\n+subroutine acc_kernels_reduction ()\n+  implicit none (type, external)\n+\n+  ! In contrast to the 'parallel' construct, the 'reduction' clause is not\n+  ! supported on the 'kernels' construct.\n+end subroutine acc_kernels_reduction\n+\n+! The same tests as above, but using a combined kernels loop construct, and\n+! the outermost reduction clause is on that one, not the outermost loop.  */\n+subroutine acc_kernels_loop_reduction ()\n+  implicit none (type, external)\n+  integer :: h, i, j, k, sum, diff\n+\n+  !$acc kernels loop reduction(+:sum)\n+  do h = 1, 10\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    do i = 1, 10\n+      !$acc loop\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop  ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+  end do\n+end subroutine acc_kernels_loop_reduction"}, {"sha": "6ee41843d31af08b2cf8e298ea88eb12d6c61929", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-2-kernels.f90", "status": "modified", "additions": 336, "deletions": 10, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64dc14b1a764bd3059170431c9b43c6192dbd48f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-kernels.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64dc14b1a764bd3059170431c9b43c6192dbd48f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-kernels.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-kernels.f90?ref=64dc14b1a764bd3059170431c9b43c6192dbd48f", "patch": "@@ -3,14 +3,15 @@\n ! See also 'c-c++-common/goacc/nested-reductions-2-kernels.c'.\n \n subroutine acc_kernels ()\n-  integer :: i, j, k, sum, diff\n+  implicit none (type, external)\n+  integer :: i, j, k, l, sum, diff\n \n-  ! FIXME:  No diagnostics are produced for these loops because reductions\n-  ! in kernels regions are not supported yet.\n   !$acc kernels\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n       do j = 1, 10\n+        !$acc loop reduction(+:sum)\n         do k = 1, 10\n           sum = 1\n         end do\n@@ -19,19 +20,37 @@ subroutine acc_kernels ()\n \n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n-      !$acc loop\n+      !$acc loop collapse(2)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n       do j = 1, 10\n         do k = 1, 10\n-          sum = 1\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n         end do\n       end do\n     end do\n \n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n-      !$acc loop reduction(-:diff)\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n       do j = 1, 10\n-        !$acc loop\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n         do k = 1, 10\n           sum = 1\n         end do\n@@ -40,9 +59,9 @@ subroutine acc_kernels ()\n \n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n-      !$acc loop\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n       do j = 1, 10\n-        !$acc loop reduction(+:sum)\n+        !$acc loop reduction(-:sum)\n         do k = 1, 10\n           sum = 1\n         end do\n@@ -51,13 +70,320 @@ subroutine acc_kernels ()\n \n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n-      !$acc loop reduction(-:sum)\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n       do j = 1, 10\n         !$acc loop reduction(+:sum)\n         do k = 1, 10\n           sum = 1\n         end do\n       end do\n+\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n     end do\n   !$acc end kernels\n end subroutine acc_kernels\n+\n+! The same tests as above, but using a combined kernels loop construct.\n+\n+subroutine acc_kernels_loop ()\n+  implicit none (type, external)\n+  integer :: h, i, j, k, l, sum, diff\n+\n+  !$acc kernels loop\n+  do h = 1, 10\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop collapse(2)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(-:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+  end do\n+end subroutine acc_kernels_loop\n+\n+! The same tests as above, but now the outermost reduction clause is on\n+! the kernels region, not the outermost loop.\n+\n+subroutine acc_kernels_reduction ()\n+  implicit none (type, external)\n+\n+  ! In contrast to the 'parallel' construct, the 'reduction' clause is not\n+  ! supported on the 'kernels' construct.\n+end subroutine acc_kernels_reduction\n+\n+! The same tests as above, but using a combined kernels loop construct, and\n+! the outermost reduction clause is on that one, not the outermost loop.  */\n+subroutine acc_kernels_loop_reduction ()\n+  implicit none (type, external)\n+  integer :: h, i, j, k, l, sum, diff\n+\n+  !$acc kernels loop reduction(+:sum)\n+  do h = 1, 10\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop collapse(2)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }  \n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(-:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(max:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(max:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"TODO\" { xfail *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+  end do\n+end subroutine acc_kernels_loop_reduction"}]}