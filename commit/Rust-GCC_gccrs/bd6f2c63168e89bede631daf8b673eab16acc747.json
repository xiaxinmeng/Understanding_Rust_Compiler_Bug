{"sha": "bd6f2c63168e89bede631daf8b673eab16acc747", "node_id": "C_kwDOANBUbNoAKGJkNmYyYzYzMTY4ZTg5YmVkZTYzMWRhZjhiNjczZWFiMTZhY2M3NDc", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2021-10-12T23:40:17Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2021-10-12T23:40:17Z"}, "message": "c-family: Support format checking C2X %b, %B formats\n\nC2X adds a %b printf format to print integers in binary (analogous to\n%x, including %#b printing a leading 0b on nonzero integers), with\nrecommended practice for a corresponding %B (where %#B uses 0B instead\nof 0b) where that doesn't conflict with existing implementation\nextensions.  See N2630 for details (accepted for C2X, not yet in the\nlatest working draft).  There is also a scanf %b format.\n\nAdd corresponding format checking support (%b accepted by -std=c2x\n-Wformat -pedantic, %B considered an extension to be diagnosed with\n-Wformat -pedantic).  glibc support for the printf formats has been\nproposed at\n<https://sourceware.org/pipermail/libc-alpha/2021-October/131764.html>\n(scanf support to be done in a separate patch).\n\nNote that this does not add any support for these formats to the code\nfor bounding the amount of output produces by a printf function,\nalthough that would also be useful.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c-family/\n\t* c-format.c (print_char_table): Add %b and %B formats.\n\t(scan_char_table): Add %b format.\n\t* c-format.h (T2X_UI, T2X_UL, T2X_ULL, T2X_US, T2X_UC, T2X_ST)\n\t(T2X_UPD, T2X_UIM): New macros.\n\ngcc/testsuite/\n\t* gcc.dg/format/c11-printf-1.c, gcc.dg/format/c11-scanf-1.c,\n\tgcc.dg/format/c2x-printf-1.c, gcc.dg/format/c2x-scanf-1.c,\n\tgcc.dg/format/ext-9.c, gcc.dg/format/ext-10.c: New tests.", "tree": {"sha": "9d35dfdad7b6b4a956f8741d5eab9acfd8090538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d35dfdad7b6b4a956f8741d5eab9acfd8090538"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd6f2c63168e89bede631daf8b673eab16acc747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd6f2c63168e89bede631daf8b673eab16acc747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd6f2c63168e89bede631daf8b673eab16acc747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd6f2c63168e89bede631daf8b673eab16acc747/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76ba473b99c30ddec6171840a76292d6d4b67e7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ba473b99c30ddec6171840a76292d6d4b67e7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76ba473b99c30ddec6171840a76292d6d4b67e7c"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "c27faf71676e3d8c7629a2975b4e0dc453c11525", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=bd6f2c63168e89bede631daf8b673eab16acc747", "patch": "@@ -712,11 +712,14 @@ static const format_char_info print_char_table[] =\n   /* C99 conversion specifiers.  */\n   { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32, TEX_D64, TEX_D128 }, \"-wp0 +#'I\", \"\",   NULL },\n   { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32, TEX_D64,  TEX_D128 }, \"-wp0 +#\",   \"\",   NULL },\n+  /* C2X conversion specifiers.  */\n+  { \"b\",   0, STD_C2X, { T2X_UI,  T2X_UC,  T2X_US,  T2X_UL,  T2X_ULL, TEX_ULL, T2X_ST,  T2X_UPD, T2X_UIM, BADLEN,  BADLEN,  BADLEN }, \"-wp0#\",     \"i\",  NULL },\n   /* X/Open conversion specifiers.  */\n   { \"C\",   0, STD_EXT, { TEX_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",        \"\",   NULL },\n   { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",       \"R\",  NULL },\n   /* GNU conversion specifiers.  */\n   { \"m\",   0, STD_EXT, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",       \"\",   NULL },\n+  { \"B\",   0, STD_EXT, { T2X_UI,  T2X_UC,  T2X_US,  T2X_UL,  T2X_ULL, TEX_ULL, T2X_ST,  T2X_UPD, T2X_UIM, BADLEN,  BADLEN,  BADLEN }, \"-wp0#\",     \"i\",  NULL },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n@@ -876,6 +879,8 @@ static const format_char_info scan_char_table[] =\n   /* C99 conversion specifiers.  */\n   { \"F\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32, TEX_D64, TEX_D128 }, \"*w'\",  \"W\",   NULL },\n   { \"aA\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32,  TEX_D64,  TEX_D128 }, \"*w'\",  \"W\",   NULL },\n+  /* C2X conversion specifiers.  */\n+  { \"b\",     1, STD_C2X, { T2X_UI,  T2X_UC,  T2X_US,  T2X_UL,  T2X_ULL, TEX_ULL, T2X_ST,  T2X_UPD, T2X_UIM, BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n   /* X/Open conversion specifiers.  */\n   { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*mw\",   \"W\",   NULL },\n   { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*amw\",  \"W\",   NULL },"}, {"sha": "2b5012ee3a9b9422baef6b2a51ee1ec03d792a9b", "filename": "gcc/c-family/c-format.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Fc-family%2Fc-format.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Fc-family%2Fc-format.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.h?ref=bd6f2c63168e89bede631daf8b673eab16acc747", "patch": "@@ -278,13 +278,17 @@ struct format_kind_info\n #define T89_S\t{ STD_C89, NULL, T_S }\n #define T_UI\t&unsigned_type_node\n #define T89_UI\t{ STD_C89, NULL, T_UI }\n+#define T2X_UI\t{ STD_C2X, NULL, T_UI }\n #define T_UL\t&long_unsigned_type_node\n #define T89_UL\t{ STD_C89, NULL, T_UL }\n+#define T2X_UL\t{ STD_C2X, NULL, T_UL }\n #define T_ULL\t&long_long_unsigned_type_node\n #define T9L_ULL\t{ STD_C9L, NULL, T_ULL }\n+#define T2X_ULL\t{ STD_C2X, NULL, T_ULL }\n #define TEX_ULL\t{ STD_EXT, NULL, T_ULL }\n #define T_US\t&short_unsigned_type_node\n #define T89_US\t{ STD_C89, NULL, T_US }\n+#define T2X_US\t{ STD_C2X, NULL, T_US }\n #define T_F\t&float_type_node\n #define T89_F\t{ STD_C89, NULL, T_F }\n #define T99_F\t{ STD_C99, NULL, T_F }\n@@ -300,6 +304,7 @@ struct format_kind_info\n #define T99_SC\t{ STD_C99, NULL, T_SC }\n #define T_UC\t&unsigned_char_type_node\n #define T99_UC\t{ STD_C99, NULL, T_UC }\n+#define T2X_UC\t{ STD_C2X, NULL, T_UC }\n #define T_V\t&void_type_node\n #define T89_G   { STD_C89, NULL, &local_gimple_ptr_node }\n #define T_CGRAPH_NODE   { STD_C89, NULL, &local_cgraph_node_ptr_node }\n@@ -314,16 +319,19 @@ struct format_kind_info\n #define TEX_WI\t{ STD_EXT, \"wint_t\", T_WI }\n #define T_ST    &size_type_node\n #define T99_ST\t{ STD_C99, \"size_t\", T_ST }\n+#define T2X_ST\t{ STD_C2X, \"size_t\", T_ST }\n #define T_SST   &signed_size_type_node\n #define T99_SST\t{ STD_C99, \"signed size_t\", T_SST }\n #define T_PD    &ptrdiff_type_node\n #define T99_PD\t{ STD_C99, \"ptrdiff_t\", T_PD }\n #define T_UPD   &unsigned_ptrdiff_type_node\n #define T99_UPD\t{ STD_C99, \"unsigned ptrdiff_t\", T_UPD }\n+#define T2X_UPD\t{ STD_C2X, \"unsigned ptrdiff_t\", T_UPD }\n #define T_IM    &intmax_type_node\n #define T99_IM\t{ STD_C99, \"intmax_t\", T_IM }\n #define T_UIM   &uintmax_type_node\n #define T99_UIM\t{ STD_C99, \"uintmax_t\", T_UIM }\n+#define T2X_UIM\t{ STD_C2X, \"uintmax_t\", T_UIM }\n #define T_D32   &dfloat32_type_node\n #define TEX_D32 { STD_EXT, \"_Decimal32\", T_D32 }\n #define T_D64   &dfloat64_type_node"}, {"sha": "7b8a9928098e75b3b7d54ce3b17085c2c54d9d98", "filename": "gcc/testsuite/gcc.dg/format/c11-printf-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-printf-1.c?ref=bd6f2c63168e89bede631daf8b673eab16acc747", "patch": "@@ -0,0 +1,13 @@\n+/* Test for printf formats: rejection of C2X (and C2X-recommended) formats in\n+   pedantic mode.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (int i)\n+{\n+  printf (\"%b\", i); /* { dg-warning \"C\" } */\n+  printf (\"%B\", i); /* { dg-warning \"C\" } */\n+}"}, {"sha": "d2b9bfb23b5d58a115a17609514ab41335834a4d", "filename": "gcc/testsuite/gcc.dg/format/c11-scanf-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-scanf-1.c?ref=bd6f2c63168e89bede631daf8b673eab16acc747", "patch": "@@ -0,0 +1,11 @@\n+/* Test for printf formats: rejection of C2X formats in pedantic mode.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (unsigned int *uip)\n+{\n+  scanf (\"%b\", uip); /* { dg-warning \"C\" } */\n+}"}, {"sha": "3ae7713ff05381a6b475022741b859b52f345d0f", "filename": "gcc/testsuite/gcc.dg/format/c2x-printf-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-printf-1.c?ref=bd6f2c63168e89bede631daf8b673eab16acc747", "patch": "@@ -0,0 +1,26 @@\n+/* Test for printf formats.  Formats using C2X features.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (unsigned int u, unsigned short us, unsigned char uc, unsigned long ul,\n+     unsigned long long ull, uintmax_t uj, size_t z, unsigned_ptrdiff_t ut)\n+{\n+  /* Use of %b with each length modifier and other valid features.  */\n+  printf (\"%b %hb %hhb %lb %llb %jb %zb %tb\\n\", u, us, uc, ul, ull, uj, z, ut);\n+  printf (\"%*.*llb\\n\", 1, 2, ull);\n+  printf (\"%-b\\n\", u);\n+  printf (\"%#b\\n\", u);\n+  printf (\"%08b\\n\", u);\n+  /* Flags valid on signed conversions only.  */\n+  printf (\"%+b\\n\", u); /* { dg-warning \"flag\" } */\n+  printf (\"% b\\n\", u); /* { dg-warning \"flag\" } */\n+  /* Flags ignored in certain combinations.  */\n+  printf (\"%-08b\\n\", u); /* { dg-warning \"ignored\" } */\n+  printf (\"%08.5b\\n\", u); /* { dg-warning \"ignored\" } */\n+  /* Use of 'L' and 'q' for long long is an extension.  */\n+  printf (\"%Lb\", ull); /* { dg-warning \"does not support\" } */\n+  printf (\"%qb\", ull); /* { dg-warning \"does not support\" } */\n+}"}, {"sha": "f46a715276945b4186bb4cdac078dce8a5026c5b", "filename": "gcc/testsuite/gcc.dg/format/c2x-scanf-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-scanf-1.c?ref=bd6f2c63168e89bede631daf8b673eab16acc747", "patch": "@@ -0,0 +1,17 @@\n+/* Test for scanf formats.  Formats using C2X features.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (unsigned int *uip, unsigned short int *uhp, unsigned char *uhhp,\n+     unsigned long int *ulp, unsigned long long *ullp, uintmax_t *ujp,\n+     size_t *zp, unsigned_ptrdiff_t *utp)\n+{\n+  scanf (\"%*b\");\n+  scanf (\"%2b\", uip);\n+  scanf (\"%hb%hhb%lb%llb%jb%zb%tb\", uhp, uhhp, ulp, ullp, ujp, zp, utp);\n+  scanf (\"%Lb\", ullp); /* { dg-warning \"does not support\" } */\n+  scanf (\"%qb\", ullp); /* { dg-warning \"does not support\" } */\n+}"}, {"sha": "370ea86b42e99e3f5f0d34be636bde045e36c872", "filename": "gcc/testsuite/gcc.dg/format/ext-10.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-10.c?ref=bd6f2c63168e89bede631daf8b673eab16acc747", "patch": "@@ -0,0 +1,13 @@\n+/* Test for scanf format extensions using formats from C2X.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu2x -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (u_quad_t *uqp, unsigned long long int *ullp)\n+{\n+  /* Deprecated length modifiers with %b.  */\n+  scanf (\"%qb\", uqp);\n+  scanf (\"%Lb\", ullp);\n+}"}, {"sha": "15f59e21dbe3ec15331f785b2cbd55f1c74b9bed", "filename": "gcc/testsuite/gcc.dg/format/ext-9.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6f2c63168e89bede631daf8b673eab16acc747/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-9.c?ref=bd6f2c63168e89bede631daf8b673eab16acc747", "patch": "@@ -0,0 +1,29 @@\n+/* Test for printf format extensions using formats from or recommended by\n+   C2X.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu2x -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (u_quad_t uq, unsigned int u, unsigned short us, unsigned char uc,\n+     unsigned long ul, unsigned long long ull, uintmax_t uj, size_t z,\n+     unsigned_ptrdiff_t ut)\n+{\n+  /* Deprecated length modifiers with %b and %B.  */\n+  printf (\"%qb%qB\", uq, uq);\n+  printf (\"%Lb%LB\", ull, ull);\n+  printf (\"%Zb%ZB\", z, z);\n+  /* Use of %B in cases valid for %b.  */\n+  printf (\"%B %hB %hhB %lB %llB %jB %zB %tB\\n\", u, us, uc, ul, ull, uj, z, ut);\n+  printf (\"%*.*llB\\n\", 1, 2, ull);\n+  printf (\"%-B\\n\", u);\n+  printf (\"%#B\\n\", u);\n+  printf (\"%08B\\n\", u);\n+  /* Flags valid on signed conversions only.  */\n+  printf (\"%+B\\n\", u); /* { dg-warning \"flag\" } */\n+  printf (\"% B\\n\", u); /* { dg-warning \"flag\" } */\n+  /* Flags ignored in certain combinations.  */\n+  printf (\"%-08B\\n\", u); /* { dg-warning \"ignored\" } */\n+  printf (\"%08.5B\\n\", u); /* { dg-warning \"ignored\" } */\n+}"}]}