{"sha": "1162730f531d786981f8be60045ca5e0bf276e79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE2MjczMGY1MzFkNzg2OTgxZjhiZTYwMDQ1Y2E1ZTBiZjI3NmU3OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-10-28T19:05:32Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-28T19:05:32Z"}, "message": "i386.md (shift_insn): Rename code attribute from shiftrt_insn.\n\n\t* config/i386/i386.md (shift_insn): Rename code attribute from\n\tshiftrt_insn.  Also handle ashift RTX.\n\t(shift): Rename code attribute from shiftrt.  Also handle ashift RTX.\n\t(vshift): New code attribute.\n\t(<shift_insn>*): Rename from <shiftrt_insn>*. Update asm templates.\n\t(any_lshift): Move and rename code iterator from ...\n\t* config/i386/sse.md (lshift): ... here.\n\t(lshift_insn): Remove code attribute.\n\t(lshift): Remove code attribute.\n\t(vlshr<mode>3): Use lshiftrt RTX.\n\t(vashr<mode>3, ashrv16qi3, ashrv2di3): Use ashiftrt RTX.\n\t(vashl<mode>3, ashlv16qi3): Use ashift RTX.\n\t(avx2_<lshift>v<mode>): Rename from avx2_<shift_insn>v<mode>.  Use\n\tany_lshift code iterator.  Update asm template.\n\t(<shift_insn><mode>3): Macroize insn from lshr<mode>3 and ashl<mode>3\n\tusign any_lshift code iterator.\n\t* config/i386/mmx.md (mmx_<shift_insn><mode>3): Macroize insn from\n\tmmx_lshr<mode>3 and mmx_ashl<mode>3 usign any_lshift code iterator.\n\t* config/i386/i386.c (bdesc_args) <__builtin_ia32_psll>: Update.\n\nFrom-SVN: r180624", "tree": {"sha": "709af97a026b43ffa024a8d52d006f3507868af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/709af97a026b43ffa024a8d52d006f3507868af7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1162730f531d786981f8be60045ca5e0bf276e79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1162730f531d786981f8be60045ca5e0bf276e79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1162730f531d786981f8be60045ca5e0bf276e79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1162730f531d786981f8be60045ca5e0bf276e79/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18232de4dbc48214f26d2d7fc442ef4224afe3b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18232de4dbc48214f26d2d7fc442ef4224afe3b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18232de4dbc48214f26d2d7fc442ef4224afe3b0"}], "stats": {"total": 89, "additions": 33, "deletions": 56}, "files": [{"sha": "1e947947db56d564a4291e1b6c08e6714bd392fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1162730f531d786981f8be60045ca5e0bf276e79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1162730f531d786981f8be60045ca5e0bf276e79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1162730f531d786981f8be60045ca5e0bf276e79", "patch": "@@ -3,15 +3,21 @@\n \t* config/i386/i386.md (shift_insn): Rename code attribute from\n \tshiftrt_insn.  Also handle ashift RTX.\n \t(shift): Rename code attribute from shiftrt.  Also handle ashift RTX.\n+\t(vshift): New code attribute.\n \t(<shift_insn>*): Rename from <shiftrt_insn>*. Update asm templates.\n-\t* config/i386/sse.md (any_lshift): Rename code iterator from lshift.\n+\t(any_lshift): Move and rename code iterator from ...\n+\t* config/i386/sse.md (lshift): ... here.\n \t(lshift_insn): Remove code attribute.\n \t(lshift): Remove code attribute.\n \t(vlshr<mode>3): Use lshiftrt RTX.\n-\t(vashr<mode>3): Use ashiftrt RTX.\n-\t(vashl<mode>3): Use ashift RTX.\n+\t(vashr<mode>3, ashrv16qi3, ashrv2di3): Use ashiftrt RTX.\n+\t(vashl<mode>3, ashlv16qi3): Use ashift RTX.\n \t(avx2_<lshift>v<mode>): Rename from avx2_<shift_insn>v<mode>.  Use\n \tany_lshift code iterator.  Update asm template.\n+\t(<shift_insn><mode>3): Macroize insn from lshr<mode>3 and ashl<mode>3\n+\tusign any_lshift code iterator.\n+\t* config/i386/mmx.md (mmx_<shift_insn><mode>3): Macroize insn from\n+\tmmx_lshr<mode>3 and mmx_ashl<mode>3 usign any_lshift code iterator.\n \t* config/i386/i386.c (bdesc_args) <__builtin_ia32_psll>: Update.\n \n 2011-10-28  Georg-Johann Lay  <avr@gjlay.de>"}, {"sha": "7d720f963b1dec7b74c78557dd39f60339be3cc8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1162730f531d786981f8be60045ca5e0bf276e79/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1162730f531d786981f8be60045ca5e0bf276e79/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1162730f531d786981f8be60045ca5e0bf276e79", "patch": "@@ -772,6 +772,9 @@\n ;; Base name for insn mnemonic.\n (define_code_attr logic [(and \"and\") (ior \"or\") (xor \"xor\")])\n \n+;; Mapping of logic-shift operators\n+(define_code_iterator any_lshift [ashift lshiftrt])\n+\n ;; Mapping of shift-right operators\n (define_code_iterator any_shiftrt [lshiftrt ashiftrt])\n \n@@ -781,6 +784,7 @@\n \n ;; Base name for insn mnemonic.\n (define_code_attr shift [(ashift \"sll\") (lshiftrt \"shr\") (ashiftrt \"sar\")])\n+(define_code_attr vshift [(ashift \"sll\") (lshiftrt \"srl\") (ashiftrt \"sra\")])\n \n ;; Mapping of rotate operators\n (define_code_iterator any_rotate [rotate rotatert])"}, {"sha": "f76834e5ab22a5dcab355d8d419f66788fd0d878", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1162730f531d786981f8be60045ca5e0bf276e79/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1162730f531d786981f8be60045ca5e0bf276e79/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=1162730f531d786981f8be60045ca5e0bf276e79", "patch": "@@ -1037,27 +1037,13 @@\n        (const_string \"0\")))\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"mmx_lshr<mode>3\"\n+(define_insn \"mmx_<shift_insn><mode>3\"\n   [(set (match_operand:MMXMODE248 0 \"register_operand\" \"=y\")\n-        (lshiftrt:MMXMODE248\n+        (any_lshift:MMXMODE248\n \t  (match_operand:MMXMODE248 1 \"register_operand\" \"0\")\n \t  (match_operand:SI 2 \"nonmemory_operand\" \"yN\")))]\n   \"TARGET_MMX\"\n-  \"psrl<mmxvecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set (attr \"length_immediate\")\n-     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-       (const_string \"1\")\n-       (const_string \"0\")))\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_ashl<mode>3\"\n-  [(set (match_operand:MMXMODE248 0 \"register_operand\" \"=y\")\n-        (ashift:MMXMODE248\n-\t  (match_operand:MMXMODE248 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"yN\")))]\n-  \"TARGET_MMX\"\n-  \"psll<mmxvecsize>\\t{%2, %0|%0, %2}\"\n+  \"p<vshift><mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxshft\")\n    (set (attr \"length_immediate\")\n      (if_then_else (match_operand 2 \"const_int_operand\" \"\")"}, {"sha": "b444b43e30f6a4ebed8ce228d63fcbe961c85a27", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 17, "deletions": 36, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1162730f531d786981f8be60045ca5e0bf276e79/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1162730f531d786981f8be60045ca5e0bf276e79/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1162730f531d786981f8be60045ca5e0bf276e79", "patch": "@@ -167,9 +167,6 @@\n    (V4SI \"vec\") (V8SI \"avx2\")\n    (V2DI \"vec\") (V4DI \"avx2\")])\n \n-;; Mapping of logic-shift operators\n-(define_code_iterator any_lshift [ashift lshiftrt])\n-\n (define_mode_attr ssedoublemode\n   [(V16HI \"V16SI\") (V8HI \"V8SI\")])\n \n@@ -5826,34 +5823,15 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"lshr<mode>3\"\n+(define_insn \"<shift_insn><mode>3\"\n   [(set (match_operand:VI248_AVX2 0 \"register_operand\" \"=x,x\")\n-\t(lshiftrt:VI248_AVX2\n+\t(any_lshift:VI248_AVX2\n \t  (match_operand:VI248_AVX2 1 \"register_operand\" \"0,x\")\n \t  (match_operand:SI 2 \"nonmemory_operand\" \"xN,xN\")))]\n   \"TARGET_SSE2\"\n   \"@\n-   psrl<ssemodesuffix>\\t{%2, %0|%0, %2}\n-   vpsrl<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sseishft\")\n-   (set (attr \"length_immediate\")\n-     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-       (const_string \"1\")\n-       (const_string \"0\")))\n-   (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n-(define_insn \"ashl<mode>3\"\n-  [(set (match_operand:VI248_AVX2 0 \"register_operand\" \"=x,x\")\n-\t(ashift:VI248_AVX2\n-\t  (match_operand:VI248_AVX2 1 \"register_operand\" \"0,x\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN,xN\")))]\n-  \"TARGET_SSE2\"\n-  \"@\n-   psll<ssemodesuffix>\\t{%2, %0|%0, %2}\n-   vpsll<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   p<vshift><ssemodesuffix>\\t{%2, %0|%0, %2}\n+   v<vshift><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseishft\")\n    (set (attr \"length_immediate\")\n@@ -11406,9 +11384,10 @@\n \n ;; SSE2 doesn't have some shift varients, so define versions for XOP\n (define_expand \"ashlv16qi3\"\n-  [(match_operand:V16QI 0 \"register_operand\" \"\")\n-   (match_operand:V16QI 1 \"register_operand\" \"\")\n-   (match_operand:SI 2 \"nonmemory_operand\" \"\")]\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n+\t(ashift:V16QI\n+\t  (match_operand:V16QI 1 \"register_operand\" \"\")\n+\t  (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n   \"TARGET_XOP\"\n {\n   rtvec vs = rtvec_alloc (16);\n@@ -11442,9 +11421,10 @@\n })\n \n (define_expand \"ashrv16qi3\"\n-  [(match_operand:V16QI 0 \"register_operand\" \"\")\n-   (match_operand:V16QI 1 \"register_operand\" \"\")\n-   (match_operand:SI 2 \"nonmemory_operand\" \"\")]\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n+\t(ashiftrt:V16QI\n+\t  (match_operand:V16QI 1 \"register_operand\" \"\")\n+\t  (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n   \"TARGET_XOP\"\n {\n   rtvec vs = rtvec_alloc (16);\n@@ -11473,9 +11453,10 @@\n })\n \n (define_expand \"ashrv2di3\"\n-  [(match_operand:V2DI 0 \"register_operand\" \"\")\n-   (match_operand:V2DI 1 \"register_operand\" \"\")\n-   (match_operand:DI 2 \"nonmemory_operand\" \"\")]\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n+\t(ashiftrt:V2DI\n+\t  (match_operand:V2DI 1 \"register_operand\" \"\")\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"\")))]\n   \"TARGET_XOP\"\n {\n   rtvec vs = rtvec_alloc (2);\n@@ -12484,7 +12465,7 @@\n \t  (match_operand:VI48_AVX2 1 \"register_operand\" \"x\")\n \t  (match_operand:VI48_AVX2 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX2\"\n-  \"vp<shift>v<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vp<vshift>v<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])"}]}