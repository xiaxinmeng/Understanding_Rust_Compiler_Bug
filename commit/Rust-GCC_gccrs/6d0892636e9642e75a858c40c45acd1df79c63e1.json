{"sha": "6d0892636e9642e75a858c40c45acd1df79c63e1", "node_id": "C_kwDOANBUbNoAKDZkMDg5MjYzNmU5NjQyZTc1YTg1OGM0MGM0NWFjZDFkZjc5YzYzZTE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-06T14:45:15Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-06T15:35:28Z"}, "message": "Add support for wildcard patterns within MatchExprs\n\nGCC CASE_LABEL_EXPR's contain operand 0 and 1, operand 0 is used for the\nlow value of a case label and operand 1 for a high value. So with this\nCASE_LABEL_EXPR is is possible to support a range of values from low->high\nif set apropriately, but for the wildcard case this is effectively a\ndefault case which means we set both operand 0 and 1 to NULL_TREE.\n\nFixes #853", "tree": {"sha": "33ecc66b2e24693d103e9531a8d336ef49d7e896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33ecc66b2e24693d103e9531a8d336ef49d7e896"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d0892636e9642e75a858c40c45acd1df79c63e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0892636e9642e75a858c40c45acd1df79c63e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0892636e9642e75a858c40c45acd1df79c63e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0892636e9642e75a858c40c45acd1df79c63e1/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63"}], "stats": {"total": 141, "additions": 113, "deletions": 28}, "files": [{"sha": "5e43f5a197d423b1eb02798a14329898b48bc69c", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=6d0892636e9642e75a858c40c45acd1df79c63e1", "patch": "@@ -275,19 +275,12 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n       tree case_label = ctx->get_backend ()->label (\n \tfndecl, \"\" /* empty creates an artificial label */, arm_locus);\n \n-      // not sure if we need to add this to the block or if the CASE_LABEL_EXPR\n-      // does this implicitly\n-      //\n-      // tree case_label_decl_statement\n-      //   = ctx->get_backend ()->label_definition_statement (case_label);\n-\n       // setup the bindings for the block\n       for (auto &kase_pattern : kase_arm.get_patterns ())\n \t{\n \t  tree switch_kase_expr\n \t    = CompilePatternCaseLabelExpr::Compile (kase_pattern.get (),\n \t\t\t\t\t\t    case_label, ctx);\n-\t  // ctx->add_statement (case_label_decl_statement);\n \t  ctx->add_statement (switch_kase_expr);\n \n \t  CompilePatternBindings::Compile (kase_pattern.get (),"}, {"sha": "27ee48723a597e9c25f954986d6af13d417a3894", "filename": "gcc/rust/backend/rust-compile-pattern.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc?ref=6d0892636e9642e75a858c40c45acd1df79c63e1", "patch": "@@ -77,6 +77,15 @@ CompilePatternCaseLabelExpr::visit (HIR::TupleStructPattern &pattern)\n   CompilePatternCaseLabelExpr::visit (pattern.get_path ());\n }\n \n+void\n+CompilePatternCaseLabelExpr::visit (HIR::WildcardPattern &pattern)\n+{\n+  // operand 0 being NULL_TREE signifies this is the default case label see:\n+  // tree.def for documentation for CASE_LABEL_EXPR\n+  case_label_expr\n+    = build_case_label (NULL_TREE, NULL_TREE, associated_case_label);\n+}\n+\n // setup the bindings\n \n void"}, {"sha": "b12ea93007e29f7215b12210f3a572e47ff4ff78", "filename": "gcc/rust/backend/rust-compile-pattern.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h?ref=6d0892636e9642e75a858c40c45acd1df79c63e1", "patch": "@@ -40,6 +40,8 @@ class CompilePatternCaseLabelExpr : public HIRCompileBase\n \n   void visit (HIR::TupleStructPattern &pattern) override;\n \n+  void visit (HIR::WildcardPattern &pattern) override;\n+\n private:\n   CompilePatternCaseLabelExpr (Context *ctx, tree associated_case_label)\n     : HIRCompileBase (ctx), case_label_expr (error_mark_node),"}, {"sha": "4bf3c51caefe56bd85c4072282fedbf899165432", "filename": "gcc/rust/hir/rust-ast-lower-pattern.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc?ref=6d0892636e9642e75a858c40c45acd1df79c63e1", "patch": "@@ -22,6 +22,23 @@\n namespace Rust {\n namespace HIR {\n \n+void\n+ASTLoweringPattern::visit (AST::IdentifierPattern &pattern)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, pattern.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  std::unique_ptr<Pattern> to_bind;\n+  translated\n+    = new HIR::IdentifierPattern (mapping, pattern.get_ident (),\n+\t\t\t\t  pattern.get_locus (), pattern.get_is_ref (),\n+\t\t\t\t  pattern.get_is_mut () ? Mutability::Mut\n+\t\t\t\t\t\t\t: Mutability::Imm,\n+\t\t\t\t  std::move (to_bind));\n+}\n+\n void\n ASTLoweringPattern::visit (AST::PathInExpression &pattern)\n {\n@@ -135,5 +152,16 @@ ASTLoweringPattern::visit (AST::StructPattern &pattern)\n   translated = new HIR::StructPattern (mapping, *path, std::move (elems));\n }\n \n+void\n+ASTLoweringPattern::visit (AST::WildcardPattern &pattern)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, pattern.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::WildcardPattern (mapping, pattern.get_locus ());\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "60a3ad10bd034c19e0ec5152afa174cc19a10131", "filename": "gcc/rust/hir/rust-ast-lower-pattern.h", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h?ref=6d0892636e9642e75a858c40c45acd1df79c63e1", "patch": "@@ -48,28 +48,16 @@ class ASTLoweringPattern : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n-  void visit (AST::IdentifierPattern &pattern) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, pattern.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    std::unique_ptr<Pattern> to_bind;\n-    translated\n-      = new HIR::IdentifierPattern (mapping, pattern.get_ident (),\n-\t\t\t\t    pattern.get_locus (), pattern.get_is_ref (),\n-\t\t\t\t    pattern.get_is_mut () ? Mutability::Mut\n-\t\t\t\t\t\t\t  : Mutability::Imm,\n-\t\t\t\t    std::move (to_bind));\n-  }\n+  void visit (AST::IdentifierPattern &pattern) override;\n \n   void visit (AST::PathInExpression &pattern) override;\n \n   void visit (AST::StructPattern &pattern) override;\n \n   void visit (AST::TupleStructPattern &pattern) override;\n \n+  void visit (AST::WildcardPattern &pattern) override;\n+\n private:\n   ASTLoweringPattern () : translated (nullptr) {}\n "}, {"sha": "631bc86840a40d3dffeb2d713c21982fcae79ca9", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=6d0892636e9642e75a858c40c45acd1df79c63e1", "patch": "@@ -1294,7 +1294,7 @@ class TypeCheckExpr : public TypeCheckBase\n \tfor (auto &pattern : kase_arm.get_patterns ())\n \t  {\n \t    TyTy::BaseType *kase_arm_ty\n-\t      = TypeCheckPattern::Resolve (pattern.get ());\n+\t      = TypeCheckPattern::Resolve (pattern.get (), scrutinee_tyty);\n \n \t    TyTy::BaseType *checked_kase = scrutinee_tyty->unify (kase_arm_ty);\n \t    if (checked_kase->get_kind () == TyTy::TypeKind::ERROR)"}, {"sha": "bc6631201a584030e6025b884ae14c1df2ed318b", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc?ref=6d0892636e9642e75a858c40c45acd1df79c63e1", "patch": "@@ -219,5 +219,14 @@ TypeCheckPattern::visit (HIR::StructPattern &pattern)\n     }\n }\n \n+void\n+TypeCheckPattern::visit (HIR::WildcardPattern &pattern)\n+{\n+  // wildcard patterns within the MatchArm's are simply just the same type as\n+  // the parent\n+  infered = parent->clone ();\n+  infered->set_ref (pattern.get_pattern_mappings ().get_hirid ());\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "a5e542dcd729cb5d2b04b2984cc956b33da5af23", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h?ref=6d0892636e9642e75a858c40c45acd1df79c63e1", "patch": "@@ -30,14 +30,14 @@ class TypeCheckPattern : public TypeCheckBase\n   using Rust::Resolver::TypeCheckBase::visit;\n \n public:\n-  static TyTy::BaseType *Resolve (HIR::Pattern *pattern)\n+  static TyTy::BaseType *Resolve (HIR::Pattern *pattern, TyTy::BaseType *parent)\n   {\n-    TypeCheckPattern resolver;\n+    TypeCheckPattern resolver (parent);\n     pattern->accept_vis (resolver);\n \n-    // FIXME need to check how we do mappings here\n     if (resolver.infered == nullptr)\n-      return new TyTy::ErrorType (1);\n+      return new TyTy::ErrorType (\n+\tpattern->get_pattern_mappings ().get_hirid ());\n \n     return resolver.infered;\n   }\n@@ -48,10 +48,15 @@ class TypeCheckPattern : public TypeCheckBase\n \n   void visit (HIR::TupleStructPattern &pattern) override;\n \n+  void visit (HIR::WildcardPattern &pattern) override;\n+\n private:\n-  TypeCheckPattern () : TypeCheckBase (), infered (nullptr) {}\n+  TypeCheckPattern (TyTy::BaseType *parent)\n+    : TypeCheckBase (), infered (nullptr), parent (parent)\n+  {}\n \n   TyTy::BaseType *infered;\n+  TyTy::BaseType *parent;\n };\n \n } // namespace Resolver"}, {"sha": "3d1fa0cc5e877ab297f904fe97be67d03314eff2", "filename": "gcc/testsuite/rust/execute/torture/match3.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0892636e9642e75a858c40c45acd1df79c63e1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch3.rs?ref=6d0892636e9642e75a858c40c45acd1df79c63e1", "patch": "@@ -0,0 +1,51 @@\n+// { dg-output \"Foo::A\\nwildcard\\nwildcard\\nFoo::D 20 80\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum Foo {\n+    A,\n+    B,\n+    C(char),\n+    D { x: i64, y: i64 },\n+}\n+\n+fn inspect(f: Foo) {\n+    match f {\n+        Foo::A => unsafe {\n+            let a = \"Foo::A\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+        Foo::D { x, y } => unsafe {\n+            let a = \"Foo::D %i %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, x, y);\n+        },\n+        _ => unsafe {\n+            let a = \"wildcard\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo::A;\n+    let b = Foo::B;\n+    let c = Foo::C('x');\n+    let d = Foo::D { x: 20, y: 80 };\n+\n+    inspect(a);\n+    inspect(b);\n+    inspect(c);\n+    inspect(d);\n+\n+    0\n+}"}]}