{"sha": "c7199fb6e694d1a0964351200648c24c3ee97973", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcxOTlmYjZlNjk0ZDFhMDk2NDM1MTIwMDY0OGMyNGMzZWU5Nzk3Mw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-06-15T05:48:45Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-06-17T08:03:26Z"}, "message": "Optimize V16QI/V32QI/V64QI shift by constant.\n\ngcc/ChangeLog:\n\tPR target/95524\n\t* config/i386/i386-expand.c\n\t(ix86_expand_vec_shift_qihi_constant): New function.\n\t* config/i386/i386-protos.h\n\t(ix86_expand_vec_shift_qihi_constant): Declare.\n\t* config/i386/sse.md (<shift_insn><mode>3): Optimize shift\n\tV*QImode by constant.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/i386/avx2-shiftqihi-constant-1.c: New test.\n\t* gcc.target/i386/avx2-shiftqihi-constant-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-shiftqihi-constant-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-shiftqihi-constant-2.c: Ditto.\n\t* gcc.target/i386/sse2-shiftqihi-constant-1.c: Ditto.\n\t* gcc.target/i386/sse2-shiftqihi-constant-2.c: Ditto.", "tree": {"sha": "7e65b3bf5db037efe16f199599ec519325a5d988", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e65b3bf5db037efe16f199599ec519325a5d988"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7199fb6e694d1a0964351200648c24c3ee97973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7199fb6e694d1a0964351200648c24c3ee97973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7199fb6e694d1a0964351200648c24c3ee97973", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7199fb6e694d1a0964351200648c24c3ee97973/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fc312a98e9b06eac9e865f511a327b264056d66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fc312a98e9b06eac9e865f511a327b264056d66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fc312a98e9b06eac9e865f511a327b264056d66"}], "stats": {"total": 382, "additions": 381, "deletions": 1}, "files": [{"sha": "d7077980f9b048e6850afba621ab66dfcd1bef7c", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=c7199fb6e694d1a0964351200648c24c3ee97973", "patch": "@@ -19532,6 +19532,105 @@ ix86_expand_vecmul_qihi (rtx dest, rtx op1, rtx op2)\n   return true;\n }\n \n+/* Expand a vector operation shift by constant for a V*QImode in terms of the\n+   same operation on V*HImode. Return true if success. */\n+bool\n+ix86_expand_vec_shift_qihi_constant (enum rtx_code code, rtx dest, rtx op1, rtx op2)\n+{\n+  machine_mode qimode, himode;\n+  unsigned int and_constant, xor_constant;\n+  HOST_WIDE_INT shift_amount;\n+  rtx vec_const_and, vec_const_xor;\n+  rtx tmp, op1_subreg;\n+  rtx (*gen_shift) (rtx, rtx, rtx);\n+  rtx (*gen_and) (rtx, rtx, rtx);\n+  rtx (*gen_xor) (rtx, rtx, rtx);\n+  rtx (*gen_sub) (rtx, rtx, rtx);\n+\n+  /* Only optimize shift by constant.  */\n+  if (!CONST_INT_P (op2))\n+    return false;\n+\n+  qimode = GET_MODE (dest);\n+  shift_amount = INTVAL (op2);\n+  /* Do nothing when shift amount greater equal 8.  */\n+  if (shift_amount > 7)\n+    return false;\n+\n+  gcc_assert (code == ASHIFT || code == ASHIFTRT || code == LSHIFTRT);\n+  /* Record sign bit.  */\n+  xor_constant = 1 << (8 - shift_amount - 1);\n+\n+  /* Zero upper/lower bits shift from left/right element.  */\n+  and_constant\n+    = (code == ASHIFT ? 256 - (1 << shift_amount)\n+       : (1 << (8 - shift_amount)) - 1);\n+\n+  switch (qimode)\n+    {\n+    case V16QImode:\n+      himode = V8HImode;\n+      gen_shift =\n+\t((code == ASHIFT)\n+\t ? gen_ashlv8hi3\n+\t : (code == ASHIFTRT) ? gen_ashrv8hi3 : gen_lshrv8hi3);\n+      gen_and = gen_andv16qi3;\n+      gen_xor = gen_xorv16qi3;\n+      gen_sub = gen_subv16qi3;\n+      break;\n+    case V32QImode:\n+      himode = V16HImode;\n+      gen_shift =\n+\t((code == ASHIFT)\n+\t ? gen_ashlv16hi3\n+\t : (code == ASHIFTRT) ? gen_ashrv16hi3 : gen_lshrv16hi3);\n+      gen_and = gen_andv32qi3;\n+      gen_xor = gen_xorv32qi3;\n+      gen_sub = gen_subv32qi3;\n+      break;\n+    case V64QImode:\n+      himode = V32HImode;\n+      gen_shift =\n+\t((code == ASHIFT)\n+\t ? gen_ashlv32hi3\n+\t : (code == ASHIFTRT) ? gen_ashrv32hi3 : gen_lshrv32hi3);\n+      gen_and = gen_andv64qi3;\n+      gen_xor = gen_xorv64qi3;\n+      gen_sub = gen_subv64qi3;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  tmp = gen_reg_rtx (himode);\n+  vec_const_and = gen_reg_rtx (qimode);\n+  op1_subreg = lowpart_subreg (himode, op1, qimode);\n+\n+  /* For ASHIFT and LSHIFTRT, perform operation like\n+     vpsllw/vpsrlw $shift_amount, %op1, %dest.\n+     vpand %vec_const_and, %dest.  */\n+  emit_insn (gen_shift (tmp, op1_subreg, op2));\n+  emit_move_insn (dest, simplify_gen_subreg (qimode, tmp, himode, 0));\n+  emit_move_insn (vec_const_and,\n+\t\t  ix86_build_const_vector (qimode, true,\n+\t\t\t\t\t   GEN_INT (and_constant)));\n+  emit_insn (gen_and (dest, dest, vec_const_and));\n+\n+  /* For ASHIFTRT, perform extra operation like\n+     vpxor %vec_const_xor, %dest, %dest\n+     vpsubb %vec_const_xor, %dest, %dest  */\n+  if (code == ASHIFTRT)\n+    {\n+      vec_const_xor = gen_reg_rtx (qimode);\n+      emit_move_insn (vec_const_xor,\n+\t\t      ix86_build_const_vector (qimode, true,\n+\t\t\t\t\t       GEN_INT (xor_constant)));\n+      emit_insn (gen_xor (dest, dest, vec_const_xor));\n+      emit_insn (gen_sub (dest, dest, vec_const_xor));\n+    }\n+  return true;\n+}\n+\n /* Expand a vector operation CODE for a V*QImode in terms of the\n    same operation on V*HImode.  */\n "}, {"sha": "7c2ce618f3fcd142617a1278e6ad8ab8b6943b00", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=c7199fb6e694d1a0964351200648c24c3ee97973", "patch": "@@ -206,6 +206,7 @@ extern void ix86_expand_round_sse4 (rtx, rtx);\n \n extern bool ix86_expand_vecmul_qihi (rtx, rtx, rtx);\n extern void ix86_expand_vecop_qihi (enum rtx_code, rtx, rtx, rtx);\n+extern bool ix86_expand_vec_shift_qihi_constant (enum rtx_code, rtx, rtx, rtx);\n \n extern rtx ix86_split_stack_guard (void);\n "}, {"sha": "431571a4bc11571a605228c07ff7d1f449a69a97", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c7199fb6e694d1a0964351200648c24c3ee97973", "patch": "@@ -19863,7 +19863,8 @@\n       gen = (<CODE> == LSHIFTRT ? gen_xop_shlv16qi3 : gen_xop_shav16qi3);\n       emit_insn (gen (operands[0], operands[1], tmp));\n     }\n-  else\n+  else if (!ix86_expand_vec_shift_qihi_constant (<CODE>, operands[0],\n+\t\t\t\t\t\toperands[1], operands[2]))\n     ix86_expand_vecop_qihi (<CODE>, operands[0], operands[1], operands[2]);\n   DONE;\n })"}, {"sha": "72065039581265f6c9851f8b4214d7c38530fd78", "filename": "gcc/testsuite/gcc.target/i386/avx2-shiftqihi-constant-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-shiftqihi-constant-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-shiftqihi-constant-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-shiftqihi-constant-1.c?ref=c7199fb6e694d1a0964351200648c24c3ee97973", "patch": "@@ -0,0 +1,31 @@\n+/* PR target/95524 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+/* { dg-final { scan-assembler-times \"vpand\\[^\\n\\]*%ymm\" 3 } }  */\n+typedef char v32qi  __attribute__ ((vector_size (32)));\n+typedef unsigned char v32uqi  __attribute__ ((vector_size (32)));\n+\n+__attribute__((noipa)) v32qi\n+foo_ashiftrt_256 (v32qi a)\n+{\n+  return a >> 2;\n+}\n+/* { dg-final { scan-assembler-times \"vpsraw\\[^\\n\\]*%ymm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpxor\\[^\\n\\]*%ymm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubb\\[^\\n\\]*%ymm\" 1 } } */\n+\n+__attribute__((noipa)) v32qi\n+foo_ashift_256 (v32qi a)\n+{\n+  return a << 7;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpsllw\\[^\\n\\]*%ymm\" 1 } }  */\n+\n+__attribute__((noipa)) v32uqi\n+foo_lshiftrt_256 (v32uqi a)\n+{\n+  return a >> 2;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[^\\n\\]*%ymm\" 1 } }  */"}, {"sha": "509d5a8d762b3a43237b2c4905767db8e4083972", "filename": "gcc/testsuite/gcc.target/i386/avx2-shiftqihi-constant-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-shiftqihi-constant-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-shiftqihi-constant-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-shiftqihi-constant-2.c?ref=c7199fb6e694d1a0964351200648c24c3ee97973", "patch": "@@ -0,0 +1,62 @@\n+/* PR target/95524 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -Wno-shift-count-overflow\" } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx512bw-check.h\"\n+#endif\n+\n+#include CHECK\n+\n+#ifndef TEST\n+#define TEST avx512bw_test\n+#endif\n+\n+typedef char v64qi  __attribute__ ((vector_size (64)));\n+typedef unsigned char v64uqi  __attribute__ ((vector_size (64)));\n+\n+#define TEST_SHIFT(N)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      int i;\t\t\t\t\t\t\\\n+      for (i = 0; i < 64; i++)\t\t\t\t\\\n+\texp1.a[i] = op1.a[i] << N;\t\t\t\\\n+      res1.x = (__m512i) (((v64qi) op1.x) << N);\t\\\n+      if (check_union512i_b (res1, exp1.a))\t\t\\\n+\tabort ();\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      for (i = 0; i < 64; i++)\t\t\t\t\\\n+\texp1.a[i] = op1.a[i] >> N;\t\t\t\\\n+      res1.x = (__m512i) (((v64qi) op1.x) >> N);\t\\\n+      if (check_union512i_b (res1, exp1.a))\t\t\\\n+\tabort ();\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      for (i = 0; i < 64; i++)\t\t\t\t\\\n+\texp2.a[i] = op2.a[i] >> N;\t\t\t\\\n+      res2.x = (__m512i) (((v64uqi) op2.x >> N));\t\\\n+      if (check_union512i_ub (res2, exp2.a))\t\t\\\n+\tabort ();\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+static void\n+TEST (void)\n+{\n+  union512i_b op1, exp1, res1;\n+  union512i_ub op2, exp2, res2;\n+  for (int i = 0; i != 64; i++)\n+    {\n+      op2.a[i] = i * i;\n+      op1.a[i] = i * i + 200 * i;\n+    }\n+  TEST_SHIFT (0);\n+  TEST_SHIFT (1);\n+  TEST_SHIFT (2);\n+  TEST_SHIFT (3);\n+  TEST_SHIFT (4);\n+  TEST_SHIFT (5);\n+  TEST_SHIFT (6);\n+  TEST_SHIFT (7);\n+  TEST_SHIFT (8);\n+}\n+"}, {"sha": "78bf5d336896e474fe2b2dce2a6f5e7e81417d07", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-shiftqihi-constant-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-shiftqihi-constant-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-shiftqihi-constant-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-shiftqihi-constant-1.c?ref=c7199fb6e694d1a0964351200648c24c3ee97973", "patch": "@@ -0,0 +1,31 @@\n+/* PR target/95524 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-final { scan-assembler-times \"vpand\\[^\\n\\]*%zmm\" 3 } }  */\n+typedef char v64qi  __attribute__ ((vector_size (64)));\n+typedef unsigned char v64uqi  __attribute__ ((vector_size (64)));\n+\n+__attribute__((noipa)) v64qi\n+foo_ashiftrt_512 (v64qi a)\n+{\n+  return a >> 2;\n+}\n+/* { dg-final { scan-assembler-times \"vpsraw\\[^\\n\\]*%zmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpxor\\[^\\n\\]*%zmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubb\\[^\\n\\]*%zmm\" 1 } } */\n+\n+__attribute__((noipa)) v64qi\n+foo_ashift_512 (v64qi a)\n+{\n+  return a << 7;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpsllw\\[^\\n\\]*%zmm\" 1 } }  */\n+\n+__attribute__((noipa)) v64uqi\n+foo_lshiftrt_512 (v64uqi a)\n+{\n+  return a >> 2;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[^\\n\\]*%zmm\" 1 } }  */"}, {"sha": "d6f7934f3b474489abdd7f752178b007c7e10891", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-shiftqihi-constant-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-shiftqihi-constant-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-shiftqihi-constant-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-shiftqihi-constant-2.c?ref=c7199fb6e694d1a0964351200648c24c3ee97973", "patch": "@@ -0,0 +1,62 @@\n+/* PR target/95524 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx2 -Wno-shift-count-overflow\" } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx2-check.h\"\n+#endif\n+\n+#include CHECK\n+\n+#ifndef TEST\n+#define TEST avx2_test\n+#endif\n+\n+typedef char v32qi  __attribute__ ((vector_size (32)));\n+typedef unsigned char v32uqi  __attribute__ ((vector_size (32)));\n+\n+#define TEST_SHIFT(N)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      int i;\t\t\t\t\t\t\\\n+      for (i = 0; i < 32; i++)\t\t\t\t\\\n+\texp1.a[i] = op1.a[i] << N;\t\t\t\\\n+      res1.x = (__m256i) (((v32qi) op1.x) << N);\t\\\n+      if (check_union256i_b (res1, exp1.a))\t\t\\\n+\tabort ();\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      for (i = 0; i < 32; i++)\t\t\t\t\\\n+\texp1.a[i] = op1.a[i] >> N;\t\t\t\\\n+      res1.x = (__m256i) (((v32qi) op1.x) >> N);\t\\\n+      if (check_union256i_b (res1, exp1.a))\t\t\\\n+\tabort ();\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      for (i = 0; i < 32; i++)\t\t\t\t\\\n+\texp2.a[i] = op2.a[i] >> N;\t\t\t\\\n+      res2.x = (__m256i) (((v32uqi) op2.x >> N));\t\\\n+      if (check_union256i_ub (res2, exp2.a))\t\t\\\n+\tabort ();\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+static void\n+TEST (void)\n+{\n+  union256i_b op1, exp1, res1;\n+  union256i_ub op2, exp2, res2;\n+  for (int i = 0; i != 32; i++)\n+    {\n+      op2.a[i] = i * i;\n+      op1.a[i] = i * i + 200 * i;\n+    }\n+  TEST_SHIFT (0);\n+  TEST_SHIFT (1);\n+  TEST_SHIFT (2);\n+  TEST_SHIFT (3);\n+  TEST_SHIFT (4);\n+  TEST_SHIFT (5);\n+  TEST_SHIFT (6);\n+  TEST_SHIFT (7);\n+  TEST_SHIFT (8);\n+}\n+"}, {"sha": "f1c68cb2972d8dec083522c40c50c3d2bb1613cb", "filename": "gcc/testsuite/gcc.target/i386/sse2-shiftqihi-constant-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-shiftqihi-constant-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-shiftqihi-constant-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-shiftqihi-constant-1.c?ref=c7199fb6e694d1a0964351200648c24c3ee97973", "patch": "@@ -0,0 +1,31 @@\n+/* PR target/95524 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-final { scan-assembler-times \"pand\\[^\\n\\]*%xmm\" 3 { xfail *-*-* } } } */\n+typedef char v16qi  __attribute__ ((vector_size (16)));\n+typedef unsigned char v16uqi  __attribute__ ((vector_size (16)));\n+\n+__attribute__((noipa)) v16qi\n+foo_ashiftrt_128 (v16qi a)\n+{\n+  return a >> 2;\n+}\n+/* { dg-final { scan-assembler-times \"psraw\\[^\\n\\]*%xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"pxor\\[^\\n\\]*%xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"psubb\\[^\\n\\]*%xmm\" 1 } } */\n+\n+__attribute__((noipa)) v16qi\n+foo_ashift_128 (v16qi a)\n+{\n+  return a << 7;\n+}\n+\n+/* { dg-final { scan-assembler-times \"psllw\\[^\\n\\]*%xmm\" 1 { xfail *-*-* } } } */\n+\n+__attribute__((noipa)) v16uqi\n+foo_lshiftrt_128 (v16uqi a)\n+{\n+  return a >> 2;\n+}\n+\n+/* { dg-final { scan-assembler-times \"psrlw\\[^\\n\\]*%xmm\" 1 } }  */"}, {"sha": "d95171f7a47bb48fccc898653a24fbbf962416a5", "filename": "gcc/testsuite/gcc.target/i386/sse2-shiftqihi-constant-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-shiftqihi-constant-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7199fb6e694d1a0964351200648c24c3ee97973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-shiftqihi-constant-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-shiftqihi-constant-2.c?ref=c7199fb6e694d1a0964351200648c24c3ee97973", "patch": "@@ -0,0 +1,62 @@\n+/* PR target/95524 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2 -Wno-shift-count-overflow\" } */\n+\n+#ifndef CHECK\n+#define CHECK \"sse2-check.h\"\n+#endif\n+\n+#include CHECK\n+\n+#ifndef TEST\n+#define TEST sse2_test\n+#endif\n+\n+typedef char v16qi  __attribute__ ((vector_size (16)));\n+typedef unsigned char v16uqi  __attribute__ ((vector_size (16)));\n+\n+#define TEST_SHIFT(N)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      int i;\t\t\t\t\t\t\\\n+      for (i = 0; i < 16; i++)\t\t\t\t\\\n+\texp1.a[i] = op1.a[i] << N;\t\t\t\\\n+      res1.x = (__m128i) (((v16qi) op1.x) << N);\t\\\n+      if (check_union128i_b (res1, exp1.a))\t\t\\\n+\tabort ();\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      for (i = 0; i < 16; i++)\t\t\t\t\\\n+\texp1.a[i] = op1.a[i] >> N;\t\t\t\\\n+      res1.x = (__m128i) (((v16qi) op1.x) >> N);\t\\\n+      if (check_union128i_b (res1, exp1.a))\t\t\\\n+\tabort ();\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      for (i = 0; i < 16; i++)\t\t\t\t\\\n+\texp2.a[i] = op2.a[i] >> N;\t\t\t\\\n+      res2.x = (__m128i) (((v16uqi) op2.x >> N));\t\\\n+      if (check_union128i_ub (res2, exp2.a))\t\t\\\n+\tabort ();\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b op1, exp1, res1;\n+  union128i_ub op2, exp2, res2;\n+  for (int i = 0; i != 16; i++)\n+    {\n+      op2.a[i] = i * i;\n+      op1.a[i] = i * i + 200 * i;\n+    }\n+  TEST_SHIFT (0);\n+  TEST_SHIFT (1);\n+  TEST_SHIFT (2);\n+  TEST_SHIFT (3);\n+  TEST_SHIFT (4);\n+  TEST_SHIFT (5);\n+  TEST_SHIFT (6);\n+  TEST_SHIFT (7);\n+  TEST_SHIFT (8);\n+}\n+"}]}