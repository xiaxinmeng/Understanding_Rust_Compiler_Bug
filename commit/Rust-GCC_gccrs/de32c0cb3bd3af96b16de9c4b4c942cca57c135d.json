{"sha": "de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUzMmMwY2IzYmQzYWY5NmIxNmRlOWM0YjRjOTQyY2NhNTdjMTM1ZA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-21T20:28:18Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-21T20:28:18Z"}, "message": "Makefile.in: Update.\n\n\t* Makefile.in: Update.\n\t* common.opt: New switches.\n\t* opts.c: Include diagnostic.h.\n\t(common_handle_option): Handle new switches.\n\t* toplev.c (flag_loop_optimize, flag_crossjumping, flag_if_conversion,\n\tflag_if_conversion2, flag_delete_null_pointer_checks,\n\tflag_rerun_cse_after_loop): Make extern.\n\t(flag_dummy): New.\n\t(f_options): Update to use flag_dummy for moved options.\n\t(decode_f_option): Some switches moved to opts.c.\n\t* toplev.h (flag_loop_optimize, flag_crossjumping, flag_if_conversion,\n\tflag_if_conversion2, flag_delete_null_pointer_checks,\n\tflag_rerun_cse_after_loop, flag_keep_static_consts, flag_peel_loops,\n\tflag_tracer, flag_thread_jumps, flag_unroll_loops,\n\tflag_unroll_all_loops, flag_unswitch_loops): New.\nf:\n\t* lang.opt: Add -fpreprocessed.\n\t* top.c (ffe_handle_option): Handle it.\n\nFrom-SVN: r68315", "tree": {"sha": "1d774210e2afbbd285aeb43942e8429dc6505a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d774210e2afbbd285aeb43942e8429dc6505a27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25abc0a5efa834a9a39d44f942d3bc3cc5480771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25abc0a5efa834a9a39d44f942d3bc3cc5480771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25abc0a5efa834a9a39d44f942d3bc3cc5480771"}], "stats": {"total": 608, "additions": 520, "deletions": 88}, "files": [{"sha": "99b215d169c86cc676f7d1240378cc2a585e2551", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "patch": "@@ -1,3 +1,21 @@\n+2003-06-21  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Makefile.in: Update.\n+\t* common.opt: New switches.\n+\t* opts.c: Include diagnostic.h.\n+\t(common_handle_option): Handle new switches.\n+\t* toplev.c (flag_loop_optimize, flag_crossjumping, flag_if_conversion,\n+\tflag_if_conversion2, flag_delete_null_pointer_checks,\n+\tflag_rerun_cse_after_loop): Make extern.\n+\t(flag_dummy): New.\n+\t(f_options): Update to use flag_dummy for moved options.\n+\t(decode_f_option): Some switches moved to opts.c.\n+\t* toplev.h (flag_loop_optimize, flag_crossjumping, flag_if_conversion,\n+\tflag_if_conversion2, flag_delete_null_pointer_checks,\n+\tflag_rerun_cse_after_loop, flag_keep_static_consts, flag_peel_loops,\n+\tflag_tracer, flag_thread_jumps, flag_unroll_loops,\n+\tflag_unroll_all_loops, flag_unswitch_loops): New.\n+\n Sat Jun 21 13:41:00 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (ix86_va_arg): Fix allocation of temporary slot."}, {"sha": "b985ee3c2cb4f97fe049d510ae74bc47c980c851", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "patch": "@@ -1482,7 +1482,8 @@ diagnostic.o : diagnostic.c diagnostic.h real.h diagnostic.def \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(TM_P_H) flags.h $(GGC_H) \\\n    input.h toplev.h intl.h langhooks.h $(LANGHOOKS_DEF_H)\n opts.o : opts.c opts.h options.h toplev.h $(CONFIG_H) $(SYSTEM_H) \\\n-\tcoretypes.h $(TREE_H) $(TM_H) $(LANGHOOKS_H) $(GGC_H) $(RTL_H) output.h\n+\tcoretypes.h $(TREE_H) $(TM_H) $(LANGHOOKS_H) $(GGC_H) $(RTL_H) \\\n+\toutput.h diagnostic.h\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n    function.h flags.h xcoffout.h input.h $(INSN_ATTR_H) output.h diagnostic.h \\\n    debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\"}, {"sha": "bf62b418f1df288016255b35af4423d20bcf8c78", "filename": "gcc/common.opt", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "patch": "@@ -151,27 +151,198 @@ Common RejectNegative Joined UInteger\n falign-loops=\n Common RejectNegative Joined UInteger\n \n+fbranch-target-load-optimize\n+Common\n+\n+fbranch-target-load-optimize2\n+Common\n+\n fcall-saved-\n Common Joined RejectNegative\n \n fcall-used-\n Common Joined RejectNegative\n \n+fcaller-saves\n+Common\n+\n+fcrossjumping\n+Common\n+\n+fcse-follow-jumps\n+Common\n+\n+fcse-skip-blocks\n+Common\n+\n+fdefer-pop\n+Common\n+\n+fdelayed-branch\n+Common\n+\n+fdelete-null-pointer-checks\n+Common\n+\n+fdiagnostics-show-location=\n+Common Joined RejectNegative\n+\n+feliminate-dwarf2-dups\n+Common\n+\n+feliminate-unused-debug-types\n+Common\n+\n+fexpensive-optimizations\n+Common\n+\n ffast-math\n Common\n \n ffixed-\n Common Joined RejectNegative\n \n+ffloat-store\n+Common\n+\n+fforce-addr\n+Common\n+\n+fforce-mem\n+Common\n+\n+ffunction-cse\n+Common\n+\n+fgcse\n+Common\n+\n+fgcse-lm\n+Common\n+\n+fgcse-sm\n+Common\n+\n+fif-conversion\n+Common\n+\n+fif-conversion2\n+Common\n+\n+finline\n+Common\n+\n+finline-functions\n+Common\n+\n+fkeep-inline-functions\n+Common\n+\n+fkeep-static-consts\n+Common\n+\n+floop-optimize\n+Common\n+\n+fmessage-length=\n+Common RejectNegative Joined UInteger\n+\n+fmove-all-movables\n+Common\n+\n+fold-unroll-loops\n+Common\n+\n+fold-unroll-all-loops\n+Common\n+\n+fomit-frame-pointer\n+Common\n+\n+foptimize-sibling-calls\n+Common\n+\n+fpcc-struct-return\n+Common\n+\n+fpeel-loops\n+Common\n+\n+fpeephole\n+Common\n+\n+fprefetch-loop-arrays\n+Common\n+\n+frandom-seed\n+Common\n+\n+frandom-seed=\n+Common Joined RejectNegative\n+\n+freduce-all-givs\n+Common\n+\n+freg-struct-return\n+Common\n+\n+frerun-cse-after-loop\n+Common\n+\n+frerun-loop-opt\n+Common\n+\n+fsched-verbose=\n+Common RejectNegative Joined\n+\n+fschedule-insns\n+Common\n+\n+fschedule-insns2\n+Common\n+\n+fshared-data\n+Common\n+\n+fstack-limit\n+Common\n+\n fstack-limit-register=\n Common RejectNegative Joined\n \n fstack-limit-symbol=\n Common RejectNegative Joined\n \n+fstrength-reduce\n+Common\n+\n+fsyntax-only\n+Common\n+\n+fthread-jumps\n+Common\n+\n ftls-model=\n Common Joined RejectNegative\n \n+ftracer\n+Common\n+\n+funit-at-a-time\n+Common\n+\n+funroll-loops\n+Common\n+\n+funroll-all-loops\n+Common\n+\n+funswitch-loops\n+Common\n+\n+fwritable-strings\n+Common\n+\n g\n Common JoinedOrMissing\n "}, {"sha": "6d98640414d25b6385424788c972724e3e63ea9d", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "patch": "@@ -1,3 +1,8 @@\n+Sat Jun 21 21:29:38 2003  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* lang.opt: Add -fpreprocessed.\n+\t* top.c (ffe_handle_option): Handle it.\n+\n Fri Jun 20 10:00:31 2003  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* com.c (finish_function): Adjust expand_function_end call."}, {"sha": "d53a0f50039bd669f306c4bc5cfacfdfc92527c2", "filename": "gcc/f/lang.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Ff%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Ff%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flang.opt?ref=de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "patch": "@@ -214,6 +214,9 @@ F77\n fpedantic\n F77\n \n+fpreprocessed\n+F77\n+\n fsecond-underscore\n F77\n "}, {"sha": "2c5317cfc0100d2f54c695452ac0ff75d929cd40", "filename": "gcc/f/top.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Ff%2Ftop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Ff%2Ftop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.c?ref=de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "patch": "@@ -573,6 +573,7 @@ ffe_handle_option (size_t scode, const char *arg, int value)\n     case OPT_Wcomments:\n     case OPT_Wimport:\n     case OPT_Wtrigraphs:\n+    case OPT_fpreprocessed:\n       /* These are for cpp.  */\n       break;\n "}, {"sha": "1a1d7ed3ce3028d1f1f825e3d8b4b5e5dea755c7", "filename": "gcc/opts.c", "status": "modified", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "patch": "@@ -33,6 +33,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"flags.h\"\n #include \"toplev.h\"\n #include \"params.h\"\n+#include \"diagnostic.h\"\n \n /* Value of the -G xx switch, and whether it was passed or not.  */\n unsigned HOST_WIDE_INT g_switch_value;\n@@ -537,6 +538,14 @@ common_handle_option (size_t scode, const char *arg,\n       align_loops = value;\n       break;\n \n+    case OPT_fbranch_target_load_optimize:\n+      flag_branch_target_load_optimize = value;\n+      break;\n+\n+    case OPT_fbranch_target_load_optimize2:\n+      flag_branch_target_load_optimize2 = value;\n+      break;\n+\n     case OPT_fcall_used_:\n       fix_register (arg, 0, 1);\n       break;\n@@ -545,6 +554,56 @@ common_handle_option (size_t scode, const char *arg,\n       fix_register (arg, 0, 0);\n       break;\n \n+    case OPT_fcaller_saves:\n+      flag_caller_saves = value;\n+      break;\n+\n+    case OPT_fcrossjumping:\n+      flag_crossjumping = value;\n+      break;\n+\n+    case OPT_fcse_follow_jumps:\n+      flag_cse_follow_jumps = value;\n+      break;\n+\n+    case OPT_fcse_skip_blocks:\n+      flag_cse_skip_blocks = value;\n+      break;\n+\n+    case OPT_fdefer_pop:\n+      flag_defer_pop = value;\n+      break;\n+\n+    case OPT_fdelayed_branch:\n+      flag_delayed_branch = value;\n+      break;\n+\n+    case OPT_fdelete_null_pointer_checks:\n+      flag_delete_null_pointer_checks = value;\n+      break;\n+\n+    case OPT_fdiagnostics_show_location_:\n+      if (!strcmp (arg, \"once\"))\n+\tdiagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n+      else if (!strcmp (arg, \"every-line\"))\n+\tdiagnostic_prefixing_rule (global_dc)\n+\t  = DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;\n+      else\n+\treturn 0;\n+      break;\n+\n+    case OPT_feliminate_dwarf2_dups:\n+      flag_eliminate_dwarf2_dups = value;\n+      break;\n+\n+    case OPT_feliminate_unused_debug_types:\n+      flag_eliminate_unused_debug_types = value;\n+      break;\n+\n+    case OPT_fexpensive_optimizations:\n+      flag_expensive_optimizations = value;\n+      break;\n+\n     case OPT_ffast_math:\n       set_fast_math_flags (value);\n       break;\n@@ -553,6 +612,156 @@ common_handle_option (size_t scode, const char *arg,\n       fix_register (arg, 1, 1);\n       break;\n \n+    case OPT_ffunction_cse:\n+      flag_no_function_cse = !value;\n+      break;\n+\n+    case OPT_ffloat_store:\n+      flag_float_store = value;\n+      break;\n+\n+    case OPT_fforce_addr:\n+      flag_force_addr = value;\n+      break;\n+\n+    case OPT_fforce_mem:\n+      flag_force_mem = value;\n+      break;\n+\n+    case OPT_fgcse:\n+      flag_gcse = value;\n+      break;\n+\n+    case OPT_fgcse_lm:\n+      flag_gcse_lm = value;\n+      break;\n+\n+    case OPT_fgcse_sm:\n+      flag_gcse_sm = value;\n+      break;\n+\n+    case OPT_fif_conversion:\n+      flag_if_conversion = value;\n+      break;\n+\n+    case OPT_fif_conversion2:\n+      flag_if_conversion2 = value;\n+      break;\n+\n+    case OPT_finline:\n+      flag_no_inline = !value;\n+      break;\n+\n+    case OPT_finline_functions:\n+      flag_inline_functions = value;\n+      break;\n+\n+    case OPT_fkeep_inline_functions:\n+      flag_keep_inline_functions =value;\n+      break;\n+\n+    case OPT_fkeep_static_consts:\n+      flag_keep_static_consts = value;\n+      break;\n+\n+    case OPT_floop_optimize:\n+      flag_loop_optimize = value;\n+      break;\n+\n+    case OPT_fmessage_length_:\n+      output_set_maximum_length (&global_dc->buffer, value);\n+      break;\n+\n+    case OPT_fmove_all_movables:\n+      flag_move_all_movables = value;\n+      break;\n+\n+    case OPT_fold_unroll_all_loops:\n+      flag_old_unroll_all_loops = value;\n+      break;\n+\n+    case OPT_fold_unroll_loops:\n+      flag_old_unroll_loops = value;\n+      break;\n+\n+    case OPT_fomit_frame_pointer:\n+      flag_omit_frame_pointer = value;\n+      break;\n+\n+    case OPT_foptimize_sibling_calls:\n+      flag_optimize_sibling_calls = value;\n+      break;\n+\n+    case OPT_fpeel_loops:\n+      flag_peel_loops = value;\n+      break;\n+\n+    case OPT_fpcc_struct_return:\n+      flag_pcc_struct_return = value;\n+      break;\n+\n+    case OPT_fpeephole:\n+      flag_no_peephole = !value;\n+      break;\n+\n+    case OPT_fprefetch_loop_arrays:\n+      flag_prefetch_loop_arrays = value;\n+      break;\n+\n+    case OPT_frandom_seed:\n+      /* The real switch is -fno-random-seed.  */\n+      if (value)\n+\treturn 0;\n+      flag_random_seed = NULL;\n+      break;\n+\n+    case OPT_frandom_seed_:\n+      flag_random_seed = arg;\n+      break;\n+\n+    case OPT_freduce_all_givs:\n+      flag_reduce_all_givs = value;\n+      break;\n+\n+    case OPT_freg_struct_return:\n+      flag_pcc_struct_return = !value;\n+      break;\n+\n+    case OPT_frerun_cse_after_loop:\n+      flag_rerun_cse_after_loop = value;\n+      break;\n+\n+    case OPT_frerun_loop_opt:\n+      flag_rerun_loop_opt = value;\n+      break;\n+\n+    case OPT_fsched_verbose_:\n+#ifdef INSN_SCHEDULING\n+      fix_sched_param (\"verbose\", arg);\n+      break;\n+#else\n+      return 0;\n+#endif\n+\n+    case OPT_fschedule_insns:\n+      flag_schedule_insns = value;\n+      break;\n+\n+    case OPT_fschedule_insns2:\n+      flag_schedule_insns_after_reload = value;\n+      break;\n+\n+    case OPT_fshared_data:\n+      flag_shared_data = value;\n+      break;\n+\n+    case OPT_fstack_limit:\n+      /* The real switch is -fno-stack-limit.  */\n+      if (value)\n+\treturn 0;\n+      stack_limit_rtx = NULL_RTX;\n+      break;\n+\n     case OPT_fstack_limit_register_:\n       {\n \tint reg = decode_reg_name (arg);\n@@ -567,6 +776,18 @@ common_handle_option (size_t scode, const char *arg,\n       stack_limit_rtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (arg));\n       break;\n \n+    case OPT_fstrength_reduce:\n+      flag_strength_reduce = value;\n+      break;\n+\n+    case OPT_fsyntax_only:\n+      flag_syntax_only = value;\n+      break;\n+\n+    case OPT_fthread_jumps:\n+      flag_thread_jumps = value;\n+      break;\n+\n     case OPT_ftls_model_:\n       if (!strcmp (arg, \"global-dynamic\"))\n \tflag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n@@ -580,6 +801,30 @@ common_handle_option (size_t scode, const char *arg,\n \twarning (\"unknown tls-model \\\"%s\\\"\", arg);\n       break;\n \n+    case OPT_ftracer:\n+      flag_tracer = value;\n+      break;\n+\n+    case OPT_funit_at_a_time:\n+      flag_unit_at_a_time = value;\n+      break;\n+\n+    case OPT_funroll_all_loops:\n+      flag_unroll_all_loops = value;\n+      break;\n+\n+    case OPT_funroll_loops:\n+      flag_unroll_loops = value;\n+      break;\n+\n+    case OPT_funswitch_loops:\n+      flag_unswitch_loops = value;\n+      break;\n+\n+    case OPT_fwritable_strings:\n+      flag_writable_strings = value;\n+      break;\n+\n     case OPT_g:\n       decode_g_option (arg);\n       break;"}, {"sha": "d612f97a49567f2fdae47bfcba4465b460f9089e", "filename": "gcc/toplev.c", "status": "modified", "additions": 60, "deletions": 87, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "patch": "@@ -654,24 +654,24 @@ int flag_syntax_only = 0;\n \n /* Nonzero means perform loop optimizer.  */\n \n-static int flag_loop_optimize;\n+int flag_loop_optimize;\n \n /* Nonzero means perform crossjumping.  */\n \n-static int flag_crossjumping;\n+int flag_crossjumping;\n \n /* Nonzero means perform if conversion.  */\n \n-static int flag_if_conversion;\n+int flag_if_conversion;\n \n /* Nonzero means perform if conversion after reload.  */\n \n-static int flag_if_conversion2;\n+int flag_if_conversion2;\n \n /* Nonzero means to use global dataflow analysis to eliminate\n    useless null pointer tests.  */\n \n-static int flag_delete_null_pointer_checks;\n+int flag_delete_null_pointer_checks;\n \n /* Nonzero means perform global CSE.  */\n \n@@ -702,7 +702,7 @@ int flag_branch_target_load_optimize2 = 0;\n /* Nonzero means to rerun cse after loop optimization.  This increases\n    compilation time about 20% and picks up a few more common expressions.  */\n \n-static int flag_rerun_cse_after_loop;\n+int flag_rerun_cse_after_loop;\n \n /* Nonzero means to run loop optimizations twice.  */\n \n@@ -1040,6 +1040,9 @@ static const param_info lang_independent_params[] = {\n   { NULL, 0, NULL }\n };\n \n+/* Used for the f_options array temporarily.  */\n+static int flag_dummy;\n+\n /* Table of language-independent -f options.\n    STRING is the option name.  VARIABLE is the address of the variable.\n    ON_VALUE is the value to store in VARIABLE\n@@ -1048,107 +1051,107 @@ static const param_info lang_independent_params[] = {\n \n static const lang_independent_options f_options[] =\n {\n-  {\"eliminate-dwarf2-dups\", &flag_eliminate_dwarf2_dups, 1,\n+  {\"eliminate-dwarf2-dups\", &flag_dummy, 1,\n    N_(\"Perform DWARF2 duplicate elimination\") },\n-  {\"eliminate-unused-debug-types\", &flag_eliminate_unused_debug_types, 1,\n+  {\"eliminate-unused-debug-types\", &flag_dummy, 1,\n    N_(\"Perform unused type elimination in debug info\") },\n-  {\"float-store\", &flag_float_store, 1,\n+  {\"float-store\", &flag_dummy, 1,\n    N_(\"Do not store floats in registers\") },\n-  {\"defer-pop\", &flag_defer_pop, 1,\n+  {\"defer-pop\", &flag_dummy, 1,\n    N_(\"Defer popping functions args from stack until later\") },\n-  {\"omit-frame-pointer\", &flag_omit_frame_pointer, 1,\n+  {\"omit-frame-pointer\", &flag_dummy, 1,\n    N_(\"When possible do not generate stack frames\") },\n-  {\"optimize-sibling-calls\", &flag_optimize_sibling_calls, 1,\n+  {\"optimize-sibling-calls\", &flag_dummy, 1,\n    N_(\"Optimize sibling and tail recursive calls\") },\n-  {\"tracer\", &flag_tracer, 1,\n+  {\"tracer\", &flag_dummy, 1,\n    N_(\"Perform superblock formation via tail duplication\") },\n-  {\"unit-at-a-time\", &flag_unit_at_a_time, 1,\n+  {\"unit-at-a-time\", &flag_dummy, 1,\n    N_(\"Compile whole compilation unit at a time\") },\n-  {\"cse-follow-jumps\", &flag_cse_follow_jumps, 1,\n+  {\"cse-follow-jumps\", &flag_dummy, 1,\n    N_(\"When running CSE, follow jumps to their targets\") },\n-  {\"cse-skip-blocks\", &flag_cse_skip_blocks, 1,\n+  {\"cse-skip-blocks\", &flag_dummy, 1,\n    N_(\"When running CSE, follow conditional jumps\") },\n-  {\"expensive-optimizations\", &flag_expensive_optimizations, 1,\n+  {\"expensive-optimizations\", &flag_dummy, 1,\n    N_(\"Perform a number of minor, expensive optimizations\") },\n-  {\"thread-jumps\", &flag_thread_jumps, 1,\n+  {\"thread-jumps\", &flag_dummy, 1,\n    N_(\"Perform jump threading optimizations\") },\n-  {\"strength-reduce\", &flag_strength_reduce, 1,\n+  {\"strength-reduce\", &flag_dummy, 1,\n    N_(\"Perform strength reduction optimizations\") },\n-  {\"unroll-loops\", &flag_unroll_loops, 1,\n+  {\"unroll-loops\", &flag_dummy, 1,\n    N_(\"Perform loop unrolling when iteration count is known\") },\n-  {\"unroll-all-loops\", &flag_unroll_all_loops, 1,\n+  {\"unroll-all-loops\", &flag_dummy, 1,\n    N_(\"Perform loop unrolling for all loops\") },\n-  {\"old-unroll-loops\", &flag_old_unroll_loops, 1,\n+  {\"old-unroll-loops\", &flag_dummy, 1,\n    N_(\"Perform loop unrolling when iteration count is known\") },\n-  {\"old-unroll-all-loops\", &flag_old_unroll_all_loops, 1,\n+  {\"old-unroll-all-loops\", &flag_dummy, 1,\n    N_(\"Perform loop unrolling for all loops\") },\n-  {\"peel-loops\", &flag_peel_loops, 1,\n+  {\"peel-loops\", &flag_dummy, 1,\n    N_(\"Perform loop peeling\") },\n-  {\"unswitch-loops\", &flag_unswitch_loops, 1,\n+  {\"unswitch-loops\", &flag_dummy, 1,\n    N_(\"Perform loop unswitching\") },\n-  {\"prefetch-loop-arrays\", &flag_prefetch_loop_arrays, 1,\n+  {\"prefetch-loop-arrays\", &flag_dummy, 1,\n    N_(\"Generate prefetch instructions, if available, for arrays in loops\") },\n-  {\"move-all-movables\", &flag_move_all_movables, 1,\n+  {\"move-all-movables\", &flag_dummy, 1,\n    N_(\"Force all loop invariant computations out of loops\") },\n-  {\"reduce-all-givs\", &flag_reduce_all_givs, 1,\n+  {\"reduce-all-givs\", &flag_dummy, 1,\n    N_(\"Strength reduce all loop general induction variables\") },\n-  {\"writable-strings\", &flag_writable_strings, 1,\n+  {\"writable-strings\", &flag_dummy, 1,\n    N_(\"Store strings in writable data section\") },\n-  {\"peephole\", &flag_no_peephole, 0,\n+  {\"peephole\", &flag_dummy, 0,\n    N_(\"Enable machine specific peephole optimizations\") },\n-  {\"force-mem\", &flag_force_mem, 1,\n+  {\"force-mem\", &flag_dummy, 1,\n    N_(\"Copy memory operands into registers before using\") },\n-  {\"force-addr\", &flag_force_addr, 1,\n+  {\"force-addr\", &flag_dummy, 1,\n    N_(\"Copy memory address constants into regs before using\") },\n-  {\"function-cse\", &flag_no_function_cse, 0,\n+  {\"function-cse\", &flag_dummy, 0,\n    N_(\"Allow function addresses to be held in registers\") },\n-  {\"inline-functions\", &flag_inline_functions, 1,\n+  {\"inline-functions\", &flag_dummy, 1,\n    N_(\"Integrate simple functions into their callers\") },\n-  {\"keep-inline-functions\", &flag_keep_inline_functions, 1,\n+  {\"keep-inline-functions\", &flag_dummy, 1,\n    N_(\"Generate code for funcs even if they are fully inlined\") },\n-  {\"inline\", &flag_no_inline, 0,\n+  {\"inline\", &flag_dummy, 0,\n    N_(\"Pay attention to the 'inline' keyword\") },\n-  {\"keep-static-consts\", &flag_keep_static_consts, 1,\n+  {\"keep-static-consts\", &flag_dummy, 1,\n    N_(\"Emit static const variables even if they are not used\") },\n-  {\"syntax-only\", &flag_syntax_only, 1,\n+  {\"syntax-only\", &flag_dummy, 1,\n    N_(\"Check for syntax errors, then stop\") },\n-  {\"shared-data\", &flag_shared_data, 1,\n+  {\"shared-data\", &flag_dummy, 1,\n    N_(\"Mark data as shared rather than private\") },\n-  {\"caller-saves\", &flag_caller_saves, 1,\n+  {\"caller-saves\", &flag_dummy, 1,\n    N_(\"Enable saving registers around function calls\") },\n-  {\"pcc-struct-return\", &flag_pcc_struct_return, 1,\n+  {\"pcc-struct-return\", &flag_dummy, 1,\n    N_(\"Return 'short' aggregates in memory, not registers\") },\n-  {\"reg-struct-return\", &flag_pcc_struct_return, 0,\n+  {\"reg-struct-return\", &flag_dummy, 0,\n    N_(\"Return 'short' aggregates in registers\") },\n-  {\"delayed-branch\", &flag_delayed_branch, 1,\n+  {\"delayed-branch\", &flag_dummy, 1,\n    N_(\"Attempt to fill delay slots of branch instructions\") },\n-  {\"gcse\", &flag_gcse, 1,\n+  {\"gcse\", &flag_dummy, 1,\n    N_(\"Perform the global common subexpression elimination\") },\n-  {\"gcse-lm\", &flag_gcse_lm, 1,\n+  {\"gcse-lm\", &flag_dummy, 1,\n    N_(\"Perform enhanced load motion during global subexpression elimination\") },\n-  {\"gcse-sm\", &flag_gcse_sm, 1,\n+  {\"gcse-sm\", &flag_dummy, 1,\n    N_(\"Perform store motion after global subexpression elimination\") },\n-  {\"branch-target-load-optimize\", &flag_branch_target_load_optimize, 1,\n+  {\"branch-target-load-optimize\", &flag_dummy, 1,\n    N_(\"Perform branch target load optimization before prologue / epilogue threading\") },\n-  {\"branch-target-load-optimize2\", &flag_branch_target_load_optimize2, 1,\n+  {\"branch-target-load-optimize2\", &flag_dummy, 1,\n    N_(\"Perform branch target load optimization after prologue / epilogue threading\") },\n-  {\"loop-optimize\", &flag_loop_optimize, 1,\n+  {\"loop-optimize\", &flag_dummy, 1,\n    N_(\"Perform the loop optimizations\") },\n-  {\"crossjumping\", &flag_crossjumping, 1,\n+  {\"crossjumping\", &flag_dummy, 1,\n    N_(\"Perform cross-jumping optimization\") },\n-  {\"if-conversion\", &flag_if_conversion, 1,\n+  {\"if-conversion\", &flag_dummy, 1,\n    N_(\"Perform conversion of conditional jumps to branchless equivalents\") },\n-  {\"if-conversion2\", &flag_if_conversion2, 1,\n+  {\"if-conversion2\", &flag_dummy, 1,\n    N_(\"Perform conversion of conditional jumps to conditional execution\") },\n-  {\"rerun-cse-after-loop\", &flag_rerun_cse_after_loop, 1,\n+  {\"rerun-cse-after-loop\", &flag_dummy, 1,\n    N_(\"Run CSE pass after loop optimizations\") },\n-  {\"rerun-loop-opt\", &flag_rerun_loop_opt, 1,\n+  {\"rerun-loop-opt\", &flag_dummy, 1,\n    N_(\"Run the loop optimizer twice\") },\n-  {\"delete-null-pointer-checks\", &flag_delete_null_pointer_checks, 1,\n+  {\"delete-null-pointer-checks\", &flag_dummy, 1,\n    N_(\"Delete useless null pointer checks\") },\n-  {\"schedule-insns\", &flag_schedule_insns, 1,\n+  {\"schedule-insns\", &flag_dummy, 1,\n    N_(\"Reschedule instructions before register allocation\") },\n-  {\"schedule-insns2\", &flag_schedule_insns_after_reload, 1,\n+  {\"schedule-insns2\", &flag_dummy, 1,\n    N_(\"Reschedule instructions after register allocation\") },\n   {\"sched-interblock\",&flag_schedule_interblock, 1,\n    N_(\"Enable scheduling across basic blocks\") },\n@@ -4191,36 +4194,6 @@ decode_f_option (const char *arg)\n \t    set_param_value (\"min-inline-insns\", 10);\n \t}\n     }\n-#ifdef INSN_SCHEDULING\n-  else if ((option_value = skip_leading_substring (arg, \"sched-verbose=\")))\n-    fix_sched_param (\"verbose\", option_value);\n-#endif\n-  else if ((option_value\n-\t    = skip_leading_substring (arg, \"message-length=\")))\n-    output_set_maximum_length\n-      (&global_dc->buffer, read_integral_parameter\n-       (option_value, arg - 2, diagnostic_line_cutoff (global_dc)));\n-  else if ((option_value\n-\t    = skip_leading_substring (arg, \"diagnostics-show-location=\")))\n-    {\n-      if (!strcmp (option_value, \"once\"))\n-\tdiagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n-      else if (!strcmp (option_value, \"every-line\"))\n-\tdiagnostic_prefixing_rule (global_dc)\n-\t  = DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;\n-      else\n-\terror (\"unrecognized option `%s'\", arg - 2);\n-    }\n-  else if (!strcmp (arg, \"no-stack-limit\"))\n-    stack_limit_rtx = NULL_RTX;\n-  else if ((option_value = skip_leading_substring (arg, \"random-seed=\")))\n-    flag_random_seed = option_value;\n-  else if (!strcmp (arg, \"no-random-seed\"))\n-    flag_random_seed = NULL;\n-  else if (!strcmp (arg, \"preprocessed\"))\n-    /* Recognize this switch but do nothing.  This prevents warnings\n-       about an unrecognized switch if cpplib has not been linked in.  */\n-    ;\n   else\n     return 0;\n "}, {"sha": "45709b89c0fc2c03be92df73f8df5ecd2b0e6666", "filename": "gcc/toplev.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de32c0cb3bd3af96b16de9c4b4c942cca57c135d/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=de32c0cb3bd3af96b16de9c4b4c942cca57c135d", "patch": "@@ -104,6 +104,21 @@ extern bool version_flag;\n \n extern int target_flags_explicit;\n \n+/* See toplev.c.  */\n+extern int flag_loop_optimize;\n+extern int flag_crossjumping;\n+extern int flag_if_conversion;\n+extern int flag_if_conversion2;\n+extern int flag_delete_null_pointer_checks;\n+extern int flag_keep_static_consts;\n+extern int flag_peel_loops;\n+extern int flag_rerun_cse_after_loop;\n+extern int flag_thread_jumps;\n+extern int flag_tracer;\n+extern int flag_unroll_loops;\n+extern int flag_unroll_all_loops;\n+extern int flag_unswitch_loops;\n+\n extern void display_help (void);\n extern void display_target_options (void);\n extern void print_version (FILE *, const char *);"}]}