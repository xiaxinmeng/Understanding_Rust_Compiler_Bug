{"sha": "855a62d13054bd3183cebce05f5ca9ec1ee4b401", "node_id": "C_kwDOANBUbNoAKDg1NWE2MmQxMzA1NGJkMzE4M2NlYmNlMDVmNWNhOWVjMWVlNGI0MDE", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-06-02T09:41:53Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-06-08T12:32:35Z"}, "message": "expand: Move derive system to new one\n\nBuiltin derive already had their own code scheme, incompatible with the\nproc macro pattern. This commit unifies derive macros with it.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-fragment.cc (Fragment::Fragment): Remove\n\toverwrite member in constructor.\n\t(Fragment::operator=): Removal of overwrite member in copy.\n\t(Fragment::should_overwrite): Remove overwrite getter.\n\t* ast/rust-ast-fragment.h: Remove overwrite boolean member.\n\t* expand/rust-expand-visitor.cc (derive_item): Add a function to\n\tderive items using the expander for now.\n\t(builtin_derive_item): Rename from derive_item to\n\tbuiltin_derive_item.\n\t(ExpandVisitor::visit): Remove visit to derive attributes.\n\t(ExpandVisitor::expand_derive): Remove derive attribute visitor.\n\t(ExpandVisitor::visit_attrs_with_derive): Likewise.\n\t* expand/rust-expand-visitor.h: Update insertion of other kind\n\tof proc macros. We no longer have an overwrite attribute in the\n\tfragment.\n\t* expand/rust-macro-expand.cc (MacroExpander::parse_procmacro_output):\n\tReturn the fragment instead of inserting it.\n\t* expand/rust-macro-expand.h (struct MacroExpander): Return\n\tfragment.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "b132bbf05ecf44c1086f37ac0cd4aaa1e8392ea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b132bbf05ecf44c1086f37ac0cd4aaa1e8392ea3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/855a62d13054bd3183cebce05f5ca9ec1ee4b401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855a62d13054bd3183cebce05f5ca9ec1ee4b401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/855a62d13054bd3183cebce05f5ca9ec1ee4b401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855a62d13054bd3183cebce05f5ca9ec1ee4b401/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fcec13b136cc8cb3eb58b80dd53af885ba3c998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fcec13b136cc8cb3eb58b80dd53af885ba3c998", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fcec13b136cc8cb3eb58b80dd53af885ba3c998"}], "stats": {"total": 151, "additions": 49, "deletions": 102}, "files": [{"sha": "a9dc4747d516181723f35a747e9742411db20f2b", "filename": "gcc/rust/ast/rust-ast-fragment.cc", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855a62d13054bd3183cebce05f5ca9ec1ee4b401/gcc%2Frust%2Fast%2Frust-ast-fragment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855a62d13054bd3183cebce05f5ca9ec1ee4b401/gcc%2Frust%2Fast%2Frust-ast-fragment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-fragment.cc?ref=855a62d13054bd3183cebce05f5ca9ec1ee4b401", "patch": "@@ -23,8 +23,7 @@ namespace AST {\n \n Fragment::Fragment (FragmentKind kind, std::vector<SingleASTNode> nodes,\n \t\t    std::vector<std::unique_ptr<AST::Token>> tokens)\n-  : kind (kind), nodes (std::move (nodes)), tokens (std::move (tokens)),\n-    overwrite (true)\n+  : kind (kind), nodes (std::move (nodes)), tokens (std::move (tokens))\n {}\n \n Fragment::Fragment (Fragment const &other) : kind (other.get_kind ())\n@@ -47,8 +46,6 @@ Fragment::operator= (Fragment const &other)\n   for (auto &t : other.tokens)\n     tokens.emplace_back (t->clone_token ());\n \n-  overwrite = other.overwrite;\n-\n   return *this;\n }\n \n@@ -59,15 +56,14 @@ Fragment::create_error ()\n }\n \n Fragment::Fragment (std::vector<AST::SingleASTNode> nodes,\n-\t\t    std::vector<std::unique_ptr<AST::Token>> tokens,\n-\t\t    bool overwrite)\n+\t\t    std::vector<std::unique_ptr<AST::Token>> tokens)\n   : kind (FragmentKind::Complete), nodes (std::move (nodes)),\n-    tokens (std::move (tokens)), overwrite (overwrite)\n+    tokens (std::move (tokens))\n {}\n \n Fragment::Fragment (std::vector<AST::SingleASTNode> nodes,\n \t\t    std::unique_ptr<AST::Token> token)\n-  : kind (FragmentKind::Complete), nodes (std::move (nodes)), overwrite (true)\n+  : kind (FragmentKind::Complete), nodes (std::move (nodes))\n {\n   tokens.emplace_back (std::move (token));\n }\n@@ -102,12 +98,6 @@ Fragment::should_expand () const\n   return !is_error ();\n }\n \n-bool\n-Fragment::should_overwrite () const\n-{\n-  return overwrite;\n-}\n-\n bool\n Fragment::is_expression_fragment () const\n {"}, {"sha": "41f5a287756cf80216e26d50ce81365f67e3c9ae", "filename": "gcc/rust/ast/rust-ast-fragment.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855a62d13054bd3183cebce05f5ca9ec1ee4b401/gcc%2Frust%2Fast%2Frust-ast-fragment.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855a62d13054bd3183cebce05f5ca9ec1ee4b401/gcc%2Frust%2Fast%2Frust-ast-fragment.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-fragment.h?ref=855a62d13054bd3183cebce05f5ca9ec1ee4b401", "patch": "@@ -64,8 +64,7 @@ class Fragment\n    * Create a complete AST fragment\n    */\n   Fragment (std::vector<AST::SingleASTNode> nodes,\n-\t    std::vector<std::unique_ptr<AST::Token>> tokens,\n-\t    bool overwrite = true);\n+\t    std::vector<std::unique_ptr<AST::Token>> tokens);\n \n   /**\n    * Create a complete AST fragment made of a single token\n@@ -79,7 +78,6 @@ class Fragment\n \n   bool is_error () const;\n   bool should_expand () const;\n-  bool should_overwrite () const;\n \n   bool is_expression_fragment () const;\n   bool is_type_fragment () const;\n@@ -111,12 +109,6 @@ class Fragment\n    */\n   std::vector<std::unique_ptr<AST::Token>> tokens;\n \n-  /**\n-   * Whether the fragment should overwrite the original content. In most case\n-   * it should overwrite it, but not with derive procedural macros.\n-   */\n-  bool overwrite;\n-\n   /**\n    * We need to make a special case for Expression and Type fragments as only\n    * one Node will be extracted from the `nodes` vector"}, {"sha": "48c438a4a99569d86e051ad57abbb009b77c319a", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 32, "deletions": 55, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855a62d13054bd3183cebce05f5ca9ec1ee4b401/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855a62d13054bd3183cebce05f5ca9ec1ee4b401/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=855a62d13054bd3183cebce05f5ca9ec1ee4b401", "patch": "@@ -128,12 +128,35 @@ get_traits_to_derive (std::vector<AST::Attribute> &outer_attrs)\n }\n \n static std::unique_ptr<AST::Item>\n-derive_item (std::unique_ptr<AST::Item> &item, const AST::Attribute &derive,\n-\t     BuiltinMacro to_derive)\n+builtin_derive_item (std::unique_ptr<AST::Item> &item,\n+\t\t     const AST::Attribute &derive, BuiltinMacro to_derive)\n {\n   return AST::DeriveVisitor::derive (*item, derive, to_derive);\n }\n \n+static std::vector<std::unique_ptr<AST::Item>>\n+derive_item (std::unique_ptr<AST::Item> &item, std::string &to_derive,\n+\t     MacroExpander &expander)\n+{\n+  std::vector<std::unique_ptr<AST::Item>> result;\n+  auto frag = expander.expand_derive_proc_macro (item, to_derive);\n+  if (!frag.is_error ())\n+    {\n+      for (auto &node : frag.get_nodes ())\n+\t{\n+\t  switch (node.get_kind ())\n+\t    {\n+\t    case AST::SingleASTNode::ITEM:\n+\t      result.push_back (node.take_item ());\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t}\n+    }\n+  return result;\n+}\n+\n void\n ExpandVisitor::expand_inner_items (\n   std::vector<std::unique_ptr<AST::Item>> &items)\n@@ -157,11 +180,17 @@ ExpandVisitor::expand_inner_items (\n \t      if (MacroBuiltin::builtins.is_iter_ok (maybe_builtin))\n \t\t{\n \t\t  auto new_item\n-\t\t    = derive_item (item, attr, maybe_builtin->second);\n+\t\t    = builtin_derive_item (item, attr, maybe_builtin->second);\n \t\t  // this inserts the derive *before* the item - is it a\n \t\t  // problem?\n \t\t  it = items.insert (it, std::move (new_item));\n \t\t}\n+\t      else\n+\t\t{\n+\t\t  auto new_items = derive_item (item, name, expander);\n+\t\t  std::move (new_items.begin (), new_items.end (),\n+\t\t\t     std::inserter (items, it));\n+\t\t}\n \t    }\n \t}\n     }\n@@ -1005,7 +1034,6 @@ ExpandVisitor::visit (AST::TypeAlias &type_alias)\n void\n ExpandVisitor::visit (AST::StructStruct &struct_item)\n {\n-  visit_attrs_with_derive (struct_item);\n   visit_outer_attrs (struct_item);\n   for (auto &generic : struct_item.get_generic_params ())\n     visit (generic);\n@@ -1020,7 +1048,6 @@ void\n ExpandVisitor::visit (AST::TupleStruct &tuple_struct)\n {\n   visit_outer_attrs (tuple_struct);\n-  visit_attrs_with_derive (tuple_struct);\n   for (auto &generic : tuple_struct.get_generic_params ())\n     visit (generic);\n \n@@ -1057,7 +1084,6 @@ ExpandVisitor::visit (AST::EnumItemDiscriminant &item)\n void\n ExpandVisitor::visit (AST::Enum &enum_item)\n {\n-  visit_attrs_with_derive (enum_item);\n   visit_outer_attrs (enum_item);\n   for (auto &generic : enum_item.get_generic_params ())\n     visit (generic);\n@@ -1069,7 +1095,6 @@ ExpandVisitor::visit (AST::Enum &enum_item)\n void\n ExpandVisitor::visit (AST::Union &union_item)\n {\n-  visit_attrs_with_derive (union_item);\n   visit_outer_attrs (union_item);\n   for (auto &generic : union_item.get_generic_params ())\n     visit (generic);\n@@ -1619,52 +1644,4 @@ ExpandVisitor::visit_inner_attrs (T &item)\n   visit_inner_using_attrs (item, item.get_inner_attrs ());\n }\n \n-template <typename T>\n-void\n-ExpandVisitor::expand_derive (T &item, std::unique_ptr<AST::TokenTree> trait)\n-{\n-  auto trait_name = trait->as_string ();\n-  expander.expand_derive_proc_macro (item, trait_name);\n-}\n-\n-template <typename T>\n-void\n-ExpandVisitor::expand_derive (T &item, AST::DelimTokenTree &attr)\n-{\n-  // Item is const because even though the tokenstream might be modified, it\n-  // should appear as the same input for every derive proc macro.\n-  auto &trees = attr.get_token_trees ();\n-  if (trees.size () > 2)\n-    {\n-      // Skipping begin and end parenthesis\n-      for (auto it = trees.begin () + 1; it < trees.end () - 1;\n-\t   it += 2 /* Increment + skip comma */)\n-\t{\n-\t  expand_derive (item, std::move (*it));\n-\t}\n-    }\n-}\n-\n-template <typename T>\n-void\n-ExpandVisitor::visit_attrs_with_derive (T &item)\n-{\n-  auto &attrs = item.get_outer_attrs ();\n-  for (auto it = attrs.begin (); it != attrs.end (); /* erase => No increment*/)\n-    {\n-      auto current = *it;\n-\n-      if (!is_builtin (current) && is_derive (current))\n-\t{\n-\t  it = attrs.erase (it);\n-\t  // Downcasting checked in is_derive\n-\t  expand_derive (item, static_cast<AST::DelimTokenTree &> (\n-\t\t\t\t current.get_attr_input ()));\n-\t}\n-      else // Skip unknwown\n-\t{\n-\t  it++;\n-\t}\n-    }\n-}\n } // namespace Rust"}, {"sha": "d86f0d03856a90baefd0ee2d85971ef10d7d248d", "filename": "gcc/rust/expand/rust-expand-visitor.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855a62d13054bd3183cebce05f5ca9ec1ee4b401/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855a62d13054bd3183cebce05f5ca9ec1ee4b401/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h?ref=855a62d13054bd3183cebce05f5ca9ec1ee4b401", "patch": "@@ -146,10 +146,7 @@ class ExpandVisitor : public AST::ASTVisitor\n \t  }\n \telse if (proc_macro_fragment.should_expand ())\n \t  {\n-\t    if (proc_macro_fragment.should_overwrite ())\n-\t      it = values.erase (it);\n-\t    else\n-\t      it++;\n+\t    it = values.erase (it);\n \t    for (auto &node : proc_macro_fragment.get_nodes ())\n \t      {\n \t\tauto new_node = extractor (node);\n@@ -383,13 +380,6 @@ class ExpandVisitor : public AST::ASTVisitor\n \n   template <typename T> void visit_inner_attrs (T &item);\n \n-  template <typename T>\n-  void expand_derive (T &item, std::unique_ptr<AST::TokenTree> trait);\n-\n-  template <typename T> void expand_derive (T &item, AST::DelimTokenTree &attr);\n-\n-  template <typename T> void visit_attrs_with_derive (T &item);\n-\n private:\n   MacroExpander &expander;\n };"}, {"sha": "00a0a5f01781b18132717aa374ec7d46424b17ca", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855a62d13054bd3183cebce05f5ca9ec1ee4b401/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855a62d13054bd3183cebce05f5ca9ec1ee4b401/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=855a62d13054bd3183cebce05f5ca9ec1ee4b401", "patch": "@@ -1096,8 +1096,8 @@ MacroExpander::import_proc_macros (std::string extern_crate)\n     }\n }\n \n-void\n-MacroExpander::parse_procmacro_output (ProcMacro::TokenStream ts, bool derive)\n+AST::Fragment\n+MacroExpander::parse_proc_macro_output (ProcMacro::TokenStream ts)\n {\n   ProcMacroInvocLexer lex (convert (ts));\n   Parser<ProcMacroInvocLexer> parser (lex);\n@@ -1133,10 +1133,9 @@ MacroExpander::parse_procmacro_output (ProcMacro::TokenStream ts, bool derive)\n     }\n \n   if (parser.has_errors ())\n-    set_expanded_proc_macro_fragment (AST::Fragment::create_error ());\n+    return AST::Fragment::create_error ();\n   else\n-    set_expanded_proc_macro_fragment (\n-      {nodes, std::vector<std::unique_ptr<AST::Token>> (), !derive});\n+    return {nodes, std::vector<std::unique_ptr<AST::Token>> ()};\n }\n \n } // namespace Rust"}, {"sha": "03ed74e18f48c81aafc1def6c5fd83f6417cec38", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855a62d13054bd3183cebce05f5ca9ec1ee4b401/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855a62d13054bd3183cebce05f5ca9ec1ee4b401/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=855a62d13054bd3183cebce05f5ca9ec1ee4b401", "patch": "@@ -357,7 +357,7 @@ struct MacroExpander\n   void import_proc_macros (std::string extern_crate);\n \n   template <typename T>\n-  void expand_derive_proc_macro (T &item, std::string &trait_name)\n+  AST::Fragment expand_derive_proc_macro (T &item, std::string &trait_name)\n   {\n     ProcMacro::CustomDerive macro;\n \n@@ -387,11 +387,11 @@ struct MacroExpander\n     auto c = collector.collect_tokens ();\n     std::vector<const_TokenPtr> vec (c.cbegin (), c.cend ());\n \n-    parse_procmacro_output (macro.macro (convert (vec)), true);\n+    return parse_proc_macro_output (macro.macro (convert (vec)));\n   }\n \n   template <typename T>\n-  void expand_bang_proc_macro (T &item, AST::SimplePath &path)\n+  AST::Fragment expand_bang_proc_macro (T &item, AST::SimplePath &path)\n   {\n     ProcMacro::Bang macro;\n \n@@ -419,7 +419,7 @@ struct MacroExpander\n     auto c = collector.collect_tokens ();\n     std::vector<const_TokenPtr> vec (c.cbegin (), c.cend ());\n \n-    parse_procmacro_output (macro.macro (convert (vec)), false);\n+    return parse_proc_macro_output (macro.macro (convert (vec)));\n   }\n \n   template <typename T>\n@@ -453,9 +453,8 @@ struct MacroExpander\n     std::vector<const_TokenPtr> vec (c.cbegin (), c.cend ());\n \n     // FIXME: Handle attributes\n-    parse_procmacro_output (\n-      macro.macro (ProcMacro::TokenStream::make_tokenstream (), convert (vec)),\n-      false);\n+    parse_proc_macro_output (\n+      macro.macro (ProcMacro::TokenStream::make_tokenstream (), convert (vec)));\n   }\n \n   /**\n@@ -473,7 +472,7 @@ struct MacroExpander\n   AST::MacroInvocation *get_last_invocation () { return last_invoc; }\n \n private:\n-  void parse_procmacro_output (ProcMacro::TokenStream ts, bool derive);\n+  AST::Fragment parse_proc_macro_output (ProcMacro::TokenStream ts);\n \n   AST::Crate &crate;\n   Session &session;"}]}