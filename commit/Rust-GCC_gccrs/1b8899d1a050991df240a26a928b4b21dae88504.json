{"sha": "1b8899d1a050991df240a26a928b4b21dae88504", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI4ODk5ZDFhMDUwOTkxZGYyNDBhMjZhOTI4YjRiMjFkYWU4ODUwNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-04-13T21:20:49Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-04-13T21:20:49Z"}, "message": "class.c (finish_struct_1): Look at the const-ness of the field's type...\n\n\t* class.c (finish_struct_1): Look at the const-ness of the field's\n\ttype, not the TREE_READONLY-ness of the declaration.\n\t* method.c (synthesize_method): Likewise.\n\t* pt.c (tsubst_decl): Call c_apply_type_quals_to_decl when\n\tcreating new declarations.\n\nFrom-SVN: r26420", "tree": {"sha": "b55fcee22d8fb344d3a863a05a6884034e662cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b55fcee22d8fb344d3a863a05a6884034e662cde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b8899d1a050991df240a26a928b4b21dae88504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b8899d1a050991df240a26a928b4b21dae88504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b8899d1a050991df240a26a928b4b21dae88504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b8899d1a050991df240a26a928b4b21dae88504/comments", "author": null, "committer": null, "parents": [{"sha": "adfaf194f307b745c5d011de13b6a58ba27914e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adfaf194f307b745c5d011de13b6a58ba27914e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adfaf194f307b745c5d011de13b6a58ba27914e5"}], "stats": {"total": 195, "additions": 186, "deletions": 9}, "files": [{"sha": "2cc8ffc42496c18aa30812d738ed5299e807a18f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 162, "deletions": 2, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b8899d1a050991df240a26a928b4b21dae88504/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b8899d1a050991df240a26a928b4b21dae88504/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1b8899d1a050991df240a26a928b4b21dae88504", "patch": "@@ -1,3 +1,11 @@\n+1999-04-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (finish_struct_1): Look at the const-ness of the field's\n+\ttype, not the TREE_READONLY-ness of the declaration.\n+\t* method.c (synthesize_method): Likewise.\n+\t* pt.c (tsubst_decl): Call c_apply_type_quals_to_decl when\n+\tcreating new declarations.\n+\n 1999-04-13  Mike Stump  <mrs@wrs.com>\n \n \t* decl2.c (import_export_decl): Because vtables always reference\n@@ -255,12 +263,23 @@ Wed Mar 31 11:30:43 BST 1999  Nathan Sidwell  <nathan@acm.org>\n \t* parse.y (declmods, nonempty_cv_qualifiers): Use hash_tree_cons.\n \n Wed Mar 31 10:48:29 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+<<<<<<< ChangeLog\n+\n+        * Makefile.in (hash.h): Generate using gperf language 'C', not\n+        'KR-C', so gperf uses the `const' keyword on strings.\n+\t \n+        * gxx.gperf (resword): Const-ify a char*.\n+=======\n \n \t* Makefile.in (hash.h): Generate using gperf language 'C', not\n \t'KR-C', so gperf uses the `const' keyword on strings.\n+>>>>>>> 1.988\n \n+<<<<<<< ChangeLog\n+=======\n \t* gxx.gperf (resword): Const-ify a char*.\n \n+>>>>>>> 1.988\n 1999-03-30  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cp-tree.h (IDENTIFIER_AS_DESC, IDENTIFIER_AS_LIST,\n@@ -7109,15 +7128,29 @@ Fri Mar  6 23:27:35 1998  Jeffrey A Law  (law@cygnus.com)\n \t* method.c: Fix typo.\n \n Fri Mar  6 10:06:59 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+<<<<<<< ChangeLog\n+=======\n \n \t* method.c: Include \"system.h\" to get stdlib.h, stdio.h,\n \tctype.h, string.h, etc.\n \t(issue_nrepeats): Add default case in enumeration switch.\n \t(check_btype): Likewise.\n \t(process_overload_item): Likewise.\n-\n+>>>>>>> 1.988\n+\n+<<<<<<< ChangeLog\n+        * method.c: Include \"system.h\" to get stdlib.h, stdio.h,\n+        ctype.h, string.h, etc.\n+        (issue_nrepeats): Add default case in enumeration switch.\n+        (check_btype): Likewise.\n+        (process_overload_item): Likewise.\n+\t \n+        * Makefile.in (method.o): Depend on system.h.\n+\n+=======\n \t* Makefile.in (method.o): Depend on system.h.\n \n+>>>>>>> 1.988\n Wed Mar  4 22:26:53 1998  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n \n \t* lex.c (do_scoped_id): Fix parenthesizing.\n@@ -9101,6 +9134,23 @@ Sat Sep 27 16:22:48 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \t(notype_qualified_id): Don't add template declarators here.\n \n Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@usa.net>\n+<<<<<<< ChangeLog\n+\n+        * call.c (add_template_candidate): Add explicit_targs parameter.\n+        (build_scoped_method_call): Use it.\n+        (build_overload_call_real): Likewise.\n+        (build_user_type_conversion_1): Likewise.\n+        (build_new_function_call): Likewise.\n+        (build_object_call): Likewise.\n+        (build_new_op): Likewise.\n+        (build_new_method_call): Likewise.\n+        (build_new_function_call): Handle TEMPLATE_ID_EXPR.\n+        (build_new_method_call): Likewise.\n+\n+        * class.c (finish_struct_methods): Add specialization pass to\n+        determine which methods were specializing which other methods.\n+        (instantiate_type): Handle TEMPLATE_ID_EXPR.\n+=======\n \n \t* call.c (add_template_candidate): Add explicit_targs parameter.\n \t(build_scoped_method_call): Use it.\n@@ -9112,15 +9162,45 @@ Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@usa.net>\n \t(build_new_method_call): Likewise.\n \t(build_new_function_call): Handle TEMPLATE_ID_EXPR.\n \t(build_new_method_call): Likewise.\n+>>>>>>> 1.988\n \n+<<<<<<< ChangeLog\n+        * cp-tree.def (TEMPLATE_ID_EXPR): New tree code.\n+=======\n \t* class.c (finish_struct_methods): Add specialization pass to\n \tdetermine which methods were specializing which other methods.\n \t(instantiate_type): Handle TEMPLATE_ID_EXPR.\n+>>>>>>> 1.988\n \n+<<<<<<< ChangeLog\n+        * cp-tree.h (name_mangling_version): New variable.\n+=======\n \t* cp-tree.def (TEMPLATE_ID_EXPR): New tree code.\n \n \t* cp-tree.h (name_mangling_version): New variable.\n+>>>>>>> 1.988\n \t(flag_guiding_decls): Likewise.\n+<<<<<<< ChangeLog\n+        (build_template_decl_overload): New function.\n+        (begin_specialization): Likewise.\n+        (reset_specialization): Likewise.\n+        (end_specialization): Likewise.\n+        (determine_explicit_specialization): Likewise.\n+        (check_explicit_specialization): Likewise.\n+        (lookup_template_function): Likewise.\n+        (fn_type_unification): Add explicit_targs parameter.\n+        (type_unification): Likewise.\n+\n+        * decl.c (duplicate_decls): Add smarts for explicit\n+        specializations.\n+        (grokdeclarator): Handle TEMPLATE_ID_EXPR, and function\n+        specializations.\n+        (grokfndecl): Call check_explicit_specialization.\n+\n+        * decl2.c (lang_decode_option): Handle -fname-mangling-version.\n+        (build_expr_from_tree): Handle TEMPLATE_ID_EXPR.\n+        (check_classfn): Handle specializations.\n+=======\n \t(build_template_decl_overload): New function.\n \t(begin_specialization): Likewise.\n \t(reset_specialization): Likewise.\n@@ -9140,20 +9220,99 @@ Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@usa.net>\n \t* decl2.c (lang_decode_option): Handle -fname-mangling-version.\n \t(build_expr_from_tree): Handle TEMPLATE_ID_EXPR.\n \t(check_classfn): Handle specializations.\n+>>>>>>> 1.988\n \n+<<<<<<< ChangeLog\n+        * error.c (dump_function_name): Print specialization arguments.\n+=======\n \t* error.c (dump_function_name): Print specialization arguments.\n+>>>>>>> 1.988\n \n+<<<<<<< ChangeLog\n+\t* friend.c (do_friend): Don't call pushdecl for template \n+        instantiations. \n+=======\n \t* friend.c (do_friend): Don't call pushdecl for template\n \tinstantiations.\n+>>>>>>> 1.988\n+\n+<<<<<<< ChangeLog\n+        * init.c (build_member_call): Handle TEMPLATE_ID_EXPR.\n \n+        * lang-options.h: Add -fname-mangling-version, -fguiding-decls, \n+=======\n \t* init.c (build_member_call): Handle TEMPLATE_ID_EXPR.\n \n \t* lang-options.h: Add -fname-mangling-version, -fguiding-decls,\n+>>>>>>> 1.988\n \tand -fno-guiding-decls.\n+<<<<<<< ChangeLog\n+\n+        * lex.c (identifier_type): Return PFUNCNAME for template function\n+        names.\n+=======\n \n \t* lex.c (identifier_type): Return PFUNCNAME for template function\n \tnames.\n-\n+>>>>>>> 1.988\n+\n+<<<<<<< ChangeLog\n+        * method.c (build_decl_overload_real): New function.\n+        (build_template_parm_names): New function.\n+        (build_overload_identifier): Use it.\n+        (build_underscore_int): New function.\n+        (build_overload_int): Use it.  Add levels for template\n+        parameters.\n+        (build_overload_name): Likewise.  Also, handle TYPENAME_TYPEs.\n+        (build_overload_nested_names): Handle template type parameters.\n+        (build_template_decl_overload): New function.\n+\n+        * parse.y (YYSTYPE): New ntype member.\n+        (nested_name_specifier): Use it.\n+        (nested_name_specifier_1): Likewise.\n+        (PFUNCNAME): New token.\n+        (template_id, object_template_id): New non-terminals.\n+        (template_parm_list): Note specializations.\n+        (template_def): Likewise.\n+        (structsp): Likewise.\n+        (fn.def2): Handle member template specializations.\n+        (component_decl_1): Likewise.\n+        (direct_notype_declarator): Handle template-ids.\n+        (component_decl_1): Likewise.\n+        (direct_notype_declarator): Handle template-ids.\n+        (primary): Handle TEMPLATE_ID_EXPR, and template-ids.\n+\n+        * pt.c (processing_specializations): New variable.\n+        (template_header_count): Likewise.\n+        (type_unification_real): New function.\n+        (processing_explicit_specialization): Likewise.\n+        (note_template_header): Likewise.\n+        (is_member_template): Handle specializations.\n+        (end_template_decl): Call reset_specialization.\n+        (push_template_decl): Handle member template specializations.\n+        (tsubst): Likewise.\n+        (tsubst_copy): Handle TEMPLATE_ID_EXPR.\n+        (instantiate_template): Handle specializations.\n+        (instantiate_decl): Likewise.\n+        (fn_type_unification): Handle explicit_targs.\n+        (type_unification): Likewise.  Allow incomplete unification\n+        without an error message, if allow_incomplete.\n+        (get_bindings): Use new calling sequence for fn_type_unification.\n+\n+        * spew.c (yylex): Handle PFUNCNAME.\n+\n+        * tree.c (is_overloaded_fn): Handle TEMPLATE_ID_EXPR.\n+        (really_overloaded_fn): Likewise.\n+        (get_first_fn): Handle function templates.\n+\n+        * typeck.c (build_x_function_call): Use really_overloaded_fn.\n+        Handle TEMPLATE_ID_EXPR.\n+        (build_x_unary_op): Likewise.\n+        (build_unary_op): Likewise.\n+        (mark_addressable): Templates whose address is taken are marked  \n+        as used. \n+\n+=======\n \t* method.c (build_decl_overload_real): New function.\n \t(build_template_parm_names): New function.\n \t(build_overload_identifier): Use it.\n@@ -9209,6 +9368,7 @@ Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@usa.net>\n \t(mark_addressable): Templates whose address is taken are marked\n \tas used.\n \n+>>>>>>> 1.988\n 1997-09-25  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n \n \t* decl.c (init_decl_processing): Declare __builtin_constant_p as"}, {"sha": "e625776390c4c8f44fa068259f8d2671f4048ac6", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b8899d1a050991df240a26a928b4b21dae88504/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b8899d1a050991df240a26a928b4b21dae88504/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1b8899d1a050991df240a26a928b4b21dae88504", "patch": "@@ -3385,7 +3385,7 @@ finish_struct_1 (t, warn_anon)\n         has_mutable = 1;\n \n       /* If any field is const, the structure type is pseudo-const.  */\n-      if (TREE_READONLY (x))\n+      if (CP_TYPE_CONST_P (TREE_TYPE (x)))\n \t{\n \t  C_TYPE_FIELDS_READONLY (t) = 1;\n \t  if (DECL_INITIAL (x) == NULL_TREE)"}, {"sha": "edb690f16b97fc62a97410cf423c79629b66a3f1", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b8899d1a050991df240a26a928b4b21dae88504/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b8899d1a050991df240a26a928b4b21dae88504/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=1b8899d1a050991df240a26a928b4b21dae88504", "patch": "@@ -2357,7 +2357,7 @@ do_build_assign_ref (fndecl)\n \t  if (TREE_CODE (field) != FIELD_DECL)\n \t    continue;\n \n-\t  if (TREE_READONLY (field))\n+\t  if (CP_TYPE_CONST_P (TREE_TYPE (field)))\n \t    {\n \t      if (DECL_NAME (field))\n \t\tcp_error (\"non-static const member `%#D', can't use default assignment operator\", field);"}, {"sha": "ad97a5152bff44d84724bde484530dbc3f26ad49", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b8899d1a050991df240a26a928b4b21dae88504/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b8899d1a050991df240a26a928b4b21dae88504/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1b8899d1a050991df240a26a928b4b21dae88504", "patch": "@@ -5694,6 +5694,8 @@ tsubst_decl (t, args, type, in_decl)\n       {\n \tr = copy_node (t);\n \tTREE_TYPE (r) = type;\n+\tc_apply_type_quals_to_decl (CP_TYPE_QUALS (type), r);\n+\n \tif (TREE_CODE (DECL_INITIAL (r)) != TEMPLATE_PARM_INDEX)\n \t  DECL_INITIAL (r) = TREE_TYPE (r);\n \telse\n@@ -5716,12 +5718,12 @@ tsubst_decl (t, args, type, in_decl)\n     case FIELD_DECL:\n       {\n \tr = copy_node (t);\n-\tTREE_TYPE (r) = type;\n \tcopy_lang_decl (r);\n-#if 0\n-\tDECL_FIELD_CONTEXT (r) = tsubst (DECL_FIELD_CONTEXT (t), args, \n-\t\t\t\t\t /*complain=*/1, in_decl);\n-#endif\n+\tTREE_TYPE (r) = type;\n+\tc_apply_type_quals_to_decl (CP_TYPE_QUALS (type), r);\n+\n+\t/* We don't have to set DECL_CONTEXT here; it is set by\n+\t   finish_member_declaration.  */\n \tDECL_INITIAL (r) = tsubst_expr (DECL_INITIAL (t), args,\n \t\t\t\t\t/*complain=*/1, in_decl);\n \tTREE_CHAIN (r) = NULL_TREE;\n@@ -5767,6 +5769,7 @@ tsubst_decl (t, args, type, in_decl)\n \n \tr = copy_node (t);\n \tTREE_TYPE (r) = type;\n+\tc_apply_type_quals_to_decl (CP_TYPE_QUALS (type), r);\n \tDECL_CONTEXT (r) = ctx;\n \tif (TREE_STATIC (r))\n \t  DECL_ASSEMBLER_NAME (r)"}, {"sha": "dfdaab27010dd3c15404f58240575ff3866fcc32", "filename": "gcc/testsuite/g++.old-deja/g++.pt/assign1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b8899d1a050991df240a26a928b4b21dae88504/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fassign1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b8899d1a050991df240a26a928b4b21dae88504/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fassign1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fassign1.C?ref=1b8899d1a050991df240a26a928b4b21dae88504", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+template <class T>\n+struct S {\n+  S();\n+  T t;\n+};\n+\n+void f()\n+{\n+  S<const int> s;\n+  s = s; // ERROR - generated assignment operator is illegal\n+}"}]}