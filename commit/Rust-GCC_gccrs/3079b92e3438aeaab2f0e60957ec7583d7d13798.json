{"sha": "3079b92e3438aeaab2f0e60957ec7583d7d13798", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3OWI5MmUzNDM4YWVhYWIyZjBlNjA5NTdlYzc1ODNkN2QxMzc5OA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-03-12T00:04:02Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-03-12T00:04:02Z"}, "message": "rs6000, testsuite: Correct the broken_cplxf_arg test\n\ncheck_effective_target_broken_cplxf_arg is buggy.  It actually tests\nif passing complex float works, not if it fails.  Also, it only runs\nthe test for target powerpc64-linux, but we are biarch, so it should\nbe powerpc*-linux.\n\nThis also changes the early-out conditions to be separate, because\nthe big combined condition was hard to follow.\n\nThis fixes the libstdc++ tests:\n\nRunning target unix/-m64\nXPASS: 26_numerics/complex/13450.cc execution test\nXPASS: 26_numerics/complex/pow.cc execution test\nXPASS: 26_numerics/complex/value_operations/1.cc execution test\n\nwhich were the last failing libstdc++ tests on BE.\n\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_broken_cplxf_arg):\n\tFix test.  Make early-out condition return early.  Correct comments.\n\nFrom-SVN: r246072", "tree": {"sha": "54a754d038eac5070fa82f715728d297c36120b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a754d038eac5070fa82f715728d297c36120b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3079b92e3438aeaab2f0e60957ec7583d7d13798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3079b92e3438aeaab2f0e60957ec7583d7d13798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3079b92e3438aeaab2f0e60957ec7583d7d13798", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3079b92e3438aeaab2f0e60957ec7583d7d13798/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "376d26750172c66d1bacd258d90c2e6a16c2d187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376d26750172c66d1bacd258d90c2e6a16c2d187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/376d26750172c66d1bacd258d90c2e6a16c2d187"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "c25c69fe093d9b3255b3000e0b0033c52f78e45b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3079b92e3438aeaab2f0e60957ec7583d7d13798/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3079b92e3438aeaab2f0e60957ec7583d7d13798/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3079b92e3438aeaab2f0e60957ec7583d7d13798", "patch": "@@ -1,3 +1,8 @@\n+2017-03-11  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* lib/target-supports.exp (check_effective_target_broken_cplxf_arg):\n+\tFix test.  Make early-out condition return early.  Correct comments.\n+\n 2017-03-11  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/78854"}, {"sha": "152b7d981d87f88ea970e918215108f6329442aa", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3079b92e3438aeaab2f0e60957ec7583d7d13798/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3079b92e3438aeaab2f0e60957ec7583d7d13798/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=3079b92e3438aeaab2f0e60957ec7583d7d13798", "patch": "@@ -2210,36 +2210,34 @@ proc check_effective_target_powerpc64 { } {\n \n # GCC 3.4.0 for powerpc64-*-linux* included an ABI fix for passing\n # complex float arguments.  This affects gfortran tests that call cabsf\n-# in libm built by an earlier compiler.  Return 1 if libm uses the same\n-# argument passing as the compiler under test, 0 otherwise.\n-#\n-# When the target name changes, replace the cached result.\n+# in libm built by an earlier compiler.  Return 0 if libm uses the same\n+# argument passing as the compiler under test, 1 otherwise.\n \n proc check_effective_target_broken_cplxf_arg { } {\n+    # Skip the work for targets known not to be affected.\n+    if { ![istarget powerpc*-*-linux*] || ![is-effective-target lp64] } {\n+\treturn 0\n+    }\n+\n     return [check_cached_effective_target broken_cplxf_arg {\n-\t# Skip the work for targets known not to be affected.\n-\tif { ![istarget powerpc64-*-linux*] } {\n-\t    expr 0\n-\t} elseif { ![is-effective-target lp64] } {\n-\t    expr 0\n-\t} else {\n-\t    check_runtime_nocache broken_cplxf_arg {\n-\t\t#include <complex.h>\n-\t\textern void abort (void);\n-\t\tfloat fabsf (float);\n-\t\tfloat cabsf (_Complex float);\n-\t\tint main ()\n-\t\t{\n-\t\t  _Complex float cf;\n-\t\t  float f;\n-\t\t  cf = 3 + 4.0fi;\n-\t\t  f = cabsf (cf);\n-\t\t  if (fabsf (f - 5.0) > 0.0001)\n-\t\t    abort ();\n-\t\t  return 0;\n-\t\t}\n-\t    } \"-lm\"\n-\t}\n+\tcheck_runtime_nocache broken_cplxf_arg {\n+\t    #include <complex.h>\n+\t    extern void abort (void);\n+\t    float fabsf (float);\n+\t    float cabsf (_Complex float);\n+\t    int main ()\n+\t    {\n+\t      _Complex float cf;\n+\t      float f;\n+\t      cf = 3 + 4.0fi;\n+\t      f = cabsf (cf);\n+\t      if (fabsf (f - 5.0) > 0.0001)\n+\t\t/* Yes, it's broken.  */\n+\t\treturn 0;\n+\t      /* All fine, not broken.  */\n+\t      return 1;\n+\t    }\n+\t} \"-lm\"\n     }]\n }\n "}]}