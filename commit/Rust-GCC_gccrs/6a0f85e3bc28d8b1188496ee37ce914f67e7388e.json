{"sha": "6a0f85e3bc28d8b1188496ee37ce914f67e7388e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEwZjg1ZTNiYzI4ZDhiMTE4ODQ5NmVlMzdjZTkxNGY2N2U3Mzg4ZQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1996-03-12T15:07:49Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1996-03-12T15:07:49Z"}, "message": "(valid_dbcc_comparison_p): Don't test cc_prev_status here.\n\n(flags_in_68881): New function.\n\nFrom-SVN: r11516", "tree": {"sha": "a9c4bb23645864cb41d718cd51e70a81a921487a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9c4bb23645864cb41d718cd51e70a81a921487a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a0f85e3bc28d8b1188496ee37ce914f67e7388e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0f85e3bc28d8b1188496ee37ce914f67e7388e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a0f85e3bc28d8b1188496ee37ce914f67e7388e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0f85e3bc28d8b1188496ee37ce914f67e7388e/comments", "author": null, "committer": null, "parents": [{"sha": "69f724c026d53ceefe3eaad1c8d522a4fb0e3acc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f724c026d53ceefe3eaad1c8d522a4fb0e3acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f724c026d53ceefe3eaad1c8d522a4fb0e3acc"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "bf278e6263e39751afa7cfe678ea2b0ea7e91366", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0f85e3bc28d8b1188496ee37ce914f67e7388e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0f85e3bc28d8b1188496ee37ce914f67e7388e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=6a0f85e3bc28d8b1188496ee37ce914f67e7388e", "patch": "@@ -569,13 +569,8 @@ valid_dbcc_comparison_p (x, mode)\n      rtx x;\n      enum machine_mode mode;\n {\n-  /* We could add support for these in the future */\n-  if (cc_prev_status.flags & CC_IN_68881)\n-    return 0;\n-\n   switch (GET_CODE (x))\n     {\n-\n       case EQ: case NE: case GTU: case LTU:\n       case GEU: case LEU:\n         return 1;\n@@ -589,16 +584,23 @@ valid_dbcc_comparison_p (x, mode)\n     }\n }\n \n+/* Return non-zero if flags are currently in the 68881 flag register.  */\n+int\n+flags_in_68881 ()\n+{\n+  /* We could add support for these in the future */\n+  return cc_status.flags & CC_IN_68881;\n+}\n+\n /* Output a dbCC; jCC sequence.  Note we do not handle the \n    floating point version of this sequence (Fdbcc).  We also\n    do not handle alternative conditions when CC_NO_OVERFLOW is\n-   set.  It is assumed that valid_dbcc_comparison_p will kick\n-   those out before we get here.  */\n+   set.  It is assumed that valid_dbcc_comparison_p and flags_in_68881 will\n+   kick those out before we get here.  */\n \n output_dbcc_and_branch (operands)\n      rtx *operands;\n {\n- \n   switch (GET_CODE (operands[3]))\n     {\n       case EQ:"}]}