{"sha": "1e1fdb729d99647bb90d8a18afa1a5fc3c2d3a22", "node_id": "C_kwDOANBUbNoAKDFlMWZkYjcyOWQ5OTY0N2JiOTBkOGExOGFmYTFhNWZjM2MyZDNhMjI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-07T07:29:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-07T08:49:45Z"}, "message": "Speed up LC SSA rewrite more\n\nIn many cases loops have only one exit or a variable is only live\nacross one of the exits.  In this case we know that all uses\noutside of the loop will be dominated by the single LC PHI node\nwe insert.  If that holds for all variables requiring LC SSA PHIs\nthen we can simplify the update_ssa process, avoiding the\n(iterated) dominance frontier computations.\n\n\t* tree-ssa-loop-manip.cc (add_exit_phis_var): Return the\n\tnumber of LC PHIs inserted.\n\t(add_exit_phis): Return whether any variable required\n\tmultiple LC PHI nodes.\n\t(rewrite_into_loop_closed_ssa_1): Use TODO_update_ssa_no_phi\n\twhen possible.", "tree": {"sha": "375d7f7156f34c4b1ce14561cf3c110d260ce787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/375d7f7156f34c4b1ce14561cf3c110d260ce787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e1fdb729d99647bb90d8a18afa1a5fc3c2d3a22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e1fdb729d99647bb90d8a18afa1a5fc3c2d3a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e1fdb729d99647bb90d8a18afa1a5fc3c2d3a22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e1fdb729d99647bb90d8a18afa1a5fc3c2d3a22/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5a9d60317852a7323e46109fa366e630b8b5bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5a9d60317852a7323e46109fa366e630b8b5bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5a9d60317852a7323e46109fa366e630b8b5bae"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "c531f1f12fd4c13a28d834bdca1fbbab64a7e57f", "filename": "gcc/tree-ssa-loop-manip.cc", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e1fdb729d99647bb90d8a18afa1a5fc3c2d3a22/gcc%2Ftree-ssa-loop-manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e1fdb729d99647bb90d8a18afa1a5fc3c2d3a22/gcc%2Ftree-ssa-loop-manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.cc?ref=1e1fdb729d99647bb90d8a18afa1a5fc3c2d3a22", "patch": "@@ -314,9 +314,10 @@ add_exit_phi (basic_block exit, tree var)\n }\n \n /* Add exit phis for VAR that is used in LIVEIN.\n-   Exits of the loops are stored in LOOP_EXITS.  */\n+   Exits of the loops are stored in LOOP_EXITS.  Returns the number\n+   of PHIs added for VAR.  */\n \n-static void\n+static unsigned\n add_exit_phis_var (tree var, bitmap use_blocks, bitmap def_loop_exits)\n {\n   unsigned index;\n@@ -328,10 +329,13 @@ add_exit_phis_var (tree var, bitmap use_blocks, bitmap def_loop_exits)\n   auto_bitmap live_exits (&loop_renamer_obstack);\n   compute_live_loop_exits (live_exits, use_blocks, def_bb, def_loop_exits);\n \n+  unsigned cnt = 0;\n   EXECUTE_IF_SET_IN_BITMAP (live_exits, 0, index, bi)\n     {\n       add_exit_phi (BASIC_BLOCK_FOR_FN (cfun, index), var);\n+      cnt++;\n     }\n+  return cnt;\n }\n \n static int\n@@ -348,13 +352,15 @@ loop_name_cmp (const void *p1, const void *p2)\n \n /* Add exit phis for the names marked in NAMES_TO_RENAME.\n    Exits of the loops are stored in EXITS.  Sets of blocks where the ssa\n-   names are used are stored in USE_BLOCKS.  */\n+   names are used are stored in USE_BLOCKS.  Returns whether any name\n+   required multiple LC PHI nodes.  */\n \n-static void\n+static bool\n add_exit_phis (bitmap names_to_rename, bitmap *use_blocks)\n {\n   unsigned i;\n   bitmap_iterator bi;\n+  bool multiple_p = false;\n \n   /* Sort names_to_rename after definition loop so we can avoid re-computing\n      def_loop_exits.  */\n@@ -381,9 +387,12 @@ add_exit_phis (bitmap names_to_rename, bitmap *use_blocks)\n \t    for (auto exit = loop->exits->next; exit->e; exit = exit->next)\n \t      bitmap_set_bit (def_loop_exits, exit->e->dest->index);\n \t}\n-      add_exit_phis_var (ssa_name (p.second), use_blocks[p.second],\n-\t\t\t def_loop_exits);\n+      if (add_exit_phis_var (ssa_name (p.second), use_blocks[p.second],\n+\t\t\t     def_loop_exits) > 1)\n+\tmultiple_p = true;\n     }\n+\n+  return multiple_p;\n }\n \n /* For USE in BB, if it is used outside of the loop it is defined in,\n@@ -588,15 +597,18 @@ rewrite_into_loop_closed_ssa_1 (bitmap changed_bbs, unsigned update_flag,\n \t}\n \n       /* Add the PHI nodes on exits of the loops for the names we need to\n-\t rewrite.  */\n-      add_exit_phis (names_to_rename, use_blocks);\n+\t rewrite.  When no variable required multiple LC PHI nodes to be\n+\t inserted then we know that all uses outside of the loop are\n+\t dominated by the single LC SSA definition and no further PHI\n+\t node insertions are required.  */\n+      bool need_phis_p = add_exit_phis (names_to_rename, use_blocks);\n \n       if (release_recorded_exits_p)\n \trelease_recorded_exits (cfun);\n \n       /* Fix up all the names found to be used outside their original\n \t loops.  */\n-      update_ssa (TODO_update_ssa);\n+      update_ssa (need_phis_p ? TODO_update_ssa : TODO_update_ssa_no_phi);\n     }\n \n   bitmap_obstack_release (&loop_renamer_obstack);"}]}