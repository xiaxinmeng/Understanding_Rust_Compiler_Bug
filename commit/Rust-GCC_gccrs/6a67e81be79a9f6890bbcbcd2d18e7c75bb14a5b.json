{"sha": "6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE2N2U4MWJlNzlhOWY2ODkwYmJjYmNkMmQxOGU3Yzc1YmIxNGE1Yg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-05-05T00:07:27Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-05-05T00:07:27Z"}, "message": "[RS6000] TARGET_RELOCATABLE\n\nFor ABI_V4, -mrelocatable and -fPIC both generate position independent\ncode, with some extra \"fixup\" output for -mrelocatable.  The\nsimilarity of these two options has led to the situation where the\nsysv4.h SUBTARGET_OVERRIDE_OPTIONS sets flag_pic on seeing\n-mrelocatable, and sets TARGET_RELOCATABLE on seeing -fPIC.  That\nprevents LTO from properly optimizing position dependent executables,\nbecause the mutual dependence of the flags and the fact that LTO\nstreaming records the state of rs6000_isa_flags, result in flag_pic\nbeing set when it shouldn't be.\n\nSo, don't set TARGET_RELOCATABLE when -fPIC.  Places that currently\ntest TARGET_RELOCATABLE can instead test\nTARGET_RELOCATABLE || (DEFAULT_ABI == ABI_V4 && flag_pic > 1)\nor since TARGET_RELOCATABLE can only be enabled when ABI_V4,\nDEFAULT_ABI == ABI_V4 && (TARGET_RELOCATABLE || flag_pic > 1).\n\nAlso, since flag_pic is set by -mrelocatable, a number of places that\ncurrently test TARGET_RELOCATABLE can be simplified.  I also made\n-mrelocatable set TARGET_NO_FP_IN_TOC, allowing TARGET_RELOCATABLE to\nbe removed from ASM_OUTPUT_SPECIAL_POOL_ENTRY_P.  Reducing occurrences\nof TARGET_RELOCATABLE is a good thing.\n\n\tPR target/68662\n\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Don't\n\tset OPTION_MASK_RELOCATABLE when flag_pic == 2.  Set\n\tTARGET_NO_FP_IN_TOC for -mrelocatable.\n\t(MINIMAL_TOC_SECTION_ASM_OP): Remove redundant\n\tTARGET_RELOCATABLE test.\n\t(ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Likewise.\n\t(ASM_PREFERRED_EH_DATA_FORMAT): Likewise.\n\t* config/rs6000/linux64.h (MINIMAL_TOC_SECTION_ASM_OP): Likewise.\n\t(ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Likewise.\n\t(ASM_PREFERRED_EH_DATA_FORMAT): Likewise.\n\t* config/rs6000/freebsd64.h (MINIMAL_TOC_SECTION_ASM_OP): Likewise.\n\t(ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Likewise.\n\t(ASM_PREFERRED_EH_DATA_FORMAT): Likewise.\n\t* config/rs6000/predicates.md (easy_fp_constant): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_elf_output_toc_section_asm_op):\n\tLikewise.\n\t(rs6000_assemble_integer): Update TARGET_RELOCATABLE test.\n\t(rs6000_stack_info): Likewise.\n\t(rs6000_elf_asm_out_constructor): Likewise.\n\t(rs6000_elf_asm_out_destructor): Likewise.\n\t(rs6000_elf_declare_function_name): Likewise.\n\t* config/rs6000/rs6000.md (load_toc_aix_di): Likewise.\n\t* config/rs6000/rs6000.h (MASK_RELOCATABLE, MASK_MINIMAL_TOC):\n\tDon't define.\n\nFrom-SVN: r235914", "tree": {"sha": "3630ad88930629f52870fa709c2cd73f619eba1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3630ad88930629f52870fa709c2cd73f619eba1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "552d4a3dc6c9252eea642ac49c4d737970ee5eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552d4a3dc6c9252eea642ac49c4d737970ee5eb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552d4a3dc6c9252eea642ac49c4d737970ee5eb3"}], "stats": {"total": 111, "additions": 65, "deletions": 46}, "files": [{"sha": "ba7f398b889b9ad160f57840087ed358e2fe214d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b", "patch": "@@ -1,3 +1,31 @@\n+2016-05-05  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/68662\n+\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Don't\n+\tset OPTION_MASK_RELOCATABLE when flag_pic == 2.  Set\n+\tTARGET_NO_FP_IN_TOC for -mrelocatable.\n+\t(MINIMAL_TOC_SECTION_ASM_OP): Remove redundant\n+\tTARGET_RELOCATABLE test.\n+\t(ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Likewise.\n+\t(ASM_PREFERRED_EH_DATA_FORMAT): Likewise.\n+\t* config/rs6000/linux64.h (MINIMAL_TOC_SECTION_ASM_OP): Likewise.\n+\t(ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Likewise.\n+\t(ASM_PREFERRED_EH_DATA_FORMAT): Likewise.\n+\t* config/rs6000/freebsd64.h (MINIMAL_TOC_SECTION_ASM_OP): Likewise.\n+\t(ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Likewise.\n+\t(ASM_PREFERRED_EH_DATA_FORMAT): Likewise.\n+\t* config/rs6000/predicates.md (easy_fp_constant): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_elf_output_toc_section_asm_op):\n+\tLikewise.\n+\t(rs6000_assemble_integer): Update TARGET_RELOCATABLE test.\n+\t(rs6000_stack_info): Likewise.\n+\t(rs6000_elf_asm_out_constructor): Likewise.\n+\t(rs6000_elf_asm_out_destructor): Likewise.\n+\t(rs6000_elf_declare_function_name): Likewise.\n+\t* config/rs6000/rs6000.md (load_toc_aix_di): Likewise.\n+\t* config/rs6000/rs6000.h (MASK_RELOCATABLE, MASK_MINIMAL_TOC):\n+\tDon't define.\n+\n 2016-05-05  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_frame_related): Rewrite."}, {"sha": "3038c43b25fa07564d6e7268b85c6eedf942b2a2", "filename": "gcc/config/rs6000/freebsd64.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h?ref=6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b", "patch": "@@ -349,7 +349,7 @@ extern int dot_symbols;\n    true if the symbol may be affected by dynamic relocations.  */\n #undef\tASM_PREFERRED_EH_DATA_FORMAT\n #define\tASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL) \\\n-  ((TARGET_64BIT || flag_pic || TARGET_RELOCATABLE)\t\t\t\\\n+  (TARGET_64BIT || flag_pic\t\t\t\t\t\t\\\n    ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel\t\t\\\n       | (TARGET_64BIT ? DW_EH_PE_udata8 : DW_EH_PE_sdata4))\t\t\\\n    : DW_EH_PE_absptr)\n@@ -384,7 +384,7 @@ extern int dot_symbols;\n #define MINIMAL_TOC_SECTION_ASM_OP \\\n   (TARGET_64BIT                                         \\\n    ? \"\\t.section\\t\\\".toc1\\\",\\\"aw\\\"\"                     \\\n-   : ((TARGET_RELOCATABLE || flag_pic)                  \\\n+   : (flag_pic\t\t\t\t\t\t\\\n       ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\"                  \\\n       : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\"))\n \n@@ -422,7 +422,6 @@ extern int dot_symbols;\n                         && ! TARGET_NO_FP_IN_TOC)))                     \\\n                || (!TARGET_64BIT                                        \\\n                    && !TARGET_NO_FP_IN_TOC                              \\\n-                   && !TARGET_RELOCATABLE                               \\\n                    && SCALAR_FLOAT_MODE_P (GET_MODE (X))                \\\n                    && BITS_PER_WORD == HOST_BITS_PER_INT)))))\n "}, {"sha": "e86b5d52ad6db214bd9644e9c8752790fa9423bc", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b", "patch": "@@ -489,7 +489,7 @@ extern int dot_symbols;\n #define MINIMAL_TOC_SECTION_ASM_OP \\\n   (TARGET_64BIT\t\t\t\t\t\t\\\n    ? \"\\t.section\\t\\\".toc1\\\",\\\"aw\\\"\"\t\t\t\\\n-   : ((TARGET_RELOCATABLE || flag_pic)\t\t\t\\\n+   : (flag_pic\t\t\t\t\t\t\\\n       ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\"\t\t\t\\\n       : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\"))\n \n@@ -585,7 +585,6 @@ extern int dot_symbols;\n \t\t\t&& ! TARGET_NO_FP_IN_TOC)))\t\t\t\\\n \t       || (!TARGET_64BIT\t\t\t\t\t\\\n \t\t   && !TARGET_NO_FP_IN_TOC\t\t\t\t\\\n-\t\t   && !TARGET_RELOCATABLE\t\t\t\t\\\n \t\t   && SCALAR_FLOAT_MODE_P (GET_MODE (X))\t\t\\\n \t\t   && BITS_PER_WORD == HOST_BITS_PER_INT)))))\n \n@@ -594,7 +593,7 @@ extern int dot_symbols;\n    true if the symbol may be affected by dynamic relocations.  */\n #undef\tASM_PREFERRED_EH_DATA_FORMAT\n #define\tASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL) \\\n-  ((TARGET_64BIT || flag_pic || TARGET_RELOCATABLE)\t\t\t\\\n+  (TARGET_64BIT || flag_pic\t\t\t\t\t\t\\\n    ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel\t\t\\\n       | (TARGET_64BIT ? DW_EH_PE_udata8 : DW_EH_PE_sdata4))\t\t\\\n    : DW_EH_PE_absptr)"}, {"sha": "3b40e3ad9538f9d92ec234b361048c946faec432", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b", "patch": "@@ -539,13 +539,6 @@\n   if (flag_pic && DEFAULT_ABI == ABI_V4)\n     return 0;\n \n-#ifdef TARGET_RELOCATABLE\n-  /* Similarly if we are using -mrelocatable, consider all constants\n-     to be hard.  */\n-  if (TARGET_RELOCATABLE)\n-    return 0;\n-#endif\n-\n   /* If we have real FPRs, consider floating point constants hard (other than\n      0.0 under VSX), so that the constant gets pushed to memory during the\n      early RTL phases.  This has the advantage that double precision constants"}, {"sha": "368fec2b3c857bf98ee0ef38b616d36c776a4075", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b", "patch": "@@ -20665,7 +20665,8 @@ rs6000_assemble_integer (rtx x, unsigned int size, int aligned_p)\n \t don't need to mark it here.  We used to skip the text section, but it\n \t should never be valid for relocated addresses to be placed in the text\n \t section.  */\n-      if (TARGET_RELOCATABLE\n+      if (DEFAULT_ABI == ABI_V4\n+\t  && (TARGET_RELOCATABLE || flag_pic > 1)\n \t  && in_section != toc_section\n \t  && !recurse\n \t  && !CONST_SCALAR_INT_P (x)\n@@ -23862,7 +23863,9 @@ rs6000_stack_info (void)\n \t  && !TARGET_PROFILE_KERNEL)\n       || (DEFAULT_ABI == ABI_V4 && cfun->calls_alloca)\n #ifdef TARGET_RELOCATABLE\n-      || (TARGET_RELOCATABLE && (get_pool_size () != 0))\n+      || (DEFAULT_ABI == ABI_V4\n+\t  && (TARGET_RELOCATABLE || flag_pic > 1)\n+\t  && get_pool_size () != 0)\n #endif\n       || rs6000_ra_ever_killed ())\n     info->lr_save_p = 1;\n@@ -31314,8 +31317,7 @@ static void\n rs6000_elf_output_toc_section_asm_op (const void *data ATTRIBUTE_UNUSED)\n {\n   if ((DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\n-      && TARGET_MINIMAL_TOC\n-      && !TARGET_RELOCATABLE)\n+      && TARGET_MINIMAL_TOC)\n     {\n       if (!toc_initialized)\n \t{\n@@ -31336,8 +31338,7 @@ rs6000_elf_output_toc_section_asm_op (const void *data ATTRIBUTE_UNUSED)\n       else\n \tfprintf (asm_out_file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\n     }\n-  else if ((DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\n-\t   && !TARGET_RELOCATABLE)\n+  else if (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\n     {\n       fprintf (asm_out_file, \"%s\\n\", TOC_SECTION_ASM_OP);\n       if (!toc_initialized)\n@@ -31928,7 +31929,8 @@ rs6000_elf_asm_out_constructor (rtx symbol, int priority)\n   switch_to_section (get_section (section, SECTION_WRITE, NULL));\n   assemble_align (POINTER_SIZE);\n \n-  if (TARGET_RELOCATABLE)\n+  if (DEFAULT_ABI == ABI_V4\n+      && (TARGET_RELOCATABLE || flag_pic > 1))\n     {\n       fputs (\"\\t.long (\", asm_out_file);\n       output_addr_const (asm_out_file, symbol);\n@@ -31958,7 +31960,8 @@ rs6000_elf_asm_out_destructor (rtx symbol, int priority)\n   switch_to_section (get_section (section, SECTION_WRITE, NULL));\n   assemble_align (POINTER_SIZE);\n \n-  if (TARGET_RELOCATABLE)\n+  if (DEFAULT_ABI == ABI_V4\n+      && (TARGET_RELOCATABLE || flag_pic > 1))\n     {\n       fputs (\"\\t.long (\", asm_out_file);\n       output_addr_const (asm_out_file, symbol);\n@@ -32000,7 +32003,8 @@ rs6000_elf_declare_function_name (FILE *file, const char *name, tree decl)\n       return;\n     }\n \n-  if (TARGET_RELOCATABLE\n+  if (DEFAULT_ABI == ABI_V4\n+      && (TARGET_RELOCATABLE || flag_pic > 1)\n       && !TARGET_SECURE_PLT\n       && (get_pool_size () != 0 || crtl->profile)\n       && uses_TOC ())"}, {"sha": "9647106fbcd04fe406014ca3e9878033770564f2", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b", "patch": "@@ -636,18 +636,10 @@ extern int rs6000_vector_align[];\n #define MASK_64BIT\t\t\tOPTION_MASK_64BIT\n #endif\n \n-#ifdef TARGET_RELOCATABLE\n-#define MASK_RELOCATABLE\t\tOPTION_MASK_RELOCATABLE\n-#endif\n-\n #ifdef TARGET_LITTLE_ENDIAN\n #define MASK_LITTLE_ENDIAN\t\tOPTION_MASK_LITTLE_ENDIAN\n #endif\n \n-#ifdef TARGET_MINIMAL_TOC\n-#define MASK_MINIMAL_TOC\t\tOPTION_MASK_MINIMAL_TOC\n-#endif\n-\n #ifdef TARGET_REGNAMES\n #define MASK_REGNAMES\t\t\tOPTION_MASK_REGNAMES\n #endif"}, {"sha": "ed1989cd2a633aa24b7f29480bd175f9c7a365fb", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b", "patch": "@@ -9499,12 +9499,8 @@\n   char buf[30];\n   extern int need_toc_init;\n   need_toc_init = 1;\n-#ifdef TARGET_RELOCATABLE\n   ASM_GENERATE_INTERNAL_LABEL (buf, \\\"LCTOC\\\",\n-\t\t\t       !TARGET_MINIMAL_TOC || TARGET_RELOCATABLE);\n-#else\n-  ASM_GENERATE_INTERNAL_LABEL (buf, \\\"LCTOC\\\", 1);\n-#endif\n+\t\t\t       !TARGET_ELF || !TARGET_MINIMAL_TOC);\n   if (TARGET_ELF)\n     strcat (buf, \\\"@toc\\\");\n   operands[1] = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));"}, {"sha": "46d2b4bcdbc9f724f07129c32d959941af6d926e", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=6a67e81be79a9f6890bbcbcd2d18e7c75bb14a5b", "patch": "@@ -190,16 +190,25 @@ do {\t\t\t\t\t\t\t\t\t\\\n       error (\"-msecure-plt not supported by your assembler\");\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  /* Treat -fPIC the same as -mrelocatable.  */\t\t\t\t\\\n   if (flag_pic > 1 && DEFAULT_ABI == ABI_V4)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      rs6000_isa_flags |= OPTION_MASK_RELOCATABLE | OPTION_MASK_MINIMAL_TOC; \\\n+      /* Note: flag_pic should not change any option flags that would\t\\\n+\t be invalid with or pessimise -fno-PIC code.  LTO turns off\t\\\n+\t flag_pic when linking/recompiling a fixed position executable. \\\n+\t However, if the objects were originally compiled with -fPIC,\t\\\n+\t then other target options forced on here by -fPIC are restored \\\n+\t when recompiling those objects without -fPIC.  In particular\t\\\n+\t TARGET_RELOCATABLE must not be enabled here by flag_pic.  */\t\\\n+      rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\t\t\t\\\n       TARGET_NO_FP_IN_TOC = 1;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  else if (TARGET_RELOCATABLE)\t\t\t\t\t\t\\\n-    if (!flag_pic)\t\t\t\t\t\t\t\\\n-      flag_pic = 2;\t\t\t\t\t\t\t\\\n+  if (TARGET_RELOCATABLE)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (!flag_pic)\t\t\t\t\t\t\t\\\n+\tflag_pic = 2;\t\t\t\t\t\t\t\\\n+      TARGET_NO_FP_IN_TOC = 1;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n #ifndef RS6000_BI_ARCH\n@@ -315,8 +324,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Put PC relative got entries in .got2.  */\n #define\tMINIMAL_TOC_SECTION_ASM_OP \\\n-  (TARGET_RELOCATABLE || (flag_pic && DEFAULT_ABI == ABI_V4)\t\t\\\n-   ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\" : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\")\n+  (flag_pic ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\" : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\")\n \n #define\tSDATA_SECTION_ASM_OP \"\\t.section\\t\\\".sdata\\\",\\\"aw\\\"\"\n #define\tSDATA2_SECTION_ASM_OP \"\\t.section\\t\\\".sdata2\\\",\\\"a\\\"\"\n@@ -350,7 +358,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n        || (GET_CODE (X) == CONST_INT \t\t\t\t\t\\\n \t   && GET_MODE_BITSIZE (MODE) <= GET_MODE_BITSIZE (Pmode))\t\\\n        || (!TARGET_NO_FP_IN_TOC\t\t\t\t\t\t\\\n-\t   && !TARGET_RELOCATABLE\t\t\t\t\t\\\n \t   && GET_CODE (X) == CONST_DOUBLE\t\t\t\t\\\n \t   && SCALAR_FLOAT_MODE_P (GET_MODE (X))\t\t\t\\\n \t   && BITS_PER_WORD == HOST_BITS_PER_INT)))\n@@ -939,9 +946,10 @@ ncrtn.o%s\"\n /* Select a format to encode pointers in exception handling data.  CODE\n    is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n    true if the symbol may be affected by dynamic relocations.  */\n-#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\t\t     \\\n-  ((flag_pic || TARGET_RELOCATABLE)\t\t\t\t\t     \\\n-   ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4) \\\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)\t\t\t\\\n+  (flag_pic\t\t\t\t\t\t\t\t\\\n+   ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel\t\t\\\n+      | DW_EH_PE_sdata4)\t\t\t\t\t\t\\\n    : DW_EH_PE_absptr)\n \n #define DOUBLE_INT_ASM_OP \"\\t.quad\\t\""}]}