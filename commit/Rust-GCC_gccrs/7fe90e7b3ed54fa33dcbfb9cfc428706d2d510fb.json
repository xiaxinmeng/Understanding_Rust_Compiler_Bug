{"sha": "7fe90e7b3ed54fa33dcbfb9cfc428706d2d510fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZlOTBlN2IzZWQ1NGZhMzNkY2JmYjljZmM0Mjg3MDZkMmQ1MTBmYg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-06-05T15:13:49Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-06-05T15:13:49Z"}, "message": "document -maix64 and -mpowerpc64 options of rs6000 port.\n\nimprove documentation of -mxl-call option.\nadd @kindex to a few more items.\n\nFrom-SVN: r20245", "tree": {"sha": "a729ebe4d665484031a071fdc99d4509239d8dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a729ebe4d665484031a071fdc99d4509239d8dd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fe90e7b3ed54fa33dcbfb9cfc428706d2d510fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe90e7b3ed54fa33dcbfb9cfc428706d2d510fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe90e7b3ed54fa33dcbfb9cfc428706d2d510fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe90e7b3ed54fa33dcbfb9cfc428706d2d510fb/comments", "author": null, "committer": null, "parents": [{"sha": "ec667585e9150328f19e0d3cdd9ee3fafb548b6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec667585e9150328f19e0d3cdd9ee3fafb548b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec667585e9150328f19e0d3cdd9ee3fafb548b6a"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "7e8facd795386921ddb15d0b883622303f66e86b", "filename": "gcc/invoke.texi", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe90e7b3ed54fa33dcbfb9cfc428706d2d510fb/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe90e7b3ed54fa33dcbfb9cfc428706d2d510fb/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=7fe90e7b3ed54fa33dcbfb9cfc428706d2d510fb", "patch": "@@ -294,7 +294,7 @@ in the following sections.\n -mpowerpc-gfxopt  -mno-powerpc-gfxopt\n -mnew-mnemonics  -mno-new-mnemonics\n -mfull-toc   -mminimal-toc  -mno-fop-in-toc  -mno-sum-in-toc\n--mxl-call  -mno-xl-call  -mthreads  -mpe\n+-maix64  -maix32  -mxl-call  -mno-xl-call  -mthreads  -mpe\n -msoft-float  -mhard-float  -mmultiple  -mno-multiple\n -mstring  -mno-string  -mupdate  -mno-update\n -mfused-madd  -mno-fused-madd  -mbit-align  -mno-bit-align\n@@ -4092,11 +4092,14 @@ These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @itemx -mno-powerpc-gpopt\n @itemx -mpowerpc-gfxopt\n @itemx -mno-powerpc-gfxopt\n+@itemx -mpowerpc64\n+@itemx -mno-powerpc64\n @kindex -mpower\n @kindex -mpower2\n @kindex -mpowerpc\n @kindex -mpowerpc-gpopt\n @kindex -mpowerpc-gfxopt\n+@kindex -mpowerpc64\n GNU CC supports two related instruction set architectures for the\n RS/6000 and PowerPC.  The @dfn{POWER} instruction set are those\n instructions supported by the @samp{rios} chip set used in the original\n@@ -4130,6 +4133,11 @@ General Purpose group, including floating-point square root.  Specifying\n use the optional PowerPC architecture instructions in the Graphics\n group, including floating-point select.\n \n+The @samp{-mpowerpc64} option allows GNU CC to generate the additional\n+64-bit instructions that are found in the full PowerPC64 architecture\n+and to treat GPRs as 64-bit, doubleword quantities.  GNU CC defaults to\n+@samp{-mno-powerpc64}.\n+\n If you specify both @samp{-mno-power} and @samp{-mno-powerpc}, GNU CC\n will use only the instructions in the common subset of both\n architectures plus some special AIX common-mode calls, and will not use\n@@ -4149,18 +4157,14 @@ Instructions defined in only one architecture have only one mnemonic;\n GNU CC uses that mnemonic irrespective of which of these options is\n specified.\n \n-PowerPC assemblers support both the old and new mnemonics, as will later\n-POWER assemblers.  Current POWER assemblers only support the old\n-mnemonics.  Specify @samp{-mnew-mnemonics} if you have an assembler that\n-supports them, otherwise specify @samp{-mold-mnemonics}.\n-\n-The default value of these options depends on how GNU CC was configured.\n-Specifying @samp{-mcpu=@var{cpu_type}} sometimes overrides the value of\n-these option.  Unless you are building a cross-compiler, you should\n-normally not specify either @samp{-mnew-mnemonics} or\n+GNU CC defaults to the mnemonics appropriate for the architecture in\n+use.  Specifying @samp{-mcpu=@var{cpu_type}} sometimes overrides the\n+value of these option.  Unless you are building a cross-compiler, you\n+should normally not specify either @samp{-mnew-mnemonics} or\n @samp{-mold-mnemonics}, but should instead accept the default.\n \n @item -mcpu=@var{cpu_type}\n+@kindex -mcpu\n Set architecture type, register usage, choice of mnemonics, and\n instruction scheduling parameters for machine type @var{cpu_type}.\n Supported values for @var{cpu_type} are @samp{rs6000}, @samp{rios1},\n@@ -4234,6 +4238,7 @@ instruction scheduling parameters.\n @itemx -mno-fp-in-toc\n @itemx -mno-sum-in-toc\n @itemx -mminimal-toc\n+@kindex -mminimal-toc\n Modify generation of the TOC (Table Of Contents), which is created for\n every executable file.  The @samp{-mfull-toc} option is selected by\n default.  In that case, GNU CC will allocate at least one TOC entry for\n@@ -4258,26 +4263,39 @@ option, GNU CC will produce code that is slower and larger but which\n uses extremely little TOC space.  You may wish to use this option\n only on files that contain less frequently executed code. @refill\n \n+@item -maix64\n+@itemx -maix32\n+@kindex -maix64\n+@kindex -maix32\n+Enable AIX 64-bit ABI and calling convention: 64-bit pointers, 64-bit\n+@code{long} type, and the infrastructure needed to support them.\n+Specifying @samp{-maix64} implies @samp{-mpowerpc64} and\n+@samp{-mpowerpc}, while @samp{-maix32} disables the 64-bit ABI and\n+implies @samp{-mno-powerpc64}.  GNU CC defaults to @samp{-maix32}.\n+\n @item -mxl-call\n @itemx -mno-xl-call\n+@kindex -mxl-call\n On AIX, pass floating-point arguments to prototyped functions beyond the\n register save area (RSA) on the stack in addition to argument FPRs.  The\n AIX calling convention was extended but not initially documented to\n handle an obscure K&R C case of calling a function that takes the\n address of its arguments with fewer arguments than declared.  AIX XL\n-compilers assume that floating point arguments which do not fit in the\n-RSA are on the stack when they compile a subroutine without\n+compilers access floating point arguments which do not fit in the\n+RSA from the stack when a subroutine is compiled without\n optimization.  Because always storing floating-point arguments on the\n stack is inefficient and rarely needed, this option is not enabled by\n default and only is necessary when calling subroutines compiled by AIX\n XL compilers without optimization.\n \n @item -mthreads\n+@kindex -mthreads\n Support @dfn{AIX Threads}.  Link an application written to use\n @dfn{pthreads} with special libraries and startup code to enable the\n application to run.\n \n @item -mpe\n+@kindex -mpe\n Support @dfn{IBM RS/6000 SP} @dfn{Parallel Environment} (PE).  Link an\n application written to use message passing with special startup code to\n enable the application to run.  The system must have PE installed in the\n@@ -4289,6 +4307,7 @@ option are incompatible.\n \n @item -msoft-float\n @itemx -mhard-float\n+@kindex -msoft-float\n Generate code that does not use (uses) the floating-point register set.\n Software floating point emulation is provided if you use the\n @samp{-msoft-float} option, and pass the option to GNU CC when linking.\n@@ -4304,6 +4323,7 @@ processor is in little endian mode.\n \n @item -mstring\n @itemx -mno-string\n+@kindex -mstring\n Generate code that uses (does not use) the load string instructions and the\n store string word instructions to save multiple registers and do small block\n moves.  These instructions are generated by default on POWER systems, and not\n@@ -4313,6 +4333,7 @@ little endian mode.\n \n @item -mupdate\n @itemx -mno-update\n+@kindex -mupdate\n Generate code that uses (does not use) the load or store instructions\n that update the base register to the address of the calculated memory\n location.  These instructions are generated by default.  If you use\n@@ -4323,12 +4344,14 @@ signals may get corrupted data.\n \n @item -mfused-madd\n @itemx -mno-fused-madd\n+@kindex -mfused-madd\n Generate code that uses (does not use) the floating point multiply and\n accumulate instructions.  These instructions are generated by default if\n hardware floating is used.\n \n @item -mno-bit-align\n @itemx -mbit-align\n+@kindex -mbit-align\n On System V.4 and embedded PowerPC systems do not (do) force structures\n and unions that contain bit fields to be aligned to the base type of the\n bit field.\n@@ -4341,11 +4364,13 @@ size.\n \n @item -mno-strict-align\n @itemx -mstrict-align\n+@kindex -mstrict-align\n On System V.4 and embedded PowerPC systems do not (do) assume that\n unaligned memory references will be handled by the system.\n \n @item -mrelocatable\n @itemx -mno-relocatable\n+@kindex -mrelocatable\n On embedded PowerPC systems generate code that allows (does not allow)\n the program to be relocated to a different address at runtime.  If you\n use @samp{-mrelocatable} on any module, all objects linked together must"}]}