{"sha": "73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjNWM1YmJiM2RiNmNjOTdlNTVjYjNhMjA3ZDgyN2Y0NDA0ZjMyZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2010-02-12T22:31:15Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-12T22:31:15Z"}, "message": "PR libstdc++/42819, DR 1315\n\n2010-02-12  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/42819, DR 1315\n\t* include/std/future (async): Use std::result_of for the template\n\targument of the std::future return type; adjust everywhere.\n\t* testsuite/30_threads/async/42819.cc: New.\n\t* testsuite/30_threads/packaged_task/cons/assign_neg.cc: Adjust\n\tdg-error line number.\n\t* testsuite/30_threads/packaged_task/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/future/cons/assign_neg.cc: Likewise.\n\t* testsuite/30_threads/future/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/promise/cons/assign_neg.cc: Likewise.\n\t* testsuite/30_threads/promise/cons/assign_neg.cc: Likewise.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r156742", "tree": {"sha": "02479959630e11c714da7c2f486204953c6408ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02479959630e11c714da7c2f486204953c6408ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/comments", "author": null, "committer": null, "parents": [{"sha": "da7d88bfc2d587bd1c5f670faf7832238a42ddba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7d88bfc2d587bd1c5f670faf7832238a42ddba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7d88bfc2d587bd1c5f670faf7832238a42ddba"}], "stats": {"total": 112, "additions": 96, "deletions": 16}, "files": [{"sha": "8dace9d17e3296a95a638ff7b562c2c101016397", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "patch": "@@ -1,3 +1,18 @@\n+2010-02-12  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/42819, DR 1315\n+\t* include/std/future (async): Use std::result_of for the template\n+\targument of the std::future return type; adjust everywhere.\n+\t* testsuite/30_threads/async/42819.cc: New.\n+\t* testsuite/30_threads/packaged_task/cons/assign_neg.cc: Adjust\n+\tdg-error line number.\n+\t* testsuite/30_threads/packaged_task/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/future/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/future/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/promise/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/promise/cons/assign_neg.cc: Likewise.\n+\n 2010-02-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* config/abi/pre/gnu.ver: Revert last changes."}, {"sha": "c97682dfff10fbad5baf4bb2b00936d8ecc44f2a", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "patch": "@@ -119,11 +119,14 @@ namespace std\n   enum class launch { any, async, sync };\n \n   template<typename _Fn, typename... _Args>\n-    future<typename _Fn::result_type>\n+    future<typename result_of<_Fn(_Args...)>::type>\n     async(launch __policy, _Fn&& __fn, _Args&&... __args);\n \n   template<typename _Fn, typename... _Args>\n-    future<typename _Fn::result_type>\n+    typename\n+    enable_if<!is_same<typename decay<_Fn>::type, launch>::value,\n+              future<decltype(std::declval<_Fn>()(std::declval<_Args>()...))>\n+             >::type\n     async(_Fn&& __fn, _Args&&... __args);\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1) \\\n@@ -558,7 +561,7 @@ namespace std\n       friend class promise<_Res>;\n       template<typename> friend class packaged_task;\n       template<typename _Fn, typename... _Args>\n-        friend future<typename _Fn::result_type>\n+        friend future<typename result_of<_Fn(_Args...)>::type>\n         async(launch, _Fn&&, _Args&&...);\n \n       typedef __basic_future<_Res> _Base_type;\n@@ -599,7 +602,7 @@ namespace std\n       friend class promise<_Res&>;\n       template<typename> friend class packaged_task;\n       template<typename _Fn, typename... _Args>\n-        friend future<typename _Fn::result_type>\n+        friend future<typename result_of<_Fn(_Args...)>::type>\n         async(launch, _Fn&&, _Args&&...);\n \n       typedef __basic_future<_Res&> _Base_type;\n@@ -640,7 +643,7 @@ namespace std\n       friend class promise<void>;\n       template<typename> friend class packaged_task;\n       template<typename _Fn, typename... _Args>\n-        friend future<typename _Fn::result_type>\n+        friend future<typename result_of<_Fn(_Args...)>::type>\n         async(launch, _Fn&&, _Args&&...);\n \n       typedef __basic_future<void> _Base_type;\n@@ -1322,10 +1325,10 @@ namespace std\n     };\n \n   template<typename _Fn, typename... _Args>\n-    future<typename _Fn::result_type>\n+    future<typename result_of<_Fn(_Args...)>::type>\n     async(launch __policy, _Fn&& __fn, _Args&&... __args)\n     {\n-      typedef typename _Fn::result_type result_type;\n+      typedef typename result_of<_Fn(_Args...)>::type result_type;\n       std::shared_ptr<__future_base::_State> __state;\n       if (__policy == launch::async)\n \t{\n@@ -1343,7 +1346,10 @@ namespace std\n     }\n \n   template<typename _Fn, typename... _Args>\n-    future<typename _Fn::result_type>\n+    inline typename\n+    enable_if<!is_same<typename decay<_Fn>::type, launch>::value,\n+              future<decltype(std::declval<_Fn>()(std::declval<_Args>()...))>\n+             >::type\n     async(_Fn&& __fn, _Args&&... __args)\n     {\n       return async(launch::any, std::forward<_Fn>(__fn),"}, {"sha": "c41606ec63de15443c8e02056ae1652760bc2f05", "filename": "libstdc++-v3/testsuite/30_threads/async/42819.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F42819.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F42819.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F42819.cc?ref=73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "patch": "@@ -0,0 +1,59 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+int do_work1(int value) { return value; }\n+int do_work2(int value) { return value * 2; }\n+\n+int work1(int value)\n+{\n+  auto handle = std::async([=] { return do_work2(value); });\n+  int tmp = do_work1(value);\n+  return tmp + handle.get();\n+}\n+\n+int work2(int value)\n+{\n+  auto handle = std::async(do_work2, value);\n+  int tmp = do_work1(value);\n+  return tmp + handle.get();\n+}\n+\n+// libstdc++/42819\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY( work1(1) == 3 );\n+  VERIFY( work2(2) == 6 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "eef414970552eb2efcb0a6effa7ae163281cb522", "filename": "libstdc++-v3/testsuite/30_threads/future/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fcons%2Fassign_neg.cc?ref=73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "patch": "@@ -4,7 +4,7 @@\n // { dg-require-gthreads \"\" }\n // { dg-require-atomic-builtins \"\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,4 +35,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 34 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 578 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 581 }"}, {"sha": "14d7046bed5017dd076f427cdca6901c91896152", "filename": "libstdc++-v3/testsuite/30_threads/future/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fcons%2Fcopy_neg.cc?ref=73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "patch": "@@ -4,7 +4,7 @@\n // { dg-require-gthreads \"\" }\n // { dg-require-atomic-builtins \"\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,4 +34,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 33 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 577 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 580 }"}, {"sha": "2b57a1c5b2f301be79e2ca3f67079187d82484ee", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc?ref=73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "patch": "@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 1225 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 1228 }"}, {"sha": "baf718354e514d329f11967d011a5ccb16db8489", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc?ref=73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 1224 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 1227 }"}, {"sha": "80b5e06e1d0f9c31d4f093462fd247695297b64c", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc?ref=73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "patch": "@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 868 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 871 }"}, {"sha": "27884b0bd1a2820f83270b204f063bfb636138e0", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c5c5bbb3db6cc97e55cb3a207d827f4404f32f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc?ref=73c5c5bbb3db6cc97e55cb3a207d827f4404f32f", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 852 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 855 }"}]}