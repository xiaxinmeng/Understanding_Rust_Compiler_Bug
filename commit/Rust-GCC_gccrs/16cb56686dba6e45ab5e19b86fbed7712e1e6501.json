{"sha": "16cb56686dba6e45ab5e19b86fbed7712e1e6501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjYjU2Njg2ZGJhNmU0NWFiNWUxOWI4NmZiZWQ3NzEyZTFlNjUwMQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-07-09T02:50:21Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-07-09T02:50:21Z"}, "message": "always define AUTO_INC_DEC\n\ngcc/ChangeLog:\n\n2015-07-08  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* rtl.h: Always define AUTO_INC_DEC.\n\t* auto-inc-dec.c (pass_inc_dec::execute): Adjust.\n\t* combine.c (combine_instructions): Likewise.\n\t(can_combine_p): Likewise.\n\t(try_combine): Likewise.\n\t* emit-rtl.c (try_split): Likewise.\n\t* loop-invariant.c (calculate_loop_reg_pressure): Likewise.\n\t* lower-subreg.c (resolve_simple_move): Likewise.\n\t* lra.c (update_inc_notes): Likewise.\n\t* recog.c (asm_operand_ok): Likewise.\n\t(constrain_operands): Likewise.\n\t* regrename.c (scan_rtx_address): Likewise.\n\t* reload.c (update_auto_inc_notes): Likewise.\n\t(find_equiv_reg): Likewise.\n\t* reload1.c (reload): Likewise.\n\t(reload_as_needed): Likewise.\n\t(choose_reload_regs): Likewise.\n\t(emit_input_reload_insns): Likewise.\n\t(delete_output_reload): Likewise.\n\t* sched-deps.c (init_insn_reg_pressure_info): Likewise.\n\t* valtrack.c (cleanup_auto_inc_dec): Likewise.\n\nFrom-SVN: r225595", "tree": {"sha": "811549fecda7e1892f0cfab1d67c45a99077483d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/811549fecda7e1892f0cfab1d67c45a99077483d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16cb56686dba6e45ab5e19b86fbed7712e1e6501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16cb56686dba6e45ab5e19b86fbed7712e1e6501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16cb56686dba6e45ab5e19b86fbed7712e1e6501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16cb56686dba6e45ab5e19b86fbed7712e1e6501/comments", "author": null, "committer": null, "parents": [{"sha": "de824c8b5dff45cd3ecd63b393d15f98a4f28e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de824c8b5dff45cd3ecd63b393d15f98a4f28e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de824c8b5dff45cd3ecd63b393d15f98a4f28e57"}], "stats": {"total": 98, "additions": 62, "deletions": 36}, "files": [{"sha": "62d1a9838c5700c4c569eb7f32a92b6fac14f859", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -1,3 +1,27 @@\n+2015-07-08  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* rtl.h: Always define AUTO_INC_DEC.\n+\t* auto-inc-dec.c (pass_inc_dec::execute): Adjust.\n+\t* combine.c (combine_instructions): Likewise.\n+\t(can_combine_p): Likewise.\n+\t(try_combine): Likewise.\n+\t* emit-rtl.c (try_split): Likewise.\n+\t* loop-invariant.c (calculate_loop_reg_pressure): Likewise.\n+\t* lower-subreg.c (resolve_simple_move): Likewise.\n+\t* lra.c (update_inc_notes): Likewise.\n+\t* recog.c (asm_operand_ok): Likewise.\n+\t(constrain_operands): Likewise.\n+\t* regrename.c (scan_rtx_address): Likewise.\n+\t* reload.c (update_auto_inc_notes): Likewise.\n+\t(find_equiv_reg): Likewise.\n+\t* reload1.c (reload): Likewise.\n+\t(reload_as_needed): Likewise.\n+\t(choose_reload_regs): Likewise.\n+\t(emit_input_reload_insns): Likewise.\n+\t(delete_output_reload): Likewise.\n+\t* sched-deps.c (init_insn_reg_pressure_info): Likewise.\n+\t* valtrack.c (cleanup_auto_inc_dec): Likewise.\n+\n 2015-07-08  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* combine.c (can_combine_def_p): Don't check the value of"}, {"sha": "5cab94d036d0ee41da734de603a398aff9d1ead2", "filename": "gcc/auto-inc-dec.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Fauto-inc-dec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Fauto-inc-dec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-inc-dec.c?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -116,7 +116,7 @@ along with GCC; see the file COPYING3.  If not see\n   before the ref or +c if the increment was after the ref, then if we\n   can do the combination but switch the pre/post bit.  */\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \n enum form\n {\n@@ -1470,7 +1470,7 @@ class pass_inc_dec : public rtl_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n       return (optimize > 0 && flag_auto_inc_dec);\n #else\n       return false;\n@@ -1485,7 +1485,7 @@ class pass_inc_dec : public rtl_opt_pass\n unsigned int\n pass_inc_dec::execute (function *fun ATTRIBUTE_UNUSED)\n {\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n   basic_block bb;\n   int max_reg = max_reg_num ();\n "}, {"sha": "5faa9c86f3bcfd4df87b56fa74b4ab9b5499d8c5", "filename": "gcc/combine.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -1197,7 +1197,7 @@ combine_instructions (rtx_insn *f, unsigned int nregs)\n       FOR_BB_INSNS (this_basic_block, insn)\n         if (INSN_P (insn) && BLOCK_FOR_INSN (insn))\n \t  {\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n             rtx links;\n #endif\n \n@@ -1208,7 +1208,7 @@ combine_instructions (rtx_insn *f, unsigned int nregs)\n \t\t         insn);\n \t    record_dead_and_set_regs (insn);\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \t    for (links = REG_NOTES (insn); links; links = XEXP (links, 1))\n \t      if (REG_NOTE_KIND (links) == REG_INC)\n \t        set_nonzero_bits_and_sign_copies (XEXP (links, 0), NULL_RTX,\n@@ -1792,7 +1792,7 @@ can_combine_p (rtx_insn *insn, rtx_insn *i3, rtx_insn *pred ATTRIBUTE_UNUSED,\n   const_rtx set = 0;\n   rtx src, dest;\n   rtx_insn *p;\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n   rtx link;\n #endif\n   bool all_adjacent = true;\n@@ -2073,7 +2073,7 @@ can_combine_p (rtx_insn *insn, rtx_insn *i3, rtx_insn *pred ATTRIBUTE_UNUSED,\n      Also insist that I3 not be a jump; if it were one\n      and the incremented register were spilled, we would lose.  */\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))\n     if (REG_NOTE_KIND (link) == REG_INC\n \t&& (JUMP_P (i3)\n@@ -3040,7 +3040,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t    || GET_CODE (XEXP (SET_DEST (PATTERN (i3)), 0)) == POST_DEC)))\n     /* It's not the exception.  */\n #endif\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n     {\n       rtx link;\n       for (link = REG_NOTES (i3); link; link = XEXP (link, 1))"}, {"sha": "1e8825ebb6dab0bd8c34bf2aa3fd9d5ad004b8ca", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -3588,7 +3588,7 @@ prev_cc0_setter (rtx_insn *insn)\n   return insn;\n }\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n /* Find a RTX_AUTOINC class rtx which matches DATA.  */\n \n static int\n@@ -3776,7 +3776,7 @@ try_split (rtx pat, rtx_insn *trial, int last)\n \t    }\n \t  break;\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \tcase REG_INC:\n \t  for (insn = insn_last; insn != NULL_RTX; insn = PREV_INSN (insn))\n \t    {"}, {"sha": "e1f138654236d5cc5f62ef58d195917743ed9d1d", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -1992,7 +1992,7 @@ calculate_loop_reg_pressure (void)\n \n \t  note_stores (PATTERN (insn), mark_reg_store, NULL);\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \t  for (link = REG_NOTES (insn); link; link = XEXP (link, 1))\n \t    if (REG_NOTE_KIND (link) == REG_INC)\n \t      mark_reg_store (XEXP (link, 0), NULL_RTX, NULL);"}, {"sha": "bedfc73715fa611cd91d9de7633bca3e6f774ae1", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -940,7 +940,7 @@ resolve_simple_move (rtx set, rtx_insn *insn)\n \n       reg = gen_reg_rtx (orig_mode);\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n       {\n \trtx move = emit_move_insn (reg, src);\n \tif (MEM_P (src))\n@@ -1043,7 +1043,7 @@ resolve_simple_move (rtx set, rtx_insn *insn)\n \tmdest = simplify_gen_subreg (orig_mode, dest, GET_MODE (dest), 0);\n       minsn = emit_move_insn (real_dest, mdest);\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n   if (MEM_P (real_dest)\n       && !(resolve_reg_p (real_dest) || resolve_subreg_p (real_dest)))\n     {"}, {"sha": "ce88d8f0e377d4c71d55f092cd77e818fe1edc43", "filename": "gcc/lra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -2088,7 +2088,7 @@ has_nonexceptional_receiver (void)\n   return false;\n }\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \n /* Process recursively X of INSN and add REG_INC notes if necessary.  */\n static void\n@@ -2143,7 +2143,7 @@ update_inc_notes (void)\n \t    else\n \t      pnote = &XEXP (*pnote, 1);\n \t  }\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \tadd_auto_inc_notes (insn, PATTERN (insn));\n #endif\n       }"}, {"sha": "3e50fa987907fbb0a80cd6ee3f94919ffdf2dbcf", "filename": "gcc/recog.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -1704,7 +1704,7 @@ int\n asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n {\n   int result = 0;\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n   bool incdec_ok = false;\n #endif\n \n@@ -1774,7 +1774,7 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \t    result = 1;\n \t  break;\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \tcase '<':\n \tcase '>':\n \t  /* ??? Before auto-inc-dec, auto inc/dec insns are not supposed\n@@ -1828,7 +1828,7 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \treturn 0;\n     }\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n   /* For operands without < or > constraints reject side-effects.  */\n   if (!incdec_ok && result && MEM_P (op))\n     switch (GET_CODE (XEXP (op, 0)))\n@@ -2806,7 +2806,7 @@ constrain_operands (int strict, alternative_mask alternatives)\n \t\t    = recog_data.operand[funny_match[funny_match_index].this_op];\n \t\t}\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \t      /* For operands without < or > constraints reject side-effects.  */\n \t      if (recog_data.is_asm)\n \t\t{"}, {"sha": "7ad60b6a51a16b459ecbdb6d0f7d6c8064bc2c5a", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -1307,7 +1307,7 @@ scan_rtx_address (rtx_insn *insn, rtx *loc, enum reg_class cl,\n     case PRE_INC:\n     case PRE_DEC:\n     case PRE_MODIFY:\n-#ifndef AUTO_INC_DEC\n+#if !AUTO_INC_DEC\n       /* If the target doesn't claim to handle autoinc, this must be\n \t something special, like a stack push.  Kill this chain.  */\n       action = mark_all_read;"}, {"sha": "3b6df378f164a37cddb5695887992387edb3d4e6", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -5447,7 +5447,7 @@ static void\n update_auto_inc_notes (rtx_insn *insn ATTRIBUTE_UNUSED, int regno ATTRIBUTE_UNUSED,\n \t\t       int reloadnum ATTRIBUTE_UNUSED)\n {\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n   rtx link;\n \n   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))\n@@ -7081,7 +7081,7 @@ find_equiv_reg (rtx goal, rtx_insn *insn, enum reg_class rclass, int other,\n \t\t}\n \t    }\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \t  /* If this insn auto-increments or auto-decrements\n \t     either regno or valueno, return 0 now.\n \t     If GOAL is a memory ref and its address is not constant,\n@@ -7168,7 +7168,7 @@ find_inc_amount (rtx x, rtx inced)\n /* Return 1 if registers from REGNO to ENDREGNO are the subjects of a\n    REG_INC note in insn INSN.  REGNO must refer to a hard register.  */\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n static int\n reg_inc_found_and_valid_p (unsigned int regno, unsigned int endregno,\n \t\t\t   rtx insn)"}, {"sha": "8c3e6e82a4373c29402ce6b6ffd0c0ddc27cd64f", "filename": "gcc/reload1.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -417,7 +417,7 @@ static void delete_output_reload (rtx_insn *, int, int, rtx);\n static void delete_address_reloads (rtx_insn *, rtx_insn *);\n static void delete_address_reloads_1 (rtx_insn *, rtx, rtx_insn *);\n static void inc_for_reload (rtx, rtx, rtx, int);\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n static void add_auto_inc_notes (rtx_insn *, rtx);\n #endif\n static void substitute (rtx *, const_rtx, rtx);\n@@ -1250,7 +1250,7 @@ reload (rtx_insn *first, int global)\n \t      pnote = &XEXP (*pnote, 1);\n \t  }\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \tadd_auto_inc_notes (insn, PATTERN (insn));\n #endif\n \n@@ -4581,7 +4581,7 @@ static void\n reload_as_needed (int live_known)\n {\n   struct insn_chain *chain;\n-#if defined (AUTO_INC_DEC)\n+#if AUTO_INC_DEC\n   int i;\n #endif\n   rtx_note *marker;\n@@ -4604,7 +4604,7 @@ reload_as_needed (int live_known)\n       rtx_insn *prev = 0;\n       rtx_insn *insn = chain->insn;\n       rtx_insn *old_next = NEXT_INSN (insn);\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n       rtx_insn *old_prev = PREV_INSN (insn);\n #endif\n \n@@ -4749,7 +4749,7 @@ reload_as_needed (int live_known)\n \t    if (NONJUMP_INSN_P (x) && GET_CODE (PATTERN (x)) == CLOBBER)\n \t      note_stores (PATTERN (x), forget_old_reloads_1, NULL);\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \t  /* Likewise for regs altered by auto-increment in this insn.\n \t     REG_INC notes have been changed by reloading:\n \t     find_reloads_address_1 records substitutions for them,\n@@ -6606,7 +6606,7 @@ choose_reload_regs (struct insn_chain *chain)\n \t\t    }\n \t\t  mode = GET_MODE (rld[r].in_reg);\n \t\t}\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \t      else if (GET_RTX_CLASS (GET_CODE (rld[r].in_reg)) == RTX_AUTOINC\n \t\t       && REG_P (XEXP (rld[r].in_reg, 0)))\n \t\t{\n@@ -7397,7 +7397,7 @@ emit_input_reload_insns (struct insn_chain *chain, struct reload *rl,\n \t     is ill-formed and we must reject this optimization.  */\n \t  extract_insn (temp);\n \t  if (constrain_operands (1, get_enabled_alternatives (temp))\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n \t      && ! find_reg_note (temp, REG_INC, reloadreg)\n #endif\n \t      )\n@@ -8870,7 +8870,7 @@ delete_output_reload (rtx_insn *insn, int j, int last_reload_reg,\n \tcontinue;\n       if (MEM_P (reg2) || reload_override_in[k])\n \treg2 = rld[k].in_reg;\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n       if (rld[k].out && ! rld[k].out_reg)\n \treg2 = XEXP (rld[k].in_reg, 0);\n #endif\n@@ -9266,7 +9266,7 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)\n     }\n }\n \f\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n static void\n add_auto_inc_notes (rtx_insn *insn, rtx x)\n {"}, {"sha": "fe64994f571962b032c4a26df9f18ddc464b08cf", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -2518,13 +2518,15 @@ do {\t\t\t\t\t\t\t\t        \\\n      || defined (HAVE_POST_INCREMENT) || defined (HAVE_POST_DECREMENT) \\\n      || defined (HAVE_PRE_MODIFY_DISP) || defined (HAVE_POST_MODIFY_DISP) \\\n      || defined (HAVE_PRE_MODIFY_REG) || defined (HAVE_POST_MODIFY_REG))\n-#define AUTO_INC_DEC\n+#define AUTO_INC_DEC 1\n+#else\n+#define AUTO_INC_DEC 0\n #endif\n \n /* Define a macro to look for REG_INC notes,\n    but save time on machines where they never exist.  */\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n #define FIND_REG_INC_NOTE(INSN, REG)\t\t\t\\\n   ((REG) != NULL_RTX && REG_P ((REG))\t\t\t\\\n    ? find_regno_note ((INSN), REG_INC, REGNO (REG))\t\\"}, {"sha": "d13655a4d9c3f7bbb83d7f1ec1e4bacbdd9bc353", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -2222,7 +2222,7 @@ init_insn_reg_pressure_info (rtx_insn *insn)\n \n   note_stores (PATTERN (insn), mark_insn_reg_store, insn);\n \n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))\n     if (REG_NOTE_KIND (link) == REG_INC)\n       mark_insn_reg_store (XEXP (link, 0), NULL_RTX, insn);"}, {"sha": "67dfd2b4ccc4ecf183a35aaa545f921bd3911ad1", "filename": "gcc/valtrack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Fvaltrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cb56686dba6e45ab5e19b86fbed7712e1e6501/gcc%2Fvaltrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.c?ref=16cb56686dba6e45ab5e19b86fbed7712e1e6501", "patch": "@@ -54,7 +54,7 @@ static rtx\n cleanup_auto_inc_dec (rtx src, machine_mode mem_mode ATTRIBUTE_UNUSED)\n {\n   rtx x = src;\n-#ifdef AUTO_INC_DEC\n+#if AUTO_INC_DEC\n   const RTX_CODE code = GET_CODE (x);\n   int i;\n   const char *fmt;"}]}