{"sha": "783d035ba7b56cde1b862ee9f276a3af1e35a1d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgzZDAzNWJhN2I1NmNkZTFiODYyZWU5ZjI3NmEzYWYxZTM1YTFkMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T09:37:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T09:37:41Z"}, "message": "[multiple changes]\n\n2014-07-18  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Remove note that -gnatR not allowed with -gnatc.\n\t* switch-c.adb: Remove prohibition of -gnatR and -gnatc together.\n\n2014-07-18  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch13.adb (Kill_Rep_Clause): Clear Comes_From_Source flag\n\ton the null statement.\n\n2014-07-18  Thomas Quinot  <quinot@adacore.com>\n\n\t* adaint.c: Minor comment rewording.\n\t* socket.c: Define macros _REENTRANT and _THREAD_SAFE so that\n\tuse of errno in this file is thread safe.\n\nFrom-SVN: r212791", "tree": {"sha": "dc09aded07caf72dce6d4164140933bc2b1b767b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc09aded07caf72dce6d4164140933bc2b1b767b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/783d035ba7b56cde1b862ee9f276a3af1e35a1d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783d035ba7b56cde1b862ee9f276a3af1e35a1d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/783d035ba7b56cde1b862ee9f276a3af1e35a1d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/comments", "author": null, "committer": null, "parents": [{"sha": "39678b1cce476a8a661ff58632a2d3c74ceb2bd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39678b1cce476a8a661ff58632a2d3c74ceb2bd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39678b1cce476a8a661ff58632a2d3c74ceb2bd9"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "77c7a7f8c6c59e395ea3f6bfd5c22477209c5632", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=783d035ba7b56cde1b862ee9f276a3af1e35a1d1", "patch": "@@ -1,3 +1,19 @@\n+2014-07-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Remove note that -gnatR not allowed with -gnatc.\n+\t* switch-c.adb: Remove prohibition of -gnatR and -gnatc together.\n+\n+2014-07-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch13.adb (Kill_Rep_Clause): Clear Comes_From_Source flag\n+\ton the null statement.\n+\n+2014-07-18  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* adaint.c: Minor comment rewording.\n+\t* socket.c: Define macros _REENTRANT and _THREAD_SAFE so that\n+\tuse of errno in this file is thread safe.\n+\n 2014-07-18  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat_ugn.texi: Doc clarification."}, {"sha": "9bfb6895f33079c6fc60a0a07a3fc3400166077a", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=783d035ba7b56cde1b862ee9f276a3af1e35a1d1", "patch": "@@ -34,7 +34,7 @@\n    package Osint.  Many of the subprograms in OS_Lib import standard\n    library calls directly. This file contains all other routines.  */\n \n-/* Ensure accesses to errno are thread safe.  */\n+/* Ensure access to errno is thread safe.  */\n #define _REENTRANT\n #define _THREAD_SAFE\n "}, {"sha": "04633a2392008b96349d44d85ab8d9550e5a14e7", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=783d035ba7b56cde1b862ee9f276a3af1e35a1d1", "patch": "@@ -4213,13 +4213,10 @@ Treat pragma Restrictions as Restriction_Warnings.\n @cindex @option{-gnatR} (@command{gcc})\n Output representation information for declared types and objects.\n Note that this switch is not allowed if a previous @code{-gnatD} switch has\n-been given, since these two switches are not compatible. It is also not allowed\n-if a previous @code{-gnatc} switch has been given, since we must be generating\n-code to be able to determine representation information.\n+been given, since these two switches are not compatible.\n \n @item ^-gnatRm[s]^/REPRESENTATION_INFO^\n Output convention and parameter passing mechanisms for all subprograms.\n-This form is also incompatible with the use of @code{-gnatc}.\n \n @item -gnats\n @cindex @option{-gnats} (@command{gcc})"}, {"sha": "317510ada17060956287078d2b848ec48d854638", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=783d035ba7b56cde1b862ee9f276a3af1e35a1d1", "patch": "@@ -10295,7 +10295,19 @@ package body Sem_Ch13 is\n    procedure Kill_Rep_Clause (N : Node_Id) is\n    begin\n       pragma Assert (Ignore_Rep_Clauses);\n+\n+      --  Note: we use Replace rather than Rewrite, because we don't want\n+      --  ASIS to be able to use Original_Node to dig out the (undecorated)\n+      --  rep clause that is being replaced.\n+\n       Replace (N, Make_Null_Statement (Sloc (N)));\n+\n+      --  The null statement must be marked as not coming from source. This is\n+      --  so that ASIS ignores if, and also the back end does not expect bogus\n+      --  \"from source\" null statements in weird places (e.g. in declarative\n+      --  regions where such null statements are not allowed).\n+\n+      Set_Comes_From_Source (N, False);\n    end Kill_Rep_Clause;\n \n    ------------------"}, {"sha": "310de25029f870929a2c979cbd66ffa677249ba5", "filename": "gcc/ada/socket.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/gcc%2Fada%2Fsocket.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/gcc%2Fada%2Fsocket.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsocket.c?ref=783d035ba7b56cde1b862ee9f276a3af1e35a1d1", "patch": "@@ -31,6 +31,10 @@\n \n /*  This file provides a portable binding to the sockets API                */\n \n+/* Ensure access to errno is thread safe.  */\n+#define _REENTRANT\n+#define _THREAD_SAFE\n+\n #include \"gsocket.h\"\n \n #if defined(VMS)"}, {"sha": "04a6fa188f36b4de536ca4e5c4b3c05ba6fd32fc", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783d035ba7b56cde1b862ee9f276a3af1e35a1d1/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=783d035ba7b56cde1b862ee9f276a3af1e35a1d1", "patch": "@@ -310,15 +310,6 @@ package body Switch.C is\n                     (\"-gnatc must be first if combined with other switches\");\n                end if;\n \n-               --  Not allowed if previous -gnatR given\n-\n-               if List_Representation_Info /= 0\n-                 or else List_Representation_Info_Mechanisms\n-               then\n-                  Osint.Fail\n-                    (\"-gnatc not allowed since -gnatR given previously\");\n-               end if;\n-\n                Ptr := Ptr + 1;\n                Operating_Mode := Check_Semantics;\n \n@@ -1057,14 +1048,6 @@ package body Switch.C is\n                     (\"-gnatR not permitted since -gnatD given previously\");\n                end if;\n \n-               --  Not allowed if previous -gnatc was given, since we must\n-               --  call the code generator to determine rep information.\n-\n-               if Operating_Mode = Check_Semantics then\n-                  Osint.Fail\n-                    (\"-gnatR not permitted since -gnatc given previously\");\n-               end if;\n-\n                --  Set to annotate rep info, and set default -gnatR mode\n \n                Back_Annotate_Rep_Info := True;"}]}