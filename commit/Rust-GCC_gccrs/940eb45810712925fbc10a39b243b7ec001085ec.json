{"sha": "940eb45810712925fbc10a39b243b7ec001085ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQwZWI0NTgxMDcxMjkyNWZiYzEwYTM5YjI0M2I3ZWMwMDEwODVlYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-04-11T13:40:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-17T08:14:02Z"}, "message": "[Ada] Fix small oversight in change to Optimize_Length_Comparison\n\n2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Optimize_Length_Comparison): Make sure the base\n\ttypes are the same when comparing Y'Last and X'Last directly.", "tree": {"sha": "bbe62a15e56ce657a3de0f236a8dc485c7e19b02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbe62a15e56ce657a3de0f236a8dc485c7e19b02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/940eb45810712925fbc10a39b243b7ec001085ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940eb45810712925fbc10a39b243b7ec001085ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/940eb45810712925fbc10a39b243b7ec001085ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940eb45810712925fbc10a39b243b7ec001085ec/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8806c4c5dad67648be37fda737a664961c1cf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8806c4c5dad67648be37fda737a664961c1cf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8806c4c5dad67648be37fda737a664961c1cf1"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "7ecc9c3c923a7d33863ad5ec3f313184a432c913", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940eb45810712925fbc10a39b243b7ec001085ec/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940eb45810712925fbc10a39b243b7ec001085ec/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=940eb45810712925fbc10a39b243b7ec001085ec", "patch": "@@ -14052,6 +14052,17 @@ package body Exp_Ch4 is\n          Set_Expressions (Left, New_List (New_Copy (Index (1))));\n       end if;\n \n+      --  Build the Last reference we will use\n+\n+      Right :=\n+        Make_Attribute_Reference (Loc,\n+          Prefix         => New_Occurrence_Of (Ent (1), Loc),\n+          Attribute_Name => Name_Last);\n+\n+      if Present (Index (1)) then\n+         Set_Expressions (Right, New_List (New_Copy (Index (1))));\n+      end if;\n+\n       --  If general value case, then do the addition of (n - 1), and\n       --  also add the needed conversions to type Long_Long_Integer.\n \n@@ -14083,16 +14094,27 @@ package body Exp_Ch4 is\n                Analyze (Left);\n                Analyze (Y_First);\n \n-               --  If X'First = Y'First, rewrite it into a direct comparison\n-               --  of Y'Last and X'Last without conversions.\n+               --  If X'First = Y'First, simplify the above formula into a\n+               --  direct comparison of Y'Last and X'Last.\n \n                R := Compile_Time_Compare (Left, Y_First, Assume_Valid => True);\n \n                if R = EQ then\n-                  Left := Y_Last;\n-                  Comp := Empty;\n+                  Analyze (Right);\n+                  Analyze (Y_Last);\n \n-               --  Otherwise, use the above formula\n+                  --  If the base types are different, convert both operands to\n+                  --  Long_Long_Integer, else compare them directly.\n+\n+                  if Base_Type (Etype (Right)) /= Base_Type (Etype (Y_Last))\n+                  then\n+                     Left := Convert_To_Long_Long_Integer (Y_Last);\n+                  else\n+                     Left := Y_Last;\n+                     Comp := Empty;\n+                  end if;\n+\n+               --  Otherwise, use the above formula as-is\n \n                else\n                   Left :=\n@@ -14120,17 +14142,6 @@ package body Exp_Ch4 is\n          end if;\n       end if;\n \n-      --  Build the Last reference we will use\n-\n-      Right :=\n-        Make_Attribute_Reference (Loc,\n-          Prefix         => New_Occurrence_Of (Ent (1), Loc),\n-          Attribute_Name => Name_Last);\n-\n-      if Present (Index (1)) then\n-         Set_Expressions (Right, New_List (New_Copy (Index (1))));\n-      end if;\n-\n       --  If general operand, convert Last reference to Long_Long_Integer\n \n       if Present (Comp) then"}]}