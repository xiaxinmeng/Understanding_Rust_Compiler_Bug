{"sha": "126dbce033efc65645fd30054f0c33c56df91529", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI2ZGJjZTAzM2VmYzY1NjQ1ZmQzMDA1NGYwYzMzYzU2ZGY5MTUyOQ==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@amelek.gda.pl", "date": "2002-07-10T21:08:41Z"}, "committer": {"name": "Marek Michalkiewicz", "email": "marekm@gcc.gnu.org", "date": "2002-07-10T21:08:41Z"}, "message": "avr.md: Fix two 0x80000000 constants to make them negative also on 64-bit hosts.\n\n\n\t* config/avr/avr.md: Fix two 0x80000000 constants to make them\n\tnegative also on 64-bit hosts.\n\n\tDefault to -fno-reorder-blocks when optimizing for size.\n\t* config/avr/avr-protos.h (avr_optimization_options): Declare.\n\t* config/avr/avr.c (avr_optimization_options): New function.\n\t* config/avr/avr.h (OPTIMIZATION_OPTIONS): New.\n\n\tOptimize returning from simple functions.\n\t* config/avr/avr-protos.h (avr_simple_epilogue): Declare.\n\t* config/avr/avr.c (avr_simple_epilogue): New function.\n\t* config/avr/avr.md (return): New insn.\n\nFrom-SVN: r55378", "tree": {"sha": "911076be84594cb92d5006b163a575cc0dcd7dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/911076be84594cb92d5006b163a575cc0dcd7dbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/126dbce033efc65645fd30054f0c33c56df91529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126dbce033efc65645fd30054f0c33c56df91529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/126dbce033efc65645fd30054f0c33c56df91529", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126dbce033efc65645fd30054f0c33c56df91529/comments", "author": null, "committer": null, "parents": [{"sha": "21c318ba4d9b2e6d4cbdd9241e8649f4c27c3098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c318ba4d9b2e6d4cbdd9241e8649f4c27c3098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c318ba4d9b2e6d4cbdd9241e8649f4c27c3098"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "39f35e588978f235e384351780453dfe03ff4c95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126dbce033efc65645fd30054f0c33c56df91529/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126dbce033efc65645fd30054f0c33c56df91529/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=126dbce033efc65645fd30054f0c33c56df91529", "patch": "@@ -1,3 +1,18 @@\n+2002-07-10  Marek Michalkiewicz  <marekm@amelek.gda.pl>\n+\n+\t* config/avr/avr.md: Fix two 0x80000000 constants to make them\n+\tnegative also on 64-bit hosts.\n+\n+\tDefault to -fno-reorder-blocks when optimizing for size.\n+\t* config/avr/avr-protos.h (avr_optimization_options): Declare.\n+\t* config/avr/avr.c (avr_optimization_options): New function.\n+\t* config/avr/avr.h (OPTIMIZATION_OPTIONS): New.\n+\n+\tOptimize returning from simple functions.\n+\t* config/avr/avr-protos.h (avr_simple_epilogue): Declare.\n+\t* config/avr/avr.c (avr_simple_epilogue): New function.\n+\t* config/avr/avr.md (return): New insn.\n+\n 2002-07-10  Douglas B Rupp  <rupp@gnat.com>\n \n \t* config/i386/i386.c  (ix86_svr3_asm_out_constructor): Add\n@@ -1213,7 +1228,6 @@ Thu Jun 20 00:26:53 2002  Denis Chertykov  <denisc@overta.ru>\n \tat start of buffer.\n \t* gcc.c (trad_capable_cpp): Use cc1 always.\n \n->>>>>>> 1.14808\n 2002-06-20  Jeffrey Law  <law@redhat.com>\n \n \t* i386.h (TARGET_DEFAULT): Do not turn on frame pointer"}, {"sha": "20841a72b70692a284a1f5174015bb3b6d771450", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126dbce033efc65645fd30054f0c33c56df91529/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126dbce033efc65645fd30054f0c33c56df91529/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=126dbce033efc65645fd30054f0c33c56df91529", "patch": "@@ -26,6 +26,7 @@ extern void   asm_file_start                    PARAMS ((FILE *file));\n extern void   asm_file_end                      PARAMS ((FILE *file));\n extern void   avr_init_once                     PARAMS ((void));\n extern void   avr_override_options              PARAMS ((void));\n+extern void   avr_optimization_options\t\tPARAMS ((int level, int size));\n extern char * avr_change_section                PARAMS ((char *sect_name));\n extern int    avr_ret_register                  PARAMS ((void));\n extern enum reg_class class_likely_spilled_p    PARAMS ((int c));\n@@ -35,6 +36,7 @@ extern int    frame_pointer_required_p          PARAMS ((void));\n extern void   asm_globalize_label         PARAMS ((FILE *file, const char *name));\n extern void   order_regs_for_local_alloc  PARAMS ((void));\n extern int    initial_elimination_offset  PARAMS ((int from, int to));\n+extern int    avr_simple_epilogue         PARAMS ((void));\n extern void   progmem_section             PARAMS ((void));\n extern int    mask_one_bit_p              PARAMS ((HOST_WIDE_INT mask));\n extern void   gas_output_limited_string PARAMS ((FILE *file, const char *str));"}, {"sha": "bb879ef3148d9688a048ae7f1faba62afe202ca7", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126dbce033efc65645fd30054f0c33c56df91529/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126dbce033efc65645fd30054f0c33c56df91529/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=126dbce033efc65645fd30054f0c33c56df91529", "patch": "@@ -259,6 +259,16 @@ avr_override_options ()\n }\n \n \n+void\n+avr_optimization_options (level, size)\n+     int level ATTRIBUTE_UNUSED;\n+     int size;\n+{\n+  if (size)\n+    flag_reorder_blocks = 0;\n+}\n+\n+\n /* Initialize TMP_REG_RTX and ZERO_REG_RTX */\n void\n avr_init_once ()\n@@ -445,6 +455,21 @@ initial_elimination_offset (from, to)\n     }\n }\n \n+/* Return 1 if the function epilogue is just a single \"ret\".  */\n+\n+int\n+avr_simple_epilogue ()\n+{\n+  return (! frame_pointer_needed\n+\t  && get_frame_size () == 0\n+\t  && avr_regs_to_save (NULL) == 0\n+\t  && ! interrupt_function_p (current_function_decl)\n+\t  && ! signal_function_p (current_function_decl)\n+\t  && ! avr_naked_function_p (current_function_decl)\n+\t  && ! MAIN_NAME_P (DECL_NAME (current_function_decl))\n+\t  && ! TREE_THIS_VOLATILE (current_function_decl));\n+}\n+\n /* This function checks sequence of live registers */\n \n static int"}, {"sha": "eb404972ceadf5ee1ead4ac116239621064daace", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126dbce033efc65645fd30054f0c33c56df91529/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126dbce033efc65645fd30054f0c33c56df91529/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=126dbce033efc65645fd30054f0c33c56df91529", "patch": "@@ -121,7 +121,7 @@ extern int avr_asm_only_p;\n    fprintf (stderr, \" (68k, MIT syntax)\");\n    #endif  */\n \n-#define OVERRIDE_OPTIONS avr_override_options()\n+#define OVERRIDE_OPTIONS avr_override_options ()\n /* `OVERRIDE_OPTIONS'\n    Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro\n@@ -132,6 +132,9 @@ extern int avr_asm_only_p;\n    Don't use this macro to turn on various extra optimizations for\n    `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n \n+#define OPTIMIZATION_OPTIONS(LEVEL, SIZE) \\\n+   avr_optimization_options (LEVEL, SIZE)\n+\n #define CAN_DEBUG_WITHOUT_FP\n /* Define this macro if debugging can be performed even without a\n    frame pointer.  If this macro is defined, GNU CC will turn on the"}, {"sha": "c237dcd7a1c7054284cb4164fe9f6a6ca0032501", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126dbce033efc65645fd30054f0c33c56df91529/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126dbce033efc65645fd30054f0c33c56df91529/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=126dbce033efc65645fd30054f0c33c56df91529", "patch": "@@ -1966,7 +1966,7 @@\n \t\t\t       (const_int 0))\n \t\t\t   (label_ref (match_dup 1))\n \t\t\t   (pc)))]\n-  \"operands[2] = GEN_INT (0x80000000);\")\n+  \"operands[2] = GEN_INT (-2147483647 - 1);\")\n \n (define_peephole2\n   [(set (cc0) (match_operand:SI 0 \"register_operand\" \"\"))\n@@ -1978,7 +1978,7 @@\n \t\t\t       (const_int 0))\n \t\t\t   (label_ref (match_dup 1))\n \t\t\t   (pc)))]\n-  \"operands[2] = GEN_INT (0x80000000);\")\n+  \"operands[2] = GEN_INT (-2147483647 - 1);\")\n \n ;; ************************************************************************\n ;; Implementation of conditional jumps here.\n@@ -2143,6 +2143,13 @@\n \t\t\t\t\t(const_int 2)\n \t\t\t\t\t(const_int 1))])])\n \n+(define_insn \"return\"\n+  [(return)]\n+  \"reload_completed && avr_simple_epilogue ()\"\n+  \"ret\"\n+  [(set_attr \"cc\" \"none\")\n+   (set_attr \"length\" \"1\")])\n+\n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\""}]}