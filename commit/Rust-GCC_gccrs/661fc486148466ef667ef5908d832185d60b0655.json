{"sha": "661fc486148466ef667ef5908d832185d60b0655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxZmM0ODYxNDg0NjZlZjY2N2VmNTkwOGQ4MzIxODVkNjBiMDY1NQ==", "commit": {"author": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2004-10-12T20:51:50Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2004-10-12T20:51:50Z"}, "message": "Restored acciddental check-in.\n\nFrom-SVN: r88951", "tree": {"sha": "257455e859ff7b694ab95e5b508c7093ba96a63d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/257455e859ff7b694ab95e5b508c7093ba96a63d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/661fc486148466ef667ef5908d832185d60b0655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661fc486148466ef667ef5908d832185d60b0655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/661fc486148466ef667ef5908d832185d60b0655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661fc486148466ef667ef5908d832185d60b0655/comments", "author": null, "committer": null, "parents": [{"sha": "01d8c00bfc35c4abb8868f87a385639545b0e849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d8c00bfc35c4abb8868f87a385639545b0e849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d8c00bfc35c4abb8868f87a385639545b0e849"}], "stats": {"total": 8, "additions": 0, "deletions": 8}, "files": [{"sha": "827f91d151106d7bf86965f0139751e77bce4e42", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661fc486148466ef667ef5908d832185d60b0655/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661fc486148466ef667ef5908d832185d60b0655/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=661fc486148466ef667ef5908d832185d60b0655", "patch": "@@ -1634,20 +1634,12 @@ find_replaceable_in_bb (temp_expr_table_p tab, basic_block bb)\n   var_map map = tab->map;\n   value_expr_p p;\n   ssa_op_iter iter;\n-  bitmap_iterator bi;\n \n   for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n     {\n       stmt = bsi_stmt (bsi);\n       ann = stmt_ann (stmt);\n \n-      if (TREE_CODE (stmt) == ASM_EXPR && ASM_VOLATILE_P (stmt))\n-\t{\n-\t  /* Volatile ASM_EXPRs kill all current expressions.  */\n-\t  EXECUTE_IF_SET_IN_BITMAP ((tab->partition_in_use), 0, partition, bi)\n-\t    kill_expr (tab, partition, false);\n-\t  continue;\n-\t}\n       /* Determine if this stmt finishes an existing expression.  */\n       FOR_EACH_SSA_TREE_OPERAND (def, stmt, iter, SSA_OP_USE)\n \t{"}]}