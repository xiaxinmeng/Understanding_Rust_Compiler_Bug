{"sha": "9e291dbee4dc3e88fd17ea78354a41eb919d0d15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyOTFkYmVlNGRjM2U4OGZkMTdlYTc4MzU0YTQxZWI5MTlkMGQxNQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-03-19T21:57:35Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-03-19T21:57:35Z"}, "message": "remove extraneous code checked in with previous delta\n\nFrom-SVN: r32645", "tree": {"sha": "6f5d32ae810fd2c235d1cbe200d9294457d969c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f5d32ae810fd2c235d1cbe200d9294457d969c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e291dbee4dc3e88fd17ea78354a41eb919d0d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e291dbee4dc3e88fd17ea78354a41eb919d0d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e291dbee4dc3e88fd17ea78354a41eb919d0d15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e291dbee4dc3e88fd17ea78354a41eb919d0d15/comments", "author": null, "committer": null, "parents": [{"sha": "1722dcfc0caf6d51093981402856aa7395df2866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1722dcfc0caf6d51093981402856aa7395df2866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1722dcfc0caf6d51093981402856aa7395df2866"}], "stats": {"total": 33, "additions": 5, "deletions": 28}, "files": [{"sha": "6051cd1781a92a6d3e05f7b6a50d465b81d3c618", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e291dbee4dc3e88fd17ea78354a41eb919d0d15/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e291dbee4dc3e88fd17ea78354a41eb919d0d15/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9e291dbee4dc3e88fd17ea78354a41eb919d0d15", "patch": "@@ -497,12 +497,6 @@ arm_override_options ()\n   if (write_symbols != NO_DEBUG && flag_omit_frame_pointer)\n     warning (\"-g with -fomit-frame-pointer may not give sensible debugging\");\n   \n-  if (TARGET_BUGGY_RETURN_IN_MEMORY && TARGET_ATPCS)\n-    {\n-      warning (\"-mbuggy-return-in-memory is overriden by -matpcs.\");\n-      target_flags &= ~ARM_FLAG_BUGGY_RETURN_IN_MEMORY;\n-    }\n-  \n   /* If stack checking is disabled, we can use r10 as the PIC register,\n      which keeps r9 available.  */\n   if (flag_pic && ! TARGET_APCS_STACK)\n@@ -1399,18 +1393,13 @@ arm_return_in_memory (type)\n      tree type;\n {\n   if (! AGGREGATE_TYPE_P (type))\n-    /* All simple types are returned in registers. */\n+    /* All simple types are returned in registers.  */\n     return 0;\n \n   if (int_size_in_bytes (type) > 4)\n-    /* All structures/unions bigger than one word are returned in memory. */\n+    /* All structures/unions bigger than one word are returned in memory.  */\n     return 1;\n \n-  if (TARGET_ATPCS)\n-    /* The ATPCS says that any structure or union of no larger than\n-       one word is returned in a register.  */\n-    return 0;\n-  \n   if (TREE_CODE (type) == RECORD_TYPE)\n     {\n       tree field;\n@@ -1429,25 +1418,13 @@ arm_return_in_memory (type)\n \tcontinue;\n       \n       if (field == NULL)\n-\treturn 0; /* An empty structure.  Allowed by an extension to ANSI C. */\n+\treturn 0; /* An empty structure.  Allowed by an extension to ANSI C.  */\n \n       /* Check that the first field is valid for returning in a register...  */\n-\n-      /* The APCS only says that the structrue must be integer-like.  It\n-\t does not say that it may not contain integer values.  Thus\n-\t struct { float a; } should be returned in a register.  Earlier\n-\t implementations got this wrong.  */\n-      if (TARGET_BUGGY_RETURN_IN_MEMORY\n-\t  && FLOAT_TYPE_P (TREE_TYPE (field)))\n+      if (FLOAT_TYPE_P (TREE_TYPE (field)))\n \treturn 1;\n \n-      /* Similarly the APCS only insists that all the sub-fields of a\n-\t structure be addressible.  It does not insist that if these\n-\t sub-fields themselves are structures that they also conform\n-\t to the integer-like specification.  This is another thing\n-\t that the old compiler did incorrectly.  */\n-      if (TARGET_BUGGY_RETURN_IN_MEMORY\n-\t  && RETURN_IN_MEMORY (TREE_TYPE (field)))\n+      if (RETURN_IN_MEMORY (TREE_TYPE (field)))\n \treturn 1;\n \n       /* Now check the remaining fields, if any.  Only bitfields are allowed,"}]}