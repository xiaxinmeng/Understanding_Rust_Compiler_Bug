{"sha": "01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFlZmI5NjM2YmNiMzAwOWI0N2ZkN2Q4ZTFkNmYwZDE3N2QzZTQwZA==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2001-07-17T21:51:19Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2001-07-17T21:51:19Z"}, "message": "configure.in (assembler eh_frame optimization): Handle big endian.\n\n\t* configure.in  (assembler eh_frame optimization): Handle big\n\tendian.\n\t* configure: Regenerated.\n\nFrom-SVN: r44091", "tree": {"sha": "47bdd85211d3f6262273002b6ba23cfadcd170f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47bdd85211d3f6262273002b6ba23cfadcd170f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7e9703c27ee1b02df751646742fb5020a2d2b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e9703c27ee1b02df751646742fb5020a2d2b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e9703c27ee1b02df751646742fb5020a2d2b8c"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "b32efa6781629d904426d8498b2cc75f278524c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d", "patch": "@@ -1,3 +1,9 @@\n+2001-07-17  Andreas Schwab  <schwab@suse.de>\n+\n+\t* configure.in  (assembler eh_frame optimization): Handle big\n+\tendian.\n+\t* configure: Regenerated.\n+\n Tue Jul 17 23:43:31 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* expr.c (epxand_expr): Convert divisions into multiplications by"}, {"sha": "bddcc6e663e6538bbfeeb8d3df6eb5fe384658d0", "filename": "gcc/configure", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d", "patch": "@@ -7009,17 +7009,23 @@ __FRAME_BEGIN__:\n \t.4byte\t.L1-.LFB1\n .LEFDE1:\n EOF\n-\t\tcat > conftest.exp <<EOF\n+\t\tcat > conftest.lit <<EOF\n  0000 10000000 00000000 017a0001 781a0004  .........z..x...\n  0010 01000000 12000000 18000000 00000000  ................\n  0020 08000000 04080000 0044               .........D      \n+EOF\n+\t\tcat > conftest.big <<EOF\n+ 0000 00000010 00000000 017a0001 781a0004  .........z..x...\n+ 0010 00000001 00000012 00000018 00000000  ................\n+ 0020 00000008 04000000 0844               .........D      \n EOF\n \t\t# If the assembler didn't choke, and we can objdump,\n \t\t# and we got the correct data, then succeed.\n \t\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n \t\t   && objdump -s -j .eh_frame conftest.o 2>/dev/null \\\n \t\t      | tail -3 > conftest.got \\\n-\t\t   && cmp conftest.exp conftest.got > /dev/null 2>&1\n+\t\t   && { cmp conftest.lit conftest.got > /dev/null 2>&1 \\\n+\t\t        || cmp conftest.big conftest.got > /dev/null 2>&1; }\n \t\tthen\n \t\t\tgcc_cv_as_eh_frame=\"yes\"\n \t\telse\n@@ -7039,7 +7045,7 @@ echo \"$ac_t\"\"$gcc_cv_as_eh_frame\" 1>&6\n case \"$target\" in \n   sparc*-*-*)\n     echo $ac_n \"checking assembler .register pseudo-op support\"\"... $ac_c\" 1>&6\n-echo \"configure:7043: checking assembler .register pseudo-op support\" >&5\n+echo \"configure:7049: checking assembler .register pseudo-op support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_register_pseudo_op'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7067,7 +7073,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler supports -relax\"\"... $ac_c\" 1>&6\n-echo \"configure:7071: checking assembler supports -relax\" >&5\n+echo \"configure:7077: checking assembler supports -relax\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_relax_opt'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7097,7 +7103,7 @@ EOF\n     case \"$tm_file\" in\n     *64*)\n \techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6\n-echo \"configure:7101: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n+echo \"configure:7107: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_flags64'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7142,7 +7148,7 @@ EOF\n \n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:7146: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:7152: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7182,7 +7188,7 @@ EOF\n \n   i[34567]86-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:7186: checking assembler instructions\" >&5\n+echo \"configure:7192: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n       if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -7211,7 +7217,7 @@ EOF\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:7215: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:7221: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -7396,7 +7402,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:7400: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:7406: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "6740b0c086a69cd7b5f305af9f7e01c86a488c72", "filename": "gcc/configure.in", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=01efb9636bcb3009b47fd7d8e1d6f0d177d3e40d", "patch": "@@ -1460,17 +1460,23 @@ __FRAME_BEGIN__:\n \t.4byte\t.L1-.LFB1\n .LEFDE1:\n EOF\n-\t\tcat > conftest.exp <<EOF\n+\t\tcat > conftest.lit <<EOF\n  0000 10000000 00000000 017a0001 781a0004  .........z..x...\n  0010 01000000 12000000 18000000 00000000  ................\n  0020 08000000 04080000 0044               .........D      \n+EOF\n+\t\tcat > conftest.big <<EOF\n+ 0000 00000010 00000000 017a0001 781a0004  .........z..x...\n+ 0010 00000001 00000012 00000018 00000000  ................\n+ 0020 00000008 04000000 0844               .........D      \n EOF\n \t\t# If the assembler didn't choke, and we can objdump,\n \t\t# and we got the correct data, then succeed.\n \t\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n \t\t   && objdump -s -j .eh_frame conftest.o 2>/dev/null \\\n \t\t      | tail -3 > conftest.got \\\n-\t\t   && cmp conftest.exp conftest.got > /dev/null 2>&1\n+\t\t   && { cmp conftest.lit conftest.got > /dev/null 2>&1 \\\n+\t\t        || cmp conftest.big conftest.got > /dev/null 2>&1; }\n \t\tthen\n \t\t\tgcc_cv_as_eh_frame=\"yes\"\n \t\telse"}]}