{"sha": "33b45227e0826ce8ddfe659c42f2c35cc0814065", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNiNDUyMjdlMDgyNmNlOGRkZmU2NTljNDJmMmMzNWNjMDgxNDA2NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-01-22T04:53:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-01-22T04:53:33Z"}, "message": "re PR c++/34196 (uninitialized variable warning in dead exception region)\n\n        PR c++/34196\n        * tree.h (TRY_CATCH_IS_CLEANUP): New macro.\n        * cp/decl.c (wrap_cleanups_r): Set TRY_CATCH_IS_CLEANUP.\n        * tree-eh.c (honor_protect_cleanup_actions): Strip TRY_CATCH_EXPR\n        if it is set.\n\nFrom-SVN: r131710", "tree": {"sha": "1cf758304e987f9c212d745d72e58a7eefe2e85f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cf758304e987f9c212d745d72e58a7eefe2e85f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33b45227e0826ce8ddfe659c42f2c35cc0814065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b45227e0826ce8ddfe659c42f2c35cc0814065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b45227e0826ce8ddfe659c42f2c35cc0814065", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b45227e0826ce8ddfe659c42f2c35cc0814065/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9444edce910401a6aaf7fb7a535d52f6c2780be4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9444edce910401a6aaf7fb7a535d52f6c2780be4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9444edce910401a6aaf7fb7a535d52f6c2780be4"}], "stats": {"total": 87, "additions": 84, "deletions": 3}, "files": [{"sha": "d65e49615d58621f707672c44785c2a749018f24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b45227e0826ce8ddfe659c42f2c35cc0814065/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b45227e0826ce8ddfe659c42f2c35cc0814065/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33b45227e0826ce8ddfe659c42f2c35cc0814065", "patch": "@@ -1,3 +1,10 @@\n+2008-01-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/34196\n+\t* tree.h (TRY_CATCH_IS_CLEANUP): New macro.\n+\t* tree-eh.c (honor_protect_cleanup_actions): Strip TRY_CATCH_EXPR\n+\tif it is set.\n+\n 2008-01-21  DJ Delorie  <dj@redhat.com>\n \n \t* doc/tm.texi (HARD_REGNO_NREGS): Note that this macro must not"}, {"sha": "fa48f7c54aa2c72c2dcce8cc58d099234208b71c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b45227e0826ce8ddfe659c42f2c35cc0814065/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b45227e0826ce8ddfe659c42f2c35cc0814065/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=33b45227e0826ce8ddfe659c42f2c35cc0814065", "patch": "@@ -1,3 +1,8 @@\n+2008-01-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/34196\n+\t* decl.c (wrap_cleanups_r): Set TRY_CATCH_IS_CLEANUP.\n+\n 2008-01-21  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/34850"}, {"sha": "338e1ed5676b0844c890ef1c8e329d404c1d130a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b45227e0826ce8ddfe659c42f2c35cc0814065/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b45227e0826ce8ddfe659c42f2c35cc0814065/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=33b45227e0826ce8ddfe659c42f2c35cc0814065", "patch": "@@ -5165,7 +5165,10 @@ wrap_cleanups_r (tree *stmt_p, int *walk_subtrees, void *data)\n       tree tcleanup = TARGET_EXPR_CLEANUP (*stmt_p);\n \n       tcleanup = build2 (TRY_CATCH_EXPR, void_type_node, tcleanup, guard);\n-\n+      /* Tell honor_protect_cleanup_actions to handle this as a separate\n+\t cleanup.  */\n+      TRY_CATCH_IS_CLEANUP (tcleanup) = 1;\n+ \n       TARGET_EXPR_CLEANUP (*stmt_p) = tcleanup;\n     }\n \n@@ -5175,7 +5178,18 @@ wrap_cleanups_r (tree *stmt_p, int *walk_subtrees, void *data)\n /* We're initializing a local variable which has a cleanup GUARD.  If there\n    are any temporaries used in the initializer INIT of this variable, we\n    need to wrap their cleanups with TRY_CATCH_EXPR (, GUARD) so that the\n-   variable will be cleaned up properly if one of them throws.  */\n+   variable will be cleaned up properly if one of them throws.\n+\n+   Unfortunately, there's no way to express this properly in terms of\n+   nesting, as the regions for the temporaries overlap the region for the\n+   variable itself; if there are two temporaries, the variable needs to be\n+   the first thing destroyed if either of them throws.  However, we only\n+   want to run the variable's cleanup if it actually got constructed.  So\n+   we need to guard the temporary cleanups with the variable's cleanup if\n+   they are run on the normal path, but not if they are run on the\n+   exceptional path.  We implement this by telling\n+   honor_protect_cleanup_actions to strip the variable cleanup from the\n+   exceptional path.  */\n \n static void\n wrap_temporary_cleanups (tree init, tree guard)"}, {"sha": "6a58dda1f97943bb6d7a85f4eb7b79092b4ae186", "filename": "gcc/testsuite/g++.dg/eh/init-temp2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b45227e0826ce8ddfe659c42f2c35cc0814065/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Finit-temp2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b45227e0826ce8ddfe659c42f2c35cc0814065/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Finit-temp2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Finit-temp2.C?ref=33b45227e0826ce8ddfe659c42f2c35cc0814065", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/34196\n+// { dg-options \"-O -Wuninitialized\" }\n+\n+template <class _Tp> class AutoPtr\n+{\n+  _Tp* _M_ptr;\n+\n+public:\n+  explicit AutoPtr(_Tp* __p = 0)  : _M_ptr(__p) {}\n+\n+  ~AutoPtr() { delete _M_ptr; }\n+};\n+\n+struct A\n+{\n+  A() { }\n+  ~A() { throw 1.0; }\n+};\n+\n+struct B\n+{\n+  virtual ~B();\n+};\n+\n+B* f (const A &s) { throw 1; }\n+\n+int\n+main()\n+{\n+  AutoPtr<B> wt(f(A()));\n+}"}, {"sha": "44d5a6d59dedcfcc303cd057ce265c16e59af5fb", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b45227e0826ce8ddfe659c42f2c35cc0814065/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b45227e0826ce8ddfe659c42f2c35cc0814065/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=33b45227e0826ce8ddfe659c42f2c35cc0814065", "patch": "@@ -840,6 +840,23 @@ honor_protect_cleanup_actions (struct leh_state *outer_state,\n   if (this_state)\n     finally = lower_try_finally_dup_block (finally, outer_state);\n \n+  /* If this cleanup consists of a TRY_CATCH_EXPR with TRY_CATCH_IS_CLEANUP\n+     set, the handler of the TRY_CATCH_EXPR is another cleanup which ought\n+     to be in an enclosing scope, but needs to be implemented at this level\n+     to avoid a nesting violation (see wrap_temporary_cleanups in\n+     cp/decl.c).  Since it's logically at an outer level, we should call\n+     terminate before we get to it, so strip it away before adding the\n+     MUST_NOT_THROW filter.  */\n+  i = tsi_start (finally);\n+  x = tsi_stmt (i);\n+  if (protect_cleanup_actions\n+      && TREE_CODE (x) == TRY_CATCH_EXPR\n+      && TRY_CATCH_IS_CLEANUP (x))\n+    {\n+      tsi_link_before (&i, TREE_OPERAND (x, 0), TSI_SAME_STMT);\n+      tsi_delink (&i);\n+    }\n+\n   /* Resume execution after the exception.  Adding this now lets\n      lower_eh_filter not add unnecessary gotos, as it is clear that\n      we never fallthru from this copy of the finally block.  */"}, {"sha": "de0b11d4e4abbe15e66176fa1b6da23ef222dba2", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b45227e0826ce8ddfe659c42f2c35cc0814065/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b45227e0826ce8ddfe659c42f2c35cc0814065/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=33b45227e0826ce8ddfe659c42f2c35cc0814065", "patch": "@@ -447,6 +447,8 @@ struct gimple_stmt GTY(())\n            IDENTIFIER_NODE\n        CLEANUP_EH_ONLY in\n            TARGET_EXPR, WITH_CLEANUP_EXPR\n+       TRY_CATCH_IS_CLEANUP in\n+           TRY_CATCH_EXPR\n        ASM_INPUT_P in\n            ASM_EXPR\n        EH_FILTER_MUST_NOT_THROW in EH_FILTER_EXPR\n@@ -1166,11 +1168,16 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n    should be cleaned up some day.  */\n #define TREE_STATIC(NODE) ((NODE)->base.static_flag)\n \n-/* In a TARGET_EXPR, WITH_CLEANUP_EXPR, means that the pertinent cleanup\n+/* In a TARGET_EXPR or WITH_CLEANUP_EXPR, means that the pertinent cleanup\n    should only be executed if an exception is thrown, not on normal exit\n    of its scope.  */\n #define CLEANUP_EH_ONLY(NODE) ((NODE)->base.static_flag)\n \n+/* In a TRY_CATCH_EXPR, means that the handler should be considered a\n+   separate cleanup in honor_protect_cleanup_actions.  */\n+#define TRY_CATCH_IS_CLEANUP(NODE) \\\n+  (TRY_CATCH_EXPR_CHECK (NODE)->base.static_flag)\n+\n /* Used as a temporary field on a CASE_LABEL_EXPR to indicate that the\n    CASE_HIGH operand has been processed.  */\n #define CASE_HIGH_SEEN(NODE) \\"}]}