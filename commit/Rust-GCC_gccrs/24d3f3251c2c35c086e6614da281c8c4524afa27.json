{"sha": "24d3f3251c2c35c086e6614da281c8c4524afa27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRkM2YzMjUxYzJjMzVjMDg2ZTY2MTRkYTI4MWM4YzQ1MjRhZmEyNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-01-06T14:04:05Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-01-06T14:04:05Z"}, "message": "ipa-visibility.c (function_and_variable_visibility): Reformat comments and long lines.\n\n\tgcc/\n\t* ipa-visibility.c (function_and_variable_visibility): Reformat\n\tcomments and long lines.  Remove extrneous if.\n\t* symtab.c (symtab_node::make_decl_local): Fix code format.\n\t(symtab_node::set_section_for_node): Fix comment typo.\n\n\tgcc/lto/\n\t* lto-partition.c (lto_balanced_map): Reformat/respell comment.\n\t(may_need_named_section_p): Likewise.\n\t(rename_statics): Likewise.\n\t(lto_promote_cross_file_statics): Likewise.\n\nFrom-SVN: r244156", "tree": {"sha": "7c01669af50403b267f72c3cf76d7b8d5f04a8e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c01669af50403b267f72c3cf76d7b8d5f04a8e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24d3f3251c2c35c086e6614da281c8c4524afa27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d3f3251c2c35c086e6614da281c8c4524afa27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d3f3251c2c35c086e6614da281c8c4524afa27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d3f3251c2c35c086e6614da281c8c4524afa27/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb0f878074743d4bcb63e32948ab7c1748c1efb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0f878074743d4bcb63e32948ab7c1748c1efb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb0f878074743d4bcb63e32948ab7c1748c1efb8"}], "stats": {"total": 81, "additions": 50, "deletions": 31}, "files": [{"sha": "6d34d4195e12ec8bf4ecbc77efa7c72e241309d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d3f3251c2c35c086e6614da281c8c4524afa27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d3f3251c2c35c086e6614da281c8c4524afa27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24d3f3251c2c35c086e6614da281c8c4524afa27", "patch": "@@ -1,3 +1,10 @@\n+2017-01-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* ipa-visibility.c (function_and_variable_visibility): Reformat\n+\tcomments and long lines.  Remove extrneous if.\n+\t* symtab.c (symtab_node::make_decl_local): Fix code format.\n+\t(symtab_node::set_section_for_node): Fix comment typo.\n+\n 2017-01-06  Martin Liska  <mliska@suse.cz>\n \n \tPR bootstrap/79003"}, {"sha": "299b3a685882460b0535041da733cb6bd3fb3ade", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d3f3251c2c35c086e6614da281c8c4524afa27/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d3f3251c2c35c086e6614da281c8c4524afa27/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=24d3f3251c2c35c086e6614da281c8c4524afa27", "patch": "@@ -553,9 +553,9 @@ function_and_variable_visibility (bool whole_program)\n \t  DECL_STATIC_DESTRUCTOR (node->decl) = 0;\n \t}\n \n-      /* Frontends and alias code marks nodes as needed before parsing is finished.\n-\t We may end up marking as node external nodes where this flag is meaningless\n-\t strip it.  */\n+      /* Frontends and alias code marks nodes as needed before parsing\n+\t is finished.  We may end up marking as node external nodes\n+\t where this flag is meaningless strip it.  */\n       if (DECL_EXTERNAL (node->decl) || !node->definition)\n \t{\n \t  node->force_output = 0;\n@@ -609,35 +609,36 @@ function_and_variable_visibility (bool whole_program)\n \t{\n \t  gcc_assert (whole_program || in_lto_p\n \t\t      || !TREE_PUBLIC (node->decl));\n-\t  node->unique_name |= ((node->resolution == LDPR_PREVAILING_DEF_IRONLY\n-\t\t\t\t || node->resolution == LDPR_PREVAILING_DEF_IRONLY_EXP)\n-\t\t\t\t&& TREE_PUBLIC (node->decl)\n-\t\t\t\t&& !flag_incremental_link);\n+\t  node->unique_name\n+\t    |= ((node->resolution == LDPR_PREVAILING_DEF_IRONLY\n+\t\t || node->resolution == LDPR_PREVAILING_DEF_IRONLY_EXP)\n+\t\t&& TREE_PUBLIC (node->decl)\n+\t\t&& !flag_incremental_link);\n \t  node->resolution = LDPR_PREVAILING_DEF_IRONLY;\n \t  if (node->same_comdat_group && TREE_PUBLIC (node->decl))\n \t    {\n \t      symtab_node *next = node;\n \n \t      /* Set all members of comdat group local.  */\n-\t      if (node->same_comdat_group)\n-\t\tfor (next = node->same_comdat_group;\n-\t\t     next != node;\n-\t\t     next = next->same_comdat_group)\n+\t      for (next = node->same_comdat_group;\n+\t\t   next != node;\n+\t\t   next = next->same_comdat_group)\n \t\t{\n \t\t  next->set_comdat_group (NULL);\n \t\t  if (!next->alias)\n \t\t    next->set_section (NULL);\n \t\t  if (!next->transparent_alias)\n \t\t    next->make_decl_local ();\n-\t\t  next->unique_name |= ((next->resolution == LDPR_PREVAILING_DEF_IRONLY\n-\t\t\t\t\t || next->resolution == LDPR_PREVAILING_DEF_IRONLY_EXP)\n-\t\t\t\t        && TREE_PUBLIC (next->decl)\n-\t\t\t\t\t&& !flag_incremental_link);\n+\t\t  next->unique_name\n+\t\t    |= ((next->resolution == LDPR_PREVAILING_DEF_IRONLY\n+\t\t\t || next->resolution == LDPR_PREVAILING_DEF_IRONLY_EXP)\n+\t\t\t&& TREE_PUBLIC (next->decl)\n+\t\t\t&& !flag_incremental_link);\n \t\t}\n-\t      /* cgraph_externally_visible_p has already checked all other nodes\n-\t         in the group and they will all be made local.  We need to\n-\t         dissolve the group at once so that the predicate does not\n-\t         segfault though. */\n+\t      /* cgraph_externally_visible_p has already checked all\n+\t         other nodes in the group and they will all be made\n+\t         local.  We need to dissolve the group at once so that\n+\t         the predicate does not segfault though. */\n \t      node->dissolve_same_comdat_group_list ();\n \t    }\n \t  if (TREE_PUBLIC (node->decl))"}, {"sha": "dd9436339ecf0fb52532aacdb0608a5845b43e6d", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d3f3251c2c35c086e6614da281c8c4524afa27/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d3f3251c2c35c086e6614da281c8c4524afa27/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=24d3f3251c2c35c086e6614da281c8c4524afa27", "patch": "@@ -1,3 +1,10 @@\n+2017-01-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* lto-partition.c (lto_balanced_map): Reformat/respell comment.\n+\t(may_need_named_section_p): Likewise.\n+\t(rename_statics): Likewise.\n+\t(lto_promote_cross_file_statics): Likewise.\n+\n 2017-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "a0c0a2f1fbbf1e3e58628adbeae16307a7405d76", "filename": "gcc/lto/lto-partition.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d3f3251c2c35c086e6614da281c8c4524afa27/gcc%2Flto%2Flto-partition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d3f3251c2c35c086e6614da281c8c4524afa27/gcc%2Flto%2Flto-partition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.c?ref=24d3f3251c2c35c086e6614da281c8c4524afa27", "patch": "@@ -668,8 +668,9 @@ lto_balanced_map (int n_lto_partitions, int max_partition_size)\n \n \t\tvnode = dyn_cast <varpool_node *> (ref->referring);\n \t\tgcc_assert (vnode->definition);\n-\t\t/* It is better to couple variables with their users, because it allows them\n-\t\t   to be removed.  Coupling with objects they refer to only helps to reduce\n+\t\t/* It is better to couple variables with their users,\n+\t\t   because it allows them to be removed.  Coupling\n+\t\t   with objects they refer to only helps to reduce\n \t\t   number of symbols promoted to hidden.  */\n \t\tif (!symbol_partitioned_p (vnode) && flag_toplevel_reorder\n \t\t    && !vnode->no_reorder\n@@ -1008,10 +1009,11 @@ promote_symbol (symtab_node *node)\n \t    \"Promoting as hidden: %s\\n\", node->name ());\n }\n \n-/* Return true if NODE needs named section even if it won't land in the partition\n-   symbol table.\n-   FIXME: we should really not use named sections for inline clones and master\n-   clones.  */\n+/* Return true if NODE needs named section even if it won't land in\n+   the partition symbol table.\n+\n+   FIXME: we should really not use named sections for inline clones\n+   and master clones.  */\n \n static bool\n may_need_named_section_p (lto_symtab_encoder_t encoder, symtab_node *node)\n@@ -1089,7 +1091,8 @@ rename_statics (lto_symtab_encoder_t encoder, symtab_node *node)\n \t    || lto_symtab_encoder_lookup (encoder, s) != LCC_NOT_FOUND))\n       {\n         if (privatize_symbol_name (s))\n-\t  /* Re-start from beginning since we do not know how many symbols changed a name.  */\n+\t  /* Re-start from beginning since we do not know how many\n+\t     symbols changed a name.  */\n \t  s = symtab_node::get_for_asmname (name);\n         else s = s->next_sharing_asm_name;\n       }\n@@ -1130,16 +1133,16 @@ lto_promote_cross_file_statics (void)\n         {\n           symtab_node *node = lsei_node (lsei);\n \n-\t  /* If symbol is static, rename it if its assembler name clash with\n-\t     anything else in this unit.  */\n+\t  /* If symbol is static, rename it if its assembler name\n+\t     clashes with anything else in this unit.  */\n \t  rename_statics (encoder, node);\n \n \t  /* No need to promote if symbol already is externally visible ... */\n \t  if (node->externally_visible\n  \t      /* ... or if it is part of current partition ... */\n \t      || lto_symtab_encoder_in_partition_p (encoder, node)\n \t      /* ... or if we do not partition it. This mean that it will\n-\t\t appear in every partition refernecing it.  */\n+\t\t appear in every partition referencing it.  */\n \t      || node->get_partitioning_class () != SYMBOL_PARTITION)\n \t    {\n \t      validize_symbol_for_target (node);"}, {"sha": "d06ab72793ec4b2c0ac7e043d4b30f7b92bd8a44", "filename": "gcc/symtab.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d3f3251c2c35c086e6614da281c8c4524afa27/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d3f3251c2c35c086e6614da281c8c4524afa27/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=24d3f3251c2c35c086e6614da281c8c4524afa27", "patch": "@@ -1259,7 +1259,8 @@ symtab_node::make_decl_local (void)\n       TREE_ADDRESSABLE (decl) = 1;\n       TREE_STATIC (decl) = 1;\n     }\n-  else gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n+  else\n+    gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n \n   DECL_COMDAT (decl) = 0;\n   DECL_WEAK (decl) = 0;\n@@ -1439,7 +1440,7 @@ symtab_node::fixup_same_cpp_alias_visibility (symtab_node *target)\n }\n \n /* Set section, do not recurse into aliases.\n-   When one wants to change section of symbol and its aliases,\n+   When one wants to change section of a symbol and its aliases,\n    use set_section.  */\n \n void"}]}