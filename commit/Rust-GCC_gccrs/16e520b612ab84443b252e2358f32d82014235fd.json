{"sha": "16e520b612ab84443b252e2358f32d82014235fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZlNTIwYjYxMmFiODQ0NDNiMjUyZTIzNThmMzJkODIwMTQyMzVmZA==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2010-05-19T13:07:25Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2010-05-19T13:07:25Z"}, "message": "re PR fortran/42360 (intent(out)-dummy-not-set warning for types depends on order of component initializers)\n\ngcc/fortran/:\n2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/42360\n\t* gfortran.h (gfc_has_default_initializer): New.\n\t* expr.c (gfc_has_default_initializer): New.\n\t* resolve.c (has_default_initializer): Removed, use\n\tgfc_has_default_initializer() instead. Updated all callers.\n\t* trans-array.c (has_default_initializer): Removed, use\n\tgfc_has_default_initializer() instead. Updated all callers.\n\t* trans-decl.c (generate_local_decl): Do not check the\n\tfirst component only to check for initializers, but use\n\tgfc_has_default_initializer() instead.\n\ngcc/testsuite/:\n2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/42360\n\t* gfortran.dg/warn_intent_out_not_set.f90: New.\n\nFrom-SVN: r159562", "tree": {"sha": "e0687cd664f9a6348ad5eb6263da235d6f5fabe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0687cd664f9a6348ad5eb6263da235d6f5fabe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16e520b612ab84443b252e2358f32d82014235fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e520b612ab84443b252e2358f32d82014235fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16e520b612ab84443b252e2358f32d82014235fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e520b612ab84443b252e2358f32d82014235fd/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66faed764371fe6385d54d6e7dc0a9cb0fa5c67f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66faed764371fe6385d54d6e7dc0a9cb0fa5c67f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66faed764371fe6385d54d6e7dc0a9cb0fa5c67f"}], "stats": {"total": 132, "additions": 89, "deletions": 43}, "files": [{"sha": "771a2639f25efdfb87b4d6b182d7e535fc084150", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=16e520b612ab84443b252e2358f32d82014235fd", "patch": "@@ -1,3 +1,16 @@\n+2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/42360\n+\t* gfortran.h (gfc_has_default_initializer): New.\n+\t* expr.c (gfc_has_default_initializer): New.\n+\t* resolve.c (has_default_initializer): Removed, use\n+\tgfc_has_default_initializer() instead. Updated all callers.\n+\t* trans-array.c (has_default_initializer): Removed, use\n+\tgfc_has_default_initializer() instead. Updated all callers.\n+\t* trans-decl.c (generate_local_decl): Do not check the\n+\tfirst component only to check for initializers, but use\n+\tgfc_has_default_initializer() instead.\n+\n 2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/38404"}, {"sha": "6884c9001867b4af5164bb944faedd04c9ba320e", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=16e520b612ab84443b252e2358f32d82014235fd", "patch": "@@ -3557,6 +3557,31 @@ gfc_check_assign_symbol (gfc_symbol *sym, gfc_expr *rvalue)\n }\n \n \n+/* Check for default initializer; sym->value is not enough\n+   as it is also set for EXPR_NULL of allocatables.  */\n+\n+bool\n+gfc_has_default_initializer (gfc_symbol *der)\n+{\n+  gfc_component *c;\n+\n+  gcc_assert (der->attr.flavor == FL_DERIVED);\n+  for (c = der->components; c; c = c->next)\n+    if (c->ts.type == BT_DERIVED)\n+      {\n+        if (!c->attr.pointer\n+\t     && gfc_has_default_initializer (c->ts.u.derived))\n+\t  return true;\n+      }\n+    else\n+      {\n+        if (c->initializer)\n+\t  return true;\n+      }\n+\n+  return false;\n+}\n+\n /* Get an expression for a default initializer.  */\n \n gfc_expr *\n@@ -3565,7 +3590,8 @@ gfc_default_initializer (gfc_typespec *ts)\n   gfc_expr *init;\n   gfc_component *comp;\n \n-  /* See if we have a default initializer.  */\n+  /* See if we have a default initializer in this, but not in nested\n+     types (otherwise we could use gfc_has_default_initializer()).  */\n   for (comp = ts->u.derived->components; comp; comp = comp->next)\n     if (comp->initializer || comp->attr.allocatable)\n       break;"}, {"sha": "903f05ca9d8aeec3b84f24504c9fd03a05f5d7cb", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=16e520b612ab84443b252e2358f32d82014235fd", "patch": "@@ -2617,6 +2617,7 @@ gfc_try gfc_check_assign (gfc_expr *, gfc_expr *, int);\n gfc_try gfc_check_pointer_assign (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_assign_symbol (gfc_symbol *, gfc_expr *);\n \n+bool gfc_has_default_initializer (gfc_symbol *);\n gfc_expr *gfc_default_initializer (gfc_typespec *);\n gfc_expr *gfc_get_variable_expr (gfc_symtree *);\n "}, {"sha": "e5a46fac6155fd04e78b16789703851dc5cfc8bc", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=16e520b612ab84443b252e2358f32d82014235fd", "patch": "@@ -703,21 +703,6 @@ resolve_entries (gfc_namespace *ns)\n }\n \n \n-static bool\n-has_default_initializer (gfc_symbol *der)\n-{\n-  gfc_component *c;\n-\n-  gcc_assert (der->attr.flavor == FL_DERIVED);\n-  for (c = der->components; c; c = c->next)\n-    if ((c->ts.type != BT_DERIVED && c->initializer)\n-\t|| (c->ts.type == BT_DERIVED\n-\t    && (!c->attr.pointer && has_default_initializer (c->ts.u.derived))))\n-      break;\n-\n-  return c != NULL;\n-}\n-\n /* Resolve common variables.  */\n static void\n resolve_common_vars (gfc_symbol *sym, bool named_common)\n@@ -751,7 +736,7 @@ resolve_common_vars (gfc_symbol *sym, bool named_common)\n \tgfc_error_now (\"Derived type variable '%s' in COMMON at %L \"\n \t\t       \"has an ultimate component that is \"\n \t\t       \"allocatable\", csym->name, &csym->declared_at);\n-      if (has_default_initializer (csym->ts.u.derived))\n+      if (gfc_has_default_initializer (csym->ts.u.derived))\n \tgfc_error_now (\"Derived type variable '%s' in COMMON at %L \"\n \t\t       \"may not have default initializer\", csym->name,\n \t\t       &csym->declared_at);\n@@ -8056,7 +8041,7 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n \t and rhs is the same symbol as the lhs.  */\n       if ((*rhsptr)->expr_type == EXPR_VARIABLE\n \t    && (*rhsptr)->symtree->n.sym->ts.type == BT_DERIVED\n-\t    && has_default_initializer ((*rhsptr)->symtree->n.sym->ts.u.derived)\n+\t    && gfc_has_default_initializer ((*rhsptr)->symtree->n.sym->ts.u.derived)\n \t    && (lhs->symtree->n.sym == (*rhsptr)->symtree->n.sym))\n \t*rhsptr = gfc_get_parentheses (*rhsptr);\n \n@@ -9204,13 +9189,13 @@ resolve_fl_variable_derived (gfc_symbol *sym, int no_init_flag)\n      or POINTER attribute, the object shall have the SAVE attribute.\"\n \n      The check for initializers is performed with\n-     has_default_initializer because gfc_default_initializer generates\n+     gfc_has_default_initializer because gfc_default_initializer generates\n      a hidden default for allocatable components.  */\n   if (!(sym->value || no_init_flag) && sym->ns->proc_name\n       && sym->ns->proc_name->attr.flavor == FL_MODULE\n       && !sym->ns->save_all && !sym->attr.save\n       && !sym->attr.pointer && !sym->attr.allocatable\n-      && has_default_initializer (sym->ts.u.derived)\n+      && gfc_has_default_initializer (sym->ts.u.derived)\n       && gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: Implied SAVE for \"\n \t\t\t \"module variable '%s' at %L, needed due to \"\n \t\t\t \"the default initialization\", sym->name,\n@@ -12245,7 +12230,7 @@ resolve_equivalence_derived (gfc_symbol *derived, gfc_symbol *sym, gfc_expr *e)\n       return FAILURE;\n     }\n \n-  if (sym->attr.in_common && has_default_initializer (sym->ts.u.derived))\n+  if (sym->attr.in_common && gfc_has_default_initializer (sym->ts.u.derived))\n     {\n       gfc_error (\"Derived type variable '%s' at %L with default \"\n \t\t \"initialization cannot be in EQUIVALENCE with a variable \""}, {"sha": "7f81cf1af47a394d7d3843f13e5ad9818f4b1094", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=16e520b612ab84443b252e2358f32d82014235fd", "patch": "@@ -6223,25 +6223,6 @@ gfc_copy_only_alloc_comp (gfc_symbol * der_type, tree decl, tree dest, int rank)\n }\n \n \n-/* Check for default initializer; sym->value is not enough as it is also\n-   set for EXPR_NULL of allocatables.  */\n-\n-static bool\n-has_default_initializer (gfc_symbol *der)\n-{\n-  gfc_component *c;\n-\n-  gcc_assert (der->attr.flavor == FL_DERIVED);\n-  for (c = der->components; c; c = c->next)\n-    if ((c->ts.type != BT_DERIVED && c->initializer)\n-        || (c->ts.type == BT_DERIVED\n-            && (!c->attr.pointer && has_default_initializer (c->ts.u.derived))))\n-      break;\n-\n-  return c != NULL;\n-}\n-\n-\n /* NULLIFY an allocatable/pointer array on function entry, free it on exit.\n    Do likewise, recursively if necessary, with the allocatable components of\n    derived types.  */\n@@ -6308,7 +6289,8 @@ gfc_trans_deferred_array (gfc_symbol * sym, tree body)\n       if (!sym->attr.save\n \t  && !(TREE_STATIC (sym->backend_decl) && sym->attr.is_main_program))\n \t{\n-\t  if (sym->value == NULL || !has_default_initializer (sym->ts.u.derived))\n+\t  if (sym->value == NULL\n+\t      || !gfc_has_default_initializer (sym->ts.u.derived))\n \t    {\n \t      rank = sym->as ? sym->as->rank : 0;\n \t      tmp = gfc_nullify_alloc_comp (sym->ts.u.derived, descriptor, rank);"}, {"sha": "c523a5c575cf144904738a5bf91c24f3a15104b0", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=16e520b612ab84443b252e2358f32d82014235fd", "patch": "@@ -3872,10 +3872,14 @@ generate_local_decl (gfc_symbol * sym)\n \t       && sym->attr.dummy\n \t       && sym->attr.intent == INTENT_OUT)\n \t{\n-\t  if (!(sym->ts.type == BT_DERIVED\n-\t\t&& sym->ts.u.derived->components->initializer))\n+\t  if (sym->ts.type != BT_DERIVED)\n \t    gfc_warning (\"Dummy argument '%s' at %L was declared INTENT(OUT) \"\n \t\t         \"but was not set\",  sym->name, &sym->declared_at);\n+\t  else if (!gfc_has_default_initializer (sym->ts.u.derived))\n+\t    gfc_warning (\"Derived-type dummy argument '%s' at %L was \"\n+\t\t\t \"declared INTENT(OUT) but was not set and does \"\n+\t\t\t \"not have a default initializer\",\n+\t\t\t sym->name, &sym->declared_at);\n \t}\n       /* Specific warning for unused dummy arguments. */\n       else if (warn_unused_variable && sym->attr.dummy)"}, {"sha": "12f4e3cb6bf5b7b01486f1396e8665f9db0ac6b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16e520b612ab84443b252e2358f32d82014235fd", "patch": "@@ -1,3 +1,8 @@\n+2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/42360\n+\t* gfortran.dg/warn_intent_out_not_set.f90: New.\n+\n 2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/38404"}, {"sha": "52b23154c3cc6d901eea48b85cb19a67bdd028b3", "filename": "gcc/testsuite/gfortran.dg/warn_intent_out_not_set.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_intent_out_not_set.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e520b612ab84443b252e2358f32d82014235fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_intent_out_not_set.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_intent_out_not_set.f90?ref=16e520b612ab84443b252e2358f32d82014235fd", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do \"compile\" }\n+! { dg-options \"-c -Wall\" }\n+!\n+! PR fortran/42360\n+!\n+MODULE m\n+  TYPE :: t1\n+    INTEGER :: a = 42, b\n+  END TYPE\n+\n+  TYPE :: t2\n+    INTEGER :: a, b\n+  END TYPE\n+\n+CONTAINS\n+  SUBROUTINE sub1(x)             ! no warning, default initializer\n+    type(t1), intent(out) :: x\n+  END SUBROUTINE\n+\n+  SUBROUTINE sub2(x)             ! no warning, initialized\n+    type(t2), intent(out) :: x\n+    x%a = 42\n+  END SUBROUTINE\n+\n+  SUBROUTINE sub3(x)             ! { dg-warning \"not set\" }\n+    type(t2), intent(out) :: x\n+  END SUBROUTINE\n+END MODULE\n+\n+! { dg-final { cleanup-modules \"m\" } }"}]}