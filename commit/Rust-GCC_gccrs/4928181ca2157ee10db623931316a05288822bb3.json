{"sha": "4928181ca2157ee10db623931316a05288822bb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkyODE4MWNhMjE1N2VlMTBkYjYyMzkzMTMxNmEwNTI4ODgyMmJiMw==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-07-17T10:41:44Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-07-17T10:41:44Z"}, "message": "final.c (final_scan_insn): Fix broken commit from previous patch.\n\n\t* final.c (final_scan_insn): Fix broken commit from previous\n\tpatch.\n\nFrom-SVN: r84861", "tree": {"sha": "20a6beaa09ceb2b65735e8188907b8f60e6ebf84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20a6beaa09ceb2b65735e8188907b8f60e6ebf84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4928181ca2157ee10db623931316a05288822bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4928181ca2157ee10db623931316a05288822bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4928181ca2157ee10db623931316a05288822bb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4928181ca2157ee10db623931316a05288822bb3/comments", "author": null, "committer": null, "parents": [{"sha": "3e3970a27611d6cf2c5d8cfaa73e9e17f38b530c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3970a27611d6cf2c5d8cfaa73e9e17f38b530c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e3970a27611d6cf2c5d8cfaa73e9e17f38b530c"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "de2cbff6bffefd21be78708b36c8965ebe8e53b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4928181ca2157ee10db623931316a05288822bb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4928181ca2157ee10db623931316a05288822bb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4928181ca2157ee10db623931316a05288822bb3", "patch": "@@ -1,3 +1,8 @@\n+2004-07-17  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* final.c (final_scan_insn): Fix broken commit from previous\n+\tpatch.\n+\n 2004-07-17  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* c-typeck.c (parser_build_binary_op): Condition warnings for"}, {"sha": "f5da0a8023f93a13d836cf37d86b920e04f75396", "filename": "gcc/final.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4928181ca2157ee10db623931316a05288822bb3/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4928181ca2157ee10db623931316a05288822bb3/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=4928181ca2157ee10db623931316a05288822bb3", "patch": "@@ -2008,17 +2008,19 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t  break;\n \n #ifdef HAVE_cc0\n-\t/* If there is a REG_CC_SETTER note on this insn, it means that\n-\t   the setting of the condition code was done in the delay slot\n-\t   of the insn that branched here.  So recover the cc status\n-\t   from the insn that set it.  */\n+\t{\n+\t  /* If there is a REG_CC_SETTER note on this insn, it means that\n+\t     the setting of the condition code was done in the delay slot\n+\t     of the insn that branched here.  So recover the cc status\n+\t     from the insn that set it.  */\n \n-\tnote = find_reg_note (insn, REG_CC_SETTER, NULL_RTX);\n-\tif (note)\n-\t  {\n-\t    NOTICE_UPDATE_CC (PATTERN (XEXP (note, 0)), XEXP (note, 0));\n-\t    cc_prev_status = cc_status;\n-\t  }\n+\t  rtx note = find_reg_note (insn, REG_CC_SETTER, NULL_RTX);\n+\t  if (note)\n+\t    {\n+\t      NOTICE_UPDATE_CC (PATTERN (XEXP (note, 0)), XEXP (note, 0));\n+\t      cc_prev_status = cc_status;\n+\t    }\n+\t}\n #endif\n \n \t/* Detect insns that are really jump-tables\n@@ -2401,7 +2403,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t       emit them before the peephole.  */\n \t    if (next != 0 && next != NEXT_INSN (insn))\n \t      {\n-\t\trtx prev = PREV_INSN (insn);\n+\t\trtx note, prev = PREV_INSN (insn);\n \n \t\tfor (note = NEXT_INSN (insn); note != next;\n \t\t     note = NEXT_INSN (note))"}]}