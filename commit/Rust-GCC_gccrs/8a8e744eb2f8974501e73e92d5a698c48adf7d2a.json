{"sha": "8a8e744eb2f8974501e73e92d5a698c48adf7d2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE4ZTc0NGViMmY4OTc0NTAxZTczZTkyZDVhNjk4YzQ4YWRmN2QyYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-04T07:52:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-04T07:52:26Z"}, "message": "re PR tree-optimization/82381 (internal compiler error: qsort checking failed)\n\n\tPR tree-optimization/82381\n\t* tree-ssa-reassoc.c (sort_by_operand_rank): Check for different\n\toeN->rank first.  Return 1 or -1 if one op is SSA_NAME and the other\n\tis not.\n\nFrom-SVN: r253396", "tree": {"sha": "cb4ca464229d50c564e5a30a0ab52a06a2b2a2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb4ca464229d50c564e5a30a0ab52a06a2b2a2d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a8e744eb2f8974501e73e92d5a698c48adf7d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8e744eb2f8974501e73e92d5a698c48adf7d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a8e744eb2f8974501e73e92d5a698c48adf7d2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8e744eb2f8974501e73e92d5a698c48adf7d2a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c38262d95bedc091083cc881d9e21cd1f215a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c38262d95bedc091083cc881d9e21cd1f215a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c38262d95bedc091083cc881d9e21cd1f215a9a"}], "stats": {"total": 85, "additions": 46, "deletions": 39}, "files": [{"sha": "075aeaf077c8b5a77b716608bd910799f9fdd73f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8e744eb2f8974501e73e92d5a698c48adf7d2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8e744eb2f8974501e73e92d5a698c48adf7d2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a8e744eb2f8974501e73e92d5a698c48adf7d2a", "patch": "@@ -1,5 +1,10 @@\n 2017-10-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/82381\n+\t* tree-ssa-reassoc.c (sort_by_operand_rank): Check for different\n+\toeN->rank first.  Return 1 or -1 if one op is SSA_NAME and the other\n+\tis not.\n+\n \tPR tree-optimization/82374\n \t* omp-low.c (create_omp_child_function): Copy DECL_ATTRIBUTES,\n \tDECL_FUNCTION_SPECIFIC_OPTIMIZATION,"}, {"sha": "cc57ae320a3f7852056e699b4ef7f29fd6f5c12c", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 41, "deletions": 39, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8e744eb2f8974501e73e92d5a698c48adf7d2a/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8e744eb2f8974501e73e92d5a698c48adf7d2a/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=8a8e744eb2f8974501e73e92d5a698c48adf7d2a", "patch": "@@ -495,10 +495,13 @@ sort_by_operand_rank (const void *pa, const void *pb)\n   const operand_entry *oea = *(const operand_entry *const *)pa;\n   const operand_entry *oeb = *(const operand_entry *const *)pb;\n \n+  if (oeb->rank != oea->rank)\n+    return oeb->rank > oea->rank ? 1 : -1;\n+\n   /* It's nicer for optimize_expression if constants that are likely\n-     to fold when added/multiplied//whatever are put next to each\n+     to fold when added/multiplied/whatever are put next to each\n      other.  Since all constants have rank 0, order them by type.  */\n-  if (oeb->rank == 0 && oea->rank == 0)\n+  if (oea->rank == 0)\n     {\n       if (constant_type (oeb->op) != constant_type (oea->op))\n \treturn constant_type (oeb->op) - constant_type (oea->op);\n@@ -508,51 +511,50 @@ sort_by_operand_rank (const void *pa, const void *pb)\n \treturn oeb->id > oea->id ? 1 : -1;\n     }\n \n+  if (TREE_CODE (oea->op) != SSA_NAME)\n+    {\n+      if (TREE_CODE (oeb->op) != SSA_NAME)\n+\treturn oeb->id > oea->id ? 1 : -1;\n+      else\n+\treturn 1;\n+    }\n+  else if (TREE_CODE (oeb->op) != SSA_NAME)\n+    return -1;\n+\n   /* Lastly, make sure the versions that are the same go next to each\n      other.  */\n-  if (oeb->rank == oea->rank\n-      && TREE_CODE (oea->op) == SSA_NAME\n-      && TREE_CODE (oeb->op) == SSA_NAME)\n+  if (SSA_NAME_VERSION (oeb->op) != SSA_NAME_VERSION (oea->op))\n     {\n-      if (SSA_NAME_VERSION (oeb->op) != SSA_NAME_VERSION (oea->op))\n+      /* As SSA_NAME_VERSION is assigned pretty randomly, because we reuse\n+\t versions of removed SSA_NAMEs, so if possible, prefer to sort\n+\t based on basic block and gimple_uid of the SSA_NAME_DEF_STMT.\n+\t See PR60418.  */\n+      gimple *stmta = SSA_NAME_DEF_STMT (oea->op);\n+      gimple *stmtb = SSA_NAME_DEF_STMT (oeb->op);\n+      basic_block bba = gimple_bb (stmta);\n+      basic_block bbb = gimple_bb (stmtb);\n+      if (bbb != bba)\n \t{\n-\t  /* As SSA_NAME_VERSION is assigned pretty randomly, because we reuse\n-\t     versions of removed SSA_NAMEs, so if possible, prefer to sort\n-\t     based on basic block and gimple_uid of the SSA_NAME_DEF_STMT.\n-\t     See PR60418.  */\n-\t  gimple *stmta = SSA_NAME_DEF_STMT (oea->op);\n-\t  gimple *stmtb = SSA_NAME_DEF_STMT (oeb->op);\n-\t  basic_block bba = gimple_bb (stmta);\n-\t  basic_block bbb = gimple_bb (stmtb);\n-\t  if (bbb != bba)\n-\t    {\n-\t      /* One of the SSA_NAMEs can be defined in oeN->stmt_to_insert\n-\t\t but the other might not.  */\n-\t      if (!bba)\n-\t\treturn 1;\n-\t      if (!bbb)\n-\t\treturn -1;\n-\t      /* If neither is, compare bb_rank.  */\n-\t      if (bb_rank[bbb->index] != bb_rank[bba->index])\n-\t\treturn bb_rank[bbb->index] - bb_rank[bba->index];\n-\t    }\n+\t  /* One of the SSA_NAMEs can be defined in oeN->stmt_to_insert\n+\t     but the other might not.  */\n+\t  if (!bba)\n+\t    return 1;\n+\t  if (!bbb)\n+\t    return -1;\n+\t  /* If neither is, compare bb_rank.  */\n+\t  if (bb_rank[bbb->index] != bb_rank[bba->index])\n+\t    return bb_rank[bbb->index] - bb_rank[bba->index];\n+\t}\n \n-\t  bool da = reassoc_stmt_dominates_stmt_p (stmta, stmtb);\n-\t  bool db = reassoc_stmt_dominates_stmt_p (stmtb, stmta);\n-\t  if (da != db)\n-\t    return da ? 1 : -1;\n+      bool da = reassoc_stmt_dominates_stmt_p (stmta, stmtb);\n+      bool db = reassoc_stmt_dominates_stmt_p (stmtb, stmta);\n+      if (da != db)\n+\treturn da ? 1 : -1;\n \n-\t  return (SSA_NAME_VERSION (oeb->op) > SSA_NAME_VERSION (oea->op)\n-\t\t  ? 1 : -1);\n-\t}\n-      else\n-\treturn oeb->id > oea->id ? 1 : -1;\n+      return SSA_NAME_VERSION (oeb->op) > SSA_NAME_VERSION (oea->op) ? 1 : -1;\n     }\n \n-  if (oeb->rank != oea->rank)\n-    return oeb->rank > oea->rank ? 1 : -1;\n-  else\n-    return oeb->id > oea->id ? 1 : -1;\n+  return oeb->id > oea->id ? 1 : -1;\n }\n \n /* Add an operand entry to *OPS for the tree operand OP.  */"}]}