{"sha": "5c36d24c659d18b634629a56d547ae208b914394", "node_id": "C_kwDOANBUbNoAKDVjMzZkMjRjNjU5ZDE4YjYzNDYyOWE1NmQ1NDdhZTIwOGI5MTQzOTQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-06T22:20:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-06T22:20:09Z"}, "message": "Merge #888\n\n888: Added location data to Match Arm and removed unused code r=philberty a=mvvsmk\n\nFixes #863\r\n\r\n- Added location data to Match arm in gcc/rust/ast/rust-expr.h and gcc/rust/hir/tree/rust-hir-expr.h\r\n- Updated the respective constructors and copy constructors\r\n- Updated location info for match arm in code generation in gcc/rust/backend/eust-compile-expr.cc\r\n- Removed unused code in the above rust-expr.h and rust-gir-expr.h files as mentioned in the issue by `@philberty.`\r\n- Comment removed form rust-expr.h\r\n- Changed partameterized constructor and static function in\r\n  rust-hir-expr.h\r\n- Changed line 697 to pass expr.get_locus() in rust-ast-lower\r\n- Changed parameterised constructor in rust-expr.h\r\n- Changed line 8563 in rust-parse-impl.h to pass location data.\r\n\r\nNote :\r\n- I also added a public member funtion for the class MatchArm\r\n`Location get_locus ( ) const { return locus; }`\r\n\r\nDo me know if I missed anything or could improve on something.\r\n\r\nSigned-off-by : M V V S Manoj Kumar <mvvsmanojkumar@gmail.com>\r\n\n\nCo-authored-by: @mvvsmk <mvvsmanojkumar@gmail.com>", "tree": {"sha": "b018d9d93f8bcf074246ebe625d9212a190eeeff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b018d9d93f8bcf074246ebe625d9212a190eeeff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c36d24c659d18b634629a56d547ae208b914394", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiAEmZCRBK7hj4Ov3rIwAAbaoIAACYjgFDkD/eQO+y0HJ+u0Fk\nLSlQsDyvKkPgoVxO7EGKZFednIlEUjMw2uf7nl8nvUgKWs2Asv/GDXrXUhko3NeL\niaroHNv08e2LHR2H3xmDM1/j7e4UJRHNAF4PPRM1VeCIy8ybTAluO/UFcnW5IfyI\nD/xRSsdkM6fKzqdagVGHFVlMSFdPZx1moISPWHiIedJI5VCughVc+D6gyMhwKtic\ncnNl3PhmfxTONNabHDdG0J3Pd487tXPhmD/YWccHpDoKYUzlov8MdIGW284yTAfd\n4d0R1/4qZB7Z7LkxTwCCFWB+AKg5H+2GmV2TK3sa9xWvtAFNUL11Apf7+Z5FW34=\n=NHte\n-----END PGP SIGNATURE-----\n", "payload": "tree b018d9d93f8bcf074246ebe625d9212a190eeeff\nparent 05cfe8f9fdc363ff7db4cba2decaf22e44057c3f\nparent b92a9b80faa4b6daeca3e94db8bcdebdeec0b859\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1644186009 +0000\ncommitter GitHub <noreply@github.com> 1644186009 +0000\n\nMerge #888\n\n888: Added location data to Match Arm and removed unused code r=philberty a=mvvsmk\n\nFixes #863\r\n\r\n- Added location data to Match arm in gcc/rust/ast/rust-expr.h and gcc/rust/hir/tree/rust-hir-expr.h\r\n- Updated the respective constructors and copy constructors\r\n- Updated location info for match arm in code generation in gcc/rust/backend/eust-compile-expr.cc\r\n- Removed unused code in the above rust-expr.h and rust-gir-expr.h files as mentioned in the issue by `@philberty.`\r\n- Comment removed form rust-expr.h\r\n- Changed partameterized constructor and static function in\r\n  rust-hir-expr.h\r\n- Changed line 697 to pass expr.get_locus() in rust-ast-lower\r\n- Changed parameterised constructor in rust-expr.h\r\n- Changed line 8563 in rust-parse-impl.h to pass location data.\r\n\r\nNote :\r\n- I also added a public member funtion for the class MatchArm\r\n`Location get_locus ( ) const { return locus; }`\r\n\r\nDo me know if I missed anything or could improve on something.\r\n\r\nSigned-off-by : M V V S Manoj Kumar <mvvsmanojkumar@gmail.com>\r\n\n\nCo-authored-by: @mvvsmk <mvvsmanojkumar@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c36d24c659d18b634629a56d547ae208b914394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c36d24c659d18b634629a56d547ae208b914394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c36d24c659d18b634629a56d547ae208b914394/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05cfe8f9fdc363ff7db4cba2decaf22e44057c3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05cfe8f9fdc363ff7db4cba2decaf22e44057c3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05cfe8f9fdc363ff7db4cba2decaf22e44057c3f"}, {"sha": "b92a9b80faa4b6daeca3e94db8bcdebdeec0b859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92a9b80faa4b6daeca3e94db8bcdebdeec0b859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b92a9b80faa4b6daeca3e94db8bcdebdeec0b859"}], "stats": {"total": 241, "additions": 22, "deletions": 219}, "files": [{"sha": "3f3ed5cd7ee961add9a8b1f46d74358c51ae5c69", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 8, "deletions": 122, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c36d24c659d18b634629a56d547ae208b914394/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c36d24c659d18b634629a56d547ae208b914394/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=5c36d24c659d18b634629a56d547ae208b914394", "patch": "@@ -4225,19 +4225,19 @@ struct MatchArm\n   // inlined from MatchArmGuard\n   std::unique_ptr<Expr> guard_expr;\n \n-  // TODO: should this store location data?\n+  Location locus;\n \n public:\n   // Returns whether the MatchArm has a match arm guard expression\n   bool has_match_arm_guard () const { return guard_expr != nullptr; }\n \n   // Constructor for match arm with a guard expression\n   MatchArm (std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n-\t    std::unique_ptr<Expr> guard_expr = nullptr,\n+\t    Location locus, std::unique_ptr<Expr> guard_expr = nullptr,\n \t    std::vector<Attribute> outer_attrs = std::vector<Attribute> ())\n     : outer_attrs (std::move (outer_attrs)),\n       match_arm_patterns (std::move (match_arm_patterns)),\n-      guard_expr (std::move (guard_expr))\n+      guard_expr (std::move (guard_expr)), locus (locus)\n   {}\n \n   // Copy constructor with clone\n@@ -4250,6 +4250,8 @@ struct MatchArm\n     match_arm_patterns.reserve (other.match_arm_patterns.size ());\n     for (const auto &e : other.match_arm_patterns)\n       match_arm_patterns.push_back (e->clone_pattern ());\n+\n+    locus = other.locus;\n   }\n \n   ~MatchArm () = default;\n@@ -4281,7 +4283,8 @@ struct MatchArm\n   // Creates a match arm in an error state.\n   static MatchArm create_error ()\n   {\n-    return MatchArm (std::vector<std::unique_ptr<Pattern> > ());\n+    Location locus = Location ();\n+    return MatchArm (std::vector<std::unique_ptr<Pattern> > (), locus);\n   }\n \n   std::string as_string () const;\n@@ -4305,36 +4308,9 @@ struct MatchArm\n   {\n     return match_arm_patterns;\n   }\n-};\n-\n-/*\n-// Base \"match case\" for a match expression - abstract\n-class MatchCase\n-{\n-  MatchArm arm;\n-\n-protected:\n-  MatchCase (MatchArm arm) : arm (std::move (arm)) {}\n-\n-  // Should not require copy constructor or assignment operator overloading\n \n-  // Clone function implementation as pure virtual method\n-  virtual MatchCase *clone_match_case_impl () const = 0;\n-\n-public:\n-  virtual ~MatchCase () {}\n-\n-  // Unique pointer custom clone function\n-  std::unique_ptr<MatchCase> clone_match_case () const\n-  {\n-    return std::unique_ptr<MatchCase> (clone_match_case_impl ());\n-  }\n-\n-  virtual std::string as_string () const;\n-\n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n+  Location get_locus () const { return locus; }\n };\n-*/\n \n /* A \"match case\" - a correlated match arm and resulting expression. Not\n  * abstract. */\n@@ -4391,96 +4367,6 @@ struct MatchCase\n   NodeId get_node_id () const { return node_id; }\n };\n \n-#if 0\n-// Block expression match case\n-class MatchCaseBlockExpr : public MatchCase\n-{\n-  std::unique_ptr<BlockExpr> block_expr;\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  MatchCaseBlockExpr (MatchArm arm, std::unique_ptr<BlockExpr> block_expr)\n-    : MatchCase (std::move (arm)), block_expr (std::move (block_expr))\n-  {}\n-\n-  // Copy constructor requires clone\n-  MatchCaseBlockExpr (MatchCaseBlockExpr const &other)\n-    : MatchCase (other), block_expr (other.block_expr->clone_block_expr ())\n-  {}\n-\n-  // Overload assignment operator to have clone\n-  MatchCaseBlockExpr &operator= (MatchCaseBlockExpr const &other)\n-  {\n-    MatchCase::operator= (other);\n-    block_expr = other.block_expr->clone_block_expr ();\n-    // arm = other.arm;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  MatchCaseBlockExpr (MatchCaseBlockExpr &&other) = default;\n-  MatchCaseBlockExpr &operator= (MatchCaseBlockExpr &&other) = default;\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  MatchCaseBlockExpr *clone_match_case_impl () const override\n-  {\n-    return new MatchCaseBlockExpr (*this);\n-  }\n-};\n-\n-// Expression (except block expression) match case\n-class MatchCaseExpr : public MatchCase\n-{\n-  std::unique_ptr<Expr> expr;\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  MatchCaseExpr (MatchArm arm, std::unique_ptr<Expr> expr)\n-    : MatchCase (std::move (arm)), expr (std::move (expr))\n-  {}\n-\n-  // Copy constructor requires clone\n-  MatchCaseExpr (MatchCaseExpr const &other)\n-    : MatchCase (other), expr (other.expr->clone_expr ())\n-  {}\n-\n-  // Overload assignment operator to have clone\n-  MatchCaseExpr &operator= (MatchCaseExpr const &other)\n-  {\n-    MatchCase::operator= (other);\n-    expr = other.expr->clone_expr ();\n-    // arm = other.arm;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  MatchCaseExpr (MatchCaseExpr &&other) = default;\n-  MatchCaseExpr &operator= (MatchCaseExpr &&other) = default;\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  MatchCaseExpr *clone_match_case_impl () const override\n-  {\n-    return new MatchCaseExpr (*this);\n-  }\n-};\n-#endif\n-\n // Match expression AST node\n class MatchExpr : public ExprWithBlock\n {"}, {"sha": "d49a6dc4cd040c860878b1885afb5473b2a0b165", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c36d24c659d18b634629a56d547ae208b914394/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c36d24c659d18b634629a56d547ae208b914394/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=5c36d24c659d18b634629a56d547ae208b914394", "patch": "@@ -274,7 +274,7 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n       rust_assert (kase_arm.get_patterns ().size () > 0);\n \n       // generate implicit label\n-      Location arm_locus = kase_arm.get_patterns ().at (0)->get_locus ();\n+      Location arm_locus = kase_arm.get_locus ();\n       tree case_label = ctx->get_backend ()->label (\n \tfndecl, \"\" /* empty creates an artificial label */, arm_locus);\n "}, {"sha": "1cc3f1dd52c272f3010673fd827e3a61cc90e685", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c36d24c659d18b634629a56d547ae208b914394/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c36d24c659d18b634629a56d547ae208b914394/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=5c36d24c659d18b634629a56d547ae208b914394", "patch": "@@ -693,7 +693,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t    match_arm_patterns.push_back (std::unique_ptr<HIR::Pattern> (ptrn));\n \t  }\n \n-\tHIR::MatchArm arm (std::move (match_arm_patterns),\n+\tHIR::MatchArm arm (std::move (match_arm_patterns), expr.get_locus (),\n \t\t\t   std::unique_ptr<HIR::Expr> (kase_guard_expr),\n \t\t\t   match_case.get_arm ().get_outer_attrs ());\n "}, {"sha": "b8d335413dd0a82f02de8c0e42efe7de6a1bb95d", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 9, "deletions": 93, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c36d24c659d18b634629a56d547ae208b914394/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c36d24c659d18b634629a56d547ae208b914394/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=5c36d24c659d18b634629a56d547ae208b914394", "patch": "@@ -3713,18 +3713,19 @@ struct MatchArm\n   AST::AttrVec outer_attrs;\n   std::vector<std::unique_ptr<Pattern> > match_arm_patterns;\n   std::unique_ptr<Expr> guard_expr;\n+  Location locus;\n \n public:\n   // Returns whether the MatchArm has a match arm guard expression\n   bool has_match_arm_guard () const { return guard_expr != nullptr; }\n \n   // Constructor for match arm with a guard expression\n   MatchArm (std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n-\t    std::unique_ptr<Expr> guard_expr = nullptr,\n+\t    Location locus, std::unique_ptr<Expr> guard_expr = nullptr,\n \t    AST::AttrVec outer_attrs = AST::AttrVec ())\n     : outer_attrs (std::move (outer_attrs)),\n       match_arm_patterns (std::move (match_arm_patterns)),\n-      guard_expr (std::move (guard_expr))\n+      guard_expr (std::move (guard_expr)), locus (locus)\n   {}\n \n   // Copy constructor with clone\n@@ -3737,6 +3738,8 @@ struct MatchArm\n     match_arm_patterns.reserve (other.match_arm_patterns.size ());\n     for (const auto &e : other.match_arm_patterns)\n       match_arm_patterns.push_back (e->clone_pattern ());\n+\n+    locus = other.locus;\n   }\n \n   ~MatchArm () = default;\n@@ -3766,7 +3769,8 @@ struct MatchArm\n   // Creates a match arm in an error state.\n   static MatchArm create_error ()\n   {\n-    return MatchArm (std::vector<std::unique_ptr<Pattern> > ());\n+    Location locus = Location ();\n+    return MatchArm (std::vector<std::unique_ptr<Pattern> > (), locus);\n   }\n \n   std::string as_string () const;\n@@ -3775,6 +3779,8 @@ struct MatchArm\n   {\n     return match_arm_patterns;\n   }\n+\n+  Location get_locus () const { return locus; }\n };\n \n /* A \"match case\" - a correlated match arm and resulting expression. Not\n@@ -3819,96 +3825,6 @@ struct MatchCase\n   std::unique_ptr<Expr> &get_expr () { return expr; }\n };\n \n-#if 0\n-// Block expression match case\n-class MatchCaseBlockExpr : public MatchCase\n-{\n-  std::unique_ptr<BlockExpr> block_expr;\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  MatchCaseBlockExpr (MatchArm arm, std::unique_ptr<BlockExpr> block_expr)\n-    : MatchCase (std::move (arm)), block_expr (std::move (block_expr))\n-  {}\n-\n-  // Copy constructor requires clone\n-  MatchCaseBlockExpr (MatchCaseBlockExpr const &other)\n-    : MatchCase (other), block_expr (other.block_expr->clone_block_expr ())\n-  {}\n-\n-  // Overload assignment operator to have clone\n-  MatchCaseBlockExpr &operator= (MatchCaseBlockExpr const &other)\n-  {\n-    MatchCase::operator= (other);\n-    block_expr = other.block_expr->clone_block_expr ();\n-    // arm = other.arm;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  MatchCaseBlockExpr (MatchCaseBlockExpr &&other) = default;\n-  MatchCaseBlockExpr &operator= (MatchCaseBlockExpr &&other) = default;\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  MatchCaseBlockExpr *clone_match_case_impl () const override\n-  {\n-    return new MatchCaseBlockExpr (*this);\n-  }\n-};\n-\n-// Expression (except block expression) match case\n-class MatchCaseExpr : public MatchCase\n-{\n-  std::unique_ptr<Expr> expr;\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  MatchCaseExpr (MatchArm arm, std::unique_ptr<Expr> expr)\n-    : MatchCase (std::move (arm)), expr (std::move (expr))\n-  {}\n-\n-  // Copy constructor requires clone\n-  MatchCaseExpr (MatchCaseExpr const &other)\n-    : MatchCase (other), expr (other.expr->clone_expr ())\n-  {}\n-\n-  // Overload assignment operator to have clone\n-  MatchCaseExpr &operator= (MatchCaseExpr const &other)\n-  {\n-    MatchCase::operator= (other);\n-    expr = other.expr->clone_expr ();\n-    // arm = other.arm;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  MatchCaseExpr (MatchCaseExpr &&other) = default;\n-  MatchCaseExpr &operator= (MatchCaseExpr &&other) = default;\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  MatchCaseExpr *clone_match_case_impl () const override\n-  {\n-    return new MatchCaseExpr (*this);\n-  }\n-};\n-#endif\n-\n // Match expression HIR node\n class MatchExpr : public ExprWithBlock\n {"}, {"sha": "6d393b0bc75f387812d28520cb6185677b125c8c", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c36d24c659d18b634629a56d547ae208b914394/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c36d24c659d18b634629a56d547ae208b914394/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=5c36d24c659d18b634629a56d547ae208b914394", "patch": "@@ -8560,8 +8560,9 @@ Parser<ManagedTokenSource>::parse_match_arm ()\n   // DEBUG\n   rust_debug (\"successfully parsed match arm\");\n \n-  return AST::MatchArm (std::move (match_arm_patterns), std::move (guard_expr),\n-\t\t\tstd::move (outer_attrs));\n+  return AST::MatchArm (std::move (match_arm_patterns),\n+\t\t\tlexer.peek_token ()->get_locus (),\n+\t\t\tstd::move (guard_expr), std::move (outer_attrs));\n }\n \n /* Parses the patterns used in a match arm. End token id is the id of the token"}]}