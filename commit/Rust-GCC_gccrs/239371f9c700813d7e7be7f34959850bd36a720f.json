{"sha": "239371f9c700813d7e7be7f34959850bd36a720f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM5MzcxZjljNzAwODEzZDdlN2JlN2YzNDk1OTg1MGJkMzZhNzIwZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-11-06T08:26:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-11-06T08:26:50Z"}, "message": "re PR c++/33894 (pragma omp atomic broken)\n\n\tPR c++/33894\n\t* cp-tree.h: Update comment - TYPE_LANG_FLAG_0 is not\n\tOMP_ATOMIC_DEPENDENT_P in OMP_ATOMIC.\n\t* pt.c (tsubst_expr): Assert OMP_ATOMIC_DEPENDENT_P.\n\t* semantics.c (finish_omp_atomic): Revert most of the\n\t2007-02-05 changes, just keep the new representation of\n\tOMP_ATOMIC_DEPENDENT_P OMP_ATOMIC.\n\n\t* testsuite/libgomp.c++/atomic-1.C: New test.\n\nFrom-SVN: r129919", "tree": {"sha": "205548c01d5a82a1eb2ad023bb2bc6958fb4417e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/205548c01d5a82a1eb2ad023bb2bc6958fb4417e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/239371f9c700813d7e7be7f34959850bd36a720f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239371f9c700813d7e7be7f34959850bd36a720f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239371f9c700813d7e7be7f34959850bd36a720f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239371f9c700813d7e7be7f34959850bd36a720f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "873c716480f5aedc692af4d4ddf15e72682c5f27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873c716480f5aedc692af4d4ddf15e72682c5f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/873c716480f5aedc692af4d4ddf15e72682c5f27"}], "stats": {"total": 119, "additions": 98, "deletions": 21}, "files": [{"sha": "7f49a7262b2e7b3a57dff42000f82c9f745f6d58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239371f9c700813d7e7be7f34959850bd36a720f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239371f9c700813d7e7be7f34959850bd36a720f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=239371f9c700813d7e7be7f34959850bd36a720f", "patch": "@@ -1,3 +1,13 @@\n+2007-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/33894\n+\t* cp-tree.h: Update comment - TYPE_LANG_FLAG_0 is not\n+\tOMP_ATOMIC_DEPENDENT_P in OMP_ATOMIC.\n+\t* pt.c (tsubst_expr): Assert OMP_ATOMIC_DEPENDENT_P.\n+\t* semantics.c (finish_omp_atomic): Revert most of the\n+\t2007-02-05 changes, just keep the new representation of\n+\tOMP_ATOMIC_DEPENDENT_P OMP_ATOMIC.\n+\n 2007-11-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c++/33871"}, {"sha": "5f43c13d3d8ddfbfbe97dda330062414563c5e62", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239371f9c700813d7e7be7f34959850bd36a720f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239371f9c700813d7e7be7f34959850bd36a720f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=239371f9c700813d7e7be7f34959850bd36a720f", "patch": "@@ -53,7 +53,6 @@ struct diagnostic_info;\n       TYPENAME_IS_ENUM_P (in TYPENAME_TYPE)\n       REFERENCE_REF_P (in INDIRECT_EXPR)\n       QUALIFIED_NAME_IS_TEMPLATE (in SCOPE_REF)\n-      OMP_ATOMIC_DEPENDENT_P (in OMP_ATOMIC)\n       OMP_FOR_GIMPLIFYING_P (in OMP_FOR)\n       BASELINK_QUALIFIED_P (in BASELINK)\n       TARGET_EXPR_IMPLICIT_P (in TARGET_EXPR)"}, {"sha": "53edd31cd337c2f29875035406411a9ee71533e8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239371f9c700813d7e7be7f34959850bd36a720f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239371f9c700813d7e7be7f34959850bd36a720f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=239371f9c700813d7e7be7f34959850bd36a720f", "patch": "@@ -10358,13 +10358,13 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       break;\n \n     case OMP_ATOMIC:\n-      if (OMP_ATOMIC_DEPENDENT_P (t))\n-        {\n-\t  tree op1 = TREE_OPERAND (t, 1);\n-\t  tree lhs = RECUR (TREE_OPERAND (op1, 0));\n-\t  tree rhs = RECUR (TREE_OPERAND (op1, 1));\n-\t  finish_omp_atomic (TREE_CODE (op1), lhs, rhs);\n-        }\n+      gcc_assert (OMP_ATOMIC_DEPENDENT_P (t));\n+      {\n+\ttree op1 = TREE_OPERAND (t, 1);\n+\ttree lhs = RECUR (TREE_OPERAND (op1, 0));\n+\ttree rhs = RECUR (TREE_OPERAND (op1, 1));\n+\tfinish_omp_atomic (TREE_CODE (op1), lhs, rhs);\n+      }\n       break;\n \n     case EXPR_PACK_EXPANSION:"}, {"sha": "3f45f712e0e7d8f36fef7889bb137b92cbe2a46c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239371f9c700813d7e7be7f34959850bd36a720f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239371f9c700813d7e7be7f34959850bd36a720f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=239371f9c700813d7e7be7f34959850bd36a720f", "patch": "@@ -3909,28 +3909,38 @@ finish_omp_for (location_t locus, tree decl, tree init, tree cond,\n void\n finish_omp_atomic (enum tree_code code, tree lhs, tree rhs)\n {\n+  tree orig_lhs;\n+  tree orig_rhs;\n+  bool dependent_p;\n   tree stmt;\n \n-  if (processing_template_decl\n-      && (type_dependent_expression_p (lhs) \n-\t  || type_dependent_expression_p (rhs)))\n-    stmt = build2 (OMP_ATOMIC, void_type_node, integer_zero_node,\n-\t\t   build2 (code, void_type_node, lhs, rhs));\n-  else\n+  orig_lhs = lhs;\n+  orig_rhs = rhs;\n+  dependent_p = false;\n+  stmt = NULL_TREE;\n+\n+  /* Even in a template, we can detect invalid uses of the atomic\n+     pragma if neither LHS nor RHS is type-dependent.  */\n+  if (processing_template_decl)\n     {\n-      /* Even in a template, we can detect invalid uses of the atomic\n-         pragma if neither LHS nor RHS is type-dependent.  */\n-      if (processing_template_decl)\n+      dependent_p = (type_dependent_expression_p (lhs)\n+\t\t     || type_dependent_expression_p (rhs));\n+      if (!dependent_p)\n \t{\n \t  lhs = build_non_dependent_expr (lhs);\n \t  rhs = build_non_dependent_expr (rhs);\n \t}\n-\n+    }\n+  if (!dependent_p)\n+    {\n       stmt = c_finish_omp_atomic (code, lhs, rhs);\n+      if (stmt == error_mark_node)\n+\treturn;\n     }\n-    \n-  if (stmt != error_mark_node)\n-    add_stmt (stmt);\n+  if (processing_template_decl)\n+    stmt = build2 (OMP_ATOMIC, void_type_node, integer_zero_node,\n+\t\t   build2 (code, void_type_node, orig_lhs, orig_rhs));\n+  add_stmt (stmt);\n }\n \n void"}, {"sha": "3a7d2f5d53ef8e7aa3b5cead8426f1e32221d84b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239371f9c700813d7e7be7f34959850bd36a720f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239371f9c700813d7e7be7f34959850bd36a720f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=239371f9c700813d7e7be7f34959850bd36a720f", "patch": "@@ -1,3 +1,8 @@\n+2007-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/33894\n+\t* testsuite/libgomp.c++/atomic-1.C: New test.\n+\n 2007-10-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/33275"}, {"sha": "73f6e7c40594100bf41887d2e4430ef7d0b4af7f", "filename": "libgomp/testsuite/libgomp.c++/atomic-1.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239371f9c700813d7e7be7f34959850bd36a720f/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fatomic-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239371f9c700813d7e7be7f34959850bd36a720f/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fatomic-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fatomic-1.C?ref=239371f9c700813d7e7be7f34959850bd36a720f", "patch": "@@ -0,0 +1,53 @@\n+// PR c++/33894\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort ();\n+\n+int check;\n+\n+template<typename T> void\n+foo ()\n+{\n+  #pragma omp atomic\n+  check |= sizeof (T);\n+}\n+\n+template<typename T> void\n+bar (T *x, T y)\n+{\n+  #pragma omp atomic\n+  *x += y;\n+}\n+\n+template<typename T> void\n+baz ()\n+{\n+  #pragma omp atomic\n+  check++;\n+}\n+\n+int\n+main ()\n+{\n+  int i = 0;\n+  long l = 0;\n+\n+  check = 0;\n+  foo<char> ();\n+  if (check != sizeof (char))\n+    abort ();\n+  foo<short> ();\n+  if (check != (sizeof (char) | sizeof (short)))\n+    abort ();\n+  bar(&i, 4);\n+  bar(&l, 8L);\n+  if (i != 4 || l != 8L)\n+    abort ();\n+  baz<char> ();\n+  if (check != (sizeof (char) | sizeof (short)) + 1)\n+    abort ();\n+  baz<long double> ();\n+  if (check != (sizeof (char) | sizeof (short)) + 2)\n+    abort ();\n+}"}]}