{"sha": "b4cdc2a3d332b6d350fa7d334c28d54544c7777e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRjZGMyYTNkMzMyYjZkMzUwZmE3ZDMzNGMyOGQ1NDU0NGM3Nzc3ZQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-14T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-14T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "7398a79beb55ea58f6e4db7f5c9949f2223d7ff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7398a79beb55ea58f6e4db7f5c9949f2223d7ff1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4cdc2a3d332b6d350fa7d334c28d54544c7777e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4cdc2a3d332b6d350fa7d334c28d54544c7777e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4cdc2a3d332b6d350fa7d334c28d54544c7777e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4cdc2a3d332b6d350fa7d334c28d54544c7777e/comments", "author": null, "committer": null, "parents": [{"sha": "2c3d487a9a8af00c0c462cd4e1a112804b9cc156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3d487a9a8af00c0c462cd4e1a112804b9cc156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c3d487a9a8af00c0c462cd4e1a112804b9cc156"}], "stats": {"total": 292, "additions": 291, "deletions": 1}, "files": [{"sha": "0640bbc0c6071af15773dd168af206bc482a34e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cdc2a3d332b6d350fa7d334c28d54544c7777e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cdc2a3d332b6d350fa7d334c28d54544c7777e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4cdc2a3d332b6d350fa7d334c28d54544c7777e", "patch": "@@ -1,3 +1,209 @@\n+2020-12-13  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.c (vax_output_int_move): Unify push operation\n+\tselection.\n+\n+2020-12-13  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.c (vax_output_int_move): Check the correct\n+\toperand for constant 0 push operation.\n+\n+2020-12-13  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.c (vax_expand_addsub_di_operands): Handle equal\n+\tinput operands with subtraction.\n+\n+2020-12-13  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.c (vax_expand_addsub_di_operands): Handle the\n+\taddition or subtraction of 0.\n+\n+2020-12-13  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.c (vax_expand_addsub_di_operands): Remove\n+\tunused register allocation.\n+\n+2020-12-13  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.md (casesi): Use `gen_int_mode' rather than\n+\t`GEN_INT' for the immediate used for lower bound adjustment.\n+\n+2020-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98256\n+\t* tree-ssa-math-opts.c (match_uaddsub_overflow): For BIT_NOT_EXPR,\n+\tonly handle a single use, and insert .ADD_OVERFLOW before the\n+\tcomparison rather than after the BIT_NOT_EXPR.  Return true iff\n+\tit is BIT_NOT_EXPR and it has been removed.\n+\t(math_opts_dom_walker::after_dom_children) <case BIT_NOT_EXPR>:\n+\tIf match_uaddsub_overflow returned true, continue instead of break.\n+\n+2020-12-13  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tRevert:\n+\t2020-12-13  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/arm_mve.h (__arm_vcaddq_rot90_u8, __arm_vcaddq_rot270_u8,\n+\t, __arm_vcaddq_rot90_s8, __arm_vcaddq_rot270_s8,\n+\t__arm_vcaddq_rot90_u16, __arm_vcaddq_rot270_u16, __arm_vcaddq_rot90_s16,\n+\t__arm_vcaddq_rot270_s16, __arm_vcaddq_rot90_u32,\n+\t__arm_vcaddq_rot270_u32, __arm_vcaddq_rot90_s32,\n+\t__arm_vcaddq_rot270_s32, __arm_vcmulq_rot90_f16,\n+\t__arm_vcmulq_rot270_f16, __arm_vcmulq_rot180_f16,\n+\t__arm_vcmulq_f16, __arm_vcaddq_rot90_f16, __arm_vcaddq_rot270_f16,\n+\t__arm_vcmulq_rot90_f32, __arm_vcmulq_rot270_f32,\n+\t__arm_vcmulq_rot180_f32, __arm_vcmulq_f32, __arm_vcaddq_rot90_f32,\n+\t__arm_vcaddq_rot270_f32, __arm_vcmlaq_f16, __arm_vcmlaq_rot180_f16,\n+\t__arm_vcmlaq_rot270_f16, __arm_vcmlaq_rot90_f16, __arm_vcmlaq_f32,\n+\t__arm_vcmlaq_rot180_f32, __arm_vcmlaq_rot270_f32,\n+\t__arm_vcmlaq_rot90_f32): Update builtin calls.\n+\t* config/arm/arm_mve_builtins.def (vcaddq_rot90_u, vcaddq_rot270_u,\n+\tvcaddq_rot90_s, vcaddq_rot270_s, vcaddq_rot90_f, vcaddq_rot270_f,\n+\tvcmulq_f, vcmulq_rot90_f, vcmulq_rot180_f, vcmulq_rot270_f,\n+\tvcmlaq_f, vcmlaq_rot90_f, vcmlaq_rot180_f, vcmlaq_rot270_f): Removed.\n+\t(vcaddq_rot90, vcaddq_rot270, vcmulq, vcmulq_rot90, vcmulq_rot180,\n+\tvcmulq_rot270, vcmlaq, vcmlaq_rot90, vcmlaq_rot180, vcmlaq_rot270):\n+\tNew.\n+\t* config/arm/constraints.md (Dz): Include MVE.\n+\t* config/arm/iterators.md (mve_rotsplit1, mve_rotsplit2): New.\n+\t(rot): Add UNSPEC_VCMLS, UNSPEC_VCMUL and UNSPEC_VCMUL180.\n+\t(rot_op, rotsplit1, rotsplit2, fcmac1, VCMLA_OP, VCMUL_OP): New.\n+\t* config/arm/mve.md (VCADDQ_ROT270_S, VCADDQ_ROT90_S, VCADDQ_ROT270_U,\n+\tVCADDQ_ROT90_U, VCADDQ_ROT270_F, VCADDQ_ROT90_F, VCMULQ_F,\n+\tVCMULQ_ROT180_F, VCMULQ_ROT270_F, VCMULQ_ROT90_F, VCMLAQ_F,\n+\tVCMLAQ_ROT180_F, VCMLAQ_ROT90_F, VCMLAQ_ROT270_F, VCADDQ_ROT270_S,\n+\tVCADDQ_ROT270, VCADDQ_ROT90): Removed.\n+\t(mve_rot, VCMUL): New.\n+\t(mve_vcaddq_rot270_<supf><mode, mve_vcaddq_rot90_<supf><mode>,\n+\tmve_vcaddq_rot270_f<mode>, mve_vcaddq_rot90_f<mode>, mve_vcmulq_f<mode,\n+\tmve_vcmulq_rot180_f<mode>, mve_vcmulq_rot270_f<mode>,\n+\tmve_vcmulq_rot90_f<mode>, mve_vcmlaq_f<mode>, mve_vcmlaq_rot180_f<mode>,\n+\tmve_vcmlaq_rot270_f<mode>, mve_vcmlaq_rot90_f<mode>): Removed.\n+\t(mve_vcmlaq<mve_rot><mode>, mve_vcmulq<mve_rot><mode>,\n+\tmve_vcaddq<mve_rot><mode>, cadd<rot><mode>3, mve_vcaddq<mve_rot><mode>):\n+\tNew.\n+\t(cmul<rot_op><mode>3): Exclude MVE types.\n+\t* config/arm/unspecs.md (UNSPEC_VCMUL90, UNSPEC_VCMUL270): New.\n+\t* config/arm/vec-common.md (cadd<rot><mode>3, cmul<rot_op><mode>3,\n+\tarm_vcmla<rot><mode>, cml<fcmac1><rot_op><mode>4): New.\n+\t* config/arm/unspecs.md (UNSPEC_VCMUL, UNSPEC_VCMUL180, UNSPEC_VCMLS,\n+\tUNSPEC_VCMLS180): New.\n+\t* config/arm/neon.md (cmul<rot_op><mode>3): New.\n+\n+2020-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/92469\n+\t* varasm.c (eliminable_regno_p): New function.\n+\t(make_decl_rtl): Reject asm vars for frame and argp\n+\tif they are different from hard frame pointer.\n+\n+2020-12-13  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/arm_mve.h (__arm_vcaddq_rot90_u8, __arm_vcaddq_rot270_u8,\n+\t, __arm_vcaddq_rot90_s8, __arm_vcaddq_rot270_s8,\n+\t__arm_vcaddq_rot90_u16, __arm_vcaddq_rot270_u16, __arm_vcaddq_rot90_s16,\n+\t__arm_vcaddq_rot270_s16, __arm_vcaddq_rot90_u32,\n+\t__arm_vcaddq_rot270_u32, __arm_vcaddq_rot90_s32,\n+\t__arm_vcaddq_rot270_s32, __arm_vcmulq_rot90_f16,\n+\t__arm_vcmulq_rot270_f16, __arm_vcmulq_rot180_f16,\n+\t__arm_vcmulq_f16, __arm_vcaddq_rot90_f16, __arm_vcaddq_rot270_f16,\n+\t__arm_vcmulq_rot90_f32, __arm_vcmulq_rot270_f32,\n+\t__arm_vcmulq_rot180_f32, __arm_vcmulq_f32, __arm_vcaddq_rot90_f32,\n+\t__arm_vcaddq_rot270_f32, __arm_vcmlaq_f16, __arm_vcmlaq_rot180_f16,\n+\t__arm_vcmlaq_rot270_f16, __arm_vcmlaq_rot90_f16, __arm_vcmlaq_f32,\n+\t__arm_vcmlaq_rot180_f32, __arm_vcmlaq_rot270_f32,\n+\t__arm_vcmlaq_rot90_f32): Update builtin calls.\n+\t* config/arm/arm_mve_builtins.def (vcaddq_rot90_u, vcaddq_rot270_u,\n+\tvcaddq_rot90_s, vcaddq_rot270_s, vcaddq_rot90_f, vcaddq_rot270_f,\n+\tvcmulq_f, vcmulq_rot90_f, vcmulq_rot180_f, vcmulq_rot270_f,\n+\tvcmlaq_f, vcmlaq_rot90_f, vcmlaq_rot180_f, vcmlaq_rot270_f): Removed.\n+\t(vcaddq_rot90, vcaddq_rot270, vcmulq, vcmulq_rot90, vcmulq_rot180,\n+\tvcmulq_rot270, vcmlaq, vcmlaq_rot90, vcmlaq_rot180, vcmlaq_rot270):\n+\tNew.\n+\t* config/arm/constraints.md (Dz): Include MVE.\n+\t* config/arm/iterators.md (mve_rotsplit1, mve_rotsplit2): New.\n+\t(rot): Add UNSPEC_VCMLS, UNSPEC_VCMUL and UNSPEC_VCMUL180.\n+\t(rot_op, rotsplit1, rotsplit2, fcmac1, VCMLA_OP, VCMUL_OP): New.\n+\t* config/arm/mve.md (VCADDQ_ROT270_S, VCADDQ_ROT90_S, VCADDQ_ROT270_U,\n+\tVCADDQ_ROT90_U, VCADDQ_ROT270_F, VCADDQ_ROT90_F, VCMULQ_F,\n+\tVCMULQ_ROT180_F, VCMULQ_ROT270_F, VCMULQ_ROT90_F, VCMLAQ_F,\n+\tVCMLAQ_ROT180_F, VCMLAQ_ROT90_F, VCMLAQ_ROT270_F, VCADDQ_ROT270_S,\n+\tVCADDQ_ROT270, VCADDQ_ROT90): Removed.\n+\t(mve_rot, VCMUL): New.\n+\t(mve_vcaddq_rot270_<supf><mode, mve_vcaddq_rot90_<supf><mode>,\n+\tmve_vcaddq_rot270_f<mode>, mve_vcaddq_rot90_f<mode>, mve_vcmulq_f<mode,\n+\tmve_vcmulq_rot180_f<mode>, mve_vcmulq_rot270_f<mode>,\n+\tmve_vcmulq_rot90_f<mode>, mve_vcmlaq_f<mode>, mve_vcmlaq_rot180_f<mode>,\n+\tmve_vcmlaq_rot270_f<mode>, mve_vcmlaq_rot90_f<mode>): Removed.\n+\t(mve_vcmlaq<mve_rot><mode>, mve_vcmulq<mve_rot><mode>,\n+\tmve_vcaddq<mve_rot><mode>, cadd<rot><mode>3, mve_vcaddq<mve_rot><mode>):\n+\tNew.\n+\t(cmul<rot_op><mode>3): Exclude MVE types.\n+\t* config/arm/unspecs.md (UNSPEC_VCMUL90, UNSPEC_VCMUL270): New.\n+\t* config/arm/vec-common.md (cadd<rot><mode>3, cmul<rot_op><mode>3,\n+\tarm_vcmla<rot><mode>, cml<fcmac1><rot_op><mode>4): New.\n+\t* config/arm/unspecs.md (UNSPEC_VCMUL, UNSPEC_VCMUL180, UNSPEC_VCMLS,\n+\tUNSPEC_VCMLS180): New.\n+\t* config/arm/neon.md (cmul<rot_op><mode>3): New.\n+\n+2020-12-13  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/arm.c (arm_preferred_simd_mode): Add E_HFmode.\n+\n+2020-12-13  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-slp-patterns.c: New file.\n+\t* Makefile.in: Add it.\n+\t* doc/passes.texi: Document it.\n+\t* internal-fn.def (COMPLEX_ADD_ROT90, COMPLEX_ADD_ROT270): New.\n+\t* optabs.def (cadd90_optab, cadd270_optab): New.\n+\t* doc/md.texi: Document them.\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Add dissolve code.\n+\t* tree-vect-slp.c:\n+\t(vect_free_slp_instance, vect_create_new_slp_node): Export.\n+\t(vect_match_slp_patterns_2, vect_match_slp_patterns): New.\n+\t(vect_analyze_slp): Use it.\n+\t* tree-vectorizer.h (vect_free_slp_tree): Export.\n+\t(enum _complex_operation): Forward declare.\n+\t(class vect_pattern): New\n+\n+2020-12-13  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-patterns.c (vect_mark_pattern_stmts): Remove static inline.\n+\t* tree-vect-slp.c (vect_create_new_slp_node): Remove static and only\n+\tset smts if valid.\n+\t* tree-vectorizer.c (vec_info::add_pattern_stmt): New.\n+\t(vec_info::set_vinfo_for_stmt): Optionally enforce read-only.\n+\t* tree-vectorizer.h (struct _slp_tree): Use new types.\n+\t(lane_permutation_t, lane_permutation_t): New.\n+\t(vect_create_new_slp_node, vect_mark_pattern_stmts): New.\n+\n+2020-12-13  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* doc/sourcebuild.texi (Commands for use in dg-final, Scan the\n+\tassembly output, scan-assembler-symbol-section): Document.\n+\t(scan-symbol-section): Document.\n+\n+2020-12-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* is-a.h (reinterpret_is_a_helper): New class.\n+\t(static_is_a_helper): Likewise.\n+\t(is_a_helper): Inherit from reinterpret_is_a_helper.\n+\t(is_a_helper<const T *>): New specialization.\n+\n+2020-12-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* coretypes.h (iterator_range): Move to...\n+\t* iterator-utils.h: ...this new file.\n+\n+2020-12-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtlanal.c (noop_move_p): Don't check for REG_EQUAL notes.\n+\n+2020-12-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* vec.h (vnull::operator vec<T, A, L>): Make const.\n+\n 2020-12-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/96685"}, {"sha": "7991ccd327e7ce2ffb56d669587aad76bb818e88", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cdc2a3d332b6d350fa7d334c28d54544c7777e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cdc2a3d332b6d350fa7d334c28d54544c7777e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b4cdc2a3d332b6d350fa7d334c28d54544c7777e", "patch": "@@ -1 +1 @@\n-20201213\n+20201214"}, {"sha": "3794c650e440478a1fa4d4963e3d6f8e2d4c2a5d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cdc2a3d332b6d350fa7d334c28d54544c7777e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cdc2a3d332b6d350fa7d334c28d54544c7777e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b4cdc2a3d332b6d350fa7d334c28d54544c7777e", "patch": "@@ -1,3 +1,8 @@\n+2020-12-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* dump-parse-tree.c (show_array_ref): Also show coarrays.\n+\t(debug): Implement for array reference.\n+\n 2020-12-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/98022"}, {"sha": "3bf5e62fdfd9befef837899a35e416a53693cb9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cdc2a3d332b6d350fa7d334c28d54544c7777e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cdc2a3d332b6d350fa7d334c28d54544c7777e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4cdc2a3d332b6d350fa7d334c28d54544c7777e", "patch": "@@ -1,3 +1,82 @@\n+2020-12-13  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* gcc.target/vax/push.c: New test.\n+\n+2020-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98256\n+\t* gcc.c-torture/compile/pr98256.c: New test.\n+\n+2020-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/92469\n+\t* gcc.target/i386/pr92469.c: New test.\n+\t* gcc.target/i386/pr79804.c: Adjust expected diagnostics.\n+\t* gcc.target/i386/pr88178.c: Expect an error.\n+\n+2020-12-13  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/arm/vect-half-floats.c: New test.\n+\n+2020-12-13  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_v8_3a_complex_neon_ok_nocache): Fix it.\n+\t(check_effective_target_vect_complex_add_byte\n+\t,check_effective_target_vect_complex_add_int\n+\t,check_effective_target_vect_complex_add_short\n+\t,check_effective_target_vect_complex_add_long\n+\t,check_effective_target_vect_complex_add_half\n+\t,check_effective_target_vect_complex_add_float\n+\t,check_effective_target_vect_complex_add_double): New.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-byte.c: New test.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-int.c: New test.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-long.c: New test.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-short.c: New test.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-unsigned-byte.c: New test.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-unsigned-int.c: New test.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-unsigned-long.c: New test.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-unsigned-short.c: New test.\n+\t* gcc.dg/vect/complex/complex-add-pattern-template.c: New test.\n+\t* gcc.dg/vect/complex/complex-add-template.c: New test.\n+\t* gcc.dg/vect/complex/complex-operations-run.c: New test.\n+\t* gcc.dg/vect/complex/complex-operations.c: New test.\n+\t* gcc.dg/vect/complex/complex.exp: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-double.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-half-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-pattern-double.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-pattern-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-pattern-half-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-double.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-half-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-double.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-half-float.c: New test.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-byte.c: New test.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-int.c: New test.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-long.c: New test.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-short.c: New test.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-byte.c: New test.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-int.c: New test.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-long.c: New test.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-short.c: New test.\n+\n+2020-12-13  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* lib/scanasm.exp (scan-symbol-section): Pass args to\n+\tdg-scan-symbol-section.\n+\t(scan-assembler-symbol-section): Likewise.\n+\t(dg-scan-symbol-section): Handle selector from orig_args.\n+\tGet patterns from orig_args.\n+\t(parse_section_of_symbols): Fix section_pattern.\n+\tStrip double quotes from section name.\n+\t* g++.dg/gomp/tls-5.C: Restrict ir, _ZGR2ir_ scans to tls_native.\n+\t* gcc.dg/20021029-1.c: Anchor ar symbol.\n+\t* gcc.dg/darwin-sections.c: Remove obsolete scans for _a, _b in\n+\t.data.\n+\n 2020-12-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/98022"}]}