{"sha": "7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ViNWJhZmY5OTRiMjQ5YzBmYjVkOTEzZTZmN2FmYTdiOWZiYmM2Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-07-17T07:13:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-07-17T07:13:17Z"}, "message": "re PR tree-optimization/91157 (ICE: verify_gimple failed (error: position plus size exceeds size of referenced object in 'bit_field_ref'))\n\n\tPR tree-optimization/91157\n\t* tree-vect-generic.c (expand_vector_comparison): Handle lhs being\n\ta vector boolean with scalar mode.\n\t(expand_vector_condition): Handle first operand being a vector boolean\n\twith scalar mode.\n\t(expand_vector_operations_1): For comparisons, don't bail out early\n\tif the return type is vector boolean with scalar mode, but comparison\n\toperand type is not.\n\n\t* gcc.target/i386/avx512f-pr91157.c: New test.\n\t* gcc.target/i386/avx512bw-pr91157.c: New test.\n\nFrom-SVN: r273543", "tree": {"sha": "8845117a55255e65eb8657165e9a84cc94f377a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8845117a55255e65eb8657165e9a84cc94f377a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6350f82315a6d811c6dd0910ea37f64524ef07b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6350f82315a6d811c6dd0910ea37f64524ef07b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6350f82315a6d811c6dd0910ea37f64524ef07b"}], "stats": {"total": 125, "additions": 122, "deletions": 3}, "files": [{"sha": "df997772708a9ca316982021812ada62a005fc3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63", "patch": "@@ -1,3 +1,14 @@\n+2019-07-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/91157\n+\t* tree-vect-generic.c (expand_vector_comparison): Handle lhs being\n+\ta vector boolean with scalar mode.\n+\t(expand_vector_condition): Handle first operand being a vector boolean\n+\twith scalar mode.\n+\t(expand_vector_operations_1): For comparisons, don't bail out early\n+\tif the return type is vector boolean with scalar mode, but comparison\n+\toperand type is not.\n+\n 2019-07-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91181"}, {"sha": "5c156c7738f399f4aec616e5a8f1a44f8e514447", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63", "patch": "@@ -1,3 +1,9 @@\n+2019-07-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/91157\n+\t* gcc.target/i386/avx512f-pr91157.c: New test.\n+\t* gcc.target/i386/avx512bw-pr91157.c: New test.\n+\n 2019-07-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91181"}, {"sha": "602d922eda98d26d26ed6d9e183d0689657d1f7f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr91157.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr91157.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr91157.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr91157.c?ref=7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63", "patch": "@@ -0,0 +1,6 @@\n+/* PR tree-optimization/91157 */\n+/* { dg-do run { target { avx512bw && lp64 } } } */\n+/* { dg-options \"-O2 -mavx512bw -fexceptions -fnon-call-exceptions -fsignaling-nans\" } */\n+\n+#define AVX512BW\n+#include \"avx512f-pr91157.c\""}, {"sha": "c7d0d8b4030b46d4496970ca1c461feac4b091b7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr91157.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr91157.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr91157.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr91157.c?ref=7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63", "patch": "@@ -0,0 +1,29 @@\n+/* PR tree-optimization/91157 */\n+/* { dg-do run { target { avx512f && lp64 } } } */\n+/* { dg-options \"-O2 -mavx512f -fexceptions -fnon-call-exceptions -fsignaling-nans\" } */\n+\n+#include \"avx512f-helper.h\"\n+\n+typedef long double V __attribute__ ((vector_size (4 * sizeof (long double))));\n+typedef __int128 W __attribute__ ((vector_size (4 * sizeof (__int128))));\n+\n+__attribute__((noipa)) W\n+foo (V x)\n+{\n+  return x == 0;\n+}\n+\n+static void\n+test_512 (void)\n+{\n+  V a = { 5.0L, 0.0L, -0.0L, -17.0L };\n+  V b = { -0.0L, 16.0L, 0.0L, 18.0L };\n+  V c = { 6.0L, 7.0L, 8.0L, 0.0L };\n+  W ar = foo (a);\n+  W br = foo (b);\n+  W cr = foo (c);\n+  if (ar[0] != 0 || ar[1] != -1 || ar[2] != -1 || ar[3] != 0\n+      || br[0] != -1 || br[1] != 0 || br[2] != -1 || br[3] != 0\n+      || cr[0] != 0 || cr[1] != 0 || cr[2] != 0 || cr[3] != -1)\n+    __builtin_abort ();\n+}"}, {"sha": "6fcd37c8a690a4e78a9f34e8d0aeeb3fb66b0f45", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63", "patch": "@@ -382,8 +382,48 @@ expand_vector_comparison (gimple_stmt_iterator *gsi, tree type, tree op0,\n   tree t;\n   if (!expand_vec_cmp_expr_p (TREE_TYPE (op0), type, code)\n       && !expand_vec_cond_expr_p (type, TREE_TYPE (op0), code))\n-    t = expand_vector_piecewise (gsi, do_compare, type,\n-\t\t\t\t TREE_TYPE (TREE_TYPE (op0)), op0, op1, code);\n+    {\n+      if (VECTOR_BOOLEAN_TYPE_P (type)\n+\t  && VECTOR_BOOLEAN_TYPE_P (type)\n+\t  && SCALAR_INT_MODE_P (TYPE_MODE (type))\n+\t  && known_lt (GET_MODE_BITSIZE (TYPE_MODE (type)),\n+\t\t       TYPE_VECTOR_SUBPARTS (type)\n+\t\t       * GET_MODE_BITSIZE (SCALAR_TYPE_MODE\n+\t\t\t\t\t\t(TREE_TYPE (type)))))\n+\t{\n+\t  tree inner_type = TREE_TYPE (TREE_TYPE (op0));\n+\t  tree part_width = TYPE_SIZE (inner_type);\n+\t  tree index = bitsize_int (0);\n+\t  int nunits = nunits_for_known_piecewise_op (TREE_TYPE (op0));\n+\t  int prec = GET_MODE_PRECISION (SCALAR_TYPE_MODE (type));\n+\t  tree ret_type = build_nonstandard_integer_type (prec, 1);\n+\t  tree ret_inner_type = boolean_type_node;\n+\t  int i;\n+\t  location_t loc = gimple_location (gsi_stmt (*gsi));\n+\t  t = build_zero_cst (ret_type);\n+\n+\t  if (TYPE_PRECISION (ret_inner_type) != 1)\n+\t    ret_inner_type = build_nonstandard_integer_type (1, 1);\n+\t  warning_at (loc, OPT_Wvector_operation_performance,\n+\t\t      \"vector operation will be expanded piecewise\");\n+\t  for (i = 0; i < nunits;\n+\t       i++, index = int_const_binop (PLUS_EXPR, index, part_width))\n+\t    {\n+\t      tree a = tree_vec_extract (gsi, inner_type, op0, part_width,\n+\t\t\t\t\t index);\n+\t      tree b = tree_vec_extract (gsi, inner_type, op1, part_width,\n+\t\t\t\t\t index);\n+\t      tree result = gimplify_build2 (gsi, code, ret_inner_type, a, b);\n+\t      t = gimplify_build3 (gsi, BIT_INSERT_EXPR, ret_type, t, result,\n+\t\t\t\t   bitsize_int (i));\n+\t    }\n+\t  t = gimplify_build1 (gsi, VIEW_CONVERT_EXPR, type, t);\n+\t}\n+      else\n+\tt = expand_vector_piecewise (gsi, do_compare, type,\n+\t\t\t\t     TREE_TYPE (TREE_TYPE (op0)), op0, op1,\n+\t\t\t\t     code);\n+    }\n   else\n     t = NULL_TREE;\n \n@@ -879,6 +919,7 @@ expand_vector_condition (gimple_stmt_iterator *gsi)\n   tree a1 = a;\n   tree a2 = NULL_TREE;\n   bool a_is_comparison = false;\n+  bool a_is_scalar_bitmask = false;\n   tree b = gimple_assign_rhs2 (stmt);\n   tree c = gimple_assign_rhs3 (stmt);\n   vec<constructor_elt, va_gc> *v;\n@@ -942,6 +983,20 @@ expand_vector_condition (gimple_stmt_iterator *gsi)\n   warning_at (loc, OPT_Wvector_operation_performance,\n \t      \"vector condition will be expanded piecewise\");\n \n+  if (!a_is_comparison\n+      && VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (a))\n+      && SCALAR_INT_MODE_P (TYPE_MODE (TREE_TYPE (a)))\n+      && known_lt (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (a))),\n+\t\t   TYPE_VECTOR_SUBPARTS (TREE_TYPE (a))\n+\t\t   * GET_MODE_BITSIZE (SCALAR_TYPE_MODE\n+\t\t\t\t\t\t(TREE_TYPE (TREE_TYPE (a))))))\n+    {\n+      a_is_scalar_bitmask = true;\n+      int prec = GET_MODE_PRECISION (SCALAR_TYPE_MODE (TREE_TYPE (a)));\n+      tree atype = build_nonstandard_integer_type (prec, 1);\n+      a = gimplify_build1 (gsi, VIEW_CONVERT_EXPR, atype, a);\n+    }\n+\n   int nunits = nunits_for_known_piecewise_op (type);\n   vec_alloc (v, nunits);\n   for (i = 0; i < nunits; i++)\n@@ -957,6 +1012,14 @@ expand_vector_condition (gimple_stmt_iterator *gsi)\n \t\t\t\t       comp_width, comp_index);\n \t  aa = fold_build2 (TREE_CODE (a), cond_type, aa1, aa2);\n \t}\n+      else if (a_is_scalar_bitmask)\n+\t{\n+\t  wide_int w = wi::set_bit_in_zero (i, TYPE_PRECISION (TREE_TYPE (a)));\n+\t  result = gimplify_build2 (gsi, BIT_AND_EXPR, TREE_TYPE (a),\n+\t\t\t\t    a, wide_int_to_tree (TREE_TYPE (a), w));\n+\t  aa = fold_build2 (NE_EXPR, boolean_type_node, result,\n+\t\t\t    build_zero_cst (TREE_TYPE (a)));\n+\t}\n       else\n \taa = tree_vec_extract (gsi, cond_type, a, width, index);\n       result = gimplify_build3 (gsi, COND_EXPR, inner_type, aa, bb, cc);\n@@ -1941,7 +2004,11 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n   /* A scalar operation pretending to be a vector one.  */\n   if (VECTOR_BOOLEAN_TYPE_P (type)\n       && !VECTOR_MODE_P (TYPE_MODE (type))\n-      && TYPE_MODE (type) != BLKmode)\n+      && TYPE_MODE (type) != BLKmode\n+      && (TREE_CODE_CLASS (gimple_assign_rhs_code (stmt)) != tcc_comparison\n+\t  || (VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (rhs1))\n+\t      && !VECTOR_MODE_P (TYPE_MODE (TREE_TYPE (rhs1)))\n+\t      && TYPE_MODE (TREE_TYPE (rhs1)) != BLKmode)))\n     return;\n \n   /* If the vector operation is operating on all same vector elements"}]}