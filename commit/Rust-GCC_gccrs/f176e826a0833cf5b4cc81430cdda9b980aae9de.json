{"sha": "f176e826a0833cf5b4cc81430cdda9b980aae9de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3NmU4MjZhMDgzM2NmNWI0Y2M4MTQzMGNkZGE5Yjk4MGFhZTlkZQ==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-05-14T21:40:33Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-05-14T21:40:33Z"}, "message": "rs6000.md (movsi): Don't modify RTL in-place.\n\n* config/rs6000/rs6000.md (movsi): Don't modify RTL in-place.\n(movdi): Make similar to movsi.\n* config/rs6000/rs6000.h (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): There\nis no such thing as a DImode CONST_DOUBLE.\n* config/rs6000/rs6000.c (output_toc): Likewise.\n\nFrom-SVN: r33898", "tree": {"sha": "f48e6286d3899788ad4546fa1f5e0d14746b64ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f48e6286d3899788ad4546fa1f5e0d14746b64ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f176e826a0833cf5b4cc81430cdda9b980aae9de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f176e826a0833cf5b4cc81430cdda9b980aae9de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f176e826a0833cf5b4cc81430cdda9b980aae9de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f176e826a0833cf5b4cc81430cdda9b980aae9de/comments", "author": null, "committer": null, "parents": [{"sha": "94a54f47cfdfc0ed8d8a4c598e3018fd5e5eabca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a54f47cfdfc0ed8d8a4c598e3018fd5e5eabca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94a54f47cfdfc0ed8d8a4c598e3018fd5e5eabca"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "99793e2fe61533281ddc9aaeff69445253d4422c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f176e826a0833cf5b4cc81430cdda9b980aae9de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f176e826a0833cf5b4cc81430cdda9b980aae9de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f176e826a0833cf5b4cc81430cdda9b980aae9de", "patch": "@@ -1,7 +1,13 @@\n 2000-05-14  Geoffrey Keating  <geoffk@cygnus.com>\n \n-\t* rs6000.c (output_cbranch): Don't output prediction codes\n-\twhen old mnemonics are in use.  Print register names\n+\t* config/rs6000/rs6000.md (movsi): Don't modify RTL in-place.\n+\t(movdi): Make similar to movsi.\n+\t* config/rs6000/rs6000.h (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): There\n+\tis no such thing as a DImode CONST_DOUBLE.\n+\t* config/rs6000/rs6000.c (output_toc): Likewise.\n+\t\n+\t* config/rs6000/rs6000.c (output_cbranch): Don't output prediction\n+\tcodes when old mnemonics are in use.  Print register names\n \tfor cc registers when requested.\n \n \t* optabs.c (expand_float): Don't allow mode widening that causes"}, {"sha": "7a8f1b74e7debdecd656ee2d17ac8a14a8717280", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f176e826a0833cf5b4cc81430cdda9b980aae9de/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f176e826a0833cf5b4cc81430cdda9b980aae9de/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f176e826a0833cf5b4cc81430cdda9b980aae9de", "patch": "@@ -6228,7 +6228,7 @@ output_toc (file, x, labelno)\n \t  return;\n \t}\n     }\n-  else if (GET_MODE (x) == DImode\n+  else if (GET_MODE (x) == VOIDmode\n \t   && (GET_CODE (x) == CONST_INT || GET_CODE (x) == CONST_DOUBLE)\n \t   && ! (TARGET_NO_FP_IN_TOC && ! TARGET_MINIMAL_TOC))\n     {"}, {"sha": "9959ab503d0a49373119b334d5ebd113ceae34ff", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f176e826a0833cf5b4cc81430cdda9b980aae9de/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f176e826a0833cf5b4cc81430cdda9b980aae9de/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=f176e826a0833cf5b4cc81430cdda9b980aae9de", "patch": "@@ -2355,7 +2355,7 @@ extern int toc_initialized;\n        || (! (TARGET_NO_FP_IN_TOC && ! TARGET_MINIMAL_TOC)\t\t\\\n \t   && GET_CODE (X) == CONST_DOUBLE\t\t\t\t\\\n \t   && (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\t\\\n-\t       || (TARGET_POWERPC64 && GET_MODE (X) == DImode)))))\n+\t       || TARGET_POWERPC64))))\n #if 0\n \t   && BITS_PER_WORD == HOST_BITS_PER_INT)))\n #endif"}, {"sha": "1f54ec1358a63c92adc7c07b5de48197901c57cf", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f176e826a0833cf5b4cc81430cdda9b980aae9de/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f176e826a0833cf5b4cc81430cdda9b980aae9de/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f176e826a0833cf5b4cc81430cdda9b980aae9de", "patch": "@@ -8087,7 +8087,8 @@\n \t  && ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (get_pool_constant (\n \t\tXEXP (operands[1], 0))))\n \t{\n-\t  XEXP (operands[1], 0) = create_TOC_reference (XEXP (operands[1], 0));\n+\t  operands[1] = gen_rtx_MEM (SImode,\n+\t\t\t     create_TOC_reference (XEXP (operands[1], 0)));\n \t  MEM_ALIAS_SET (operands[1]) = get_TOC_alias_set ();\t\n \t  RTX_UNCHANGING_P (operands[1]) = 1;\n \t}\n@@ -8709,27 +8710,24 @@\n \t}\n \n       operands[1] = force_const_mem (DImode, operands[1]);\n-      if (TARGET_TOC && CONSTANT_POOL_EXPR_P (XEXP (operands[1], 0)))\n+\n+      if (TARGET_TOC \n+\t  && CONSTANT_POOL_EXPR_P (XEXP (operands[1], 0))\n+\t  && ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (get_pool_constant (\n+\t\tXEXP (operands[1], 0))))\n \t{\n-\t  XEXP (operands[1], 0) = create_TOC_reference (XEXP (operands[1], 0));\n+\t  operands[1] = gen_rtx_MEM (DImode,\n+\t\t\t     create_TOC_reference (XEXP (operands[1], 0)));\n+\n \t  MEM_ALIAS_SET (operands[1]) = get_TOC_alias_set ();\t\n \t  RTX_UNCHANGING_P (operands[1]) = 1;\n \t}\t\n+\n       if (! memory_address_p (DImode, XEXP (operands[1], 0))\n \t  && ! reload_in_progress)\n \toperands[1] = change_address (operands[1], DImode,\n \t\t\t\t      XEXP (operands[1], 0));\n     }\n-\n-  if (TARGET_TOC \n-     && GET_CODE (operands[1]) == MEM \n-     && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n-    {\n-      XEXP (operands[1], 0) = create_TOC_reference (XEXP (operands[1], 0));\n-      MEM_ALIAS_SET (operands[1]) = get_TOC_alias_set ();\t\n-      RTX_UNCHANGING_P (operands[1]) = 1;\n-    }\n-\n }\")\n \n (define_insn \"*movdi_32\""}]}