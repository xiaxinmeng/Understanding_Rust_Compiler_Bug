{"sha": "671769c38a2a4e4f76817307be3eb871f1acc399", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcxNzY5YzM4YTJhNGU0Zjc2ODE3MzA3YmUzZWI4NzFmMWFjYzM5OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-11-20T20:57:31Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-11-20T20:57:31Z"}, "message": "cgraph.c (ld_plugin_symbol_resolution_names): New.\n\n\t* cgraph.c (ld_plugin_symbol_resolution_names): New.\n\t(dump_cgraph_node): Dump resolution.\n\t* cgraph.h (ld_plugin_symbol_resolution_names): Declare.\n\t(cgraph_comdat_can_be_unshared_p): Dclare.\n\t* lto-streamer-out.c (produce_symtab): Use\n\tcgraph_comdat_can_be_unshared_p.\n\t* ipa.c (cgraph_address_taken_from_non_vtable_p): New function.\n\t(cgraph_comdat_can_be_unshared_p): New function based on logic\n\tin cgraph_externally_visible_p.\n\t(cgraph_externally_visible_p): Use it.\n\t(varpool_externally_visible_p): Virtual tables can be unshared.\n\t* varpool.c (dump_varpool_node): Dump resolution.\n\nFrom-SVN: r166984", "tree": {"sha": "7cc39c470d6699fa1f571addc906bfa4b6db0039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cc39c470d6699fa1f571addc906bfa4b6db0039"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/671769c38a2a4e4f76817307be3eb871f1acc399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671769c38a2a4e4f76817307be3eb871f1acc399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/671769c38a2a4e4f76817307be3eb871f1acc399", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671769c38a2a4e4f76817307be3eb871f1acc399/comments", "author": null, "committer": null, "parents": [{"sha": "700c498021be8d1f76b9a32a6c61a9e84a10e886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700c498021be8d1f76b9a32a6c61a9e84a10e886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700c498021be8d1f76b9a32a6c61a9e84a10e886"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "3fd3ae1c2a7840d551184e583b8306d7fa70f9fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671769c38a2a4e4f76817307be3eb871f1acc399/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671769c38a2a4e4f76817307be3eb871f1acc399/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=671769c38a2a4e4f76817307be3eb871f1acc399", "patch": "@@ -1,3 +1,18 @@\n+2010-11-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (ld_plugin_symbol_resolution_names): New.\n+\t(dump_cgraph_node): Dump resolution.\n+\t* cgraph.h (ld_plugin_symbol_resolution_names): Declare.\n+\t(cgraph_comdat_can_be_unshared_p): Dclare.\n+\t* lto-streamer-out.c (produce_symtab): Use\n+\tcgraph_comdat_can_be_unshared_p.\n+\t* ipa.c (cgraph_address_taken_from_non_vtable_p): New function.\n+\t(cgraph_comdat_can_be_unshared_p): New function based on logic\n+\tin cgraph_externally_visible_p.\n+\t(cgraph_externally_visible_p): Use it.\n+\t(varpool_externally_visible_p): Virtual tables can be unshared.\n+\t* varpool.c (dump_varpool_node): Dump resolution.\n+\n 2010-11-20  Jan Hubicka  <jh@suse.cz>\n \n \t* stmt.c (lshift_cheap_p): Support properly optimize_insn_for_speed_p."}, {"sha": "36bb87ad928810cdc31528c8c589225edb92b811", "filename": "gcc/cgraph.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671769c38a2a4e4f76817307be3eb871f1acc399/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671769c38a2a4e4f76817307be3eb871f1acc399/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=671769c38a2a4e4f76817307be3eb871f1acc399", "patch": "@@ -99,6 +99,19 @@ The callgraph:\n #include \"ipa-utils.h\"\n #include \"lto-streamer.h\"\n \n+const char * const ld_plugin_symbol_resolution_names[]=\n+{\n+  \"\",\n+  \"undef\",\n+  \"prevailing_def\",\n+  \"prevailing_def_ironly\",\n+  \"preempted_reg\",\n+  \"preempted_ir\",\n+  \"resolved_ir\",\n+  \"resolved_exec\",\n+  \"resolved_dyn\"\n+};\n+\n static void cgraph_node_remove_callers (struct cgraph_node *node);\n static inline void cgraph_edge_remove_caller (struct cgraph_edge *e);\n static inline void cgraph_edge_remove_callee (struct cgraph_edge *e);\n@@ -1866,6 +1879,9 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n     fprintf (f, \" local\");\n   if (node->local.externally_visible)\n     fprintf (f, \" externally_visible\");\n+  if (node->resolution != LDPR_UNKNOWN)\n+    fprintf (f, \" %s\",\n+ \t     ld_plugin_symbol_resolution_names[(int)node->resolution]);\n   if (node->local.finalized)\n     fprintf (f, \" finalized\");\n   if (node->local.disregard_inline_limits)"}]}