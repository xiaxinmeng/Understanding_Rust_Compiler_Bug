{"sha": "e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThhNWE2ZjZlMmU0ZTA2YjhlOGQzNTc3MTIyNzdmYjU0ZWQ3MWIwNw==", "commit": {"author": {"name": "Igor Tsimbalist", "email": "igor.v.tsimbalist@intel.com", "date": "2018-02-02T10:06:39Z"}, "committer": {"name": "Igor Tsimbalist", "email": "itsimbal@gcc.gnu.org", "date": "2018-02-02T10:06:39Z"}, "message": "PR84066 Wrong shadow stack register size is saved for x32\n\nx32 is a 64-bit process with 32-bit software pointer and kernel may\nplace x32 shadow stack above 4GB.  We need to save and restore 64-bit\nshadow stack register for x32. builtin jmp buf size is 5 pointers.  We\nhave space to save 64-bit shadow stack pointers: 32-bit SP, 32-bit FP,\n32-bit IP, 64-bit SSP for x32.\n\n\tPR target/84066\n\t* gcc/config/i386/i386.md: Replace Pmode with word_mode in\n\tbuiltin_setjmp_setup and builtin_longjmp to support x32.\n\t* gcc/testsuite/gcc.target/i386/cet-sjlj-6a.c: New test.\n\t* gcc/testsuite/gcc.target/i386/cet-sjlj-6b.c: Likewise.\n\nFrom-SVN: r257326", "tree": {"sha": "4b9d182199d033a4586990c2ae1786953643e0a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b9d182199d033a4586990c2ae1786953643e0a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07/comments", "author": {"login": "itsimbal", "id": 29258612, "node_id": "MDQ6VXNlcjI5MjU4NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/29258612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itsimbal", "html_url": "https://github.com/itsimbal", "followers_url": "https://api.github.com/users/itsimbal/followers", "following_url": "https://api.github.com/users/itsimbal/following{/other_user}", "gists_url": "https://api.github.com/users/itsimbal/gists{/gist_id}", "starred_url": "https://api.github.com/users/itsimbal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itsimbal/subscriptions", "organizations_url": "https://api.github.com/users/itsimbal/orgs", "repos_url": "https://api.github.com/users/itsimbal/repos", "events_url": "https://api.github.com/users/itsimbal/events{/privacy}", "received_events_url": "https://api.github.com/users/itsimbal/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe23b12a23e357103a40fda08df33f3547f112e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe23b12a23e357103a40fda08df33f3547f112e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe23b12a23e357103a40fda08df33f3547f112e6"}], "stats": {"total": 98, "additions": 73, "deletions": 25}, "files": [{"sha": "d89236958c9ce7404ec2dbcd36abae3ba8438d6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07", "patch": "@@ -1,3 +1,9 @@\n+2018-02-02  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\tPR target/84066\n+\t* config/i386/i386.md: Replace Pmode with word_mode in\n+\tbuiltin_setjmp_setup and builtin_longjmp to support x32.\n+\n 2018-02-01  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/56010"}, {"sha": "a4832bf696f321e8ee5aad71fa946ca198d9d689", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07", "patch": "@@ -18385,13 +18385,14 @@\n     {\n       rtx mem, reg_ssp;\n \n-      mem = gen_rtx_MEM (Pmode, plus_constant (Pmode, operands[0],\n-\t\t\t\t\t       3 * GET_MODE_SIZE (Pmode)));\n-      reg_ssp = gen_reg_rtx (Pmode);\n+      mem = gen_rtx_MEM (word_mode,\n+\t\t\t plus_constant (Pmode, operands[0],\n+\t\t\t\t\t3 * GET_MODE_SIZE (ptr_mode)));\n+      reg_ssp = gen_reg_rtx (word_mode);\n       emit_insn (gen_rtx_SET (reg_ssp, const0_rtx));\n-      emit_insn ((Pmode == SImode)\n-\t\t  ? gen_rdsspsi (reg_ssp, reg_ssp)\n-\t\t  : gen_rdsspdi (reg_ssp, reg_ssp));\n+      emit_insn ((word_mode == SImode)\n+\t\t ? gen_rdsspsi (reg_ssp, reg_ssp)\n+\t\t : gen_rdsspdi (reg_ssp, reg_ssp));\n       emit_move_insn (mem, reg_ssp);\n     }\n   DONE;\n@@ -18433,18 +18434,18 @@\n       /* Get the current shadow stack pointer.  The code below will check if\n \t SHSTK feature is enabled.  If it is not enabled the RDSSP instruction\n \t is a NOP.  */\n-      reg_ssp = gen_reg_rtx (Pmode);\n+      reg_ssp = gen_reg_rtx (word_mode);\n       emit_insn (gen_rtx_SET (reg_ssp, const0_rtx));\n-      emit_insn ((Pmode == SImode)\n+      emit_insn ((word_mode == SImode)\n \t\t ? gen_rdsspsi (reg_ssp, reg_ssp)\n \t\t : gen_rdsspdi (reg_ssp, reg_ssp));\n-      mem_buf = gen_rtx_MEM (Pmode, plus_constant (Pmode, operands[0],\n-\t\t\t\t\t\t   3 * GET_MODE_SIZE (Pmode)));\n+      mem_buf = gen_rtx_MEM (word_mode,\n+\t\t\t     plus_constant (Pmode, operands[0],\n+\t\t\t\t\t    3 * GET_MODE_SIZE (ptr_mode)));\n \n       /* Compare through substraction the saved and the current ssp to decide\n \t if ssp has to be adjusted.  */\n-      reg_adj = gen_reg_rtx (Pmode);\n-      tmp = gen_rtx_SET (reg_adj, gen_rtx_MINUS (Pmode, reg_ssp, mem_buf));\n+      tmp = gen_rtx_SET (reg_ssp, gen_rtx_MINUS (word_mode, reg_ssp, mem_buf));\n       clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n       tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, clob));\n       emit_insn (tmp);\n@@ -18460,9 +18461,11 @@\n       JUMP_LABEL (jump) = noadj_label;\n \n       /* Compute the numebr of frames to adjust.  */\n+      reg_adj = gen_lowpart (ptr_mode, reg_ssp);\n       tmp = gen_rtx_SET (reg_adj,\n-\t\t\t gen_rtx_LSHIFTRT (Pmode, negate_rtx (Pmode, reg_adj),\n-\t\t\t\t\t   GEN_INT ((Pmode == SImode)\n+\t\t\t gen_rtx_LSHIFTRT (ptr_mode,\n+\t\t\t\t\t   negate_rtx (ptr_mode, reg_adj),\n+\t\t\t\t\t   GEN_INT ((word_mode == SImode)\n \t\t\t\t\t\t    ? 2\n \t\t\t\t\t\t    : 3)));\n       clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n@@ -18487,10 +18490,10 @@\n       emit_label (loop_label);\n       LABEL_NUSES (loop_label) = 1;\n \n-      emit_insn ((Pmode == SImode)\n-\t\t ? gen_incsspsi (reg_adj)\n-\t\t : gen_incsspdi (reg_adj));\n-      tmp = gen_rtx_SET (reg_adj, gen_rtx_MINUS (Pmode,\n+      emit_insn ((word_mode == SImode)\n+\t\t ? gen_incsspsi (reg_ssp)\n+\t\t : gen_incsspdi (reg_ssp));\n+      tmp = gen_rtx_SET (reg_adj, gen_rtx_MINUS (ptr_mode,\n \t\t\t\t\t\t reg_adj,\n \t\t\t\t\t\t GEN_INT (255)));\n       clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n@@ -18511,25 +18514,27 @@\n \n       emit_label (inc_label);\n       LABEL_NUSES (inc_label) = 1;\n-      emit_insn ((Pmode == SImode)\n-\t\t ? gen_incsspsi (reg_adj)\n-\t\t : gen_incsspdi (reg_adj));\n+      emit_insn ((word_mode == SImode)\n+\t\t ? gen_incsspsi (reg_ssp)\n+\t\t : gen_incsspdi (reg_ssp));\n \n       emit_label (noadj_label);\n       LABEL_NUSES (noadj_label) = 1;\n     }\n \n   /* This code is the same as in expand_buildin_longjmp.  */\n-  fp = gen_rtx_MEM (Pmode, operands[0]);\n-  lab = gen_rtx_MEM (Pmode, plus_constant (Pmode, operands[0],\n-\t\t\t\t\t   GET_MODE_SIZE (Pmode)));\n+  fp = gen_rtx_MEM (ptr_mode, operands[0]);\n+  lab = gen_rtx_MEM (ptr_mode, plus_constant (Pmode, operands[0],\n+\t\t\t\t\t      GET_MODE_SIZE (ptr_mode)));\n   stack = gen_rtx_MEM (sa_mode, plus_constant (Pmode, operands[0],\n-\t\t\t\t\t       2 * GET_MODE_SIZE (Pmode)));\n+\t\t\t\t\t       2 * GET_MODE_SIZE (ptr_mode)));\n   lab = copy_to_reg (lab);\n \n   emit_clobber (gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode)));\n   emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n+  if (GET_MODE (fp) != Pmode)\n+    fp = convert_to_mode (Pmode, fp, 1);\n   emit_move_insn (hard_frame_pointer_rtx, fp);\n   emit_stack_restore (SAVE_NONLOCAL, stack);\n "}, {"sha": "15c3e06ff630d4da012eb3e83efa1811496e675b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07", "patch": "@@ -1,3 +1,9 @@\n+2018-02-02  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\tPR target/84066\n+\t* gcc.target/i386/cet-sjlj-6a.c: New test.\n+\t* gcc.target/i386/cet-sjlj-6b.c: Likewise.\n+\n 2018-02-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/84125"}, {"sha": "8410ff99b47ec56b04398e2a7823d9ac620b6bca", "filename": "gcc/testsuite/gcc.target/i386/cet-sjlj-6a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-6a.c?ref=e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-O -maddress-mode=short -fcf-protection -mcet -mx32\" } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 2 } } */\n+/* { dg-final { scan-assembler-times \"movq\\t.*buf\\\\+12\" 1 } } */\n+/* { dg-final { scan-assembler-times \"subq\\tbuf\\\\+12\" 1 } } */\n+/* { dg-final { scan-assembler-times \"shrl\\t\\\\\\$3,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rdsspq\" 2 } } */\n+/* { dg-final { scan-assembler-times \"incsspq\" 2 } } */\n+\n+void *buf[5];\n+\n+void raise0(void)\n+{\n+  __builtin_longjmp (buf, 1);\n+}\n+\n+void execute(int cmd)\n+{\n+  __builtin_setjmp (buf);\n+}"}, {"sha": "ce111631ac12ae0b03a1db0185d6bca5d10a4e87", "filename": "gcc/testsuite/gcc.target/i386/cet-sjlj-6b.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-6b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-6b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-6b.c?ref=e8a5a6f6e2e4e06b8e8d357712277fb54ed71b07", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O -maddress-mode=long -fcf-protection -mcet -mx32\" } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 2 } } */\n+/* { dg-final { scan-assembler-times \"movq\\t.*buf\\\\+12\" 1 } } */\n+/* { dg-final { scan-assembler-times \"subq\\tbuf\\\\+12\" 1 } } */\n+/* { dg-final { scan-assembler-times \"shrl\\t\\\\\\$3,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rdsspq\" 2 } } */\n+/* { dg-final { scan-assembler-times \"incsspq\" 2 } } */\n+\n+#include \"cet-sjlj-6a.c\""}]}