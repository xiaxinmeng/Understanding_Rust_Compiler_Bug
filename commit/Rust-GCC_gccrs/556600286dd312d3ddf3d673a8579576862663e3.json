{"sha": "556600286dd312d3ddf3d673a8579576862663e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU2NjAwMjg2ZGQzMTJkM2RkZjNkNjczYTg1Nzk1NzY4NjI2NjNlMw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-08-25T11:33:44Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-08-25T11:33:44Z"}, "message": "sra: Bail out when encountering accesses with negative offsets (PR 96730)\n\nI must admit I was quite surprised to see that SRA does not disqualify\nan aggregate from any transformations when it encounters an offset for\nwhich get_ref_base_and_extent returns a negative offset.  It may not\nmatter too much because I sure hope such programs always have\nundefined behavior (SRA candidates are local variables on stack) but\nit is probably better not to perform weird transformations on them as\nbuild ref model with the new build_reconstructed_reference function\ncurrently happily do for negative offsets (they just copy the existing\nexpression which is then used as the expression of a \"propagated\"\naccess) and of course the compiler must not ICE (as it currently does\nbecause the SRA forest verifier does not like the expression).\n\ngcc/ChangeLog:\n\n2020-08-24  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/96730\n\t* tree-sra.c (create_access): Disqualify any aggregate with negative\n\toffset access.\n\t(build_ref_for_model): Add assert that offset is non-negative.\n\ngcc/testsuite/ChangeLog:\n\n2020-08-24  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/96730\n\t* gcc.dg/tree-ssa/pr96730.c: New test.", "tree": {"sha": "0b1a8471ebf003437d8291a4266af96ad3f357b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b1a8471ebf003437d8291a4266af96ad3f357b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/556600286dd312d3ddf3d673a8579576862663e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556600286dd312d3ddf3d673a8579576862663e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556600286dd312d3ddf3d673a8579576862663e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556600286dd312d3ddf3d673a8579576862663e3/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26ea069ec02f15593ff35cf1d5b6056c1c17e4f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ea069ec02f15593ff35cf1d5b6056c1c17e4f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ea069ec02f15593ff35cf1d5b6056c1c17e4f4"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "39a06846529558d36791c86cee8ebf8e97cf9795", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96730.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556600286dd312d3ddf3d673a8579576862663e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96730.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556600286dd312d3ddf3d673a8579576862663e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96730.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96730.c?ref=556600286dd312d3ddf3d673a8579576862663e3", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+struct a {\n+  int b;\n+  int c;\n+} d() {\n+  struct a e[9];\n+  int f = 3362953455;\n+  e[f] = e[6];\n+  e[6].c = 1;\n+}\n+int main() {}"}, {"sha": "754f41302fc5f8c570d178e866ada59bb2331859", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556600286dd312d3ddf3d673a8579576862663e3/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556600286dd312d3ddf3d673a8579576862663e3/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=556600286dd312d3ddf3d673a8579576862663e3", "patch": "@@ -931,6 +931,11 @@ create_access (tree expr, gimple *stmt, bool write)\n     }\n   if (size == 0)\n     return NULL;\n+  if (offset < 0)\n+    {\n+      disqualify_candidate (base, \"Encountered a negative offset access.\");\n+      return NULL;\n+    }\n   if (size < 0)\n     {\n       disqualify_candidate (base, \"Encountered an unconstrained access.\");\n@@ -1667,6 +1672,7 @@ build_ref_for_model (location_t loc, tree base, HOST_WIDE_INT offset,\n \t\t     struct access *model, gimple_stmt_iterator *gsi,\n \t\t     bool insert_after)\n {\n+  gcc_assert (offset >= 0);\n   if (TREE_CODE (model->expr) == COMPONENT_REF\n       && DECL_BIT_FIELD (TREE_OPERAND (model->expr, 1)))\n     {"}]}