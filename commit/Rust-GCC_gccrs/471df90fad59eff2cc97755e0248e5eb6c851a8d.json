{"sha": "471df90fad59eff2cc97755e0248e5eb6c851a8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcxZGY5MGZhZDU5ZWZmMmNjOTc3NTVlMDI0OGU1ZWI2Yzg1MWE4ZA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2012-04-25T02:12:12Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2012-04-25T02:12:12Z"}, "message": "rs6000.c (rs6000_frame_related): Don't emit a REG_FRAME_RELATED_EXPR note when...\n\n\t* config/rs6000/rs6000.c (rs6000_frame_related): Don't emit a\n\tREG_FRAME_RELATED_EXPR note when the instruction exactly matches\n\tthe replacement.\n\t(emit_frame_save): Delete frame_ptr param.  Rename total_size to\n\tframe_reg_to_sp.\n\t(rs6000_emit_prologue): Add sp_off.  Update rs6000_frame_related\n\tand emit_frame_save calls.  Cope with possibly missing note.\n\nFrom-SVN: r186796", "tree": {"sha": "0c6a187965b9fc1b73ecfaec9380c8cd4c587199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c6a187965b9fc1b73ecfaec9380c8cd4c587199"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/471df90fad59eff2cc97755e0248e5eb6c851a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471df90fad59eff2cc97755e0248e5eb6c851a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/471df90fad59eff2cc97755e0248e5eb6c851a8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471df90fad59eff2cc97755e0248e5eb6c851a8d/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad491329d9f70bf2c4dfcfc998493e38a4c76a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad491329d9f70bf2c4dfcfc998493e38a4c76a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad491329d9f70bf2c4dfcfc998493e38a4c76a2f"}], "stats": {"total": 97, "additions": 70, "deletions": 27}, "files": [{"sha": "21d4f199652fb535d44d89e5722c87f1632fd366", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471df90fad59eff2cc97755e0248e5eb6c851a8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471df90fad59eff2cc97755e0248e5eb6c851a8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=471df90fad59eff2cc97755e0248e5eb6c851a8d", "patch": "@@ -1,3 +1,13 @@\n+2012-04-25  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_frame_related): Don't emit a\n+\tREG_FRAME_RELATED_EXPR note when the instruction exactly matches\n+\tthe replacement.\n+\t(emit_frame_save): Delete frame_ptr param.  Rename total_size to\n+\tframe_reg_to_sp.\n+\t(rs6000_emit_prologue): Add sp_off.  Update rs6000_frame_related\n+\tand emit_frame_save calls.  Cope with possibly missing note.\n+\n 2012-04-24  Sriraman Tallam  <tmsriram@google.com>\n \n \t* config/i386/i386.c (build_processor_model_struct): New function."}, {"sha": "218ab897a75c85e0dc6ec7bcb1999b5c78357fdb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 60, "deletions": 27, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471df90fad59eff2cc97755e0248e5eb6c851a8d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471df90fad59eff2cc97755e0248e5eb6c851a8d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=471df90fad59eff2cc97755e0248e5eb6c851a8d", "patch": "@@ -18752,14 +18752,36 @@ output_probe_stack_range (rtx reg1, rtx reg2)\n    with (plus:P (reg 1) VAL), and with REG2 replaced with RREG if REG2\n    is not NULL.  It would be nice if dwarf2out_frame_debug_expr could\n    deduce these equivalences by itself so it wasn't necessary to hold\n-   its hand so much.  */\n+   its hand so much.  Don't be tempted to always supply d2_f_d_e with\n+   the actual cfa register, ie. r31 when we are using a hard frame\n+   pointer.  That fails when saving regs off r1, and sched moves the\n+   r31 setup past the reg saves.  */\n \n static rtx\n rs6000_frame_related (rtx insn, rtx reg, HOST_WIDE_INT val,\n \t\t      rtx reg2, rtx rreg)\n {\n   rtx real, temp;\n \n+  if (REGNO (reg) == STACK_POINTER_REGNUM && reg2 == NULL_RTX)\n+    {\n+      /* No need for any replacement.  Just set RTX_FRAME_RELATED_P.  */\n+      int i;\n+\n+      gcc_checking_assert (val == 0);\n+      real = PATTERN (insn);\n+      if (GET_CODE (real) == PARALLEL)\n+\tfor (i = 0; i < XVECLEN (real, 0); i++)\n+\t  if (GET_CODE (XVECEXP (real, 0, i)) == SET)\n+\t    {\n+\t      rtx set = XVECEXP (real, 0, i);\n+\n+\t      RTX_FRAME_RELATED_P (set) = 1;\n+\t    }\n+      RTX_FRAME_RELATED_P (insn) = 1;\n+      return insn;\n+    }\n+\n   /* copy_rtx will not make unique copies of registers, so we need to\n      ensure we don't have unwanted sharing here.  */\n   if (reg == reg2)\n@@ -18773,10 +18795,13 @@ rs6000_frame_related (rtx insn, rtx reg, HOST_WIDE_INT val,\n   if (reg2 != NULL_RTX)\n     real = replace_rtx (real, reg2, rreg);\n \n-  real = replace_rtx (real, reg,\n-\t\t      gen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode,\n-\t\t\t\t\t\t\tSTACK_POINTER_REGNUM),\n-\t\t\t\t    GEN_INT (val)));\n+  if (REGNO (reg) == STACK_POINTER_REGNUM)\n+    gcc_checking_assert (val == 0);\n+  else\n+    real = replace_rtx (real, reg,\n+\t\t\tgen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode,\n+\t\t\t\t\t\t\t  STACK_POINTER_REGNUM),\n+\t\t\t\t      GEN_INT (val)));\n \n   /* We expect that 'real' is either a SET or a PARALLEL containing\n      SETs (and possibly other stuff).  In a PARALLEL, all the SETs\n@@ -18894,8 +18919,8 @@ generate_set_vrsave (rtx reg, rs6000_stack_t *info, int epiloguep)\n    Save REGNO into [FRAME_REG + OFFSET] in mode MODE.  */\n \n static rtx\n-emit_frame_save (rtx frame_reg, rtx frame_ptr, enum machine_mode mode,\n-\t\t unsigned int regno, int offset, HOST_WIDE_INT total_size)\n+emit_frame_save (rtx frame_reg, enum machine_mode mode,\n+\t\t unsigned int regno, int offset, HOST_WIDE_INT frame_reg_to_sp)\n {\n   rtx reg, offset_rtx, insn, mem, addr, int_rtx;\n   rtx replacea, replaceb;\n@@ -18931,7 +18956,8 @@ emit_frame_save (rtx frame_reg, rtx frame_ptr, enum machine_mode mode,\n \n   insn = emit_move_insn (mem, reg);\n \n-  return rs6000_frame_related (insn, frame_ptr, total_size, replacea, replaceb);\n+  return rs6000_frame_related (insn, frame_reg, frame_reg_to_sp,\n+\t\t\t       replacea, replaceb);\n }\n \n /* Emit an offset memory reference suitable for a frame store, while\n@@ -19296,7 +19322,9 @@ rs6000_emit_prologue (void)\n   int using_static_chain_p = (cfun->static_chain_decl != NULL_TREE\n \t\t\t      && df_regs_ever_live_p (STATIC_CHAIN_REGNUM)\n \t\t\t      && call_used_regs[STATIC_CHAIN_REGNUM]);\n+  /* Offset to top of frame for frame_reg and sp respectively.  */\n   HOST_WIDE_INT frame_off = 0;\n+  HOST_WIDE_INT sp_off = 0;\n \n   if (flag_stack_usage_info)\n     current_function_static_stack_size = info->total_size;\n@@ -19437,9 +19465,9 @@ rs6000_emit_prologue (void)\n       }\n \n       insn = emit_insn (gen_rtx_PARALLEL (VOIDmode, p));\n-      rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+      rs6000_frame_related (insn, frame_reg_rtx, sp_off - frame_off,\n \t\t\t    treg, GEN_INT (-info->total_size));\n-      frame_off = info->total_size;\n+      sp_off = frame_off = info->total_size;\n     }\n \n   strategy = info->savres_strategy;\n@@ -19484,6 +19512,7 @@ rs6000_emit_prologue (void)\n \t  frame_off = info->total_size;\n \t}\n       rs6000_emit_allocate_stack (info->total_size, copy_reg);\n+      sp_off = info->total_size;\n       if (frame_reg_rtx != sp_reg_rtx)\n \trs6000_emit_stack_tie (frame_reg_rtx, false);\n     }\n@@ -19508,7 +19537,7 @@ rs6000_emit_prologue (void)\n \t     __builtin_return_address.  */\n \n \t  insn = emit_move_insn (mem, reg);\n-\t  rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+\t  rs6000_frame_related (insn, frame_reg_rtx, sp_off - frame_off,\n \t\t\t\tNULL_RTX, NULL_RTX);\n \t}\n     }\n@@ -19544,12 +19573,12 @@ rs6000_emit_prologue (void)\n       for (i = 0; i < 64 - info->first_fp_reg_save; i++)\n \tif (df_regs_ever_live_p (info->first_fp_reg_save + i)\n \t    && ! call_used_regs[info->first_fp_reg_save + i])\n-\t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx,\n+\t  emit_frame_save (frame_reg_rtx,\n \t\t\t   (TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\n \t\t\t    ? DFmode : SFmode),\n \t\t\t   info->first_fp_reg_save + i,\n \t\t\t   info->fp_save_offset + frame_off + 8 * i,\n-\t\t\t   info->total_size);\n+\t\t\t   sp_off - frame_off);\n     }\n   else if (!WORLD_SAVE_P (info) && info->first_fp_reg_save != 64)\n     {\n@@ -19560,7 +19589,7 @@ rs6000_emit_prologue (void)\n \t\t\t\t     /*lr=*/((strategy\n \t\t\t\t\t      & SAVE_NOINLINE_FPRS_SAVES_LR)\n \t\t\t\t\t     != 0));\n-      rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+      rs6000_frame_related (insn, frame_reg_rtx, sp_off - frame_off,\n \t\t\t    NULL_RTX, NULL_RTX);\n     }\n \n@@ -19588,7 +19617,7 @@ rs6000_emit_prologue (void)\n       if (spe_regs_addressable)\n \t{\n \t  spe_save_area_ptr = frame_reg_rtx;\n-\t  save_ptr_to_sp = info->total_size - frame_off;\n+\t  save_ptr_to_sp = sp_off - frame_off;\n \t  spe_offset = info->spe_gp_save_offset + frame_off;\n \t}\n       else\n@@ -19603,7 +19632,7 @@ rs6000_emit_prologue (void)\n \t\t\t      - (FIRST_SAVRES_REGISTER + 1));\n \t  offset = info->spe_gp_save_offset + frame_off - ool_adjust;\n \t  spe_save_area_ptr = gen_rtx_REG (Pmode, 11);\n-\t  save_ptr_to_sp = info->total_size - frame_off + offset;\n+\t  save_ptr_to_sp = sp_off - frame_off + offset;\n \t  spe_offset = 0;\n \n \t  if (using_static_chain_p)\n@@ -19696,7 +19725,7 @@ rs6000_emit_prologue (void)\n \t\t\t\t     /*lr=*/((strategy\n \t\t\t\t\t      & SAVE_NOINLINE_GPRS_SAVES_LR)\n \t\t\t\t\t     != 0));\n-      rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+      rs6000_frame_related (insn, frame_reg_rtx, sp_off - frame_off,\n \t\t\t    NULL_RTX, NULL_RTX);\n     }\n   else if (!WORLD_SAVE_P (info) && using_store_multiple)\n@@ -19717,7 +19746,7 @@ rs6000_emit_prologue (void)\n \t  RTVEC_ELT (p, i) = gen_rtx_SET (VOIDmode, mem, reg);\n \t}\n       insn = emit_insn (gen_rtx_PARALLEL (VOIDmode, p));\n-      rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+      rs6000_frame_related (insn, frame_reg_rtx, sp_off - frame_off,\n \t\t\t    NULL_RTX, NULL_RTX);\n     }\n   else if (!WORLD_SAVE_P (info))\n@@ -19736,7 +19765,7 @@ rs6000_emit_prologue (void)\n \t    mem = gen_frame_mem (reg_mode, addr);\n \n \t    insn = emit_move_insn (mem, reg);\n-\t    rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+\t    rs6000_frame_related (insn, frame_reg_rtx, sp_off - frame_off,\n \t\t\t\t  NULL_RTX, NULL_RTX);\n \t  }\n     }\n@@ -19753,9 +19782,9 @@ rs6000_emit_prologue (void)\n \t  if (regno == INVALID_REGNUM)\n \t    break;\n \n-\t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx, reg_mode, regno,\n+\t  emit_frame_save (frame_reg_rtx, reg_mode, regno,\n \t\t\t   info->ehrd_offset + frame_off + reg_size * (int) i,\n-\t\t\t   info->total_size);\n+\t\t\t   sp_off - frame_off);\n \t}\n     }\n \n@@ -19798,9 +19827,9 @@ rs6000_emit_prologue (void)\n       JUMP_LABEL (jump) = toc_save_done;\n       LABEL_NUSES (toc_save_done) += 1;\n \n-      save_insn = emit_frame_save (frame_reg_rtx, frame_ptr_rtx, reg_mode,\n+      save_insn = emit_frame_save (frame_reg_rtx, reg_mode,\n \t\t\t\t   TOC_REGNUM, frame_off + 5 * reg_size,\n-\t\t\t\t   info->total_size);\n+\t\t\t\t   sp_off - frame_off);\n \n       emit_label (toc_save_done);\n \n@@ -19813,8 +19842,11 @@ rs6000_emit_prologue (void)\n \t code that minimizes the number of DW_CFA_advance opcodes better\n \t freedom in placing the annotations.  */\n       note = find_reg_note (save_insn, REG_FRAME_RELATED_EXPR, NULL);\n-      gcc_assert (note);\n-      remove_note (save_insn, note);\n+      if (note)\n+\tremove_note (save_insn, note);\n+      else\n+\tnote = alloc_reg_note (REG_FRAME_RELATED_EXPR,\n+\t\t\t       copy_rtx (PATTERN (save_insn)), NULL_RTX);\n       RTX_FRAME_RELATED_P (save_insn) = 0;\n \n       join_insn = emit_insn (gen_blockage ());\n@@ -19848,7 +19880,7 @@ rs6000_emit_prologue (void)\n \t}\n       insn = emit_move_insn (mem, cr_save_rtx);\n \n-      rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+      rs6000_frame_related (insn, frame_reg_rtx, sp_off - frame_off,\n \t\t\t    NULL_RTX, NULL_RTX);\n     }\n \n@@ -19870,6 +19902,7 @@ rs6000_emit_prologue (void)\n       else\n \tframe_off = info->total_size;\n       rs6000_emit_allocate_stack (info->total_size, copy_reg);\n+      sp_off = info->total_size;\n       if (frame_reg_rtx != sp_reg_rtx)\n \trs6000_emit_stack_tie (frame_reg_rtx, false);\n     }\n@@ -19910,7 +19943,7 @@ rs6000_emit_prologue (void)\n \n \t    insn = emit_move_insn (mem, savereg);\n \n-\t    rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+\t    rs6000_frame_related (insn, frame_reg_rtx, sp_off - frame_off,\n \t\t\t\t  areg, GEN_INT (offset));\n \t  }\n     }"}]}