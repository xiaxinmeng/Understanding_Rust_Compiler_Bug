{"sha": "e7ee39143913da667b7db7c8269e95e59443bab0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdlZTM5MTQzOTEzZGE2NjdiN2RiN2M4MjY5ZTk1ZTU5NDQzYmFiMA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-03-07T23:42:37Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-03-07T23:42:37Z"}, "message": "re PR debug/11983 (ICE in dwarf-2 on code using altivec)\n\n\tPR debug/11983\n\t* dwarf2out.c (enum dw_val_class): Rename dw_val_class_float to\n\tdw_val_class_vec.  Replace use throughout file.\n\t(dw_float_const): Delete.\n\t(dw_vec_const): New.\n\t(dw_val_struct_union): Rename val_float to val_vec.  Replace use\n\tthroughout file.\n\t(add_AT_vec): Rename from add_AT_float.  Add elt_size param.\n\t(same_dw_val_p): Adjust vec comparison.  Use memcmp.\n\t(size_of_die): Adjust dw_val_class_vec sizing.\n\t(output_die): Output dw_val_class_vec.\n\t(insert_int, extract_int, insert_float): New functions.\n\t(add_const_value_attribute): Use insert_float for CONST_DOUBLE.\n\tHandle CONST_VECTOR.\n\t(add_location_or_const_value_attribute): Handle CONST_VECTOR.\n\nFrom-SVN: r79077", "tree": {"sha": "90f4d67a218ec9ceebb041b50a083be92404f621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90f4d67a218ec9ceebb041b50a083be92404f621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7ee39143913da667b7db7c8269e95e59443bab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ee39143913da667b7db7c8269e95e59443bab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ee39143913da667b7db7c8269e95e59443bab0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ee39143913da667b7db7c8269e95e59443bab0/comments", "author": null, "committer": null, "parents": [{"sha": "5cc73f91212b5289099fba25d99471992ba658e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc73f91212b5289099fba25d99471992ba658e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc73f91212b5289099fba25d99471992ba658e3"}], "stats": {"total": 220, "additions": 181, "deletions": 39}, "files": [{"sha": "b0ff6f09f03322a8990c70b90aa9442763ae4e40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ee39143913da667b7db7c8269e95e59443bab0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ee39143913da667b7db7c8269e95e59443bab0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7ee39143913da667b7db7c8269e95e59443bab0", "patch": "@@ -1,3 +1,20 @@\n+2004-03-08  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR debug/11983\n+\t* dwarf2out.c (enum dw_val_class): Rename dw_val_class_float to\n+\tdw_val_class_vec.  Replace use throughout file.\n+\t(dw_float_const): Delete.\n+\t(dw_vec_const): New.\n+\t(dw_val_struct_union): Rename val_float to val_vec.  Replace use\n+\tthroughout file.\n+\t(add_AT_vec): Rename from add_AT_float.  Add elt_size param.\n+\t(same_dw_val_p): Adjust vec comparison.  Use memcmp.\n+\t(size_of_die): Adjust dw_val_class_vec sizing.\n+\t(output_die): Output dw_val_class_vec.\n+\t(insert_int, extract_int, insert_float): New functions.\n+\t(add_const_value_attribute): Use insert_float for CONST_DOUBLE.\n+\tHandle CONST_VECTOR.\n+\t(add_location_or_const_value_attribute): Handle CONST_VECTOR.\n \n 2004-03-07  Aldy Hernandez  <aldyh@redhat.com>\n "}, {"sha": "55947932ddb0fa2f916d3b9ad3a40c4096471990", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 164, "deletions": 39, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ee39143913da667b7db7c8269e95e59443bab0/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ee39143913da667b7db7c8269e95e59443bab0/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e7ee39143913da667b7db7c8269e95e59443bab0", "patch": "@@ -2344,7 +2344,7 @@ enum dw_val_class\n   dw_val_class_const,\n   dw_val_class_unsigned_const,\n   dw_val_class_long_long,\n-  dw_val_class_float,\n+  dw_val_class_vec,\n   dw_val_class_flag,\n   dw_val_class_die_ref,\n   dw_val_class_fde_ref,\n@@ -2363,14 +2363,15 @@ typedef struct dw_long_long_struct GTY(())\n }\n dw_long_long_const;\n \n-/* Describe a floating point constant value.  */\n+/* Describe a floating point constant value, or a vector constant value.  */\n \n-typedef struct dw_fp_struct GTY(())\n+typedef struct dw_vec_struct GTY(())\n {\n-  long * GTY((length (\"%h.length\"))) array;\n+  unsigned char * GTY((length (\"%h.length\"))) array;\n   unsigned length;\n+  unsigned elt_size;\n }\n-dw_float_const;\n+dw_vec_const;\n \n /* The dw_val_node describes an attribute's value, as it is\n    represented internally.  */\n@@ -2387,7 +2388,7 @@ typedef struct dw_val_struct GTY(())\n       HOST_WIDE_INT GTY ((default (\"\"))) val_int;\n       unsigned HOST_WIDE_INT GTY ((tag (\"dw_val_class_unsigned_const\"))) val_unsigned;\n       dw_long_long_const GTY ((tag (\"dw_val_class_long_long\"))) val_long_long;\n-      dw_float_const GTY ((tag (\"dw_val_class_float\"))) val_float;\n+      dw_vec_const GTY ((tag (\"dw_val_class_vec\"))) val_vec;\n       struct dw_val_die_union\n \t{\n \t  dw_die_ref die;\n@@ -3635,7 +3636,8 @@ static void add_AT_unsigned (dw_die_ref, enum dwarf_attribute, unsigned HOST_WID\n static inline unsigned HOST_WIDE_INT AT_unsigned (dw_attr_ref);\n static void add_AT_long_long (dw_die_ref, enum dwarf_attribute, unsigned long,\n \t\t\t      unsigned long);\n-static void add_AT_float (dw_die_ref, enum dwarf_attribute, unsigned, long *);\n+static inline void add_AT_vec (dw_die_ref, enum dwarf_attribute, unsigned int,\n+\t\t\t       unsigned int, unsigned char *);\n static hashval_t debug_str_do_hash (const void *);\n static int debug_str_eq (const void *, const void *);\n static void add_AT_string (dw_die_ref, enum dwarf_attribute, const char *);\n@@ -3770,6 +3772,9 @@ static void add_AT_location_description\t(dw_die_ref, enum dwarf_attribute,\n \t\t\t\t\t dw_loc_descr_ref);\n static void add_data_member_location_attribute (dw_die_ref, tree);\n static void add_const_value_attribute (dw_die_ref, rtx);\n+static void insert_int (HOST_WIDE_INT, unsigned, unsigned char *);\n+static HOST_WIDE_INT extract_int (const unsigned char *, unsigned);\n+static void insert_float (rtx, unsigned char *);\n static rtx rtl_for_decl_location (tree);\n static void add_location_or_const_value_attribute (dw_die_ref, tree,\n \t\t\t\t\t\t   enum dwarf_attribute);\n@@ -4605,16 +4610,17 @@ add_AT_long_long (dw_die_ref die, enum dwarf_attribute attr_kind,\n /* Add a floating point attribute value to a DIE and return it.  */\n \n static inline void\n-add_AT_float (dw_die_ref die, enum dwarf_attribute attr_kind,\n-\t      unsigned int length, long int *array)\n+add_AT_vec (dw_die_ref die, enum dwarf_attribute attr_kind,\n+\t    unsigned int length, unsigned int elt_size, unsigned char *array)\n {\n   dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n \n   attr->dw_attr_next = NULL;\n   attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_float;\n-  attr->dw_attr_val.v.val_float.length = length;\n-  attr->dw_attr_val.v.val_float.array = array;\n+  attr->dw_attr_val.val_class = dw_val_class_vec;\n+  attr->dw_attr_val.v.val_vec.length = length;\n+  attr->dw_attr_val.v.val_vec.elt_size = elt_size;\n+  attr->dw_attr_val.v.val_vec.array = array;\n   add_dwarf_attr (die, attr);\n }\n \n@@ -5407,8 +5413,8 @@ print_die (dw_die_ref die, FILE *outfile)\n \t\t   a->dw_attr_val.v.val_long_long.hi,\n \t\t   a->dw_attr_val.v.val_long_long.low);\n \t  break;\n-\tcase dw_val_class_float:\n-\t  fprintf (outfile, \"floating-point constant\");\n+\tcase dw_val_class_vec:\n+\t  fprintf (outfile, \"floating-point or vector constant\");\n \t  break;\n \tcase dw_val_class_flag:\n \t  fprintf (outfile, \"%u\", AT_flag (a));\n@@ -5608,8 +5614,8 @@ attr_checksum (dw_attr_ref at, struct md5_ctx *ctx, int *mark)\n     case dw_val_class_long_long:\n       CHECKSUM (at->dw_attr_val.v.val_long_long);\n       break;\n-    case dw_val_class_float:\n-      CHECKSUM (at->dw_attr_val.v.val_float);\n+    case dw_val_class_vec:\n+      CHECKSUM (at->dw_attr_val.v.val_vec);\n       break;\n     case dw_val_class_flag:\n       CHECKSUM (at->dw_attr_val.v.val_flag);\n@@ -5697,7 +5703,6 @@ same_dw_val_p (dw_val_node *v1, dw_val_node *v2, int *mark)\n {\n   dw_loc_descr_ref loc1, loc2;\n   rtx r1, r2;\n-  unsigned i;\n \n   if (v1->val_class != v2->val_class)\n     return 0;\n@@ -5711,12 +5716,13 @@ same_dw_val_p (dw_val_node *v1, dw_val_node *v2, int *mark)\n     case dw_val_class_long_long:\n       return v1->v.val_long_long.hi == v2->v.val_long_long.hi\n \t     && v1->v.val_long_long.low == v2->v.val_long_long.low;\n-    case dw_val_class_float:\n-      if (v1->v.val_float.length != v2->v.val_float.length)\n+    case dw_val_class_vec:\n+      if (v1->v.val_vec.length != v2->v.val_vec.length\n+\t  || v1->v.val_vec.elt_size != v2->v.val_vec.elt_size)\n+\treturn 0;\n+      if (memcmp (v1->v.val_vec.array, v2->v.val_vec.array,\n+\t\t  v1->v.val_vec.length * v1->v.val_vec.elt_size))\n \treturn 0;\n-      for (i = 0; i < v1->v.val_float.length; i++)\n-\tif (v1->v.val_float.array[i] != v2->v.val_float.array[i])\n-\t  return 0;\n       return 1;\n     case dw_val_class_flag:\n       return v1->v.val_flag == v2->v.val_flag;\n@@ -6310,8 +6316,9 @@ size_of_die (dw_die_ref die)\n \tcase dw_val_class_long_long:\n \t  size += 1 + 2*HOST_BITS_PER_LONG/HOST_BITS_PER_CHAR; /* block */\n \t  break;\n-\tcase dw_val_class_float:\n-\t  size += 1 + a->dw_attr_val.v.val_float.length * 4; /* block */\n+\tcase dw_val_class_vec:\n+\t  size += 1 + (a->dw_attr_val.v.val_vec.length\n+\t\t       * a->dw_attr_val.v.val_vec.elt_size); /* block */\n \t  break;\n \tcase dw_val_class_flag:\n \t  size += 1;\n@@ -6505,7 +6512,7 @@ value_format (dw_attr_ref a)\n \t}\n     case dw_val_class_long_long:\n       return DW_FORM_block1;\n-    case dw_val_class_float:\n+    case dw_val_class_vec:\n       return DW_FORM_block1;\n     case dw_val_class_flag:\n       return DW_FORM_flag;\n@@ -6774,16 +6781,24 @@ output_die (dw_die_ref die)\n \t  }\n \t  break;\n \n-\tcase dw_val_class_float:\n+\tcase dw_val_class_vec:\n \t  {\n+\t    unsigned int elt_size = a->dw_attr_val.v.val_vec.elt_size;\n+\t    unsigned int len = a->dw_attr_val.v.val_vec.length;\n \t    unsigned int i;\n+\t    unsigned char *p;\n \n-\t    dw2_asm_output_data (1, a->dw_attr_val.v.val_float.length * 4,\n-\t\t\t\t \"%s\", name);\n-\n-\t    for (i = 0; i < a->dw_attr_val.v.val_float.length; i++)\n-\t      dw2_asm_output_data (4, a->dw_attr_val.v.val_float.array[i],\n-\t\t\t\t   \"fp constant word %u\", i);\n+\t    dw2_asm_output_data (1, len * elt_size, \"%s\", name);\n+\t    if (elt_size > sizeof (HOST_WIDE_INT))\n+\t      {\n+\t\telt_size /= 2;\n+\t\tlen *= 2;\n+\t      }\n+\t    for (i = 0, p = a->dw_attr_val.v.val_vec.array;\n+\t\t i < len;\n+\t\t i++, p += elt_size)\n+\t      dw2_asm_output_data (elt_size, extract_int (p, elt_size),\n+\t\t\t\t   \"fp or vector constant word %u\", i);\n \t    break;\n \t  }\n \n@@ -9313,6 +9328,56 @@ add_data_member_location_attribute (dw_die_ref die, tree decl)\n   add_AT_loc (die, DW_AT_data_member_location, loc_descr);\n }\n \n+/* Writes integer values to dw_vec_const array.  */\n+\n+static void\n+insert_int (HOST_WIDE_INT val, unsigned int size, unsigned char *dest)\n+{\n+  while (size != 0)\n+    {\n+      *dest++ = val & 0xff;\n+      val >>= 8;\n+      --size;\n+    }\n+}\n+\n+/* Reads integers from dw_vec_const array.  Inverse of insert_int.  */\n+\n+static HOST_WIDE_INT\n+extract_int (const unsigned char *src, unsigned int size)\n+{\n+  HOST_WIDE_INT val = 0;\n+\n+  src += size;\n+  while (size != 0)\n+    {\n+      val <<= 8;\n+      val |= *--src & 0xff;\n+      --size;\n+    }\n+  return val;\n+}\n+\n+/* Writes floating point values to dw_vec_const array.  */\n+\n+static void\n+insert_float (rtx rtl, unsigned char *array)\n+{\n+  REAL_VALUE_TYPE rv;\n+  long val[4];\n+  int i;\n+\n+  REAL_VALUE_FROM_CONST_DOUBLE (rv, rtl);\n+  real_to_target (val, &rv, GET_MODE (rtl));\n+\n+  /* real_to_target puts 32-bit pieces in each long.  Pack them.  */\n+  for (i = 0; i < GET_MODE_SIZE (GET_MODE (rtl)) / 4; i++)\n+    {\n+      insert_int (val[i], 4, array);\n+      array += 4;\n+    }\n+}\n+\n /* Attach a DW_AT_const_value attribute for a variable or a parameter which\n    does not have a \"location\" either in memory or in a register.  These\n    things can arise in GNU C when a constant is passed as an actual parameter\n@@ -9345,14 +9410,11 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n \n \tif (GET_MODE_CLASS (mode) == MODE_FLOAT)\n \t  {\n-\t    unsigned length = GET_MODE_SIZE (mode) / 4;\n-\t    long *array = ggc_alloc (sizeof (long) * length);\n-\t    REAL_VALUE_TYPE rv;\n-\n-\t    REAL_VALUE_FROM_CONST_DOUBLE (rv, rtl);\n-\t    real_to_target (array, &rv, mode);\n+\t    unsigned int length = GET_MODE_SIZE (mode);\n+\t    unsigned char *array = ggc_alloc (length);\n \n-\t    add_AT_float (die, DW_AT_const_value, length, array);\n+\t    insert_float (rtl, array);\n+\t    add_AT_vec (die, DW_AT_const_value, length / 4, 4, array);\n \t  }\n \telse\n \t  {\n@@ -9366,6 +9428,68 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n       }\n       break;\n \n+    case CONST_VECTOR:\n+      {\n+\tenum machine_mode mode = GET_MODE (rtl);\n+\tunsigned int elt_size = GET_MODE_UNIT_SIZE (mode);\n+\tunsigned int length = CONST_VECTOR_NUNITS (rtl);\n+\tunsigned char *array = ggc_alloc (length * elt_size);\n+\tunsigned int i;\n+\tunsigned char *p;\n+\n+\tif (GET_MODE_CLASS (mode) == MODE_VECTOR_INT)\n+\t  {\n+\t    for (i = 0, p = array; i < length; i++, p += elt_size)\n+\t      {\n+\t\trtx elt = CONST_VECTOR_ELT (rtl, i);\n+\t\tHOST_WIDE_INT lo, hi;\n+\t\tif (GET_CODE (elt) == CONST_INT)\n+\t\t  {\n+\t\t    lo = INTVAL (elt);\n+\t\t    hi = -(lo < 0);\n+\t\t  }\n+\t\telse if (GET_CODE (elt) == CONST_DOUBLE)\n+\t\t  {\n+\t\t    lo = CONST_DOUBLE_LOW (elt);\n+\t\t    hi = CONST_DOUBLE_HIGH (elt);\n+\t\t  }\n+\t\telse\n+\t\t  abort ();\n+\n+\t\tif (elt_size <= sizeof (HOST_WIDE_INT))\n+\t\t  insert_int (lo, elt_size, p);\n+\t\telse if (elt_size == 2 * sizeof (HOST_WIDE_INT))\n+\t\t  {\n+\t\t    unsigned char *p0 = p;\n+\t\t    unsigned char *p1 = p + sizeof (HOST_WIDE_INT);\n+\n+\t\t    if (WORDS_BIG_ENDIAN)\n+\t\t      {\n+\t\t\tp0 = p1;\n+\t\t\tp1 = p;\n+\t\t      }\n+\t\t    insert_int (lo, sizeof (HOST_WIDE_INT), p0);\n+\t\t    insert_int (hi, sizeof (HOST_WIDE_INT), p1);\n+\t\t  }\n+\t\telse\n+\t\t  abort ();\n+\t      }\n+\t  }\n+\telse if (GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n+\t  {\n+\t    for (i = 0, p = array; i < length; i++, p += elt_size)\n+\t      {\n+\t\trtx elt = CONST_VECTOR_ELT (rtl, i);\n+\t\tinsert_float (elt, p);\n+\t      }\n+\t  }\n+\telse\n+\t  abort ();\n+\n+\tadd_AT_vec (die, DW_AT_const_value, length, elt_size, array);\n+      }\n+      break;\n+\n     case CONST_STRING:\n       add_AT_string (die, DW_AT_const_value, XSTR (rtl, 0));\n       break;\n@@ -9739,6 +9863,7 @@ add_location_or_const_value_attribute (dw_die_ref die, tree decl,\n \n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_VECTOR:\n     case CONST_STRING:\n     case SYMBOL_REF:\n     case LABEL_REF:"}]}