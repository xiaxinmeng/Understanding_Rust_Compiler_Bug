{"sha": "c942177e59f79fe313b8a8c6e8c5ccda9b76f998", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk0MjE3N2U1OWY3OWZlMzEzYjhhOGM2ZThjNWNjZGE5Yjc2Zjk5OA==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-09-30T19:23:11Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-09-30T19:23:11Z"}, "message": "(asm_output_function_prefix, function_prologue,ix86_expand_prologue): Make the routine that sets the GOT (when pic is enabled) a function, to assist debugging.\n\nFrom-SVN: r12878", "tree": {"sha": "7e85fabc70bb3bcf781803ab9813bc60dd4194c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e85fabc70bb3bcf781803ab9813bc60dd4194c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c942177e59f79fe313b8a8c6e8c5ccda9b76f998", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c942177e59f79fe313b8a8c6e8c5ccda9b76f998", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c942177e59f79fe313b8a8c6e8c5ccda9b76f998", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c942177e59f79fe313b8a8c6e8c5ccda9b76f998/comments", "author": null, "committer": null, "parents": [{"sha": "a78cb98668d4a97f089f740f403b45c7a6df956d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a78cb98668d4a97f089f740f403b45c7a6df956d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a78cb98668d4a97f089f740f403b45c7a6df956d"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "2b9eddb6abcc71ff8856f0b40c8dbfe2c07fcc2b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c942177e59f79fe313b8a8c6e8c5ccda9b76f998/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c942177e59f79fe313b8a8c6e8c5ccda9b76f998/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c942177e59f79fe313b8a8c6e8c5ccda9b76f998", "patch": "@@ -129,11 +129,11 @@ struct rtx_def *(*i386_compare_gen)(), *(*i386_compare_gen_eq)();\n enum processor_type ix86_cpu;\n \n /* which instruction set architecture to use.  */\n-int ix86_isa;\n+int ix86_arch;\n \n /* Strings to hold which cpu and instruction set architecture  to use.  */\n char *ix86_cpu_string;\t\t/* for -mcpu=<xxx> */\n-char *ix86_isa_string;\t\t/* for -misa=<xxx> */\n+char *ix86_arch_string;\t\t/* for -march=<xxx> */\n \n /* Register allocation order */\n char *i386_reg_alloc_order;\n@@ -178,8 +178,7 @@ override_options ()\n       int target_enable;\t/* Target flags to enable.  */\n       int target_disable;\t/* Target flags to disable.  */\n     } processor_target_table[]\n-      = {{PROCESSOR_COMMON_STRING, PROCESSOR_COMMON, &i486_cost, 0, 0},\n-\t   {PROCESSOR_I386_STRING, PROCESSOR_I386, &i386_cost, 0, 0},\n+      = {{PROCESSOR_I386_STRING, PROCESSOR_I386, &i386_cost, 0, 0},\n \t   {PROCESSOR_I486_STRING, PROCESSOR_I486, &i486_cost, 0, 0},\n \t   {PROCESSOR_I586_STRING, PROCESSOR_PENTIUM, &pentium_cost, 0, 0},\n \t   {PROCESSOR_PENTIUM_STRING, PROCESSOR_PENTIUM, &pentium_cost, 0, 0},\n@@ -218,31 +217,34 @@ override_options ()\n     }\n \n   /* Get the architectural level.  */\n-  if (ix86_isa_string == (char *)0)\n-      ix86_isa_string = PROCESSOR_DEFAULT_STRING;\n+  if (ix86_cpu_string == (char *)0 && ix86_arch_string == (char *)0)\n+    {\n+      ix86_arch_string = PROCESSOR_PENTIUM_STRING;\n+      ix86_cpu_string = PROCESSOR_DEFAULT_STRING;\n+    }\n \n   for (i = 0; i < ptt_size; i++)\n-    if (! strcmp (ix86_isa_string, processor_target_table[i].name))\n+    if (! strcmp (ix86_arch_string, processor_target_table[i].name))\n       {\n-\tix86_isa = processor_target_table[i].processor;\n+\tix86_arch = processor_target_table[i].processor;\n \tif (ix86_cpu_string == (char *)0)\n \t  ix86_cpu_string = processor_target_table[i].name;\n \tbreak;\n       }\n \n   if (i == ptt_size)\n     {\n-      error (\"bad value (%s) for -misa= switch\", ix86_isa_string);\n-      ix86_isa_string = PROCESSOR_DEFAULT_STRING;\n-      ix86_isa = PROCESSOR_DEFAULT;\n+      error (\"bad value (%s) for -march= switch\", ix86_arch_string);\n+      ix86_arch_string = PROCESSOR_DEFAULT_STRING;\n+      ix86_arch = PROCESSOR_DEFAULT;\n     }\n \n   for (j = 0; j < ptt_size; j++)\n     if (! strcmp (ix86_cpu_string, processor_target_table[j].name))\n       {\n \tix86_cpu = processor_target_table[j].processor;\n-\tif (i > j && (int)ix86_isa >= (int)PROCESSOR_PENTIUMPRO)\n-\t  error (\"-mcpu=%s does not support -march=%s\", ix86_cpu_string, ix86_isa_string);\n+\tif (i > j && (int)ix86_arch >= (int)PROCESSOR_PENTIUMPRO)\n+\t  error (\"-mcpu=%s does not support -march=%s\", ix86_cpu_string, ix86_arch_string);\n \n \ttarget_flags |= processor_target_table[j].target_enable;\n \ttarget_flags &= ~processor_target_table[j].target_disable;\n@@ -1700,6 +1702,8 @@ ix86_unary_operator_ok (code, mode, operands)\n \f\n \n static rtx pic_label_rtx;\n+static char pic_label_name [256];\n+static int pic_label_no = 0;\n \n /* This function generates code for -fpic that loads %ebx with\n    with the return address of the caller and then returns.  */\n@@ -1717,9 +1721,17 @@ asm_output_function_prefix (file, name)\n   /* deep branch prediction favors having a return for every call */\n   if (pic_reg_used && TARGET_DEEP_BRANCH_PREDICTION)\n     {\n+      tree prologue_node;\n+\n       if (pic_label_rtx == 0)\n+\t{\n       pic_label_rtx = (rtx) gen_label_rtx ();\n-      ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (pic_label_rtx));\n+\t  sprintf (pic_label_name, \"LPR%d\", pic_label_no++);\n+\t  LABEL_NAME (pic_label_rtx) = pic_label_name;\n+\t}\n+      prologue_node = make_node (FUNCTION_DECL);\n+      DECL_RESULT (prologue_node) = 0;\n+      ASM_DECLARE_FUNCTION_NAME (file, pic_label_name, prologue_node);\n       output_asm_insn (\"movl (%1),%0\", xops);\n       output_asm_insn (\"ret\", xops);\n     }\n@@ -1741,7 +1753,10 @@ function_prologue (file, size)\n \n   /* pic references don't explicitly mention pic_offset_table_rtx */\n   if (TARGET_SCHEDULE_PROLOGUE)\n-    return;\n+    {\n+      pic_label_rtx = 0;\n+      return;\n+    }\n   \n   xops[0] = stack_pointer_rtx;\n   xops[1] = frame_pointer_rtx;\n@@ -1787,12 +1802,11 @@ function_prologue (file, size)\n   if (pic_reg_used && TARGET_DEEP_BRANCH_PREDICTION)\n     {\n       xops[0] = pic_offset_table_rtx;\n-      if (pic_label_rtx == 0)\n-\tpic_label_rtx = (rtx) gen_label_rtx ();\n-      xops[1] = pic_label_rtx;\n+      xops[1] = gen_rtx (SYMBOL_REF, Pmode, LABEL_NAME (pic_label_rtx));\n \n       output_asm_insn (AS1 (call,%P1), xops);\n       output_asm_insn (\"addl $_GLOBAL_OFFSET_TABLE_,%0\", xops);\n+      pic_label_rtx = 0;\n     }\n   else if (pic_reg_used)\n     {\n@@ -1874,10 +1888,14 @@ ix86_expand_prologue ()\n     {\n       xops[0] = pic_offset_table_rtx;\n       if (pic_label_rtx == 0)\n+\t{\n \tpic_label_rtx = (rtx) gen_label_rtx ();\n-      xops[1] = pic_label_rtx;\n+\t  sprintf (pic_label_name, \"LPR%d\", pic_label_no++);\n+\t  LABEL_NAME (pic_label_rtx) = pic_label_name;\n+\t}\n+      xops[1] = gen_rtx (MEM, QImode, gen_rtx (SYMBOL_REF, Pmode, LABEL_NAME (pic_label_rtx)));\n \n-      emit_insn (gen_prologue_get_pc (xops[0], gen_rtx (CONST_INT, Pmode, CODE_LABEL_NUMBER(xops[1]))));\n+      emit_insn (gen_prologue_get_pc (xops[0], xops[1]));\n       emit_insn (gen_prologue_set_got (xops[0], \n \t\t gen_rtx (SYMBOL_REF, Pmode, \"$_GLOBAL_OFFSET_TABLE_\"), \n \t\t gen_rtx (CONST_INT, Pmode, CODE_LABEL_NUMBER(xops[1]))));"}]}