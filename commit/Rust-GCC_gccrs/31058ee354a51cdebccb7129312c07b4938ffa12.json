{"sha": "31058ee354a51cdebccb7129312c07b4938ffa12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEwNThlZTM1NGE1MWNkZWJjY2I3MTI5MzEyYzA3YjQ5MzhmZmExMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2004-02-25T04:51:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-02-25T04:51:39Z"}, "message": "cp-demangle.h (enum d_builtin_type_print): Add D_PRINT_UNSIGNED...\n\n\t* cp-demangle.h (enum d_builtin_type_print): Add D_PRINT_UNSIGNED,\n\tD_PRINT_UNSIGNED_LONG, D_PRINT_LONG_LONG,\n\tD_PRINT_UNSIGNED_LONG_LONG, D_PRINT_FLOAT.\n\t* cp-demangle.c (cplus_demangle_builtin_types): Change char and\n\tshort types to D_PRINT_DEFAULT.  Change other integer types to use\n\tnew D_PRINT_* values where appropriate.  Change float types to\n\tD_PRINT_FLOAT.\n\t(d_print_comp) [LITERAL, LITERAL_NEG]: Handle new D_PRINT_*\n\tvalues.\n\t* testsuite/demangle-expected: Adjust two test cases.\n\n\t* cp-demangle.c (d_print_function_type): Print a space before the\n\tparenthesis around the function type in more cases.\n\t* testsuite/demangle-expected: Adjust one test case.\n\nFrom-SVN: r78421", "tree": {"sha": "e07eb3be30fad6f21331b69d9f8e2e0b67bc3c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e07eb3be30fad6f21331b69d9f8e2e0b67bc3c4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31058ee354a51cdebccb7129312c07b4938ffa12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31058ee354a51cdebccb7129312c07b4938ffa12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31058ee354a51cdebccb7129312c07b4938ffa12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31058ee354a51cdebccb7129312c07b4938ffa12/comments", "author": null, "committer": null, "parents": [{"sha": "93f20626db495518ad09b8c8138db7df1ea971f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f20626db495518ad09b8c8138db7df1ea971f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f20626db495518ad09b8c8138db7df1ea971f8"}], "stats": {"total": 220, "additions": 136, "deletions": 84}, "files": [{"sha": "b9d6e73f89e2f7c7a33515d817ec060092dda685", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31058ee354a51cdebccb7129312c07b4938ffa12/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31058ee354a51cdebccb7129312c07b4938ffa12/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=31058ee354a51cdebccb7129312c07b4938ffa12", "patch": "@@ -1,5 +1,20 @@\n 2004-02-24  Ian Lance Taylor  <ian@wasabisystems.com>\n \n+\t* cp-demangle.h (enum d_builtin_type_print): Add D_PRINT_UNSIGNED,\n+\tD_PRINT_UNSIGNED_LONG, D_PRINT_LONG_LONG,\n+\tD_PRINT_UNSIGNED_LONG_LONG, D_PRINT_FLOAT.\n+\t* cp-demangle.c (cplus_demangle_builtin_types): Change char and\n+\tshort types to D_PRINT_DEFAULT.  Change other integer types to use\n+\tnew D_PRINT_* values where appropriate.  Change float types to\n+\tD_PRINT_FLOAT.\n+\t(d_print_comp) [LITERAL, LITERAL_NEG]: Handle new D_PRINT_*\n+\tvalues.\n+\t* testsuite/demangle-expected: Adjust two test cases.\n+\n+\t* cp-demangle.c (d_print_function_type): Print a space before the\n+\tparenthesis around the function type in more cases.\n+\t* testsuite/demangle-expected: Adjust one test case.\n+\n \t* cp-demangle.c (d_print_comp) [UNARY]: Don't emit extra\n \tparentheses around a cast.\n \t* testsuite/demangle-expected: Adjust two test cases to match new"}, {"sha": "fe4b36712d35da9798d59f9e8da8e8155c8f3793", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 106, "deletions": 79, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31058ee354a51cdebccb7129312c07b4938ffa12/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31058ee354a51cdebccb7129312c07b4938ffa12/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=31058ee354a51cdebccb7129312c07b4938ffa12", "patch": "@@ -1748,31 +1748,33 @@ CP_STATIC_IF_GLIBCPP_V3\n const struct demangle_builtin_type_info\n cplus_demangle_builtin_types[D_BUILTIN_TYPE_COUNT] =\n {\n-  /* a */ { NL (\"signed char\"),\tNL (\"signed char\"),\tD_PRINT_INT },\n+  /* a */ { NL (\"signed char\"),\tNL (\"signed char\"),\tD_PRINT_DEFAULT },\n   /* b */ { NL (\"bool\"),\tNL (\"boolean\"),\t\tD_PRINT_BOOL },\n-  /* c */ { NL (\"char\"),\tNL (\"byte\"),\t\tD_PRINT_INT },\n-  /* d */ { NL (\"double\"),\tNL (\"double\"),\t\tD_PRINT_DEFAULT },\n-  /* e */ { NL (\"long double\"),\tNL (\"long double\"),\tD_PRINT_DEFAULT },\n-  /* f */ { NL (\"float\"),\tNL (\"float\"),\t\tD_PRINT_DEFAULT },\n-  /* g */ { NL (\"__float128\"),\tNL (\"__float128\"),\tD_PRINT_DEFAULT },\n-  /* h */ { NL (\"unsigned char\"), NL (\"unsigned char\"),\tD_PRINT_INT },\n+  /* c */ { NL (\"char\"),\tNL (\"byte\"),\t\tD_PRINT_DEFAULT },\n+  /* d */ { NL (\"double\"),\tNL (\"double\"),\t\tD_PRINT_FLOAT },\n+  /* e */ { NL (\"long double\"),\tNL (\"long double\"),\tD_PRINT_FLOAT },\n+  /* f */ { NL (\"float\"),\tNL (\"float\"),\t\tD_PRINT_FLOAT },\n+  /* g */ { NL (\"__float128\"),\tNL (\"__float128\"),\tD_PRINT_FLOAT },\n+  /* h */ { NL (\"unsigned char\"), NL (\"unsigned char\"),\tD_PRINT_DEFAULT },\n   /* i */ { NL (\"int\"),\t\tNL (\"int\"),\t\tD_PRINT_INT },\n-  /* j */ { NL (\"unsigned int\"), NL (\"unsigned\"),\tD_PRINT_INT },\n+  /* j */ { NL (\"unsigned int\"), NL (\"unsigned\"),\tD_PRINT_UNSIGNED },\n   /* k */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n   /* l */ { NL (\"long\"),\tNL (\"long\"),\t\tD_PRINT_LONG },\n-  /* m */ { NL (\"unsigned long\"), NL (\"unsigned long\"),\tD_PRINT_LONG },\n+  /* m */ { NL (\"unsigned long\"), NL (\"unsigned long\"),\tD_PRINT_UNSIGNED_LONG },\n   /* n */ { NL (\"__int128\"),\tNL (\"__int128\"),\tD_PRINT_DEFAULT },\n-  /* o */ { NL (\"unsigned __int128\"), NL (\"unsigned __int128\"),\tD_PRINT_DEFAULT },\n+  /* o */ { NL (\"unsigned __int128\"), NL (\"unsigned __int128\"),\n+\t    D_PRINT_DEFAULT },\n   /* p */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n   /* q */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n   /* r */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n-  /* s */ { NL (\"short\"),\tNL (\"short\"),\t\tD_PRINT_INT },\n-  /* t */ { NL (\"unsigned short\"), NL (\"unsigned short\"), D_PRINT_INT },\n+  /* s */ { NL (\"short\"),\tNL (\"short\"),\t\tD_PRINT_DEFAULT },\n+  /* t */ { NL (\"unsigned short\"), NL (\"unsigned short\"), D_PRINT_DEFAULT },\n   /* u */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n   /* v */ { NL (\"void\"),\tNL (\"void\"),\t\tD_PRINT_VOID },\n-  /* w */ { NL (\"wchar_t\"),\tNL (\"char\"),\t\tD_PRINT_INT },\n-  /* x */ { NL (\"long long\"),\tNL (\"long\"),\t\tD_PRINT_DEFAULT },\n-  /* y */ { NL (\"unsigned long long\"), NL (\"unsigned long long\"), D_PRINT_DEFAULT },\n+  /* w */ { NL (\"wchar_t\"),\tNL (\"char\"),\t\tD_PRINT_DEFAULT },\n+  /* x */ { NL (\"long long\"),\tNL (\"long\"),\t\tD_PRINT_LONG_LONG },\n+  /* y */ { NL (\"unsigned long long\"), NL (\"unsigned long long\"),\n+\t    D_PRINT_UNSIGNED_LONG_LONG },\n   /* z */ { NL (\"...\"),\t\tNL (\"...\"),\t\tD_PRINT_DEFAULT },\n };\n \n@@ -3347,62 +3349,86 @@ d_print_comp (dpi, dc)\n \n     case DEMANGLE_COMPONENT_LITERAL:\n     case DEMANGLE_COMPONENT_LITERAL_NEG:\n-      /* For some builtin types, produce simpler output.  */\n-      if (d_left (dc)->type == DEMANGLE_COMPONENT_BUILTIN_TYPE)\n-\t{\n-\t  switch (d_left (dc)->u.s_builtin.type->print)\n-\t    {\n-\t    case D_PRINT_INT:\n-\t      if (d_right (dc)->type == DEMANGLE_COMPONENT_NAME)\n-\t\t{\n-\t\t  if (dc->type == DEMANGLE_COMPONENT_LITERAL_NEG)\n-\t\t    d_append_char (dpi, '-');\n-\t\t  d_print_comp (dpi, d_right (dc));\n-\t\t  return;\n-\t\t}\n-\t      break;\n+      {\n+\tenum d_builtin_type_print tp;\n \n-\t    case D_PRINT_LONG:\n-\t      if (d_right (dc)->type == DEMANGLE_COMPONENT_NAME)\n-\t\t{\n-\t\t  if (dc->type == DEMANGLE_COMPONENT_LITERAL_NEG)\n-\t\t    d_append_char (dpi, '-');\n-\t\t  d_print_comp (dpi, d_right (dc));\n-\t\t  d_append_char (dpi, 'l');\n-\t\t  return;\n-\t\t}\n-\t      break;\n+\t/* For some builtin types, produce simpler output.  */\n+\ttp = D_PRINT_DEFAULT;\n+\tif (d_left (dc)->type == DEMANGLE_COMPONENT_BUILTIN_TYPE)\n+\t  {\n+\t    tp = d_left (dc)->u.s_builtin.type->print;\n+\t    switch (tp)\n+\t      {\n+\t      case D_PRINT_INT:\n+\t      case D_PRINT_UNSIGNED:\n+\t      case D_PRINT_LONG:\n+\t      case D_PRINT_UNSIGNED_LONG:\n+\t      case D_PRINT_LONG_LONG:\n+\t      case D_PRINT_UNSIGNED_LONG_LONG:\n+\t\tif (d_right (dc)->type == DEMANGLE_COMPONENT_NAME)\n+\t\t  {\n+\t\t    if (dc->type == DEMANGLE_COMPONENT_LITERAL_NEG)\n+\t\t      d_append_char (dpi, '-');\n+\t\t    d_print_comp (dpi, d_right (dc));\n+\t\t    switch (tp)\n+\t\t      {\n+\t\t      default:\n+\t\t\tbreak;\n+\t\t      case D_PRINT_UNSIGNED:\n+\t\t\td_append_char (dpi, 'u');\n+\t\t\tbreak;\n+\t\t      case D_PRINT_LONG:\n+\t\t\td_append_char (dpi, 'l');\n+\t\t\tbreak;\n+\t\t      case D_PRINT_UNSIGNED_LONG:\n+\t\t\td_append_string_constant (dpi, \"ul\");\n+\t\t\tbreak;\n+\t\t      case D_PRINT_LONG_LONG:\n+\t\t\td_append_string_constant (dpi, \"ll\");\n+\t\t\tbreak;\n+\t\t      case D_PRINT_UNSIGNED_LONG_LONG:\n+\t\t\td_append_string_constant (dpi, \"ull\");\n+\t\t\tbreak;\n+\t\t      }\n+\t\t    return;\n+\t\t  }\n+\t\tbreak;\n \n-\t    case D_PRINT_BOOL:\n-\t      if (d_right (dc)->type == DEMANGLE_COMPONENT_NAME\n-\t\t  && d_right (dc)->u.s_name.len == 1\n-\t\t  && dc->type == DEMANGLE_COMPONENT_LITERAL)\n-\t\t{\n-\t\t  switch (d_right (dc)->u.s_name.s[0])\n-\t\t    {\n-\t\t    case '0':\n-\t\t      d_append_string_constant (dpi, \"false\");\n-\t\t      return;\n-\t\t    case '1':\n-\t\t      d_append_string_constant (dpi, \"true\");\n-\t\t      return;\n-\t\t    default:\n-\t\t      break;\n-\t\t    }\n-\t\t}\n-\t      break;\n+\t      case D_PRINT_BOOL:\n+\t\tif (d_right (dc)->type == DEMANGLE_COMPONENT_NAME\n+\t\t    && d_right (dc)->u.s_name.len == 1\n+\t\t    && dc->type == DEMANGLE_COMPONENT_LITERAL)\n+\t\t  {\n+\t\t    switch (d_right (dc)->u.s_name.s[0])\n+\t\t      {\n+\t\t      case '0':\n+\t\t\td_append_string_constant (dpi, \"false\");\n+\t\t\treturn;\n+\t\t      case '1':\n+\t\t\td_append_string_constant (dpi, \"true\");\n+\t\t\treturn;\n+\t\t      default:\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  }\n+\t\tbreak;\n \n-\t    default:\n-\t      break;\n-\t    }\n-\t}\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t  }\n \n-      d_append_char (dpi, '(');\n-      d_print_comp (dpi, d_left (dc));\n-      d_append_char (dpi, ')');\n-      if (dc->type == DEMANGLE_COMPONENT_LITERAL_NEG)\n-\td_append_char (dpi, '-');\n-      d_print_comp (dpi, d_right (dc));\n+\td_append_char (dpi, '(');\n+\td_print_comp (dpi, d_left (dc));\n+\td_append_char (dpi, ')');\n+\tif (dc->type == DEMANGLE_COMPONENT_LITERAL_NEG)\n+\t  d_append_char (dpi, '-');\n+\tif (tp == D_PRINT_FLOAT)\n+\t  d_append_char (dpi, '[');\n+\td_print_comp (dpi, d_right (dc));\n+\tif (tp == D_PRINT_FLOAT)\n+\t  d_append_char (dpi, ']');\n+      }\n       return;\n \n     default:\n@@ -3612,11 +3638,13 @@ d_print_function_type (dpi, dc, mods)\n {\n   int need_paren;\n   int saw_mod;\n+  int need_space;\n   struct d_print_mod *p;\n   struct d_print_mod *hold_modifiers;\n \n   need_paren = 0;\n   saw_mod = 0;\n+  need_space = 0;\n   for (p = mods; p != NULL; p = p->next)\n     {\n       if (p->printed)\n@@ -3625,15 +3653,18 @@ d_print_function_type (dpi, dc, mods)\n       saw_mod = 1;\n       switch (p->mod->type)\n \t{\n+\tcase DEMANGLE_COMPONENT_POINTER:\n+\tcase DEMANGLE_COMPONENT_REFERENCE:\n+\t  need_paren = 1;\n+\t  break;\n \tcase DEMANGLE_COMPONENT_RESTRICT:\n \tcase DEMANGLE_COMPONENT_VOLATILE:\n \tcase DEMANGLE_COMPONENT_CONST:\n \tcase DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL:\n-\tcase DEMANGLE_COMPONENT_POINTER:\n-\tcase DEMANGLE_COMPONENT_REFERENCE:\n \tcase DEMANGLE_COMPONENT_COMPLEX:\n \tcase DEMANGLE_COMPONENT_IMAGINARY:\n \tcase DEMANGLE_COMPONENT_PTRMEM_TYPE:\n+\t  need_space = 1;\n \t  need_paren = 1;\n \t  break;\n \tcase DEMANGLE_COMPONENT_RESTRICT_THIS:\n@@ -3652,18 +3683,14 @@ d_print_function_type (dpi, dc, mods)\n \n   if (need_paren)\n     {\n-      switch (d_last_char (dpi))\n+      if (! need_space)\n \t{\n-\tcase ' ':\n-\tcase '(':\n-\tcase '*':\n-\t  break;\n-\n-\tdefault:\n-\t  d_append_char (dpi, ' ');\n-\t  break;\n+\t  if (d_last_char (dpi) != '('\n+\t      && d_last_char (dpi) != '*')\n+\t    need_space = 1;\n \t}\n-\n+      if (need_space && d_last_char (dpi) != ' ')\n+\td_append_char (dpi, ' ');\n       d_append_char (dpi, '(');\n     }\n "}, {"sha": "eea086862d696ee01055fbe051680f1c53baed4c", "filename": "libiberty/cp-demangle.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31058ee354a51cdebccb7129312c07b4938ffa12/libiberty%2Fcp-demangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31058ee354a51cdebccb7129312c07b4938ffa12/libiberty%2Fcp-demangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.h?ref=31058ee354a51cdebccb7129312c07b4938ffa12", "patch": "@@ -53,10 +53,20 @@ enum d_builtin_type_print\n   D_PRINT_DEFAULT,\n   /* Print as integer.  */\n   D_PRINT_INT,\n-  /* Print as long, with trailing `l'.  */\n+  /* Print as unsigned integer, with trailing \"u\".  */\n+  D_PRINT_UNSIGNED,\n+  /* Print as long, with trailing \"l\".  */\n   D_PRINT_LONG,\n+  /* Print as unsigned long, with trailing \"ul\".  */\n+  D_PRINT_UNSIGNED_LONG,\n+  /* Print as long long, with trailing \"ll\".  */\n+  D_PRINT_LONG_LONG,\n+  /* Print as unsigned long long, with trailing \"ull\".  */\n+  D_PRINT_UNSIGNED_LONG_LONG,\n   /* Print as bool.  */\n   D_PRINT_BOOL,\n+  /* Print as float--put value in square brackets.  */\n+  D_PRINT_FLOAT,\n   /* Print in usual way, but here to detect void.  */\n   D_PRINT_VOID\n };"}, {"sha": "9a3f0b9da8d889522cd716e4ba33019d76ee37b7", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31058ee354a51cdebccb7129312c07b4938ffa12/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31058ee354a51cdebccb7129312c07b4938ffa12/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=31058ee354a51cdebccb7129312c07b4938ffa12", "patch": "@@ -3591,13 +3591,13 @@ hairyfunc5\n # This is from gcc PR 8861\n --format=gnu-v3 --no-params\n _Z1fILi1ELc120EEv1AIXplT_cviLd810000000000000000703DAD7A370C5EEE\n-void f<1, 120>(A<(1) + ((int)((double)810000000000000000703DAD7A370C5))>)\n-f<1, 120>\n+void f<1, (char)120>(A<(1) + ((int)((double)[810000000000000000703DAD7A370C5]))>)\n+f<1, (char)120>\n #\n # This is also from gcc PR 8861\n --format=gnu-v3 --no-params\n _Z1fILi1EEv1AIXplT_cvingLf3f800000EEE\n-void f<1>(A<(1) + ((int)(-((float)3f800000)))>)\n+void f<1>(A<(1) + ((int)(-((float)[3f800000])))>)\n f<1>\n #\n # This is from a libstdc++ debug mode patch.\n@@ -3635,7 +3635,7 @@ std::operator< <file_path, std::string>\n # More hairy qualifier handling.\n --format=gnu-v3 --no-params\n _Z9hairyfuncM1YKFPVPFrPA2_PM1XKFKPA3_ilEPcEiE\n-hairyfunc(int (* const (X::** (* restrict (* volatile*(Y::*)(int) const)(char*)) [2])(long) const) [3])\n+hairyfunc(int (* const (X::** (* restrict (* volatile* (Y::*)(int) const)(char*)) [2])(long) const) [3])\n hairyfunc\n #\n # Check that negative numbers are handled correctly."}]}