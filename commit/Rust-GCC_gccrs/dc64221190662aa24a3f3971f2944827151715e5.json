{"sha": "dc64221190662aa24a3f3971f2944827151715e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM2NDIyMTE5MDY2MmFhMjRhM2YzOTcxZjI5NDQ4MjcxNTE3MTVlNQ==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2007-06-06T10:36:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:36:17Z"}, "message": "init.c: Do not adjust IP of an imported VMS exception of ia64.\n\n2007-04-20  Tristan Gingold  <gingold@adacore.com>\n\t    Olivier Hainque  <hainque@adacore.com>\n\n\t* init.c: Do not adjust IP of an imported VMS exception of ia64.\n\tLIB$STOP is called to raise an exception and the IP of the exception\n\tis the instruction right after the call.\n\t(__gnat_adjust_context_for_raise, AIX): Implement.\n\t(__gnat_error_handler, AIX): Accept SIGINFO related arguments and call\n\t adjust_context_for_raise before Raise_From_Signal_Hanler.\n\t(__gnat_install_handler, AIX): Add SA_SIGINFO to the sa_flags, to ensure\n\tsiginfo is passed to the handler, necessary to let the zcx propagation\n\tengine unwind past it.\n\nFrom-SVN: r125428", "tree": {"sha": "fe2959f3e5e0852c69e8203ac2698bb89a18eb92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe2959f3e5e0852c69e8203ac2698bb89a18eb92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc64221190662aa24a3f3971f2944827151715e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc64221190662aa24a3f3971f2944827151715e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc64221190662aa24a3f3971f2944827151715e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc64221190662aa24a3f3971f2944827151715e5/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10e77af221ac8dc12cd2c414e77559ce9da9e082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e77af221ac8dc12cd2c414e77559ce9da9e082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e77af221ac8dc12cd2c414e77559ce9da9e082"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "06a1c804e68149bc22cbf8b6f7ba005200bdf03a", "filename": "gcc/ada/init.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc64221190662aa24a3f3971f2944827151715e5/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc64221190662aa24a3f3971f2944827151715e5/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=dc64221190662aa24a3f3971f2944827151715e5", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2006, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -254,10 +254,26 @@ nanosleep (struct timestruc_t *Rqtp, struct timestruc_t *Rmtp)\n \n #endif /* _AIXVERSION_430 */\n \n-static void __gnat_error_handler (int);\n+static void __gnat_error_handler (int sig, siginfo_t * si, void * uc);\n+\n+/* __gnat_adjust_context_for_raise - see comments along with the default\n+   version later in this file.  */\n+\n+void\n+__gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n+{\n+  /* We need to adjust the \"Instruction Address Register\" value, part of a\n+     'struct mstsave' wrapped as a jumpbuf in the mcontext field designated by\n+     the signal data pointer we get.  See sys/context.h + sys/mstsave.h  */\n+\n+  mcontext_t *mcontext = &((ucontext_t *) ucontext)->uc_mcontext;\n+  mcontext->jmp_context.iar++;\n+}\n+\n+#define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n \n static void\n-__gnat_error_handler (int sig)\n+__gnat_error_handler (int sig, siginfo_t * si, void * uc)\n {\n   struct Exception_Data *exception;\n   const char *msg;\n@@ -285,6 +301,7 @@ __gnat_error_handler (int sig)\n       msg = \"unhandled signal\";\n     }\n \n+  __gnat_adjust_context_for_raise (sig, uc);\n   Raise_From_Signal_Handler (exception, msg);\n }\n \n@@ -297,8 +314,8 @@ __gnat_install_handler (void)\n      exceptions.  Make sure that the handler isn't interrupted by another\n      signal that might cause a scheduling event! */\n \n-  act.sa_handler = __gnat_error_handler;\n-  act.sa_flags = SA_NODEFER | SA_RESTART;\n+  act.sa_flags = SA_NODEFER | SA_RESTART | SA_SIGINFO;\n+  act.sa_sigaction = __gnat_error_handler;\n   sigemptyset (&act.sa_mask);\n \n   /* Do not install handlers if interrupt state is \"System\" */\n@@ -1384,6 +1401,12 @@ __gnat_handle_vms_condition (int *sigargs, void *mechargs)\n       /* The full name really should be get sys$getmsg returns. ??? */\n       exception->Full_Name = \"IMPORTED_EXCEPTION\";\n       exception->Import_Code = base_code;\n+\n+#ifdef __IA64\n+      /* Do not adjust the program counter as already points to the next\n+\t instruction (just after the call to LIB$STOP).  */\n+      Raise_From_Signal_Handler (exception, msg);\n+#endif\n     }\n #endif\n "}]}