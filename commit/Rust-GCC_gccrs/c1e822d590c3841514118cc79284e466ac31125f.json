{"sha": "c1e822d590c3841514118cc79284e466ac31125f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFlODIyZDU5MGMzODQxNTE0MTE4Y2M3OTI4NGU0NjZhYzMxMTI1Zg==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2010-06-14T12:22:13Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2010-06-14T12:22:13Z"}, "message": "re PR tree-optimization/44507 (vectorization ANDs array elements together incorrectly)\n\n\n\tPR tree-optimization/44507 \n\t* tree-vect-loop.c (get_initial_def_for_reduction): Use -1\n\tto build initial vector for BIT_AND_EXPR.\n\t* tree-vect-slp.c (vect_get_constant_vectors): Likewise.\n\nFrom-SVN: r160727", "tree": {"sha": "b0fa78dca1bcc6286458dff5972922cd0cf8557e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0fa78dca1bcc6286458dff5972922cd0cf8557e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1e822d590c3841514118cc79284e466ac31125f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e822d590c3841514118cc79284e466ac31125f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1e822d590c3841514118cc79284e466ac31125f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e822d590c3841514118cc79284e466ac31125f/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66919db5ac195aa7fe24af68c8f75222c952145e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66919db5ac195aa7fe24af68c8f75222c952145e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66919db5ac195aa7fe24af68c8f75222c952145e"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "dfd0b7d1be71b33c1f09b3526eae852a3bf52b3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e822d590c3841514118cc79284e466ac31125f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e822d590c3841514118cc79284e466ac31125f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1e822d590c3841514118cc79284e466ac31125f", "patch": "@@ -1,3 +1,10 @@\n+2010-06-14  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/44507 \n+\t* tree-vect-loop.c (get_initial_def_for_reduction): Use -1\n+\tto build initial vector for BIT_AND_EXPR.\n+\t* tree-vect-slp.c (vect_get_constant_vectors): Likewise.\n+\n 2010-06-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/s390/s390.md (*mov<mode>_64 DD_DF, mov<mode>): Properly"}, {"sha": "2dadf092ff0138d0805965e77b4c4788ed5ab5e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e822d590c3841514118cc79284e466ac31125f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e822d590c3841514118cc79284e466ac31125f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1e822d590c3841514118cc79284e466ac31125f", "patch": "@@ -1,3 +1,8 @@\n+2010-06-14  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/44507 \n+\t* gcc.dg/vect/pr44507.c: New test.\n+\n 2010-06-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* g++.dg/plugin/header_plugin.c: Add \"c-family/\" to c-common.h"}, {"sha": "e53ba30cf4536dc243fe41fcb55f61626ec0e075", "filename": "gcc/testsuite/gcc.dg/vect/pr44507.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e822d590c3841514118cc79284e466ac31125f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr44507.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e822d590c3841514118cc79284e466ac31125f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr44507.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr44507.c?ref=c1e822d590c3841514118cc79284e466ac31125f", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdlib.h>\n+#include \"tree-vect.h\"\n+\n+int seeIf256ByteArrayIsConstant(\n+  unsigned char *pArray)\n+{\n+  int index;\n+  unsigned int curVal, orVal, andVal;\n+  int bytesAreEqual = 0;\n+\n+  if (pArray != 0)\n+    {\n+      for (index = 0, orVal = 0, andVal = 0xFFFFFFFF;\n+           index < 64;\n+           index += (int)sizeof(unsigned int))\n+        {\n+          curVal = *((unsigned long *)(&pArray[index]));\n+          orVal = orVal | curVal;\n+          andVal = andVal & curVal;\n+        }\n+\n+      if (!((orVal == andVal) \n+            && ((orVal >> 8) == (andVal & 0x00FFFFFF))))\n+        abort ();\n+    }\n+     \n+  return 0;\n+}\n+\n+\n+int main(int argc, char** argv)\n+{\n+  unsigned char array1[64] = {\n+    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+  };\n+\n+  argv = argv;\n+  argc = argc;\n+\n+  check_vect ();\n+\n+  return seeIf256ByteArrayIsConstant(&array1[0]);\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "3b38716940863a69c8b5bef1b3ff1d7c9956b3e1", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e822d590c3841514118cc79284e466ac31125f/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e822d590c3841514118cc79284e466ac31125f/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=c1e822d590c3841514118cc79284e466ac31125f", "patch": "@@ -2871,12 +2871,15 @@ get_initial_def_for_reduction (gimple stmt, tree init_val,\n               *adjustment_def = init_val;\n           }\n \n-        if (code == MULT_EXPR || code == BIT_AND_EXPR)\n+        if (code == MULT_EXPR)\n           {\n             real_init_val = dconst1;\n             int_init_val = 1;\n           }\n \n+        if (code == BIT_AND_EXPR)\n+          int_init_val = -1;\n+\n         if (SCALAR_FLOAT_TYPE_P (scalar_type))\n           def_for_init = build_real (scalar_type, real_init_val);\n         else"}, {"sha": "5f753a26935cc20bdc198bf21b93cbf3602d06cc", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e822d590c3841514118cc79284e466ac31125f/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e822d590c3841514118cc79284e466ac31125f/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=c1e822d590c3841514118cc79284e466ac31125f", "patch": "@@ -1662,14 +1662,17 @@ vect_get_constant_vectors (slp_tree slp_node, VEC(tree,heap) **vec_oprnds,\n              break;\n \n           case MULT_EXPR:\n-          case BIT_AND_EXPR:\n              if (SCALAR_FLOAT_TYPE_P (TREE_TYPE (op)))\n                neutral_op = build_real (TREE_TYPE (op), dconst1);\n              else\n                neutral_op = build_int_cst (TREE_TYPE (op), 1);\n \n              break;\n \n+          case BIT_AND_EXPR:\n+            neutral_op = build_int_cst (TREE_TYPE (op), -1);\n+            break;\n+\n           default:\n              neutral_op = NULL;\n         }"}]}