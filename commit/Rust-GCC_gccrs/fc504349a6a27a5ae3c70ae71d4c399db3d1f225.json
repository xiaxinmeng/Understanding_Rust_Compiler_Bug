{"sha": "fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1MDQzNDlhNmEyN2E1YWUzYzcwYWU3MWQ0YzM5OWRiM2QxZjIyNQ==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2017-11-06T19:35:55Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-11-06T19:35:55Z"}, "message": "rs6000-c.c (P8V_BUILTIN_VEC_REVB): Add power 8 definitions.\n\ngcc/ChangeLog:\n\n2017-11-06  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c.c (P8V_BUILTIN_VEC_REVB): Add power 8\n\tdefinitions.\n\t(P9V_BUILTIN_VEC_REVB): Remove the power 9 instance definitions.\n\t* config/rs6000/altivec.h (vec_revb): Change the #define from power 9\n\tto power 8.\n\t* config/rs6000/r6000-protos.h (swap_endian_selector_for_mode): Add new\n\textern declaration.\n\t* config/rs6000/rs6000.c (swap_endian_selector_for_mode): Add function.\n\t* config/rs6000/rs6000-builtin.def (BU_P8V_VSX_1, BU_P8V_OVERLOAD_1):\n\tAdd power 8 macro expansions.\n\t(BU_P9V_OVERLOAD_1): Remove power 9 overload expansion.\n\t* config/rs6000/vsx.md (revb_<mode>): Add define_expand to generate\n\tpower 8 instructions.  (VSX_XXBR): Add iterator.\n\ngcc/testsuite/ChangeLog:\n\n2017-11-06  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/builtins-revb-runnable.c: New runnable test file.\n\nFrom-SVN: r254464", "tree": {"sha": "07df00fb1941a0855add78ed5376c34beb319a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07df00fb1941a0855add78ed5376c34beb319a1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "113c53c3b8c54baa928aaba237aded0c47097334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113c53c3b8c54baa928aaba237aded0c47097334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113c53c3b8c54baa928aaba237aded0c47097334"}], "stats": {"total": 535, "additions": 510, "deletions": 25}, "files": [{"sha": "12ef83539f1e7a8a1457403139bb8ff019e38074", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "patch": "@@ -1,3 +1,19 @@\n+2017-11-06  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c (P8V_BUILTIN_VEC_REVB): Add power 8\n+\tdefinitions.\n+\t(P9V_BUILTIN_VEC_REVB): Remove the power 9 instance definitions.\n+\t* config/rs6000/altivec.h (vec_revb): Change the #define from power 9\n+\tto power 8.\n+\t* config/rs6000/r6000-protos.h (swap_endian_selector_for_mode): Add new\n+\textern declaration.\n+\t* config/rs6000/rs6000.c (swap_endian_selector_for_mode): Add function.\n+\t* config/rs6000/rs6000-builtin.def (BU_P8V_VSX_1, BU_P8V_OVERLOAD_1):\n+\tAdd power 8 macro expansions.\n+\t(BU_P9V_OVERLOAD_1): Remove power 9 overload expansion.\n+\t* config/rs6000/vsx.md (revb_<mode>): Add define_expand to generate\n+\tpower 8 instructions.  (VSX_XXBR): Add iterator.\n+\n 2017-11-06  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/arm/arm.md (predicable_short_it): Change default to \"no\","}, {"sha": "cec617a208ac81a0330fd1b30052deac61b86443", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "patch": "@@ -415,6 +415,7 @@\n #define vec_vsubuqm __builtin_vec_vsubuqm\n #define vec_vupkhsw __builtin_vec_vupkhsw\n #define vec_vupklsw __builtin_vec_vupklsw\n+#define vec_revb __builtin_vec_revb\n #endif\n \n #ifdef __POWER9_VECTOR__\n@@ -478,8 +479,6 @@\n \n #define vec_xlx __builtin_vec_vextulx\n #define vec_xrx __builtin_vec_vexturx\n-\n-#define vec_revb __builtin_vec_revb\n #endif\n \n /* Predicates."}, {"sha": "9dddc11015d0b062334e153385bd452342809c7f", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "patch": "@@ -1850,6 +1850,13 @@ BU_P6_64BIT_2 (CMPB,     \"cmpb\",\tCONST,\tcmpbdi3)\n /* 1 argument VSX instructions added in ISA 2.07.  */\n BU_P8V_VSX_1 (XSCVSPDPN,      \"xscvspdpn\",\tCONST,\tvsx_xscvspdpn)\n BU_P8V_VSX_1 (XSCVDPSPN,      \"xscvdpspn\",\tCONST,\tvsx_xscvdpspn)\n+BU_P8V_VSX_1 (REVB_V1TI,      \"revb_v1ti\",\tCONST,\trevb_v1ti)\n+BU_P8V_VSX_1 (REVB_V2DI,      \"revb_v2di\",\tCONST,\trevb_v2di)\n+BU_P8V_VSX_1 (REVB_V4SI,      \"revb_v4si\",\tCONST,\trevb_v4si)\n+BU_P8V_VSX_1 (REVB_V8HI,      \"revb_v8hi\",\tCONST,\trevb_v8hi)\n+BU_P8V_VSX_1 (REVB_V16QI,     \"revb_v16qi\",\tCONST,\trevb_v16qi)\n+BU_P8V_VSX_1 (REVB_V2DF,      \"revb_v2df\",\tCONST,\trevb_v2df)\n+BU_P8V_VSX_1 (REVB_V4SF,      \"revb_v4sf\",\tCONST,\trevb_v4sf)\n \n /* 1 argument altivec instructions added in ISA 2.07.  */\n BU_P8V_AV_1 (ABS_V2DI,\t      \"abs_v2di\",\tCONST,\tabsv2di2)\n@@ -1959,6 +1966,7 @@ BU_P8V_OVERLOAD_1 (VPOPCNTUH,\t\"vpopcntuh\")\n BU_P8V_OVERLOAD_1 (VPOPCNTUW,\t\"vpopcntuw\")\n BU_P8V_OVERLOAD_1 (VPOPCNTUD,\t\"vpopcntud\")\n BU_P8V_OVERLOAD_1 (VGBBD,\t\"vgbbd\")\n+BU_P8V_OVERLOAD_1 (REVB,\t\"revb\")\n \n /* ISA 2.07 vector overloaded 2 argument functions.  */\n BU_P8V_OVERLOAD_2 (EQV,\t\t\"eqv\")\n@@ -2070,8 +2078,6 @@ BU_P9V_OVERLOAD_1 (VSTDCNQP,\t\"scalar_test_neg_qp\")\n BU_P9V_OVERLOAD_1 (VSTDCNDP,\t\"scalar_test_neg_dp\")\n BU_P9V_OVERLOAD_1 (VSTDCNSP,\t\"scalar_test_neg_sp\")\n \n-BU_P9V_OVERLOAD_1 (REVB,\t\"revb\")\n-\n BU_P9V_OVERLOAD_1 (VEXTRACT_FP_FROM_SHORTH, \"vextract_fp_from_shorth\")\n BU_P9V_OVERLOAD_1 (VEXTRACT_FP_FROM_SHORTL, \"vextract_fp_from_shortl\")\n "}, {"sha": "0959c0b4871866e690a8c1fc6022b5689e27d193", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "patch": "@@ -5562,36 +5562,38 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_unsigned_V16QI, 0 },\n \n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRQ_V16QI,\n-    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRQ_V16QI,\n-    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRQ_V16QI,\n-    RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRQ_V1TI,\n-    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRQ_V1TI,\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V1TI,\n     RS6000_BTI_V1TI, RS6000_BTI_V1TI, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRD_V2DI,\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V1TI,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI, 0, 0 },\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0, 0 },\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRD_V2DI,\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRD_V2DF,\n-    RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRW_V4SI,\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V4SI,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRW_V4SI,\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRW_V4SI,\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRW_V4SF,\n-    RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRH_V8HI,\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V8HI,\n     RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRH_V8HI,\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n-  { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRH_V8HI,\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V8HI,\n     RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0, 0 },\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V16QI,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, 0, 0 },\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V16QI,\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0, 0 },\n+  { P8V_BUILTIN_VEC_REVB, P8V_BUILTIN_REVB_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0, 0 },\n \n   { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0, 0 },"}, {"sha": "0728800070547b0cd7ab8451721a5544f9276ed7", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "patch": "@@ -136,6 +136,8 @@ extern int rs6000_emit_vector_cond_expr (rtx, rtx, rtx, rtx, rtx, rtx);\n extern void rs6000_emit_minmax (rtx, enum rtx_code, rtx, rtx);\n extern void rs6000_split_signbit (rtx, rtx);\n extern void rs6000_expand_atomic_compare_and_swap (rtx op[]);\n+extern rtx swap_endian_selector_for_mode (machine_mode mode);\n+\n extern void rs6000_expand_atomic_exchange (rtx op[]);\n extern void rs6000_expand_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n extern void rs6000_emit_swdiv (rtx, rtx, rtx, bool);"}, {"sha": "c2712d9deb2dc4a73077aea8fb4489714463b3f7", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "patch": "@@ -14303,6 +14303,77 @@ swap_selector_for_mode (machine_mode mode)\n   return force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, gen_rtvec_v (16, perm)));\n }\n \n+rtx\n+swap_endian_selector_for_mode (machine_mode mode)\n+{\n+  unsigned int le_swap1[16] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  unsigned int le_swap2[16] = {7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8};\n+  unsigned int le_swap4[16] = {3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12};\n+  unsigned int le_swap8[16] = {1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14};\n+  unsigned int le_swap16[16] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+\n+  unsigned int be_swap1[16] = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+  unsigned int be_swap2[16] = {7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8};\n+  unsigned int be_swap4[16] = {3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12};\n+  unsigned int be_swap8[16] = {1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14};\n+  unsigned int be_swap16[16] = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+  unsigned int *swaparray, i;\n+  rtx perm[16];\n+\n+  if (VECTOR_ELT_ORDER_BIG)\n+    switch (mode)\n+      {\n+      case E_V1TImode:\n+\tswaparray = le_swap1;\n+\tbreak;\n+      case E_V2DFmode:\n+      case E_V2DImode:\n+\tswaparray = le_swap2;\n+\tbreak;\n+      case E_V4SFmode:\n+      case E_V4SImode:\n+\tswaparray = le_swap4;\n+\tbreak;\n+      case E_V8HImode:\n+\tswaparray = le_swap8;\n+\tbreak;\n+      case E_V16QImode:\n+\tswaparray = le_swap16;\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  else\n+    switch (mode)\n+      {\n+      case E_V1TImode:\n+\tswaparray = be_swap1;\n+\tbreak;\n+      case E_V2DFmode:\n+      case E_V2DImode:\n+\tswaparray = be_swap2;\n+\tbreak;\n+      case E_V4SFmode:\n+      case E_V4SImode:\n+\tswaparray = be_swap4;\n+\tbreak;\n+      case E_V8HImode:\n+\tswaparray = be_swap8;\n+\tbreak;\n+      case E_V16QImode:\n+\tswaparray = be_swap16;\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+      }\n+\n+  for (i = 0; i < 16; ++i)\n+    perm[i] = GEN_INT (swaparray[i]);\n+\n+  return force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode,\n+\t\t\t\t\t\t     gen_rtvec_v (16, perm)));\n+}\n+\n /* Generate code for an \"lvxl\", or \"lve*x\" built-in for a little endian target\n    with -maltivec=be specified.  Issue the load followed by an element-\n    reversing permute.  */"}, {"sha": "901688ed101e67b6d732d4dfdd88e47c38c17e5e", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "patch": "@@ -73,6 +73,13 @@\n \t\t\t     (TF\t\"FLOAT128_VECTOR_P (TFmode)\")\n \t\t\t     TI])\n \n+(define_mode_attr VSX_XXBR  [(V8HI  \"h\")\n+\t\t\t     (V4SI  \"w\")\n+\t\t\t     (V4SF  \"w\")\n+\t\t\t     (V2DF  \"d\")\n+\t\t\t     (V2DI  \"d\")\n+\t\t\t     (V1TI  \"q\")])\n+\n ;; Map into the appropriate load/store name based on the type\n (define_mode_attr VSm  [(V16QI \"vw4\")\n \t\t\t(V8HI  \"vw4\")\n@@ -273,6 +280,9 @@\n (define_mode_iterator VSINT_84  [V4SI V2DI DI SI])\n (define_mode_iterator VSINT_842 [V8HI V4SI V2DI])\n \n+;; Vector reverse byte modes\n+(define_mode_iterator VEC_REVB [V8HI V4SI V2DI V4SF V2DF V1TI])\n+\n ;; Iterator for ISA 3.0 vector extract/insert of small integer vectors.\n ;; VSX_EXTRACT_I2 doesn't include V4SImode because SI extracts can be\n ;; done on ISA 2.07 and not just ISA 3.0.\n@@ -4776,6 +4786,37 @@\n   \"xxbrw %x0,%x1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n+;; Swap all bytes in each element of vector\n+(define_expand \"revb_<mode>\"\n+  [(set (match_operand:VEC_REVB 0 \"vsx_register_operand\")\n+\t(bswap:VEC_REVB (match_operand:VEC_REVB 1 \"vsx_register_operand\")))]\n+  \"\"\n+{\n+  if (TARGET_P9_VECTOR)\n+    emit_insn (gen_p9_xxbr<VSX_XXBR>_<mode> (operands[0], operands[1]));\n+  else\n+    {\n+      /* Want to have the elements in reverse order relative\n+\t to the endian mode in use, i.e. in LE mode, put elements\n+\t in BE order.  */\n+      rtx sel = swap_endian_selector_for_mode(<MODE>mode);\n+      emit_insn (gen_altivec_vperm_<mode> (operands[0], operands[1],\n+\t\t\t\t\t   operands[1], sel));\n+    }\n+\n+  DONE;\n+})\n+\n+;; Reversing bytes in vector char is just a NOP.\n+(define_expand \"revb_v16qi\"\n+  [(set (match_operand:V16QI 0 \"vsx_register_operand\")\n+\t(bswap:V16QI (match_operand:V16QI 1 \"vsx_register_operand\")))]\n+  \"\"\n+{\n+  emit_move_insn (operands[0], operands[1]);\n+  DONE;\n+})\n+\n ;; Swap all bytes in each 16-bit element\n (define_insn \"p9_xxbrh_v8hi\"\n   [(set (match_operand:V8HI 0 \"vsx_register_operand\" \"=wa\")"}, {"sha": "c3a197422e85a264bf4fac3c8dd266bb04e9ae7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "patch": "@@ -1,3 +1,7 @@\n+2017-11-06  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-revb-runnable.c: New runnable test file.\n+\n 2017-11-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/82748"}, {"sha": "25bd4a2f729ea14d8b6bef5f952d6a9387ce0b26", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-revb-runnable.c", "status": "added", "additions": 344, "deletions": 0, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-revb-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc504349a6a27a5ae3c70ae71d4c399db3d1f225/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-revb-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-revb-runnable.c?ref=fc504349a6a27a5ae3c70ae71d4c399db3d1f225", "patch": "@@ -0,0 +1,344 @@\n+/* { dg-do run { target { powerpc*-*-* && p8vector_hw } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8  -O3\" } */\n+\n+#include <altivec.h>\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+void abort (void);\n+\n+/* Verify vec_revb builtins */\n+\n+int\n+main()\n+{\n+  int i;\n+  vector bool char arg_bc, result_bc, expected_bc;\n+  vector unsigned char arg_uc, result_uc, expected_uc;\n+  vector signed char arg_sc, result_sc, expected_sc;\n+\n+  vector bool short int arg_bsi, result_bsi, expected_bsi;\n+  vector unsigned short int arg_usi, result_usi, expected_usi;\n+  vector short int arg_si, result_si, expected_si;\n+\n+  vector bool int arg_bi, result_bi, expected_bi;\n+  vector unsigned int arg_ui, result_ui, expected_ui;\n+  vector int arg_int, result_int, expected_int;\n+\n+  vector bool long long int arg_blli, result_blli, expected_blli;\n+  vector unsigned long long int arg_ulli, result_ulli, expected_ulli;\n+  vector long long int arg_lli, result_lli, expected_lli;\n+\n+  vector __uint128_t arg_uint128, result_uint128, expected_uint128;\n+  vector __int128_t arg_int128, result_int128, expected_int128;\n+\n+  vector float arg_f, result_f, expected_f;\n+  vector double arg_d, result_d, expected_d;\n+\n+  /* 8-bit ints */\n+  /* The element is a byte.  Reversing the byte in each byte element\n+     gives the same value.  */\n+  arg_bc = (vector bool char) {0x01, 0x23, 0x45, 0x67,\n+\t\t\t       0x7E, 0x7C, 0x7A, 0x78,\n+\t\t\t       0x02, 0x46, 0x7A, 0x7E,\n+\t\t\t       0x13, 0x57, 0x7B, 0x7F};\n+  expected_bc = arg_bc;\n+\n+  result_bc = vec_revb (arg_bc);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (result_bc[i] != expected_bc[i])\n+#ifdef DEBUG\n+       printf(\"arg_bc[%d] = 0x%x, result_bc[%d] = 0x%x, expected_bc[%d] = 0x%x\\n\",\n+\t      i, arg_bc[i], i, result_bc[i], i, expected_bc[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  arg_uc = (vector unsigned char) {0x01, 0x23, 0x45, 0x67,\n+\t\t\t\t   0x7E, 0x7C, 0x7A, 0x78,\n+\t\t\t\t   0x02, 0x46, 0x7A, 0x7E,\n+\t\t\t\t   0x13, 0x57, 0x7B, 0x7F};\n+  expected_uc = arg_uc;\n+\n+  result_uc = vec_revb (arg_uc);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (result_uc[i] != expected_uc[i])\n+#ifdef DEBUG\n+       printf(\"arg_uc[%d] = 0x%x, result_uc[%d] = 0x%x, expected_uc[%d] = 0x%x\\n\",\n+\t      i, arg_uc[i], i, result_uc[i], i, expected_uc[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  arg_sc = (vector signed char) {0x01, 0x23, 0x45, 0x67,\n+\t\t\t\t 0x7E, 0x7C, 0x7A, 0x78,\n+\t\t\t\t 0x02, 0x46, 0x7A, 0x7E,\n+\t\t\t\t 0x13, 0x57, 0x7B, 0x7F};\n+  expected_sc = arg_sc;\n+\n+  result_sc = vec_revb (arg_sc);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (result_sc[i] != expected_sc[i])\n+#ifdef DEBUG\n+      printf(\"arg_sc[%d] = 0x%x, result_sc[%d] = 0x%x, expected_sc[%d] = 0x%x\\n\",\n+\t     i, arg_sc[i], i, result_sc[i], i, expected_sc[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* 16-bit ints */\n+  arg_bsi = (vector bool short int) {0x0123, 0x4567, 0xFEDC, 0xBA98, 0x0246,\n+\t\t\t\t     0x8ACE, 0x1357, 0x9BDF};\n+  expected_bsi = (vector bool short int) {0x2301, 0x6745, 0xDCFE, 0x98BA,\n+\t\t\t\t\t  0x4602, 0xCE8A, 0x5713, 0xDF9B};\n+\n+  result_bsi = vec_revb (arg_bsi);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (result_bsi[i] != expected_bsi[i])\n+#ifdef DEBUG\n+       printf(\"arg_bsi[%d] = 0x%x, result_bsi[%d] = 0x%x, expected_bsi[%d] = 0x%x\\n\",\n+\t      i, arg_bsi[i], i, result_bsi[i], i, expected_bsi[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  arg_usi = (vector unsigned short int) {0x0123, 0x4567, 0xFEDC, 0xBA98,\n+\t\t\t\t\t 0x0246, 0x8ACE, 0x1357, 0x9BDF};\n+  expected_usi = (vector unsigned short int) {0x2301, 0x6745, 0xDCFE, 0x98BA,\n+\t\t\t\t\t      0x4602, 0xCE8A, 0x5713, 0xDF9B};\n+\n+  result_usi = vec_revb (arg_usi);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (result_usi[i] != expected_usi[i])\n+#ifdef DEBUG\n+      printf(\"arg_usi[%d] = 0x%x, result_usi[%d] = 0x%x, expected_usi[%d] = 0x%x\\n\",\n+\t     i, arg_usi[i], i, result_usi[i], i, expected_usi[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  arg_si = (vector short int) {0x0123, 0x4567, 0xFEDC, 0xBA98, 0x0246, 0x8ACE,\n+\t\t\t       0x1357, 0x9BDF};\n+  expected_si = (vector short int) {0x2301, 0x6745, 0xDCFE, 0x98BA, 0x4602,\n+\t\t\t\t    0xCE8A, 0x5713, 0xDF9B};\n+\n+  result_si = vec_revb (arg_si);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (result_si[i] != expected_si[i])\n+#ifdef DEBUG\n+       printf(\"arg_si[%d] = 0x%x, result_si[%d] = 0x%x, expected_si[%d] = 0x%x\\n\",\n+\t      i, arg_si[i], i, result_si[i], i, expected_si[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* 32-bit ints */\n+  arg_bi = (vector bool int) {0x01234567, 0xFEDCBA98, 0x02468ACE, 0x13579BDF};\n+  expected_bi = (vector bool int) {0x67452301, 0x98BADCFE, 0xCE8A4602,\n+\t\t\t\t   0xDF9B5713};\n+\n+  result_bi = vec_revb (arg_bi);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (result_bi[i] != expected_bi[i])\n+#ifdef DEBUG\n+      printf(\"arg_bi[%d] = 0x%x, result_bi[%d] = 0x%x, expected_bi[%d] = 0x%x\\n\",\n+\t     i, arg_bi[i], i, result_bi[i], i, expected_bi[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  arg_ui = (vector unsigned int) {0x01234567, 0xFEDCBA98, 0x02468ACE,\n+\t\t\t\t  0x13579BDF};\n+  expected_ui = (vector unsigned int) {0x67452301, 0x98BADCFE, 0xCE8A4602,\n+\t\t\t\t       0xDF9B5713};\n+\n+  result_ui = vec_revb (arg_ui);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (result_ui[i] != expected_ui[i])\n+#ifdef DEBUG\n+      printf(\"arg_ui[%d] = 0x%x, result_ui[%d] = 0x%x, expected_ui[%d] = 0x%x\\n\",\n+\t     i, arg_ui[i], i, result_ui[i], i, expected_ui[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  arg_int = (vector int) {0x01234567, 0xFEDCBA98, 0x02468ACE, 0x13579BDF};\n+  expected_int = (vector int) {0x67452301, 0x98BADCFE, 0xCE8A4602, 0xDF9B5713};\n+\n+  result_int = vec_revb (arg_int);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (result_int[i] != expected_int[i])\n+#ifdef DEBUG\n+      printf(\"arg_int[%d] = 0x%x, result_int[%d] = 0x%x, expected_int[%d] = 0x%x\\n\",\n+\t     i, arg_int[i], i, result_int[i], i, expected_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* 64-bit ints */\n+  arg_blli = (vector bool long long int) {0x01234567FEDCBA98,\n+\t\t\t\t\t  0x02468ACE13579BDF};\n+  expected_blli = (vector bool long long int) {0x98BADCFE67452301,\n+\t\t\t\t\t       0xDF9B5713CE8A4602};\n+\n+  result_blli = vec_revb (arg_blli);\n+\n+  for (i = 0; i < 2; i++) {\n+    if (result_blli[i] != expected_blli[i])\n+#ifdef DEBUG\n+      printf(\"arg_blli[%d] = 0x%x, result_blli[%d] = 0x%llx, expected_blli[%d] = 0x%llx\\n\",\n+\t     i, arg_blli[i], i, result_blli[i], i, expected_blli[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  arg_ulli = (vector unsigned long long int) {0x01234567FEDCBA98,\n+\t\t\t\t\t      0x02468ACE13579BDF};\n+  expected_ulli = (vector unsigned long long int) {0x98BADCFE67452301,\n+\t\t\t\t\t\t   0xDF9B5713CE8A4602};\n+\n+  result_ulli = vec_revb (arg_ulli);\n+\n+  for (i = 0; i < 2; i++) {\n+    if (result_ulli[i] != expected_ulli[i])\n+#ifdef DEBUG\n+      printf(\"arg_ulli[%d] = 0x%x, result_ulli[%d] = 0x%llx, expected_ulli[%d] = 0x%llx\\n\",\n+\t     i, arg_ulli[i], i, result_ulli[i], i, expected_ulli[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  arg_lli = (vector long long int) {0x01234567FEDCBA98, 0x02468ACE13579BDF};\n+  expected_lli = (vector long long int) {0x98BADCFE67452301,\n+\t\t\t\t\t 0xDF9B5713CE8A4602};\n+\n+  result_lli = vec_revb (arg_lli);\n+\n+  for (i = 0; i < 2; i++) {\n+    if (result_lli[i] != expected_lli[i])\n+#ifdef DEBUG\n+      printf(\"arg_lli[%d] = 0x%x, result_lli[%d] = 0x%llx, expected_lli[%d] = 0x%llx\\n\",\n+\t     i, arg_lli[i], i, result_lli[i], i, expected_lli[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* 128-bit ints */\n+  arg_uint128[0] = 0x1627384950617243;\n+  arg_uint128[0] = arg_uint128[0] << 64;\n+  arg_uint128[0] |= 0x9405182930415263;\n+  expected_uint128[0] = 0x6352413029180594;\n+  expected_uint128[0] = expected_uint128[0] << 64;\n+  expected_uint128[0] |= 0x4372615049382716;\n+\n+  result_uint128 = vec_revb (arg_uint128);\n+\n+  if (result_uint128[0] != expected_uint128[0])\n+    {\n+#ifdef DEBUG\n+       printf(\"result_uint128[0] doesn't match expected_u128[0]\\n\");\n+       printf(\"arg_uint128[0] =  %llx \", arg_uint128[0] >> 64);\n+       printf(\" %llx\\n\",\t arg_uint128[0] & 0xFFFFFFFFFFFFFFFF);\n+\n+       printf(\"result_uint128[0] =  %llx \", result_uint128[0] >> 64);\n+       printf(\" %llx\\n\", result_uint128[0] & 0xFFFFFFFFFFFFFFFF);\n+\n+       printf(\"expected_uint128[0] =  %llx \", expected_uint128[0] >> 64);\n+       printf(\" %llx\\n\", expected_uint128[0] & 0xFFFFFFFFFFFFFFFF);\n+#else\n+    abort();\n+#endif\n+    }\n+\n+  arg_int128[0] = 0x1627384950617283;\n+  arg_int128[0] = arg_int128[0] << 64;\n+  arg_int128[0] |= 0x9405182930415263;\n+  expected_int128[0] = 0x6352413029180594;\n+  expected_int128[0] = expected_int128[0] << 64;\n+  expected_int128[0] |= 0x8372615049382716;;\n+\n+  result_int128 = vec_revb (arg_int128);\n+\n+  if (result_int128[0] != expected_int128[0])\n+    {\n+#ifdef DEBUG\n+       printf(\"result_int128[0] doesn't match expected128[0]\\n\");\n+       printf(\"arg_int128[0] =  %llx \", arg_int128[0] >> 64);\n+       printf(\" %llx\\n\",\t arg_int128[0] & 0xFFFFFFFFFFFFFFFF);\n+\n+       printf(\"result_int128[0] =  %llx \", result_int128[0] >> 64);\n+       printf(\" %llx\\n\", result_int128[0] & 0xFFFFFFFFFFFFFFFF);\n+\n+       printf(\"expected_int128[0] =  %llx \", expected_int128[0] >> 64);\n+       printf(\" %llx\\n\", expected_int128[0] & 0xFFFFFFFFFFFFFFFF);\n+#else\n+    abort();\n+#endif\n+    }\n+\n+  /* 32-bit floats */\n+  /* 0x42f7224e, 0x43e471ec, 0x49712062, 0x4a0f2b38 */\n+  arg_f = (vector float) {123.567, 456.89, 987654.123456, 2345678.0};\n+  /* 0x4e22F742, 0xec71e443, 0x62207149, 0x382b0f4a */\n+  expected_f = (vector float) {683528320.0,\n+\t\t\t       -1169716232068291395011477504.0,\n+\t\t\t       739910526898278498304.0,\n+\t\t\t       0.0000407838160754181444644927978515625};\n+\n+  result_f = vec_revb (arg_f);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (result_f[i] != expected_f[i])\n+      {\n+#ifdef DEBUG\n+\tprintf(\"    arg_f[%d] = %f, result_f[%d] = %f, expected_f[%d] = %f\\n\",\n+\t       i, arg_f[i], i, result_f[i], i, expected_f[i]);\n+#else\n+\tabort();\n+#endif\n+      }\n+  }\n+\n+  /* 64-bit floats */\n+  /* 0x419D6F34547E6B75   0x4194E5FEC781948B */\n+  arg_d = (vector double) {123456789.123456789, 87654321.87654321};\n+  /* 0x756B7E54346F9D41   0x8B9481C7FEE59441 */\n+  expected_d = (vector double) {4.12815412905659550518671402044E257,\n+\t\t\t\t-6.99269992046390236552018719554E-253};\n+\n+  result_d = vec_revb (arg_d);\n+\n+  for (i = 0; i < 2; i++) {\n+    if (result_d[i] != expected_d[i])\n+#ifdef DEBUG\n+      printf(\"arg_d[%d] = %f, result_d[%d] = %f, expected_d[%d] = %f\\n\",\n+\t     i, arg_d[i], i, result_d[i], i, expected_d[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+}"}]}