{"sha": "7b3d1847e637cae5e6ea174718df19ceaa5ae290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzZDE4NDdlNjM3Y2FlNWU2ZWExNzQ3MThkZjE5Y2VhYTVhZTI5MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-08-26T06:19:37Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-08-26T06:19:37Z"}, "message": "sync.md: Update comment about unpredictable LL/SC lock clearing by a taken branch.\n\n\t* config/alpha/sync.md: Update comment about unpredictable LL/SC lock\n\tclearing by a taken branch.\n\t(sync_<fetchop_name><mode>): Split when epilogue_completed is set,\n\teffectively after bbro pass.\n\t(sync_nand<mode>): Ditto.\n\t(sync_old_<fetchop_name><mode>): Ditto.\n\t(sync_old_nand<mode>): Ditto.\n\t(sync_new_<fetchop_name><mode>): Dito.\n\t(sync_new_nand<mode>): Ditto.\n\t(sync_compare_and_swap<mode>_1): Ditto.\n\t(*sync_compare_and_swap<mode>): Ditto.\n\t(sync_lock_test_and_set<mode>_1): Ditto.\n\t(\"sync_lock_test_and_set<mode>): Ditto.\n\nFrom-SVN: r151115", "tree": {"sha": "286bc9b9a9bcd8b1be5ebb0f39b9e09cec089c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/286bc9b9a9bcd8b1be5ebb0f39b9e09cec089c69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b3d1847e637cae5e6ea174718df19ceaa5ae290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3d1847e637cae5e6ea174718df19ceaa5ae290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3d1847e637cae5e6ea174718df19ceaa5ae290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3d1847e637cae5e6ea174718df19ceaa5ae290/comments", "author": null, "committer": null, "parents": [{"sha": "1dad57e65d9539eccc652dbb42b5574db72bb3fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dad57e65d9539eccc652dbb42b5574db72bb3fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dad57e65d9539eccc652dbb42b5574db72bb3fc"}], "stats": {"total": 68, "additions": 41, "deletions": 27}, "files": [{"sha": "6a67828d7ae060e8733d78b74e91d15a15f82f63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3d1847e637cae5e6ea174718df19ceaa5ae290/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3d1847e637cae5e6ea174718df19ceaa5ae290/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b3d1847e637cae5e6ea174718df19ceaa5ae290", "patch": "@@ -1,3 +1,19 @@\n+2009-08-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/sync.md: Update comment about unpredictable LL/SC lock\n+\tclearing by a taken branch.\n+\t(sync_<fetchop_name><mode>): Split when epilogue_completed is set,\n+\teffectively after bbro pass.\n+\t(sync_nand<mode>): Ditto.\n+\t(sync_old_<fetchop_name><mode>): Ditto.\n+\t(sync_old_nand<mode>): Ditto.\n+\t(sync_new_<fetchop_name><mode>): Dito.\n+\t(sync_new_nand<mode>): Ditto.\n+\t(sync_compare_and_swap<mode>_1): Ditto.\n+\t(*sync_compare_and_swap<mode>): Ditto.\n+\t(sync_lock_test_and_set<mode>_1): Ditto.\n+\t(\"sync_lock_test_and_set<mode>): Ditto.\n+\n 2009-08-25  Douglas B Rupp  <rupp@gnat.com>\n \n \t* hwint.h (HOST_LONG_FORMAT): New macro\n@@ -406,9 +422,10 @@\n \t(sse5_maskcmp_uns<mode>3): Ditto.\n \t(sse5_maskcmp_uns2<mode>3): Ditto.\n \t(sse5_pcom_tf<mode>3): Ditto.\n-\t\n-\t* config/i386/predicates.md (sse5_comparison_float_operator): New predicate to match the\n-\tcomparison operators supported by the SSE5 com instruction.\n+\n+\t* config/i386/predicates.md (sse5_comparison_float_operator):\n+\tNew predicate to match the comparison operators supported by\n+\tthe SSE5 com instruction.\n \t(ix86_comparison_int_operator): New predicate to match just the\n \tsigned int comparisons.\n \t(ix86_comparison_uns_operator): New predicate to match just the\n@@ -484,7 +501,7 @@\n \t* config/crx/crx.h (CAN_ELIMINATE): Remove macro.\n \t* config/crx/crx.c (TARGET_CAN_ELIMINATE): Define macro.\n \t(crx_can_eliminate): New function.\n-\t\n+\n \t* config/fr30/fr30.h (CAN_ELIMINATE): Remove macro.\n \t* config/fr30/fr30.c (TARGET_CAN_ELIMINATE): Define macro.\n \t(fr30_can_eliminate): New function.\n@@ -649,23 +666,23 @@\n \n 2009-08-24  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n-       * config/arm/arm.c (output_return_instruction): Handle for\n-       unified syntax.\n+\t* config/arm/arm.c (output_return_instruction): Handle for\n+\tunified syntax.\n \n 2009-08-24  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n-       * config/arm/arm.c (arm_select_cc_mode): Handle subreg.\n+\t* config/arm/arm.c (arm_select_cc_mode): Handle subreg.\n \n 2009-08-24  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n-        * config/arm/vfp.md (*arm_movdi_vfp): Mark as predicable.\n-        (*arm_movdf_vfp): Likewise.\n+\t* config/arm/vfp.md (*arm_movdi_vfp): Mark as predicable.\n+\t(*arm_movdf_vfp): Likewise.\n \n 2009-08-24  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n-       * config/arm/neon.md (vashl<mode>3): Rename from ashl<mode>3.\n-       (vashr<mode>3): Rename from ashr<mode>3.\n-       (vlshr<mode>3): Rename from lshr<mode>3.\n+\t* config/arm/neon.md (vashl<mode>3): Rename from ashl<mode>3.\n+\t(vashr<mode>3): Rename from ashr<mode>3.\n+\t(vlshr<mode>3): Rename from lshr<mode>3.\n \n 2009-08-24  Kai Tietz  <kai.tietz@onevision.com>\n "}, {"sha": "bb7210239fd1b9919cfad6b9026f73e1fd0a3b2e", "filename": "gcc/config/alpha/sync.md", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3d1847e637cae5e6ea174718df19ceaa5ae290/gcc%2Fconfig%2Falpha%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3d1847e637cae5e6ea174718df19ceaa5ae290/gcc%2Fconfig%2Falpha%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fsync.md?ref=7b3d1847e637cae5e6ea174718df19ceaa5ae290", "patch": "@@ -62,11 +62,8 @@\n   [(set_attr \"type\" \"st_c\")])\n \n ;; The Alpha Architecture Handbook says that it is UNPREDICTABLE whether\n-;; the lock is cleared by a TAKEN branch.  If we were to honor that, it\n-;; would mean that we could not expand a ll/sc sequence until after the\n-;; final basic-block reordering pass.  Fortunately, it appears that no\n-;; Alpha implementation ever built actually clears the lock on branches,\n-;; taken or not.\n+;; the lock is cleared by a TAKEN branch.  This means that we can not\n+;; expand a ll/sc sequence until after the final basic-block reordering pass.\n \n (define_insn_and_split \"sync_<fetchop_name><mode>\"\n   [(set (match_operand:I48MODE 0 \"memory_operand\" \"+m\")\n@@ -77,7 +74,7 @@\n    (clobber (match_scratch:I48MODE 2 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"epilogue_completed\"\n   [(const_int 0)]\n {\n   alpha_split_atomic_op (<CODE>, operands[0], operands[1],\n@@ -96,7 +93,7 @@\n    (clobber (match_scratch:I48MODE 2 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"epilogue_completed\"\n   [(const_int 0)]\n {\n   alpha_split_atomic_op (NOT, operands[0], operands[1],\n@@ -116,7 +113,7 @@\n    (clobber (match_scratch:I48MODE 3 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"epilogue_completed\"\n   [(const_int 0)]\n {\n   alpha_split_atomic_op (<CODE>, operands[1], operands[2],\n@@ -137,7 +134,7 @@\n    (clobber (match_scratch:I48MODE 3 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"epilogue_completed\"\n   [(const_int 0)]\n {\n   alpha_split_atomic_op (NOT, operands[1], operands[2],\n@@ -158,7 +155,7 @@\n    (clobber (match_scratch:I48MODE 3 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"epilogue_completed\"\n   [(const_int 0)]\n {\n   alpha_split_atomic_op (<CODE>, operands[1], operands[2],\n@@ -179,7 +176,7 @@\n    (clobber (match_scratch:I48MODE 3 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"epilogue_completed\"\n   [(const_int 0)]\n {\n   alpha_split_atomic_op (NOT, operands[1], operands[2],\n@@ -214,7 +211,7 @@\n    (clobber (match_scratch:DI 6 \"=X,&r\"))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"epilogue_completed\"\n   [(const_int 0)]\n {\n   alpha_split_compare_and_swap_12 (<MODE>mode, operands[0], operands[1],\n@@ -251,7 +248,7 @@\n    (clobber (match_scratch:I48MODE 4 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"epilogue_completed\"\n   [(const_int 0)]\n {\n   alpha_split_compare_and_swap (operands[0], operands[1], operands[2],\n@@ -282,7 +279,7 @@\n    (clobber (match_scratch:DI 4 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"epilogue_completed\"\n   [(const_int 0)]\n {\n   alpha_split_lock_test_and_set_12 (<MODE>mode, operands[0], operands[1],\n@@ -301,7 +298,7 @@\n    (clobber (match_scratch:I48MODE 3 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"epilogue_completed\"\n   [(const_int 0)]\n {\n   alpha_split_lock_test_and_set (operands[0], operands[1],"}]}