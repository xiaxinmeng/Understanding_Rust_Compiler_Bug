{"sha": "cd3f923b0d5c2cb087840db55a7578c9b363276b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QzZjkyM2IwZDVjMmNiMDg3ODQwZGI1NWE3NTc4YzliMzYzMjc2Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-27T08:52:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-27T08:52:17Z"}, "message": "re PR lto/92674 (ICE in gimple_phi_arg, at gimple.h:4406 since r240291)\n\n2019-11-27  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/92674\n\t* tree-inline.c (expand_call_inline): Delay purging EH/abnormal\n\tedges and instead record blocks in bitmap.\n\t(gimple_expand_calls_inline): Adjust.\n\t(fold_marked_statements): Delay EH cleanup until all folding is\n\tdone.\n\t(optimize_inline_calls): Do EH/abnormal cleanup for calls after\n\tinlining finished.\n\nFrom-SVN: r278757", "tree": {"sha": "0ba775dac13b28cb5e35145efaf3f9a05106f726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ba775dac13b28cb5e35145efaf3f9a05106f726"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd3f923b0d5c2cb087840db55a7578c9b363276b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3f923b0d5c2cb087840db55a7578c9b363276b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3f923b0d5c2cb087840db55a7578c9b363276b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3f923b0d5c2cb087840db55a7578c9b363276b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af2f620578f46f09dba964ce5f739df0e61a595b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2f620578f46f09dba964ce5f739df0e61a595b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af2f620578f46f09dba964ce5f739df0e61a595b"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "1235b4411c25cdb6ddf6230a9c8429b2a279a819", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3f923b0d5c2cb087840db55a7578c9b363276b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3f923b0d5c2cb087840db55a7578c9b363276b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd3f923b0d5c2cb087840db55a7578c9b363276b", "patch": "@@ -1,3 +1,14 @@\n+2019-11-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/92674\n+\t* tree-inline.c (expand_call_inline): Delay purging EH/abnormal\n+\tedges and instead record blocks in bitmap.\n+\t(gimple_expand_calls_inline): Adjust.\n+\t(fold_marked_statements): Delay EH cleanup until all folding is\n+\tdone.\n+\t(optimize_inline_calls): Do EH/abnormal cleanup for calls after\n+\tinlining finished.\n+\n 2019-11-27  Bernd Schmidt  <bernds_cb1@t-online.de>\n \n \t* auto-inc-dec.c (merge_in_block): Allow autoinc in jumps unless"}, {"sha": "eecf5c6cf1cf7f291ba13d9c5bb47c7ac8f66d27", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3f923b0d5c2cb087840db55a7578c9b363276b/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3f923b0d5c2cb087840db55a7578c9b363276b/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=cd3f923b0d5c2cb087840db55a7578c9b363276b", "patch": "@@ -4623,7 +4623,8 @@ reset_debug_bindings (copy_body_data *id, gimple_stmt_iterator gsi)\n /* If STMT is a GIMPLE_CALL, replace it with its inline expansion.  */\n \n static bool\n-expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n+expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id,\n+\t\t    bitmap to_purge)\n {\n   tree use_retvar;\n   tree fn;\n@@ -4768,7 +4769,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n       gimple_call_set_fndecl (stmt, edge->callee->decl);\n       update_stmt (stmt);\n       id->src_node->remove ();\n-      expand_call_inline (bb, stmt, id);\n+      expand_call_inline (bb, stmt, id, to_purge);\n       maybe_remove_unused_call_args (cfun, stmt);\n       return true;\n     }\n@@ -5156,10 +5157,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n     }\n \n   if (purge_dead_abnormal_edges)\n-    {\n-      gimple_purge_dead_eh_edges (return_block);\n-      gimple_purge_dead_abnormal_call_edges (return_block);\n-    }\n+    bitmap_set_bit (to_purge, return_block->index);\n \n   /* If the value of the new expression is ignored, that's OK.  We\n      don't warn about this for CALL_EXPRs, so we shouldn't warn about\n@@ -5197,7 +5195,8 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n    in a MODIFY_EXPR.  */\n \n static bool\n-gimple_expand_calls_inline (basic_block bb, copy_body_data *id)\n+gimple_expand_calls_inline (basic_block bb, copy_body_data *id,\n+\t\t\t    bitmap to_purge)\n {\n   gimple_stmt_iterator gsi;\n   bool inlined = false;\n@@ -5209,7 +5208,7 @@ gimple_expand_calls_inline (basic_block bb, copy_body_data *id)\n \n       if (is_gimple_call (stmt)\n \t  && !gimple_call_internal_p (stmt))\n-\tinlined |= expand_call_inline (bb, stmt, id);\n+\tinlined |= expand_call_inline (bb, stmt, id, to_purge);\n     }\n \n   return inlined;\n@@ -5222,6 +5221,7 @@ gimple_expand_calls_inline (basic_block bb, copy_body_data *id)\n static void\n fold_marked_statements (int first, hash_set<gimple *> *statements)\n {\n+  auto_bitmap to_purge;\n   for (; first < last_basic_block_for_fn (cfun); first++)\n     if (BASIC_BLOCK_FOR_FN (cfun, first))\n       {\n@@ -5233,7 +5233,8 @@ fold_marked_statements (int first, hash_set<gimple *> *statements)\n \t  if (statements->contains (gsi_stmt (gsi)))\n \t    {\n \t      gimple *old_stmt = gsi_stmt (gsi);\n-\t      tree old_decl = is_gimple_call (old_stmt) ? gimple_call_fndecl (old_stmt) : 0;\n+\t      tree old_decl\n+\t\t= is_gimple_call (old_stmt) ? gimple_call_fndecl (old_stmt) : 0;\n \n \t      if (old_decl && fndecl_built_in_p (old_decl))\n \t\t{\n@@ -5277,8 +5278,7 @@ fold_marked_statements (int first, hash_set<gimple *> *statements)\n \t\t\t\t is mood anyway.  */\n \t\t\t      if (maybe_clean_or_replace_eh_stmt (old_stmt,\n \t\t\t\t\t\t\t\t  new_stmt))\n-\t\t\t\tgimple_purge_dead_eh_edges (\n-\t\t\t\t  BASIC_BLOCK_FOR_FN (cfun, first));\n+\t\t\t\tbitmap_set_bit (to_purge, first);\n \t\t\t      break;\n \t\t\t    }\n \t\t\t  gsi_next (&i2);\n@@ -5298,11 +5298,11 @@ fold_marked_statements (int first, hash_set<gimple *> *statements)\n \t\t\t\t\t\t       new_stmt);\n \n \t\t  if (maybe_clean_or_replace_eh_stmt (old_stmt, new_stmt))\n-\t\t    gimple_purge_dead_eh_edges (BASIC_BLOCK_FOR_FN (cfun,\n-\t\t\t\t\t\t\t\t    first));\n+\t\t    bitmap_set_bit (to_purge, first);\n \t\t}\n \t    }\n       }\n+  gimple_purge_all_dead_eh_edges (to_purge);\n }\n \n /* Expand calls to inline functions in the body of FN.  */\n@@ -5348,8 +5348,9 @@ optimize_inline_calls (tree fn)\n      will split id->current_basic_block, and the new blocks will\n      follow it; we'll trudge through them, processing their CALL_EXPRs\n      along the way.  */\n+  auto_bitmap to_purge;\n   FOR_EACH_BB_FN (bb, cfun)\n-    inlined_p |= gimple_expand_calls_inline (bb, &id);\n+    inlined_p |= gimple_expand_calls_inline (bb, &id, to_purge);\n \n   pop_gimplify_context (NULL);\n \n@@ -5369,6 +5370,21 @@ optimize_inline_calls (tree fn)\n   fold_marked_statements (last, id.statements_to_fold);\n   delete id.statements_to_fold;\n \n+  /* Finally purge EH and abnormal edges from the call stmts we inlined.\n+     We need to do this after fold_marked_statements since that may walk\n+     the SSA use-def chain.  */\n+  unsigned i;\n+  bitmap_iterator bi;\n+  EXECUTE_IF_SET_IN_BITMAP (to_purge, 0, i, bi)\n+    {\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n+      if (bb)\n+\t{\n+\t  gimple_purge_dead_eh_edges (bb);\n+\t  gimple_purge_dead_abnormal_call_edges (bb);\n+\t}\n+    }\n+\n   gcc_assert (!id.debug_stmts.exists ());\n \n   /* If we didn't inline into the function there is nothing to do.  */"}]}