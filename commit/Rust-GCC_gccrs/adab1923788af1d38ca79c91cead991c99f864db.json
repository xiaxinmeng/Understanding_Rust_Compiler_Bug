{"sha": "adab1923788af1d38ca79c91cead991c99f864db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRhYjE5MjM3ODhhZjFkMzhjYTc5YzkxY2VhZDk5MWM5OWY4NjRkYg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2000-06-14T19:04:08Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-06-14T19:04:08Z"}, "message": "* g++.old-deja/g++.other/inline12.C: New test.\n\nFrom-SVN: r34554", "tree": {"sha": "0a8423faf227562ebbca8e2ecac3ddc824a1cb4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a8423faf227562ebbca8e2ecac3ddc824a1cb4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adab1923788af1d38ca79c91cead991c99f864db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adab1923788af1d38ca79c91cead991c99f864db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adab1923788af1d38ca79c91cead991c99f864db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adab1923788af1d38ca79c91cead991c99f864db/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d54a1dc526ce1c1e59447eccedf67ea354e3dc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d54a1dc526ce1c1e59447eccedf67ea354e3dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d54a1dc526ce1c1e59447eccedf67ea354e3dc7"}], "stats": {"total": 330, "additions": 330, "deletions": 0}, "files": [{"sha": "64c98bea5927248b2b941164ac16389955e64914", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adab1923788af1d38ca79c91cead991c99f864db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adab1923788af1d38ca79c91cead991c99f864db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=adab1923788af1d38ca79c91cead991c99f864db", "patch": "@@ -1,3 +1,7 @@\n+2000-06-14  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* g++.old-deja/g++.other/inline12.C: New test.\n+\n 2000-06-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.old-deja/g++.other/eh1.C: New test."}, {"sha": "b853db1090e4dcb8193e00c3d4a3c5b0e29a20e3", "filename": "gcc/testsuite/g++.old-deja/g++.other/inline12.C", "status": "added", "additions": 326, "deletions": 0, "changes": 326, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adab1923788af1d38ca79c91cead991c99f864db/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adab1923788af1d38ca79c91cead991c99f864db/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline12.C?ref=adab1923788af1d38ca79c91cead991c99f864db", "patch": "@@ -0,0 +1,326 @@\n+// Build don't link:\n+// Special g++ Options: -O2 -g\n+// (Should preferrably cycle through options.)\n+// Origin: Hans-Peter Nilsson <hp@axis.com>\n+// See <URL:http://gcc.gnu.org/ml/gcc-patches/2000-06/msg00310.html>\n+\n+typedef unsigned int    udword;\n+extern \"C\" {\n+void __assert (const char *, int, const char *);\n+}\n+class ShZzy;\n+class ShBe;\n+class Sh\n+{\n+ public:\n+  class Xy;\n+  inline  Sh(const char*      theName,\n+               const Xy& theXys);\n+  virtual ~Sh();\n+  inline const char* name() const;\n+  inline bool        shXy(const Xy& theXy);\n+  virtual void       setParent(Sh* theParent);\n+  class Xy\n+  {\n+   public:\n+    Xy(int   theXy);\n+    Xy(const Xy& theXy);\n+    Xy& operator = (const Xy&);\n+    bool sh(const Xy& theXy);\n+   private:\n+    int  myXyFlags;\n+  };\n+ protected:\n+  Xy     myXys;\n+ private:\n+  Sh();\n+  Sh(const Sh&);\n+  Sh& operator = (const Sh&);\n+  const char*   myName;\n+  Sh*         myParent;\n+};\n+class ShZzy : public Sh \n+{\n+ public:\n+  inline ShZzy(const char* theName);\n+  inline ShZzy(const char* theName,\n+                   const Xy& theXys);\n+  virtual ~ShZzy();\n+  void         addShTo(char* theParent);\n+  virtual void ap() {}\n+  void         addSh(Sh* theSh);\n+  virtual void setParent(Sh* theParent);\n+  void         baseAp();\n+ private:\n+  ShZzy();\n+  ShZzy(const ShZzy&);\n+  ShZzy& operator = (const ShZzy&);\n+  bool          iAmInited;\n+};\n+class ShBop\n+{\n+ public:\n+  inline ShBop(const ShBe* theBe);\n+  void            shWw(bool,\n+                                char* a1 = \"\",\n+                                char* a2 = \"\",\n+                                int   a3 = -1,\n+                                char* a4 = \"foo\");\n+  typedef enum { shOk,\n+                 shFailed,\n+                 shDone,\n+                 invalidBop } bopType;\n+  inline bopType bop();\n+  inline int        numberOfVs();\n+  inline void       closeBop();\n+ private:\n+  ShBop(const ShBop&);\n+  ShBop& operator = (const ShBop&);\n+  const ShBe*  myBe;\n+  bopType       myBop;\n+  int              my1;\n+  int              my2;\n+  const char*      my3;\n+  const char*      my4;\n+  int              my5;\n+  const char*      my6;\n+};\n+Sh::Sh(const char* theName,\n+           const Xy& theXys)\n+  :myXys(theXys),\n+   myName(theName),\n+   myParent(0)\n+{}\n+const char*\n+Sh::name() const\n+{\n+  return myName;\n+}\n+bool\n+Sh::shXy(const Xy& theXy)\n+{\n+  return myXys.sh(theXy);\n+}\n+ShZzy::ShZzy(const char* theName)\n+  :Sh(theName, Xy(0)),\n+   iAmInited(false)\n+{}\n+ShZzy::ShZzy(const char* theName,\n+                     const Xy& theXys)\n+  :Sh(theName, theXys),\n+   iAmInited(false)\n+{}\n+ShBop::ShBop(const ShBe* theBe)\n+  :myBe(theBe),\n+   myBop(invalidBop),\n+   my1(0),\n+   my2(0),\n+   my3(\"\"),\n+   my4(\"\"),\n+   my5(0),\n+   my6(\"\")\n+{}\n+ShBop::bopType\n+ShBop::bop()\n+{\n+  ((!my2 || myBop == shFailed) ? (void)0 : __assert(\"foo\", 91,\"foo\"));\n+  return myBop;\n+}\n+int\n+ShBop::numberOfVs()\n+{\n+  return my2 + my1;\n+}\n+void\n+ShBop::closeBop()\n+{\n+  if (myBop == invalidBop)\n+  {\n+    myBop = shDone;\n+  }\n+}\n+class ShBe;\n+template <class ShCc>\n+class ShAp : public ShZzy\n+{\n+ public:\n+  ShAp(const char* theName);\n+  ShAp(const char* theName,\n+                const Xy& theXys);\n+  virtual ~ShAp() {}\n+  typedef void (ShCc::*ShMethod)();\n+  virtual void ap() {}\n+ protected:\n+  ShBop* bop();\n+ private:\n+  ShAp();\n+  ShAp(const ShAp&);\n+  ShAp& operator = (const ShAp&);\n+  ShBop* myBop;\n+  ShBe*   myBe;\n+};\n+class ShBe : public Sh\n+{\n+ public:\n+  inline ShBe(const char* theName);\n+  inline ShBe(const char* theName,\n+                  const Xy& theXys);\n+  inline virtual ~ShBe();\n+  virtual void    run() = 0;\n+  ShBop*  runBe();\n+ protected:\n+  inline ShBop* bop();\n+ private:\n+  ShBe();\n+  ShBe(const ShBe&);\n+  ShBe& operator = (const ShBe&);\n+  ShBop* myBop;\n+};\n+template <class ShCc> \n+ShAp<ShCc>::ShAp(const char* theName)\n+  : ShZzy(theName),\n+    myBop(0),\n+    myBe(0)\n+{}\n+template <class ShCc> \n+ShAp<ShCc>::ShAp(const char* theName,\n+                                   const Sh::Xy& theXys)\n+  : ShZzy(theName, theXys),\n+    myBop(0),\n+    myBe(0)\n+{}\n+template <class ShCc>\n+ShBop*\n+ShAp<ShCc>::bop()\n+{\n+  ((myBop) ? (void)0 : __assert(\"foo\", 96,\"foo\"));\n+  return myBop;\n+}\n+class xSh : public ShAp<xSh>\n+{\n+ public:\n+  xSh();\n+  virtual ~xSh();\n+  void ap();\n+  void uff();\n+  void rtt();\n+};\n+class xUff\n+{\n+ public:\n+  xUff();\n+  xUff(const xUff&);\n+  xUff& operator = (const xUff&);\n+  xUff(udword);\n+  operator udword() const;\n+  xUff& operator = (udword);\n+  bool operator < (const xUff) const;\n+  bool operator <= (const xUff) const;\n+  bool operator > (const xUff) const;\n+  bool operator >= (const xUff) const;\n+  bool operator == (const xUff) const;\n+  enum {size = 4};\n+  xUff(unsigned char* theUff);\n+ private:\n+  udword myUff;\n+};\n+inline\n+xUff::xUff()\n+  : myUff(0)\n+{\n+}\n+inline\n+xUff::xUff(udword theUff)\n+  : myUff(theUff)\n+{\n+}\n+inline\n+xUff::xUff(\n+  const xUff& theUff)\n+  : myUff(theUff.myUff)\n+{\n+}\n+inline xUff&\n+xUff::operator = (const xUff& theUff)\n+{\n+  myUff = theUff.myUff;\n+  return *this;\n+}\n+inline xUff&\n+xUff::operator = (udword theUff)\n+{\n+  myUff = theUff;\n+  return *this; \n+}\n+inline\n+xUff::operator udword() const\n+{\n+  return myUff;\n+}\n+inline bool\n+xUff::operator < (const xUff ding) const\n+{\n+  return (((int) (myUff - ding.myUff)) < 0);\n+}\n+inline bool\n+xUff::operator <= (const xUff ding) const\n+{\n+  return (((int) (myUff - ding.myUff)) <= 0);\n+}\n+inline bool\n+xUff::operator > (const xUff ding) const\n+{\n+  return (((int) (myUff - ding.myUff)) > 0);\n+}\n+inline bool\n+xUff::operator >= (const xUff ding) const\n+{\n+  return (((int) (myUff - ding.myUff)) >= 0);\n+}\n+inline bool\n+xUff::operator == (const xUff ding) const\n+{\n+  return (myUff == ding.myUff);\n+}\n+inline\n+xUff::xUff(unsigned char* theUff)\n+{\n+  myUff = *(udword *)theUff;\n+}\n+void\n+xSh::uff()\n+{\n+  static const udword halfudword = 0x80000000;\n+  xUff aGah((udword)0);\n+  udword diagonal = halfudword + (udword) aGah;\n+  xUff aGeh(diagonal - 1);\n+  xUff aGoh(diagonal + 1);\n+  (bop()->shWw ((aGah.operator <=(aGah)), (\"foo\"), ( \"\"), 118, \"foo\"));\n+  (bop()->shWw ((aGah.operator >=(aGah)), (\"foo\"), ( \"\"), 119, \"foo\"));\n+  (bop()->shWw ((!(aGah.operator <(aGah))), (\"foo\"), ( \"\"), 120, \"foo\"));\n+  (bop()->shWw ((!(aGah.operator >(aGah))), (\"foo\"), ( \"\"), 121, \"foo\"));\n+  (bop()->shWw ((aGah.operator <(aGeh)), (\"foo\"), ( \"\"), 124, \"foo\"));\n+  (bop()->shWw ((aGah.operator <=(aGeh)), (\"foo\"), ( \"\"), 125, \"foo\"));\n+  (bop()->shWw ((!(aGah.operator >(aGeh))), (\"foo\"), ( \"\"), 126, \"foo\"));\n+  (bop()->shWw ((!(aGah.operator >=(aGeh))), (\"foo\"), ( \"\"), 127, \"foo\"));\n+  (bop()->shWw ((aGeh.operator >(aGah)), (\"foo\"), ( \"\"), 130, \"foo\"));\n+  (bop()->shWw ((aGeh.operator >=(aGah)), (\"foo\"), ( \"\"), 131, \"foo\"));\n+  (bop()->shWw ((!(aGeh.operator <(aGah))), (\"foo\"), ( \"\"), 132, \"foo\"));\n+  (bop()->shWw ((!(aGeh.operator <=(aGah))), (\"foo\"), ( \"\"), 133, \"foo\"));\n+  (bop()->shWw ((aGeh.operator <(aGoh)), (\"foo\"), ( \"\"), 136, \"foo\"));\n+  (bop()->shWw ((aGeh.operator <=(aGoh)), (\"foo\"), ( \"\"), 137, \"foo\"));\n+  (bop()->shWw ((!(aGeh.operator >(aGoh))), (\"foo\"), ( \"\"), 138, \"foo\"));\n+  (bop()->shWw ((!(aGeh.operator >=(aGoh))), (\"foo\"), ( \"\"), 139, \"foo\"));\n+  (bop()->shWw ((aGoh.operator >(aGeh)), (\"foo\"), ( \"\"), 142, \"foo\"));\n+  (bop()->shWw ((aGoh.operator >=(aGeh)), (\"foo\"), ( \"\"), 143, \"foo\"));\n+  (bop()->shWw ((!(aGoh.operator <(aGeh))), (\"foo\"), ( \"\"), 144, \"foo\"));\n+  (bop()->shWw ((!(aGoh.operator <=(aGeh))), (\"foo\"), ( \"\"), 145, \"foo\"));\n+  (bop()->shWw ((aGah.operator >(aGoh)), (\"foo\"), ( \"\"), 152, \"foo\"));\n+  (bop()->shWw ((aGah.operator >=(aGoh)), (\"foo\"), ( \"\"), 153, \"foo\"));\n+  (bop()->shWw ((!(aGah.operator <(aGoh))), (\"foo\"), ( \"\"), 154, \"foo\"));\n+  (bop()->shWw ((!(aGah.operator <=(aGoh))), (\"foo\"), ( \"\"), 155, \"foo\"));\n+  (bop()->shWw ((aGoh.operator <(aGah)), (\"foo\"), ( \"\"), 158, \"foo\"));\n+  (bop()->shWw ((aGoh.operator <=(aGah)), (\"foo\"), ( \"\"), 159, \"foo\"));\n+  (bop()->shWw ((!(aGoh.operator >(aGah))), (\"foo\"), ( \"\"), 160, \"foo\"));\n+  (bop()->shWw ((!(aGoh.operator >=(aGah))), (\"foo\"), ( \"\"), 161, \"foo\"));\n+}"}]}