{"sha": "21f14ff9556fb50f0280bcb570d87cd08d367774", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFmMTRmZjk1NTZmYjUwZjAyODBiY2I1NzBkODdjZDA4ZDM2Nzc3NA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2007-01-26T01:15:05Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2007-01-26T01:15:05Z"}, "message": "reload1.c (choose_reload_regs): Check for invalid subregs before computing their locations, not after.\n\n* reload1.c (choose_reload_regs): Check for invalid subregs before\ncomputing their locations, not after.\n\nFrom-SVN: r121198", "tree": {"sha": "e94bef205fa07071eecbd388e4cc4f6dec008a79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e94bef205fa07071eecbd388e4cc4f6dec008a79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21f14ff9556fb50f0280bcb570d87cd08d367774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f14ff9556fb50f0280bcb570d87cd08d367774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21f14ff9556fb50f0280bcb570d87cd08d367774", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f14ff9556fb50f0280bcb570d87cd08d367774/comments", "author": null, "committer": null, "parents": [{"sha": "e8589103525d84febbc25064828b36734a643100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8589103525d84febbc25064828b36734a643100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8589103525d84febbc25064828b36734a643100"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "4cf04ef2a001695e9f93003bceb749a9bc3b8b0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f14ff9556fb50f0280bcb570d87cd08d367774/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f14ff9556fb50f0280bcb570d87cd08d367774/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21f14ff9556fb50f0280bcb570d87cd08d367774", "patch": "@@ -1,3 +1,8 @@\n+2007-01-25  DJ Delorie  <dj@redhat.com>\n+\n+\t* reload1.c (choose_reload_regs): Check for invalid subregs before\n+\tcomputing their locations, not after.\n+\n 2007-01-25  Geoffrey Keating  <geoffk@apple.com>\n \n \tPR 25127"}, {"sha": "5598b7afdba57ab113996a3ad25589dc2b472a10", "filename": "gcc/reload1.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f14ff9556fb50f0280bcb570d87cd08d367774/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f14ff9556fb50f0280bcb570d87cd08d367774/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=21f14ff9556fb50f0280bcb570d87cd08d367774", "patch": "@@ -5653,7 +5653,16 @@ choose_reload_regs (struct insn_chain *chain)\n \t\tregno = subreg_regno (rld[r].in);\n #endif\n \n-\t      if (regno >= 0 && reg_last_reload_reg[regno] != 0)\n+\t      if (regno >= 0\n+\t\t  && reg_last_reload_reg[regno] != 0\n+#ifdef CANNOT_CHANGE_MODE_CLASS\n+\t\t  /* Verify that the register it's in can be used in\n+\t\t     mode MODE.  */\n+\t\t  && !REG_CANNOT_CHANGE_MODE_P (REGNO (reg_last_reload_reg[regno]),\n+\t\t\t\t\t\tGET_MODE (reg_last_reload_reg[regno]),\n+\t\t\t\t\t\tmode)\n+#endif\n+\t\t  )\n \t\t{\n \t\t  enum reg_class class = rld[r].class, last_class;\n \t\t  rtx last_reg = reg_last_reload_reg[regno];\n@@ -5673,13 +5682,6 @@ choose_reload_regs (struct insn_chain *chain)\n \n \t\t  if ((GET_MODE_SIZE (GET_MODE (last_reg))\n \t\t       >= GET_MODE_SIZE (need_mode))\n-#ifdef CANNOT_CHANGE_MODE_CLASS\n-\t\t      /* Verify that the register in \"i\" can be obtained\n-\t\t\t from LAST_REG.  */\n-\t\t      && !REG_CANNOT_CHANGE_MODE_P (REGNO (last_reg),\n-\t\t\t\t\t\t    GET_MODE (last_reg),\n-\t\t\t\t\t\t    mode)\n-#endif\n \t\t      && reg_reloaded_contents[i] == regno\n \t\t      && TEST_HARD_REG_BIT (reg_reloaded_valid, i)\n \t\t      && HARD_REGNO_MODE_OK (i, rld[r].mode)"}]}