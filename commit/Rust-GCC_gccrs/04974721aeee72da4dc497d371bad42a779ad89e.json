{"sha": "04974721aeee72da4dc497d371bad42a779ad89e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5NzQ3MjFhZWVlNzJkYTRkYzQ5N2QzNzFiYWQ0MmE3NzlhZDg5ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-25T18:32:15Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-15T11:41:56Z"}, "message": "[Ada] Small adjustment to parameterization of System.Value_R\n\ngcc/ada/\n\n\t* doc/gnat_ugn/gnat_and_program_execution.rst: Minor fix.\n\t* gnat_ugn.texi: Regenerate.\n\t* libgnat/s-valuer.ads (Precision_Limit): New formal parameter.\n\t* libgnat/s-valuer.adb (Precision_Limit): Remove.\n\t(Scan_Decimal_Digits): Robustify overflow check.\n\t(Scan_Integral_Digits): Likewise.\n\t* libgnat/s-valrea.adb: Add assertion on the size of the unsigned\n\ttype and instantiate System.Value_R with the mantissa limit.\n\t(Integer_to_Real): Add Extra parameter and take it into account.\n\t(Scan_Real): Pass Extra to Integer_to_Real.\n\t(Value_Real): Likewise.\n\t* libgnat/s-valued.adb: Add assertion on the size of the unsigned\n\ttype and instantiate System.Value_R with the mantissa limit.\n\t* libgnat/s-valuef.adb: Likewise.", "tree": {"sha": "e47cdfac5d02b850f3688b7e7373fbd70bd81465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e47cdfac5d02b850f3688b7e7373fbd70bd81465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04974721aeee72da4dc497d371bad42a779ad89e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04974721aeee72da4dc497d371bad42a779ad89e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04974721aeee72da4dc497d371bad42a779ad89e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04974721aeee72da4dc497d371bad42a779ad89e/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1023434a8dd3ce2281a726d30ef370caa425252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1023434a8dd3ce2281a726d30ef370caa425252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1023434a8dd3ce2281a726d30ef370caa425252"}], "stats": {"total": 77, "additions": 54, "deletions": 23}, "files": [{"sha": "c4f186ef1306038b91a912b2f38fec395a7f4ed4", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=04974721aeee72da4dc497d371bad42a779ad89e", "patch": "@@ -1840,7 +1840,7 @@ improves performance for your program.\n \n .. _Floating_Point_Operations:\n \n-Floating_Point_Operations\n+Floating Point Operations\n ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n .. index:: Floating-Point Operations"}, {"sha": "2efa06f0948039a7d558ec9860c1da8cd76da9a6", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=04974721aeee72da4dc497d371bad42a779ad89e", "patch": "@@ -381,7 +381,7 @@ Performance Considerations\n * Optimization Levels:: \n * Debugging Optimized Code:: \n * Inlining of Subprograms:: \n-* Floating_Point_Operations:: \n+* Floating Point Operations:: \n * Vectorization of loops:: \n * Other Optimization Switches:: \n * Optimization and Strict Aliasing:: \n@@ -19652,7 +19652,7 @@ some guidelines on debugging optimized code.\n * Optimization Levels:: \n * Debugging Optimized Code:: \n * Inlining of Subprograms:: \n-* Floating_Point_Operations:: \n+* Floating Point Operations:: \n * Vectorization of loops:: \n * Other Optimization Switches:: \n * Optimization and Strict Aliasing:: \n@@ -20001,7 +20001,7 @@ Note that if you use @code{-g} you can then use the @code{strip} program\n on the resulting executable,\n which removes both debugging information and global symbols.\n \n-@node Inlining of Subprograms,Floating_Point_Operations,Debugging Optimized Code,Performance Considerations\n+@node Inlining of Subprograms,Floating Point Operations,Debugging Optimized Code,Performance Considerations\n @anchor{gnat_ugn/gnat_and_program_execution id32}@anchor{185}@anchor{gnat_ugn/gnat_and_program_execution inlining-of-subprograms}@anchor{100}\n @subsubsection Inlining of Subprograms\n \n@@ -20140,9 +20140,9 @@ automatically assume that @code{-O3} is better than @code{-O2}, and\n indeed you should use @code{-O3} only if tests show that it actually\n improves performance for your program.\n \n-@node Floating_Point_Operations,Vectorization of loops,Inlining of Subprograms,Performance Considerations\n+@node Floating Point Operations,Vectorization of loops,Inlining of Subprograms,Performance Considerations\n @anchor{gnat_ugn/gnat_and_program_execution floating-point-operations}@anchor{186}@anchor{gnat_ugn/gnat_and_program_execution id33}@anchor{187}\n-@subsubsection Floating_Point_Operations\n+@subsubsection Floating Point Operations\n \n \n @geindex Floating-Point Operations\n@@ -20188,7 +20188,7 @@ Note that the ABI has the same form for both floating-point models,\n so it is permissible to mix units compiled with and without these\n switches.\n \n-@node Vectorization of loops,Other Optimization Switches,Floating_Point_Operations,Performance Considerations\n+@node Vectorization of loops,Other Optimization Switches,Floating Point Operations,Performance Considerations\n @anchor{gnat_ugn/gnat_and_program_execution id34}@anchor{188}@anchor{gnat_ugn/gnat_and_program_execution vectorization-of-loops}@anchor{189}\n @subsubsection Vectorization of loops\n "}, {"sha": "1add4e9a6a9f9372cce1299bee698b0a68287ed2", "filename": "gcc/ada/libgnat/s-valrea.adb", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valrea.adb?ref=04974721aeee72da4dc497d371bad42a779ad89e", "patch": "@@ -36,13 +36,20 @@ with System.Value_R;\n \n package body System.Val_Real is\n \n-   package Impl is new Value_R (Uns, Floating => True);\n+   pragma Assert (Num'Machine_Mantissa <= Uns'Size);\n+   --  We need an unsigned type large enough to represent the mantissa\n+\n+   Precision_Limit : constant Uns := 2**Num'Machine_Mantissa - 1;\n+   --  We use the precision of the floating-point type\n+\n+   package Impl is new Value_R (Uns, Precision_Limit, Floating => True);\n \n    function Integer_to_Real\n      (Str   : String;\n       Val   : Uns;\n       Base  : Unsigned;\n       Scale : Integer;\n+      Extra : Unsigned;\n       Minus : Boolean) return Num;\n    --  Convert the real value from integer to real representation\n \n@@ -55,13 +62,15 @@ package body System.Val_Real is\n       Val   : Uns;\n       Base  : Unsigned;\n       Scale : Integer;\n+      Extra : Unsigned;\n       Minus : Boolean) return Num\n    is\n       pragma Assert (Base in 2 .. 16);\n \n       pragma Unsuppress (Range_Check);\n \n       R_Val : Num;\n+      S     : Integer := Scale;\n \n    begin\n       --  We call the floating-point processor reset routine so we can be sure\n@@ -73,12 +82,21 @@ package body System.Val_Real is\n          System.Float_Control.Reset;\n       end if;\n \n-      --  Compute the final value with a single rounding if possible\n+      --  Take into account the extra digit near the limit to avoid anomalies\n+\n+      if Extra > 0 and then Val <= Precision_Limit / Uns (Base) then\n+         R_Val := Num (Val * Uns (Base)) + Num (Extra);\n+         S := S - 1;\n+      else\n+         R_Val := Num (Val);\n+      end if;\n+\n+      --  Compute the final value\n \n-      if Scale < 0 then\n-         R_Val := Num (Val) / Num (Base) ** (-Scale);\n+      if S < 0 then\n+         R_Val := R_Val / Num (Base) ** (-S);\n       else\n-         R_Val := Num (Val) * Num (Base) ** Scale;\n+         R_Val := R_Val * Num (Base) ** S;\n       end if;\n \n       --  Finally deal with initial minus sign, note that this processing is\n@@ -102,14 +120,13 @@ package body System.Val_Real is\n       Base  : Unsigned;\n       Scale : Integer;\n       Extra : Unsigned;\n-      pragma Unreferenced (Extra);\n       Minus : Boolean;\n       Val   : Uns;\n \n    begin\n       Val := Impl.Scan_Raw_Real (Str, Ptr, Max, Base, Scale, Extra, Minus);\n \n-      return Integer_to_Real (Str, Val, Base, Scale, Minus);\n+      return Integer_to_Real (Str, Val, Base, Scale, Extra, Minus);\n    end Scan_Real;\n \n    ----------------\n@@ -120,14 +137,13 @@ package body System.Val_Real is\n       Base  : Unsigned;\n       Scale : Integer;\n       Extra : Unsigned;\n-      pragma Unreferenced (Extra);\n       Minus : Boolean;\n       Val   : Uns;\n \n    begin\n       Val := Impl.Value_Raw_Real (Str, Base, Scale, Extra, Minus);\n \n-      return Integer_to_Real (Str, Val, Base, Scale, Minus);\n+      return Integer_to_Real (Str, Val, Base, Scale, Extra, Minus);\n    end Value_Real;\n \n end System.Val_Real;"}, {"sha": "7986ce3e5c8a29aa409a82c913a7d87ec8663212", "filename": "gcc/ada/libgnat/s-valued.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Flibgnat%2Fs-valued.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Flibgnat%2Fs-valued.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valued.adb?ref=04974721aeee72da4dc497d371bad42a779ad89e", "patch": "@@ -35,7 +35,10 @@ with System.Value_R;\n \n package body System.Value_D is\n \n-   package Impl is new Value_R (Uns, Floating => False);\n+   pragma Assert (Int'Size <= Uns'Size);\n+   --  We need an unsigned type large enough to represent the mantissa\n+\n+   package Impl is new Value_R (Uns, 2**(Int'Size - 1), Floating => False);\n \n    function Integer_to_Decimal\n      (Str    : String;"}, {"sha": "5a87a7f3dfb1d5de70079c739a6d5f923fc4b59d", "filename": "gcc/ada/libgnat/s-valuef.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Flibgnat%2Fs-valuef.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Flibgnat%2Fs-valuef.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuef.adb?ref=04974721aeee72da4dc497d371bad42a779ad89e", "patch": "@@ -43,7 +43,10 @@ package body System.Value_F is\n    --  supported values for the base of the literal. Given that the largest\n    --  supported base is 16, this gives a limit of 2**(Int'Size - 5).\n \n-   package Impl is new Value_R (Uns, Floating => False);\n+   pragma Assert (Int'Size <= Uns'Size);\n+   --  We need an unsigned type large enough to represent the mantissa\n+\n+   package Impl is new Value_R (Uns, 2**(Int'Size - 1), Floating => False);\n \n    function Integer_To_Fixed\n      (Str    : String;"}, {"sha": "9c126cc36226e4c3208aa797d7fe05d813172156", "filename": "gcc/ada/libgnat/s-valuer.adb", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuer.adb?ref=04974721aeee72da4dc497d371bad42a779ad89e", "patch": "@@ -33,9 +33,6 @@ with System.Val_Util; use System.Val_Util;\n \n package body System.Value_R is\n \n-   Precision_Limit : constant Uns := 2 ** (Uns'Size - 1);\n-   --  Limit beyond which additional digits are dropped\n-\n    subtype Char_As_Digit is Unsigned range 0 .. 17;\n    subtype Valid_Digit is Char_As_Digit range 0 .. 15;\n    E_Digit     : constant Char_As_Digit := 14;\n@@ -238,8 +235,13 @@ package body System.Value_R is\n \n                Temp := Value * Uns (Base) + Uns (Digit);\n \n+               --  Check if Temp is larger than Precision_Limit, taking into\n+               --  account that Temp may have wrapped around.\n+\n                if Value <= Umax\n-                 or else (Value <= UmaxB and then Temp <= Precision_Limit)\n+                 or else (Value <= UmaxB\n+                           and then Temp <= Precision_Limit\n+                           and then Temp >= Uns (Base))\n                then\n                   Value := Temp;\n                   Scale := Scale - 1;\n@@ -383,8 +385,13 @@ package body System.Value_R is\n          else\n             Temp := Value * Uns (Base) + Uns (Digit);\n \n+            --  Check if Temp is larger than Precision_Limit, taking into\n+            --  account that Temp may have wrapped around.\n+\n             if Value <= Umax\n-              or else (Value <= UmaxB and then Temp <= Precision_Limit)\n+              or else (Value <= UmaxB\n+                        and then Temp <= Precision_Limit\n+                        and then Temp >= Uns (Base))\n             then\n                Value := Temp;\n "}, {"sha": "06fbe9e2233f44e1656bf38e9df1a31ee439a4ac", "filename": "gcc/ada/libgnat/s-valuer.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Flibgnat%2Fs-valuer.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04974721aeee72da4dc497d371bad42a779ad89e/gcc%2Fada%2Flibgnat%2Fs-valuer.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuer.ads?ref=04974721aeee72da4dc497d371bad42a779ad89e", "patch": "@@ -38,6 +38,8 @@ generic\n \n    type Uns is mod <>;\n \n+   Precision_Limit : Uns;\n+\n    Floating : Boolean;\n \n package System.Value_R is"}]}