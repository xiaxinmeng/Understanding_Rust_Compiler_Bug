{"sha": "b89c561c2d7013aff39f79f727e72c53bd897f47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg5YzU2MWMyZDcwMTNhZmYzOWY3OWY3MjdlNzJjNTNiZDg5N2Y0Nw==", "commit": {"author": {"name": "Lee Millward", "email": "lee.millward@codesourcery.com", "date": "2006-09-02T14:15:37Z"}, "committer": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2006-09-02T14:15:37Z"}, "message": "re PR c++/27670 (ICE on invalid template parameter)\n\n2006-09-02  Lee Millward  <lee.millward@codesourcery.com>\n\n        PR c++/27670\n        PR c++/27493\n        PR c++/27494\n        PR c++/27397\n        * parser.c (cp_parser_template_parameter_list): Add\n        invalid template parameters to the parameter list as\n        error_mark_node.\n\n        * g++.dg/template/operator9.C: New test.\n        * g++.dg/template/operator7.C: New test.\n        * g++.dg/template/operator8.C: New test.\n        * g++.dg/template/crash57.C: New test.\n\n        * g++.dg/template/typedef4.C: Adjust error markers.\n        * g++.dg/template/typedef5.C: Likewise.\n\nFrom-SVN: r116661", "tree": {"sha": "ca49f9f4b70c62c49a617347d679a6b95881680d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca49f9f4b70c62c49a617347d679a6b95881680d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b89c561c2d7013aff39f79f727e72c53bd897f47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89c561c2d7013aff39f79f727e72c53bd897f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b89c561c2d7013aff39f79f727e72c53bd897f47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89c561c2d7013aff39f79f727e72c53bd897f47/comments", "author": null, "committer": null, "parents": [{"sha": "1d3e6248e59e6f7bca2c49ba367de9cc296837de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3e6248e59e6f7bca2c49ba367de9cc296837de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3e6248e59e6f7bca2c49ba367de9cc296837de"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "4568cb28a1b03b41c08fdf4c8c7dbe2260f94b9c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b89c561c2d7013aff39f79f727e72c53bd897f47", "patch": "@@ -1,3 +1,13 @@\n+2006-09-02  Lee Millward  <lee.millward@codesourcery.com>\n+\n+        PR c++/27670\n+        PR c++/27493\n+        PR c++/27494\n+        PR c++/27397\n+        * parser.c (cp_parser_template_parameter_list): Add\n+        invalid template parameters to the parameter list as\n+        error_mark_node.\n+\n 2006-09-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/28878"}, {"sha": "72e1c92056486d5e0eec2abbe2654928c81c9f39", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b89c561c2d7013aff39f79f727e72c53bd897f47", "patch": "@@ -8441,6 +8441,13 @@ cp_parser_template_parameter_list (cp_parser* parser)\n \tparameter_list = process_template_parm (parameter_list,\n \t\t\t\t\t\tparameter,\n \t\t\t\t\t\tis_non_type);\n+      else\n+       {\n+         tree err_parm = build_tree_list (parameter, parameter);\n+         TREE_VALUE (err_parm) = error_mark_node;\n+         parameter_list = chainon (parameter_list, err_parm);\n+       }\n+\n       /* Peek at the next token.  */\n       token = cp_lexer_peek_token (parser->lexer);\n       /* If it's not a `,', we're done.  */"}, {"sha": "a1fdb4eb3142c1c89749f21bb7de803db7ca3a67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b89c561c2d7013aff39f79f727e72c53bd897f47", "patch": "@@ -1,3 +1,20 @@\n+2006-09-02  Lee Millward  <lee.millward@codesourcery.com>\n+\n+        PR c+/27670\n+        * g++.dg/template/operator9.C: New test.\n+\n+        PR c++/27493\n+        * g++.dg/template/operator7.C: New test.\n+\n+        PR c++/27494\n+        * g++.dg/template/operator8.C: New test.\n+\n+        PR c++/27397\n+        * g++.dg/template/crash57.C: New test.\n+\n+        * g++.dg/template/typedef4.C: Adjust error markers.\n+        * g++.dg/template/typedef5.C: Likewise.\n+\t\n 2006-09-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/28878"}, {"sha": "cf1c3c2961de4db0b59e466c5ddab8c864be19df", "filename": "gcc/testsuite/g++.dg/template/crash57.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash57.C?ref=b89c561c2d7013aff39f79f727e72c53bd897f47", "patch": "@@ -0,0 +1,10 @@\n+//PR c++/27397\n+\n+template<int(> struct A;        // { dg-error \"token\" }\n+\n+template<typename> struct B\n+{\n+    template<int(> struct C;    // { dg-error \"token\" }\n+};\n+\n+A<char> a;                      // { dg-error \"type/value mismatch|constant|declaration\" }"}, {"sha": "bd733da4d3021a9358dbeeb2072210bf765964cb", "filename": "gcc/testsuite/g++.dg/template/operator7.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator7.C?ref=b89c561c2d7013aff39f79f727e72c53bd897f47", "patch": "@@ -0,0 +1,6 @@\n+//PR c++/27493\n+\n+template<operator T> void foo()         // { dg-error \"before|template\" }\n+{\n+  struct A {};\n+}"}, {"sha": "a7f9856778af2516b2a0da9b260a993ebfcdf360", "filename": "gcc/testsuite/g++.dg/template/operator8.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator8.C?ref=b89c561c2d7013aff39f79f727e72c53bd897f47", "patch": "@@ -0,0 +1,12 @@\n+//PR c++/27494\n+\n+struct A\n+{\n+    template<operator+> void foo() {}   // { dg-error \"identifier|non-function|template arguments\" }\n+};\n+ \n+struct B\n+{\n+    template<operator> void foo() {}    // { dg-error \"identifier|non-function|'void'\" }\n+    template<int> void bar() {}         // { dg-error \"template arguments\" }\n+};"}, {"sha": "dfd491d4f04be697e560f20443b3b1f48b76325e", "filename": "gcc/testsuite/g++.dg/template/operator9.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator9.C?ref=b89c561c2d7013aff39f79f727e72c53bd897f47", "patch": "@@ -0,0 +1,9 @@\n+//PR c++/27670\n+\n+template<operator+> void foo(); // { dg-error \"before|non-function|template\" }\n+\n+void bar()\n+{\n+  foo();                        // { dg-error \"no matching function\" }\n+}\n+ "}, {"sha": "2676d8fec1df467097d3fe1ab3c0709c49909e34", "filename": "gcc/testsuite/g++.dg/template/typedef4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef4.C?ref=b89c561c2d7013aff39f79f727e72c53bd897f47", "patch": "@@ -1,7 +1,7 @@\n // PR c++/27572\n // { dg-do compile }\n \n-template<typedef> void foo();  // { dg-error \"no type|typedef declaration\" }\n+template<typedef> void foo();  // { dg-error \"no type|typedef declaration|template\" }\n \n void bar()\n {"}, {"sha": "abd9ebb57cfe6625d44bf5c2e76b08912be161d3", "filename": "gcc/testsuite/g++.dg/template/typedef5.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89c561c2d7013aff39f79f727e72c53bd897f47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef5.C?ref=b89c561c2d7013aff39f79f727e72c53bd897f47", "patch": "@@ -1,7 +1,7 @@\n // PR c++/27572\n // { dg-do compile }\n \n-template<typedef,int>        struct A1; // { dg-error \"no type|typedef declaration\" }\n-template<typedef x,int>      struct A2; // { dg-error \"no type|typedef declaration\" }\n-template<typedef x[],int>    struct A3; // { dg-error \"no type|typedef declaration\" }\n-template<typedef int x, int> struct A4; // { dg-error \"typedef declaration\" }\n+template<typedef,int>        struct A1; // { dg-error \"no type|typedef declaration|default argument\" }\n+template<typedef x,int>      struct A2; // { dg-error \"no type|typedef declaration|default argument\" }\n+template<typedef x[],int>    struct A3; // { dg-error \"no type|typedef declaration|default argument\" }\n+template<typedef int x, int> struct A4; // { dg-error \"typedef declaration|default argument\" }"}]}