{"sha": "9c606f693ddca43b89097388cfdeeffaead030df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2MDZmNjkzZGRjYTQzYjg5MDk3Mzg4Y2ZkZWVmZmFlYWQwMzBkZg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@cygnus.com", "date": "1998-06-25T14:11:54Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1998-06-25T14:11:54Z"}, "message": "[multiple changes]\n\nThu Jun 25 16:59:18 EDT 1998  Andrew MacLeod  <amacleod@cygnus.com>\n\t* except.h (CATCH_ALL_TYPE): Definition moved to eh-common.h.\n\t(find_all_handler_type_matches): Add function prototype.\n\t* eh-common.h (CATCH_ALL_TYPE): Definition added.\n\t* except.c (find_all_handler_type_matches): Add function to find all\n\truntime type info in the exception table.\n\t(output_exception_table_entry): Special case for CATCH_ALL_TYPE.\n1998-06-25  Andrew MacLeod  <amacleod@cygnus.com>\n\t* cp-tree.h (mark_all_runtime_matches): Add function prototype.\n\t* except.c (mark_all_runtime_matches): Set TREE_SYMBOL_REFERENCED\n\tflag for all function decls which are in the exception table.\n\t* exception.cc (__cplus_type_matcher): Check for CATCH_ALL_TYPE match.\n\t* decl2.c (finish_file): Call mark_all_runtime_matches to make sure\n\tcode is emitted for any referenced rtti function.\n\nFrom-SVN: r20718", "tree": {"sha": "bb987eafff1d4601db541283435b2bfed1629fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb987eafff1d4601db541283435b2bfed1629fa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c606f693ddca43b89097388cfdeeffaead030df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c606f693ddca43b89097388cfdeeffaead030df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c606f693ddca43b89097388cfdeeffaead030df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c606f693ddca43b89097388cfdeeffaead030df/comments", "author": null, "committer": null, "parents": [{"sha": "296b815223f2a71b7a377af93ea7a599c26f9d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296b815223f2a71b7a377af93ea7a599c26f9d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296b815223f2a71b7a377af93ea7a599c26f9d18"}], "stats": {"total": 130, "additions": 126, "deletions": 4}, "files": [{"sha": "7360bff192f33afa4c022f53ba338d9e421647e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c606f693ddca43b89097388cfdeeffaead030df", "patch": "@@ -1,3 +1,12 @@\n+Thu Jun 25 16:59:18 EDT 1998  Andrew MacLeod  <amacleod@cygnus.com>\n+\n+\t* except.h (CATCH_ALL_TYPE): Definition moved to eh-common.h.\n+\t(find_all_handler_type_matches): Add function prototype.\n+\t* eh-common.h (CATCH_ALL_TYPE): Definition added.\n+\t* except.c (find_all_handler_type_matches): Add function to find all\n+\truntime type info in the exception table.\n+\t(output_exception_table_entry): Special case for CATCH_ALL_TYPE.\n+\n Thu Jun 25 15:47:55 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (xcoffout.o): Depend on toplev.h, output.h and dbxout.h."}, {"sha": "0934e2a05446c31df4b736603235a8c075a30c4b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c606f693ddca43b89097388cfdeeffaead030df", "patch": "@@ -1,3 +1,12 @@\n+1998-06-25  Andrew MacLeod  <amacleod@cygnus.com>\n+\n+\t* cp-tree.h (mark_all_runtime_matches): Add function prototype.\n+\t* except.c (mark_all_runtime_matches): Set TREE_SYMBOL_REFERENCED\n+\tflag for all function decls which are in the exception table. \n+\t* exception.cc (__cplus_type_matcher): Check for CATCH_ALL_TYPE match.\n+\t* decl2.c (finish_file): Call mark_all_runtime_matches to make sure\n+\tcode is emitted for any referenced rtti function.\n+\n 1998-06-25  Dave Brolley  <brolley@cygnus.com>\n \n \t* lang-specs.h: Use new | syntax to eliminate"}, {"sha": "1e0a4b2642d4be12d5bb32f3df4a7d78a88dfd19", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9c606f693ddca43b89097388cfdeeffaead030df", "patch": "@@ -2523,6 +2523,7 @@ extern tree start_anon_func\t\t\tPROTO((void));\n extern void end_anon_func\t\t\tPROTO((void));\n extern void expand_throw\t\t\tPROTO((tree));\n extern tree build_throw\t\t\t\tPROTO((tree));\n+extern void mark_all_runtime_matches            PROTO((void));\n \n /* in expr.c */\n extern void init_cplus_expand\t\t\tPROTO((void));"}, {"sha": "f1f83b4ec07d4ee279f76059ae9cffbaa8b33470", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9c606f693ddca43b89097388cfdeeffaead030df", "patch": "@@ -3257,6 +3257,8 @@ finish_file ()\n       import_export_decl (decl);\n     }\n \n+  mark_all_runtime_matches ();\n+\n   /* Now write out inline functions which had their addresses taken and\n      which were not declared virtual and which were not declared `extern\n      inline'.  */"}, {"sha": "4139dfdaeb0e799259d7ff8e76e44953cec5e31e", "filename": "gcc/cp/except.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=9c606f693ddca43b89097388cfdeeffaead030df", "patch": "@@ -472,6 +472,34 @@ build_eh_type (exp)\n   return build_eh_type_type (TREE_TYPE (exp));\n }\n \n+/* This routine is called to mark all the symbols representing runtime\n+   type functions in the exception table as haveing been referenced.\n+   This will make sure code is emitted for them. Called from finish_file. */\n+void \n+mark_all_runtime_matches () \n+{\n+  int x,num;\n+  void **ptr;\n+  tree exp;\n+  \n+  num = find_all_handler_type_matches (&ptr);\n+  if (num == 0 || ptr == NULL)\n+    return;\n+  \n+  for (x=0; x <num; x++)\n+    {\n+      exp = (tree) ptr[x];\n+      if (TREE_CODE (exp) == ADDR_EXPR)\n+        {\n+          exp = TREE_OPERAND (exp, 0);\n+          if (TREE_CODE (exp) == FUNCTION_DECL)\n+            TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (exp)) = 1;\n+        }\n+    }\n+  \n+  free (ptr);\n+}\n+\n /* Build up a call to __cp_pop_exception, to destroy the exception object\n    for the current catch block.  HANDLER is either true or false, telling\n    the library whether or not it is being called from an exception handler;\n@@ -721,7 +749,7 @@ process_start_catch_block (declspecs, declarator)\n   if (decl)\n     start_catch_handler (build_eh_type_type_ref (TREE_TYPE (decl)));\n   else\n-    start_catch_handler (NULL_TREE);\n+    start_catch_handler (CATCH_ALL_TYPE);\n \n   emit_line_note (input_filename, lineno);\n "}, {"sha": "4c10404cad822f44f786ef0acf9c46850fbd9639", "filename": "gcc/cp/exception.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fcp%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fcp%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexception.cc?ref=9c606f693ddca43b89097388cfdeeffaead030df", "patch": "@@ -160,6 +160,9 @@ __cplus_type_matcher (cp_eh_info *info, rtimetype match_info,\n   if (exception_table->lang.language != EH_LANG_C_plus_plus)\n     return NULL;\n \n+  if (match_info == CATCH_ALL_TYPE)\n+    return info->value;\n+\n   /* we don't worry about version info yet, there is only one version! */\n   \n   void *match_type = match_info ();"}, {"sha": "143ddff10d7dd96a80bca939011d831608526787", "filename": "gcc/eh-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Feh-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Feh-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Feh-common.h?ref=9c606f693ddca43b89097388cfdeeffaead030df", "patch": "@@ -86,9 +86,14 @@ typedef struct exception_descriptor\n \n typedef void * (*__eh_matcher)          PROTO ((void *, void *, void *));\n \n+/* This value is to be checked as a 'match all' case in the runtime field. */\n+\n+#define CATCH_ALL_TYPE   ((void *) -1)\n+\n /* This is the runtime exception information. This forms the minimum required\n    information for an exception info pointer in an eh_context structure. */\n \n+\n typedef struct __eh_info \n {\n   __eh_matcher match_function;"}, {"sha": "86871d0eea81f8d28d6ff6dda13eb385e09169f3", "filename": "gcc/except.c", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=9c606f693ddca43b89097388cfdeeffaead030df", "patch": "@@ -787,6 +787,66 @@ void remove_handler (removing_label)\n     }\n }\n \n+/* This function will return a malloc'd pointer to an array of \n+   void pointer representing the runtime match values that \n+   currently exist in all regions. */\n+\n+int \n+find_all_handler_type_matches (void ***array)\n+{\n+  struct handler_info *handler, *last;\n+  int x,y;\n+  void *val;\n+  void **ptr;\n+  int max_ptr;\n+  int n_ptr = 0;\n+\n+  *array = NULL;\n+\n+  if (!doing_eh (0) || ! flag_new_exceptions)\n+    return 0;\n+\n+  max_ptr = 100;\n+  ptr = (void **)malloc (max_ptr * sizeof (void *));\n+\n+  if (ptr == NULL)\n+    return 0;\n+\n+  for (x = 0 ; x < current_func_eh_entry; x++)\n+    {\n+      last = NULL;\n+      handler = function_eh_regions[x].handlers;\n+      for ( ; handler; last = handler, handler = handler->next)\n+        {\n+          val = handler->type_info;\n+          if (val != NULL && val != CATCH_ALL_TYPE)\n+            {\n+              /* See if this match value has already been found. */\n+              for (y = 0; y < n_ptr; y++)\n+                if (ptr[y] == val)\n+                  break;\n+\n+              /* If we break early, we already found this value. */\n+              if (y < n_ptr)\n+                continue;\n+\n+              /* Do we need to allocate more space? */\n+              if (n_ptr >= max_ptr) \n+                {\n+                  max_ptr += max_ptr / 2;\n+                  ptr = (void **)realloc (ptr, max_ptr * sizeof (void *));\n+                  if (ptr == NULL)\n+                    return 0;\n+                }\n+              ptr[n_ptr] = val;\n+              n_ptr++;\n+            }\n+        }\n+    }\n+  *array = ptr;\n+  return n_ptr;\n+}\n+\n /* Create a new handler structure initialized with the handler label and\n    typeinfo fields passed in. */\n \n@@ -1852,7 +1912,11 @@ output_exception_table_entry (file, n)\n           if (handler->type_info == NULL)\n             assemble_integer (const0_rtx, POINTER_SIZE / BITS_PER_UNIT, 1);\n           else\n-            output_constant ((tree)(handler->type_info), \n+            if (handler->type_info == CATCH_ALL_TYPE)\n+              assemble_integer (GEN_INT (CATCH_ALL_TYPE), \n+                                             POINTER_SIZE / BITS_PER_UNIT, 1);\n+            else\n+              output_constant ((tree)(handler->type_info), \n                                                 POINTER_SIZE / BITS_PER_UNIT);\n         }\n       putc ('\\n', file);\t\t/* blank line */"}, {"sha": "c08d0c583994be08b9ab344d68df5bb11e863c9b", "filename": "gcc/except.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c606f693ddca43b89097388cfdeeffaead030df/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=9c606f693ddca43b89097388cfdeeffaead030df", "patch": "@@ -161,8 +161,6 @@ void set_exception_version_code                 PROTO((short));\n    exception. NEXT is a pointer to the next handler for this region. \n    NULL means there are no more. */\n \n-#define CATCH_ALL_TYPE   (tree *) -1\n-\n typedef struct handler_info \n {\n   rtx  handler_label;\n@@ -209,6 +207,9 @@ int duplicate_handlers                          PROTO((int, int));\n \n struct handler_info *get_first_handler          PROTO((int));\n \n+/* Find all the runtime handlers type matches currently referenced */\n+\n+int find_all_handler_type_matches               PROTO((void ***));\n \n extern void init_eh\t\t\t\tPROTO((void));\n "}]}