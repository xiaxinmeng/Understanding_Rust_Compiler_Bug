{"sha": "12f0b96b84e334fb3b1d582a19079abdf0fb054f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJmMGI5NmI4NGUzMzRmYjNiMWQ1ODJhMTkwNzlhYmRmMGZiMDU0Zg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2001-04-05T01:43:17Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2001-04-05T01:43:17Z"}, "message": "dwarf2out.c (output_cfi): Add 'for_eh' parameter, use PTR_SIZE instead of DWARF2_ADDR_SIZE for EH addresses.\n\n2001-04-04  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* dwarf2out.c (output_cfi): Add 'for_eh' parameter, use PTR_SIZE\n\tinstead of DWARF2_ADDR_SIZE for EH addresses.\n\t(output_call_frame_info): Use PTR_SIZE instead of DWARF2_ADDR_SIZE for\n\tEH addresses.\n\nFrom-SVN: r41104", "tree": {"sha": "73b8dafd17b14b6dd32023e8993b63a499ff92ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73b8dafd17b14b6dd32023e8993b63a499ff92ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12f0b96b84e334fb3b1d582a19079abdf0fb054f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f0b96b84e334fb3b1d582a19079abdf0fb054f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f0b96b84e334fb3b1d582a19079abdf0fb054f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f0b96b84e334fb3b1d582a19079abdf0fb054f/comments", "author": null, "committer": null, "parents": [{"sha": "41029b884ae16a2fc2b36cedfd20d7a1e68cfdb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41029b884ae16a2fc2b36cedfd20d7a1e68cfdb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41029b884ae16a2fc2b36cedfd20d7a1e68cfdb6"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "e7444c98f67267ebf809c14e7522ecd7d582384a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f0b96b84e334fb3b1d582a19079abdf0fb054f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f0b96b84e334fb3b1d582a19079abdf0fb054f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12f0b96b84e334fb3b1d582a19079abdf0fb054f", "patch": "@@ -1,3 +1,10 @@\n+2001-04-04  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* dwarf2out.c (output_cfi): Add 'for_eh' parameter, use PTR_SIZE \n+\tinstead of DWARF2_ADDR_SIZE for EH addresses.\n+\t(output_call_frame_info): Use PTR_SIZE instead of DWARF2_ADDR_SIZE for \n+\tEH addresses.\n+\n 2001-04-04  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.h (IA64_UNWIND_INFO): Disable."}, {"sha": "6f04c753c260c9bc2de8d1a5894378d32df91349", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f0b96b84e334fb3b1d582a19079abdf0fb054f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f0b96b84e334fb3b1d582a19079abdf0fb054f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=12f0b96b84e334fb3b1d582a19079abdf0fb054f", "patch": "@@ -241,7 +241,7 @@ static void reg_save\t\t\tPARAMS ((const char *, unsigned,\n \t\t\t\t\t\t unsigned, long));\n static void initial_return_save\t\tPARAMS ((rtx));\n static long stack_adjust_offset\t\tPARAMS ((rtx));\n-static void output_cfi\t\t\tPARAMS ((dw_cfi_ref, dw_fde_ref));\n+static void output_cfi\t\t\tPARAMS ((dw_cfi_ref, dw_fde_ref, int));\n static void output_call_frame_info\tPARAMS ((int));\n static void dwarf2out_stack_adjust\tPARAMS ((rtx));\n static void queue_reg_save\t\tPARAMS ((const char *, rtx, long));\n@@ -1614,9 +1614,10 @@ dwarf2out_frame_debug (insn)\n /* Output a Call Frame Information opcode and its operand(s).  */\n \n static void\n-output_cfi (cfi, fde)\n+output_cfi (cfi, fde, for_eh)\n      register dw_cfi_ref cfi;\n      register dw_fde_ref fde;\n+     int for_eh;\n {\n   if (cfi->dw_cfi_opc == DW_CFA_advance_loc)\n     {\n@@ -1648,7 +1649,7 @@ output_cfi (cfi, fde)\n       switch (cfi->dw_cfi_opc)\n \t{\n \tcase DW_CFA_set_loc:\n-\t  dw2_asm_output_addr (DWARF2_ADDR_SIZE, \n+\t  dw2_asm_output_addr ((for_eh ? PTR_SIZE : DWARF2_ADDR_SIZE), \n \t\t\t       cfi->dw_cfi_oprnd1.dw_cfi_addr, NULL);\n \t  break;\n \tcase DW_CFA_advance_loc1:\n@@ -1744,7 +1745,7 @@ output_call_frame_info (for_eh)\n       tree label = get_file_function_name ('F');\n \n       force_data_section ();\n-      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (DWARF2_ADDR_SIZE));\n+      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n       ASM_GLOBALIZE_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n       ASM_OUTPUT_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n #endif\n@@ -1795,19 +1796,20 @@ output_call_frame_info (for_eh)\n \n   if (augmentation[0])\n     {\n-      dw2_asm_output_data_uleb128 (DWARF2_ADDR_SIZE, \"Augmentation size\");\n+      dw2_asm_output_data_uleb128 (PTR_SIZE, \"Augmentation size\");\n       if (eh_personality_libfunc)\n-\tdw2_asm_output_addr_rtx (DWARF2_ADDR_SIZE, eh_personality_libfunc,\n+\tdw2_asm_output_addr_rtx (PTR_SIZE, eh_personality_libfunc,\n \t\t\t\t \"Personality\");\n       else\n-\tdw2_asm_output_data (DWARF2_ADDR_SIZE, 0, \"Personality (none)\");\n+\tdw2_asm_output_data (PTR_SIZE, 0, \"Personality (none)\");\n     }\n \n   for (cfi = cie_cfi_head; cfi != NULL; cfi = cfi->dw_cfi_next)\n-    output_cfi (cfi, NULL);\n+    output_cfi (cfi, NULL, for_eh);\n \n   /* Pad the CIE out to an address sized boundary.  */\n-  ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (DWARF2_ADDR_SIZE));\n+  ASM_OUTPUT_ALIGN (asm_out_file, \n+\t\t    floor_log2 (for_eh ? PTR_SIZE : DWARF2_ADDR_SIZE));\n   ASM_OUTPUT_LABEL (asm_out_file, l2);\n \n   /* Loop through all of the FDE's.  */\n@@ -1841,35 +1843,40 @@ output_call_frame_info (for_eh)\n \t\t\t       stripattributes (FRAME_SECTION),\n \t\t\t       \"FDE CIE offset\");\n \n-      dw2_asm_output_addr (DWARF2_ADDR_SIZE, fde->dw_fde_begin,\n+      dw2_asm_output_addr ((for_eh ? PTR_SIZE : DWARF2_ADDR_SIZE),\n+\t\t\t   fde->dw_fde_begin,\n \t\t\t   \"FDE initial location\");\n \n-      dw2_asm_output_delta (DWARF2_ADDR_SIZE, fde->dw_fde_end,\n-\t\t\t    fde->dw_fde_begin, \"FDE address range\");\n+      dw2_asm_output_delta ((for_eh ? PTR_SIZE : DWARF2_ADDR_SIZE), \n+\t\t\t    fde->dw_fde_end, \n+\t\t\t    fde->dw_fde_begin, \n+\t\t\t    \"FDE address range\");\n \n       if (augmentation[0])\n \t{\n-\t  dw2_asm_output_data_uleb128 (DWARF2_ADDR_SIZE, \"Augmentation size\");\n+\t  dw2_asm_output_data_uleb128 ((for_eh ? PTR_SIZE : DWARF2_ADDR_SIZE),\n+\t\t\t\t       \"Augmentation size\");\n \n \t  if (fde->uses_eh_lsda)\n \t    {\n \t      ASM_GENERATE_INTERNAL_LABEL (l1, \"LLSDA\", fde->funcdef_number);\n-\t      dw2_asm_output_offset (DWARF2_ADDR_SIZE, l1,\n-\t\t\t\t     \"Language Specific Data Area\");\n+\t      dw2_asm_output_offset ((for_eh ? PTR_SIZE : DWARF2_ADDR_SIZE), \n+\t\t\t\t     l1, \"Language Specific Data Area\");\n \t    }\n \t  else\n-\t    dw2_asm_output_data (DWARF2_ADDR_SIZE, 0,\n-\t\t\t\t \"Language Specific Data Area (none)\");\n+\t    dw2_asm_output_data ((for_eh ? PTR_SIZE : DWARF2_ADDR_SIZE), \n+\t\t\t\t 0, \"Language Specific Data Area (none)\");\n \t}\n \n       /* Loop through the Call Frame Instructions associated with\n \t this FDE.  */\n       fde->dw_fde_current_label = fde->dw_fde_begin;\n       for (cfi = fde->dw_fde_cfi; cfi != NULL; cfi = cfi->dw_cfi_next)\n-\toutput_cfi (cfi, fde);\n+\toutput_cfi (cfi, fde, for_eh);\n \n       /* Pad the FDE out to an address sized boundary.  */\n-      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (DWARF2_ADDR_SIZE));\n+      ASM_OUTPUT_ALIGN (asm_out_file, \n+\t\t      floor_log2 ((for_eh ? PTR_SIZE : DWARF2_ADDR_SIZE)));\n       ASM_OUTPUT_LABEL (asm_out_file, l2);\n     }\n "}]}