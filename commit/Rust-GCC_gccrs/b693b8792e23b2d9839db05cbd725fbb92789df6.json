{"sha": "b693b8792e23b2d9839db05cbd725fbb92789df6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY5M2I4NzkyZTIzYjJkOTgzOWRiMDVjYmQ3MjVmYmI5Mjc4OWRmNg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@google.com", "date": "2015-04-29T21:57:04Z"}, "committer": {"name": "Doug Evans", "email": "devans@gcc.gnu.org", "date": "2015-04-29T21:57:04Z"}, "message": "Use consistent naming for value type attributes.\n\n\t* python/libstdcxx/v6/xmethods.py (ArrayWorkerBase): Rename _valtype\n\tto _val_type.\n\t(ArraySizeWorker, ArrayEmptyWorker): Ditto.\n\t(ArrayFrontWorker, ArrayBackWorker): Ditto.\n\t(ArrayAtWorker, ArraySubscriptWorker): Ditto.\n\t(DequeWorkerBase): Rename elemtype to val_type.\n\t(ForwardListWorkerBase): Rename _elem_type to _val_type.\n\t(ForwardListFrontWorker): Ditto.  And rename elem_address to\n\tval_address.\n\t(ForwardListMethodsMatcher): Rename elem_type to val_type.\n\t(VectorWorkerBase): Rename _elemtype to _val_type.\n\nFrom-SVN: r222596", "tree": {"sha": "72824255b0aca294c5e4a792dd7c927457c5e6b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72824255b0aca294c5e4a792dd7c927457c5e6b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b693b8792e23b2d9839db05cbd725fbb92789df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b693b8792e23b2d9839db05cbd725fbb92789df6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b693b8792e23b2d9839db05cbd725fbb92789df6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b693b8792e23b2d9839db05cbd725fbb92789df6/comments", "author": null, "committer": null, "parents": [{"sha": "081564faed7cc138dfcaa48021cc01a94fd1ba3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/081564faed7cc138dfcaa48021cc01a94fd1ba3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/081564faed7cc138dfcaa48021cc01a94fd1ba3c"}], "stats": {"total": 69, "additions": 42, "deletions": 27}, "files": [{"sha": "ca9ca6af123eecf6e254079a4014032a1f117ff7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b693b8792e23b2d9839db05cbd725fbb92789df6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b693b8792e23b2d9839db05cbd725fbb92789df6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b693b8792e23b2d9839db05cbd725fbb92789df6", "patch": "@@ -1,3 +1,18 @@\n+2015-04-29  Doug Evans  <dje@google.com>\n+\n+\tUse consistent naming for value type attributes.\n+\t* python/libstdcxx/v6/xmethods.py (ArrayWorkerBase): Rename _valtype\n+\tto _val_type.\n+\t(ArraySizeWorker, ArrayEmptyWorker): Ditto.\n+\t(ArrayFrontWorker, ArrayBackWorker): Ditto.\n+\t(ArrayAtWorker, ArraySubscriptWorker): Ditto.\n+\t(DequeWorkerBase): Rename elemtype to val_type.\n+\t(ForwardListWorkerBase): Rename _elem_type to _val_type.\n+\t(ForwardListFrontWorker): Ditto.  And rename elem_address to\n+\tval_address.\n+\t(ForwardListMethodsMatcher): Rename elem_type to val_type.\n+\t(VectorWorkerBase): Rename _elemtype to _val_type.\n+\n 2015-04-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/65760"}, {"sha": "e4e920a3e5c0d00a93a108c5493e47a9f772f4b0", "filename": "libstdc++-v3/python/libstdcxx/v6/xmethods.py", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b693b8792e23b2d9839db05cbd725fbb92789df6/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b693b8792e23b2d9839db05cbd725fbb92789df6/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py?ref=b693b8792e23b2d9839db05cbd725fbb92789df6", "patch": "@@ -29,17 +29,17 @@ def __init__(self, name, worker_class):\n # Xmethods for std::array\n \n class ArrayWorkerBase(gdb.xmethod.XMethodWorker):\n-    def __init__(self, valtype, size):\n-        self._valtype = valtype\n+    def __init__(self, val_type, size):\n+        self._val_type = val_type\n         self._size = size\n \n     def null_value(self):\n         nullptr = gdb.parse_and_eval('(void *) 0')\n-        return nullptr.cast(self._valtype.pointer()).dereference()\n+        return nullptr.cast(self._val_type.pointer()).dereference()\n \n class ArraySizeWorker(ArrayWorkerBase):\n-    def __init__(self, valtype, size):\n-        ArrayWorkerBase.__init__(self, valtype, size)\n+    def __init__(self, val_type, size):\n+        ArrayWorkerBase.__init__(self, val_type, size)\n \n     def get_arg_types(self):\n         return None\n@@ -48,8 +48,8 @@ def __call__(self, obj):\n         return self._size\n \n class ArrayEmptyWorker(ArrayWorkerBase):\n-    def __init__(self, valtype, size):\n-        ArrayWorkerBase.__init__(self, valtype, size)\n+    def __init__(self, val_type, size):\n+        ArrayWorkerBase.__init__(self, val_type, size)\n \n     def get_arg_types(self):\n         return None\n@@ -58,8 +58,8 @@ def __call__(self, obj):\n         return (int(self._size) == 0)\n \n class ArrayFrontWorker(ArrayWorkerBase):\n-    def __init__(self, valtype, size):\n-        ArrayWorkerBase.__init__(self, valtype, size)\n+    def __init__(self, val_type, size):\n+        ArrayWorkerBase.__init__(self, val_type, size)\n \n     def get_arg_types(self):\n         return None\n@@ -71,8 +71,8 @@ def __call__(self, obj):\n             return self.null_value()\n \n class ArrayBackWorker(ArrayWorkerBase):\n-    def __init__(self, valtype, size):\n-        ArrayWorkerBase.__init__(self, valtype, size)\n+    def __init__(self, val_type, size):\n+        ArrayWorkerBase.__init__(self, val_type, size)\n \n     def get_arg_types(self):\n         return None\n@@ -84,8 +84,8 @@ def __call__(self, obj):\n             return self.null_value()\n \n class ArrayAtWorker(ArrayWorkerBase):\n-    def __init__(self, valtype, size):\n-        ArrayWorkerBase.__init__(self, valtype, size)\n+    def __init__(self, val_type, size):\n+        ArrayWorkerBase.__init__(self, val_type, size)\n \n     def get_arg_types(self):\n         return gdb.lookup_type('std::size_t')\n@@ -97,8 +97,8 @@ def __call__(self, obj, index):\n         return obj['_M_elems'][index]\n \n class ArraySubscriptWorker(ArrayWorkerBase):\n-    def __init__(self, valtype, size):\n-        ArrayWorkerBase.__init__(self, valtype, size)\n+    def __init__(self, val_type, size):\n+        ArrayWorkerBase.__init__(self, val_type, size)\n \n     def get_arg_types(self):\n         return gdb.lookup_type('std::size_t')\n@@ -139,8 +139,8 @@ def match(self, class_type, method_name):\n # Xmethods for std::deque\n \n class DequeWorkerBase(gdb.xmethod.XMethodWorker):\n-    def __init__(self, elemtype):\n-        self._bufsize = (512 / elemtype.sizeof) or 1\n+    def __init__(self, val_type):\n+        self._bufsize = (512 / val_type.sizeof) or 1\n \n     def size(self, obj):\n         first_node = obj['_M_impl']['_M_start']['_M_node']\n@@ -232,8 +232,8 @@ def match(self, class_type, method_name):\n # Xmethods for std::forward_list\n \n class ForwardListWorkerBase(gdb.xmethod.XMethodMatcher):\n-    def __init__(self, elem_type, node_type):\n-        self._elem_type = elem_type\n+    def __init__(self, val_type, node_type):\n+        self._val_type = val_type\n         self._node_type = node_type\n \n     def get_arg_types(self):\n@@ -246,8 +246,8 @@ def __call__(self, obj):\n class ForwardListFrontWorker(ForwardListWorkerBase):\n     def __call__(self, obj):\n         node = obj['_M_impl']['_M_head']['_M_next'].cast(self._node_type)\n-        elem_address = node['_M_storage']['_M_storage'].address\n-        return elem_address.cast(self._elem_type.pointer()).dereference()\n+        val_address = node['_M_storage']['_M_storage'].address\n+        return val_address.cast(self._val_type.pointer()).dereference()\n \n class ForwardListMethodsMatcher(gdb.xmethod.XMethodMatcher):\n     def __init__(self):\n@@ -265,9 +265,9 @@ def match(self, class_type, method_name):\n         method = self._method_dict.get(method_name)\n         if method is None or not method.enabled:\n             return None\n-        elem_type = class_type.template_argument(0)\n+        val_type = class_type.template_argument(0)\n         node_type = gdb.lookup_type(str(class_type) + '::_Node').pointer()\n-        return method.worker_class(elem_type, node_type)\n+        return method.worker_class(val_type, node_type)\n \n # Xmethods for std::list\n \n@@ -330,11 +330,11 @@ def match(self, class_type, method_name):\n # Xmethods for std::vector\n \n class VectorWorkerBase(gdb.xmethod.XMethodWorker):\n-    def __init__(self, elemtype):\n-        self._elemtype = elemtype\n+    def __init__(self, val_type):\n+        self._val_type = val_type\n \n     def size(self, obj):\n-        if self._elemtype.code == gdb.TYPE_CODE_BOOL:\n+        if self._val_type.code == gdb.TYPE_CODE_BOOL:\n             start = obj['_M_impl']['_M_start']['_M_p']\n             finish = obj['_M_impl']['_M_finish']['_M_p']\n             finish_offset = obj['_M_impl']['_M_finish']['_M_offset']\n@@ -344,7 +344,7 @@ def size(self, obj):\n             return obj['_M_impl']['_M_finish'] - obj['_M_impl']['_M_start']\n \n     def get(self, obj, index):\n-        if self._elemtype.code == gdb.TYPE_CODE_BOOL:\n+        if self._val_type.code == gdb.TYPE_CODE_BOOL:\n             start = obj['_M_impl']['_M_start']['_M_p']\n             bit_size = start.dereference().type.sizeof * 8\n             valp = start + index / bit_size"}]}