{"sha": "eb6127a4f9e593f6f00a8f3b5c4c50967f9340f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2MTI3YTRmOWU1OTNmNmYwMGE4ZjNiNWM0YzUwOTY3ZjkzNDBmNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-06-25T01:37:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-06-25T01:37:56Z"}, "message": "* gimplify.c: Remove unneeded forward declarations.\n\nFrom-SVN: r83630", "tree": {"sha": "c663ef6f6a1fcd8781397adc774c9fe01c857724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c663ef6f6a1fcd8781397adc774c9fe01c857724"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb6127a4f9e593f6f00a8f3b5c4c50967f9340f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6127a4f9e593f6f00a8f3b5c4c50967f9340f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb6127a4f9e593f6f00a8f3b5c4c50967f9340f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6127a4f9e593f6f00a8f3b5c4c50967f9340f6/comments", "author": null, "committer": null, "parents": [{"sha": "f0d59f2e4329ac3ddf2e5c1af8025c88325053b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0d59f2e4329ac3ddf2e5c1af8025c88325053b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0d59f2e4329ac3ddf2e5c1af8025c88325053b4"}], "stats": {"total": 66, "additions": 4, "deletions": 62}, "files": [{"sha": "b1c0befdd3d460624ee1f0ac7650478e68f5a6b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6127a4f9e593f6f00a8f3b5c4c50967f9340f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6127a4f9e593f6f00a8f3b5c4c50967f9340f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb6127a4f9e593f6f00a8f3b5c4c50967f9340f6", "patch": "@@ -1,5 +1,7 @@\n 2004-06-24  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* gimplify.c: Remove unneeded forward declarations.\n+\n \t* gimplify.c (append_to_compound_expr): Deleted.\n \t* tree-gimple.h (append_to_compound_expr): Deleted.\n "}, {"sha": "bd24541a72ea6556866d2da3ac207c5366916a9e", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 62, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6127a4f9e593f6f00a8f3b5c4c50967f9340f6/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6127a4f9e593f6f00a8f3b5c4c50967f9340f6/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=eb6127a4f9e593f6f00a8f3b5c4c50967f9340f6", "patch": "@@ -72,71 +72,11 @@ typedef struct gimple_temp_hash_elt\n } elt_t;\n \n /* Forward declarations.  */\n-static hashval_t gimple_tree_hash (const void *);\n-static int gimple_tree_eq (const void *, const void *);\n-static bool gimple_conditional_context (void);\n-static void gimple_push_condition (void);\n-static void gimple_pop_condition (tree *);\n-static void append_to_statement_list_1 (tree, tree *, bool);\n-static inline void remove_suffix (char *, int);\n-static inline tree create_tmp_from_val (tree);\n-static tree lookup_tmp_var (tree, bool);\n-static tree internal_get_tmp_var (tree, tree *, tree *, bool);\n-static bool should_carry_locus_p (tree);\n-static tree mostly_copy_tree_r (tree *, int *, void *);\n-static tree mark_decls_volatile_r (tree *, int *, void *);\n-static tree copy_if_shared_r (tree *, int *, void *);\n-static tree unmark_visited_r (tree *, int *, void *);\n-static void unshare_body (tree *, tree);\n-static void unvisit_body (tree *, tree);\n-static void build_stack_save_restore (tree *, tree *);\n-static enum gimplify_status gimplify_bind_expr (tree *, tree, tree *);\n-static enum gimplify_status gimplify_return_expr (tree, tree *);\n-static enum gimplify_status gimplify_loop_expr (tree *, tree *);\n-static int compare_case_labels (const void *, const void *);\n-static enum gimplify_status gimplify_switch_expr (tree *, tree *);\n-static enum gimplify_status gimplify_case_label_expr (tree *);\n-static enum gimplify_status gimplify_labeled_block_expr (tree *);\n-static enum gimplify_status gimplify_exit_block_expr (tree *);\n-static enum gimplify_status gimplify_exit_expr (tree *);\n-static enum gimplify_status gimplify_init_constructor (tree *, tree *, tree *,\n-\t\t\t\t\t\t       bool);\n-static void canonicalize_component_ref (tree *);\n-static void canonicalize_addr_expr (tree *);\n-static enum gimplify_status gimplify_conversion (tree *);\n-static enum gimplify_status gimplify_minimax_expr (tree *, tree *, tree *);\n-static enum gimplify_status gimplify_array_ref_to_plus (tree *, tree *,\n-\t\t\t\t\t\t\ttree *);\n-static tree build_addr_expr_with_type (tree, tree);\n-static tree build_addr_expr (tree);\n-static enum gimplify_status gimplify_compound_lval (tree *, tree *, tree *,\n-\t\t\t\t\t\t    bool);\n-static enum gimplify_status gimplify_self_mod_expr (tree *, tree *, tree *,\n-\t\t\t\t\t\t    bool);\n-static enum gimplify_status gimplify_call_expr (tree *, tree *,\n-\t\t\t\t\t\tbool (*) (tree));\n-static tree shortcut_cond_r (tree, tree *, tree *);\n-static tree shortcut_cond_expr (tree);\n-static tree gimple_boolify (tree);\n-static enum gimplify_status gimplify_cond_expr (tree *, tree *, tree);\n-static enum gimplify_status gimplify_modify_expr (tree *, tree *, tree *,\n-\t\t\t\t\t\t  bool);\n static enum gimplify_status gimplify_modify_expr_rhs (tree *, tree *, tree *,\n \t\t\t\t\t\t      tree *, tree *, bool);\n-static enum gimplify_status gimplify_variable_sized_compare (tree *);\n-static enum gimplify_status gimplify_boolean_expr (tree *);\n static enum gimplify_status gimplify_compound_expr (tree *, tree *, bool);\n-static enum gimplify_status gimplify_statement_list (tree *);\n-static enum gimplify_status gimplify_save_expr (tree *, tree *, tree *);\n-static enum gimplify_status gimplify_addr_expr (tree *, tree *, tree *);\n-static enum gimplify_status gimplify_asm_expr (tree *, tree *, tree *);\n-static enum gimplify_status gimplify_cleanup_point_expr (tree *, tree *);\n-static void gimple_push_cleanup (tree, tree, tree *);\n-static enum gimplify_status gimplify_target_expr (tree *, tree *, tree *);\n-#ifdef ENABLE_CHECKING\n-static bool cpt_same_type (tree, tree);\n-static tree check_pointer_types_r (tree *, int *, void *);\n-#endif\n+\n+\n \n /* Return a hash value for a formal temporary table entry.  */\n "}]}