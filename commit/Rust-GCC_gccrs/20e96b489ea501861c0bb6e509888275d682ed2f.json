{"sha": "20e96b489ea501861c0bb6e509888275d682ed2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBlOTZiNDg5ZWE1MDE4NjFjMGJiNmU1MDk4ODgyNzVkNjgyZWQyZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-08T19:02:12Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-08T19:02:12Z"}, "message": "libgo: update to 1.8.3 release\n    \n    Reviewed-on: https://go-review.googlesource.com/45150\n\nFrom-SVN: r249033", "tree": {"sha": "f064a2348260e9821e3f50ff2fc8a0247c19be56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f064a2348260e9821e3f50ff2fc8a0247c19be56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20e96b489ea501861c0bb6e509888275d682ed2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e96b489ea501861c0bb6e509888275d682ed2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20e96b489ea501861c0bb6e509888275d682ed2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e96b489ea501861c0bb6e509888275d682ed2f/comments", "author": null, "committer": null, "parents": [{"sha": "34361776fb238310222e0b24d4f0b51a3717a785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34361776fb238310222e0b24d4f0b51a3717a785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34361776fb238310222e0b24d4f0b51a3717a785"}], "stats": {"total": 105, "additions": 93, "deletions": 12}, "files": [{"sha": "3280bcfe1f88215e8227eb01148f485fb5b47d48", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e96b489ea501861c0bb6e509888275d682ed2f/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e96b489ea501861c0bb6e509888275d682ed2f/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=20e96b489ea501861c0bb6e509888275d682ed2f", "patch": "@@ -1,4 +1,4 @@\n-81d9f6d05c2bb92b2b3af02807713b6bed9bf053\n+82961ce59e8bb02598d963d2a05b3acca860d9dd\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ddfb006437b67310fa3c80a7017ae785ef666a0a", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=20e96b489ea501861c0bb6e509888275d682ed2f", "patch": "@@ -1,4 +1,4 @@\n-a4c18f063b6659079ca2848ca217a0587dabc001\n+352996a381701cfa0c16e8de29cbde8f3922182f\n \n The first line of this file holds the git revision number of the\n last merge done from the master library sources."}, {"sha": "b38ce7712f869ec39d37e47e24643e7149bc9978", "filename": "libgo/VERSION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2FVERSION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2FVERSION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FVERSION?ref=20e96b489ea501861c0bb6e509888275d682ed2f", "patch": "@@ -1 +1 @@\n-go1.8.1\n+go1.8.3"}, {"sha": "4b9150583ee7800b5ed06fc994f74ba8886a5fae", "filename": "libgo/go/cmd/go/build.go", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go?ref=20e96b489ea501861c0bb6e509888275d682ed2f", "patch": "@@ -3133,6 +3133,26 @@ func (b *builder) ccompile(p *Package, outfile string, flags []string, file stri\n \tdesc := p.ImportPath\n \toutput, err := b.runOut(p.Dir, desc, nil, compiler, flags, \"-o\", outfile, \"-c\", file)\n \tif len(output) > 0 {\n+\t\t// On FreeBSD 11, when we pass -g to clang 3.8 it\n+\t\t// invokes its internal assembler with -dwarf-version=2.\n+\t\t// When it sees .section .note.GNU-stack, it warns\n+\t\t// \"DWARF2 only supports one section per compilation unit\".\n+\t\t// This warning makes no sense, since the section is empty,\n+\t\t// but it confuses people.\n+\t\t// We work around the problem by detecting the warning\n+\t\t// and dropping -g and trying again.\n+\t\tif bytes.Contains(output, []byte(\"DWARF2 only supports one section per compilation unit\")) {\n+\t\t\tnewFlags := make([]string, 0, len(flags))\n+\t\t\tfor _, f := range flags {\n+\t\t\t\tif !strings.HasPrefix(f, \"-g\") {\n+\t\t\t\t\tnewFlags = append(newFlags, f)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif len(newFlags) < len(flags) {\n+\t\t\t\treturn b.ccompile(p, outfile, newFlags, file, compiler)\n+\t\t\t}\n+\t\t}\n+\n \t\tb.showOutput(p.Dir, desc, b.processOutput(output))\n \t\tif err != nil {\n \t\t\terr = errPrintedOutput"}, {"sha": "c3e4c17d2509d9485a66888d3709b9350cc5ce5b", "filename": "libgo/go/crypto/elliptic/elliptic_test.go", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fcrypto%2Felliptic%2Felliptic_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fcrypto%2Felliptic%2Felliptic_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Felliptic%2Felliptic_test.go?ref=20e96b489ea501861c0bb6e509888275d682ed2f", "patch": "@@ -300,6 +300,29 @@ var p224BaseMultTests = []baseMultTest{\n \t},\n }\n \n+type scalarMultTest struct {\n+\tk          string\n+\txIn, yIn   string\n+\txOut, yOut string\n+}\n+\n+var p256MultTests = []scalarMultTest{\n+\t{\n+\t\t\"2a265f8bcbdcaf94d58519141e578124cb40d64a501fba9c11847b28965bc737\",\n+\t\t\"023819813ac969847059028ea88a1f30dfbcde03fc791d3a252c6b41211882ea\",\n+\t\t\"f93e4ae433cc12cf2a43fc0ef26400c0e125508224cdb649380f25479148a4ad\",\n+\t\t\"4d4de80f1534850d261075997e3049321a0864082d24a917863366c0724f5ae3\",\n+\t\t\"a22d2b7f7818a3563e0f7a76c9bf0921ac55e06e2e4d11795b233824b1db8cc0\",\n+\t},\n+\t{\n+\t\t\"313f72ff9fe811bf573176231b286a3bdb6f1b14e05c40146590727a71c3bccd\",\n+\t\t\"cc11887b2d66cbae8f4d306627192522932146b42f01d3c6f92bd5c8ba739b06\",\n+\t\t\"a2f08a029cd06b46183085bae9248b0ed15b70280c7ef13a457f5af382426031\",\n+\t\t\"831c3f6b5f762d2f461901577af41354ac5f228c2591f84f8a6e51e2e3f17991\",\n+\t\t\"93f90934cd0ef2c698cc471c60a93524e87ab31ca2412252337f364513e43684\",\n+\t},\n+}\n+\n func TestBaseMult(t *testing.T) {\n \tp224 := P224()\n \tfor i, e := range p224BaseMultTests {\n@@ -379,6 +402,19 @@ func TestP256Mult(t *testing.T) {\n \t\t\tbreak\n \t\t}\n \t}\n+\n+\tfor i, e := range p256MultTests {\n+\t\tx, _ := new(big.Int).SetString(e.xIn, 16)\n+\t\ty, _ := new(big.Int).SetString(e.yIn, 16)\n+\t\tk, _ := new(big.Int).SetString(e.k, 16)\n+\t\texpectedX, _ := new(big.Int).SetString(e.xOut, 16)\n+\t\texpectedY, _ := new(big.Int).SetString(e.yOut, 16)\n+\n+\t\txx, yy := p256.ScalarMult(x, y, k.Bytes())\n+\t\tif xx.Cmp(expectedX) != 0 || yy.Cmp(expectedY) != 0 {\n+\t\t\tt.Errorf(\"#%d: got (%x, %x), want (%x, %x)\", i, xx, yy, expectedX, expectedY)\n+\t\t}\n+\t}\n }\n \n func TestInfinity(t *testing.T) {"}, {"sha": "f8a884446e40882a133621885c7563869089b509", "filename": "libgo/go/database/sql/sql.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go?ref=20e96b489ea501861c0bb6e509888275d682ed2f", "patch": "@@ -1955,12 +1955,12 @@ func (s *Stmt) QueryContext(ctx context.Context, args ...interface{}) (*Rows, er\n \t\t\t\trowsi: rowsi,\n \t\t\t\t// releaseConn set below\n \t\t\t}\n-\t\t\trows.initContextClose(ctx)\n \t\t\ts.db.addDep(s, rows)\n \t\t\trows.releaseConn = func(err error) {\n \t\t\t\treleaseConn(err)\n \t\t\t\ts.db.removeDep(s, rows)\n \t\t\t}\n+\t\t\trows.initContextClose(ctx)\n \t\t\treturn rows, nil\n \t\t}\n "}, {"sha": "381aafc86b77c07e7395bcbd7d6d6c722857f8ad", "filename": "libgo/go/database/sql/sql_test.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql_test.go?ref=20e96b489ea501861c0bb6e509888275d682ed2f", "patch": "@@ -322,7 +322,7 @@ func TestQueryContext(t *testing.T) {\n \tselect {\n \tcase <-ctx.Done():\n \t\tif err := ctx.Err(); err != context.Canceled {\n-\t\t\tt.Fatalf(\"context err = %v; want context.Canceled\")\n+\t\t\tt.Fatalf(\"context err = %v; want context.Canceled\", ctx.Err())\n \t\t}\n \tdefault:\n \t\tt.Fatalf(\"context err = nil; want context.Canceled\")\n@@ -413,7 +413,8 @@ func TestTxContextWait(t *testing.T) {\n \tdb := newTestDB(t, \"people\")\n \tdefer closeDB(t, db)\n \n-\tctx, _ := context.WithTimeout(context.Background(), time.Millisecond*15)\n+\tctx, cancel := context.WithTimeout(context.Background(), time.Millisecond*15)\n+\tdefer cancel()\n \n \ttx, err := db.BeginTx(ctx, nil)\n \tif err != nil {"}, {"sha": "6fbbcd0fc762043010cda0a29afab32bbee0e812", "filename": "libgo/go/net/http/h2_bundle.go", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fnet%2Fhttp%2Fh2_bundle.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fnet%2Fhttp%2Fh2_bundle.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fh2_bundle.go?ref=20e96b489ea501861c0bb6e509888275d682ed2f", "patch": "@@ -1,4 +1,4 @@\n-// Code generated by golang.org/x/tools/cmd/bundle.\n+// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.\n //go:generate bundle -o h2_bundle.go -prefix http2 -underscore golang.org/x/net/http2\n \n // Package http2 implements the HTTP/2 protocol.\n@@ -3536,9 +3536,13 @@ func (sc *http2serverConn) serve() {\n \t\tsc.idleTimerCh = sc.idleTimer.C\n \t}\n \n-\tvar gracefulShutdownCh <-chan struct{}\n+\tvar gracefulShutdownCh chan struct{}\n \tif sc.hs != nil {\n-\t\tgracefulShutdownCh = http2h1ServerShutdownChan(sc.hs)\n+\t\tch := http2h1ServerShutdownChan(sc.hs)\n+\t\tif ch != nil {\n+\t\t\tgracefulShutdownCh = make(chan struct{})\n+\t\t\tgo sc.awaitGracefulShutdown(ch, gracefulShutdownCh)\n+\t\t}\n \t}\n \n \tgo sc.readFrames()\n@@ -3587,6 +3591,14 @@ func (sc *http2serverConn) serve() {\n \t}\n }\n \n+func (sc *http2serverConn) awaitGracefulShutdown(sharedCh <-chan struct{}, privateCh chan struct{}) {\n+\tselect {\n+\tcase <-sc.doneServing:\n+\tcase <-sharedCh:\n+\t\tclose(privateCh)\n+\t}\n+}\n+\n // readPreface reads the ClientPreface greeting from the peer\n // or returns an error on timeout or an invalid greeting.\n func (sc *http2serverConn) readPreface() error {\n@@ -6003,7 +6015,6 @@ func http2commaSeparatedTrailers(req *Request) (string, error) {\n \t}\n \tif len(keys) > 0 {\n \t\tsort.Strings(keys)\n-\n \t\treturn strings.Join(keys, \",\"), nil\n \t}\n \treturn \"\", nil"}, {"sha": "05a69c98aadde8786d004657edc8cb381cf560b5", "filename": "libgo/go/runtime/malloc.go", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fruntime%2Fmalloc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fruntime%2Fmalloc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmalloc.go?ref=20e96b489ea501861c0bb6e509888275d682ed2f", "patch": "@@ -412,10 +412,12 @@ func (h *mheap) sysAlloc(n uintptr) unsafe.Pointer {\n \t\t\tif p == 0 {\n \t\t\t\treturn nil\n \t\t\t}\n+\t\t\t// p can be just about anywhere in the address\n+\t\t\t// space, including before arena_end.\n \t\t\tif p == h.arena_end {\n \t\t\t\th.arena_end = new_end\n \t\t\t\th.arena_reserved = reserved\n-\t\t\t} else if h.arena_start <= p && p+p_size-h.arena_start-1 <= _MaxArena32 {\n+\t\t\t} else if h.arena_end < p && p+p_size-h.arena_start-1 <= _MaxArena32 {\n \t\t\t\t// Keep everything page-aligned.\n \t\t\t\t// Our pages are bigger than hardware pages.\n \t\t\t\th.arena_end = p + p_size\n@@ -425,6 +427,16 @@ func (h *mheap) sysAlloc(n uintptr) unsafe.Pointer {\n \t\t\t\th.arena_used = used\n \t\t\t\th.arena_reserved = reserved\n \t\t\t} else {\n+\t\t\t\t// We got a mapping, but it's not\n+\t\t\t\t// linear with our current arena, so\n+\t\t\t\t// we can't use it.\n+\t\t\t\t//\n+\t\t\t\t// TODO: Make it possible to allocate\n+\t\t\t\t// from this. We can't decrease\n+\t\t\t\t// arena_used, but we could introduce\n+\t\t\t\t// a new variable for the current\n+\t\t\t\t// allocation position.\n+\n \t\t\t\t// We haven't added this allocation to\n \t\t\t\t// the stats, so subtract it from a\n \t\t\t\t// fake stat (but avoid underflow)."}, {"sha": "a7ccc650adaf17f49a22a7ba48c3c44a6e0506a9", "filename": "libgo/go/runtime/mbitmap.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fruntime%2Fmbitmap.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fruntime%2Fmbitmap.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmbitmap.go?ref=20e96b489ea501861c0bb6e509888275d682ed2f", "patch": "@@ -374,6 +374,7 @@ func heapBitsForAddr(addr uintptr) heapBits {\n // heapBitsForSpan returns the heapBits for the span base address base.\n func heapBitsForSpan(base uintptr) (hbits heapBits) {\n \tif base < mheap_.arena_start || base >= mheap_.arena_used {\n+\t\tprint(\"runtime: base \", hex(base), \" not in range [\", hex(mheap_.arena_start), \",\", hex(mheap_.arena_used), \")\\n\")\n \t\tthrow(\"heapBitsForSpan: base out of range\")\n \t}\n \treturn heapBitsForAddr(base)"}, {"sha": "5cee12d8b81cae7da393dbc74dc35730c80e294e", "filename": "libgo/go/runtime/mgc.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fruntime%2Fmgc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e96b489ea501861c0bb6e509888275d682ed2f/libgo%2Fgo%2Fruntime%2Fmgc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmgc.go?ref=20e96b489ea501861c0bb6e509888275d682ed2f", "patch": "@@ -1908,7 +1908,7 @@ func gchelper() {\n \t\ttraceGCScanDone()\n \t}\n \n-\tnproc := work.nproc // work.nproc can change right after we increment work.ndone\n+\tnproc := atomic.Load(&work.nproc) // work.nproc can change right after we increment work.ndone\n \tif atomic.Xadd(&work.ndone, +1) == nproc-1 {\n \t\tnotewakeup(&work.alldone)\n \t}"}]}