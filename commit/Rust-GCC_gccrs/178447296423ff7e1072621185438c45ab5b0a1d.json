{"sha": "178447296423ff7e1072621185438c45ab5b0a1d", "node_id": "C_kwDOANBUbNoAKDE3ODQ0NzI5NjQyM2ZmN2UxMDcyNjIxMTg1NDM4YzQ1YWI1YjBhMWQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-05T12:22:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-05T13:15:03Z"}, "message": "Remove MAX_SWITCH_CASES limit\n\nThe following removes the MAX_SWITCH_CASES limit to fight quadraticness\nwhen looking up case labels from edges.  Instead use the\n{start,end}_recording_case_labels facility for that.  For it to be\nusable I've exported get_cases_for_edge from tree-cfg.cc.\n\n\t* tree-cfg.h (get_cases_for_edge): Declare.\n\t* tree-cfg.cc (get_cases_for_edge): Export.\n\t* tree-ssa-uninit.cc (execute_late_warn_uninitialized):\n\tStart and end recording case labels.\n\t* gimple-predicate-analysis.cc (MAX_SWITCH_CASES): Remove.\n\t(predicate::init_from_control_deps): Use get_cases_for_edge.", "tree": {"sha": "f146e3eee62f7e44a2eb856b900da4ed90776a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f146e3eee62f7e44a2eb856b900da4ed90776a8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/178447296423ff7e1072621185438c45ab5b0a1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178447296423ff7e1072621185438c45ab5b0a1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178447296423ff7e1072621185438c45ab5b0a1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178447296423ff7e1072621185438c45ab5b0a1d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9ea2688271bd0b4319bdfb1fc852169ab3cf076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ea2688271bd0b4319bdfb1fc852169ab3cf076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ea2688271bd0b4319bdfb1fc852169ab3cf076"}], "stats": {"total": 31, "additions": 8, "deletions": 23}, "files": [{"sha": "681047deee77fc6fa12009c1328067f4606633b0", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178447296423ff7e1072621185438c45ab5b0a1d/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178447296423ff7e1072621185438c45ab5b0a1d/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=178447296423ff7e1072621185438c45ab5b0a1d", "patch": "@@ -52,10 +52,6 @@\n #define MAX_NUM_CHAINS 8\n #define MAX_CHAIN_LEN 5\n \n-/* The limit for the number of switch cases when we do the linear search\n-   for the case corresponding to an edge.  */\n-#define MAX_SWITCH_CASES 40\n-\n /* Return true if X1 is the negation of X2.  */\n \n static inline bool\n@@ -1751,28 +1747,12 @@ predicate::init_from_control_deps (const vec<edge> *dep_chains,\n \t    }\n \t  else if (gswitch *gs = dyn_cast<gswitch *> (cond_stmt))\n \t    {\n-\t      tree l = NULL_TREE;\n \t      /* Find the case label, but avoid quadratic behavior.  */\n-\t      if (gimple_switch_num_labels (gs) <= MAX_SWITCH_CASES)\n-\t\tfor (unsigned idx = 0;\n-\t\t     idx < gimple_switch_num_labels (gs); ++idx)\n-\t\t  {\n-\t\t    tree tl = gimple_switch_label (gs, idx);\n-\t\t    if (e->dest == label_to_block (cfun, CASE_LABEL (tl)))\n-\t\t      {\n-\t\t\tif (!l)\n-\t\t\t  l = tl;\n-\t\t\telse\n-\t\t\t  {\n-\t\t\t    l = NULL_TREE;\n-\t\t\t    break;\n-\t\t\t  }\n-\t\t      }\n-\t\t  }\n+\t      tree l = get_cases_for_edge (e, gs);\n \t      /* If more than one label reaches this block or the case\n \t\t label doesn't have a contiguous range of values (like the\n \t\t default one) fail.  */\n-\t      if (!l || !CASE_LOW (l))\n+\t      if (!l || CASE_CHAIN (l) || !CASE_LOW (l))\n \t\thas_valid_pred = false;\n \t      else if (!CASE_HIGH (l)\n \t\t      || operand_equal_p (CASE_LOW (l), CASE_HIGH (l)))"}, {"sha": "bbe08357d6ecbe47702297a542b012ab18e96891", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178447296423ff7e1072621185438c45ab5b0a1d/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178447296423ff7e1072621185438c45ab5b0a1d/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=178447296423ff7e1072621185438c45ab5b0a1d", "patch": "@@ -1305,7 +1305,7 @@ end_recording_case_labels (void)\n \n    Otherwise return NULL.  */\n \n-static tree\n+tree\n get_cases_for_edge (edge e, gswitch *t)\n {\n   tree *slot;"}, {"sha": "95ec93e3a9171acc4b27bc13071485c0c991a0a2", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178447296423ff7e1072621185438c45ab5b0a1d/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178447296423ff7e1072621185438c45ab5b0a1d/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=178447296423ff7e1072621185438c45ab5b0a1d", "patch": "@@ -33,6 +33,7 @@ extern void init_empty_tree_cfg_for_function (struct function *);\n extern void init_empty_tree_cfg (void);\n extern void start_recording_case_labels (void);\n extern void end_recording_case_labels (void);\n+extern tree get_cases_for_edge (edge, gswitch *);\n extern basic_block label_to_block (struct function *, tree);\n extern void cleanup_dead_labels (void);\n extern bool group_case_labels_stmt (gswitch *);"}, {"sha": "4a1c333d9cbf120da5f0154525f20fc4881c6097", "filename": "gcc/tree-ssa-uninit.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178447296423ff7e1072621185438c45ab5b0a1d/gcc%2Ftree-ssa-uninit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178447296423ff7e1072621185438c45ab5b0a1d/gcc%2Ftree-ssa-uninit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.cc?ref=178447296423ff7e1072621185438c45ab5b0a1d", "patch": "@@ -1402,6 +1402,9 @@ execute_late_warn_uninitialized (function *fun)\n \n   timevar_push (TV_TREE_UNINIT);\n \n+  /* Avoid quadratic beahvior when looking up case labels for edges.  */\n+  start_recording_case_labels ();\n+\n   possibly_undefined_names = new hash_set<tree>;\n   defined_args = new hash_map<gphi *, uninit_analysis::func_t::phi_arg_set_t>;\n \n@@ -1432,6 +1435,7 @@ execute_late_warn_uninitialized (function *fun)\n   possibly_undefined_names = NULL;\n   delete defined_args;\n   defined_args = NULL;\n+  end_recording_case_labels ();\n   free_dominance_info (CDI_POST_DOMINATORS);\n   timevar_pop (TV_TREE_UNINIT);\n }"}]}