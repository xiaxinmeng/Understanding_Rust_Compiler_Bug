{"sha": "6232acb724db1be226fc653096ca23201b60b8ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIzMmFjYjcyNGRiMWJlMjI2ZmM2NTMwOTZjYTIzMjAxYjYwYjhlZQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2016-05-16T10:58:20Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-05-16T10:58:20Z"}, "message": "freeze.adb (Check_Component_Storage_Order): Also get full view of enclosing type.\n\n\t* freeze.adb (Check_Component_Storage_Order): Also get full view of\n\tenclosing type.\n\nFrom-SVN: r236277", "tree": {"sha": "d89fdc4122610b2e7c5cc22b4506e40b694275d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d89fdc4122610b2e7c5cc22b4506e40b694275d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6232acb724db1be226fc653096ca23201b60b8ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6232acb724db1be226fc653096ca23201b60b8ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6232acb724db1be226fc653096ca23201b60b8ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6232acb724db1be226fc653096ca23201b60b8ee/comments", "author": null, "committer": null, "parents": [{"sha": "8fad45f5b6577a0b999ee32ab07108b16522ab1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fad45f5b6577a0b999ee32ab07108b16522ab1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fad45f5b6577a0b999ee32ab07108b16522ab1b"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "b8b14d2a63c96020095dc11e316016995556306e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6232acb724db1be226fc653096ca23201b60b8ee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6232acb724db1be226fc653096ca23201b60b8ee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6232acb724db1be226fc653096ca23201b60b8ee", "patch": "@@ -1,3 +1,8 @@\n+2016-05-16  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* freeze.adb (Check_Component_Storage_Order): Also get full view of\n+\tenclosing type.\n+\n 2016-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_util.adb (Remove_Side_Effects): Also make a constant if we need"}, {"sha": "c040f07bafe66b7ca40652fa93286ef8e20be42f", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6232acb724db1be226fc653096ca23201b60b8ee/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6232acb724db1be226fc653096ca23201b60b8ee/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=6232acb724db1be226fc653096ca23201b60b8ee", "patch": "@@ -1161,7 +1161,8 @@ package body Freeze is\n       ADC              : Node_Id;\n       Comp_ADC_Present : out Boolean)\n    is\n-      Comp_Type : Entity_Id;\n+      Encl_Base : Entity_Id;\n+      Comp_Base : Entity_Id;\n       Comp_ADC  : Node_Id;\n       Err_Node  : Node_Id;\n \n@@ -1180,7 +1181,7 @@ package body Freeze is\n \n       if Present (Comp) then\n          Err_Node  := Comp;\n-         Comp_Type := Etype (Comp);\n+         Comp_Base := Etype (Comp);\n \n          if Is_Tag (Comp) then\n             Comp_Byte_Aligned := True;\n@@ -1205,39 +1206,43 @@ package body Freeze is\n \n       else\n          Err_Node  := Encl_Type;\n-         Comp_Type := Component_Type (Encl_Type);\n+         Comp_Base := Component_Type (Encl_Type);\n \n          Component_Aliased := Has_Aliased_Components (Encl_Type);\n       end if;\n \n       --  Note: the Reverse_Storage_Order flag is set on the base type, but\n       --  the attribute definition clause is attached to the first subtype.\n+      --  Also, if the base type is incomplete or private, go to full view\n+      --  if known\n \n-      Comp_Type := Base_Type (Comp_Type);\n-\n-      --  If the base type is incomplete or private, go to full view if known\n+      Encl_Base := Base_Type (Encl_Type);\n+      if Present (Underlying_Type (Encl_Base)) then\n+         Encl_Base := Underlying_Type (Encl_Base);\n+      end if;\n \n-      if Present (Underlying_Type (Comp_Type)) then\n-         Comp_Type := Underlying_Type (Comp_Type);\n+      Comp_Base := Base_Type (Comp_Base);\n+      if Present (Underlying_Type (Comp_Base)) then\n+         Comp_Base := Underlying_Type (Comp_Base);\n       end if;\n \n       Comp_ADC := Get_Attribute_Definition_Clause\n-                    (First_Subtype (Comp_Type),\n+                    (First_Subtype (Comp_Base),\n                      Attribute_Scalar_Storage_Order);\n       Comp_ADC_Present := Present (Comp_ADC);\n \n       --  Case of record or array component: check storage order compatibility.\n       --  But, if the record has Complex_Representation, then it is treated as\n       --  a scalar in the back end so the storage order is irrelevant.\n \n-      if (Is_Record_Type (Comp_Type)\n-            and then not Has_Complex_Representation (Comp_Type))\n-        or else Is_Array_Type (Comp_Type)\n+      if (Is_Record_Type (Comp_Base)\n+            and then not Has_Complex_Representation (Comp_Base))\n+        or else Is_Array_Type (Comp_Base)\n       then\n          Comp_SSO_Differs :=\n-           Reverse_Storage_Order (Encl_Type)\n+           Reverse_Storage_Order (Encl_Base)\n              /=\n-           Reverse_Storage_Order (Comp_Type);\n+           Reverse_Storage_Order (Comp_Base);\n \n          --  Parent and extension must have same storage order\n \n@@ -1258,22 +1263,22 @@ package body Freeze is\n             --  Reject if component is a packed array, as it may be represented\n             --  as a scalar internally.\n \n-            if Is_Packed_Array (Comp_Type) then\n+            if Is_Packed_Array (Comp_Base) then\n                Error_Msg_N\n                  (\"type of packed component must have same scalar storage \"\n                   & \"order as enclosing composite\", Err_Node);\n \n             --  Reject if composite is a packed array, as it may be rewritten\n             --  into an array of scalars.\n \n-            elsif Is_Packed_Array (Encl_Type) then\n+            elsif Is_Packed_Array (Encl_Base) then\n                Error_Msg_N\n                  (\"type of packed array must have same scalar storage order \"\n                   & \"as component\", Err_Node);\n \n             --  Reject if not byte aligned\n \n-            elsif Is_Record_Type (Encl_Type)\n+            elsif Is_Record_Type (Encl_Base)\n               and then not Comp_Byte_Aligned\n             then\n                Error_Msg_N\n@@ -1285,7 +1290,7 @@ package body Freeze is\n             elsif Present (ADC) and then No (Comp_ADC) then\n                Error_Msg_NE\n                  (\"scalar storage order specified for & does not apply to \"\n-                  & \"component?\", Err_Node, Encl_Type);\n+                  & \"component?\", Err_Node, Encl_Base);\n             end if;\n          end if;\n "}]}