{"sha": "9fcdd8917caba77d188f6facf1623100318cba43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjZGQ4OTE3Y2FiYTc3ZDE4OGY2ZmFjZjE2MjMxMDAzMThjYmE0Mw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-01-23T19:22:01Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-01-23T19:22:01Z"}, "message": "re PR bootstrap/18058 (Bootstrap fails with non-GCC compilers)\n\nconfig:\n\t* warnings.m4 (ACX_PROG_CC_WARNING_ALMOST_PEDANTIC): Don't do\n\tanything for non-GCC compilers.\n\nlibcpp:\n\t* configure: Regenerate.\n\ngcc:\n\tPR bootstrap/18058\n\t* recog.c (recog_memoized): Don't define if GENERATOR_FILE.\n\t* ggc-none.c (ggc_free): Define.\n\nFrom-SVN: r94123", "tree": {"sha": "e1398ce8b4f5f98a45b8f38df417d486bb273c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1398ce8b4f5f98a45b8f38df417d486bb273c79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fcdd8917caba77d188f6facf1623100318cba43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fcdd8917caba77d188f6facf1623100318cba43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fcdd8917caba77d188f6facf1623100318cba43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fcdd8917caba77d188f6facf1623100318cba43/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d77cdc3aab2d3a3ae6a5bc19db953a53833f5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d77cdc3aab2d3a3ae6a5bc19db953a53833f5ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d77cdc3aab2d3a3ae6a5bc19db953a53833f5ab"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "c6885d131dada9719702ba1f90507b13f0872496", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcdd8917caba77d188f6facf1623100318cba43/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcdd8917caba77d188f6facf1623100318cba43/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=9fcdd8917caba77d188f6facf1623100318cba43", "patch": "@@ -1,3 +1,8 @@\n+2005-01-23  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* warnings.m4 (ACX_PROG_CC_WARNING_ALMOST_PEDANTIC): Don't do\n+\tanything for non-GCC compilers.\n+\n 2004-12-03  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gxx-include-dir.m4: New file."}, {"sha": "2f44c9222915760277ccce184532c37028521ae4", "filename": "config/warnings.m4", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcdd8917caba77d188f6facf1623100318cba43/config%2Fwarnings.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcdd8917caba77d188f6facf1623100318cba43/config%2Fwarnings.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fwarnings.m4?ref=9fcdd8917caba77d188f6facf1623100318cba43", "patch": "@@ -1,6 +1,6 @@\n # Autoconf include file defining macros related to compile-time warnings.\n \n-# Copyright 2004 Free Software Foundation, Inc.\n+# Copyright 2004, 2005 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -43,14 +43,15 @@ CFLAGS=\"$save_CFLAGS\"\n ])# ACX_PROG_CC_WARNING_OPTS\n \n # ACX_PROG_CC_WARNING_ALMOST_PEDANTIC([-Wno-long-long ...])\n-#   Sets WARN_PEDANTIC to \"-pedantic\" + the argument, if the compiler\n-#   accepts all of those options simultaneously, otherwise to nothing.\n+#   Sets WARN_PEDANTIC to \"-pedantic\" + the argument, if the compiler is GCC\n+#   and accepts all of those options simultaneously, otherwise to nothing.\n AC_DEFUN([ACX_PROG_CC_WARNING_ALMOST_PEDANTIC],\n [AC_REQUIRE([AC_PROG_CC])dnl\n AC_SUBST([WARN_PEDANTIC])dnl\n AS_VAR_PUSHDEF([acx_Pedantic], [acx_cv_prog_cc_pedantic_$1])dnl\n WARN_PEDANTIC=\n-AC_CACHE_CHECK([whether $CC supports -pedantic $1], acx_Pedantic,\n+AS_IF([test $GCC = yes],\n+[AC_CACHE_CHECK([whether $CC supports -pedantic $1], acx_Pedantic,\n [save_CFLAGS=\"$CFLAGS\"\n CFLAGS=\"-pedantic $1\"\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[])],\n@@ -59,6 +60,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[])],\n CFLAGS=\"$save_CFLAGS\"])\n AS_IF([test AS_VAR_GET(acx_Pedantic) = yes],\n       [WARN_PEDANTIC=\"-pedantic $1\"])\n+])\n AS_VAR_POPDEF([acx_Pedantic])dnl\n ])# ACX_PROG_CC_WARNING_ALMOST_PEDANTIC\n "}, {"sha": "b8e4a1647155e7f7720cba3cf8d14d52526328c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcdd8917caba77d188f6facf1623100318cba43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcdd8917caba77d188f6facf1623100318cba43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fcdd8917caba77d188f6facf1623100318cba43", "patch": "@@ -1,3 +1,9 @@\n+2005-01-23  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR bootstrap/18058\n+\t* recog.c (recog_memoized): Don't define if GENERATOR_FILE.\n+\t* ggc-none.c (ggc_free): Define.\n+\n 2005-01-23  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cse.c (max_reg, max_insn_uid): Remove."}, {"sha": "54b7d1507934f774559a8e94752865255d1a6dd3", "filename": "gcc/ggc-none.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcdd8917caba77d188f6facf1623100318cba43/gcc%2Fggc-none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcdd8917caba77d188f6facf1623100318cba43/gcc%2Fggc-none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-none.c?ref=9fcdd8917caba77d188f6facf1623100318cba43", "patch": "@@ -1,5 +1,5 @@\n /* Null garbage collection for the GNU compiler.\n-   Copyright (C) 1998, 1999, 2000, 2003, 2004\n+   Copyright (C) 1998, 1999, 2000, 2003, 2004, 2005\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -67,3 +67,9 @@ ggc_realloc_stat (void *x, size_t size MEM_STAT_DECL)\n {\n   return xrealloc (x, size);\n }\n+\n+void\n+ggc_free (void *p)\n+{\n+  free (p);\n+}"}, {"sha": "0c340cc35a08adb3cdf3f3fd814efac68f95cc6c", "filename": "gcc/recog.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcdd8917caba77d188f6facf1623100318cba43/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcdd8917caba77d188f6facf1623100318cba43/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=9fcdd8917caba77d188f6facf1623100318cba43", "patch": "@@ -1,5 +1,5 @@\n /* Declarations for interface to insn recognizer and insn-output.c.\n-   Copyright (C) 1987, 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004\n+   Copyright (C) 1987, 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -99,7 +99,9 @@ extern int offsettable_address_p (int, enum machine_mode, rtx);\n extern int mode_dependent_address_p (rtx);\n \n extern int recog (rtx, rtx, int *);\n+#ifndef GENERATOR_FILE\n static inline int recog_memoized (rtx insn);\n+#endif\n extern void add_clobbers (rtx, int);\n extern int added_clobbers_hard_reg_p (int);\n extern void insn_extract (rtx);\n@@ -120,6 +122,7 @@ extern rtx peephole2_insns (rtx, rtx, int *);\n extern int store_data_bypass_p (rtx, rtx);\n extern int if_test_bypass_p (rtx, rtx);\n \n+#ifndef GENERATOR_FILE\n /* Try recognizing the instruction INSN,\n    and return the code number that results.\n    Remember the code so that repeated calls do not\n@@ -136,6 +139,7 @@ recog_memoized (rtx insn)\n     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);\n   return INSN_CODE (insn);\n }\n+#endif\n \n /* Nonzero means volatile operands are recognized.  */\n extern int volatile_ok;"}, {"sha": "49055bd51bd3d685a476dce839b476f3e8462ff7", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcdd8917caba77d188f6facf1623100318cba43/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcdd8917caba77d188f6facf1623100318cba43/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=9fcdd8917caba77d188f6facf1623100318cba43", "patch": "@@ -1,3 +1,7 @@\n+2005-01-23  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* configure: Regenerate.\n+\n 2005-01-11  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* include/cpplib.h (c_lang): Fix comment to say cpp_create_reader."}, {"sha": "604ed847d6f26ba487e3ab82081ddf56de25942c", "filename": "libcpp/configure", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcdd8917caba77d188f6facf1623100318cba43/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcdd8917caba77d188f6facf1623100318cba43/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=9fcdd8917caba77d188f6facf1623100318cba43", "patch": "@@ -2757,7 +2757,8 @@ fi\n CFLAGS=\"$save_CFLAGS\"\n \n WARN_PEDANTIC=\n-echo \"$as_me:$LINENO: checking whether $CC supports -pedantic -Wno-long-long\" >&5\n+if test $GCC = yes; then\n+  echo \"$as_me:$LINENO: checking whether $CC supports -pedantic -Wno-long-long\" >&5\n echo $ECHO_N \"checking whether $CC supports -pedantic -Wno-long-long... $ECHO_C\" >&6\n if test \"${acx_cv_prog_cc_pedantic__Wno_long_long+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n@@ -2818,6 +2819,9 @@ if test $acx_cv_prog_cc_pedantic__Wno_long_long = yes; then\n fi\n \n \n+fi\n+\n+\n \n # Only enable with --enable-werror-always until existing warnings are\n # corrected."}]}