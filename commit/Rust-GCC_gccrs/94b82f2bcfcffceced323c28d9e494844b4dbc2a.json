{"sha": "94b82f2bcfcffceced323c28d9e494844b4dbc2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRiODJmMmJjZmNmZmNlY2VkMzIzYzI4ZDllNDk0ODQ0YjRkYmMyYQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@dcc.unicamp.br", "date": "1999-07-27T13:26:37Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gcc.gnu.org", "date": "1999-07-27T13:26:37Z"}, "message": "egcs_update (files_and_dependencies): New function...\n\n* egcs_update (files_and_dependencies): New function, with\ncomplete list of files to be updated, as well as their\ndependencies.\n(touch_files): Check the timestamp of each generated file against\nits dependencies'.\n(main): New flags --touch, --list and --help.  Remove the\npre-update step.\n\nFrom-SVN: r28295", "tree": {"sha": "7c0236672932e8fbdd6e1f92fd76254129e97416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c0236672932e8fbdd6e1f92fd76254129e97416"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94b82f2bcfcffceced323c28d9e494844b4dbc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94b82f2bcfcffceced323c28d9e494844b4dbc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94b82f2bcfcffceced323c28d9e494844b4dbc2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94b82f2bcfcffceced323c28d9e494844b4dbc2a/comments", "author": null, "committer": null, "parents": [{"sha": "3efd811ad157a514f4d64b0bf22066427e6fc9a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3efd811ad157a514f4d64b0bf22066427e6fc9a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3efd811ad157a514f4d64b0bf22066427e6fc9a4"}], "stats": {"total": 187, "additions": 125, "deletions": 62}, "files": [{"sha": "e5fd410f0f7d214b3cd17a26924020d7e2042c88", "filename": "contrib/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94b82f2bcfcffceced323c28d9e494844b4dbc2a/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94b82f2bcfcffceced323c28d9e494844b4dbc2a/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=94b82f2bcfcffceced323c28d9e494844b4dbc2a", "patch": "@@ -1,3 +1,13 @@\n+1999-07-27  Alexandre Oliva  <oliva@dcc.unicamp.br>\n+\n+\t* egcs_update (files_and_dependencies): New function, with\n+\tcomplete list of files to be updated, as well as their\n+\tdependencies.\n+\t(touch_files): Check the timestamp of each generated file against\n+\tits dependencies'.\n+\t(main): New flags --touch, --list and --help.  Remove the\n+\tpre-update step.\n+\n 1999-07-17  Alexandre Oliva  <oliva@dcc.unicamp.br>\n         \n \t* test_summary: Replace egcs with gcc.  Update e-mail address."}, {"sha": "54470775b667314b61b6d93f8c1af92805ee5b18", "filename": "contrib/egcs_update", "status": "modified", "additions": 115, "deletions": 62, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94b82f2bcfcffceced323c28d9e494844b4dbc2a/contrib%2Fegcs_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94b82f2bcfcffceced323c28d9e494844b4dbc2a/contrib%2Fegcs_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fegcs_update?ref=94b82f2bcfcffceced323c28d9e494844b4dbc2a", "patch": "@@ -12,12 +12,21 @@\n # If the first parameter reads --patch, the second parameter is considered\n # a patch file.\n # \n+# If the first parameter is --touch, no cvs operation will be performed,\n+# only generated files that appear to be out of date in the local tree\n+# will be touched.\n+#\n+# If the first parameter is --list, a list of the generated files and\n+# their dependencies will be printed; --help prints this message.\n+#\n # Examples:\n #\n # contrib/egcs_update -r egcs_latest_snapshot\n # contrib/egcs_update -A\n # contrib/egcs_update --nostdflags -P -r egcs_1_1_branch gcc/testsuite\n # contrib/egcs_update --patch some-patch\n+# contrib/egcs_update --touch\n+# contrib/egcs_update --list\n #\n #\n # (C) 1998-1999 Free Software Foundation\n@@ -35,49 +44,79 @@ UPDATE_OPTIONS=-P\n # Add -A to reset any sticky tags, dates, or `-k' options.\n \n \n+# This function prints a list of all generated files, along with their\n+# dependencies.  Note that only one target is supported per line: the\n+# colon is stripped from the output.\n+files_and_dependencies () {\n+    sed -e 's/ *#.*//' -e '/^$/d' -e 's/://' <<\\EOF\n+# All automake dependencies within texinfo\n+# In fact, not all, since we do not care about sub-directories that\n+# we do not build.  In particular, *.po and *.gmo are not touched.\n+texinfo/aclocal.m4: texinfo/configure.in texinfo/acinclude.m4\n+texinfo/Makefile.in: texinfo/Makefile.am texinfo/configure.in texinfo/aclocal.m4\n+texinfo/configure: texinfo/configure.in texinfo/aclocal.m4\n+texinfo/stamp-h.in: texinfo/configure.in texinfo/aclocal.m4 texinfo/acconfig.h\n+texinfo/lib/Makefile.in: texinfo/lib/Makefile.am texinfo/configure.in texinfo/aclocal.m4\n+texinfo/makeinfo/Makefile.in: texinfo/makeinfo/Makefile.am texinfo/configure.in texinfo/aclocal.m4\n+texinfo/util/Makefile.in: texinfo/util/Makefile.am texinfo/configure.in texinfo/aclocal.m4\n+# Now, proceed to gcc automatically generated files\n+gcc/configure: gcc/configure.in\n+gcc/c-stamp-h.in: gcc/configure.in gcc/acconfig.h\n+gcc/c-parse.y: gcc/c-parse.in\n+gcc/c-parse.c: gcc/c-parse.y\n+gcc/c-parse.h: gcc/c-parse.c\n+gcc/c-gperf.h: gcc/c-parse.gperf\n+gcc/cexp.c: gcc/cexp.y\n+gcc/fixinc/fixincl.x: gcc/fixinc/fixincl.tpl gcc/fixinc/inclhack.def\n+gcc/fixinc/inclhack.sh: gcc/fixinc/inclhack.def gcc/fixinc/inclhack.tpl gcc/fixinc/hackshell.tpl\n+gcc/fixinc/fixincl.sh: gcc/fixinc/inclhack.def gcc/fixinc/inclhack.tpl\n+# And then, language-specific files\n+gcc/cp/parse.c: gcc/cp/parse.y\n+gcc/cp/parse.h: gcc/cp/parse.c\n+gcc/objc/objc-parse.y: gcc/c-parse.in\n+gcc/objc/objc-parse.c: gcc/objc/objc-parse.y\n+gcc/java/parse.h: gcc/java/parse.y\n+gcc/java/parse.c: gcc/java/parse.y gcc/java/lex.c gcc/java/parse.h gcc/java/lex.h\n+gcc/java/parse-scan.c: gcc/java/parse-scan.y gcc/java/lex.c gcc/java/parse.h gcc/java/lex.h\n+# And libraries, at last\n+libchill/configure: libchill/configure.in\n+libf2c/configure: libf2c/configure.in\n+libf2c/libF77/configure: libf2c/libF77/configure.in\n+libf2c/libI77/configure: libf2c/libI77/configure.in\n+libf2c/libU77/configure: libf2c/libU77/configure.in\n+libf2c/libU77/stamp-h.in: libf2c/libU77/configure.in libf2c/libU77/acconfig.h\n+libobjc/configure: libobjc/configure.in\n+EOF\n+}\n+\n+\n+# This function checks whether its first argument is newer than all\n+# the other arguments.  It returns success (0) otherwise.\n+is_out_of_date () {\n+  test `ls -1dt ${1+\"$@\"} | sed 1q` != \"$1\"\n+}\n+\n+\n # This function touches generated files such that the ``end'' user does\n # not have to rebuild them.\n-#\n-# Please also update the FAQ accordingly if you change the list of\n-# files below.  Note that generated files should be touched only\n-# after the corresponding *.y files.\n-touch_files()\n-{\n-    touch `find . -name configure -print`\n-    touch `find texinfo -name Makefile.in -print`\n-    touch `find texinfo -name \\*.pot -print`\n-    touch `find texinfo -name \\*.gmo -print`\n-    for f in gcc/c-parse.y \\\n-\t     gcc/c-parse.h \\\n-\t     gcc/c-parse.c \\\n-\t     gcc/cstamp-h.in \\\n-\t     gcc/c-gperf.h \\\n-\t     gcc/cexp.c \\\n-\t     gcc/cp/parse.c \\\n-\t     gcc/cp/parse.h \\\n-\t     gcc/objc/objc-parse.y \\\n-\t     gcc/objc/objc-parse.c \\\n-\t     gcc/java/parse.h \\\n-\t     gcc/java/parse.c \\\n-\t     gcc/java/parse-scan.c \\\n-\t     libf2c/libU77/stamp-h.in \\\n-\t     contrib/fixinc/fixincl.x \\\n-\t     contrib/fixinc/inclhack.sh \\\n-\t     contrib/fixinc/fixincl.sh \\\n-\t     gcc/fixinc/fixincl.x \\\n-\t     gcc/fixinc/inclhack.sh \\\n-\t     gcc/fixinc/fixincl.sh\n-    do\n-\tif [ -f $f ]; then\n+touch_files () {\n+    files_and_dependencies | while read f deps; do\n+\tif test -f $f && is_out_of_date \"$f\" $deps; then\n+\t    echo Touching \"$f\"...\n \t    touch $f\n+\t    if is_out_of_date \"$f\" $deps; then\n+\t\t# Hmm, it may have got the same timestamp as one of\n+\t\t# its touched dependencies.  Wait a second and retry\n+\t\tsleep 1\n+\t\ttouch $f\n+\t    fi\n \tfi\n     done\n }\n \n \n # This functions applies a patch to an existing tree.\n-apply_patch()\n-{\n+apply_patch () {\n     if [ -f $1 ]; then\n \techo \"Applying patch file $1\"\n \tcase \"$1\" in\n@@ -87,25 +126,56 @@ apply_patch()\n \t    cat $1 | patch -p1 ;;\n \tesac\n     fi\n-    echo \"Updating file timestamps\"\n+    echo \"Adjusting file timestamps\"\n     touch_files\n }\n \n-\n-# This is where the actual processing starts.\n-echo \"Current directory is `pwd`.\"\n-\n # Check whether this indeed looks like a local tree.\n if [ ! -f gcc/version.c ]; then\n     echo \"This does not seem to be an egcs tree!\"\n     exit\n fi\n \n+case \"$1\" in\n # First of all, check whether we are going to process a patch.\n-if [ x\"${1}\"x = x\"--patch\"x ]; then\n-    apply_patch ${2}\n-    exit 0\n-fi\n+--patch) \n+    if test \"$#\" != 2; then\n+        echo \"$1\" expects only one argument >&2\n+\texit 1\n+    fi\n+    apply_patch \"${2}\"\n+    exit $?\n+    ;;\n+\n+--touch)\n+    if test \"$#\" != 1; then\n+        echo \"$1\" does not expect any argument >&2\n+\texit 1\n+    fi\n+    touch_files\n+    exit $?\n+    ;;\n+\n+--list)\n+    if test \"$#\" != 1; then\n+        echo \"$1\" does not expect any argument >&2\n+\texit 1\n+    fi\n+    files_and_dependencies | sed 's/ /: /'\n+    exit $?\n+    ;;\n+\n+--help)\n+    sed -e '1,2d' -e '/^UPDATE_OPTIONS=/{i\\\n+\\\n+\n+p\n+}' \\\n+\t-e '/^$/,$d' -e 's/#//' -e 's/^ //' < $0\n+    exit $?\n+    ;;\n+\n+esac\n \n # Check whether this indeed looks like a local CVS tree.\n if [ ! -d CVS ]; then\n@@ -120,29 +190,12 @@ else\n     set -- $UPDATE_OPTIONS ${1+\"$@\"}\n fi\n \n-\n-echo \"Pass 1: Updating autoconf and bison generated files\"\n-# Do a CVS update on those files that exist in CVS directories.  libg++\n-# makes sense to drop into the tree, but it isn't CVS-controlled.\n-X=`for i in \\`find . -name configure.in -o -name '*.y'\\`\n-do\n-    D=\\`dirname $i\\`/CVS\n-    if [ -f $i -a -d $D ]; then \n-        echo $i\n-    fi\n-done`\n-cvs -q update $X\n-if [ $? -ne 0 ]; then \n-    echo \"CVS update of generated files failed.\" >&2\n-    exit 1\n-fi\n-\n-echo \"Pass 2: Updating full tree\"\n+echo \"Updating CVS tree\"\n cvs -q update ${1+\"$@\"}\n if [ $? -ne 0 ]; then \n     echo \"CVS update of full tree failed.\" >&2\n     exit 1\n fi\n \n-echo \"Pass 3: Fixing local tree\"\n+echo \"Adjusting file timestamps\"\n touch_files"}]}