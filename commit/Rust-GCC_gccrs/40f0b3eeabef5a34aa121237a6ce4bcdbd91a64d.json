{"sha": "40f0b3eeabef5a34aa121237a6ce4bcdbd91a64d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmMGIzZWVhYmVmNWEzNGFhMTIxMjM3YTZjZTRiY2RiZDkxYTY0ZA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-04-28T15:13:42Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-04-28T15:13:42Z"}, "message": "* dwarf2out.c (mem_loc_descriptor): Handle shifts.\n\nFrom-SVN: r81252", "tree": {"sha": "2a79bb82f6bc6c61a5e280fc09264feb49d2c1dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a79bb82f6bc6c61a5e280fc09264feb49d2c1dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f0b3eeabef5a34aa121237a6ce4bcdbd91a64d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f0b3eeabef5a34aa121237a6ce4bcdbd91a64d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f0b3eeabef5a34aa121237a6ce4bcdbd91a64d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f0b3eeabef5a34aa121237a6ce4bcdbd91a64d/comments", "author": null, "committer": null, "parents": [{"sha": "f0e6f845917627613b387adc83e915fafedadb30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e6f845917627613b387adc83e915fafedadb30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e6f845917627613b387adc83e915fafedadb30"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "69cafbbc6a8906daf80c0a77e2c410b270c7d21b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f0b3eeabef5a34aa121237a6ce4bcdbd91a64d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f0b3eeabef5a34aa121237a6ce4bcdbd91a64d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40f0b3eeabef5a34aa121237a6ce4bcdbd91a64d", "patch": "@@ -1,3 +1,7 @@\n+2004-04-28  Paul Brook  <paul@codesourcery.com>\n+\n+\t* dwarf2out.c (mem_loc_descriptor): Handle shifts.\n+\n 2004-04-28  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* gcse.c (find_moveable_store): Do not accept store insns with "}, {"sha": "7f234eebfd249f43f66ac048a16ff39204e11406", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f0b3eeabef5a34aa121237a6ce4bcdbd91a64d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f0b3eeabef5a34aa121237a6ce4bcdbd91a64d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=40f0b3eeabef5a34aa121237a6ce4bcdbd91a64d", "patch": "@@ -8435,6 +8435,7 @@ static dw_loc_descr_ref\n mem_loc_descriptor (rtx rtl, enum machine_mode mode, bool can_use_fbreg)\n {\n   dw_loc_descr_ref mem_loc_result = NULL;\n+  enum dwarf_location_atom op;\n \n   /* Note that for a dynamically sized array, the location we will generate a\n      description of here will be the lowest numbered location which is\n@@ -8576,10 +8577,26 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode, bool can_use_fbreg)\n \t}\n       break;\n \n+    /* If a pseudo-reg is optimized away, it is possible for it to\n+       be replaced with a MEM containing a multiply or shift.  */\n     case MULT:\n+      op = DW_OP_mul;\n+      goto do_binop;\n+\n+    case ASHIFT:\n+      op = DW_OP_shl;\n+      goto do_binop;\n+      \n+    case ASHIFTRT:\n+      op = DW_OP_shra;\n+      goto do_binop;\n+\n+    case LSHIFTRT:\n+      op = DW_OP_shr;\n+      goto do_binop;\n+\n+    do_binop:\n       {\n-\t/* If a pseudo-reg is optimized away, it is possible for it to\n-\t   be replaced with a MEM containing a multiply.  */\n \tdw_loc_descr_ref op0 = mem_loc_descriptor (XEXP (rtl, 0), mode,\n \t\t\t\t\t\t   can_use_fbreg);\n \tdw_loc_descr_ref op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,\n@@ -8590,7 +8607,7 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode, bool can_use_fbreg)\n \n \tmem_loc_result = op0;\n \tadd_loc_descr (&mem_loc_result, op1);\n-\tadd_loc_descr (&mem_loc_result, new_loc_descr (DW_OP_mul, 0, 0));\n+\tadd_loc_descr (&mem_loc_result, new_loc_descr (op, 0, 0));\n \tbreak;\n       }\n "}]}