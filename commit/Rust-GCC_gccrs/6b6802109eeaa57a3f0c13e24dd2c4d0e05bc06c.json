{"sha": "6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2ODAyMTA5ZWVhYTU3YTNmMGMxM2UyNGRkMmM0ZDBlMDViYzA2Yw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2009-04-10T07:23:25Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2009-04-10T07:23:25Z"}, "message": "PR libfortran/39665 libfortran/39702 libfortran/39709\n\n2009-04-10  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/39665 libfortran/39702 libfortran/39709\n\t* io/io.h (st_parameter_dt): Revert aligned attribute from u.p.value.\n        * io/list_read.c (read_complex): Read directly into user pointer.\n        (read_real): Likewise.\n        (list_formatted_read_scalar): Update read_complex and read_real calls.\n        (nml_read_obj): Read directly into user pointer.\n\nFrom-SVN: r145875", "tree": {"sha": "8509c804d12904a38df4e5c47b9757db6a474c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8509c804d12904a38df4e5c47b9757db6a474c6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c/comments", "author": null, "committer": null, "parents": [{"sha": "8b7a6bb2faf84c3d620222c7aff68a87f9f82104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7a6bb2faf84c3d620222c7aff68a87f9f82104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b7a6bb2faf84c3d620222c7aff68a87f9f82104"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "ed6162be68633bb50fe2bf08d0d35c205cda5ba0", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c", "patch": "@@ -1,3 +1,12 @@\n+2009-04-10  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/39665 libfortran/39702 libfortran/39709\n+\t* io/io.h (st_parameter_dt): Revert aligned attribute from u.p.value.\n+        * io/list_read.c (read_complex): Read directly into user pointer.\n+        (read_real): Likewise.\n+        (list_formatted_read_scalar): Update read_complex and read_real calls.\n+        (nml_read_obj): Read directly into user pointer.\n+\n 2009-04-09  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/39665"}, {"sha": "7e4742ec294f577df126297d80502248c59359a0", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c", "patch": "@@ -500,9 +500,8 @@ typedef struct st_parameter_dt\n \t  int expanded_read;\n \t  /* Storage area for values except for strings.  Must be\n \t     large enough to hold a complex value (two reals) of the\n-\t     largest kind.  It must also be sufficiently aligned for\n-\t     assigning any type we use into it.  */\n-\t  char value[32]  __attribute__ ((aligned (__BIGGEST_ALIGNMENT__)));\n+\t     largest kind.  */\n+\t  char value[32];\n \t  GFC_IO_INT size_used;\n \t} p;\n       /* This pad size must be equal to the pad_size declared in"}, {"sha": "7cd1f6089de6703eafb19acf511a0bf97d5a32e7", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=6b6802109eeaa57a3f0c13e24dd2c4d0e05bc06c", "patch": "@@ -1219,7 +1219,7 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n    what it is right away.  */\n \n static void\n-read_complex (st_parameter_dt *dtp, int kind, size_t size)\n+read_complex (st_parameter_dt *dtp, void * dest, int kind, size_t size)\n {\n   char message[100];\n   char c;\n@@ -1243,7 +1243,7 @@ read_complex (st_parameter_dt *dtp, int kind, size_t size)\n     }\n \n   eat_spaces (dtp);\n-  if (parse_real (dtp, dtp->u.p.value, kind))\n+  if (parse_real (dtp, dest, kind))\n     return;\n \n eol_1:\n@@ -1266,7 +1266,7 @@ read_complex (st_parameter_dt *dtp, int kind, size_t size)\n   else\n     unget_char (dtp, c);\n \n-  if (parse_real (dtp, dtp->u.p.value + size / 2, kind))\n+  if (parse_real (dtp, dest + size / 2, kind))\n     return;\n \n   eat_spaces (dtp);\n@@ -1300,7 +1300,7 @@ read_complex (st_parameter_dt *dtp, int kind, size_t size)\n /* Parse a real number with a possible repeat count.  */\n \n static void\n-read_real (st_parameter_dt *dtp, int length)\n+read_real (st_parameter_dt *dtp, void * dest, int length)\n {\n   char c, message[100];\n   int seen_dp;\n@@ -1513,7 +1513,7 @@ read_real (st_parameter_dt *dtp, int length)\n   unget_char (dtp, c);\n   eat_separator (dtp);\n   push_char (dtp, '\\0');\n-  if (convert_real (dtp, dtp->u.p.value, dtp->u.p.saved_string, length))\n+  if (convert_real (dtp, dest, dtp->u.p.saved_string, length))\n     return;\n \n   free_saved (dtp);\n@@ -1757,10 +1757,16 @@ list_formatted_read_scalar (st_parameter_dt *dtp, volatile bt type, void *p,\n       read_character (dtp, kind);\n       break;\n     case BT_REAL:\n-      read_real (dtp, kind);\n+      read_real (dtp, p, kind);\n+      /* Copy value back to temporary if needed.  */\n+      if (dtp->u.p.repeat_count > 0)\n+\tmemcpy (dtp->u.p.value, p, kind);\n       break;\n     case BT_COMPLEX:\n-      read_complex (dtp, kind, size);\n+      read_complex (dtp, p, kind, size);\n+      /* Copy value back to temporary if needed.  */\n+      if (dtp->u.p.repeat_count > 0)\n+\tmemcpy (dtp->u.p.value, p, size);\n       break;\n     default:\n       internal_error (&dtp->common, \"Bad type for list read\");\n@@ -1776,8 +1782,12 @@ list_formatted_read_scalar (st_parameter_dt *dtp, volatile bt type, void *p,\n   switch (dtp->u.p.saved_type)\n     {\n     case BT_COMPLEX:\n-    case BT_INTEGER:\n     case BT_REAL:\n+      if (dtp->u.p.repeat_count > 0)\n+\tmemcpy (p, dtp->u.p.value, size);\n+      break;\n+\n+    case BT_INTEGER:\n     case BT_LOGICAL:\n       memcpy (p, dtp->u.p.value, size);\n       break;\n@@ -2379,12 +2389,17 @@ nml_read_obj (st_parameter_dt *dtp, namelist_info * nl, index_type offset,\n               break;\n \n \t  case GFC_DTYPE_REAL:\n-\t      read_real (dtp, len);\n-              break;\n+\t    /* Need to copy data back from the real location to the temp in order\n+\t       to handle nml reads into arrays.  */\n+\t    read_real (dtp, pdata, len);\n+\t    memcpy (dtp->u.p.value, pdata, dlen);\n+\t    break;\n \n \t  case GFC_DTYPE_COMPLEX:\n-              read_complex (dtp, len, dlen);\n-              break;\n+\t    /* Same as for REAL, copy back to temp.  */\n+\t    read_complex (dtp, pdata, len, dlen);\n+\t    memcpy (dtp->u.p.value, pdata, dlen);\n+\t    break;\n \n \t  case GFC_DTYPE_DERIVED:\n \t    obj_name_len = strlen (nl->var_name) + 1;"}]}