{"sha": "ac32b25eb886014b94e40d2e74f30a826321281c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMzMmIyNWViODg2MDE0Yjk0ZTQwZDJlNzRmMzBhODI2MzIxMjgxYw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-10-18T22:24:37Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-10-18T22:24:37Z"}, "message": "s390-protos.h (shift_count_operand): Add prototype.\n\n\t* config/s390/s390-protos.h (shift_count_operand): Add prototype.\n\t* config/s390/s390.c (shift_count_operand): New function.\n\t(s390_extra_constraint): Use it to implement 'Y' constraint.\n\t(print_shift_count_operand): New function.\n\t(print_operand): Use it to implement '%Y'.\n\t* config/s390/s390.h (EXTRA_ADDRESS_CONSTRAINT): Add 'Y' constraint.\n\t(PREDICATE_CODES): Add shift_count_operand.\n\t* config/s390/s390.md (\"rotldi3\"): Merge alternatives,\n\tusing \"shift_count_operand\" predicate and \"Y\" constraint,\n\tand \"%Y\" to output the combined shift count.\n\t(\"rotlsi3\"): Likewise.\n\t(\"ashldi3\", \"*ashldi3_31\", \"*ashldi3_64\"): Likewise.\n\t(\"ashrdi3\", \"*ashrdi3_31\", \"*ashrdi3_64\", \"*ashrdi3_cc_31\",\n\t\"*ashrdi3_cc_64\", \"*ashrdi3_cconly_31\", \"*ashrdi3_cconly_64\"): Likewise.\n\t(\"ashlsi3\", \"ashrsi3\", \"*ashrsi3_cc\", \"*ashrsi3_cconly\"): Likewise.\n\t(\"lshrdi3\", \"*lshrdi3_31\", \"*lshrdi3_64\"): Likewise.\n\t(\"lshrsi3\"): Likewise.\n\nFrom-SVN: r72661", "tree": {"sha": "1ec458ae3955d192bce62e0f9e4f651478b1cad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ec458ae3955d192bce62e0f9e4f651478b1cad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac32b25eb886014b94e40d2e74f30a826321281c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac32b25eb886014b94e40d2e74f30a826321281c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac32b25eb886014b94e40d2e74f30a826321281c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac32b25eb886014b94e40d2e74f30a826321281c/comments", "author": null, "committer": null, "parents": [{"sha": "3f12a2e0b4e0b124bc59fa8a8296e0698d9adde2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f12a2e0b4e0b124bc59fa8a8296e0698d9adde2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f12a2e0b4e0b124bc59fa8a8296e0698d9adde2"}], "stats": {"total": 286, "additions": 178, "deletions": 108}, "files": [{"sha": "7810f95d336a7132127692c318cf0ffd2f6d22db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac32b25eb886014b94e40d2e74f30a826321281c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac32b25eb886014b94e40d2e74f30a826321281c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac32b25eb886014b94e40d2e74f30a826321281c", "patch": "@@ -1,3 +1,23 @@\n+2003-10-18  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (shift_count_operand): Add prototype.\n+\t* config/s390/s390.c (shift_count_operand): New function.\n+\t(s390_extra_constraint): Use it to implement 'Y' constraint.\n+\t(print_shift_count_operand): New function.\n+\t(print_operand): Use it to implement '%Y'.\n+\t* config/s390/s390.h (EXTRA_ADDRESS_CONSTRAINT): Add 'Y' constraint.\n+\t(PREDICATE_CODES): Add shift_count_operand.\n+\t* config/s390/s390.md (\"rotldi3\"): Merge alternatives, \n+\tusing \"shift_count_operand\" predicate and \"Y\" constraint,\n+\tand \"%Y\" to output the combined shift count.\n+\t(\"rotlsi3\"): Likewise.\n+\t(\"ashldi3\", \"*ashldi3_31\", \"*ashldi3_64\"): Likewise.\n+\t(\"ashrdi3\", \"*ashrdi3_31\", \"*ashrdi3_64\", \"*ashrdi3_cc_31\", \n+\t\"*ashrdi3_cc_64\", \"*ashrdi3_cconly_31\", \"*ashrdi3_cconly_64\"): Likewise.\n+\t(\"ashlsi3\", \"ashrsi3\", \"*ashrsi3_cc\", \"*ashrsi3_cconly\"): Likewise.\n+\t(\"lshrdi3\", \"*lshrdi3_31\", \"*lshrdi3_64\"): Likewise.\n+\t(\"lshrsi3\"): Likewise.\n+\n 2003-10-18  Gunther Nikl  <gni@gecko.de>\n \n \t* config/m68k/m68k.c (m68k_output_function_epilogue): Add missing"}, {"sha": "e99de323336bb186dd2ff7017d4c25b4a8fc9cbc", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac32b25eb886014b94e40d2e74f30a826321281c/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac32b25eb886014b94e40d2e74f30a826321281c/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=ac32b25eb886014b94e40d2e74f30a826321281c", "patch": "@@ -36,6 +36,7 @@ extern int consttable_operand (rtx, enum machine_mode);\n extern int larl_operand (rtx, enum machine_mode);\n extern int s_operand (rtx, enum machine_mode);\n extern int s_imm_operand (rtx, enum machine_mode);\n+extern int shift_count_operand (rtx, enum machine_mode);\n extern int bras_sym_operand (rtx, enum machine_mode);\n extern int load_multiple_operation (rtx, enum machine_mode);\n extern int store_multiple_operation (rtx, enum machine_mode);"}, {"sha": "10a69676f8b1b007470c88f6f8431bb8827639e6", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac32b25eb886014b94e40d2e74f30a826321281c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac32b25eb886014b94e40d2e74f30a826321281c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=ac32b25eb886014b94e40d2e74f30a826321281c", "patch": "@@ -211,6 +211,7 @@ static int s390_short_displacement (rtx);\n static int s390_decompose_address (rtx, struct s390_address *);\n static rtx get_thread_pointer (void);\n static rtx legitimize_tls_address (rtx, rtx);\n+static void print_shift_count_operand (FILE *, rtx);\n static const char *get_some_local_dynamic_name (void);\n static int get_some_local_dynamic_name_1 (rtx *, void *);\n static int reg_used_in_mem_p (int, rtx);\n@@ -1274,6 +1275,45 @@ s_imm_operand (register rtx op, enum machine_mode mode)\n   return general_s_operand (op, mode, 1);\n }\n \n+/* Return true if OP a valid shift count operand.\n+   OP is the current operation.\n+   MODE is the current operation mode.  */\n+\n+int\n+shift_count_operand (rtx op, enum machine_mode mode)\n+{\n+  HOST_WIDE_INT offset = 0;\n+\n+  if (! check_mode (op, &mode))\n+    return 0;\n+\n+  /* We can have an integer constant, an address register,\n+     or a sum of the two.  Note that reload already checks\n+     that any register present is an address register, so\n+     we just check for any register here.  */\n+  if (GET_CODE (op) == CONST_INT)\n+    {\n+      offset = INTVAL (op);\n+      op = NULL_RTX;\n+    }\n+  if (op && GET_CODE (op) == PLUS && GET_CODE (XEXP (op, 1)) == CONST_INT)\n+    {\n+      offset = INTVAL (XEXP (op, 1));\n+      op = XEXP (op, 0);\n+    }\n+  while (op && GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+  if (op && GET_CODE (op) != REG)\n+    return 0;\n+\n+  /* Unfortunately we have to reject constants that are invalid\n+     for an address, or else reload will get confused.  */\n+  if (!DISP_IN_RANGE (offset))\n+    return 0;\n+\n+  return 1;\n+}\n+\n /* Return true if DISP is a valid short displacement.  */\n \n static int\n@@ -1383,6 +1423,9 @@ s390_extra_constraint (rtx op, int c)\n \treturn 0;\n       break;\n \n+    case 'Y':\n+      return shift_count_operand (op, VOIDmode);\n+\n     default:\n       return 0;\n     }\n@@ -3281,6 +3324,40 @@ s390_delegitimize_address (rtx orig_x)\n   return orig_x;\n }\n \n+/* Output shift count operand OP to stdio stream FILE.  */\n+\n+static void\n+print_shift_count_operand (FILE *file, rtx op)\n+{\n+  HOST_WIDE_INT offset = 0;\n+\n+  /* We can have an integer constant, an address register,\n+     or a sum of the two.  */\n+  if (GET_CODE (op) == CONST_INT)\n+    {\n+      offset = INTVAL (op);\n+      op = NULL_RTX;\n+    }\n+  if (op && GET_CODE (op) == PLUS && GET_CODE (XEXP (op, 1)) == CONST_INT)\n+    {\n+      offset = INTVAL (XEXP (op, 1));\n+      op = XEXP (op, 0);\n+    }\n+  while (op && GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+\n+  /* Sanity check.  */\n+  if (op && (GET_CODE (op) != REG\n+\t     || REGNO (op) >= FIRST_PSEUDO_REGISTER\n+\t     || REGNO_REG_CLASS (REGNO (op)) != ADDR_REGS))\n+    abort ();\n+\n+  /* Shift counts are truncated to the low six bits anyway.  */\n+  fprintf (file, HOST_WIDE_INT_PRINT_DEC, offset & 63);\n+  if (op)\n+    fprintf (file, \"(%s)\", reg_names[REGNO (op)]);\n+}\n+\n /* Locate some local-dynamic symbol still in use by this function\n    so that we can print its name in local-dynamic base patterns.  */\n \n@@ -3451,6 +3528,7 @@ print_operand_address (FILE *file, rtx addr)\n     'R': print only the base register of a memory reference.\n     'N': print the second word of a DImode operand.\n     'M': print the second word of a TImode operand.\n+    'Y': print shift count operand.\n \n     'b': print integer X as if it's an unsigned byte.\n     'x': print integer X as if it's an unsigned word.\n@@ -3540,6 +3618,10 @@ print_operand (FILE *file, rtx x, int code)\n       else\n         abort ();\n       break;\n+\n+    case 'Y':\n+      print_shift_count_operand (file, x);\n+      return;\n     }\n \n   switch (GET_CODE (x))"}, {"sha": "1463b5035b642a6368830c744cdc2d937fc7b791", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac32b25eb886014b94e40d2e74f30a826321281c/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac32b25eb886014b94e40d2e74f30a826321281c/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=ac32b25eb886014b94e40d2e74f30a826321281c", "patch": "@@ -544,7 +544,7 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n #define EXTRA_MEMORY_CONSTRAINT(C, STR)\t\t\t\t\\\n   ((C) == 'Q' || (C) == 'R' || (C) == 'S' || (C) == 'T')\n #define EXTRA_ADDRESS_CONSTRAINT(C, STR)\t\t\t\\\n-  ((C) == 'U' || (C) == 'W')\n+  ((C) == 'U' || (C) == 'W' || (C) == 'Y')\n \n \n /* Stack layout and calling conventions.  */\n@@ -1023,6 +1023,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define PREDICATE_CODES\t\t\t\t\t\t\t\\\n   {\"s_operand\",       { SUBREG, MEM }},\t\t\t\t\t\\\n   {\"s_imm_operand\",   { CONST_INT, CONST_DOUBLE, SUBREG, MEM }},\t\\\n+  {\"shift_count_operand\", { REG, SUBREG, PLUS, CONST_INT }},\t\t\\\n   {\"bras_sym_operand\",{ SYMBOL_REF, CONST }},\t\t\t\t\\\n   {\"larl_operand\",    { SYMBOL_REF, CONST, CONST_INT, CONST_DOUBLE }},\t\\\n   {\"load_multiple_operation\", {PARALLEL}},\t\t\t        \\"}, {"sha": "9b3d009a7f2e67b2222297f6ccc706f7d878af82", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 73, "deletions": 107, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac32b25eb886014b94e40d2e74f30a826321281c/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac32b25eb886014b94e40d2e74f30a826321281c/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=ac32b25eb886014b94e40d2e74f30a826321281c", "patch": "@@ -5982,13 +5982,11 @@\n ;\n \n (define_insn \"rotldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(rotate:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(rotate:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t   (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n   \"TARGET_64BIT\"\n-  \"@\n-   rllg\\t%0,%1,%c2\n-   rllg\\t%0,%1,0(%2)\"\n+  \"rllg\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")])\n \n@@ -5997,13 +5995,11 @@\n ;\n \n (define_insn \"rotlsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(rotate:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(rotate:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+\t\t   (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n   \"TARGET_CPU_ZARCH\"\n-  \"@\n-   rll\\t%0,%1,%c2\n-   rll\\t%0,%1,0(%2)\"\n+  \"rll\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")])\n \n@@ -6019,29 +6015,25 @@\n (define_expand \"ashldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                   (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n+                   (match_operand:SI 2 \"shift_count_operand\" \"\")))]\n   \"\"\n   \"\")\n \n (define_insn \"*ashldi3_31\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (ashift:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (ashift:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+                   (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n   \"!TARGET_64BIT\"\n-  \"@\n-   sldl\\t%0,%c2\n-   sldl\\t%0,0(%2)\"\n+  \"sldl\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n (define_insn \"*ashldi3_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (ashift:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-                   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (ashift:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+                   (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n   \"TARGET_64BIT\"\n-  \"@\n-   sllg\\t%0,%1,%2\n-   sllg\\t%0,%1,0(%2)\"\n+  \"sllg\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")])\n \n@@ -6053,86 +6045,74 @@\n   [(parallel\n     [(set (match_operand:DI 0 \"register_operand\" \"\")\n           (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                       (match_operand:SI 2 \"nonmemory_operand\" \"\")))\n+                       (match_operand:SI 2 \"shift_count_operand\" \"\")))\n      (clobber (reg:CC 33))])]\n   \"\"\n   \"\")\n \n (define_insn \"*ashrdi3_cc_31\"\n   [(set (reg 33)\n-        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                              (match_operand:SI 2 \"nonmemory_operand\" \"J,a\"))\n+        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+                              (match_operand:SI 2 \"shift_count_operand\" \"Y\"))\n                  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (ashiftrt:DI (match_dup 1) (match_dup 2)))]\n   \"!TARGET_64BIT && s390_match_ccmode(insn, CCSmode)\"\n-  \"@\n-   srda\\t%0,%c2\n-   srda\\t%0,0(%2)\"\n+  \"srda\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n (define_insn \"*ashrdi3_cconly_31\"\n   [(set (reg 33)\n-        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                              (match_operand:SI 2 \"nonmemory_operand\" \"J,a\"))\n+        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+                              (match_operand:SI 2 \"shift_count_operand\" \"Y\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:DI 0 \"=d,d\"))]\n+   (clobber (match_scratch:DI 0 \"=d\"))]\n   \"!TARGET_64BIT && s390_match_ccmode(insn, CCSmode)\"\n-  \"@\n-   srda\\t%0,%c2\n-   srda\\t%0,0(%2)\"\n+  \"srda\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n (define_insn \"*ashrdi3_31\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                     (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+                     (match_operand:SI 2 \"shift_count_operand\" \"Y\")))\n    (clobber (reg:CC 33))]\n   \"!TARGET_64BIT\"\n-  \"@\n-   srda\\t%0,%c2\n-   srda\\t%0,0(%2)\"\n+  \"srda\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n (define_insn \"*ashrdi3_cc_64\"\n   [(set (reg 33)\n-        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-                              (match_operand:SI 2 \"nonmemory_operand\" \"J,a\"))\n+        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+                              (match_operand:SI 2 \"shift_count_operand\" \"Y\"))\n                  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (ashiftrt:DI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n-  \"@\n-   srag\\t%0,%1,%c2\n-   srag\\t%0,%1,0(%2)\"\n+  \"srag\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")])\n \n (define_insn \"*ashrdi3_cconly_64\"\n   [(set (reg 33)\n-        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-                              (match_operand:SI 2 \"nonmemory_operand\" \"J,a\"))\n+        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+                              (match_operand:SI 2 \"shift_count_operand\" \"Y\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:DI 0 \"=d,d\"))]\n+   (clobber (match_scratch:DI 0 \"=d\"))]\n   \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n-  \"@\n-   srag\\t%0,%1,%c2\n-   srag\\t%0,%1,0(%2)\"\n+  \"srag\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")])\n \n (define_insn \"*ashrdi3_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-                     (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+                     (match_operand:SI 2 \"shift_count_operand\" \"Y\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT\"\n-  \"@\n-   srag\\t%0,%1,%c2\n-   srag\\t%0,%1,0(%2)\"\n+  \"srag\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")])\n \n@@ -6142,13 +6122,11 @@\n ;\n \n (define_insn \"ashlsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (ashift:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n-                   (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                   (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n   \"\"\n-  \"@\n-   sll\\t%0,%c2\n-   sll\\t%0,0(%2)\"\n+  \"sll\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n@@ -6158,41 +6136,35 @@\n \n (define_insn \"*ashrsi3_cc\"\n   [(set (reg 33)\n-        (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n-                              (match_operand:SI 2 \"nonmemory_operand\" \"J,a\"))\n+        (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                              (match_operand:SI 2 \"shift_count_operand\" \"Y\"))\n                  (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (ashiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCSmode)\"\n-  \"@\n-   sra\\t%0,%c2\n-   sra\\t%0,0(%2)\"\n+  \"sra\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n \n (define_insn \"*ashrsi3_cconly\"\n   [(set (reg 33)\n-        (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n-                              (match_operand:SI 2 \"nonmemory_operand\" \"J,a\"))\n+        (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                              (match_operand:SI 2 \"shift_count_operand\" \"Y\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=d,d\"))]\n+   (clobber (match_scratch:SI 0 \"=d\"))]\n   \"s390_match_ccmode(insn, CCSmode)\"\n-  \"@\n-   sra\\t%0,%c2\n-   sra\\t%0,0(%2)\"\n+  \"sra\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n (define_insn \"ashrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n-                     (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                     (match_operand:SI 2 \"shift_count_operand\" \"Y\")))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"@\n-   sra\\t%0,%c2\n-   sra\\t%0,0(%2)\"\n+  \"sra\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n@@ -6208,44 +6180,38 @@\n (define_expand \"lshrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                     (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n+                     (match_operand:SI 2 \"shift_count_operand\" \"\")))]\n   \"\"\n   \"\")\n \n (define_insn \"*lshrdi3_31\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                     (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+                     (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n   \"!TARGET_64BIT\"\n-  \"@\n-   srdl\\t%0,%c2\n-   srdl\\t%0,0(%2)\"\n-   [(set_attr \"op_type\"  \"RS,RS\")\n+  \"srdl\\t%0,%Y2\"\n+   [(set_attr \"op_type\"  \"RS\")\n     (set_attr \"atype\"    \"reg\")])\n \n (define_insn \"*lshrdi3_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-                     (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+                     (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n   \"TARGET_64BIT\"\n-  \"@\n-   srlg\\t%0,%1,%c2\n-   srlg\\t%0,%1,0(%2)\"\n-  [(set_attr \"op_type\"  \"RSE,RSE\")\n+  \"srlg\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")])\n \n ;\n ; lshrsi3 instruction pattern(s).\n ;\n \n (define_insn \"lshrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n-                     (match_operand:SI 2 \"nonmemory_operand\" \"J,a\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                     (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n   \"\"\n-  \"@\n-   srl\\t%0,%c2\n-   srl\\t%0,0(%2)\"\n+  \"srl\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n "}]}