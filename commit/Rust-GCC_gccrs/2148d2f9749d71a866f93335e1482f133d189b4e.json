{"sha": "2148d2f9749d71a866f93335e1482f133d189b4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE0OGQyZjk3NDlkNzFhODY2ZjkzMzM1ZTE0ODJmMTMzZDE4OWI0ZQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-11T18:44:35Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-19T13:36:10Z"}, "message": "refactor code into cc file", "tree": {"sha": "af49a9ba9cab830fb8f16129a36c74a4514ca50f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af49a9ba9cab830fb8f16129a36c74a4514ca50f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2148d2f9749d71a866f93335e1482f133d189b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2148d2f9749d71a866f93335e1482f133d189b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2148d2f9749d71a866f93335e1482f133d189b4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2148d2f9749d71a866f93335e1482f133d189b4e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "387f73626ae0e04c3f81d71d4de6780a4caad052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387f73626ae0e04c3f81d71d4de6780a4caad052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387f73626ae0e04c3f81d71d4de6780a4caad052"}], "stats": {"total": 109, "additions": 72, "deletions": 37}, "files": [{"sha": "0d0ca1d3ebcf77fc5a763b26e5a24c1b651e8c72", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2148d2f9749d71a866f93335e1482f133d189b4e/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2148d2f9749d71a866f93335e1482f133d189b4e/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=2148d2f9749d71a866f93335e1482f133d189b4e", "patch": "@@ -80,6 +80,7 @@ GRS_OBJS = \\\n     rust/rust-tyty.o \\\n     rust/rust-tyctx.o \\\n     rust/rust-tyty-bounds.o \\\n+    rust/rust-hir-trait-resolve.o \\\n     rust/rust-hir-const-fold.o \\\n     rust/rust-lint-marklive.o \\\n     $(END)"}, {"sha": "53566369889c4f9f91a98038345d21758a737a11", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2148d2f9749d71a866f93335e1482f133d189b4e/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2148d2f9749d71a866f93335e1482f133d189b4e/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=2148d2f9749d71a866f93335e1482f133d189b4e", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-hir-trait-resolve.h\"\n+\n+namespace Rust {\n+namespace Resolver {\n+\n+void\n+ResolveTraitItemToRef::visit (HIR::TraitItemType &type)\n+{\n+  TyTy::BaseType *ty\n+    = new TyTy::PlaceholderType (type.get_mappings ().get_hirid ());\n+  context->insert_type (type.get_mappings (), ty);\n+\n+  // create trait-item-ref\n+  Location locus = type.get_locus ();\n+  bool is_optional = false;\n+  std::string identifier = type.get_name ();\n+\n+  resolved = TraitItemReference (identifier, is_optional,\n+\t\t\t\t TraitItemReference::TraitItemType::TYPE, &type,\n+\t\t\t\t self, substitutions, locus);\n+}\n+\n+void\n+ResolveTraitItemToRef::visit (HIR::TraitItemConst &cst)\n+{\n+  // create trait-item-ref\n+  Location locus = cst.get_locus ();\n+  bool is_optional = cst.has_expr ();\n+  std::string identifier = cst.get_name ();\n+\n+  resolved = TraitItemReference (identifier, is_optional,\n+\t\t\t\t TraitItemReference::TraitItemType::CONST, &cst,\n+\t\t\t\t self, substitutions, locus);\n+}\n+\n+void\n+ResolveTraitItemToRef::visit (HIR::TraitItemFunc &fn)\n+{\n+  // create trait-item-ref\n+  Location locus = fn.get_locus ();\n+  bool is_optional = fn.has_block_defined ();\n+  std::string identifier = fn.get_decl ().get_function_name ();\n+\n+  resolved = TraitItemReference (identifier, is_optional,\n+\t\t\t\t TraitItemReference::TraitItemType::FN, &fn,\n+\t\t\t\t self, substitutions, locus);\n+}\n+\n+} // namespace Resolver\n+} // namespace Rust"}, {"sha": "6507bca2d057d8296774b3eccb34d39a4c7b242a", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.h", "status": "modified", "additions": 3, "deletions": 37, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2148d2f9749d71a866f93335e1482f133d189b4e/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2148d2f9749d71a866f93335e1482f133d189b4e/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h?ref=2148d2f9749d71a866f93335e1482f133d189b4e", "patch": "@@ -42,45 +42,11 @@ class ResolveTraitItemToRef : public TypeCheckBase\n     return resolver.resolved;\n   }\n \n-  void visit (HIR::TraitItemType &type) override\n-  {\n-    TyTy::BaseType *ty\n-      = new TyTy::PlaceholderType (type.get_mappings ().get_hirid ());\n-    context->insert_type (type.get_mappings (), ty);\n-\n-    // create trait-item-ref\n-    Location locus = type.get_locus ();\n-    bool is_optional = false;\n-    std::string identifier = type.get_name ();\n-\n-    resolved = TraitItemReference (identifier, is_optional,\n-\t\t\t\t   TraitItemReference::TraitItemType::TYPE,\n-\t\t\t\t   &type, self, substitutions, locus);\n-  }\n+  void visit (HIR::TraitItemType &type) override;\n \n-  void visit (HIR::TraitItemConst &cst) override\n-  {\n-    // create trait-item-ref\n-    Location locus = cst.get_locus ();\n-    bool is_optional = cst.has_expr ();\n-    std::string identifier = cst.get_name ();\n-\n-    resolved = TraitItemReference (identifier, is_optional,\n-\t\t\t\t   TraitItemReference::TraitItemType::CONST,\n-\t\t\t\t   &cst, self, substitutions, locus);\n-  }\n+  void visit (HIR::TraitItemConst &cst) override;\n \n-  void visit (HIR::TraitItemFunc &fn) override\n-  {\n-    // create trait-item-ref\n-    Location locus = fn.get_locus ();\n-    bool is_optional = fn.has_block_defined ();\n-    std::string identifier = fn.get_decl ().get_function_name ();\n-\n-    resolved = TraitItemReference (identifier, is_optional,\n-\t\t\t\t   TraitItemReference::TraitItemType::FN, &fn,\n-\t\t\t\t   self, substitutions, locus);\n-  }\n+  void visit (HIR::TraitItemFunc &fn) override;\n \n private:\n   ResolveTraitItemToRef ("}]}