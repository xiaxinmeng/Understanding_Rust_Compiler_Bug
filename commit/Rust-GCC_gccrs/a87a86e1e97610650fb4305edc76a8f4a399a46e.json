{"sha": "a87a86e1e97610650fb4305edc76a8f4a399a46e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg3YTg2ZTFlOTc2MTA2NTBmYjQzMDVlZGM3NmE4ZjRhMzk5YTQ2ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-11-20T20:08:47Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-11-20T20:08:47Z"}, "message": "PR 62314: add ability to add fixit-hints to a diagnostic\n\nThis is the combination of two patches:\n  [PATCH 01/02] PR/62314: add ability to add fixit-hints\n  [PATCH 02/02] C FE: add fix-it hint for . vs ->\n\ngcc/ChangeLog:\n\tPR 62314\n\t* diagnostic-show-locus.c (colorizer::set_fixit_hint): New.\n\t(class layout): Update comment\n\t(layout::print_any_fixits): New method.\n\t(layout::move_to_column): New method.\n\t(diagnostic_show_locus): Add call to layout.print_any_fixits.\n\ngcc/c/ChangeLog:\n\tPR 62314\n\t* c-typeck.c (should_suggest_deref_p): New function.\n\t(build_component_ref): Special-case POINTER_TYPE when\n\tgenerating a \"not a structure of union\"  error message, and\n\tsuggest a \"->\" rather than a \".\", providing a fix-it hint.\n\ngcc/testsuite/ChangeLog:\n\tPR 62314\n\t* gcc.dg/fixits.c: New file.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-ascii-bw.c\n\t(test_fixit_insert): New.\n\t(test_fixit_remove): New.\n\t(test_fixit_replace): New.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-ascii-color.c\n\t(test_fixit_insert): New.\n\t(test_fixit_remove): New.\n\t(test_fixit_replace): New.\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n\t(test_show_locus): Add tests of rendering fixit hints.\n\nlibcpp/ChangeLog:\n\tPR 62314\n\t* include/line-map.h (source_range::intersects_line_p): New\n\tmethod.\n\t(rich_location::~rich_location): New.\n\t(rich_location::add_fixit_insert): New method.\n\t(rich_location::add_fixit_remove): New method.\n\t(rich_location::add_fixit_replace): New method.\n\t(rich_location::get_num_fixit_hints): New accessor.\n\t(rich_location::get_fixit_hint): New accessor.\n\t(rich_location::MAX_FIXIT_HINTS): New constant.\n\t(rich_location::m_num_fixit_hints): New field.\n\t(rich_location::m_fixit_hints): New field.\n\t(class fixit_hint): New class.\n\t(class fixit_insert): New class.\n\t(class fixit_remove): New class.\n\t(class fixit_replace): New class.\n\t* line-map.c (source_range::intersects_line_p): New method.\n\t(rich_location::rich_location): Add initialization of\n\tm_num_fixit_hints to both ctors.\n\t(rich_location::~rich_location): New.\n\t(rich_location::add_fixit_insert): New method.\n\t(rich_location::add_fixit_remove): New method.\n\t(rich_location::add_fixit_replace): New method.\n\t(fixit_insert::fixit_insert): New.\n\t(fixit_insert::~fixit_insert): New.\n\t(fixit_insert::affects_line_p): New.\n\t(fixit_remove::fixit_remove): New.\n\t(fixit_remove::affects_line_p): New.\n\t(fixit_replace::fixit_replace): New.\n\t(fixit_replace::~fixit_replace): New.\n\t(fixit_replace::affects_line_p): New.\n\nFrom-SVN: r230674", "tree": {"sha": "f65f921f35a1b100513886cbde83b0f1b31e72d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f65f921f35a1b100513886cbde83b0f1b31e72d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a87a86e1e97610650fb4305edc76a8f4a399a46e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87a86e1e97610650fb4305edc76a8f4a399a46e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a87a86e1e97610650fb4305edc76a8f4a399a46e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87a86e1e97610650fb4305edc76a8f4a399a46e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48a78aee68fe0d88f01fcdef61782b4f8008f651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a78aee68fe0d88f01fcdef61782b4f8008f651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48a78aee68fe0d88f01fcdef61782b4f8008f651"}], "stats": {"total": 605, "additions": 598, "deletions": 7}, "files": [{"sha": "54ae9221fce92ff42a6175f0e2192d5bdd0a8c0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a87a86e1e97610650fb4305edc76a8f4a399a46e", "patch": "@@ -1,3 +1,12 @@\n+2015-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 62314\n+\t* diagnostic-show-locus.c (colorizer::set_fixit_hint): New.\n+\t(class layout): Update comment\n+\t(layout::print_any_fixits): New method.\n+\t(layout::move_to_column): New method.\n+\t(diagnostic_show_locus): Add call to layout.print_any_fixits.\n+\n 2015-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/68221"}, {"sha": "96c5823d66cbc35246974cf3948a2d8c5ec12382", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a87a86e1e97610650fb4305edc76a8f4a399a46e", "patch": "@@ -1,3 +1,11 @@\n+2015-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 62314\n+\t* c-typeck.c (should_suggest_deref_p): New function.\n+\t(build_component_ref): Special-case POINTER_TYPE when\n+\tgenerating a \"not a structure of union\"  error message, and\n+\tsuggest a \"->\" rather than a \".\", providing a fix-it hint.\n+\n 2015-11-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-typeck.c (lookup_field_fuzzy): Move determination of closest"}, {"sha": "741c75cb169bc11f6265cc3391d6d26e2c9149f1", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a87a86e1e97610650fb4305edc76a8f4a399a46e", "patch": "@@ -2277,6 +2277,33 @@ lookup_field_fuzzy (tree type, tree component)\n   return find_closest_identifier (component, &candidates);\n }\n \n+/* Support function for build_component_ref's error-handling.\n+\n+   Given DATUM_TYPE, and \"DATUM.COMPONENT\", where DATUM is *not* a\n+   struct or union, should we suggest \"DATUM->COMPONENT\" as a hint?  */\n+\n+static bool\n+should_suggest_deref_p (tree datum_type)\n+{\n+  /* We don't do it for Objective-C, since Objective-C 2.0 dot-syntax\n+     allows \".\" for ptrs; we could be handling a failed attempt\n+     to access a property.  */\n+  if (c_dialect_objc ())\n+    return false;\n+\n+  /* Only suggest it for pointers...  */\n+  if (TREE_CODE (datum_type) != POINTER_TYPE)\n+    return false;\n+\n+  /* ...to structs/unions.  */\n+  tree underlying_type = TREE_TYPE (datum_type);\n+  enum tree_code code = TREE_CODE (underlying_type);\n+  if (code == RECORD_TYPE || code == UNION_TYPE)\n+    return true;\n+  else\n+    return false;\n+}\n+\n /* Make an expression to refer to the COMPONENT field of structure or\n    union value DATUM.  COMPONENT is an IDENTIFIER_NODE.  LOC is the\n    location of the COMPONENT_REF.  */\n@@ -2369,6 +2396,18 @@ build_component_ref (location_t loc, tree datum, tree component)\n \n       return ref;\n     }\n+  else if (should_suggest_deref_p (type))\n+    {\n+      /* Special-case the error message for \"ptr.field\" for the case\n+\t where the user has confused \".\" vs \"->\".  */\n+      rich_location richloc (line_table, loc);\n+      /* \"loc\" should be the \".\" token.  */\n+      richloc.add_fixit_replace (source_range::from_location (loc), \"->\");\n+      error_at_rich_loc (&richloc,\n+\t\t\t \"%qE is a pointer; did you mean to use %<->%>?\",\n+\t\t\t datum);\n+      return error_mark_node;\n+    }\n   else if (code != ERROR_MARK)\n     error_at (loc,\n \t      \"request for member %qE in something not a structure or union\","}, {"sha": "9e51b95655a0b29e6ebf76f5acd9b425263f754a", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 101, "deletions": 5, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=a87a86e1e97610650fb4305edc76a8f4a399a46e", "patch": "@@ -78,6 +78,7 @@ class colorizer\n \n   void set_range (int range_idx) { set_state (range_idx); }\n   void set_normal_text () { set_state (STATE_NORMAL_TEXT); }\n+  void set_fixit_hint () { set_state (0); }\n \n  private:\n   void set_state (int state);\n@@ -139,8 +140,8 @@ struct line_bounds\n /* A class to control the overall layout when printing a diagnostic.\n \n    The layout is determined within the constructor.\n-   It is then printed by repeatedly calling the \"print_source_line\"\n-   and \"print_annotation_line\" methods.\n+   It is then printed by repeatedly calling the \"print_source_line\",\n+   \"print_annotation_line\" and \"print_any_fixits\" methods.\n \n    We assume we have disjoint ranges.  */\n \n@@ -155,6 +156,7 @@ class layout\n \n   bool print_source_line (int row, line_bounds *lbounds_out);\n   void print_annotation_line (int row, const line_bounds lbounds);\n+  void print_any_fixits (int row, const rich_location *richloc);\n \n  private:\n   bool\n@@ -168,6 +170,9 @@ class layout\n   get_x_bound_for_row (int row, int caret_column,\n \t\t       int last_non_ws);\n \n+  void\n+  move_to_column (int *column, int dest_column);\n+\n  private:\n   diagnostic_context *m_context;\n   pretty_printer *m_pp;\n@@ -593,6 +598,73 @@ layout::print_annotation_line (int row, const line_bounds lbounds)\n   pp_newline (m_pp);\n }\n \n+/* If there are any fixit hints on source line ROW within RICHLOC, print them.\n+   They are printed in order, attempting to combine them onto lines, but\n+   starting new lines if necessary.  */\n+\n+void\n+layout::print_any_fixits (int row, const rich_location *richloc)\n+{\n+  int column = 0;\n+  for (unsigned int i = 0; i < richloc->get_num_fixit_hints (); i++)\n+    {\n+      fixit_hint *hint = richloc->get_fixit_hint (i);\n+      if (hint->affects_line_p (m_exploc.file, row))\n+\t{\n+\t  /* For now we assume each fixit hint can only touch one line.  */\n+\t  switch (hint->get_kind ())\n+\t    {\n+\t    case fixit_hint::INSERT:\n+\t      {\n+\t\tfixit_insert *insert = static_cast <fixit_insert *> (hint);\n+\t\t/* This assumes the insertion just affects one line.  */\n+\t\tint start_column\n+\t\t  = LOCATION_COLUMN (insert->get_location ());\n+\t\tmove_to_column (&column, start_column);\n+\t\tm_colorizer.set_fixit_hint ();\n+\t\tpp_string (m_pp, insert->get_string ());\n+\t\tm_colorizer.set_normal_text ();\n+\t\tcolumn += insert->get_length ();\n+\t      }\n+\t      break;\n+\n+\t    case fixit_hint::REMOVE:\n+\t      {\n+\t\tfixit_remove *remove = static_cast <fixit_remove *> (hint);\n+\t\t/* This assumes the removal just affects one line.  */\n+\t\tsource_range src_range = remove->get_range ();\n+\t\tint start_column = LOCATION_COLUMN (src_range.m_start);\n+\t\tint finish_column = LOCATION_COLUMN (src_range.m_finish);\n+\t\tmove_to_column (&column, start_column);\n+\t\tfor (int column = start_column; column <= finish_column; column++)\n+\t\t  {\n+\t\t    m_colorizer.set_fixit_hint ();\n+\t\t    pp_character (m_pp, '-');\n+\t\t    m_colorizer.set_normal_text ();\n+\t\t  }\n+\t      }\n+\t      break;\n+\n+\t    case fixit_hint::REPLACE:\n+\t      {\n+\t\tfixit_replace *replace = static_cast <fixit_replace *> (hint);\n+\t\tint start_column\n+\t\t  = LOCATION_COLUMN (replace->get_range ().m_start);\n+\t\tmove_to_column (&column, start_column);\n+\t\tm_colorizer.set_fixit_hint ();\n+\t\tpp_string (m_pp, replace->get_string ());\n+\t\tm_colorizer.set_normal_text ();\n+\t\tcolumn += replace->get_length ();\n+\t      }\n+\t      break;\n+\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t}\n+    }\n+}\n+\n /* Return true if (ROW/COLUMN) is within a range of the layout.\n    If it returns true, OUT_STATE is written to, with the\n    range index, and whether we should draw the caret at\n@@ -675,6 +747,27 @@ layout::get_x_bound_for_row (int row, int caret_column,\n   return result;\n }\n \n+/* Given *COLUMN as an x-coordinate, print spaces to position\n+   successive output at DEST_COLUMN, printing a newline if necessary,\n+   and updating *COLUMN.  */\n+\n+void\n+layout::move_to_column (int *column, int dest_column)\n+{\n+  /* Start a new line if we need to.  */\n+  if (*column > dest_column)\n+    {\n+      pp_newline (m_pp);\n+      *column = 0;\n+    }\n+\n+  while (*column < dest_column)\n+    {\n+      pp_space (m_pp);\n+      (*column)++;\n+    }\n+}\n+\n } /* End of anonymous namespace.  */\n \n /* Print the physical source code corresponding to the location of\n@@ -704,11 +797,14 @@ diagnostic_show_locus (diagnostic_context * context,\n \t row++)\n       {\n \t/* Print the source line, followed by an annotation line\n-\t   consisting of any caret/underlines.  If the source line can't\n-\t   be read, print nothing.  */\n+\t   consisting of any caret/underlines, then any fixits.\n+\t   If the source line can't be read, print nothing.  */\n \tline_bounds lbounds;\n \tif (layout.print_source_line (row, &lbounds))\n-\t  layout.print_annotation_line (row, lbounds);\n+\t  {\n+\t    layout.print_annotation_line (row, lbounds);\n+\t    layout.print_any_fixits (row, diagnostic->richloc);\n+\t  }\n       }\n \n     /* The closing scope here leads to the dtor for layout and thus"}, {"sha": "84659a559b9e62bfda954e211e492c2b4563d810", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a87a86e1e97610650fb4305edc76a8f4a399a46e", "patch": "@@ -1,3 +1,18 @@\n+2015-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 62314\n+\t* gcc.dg/fixits.c: New file.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-ascii-bw.c\n+\t(test_fixit_insert): New.\n+\t(test_fixit_remove): New.\n+\t(test_fixit_replace): New.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-ascii-color.c\n+\t(test_fixit_insert): New.\n+\t(test_fixit_remove): New.\n+\t(test_fixit_replace): New.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n+\t(test_show_locus): Add tests of rendering fixit hints.\n+\n 2015-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/68339"}, {"sha": "06c9995d7ec91b9d197d3461bd463d9a62134483", "filename": "gcc/testsuite/gcc.dg/fixits.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Ftestsuite%2Fgcc.dg%2Ffixits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Ftestsuite%2Fgcc.dg%2Ffixits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixits.c?ref=a87a86e1e97610650fb4305edc76a8f4a399a46e", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+struct foo { int x; };\n+union u { int x; };\n+\n+/* Verify that we issue a hint for \".\" used with a ptr to a struct.  */\n+\n+int test_1 (struct foo *ptr)\n+{\n+  return ptr.x; /* { dg-error \"'ptr' is a pointer; did you mean to use '->'?\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return ptr.x;\n+             ^\n+             ->\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Likewise for a ptr to a union.  */\n+\n+int test_2 (union u *ptr)\n+{\n+  return ptr.x; /* { dg-error \"'ptr' is a pointer; did you mean to use '->'?\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return ptr.x;\n+             ^\n+             ->\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Verify that we don't issue a hint for a ptr to something that isn't a\n+   struct or union.  */\n+\n+int test_3 (void **ptr)\n+{\n+  return ptr.x; /* { dg-error \"request for member 'x' in something not a structure or union\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return ptr.x;\n+             ^\n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "44b47e0f38b33de39c96c6106ad0a7e6ab1a88ce", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-bw.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c?ref=a87a86e1e97610650fb4305edc76a8f4a399a46e", "patch": "@@ -147,3 +147,46 @@ void test_caret_on_leading_whitespace (void)\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n+\n+/* Unit test for rendering of insertion fixit hints\n+   (example taken from PR 62316).  */\n+\n+void test_fixit_insert (void)\n+{\n+#if 0\n+   int a[2][2] = { 0, 1 , 2, 3 }; /* { dg-warning \"insertion hints\" } */\n+/* { dg-begin-multiline-output \"\" }\n+    int a[2][2] = { 0, 1 , 2, 3 };\n+                    ^~~~\n+                    {   }\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of \"remove\" fixit hints.  */\n+\n+void test_fixit_remove (void)\n+{\n+#if 0\n+  int a;; /* { dg-warning \"example of a removal hint\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   int a;;\n+         ^\n+         -\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of \"replace\" fixit hints.  */\n+\n+void test_fixit_replace (void)\n+{\n+#if 0\n+  gtk_widget_showall (dlg); /* { dg-warning \"example of a replacement hint\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   gtk_widget_showall (dlg);\n+   ^~~~~~~~~~~~~~~~~~\n+   gtk_widget_show_all\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}"}, {"sha": "199e0b20d6198ec76c5f655457c7609b95fe405e", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-color.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color.c?ref=a87a86e1e97610650fb4305edc76a8f4a399a46e", "patch": "@@ -156,3 +156,46 @@ void test_caret_on_leading_whitespace (void)\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n+\n+/* Unit test for rendering of insertion fixit hints\n+   (example taken from PR 62316).  */\n+\n+void test_fixit_insert (void)\n+{\n+#if 0\n+   int a[2][2] = { 0, 1 , 2, 3 }; /* { dg-warning \"insertion hints\" } */\n+/* { dg-begin-multiline-output \"\" }\n+    int a[2][2] = { \u001b[01;35m\u001b[K0, 1\u001b[m\u001b[K , 2, 3 };\n+                    \u001b[01;35m\u001b[K^~~~\n+                    {\u001b[m\u001b[K   \u001b[01;35m\u001b[K}\u001b[m\u001b[K\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of \"remove\" fixit hints.  */\n+\n+void test_fixit_remove (void)\n+{\n+#if 0\n+  int a;; /* { dg-warning \"example of a removal hint\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   int a;\u001b[01;35m\u001b[K;\u001b[m\u001b[K\n+         \u001b[01;35m\u001b[K^\n+         -\u001b[m\u001b[K\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of \"replace\" fixit hints.  */\n+\n+void test_fixit_replace (void)\n+{\n+#if 0\n+  gtk_widget_showall (dlg); /* { dg-warning \"example of a replacement hint\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   \u001b[01;35m\u001b[Kgtk_widget_showall\u001b[m\u001b[K (dlg);\n+   \u001b[01;35m\u001b[K^~~~~~~~~~~~~~~~~~\n+   gtk_widget_show_all\u001b[m\u001b[K\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}"}, {"sha": "7ff2cff79eeab63ee28ce6726908603bc293d891", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87a86e1e97610650fb4305edc76a8f4a399a46e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=a87a86e1e97610650fb4305edc76a8f4a399a46e", "patch": "@@ -258,6 +258,41 @@ test_show_locus (function *fun)\n       global_dc->caret_chars[1] = '^';\n     }\n \n+  /* Tests of rendering fixit hints.  */\n+  if (0 == strcmp (fnname, \"test_fixit_insert\"))\n+    {\n+      const int line = fnstart_line + 2;\n+      source_range src_range;\n+      src_range.m_start = get_loc (line, 19);\n+      src_range.m_finish = get_loc (line, 22);\n+      rich_location richloc (src_range);\n+      richloc.add_fixit_insert (src_range.m_start, \"{\");\n+      richloc.add_fixit_insert (get_loc (line, 23), \"}\");\n+      warning_at_rich_loc (&richloc, 0, \"example of insertion hints\");\n+    }\n+\n+  if (0 == strcmp (fnname, \"test_fixit_remove\"))\n+    {\n+      const int line = fnstart_line + 2;\n+      source_range src_range;\n+      src_range.m_start = get_loc (line, 8);\n+      src_range.m_finish = get_loc (line, 8);\n+      rich_location richloc (src_range);\n+      richloc.add_fixit_remove (src_range);\n+      warning_at_rich_loc (&richloc, 0, \"example of a removal hint\");\n+    }\n+\n+  if (0 == strcmp (fnname, \"test_fixit_replace\"))\n+    {\n+      const int line = fnstart_line + 2;\n+      source_range src_range;\n+      src_range.m_start = get_loc (line, 2);\n+      src_range.m_finish = get_loc (line, 19);\n+      rich_location richloc (src_range);\n+      richloc.add_fixit_replace (src_range, \"gtk_widget_show_all\");\n+      warning_at_rich_loc (&richloc, 0, \"example of a replacement hint\");\n+    }\n+\n   /* Example of two carets where both carets appear to have an off-by-one\n      error appearing one column early.\n      Seen with gfortran.dg/associate_5.f03."}, {"sha": "78a0d7cb373ed502b0919b476743592eb21c5e3e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87a86e1e97610650fb4305edc76a8f4a399a46e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87a86e1e97610650fb4305edc76a8f4a399a46e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a87a86e1e97610650fb4305edc76a8f4a399a46e", "patch": "@@ -1,3 +1,37 @@\n+2015-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 62314\n+\t* include/line-map.h (source_range::intersects_line_p): New\n+\tmethod.\n+\t(rich_location::~rich_location): New.\n+\t(rich_location::add_fixit_insert): New method.\n+\t(rich_location::add_fixit_remove): New method.\n+\t(rich_location::add_fixit_replace): New method.\n+\t(rich_location::get_num_fixit_hints): New accessor.\n+\t(rich_location::get_fixit_hint): New accessor.\n+\t(rich_location::MAX_FIXIT_HINTS): New constant.\n+\t(rich_location::m_num_fixit_hints): New field.\n+\t(rich_location::m_fixit_hints): New field.\n+\t(class fixit_hint): New class.\n+\t(class fixit_insert): New class.\n+\t(class fixit_remove): New class.\n+\t(class fixit_replace): New class.\n+\t* line-map.c (source_range::intersects_line_p): New method.\n+\t(rich_location::rich_location): Add initialization of\n+\tm_num_fixit_hints to both ctors.\n+\t(rich_location::~rich_location): New.\n+\t(rich_location::add_fixit_insert): New method.\n+\t(rich_location::add_fixit_remove): New method.\n+\t(rich_location::add_fixit_replace): New method.\n+\t(fixit_insert::fixit_insert): New.\n+\t(fixit_insert::~fixit_insert): New.\n+\t(fixit_insert::affects_line_p): New.\n+\t(fixit_remove::fixit_remove): New.\n+\t(fixit_remove::affects_line_p): New.\n+\t(fixit_replace::fixit_replace): New.\n+\t(fixit_replace::~fixit_replace): New.\n+\t(fixit_replace::affects_line_p): New.\n+\n 2015-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/60736"}, {"sha": "4f440fa5e51887af5a8e854fdda1c79aff0b16ea", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87a86e1e97610650fb4305edc76a8f4a399a46e/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87a86e1e97610650fb4305edc76a8f4a399a46e/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=a87a86e1e97610650fb4305edc76a8f4a399a46e", "patch": "@@ -299,6 +299,9 @@ struct GTY(()) source_range\n     result.m_finish = loc;\n     return result;\n   }\n+\n+  /* Is there any part of this range on the given line?  */\n+  bool intersects_line_p (const char *file, int line) const;\n };\n \n /* Memory allocation function typedef.  Works like xrealloc.  */\n@@ -1267,6 +1270,11 @@ struct location_range\n   expanded_location m_caret;\n };\n \n+class fixit_hint;\n+  class fixit_insert;\n+  class fixit_remove;\n+  class fixit_replace;\n+\n /* A \"rich\" source code location, for use when printing diagnostics.\n    A rich_location has one or more ranges, each optionally with\n    a caret.   Typically the zeroth range has a caret; other ranges\n@@ -1349,6 +1357,9 @@ class rich_location\n   /* Constructing from a source_range.  */\n   rich_location (source_range src_range);\n \n+  /* Destructor.  */\n+  ~rich_location ();\n+\n   /* Accessors.  */\n   source_location get_loc () const { return m_loc; }\n \n@@ -1381,8 +1392,24 @@ class rich_location\n   void\n   override_column (int column);\n \n+  /* Fix-it hints.  */\n+  void\n+  add_fixit_insert (source_location where,\n+\t\t    const char *new_content);\n+\n+  void\n+  add_fixit_remove (source_range src_range);\n+\n+  void\n+  add_fixit_replace (source_range src_range,\n+\t\t     const char *new_content);\n+\n+  unsigned int get_num_fixit_hints () const { return m_num_fixit_hints; }\n+  fixit_hint *get_fixit_hint (int idx) const { return m_fixit_hints[idx]; }\n+\n public:\n   static const int MAX_RANGES = 3;\n+  static const int MAX_FIXIT_HINTS = 2;\n \n protected:\n   source_location m_loc;\n@@ -1392,8 +1419,77 @@ class rich_location\n \n   bool m_have_expanded_location;\n   expanded_location m_expanded_location;\n+\n+  unsigned int m_num_fixit_hints;\n+  fixit_hint *m_fixit_hints[MAX_FIXIT_HINTS];\n+};\n+\n+class fixit_hint\n+{\n+public:\n+  enum kind {INSERT, REMOVE, REPLACE};\n+\n+  virtual ~fixit_hint () {}\n+\n+  virtual enum kind get_kind () const = 0;\n+  virtual bool affects_line_p (const char *file, int line) = 0;\n+};\n+\n+class fixit_insert : public fixit_hint\n+{\n+ public:\n+  fixit_insert (source_location where,\n+\t\tconst char *new_content);\n+  ~fixit_insert ();\n+  enum kind get_kind () const { return INSERT; }\n+  bool affects_line_p (const char *file, int line);\n+\n+  source_location get_location () const { return m_where; }\n+  const char *get_string () const { return m_bytes; }\n+  size_t get_length () const { return m_len; }\n+\n+ private:\n+  source_location m_where;\n+  char *m_bytes;\n+  size_t m_len;\n+};\n+\n+class fixit_remove : public fixit_hint\n+{\n+ public:\n+  fixit_remove (source_range src_range);\n+  ~fixit_remove () {}\n+\n+  enum kind get_kind () const { return REMOVE; }\n+  bool affects_line_p (const char *file, int line);\n+\n+  source_range get_range () const { return m_src_range; }\n+\n+ private:\n+  source_range m_src_range;\n };\n \n+class fixit_replace : public fixit_hint\n+{\n+ public:\n+  fixit_replace (source_range src_range,\n+                 const char *new_content);\n+  ~fixit_replace ();\n+\n+  enum kind get_kind () const { return REPLACE; }\n+  bool affects_line_p (const char *file, int line);\n+\n+  source_range get_range () const { return m_src_range; }\n+  const char *get_string () const { return m_bytes; }\n+  size_t get_length () const { return m_len; }\n+\n+ private:\n+  source_range m_src_range;\n+  char *m_bytes;\n+  size_t m_len;\n+};\n+\n+\n /* This is enum is used by the function linemap_resolve_location\n    below.  The meaning of the values is explained in the comment of\n    that function.  */"}, {"sha": "42843038e3bf2c89fa25f78647f269a8f7c94999", "filename": "libcpp/line-map.c", "status": "modified", "additions": 134, "deletions": 2, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87a86e1e97610650fb4305edc76a8f4a399a46e/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87a86e1e97610650fb4305edc76a8f4a399a46e/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=a87a86e1e97610650fb4305edc76a8f4a399a46e", "patch": "@@ -1947,14 +1947,37 @@ line_table_dump (FILE *stream, struct line_maps *set, unsigned int num_ordinary,\n     }\n }\n \n+/* struct source_range.  */\n+\n+/* Is there any part of this range on the given line?  */\n+\n+bool\n+source_range::intersects_line_p (const char *file, int line) const\n+{\n+  expanded_location exploc_start\n+    = linemap_client_expand_location_to_spelling_point (m_start);\n+  if (file != exploc_start.file)\n+    return false;\n+  if (line < exploc_start.line)\n+      return false;\n+  expanded_location exploc_finish\n+    = linemap_client_expand_location_to_spelling_point (m_finish);\n+  if (file != exploc_finish.file)\n+    return false;\n+  if (line > exploc_finish.line)\n+      return false;\n+  return true;\n+}\n+\n /* class rich_location.  */\n \n /* Construct a rich_location with location LOC as its initial range.  */\n \n rich_location::rich_location (line_maps *set, source_location loc) :\n   m_loc (loc),\n   m_num_ranges (0),\n-  m_have_expanded_location (false)\n+  m_have_expanded_location (false),\n+  m_num_fixit_hints (0)\n {\n   /* Set up the 0th range, extracting any range from LOC.  */\n   source_range src_range = get_range_from_loc (set, loc);\n@@ -1968,12 +1991,21 @@ rich_location::rich_location (line_maps *set, source_location loc) :\n rich_location::rich_location (source_range src_range)\n : m_loc (src_range.m_start),\n   m_num_ranges (0),\n-  m_have_expanded_location (false)\n+  m_have_expanded_location (false),\n+  m_num_fixit_hints (0)\n {\n   /* Set up the 0th range: */\n   add_range (src_range, true);\n }\n \n+/* The destructor for class rich_location.  */\n+\n+rich_location::~rich_location ()\n+{\n+  for (unsigned int i = 0; i < m_num_fixit_hints; i++)\n+    delete m_fixit_hints[i];\n+}\n+\n /* Get an expanded_location for this rich_location's primary\n    location.  */\n \n@@ -2077,3 +2109,103 @@ rich_location::set_range (unsigned int idx, source_range src_range,\n       m_have_expanded_location = false;\n     }\n }\n+\n+/* Add a fixit-hint, suggesting insertion of NEW_CONTENT\n+   at WHERE.  */\n+\n+void\n+rich_location::add_fixit_insert (source_location where,\n+\t\t\t\t const char *new_content)\n+{\n+  linemap_assert (m_num_fixit_hints < MAX_FIXIT_HINTS);\n+  m_fixit_hints[m_num_fixit_hints++]\n+    = new fixit_insert (where, new_content);\n+}\n+\n+/* Add a fixit-hint, suggesting removal of the content at\n+   SRC_RANGE.  */\n+\n+void\n+rich_location::add_fixit_remove (source_range src_range)\n+{\n+  linemap_assert (m_num_fixit_hints < MAX_FIXIT_HINTS);\n+  m_fixit_hints[m_num_fixit_hints++] = new fixit_remove (src_range);\n+}\n+\n+/* Add a fixit-hint, suggesting replacement of the content at\n+   SRC_RANGE with NEW_CONTENT.  */\n+\n+void\n+rich_location::add_fixit_replace (source_range src_range,\n+\t\t\t\t  const char *new_content)\n+{\n+  linemap_assert (m_num_fixit_hints < MAX_FIXIT_HINTS);\n+  m_fixit_hints[m_num_fixit_hints++]\n+    = new fixit_replace (src_range, new_content);\n+}\n+\n+/* class fixit_insert.  */\n+\n+fixit_insert::fixit_insert (source_location where,\n+\t\t\t    const char *new_content)\n+: m_where (where),\n+  m_bytes (xstrdup (new_content)),\n+  m_len (strlen (new_content))\n+{\n+}\n+\n+fixit_insert::~fixit_insert ()\n+{\n+  free (m_bytes);\n+}\n+\n+/* Implementation of fixit_hint::affects_line_p for fixit_insert.  */\n+\n+bool\n+fixit_insert::affects_line_p (const char *file, int line)\n+{\n+  expanded_location exploc\n+    = linemap_client_expand_location_to_spelling_point (m_where);\n+  if (file == exploc.file)\n+    if (line == exploc.line)\n+      return true;\n+  return false;\n+}\n+\n+/* class fixit_remove.  */\n+\n+fixit_remove::fixit_remove (source_range src_range)\n+: m_src_range (src_range)\n+{\n+}\n+\n+/* Implementation of fixit_hint::affects_line_p for fixit_remove.  */\n+\n+bool\n+fixit_remove::affects_line_p (const char *file, int line)\n+{\n+  return m_src_range.intersects_line_p (file, line);\n+}\n+\n+/* class fixit_replace.  */\n+\n+fixit_replace::fixit_replace (source_range src_range,\n+\t\t\t      const char *new_content)\n+: m_src_range (src_range),\n+  m_bytes (xstrdup (new_content)),\n+  m_len (strlen (new_content))\n+{\n+}\n+\n+fixit_replace::~fixit_replace ()\n+{\n+  free (m_bytes);\n+}\n+\n+/* Implementation of fixit_hint::affects_line_p for fixit_replace.  */\n+\n+bool\n+fixit_replace::affects_line_p (const char *file, int line)\n+{\n+  return m_src_range.intersects_line_p (file, line);\n+}"}]}