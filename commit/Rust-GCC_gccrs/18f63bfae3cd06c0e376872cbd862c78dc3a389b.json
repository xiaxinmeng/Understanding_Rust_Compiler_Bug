{"sha": "18f63bfae3cd06c0e376872cbd862c78dc3a389b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThmNjNiZmFlM2NkMDZjMGUzNzY4NzJjYmQ4NjJjNzhkYzNhMzg5Yg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2004-11-18T15:51:18Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2004-11-18T15:51:18Z"}, "message": "rs6000.c (rs6000_complex_function_value): Revert previous change.\n\n\t* config/rs6000/rs6000.c (rs6000_complex_function_value): Revert\n\tprevious change.\n\t(rs6000_override_options): Likewise.\n\t(spe_build_register_parallel): Handle complex doubles on e500v2.\n\t(rs6000_spe_function_arg): Likewise.\n\t(function_arg): Likewise.\n\t(rs6000_function_value): Likewise.\n\t(rs6000_libcall_value): Likewise.\n\n[[Split portion of a mixed commit.]]\n\nFrom-SVN: r90868.2", "tree": {"sha": "d035c27dd8d7b842ad3944dac1e141bd397626ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d035c27dd8d7b842ad3944dac1e141bd397626ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18f63bfae3cd06c0e376872cbd862c78dc3a389b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f63bfae3cd06c0e376872cbd862c78dc3a389b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f63bfae3cd06c0e376872cbd862c78dc3a389b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f63bfae3cd06c0e376872cbd862c78dc3a389b/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a73498160839a23ebcda694c117be41ddb197528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73498160839a23ebcda694c117be41ddb197528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73498160839a23ebcda694c117be41ddb197528"}], "stats": {"total": 88, "additions": 50, "deletions": 38}, "files": [{"sha": "53126c6b5c9a5d7dad0353f5d0f7b23ee1f5e453", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f63bfae3cd06c0e376872cbd862c78dc3a389b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f63bfae3cd06c0e376872cbd862c78dc3a389b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18f63bfae3cd06c0e376872cbd862c78dc3a389b", "patch": "@@ -1,3 +1,14 @@\n+2004-11-18  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_complex_function_value): Revert\n+\tprevious change.\n+\t(rs6000_override_options): Likewise.\n+\t(spe_build_register_parallel): Handle complex doubles on e500v2.\n+\t(rs6000_spe_function_arg): Likewise.\n+\t(function_arg): Likewise.\n+\t(rs6000_function_value): Likewise.\n+\t(rs6000_libcall_value): Likewise.\n+\n 2004-11-18  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* ifcvt.c (find_if_block): Move the check for the number of edges"}, {"sha": "5659195b8cc80420bc1cf11192866cc16a43449f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 39, "deletions": 38, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f63bfae3cd06c0e376872cbd862c78dc3a389b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f63bfae3cd06c0e376872cbd862c78dc3a389b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=18f63bfae3cd06c0e376872cbd862c78dc3a389b", "patch": "@@ -1493,7 +1493,7 @@ rs6000_override_options (const char *default_cpu)\n \n   /* We should always be splitting complex arguments, but we can't break\n      Linux and Darwin ABIs at the moment.  For now, only AIX is fixed.  */\n-  if (DEFAULT_ABI != ABI_AIX && !TARGET_E500_DOUBLE)\n+  if (DEFAULT_ABI != ABI_AIX)\n     targetm.calls.split_complex_arg = NULL;\n \n   /* Initialize rs6000_cost with the appropriate target costs.  */\n@@ -5018,23 +5018,32 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n static rtx\n spe_build_register_parallel (enum machine_mode mode, int gregno)\n {\n-  rtx r1, r2;\n-  enum machine_mode inner;\n-  unsigned int inner_bytes;\n+  rtx r1, r2, r3, r4;\n+  enum machine_mode inner = SImode;\n \n   if (mode == DFmode)\n     {\n-      inner = SImode;\n-      inner_bytes = 4;\n+      r1 = gen_rtx_REG (inner, gregno);\n+      r1 = gen_rtx_EXPR_LIST (SImode, r1, const0_rtx);\n+      r2 = gen_rtx_REG (inner, gregno + 1);\n+      r2 = gen_rtx_EXPR_LIST (SImode, r2, GEN_INT (4));\n+      return gen_rtx_PARALLEL (mode, gen_rtvec (2, r1, r2));\n+    }\n+  else if (mode == DCmode)\n+    {\n+      r1 = gen_rtx_REG (inner, gregno);\n+      r1 = gen_rtx_EXPR_LIST (SImode, r1, const0_rtx);\n+      r2 = gen_rtx_REG (inner, gregno + 1);\n+      r2 = gen_rtx_EXPR_LIST (SImode, r2, GEN_INT (4));\n+      r3 = gen_rtx_REG (inner, gregno + 2);\n+      r3 = gen_rtx_EXPR_LIST (SImode, r3, GEN_INT (8));\n+      r4 = gen_rtx_REG (inner, gregno + 3);\n+      r4 = gen_rtx_EXPR_LIST (SImode, r4, GEN_INT (12));\n+      return gen_rtx_PARALLEL (mode, gen_rtvec (4, r1, r2, r3, r4));\n     }\n-  else\n-    abort ();\n \n-  r1 = gen_rtx_REG (inner, gregno);\n-  r1 = gen_rtx_EXPR_LIST (SImode, r1, const0_rtx);\n-  r2 = gen_rtx_REG (inner, gregno + 1);\n-  r2 = gen_rtx_EXPR_LIST (SImode, r2, GEN_INT (inner_bytes));\n-  return gen_rtx_PARALLEL (mode, gen_rtvec (2, r1, r2));\n+  abort ();\n+  return NULL_RTX;\n }\n \n /* Determine where to put a SIMD argument on the SPE.  */\n@@ -5046,7 +5055,7 @@ rs6000_spe_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n   /* On E500 v2, double arithmetic is done on the full 64-bit GPR, but\n      are passed and returned in a pair of GPRs for ABI compatibility.  */\n-  if (TARGET_E500_DOUBLE && mode == DFmode)\n+  if (TARGET_E500_DOUBLE && (mode == DFmode || mode == DCmode))\n     {\n       /* Doubles go in an odd/even register pair (r5/r6, etc).  */\n       gregno += (1 - gregno) & 1;\n@@ -5380,7 +5389,8 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     }\n   else if (TARGET_SPE_ABI && TARGET_SPE\n \t   && (SPE_VECTOR_MODE (mode)\n-\t       || (TARGET_E500_DOUBLE && mode == DFmode)))\n+\t       || (TARGET_E500_DOUBLE && (mode == DFmode\n+\t\t\t\t\t  || mode == DCmode))))\n     return rs6000_spe_function_arg (cum, mode, type);\n \n   else if (rs6000_darwin64_abi\n@@ -18315,31 +18325,20 @@ rs6000_complex_function_value (enum machine_mode mode)\n   enum machine_mode inner = GET_MODE_INNER (mode);\n   unsigned int inner_bytes = GET_MODE_SIZE (inner);\n \n-  if (TARGET_E500_DOUBLE)\n-    {\n-      /* FIXME: This causes complex values to be returned in the full\n-\t 64-bit GPR.  It works, but is not ABI compatible with\n-\t soft-float.  Complex doubles should be returned in 4\n-\t consecutive 32-bit GPRs.  */\n-      regno = GP_ARG_RETURN;\n-    }\n+  if (FLOAT_MODE_P (mode) && TARGET_HARD_FLOAT && TARGET_FPRS)\n+    regno = FP_ARG_RETURN;\n   else\n     {\n-      if (FLOAT_MODE_P (mode) && TARGET_HARD_FLOAT && TARGET_FPRS)\n-\tregno = FP_ARG_RETURN;\n-      else\n-\t{\n-\t  regno = GP_ARG_RETURN;\n-\n-\t  /* 32-bit is OK since it'll go in r3/r4.  */\n-\t  if (TARGET_32BIT && inner_bytes >= 4)\n-\t    return gen_rtx_REG (mode, regno);\n-\t}\n+      regno = GP_ARG_RETURN;\n \n-      if (inner_bytes >= 8)\n+      /* 32-bit is OK since it'll go in r3/r4.  */\n+      if (TARGET_32BIT && inner_bytes >= 4)\n \treturn gen_rtx_REG (mode, regno);\n     }\n \n+  if (inner_bytes >= 8)\n+    return gen_rtx_REG (mode, regno);\n+\n   r1 = gen_rtx_EXPR_LIST (inner, gen_rtx_REG (inner, regno),\n \t\t\t  const0_rtx);\n   r2 = gen_rtx_EXPR_LIST (inner, gen_rtx_REG (inner, regno + 1),\n@@ -18533,8 +18532,9 @@ rs6000_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n \t   && TARGET_ALTIVEC && TARGET_ALTIVEC_ABI\n \t   && ALTIVEC_VECTOR_MODE(mode))\n     regno = ALTIVEC_ARG_RETURN;\n-  else if (TARGET_E500_DOUBLE && TARGET_HARD_FLOAT && mode == DFmode)\n-    return spe_build_register_parallel (DFmode, GP_ARG_RETURN);\n+  else if (TARGET_E500_DOUBLE && TARGET_HARD_FLOAT\n+\t   && (mode == DFmode || mode == DCmode))\n+    return spe_build_register_parallel (mode, GP_ARG_RETURN);\n   else\n     regno = GP_ARG_RETURN;\n \n@@ -18570,8 +18570,9 @@ rs6000_libcall_value (enum machine_mode mode)\n     regno = ALTIVEC_ARG_RETURN;\n   else if (COMPLEX_MODE_P (mode) && targetm.calls.split_complex_arg)\n     return rs6000_complex_function_value (mode);\n-  else if (TARGET_E500_DOUBLE && TARGET_HARD_FLOAT && mode == DFmode)\n-    return spe_build_register_parallel (DFmode, GP_ARG_RETURN);\n+  else if (TARGET_E500_DOUBLE && TARGET_HARD_FLOAT\n+\t   && (mode == DFmode || mode == DCmode))\n+    return spe_build_register_parallel (mode, GP_ARG_RETURN);\n   else\n     regno = GP_ARG_RETURN;\n "}]}