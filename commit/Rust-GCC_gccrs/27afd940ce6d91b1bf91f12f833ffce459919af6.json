{"sha": "27afd940ce6d91b1bf91f12f833ffce459919af6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhZmQ5NDBjZTZkOTFiMWJmOTFmMTJmODMzZmZjZTQ1OTkxOWFmNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-10-05T22:57:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-10-05T22:57:58Z"}, "message": "* call.c (extend_ref_init_temps): Fix TARGET_EXPR handling.\n\nFrom-SVN: r240818", "tree": {"sha": "97b38ae6b43e3b176785dffd9d9739637daa0052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97b38ae6b43e3b176785dffd9d9739637daa0052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27afd940ce6d91b1bf91f12f833ffce459919af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27afd940ce6d91b1bf91f12f833ffce459919af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27afd940ce6d91b1bf91f12f833ffce459919af6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27afd940ce6d91b1bf91f12f833ffce459919af6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eee8f0b07f845f17e89b1e38711910fc8339139f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eee8f0b07f845f17e89b1e38711910fc8339139f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eee8f0b07f845f17e89b1e38711910fc8339139f"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "f8752a6911c3556b3575ec0ee37a57f62839798d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27afd940ce6d91b1bf91f12f833ffce459919af6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27afd940ce6d91b1bf91f12f833ffce459919af6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=27afd940ce6d91b1bf91f12f833ffce459919af6", "patch": "@@ -1,5 +1,7 @@\n 2016-10-05  Jason Merrill  <jason@redhat.com>\n \n+\t* call.c (extend_ref_init_temps): Fix TARGET_EXPR handling.\n+\n \t* parser.c (cp_parser_skip_to_end_of_statement): Add missing break.\n \n \t* semantics.c (finish_compound_literal): Handle class placeholder."}, {"sha": "c33341813cf23e69449f923eca5c238a87eecfa2", "filename": "gcc/cp/call.c", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27afd940ce6d91b1bf91f12f833ffce459919af6/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27afd940ce6d91b1bf91f12f833ffce459919af6/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=27afd940ce6d91b1bf91f12f833ffce459919af6", "patch": "@@ -10172,28 +10172,31 @@ extend_ref_init_temps (tree decl, tree init, vec<tree, va_gc> **cleanups)\n     return init;\n   if (TREE_CODE (type) == REFERENCE_TYPE)\n     init = extend_ref_init_temps_1 (decl, init, cleanups);\n-  else if (is_std_init_list (type))\n+  else\n     {\n-      /* The temporary array underlying a std::initializer_list\n-\t is handled like a reference temporary.  */\n       tree ctor = init;\n       if (TREE_CODE (ctor) == TARGET_EXPR)\n \tctor = TARGET_EXPR_INITIAL (ctor);\n       if (TREE_CODE (ctor) == CONSTRUCTOR)\n \t{\n-\t  tree array = CONSTRUCTOR_ELT (ctor, 0)->value;\n-\t  array = extend_ref_init_temps_1 (decl, array, cleanups);\n-\t  CONSTRUCTOR_ELT (ctor, 0)->value = array;\n+\t  if (is_std_init_list (type))\n+\t    {\n+\t      /* The temporary array underlying a std::initializer_list\n+\t\t is handled like a reference temporary.  */\n+\t      tree array = CONSTRUCTOR_ELT (ctor, 0)->value;\n+\t      array = extend_ref_init_temps_1 (decl, array, cleanups);\n+\t      CONSTRUCTOR_ELT (ctor, 0)->value = array;\n+\t    }\n+\t  else\n+\t    {\n+\t      unsigned i;\n+\t      constructor_elt *p;\n+\t      vec<constructor_elt, va_gc> *elts = CONSTRUCTOR_ELTS (ctor);\n+\t      FOR_EACH_VEC_SAFE_ELT (elts, i, p)\n+\t\tp->value = extend_ref_init_temps (decl, p->value, cleanups);\n+\t    }\n \t}\n     }\n-  else if (TREE_CODE (init) == CONSTRUCTOR)\n-    {\n-      unsigned i;\n-      constructor_elt *p;\n-      vec<constructor_elt, va_gc> *elts = CONSTRUCTOR_ELTS (init);\n-      FOR_EACH_VEC_SAFE_ELT (elts, i, p)\n-\tp->value = extend_ref_init_temps (decl, p->value, cleanups);\n-    }\n \n   return init;\n }"}, {"sha": "277decff48777fee30b88f92aa8b9da6ba4461bd", "filename": "gcc/testsuite/g++.dg/cpp1z/elide2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27afd940ce6d91b1bf91f12f833ffce459919af6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Felide2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27afd940ce6d91b1bf91f12f833ffce459919af6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Felide2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Felide2.C?ref=27afd940ce6d91b1bf91f12f833ffce459919af6", "patch": "@@ -0,0 +1,25 @@\n+// DR 1697\n+// { dg-do run { target c++11 } }\n+\n+#define assert(X) do { if (!(X)) __builtin_abort(); } while(0)\n+\n+int i;\n+struct S {\n+  ~S() { assert (i++ == 2); }\n+};\n+struct X {\n+  X() { assert (i++ == 0); }\n+  X(const X&);\n+};\n+struct T {\n+  S &&s;\n+  X x;\n+};\n+void f() { assert (i++ == 1); }\n+int main() {\n+  {\n+    T t = T{ {}, {} };\n+    f();\n+  }\n+  assert (i == 3);\n+}"}]}