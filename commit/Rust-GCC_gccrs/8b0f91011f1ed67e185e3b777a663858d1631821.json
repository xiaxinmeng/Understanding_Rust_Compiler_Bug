{"sha": "8b0f91011f1ed67e185e3b777a663858d1631821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwZjkxMDExZjFlZDY3ZTE4NWUzYjc3N2E2NjM4NThkMTYzMTgyMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-06T11:14:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-06T11:14:17Z"}, "message": "(emit_library_call): Move the invocation of prepare_call_address before the assignments of the function arguments.\n\n(emit_library_call): Move the invocation of prepare_call_address before the\nassignments of the function arguments.\n(emit_library_call_value): Likewise.\n\nFrom-SVN: r6978", "tree": {"sha": "9d2505e2ca71acbaa2fdd93a418d367b9fef527b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d2505e2ca71acbaa2fdd93a418d367b9fef527b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b0f91011f1ed67e185e3b777a663858d1631821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0f91011f1ed67e185e3b777a663858d1631821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0f91011f1ed67e185e3b777a663858d1631821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0f91011f1ed67e185e3b777a663858d1631821/comments", "author": null, "committer": null, "parents": [{"sha": "1923e516f4394c09231d6a62dc0c1d641051827e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1923e516f4394c09231d6a62dc0c1d641051827e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1923e516f4394c09231d6a62dc0c1d641051827e"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "1ac4fee5f1ba99be8db5b56b8218cb71269cdc24", "filename": "gcc/calls.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0f91011f1ed67e185e3b777a663858d1631821/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0f91011f1ed67e185e3b777a663858d1631821/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=8b0f91011f1ed67e185e3b777a663858d1631821", "patch": "@@ -1770,6 +1770,8 @@ expand_call (exp, target, ignore)\n \t}\n     }\n \n+  funexp = prepare_call_address (funexp, fndecl, &use_insns);\n+\n   /* Now do the register loads required for any wholly-register parms or any\n      parms which are passed both on the stack and in a register.  Their\n      expressions were already evaluated. \n@@ -1844,8 +1846,6 @@ expand_call (exp, target, ignore)\n \n   /* All arguments and registers used for the call must be set up by now!  */\n \n-  funexp = prepare_call_address (funexp, fndecl, &use_insns);\n-\n   /* Generate the actual call instruction.  */\n   emit_call_1 (funexp, funtype, args_size.constant, struct_value_size,\n \t       FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1),\n@@ -2324,6 +2324,8 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n   argnum = 0;\n #endif\n \n+  fun = prepare_call_address (fun, NULL_TREE, &use_insns);\n+\n   /* Now load any reg parms into their regs.  */\n \n   for (count = 0; count < nargs; count++, argnum += inc)\n@@ -2351,8 +2353,6 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n   use_insns = get_insns ();\n   end_sequence ();\n \n-  fun = prepare_call_address (fun, NULL_TREE, &use_insns);\n-\n   /* Don't allow popping to be deferred, since then\n      cse'ing of library calls could delete a call and leave the pop.  */\n   NO_DEFER_POP;\n@@ -2670,6 +2670,8 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n   argnum = 0;\n #endif\n \n+  fun = prepare_call_address (fun, NULL_TREE, &use_insns);\n+\n   /* Now load any reg parms into their regs.  */\n \n   for (count = 0; count < nargs; count++, argnum += inc)\n@@ -2715,8 +2717,6 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n \t}\n     }\n \n-  fun = prepare_call_address (fun, NULL_TREE, &use_insns);\n-\n   /* Don't allow popping to be deferred, since then\n      cse'ing of library calls could delete a call and leave the pop.  */\n   NO_DEFER_POP;"}]}