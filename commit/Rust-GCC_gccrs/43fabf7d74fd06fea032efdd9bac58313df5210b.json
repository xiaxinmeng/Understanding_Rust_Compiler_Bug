{"sha": "43fabf7d74fd06fea032efdd9bac58313df5210b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmYWJmN2Q3NGZkMDZmZWEwMzJlZmRkOWJhYzU4MzEzZGY1MjEwYg==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "2001-03-15T16:29:10Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "2001-03-15T16:29:10Z"}, "message": "i960.h (i960_maxbitalignment, [...]): Declare.\n\n\t* i960.h (i960_maxbitalignment,\n\ti960_last_maxbitalignment): Declare.\n\t* i960.c (i960_maxbitalignment,\n\ti960_last_maxbitalignment): Make global.\n\t(process_pragma): Delete.\n\t(i960_pr_align, i960_pr_noalign): Move from here ...\n\t* i960-c.c: ... to this new file.\n\t* t-960bare (i960-c.o): New rule.\n\t* t-vxworks960 (i960-c.o): Likewise.\n\t* config.gcc (i960-*-*): Define c_target_objs and\n\tcxx_target_objs.\n\nFrom-SVN: r40502", "tree": {"sha": "713e561a36bcdd053f94987456ff3df498f0a3de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/713e561a36bcdd053f94987456ff3df498f0a3de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43fabf7d74fd06fea032efdd9bac58313df5210b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fabf7d74fd06fea032efdd9bac58313df5210b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43fabf7d74fd06fea032efdd9bac58313df5210b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fabf7d74fd06fea032efdd9bac58313df5210b/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4f4333ade0da6c33abad06e0d60e30f62fc1ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f4333ade0da6c33abad06e0d60e30f62fc1ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f4333ade0da6c33abad06e0d60e30f62fc1ce9"}], "stats": {"total": 285, "additions": 154, "deletions": 131}, "files": [{"sha": "6dfc7a0a75d3cc4db17498e504ac27f3856ae874", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43fabf7d74fd06fea032efdd9bac58313df5210b", "patch": "@@ -1,3 +1,17 @@\n+Thu Mar 15 11:24:29 EST 2001  John Wehle  (john@feith.com)\n+\n+\t* i960.h (i960_maxbitalignment,\n+\ti960_last_maxbitalignment): Declare.\n+\t* i960.c (i960_maxbitalignment,\n+\ti960_last_maxbitalignment): Make global.\n+\t(process_pragma): Delete.\n+\t(i960_pr_align, i960_pr_noalign): Move from here ...\n+\t* i960-c.c: ... to this new file.\n+\t* t-960bare (i960-c.o): New rule.\n+\t* t-vxworks960 (i960-c.o): Likewise.\n+\t* config.gcc (i960-*-*): Define c_target_objs and\n+\tcxx_target_objs.\n+\n 2001-03-15  Bernd Schmidt  <bernds@redhat.com>\n \n \t* cselib.c (hash_rtx): For REG and MEM, just use value of expression"}, {"sha": "f3fe3bb88e86b7104aa399b3915b2950f23e3ce7", "filename": "gcc/config.gcc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=43fabf7d74fd06fea032efdd9bac58313df5210b", "patch": "@@ -1519,23 +1519,31 @@ i960-wrs-vxworks5 | i960-wrs-vxworks5.0*)\n \ttmake_file=i960/t-vxworks960\n \tuse_collect2=yes\n \tthread_file='vxworks'\n+\tc_target_objs=\"i960-c.o\"\n+\tcxx_target_objs=\"i960-c.o\"\n \t;;\n i960-wrs-vxworks5* | i960-wrs-vxworks)\n \ttm_file=\"${tm_file} dbxcoff.h i960/i960-coff.h i960/vx960-coff.h\"\n \ttmake_file=i960/t-vxworks960\n \tuse_collect2=yes\n \tthread_file='vxworks'\n+\tc_target_objs=\"i960-c.o\"\n+\tcxx_target_objs=\"i960-c.o\"\n \t;;\n i960-wrs-vxworks*)\n \ttm_file=\"${tm_file} i960/vx960.h\"\n \ttmake_file=i960/t-vxworks960\n \tuse_collect2=yes\n \tthread_file='vxworks'\n+\tc_target_objs=\"i960-c.o\"\n+\tcxx_target_objs=\"i960-c.o\"\n \t;;\n i960-*-coff*)\n \ttm_file=\"${tm_file} dbxcoff.h i960/i960-coff.h libgloss.h\"\n \ttmake_file=i960/t-960bare\n \tuse_collect2=yes\n+\tc_target_objs=\"i960-c.o\"\n+\tcxx_target_objs=\"i960-c.o\"\n \t;;\n i960-*-rtems)\n \ttmake_file=\"i960/t-960bare t-rtems\"\n@@ -1544,9 +1552,13 @@ i960-*-rtems)\n \tif test x$enable_threads = xyes; then\n \t  thread_file='rtems'\n \tfi\n+\tc_target_objs=\"i960-c.o\"\n+\tcxx_target_objs=\"i960-c.o\"\n \t;;\n i960-*-*)\t\t\t# Default i960 environment.\n \tuse_collect2=yes\n+\tc_target_objs=\"i960-c.o\"\n+\tcxx_target_objs=\"i960-c.o\"\n \t;;\n ia64*-*-elf*)\n \ttm_file=ia64/elf.h"}, {"sha": "66ff29cfcaf9488d36845f61e1c7dfbcb4261051", "filename": "gcc/config/i960/i960-c.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2Fconfig%2Fi960%2Fi960-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2Fconfig%2Fi960%2Fi960-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-c.c?ref=43fabf7d74fd06fea032efdd9bac58313df5210b", "patch": "@@ -0,0 +1,116 @@\n+/* Intel 80960 specific, C compiler specific functions.\n+   Copyright (C) 1992, 1995, 1996, 1997, 1998, 1999, 2000\n+   Free Software Foundation, Inc.\n+   Contributed by Steven McGeady, Intel Corp.\n+   Additional Work by Glenn Colon-Bonet, Jonathan Shapiro, Andy Wilson\n+   Converted to GCC 2.0 by Jim Wilson and Michael Tiemann, Cygnus Support.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"cpplib.h\"\n+#include \"tree.h\"\n+#include \"c-pragma.h\"\n+#include \"c-lex.h\"\n+#include \"toplev.h\"\n+#include \"ggc.h\"\n+#include \"tm_p.h\"\n+\n+/* Handle pragmas for compatibility with Intel's compilers.  */\n+\n+/* NOTE: ic960 R3.0 pragma align definition:\n+\n+   #pragma align [(size)] | (identifier=size[,...])\n+   #pragma noalign [(identifier)[,...]]\n+     \n+   (all parens are optional)\n+     \n+   - size is [1,2,4,8,16]\n+   - noalign means size==1\n+   - applies only to component elements of a struct (and union?)\n+   - identifier applies to structure tag (only)\n+   - missing identifier means next struct\n+     \n+   - alignment rules for bitfields need more investigation.\n+\n+   This implementation only handles the case of no identifiers.  */\n+\n+void\n+i960_pr_align (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  tree number;\n+  enum cpp_ttype type;\n+  int align;\n+\n+  type = c_lex (&number);\n+  if (type == CPP_OPEN_PAREN)\n+    type = c_lex (&number);\n+  if (type == CPP_NAME)\n+    {\n+      warning (\"sorry, not implemented: #pragma align NAME=SIZE\");\n+      return;\n+    }\n+  if (type != CPP_NUMBER)\n+    {\n+      warning (\"malformed #pragma align - ignored\");\n+      return;\n+    }\n+\n+  align = TREE_INT_CST_LOW (number);\n+  switch (align)\n+    {\n+    case 0:\n+      /* Return to last alignment.  */\n+      align = i960_last_maxbitalignment / 8;\n+      /* Fall through.  */\n+    case 16:\n+    case 8:\n+    case 4:\n+    case 2:\n+    case 1:\n+      i960_last_maxbitalignment = i960_maxbitalignment;\n+      i960_maxbitalignment = align * 8;\n+      break;\n+      \n+    default:\n+      /* Silently ignore bad values.  */\n+      break;\n+    }\n+}\n+\n+void\n+i960_pr_noalign (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  enum cpp_ttype type;\n+  tree number;\n+\n+  type = c_lex (&number);\n+  if (type == CPP_OPEN_PAREN)\n+    type = c_lex (&number);\n+  if (type == CPP_NAME)\n+    {\n+      warning (\"sorry, not implemented: #pragma noalign NAME\");\n+      return;\n+    }\n+\n+  i960_last_maxbitalignment = i960_maxbitalignment;\n+  i960_maxbitalignment = 8;\n+}"}, {"sha": "c56f2f7bb54b422e08849e42f9d9c537bb1df22e", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 2, "deletions": 131, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=43fabf7d74fd06fea032efdd9bac58313df5210b", "patch": "@@ -55,8 +55,8 @@ rtx i960_compare_op0, i960_compare_op1;\n /* Used to implement #pragma align/noalign.  Initialized by OVERRIDE_OPTIONS\n    macro in i960.h.  */\n \n-static int i960_maxbitalignment;\n-static int i960_last_maxbitalignment;\n+int i960_maxbitalignment;\n+int i960_last_maxbitalignment;\n \n /* Used to implement switching between MEM and ALU insn types, for better\n    C series performance.  */\n@@ -89,135 +89,6 @@ static int ret_label = 0;\n   && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (TREE_TYPE (FNDECL)))) != void_type_node))    \\\n  || current_function_varargs)\n \n-/* Handle pragmas for compatibility with Intel's compilers.  */\n-\n-/* NOTE: ic960 R3.0 pragma align definition:\n-\n-   #pragma align [(size)] | (identifier=size[,...])\n-   #pragma noalign [(identifier)[,...]]\n-     \n-   (all parens are optional)\n-     \n-   - size is [1,2,4,8,16]\n-   - noalign means size==1\n-   - applies only to component elements of a struct (and union?)\n-   - identifier applies to structure tag (only)\n-   - missing identifier means next struct\n-     \n-   - alignment rules for bitfields need more investigation.\n-\n-   This implementation only handles the case of no identifiers.  */\n-\n-void\n-i960_pr_align (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n-{\n-  tree number;\n-  enum cpp_ttype type;\n-  int align;\n-\n-  type = c_lex (&number);\n-  if (type == CPP_OPEN_PAREN)\n-    type = c_lex (&number);\n-  if (type == CPP_NAME)\n-    {\n-      warning (\"sorry, not implemented: #pragma align NAME=SIZE\");\n-      return;\n-    }\n-  if (type != CPP_NUMBER)\n-    {\n-      warning (\"malformed #pragma align - ignored\");\n-      return;\n-    }\n-\n-  align = TREE_INT_CST_LOW (number);\n-  switch (align)\n-    {\n-    case 0:\n-      /* Return to last alignment.  */\n-      align = i960_last_maxbitalignment / 8;\n-      /* Fall through.  */\n-    case 16:\n-    case 8:\n-    case 4:\n-    case 2:\n-    case 1:\n-      i960_last_maxbitalignment = i960_maxbitalignment;\n-      i960_maxbitalignment = align * 8;\n-      break;\n-      \n-    default:\n-      /* Silently ignore bad values.  */\n-      break;\n-    }\n-}\n-\n-void\n-i960_pr_noalign (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n-{\n-  enum cpp_ttype type;\n-  tree number;\n-\n-  type = c_lex (&number);\n-  if (type == CPP_OPEN_PAREN)\n-    type = c_lex (&number);\n-  if (type == CPP_NAME)\n-    {\n-      warning (\"sorry, not implemented: #pragma noalign NAME\");\n-      return;\n-    }\n-\n-  i960_last_maxbitalignment = i960_maxbitalignment;\n-  i960_maxbitalignment = 8;\n-}\n-\n-int\n-process_pragma (p_getc, p_ungetc, pname)\n-     int (*  p_getc) PARAMS ((void));\n-     void (* p_ungetc) PARAMS ((int));\n-     const char *pname;\n-{\n-  register int c;\n-  char buf[20];\n-  char *s = buf;\n-  int align;\n-\n-  /* Should be pragma 'far' or equivalent for callx/balx here.  */\n-  if (strcmp (pname, \"align\") != 0)\n-    return 0;\n-  \n-  do\n-    {\n-      c = p_getc ();\n-    }\n-  while (c == ' ' || c == '\\t');\n-\n-  if (c == '(')\n-    c = p_getc ();\n-  \n-  while (c >= '0' && c <= '9')\n-    {\n-      if (s < buf + sizeof buf - 1)\n-\t*s++ = c;\n-      c = p_getc ();\n-    }\n-  \n-  *s = '\\0';\n-\n-  /* We had to read a non-numerical character to get out of the\n-     while loop---often a newline.  So, we have to put it back to\n-     make sure we continue to parse everything properly.  */\n-  \n-  p_ungetc (c);\n-\n-  align = atoi (buf);\n-\n-  \n-  \n-  return 1;\n-}\n-\n /* Initialize variables before compiling any files.  */\n \n void"}, {"sha": "40480bf178c09aa447d8369ab46c8f777d3d04e2", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=43fabf7d74fd06fea032efdd9bac58313df5210b", "patch": "@@ -131,6 +131,10 @@ Boston, MA 02111-1307, USA.  */\n   fprintf (asm_out_file, \"\\t.type\\t0x%x;\", A)\n \n /* Handle pragmas for compatibility with Intel's compilers.  */\n+\n+extern int i960_maxbitalignment;\n+extern int i960_last_maxbitalignment;\n+\n #define REGISTER_TARGET_PRAGMAS(PFILE) do {\t\t\t\\\n   cpp_register_pragma (PFILE, 0, \"align\", i960_pr_align);\t\\\n   cpp_register_pragma (PFILE, 0, \"noalign\", i960_pr_noalign);\t\\"}, {"sha": "17c99a1cef26cb61d5a08c5b5fc5667e24d7f799", "filename": "gcc/config/i960/t-960bare", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2Fconfig%2Fi960%2Ft-960bare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2Fconfig%2Fi960%2Ft-960bare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Ft-960bare?ref=43fabf7d74fd06fea032efdd9bac58313df5210b", "patch": "@@ -21,6 +21,9 @@ xp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#define EXTENDED_FLOAT_STUBS' > xp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> xp-bit.c\n \n+i960-c.o: $(srcdir)/config/i960/i960-c.c\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n MULTILIB_OPTIONS=mnumerics/msoft-float mlong-double-64\n MULTILIB_DIRNAMES=float soft-float ld64\n MULTILIB_MATCHES=mnumerics=msb mnumerics=msc mnumerics=mkb mnumerics=mkc mnumerics=mmc mnumerics=mcb mnumerics=mcc mnumerics=mjf msoft-float=msa msoft-float=mka msoft-float=mca msoft-float=mcf"}, {"sha": "7878591764bca19fc739dd29dce6b9bda570f9e5", "filename": "gcc/config/i960/t-vxworks960", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2Fconfig%2Fi960%2Ft-vxworks960", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fabf7d74fd06fea032efdd9bac58313df5210b/gcc%2Fconfig%2Fi960%2Ft-vxworks960", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Ft-vxworks960?ref=43fabf7d74fd06fea032efdd9bac58313df5210b", "patch": "@@ -24,6 +24,9 @@ xp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#define EXTENDED_FLOAT_STUBS' > xp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> xp-bit.c\n \n+i960-c.o: $(srcdir)/config/i960/i960-c.c\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n MULTILIB_OPTIONS=mnumerics/msoft-float mlong-double-64\n MULTILIB_DIRNAMES=float soft-float ld64\n MULTILIB_MATCHES=mnumerics=msb mnumerics=msc mnumerics=mkb mnumerics=mkc mnumerics=mmc mnumerics=mcb mnumerics=mcc msoft-float=msa msoft-float=mka msoft-float=mca msoft-float=mcf"}]}