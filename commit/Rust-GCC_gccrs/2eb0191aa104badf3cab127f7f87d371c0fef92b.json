{"sha": "2eb0191aa104badf3cab127f7f87d371c0fef92b", "node_id": "C_kwDOANBUbNoAKDJlYjAxOTFhYTEwNGJhZGYzY2FiMTI3ZjdmODdkMzcxYzBmZWY5MmI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-10T09:21:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-10T09:21:23Z"}, "message": "file-prefix-map: Fix up -f*-prefix-map= [PR108464]\n\nOn Tue, Nov 01, 2022 at 01:46:20PM -0600, Jeff Law via Gcc-patches wrote:\n> > This does cause a change of behaviour if users were previously relying upon\n> > symlinks or absolute paths not being resolved.\n>\n> I'm not too worried about this scenario.\n\nAs mentioned in the PR, this patch breaks e.g. ccache testsuite.\n\nI strongly doubt most of the users want such a behavior, because it\nmakes all filenames absolute when -f*-prefix-map= options remap one\nabsolute path to another one.\nSay if I'm in /tmp and /tmp is the canonical path and there is\nsrc/test.c file, with -fdebug-prefix-map=/tmp=/blah\npreviously there would be DW_AT_comp_dir \"/blah\" and it is still there,\nbut DW_AT_name which was previouly \"src/test.c\" (relative against\nDW_AT_comp_dir) is now \"/blah/src/test.c\" instead.\n\nEven worse, the canonicalization is only done on the remap_filename\nargument, but not on the old_prefix side.  That is e.g. what breaks\nccache.  If there is\n/tmp/foobar1 directory and\nln -sf foobar1 /tmp/foobar2\ncd /tmp/foobar2\nthen -fdebug-prefix-map=`pwd`:/blah will just not work, while\nsrc/test.c will be canonicalized to /tmp/foobar1/src/test.c,\nold_prefix is still what the user provided which is /tmp/foobar2.\nUser would need to change their uses to use -fdebug-prefix-map=`realpath $(pwd)`=/blah\n\nI've created 3 patches for this.\n\nThe first patch just reverts the patch (and its follow-up patch).\n\nThe second introduces a new option, -f{,no}-canon-prefix-map which affects\nthe behavior of -f{file,macro,debug,profile}-prefix-map=, if on it\ncanonicalizes the old path of the prefix map option and compares that\nagainst the canonicalized filename for absolute paths but not relative.\n\nAnd last is like the second, but does that also for relative paths except\nfor filenames with no / (or / or \\ on DOS based fs).  So, the third patch\ngets an optional behavior of what has been on the trunk lately with the\ndifference that the old_prefix is canonicalized by the compiler.\n\nInitially I've thought I'd just add some magic syntax to the OLD=NEW\nargument of those options (because there are 4 of them), but as noted\nin the comments, = is valid char in OLD (just not new), so it would\nbe hard to figure out some syntax.  So instead a new option, which one\ncan turn on and off for different -f*-prefix-map= options if needed.\n\n-fdebug-prefix-map=/path1=/mypath1 -fcanon-prefix-map \\\n-fdebug-prefix-map=/path2=/mypath2 -fno-canon-prefix-map \\\n-fdebug-prefix-map=/path3=/mypath3\n\nwill use the old behavior for the /path1 and /path3 handling and\nthe new one only for /path2 handling.\n\nThis commit is the third patch described above.\n\n2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR other/108464\n\t* common.opt (fcanon-prefix-map): New option.\n\t* opts.cc: Include file-prefix-map.h.\n\t(flag_canon_prefix_map): New variable.\n\t(common_handle_option): Handle OPT_fcanon_prefix_map.\n\t(gen_command_line_string): Ignore OPT_fcanon_prefix_map.\n\t* file-prefix-map.h (flag_canon_prefix_map): Declare.\n\t* file-prefix-map.cc (struct file_prefix_map): Add canonicalize\n\tmember.\n\t(add_prefix_map): Initialize canonicalize member from\n\tflag_canon_prefix_map, and if true canonicalize it using lrealpath.\n\t(remap_filename): Revert 2022-11-01 and 2022-11-07 changes,\n\tuse lrealpath result only for map->canonicalize map entries.\n\t* lto-opts.cc (lto_write_options): Ignore OPT_fcanon_prefix_map.\n\t* opts-global.cc (handle_common_deferred_options): Clear\n\tflag_canon_prefix_map at the start and handle OPT_fcanon_prefix_map.\n\t* doc/invoke.texi (-fcanon-prefix-map): Document.\n\t(-ffile-prefix-map, -fdebug-prefix-map, -fprofile-prefix-map): Add\n\tsee also for -fcanon-prefix-map.\n\t* doc/cppopts.texi (-fmacro-prefix-map): Likewise.", "tree": {"sha": "654950039a8351536312789b1189f80a5527b38a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/654950039a8351536312789b1189f80a5527b38a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eb0191aa104badf3cab127f7f87d371c0fef92b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb0191aa104badf3cab127f7f87d371c0fef92b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eb0191aa104badf3cab127f7f87d371c0fef92b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb0191aa104badf3cab127f7f87d371c0fef92b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c63cc7268fd5615997989f153e9405d0f5aaa50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c63cc7268fd5615997989f153e9405d0f5aaa50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c63cc7268fd5615997989f153e9405d0f5aaa50"}], "stats": {"total": 88, "additions": 72, "deletions": 16}, "files": [{"sha": "e558385c7f46275501cec739bb4c9d90b28e8084", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=2eb0191aa104badf3cab127f7f87d371c0fef92b", "patch": "@@ -1208,6 +1208,10 @@ fchecking=\n Common Joined RejectNegative UInteger Var(flag_checking)\n Perform internal consistency checkings.\n \n+fcanon-prefix-map\n+Common Var(common_deferred_options) Defer\n+For -f*-prefix-map= options compare canonicalized pathnames rather than just strings.\n+\n fcode-hoisting\n Common Var(flag_code_hoisting) Optimization\n Enable code hoisting."}, {"sha": "ce225541abe0d2b503fb549b2df06d41640732b5", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=2eb0191aa104badf3cab127f7f87d371c0fef92b", "patch": "@@ -305,7 +305,7 @@ to change an absolute path to a relative path by using @file{.} for\n @var{new} which can result in more reproducible builds that are\n location independent.  This option also affects\n @code{__builtin_FILE()} during compilation.  See also\n-@option{-ffile-prefix-map}.\n+@option{-ffile-prefix-map} and @option{-fcanon-prefix-map}.\n \n @opindex fexec-charset\n @cindex character set, execution"}, {"sha": "3a6a97862b0e42b039134cf9a80fc72247f442cd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2eb0191aa104badf3cab127f7f87d371c0fef92b", "patch": "@@ -191,7 +191,7 @@ in the following sections.\n -dumpdir @var{dumppfx}  -x @var{language}  @gol\n -v  -###  --help@r{[}=@var{class}@r{[},@dots{}@r{]]}  --target-help  --version @gol\n -pass-exit-codes  -pipe  -specs=@var{file}  -wrapper  @gol\n-@@@var{file}  -ffile-prefix-map=@var{old}=@var{new}  @gol\n+@@@var{file}  -ffile-prefix-map=@var{old}=@var{new}  -fcanon-prefix-map  @gol\n -fplugin=@var{file}  -fplugin-arg-@var{name}=@var{arg}  @gol\n -fdump-ada-spec@r{[}-slim@r{]}  -fada-spec-parent=@var{unit}  -fdump-go-spec=@var{file}}\n \n@@ -2207,9 +2207,20 @@ files resided in directory @file{@var{new}} instead.  Specifying this\n option is equivalent to specifying all the individual\n @option{-f*-prefix-map} options.  This can be used to make reproducible\n builds that are location independent.  Directories referenced by\n-directives are not affected by these options. See also\n-@option{-fmacro-prefix-map}, @option{-fdebug-prefix-map} and\n-@option{-fprofile-prefix-map}.\n+directives are not affected by these options.  See also\n+@option{-fmacro-prefix-map}, @option{-fdebug-prefix-map},\n+@option{-fprofile-prefix-map} and @option{-fcanon-prefix-map}.\n+\n+@item -fcanon-prefix-map\n+@opindex fcanon-prefix-map\n+For the @option{-f*-prefix-map} options normally comparison\n+of @file{@var{old}} prefix against the filename that would be normally\n+referenced in the result of the compilation is done using textual\n+comparison of the prefixes, or ignoring character case for case insensitive\n+filesystems and considering slashes and backslashes as equal on DOS based\n+filesystems.  The @option{-fcanon-prefix-map} causes such comparisons\n+to be done on canonicalized paths of @file{@var{old}}\n+and the referenced filename.\n \n @opindex fplugin\n @item -fplugin=@var{name}.so\n@@ -11362,7 +11373,8 @@ build-time path with an install-time path in the debug info.  It can\n also be used to change an absolute path to a relative path by using\n @file{.} for @var{new}.  This can give more reproducible builds, which\n are location independent, but may require an extra command to tell GDB\n-where to find the source files. See also @option{-ffile-prefix-map}.\n+where to find the source files. See also @option{-ffile-prefix-map}\n+and @option{-fcanon-prefix-map}.\n \n @opindex fvar-tracking\n @item -fvar-tracking\n@@ -16550,7 +16562,7 @@ When compiling files residing in directory @file{@var{old}}, record\n profiling information (with @option{--coverage})\n describing them as if the files resided in\n directory @file{@var{new}} instead.\n-See also @option{-ffile-prefix-map}.\n+See also @option{-ffile-prefix-map} and @option{-fcanon-prefix-map}.\n \n @opindex fprofile-update\n @item -fprofile-update=@var{method}"}, {"sha": "0e6db7c142ac7b2b225276d177927e396d65862f", "filename": "gcc/file-prefix-map.cc", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Ffile-prefix-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Ffile-prefix-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffile-prefix-map.cc?ref=2eb0191aa104badf3cab127f7f87d371c0fef92b", "patch": "@@ -30,6 +30,7 @@ struct file_prefix_map\n   const char *new_prefix;\n   size_t old_len;\n   size_t new_len;\n+  bool canonicalize;\n   struct file_prefix_map *next;\n };\n \n@@ -51,8 +52,16 @@ add_prefix_map (file_prefix_map *&maps, const char *arg, const char *opt)\n       return;\n     }\n   map = XNEW (file_prefix_map);\n+  map->canonicalize = flag_canon_prefix_map;\n   map->old_prefix = xstrndup (arg, p - arg);\n   map->old_len = p - arg;\n+  if (map->canonicalize)\n+    {\n+      char *realname = lrealpath (map->old_prefix);\n+      free (const_cast <char *> (map->old_prefix));\n+      map->old_prefix = realname;\n+      map->old_len = strlen (realname);\n+    }\n   p++;\n   map->new_prefix = xstrdup (p);\n   map->new_len = strlen (p);\n@@ -70,34 +79,49 @@ remap_filename (file_prefix_map *maps, const char *filename)\n   file_prefix_map *map;\n   char *s;\n   const char *name;\n-  char *realname;\n+  const char *realname = NULL;\n   size_t name_len;\n \n-  if (!filename || lbasename (filename) == filename)\n+  if (!filename)\n     return filename;\n \n-  realname = lrealpath (filename);\n-\n   for (map = maps; map; map = map->next)\n-    if (filename_ncmp (realname, map->old_prefix, map->old_len) == 0)\n+    if (map->canonicalize)\n+      {\n+\tif (realname == NULL)\n+\t  {\n+\t    if (lbasename (filename) == filename)\n+\t      realname = filename;\n+\t    else\n+\t      realname = lrealpath (filename);\n+\t  }\n+\tif (filename_ncmp (realname, map->old_prefix, map->old_len) == 0)\n+\t  break;\n+      }\n+    else if (filename_ncmp (filename, map->old_prefix, map->old_len) == 0)\n       break;\n   if (!map)\n     {\n-      free (realname);\n+      if (realname != filename)\n+\tfree (const_cast <char *> (realname));\n       return filename;\n     }\n-  name = realname + map->old_len;\n+  if (map->canonicalize)\n+    name = realname + map->old_len;\n+  else\n+    name = filename + map->old_len;\n   name_len = strlen (name) + 1;\n \n   s = (char *) ggc_alloc_atomic (name_len + map->new_len);\n   memcpy (s, map->new_prefix, map->new_len);\n   memcpy (s + map->new_len, name, name_len);\n-  free (realname);\n+  if (realname != filename)\n+    free (const_cast <char *> (realname));\n   return s;\n }\n \n /* NOTE: if adding another -f*-prefix-map option then don't forget to\n-   ignore it in DW_AT_producer (dwarf2out.cc).  */\n+   ignore it in DW_AT_producer (gen_command_line_string in opts.cc).  */\n \n /* Linked lists of file_prefix_map structures.  */\n static file_prefix_map *macro_prefix_maps; /* -fmacro-prefix-map  */"}, {"sha": "23dce0cabd379dd3852a5cd197517e59f66376b2", "filename": "gcc/file-prefix-map.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Ffile-prefix-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Ffile-prefix-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffile-prefix-map.h?ref=2eb0191aa104badf3cab127f7f87d371c0fef92b", "patch": "@@ -22,6 +22,7 @@ void add_macro_prefix_map (const char *);\n void add_debug_prefix_map (const char *);\n void add_file_prefix_map (const char *);\n void add_profile_prefix_map (const char *);\n+extern bool flag_canon_prefix_map;\n \n const char *remap_macro_filename (const char *);\n const char *remap_debug_filename (const char *);"}, {"sha": "c9bee9d4197348c3b20d574cb9d786889595699f", "filename": "gcc/lto-opts.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Flto-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Flto-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.cc?ref=2eb0191aa104badf3cab127f7f87d371c0fef92b", "patch": "@@ -150,6 +150,7 @@ lto_write_options (void)\n \tcase OPT_ffile_prefix_map_:\n \tcase OPT_fmacro_prefix_map_:\n \tcase OPT_fprofile_prefix_map_:\n+\tcase OPT_fcanon_prefix_map:\n \tcase OPT_fwhole_program:\n \t  continue;\n "}, {"sha": "054169158b13ca144e4f06412968246cdf37a470", "filename": "gcc/opts-global.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Fopts-global.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Fopts-global.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.cc?ref=2eb0191aa104badf3cab127f7f87d371c0fef92b", "patch": "@@ -367,6 +367,7 @@ handle_common_deferred_options (void)\n   if (flag_opt_info)\n     opt_info_switch_p (NULL);\n \n+  flag_canon_prefix_map = false;\n   FOR_EACH_VEC_ELT (v, i, opt)\n     {\n       switch (opt->opt_index)\n@@ -395,6 +396,10 @@ handle_common_deferred_options (void)\n \t  add_profile_prefix_map (opt->arg);\n \t  break;\n \n+\tcase OPT_fcanon_prefix_map:\n+\t  flag_canon_prefix_map = opt->value;\n+\t  break;\n+\n \tcase OPT_fdump_:\n \t  g->get_dumps ()->dump_switch_p (opt->arg);\n \t  break;"}, {"sha": "3bc17a187fe18295875e72c8ce921227ccf72cd1", "filename": "gcc/opts.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Fopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb0191aa104badf3cab127f7f87d371c0fef92b/gcc%2Fopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.cc?ref=2eb0191aa104badf3cab127f7f87d371c0fef92b", "patch": "@@ -34,10 +34,14 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-color.h\"\n #include \"version.h\"\n #include \"selftest.h\"\n+#include \"file-prefix-map.h\"\n \n /* In this file all option sets are explicit.  */\n #undef OPTION_SET_P\n \n+/* Set by -fcanon-prefix-map.  */\n+bool flag_canon_prefix_map;\n+\n static void set_Wstrict_aliasing (struct gcc_options *opts, int onoff);\n \n /* Names of fundamental debug info formats indexed by enum\n@@ -2819,6 +2823,10 @@ common_handle_option (struct gcc_options *opts,\n       /* Deferred.  */\n       break;\n \n+    case OPT_fcanon_prefix_map:\n+      flag_canon_prefix_map = value;\n+      break;\n+\n     case OPT_fcallgraph_info:\n       opts->x_flag_callgraph_info = CALLGRAPH_INFO_NAKED;\n       break;\n@@ -3725,6 +3733,7 @@ gen_command_line_string (cl_decoded_option *options,\n       case OPT_fmacro_prefix_map_:\n       case OPT_ffile_prefix_map_:\n       case OPT_fprofile_prefix_map_:\n+      case OPT_fcanon_prefix_map:\n       case OPT_fcompare_debug:\n       case OPT_fchecking:\n       case OPT_fchecking_:"}]}