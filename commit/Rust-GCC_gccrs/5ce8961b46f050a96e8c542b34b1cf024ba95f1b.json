{"sha": "5ce8961b46f050a96e8c542b34b1cf024ba95f1b", "node_id": "C_kwDOANBUbNoAKDVjZTg5NjFiNDZmMDUwYTk2ZThjNTQyYjM0YjFjZjAyNGJhOTVmMWI", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-01-31T19:36:30Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-01T13:30:55Z"}, "message": "c++: ICE with -Wlogical-op [PR107755]\n\nHere we crash in the middle end because warn_logical_operator calls\nbuild_range_check which calls various fold_* functions and those\ndon't work too well when we're still processing template trees.  For\ninstance here we crash because we're converting a RECORD_TYPE to bool.\nAt this point VIEW_CONVERT_EXPR<struct Foo>(b) hasn't yet been converted\nto Foo::operator bool (&b).\n\nI was excited to fix this with instantiation_dependent_expression_p\nwhich can now be called from c-family/ as well, but the problem isn't\nthat the expression is dependent.  So, p_t_d it is.\n\n\tPR c++/107755\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (build_new_op): Don't call warn_logical_operator when\n\tprocessing a template.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wlogical-op-4.C: New test.", "tree": {"sha": "d445ecf6bce4cdfd1958307a67dee6a739d8be8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d445ecf6bce4cdfd1958307a67dee6a739d8be8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ce8961b46f050a96e8c542b34b1cf024ba95f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce8961b46f050a96e8c542b34b1cf024ba95f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce8961b46f050a96e8c542b34b1cf024ba95f1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce8961b46f050a96e8c542b34b1cf024ba95f1b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d77bfdf11fb9d7f9fcce7ed8817fc2877b3ded2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d77bfdf11fb9d7f9fcce7ed8817fc2877b3ded2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d77bfdf11fb9d7f9fcce7ed8817fc2877b3ded2"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "f7c5d9da94bae9d1e642628fd28d061251165337", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce8961b46f050a96e8c542b34b1cf024ba95f1b/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce8961b46f050a96e8c542b34b1cf024ba95f1b/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=5ce8961b46f050a96e8c542b34b1cf024ba95f1b", "patch": "@@ -7335,7 +7335,7 @@ build_new_op (const op_location_t &loc, enum tree_code code, int flags,\n     case TRUTH_ORIF_EXPR:\n     case TRUTH_AND_EXPR:\n     case TRUTH_OR_EXPR:\n-      if (complain & tf_warning)\n+      if ((complain & tf_warning) && !processing_template_decl)\n \twarn_logical_operator (loc, code, boolean_type_node,\n \t\t\t       code_orig_arg1, arg1,\n \t\t\t       code_orig_arg2, arg2);"}, {"sha": "745c9117a3d495486eadfda4d1ead402ac21da8a", "filename": "gcc/testsuite/g++.dg/warn/Wlogical-op-4.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce8961b46f050a96e8c542b34b1cf024ba95f1b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWlogical-op-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce8961b46f050a96e8c542b34b1cf024ba95f1b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWlogical-op-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWlogical-op-4.C?ref=5ce8961b46f050a96e8c542b34b1cf024ba95f1b", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/107755\n+// { dg-do compile }\n+// { dg-options \"-Wlogical-op\" }\n+\n+struct Foo\n+{\n+  operator bool() const { return false; }\n+};\n+\n+bool a;\n+Foo b;\n+\n+template <typename ignored>\n+static bool Bar()\n+{\n+  return (true && (false ? a : b));\n+  return (false || (false ? a : b));\n+}\n+\n+bool Baz()\n+{\n+  return Bar<void>();\n+}"}]}