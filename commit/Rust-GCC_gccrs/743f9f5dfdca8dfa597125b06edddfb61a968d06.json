{"sha": "743f9f5dfdca8dfa597125b06edddfb61a968d06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQzZjlmNWRmZGNhOGRmYTU5NzEyNWIwNmVkZGRmYjYxYTk2OGQwNg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-02-18T17:47:53Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-02-18T17:47:53Z"}, "message": "loop.c (strength_reduce): For derived givs, replace the giv this was derived from with its new_reg.\n\n\t* loop.c (strength_reduce): For derived givs, replace the\n\tgiv this was derived from with its new_reg.\n\t(recombine_givs): Don't set new_reg for derived giv.\n\tAnd don't print it, print SUM instead.\n\nFrom-SVN: r25289", "tree": {"sha": "3c2ad71841be61161eb89250994d793b705891d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c2ad71841be61161eb89250994d793b705891d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/743f9f5dfdca8dfa597125b06edddfb61a968d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743f9f5dfdca8dfa597125b06edddfb61a968d06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/743f9f5dfdca8dfa597125b06edddfb61a968d06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743f9f5dfdca8dfa597125b06edddfb61a968d06/comments", "author": null, "committer": null, "parents": [{"sha": "2d37187d57d10094fdf68facbc741513dfabe51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d37187d57d10094fdf68facbc741513dfabe51a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d37187d57d10094fdf68facbc741513dfabe51a"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "bdc71f9fb8295cb47624249b3de8e2ad23e81406", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/743f9f5dfdca8dfa597125b06edddfb61a968d06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/743f9f5dfdca8dfa597125b06edddfb61a968d06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=743f9f5dfdca8dfa597125b06edddfb61a968d06", "patch": "@@ -1,3 +1,10 @@\n+Fri Feb 19 01:45:06 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* loop.c (strength_reduce): For derived givs, replace the\n+\tgiv this was derived from with its new_reg.\n+\t(recombine_givs): Don't set new_reg for derived giv.\n+\tAnd don't print it, print SUM instead.\n+\n Thu Feb 18 15:52:49 1999  Jim Wilson  <wilson@cygnus.com>\n \n \t* m68kelf.h (ASM_RETURN_CASE_JUMP): Add 5200 support."}, {"sha": "a5ea970b95c8f6782e19d9031b91a6d3cc7c407e", "filename": "gcc/loop.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/743f9f5dfdca8dfa597125b06edddfb61a968d06/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/743f9f5dfdca8dfa597125b06edddfb61a968d06/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=743f9f5dfdca8dfa597125b06edddfb61a968d06", "patch": "@@ -4682,10 +4682,21 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t    {\n \t      int auto_inc_opt = 0;\n \n-\t      v->new_reg = gen_reg_rtx (v->mode);\n+\t      /* If the code for derived givs immediately below has already\n+\t\t allocated a new_reg, we must keep it.  */\n+\t      if (! v->new_reg)\n+\t\tv->new_reg = gen_reg_rtx (v->mode);\n \n \t      if (v->derived_from)\n \t\t{\n+\t\t  struct induction *d = v->derived_from;\n+\n+\t\t  /* In case d->dest_reg is not replaceable, we have\n+\t\t     to replace it in v->insn now.  */\n+\t\t  if (! d->new_reg)\n+\t\t    d->new_reg = gen_reg_rtx (d->mode);\n+\t\t  PATTERN (v->insn)\n+\t\t    = replace_rtx (PATTERN (v->insn), d->dest_reg, d->new_reg);\n \t\t  PATTERN (v->insn)\n \t\t    = replace_rtx (PATTERN (v->insn), v->dest_reg, v->new_reg);\n \t\t  if (bl->biv_count != 1)\n@@ -7359,19 +7370,17 @@ recombine_givs (bl, loop_start, loop_end, unroll_p)\n \t\t   && GET_CODE (XEXP (sum, 1)) == CONST_INT)\n \t\t  || ! unroll_p)\n \t      && validate_change (v->insn, &PATTERN (v->insn),\n-\t\t\t\t  gen_rtx_SET (GET_MODE (v->dest_reg),\n-\t\t\t\t\t       v->dest_reg, sum), 0))\n+\t\t\t\t  gen_rtx_SET (VOIDmode, v->dest_reg, sum), 0))\n \t    {\n \t      v->derived_from = last_giv;\n-\t      v->new_reg = v->dest_reg;\n \t      life_end = stats[i].end_luid;\n \n \t      if (loop_dump_stream)\n \t\t{\n \t\t  fprintf (loop_dump_stream,\n \t\t\t   \"giv at %d derived from %d as \",\n \t\t\t   INSN_UID (v->insn), INSN_UID (last_giv->insn));\n-\t\t  print_rtl (loop_dump_stream, v->new_reg);\n+\t\t  print_rtl (loop_dump_stream, sum);\n \t\t  putc ('\\n', loop_dump_stream);\n \t\t}\n \t    }"}]}