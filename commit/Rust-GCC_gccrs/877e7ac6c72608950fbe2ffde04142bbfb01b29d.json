{"sha": "877e7ac6c72608950fbe2ffde04142bbfb01b29d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc3ZTdhYzZjNzI2MDg5NTBmYmUyZmZkZTA0MTQyYmJmYjAxYjI5ZA==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2021-02-03T10:23:00Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2021-02-03T10:23:00Z"}, "message": "Readded outer attributes to if and if let exprs", "tree": {"sha": "f89e30aecdd398745a61c69ed0a7f8051c63cf93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f89e30aecdd398745a61c69ed0a7f8051c63cf93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/877e7ac6c72608950fbe2ffde04142bbfb01b29d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877e7ac6c72608950fbe2ffde04142bbfb01b29d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/877e7ac6c72608950fbe2ffde04142bbfb01b29d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877e7ac6c72608950fbe2ffde04142bbfb01b29d/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14aacf472dd089804302c5a2f41c1fc37ba5e824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14aacf472dd089804302c5a2f41c1fc37ba5e824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14aacf472dd089804302c5a2f41c1fc37ba5e824"}], "stats": {"total": 151, "additions": 101, "deletions": 50}, "files": [{"sha": "74a64735a6b32f61b495208798bb4a2463c6a5e8", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877e7ac6c72608950fbe2ffde04142bbfb01b29d/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877e7ac6c72608950fbe2ffde04142bbfb01b29d/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=877e7ac6c72608950fbe2ffde04142bbfb01b29d", "patch": "@@ -4075,6 +4075,7 @@ class IfLetExpr;\n // Base if expression with no \"else\" or \"if let\" AST node\n class IfExpr : public ExprWithBlock\n {\n+  std::vector<Attribute> outer_attrs;\n   std::unique_ptr<Expr> condition;\n   std::unique_ptr<BlockExpr> if_block;\n   Location locus;\n@@ -4083,14 +4084,14 @@ class IfExpr : public ExprWithBlock\n   std::string as_string () const override;\n \n   IfExpr (std::unique_ptr<Expr> condition, std::unique_ptr<BlockExpr> if_block,\n-\t  Location locus)\n-    : condition (std::move (condition)), if_block (std::move (if_block)),\n+\t  std::vector<Attribute> outer_attrs, Location locus)\n+    : outer_attrs (std::move (outer_attrs)), condition (std::move (condition)), if_block (std::move (if_block)),\n       locus (locus)\n   {}\n   // outer attributes are never allowed on IfExprs\n \n   // Copy constructor with clone\n-  IfExpr (IfExpr const &other) : ExprWithBlock (other), locus (other.locus)\n+  IfExpr (IfExpr const &other) : ExprWithBlock (other), outer_attrs (other.outer_attrs), locus (other.locus)\n   {\n     // guard to prevent null dereference (only required if error state)\n     if (other.condition != nullptr)\n@@ -4103,6 +4104,7 @@ class IfExpr : public ExprWithBlock\n   IfExpr &operator= (IfExpr const &other)\n   {\n     ExprWithBlock::operator= (other);\n+    outer_attrs = other.outer_attrs;\n     locus = other.locus;\n \n     // guard to prevent null dereference (only required if error state)\n@@ -4165,8 +4167,11 @@ class IfExpr : public ExprWithBlock\n     return if_block == nullptr && condition == nullptr;\n   }\n \n-  // this should never be called\n-  void set_outer_attrs (std::vector<Attribute> new_attrs) override { rust_assert (false); }\n+  void set_outer_attrs (std::vector<Attribute> new_attrs) override { outer_attrs = std::move (new_attrs); }\n+\n+  // TODO: this mutable getter seems really dodgy. Think up better way.\n+  const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n \n protected:\n   // Base clone function but still concrete as concrete base class\n@@ -4190,8 +4195,8 @@ class IfExprConseqElse : public IfExpr\n \n   IfExprConseqElse (std::unique_ptr<Expr> condition,\n \t\t    std::unique_ptr<BlockExpr> if_block,\n-\t\t    std::unique_ptr<BlockExpr> else_block, Location locus)\n-    : IfExpr (std::move (condition), std::move (if_block), locus),\n+\t\t    std::unique_ptr<BlockExpr> else_block, std::vector<Attribute> outer_attrs, Location locus)\n+    : IfExpr (std::move (condition), std::move (if_block), std::move (outer_attrs), locus),\n       else_block (std::move (else_block))\n   {}\n   // again, outer attributes not allowed\n@@ -4246,8 +4251,8 @@ class IfExprConseqIf : public IfExpr\n \n   IfExprConseqIf (std::unique_ptr<Expr> condition,\n \t\t  std::unique_ptr<BlockExpr> if_block,\n-\t\t  std::unique_ptr<IfExpr> conseq_if_expr, Location locus)\n-    : IfExpr (std::move (condition), std::move (if_block), locus),\n+\t\t  std::unique_ptr<IfExpr> conseq_if_expr, std::vector<Attribute> outer_attrs, Location locus)\n+    : IfExpr (std::move (condition), std::move (if_block), std::move (outer_attrs), locus),\n       conseq_if_expr (std::move (conseq_if_expr))\n   {}\n   // outer attributes not allowed\n@@ -4298,6 +4303,7 @@ class IfExprConseqIf : public IfExpr\n // Basic \"if let\" expression AST node with no else\n class IfLetExpr : public ExprWithBlock\n {\n+  std::vector<Attribute> outer_attrs;\n   std::vector<std::unique_ptr<Pattern> > match_arm_patterns; // inlined\n   std::unique_ptr<Expr> value;\n   std::unique_ptr<BlockExpr> if_block;\n@@ -4307,7 +4313,7 @@ class IfLetExpr : public ExprWithBlock\n   std::string as_string () const override;\n \n   IfLetExpr (std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n-\t     std::unique_ptr<Expr> value, std::unique_ptr<BlockExpr> if_block,\n+\t     std::unique_ptr<Expr> value, std::unique_ptr<BlockExpr> if_block, std::vector<Attribute> outer_attrs,\n \t     Location locus)\n     : match_arm_patterns (std::move (match_arm_patterns)),\n       value (std::move (value)), if_block (std::move (if_block)), locus (locus)\n@@ -4316,7 +4322,7 @@ class IfLetExpr : public ExprWithBlock\n \n   // copy constructor with clone\n   IfLetExpr (IfLetExpr const &other)\n-    : ExprWithBlock (other), locus (other.locus)\n+    : ExprWithBlock (other), outer_attrs (other.outer_attrs), locus (other.locus)\n   {\n     // guard to prevent null dereference (only required if error state)\n     if (other.value != nullptr)\n@@ -4333,6 +4339,7 @@ class IfLetExpr : public ExprWithBlock\n   IfLetExpr &operator= (IfLetExpr const &other)\n   {\n     ExprWithBlock::operator= (other);\n+    outer_attrs = other.outer_attrs;\n     locus = other.locus;\n \n     // guard to prevent null dereference (only required if error state)\n@@ -4402,8 +4409,11 @@ class IfLetExpr : public ExprWithBlock\n     return match_arm_patterns;\n   }\n \n-  // this should never be called\n-  void set_outer_attrs (std::vector<Attribute> new_attrs) override { rust_assert (false); }\n+  void set_outer_attrs (std::vector<Attribute> new_attrs) override { outer_attrs = std::move (new_attrs); }\n+\n+  // TODO: this mutable getter seems really dodgy. Think up better way.\n+  const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -4430,9 +4440,9 @@ class IfExprConseqIfLet : public IfExpr\n \n   IfExprConseqIfLet (std::unique_ptr<Expr> condition,\n \t\t     std::unique_ptr<BlockExpr> if_block,\n-\t\t     std::unique_ptr<IfLetExpr> conseq_if_let_expr,\n+\t\t     std::unique_ptr<IfLetExpr> conseq_if_let_expr, std::vector<Attribute> outer_attrs,\n \t\t     Location locus)\n-    : IfExpr (std::move (condition), std::move (if_block), locus),\n+    : IfExpr (std::move (condition), std::move (if_block), std::move (outer_attrs), locus),\n       if_let_expr (std::move (conseq_if_let_expr))\n   {}\n   // outer attributes not allowed\n@@ -4487,9 +4497,9 @@ class IfLetExprConseqElse : public IfLetExpr\n   IfLetExprConseqElse (\n     std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n     std::unique_ptr<Expr> value, std::unique_ptr<BlockExpr> if_block,\n-    std::unique_ptr<BlockExpr> else_block, Location locus)\n+    std::unique_ptr<BlockExpr> else_block, std::vector<Attribute> outer_attrs, Location locus)\n     : IfLetExpr (std::move (match_arm_patterns), std::move (value),\n-\t\t std::move (if_block), locus),\n+\t\t std::move (if_block), std::move (outer_attrs), locus),\n       else_block (std::move (else_block))\n   {}\n   // outer attributes not allowed\n@@ -4546,9 +4556,9 @@ class IfLetExprConseqIf : public IfLetExpr\n   IfLetExprConseqIf (std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n \t\t     std::unique_ptr<Expr> value,\n \t\t     std::unique_ptr<BlockExpr> if_block,\n-\t\t     std::unique_ptr<IfExpr> if_expr, Location locus)\n+\t\t     std::unique_ptr<IfExpr> if_expr, std::vector<Attribute> outer_attrs, Location locus)\n     : IfLetExpr (std::move (match_arm_patterns), std::move (value),\n-\t\t std::move (if_block), locus),\n+\t\t std::move (if_block), std::move (outer_attrs), locus),\n       if_expr (std::move (if_expr))\n   {}\n   // again, outer attributes not allowed\n@@ -4604,9 +4614,9 @@ class IfLetExprConseqIfLet : public IfLetExpr\n   IfLetExprConseqIfLet (\n     std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n     std::unique_ptr<Expr> value, std::unique_ptr<BlockExpr> if_block,\n-    std::unique_ptr<IfLetExpr> if_let_expr, Location locus)\n+    std::unique_ptr<IfLetExpr> if_let_expr, std::vector<Attribute> outer_attrs, Location locus)\n     : IfLetExpr (std::move (match_arm_patterns), std::move (value),\n-\t\t std::move (if_block), locus),\n+\t\t std::move (if_block), std::move (outer_attrs), locus),\n       if_let_expr (std::move (if_let_expr))\n   {}\n   // outer attributes not allowed"}, {"sha": "cfd587b004d0c11d6f4a1fc60a3c901aea2c8826", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 58, "deletions": 13, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877e7ac6c72608950fbe2ffde04142bbfb01b29d/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877e7ac6c72608950fbe2ffde04142bbfb01b29d/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=877e7ac6c72608950fbe2ffde04142bbfb01b29d", "patch": "@@ -1529,12 +1529,15 @@ class AttrVisitor : public AST::ASTVisitor\n   }\n   void visit (AST::IfExpr &expr) override\n   {\n-    // TODO: for if expressions, are attributes allowed if it is part of an expression statement?\n-    // if so, probably have to add a \"does_expr_allow_attrs()\" method to Expr and then don't move attrs.\n-    // otherwise, that may be useful anyway for better error messages. \n+    // rust playground test shows that IfExpr does support outer attrs, at least when used as statement\n \n-    // NOTE: IfExpr literally doesn't support outer attrs, so no strip code\n-    // TODO: is this still true? can't find info on page\n+    // initial strip test based on outer attrs\n+    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+      {\n+\texpr.mark_for_strip ();\n+\treturn;\n+      }\n \n     // can't strip condition expr itself, but can strip sub-expressions\n     auto &condition_expr = expr.get_condition_expr ();\n@@ -1554,7 +1557,13 @@ class AttrVisitor : public AST::ASTVisitor\n   }\n   void visit (AST::IfExprConseqElse &expr) override\n   {\n-    // NOTE: IfExpr literally doesn't support outer attrs, so no strip code\n+    // initial strip test based on outer attrs\n+    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+      {\n+\texpr.mark_for_strip ();\n+\treturn;\n+      }\n \n     // can't strip condition expr itself, but can strip sub-expressions\n     auto &condition_expr = expr.get_condition_expr ();\n@@ -1582,7 +1591,13 @@ class AttrVisitor : public AST::ASTVisitor\n   }\n   void visit (AST::IfExprConseqIf &expr) override\n   {\n-    // NOTE: IfExpr literally doesn't support outer attrs, so no strip code\n+    // initial strip test based on outer attrs\n+    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+      {\n+\texpr.mark_for_strip ();\n+\treturn;\n+      }\n \n     // can't strip condition expr itself, but can strip sub-expressions\n     auto &condition_expr = expr.get_condition_expr ();\n@@ -1610,7 +1625,13 @@ class AttrVisitor : public AST::ASTVisitor\n   }\n   void visit (AST::IfExprConseqIfLet &expr) override\n   {\n-    // NOTE: IfExpr literally doesn't support outer attrs, so no strip code\n+    // initial strip test based on outer attrs\n+    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+      {\n+\texpr.mark_for_strip ();\n+\treturn;\n+      }\n \n     // can't strip condition expr itself, but can strip sub-expressions\n     auto &condition_expr = expr.get_condition_expr ();\n@@ -1639,8 +1660,14 @@ class AttrVisitor : public AST::ASTVisitor\n   }\n   void visit (AST::IfLetExpr &expr) override\n   {\n-    // NOTE: IfLetExpr literally doesn't support outer attrs, so no strip code\n-\n+    // initial strip test based on outer attrs\n+    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+      {\n+\texpr.mark_for_strip ();\n+\treturn;\n+      }\n+    \n     for (auto &pattern : expr.get_patterns ())\n       {\n \tpattern->accept_vis (*this);\n@@ -1667,7 +1694,13 @@ class AttrVisitor : public AST::ASTVisitor\n   }\n   void visit (AST::IfLetExprConseqElse &expr) override\n   {\n-    // NOTE: IfLetExpr literally doesn't support outer attrs, so no strip code\n+    // initial strip test based on outer attrs\n+    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+      {\n+\texpr.mark_for_strip ();\n+\treturn;\n+      }\n \n     for (auto &pattern : expr.get_patterns ())\n       {\n@@ -1703,7 +1736,13 @@ class AttrVisitor : public AST::ASTVisitor\n   }\n   void visit (AST::IfLetExprConseqIf &expr) override\n   {\n-    // NOTE: IfLetExpr literally doesn't support outer attrs, so no strip code\n+    // initial strip test based on outer attrs\n+    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+      {\n+\texpr.mark_for_strip ();\n+\treturn;\n+      }\n \n     for (auto &pattern : expr.get_patterns ())\n       {\n@@ -1739,7 +1778,13 @@ class AttrVisitor : public AST::ASTVisitor\n   }\n   void visit (AST::IfLetExprConseqIfLet &expr) override\n   {\n-    // NOTE: IfLetExpr literally doesn't support outer attrs, so no strip code\n+    // initial strip test based on outer attrs\n+    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+      {\n+\texpr.mark_for_strip ();\n+\treturn;\n+      }\n \n     for (auto &pattern : expr.get_patterns ())\n       {"}, {"sha": "3bea914b68db3a93fd89e9cba1f66ba52cc2fe46", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877e7ac6c72608950fbe2ffde04142bbfb01b29d/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877e7ac6c72608950fbe2ffde04142bbfb01b29d/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=877e7ac6c72608950fbe2ffde04142bbfb01b29d", "patch": "@@ -7503,10 +7503,8 @@ Parser<ManagedTokenSource>::parse_loop_label ()\n template <typename ManagedTokenSource>\n std::unique_ptr<AST::IfExpr>\n Parser<ManagedTokenSource>::parse_if_expr (\n-  std::vector<AST::Attribute> outer_attrs ATTRIBUTE_UNUSED)\n+  std::vector<AST::Attribute> outer_attrs)\n {\n-  // TODO: make having outer attributes an error?\n-\n   Location locus = lexer.peek_token ()->get_locus ();\n   skip_token (IF);\n \n@@ -7525,7 +7523,7 @@ Parser<ManagedTokenSource>::parse_if_expr (\n   ParseRestrictions no_struct_expr;\n   no_struct_expr.can_be_struct_expr = false;\n   std::unique_ptr<AST::Expr> condition\n-    = parse_expr (std::vector<AST::Attribute> (), no_struct_expr);\n+    = parse_expr ({}, no_struct_expr);\n   if (condition == nullptr)\n     {\n       rust_error_at (lexer.peek_token ()->get_locus (),\n@@ -7550,7 +7548,7 @@ Parser<ManagedTokenSource>::parse_if_expr (\n     {\n       // single selection - end of if expression\n       return std::unique_ptr<AST::IfExpr> (\n-\tnew AST::IfExpr (std::move (condition), std::move (if_body), locus));\n+\tnew AST::IfExpr (std::move (condition), std::move (if_body), std::move (outer_attrs), locus));\n     }\n   else\n     {\n@@ -7579,7 +7577,7 @@ Parser<ManagedTokenSource>::parse_if_expr (\n \t    return std::unique_ptr<AST::IfExprConseqElse> (\n \t      new AST::IfExprConseqElse (std::move (condition),\n \t\t\t\t\t std::move (if_body),\n-\t\t\t\t\t std::move (else_body), locus));\n+\t\t\t\t\t std::move (else_body), std::move (outer_attrs), locus));\n \t  }\n \t  case IF: {\n \t    // multiple selection - else if or else if let\n@@ -7601,7 +7599,7 @@ Parser<ManagedTokenSource>::parse_if_expr (\n \t\treturn std::unique_ptr<AST::IfExprConseqIfLet> (\n \t\t  new AST::IfExprConseqIfLet (std::move (condition),\n \t\t\t\t\t      std::move (if_body),\n-\t\t\t\t\t      std::move (if_let_expr), locus));\n+\t\t\t\t\t      std::move (if_let_expr), std::move (outer_attrs), locus));\n \t      }\n \t    else\n \t      {\n@@ -7619,7 +7617,7 @@ Parser<ManagedTokenSource>::parse_if_expr (\n \t\treturn std::unique_ptr<AST::IfExprConseqIf> (\n \t\t  new AST::IfExprConseqIf (std::move (condition),\n \t\t\t\t\t   std::move (if_body),\n-\t\t\t\t\t   std::move (if_expr), locus));\n+\t\t\t\t\t   std::move (if_expr), std::move (outer_attrs), locus));\n \t      }\n \t  }\n \tdefault:\n@@ -7639,10 +7637,8 @@ Parser<ManagedTokenSource>::parse_if_expr (\n template <typename ManagedTokenSource>\n std::unique_ptr<AST::IfLetExpr>\n Parser<ManagedTokenSource>::parse_if_let_expr (\n-  std::vector<AST::Attribute> outer_attrs ATTRIBUTE_UNUSED)\n+  std::vector<AST::Attribute> outer_attrs)\n {\n-  // TODO: make having outer attributes an error?\n-\n   Location locus = lexer.peek_token ()->get_locus ();\n   skip_token (IF);\n \n@@ -7679,7 +7675,7 @@ Parser<ManagedTokenSource>::parse_if_let_expr (\n   ParseRestrictions no_struct_expr;\n   no_struct_expr.can_be_struct_expr = false;\n   std::unique_ptr<AST::Expr> scrutinee_expr\n-    = parse_expr (std::vector<AST::Attribute> (), no_struct_expr);\n+    = parse_expr ({}, no_struct_expr);\n   if (scrutinee_expr == nullptr)\n     {\n       rust_error_at (\n@@ -7709,7 +7705,7 @@ Parser<ManagedTokenSource>::parse_if_let_expr (\n       return std::unique_ptr<AST::IfLetExpr> (\n \tnew AST::IfLetExpr (std::move (match_arm_patterns),\n \t\t\t    std::move (scrutinee_expr), std::move (if_let_body),\n-\t\t\t    locus));\n+\t\t\t    std::move (outer_attrs), locus));\n     }\n   else\n     {\n@@ -7739,7 +7735,7 @@ Parser<ManagedTokenSource>::parse_if_let_expr (\n \t      new AST::IfLetExprConseqElse (std::move (match_arm_patterns),\n \t\t\t\t\t    std::move (scrutinee_expr),\n \t\t\t\t\t    std::move (if_let_body),\n-\t\t\t\t\t    std::move (else_body), locus));\n+\t\t\t\t\t    std::move (else_body), std::move (outer_attrs), locus));\n \t  }\n \t  case IF: {\n \t    // multiple selection - else if or else if let\n@@ -7761,7 +7757,7 @@ Parser<ManagedTokenSource>::parse_if_let_expr (\n \t\treturn std::unique_ptr<AST::IfLetExprConseqIfLet> (\n \t\t  new AST::IfLetExprConseqIfLet (\n \t\t    std::move (match_arm_patterns), std::move (scrutinee_expr),\n-\t\t    std::move (if_let_body), std::move (if_let_expr), locus));\n+\t\t    std::move (if_let_body), std::move (if_let_expr), std::move (outer_attrs), locus));\n \t      }\n \t    else\n \t      {\n@@ -7780,7 +7776,7 @@ Parser<ManagedTokenSource>::parse_if_let_expr (\n \t\t  new AST::IfLetExprConseqIf (std::move (match_arm_patterns),\n \t\t\t\t\t      std::move (scrutinee_expr),\n \t\t\t\t\t      std::move (if_let_body),\n-\t\t\t\t\t      std::move (if_expr), locus));\n+\t\t\t\t\t      std::move (if_expr), std::move (outer_attrs), locus));\n \t      }\n \t  }\n \tdefault:"}]}