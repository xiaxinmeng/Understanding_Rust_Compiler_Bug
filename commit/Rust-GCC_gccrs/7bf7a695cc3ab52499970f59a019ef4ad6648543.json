{"sha": "7bf7a695cc3ab52499970f59a019ef4ad6648543", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JmN2E2OTVjYzNhYjUyNDk5OTcwZjU5YTAxOWVmNGFkNjY0ODU0Mw==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-07-23T15:58:30Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-07-23T15:58:30Z"}, "message": "[AArch64] Remove useless parameter base_rtx.\n\nFrom-SVN: r212947", "tree": {"sha": "3f4bdc4dcf3df9ecd494f9d2ac2622f7f386123f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f4bdc4dcf3df9ecd494f9d2ac2622f7f386123f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bf7a695cc3ab52499970f59a019ef4ad6648543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf7a695cc3ab52499970f59a019ef4ad6648543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf7a695cc3ab52499970f59a019ef4ad6648543", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf7a695cc3ab52499970f59a019ef4ad6648543/comments", "author": null, "committer": null, "parents": [{"sha": "ec01976b4f0991474f1f09a6a1acf461388ab7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec01976b4f0991474f1f09a6a1acf461388ab7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec01976b4f0991474f1f09a6a1acf461388ab7af"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "34560ae67452e5d7668a78c5e037eac901a4583c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf7a695cc3ab52499970f59a019ef4ad6648543/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf7a695cc3ab52499970f59a019ef4ad6648543/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bf7a695cc3ab52499970f59a019ef4ad6648543", "patch": "@@ -1,3 +1,9 @@\n+2014-07-23  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_save_or_restore_callee_save_registers)\n+\t(aarch64_save_or_restore_fprs): Remove base_rtx.\n+\n 2014-07-23  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64.c"}, {"sha": "6c71dccd0abdeb1aad12568925a84cd604d53634", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf7a695cc3ab52499970f59a019ef4ad6648543/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf7a695cc3ab52499970f59a019ef4ad6648543/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7bf7a695cc3ab52499970f59a019ef4ad6648543", "patch": "@@ -1911,7 +1911,7 @@ aarch64_register_saved_on_entry (int regno)\n \n static void\n aarch64_save_or_restore_fprs (HOST_WIDE_INT start_offset, int increment,\n-\t\t\t      bool restore, rtx base_rtx)\n+\t\t\t      bool restore)\n \n {\n   unsigned regno;\n@@ -1927,7 +1927,7 @@ aarch64_save_or_restore_fprs (HOST_WIDE_INT start_offset, int increment,\n \t  rtx mem;\n \t  mem = gen_mem_ref (DFmode,\n \t\t\t     plus_constant (Pmode,\n-\t\t\t\t\t    base_rtx,\n+\t\t\t\t\t    stack_pointer_rtx,\n \t\t\t\t\t    start_offset));\n \n \t  for (regno2 = regno + 1;\n@@ -1947,7 +1947,7 @@ aarch64_save_or_restore_fprs (HOST_WIDE_INT start_offset, int increment,\n \t      mem2 = gen_mem_ref (DFmode,\n \t\t\t\t  plus_constant\n \t\t\t\t  (Pmode,\n-\t\t\t\t   base_rtx,\n+\t\t\t\t   stack_pointer_rtx,\n \t\t\t\t   start_offset + increment));\n \t      if (restore == false)\n \t\t{\n@@ -2001,7 +2001,6 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT start_offset,\n \t\t\t\t\t       bool restore)\n {\n   rtx insn;\n-  rtx base_rtx = stack_pointer_rtx;\n   HOST_WIDE_INT increment = UNITS_PER_WORD;\n   rtx (*gen_mem_ref) (enum machine_mode, rtx) = (frame_pointer_needed\n \t\t\t\t\t\t ? gen_frame_mem : gen_rtx_MEM);\n@@ -2016,7 +2015,7 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT start_offset,\n \t  rtx mem;\n \t  mem = gen_mem_ref (Pmode,\n \t\t\t     plus_constant (Pmode,\n-\t\t\t\t\t    base_rtx,\n+\t\t\t\t\t    stack_pointer_rtx,\n \t\t\t\t\t    start_offset));\n \n \t  for (regno2 = regno + 1;\n@@ -2035,7 +2034,7 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT start_offset,\n \t      mem2 = gen_mem_ref (Pmode,\n \t\t\t\t  plus_constant\n \t\t\t\t  (Pmode,\n-\t\t\t\t   base_rtx,\n+\t\t\t\t   stack_pointer_rtx,\n \t\t\t\t   start_offset + increment));\n \t      if (restore == false)\n \t\t{\n@@ -2080,7 +2079,7 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT start_offset,\n \t}\n     }\n \n-  aarch64_save_or_restore_fprs (start_offset, increment, restore, base_rtx);\n+  aarch64_save_or_restore_fprs (start_offset, increment, restore);\n }\n \n /* AArch64 stack frames generated by this compiler look like:"}]}