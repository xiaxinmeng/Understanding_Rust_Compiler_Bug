{"sha": "9d8dadd8e09f430071f4d7883a54b5dc41255d86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4ZGFkZDhlMDlmNDMwMDcxZjRkNzg4M2E1NGI1ZGM0MTI1NWQ4Ng==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2005-04-26T22:07:39Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-26T22:07:39Z"}, "message": "InetAddress.java: Made all hexadecimal numbers lowercase.\n\n2005-04-26  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/InetAddress.java: Made all hexadecimal numbers lowercase.\n\tFixed typos in javadocs.\n\t(isSiteLocalAddress): Fixed handling of byte values.\n\t(isMCLinkLocal): Likewise.\n\t* java/net/Inet4Address.java\n\t(isMulticastAddress): Call super method.\n\t(isLoopbackAddress): Likewise.\n\t(isAnyLocalAddress): Likewise.\n\t(isLinkLocalAddress): Likewise.\n\t(isSiteLocalAddress): Likewise.\n\t(isMCGlobal): Likewise.\n\t(isMCNodeLocal): Likewise.\n\t(isMCLinkLocal): Likewise.\n\t(isMCSiteLocal): Likewise.\n\t(isMCOrgLocal): Likewise.\n\t(getHostAddress): Likewise.\n\nFrom-SVN: r98795", "tree": {"sha": "4cac8697adea6e1471353acdfebf6ec64967851c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cac8697adea6e1471353acdfebf6ec64967851c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d8dadd8e09f430071f4d7883a54b5dc41255d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d8dadd8e09f430071f4d7883a54b5dc41255d86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d8dadd8e09f430071f4d7883a54b5dc41255d86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d8dadd8e09f430071f4d7883a54b5dc41255d86/comments", "author": null, "committer": null, "parents": [{"sha": "52b26143c9fc9a8dd3df7969e4a5e3ca55da6ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b26143c9fc9a8dd3df7969e4a5e3ca55da6ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52b26143c9fc9a8dd3df7969e4a5e3ca55da6ec9"}], "stats": {"total": 106, "additions": 42, "deletions": 64}, "files": [{"sha": "8c3ab9bcb56956e19f5a63005fd6ca16a7fc2c11", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8dadd8e09f430071f4d7883a54b5dc41255d86/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8dadd8e09f430071f4d7883a54b5dc41255d86/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9d8dadd8e09f430071f4d7883a54b5dc41255d86", "patch": "@@ -1,3 +1,22 @@\n+2005-04-26  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/InetAddress.java: Made all hexadecimal numbers lowercase.\n+\tFixed typos in javadocs.\n+\t(isSiteLocalAddress): Fixed handling of byte values.\n+\t(isMCLinkLocal): Likewise.\n+\t* java/net/Inet4Address.java\n+\t(isMulticastAddress): Call super method.\n+\t(isLoopbackAddress): Likewise.\n+\t(isAnyLocalAddress): Likewise.\n+\t(isLinkLocalAddress): Likewise.\n+\t(isSiteLocalAddress): Likewise.\n+\t(isMCGlobal): Likewise.\n+\t(isMCNodeLocal): Likewise.\n+\t(isMCLinkLocal): Likewise.\n+\t(isMCSiteLocal): Likewise.\n+\t(isMCOrgLocal): Likewise.\n+\t(getHostAddress): Likewise.\n+\n 2005-04-26  Sven de Marothy  <sven@physto.se>\n \n \t* java/net/InetAddress.java"}, {"sha": "1931b8984a4234813479329f5c1aab93bb0b085c", "filename": "libjava/java/net/Inet4Address.java", "status": "modified", "additions": 13, "deletions": 55, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8dadd8e09f430071f4d7883a54b5dc41255d86/libjava%2Fjava%2Fnet%2FInet4Address.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8dadd8e09f430071f4d7883a54b5dc41255d86/libjava%2Fjava%2Fnet%2FInet4Address.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInet4Address.java?ref=9d8dadd8e09f430071f4d7883a54b5dc41255d86", "patch": "@@ -1,5 +1,5 @@\n /* Inet4Address.java --\n-   Copyright (C) 2002, 2003, 2004  Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,7 +39,6 @@\n package java.net;\n \n import java.io.ObjectStreamException;\n-import java.util.Arrays;\n \n /*\n  * Written using on-line Java Platform 1.4 API Specification and\n@@ -85,15 +84,15 @@ private Object writeReplace() throws ObjectStreamException\n    */\n   public boolean isMulticastAddress()\n   {\n-    return (addr[0] & 0xF0) == 0xE0;\n+    return super.isMulticastAddress();\n   }\n \n   /**\n    * Checks if this address is a loopback address\n    */\n   public boolean isLoopbackAddress()\n   {\n-    return addr[0] == 0x7F;\n+    return super.isLoopbackAddress();\n   }\n \n   /**\n@@ -103,9 +102,7 @@ public boolean isLoopbackAddress()\n    */\n   public boolean isAnyLocalAddress()\n   {\n-    byte[] anylocal = { 0, 0, 0, 0 };\n-\n-    return Arrays.equals(addr, anylocal);\n+    return super.isAnyLocalAddress();\n   }\n \n   /**\n@@ -115,8 +112,7 @@ public boolean isAnyLocalAddress()\n    */\n   public boolean isLinkLocalAddress()\n   {\n-    // XXX: This seems to not exist with IPv4 addresses\n-    return false;\n+    return super.isLinkLocalAddress();\n   }\n \n   /**\n@@ -126,23 +122,7 @@ public boolean isLinkLocalAddress()\n    */\n   public boolean isSiteLocalAddress()\n   {\n-    // 10.0.0.0/8\n-    if (addr[0] == 0x0A)\n-      return true;\n-\n-    // XXX: Suns JDK 1.4.1 (on Linux) seems to have a bug here:\n-    // it says 172.16.0.0 - 172.255.255.255 are site local addresses\n-    //\n-    // 172.16.0.0/12\n-    if (addr[0] == 0xAC && (addr[1] & 0xF0) == 0x01)\n-      return true;\n-\n-    // 192.168.0.0/16\n-    if (addr[0] == 0xC0 && addr[1] == 0xA8)\n-      return true;\n-\n-    // XXX: Do we need to check more addresses here ?\n-    return false;\n+    return super.isSiteLocalAddress();\n   }\n \n   /**\n@@ -152,8 +132,7 @@ public boolean isSiteLocalAddress()\n    */\n   public boolean isMCGlobal()\n   {\n-    // XXX: This seems to net exist with IPv4 addresses\n-    return false;\n+    return super.isMCGlobal();\n   }\n \n   /**\n@@ -163,8 +142,7 @@ public boolean isMCGlobal()\n    */\n   public boolean isMCNodeLocal()\n   {\n-    // XXX: This seems to net exist with IPv4 addresses\n-    return false;\n+    return isMCNodeLocal();\n   }\n \n   /**\n@@ -174,10 +152,7 @@ public boolean isMCNodeLocal()\n    */\n   public boolean isMCLinkLocal()\n   {\n-    if (! isMulticastAddress())\n-      return false;\n-\n-    return (addr[0] == 0xE0) && (addr[1] == 0x00) && (addr[2] == 0x00);\n+    return super.isMCLinkLocal();\n   }\n \n   /**\n@@ -187,8 +162,7 @@ public boolean isMCLinkLocal()\n    */\n   public boolean isMCSiteLocal()\n   {\n-    // XXX: This seems to net exist with IPv4 addresses\n-    return false;\n+    return super.isMCSiteLocal();\n   }\n \n   /**\n@@ -198,8 +172,7 @@ public boolean isMCSiteLocal()\n    */\n   public boolean isMCOrgLocal()\n   {\n-    // XXX: This seems to net exist with IPv4 addresses\n-    return false;\n+    return isMCOrgLocal();\n   }\n \n   /**\n@@ -217,22 +190,7 @@ public byte[] getAddress()\n    */\n   public String getHostAddress()\n   {\n-    StringBuffer sbuf = new StringBuffer(40);\n-    int len = addr.length;\n-    int i = 0;\n-\n-    for (;;)\n-      {\n-\tsbuf.append(addr[i] & 0xFF);\n-\ti++;\n-\n-\tif (i == len)\n-\t  break;\n-\n-\tsbuf.append('.');\n-      }\n-\n-    return sbuf.toString();\n+    return super.getHostAddress();\n   }\n \n   /**\n@@ -272,4 +230,4 @@ public boolean equals(Object obj)\n \n     return true;\n   }\n-} // class Inet4Address\n+}"}, {"sha": "0c17206e5f555db201ec041a565cd745d5207999", "filename": "libjava/java/net/InetAddress.java", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8dadd8e09f430071f4d7883a54b5dc41255d86/libjava%2Fjava%2Fnet%2FInetAddress.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8dadd8e09f430071f4d7883a54b5dc41255d86/libjava%2Fjava%2Fnet%2FInetAddress.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInetAddress.java?ref=9d8dadd8e09f430071f4d7883a54b5dc41255d86", "patch": "@@ -143,7 +143,7 @@ public boolean isMulticastAddress()\n   {\n     // Mask against high order bits of 1110\n     if (addr.length == 4)\n-      return (addr[0] & 0xF0) == 0xE0;\n+      return (addr[0] & 0xf0) == 0xe0;\n \n     // Mask against high order bits of 11111111\n     if (addr.length == 16)\n@@ -173,7 +173,7 @@ public boolean isLoopbackAddress()\n   {\n     // This is the IPv4 implementation.\n     // Any class derived from InetAddress should override this.\n-    return addr[0] == 0x7F;\n+    return (addr[0] & 0xff) == 0x7f;\n   }\n \n   /**\n@@ -198,18 +198,17 @@ public boolean isSiteLocalAddress()\n   {\n     // This is the IPv4 implementation.\n     // Any class derived from InetAddress should override this.\n+\n     // 10.0.0.0/8\n-    if (addr[0] == 0x0A)\n+    if ((addr[0] & 0xff) == 0x0a)\n       return true;\n \n-    // XXX: Suns JDK 1.4.1 (on Linux) seems to have a bug here:\n-    // it says 172.16.0.0 - 172.255.255.255 are site local addresses\n     // 172.16.0.0/12\n-    if (addr[0] == 0xAC && (addr[1] & 0xF0) == 0x01)\n+    if ((addr[0] & 0xff) == 0xac && (addr[1] & 0xf0) == 0x10)\n       return true;\n \n     // 192.168.0.0/16\n-    if (addr[0] == 0xC0 && addr[1] == 0xA8)\n+    if ((addr[0] & 0xff) == 0xc0 && (addr[1] & 0xff) == 0xa8)\n       return true;\n \n     // XXX: Do we need to check more addresses here ?\n@@ -254,7 +253,9 @@ public boolean isMCLinkLocal()\n     if (! isMulticastAddress())\n       return false;\n \n-    return (addr[0] == 0xE0 && addr[1] == 0x00 && addr[2] == 0x00);\n+    return ((addr[0] & 0xff) == 0xe0\n+\t    && (addr[1] & 0xff)  == 0x00\n+\t    && (addr[2] & 0xff)  == 0x00);\n   }\n \n   /**\n@@ -447,7 +448,7 @@ public int hashCode()\n     int i = len > 4 ? len - 4 : 0;\n \n     for (; i < len; i++)\n-      hash = (hash << 8) | (addr[i] & 0xFF);\n+      hash = (hash << 8) | (addr[i] & 0xff);\n \n     return hash;\n   }"}]}