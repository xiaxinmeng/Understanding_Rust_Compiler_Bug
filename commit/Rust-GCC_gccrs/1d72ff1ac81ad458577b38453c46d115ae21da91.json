{"sha": "1d72ff1ac81ad458577b38453c46d115ae21da91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ3MmZmMWFjODFhZDQ1ODU3N2IzODQ1M2M0NmQxMTVhZTIxZGE5MQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-10-05T17:13:10Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-10-05T17:13:10Z"}, "message": "gimple.texi: Fix some typos, wrap some long lines, fix some broken wraps with continuations.\n\ngcc/\n\t* doc/gimple.texi: Fix some typos, wrap some long lines,\n\tfix some broken wraps with continuations.\n\t* tree-ssa-reassoc.c: Fix comment typos.\n\nFrom-SVN: r140887", "tree": {"sha": "a3f998e681ab3ece5a0531feda3a1f1fd0736f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3f998e681ab3ece5a0531feda3a1f1fd0736f02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d72ff1ac81ad458577b38453c46d115ae21da91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d72ff1ac81ad458577b38453c46d115ae21da91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d72ff1ac81ad458577b38453c46d115ae21da91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d72ff1ac81ad458577b38453c46d115ae21da91/comments", "author": null, "committer": null, "parents": [{"sha": "631d0d36105c07f3e8c4127d252f83dbabbd40a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/631d0d36105c07f3e8c4127d252f83dbabbd40a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/631d0d36105c07f3e8c4127d252f83dbabbd40a3"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "71eaead3463480abb6ad58a2baa09eba8b20935f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d72ff1ac81ad458577b38453c46d115ae21da91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d72ff1ac81ad458577b38453c46d115ae21da91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d72ff1ac81ad458577b38453c46d115ae21da91", "patch": "@@ -1,3 +1,9 @@\n+2008-10-05  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* doc/gimple.texi: Fix some typos, wrap some long lines,\n+\tfix some broken wraps with continuations.\n+\t* tree-ssa-reassoc.c: Fix comment typos.\n+\n 2000-10-04  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/37603"}, {"sha": "541785114ad3593875234197abe514098c3ed78a", "filename": "gcc/doc/gimple.texi", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d72ff1ac81ad458577b38453c46d115ae21da91/gcc%2Fdoc%2Fgimple.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d72ff1ac81ad458577b38453c46d115ae21da91/gcc%2Fdoc%2Fgimple.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgimple.texi?ref=1d72ff1ac81ad458577b38453c46d115ae21da91", "patch": "@@ -249,7 +249,7 @@ Array of trees with @code{num_ops} slots.\n This tuple is essentially identical to @code{gimple_statement_with_ops},\n except that it contains 4 additional fields to hold vectors\n related memory stores and loads.  Similar to the previous case,\n-the structure is split in two to accomodate for the operand\n+the structure is split in two to accommodate for the operand\n vector (@code{gimple_statement_with_memory_ops_base} and\n @code{gimple_statement_with_memory_ops}).\n \n@@ -953,8 +953,8 @@ Set @code{IN_OP} to be input operand @code{INDEX} in @code{GIMPLE_ASM} @code{G}.\n Return output operand @code{INDEX} of @code{GIMPLE_ASM} @code{G}. \n @end deftypefn\n \n-@deftypefn {GIMPLE function} void gimple_asm_set_output_op (gimple g, unsigne\n-index, tree out_op)\n+@deftypefn {GIMPLE function} void gimple_asm_set_output_op (gimple g, @\n+unsigned index, tree out_op)\n Set @code{OUT_OP} to be output operand @code{INDEX} in @code{GIMPLE_ASM} @code{G}. \n @end deftypefn\n \n@@ -1012,7 +1012,8 @@ case they will be converted to a gimple operand if necessary.\n \n This function returns the newly created @code{GIMPLE_ASSIGN} tuple.\n \n-@deftypefn {GIMPLE function} gimple gimple_build_assign_with_ops (enum tree_code subcode, tree lhs, tree op1, tree op2)\n+@deftypefn {GIMPLE function} gimple gimple_build_assign_with_ops @\n+(enum tree_code subcode, tree lhs, tree op1, tree op2)\n This function is similar to @code{gimple_build_assign}, but is used to\n build a @code{GIMPLE_ASSIGN} statement when the operands of the\n right-hand side of the assignment are already split into\n@@ -1031,8 +1032,8 @@ assignment statement @code{G}.\n  \n \n @deftypefn {GIMPLE function} enum gimple_rhs_class gimple_assign_rhs_class (gimple g)\n-Return the gimple rhs class of the code fo the expression\n-computed on the rhs of assignment statment @code{G}.  This will never\n+Return the gimple rhs class of the code for the expression\n+computed on the rhs of assignment statement @code{G}.  This will never\n return @code{GIMPLE_INVALID_RHS}.\n @end deftypefn\n \n@@ -1479,7 +1480,7 @@ Return the destination of the unconditional jump @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_goto_set_dest (gimple g, tree dest)\n-Set @code{DEST} to be the destination of the unconditonal jump @code{G}. \n+Set @code{DEST} to be the destination of the unconditional jump @code{G}.\n @end deftypefn\n \n \n@@ -1605,8 +1606,8 @@ Set @code{NAME} to be the name associated with @code{OMP} critical statement @co\n @subsection @code{GIMPLE_OMP_FOR}\n @cindex @code{GIMPLE_OMP_FOR}\n \n-@deftypefn {GIMPLE function} gimple gimple_build_omp_for (gimple_seq body, tre\n-clauses, tree index, tree initial, tree final, tree incr,\n+@deftypefn {GIMPLE function} gimple gimple_build_omp_for (gimple_seq body, @\n+tree clauses, tree index, tree initial, tree final, tree incr, @\n gimple_seq pre_body, enum tree_code omp_for_cond)\n Build a @code{GIMPLE_OMP_FOR} statement. @code{BODY} is sequence of statements\n inside the for loop.  @code{CLAUSES}, are any of the @code{OMP} loop\n@@ -1651,7 +1652,7 @@ Return a pointer to the initial value for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_for_set_initial (gimple g, tree initial)\n-Set @code{INTIAL} to be the initial value for @code{OMP_FOR} @code{G}. \n+Set @code{INITIAL} to be the initial value for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_for_final (gimple g)\n@@ -1791,7 +1792,7 @@ Set @code{DATA_ARG} to be the data argument for @code{OMP_PARALLEL} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} bool is_gimple_omp (gimple stmt)\n-Returns true when the gimple statment @code{STMT} is any of the OpenMP\n+Returns true when the gimple statement @code{STMT} is any of the OpenMP\n types. \n @end deftypefn\n \n@@ -1841,7 +1842,7 @@ Set the @code{GF_OMP_SECTION_LAST} flag on @code{G}.\n @deftypefn {GIMPLE function} gimple gimple_build_omp_sections (gimple_seq body, tree clauses)\n Build a @code{GIMPLE_OMP_SECTIONS} statement. @code{BODY} is a sequence of\n section statements.  @code{CLAUSES} are any of the @code{OMP} sections\n-contsruct's clauses: private, firstprivate, lastprivate,\n+construct's clauses: private, firstprivate, lastprivate,\n reduction, and nowait.\n @end deftypefn\n \n@@ -2093,7 +2094,7 @@ clean-up expression.\n Return the cleanup sequence for cleanup statement @code{G}. \n @end deftypefn\n \n-@deftypefn {GIMPLE function} void gimple_wce_set_canup (gimple g, gimple_seq cleanup)\n+@deftypefn {GIMPLE function} void gimple_wce_set_cleanup (gimple g, gimple_seq cleanup)\n Set @code{CLEANUP} to be the cleanup sequence for @code{G}. \n @end deftypefn\n "}, {"sha": "aa01258da7038329eceb109e738af9aeda2bc65b", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d72ff1ac81ad458577b38453c46d115ae21da91/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d72ff1ac81ad458577b38453c46d115ae21da91/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=1d72ff1ac81ad458577b38453c46d115ae21da91", "patch": "@@ -1,5 +1,5 @@\n /* Reassociation for trees.\n-   Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n    Contributed by Daniel Berlin <dan@dberlin.org>\n \n This file is part of GCC.\n@@ -154,7 +154,7 @@ along with GCC; see the file COPYING3.  If not see\n     \n     Thus, this is what we do.  When we have three ops left, we check to see\n     what order to put them in, and call it a day.  As a nod to vector sum\n-    reduction, we check if any of ops are a really a phi node that is a\n+    reduction, we check if any of the ops are really a phi node that is a\n     destructive update for the associating op, and keep the destructive\n     update together for vector sum reduction recognition.  */\n "}]}