{"sha": "cf67050334d42b14a7eecf2d503a96c1d284fbfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y2NzA1MDMzNGQ0MmIxNGE3ZWVjZjJkNTAzYTk2YzFkMjg0ZmJmZA==", "commit": {"author": {"name": "Zhenqiang Chen", "email": "zhenqiang.chen@linaro.org", "date": "2014-11-17T06:19:08Z"}, "committer": {"name": "Zhenqiang Chen", "email": "zqchen@gcc.gnu.org", "date": "2014-11-17T06:19:08Z"}, "message": "aarch64-protos.h (aarch64_ccmp_mode_to_code): New.\n\n2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\t* config/aarch64/aarch64-protos.h (aarch64_ccmp_mode_to_code): New.\n\t* aarch64.c (aarch64_nzcv_codes): New data.\n\t(aarch64_ccmp_mode_to_code): New.\n\t(aarch64_print_operand): Output nzcv.\n\tconfig/aarch64/aarch64.md (cbranchcc4, *ccmp_and, *ccmp_ior, cstorecc4):\n\tNew patterns.\n\t(cstore<mode>4): Handle ccmp_cc_register.\n\t* config/aarch64/predicates.md (const0_operand): New.\n\nFrom-SVN: r217644", "tree": {"sha": "58ea5ad6ce642b9ab1f52b859ac9862cdd7cf585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58ea5ad6ce642b9ab1f52b859ac9862cdd7cf585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf67050334d42b14a7eecf2d503a96c1d284fbfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf67050334d42b14a7eecf2d503a96c1d284fbfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf67050334d42b14a7eecf2d503a96c1d284fbfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf67050334d42b14a7eecf2d503a96c1d284fbfd/comments", "author": null, "committer": null, "parents": [{"sha": "3dfa7055cb669a887776e3cce78374df069de4ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfa7055cb669a887776e3cce78374df069de4ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfa7055cb669a887776e3cce78374df069de4ad"}], "stats": {"total": 192, "additions": 188, "deletions": 4}, "files": [{"sha": "6af355b2e7620e60a3fb7381b2e236c40394ae5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf67050334d42b14a7eecf2d503a96c1d284fbfd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf67050334d42b14a7eecf2d503a96c1d284fbfd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf67050334d42b14a7eecf2d503a96c1d284fbfd", "patch": "@@ -1,3 +1,14 @@\n+2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_ccmp_mode_to_code): New.\n+\t* aarch64.c (aarch64_nzcv_codes): New data.\n+\t(aarch64_ccmp_mode_to_code): New.\n+\t(aarch64_print_operand): Output nzcv.\n+\tconfig/aarch64/aarch64.md (cbranchcc4, *ccmp_and, *ccmp_ior, cstorecc4):\n+\tNew patterns.\n+\t(cstore<mode>4): Handle ccmp_cc_register.\n+\t* config/aarch64/predicates.md (const0_operand): New.\n+\n 2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* config/aarch64/aarch64-modes.def: Define ccmp CC mode."}, {"sha": "a9985b5ab76ec1823271adddea6805a9ad78490b", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf67050334d42b14a7eecf2d503a96c1d284fbfd/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf67050334d42b14a7eecf2d503a96c1d284fbfd/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=cf67050334d42b14a7eecf2d503a96c1d284fbfd", "patch": "@@ -314,4 +314,5 @@ extern void aarch64_final_prescan_insn (rtx_insn *);\n extern bool\n aarch64_expand_vec_perm_const (rtx target, rtx op0, rtx op1, rtx sel);\n void aarch64_atomic_assign_expand_fenv (tree *, tree *, tree *);\n+int aarch64_ccmp_mode_to_code (enum machine_mode mode);\n #endif /* GCC_AARCH64_PROTOS_H */"}, {"sha": "b9383a4e110e07af94add8aaab4ae21c88a14a6a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf67050334d42b14a7eecf2d503a96c1d284fbfd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf67050334d42b14a7eecf2d503a96c1d284fbfd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cf67050334d42b14a7eecf2d503a96c1d284fbfd", "patch": "@@ -3829,6 +3829,75 @@ bit_count (unsigned HOST_WIDE_INT value)\n   return count;\n }\n \n+/* N Z C V.  */\n+#define AARCH64_CC_V 1\n+#define AARCH64_CC_C (1 << 1)\n+#define AARCH64_CC_Z (1 << 2)\n+#define AARCH64_CC_N (1 << 3)\n+\n+/* N Z C V flags for ccmp.  The first code is for AND op and the other\n+   is for IOR op.  Indexed by AARCH64_COND_CODE.  */\n+static const int aarch64_nzcv_codes[][2] =\n+{\n+  {AARCH64_CC_Z, 0}, /* EQ, Z == 1.  */\n+  {0, AARCH64_CC_Z}, /* NE, Z == 0.  */\n+  {AARCH64_CC_C, 0}, /* CS, C == 1.  */\n+  {0, AARCH64_CC_C}, /* CC, C == 0.  */\n+  {AARCH64_CC_N, 0}, /* MI, N == 1.  */\n+  {0, AARCH64_CC_N}, /* PL, N == 0.  */\n+  {AARCH64_CC_V, 0}, /* VS, V == 1.  */\n+  {0, AARCH64_CC_V}, /* VC, V == 0.  */\n+  {AARCH64_CC_C, 0}, /* HI, C ==1 && Z == 0.  */\n+  {0, AARCH64_CC_C}, /* LS, !(C == 1 && Z == 0).  */\n+  {0, AARCH64_CC_V}, /* GE, N == V.  */\n+  {AARCH64_CC_V, 0}, /* LT, N != V.  */\n+  {0, AARCH64_CC_Z}, /* GT, Z == 0 && N == V.  */\n+  {AARCH64_CC_Z, 0}, /* LE, !(Z == 0 && N == V).  */\n+  {0, 0}, /* AL, Any.  */\n+  {0, 0}, /* NV, Any.  */\n+};\n+\n+int\n+aarch64_ccmp_mode_to_code (enum machine_mode mode)\n+{\n+  switch (mode)\n+    {\n+    case CC_DNEmode:\n+      return NE;\n+\n+    case CC_DEQmode:\n+      return EQ;\n+\n+    case CC_DLEmode:\n+      return LE;\n+\n+    case CC_DGTmode:\n+      return GT;\n+\n+    case CC_DLTmode:\n+      return LT;\n+\n+    case CC_DGEmode:\n+      return GE;\n+\n+    case CC_DLEUmode:\n+      return LEU;\n+\n+    case CC_DGTUmode:\n+      return GTU;\n+\n+    case CC_DLTUmode:\n+      return LTU;\n+\n+    case CC_DGEUmode:\n+      return GEU;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+\n void\n aarch64_print_operand (FILE *f, rtx x, char code)\n {\n@@ -4193,6 +4262,40 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n       output_addr_const (asm_out_file, x);\n       break;\n \n+    case 'K':\n+      {\n+\tint cond_code;\n+\t/* Print nzcv.  */\n+\n+\tif (!COMPARISON_P (x))\n+\t  {\n+\t    output_operand_lossage (\"invalid operand for '%%%c'\", code);\n+\t    return;\n+\t  }\n+\n+\tcond_code = aarch64_get_condition_code_1 (CCmode, GET_CODE (x));\n+\tgcc_assert (cond_code >= 0);\n+\tasm_fprintf (f, \"%d\", aarch64_nzcv_codes[cond_code][0]);\n+      }\n+      break;\n+\n+    case 'k':\n+      {\n+\tint cond_code;\n+\t/* Print nzcv.  */\n+\n+\tif (!COMPARISON_P (x))\n+\t  {\n+\t    output_operand_lossage (\"invalid operand for '%%%c'\", code);\n+\t    return;\n+\t  }\n+\n+\tcond_code = aarch64_get_condition_code_1 (CCmode, GET_CODE (x));\n+\tgcc_assert (cond_code >= 0);\n+\tasm_fprintf (f, \"%d\", aarch64_nzcv_codes[cond_code][1]);\n+      }\n+      break;\n+\n     default:\n       output_operand_lossage (\"invalid operand prefix '%%%c'\", code);\n       return;"}, {"sha": "b9f9a9d20954858c389ca8fa8888ca19d223de9a", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 68, "deletions": 4, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf67050334d42b14a7eecf2d503a96c1d284fbfd/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf67050334d42b14a7eecf2d503a96c1d284fbfd/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=cf67050334d42b14a7eecf2d503a96c1d284fbfd", "patch": "@@ -246,6 +246,54 @@\n   \"\n )\n \n+(define_expand \"cbranchcc4\"\n+  [(set (pc) (if_then_else\n+\t      (match_operator 0 \"aarch64_comparison_operator\"\n+\t       [(match_operand 1 \"cc_register\" \"\")\n+\t        (match_operand 2 \"const0_operand\")])\n+\t      (label_ref (match_operand 3 \"\" \"\"))\n+\t      (pc)))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*ccmp_and\"\n+  [(set (match_operand 1 \"ccmp_cc_register\" \"\")\n+\t(compare\n+\t (and:SI\n+\t  (match_operator 4 \"aarch64_comparison_operator\"\n+\t   [(match_operand 0 \"ccmp_cc_register\" \"\")\n+\t    (const_int 0)])\n+\t  (match_operator 5 \"aarch64_comparison_operator\"\n+\t   [(match_operand:GPI 2 \"register_operand\" \"r,r,r\")\n+\t    (match_operand:GPI 3 \"aarch64_ccmp_operand\" \"r,Uss,Usn\")]))\n+\t (const_int 0)))]\n+  \"aarch64_ccmp_mode_to_code (GET_MODE (operands[1])) == GET_CODE (operands[5])\"\n+  \"@\n+   ccmp\\\\t%<w>2, %<w>3, %k5, %m4\n+   ccmp\\\\t%<w>2, %<w>3, %k5, %m4\n+   ccmn\\\\t%<w>2, #%n3, %k5, %m4\"\n+  [(set_attr \"type\" \"alus_sreg,alus_imm,alus_imm\")]\n+)\n+\n+(define_insn \"*ccmp_ior\"\n+  [(set (match_operand 1 \"ccmp_cc_register\" \"\")\n+\t(compare\n+\t (ior:SI\n+\t  (match_operator 4 \"aarch64_comparison_operator\"\n+\t   [(match_operand 0 \"ccmp_cc_register\" \"\")\n+\t    (const_int 0)])\n+\t  (match_operator 5 \"aarch64_comparison_operator\"\n+\t   [(match_operand:GPI 2 \"register_operand\" \"r,r,r\")\n+\t    (match_operand:GPI 3 \"aarch64_ccmp_operand\" \"r,Uss,Usn\")]))\n+\t (const_int 0)))]\n+  \"aarch64_ccmp_mode_to_code (GET_MODE (operands[1])) == GET_CODE (operands[5])\"\n+  \"@\n+   ccmp\\\\t%<w>2, %<w>3, %K5, %M4\n+   ccmp\\\\t%<w>2, %<w>3, %K5, %M4\n+   ccmn\\\\t%<w>2, #%n3, %K5, %M4\"\n+  [(set_attr \"type\" \"alus_sreg,alus_imm,alus_imm\")]\n+)\n+\n (define_insn \"*condjump\"\n   [(set (pc) (if_then_else (match_operator 0 \"aarch64_comparison_operator\"\n \t\t\t    [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n@@ -2419,6 +2467,18 @@\n   \"\n )\n \n+(define_expand \"cstorecc4\"\n+  [(set (match_operand:SI 0 \"register_operand\")\n+       (match_operator 1 \"aarch64_comparison_operator\"\n+        [(match_operand 2 \"ccmp_cc_register\")\n+         (match_operand 3 \"const0_operand\")]))]\n+  \"\"\n+\"{\n+  emit_insn (gen_rtx_SET (SImode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n+\n (define_expand \"cstore<mode>4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operator:SI 1 \"aarch64_comparison_operator\"\n@@ -2567,15 +2627,19 @@\n \t\t\t   (match_operand:ALLI 3 \"register_operand\" \"\")))]\n   \"\"\n   {\n-    rtx ccreg;\n     enum rtx_code code = GET_CODE (operands[1]);\n \n     if (code == UNEQ || code == LTGT)\n       FAIL;\n \n-    ccreg = aarch64_gen_compare_reg (code, XEXP (operands[1], 0),\n-\t\t\t\t  XEXP (operands[1], 1));\n-    operands[1] = gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx);\n+    if (!ccmp_cc_register (XEXP (operands[1], 0),\n+\t\t\t   GET_MODE (XEXP (operands[1], 0))))\n+      {\n+\trtx ccreg;\n+\tccreg = aarch64_gen_compare_reg (code, XEXP (operands[1], 0),\n+\t\t\t\t\t XEXP (operands[1], 1));\n+\toperands[1] = gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx);\n+      }\n   }\n )\n "}, {"sha": "712920346e5551233bccd4cb83a1ebb8bdb6e5cf", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf67050334d42b14a7eecf2d503a96c1d284fbfd/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf67050334d42b14a7eecf2d503a96c1d284fbfd/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=cf67050334d42b14a7eecf2d503a96c1d284fbfd", "patch": "@@ -30,6 +30,11 @@\n   (ior (match_code \"symbol_ref\")\n        (match_operand 0 \"register_operand\")))\n \n+;; Return true if OP a (const_int 0) operand.\n+(define_predicate \"const0_operand\"\n+  (and (match_code \"const_int, const_double\")\n+       (match_test \"op == CONST0_RTX (mode)\")))\n+\n (define_predicate \"aarch64_ccmp_immediate\"\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), -31, 31)\")))"}]}