{"sha": "4d652a1865628038acbfc0b9cab1ef7547d49d40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ2NTJhMTg2NTYyODAzOGFjYmZjMGI5Y2FiMWVmNzU0N2Q0OWQ0MA==", "commit": {"author": {"name": "Harsha Jagasia", "email": "harsha.jagasia@amd.com", "date": "2011-07-12T16:26:02Z"}, "committer": {"name": "Harsha Jagasia", "email": "hjagasia@gcc.gnu.org", "date": "2011-07-12T16:26:02Z"}, "message": "AMD bdver2 Enablement\n\n2011-07-12  Harsha Jagasia  <harsha.jagasia@amd.com>\n\n\tAMD bdver2 Enablement\n\t* config.gcc (i[34567]86-*-linux* | ...): Add bdver2.\n\t(case ${target}): Add bdver2.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Let\n\t-march=native recognize bdver2 processors.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Add\n\tbdver2 def_and_undef\n\t* config/i386/i386.c (struct processor_costs bdver2_cost): New\n\tbdver2 cost table.\n\t(m_BDVER2): New definition.\n\t(m_AMD_MULTIPLE): Includes m_BDVER2.\n\t(initial_ix86_tune_features): Add bdver2 tuning.\n\t(processor_target_table): Add bdver2 entry.\n\t(static const char *const cpu_names): Add bdver2 entry.\n\t(ix86_option_override_internal): Add bdver2 instruction sets.\n\t(ix86_issue_rate): Add bdver2.\n\t(ix86_adjust_cost): Add bdver2.\n\t(has_dispatch): Add bdver2.\n\t* config/i386/i386.h (TARGET_BDVER2): New definition.\n\t(enum target_cpu_default): Add TARGET_CPU_DEFAULT_bdver2.\n\t(enum processor_type): Add PROCESSOR_BDVER2.\n\t* config/i386/i386.md (define_attr \"cpu\"): Add bdver2.\n\t* config/i386/i386.opt ( mdispatch-scheduler): Add bdver2 to\n\tdescription.\n\nFrom-SVN: r176209", "tree": {"sha": "d2fe7d43c280b2dd3450551d9b8c0facf4106d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2fe7d43c280b2dd3450551d9b8c0facf4106d3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d652a1865628038acbfc0b9cab1ef7547d49d40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d652a1865628038acbfc0b9cab1ef7547d49d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d652a1865628038acbfc0b9cab1ef7547d49d40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d652a1865628038acbfc0b9cab1ef7547d49d40/comments", "author": null, "committer": null, "parents": [{"sha": "5756d08c2509ccb75ee3a8622e7ace94fc8f346f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5756d08c2509ccb75ee3a8622e7ace94fc8f346f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5756d08c2509ccb75ee3a8622e7ace94fc8f346f"}], "stats": {"total": 199, "additions": 175, "deletions": 24}, "files": [{"sha": "08da4b925eca432b3ed585351d4c843756b11684", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d652a1865628038acbfc0b9cab1ef7547d49d40", "patch": "@@ -1,3 +1,30 @@\n+2011-07-12  Harsha Jagasia  <harsha.jagasia@amd.com>\n+\n+\tAMD bdver2 Enablement\n+\t* config.gcc (i[34567]86-*-linux* | ...): Add bdver2.\n+\t(case ${target}): Add bdver2.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Let\n+\t-march=native recognize bdver2 processors.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Add\n+\tbdver2 def_and_undef\n+\t* config/i386/i386.c (struct processor_costs bdver2_cost): New\n+\tbdver2 cost table.\n+\t(m_BDVER2): New definition.\n+\t(m_AMD_MULTIPLE): Includes m_BDVER2.\n+\t(initial_ix86_tune_features): Add bdver2 tuning.\n+\t(processor_target_table): Add bdver2 entry.\n+\t(static const char *const cpu_names): Add bdver2 entry.\n+\t(ix86_option_override_internal): Add bdver2 instruction sets.\n+\t(ix86_issue_rate): Add bdver2.\n+\t(ix86_adjust_cost): Add bdver2.\n+\t(has_dispatch): Add bdver2.\n+\t* config/i386/i386.h (TARGET_BDVER2): New definition.\n+\t(enum target_cpu_default): Add TARGET_CPU_DEFAULT_bdver2.\n+\t(enum processor_type): Add PROCESSOR_BDVER2.\n+\t* config/i386/i386.md (define_attr \"cpu\"): Add bdver2.\n+\t* config/i386/i386.opt ( mdispatch-scheduler): Add bdver2 to\n+\tdescription.\n+\n 2011-07-12  Richard Henderson  <rth@redhat.com>\n \n \tPR target/49714"}, {"sha": "7343ef53032a85d45edd9e27a8afa80c7549cabe", "filename": "gcc/config.gcc", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4d652a1865628038acbfc0b9cab1ef7547d49d40", "patch": "@@ -1289,7 +1289,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\tneed_64bit_hwint=yes\n \t\t\tneed_64bit_isa=yes\n \t\t\tcase X\"${with_cpu}\" in\n-\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n+\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver2|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n \t\t\t\t;;\n \t\t\tX)\n \t\t\t\tif test x$with_cpu_64 = x; then\n@@ -1298,7 +1298,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\t\t;;\n \t\t\t*)\n \t\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver1 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n+\t\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver2 bdver1 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n \t\t\t\texit 1\n \t\t\t\t;;\n \t\t\tesac\n@@ -1414,7 +1414,7 @@ i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n \t\tneed_64bit_hwint=yes\n \t\tneed_64bit_isa=yes\n \t\tcase X\"${with_cpu}\" in\n-\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n+\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver2|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n \t\t\t;;\n \t\tX)\n \t\t\tif test x$with_cpu_64 = x; then\n@@ -1423,7 +1423,7 @@ i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n \t\t\t;;\n \t\t*)\n \t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver1 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n+\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver2 bdver1 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac\n@@ -1493,7 +1493,7 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t\tif test x$enable_targets = xall; then\n \t\t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n \t\t\t\tcase X\"${with_cpu}\" in\n-\t\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n+\t\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver2|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n \t\t\t\t\t;;\n \t\t\t\tX)\n \t\t\t\t\tif test x$with_cpu_64 = x; then\n@@ -1502,7 +1502,7 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t\t\t\t;;\n \t\t\t\t*)\n \t\t\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\t\t\techo \"generic atom core2 corei7 Xcorei7-avx nocona x86-64 bdver1 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n+\t\t\t\t\techo \"generic atom core2 corei7 Xcorei7-avx nocona x86-64 bdver2 bdver1 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n \t\t\t\t\texit 1\n \t\t\t\t\t;;\n \t\t\t\tesac\n@@ -2748,6 +2748,10 @@ case ${target} in\n     ;;\n   i686-*-* | i786-*-*)\n     case ${target_noncanonical} in\n+      bdver2-*)\n+        arch=bdver2\n+        cpu=bdver2\n+        ;;\n       bdver1-*)\n \tarch=bdver1\n \tcpu=bdver1\n@@ -2841,6 +2845,10 @@ case ${target} in\n     ;;\n   x86_64-*-*)\n     case ${target_noncanonical} in\n+      bdver2-*)\n+        arch=bdver2\n+        cpu=bdver2\n+        ;;\n       bdver1-*)\n \tarch=bdver1\n \tcpu=bdver1\n@@ -3276,8 +3284,9 @@ case \"${target}\" in\n \t\t\t\t;;\n \t\t\t\"\" | x86-64 | generic | native \\\n \t\t\t| k8 | k8-sse3 | athlon64 | athlon64-sse3 | opteron \\\n-\t\t\t| opteron-sse3 | athlon-fx | bdver1 | btver1 | amdfam10 \\\n-\t\t\t| barcelona | nocona | core2 | corei7 | corei7-avx | atom)\n+\t\t\t| opteron-sse3 | athlon-fx | bdver2 | bdver1 | btver1 \\\n+\t\t\t| amdfam10 | barcelona | nocona | core2 | corei7 \\\n+\t\t\t| corei7-avx | atom)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "ecd8958df23da8c2d6410a654a4dadcd0d0457e4", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=4d652a1865628038acbfc0b9cab1ef7547d49d40", "patch": "@@ -499,6 +499,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \n       if (name == SIG_GEODE)\n \tprocessor = PROCESSOR_GEODE;\n+      else if (has_bmi)\n+        processor = PROCESSOR_BDVER2;\n       else if (has_xop)\n \tprocessor = PROCESSOR_BDVER1;\n       else if (has_sse4a && has_ssse3)\n@@ -664,6 +666,9 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n     case PROCESSOR_BDVER1:\n       cpu = \"bdver1\";\n       break;\n+    case PROCESSOR_BDVER2:\n+      cpu = \"bdver2\";\n+      break;\n     case PROCESSOR_BTVER1:\n       cpu = \"btver1\";\n       break;"}, {"sha": "5cbcfd51c68a01475e4eaa6c319b67fd6f05c6e7", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=4d652a1865628038acbfc0b9cab1ef7547d49d40", "patch": "@@ -110,6 +110,10 @@ ix86_target_macros_internal (int isa_flag,\n       def_or_undef (parse_in, \"__bdver1\");\n       def_or_undef (parse_in, \"__bdver1__\");\n       break;\n+    case PROCESSOR_BDVER2:\n+      def_or_undef (parse_in, \"__bdver2\");\n+      def_or_undef (parse_in, \"__bdver2__\");\n+      break;\n     case PROCESSOR_BTVER1:\n       def_or_undef (parse_in, \"__btver1\");\n       def_or_undef (parse_in, \"__btver1__\");\n@@ -198,6 +202,9 @@ ix86_target_macros_internal (int isa_flag,\n     case PROCESSOR_BDVER1:\n       def_or_undef (parse_in, \"__tune_bdver1__\");\n       break;\n+    case PROCESSOR_BDVER2:\n+      def_or_undef (parse_in, \"__tune_bdver2__\");\n+      break;\n    case PROCESSOR_BTVER1:\n       def_or_undef (parse_in, \"__tune_btver1__\");\n       break;"}, {"sha": "e75e1b1d35eb9d998da8d4d85260931c31f76dbc", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 114, "deletions": 14, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4d652a1865628038acbfc0b9cab1ef7547d49d40", "patch": "@@ -1338,6 +1338,93 @@ struct processor_costs bdver1_cost = {\n   1,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n };\n \n+struct processor_costs bdver2_cost = {\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of a lea instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n+  {COSTS_N_INSNS (4),\t\t\t/* cost of starting multiply for QI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t HI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t SI */\n+   COSTS_N_INSNS (6),\t\t\t/*\t\t\t\t DI */\n+   COSTS_N_INSNS (6)},\t\t\t/*\t\t\t      other */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  {COSTS_N_INSNS (19),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (35),\t\t\t/*\t\t\t    HI */\n+   COSTS_N_INSNS (51),\t\t\t/*\t\t\t    SI */\n+   COSTS_N_INSNS (83),\t\t\t/*\t\t\t    DI */\n+   COSTS_N_INSNS (83)},\t\t\t/*\t\t\t    other */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx */\n+  8,\t\t\t\t\t/* \"large\" insn */\n+  9,\t\t\t\t\t/* MOVE_RATIO */\n+  4,\t\t\t\t     /* cost for loading QImode using movzbl */\n+  {5, 5, 4},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {4, 4, 4},\t\t\t\t/* cost of storing integer registers */\n+  2,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {5, 5, 12},\t\t\t\t/* cost of loading fp registers\n+\t\t   \t\t\t   in SFmode, DFmode and XFmode */\n+  {4, 4, 8},\t\t\t\t/* cost of storing fp registers\n+ \t\t   \t\t\t   in SFmode, DFmode and XFmode */\n+  2,\t\t\t\t\t/* cost of moving MMX register */\n+  {4, 4},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {4, 4},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  2,\t\t\t\t\t/* cost of moving SSE register */\n+  {4, 4, 4},\t\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  {4, 4, 4},\t\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  2,\t\t\t\t\t/* MMX or SSE register to integer */\n+  \t\t\t\t\t/* On K8:\n+\t\t\t\t\t    MOVD reg64, xmmreg Double FSTORE 4\n+\t\t\t\t\t    MOVD reg32, xmmreg Double FSTORE 4\n+\t\t\t\t\t   On AMDFAM10:\n+\t\t\t\t\t    MOVD reg64, xmmreg Double FADD 3\n+\t\t\t\t\t\t\t       1/1  1/1\n+\t\t\t\t\t    MOVD reg32, xmmreg Double FADD 3\n+\t\t\t\t\t\t\t       1/1  1/1 */\n+  16,\t\t\t\t\t/* size of l1 cache.  */\n+  2048,\t\t\t\t\t/* size of l2 cache.  */\n+  64,\t\t\t\t\t/* size of prefetch block */\n+  /* New AMD processors never drop prefetches; if they cannot be performed\n+     immediately, they are queued.  We set number of simultaneous prefetches\n+     to a large constant to reflect this (it probably is not a good idea not\n+     to limit number of prefetches at all, as their execution also takes some\n+     time).  */\n+  100,\t\t\t\t\t/* number of parallel prefetches */\n+  2,\t\t\t\t\t/* Branch cost */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (42),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (52),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  /*  BDVER2 has optimized REP instruction for medium sized blocks, but for\n+      very small blocks it is better to use loop. For large blocks, libcall\n+      can do nontemporary accesses and beat inline considerably.  */\n+  {{libcall, {{6, loop}, {14, unrolled_loop}, {-1, rep_prefix_4_byte}}},\n+   {libcall, {{16, loop}, {8192, rep_prefix_8_byte}, {-1, libcall}}}},\n+  {{libcall, {{8, loop}, {24, unrolled_loop},\n+\t      {2048, rep_prefix_4_byte}, {-1, libcall}}},\n+   {libcall, {{48, unrolled_loop}, {8192, rep_prefix_8_byte}, {-1, libcall}}}},\n+  6,\t\t\t\t\t/* scalar_stmt_cost.  */\n+  4,\t\t\t\t\t/* scalar load_cost.  */\n+  4,\t\t\t\t\t/* scalar_store_cost.  */\n+  6,\t\t\t\t\t/* vec_stmt_cost.  */\n+  0,\t\t\t\t\t/* vec_to_scalar_cost.  */\n+  2,\t\t\t\t\t/* scalar_to_vec_cost.  */\n+  4,\t\t\t\t\t/* vec_align_load_cost.  */\n+  4,\t\t\t\t\t/* vec_unalign_load_cost.  */\n+  4,\t\t\t\t\t/* vec_store_cost.  */\n+  2,\t\t\t\t\t/* cond_taken_branch_cost.  */\n+  1,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n+};\n+\n struct processor_costs btver1_cost = {\n   COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n   COSTS_N_INSNS (2),\t\t\t/* cost of a lea instruction */\n@@ -1813,8 +1900,10 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_ATHLON_K8  (m_K8 | m_ATHLON)\n #define m_AMDFAM10  (1<<PROCESSOR_AMDFAM10)\n #define m_BDVER1  (1<<PROCESSOR_BDVER1)\n+#define m_BDVER2  (1<<PROCESSOR_BDVER2)\n #define m_BTVER1  (1<<PROCESSOR_BTVER1)\n-#define m_AMD_MULTIPLE  (m_K8 | m_ATHLON | m_AMDFAM10 | m_BDVER1 | m_BTVER1)\n+#define m_BDVER\t (m_BDVER1 | m_BDVER2)\n+#define m_AMD_MULTIPLE  (m_ATHLON_K8 | m_AMDFAM10 | m_BDVER | m_BTVER1)\n \n #define m_GENERIC32 (1<<PROCESSOR_GENERIC32)\n #define m_GENERIC64 (1<<PROCESSOR_GENERIC64)\n@@ -1856,7 +1945,7 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   ~m_386,\n \n   /* X86_TUNE_USE_SAHF */\n-  m_ATOM | m_PPRO | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER1 | m_BTVER1\n+  m_ATOM | m_PPRO | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER1\n   | m_PENT4 | m_NOCONA | m_CORE2I7 | m_GENERIC,\n \n   /* X86_TUNE_MOVX: Enable to zero extend integer registers to avoid\n@@ -1959,17 +2048,17 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n      shows that disabling this option on P4 brings over 20% SPECfp regression,\n      while enabling it on K8 brings roughly 2.4% regression that can be partly\n      masked by careful scheduling of moves.  */\n-  m_ATOM | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2I7 | m_GENERIC\n-  | m_AMDFAM10 | m_BDVER1,\n+  m_ATOM | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2I7 | m_GENERIC | m_AMDFAM10\n+  | m_BDVER,\n \n   /* X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL */\n-  m_AMDFAM10 | m_BDVER1 | m_BTVER1 | m_COREI7,\n+  m_AMDFAM10 | m_BDVER | m_BTVER1 | m_COREI7,\n \n   /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL */\n-  m_BDVER1 | m_COREI7,\n+  m_BDVER | m_COREI7,\n \n   /* X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL */\n-  m_BDVER1,\n+  m_BDVER ,\n \n   /* X86_TUNE_SSE_SPLIT_REGS: Set for machines where the type and dependencies\n      are resolved on SSE register parts instead of whole registers, so we may\n@@ -2002,7 +2091,7 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   ~(m_AMD_MULTIPLE | m_GENERIC),\n \n   /* X86_TUNE_INTER_UNIT_CONVERSIONS */\n-  ~(m_AMDFAM10 | m_BDVER1),\n+  ~(m_AMDFAM10 | m_BDVER ),\n \n   /* X86_TUNE_FOUR_JUMP_LIMIT: Some CPU cores are not able to predict more\n      than 4 branch instructions in the 16 byte window.  */\n@@ -2041,11 +2130,11 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n \n   /* X86_TUNE_SLOW_IMUL_IMM32_MEM: Imul of 32-bit constant and memory is\n      vector path on AMD machines.  */\n-  m_K8 | m_CORE2I7_64 | m_GENERIC64 | m_AMDFAM10 | m_BDVER1 | m_BTVER1,\n+  m_K8 | m_CORE2I7_64 | m_GENERIC64 | m_AMDFAM10 | m_BDVER | m_BTVER1,\n \n   /* X86_TUNE_SLOW_IMUL_IMM8: Imul of 8-bit constant is vector path on AMD\n      machines.  */\n-  m_K8 | m_CORE2I7_64 | m_GENERIC64 | m_AMDFAM10 | m_BDVER1 | m_BTVER1,\n+  m_K8 | m_CORE2I7_64 | m_GENERIC64 | m_AMDFAM10 | m_BDVER | m_BTVER1,\n \n   /* X86_TUNE_MOVE_M1_VIA_OR: On pentiums, it is faster to load -1 via OR\n      than a MOV.  */\n@@ -2071,7 +2160,7 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   /* X86_TUNE_FUSE_CMP_AND_BRANCH: Fuse a compare or test instruction\n      with a subsequent conditional jump instruction into a single\n      compare-and-branch uop.  */\n-  m_BDVER1,\n+  m_BDVER ,\n \n   /* X86_TUNE_OPT_AGU: Optimize for Address Generation Unit. This flag\n      will impact LEA instruction selection. */\n@@ -2088,7 +2177,7 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n \n   /* X86_TUNE_AVX128_OPTIMAL: Enable 128-bit AVX instruction generation for\n      the auto-vectorizer.  */\n-  m_BDVER1\n+  m_BDVER \n };\n \n /* Feature tests against the various architecture variations.  */\n@@ -2125,7 +2214,7 @@ static const unsigned int x86_avx256_split_unaligned_load\n   = m_COREI7 | m_GENERIC;\n \n static const unsigned int x86_avx256_split_unaligned_store\n-  = m_COREI7 | m_BDVER1 | m_GENERIC;\n+  = m_COREI7 | m_BDVER | m_GENERIC;\n \n /* In case the average insn count for single function invocation is\n    lower than this constant, emit fast (but longer) prologue and\n@@ -2508,6 +2597,7 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {&generic64_cost, 16, 10, 16, 10, 16},\n   {&amdfam10_cost, 32, 24, 32, 7, 32},\n   {&bdver1_cost, 32, 24, 32, 7, 32},\n+  {&bdver2_cost, 32, 24, 32, 7, 32},\n   {&btver1_cost, 32, 24, 32, 7, 32},\n   {&atom_cost, 16, 7, 16, 7, 16}\n };\n@@ -2538,6 +2628,7 @@ static const char *const cpu_names[TARGET_CPU_DEFAULT_max] =\n   \"k8\",\n   \"amdfam10\",\n   \"bdver1\",\n+  \"bdver2\",\n   \"btver1\"\n };\n \f\n@@ -2939,6 +3030,12 @@ ix86_option_override_internal (bool main_args_p)\n \t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n \t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n \t| PTA_XOP | PTA_LWP},\n+      {\"bdver2\", PROCESSOR_BDVER2, CPU_BDVER2,\n+\tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n+\t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX\n+\t| PTA_XOP | PTA_LWP | PTA_BMI | PTA_TBM | PTA_F16C\n+\t| PTA_FMA},\n       {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC64,\n         PTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n         | PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16},\n@@ -21878,6 +21975,7 @@ ix86_issue_rate (void)\n     case PROCESSOR_GENERIC32:\n     case PROCESSOR_GENERIC64:\n     case PROCESSOR_BDVER1:\n+    case PROCESSOR_BDVER2:\n     case PROCESSOR_BTVER1:\n       return 3;\n \n@@ -22066,6 +22164,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n     case PROCESSOR_K8:\n     case PROCESSOR_AMDFAM10:\n     case PROCESSOR_BDVER1:\n+    case PROCESSOR_BDVER2:\n     case PROCESSOR_BTVER1:\n     case PROCESSOR_ATOM:\n     case PROCESSOR_GENERIC32:\n@@ -34534,7 +34633,8 @@ do_dispatch (rtx insn, int mode)\n static bool\n has_dispatch (rtx insn, int action)\n {\n-  if (ix86_tune == PROCESSOR_BDVER1 && flag_dispatch_scheduler)\n+  if ((ix86_tune == PROCESSOR_BDVER1 || ix86_tune == PROCESSOR_BDVER2)\n+      && flag_dispatch_scheduler)\n     switch (action)\n       {\n       default:"}, {"sha": "f532bad486bc47c2380336afc43ebbffa0613ad6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=4d652a1865628038acbfc0b9cab1ef7547d49d40", "patch": "@@ -242,6 +242,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_GENERIC (TARGET_GENERIC32 || TARGET_GENERIC64)\n #define TARGET_AMDFAM10 (ix86_tune == PROCESSOR_AMDFAM10)\n #define TARGET_BDVER1 (ix86_tune == PROCESSOR_BDVER1)\n+#define TARGET_BDVER2 (ix86_tune == PROCESSOR_BDVER2)\n #define TARGET_BTVER1 (ix86_tune == PROCESSOR_BTVER1)\n #define TARGET_ATOM (ix86_tune == PROCESSOR_ATOM)\n \n@@ -585,6 +586,7 @@ enum target_cpu_default\n   TARGET_CPU_DEFAULT_k8,\n   TARGET_CPU_DEFAULT_amdfam10,\n   TARGET_CPU_DEFAULT_bdver1,\n+  TARGET_CPU_DEFAULT_bdver2,\n   TARGET_CPU_DEFAULT_btver1,\n \n   TARGET_CPU_DEFAULT_max\n@@ -2031,6 +2033,7 @@ enum processor_type\n   PROCESSOR_GENERIC64,\n   PROCESSOR_AMDFAM10,\n   PROCESSOR_BDVER1,\n+  PROCESSOR_BDVER2,\n   PROCESSOR_BTVER1,\n   PROCESSOR_ATOM,\n   PROCESSOR_max"}, {"sha": "d6026c8c105920637e0b5f26e6c7237cf4ac4093", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4d652a1865628038acbfc0b9cab1ef7547d49d40", "patch": "@@ -369,7 +369,7 @@\n \f\n ;; Processor type.\n (define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,corei7,\n-\t\t    atom,generic64,amdfam10,bdver1,btver1\"\n+\t\t    atom,generic64,amdfam10,bdver1,bdver2,btver1\"\n   (const (symbol_ref \"ix86_schedule\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be"}, {"sha": "5e6b5df4c748e8aa2b028dfdff923de19294fecb", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d652a1865628038acbfc0b9cab1ef7547d49d40/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=4d652a1865628038acbfc0b9cab1ef7547d49d40", "patch": "@@ -384,7 +384,7 @@ the function.\n \n mdispatch-scheduler\n Target RejectNegative Var(flag_dispatch_scheduler)\n-Do dispatch scheduling if processor is bdver1 and Haifa scheduling\n+Do dispatch scheduling if processor is bdver1 or bdver2 and Haifa scheduling\n is selected.\n \n mprefer-avx128"}]}