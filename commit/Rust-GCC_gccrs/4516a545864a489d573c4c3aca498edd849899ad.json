{"sha": "4516a545864a489d573c4c3aca498edd849899ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUxNmE1NDU4NjRhNDg5ZDU3M2M0YzNhY2E0OThlZGQ4NDk4OTlhZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-06-28T19:41:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-06-28T19:41:49Z"}, "message": "PR c++/55639 - partial specialization with ::template\n\n\t* parser.c (cp_parser_class_head): Handle ::template.\n\nFrom-SVN: r249754", "tree": {"sha": "19caa4248473de1e47f0aa8b7c6577994f588504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19caa4248473de1e47f0aa8b7c6577994f588504"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4516a545864a489d573c4c3aca498edd849899ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4516a545864a489d573c4c3aca498edd849899ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4516a545864a489d573c4c3aca498edd849899ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4516a545864a489d573c4c3aca498edd849899ad/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36f48ebd016d4ace605a864c7f7303dbc281748d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f48ebd016d4ace605a864c7f7303dbc281748d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f48ebd016d4ace605a864c7f7303dbc281748d"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "f4b93ca7d10007d20e547eb64f53d19446c270b8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4516a545864a489d573c4c3aca498edd849899ad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4516a545864a489d573c4c3aca498edd849899ad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4516a545864a489d573c4c3aca498edd849899ad", "patch": "@@ -1,5 +1,8 @@\n 2017-06-28  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/55639 - partial specialization with ::template\n+\t* parser.c (cp_parser_class_head): Handle ::template.\n+\n \tPR c++/45976 - error with ::template in declarator.\n \t* pt.c (resolve_typename_type): Fix TEMPLATE_ID_EXPR handling.\n "}, {"sha": "bd99c0513405d1ae72042d5e5d645545a8596c0d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4516a545864a489d573c4c3aca498edd849899ad/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4516a545864a489d573c4c3aca498edd849899ad/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4516a545864a489d573c4c3aca498edd849899ad", "patch": "@@ -22602,6 +22602,9 @@ cp_parser_class_head (cp_parser* parser,\n \t\t\t\t\t   /*is_declaration=*/false);\n   /* If there was a nested-name-specifier, then there *must* be an\n      identifier.  */\n+\n+  cp_token *bad_template_keyword = NULL;\n+\n   if (nested_name_specifier)\n     {\n       type_start_token = cp_lexer_peek_token (parser->lexer);\n@@ -22623,6 +22626,8 @@ cp_parser_class_head (cp_parser* parser,\n \t class-name is a template-id; if we looked for the\n \t template-name first we would stop after the template-name.  */\n       cp_parser_parse_tentatively (parser);\n+      if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))\n+\tbad_template_keyword = cp_lexer_consume_token (parser->lexer);\n       type = cp_parser_class_name (parser,\n \t\t\t\t   /*typename_keyword_p=*/false,\n \t\t\t\t   /*template_keyword_p=*/false,\n@@ -22742,6 +22747,12 @@ cp_parser_class_head (cp_parser* parser,\n     {\n       tree scope;\n \n+      if (bad_template_keyword)\n+\t/* [temp.names]: in a qualified-id formed by a class-head-name, the\n+\t   keyword template shall not appear at the top level.  */\n+\tpedwarn (bad_template_keyword->location, OPT_Wpedantic,\n+\t\t \"keyword %<template%> not allowed in class-head-name\");\n+\n       /* Reject typedef-names in class heads.  */\n       if (!DECL_IMPLICIT_TYPEDEF_P (type))\n \t{"}, {"sha": "e3ffe3b58a705263a7e7d50c441bd6288457a964", "filename": "gcc/testsuite/g++.dg/template/partial-specialization8.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4516a545864a489d573c4c3aca498edd849899ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-specialization8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4516a545864a489d573c4c3aca498edd849899ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-specialization8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-specialization8.C?ref=4516a545864a489d573c4c3aca498edd849899ad", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/55639\n+\n+template <int number>\n+struct SomeClass\n+{\n+  SomeClass() { }\n+\n+  template <typename E, int number2>\n+  struct Fun {\n+    static void\n+    fun() { }\n+  };\n+};\n+\n+template <int number>\n+template <typename E>\n+struct SomeClass<number>::template Fun<E, 0> { // { dg-error \"template\" }\n+  static void fun() { }\n+};"}]}