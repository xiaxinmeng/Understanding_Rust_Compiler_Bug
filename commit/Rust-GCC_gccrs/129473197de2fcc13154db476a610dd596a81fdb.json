{"sha": "129473197de2fcc13154db476a610dd596a81fdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI5NDczMTk3ZGUyZmNjMTMxNTRkYjQ3NmE2MTBkZDU5NmE4MWZkYg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-06-25T13:09:28Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-06-25T13:09:28Z"}, "message": "re PR middle-end/44665 (typo in comment, incorrect/out-of-date comment)\n\n2010-06-25  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n       PR 44665\n       * tree-inline.c (gimple_expand_calls_inline): Fix typo in comment.\n       * gimplify.c (is_gimple_reg_rhs_or_call): Likewise.\n       (gimplify_expr): Likewise.\n\nFrom-SVN: r161380", "tree": {"sha": "8b5b49f632a0f146fd0c27574ef045f4371c7e64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b5b49f632a0f146fd0c27574ef045f4371c7e64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/129473197de2fcc13154db476a610dd596a81fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129473197de2fcc13154db476a610dd596a81fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129473197de2fcc13154db476a610dd596a81fdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129473197de2fcc13154db476a610dd596a81fdb/comments", "author": null, "committer": null, "parents": [{"sha": "8aa29647d374a66e695423659a6607ec63c4675a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aa29647d374a66e695423659a6607ec63c4675a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aa29647d374a66e695423659a6607ec63c4675a"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "10816191cd60590449ec68222833f71716cdf5cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129473197de2fcc13154db476a610dd596a81fdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129473197de2fcc13154db476a610dd596a81fdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=129473197de2fcc13154db476a610dd596a81fdb", "patch": "@@ -1,3 +1,10 @@\n+2010-06-25  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 44665\n+\t* tree-inline.c (gimple_expand_calls_inline): Fix typo in comment.\n+\t* gimplify.c (is_gimple_reg_rhs_or_call): Likewise.\n+\t(gimplify_expr): Likewise.\n+\t\n 2010-06-25  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.c (determine_cst_member_ptr): Ignore non-clobbering"}, {"sha": "e1660a350bafbdd4d9182ec525d430becfa97536", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129473197de2fcc13154db476a610dd596a81fdb/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129473197de2fcc13154db476a610dd596a81fdb/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=129473197de2fcc13154db476a610dd596a81fdb", "patch": "@@ -534,7 +534,7 @@ lookup_tmp_var (tree val, bool is_formal)\n \n \n /* Return true if T is a CALL_EXPR or an expression that can be\n-   assignmed to a temporary.  Note that this predicate should only be\n+   assigned to a temporary.  Note that this predicate should only be\n    used during gimplification.  See the rationale for this in\n    gimplify_modify_expr.  */\n \n@@ -6509,7 +6509,7 @@ gimplify_omp_atomic (tree *expr_p, gimple_seq *pre_p)\n \n    GIMPLE_TEST_F points to a function that takes a tree T and\n        returns nonzero if T is in the GIMPLE form requested by the\n-       caller.  The GIMPLE predicates are in tree-gimple.c.\n+       caller.  The GIMPLE predicates are in gimple.c.\n \n    FALLBACK tells the function what sort of a temporary we want if\n        gimplification cannot produce an expression that complies with"}, {"sha": "f446fa7c55cbc1e94bc261d7955decff3daee7f2", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129473197de2fcc13154db476a610dd596a81fdb/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129473197de2fcc13154db476a610dd596a81fdb/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=129473197de2fcc13154db476a610dd596a81fdb", "patch": "@@ -4022,7 +4022,7 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n \n /* Expand call statements reachable from STMT_P.\n    We can only have CALL_EXPRs as the \"toplevel\" tree code or nested\n-   in a MODIFY_EXPR.  See tree-gimple.c:get_call_expr_in().  We can\n+   in a MODIFY_EXPR.  See gimple.c:get_call_expr_in().  We can\n    unfortunately not use that function here because we need a pointer\n    to the CALL_EXPR, not the tree itself.  */\n "}]}