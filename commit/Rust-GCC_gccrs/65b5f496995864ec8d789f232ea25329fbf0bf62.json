{"sha": "65b5f496995864ec8d789f232ea25329fbf0bf62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjViNWY0OTY5OTU4NjRlYzhkNzg5ZjIzMmVhMjUzMjlmYmYwYmY2Mg==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2018-12-09T12:48:26Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2018-12-09T12:48:26Z"}, "message": "Correct the reported line number in C++ combined OpenACC directives\n\nThe C++ FE doesn't set the expr_location of the split acc loop in combined acc\nparallel/kernels loop directives. This only happens for with combined\ndirectives, otherwise cp_parser_omp_construct would be responsible for setting\nthe location. After fixing this bug, I was able to resolve a couple of long\nstanding diagnostics discrepancies between the C/C++ FEs in the test suite.\n\n\tgcc/cp/\n\t* parser.c (cp_parser_oacc_kernels_parallel): Adjust EXPR_LOCATION\n\ton the combined acc loop.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/combined-directives-3.c: New test.\n\t* c-c++-common/goacc/loop-2-kernels.c (void K): Adjust test.\n\t* c-c++-common/goacc/loop-2-parallel.c (void P): Adjust test.\n\t* c-c++-common/goacc/loop-3.c (void p2): Adjust test.\n\nReviewed-by: Thomas Schwinge <thomas@codesourcery.com>\n\nFrom-SVN: r266923", "tree": {"sha": "efbbb9d02069970db68965c00676eb20b16a7273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efbbb9d02069970db68965c00676eb20b16a7273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65b5f496995864ec8d789f232ea25329fbf0bf62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b5f496995864ec8d789f232ea25329fbf0bf62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65b5f496995864ec8d789f232ea25329fbf0bf62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b5f496995864ec8d789f232ea25329fbf0bf62/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b195d270ca3fb13ffa0881cf0b4e92b25f7a560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b195d270ca3fb13ffa0881cf0b4e92b25f7a560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b195d270ca3fb13ffa0881cf0b4e92b25f7a560"}], "stats": {"total": 117, "additions": 77, "deletions": 40}, "files": [{"sha": "672be2d072db15c4851b3e60c5e15a4942a9b7dc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=65b5f496995864ec8d789f232ea25329fbf0bf62", "patch": "@@ -1,3 +1,8 @@\n+2018-12-09  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* parser.c (cp_parser_oacc_kernels_parallel): Adjust EXPR_LOCATION\n+\ton the combined acc loop.\n+\n 2018-12-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl2.c (grokbitfield): Use DECL_SOURCE_LOCATION in error messages"}, {"sha": "8b669a82b14719ee662176b7f3452d32952aa117", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=65b5f496995864ec8d789f232ea25329fbf0bf62", "patch": "@@ -38742,8 +38742,9 @@ cp_parser_oacc_kernels_parallel (cp_parser *parser, cp_token *pragma_tok,\n \t  cp_lexer_consume_token (parser->lexer);\n \t  tree block = begin_omp_parallel ();\n \t  tree clauses;\n-\t  cp_parser_oacc_loop (parser, pragma_tok, p_name, mask, &clauses,\n-\t\t\t       if_p);\n+\t  tree stmt = cp_parser_oacc_loop (parser, pragma_tok, p_name, mask,\n+\t\t\t\t\t   &clauses, if_p);\n+\t  protected_set_expr_location (stmt, pragma_tok->location);\n \t  return finish_omp_construct (code, block, clauses);\n \t}\n     }"}, {"sha": "6b26f6f510dbc42ccc84caf0879ab10f1ff98180", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65b5f496995864ec8d789f232ea25329fbf0bf62", "patch": "@@ -1,3 +1,10 @@\n+2018-12-09  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* c-c++-common/goacc/combined-directives-3.c: New test.\n+\t* c-c++-common/goacc/loop-2-kernels.c (void K): Adjust test.\n+\t* c-c++-common/goacc/loop-2-parallel.c (void P): Adjust test.\n+\t* c-c++-common/goacc/loop-3.c (void p2): Adjust test.\n+\n 2018-12-09  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gfortran.dg/goacc/loop-2-kernels.f95: Update."}, {"sha": "77d418262eacf6b2e384da4466905198742209a2", "filename": "gcc/testsuite/c-c++-common/goacc/combined-directives-3.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-directives-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-directives-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-directives-3.c?ref=65b5f496995864ec8d789f232ea25329fbf0bf62", "patch": "@@ -0,0 +1,24 @@\n+/* Verify the accuracy of the line number associated with combined\n+   constructs.  */\n+\n+int\n+main ()\n+{\n+  int x, y, z;\n+\n+#pragma acc parallel loop seq auto /* { dg-error \"'seq' overrides other OpenACC loop specifiers\" } */\n+  for (x = 0; x < 10; x++)\n+#pragma acc loop\n+    for (y = 0; y < 10; y++)\n+      ;\n+\n+#pragma acc parallel loop gang auto /* { dg-error \"'auto' conflicts with other OpenACC loop specifiers\" } */\n+  for (x = 0; x < 10; x++)\n+#pragma acc loop worker auto /* { dg-error \"'auto' conflicts with other OpenACC loop specifiers\" } */\n+    for (y = 0; y < 10; y++)\n+#pragma acc loop vector\n+      for (z = 0; z < 10; z++)\n+\t;\n+\n+  return 0;\n+}"}, {"sha": "01515089a7d8baf7ec3b9dc81402cf41f1af4b40", "filename": "gcc/testsuite/c-c++-common/goacc/loop-2-kernels.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-2-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-2-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-2-kernels.c?ref=65b5f496995864ec8d789f232ea25329fbf0bf62", "patch": "@@ -147,8 +147,8 @@ void K(void)\n #pragma acc kernels loop worker(num:5)\n   for (i = 0; i < 10; i++)\n     { }\n-#pragma acc kernels loop seq worker // { dg-error \"'seq' overrides\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'seq' overrides\" \"\" { target c++ } }\n+#pragma acc kernels loop seq worker // { dg-error \"'seq' overrides\" }\n+  for (i = 0; i < 10; i++)\n     { }\n #pragma acc kernels loop gang worker\n   for (i = 0; i < 10; i++)\n@@ -163,8 +163,8 @@ void K(void)\n #pragma acc kernels loop vector(length:5)\n   for (i = 0; i < 10; i++)\n     { }\n-#pragma acc kernels loop seq vector // { dg-error \"'seq' overrides\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'seq' overrides\" \"\" { target c++ } }\n+#pragma acc kernels loop seq vector // { dg-error \"'seq' overrides\" }\n+  for (i = 0; i < 10; i++)\n     { }\n #pragma acc kernels loop gang vector\n   for (i = 0; i < 10; i++)\n@@ -176,16 +176,16 @@ void K(void)\n #pragma acc kernels loop auto\n   for (i = 0; i < 10; i++)\n     { }\n-#pragma acc kernels loop seq auto // { dg-error \"'seq' overrides\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'seq' overrides\" \"\" { target c++ } }\n+#pragma acc kernels loop seq auto // { dg-error \"'seq' overrides\" }\n+  for (i = 0; i < 10; i++)\n     { }\n-#pragma acc kernels loop gang auto // { dg-error \"'auto' conflicts\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'auto' conflicts\" \"\" { target c++ } }\n+#pragma acc kernels loop gang auto // { dg-error \"'auto' conflicts\" }\n+  for (i = 0; i < 10; i++)\n     { }\n-#pragma acc kernels loop worker auto // { dg-error \"'auto' conflicts\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'auto' conflicts\" \"\" { target c++ } }\n+#pragma acc kernels loop worker auto // { dg-error \"'auto' conflicts\" }\n+  for (i = 0; i < 10; i++)\n     { }\n-#pragma acc kernels loop vector auto // { dg-error \"'auto' conflicts\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'auto' conflicts\" \"\" { target c++ } }\n+#pragma acc kernels loop vector auto // { dg-error \"'auto' conflicts\" }\n+  for (i = 0; i < 10; i++)\n     { }\n }"}, {"sha": "e3e6786e572c6f862019a338ffb296dddb416fb1", "filename": "gcc/testsuite/c-c++-common/goacc/loop-2-parallel.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-2-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-2-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-2-parallel.c?ref=65b5f496995864ec8d789f232ea25329fbf0bf62", "patch": "@@ -117,16 +117,16 @@ void P(void)\n   for (i = 0; i < 10; i++)\n     { }\n \n-#pragma acc parallel loop seq gang // { dg-error \"'seq' overrides\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'seq' overrides\" \"\" { target c++ } }\n+#pragma acc parallel loop seq gang // { dg-error \"'seq' overrides\" }\n+  for (i = 0; i < 10; i++)\n     { }\n \n #pragma acc parallel loop worker\n   for (i = 0; i < 10; i++)\n     { }\n \n-#pragma acc parallel loop seq worker // { dg-error \"'seq' overrides\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'seq' overrides\" \"\" { target c++ } }\n+#pragma acc parallel loop seq worker // { dg-error \"'seq' overrides\" }\n+  for (i = 0; i < 10; i++)\n     { }\n #pragma acc parallel loop gang worker\n   for (i = 0; i < 10; i++)\n@@ -136,8 +136,8 @@ void P(void)\n   for (i = 0; i < 10; i++)\n     { }\n \n-#pragma acc parallel loop seq vector // { dg-error \"'seq' overrides\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'seq' overrides\" \"\" { target c++ } }\n+#pragma acc parallel loop seq vector // { dg-error \"'seq' overrides\" }\n+  for (i = 0; i < 10; i++)\n     { }\n #pragma acc parallel loop gang vector\n   for (i = 0; i < 10; i++)\n@@ -149,16 +149,16 @@ void P(void)\n #pragma acc parallel loop auto\n   for (i = 0; i < 10; i++)\n     { }\n-#pragma acc parallel loop seq auto // { dg-error \"'seq' overrides\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'seq' overrides\" \"\" { target c++ } }\n+#pragma acc parallel loop seq auto // { dg-error \"'seq' overrides\" }\n+  for (i = 0; i < 10; i++)\n     { }\n-#pragma acc parallel loop gang auto // { dg-error \"'auto' conflicts\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'auto' conflicts\" \"\" { target c++ } }\n+#pragma acc parallel loop gang auto // { dg-error \"'auto' conflicts\" }\n+  for (i = 0; i < 10; i++)\n     { }\n-#pragma acc parallel loop worker auto // { dg-error \"'auto' conflicts\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'auto' conflicts\" \"\" { target c++ } }\n+#pragma acc parallel loop worker auto // { dg-error \"'auto' conflicts\" }\n+  for (i = 0; i < 10; i++)\n     { }\n-#pragma acc parallel loop vector auto // { dg-error \"'auto' conflicts\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"'auto' conflicts\" \"\" { target c++ } }\n+#pragma acc parallel loop vector auto // { dg-error \"'auto' conflicts\" }\n+  for (i = 0; i < 10; i++)\n     { }\n }"}, {"sha": "ad5a4bd5aa9acec1185fdd58fdf621b769c31a60", "filename": "gcc/testsuite/c-c++-common/goacc/loop-3.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b5f496995864ec8d789f232ea25329fbf0bf62/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-3.c?ref=65b5f496995864ec8d789f232ea25329fbf0bf62", "patch": "@@ -37,24 +37,24 @@ void p2 (void)\n {\n   int i, j;\n \n-#pragma acc parallel loop gang(5) // { dg-error \"argument not permitted\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"argument not permitted\" \"\" { target c++ } }\n+#pragma acc parallel loop gang(5) // { dg-error \"argument not permitted\" }\n+  for (i = 0; i < 10; i++)\n     { }\n-#pragma acc parallel loop gang(num:5) // { dg-error \"argument not permitted\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"argument not permitted\" \"\" { target c++ } }\n+#pragma acc parallel loop gang(num:5) // { dg-error \"argument not permitted\" }\n+  for (i = 0; i < 10; i++)\n     { }\n \n-#pragma acc parallel loop worker(5) // { dg-error \"argument not permitted\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"argument not permitted\" \"\" { target c++ } }\n+#pragma acc parallel loop worker(5) // { dg-error \"argument not permitted\" }\n+  for (i = 0; i < 10; i++)\n     { }\n-#pragma acc parallel loop worker(num:5) // { dg-error \"argument not permitted\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"argument not permitted\" \"\" { target c++ } }\n+#pragma acc parallel loop worker(num:5) // { dg-error \"argument not permitted\" }\n+  for (i = 0; i < 10; i++)\n     { }\n \n-#pragma acc parallel loop vector(5) // { dg-error \"argument not permitted\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"argument not permitted\" \"\" { target c++ } }\n+#pragma acc parallel loop vector(5) // { dg-error \"argument not permitted\" }\n+  for (i = 0; i < 10; i++)\n     { }\n-#pragma acc parallel loop vector(length:5) // { dg-error \"argument not permitted\" \"\" { target c } }\n-  for (i = 0; i < 10; i++) // { dg-error \"argument not permitted\" \"\" { target c++ } }\n+#pragma acc parallel loop vector(length:5) // { dg-error \"argument not permitted\" }\n+  for (i = 0; i < 10; i++)\n     { }\n }"}]}