{"sha": "ccb50b8111f3e370a92be2a2367831e98e7bcfff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NiNTBiODExMWYzZTM3MGE5MmJlMmEyMzY3ODMxZTk4ZTdiY2ZmZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-02T15:36:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-02T15:36:24Z"}, "message": "std_fstream.h (_M_destroy_pback): Use _M_in_beg instead of unnecessarily taking the address of _M_pback.\n\n2003-06-02  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/std/std_fstream.h (_M_destroy_pback): Use _M_in_beg\n\tinstead of unnecessarily taking the address of _M_pback.\n\t(xsgetn): Simplify slightly for a single char pback buffer.\n\n2003-06-02  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/sstream.tcc (seekoff): Remove four unnecessary\n\tvariables and two 'if', clean up.\n\n2003-06-02  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/sstream.tcc (seekpos): Test against _M_out_lim\n\tnot _M_out_end, since the former actually points to the string\n\tend (vs buffer end).\n\t* testsuite/27_io/basic_stringbuf/seekpos/char/3.cc: New.\n\nFrom-SVN: r67334", "tree": {"sha": "a795d144d37b71226e8cb18a9c4ac6b3ed683d37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a795d144d37b71226e8cb18a9c4ac6b3ed683d37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccb50b8111f3e370a92be2a2367831e98e7bcfff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccb50b8111f3e370a92be2a2367831e98e7bcfff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccb50b8111f3e370a92be2a2367831e98e7bcfff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccb50b8111f3e370a92be2a2367831e98e7bcfff/comments", "author": null, "committer": null, "parents": [{"sha": "2a9e3b720c1f7bb81a9ece89422593d5a131a4fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9e3b720c1f7bb81a9ece89422593d5a131a4fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9e3b720c1f7bb81a9ece89422593d5a131a4fe"}], "stats": {"total": 110, "additions": 80, "deletions": 30}, "files": [{"sha": "86672813d1ed5d0bf209e514ae4920a1d6ce5a59", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb50b8111f3e370a92be2a2367831e98e7bcfff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb50b8111f3e370a92be2a2367831e98e7bcfff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ccb50b8111f3e370a92be2a2367831e98e7bcfff", "patch": "@@ -1,3 +1,21 @@\n+2003-06-02  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/std/std_fstream.h (_M_destroy_pback): Use _M_in_beg\n+\tinstead of unnecessarily taking the address of _M_pback.\n+\t(xsgetn): Simplify slightly for a single char pback buffer.\n+\n+2003-06-02  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/sstream.tcc (seekoff): Remove four unnecessary\n+\tvariables and two 'if', clean up.\n+\n+2003-06-02  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/sstream.tcc (seekpos): Test against _M_out_lim\n+\tnot _M_out_end, since the former actually points to the string\n+\tend (vs buffer end).\n+\t* testsuite/27_io/basic_stringbuf/seekpos/char/3.cc: New.\n+\n 2003-05-30  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/doxygen/filter:  New file."}, {"sha": "b506d184334f7e047521fdb9bc16e9562a1a0e74", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb50b8111f3e370a92be2a2367831e98e7bcfff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb50b8111f3e370a92be2a2367831e98e7bcfff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=ccb50b8111f3e370a92be2a2367831e98e7bcfff", "patch": "@@ -132,45 +132,32 @@ namespace std\n       if (_M_string.capacity() && (__testin || __testout || __testboth))\n \t{\n \t  char_type* __beg = __testin ? this->_M_in_beg : this->_M_out_beg;\n-\t  char_type* __curi = NULL;\n-\t  char_type* __curo = NULL;\n-\t  char_type* __endi = NULL;\n-\t  char_type* __endo = NULL;\n-\n-\t  if (__testin || __testboth)\n-\t    {\n-\t      __curi = this->_M_in_cur;\n-\t      __endi = this->_M_in_end;\n-\t    }\n-\t  if (__testout || __testboth)\n-\t    {\n-\t      __curo = this->_M_out_cur;\n-\t      // Due to the resolution of DR169, ios_base::end\n-\t      // is this->_M_out_lim, not _M_out_end.\n-\t      __endo = this->_M_out_lim;\n-\t    }\n \n \t  off_type __newoffi = 0;\n \t  off_type __newoffo = 0;\n \t  if (__way == ios_base::cur)\n \t    {\n-\t      __newoffi = __curi - __beg;\n-\t      __newoffo = __curo - __beg;\n+\t      __newoffi = this->_M_in_cur - __beg;\n+\t      __newoffo = this->_M_out_cur - __beg;\n \t    }\n \t  else if (__way == ios_base::end)\n \t    {\n-\t      __newoffi = __endi - __beg;\n-\t      __newoffo = __endo - __beg;\n+\t      __newoffi = this->_M_in_end - __beg;\n+\t      // Due to the resolution of DR169, ios_base::end\n+\t      // is this->_M_out_lim, not _M_out_end.\n+\t      __newoffo = this->_M_out_lim - __beg;\n \t    }\n \n \t  if ((__testin || __testboth)\n-\t      && __newoffi + __off >= 0 && __endi - __beg >= __newoffi + __off)\n+\t      && __newoffi + __off >= 0 \n+\t      && this->_M_in_end - __beg >= __newoffi + __off)\n \t    {\n \t      this->_M_in_cur = __beg + __newoffi + __off;\n \t      __ret = pos_type(__newoffi);\n \t    }\n \t  if ((__testout || __testboth)\n-\t      && __newoffo + __off >= 0 && __endo - __beg >= __newoffo + __off)\n+\t      && __newoffo + __off >= 0 \n+\t      && this->_M_out_lim - __beg >= __newoffo + __off)\n \t    {\n \t      _M_move_out_cur(__newoffo + __off - (this->_M_out_cur - __beg));\n \t      __ret = pos_type(__newoffo);\n@@ -207,7 +194,7 @@ namespace std\n \t  if (__testout)\n \t    {\n \t      __beg = this->_M_out_beg;\n-\t      __end = this->_M_out_end;\n+\t      __end = this->_M_out_lim;\n \t      if (0 <= __pos && __pos <= __end - __beg)\n \t\t__testposo = true;\n \t    }"}, {"sha": "de192131c1434a94d67d1dd59d2431d0089ccd13", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb50b8111f3e370a92be2a2367831e98e7bcfff/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb50b8111f3e370a92be2a2367831e98e7bcfff/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=ccb50b8111f3e370a92be2a2367831e98e7bcfff", "patch": "@@ -191,7 +191,7 @@ namespace std\n \tif (_M_pback_init)\n \t  {\n \t    // Length _M_in_cur moved in the pback buffer.\n-\t    const size_t __off = this->_M_in_cur == &_M_pback ? 0 : 1;\n+\t    const size_t __off = this->_M_in_cur == this->_M_in_beg ? 0 : 1;\n \t    this->setg(this->_M_buf, _M_pback_cur_save + __off, \n \t\t       _M_pback_end_save);\n \t    _M_pback_init = false;\n@@ -399,12 +399,10 @@ namespace std\n \t// Clear out pback buffer before going on to the real deal...\n \tif (this->_M_pback_init)\n \t  {\n-\t    while (__ret < __n && this->_M_in_cur < this->_M_in_end)\n+\t    if (__n && this->_M_in_cur == this->_M_in_beg)\n \t      {\n-\t\t*__s = *this->_M_in_cur;\n-\t\t++__ret;\n-\t\t++__s;\n-\t\t++this->_M_in_cur;\n+\t\t*__s++ = *this->_M_in_cur++;\n+\t\t__ret = 1;\n \t      }\n \t    _M_destroy_pback();\n \t  }"}, {"sha": "f0973b073e35a7b0543ce1102f282933ff8e8884", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekpos/char/3.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb50b8111f3e370a92be2a2367831e98e7bcfff/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb50b8111f3e370a92be2a2367831e98e7bcfff/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fchar%2F3.cc?ref=ccb50b8111f3e370a92be2a2367831e98e7bcfff", "patch": "@@ -0,0 +1,47 @@\n+// 2003-05-30  Paolo Carlini  <pcarlini@unitus.it>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01() \n+{\n+  bool \ttest = true;\n+  using namespace std;\n+  typedef stringbuf::pos_type pos_type;\n+  typedef stringbuf::off_type off_type;\n+\n+  stringbuf strb_01(ios_base::out);\n+\n+  strb_01.sputn(\"broken peak\", 11);\n+  pos_type pt_1 = strb_01.pubseekoff(0, ios_base::end, ios_base::out);\n+  // In general, according to 27.7.1.3,14, the below has undefined\n+  // behaviour since pt_1 + off_type(1) doesn't come from a\n+  // previous pubseekpos or pubseekoff. However, given v3 implementation,\n+  // this was useful to expose a bug in pubseekpos checks.\n+  pos_type pt_2 = strb_01.pubseekpos(pt_1 + off_type(1), ios_base::out);\n+  VERIFY( pt_2 == pos_type(off_type(-1)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}