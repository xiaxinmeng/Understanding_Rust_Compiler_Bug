{"sha": "6d87092d196c96ef596c7877b40409d00af6ee7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4NzA5MmQxOTZjOTZlZjU5NmM3ODc3YjQwNDA5ZDAwYWY2ZWU3YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-11-07T17:51:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-07T17:51:40Z"}, "message": "re PR c++/35688 (template visibility not overridden by template arguments)\n\n\tPR c++/35688\n\t* decl2.c (constrain_visibility): Return void.  Add tmpl parm\n\twhich gives the constraint priority over an attribute.\n\t(constrain_visibility_for_template, determine_visibility): Adjust.\n\t* pt.c (instantiate_class_template_1): Call determine_visibility.\n\nFrom-SVN: r181102", "tree": {"sha": "e9aa9f3cd40d0c2eafea7c00b8df253911a81565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9aa9f3cd40d0c2eafea7c00b8df253911a81565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d87092d196c96ef596c7877b40409d00af6ee7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d87092d196c96ef596c7877b40409d00af6ee7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d87092d196c96ef596c7877b40409d00af6ee7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d87092d196c96ef596c7877b40409d00af6ee7a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7e6757f2a0c3c391bd71d4ddb85843170377ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e6757f2a0c3c391bd71d4ddb85843170377ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7e6757f2a0c3c391bd71d4ddb85843170377ce5"}], "stats": {"total": 99, "additions": 65, "deletions": 34}, "files": [{"sha": "04134ec444db622f3e1295e18a3b2675779de54a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6d87092d196c96ef596c7877b40409d00af6ee7a", "patch": "@@ -1,3 +1,8 @@\n+2011-11-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/35688\n+\t* c-common.c, c-common.h: Revert yesterday's changes.\n+\n 2011-11-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35688"}, {"sha": "0329bc7e01cb58456095b663971e4cbc3325305f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=6d87092d196c96ef596c7877b40409d00af6ee7a", "patch": "@@ -7073,22 +7073,6 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n   return NULL_TREE;\n }\n \n-/* Returns true iff DECL actually has visibility specified by an attribute.\n-   We check for an explicit attribute, rather than just checking\n-   DECL_VISIBILITY_SPECIFIED, to distinguish the use of an attribute from\n-   the use of a \"#pragma GCC visibility push(...)\"; in the latter case we\n-   still want other considerations to be able to overrule the #pragma.  */\n-\n-bool\n-decl_has_visibility_attr (tree decl)\n-{\n-  tree attrs = DECL_ATTRIBUTES (decl);\n-  return (lookup_attribute (\"visibility\", attrs)\n-\t  || (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n-\t      && (lookup_attribute (\"dllimport\", attrs)\n-\t\t  || lookup_attribute (\"dllexport\", attrs))));\n-}\n-\n /* Determine the ELF symbol visibility for DECL, which is either a\n    variable or a function.  It is an error to use this function if a\n    definition of DECL is not available in this translation unit.\n@@ -7104,8 +7088,15 @@ c_determine_visibility (tree decl)\n \n   /* If the user explicitly specified the visibility with an\n      attribute, honor that.  DECL_VISIBILITY will have been set during\n-     the processing of the attribute.  */\n-  if (decl_has_visibility_attr (decl))\n+     the processing of the attribute.  We check for an explicit\n+     attribute, rather than just checking DECL_VISIBILITY_SPECIFIED,\n+     to distinguish the use of an attribute from the use of a \"#pragma\n+     GCC visibility push(...)\"; in the latter case we still want other\n+     considerations to be able to overrule the #pragma.  */\n+  if (lookup_attribute (\"visibility\", DECL_ATTRIBUTES (decl))\n+      || (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\t  && (lookup_attribute (\"dllimport\", DECL_ATTRIBUTES (decl))\n+\t      || lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (decl)))))\n     return true;\n \n   /* Set default visibility to whatever the user supplied with"}, {"sha": "bff6956cc1442614acaf04bd39d05febe70016a9", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=6d87092d196c96ef596c7877b40409d00af6ee7a", "patch": "@@ -775,7 +775,6 @@ extern void overflow_warning (location_t, tree);\n extern void warn_logical_operator (location_t, enum tree_code, tree,\n \t\t\t\t   enum tree_code, tree, enum tree_code, tree);\n extern void check_main_parameter_types (tree decl);\n-extern bool decl_has_visibility_attr (tree);\n extern bool c_determine_visibility (tree);\n extern bool same_scalar_type_ignoring_signedness (tree, tree);\n extern void mark_valid_location_for_stdc_pragma (bool);"}, {"sha": "c66c9dc8d73e6f3ae8ca745d28466aee7d56ef5f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d87092d196c96ef596c7877b40409d00af6ee7a", "patch": "@@ -1,5 +1,11 @@\n 2011-11-07  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/35688\n+\t* decl2.c (constrain_visibility): Return void.  Add tmpl parm\n+\twhich gives the constraint priority over an attribute.\n+\t(constrain_visibility_for_template, determine_visibility): Adjust.\n+\t* pt.c (instantiate_class_template_1): Call determine_visibility.\n+\n \tPR c++/33255\n \t* decl.c (save_function_data): Clear local_typedefs.\n "}, {"sha": "17be3ad7137a685a77db2cee385625645f79682d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=6d87092d196c96ef596c7877b40409d00af6ee7a", "patch": "@@ -1954,10 +1954,12 @@ type_visibility (tree type)\n }\n \n /* Limit the visibility of DECL to VISIBILITY, if not explicitly\n-   specified (or if VISIBILITY is static).  */\n+   specified (or if VISIBILITY is static).  If TMPL is true, this\n+   constraint is for a template argument, and takes precedence\n+   over explicitly-specified visibility on the template.  */\n \n-static bool\n-constrain_visibility (tree decl, int visibility)\n+static void\n+constrain_visibility (tree decl, int visibility, bool tmpl)\n {\n   if (visibility == VISIBILITY_ANON)\n     {\n@@ -1974,16 +1976,11 @@ constrain_visibility (tree decl, int visibility)\n \t    DECL_NOT_REALLY_EXTERN (decl) = 1;\n \t}\n     }\n-  /* We check decl_has_visibility_attr rather than\n-     DECL_VISIBILITY_SPECIFIED here because we want other considerations\n-     to override visibility from a namespace or #pragma.  */\n   else if (visibility > DECL_VISIBILITY (decl)\n-\t   && !decl_has_visibility_attr (decl))\n+\t   && (tmpl || !DECL_VISIBILITY_SPECIFIED (decl)))\n     {\n       DECL_VISIBILITY (decl) = (enum symbol_visibility) visibility;\n-      return true;\n     }\n-  return false;\n }\n \n /* Constrain the visibility of DECL based on the visibility of its template\n@@ -2019,7 +2016,7 @@ constrain_visibility_for_template (tree decl, tree targs)\n \t    }\n \t}\n       if (vis)\n-\tconstrain_visibility (decl, vis);\n+\tconstrain_visibility (decl, vis, true);\n     }\n }\n \n@@ -2132,15 +2129,15 @@ determine_visibility (tree decl)\n \t  if (underlying_vis == VISIBILITY_ANON\n \t      || (CLASS_TYPE_P (underlying_type)\n \t\t  && CLASSTYPE_VISIBILITY_SPECIFIED (underlying_type)))\n-\t    constrain_visibility (decl, underlying_vis);\n+\t    constrain_visibility (decl, underlying_vis, false);\n \t  else\n \t    DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n \t}\n       else if (TREE_CODE (decl) == VAR_DECL && DECL_TINFO_P (decl))\n \t{\n \t  /* tinfo visibility is based on the type it's for.  */\n \t  constrain_visibility\n-\t    (decl, type_visibility (TREE_TYPE (DECL_NAME (decl))));\n+\t    (decl, type_visibility (TREE_TYPE (DECL_NAME (decl))), false);\n \n \t  /* Give the target a chance to override the visibility associated\n \t     with DECL.  */\n@@ -2207,14 +2204,14 @@ determine_visibility (tree decl)\n   if (decl_anon_ns_mem_p (decl))\n     /* Names in an anonymous namespace get internal linkage.\n        This might change once we implement export.  */\n-    constrain_visibility (decl, VISIBILITY_ANON);\n+    constrain_visibility (decl, VISIBILITY_ANON, false);\n   else if (TREE_CODE (decl) != TYPE_DECL)\n     {\n       /* Propagate anonymity from type to decl.  */\n       int tvis = type_visibility (TREE_TYPE (decl));\n       if (tvis == VISIBILITY_ANON\n \t  || ! DECL_VISIBILITY_SPECIFIED (decl))\n-\tconstrain_visibility (decl, tvis);\n+\tconstrain_visibility (decl, tvis, false);\n     }\n   else if (no_linkage_check (TREE_TYPE (decl), /*relaxed_p=*/true))\n     /* DR 757: A type without linkage shall not be used as the type of a\n@@ -2225,7 +2222,7 @@ determine_visibility (tree decl)\n \n        Since non-extern \"C\" decls need to be defined in the same\n        translation unit, we can make the type internal.  */\n-    constrain_visibility (decl, VISIBILITY_ANON);\n+    constrain_visibility (decl, VISIBILITY_ANON, false);\n \n   /* If visibility changed and DECL already has DECL_RTL, ensure\n      symbol flags are updated.  */"}, {"sha": "52f4d4730e30a1ea75e84094136d249b234e0dca", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6d87092d196c96ef596c7877b40409d00af6ee7a", "patch": "@@ -8600,6 +8600,8 @@ instantiate_class_template_1 (tree type)\n     {\n       CLASSTYPE_VISIBILITY_SPECIFIED (type) = 1;\n       CLASSTYPE_VISIBILITY (type) = CLASSTYPE_VISIBILITY (pattern);\n+      /* Adjust visibility for template arguments.  */\n+      determine_visibility (TYPE_MAIN_DECL (type));\n     }\n   CLASSTYPE_FINAL (type) = CLASSTYPE_FINAL (pattern);\n "}, {"sha": "b9c39d30537e49a8ff9d8b527b0cb7a052852ebb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d87092d196c96ef596c7877b40409d00af6ee7a", "patch": "@@ -1,3 +1,8 @@\n+2011-11-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/35688\n+\t* g++.dg/ext/visibility/template8.C: New.\n+\n 2011-11-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/50789"}, {"sha": "e491882e05773c00921415f8756f958066a04cd8", "filename": "gcc/testsuite/g++.dg/ext/visibility/template8.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftemplate8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d87092d196c96ef596c7877b40409d00af6ee7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftemplate8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftemplate8.C?ref=6d87092d196c96ef596c7877b40409d00af6ee7a", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/35688\n+// { dg-require-visibility \"\" }\n+// { dg-options \"-fvisibility=hidden\" }\n+\n+// { dg-final { scan-hidden \"_Z1gI1BEvT_\" } }\n+// { dg-final { scan-hidden \"_Z1gI1AI1BEEvT_\" } }\n+\n+// Test that template argument visibility takes priority even over an\n+// explicit visibility attribute on a template.\n+\n+template <class T>\n+struct __attribute ((visibility (\"default\"))) A { };\n+template <class T>\n+void g(T) __attribute ((visibility (\"default\")));\n+\n+struct B { };\n+\n+template <class T>\n+void g(T)\n+{ }\n+\n+int main()\n+{\n+  g(B());\n+  g(A<B>());\n+}"}]}