{"sha": "f36efe71bef8ddf72306aca313d28759434cf97a", "node_id": "C_kwDOANBUbNoAKGYzNmVmZTcxYmVmOGRkZjcyMzA2YWNhMzEzZDI4NzU5NDM0Y2Y5N2E", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-21T21:44:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-21T21:44:53Z"}, "message": "c-family: Fix up a -Wformat regression [PR104148]\n\nAs can be seen on the testcase, GCC 11 no longer warns if the format\nstring is wrapped inside of ()s.\nThis regressed with r11-2457-gdf5cf47a978, which added\nif (TREE_NO_WARNING (param)) return;\nto check_function_arguments_recurse.  That function is used with a callback\nfor two cases, for -Wformat and for -Wnonnull.  For the latter it is\ndesirable to not warn in parameters or their subexpressions where that\nwarning is suppressed, but for -Wformat the function is used solely\nto discover the string literals if any so that the c-format.cc code can\ndiagnose them.  I believe no warning suppression should stand in the\nway of that, -Wformat* warnings should be decided from warning suppression\non the CALL_EXPR only.\nIn the PR Martin argued that now that we have specialized\nwarning_suppressed_p we should use it, so instead of adding a bool\narg to check_function_arguments_recurse I've added opt_code to the\nfunction, but will defer the warning_suppressed_p change to him.\nFor OPT_Wformat_ we don't want to call it anyway at all (as I said,\nI think there should be no suppression for it during the string discovery,\nthere isn't just one -Wformat= option, there are many and\nwarning_suppression_p even with no_warnings actually tests the\nTREE_NO_WARNING bit).\nInitially, I thought I'd restrict also call to fn with format_arg attribute\nhandling in check_function_arguments_recurse to OPT_Wformat_ only, but\nafter looking around, it perhaps is intentional that way, most functions\nwith format_arg attribute don't have nonnull attribute for that arg too,\nvarious gettext implementations handle NULL argument by passing it through,\nbut when result of gettext (NULL) etc. is passed to non-NULL argument, it\nmakes sense to warn.\n\n2022-01-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/104148\n\t* c-common.h (check_function_arguments_recurse): Add for_format\n\targ.\n\t* c-common.cc (check_function_nonnull): Pass false to\n\tcheck_function_arguments_recurse's last argument.\n\t(check_function_arguments_recurse): Add for_format argument,\n\tif true, don't stop on warning_suppressed_p.\n\t* c-format.cc (check_format_info): Pass true to\n\tcheck_function_arguments_recurse's last argument.\n\n\t* c-c++-common/Wformat-pr104148.c: New test.", "tree": {"sha": "d455223d95ef696c7357eadff83475ba4fd986f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d455223d95ef696c7357eadff83475ba4fd986f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f36efe71bef8ddf72306aca313d28759434cf97a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36efe71bef8ddf72306aca313d28759434cf97a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f36efe71bef8ddf72306aca313d28759434cf97a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36efe71bef8ddf72306aca313d28759434cf97a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e01fde49eab8dfb7ba48b22c2da596b16571525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e01fde49eab8dfb7ba48b22c2da596b16571525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e01fde49eab8dfb7ba48b22c2da596b16571525"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "bf0749bf498da8a8b9644f4c58772b0cd3ff9c7b", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36efe71bef8ddf72306aca313d28759434cf97a/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36efe71bef8ddf72306aca313d28759434cf97a/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=f36efe71bef8ddf72306aca313d28759434cf97a", "patch": "@@ -5592,7 +5592,7 @@ check_function_nonnull (nonnull_arg_ctx &ctx, int nargs, tree *argarray)\n       firstarg = 1;\n       if (!closure)\n \tcheck_function_arguments_recurse (check_nonnull_arg, &ctx, argarray[0],\n-\t\t\t\t\t  firstarg);\n+\t\t\t\t\t  firstarg, OPT_Wnonnull);\n     }\n \n   tree attrs = lookup_attribute (\"nonnull\", TYPE_ATTRIBUTES (ctx.fntype));\n@@ -5611,7 +5611,7 @@ check_function_nonnull (nonnull_arg_ctx &ctx, int nargs, tree *argarray)\n   if (a != NULL_TREE)\n     for (int i = firstarg; i < nargs; i++)\n       check_function_arguments_recurse (check_nonnull_arg, &ctx, argarray[i],\n-\t\t\t\t\ti + 1);\n+\t\t\t\t\ti + 1, OPT_Wnonnull);\n   else\n     {\n       /* Walk the argument list.  If we encounter an argument number we\n@@ -5627,7 +5627,8 @@ check_function_nonnull (nonnull_arg_ctx &ctx, int nargs, tree *argarray)\n \n \t  if (a != NULL_TREE)\n \t    check_function_arguments_recurse (check_nonnull_arg, &ctx,\n-\t\t\t\t\t      argarray[i], i + 1);\n+\t\t\t\t\t      argarray[i], i + 1,\n+\t\t\t\t\t      OPT_Wnonnull);\n \t}\n     }\n   return ctx.warned_p;\n@@ -6095,14 +6096,16 @@ check_function_arguments (location_t loc, const_tree fndecl, const_tree fntype,\n \n /* Generic argument checking recursion routine.  PARAM is the argument to\n    be checked.  PARAM_NUM is the number of the argument.  CALLBACK is invoked\n-   once the argument is resolved.  CTX is context for the callback.  */\n+   once the argument is resolved.  CTX is context for the callback.\n+   OPT is the warning for which this is done.  */\n void\n check_function_arguments_recurse (void (*callback)\n \t\t\t\t  (void *, tree, unsigned HOST_WIDE_INT),\n \t\t\t\t  void *ctx, tree param,\n-\t\t\t\t  unsigned HOST_WIDE_INT param_num)\n+\t\t\t\t  unsigned HOST_WIDE_INT param_num,\n+\t\t\t\t  opt_code opt)\n {\n-  if (warning_suppressed_p (param))\n+  if (opt != OPT_Wformat_ && warning_suppressed_p (param))\n     return;\n \n   if (CONVERT_EXPR_P (param)\n@@ -6111,7 +6114,8 @@ check_function_arguments_recurse (void (*callback)\n     {\n       /* Strip coercion.  */\n       check_function_arguments_recurse (callback, ctx,\n-\t\t\t\t\tTREE_OPERAND (param, 0), param_num);\n+\t\t\t\t\tTREE_OPERAND (param, 0), param_num,\n+\t\t\t\t\topt);\n       return;\n     }\n \n@@ -6148,7 +6152,8 @@ check_function_arguments_recurse (void (*callback)\n \t      if (i == format_num)\n \t\t{\n \t\t  check_function_arguments_recurse (callback, ctx,\n-\t\t\t\t\t\t    inner_arg, param_num);\n+\t\t\t\t\t\t    inner_arg, param_num,\n+\t\t\t\t\t\t    opt);\n \t\t  found_format_arg = true;\n \t\t  break;\n \t\t}\n@@ -6170,10 +6175,10 @@ check_function_arguments_recurse (void (*callback)\n \t  /* Check both halves of the conditional expression.  */\n \t  check_function_arguments_recurse (callback, ctx,\n \t\t\t\t\t    TREE_OPERAND (param, 1),\n-\t\t\t\t\t    param_num);\n+\t\t\t\t\t    param_num, opt);\n \t  check_function_arguments_recurse (callback, ctx,\n \t\t\t\t\t    TREE_OPERAND (param, 2),\n-\t\t\t\t\t    param_num);\n+\t\t\t\t\t    param_num, opt);\n \t  return;\n \t}\n     }"}, {"sha": "a8d6f82bb2c33272444bb96fee2ebf5cba8ee8d4", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36efe71bef8ddf72306aca313d28759434cf97a/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36efe71bef8ddf72306aca313d28759434cf97a/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=f36efe71bef8ddf72306aca313d28759434cf97a", "patch": "@@ -853,7 +853,8 @@ extern void check_function_arguments_recurse (void (*)\n \t\t\t\t\t      (void *, tree,\n \t\t\t\t\t       unsigned HOST_WIDE_INT),\n \t\t\t\t\t      void *, tree,\n-\t\t\t\t\t      unsigned HOST_WIDE_INT);\n+\t\t\t\t\t      unsigned HOST_WIDE_INT,\n+\t\t\t\t\t      opt_code);\n extern bool check_builtin_function_arguments (location_t, vec<location_t>,\n \t\t\t\t\t      tree, tree, int, tree *);\n extern void check_function_format (const_tree, tree, int, tree *,"}, {"sha": "98f28c0dcc6912d6166f9fe5cd44918d33646929", "filename": "gcc/c-family/c-format.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36efe71bef8ddf72306aca313d28759434cf97a/gcc%2Fc-family%2Fc-format.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36efe71bef8ddf72306aca313d28759434cf97a/gcc%2Fc-family%2Fc-format.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.cc?ref=f36efe71bef8ddf72306aca313d28759434cf97a", "patch": "@@ -1531,7 +1531,7 @@ check_format_info (function_format_info *info, tree params,\n   format_ctx.arglocs = arglocs;\n \n   check_function_arguments_recurse (check_format_arg, &format_ctx,\n-\t\t\t\t    format_tree, arg_num);\n+\t\t\t\t    format_tree, arg_num, OPT_Wformat_);\n \n   location_t loc = format_ctx.res->format_string_loc;\n "}, {"sha": "6786463bf66ad4474b04cbef18233d7e1654d38d", "filename": "gcc/testsuite/c-c++-common/Wformat-pr104148.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36efe71bef8ddf72306aca313d28759434cf97a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWformat-pr104148.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36efe71bef8ddf72306aca313d28759434cf97a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWformat-pr104148.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWformat-pr104148.c?ref=f36efe71bef8ddf72306aca313d28759434cf97a", "patch": "@@ -0,0 +1,33 @@\n+/* PR c++/104148 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+char *foo (const char *) __attribute__((format_arg(1)));\n+void bar (const char *, ...) __attribute__((format(printf, 1, 2)));\n+\n+void\n+baz (int x)\n+{\n+  bar (\"%ld\", x);\t\t\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+  bar (x ? \"%ld\" : \"%ld\", x);\t\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+  bar (x ? \"%ld\" : \"%lld\", x);\t\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+\t\t\t\t\t/* { dg-warning \"format '%lld' expects argument of type 'long long int', but argument 2 has type 'int'\" \"\" { target *-*-* } .-1 } */\n+  bar (foo (\"%ld\"), x);\t\t\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+  bar (x ? foo (\"%ld\") : \"%ld\", x);\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+  bar (x ? foo (\"%ld\") : \"%lld\", x);\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+\t\t\t\t\t/* { dg-warning \"format '%lld' expects argument of type 'long long int', but argument 2 has type 'int'\" \"\" { target *-*-* } .-1 } */\n+  bar (foo (x ? \"%ld\" : \"%ld\"), x);\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+  bar (foo (x ? \"%ld\" : \"%lld\"), x);\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+\t\t\t\t\t/* { dg-warning \"format '%lld' expects argument of type 'long long int', but argument 2 has type 'int'\" \"\" { target *-*-* } .-1 } */\n+  bar ((\"%ld\"), x);\t\t\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+  bar ((x ? \"%ld\" : \"%ld\"), x);\t\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+  bar ((x ? \"%ld\" : \"%lld\"), x);\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+\t\t\t\t\t/* { dg-warning \"format '%lld' expects argument of type 'long long int', but argument 2 has type 'int'\" \"\" { target *-*-* } .-1 } */\n+  bar ((foo (\"%ld\")), x);\t\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+  bar ((x ? foo (\"%ld\") : \"%ld\"), x);\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+  bar ((x ? foo (\"%ld\") : \"%lld\"), x);\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+\t\t\t\t\t/* { dg-warning \"format '%lld' expects argument of type 'long long int', but argument 2 has type 'int'\" \"\" { target *-*-* } .-1 } */\n+  bar ((foo (x ? \"%ld\" : \"%ld\")), x);\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+  bar ((foo (x ? \"%ld\" : \"%lld\")), x);\t/* { dg-warning \"format '%ld' expects argument of type 'long int', but argument 2 has type 'int'\" } */\n+\t\t\t\t\t/* { dg-warning \"format '%lld' expects argument of type 'long long int', but argument 2 has type 'int'\" \"\" { target *-*-* } .-1 } */\n+}"}]}