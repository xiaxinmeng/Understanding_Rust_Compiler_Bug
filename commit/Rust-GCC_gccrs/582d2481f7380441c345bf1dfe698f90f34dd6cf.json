{"sha": "582d2481f7380441c345bf1dfe698f90f34dd6cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgyZDI0ODFmNzM4MDQ0MWMzNDViZjFkZmU2OThmOTBmMzRkZDZjZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-11T20:37:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-11T20:37:53Z"}, "message": "re PR c++/87861 (ICE in output_constructor_regular_field, at varasm.c:5165)\n\n\tPR c++/87861\n\t* class.c (build_vtbl_initializer): For TARGET_VTABLE_USES_DESCRIPTORS\n\tbump index for each added word.\n\t* constexpr.c (find_array_ctor_elt): Add forward declaration.\n\t(cxx_eval_call_expression): Handle TARGET_VTABLE_USES_DESCRIPTORS\n\tvtable calls.\n\t(cxx_eval_constant_expression) <case OBJ_TYPE_REF>: Divide token\n\tby TARGET_VTABLE_USES_DESCRIPTORS if non-zero.\n\nFrom-SVN: r267032", "tree": {"sha": "d4a98b7a3f984eb5a9776ad9a0437508358bea3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4a98b7a3f984eb5a9776ad9a0437508358bea3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/582d2481f7380441c345bf1dfe698f90f34dd6cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582d2481f7380441c345bf1dfe698f90f34dd6cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582d2481f7380441c345bf1dfe698f90f34dd6cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582d2481f7380441c345bf1dfe698f90f34dd6cf/comments", "author": null, "committer": null, "parents": [{"sha": "3c0517a6531112d2dec16d18cdabb1513d387b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c0517a6531112d2dec16d18cdabb1513d387b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c0517a6531112d2dec16d18cdabb1513d387b7a"}], "stats": {"total": 95, "additions": 70, "deletions": 25}, "files": [{"sha": "db057d093f85cc59e23936e6f9c1ddad66f65821", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d2481f7380441c345bf1dfe698f90f34dd6cf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d2481f7380441c345bf1dfe698f90f34dd6cf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=582d2481f7380441c345bf1dfe698f90f34dd6cf", "patch": "@@ -1,3 +1,14 @@\n+2018-12-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/87861\n+\t* class.c (build_vtbl_initializer): For TARGET_VTABLE_USES_DESCRIPTORS\n+\tbump index for each added word.\n+\t* constexpr.c (find_array_ctor_elt): Add forward declaration.\n+\t(cxx_eval_call_expression): Handle TARGET_VTABLE_USES_DESCRIPTORS\n+\tvtable calls.\n+\t(cxx_eval_constant_expression) <case OBJ_TYPE_REF>: Divide token\n+\tby TARGET_VTABLE_USES_DESCRIPTORS if non-zero.\n+\n 2018-12-11  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/86608 - reading constexpr volatile variable.\n@@ -114,7 +125,7 @@\n \t* decl2.c (grokbitfield): Use DECL_SOURCE_LOCATION in error message;\n \tprint the type too; fix thinko in INDIRECT_TYPE_P use.\n \n-2018-12-05  Alexandre Oliva <aoliva@redhat.com>\n+2018-12-05  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/85569\n \t* constexpr.c (adjust_temp_type): Test for type equality with\n@@ -573,7 +584,7 @@\n \tif it is true.\n \t(cp_parser_omp_clause_name): Handle nontemporal, in_reduction and\n \ttask_reduction clauses.\n-        (cp_parser_omp_var_list_no_open): Handle\n+\t(cp_parser_omp_var_list_no_open): Handle\n \tOMP_CLAUSE_{IN,TASK}_REDUCTION.  For OMP_CLAUSE_DEPEND, parse clause\n \toperands as either an array section, or lvalue assignment expression.\n \t(cp_parser_omp_clause_if): Handle cancel and simd modifiers.\n@@ -801,7 +812,7 @@\n \tPR ipa/81277\n \t* cp-tree.h (DECL_FNAME_P): New macro.\n \t* decl.c (cp_make_fname_decl): Set DECL_DECLARED_CONSTEXPR_P,\n-        DECL_VALUE_EXPR, DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P.\n+\tDECL_VALUE_EXPR, DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P.\n \t(cp_finish_decl):\n \t* lambda.c (is_capture_proxy): Use DECL_FNAME_P.\n \t* pt.c (tsubst_expr): Handle DECL_PRETTY_FUNCTION_P.\n@@ -926,9 +937,9 @@\n 2018-10-29  Joseph Myers  <joseph@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>\n \n-        PR c++/66053\n-        * semantics.c (handle_omp_array_sections_1): Allow array\n-        sections with \"this\" pointer for OpenACC.\n+\tPR c++/66053\n+\t* semantics.c (handle_omp_array_sections_1): Allow array\n+\tsections with \"this\" pointer for OpenACC.\n \n 2018-10-25  Jason Merrill  <jason@redhat.com>\n \n@@ -1086,7 +1097,7 @@\n \t* name-lookup.c (check_local_shadow): Do not test DECL_FROM_INLINE.\n \n 2018-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n-            Pierre-Marie de Rodat  <derodat@adacore.com>\n+\t    Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* method.c (use_thunk): Adjust call to cgraph_node::create_thunk.\n \n@@ -1232,7 +1243,7 @@\n \tcase into complain_about_bad_argument.\n \n 2018-09-09  Cesar Philippidis  <cesar@codesourcery.com>\n-            Julian Brown  <julian@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n \n \tPR middle-end/86336\n \t* semantics.c (finish_omp_clauses): Treat C++ references the same in\n@@ -2041,8 +2052,8 @@\n \tinformation in a few additional error messages.\n \t(grokdeclarator): Update calls.\n \n-2018-06-20  Chung-Lin Tang <cltang@codesourcery.com>\n-\t    Thomas Schwinge <thomas@codesourcery.com>\n+2018-06-20  Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* parser.c (cp_parser_omp_clause_name): Add support for finalize\n@@ -2965,7 +2976,7 @@\n \t* cp-gimplify.c (cp_fold) <case ADDR_EXPR>: ... here.  Only use it\n \tif INDIRECT_REF's operand is INTEGER_CST cast to pointer type.\n \n-2018-04-18  Alexandre Oliva <aoliva@redhat.com>\n+2018-04-18  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/80290\n \t* cp-tree.h (struct tinst_level): Split decl into tldcl and\n@@ -3007,7 +3018,7 @@\n \tfor refcount.  Release pending_template to freelist.\n \t(instantiating_current_function_p): Use new accessors.\n \n-2018-04-16  Alexandre Oliva <aoliva@redhat.com>\n+2018-04-16  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/85039\n \t* parser.c (cp_parser_builtin_offset): Reject type definitions.\n@@ -3249,7 +3260,7 @@\n \t* pt.c (extract_locals_r): Don't record the local specs of variables\n \tdeclared within the pattern.\n \n-2018-04-05  Alexandre Oliva <aoliva@redhat.com>\n+2018-04-05  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/84979\n \t* pt.c (check_auto_in_tmpl_args): New.\n@@ -3331,7 +3342,7 @@\n \t* decl.c (grokfndecl): Handle standard UDL diagnostics here..\n \t* parser.c (cp_parser_unqualified_id): ..not here.\n \n-2018-04-04  Alexandre Oliva <aoliva@redhat.com>\n+2018-04-04  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/84943\n \t* typeck.c (cp_build_addr_expr_1): Mark FUNCTION_DECL as\n@@ -3392,7 +3403,7 @@\n \tinto packs here.\n \t(cp_parser_parameter_declaration_list): Not here.\n \n-2018-03-31  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-31  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/85027\n \t* class.c (instantiate_type): Peel off SAVE_EXPR before\n@@ -3446,7 +3457,7 @@\n \t* pt.c (tsubst_default_argument): Early return if the type of the\n \tparameter is erroneous.\n \n-2018-03-28  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-28  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/84973\n \t* decl2.c (note_vague_linkage_fn): Don't defer uninstantiated\n@@ -3535,7 +3546,7 @@\n \tPR c++/85033\n \t* semantics.c (finish_offsetof): Don't allow CONST_DECLs.\n \n-2018-03-23  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-23  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/71251\n \t* parser.c (cp_parser_alias_declaration): Call\n@@ -3576,7 +3587,7 @@\n \t(build_special_member_call): Only do C++17 copy elision here if the\n \targument is already the right type.\n \n-2018-03-21  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-21  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/71965\n \t* init.c (build_vec_init): Silence error, former sorry,\n@@ -3944,7 +3955,7 @@\n \t* constexpr.c (cxx_bind_parameters_in_call): Unshare evaluated\n \targuments.\n \n-2018-03-06  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-06  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/84231\n \t* tree.c (lvalue_kind): Use presence/absence of REFERENCE_TYPE\n@@ -4096,7 +4107,7 @@\n \trequire_potential_rvalue_constant_expression.\n \n 2018-03-01  Jason Merrill  <jason@redhat.com>\n-\t    Alexandre Oliva <aoliva@redhat.com>\n+\t    Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/71569 - ICE with redundant args on member variable template.\n \t* decl.c (start_decl): Handle partial specialization of member"}, {"sha": "fec1c5dd7d050e3cf6fa1271d342d9414588cede", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d2481f7380441c345bf1dfe698f90f34dd6cf/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d2481f7380441c345bf1dfe698f90f34dd6cf/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=582d2481f7380441c345bf1dfe698f90f34dd6cf", "patch": "@@ -9351,7 +9351,6 @@ build_vtbl_initializer (tree binfo,\n       tree vcall_index;\n       tree fn, fn_original;\n       tree init = NULL_TREE;\n-      tree idx = size_int (jx++);\n \n       fn = BV_FN (v);\n       fn_original = fn;\n@@ -9455,19 +9454,19 @@ build_vtbl_initializer (tree binfo,\n \t  int i;\n \t  if (init == size_zero_node)\n \t    for (i = 0; i < TARGET_VTABLE_USES_DESCRIPTORS; ++i)\n-\t      CONSTRUCTOR_APPEND_ELT (*inits, idx, init);\n+\t      CONSTRUCTOR_APPEND_ELT (*inits, size_int (jx++), init);\n \t  else\n \t    for (i = 0; i < TARGET_VTABLE_USES_DESCRIPTORS; ++i)\n \t      {\n \t\ttree fdesc = build2 (FDESC_EXPR, vfunc_ptr_type_node,\n \t\t\t\t     fn, build_int_cst (NULL_TREE, i));\n \t\tTREE_CONSTANT (fdesc) = 1;\n \n-\t\tCONSTRUCTOR_APPEND_ELT (*inits, idx, fdesc);\n+\t\tCONSTRUCTOR_APPEND_ELT (*inits, size_int (jx++), fdesc);\n \t      }\n \t}\n       else\n-\tCONSTRUCTOR_APPEND_ELT (*inits, idx, init);\n+\tCONSTRUCTOR_APPEND_ELT (*inits, size_int (jx++), init);\n     }\n }\n "}, {"sha": "96326c3a6988afc1c70d5b91f60e348d2e719945", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d2481f7380441c345bf1dfe698f90f34dd6cf/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d2481f7380441c345bf1dfe698f90f34dd6cf/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=582d2481f7380441c345bf1dfe698f90f34dd6cf", "patch": "@@ -41,6 +41,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n     return t;\t\t\t\t\t\t\t\t\\\n  } while (0)\n \n+static HOST_WIDE_INT find_array_ctor_elt (tree ary, tree dindex,\n+\t\t\t\t\t  bool insert = false);\n+\n /* Returns true iff FUN is an instantiation of a constexpr function\n    template or a defaulted constexpr function.  */\n \n@@ -1516,6 +1519,36 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n       STRIP_NOPS (fun);\n       if (TREE_CODE (fun) == ADDR_EXPR)\n \tfun = TREE_OPERAND (fun, 0);\n+      /* For TARGET_VTABLE_USES_DESCRIPTORS targets, there is no\n+\t indirection, the called expression is a pointer into the\n+\t virtual table which should contain FDESC_EXPR.  Extract the\n+\t FUNCTION_DECL from there.  */\n+      else if (TARGET_VTABLE_USES_DESCRIPTORS\n+\t       && TREE_CODE (fun) == POINTER_PLUS_EXPR\n+\t       && TREE_CODE (TREE_OPERAND (fun, 0)) == ADDR_EXPR\n+\t       && TREE_CODE (TREE_OPERAND (fun, 1)) == INTEGER_CST)\n+\t{\n+\t  tree d = TREE_OPERAND (TREE_OPERAND (fun, 0), 0);\n+\t  if (VAR_P (d)\n+\t      && DECL_VTABLE_OR_VTT_P (d)\n+\t      && TREE_CODE (TREE_TYPE (d)) == ARRAY_TYPE\n+\t      && TREE_TYPE (TREE_TYPE (d)) == vtable_entry_type\n+\t      && DECL_INITIAL (d)\n+\t      && TREE_CODE (DECL_INITIAL (d)) == CONSTRUCTOR)\n+\t    {\n+\t      tree i = int_const_binop (TRUNC_DIV_EXPR, TREE_OPERAND (fun, 1),\n+\t\t\t\t\tTYPE_SIZE_UNIT (vtable_entry_type));\n+\t      HOST_WIDE_INT idx = find_array_ctor_elt (DECL_INITIAL (d), i);\n+\t      if (idx >= 0)\n+\t\t{\n+\t\t  tree fdesc\n+\t\t    = (*CONSTRUCTOR_ELTS (DECL_INITIAL (d)))[idx].value;\n+\t\t  if (TREE_CODE (fdesc) == FDESC_EXPR\n+\t\t      && integer_zerop (TREE_OPERAND (fdesc, 1)))\n+\t\t    fun = TREE_OPERAND (fdesc, 0);\n+\t\t}\n+\t    }\n+\t}\n     }\n   if (TREE_CODE (fun) != FUNCTION_DECL)\n     {\n@@ -2240,7 +2273,7 @@ array_index_cmp (tree key, tree index)\n    if none.  If INSERT is true, insert a matching element rather than fail.  */\n \n static HOST_WIDE_INT\n-find_array_ctor_elt (tree ary, tree dindex, bool insert = false)\n+find_array_ctor_elt (tree ary, tree dindex, bool insert)\n {\n   if (tree_int_cst_sgn (dindex) < 0)\n     return -1;\n@@ -4834,6 +4867,8 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t/* Find the function decl in the virtual functions list.  TOKEN is\n \t   the DECL_VINDEX that says which function we're looking for.  */\n \ttree virtuals = BINFO_VIRTUALS (TYPE_BINFO (objtype));\n+\tif (TARGET_VTABLE_USES_DESCRIPTORS)\n+\t  token /= MAX (TARGET_VTABLE_USES_DESCRIPTORS, 1);\n \tr = TREE_VALUE (chain_index (token, virtuals));\n \tbreak;\n       }"}]}