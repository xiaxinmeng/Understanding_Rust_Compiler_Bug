{"sha": "6ddfda8a98c084192e8fd16c56b722fddf53dc5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRkZmRhOGE5OGMwODQxOTJlOGZkMTZjNTZiNzIyZmRkZjUzZGM1YQ==", "commit": {"author": {"name": "Easwaran Raman", "email": "eraman@google.com", "date": "2011-04-21T19:16:57Z"}, "committer": {"name": "Easwaran Raman", "email": "eraman@gcc.gnu.org", "date": "2011-04-21T19:16:57Z"}, "message": "cfgexpand.c (stack_var): Remove OFFSET...\n\n2011-04-21  Easwaran Raman  <eraman@google.com>\n\n\t* gcc/cfgexpand.c (stack_var): Remove OFFSET...\n\t(add_stack_var): ...and its reference here...\n\t(expand_stack_vars): ...and here.\n\t(stack_var_cmp): Sort by descending order of size.\n\t(partition_stack_vars): Change heuristic.\n\t(union_stack_vars): Fix to reflect changes in\n\tpartition_stack_vars.\n\t(dump_stack_var_partition): Add newline after each partition.\n\ntestsuite/Changelog:\n\n2011-04-21  Easwaran Raman  <eraman@google.com>\n\n\t* gcc.dg/stack-layout-2.c: New test.\n\nFrom-SVN: r172837", "tree": {"sha": "ef898c33327daffef683acff7ad8deb8b5f3c357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef898c33327daffef683acff7ad8deb8b5f3c357"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ddfda8a98c084192e8fd16c56b722fddf53dc5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ddfda8a98c084192e8fd16c56b722fddf53dc5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ddfda8a98c084192e8fd16c56b722fddf53dc5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ddfda8a98c084192e8fd16c56b722fddf53dc5a/comments", "author": null, "committer": null, "parents": [{"sha": "8e20e8b13e7c5dea9f33ec17870a8f36f68cdd55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e20e8b13e7c5dea9f33ec17870a8f36f68cdd55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e20e8b13e7c5dea9f33ec17870a8f36f68cdd55"}], "stats": {"total": 114, "additions": 57, "deletions": 57}, "files": [{"sha": "8236d5a1af4c02088e864670e7020878fab8b205", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddfda8a98c084192e8fd16c56b722fddf53dc5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddfda8a98c084192e8fd16c56b722fddf53dc5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ddfda8a98c084192e8fd16c56b722fddf53dc5a", "patch": "@@ -1,3 +1,14 @@\n+2011-04-21  Easwaran Raman  <eraman@google.com>\n+\n+\t* gcc/cfgexpand.c (stack_var): Remove OFFSET...\n+\t(add_stack_var): ...and its reference here...\n+\t(expand_stack_vars): ...and here.\n+\t(stack_var_cmp): Sort by descending order of size.\n+\t(partition_stack_vars): Change heuristic.\n+\t(union_stack_vars): Fix to reflect changes in\n+\tpartition_stack_vars.\n+\t(dump_stack_var_partition): Add newline after each partition.\n+\n 2011-04-21  Dimitrios Apostolou  <jimis@gmx.net>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "ecf2510a0f4e8a302ace82cec9489404cc8be902", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 19, "deletions": 57, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddfda8a98c084192e8fd16c56b722fddf53dc5a/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddfda8a98c084192e8fd16c56b722fddf53dc5a/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=6ddfda8a98c084192e8fd16c56b722fddf53dc5a", "patch": "@@ -158,11 +158,6 @@ struct stack_var\n   /* The Variable.  */\n   tree decl;\n \n-  /* The offset of the variable.  During partitioning, this is the\n-     offset relative to the partition.  After partitioning, this\n-     is relative to the stack frame.  */\n-  HOST_WIDE_INT offset;\n-\n   /* Initially, the size of the variable.  Later, the size of the partition,\n      if this variable becomes it's partition's representative.  */\n   HOST_WIDE_INT size;\n@@ -268,7 +263,6 @@ add_stack_var (tree decl)\n   v = &stack_vars[stack_vars_num];\n \n   v->decl = decl;\n-  v->offset = 0;\n   v->size = tree_low_cst (DECL_SIZE_UNIT (SSAVAR (decl)), 1);\n   /* Ensure that all variables have size, so that &a != &b for any two\n      variables that are simultaneously live.  */\n@@ -405,9 +399,9 @@ stack_var_cmp (const void *a, const void *b)\n     return (int)largeb - (int)largea;\n \n   /* Secondary compare on size, decreasing  */\n-  if (sizea < sizeb)\n-    return -1;\n   if (sizea > sizeb)\n+    return -1;\n+  if (sizea < sizeb)\n     return 1;\n \n   /* Tertiary compare on true alignment, decreasing.  */\n@@ -566,28 +560,19 @@ update_alias_info_with_stack_vars (void)\n \n /* A subroutine of partition_stack_vars.  The UNION portion of a UNION/FIND\n    partitioning algorithm.  Partitions A and B are known to be non-conflicting.\n-   Merge them into a single partition A.\n-\n-   At the same time, add OFFSET to all variables in partition B.  At the end\n-   of the partitioning process we've have a nice block easy to lay out within\n-   the stack frame.  */\n+   Merge them into a single partition A.  */\n \n static void\n-union_stack_vars (size_t a, size_t b, HOST_WIDE_INT offset)\n+union_stack_vars (size_t a, size_t b)\n {\n-  size_t i, last;\n   struct stack_var *vb = &stack_vars[b];\n   bitmap_iterator bi;\n   unsigned u;\n \n-  /* Update each element of partition B with the given offset,\n-     and merge them into partition A.  */\n-  for (last = i = b; i != EOC; last = i, i = stack_vars[i].next)\n-    {\n-      stack_vars[i].offset += offset;\n-      stack_vars[i].representative = a;\n-    }\n-  stack_vars[last].next = stack_vars[a].next;\n+  gcc_assert (stack_vars[b].next == EOC);\n+   /* Add B to A's partition.  */\n+  stack_vars[b].next = stack_vars[a].next;\n+  stack_vars[b].representative = a;\n   stack_vars[a].next = b;\n \n   /* Update the required alignment of partition A to account for B.  */\n@@ -607,16 +592,13 @@ union_stack_vars (size_t a, size_t b, HOST_WIDE_INT offset)\n    partitions constrained by the interference graph.  The overall\n    algorithm used is as follows:\n \n-\tSort the objects by size.\n+\tSort the objects by size in descending order.\n \tFor each object A {\n \t  S = size(A)\n \t  O = 0\n \t  loop {\n \t    Look for the largest non-conflicting object B with size <= S.\n \t    UNION (A, B)\n-\t    offset(B) = O\n-\t    O += size(B)\n-\t    S -= size(B)\n \t  }\n \t}\n */\n@@ -638,24 +620,23 @@ partition_stack_vars (void)\n   for (si = 0; si < n; ++si)\n     {\n       size_t i = stack_vars_sorted[si];\n-      HOST_WIDE_INT isize = stack_vars[i].size;\n       unsigned int ialign = stack_vars[i].alignb;\n-      HOST_WIDE_INT offset = 0;\n \n-      for (sj = si; sj-- > 0; )\n+      /* Ignore objects that aren't partition representatives. If we\n+         see a var that is not a partition representative, it must\n+         have been merged earlier.  */\n+      if (stack_vars[i].representative != i)\n+        continue;\n+\n+      for (sj = si + 1; sj < n; ++sj)\n \t{\n \t  size_t j = stack_vars_sorted[sj];\n-\t  HOST_WIDE_INT jsize = stack_vars[j].size;\n \t  unsigned int jalign = stack_vars[j].alignb;\n \n \t  /* Ignore objects that aren't partition representatives.  */\n \t  if (stack_vars[j].representative != j)\n \t    continue;\n \n-\t  /* Ignore objects too large for the remaining space.  */\n-\t  if (isize < jsize)\n-\t    continue;\n-\n \t  /* Ignore conflicting objects.  */\n \t  if (stack_var_conflict_p (i, j))\n \t    continue;\n@@ -666,25 +647,8 @@ partition_stack_vars (void)\n \t      != (jalign * BITS_PER_UNIT <= MAX_SUPPORTED_STACK_ALIGNMENT))\n \t    continue;\n \n-\t  /* Refine the remaining space check to include alignment.  */\n-\t  if (offset & (jalign - 1))\n-\t    {\n-\t      HOST_WIDE_INT toff = offset;\n-\t      toff += jalign - 1;\n-\t      toff &= -(HOST_WIDE_INT)jalign;\n-\t      if (isize - (toff - offset) < jsize)\n-\t\tcontinue;\n-\n-\t      isize -= toff - offset;\n-\t      offset = toff;\n-\t    }\n-\n \t  /* UNION the objects, placing J at OFFSET.  */\n-\t  union_stack_vars (i, j, offset);\n-\n-\t  isize -= jsize;\n-\t  if (isize == 0)\n-\t    break;\n+\t  union_stack_vars (i, j);\n \t}\n     }\n \n@@ -714,9 +678,8 @@ dump_stack_var_partition (void)\n \t{\n \t  fputc ('\\t', dump_file);\n \t  print_generic_expr (dump_file, stack_vars[j].decl, dump_flags);\n-\t  fprintf (dump_file, \", offset \" HOST_WIDE_INT_PRINT_DEC \"\\n\",\n-\t\t   stack_vars[j].offset);\n \t}\n+      fputc ('\\n', dump_file);\n     }\n }\n \n@@ -865,10 +828,9 @@ expand_stack_vars (bool (*pred) (tree))\n \t partition.  */\n       for (j = i; j != EOC; j = stack_vars[j].next)\n \t{\n-\t  gcc_assert (stack_vars[j].offset <= stack_vars[i].size);\n \t  expand_one_stack_var_at (stack_vars[j].decl,\n \t\t\t\t   base, base_align,\n-\t\t\t\t   stack_vars[j].offset + offset);\n+\t\t\t\t   offset);\n \t}\n     }\n "}, {"sha": "0520b0f74dcde27364341cfc834d69a7dc96fc8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddfda8a98c084192e8fd16c56b722fddf53dc5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddfda8a98c084192e8fd16c56b722fddf53dc5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ddfda8a98c084192e8fd16c56b722fddf53dc5a", "patch": "@@ -1,3 +1,7 @@\n+2011-04-21  Easwaran Raman  <eraman@google.com>\n+\n+\t* gcc.dg/stack-layout-2.c: New test.\n+\n 2011-04-21  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/48703"}, {"sha": "5d5b385f675c17b4a7a41a3d0a314e007d77aec9", "filename": "gcc/testsuite/gcc.dg/stack-layout-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddfda8a98c084192e8fd16c56b722fddf53dc5a/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-layout-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddfda8a98c084192e8fd16c56b722fddf53dc5a/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-layout-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-layout-2.c?ref=6ddfda8a98c084192e8fd16c56b722fddf53dc5a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-rtl-expand\" } */\n+void bar( char *);\n+int foo()\n+{\n+  int i=0;\n+  {\n+    char a[8000];\n+    bar(a);\n+    i += a[0];\n+  }\n+  {\n+    char a[8192];\n+    char b[32];\n+    bar(a);\n+    i += a[0];\n+    bar(b);\n+    i += a[0];\n+  }\n+  return i;\n+}\n+/* { dg-final { scan-rtl-dump \"size 8192\" \"expand\" } } */\n+/* { dg-final { scan-rtl-dump \"size 32\" \"expand\" } } */"}]}