{"sha": "654d7a33b25ec457d78b7e34773eb5fcad764a2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU0ZDdhMzNiMjVlYzQ1N2Q3OGI3ZTM0NzczZWI1ZmNhZDc2NGEyZA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-01-09T10:35:21Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-01-09T10:35:21Z"}, "message": "* gcc.dg/format/attr-2.c, gcc.dg/format/attr-3.c: New tests.\n\nFrom-SVN: r38824", "tree": {"sha": "98fbd3e63912a9268557860bce3507ac2fe6f5c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98fbd3e63912a9268557860bce3507ac2fe6f5c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/654d7a33b25ec457d78b7e34773eb5fcad764a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654d7a33b25ec457d78b7e34773eb5fcad764a2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/654d7a33b25ec457d78b7e34773eb5fcad764a2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654d7a33b25ec457d78b7e34773eb5fcad764a2d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec4ad0f9c742ff5dd76b3956c26d9da617dd0b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4ad0f9c742ff5dd76b3956c26d9da617dd0b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4ad0f9c742ff5dd76b3956c26d9da617dd0b7b"}], "stats": {"total": 149, "additions": 149, "deletions": 0}, "files": [{"sha": "5eac7717f7ecec15f1c0a35b3cbe08af0196c05b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654d7a33b25ec457d78b7e34773eb5fcad764a2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654d7a33b25ec457d78b7e34773eb5fcad764a2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=654d7a33b25ec457d78b7e34773eb5fcad764a2d", "patch": "@@ -1,3 +1,7 @@\n+2001-01-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/format/attr-2.c, gcc.dg/format/attr-3.c: New tests.\n+\n 2000-01-08  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* gcc.c-torture/execute/ieee/mzero2.x: Adjust statement of"}, {"sha": "54d4655ef2ce4cb2402aae915a2e09a0fc44d3a5", "filename": "gcc/testsuite/gcc.dg/format/attr-2.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654d7a33b25ec457d78b7e34773eb5fcad764a2d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654d7a33b25ec457d78b7e34773eb5fcad764a2d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-2.c?ref=654d7a33b25ec457d78b7e34773eb5fcad764a2d", "patch": "@@ -0,0 +1,67 @@\n+/* Test for format attributes: test use of __attribute__.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+extern void tformatprintf (const char *, ...) __attribute__((format(printf, 1, 2)));\n+extern void tformat__printf__ (const char *, ...) __attribute__((format(__printf__, 1, 2)));\n+extern void tformatscanf (const char *, ...) __attribute__((format(scanf, 1, 2)));\n+extern void tformat__scanf__ (const char *, ...) __attribute__((format(__scanf__, 1, 2)));\n+extern void tformatstrftime (const char *) __attribute__((format(strftime, 1, 0)));\n+extern void tformat__strftime__ (const char *) __attribute__((format(__strftime__, 1, 0)));\n+extern void tformatstrfmon (const char *, ...) __attribute__((format(strfmon, 1, 2)));\n+extern void tformat__strfmon__ (const char *, ...) __attribute__((format(__strfmon__, 1, 2)));\n+extern void t__format__printf (const char *, ...) __attribute__((__format__(printf, 1, 2)));\n+extern void t__format____printf__ (const char *, ...) __attribute__((__format__(__printf__, 1, 2)));\n+extern void t__format__scanf (const char *, ...) __attribute__((__format__(scanf, 1, 2)));\n+extern void t__format____scanf__ (const char *, ...) __attribute__((__format__(__scanf__, 1, 2)));\n+extern void t__format__strftime (const char *) __attribute__((__format__(strftime, 1, 0)));\n+extern void t__format____strftime__ (const char *) __attribute__((__format__(__strftime__, 1, 0)));\n+extern void t__format__strfmon (const char *, ...) __attribute__((__format__(strfmon, 1, 2)));\n+extern void t__format____strfmon__ (const char *, ...) __attribute__((__format__(__strfmon__, 1, 2)));\n+\n+extern char *tformat_arg (const char *) __attribute__((format_arg(1)));\n+extern char *t__format_arg__ (const char *) __attribute__((__format_arg__(1)));\n+\n+void\n+foo (int i, int *ip, double d)\n+{\n+  tformatprintf (\"%d\", i);\n+  tformatprintf (\"%\"); /* { dg-warning \"format\" \"attribute format printf\" } */\n+  tformat__printf__ (\"%d\", i);\n+  tformat__printf__ (\"%\"); /* { dg-warning \"format\" \"attribute format __printf__\" } */\n+  tformatscanf (\"%d\", ip);\n+  tformatscanf (\"%\"); /* { dg-warning \"format\" \"attribute format scanf\" } */\n+  tformat__scanf__ (\"%d\", ip);\n+  tformat__scanf__ (\"%\"); /* { dg-warning \"format\" \"attribute format __scanf__\" } */\n+  tformatstrftime (\"%a\");\n+  tformatstrftime (\"%\"); /* { dg-warning \"format\" \"attribute format strftime\" } */\n+  tformat__strftime__ (\"%a\");\n+  tformat__strftime__ (\"%\"); /* { dg-warning \"format\" \"attribute format __strftime__\" } */\n+  tformatstrfmon (\"%n\", d);\n+  tformatstrfmon (\"%\"); /* { dg-warning \"format\" \"attribute format strfmon\" } */\n+  tformat__strfmon__ (\"%n\", d);\n+  tformat__strfmon__ (\"%\"); /* { dg-warning \"format\" \"attribute format __strfmon__\" } */\n+  t__format__printf (\"%d\", i);\n+  t__format__printf (\"%\"); /* { dg-warning \"format\" \"attribute __format__ printf\" } */\n+  t__format____printf__ (\"%d\", i);\n+  t__format____printf__ (\"%\"); /* { dg-warning \"format\" \"attribute __format__ __printf__\" } */\n+  t__format__scanf (\"%d\", ip);\n+  t__format__scanf (\"%\"); /* { dg-warning \"format\" \"attribute __format__ scanf\" } */\n+  t__format____scanf__ (\"%d\", ip);\n+  t__format____scanf__ (\"%\"); /* { dg-warning \"format\" \"attribute __format__ __scanf__\" } */\n+  t__format__strftime (\"%a\");\n+  t__format__strftime (\"%\"); /* { dg-warning \"format\" \"attribute __format__ strftime\" } */\n+  t__format____strftime__ (\"%a\");\n+  t__format____strftime__ (\"%\"); /* { dg-warning \"format\" \"attribute __format__ __strftime__\" } */\n+  t__format__strfmon (\"%n\", d);\n+  t__format__strfmon (\"%\"); /* { dg-warning \"format\" \"attribute __format__ strfmon\" } */\n+  t__format____strfmon__ (\"%n\", d);\n+  t__format____strfmon__ (\"%\"); /* { dg-warning \"format\" \"attribute __format__ __strfmon__\" } */\n+  tformatprintf (tformat_arg (\"%d\"), i);\n+  tformatprintf (tformat_arg (\"%\")); /* { dg-warning \"format\" \"attribute format_arg\" } */\n+  tformatprintf (t__format_arg__ (\"%d\"), i);\n+  tformatprintf (t__format_arg__ (\"%\")); /* { dg-warning \"format\" \"attribute __format_arg__\" } */\n+}"}, {"sha": "2e3c6326a9bd57f6a3b2e152962a51e630efa763", "filename": "gcc/testsuite/gcc.dg/format/attr-3.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654d7a33b25ec457d78b7e34773eb5fcad764a2d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654d7a33b25ec457d78b7e34773eb5fcad764a2d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-3.c?ref=654d7a33b25ec457d78b7e34773eb5fcad764a2d", "patch": "@@ -0,0 +1,78 @@\n+/* Test for format attributes: test bad uses of __attribute__.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+/* Proper uses of the attributes.  */\n+extern void fa0 (const char *, ...) __attribute__((format(printf, 1, 2)));\n+extern void fa1 (char *, ...) __attribute__((format(printf, 1, 2)));\n+extern char *fa2 (const char *) __attribute__((format_arg(1)));\n+extern char *fa3 (char *) __attribute__((format_arg(1)));\n+\n+/* Uses with too few or too many arguments.  */\n+extern void fb0 (const char *, ...) __attribute__((format)); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+extern void fb1 (const char *, ...) __attribute__((format())); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+extern void fb2 (const char *, ...) __attribute__((format(printf))); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+extern void fb3 (const char *, ...) __attribute__((format(printf, 1))); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+extern void fb4 (const char *, ...) __attribute__((format(printf, 1, 2, 3))); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+\n+extern void fc1 (const char *) __attribute__((format_arg)); /* { dg-error \"wrong number of arguments\" \"bad format_arg\" } */\n+extern void fc2 (const char *) __attribute__((format_arg())); /* { dg-error \"wrong number of arguments\" \"bad format_arg\" } */\n+extern void fc3 (const char *) __attribute__((format_arg(1, 2))); /* { dg-error \"wrong number of arguments\" \"bad format_arg\" } */\n+\n+/* These attributes presently only apply to declarations, not to types.\n+   Eventually, they should be usable with declarators for function types\n+   anywhere, but still not with structure/union/enum types.  */\n+struct s0 { int i; } __attribute__((format(printf, 1, 2))); /* { dg-error \"does not apply\" \"format on struct\" } */\n+union u0 { int i; } __attribute__((format(printf, 1, 2))); /* { dg-error \"does not apply\" \"format on union\" } */\n+enum e0 { E0V0 } __attribute__((format(printf, 1, 2))); /* { dg-error \"does not apply\" \"format on enum\" } */\n+\n+struct s1 { int i; } __attribute__((format_arg(1))); /* { dg-error \"does not apply\" \"format_arg on struct\" } */\n+union u1 { int i; } __attribute__((format_arg(1))); /* { dg-error \"does not apply\" \"format_arg on union\" } */\n+enum e1 { E1V0 } __attribute__((format_arg(1))); /* { dg-error \"does not apply\" \"format_arg on enum\" } */\n+\n+/* At present, only functions can be declared with these attributes.\n+   Once they can be applied to function types in function pointers, etc.,\n+   these tests should be removed, and tests should be added (say in a new\n+   testcase attr-<num>.c) that such attributes work and calls through such\n+   function pointers (etc.) get checked.  */\n+extern void (*fd0) (const char *, ...) __attribute__((format(printf, 1, 2))); /* { dg-error \"non-function\" \"format on non-function\" } */\n+extern char *(*fd1) (const char *) __attribute__((format_arg(1))); /* { dg-error \"non-function\" \"format on non-function\" } */\n+\n+/* The format type must be an identifier, one of those recognised.  */\n+extern void fe0 (const char *, ...) __attribute__((format(12345, 1, 2))); /* { dg-error \"format specifier\" \"non-id format\" } */\n+extern void fe1 (const char *, ...) __attribute__((format(nosuch, 1, 2))); /* { dg-warning \"format function type\" \"unknown format\" } */\n+\n+/* Both the numbers must be integer constant expressions.  */\n+extern void ff0 (const char *, ...) __attribute__((format(printf, 3-2, (long long)(10/5))));\n+int foo;\n+extern void ff1 (const char *, ...) __attribute__((format(printf, foo, 10/5))); /* { dg-error \"invalid operand\" \"bad number\" } */\n+extern void ff2 (const char *, ...) __attribute__((format(printf, 3-2, foo))); /* { dg-error \"invalid operand\" \"bad number\" } */\n+extern char *ff3 (const char *) __attribute__((format_arg(3-2)));\n+extern char *ff4 (const char *) __attribute__((format_arg(foo))); /* { dg-error \"invalid operand\" \"bad format_arg number\" } */\n+\n+/* The format string argument must precede the arguments to be formatted.\n+   This includes if no parameter types are specified (which is not valid ISO\n+   C for variadic functions).  */\n+extern void fg0 () __attribute__((format(printf, 1, 2)));\n+extern void fg1 () __attribute__((format(printf, 1, 0)));\n+extern void fg2 () __attribute__((format(printf, 1, 1))); /* { dg-error \"follows\" \"bad number order\" } */\n+extern void fg3 () __attribute__((format(printf, 2, 1))); /* { dg-error \"follows\" \"bad number order\" } */\n+\n+/* The format string argument must be a string type, and the arguments to\n+   be formatted must be the \"...\".  */\n+extern void fh0 (int, ...) __attribute__((format(printf, 1, 2))); /* { dg-error \"not a string\" \"format int string\" } */\n+extern void fh1 (signed char *, ...) __attribute__((format(printf, 1, 2))); /* { dg-error \"not a string\" \"signed char string\" } */\n+extern void fh2 (unsigned char *, ...) __attribute__((format(printf, 1, 2))); /* { dg-error \"not a string\" \"unsigned char string\" } */\n+extern void fh3 (const char *, ...) __attribute__((format(printf, 1, 3))); /* { dg-error \"is not\" \"not ...\" } */\n+extern void fh4 (const char *, int, ...) __attribute__((format(printf, 1, 2))); /* { dg-error \"is not\" \"not ...\" } */\n+\n+/* format_arg formats must take and return a string.  */\n+extern char *fi0 (int) __attribute__((format_arg(1))); /* { dg-error \"not a string\" \"format_arg int string\" } */\n+extern char *fi1 (signed char *) __attribute__((format_arg(1))); /* { dg-error \"not a string\" \"format_arg signed char string\" } */\n+extern char *fi2 (unsigned char *) __attribute__((format_arg(1))); /* { dg-error \"not a string\" \"format_arg unsigned char string\" } */\n+extern int fi3 (const char *) __attribute__((format_arg(1))); /* { dg-error \"not return string\" \"format_arg ret int string\" } */\n+extern signed char *fi4 (const char *) __attribute__((format_arg(1))); /* { dg-error \"not return string\" \"format_arg ret signed char string\" } */\n+extern unsigned char *fi5 (const char *) __attribute__((format_arg(1))); /* { dg-error \"not return string\" \"format_arg ret unsigned char string\" } */"}]}