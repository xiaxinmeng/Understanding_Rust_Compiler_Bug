{"sha": "ae4311830e2a3915fe7c05227ac4a49d960420b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU0MzExODMwZTJhMzkxNWZlN2MwNTIyN2FjNGE0OWQ5NjA0MjBiNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-12-13T12:50:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-12-13T12:50:58Z"}, "message": "(expand_expr, case MINUS_EXPR): Properly handle case when the NEGATE\noverflows.\n\nFrom-SVN: r8648", "tree": {"sha": "dff17658f3eb622fa50779555d50fc90b54a0dba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dff17658f3eb622fa50779555d50fc90b54a0dba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae4311830e2a3915fe7c05227ac4a49d960420b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4311830e2a3915fe7c05227ac4a49d960420b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae4311830e2a3915fe7c05227ac4a49d960420b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4311830e2a3915fe7c05227ac4a49d960420b7/comments", "author": null, "committer": null, "parents": [{"sha": "cd8ce14b50e90712ceaabbab45f6fa286675739b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8ce14b50e90712ceaabbab45f6fa286675739b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8ce14b50e90712ceaabbab45f6fa286675739b"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "fc6223e9a73393004e47b13a7f76d080f8f3f1f1", "filename": "gcc/expr.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4311830e2a3915fe7c05227ac4a49d960420b7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4311830e2a3915fe7c05227ac4a49d960420b7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ae4311830e2a3915fe7c05227ac4a49d960420b7", "patch": "@@ -5239,10 +5239,29 @@ expand_expr (exp, target, tmode, modifier)\n       /* Convert A - const to A + (-const).  */\n       if (TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST)\n \t{\n-\t  exp = build (PLUS_EXPR, type, TREE_OPERAND (exp, 0),\n-\t\t       fold (build1 (NEGATE_EXPR, type,\n-\t\t\t\t     TREE_OPERAND (exp, 1))));\n-\t  goto plus_expr;\n+\t  tree negated = fold (build1 (NEGATE_EXPR, type,\n+\t\t\t\t       TREE_OPERAND (exp, 1)));\n+\n+\t  /* Deal with the case where we can't negate the constant\n+\t     in TYPE.  */\n+\t  if (TREE_UNSIGNED (type) || TREE_OVERFLOW (negated))\n+\t    {\n+\t      tree newtype = signed_type (type);\n+\t      tree newop0 = convert (newtype, TREE_OPERAND (exp, 0));\n+\t      tree newop1 = convert (newtype, TREE_OPERAND (exp, 1));\n+\t      tree newneg = fold (build1 (NEGATE_EXPR, newtype, newop1));\n+\n+\t      if (! TREE_OVERFLOW (newneg))\n+\t\treturn expand_expr (convert (type, \n+\t\t\t\t\t     build (PLUS_EXPR, newtype,\n+\t\t\t\t\t\t    newop0, newneg)),\n+\t\t\t\t    target, tmode, modifier);\n+\t    }\n+\t  else\n+\t    {\n+\t      exp = build (PLUS_EXPR, type, TREE_OPERAND (exp, 0), negated);\n+\t      goto plus_expr;\n+\t    }\n \t}\n       this_optab = sub_optab;\n       goto binop;"}]}