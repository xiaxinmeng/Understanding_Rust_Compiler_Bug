{"sha": "d3dd4dbd1d3aaad14b4b112874613fbe70337f15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNkZDRkYmQxZDNhYWFkMTRiNGIxMTI4NzQ2MTNmYmU3MDMzN2YxNQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2008-08-22T21:24:56Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-08-22T21:24:56Z"}, "message": "re PR target/11259 ([avr] gcc Double 'andi' missed optimization)\n\n\tPR target/11259\n\t* config/avr/avr.md (UNSPEC_SWAP): New constants.\n\t(*swap): New insn pattern.\n\t(*ashlqi3): Rename from ashlqi3 insn pattern.\n\t(ashlqi3): New expanders.\n\t(*lshrqi3): Rename from lshrqi3 insn pattern.\n\t(lshrqi3): New expanders.\t\n\t(ashlqi3_const4, ashlqi3_const5, ashlqi3_const6, lshrqi3_const4,\n\tlshrqi3_const5, lshrqi3_const6): New splitters.\n\t(andi, ashlqi3_l_const4, ashlqi3_l_const5, ashlqi3_l_const6,\n\tlshrqi3_l_const4, lshrqi3_l_const5, lshrqi3_l_const6): Define\n\tpeephole2 patterns.\n\nFrom-SVN: r139502", "tree": {"sha": "92a6316cf812c8a355bda612642fd69592e6a976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92a6316cf812c8a355bda612642fd69592e6a976"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3dd4dbd1d3aaad14b4b112874613fbe70337f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3dd4dbd1d3aaad14b4b112874613fbe70337f15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3dd4dbd1d3aaad14b4b112874613fbe70337f15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3dd4dbd1d3aaad14b4b112874613fbe70337f15/comments", "author": null, "committer": null, "parents": [{"sha": "36159cf85750e5b480e1918eb2c53905b715965f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36159cf85750e5b480e1918eb2c53905b715965f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36159cf85750e5b480e1918eb2c53905b715965f"}], "stats": {"total": 186, "additions": 184, "deletions": 2}, "files": [{"sha": "69227927ca6b5fa522dec38bb15d359a5c5da7e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dd4dbd1d3aaad14b4b112874613fbe70337f15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dd4dbd1d3aaad14b4b112874613fbe70337f15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3dd4dbd1d3aaad14b4b112874613fbe70337f15", "patch": "@@ -1,3 +1,18 @@\n+2008-08-22  Anatoly Sokolov  <aesok@post.ru>\n+\n+\tPR target/11259\n+\t* config/avr/avr.md (UNSPEC_SWAP): New constants.\n+\t(*swap): New insn pattern.\n+\t(*ashlqi3): Rename from ashlqi3 insn pattern.\n+\t(ashlqi3): New expanders.\n+\t(*lshrqi3): Rename from lshrqi3 insn pattern.\n+\t(lshrqi3): New expanders.\t\n+\t(ashlqi3_const4, ashlqi3_const5, ashlqi3_const6, lshrqi3_const4,\n+\tlshrqi3_const5, lshrqi3_const6): New splitters.\n+\t(andi, ashlqi3_l_const4, ashlqi3_l_const5, ashlqi3_l_const6,\n+\tlshrqi3_l_const4, lshrqi3_l_const5, lshrqi3_l_const6): Define\n+\tpeephole2 patterns.\n+\n 2008-08-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/37078"}, {"sha": "371ca76c7dd980c0bb3f72e5285f4f410cfc2f42", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 169, "deletions": 2, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dd4dbd1d3aaad14b4b112874613fbe70337f15/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dd4dbd1d3aaad14b4b112874613fbe70337f15/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=d3dd4dbd1d3aaad14b4b112874613fbe70337f15", "patch": "@@ -54,6 +54,7 @@\n    (UNSPEC_INDEX_JMP\t1)\n    (UNSPEC_SEI\t\t2)\n    (UNSPEC_CLI\t\t3)\n+   (UNSPEC_SWAP\t\t4)\n \n    (UNSPECV_PROLOGUE_SAVES\t0)\n    (UNSPECV_EPILOGUE_RESTORES\t1)\n@@ -1261,6 +1262,19 @@\n   [(set_attr \"length\" \"4,4\")\n    (set_attr \"cc\" \"set_n,set_n\")])\n \n+(define_peephole2 ; andi\n+  [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n+        (and:QI (match_dup 0)\n+\t        (match_operand:QI 1 \"const_int_operand\" \"\")))\n+   (set (match_dup 0)\n+        (and:QI (match_dup 0)\n+\t        (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+  \"\"\n+  [(set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))]\n+  {\n+    operands[1] = GEN_INT (INTVAL (operands[1]) & INTVAL (operands[2]));\n+  })\n+\n ;;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n ;; ior\n \n@@ -1389,10 +1403,57 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"set_n\")])\n \n+;; swap\n+\n+(define_insn \"*swap\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n+\t(unspec:QI [(match_operand:QI 1 \"register_operand\" \"0\")]\n+\t\t   UNSPEC_SWAP))]\n+  \"\"\n+  \"swap %0\"\n+  [(set_attr \"length\" \"1\")\n+   (set_attr \"cc\" \"none\")])\n+\n ;;<< << << << << << << << << << << << << << << << << << << << << << << << << <<\n ;; arithmetic shift left\n \n-(define_insn \"ashlqi3\"\n+(define_expand \"ashlqi3\"\n+  [(set (match_operand:QI 0 \"register_operand\"            \"\")\n+\t(ashift:QI (match_operand:QI 1 \"register_operand\" \"\")\n+\t\t   (match_operand:QI 2 \"general_operand\"  \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_split ; ashlqi3_const4\n+  [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n+\t(ashift:QI (match_dup 0)\n+\t\t   (const_int 4)))]\n+  \"\"\n+  [(set (match_dup 0) (unspec:QI [(match_dup 0)] UNSPEC_SWAP))\n+   (set (match_dup 0) (and:QI (match_dup 0) (const_int -16)))]\n+  \"\")\n+\n+(define_split ; ashlqi3_const5\n+  [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n+\t(ashift:QI (match_dup 0)\n+\t\t   (const_int 5)))]\n+  \"\"\n+  [(set (match_dup 0) (unspec:QI [(match_dup 0)] UNSPEC_SWAP))\n+   (set (match_dup 0) (ashift:QI (match_dup 0) (const_int 1)))\n+   (set (match_dup 0) (and:QI (match_dup 0) (const_int -32)))]\n+  \"\")\n+\n+(define_split ; ashlqi3_const6\n+  [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n+\t(ashift:QI (match_dup 0)\n+\t\t   (const_int 6)))]\n+  \"\"\n+  [(set (match_dup 0) (unspec:QI [(match_dup 0)] UNSPEC_SWAP))\n+   (set (match_dup 0) (ashift:QI (match_dup 0) (const_int 2)))\n+   (set (match_dup 0) (and:QI (match_dup 0) (const_int -64)))]\n+  \"\")\n+\n+(define_insn \"*ashlqi3\"\n   [(set (match_operand:QI 0 \"register_operand\"           \"=r,r,r,r,!d,r,r\")\n \t(ashift:QI (match_operand:QI 1 \"register_operand\" \"0,0,0,0,0,0,0\")\n \t\t   (match_operand:QI 2 \"general_operand\"  \"r,L,P,K,n,n,Qm\")))]\n@@ -1421,6 +1482,41 @@\n \n ;; Optimize if a scratch register from LD_REGS happens to be available.\n \n+(define_peephole2 ; ashlqi3_l_const4\n+  [(set (match_operand:QI 0 \"l_register_operand\" \"\")\n+\t(ashift:QI (match_dup 0)\n+\t\t   (const_int 4)))\n+   (match_scratch:QI 1 \"d\")]\n+  \"\"\n+  [(set (match_dup 0) (unspec:QI [(match_dup 0)] UNSPEC_SWAP))\n+   (set (match_dup 1) (const_int -16))\n+   (set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))]\n+  \"\")\n+\n+(define_peephole2 ; ashlqi3_l_const5\n+  [(set (match_operand:QI 0 \"l_register_operand\" \"\")\n+\t(ashift:QI (match_dup 0)\n+\t\t   (const_int 5)))\n+   (match_scratch:QI 1 \"d\")]\n+  \"\"\n+  [(set (match_dup 0) (unspec:QI [(match_dup 0)] UNSPEC_SWAP))\n+   (set (match_dup 0) (ashift:QI (match_dup 0) (const_int 1)))\n+   (set (match_dup 1) (const_int -32))\n+   (set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))]\n+  \"\")\n+\n+(define_peephole2 ; ashlqi3_l_const6\n+  [(set (match_operand:QI 0 \"l_register_operand\" \"\")\n+\t(ashift:QI (match_dup 0)\n+\t\t   (const_int 6)))\n+   (match_scratch:QI 1 \"d\")]\n+  \"\"\n+  [(set (match_dup 0) (unspec:QI [(match_dup 0)] UNSPEC_SWAP))\n+   (set (match_dup 0) (ashift:QI (match_dup 0) (const_int 2)))\n+   (set (match_dup 1) (const_int -64))\n+   (set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))]\n+  \"\")\n+\n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n    (set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -1536,7 +1632,43 @@\n ;; >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >>\n ;; logical shift right\n \n-(define_insn \"lshrqi3\"\n+(define_expand \"lshrqi3\"\n+  [(set (match_operand:QI 0 \"register_operand\"              \"\")\n+\t(lshiftrt:QI (match_operand:QI 1 \"register_operand\" \"\")\n+\t\t     (match_operand:QI 2 \"general_operand\"  \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_split\t; lshrqi3_const4\n+  [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n+\t(lshiftrt:QI (match_dup 0)\n+\t\t     (const_int 4)))]\n+  \"\"\n+  [(set (match_dup 0) (unspec:QI [(match_dup 0)] UNSPEC_SWAP))\n+   (set (match_dup 0) (and:QI (match_dup 0) (const_int 15)))]\n+  \"\")\n+\n+(define_split\t; lshrqi3_const5\n+  [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n+\t(lshiftrt:QI (match_dup 0)\n+\t\t     (const_int 5)))]\n+  \"\"\n+  [(set (match_dup 0) (unspec:QI [(match_dup 0)] UNSPEC_SWAP))\n+   (set (match_dup 0) (lshiftrt:QI (match_dup 0) (const_int 1)))\n+   (set (match_dup 0) (and:QI (match_dup 0) (const_int 7)))]\n+  \"\")\n+\n+(define_split\t; lshrqi3_const6\n+  [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n+\t(lshiftrt:QI (match_dup 0)\n+\t\t     (const_int 6)))]\n+  \"\"\n+  [(set (match_dup 0) (unspec:QI [(match_dup 0)] UNSPEC_SWAP))\n+   (set (match_dup 0) (lshiftrt:QI (match_dup 0) (const_int 2)))\n+   (set (match_dup 0) (and:QI (match_dup 0) (const_int 3)))]\n+  \"\")\n+\n+(define_insn \"*lshrqi3\"\n   [(set (match_operand:QI 0 \"register_operand\"             \"=r,r,r,r,!d,r,r\")\n \t(lshiftrt:QI (match_operand:QI 1 \"register_operand\" \"0,0,0,0,0,0,0\")\n \t\t     (match_operand:QI 2 \"general_operand\"  \"r,L,P,K,n,n,Qm\")))]\n@@ -1565,6 +1697,41 @@\n \n ;; Optimize if a scratch register from LD_REGS happens to be available.\n \n+(define_peephole2 ; lshrqi3_l_const4\n+  [(set (match_operand:QI 0 \"l_register_operand\" \"\")\n+\t(lshiftrt:QI (match_dup 0)\n+\t\t     (const_int 4)))\n+   (match_scratch:QI 1 \"d\")]\n+  \"\"\n+  [(set (match_dup 0) (unspec:QI [(match_dup 0)] UNSPEC_SWAP))\n+   (set (match_dup 1) (const_int 15))\n+   (set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))]\n+  \"\")\n+\n+(define_peephole2 ; lshrqi3_l_const5\n+  [(set (match_operand:QI 0 \"l_register_operand\" \"\")\n+\t(lshiftrt:QI (match_dup 0)\n+\t\t     (const_int 5)))\n+   (match_scratch:QI 1 \"d\")]\n+  \"\"\n+  [(set (match_dup 0) (unspec:QI [(match_dup 0)] UNSPEC_SWAP))\n+   (set (match_dup 0) (lshiftrt:QI (match_dup 0) (const_int 1)))\n+   (set (match_dup 1) (const_int 7))\n+   (set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))]\n+  \"\")\n+\n+(define_peephole2 ; lshrqi3_l_const6\n+  [(set (match_operand:QI 0 \"l_register_operand\" \"\")\n+\t(lshiftrt:QI (match_dup 0)\n+\t\t     (const_int 6)))\n+   (match_scratch:QI 1 \"d\")]\n+  \"\"\n+  [(set (match_dup 0) (unspec:QI [(match_dup 0)] UNSPEC_SWAP))\n+   (set (match_dup 0) (lshiftrt:QI (match_dup 0) (const_int 2)))\n+   (set (match_dup 1) (const_int 3))\n+   (set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))]\n+  \"\")\n+\n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n    (set (match_operand:HI 0 \"register_operand\" \"\")"}]}