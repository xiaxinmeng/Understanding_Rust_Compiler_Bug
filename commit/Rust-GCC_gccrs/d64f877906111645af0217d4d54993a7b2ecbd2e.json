{"sha": "d64f877906111645af0217d4d54993a7b2ecbd2e", "node_id": "C_kwDOANBUbNoAKGQ2NGY4Nzc5MDYxMTE2NDVhZjAyMTdkNGQ1NDk5M2E3YjJlY2JkMmU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-01T15:20:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-01T15:20:13Z"}, "message": "Rotate ChangeLog files.\n\nRotate ChangeLog files for ChangeLogs with yearly cadence.", "tree": {"sha": "166f7a493ae415bb43256ff7ee1492cda0cfc5f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/166f7a493ae415bb43256ff7ee1492cda0cfc5f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d64f877906111645af0217d4d54993a7b2ecbd2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64f877906111645af0217d4d54993a7b2ecbd2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d64f877906111645af0217d4d54993a7b2ecbd2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64f877906111645af0217d4d54993a7b2ecbd2e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d423e8dc59045d8f281dcb1a02559cb6f91456bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d423e8dc59045d8f281dcb1a02559cb6f91456bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d423e8dc59045d8f281dcb1a02559cb6f91456bf"}], "stats": {"total": 172132, "additions": 86090, "deletions": 86042}, "files": [{"sha": "97887c90552b40c034f463eff250248365499ae2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 35081, "changes": 35082, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d64f877906111645af0217d4d54993a7b2ecbd2e"}, {"sha": "248b5dea178a45a071c45095ee9eba7b8e589db9", "filename": "gcc/ChangeLog-2022", "status": "added", "additions": 35086, "deletions": 0, "changes": 35086, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2FChangeLog-2022", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2FChangeLog-2022", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog-2022?ref=d64f877906111645af0217d4d54993a7b2ecbd2e"}, {"sha": "97887c90552b40c034f463eff250248365499ae2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 1, "deletions": 11063, "changes": 11064, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d64f877906111645af0217d4d54993a7b2ecbd2e"}, {"sha": "19c0a4d5d4245818e4273d18064f06bf51f432ab", "filename": "gcc/ada/ChangeLog-2022", "status": "added", "additions": 11068, "deletions": 0, "changes": 11068, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Fada%2FChangeLog-2022", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Fada%2FChangeLog-2022", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog-2022?ref=d64f877906111645af0217d4d54993a7b2ecbd2e"}, {"sha": "97887c90552b40c034f463eff250248365499ae2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 1, "deletions": 5393, "changes": 5394, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d64f877906111645af0217d4d54993a7b2ecbd2e"}, {"sha": "24ca96fe210615ffdf9d78f7a458cfaefaca35fc", "filename": "gcc/cp/ChangeLog-2022", "status": "added", "additions": 5398, "deletions": 0, "changes": 5398, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Fcp%2FChangeLog-2022", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Fcp%2FChangeLog-2022", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-2022?ref=d64f877906111645af0217d4d54993a7b2ecbd2e"}, {"sha": "97887c90552b40c034f463eff250248365499ae2", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 1, "deletions": 828, "changes": 829, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=d64f877906111645af0217d4d54993a7b2ecbd2e", "patch": "@@ -1,832 +1,5 @@\n-2022-12-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/108055\n-\t* decl.cc (function_defined_in_root_p): Check all enclosing template\n-\tinstances for definition in a root module.\n-\t(function_needs_inline_definition_p): Replace call to\n-\tfunction_defined_in_root_p with test for outer module `isRoot'.\n-\n-2022-12-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/108050\n-\t* decl.cc (DeclVisitor::visit (Import *)): Handle build_import_decl\n-\treturning a TREE_LIST.\n-\t* imports.cc (ImportVisitor::visit (OverloadSet *)): New override.\n-\n-2022-12-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd c8ae4adb2e.\n-\t* typeinfo.cc (check_typeinfo_type): Update for new front-end\n-\tinterface.\n-\t(TypeInfoVisitor::visit (TypeInfoStructDeclaration *)): Remove warning\n-\tthat toHash() must be declared 'nothrow @safe`.\n-\n-2022-12-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* intrinsics.cc (expand_intrinsic_bsf): Fix comment.\n-\t(expand_intrinsic_bsr): Use BIT_XOR_EXPR instead of MINUS_EXPR.\n-\n-2022-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* Make-lang.in (D_TEXI_FILES): Add d/implement-d.texi.\n-\t* gdc.texi: Adjust introduction, include implement-d.texi.\n-\t* implement-d.texi: New file.\n-\n-2022-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* Make-lang.in: Only include doc/include when building documentation.\n-\t(d.html): Rename html directory to $(build_htmldir)/gdc.\n-\n-2022-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* gdc.texi: Separate indices into options and keywords.\n-\n-2022-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* gdc.texi: Update gdc option documentation.\n-\t* lang.opt (frevert=intpromote): Correct documentation.\n-\n-2022-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/107592\n-\t* toir.cc (IRVisitor::push_unrolled_continue_label): New method.\n-\t(IRVisitor::pop_unrolled_continue_label): New method.\n-\t(IRVisitor::visit (UnrolledLoopStatement *)): Use them instead of\n-\tpush_continue_label and pop_continue_label.\n-\n-2022-11-23  Martin Liska  <mliska@suse.cz>\n-\n-\t* Make-lang.in: Use it as $DO_LINK_MUTEX.\n-\n-2022-11-23  Marek Polacek  <polacek@redhat.com>\n-\n-\tRevert:\n-\t2022-11-23  Marek Polacek  <polacek@redhat.com>\n-\n-\t* Make-lang.in: Remove NO_PIE_CFLAGS.\n-\n-2022-11-23  Marek Polacek  <polacek@redhat.com>\n-\n-\t* Make-lang.in: Remove NO_PIE_CFLAGS.\n-\n-2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\tRevert:\n-\t2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\t* doc/conf.py: New file.\n-\t* doc/copyright.rst: New file.\n-\t* doc/general-public-license-3.rst: New file.\n-\t* doc/gnu-free-documentation-license.rst: New file.\n-\t* doc/index.rst: New file.\n-\t* doc/indices-and-tables.rst: New file.\n-\t* doc/invoking-gdc.rst: New file.\n-\t* doc/invoking-gdc/code-generation.rst: New file.\n-\t* doc/invoking-gdc/developer-options.rst: New file.\n-\t* doc/invoking-gdc/input-and-output-files.rst: New file.\n-\t* doc/invoking-gdc/options-for-directory-search.rst: New file.\n-\t* doc/invoking-gdc/options-for-linking.rst: New file.\n-\t* doc/invoking-gdc/runtime-options.rst: New file.\n-\t* doc/invoking-gdc/warnings.rst: New file.\n-\n-2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\tRevert:\n-\t2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\t* d-target.def: Port to RST.\n-\n-2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\tRevert:\n-\t2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\t* Make-lang.in: Support Sphinx based documentation.\n-\n-2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\tRevert:\n-\t2022-11-09  Martin Liska  <mliska@suse.cz>\n-\n-\t* gdc.texi: Removed.\n-\n-2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\tRevert:\n-\t2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\t* Make-lang.in: Support --with-sphinx-build.\n-\n-2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\tRevert:\n-\t2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\t* Make-lang.in:\n-\tSupport installation if sphinx-build is missing.\n-\n-2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\tRevert:\n-\t2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\t* doc/copyright.rst:\n-\tAdd trailing newline.\n-\t* doc/general-public-license-3.rst:\n-\tAdd trailing newline.\n-\t* doc/gnu-free-documentation-license.rst:\n-\tAdd trailing newline.\n-\t* doc/index.rst:\n-\tAdd trailing newline.\n-\t* doc/indices-and-tables.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/code-generation.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/developer-options.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/input-and-output-files.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/options-for-directory-search.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/options-for-linking.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/runtime-options.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/warnings.rst:\n-\tAdd trailing newline.\n-\n-2022-11-14  Martin Liska  <mliska@suse.cz>\n-\n-\tRevert:\n-\t2022-11-10  Martin Liska  <mliska@suse.cz>\n-\n-\t* doc/conf.py: Add newline at last line.\n-\n-2022-11-10  Martin Liska  <mliska@suse.cz>\n-\n-\t* doc/conf.py: Add newline at last line.\n-\n-2022-11-09  Martin Liska  <mliska@suse.cz>\n-\n-\t* doc/copyright.rst:\n-\tAdd trailing newline.\n-\t* doc/general-public-license-3.rst:\n-\tAdd trailing newline.\n-\t* doc/gnu-free-documentation-license.rst:\n-\tAdd trailing newline.\n-\t* doc/index.rst:\n-\tAdd trailing newline.\n-\t* doc/indices-and-tables.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/code-generation.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/developer-options.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/input-and-output-files.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/options-for-directory-search.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/options-for-linking.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/runtime-options.rst:\n-\tAdd trailing newline.\n-\t* doc/invoking-gdc/warnings.rst:\n-\tAdd trailing newline.\n-\n-2022-11-09  Martin Liska  <mliska@suse.cz>\n-\n-\t* Make-lang.in:\n-\tSupport installation if sphinx-build is missing.\n-\n-2022-11-09  Martin Liska  <mliska@suse.cz>\n-\n-\t* Make-lang.in: Support --with-sphinx-build.\n-\n-2022-11-09  Martin Liska  <mliska@suse.cz>\n-\n-\t* gdc.texi: Removed.\n-\n-2022-11-09  Martin Liska  <mliska@suse.cz>\n-\n-\t* Make-lang.in: Support Sphinx based documentation.\n-\n-2022-11-09  Martin Liska  <mliska@suse.cz>\n-\n-\t* d-target.def: Port to RST.\n-\n-2022-11-09  Martin Liska  <mliska@suse.cz>\n-\n-\t* doc/conf.py: New file.\n-\t* doc/copyright.rst: New file.\n-\t* doc/general-public-license-3.rst: New file.\n-\t* doc/gnu-free-documentation-license.rst: New file.\n-\t* doc/index.rst: New file.\n-\t* doc/indices-and-tables.rst: New file.\n-\t* doc/invoking-gdc.rst: New file.\n-\t* doc/invoking-gdc/code-generation.rst: New file.\n-\t* doc/invoking-gdc/developer-options.rst: New file.\n-\t* doc/invoking-gdc/input-and-output-files.rst: New file.\n-\t* doc/invoking-gdc/options-for-directory-search.rst: New file.\n-\t* doc/invoking-gdc/options-for-linking.rst: New file.\n-\t* doc/invoking-gdc/runtime-options.rst: New file.\n-\t* doc/invoking-gdc/warnings.rst: New file.\n-\n-2022-11-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-target.cc (Target::isVectorOpSupported): Remove cases for\n-\tcomparison operators.\n-\t* intrinsics.cc (maybe_set_intrinsic): Remove cases for vector\n-\tcomparison intrinsics.\n-\t(maybe_warn_intrinsic_mismatch): Likewise.\n-\t(expand_intrinsic_vec_cond): Remove.\n-\t(maybe_expand_intrinsic): Remove cases for vector comparison\n-\tintrinsics.\n-\t* intrinsics.def (INTRINSIC_EQUALMASK): Remove.\n-\t(INTRINSIC_NOTEQUALMASK): Remove.\n-\t(INTRINSIC_GREATERMASK): Remove.\n-\t(INTRINSIC_GREATEREQUALMASK): Remove.\n-\n-2022-10-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc (apply_user_attributes): Update for new front-end\n-\tinterface.\n-\t* d-builtins.cc (d_init_versions): Predefine `D_Optimized' with\n-\tcompiling with optimizations enabled.\n-\t* d-lang.cc (d_handle_option): Update for new front-end interface.\n-\tHandle new option `-fpreview=systemvariables'.\n-\t* dmd/MERGE: Merge upstream dmd e4f8919591.\n-\t* dmd/VERSION: Bump version to v2.101.0-beta.1.\n-\t* expr.cc (ExprVisitor::visit (AssignExp *)): Treat construction of\n-\tstatic arrays from a call expression as a simple assignment.\n-\t(ExprVisitor::visit (ArrayLiteralExp *)): Handle array literals with\n-\t`scope' storage.\n-\t* gdc.texi: Update documentation of `-fpreview=' options.\n-\t* lang.opt (fpreview=shortenedmethods): Remove.\n-\t(fpreview=systemvariables):  New option.\n-\n-2022-10-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-target.def (d_minfo_section): Expand documentation of hook.\n-\tDefault initialize to \"minfo\".\n-\t(d_minfo_start_name): Rename to ...\n-\t(d_minfo_section_start): ... this.  Default initialize to\n-\t\"__start_minfo\".\n-\t(d_minfo_end_name): Rename to ...\n-\t(d_minfo_section_end): ... this. Default initialize to \"__stop_minfo\".\n-\t* modules.cc (register_moduleinfo): Use new targetdm hook names.\n-\n-2022-09-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd d579c467c1.\n-\t* decl.cc (layout_struct_initializer): Update for new front-end\n-\tinterface.\n-\t* expr.cc (ExprVisitor::visit (AssignExp *)): Remove lowering of array\n-\tassignments.\n-\t(ExprVisitor::visit (NewExp *)): Add new lowering of new'ing\n-\tassociative arrays to an _aaNew() library call.\n-\t* runtime.def (ARRAYSETASSIGN): Remove.\n-\t(AANEW): Define.\n-\n-2022-09-15  Richard Biener  <rguenther@suse.de>\n-\n-\t* d-builtins.cc (d_build_c_type_nodes): Do not initialize\n-\tvoid_list_node.\n-\n-2022-08-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 817610b16d.\n-\t* d-ctfloat.cc (CTFloat::parse): Update for new front-end interface.\n-\t* d-lang.cc (d_parse_file): Likewise.\n-\t* expr.cc (ExprVisitor::visit (AssignExp *)): Remove handling of array\n-\tassignments to non-trivial static and dynamic arrays.\n-\t* runtime.def (ARRAYASSIGN): Remove.\n-\t(ARRAYASSIGN_L): Remove.\n-\t(ARRAYASSIGN_R): Remove.\n-\n-2022-08-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/106638\n-\t* gdc.texi: Update DIP links to point at upstream dlang/DIPs\n-\trepository.\n-\n-2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-tree.h (d_defer_declaration): Declare.\n-\t* decl.cc (function_needs_inline_definition_p): Defer checking\n-\tDECL_UNINLINABLE and DECL_DECLARED_INLINE_P.\n-\t(maybe_build_decl_tree): Call d_defer_declaration instead of\n-\tbuild_decl_tree.\n-\t* modules.cc (deferred_inline_declarations): New variable.\n-\t(build_module_tree): Set deferred_inline_declarations and a handle\n-\tdeclarations pushed to it.\n-\t(d_defer_declaration): New function.\n-\n-2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/106623\n-\t* d-codegen.cc (underlying_complex_expr): New function.\n-\t(d_build_call): Handle passing native complex objects as the\n-\tlibrary-defined equivalent.\n-\t* d-tree.h (underlying_complex_expr): Declare.\n-\t* expr.cc (ExprVisitor::visit (DotVarExp *)): Call\n-\tunderlying_complex_expr instead of build_vconvert.\n-\n-2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-compiler.cc (Compiler::onParseModule): Call create_tinfo_types\n-\twhen module name is object.\n-\t* typeinfo.cc (create_tinfo_types): Add guard for multiple\n-\tinvocations.\n-\n-2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-codegen.cc (build_delegate_cst): Give anonymous delegate field\n-\tnames same as per ABI spec.\n-\n-2022-08-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/106563\n-\t* decl.cc (DeclVisitor::visit (FuncDeclaration *)): Set semanticRun\n-\tbefore generating its symbol.\n-\t(function_defined_in_root_p): New function.\n-\t(function_needs_inline_definition_p): New function.\n-\t(maybe_build_decl_tree): New function.\n-\t(get_symbol_decl): Call maybe_build_decl_tree before returning symbol.\n-\t(start_function): Use function_defined_in_root_p instead of inline\n-\ttest for locally defined symbols.\n-\t(set_linkage_for_decl): Check for inline functions before private or\n-\tprotected symbols.\n-\n-2022-08-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/106555\n-\t* d-target.cc (Target::isReturnOnStack): Check for return type size.\n-\n-2022-08-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd d7772a2369.\n-\t* dmd/VERSION: Bump version to v2.100.1.\n-\t* d-codegen.cc (get_frameinfo): Check whether decision to generate\n-\tclosure changed since semantic finished.\n-\t* d-lang.cc (d_handle_option): Remove handling of -fdebug=level and\n-\t-fversion=level.\n-\t* decl.cc (DeclVisitor::visit (VarDeclaration *)): Generate evaluation\n-\tof noreturn variable initializers before throw.\n-\t* expr.cc (ExprVisitor::visit (AssignExp *)): Don't generate\n-\tassignment for noreturn types, only evaluate for side effects.\n-\t* lang.opt (fdebug=): Undocument -fdebug=level.\n-\t(fversion=): Undocument -fversion=level.\n-\n-2022-07-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 56589f0f4.\n-\n-2022-07-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* Make-lang.in (NOEXCEPTION_DFLAGS): Define.\n-\t(ALL_DFLAGS): Add NO_EXCEPTION_DFLAGS.\n-\n-2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/106139\n-\t* d-convert.cc (convert_expr): Handle casting from array to vector.\n-\t(convert_for_rvalue): Rewrite vector to array casts of the same\n-\telement type into a constructor.\n-\t(convert_for_assignment): Return calling convert_for_rvalue.\n-\t* expr.cc (ExprVisitor::visit (VectorExp *)): Handle generating a\n-\tvector expression from a static array.\n-\t* toir.cc (IRVisitor::visit (ReturnStatement *)): Call\n-\tconvert_for_rvalue on return value.\n-\n-2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* intrinsics.cc (build_shuffle_mask_type): Use to_constant when\n-\tgetting the number of subparts from a vector type.\n-\t(expand_intrinsic_vec_shufflevector): Likewise.\n-\n-2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* intrinsics.cc: Include diagnostic.h, langhooks.h,\n-\tvec-perm-indices.h.\n-\t(maybe_set_intrinsic): Add cases for new simd intrinsics.\n-\t(warn_mismatched_return_type): New function.\n-\t(warn_mismatched_argument): New function.\n-\t(build_shuffle_mask_type): New function.\n-\t(maybe_warn_intrinsic_mismatch): New function.\n-\t(expand_intrinsic_vec_cond): New function.\n-\t(expand_intrinsic_vec_convert): New function.\n-\t(expand_intrinsic_vec_blend): New function.\n-\t(expand_intrinsic_vec_shuffle): New function.\n-\t(expand_intrinsic_vec_shufflevector): New function.\n-\t(expand_intrinsic_vec_load_unaligned): New function.\n-\t(expand_intrinsic_vec_store_unaligned): New function.\n-\t(maybe_expand_intrinsic): Check signature of intrinsic before handing\n-\toff to front-end lowering.  Add cases for new simd intrinsics.\n-\t* intrinsics.def (INTRINSIC_LOADUNALIGNED): Define intrinsic.\n-\t(INTRINSIC_STOREUNALIGNED): Define intrinsic.\n-\t(INTRINSIC_SHUFFLE): Define intrinsic.\n-\t(INTRINSIC_SHUFFLEVECTOR): Define intrinsic.\n-\t(INTRINSIC_CONVERTVECTOR): Define intrinsic.\n-\t(INTRINSIC_BLENDVECTOR): Define intrinsic.\n-\t(INTRINSIC_EQUALMASK): Define intrinsic.\n-\t(INTRINSIC_NOTEQUALMASK): Define intrinsic.\n-\t(INTRINSIC_GREATERMASK): Define intrinsic.\n-\t(INTRINSIC_GREATEREQUALMASK): Define intrinsic.\n-\n-2022-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-codegen.cc: Include gimple-expr.h.\n-\t(force_target_expr): Use create_tmp_var_raw.\n-\t* decl.cc: Inlucde gimple-expr.h.\n-\t(build_local_temp): Use create_tmp_var_raw.\n-\t* intrinsics.cc (expand_intrinsic_rotate): Use get_callee_fndecl.\n-\t(maybe_expand_intrinsic): Likewise.\n-\n-2022-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc (handle_omp_declare_simd_attribute): New function.\n-\t(d_handle_simd_attribute): New function.\n-\t(d_langhook_common_attribute_table): Add 'omp declare simd' attribute.\n-\t(d_langhook_attribute_table): Add simd attribute.\n-\n-2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc (d_handle_section_attribute): Update error message.\n-\t(d_handle_symver_attribute): Likewise.\n-\t(d_handle_no_sanitize_attribute): Likewise.\n-\t(d_handle_visibility_attribute): Likewise.\n-\n-2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/105413\n-\t* d-attribs.cc (d_handle_register_attribute): New function.\n-\t(d_langhook_attribute_table): Add register attribute.\n-\t* d-codegen.cc (d_mark_addressable): Error if taken address of\n-\tregister variable.\n-\t(build_frame_type): Error if register variable has non-local\n-\treferences.\n-\t* d-tree.h (d_mark_addressable): Add complain parameter.\n-\t* decl.cc (get_symbol_decl): Mark register varibles DECL_REGISTER.\n-\tError when register variable declared thread-local or extern.\n-\t* expr.cc (ExprVisitor::visit (IndexExp *)): Don't complain about\n-\tmarking register vectors as addressable in an ARRAY_REF.\n-\n-2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-codegen.cc (build_array_index): Rename to...\n-\t(build_pointer_index): ...this.\n-\t* d-tree.h (build_array_index): Rename declaration to...\n-\t(build_pointer_index): ...this.\n-\t* expr.cc (ExprVisitor::visit (IndexExp *)): Construct indexes of\n-\tARRAY_TYPE using ARRAY_REF.\n-\t(ExprVisitor::visit (SliceExp *)): Update.\n-\t* intrinsics.cc (expand_intrinsic_bt): Update.\n-\n-2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 529110f66.\n-\t* decl.cc (DeclVisitor::visit (TupleDeclaration *)): Update for new\n-\tfront-end interface.\n-\t* types.cc (layout_aggregate_members): Likewise.\n-\n-2022-06-22  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 6203135dc.\n-\t* typeinfo.cc (TypeInfoVisitor::visit (TypeInfoStructDeclaration *)):\n-\tUpdate for new front-end interface.\n-\t(SpeculativeTypeVisitor::visit (TypeStruct *)): Likewise.\n-\n-2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc (d_langhook_attribute_table): Add no_sanitize.\n-\t(d_handle_no_sanitize_attribute): New function.\n-\n-2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc (d_langhook_attribute_table): Add visibility.\n-\t(insert_type_attribute): Use decl_attributes instead of\n-\tmerge_attributes.\n-\t(insert_decl_attribute): Likewise.\n-\t(apply_user_attributes): Do nothing when no UDAs applied.\n-\t(d_handle_visibility_attribute): New function.\n-\t* d-gimplify.cc (d_gimplify_binary_expr): Adjust.\n-\t* d-tree.h (set_visibility_for_decl): Declare.\n-\t* decl.cc (get_symbol_decl): Move setting of visibility flags to...\n-\t(set_visibility_for_decl): ... here.  New function.\n-\t* types.cc (TypeVisitor::visit (TypeStruct *)): Call\n-\tset_visibility_for_decl().\n-\t(TypeVisitor::visit (TypeClass *)): Likewise.\n-\n-2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* typeinfo.cc (make_internal_typeinfo): Set TYPE_ARTIFICIAL.\n-\n-2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc (apply_user_attributes): Set ATTR_FLAG_TYPE_IN_PLACE\n-\tonly on incomplete types.\n-\t* d-codegen.cc (copy_aggregate_type): Set TYPE_STUB_DECL after copy.\n-\t* d-compiler.cc (Compiler::onParseModule): Adjust.\n-\t* d-tree.h (AGGREGATE_OR_ENUM_TYPE_CHECK): Define.\n-\t(TYPE_FORWARD_REFERENCES): Define.\n-\t* decl.cc (gcc_attribute_p): Update documentation.\n-\t(DeclVisitor::visit (StructDeclaration *)): Exit before building type\n-\tnode if gcc.attributes symbol.\n-\t(DeclVisitor::visit (ClassDeclaration *)): Build type node and add\n-\tTYPE_NAME to current binding level before emitting anything else.\n-\t(DeclVisitor::visit (InterfaceDeclaration *)): Likewise.\n-\t(DeclVisitor::visit (EnumDeclaration *)): Likewise.\n-\t(build_type_decl): Move rest_of_decl_compilation() call to\n-\tfinish_aggregate_type().\n-\t* types.cc (insert_aggregate_field): Move layout_decl() call to\n-\tfinish_aggregate_type().\n-\t(insert_aggregate_bitfield): Likewise.\n-\t(layout_aggregate_members): Adjust.\n-\t(finish_incomplete_fields): New function.\n-\t(finish_aggregate_type): Handle forward referenced field types.  Call\n-\trest_of_type_compilation() after completing the aggregate.\n-\t(TypeVisitor::visit (TypeEnum *)): Don't set size and alignment until\n-\tafter apply_user_attributes().  Call rest_of_type_compilation() after\n-\tcompleting the enumeral.\n-\t(TypeVisitor::visit (TypeStruct *)): Call build_type_decl() before\n-\tapply_user_attributes().  Don't set size, alignment, and mode until\n-\tafter apply_user_attributes().\n-\t(TypeVisitor::visit (TypeClass *)): Call build_type_decl() before\n-\tapplly_user_attributes().\n-\n-2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-builtins.cc: Include builtins.h.\n-\t(gcc_builtins_libfuncs): Remove.\n-\t(strip_type_modifiers): New function.\n-\t(matches_builtin_type): New function.\n-\t(covariant_with_builtin_type_p): New function.\n-\t(maybe_set_builtin_1): Set front-end built-in if identifier matches\n-\tgcc built-in name.  Apply user-specified attributes and assembler name\n-\toverrides to the built-in.  Warn about built-in declaration mismatches.\n-\t(d_builtin_function): Set IDENTIFIER_DECL_TREE of built-in functions.\n-\t* d-compiler.cc (Compiler::onParseModule): Scan all modules for any\n-\tidentifiers that match built-in function names.\n-\t* lang.opt (Wbuiltin-declaration-mismatch): New option.\n-\n-2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-tree.h (check_typeinfo_type): Add Expression* parameter.\n-\t(build_typeinfo): Likewise.  Declare new override.\n-\t* expr.cc (ExprVisitor): Call build_typeinfo with Expression*.\n-\t* typeinfo.cc (check_typeinfo_type): Include expression in the\n-\tdiagnostic message.\n-\t(build_typeinfo): New override.\n-\n-2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 821ed393d.\n-\t* expr.cc (ExprVisitor::visit (NewExp *)): Remove handled of\n-\tallocating `@nogc' throwable object.\n-\t* runtime.def (NEWTHROW): Remove.\n-\n-2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n-\n-\t* d-lang.cc (d_get_sarif_source_language): New.\n-\t(LANG_HOOKS_GET_SARIF_SOURCE_LANGUAGE): Redefine.\n-\n-2022-05-31  Jason Merrill  <jason@redhat.com>\n-\n-\t* Make-lang.in (d.tags): Just look at *.cc.\n-\n-2022-05-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/105544\n-\t* d-lang.cc (d_parse_file): Zero padding past the end of the stdin\n-\tbuffer so the D lexer has a sentinel to stop parsing at.\n-\n-2022-05-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 4d07f22f2\n-\t* d-lang.cc (d_handle_option): Handle OPT_fpreview_fiximmutableconv.\n-\t* lang.opt (fpreview=fiximmutableconv): New option.\n-\t* runtime.def (ARRAYAPPENDT): Remove.\n-\n-2022-05-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* expr.cc: Add \"final\" and \"override\" to all \"visit\" vfunc decls\n-\tas appropriate.\n-\t* imports.cc: Likewise.\n-\t* typeinfo.cc: Likewise.\n-\n-2022-05-24  David Malcolm  <dmalcolm@redhat.com>\n-\n-\t* decl.cc: Add \"final\" and \"override\" to all \"visit\" vfunc decls\n-\tas appropriate.\n-\t* expr.cc: Likewise.\n-\t* toir.cc: Likewise.\n-\t* typeinfo.cc: Likewise.\n-\t* types.cc: Likewise.\n-\n-2022-05-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 60bfa0ee7.\n-\t* dmd/VERSION: Update version to v2.100.0.\n-\t* d-builtins.cc (d_init_versions): Update for new front-end interface.\n-\t* d-codegen.cc (d_decl_context): Use resolvedLinkage to get\n-\tdeclaration linkage.\n-\t(build_struct_literal): Track offset in bits.\n-\t* d-gimplify.cc (d_gimplify_modify_expr): Check both operands for a\n-\tbit-field reference.\n-\t* d-lang.cc (d_handle_option): Handle -fpreview=bitfields, remove\n-\t-frevert=markdown and -ftransition=vmarkdown.\n-\t(d_post_options): Set flag_rtti and flag_exceptions if -fno-druntime\n-\twas seen on command-line.\n-\t(d_parse_file): Update for new front-end interface.\n-\t(d_type_promotes_to): Use resolvedLinkage to get declaration linkage.\n-\t* decl.cc (make_thunk): Likewise.\n-\t* expr.cc (ExprVisitor::visit (CatAssignExp *)): Remove lowering for\n-\tappending of an element or array to another array.\n-\t* lang.opt (fpreview=bitfields): New option.\n-\t(frevert=markdown): Remove.\n-\t(ftransition=vmarkdown): Remove.\n-\t* types.cc (layout_aggregate_members): Ignore anonymous fields in\n-\ttotal count.\n-\n-2022-04-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 313d28b3d.\n-\t* d-port.cc (Port::memicmp): Use d_size_t instead of size_t.\n-\t(Port::valcpy): Likewise.\n-\n-2022-04-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd eb7bee331.\n-\t* dmd/VERSION: Update version to v2.100.0-beta.1.\n-\t* d-lang.cc (d_handle_option): Handle OPT_frevert_dip1000.\n-\t* lang.opt (frevert=dip1000): New option.\n-\n-2022-04-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* Make-lang.in (D_FRONTEND_OBJS): Add d/common-bitfields.o,\n-\td/mustuse.o.\n-\t* d-ctfloat.cc (CTFloat::isIdentical): Don't treat NaN values as\n-\tidentical.\n-\t* dmd/MERGE: Merge upstream dmd 4d1bfcf14.\n-\t* expr.cc (ExprVisitor::visit (VoidInitExp *)): New.\n-\n-2022-04-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-lang.cc: Include dmd/template.h.\n-\t(d_parse_file): Call printTemplateStats when vtemplates is set.\n-\t* decl.cc (start_function): Remove OPT_Wtemplates warning.\n-\t* lang.opt (Wtemplates): Remove.\n-\n-2022-04-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 47871363d.\n-\t* d-builtins.cc (d_init_versions): Add predefined version identifiers\n-\tD_PreConditions, D_PostConditions, and D_Invariants.\n-\t* d-codegen.cc (d_build_call): Update for new front-end interface.\n-\t(build_frame_type): Generate reference field for NRVO variables with\n-\tnested references.\n-\t(build_closure): Generate assignment of return address to closure.\n-\t* d-tree.h (DECL_INSTANTIATED): Use DECL_LANG_FLAG_2.\n-\t(bind_expr): Remove.\n-\t* decl.cc (DeclVisitor::visit (FuncDeclaration *)): Update for new\n-\tfront-end interface.\n-\t(get_symbol_decl): Likewise.\n-\t(get_decl_tree): Check DECL_LANG_FRAME_FIELD before DECL_LANG_NRVO.\n-\tDereference the field when both are set.\n-\t* expr.cc (ExprVisitor::visit (DeleteExp *)): Update for new front-end\n-\tinterface.\n-\t* modules.cc (get_internal_fn): Likewise.\n-\t* toir.cc (IRVisitor::visit (ReturnStatement *)): Likewise.\n-\n-2022-03-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/105004\n-\t* d-codegen.cc (build_struct_literal): Use complex_expr to build\n-\tcomplex expressions from __c_complex types.\n-\n-2022-03-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/104911\n-\t* dmd/MERGE: Merge upstream dmd 2503f17e5.\n-\t* d-convert.cc (convert_expr): Replace d_uns64 with dinteger_t.\n-\t* d-lang.cc: Remove dmd/root/file.h include.\n-\t(d_handle_option): Update for new front-end interface.\n-\t(d_parse_file): Likewise.\n-\n-2022-03-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 02a3fafc6.\n-\t* dmd/VERSION: Update version to v2.099.0.\n-\t* imports.cc (ImportVisitor::visit (EnumDeclaration *)): Don't cache\n-\tdecl in front-end AST node.\n-\t(ImportVisitor::visit (AggregateDeclaration *)): Likewise.\n-\t(ImportVisitor::visit (ClassDeclaration *)): Likewise.\n-\n-2022-03-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* imports.cc (imported_decls): Define.\n-\t(class ImportVisitor): Add result_ field.\n-\t(ImportVisitor::result): New method.\n-\t(ImportVisitor::visit (Module *)): Store decl to result_.\n-\t(ImportVisitor::visit (Import *)): Likewise.\n-\t(ImportVisitor::visit (AliasDeclaration *)): Don't cache decl in\n-\tfront-end AST node.\n-\t(ImportVisitor::visit (OverDeclaration *)): Likewise.\n-\t(ImportVisitor::visit (FuncDeclaration *)): Likewise.\n-\t(ImportVisitor::visit (Declaration *)): Likewise.\n-\t(build_import_decl): Use imported_decls to cache and lookup built\n-\tdeclarations.\n-\n-2022-03-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR translation/104552\n-\t* lang.opt (fdump-cxx-spec=): Fix typo in argument handle.\n-\t(fpreview=fixaliasthis): Quote `alias this' as code.\n-\n-2022-03-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 423f19b41.\n-\n-2022-02-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-target.cc (Target::_init): Initialize C type size fields.\n-\t* dmd/MERGE: Merge upstream dmd cf63dd8e5.\n-\t* dmd/VERSION: Update version to v2.099.0-rc.1.\n-\n-2022-02-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* expr.cc (ExprVisitor::visit (DeleteExp *)): Remove handling of\n-\tdeleting GC allocated classes.\n-\t* runtime.def (DELCLASS): Remove.\n-\t(DELINTERFACE): Remove.\n-\n-2022-02-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd cb49e99f8.\n-\t* dmd/VERSION: Update version to v2.099.0-beta.1.\n-\t* decl.cc (layout_class_initializer): Update call to NewExp::create.\n-\t* expr.cc (ExprVisitor::visit (DeleteExp *)): Remove handling of\n-\tdeleting arrays and pointers.\n-\t(ExprVisitor::visit (DotVarExp *)): Convert complex types to the\n-\tfront-end library type representing them.\n-\t(ExprVisitor::visit (StringExp *)): Use getCodeUnit instead of charAt\n-\tto get the value of each index in a string expression.\n-\t* runtime.def (DELMEMORY): Remove.\n-\t(DELARRAYT): Remove.\n-\t* types.cc (TypeVisitor::visit (TypeEnum *)): Handle anonymous enums.\n-\n-2022-02-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-builtins.cc (d_build_builtins_module): Set purity of DECL_PURE_P\n-\tfunctions to PURE::const_.\n-\t* d-gimplify.cc (bit_field_ref): New function.\n-\t(d_gimplify_modify_expr): Handle implicit casting for assignments to\n-\tbit-fields.\n-\t(d_gimplify_unary_expr): New function.\n-\t(d_gimplify_binary_expr): New function.\n-\t(d_gimplify_expr): Handle UNARY_CLASS_P and BINARY_CLASS_P.\n-\t* d-target.cc (Target::_init): Initialize bitFieldStyle.\n-\t(TargetCPP::parameterType): Update signature.\n-\t(Target::supportsLinkerDirective): New function.\n-\t* dmd/MERGE: Merge upstream dmd 52844d4b1.\n-\t* expr.cc (ExprVisitor::visit (ThrowExp *)): New function.\n-\t* types.cc (d_build_bitfield_integer_type): New function.\n-\t(insert_aggregate_bitfield): New function.\n-\t(layout_aggregate_members): Handle inserting bit-fields into an\n-\taggregate type.\n-\n-2022-01-31  Martin Liska  <mliska@suse.cz>\n-\n-\tPR d/104287\n-\t* decl.cc (d_finish_decl): Remove trailing dot.\n-\n-2022-01-28  Martin Liska  <mliska@suse.cz>\n-\n-\t* decl.cc (d_finish_decl): Do not use leading capital letter.\n-\n-2022-01-17  Martin Liska  <mliska@suse.cz>\n-\n-\t* d-gimplify.cc: Rename .c names to .cc.\n-\t* d-incpath.cc: Likewise.\n-\t* lang-specs.h: Likewise.\n-\n-2022-01-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/103840\n-\t* dmd/MERGE: Merge upstream dmd 001bfd97b.\n-\t* Make-lang.in (D_FRONTEND_OBJS): Rename d/complex.o to\n-\td/root-complex.o, and d/utf.o to d/root/utf.o.\n-\n-2022-01-03  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* gdc.texi: Bump @copyrights-d year.\n-\n \f\n-Copyright (C) 2022 Free Software Foundation, Inc.\n+Copyright (C) 2023 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "7630f24840156811bad76f2ea4399991cee0400a", "filename": "gcc/d/ChangeLog-2022", "status": "added", "additions": 833, "deletions": 0, "changes": 833, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Fd%2FChangeLog-2022", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Fd%2FChangeLog-2022", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog-2022?ref=d64f877906111645af0217d4d54993a7b2ecbd2e", "patch": "@@ -0,0 +1,833 @@\n+2022-12-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/108055\n+\t* decl.cc (function_defined_in_root_p): Check all enclosing template\n+\tinstances for definition in a root module.\n+\t(function_needs_inline_definition_p): Replace call to\n+\tfunction_defined_in_root_p with test for outer module `isRoot'.\n+\n+2022-12-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/108050\n+\t* decl.cc (DeclVisitor::visit (Import *)): Handle build_import_decl\n+\treturning a TREE_LIST.\n+\t* imports.cc (ImportVisitor::visit (OverloadSet *)): New override.\n+\n+2022-12-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd c8ae4adb2e.\n+\t* typeinfo.cc (check_typeinfo_type): Update for new front-end\n+\tinterface.\n+\t(TypeInfoVisitor::visit (TypeInfoStructDeclaration *)): Remove warning\n+\tthat toHash() must be declared 'nothrow @safe`.\n+\n+2022-12-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* intrinsics.cc (expand_intrinsic_bsf): Fix comment.\n+\t(expand_intrinsic_bsr): Use BIT_XOR_EXPR instead of MINUS_EXPR.\n+\n+2022-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* Make-lang.in (D_TEXI_FILES): Add d/implement-d.texi.\n+\t* gdc.texi: Adjust introduction, include implement-d.texi.\n+\t* implement-d.texi: New file.\n+\n+2022-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* Make-lang.in: Only include doc/include when building documentation.\n+\t(d.html): Rename html directory to $(build_htmldir)/gdc.\n+\n+2022-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.texi: Separate indices into options and keywords.\n+\n+2022-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.texi: Update gdc option documentation.\n+\t* lang.opt (frevert=intpromote): Correct documentation.\n+\n+2022-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/107592\n+\t* toir.cc (IRVisitor::push_unrolled_continue_label): New method.\n+\t(IRVisitor::pop_unrolled_continue_label): New method.\n+\t(IRVisitor::visit (UnrolledLoopStatement *)): Use them instead of\n+\tpush_continue_label and pop_continue_label.\n+\n+2022-11-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* Make-lang.in: Use it as $DO_LINK_MUTEX.\n+\n+2022-11-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tRevert:\n+\t2022-11-23  Marek Polacek  <polacek@redhat.com>\n+\n+\t* Make-lang.in: Remove NO_PIE_CFLAGS.\n+\n+2022-11-23  Marek Polacek  <polacek@redhat.com>\n+\n+\t* Make-lang.in: Remove NO_PIE_CFLAGS.\n+\n+2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/conf.py: New file.\n+\t* doc/copyright.rst: New file.\n+\t* doc/general-public-license-3.rst: New file.\n+\t* doc/gnu-free-documentation-license.rst: New file.\n+\t* doc/index.rst: New file.\n+\t* doc/indices-and-tables.rst: New file.\n+\t* doc/invoking-gdc.rst: New file.\n+\t* doc/invoking-gdc/code-generation.rst: New file.\n+\t* doc/invoking-gdc/developer-options.rst: New file.\n+\t* doc/invoking-gdc/input-and-output-files.rst: New file.\n+\t* doc/invoking-gdc/options-for-directory-search.rst: New file.\n+\t* doc/invoking-gdc/options-for-linking.rst: New file.\n+\t* doc/invoking-gdc/runtime-options.rst: New file.\n+\t* doc/invoking-gdc/warnings.rst: New file.\n+\n+2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* d-target.def: Port to RST.\n+\n+2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* Make-lang.in: Support Sphinx based documentation.\n+\n+2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2022-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* gdc.texi: Removed.\n+\n+2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* Make-lang.in: Support --with-sphinx-build.\n+\n+2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* Make-lang.in:\n+\tSupport installation if sphinx-build is missing.\n+\n+2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/copyright.rst:\n+\tAdd trailing newline.\n+\t* doc/general-public-license-3.rst:\n+\tAdd trailing newline.\n+\t* doc/gnu-free-documentation-license.rst:\n+\tAdd trailing newline.\n+\t* doc/index.rst:\n+\tAdd trailing newline.\n+\t* doc/indices-and-tables.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/code-generation.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/developer-options.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/input-and-output-files.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/options-for-directory-search.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/options-for-linking.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/runtime-options.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/warnings.rst:\n+\tAdd trailing newline.\n+\n+2022-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2022-11-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/conf.py: Add newline at last line.\n+\n+2022-11-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/conf.py: Add newline at last line.\n+\n+2022-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/copyright.rst:\n+\tAdd trailing newline.\n+\t* doc/general-public-license-3.rst:\n+\tAdd trailing newline.\n+\t* doc/gnu-free-documentation-license.rst:\n+\tAdd trailing newline.\n+\t* doc/index.rst:\n+\tAdd trailing newline.\n+\t* doc/indices-and-tables.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/code-generation.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/developer-options.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/input-and-output-files.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/options-for-directory-search.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/options-for-linking.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/runtime-options.rst:\n+\tAdd trailing newline.\n+\t* doc/invoking-gdc/warnings.rst:\n+\tAdd trailing newline.\n+\n+2022-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* Make-lang.in:\n+\tSupport installation if sphinx-build is missing.\n+\n+2022-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* Make-lang.in: Support --with-sphinx-build.\n+\n+2022-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* gdc.texi: Removed.\n+\n+2022-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* Make-lang.in: Support Sphinx based documentation.\n+\n+2022-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* d-target.def: Port to RST.\n+\n+2022-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/conf.py: New file.\n+\t* doc/copyright.rst: New file.\n+\t* doc/general-public-license-3.rst: New file.\n+\t* doc/gnu-free-documentation-license.rst: New file.\n+\t* doc/index.rst: New file.\n+\t* doc/indices-and-tables.rst: New file.\n+\t* doc/invoking-gdc.rst: New file.\n+\t* doc/invoking-gdc/code-generation.rst: New file.\n+\t* doc/invoking-gdc/developer-options.rst: New file.\n+\t* doc/invoking-gdc/input-and-output-files.rst: New file.\n+\t* doc/invoking-gdc/options-for-directory-search.rst: New file.\n+\t* doc/invoking-gdc/options-for-linking.rst: New file.\n+\t* doc/invoking-gdc/runtime-options.rst: New file.\n+\t* doc/invoking-gdc/warnings.rst: New file.\n+\n+2022-11-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-target.cc (Target::isVectorOpSupported): Remove cases for\n+\tcomparison operators.\n+\t* intrinsics.cc (maybe_set_intrinsic): Remove cases for vector\n+\tcomparison intrinsics.\n+\t(maybe_warn_intrinsic_mismatch): Likewise.\n+\t(expand_intrinsic_vec_cond): Remove.\n+\t(maybe_expand_intrinsic): Remove cases for vector comparison\n+\tintrinsics.\n+\t* intrinsics.def (INTRINSIC_EQUALMASK): Remove.\n+\t(INTRINSIC_NOTEQUALMASK): Remove.\n+\t(INTRINSIC_GREATERMASK): Remove.\n+\t(INTRINSIC_GREATEREQUALMASK): Remove.\n+\n+2022-10-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (apply_user_attributes): Update for new front-end\n+\tinterface.\n+\t* d-builtins.cc (d_init_versions): Predefine `D_Optimized' with\n+\tcompiling with optimizations enabled.\n+\t* d-lang.cc (d_handle_option): Update for new front-end interface.\n+\tHandle new option `-fpreview=systemvariables'.\n+\t* dmd/MERGE: Merge upstream dmd e4f8919591.\n+\t* dmd/VERSION: Bump version to v2.101.0-beta.1.\n+\t* expr.cc (ExprVisitor::visit (AssignExp *)): Treat construction of\n+\tstatic arrays from a call expression as a simple assignment.\n+\t(ExprVisitor::visit (ArrayLiteralExp *)): Handle array literals with\n+\t`scope' storage.\n+\t* gdc.texi: Update documentation of `-fpreview=' options.\n+\t* lang.opt (fpreview=shortenedmethods): Remove.\n+\t(fpreview=systemvariables):  New option.\n+\n+2022-10-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-target.def (d_minfo_section): Expand documentation of hook.\n+\tDefault initialize to \"minfo\".\n+\t(d_minfo_start_name): Rename to ...\n+\t(d_minfo_section_start): ... this.  Default initialize to\n+\t\"__start_minfo\".\n+\t(d_minfo_end_name): Rename to ...\n+\t(d_minfo_section_end): ... this. Default initialize to \"__stop_minfo\".\n+\t* modules.cc (register_moduleinfo): Use new targetdm hook names.\n+\n+2022-09-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd d579c467c1.\n+\t* decl.cc (layout_struct_initializer): Update for new front-end\n+\tinterface.\n+\t* expr.cc (ExprVisitor::visit (AssignExp *)): Remove lowering of array\n+\tassignments.\n+\t(ExprVisitor::visit (NewExp *)): Add new lowering of new'ing\n+\tassociative arrays to an _aaNew() library call.\n+\t* runtime.def (ARRAYSETASSIGN): Remove.\n+\t(AANEW): Define.\n+\n+2022-09-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* d-builtins.cc (d_build_c_type_nodes): Do not initialize\n+\tvoid_list_node.\n+\n+2022-08-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 817610b16d.\n+\t* d-ctfloat.cc (CTFloat::parse): Update for new front-end interface.\n+\t* d-lang.cc (d_parse_file): Likewise.\n+\t* expr.cc (ExprVisitor::visit (AssignExp *)): Remove handling of array\n+\tassignments to non-trivial static and dynamic arrays.\n+\t* runtime.def (ARRAYASSIGN): Remove.\n+\t(ARRAYASSIGN_L): Remove.\n+\t(ARRAYASSIGN_R): Remove.\n+\n+2022-08-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/106638\n+\t* gdc.texi: Update DIP links to point at upstream dlang/DIPs\n+\trepository.\n+\n+2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-tree.h (d_defer_declaration): Declare.\n+\t* decl.cc (function_needs_inline_definition_p): Defer checking\n+\tDECL_UNINLINABLE and DECL_DECLARED_INLINE_P.\n+\t(maybe_build_decl_tree): Call d_defer_declaration instead of\n+\tbuild_decl_tree.\n+\t* modules.cc (deferred_inline_declarations): New variable.\n+\t(build_module_tree): Set deferred_inline_declarations and a handle\n+\tdeclarations pushed to it.\n+\t(d_defer_declaration): New function.\n+\n+2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/106623\n+\t* d-codegen.cc (underlying_complex_expr): New function.\n+\t(d_build_call): Handle passing native complex objects as the\n+\tlibrary-defined equivalent.\n+\t* d-tree.h (underlying_complex_expr): Declare.\n+\t* expr.cc (ExprVisitor::visit (DotVarExp *)): Call\n+\tunderlying_complex_expr instead of build_vconvert.\n+\n+2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-compiler.cc (Compiler::onParseModule): Call create_tinfo_types\n+\twhen module name is object.\n+\t* typeinfo.cc (create_tinfo_types): Add guard for multiple\n+\tinvocations.\n+\n+2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-codegen.cc (build_delegate_cst): Give anonymous delegate field\n+\tnames same as per ABI spec.\n+\n+2022-08-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/106563\n+\t* decl.cc (DeclVisitor::visit (FuncDeclaration *)): Set semanticRun\n+\tbefore generating its symbol.\n+\t(function_defined_in_root_p): New function.\n+\t(function_needs_inline_definition_p): New function.\n+\t(maybe_build_decl_tree): New function.\n+\t(get_symbol_decl): Call maybe_build_decl_tree before returning symbol.\n+\t(start_function): Use function_defined_in_root_p instead of inline\n+\ttest for locally defined symbols.\n+\t(set_linkage_for_decl): Check for inline functions before private or\n+\tprotected symbols.\n+\n+2022-08-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/106555\n+\t* d-target.cc (Target::isReturnOnStack): Check for return type size.\n+\n+2022-08-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd d7772a2369.\n+\t* dmd/VERSION: Bump version to v2.100.1.\n+\t* d-codegen.cc (get_frameinfo): Check whether decision to generate\n+\tclosure changed since semantic finished.\n+\t* d-lang.cc (d_handle_option): Remove handling of -fdebug=level and\n+\t-fversion=level.\n+\t* decl.cc (DeclVisitor::visit (VarDeclaration *)): Generate evaluation\n+\tof noreturn variable initializers before throw.\n+\t* expr.cc (ExprVisitor::visit (AssignExp *)): Don't generate\n+\tassignment for noreturn types, only evaluate for side effects.\n+\t* lang.opt (fdebug=): Undocument -fdebug=level.\n+\t(fversion=): Undocument -fversion=level.\n+\n+2022-07-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 56589f0f4.\n+\n+2022-07-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* Make-lang.in (NOEXCEPTION_DFLAGS): Define.\n+\t(ALL_DFLAGS): Add NO_EXCEPTION_DFLAGS.\n+\n+2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/106139\n+\t* d-convert.cc (convert_expr): Handle casting from array to vector.\n+\t(convert_for_rvalue): Rewrite vector to array casts of the same\n+\telement type into a constructor.\n+\t(convert_for_assignment): Return calling convert_for_rvalue.\n+\t* expr.cc (ExprVisitor::visit (VectorExp *)): Handle generating a\n+\tvector expression from a static array.\n+\t* toir.cc (IRVisitor::visit (ReturnStatement *)): Call\n+\tconvert_for_rvalue on return value.\n+\n+2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* intrinsics.cc (build_shuffle_mask_type): Use to_constant when\n+\tgetting the number of subparts from a vector type.\n+\t(expand_intrinsic_vec_shufflevector): Likewise.\n+\n+2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* intrinsics.cc: Include diagnostic.h, langhooks.h,\n+\tvec-perm-indices.h.\n+\t(maybe_set_intrinsic): Add cases for new simd intrinsics.\n+\t(warn_mismatched_return_type): New function.\n+\t(warn_mismatched_argument): New function.\n+\t(build_shuffle_mask_type): New function.\n+\t(maybe_warn_intrinsic_mismatch): New function.\n+\t(expand_intrinsic_vec_cond): New function.\n+\t(expand_intrinsic_vec_convert): New function.\n+\t(expand_intrinsic_vec_blend): New function.\n+\t(expand_intrinsic_vec_shuffle): New function.\n+\t(expand_intrinsic_vec_shufflevector): New function.\n+\t(expand_intrinsic_vec_load_unaligned): New function.\n+\t(expand_intrinsic_vec_store_unaligned): New function.\n+\t(maybe_expand_intrinsic): Check signature of intrinsic before handing\n+\toff to front-end lowering.  Add cases for new simd intrinsics.\n+\t* intrinsics.def (INTRINSIC_LOADUNALIGNED): Define intrinsic.\n+\t(INTRINSIC_STOREUNALIGNED): Define intrinsic.\n+\t(INTRINSIC_SHUFFLE): Define intrinsic.\n+\t(INTRINSIC_SHUFFLEVECTOR): Define intrinsic.\n+\t(INTRINSIC_CONVERTVECTOR): Define intrinsic.\n+\t(INTRINSIC_BLENDVECTOR): Define intrinsic.\n+\t(INTRINSIC_EQUALMASK): Define intrinsic.\n+\t(INTRINSIC_NOTEQUALMASK): Define intrinsic.\n+\t(INTRINSIC_GREATERMASK): Define intrinsic.\n+\t(INTRINSIC_GREATEREQUALMASK): Define intrinsic.\n+\n+2022-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-codegen.cc: Include gimple-expr.h.\n+\t(force_target_expr): Use create_tmp_var_raw.\n+\t* decl.cc: Inlucde gimple-expr.h.\n+\t(build_local_temp): Use create_tmp_var_raw.\n+\t* intrinsics.cc (expand_intrinsic_rotate): Use get_callee_fndecl.\n+\t(maybe_expand_intrinsic): Likewise.\n+\n+2022-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (handle_omp_declare_simd_attribute): New function.\n+\t(d_handle_simd_attribute): New function.\n+\t(d_langhook_common_attribute_table): Add 'omp declare simd' attribute.\n+\t(d_langhook_attribute_table): Add simd attribute.\n+\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (d_handle_section_attribute): Update error message.\n+\t(d_handle_symver_attribute): Likewise.\n+\t(d_handle_no_sanitize_attribute): Likewise.\n+\t(d_handle_visibility_attribute): Likewise.\n+\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/105413\n+\t* d-attribs.cc (d_handle_register_attribute): New function.\n+\t(d_langhook_attribute_table): Add register attribute.\n+\t* d-codegen.cc (d_mark_addressable): Error if taken address of\n+\tregister variable.\n+\t(build_frame_type): Error if register variable has non-local\n+\treferences.\n+\t* d-tree.h (d_mark_addressable): Add complain parameter.\n+\t* decl.cc (get_symbol_decl): Mark register varibles DECL_REGISTER.\n+\tError when register variable declared thread-local or extern.\n+\t* expr.cc (ExprVisitor::visit (IndexExp *)): Don't complain about\n+\tmarking register vectors as addressable in an ARRAY_REF.\n+\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-codegen.cc (build_array_index): Rename to...\n+\t(build_pointer_index): ...this.\n+\t* d-tree.h (build_array_index): Rename declaration to...\n+\t(build_pointer_index): ...this.\n+\t* expr.cc (ExprVisitor::visit (IndexExp *)): Construct indexes of\n+\tARRAY_TYPE using ARRAY_REF.\n+\t(ExprVisitor::visit (SliceExp *)): Update.\n+\t* intrinsics.cc (expand_intrinsic_bt): Update.\n+\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 529110f66.\n+\t* decl.cc (DeclVisitor::visit (TupleDeclaration *)): Update for new\n+\tfront-end interface.\n+\t* types.cc (layout_aggregate_members): Likewise.\n+\n+2022-06-22  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 6203135dc.\n+\t* typeinfo.cc (TypeInfoVisitor::visit (TypeInfoStructDeclaration *)):\n+\tUpdate for new front-end interface.\n+\t(SpeculativeTypeVisitor::visit (TypeStruct *)): Likewise.\n+\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (d_langhook_attribute_table): Add no_sanitize.\n+\t(d_handle_no_sanitize_attribute): New function.\n+\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (d_langhook_attribute_table): Add visibility.\n+\t(insert_type_attribute): Use decl_attributes instead of\n+\tmerge_attributes.\n+\t(insert_decl_attribute): Likewise.\n+\t(apply_user_attributes): Do nothing when no UDAs applied.\n+\t(d_handle_visibility_attribute): New function.\n+\t* d-gimplify.cc (d_gimplify_binary_expr): Adjust.\n+\t* d-tree.h (set_visibility_for_decl): Declare.\n+\t* decl.cc (get_symbol_decl): Move setting of visibility flags to...\n+\t(set_visibility_for_decl): ... here.  New function.\n+\t* types.cc (TypeVisitor::visit (TypeStruct *)): Call\n+\tset_visibility_for_decl().\n+\t(TypeVisitor::visit (TypeClass *)): Likewise.\n+\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* typeinfo.cc (make_internal_typeinfo): Set TYPE_ARTIFICIAL.\n+\n+2022-06-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (apply_user_attributes): Set ATTR_FLAG_TYPE_IN_PLACE\n+\tonly on incomplete types.\n+\t* d-codegen.cc (copy_aggregate_type): Set TYPE_STUB_DECL after copy.\n+\t* d-compiler.cc (Compiler::onParseModule): Adjust.\n+\t* d-tree.h (AGGREGATE_OR_ENUM_TYPE_CHECK): Define.\n+\t(TYPE_FORWARD_REFERENCES): Define.\n+\t* decl.cc (gcc_attribute_p): Update documentation.\n+\t(DeclVisitor::visit (StructDeclaration *)): Exit before building type\n+\tnode if gcc.attributes symbol.\n+\t(DeclVisitor::visit (ClassDeclaration *)): Build type node and add\n+\tTYPE_NAME to current binding level before emitting anything else.\n+\t(DeclVisitor::visit (InterfaceDeclaration *)): Likewise.\n+\t(DeclVisitor::visit (EnumDeclaration *)): Likewise.\n+\t(build_type_decl): Move rest_of_decl_compilation() call to\n+\tfinish_aggregate_type().\n+\t* types.cc (insert_aggregate_field): Move layout_decl() call to\n+\tfinish_aggregate_type().\n+\t(insert_aggregate_bitfield): Likewise.\n+\t(layout_aggregate_members): Adjust.\n+\t(finish_incomplete_fields): New function.\n+\t(finish_aggregate_type): Handle forward referenced field types.  Call\n+\trest_of_type_compilation() after completing the aggregate.\n+\t(TypeVisitor::visit (TypeEnum *)): Don't set size and alignment until\n+\tafter apply_user_attributes().  Call rest_of_type_compilation() after\n+\tcompleting the enumeral.\n+\t(TypeVisitor::visit (TypeStruct *)): Call build_type_decl() before\n+\tapply_user_attributes().  Don't set size, alignment, and mode until\n+\tafter apply_user_attributes().\n+\t(TypeVisitor::visit (TypeClass *)): Call build_type_decl() before\n+\tapplly_user_attributes().\n+\n+2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-builtins.cc: Include builtins.h.\n+\t(gcc_builtins_libfuncs): Remove.\n+\t(strip_type_modifiers): New function.\n+\t(matches_builtin_type): New function.\n+\t(covariant_with_builtin_type_p): New function.\n+\t(maybe_set_builtin_1): Set front-end built-in if identifier matches\n+\tgcc built-in name.  Apply user-specified attributes and assembler name\n+\toverrides to the built-in.  Warn about built-in declaration mismatches.\n+\t(d_builtin_function): Set IDENTIFIER_DECL_TREE of built-in functions.\n+\t* d-compiler.cc (Compiler::onParseModule): Scan all modules for any\n+\tidentifiers that match built-in function names.\n+\t* lang.opt (Wbuiltin-declaration-mismatch): New option.\n+\n+2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-tree.h (check_typeinfo_type): Add Expression* parameter.\n+\t(build_typeinfo): Likewise.  Declare new override.\n+\t* expr.cc (ExprVisitor): Call build_typeinfo with Expression*.\n+\t* typeinfo.cc (check_typeinfo_type): Include expression in the\n+\tdiagnostic message.\n+\t(build_typeinfo): New override.\n+\n+2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 821ed393d.\n+\t* expr.cc (ExprVisitor::visit (NewExp *)): Remove handled of\n+\tallocating `@nogc' throwable object.\n+\t* runtime.def (NEWTHROW): Remove.\n+\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* d-lang.cc (d_get_sarif_source_language): New.\n+\t(LANG_HOOKS_GET_SARIF_SOURCE_LANGUAGE): Redefine.\n+\n+2022-05-31  Jason Merrill  <jason@redhat.com>\n+\n+\t* Make-lang.in (d.tags): Just look at *.cc.\n+\n+2022-05-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/105544\n+\t* d-lang.cc (d_parse_file): Zero padding past the end of the stdin\n+\tbuffer so the D lexer has a sentinel to stop parsing at.\n+\n+2022-05-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 4d07f22f2\n+\t* d-lang.cc (d_handle_option): Handle OPT_fpreview_fiximmutableconv.\n+\t* lang.opt (fpreview=fiximmutableconv): New option.\n+\t* runtime.def (ARRAYAPPENDT): Remove.\n+\n+2022-05-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* expr.cc: Add \"final\" and \"override\" to all \"visit\" vfunc decls\n+\tas appropriate.\n+\t* imports.cc: Likewise.\n+\t* typeinfo.cc: Likewise.\n+\n+2022-05-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* decl.cc: Add \"final\" and \"override\" to all \"visit\" vfunc decls\n+\tas appropriate.\n+\t* expr.cc: Likewise.\n+\t* toir.cc: Likewise.\n+\t* typeinfo.cc: Likewise.\n+\t* types.cc: Likewise.\n+\n+2022-05-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 60bfa0ee7.\n+\t* dmd/VERSION: Update version to v2.100.0.\n+\t* d-builtins.cc (d_init_versions): Update for new front-end interface.\n+\t* d-codegen.cc (d_decl_context): Use resolvedLinkage to get\n+\tdeclaration linkage.\n+\t(build_struct_literal): Track offset in bits.\n+\t* d-gimplify.cc (d_gimplify_modify_expr): Check both operands for a\n+\tbit-field reference.\n+\t* d-lang.cc (d_handle_option): Handle -fpreview=bitfields, remove\n+\t-frevert=markdown and -ftransition=vmarkdown.\n+\t(d_post_options): Set flag_rtti and flag_exceptions if -fno-druntime\n+\twas seen on command-line.\n+\t(d_parse_file): Update for new front-end interface.\n+\t(d_type_promotes_to): Use resolvedLinkage to get declaration linkage.\n+\t* decl.cc (make_thunk): Likewise.\n+\t* expr.cc (ExprVisitor::visit (CatAssignExp *)): Remove lowering for\n+\tappending of an element or array to another array.\n+\t* lang.opt (fpreview=bitfields): New option.\n+\t(frevert=markdown): Remove.\n+\t(ftransition=vmarkdown): Remove.\n+\t* types.cc (layout_aggregate_members): Ignore anonymous fields in\n+\ttotal count.\n+\n+2022-04-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 313d28b3d.\n+\t* d-port.cc (Port::memicmp): Use d_size_t instead of size_t.\n+\t(Port::valcpy): Likewise.\n+\n+2022-04-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd eb7bee331.\n+\t* dmd/VERSION: Update version to v2.100.0-beta.1.\n+\t* d-lang.cc (d_handle_option): Handle OPT_frevert_dip1000.\n+\t* lang.opt (frevert=dip1000): New option.\n+\n+2022-04-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* Make-lang.in (D_FRONTEND_OBJS): Add d/common-bitfields.o,\n+\td/mustuse.o.\n+\t* d-ctfloat.cc (CTFloat::isIdentical): Don't treat NaN values as\n+\tidentical.\n+\t* dmd/MERGE: Merge upstream dmd 4d1bfcf14.\n+\t* expr.cc (ExprVisitor::visit (VoidInitExp *)): New.\n+\n+2022-04-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-lang.cc: Include dmd/template.h.\n+\t(d_parse_file): Call printTemplateStats when vtemplates is set.\n+\t* decl.cc (start_function): Remove OPT_Wtemplates warning.\n+\t* lang.opt (Wtemplates): Remove.\n+\n+2022-04-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 47871363d.\n+\t* d-builtins.cc (d_init_versions): Add predefined version identifiers\n+\tD_PreConditions, D_PostConditions, and D_Invariants.\n+\t* d-codegen.cc (d_build_call): Update for new front-end interface.\n+\t(build_frame_type): Generate reference field for NRVO variables with\n+\tnested references.\n+\t(build_closure): Generate assignment of return address to closure.\n+\t* d-tree.h (DECL_INSTANTIATED): Use DECL_LANG_FLAG_2.\n+\t(bind_expr): Remove.\n+\t* decl.cc (DeclVisitor::visit (FuncDeclaration *)): Update for new\n+\tfront-end interface.\n+\t(get_symbol_decl): Likewise.\n+\t(get_decl_tree): Check DECL_LANG_FRAME_FIELD before DECL_LANG_NRVO.\n+\tDereference the field when both are set.\n+\t* expr.cc (ExprVisitor::visit (DeleteExp *)): Update for new front-end\n+\tinterface.\n+\t* modules.cc (get_internal_fn): Likewise.\n+\t* toir.cc (IRVisitor::visit (ReturnStatement *)): Likewise.\n+\n+2022-03-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/105004\n+\t* d-codegen.cc (build_struct_literal): Use complex_expr to build\n+\tcomplex expressions from __c_complex types.\n+\n+2022-03-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/104911\n+\t* dmd/MERGE: Merge upstream dmd 2503f17e5.\n+\t* d-convert.cc (convert_expr): Replace d_uns64 with dinteger_t.\n+\t* d-lang.cc: Remove dmd/root/file.h include.\n+\t(d_handle_option): Update for new front-end interface.\n+\t(d_parse_file): Likewise.\n+\n+2022-03-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 02a3fafc6.\n+\t* dmd/VERSION: Update version to v2.099.0.\n+\t* imports.cc (ImportVisitor::visit (EnumDeclaration *)): Don't cache\n+\tdecl in front-end AST node.\n+\t(ImportVisitor::visit (AggregateDeclaration *)): Likewise.\n+\t(ImportVisitor::visit (ClassDeclaration *)): Likewise.\n+\n+2022-03-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* imports.cc (imported_decls): Define.\n+\t(class ImportVisitor): Add result_ field.\n+\t(ImportVisitor::result): New method.\n+\t(ImportVisitor::visit (Module *)): Store decl to result_.\n+\t(ImportVisitor::visit (Import *)): Likewise.\n+\t(ImportVisitor::visit (AliasDeclaration *)): Don't cache decl in\n+\tfront-end AST node.\n+\t(ImportVisitor::visit (OverDeclaration *)): Likewise.\n+\t(ImportVisitor::visit (FuncDeclaration *)): Likewise.\n+\t(ImportVisitor::visit (Declaration *)): Likewise.\n+\t(build_import_decl): Use imported_decls to cache and lookup built\n+\tdeclarations.\n+\n+2022-03-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR translation/104552\n+\t* lang.opt (fdump-cxx-spec=): Fix typo in argument handle.\n+\t(fpreview=fixaliasthis): Quote `alias this' as code.\n+\n+2022-03-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 423f19b41.\n+\n+2022-02-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-target.cc (Target::_init): Initialize C type size fields.\n+\t* dmd/MERGE: Merge upstream dmd cf63dd8e5.\n+\t* dmd/VERSION: Update version to v2.099.0-rc.1.\n+\n+2022-02-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* expr.cc (ExprVisitor::visit (DeleteExp *)): Remove handling of\n+\tdeleting GC allocated classes.\n+\t* runtime.def (DELCLASS): Remove.\n+\t(DELINTERFACE): Remove.\n+\n+2022-02-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd cb49e99f8.\n+\t* dmd/VERSION: Update version to v2.099.0-beta.1.\n+\t* decl.cc (layout_class_initializer): Update call to NewExp::create.\n+\t* expr.cc (ExprVisitor::visit (DeleteExp *)): Remove handling of\n+\tdeleting arrays and pointers.\n+\t(ExprVisitor::visit (DotVarExp *)): Convert complex types to the\n+\tfront-end library type representing them.\n+\t(ExprVisitor::visit (StringExp *)): Use getCodeUnit instead of charAt\n+\tto get the value of each index in a string expression.\n+\t* runtime.def (DELMEMORY): Remove.\n+\t(DELARRAYT): Remove.\n+\t* types.cc (TypeVisitor::visit (TypeEnum *)): Handle anonymous enums.\n+\n+2022-02-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-builtins.cc (d_build_builtins_module): Set purity of DECL_PURE_P\n+\tfunctions to PURE::const_.\n+\t* d-gimplify.cc (bit_field_ref): New function.\n+\t(d_gimplify_modify_expr): Handle implicit casting for assignments to\n+\tbit-fields.\n+\t(d_gimplify_unary_expr): New function.\n+\t(d_gimplify_binary_expr): New function.\n+\t(d_gimplify_expr): Handle UNARY_CLASS_P and BINARY_CLASS_P.\n+\t* d-target.cc (Target::_init): Initialize bitFieldStyle.\n+\t(TargetCPP::parameterType): Update signature.\n+\t(Target::supportsLinkerDirective): New function.\n+\t* dmd/MERGE: Merge upstream dmd 52844d4b1.\n+\t* expr.cc (ExprVisitor::visit (ThrowExp *)): New function.\n+\t* types.cc (d_build_bitfield_integer_type): New function.\n+\t(insert_aggregate_bitfield): New function.\n+\t(layout_aggregate_members): Handle inserting bit-fields into an\n+\taggregate type.\n+\n+2022-01-31  Martin Liska  <mliska@suse.cz>\n+\n+\tPR d/104287\n+\t* decl.cc (d_finish_decl): Remove trailing dot.\n+\n+2022-01-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* decl.cc (d_finish_decl): Do not use leading capital letter.\n+\n+2022-01-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* d-gimplify.cc: Rename .c names to .cc.\n+\t* d-incpath.cc: Likewise.\n+\t* lang-specs.h: Likewise.\n+\n+2022-01-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/103840\n+\t* dmd/MERGE: Merge upstream dmd 001bfd97b.\n+\t* Make-lang.in (D_FRONTEND_OBJS): Rename d/complex.o to\n+\td/root-complex.o, and d/utf.o to d/root/utf.o.\n+\n+2022-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gdc.texi: Bump @copyrights-d year.\n+\n+\f\n+Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+Copying and distribution of this file, with or without modification,\n+are permitted in any medium without royalty provided the copyright\n+notice and this notice are preserved."}, {"sha": "97887c90552b40c034f463eff250248365499ae2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 1, "deletions": 4479, "changes": 4480, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d64f877906111645af0217d4d54993a7b2ecbd2e"}, {"sha": "71e551d9109260b50a4475d40f1ccd380c3ab265", "filename": "gcc/fortran/ChangeLog-2022", "status": "added", "additions": 4484, "deletions": 0, "changes": 4484, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Ffortran%2FChangeLog-2022", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Ffortran%2FChangeLog-2022", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog-2022?ref=d64f877906111645af0217d4d54993a7b2ecbd2e"}, {"sha": "97887c90552b40c034f463eff250248365499ae2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 21433, "changes": 21434, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d64f877906111645af0217d4d54993a7b2ecbd2e"}, {"sha": "d9fafccda63f6fd96eea0c5f6dde5ee9c11a5565", "filename": "gcc/testsuite/ChangeLog-2022", "status": "added", "additions": 21438, "deletions": 0, "changes": 21438, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Ftestsuite%2FChangeLog-2022", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/gcc%2Ftestsuite%2FChangeLog-2022", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog-2022?ref=d64f877906111645af0217d4d54993a7b2ecbd2e"}, {"sha": "97887c90552b40c034f463eff250248365499ae2", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 1, "deletions": 559, "changes": 560, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d64f877906111645af0217d4d54993a7b2ecbd2e", "patch": "@@ -1,563 +1,5 @@\n-2022-12-15  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR libfortran/108056\n-\t* runtime/ISO_Fortran_binding.c (cfi_desc_to_gfc_desc,\n-\tgfc_desc_to_cfi_desc): Mostly revert to GCC 11 version for\n-\tthose backward-compatiblity-only functions.\n-\n-2022-10-12  Martin Liska  <mliska@suse.cz>\n-\n-\t* configure: Regenerate.\n-\n-2022-10-11  Olivier Hainque  <hainque@adacore.com>\n-\t    Olivier Hainque  <hainque@adacore.com>\n-\n-\t* configure: Regenerate.\n-\n-2022-10-10  LIU Hao  <lh_mouse@126.com>\n-\n-\t* io/async.h (struct async_unit): Use `__gthread_t` instead\n-\tof `pthread_t`.\n-\n-2022-09-21  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* ieee/ieee_arithmetic.F90 (IEEE_SET_ROUNDING_MODE): Handle\n-\tRADIX argument better.\n-\n-2022-09-21  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* gfortran.map: Add symbols for IEEE_GET_MODES\n-\tand IEEE_SET_MODES.\n-\n-2022-09-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* ieee/ieee_exceptions.F90: Add IEEE_MODES_TYPE, IEEE_GET_MODES\n-\tand IEEE_SET_MODES.\n-\t* ieee/ieee_arithmetic.F90: Make them public in IEEE_ARITHMETIC\n-\tas well.\n-\n-2022-09-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* ieee/ieee_arithmetic.F90: Add RADIX argument to\n-\tIEEE_SET_ROUNDING_MODE and IEEE_GET_ROUNDING_MODE.\n-\t* config/fpu-387.h: Add IEEE_AWAY mode.\n-\t* config/fpu-aarch64.h: Add IEEE_AWAY mode.\n-\t* config/fpu-aix.h: Add IEEE_AWAY mode.\n-\t* config/fpu-generic.h: Add IEEE_AWAY mode.\n-\t* config/fpu-glibc.h: Add IEEE_AWAY mode.\n-\t* config/fpu-sysv.h: Add IEEE_AWAY mode.\n-\n-2022-09-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/95644\n-\t* ieee/ieee_arithmetic.F90: Add IEEE_SIGNBIT and IEEE_FMA.\n-\n-2022-08-26  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/106579\n-\t* ieee/ieee_helper.c (IEEE_OTHER_VALUE, IEEE_SIGNALING_NAN,\n-\tIEEE_QUIET_NAN, IEEE_NEGATIVE_INF, IEEE_NEGATIVE_NORMAL,\n-\tIEEE_NEGATIVE_DENORMAL, IEEE_NEGATIVE_SUBNORMAL,\n-\tIEEE_NEGATIVE_ZERO, IEEE_POSITIVE_ZERO, IEEE_POSITIVE_DENORMAL,\n-\tIEEE_POSITIVE_SUBNORMAL, IEEE_POSITIVE_NORMAL, IEEE_POSITIVE_INF):\n-\tMove to gcc/fortran/libgfortran.h.\n-\n-2022-08-26  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/105105\n-\t* ieee/ieee_helper.c: Don't include issignaling_fallback.h.\n-\t(CLASSMACRO): Use __builtin_issignaling instead of issignaling.\n-\t* ieee/issignaling_fallback.h: Removed.\n-\n-2022-08-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\t    Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/46539\n-\t* acinclude.m4 (LIBQUADSPEC): From $FC -static-libgfortran -###\n-\toutput determine -Bstatic/-Bdynamic, -bstatic/-bdynamic,\n-\t-aarchive_shared/-adefault linker support or Darwin remapping\n-\tof -lgfortran to libgfortran.a%s and use that around or instead\n-\tof -lquadmath in LIBQUADSPEC.\n-\t* configure: Regenerated.\n-\n-2022-08-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR libfortran/106079\n-\t* io/transfer.c (formatted_transfer_scalar_read,\n-\tformatted_transfer_scalar_write): For type BT_REAL with kind 17\n-\tchange kind to 16 before calling read_radix or write_{b,o,z}.\n-\n-2022-06-29  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* mk-kinds-h.sh: Change __float128 to _Float128 in a comment.\n-\t* acinclude.m4 (LIBGFOR_CHECK_MATH_IEEE128): Use _Float128 instead of\n-\t__float128.\n-\t* libgfortran.h (isnan): Change __float128 to _Float128 in a comment.\n-\t(__acoshieee128, __acosieee128, __asinhieee128, __asinieee128,\n-\t__atan2ieee128, __atanhieee128, __atanieee128, __copysignieee128,\n-\t__coshieee128, __cosieee128, __erfcieee128, __erfieee128,\n-\t__expieee128, __fabsieee128, __fmaieee128, __fmodieee128, __jnieee128,\n-\t__log10ieee128, __logieee128, __powieee128, __sinhieee128,\n-\t__sinieee128, __sqrtieee128, __tanhieee128, __tanieee128,\n-\t__ynieee128, __strtoieee128): Use _Float128 instead of __float128.\n-\t* configure: Regenerated.\n-\n-2022-06-29  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR bootstrap/106137\n-\t* acinclude.m4 (LIBGFOR_CHECK_FLOAT128): Adjust comment.\n-\tAlso test for __float128.\n-\t(HAVE_FLOAT128): Adjust description.\n-\t* config.h.in: Regenerated.\n-\t* configure: Regenerated.\n-\n-2022-06-28  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* configure.ac: Check for strtof128 and strfromf128.\n-\tCheck for math and complex *f128 functions.  Set\n-\thave_iec_60559_libc_support to yes if *f128 support is around, for\n-\t--enable-libquadmath-support default to \"default\" rather than yes if\n-\thave_iec_60559_libc_support is yes.\n-\t* acinclude.m4 (LIBGFOR_CHECK_FLOAT128): Test\n-\t_Float128/_Complex _Float128 rather than __float128 and\n-\t_Complex float __attribute__((mode(TC))).  If libquadmath support\n-\tis defaulted and have_iec_60559_libc_support is yes, define and subst\n-\tUSE_IEC_60559.  Remove unused LIBGFOR_BUILD_QUAD conditional.\n-\t* Makefile.am (kinds.h): Pass @USE_IEC_60559@ as an extra\n-\tmk-kinds-h.sh argument.\n-\t* mk-kinds-h.sh: Accept 4th use_iec_60559 argument.  Use\n-\t_Float128/_Complex _Float128 types instead of __float128 and\n-\t_Complex float __attribute__((mode(TC))), and if use_iec_60559 is yes,\n-\tuse f128 suffix instead of q and define GFC_REAL_16_USE_IEC_60559.\n-\t* kinds-override.h: Use _Float128/_Complex _Float128 types instead of\n-\t__float128 and _Complex float __attribute__((mode(TC))), if\n-\tUSE_IEC_60559 is defined, use f128 suffixes instead of q and\n-\tdefine GFC_REAL_17_USE_IEC_60559.\n-\t* libgfortran.h: Don't include quadmath_weak.h if USE_IEC_60559 is\n-\tdefined.\n-\t(GFC_REAL_16_INFINITY, GFC_REAL_16_QUIET_NAN): Define\n-\tfor GFC_REAL_16_USE_IEC_60559 differently.\n-\t* caf/single.c (convert_type): Use _Float128/_Complex _Float128\n-\tinstead of __float128 and _Complex float __attribute__((mode(TC))).\n-\tFor HAVE_GFC_REAL_10 when HAVE_GFC_REAL_16 isn't defined use\n-\t_Complex long double instead of long double.\n-\t* ieee/issignaling_fallback.h (ieee854_float128_shape_type): Use\n-\t_Float128 instead of __float128.\n-\t(__issignalingf128): Change argument type to _Float128.\n-\t(issignaling): Use _Float128 instead of __float128 in _Generic.\n-\t* intrinsics/cshift0.c (cshift0): Use _Float128 instead of __float128\n-\tin a comment.  Fix a comment typo, logn double -> long double.\n-\t* intrinsics/erfc_scaled.c (_THRESH, _M_2_SQRTPI, _INF, _ERFC, _EXP):\n-\tUse different definitions if GFC_REAL_16_USE_IEC_60559.\n-\t(_THRESH, _M_2_SQRTPI): Use GFC_REAL_17_LITERAL macro.\n-\t(_ERFC, _EXP): Use different definitions if GFC_REAL_17_USE_IEC_60559.\n-\t* intrinsics/spread_generic.c (spread, spread_scalar): Use _Float128\n-\tinstead of __float128 in a comment.  Fix a comment typo,\n-\tlogn double -> long double.\n-\t* intrinsics/trigd.c (ENABLE_SIND, ENABLE_COSD, ENABLE_TAND): Handle\n-\tGFC_REAL_16_USE_IEC_60559.\n-\t* intrinsics/pack_generic.c (pack): Use _Float128 instead of\n-\t__float128 in a comment.  Fix a comment typo, logn double ->\n-\tlong double.\n-\t* intrinsics/unpack_generic.c (unpack1, unpack0): Likewise.\n-\t* runtime/in_pack_generic.c (internal_pack): Likewise.\n-\t* runtime/in_unpack_generic.c (internal_unpack): Likewise.\n-\t* io/read.c (convert_real, convert_infnan): Handle\n-\tGFC_REAL_16_USE_IEC_60559 and GFC_REAL_17_USE_IEC_60559.\n-\t* io/transfer128.c (tmp1, tmp2): Don't define if libquadmath\n-\tisn't needed.\n-\t* io/write_float.def (gfor_strfromf128): New function.\n-\t(DTOA2Q, FDTOA2Q): Define differently if\n-\tGFC_REAL_16_USE_IEC_60559 or GFC_REAL_17_USE_IEC_60559.\n-\t* m4/mtype.m4: Use different suffix if GFC_REAL_16_USE_IEC_60559\n-\tor GFC_REAL_17_USE_IEC_60559.\n-\t* config.h.in: Regenerated.\n-\t* configure: Regenerated.\n-\t* Makefile.in: Regenerated.\n-\t* generated/bessel_r16.c: Regenerated.\n-\t* generated/bessel_r17.c: Regenerated.\n-\t* generated/norm2_r16.c: Regenerated.\n-\t* generated/norm2_r17.c: Regenerated.\n-\n-2022-01-26  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n-\n-\tPR libfortran/104233\n-\t* ieee/issignaling_fallback.h: Check GFC_REAL_16_IS_FLOAT128\n-\tinstead of __FLT128_IS_IEC_60559__.\n-\n-2022-01-25  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n-\n-\t* ieee/issignaling_fallback.h: Fix GCC-specific preprocessor\n-\tmacros.\n-\n-2022-01-25  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* ieee/issignaling_fallback.h (__issignalingl): Define for\n-\tIBM extended long double are returning __issignaling on the\n-\tfirst double.\n-\n-2022-01-25  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n-\n-\t* ieee/issignaling_fallback.h: fix preprocessor condition.\n-\n-2022-01-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* ieee/issignaling_fallback.h: New file.\n-\t* ieee/ieee_helper.c: Include issignaling_fallback.h when target\n-\tdoes not define issignaling macro.\n-\n-2022-01-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* ieee/issignaling_fallback.h: Remove file.\n-\n-2022-01-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* runtime/environ.c: Allow for multiple default values so that\n-\tseparate default specifications for IBM long double format and\n-\tendianness are possible.\n-\n-2022-01-16  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n-\n-\t* ieee/issignaling_fallback.h: New file.\n-\n-2022-01-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/82207\n-\t* mk-kinds-h.sh: Add values for TINY.\n-\t* ieee/ieee_arithmetic.F90: Call C helper functions for\n-\tIEEE_VALUE.\n-\t* ieee/ieee_helper.c: New functions ieee_value_helper_N for each\n-\tfloating-point type.\n-\n-2022-01-14  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR libfortran/104006\n-\t* Makefile.am (BUILT_SOURCES): Don't include $(version_dep).\n-\t(clean-local): Remove $(version_dep).\n-\t* Makefile.in: Regenerated.\n-\n-2022-01-13  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR libfortran/104006\n-\t* Makefile.am (gfortran.map-sun): Rename target to ...\n-\t(gfortran.ver-sun): ... this.\n-\t* Makefile.in: Regenerated.\n-\n-2022-01-12  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* libgfortran.h (POWER_IEEE128): Use __GLIBC_PREREQ in a separate\n-\t#if directive inside of #if ... && defined __GLIBC_PREREQ.\n-\n-2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* io/transfer.c (unformatted_read, unformatted_write): When\n-\tbyteswapping IBM extended real(kind=16), handle it as byteswapping\n-\ttwo real(kind=8) values.\n-\n-2022-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* runtime/environ.c (R16_IEEE): New macro.\n-\t(R16_IBM): New macro.\n-\t(next_token): Handle IBM R16 conversion cases.\n-\t(push_token): Likewise.\n-\t(mark_single): Likewise.\n-\t(do_parse): Likewise, initialize endian.\n-\n-2022-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* Makefile.in: Regenerate.\n-\t* io/file_pos.c (unformatted_backspace): Mask off\n-\tR16 parts for convert.\n-\t* io/inquire.c (inquire_via_unit): Add cases for\n-\tR16 parts.\n-\t* io/open.c (st_open): Add cases for R16 conversion.\n-\t* io/transfer.c (unformatted_read): Adjust for R16 conversions.\n-\t(unformatted_write): Likewise.\n-\t(us_read): Mask of R16 bits.\n-\t(data_transfer_init): Likewiese.\n-\t(write_us_marker): Likewise.\n-\n-2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* Makefile.am (AM_FCFLAGS): Add -fbuilding-libgfortran after\n-\t-fallow-leading-underscore.\n-\t* Makefile.in: Regenerated.\n-\n-2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* libgfortran.h (__copysignieee128, __fmaieee128, __fmodieee128):\n-\tDeclare.\n-\t* intrinsics/trigd.c (COPYSIGN, FMOD, FABS, FMA, SIN, COS, TAN): If\n-\tPOWER_IEEE128 is defined, define these for kind 17 include.\n-\t* intrinsics/trigd_lib.inc (COPYSIGN, FMOD, FABS, FMA, SIN, COS, TAN):\n-\tDon't define if COPYSIGN is already defined.\n-\n-2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* libgfortran.h (GFC_REAL_17_INFINITY, GFC_REAL_17_QUIET_NAN): Define.\n-\t(__erfcieee128): Declare.\n-\t* intrinsics/trigd.c (_gfortran_sind_r17, _gfortran_cosd_r17,\n-\t_gfortran_tand_r17): Define for HAVE_GFC_REAL_17.\n-\t* intrinsics/random.c (random_r17, arandom_r17, rnumber_17): Define.\n-\t* intrinsics/erfc_scaled.c (ERFC_SCALED): Define.\n-\t(erfc_scaled_r16): Use ERFC_SCALED macro.\n-\t(erfc_scaled_r17): Define.\n-\n-2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* io/read.c (convert_real): Add missing break; for the\n-\tHAVE_GFC_REAL_17 case.\n-\n-2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* io/write_float.def (CALCULATE_EXP): If HAVE_GFC_REAL_17, also use\n-\tCALCULATE_EXP(17).\n-\t(determine_en_precision): Use 17 instead of 16 as first EN_PREC\n-\targument for kind 17.\n-\t(get_float_string): Use 17 instead of 16 as first FORMAT_FLOAT\n-\targument for kind 17.\n-\n-2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* libgfortran.h (__acoshieee128, __acosieee128, __asinhieee128,\n-\t__asinieee128, __atan2ieee128, __atanhieee128, __atanieee128,\n-\t__coshieee128, __cosieee128, __erfieee128, __expieee128,\n-\t__fabsieee128, __jnieee128, __log10ieee128, __logieee128,\n-\t__powieee128, __sinhieee128, __sinieee128, __sqrtieee128,\n-\t__tanhieee128, __tanieee128, __ynieee128): Formatting fixes.\n-\t(__strtoieee128, __snprintfieee128): Declare.\n-\t* io/io.h (default_width_for_float, default_precision_for_float):\n-\tHandle kind == 17.\n-\t* io/size_from_kind.c (size_from_real_kind, size_from_complex_kind):\n-\tLikewise.\n-\t* io/read.c (set_integer, si_max, convert_real, convert_infnan,\n-\tread_f): Likewise.\n-\t* io/write.c (extract_uint, size_from_kind, set_fnode_default):\n-\tLikewise.\n-\t* io/write_float.def (DTOA2Q, FDTOA2Q): Define for HAVE_GFC_REAL_17.\n-\t(determine_en_precision, get_float_string): Handle kind == 17.\n-\t* io/transfer128.c: Use also for HAVE_GFC_REAL_17, but don't drag in\n-\tlibquadmath if POWER_IEEE128.\n-\t* Makefile.am (comma, PREPROCESS): New variables.\n-\t(gfortran.ver): New goal.\n-\t(version_arg, version_dep): Use gfortran.ver instead of\n-\t$(srcdir)/gfortran.map.\n-\t(gfortran.map-sun): Depend on and use gfortran.ver instead of\n-\t$(srcdir)/gfortran.map.\n-\t(BUILT_SOURCES): Add $(version_dep).\n-\t* Makefile.in: Regenerated.\n-\t* gfortran.map (GFORTRAN_8): Don't export\n-\t_gfortran_transfer_complex128, _gfortran_transfer_complex128_write,\n-\t_gfortran_transfer_real128 and _gfortran_transfer_real128_write if\n-\tHAVE_GFC_REAL_17 is defined.\n-\t(GFORTRAN_12): Export those here instead.\n-\n-2022-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* Makefile.am: Correct files for compilation flags. Add\n-\t-D__powerpc64__ for Fortran sources.  Get kinds.inc from\n-\tgrep of kinds.h and kinds-override.h.\n-\t* Makefile.in: Regenerate.\n-\t* config.h.in: Regenerate.\n-\t* configure: Regenerate.\n-\t* configure.ac: Add -mno-gnu-attribute to compile flags.\n-\t* generated/_abs_c17.F90: Regenerate.\n-\t* generated/_abs_r17.F90: Regenerate.\n-\t* generated/_acos_r17.F90: Regenerate.\n-\t* generated/_acosh_r17.F90: Regenerate.\n-\t* generated/_aimag_c17.F90: Regenerate.\n-\t* generated/_aint_r17.F90: Regenerate.\n-\t* generated/_anint_r17.F90: Regenerate.\n-\t* generated/_asin_r17.F90: Regenerate.\n-\t* generated/_asinh_r17.F90: Regenerate.\n-\t* generated/_atan2_r17.F90: Regenerate.\n-\t* generated/_atan_r17.F90: Regenerate.\n-\t* generated/_atanh_r17.F90: Regenerate.\n-\t* generated/_conjg_c17.F90: Regenerate.\n-\t* generated/_cos_c17.F90: Regenerate.\n-\t* generated/_cos_r17.F90: Regenerate.\n-\t* generated/_cosh_r17.F90: Regenerate.\n-\t* generated/_dim_r17.F90: Regenerate.\n-\t* generated/_exp_c17.F90: Regenerate.\n-\t* generated/_exp_r17.F90: Regenerate.\n-\t* generated/_log10_r17.F90: Regenerate.\n-\t* generated/_log_c17.F90: Regenerate.\n-\t* generated/_log_r17.F90: Regenerate.\n-\t* generated/_mod_r17.F90: Regenerate.\n-\t* generated/_sign_r17.F90: Regenerate.\n-\t* generated/_sin_c17.F90: Regenerate.\n-\t* generated/_sin_r17.F90: Regenerate.\n-\t* generated/_sinh_r17.F90: Regenerate.\n-\t* generated/_sqrt_c17.F90: Regenerate.\n-\t* generated/_sqrt_r17.F90: Regenerate.\n-\t* generated/_tan_r17.F90: Regenerate.\n-\t* generated/_tanh_r17.F90: Regenerate.\n-\t* kinds-override.h: Adjust to trunk.\n-\tChange condition to single line so it can be grepped.\n-\t* m4/specific.m4: Make sure that real=kind16 is used\n-\tfor _r17.F90 and _c17.F90 files.\n-\t* m4/specific2.m4: Likewise.\n-\n-2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* libgfortran.h (internal_pack_r17, internal_pack_c17,\n-\tinternal_unpack_r17, internal_unpack_c17, pack_r17, pack_c17,\n-\tunpack0_r17, unpack0_c17, unpack1_r17, unpack1_c17, spread_r17,\n-\tspread_c17, spread_scalar_r17, spread_scalar_c17, cshift0_r17,\n-\tcshift0_c17, cshift1_4_r17, cshift1_8_r17, cshift1_16_r17,\n-\tcshift1_4_c17, cshift1_8_c17, cshift1_16_c17): Declare.\n-\t* gfortran.map (GFORTRAN_12): Export *_r17 and *_c17.\n-\n-2022-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* acinclude.m4 (LIBGFOR_CHECK_MATH_IEEE128): New macro.\n-\t* configure.ac: Use it.\n-\t* config.h.in: Regenerate.\n-\t* configure: Regenerate.\n-\n-2022-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* Makefile.am: Fix pattern substitution for _r17 and _c17.\n-\t* Makefile.in: Regenerate.\n-\n-2022-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* Makefile.am: Add _r17 and _c17 files.  Build them\n-\twith -mabi=ieeelongdouble on POWER.\n-\t* Makefile.in: Regenerate.\n-\t* configure: Regenerate.\n-\t* configure.ac: New flag HAVE_REAL_17.\n-\t* kinds-override.h: (HAVE_GFC_REAL_17): New macro.\n-\t(HAVE_GFC_COMPLEX_17): New macro.\n-\t(GFC_REAL_17_HUGE): New macro.\n-\t(GFC_REAL_17_LITERAL_SUFFIX): New macro.\n-\t(GFC_REAL_17_LITERAL): New macro.\n-\t(GFC_REAL_17_DIGITS): New macro.\n-\t(GFC_REAL_17_RADIX): New macro.\n-\t* libgfortran.h\t(POWER_IEEE128): New macro.\n-\t(gfc_array_r17): Typedef.\n-\t(GFC_DTYPE_REAL_17): New macro.\n-\t(GFC_DTYPE_COMPLEX_17): New macro.\n-\t(__acoshieee128): Prototype.\n-\t(__acosieee128): Prototype.\n-\t(__asinhieee128): Prototype.\n-\t(__asinieee128): Prototype.\n-\t(__atan2ieee128): Prototype.\n-\t(__atanhieee128): Prototype.\n-\t(__atanieee128): Prototype.\n-\t(__coshieee128): Prototype.\n-\t(__cosieee128): Prototype.\n-\t(__erfieee128): Prototype.\n-\t(__expieee128): Prototype.\n-\t(__fabsieee128): Prototype.\n-\t(__jnieee128): Prototype.\n-\t(__log10ieee128): Prototype.\n-\t(__logieee128): Prototype.\n-\t(__powieee128): Prototype.\n-\t(__sinhieee128): Prototype.\n-\t(__sinieee128): Prototype.\n-\t(__sqrtieee128): Prototype.\n-\t(__tanhieee128): Prototype.\n-\t(__tanieee128): Prototype.\n-\t(__ynieee128): Prototype.\n-\t* m4/mtype.m4: Make a bit more readable. Add KIND=17.\n-\t* generated/_abs_c17.F90: New file.\n-\t* generated/_abs_r17.F90: New file.\n-\t* generated/_acos_r17.F90: New file.\n-\t* generated/_acosh_r17.F90: New file.\n-\t* generated/_aimag_c17.F90: New file.\n-\t* generated/_aint_r17.F90: New file.\n-\t* generated/_anint_r17.F90: New file.\n-\t* generated/_asin_r17.F90: New file.\n-\t* generated/_asinh_r17.F90: New file.\n-\t* generated/_atan2_r17.F90: New file.\n-\t* generated/_atan_r17.F90: New file.\n-\t* generated/_atanh_r17.F90: New file.\n-\t* generated/_conjg_c17.F90: New file.\n-\t* generated/_cos_c17.F90: New file.\n-\t* generated/_cos_r17.F90: New file.\n-\t* generated/_cosh_r17.F90: New file.\n-\t* generated/_dim_r17.F90: New file.\n-\t* generated/_exp_c17.F90: New file.\n-\t* generated/_exp_r17.F90: New file.\n-\t* generated/_log10_r17.F90: New file.\n-\t* generated/_log_c17.F90: New file.\n-\t* generated/_log_r17.F90: New file.\n-\t* generated/_mod_r17.F90: New file.\n-\t* generated/_sign_r17.F90: New file.\n-\t* generated/_sin_c17.F90: New file.\n-\t* generated/_sin_r17.F90: New file.\n-\t* generated/_sinh_r17.F90: New file.\n-\t* generated/_sqrt_c17.F90: New file.\n-\t* generated/_sqrt_r17.F90: New file.\n-\t* generated/_tan_r17.F90: New file.\n-\t* generated/_tanh_r17.F90: New file.\n-\t* generated/bessel_r17.c: New file.\n-\t* generated/cshift0_c17.c: New file.\n-\t* generated/cshift0_r17.c: New file.\n-\t* generated/cshift1_16_c17.c: New file.\n-\t* generated/cshift1_16_r17.c: New file.\n-\t* generated/cshift1_4_c17.c: New file.\n-\t* generated/cshift1_4_r17.c: New file.\n-\t* generated/cshift1_8_c17.c: New file.\n-\t* generated/cshift1_8_r17.c: New file.\n-\t* generated/findloc0_c17.c: New file.\n-\t* generated/findloc0_r17.c: New file.\n-\t* generated/findloc1_c17.c: New file.\n-\t* generated/findloc1_r17.c: New file.\n-\t* generated/in_pack_c17.c: New file.\n-\t* generated/in_pack_r17.c: New file.\n-\t* generated/in_unpack_c17.c: New file.\n-\t* generated/in_unpack_r17.c: New file.\n-\t* generated/matmul_c17.c: New file.\n-\t* generated/matmul_r17.c: New file.\n-\t* generated/matmulavx128_c17.c: New file.\n-\t* generated/matmulavx128_r17.c: New file.\n-\t* generated/maxloc0_16_r17.c: New file.\n-\t* generated/maxloc0_4_r17.c: New file.\n-\t* generated/maxloc0_8_r17.c: New file.\n-\t* generated/maxloc1_16_r17.c: New file.\n-\t* generated/maxloc1_4_r17.c: New file.\n-\t* generated/maxloc1_8_r17.c: New file.\n-\t* generated/maxval_r17.c: New file.\n-\t* generated/minloc0_16_r17.c: New file.\n-\t* generated/minloc0_4_r17.c: New file.\n-\t* generated/minloc0_8_r17.c: New file.\n-\t* generated/minloc1_16_r17.c: New file.\n-\t* generated/minloc1_4_r17.c: New file.\n-\t* generated/minloc1_8_r17.c: New file.\n-\t* generated/minval_r17.c: New file.\n-\t* generated/norm2_r17.c: New file.\n-\t* generated/pack_c17.c: New file.\n-\t* generated/pack_r17.c: New file.\n-\t* generated/pow_c17_i16.c: New file.\n-\t* generated/pow_c17_i4.c: New file.\n-\t* generated/pow_c17_i8.c: New file.\n-\t* generated/pow_r17_i16.c: New file.\n-\t* generated/pow_r17_i4.c: New file.\n-\t* generated/pow_r17_i8.c: New file.\n-\t* generated/product_c17.c: New file.\n-\t* generated/product_r17.c: New file.\n-\t* generated/reshape_c17.c: New file.\n-\t* generated/reshape_r17.c: New file.\n-\t* generated/spread_c17.c: New file.\n-\t* generated/spread_r17.c: New file.\n-\t* generated/sum_c17.c: New file.\n-\t* generated/sum_r17.c: New file.\n-\t* generated/unpack_c17.c: New file.\n-\t* generated/unpack_r17.c: New file.\n-\t* m4/ifunc.m4: New file.\n-\n-2022-01-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/82207\n-\t* Makefile.am: Pass -fsignaling-nans for IEEE files.\n-\t* Makefile.in: Regenerate.\n-\t* ieee/ieee_helper.c: Use issignaling macro to recognized\n-\tsignaling NaNs.\n-\n \f\n-Copyright (C) 2022 Free Software Foundation, Inc.\n+Copyright (C) 2023 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "8ebc0c107a320ad1a13d542ecfccf52a94976664", "filename": "libgfortran/ChangeLog-2022", "status": "added", "additions": 564, "deletions": 0, "changes": 564, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/libgfortran%2FChangeLog-2022", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/libgfortran%2FChangeLog-2022", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog-2022?ref=d64f877906111645af0217d4d54993a7b2ecbd2e", "patch": "@@ -0,0 +1,564 @@\n+2022-12-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR libfortran/108056\n+\t* runtime/ISO_Fortran_binding.c (cfi_desc_to_gfc_desc,\n+\tgfc_desc_to_cfi_desc): Mostly revert to GCC 11 version for\n+\tthose backward-compatiblity-only functions.\n+\n+2022-10-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n+2022-10-10  LIU Hao  <lh_mouse@126.com>\n+\n+\t* io/async.h (struct async_unit): Use `__gthread_t` instead\n+\tof `pthread_t`.\n+\n+2022-09-21  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* ieee/ieee_arithmetic.F90 (IEEE_SET_ROUNDING_MODE): Handle\n+\tRADIX argument better.\n+\n+2022-09-21  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.map: Add symbols for IEEE_GET_MODES\n+\tand IEEE_SET_MODES.\n+\n+2022-09-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* ieee/ieee_exceptions.F90: Add IEEE_MODES_TYPE, IEEE_GET_MODES\n+\tand IEEE_SET_MODES.\n+\t* ieee/ieee_arithmetic.F90: Make them public in IEEE_ARITHMETIC\n+\tas well.\n+\n+2022-09-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* ieee/ieee_arithmetic.F90: Add RADIX argument to\n+\tIEEE_SET_ROUNDING_MODE and IEEE_GET_ROUNDING_MODE.\n+\t* config/fpu-387.h: Add IEEE_AWAY mode.\n+\t* config/fpu-aarch64.h: Add IEEE_AWAY mode.\n+\t* config/fpu-aix.h: Add IEEE_AWAY mode.\n+\t* config/fpu-generic.h: Add IEEE_AWAY mode.\n+\t* config/fpu-glibc.h: Add IEEE_AWAY mode.\n+\t* config/fpu-sysv.h: Add IEEE_AWAY mode.\n+\n+2022-09-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/95644\n+\t* ieee/ieee_arithmetic.F90: Add IEEE_SIGNBIT and IEEE_FMA.\n+\n+2022-08-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/106579\n+\t* ieee/ieee_helper.c (IEEE_OTHER_VALUE, IEEE_SIGNALING_NAN,\n+\tIEEE_QUIET_NAN, IEEE_NEGATIVE_INF, IEEE_NEGATIVE_NORMAL,\n+\tIEEE_NEGATIVE_DENORMAL, IEEE_NEGATIVE_SUBNORMAL,\n+\tIEEE_NEGATIVE_ZERO, IEEE_POSITIVE_ZERO, IEEE_POSITIVE_DENORMAL,\n+\tIEEE_POSITIVE_SUBNORMAL, IEEE_POSITIVE_NORMAL, IEEE_POSITIVE_INF):\n+\tMove to gcc/fortran/libgfortran.h.\n+\n+2022-08-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/105105\n+\t* ieee/ieee_helper.c: Don't include issignaling_fallback.h.\n+\t(CLASSMACRO): Use __builtin_issignaling instead of issignaling.\n+\t* ieee/issignaling_fallback.h: Removed.\n+\n+2022-08-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/46539\n+\t* acinclude.m4 (LIBQUADSPEC): From $FC -static-libgfortran -###\n+\toutput determine -Bstatic/-Bdynamic, -bstatic/-bdynamic,\n+\t-aarchive_shared/-adefault linker support or Darwin remapping\n+\tof -lgfortran to libgfortran.a%s and use that around or instead\n+\tof -lquadmath in LIBQUADSPEC.\n+\t* configure: Regenerated.\n+\n+2022-08-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libfortran/106079\n+\t* io/transfer.c (formatted_transfer_scalar_read,\n+\tformatted_transfer_scalar_write): For type BT_REAL with kind 17\n+\tchange kind to 16 before calling read_radix or write_{b,o,z}.\n+\n+2022-06-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* mk-kinds-h.sh: Change __float128 to _Float128 in a comment.\n+\t* acinclude.m4 (LIBGFOR_CHECK_MATH_IEEE128): Use _Float128 instead of\n+\t__float128.\n+\t* libgfortran.h (isnan): Change __float128 to _Float128 in a comment.\n+\t(__acoshieee128, __acosieee128, __asinhieee128, __asinieee128,\n+\t__atan2ieee128, __atanhieee128, __atanieee128, __copysignieee128,\n+\t__coshieee128, __cosieee128, __erfcieee128, __erfieee128,\n+\t__expieee128, __fabsieee128, __fmaieee128, __fmodieee128, __jnieee128,\n+\t__log10ieee128, __logieee128, __powieee128, __sinhieee128,\n+\t__sinieee128, __sqrtieee128, __tanhieee128, __tanieee128,\n+\t__ynieee128, __strtoieee128): Use _Float128 instead of __float128.\n+\t* configure: Regenerated.\n+\n+2022-06-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/106137\n+\t* acinclude.m4 (LIBGFOR_CHECK_FLOAT128): Adjust comment.\n+\tAlso test for __float128.\n+\t(HAVE_FLOAT128): Adjust description.\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\n+2022-06-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac: Check for strtof128 and strfromf128.\n+\tCheck for math and complex *f128 functions.  Set\n+\thave_iec_60559_libc_support to yes if *f128 support is around, for\n+\t--enable-libquadmath-support default to \"default\" rather than yes if\n+\thave_iec_60559_libc_support is yes.\n+\t* acinclude.m4 (LIBGFOR_CHECK_FLOAT128): Test\n+\t_Float128/_Complex _Float128 rather than __float128 and\n+\t_Complex float __attribute__((mode(TC))).  If libquadmath support\n+\tis defaulted and have_iec_60559_libc_support is yes, define and subst\n+\tUSE_IEC_60559.  Remove unused LIBGFOR_BUILD_QUAD conditional.\n+\t* Makefile.am (kinds.h): Pass @USE_IEC_60559@ as an extra\n+\tmk-kinds-h.sh argument.\n+\t* mk-kinds-h.sh: Accept 4th use_iec_60559 argument.  Use\n+\t_Float128/_Complex _Float128 types instead of __float128 and\n+\t_Complex float __attribute__((mode(TC))), and if use_iec_60559 is yes,\n+\tuse f128 suffix instead of q and define GFC_REAL_16_USE_IEC_60559.\n+\t* kinds-override.h: Use _Float128/_Complex _Float128 types instead of\n+\t__float128 and _Complex float __attribute__((mode(TC))), if\n+\tUSE_IEC_60559 is defined, use f128 suffixes instead of q and\n+\tdefine GFC_REAL_17_USE_IEC_60559.\n+\t* libgfortran.h: Don't include quadmath_weak.h if USE_IEC_60559 is\n+\tdefined.\n+\t(GFC_REAL_16_INFINITY, GFC_REAL_16_QUIET_NAN): Define\n+\tfor GFC_REAL_16_USE_IEC_60559 differently.\n+\t* caf/single.c (convert_type): Use _Float128/_Complex _Float128\n+\tinstead of __float128 and _Complex float __attribute__((mode(TC))).\n+\tFor HAVE_GFC_REAL_10 when HAVE_GFC_REAL_16 isn't defined use\n+\t_Complex long double instead of long double.\n+\t* ieee/issignaling_fallback.h (ieee854_float128_shape_type): Use\n+\t_Float128 instead of __float128.\n+\t(__issignalingf128): Change argument type to _Float128.\n+\t(issignaling): Use _Float128 instead of __float128 in _Generic.\n+\t* intrinsics/cshift0.c (cshift0): Use _Float128 instead of __float128\n+\tin a comment.  Fix a comment typo, logn double -> long double.\n+\t* intrinsics/erfc_scaled.c (_THRESH, _M_2_SQRTPI, _INF, _ERFC, _EXP):\n+\tUse different definitions if GFC_REAL_16_USE_IEC_60559.\n+\t(_THRESH, _M_2_SQRTPI): Use GFC_REAL_17_LITERAL macro.\n+\t(_ERFC, _EXP): Use different definitions if GFC_REAL_17_USE_IEC_60559.\n+\t* intrinsics/spread_generic.c (spread, spread_scalar): Use _Float128\n+\tinstead of __float128 in a comment.  Fix a comment typo,\n+\tlogn double -> long double.\n+\t* intrinsics/trigd.c (ENABLE_SIND, ENABLE_COSD, ENABLE_TAND): Handle\n+\tGFC_REAL_16_USE_IEC_60559.\n+\t* intrinsics/pack_generic.c (pack): Use _Float128 instead of\n+\t__float128 in a comment.  Fix a comment typo, logn double ->\n+\tlong double.\n+\t* intrinsics/unpack_generic.c (unpack1, unpack0): Likewise.\n+\t* runtime/in_pack_generic.c (internal_pack): Likewise.\n+\t* runtime/in_unpack_generic.c (internal_unpack): Likewise.\n+\t* io/read.c (convert_real, convert_infnan): Handle\n+\tGFC_REAL_16_USE_IEC_60559 and GFC_REAL_17_USE_IEC_60559.\n+\t* io/transfer128.c (tmp1, tmp2): Don't define if libquadmath\n+\tisn't needed.\n+\t* io/write_float.def (gfor_strfromf128): New function.\n+\t(DTOA2Q, FDTOA2Q): Define differently if\n+\tGFC_REAL_16_USE_IEC_60559 or GFC_REAL_17_USE_IEC_60559.\n+\t* m4/mtype.m4: Use different suffix if GFC_REAL_16_USE_IEC_60559\n+\tor GFC_REAL_17_USE_IEC_60559.\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* Makefile.in: Regenerated.\n+\t* generated/bessel_r16.c: Regenerated.\n+\t* generated/bessel_r17.c: Regenerated.\n+\t* generated/norm2_r16.c: Regenerated.\n+\t* generated/norm2_r17.c: Regenerated.\n+\n+2022-01-26  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n+\n+\tPR libfortran/104233\n+\t* ieee/issignaling_fallback.h: Check GFC_REAL_16_IS_FLOAT128\n+\tinstead of __FLT128_IS_IEC_60559__.\n+\n+2022-01-25  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n+\n+\t* ieee/issignaling_fallback.h: Fix GCC-specific preprocessor\n+\tmacros.\n+\n+2022-01-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* ieee/issignaling_fallback.h (__issignalingl): Define for\n+\tIBM extended long double are returning __issignaling on the\n+\tfirst double.\n+\n+2022-01-25  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n+\n+\t* ieee/issignaling_fallback.h: fix preprocessor condition.\n+\n+2022-01-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* ieee/issignaling_fallback.h: New file.\n+\t* ieee/ieee_helper.c: Include issignaling_fallback.h when target\n+\tdoes not define issignaling macro.\n+\n+2022-01-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* ieee/issignaling_fallback.h: Remove file.\n+\n+2022-01-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* runtime/environ.c: Allow for multiple default values so that\n+\tseparate default specifications for IBM long double format and\n+\tendianness are possible.\n+\n+2022-01-16  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n+\n+\t* ieee/issignaling_fallback.h: New file.\n+\n+2022-01-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/82207\n+\t* mk-kinds-h.sh: Add values for TINY.\n+\t* ieee/ieee_arithmetic.F90: Call C helper functions for\n+\tIEEE_VALUE.\n+\t* ieee/ieee_helper.c: New functions ieee_value_helper_N for each\n+\tfloating-point type.\n+\n+2022-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libfortran/104006\n+\t* Makefile.am (BUILT_SOURCES): Don't include $(version_dep).\n+\t(clean-local): Remove $(version_dep).\n+\t* Makefile.in: Regenerated.\n+\n+2022-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libfortran/104006\n+\t* Makefile.am (gfortran.map-sun): Rename target to ...\n+\t(gfortran.ver-sun): ... this.\n+\t* Makefile.in: Regenerated.\n+\n+2022-01-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgfortran.h (POWER_IEEE128): Use __GLIBC_PREREQ in a separate\n+\t#if directive inside of #if ... && defined __GLIBC_PREREQ.\n+\n+2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* io/transfer.c (unformatted_read, unformatted_write): When\n+\tbyteswapping IBM extended real(kind=16), handle it as byteswapping\n+\ttwo real(kind=8) values.\n+\n+2022-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* runtime/environ.c (R16_IEEE): New macro.\n+\t(R16_IBM): New macro.\n+\t(next_token): Handle IBM R16 conversion cases.\n+\t(push_token): Likewise.\n+\t(mark_single): Likewise.\n+\t(do_parse): Likewise, initialize endian.\n+\n+2022-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* Makefile.in: Regenerate.\n+\t* io/file_pos.c (unformatted_backspace): Mask off\n+\tR16 parts for convert.\n+\t* io/inquire.c (inquire_via_unit): Add cases for\n+\tR16 parts.\n+\t* io/open.c (st_open): Add cases for R16 conversion.\n+\t* io/transfer.c (unformatted_read): Adjust for R16 conversions.\n+\t(unformatted_write): Likewise.\n+\t(us_read): Mask of R16 bits.\n+\t(data_transfer_init): Likewiese.\n+\t(write_us_marker): Likewise.\n+\n+2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Makefile.am (AM_FCFLAGS): Add -fbuilding-libgfortran after\n+\t-fallow-leading-underscore.\n+\t* Makefile.in: Regenerated.\n+\n+2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgfortran.h (__copysignieee128, __fmaieee128, __fmodieee128):\n+\tDeclare.\n+\t* intrinsics/trigd.c (COPYSIGN, FMOD, FABS, FMA, SIN, COS, TAN): If\n+\tPOWER_IEEE128 is defined, define these for kind 17 include.\n+\t* intrinsics/trigd_lib.inc (COPYSIGN, FMOD, FABS, FMA, SIN, COS, TAN):\n+\tDon't define if COPYSIGN is already defined.\n+\n+2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgfortran.h (GFC_REAL_17_INFINITY, GFC_REAL_17_QUIET_NAN): Define.\n+\t(__erfcieee128): Declare.\n+\t* intrinsics/trigd.c (_gfortran_sind_r17, _gfortran_cosd_r17,\n+\t_gfortran_tand_r17): Define for HAVE_GFC_REAL_17.\n+\t* intrinsics/random.c (random_r17, arandom_r17, rnumber_17): Define.\n+\t* intrinsics/erfc_scaled.c (ERFC_SCALED): Define.\n+\t(erfc_scaled_r16): Use ERFC_SCALED macro.\n+\t(erfc_scaled_r17): Define.\n+\n+2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* io/read.c (convert_real): Add missing break; for the\n+\tHAVE_GFC_REAL_17 case.\n+\n+2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* io/write_float.def (CALCULATE_EXP): If HAVE_GFC_REAL_17, also use\n+\tCALCULATE_EXP(17).\n+\t(determine_en_precision): Use 17 instead of 16 as first EN_PREC\n+\targument for kind 17.\n+\t(get_float_string): Use 17 instead of 16 as first FORMAT_FLOAT\n+\targument for kind 17.\n+\n+2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgfortran.h (__acoshieee128, __acosieee128, __asinhieee128,\n+\t__asinieee128, __atan2ieee128, __atanhieee128, __atanieee128,\n+\t__coshieee128, __cosieee128, __erfieee128, __expieee128,\n+\t__fabsieee128, __jnieee128, __log10ieee128, __logieee128,\n+\t__powieee128, __sinhieee128, __sinieee128, __sqrtieee128,\n+\t__tanhieee128, __tanieee128, __ynieee128): Formatting fixes.\n+\t(__strtoieee128, __snprintfieee128): Declare.\n+\t* io/io.h (default_width_for_float, default_precision_for_float):\n+\tHandle kind == 17.\n+\t* io/size_from_kind.c (size_from_real_kind, size_from_complex_kind):\n+\tLikewise.\n+\t* io/read.c (set_integer, si_max, convert_real, convert_infnan,\n+\tread_f): Likewise.\n+\t* io/write.c (extract_uint, size_from_kind, set_fnode_default):\n+\tLikewise.\n+\t* io/write_float.def (DTOA2Q, FDTOA2Q): Define for HAVE_GFC_REAL_17.\n+\t(determine_en_precision, get_float_string): Handle kind == 17.\n+\t* io/transfer128.c: Use also for HAVE_GFC_REAL_17, but don't drag in\n+\tlibquadmath if POWER_IEEE128.\n+\t* Makefile.am (comma, PREPROCESS): New variables.\n+\t(gfortran.ver): New goal.\n+\t(version_arg, version_dep): Use gfortran.ver instead of\n+\t$(srcdir)/gfortran.map.\n+\t(gfortran.map-sun): Depend on and use gfortran.ver instead of\n+\t$(srcdir)/gfortran.map.\n+\t(BUILT_SOURCES): Add $(version_dep).\n+\t* Makefile.in: Regenerated.\n+\t* gfortran.map (GFORTRAN_8): Don't export\n+\t_gfortran_transfer_complex128, _gfortran_transfer_complex128_write,\n+\t_gfortran_transfer_real128 and _gfortran_transfer_real128_write if\n+\tHAVE_GFC_REAL_17 is defined.\n+\t(GFORTRAN_12): Export those here instead.\n+\n+2022-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* Makefile.am: Correct files for compilation flags. Add\n+\t-D__powerpc64__ for Fortran sources.  Get kinds.inc from\n+\tgrep of kinds.h and kinds-override.h.\n+\t* Makefile.in: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Add -mno-gnu-attribute to compile flags.\n+\t* generated/_abs_c17.F90: Regenerate.\n+\t* generated/_abs_r17.F90: Regenerate.\n+\t* generated/_acos_r17.F90: Regenerate.\n+\t* generated/_acosh_r17.F90: Regenerate.\n+\t* generated/_aimag_c17.F90: Regenerate.\n+\t* generated/_aint_r17.F90: Regenerate.\n+\t* generated/_anint_r17.F90: Regenerate.\n+\t* generated/_asin_r17.F90: Regenerate.\n+\t* generated/_asinh_r17.F90: Regenerate.\n+\t* generated/_atan2_r17.F90: Regenerate.\n+\t* generated/_atan_r17.F90: Regenerate.\n+\t* generated/_atanh_r17.F90: Regenerate.\n+\t* generated/_conjg_c17.F90: Regenerate.\n+\t* generated/_cos_c17.F90: Regenerate.\n+\t* generated/_cos_r17.F90: Regenerate.\n+\t* generated/_cosh_r17.F90: Regenerate.\n+\t* generated/_dim_r17.F90: Regenerate.\n+\t* generated/_exp_c17.F90: Regenerate.\n+\t* generated/_exp_r17.F90: Regenerate.\n+\t* generated/_log10_r17.F90: Regenerate.\n+\t* generated/_log_c17.F90: Regenerate.\n+\t* generated/_log_r17.F90: Regenerate.\n+\t* generated/_mod_r17.F90: Regenerate.\n+\t* generated/_sign_r17.F90: Regenerate.\n+\t* generated/_sin_c17.F90: Regenerate.\n+\t* generated/_sin_r17.F90: Regenerate.\n+\t* generated/_sinh_r17.F90: Regenerate.\n+\t* generated/_sqrt_c17.F90: Regenerate.\n+\t* generated/_sqrt_r17.F90: Regenerate.\n+\t* generated/_tan_r17.F90: Regenerate.\n+\t* generated/_tanh_r17.F90: Regenerate.\n+\t* kinds-override.h: Adjust to trunk.\n+\tChange condition to single line so it can be grepped.\n+\t* m4/specific.m4: Make sure that real=kind16 is used\n+\tfor _r17.F90 and _c17.F90 files.\n+\t* m4/specific2.m4: Likewise.\n+\n+2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgfortran.h (internal_pack_r17, internal_pack_c17,\n+\tinternal_unpack_r17, internal_unpack_c17, pack_r17, pack_c17,\n+\tunpack0_r17, unpack0_c17, unpack1_r17, unpack1_c17, spread_r17,\n+\tspread_c17, spread_scalar_r17, spread_scalar_c17, cshift0_r17,\n+\tcshift0_c17, cshift1_4_r17, cshift1_8_r17, cshift1_16_r17,\n+\tcshift1_4_c17, cshift1_8_c17, cshift1_16_c17): Declare.\n+\t* gfortran.map (GFORTRAN_12): Export *_r17 and *_c17.\n+\n+2022-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* acinclude.m4 (LIBGFOR_CHECK_MATH_IEEE128): New macro.\n+\t* configure.ac: Use it.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\n+2022-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* Makefile.am: Fix pattern substitution for _r17 and _c17.\n+\t* Makefile.in: Regenerate.\n+\n+2022-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* Makefile.am: Add _r17 and _c17 files.  Build them\n+\twith -mabi=ieeelongdouble on POWER.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: New flag HAVE_REAL_17.\n+\t* kinds-override.h: (HAVE_GFC_REAL_17): New macro.\n+\t(HAVE_GFC_COMPLEX_17): New macro.\n+\t(GFC_REAL_17_HUGE): New macro.\n+\t(GFC_REAL_17_LITERAL_SUFFIX): New macro.\n+\t(GFC_REAL_17_LITERAL): New macro.\n+\t(GFC_REAL_17_DIGITS): New macro.\n+\t(GFC_REAL_17_RADIX): New macro.\n+\t* libgfortran.h\t(POWER_IEEE128): New macro.\n+\t(gfc_array_r17): Typedef.\n+\t(GFC_DTYPE_REAL_17): New macro.\n+\t(GFC_DTYPE_COMPLEX_17): New macro.\n+\t(__acoshieee128): Prototype.\n+\t(__acosieee128): Prototype.\n+\t(__asinhieee128): Prototype.\n+\t(__asinieee128): Prototype.\n+\t(__atan2ieee128): Prototype.\n+\t(__atanhieee128): Prototype.\n+\t(__atanieee128): Prototype.\n+\t(__coshieee128): Prototype.\n+\t(__cosieee128): Prototype.\n+\t(__erfieee128): Prototype.\n+\t(__expieee128): Prototype.\n+\t(__fabsieee128): Prototype.\n+\t(__jnieee128): Prototype.\n+\t(__log10ieee128): Prototype.\n+\t(__logieee128): Prototype.\n+\t(__powieee128): Prototype.\n+\t(__sinhieee128): Prototype.\n+\t(__sinieee128): Prototype.\n+\t(__sqrtieee128): Prototype.\n+\t(__tanhieee128): Prototype.\n+\t(__tanieee128): Prototype.\n+\t(__ynieee128): Prototype.\n+\t* m4/mtype.m4: Make a bit more readable. Add KIND=17.\n+\t* generated/_abs_c17.F90: New file.\n+\t* generated/_abs_r17.F90: New file.\n+\t* generated/_acos_r17.F90: New file.\n+\t* generated/_acosh_r17.F90: New file.\n+\t* generated/_aimag_c17.F90: New file.\n+\t* generated/_aint_r17.F90: New file.\n+\t* generated/_anint_r17.F90: New file.\n+\t* generated/_asin_r17.F90: New file.\n+\t* generated/_asinh_r17.F90: New file.\n+\t* generated/_atan2_r17.F90: New file.\n+\t* generated/_atan_r17.F90: New file.\n+\t* generated/_atanh_r17.F90: New file.\n+\t* generated/_conjg_c17.F90: New file.\n+\t* generated/_cos_c17.F90: New file.\n+\t* generated/_cos_r17.F90: New file.\n+\t* generated/_cosh_r17.F90: New file.\n+\t* generated/_dim_r17.F90: New file.\n+\t* generated/_exp_c17.F90: New file.\n+\t* generated/_exp_r17.F90: New file.\n+\t* generated/_log10_r17.F90: New file.\n+\t* generated/_log_c17.F90: New file.\n+\t* generated/_log_r17.F90: New file.\n+\t* generated/_mod_r17.F90: New file.\n+\t* generated/_sign_r17.F90: New file.\n+\t* generated/_sin_c17.F90: New file.\n+\t* generated/_sin_r17.F90: New file.\n+\t* generated/_sinh_r17.F90: New file.\n+\t* generated/_sqrt_c17.F90: New file.\n+\t* generated/_sqrt_r17.F90: New file.\n+\t* generated/_tan_r17.F90: New file.\n+\t* generated/_tanh_r17.F90: New file.\n+\t* generated/bessel_r17.c: New file.\n+\t* generated/cshift0_c17.c: New file.\n+\t* generated/cshift0_r17.c: New file.\n+\t* generated/cshift1_16_c17.c: New file.\n+\t* generated/cshift1_16_r17.c: New file.\n+\t* generated/cshift1_4_c17.c: New file.\n+\t* generated/cshift1_4_r17.c: New file.\n+\t* generated/cshift1_8_c17.c: New file.\n+\t* generated/cshift1_8_r17.c: New file.\n+\t* generated/findloc0_c17.c: New file.\n+\t* generated/findloc0_r17.c: New file.\n+\t* generated/findloc1_c17.c: New file.\n+\t* generated/findloc1_r17.c: New file.\n+\t* generated/in_pack_c17.c: New file.\n+\t* generated/in_pack_r17.c: New file.\n+\t* generated/in_unpack_c17.c: New file.\n+\t* generated/in_unpack_r17.c: New file.\n+\t* generated/matmul_c17.c: New file.\n+\t* generated/matmul_r17.c: New file.\n+\t* generated/matmulavx128_c17.c: New file.\n+\t* generated/matmulavx128_r17.c: New file.\n+\t* generated/maxloc0_16_r17.c: New file.\n+\t* generated/maxloc0_4_r17.c: New file.\n+\t* generated/maxloc0_8_r17.c: New file.\n+\t* generated/maxloc1_16_r17.c: New file.\n+\t* generated/maxloc1_4_r17.c: New file.\n+\t* generated/maxloc1_8_r17.c: New file.\n+\t* generated/maxval_r17.c: New file.\n+\t* generated/minloc0_16_r17.c: New file.\n+\t* generated/minloc0_4_r17.c: New file.\n+\t* generated/minloc0_8_r17.c: New file.\n+\t* generated/minloc1_16_r17.c: New file.\n+\t* generated/minloc1_4_r17.c: New file.\n+\t* generated/minloc1_8_r17.c: New file.\n+\t* generated/minval_r17.c: New file.\n+\t* generated/norm2_r17.c: New file.\n+\t* generated/pack_c17.c: New file.\n+\t* generated/pack_r17.c: New file.\n+\t* generated/pow_c17_i16.c: New file.\n+\t* generated/pow_c17_i4.c: New file.\n+\t* generated/pow_c17_i8.c: New file.\n+\t* generated/pow_r17_i16.c: New file.\n+\t* generated/pow_r17_i4.c: New file.\n+\t* generated/pow_r17_i8.c: New file.\n+\t* generated/product_c17.c: New file.\n+\t* generated/product_r17.c: New file.\n+\t* generated/reshape_c17.c: New file.\n+\t* generated/reshape_r17.c: New file.\n+\t* generated/spread_c17.c: New file.\n+\t* generated/spread_r17.c: New file.\n+\t* generated/sum_c17.c: New file.\n+\t* generated/sum_r17.c: New file.\n+\t* generated/unpack_c17.c: New file.\n+\t* generated/unpack_r17.c: New file.\n+\t* m4/ifunc.m4: New file.\n+\n+2022-01-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/82207\n+\t* Makefile.am: Pass -fsignaling-nans for IEEE files.\n+\t* Makefile.in: Regenerate.\n+\t* ieee/ieee_helper.c: Use issignaling macro to recognized\n+\tsignaling NaNs.\n+\n+\f\n+Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+Copying and distribution of this file, with or without modification,\n+are permitted in any medium without royalty provided the copyright\n+notice and this notice are preserved."}, {"sha": "97887c90552b40c034f463eff250248365499ae2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 1, "deletions": 7206, "changes": 7207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d64f877906111645af0217d4d54993a7b2ecbd2e"}, {"sha": "77d709a9ce4d7f824be652d4e97a4d6e4f50c76e", "filename": "libstdc++-v3/ChangeLog-2022", "status": "added", "additions": 7211, "deletions": 0, "changes": 7211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64f877906111645af0217d4d54993a7b2ecbd2e/libstdc%2B%2B-v3%2FChangeLog-2022", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64f877906111645af0217d4d54993a7b2ecbd2e/libstdc%2B%2B-v3%2FChangeLog-2022", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog-2022?ref=d64f877906111645af0217d4d54993a7b2ecbd2e"}]}