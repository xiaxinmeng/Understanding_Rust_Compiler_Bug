{"sha": "b1a73b489462df2a1edaf39ec10dc03e0963d516", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhNzNiNDg5NDYyZGYyYTFlZGFmMzllYzEwZGMwM2UwOTYzZDUxNg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-11-27T17:50:55Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-11-27T17:50:55Z"}, "message": "Fix 'libgomp.fortran/target-print-1.f90', 'libgomp.oacc-fortran/print-1.f90' for offload target nvptx\n\n\tlibgomp/\n\t* testsuite/lib/libgomp.exp\n\t(check_effective_target_offload_target_nvptx): New proc.\n\t* testsuite/libgomp.fortran/target-print-1.f90: Use it with\n\t'dg-skip-if'.\n\t* testsuite/libgomp.oacc-fortran/print-1.f90: Likewise.\n\t* testsuite/libgomp.fortran/target-print-1-nvptx.f90: New file.\n\t* testsuite/libgomp.oacc-fortran/print-1-nvptx.f90: Likewise.\n\nFrom-SVN: r278779", "tree": {"sha": "e665beb39196b4f680f1082422acdb88f5295ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e665beb39196b4f680f1082422acdb88f5295ad3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1a73b489462df2a1edaf39ec10dc03e0963d516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a73b489462df2a1edaf39ec10dc03e0963d516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a73b489462df2a1edaf39ec10dc03e0963d516", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a73b489462df2a1edaf39ec10dc03e0963d516/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa21363375a2ff71ded325e6debe890e561a9743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa21363375a2ff71ded325e6debe890e561a9743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa21363375a2ff71ded325e6debe890e561a9743"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "d8d76ba3ce801c19dd39b3dc1203ebb609f32e67", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a73b489462df2a1edaf39ec10dc03e0963d516/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a73b489462df2a1edaf39ec10dc03e0963d516/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b1a73b489462df2a1edaf39ec10dc03e0963d516", "patch": "@@ -1,3 +1,13 @@\n+2019-11-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/lib/libgomp.exp\n+\t(check_effective_target_offload_target_nvptx): New proc.\n+\t* testsuite/libgomp.fortran/target-print-1.f90: Use it with\n+\t'dg-skip-if'.\n+\t* testsuite/libgomp.oacc-fortran/print-1.f90: Likewise.\n+\t* testsuite/libgomp.fortran/target-print-1-nvptx.f90: New file.\n+\t* testsuite/libgomp.oacc-fortran/print-1-nvptx.f90: Likewise.\n+\n 2019-11-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* testsuite/libgomp.c/pr39591-1.c: Rename err to e."}, {"sha": "06e3186d966b853de4c52164743928d9712ea3f3", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a73b489462df2a1edaf39ec10dc03e0963d516/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a73b489462df2a1edaf39ec10dc03e0963d516/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=b1a73b489462df2a1edaf39ec10dc03e0963d516", "patch": "@@ -336,6 +336,27 @@ proc offload_target_to_openacc_device_type { offload_target } {\n     }\n }\n \n+# Return 1 if compiling for offload target nvptx.\n+proc check_effective_target_offload_target_nvptx { } {\n+    # Consider all actual options, including the flags passed to\n+    # 'gcc-dg-runtest', or 'gfortran-dg-runtest' (see the 'libgomp.*/*.exp'\n+    # files; in particular, '-foffload', 'libgomp.oacc-*/*.exp'), which don't\n+    # get passed on to 'check_effective_target_*' functions.  (Not caching the\n+    # result due to that.)\n+    set options [current_compiler_flags]\n+    # Instead of inspecting command-line options, look what the compiler driver\n+    # decides.  This is somewhat modelled after\n+    # 'gcc/testsuite/lib/target-supports.exp:check_configured_with'.\n+    set gcc_output [libgomp_target_compile \"-v $options\" \"\" \"none\" \"\"]\n+    if [regexp \"(?n)^OFFLOAD_TARGET_NAMES=(.*)\" $gcc_output dummy offload_targets] {\n+\tverbose \"compiling for offload targets: $offload_targets\"\n+\treturn [string match \"*:nvptx*:*\" \":$offload_targets:\"]\n+    }\n+\n+    verbose \"not compiling for any offload targets\"\n+    return 0\n+}\n+\n # Return 1 if offload device is available.\n proc check_effective_target_offload_device { } {\n     return [check_runtime_nocache offload_device_available_ {"}, {"sha": "a89c9c3348457d096d5e1237266c047a09ecb4f8", "filename": "libgomp/testsuite/libgomp.fortran/target-print-1-nvptx.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a73b489462df2a1edaf39ec10dc03e0963d516/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-print-1-nvptx.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a73b489462df2a1edaf39ec10dc03e0963d516/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-print-1-nvptx.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-print-1-nvptx.f90?ref=b1a73b489462df2a1edaf39ec10dc03e0963d516", "patch": "@@ -0,0 +1,11 @@\n+! Ensure that write on the offload device works, nvptx offloading variant.\n+\n+! This doesn't compile: for nvptx offloading we're using a minimal libgfortran\n+! configuration.\n+! { dg-do link } ! ..., but still apply 'dg-do run' options.\n+! { dg-xfail-if \"minimal libgfortran\" { offload_target_nvptx } }\n+\n+! Skip duplicated testing.\n+! { dg-skip-if \"separate file\" { ! offload_target_nvptx } }\n+\n+include 'target-print-1.f90'"}, {"sha": "327bb22cb6d976653bd30b1476a9563fbc25f578", "filename": "libgomp/testsuite/libgomp.fortran/target-print-1.f90", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a73b489462df2a1edaf39ec10dc03e0963d516/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-print-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a73b489462df2a1edaf39ec10dc03e0963d516/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-print-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-print-1.f90?ref=b1a73b489462df2a1edaf39ec10dc03e0963d516", "patch": "@@ -1,8 +1,10 @@\n-! Ensure that printf on the offload device works.\n+! Ensure that write on the offload device works.\n \n ! { dg-do run }\n ! { dg-output \"The answer is 42(\\n|\\r\\n|\\r)+\" }\n-! { dg-xfail-if \"no write for nvidia\" { openacc_nvidia_accel_selected } }                                                                                                                                                                \n+\n+! Separate file 'target-print-1-nvptx.f90' for nvptx offloading.\n+! { dg-skip-if \"separate file\" { offload_target_nvptx } }\n \n program main\n   implicit none"}, {"sha": "866c8654355d52cd41babb4d749420f112dcf632", "filename": "libgomp/testsuite/libgomp.oacc-fortran/print-1-nvptx.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a73b489462df2a1edaf39ec10dc03e0963d516/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprint-1-nvptx.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a73b489462df2a1edaf39ec10dc03e0963d516/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprint-1-nvptx.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprint-1-nvptx.f90?ref=b1a73b489462df2a1edaf39ec10dc03e0963d516", "patch": "@@ -0,0 +1,11 @@\n+! Ensure that write on the offload device works, nvptx offloading variant.\n+\n+! This doesn't compile: for nvptx offloading we're using a minimal libgfortran\n+! configuration.\n+! { dg-do link } ! ..., but still apply 'dg-do run' options.\n+! { dg-xfail-if \"minimal libgfortran\" { offload_target_nvptx } }\n+\n+! Skip duplicated testing.\n+! { dg-skip-if \"separate file\" { ! offload_target_nvptx } }\n+\n+include 'print-1.f90'"}, {"sha": "7b7f73741fe1e75a719529ed4b2c763496c26270", "filename": "libgomp/testsuite/libgomp.oacc-fortran/print-1.f90", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a73b489462df2a1edaf39ec10dc03e0963d516/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprint-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a73b489462df2a1edaf39ec10dc03e0963d516/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprint-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprint-1.f90?ref=b1a73b489462df2a1edaf39ec10dc03e0963d516", "patch": "@@ -1,8 +1,10 @@\n-! Ensure that printf on the offload device works.\n+! Ensure that write on the offload device works.\n \n ! { dg-do run }\n ! { dg-output \"The answer is 42(\\n|\\r\\n|\\r)+\" }\n-! { dg-xfail-if \"no write for nvidia\" { openacc_nvidia_accel_selected } }                                                                                                                                                                \n+\n+! Separate file 'print-1-nvptx.f90' for nvptx offloading.\n+! { dg-skip-if \"separate file\" { offload_target_nvptx } }\n \n program main\n   implicit none"}]}