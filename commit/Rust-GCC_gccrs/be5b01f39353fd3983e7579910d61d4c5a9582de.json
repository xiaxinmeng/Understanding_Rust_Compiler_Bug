{"sha": "be5b01f39353fd3983e7579910d61d4c5a9582de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU1YjAxZjM5MzUzZmQzOTgzZTc1Nzk5MTBkNjFkNGM1YTk1ODJkZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-25T19:48:07Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-25T19:48:07Z"}, "message": "sbitmap.c (sbitmap_verify_popcount, [...]): Constify.\n\n\t* sbitmap.c (sbitmap_verify_popcount, sbitmap_alloc_with_popcount,\n\tsbitmap_copy, sbitmap_copy_n, sbitmap_equal, sbitmap_empty_p,\n\tsbitmap_union_of_diff_cg, sbitmap_union_of_diff, sbitmap_not,\n\tsbitmap_difference, sbitmap_any_common_bits, sbitmap_a_and_b_cg,\n\tsbitmap_a_and_b, sbitmap_a_xor_b_cg, sbitmap_a_xor_b,\n\tsbitmap_a_or_b_cg, sbitmap_a_or_b, sbitmap_a_subset_b_p,\n\tsbitmap_a_or_b_and_c_cg, sbitmap_a_or_b_and_c,\n\tsbitmap_a_and_b_or_c_cg, sbitmap_a_and_b_or_c,\n\tsbitmap_first_set_bit, sbitmap_last_set_bit, dump_sbitmap,\n\tdump_sbitmap_file, debug_sbitmap, popcount_table,\n\tsbitmap_popcount): Constify.\n\t* sbitmap.h (const_sbitmap, const_sbitmap_ptr): New.\n\t(sbitmap_iterator, sbitmap_iter_init, dump_sbitmap,\n\tdump_sbitmap_file, sbitmap_copy, sbitmap_copy_n, sbitmap_equal,\n\tsbitmap_empty_p, sbitmap_union_of_diff, sbitmap_union_of_diff_cg,\n\tsbitmap_difference, sbitmap_not, sbitmap_a_or_b_and_c,\n\tsbitmap_a_or_b_and_c_cg, sbitmap_a_and_b_or_c,\n\tsbitmap_a_and_b_or_c_cg, sbitmap_any_common_bits, sbitmap_a_and_b,\n\tsbitmap_a_and_b_cg, sbitmap_a_or_b, sbitmap_a_or_b_cg,\n\tsbitmap_a_xor_b, sbitmap_a_xor_b_cg, sbitmap_a_subset_b_p,\n\tsbitmap_first_set_bit, sbitmap_last_set_bit, debug_sbitmap,\n\tsbitmap_popcount, sbitmap_verify_popcount): Constify.\n\nFrom-SVN: r126929", "tree": {"sha": "3a25c9c257598ad51abd95f030198b4499b7cdf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a25c9c257598ad51abd95f030198b4499b7cdf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be5b01f39353fd3983e7579910d61d4c5a9582de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5b01f39353fd3983e7579910d61d4c5a9582de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be5b01f39353fd3983e7579910d61d4c5a9582de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5b01f39353fd3983e7579910d61d4c5a9582de/comments", "author": null, "committer": null, "parents": [{"sha": "e326eeb5e8a6bc39b3a411685873f0966989bed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e326eeb5e8a6bc39b3a411685873f0966989bed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e326eeb5e8a6bc39b3a411685873f0966989bed3"}], "stats": {"total": 241, "additions": 133, "deletions": 108}, "files": [{"sha": "1ae4b363c7ac8948d56ee6c22daa9c51dadaf9e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5b01f39353fd3983e7579910d61d4c5a9582de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5b01f39353fd3983e7579910d61d4c5a9582de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be5b01f39353fd3983e7579910d61d4c5a9582de", "patch": "@@ -1,3 +1,28 @@\n+2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* sbitmap.c (sbitmap_verify_popcount, sbitmap_alloc_with_popcount,\n+\tsbitmap_copy, sbitmap_copy_n, sbitmap_equal, sbitmap_empty_p,\n+\tsbitmap_union_of_diff_cg, sbitmap_union_of_diff, sbitmap_not,\n+\tsbitmap_difference, sbitmap_any_common_bits, sbitmap_a_and_b_cg,\n+\tsbitmap_a_and_b, sbitmap_a_xor_b_cg, sbitmap_a_xor_b,\n+\tsbitmap_a_or_b_cg, sbitmap_a_or_b, sbitmap_a_subset_b_p,\n+\tsbitmap_a_or_b_and_c_cg, sbitmap_a_or_b_and_c,\n+\tsbitmap_a_and_b_or_c_cg, sbitmap_a_and_b_or_c,\n+\tsbitmap_first_set_bit, sbitmap_last_set_bit, dump_sbitmap,\n+\tdump_sbitmap_file, debug_sbitmap, popcount_table,\n+\tsbitmap_popcount): Constify.\n+\t* sbitmap.h (const_sbitmap, const_sbitmap_ptr): New.\n+\t(sbitmap_iterator, sbitmap_iter_init, dump_sbitmap,\n+\tdump_sbitmap_file, sbitmap_copy, sbitmap_copy_n, sbitmap_equal,\n+\tsbitmap_empty_p, sbitmap_union_of_diff, sbitmap_union_of_diff_cg,\n+\tsbitmap_difference, sbitmap_not, sbitmap_a_or_b_and_c,\n+\tsbitmap_a_or_b_and_c_cg, sbitmap_a_and_b_or_c,\n+\tsbitmap_a_and_b_or_c_cg, sbitmap_any_common_bits, sbitmap_a_and_b,\n+\tsbitmap_a_and_b_cg, sbitmap_a_or_b, sbitmap_a_or_b_cg,\n+\tsbitmap_a_xor_b, sbitmap_a_xor_b_cg, sbitmap_a_subset_b_p,\n+\tsbitmap_first_set_bit, sbitmap_last_set_bit, debug_sbitmap,\n+\tsbitmap_popcount, sbitmap_verify_popcount): Constify.\n+\n 2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* bitmap.c (hash_descriptor, eq_descriptor, bitmap_element_zerop,"}, {"sha": "acc40a1f87f35010d0e457c7e84bd95d224e8b13", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 76, "deletions": 78, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5b01f39353fd3983e7579910d61d4c5a9582de/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5b01f39353fd3983e7579910d61d4c5a9582de/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=be5b01f39353fd3983e7579910d61d4c5a9582de", "patch": "@@ -52,7 +52,7 @@ static unsigned long sbitmap_elt_popcount (SBITMAP_ELT_TYPE);\n    if there is a cached value. */\n \n void\n-sbitmap_verify_popcount (sbitmap a)\n+sbitmap_verify_popcount (const_sbitmap a)\n {\n   unsigned ix;\n   unsigned int lastword;\n@@ -92,9 +92,7 @@ sbitmap_alloc (unsigned int n_elms)\n sbitmap\n sbitmap_alloc_with_popcount (unsigned int n_elms)\n {\n-  sbitmap bmap;\n-  \n-  bmap = sbitmap_alloc (n_elms);  \n+  sbitmap const bmap = sbitmap_alloc (n_elms);  \n   bmap->popcount = xmalloc (bmap->size * sizeof (unsigned char));\n   return bmap;\n }\n@@ -239,7 +237,7 @@ sbitmap_vector_alloc (unsigned int n_vecs, unsigned int n_elms)\n /* Copy sbitmap SRC to DST.  */\n \n void\n-sbitmap_copy (sbitmap dst, sbitmap src)\n+sbitmap_copy (sbitmap dst, const_sbitmap src)\n {\n   memcpy (dst->elms, src->elms, sizeof (SBITMAP_ELT_TYPE) * dst->size);\n   if (dst->popcount)\n@@ -249,7 +247,7 @@ sbitmap_copy (sbitmap dst, sbitmap src)\n /* Copy the first N elements of sbitmap SRC to DST.  */\n \n void\n-sbitmap_copy_n (sbitmap dst, sbitmap src, unsigned int n)\n+sbitmap_copy_n (sbitmap dst, const_sbitmap src, unsigned int n)\n {\n   memcpy (dst->elms, src->elms, sizeof (SBITMAP_ELT_TYPE) * n);  \n   if (dst->popcount)\n@@ -258,15 +256,15 @@ sbitmap_copy_n (sbitmap dst, sbitmap src, unsigned int n)\n \n /* Determine if a == b.  */\n int\n-sbitmap_equal (sbitmap a, sbitmap b)\n+sbitmap_equal (const_sbitmap a, const_sbitmap b)\n {\n   return !memcmp (a->elms, b->elms, sizeof (SBITMAP_ELT_TYPE) * a->size);\n }\n \n /* Return true if the bitmap is empty.  */\n \n bool\n-sbitmap_empty_p (sbitmap bmap)\n+sbitmap_empty_p (const_sbitmap bmap)\n {\n   unsigned int i;\n   for (i=0; i<bmap->size; i++)\n@@ -335,20 +333,20 @@ sbitmap_vector_ones (sbitmap *bmap, unsigned int n_vecs)\n    Returns true if any change is made.  */\n \n bool\n-sbitmap_union_of_diff_cg (sbitmap dst, sbitmap a, sbitmap b, sbitmap c)\n+sbitmap_union_of_diff_cg (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitmap c)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n-  sbitmap_ptr cp = c->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr cp = c->elms;\n   SBITMAP_ELT_TYPE changed = 0;\n \n   gcc_assert (!dst->popcount);\n   \n   for (i = 0; i < n; i++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap++ | (*bp++ & ~*cp++);\n+      const SBITMAP_ELT_TYPE tmp = *ap++ | (*bp++ & ~*cp++);\n       changed |= *dstp ^ tmp;\n       *dstp++ = tmp;\n     }\n@@ -357,13 +355,13 @@ sbitmap_union_of_diff_cg (sbitmap dst, sbitmap a, sbitmap b, sbitmap c)\n }\n \n void\n-sbitmap_union_of_diff (sbitmap dst, sbitmap a, sbitmap b, sbitmap c)\n+sbitmap_union_of_diff (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitmap c)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n-  sbitmap_ptr cp = c->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr cp = c->elms;\n \n   gcc_assert (!dst->popcount && !a->popcount\n \t      && !b->popcount && !c->popcount);\n@@ -375,11 +373,11 @@ sbitmap_union_of_diff (sbitmap dst, sbitmap a, sbitmap b, sbitmap c)\n /* Set bitmap DST to the bitwise negation of the bitmap SRC.  */\n \n void\n-sbitmap_not (sbitmap dst, sbitmap src)\n+sbitmap_not (sbitmap dst, const_sbitmap src)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr srcp = src->elms;\n+  const_sbitmap_ptr srcp = src->elms;\n   unsigned int last_bit;\n \n   gcc_assert (!dst->popcount);  \n@@ -398,13 +396,13 @@ sbitmap_not (sbitmap dst, sbitmap src)\n    in A and the bits in B. i.e. dst = a & (~b).  */\n \n void\n-sbitmap_difference (sbitmap dst, sbitmap a, sbitmap b)\n+sbitmap_difference (sbitmap dst, const_sbitmap a, const_sbitmap b)\n {\n   unsigned int i, dst_size = dst->size;\n   unsigned int min_size = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n \n   gcc_assert (!dst->popcount);\n \n@@ -427,10 +425,10 @@ sbitmap_difference (sbitmap dst, sbitmap a, sbitmap b)\n    Return false otherwise.  */\n \n bool\n-sbitmap_any_common_bits (sbitmap a, sbitmap b)\n+sbitmap_any_common_bits (const_sbitmap a, const_sbitmap b)\n {\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n   unsigned int i, n;\n \n   n = MIN (a->size, b->size);\n@@ -445,19 +443,19 @@ sbitmap_any_common_bits (sbitmap a, sbitmap b)\n    Return nonzero if any change is made.  */\n \n bool\n-sbitmap_a_and_b_cg (sbitmap dst, sbitmap a, sbitmap b)\n+sbitmap_a_and_b_cg (sbitmap dst, const_sbitmap a, const_sbitmap b)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n   SBITMAP_ELT_TYPE changed = 0;\n \n   gcc_assert (!dst->popcount);\n \n   for (i = 0; i < n; i++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap++ & *bp++;\n+      const SBITMAP_ELT_TYPE tmp = *ap++ & *bp++;\n       changed |= *dstp ^ tmp;\n       *dstp++ = tmp;\n     }\n@@ -466,18 +464,18 @@ sbitmap_a_and_b_cg (sbitmap dst, sbitmap a, sbitmap b)\n }\n \n void\n-sbitmap_a_and_b (sbitmap dst, sbitmap a, sbitmap b)\n+sbitmap_a_and_b (sbitmap dst, const_sbitmap a, const_sbitmap b)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n   bool has_popcount = dst->popcount != NULL;\n   unsigned char *popcountp = dst->popcount;\n \n   for (i = 0; i < n; i++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap++ & *bp++;\n+      const SBITMAP_ELT_TYPE tmp = *ap++ & *bp++;\n       if (has_popcount)\n \t{\n \t  bool wordchanged = (*dstp ^ tmp) != 0;\n@@ -497,19 +495,19 @@ sbitmap_a_and_b (sbitmap dst, sbitmap a, sbitmap b)\n    Return nonzero if any change is made.  */\n \n bool\n-sbitmap_a_xor_b_cg (sbitmap dst, sbitmap a, sbitmap b)\n+sbitmap_a_xor_b_cg (sbitmap dst, const_sbitmap a, const_sbitmap b)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n   SBITMAP_ELT_TYPE changed = 0;\n   \n   gcc_assert (!dst->popcount);\n \n   for (i = 0; i < n; i++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap++ ^ *bp++;\n+      const SBITMAP_ELT_TYPE tmp = *ap++ ^ *bp++;\n       changed |= *dstp ^ tmp;\n       *dstp++ = tmp;\n     }\n@@ -518,18 +516,18 @@ sbitmap_a_xor_b_cg (sbitmap dst, sbitmap a, sbitmap b)\n }\n \n void\n-sbitmap_a_xor_b (sbitmap dst, sbitmap a, sbitmap b)\n+sbitmap_a_xor_b (sbitmap dst, const_sbitmap a, const_sbitmap b)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n   bool has_popcount = dst->popcount != NULL;\n   unsigned char *popcountp = dst->popcount;\n \n   for (i = 0; i < n; i++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap++ ^ *bp++;\n+      const SBITMAP_ELT_TYPE tmp = *ap++ ^ *bp++;\n       if (has_popcount)\n \t{\n \t  bool wordchanged = (*dstp ^ tmp) != 0;\n@@ -549,19 +547,19 @@ sbitmap_a_xor_b (sbitmap dst, sbitmap a, sbitmap b)\n    Return nonzero if any change is made.  */\n \n bool\n-sbitmap_a_or_b_cg (sbitmap dst, sbitmap a, sbitmap b)\n+sbitmap_a_or_b_cg (sbitmap dst, const_sbitmap a, const_sbitmap b)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n   SBITMAP_ELT_TYPE changed = 0;\n \n   gcc_assert (!dst->popcount);\n \n   for (i = 0; i < n; i++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap++ | *bp++;\n+      const SBITMAP_ELT_TYPE tmp = *ap++ | *bp++;\n       changed |= *dstp ^ tmp;\n       *dstp++ = tmp;\n     }\n@@ -570,18 +568,18 @@ sbitmap_a_or_b_cg (sbitmap dst, sbitmap a, sbitmap b)\n }\n \n void\n-sbitmap_a_or_b (sbitmap dst, sbitmap a, sbitmap b)\n+sbitmap_a_or_b (sbitmap dst, const_sbitmap a, const_sbitmap b)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n   bool has_popcount = dst->popcount != NULL;\n   unsigned char *popcountp = dst->popcount;\n \n   for (i = 0; i < n; i++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap++ | *bp++;\n+      const SBITMAP_ELT_TYPE tmp = *ap++ | *bp++;\n       if (has_popcount)\n \t{\n \t  bool wordchanged = (*dstp ^ tmp) != 0;\n@@ -600,10 +598,10 @@ sbitmap_a_or_b (sbitmap dst, sbitmap a, sbitmap b)\n /* Return nonzero if A is a subset of B.  */\n \n bool\n-sbitmap_a_subset_b_p (sbitmap a, sbitmap b)\n+sbitmap_a_subset_b_p (const_sbitmap a, const_sbitmap b)\n {\n   unsigned int i, n = a->size;\n-  sbitmap_ptr ap, bp;\n+  const_sbitmap_ptr ap, bp;\n \n   for (ap = a->elms, bp = b->elms, i = 0; i < n; i++, ap++, bp++)\n     if ((*ap | *bp) != *bp)\n@@ -616,20 +614,20 @@ sbitmap_a_subset_b_p (sbitmap a, sbitmap b)\n    Return nonzero if any change is made.  */\n \n bool\n-sbitmap_a_or_b_and_c_cg (sbitmap dst, sbitmap a, sbitmap b, sbitmap c)\n+sbitmap_a_or_b_and_c_cg (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitmap c)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n-  sbitmap_ptr cp = c->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr cp = c->elms;\n   SBITMAP_ELT_TYPE changed = 0;\n \n   gcc_assert (!dst->popcount);\n \n   for (i = 0; i < n; i++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap++ | (*bp++ & *cp++);\n+      const SBITMAP_ELT_TYPE tmp = *ap++ | (*bp++ & *cp++);\n       changed |= *dstp ^ tmp;\n       *dstp++ = tmp;\n     }\n@@ -638,13 +636,13 @@ sbitmap_a_or_b_and_c_cg (sbitmap dst, sbitmap a, sbitmap b, sbitmap c)\n }\n \n void\n-sbitmap_a_or_b_and_c (sbitmap dst, sbitmap a, sbitmap b, sbitmap c)\n+sbitmap_a_or_b_and_c (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitmap c)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n-  sbitmap_ptr cp = c->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr cp = c->elms;\n \n   gcc_assert (!dst->popcount);\n \n@@ -656,20 +654,20 @@ sbitmap_a_or_b_and_c (sbitmap dst, sbitmap a, sbitmap b, sbitmap c)\n    Return nonzero if any change is made.  */\n \n bool\n-sbitmap_a_and_b_or_c_cg (sbitmap dst, sbitmap a, sbitmap b, sbitmap c)\n+sbitmap_a_and_b_or_c_cg (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitmap c)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n-  sbitmap_ptr cp = c->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr cp = c->elms;\n   SBITMAP_ELT_TYPE changed = 0;\n \n   gcc_assert (!dst->popcount);\n \n   for (i = 0; i < n; i++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap++ & (*bp++ | *cp++);\n+      const SBITMAP_ELT_TYPE tmp = *ap++ & (*bp++ | *cp++);\n       changed |= *dstp ^ tmp;\n       *dstp++ = tmp;\n     }\n@@ -678,13 +676,13 @@ sbitmap_a_and_b_or_c_cg (sbitmap dst, sbitmap a, sbitmap b, sbitmap c)\n }\n \n void\n-sbitmap_a_and_b_or_c (sbitmap dst, sbitmap a, sbitmap b, sbitmap c)\n+sbitmap_a_and_b_or_c (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitmap c)\n {\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n-  sbitmap_ptr ap = a->elms;\n-  sbitmap_ptr bp = b->elms;\n-  sbitmap_ptr cp = c->elms;\n+  const_sbitmap_ptr ap = a->elms;\n+  const_sbitmap_ptr bp = b->elms;\n+  const_sbitmap_ptr cp = c->elms;\n \n   for (i = 0; i < n; i++)\n     *dstp++ = *ap++ & (*bp++ | *cp++);\n@@ -863,7 +861,7 @@ sbitmap_union_of_preds (sbitmap dst, sbitmap *src, int bb)\n /* Return number of first bit set in the bitmap, -1 if none.  */\n \n int\n-sbitmap_first_set_bit (sbitmap bmap)\n+sbitmap_first_set_bit (const_sbitmap bmap)\n {\n   unsigned int n = 0;\n   sbitmap_iterator sbi;\n@@ -876,14 +874,14 @@ sbitmap_first_set_bit (sbitmap bmap)\n /* Return number of last bit set in the bitmap, -1 if none.  */\n \n int\n-sbitmap_last_set_bit (sbitmap bmap)\n+sbitmap_last_set_bit (const_sbitmap bmap)\n {\n   int i;\n-  SBITMAP_ELT_TYPE *ptr = bmap->elms;\n+  const SBITMAP_ELT_TYPE *const ptr = bmap->elms;\n \n   for (i = bmap->size - 1; i >= 0; i--)\n     {\n-      SBITMAP_ELT_TYPE word = ptr[i];\n+      const SBITMAP_ELT_TYPE word = ptr[i];\n \n       if (word != 0)\n \t{\n@@ -906,7 +904,7 @@ sbitmap_last_set_bit (sbitmap bmap)\n }\n \n void\n-dump_sbitmap (FILE *file, sbitmap bmap)\n+dump_sbitmap (FILE *file, const_sbitmap bmap)\n {\n   unsigned int i, n, j;\n   unsigned int set_size = bmap->size;\n@@ -927,7 +925,7 @@ dump_sbitmap (FILE *file, sbitmap bmap)\n }\n \n void\n-dump_sbitmap_file (FILE *file, sbitmap bmap)\n+dump_sbitmap_file (FILE *file, const_sbitmap bmap)\n {\n   unsigned int i, pos;\n \n@@ -950,7 +948,7 @@ dump_sbitmap_file (FILE *file, sbitmap bmap)\n }\n \n void\n-debug_sbitmap (sbitmap bmap)\n+debug_sbitmap (const_sbitmap bmap)\n {\n   dump_sbitmap_file (stderr, bmap);\n }\n@@ -973,7 +971,7 @@ dump_sbitmap_vector (FILE *file, const char *title, const char *subtitle,\n \n #if GCC_VERSION < 3400\n /* Table of number of set bits in a character, indexed by value of char.  */\n-static unsigned char popcount_table[] =\n+static const unsigned char popcount_table[] =\n {\n     0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,\n     1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n@@ -1006,7 +1004,7 @@ sbitmap_elt_popcount (SBITMAP_ELT_TYPE a)\n /* Count the number of bits in SBITMAP a, up to bit MAXBIT.  */\n \n unsigned long\n-sbitmap_popcount (sbitmap a, unsigned long maxbit)\n+sbitmap_popcount (const_sbitmap a, unsigned long maxbit)\n {\n   unsigned long count = 0;\n   unsigned ix;"}, {"sha": "7c00e03902b4f535676d5bc099d8bc2c755adfaf", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5b01f39353fd3983e7579910d61d4c5a9582de/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5b01f39353fd3983e7579910d61d4c5a9582de/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=be5b01f39353fd3983e7579910d61d4c5a9582de", "patch": "@@ -44,8 +44,10 @@ typedef struct simple_bitmap_def\n   unsigned int size;\t\t/* Size in elements.  */\n   SBITMAP_ELT_TYPE elms[1];\t/* The elements.  */\n } *sbitmap;\n+typedef const struct simple_bitmap_def *const_sbitmap;\n \n typedef SBITMAP_ELT_TYPE *sbitmap_ptr;\n+typedef const SBITMAP_ELT_TYPE *const_sbitmap_ptr;\n \n /* Return the set size needed for N elements.  */\n #define SBITMAP_SET_SIZE(N) (((N) + SBITMAP_ELT_BITS - 1) / SBITMAP_ELT_BITS)\n@@ -94,7 +96,7 @@ RESET_BIT (sbitmap map,  unsigned int bitno)\n /* The iterator for sbitmap.  */\n typedef struct {\n   /* The pointer to the first word of the bitmap.  */\n-  SBITMAP_ELT_TYPE *ptr;\n+  const SBITMAP_ELT_TYPE *ptr;\n \n   /* The size of the bitmap.  */\n   unsigned int size;\n@@ -113,7 +115,7 @@ typedef struct {\n    MIN.  */\n \n static inline void\n-sbitmap_iter_init (sbitmap_iterator *i, sbitmap bmp, unsigned int min)\n+sbitmap_iter_init (sbitmap_iterator *i, const_sbitmap bmp, unsigned int min)\n {\n   i->word_num = min / (unsigned int) SBITMAP_ELT_BITS;\n   i->bit_num = min;\n@@ -206,42 +208,42 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n struct int_list;\n \n-extern void dump_sbitmap (FILE *, sbitmap);\n-extern void dump_sbitmap_file (FILE *, sbitmap);\n+extern void dump_sbitmap (FILE *, const_sbitmap);\n+extern void dump_sbitmap_file (FILE *, const_sbitmap);\n extern void dump_sbitmap_vector (FILE *, const char *, const char *, sbitmap *,\n \t\t\t\t int);\n extern sbitmap sbitmap_alloc (unsigned int);\n extern sbitmap sbitmap_alloc_with_popcount (unsigned int);\n extern sbitmap *sbitmap_vector_alloc (unsigned int, unsigned int);\n extern sbitmap sbitmap_resize (sbitmap, unsigned int, int);\n-extern void sbitmap_copy (sbitmap, sbitmap);\n-extern void sbitmap_copy_n (sbitmap, sbitmap, unsigned int);\n-extern int sbitmap_equal (sbitmap, sbitmap);\n-extern bool sbitmap_empty_p (sbitmap);\n+extern void sbitmap_copy (sbitmap, const_sbitmap);\n+extern void sbitmap_copy_n (sbitmap, const_sbitmap, unsigned int);\n+extern int sbitmap_equal (const_sbitmap, const_sbitmap);\n+extern bool sbitmap_empty_p (const_sbitmap);\n extern void sbitmap_zero (sbitmap);\n extern void sbitmap_ones (sbitmap);\n extern void sbitmap_vector_zero (sbitmap *, unsigned int);\n extern void sbitmap_vector_ones (sbitmap *, unsigned int);\n \n-extern void sbitmap_union_of_diff (sbitmap, sbitmap, sbitmap, sbitmap);\n-extern bool sbitmap_union_of_diff_cg (sbitmap, sbitmap, sbitmap, sbitmap);\n-extern void sbitmap_difference (sbitmap, sbitmap, sbitmap);\n-extern void sbitmap_not (sbitmap, sbitmap);\n-extern void sbitmap_a_or_b_and_c (sbitmap, sbitmap, sbitmap, sbitmap);\n-extern bool sbitmap_a_or_b_and_c_cg (sbitmap, sbitmap, sbitmap, sbitmap);\n-extern void sbitmap_a_and_b_or_c (sbitmap, sbitmap, sbitmap, sbitmap);\n-extern bool sbitmap_a_and_b_or_c_cg (sbitmap, sbitmap, sbitmap, sbitmap);\n-extern bool sbitmap_any_common_bits (sbitmap, sbitmap);\n-extern void sbitmap_a_and_b (sbitmap, sbitmap, sbitmap);\n-extern bool sbitmap_a_and_b_cg (sbitmap, sbitmap, sbitmap);\n-extern void sbitmap_a_or_b (sbitmap, sbitmap, sbitmap);\n-extern bool sbitmap_a_or_b_cg (sbitmap, sbitmap, sbitmap);\n-extern void sbitmap_a_xor_b (sbitmap, sbitmap, sbitmap);\n-extern bool sbitmap_a_xor_b_cg (sbitmap, sbitmap, sbitmap);\n-extern bool sbitmap_a_subset_b_p (sbitmap, sbitmap);\n-\n-extern int sbitmap_first_set_bit (sbitmap);\n-extern int sbitmap_last_set_bit (sbitmap);\n+extern void sbitmap_union_of_diff (sbitmap, const_sbitmap, const_sbitmap, const_sbitmap);\n+extern bool sbitmap_union_of_diff_cg (sbitmap, const_sbitmap, const_sbitmap, const_sbitmap);\n+extern void sbitmap_difference (sbitmap, const_sbitmap, const_sbitmap);\n+extern void sbitmap_not (sbitmap, const_sbitmap);\n+extern void sbitmap_a_or_b_and_c (sbitmap, const_sbitmap, const_sbitmap, const_sbitmap);\n+extern bool sbitmap_a_or_b_and_c_cg (sbitmap, const_sbitmap, const_sbitmap, const_sbitmap);\n+extern void sbitmap_a_and_b_or_c (sbitmap, const_sbitmap, const_sbitmap, const_sbitmap);\n+extern bool sbitmap_a_and_b_or_c_cg (sbitmap, const_sbitmap, const_sbitmap, const_sbitmap);\n+extern bool sbitmap_any_common_bits (const_sbitmap, const_sbitmap);\n+extern void sbitmap_a_and_b (sbitmap, const_sbitmap, const_sbitmap);\n+extern bool sbitmap_a_and_b_cg (sbitmap, const_sbitmap, const_sbitmap);\n+extern void sbitmap_a_or_b (sbitmap, const_sbitmap, const_sbitmap);\n+extern bool sbitmap_a_or_b_cg (sbitmap, const_sbitmap, const_sbitmap);\n+extern void sbitmap_a_xor_b (sbitmap, const_sbitmap, const_sbitmap);\n+extern bool sbitmap_a_xor_b_cg (sbitmap, const_sbitmap, const_sbitmap);\n+extern bool sbitmap_a_subset_b_p (const_sbitmap, const_sbitmap);\n+\n+extern int sbitmap_first_set_bit (const_sbitmap);\n+extern int sbitmap_last_set_bit (const_sbitmap);\n \n extern void sbitmap_intersect_of_predsucc (sbitmap, sbitmap *, int,\n \t\t\t\t\t   struct int_list **);\n@@ -261,8 +263,8 @@ extern void sbitmap_intersection_of_preds (sbitmap, sbitmap *, int);\n extern void sbitmap_union_of_succs (sbitmap, sbitmap *, int);\n extern void sbitmap_union_of_preds (sbitmap, sbitmap *, int);\n \n-extern void debug_sbitmap (sbitmap);\n+extern void debug_sbitmap (const_sbitmap);\n extern sbitmap sbitmap_realloc (sbitmap, unsigned int);\n-extern unsigned long sbitmap_popcount(sbitmap, unsigned long);\n-extern void sbitmap_verify_popcount (sbitmap);\n+extern unsigned long sbitmap_popcount(const_sbitmap, unsigned long);\n+extern void sbitmap_verify_popcount (const_sbitmap);\n #endif /* ! GCC_SBITMAP_H */"}]}