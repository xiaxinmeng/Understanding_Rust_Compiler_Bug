{"sha": "fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM4YjY3NDExODEyZjgxMTUxYjRmYTNkZmNjMGJkMzc4ZTJkNWNmOA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-03-31T03:44:12Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-03-31T03:44:12Z"}, "message": "[PR c++/85027] deal with baselink in save_expr in instantiate_type\n\nWe use SAVE_EXPRs in conditional expressions without the middle\noperand, to evaluate the first operand only once.  When the conversion\nof the first operand fails, we may call instantiate_type get a better\nerror message.  We have code to peel off the SAVE_EXPR there, but then\nwe may end up with a BASELINK, and we're past the code that deals with\nBASELINKs.  Reorder the tests so that we expose the saved expr first,\nand then deal with BASELINKs.\n\n\nfor  gcc/cp/ChangeLog\n\n\tPR c++/85027\n\t* class.c (instantiate_type): Peel off SAVE_EXPR before\n\tBASELINK.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR c++/85027\n\t* g++.dg/pr85027.C: New.\n\nFrom-SVN: r258989", "tree": {"sha": "aa2d7f2777c76281bd8764c9a564d0ce67a0b79f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa2d7f2777c76281bd8764c9a564d0ce67a0b79f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8/comments", "author": null, "committer": null, "parents": [{"sha": "ec8d8a5b5c1cf75cd62b908e2ace053ed2b05ec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8d8a5b5c1cf75cd62b908e2ace053ed2b05ec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec8d8a5b5c1cf75cd62b908e2ace053ed2b05ec2"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "d52a0dc33a3138e5e0e55021e5e9f463fc1b471b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8", "patch": "@@ -1,3 +1,9 @@\n+2018-03-31  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/85027\n+\t* class.c (instantiate_type): Peel off SAVE_EXPR before\n+\tBASELINK.\n+\n 2018-03-30  Jason Merrill  <jason@redhat.com>\n \n \t* typeck2.c (process_init_constructor_record): Use"}, {"sha": "0427d1224f74d2d3448a6c4f066bb5dbe70ab801", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8", "patch": "@@ -7971,6 +7971,11 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t complain)\n \t}\n     }\n \n+  /* If we instantiate a template, and it is a A ?: C expression\n+     with omitted B, look through the SAVE_EXPR.  */\n+  if (TREE_CODE (rhs) == SAVE_EXPR)\n+    rhs = TREE_OPERAND (rhs, 0);\n+\n   if (BASELINK_P (rhs))\n     {\n       access_path = BASELINK_ACCESS_BINFO (rhs);\n@@ -7986,11 +7991,6 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t complain)\n       return error_mark_node;\n     }\n \n-  /* If we instantiate a template, and it is a A ?: C expression\n-     with omitted B, look through the SAVE_EXPR.  */\n-  if (TREE_CODE (rhs) == SAVE_EXPR)\n-    rhs = TREE_OPERAND (rhs, 0);\n-\n   /* There are only a few kinds of expressions that may have a type\n      dependent on overload resolution.  */\n   gcc_assert (TREE_CODE (rhs) == ADDR_EXPR"}, {"sha": "d3044eac963d2830cbfeb9fa4793dd8cb2a5202e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8", "patch": "@@ -1,3 +1,8 @@\n+2018-03-31  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/85027\n+\t* g++.dg/pr85027.C: New.\n+\n 2018-03-31  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/83315"}, {"sha": "01b1b291aecd95765e2229875694600499de6118", "filename": "gcc/testsuite/g++.dg/pr85027.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85027.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85027.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85027.C?ref=fc8b67411812f81151b4fa3dfcc0bd378e2d5cf8", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+\n+// Avoid -pedantic-error default\n+// { dg-options \"\" }\n+\n+struct A { static int a; };\n+\n+int t = A::A ? : 0; // { dg-error \"cannot resolve\" }"}]}