{"sha": "17ad8cdebe65b47d257d85849747b806af0a85fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhZDhjZGViZTY1YjQ3ZDI1N2Q4NTg0OTc0N2I4MDZhZjBhODVmZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-26T13:48:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-26T13:48:26Z"}, "message": "aarch64: Tighten up checks for ubfix [PR98681]\n\nThe testcase in the patch doesn't assemble, because the instruction requires\nthat the penultimate operand (lsb) range is [0, 32] (or [0, 64]) and the last\noperand's range is [1, 32 - lsb] (or [1, 64 - lsb]).\nThe INTVAL (shft_amnt) < GET_MODE_BITSIZE (mode) will accept the lsb operand\nto be in range [MIN, 32] (or [MIN, 64]) and then we invoke UB in the\ncompiler and sometimes it will make it through.\nThe patch changes all the INTVAL uses in that function to UINTVAL,\nwhich isn't strictly necessary, but can be done (e.g. after the\nUINTVAL (shft_amnt) < GET_MODE_BITSIZE (mode) check we know it is not\nnegative and thus INTVAL (shft_amnt) and UINTVAL (shft_amnt) then behave the\nsame.  But, I had to add INTVAL (mask) > 0 check in that case, otherwise we\nrisk (hypothetically) emitting instruction that doesn't assemble.\nThe problem is with masks that have the MSB bit set, while the instruction\ncan handle those, e.g.\nubfiz w1, w0, 13, 19\nwill do\n(w0 << 13) & 0xffffe000\nin RTL we represent SImode constants with MSB set as negative HOST_WIDE_INT,\nso it will actually be HOST_WIDE_INT_C (0xffffffffffffe000), and\nthe instruction uses %P3 to print the last operand, which calls\nasm_fprintf (f, \"%u\", popcount_hwi (INTVAL (x)))\nto print that.  But that will not print 19, but 51 instead, will include\nthere also all the copies of the sign bit.\nNot supporting those masks with MSB set isn't a big loss though, they really\nshouldn't appear normally, as both GIMPLE and RTL optimizations should\noptimize those away (one isn't masking any bits off with such masks, so\njust w0 << 13 will do too).\n\n2021-01-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/98681\n\t* config/aarch64/aarch64.c (aarch64_mask_and_shift_for_ubfiz_p):\n\tUse UINTVAL (shft_amnt) and UINTVAL (mask) instead of INTVAL (shft_amnt)\n\tand INTVAL (mask).  Add && INTVAL (mask) > 0 condition.\n\n\t* gcc.c-torture/execute/pr98681.c: New test.", "tree": {"sha": "0a88645a3bf554c74155b9c0d09cfccc8525e394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a88645a3bf554c74155b9c0d09cfccc8525e394"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17ad8cdebe65b47d257d85849747b806af0a85fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ad8cdebe65b47d257d85849747b806af0a85fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ad8cdebe65b47d257d85849747b806af0a85fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ad8cdebe65b47d257d85849747b806af0a85fd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bbc80d0e40b6770b61c471ab40a839e255618f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bbc80d0e40b6770b61c471ab40a839e255618f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bbc80d0e40b6770b61c471ab40a839e255618f9"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "b6192e55521004ae70cd13acbdb4dab142216845", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ad8cdebe65b47d257d85849747b806af0a85fd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ad8cdebe65b47d257d85849747b806af0a85fd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=17ad8cdebe65b47d257d85849747b806af0a85fd", "patch": "@@ -12060,10 +12060,11 @@ aarch64_mask_and_shift_for_ubfiz_p (scalar_int_mode mode, rtx mask,\n \t\t\t\t    rtx shft_amnt)\n {\n   return CONST_INT_P (mask) && CONST_INT_P (shft_amnt)\n-\t && INTVAL (shft_amnt) < GET_MODE_BITSIZE (mode)\n-\t && exact_log2 ((INTVAL (mask) >> INTVAL (shft_amnt)) + 1) >= 0\n-\t && (INTVAL (mask)\n-\t     & ((HOST_WIDE_INT_1U << INTVAL (shft_amnt)) - 1)) == 0;\n+\t && INTVAL (mask) > 0\n+\t && UINTVAL (shft_amnt) < GET_MODE_BITSIZE (mode)\n+\t && exact_log2 ((UINTVAL (mask) >> UINTVAL (shft_amnt)) + 1) >= 0\n+\t && (UINTVAL (mask)\n+\t     & ((HOST_WIDE_INT_1U << UINTVAL (shft_amnt)) - 1)) == 0;\n }\n \n /* Return true if the masks and a shift amount from an RTX of the form"}, {"sha": "a256881342fc9790f8220f9d5c3bf7b643ec9666", "filename": "gcc/testsuite/gcc.c-torture/execute/pr98681.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ad8cdebe65b47d257d85849747b806af0a85fd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr98681.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ad8cdebe65b47d257d85849747b806af0a85fd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr98681.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr98681.c?ref=17ad8cdebe65b47d257d85849747b806af0a85fd", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/98681 */\n+\n+__attribute__((noipa)) int\n+foo (int x)\n+{\n+  if (x > 32)\n+    return (x << -64) & 255;\n+  else\n+    return x;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (32) != 32 || foo (-150) != -150)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}