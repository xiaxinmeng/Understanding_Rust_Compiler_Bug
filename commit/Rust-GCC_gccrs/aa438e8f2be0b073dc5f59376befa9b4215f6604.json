{"sha": "aa438e8f2be0b073dc5f59376befa9b4215f6604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0MzhlOGYyYmUwYjA3M2RjNWY1OTM3NmJlZmE5YjQyMTVmNjYwNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-04-28T04:54:54Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-04-28T04:54:54Z"}, "message": "std_fstream.h (basic_filebuf): _M_pback_destroy to _M_destroy_pback.\n\n\n2003-04-27  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/std_fstream.h (basic_filebuf): _M_pback_destroy to\n\t_M_destroy_pback. _M_pback_create to\n\t_M_create_pback. _M_underflow_common to\n\t_M_underflow. _M_really_overflow to _M_overflow.\n\t* include/bits/fstream.tcc: Same.\n\t* src/fstream.cc: Same.\n\t* include/std/std_streambuf.h (basic_streambuf): _M_in_cur_move to\n\t_M_move_in_cur.  _M_out_cur_move to _M_move_out_cur.\n\t* include/bits/streambuf.tcc: Same.\n\t* include/bits/fstream.tcc: Same.\n\t* include/bits/sstream.tcc: Same.\n\nFrom-SVN: r66149", "tree": {"sha": "0bd96b1f6d755299f85f59adda5dd5444ad90324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bd96b1f6d755299f85f59adda5dd5444ad90324"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa438e8f2be0b073dc5f59376befa9b4215f6604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa438e8f2be0b073dc5f59376befa9b4215f6604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa438e8f2be0b073dc5f59376befa9b4215f6604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa438e8f2be0b073dc5f59376befa9b4215f6604/comments", "author": null, "committer": null, "parents": [{"sha": "afc6aaab24721ee00e75ca5511fcc7d9e8c632af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afc6aaab24721ee00e75ca5511fcc7d9e8c632af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afc6aaab24721ee00e75ca5511fcc7d9e8c632af"}], "stats": {"total": 106, "additions": 59, "deletions": 47}, "files": [{"sha": "1847d4f4852295d438e162c2431c2436de7f7058", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aa438e8f2be0b073dc5f59376befa9b4215f6604", "patch": "@@ -1,3 +1,17 @@\n+2003-04-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/std_fstream.h (basic_filebuf): _M_pback_destroy to\n+\t_M_destroy_pback. _M_pback_create to\n+\t_M_create_pback. _M_underflow_common to\n+\t_M_underflow. _M_really_overflow to _M_overflow.\n+\t* include/bits/fstream.tcc: Same.\n+\t* src/fstream.cc: Same.\n+\t* include/std/std_streambuf.h (basic_streambuf): _M_in_cur_move to\n+\t_M_move_in_cur.  _M_out_cur_move to _M_move_out_cur.\n+\t* include/bits/streambuf.tcc: Same.\n+\t* include/bits/fstream.tcc: Same.\n+\t* include/bits/sstream.tcc: Same.\n+\t\n 2003-04-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/locale_classes.h (locale::_Impl): Change _M_names"}, {"sha": "75bc0c8e485fc948ca809f0d29f42d14429ca803", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=aa438e8f2be0b073dc5f59376befa9b4215f6604", "patch": "@@ -126,16 +126,15 @@ namespace std\n \t      const bool __testput = this->_M_out_beg < this->_M_out_lim;\n \n \t      if (__testput \n-\t\t  && traits_type::eq_int_type(_M_really_overflow(__eof), \n-\t\t\t\t\t      __eof))\n+\t\t  && traits_type::eq_int_type(_M_overflow(__eof), __eof))\n \t\t__testfail = true;\n \n #if 0\n \t      // XXX not done\n \t      if (_M_last_overflowed)\n \t\t{\n \t\t  _M_output_unshift();\n-\t\t  _M_really_overflow(__eof);\n+\t\t  _M_overflow(__eof);\n \t\t}\n #endif\n \t    }\n@@ -147,7 +146,7 @@ namespace std\n \t  // NB: Do this here so that re-opened filebufs will be cool...\n \t  this->_M_mode = ios_base::openmode(0);\n \t  _M_destroy_internal_buffer();\n-\t  _M_pback_destroy();\n+\t  _M_destroy_pback();\n \t  \n \t  if (!_M_file.close())\n \t    __testfail = true;\n@@ -214,7 +213,7 @@ namespace std\n \t\t__ret = traits_type::not_eof(__i);\n \t      else\n \t\t{\n-\t\t  _M_pback_create();\n+\t\t  _M_create_pback();\n \t\t  *this->_M_in_cur = __c; \n \t\t  __ret = __i;\n \t\t}\n@@ -233,7 +232,7 @@ namespace std\n \t\t    {\n \t\t      if (!traits_type::eq(__c, *this->_M_in_cur))\n \t\t\t{\n-\t\t\t  _M_pback_create();\n+\t\t\t  _M_create_pback();\n \t\t\t  *this->_M_in_cur = __c;\n \t\t\t}\n \t\t      __ret = __i;\n@@ -263,14 +262,14 @@ namespace std\n \t  else if (__testput)\n \t    {\n \t      *this->_M_out_cur = traits_type::to_char_type(__c);\n-\t      _M_out_cur_move(1);\n+\t      _M_move_out_cur(1);\n \t      __ret = traits_type::not_eof(__c);\n \t    }\n \t  else \n-\t    __ret = this->_M_really_overflow(__c);\n+\t    __ret = this->_M_overflow(__c);\n \t}\n \n-      _M_last_overflowed = false;    // Set in _M_really_overflow, below.\n+      _M_last_overflowed = false;    // Set in _M_overflow, below.\n       return __ret;\n     }\n   \n@@ -344,7 +343,7 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::int_type \n     basic_filebuf<_CharT, _Traits>::\n-    _M_really_overflow(int_type __c)\n+    _M_overflow(int_type __c)\n     {\n       int_type __ret = traits_type::eof();\n       const bool __testput = this->_M_out_beg < this->_M_out_lim;\n@@ -449,7 +448,7 @@ namespace std\n       if (this->is_open() && !__testfail && (__testin || __testout)) \n \t{\n \t  // Ditch any pback buffers to avoid confusion.\n-\t  _M_pback_destroy();\n+\t  _M_destroy_pback();\n \n \t  if (__way != ios_base::cur || __off != 0)\n \t    { "}, {"sha": "801a34a4dba50d992545f8d2d8b1b7242c1cdbcd", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=aa438e8f2be0b073dc5f59376befa9b4215f6604", "patch": "@@ -173,7 +173,7 @@ namespace std\n \t  if ((__testout || __testboth)\n \t      && __newoffo + __off >= 0 && __endo - __beg >= __newoffo + __off)\n \t    {\n-\t      _M_out_cur_move(__newoffo + __off - (this->_M_out_cur - __beg));\n+\t      _M_move_out_cur(__newoffo + __off - (this->_M_out_cur - __beg));\n \t      __ret = pos_type(__newoffo);\n \t    }\n \t}\n@@ -217,7 +217,7 @@ namespace std\n \t      if (__testposi)\n \t\tthis->_M_in_cur = this->_M_in_beg + __pos;\n \t      if (__testposo)\n-\t\t_M_out_cur_move((__pos) - (this->_M_out_cur - __beg));\n+\t\t_M_move_out_cur((__pos) - (this->_M_out_cur - __beg));\n \t      __ret = pos_type(off_type(__pos));\n \t    }\n \t}"}, {"sha": "05e5a6513368cf7ac4e56a634aa6ea476160701c", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=aa438e8f2be0b073dc5f59376befa9b4215f6604", "patch": "@@ -48,7 +48,7 @@ namespace std\n       if (_M_in_cur < _M_in_end)\n \t{\n \t  char_type __c = *this->_M_in_cur;\n-\t  _M_in_cur_move(1);\n+\t  _M_move_in_cur(1);\n \t  __ret = traits_type::to_int_type(__c);\n \t}\n       else \n@@ -67,7 +67,7 @@ namespace std\n \t__ret = this->pbackfail(traits_type::to_int_type(__c));\n       else \n \t{\n-\t  _M_in_cur_move(-1);\n+\t  _M_move_in_cur(-1);\n \t  __ret = traits_type::to_int_type(*this->_M_in_cur);\n \t}\n       return __ret;\n@@ -81,7 +81,7 @@ namespace std\n       int_type __ret;\n       if (_M_in_beg < _M_in_cur)\n \t{\n-\t  _M_in_cur_move(-1);\n+\t  _M_move_in_cur(-1);\n \t  __ret = traits_type::to_int_type(*_M_in_cur);\n \t}\n       else \n@@ -98,7 +98,7 @@ namespace std\n       if (_M_out_cur < _M_out_end)\n \t{\n \t  *_M_out_cur = __c;\n-\t  _M_out_cur_move(1);\n+\t  _M_move_out_cur(1);\n \t  __ret = traits_type::to_int_type(__c);\n \t}\n       else\n@@ -122,7 +122,7 @@ namespace std\n \t      traits_type::copy(__s, _M_in_cur, __len);\n \t      __ret += __len;\n \t      __s += __len;\n-\t      _M_in_cur_move(__len);\n+\t      _M_move_in_cur(__len);\n \t    }\n \t  \n \t  if (__ret < __n)\n@@ -156,7 +156,7 @@ namespace std\n \t      traits_type::copy(_M_out_cur, __s, __len);\n \t      __ret += __len;\n \t      __s += __len;\n-\t      _M_out_cur_move(__len);\n+\t      _M_move_out_cur(__len);\n \t    }\n \n \t  if (__ret < __n)\n@@ -201,7 +201,7 @@ namespace std\n \t\t{\n \t\t  __xtrct = __sbout->sputn(__sbin->_M_in_cur, __avail);\n \t\t  __ret += __xtrct;\n-\t\t  __sbin->_M_in_cur_move(__xtrct);\n+\t\t  __sbin->_M_move_in_cur(__xtrct);\n \t\t  if (__xtrct != __avail)\n \t\t    break;\n \t\t}"}, {"sha": "6a58a4a56bb97a983509c3acee1b2f7885b6bb6d", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=aa438e8f2be0b073dc5f59376befa9b4215f6604", "patch": "@@ -152,7 +152,7 @@ namespace std\n       // Assumptions:\n       // _M_in_cur has already been moved back\n       void\n-      _M_pback_create()\n+      _M_create_pback()\n       {\n \tif (!_M_pback_init)\n \t  {\n@@ -170,7 +170,7 @@ namespace std\n       // Assumptions:\n       // The pback buffer has only moved forward.\n       void\n-      _M_pback_destroy() throw()\n+      _M_destroy_pback() throw()\n       {\n \tif (_M_pback_init)\n \t  {\n@@ -288,7 +288,7 @@ namespace std\n        *  @endif\n       */\n       int_type\n-      _M_underflow_common(bool __bump);\n+      _M_underflow(bool __bump);\n \n       // [documentation is inherited]\n       virtual int_type\n@@ -303,7 +303,7 @@ namespace std\n       pbackfail(int_type __c = _Traits::eof());\n \n       // NB: For what the standard expects of the overflow function,\n-      // see _M_really_overflow(), below. Because basic_streambuf's\n+      // see _M_overflow(), below. Because basic_streambuf's\n       // sputc/sputn call overflow directly, and the complications of\n       // this implementation's setting of the initial pointers all\n       // equal to _M_buf when initializing, it seems essential to have\n@@ -328,7 +328,7 @@ namespace std\n        *  @endif\n       */\n       int_type\n-      _M_really_overflow(int_type __c = _Traits::eof());\n+      _M_overflow(int_type __c = _Traits::eof());\n \n       // Convert internal byte sequence to external, char-based\n       // sequence via codecvt.\n@@ -382,8 +382,7 @@ namespace std\n \t    off_type __off = this->_M_out_cur - this->_M_out_lim;\n \n \t    // _M_file.sync() will be called within\n-\t    if (traits_type::eq_int_type(_M_really_overflow(),\n-\t\t\t\t\t traits_type::eof()))\n+\t    if (traits_type::eq_int_type(_M_overflow(), traits_type::eof()))\n \t      __ret = -1;\n \t    else if (__off)\n \t      _M_file.seekoff(__off, ios_base::cur, __sync);\n@@ -414,7 +413,7 @@ namespace std\n \t\t++__s;\n \t\t++this->_M_in_cur;\n \t      }\n-\t    _M_pback_destroy();\n+\t    _M_destroy_pback();\n \t  }\n \tif (__ret < __n)\n \t  __ret += __streambuf_type::xsgetn(__s, __n - __ret);\n@@ -425,7 +424,7 @@ namespace std\n       virtual streamsize\n       xsputn(const char_type* __s, streamsize __n)\n       {\n-\t_M_pback_destroy();\n+\t_M_destroy_pback();\n \treturn __streambuf_type::xsputn(__s, __n);\n       }\n \n@@ -501,7 +500,7 @@ namespace std\n   // Explicit specialization declarations, defined in src/fstream.cc.\n   template<> \n     basic_filebuf<char>::int_type \n-    basic_filebuf<char>::_M_underflow_common(bool __bump);\n+    basic_filebuf<char>::_M_underflow(bool __bump);\n \n   template<>\n     basic_filebuf<char>::int_type\n@@ -514,7 +513,7 @@ namespace std\n  #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     basic_filebuf<wchar_t>::int_type \n-    basic_filebuf<wchar_t>::_M_underflow_common(bool __bump);\n+    basic_filebuf<wchar_t>::_M_underflow(bool __bump);\n \n   template<>\n     basic_filebuf<wchar_t>::int_type"}, {"sha": "a5fdc2f5a02593635c180a223d205339f9b8f1a4", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=aa438e8f2be0b073dc5f59376befa9b4215f6604", "patch": "@@ -239,7 +239,7 @@ namespace std\n       // Correctly sets the _M_in_cur pointer, and bumps the\n       // _M_out_cur pointer as well if necessary.\n       void \n-      _M_in_cur_move(off_type __n) // argument needs to be +-\n+      _M_move_in_cur(off_type __n) // argument needs to be +-\n       {\n \tconst bool __testout = _M_out_cur;\n \t_M_in_cur += __n;\n@@ -256,7 +256,7 @@ namespace std\n       // the same range:\n       // _M_buf <= _M_*_ <= _M_out_end\n       void \n-      _M_out_cur_move(off_type __n) // argument needs to be +-\n+      _M_move_out_cur(off_type __n) // argument needs to be +-\n       {\n \tconst bool __testin = _M_in_cur;\n "}, {"sha": "1f2a0001868a26a65eac2fd0f23e3046f8f5d520", "filename": "libstdc++-v3/src/fstream.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa438e8f2be0b073dc5f59376befa9b4215f6604/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc?ref=aa438e8f2be0b073dc5f59376befa9b4215f6604", "patch": "@@ -38,7 +38,7 @@ namespace std\n {\n   template<> \n     basic_filebuf<char>::int_type \n-    basic_filebuf<char>::_M_underflow_common(bool __bump)\n+    basic_filebuf<char>::_M_underflow(bool __bump)\n     {\n       int_type __ret = traits_type::eof();\n       const bool __testin = _M_mode & ios_base::in;\n@@ -51,13 +51,13 @@ namespace std\n \t  // normal buffers and jet outta here before expensive\n \t  // fileops happen...\n \t  if (_M_pback_init)\n-\t    _M_pback_destroy();\n+\t    _M_destroy_pback();\n \n \t  if (_M_in_cur < _M_in_end)\n \t    {\n \t      __ret = traits_type::to_int_type(*_M_in_cur);\n \t      if (__bump)\n-\t\t_M_in_cur_move(1);\n+\t\t_M_move_in_cur(1);\n \t      return __ret;\n \t    }\n \n@@ -68,7 +68,7 @@ namespace std\n \t  if (__testget)\n \t    {\n \t      if (__testout)\n-\t\t_M_really_overflow();\n+\t\t_M_overflow();\n \t      else if (_M_in_cur != _M_filepos)\n \t\t_M_file.seekoff(_M_in_cur - _M_filepos,\n \t\t\t\tios_base::cur, __testsync, ios_base::in);\n@@ -90,7 +90,7 @@ namespace std\n \t\t    _M_out_cur = _M_in_cur;\n \t\t  __ret = traits_type::to_int_type(*_M_in_cur);\n \t\t  if (__bump)\n-\t\t    _M_in_cur_move(1);\n+\t\t    _M_move_in_cur(1);\n \t\t  else if (__testsync)\n \t\t    {\n \t\t      // If we are synced with stdio, we have to unget the\n@@ -109,17 +109,17 @@ namespace std\n   template<>\n     basic_filebuf<char>::int_type\n     basic_filebuf<char>::underflow() \n-    { return _M_underflow_common(false); }\n+    { return _M_underflow(false); }\n \n   template<>\n     basic_filebuf<char>::int_type\n     basic_filebuf<char>::uflow() \n-    { return _M_underflow_common(true); }\n+    { return _M_underflow(true); }\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     basic_filebuf<wchar_t>::int_type \n-    basic_filebuf<wchar_t>::_M_underflow_common(bool __bump)\n+    basic_filebuf<wchar_t>::_M_underflow(bool __bump)\n     {\n       int_type __ret = traits_type::eof();\n       const bool __testin = _M_mode & ios_base::in;\n@@ -132,13 +132,13 @@ namespace std\n \t  // normal buffers and jet outta here before expensive\n \t  // fileops happen...\n \t  if (_M_pback_init)\n-\t    _M_pback_destroy();\n+\t    _M_destroy_pback();\n \n \t  if (_M_in_cur < _M_in_end)\n \t    {\n \t      __ret = traits_type::to_int_type(*_M_in_cur);\n \t      if (__bump)\n-\t\t_M_in_cur_move(1);\n+\t\t_M_move_in_cur(1);\n \t      return __ret;\n \t    }\n \n@@ -149,7 +149,7 @@ namespace std\n \t  if (__testget)\n \t    {\n \t      if (__testout)\n-\t\t_M_really_overflow();\n+\t\t_M_overflow();\n \t      else if (_M_in_cur != _M_filepos)\n \t\t_M_file.seekoff(_M_in_cur - _M_filepos,\n \t\t\t\tios_base::cur, __testsync, ios_base::in);\n@@ -195,7 +195,7 @@ namespace std\n \t\t    _M_out_cur = _M_in_cur;\n \t\t  __ret = traits_type::to_int_type(*_M_in_cur);\n \t\t  if (__bump)\n-\t\t    _M_in_cur_move(1);\n+\t\t    _M_move_in_cur(1);\n \t\t  else if (__testsync)\n \t\t    {\n \t\t      // If we are synced with stdio, we have to unget the\n@@ -214,11 +214,11 @@ namespace std\n   template<>\n     basic_filebuf<wchar_t>::int_type\n     basic_filebuf<wchar_t>::underflow() \n-    { return _M_underflow_common(false); }\n+    { return _M_underflow(false); }\n \n   template<>\n     basic_filebuf<wchar_t>::int_type\n     basic_filebuf<wchar_t>::uflow() \n-    { return _M_underflow_common(true); }\n+    { return _M_underflow(true); }\n #endif\n } // namespace std"}]}