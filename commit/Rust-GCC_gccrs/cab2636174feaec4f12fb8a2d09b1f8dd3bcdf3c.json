{"sha": "cab2636174feaec4f12fb8a2d09b1f8dd3bcdf3c", "node_id": "C_kwDOANBUbNoAKGNhYjI2MzYxNzRmZWFlYzRmMTJmYjhhMmQwOWIxZjhkZDNiY2RmM2M", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2023-02-24T08:14:40Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2023-02-24T08:14:40Z"}, "message": "libsanitizer: cherry-pick commit 8f5962b1ccb5fcd4d4544121d43efb860ac3cc6d from upstream\n\nASAN: keep support for Global::location\n\nWe as GCC still emit __asan_global_source_location for global variables\nand we would like to use it in the future. On other hand, we don't\nsupport llvm-symbolizer and the default libbacktraace symbolizer\ndoes not support location info.", "tree": {"sha": "70a7f20d8fa01549319c78c96ee687a6f2672a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70a7f20d8fa01549319c78c96ee687a6f2672a2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cab2636174feaec4f12fb8a2d09b1f8dd3bcdf3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab2636174feaec4f12fb8a2d09b1f8dd3bcdf3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab2636174feaec4f12fb8a2d09b1f8dd3bcdf3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab2636174feaec4f12fb8a2d09b1f8dd3bcdf3c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a067020e41d97bc3be15b518b3dc2a64b4aae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a067020e41d97bc3be15b518b3dc2a64b4aae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35a067020e41d97bc3be15b518b3dc2a64b4aae2"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "01a243927cacd8e422fbec4b720289eebac6b7c1", "filename": "libsanitizer/asan/asan_globals.cpp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab2636174feaec4f12fb8a2d09b1f8dd3bcdf3c/libsanitizer%2Fasan%2Fasan_globals.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab2636174feaec4f12fb8a2d09b1f8dd3bcdf3c/libsanitizer%2Fasan%2Fasan_globals.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_globals.cpp?ref=cab2636174feaec4f12fb8a2d09b1f8dd3bcdf3c", "patch": "@@ -92,6 +92,10 @@ static void ReportGlobal(const Global &g, const char *prefix) {\n   if (info.line != 0) {\n     Report(\"  location: name=%s, %d\\n\", info.file, static_cast<int>(info.line));\n   }\n+  else if (g.gcc_location != 0) {\n+    // Fallback to Global::gcc_location\n+    Report(\"  location: name=%s, %d\\n\", g.gcc_location->filename, g.gcc_location->line_no);\n+  }\n }\n \n static u32 FindRegistrationSite(const Global *g) {\n@@ -283,6 +287,11 @@ void PrintGlobalLocation(InternalScopedString *str, const __asan_global &g) {\n \n   if (info.line != 0) {\n     str->append(\"%s:%d\", info.file, static_cast<int>(info.line));\n+  } else if (g.gcc_location != 0) {\n+    // Fallback to Global::gcc_location\n+    str->append(\"%s\", g.gcc_location->filename ? g.gcc_location->filename : g.module_name);\n+    if (g.gcc_location->line_no) str->append(\":%d\", g.gcc_location->line_no);\n+    if (g.gcc_location->column_no) str->append(\":%d\", g.gcc_location->column_no);\n   } else {\n     str->append(\"%s\", g.module_name);\n   }"}, {"sha": "a998263780221734598c103a2cb00ff56b4ae491", "filename": "libsanitizer/asan/asan_interface_internal.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab2636174feaec4f12fb8a2d09b1f8dd3bcdf3c/libsanitizer%2Fasan%2Fasan_interface_internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab2636174feaec4f12fb8a2d09b1f8dd3bcdf3c/libsanitizer%2Fasan%2Fasan_interface_internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_interface_internal.h?ref=cab2636174feaec4f12fb8a2d09b1f8dd3bcdf3c", "patch": "@@ -53,9 +53,10 @@ extern \"C\" {\n     const char *module_name; // Module name as a C string. This pointer is a\n                              // unique identifier of a module.\n     uptr has_dynamic_init;   // Non-zero if the global has dynamic initializer.\n-    uptr windows_padding;    // TODO: Figure out how to remove this padding\n-                             // that's simply here to make the MSVC incremental\n-                             // linker happy...\n+    __asan_global_source_location *gcc_location;  // Source location of a global,\n+                                                  // used by GCC compiler. LLVM uses\n+                                                  // llvm-symbolizer that relies\n+                                                  // on DWARF debugging info.\n     uptr odr_indicator;      // The address of the ODR indicator symbol.\n   };\n "}]}