{"sha": "63e21a7237fac8dfedda51cc7f4089e8c07a25e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNlMjFhNzIzN2ZhYzhkZmVkZGE1MWNjN2Y0MDg5ZThjMDdhMjVlOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-12-13T09:04:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-13T09:04:33Z"}, "message": "[Ada] Minor tweak to Volatile_Full_Access wording in GNAT RM\n\n2019-12-13  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Minor tweak to\n\tVolatile_Full_Access wording in GNAT RM.\n\t* gnat_rm.texi: Regenerate.\n\nFrom-SVN: r279354", "tree": {"sha": "00b509a768c67c5192bf3064331271f7087f13d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00b509a768c67c5192bf3064331271f7087f13d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63e21a7237fac8dfedda51cc7f4089e8c07a25e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63e21a7237fac8dfedda51cc7f4089e8c07a25e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63e21a7237fac8dfedda51cc7f4089e8c07a25e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63e21a7237fac8dfedda51cc7f4089e8c07a25e9/comments", "author": null, "committer": null, "parents": [{"sha": "47997d257aaaac802d5857c898a4a3ef38e9e65a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47997d257aaaac802d5857c898a4a3ef38e9e65a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47997d257aaaac802d5857c898a4a3ef38e9e65a"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "97b64698e7288cdeff82879acbab64cf9611a1a0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e21a7237fac8dfedda51cc7f4089e8c07a25e9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e21a7237fac8dfedda51cc7f4089e8c07a25e9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=63e21a7237fac8dfedda51cc7f4089e8c07a25e9", "patch": "@@ -1,3 +1,9 @@\n+2019-12-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Minor tweak to\n+\tVolatile_Full_Access wording in GNAT RM.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2019-12-13  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_attr.adb (Expand_N_Attribute_Reference,"}, {"sha": "fd66aedfe26e69966051dbbb2ab860ffa6dc2495", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e21a7237fac8dfedda51cc7f4089e8c07a25e9/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e21a7237fac8dfedda51cc7f4089e8c07a25e9/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=63e21a7237fac8dfedda51cc7f4089e8c07a25e9", "patch": "@@ -7425,8 +7425,8 @@ Syntax:\n This is similar in effect to pragma Volatile, except that any reference to the\n object is guaranteed to be done only with instructions that read or write all\n the bits of the object. Furthermore, if the object is of a composite type,\n-then any reference to a component of the object is guaranteed to read and/or\n-write all the bits of the object.\n+then any reference to a subcomponent of the object is guaranteed to read\n+and/or write all the bits of the object.\n \n The intention is that this be suitable for use with memory-mapped I/O devices\n on some machines. Note that there are two important respects in which this is\n@@ -7438,7 +7438,7 @@ is not to the whole object; the compiler is allowed (and generally will)\n access only part of the object in this case.\n \n It is not permissible to specify ``Atomic`` and ``Volatile_Full_Access`` for\n-the same object.\n+the same type or object.\n \n It is not permissible to specify ``Volatile_Full_Access`` for a composite\n (record or array) type or object that has at least one ``Aliased`` component."}, {"sha": "8d909deaf8d28aa45026ce3317681c7273a68c7b", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e21a7237fac8dfedda51cc7f4089e8c07a25e9/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e21a7237fac8dfedda51cc7f4089e8c07a25e9/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=63e21a7237fac8dfedda51cc7f4089e8c07a25e9", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Sep 14, 2019\n+GNAT Reference Manual , Dec 10, 2019\n \n AdaCore\n \n@@ -8931,8 +8931,8 @@ pragma Volatile_Full_Access (LOCAL_NAME);\n This is similar in effect to pragma Volatile, except that any reference to the\n object is guaranteed to be done only with instructions that read or write all\n the bits of the object. Furthermore, if the object is of a composite type,\n-then any reference to a component of the object is guaranteed to read and/or\n-write all the bits of the object.\n+then any reference to a subcomponent of the object is guaranteed to read\n+and/or write all the bits of the object.\n \n The intention is that this be suitable for use with memory-mapped I/O devices\n on some machines. Note that there are two important respects in which this is\n@@ -8944,7 +8944,7 @@ is not to the whole object; the compiler is allowed (and generally will)\n access only part of the object in this case.\n \n It is not permissible to specify @code{Atomic} and @code{Volatile_Full_Access} for\n-the same object.\n+the same type or object.\n \n It is not permissible to specify @code{Volatile_Full_Access} for a composite\n (record or array) type or object that has at least one @code{Aliased} component."}]}