{"sha": "1c9b0448575999937e22d02d77e5f94300679f89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5YjA0NDg1NzU5OTk5MzdlMjJkMDJkNzdlNWY5NDMwMDY3OWY4OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-12-02T09:30:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-12-02T09:30:15Z"}, "message": "genmatch.c: Include hash-set.h.\n\n2014-12-02  Richard Biener  <rguenther@suse.de>\n\tPrathamesh Kulkarni  <bilbotheelffriend@gmail.com>\n\n\t* genmatch.c: Include hash-set.h.\n\t(fatal_at): Add source_location overload.\n\t(parser::record_operlist): New method.\n\t(parser::push_simplify): Likewise.\n\t(parser::oper_lists_set): New member.\n\t(parser::oper_lists): Likewise.\n\t(parser::parse_operation): Record seen operator list references.\n\t(parser::parse_c_expr): Likewise.\n\t(parser::parse_simplify): Init oper_lists_set and oper_lists\n\tand use push_simplify.\n\t(parser::parser): Init oper_lists_set and oper_lists.\n\nCo-Authored-By: Prathamesh Kulkarni <bilbotheelffriend@gmail.com>\n\nFrom-SVN: r218261", "tree": {"sha": "cbad24f2ac474c2a475de4c57e28e10e12e1b5be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbad24f2ac474c2a475de4c57e28e10e12e1b5be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c9b0448575999937e22d02d77e5f94300679f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9b0448575999937e22d02d77e5f94300679f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c9b0448575999937e22d02d77e5f94300679f89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9b0448575999937e22d02d77e5f94300679f89/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "280931058a2f5beb7cebef0d5a0a6491c182cfb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280931058a2f5beb7cebef0d5a0a6491c182cfb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/280931058a2f5beb7cebef0d5a0a6491c182cfb4"}], "stats": {"total": 112, "additions": 91, "deletions": 21}, "files": [{"sha": "860388639308de0e83990b039e1ce8edf2cae9a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9b0448575999937e22d02d77e5f94300679f89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9b0448575999937e22d02d77e5f94300679f89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c9b0448575999937e22d02d77e5f94300679f89", "patch": "@@ -1,3 +1,18 @@\n+2014-12-02  Richard Biener  <rguenther@suse.de>\n+\tPrathamesh Kulkarni  <bilbotheelffriend@gmail.com>\n+\n+\t* genmatch.c: Include hash-set.h.\n+\t(fatal_at): Add source_location overload.\n+\t(parser::record_operlist): New method.\n+\t(parser::push_simplify): Likewise.\n+\t(parser::oper_lists_set): New member.\n+\t(parser::oper_lists): Likewise.\n+\t(parser::parse_operation): Record seen operator list references.\n+\t(parser::parse_c_expr): Likewise.\n+\t(parser::parse_simplify): Init oper_lists_set and oper_lists\n+\tand use push_simplify.\n+\t(parser::parser): Init oper_lists_set and oper_lists.\n+\n 2014-12-02  Richard Biener  <rguenther@suse.de>\n \n \t* match.pd: Restrict division combining to trunc_div and"}, {"sha": "756d54fc4b7cddc1e09e7062fbc48918edcd4295", "filename": "gcc/genmatch.c", "status": "modified", "additions": 76, "deletions": 21, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9b0448575999937e22d02d77e5f94300679f89/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9b0448575999937e22d02d77e5f94300679f89/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=1c9b0448575999937e22d02d77e5f94300679f89", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n #include \"hash-table.h\"\n #include \"hash-map.h\"\n+#include \"hash-set.h\"\n #include \"vec.h\"\n #include \"is-a.h\"\n \n@@ -105,6 +106,18 @@ fatal_at (const cpp_token *tk, const char *msg, ...)\n   va_end (ap);\n }\n \n+static void\n+#if GCC_VERSION >= 4001\n+__attribute__((format (printf, 2, 3)))\n+#endif\n+fatal_at (source_location loc, const char *msg, ...)\n+{\n+  va_list ap;\n+  va_start (ap, msg);\n+  error_cb (NULL, CPP_DL_FATAL, 0, loc, 0, msg, &ap);\n+  va_end (ap);\n+}\n+\n static void\n #if GCC_VERSION >= 4001\n __attribute__((format (printf, 2, 3)))\n@@ -2704,7 +2717,11 @@ class parser\n   c_expr *parse_c_expr (cpp_ttype);\n   operand *parse_op ();\n \n+  void record_operlist (source_location, user_id *);\n+\n   void parse_pattern ();\n+  void push_simplify (vec<simplify *>&, operand *, source_location,\n+\t\t      operand *, source_location);\n   void parse_simplify (source_location, vec<simplify *>&, predicate_id *,\n \t\t       expr *);\n   void parse_for (source_location);\n@@ -2715,6 +2732,8 @@ class parser\n   cpp_reader *r;\n   vec<if_or_with> active_ifs;\n   vec<vec<user_id *> > active_fors;\n+  hash_set<user_id *> *oper_lists_set;\n+  vec<user_id *> oper_lists;\n \n   cid_map_t *capture_ids;\n \n@@ -2845,6 +2864,21 @@ parser::get_number ()\n }\n \n \n+/* Record an operator-list use for transparent for handling.  */\n+\n+void\n+parser::record_operlist (source_location loc, user_id *p)\n+{\n+  if (!oper_lists_set->add (p))\n+    {\n+      if (!oper_lists.is_empty ()\n+\t  && oper_lists[0]->substitutes.length () != p->substitutes.length ())\n+\tfatal_at (loc, \"User-defined operator list does not have the \"\n+\t\t  \"same number of entries as others used in the pattern\");\n+      oper_lists.safe_push (p);\n+    }\n+}\n+\n /* Parse the operator ID, special-casing convert?, convert1? and\n    convert2?  */\n \n@@ -2882,8 +2916,7 @@ parser::parse_operation ()\n \n   user_id *p = dyn_cast<user_id *> (op);\n   if (p && p->is_oper_list)\n-    fatal_at (id_tok, \"operator-list not allowed in expression\");\n-\n+    record_operlist (id_tok->src_loc, p);\n   return op;\n }\n \n@@ -3020,8 +3053,13 @@ parser::parse_c_expr (cpp_ttype start)\n \n       /* If this is possibly a user-defined identifier mark it used.  */\n       if (token->type == CPP_NAME)\n-\tget_operator ((const char *)CPP_HASHNODE\n-\t\t        (token->val.node.node)->ident.str);\n+\t{\n+\t  id_base *idb = get_operator ((const char *)CPP_HASHNODE\n+\t\t\t\t      (token->val.node.node)->ident.str);\n+\t  user_id *p;\n+\t  if (idb && (p = dyn_cast<user_id *> (idb)) && p->is_oper_list)\n+\t    record_operlist (token->src_loc, p);\n+\t}\n \n       /* Record the token.  */\n       code.safe_push (*token);\n@@ -3097,6 +3135,26 @@ parser::parse_op ()\n   return op;\n }\n \n+/* Create a new simplify from the current parsing state and MATCH,\n+   MATCH_LOC, RESULT and RESULT_LOC and push it to SIMPLIFIERS.  */\n+\n+void\n+parser::push_simplify (vec<simplify *>& simplifiers,\n+\t\t       operand *match, source_location match_loc,\n+\t\t       operand *result, source_location result_loc)\n+{\n+  /* Build and push a temporary for for operator list uses in expressions.  */\n+  if (!oper_lists.is_empty ())\n+    active_fors.safe_push (oper_lists);\n+\n+  simplifiers.safe_push\n+    (new simplify (match, match_loc, result, result_loc,\n+\t\t   active_ifs.copy (), active_fors.copy (), capture_ids));\n+\n+  if (!oper_lists.is_empty ())\n+    active_fors.pop ();\n+}\n+\n /* Parse\n      simplify = 'simplify' <expr> <result-op>\n    or\n@@ -3114,6 +3172,10 @@ parser::parse_simplify (source_location match_location,\n {\n   /* Reset the capture map.  */\n   capture_ids = new cid_map_t;\n+  /* Reset oper_lists and set.  */\n+  hash_set <user_id *> olist;\n+  oper_lists_set = &olist;\n+  oper_lists = vNULL;\n \n   const cpp_token *loc = peek ();\n   parsing_match_operand = true;\n@@ -3133,10 +3195,8 @@ parser::parse_simplify (source_location match_location,\n     {\n       if (!matcher)\n \tfatal_at (token, \"expected transform expression\");\n-      simplifiers.safe_push\n-\t(new simplify (match, match_location, result, token->src_loc,\n-\t\t       active_ifs.copy (), active_fors.copy (),\n-\t\t       capture_ids));\n+      push_simplify (simplifiers, match, match_location,\n+\t\t     result, token->src_loc);\n       return;\n     }\n \n@@ -3159,10 +3219,8 @@ parser::parse_simplify (source_location match_location,\n \t\t{\n \t\t  if (!matcher)\n \t\t    fatal_at (token, \"manual transform not implemented\");\n-\t\t  simplifiers.safe_push\n-\t\t      (new simplify (match, match_location, result,\n-\t\t\t\t     paren_loc, active_ifs.copy (),\n-\t\t\t\t     active_fors.copy (), capture_ids));\n+\t\t  push_simplify (simplifiers, match, match_location,\n+\t\t\t\t result, paren_loc);\n \t\t}\n \t    }\n \t  else if (peek_ident (\"with\"))\n@@ -3178,10 +3236,8 @@ parser::parse_simplify (source_location match_location,\n \t      operand *op = result;\n \t      if (!matcher)\n \t\top = parse_expr ();\n-\t      simplifiers.safe_push\n-\t\t  (new simplify (match, match_location, op,\n-\t\t\t\t token->src_loc, active_ifs.copy (),\n-\t\t\t\t active_fors.copy (), capture_ids));\n+\t      push_simplify (simplifiers, match, match_location,\n+\t\t\t     op, token->src_loc);\n \t      eat_token (CPP_CLOSE_PAREN);\n \t      /* A \"default\" result closes the enclosing scope.  */\n \t      if (active_ifs.length () > active_ifs_len)\n@@ -3209,11 +3265,8 @@ parser::parse_simplify (source_location match_location,\n \t{\n \t  if (matcher)\n \t    fatal_at (token, \"expected match operand expression\");\n-\t  simplifiers.safe_push\n-\t      (new simplify (match, match_location,\n-\t\t\t     matcher ? result : parse_op (),\n-\t\t\t     token->src_loc, active_ifs.copy (),\n-\t\t\t     active_fors.copy (), capture_ids));\n+\t  push_simplify (simplifiers, match, match_location,\n+\t\t\t matcher ? result : parse_op (), token->src_loc);\n \t  /* A \"default\" result closes the enclosing scope.  */\n \t  if (active_ifs.length () > active_ifs_len)\n \t    {\n@@ -3507,6 +3560,8 @@ parser::parser (cpp_reader *r_)\n   active_ifs = vNULL;\n   active_fors = vNULL;\n   simplifiers = vNULL;\n+  oper_lists_set = NULL;\n+  oper_lists = vNULL;\n   user_predicates = vNULL;\n   parsing_match_operand = false;\n "}]}