{"sha": "5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI3OWQ3Mzk0ZWZlM2U2ZDM5ZTljNWYwYmJiMDY2ZTYzZjRjZjM5OA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-05-16T19:03:02Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-05-16T19:03:02Z"}, "message": "c-common.c (STDC_0_IN_SYSTEM_HEADERS, [...]): Default-define here.\n\n\t* c-common.c (STDC_0_IN_SYSTEM_HEADERS, REGISTER_PREFIX):\n\tDefault-define here.\n\t(builtin_define_with_value): Can now wrap the expansion in\n\tquotation marks if such is wanted.\n\t(cb_register_builtins): Update calls to\tbuiltin_define_with_value.\n\tDefine __REGISTER_PREFIX__, __USER_LABEL_PREFIX__, and __VERSION__\n\there.\n\t(c_common_init): Set options->stdc_0_in_system_headers.\n\t* c-lex.h: Update prototype of builtin_define_with_value.\n\t* cppdefault.h: Remove default definitions of USER_LABEL_PREFIX\n\tand REGISTER_PREFIX.\n\n\t* cppinit.c (VERS, ULP, C, X): Kill.\n\t(builtin_array): Remove entries for __VERSION__,\n\t__USER_LABEL_PREFIX__, __REGISTER_PREFIX__, and\n\t__HAVE_BUILTIN_SETJMP__.  Make __STDC__ always a builtin, not\n\ta constant.\n\t(init_builtins): Kill off a bunch of now-dead code.\n\t(COMMAND_LINE_OPTIONS): Remove -fleading-underscore and\n\t-fno-leading-underscore.\n\t(cpp_handle_option): Remove code to set user_label_prefix.\n\t(cpp_post_options): Likewise.\n\n\t* cpplib.h (struct cpp_options): Remove user_label_prefix.\n\t(stdc_0_in_system_headers): New.\n\t* cppmacro.c (builtin_macro): Check CPP_OPTION (pfile,\n\tstdc_0_in_system_headers) too to decide the value of __STDC__.\n\n\t* tradcpp.c (user_label_prefix): Kill.\n\t(main): Remove code handling -f(no-)leading-underscore.\n\t(initialize_builtins): Don't define __REGISTER_PREFIX__\n\tor __USER_LABEL_PREFIX__.\n\t(install_value): Wrap compound statement in dummy loop so the\n\tmacro works properly in an if statement.\n\nFrom-SVN: r53525", "tree": {"sha": "7ba2394a66b4c75f323247f002ba280c373fb85a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ba2394a66b4c75f323247f002ba280c373fb85a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/comments", "author": null, "committer": null, "parents": [{"sha": "62e6ca55bd6a235d9feccd4ac48c2b89e0bc32e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e6ca55bd6a235d9feccd4ac48c2b89e0bc32e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e6ca55bd6a235d9feccd4ac48c2b89e0bc32e5"}], "stats": {"total": 230, "additions": 106, "deletions": 124}, "files": [{"sha": "446367f106a5db6df6824ad895eb2cdb362877a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "patch": "@@ -1,3 +1,41 @@\n+2002-05-16  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-common.c (STDC_0_IN_SYSTEM_HEADERS, REGISTER_PREFIX):\n+\tDefault-define here.\n+\t(builtin_define_with_value): Can now wrap the expansion in\n+\tquotation marks if such is wanted.\n+\t(cb_register_builtins): Update calls to\tbuiltin_define_with_value.  \n+\tDefine __REGISTER_PREFIX__, __USER_LABEL_PREFIX__, and __VERSION__\n+\there.\n+\t(c_common_init): Set options->stdc_0_in_system_headers.\n+\t* c-lex.h: Update prototype of builtin_define_with_value.\n+\t* cppdefault.h: Remove default definitions of USER_LABEL_PREFIX\n+\tand REGISTER_PREFIX.\n+\n+\t* cppinit.c (VERS, ULP, C, X): Kill.\n+\t(builtin_array): Remove entries for __VERSION__,\n+\t__USER_LABEL_PREFIX__, __REGISTER_PREFIX__, and\n+\t__HAVE_BUILTIN_SETJMP__.  Make __STDC__ always a builtin, not\n+\ta constant.\n+\t(init_builtins): Kill off a bunch of now-dead code.\n+\t(COMMAND_LINE_OPTIONS): Remove -fleading-underscore and\n+\t-fno-leading-underscore.\n+\t(cpp_handle_option): Remove code to set user_label_prefix.\n+\t(cpp_post_options): Likewise.\n+\n+\t* cpplib.h (struct cpp_options): Remove user_label_prefix.\n+\t(stdc_0_in_system_headers): New.\n+\t* cppmacro.c (builtin_macro): Check CPP_OPTION (pfile,\n+\tstdc_0_in_system_headers) too to decide the value of __STDC__.\n+\n+\t* tradcpp.c (user_label_prefix): Kill.\n+\t(main): Remove code handling -f(no-)leading-underscore.\t\n+\t(initialize_builtins): Don't define __REGISTER_PREFIX__\n+\tor __USER_LABEL_PREFIX__.\n+\t(install_value): Wrap compound statement in dummy loop so the\n+\tmacro works properly in an if statement.\n+\n+\n 2002-05-16  Janis Johnson  <janis187@us.ibm.com>\n \n \t* loop.h (struct loop_info): Add member has_prefetch."}, {"sha": "81810dd741327dd55fcaa7f1e42779d9f40293ab", "filename": "gcc/c-common.c", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "patch": "@@ -83,6 +83,14 @@ cpp_reader *parse_in;\t\t/* Declared in c-lex.h.  */\n \t\t\t: \"long long unsigned int\"))\n #endif\n \n+#ifndef STDC_0_IN_SYSTEM_HEADERS\n+#define STDC_0_IN_SYSTEM_HEADERS 0\n+#endif\n+\n+#ifndef REGISTER_PREFIX\n+#define REGISTER_PREFIX \"\"\n+#endif\n+\n /* The variant of the C language being processed.  */\n \n enum c_language_kind c_language;\n@@ -4331,10 +4339,17 @@ cb_register_builtins (pfile)\n     cpp_define (pfile, \"__USING_SJLJ_EXCEPTIONS__\");\n \n   /* stddef.h needs to know these.  */\n-  builtin_define_with_value (\"__SIZE_TYPE__\", SIZE_TYPE);\n-  builtin_define_with_value (\"__PTRDIFF_TYPE__\", PTRDIFF_TYPE);\n-  builtin_define_with_value (\"__WCHAR_TYPE__\", MODIFIED_WCHAR_TYPE);\n-  builtin_define_with_value (\"__WINT_TYPE__\", WINT_TYPE);\n+  builtin_define_with_value (\"__SIZE_TYPE__\", SIZE_TYPE, 0);\n+  builtin_define_with_value (\"__PTRDIFF_TYPE__\", PTRDIFF_TYPE, 0);\n+  builtin_define_with_value (\"__WCHAR_TYPE__\", MODIFIED_WCHAR_TYPE, 0);\n+  builtin_define_with_value (\"__WINT_TYPE__\", WINT_TYPE, 0);\n+\n+  /* For use in assembly language.  */\n+  builtin_define_with_value (\"__REGISTER_PREFIX__\", REGISTER_PREFIX, 0);\n+  builtin_define_with_value (\"__USER_LABEL_PREFIX__\", user_label_prefix, 0);\n+\n+  /* Misc.  */\n+  builtin_define_with_value (\"__VERSION__\", version_string, 1);\n \n   /* A straightforward target hook doesn't work, because of problems\n      linking that hook's body when part of non-C front ends.  */\n@@ -4385,23 +4400,28 @@ builtin_define_std (macro)\n     }\n }\n \n-/* Pass an object-like macro and a value to define it to.  */\n+/* Pass an object-like macro and a value to define it to.  The third\n+   parameter says whether or not to turn the value into a string\n+   constant.  */\n void\n-builtin_define_with_value (macro, expansion)\n+builtin_define_with_value (macro, expansion, is_str)\n      const char *macro;\n      const char *expansion;\n+     int is_str;\n {\n-  char *buf, *q;\n+  char *buf;\n   size_t mlen = strlen (macro);\n   size_t elen = strlen (expansion);\n+  size_t extra = 2;  /* space for an = and a NUL */\n \n-  q = buf = alloca (mlen + elen + 2);\n-  memcpy (q, macro, mlen);\n-  q += mlen;\n-  *q++ = '=';\n-  memcpy (q, expansion, elen);\n-  q += elen;\n-  *q = '\\0';\n+  if (is_str)\n+    extra += 2;  /* space for two quote marks */\n+\n+  buf = alloca (mlen + elen + extra);\n+  if (is_str)\n+    sprintf (buf, \"%s=\\\"%s\\\"\", macro, expansion);\n+  else\n+    sprintf (buf, \"%s=%s\", macro, expansion);\n \n   cpp_define (parse_in, buf);\n }\n@@ -4429,6 +4449,7 @@ c_common_init (filename)\n      options->unsigned_char = !flag_signed_char; */\n \n   options->warn_multichar = warn_multichar;\n+  options->stdc_0_in_system_headers = STDC_0_IN_SYSTEM_HEADERS;\n \n   /* Register preprocessor built-ins before calls to\n      cpp_main_file.  */"}, {"sha": "b3e0a58a589d63c6672395f0cb0ffe76d69cc626", "filename": "gcc/c-lex.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "patch": "@@ -49,7 +49,10 @@ extern struct cpp_reader* parse_in;\n    \"_mips\".  */\n extern void builtin_define_std PARAMS ((const char *));\n \n-/* Pass an object-like macro and a value to define it to.  */\n-extern void builtin_define_with_value PARAMS ((const char *, const char *));\n+/* Pass an object-like macro and a value to define it to.  The third\n+   parameter says whether or not to turn the value into a string\n+   constant.  */\n+extern void builtin_define_with_value PARAMS ((const char *, const char *,\n+\t\t\t\t\t       int));\n \n #endif /* ! GCC_C_LEX_H */"}, {"sha": "40a860964a838904e32846fe4a58ef6e13e2b155", "filename": "gcc/cppdefault.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Fcppdefault.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Fcppdefault.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.h?ref=5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "patch": "@@ -42,24 +42,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #undef CROSS_INCLUDE_DIR\n #endif\n \n-/* We let tm.h override the types used here, to handle trivial differences\n-   such as the choice of unsigned int or long unsigned int for size_t.\n-   When machines start needing nontrivial differences in the size type,\n-   it would be best to do something here to figure out automatically\n-   from other information what type to use.  */\n-\n-/* The string value for __USER_LABEL_PREFIX__ */\n-\n-#ifndef USER_LABEL_PREFIX\n-#define USER_LABEL_PREFIX \"\"\n-#endif\n-\n-/* The string value for __REGISTER_PREFIX__ */\n-\n-#ifndef REGISTER_PREFIX\n-#define REGISTER_PREFIX \"\"\n-#endif\n-\n /* This is the default list of directories to search for include files.\n    It may be overridden by the various -I and -ixxx options.\n "}, {"sha": "a03450c27fc737542825ab7b167cf4851113b6a7", "filename": "gcc/cppinit.c", "status": "modified", "additions": 9, "deletions": 68, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "patch": "@@ -623,11 +623,6 @@ cpp_destroy (pfile)\n    known at build time should not be flagged BUILTIN, as then they do\n    not appear in macro dumps with e.g. -dM or -dD.\n \n-   Two values are not compile time constants, so we tag\n-   them in the FLAGS field instead:\n-   VERS\t\tvalue is the global version_string, quoted\n-   ULP\t\tvalue is the global user_label_prefix\n-\n    Also, macros with CPLUS set in the flags field are entered only for C++.  */\n struct builtin\n {\n@@ -638,15 +633,11 @@ struct builtin\n   unsigned short flags;\n   unsigned short len;\n };\n-#define VERS\t\t0x01\n-#define ULP\t\t0x02\n #define CPLUS\t\t0x04\n #define BUILTIN\t\t0x08\n #define OPERATOR  \t0x10\n \n #define B(n, t)       { U n, 0, t, 0, BUILTIN, sizeof n - 1 }\n-#define C(n, v)       { U n, v, 0, 0, 0, sizeof n - 1 }\n-#define X(n, f)       { U n, 0, 0, 0, f, sizeof n - 1 }\n #define O(n, c, f)    { U n, 0, 0, c, OPERATOR | f, sizeof n - 1 }\n static const struct builtin builtin_array[] =\n {\n@@ -657,16 +648,7 @@ static const struct builtin builtin_array[] =\n   B(\"__LINE__\",\t\t BT_SPECLINE),\n   B(\"__INCLUDE_LEVEL__\", BT_INCLUDE_LEVEL),\n   B(\"_Pragma\",\t\t BT_PRAGMA),\n-\n-  X(\"__VERSION__\",\t\tVERS),\n-  X(\"__USER_LABEL_PREFIX__\",\tULP),\n-  C(\"__REGISTER_PREFIX__\",\tREGISTER_PREFIX),\n-  C(\"__HAVE_BUILTIN_SETJMP__\",\t\"1\"),\n-#ifdef STDC_0_IN_SYSTEM_HEADERS\n   B(\"__STDC__\",\t\t BT_STDC),\n-#else\n-  C(\"__STDC__\",\t\t \"1\"),\n-#endif\n \n   /* Named operators known to the preprocessor.  These cannot be #defined\n      and always have their stated meaning.  They are treated like normal\n@@ -685,8 +667,6 @@ static const struct builtin builtin_array[] =\n   O(\"xor_eq\",\tCPP_XOR_EQ,  CPLUS)\n };\n #undef B\n-#undef C\n-#undef X\n #undef O\n #define builtin_array_end (builtin_array + ARRAY_SIZE (builtin_array))\n \n@@ -700,51 +680,24 @@ init_builtins (pfile)\n \n   for(b = builtin_array; b < builtin_array_end; b++)\n     {\n+      cpp_hashnode *hp;\n       if ((b->flags & CPLUS) && ! CPP_OPTION (pfile, cplusplus))\n \tcontinue;\n \n       if ((b->flags & OPERATOR) && ! CPP_OPTION (pfile, operator_names))\n \tcontinue;\n \n-      if (b->flags & (OPERATOR | BUILTIN))\n+      hp = cpp_lookup (pfile, b->name, b->len);\n+      if (b->flags & OPERATOR)\n \t{\n-\t  cpp_hashnode *hp = cpp_lookup (pfile, b->name, b->len);\n-\t  if (b->flags & OPERATOR)\n-\t    {\n-\t      hp->flags |= NODE_OPERATOR;\n-\t      hp->value.operator = b->operator;\n-\t    }\n-\t  else\n-\t    {\n-\t      hp->type = NT_MACRO;\n-\t      hp->flags |= NODE_BUILTIN | NODE_WARN;\n-\t      hp->value.builtin = b->builtin;\n-\t    }\n+\t  hp->flags |= NODE_OPERATOR;\n+\t  hp->value.operator = b->operator;\n \t}\n-      else\t\t\t/* A standard macro of some kind.  */\n+      else\n \t{\n-\t  const char *val;\n-\t  char *str;\n-\n-\t  if (b->flags & VERS)\n-\t    {\n-\t      /* Allocate enough space for 'name \"value\"\\n\\0'.  */\n-\t      str = alloca (b->len + strlen (version_string) + 5);\n-\t      sprintf (str, \"%s \\\"%s\\\"\\n\", b->name, version_string);\n-\t    }\n-\t  else\n-\t    {\n-\t      if (b->flags & ULP)\n-\t\tval = CPP_OPTION (pfile, user_label_prefix);\n-\t      else\n-\t\tval = b->value;\n-\n-\t      /* Allocate enough space for \"name value\\n\\0\".  */\n-\t      str = alloca (b->len + strlen (val) + 3);\n-\t      sprintf(str, \"%s %s\\n\", b->name, val);\n-\t    }\n-\n-\t  _cpp_define_builtin (pfile, str);\n+\t  hp->type = NT_MACRO;\n+\t  hp->flags |= NODE_BUILTIN | NODE_WARN;\n+\t  hp->value.builtin = b->builtin;\n \t}\n     }\n \n@@ -1209,8 +1162,6 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"U\",                        no_mac, OPT_U)                          \\\n   DEF_OPT(\"W\",                        no_arg, OPT_W)  /* arg optional */      \\\n   DEF_OPT(\"d\",                        no_arg, OPT_d)                          \\\n-  DEF_OPT(\"fleading-underscore\",      0,      OPT_fleading_underscore)        \\\n-  DEF_OPT(\"fno-leading-underscore\",   0,      OPT_fno_leading_underscore)     \\\n   DEF_OPT(\"fno-operator-names\",       0,      OPT_fno_operator_names)         \\\n   DEF_OPT(\"fno-preprocessed\",         0,      OPT_fno_preprocessed)           \\\n   DEF_OPT(\"fno-show-column\",          0,      OPT_fno_show_column)            \\\n@@ -1408,12 +1359,6 @@ cpp_handle_option (pfile, argc, argv, ignore)\n \t{\n \tcase N_OPTS: /* Shut GCC up.  */\n \t  break;\n-\tcase OPT_fleading_underscore:\n-\t  CPP_OPTION (pfile, user_label_prefix) = \"_\";\n-\t  break;\n-\tcase OPT_fno_leading_underscore:\n-\t  CPP_OPTION (pfile, user_label_prefix) = \"\";\n-\t  break;\n \tcase OPT_fno_operator_names:\n \t  CPP_OPTION (pfile, operator_names) = 0;\n \t  break;\n@@ -1843,10 +1788,6 @@ cpp_post_options (pfile)\n   if (CPP_OPTION (pfile, cplusplus))\n     CPP_OPTION (pfile, warn_traditional) = 0;\n \n-  /* Set this if it hasn't been set already.  */\n-  if (CPP_OPTION (pfile, user_label_prefix) == NULL)\n-    CPP_OPTION (pfile, user_label_prefix) = USER_LABEL_PREFIX;\n-\n   /* Permanently disable macro expansion if we are rescanning\n      preprocessed text.  */\n   if (CPP_OPTION (pfile, preprocessed))"}, {"sha": "9bccda31bc75fd7b6722303d01341b32bb9c4f3b", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "patch": "@@ -248,9 +248,6 @@ struct cpp_options\n   const char *include_prefix;\n   unsigned int include_prefix_len;\n \n-  /* -fleading_underscore sets this to \"_\".  */\n-  const char *user_label_prefix;\n-\n   /* The language we're preprocessing.  */\n   enum c_lang lang;\n \n@@ -397,6 +394,9 @@ struct cpp_options\n \n   /* Nonzero means chars (wide chars) are unsigned.  */\n   unsigned char unsigned_char, unsigned_wchar;\n+\n+  /* Nonzero means __STDC__ should have the value 0 in system headers.  */\n+  unsigned char stdc_0_in_system_headers;\n };\n \n /* Call backs.  */"}, {"sha": "c7a08f2624338b9f82d6efa6d50561d212f583bf", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "patch": "@@ -172,10 +172,20 @@ builtin_macro (pfile, node)\n \t\t\t\t\t      pfile->cur_token[-1].line));\n       break;\n \n+      /* __STDC__ has the value 1 under normal circumstances.\n+\t However, if (a) we are in a system header, (b) the option\n+\t stdc_0_in_system_headers is true, and (c) __STRICT_ANSI__ is\n+\t not defined, then it has the value 0.  */\n     case BT_STDC:\n       {\n-\tint stdc = (!CPP_IN_SYSTEM_HEADER (pfile)\n-\t\t    || pfile->spec_nodes.n__STRICT_ANSI__->type != NT_VOID);\n+\tint stdc;\n+\tif (CPP_IN_SYSTEM_HEADER (pfile)\n+\t    && CPP_OPTION (pfile, stdc_0_in_system_headers)\n+\t    && pfile->spec_nodes.n__STRICT_ANSI__->type == NT_VOID)\n+\t  stdc = 0;\n+\telse\n+\t  stdc = 1;\n+\n \tresult = new_number_token (pfile, stdc);\n       }\n       break;"}, {"sha": "b58bf9a5f43579f2f3e2fd60e241ed4dadeb3b0b", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "patch": "@@ -103,10 +103,6 @@ int warn_comments;\n \n int no_output;\n \n-/* Value of __USER_LABEL_PREFIX__.  Target-dependent, also controlled\n-   by -f(no-)leading-underscore.  */\n-static const char *user_label_prefix;\n-\n /* I/O buffer structure.\n    The `fname' field is nonzero for source files and #include files\n    and for the dummy text used for -D and -U.\n@@ -631,11 +627,7 @@ main (argc, argv)\n \tbreak;\n \n       case 'f':\n-\tif (!strcmp (argv[i], \"-fleading-underscore\"))\n-\t  user_label_prefix = \"_\";\n-\telse if (!strcmp (argv[i], \"-fno-leading-underscore\"))\n-\t  user_label_prefix = \"\";\n-\telse if (!strcmp (argv[i], \"-fsigned-char\"))\n+\tif (!strcmp (argv[i], \"-fsigned-char\"))\n \t  flag_signed_char = 1;\n \telse if (!strcmp (argv[i], \"-funsigned-char\"))\n \t  flag_signed_char = 0;\n@@ -811,9 +803,6 @@ main (argc, argv)\n       && (deps_missing_files || deps_file || print_deps_phony_targets))\n     fatal (\"you must additionally specify either -M or -MM\");\n \n-  if (user_label_prefix == 0)\n-    user_label_prefix = USER_LABEL_PREFIX;\n-\n   if (print_deps)\n     {\n       /* Set the default target (if there is none already), and\n@@ -5134,8 +5123,9 @@ dump_arg_n (defn, argnum)\n #define DSC(x) U x, sizeof x - 1\n #define install_spec(name, type) \\\n  install(DSC(name), type, -1);\n-#define install_value(name, val) \\\n- hp = install(DSC(name), T_CONST, -1); hp->value.cpval = val;\n+#define install_value(name, val) do { \\\n+ hp = install(DSC(name), T_CONST, -1); hp->value.cpval = val; \\\n+} while (0)\n static void\n initialize_builtins ()\n {\n@@ -5149,9 +5139,6 @@ initialize_builtins ()\n   install_spec (\"__INCLUDE_LEVEL__\", T_INCLUDE_LEVEL);\n   install_spec (\"__LINE__\",          T_SPECLINE);\n \n-  install_value (\"__REGISTER_PREFIX__\",   REGISTER_PREFIX);\n-  install_value (\"__USER_LABEL_PREFIX__\", user_label_prefix);\n-\n   if (flag_signed_char == 0)\n     install_value (\"__CHAR_UNSIGNED__\", \"1\");\n }"}]}