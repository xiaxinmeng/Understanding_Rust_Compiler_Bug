{"sha": "bdbebf669ee8257685c2b6d1c501e899cd20bbea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRiZWJmNjY5ZWU4MjU3Njg1YzJiNmQxYzUwMWU4OTljZDIwYmJlYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-09-26T09:21:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-09-26T09:21:01Z"}, "message": "utils2.c (build_allocator): Set TREE_THIS_NOTRAP on the dereference of the pointer to the storage area.\n\n\t* gcc-interface/utils2.c (build_allocator): Set TREE_THIS_NOTRAP on the\n\tdereference of the pointer to the storage area.  Remove useless type\n\tconversions and factor out common code.\n\nFrom-SVN: r179187", "tree": {"sha": "d5eeb530594acca7eb7796e2ee4c250e186964a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5eeb530594acca7eb7796e2ee4c250e186964a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdbebf669ee8257685c2b6d1c501e899cd20bbea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbebf669ee8257685c2b6d1c501e899cd20bbea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdbebf669ee8257685c2b6d1c501e899cd20bbea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbebf669ee8257685c2b6d1c501e899cd20bbea/comments", "author": null, "committer": null, "parents": [{"sha": "1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa291f7d1b8b9e89c4ad6be87e7553cb269c18f"}], "stats": {"total": 123, "additions": 81, "deletions": 42}, "files": [{"sha": "15ef0b557b3cd4d2e0b4499ab6874021eafe8626", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbebf669ee8257685c2b6d1c501e899cd20bbea/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbebf669ee8257685c2b6d1c501e899cd20bbea/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bdbebf669ee8257685c2b6d1c501e899cd20bbea", "patch": "@@ -1,3 +1,9 @@\n+2011-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils2.c (build_allocator): Set TREE_THIS_NOTRAP on the\n+\tdereference of the pointer to the storage area.  Remove useless type\n+\tconversions and factor out common code.\n+\n 2011-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (maybe_unconstrained_array): Declare TYPE local"}, {"sha": "cf290a397b148de99ecbd016c8bfd74469873a7c", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 32, "deletions": 42, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbebf669ee8257685c2b6d1c501e899cd20bbea/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbebf669ee8257685c2b6d1c501e899cd20bbea/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=bdbebf669ee8257685c2b6d1c501e899cd20bbea", "patch": "@@ -2112,9 +2112,9 @@ build_call_alloc_dealloc (tree gnu_obj, tree gnu_size, tree gnu_type,\n     }\n }\n \f\n-/* Build a GCC tree to correspond to allocating an object of TYPE whose\n+/* Build a GCC tree that corresponds to allocating an object of TYPE whose\n    initial value is INIT, if INIT is nonzero.  Convert the expression to\n-   RESULT_TYPE, which must be some type of pointer.  Return the tree.\n+   RESULT_TYPE, which must be some pointer type, and return the result.\n \n    GNAT_PROC and GNAT_POOL optionally give the procedure to call and\n    the storage pool to use.  GNAT_NODE is used to provide an error\n@@ -2127,8 +2127,7 @@ tree\n build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n                  Entity_Id gnat_pool, Node_Id gnat_node, bool ignore_init_type)\n {\n-  tree size = TYPE_SIZE_UNIT (type);\n-  tree result;\n+  tree size, storage, storage_deref, storage_init;\n \n   /* If the initializer, if present, is a NULL_EXPR, just return a new one.  */\n   if (init && TREE_CODE (init) == NULL_EXPR)\n@@ -2154,19 +2153,19 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n \t\t\t\t\t  get_identifier (\"ALLOC\"), false);\n       tree template_type = TREE_TYPE (TYPE_FIELDS (storage_type));\n       tree storage_ptr_type = build_pointer_type (storage_type);\n-      tree storage;\n \n       size = SUBSTITUTE_PLACEHOLDER_IN_EXPR (TYPE_SIZE_UNIT (storage_type),\n \t\t\t\t\t     init);\n \n-      /* If the size overflows, pass -1 so the allocator will raise\n-\t storage error.  */\n+      /* If the size overflows, pass -1 so Storage_Error will be raised.  */\n       if (TREE_CODE (size) == INTEGER_CST && TREE_OVERFLOW (size))\n \tsize = ssize_int (-1);\n \n       storage = build_call_alloc_dealloc (NULL_TREE, size, storage_type,\n \t\t\t\t\t  gnat_proc, gnat_pool, gnat_node);\n       storage = convert (storage_ptr_type, gnat_protect_expr (storage));\n+      storage_deref = build_unary_op (INDIRECT_REF, NULL_TREE, storage);\n+      TREE_THIS_NOTRAP (storage_deref) = 1;\n \n       /* If there is an initializing expression, then make a constructor for\n \t the entire object including the bounds and copy it into the object.\n@@ -2179,29 +2178,24 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n \t\t\t\t  build_template (template_type, type, init));\n \t  CONSTRUCTOR_APPEND_ELT (v, DECL_CHAIN (TYPE_FIELDS (storage_type)),\n \t\t\t\t  init);\n-\t  return convert\n-\t    (result_type,\n-\t     build2 (COMPOUND_EXPR, storage_ptr_type,\n-\t\t     build_binary_op\n-\t\t     (MODIFY_EXPR, NULL_TREE,\n-\t\t      build_unary_op (INDIRECT_REF, NULL_TREE,\n-\t\t\t\t      convert (storage_ptr_type, storage)),\n-\t\t      gnat_build_constructor (storage_type, v)),\n-\t\t     convert (storage_ptr_type, storage)));\n+\t  storage_init\n+\t    = build_binary_op (MODIFY_EXPR, NULL_TREE, storage_deref,\n+\t\t\t       gnat_build_constructor (storage_type, v));\n \t}\n       else\n-\treturn build2\n-\t  (COMPOUND_EXPR, result_type,\n-\t   build_binary_op\n-\t   (MODIFY_EXPR, NULL_TREE,\n-\t    build_component_ref\n-\t    (build_unary_op (INDIRECT_REF, NULL_TREE,\n-\t\t\t     convert (storage_ptr_type, storage)),\n-\t     NULL_TREE, TYPE_FIELDS (storage_type), false),\n-\t    build_template (template_type, type, NULL_TREE)),\n-\t   convert (result_type, convert (storage_ptr_type, storage)));\n+\tstorage_init\n+\t  = build_binary_op (MODIFY_EXPR, NULL_TREE,\n+\t\t\t     build_component_ref (storage_deref, NULL_TREE,\n+\t\t\t\t\t\t  TYPE_FIELDS (storage_type),\n+\t\t\t\t\t\t  false),\n+\t\t\t     build_template (template_type, type, NULL_TREE));\n+\n+      return build2 (COMPOUND_EXPR, result_type,\n+\t\t     storage_init, convert (result_type, storage));\n     }\n \n+  size = TYPE_SIZE_UNIT (type);\n+\n   /* If we have an initializing expression, see if its size is simpler\n      than the size from the type.  */\n   if (!ignore_init_type && init && TYPE_SIZE_UNIT (TREE_TYPE (init))\n@@ -2221,32 +2215,28 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n \tsize = max_size (size, true);\n     }\n \n-  /* If the size overflows, pass -1 so the allocator will raise\n-     storage error.  */\n+  /* If the size overflows, pass -1 so Storage_Error will be raised.  */\n   if (TREE_CODE (size) == INTEGER_CST && TREE_OVERFLOW (size))\n     size = ssize_int (-1);\n \n-  result = convert (result_type,\n-\t\t    build_call_alloc_dealloc (NULL_TREE, size, type,\n-\t\t\t\t\t      gnat_proc, gnat_pool,\n-\t\t\t\t\t      gnat_node));\n+  storage = convert (result_type,\n+\t\t     build_call_alloc_dealloc (NULL_TREE, size, type,\n+\t\t\t\t\t       gnat_proc, gnat_pool,\n+\t\t\t\t\t       gnat_node));\n \n   /* If we have an initial value, protect the new address, assign the value\n      and return the address with a COMPOUND_EXPR.  */\n   if (init)\n     {\n-      result = gnat_protect_expr (result);\n-      result\n-\t= build2 (COMPOUND_EXPR, TREE_TYPE (result),\n-\t\t  build_binary_op\n-\t\t  (MODIFY_EXPR, NULL_TREE,\n-\t\t   build_unary_op (INDIRECT_REF,\n-\t\t\t\t   TREE_TYPE (TREE_TYPE (result)), result),\n-\t\t   init),\n-\t\t  result);\n+      storage = gnat_protect_expr (storage);\n+      storage_deref = build_unary_op (INDIRECT_REF, NULL_TREE, storage);\n+      TREE_THIS_NOTRAP (storage_deref) = 1;\n+      storage_init\n+\t= build_binary_op (MODIFY_EXPR, NULL_TREE, storage_deref, init);\n+      return build2 (COMPOUND_EXPR, result_type, storage_init, storage);\n     }\n \n-  return convert (result_type, result);\n+  return storage;\n }\n \f\n /* Indicate that we need to take the address of T and that it therefore"}, {"sha": "e7e259465d5dca8807cc0ddbe712a0218bc079b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbebf669ee8257685c2b6d1c501e899cd20bbea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbebf669ee8257685c2b6d1c501e899cd20bbea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bdbebf669ee8257685c2b6d1c501e899cd20bbea", "patch": "@@ -1,3 +1,8 @@\n+2011-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt20.ad[sb]: New test.\n+\t* gnat.dg/opt20_pkg.ads: New helper.\n+\n 2011-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/array17.adb: New test."}, {"sha": "6d3e240bab5f1c218f0506bc750a2b4fea67afd9", "filename": "gcc/testsuite/gnat.dg/opt20.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbebf669ee8257685c2b6d1c501e899cd20bbea/gcc%2Ftestsuite%2Fgnat.dg%2Fopt20.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbebf669ee8257685c2b6d1c501e899cd20bbea/gcc%2Ftestsuite%2Fgnat.dg%2Fopt20.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt20.adb?ref=bdbebf669ee8257685c2b6d1c501e899cd20bbea", "patch": "@@ -0,0 +1,15 @@\n+with Ada.Characters.Handling; use Ada.Characters.Handling;\n+\n+package body Opt20 is\n+\n+   type Build_Mode_State is (None, Static, Dynamic, Relocatable);\n+\n+   procedure Build_Library (For_Project : Integer) is\n+      Project_Name : constant String := Get_Name_String (For_Project);\n+      The_Build_Mode : Build_Mode_State := None;\n+   begin\n+      Fail (Project_Name);\n+      Write_Str (To_Lower (Build_Mode_State'Image (The_Build_Mode)));\n+   end;\n+\n+end Opt20;"}, {"sha": "58833bfab4b043f05bb2f1b9de037192dfd2a191", "filename": "gcc/testsuite/gnat.dg/opt20.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbebf669ee8257685c2b6d1c501e899cd20bbea/gcc%2Ftestsuite%2Fgnat.dg%2Fopt20.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbebf669ee8257685c2b6d1c501e899cd20bbea/gcc%2Ftestsuite%2Fgnat.dg%2Fopt20.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt20.ads?ref=bdbebf669ee8257685c2b6d1c501e899cd20bbea", "patch": "@@ -0,0 +1,10 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -gnatpn\" }\n+\n+with Opt20_Pkg; use Opt20_Pkg;\n+\n+package Opt20 is\n+\n+   procedure Build_Library (For_Project : Integer);\n+\n+end Opt20;"}, {"sha": "2b9b3e8bdf0ccc86ee0f99e496b65c8830eda416", "filename": "gcc/testsuite/gnat.dg/opt20_pkg.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbebf669ee8257685c2b6d1c501e899cd20bbea/gcc%2Ftestsuite%2Fgnat.dg%2Fopt20_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbebf669ee8257685c2b6d1c501e899cd20bbea/gcc%2Ftestsuite%2Fgnat.dg%2Fopt20_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt20_pkg.ads?ref=bdbebf669ee8257685c2b6d1c501e899cd20bbea", "patch": "@@ -0,0 +1,13 @@\n+package Opt20_Pkg is\n+\n+   procedure Write_Str (S : String);\n+\n+   type Fail_Proc is access procedure (S : String);\n+\n+   procedure My_Fail (S : String);\n+\n+   Fail : Fail_Proc := My_Fail'Access;\n+\n+   function Get_Name_String (Id : Integer) return String;\n+\n+end Opt20_Pkg;"}]}