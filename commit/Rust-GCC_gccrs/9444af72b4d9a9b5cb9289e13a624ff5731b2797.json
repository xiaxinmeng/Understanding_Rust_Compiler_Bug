{"sha": "9444af72b4d9a9b5cb9289e13a624ff5731b2797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ0NGFmNzJiNGQ5YTliNWNiOTI4OWUxM2E2MjRmZjU3MzFiMjc5Nw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-05-07T00:43:49Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-05-07T00:43:49Z"}, "message": "Imported version 5.0alpha7.\n\n2000-05-07  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\tImported version 5.0alpha7.\n        * acinclude.m4: Update version to 5.0a7.\n\nFrom-SVN: r33750", "tree": {"sha": "0d22c55f1ff05d1e504f0d4e95fc271a3ca6203f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d22c55f1ff05d1e504f0d4e95fc271a3ca6203f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9444af72b4d9a9b5cb9289e13a624ff5731b2797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9444af72b4d9a9b5cb9289e13a624ff5731b2797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9444af72b4d9a9b5cb9289e13a624ff5731b2797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9444af72b4d9a9b5cb9289e13a624ff5731b2797/comments", "author": null, "committer": null, "parents": [{"sha": "f0acaf02b5e7e9d2727c19d89c7ff5d7ec329eb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0acaf02b5e7e9d2727c19d89c7ff5d7ec329eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0acaf02b5e7e9d2727c19d89c7ff5d7ec329eb0"}], "stats": {"total": 160, "additions": 112, "deletions": 48}, "files": [{"sha": "ba8abd13a0781a562715d68e3399cdc65f99f7bd", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -1,3 +1,8 @@\n+2000-05-07  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\tImported version 5.0alpha7.\n+        * acinclude.m4: Update version to 5.0a7.\n+\n 2000-04-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcconfig.h (SPARC): Define ALIGNMENT to 8 for 64bit SPARC."}, {"sha": "a642262a9ca41b4b13a5dc4f91e64f3010397a0e", "filename": "boehm-gc/NT_MAKEFILE", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2FNT_MAKEFILE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2FNT_MAKEFILE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FNT_MAKEFILE?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -10,10 +10,10 @@ OBJS= alloc.obj reclaim.obj allchblk.obj misc.obj mach_dep.obj os_dep.obj mark_r\n all: gctest.exe cord\\de.exe test_cpp.exe\n \n .c.obj:\n-\t$(cc) $(cdebug) $(cflags) $(cvars) -DSMALL_CONFIG -DSILENT -DALL_INTERIOR_POINTERS -D__STDC__ $*.c /Fo$*.obj\n+\t$(cc) $(cdebug) $(cflags) $(cvars) -DSILENT -DALL_INTERIOR_POINTERS -D__STDC__ $*.c /Fo$*.obj\n \n .cpp.obj:\n-\t$(cc) $(cdebug) $(cflags) $(cvars) -DSMALL_CONFIG -DSILENT -DALL_INTERIOR_POINTERS $*.CPP /Fo$*.obj\n+\t$(cc) $(cdebug) $(cflags) $(cvars) -DSILENT -DALL_INTERIOR_POINTERS $*.CPP /Fo$*.obj\n \n $(OBJS) test.obj: gc_priv.h gc_hdrs.h gc.h\n "}, {"sha": "b89779034fb40bcd2cb45a8b6be7214d03e2fe86", "filename": "boehm-gc/README", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FREADME?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -15,7 +15,7 @@ Permission to modify the code and to distribute modified code is granted,\n provided the above notices are retained, and a notice that the code was\n modified is included with the above copyright notice.\n \n-This is version 5.0alpha6 of a conservative garbage collector for C and C++.\n+This is version 5.0alpha7 of a conservative garbage collector for C and C++.\n \n You might find a more recent version of this at\n \n@@ -26,8 +26,8 @@ HISTORY -\n   Early versions of this collector were developed as a part of research\n projects supported in part by the National Science Foundation\n and the Defense Advance Research Projects Agency.\n-Much of the code was rewritten by Hans-J. Boehm (boehm@acm.org) at Xerox PARC\n-and at SGI.\n+Much of the code was rewritten by Hans-J. Boehm (boehm@acm.org) at Xerox PARC,\n+SGI, and HP Labs.\n \n Some other contributors:  \n \n@@ -1576,9 +1576,31 @@ Since 5.0 alpha4\n  - Added Mingw32 support.  (Thanks again to Jeff Sturm for the patch.)\n  - Changed the alpha port to use the generic register scanning code instead\n    of alpha_mach_dep.s.  Alpha_mach_dep.s doesn't look for pointers in fp\n-   registers, but gcc sometimes spills pointers there.  (Thanks to Manuel Serrano\n-   for helping me debug this by email.)  Changed the IA64 code to do something\n-   similar for similar reasons.\n+   registers, but gcc sometimes spills pointers there.  (Thanks to Manuel\n+   Serrano for helping me debug this by email.)  Changed the IA64 code to\n+   do something similar for similar reasons.\n+\n+Since 5.0alpha6:\n+ - -DREDIRECT_MALLOC was broken in alpha6. Fixed.\n+ - Cleaned up gc_ccp.h slightly, thus also causing the HP C++ compiler to\n+   accept it.\n+ - Removed accidental reference to dbg_mlc.c, which caused dbg_mlc.o to be\n+   linked into every executable.\n+ - Added PREFETCH to bitmap marker.  Changed it to use the header cache.\n+ - GC_push_marked sometimes pushed one object too many, resulting in a\n+   segmentation fault in GC_mark_from_mark_stack.  This was probably an old\n+   bug.  It finally showed up in gctest on win32.\n+ - Gc_priv.h erroneously #defined GC_incremental to be TRUE instead of FALSE\n+   when SMALL_CONFIG was defined.  This was no doubt a major performance bug for\n+   the default win32 configuration.\n+ - Removed -DSMALL_CONFIG from NT_MAKEFILE.  It seemed like an anchronism now\n+   that the average PC has 64MB or so.\n+ - Integrated Bryce McKinley's patches for linux threads and dynamic loading\n+   from the libgcj tree.  Turned on dynamic loading support for Linux/PPC.\n+ - Changed the stack finding code to use environ on HP/UX.  (Thanks\n+   to Gustavo Rodriguez-Rivera for the suggestion.)  This should probably\n+   be done on other platforms, too.  Since I can't test those, that'll\n+   wait until after 5.0.\n \n To do:\n  - Very large root set sizes (> 16 MB or so) could cause the collector"}, {"sha": "c9e36ceeb38e84ca4dfbba6973274066bab50777", "filename": "boehm-gc/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Facinclude.m4?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -31,7 +31,7 @@ AC_SUBST(boehm_gc_basedir)\n \n AC_CANONICAL_HOST\n \n-AM_INIT_AUTOMAKE(boehm-gc, 5.0a6, no-define)\n+AM_INIT_AUTOMAKE(boehm-gc, 5.0a7, no-define)\n \n # FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n # copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We"}, {"sha": "f329cc81a4c27ea92f039ef5344f0b32c7274058", "filename": "boehm-gc/dbg_mlc.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fdbg_mlc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fdbg_mlc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fdbg_mlc.c?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -428,7 +428,31 @@ GC_PTR p;\n     GC_end_stubborn_change(q);\n }\n \n-#endif /* STUBBORN_ALLOC */\n+#else /* !STUBBORN_ALLOC */\n+\n+# ifdef __STDC__\n+    GC_PTR GC_debug_malloc_stubborn(size_t lb, GC_EXTRA_PARAMS)\n+# else\n+    GC_PTR GC_debug_malloc_stubborn(lb, s, i)\n+    size_t lb;\n+    char * s;\n+    int i;\n+# endif\n+{\n+    return GC_debug_malloc(lb, OPT_RA s, i);\n+}\n+\n+void GC_debug_change_stubborn(p)\n+GC_PTR p;\n+{\n+}\n+\n+void GC_debug_end_stubborn_change(p)\n+GC_PTR p;\n+{\n+}\n+\n+#endif /* !STUBBORN_ALLOC */\n \n # ifdef __STDC__\n     GC_PTR GC_debug_malloc_atomic(size_t lb, GC_EXTRA_PARAMS)"}, {"sha": "e70a9ff1e993c65f30572aa33c294b17fd0b1e77", "filename": "boehm-gc/finalize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Ffinalize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Ffinalize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Ffinalize.c?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -619,7 +619,7 @@ void GC_finalize()\n void GC_enqueue_all_finalizers()\n {\n     struct finalizable_object * curr_fo, * prev_fo, * next_fo;\n-    ptr_t real_ptr, real_link;\n+    ptr_t real_ptr;\n     register int i;\n     int fo_size;\n     "}, {"sha": "35686fc3527af57465875082e58438afbb0b571e", "filename": "boehm-gc/gc_cpp.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fgc_cpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fgc_cpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fgc_cpp.h?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -255,12 +255,12 @@ inline gc_cleanup::gc_cleanup() {\n     GC_finalization_proc oldProc;\n     void* oldData;\n     void* base = GC_base( (void *) this );\n-    if (0 == base) return;\n-    GC_REGISTER_FINALIZER_IGNORE_SELF( \n-        base, cleanup, (void*) ((char*) this - (char*) base), \n+    if (0 != base)  {\n+      GC_REGISTER_FINALIZER_IGNORE_SELF( \n+        base, (GC_finalization_proc)cleanup, (void*) ((char*) this - (char*) base), \n         &oldProc, &oldData );\n-    if (0 != oldProc) {\n-        GC_REGISTER_FINALIZER_IGNORE_SELF( base, oldProc, oldData, 0, 0 );}}\n+      if (0 != oldProc) {\n+        GC_REGISTER_FINALIZER_IGNORE_SELF( base, oldProc, oldData, 0, 0 );}}}\n \n inline void* operator new( \n     size_t size, "}, {"sha": "22e9728c8a66b4120d00df71c48892be077d0ed1", "filename": "boehm-gc/gc_priv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fgc_priv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fgc_priv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fgc_priv.h?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -1415,7 +1415,7 @@ extern GC_bool GC_objects_are_marked;\t/* There are marked objects in  */\n   extern GC_bool GC_incremental;\n \t\t\t/* Using incremental/generational collection. */\n #else\n-# define GC_incremental TRUE\n+# define GC_incremental FALSE\n \t\t\t/* Hopefully allow optimizer to remove some code. */\n #endif\n "}, {"sha": "141bdb87dc0726e8061a590a18a2d4a78e6c43a4", "filename": "boehm-gc/gcconfig.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fgcconfig.h?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -386,6 +386,11 @@\n  *\t\tto the nearest plausible page boundary, and use that instead\n  *\t\tof STACKBOTTOM.\n  *\n+ * Gustavo Rodriguez-Rivera points out that on most (all?) Unix machines,\n+ * the value of environ is a pointer that can serve as STACKBOTTOM.\n+ * I expect that HEURISTIC2 can be replaced by this approach, which\n+ * interferes far less with debugging. \n+ *\n  * If no expression for STACKBOTTOM can be found, and neither of the above\n  * heuristics are usable, the collector can still be used with all of the above\n  * undefined, provided one of the following is done:\n@@ -1023,7 +1028,11 @@\n \t/* this.)\t\t\t\t\t\t\t*/\n #       define STACKBOTTOM ((ptr_t) 0x7b033000)  /* from /etc/conf/h/param.h */\n #   else\n-#       define HEURISTIC2\n+\t/* Gustavo Rodriguez-Rivera suggested changing HEURISTIC2\t*/\n+\t/* to this.  We'll probably do this on other platforms, too.\t*/\n+\t/* For now I'll use it where I can test it.\t\t\t*/\n+\textern char ** environ;\n+#       define STACKBOTTOM ((ptr_t)environ)\n #   endif\n #   define STACK_GROWS_UP\n #   define DYNAMIC_LOADING\n@@ -1109,7 +1118,6 @@\n \t\t/* Requires Linux 2.3.47 or later.\t*/\n \textern int _end;\n #\tdefine DATAEND (&_end)\n-\t/* PREFETCH appears to have a large performance impact.\t*/\n #\tdefine PREFETCH(x) \\\n \t  __asm__ (\"\tlfetch\t[%0]\": : \"r\"((void *)(x)))\n #\tdefine PREFETCH_FOR_WRITE(x) \\"}, {"sha": "d77e6acd8daf9ed427adff3fec99f0a3cf2a6f89", "filename": "boehm-gc/mark.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fmark.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fmark.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fmark.c?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -493,7 +493,8 @@ void GC_mark_from_mark_stack()\n             if ((signed_word)descr < 0) {\n               current = *current_p;\n \t      if ((ptr_t)current >= least_ha && (ptr_t)current < greatest_ha) {\n-                PUSH_CONTENTS((ptr_t)current, GC_mark_stack_top_reg,\n+\t\tPREFETCH(current);\n+                HC_PUSH_CONTENTS((ptr_t)current, GC_mark_stack_top_reg,\n \t\t\t      mark_stack_limit, current_p, exit1);\n \t      }\n             }\n@@ -1116,26 +1117,22 @@ struct hblk *h;\n register hdr * hhdr;\n {\n     register int sz = hhdr -> hb_sz;\n+    register int descr = hhdr -> hb_descr;\n     register word * p;\n     register int word_no;\n     register word * lim;\n     register mse * GC_mark_stack_top_reg;\n     register mse * mark_stack_limit = &(GC_mark_stack[GC_mark_stack_size]);\n     \n     /* Some quick shortcuts: */\n-\t{ \n-\t    struct obj_kind *ok = &(GC_obj_kinds[hhdr -> hb_obj_kind]);\n-\t    if ((0 | DS_LENGTH) == ok -> ok_descriptor\n-\t\t&& FALSE == ok -> ok_relocate_descr)\n-\t\treturn;\n-\t}\n+\tif ((0 | DS_LENGTH) == descr) return;\n         if (GC_block_empty(hhdr)/* nothing marked */) return;\n #   ifdef GATHERSTATS\n         GC_n_rescuing_pages++;\n #   endif\n     GC_objects_are_marked = TRUE;\n     if (sz > MAXOBJSZ) {\n-        lim = (word *)(h + 1);\n+        lim = (word *)h + HDR_WORDS;\n     } else {\n         lim = (word *)(h + 1) - sz;\n     }\n@@ -1158,10 +1155,6 @@ register hdr * hhdr;\n       GC_mark_stack_top_reg = GC_mark_stack_top;\n       for (p = (word *)h + HDR_WORDS, word_no = HDR_WORDS; p <= lim;\n          p += sz, word_no += sz) {\n-         /* This ignores user specified mark procs.  This currently\t*/\n-         /* doesn't matter, since marking from the whole object\t\t*/\n-         /* is always sufficient, and we will eventually use the user\t*/\n-         /* mark proc to avoid any bogus pointers.\t\t\t*/\n          if (mark_bit_from_hdr(hhdr, word_no)) {\n            /* Mark from fields inside the object */\n              PUSH_OBJ((word *)p, hhdr, GC_mark_stack_top_reg, mark_stack_limit);"}, {"sha": "636495ed039c38536f9978d56485e5e84d8d2949", "filename": "boehm-gc/os_dep.c", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fos_dep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fos_dep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fos_dep.c?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -642,31 +642,48 @@ ptr_t GC_get_stack_base()\n \n #ifdef LINUX_STACKBOTTOM\n \n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <fcntl.h>\n+\n # define STAT_SKIP 27   /* Number of fields preceding startstack\t*/\n \t\t\t/* field in /proc/self/stat\t\t\t*/\n \n   ptr_t GC_linux_stack_base(void)\n   {\n-    FILE *f;\n+    /* We read the stack base value from /proc/self/stat.  We do this\t*/\n+    /* using direct I/O system calls in order to avoid calling malloc   */\n+    /* in case REDIRECT_MALLOC is defined.\t\t\t\t*/ \n+#   define STAT_BUF_SIZE 4096\n+#   ifdef USE_LD_WRAP\n+#\tdefine STAT_READ __real_read\n+#   else\n+#\tdefine STAT_READ read\n+#   endif    \n+    char stat_buf[STAT_BUF_SIZE];\n+    int f;\n     char c;\n     word result = 0;\n-    int i;\n+    size_t i, buf_offset = 0;\n \n-    f = fopen(\"/proc/self/stat\", \"r\");\n-    if (NULL == f) ABORT(\"Couldn't open /proc/self/stat\");\n-    c = getc(f);\n+    f = open(\"/proc/self/stat\", O_RDONLY);\n+    if (f < 0 || read(f, stat_buf, STAT_BUF_SIZE) < 2 * STAT_SKIP) {\n+\tABORT(\"Couldn't read /proc/self/stat\");\n+    }\n+    c = stat_buf[buf_offset++];\n     /* Skip the required number of fields.  This number is hopefully\t*/\n     /* constant across all Linux implementations.\t\t\t*/\n       for (i = 0; i < STAT_SKIP; ++i) {\n-\twhile (isspace(c)) c = getc(f);\n-\twhile (!isspace(c)) c = getc(f);\n+\twhile (isspace(c)) c = stat_buf[buf_offset++];\n+\twhile (!isspace(c)) c = stat_buf[buf_offset++];\n       }\n-    while (isspace(c)) c = getc(f);\n+    while (isspace(c)) c = stat_buf[buf_offset++];\n     while (isdigit(c)) {\n       result *= 10;\n       result += c - '0';\n-      c = getc(f);\n+      c = stat_buf[buf_offset++];\n     }\n+    close(f);\n     if (result < 0x10000000) ABORT(\"Absurd stack bottom value\");\n     return (ptr_t)result;\n   }"}, {"sha": "57c652ef2655cfa4ebeb5f262dc38614ad8bb905", "filename": "boehm-gc/reclaim.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Freclaim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Freclaim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Freclaim.c?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -29,13 +29,8 @@ word sz;\n     } else {\n         GC_err_printf0(\"Leaked composite object at \");\n     }\n-    if (GC_debugging_started && GC_has_debug_info(p)) {\n-        GC_print_obj(p);\n-    } else {\n-        GC_err_printf2(\"0x%lx (appr. size = %ld)\\n\",\n-       \t\t      (unsigned long)p,\n-       \t\t      (unsigned long)WORDS_TO_BYTES(sz));\n-    }\n+    GC_print_heap_obj(p);\n+    GC_err_printf0(\"\\n\");\n }\n \n #   define FOUND_FREE(hblk, word_no) \\"}, {"sha": "2aedacce5319df1d232815168b17bd7a72408d40", "filename": "boehm-gc/version.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444af72b4d9a9b5cb9289e13a624ff5731b2797/boehm-gc%2Fversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fversion.h?ref=9444af72b4d9a9b5cb9289e13a624ff5731b2797", "patch": "@@ -1,6 +1,6 @@\n #define GC_VERSION_MAJOR 5\n #define GC_VERSION_MINOR 0\n-#define GC_ALPHA_VERSION 6\n+#define GC_ALPHA_VERSION 7\n \n #   define GC_NOT_ALPHA 0xff\n "}]}