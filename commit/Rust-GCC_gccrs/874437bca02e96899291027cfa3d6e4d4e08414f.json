{"sha": "874437bca02e96899291027cfa3d6e4d4e08414f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc0NDM3YmNhMDJlOTY4OTkyOTEwMjdjZmEzZDZlNGQ0ZTA4NDE0Zg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-12-01T00:33:05Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-12-01T00:33:05Z"}, "message": "sbitmap.c (sbitmap_any_common_bits): New function.\n\n\n\n        * sbitmap.c (sbitmap_any_common_bits): New function.\n        * sbitmap.h (sbitmap_any_common_bits): Prototype.\n        * modulo-sched.c (sms_schedule_by_order): Use sbitmap_any_common_bits\n        No longer allocate/free \"psp\", \"pss\" sbitmaps.\n        * tree-ssa-alias.c (compute_flow_insensitive_aliasing): Similarly for\n        the \"res\" sbitmap.\n        (group_aliases): Similarly.\n\nFrom-SVN: r91550", "tree": {"sha": "cd189cb08fa13a7f1b8b3f73f4d5e9b4b6f53621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd189cb08fa13a7f1b8b3f73f4d5e9b4b6f53621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/874437bca02e96899291027cfa3d6e4d4e08414f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874437bca02e96899291027cfa3d6e4d4e08414f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/874437bca02e96899291027cfa3d6e4d4e08414f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874437bca02e96899291027cfa3d6e4d4e08414f/comments", "author": null, "committer": null, "parents": [{"sha": "29b0a291d41c929c8b86f40da25071e09beeb7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b0a291d41c929c8b86f40da25071e09beeb7a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b0a291d41c929c8b86f40da25071e09beeb7a6"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "5bbe2e995f6b6cfffe39ff936dfdd2813d331aaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874437bca02e96899291027cfa3d6e4d4e08414f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874437bca02e96899291027cfa3d6e4d4e08414f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=874437bca02e96899291027cfa3d6e4d4e08414f", "patch": "@@ -1,3 +1,13 @@\n+2004-11-30  Jeff Law  <law@redhat.com>\n+\n+\t* sbitmap.c (sbitmap_any_common_bits): New function.\n+\t* sbitmap.h (sbitmap_any_common_bits): Prototype.\n+\t* modulo-sched.c (sms_schedule_by_order): Use sbitmap_any_common_bits\n+\tNo longer allocate/free \"psp\", \"pss\" sbitmaps.\n+\t* tree-ssa-alias.c (compute_flow_insensitive_aliasing): Similarly for\n+\tthe \"res\" sbitmap.\n+\t(group_aliases): Similarly.\n+\n 2004-11-30  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* tree-vectorizer.c (vect_analyze_data_refs): Reformat and avoid"}, {"sha": "57879baf799b10e48a8ba784a671a39c8689d93f", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874437bca02e96899291027cfa3d6e4d4e08414f/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874437bca02e96899291027cfa3d6e4d4e08414f/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=874437bca02e96899291027cfa3d6e4d4e08414f", "patch": "@@ -1219,8 +1219,6 @@ sms_schedule_by_order (ddg_ptr g, int mii, int maxii, int *nodes_order, FILE *du\n   ddg_edge_ptr e;\n   int start, end, step; /* Place together into one struct?  */\n   sbitmap sched_nodes = sbitmap_alloc (num_nodes);\n-  sbitmap psp = sbitmap_alloc (num_nodes);\n-  sbitmap pss = sbitmap_alloc (num_nodes);\n   sbitmap must_precede = sbitmap_alloc (num_nodes);\n   sbitmap must_follow = sbitmap_alloc (num_nodes);\n \n@@ -1250,10 +1248,8 @@ sms_schedule_by_order (ddg_ptr g, int mii, int maxii, int *nodes_order, FILE *du\n \t    continue;\n \n \t  /* 1. compute sched window for u (start, end, step).  */\n-\t  sbitmap_zero (psp);\n-\t  sbitmap_zero (pss);\n-\t  psp_not_empty = sbitmap_a_and_b_cg (psp, u_node_preds, sched_nodes);\n-\t  pss_not_empty = sbitmap_a_and_b_cg (pss, u_node_succs, sched_nodes);\n+\t  psp_not_empty = sbitmap_any_common_bits (u_node_preds, sched_nodes);\n+\t  pss_not_empty = sbitmap_any_common_bits (u_node_succs, sched_nodes);\n \n \t  if (psp_not_empty && !pss_not_empty)\n \t    {\n@@ -1399,8 +1395,6 @@ sms_schedule_by_order (ddg_ptr g, int mii, int maxii, int *nodes_order, FILE *du\n     } /* While try_again_with_larger_ii.  */\n \n   sbitmap_free (sched_nodes);\n-  sbitmap_free (psp);\n-  sbitmap_free (pss);\n \n   if (ii >= maxii)\n     {"}, {"sha": "7c912a922afc6a17e4d25fd90c66811fe8fab029", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874437bca02e96899291027cfa3d6e4d4e08414f/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874437bca02e96899291027cfa3d6e4d4e08414f/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=874437bca02e96899291027cfa3d6e4d4e08414f", "patch": "@@ -316,6 +316,24 @@ sbitmap_difference (sbitmap dst, sbitmap a, sbitmap b)\n       *dstp++ = *ap++;\n }\n \n+/* Return true if there are any bits set in A are also set in B.\n+   Return false otherwise.  */\n+\n+bool\n+sbitmap_any_common_bits (sbitmap a, sbitmap b)\n+{\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+  unsigned int i, n;\n+\n+  n = MIN (a->size, b->size);\n+  for (i = 0; i < n; i++)\n+    if ((*ap++ & *bp++) != 0)\n+      return true;\n+\n+  return false;\n+}\n+\n /* Set DST to be (A and B).\n    Return nonzero if any change is made.  */\n "}, {"sha": "edaa0580ebfd48865877647fa7e9d336607eb093", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874437bca02e96899291027cfa3d6e4d4e08414f/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874437bca02e96899291027cfa3d6e4d4e08414f/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=874437bca02e96899291027cfa3d6e4d4e08414f", "patch": "@@ -141,6 +141,7 @@ extern void sbitmap_a_or_b_and_c (sbitmap, sbitmap, sbitmap, sbitmap);\n extern bool sbitmap_a_or_b_and_c_cg (sbitmap, sbitmap, sbitmap, sbitmap);\n extern void sbitmap_a_and_b_or_c (sbitmap, sbitmap, sbitmap, sbitmap);\n extern bool sbitmap_a_and_b_or_c_cg (sbitmap, sbitmap, sbitmap, sbitmap);\n+extern bool sbitmap_any_common_bits (sbitmap, sbitmap);\n extern void sbitmap_a_and_b (sbitmap, sbitmap, sbitmap);\n extern bool sbitmap_a_and_b_cg (sbitmap, sbitmap, sbitmap);\n extern void sbitmap_a_or_b (sbitmap, sbitmap, sbitmap);"}, {"sha": "37ea0f25290b7c1435bf8c095be45d09d05387d0", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874437bca02e96899291027cfa3d6e4d4e08414f/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874437bca02e96899291027cfa3d6e4d4e08414f/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=874437bca02e96899291027cfa3d6e4d4e08414f", "patch": "@@ -927,7 +927,6 @@ static void\n compute_flow_insensitive_aliasing (struct alias_info *ai)\n {\n   size_t i;\n-  sbitmap res;\n \n   /* Initialize counter for the total number of virtual operands that\n      aliasing will introduce.  When AI->TOTAL_ALIAS_VOPS goes beyond the\n@@ -1021,8 +1020,6 @@ compute_flow_insensitive_aliasing (struct alias_info *ai)\n      To avoid this problem, we do a final traversal of AI->POINTERS\n      looking for pairs of pointers that have no aliased symbols in\n      common and yet have conflicting alias set numbers.  */\n-  res = sbitmap_alloc (num_referenced_vars);\n-\n   for (i = 0; i < ai->num_pointers; i++)\n     {\n       size_t j;\n@@ -1042,8 +1039,7 @@ compute_flow_insensitive_aliasing (struct alias_info *ai)\n \n \t  /* The two pointers may alias each other.  If they already have\n \t     symbols in common, do nothing.  */\n-\t  sbitmap_a_and_b (res, may_aliases1, may_aliases2);\n-\t  if (sbitmap_first_set_bit (res) >= 0)\n+\t  if (sbitmap_any_common_bits (may_aliases1, may_aliases2))\n \t    continue;\n \n \t  if (sbitmap_first_set_bit (may_aliases2) >= 0)\n@@ -1065,8 +1061,6 @@ compute_flow_insensitive_aliasing (struct alias_info *ai)\n \t}\n     }\n \n-  sbitmap_free (res);\n-\n   if (dump_file)\n     fprintf (dump_file, \"%s: Total number of aliased vops: %ld\\n\",\n \t     get_name (current_function_decl),\n@@ -1209,15 +1203,12 @@ static void\n group_aliases (struct alias_info *ai)\n {\n   size_t i;\n-  sbitmap res;\n \n   /* Sort the POINTERS array in descending order of contributed\n      virtual operands.  */\n   qsort (ai->pointers, ai->num_pointers, sizeof (struct alias_map_d *),\n          total_alias_vops_cmp);\n \n-  res = sbitmap_alloc (num_referenced_vars);\n-\n   /* For every pointer in AI->POINTERS, reverse the roles of its tag\n      and the tag's may-aliases set.  */\n   for (i = 0; i < ai->num_pointers; i++)\n@@ -1237,8 +1228,7 @@ group_aliases (struct alias_info *ai)\n \t{\n \t  sbitmap tag2_aliases = ai->pointers[j]->may_aliases;\n \n-\t  sbitmap_a_and_b (res, tag1_aliases, tag2_aliases);\n-\t  if (sbitmap_first_set_bit (res) >= 0)\n+          if (sbitmap_any_common_bits (tag1_aliases, tag2_aliases))\n \t    {\n \t      tree tag2 = var_ann (ai->pointers[j]->var)->type_mem_tag;\n \n@@ -1308,8 +1298,6 @@ group_aliases (struct alias_info *ai)\n \t}\n     }\n \n-  sbitmap_free (res);\n-\n   if (dump_file)\n     fprintf (dump_file,\n \t     \"%s: Total number of aliased vops after grouping: %ld%s\\n\","}]}