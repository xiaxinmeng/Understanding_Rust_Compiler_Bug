{"sha": "a1105617991df6ea134ea207e4bcdb2b05e6e540", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExMDU2MTc5OTFkZjZlYTEzNGVhMjA3ZTRiY2RiMmIwNWU2ZTU0MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-27T07:09:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-27T07:09:43Z"}, "message": "c-decl.c, [...]: Fix comment typos and formatting.\n\n\t* c-decl.c, c-ppoutput.c, combine.c, cppfiles.c, dwarf2out.c,\n\texpr.c, fold-const.c, gcc.c, haifa-sched.c, loop-iv.c,\n\tparams.def, read-rtl.c, rtl.c, rtlanal.c, toplev.c: Fix\n\tcomment typos and formatting.  Follow spelling conventions.\n\nFrom-SVN: r78555", "tree": {"sha": "f41f4b240dc12ae9461209e19a5a72a2a6dc5e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f41f4b240dc12ae9461209e19a5a72a2a6dc5e0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1105617991df6ea134ea207e4bcdb2b05e6e540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1105617991df6ea134ea207e4bcdb2b05e6e540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1105617991df6ea134ea207e4bcdb2b05e6e540", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1105617991df6ea134ea207e4bcdb2b05e6e540/comments", "author": null, "committer": null, "parents": [{"sha": "40fcf31b2f6ddd6c3b604620446e6447b8942745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fcf31b2f6ddd6c3b604620446e6447b8942745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40fcf31b2f6ddd6c3b604620446e6447b8942745"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "a0677fe487432339e6d34644c30e39ec206403b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -1,3 +1,10 @@\n+2004-02-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-decl.c, c-ppoutput.c, combine.c, cppfiles.c, dwarf2out.c,\n+\texpr.c, fold-const.c, gcc.c, haifa-sched.c, loop-iv.c,\n+\tparams.def, read-rtl.c, rtl.c, rtlanal.c, toplev.c: Fix\n+\tcomment typos and formatting.  Follow spelling conventions.\n+\n 2004-02-26  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.md: Add fixuns_truncsfsi2 and"}, {"sha": "1145363a643b9e8f08a36aa766b29010c0d372ae", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -611,7 +611,7 @@ poplevel (int keep, int dummy ATTRIBUTE_UNUSED, int functionbody)\n \t      && DECL_NAME (p)\n \t      && !DECL_ARTIFICIAL (p))\n \t    warning (\"%Junused variable `%D'\", p, p);\n-\t  /* fall through */\n+\t  /* Fall through.  */\n \n \tdefault:\n \tnormal:\n@@ -1016,7 +1016,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   if (TREE_CODE (newdecl) == TYPE_DECL)\n     {\n       if (DECL_IN_SYSTEM_HEADER (newdecl) || DECL_IN_SYSTEM_HEADER (olddecl))\n-\treturn true;  /* allow OLDDECL to continue in use */\n+\treturn true;  /* Allow OLDDECL to continue in use.  */\n       \n       error (\"%Jredefinition of typedef '%D'\", newdecl, newdecl);\n       locate_old_decl (olddecl, error);"}, {"sha": "4d83b5d01e2c79c89cafdfb4577d284ab5339387", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -36,7 +36,7 @@ static struct\n   const cpp_token *source;\t/* Source token for spacing.  */\n   int src_line;\t\t\t/* Line number currently being written.  */\n   unsigned char printed;\t/* Nonzero if something output at line.  */\n-  bool first_time;\t\t/* pp_file_change hasn't been called yet. */\n+  bool first_time;\t\t/* pp_file_change hasn't been called yet.  */\n } print;\n \n /* General output routines.  */"}, {"sha": "b7cad3fcbad51213ff1061ea5a2045123f8bbfaa", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -1452,7 +1452,7 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n   int added_sets_1, added_sets_2;\n   /* Total number of SETs to put into I3.  */\n   int total_sets;\n-  /* Nonzero is I2's body now appears in I3.  */\n+  /* Nonzero if I2's body now appears in I3.  */\n   int i2_is_used;\n   /* INSN_CODEs for new I3, new I2, and user of condition code.  */\n   int insn_code_number, i2_code_number = 0, other_code_number = 0;"}, {"sha": "b40521b5ed64ec3ab1c1c5b8b615f665edb50da2", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -109,7 +109,7 @@ struct _cpp_file\n   /* If BUFFER above contains the true contents of the file.  */\n   bool buffer_valid;\n \n-  /* File is a PCH (on return from find_include_file). */\n+  /* File is a PCH (on return from find_include_file).  */\n   bool pch;\n };\n "}, {"sha": "841827ba5974c763fb3e3b17a92c4e703880c3a0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -9873,7 +9873,7 @@ add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree b\n \t  || (bound_attr == DW_AT_lower_bound\n \t      && (((is_c_family () || is_java ()) &&  integer_zerop (bound))\n \t\t  || (is_fortran () && integer_onep (bound)))))\n-\t/* use the default */\n+\t/* Use the default.  */\n \t;\n       else\n \tadd_AT_unsigned (subrange_die, bound_attr, tree_low_cst (bound, 0));\n@@ -12882,7 +12882,7 @@ dwarf2out_source_line (unsigned int line, const char *filename)\n \t  (*targetm.asm_out.internal_label) (asm_out_file, SEPARATE_LINE_CODE_LABEL,\n \t\t\t\t     separate_line_info_table_in_use);\n \n-\t  /* expand the line info table if necessary */\n+\t  /* Expand the line info table if necessary.  */\n \t  if (separate_line_info_table_in_use\n \t      == separate_line_info_table_allocated)\n \t    {"}, {"sha": "bf1460649f363732a22cc4f80832c1e33f59fd3c", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -645,7 +645,7 @@ convert_move (rtx to, rtx from, int unsignedp)\n       if (to_mode == full_mode)\n \treturn;\n \n-      /* else proceed to integer conversions below */\n+      /* else proceed to integer conversions below.  */\n       from_mode = full_mode;\n     }\n "}, {"sha": "956478af001fcbf300d6462ff352e72876339f64", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -718,7 +718,7 @@ div_and_round_double (enum tree_code code, int uns,\n   if (quo_neg)\n     neg_double (*lquo, *hquo, lquo, hquo);\n \n-  /* compute trial remainder:  rem = num - (quo * den)  */\n+  /* Compute trial remainder:  rem = num - (quo * den)  */\n   mul_double (*lquo, *hquo, lden_orig, hden_orig, lrem, hrem);\n   neg_double (*lrem, *hrem, lrem, hrem);\n   add_double (lnum_orig, hnum_orig, *lrem, *hrem, lrem, hrem);"}, {"sha": "78e82c49bd9e10398e8ee2bcbcaeca98a8679dea", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -6493,7 +6493,7 @@ lookup_compiler (const char *name, size_t length, const char *language)\n     }\n \n #if defined (OS2) ||defined (HAVE_DOS_BASED_FILE_SYSTEM)\n-  /* look again, but case-insensitively this time.  */\n+  /* Look again, but case-insensitively this time.  */\n   if (cp < compilers)\n     for (cp = compilers + n_compilers - 1; cp >= compilers; cp--)\n       {"}, {"sha": "34e8606ce7c17aa0c3f7c890e974d59d17da1532", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -1952,7 +1952,7 @@ early_queue_to_ready (state_t state, struct ready_list *ready)\n \n \t\t      insns_removed++;\n \t\t      if (insns_removed == flag_sched_stalled_insns)\n-\t\t\t/* remove only one insn from Q at a time */\n+\t\t\t/* Remove only one insn from Q at a time.  */\n \t\t\treturn insns_removed;\n \t\t    }\n \t\t}"}, {"sha": "9c170dec2eceeeeae3bf41db0bc441908e47ea77", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -34,7 +34,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    interesting reg, it is now easy to find a reaching definition (there may be\n    only one).\n \n-   Induction variable is then simply analysed by walking the use-def\n+   Induction variable is then simply analyzed by walking the use-def\n    chains.\n    \n    Usage:\n@@ -501,7 +501,7 @@ iv_add (struct rtx_iv *iv0, struct rtx_iv *iv1, enum rtx_code op)\n   enum machine_mode mode;\n   rtx arg;\n \n-  /* Extend the constant to extend_mode of the other operand if neccesary.  */\n+  /* Extend the constant to extend_mode of the other operand if necessary.  */\n   if (iv0->extend == NIL\n       && iv0->mode == iv0->extend_mode\n       && iv0->step == const0_rtx\n@@ -862,7 +862,7 @@ iv_analyze_biv (rtx def, struct rtx_iv *iv)\n   return iv->base != NULL_RTX;\n }\n \n-/* Analyses operand OP of INSN and stores the result to *IV.  */\n+/* Analyzes operand OP of INSN and stores the result to *IV.  */\n \n static bool\n iv_analyze_op (rtx insn, rtx op, struct rtx_iv *iv)\n@@ -927,7 +927,7 @@ iv_analyze_op (rtx insn, rtx op, struct rtx_iv *iv)\n   return iv_analyze (def_insn, op, iv);\n }\n \n-/* Analyses iv DEF defined in INSN and stores the result to *IV.  */\n+/* Analyzes iv DEF defined in INSN and stores the result to *IV.  */\n \n bool\n iv_analyze (rtx insn, rtx def, struct rtx_iv *iv)\n@@ -1746,7 +1746,7 @@ shorten_into_mode (struct rtx_iv *iv, enum machine_mode mode,\n }\n \n /* Transforms IV0 and IV1 compared by COND so that they are both compared as\n-   subregs of the same mode if possible (sometimes it is neccesary to add\n+   subregs of the same mode if possible (sometimes it is necessary to add\n    some assumptions to DESC).  */\n \n static bool\n@@ -2082,7 +2082,7 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n \t\t obviously if the test for overflow during that transformation\n \t\t passed, we cannot overflow here.  Most importantly any\n \t\t loop with sharp end condition and step 1 falls into this\n-\t\t cathegory, so handling this case specially is definitely\n+\t\t category, so handling this case specially is definitely\n \t\t worth the troubles.  */\n \t      may_xform = const_true_rtx;\n \t    }"}, {"sha": "e00e22e3b0d19d2bb6b53265b8a630fe89171973", "filename": "gcc/params.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -137,7 +137,7 @@ DEFPARAM(PARAM_MAX_GCSE_PASSES,\n    \n    This limit should be at most half of the peeling limits:  loop unroller\n    decides to not unroll loops that iterate fewer than 2*number of allowed\n-   unrollings and thus we would have loops that are neither peeled or unrooled\n+   unrollings and thus we would have loops that are neither peeled or unrolled\n    otherwise.  */\n DEFPARAM(PARAM_MAX_UNROLLED_INSNS,\n \t \"max-unrolled-insns\","}, {"sha": "377eb7e051e470ab4b3a48650603f14d5ceee845", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -630,7 +630,7 @@ read_rtx (FILE *infile)\n \t  if (c != '[')\n \t    fatal_expected_char (infile, '[', c);\n \n-\t  /* add expressions to a list, while keeping a count */\n+\t  /* Add expressions to a list, while keeping a count.  */\n \t  obstack_init (&vector_stack);\n \t  while ((c = read_skip_spaces (infile)) && c != ']')\n \t    {"}, {"sha": "6449630b92f15be8232d6bebc235b29463ca6318", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -156,7 +156,7 @@ rtvec_alloc (int n)\n   rtvec rt;\n \n   rt = ggc_alloc_rtvec (n);\n-  /* clear out the vector */\n+  /* Clear out the vector.  */\n   memset (&rt->elem[0], 0, n * sizeof (rtx));\n \n   PUT_NUM_ELEM (rt, n);"}, {"sha": "064e4bc6af447f626989e2cd851453bf5f01929f", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -3325,7 +3325,7 @@ subreg_offset_representable_p (unsigned int xregno, enum machine_mode xmode,\n   nregs_xmode = hard_regno_nregs[xregno][xmode];\n   nregs_ymode = hard_regno_nregs[xregno][ymode];\n \n-  /* paradoxical subregs are always valid.  */\n+  /* Paradoxical subregs are always valid.  */\n   if (offset == 0\n       && nregs_ymode > nregs_xmode\n       && (GET_MODE_SIZE (ymode) > UNITS_PER_WORD"}, {"sha": "10a3b12ac402a7709403813abe9cd64db61f0404", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1105617991df6ea134ea207e4bcdb2b05e6e540/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a1105617991df6ea134ea207e4bcdb2b05e6e540", "patch": "@@ -696,7 +696,7 @@ int flag_gcse_lm = 1;\n \n int flag_gcse_sm = 1;\n \n-/* Nonzero if we want to perfrom redundant load after store elimination\n+/* Nonzero if we want to perform redundant load after store elimination\n    in gcse.  */\n \n int flag_gcse_las = 1;"}]}