{"sha": "5936d944f8fffbb02f9c694645d37f60603a8a25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkzNmQ5NDRmOGZmZmJiMDJmOWM2OTQ2NDVkMzdmNjA2MDNhOGEyNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-06-01T15:49:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-06-01T15:49:37Z"}, "message": "fwprop.c: Make emit-rtl.h include last.\n\n\n\t* fwprop.c: Make emit-rtl.h include last.\n\t* rtlanal.c: Include emit-rtl.h.\n\t* genautomata.c: Output emit-rtl include into insn-automata.c\n\t* df-scan.c: Include emit-rtl.h.\n\t* haifa-sched.c: Indlude emit-rtl.h.\n\t* mode-switching.c: Indlude emit-rtl.h.\n\t* graph.c: Indlude emit-rtl.h.\n\t* sel-sched.c: Include emit-rtl.h.\n\t* sel-sched-ir.c: Include emit-rtl.h.\n\t* ira-build.c: Include emit-rtl.h.\n\t* emit-rtl.c: (first_insn, last_insn): Remove defines.\n\t(get_insns, set_first_insn, get_last_insn, set_last_insn, get_max_uid):\n\tMove to emit-rtl.h.\n\t(set_new_first_and_last_insn, get_last_insn_anywhere, get_first_nonnote_insn,\n\tget_last_nonnote_insn, try_split, make_call_insn_raw, add_insn_after,\n\tadd_insn_before, remove_insn, delete_insns_since, reorder_insns_nobb,\n\temit_insn_after_1, emit_debug_insn_before, emit_insn, start_sequence,\n\tpush_to_sequence, push_to_sequence2, push_topmost_sequence, end_sequence,\n\tcopy_insn): Use accessor functions.\n\t* emit-rtl.h (gen_blockage, gen_rtvec, copy_insn_1, copy_insn,\n\t gen_int_mode, emit_copy_of_insn_after, set_reg_attrs_from_value,\n\tset_reg_attrs_for_parm, set_reg_attrs_for_decl_rtl, adjust_reg_mode,\n\tmem_expr_equal_p): Move here from rtl.h\n\t(get_insns, set_first-insn, get_last_insn, set_last_insn, get_max_uid):\n\tMove here from emit-rtl.c; make inline.\n\t* cfglayout.h: Include emit-rtl.h\n\t* rtl.h (gen_blockage, gen_rtvec, copy_insn_1, copy_insn,\n\t gen_int_mode, emit_copy_of_insn_after, set_reg_attrs_from_value,\n\tset_reg_attrs_for_parm, set_reg_attrs_for_decl_rtl, adjust_reg_mode,\n\tmem_expr_equal_p, get_insns, set_first-insn, get_last_insn, set_last_insn,\n\tget_max_uid): Move to emit-rtl.h.\n\t* reg-stack.c: Include emit-rtl.h\n\t* dce.c: Likewise.\n\nFrom-SVN: r160111", "tree": {"sha": "1b6ee9a54e64f4b81990716e8025ba5a494502fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b6ee9a54e64f4b81990716e8025ba5a494502fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5936d944f8fffbb02f9c694645d37f60603a8a25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5936d944f8fffbb02f9c694645d37f60603a8a25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5936d944f8fffbb02f9c694645d37f60603a8a25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5936d944f8fffbb02f9c694645d37f60603a8a25/comments", "author": null, "committer": null, "parents": [{"sha": "91382288079e2b47f7a18252051036e4f76c6ada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91382288079e2b47f7a18252051036e4f76c6ada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91382288079e2b47f7a18252051036e4f76c6ada"}], "stats": {"total": 294, "additions": 169, "deletions": 125}, "files": [{"sha": "d9a90e8987a5bdb1e5d7421c5c7d501c1d137ee8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -1,3 +1,39 @@\n+2010-06-01  Jan Hubicka  <jh@suse.cz>\n+\n+\t* fwprop.c: Make emit-rtl.h include last.\n+\t* rtlanal.c: Include emit-rtl.h.\n+\t* genautomata.c: Output emit-rtl include into insn-automata.c\n+\t* df-scan.c: Include emit-rtl.h.\n+\t* haifa-sched.c: Indlude emit-rtl.h.\n+\t* mode-switching.c: Indlude emit-rtl.h.\n+\t* graph.c: Indlude emit-rtl.h.\n+\t* sel-sched.c: Include emit-rtl.h.\n+\t* sel-sched-ir.c: Include emit-rtl.h.\n+\t* ira-build.c: Include emit-rtl.h.\n+\t* emit-rtl.c: (first_insn, last_insn): Remove defines.\n+\t(get_insns, set_first_insn, get_last_insn, set_last_insn, get_max_uid):\n+\tMove to emit-rtl.h.\n+\t(set_new_first_and_last_insn, get_last_insn_anywhere, get_first_nonnote_insn,\n+\tget_last_nonnote_insn, try_split, make_call_insn_raw, add_insn_after,\n+\tadd_insn_before, remove_insn, delete_insns_since, reorder_insns_nobb,\n+\temit_insn_after_1, emit_debug_insn_before, emit_insn, start_sequence,\n+\tpush_to_sequence, push_to_sequence2, push_topmost_sequence, end_sequence,\n+\tcopy_insn): Use accessor functions.\n+\t* emit-rtl.h (gen_blockage, gen_rtvec, copy_insn_1, copy_insn,\n+\t gen_int_mode, emit_copy_of_insn_after, set_reg_attrs_from_value,\n+\tset_reg_attrs_for_parm, set_reg_attrs_for_decl_rtl, adjust_reg_mode,\n+\tmem_expr_equal_p): Move here from rtl.h\n+\t(get_insns, set_first-insn, get_last_insn, set_last_insn, get_max_uid):\n+\tMove here from emit-rtl.c; make inline.\n+\t* cfglayout.h: Include emit-rtl.h\n+\t* rtl.h (gen_blockage, gen_rtvec, copy_insn_1, copy_insn,\n+\t gen_int_mode, emit_copy_of_insn_after, set_reg_attrs_from_value,\n+\tset_reg_attrs_for_parm, set_reg_attrs_for_decl_rtl, adjust_reg_mode,\n+\tmem_expr_equal_p, get_insns, set_first-insn, get_last_insn, set_last_insn,\n+\tget_max_uid): Move to emit-rtl.h.\n+\t* reg-stack.c: Include emit-rtl.h\n+\t* dce.c: Likewise.\n+\n 2010-06-01  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.h (tree_function_versioning): Update prototype."}, {"sha": "703dfe1680806369ae085bf19d43cbd3a42d3e6d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -2025,7 +2025,7 @@ c-pragma.o: c-pragma.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n     opts.h $(PLUGINS_H)\n graph.o: graph.c $(SYSTEM_H) coretypes.h $(TM_H) $(TOPLEV_H) $(FLAGS_H) output.h \\\n     $(RTL_H) $(FUNCTION_H) hard-reg-set.h $(BASIC_BLOCK_H) graph.h $(OBSTACK_H) \\\n-    $(CONFIG_H)\n+    $(CONFIG_H) $(EMIT_RTL_H)\n sbitmap.o: sbitmap.c sbitmap.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(BASIC_BLOCK_H)\n ebitmap.o: ebitmap.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(EBITMAP_H) $(RTL_H) $(FLAGS_H) $(OBSTACK_H)\n@@ -2823,7 +2823,7 @@ print-rtl.o : print-rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n rtlanal.o : rtlanal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TOPLEV_H) \\\n    $(RTL_H) hard-reg-set.h $(TM_P_H) insn-config.h $(RECOG_H) \\\n    $(FLAGS_H) $(REGS_H) output.h $(TARGET_H) $(FUNCTION_H) $(TREE_H) \\\n-   $(DF_H)\n+   $(DF_H) $(EMIT_RTL_H)\n \n varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(FLAGS_H) $(FUNCTION_H) $(EXPR_H) hard-reg-set.h $(REGS_H) \\\n@@ -3023,7 +3023,8 @@ cse.o : cse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    $(DF_H) $(DBGCNT_H)\n dce.o : dce.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) $(EXCEPT_H) $(DF_H) cselib.h \\\n-   $(DBGCNT_H) dce.h $(TIMEVAR_H) $(TREE_PASS_H) $(DBGCNT_H) $(TM_P_H)\n+   $(DBGCNT_H) dce.h $(TIMEVAR_H) $(TREE_PASS_H) $(DBGCNT_H) $(TM_P_H) \\\n+   $(EMIT_RTL_H)\n dse.o : dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(TM_P_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(RECOG_H) $(EXPR_H) $(DF_H) cselib.h $(DBGCNT_H) $(TIMEVAR_H) \\\n@@ -3061,7 +3062,7 @@ lcm.o : lcm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n mode-switching.o : mode-switching.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(INSN_ATTR_H) $(RECOG_H) $(BASIC_BLOCK_H) $(TM_P_H) $(FUNCTION_H) \\\n-   output.h $(TREE_PASS_H) $(TIMEVAR_H) $(DF_H) $(TARGET_H)\n+   output.h $(TREE_PASS_H) $(TIMEVAR_H) $(DF_H) $(TARGET_H) $(EMIT_RTL_H)\n tree-ssa-dce.o : tree-ssa-dce.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n     $(TREE_FLOW_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) \\\n     coretypes.h $(TREE_DUMP_H) $(TREE_PASS_H) $(FLAGS_H) $(BASIC_BLOCK_H) \\\n@@ -3107,7 +3108,7 @@ df-scan.o : df-scan.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(RECOG_H) $(FUNCTION_H) $(REGS_H) alloc-pool.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) $(BITMAP_H) sbitmap.h $(TIMEVAR_H) \\\n    $(TM_P_H) $(FLAGS_H) $(TARGET_H) $(TARGET_DEF_H) $(TREE_H) output.h \\\n-   $(TREE_PASS_H)\n+   $(TREE_PASS_H) $(EMIT_RTL_H)\n df-byte-scan.o : df-byte-scan.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TM_P_H) $(DF_H) output.h $(DBGCNT_H)\n regstat.o : regstat.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n@@ -3318,7 +3319,7 @@ modulo-sched.o : modulo-sched.c $(DDG_H) $(CONFIG_H) $(CONFIG_H) $(SYSTEM_H) \\\n haifa-sched.o : haifa-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(FUNCTION_H) \\\n    $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) $(EXCEPT_H) $(TM_P_H) $(TARGET_H) output.h \\\n-   $(PARAMS_H) $(DBGCNT_H) $(CFGLOOP_H) ira.h\n+   $(PARAMS_H) $(DBGCNT_H) $(CFGLOOP_H) ira.h $(EMIT_RTL_H)\n sched-deps.o : sched-deps.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) $(EXCEPT_H) cselib.h \\\n@@ -3340,7 +3341,7 @@ sel-sched.o : sel-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) $(EXCEPT_H) $(PARAMS_H) \\\n    $(TM_P_H) output.h $(TARGET_H) $(TIMEVAR_H) $(TREE_PASS_H)  \\\n    $(SCHED_INT_H) $(GGC_H) $(TREE_H) langhooks.h rtlhooks-def.h \\\n-   $(SEL_SCHED_IR_H) $(SEL_SCHED_DUMP_H) sel-sched.h $(DBGCNT_H)\n+   $(SEL_SCHED_IR_H) $(SEL_SCHED_DUMP_H) sel-sched.h $(DBGCNT_H) $(EMIT_RTL_H)\n sel-sched-dump.o : sel-sched-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) $(EXCEPT_H) $(PARAMS_H) \\\n@@ -3351,7 +3352,8 @@ sel-sched-ir.o : sel-sched-ir.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) $(EXCEPT_H) $(PARAMS_H) \\\n    $(TM_P_H) $(TARGET_H) $(TIMEVAR_H) $(TREE_PASS_H) $(SCHED_INT_H) $(GGC_H) \\\n-   $(TREE_H) langhooks.h rtlhooks-def.h $(SEL_SCHED_IR_H) $(SEL_SCHED_DUMP_H)\n+   $(TREE_H) langhooks.h rtlhooks-def.h $(SEL_SCHED_IR_H) $(SEL_SCHED_DUMP_H) \\\n+   $(EMIT_RTL_H)\n final.o : final.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) intl.h $(REGS_H) $(RECOG_H) conditions.h \\\n    insn-config.h $(INSN_ATTR_H) $(FUNCTION_H) output.h hard-reg-set.h \\\n@@ -3368,7 +3370,7 @@ reg-stack.o : reg-stack.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) $(RECOG_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) \\\n    insn-config.h $(TOPLEV_H) reload.h $(FUNCTION_H) $(TM_P_H) $(GGC_H) \\\n    $(BASIC_BLOCK_H) $(CFGLAYOUT_H) output.h $(TIMEVAR_H) \\\n-   $(TREE_PASS_H) $(TARGET_H) vecprim.h $(DF_H)\n+   $(TREE_PASS_H) $(TARGET_H) vecprim.h $(DF_H) $(EMIT_RTL_H)\n sreal.o: sreal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) sreal.h\n predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) \\\n@@ -3390,7 +3392,7 @@ cfglayout.o : cfglayout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) insn-config.h $(BASIC_BLOCK_H) hard-reg-set.h output.h \\\n    $(FUNCTION_H) $(CFGLAYOUT_H) $(CFGLOOP_H) $(TARGET_H) gt-cfglayout.h \\\n    $(GGC_H) alloc-pool.h $(FLAGS_H) $(OBSTACK_H) $(TREE_PASS_H) vecprim.h \\\n-   $(DF_H)\n+   $(DF_H) $(EMIT_RTL_H)\n timevar.o : timevar.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TIMEVAR_H) $(FLAGS_H) intl.h $(TOPLEV_H) $(RTL_H) timevar.def\n regcprop.o : regcprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -3490,7 +3492,7 @@ insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n   insn-config.h $(TOPLEV_H) $(RECOG_H) $(TM_P_H) $(FLAGS_H)\n insn-automata.o : insn-automata.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n   $(TM_H) $(RTL_H) $(REGS_H) output.h $(INSN_ATTR_H)\t\t\t\\\n-  insn-config.h $(TOPLEV_H) $(RECOG_H) $(TM_P_H) $(FLAGS_H)\n+  insn-config.h $(TOPLEV_H) $(RECOG_H) $(TM_P_H) $(FLAGS_H) $(EMIT_RTL_H)\n insn-emit.o : insn-emit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\\\n   $(RTL_H) $(TM_P_H) $(FUNCTION_H) $(EXPR_H) $(OPTABS_H) \t\t\\\n   dfp.h $(FLAGS_H) output.h insn-config.h hard-reg-set.h $(RECOG_H)\t\\"}, {"sha": "58c04787423c21d46ca63f2b87cdb1e374ddc2c0", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"df.h\"\n #include \"vecprim.h\"\n+#include \"emit-rtl.h\"\n \n /* Holds the interesting trailing notes for the function.  */\n rtx cfg_layout_function_footer;"}, {"sha": "12f3af0760f20421f98ce42640eab01386386370", "filename": "gcc/dce.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"dbgcnt.h\"\n #include \"tm_p.h\"\n+#include \"emit-rtl.h\"  /* FIXME: Can go away once crtl is moved to rtl.h.  */\n \n \n /* -------------------------------------------------------------------------"}, {"sha": "bf285a1928785207a0c1d160cb2bcfeff1efcd26", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"df.h\"\n #include \"tree-pass.h\"\n+#include \"emit-rtl.h\"  /* FIXME: Can go away once crtl is moved to rtl.h.  */\n \n DEF_VEC_P(df_ref);\n DEF_VEC_ALLOC_P_STACK(df_ref);"}, {"sha": "d51481f4d7044e9fb611f4bd2252070d0e629922", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 52, "deletions": 93, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -167,8 +167,6 @@ static GTY ((if_marked (\"ggc_marked_p\"), param_is (struct rtx_def)))\n static GTY ((if_marked (\"ggc_marked_p\"), param_is (struct rtx_def)))\n      htab_t const_fixed_htab;\n \n-#define first_insn (crtl->emit.x_first_insn)\n-#define last_insn (crtl->emit.x_last_insn)\n #define cur_insn_uid (crtl->emit.x_cur_insn_uid)\n #define cur_debug_insn_uid (crtl->emit.x_cur_debug_insn_uid)\n #define last_location (crtl->emit.x_last_location)\n@@ -2317,8 +2315,8 @@ set_new_first_and_last_insn (rtx first, rtx last)\n {\n   rtx insn;\n \n-  first_insn = first;\n-  last_insn = last;\n+  set_first_insn (first);\n+  set_last_insn (last);\n   cur_insn_uid = 0;\n \n   if (MIN_NONDEBUG_INSN_UID || MAY_HAVE_DEBUG_INSNS)\n@@ -2926,48 +2924,14 @@ make_safe_from (rtx x, rtx other)\n \f\n /* Emission of insns (adding them to the doubly-linked list).  */\n \n-/* Return the first insn of the current sequence or current function.  */\n-\n-rtx\n-get_insns (void)\n-{\n-  return first_insn;\n-}\n-\n-/* Specify a new insn as the first in the chain.  */\n-\n-void\n-set_first_insn (rtx insn)\n-{\n-  gcc_assert (!PREV_INSN (insn));\n-  first_insn = insn;\n-}\n-\n-/* Return the last insn emitted in current sequence or current function.  */\n-\n-rtx\n-get_last_insn (void)\n-{\n-  return last_insn;\n-}\n-\n-/* Specify a new insn as the last in the chain.  */\n-\n-void\n-set_last_insn (rtx insn)\n-{\n-  gcc_assert (!NEXT_INSN (insn));\n-  last_insn = insn;\n-}\n-\n /* Return the last insn emitted, even if it is in a sequence now pushed.  */\n \n rtx\n get_last_insn_anywhere (void)\n {\n   struct sequence_stack *stack;\n-  if (last_insn)\n-    return last_insn;\n+  if (get_last_insn ())\n+    return get_last_insn ();\n   for (stack = seq_stack; stack; stack = stack->next)\n     if (stack->last != 0)\n       return stack->last;\n@@ -2980,7 +2944,7 @@ get_last_insn_anywhere (void)\n rtx\n get_first_nonnote_insn (void)\n {\n-  rtx insn = first_insn;\n+  rtx insn = get_insns ();\n \n   if (insn)\n     {\n@@ -3006,7 +2970,7 @@ get_first_nonnote_insn (void)\n rtx\n get_last_nonnote_insn (void)\n {\n-  rtx insn = last_insn;\n+  rtx insn = get_last_insn ();\n \n   if (insn)\n     {\n@@ -3027,14 +2991,6 @@ get_last_nonnote_insn (void)\n   return insn;\n }\n \n-/* Return a number larger than any instruction's uid in this function.  */\n-\n-int\n-get_max_uid (void)\n-{\n-  return cur_insn_uid;\n-}\n-\n /* Return the number of actual (non-debug) insns emitted in this\n    function.  */\n \n@@ -3625,7 +3581,7 @@ try_split (rtx pat, rtx trial, int last)\n   /* Return either the first or the last insn, depending on which was\n      requested.  */\n   return last\n-    ? (after ? PREV_INSN (after) : last_insn)\n+    ? (after ? PREV_INSN (after) : get_last_insn ())\n     : NEXT_INSN (before);\n }\n \f\n@@ -3728,16 +3684,16 @@ make_call_insn_raw (rtx pattern)\n void\n add_insn (rtx insn)\n {\n-  PREV_INSN (insn) = last_insn;\n+  PREV_INSN (insn) = get_last_insn();\n   NEXT_INSN (insn) = 0;\n \n-  if (NULL != last_insn)\n-    NEXT_INSN (last_insn) = insn;\n+  if (NULL != get_last_insn())\n+    NEXT_INSN (get_last_insn ()) = insn;\n \n-  if (NULL == first_insn)\n-    first_insn = insn;\n+  if (NULL == get_insns ())\n+    set_first_insn (insn);\n \n-  last_insn = insn;\n+  set_last_insn (insn);\n }\n \n /* Add INSN into the doubly-linked list after insn AFTER.  This and\n@@ -3761,8 +3717,8 @@ add_insn_after (rtx insn, rtx after, basic_block bb)\n       if (NONJUMP_INSN_P (next) && GET_CODE (PATTERN (next)) == SEQUENCE)\n \tPREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = insn;\n     }\n-  else if (last_insn == after)\n-    last_insn = insn;\n+  else if (get_last_insn () == after)\n+    set_last_insn (insn);\n   else\n     {\n       struct sequence_stack *stack = seq_stack;\n@@ -3826,8 +3782,8 @@ add_insn_before (rtx insn, rtx before, basic_block bb)\n \t  NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = insn;\n \t}\n     }\n-  else if (first_insn == before)\n-    first_insn = insn;\n+  else if (get_insns () == before)\n+    set_first_insn (insn);\n   else\n     {\n       struct sequence_stack *stack = seq_stack;\n@@ -3898,8 +3854,11 @@ remove_insn (rtx insn)\n \t  NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = next;\n \t}\n     }\n-  else if (first_insn == insn)\n-    first_insn = next;\n+  else if (get_insns () == insn)\n+    {\n+      PREV_INSN (next) = NULL;\n+      set_first_insn (next);\n+    }\n   else\n     {\n       struct sequence_stack *stack = seq_stack;\n@@ -3920,8 +3879,8 @@ remove_insn (rtx insn)\n       if (NONJUMP_INSN_P (next) && GET_CODE (PATTERN (next)) == SEQUENCE)\n \tPREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = prev;\n     }\n-  else if (last_insn == insn)\n-    last_insn = prev;\n+  else if (get_last_insn () == insn)\n+    set_last_insn (prev);\n   else\n     {\n       struct sequence_stack *stack = seq_stack;\n@@ -3982,10 +3941,10 @@ void\n delete_insns_since (rtx from)\n {\n   if (from == 0)\n-    first_insn = 0;\n+    set_first_insn (0);\n   else\n     NEXT_INSN (from) = 0;\n-  last_insn = from;\n+  set_last_insn (from);\n }\n \n /* This function is deprecated, please use sequences instead.\n@@ -4006,10 +3965,10 @@ reorder_insns_nobb (rtx from, rtx to, rtx after)\n     NEXT_INSN (PREV_INSN (from)) = NEXT_INSN (to);\n   if (NEXT_INSN (to))\n     PREV_INSN (NEXT_INSN (to)) = PREV_INSN (from);\n-  if (last_insn == to)\n-    last_insn = PREV_INSN (from);\n-  if (first_insn == from)\n-    first_insn = NEXT_INSN (to);\n+  if (get_last_insn () == to)\n+    set_last_insn (PREV_INSN (from));\n+  if (get_insns () == from)\n+    set_first_insn (NEXT_INSN (to));\n \n   /* Make the new neighbors point to it and it to them.  */\n   if (NEXT_INSN (after))\n@@ -4018,8 +3977,8 @@ reorder_insns_nobb (rtx from, rtx to, rtx after)\n   NEXT_INSN (to) = NEXT_INSN (after);\n   PREV_INSN (from) = after;\n   NEXT_INSN (after) = from;\n-  if (after == last_insn)\n-    last_insn = to;\n+  if (after == get_last_insn())\n+    set_last_insn (to);\n }\n \n /* Same as function above, but take care to update BB boundaries.  */\n@@ -4344,8 +4303,8 @@ emit_insn_after_1 (rtx first, rtx after, basic_block bb)\n   if (after_after)\n     PREV_INSN (after_after) = last;\n \n-  if (after == last_insn)\n-    last_insn = last;\n+  if (after == get_last_insn())\n+    set_last_insn (last);\n \n   return last;\n }\n@@ -4842,7 +4801,7 @@ emit_debug_insn_before (rtx pattern, rtx before)\n rtx\n emit_insn (rtx x)\n {\n-  rtx last = last_insn;\n+  rtx last = get_last_insn();\n   rtx insn;\n \n   if (x == NULL_RTX)\n@@ -4888,7 +4847,7 @@ emit_insn (rtx x)\n rtx\n emit_debug_insn (rtx x)\n {\n-  rtx last = last_insn;\n+  rtx last = get_last_insn();\n   rtx insn;\n \n   if (x == NULL_RTX)\n@@ -5283,13 +5242,13 @@ start_sequence (void)\n     tem = GGC_NEW (struct sequence_stack);\n \n   tem->next = seq_stack;\n-  tem->first = first_insn;\n-  tem->last = last_insn;\n+  tem->first = get_insns ();\n+  tem->last = get_last_insn ();\n \n   seq_stack = tem;\n \n-  first_insn = 0;\n-  last_insn = 0;\n+  set_first_insn (0);\n+  set_last_insn (0);\n }\n \n /* Set up the insn chain starting with FIRST as the current sequence,\n@@ -5305,8 +5264,8 @@ push_to_sequence (rtx first)\n \n   for (last = first; last && NEXT_INSN (last); last = NEXT_INSN (last));\n \n-  first_insn = first;\n-  last_insn = last;\n+  set_first_insn (first);\n+  set_last_insn (last);\n }\n \n /* Like push_to_sequence, but take the last insn as an argument to avoid\n@@ -5317,8 +5276,8 @@ push_to_sequence2 (rtx first, rtx last)\n {\n   start_sequence ();\n \n-  first_insn = first;\n-  last_insn = last;\n+  set_first_insn (first);\n+  set_last_insn (last);\n }\n \n /* Set up the outer-level insn chain\n@@ -5334,8 +5293,8 @@ push_topmost_sequence (void)\n   for (stack = seq_stack; stack; stack = stack->next)\n     top = stack;\n \n-  first_insn = top->first;\n-  last_insn = top->last;\n+  set_first_insn (top->first);\n+  set_last_insn (top->last);\n }\n \n /* After emitting to the outer-level insn chain, update the outer-level\n@@ -5349,8 +5308,8 @@ pop_topmost_sequence (void)\n   for (stack = seq_stack; stack; stack = stack->next)\n     top = stack;\n \n-  top->first = first_insn;\n-  top->last = last_insn;\n+  top->first = get_insns ();\n+  top->last = get_last_insn ();\n \n   end_sequence ();\n }\n@@ -5373,8 +5332,8 @@ end_sequence (void)\n {\n   struct sequence_stack *tem = seq_stack;\n \n-  first_insn = tem->first;\n-  last_insn = tem->last;\n+  set_first_insn (tem->first);\n+  set_last_insn (tem->last);\n   seq_stack = tem->next;\n \n   memset (tem, 0, sizeof (*tem));\n@@ -5576,8 +5535,8 @@ copy_insn (rtx insn)\n void\n init_emit (void)\n {\n-  first_insn = NULL;\n-  last_insn = NULL;\n+  set_first_insn (NULL);\n+  set_last_insn (NULL);\n   if (MIN_NONDEBUG_INSN_UID)\n     cur_insn_uid = MIN_NONDEBUG_INSN_UID;\n   else"}, {"sha": "704f901f0696c40e7061b45d2a160f77c9796705", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -51,4 +51,57 @@ extern rtx replace_equiv_address (rtx, rtx);\n /* Likewise, but the reference is not required to be valid.  */\n extern rtx replace_equiv_address_nv (rtx, rtx);\n \n+extern rtx gen_blockage (void);\n+extern rtvec gen_rtvec (int, ...);\n+extern rtx copy_insn_1 (rtx);\n+extern rtx copy_insn (rtx);\n+extern rtx gen_int_mode (HOST_WIDE_INT, enum machine_mode);\n+extern rtx emit_copy_of_insn_after (rtx, rtx);\n+extern void set_reg_attrs_from_value (rtx, rtx);\n+extern void set_reg_attrs_for_parm (rtx, rtx);\n+extern void set_reg_attrs_for_decl_rtl (tree t, rtx x);\n+extern void adjust_reg_mode (rtx, enum machine_mode);\n+extern int mem_expr_equal_p (const_tree, const_tree);\n+\n+/* Return the first insn of the current sequence or current function.  */\n+\n+static inline rtx\n+get_insns (void)\n+{\n+  return crtl->emit.x_first_insn;\n+}\n+\n+/* Specify a new insn as the first in the chain.  */\n+\n+static inline void\n+set_first_insn (rtx insn)\n+{\n+  gcc_assert (!insn || !PREV_INSN (insn));\n+  crtl->emit.x_first_insn = insn;\n+}\n+\n+/* Return the last insn emitted in current sequence or current function.  */\n+\n+static inline rtx\n+get_last_insn (void)\n+{\n+  return crtl->emit.x_last_insn;\n+}\n+\n+/* Specify a new insn as the last in the chain.  */\n+\n+static inline void\n+set_last_insn (rtx insn)\n+{\n+  gcc_assert (!insn || !NEXT_INSN (insn));\n+  crtl->emit.x_last_insn = insn;\n+}\n+\n+/* Return a number larger than any instruction's uid in this function.  */\n+\n+static inline int\n+get_max_uid (void)\n+{\n+  return crtl->emit.x_cur_insn_uid;\n+}\n #endif /* GCC_EMIT_RTL_H */"}, {"sha": "5085805d6c8ec108b203fd932d8e6101d37050e4", "filename": "gcc/fwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -28,7 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"rtl.h\"\n #include \"tm_p.h\"\n-#include \"emit-rtl.h\"\n #include \"insn-config.h\"\n #include \"recog.h\"\n #include \"flags.h\"\n@@ -40,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"tree-pass.h\"\n #include \"domwalk.h\"\n+#include \"emit-rtl.h\"\n \n \n /* This pass does simple forward propagation and simplification when an"}, {"sha": "4c58d35814e587dd7e3d156815f2f8ce1df542f8", "filename": "gcc/genautomata.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -9569,7 +9569,9 @@ main (int argc, char **argv)\n \t\t\"#include \\\"insn-attr.h\\\"\\n\"\n \t\t\"#include \\\"toplev.h\\\"\\n\"\n \t\t\"#include \\\"flags.h\\\"\\n\"\n-\t\t\"#include \\\"function.h\\\"\\n\");\n+\t\t\"#include \\\"function.h\\\"\\n\"\n+\t\t\"#include \\\"emit-rtl.h\\\"\\n\");\n+\t         /* FIXME: emit-rtl.h can go away once crtl is in rtl.h.  */\n \n \t  write_automata ();\n \t}"}, {"sha": "04227a4b0586a6263b02efabc06c372551ac5beb", "filename": "gcc/graph.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"toplev.h\"\n #include \"graph.h\"\n+#include \"emit-rtl.h\"\n \n static const char *const graph_ext[] =\n {"}, {"sha": "2effed240460d4b8eb8b613de6d19065864048f2", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -148,6 +148,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"cfgloop.h\"\n #include \"ira.h\"\n+#include \"emit-rtl.h\"  /* FIXME: Can go away once crtl is moved to rtl.h.  */\n \n #ifdef INSN_SCHEDULING\n "}, {"sha": "502b0f634424d83bd6b4a1c8afefd32f48dd3614", "filename": "gcc/ira-build.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"reload.h\"\n #include \"sparseset.h\"\n #include \"ira-int.h\"\n+#include \"emit-rtl.h\"  /* FIXME: Can go away once crtl is moved to rtl.h.  */\n \n static ira_copy_t find_allocno_copy (ira_allocno_t, ira_allocno_t, rtx,\n \t\t\t\t     ira_loop_tree_node_t);"}, {"sha": "c0db7c4d36721b8f8e550a6709044510ac1e31ee", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"timevar.h\"\n #include \"df.h\"\n+#include \"emit-rtl.h\"\n \n /* We want target macros for the mode switching code to be able to refer\n    to instruction attribute values.  */"}, {"sha": "43af91dff540e7a9460b1bb0cfe48c9cd8264e10", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -175,6 +175,7 @@\n #include \"target.h\"\n #include \"df.h\"\n #include \"vecprim.h\"\n+#include \"emit-rtl.h\"  /* FIXME: Can go away once crtl is moved to rtl.h.  */\n \n #ifdef STACK_REGS\n "}, {"sha": "107bb9c05a086cec27ad4ca9d2c14f1833e542b2", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -1051,7 +1051,6 @@ rhs_regno (const_rtx x)\n }\n \n \n-\n /* 1 if RTX is a reg or parallel that is the current function's return\n    value.  */\n #define REG_FUNCTION_VALUE_P(RTX)\t\t\t\t\t\\\n@@ -1551,19 +1550,6 @@ extern int ceil_log2 (unsigned HOST_WIDE_INT);\n extern HOST_WIDE_INT trunc_int_for_mode\t(HOST_WIDE_INT, enum machine_mode);\n extern rtx plus_constant (rtx, HOST_WIDE_INT);\n \n-/* In emit-rtl.c */\n-extern rtx gen_blockage (void);\n-extern rtvec gen_rtvec (int, ...);\n-extern rtx copy_insn_1 (rtx);\n-extern rtx copy_insn (rtx);\n-extern rtx gen_int_mode (HOST_WIDE_INT, enum machine_mode);\n-extern rtx emit_copy_of_insn_after (rtx, rtx);\n-extern void set_reg_attrs_from_value (rtx, rtx);\n-extern void set_reg_attrs_for_parm (rtx, rtx);\n-extern void set_reg_attrs_for_decl_rtl (tree t, rtx x);\n-extern void adjust_reg_mode (rtx, enum machine_mode);\n-extern int mem_expr_equal_p (const_tree, const_tree);\n-\n /* In rtl.c */\n extern rtx rtx_alloc_stat (RTX_CODE MEM_STAT_DECL);\n #define rtx_alloc(c) rtx_alloc_stat (c MEM_STAT_INFO)\n@@ -1613,9 +1599,7 @@ extern rtx convert_memory_address_addr_space (enum machine_mode, rtx,\n \t\t\t\t\t      addr_space_t);\n #define convert_memory_address(to_mode,x) \\\n \tconvert_memory_address_addr_space ((to_mode), (x), ADDR_SPACE_GENERIC)\n-extern rtx get_insns (void);\n extern const char *get_insn_name (int);\n-extern rtx get_last_insn (void);\n extern rtx get_last_insn_anywhere (void);\n extern rtx get_first_nonnote_insn (void);\n extern rtx get_last_nonnote_insn (void);\n@@ -2216,7 +2200,6 @@ extern void reset_used_flags (rtx);\n extern void set_used_flags (rtx);\n extern void reorder_insns (rtx, rtx, rtx);\n extern void reorder_insns_nobb (rtx, rtx, rtx);\n-extern int get_max_uid (void);\n extern int get_max_insn_count (void);\n extern int in_sequence_p (void);\n extern void force_next_line_note (void);\n@@ -2230,8 +2213,6 @@ extern unsigned int unshare_all_rtl (void);\n extern void unshare_all_rtl_again (rtx);\n extern void unshare_all_rtl_in_chain (rtx);\n extern void verify_rtl_sharing (void);\n-extern void set_first_insn (rtx);\n-extern void set_last_insn (rtx);\n extern void link_cc0_insns (rtx);\n extern void add_insn (rtx);\n extern void add_insn_before (rtx, rtx, struct basic_block_def *);"}, {"sha": "a3608732dbb0d44344804a06badeb510c01cf4c4", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"df.h\"\n #include \"tree.h\"\n+#include \"emit-rtl.h\"  /* FIXME: Can go away once crtl is moved to rtl.h.  */\n \n /* Forward declarations */\n static void set_of_1 (rtx, const_rtx, void *);"}, {"sha": "e831a785cd4ef92ff524c617c1e411c9702243b6", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vec.h\"\n #include \"langhooks.h\"\n #include \"rtlhooks-def.h\"\n+#include \"emit-rtl.h\"  /* FIXME: Can go away once crtl is moved to rtl.h.  */\n \n #ifdef INSN_SCHEDULING\n #include \"sel-sched-ir.h\""}, {"sha": "8590b8a0549f0419dc12cd3d0f679c0b92c93d10", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5936d944f8fffbb02f9c694645d37f60603a8a25/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=5936d944f8fffbb02f9c694645d37f60603a8a25", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"rtlhooks-def.h\"\n #include \"output.h\"\n+#include \"emit-rtl.h\"\n \n #ifdef INSN_SCHEDULING\n #include \"sel-sched-ir.h\""}]}