{"sha": "515e6a84cd464581711a5aa5fe51342a57ff2095", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE1ZTZhODRjZDQ2NDU4MTcxMWE1YWE1ZmU1MTM0MmE1N2ZmMjA5NQ==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2005-02-03T10:26:22Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2005-02-03T10:26:22Z"}, "message": "re PR c++/17401 (ICE with invalid pure specifier)\n\n\tPR c++/17401\n\t* parser.c (cp_parser_pure_specifier): Emit a specific error\n\tmessage with an invalid pure specifier.\n\t* decl2.c (grok_function_init): Remove.\n\t(grokfield): An initializer for a method is a always a pure\n\tspecifier.\n\n\tPR c++/17401\n\t* g++.dg/parse/error25.C: New test.\n\nFrom-SVN: r94656", "tree": {"sha": "983d0094d83cbea096c2fd0c40e4d3de7dd54f48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/983d0094d83cbea096c2fd0c40e4d3de7dd54f48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/515e6a84cd464581711a5aa5fe51342a57ff2095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515e6a84cd464581711a5aa5fe51342a57ff2095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/515e6a84cd464581711a5aa5fe51342a57ff2095", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515e6a84cd464581711a5aa5fe51342a57ff2095/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3"}], "stats": {"total": 104, "additions": 46, "deletions": 58}, "files": [{"sha": "32e664533d50928c7be97f891db6913abeacad95", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/515e6a84cd464581711a5aa5fe51342a57ff2095/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/515e6a84cd464581711a5aa5fe51342a57ff2095/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=515e6a84cd464581711a5aa5fe51342a57ff2095", "patch": "@@ -1,3 +1,12 @@\n+2005-02-03  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/17401\n+\t* parser.c (cp_parser_pure_specifier): Emit a specific error\n+\tmessage with an invalid pure specifier.\n+\t* decl2.c (grok_function_init): Remove.\n+\t(grokfield): An initializer for a method is a always a pure\n+\tspecifier.\n+\n 2005-02-02  Matt Austern  <austern@apple.com>\n \n \tPR c++/19628"}, {"sha": "0a74ed7f2a6f14f17e704cfdd44b96045a5cfbf0", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 52, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/515e6a84cd464581711a5aa5fe51342a57ff2095/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/515e6a84cd464581711a5aa5fe51342a57ff2095/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=515e6a84cd464581711a5aa5fe51342a57ff2095", "patch": "@@ -64,7 +64,6 @@ typedef struct priority_info_s {\n } *priority_info;\n \n static void mark_vtable_entries (tree);\n-static void grok_function_init (tree, tree);\n static bool maybe_emit_vtables (tree);\n static tree build_anon_union_vars (tree);\n static bool acceptable_java_type (tree);\n@@ -897,8 +896,11 @@ grokfield (const cp_declarator *declarator,\n     {\n       if (TREE_CODE (value) == FUNCTION_DECL)\n \t{\n-\t  grok_function_init (value, init);\n-\t  init = NULL_TREE;\n+\t  /* Initializers for functions are rejected early in the parser.\n+\t     If we get here, it must be a pure specifier for a method.  */\n+\t  gcc_assert (TREE_CODE (TREE_TYPE (value)) == METHOD_TYPE);\n+\t  gcc_assert (error_operand_p (init) || integer_zerop (init));\n+\t  DECL_PURE_VIRTUAL_P (value) = 1;\n \t}\n       else if (pedantic && TREE_CODE (value) != VAR_DECL)\n \t/* Already complained in grokdeclarator.  */\n@@ -1045,55 +1047,6 @@ grokbitfield (const cp_declarator *declarator,\n   return value;\n }\n \n-/* When a function is declared with an initializer,\n-   do the right thing.  Currently, there are two possibilities:\n-\n-   class B\n-   {\n-    public:\n-     // initialization possibility #1.\n-     virtual void f () = 0;\n-     int g ();\n-   };\n-   \n-   class D1 : B\n-   {\n-    public:\n-     int d1;\n-     // error, no f ();\n-   };\n-   \n-   class D2 : B\n-   {\n-    public:\n-     int d2;\n-     void f ();\n-   };\n-   \n-   class D3 : B\n-   {\n-    public:\n-     int d3;\n-     // initialization possibility #2\n-     void f () = B::f;\n-   };\n-\n-*/\n-\n-static void\n-grok_function_init (tree decl, tree init)\n-{\n-  /* An initializer for a function tells how this function should\n-     be inherited.  */\n-  tree type = TREE_TYPE (decl);\n-\n-  if (TREE_CODE (type) == FUNCTION_TYPE)\n-    error (\"initializer specified for non-member function %qD\", decl);\n-  else if (integer_zerop (init))\n-    DECL_PURE_VIRTUAL_P (decl) = 1;\n-  else\n-    error (\"invalid initializer for virtual method %qD\", decl);\n-}\n \f\n void\n cplus_decl_attributes (tree *decl, tree attributes, int flags)"}, {"sha": "82d665ed81044443b1ab56bf5b9247096fa4a308", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/515e6a84cd464581711a5aa5fe51342a57ff2095/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/515e6a84cd464581711a5aa5fe51342a57ff2095/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=515e6a84cd464581711a5aa5fe51342a57ff2095", "patch": "@@ -13332,13 +13332,18 @@ cp_parser_pure_specifier (cp_parser* parser)\n   if (!cp_parser_require (parser, CPP_EQ, \"`='\"))\n     return error_mark_node;\n   /* Look for the `0' token.  */\n-  token = cp_parser_require (parser, CPP_NUMBER, \"`0'\");\n-  /* Unfortunately, this will accept `0L' and `0x00' as well.  We need\n-     to get information from the lexer about how the number was\n-     spelled in order to fix this problem.  */\n-  if (!token || !integer_zerop (token->value))\n-    return error_mark_node;\n+  token = cp_lexer_consume_token (parser->lexer);\n+  if (token->type != CPP_NUMBER || !integer_zerop (token->value))\n+    {\n+      cp_parser_error (parser,\n+\t\t       \"invalid pure specifier (only `= 0' is allowed)\");\n+      cp_parser_skip_to_end_of_statement (parser);\n+      return error_mark_node;\n+    }\n \n+  /* FIXME: Unfortunately, this will accept `0L' and `0x00' as well.\n+     We need to get information from the lexer about how the number\n+     was spelled in order to fix this problem.  */\n   return integer_zero_node;\n }\n "}, {"sha": "d983553ec5b567743c736eb056e2071b1f3c8461", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/515e6a84cd464581711a5aa5fe51342a57ff2095/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/515e6a84cd464581711a5aa5fe51342a57ff2095/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=515e6a84cd464581711a5aa5fe51342a57ff2095", "patch": "@@ -1,3 +1,8 @@\n+2005-02-03  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/17401\n+\t* g++.dg/parse/error25.C: New test.\n+\n 2005-02-03  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcc.c-torture/execute/20050203-1.c: New."}, {"sha": "a726a174bb426f017ccb07345ec5fd43cf7bbd58", "filename": "gcc/testsuite/g++.dg/parse/error25.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/515e6a84cd464581711a5aa5fe51342a57ff2095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/515e6a84cd464581711a5aa5fe51342a57ff2095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror25.C?ref=515e6a84cd464581711a5aa5fe51342a57ff2095", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+// Origin: Steven Bosscher <steven at gcc dot gnu dot org>\n+// PR c++/17401: ICE with invalid pure specifier\n+\n+// NOTE: This also tests QoI of diagnostic for invalid pure specifiers.\n+//  Please do *not* relax the dg-error tests.\n+\n+class foo\n+{\n+  virtual void bar1 () = 0;\n+  virtual void bar2 () = __null;  // { dg-error \"invalid pure specifier\" }\n+  virtual void bar3 () = 4;       // { dg-error \"invalid pure specifier\" }\n+  virtual void bar4 () = A::f;    // { dg-error \"invalid pure specifier\" }\n+};\n+\n+"}]}