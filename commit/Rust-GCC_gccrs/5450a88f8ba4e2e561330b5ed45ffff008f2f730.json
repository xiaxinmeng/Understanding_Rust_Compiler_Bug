{"sha": "5450a88f8ba4e2e561330b5ed45ffff008f2f730", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ1MGE4OGY4YmE0ZTJlNTYxMzMwYjVlZDQ1ZmZmZjAwOGYyZjczMA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-05-11T08:14:56Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-05-11T08:14:56Z"}, "message": "re PR fortran/53310 (EOSHIFT leaks memory)\n\n2012-05-11  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53310\n        * intrinsics/eoshift2.c (eoshift2): Do not leak\n        memory by allocating it in the loop.\n\nFrom-SVN: r187395", "tree": {"sha": "23915ca900d79e44e436266b0860c9c6b1c480b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23915ca900d79e44e436266b0860c9c6b1c480b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5450a88f8ba4e2e561330b5ed45ffff008f2f730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5450a88f8ba4e2e561330b5ed45ffff008f2f730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5450a88f8ba4e2e561330b5ed45ffff008f2f730", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5450a88f8ba4e2e561330b5ed45ffff008f2f730/comments", "author": null, "committer": null, "parents": [{"sha": "c49f925dc5b365e529d0d879b73b8bc1754cda4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c49f925dc5b365e529d0d879b73b8bc1754cda4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c49f925dc5b365e529d0d879b73b8bc1754cda4b"}], "stats": {"total": 74, "additions": 40, "deletions": 34}, "files": [{"sha": "a6223fc24c3d644aa5bc72dd38504d4bb48c5b93", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5450a88f8ba4e2e561330b5ed45ffff008f2f730/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5450a88f8ba4e2e561330b5ed45ffff008f2f730/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=5450a88f8ba4e2e561330b5ed45ffff008f2f730", "patch": "@@ -1,17 +1,23 @@\n+2012-05-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53310\n+\t* intrinsics/eoshift2.c (eoshift2): Do not leak\n+\tmemory by allocating it in the loop.\n+\n 2012-05-05  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        * config.h.in: Regenerated.\n-        * configure: Regenerated.\n-        * configure.ac: Add checks for getegid and __secure_getenv.\n-        * io/unix.c (P_tmpdir): Fallback definition for macro.\n-        (tempfile_open): New function.\n-        (tempfile): Use secure_getenv, call tempfile_open to try each\n-        directory in turn.\n-        * libgfortran.h (DEFAULT_TMPDIR): Remove macro.\n-        (secure_getenv): New macro/prototype.\n-        * runtime/environ.c (secure_getenv): New function.\n-        (variable_table): Rename GFORTRAN_TMPDIR to TMPDIR.\n-        * runtime/main.c (find_addr2line): Use secure_getenv.\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* configure.ac: Add checks for getegid and __secure_getenv.\n+\t* io/unix.c (P_tmpdir): Fallback definition for macro.\n+\t(tempfile_open): New function.\n+\t(tempfile): Use secure_getenv, call tempfile_open to try each\n+\tdirectory in turn.\n+\t* libgfortran.h (DEFAULT_TMPDIR): Remove macro.\n+\t(secure_getenv): New macro/prototype.\n+\t* runtime/environ.c (secure_getenv): New function.\n+\t(variable_table): Rename GFORTRAN_TMPDIR to TMPDIR.\n+\t* runtime/main.c (find_addr2line): Use secure_getenv.\n \n 2012-04-22  Tobias Burnus  <burnus@net-b.de>\n \n@@ -479,24 +485,24 @@\n \n 2012-03-15  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        PR libfortran/52434\n-        PR libfortran/48878\n-        PR libfortran/38199\n-        * io/unit.c (get_internal_unit): Default to ROUND_UNSPECIFIED.\n-        (init_units): Likewise.\n-        * io/write_float.def (determine_precision): New function.\n-        (output_float): Take into account buffer with %f format, no need\n-        for our own rounding if unspecified or processor specified\n-        rounding.\n-        (DTOA): Simplify format string, add parameters.\n-        (FDTOA): New macros similar to DTOA, but using %f format.\n-        (OUTPUT_FLOAT_FMT_G): Stack allocate newf, determine correct\n-        precision and fill buffer.\n-        (EN_PREC): New macro.\n-        (determine_en_precision): New function.\n-        (WRITE_FLOAT): For G format, move buffer filling into\n-        output_float_FMT_G, use FDTOA for F format.\n-        (write_float): Increase buffer due to F format.\n+\tPR libfortran/52434\n+\tPR libfortran/48878\n+\tPR libfortran/38199\n+\t* io/unit.c (get_internal_unit): Default to ROUND_UNSPECIFIED.\n+\t(init_units): Likewise.\n+\t* io/write_float.def (determine_precision): New function.\n+\t(output_float): Take into account buffer with %f format, no need\n+\tfor our own rounding if unspecified or processor specified\n+\trounding.\n+\t(DTOA): Simplify format string, add parameters.\n+\t(FDTOA): New macros similar to DTOA, but using %f format.\n+\t(OUTPUT_FLOAT_FMT_G): Stack allocate newf, determine correct\n+\tprecision and fill buffer.\n+\t(EN_PREC): New macro.\n+\t(determine_en_precision): New function.\n+\t(WRITE_FLOAT): For G format, move buffer filling into\n+\toutput_float_FMT_G, use FDTOA for F format.\n+\t(write_float): Increase buffer due to F format.\n \n 2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n "}, {"sha": "ff94176a05819ae089e1300e0d56eadd28c90ccc", "filename": "libgfortran/intrinsics/eoshift2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5450a88f8ba4e2e561330b5ed45ffff008f2f730/libgfortran%2Fintrinsics%2Feoshift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5450a88f8ba4e2e561330b5ed45ffff008f2f730/libgfortran%2Fintrinsics%2Feoshift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift2.c?ref=5450a88f8ba4e2e561330b5ed45ffff008f2f730", "patch": "@@ -77,6 +77,10 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n \n       ret->offset = 0;\n       ret->dtype = array->dtype;\n+\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (size * arraysize);\n+\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n         {\n \t  index_type ub, str;\n@@ -90,10 +94,6 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n \t      * GFC_DESCRIPTOR_STRIDE(ret,i-1);\n \n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n-\n-          /* xmalloc allocates a single byte for zero size.  */\n-\t  ret->base_addr = xmalloc (size * arraysize);\n-\n         }\n     }\n   else if (unlikely (compile_options.bounds_check))"}]}