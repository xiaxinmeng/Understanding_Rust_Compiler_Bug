{"sha": "a007a21c4a930f5526b2fc895b63fba1d445bc39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAwN2EyMWM0YTkzMGY1NTI2YjJmYzg5NWI2M2ZiYTFkNDQ1YmMzOQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-07-23T15:55:33Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-07-23T15:55:33Z"}, "message": "[AArch64] GNU-Stylize some un-formatted code.\n\nFrom-SVN: r212943", "tree": {"sha": "b3dc09bd26bb45e3f475a0a1db2ece1d85d9137e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3dc09bd26bb45e3f475a0a1db2ece1d85d9137e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a007a21c4a930f5526b2fc895b63fba1d445bc39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a007a21c4a930f5526b2fc895b63fba1d445bc39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a007a21c4a930f5526b2fc895b63fba1d445bc39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a007a21c4a930f5526b2fc895b63fba1d445bc39/comments", "author": null, "committer": null, "parents": [{"sha": "0f8f303baf802039d252319d331b03ed7b212740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8f303baf802039d252319d331b03ed7b212740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f8f303baf802039d252319d331b03ed7b212740"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "7b83b1aaffef4136842a80710d6c1b3020fd430c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a007a21c4a930f5526b2fc895b63fba1d445bc39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a007a21c4a930f5526b2fc895b63fba1d445bc39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a007a21c4a930f5526b2fc895b63fba1d445bc39", "patch": "@@ -1,3 +1,9 @@\n+2014-07-23  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_expand_prologue)\n+\t(aarch64_save_or_restore_fprs)\n+\t(aarch64_save_or_restore_callee_save_registers): GNU-Stylize code.\n+\n 2014-07-23  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config/arm/t-rtems-eabi: Add"}, {"sha": "52e2496162005f9e5a6c6cc527e25199344f9007", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a007a21c4a930f5526b2fc895b63fba1d445bc39/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a007a21c4a930f5526b2fc895b63fba1d445bc39/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a007a21c4a930f5526b2fc895b63fba1d445bc39", "patch": "@@ -1917,8 +1917,8 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n   unsigned regno;\n   unsigned regno2;\n   rtx insn;\n-  rtx (*gen_mem_ref)(enum machine_mode, rtx)\n-    = (frame_pointer_needed)? gen_frame_mem : gen_rtx_MEM;\n+  rtx (*gen_mem_ref) (enum machine_mode, rtx)\n+    = frame_pointer_needed ? gen_frame_mem : gen_rtx_MEM;\n \n   for (regno = V0_REGNUM; regno <= V31_REGNUM; regno++)\n     {\n@@ -1938,8 +1938,8 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n \t      /* Empty loop.  */\n \t    }\n \n-\t  if (regno2 <= V31_REGNUM &&\n-\t      aarch64_register_saved_on_entry (regno2))\n+\t  if (regno2 <= V31_REGNUM\n+\t      && aarch64_register_saved_on_entry (regno2))\n \t    {\n \t      rtx mem2;\n \n@@ -1952,15 +1952,15 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n \t      if (restore == false)\n \t\t{\n \t\t  insn = emit_insn\n-\t\t    ( gen_store_pairdf (mem, gen_rtx_REG (DFmode, regno),\n-\t\t\t\t\tmem2, gen_rtx_REG (DFmode, regno2)));\n+\t\t    (gen_store_pairdf (mem, gen_rtx_REG (DFmode, regno),\n+\t\t\t\t       mem2, gen_rtx_REG (DFmode, regno2)));\n \n \t\t}\n \t      else\n \t\t{\n \t\t  insn = emit_insn\n-\t\t    ( gen_load_pairdf (gen_rtx_REG (DFmode, regno), mem,\n-\t\t\t\t       gen_rtx_REG (DFmode, regno2), mem2));\n+\t\t    (gen_load_pairdf (gen_rtx_REG (DFmode, regno), mem,\n+\t\t\t\t      gen_rtx_REG (DFmode, regno2), mem2));\n \n \t\t  add_reg_note (insn, REG_CFA_RESTORE,\n \t\t\t\tgen_rtx_REG (DFmode, regno));\n@@ -2004,8 +2004,9 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT offset,\n   rtx base_rtx = stack_pointer_rtx;\n   HOST_WIDE_INT start_offset = offset;\n   HOST_WIDE_INT increment = UNITS_PER_WORD;\n-  rtx (*gen_mem_ref)(enum machine_mode, rtx) = (frame_pointer_needed)? gen_frame_mem : gen_rtx_MEM;\n-  unsigned limit = (frame_pointer_needed)? R28_REGNUM: R30_REGNUM;\n+  rtx (*gen_mem_ref) (enum machine_mode, rtx) = (frame_pointer_needed\n+\t\t\t\t\t\t ? gen_frame_mem : gen_rtx_MEM);\n+  unsigned limit = frame_pointer_needed ? R28_REGNUM : R30_REGNUM;\n   unsigned regno;\n   unsigned regno2;\n \n@@ -2026,8 +2027,8 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT offset,\n \t    {\n \t      /* Empty loop.  */\n \t    }\n-\t  if (regno2 <= limit &&\n-\t      aarch64_register_saved_on_entry (regno2))\n+\t  if (regno2 <= limit\n+\t      && aarch64_register_saved_on_entry (regno2))\n \t    {\n \t      rtx mem2;\n \n@@ -2040,18 +2041,20 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT offset,\n \t      if (restore == false)\n \t\t{\n \t\t  insn = emit_insn\n-\t\t    ( gen_store_pairdi (mem, gen_rtx_REG (DImode, regno),\n-\t\t\t\t\tmem2, gen_rtx_REG (DImode, regno2)));\n+\t\t    (gen_store_pairdi (mem, gen_rtx_REG (DImode, regno),\n+\t\t\t\t       mem2, gen_rtx_REG (DImode, regno2)));\n \n \t\t}\n \t      else\n \t\t{\n \t\t  insn = emit_insn\n-\t\t    ( gen_load_pairdi (gen_rtx_REG (DImode, regno), mem,\n-\t\t\t\t     gen_rtx_REG (DImode, regno2), mem2));\n+\t\t    (gen_load_pairdi (gen_rtx_REG (DImode, regno), mem,\n+\t\t\t\t      gen_rtx_REG (DImode, regno2), mem2));\n \n-\t\t  add_reg_note (insn, REG_CFA_RESTORE, gen_rtx_REG (DImode, regno));\n-\t\t  add_reg_note (insn, REG_CFA_RESTORE, gen_rtx_REG (DImode, regno2));\n+\t\t  add_reg_note (insn, REG_CFA_RESTORE,\n+\t\t\t\tgen_rtx_REG (DImode, regno));\n+\t\t  add_reg_note (insn, REG_CFA_RESTORE,\n+\t\t\t\tgen_rtx_REG (DImode, regno2));\n \t\t}\n \n \t      /* The first part of a frame-related parallel insn is\n@@ -2069,7 +2072,8 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT offset,\n \t      else\n \t\t{\n \t\t  insn = emit_move_insn (gen_rtx_REG (DImode, regno), mem);\n-\t\t  add_reg_note (insn, REG_CFA_RESTORE, gen_rtx_REG (DImode, regno));\n+\t\t  add_reg_note (insn, REG_CFA_RESTORE,\n+\t\t\t\tgen_rtx_REG (DImode, regno));\n \t\t}\n \t      start_offset += increment;\n \t    }\n@@ -2473,10 +2477,10 @@ aarch64_expand_epilogue (bool for_sibcall)\n \t    }\n \t}\n \n-        aarch64_set_frame_expr (gen_rtx_SET (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t     plus_constant (Pmode,\n-\t\t\t\t\t\t\t    stack_pointer_rtx,\n-\t\t\t\t\t\t\t    offset)));\n+      aarch64_set_frame_expr (gen_rtx_SET (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t   plus_constant (Pmode,\n+\t\t\t\t\t\t\t  stack_pointer_rtx,\n+\t\t\t\t\t\t\t  offset)));\n     }\n \n   emit_use (gen_rtx_REG (DImode, LR_REGNUM));"}]}