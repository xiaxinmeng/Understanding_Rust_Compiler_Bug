{"sha": "39252973769c869814f7dcbf1b62cf7a90ac1417", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkyNTI5NzM3NjljODY5ODE0ZjdkY2JmMWI2MmNmN2E5MGFjMTQxNw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-10-20T16:01:53Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-10-20T16:01:53Z"}, "message": "[AArch64][1/2] Add fmul-by-power-of-2+fcvt optimisation\n\n\t* config/aarch64/aarch64.md\n\t(*aarch64_fcvt<su_optab><GPF:mode><GPI:mode>2_mult): New pattern.\n\t* config/aarch64/aarch64-simd.md\n\t(*aarch64_fcvt<su_optab><VDQF:mode><fcvt_target>2_mult): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Handle above patterns.\n\t(aarch64_fpconst_pow_of_2): New function.\n\t(aarch64_vec_fpconst_pow_of_2): Likewise.\n\t* config/aarch64/aarch64-protos.h (aarch64_fpconst_pow_of_2): Declare\n\tprototype.\n\t(aarch64_vec_fpconst_pow_of_2): Likewise.\n\t* config/aarch64/predicates.md (aarch64_fp_pow2): New predicate.\n\t(aarch64_fp_vec_pow2): Likewise.\n\n\t* gcc.target/aarch64/fmul_fcvt_1.c: New test.\n\t* gcc.target/aarch64/fmul_fcvt_2.c: Likewise.\n\nFrom-SVN: r229085", "tree": {"sha": "bb19cad6f388747ebddb3109869e2f360f40103e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb19cad6f388747ebddb3109869e2f360f40103e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39252973769c869814f7dcbf1b62cf7a90ac1417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39252973769c869814f7dcbf1b62cf7a90ac1417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39252973769c869814f7dcbf1b62cf7a90ac1417", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39252973769c869814f7dcbf1b62cf7a90ac1417/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c27ebdbe81c13d68c4e590a060fd12e6118feb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c27ebdbe81c13d68c4e590a060fd12e6118feb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c27ebdbe81c13d68c4e590a060fd12e6118feb5"}], "stats": {"total": 323, "additions": 323, "deletions": 0}, "files": [{"sha": "862b68b9ce682cb01a2af5ddbc6ae32f537735d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39252973769c869814f7dcbf1b62cf7a90ac1417", "patch": "@@ -1,3 +1,18 @@\n+2015-10-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md\n+\t(*aarch64_fcvt<su_optab><GPF:mode><GPI:mode>2_mult): New pattern.\n+\t* config/aarch64/aarch64-simd.md\n+\t(*aarch64_fcvt<su_optab><VDQF:mode><fcvt_target>2_mult): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Handle above patterns.\n+\t(aarch64_fpconst_pow_of_2): New function.\n+\t(aarch64_vec_fpconst_pow_of_2): Likewise.\n+\t* config/aarch64/aarch64-protos.h (aarch64_fpconst_pow_of_2): Declare\n+\tprototype.\n+\t(aarch64_vec_fpconst_pow_of_2): Likewise.\n+\t* config/aarch64/predicates.md (aarch64_fp_pow2): New predicate.\n+\t(aarch64_fp_vec_pow2): Likewise.\n+\n 2015-10-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.h (HARD_REGNO_NREGS): Use CEIL macro."}, {"sha": "2a969adf5d303c336d7ae26f4ba5ae683c871735", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=39252973769c869814f7dcbf1b62cf7a90ac1417", "patch": "@@ -294,12 +294,14 @@ enum aarch64_symbol_type aarch64_classify_symbol (rtx, rtx);\n enum aarch64_symbol_type aarch64_classify_tls_symbol (rtx);\n enum reg_class aarch64_regno_regclass (unsigned);\n int aarch64_asm_preferred_eh_data_format (int, int);\n+int aarch64_fpconst_pow_of_2 (rtx);\n machine_mode aarch64_hard_regno_caller_save_mode (unsigned, unsigned,\n \t\t\t\t\t\t       machine_mode);\n int aarch64_hard_regno_mode_ok (unsigned, machine_mode);\n int aarch64_hard_regno_nregs (unsigned, machine_mode);\n int aarch64_simd_attr_length_move (rtx_insn *);\n int aarch64_uxt_size (int, HOST_WIDE_INT);\n+int aarch64_vec_fpconst_pow_of_2 (rtx);\n rtx aarch64_final_eh_return_addr (void);\n rtx aarch64_legitimize_reload_address (rtx *, machine_mode, int, int, int);\n const char *aarch64_output_move_struct (rtx *operands);"}, {"sha": "cf1ff6d7da346e545f86c27b2fa1ecfd86cf757b", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=39252973769c869814f7dcbf1b62cf7a90ac1417", "patch": "@@ -1654,6 +1654,26 @@\n   [(set_attr \"type\" \"neon_fp_to_int_<Vetype><q>\")]\n )\n \n+(define_insn \"*aarch64_fcvt<su_optab><VDQF:mode><fcvt_target>2_mult\"\n+  [(set (match_operand:<FCVT_TARGET> 0 \"register_operand\" \"=w\")\n+\t(FIXUORS:<FCVT_TARGET> (unspec:<FCVT_TARGET>\n+\t\t\t       [(mult:VDQF\n+\t (match_operand:VDQF 1 \"register_operand\" \"w\")\n+\t (match_operand:VDQF 2 \"aarch64_fp_vec_pow2\" \"\"))]\n+\t\t\t       UNSPEC_FRINTZ)))]\n+  \"TARGET_SIMD\n+   && IN_RANGE (aarch64_vec_fpconst_pow_of_2 (operands[2]), 1,\n+\t\tGET_MODE_BITSIZE (GET_MODE_INNER (<VDQF:MODE>mode)))\"\n+  {\n+    int fbits = aarch64_vec_fpconst_pow_of_2 (operands[2]);\n+    char buf[64];\n+    snprintf (buf, 64, \"fcvtz<su>\\\\t%%0.<Vtype>, %%1.<Vtype>, #%d\", fbits);\n+    output_asm_insn (buf, operands);\n+    return \"\";\n+  }\n+  [(set_attr \"type\" \"neon_fp_to_int_<Vetype><q>\")]\n+)\n+\n (define_expand \"<optab><VDQF:mode><fcvt_target>2\"\n   [(set (match_operand:<FCVT_TARGET> 0 \"register_operand\")\n \t(FIXUORS:<FCVT_TARGET> (unspec:<FCVT_TARGET>"}, {"sha": "6197a367a7ab7f6a09dfe31e5cc05077ed6efef0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=39252973769c869814f7dcbf1b62cf7a90ac1417", "patch": "@@ -6786,6 +6786,19 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \t  else\n \t    *cost += extra_cost->fp[GET_MODE (x) == DFmode].toint;\n \t}\n+\n+      /* We can combine fmul by a power of 2 followed by a fcvt into a single\n+\t fixed-point fcvt.  */\n+      if (GET_CODE (x) == MULT\n+\t  && ((VECTOR_MODE_P (mode)\n+\t       && aarch64_vec_fpconst_pow_of_2 (XEXP (x, 1)) > 0)\n+\t      || aarch64_fpconst_pow_of_2 (XEXP (x, 1)) > 0))\n+\t{\n+\t  *cost += rtx_cost (XEXP (x, 0), VOIDmode, (rtx_code) code,\n+\t\t\t     0, speed);\n+\t  return true;\n+\t}\n+\n       *cost += rtx_cost (x, VOIDmode, (enum rtx_code) code, 0, speed);\n       return true;\n \n@@ -13250,6 +13263,52 @@ aarch64_unspec_may_trap_p (const_rtx x, unsigned flags)\n   return default_unspec_may_trap_p (x, flags);\n }\n \n+\n+/* If X is a positive CONST_DOUBLE with a value that is a power of 2\n+   return the log2 of that value.  Otherwise return -1.  */\n+\n+int\n+aarch64_fpconst_pow_of_2 (rtx x)\n+{\n+  const REAL_VALUE_TYPE *r;\n+\n+  if (!CONST_DOUBLE_P (x))\n+    return -1;\n+\n+  r = CONST_DOUBLE_REAL_VALUE (x);\n+\n+  if (REAL_VALUE_NEGATIVE (*r)\n+      || REAL_VALUE_ISNAN (*r)\n+      || REAL_VALUE_ISINF (*r)\n+      || !real_isinteger (r, DFmode))\n+    return -1;\n+\n+  return exact_log2 (real_to_integer (r));\n+}\n+\n+/* If X is a vector of equal CONST_DOUBLE values and that value is\n+   Y, return the aarch64_fpconst_pow_of_2 of Y.  Otherwise return -1.  */\n+\n+int\n+aarch64_vec_fpconst_pow_of_2 (rtx x)\n+{\n+  if (GET_CODE (x) != CONST_VECTOR)\n+    return -1;\n+\n+  if (GET_MODE_CLASS (GET_MODE (x)) != MODE_VECTOR_FLOAT)\n+    return -1;\n+\n+  int firstval = aarch64_fpconst_pow_of_2 (CONST_VECTOR_ELT (x, 0));\n+  if (firstval <= 0)\n+    return -1;\n+\n+  for (int i = 1; i < CONST_VECTOR_NUNITS (x); i++)\n+    if (aarch64_fpconst_pow_of_2 (CONST_VECTOR_ELT (x, i)) != firstval)\n+      return -1;\n+\n+  return firstval;\n+}\n+\n /* Implement TARGET_PROMOTED_TYPE to promote __fp16 to float.  */\n static tree\n aarch64_promoted_type (const_tree t)"}, {"sha": "c3c1e9db852bf23b3e69515561741d82ae66416d", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=39252973769c869814f7dcbf1b62cf7a90ac1417", "patch": "@@ -4185,6 +4185,25 @@\n   [(set_attr \"type\" \"f_cvtf2i\")]\n )\n \n+(define_insn \"*aarch64_fcvt<su_optab><GPF:mode><GPI:mode>2_mult\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(FIXUORS:GPI\n+\t  (mult:GPF\n+\t    (match_operand:GPF 1 \"register_operand\" \"w\")\n+\t    (match_operand:GPF 2 \"aarch64_fp_pow2\" \"F\"))))]\n+  \"TARGET_FLOAT\n+   && IN_RANGE (aarch64_fpconst_pow_of_2 (operands[2]), 1,\n+\t\tGET_MODE_BITSIZE (<GPI:MODE>mode))\"\n+  {\n+    int fbits = aarch64_fpconst_pow_of_2 (operands[2]);\n+    char buf[64];\n+    snprintf (buf, 64, \"fcvtz<su>\\\\t%%<GPI:w>0, %%<GPF:s>1, #%d\", fbits);\n+    output_asm_insn (buf, operands);\n+    return \"\";\n+  }\n+  [(set_attr \"type\" \"f_cvtf2i\")]\n+)\n+\n ;; fma - no throw\n \n (define_insn \"fma<mode>4\""}, {"sha": "046f852b1d35f2678282ee59545867dca96313b1", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=39252973769c869814f7dcbf1b62cf7a90ac1417", "patch": "@@ -87,6 +87,13 @@\n        (and (match_code \"const_double\")\n \t    (match_test \"aarch64_float_const_zero_rtx_p (op)\"))))\n \n+(define_predicate \"aarch64_fp_pow2\"\n+  (and (match_code \"const_double\")\n+\t(match_test \"aarch64_fpconst_pow_of_2 (op) > 0\")))\n+\n+(define_predicate \"aarch64_fp_vec_pow2\"\n+  (match_test \"aarch64_vec_fpconst_pow_of_2 (op) > 0\"))\n+\n (define_predicate \"aarch64_plus_immediate\"\n   (and (match_code \"const_int\")\n        (ior (match_test \"aarch64_uimm12_shift (INTVAL (op))\")"}, {"sha": "d32bf0c0df7c4e4eb9b81eec7c66fdda2ef48850", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39252973769c869814f7dcbf1b62cf7a90ac1417", "patch": "@@ -1,3 +1,8 @@\n+2015-10-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/fmul_fcvt_1.c: New test.\n+\t* gcc.target/aarch64/fmul_fcvt_2.c: Likewise.\n+\n 2015-10-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/66810"}, {"sha": "4e3ace79b5673477771d48ffa21bd94a0b631599", "filename": "gcc/testsuite/gcc.target/aarch64/fmul_fcvt_1.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_fcvt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_fcvt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_fcvt_1.c?ref=39252973769c869814f7dcbf1b62cf7a90ac1417", "patch": "@@ -0,0 +1,129 @@\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O2 -fno-inline\" } */\n+\n+#define FUNC_DEFS(__a)\t\\\n+int\t\t\t\\\n+sffoo##__a (float x)\t\\\n+{\t\t\t\\\n+  return x * __a##.0f;\t\\\n+}\t\t\t\\\n+\t\t\t\\\n+unsigned int\t\t\\\n+usffoo##__a (float x)\t\\\n+{\t\t\t\\\n+  return x * __a##.0f;\t\\\n+}\t\t\t\\\n+\t\t\t\\\n+long\t\t\t\\\n+lsffoo##__a (float x)\t\\\n+{\t\t\t\\\n+  return x * __a##.0f;\t\\\n+}\t\t\t\\\n+\t\t\t\\\n+unsigned long\t\t\\\n+ulsffoo##__a (float x)\t\\\n+{\t\t\t\\\n+  return x * __a##.0f;\t\\\n+}\n+\n+#define FUNC_DEFD(__a)\t\\\n+long\t\t\t\\\n+dffoo##__a (double x)\t\\\n+{\t\t\t\\\n+  return x * __a##.0;\t\\\n+}\t\t\t\\\n+\t\t\t\\\n+unsigned long\t\t\\\n+udffoo##__a (double x)\t\\\n+{\t\t\t\\\n+  return x * __a##.0;\t\\\n+}\t\t\t\\\n+int\t\t\t\\\n+sdffoo##__a (double x)\t\\\n+{\t\t\t\\\n+  return x * __a##.0;\t\\\n+}\t\t\t\\\n+\t\t\t\\\n+unsigned int\t\t\\\n+usdffoo##__a (double x)\t\\\n+{\t\t\t\\\n+  return x * __a##.0;\t\\\n+}\n+\n+FUNC_DEFS (4)\n+FUNC_DEFD (4)\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tw\\[0-9\\], s\\[0-9\\]*.*#2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tx\\[0-9\\], s\\[0-9\\]*.*#2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tx\\[0-9\\], d\\[0-9\\]*.*#2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tw\\[0-9\\], d\\[0-9\\]*.*#2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tw\\[0-9\\], s\\[0-9\\]*.*#2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tx\\[0-9\\], s\\[0-9\\]*.*#2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tx\\[0-9\\], d\\[0-9\\]*.*#2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tw\\[0-9\\], d\\[0-9\\]*.*#2\" 1 } } */\n+\n+FUNC_DEFS (8)\n+FUNC_DEFD (8)\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tw\\[0-9\\], s\\[0-9\\]*.*#3\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tx\\[0-9\\], s\\[0-9\\]*.*#3\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tx\\[0-9\\], d\\[0-9\\]*.*#3\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tw\\[0-9\\], d\\[0-9\\]*.*#3\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tw\\[0-9\\], s\\[0-9\\]*.*#3\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tx\\[0-9\\], s\\[0-9\\]*.*#3\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tx\\[0-9\\], d\\[0-9\\]*.*#3\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tw\\[0-9\\], d\\[0-9\\]*.*#3\" 1 } } */\n+\n+FUNC_DEFS (16)\n+FUNC_DEFD (16)\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tw\\[0-9\\], s\\[0-9\\]*.*#4\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tx\\[0-9\\], s\\[0-9\\]*.*#4\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tx\\[0-9\\], d\\[0-9\\]*.*#4\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tw\\[0-9\\], d\\[0-9\\]*.*#4\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tw\\[0-9\\], s\\[0-9\\]*.*#4\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tx\\[0-9\\], s\\[0-9\\]*.*#4\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tx\\[0-9\\], d\\[0-9\\]*.*#4\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tw\\[0-9\\], d\\[0-9\\]*.*#4\" 1 } } */\n+\n+\n+#define FUNC_TESTS(__a, __b)\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if (sffoo##__a (__b) != (int)(__b * __a))\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+    if (usffoo##__a (__b) != (unsigned int)(__b * __a))\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+    if (lsffoo##__a (__b) != (long)(__b * __a))\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+    if (ulsffoo##__a (__b) != (unsigned long)(__b * __a))\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+  } while (0)\n+\n+#define FUNC_TESTD(__a, __b)\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if (dffoo##__a (__b) != (long)(__b * __a))\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+    if (udffoo##__a (__b) != (unsigned long)(__b * __a))\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+    if (sdffoo##__a (__b) != (int)(__b * __a))\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+    if (usdffoo##__a (__b) != (unsigned int)(__b * __a))\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+  } while (0)\n+\n+int\n+main (void)\n+{\n+  float i;\n+\n+  for (i = -0.001; i < 32.0; i += 1.0f)\n+    {\n+      FUNC_TESTS (4, i);\n+      FUNC_TESTS (8, i);\n+      FUNC_TESTS (16, i);\n+\n+      FUNC_TESTD (4, i);\n+      FUNC_TESTD (8, i);\n+      FUNC_TESTD (16, i);\n+    }\n+  return 0;\n+}"}, {"sha": "d8a9335249fd77307db2e961d0419ce4c686bb72", "filename": "gcc/testsuite/gcc.target/aarch64/fmul_fcvt_2.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_fcvt_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39252973769c869814f7dcbf1b62cf7a90ac1417/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_fcvt_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_fcvt_2.c?ref=39252973769c869814f7dcbf1b62cf7a90ac1417", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O2 -ftree-vectorize -fno-inline\" } */\n+\n+#define N 1024\n+\n+#define FUNC_DEF(__a)\t\t\\\n+void\t\t\t\t\\\n+foo##__a (float *a, int *b)\t\\\n+{\t\t\t\t\\\n+  int i;\t\t\t\\\n+  for (i = 0; i < N; i++)\t\\\n+    b[i] = a[i] * __a##.0f;\t\\\n+}\n+\n+FUNC_DEF (4)\n+FUNC_DEF (8)\n+FUNC_DEF (16)\n+\n+int ints[N];\n+float floats[N];\n+\n+void\n+reset_ints (int *arr)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    arr[i] = 0;\n+}\n+\n+void\n+check_result (int *is, int n)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    if (is[i] != i * n)\n+      __builtin_abort ();\n+}\n+\n+#define FUNC_CHECK(__a)\t\t\\\n+do\t\t\t\t\\\n+  {\t\t\t\t\\\n+    reset_ints (ints);\t\t\\\n+    foo##__a (floats, ints);\t\\\n+    check_result (ints, __a);\t\\\n+  } while (0)\n+\n+\n+int\n+main (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    floats[i] = (float) i;\n+\n+  FUNC_CHECK (4);\n+  FUNC_CHECK (8);\n+  FUNC_CHECK (16);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fmul\\tv\\[0-9\\]*.*\" } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tv\\[0-9\\].4s, v\\[0-9\\].4s*.*#2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tv\\[0-9\\].4s, v\\[0-9\\].4s*.*#3\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tv\\[0-9\\].4s, v\\[0-9\\].4s*.*#4\" 1 } } */"}]}