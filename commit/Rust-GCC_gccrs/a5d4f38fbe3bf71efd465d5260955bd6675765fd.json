{"sha": "a5d4f38fbe3bf71efd465d5260955bd6675765fd", "node_id": "C_kwDOANBUbNoAKGE1ZDRmMzhmYmUzYmY3MWVmZDQ2NWQ1MjYwOTU1YmQ2Njc1NzY1ZmQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-15T13:59:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-15T14:01:39Z"}, "message": "libstc++: std::formattable concept should not be defined for C++20\n\nThis concept was added by a C++23 proposal, so don't define it for\nC++20.\n\nSplit the format/formatter/formatter.cc test into two parts, one that\ntests the C++20 requirements and one that tests the C++23 concept.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/format (formattable): Only define for C++23/\n\t* testsuite/std/format/formatter.cc: Moved to...\n\t* testsuite/std/format/formatter/requirements.cc: ...here.\n\t* testsuite/std/format/formatter/concept.cc: New test.\n\t* testsuite/std/format/functions/format.cc: Replace use of\n\tstd::formattable in C++20.", "tree": {"sha": "bff9cce1e7f2b221033c71102c35a62618940df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bff9cce1e7f2b221033c71102c35a62618940df2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5d4f38fbe3bf71efd465d5260955bd6675765fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d4f38fbe3bf71efd465d5260955bd6675765fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d4f38fbe3bf71efd465d5260955bd6675765fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d4f38fbe3bf71efd465d5260955bd6675765fd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce86d9678b7f3d914133a035fbf8088504d8bad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce86d9678b7f3d914133a035fbf8088504d8bad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce86d9678b7f3d914133a035fbf8088504d8bad8"}], "stats": {"total": 123, "additions": 77, "deletions": 46}, "files": [{"sha": "204a1710aca800f1ca287332e9b7753eb0dc6c81", "filename": "libstdc++-v3/include/std/format", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d4f38fbe3bf71efd465d5260955bd6675765fd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d4f38fbe3bf71efd465d5260955bd6675765fd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat?ref=a5d4f38fbe3bf71efd465d5260955bd6675765fd", "patch": "@@ -2181,11 +2181,14 @@ namespace __format\n } // namespace __format\n /// @endcond\n \n+#if __cplusplus > 202002L\n   // [format.formattable], concept formattable\n   template<typename _Tp, typename _CharT>\n     concept formattable\n       = __format::__formattable_impl<remove_reference_t<_Tp>, _CharT>;\n+#endif\n \n+#if __cpp_lib_format_ranges\n   /// @cond undocumented\n namespace __format\n {\n@@ -2199,6 +2202,7 @@ namespace __format\n       = conditional_t<__const_formattable_range<_Rg, _CharT>, const _Rg, _Rg>;\n } // namespace __format\n   /// @endcond\n+#endif // format_ranges\n \n   /// An iterator after the last character written, and the number of\n   /// characters that would have been written.\n@@ -3485,16 +3489,19 @@ namespace __format\n \n \tstd::visit_format_arg([this](auto& __arg) {\n \t  using _Type = remove_reference_t<decltype(__arg)>;\n+\t  using _Formatter = typename _Context::template formatter_type<_Type>;\n \t  if constexpr (is_same_v<_Type, monostate>)\n \t    __format::__invalid_arg_id_in_format_string();\n \t  else if constexpr (is_same_v<_Type, handle>)\n \t    __arg.format(this->_M_pc, this->_M_fc);\n-\t  else\n+\t  else if constexpr (is_default_constructible_v<_Formatter>)\n \t    {\n-\t      typename _Context::template formatter_type<_Type> __f;\n+\t      _Formatter __f;\n \t      this->_M_pc.advance_to(__f.parse(this->_M_pc));\n \t      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));\n \t    }\n+\t  else\n+\t    static_assert(__format::__formattable_with<_Type, _Context>);\n \t}, _M_fc.arg(__id));\n       }\n     };"}, {"sha": "fe56dc44a68628642d1d7cf6b446677eebcee884", "filename": "libstdc++-v3/testsuite/std/format/formatter/concept.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d4f38fbe3bf71efd465d5260955bd6675765fd/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Fformatter%2Fconcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d4f38fbe3bf71efd465d5260955bd6675765fd/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Fformatter%2Fconcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Fformatter%2Fconcept.cc?ref=a5d4f38fbe3bf71efd465d5260955bd6675765fd", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <format>\n+\n+struct S { };\n+\n+template<> struct std::formatter<S> : std::formatter<const char*> {\n+  template<class Out>\n+  auto format(S, std::basic_format_context<Out, char>& ctx) const {\n+    return formatter<const char*>::format(\"ess\", ctx);\n+  }\n+};\n+\n+struct T { };\n+\n+template<> struct std::formatter<T> : std::formatter<const char*> {\n+  // This function only accepts std::format_context, not other contexts.\n+  auto format(T, std::format_context& ctx) const {\n+    return formatter<const char*>::format(\"tee\", ctx);\n+  }\n+};\n+\n+struct U { };\n+\n+void\n+test_concept() // [format.formattable]\n+{\n+  static_assert( std::formattable<int, char> );\n+  static_assert( std::formattable<const int, char> );\n+  static_assert( std::formattable<int, wchar_t> );\n+  static_assert( std::formattable<const int, wchar_t> );\n+  static_assert( std::formattable<char, char> );\n+  static_assert( std::formattable<char*, char> );\n+  static_assert( std::formattable<wchar_t, wchar_t> );\n+  static_assert( std::formattable<wchar_t*, wchar_t> );\n+  static_assert( std::formattable<char, wchar_t> );\n+  static_assert( ! std::formattable<char*, wchar_t> );\n+  static_assert( ! std::formattable<wchar_t, char> );\n+  static_assert( ! std::formattable<wchar_t*, char> );\n+  static_assert( std::formattable<S, char> );\n+  static_assert( std::formattable<const S, char> );\n+  static_assert( ! std::formattable<S, wchar_t> ); // only formats as char\n+  static_assert( ! std::formattable<T, char> ); // formatter not generic\n+  static_assert( ! std::formattable<U, char> ); // no formatter\n+}"}, {"sha": "3bff8bdbd5d65e9d1a712896f0bae90a9398aa10", "filename": "libstdc++-v3/testsuite/std/format/formatter/requirements.cc", "status": "renamed", "additions": 12, "deletions": 42, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d4f38fbe3bf71efd465d5260955bd6675765fd/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Fformatter%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d4f38fbe3bf71efd465d5260955bd6675765fd/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Fformatter%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Fformatter%2Frequirements.cc?ref=a5d4f38fbe3bf71efd465d5260955bd6675765fd", "patch": "@@ -4,48 +4,6 @@\n #include <format>\n #include <testsuite_hooks.h>\n \n-struct S { };\n-\n-template<> struct std::formatter<S> : std::formatter<const char*> {\n-  template<class Out>\n-  auto format(S, std::basic_format_context<Out, char>& ctx) const {\n-    return formatter<const char*>::format(\"ess\", ctx);\n-  }\n-};\n-\n-struct T { };\n-\n-template<> struct std::formatter<T> : std::formatter<const char*> {\n-  // This function only accepts std::format_context, not other contexts.\n-  auto format(T, std::format_context& ctx) const {\n-    return formatter<const char*>::format(\"tee\", ctx);\n-  }\n-};\n-\n-struct U { };\n-\n-void\n-test_concept() // [format.formattable]\n-{\n-  static_assert( std::formattable<int, char> );\n-  static_assert( std::formattable<const int, char> );\n-  static_assert( std::formattable<int, wchar_t> );\n-  static_assert( std::formattable<const int, wchar_t> );\n-  static_assert( std::formattable<char, char> );\n-  static_assert( std::formattable<char*, char> );\n-  static_assert( std::formattable<wchar_t, wchar_t> );\n-  static_assert( std::formattable<wchar_t*, wchar_t> );\n-  static_assert( std::formattable<char, wchar_t> );\n-  static_assert( ! std::formattable<char*, wchar_t> );\n-  static_assert( ! std::formattable<wchar_t, char> );\n-  static_assert( ! std::formattable<wchar_t*, char> );\n-  static_assert( std::formattable<S, char> );\n-  static_assert( std::formattable<const S, char> );\n-  static_assert( ! std::formattable<S, wchar_t> ); // only formats as char\n-  static_assert( ! std::formattable<T, char> ); // formatter not generic\n-  static_assert( ! std::formattable<U, char> ); // no formatter\n-}\n-\n enum color { red, green, blue };\n const char* color_names[] = { \"red\", \"green\", \"blue\" };\n \n@@ -62,6 +20,12 @@ test_specializations() // [format.formatter.spec]\n {\n   std::string s0 = std::format(\"{}\", 42); // OK, library-provided formatter\n   VERIFY( s0 == \"42\" );\n+  using Fi = std::format_context::formatter_type<int>;\n+  static_assert( std::is_default_constructible_v<Fi> );\n+  static_assert( std::is_copy_constructible_v<Fi> );\n+  static_assert( std::is_move_constructible_v<Fi> );\n+  static_assert( std::is_copy_assignable_v<Fi> );\n+  static_assert( std::is_move_assignable_v<Fi> );\n \n   // std::string s1 = std::format(\"{}\", L\"foo\"); // error: disabled formatter\n   using Fw = std::format_context::formatter_type<wchar_t>;\n@@ -73,6 +37,12 @@ test_specializations() // [format.formatter.spec]\n \n   std::string s2 = std::format(\"{}\", red);  // OK, user-provided formatter\n   VERIFY( s2 == \"red\" );\n+  using Fc = std::format_context::formatter_type<color>;\n+  static_assert( std::is_default_constructible_v<Fc> );\n+  static_assert( std::is_copy_constructible_v<Fc> );\n+  static_assert( std::is_move_constructible_v<Fc> );\n+  static_assert( std::is_copy_assignable_v<Fc> );\n+  static_assert( std::is_move_assignable_v<Fc> );\n \n   // std::string s3 = std::format(\"{}\", err{}); // error: disabled formatter\n   using Ferr = std::format_context::formatter_type<err>;", "previous_filename": "libstdc++-v3/testsuite/std/format/formatter.cc"}, {"sha": "c01405eac900e87b6748a3dec8948995c77d37ea", "filename": "libstdc++-v3/testsuite/std/format/functions/format.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d4f38fbe3bf71efd465d5260955bd6675765fd/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Ffunctions%2Fformat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d4f38fbe3bf71efd465d5260955bd6675765fd/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Ffunctions%2Fformat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Ffunctions%2Fformat.cc?ref=a5d4f38fbe3bf71efd465d5260955bd6675765fd", "patch": "@@ -297,17 +297,25 @@ bool format_float()\n     return s == \"-0. != +0.500 \";\n }\n \n+#if __cplusplus > 202002L\n+template<typename T>\n+concept formattable = std::formattable<T, char>;\n+#else\n+template<typename T>\n+concept formattable = requires (T t, char* p) { std::to_chars(p, p, t); };\n+#endif\n+\n void\n test_float128()\n {\n #ifdef __SIZEOF_FLOAT128__\n-  if constexpr (std::formattable<__float128, char>)\n+  if constexpr (formattable<__float128>)\n     VERIFY( format_float<__float128>() );\n   else\n     std::puts(\"Cannot format __float128 on this target\");\n #endif\n #if __FLT128_DIG__\n-  if constexpr (std::formattable<_Float128, char>)\n+  if constexpr (formattable<_Float128>)\n     VERIFY( format_float<_Float128>() );\n   else\n     std::puts(\"Cannot format _Float128 on this target\");"}]}