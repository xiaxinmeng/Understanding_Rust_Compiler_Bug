{"sha": "57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcwMzZkY2NmY2Y4ZTNkYTAwZTcxY2QwMGVkNGE5YzM4MjViM2FkOQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2009-07-27T13:49:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-27T13:49:46Z"}, "message": "[multiple changes]\n\n2009-07-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_eval.adb (Compile_Time_Compare): More precise handling of\n\tKnown_Valid flag, to prevent spurious range deductions when scalar\n\tvariables may be uninitialized. New predicate Is_Known_Valid_Operand.\n\n2009-07-27  Robert Dewar  <dewar@adacore.com>\n\n\t* sem.adb: Minor reformatting\n\nFrom-SVN: r150118", "tree": {"sha": "2ff65f70ff55d8e46ef8955b25699d15e122bcba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ff65f70ff55d8e46ef8955b25699d15e122bcba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d33744e42a08e71e9e3425dd9b08903e64c0f964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33744e42a08e71e9e3425dd9b08903e64c0f964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33744e42a08e71e9e3425dd9b08903e64c0f964"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "e4efbe33d0830c435ccb13a08997e714d4907efe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9", "patch": "@@ -1,3 +1,9 @@\n+2009-07-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_eval.adb (Compile_Time_Compare): More precise handling of\n+\tKnown_Valid flag, to prevent spurious range deductions when scalar\n+\tvariables may be uninitialized. New predicate Is_Known_Valid_Operand.\n+\n 2009-07-27  Robert Dewar  <dewar@adacore.com>\n \n \t* gnatfind.adb, osint.ads, sem.adb, xr_tabls.adb: Minor reformatting"}, {"sha": "d40b55c0665418a1f3dd74e3aef0b0e2da922d1b", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9", "patch": "@@ -1967,7 +1967,7 @@ package body Sem is\n                   --  with_clauses. Do not process main unit prematurely.\n \n                   if Pnode = CU\n-                    and then (CU /= Cunit (Main_Unit))\n+                    and then CU /= Cunit (Main_Unit)\n                   then\n                      Walk_Immediate (Cunit (S), Include_Limited);\n                   end if;"}, {"sha": "18853d727297b7f76d526eb9fe50967469bae45f", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9", "patch": "@@ -424,6 +424,10 @@ package body Sem_Eval is\n       --  have a 'Last/'First reference in which case the value returned is the\n       --  appropriate type bound.\n \n+      function Is_Known_Valid_Operand (Opnd : Node_Id) return Boolean;\n+      --  Even if the context does not assume that values are valid, some\n+      --  simple cases can be recognized.\n+\n       function Is_Same_Value (L, R : Node_Id) return Boolean;\n       --  Returns True iff L and R represent expressions that definitely\n       --  have identical (but not necessarily compile time known) values\n@@ -522,7 +526,7 @@ package body Sem_Eval is\n                else         -- Attribute_Name (N) = Name_Last\n                   return Make_Integer_Literal (Sloc (N),\n                     Intval => Intval (String_Literal_Low_Bound (Xtyp))\n-                       + String_Literal_Length (Xtyp));\n+                                + String_Literal_Length (Xtyp));\n                end if;\n             end if;\n \n@@ -551,6 +555,22 @@ package body Sem_Eval is\n          return N;\n       end Compare_Fixup;\n \n+      ----------------------------\n+      -- Is_Known_Valid_Operand --\n+      ----------------------------\n+\n+      function Is_Known_Valid_Operand (Opnd : Node_Id) return Boolean is\n+      begin\n+         return (Is_Entity_Name (Opnd)\n+                  and then\n+                    (Is_Known_Valid (Entity (Opnd))\n+                      or else Ekind (Entity (Opnd)) = E_In_Parameter\n+                      or else\n+                        (Ekind (Entity (Opnd)) in Object_Kind\n+                           and then Present (Current_Value (Entity (Opnd))))))\n+           or else Is_OK_Static_Expression (Opnd);\n+      end Is_Known_Valid_Operand;\n+\n       -------------------\n       -- Is_Same_Value --\n       -------------------\n@@ -560,12 +580,11 @@ package body Sem_Eval is\n          Rf : constant Node_Id := Compare_Fixup (R);\n \n          function Is_Same_Subscript (L, R : List_Id) return Boolean;\n-         --  L, R are the Expressions values from two attribute nodes\n-         --  for First or Last attributes. Either may be set to No_List\n-         --  if no expressions are present (indicating subscript 1).\n-         --  The result is True if both expressions represent the same\n-         --  subscript (note that one case is where one subscript is\n-         --  missing and the other is explicitly set to 1).\n+         --  L, R are the Expressions values from two attribute nodes for First\n+         --  or Last attributes. Either may be set to No_List if no expressions\n+         --  are present (indicating subscript 1). The result is True if both\n+         --  expressions represent the same subscript (note one case is where\n+         --  one subscript is missing and the other is explicitly set to 1).\n \n          -----------------------\n          -- Is_Same_Subscript --\n@@ -892,16 +911,6 @@ package body Sem_Eval is\n \n                   if Assume_Valid then\n                      return EQ;\n-\n-                  --  Comment here ???\n-\n-                  elsif Is_Entity_Name (L)\n-                    and then Is_Entity_Name (R)\n-                    and then Is_Known_Valid (Entity (L))\n-                    and then Is_Known_Valid (Entity (R))\n-                  then\n-                     return EQ;\n-\n                   else\n                      return Unknown;\n                   end if;\n@@ -911,6 +920,15 @@ package body Sem_Eval is\n \n                elsif RHi = LLo then\n                   return GE;\n+\n+               elsif not Is_Known_Valid_Operand (L)\n+                 and then not Assume_Valid\n+               then\n+                  if Is_Same_Value (L, R) then\n+                     return EQ;\n+                  else\n+                     return Unknown;\n+                  end if;\n                end if;\n             end if;\n          end;"}]}