{"sha": "019fa094da1f6ed210b968d76705b3decd733da2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE5ZmEwOTRkYTFmNmVkMjEwYjk2OGQ3NjcwNWIzZGVjZDczM2RhMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-12-30T18:15:04Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-12-30T18:15:04Z"}, "message": "* builtins.c (validate_arglist): New function, use it.\n\nFrom-SVN: r38566", "tree": {"sha": "2f27e7b21004f2f117fc0963c4610939d87f83d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f27e7b21004f2f117fc0963c4610939d87f83d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/019fa094da1f6ed210b968d76705b3decd733da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019fa094da1f6ed210b968d76705b3decd733da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019fa094da1f6ed210b968d76705b3decd733da2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019fa094da1f6ed210b968d76705b3decd733da2/comments", "author": null, "committer": null, "parents": [{"sha": "17b8888b84e6893c6be498d2afc2fd1383a1e018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b8888b84e6893c6be498d2afc2fd1383a1e018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b8888b84e6893c6be498d2afc2fd1383a1e018"}], "stats": {"total": 231, "additions": 90, "deletions": 141}, "files": [{"sha": "3c3dc8b75011e352e2b7df5d684e564b830694a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fa094da1f6ed210b968d76705b3decd733da2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fa094da1f6ed210b968d76705b3decd733da2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=019fa094da1f6ed210b968d76705b3decd733da2", "patch": "@@ -1,3 +1,7 @@\n+2000-12-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (validate_arglist): New function, use it.\n+\n 2000-12-30  Philip Blundell  <philb@gnu.org>\n \n \t* config/arm/arm.c (arm_expand_prologue): Fix typos in error "}, {"sha": "15f4bcbf7195120661e7869ae0eda049977043ad", "filename": "gcc/builtins.c", "status": "modified", "additions": 86, "deletions": 141, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fa094da1f6ed210b968d76705b3decd733da2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fa094da1f6ed210b968d76705b3decd733da2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=019fa094da1f6ed210b968d76705b3decd733da2", "patch": "@@ -147,6 +147,7 @@ static tree stabilize_va_list\t\tPARAMS ((tree, int));\n static rtx expand_builtin_expect\tPARAMS ((tree, rtx));\n static tree fold_builtin_constant_p\tPARAMS ((tree));\n static tree build_function_call_expr\tPARAMS ((tree, tree));\n+static int validate_arglist\t\tPARAMS ((tree, ...));\n \n /* Return the alignment in bits of EXP, a pointer valued expression.\n    But don't return more than MAX_ALIGN no matter what.\n@@ -599,8 +600,7 @@ expand_builtin_setjmp (arglist, target)\n {\n   rtx buf_addr, next_lab, cont_lab;\n \n-  if (arglist == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE)\n+  if (!validate_arglist (arglist, POINTER_TYPE, VOID_TYPE))\n     return NULL_RTX;\n \n   if (target == 0 || GET_CODE (target) != REG\n@@ -1370,9 +1370,7 @@ expand_builtin_mathfn (exp, target, subtarget)\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n   tree arglist = TREE_OPERAND (exp, 1);\n \n-  if (arglist == 0\n-      /* Arg could be wrong type if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != REAL_TYPE)\n+  if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n     return 0;\n \n   /* Stabilize and compute the argument.  */\n@@ -1486,9 +1484,7 @@ expand_builtin_strlen (exp, target)\n   tree arglist = TREE_OPERAND (exp, 1);\n   enum machine_mode value_mode = TYPE_MODE (TREE_TYPE (exp));\n \n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE)\n+  if (!validate_arglist (arglist, POINTER_TYPE, VOID_TYPE))\n     return 0;\n   else\n     {\n@@ -1590,10 +1586,7 @@ expand_builtin_strstr (arglist, target, mode)\n      rtx target;\n      enum machine_mode mode;\n {\n-  if (arglist == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != POINTER_TYPE\n+  if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE)\n       || current_function_check_memory_usage)\n     return 0;\n   else\n@@ -1650,10 +1643,7 @@ expand_builtin_strchr (arglist, target, mode)\n      rtx target;\n      enum machine_mode mode;\n {\n-  if (arglist == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != INTEGER_TYPE\n+  if (!validate_arglist (arglist, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE)\n       || current_function_check_memory_usage)\n     return 0;\n   else\n@@ -1700,10 +1690,7 @@ expand_builtin_strrchr (arglist, target, mode)\n      rtx target;\n      enum machine_mode mode;\n {\n-  if (arglist == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != INTEGER_TYPE\n+  if (!validate_arglist (arglist, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE)\n       || current_function_check_memory_usage)\n     return 0;\n   else\n@@ -1758,10 +1745,7 @@ expand_builtin_strpbrk (arglist, target, mode)\n      rtx target;\n      enum machine_mode mode;\n {\n-  if (arglist == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != POINTER_TYPE\n+  if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE)\n       || current_function_check_memory_usage)\n     return 0;\n   else\n@@ -1837,16 +1821,8 @@ static rtx\n expand_builtin_memcpy (arglist)\n      tree arglist;\n {\n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n-\t  != POINTER_TYPE)\n-      || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE\n-\t\t\t\t(TREE_CHAIN (TREE_CHAIN (arglist)))))\n-\t  != INTEGER_TYPE))\n+  if (!validate_arglist (arglist,\n+\t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     return 0;\n   else\n     {\n@@ -1915,12 +1891,7 @@ expand_builtin_strcpy (exp)\n   tree arglist = TREE_OPERAND (exp, 1);\n   rtx result;\n \n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n-\t  != POINTER_TYPE))\n+  if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return 0;\n   else\n     {\n@@ -1967,16 +1938,8 @@ expand_builtin_strncpy (arglist, target, mode)\n      rtx target;\n      enum machine_mode mode;\n {\n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n-\t  != POINTER_TYPE)\n-      || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE\n-\t\t\t\t(TREE_CHAIN (TREE_CHAIN (arglist)))))\n-\t  != INTEGER_TYPE))\n+  if (!validate_arglist (arglist,\n+\t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     return 0;\n   else\n     {\n@@ -2060,17 +2023,8 @@ expand_builtin_memset (exp)\n {\n   tree arglist = TREE_OPERAND (exp, 1);\n \n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n-\t  != INTEGER_TYPE)\n-      || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n-      || (INTEGER_TYPE\n-\t  != (TREE_CODE (TREE_TYPE\n-\t\t\t (TREE_VALUE\n-\t\t\t  (TREE_CHAIN (TREE_CHAIN (arglist))))))))\n+  if (!validate_arglist (arglist,\n+\t\t\t POINTER_TYPE, INTEGER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     return 0;\n   else\n     {\n@@ -2142,14 +2096,12 @@ expand_builtin_bzero (exp)\n   tree dest, size, newarglist;\n   rtx result;\n \n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (dest = TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || (TREE_CODE (TREE_TYPE (size = TREE_VALUE (TREE_CHAIN (arglist))))\n-\t  != INTEGER_TYPE))\n+  if (!validate_arglist (arglist, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     return NULL_RTX;\n \n+  dest = TREE_VALUE (arglist);\n+  size = TREE_VALUE (TREE_CHAIN (arglist));\n+  \n   /* New argument list transforming bzero(ptr x, int y) to\n      memset(ptr x, int 0, size_t y).  */\n   \n@@ -2181,13 +2133,8 @@ expand_builtin_memcmp (exp, arglist, target)\n   if (current_function_check_memory_usage)\n     return 0;\n \n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != POINTER_TYPE\n-      || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist))))) != INTEGER_TYPE)\n+  if (!validate_arglist (arglist,\n+\t\t      POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     return 0;\n \n   {\n@@ -2270,12 +2217,7 @@ expand_builtin_strcmp (exp, target, mode)\n   if (current_function_check_memory_usage)\n     return 0;\n \n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n-\t  != POINTER_TYPE))\n+  if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return 0;\n \n   arg1 = TREE_VALUE (arglist);\n@@ -2379,13 +2321,8 @@ expand_builtin_strncmp (exp, target, mode)\n   if (current_function_check_memory_usage)\n     return 0;\n \n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != POINTER_TYPE\n-      || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist))))) != INTEGER_TYPE)\n+  if (!validate_arglist (arglist,\n+\t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     return 0;\n \n   arg1 = TREE_VALUE (arglist);\n@@ -2478,12 +2415,7 @@ expand_builtin_strcat (arglist, target, mode)\n   if (current_function_check_memory_usage)\n     return 0;\n \n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n-\t  != POINTER_TYPE))\n+  if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return 0;\n   else\n     {\n@@ -2512,16 +2444,8 @@ expand_builtin_strncat (arglist, target, mode)\n   if (current_function_check_memory_usage)\n     return 0;\n \n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n-\t  != POINTER_TYPE)\n-      || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE\n-\t\t\t\t(TREE_CHAIN (TREE_CHAIN (arglist)))))\n-\t  != INTEGER_TYPE))\n+  if (!validate_arglist (arglist,\n+\t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     return 0;\n   else\n     {\n@@ -2576,12 +2500,7 @@ expand_builtin_strspn (arglist, target, mode)\n   if (current_function_check_memory_usage)\n     return 0;\n \n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n-\t  != POINTER_TYPE))\n+  if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return 0;\n   else\n     {\n@@ -2621,12 +2540,7 @@ expand_builtin_strcspn (arglist, target, mode)\n   if (current_function_check_memory_usage)\n     return 0;\n \n-  if (arglist == 0\n-      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n-      || TREE_CHAIN (arglist) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n-\t  != POINTER_TYPE))\n+  if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return 0;\n   else\n     {\n@@ -3174,9 +3088,7 @@ expand_builtin_alloca (arglist, target)\n {\n   rtx op0;\n \n-  if (arglist == 0\n-      /* Arg could be non-integer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != INTEGER_TYPE)\n+  if (!validate_arglist (arglist, INTEGER_TYPE, VOID_TYPE))\n     return 0;\n \n   /* Compute the argument.  */\n@@ -3196,9 +3108,7 @@ expand_builtin_ffs (arglist, target, subtarget)\n      rtx target, subtarget;\n {\n   rtx op0;\n-  if (arglist == 0\n-      /* Arg could be non-integer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != INTEGER_TYPE)\n+  if (!validate_arglist (arglist, INTEGER_TYPE, VOID_TYPE))\n     return 0;\n \n   /* Compute the argument.  */\n@@ -3228,11 +3138,7 @@ expand_builtin_fputs (arglist, ignore)\n     return 0;\n \n   /* Verify the arguments in the original call. */\n-  if (arglist == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE)\n-      || TREE_CHAIN (arglist) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n-\t  != POINTER_TYPE)\n+  if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE)\n       || current_function_check_memory_usage)\n     return 0;\n \n@@ -3411,13 +3317,10 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t computed?  We'll also need a safe worst case value for varargs\n \t functions.  */\n     case BUILT_IN_APPLY:\n-      if (arglist == 0\n-\t  /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-\t  || ! POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (arglist)))\n-\t  || TREE_CHAIN (arglist) == 0\n-\t  || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != POINTER_TYPE\n-\t  || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n-\t  || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist))))) != INTEGER_TYPE)\n+      if (!validate_arglist (arglist, POINTER_TYPE,\n+\t\t\t     POINTER_TYPE, INTEGER_TYPE, VOID_TYPE)\n+\t  && !validate_arglist (arglist, REFERENCE_TYPE,\n+\t\t\t\tPOINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n \treturn const0_rtx;\n       else\n \t{\n@@ -3435,9 +3338,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t value described by RESULT.  RESULT is address of the block of\n \t memory returned by __builtin_apply.  */\n     case BUILT_IN_RETURN:\n-      if (arglist\n-\t  /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-\t  && TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) == POINTER_TYPE)\n+      if (validate_arglist (arglist, POINTER_TYPE, VOID_TYPE))\n \texpand_builtin_return (expand_expr (TREE_VALUE (arglist),\n \t\t\t\t\t    NULL_RTX, VOIDmode, 0));\n       return const0_rtx;\n@@ -3608,8 +3509,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t It's similar to the C library longjmp function but works with\n \t __builtin_setjmp above.  */\n     case BUILT_IN_LONGJMP:\n-      if (arglist == 0 || TREE_CHAIN (arglist) == 0\n-\t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE)\n+      if (!validate_arglist (arglist, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n \tbreak;\n       else\n \t{\n@@ -3750,9 +3650,7 @@ fold_builtin (exp)\n       return fold_builtin_constant_p (arglist);\n \n     case BUILT_IN_STRLEN:\n-      if (arglist != 0\n-\t  /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-\t  && TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) == POINTER_TYPE)\n+      if (validate_arglist (arglist, POINTER_TYPE, VOID_TYPE))\n \t{\n \t  tree len = c_strlen (TREE_VALUE (arglist));\n \t  if (len != 0)\n@@ -3779,3 +3677,50 @@ build_function_call_expr (fn, arglist)\n   TREE_SIDE_EFFECTS (call_expr) = 1;\n   return fold (call_expr);\n }\n+\n+/* This function validates the types of a function call argument list\n+   represented as a tree chain of parameters against a specified list\n+   of tree_codes.  If the last specifier is a 0, that represents an\n+   ellipses, otherwise the last specifier must be a VOID_TYPE.  */\n+static int\n+validate_arglist VPARAMS ((tree arglist, ...))\n+{\n+#ifndef ANSI_PROTOTYPES\n+  tree arglist;\n+#endif\n+  enum tree_code code;\n+  va_list ap;\n+\n+  VA_START (ap, arglist);\n+\n+#ifndef ANSI_PROTOTYPES\n+  arglist = va_arg (ap, tree);\n+#endif\n+\n+  do {\n+    code = va_arg (ap, enum tree_code);\n+    switch (code)\n+    {\n+    case 0:\n+      /* This signifies an ellipses, any further arguments are all ok.  */\n+      va_end (ap);\n+      return 1;\n+    case VOID_TYPE:\n+      /* This signifies an endlink, if no arguments remain, return\n+         true, otherwise return false.  */\n+      va_end (ap);\n+      return (arglist == 0);\n+    default:\n+      /* If no parameters remain or the parameter's code does not\n+         match the specified code, return false.  Otherwise continue\n+         checking any remaining arguments.  */\n+      if (arglist == 0 || code != TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))))\n+        {\n+\t  va_end (ap);\n+\t  return 0;\n+\t}\n+      break;\n+    }\n+    arglist = TREE_CHAIN (arglist);\n+  } while (1);\n+}"}]}