{"sha": "1d4b4f4979171ef0dacc452439e3a317795441db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ0YjRmNDk3OTE3MWVmMGRhY2M0NTI0MzllM2EzMTc3OTU0NDFkYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-01-31T20:06:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-01-31T20:06:42Z"}, "message": "re PR target/89071 (AVX vcvtsd2ss lets us avoid PXOR dependency breaking for scalar float<->double and other scalar xmm,xmm instructions)\n\n\tPR target/89071\n\t* config/i386/i386.md (*extendsfdf2): Split out reg->reg\n\talternative to avoid partial SSE register stall for TARGET_AVX.\n\t(truncdfsf2): Ditto.\n\t(sse4_1_round<mode>2): Ditto.\n\nFrom-SVN: r268427", "tree": {"sha": "5064efd8a5202412d2342f7204758c9188c1408c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5064efd8a5202412d2342f7204758c9188c1408c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d4b4f4979171ef0dacc452439e3a317795441db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4b4f4979171ef0dacc452439e3a317795441db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d4b4f4979171ef0dacc452439e3a317795441db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4b4f4979171ef0dacc452439e3a317795441db/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec2be203d1d8c5cd690cc1444303a2ca9187e962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2be203d1d8c5cd690cc1444303a2ca9187e962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec2be203d1d8c5cd690cc1444303a2ca9187e962"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "bf8892946f61498a109b32059bff1c3aa32cf49f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4b4f4979171ef0dacc452439e3a317795441db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4b4f4979171ef0dacc452439e3a317795441db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d4b4f4979171ef0dacc452439e3a317795441db", "patch": "@@ -1,3 +1,11 @@\n+2019-01-31  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/89071\n+\t* config/i386/i386.md (*extendsfdf2): Split out reg->reg\n+\talternative to avoid partial SSE register stall for TARGET_AVX.\n+\t(truncdfsf2): Ditto.\n+\t(sse4_1_round<mode>2): Ditto.\n+\n 2018-01-31  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \tPR tree-optimization/89008"}, {"sha": "744f155fca6f9fb8ba25ecc6a719ec8b8c2d0da8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4b4f4979171ef0dacc452439e3a317795441db/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4b4f4979171ef0dacc452439e3a317795441db/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1d4b4f4979171ef0dacc452439e3a317795441db", "patch": "@@ -4370,9 +4370,9 @@\n })\n \n (define_insn \"*extendsfdf2\"\n-  [(set (match_operand:DF 0 \"nonimm_ssenomem_operand\" \"=f,m,v\")\n+  [(set (match_operand:DF 0 \"nonimm_ssenomem_operand\" \"=f,m,v,v\")\n         (float_extend:DF\n-\t  (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f,vm\")))]\n+\t  (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f,v,m\")))]\n   \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n {\n   switch (which_alternative)\n@@ -4382,15 +4382,17 @@\n       return output_387_reg_move (insn, operands);\n \n     case 2:\n+      return \"%vcvtss2sd\\t{%d1, %0|%0, %d1}\";\n+    case 3:\n       return \"%vcvtss2sd\\t{%1, %d0|%d0, %1}\";\n \n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"fmov,fmov,ssecvt\")\n-   (set_attr \"prefix\" \"orig,orig,maybe_vex\")\n-   (set_attr \"mode\" \"SF,XF,DF\")\n+  [(set_attr \"type\" \"fmov,fmov,ssecvt,ssecvt\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_vex,maybe_vex\")\n+   (set_attr \"mode\" \"SF,XF,DF,DF\")\n    (set (attr \"enabled\")\n      (if_then_else\n        (match_test (\"TARGET_SSE2 && TARGET_SSE_MATH\"))\n@@ -4481,7 +4483,7 @@\n   \"TARGET_SSE_PARTIAL_REG_DEPENDENCY && epilogue_completed\n    && optimize_function_for_speed_p (cfun)\n    && (!REG_P (operands[1])\n-       || REGNO (operands[0]) != REGNO (operands[1]))\n+       || (!TARGET_AVX && REGNO (operands[0]) != REGNO (operands[1])))\n    && (!EXT_REX_SSE_REG_P (operands[0])\n        || TARGET_AVX512VL)\"\n   [(set (match_dup 0)\n@@ -4534,9 +4536,9 @@\n ;; Conversion from DFmode to SFmode.\n \n (define_insn \"truncdfsf2\"\n-  [(set (match_operand:SF 0 \"nonimm_ssenomem_operand\" \"=m,f,v\")\n+  [(set (match_operand:SF 0 \"nonimm_ssenomem_operand\" \"=m,f,v,v\")\n \t(float_truncate:SF\n-\t  (match_operand:DF 1 \"register_ssemem_operand\" \"f,f,vm\")))]\n+\t  (match_operand:DF 1 \"register_ssemem_operand\" \"f,f,v,m\")))]\n   \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n {\n   switch (which_alternative)\n@@ -4546,13 +4548,15 @@\n       return output_387_reg_move (insn, operands);\n \n     case 2:\n+      return \"%vcvtsd2ss\\t{%d1, %0|%0, %d1}\";\n+    case 3:\n       return \"%vcvtsd2ss\\t{%1, %d0|%d0, %1}\";\n \n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"fmov,fmov,ssecvt\")\n+  [(set_attr \"type\" \"fmov,fmov,ssecvt,ssecvt\")\n    (set_attr \"mode\" \"SF\")\n    (set (attr \"enabled\")\n      (if_then_else\n@@ -4639,7 +4643,7 @@\n   \"TARGET_SSE_PARTIAL_REG_DEPENDENCY && epilogue_completed\n    && optimize_function_for_speed_p (cfun)\n    && (!REG_P (operands[1])\n-       || REGNO (operands[0]) != REGNO (operands[1]))\n+       || (!TARGET_AVX && REGNO (operands[0]) != REGNO (operands[1])))\n    && (!EXT_REX_SSE_REG_P (operands[0])\n        || TARGET_AVX512VL)\"\n   [(set (match_dup 0)\n@@ -16171,19 +16175,20 @@\n \f\n \n (define_insn \"sse4_1_round<mode>2\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,v\")\n-\t(unspec:MODEF [(match_operand:MODEF 1 \"nonimmediate_operand\" \"xm,vm\")\n-\t\t       (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n\")]\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,v\")\n+\t(unspec:MODEF [(match_operand:MODEF 1 \"nonimmediate_operand\" \"x,m,vm\")\n+\t\t       (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n,n\")]\n \t\t      UNSPEC_ROUND))]\n   \"TARGET_SSE4_1\"\n   \"@\n+   %vround<ssemodesuffix>\\t{%2, %d1, %0|%0, %d1, %2}\n    %vround<ssemodesuffix>\\t{%2, %1, %d0|%d0, %1, %2}\n    vrndscale<ssemodesuffix>\\t{%2, %1, %d0|%d0, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix_extra\" \"1,*\")\n-   (set_attr \"length_immediate\" \"*,1\")\n-   (set_attr \"prefix\" \"maybe_vex,evex\")\n-   (set_attr \"isa\" \"noavx512f,avx512f\")\n+   (set_attr \"prefix_extra\" \"1,1,*\")\n+   (set_attr \"length_immediate\" \"*,*,1\")\n+   (set_attr \"prefix\" \"maybe_vex,maybe_vex,evex\")\n+   (set_attr \"isa\" \"noavx512f,noavx512f,avx512f\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"rintxf2\""}]}