{"sha": "79a18702006d53bc378affcd5dd6c8df7883b58f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlhMTg3MDIwMDZkNTNiYzM3OGFmZmNkNWRkNmM4ZGY3ODgzYjU4Zg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2019-04-15T08:30:36Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-04-15T08:30:36Z"}, "message": "Reorganize cgraph_node::clone_of_p\n\n2019-04-15  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/pr89693\n\t* cgraph.c (clone_of_p): Loop over clone chain for each step in\n\tthe thunk chain.\n\n\ttestsuite/\n\t* g++.dg/ipa/pr89693.C: New test.\n\nFrom-SVN: r270364", "tree": {"sha": "85c9a79521fa8c8bcfe5fbf2005d6f2993a4e3fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85c9a79521fa8c8bcfe5fbf2005d6f2993a4e3fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79a18702006d53bc378affcd5dd6c8df7883b58f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a18702006d53bc378affcd5dd6c8df7883b58f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a18702006d53bc378affcd5dd6c8df7883b58f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a18702006d53bc378affcd5dd6c8df7883b58f/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "887e182f05d64c0cb2a888711d8d6ca1174fe93a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887e182f05d64c0cb2a888711d8d6ca1174fe93a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/887e182f05d64c0cb2a888711d8d6ca1174fe93a"}], "stats": {"total": 93, "additions": 81, "deletions": 12}, "files": [{"sha": "e85c08c283b46b69edd692c546f4c84b95b66329", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a18702006d53bc378affcd5dd6c8df7883b58f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a18702006d53bc378affcd5dd6c8df7883b58f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79a18702006d53bc378affcd5dd6c8df7883b58f", "patch": "@@ -1,3 +1,9 @@\n+2019-04-15  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/pr89693\n+\t* cgraph.c (clone_of_p): Loop over clone chain for each step in\n+\tthe thunk chain.\n+\n 2019-04-15  Monk Chiang  <sh.chiang04@gmail.com>\n \n \t* config.gcc (nds32*-*-linux*): Set gcc_cv_initfini_array to yes."}, {"sha": "b1b0b4c42d5c202916a25b54f554c891f1d6ab3e", "filename": "gcc/cgraph.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a18702006d53bc378affcd5dd6c8df7883b58f/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a18702006d53bc378affcd5dd6c8df7883b58f/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=79a18702006d53bc378affcd5dd6c8df7883b58f", "patch": "@@ -2977,17 +2977,25 @@ cgraph_node::collect_callers (void)\n static bool\n clone_of_p (cgraph_node *node, cgraph_node *node2)\n {\n-  bool skipped_thunk = false;\n   node = node->ultimate_alias_target ();\n   node2 = node2->ultimate_alias_target ();\n \n+  if (node2->clone_of == node\n+      || node2->former_clone_of == node->decl)\n+    return true;\n+\n+  if (!node->thunk.thunk_p && !node->former_thunk_p ())\n+    {\n+      while (node2 && node->decl != node2->decl)\n+\tnode2 = node2->clone_of;\n+      return node2 != NULL;\n+    }\n+\n   /* There are no virtual clones of thunks so check former_clone_of or if we\n      might have skipped thunks because this adjustments are no longer\n      necessary.  */\n   while (node->thunk.thunk_p || node->former_thunk_p ())\n     {\n-      if (node2->former_clone_of == node->decl)\n-\treturn true;\n       if (!node->thunk.this_adjusting)\n \treturn false;\n       /* In case of instrumented expanded thunks, which can have multiple calls\n@@ -2996,23 +3004,21 @@ clone_of_p (cgraph_node *node, cgraph_node *node2)\n       if (node->callees->next_callee)\n \treturn true;\n       node = node->callees->callee->ultimate_alias_target ();\n-      skipped_thunk = true;\n-    }\n \n-  if (skipped_thunk)\n-    {\n       if (!node2->clone.args_to_skip\n \t  || !bitmap_bit_p (node2->clone.args_to_skip, 0))\n \treturn false;\n       if (node2->former_clone_of == node->decl)\n \treturn true;\n-      else if (!node2->clone_of)\n-\treturn false;\n+\n+      cgraph_node *n2 = node2;\n+      while (n2 && node->decl != n2->decl)\n+\tn2 = n2->clone_of;\n+      if (n2)\n+\treturn true;\n     }\n \n-  while (node2 && node->decl != node2->decl)\n-    node2 = node2->clone_of;\n-  return node2 != NULL;\n+  return false;\n }\n \n /* Verify edge count and frequency.  */"}, {"sha": "66dcfc4caf179f707a852d6636acc496a7f8ed4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a18702006d53bc378affcd5dd6c8df7883b58f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a18702006d53bc378affcd5dd6c8df7883b58f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79a18702006d53bc378affcd5dd6c8df7883b58f", "patch": "@@ -1,3 +1,8 @@\n+2019-04-15  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/pr89693\n+\t* g++.dg/ipa/pr89693.C: New test.\n+\n 2019-04-15  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n \n \tPR tree-optimization/90020"}, {"sha": "4ac83eeeb3a2439e72ce3217c9a979aa8a967d86", "filename": "gcc/testsuite/g++.dg/ipa/pr89693.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a18702006d53bc378affcd5dd6c8df7883b58f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr89693.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a18702006d53bc378affcd5dd6c8df7883b58f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr89693.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr89693.C?ref=79a18702006d53bc378affcd5dd6c8df7883b58f", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 4 Apr 2005 <nathan@codesourcery.com>\n+// Re-purposed to check for re-rurgesnce of PR 89693 in 2019.\n+\n+// { dg-do compile }\n+// { dg-options \"-O3 -fno-ipa-icf-functions\" }\n+\n+// Origin: yanliu@ca.ibm.com\n+//         nathan@codesourcery.com\n+\n+struct A {\n+  virtual void One ();\n+};\n+struct B  {\n+  virtual B *Two ();\n+  virtual B &Three ();\n+};\n+\n+struct C : A, B\n+{\n+  virtual C *Two ();\n+  virtual C &Three ();\n+};\n+void A::One () {}\n+B *B::Two()    {return this;}\n+B &B::Three()    {return *this;}\n+C *C::Two ()   {return 0;}\n+C &C::Three ()   {return *(C *)0;}\n+\n+B *Foo (B *b)\n+{\n+  return b->Two ();\n+}\n+\n+B &Bar (B *b)\n+{\n+  return b->Three ();\n+}\n+\n+int main ()\n+{\n+  C c;\n+\n+  /* We should not adjust a null pointer.  */\n+  if (Foo (&c))\n+    return 1;\n+  /* But we should adjust a (bogus) null reference.  */\n+  if (!&Bar (&c))\n+    return 2;\n+\n+  return 0;\n+}"}]}