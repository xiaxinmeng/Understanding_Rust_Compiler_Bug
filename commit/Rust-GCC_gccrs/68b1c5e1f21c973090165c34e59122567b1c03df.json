{"sha": "68b1c5e1f21c973090165c34e59122567b1c03df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhiMWM1ZTFmMjFjOTczMDkwMTY1YzM0ZTU5MTIyNTY3YjFjMDNkZg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-02-09T20:50:21Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-02-09T20:50:21Z"}, "message": "re PR fortran/57522 ([F03] ASSOCIATE construct creates array descriptor with incorrect stride for derived type array component)\n\n2014-02-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/57522\n\t* resolve.c (resolve_assoc_var): Set the subref_array_pointer\n\tattribute for the 'associate-name' if necessary.\n\t* trans-stmt.c (trans_associate_var): If the 'associate-name'\n\tis a subref_array_pointer, assign the element size of the\n\tassociate variable to 'span'.\n\n2014-02-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/57522\n\t* gfortran.dg/associated_target_5.f03 : New test\n\nFrom-SVN: r207646", "tree": {"sha": "71d00773068e77202184e9ae61605c3cd362ea64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71d00773068e77202184e9ae61605c3cd362ea64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68b1c5e1f21c973090165c34e59122567b1c03df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68b1c5e1f21c973090165c34e59122567b1c03df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68b1c5e1f21c973090165c34e59122567b1c03df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68b1c5e1f21c973090165c34e59122567b1c03df/comments", "author": null, "committer": null, "parents": [{"sha": "56c78e5c22f59741aba3aac3fa89452895be36bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c78e5c22f59741aba3aac3fa89452895be36bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c78e5c22f59741aba3aac3fa89452895be36bf"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "89b34abff0f53fd4e13ab3e5aed33ab830213b43", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b1c5e1f21c973090165c34e59122567b1c03df/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b1c5e1f21c973090165c34e59122567b1c03df/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=68b1c5e1f21c973090165c34e59122567b1c03df", "patch": "@@ -1,3 +1,12 @@\n+2014-02-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/57522\n+\t* resolve.c (resolve_assoc_var): Set the subref_array_pointer\n+\tattribute for the 'associate-name' if necessary.\n+\t* trans-stmt.c (trans_associate_var): If the 'associate-name'\n+\tis a subref_array_pointer, assign the element size of the\n+\tassociate variable to 'span'.\n+\n 2014-02-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/59026"}, {"sha": "69ec7bf4c18fc95ccfdbff0754d41a756d9264bf", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b1c5e1f21c973090165c34e59122567b1c03df/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b1c5e1f21c973090165c34e59122567b1c03df/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=68b1c5e1f21c973090165c34e59122567b1c03df", "patch": "@@ -7820,6 +7820,8 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n \n       sym->attr.target = tsym->attr.target\n \t\t\t || gfc_expr_attr (target).pointer;\n+      if (is_subref_array (target))\n+\tsym->attr.subref_array_pointer = 1;\n     }\n \n   /* Get type if this was not already set.  Note that it can be"}, {"sha": "19e29a74bceafa7f8cd139ad54bb5359e2a0ba52", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b1c5e1f21c973090165c34e59122567b1c03df/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b1c5e1f21c973090165c34e59122567b1c03df/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=68b1c5e1f21c973090165c34e59122567b1c03df", "patch": "@@ -1192,6 +1192,17 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n \t\t\t\t\t      dim, gfc_index_one_node);\n \t}\n \n+      /* If this is a subreference array pointer associate name use the\n+\t associate variable element size for the value of 'span'.  */\n+      if (sym->attr.subref_array_pointer)\n+\t{\n+\t  gcc_assert (e->expr_type == EXPR_VARIABLE);\n+\t  tmp = e->symtree->n.sym->backend_decl;\n+\t  tmp = gfc_get_element_type (TREE_TYPE (tmp));\n+\t  tmp = fold_convert (gfc_array_index_type, size_in_bytes (tmp));\n+\t  gfc_add_modify (&se.pre, GFC_DECL_SPAN(desc), tmp);\n+\t}\n+\n       /* Done, register stuff as init / cleanup code.  */\n       gfc_add_init_cleanup (block, gfc_finish_block (&se.pre),\n \t\t\t    gfc_finish_block (&se.post));"}, {"sha": "7295b9fd9533f6b0e829ad6b482369e95dd6b8ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b1c5e1f21c973090165c34e59122567b1c03df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b1c5e1f21c973090165c34e59122567b1c03df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68b1c5e1f21c973090165c34e59122567b1c03df", "patch": "@@ -1,3 +1,8 @@\n+2014-02-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/57522\n+\t* gfortran.dg/associated_target_5.f03 : New test\n+\n 2014-02-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/59026"}, {"sha": "5c29b6014bf70bc4708d330841c14577933235f4", "filename": "gcc/testsuite/gfortran.dg/associated_target_5.f03", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b1c5e1f21c973090165c34e59122567b1c03df/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b1c5e1f21c973090165c34e59122567b1c03df/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_5.f03?ref=68b1c5e1f21c973090165c34e59122567b1c03df", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+! Test the fix for PR57522, in which the associate name had a\n+! 'span' of an INTEGER rather than that of 'mytype'.\n+!\n+! Contributed by A Briolat  <alan.briolat@gmail.com>\n+!\n+program test_associate\n+  type mytype\n+    integer :: a = 1, b = 2\n+  end type\n+  type(mytype) :: t(4), u(2,2)\n+  integer :: c(4)\n+  t%a = [0, 1, 2, 3]\n+  t%b = [4, 5, 6, 7]\n+  associate (a => t%a)\n+! Test 'a' is OK on lhs and/or rhs of assignments\n+    c = a - 1\n+    if (any (c .ne. [-1,0,1,2])) call abort\n+    a = a + 1\n+    if (any (a .ne. [1,2,3,4])) call abort\n+    a = t%b\n+    if (any (a .ne. t%b)) call abort\n+! Test 'a' is OK as an actual argument\n+    c = foo(a)\n+    if (any (c .ne. t%b + 10)) call abort\n+  end associate\n+! Make sure that the fix works for multi-dimensional arrays...\n+  associate (a => u%a)\n+    if (any (a .ne. reshape ([1,1,1,1],[2,2]))) call abort\n+  end associate\n+! ...and sections\n+  associate (a => t(2:3)%b)\n+    if (any (a .ne. [5,6])) call abort\n+  end associate\n+contains\n+  function foo(arg) result(res)\n+    integer :: arg(4), res(4)\n+    res = arg + 10\n+  end function\n+end program"}]}