{"sha": "0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRmNmMyYzc0ZWE5NTRmOGUyYTBjY2RiODU3NzBmMmY1MmQ0OTQyYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-10-21T21:32:15Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-10-21T21:32:15Z"}, "message": "c-format.c (maybe_read_dollar_number): Use safe-ctype macros and/or fold extra calls into fewer ones.\n\n\t* c-format.c (maybe_read_dollar_number): Use safe-ctype macros\n\tand/or fold extra calls into fewer ones.\n\t* collect2.c (dump_file): Likewise.\n\t* cppexp.c (parse_number): Likewise.\n\t* cpplex.c (_cpp_lex_direct): Likewise.\n\t* final.c (output_asm_insn, asm_fprintf): Likewise.\n\t* fix-header.c (inf_scan_ident, main): Likewise.\n\t* fixinc/fixfixes.c (char_macro_use_fix, char_macro_def_fix):\n\tLikewise.\n\t* fold-const.c (real_hex_to_f): Likewise.\n\t* gen-protos.c (parse_fn_proto): Likewise.\n\t* genattrtab.c (check_attr_test, check_attr_value): Likewise.\n\t* genrecog.c (change_state, write_action): Likewise.\n\t* gensupport.c (shift_output_template): Likewise.\n\t* local-alloc.c (requires_inout): Likewise.\n\t* mips-tfile.c (IS_ASM_IDENT): Likewise.\n\t* protoize.c (is_id_char, main): Likewise.\n\t* real.c (asctoeg): Likewise.\n\t* recog.c (asm_operand_ok): Likewise.\n\t* reload.c (find_reloads): Likewise.\n\t* scan.c (scan_identget_token): Likewise.\n\t* sched-vis.c (print_value): Likewise.\n\t* stringpool.c (ggc_alloc_string): Likewise.\n\t* toplev.c (read_integral_parameter, decode_g_option): Likewise.\n\t* tradcif.y (parse_number, yylex, parse_escape): Likewise.\n\t* tradcpp.c (rescan): Likewise.\n\t* tree.c (clean_symbol_name): Likewise.\n\t* varasm.c (decode_reg_name): Likewise.\n\n\t* alpha.h (ASM_OUTPUT_ASCII): Likewise.\n\t* darwin.c (name_needs_quotes, func_name_maybe_scoped): Likewise.\n\t* dsp16xx.h (ASM_OUTPUT_ASCII): Likewise.\n\t* m88k.c (output_ascii): Likewise.\n\t* m88k.h (OVERRIDE_OPTIONS): Likewise.\n\t* mcore.h (REG_CLASS_FROM_LETTER): Likewise.\n\t* ns32k/encore.h (ASM_OUTPUT_ASCII): Likewise.\n\t* sh.h (REG_CLASS_FROM_LETTER): Likewise.\n\ncp:\n\t* xref.c (GNU_xref_member): Use safe-ctype macros and/or fold\n\textra calls into fewer ones.\n\nf:\n\t* bad.c (ffebad_finish): Use safe-ctype macros and/or fold extra\n\tcalls into fewer ones.\n\t* implic.c (ffeimplic_lookup_): Likewise.\n\t* intdoc.c (dumpimp): Likewise.\n\t* intrin.c (ffeintrin_init_0): Likewise.\n\t* lex.c (ffelex_backslash_, ffelex_cfebackslash_, ffelex_hash_):\n\tLikewise.\n\t* lex.h (ffelex_is_firstnamechar): Likewise.\n\t* target.c (ffetarget_integerhex): Likewise.\n\njava:\n\t* gjavah.c (jni_print_char, decode_signature_piece): Use\n\tsafe-ctype macros and/or fold extra calls into fewer ones.\n\t* lex.c (java_read_unicode, java_lex): Likewise.\n\t* lex.h (JAVA_START_CHAR_P, JAVA_PART_CHAR_P, JAVA_ASCII_DIGIT,\n\tJAVA_ASCII_HEXDIGIT, JAVA_ASCII_LETTER): Likewise.\n\t* mangle_name.c (append_unicode_mangled_name,\n\tunicode_mangling_length): Likewise.\n\nFrom-SVN: r46397", "tree": {"sha": "852039142cb685177a7091771c1ef660c48a85e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/852039142cb685177a7091771c1ef660c48a85e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/comments", "author": null, "committer": null, "parents": [{"sha": "77b1a9217b8359f417c7e090e857c464d2e8778a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b1a9217b8359f417c7e090e857c464d2e8778a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77b1a9217b8359f417c7e090e857c464d2e8778a"}], "stats": {"total": 294, "additions": 164, "deletions": 130}, "files": [{"sha": "d98daf8de7f702356d119a41e2407057b2c63e0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1,3 +1,43 @@\n+2001-10-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-format.c (maybe_read_dollar_number): Use safe-ctype macros\n+\tand/or fold extra calls into fewer ones.\n+\t* collect2.c (dump_file): Likewise.\n+\t* cppexp.c (parse_number): Likewise.\n+\t* cpplex.c (_cpp_lex_direct): Likewise.\n+\t* final.c (output_asm_insn, asm_fprintf): Likewise.\n+\t* fix-header.c (inf_scan_ident, main): Likewise.\n+\t* fixinc/fixfixes.c (char_macro_use_fix, char_macro_def_fix):\n+\tLikewise.\n+\t* fold-const.c (real_hex_to_f): Likewise.\n+\t* gen-protos.c (parse_fn_proto): Likewise.\n+\t* genattrtab.c (check_attr_test, check_attr_value): Likewise.\n+\t* genrecog.c (change_state, write_action): Likewise.\n+\t* gensupport.c (shift_output_template): Likewise.\n+\t* local-alloc.c (requires_inout): Likewise.\n+\t* mips-tfile.c (IS_ASM_IDENT): Likewise.\n+\t* protoize.c (is_id_char, main): Likewise.\n+\t* real.c (asctoeg): Likewise.\n+\t* recog.c (asm_operand_ok): Likewise.\n+\t* reload.c (find_reloads): Likewise.\n+\t* scan.c (scan_identget_token): Likewise.\n+\t* sched-vis.c (print_value): Likewise.\n+\t* stringpool.c (ggc_alloc_string): Likewise.\n+\t* toplev.c (read_integral_parameter, decode_g_option): Likewise.\n+\t* tradcif.y (parse_number, yylex, parse_escape): Likewise.\n+\t* tradcpp.c (rescan): Likewise.\n+\t* tree.c (clean_symbol_name): Likewise.\n+\t* varasm.c (decode_reg_name): Likewise.\n+\n+\t* alpha.h (ASM_OUTPUT_ASCII): Likewise.\n+\t* darwin.c (name_needs_quotes, func_name_maybe_scoped): Likewise.\n+\t* dsp16xx.h (ASM_OUTPUT_ASCII): Likewise.\n+\t* m88k.c (output_ascii): Likewise.\n+\t* m88k.h (OVERRIDE_OPTIONS): Likewise.\n+\t* mcore.h (REG_CLASS_FROM_LETTER): Likewise.\n+\t* ns32k/encore.h (ASM_OUTPUT_ASCII): Likewise.\n+\t* sh.h (REG_CLASS_FROM_LETTER): Likewise.\n+\n 2001-10-21  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* langhooks.c (lang_hook_default_do_nothing,"}, {"sha": "acf780613d14c374bcbb1d579d18884a2a4ac507", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1092,7 +1092,7 @@ maybe_read_dollar_number (status, format, dollar_needed, params, param_ptr,\n   int argnum;\n   int overflow_flag;\n   const char *fcp = *format;\n-  if (*fcp < '0' || *fcp > '9')\n+  if (! ISDIGIT (*fcp))\n     {\n       if (dollar_needed)\n \t{\n@@ -1104,7 +1104,7 @@ maybe_read_dollar_number (status, format, dollar_needed, params, param_ptr,\n     }\n   argnum = 0;\n   overflow_flag = 0;\n-  while (*fcp >= '0' && *fcp <= '9')\n+  while (ISDIGIT (*fcp))\n     {\n       int nargnum;\n       nargnum = 10 * argnum + (*fcp - '0');"}, {"sha": "6062f79f81a3c9804accd9e3690965af8e92e9ae", "filename": "gcc/collect2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -502,7 +502,7 @@ dump_file (name)\n     {\n       int c;\n       while (c = getc (stream),\n-\t     c != EOF && (ISALNUM (c) || c == '_' || c == '$' || c == '.'))\n+\t     c != EOF && (ISIDNUM (c) || c == '$' || c == '.'))\n \tobstack_1grow (&temporary_obstack, c);\n       if (obstack_object_size (&temporary_obstack) > 0)\n \t{"}, {"sha": "e15e2ae71c040b5dc60db701b33e472dda27eb92", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -2010,8 +2010,7 @@ do {\t\t\t\t\t\t\\\n \t\t The VAX assembler fails to stop reading the escape\t      \\\n \t\t after three digits, so this is the only way we\t\t      \\\n \t\t can get it to parse the data properly.  */\t\t      \\\n-\t      if (i < thissize - 1\t\t\t\t\t      \\\n-\t\t  && p[i + 1] >= '0' && p[i + 1] <= '9')\t\t      \\\n+\t      if (i < thissize - 1 && ISDIGIT (p[i + 1]))\t\t      \\\n \t\t_size_so_far = 0, fprintf (asm_out_file, \"\\\"\\n\\t.ascii \\\"\");  \\\n \t  }\t\t\t\t\t\t\t\t      \\\n \t}\t\t\t\t\t\t\t\t      \\"}, {"sha": "fe0852813df1e417b1cec5c40b11c645f6e1e4eb", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -53,7 +53,7 @@ name_needs_quotes (name)\n {\n   int c;\n   while ((c = *name++) != '\\0')\n-    if (!isalnum (c) && c != '_')\n+    if (! ISIDNUM (c))\n       return 1;\n   return 0;\n }\n@@ -587,7 +587,7 @@ func_name_maybe_scoped (fname)\n \t  while (*fname != 0)\n \t    {\n \t      if (fname[0] == '_' && fname[1] == '_'\n-\t\t  && (fname[2] == 'F' || (fname[2] >= '0' && fname[2] <= '9')))\n+\t\t  && (fname[2] == 'F' || ISDIGIT (fname[2])))\n \t\treturn 0;\n \t      ++fname;\n \t    }"}, {"sha": "542c89b5e66f1d27f7db3867f9ad351e7d1ed812", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1699,8 +1699,7 @@ const_section ()                                                   \\\n \t\t The Vax assembler fails to stop reading the escape\t      \\\n \t\t after three digits, so this is the only way we\t\t      \\\n \t\t can get it to parse the data properly.  \t\t      \\\n-\t      if (i < thissize - 1\t\t\t\t\t      \\\n-\t\t  && p[i + 1] >= '0' && p[i + 1] <= '9')\t\t      \\\n+\t      if (i < thissize - 1 && ISDIGIT (p[i + 1]))\t\t      \\\n \t\tfprintf (asm_out_file, \"\\'\\n\\tint \\'\");\t\t              \\\n \t\t*/ \\\n \t  }\t\t\t\t\t\t\t\t      \\"}, {"sha": "4f596ad8b114ac8ed91c566facc1664fcdbdc44a", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1662,7 +1662,7 @@ output_ascii (file, opcode, max, p, size)\n \t  num += 2;\n \t  in_escape = 0;\n \t}\n-      else if (in_escape && c >= '0' && c <= '9')\n+      else if (in_escape && ISDIGIT (c))\n \t{\n \t  /* If a digit follows an octal-escape, the VAX assembler fails\n \t     to stop reading the escape after three digits.  Continue to"}, {"sha": "def27434ab13836e9705140fcc6ce5412f4de542", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -292,7 +292,7 @@ extern int flag_pic;\t\t\t\t/* -fpic */\n       {\t\t\t\t\t\t\t\t\t     \\\n \tconst char *p = m88k_short_data;\t\t\t\t     \\\n \twhile (*p)\t\t\t\t\t\t\t     \\\n-\t  if (*p >= '0' && *p <= '9')\t\t\t\t\t     \\\n+\t  if (ISDIGIT (*p))\t\t\t\t\t\t     \\\n \t    p++;\t\t\t\t\t\t\t     \\\n \t  else\t\t\t\t\t\t\t\t     \\\n \t    {\t\t\t\t\t\t\t\t     \\"}, {"sha": "d7b611bcd21ca22a6c6c1cdff979f788ea6cbfc0", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -547,7 +547,7 @@ extern int regno_reg_class[];\n extern enum reg_class reg_class_from_letter[];\n \n #define REG_CLASS_FROM_LETTER(C) \\\n-   ( (C) >= 'a' && (C) <= 'z' ? reg_class_from_letter[(C) - 'a'] : NO_REGS )\n+   ( ISLOWER (C) ? reg_class_from_letter[(C) - 'a'] : NO_REGS )\n \n /* The letters I, J, K, L, M, N, O, and P in a register constraint string\n    can be used to stand for particular ranges of immediate operands."}, {"sha": "e1337df1d3f492e56bc4ebf4f0f8e600c66b9618", "filename": "gcc/config/ns32k/encore.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fns32k%2Fencore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fns32k%2Fencore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fencore.h?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -144,8 +144,7 @@ do {\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\\\n         {\t\t\t\t\t\t\\\n           fprintf ((file), \"\\\\%o\", c);\t\t\t\\\n-          if (i < (size) - 1 \t\t\t\t\\\n-              && (p)[i + 1] >= '0' && (p)[i + 1] <= '9')\\\n+          if (i < (size) - 1 && ISDIGIT ((p)[i + 1]))\t\\\n           fprintf ((file), \"\\\"\\n\\t.ascii \\\"\");\t\t\\\n         }\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\"}, {"sha": "ddbc2a72648986593624d8e12bd0af80ae5fb4d5", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -832,7 +832,7 @@ extern int regno_reg_class[];\n extern enum reg_class reg_class_from_letter[];\n \n #define REG_CLASS_FROM_LETTER(C) \\\n-   ( (C) >= 'a' && (C) <= 'z' ? reg_class_from_letter[(C)-'a'] : NO_REGS )\n+   ( ISLOWER (C) ? reg_class_from_letter[(C)-'a'] : NO_REGS )\n \f\n /* The letters I, J, K, L and M in a register constraint string\n    can be used to stand for particular ranges of immediate operands."}, {"sha": "a8bff6cdfad2f69922f373aa9505a5925d91991d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1,3 +1,8 @@\n+2001-10-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* xref.c (GNU_xref_member): Use safe-ctype macros and/or fold\n+\textra calls into fewer ones.\n+\n 2001-10-18  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* decl.c (duplicate_decls): Propagate DECL_UNINLINABLE."}, {"sha": "dd884db312b70a9e99255cd832fa2c9d345287a6", "filename": "gcc/cp/xref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fcp%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fcp%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fxref.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -615,11 +615,11 @@ GNU_xref_member(cls, fld)\n #ifdef XREF_SHORT_MEMBER_NAMES\n   for (p = &bufa[1]; *p != 0; ++p)\n     {\n-      if (p[0] == '_' && p[1] == '_' && p[2] >= '0' && p[2] <= '9') {\n+      if (p[0] == '_' && p[1] == '_' && ISDIGIT (p[2])) {\n \tif (strncmp(&p[2], buf, i) == 0) *p = 0;\n \tbreak;\n       }\n-      else if (p[0] == '_' && p[1] == '_' && p[2] == 'C' && p[3] >= '0' && p[3] <= '9') {\n+      else if (p[0] == '_' && p[1] == '_' && p[2] == 'C' && ISDIGIT (p[3])) {\n \tif (strncmp(&p[3], buf, i) == 0) *p = 0;\n \tbreak;\n       }"}, {"sha": "c7a00da43544a82142dea06c6e4d7a9473aa5203", "filename": "gcc/cppexp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -129,7 +129,7 @@ parse_number (pfile, tok)\n     {\n       c = *p;\n \n-      if (c >= '0' && c <= '9')\n+      if (ISDIGIT (c))\n \tdigit = c - '0';\n       /* We believe that in all live character sets, a-f are\n \t consecutive, and so are A-F.  */"}, {"sha": "a15fccac22e8e32ab0300a74129c01ff7024f953", "filename": "gcc/cpplex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1183,7 +1183,7 @@ _cpp_lex_direct (pfile)\n \t    buffer->cur = pos - 1;\n \t}\n       /* All known character sets have 0...9 contiguous.  */\n-      else if (c >= '0' && c <= '9')\n+      else if (ISDIGIT (c))\n \t{\n \t  result->type = CPP_NUMBER;\n \t  parse_number (pfile, &result->val.str, c, 1);"}, {"sha": "4e1335a4b36a3dceddb9da2ee223a874ad5c421a", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1,3 +1,15 @@\n+Sun Oct 21 17:28:17 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* bad.c (ffebad_finish): Use safe-ctype macros and/or fold extra\n+\tcalls into fewer ones.\n+\t* implic.c (ffeimplic_lookup_): Likewise.\n+\t* intdoc.c (dumpimp): Likewise.\n+\t* intrin.c (ffeintrin_init_0): Likewise.\n+\t* lex.c (ffelex_backslash_, ffelex_cfebackslash_, ffelex_hash_):\n+\tLikewise.\n+\t* lex.h (ffelex_is_firstnamechar): Likewise.\n+\t* target.c (ffetarget_integerhex): Likewise.\n+\n 2001-10-21  Craig Prescott  <prescott@phys.ufl.edu>\n \n \t* target.h (FFETARGET_32bit_longs): Don't define "}, {"sha": "d258648e543b0986d367eb3d310b5422f7c99537", "filename": "gcc/f/bad.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Fbad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Fbad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbad.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -473,7 +473,7 @@ ffebad_finish ()\n       if (c == '%')\n \t{\n \t  c = ffebad_message_[++i];\n-\t  if (ISALPHA (c) && ISUPPER (c))\n+\t  if (ISUPPER (c))\n \t    {\n \t      index = c - 'A';\n "}, {"sha": "625742fbbca83ddb935a0add060ce0964fe91f90", "filename": "gcc/f/implic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Fimplic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Fimplic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fimplic.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -92,7 +92,7 @@ static ffeimplic_\n ffeimplic_lookup_ (unsigned char c)\n {\n   /* NOTE: This is definitely ASCII-specific!!  */\n-  if (ISALPHA (c) || (c == '_'))\n+  if (ISIDST (c))\n     return &ffeimplic_table_[c - 'A'];\n   return NULL;\n }"}, {"sha": "84720a321c1798339bd9cf746cc9e91373a2a167", "filename": "gcc/f/intdoc.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Fintdoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Fintdoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -399,15 +399,12 @@ dumpimp (int menu, const char *name, const char *name_uc, size_t genno,\n \n \t  for (c = summaries[imp]; c[0] != '\\0'; ++c)\n \t    {\n-\t      if ((c[0] == '@')\n-\t\t  && (c[1] >= '0')\n-\t      && (c[1] <= '9'))\n+\t      if (c[0] == '@' && ISDIGIT (c[1]))\n \t\t{\n \t\t  int argno = c[1] - '0';\n \n \t\t  c += 2;\n-\t\t  while ((c[0] >= '0')\n-\t\t\t && (c[0] <= '9'))\n+\t\t  while (ISDIGIT (c[0]))\n \t\t    {\n \t\t      argno = 10 * argno + (c[0] - '0');\n \t\t      ++c;\n@@ -495,8 +492,7 @@ external procedure.\\n\\\n       const char *arg_string;\n       const char *arg_info;\n \n-      if ((c[colon + 1] >= '0')\n-\t  && (c[colon + 1] <= '9'))\n+      if (ISDIGIT (c[colon + 1]))\n \t{\n \t  other_arg = c[colon + 1] - '0';\n \t  arg_string = argument_name_string (imp, other_arg);\n@@ -548,9 +544,7 @@ this intrinsic is valid only when used as the argument to\\n\\\n \tprintf (\", the exact type being wide enough to hold a pointer\\n\\\n on the target system (typically @code{INTEGER(KIND=1)} or @code{INTEGER(KIND=4)}).\\n\\n\");\n #endif\n-      else if ((c[1] == '=')\n-\t       && (c[colon + 1] >= '0')\n-\t       && (c[colon + 1] <= '9'))\n+      else if (c[1] == '=' && ISDIGIT (c[colon + 1]))\n \t{\n \t  assert (other_arg >= 0);\n \n@@ -1011,15 +1005,12 @@ Description:\\n\\\n \n       while (c[0] != '\\0')\n \t{\n-\t  if ((c[0] == '@')\n-\t      && (c[1] >= '0')\n-\t  && (c[1] <= '9'))\n+\t  if (c[0] == '@' && ISDIGIT (c[1]))\n \t    {\n \t      int argno = c[1] - '0';\n \n \t      c += 2;\n-\t      while ((c[0] >= '0')\n-\t\t     && (c[0] <= '9'))\n+\t      while (ISDIGIT (c[0]))\n \t\t{\n \t\t  argno = 10 * argno + (c[0] - '0');\n \t\t  ++c;"}, {"sha": "393706aa3318d41d21b9ea0b7b196d05d040dd39", "filename": "gcc/f/intrin.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Fintrin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Fintrin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintrin.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1628,8 +1628,7 @@ ffeintrin_init_0 ()\n \t}\n       if ((c[colon + 1] != '-')\n \t  && (c[colon + 1] != '*')\n-\t  && ((c[colon + 1] < '0')\n-\t      || (c[colon + 1] > '9')))\n+\t  && (! ISDIGIT (c[colon + 1])))\n \t{\n \t  fprintf (stderr, \"%s: bad COL-spec\\n\",\n \t\t   ffeintrin_imps_[i].name);\n@@ -1683,9 +1682,9 @@ ffeintrin_init_0 ()\n \t    }\n \t  if (c[3] == '[')\n \t    {\n-\t      if (((c[4] < '0') || (c[4] > '9'))\n+\t      if ((! ISDIGIT (c[4]))\n \t\t  || ((c[5] != ']')\n-\t\t      && (++c, (c[4] < '0') || (c[4] > '9')\n+\t\t      && (++c, ! ISDIGIT (c[4])\n \t\t\t  || (c[5] != ']'))))\n \t\t{\n \t\t  fprintf (stderr, \"%s: bad arg-len\\n\",\n@@ -1696,9 +1695,9 @@ ffeintrin_init_0 ()\n \t    }\n \t  if (c[3] == '(')\n \t    {\n-\t      if (((c[4] < '0') || (c[4] > '9'))\n+\t      if ((! ISDIGIT (c[4]))\n \t\t  || ((c[5] != ')')\n-\t\t      && (++c, (c[4] < '0') || (c[4] > '9')\n+\t\t      && (++c, ! ISDIGIT (c[4])\n \t\t\t  || (c[5] != ')'))))\n \t\t{\n \t\t  fprintf (stderr, \"%s: bad arg-rank\\n\","}, {"sha": "afdfd44b88f0ec9930a0d1f3da55b77d23883cfc", "filename": "gcc/f/lex.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -394,16 +394,14 @@ ffelex_backslash_ (int c, ffewhereColumnNumber col)\n       return c;\n \n     case 2:\n-      if ((c >= 'a' && c <= 'f')\n-\t  || (c >= 'A' && c <= 'F')\n-\t  || (c >= '0' && c <= '9'))\n+      if (ISXDIGIT (c))\n \t{\n \t  code *= 16;\n \t  if (c >= 'a' && c <= 'f')\n \t    code += c - 'a' + 10;\n \t  if (c >= 'A' && c <= 'F')\n \t    code += c - 'A' + 10;\n-\t  if (c >= '0' && c <= '9')\n+\t  if (ISDIGIT (c))\n \t    code += c - '0';\n \t  if (code != 0 || count != 0)\n \t    {\n@@ -599,9 +597,7 @@ ffelex_cfebackslash_ (int *use_d, int *d, FILE *finput)\n       while (1)\n \t{\n \t  c = getc (finput);\n-\t  if (!(c >= 'a' && c <= 'f')\n-\t      && !(c >= 'A' && c <= 'F')\n-\t      && !(c >= '0' && c <= '9'))\n+\t  if (! ISXDIGIT (c))\n \t    {\n \t      *use_d = 1;\n \t      *d = c;\n@@ -612,7 +608,7 @@ ffelex_cfebackslash_ (int *use_d, int *d, FILE *finput)\n \t    code += c - 'a' + 10;\n \t  if (c >= 'A' && c <= 'F')\n \t    code += c - 'A' + 10;\n-\t  if (c >= '0' && c <= '9')\n+\t  if (ISDIGIT (c))\n \t    code += c - '0';\n \t  if (code != 0 || count != 0)\n \t    {\n@@ -1079,7 +1075,7 @@ ffelex_hash_ (FILE *finput)\n      it and ignore it; otherwise, ignore the line, with an error\n      if the word isn't `pragma', `ident', `define', or `undef'.  */\n \n-  if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\n+  if (ISALPHA(c))\n     {\n       if (c == 'p')\n \t{"}, {"sha": "04dfbed426d3333c51800efc72e252e5bf1ea7fe", "filename": "gcc/f/lex.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.h?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -171,8 +171,7 @@ ffelexToken ffelex_token_use (ffelexToken t);\n #define ffelex_init_2()\n #define ffelex_init_3()\n #define ffelex_init_4()\n-#define ffelex_is_firstnamechar(c) \\\n-  (ISALPHA ((c)) || ((c) == '_'))\n+#define ffelex_is_firstnamechar(c) ISIDST (c)\n #define ffelex_terminate_0()\n #define ffelex_terminate_1()\n #define ffelex_terminate_2()"}, {"sha": "7bda0328f6c4d0547f4437a4555ac9ab471ea12d", "filename": "gcc/f/target.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ff%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftarget.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1451,7 +1451,7 @@ ffetarget_integerhex (ffetargetIntegerDefault *val, ffelexToken integer)\n \tc = c - 'A' + 10;\n       else if ((c >= 'a') && (c <= 'f'))\n \tc = c - 'a' + 10;\n-      else if ((c >= '0') && (c <= '9'))\n+      else if (ISDIGIT (c))\n \tc -= '0';\n       else\n \t{"}, {"sha": "cf62219fd50eff6652941e182df94fd38a75a242", "filename": "gcc/final.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -3500,12 +3500,12 @@ output_asm_insn (template, operands)\n \t   Letters `acln' are implemented directly.\n \t   Other letters are passed to `output_operand' so that\n \t   the PRINT_OPERAND macro can define them.  */\n-\telse if (ISLOWER (*p) || ISUPPER (*p))\n+\telse if (ISALPHA (*p))\n \t  {\n \t    int letter = *p++;\n \t    c = atoi (p);\n \n-\t    if (! (*p >= '0' && *p <= '9'))\n+\t    if (! ISDIGIT (*p))\n \t      output_operand_lossage (\"operand number missing after %-letter\");\n \t    else if (this_is_asm_operands\n \t\t     && (c < 0 || (unsigned int) c >= insn_noperands))\n@@ -3539,11 +3539,11 @@ output_asm_insn (template, operands)\n \t      oporder[ops++] = c;\n \t    opoutput[c] = 1;\n \n-\t    while ((c = *p) >= '0' && c <= '9')\n+\t    while (ISDIGIT (c = *p))\n \t      p++;\n \t  }\n \t/* % followed by a digit outputs an operand the default way.  */\n-\telse if (*p >= '0' && *p <= '9')\n+\telse if (ISDIGIT (*p))\n \t  {\n \t    c = atoi (p);\n \t    if (this_is_asm_operands\n@@ -3556,7 +3556,7 @@ output_asm_insn (template, operands)\n \t      oporder[ops++] = c;\n \t    opoutput[c] = 1;\n \n-\t    while ((c = *p) >= '0' && c <= '9')\n+\t    while (ISDIGIT (c = *p))\n \t      p++;\n \t  }\n \t/* % followed by punctuation: output something for that\n@@ -3819,7 +3819,7 @@ asm_fprintf VPARAMS ((FILE *file, const char *p, ...))\n       case '%':\n \tc = *p++;\n \tq = &buf[1];\n-\twhile ((c >= '0' && c <= '9') || c == '.')\n+\twhile (ISDIGIT (c) || c == '.')\n \t  {\n \t    *q++ = c;\n \t    c = *p++;"}, {"sha": "5ee5d95cef87abaeb666628cdfd94047764c6e58", "filename": "gcc/fix-header.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -933,13 +933,13 @@ inf_scan_ident (s, c)\n      int c;\n {\n   s->ptr = s->base;\n-  if (ISALPHA (c) || c == '_')\n+  if (ISIDST (c))\n     {\n       for (;;)\n \t{\n \t  SSTRING_PUT (s, c);\n \t  c = INF_GET ();\n-\t  if (c == EOF || !(ISALNUM (c) || c == '_'))\n+\t  if (c == EOF || !(ISIDNUM (c)))\n \t    break;\n \t}\n     }\n@@ -1250,7 +1250,7 @@ main (argc, argv)\n \t  c = INF_GET ();\n \t  if (c == EOF)\n \t    break;\n-\t  if (ISALPHA (c) || c == '_')\n+\t  if (ISIDST (c))\n \t    {\n \t      c = inf_scan_ident (&buf, c);\n \t      (void) INF_UNGET (c);"}, {"sha": "ad54960d13bd8991175f12b27d0579f54737fac4", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -374,7 +374,7 @@ FIX_PROC_HEAD( char_macro_use_fix )\n \tcontinue;\n       if (!ISALPHA (*p))\n \tcontinue;\n-      if (ISALNUM (p[1]) || p[1] == '_')\n+      if (ISIDNUM (p[1]))\n \tcontinue;\n \n       /* Splat all preceding text into the output buffer,\n@@ -447,7 +447,7 @@ FIX_PROC_HEAD( char_macro_def_fix )\n \t    goto found;\n \t  p++;\n \t}\n-      while (ISALPHA (*p) || ISALNUM (*p) || *p == '_');\n+      while (ISIDNUM (*p));\n       /* Hit end of macro name without finding the string.  */\n       continue;\n \n@@ -461,7 +461,7 @@ FIX_PROC_HEAD( char_macro_def_fix )\n \tcontinue;\n       if (!ISALPHA (*p))\n \tcontinue;\n-      if (ISALNUM (p[1]) || p[1] == '_')\n+      if (ISIDNUM (p[1]))\n \tcontinue;\n \n       /* The character at P is the one to look for in the following"}, {"sha": "07184b937ce552f7aeebc9af7d1279108a7f29af", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1127,8 +1127,7 @@ real_hex_to_f (s, mode)\n   shcount = 0;\n   while ((c = *p) != '\\0')\n     {\n-      if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F')\n-\t  || (c >= 'a' && c <= 'f'))\n+      if (ISXDIGIT (c))\n \t{\n \t  k = c & CHARMASK;\n \t  if (k >= 'a' && k <= 'f')"}, {"sha": "96aeef9ed25302c753518bfd9ef46e86afaad900", "filename": "gcc/gen-protos.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fgen-protos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fgen-protos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgen-protos.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -109,7 +109,8 @@ parse_fn_proto (start, end, fn)\n     }\n   name_end = ptr+1;\n \n-  while (ISALNUM ((unsigned char)*ptr) || *ptr == '_') --ptr;\n+  while (ISIDNUM (*ptr))\n+    --ptr;\n   name_start = ptr+1;\n   while (*ptr == ' ' || *ptr == '\\t') ptr--;\n   ptr[1] = 0;"}, {"sha": "101a54b246d3df27c90ced94a896130545944ea1", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -976,7 +976,7 @@ check_attr_test (exp, is_const, lineno)\n \t  if (attr->is_numeric)\n \t    {\n \t      for (p = XSTR (exp, 1); *p; p++)\n-\t\tif (*p < '0' || *p > '9')\n+\t\tif (! ISDIGIT (*p))\n \t\t  fatal (\"Attribute `%s' takes only numeric values\",\n \t\t\t XSTR (exp, 0));\n \t    }\n@@ -1112,7 +1112,7 @@ check_attr_value (exp, attr)\n \t  if (attr && attr->negative_ok && *p == '-')\n \t    p++;\n \t  for (; *p; p++)\n-\t    if (*p > '9' || *p < '0')\n+\t    if (! ISDIGIT (*p))\n \t      {\n \t\tmessage_with_line (attr ? attr->lineno : 0,\n \t\t\t\t   \"non-numeric value for numeric attribute %s\","}, {"sha": "b970c0ab4f71f2919af58728c4e254fa1d4c22eb", "filename": "gcc/genrecog.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1725,17 +1725,17 @@ change_state (oldpos, newpos, afterward, indent)\n \n   /* Hunt for the last [A-Z] in both strings.  */\n   for (old_has_insn = odepth - 1; old_has_insn >= 0; --old_has_insn)\n-    if (oldpos[old_has_insn] >= 'A' && oldpos[old_has_insn] <= 'Z')\n+    if (ISUPPER (oldpos[old_has_insn]))\n       break;\n   for (new_has_insn = ndepth - 1; new_has_insn >= 0; --new_has_insn)\n-    if (newpos[new_has_insn] >= 'A' && newpos[new_has_insn] <= 'Z')\n+    if (ISUPPER (newpos[new_has_insn]))\n       break;\n \n   /* Go down to desired level.  */\n   while (depth < ndepth)\n     {\n       /* It's a different insn from the first one.  */\n-      if (newpos[depth] >= 'A' && newpos[depth] <= 'Z')\n+      if (ISUPPER (newpos[depth]))\n \t{\n \t  /* We can only fail if we're moving down the tree.  */\n \t  if (old_has_insn >= 0 && oldpos[old_has_insn] >= newpos[depth])\n@@ -1755,7 +1755,7 @@ change_state (oldpos, newpos, afterward, indent)\n \t    }\n \t  printf (\"%sx%d = PATTERN (tem);\\n\", indent, depth + 1);\n \t}\n-      else if (newpos[depth] >= 'a' && newpos[depth] <= 'z')\n+      else if (ISLOWER (newpos[depth]))\n \tprintf (\"%sx%d = XVECEXP (x%d, 0, %d);\\n\",\n \t\tindent, depth + 1, depth, newpos[depth] - 'a');\n       else\n@@ -2129,7 +2129,7 @@ write_action (p, test, depth, uncond, success, subroutine_type)\n \t    int match_len = 0, i;\n \n \t    for (i = strlen (p->position) - 1; i >= 0; --i)\n-\t      if (p->position[i] >= 'A' && p->position[i] <= 'Z')\n+\t      if (ISUPPER (p->position[i]))\n \t\t{\n \t\t  match_len = p->position[i] - 'A';\n \t\t  break;"}, {"sha": "a52457196ce0f7eb47b730c0890d4d54a09ef62b", "filename": "gcc/gensupport.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -588,8 +588,7 @@ shift_output_template (new, old, disp)\n \t  c = *old++;\n \t  if (ISDIGIT ((unsigned char) c))\n \t    c += disp;\n-\t  else if (ISUPPER ((unsigned char) c)\n-\t\t   || ISLOWER ((unsigned char) c))\n+\t  else if (ISALPHA (c))\n \t    {\n \t      *new++ = c;\n \t      c = *old++ + disp;"}, {"sha": "33afaae0fa35c81d8e52539601fd143372658eac", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1,3 +1,13 @@\n+2001-10-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gjavah.c (jni_print_char, decode_signature_piece): Use\n+\tsafe-ctype macros and/or fold extra calls into fewer ones.\n+\t* lex.c (java_read_unicode, java_lex): Likewise.\n+\t* lex.h (JAVA_START_CHAR_P, JAVA_PART_CHAR_P, JAVA_ASCII_DIGIT,\n+\tJAVA_ASCII_HEXDIGIT, JAVA_ASCII_LETTER): Likewise.\n+\t* mangle_name.c (append_unicode_mangled_name,\n+\tunicode_mangling_length): Likewise.\n+\n 2001-10-17  Richard Henderson  <rth@redhat.com>\n \n \t* Make-lang.in (java/lang.o): Depend on langhooks.h."}, {"sha": "d4de85b2545d7bca619429765d48b038ff29ed09", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -287,9 +287,7 @@ jni_print_char (stream, ch)\n     fputs (\"_3\", stream);\n   else if (ch == '/')\n     fputs (\"_\", stream);\n-  else if ((ch >= '0' && ch <= '9')\n-\t   || (ch >= 'a' && ch <= 'z')\n-\t   || (ch >= 'A' && ch <= 'Z'))\n+  else if (ISXDIGIT (ch))\n     fputc (ch, stream);\n   else\n     {\n@@ -975,8 +973,7 @@ decode_signature_piece (stream, signature, limit, need_space)\n \n     array_loop:\n       for (signature++; (signature < limit\n-\t\t\t && *signature >= '0'\n-\t\t\t && *signature <= '9'); signature++)\n+\t\t\t && ISDIGIT (*signature)); signature++)\n \t;\n       switch (*signature)\n \t{"}, {"sha": "6422f9500d919bba9577b70dcd01f8c11c356b37", "filename": "gcc/java/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -562,7 +562,7 @@ java_read_unicode (lex, unicode_escape_p)\n \t    {\n \t      if ((c = java_read_char (lex)) == UEOF)\n \t        return UEOF;\n-\t      if (c >= '0' && c <= '9')\n+\t      if (ISDIGIT (c))\n \t\tunicode |= (unicode_t)((c-'0') << shift);\n \t      else if ((c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))\n \t        unicode |= (unicode_t)((10+(c | 0x20)-'a') << shift);\n@@ -1058,7 +1058,7 @@ java_lex (java_lval)\n \t{\n \t  /* We store in a string (in case it turns out to be a FP) and in\n \t     PARTS if we have to process a integer literal.  */\n-\t  int numeric = (RANGE (c, '0', '9') ? c-'0' : 10 +(c|0x20)-'a');\n+\t  int numeric = (ISDIGIT (c) ? c-'0' : 10 +(c|0x20)-'a');\n \t  int count;\n \n \t  /* Remember when we find a valid hexadecimal digit */"}, {"sha": "a4589260cb3ebb0a4f98a18224579e80182d9e7e", "filename": "gcc/java/lex.h", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fjava%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fjava%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.h?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -250,33 +250,25 @@ extern void java_destroy_lexer PARAMS ((java_lexer *));\n #define RANGE(c, l, h)           (((c) >= l && (c) <= h))\n #define JAVA_WHITE_SPACE_P(c) (c == ' ' || c == '\\t' || c == '\\f')\n #define JAVA_START_CHAR_P(c) ((c < 128\t\t\t\t\t      \\\n-\t\t\t       && (RANGE (c, 'A', 'Z')\t\t\t      \\\n-\t\t\t\t   || RANGE (c, 'a', 'z')\t\t      \\\n-\t\t\t\t   || c == '_'\t\t\t\t      \\\n-\t\t\t\t   || c == '$'))\t\t\t      \\\n+\t\t\t       && (ISIDST (c) || c == '$'))\t\t      \\\n                               || (c >= 128 && java_start_char_p (c)))\n #define JAVA_PART_CHAR_P(c) ((c < 128\t\t\t\t\t      \\\n-\t\t\t       && (RANGE (c, 'A', 'Z')\t\t\t      \\\n-\t\t\t\t   || RANGE (c, 'a', 'z')\t\t      \\\n-\t\t\t\t   || RANGE (c, '0', '9')\t\t      \\\n-\t\t\t\t   || c == '_'\t\t\t\t      \\\n+\t\t\t       && (ISIDNUM (c)\t\t\t\t      \\\n \t\t\t\t   || c == '$'\t\t\t\t      \\\n \t\t\t\t   || c == 0x0000\t\t\t      \\\n \t\t\t\t   || RANGE (c, 0x01, 0x08)\t\t      \\\n \t\t\t\t   || RANGE (c, 0x0e, 0x1b)\t\t      \\\n \t\t\t\t   || c == 0x7f))\t\t\t      \\\n                               || (c >= 128 && java_part_char_p (c)))\n-#define JAVA_ASCII_DIGIT(c)    RANGE (c, '0', '9')\n+#define JAVA_ASCII_DIGIT(c)    ISDIGIT (c)\n #define JAVA_ASCII_OCTDIGIT(c) RANGE (c, '0', '7')\n-#define JAVA_ASCII_HEXDIGIT(c) (RANGE (c, '0', '9') || \t\\\n-\t\t\t\tRANGE (c, 'a', 'f') ||\t\\\n-\t\t\t\tRANGE (c, 'A', 'F'))\n+#define JAVA_ASCII_HEXDIGIT(c) ISXDIGIT (c)\n #define JAVA_ASCII_FPCHAR(c)   (RANGE (c, 'd', 'f') || RANGE (c, 'D', 'F') || \\\n \t\t\t\tc == '.' || JAVA_ASCII_DIGIT (c))\n #define JAVA_FP_SUFFIX(c)      (c == 'D' || c == 'd' || c == 'f' || c == 'F')\n #define JAVA_FP_EXP(c)         (c == 'E' || c == 'F')\n #define JAVA_FP_PM(c)          (c == '-' || c == '+')\n-#define JAVA_ASCII_LETTER(c)   (RANGE (c, 'a', 'z') || RANGE (c, 'A', 'Z'))\n+#define JAVA_ASCII_LETTER(c)   ISALPHA (c)\n \n /* Constants  */\n #define JAVA_READ_BUFFER 256"}, {"sha": "4846db67c4cc1d4a9fce46fa1b4a7bfed8fff2df", "filename": "gcc/java/mangle_name.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fjava%2Fmangle_name.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fjava%2Fmangle_name.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle_name.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -87,12 +87,11 @@ append_unicode_mangled_name (name, len)\n     {\n       int ch = UTF8_GET(ptr, limit);\n \n-      if ((ch >= '0' && ch <= '9')\n+      if ((ISALNUM (ch) && ch != 'U')\n #ifndef NO_DOLLAR_IN_LABEL\n \t  || ch == '$'\n #endif\n-\t  || (ch >= 'a' && ch <= 'z')\n-\t  || (ch >= 'A' && ch <= 'Z' && ch != 'U'))\n+\t  )\n \tobstack_1grow (mangle_obstack, ch);\n       /* Everything else needs encoding */\n       else\n@@ -149,12 +148,11 @@ unicode_mangling_length (name, len)\n \n       if (ch < 0)\n \terror (\"internal error - invalid Utf8 name\");\n-      if ((ch >= '0' && ch <= '9')\n+      if ((ISALNUM (ch) && ch != 'U')\n #ifndef NO_DOLLAR_IN_LABEL\n \t  || ch == '$'\n #endif\n-\t  || (ch >= 'a' && ch <= 'z')\n-\t  || (ch >= 'A' && ch <= 'Z' && ch != 'U'))\n+\t  )\n \tnum_chars++;\n       /* Everything else needs encoding */\n       else"}, {"sha": "b1856a5e90bbe22a39f147954a6295ce042dda4f", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -2432,7 +2432,7 @@ requires_inout (p)\n       case '1':  case '2':  case '3':  case '4': case '5':\n       case '6':  case '7':  case '8':  case '9':\n \t/* Skip the balance of the matching constraint.  */\n-\twhile (*p >= '0' && *p <= '9')\n+\twhile (ISDIGIT (*p))\n \t  p++;\n \tbreak;\n "}, {"sha": "9b2234a2e34d984109fe7934298b1e3e79dec050", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -681,7 +681,7 @@ main ()\n #endif\n \n #define IS_ASM_IDENT(ch) \\\n-  (ISALNUM (ch) || (ch) == '_' || (ch) == '.' || (ch) == '$')\n+  (ISIDNUM (ch) || (ch) == '.' || (ch) == '$')\n \n \f\n /* Redefinition of storage classes as an enumeration for better"}, {"sha": "cd67a5bfecaa1b0cd6dbbbe71b8a7f52ef1cef07", "filename": "gcc/protoize.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -716,7 +716,7 @@ static int\n is_id_char (ch)\n      int ch;\n {\n-  return (ISALNUM (ch) || (ch == '_') || (ch == '$'));\n+  return (ISIDNUM (ch) || (ch == '$'));\n }\n \n /* Give a message indicating the proper way to invoke this program and then\n@@ -4700,8 +4700,7 @@ main (argc, argv)\n   {\n     const char *cp;\n \n-    for (cp = varargs_style_indicator;\n-\t ISALNUM ((const unsigned char)*cp) || *cp == '_'; cp++)\n+    for (cp = varargs_style_indicator; ISIDNUM (*cp); cp++)\n       continue;\n     if (*cp != 0)\n       varargs_style_indicator = savestring (varargs_style_indicator,"}, {"sha": "3c9160637e9cd9fecae41a5809fce91a94cb2a21", "filename": "gcc/real.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -5190,7 +5190,7 @@ asctoeg (ss, y, oprec)\n   trail = 0;\n \n  nxtcom:\n-  if (*s >= '0' && *s <= '9')\n+  if (ISDIGIT (*s))\n     k = *s - '0';\n   else if (*s >= 'a' && *s <= 'f')\n     k = 10 + *s - 'a';\n@@ -5205,7 +5205,7 @@ asctoeg (ss, y, oprec)\n       if ((trail == 0) && (decflg != 0))\n \t{\n \t  sp = s;\n-\t  while ((*sp >= '0' && *sp <= '9')\n+\t  while (ISDIGIT (*sp)\n \t\t || (base == 16 && ((*sp >= 'a' && *sp <= 'f')\n \t\t\t\t    || (*sp >= 'A' && *sp <= 'F'))))\n \t    ++sp;\n@@ -5345,7 +5345,7 @@ asctoeg (ss, y, oprec)\n     }\n   if (*s == '+')\n     ++s;\n-  while ((*s >= '0') && (*s <= '9'))\n+  while (ISDIGIT (*s))\n     {\n       exp *= 10;\n       exp += *s++ - '0';"}, {"sha": "1737ae51499d3b252432a086eab9fdbf9309f5f8", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1657,7 +1657,7 @@ asm_operand_ok (op, constraint)\n \t     proper matching constraint, but we can't actually fail\n \t     the check if they didn't.  Indicate that results are\n \t     inconclusive.  */\n-\t  while (*constraint >= '0' && *constraint <= '9')\n+\t  while (ISDIGIT (*constraint))\n \t    constraint++;\n \t  result = -1;\n \t  break;"}, {"sha": "2e8c93fbe98b3beac80d966867531e6d94af1eda", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -2549,7 +2549,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \n \t      commutative = i;\n \t    }\n-\t  else if (c >= '0' && c <= '9')\n+\t  else if (ISDIGIT (c))\n \t    {\n \t      c = strtoul (p - 1, &p, 10);\n "}, {"sha": "892daaefdc74f53bc68efdb1d4d19ed1db270cd4", "filename": "gcc/scan.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fscan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fscan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -63,13 +63,13 @@ scan_ident (fp, s, c)\n      int c;\n {\n   s->ptr = s->base;\n-  if (ISALPHA(c) || c == '_')\n+  if (ISIDST(c))\n     {\n       for (;;)\n \t{\n \t  SSTRING_PUT(s, c);\n \t  c = getc (fp);\n-\t  if (c == EOF || !(ISALNUM(c) || c == '_'))\n+\t  if (c == EOF || ! ISIDNUM(c))\n \t    break;\n \t}\n     }\n@@ -222,7 +222,7 @@ get_token (fp, s)\n       c = INT_TOKEN;\n       goto done;\n     }\n-  if (ISALPHA (c) || c == '_')\n+  if (ISIDST (c))\n     {\n       c = scan_ident (fp, s, c);\n       ungetc (c, fp);"}, {"sha": "dbfbf261575047affc8940aba8602243bf0bc39d", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -578,7 +578,7 @@ print_value (buf, x, verbose)\n       if (REGNO (x) < FIRST_PSEUDO_REGISTER)\n \t{\n \t  int c = reg_names[REGNO (x)][0];\n-\t  if (c >= '0' && c <= '9')\n+\t  if (ISDIGIT (c))\n \t    cur = safe_concat (buf, cur, \"%\");\n \n \t  cur = safe_concat (buf, cur, reg_names[REGNO (x)]);"}, {"sha": "b11651e11b252597b3f1469544423edd9d3051e8", "filename": "gcc/stringpool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -86,7 +86,7 @@ ggc_alloc_string (contents, length)\n \n   if (length == 0)\n     return empty_string;\n-  if (length == 1 && contents[0] >= '0' && contents[0] <= '9')\n+  if (length == 1 && ISDIGIT (contents[0]))\n     return digit_string (contents[0] - '0');\n \n   obstack_grow0 (&string_stack, contents, length);"}, {"sha": "ca77de7ad08e6fe389432db41a16d65da6e9dfd4", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1590,7 +1590,7 @@ read_integral_parameter (p, pname, defval)\n \n   while (*endp)\n     {\n-      if (*endp >= '0' && *endp <= '9')\n+      if (ISDIGIT (*endp))\n \tendp++;\n       else\n \tbreak;\n@@ -4267,7 +4267,7 @@ decode_g_option (arg)\n \t  enum debug_info_type type = da->debug_type;\n \t  const char *p = arg + da_len;\n \n-\t  if (*p && (*p < '0' || *p > '9'))\n+\t  if (*p && ! ISDIGIT (*p))\n \t    continue;\n \n \t  /* A debug flag without a level defaults to level 2."}, {"sha": "167a8db900caffffb0abf7452143bac34007cd30", "filename": "gcc/tradcif.y", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ftradcif.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ftradcif.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcif.y?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -246,9 +246,10 @@ parse_number (olen)\n   while (len > 0) {\n     c = *p++;\n     len--;\n-    if (c >= 'A' && c <= 'Z') c += 'a' - 'A';\n+    if (ISUPPER (c))\n+      c += 'a' - 'A';\n \n-    if (c >= '0' && c <= '9') {\n+    if (ISDIGIT (c)) {\n       n *= base;\n       n += c - '0';\n     } else if (base == 16 && c >= 'a' && c <= 'f') {\n@@ -396,7 +397,7 @@ yylex ()\n     yyerror (\"double quoted strings not allowed in #if expressions\");\n     return ERROR;\n   }\n-  if (c >= '0' && c <= '9') {\n+  if (ISDIGIT (c)) {\n     /* It's a number */\n     for (namelen = 0;\n \t c = tokstart[namelen], is_idchar (c) || c == '.'; \n@@ -507,7 +508,7 @@ parse_escape (string_ptr)\n \tfor (;;)\n \t  {\n \t    c = *(*string_ptr)++;\n-\t    if (c >= '0' && c <= '9')\n+\t    if (ISDIGIT (c))\n \t      i = (i << 4) + c - '0';\n \t    else if (c >= 'a' && c <= 'f')\n \t      i = (i << 4) + c - 'a' + 10;"}, {"sha": "d4122c83fd98716ec30a57d288cb669dbb299768", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -1474,7 +1474,7 @@ do { ip = &instack[indepth];\t\t\\\n \t    ibp += 2;\n \t  }\n \t  c = *ibp++;\n-\t  if (!ISALNUM (c) && c != '.' && c != '_') {\n+\t  if (! ISIDNUM (c) && c != '.') {\n \t    --ibp;\n \t    break;\n \t  }"}, {"sha": "95d5cdcb1bd0f60c7ddee124bc9d03ce13e8e8a4", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -4489,15 +4489,14 @@ clean_symbol_name (p)\n      char *p;\n {\n   for (; *p; p++)\n-    if (! (ISDIGIT(*p)\n+    if (! (ISALNUM (*p)\n #ifndef NO_DOLLAR_IN_LABEL\t/* this for `$'; unlikely, but... -- kr */\n \t    || *p == '$'\n #endif\n #ifndef NO_DOT_IN_LABEL\t\t/* this for `.'; unlikely, but...  */\n \t    || *p == '.'\n #endif\n-\t    || ISUPPER (*p)\n-\t    || ISLOWER (*p)))\n+\t   ))\n       *p = '_';\n }\n   "}, {"sha": "4d6f4b6483672bdc080ab44bc6e632053cd988f2", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=0df6c2c74ea954f8e2a0ccdb85770f2f52d4942c", "patch": "@@ -758,7 +758,7 @@ decode_reg_name (asmspec)\n \n       /* Allow a decimal number as a \"register name\".  */\n       for (i = strlen (asmspec) - 1; i >= 0; i--)\n-\tif (! (asmspec[i] >= '0' && asmspec[i] <= '9'))\n+\tif (! ISDIGIT (asmspec[i]))\n \t  break;\n       if (asmspec[0] != 0 && i < 0)\n \t{"}]}