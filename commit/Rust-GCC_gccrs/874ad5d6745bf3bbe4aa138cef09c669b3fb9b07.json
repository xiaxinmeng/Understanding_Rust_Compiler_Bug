{"sha": "874ad5d6745bf3bbe4aa138cef09c669b3fb9b07", "node_id": "C_kwDOANBUbNoAKDg3NGFkNWQ2NzQ1YmYzYmJlNGFhMTM4Y2VmMDljNjY5YjNmYjliMDc", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-01-27T23:11:03Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-01-31T20:35:59Z"}, "message": "c++: ICE with auto[] and VLA [PR102414]\n\nHere we ICE in unify_array_domain when we're trying to deduce the type\nof an array, as in\n\n  auto(*p)[i] = (int(*)[i])0;\n\nbut unify_array_domain doesn't arbitrarily complex bounds.  Another\ntest is, e.g.,\n\n  auto (*b)[0/0] = &a;\n\nwhere the type of the array is\n\n  <<< Unknown tree: template_type_parm >>>[0:(sizetype) ((ssizetype) (0 / 0) - 1)]\n\nIt seems to me that we need not handle these.\n\n\tPR c++/102414\n\tPR c++/101874\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (create_array_type_for_decl): Use template_placeholder_p.\n\tSorry on a variable-length array of auto.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp23/auto-array3.C: New test.\n\t* g++.dg/cpp23/auto-array4.C: New test.", "tree": {"sha": "d054a1aea8a313a793097818b6401b86faf9badf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d054a1aea8a313a793097818b6401b86faf9badf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/874ad5d6745bf3bbe4aa138cef09c669b3fb9b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874ad5d6745bf3bbe4aa138cef09c669b3fb9b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/874ad5d6745bf3bbe4aa138cef09c669b3fb9b07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874ad5d6745bf3bbe4aa138cef09c669b3fb9b07/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1a8b92f8f78536a00012e2e53a0d12ddbe6836d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a8b92f8f78536a00012e2e53a0d12ddbe6836d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a8b92f8f78536a00012e2e53a0d12ddbe6836d"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "09eed9ceba6970bbae6591ebde086c29e849b5e8", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874ad5d6745bf3bbe4aa138cef09c669b3fb9b07/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874ad5d6745bf3bbe4aa138cef09c669b3fb9b07/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=874ad5d6745bf3bbe4aa138cef09c669b3fb9b07", "patch": "@@ -11099,7 +11099,7 @@ create_array_type_for_decl (tree name, tree type, tree size, location_t loc)\n \n   /* [dcl.type.class.deduct] prohibits forming an array of placeholder\n      for a deduced class type.  */\n-  if (is_auto (type) && CLASS_PLACEHOLDER_TEMPLATE (type))\n+  if (template_placeholder_p (type))\n     {\n       if (name)\n \terror_at (loc, \"%qD declared as array of template placeholder \"\n@@ -11169,8 +11169,16 @@ create_array_type_for_decl (tree name, tree type, tree size, location_t loc)\n \n   /* Figure out the index type for the array.  */\n   if (size)\n-    itype = compute_array_index_type_loc (loc, name, size,\n-\t\t\t\t\t  tf_warning_or_error);\n+    {\n+      itype = compute_array_index_type_loc (loc, name, size,\n+\t\t\t\t\t    tf_warning_or_error);\n+      if (type_uses_auto (type)\n+\t  && variably_modified_type_p (itype, /*fn=*/NULL_TREE))\n+\t{\n+\t  sorry_at (loc, \"variable-length array of %<auto%>\");\n+\t  return error_mark_node;\n+\t}\n+    }\n \n   return build_cplus_array_type (type, itype);\n }"}, {"sha": "fdf25470fc2ce424887001bbdf065df6fbc1ffa3", "filename": "gcc/testsuite/g++.dg/cpp23/auto-array3.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874ad5d6745bf3bbe4aa138cef09c669b3fb9b07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-array3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874ad5d6745bf3bbe4aa138cef09c669b3fb9b07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-array3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-array3.C?ref=874ad5d6745bf3bbe4aa138cef09c669b3fb9b07", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/102414\n+// PR c++/101874\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+constexpr int sz () { return 3; }\n+\n+void f ()\n+{\n+  int a[3];\n+  const int N = 3;\n+  auto (*a2)[N] = &a;\n+  constexpr int M = 3;\n+  auto (*a3)[M] = &a;\n+  auto (*a4)[sz()] = &a;\n+}"}, {"sha": "4385c4a6bf907cba8aa8adda7a5839ec6b886eaf", "filename": "gcc/testsuite/g++.dg/cpp23/auto-array4.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874ad5d6745bf3bbe4aa138cef09c669b3fb9b07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-array4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874ad5d6745bf3bbe4aa138cef09c669b3fb9b07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-array4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-array4.C?ref=874ad5d6745bf3bbe4aa138cef09c669b3fb9b07", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/102414\n+// PR c++/101874\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+void\n+f (int i)\n+{\n+  auto x[i] = { 0 }; // { dg-message \"variable-length array of .auto.\" }\n+  auto(*p)[i] = (int(*)[i])0; // { dg-message \"variable-length array of .auto.\" }\n+  int a[3];\n+  auto (*a1)[0/0] = &a; // { dg-message \"variable-length array of .auto.\" }\n+// { dg-warning \"division by zero\" \"\" { target *-*-* } .-1 }\n+}"}]}