{"sha": "2bb71424636fba7944b36b1689e9df22a53f1a3f", "node_id": "C_kwDOANBUbNoAKDJiYjcxNDI0NjM2ZmJhNzk0NGIzNmIxNjg5ZTlkZjIyYTUzZjFhM2Y", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-17T08:58:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-17T08:58:08Z"}, "message": "testsuite: Fix up forwprop-39.c testcase [PR109145]\n\nAs written in the PR, newlib headers aren't C11 compliant in that they\ndon't define CMPLXF macro, and glibc before 2.16 doesn't define that\neither.  I think it is easier to use __builtin_complex directly, over\nanother patch which keeps including complex.h but defines CMPLXF if it\nisn't defined, we want to test how forwprop behaves rather than what\ncomplex.h defines or doesn't define.\n\n2023-03-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR testsuite/109145\n\t* gcc.dg/tree-ssa/forwprop-39.c: Remove -std=c11 from dg-options.\n\tDon't include complex.h.\n\t(foo): Use __builtin_complex rather than CMPLXF.", "tree": {"sha": "337c8947a92e4ac48916788df04685317c642422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/337c8947a92e4ac48916788df04685317c642422"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bb71424636fba7944b36b1689e9df22a53f1a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb71424636fba7944b36b1689e9df22a53f1a3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bb71424636fba7944b36b1689e9df22a53f1a3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb71424636fba7944b36b1689e9df22a53f1a3f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "232f409452c4ec37da8547a3abb3695cd82e3c24", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-39.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb71424636fba7944b36b1689e9df22a53f1a3f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb71424636fba7944b36b1689e9df22a53f1a3f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-39.c?ref=2bb71424636fba7944b36b1689e9df22a53f1a3f", "patch": "@@ -1,14 +1,12 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=c11 -O2 -fdump-tree-forwprop1 -fdump-tree-optimized\" } */\n-\n-#include <complex.h>\n+/* { dg-options \"-O2 -fdump-tree-forwprop1 -fdump-tree-optimized\" } */\n \n extern void push1(void *p, float _Complex x);\n void foo (void *q, float _Complex *x)\n {\n   float r = __real *x;\n   float i = __imag *x;\n-  push1 (q, CMPLXF (r, i));\n+  push1 (q, __builtin_complex (r, i));\n }\n \n /* { dg-final { scan-tree-dump-not \"COMPLEX_EXPR\" \"forwprop1\" } } */"}]}