{"sha": "62c1b965b52837687f406f1923069e3ba584b77c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJjMWI5NjViNTI4Mzc2ODdmNDA2ZjE5MjMwNjllM2JhNTg0Yjc3Yw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-10-13T12:59:19Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-10-13T12:59:19Z"}, "message": "[ARM] Remove redundant model field from FPU descriptions\n\n\t* arm.h (TARGET_VFP): Unconditionally define to 1.\n\t(arm_fpu_desc): Remove 'model' field.\n\t(TARGET_FPU_MODEL): Delete.\n\t* arm.c (all_fpus): Don't initialize the model field.\n\t(arm_can_inline_p): Don't check the FPU model.\n\t* arm-fpus.def: Remove redundant model field from all FPU\n\tdescriptions.\n\nFrom-SVN: r241116", "tree": {"sha": "8baed8a89130f9058cd0b61d70362bcec4209d16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8baed8a89130f9058cd0b61d70362bcec4209d16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62c1b965b52837687f406f1923069e3ba584b77c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c1b965b52837687f406f1923069e3ba584b77c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c1b965b52837687f406f1923069e3ba584b77c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c1b965b52837687f406f1923069e3ba584b77c/comments", "author": null, "committer": null, "parents": [{"sha": "8eb8461dc13600aafd77b89928196366a4747786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb8461dc13600aafd77b89928196366a4747786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb8461dc13600aafd77b89928196366a4747786"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "777cb3440f2c7ef2dbdbc95c7060bdd2b759c3c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c1b965b52837687f406f1923069e3ba584b77c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c1b965b52837687f406f1923069e3ba584b77c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62c1b965b52837687f406f1923069e3ba584b77c", "patch": "@@ -1,3 +1,13 @@\n+2016-10-13  Richard Earsnhaw  <rearnsha@arm.com>\n+\n+\t* arm.h (TARGET_VFP): Unconditionally define to 1.\n+\t(arm_fpu_desc): Remove 'model' field.\n+\t(TARGET_FPU_MODEL): Delete.\n+\t* arm.c (all_fpus): Don't initialize the model field.\n+\t(arm_can_inline_p): Don't check the FPU model.\n+\t* arm-fpus.def: Remove redundant model field from all FPU\n+\tdescriptions.\n+\n 2016-10-13  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/77826"}, {"sha": "e0c43651d9392b718ce4fc5e2bbcf5fc1e097123", "filename": "gcc/config/arm/arm-fpus.def", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c1b965b52837687f406f1923069e3ba584b77c/gcc%2Fconfig%2Farm%2Farm-fpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c1b965b52837687f406f1923069e3ba584b77c/gcc%2Fconfig%2Farm%2Farm-fpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fpus.def?ref=62c1b965b52837687f406f1923069e3ba584b77c", "patch": "@@ -19,30 +19,29 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      ARM_FPU(NAME, MODEL, REV, VFP_REGS, FEATURES)\n+      ARM_FPU(NAME, REV, VFP_REGS, FEATURES)\n \n    The arguments are the fields of struct arm_fpu_desc.\n \n    genopt.sh assumes no whitespace up to the first \",\" in each entry.  */\n \n-ARM_FPU(\"vfp\",\t\tARM_FP_MODEL_VFP, 2, VFP_REG_D16, FPU_FL_NONE)\n-ARM_FPU(\"vfpv3\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, FPU_FL_NONE)\n-ARM_FPU(\"vfpv3-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, FPU_FL_FP16)\n-ARM_FPU(\"vfpv3-d16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, FPU_FL_NONE)\n-ARM_FPU(\"vfpv3-d16-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, FPU_FL_FP16)\n-ARM_FPU(\"vfpv3xd\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, FPU_FL_NONE)\n-ARM_FPU(\"vfpv3xd-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, FPU_FL_FP16)\n-ARM_FPU(\"neon\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, FPU_FL_NEON)\n-ARM_FPU(\"neon-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, FPU_FL_NEON | FPU_FL_FP16)\n-ARM_FPU(\"vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, FPU_FL_FP16)\n-ARM_FPU(\"vfpv4-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D16, FPU_FL_FP16)\n-ARM_FPU(\"fpv4-sp-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_SINGLE, FPU_FL_FP16)\n-ARM_FPU(\"fpv5-sp-d16\",\tARM_FP_MODEL_VFP, 5, VFP_REG_SINGLE, FPU_FL_FP16)\n-ARM_FPU(\"fpv5-d16\",\tARM_FP_MODEL_VFP, 5, VFP_REG_D16, FPU_FL_FP16)\n-ARM_FPU(\"neon-vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, FPU_FL_NEON | FPU_FL_FP16)\n-ARM_FPU(\"fp-armv8\",\tARM_FP_MODEL_VFP, 8, VFP_REG_D32, FPU_FL_FP16)\n-ARM_FPU(\"neon-fp-armv8\",ARM_FP_MODEL_VFP, 8, VFP_REG_D32, FPU_FL_NEON | FPU_FL_FP16)\n-ARM_FPU(\"crypto-neon-fp-armv8\",\n-\t\t\tARM_FP_MODEL_VFP, 8, VFP_REG_D32, FPU_FL_NEON | FPU_FL_FP16 | FPU_FL_CRYPTO)\n+ARM_FPU(\"vfp\",\t\t2, VFP_REG_D16, FPU_FL_NONE)\n+ARM_FPU(\"vfpv3\",\t3, VFP_REG_D32, FPU_FL_NONE)\n+ARM_FPU(\"vfpv3-fp16\",\t3, VFP_REG_D32, FPU_FL_FP16)\n+ARM_FPU(\"vfpv3-d16\",\t3, VFP_REG_D16, FPU_FL_NONE)\n+ARM_FPU(\"vfpv3-d16-fp16\", 3, VFP_REG_D16, FPU_FL_FP16)\n+ARM_FPU(\"vfpv3xd\",\t3, VFP_REG_SINGLE, FPU_FL_NONE)\n+ARM_FPU(\"vfpv3xd-fp16\",\t3, VFP_REG_SINGLE, FPU_FL_FP16)\n+ARM_FPU(\"neon\",\t\t3, VFP_REG_D32, FPU_FL_NEON)\n+ARM_FPU(\"neon-fp16\",\t3, VFP_REG_D32, FPU_FL_NEON | FPU_FL_FP16)\n+ARM_FPU(\"vfpv4\",\t4, VFP_REG_D32, FPU_FL_FP16)\n+ARM_FPU(\"vfpv4-d16\",\t4, VFP_REG_D16, FPU_FL_FP16)\n+ARM_FPU(\"fpv4-sp-d16\",\t4, VFP_REG_SINGLE, FPU_FL_FP16)\n+ARM_FPU(\"fpv5-sp-d16\",\t5, VFP_REG_SINGLE, FPU_FL_FP16)\n+ARM_FPU(\"fpv5-d16\",\t5, VFP_REG_D16, FPU_FL_FP16)\n+ARM_FPU(\"neon-vfpv4\",\t4, VFP_REG_D32, FPU_FL_NEON | FPU_FL_FP16)\n+ARM_FPU(\"fp-armv8\",\t8, VFP_REG_D32, FPU_FL_FP16)\n+ARM_FPU(\"neon-fp-armv8\", 8, VFP_REG_D32, FPU_FL_NEON | FPU_FL_FP16)\n+ARM_FPU(\"crypto-neon-fp-armv8\", 8, VFP_REG_D32, FPU_FL_NEON | FPU_FL_FP16 | FPU_FL_CRYPTO)\n /* Compatibility aliases.  */\n-ARM_FPU(\"vfp3\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, FPU_FL_NONE)\n+ARM_FPU(\"vfp3\",\t\t3, VFP_REG_D32, FPU_FL_NONE)"}, {"sha": "49f4e2b8c9412cb42793e6da8fff741b8075905d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c1b965b52837687f406f1923069e3ba584b77c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c1b965b52837687f406f1923069e3ba584b77c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=62c1b965b52837687f406f1923069e3ba584b77c", "patch": "@@ -2334,8 +2334,8 @@ char arm_arch_name[] = \"__ARM_ARCH_PROFILE__\";\n \n const struct arm_fpu_desc all_fpus[] =\n {\n-#define ARM_FPU(NAME, MODEL, REV, VFP_REGS, FEATURES) \\\n-  { NAME, MODEL, REV, VFP_REGS, FEATURES },\n+#define ARM_FPU(NAME, REV, VFP_REGS, FEATURES) \\\n+  { NAME, REV, VFP_REGS, FEATURES },\n #include \"arm-fpus.def\"\n #undef ARM_FPU\n };\n@@ -30226,9 +30226,8 @@ arm_can_inline_p (tree caller, tree callee)\n   if ((caller_fpu->features & callee_fpu->features) != callee_fpu->features)\n     return false;\n \n-  /* Need same model and regs.  */\n-  if (callee_fpu->model != caller_fpu->model\n-      || callee_fpu->regs != callee_fpu->regs)\n+  /* Need same FPU regs.  */\n+  if (callee_fpu->regs != callee_fpu->regs)\n     return false;\n \n   /* OK to inline between different modes."}, {"sha": "7c4ea85c405baa16b64eaac608863fbbb7c0b5a3", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c1b965b52837687f406f1923069e3ba584b77c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c1b965b52837687f406f1923069e3ba584b77c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=62c1b965b52837687f406f1923069e3ba584b77c", "patch": "@@ -134,7 +134,8 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_HARD_FLOAT\t\t(arm_float_abi != ARM_FLOAT_ABI_SOFT)\n /* Use hardware floating point calling convention.  */\n #define TARGET_HARD_FLOAT_ABI\t\t(arm_float_abi == ARM_FLOAT_ABI_HARD)\n-#define TARGET_VFP\t\t        (TARGET_FPU_MODEL == ARM_FP_MODEL_VFP)\n+/* We only support the VFP model these days.  */\n+#define TARGET_VFP\t\t        (1)\n #define TARGET_IWMMXT\t\t\t(arm_arch_iwmmxt)\n #define TARGET_IWMMXT2\t\t\t(arm_arch_iwmmxt2)\n #define TARGET_REALLY_IWMMXT\t\t(TARGET_IWMMXT && TARGET_32BIT)\n@@ -363,7 +364,6 @@ enum vfp_reg_type\n extern const struct arm_fpu_desc\n {\n   const char *name;\n-  enum arm_fp_model model;\n   int rev;\n   enum vfp_reg_type regs;\n   arm_fpu_feature_set features;\n@@ -372,7 +372,6 @@ extern const struct arm_fpu_desc\n /* Accessors.  */\n \n #define TARGET_FPU_NAME     (all_fpus[arm_fpu_index].name)\n-#define TARGET_FPU_MODEL    (all_fpus[arm_fpu_index].model)\n #define TARGET_FPU_REV      (all_fpus[arm_fpu_index].rev)\n #define TARGET_FPU_REGS     (all_fpus[arm_fpu_index].regs)\n #define TARGET_FPU_FEATURES (all_fpus[arm_fpu_index].features)"}]}