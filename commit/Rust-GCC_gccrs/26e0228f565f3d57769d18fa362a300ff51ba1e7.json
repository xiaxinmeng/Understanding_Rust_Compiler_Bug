{"sha": "26e0228f565f3d57769d18fa362a300ff51ba1e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlMDIyOGY1NjVmM2Q1Nzc2OWQxOGZhMzYyYTMwMGZmNTFiYTFlNw==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2011-04-11T20:37:57Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2011-04-11T20:37:57Z"}, "message": "sanity check ic target\n\nFrom-SVN: r172276", "tree": {"sha": "8fba1831628ef1da28cb32bae8e55d3e3fe30a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fba1831628ef1da28cb32bae8e55d3e3fe30a06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26e0228f565f3d57769d18fa362a300ff51ba1e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e0228f565f3d57769d18fa362a300ff51ba1e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e0228f565f3d57769d18fa362a300ff51ba1e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e0228f565f3d57769d18fa362a300ff51ba1e7/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6075765d8c6993df315a8792440673d95741a5e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6075765d8c6993df315a8792440673d95741a5e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6075765d8c6993df315a8792440673d95741a5e8"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "1c0ba68075a3e09957555681d039d5a77ec825a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0228f565f3d57769d18fa362a300ff51ba1e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0228f565f3d57769d18fa362a300ff51ba1e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26e0228f565f3d57769d18fa362a300ff51ba1e7", "patch": "@@ -1,3 +1,10 @@\n+2011-04-11  Xinliang David Li  <davidxl@google.com>\n+\n+\t* value-profile.c (check_ic_target): New function.\n+\t(gimple_ic_transform): Sanity check indirect call target.\n+\t* gimple-low.c (gimple_check_call_args): Interface change.\n+\t(gimple_check_call_matching_types): New function.\n+\t* tree-inline.c (tree_can_inline_p): Call new function.\n \n 2011-04-11  Basile Starynkevitch  <basile@starynkevitch.net>\n "}, {"sha": "01aeb4940d38d103dabb7723540037815f6b962b", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0228f565f3d57769d18fa362a300ff51ba1e7/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0228f565f3d57769d18fa362a300ff51ba1e7/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=26e0228f565f3d57769d18fa362a300ff51ba1e7", "patch": "@@ -208,20 +208,20 @@ struct gimple_opt_pass pass_lower_cf =\n };\n \n \n+\n /* Verify if the type of the argument matches that of the function\n    declaration.  If we cannot verify this or there is a mismatch,\n    return false.  */\n \n-bool\n-gimple_check_call_args (gimple stmt)\n+static bool\n+gimple_check_call_args (gimple stmt, tree fndecl)\n {\n-  tree fndecl, parms, p;\n+  tree parms, p;\n   unsigned int i, nargs;\n \n   nargs = gimple_call_num_args (stmt);\n \n   /* Get argument types for verification.  */\n-  fndecl = gimple_call_fndecl (stmt);\n   if (fndecl)\n     parms = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n   else\n@@ -272,6 +272,25 @@ gimple_check_call_args (gimple stmt)\n   return true;\n }\n \n+/* Verify if the type of the argument and lhs of CALL_STMT matches\n+   that of the function declaration CALLEE.\n+   If we cannot verify this or there is a mismatch, return false.  */\n+\n+bool\n+gimple_check_call_matching_types (gimple call_stmt, tree callee)\n+{\n+  tree lhs;\n+\n+  if ((DECL_RESULT (callee)\n+       && !DECL_BY_REFERENCE (DECL_RESULT (callee))\n+       && (lhs = gimple_call_lhs (call_stmt)) != NULL_TREE\n+       && !useless_type_conversion_p (TREE_TYPE (DECL_RESULT (callee)),\n+                                      TREE_TYPE (lhs))\n+       && !fold_convertible_p (TREE_TYPE (DECL_RESULT (callee)), lhs))\n+      || !gimple_check_call_args (call_stmt, callee))\n+    return false;\n+  return true;\n+}\n \n /* Lower sequence SEQ.  Unlike gimplification the statements are not relowered\n    when they are changed -- if this has to be done, the lowering routine must"}, {"sha": "012c880ddab411ce66b2f1a1b2957bab409fb076", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0228f565f3d57769d18fa362a300ff51ba1e7/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0228f565f3d57769d18fa362a300ff51ba1e7/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=26e0228f565f3d57769d18fa362a300ff51ba1e7", "patch": "@@ -515,7 +515,7 @@ extern void record_vars_into (tree, tree);\n extern void record_vars (tree);\n extern bool gimple_seq_may_fallthru (gimple_seq);\n extern bool gimple_stmt_may_fallthru (gimple);\n-extern bool gimple_check_call_args (gimple);\n+extern bool gimple_check_call_matching_types (gimple, tree);\n \n \n /* In tree-ssa.c  */"}, {"sha": "9f86204ecff2dc7683309f27c045d9263ecba503", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0228f565f3d57769d18fa362a300ff51ba1e7/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0228f565f3d57769d18fa362a300ff51ba1e7/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=26e0228f565f3d57769d18fa362a300ff51ba1e7", "patch": "@@ -5326,7 +5326,7 @@ tree_can_inline_p (struct cgraph_edge *e)\n \treturn false;\n     }\n #endif\n-  tree caller, callee, lhs;\n+  tree caller, callee;\n \n   caller = e->caller->decl;\n   callee = e->callee->decl;\n@@ -5353,13 +5353,7 @@ tree_can_inline_p (struct cgraph_edge *e)\n   /* Do not inline calls where we cannot triviall work around mismatches\n      in argument or return types.  */\n   if (e->call_stmt\n-      && ((DECL_RESULT (callee)\n-\t   && !DECL_BY_REFERENCE (DECL_RESULT (callee))\n-\t   && (lhs = gimple_call_lhs (e->call_stmt)) != NULL_TREE\n-\t   && !useless_type_conversion_p (TREE_TYPE (DECL_RESULT (callee)),\n-\t\t\t\t\t  TREE_TYPE (lhs))\n-\t   && !fold_convertible_p (TREE_TYPE (DECL_RESULT (callee)), lhs))\n-\t  || !gimple_check_call_args (e->call_stmt)))\n+      && !gimple_check_call_matching_types (e->call_stmt, callee))\n     {\n       e->inline_failed = CIF_MISMATCHED_ARGUMENTS;\n       if (e->call_stmt)"}, {"sha": "b2a082de7e2e256944f6b2632db207e04e3d6586", "filename": "gcc/value-prof.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e0228f565f3d57769d18fa362a300ff51ba1e7/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e0228f565f3d57769d18fa362a300ff51ba1e7/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=26e0228f565f3d57769d18fa362a300ff51ba1e7", "patch": "@@ -1090,6 +1090,25 @@ find_func_by_pid (int\tpid)\n   return pid_map [pid];\n }\n \n+/* Perform sanity check on the indirect call target. Due to race conditions,\n+   false function target may be attributed to an indirect call site. If the\n+   call expression type mismatches with the target function's type, expand_call\n+   may ICE. Here we only do very minimal sanity check just to make compiler happy.\n+   Returns true if TARGET is considered ok for call CALL_STMT.  */\n+\n+static bool\n+check_ic_target (gimple call_stmt, struct cgraph_node *target)\n+{\n+   location_t locus;\n+   if (gimple_check_call_matching_types (call_stmt, target->decl))\n+     return true;\n+\n+   locus =  gimple_location (call_stmt);\n+   inform (locus, \"Skipping target %s with mismatching types for icall \",\n+           cgraph_node_name (target));\n+   return false;\n+}\n+\n /* Do transformation\n \n   if (actual_callee_address == address_of_most_common_function/method)\n@@ -1268,6 +1287,9 @@ gimple_ic_transform (gimple stmt)\n   if (direct_call == NULL)\n     return false;\n \n+  if (!check_ic_target (stmt, direct_call))\n+    return false;\n+\n   modify = gimple_ic (stmt, direct_call, prob, count, all);\n \n   if (dump_file)\n@@ -1748,4 +1770,3 @@ gimple_find_values_to_profile (histogram_values *values)\n         }\n     }\n }\n-"}]}