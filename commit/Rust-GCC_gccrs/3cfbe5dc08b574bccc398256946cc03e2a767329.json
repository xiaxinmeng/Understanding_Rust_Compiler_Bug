{"sha": "3cfbe5dc08b574bccc398256946cc03e2a767329", "node_id": "C_kwDOANBUbNoAKDNjZmJlNWRjMDhiNTc0YmNjYzM5ODI1Njk0NmNjMDNlMmE3NjczMjk", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-08-09T18:08:25Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-10-19T15:36:59Z"}, "message": "rs6000: Guard some x86 intrinsics implementations\n\nSome compatibility implementations of x86 intrinsics include\nPower intrinsics which require POWER8.  Guard them.\n\nemmintrin.h:\n- _mm_cmpord_pd: Remove code which was ostensibly for pre-POWER8,\n  but which indeed depended on POWER8 (vec_cmpgt(v2du)/vcmpgtud).\n  The \"POWER8\" version works fine on pre-POWER8.\n- _mm_mul_epu32: vec_mule(v4su) uses vmuleuw.\npmmintrin.h:\n- _mm_movehdup_ps: vec_mergeo(v4su) uses vmrgow.\n- _mm_moveldup_ps: vec_mergee(v4su) uses vmrgew.\nsmmintrin.h:\n- _mm_cmpeq_epi64: vec_cmpeq(v2di) uses vcmpequd.\n- _mm_mul_epi32: vec_mule(v4si) uses vmuluwm.\n- _mm_cmpgt_epi64: vec_cmpgt(v2di) uses vcmpgtsd.\ntmmintrin.h:\n- _mm_sign_epi8: vec_neg(v4si) uses vsububm.\n- _mm_sign_epi16: vec_neg(v4si) uses vsubuhm.\n- _mm_sign_epi32: vec_neg(v4si) uses vsubuwm.\n  Note that the above three could actually be supported pre-POWER8,\n  but current GCC does not support them before POWER8.\n- _mm_sign_pi8: depends on _mm_sign_epi8.\n- _mm_sign_pi16: depends on _mm_sign_epi16.\n- _mm_sign_pi32: depends on _mm_sign_epi32.\n\nsse4_2-pcmpgtq.c:\n- _mm_cmpgt_epi64: vec_cmpeq(v2di) uses vcmpequd.\n\n2021-10-19  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc\n\tPR target/101893\n\tPR target/102719\n\t* config/rs6000/emmintrin.h: Guard POWER8 intrinsics.\n\t* config/rs6000/pmmintrin.h: Same.\n\t* config/rs6000/smmintrin.h: Same.\n\t* config/rs6000/tmmintrin.h: Same.\n\ngcc/testsuite\n\t* gcc.target/powerpc/sse4_2-pcmpgtq.c: Tighten dg constraints\n\tto minimally Power8.", "tree": {"sha": "25a448674949dd45ac06840a415b6f9a404727ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25a448674949dd45ac06840a415b6f9a404727ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cfbe5dc08b574bccc398256946cc03e2a767329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfbe5dc08b574bccc398256946cc03e2a767329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cfbe5dc08b574bccc398256946cc03e2a767329", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfbe5dc08b574bccc398256946cc03e2a767329/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8add4b0e086e671a7e08503408356ad6beee7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce8add4b0e086e671a7e08503408356ad6beee7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce8add4b0e086e671a7e08503408356ad6beee7f"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "32ad72b4cc35329696541e8331cc6accda99c8d0", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfbe5dc08b574bccc398256946cc03e2a767329/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfbe5dc08b574bccc398256946cc03e2a767329/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=3cfbe5dc08b574bccc398256946cc03e2a767329", "patch": "@@ -430,20 +430,10 @@ _mm_cmpnge_pd (__m128d __A, __m128d __B)\n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpord_pd (__m128d __A, __m128d __B)\n {\n-#if _ARCH_PWR8\n   __v2du c, d;\n   /* Compare against self will return false (0's) if NAN.  */\n   c = (__v2du)vec_cmpeq (__A, __A);\n   d = (__v2du)vec_cmpeq (__B, __B);\n-#else\n-  __v2du a, b;\n-  __v2du c, d;\n-  const __v2du double_exp_mask  = {0x7ff0000000000000, 0x7ff0000000000000};\n-  a = (__v2du)vec_abs ((__v2df)__A);\n-  b = (__v2du)vec_abs ((__v2df)__B);\n-  c = (__v2du)vec_cmpgt (double_exp_mask, a);\n-  d = (__v2du)vec_cmpgt (double_exp_mask, b);\n-#endif\n   /* A != NAN and B != NAN.  */\n   return ((__m128d)vec_and(c, d));\n }\n@@ -1472,6 +1462,7 @@ _mm_mul_su32 (__m64 __A, __m64 __B)\n   return ((__m64)a * (__m64)b);\n }\n \n+#ifdef _ARCH_PWR8\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mul_epu32 (__m128i __A, __m128i __B)\n {\n@@ -1498,6 +1489,7 @@ _mm_mul_epu32 (__m128i __A, __m128i __B)\n   return (__m128i) vec_mule ((__v4su)__A, (__v4su)__B);\n #endif\n }\n+#endif\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_slli_epi16 (__m128i __A, int __B)"}, {"sha": "83dff1d8566639642a3666876de550ae23cdad1a", "filename": "gcc/config/rs6000/pmmintrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfbe5dc08b574bccc398256946cc03e2a767329/gcc%2Fconfig%2Frs6000%2Fpmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfbe5dc08b574bccc398256946cc03e2a767329/gcc%2Fconfig%2Frs6000%2Fpmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpmmintrin.h?ref=3cfbe5dc08b574bccc398256946cc03e2a767329", "patch": "@@ -123,17 +123,21 @@ _mm_hsub_pd (__m128d __X, __m128d __Y)\n \t\t\t    vec_mergel ((__v2df) __X, (__v2df)__Y));\n }\n \n+#ifdef _ARCH_PWR8\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movehdup_ps (__m128 __X)\n {\n   return (__m128)vec_mergeo ((__v4su)__X, (__v4su)__X);\n }\n+#endif\n \n+#ifdef _ARCH_PWR8\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_moveldup_ps (__m128 __X)\n {\n   return (__m128)vec_mergee ((__v4su)__X, (__v4su)__X);\n }\n+#endif\n \n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_loaddup_pd (double const *__P)"}, {"sha": "b732fbca7b095c50d21e02fa7890896861ce51e5", "filename": "gcc/config/rs6000/smmintrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfbe5dc08b574bccc398256946cc03e2a767329/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfbe5dc08b574bccc398256946cc03e2a767329/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=3cfbe5dc08b574bccc398256946cc03e2a767329", "patch": "@@ -96,6 +96,7 @@ _mm_extract_ps (__m128 __X, const int __N)\n   return ((__v4si)__X)[__N & 3];\n }\n \n+#ifdef _ARCH_PWR8\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_blend_epi16 (__m128i __A, __m128i __B, const int __imm8)\n {\n@@ -107,6 +108,7 @@ _mm_blend_epi16 (__m128i __A, __m128i __B, const int __imm8)\n   #endif\n   return (__m128i) vec_sel ((__v8hu) __A, (__v8hu) __B, __shortmask);\n }\n+#endif\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_blendv_epi8 (__m128i __A, __m128i __B, __m128i __mask)\n@@ -167,6 +169,7 @@ _mm_blend_pd (__m128d __A, __m128d __B, const int __imm8)\n   return (__m128d) __r;\n }\n \n+#ifdef _ARCH_PWR8\n __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_blendv_pd (__m128d __A, __m128d __B, __m128d __mask)\n@@ -175,6 +178,7 @@ _mm_blendv_pd (__m128d __A, __m128d __B, __m128d __mask)\n   const __vector __bool long long __boolmask = vec_cmplt ((__v2di) __mask, __zero);\n   return (__m128d) vec_sel ((__v2du) __A, (__v2du) __B, (__v2du) __boolmask);\n }\n+#endif\n \n __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "a67d88c8079a0279d48d54a984b2503d5f7669b2", "filename": "gcc/config/rs6000/tmmintrin.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfbe5dc08b574bccc398256946cc03e2a767329/gcc%2Fconfig%2Frs6000%2Ftmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfbe5dc08b574bccc398256946cc03e2a767329/gcc%2Fconfig%2Frs6000%2Ftmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ftmmintrin.h?ref=3cfbe5dc08b574bccc398256946cc03e2a767329", "patch": "@@ -350,6 +350,7 @@ _mm_shuffle_pi8 (__m64 __A, __m64 __B)\n   return (__m64) ((__v2du) (__C))[0];\n }\n \n+#ifdef _ARCH_PWR8\n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sign_epi8 (__m128i __A, __m128i __B)\n@@ -361,7 +362,9 @@ _mm_sign_epi8 (__m128i __A, __m128i __B)\n   __v16qi __conv = vec_add (__selectneg, __selectpos);\n   return (__m128i) vec_mul ((__v16qi) __A, (__v16qi) __conv);\n }\n+#endif\n \n+#ifdef _ARCH_PWR8\n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sign_epi16 (__m128i __A, __m128i __B)\n@@ -373,7 +376,9 @@ _mm_sign_epi16 (__m128i __A, __m128i __B)\n   __v8hi __conv = vec_add (__selectneg, __selectpos);\n   return (__m128i) vec_mul ((__v8hi) __A, (__v8hi) __conv);\n }\n+#endif\n \n+#ifdef _ARCH_PWR8\n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sign_epi32 (__m128i __A, __m128i __B)\n@@ -385,7 +390,9 @@ _mm_sign_epi32 (__m128i __A, __m128i __B)\n   __v4si __conv = vec_add (__selectneg, __selectpos);\n   return (__m128i) vec_mul ((__v4si) __A, (__v4si) __conv);\n }\n+#endif\n \n+#ifdef _ARCH_PWR8\n extern __inline __m64\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sign_pi8 (__m64 __A, __m64 __B)\n@@ -396,7 +403,9 @@ _mm_sign_pi8 (__m64 __A, __m64 __B)\n   __C = (__v16qi) _mm_sign_epi8 ((__m128i) __C, (__m128i) __D);\n   return (__m64) ((__v2du) (__C))[0];\n }\n+#endif\n \n+#ifdef _ARCH_PWR8\n extern __inline __m64\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sign_pi16 (__m64 __A, __m64 __B)\n@@ -407,7 +416,9 @@ _mm_sign_pi16 (__m64 __A, __m64 __B)\n   __C = (__v8hi) _mm_sign_epi16 ((__m128i) __C, (__m128i) __D);\n   return (__m64) ((__v2du) (__C))[0];\n }\n+#endif\n \n+#ifdef _ARCH_PWR8\n extern __inline __m64\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sign_pi32 (__m64 __A, __m64 __B)\n@@ -418,6 +429,7 @@ _mm_sign_pi32 (__m64 __A, __m64 __B)\n   __C = (__v4si) _mm_sign_epi32 ((__m128i) __C, (__m128i) __D);\n   return (__m64) ((__v2du) (__C))[0];\n }\n+#endif\n \n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "36b9bd7f9f4a410e004d0c1c024514147dbd210d", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_2-pcmpgtq.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfbe5dc08b574bccc398256946cc03e2a767329/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_2-pcmpgtq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfbe5dc08b574bccc398256946cc03e2a767329/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_2-pcmpgtq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_2-pcmpgtq.c?ref=3cfbe5dc08b574bccc398256946cc03e2a767329", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -mvsx\" } */\n-/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mpower8-vector\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n \n #ifndef CHECK_H\n #define CHECK_H \"sse4_2-check.h\""}]}