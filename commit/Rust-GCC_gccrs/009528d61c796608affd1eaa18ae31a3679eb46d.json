{"sha": "009528d61c796608affd1eaa18ae31a3679eb46d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5NTI4ZDYxYzc5NjYwOGFmZmQxZWFhMThhZTMxYTM2NzllYjQ2ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-19T12:48:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-19T12:48:44Z"}, "message": "arm: Fix mve_vshlq* [PR99593]\n\nAs mentioned in the PR, before the r11-6708-gbfab355012ca0f5219da8beb04f2fdaf757d34b7\nchange v[al]shr<mode>3 expanders were expanding the shifts by register\nto gen_ashl<mode>3_{,un}signed which don't support immediate CONST_VECTOR\nshift amounts, but now expand to mve_vshlq_<supf><mode> which does.\nThe testcase ICEs, because the constraint doesn't match the predicate and\nbecause LRA works solely with the constraints, so it can e.g. from REG_EQUAL\npropagate there a CONST_VECTOR which matches the constraint but fails the\npredicate and only later on other passes will notice the predicate fails\nand ICE.\n\nFixed by adding a constraint that matches the immediate part of the\npredicate.\n\n\tPR target/99593\n\t* config/arm/constraints.md (Ds): New constraint.\n\t* config/arm/vec-common.md (mve_vshlq_<supf><mode>): Use w,Ds\n\tconstraint instead of w,Dm.\n\n\t* g++.target/arm/pr99593.C: New test.", "tree": {"sha": "fcb492d7d60c4f66357bd39cb0049b13678c62ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcb492d7d60c4f66357bd39cb0049b13678c62ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/009528d61c796608affd1eaa18ae31a3679eb46d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009528d61c796608affd1eaa18ae31a3679eb46d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009528d61c796608affd1eaa18ae31a3679eb46d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009528d61c796608affd1eaa18ae31a3679eb46d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cded5aff76c15e48f689842b9aba1d1df5e3c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cded5aff76c15e48f689842b9aba1d1df5e3c54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cded5aff76c15e48f689842b9aba1d1df5e3c54"}], "stats": {"total": 141, "additions": 139, "deletions": 2}, "files": [{"sha": "de0ca8ecbfe4e79d831b46f1b0df08121dbc06d9", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009528d61c796608affd1eaa18ae31a3679eb46d/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009528d61c796608affd1eaa18ae31a3679eb46d/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=009528d61c796608affd1eaa18ae31a3679eb46d", "patch": "@@ -32,7 +32,7 @@\n \n ;; The following multi-letter normal constraints have been used:\n ;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, DN, Dm, Dl, DL, Do, Dv, Dy, Di,\n-;;\t\t\t Dt, Dp, Dz, Tu, Te\n+;;\t\t\t Ds, Dt, Dp, Dz, Tu, Te\n ;; in Thumb-1 state: Pa, Pb, Pc, Pd, Pe\n ;; in Thumb-2 state: Ha, Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py, Pz, Rd, Rf, Rb, Ra,\n ;;\t\t     Rg, Ri\n@@ -412,6 +412,14 @@\n   (and (match_code \"const_double\")\n        (match_test \"TARGET_32BIT && vfp3_const_double_for_fract_bits (op)\")))\n \n+(define_constraint \"Ds\"\n+ \"@internal\n+  In ARM/Thumb-2 state a const_vector which can be used as immediate\n+  in vshl instruction.\"\n+ (and (match_code \"const_vector\")\n+      (match_test \"TARGET_32BIT\n+\t\t   && imm_for_neon_lshift_operand (op, GET_MODE (op))\")))\n+\n (define_constraint \"Dp\"\n  \"@internal\n   In ARM/ Thumb2 a const_double which can be used with a vcvt.s32.f32 with bits operation\""}, {"sha": "d7011c6ec13da1ce9b4bcf9e86181e6fe4368c53", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009528d61c796608affd1eaa18ae31a3679eb46d/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009528d61c796608affd1eaa18ae31a3679eb46d/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=009528d61c796608affd1eaa18ae31a3679eb46d", "patch": "@@ -299,7 +299,7 @@\n (define_insn \"mve_vshlq_<supf><mode>\"\n   [(set (match_operand:VDQIW 0 \"s_register_operand\" \"=w,w\")\n \t(unspec:VDQIW [(match_operand:VDQIW 1 \"s_register_operand\" \"w,w\")\n-\t\t       (match_operand:VDQIW 2 \"imm_lshift_or_reg_neon\" \"w,Dm\")]\n+\t\t       (match_operand:VDQIW 2 \"imm_lshift_or_reg_neon\" \"w,Ds\")]\n \t VSHLQ))]\n   \"ARM_HAVE_<MODE>_ARITH && !TARGET_REALLY_IWMMXT\"\n   \"@"}, {"sha": "ba2bb9825f0238ade927f57ddb1c5970775c5ec2", "filename": "gcc/testsuite/g++.target/arm/pr99593.C", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009528d61c796608affd1eaa18ae31a3679eb46d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Fpr99593.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009528d61c796608affd1eaa18ae31a3679eb46d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Fpr99593.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Fpr99593.C?ref=009528d61c796608affd1eaa18ae31a3679eb46d", "patch": "@@ -0,0 +1,129 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++17 -O2 -mfloat-abi=hard -mcpu=generic-armv7-a\" } */\n+// { dg-require-effective-target arm_hard_ok }\n+// { dg-require-effective-target arm_neon_ok }\n+// { dg-add-options arm_neon }\n+\n+#include <arm_neon.h>\n+\n+typedef uint16x4_t e;\n+typedef int16x4_t f;\n+typedef int32x4_t g;\n+typedef float32x4_t h;\n+typedef uint32x4_t i;\n+g j, p;\n+g k(int l) { return vdupq_n_s32(l); }\n+i n(f l) { return (i)vmovl_u16((e)l); }\n+template <int, typename> struct q;\n+template <int r, typename aa> q<r, aa> operator<(aa s, q<r, aa> t) {\n+  return q<r, aa>(s) < t;\n+}\n+template <typename ab, typename ac, int r> q<r, ab> ad(const q<r, ac> &);\n+typedef q<4, int> ae;\n+template <> class q<4, float> {\n+ public:\n+ q(h af) : ag(af) {}\n+  q(float) {}\n+  static q ah(void *ai) {\n+    float *l = (float *)ai;\n+    return vld1q_f32(l);\n+  }\n+  q operator+(q o) {\n+    h l = ag, m = o.ag;\n+    return vaddq_f32(l, m);\n+  }\n+  q operator*(q) {\n+    h l = ag, m;\n+    return vmulq_f32(l, m);\n+  }\n+  h ag;\n+};\n+template <> class q<4, unsigned short> {\n+ public:\n+ q(f af) : ag(af) {}\n+  static q ah(void *ai) {\n+    unsigned short *l = (unsigned short *)ai;\n+    return (f)vld1_s16((int16_t *)l);\n+  }\n+  void aj() {\n+    f m = ag;\n+    vst1_u16(0, (e)m);\n+  }\n+  f ag;\n+};\n+template <> class q<4, int> {\n+ public:\n+ q(g af) : ag(af) {}\n+  q(int u) { ag = k(u); }\n+  static q ah(void *ai) {\n+    int32_t *l = (int32_t *)ai;\n+    return vld1q_s32(l);\n+  }\n+  q operator&(q o) {\n+    g v = ag & o.ag;\n+    return v;\n+  }\n+  q operator|(q o) {\n+    g w = ag | o.ag;\n+    return w;\n+  }\n+  q operator^(q) {\n+    g x = ag ^ p;\n+    return x;\n+  }\n+  q operator>>(int ak) { return ag >> q(ak).ag; }\n+  q operator<(q) {\n+    g y, z = j < ag;\n+    y = (g)z;\n+    return y;\n+  }\n+  g ag;\n+};\n+template <> ae ad(const q<4, unsigned short> &al) { return g(n(al.ag)); }\n+template <> q<4, unsigned short> ad(const ae &al) {\n+  i l(i(al.ag));\n+  return (f)vmovn_s32((g)l);\n+}\n+q<4, float> am(long long an) {\n+  q ao = q<4, unsigned short>::ah(&an);\n+  ae ak = ad<int>(ao), ap = ak & 8000, aq = ak ^ ap, ar = 55 < aq, as(aq);\n+  q at = as & ar;\n+  ae au = ap | at;\n+  return q<4, float>::ah(&au);\n+}\n+q<4, unsigned short> av(q<4, float> aw) {\n+  ae ak = ae::ah(&aw), ap = ak & 80000000, aq = ap, ax = 5, as = aq >> 3,\n+    ay = 6;\n+  q az = ax & as;\n+  ae au = ay | az;\n+  return ad<unsigned short>(au);\n+}\n+struct ba {\n+  typedef int bb;\n+  static q<4, float> bc(int s) { return am(s); }\n+};\n+q<4, float> bd(q<4, float> s) { return s * 0; }\n+template <typename be> void bf(void *bg, void *al, int bh, int bi) {\n+  int bj;\n+  auto bk(static_cast<typename be::bb *>(al) + bh),\n+    d = static_cast<typename be::bb *>(bg),\n+    bl = be::bc(static_cast<typename be::bb *>(al)[0]), bm = be::bc(0),\n+    c = bm;\n+  for (; bi;) {\n+    auto a = c, bn = be::bc(static_cast<typename be::bb *>(al)[1]),\n+      bo = be::bc(1);\n+    q bp = bn;\n+    q bq = bp;\n+    auto b = bq + bo;\n+    bl = be::bc(static_cast<typename be::bb *>(al)[2]);\n+    bm = be::bc(bk[2]);\n+    c = bl + bm;\n+    q br = a + b;\n+    auto bs = br;\n+    q bt = bd(bs);\n+    av(bt).aj();\n+    d[0] = bj;\n+  }\n+}\n+int bu;\n+void bv() { bf<ba>(0, 0, 0, bu); }"}]}