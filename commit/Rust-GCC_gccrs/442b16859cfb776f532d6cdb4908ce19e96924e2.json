{"sha": "442b16859cfb776f532d6cdb4908ce19e96924e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQyYjE2ODU5Y2ZiNzc2ZjUzMmQ2Y2RiNDkwOGNlMTllOTY5MjRlMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-27T20:29:15Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-27T20:29:15Z"}, "message": "({CONSTANT,DATA}_ALIGNMENT): Align to at least BITS_PER_WORD.\n\n(PREDICATE_CODES): Add reg_or_unaligned_mem_operand.\n\nFrom-SVN: r10881", "tree": {"sha": "2a318b07903eccbe5d1cd4175e1b0a83cae746c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a318b07903eccbe5d1cd4175e1b0a83cae746c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/442b16859cfb776f532d6cdb4908ce19e96924e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442b16859cfb776f532d6cdb4908ce19e96924e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/442b16859cfb776f532d6cdb4908ce19e96924e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442b16859cfb776f532d6cdb4908ce19e96924e2/comments", "author": null, "committer": null, "parents": [{"sha": "adb18b686c183763d2364dff91e5f2c987ee1b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb18b686c183763d2364dff91e5f2c987ee1b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb18b686c183763d2364dff91e5f2c987ee1b91"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "3581cbfe36649df29350f464cfd67e545818fde0", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442b16859cfb776f532d6cdb4908ce19e96924e2/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442b16859cfb776f532d6cdb4908ce19e96924e2/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=442b16859cfb776f532d6cdb4908ce19e96924e2", "patch": "@@ -252,16 +252,10 @@ extern int target_flags;\n /* No data type wants to be aligned rounder than this.  */\n #define BIGGEST_ALIGNMENT 64\n \n-/* Make strings word-aligned so strcpy from constants will be faster.  */\n-#define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n-  (TREE_CODE (EXP) == STRING_CST\t\\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n-\n-/* Make arrays of chars word-aligned for the same reasons.  */\n-#define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n-  (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\\n-   && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\\\n-   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n+/* Align all constants and variables to at least a word boundary so\n+   we can pick up pieces of them faster.  */\n+#define CONSTANT_ALIGNMENT(EXP, ALIGN) MAX ((ALIGN), BITS_PER_WORD)\n+#define DATA_ALIGNMENT(EXP, ALIGN) MAX ((ALIGN), BITS_PER_WORD)\n \n /* Set this non-zero if move instructions will actually fail to work\n    when given unaligned data.\n@@ -1888,6 +1882,7 @@ literal_section ()\t\t\t\t\t\t\\\n \t\t    SYMBOL_REF, CONST, LABEL_REF}},\t\\\n   {\"aligned_memory_operand\", {MEM}},\t\t\t\\\n   {\"unaligned_memory_operand\", {MEM}},\t\t\t\\\n+  {\"reg_or_unaligned_mem_operand\", {SUBREG, REG, MEM}},\t\\\n   {\"any_memory_operand\", {MEM}},\n \f\n /* Tell collect that the object format is ECOFF.  */"}]}