{"sha": "8fd0a474882a4e7419e84808f8a52f0feb667b49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkMGE0NzQ4ODJhNGU3NDE5ZTg0ODA4ZjhhNTJmMGZlYjY2N2I0OQ==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2010-11-22T10:35:06Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2010-11-22T10:35:06Z"}, "message": "re PR rtl-optimization/45652 (gcc.dg/compat/scalar-by-value-3 FAILs with -O2 -fselective-scheduling2)\n\n\tPR rtl-optimization/45652\n\t* alias.c (get_reg_base_value): New.\n\t* rtl.h (get_reg_base_value): Add prototype.\n\t* sel-sched.c (init_regs_for_mode): Use it.  Don't use registers with\n\tnon-null REG_BASE_VALUE for renaming.\n\ntestsuite:\n\t* gcc.dg/pr45652.c: New.\n\nFrom-SVN: r167025", "tree": {"sha": "e9e9c058158ad6ffd6c71ebc44e91416cfc12a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9e9c058158ad6ffd6c71ebc44e91416cfc12a90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fd0a474882a4e7419e84808f8a52f0feb667b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd0a474882a4e7419e84808f8a52f0feb667b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd0a474882a4e7419e84808f8a52f0feb667b49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd0a474882a4e7419e84808f8a52f0feb667b49/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81ae7e14a29f89864f04cb966aa5bb5f52a29c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ae7e14a29f89864f04cb966aa5bb5f52a29c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81ae7e14a29f89864f04cb966aa5bb5f52a29c8d"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "89e3109760ed77775d6195910bfdc995b4d8aed4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0a474882a4e7419e84808f8a52f0feb667b49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0a474882a4e7419e84808f8a52f0feb667b49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fd0a474882a4e7419e84808f8a52f0feb667b49", "patch": "@@ -1,3 +1,10 @@\n+2010-11-22  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/45652\n+\t* alias.c (get_reg_base_value): New.\n+\t* rtl.h (get_reg_base_value): Add prototype.\n+\t* sel-sched.c (init_regs_for_mode): Use it.  Don't use registers with\n+\tnon-null REG_BASE_VALUE for renaming.\n \n 2010-11-22  Jeremie Salvucci  <jeremie.salvucci@free.fr>\n \t    Basile Starynkevitch  <basile@starynkevitch.net>"}, {"sha": "5b04f85791c68590fe9f3dee537f7d0568a4c9b8", "filename": "gcc/alias.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0a474882a4e7419e84808f8a52f0feb667b49/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0a474882a4e7419e84808f8a52f0feb667b49/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=8fd0a474882a4e7419e84808f8a52f0feb667b49", "patch": "@@ -1291,6 +1291,14 @@ record_set (rtx dest, const_rtx set, void *data ATTRIBUTE_UNUSED)\n   reg_seen[regno] = 1;\n }\n \n+/* Return REG_BASE_VALUE for REGNO.  Selective scheduler uses this to avoid\n+   using hard registers with non-null REG_BASE_VALUE for renaming.  */\n+rtx\n+get_reg_base_value (unsigned int regno)\n+{\n+  return VEC_index (rtx, reg_base_value, regno);\n+}\n+\n /* If a value is known for REGNO, return it.  */\n \n rtx"}, {"sha": "d5a674898f39b70ea22c9018198194a1a841b114", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0a474882a4e7419e84808f8a52f0feb667b49/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0a474882a4e7419e84808f8a52f0feb667b49/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=8fd0a474882a4e7419e84808f8a52f0feb667b49", "patch": "@@ -2510,6 +2510,7 @@ extern rtx find_base_term (rtx);\n extern rtx gen_hard_reg_clobber (enum machine_mode, unsigned int);\n extern rtx get_reg_known_value (unsigned int);\n extern bool get_reg_known_equiv_p (unsigned int);\n+extern rtx get_reg_base_value (unsigned int);\n \n #ifdef STACK_REGS\n extern int stack_regs_mentioned (const_rtx insn);"}, {"sha": "3b5603c7efad59d4a7087f83a76a96ebeecabbfc", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0a474882a4e7419e84808f8a52f0feb667b49/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0a474882a4e7419e84808f8a52f0feb667b49/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=8fd0a474882a4e7419e84808f8a52f0feb667b49", "patch": "@@ -1139,6 +1139,9 @@ init_regs_for_mode (enum machine_mode mode)\n             /* Can't use regs which aren't saved by\n                the prologue.  */\n             || !TEST_HARD_REG_BIT (sel_hrd.regs_ever_used, cur_reg + i)\n+\t    /* Can't use regs with non-null REG_BASE_VALUE, because adjusting\n+\t       it affects aliasing globally and invalidates all AV sets.  */\n+\t    || get_reg_base_value (cur_reg + i)\n #ifdef LEAF_REGISTERS\n             /* We can't use a non-leaf register if we're in a\n                leaf function.  */"}, {"sha": "4458ab75c2dc31946536a12ce7bdcf68a28b6974", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0a474882a4e7419e84808f8a52f0feb667b49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0a474882a4e7419e84808f8a52f0feb667b49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8fd0a474882a4e7419e84808f8a52f0feb667b49", "patch": "@@ -1,3 +1,8 @@\n+2010-11-22  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/45652\n+\t* gcc.dg/pr45652.c: New.\n+\n 2010-11-21  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl-optimization/46571"}, {"sha": "8f55f0c8cb121a4d614cd0f9377326644ab9886d", "filename": "gcc/testsuite/gcc.dg/pr45652.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0a474882a4e7419e84808f8a52f0feb667b49/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45652.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0a474882a4e7419e84808f8a52f0feb667b49/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45652.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45652.c?ref=8fd0a474882a4e7419e84808f8a52f0feb667b49", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target powerpc*-*-* ia64-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -fselective-scheduling2\" } */\n+\n+struct S {\n+  double i[2];\n+};\n+\n+void __attribute__ ((noinline)) checkcd (struct S x)\n+{\n+  if (x.i[0] != 7.0 || x.i[1] != 8.0)\n+    __builtin_abort ();\n+}\n+\n+void __attribute__ ((noinline)) testvacd (int n, ...)\n+{\n+  int i;\n+  __builtin_va_list ap;\n+  __builtin_va_start (ap, n);\n+  for (i = 0; i < n; i++)\n+    {\n+      struct S t = __builtin_va_arg (ap, struct S);\n+      checkcd (t);\n+    }\n+  __builtin_va_end (ap);\n+}\n+\n+void\n+testitcd (void)\n+{\n+  struct S x = { { 7.0, 8.0 } };\n+  testvacd (2, x, x);\n+}\n+\n+int\n+main ()\n+{\n+  testitcd ();\n+  return 0;\n+}"}]}