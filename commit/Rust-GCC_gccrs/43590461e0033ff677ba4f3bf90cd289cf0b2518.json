{"sha": "43590461e0033ff677ba4f3bf90cd289cf0b2518", "node_id": "C_kwDOANBUbNoAKDQzNTkwNDYxZTAwMzNmZjY3N2JhNGYzYmY5MGNkMjg5Y2YwYjI1MTg", "commit": {"author": {"name": "Mahmoud Mohamed", "email": "mahadelr19@gmail.com", "date": "2023-03-07T23:57:24Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-14T10:24:48Z"}, "message": "hir: Provide basic handling for ReferencePattern in function parameter\n\nAdded an implementation for\n`CompilePatternBindings::visit (HIR::ReferencePattern)` where we\ndereference the initial expression and recurse.\nAdded an implementation for\n`CompilePatternBindings::visit (HIR::IdentifierPattern)` as well since it's\nthe simplest base case.\n\nIn addition to this, a small refactor for the shared code in\n`StructPattern` and `TupleStructPattern` visits was added as a helper\nfunction called `create_tmp_param_var`.\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-fnparam.cc (CompileFnParam::visit):\n\tAdded visit implementation for ReferencePattern.\n\t(CompileFnParam::create_tmp_param_var):\n\tRefactored duplicated code into a helper function.\n\t* backend/rust-compile-fnparam.h: Added visit implementation for\n\tReferencePattern.\n\t* backend/rust-compile-pattern.cc (CompilePatternBindings::visit):\n\tAdded visit implementation for ReferencePattern and\n\tIdentifierPattern.\n\t* backend/rust-compile-pattern.h: Added visit implementation for\n\tReferencePattern and IdentifierPattern.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/ref_pattern_fn_param.rs: Moved to...\n\t* rust/compile/ref_pattern_fn_param1.rs: ...here.\n\t* rust/compile/ref_pattern_fn_param2.rs: New test.\n\t* rust/execute/torture/ref-pattern1.rs: New test.\n\nSigned-off-by: Mahmoud Mohamed <mahadelr19@gmail.com>", "tree": {"sha": "d269c94448e739baa252ebd64ccdf8cba34a535b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d269c94448e739baa252ebd64ccdf8cba34a535b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43590461e0033ff677ba4f3bf90cd289cf0b2518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43590461e0033ff677ba4f3bf90cd289cf0b2518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43590461e0033ff677ba4f3bf90cd289cf0b2518", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43590461e0033ff677ba4f3bf90cd289cf0b2518/comments", "author": {"login": "goar5670", "id": 40712841, "node_id": "MDQ6VXNlcjQwNzEyODQx", "avatar_url": "https://avatars.githubusercontent.com/u/40712841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goar5670", "html_url": "https://github.com/goar5670", "followers_url": "https://api.github.com/users/goar5670/followers", "following_url": "https://api.github.com/users/goar5670/following{/other_user}", "gists_url": "https://api.github.com/users/goar5670/gists{/gist_id}", "starred_url": "https://api.github.com/users/goar5670/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goar5670/subscriptions", "organizations_url": "https://api.github.com/users/goar5670/orgs", "repos_url": "https://api.github.com/users/goar5670/repos", "events_url": "https://api.github.com/users/goar5670/events{/privacy}", "received_events_url": "https://api.github.com/users/goar5670/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "362c6d7f14bfc84a670bd84a4ea11ae3da916fa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362c6d7f14bfc84a670bd84a4ea11ae3da916fa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/362c6d7f14bfc84a670bd84a4ea11ae3da916fa9"}], "stats": {"total": 88, "additions": 62, "deletions": 26}, "files": [{"sha": "cec6340c3def5dc907d46cc9c529ffe7a5b74ba8", "filename": "gcc/rust/backend/rust-compile-fnparam.cc", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.cc?ref=43590461e0033ff677ba4f3bf90cd289cf0b2518", "patch": "@@ -72,35 +72,22 @@ CompileFnParam::visit (HIR::WildcardPattern &pattern)\n void\n CompileFnParam::visit (HIR::StructPattern &pattern)\n {\n-  // generate the anon param\n-  tree tmp_ident = create_tmp_var_name (\"RSTPRM\");\n-  std::string cpp_str_identifier = std::string (IDENTIFIER_POINTER (tmp_ident));\n-\n-  decl_type = ctx->get_backend ()->immutable_type (decl_type);\n-  compiled_param\n-    = ctx->get_backend ()->parameter_variable (fndecl, cpp_str_identifier,\n-\t\t\t\t\t       decl_type, locus);\n-\n-  // setup the pattern bindings\n-  tree anon_param = ctx->get_backend ()->var_expression (compiled_param, locus);\n-  CompilePatternBindings::Compile (&pattern, anon_param, ctx);\n+  tree tmp_param_var = create_tmp_param_var (decl_type);\n+  CompilePatternBindings::Compile (&pattern, tmp_param_var, ctx);\n }\n \n void\n CompileFnParam::visit (HIR::TupleStructPattern &pattern)\n {\n-  // generate the anon param\n-  tree tmp_ident = create_tmp_var_name (\"RSTPRM\");\n-  std::string cpp_str_identifier = std::string (IDENTIFIER_POINTER (tmp_ident));\n-\n-  decl_type = ctx->get_backend ()->immutable_type (decl_type);\n-  compiled_param\n-    = ctx->get_backend ()->parameter_variable (fndecl, cpp_str_identifier,\n-\t\t\t\t\t       decl_type, locus);\n+  tree tmp_param_var = create_tmp_param_var (decl_type);\n+  CompilePatternBindings::Compile (&pattern, tmp_param_var, ctx);\n+}\n \n-  // setup the pattern bindings\n-  tree anon_param = ctx->get_backend ()->var_expression (compiled_param, locus);\n-  CompilePatternBindings::Compile (&pattern, anon_param, ctx);\n+void\n+CompileFnParam::visit (HIR::ReferencePattern &pattern)\n+{\n+  tree tmp_param_var = create_tmp_param_var (decl_type);\n+  CompilePatternBindings::Compile (&pattern, tmp_param_var, ctx);\n }\n \n Bvariable *\n@@ -117,5 +104,20 @@ CompileSelfParam::compile (Context *ctx, tree fndecl, HIR::SelfParam &self,\n \t\t\t\t\t\t  locus);\n }\n \n+tree\n+CompileFnParam::create_tmp_param_var (tree decl_type)\n+{\n+  // generate the anon param\n+  tree tmp_ident = create_tmp_var_name (\"RSTPRM\");\n+  std::string cpp_str_identifier = std::string (IDENTIFIER_POINTER (tmp_ident));\n+\n+  decl_type = ctx->get_backend ()->immutable_type (decl_type);\n+  compiled_param\n+    = ctx->get_backend ()->parameter_variable (fndecl, cpp_str_identifier,\n+\t\t\t\t\t       decl_type, locus);\n+\n+  return ctx->get_backend ()->var_expression (compiled_param, locus);\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "8e35a46299144d3d2eda05e478a8ce50c4d13ed3", "filename": "gcc/rust/backend/rust-compile-fnparam.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h?ref=43590461e0033ff677ba4f3bf90cd289cf0b2518", "patch": "@@ -37,20 +37,22 @@ class CompileFnParam : private HIRCompileBase, protected HIR::HIRPatternVisitor\n   void visit (HIR::WildcardPattern &pattern) override;\n   void visit (HIR::StructPattern &) override;\n   void visit (HIR::TupleStructPattern &) override;\n+  void visit (HIR::ReferencePattern &) override;\n \n   // Empty visit for unused Pattern HIR nodes.\n   void visit (HIR::AltPattern &) override {}\n   void visit (HIR::LiteralPattern &) override {}\n   void visit (HIR::PathInExpression &) override {}\n   void visit (HIR::QualifiedPathInExpression &) override {}\n   void visit (HIR::RangePattern &) override {}\n-  void visit (HIR::ReferencePattern &) override {}\n   void visit (HIR::SlicePattern &) override {}\n   void visit (HIR::TuplePattern &) override {}\n \n private:\n   CompileFnParam (Context *ctx, tree fndecl, tree decl_type, Location locus);\n \n+  tree create_tmp_param_var (tree decl_type);\n+\n   tree fndecl;\n   tree decl_type;\n   Location locus;"}, {"sha": "8e5954860642b58edc2b376c4743e261ef93fe40", "filename": "gcc/rust/backend/rust-compile-pattern.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc?ref=43590461e0033ff677ba4f3bf90cd289cf0b2518", "patch": "@@ -329,6 +329,23 @@ CompilePatternBindings::visit (HIR::StructPattern &pattern)\n     }\n }\n \n+void\n+CompilePatternBindings::visit (HIR::ReferencePattern &pattern)\n+{\n+  tree derefed\n+    = indirect_expression (match_scrutinee_expr, pattern.get_locus ());\n+\n+  CompilePatternBindings::Compile (pattern.get_referenced_pattern ().get (),\n+\t\t\t\t   derefed, ctx);\n+}\n+\n+void\n+CompilePatternBindings::visit (HIR::IdentifierPattern &pattern)\n+{\n+  ctx->insert_pattern_binding (pattern.get_pattern_mappings ().get_hirid (),\n+\t\t\t       match_scrutinee_expr);\n+}\n+\n void\n CompilePatternLet::visit (HIR::IdentifierPattern &pattern)\n {"}, {"sha": "4fb395476b5d2fc24c3ab8522a0d0cce18f5066b", "filename": "gcc/rust/backend/rust-compile-pattern.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h?ref=43590461e0033ff677ba4f3bf90cd289cf0b2518", "patch": "@@ -76,6 +76,8 @@ class CompilePatternBindings : public HIRCompileBase,\n \n   void visit (HIR::StructPattern &pattern) override;\n   void visit (HIR::TupleStructPattern &pattern) override;\n+  void visit (HIR::ReferencePattern &pattern) override;\n+  void visit (HIR::IdentifierPattern &) override;\n \n   // unsupported\n   void visit (HIR::AltPattern &pattern) override\n@@ -85,12 +87,10 @@ class CompilePatternBindings : public HIRCompileBase,\n   }\n \n   // Empty visit for unused Pattern HIR nodes.\n-  void visit (HIR::IdentifierPattern &) override {}\n   void visit (HIR::LiteralPattern &) override {}\n   void visit (HIR::PathInExpression &) override {}\n   void visit (HIR::QualifiedPathInExpression &) override {}\n   void visit (HIR::RangePattern &) override {}\n-  void visit (HIR::ReferencePattern &) override {}\n   void visit (HIR::SlicePattern &) override {}\n   void visit (HIR::TuplePattern &) override {}\n   void visit (HIR::WildcardPattern &) override {}"}, {"sha": "67ea033a2b23b79c2747d316b85cc348990fc222", "filename": "gcc/testsuite/rust/compile/ref_pattern_fn_param1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Ftestsuite%2Frust%2Fcompile%2Fref_pattern_fn_param1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Ftestsuite%2Frust%2Fcompile%2Fref_pattern_fn_param1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fref_pattern_fn_param1.rs?ref=43590461e0033ff677ba4f3bf90cd289cf0b2518", "previous_filename": "gcc/testsuite/rust/compile/ref_pattern_fn_param.rs"}, {"sha": "8fddc9008b5380759d86bacf4991028b3e027e50", "filename": "gcc/testsuite/rust/compile/ref_pattern_fn_param2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Ftestsuite%2Frust%2Fcompile%2Fref_pattern_fn_param2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Ftestsuite%2Frust%2Fcompile%2Fref_pattern_fn_param2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fref_pattern_fn_param2.rs?ref=43590461e0033ff677ba4f3bf90cd289cf0b2518", "patch": "@@ -0,0 +1,7 @@\n+fn foo(&b: &i32) -> bool {\n+  b == 0\n+}\n+\n+fn main() {\n+  let _ = foo(&0);\n+}"}, {"sha": "4e6e60483aacd24d0c0d41bed698cfc647f16810", "filename": "gcc/testsuite/rust/execute/torture/ref-pattern1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fref-pattern1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43590461e0033ff677ba4f3bf90cd289cf0b2518/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fref-pattern1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fref-pattern1.rs?ref=43590461e0033ff677ba4f3bf90cd289cf0b2518", "patch": "@@ -0,0 +1,8 @@\n+fn foo (&a: &i32, b: i32) -> i32 {\n+  a + b\n+}\n+\n+fn main() -> i32 {\n+  let a = 4;\n+  foo(&a, 2) - 6\n+}\n\\ No newline at end of file"}]}