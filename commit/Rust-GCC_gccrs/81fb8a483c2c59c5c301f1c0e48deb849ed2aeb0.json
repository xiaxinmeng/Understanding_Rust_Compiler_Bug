{"sha": "81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFmYjhhNDgzYzJjNTljNWMzMDFmMWMwZTQ4ZGViODQ5ZWQyYWViMA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-07-29T11:22:40Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-07-29T11:22:40Z"}, "message": "re PR fortran/42051 ([OOP] ICE on array-valued function with CLASS formal argument)\n\n2010-07-29  Mikael Morin  <mikael@gcc.gnu.org>\n\n\tPR fortran/42051\n\tPR fortran/44064\n\t* class.c (gfc_find_derived_vtab): Accept or discard newly created\n\tsymbols before returning.\n\n2010-07-29  Mikael Morin  <mikael@gcc.gnu.org>\n\n\tPR fortran/42051\n\tPR fortran/44064\n\t* gfortran.dg/pr42051.f03: New testcase.\n\nFrom-SVN: r162674", "tree": {"sha": "28bc068661ccb39824bcc78dcd3c40443158bb52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28bc068661ccb39824bcc78dcd3c40443158bb52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0/comments", "author": null, "committer": null, "parents": [{"sha": "6befd6b053f32de162090b6ee6316c6ac5bcaef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6befd6b053f32de162090b6ee6316c6ac5bcaef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6befd6b053f32de162090b6ee6316c6ac5bcaef0"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "02263afddef0422dae3355911e24ba083b3412f4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0", "patch": "@@ -1,3 +1,10 @@\n+2010-07-29  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/42051\n+\tPR fortran/44064\n+\t* class.c (gfc_find_derived_vtab): Accept or discard newly created\n+\tsymbols before returning.\n+\n 2010-07-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lang.opt (cpp): Remove Joined and Separate markers."}, {"sha": "b3a558b5f9aa90c4962cdad03832ce2272cccef1", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0", "patch": "@@ -321,7 +321,7 @@ gfc_symbol *\n gfc_find_derived_vtab (gfc_symbol *derived)\n {\n   gfc_namespace *ns;\n-  gfc_symbol *vtab = NULL, *vtype = NULL;\n+  gfc_symbol *vtab = NULL, *vtype = NULL, *found_sym = NULL;\n   char name[2 * GFC_MAX_SYMBOL_LEN + 8];\n \n   ns = gfc_current_ns;\n@@ -356,13 +356,13 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t      gfc_get_symbol (name, ns, &vtype);\n \t      if (gfc_add_flavor (&vtype->attr, FL_DERIVED,\n \t\t\t\t  NULL, &gfc_current_locus) == FAILURE)\n-\t\treturn NULL;\n+\t\tgoto cleanup;\n \t      vtype->refs++;\n \t      gfc_set_sym_referenced (vtype);\n \n \t      /* Add component '$hash'.  */\n \t      if (gfc_add_component (vtype, \"$hash\", &c) == FAILURE)\n-\t\treturn NULL;\n+\t\tgoto cleanup;\n \t      c->ts.type = BT_INTEGER;\n \t      c->ts.kind = 4;\n \t      c->attr.access = ACCESS_PRIVATE;\n@@ -371,7 +371,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \n \t      /* Add component '$size'.  */\n \t      if (gfc_add_component (vtype, \"$size\", &c) == FAILURE)\n-\t\treturn NULL;\n+\t\tgoto cleanup;\n \t      c->ts.type = BT_INTEGER;\n \t      c->ts.kind = 4;\n \t      c->attr.access = ACCESS_PRIVATE;\n@@ -384,7 +384,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \n \t      /* Add component $extends.  */\n \t      if (gfc_add_component (vtype, \"$extends\", &c) == FAILURE)\n-\t\treturn NULL;\n+\t\tgoto cleanup;\n \t      c->attr.pointer = 1;\n \t      c->attr.access = ACCESS_PRIVATE;\n \t      parent = gfc_get_derived_super_type (derived);\n@@ -414,7 +414,17 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t}\n     }\n \n-  return vtab;\n+  found_sym = vtab;\n+\n+cleanup:\n+  /* It is unexpected to have some symbols added at resolution or code\n+     generation time. We commit the changes in order to keep a clean state.  */\n+  if (found_sym)\n+    gfc_commit_symbols ();\n+  else\n+    gfc_undo_symbols ();\n+\n+  return found_sym;\n }\n \n "}, {"sha": "fdb52bd338ceced85589a07b6d66ccd3683a65e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0", "patch": "@@ -1,3 +1,9 @@\n+2010-07-29  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/42051\n+\tPR fortran/44064\n+\t* gfortran.dg/pr42051.f03: New testcase.\n+\n 2010-07-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/45034"}, {"sha": "308c1e7229f7f7f435793520f7cf331b43f91d92", "filename": "gcc/testsuite/gfortran.dg/pr42051.f03", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr42051.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr42051.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr42051.f03?ref=81fb8a483c2c59c5c301f1c0e48deb849ed2aeb0", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+! { dg-options \"-fno-whole-file\" }\n+!\n+! PR fortran/42051\n+! PR fortran/44064\n+! Access to freed symbols\n+!\n+! Testcase provided by Damian Rouson <damian@rouson.net>,\n+! reduced by Janus Weil <janus@gcc.gnu.org>.\n+\n+module grid_module\n+  implicit none \n+  type grid\n+  end type\n+  type field\n+    type(grid) :: mesh\n+  end type\n+contains\n+  real function return_x(this)\n+    class(grid) :: this\n+  end function\n+end module \n+\n+module field_module\n+  use grid_module, only: field,return_x\n+  implicit none \n+contains\n+  subroutine output(this)\n+    class(field) :: this\n+    print *,return_x(this%mesh)\n+  end subroutine\n+end module\n+\n+end\n+\n+! { dg-final { cleanup-modules \"grid_module field_module\" } }"}]}