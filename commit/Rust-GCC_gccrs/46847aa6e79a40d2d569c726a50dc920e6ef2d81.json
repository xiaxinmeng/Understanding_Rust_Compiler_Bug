{"sha": "46847aa6e79a40d2d569c726a50dc920e6ef2d81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY4NDdhYTZlNzlhNDBkMmQ1NjljNzI2YTUwZGM5MjBlNmVmMmQ4MQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-02-07T22:37:57Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-02-07T22:37:57Z"}, "message": "builtin-types.def (BT_FN_FLOAT_FLOAT_FLOAT): New built-in type.\n\n\n\t* builtin-types.def (BT_FN_FLOAT_FLOAT_FLOAT): New built-in type.\n\t(BT_FN_LONG_DOUBLE_LONG_DOUBLE_LONG_DOUBLE): Likewise.\n\t(BT_FN_DOUBLE_DOUBLE_DOUBLE): Likewise.\n\t* builtins.def: Define pow, powf, powl, atan2, atan2f and atan2l\n\tbuiltin functions (and their __builtin_* variants).\n\t* builtins.c (mathfn_built_in): Handle missing log{,f,l} cases.\n\t(expand_builtin): Don't expand log{,f,l}, pow{,f,l} or atan2{,f,l}\n\twhen not optimizing.\n\n\t* doc/extend.texi: Document new pow and atan2 builtins, and\n\ttheir float and long double variants.  Realphabetize builtins.\n\n\t* testsuite/gcc.dg/builtins-4.c: New test case.\n\nFrom-SVN: r62551", "tree": {"sha": "5831f8d64256959cde2af68fd1808297950ca51d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5831f8d64256959cde2af68fd1808297950ca51d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46847aa6e79a40d2d569c726a50dc920e6ef2d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46847aa6e79a40d2d569c726a50dc920e6ef2d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46847aa6e79a40d2d569c726a50dc920e6ef2d81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46847aa6e79a40d2d569c726a50dc920e6ef2d81/comments", "author": null, "committer": null, "parents": [{"sha": "c48d6750f4d60f288eae97b09dc7e4e4a025b3d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c48d6750f4d60f288eae97b09dc7e4e4a025b3d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c48d6750f4d60f288eae97b09dc7e4e4a025b3d9"}], "stats": {"total": 157, "additions": 139, "deletions": 18}, "files": [{"sha": "bb4d4db4c053267457b09a604fdecfd4f8050ab3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46847aa6e79a40d2d569c726a50dc920e6ef2d81", "patch": "@@ -1,3 +1,17 @@\n+2003-02-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtin-types.def (BT_FN_FLOAT_FLOAT_FLOAT): New built-in type.\n+\t(BT_FN_LONG_DOUBLE_LONG_DOUBLE_LONG_DOUBLE): Likewise.\n+\t(BT_FN_DOUBLE_DOUBLE_DOUBLE): Likewise.\n+\t* builtins.def: Define pow, powf, powl, atan2, atan2f and atan2l\n+\tbuiltin functions (and their __builtin_* variants).\n+\t* builtins.c (mathfn_built_in): Handle missing log{,f,l} cases.\n+\t(expand_builtin): Don't expand log{,f,l}, pow{,f,l} or atan2{,f,l}\n+\twhen not optimizing.\n+\n+\t* doc/extend.texi: Document new pow and atan2 builtins, and\n+\ttheir float and long double variants.  Realphabetize builtins.\n+\n Fri Feb  7 23:24:28 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (sse2_nandv2di3): Fix."}, {"sha": "9fa0f4e6f2c766b861b0e742432c78db979399ea", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=46847aa6e79a40d2d569c726a50dc920e6ef2d81", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+/* Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -149,6 +149,12 @@ DEF_FUNCTION_TYPE_2 (BT_FN_INT_PTR_CONST_STRING,\n \t\t     BT_INT, BT_PTR, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTR_SIZE,\n \t\t     BT_VOID, BT_PTR, BT_SIZE)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_FLOAT_FLOAT,\n+\t\t     BT_FLOAT, BT_FLOAT, BT_FLOAT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_DOUBLE,\n+\t\t     BT_DOUBLE, BT_DOUBLE, BT_DOUBLE)\n+DEF_FUNCTION_TYPE_2 (BT_FN_LONG_DOUBLE_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t     BT_LONG_DOUBLE, BT_LONG_DOUBLE, BT_LONG_DOUBLE)\n \n DEF_FUNCTION_TYPE_3 (BT_FN_STRING_STRING_CONST_STRING_SIZE,\n \t\t     BT_STRING, BT_STRING, BT_CONST_STRING, BT_SIZE)"}, {"sha": "e2ad1e8af0872fb29d5373f28b759e2ce8a96263", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=46847aa6e79a40d2d569c726a50dc920e6ef2d81", "patch": "@@ -1507,6 +1507,11 @@ mathfn_built_in (type, fn)\n       case BUILT_IN_EXPL:\n \tfcode = BUILT_IN_EXP;\n \tbreak;\n+      case BUILT_IN_LOG:\n+      case BUILT_IN_LOGF:\n+      case BUILT_IN_LOGL:\n+\tfcode = BUILT_IN_LOG;\n+\tbreak;\n       case BUILT_IN_FLOOR:\n       case BUILT_IN_FLOORF:\n       case BUILT_IN_FLOORL:\n@@ -1558,6 +1563,11 @@ mathfn_built_in (type, fn)\n       case BUILT_IN_EXPL:\n \tfcode = BUILT_IN_EXPF;\n \tbreak;\n+      case BUILT_IN_LOG:\n+      case BUILT_IN_LOGF:\n+      case BUILT_IN_LOGL:\n+\tfcode = BUILT_IN_LOGF;\n+\tbreak;\n       case BUILT_IN_FLOOR:\n       case BUILT_IN_FLOORF:\n       case BUILT_IN_FLOORL:\n@@ -1609,6 +1619,11 @@ mathfn_built_in (type, fn)\n       case BUILT_IN_EXPL:\n \tfcode = BUILT_IN_EXPL;\n \tbreak;\n+      case BUILT_IN_LOG:\n+      case BUILT_IN_LOGF:\n+      case BUILT_IN_LOGL:\n+\tfcode = BUILT_IN_LOGL;\n+\tbreak;\n       case BUILT_IN_FLOOR:\n       case BUILT_IN_FLOORF:\n       case BUILT_IN_FLOORL:\n@@ -3905,6 +3920,15 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       case BUILT_IN_EXP:\n       case BUILT_IN_EXPF:\n       case BUILT_IN_EXPL:\n+      case BUILT_IN_LOG:\n+      case BUILT_IN_LOGF:\n+      case BUILT_IN_LOGL:\n+      case BUILT_IN_POW:\n+      case BUILT_IN_POWF:\n+      case BUILT_IN_POWL:\n+      case BUILT_IN_ATAN2:\n+      case BUILT_IN_ATAN2F:\n+      case BUILT_IN_ATAN2L:\n       case BUILT_IN_MEMSET:\n       case BUILT_IN_MEMCPY:\n       case BUILT_IN_MEMCMP:"}, {"sha": "268696edb8f8c7fb9da5e776028eaa4d5f1b05ff", "filename": "gcc/builtins.def", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=46847aa6e79a40d2d569c726a50dc920e6ef2d81", "patch": "@@ -1,6 +1,6 @@\n /* This file contains the definitions and documentation for the\n    builtins used in the GNU compiler.\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -487,6 +487,20 @@ DEF_LIB_BUILTIN(BUILT_IN_LOG,\n \t\t\t\t: (flag_unsafe_math_optimizations\n \t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n+DEF_LIB_BUILTIN(BUILT_IN_POW,\n+\t\t\"__builtin_pow\",\n+\t\tBT_FN_DOUBLE_DOUBLE_DOUBLE,\n+\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t: (flag_unsafe_math_optimizations\n+\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n+DEF_LIB_BUILTIN(BUILT_IN_ATAN2,\n+\t\t\"__builtin_atan2\",\n+\t\tBT_FN_DOUBLE_DOUBLE_DOUBLE,\n+\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t: (flag_unsafe_math_optimizations\n+\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n DEF_C99_C90RES_BUILTIN(BUILT_IN_SQRTF,\n \t\t       \"__builtin_sqrtf\",\n \t\t       BT_FN_FLOAT_FLOAT,\n@@ -518,6 +532,20 @@ DEF_C99_C90RES_BUILTIN(BUILT_IN_LOGF,\n \t\t\t\t       : (flag_unsafe_math_optimizations\n \t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_POWF,\n+\t\t       \"__builtin_powf\",\n+\t\t       BT_FN_FLOAT_FLOAT_FLOAT,\n+\t\t       flag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t       : (flag_unsafe_math_optimizations\n+\t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_ATAN2F,\n+\t\t       \"__builtin_atan2f\",\n+\t\t       BT_FN_FLOAT_FLOAT_FLOAT,\n+\t\t       flag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t       : (flag_unsafe_math_optimizations\n+\t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n DEF_C99_C90RES_BUILTIN(BUILT_IN_SQRTL,\n \t\t       \"__builtin_sqrtl\",\n \t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n@@ -549,6 +577,20 @@ DEF_C99_C90RES_BUILTIN(BUILT_IN_LOGL,\n \t\t\t\t       : (flag_unsafe_math_optimizations\n \t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_POWL,\n+\t\t       \"__builtin_powl\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       flag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t       : (flag_unsafe_math_optimizations\n+\t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_ATAN2L,\n+\t\t       \"__builtin_atan2l\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       flag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t       : (flag_unsafe_math_optimizations\n+\t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n \n DEF_GCC_BUILTIN(BUILT_IN_INF,\n \t\t\"__builtin_inf\","}, {"sha": "eb5935954ee191ca728aa283eac0efb896fb7c90", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=46847aa6e79a40d2d569c726a50dc920e6ef2d81", "patch": "@@ -4527,6 +4527,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex abort\n @findex abs\n @findex alloca\n+@findex atan2\n+@findex atan2f\n+@findex atan2l\n @findex bcmp\n @findex bzero\n @findex cimag\n@@ -4565,6 +4568,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex memcmp\n @findex memcpy\n @findex memset\n+@findex pow\n+@findex powf\n+@findex powl\n @findex printf\n @findex printf_unlocked\n @findex rindex\n@@ -4639,26 +4645,30 @@ mode.\n \n The ISO C99 functions @code{conj}, @code{conjf}, @code{conjl}, @code{creal},\n @code{crealf}, @code{creall}, @code{cimag}, @code{cimagf}, @code{cimagl},\n-@code{llabs}, @code{imaxabs}, @code{round}, @code{trunc}, @code{nearbyint},\n-@code{roundf}, @code{truncf}, @code{nearbyintf}, @code{roundl}, @code{truncl} and\n-@code{nearbyintl} are handled as built-in functions except in strict ISO C90 mode.\n-There are also built-in versions of the ISO C99 functions @code{cosf},\n-@code{cosl}, @code{expf}, @code{expl}, @code{fabsf}, @code{fabsl}, @code{logf},\n-@code{logl}, @code{sinf}, @code{sinl}, @code{sqrtf}, @code{sqrtl},\n-@code{ceilf}, @code{ceill}, @code{floorf} and @code{floorl} that are recognized\n-in any mode since ISO C90 reserves these names for the purpose to which ISO C99\n-puts them.  All these functions have corresponding versions prefixed with\n-@code{__builtin_}.\n-\n-The ISO C90 functions @code{abs}, @code{cos}, @code{exp}, @code{fabs},\n-@code{fprintf}, @code{fputs}, @code{labs}, @code{log}, @code{floor},\n-@code{ceil} @code{memcmp}, @code{memcpy}, @code{memset}, @code{printf},\n+@code{llabs}, @code{imaxabs}, @code{round}, @code{roundf}, @code{roundl},\n+@code{trunc}, @code{truncf}, @code{truncl}, @code{nearbyint},\n+@code{nearbyintf} and @code{nearbyintl} are handled as built-in functions\n+except in strict ISO C90 mode.\n+\n+There are also built-in versions of the ISO C99 functions @code{atan2f},\n+@code{atan2l}, @code{ceilf}, @code{ceill}, @code{cosf}, @code{cosl},\n+@code{expf}, @code{expl}, @code{fabsf}, @code{fabsl}, @code{floorf},\n+@code{floorl}, @code{logf}, @code{logl}, @code{powf}, @code{powl},\n+@code{sinf}, @code{sinl}, @code{sqrtf} and @code{sqrtl}\n+that are recognized in any mode since ISO C90 reserves these names for\n+the purpose to which ISO C99 puts them.  All these functions have\n+corresponding versions prefixed with @code{__builtin_}.\n+\n+The ISO C90 functions @code{abs}, @code{atan2}, @code{ceil}, @code{cos},\n+@code{exp}, @code{fabs}, @code{floor},\n+@code{fprintf}, @code{fputs}, @code{labs}, @code{log},\n+@code{memcmp}, @code{memcpy}, @code{memset}, @code{pow}, @code{printf},\n @code{sin}, @code{sqrt}, @code{strcat}, @code{strchr}, @code{strcmp},\n @code{strcpy}, @code{strcspn}, @code{strlen}, @code{strncat}, @code{strncmp},\n @code{strncpy}, @code{strpbrk}, @code{strrchr}, @code{strspn}, and\n @code{strstr} are all recognized as built-in functions unless\n-@option{-fno-builtin} is specified (or @option{-fno-builtin-@var{function}} is\n-specified for an individual function).  All of these functions have\n+@option{-fno-builtin} is specified (or @option{-fno-builtin-@var{function}}\n+is specified for an individual function).  All of these functions have\n corresponding versions prefixed with @code{__builtin_}.\n \n GCC provides built-in versions of the ISO C99 floating point comparison"}, {"sha": "c701328315b0272c113564da15ff0ae82a2d9856", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46847aa6e79a40d2d569c726a50dc920e6ef2d81", "patch": "@@ -1,3 +1,7 @@\n+2003-02-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* testsuite/gcc.dg/builtins-4.c: New test case.\n+\n 2003-02-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/20020430-1.c: Fix dg command typos."}, {"sha": "95a1917533da0eebcc8dcb02b78c31b81bfc889e", "filename": "gcc/testsuite/gcc.dg/builtins-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46847aa6e79a40d2d569c726a50dc920e6ef2d81/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-4.c?ref=46847aa6e79a40d2d569c726a50dc920e6ef2d81", "patch": "@@ -0,0 +1,21 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Verify that all the binary __builtin_ math functions are\n+   recognized by the compiler.\n+\n+   Written by Roger Sayle, 6th February 2002.  */\n+\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler-not \"__builtin_\" } } */\n+\n+double test1(double x, double y) { return __builtin_pow(x,y); }\n+double test2(double x, double y) { return __builtin_atan2(x,y); }\n+\n+float test1f(float x, float y) { return __builtin_powf(x,y); }\n+float test2f(float x, float y) { return __builtin_atan2f(x,y); }\n+\n+long double test1l(long double x, long double y)\n+{ return __builtin_powl(x,y); }\n+long double test2l(long double x, long double y)\n+{ return __builtin_atan2l(x,y); }\n+"}]}