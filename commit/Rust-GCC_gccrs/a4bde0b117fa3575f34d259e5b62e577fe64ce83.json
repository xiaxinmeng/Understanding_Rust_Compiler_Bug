{"sha": "a4bde0b117fa3575f34d259e5b62e577fe64ce83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRiZGUwYjExN2ZhMzU3NWYzNGQyNTllNWI2MmU1NzdmZTY0Y2U4Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-17T19:32:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-17T19:32:22Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r764", "tree": {"sha": "5ca8bfff5defa9e837ebc9cbf7a1973392fdab0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ca8bfff5defa9e837ebc9cbf7a1973392fdab0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4bde0b117fa3575f34d259e5b62e577fe64ce83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4bde0b117fa3575f34d259e5b62e577fe64ce83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4bde0b117fa3575f34d259e5b62e577fe64ce83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4bde0b117fa3575f34d259e5b62e577fe64ce83/comments", "author": null, "committer": null, "parents": [{"sha": "d0b97e0a2dc85fc16f79358c248720029f0526bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b97e0a2dc85fc16f79358c248720029f0526bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b97e0a2dc85fc16f79358c248720029f0526bc"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "247f66ac2d4f4b9f689e2a97c47d65e0ebfa42c0", "filename": "gcc/combine.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4bde0b117fa3575f34d259e5b62e577fe64ce83/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4bde0b117fa3575f34d259e5b62e577fe64ce83/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=a4bde0b117fa3575f34d259e5b62e577fe64ce83", "patch": "@@ -2583,10 +2583,13 @@ subst (x, from, to, in_dest, unique_copy)\n \t}\n \n       /* For a constant, try to pick up the part we want.  Handle a full\n-\t word and low-order part.  */\n+\t word and low-order part.  Only do this if we are narrowing\n+\t the constant; if it is being widened, we have no idea what\n+\t the extra bits will have been set to.  */\n \n       if (CONSTANT_P (SUBREG_REG (x)) && op0_mode != VOIDmode\n \t  && GET_MODE_SIZE (mode) == UNITS_PER_WORD\n+\t  && GET_MODE_SIZE (op0_mode) < UNITS_PER_WORD\n \t  && GET_MODE_CLASS (mode) == MODE_INT)\n \t{\n \t  temp = operand_subword (SUBREG_REG (x), SUBREG_WORD (x),\n@@ -2595,7 +2598,8 @@ subst (x, from, to, in_dest, unique_copy)\n \t    return temp;\n \t}\n \t\n-      if (CONSTANT_P (SUBREG_REG (x)) && subreg_lowpart_p (x))\n+      if (CONSTANT_P (SUBREG_REG (x)) && subreg_lowpart_p (x)\n+\t  && GET_MODE_SIZE (mode) < GET_MODE_SIZE (op0_mode))\n \treturn gen_lowpart_for_combine (mode, SUBREG_REG (x));\n \n       /* If we are narrowing the object, we need to see if we can simplify"}]}