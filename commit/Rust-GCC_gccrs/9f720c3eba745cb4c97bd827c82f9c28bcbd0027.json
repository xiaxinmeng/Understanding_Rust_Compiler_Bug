{"sha": "9f720c3eba745cb4c97bd827c82f9c28bcbd0027", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY3MjBjM2ViYTc0NWNiNGM5N2JkODI3YzgyZjljMjhiY2JkMDAyNw==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-03-30T00:03:14Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-03-30T00:03:14Z"}, "message": "c-common.c (c_common_nodes_and_builtins): The first parameter to __builtin_va_start and __builtin_va_copy is now either a...\n\n* c-common.c (c_common_nodes_and_builtins): The first parameter to\n__builtin_va_start and __builtin_va_copy is now either a 'va_list'\nor a reference to a va_list.\n* builtins.c (stabilize_va_list): Simplify now we don't have to\nwork around C array address decay.\n* c-typeck.c (convert_for_assignment): Handle assignment to\na reference parameter by taking the address of the RHS.\n* ginclude/stdarg.h (va_start): Don't take address of first parameter.\n(va_copy): Likewise.\n(__va_copy): Likewise.\n* ginclude/varargs.h (va_start): Likewise.\n(__va_copy): Likewise.\n\nFrom-SVN: r32821", "tree": {"sha": "20d913563a657194431e95f314f5d4189f855d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20d913563a657194431e95f314f5d4189f855d3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f720c3eba745cb4c97bd827c82f9c28bcbd0027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f720c3eba745cb4c97bd827c82f9c28bcbd0027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f720c3eba745cb4c97bd827c82f9c28bcbd0027", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/comments", "author": null, "committer": null, "parents": [{"sha": "abe79fd4da641ef2f393be1bcac0ae855035e9b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe79fd4da641ef2f393be1bcac0ae855035e9b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abe79fd4da641ef2f393be1bcac0ae855035e9b1"}], "stats": {"total": 145, "additions": 81, "deletions": 64}, "files": [{"sha": "8db409e32eed0619dccc2843c624accaa92b684e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f720c3eba745cb4c97bd827c82f9c28bcbd0027", "patch": "@@ -1,3 +1,18 @@\n+2000-03-29  Geoff Keating  <geoffk@cygnus.com>\n+\n+\t* c-common.c (c_common_nodes_and_builtins): The first parameter to\n+\t__builtin_va_start and __builtin_va_copy is now either a 'va_list'\n+\tor a reference to a va_list.\n+\t* builtins.c (stabilize_va_list): Simplify now we don't have to\n+\twork around C array address decay.\n+\t* c-typeck.c (convert_for_assignment): Handle assignment to\n+\ta reference parameter by taking the address of the RHS.\n+\t* ginclude/stdarg.h (va_start): Don't take address of first parameter.\n+\t(va_copy): Likewise.\n+\t(__va_copy): Likewise.\n+\t* ginclude/varargs.h (va_start): Likewise.\n+\t(__va_copy): Likewise.\n+\n Wed Mar 29 15:44:53 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* stmt.c (stmt_loop_nest_empty): Fix thinko in last change."}, {"sha": "94997fb768ebd7fa4464b5e2fef9b8dca74a396f", "filename": "gcc/builtins.c", "status": "modified", "additions": 20, "deletions": 43, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9f720c3eba745cb4c97bd827c82f9c28bcbd0027", "patch": "@@ -1901,66 +1901,43 @@ expand_builtin_next_arg (arglist)\n    from multiple evaluations.  */\n \n static tree\n-stabilize_va_list (valist, was_ptr)\n+stabilize_va_list (valist, needs_lvalue)\n      tree valist;\n-     int was_ptr;\n+     int needs_lvalue;\n {\n   if (TREE_CODE (va_list_type_node) == ARRAY_TYPE)\n     {\n-      /* If stdarg.h took the address of an array-type valist that was passed\n-         as a parameter, we'll have taken the address of the parameter itself\n-         rather than the array as we'd intended.  Undo this mistake.  */\n-\n-      if (was_ptr)\n-\t{\n-\t  STRIP_NOPS (valist);\n-\n-\t  /* Two cases: either &array, which decomposed to \n-\t        <ptr <array <record> valist>>\n-\t     or &ptr, which turned into\n-\t\t<ptr <ptr <record>>>\n-\t     In the first case we'll need to put the ADDR_EXPR back\n-\t     after frobbing the types as if &array[0].  */\n-\n-\t  if (TREE_CODE (valist) != ADDR_EXPR)\n-\t    abort ();\n-\t  valist = TREE_OPERAND (valist, 0);\n-\t}\n+      if (TREE_SIDE_EFFECTS (valist))\n+\tvalist = save_expr (valist);\n \n-      if (TYPE_MAIN_VARIANT (TREE_TYPE (valist))\n-\t  == TYPE_MAIN_VARIANT (va_list_type_node))\n-\t{\n-\t  tree pt = build_pointer_type (TREE_TYPE (va_list_type_node));\n-\t  valist = build1 (ADDR_EXPR, pt, valist);\n-\t  TREE_SIDE_EFFECTS (valist)\n-\t    = TREE_SIDE_EFFECTS (TREE_OPERAND (valist, 0));\n-\t}\n-      else\n+      /* For this case, the backends will be expecting a pointer to\n+\t TREE_TYPE (va_list_type_node), but it's possible we've\n+\t actually been given an array (an actual va_list_type_node).\n+\t So fix it.  */\n+      if (TREE_CODE (TREE_TYPE (valist)) == ARRAY_TYPE)\n \t{\n-\t  if (! POINTER_TYPE_P (TREE_TYPE (valist))\n-\t      || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (valist)))\n-\t\t  != TYPE_MAIN_VARIANT (TREE_TYPE (va_list_type_node))))\n-\t    abort ();\n+ \t  tree p1 = build_pointer_type (TREE_TYPE (va_list_type_node));\n+ \t  tree p2 = build_pointer_type (va_list_type_node);\n+ \t  valist = build1 (ADDR_EXPR, p2, valist);\n+\t  valist = fold (build1 (NOP_EXPR, p1, valist));\n \t}\n-\n-      if (TREE_SIDE_EFFECTS (valist))\n-\tvalist = save_expr (valist);\n     }\n   else\n     {\n-      if (! was_ptr)\n-\t{\n-\t  tree pt;\n+      tree pt;\n \n+      if (! needs_lvalue)\n+\t{\n \t  if (! TREE_SIDE_EFFECTS (valist))\n \t    return valist;\n-\n+\t  \n \t  pt = build_pointer_type (va_list_type_node);\n-          valist = fold (build1 (ADDR_EXPR, pt, valist));\n+\t  valist = fold (build1 (ADDR_EXPR, pt, valist));\n \t  TREE_SIDE_EFFECTS (valist) = 1;\n \t}\n+\n       if (TREE_SIDE_EFFECTS (valist))\n-        valist = save_expr (valist);\n+\tvalist = save_expr (valist);\n       valist = fold (build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (valist)),\n \t\t\t     valist));\n     }"}, {"sha": "97aba258b12cd32e8262a655560e968e20e53597", "filename": "gcc/c-common.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=9f720c3eba745cb4c97bd827c82f9c28bcbd0027", "patch": "@@ -3478,7 +3478,7 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n   tree traditional_cptr_type_node;\n   tree traditional_len_type_node;\n   tree traditional_len_endlink;\n-  tree va_list_ptr_type_node;\n+  tree va_list_ref_type_node;\n   tree va_list_arg_type_node;\n \n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"__builtin_va_list\"),\n@@ -3490,13 +3490,17 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"__builtin_size_t\"),\n \t\t\tsizetype));\n \n-  va_list_ptr_type_node = build_pointer_type (va_list_type_node);\n-\n   if (TREE_CODE (va_list_type_node) == ARRAY_TYPE)\n-    va_list_arg_type_node = build_pointer_type (TREE_TYPE (va_list_type_node));\n+    {\n+      va_list_arg_type_node = va_list_ref_type_node =\n+\tbuild_pointer_type (TREE_TYPE (va_list_type_node));\n+    }\n   else\n-    va_list_arg_type_node = va_list_type_node;\n-\n+    {\n+      va_list_arg_type_node = va_list_type_node;\n+      va_list_ref_type_node = build_reference_type (va_list_type_node);\n+    }\n+ \n   endlink = void_list_node;\n   int_endlink = tree_cons (NULL_TREE, integer_type_node, endlink);\n   double_endlink = tree_cons (NULL_TREE, double_type_node, endlink);\n@@ -3725,28 +3729,28 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n   builtin_function (\"__builtin_varargs_start\",\n \t\t    build_function_type (void_type_node,\n \t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    va_list_ptr_type_node,\n+\t\t\t\t\t\t    va_list_ref_type_node,\n \t\t\t\t\t\t    endlink)),\n \t\t    BUILT_IN_VARARGS_START, BUILT_IN_NORMAL, NULL_PTR);\n \n   builtin_function (\"__builtin_stdarg_start\",\n \t\t    build_function_type (void_type_node,\n \t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    va_list_ptr_type_node,\n+\t\t\t\t\t\t    va_list_ref_type_node,\n \t\t\t\t\t\t    NULL_TREE)),\n \t\t    BUILT_IN_STDARG_START, BUILT_IN_NORMAL, NULL_PTR);\n \n   builtin_function (\"__builtin_va_end\",\n \t\t    build_function_type (void_type_node,\n \t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    va_list_arg_type_node,\n+\t\t\t\t\t\t    va_list_ref_type_node,\n \t\t\t\t\t\t    endlink)),\n \t\t    BUILT_IN_VA_END, BUILT_IN_NORMAL, NULL_PTR);\n \n   builtin_function (\"__builtin_va_copy\",\n \t\t    build_function_type (void_type_node,\n \t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    va_list_ptr_type_node,\n+\t\t\t\t\t\t    va_list_ref_type_node,\n \t\t\t\t\t\t    tree_cons (NULL_TREE,\n \t\t\t\t\t\t      va_list_arg_type_node,\n \t\t\t\t\t\t      endlink))),"}, {"sha": "f66d1b968664ebaceb9f3961c8b37ac6c303443f", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=9f720c3eba745cb4c97bd827c82f9c28bcbd0027", "patch": "@@ -3960,11 +3960,32 @@ convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n       error (\"void value not ignored as it ought to be\");\n       return error_mark_node;\n     }\n+  /* A type converts to a reference to it.  \n+     This code doesn't fully support references, it's just for the\n+     special case of va_start and va_copy.  */\n+  if (codel == REFERENCE_TYPE\n+      && comptypes (TREE_TYPE (type), TREE_TYPE (rhs)) == 1)\n+    {\n+      if (mark_addressable (rhs) == 0)\n+\treturn error_mark_node;\n+      rhs = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (rhs)), rhs);\n+\n+      /* We already know that these two types are compatible, but they\n+\t may not be exactly identical.  In fact, `TREE_TYPE (type)' is\n+\t likely to be __builtin_va_list and `TREE_TYPE (rhs)' is\n+\t likely to be va_list, a typedef to __builtin_va_list, which\n+\t is different enough that it will cause problems later.  */\n+      if (TREE_TYPE (TREE_TYPE (rhs)) != TREE_TYPE (type))\n+\trhs = build1 (NOP_EXPR, build_pointer_type (TREE_TYPE (type)), rhs);\n+\n+      rhs = build1 (NOP_EXPR, type, rhs);\n+      return rhs;\n+    }\n   /* Arithmetic types all interconvert, and enum is treated like int.  */\n-  if ((codel == INTEGER_TYPE || codel == REAL_TYPE || codel == ENUMERAL_TYPE\n-       || codel == COMPLEX_TYPE)\n-      && (coder == INTEGER_TYPE || coder == REAL_TYPE || coder == ENUMERAL_TYPE\n-\t  || coder == COMPLEX_TYPE))\n+  else if ((codel == INTEGER_TYPE || codel == REAL_TYPE \n+\t    || codel == ENUMERAL_TYPE || codel == COMPLEX_TYPE)\n+\t   && (coder == INTEGER_TYPE || coder == REAL_TYPE \n+\t       || coder == ENUMERAL_TYPE || coder == COMPLEX_TYPE))\n     return convert_and_check (type, rhs);\n \n   /* Conversion to a transparent union from its member types."}, {"sha": "9f6215d31fa6fdb262890f7858ca273ef946c4fd", "filename": "gcc/ginclude/stdarg.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/gcc%2Fginclude%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/gcc%2Fginclude%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdarg.h?ref=9f720c3eba745cb4c97bd827c82f9c28bcbd0027", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1989, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* Copyright (C) 1989, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -51,13 +51,13 @@ typedef __builtin_va_list __gnuc_va_list;\n    actual type **after default promotions**.\n    Thus, va_arg (..., short) is not valid.  */\n \n-#define va_start(v,l)\t__builtin_stdarg_start(&(v),l)\n+#define va_start(v,l)\t__builtin_stdarg_start((v),l)\n #define va_end\t\t__builtin_va_end\n #define va_arg\t\t__builtin_va_arg\n #if !defined(__STRICT_ANSI__) || __STDC_VERSION__ + 0 >= 199900L\n-#define va_copy(d,s)\t__builtin_va_copy(&(d),(s))\n+#define va_copy(d,s)\t__builtin_va_copy((d),(s))\n #endif\n-#define __va_copy(d,s)\t__builtin_va_copy(&(d),(s))\n+#define __va_copy(d,s)\t__builtin_va_copy((d),(s))\n \n \n /* Define va_list, if desired, from __gnuc_va_list. */"}, {"sha": "098094cdd7b86d61d5d743da5541066ca671d336", "filename": "gcc/ginclude/varargs.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/gcc%2Fginclude%2Fvarargs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f720c3eba745cb4c97bd827c82f9c28bcbd0027/gcc%2Fginclude%2Fvarargs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fvarargs.h?ref=9f720c3eba745cb4c97bd827c82f9c28bcbd0027", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1989, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* Copyright (C) 1989, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -63,10 +63,10 @@ typedef int __builtin_va_alist_t __attribute__((__mode__(__word__)));\n typedef __builtin_va_list __gnuc_va_list;\n #endif\n \n-#define va_start(v)\t__builtin_varargs_start(&(v))\n+#define va_start(v)\t__builtin_varargs_start((v))\n #define va_end\t\t__builtin_va_end\n #define va_arg\t\t__builtin_va_arg\n-#define __va_copy(d,s)\t__builtin_va_copy(&(d),(s))\n+#define __va_copy(d,s)\t__builtin_va_copy((d),(s))\n \n /* Define va_list from __gnuc_va_list.  */\n "}]}