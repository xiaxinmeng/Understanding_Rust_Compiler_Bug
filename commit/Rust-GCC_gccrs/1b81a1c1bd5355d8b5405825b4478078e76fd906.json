{"sha": "1b81a1c1bd5355d8b5405825b4478078e76fd906", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI4MWExYzFiZDUzNTVkOGI1NDA1ODI1YjQ0NzgwNzhlNzZmZDkwNg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2016-05-16T09:31:58Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2016-05-16T09:31:58Z"}, "message": "[ARM] Enable __fp16 as a function parameter and return type.\n\ngcc/\n2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\t    Jiong Wang  <jiong.wang@arm.com>\n\n\t* config/arm/arm-c.c (arm_cpu_builtins): Use def_or_undef_macro\n\tfor __ARM_FP16_FORMAT_IEEE and __ARM_FP16_FORMAT_ALTERNATIVE.\n\tDefine __ARM_FP16_ARGS when appropriate.\n\t* config/arm/arm.c (arm_invalid_parameter_type): Remove\n\tdeclaration.\n\t(arm_invalid_return_type): Likewise.\n\t(TARGET_INVALID_PARAMETER_TYPE): Remove.\n\t(TARGET_INVALID_RETURN_TYPE): Remove.\n\t(aapcs_vfp_sub_candidate): Allow HFmode.\n\t(aapcs_vfp_allocate): Add comment.  Support HFmode.\n\t(aapcs_vfp_allocate_return_reg): Likewise.\n\t(struct aapcs_cp_arg_layout): Slightly reword comments for\n\tis_return_candidate and allocate_return_reg.\n\t(output_mov_vfp): Update assert.\n\t(arm_hard_regno_mode_ok): Remove comment, update HF-mode\n\tcondition.\n\t(arm_invalid_parameter_type): Remove.\n\t(amr_invalid_return_type): Remove.\n\t* config/arm/arm.h (TARGET_NEON_FP16): Fix definition.\n\t* config/arm/arm.md (*arm32_movhf): Disable for TARGET_VFP.\n\t* config/arm/vfp.md (*movhf_vfp): Enable for TARGET_VFP.\n\ngcc/testsuite/\n2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* g++.dg/ext/arm-fp16/fp16-param-1.c: Update expected output.  Add\n\ttest for __ARM_FP16_ARGS.\n\t* g++.dg/ext/arm-fp16/fp16-return-1.c: Update expected output.\n\t* gcc.target/arm/aapcs/neon-vect10.c: New.\n\t* gcc.target/arm/aapcs/neon-vect9.c: New.\n\t* gcc.target/arm/aapcs/vfp18.c: New.\n\t* gcc.target/arm/aapcs/vfp19.c: New.\n\t* gcc.target/arm/aapcs/vfp20.c: New.\n\t* gcc.target/arm/aapcs/vfp21.c: New.\n\t* gcc.target/arm/fp16-aapcs-1.c: New.\n\t* g++.target/arm/fp16-param-1.c: Update expected output.  Add\n\ttest for __ARM_FP16_ARGS.\n\t* g++.target/arm/fp16-return-1.c: Update expected output.\n\n\nCo-Authored-By: Jiong Wang <jiong.wang@arm.com>\nCo-Authored-By: Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>\n\nFrom-SVN: r236269", "tree": {"sha": "9f7d00a689aac3631bce0629d716637f5c0bb11a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f7d00a689aac3631bce0629d716637f5c0bb11a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b81a1c1bd5355d8b5405825b4478078e76fd906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b81a1c1bd5355d8b5405825b4478078e76fd906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b81a1c1bd5355d8b5405825b4478078e76fd906", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b81a1c1bd5355d8b5405825b4478078e76fd906/comments", "author": null, "committer": null, "parents": [{"sha": "0501ae62c731ccca994a85e61d67685b829eb0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0501ae62c731ccca994a85e61d67685b829eb0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0501ae62c731ccca994a85e61d67685b829eb0be"}], "stats": {"total": 328, "additions": 266, "deletions": 62}, "files": [{"sha": "4b7aeb535c818a7bb381998e0c87b64a61db0f77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -1,3 +1,29 @@\n+2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/arm/arm-c.c (arm_cpu_builtins): Use def_or_undef_macro\n+\tfor __ARM_FP16_FORMAT_IEEE and __ARM_FP16_FORMAT_ALTERNATIVE.\n+\tDefine __ARM_FP16_ARGS when appropriate.\n+\t* config/arm/arm.c (arm_invalid_parameter_type): Remove\n+\tdeclaration.\n+\t(arm_invalid_return_type): Likewise.\n+\t(TARGET_INVALID_PARAMETER_TYPE): Remove.\n+\t(TARGET_INVALID_RETURN_TYPE): Remove.\n+\t(aapcs_vfp_sub_candidate): Allow HFmode.\n+\t(aapcs_vfp_allocate): Add comment.  Support HFmode.\n+\t(aapcs_vfp_allocate_return_reg): Likewise.\n+\t(struct aapcs_cp_arg_layout): Slightly reword comments for\n+\tis_return_candidate and allocate_return_reg.\n+\t(output_mov_vfp): Update assert.\n+\t(arm_hard_regno_mode_ok): Remove comment, update HF-mode\n+\tcondition.\n+\t(arm_invalid_parameter_type): Remove.\n+\t(amr_invalid_return_type): Remove.\n+\t* config/arm/arm.h (TARGET_NEON_FP16): Fix definition.\n+\t* config/arm/arm.md (*arm32_movhf): Disable for TARGET_VFP.\n+\t* config/arm/vfp.md (*movhf_vfp): Enable for TARGET_VFP.\n+\n 2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/aarch64/aarch64.h (LEGITIMIZE_RELOAD_ADDRESS): Remove."}, {"sha": "b98470fff45b20a5398c2534bc3bb3edfb7bfd01", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -135,10 +135,12 @@ arm_cpu_builtins (struct cpp_reader* pfile)\n   else\n     cpp_undef (pfile, \"__ARM_FP\");\n \n-  if (arm_fp16_format == ARM_FP16_FORMAT_IEEE)\n-    builtin_define (\"__ARM_FP16_FORMAT_IEEE\");\n-  if (arm_fp16_format == ARM_FP16_FORMAT_ALTERNATIVE)\n-    builtin_define (\"__ARM_FP16_FORMAT_ALTERNATIVE\");\n+  def_or_undef_macro (pfile, \"__ARM_FP16_FORMAT_IEEE\",\n+\t\t      arm_fp16_format == ARM_FP16_FORMAT_IEEE);\n+  def_or_undef_macro (pfile, \"__ARM_FP16_FORMAT_ALTERNATIVE\",\n+\t\t      arm_fp16_format == ARM_FP16_FORMAT_ALTERNATIVE);\n+  def_or_undef_macro (pfile, \"__ARM_FP16_ARGS\",\n+\t\t      arm_fp16_format != ARM_FP16_FORMAT_NONE);\n \n   def_or_undef_macro (pfile, \"__ARM_FEATURE_FMA\", TARGET_FMA);\n   def_or_undef_macro (pfile, \"__ARM_NEON__\", TARGET_NEON);"}, {"sha": "c3f74dcd58f9a1cfef2f9022d07aecc89868cb68", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -249,8 +249,6 @@ static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static bool arm_output_addr_const_extra (FILE *, rtx);\n static bool arm_allocate_stack_slots_for_args (void);\n static bool arm_warn_func_return (tree);\n-static const char *arm_invalid_parameter_type (const_tree t);\n-static const char *arm_invalid_return_type (const_tree t);\n static tree arm_promoted_type (const_tree t);\n static tree arm_convert_to_type (tree type, tree expr);\n static bool arm_scalar_mode_supported_p (machine_mode);\n@@ -657,12 +655,6 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_PREFERRED_RELOAD_CLASS\n #define TARGET_PREFERRED_RELOAD_CLASS arm_preferred_reload_class\n \n-#undef TARGET_INVALID_PARAMETER_TYPE\n-#define TARGET_INVALID_PARAMETER_TYPE arm_invalid_parameter_type\n-\n-#undef TARGET_INVALID_RETURN_TYPE\n-#define TARGET_INVALID_RETURN_TYPE arm_invalid_return_type\n-\n #undef TARGET_PROMOTED_TYPE\n #define TARGET_PROMOTED_TYPE arm_promoted_type\n \n@@ -5552,7 +5544,7 @@ aapcs_vfp_sub_candidate (const_tree type, machine_mode *modep)\n     {\n     case REAL_TYPE:\n       mode = TYPE_MODE (type);\n-      if (mode != DFmode && mode != SFmode)\n+      if (mode != DFmode && mode != SFmode && mode != HFmode)\n \treturn -1;\n \n       if (*modep == VOIDmode)\n@@ -5800,11 +5792,16 @@ aapcs_vfp_is_call_candidate (CUMULATIVE_ARGS *pcum, machine_mode mode,\n \t\t\t\t\t\t&pcum->aapcs_vfp_rcount);\n }\n \n+/* Implement the allocate field in aapcs_cp_arg_layout.  See the comment there\n+   for the behaviour of this function.  */\n+\n static bool\n aapcs_vfp_allocate (CUMULATIVE_ARGS *pcum, machine_mode mode,\n \t\t    const_tree type  ATTRIBUTE_UNUSED)\n {\n-  int shift = GET_MODE_SIZE (pcum->aapcs_vfp_rmode) / GET_MODE_SIZE (SFmode);\n+  int rmode_size\n+    = MAX (GET_MODE_SIZE (pcum->aapcs_vfp_rmode), GET_MODE_SIZE (SFmode));\n+  int shift = rmode_size / GET_MODE_SIZE (SFmode);\n   unsigned mask = (1 << (shift * pcum->aapcs_vfp_rcount)) - 1;\n   int regno;\n \n@@ -5853,6 +5850,9 @@ aapcs_vfp_allocate (CUMULATIVE_ARGS *pcum, machine_mode mode,\n   return false;\n }\n \n+/* Implement the allocate_return_reg field in aapcs_cp_arg_layout.  See the\n+   comment there for the behaviour of this function.  */\n+\n static rtx\n aapcs_vfp_allocate_return_reg (enum arm_pcs pcs_variant ATTRIBUTE_UNUSED,\n \t\t\t       machine_mode mode,\n@@ -5943,13 +5943,13 @@ static struct\n      required for a return from FUNCTION_ARG.  */\n   bool (*allocate) (CUMULATIVE_ARGS *, machine_mode, const_tree);\n \n-  /* Return true if a result of mode MODE (or type TYPE if MODE is\n-     BLKmode) is can be returned in this co-processor's registers.  */\n+  /* Return true if a result of mode MODE (or type TYPE if MODE is BLKmode) can\n+     be returned in this co-processor's registers.  */\n   bool (*is_return_candidate) (enum arm_pcs, machine_mode, const_tree);\n \n-  /* Allocate and return an RTX element to hold the return type of a\n-     call, this routine must not fail and will only be called if\n-     is_return_candidate returned true with the same parameters.  */\n+  /* Allocate and return an RTX element to hold the return type of a call.  This\n+     routine must not fail and will only be called if is_return_candidate\n+     returned true with the same parameters.  */\n   rtx (*allocate_return_reg) (enum arm_pcs, machine_mode, const_tree);\n \n   /* Finish processing this argument and prepare to start processing\n@@ -18610,7 +18610,8 @@ output_move_vfp (rtx *operands)\n \n   gcc_assert (REG_P (reg));\n   gcc_assert (IS_VFP_REGNUM (REGNO (reg)));\n-  gcc_assert (mode == SFmode\n+  gcc_assert ((mode == HFmode && TARGET_HARD_FLOAT && TARGET_VFP)\n+\t      || mode == SFmode\n \t      || mode == DFmode\n \t      || mode == SImode\n \t      || mode == DImode\n@@ -23403,10 +23404,8 @@ arm_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n       if (mode == DFmode)\n \treturn VFP_REGNO_OK_FOR_DOUBLE (regno);\n \n-      /* VFP registers can hold HFmode values, but there is no point in\n-\t putting them there unless we have hardware conversion insns. */\n       if (mode == HFmode)\n-\treturn TARGET_FP16 && VFP_REGNO_OK_FOR_SINGLE (regno);\n+\treturn VFP_REGNO_OK_FOR_SINGLE (regno);\n \n       if (TARGET_NEON)\n         return (VALID_NEON_DREG_MODE (mode) && VFP_REGNO_OK_FOR_DOUBLE (regno))\n@@ -23610,26 +23609,6 @@ arm_debugger_arg_offset (int value, rtx addr)\n   return value;\n }\n \f\n-/* Implement TARGET_INVALID_PARAMETER_TYPE.  */\n-\n-static const char *\n-arm_invalid_parameter_type (const_tree t)\n-{\n-  if (SCALAR_FLOAT_TYPE_P (t) && TYPE_PRECISION (t) == 16)\n-    return N_(\"function parameters cannot have __fp16 type\");\n-  return NULL;\n-}\n-\n-/* Implement TARGET_INVALID_PARAMETER_TYPE.  */\n-\n-static const char *\n-arm_invalid_return_type (const_tree t)\n-{\n-  if (SCALAR_FLOAT_TYPE_P (t) && TYPE_PRECISION (t) == 16)\n-    return N_(\"functions cannot return __fp16 type\");\n-  return NULL;\n-}\n-\n /* Implement TARGET_PROMOTED_TYPE.  */\n \n static tree"}, {"sha": "5b1a03080d0a00fc1ef6934f6bce552e65230640", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -194,7 +194,8 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n /* FPU supports half-precision floating-point with NEON element load/store.  */\n #define TARGET_NEON_FP16\t\t\t\t\t\t\\\n   (TARGET_VFP\t\t\t\t\t\t\t\t\\\n-   && ARM_FPU_FSET_HAS (TARGET_FPU_FEATURES, FPU_FL_NEON | FPU_FL_FP16))\n+   && ARM_FPU_FSET_HAS (TARGET_FPU_FEATURES, FPU_FL_NEON)\t\t\\\n+   && ARM_FPU_FSET_HAS (TARGET_FPU_FEATURES, FPU_FL_FP16))\n \n /* FPU supports VFP half-precision floating-point.  */\n #define TARGET_FP16\t\t\t\t\t\t\t\\"}, {"sha": "4049f104c6d5fd8bfd8f68ecdfae6a3d34d4333f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -6551,7 +6551,7 @@\n (define_insn \"*arm32_movhf\"\n   [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=r,m,r,r\")\n \t(match_operand:HF 1 \"general_operand\"\t   \" m,r,r,F\"))]\n-  \"TARGET_32BIT && !(TARGET_HARD_FLOAT && TARGET_FP16)\n+  \"TARGET_32BIT && !(TARGET_HARD_FLOAT && TARGET_VFP)\n    && (\t  s_register_operand (operands[0], HFmode)\n        || s_register_operand (operands[1], HFmode))\"\n   \"*"}, {"sha": "9750ba16260af5a10defc7cfcecd5e8f78039205", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -268,7 +268,8 @@\n (define_insn \"*movhf_vfp\"\n   [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=r,m,t,r,t,r,r\")\n \t(match_operand:HF 1 \"general_operand\"\t   \" m,r,t,r,r,t,F\"))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FP16 && !TARGET_NEON_FP16\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP\n+   && !TARGET_NEON_FP16\n    && (   s_register_operand (operands[0], HFmode)\n        || s_register_operand (operands[1], HFmode))\"\n   \"*"}, {"sha": "1598857f712c193acb4e6e77c9298545f5cf1181", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -1,3 +1,19 @@\n+2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* g++.dg/ext/arm-fp16/fp16-param-1.c: Update expected output.  Add\n+\ttest for __ARM_FP16_ARGS.\n+\t* g++.dg/ext/arm-fp16/fp16-return-1.c: Update expected output.\n+\t* gcc.target/arm/aapcs/neon-vect10.c: New.\n+\t* gcc.target/arm/aapcs/neon-vect9.c: New.\n+\t* gcc.target/arm/aapcs/vfp18.c: New.\n+\t* gcc.target/arm/aapcs/vfp19.c: New.\n+\t* gcc.target/arm/aapcs/vfp20.c: New.\n+\t* gcc.target/arm/aapcs/vfp21.c: New.\n+\t* gcc.target/arm/fp16-aapcs-1.c: New.\n+\t* g++.target/arm/fp16-param-1.c: Update expected output.  Add\n+\ttest for __ARM_FP16_ARGS.\n+\t* g++.target/arm/fp16-return-1.c: Update expected output.\n+\n 2016-05-16  Jiong Wang  <jiong.wang@arm.com>\n \n \tPR testsuite/70227"}, {"sha": "e89da154c82c647b0c2f7577a06c77e2e9ae3785", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/fp16-param-1.C", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-param-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-param-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-param-1.C?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -1,10 +1,14 @@\n /* { dg-do compile { target arm*-*-* } } */\n /* { dg-options \"-mfp16-format=ieee\" } */\n \n-/* Functions cannot have parameters of type __fp16.  */\n-extern void f (__fp16);\t\t/* { dg-error \"parameters cannot have __fp16 type\" } */\n-extern void (*pf) (__fp16);\t/* { dg-error \"parameters cannot have __fp16 type\" } */\n+/* Test that the ACLE macro is defined.  */\n+#if __ARM_FP16_ARGS != 1\n+#error Unexpected value for __ARM_FP16_ARGS\n+#endif\n+\n+/* Test that __fp16 is supported as a parameter type.  */\n+extern void f (__fp16);\n+extern void (*pf) (__fp16);\n \n-/* These should be OK.  */\n extern void g (__fp16 *);\n extern void (*pg) (__fp16 *);"}, {"sha": "b96532d18332410725ac151c2892e751efd304bf", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/fp16-return-1.C", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-return-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-return-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-return-1.C?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -1,10 +1,9 @@\n /* { dg-do compile { target arm*-*-* } } */\n /* { dg-options \"-mfp16-format=ieee\" } */\n \n-/* Functions cannot return type __fp16.  */\n-extern __fp16 f (void);\t\t/* { dg-error \"cannot return __fp16\" } */\n-extern __fp16 (*pf) (void);\t/* { dg-error \"cannot return __fp16\" } */\n+/* Test that __fp16 is supported as a return type.  */\n+extern __fp16 f (void);\n+extern __fp16 (*pf) (void);\n \n-/* These should be OK.  */\n extern __fp16 *g (void);\n extern __fp16 *(*pg) (void);"}, {"sha": "680a3b560d709b309050a1e335aa0f51947903e1", "filename": "gcc/testsuite/gcc.target/arm/aapcs/neon-vect10.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect10.c?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -0,0 +1,31 @@\n+/* Test AAPCS layout (VFP variant for Neon types) */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok } */\n+/* { dg-add-options arm_neon_fp16 } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define NEON\n+#define TESTFILE \"neon-vect10.c\"\n+#include \"neon-constants.h\"\n+\n+#include \"abitest.h\"\n+#else\n+\n+ARG (int32x4_t, i32x4_constvec2, Q0) /* D0, D1.  */\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 3.0f, S4 + 2) /* D2, Q1.  */\n+#else\n+ARG (__fp16, 3.0f, S4) /* D2, Q1.  */\n+#endif\n+ARG (int32x4x2_t, i32x4x2_constvec1, Q2) /* Q2, Q3 - D4-D6 , s5-s12.  */\n+ARG (double, 12.0, D3) /* Backfill this particular argument.  */\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 5.0f, S5 + 2) /* Backfill in S5.  */\n+#else\n+ARG (__fp16, 5.0f, S5) /* Backfill in S5.  */\n+#endif\n+ARG (int32x4x2_t, i32x4x2_constvec2, STACK)\n+LAST_ARG (int, 3, R0)\n+#endif"}, {"sha": "fc2b13bf1b77df308067a4a5f6e43d3d61405888", "filename": "gcc/testsuite/gcc.target/arm/aapcs/neon-vect9.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect9.c?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -0,0 +1,23 @@\n+/* Test AAPCS layout (VFP variant for Neon types) */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok } */\n+/* { dg-add-options arm_neon_fp16 } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define NEON\n+#define TESTFILE \"neon-vect9.c\"\n+#include \"neon-constants.h\"\n+\n+#include \"abitest.h\"\n+#else\n+\n+ARG (int32x4_t, i32x4_constvec2, Q0) /* D0, D1.  */\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 3.0f, S4 + 2) /* D2, Q1 occupied.  */\n+#else\n+ARG (__fp16, 3.0f, S4) /* D2, Q1 occupied.  */\n+#endif\n+LAST_ARG (int, 3, R0)\n+#endif"}, {"sha": "225e9ce7c108f0369b9b5ae2a6e24435c76c8a1a", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp18.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp18.c?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -0,0 +1,27 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target arm_eabi } }  */\n+/* { dg-require-effective-target arm_neon_fp16_ok } */\n+/* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard -mfp16-format=ieee\" } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"vfp18.c\"\n+#include \"abitest.h\"\n+\n+#else\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 1.0f, S0 + 2)\n+#else\n+ARG (__fp16, 1.0f, S0)\n+#endif\n+ARG (float, 2.0f, S1)\n+ARG (double, 4.0, D1)\n+ARG (float, 2.0f, S4)\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 1.0f, S5 + 2)\n+#else\n+ARG (__fp16, 1.0f, S5)\n+#endif\n+LAST_ARG (int, 3, R0)\n+#endif"}, {"sha": "8928b1562e995804fae26d6c6ca9e78a8862627f", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp19.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp19.c?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -0,0 +1,29 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok } */\n+/* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard -mfp16-format=ieee\" } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"vfp19.c\"\n+\n+__complex__ x = 1.0+2.0i;\n+\n+#include \"abitest.h\"\n+#else\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 1.0f, S0 + 2)\n+#else\n+ARG (__fp16, 1.0f, S0)\n+#endif\n+ARG (float, 2.0f, S1)\n+ARG (__complex__ double, x, D1)\n+ARG (float, 3.0f, S6)\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 2.0f, S7 + 2)\n+#else\n+ARG (__fp16, 2.0f, S7)\n+#endif\n+LAST_ARG (int, 3, R0)\n+#endif"}, {"sha": "61f07049f2cf59e28a4faee2dad5a07267cb5eb8", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp20.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp20.c?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -0,0 +1,21 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok } */\n+/* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard -mfp16-format=ieee\" } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"vfp20.c\"\n+\n+#define PCSATTR __attribute__((pcs(\"aapcs\")))\n+\n+#include \"abitest.h\"\n+#else\n+ARG (float, 1.0f, R0)\n+ARG (double, 2.0, R2)\n+ARG (float, 3.0f, STACK)\n+ARG (__fp16, 2.0f, STACK+4)\n+LAST_ARG (double, 4.0, STACK+8)\n+#endif\n+"}, {"sha": "15dff7d19f8aa6e5268b301194c2142dddcebc2f", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp21.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp21.c?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -0,0 +1,25 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok } */\n+/* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard -mfp16-format=ieee\" } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"vfp21.c\"\n+\n+#define PCSATTR __attribute__((pcs(\"aapcs\")))\n+\n+#include \"abitest.h\"\n+#else\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 1.0f, R0 + 2)\n+#else\n+ARG (__fp16, 1.0f, R0)\n+#endif\n+ARG (double, 2.0, R2)\n+ARG (__fp16, 3.0f, STACK)\n+ARG (float, 2.0f, STACK+4)\n+LAST_ARG (double, 4.0, STACK+8)\n+#endif\n+"}, {"sha": "5eab3e2ca783c8a878a7b5d0c42a75a0e1572d5f", "filename": "gcc/testsuite/gcc.target/arm/fp16-aapcs-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-aapcs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-aapcs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-aapcs-1.c?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile }  */\n+/* { dg-require-effective-target arm_fp16_ok } */\n+/* { dg-options \"-mfp16-format=ieee -O2\" }  */\n+/* { dg-add-options arm_fp16 } */\n+\n+/* Test __fp16 arguments and return value in registers.  */\n+\n+__fp16 F (__fp16 a, __fp16 b, __fp16 c)\n+{\n+  if (a == b)\n+    return c;\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler-times {vcvtb\\.f32\\.f16\\ts[0-9]+, s0} 1 } }  */\n+/* { dg-final { scan-assembler-times {vcvtb\\.f32\\.f16\\ts[0-9]+, s1} 1 } }  */\n+/* { dg-final { scan-assembler-times {vmov\\ts0, r[0-9]+} 1 } }  */"}, {"sha": "9c527301c449f30aacf25fe942ca419b0a313787", "filename": "gcc/testsuite/gcc.target/arm/fp16-param-1.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-param-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-param-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-param-1.c?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -1,10 +1,14 @@\n /* { dg-do compile } */\n /* { dg-options \"-mfp16-format=ieee\" } */\n \n-/* Functions cannot have parameters of type __fp16.  */\n-extern void f (__fp16);\t\t/* { dg-error \"parameters cannot have __fp16 type\" } */\n-extern void (*pf) (__fp16);\t/* { dg-error \"parameters cannot have __fp16 type\" } */\n+/* Test that the ACLE macro is defined.  */\n+#if __ARM_FP16_ARGS != 1\n+#error Unexpected value for __ARM_FP16_ARGS\n+#endif\n+\n+/* Test that __fp16 is supported as a parameter type.  */\n+extern void f (__fp16);\n+extern void (*pf) (__fp16);\n \n-/* These should be OK.  */\n extern void g (__fp16 *);\n extern void (*pg) (__fp16 *);"}, {"sha": "f97a8d7f585ec1d184dbc85d475f08056fd5be35", "filename": "gcc/testsuite/gcc.target/arm/fp16-return-1.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-return-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b81a1c1bd5355d8b5405825b4478078e76fd906/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-return-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-return-1.c?ref=1b81a1c1bd5355d8b5405825b4478078e76fd906", "patch": "@@ -1,10 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mfp16-format=ieee\" } */\n \n-/* Functions cannot return type __fp16.  */\n-extern __fp16 f (void);\t\t/* { dg-error \"cannot return __fp16\" } */\n-extern __fp16 (*pf) (void);\t/* { dg-error \"cannot return __fp16\" } */\n+/* Test that __fp16 is supported as a return type.  */\n+extern __fp16 f (void);\n+extern __fp16 (*pf) (void);\n \n-/* These should be OK.  */\n extern __fp16 *g (void);\n extern __fp16 *(*pg) (void);"}]}