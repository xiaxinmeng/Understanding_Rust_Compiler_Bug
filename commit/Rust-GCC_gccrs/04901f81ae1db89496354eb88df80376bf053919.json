{"sha": "04901f81ae1db89496354eb88df80376bf053919", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5MDFmODFhZTFkYjg5NDk2MzU0ZWI4OGRmODAzNzZiZjA1MzkxOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2007-11-17T01:11:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2007-11-17T01:11:43Z"}, "message": "howto.html, [...]: Fix typos and anachronisms.\n\n2007-11-17  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* docs/html/17_intro/howto.html, docs/html/21_strings/howto.html,\n\tdocs/html/22_locale/codecvt.html, docs/html/23_containers/howto.html,\n\tdocs/html/27_io/howto.html, docs/html/ext/howto.html,\n\tdocs/html/debug.html,  docs/html/install.html,\n\tdocs/html/faq/index.html: Fix typos and anachronisms.\n\nFrom-SVN: r130255", "tree": {"sha": "cef09f87f32327e68a8544205e6d40df09eb45ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cef09f87f32327e68a8544205e6d40df09eb45ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04901f81ae1db89496354eb88df80376bf053919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04901f81ae1db89496354eb88df80376bf053919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04901f81ae1db89496354eb88df80376bf053919", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04901f81ae1db89496354eb88df80376bf053919/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478b2b9cb3fc61cdc600175bef545ffd05b58ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478b2b9cb3fc61cdc600175bef545ffd05b58ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/478b2b9cb3fc61cdc600175bef545ffd05b58ac1"}], "stats": {"total": 187, "additions": 112, "deletions": 75}, "files": [{"sha": "95fbeae6c0268386970ebeab9294d912100087c9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=04901f81ae1db89496354eb88df80376bf053919", "patch": "@@ -1,3 +1,11 @@\n+2007-11-17  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* docs/html/17_intro/howto.html, docs/html/21_strings/howto.html,\n+\tdocs/html/22_locale/codecvt.html, docs/html/23_containers/howto.html,\n+\tdocs/html/27_io/howto.html, docs/html/ext/howto.html,\n+\tdocs/html/debug.html,  docs/html/install.html,\n+\tdocs/html/faq/index.html: Fix typos and anachronisms.\n+\n 2007-11-16  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_algobase.h (struct __lexicographical_compare):"}, {"sha": "d3bd6dfe393d0802331034d46c8ad1fa4ea4a8bf", "filename": "libstdc++-v3/docs/html/17_intro/howto.html", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html?ref=04901f81ae1db89496354eb88df80376bf053919", "patch": "@@ -169,10 +169,10 @@ <h2><a name=\"2.5\">Namespace <code>std::</code></a></h2>\n used, and usually enhanced, by strategic use of typedefs. (In the\n cases where the qualified verbage becomes unweidly.)\n \t  </p></li>\n-</ul>\n+</ul></div>\n \n <hr />\n-<h2><a name=\"2.6\">Using namespace composition</code></a></h2>\n+<h2><a name=\"2.6\">Using namespace composition</a></h2>\n \n <p>\n \t<a href=\"http://gtkmm.sourceforge.net\" target=\"_top\">Gtk--</a> defines\n@@ -182,12 +182,14 @@ <h2><a name=\"2.6\">Using namespace composition</code></a></h2>\n \tyou put a <span class=\"emphasis\"><i>using</i></span>-declaration into a\n \tnamespace-definition: the imported symbol(s) gets imported into the\n \tcurrently active namespace(s). For example:\n+</p>\n \t<pre class=\"programlisting\">\n \t  namespace Gtk {\n \t  using std::string;\n \t  class Window { ... }\n \t  }\n \t</pre>\n+<p>\n \tIn this example, <code>std::string</code> gets imported into\n \tnamespace Gtk::.  The result is that you don't have to use\n \t<code>std::string</code> in this header, but still\n@@ -210,7 +212,7 @@ <h2><a name=\"3\">The Standard C++ library and multithreading</a></h2>\n       library.  This information is GCC-specific since the C++\n       standard does not address matters of multithreaded applications.\n       Unless explicitly prefaced, all information in this section is\n-      current as of the GCC 3.0 release and all later point releases.\n+      relevant to the GCC 3.0 release and all later releases.\n    </p>\n    <p>Earlier GCC releases had a somewhat different approach to\n       threading configuration and proper compilation.  Before GCC 3.0,\n@@ -257,13 +259,13 @@ <h2><a name=\"3\">The Standard C++ library and multithreading</a></h2>\n       AFAIK, none of this is properly documented anywhere other than\n       in ``gcc -dumpspecs'' (look at lib and cpp entries).\n    </p>\n-   <p>See <a href=\"../faq/index.html#3\">FAQ</a> (general overview), <a\n+   <p>See <a href=\"../faq/index.html#5_6\">FAQ</a> (general overview), <a\n       href=\"../23_containers/howto.html#3\">23</a> (containers), and <a\n       href=\"../27_io/howto.html#9\">27</a> (I/O) for more information.\n    </p>\n-   <p>The libstdc++ library (unlike libstdc++-v2, all of it, not\n-      just the STL) has been designed so that multithreaded\n-      applications using it may be written.  The first problem is\n+   <p>The libstdc++ library has been designed so that it can be used in\n+      multithreaded applications (with libstdc++-v2 this was\n+      only true of the STL parts.)  The first problem is\n       finding a <em>fast</em> method of implementation portable to all\n       platforms.  Due to historical reasons, some of the library is\n       written against per-CPU-architecture spinlocks and other parts\n@@ -274,7 +276,8 @@ <h2><a name=\"3\">The Standard C++ library and multithreading</a></h2>\n       href=\"http://www.sgi.com/tech/stl/thread_safety.html\">same\n       definition that SGI</a> uses for their STL subset.  However, the\n       exception for read-only containers only applies to the STL\n-      components.\n+      components. This definition is widely-used and something similar\n+      will be used in the next version of the C++ standard library.\n    </p>\n    <p>Here is a small link farm to threads (no pun) in the mail archives\n       that discuss the threading problem.  Each link is to the first\n@@ -482,7 +485,7 @@ <h2><a name=\"6\">Macros for libstdc++</a></h2>\n     default. When defined, memory allocation and allocators controlled\n     by libstdc++ call operator new/delete without caching and\n     pooling. Configurable via\n-    <code>--enable-libstdcxx-allocator</code>. ABI-changing.</a>\n+    <code>--enable-libstdcxx-allocator</code>. ABI-changing.\n     </dd>\n \n "}, {"sha": "d5cd24d4ddb633df4f3e2e2a104b807daade58a8", "filename": "libstdc++-v3/docs/html/21_strings/howto.html", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html?ref=04901f81ae1db89496354eb88df80376bf053919", "patch": "@@ -380,7 +380,7 @@ <h2><a name=\"5\">Making strings of arbitrary character types</a></h2>\n    </p>\n    <p>That's the theory.  Remember however that basic_string has additional\n       type parameters, which take default arguments based on the character\n-      type (called CharT here):\n+      type (called <code>CharT</code> here):\n    </p>\n    <pre>\n       template &lt;typename CharT,\n@@ -405,10 +405,7 @@ <h2><a name=\"5\">Making strings of arbitrary character types</a></h2>\n    <p>and functions such as char_traits&lt;CharT&gt;::foo() are not\n       actually defined anywhere for the general case.  The C++ standard\n       permits this, because writing such a definition to fit all possible\n-      CharT's cannot be done.  (For a time, in earlier versions of GCC,\n-      there was a mostly-correct implementation that let programmers be\n-      lazy.  :-)  But it broke under many situations, so it was removed.\n-      You are no longer allowed to be lazy and non-portable.)\n+      CharT's cannot be done.\n    </p>\n    <p>The C++ standard also requires that char_traits be specialized for\n       instantiations of <code>char</code> and <code>wchar_t</code>, and it\n@@ -417,16 +414,22 @@ <h2><a name=\"5\">Making strings of arbitrary character types</a></h2>\n    </p>\n    <p>If you want to use character types other than char and wchar_t,\n       such as <code>unsigned char</code> and <code>int</code>, you will\n-      need to write specializations for them at the present time.  If you\n-      want to use your own special character class, then you have\n+      need suitable specializations for them.  For a time, in earlier\n+      versions of GCC, there was a mostly-correct implementation that\n+      let programmers be lazy but it broke under many situations, so it\n+      was removed.  GCC 3.4 introduced a new implementation that mostly\n+      works and can be specialized even for <code>int</code> and other\n+      built-in types.\n+   </p>\n+   <p>If you want to use your own special character class, then you have\n       <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00163.html\">a lot\n       of work to do</a>, especially if you with to use i18n features\n       (facets require traits information but don't have a traits argument).\n    </p>\n-   <p>One example of how to specialize char_traits is given <a\n-      href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00260.html\">in\n-      this message</a>, which was then put into the file <code>\n-      include/ext/pod_char_traits.h</code> at a later date.  We agree\n+   <p>Another example of how to specialize char_traits was given <a\n+      href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00260.html\">on the\n+      mailing list</a> and at a later date was put into the file <code>\n+      include/ext/pod_char_traits.h</code>.  We agree\n       that the way it's used with basic_string (scroll down to main())\n       doesn't look nice, but that's because <a\n       href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00236.html\">the\n@@ -435,11 +438,6 @@ <h2><a name=\"5\">Making strings of arbitrary character types</a></h2>\n       be conforming C++</a>, due to the rule that CharT must be a POD.\n       (See how tricky this is?)\n    </p>\n-   <p>Other approaches were suggested in that same thread, such as providing\n-      more specializations and/or some helper types in the library to assist\n-      users writing such code.  So far nobody has had the time...\n-      <a href=\"../17_intro/contribute.html\">do you?</a>\n-   </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>"}, {"sha": "c760c098b5cc84173e28b1c4aa920b78d76f51ef", "filename": "libstdc++-v3/docs/html/22_locale/codecvt.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fcodecvt.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fcodecvt.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fcodecvt.html?ref=04901f81ae1db89496354eb88df80376bf053919", "patch": "@@ -203,7 +203,7 @@ <h2>\n </li>\n \n <li>\n- Some encodings are require explicit endian-ness. As such, some kind\n+ Some encodings require explicit endian-ness. As such, some kind\n   of endian marker or other byte-order marker will be necessary. See\n   &quot;Footnotes for C/C++ developers&quot; in Haible for more information on\n   UCS-2/Unicode endian issues. (Summary: big endian seems most likely,"}, {"sha": "c4b6eb856f5827bd8c04256a69c50bdf26ac28ba", "filename": "libstdc++-v3/docs/html/23_containers/howto.html", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html?ref=04901f81ae1db89496354eb88df80376bf053919", "patch": "@@ -284,11 +284,13 @@ <h2><a name=\"4\">&quot;Hinting&quot; during insertion</a></h2>\n    <pre>\n       a.insert(p,t);</pre>\n    <p>where 'p' is an iterator into the container 'a', and 't' is the item\n-      to insert.  The standard says that &quot;iterator p is a hint\n-      pointing to where the insert should start to search,&quot; but\n-      specifies nothing more.  (LWG Issue #233, currently in review,\n-      addresses this topic, but I will ignore it here because it is not yet\n-      finalized.)\n+      to insert.  The standard says that &quot;<code>t</code> is inserted\n+      as close as possible to the position just prior to\n+      <code>p</code>.&quot; (Library DR #233 addresses this topic, referring to\n+      <a href='http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1780.html'>N1780</a>.\n+      Since version 4.2 GCC implements the resolution to DR 233, so that\n+      insertions happen as close as possible to the hint. For earlier releases\n+      the hint was only used as described below.\n    </p>\n    <p>Here we'll describe how the hinting works in the libstdc++\n       implementation, and what you need to do in order to take advantage of\n@@ -342,21 +344,17 @@ <h2><a name=\"4\">&quot;Hinting&quot; during insertion</a></h2>\n       <code>map</code> and <code>set</code> classes.  You should not use a hint\n       argument in those releases.)\n    </p>\n-   <p>This behavior goes well with other container's <code>insert()</code>\n+   <p>This behavior goes well with other containers' <code>insert()</code>\n       functions which take an iterator:  if used, the new item will be\n       inserted before the iterator passed as an argument, same as the other\n-      containers.  The exception\n-      (in a sense) is with a hint of <code>end()</code>:  the new item will\n-      actually be inserted after <code>end()</code>, but it also becomes the\n-      new <code>end()</code>.\n+      containers. \n    </p>\n    <p><strong>Note </strong> also that the hint in this implementation is a\n-      one-shot.  The insertion-with-hint routines check the immediately\n+      one-shot.  The older insertion-with-hint routines check the immediately\n       surrounding entries to ensure that the new item would in fact belong\n       there.  If the hint does not point to the correct place, then no\n       further local searching is done; the search begins from scratch in\n-      logarithmic time.  (Further local searching would only increase the\n-      time required when the hint is too far off.)\n+      logarithmic time.\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>."}, {"sha": "46d03b34630efd254bf858f22b1cc61549278610", "filename": "libstdc++-v3/docs/html/27_io/howto.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html?ref=04901f81ae1db89496354eb88df80376bf053919", "patch": "@@ -306,7 +306,7 @@ <h2><a name=\"3\">Binary I/O</a></h2>\n       those end-of-line and end-of-file problems that we mentioned before.\n       An instructive thread from comp.lang.c++.moderated delved off into\n       this topic starting more or less at\n-      <a href=\"http://groups.google.com/groups?oi=djq&selm=an_436187505\">this</a>\n+      <a href=\"http://groups.google.com/groups?oi=djq&amp;selm=an_436187505\">this</a>\n       article and continuing to the end of the thread.  (You'll have to\n       sort through some flames every couple of paragraphs, but the points\n       made are good ones.)\n@@ -756,7 +756,7 @@ <h2><a name=\"11\">Using FILE*s and file descriptors with IOStreams</a></h2>\n          descriptor, and provides the <code>fd()</code> function.\n      </li>\n    </ul>\n-   <p>If you want to access a <code>filebuf</code>s file descriptor to\n+   <p>If you want to access a <code>filebuf</code>'s file descriptor to\n       implement file locking (e.g. using the <code>fcntl()</code> system\n       call) then you might be interested in Henry Suter's\n       <a href=\"http://suter.home.cern.ch/suter/RWLock.html\">RWLock</a>"}, {"sha": "61c6a8ba17b9a620366c2462518b66ed226beb3a", "filename": "libstdc++-v3/docs/html/debug.html", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html?ref=04901f81ae1db89496354eb88df80376bf053919", "patch": "@@ -306,7 +306,7 @@ <h4 class=\"left\">Debug mode semantics</h4>\n <p>The following library components provide extra debugging\n   capabilities in debug mode:</p>\n <ul>\n-  <li><code>std::basic_string</code> (no safe iterators)</li>\n+  <li><code>std::basic_string</code> (no safe iterators and see note below)</li>\n   <li><code>std::bitset</code></li>\n   <li><code>std::deque</code></li>\n   <li><code>std::list</code></li>\n@@ -321,6 +321,23 @@ <h4 class=\"left\">Debug mode semantics</h4>\n   <li><code>std::unordered_multiset</code></li>\n </ul>\n \n+<p>N.B. although there are precondition checks for some string operations,\n+e.g.  <code>operator[]</code>,\n+they will not always be run when using the <code>char</code> and\n+<code>wchar_t</code> specialisations (<code>std::string</code> and\n+<code>std::wstring</code>).  This is because libstdc++ uses GCC's\n+<code>extern template</code> extension to provide explicit instantiations\n+of <code>std::string</code> and <code>std::wstring</code>, and those\n+explicit instantiations don't include the debug-mode checks.  If the\n+containing functions are inlined then the checks will run, so compiling\n+with <code>-O1</code> might be enough to enable them.  Alternatively\n+<code>-D_GLIBCXX_EXTERN_TEMPLATE=0</code> will suppress the declarations\n+of the explicit instantiations and cause the functions to be instantiated\n+with the debug-mode checks included, but this is unsupported and not\n+guaranteed to work.  For full debug-mode support you can use the\n+<code>__gnu_debug::basic_string</code> debugging container directly,\n+which always works correctly.\n+</p>\n \n <h3 class=\"left\"><a name=\"mem\">Tips for memory leak hunting</a></h3>\n \n@@ -339,9 +356,9 @@ <h3 class=\"left\"><a name=\"mem\">Tips for memory leak hunting</a></h3>\n    thing of great importance to keep in mind when debugging C++ code\n    that uses <code>new</code> and <code>delete</code>:\n    there are different kinds of allocation schemes that can be used by\n-   <code> std::allocator </code>. For implementation details, see this\n-   <a href=\"ext/howto.html#3\"> document</a> and look specifically for\n-   <code>GLIBCXX_FORCE_NEW</code>. \n+   <code> std::allocator </code>. For implementation details, see the\n+   <a href=\"ext/mt_allocator.html\">mt allocator</a> documentation and\n+   look specifically for <code>GLIBCXX_FORCE_NEW</code>. \n </p>\n \n <p>In a nutshell, the default allocator used by <code>"}, {"sha": "cb0a74e46871f16e0a1f0919c17fe1c8493bd2fd", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=04901f81ae1db89496354eb88df80376bf053919", "patch": "@@ -114,8 +114,7 @@ <h2><a name=\"1\">Ropes and trees and hashes, oh my!</a></h2>\n    <p>(Side note:  for those of you wondering, <strong>&quot;Why wasn't a hash\n       table included in the Standard in the first #!$@ place?&quot;</strong>\n       I'll give a quick answer:  it was proposed, but too late and in too\n-      unorganized a fashion.  Some sort of hashing will undoubtedly be\n-      included in a future Standard.)\n+      unorganized a fashion.)\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n@@ -137,6 +136,8 @@ <h2><a name=\"2\">Added members and types</a></h2>\n      <li>Extensions allowing <code>filebuf</code>s to be constructed from\n          stdio types are described in the\n          <a href=\"../27_io/howto.html#11\">chapter 27 notes</a>.</li>\n+     <li>The C++ Standard Library Technical Report adds many new features\n+         to the library, see <a href=\"../faq/index.html#5_5\">FAQ 5.5</a>.</li>\n    </ul>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n@@ -423,8 +424,8 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dt><a href=\"lwg-defects.html#241\">241</a>:\n         <em>Does unique_copy() require CopyConstructible and Assignable?</em>\n     </dt>\n-    <dd>Add an helper for forward_iterator/output_iterator, fix the existing\n-        one for input_iterator/output_iterator not to rely on Assignability.\n+    <dd>Add a helper for forward_iterator/output_iterator, fix the existing\n+        one for input_iterator/output_iterator to not rely on Assignability.\n     </dd>\n \n     <dt><a href=\"lwg-defects.html#243\">243</a>:\n@@ -639,7 +640,7 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     </dd>\n \n     <dt><a href=\"lwg-active.html#695\">695</a>:\n-        <em>ctype<char>::classic_table() not accessible</em>\n+        <em>ctype&lt;char&gt;::classic_table() not accessible</em>\n     </dt>\n     <dd>Make the member functions table and classic_table public.\n     </dd>"}, {"sha": "e353a1f2f52c3fa17ae49e988c836d00a407a70b", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=04901f81ae1db89496354eb88df80376bf053919", "patch": "@@ -100,6 +100,7 @@ <h1>Questions</h1>\n            <li><a href=\"#4_4_dlsym\">program crashes when using library code\n                                in a dynamically-loaded library</a> </li>\n            <li><a href=\"#4_4_leak\">\"memory leaks\" in containers</a> </li>\n+           <li><a href=\"#4_4_list_size\">list::size() is O(n)!</a> </li>\n          </ul>\n          </li>\n          <li><a href=\"#4_5\">Aw, that's easy to fix!</a> </li>\n@@ -278,22 +279,25 @@ <h2><a name=\"2_1\">2.1 How do I install libstdc++?</a></h2>\n          an installation document), but the tools required are few:\n       </p>\n          <ul>\n-            <li> A 3.x release of GCC.  Note that building GCC is much\n-                 easier and more automated than building the GCC 2.[78]\n-                 series was.  If you are using GCC 2.95, you can still\n-                 build earlier snapshots of libstdc++.\n+            <li> A 3.x or later release of GCC.  Either install a suitable\n+                 package for your system, or compile GCC from the sources.\n+                 Note that building GCC\n+                 is much easier and more automated than building the GCC\n+                 2.[78] series was.  If you are using GCC 2.95, you can\n+                 still build earlier snapshots of libstdc++ but you\n+                 should consult the documentation that comes with the\n+                 sources, the instructions are no longer included here.\n             </li>\n-            <li> GNU Make is required for GCC 3.4 and later.\n+            <li> GNU Make is required to build GCC 3.4 and later.\n             </li>\n             <li> The GNU Autotools are needed if you are messing with\n                  the configury or makefiles.\n             </li>\n          </ul>\n-      <p>The file <a href=\"../documentation.html\">documentation.html</a>\n-         provides a good overview of the steps necessary to build, install,\n+      <p>The file <a href=\"../documentation.html#2\">documentation.html</a>\n+         links to documentation of the steps necessary to build, install,\n          and use the library.  Instructions for configuring the library\n-         with new flags such as --enable-threads are there also, as well as\n-         patches and instructions for working with GCC 2.95.\n+         with flags such as --enable-threads are there also.\n       </p>\n       <p>The top-level install.html file contains\n          the exact build and installation instructions.  You may wish to\n@@ -794,6 +798,10 @@ <h3><a name=\"4_4_interface\">The g++-3 headers are <em>not ours</em></a></h3>\n          first.\n       </p>\n \n+      <p><a name=\"4_4_list_size\"><strong>list::size() is O(n)!</strong></a>\n+         See the <a href='../23_containers/howto.html#6'>Containers</a>\n+         chapter.\n+      </p>\n <hr />\n    <h2><a name=\"4_5\">4.5 Aw, that's easy to fix!</a></h2>\n       <p>If you have found a bug in the library and you think you have\n@@ -851,10 +859,12 @@ <h2><a name=\"5_2\">5.2 What's next after libstdc++?</a></h2>\n          resolution specifies.  Those additions are listed in\n          <a href=\"../ext/howto.html#5\">the extensions page</a>.\n       </p></li>\n-      <li><p>Performance tuning.  Lots of performance tuning.  This too is\n-         already underway for post-3.0 releases, starting with memory\n-         expansion in container classes and buffer usage in synchronized\n-         stream objects.\n+      <li><p>Performance tuning.  Lots of performance tuning was done for the\n+         3.x releases, including memory expansion in container classes and\n+         buffer usage in synchronized stream objects.\n+         Later performance-related work includes \"move semantics\"\n+         for containers and (optional) non-reference-counted strings (which\n+         can give performance benefits for multithreaded programs.)\n       </p></li>\n       <li><p>An ABI for libstdc++ is being developed, so that\n          multiple binary-incompatible copies of the library can be replaced\n@@ -933,7 +943,7 @@ <h2><a name=\"5_4\">5.4 Extensions and Backward Compatibility</a></h2>\n         namespace extension { using ::hash_map; }; // inherit globals\n       #else\n         #include &lt;backward/hash_map&gt;\n-        #if __GNUC_MINOR__ == 0\n+        #if __GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ == 0\n           namespace extension = std;               // GCC 3.0\n         #else\n           namespace extension = ::__gnu_cxx;       // GCC 3.1 and later\n@@ -1110,6 +1120,9 @@ <h2><a name=\"5_7\">5.7 How do I get a copy of the ISO C++ Standard?</a></h2>\n       <p>Who is your country's member body?  Visit the\n          <a href=\"http://www.iso.ch/\">ISO homepage</a> and find out!\n       </p>\n+      <p>The 2003 version of the standard (the 1998 version plus TC1) is\n+         available in print, ISBN 0-470-84674-7.\n+      </p>\n \n <hr />\n    <h2><a name=\"5_8\">5.8 What's an ABI and why is it so messy?</a></h2>"}, {"sha": "3166ebc0a86ff4287b3be166940ca1217989ec34", "filename": "libstdc++-v3/docs/html/install.html", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04901f81ae1db89496354eb88df80376bf053919/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html?ref=04901f81ae1db89496354eb88df80376bf053919", "patch": "@@ -56,17 +56,16 @@ <h2><a name=\"prereqs\">Tools you will need beforehand</a></h2>\n       also lists the tools you will need if you wish to modify the source.\n    </p>\n \n-   <p>As of June 19, 2000, libstdc++ attempts to use tricky and\n-      space-saving features of the GNU toolchain, enabled with\n-      <code>-ffunction-sections -fdata-sections -Wl,--gc-sections</code>.\n-      To obtain maximum benefit from this, binutils after this date should\n-      also be used (bugs were fixed with C++ exception handling related\n-      to this change in libstdc++).  The version of these tools should\n-      be <code>2.10.90</code>, or later, and you can get snapshots (as\n-      well as releases) of binutils\n-      <a href=\"ftp://sources.redhat.com/pub/binutils\">here</a>. The\n-      configure process will automatically detect and use these features\n-      if the underlying support is present.\n+   <p>As of GCC 4.0.1 the minimum version of binutils required to build\n+      libstdc++ is <code>2.15.90.0.1.1</code>. You can get snapshots\n+      (as well as releases) of binutils from\n+      <a href=\"ftp://sources.redhat.com/pub/binutils\">\n+      ftp://sources.redhat.com/pub/binutils</a>.\n+      Older releases of libstdc++ do not require such a recent version,\n+      but to take full advantage of useful space-saving features and\n+      bug-fixes you should use a recent binutils if possible.\n+      The configure process will automatically detect and use these\n+      features if the underlying support is present.\n    </p>\n \n    <p>Finally, a few system-specific requirements: </p>"}]}