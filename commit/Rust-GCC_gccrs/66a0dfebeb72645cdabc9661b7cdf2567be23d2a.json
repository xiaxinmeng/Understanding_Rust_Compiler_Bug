{"sha": "66a0dfebeb72645cdabc9661b7cdf2567be23d2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZhMGRmZWJlYjcyNjQ1Y2RhYmM5NjYxYjdjZGYyNTY3YmUyM2QyYQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@redhat.com", "date": "2002-09-20T19:15:53Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2002-09-20T19:15:53Z"}, "message": "Fix -O3 stdarg miscompilation.\n\n\t* config/v850/v850.c (current_function_anonymous_args): Delete.\n\t(expand_prologue): Use current_function_args_info.anonymous_args.\n\t(expand_epilogue): Delete use of current_function_anonymous_args.\n\t* config/v850/v850.h (struct cum_arg): Add anonymous_args field.\n\t(INIT_CUMULATIVE_ARGS): Clear anonymous_args field.\n\t(current_function_anonymous_args): Delete extern declaration.\n\t(SETUP_INCOMING_VARARGS): Set anonymous_args field.\n\nFrom-SVN: r57363", "tree": {"sha": "a46c4de85703bc87397ddc44d8a056e0473daad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a46c4de85703bc87397ddc44d8a056e0473daad0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66a0dfebeb72645cdabc9661b7cdf2567be23d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66a0dfebeb72645cdabc9661b7cdf2567be23d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66a0dfebeb72645cdabc9661b7cdf2567be23d2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66a0dfebeb72645cdabc9661b7cdf2567be23d2a/comments", "author": null, "committer": null, "parents": [{"sha": "f51eee6af1e5d1ed24a317d27e67cb3261d68d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51eee6af1e5d1ed24a317d27e67cb3261d68d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51eee6af1e5d1ed24a317d27e67cb3261d68d4e"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "b4d1dcb06256c0c67639d154627176e91d2a39b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66a0dfebeb72645cdabc9661b7cdf2567be23d2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66a0dfebeb72645cdabc9661b7cdf2567be23d2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66a0dfebeb72645cdabc9661b7cdf2567be23d2a", "patch": "@@ -1,3 +1,13 @@\n+2002-09-20  Jim Wilson  <wilson@redhat.com>\n+\n+\t* config/v850/v850.c (current_function_anonymous_args): Delete.\n+\t(expand_prologue): Use current_function_args_info.anonymous_args.\n+\t(expand_epilogue): Delete use of current_function_anonymous_args.\n+\t* config/v850/v850.h (struct cum_arg): Add anonymous_args field.\n+\t(INIT_CUMULATIVE_ARGS): Clear anonymous_args field.\n+\t(current_function_anonymous_args): Delete extern declaration.\n+\t(SETUP_INCOMING_VARARGS): Set anonymous_args field.\n+\n 2002-09-20  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_prologue): Update for change"}, {"sha": "8029ecfd021c325ad6fa919241dd86edcf69c09f", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66a0dfebeb72645cdabc9661b7cdf2567be23d2a/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66a0dfebeb72645cdabc9661b7cdf2567be23d2a/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=66a0dfebeb72645cdabc9661b7cdf2567be23d2a", "patch": "@@ -61,9 +61,6 @@ static void v850_encode_data_area    PARAMS ((tree));\n static void v850_encode_section_info PARAMS ((tree, int));\n static const char *v850_strip_name_encoding PARAMS ((const char *));\n \n-/* True if the current function has anonymous arguments.  */\n-int current_function_anonymous_args;\n-\n /* Information about the various small memory areas.  */\n struct small_memory_info small_memory[ (int)SMALL_MEMORY_max ] =\n {\n@@ -1656,7 +1653,7 @@ expand_prologue ()\n     }\n \n   /* Save arg registers to the stack if necessary.  */\n-  else if (current_function_anonymous_args)\n+  else if (current_function_args_info.anonymous_args)\n     {\n       if (TARGET_PROLOG_FUNCTION)\n \t{\n@@ -2063,7 +2060,6 @@ Saved %d bytes via epilogue function (%d vs. %d) in function %s\\n\",\n \temit_jump_insn (gen_return ());\n     }\n \n-  current_function_anonymous_args = 0;\n   v850_interrupt_cache_p = FALSE;\n   v850_interrupt_p = FALSE;\n }"}, {"sha": "478cd53aefe0011ea0d1a4419eba5c8f8d09094e", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66a0dfebeb72645cdabc9661b7cdf2567be23d2a/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66a0dfebeb72645cdabc9661b7cdf2567be23d2a/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=66a0dfebeb72645cdabc9661b7cdf2567be23d2a", "patch": "@@ -713,7 +713,7 @@ enum reg_class\n    such as FUNCTION_ARG to determine where the next arg should go.  */\n \n #define CUMULATIVE_ARGS struct cum_arg\n-struct cum_arg { int nbytes; };\n+struct cum_arg { int nbytes; int anonymous_args; };\n \n /* Define where to put the arguments to a function.\n    Value is zero to push the argument on the stack,\n@@ -739,7 +739,7 @@ struct cum_arg { int nbytes; };\n    For a library call, FNTYPE is 0.  */\n \n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n- ((CUM).nbytes = 0)\n+ ((CUM).nbytes = 0, (CUM).anonymous_args = 0)\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE.\n@@ -758,10 +758,9 @@ struct cum_arg { int nbytes; };\n    space allocated by the caller.  */\n #define OUTGOING_REG_PARM_STACK_SPACE\n \n-extern int current_function_anonymous_args;\n /* Do any setup necessary for varargs/stdargs functions.  */\n #define SETUP_INCOMING_VARARGS(CUM, MODE, TYPE, PAS, SECOND) \\\n-  current_function_anonymous_args = (!TARGET_GHS ? 1 : 0);\n+  (CUM).anonymous_args = (!TARGET_GHS ? 1 : 0);\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\"}]}