{"sha": "00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBhZmNhYTA5ZThkYzY0MDAxNTJlODE2N2UyMjVlMGU5Yzc1YjllNg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2008-07-30T12:17:17Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2008-07-30T12:17:17Z"}, "message": "configure.ac: Add makefile fragments for hpux.\n\n2008-07-30  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* configure.ac: Add makefile fragments for hpux.\n\t* Makefile.def (flags_to_pass): Add ADA_CFLAGS.\n\t* Makefile.tpl (HOST_EXPORTS): Pass ADA_CFLAGS.\n\t* configure: Regenerate.\n\t* Makefile.in: Regenerate.\n\nconfig:\n2008-07-30  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* mh-pa: New, from gcc/config/pa/x-ada.\n\t* mh-pa-hpux10: New, from gcc/config/pa/x-ada-hpux10.\n\ngcc:\n2008-07-30  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* configure.ac: Substitute ADA_CFLAGS.\n\t* configure: Regenerate.\n\t* config.host: Remove mention of pa/x-ada and pa/x-ada-hpux10 files.\n\t* Makefile.in: Remove mention of X_* variables.\n\t* config/pa/x-ada-hpux10: Remove.\n\t* config/pa/x-ada: Remove.\n\n\t* doc/fragments.texi: Update.\n\ngcc/ada:\n2008-07-30  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* gcc-interface/Make-lang.in (ALL_ADAFLAGS): Remove X_ADAFLAGS and\n\tT_ADAFLAGS, replace ALL_ADA_CFLAGS with ADA_CFLAGS.\n\t(ALL_ADA_CFLAGS): Remove, replace throughout with ADA_CFLAGS.\n\t* gcc-interface/Makefile.in (XCFLAGS, X_CFLAGS, X_CPPFLAGS, T_CPPFLAGS,\n\tX_ADA_CFLAGS, T_ADA_CFLAGS, X_ADAFLAGS, T_ADAFLAGS, ADA_CFLAGS,\n\tALL_ADA_CFLAGS): Remove.\n\t(ALL_ADAFLAGS, MOST_ADAFLAGS): Remove X_ADAFLAGS and T_ADAFLAGS,\n        replace ALL_ADA_CFLAGS with ADA_CFLAGS.\n\t(GCC_CFLAGS): Remove X_CFLAGS.\n\t(LOOSE_CFLAGS): Remove X_CFLAGS and XCFLAGS.\n\t(ALL_CPPFLAGS): Remove X_CPPFLAGS and T_CPPFLAGS.\n\t(ADA_CFLAGS): Substitute.\n\t\ngnattools:\n2008-07-30  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* configure.ac (x_ada_cflags): Remove.\n\t(ADA_CFLAGS): Substitute.\n\t* configure: Regenerate.\n\t* Makefile.in (ADA_CFLAGS): Substitute.\n\t(T_ADA_CFLAGS, X_ADA_CFLAGS, ALL_ADA_CFLAGS): Remove.\n\t(TOOLS_FLAGS_TO_PASS_1, TOOLS_FLAGS_TO_PASS_1re,\n\tTOOLS_FLAGS_TO_PASS_NATIVE, TOOLS_FLAGS_TO_PASS_CROSS):\n\tPass ADA_CFLAGS.\n\nFrom-SVN: r138301", "tree": {"sha": "d34a32f40438fc8ddcd9451e3bd7aab5b01049ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d34a32f40438fc8ddcd9451e3bd7aab5b01049ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd913357ff72b584d8401a8b00758029b648f03d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd913357ff72b584d8401a8b00758029b648f03d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd913357ff72b584d8401a8b00758029b648f03d"}], "stats": {"total": 232, "additions": 110, "deletions": 122}, "files": [{"sha": "c4400d65acb89019f0f7ca9fb5b1612c990f21f7", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -1,3 +1,11 @@\n+2008-07-30 Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* configure.ac: Add makefile fragments for hpux.\n+\t* Makefile.def (flags_to_pass): Add ADA_CFLAGS.\n+\t* Makefile.tpl (HOST_EXPORTS): Pass ADA_CFLAGS.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\n 2008-07-28 Aldy Hernandez <aldyh@redhat.com>\n \n \t* MAINTAINERS: Add Jakub and myself as gimple maintainers."}, {"sha": "832fc4236e9b878c154dbd341710b0f5a6e318c1", "filename": "Makefile.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -226,6 +226,7 @@ flags_to_pass = { flag= YACC ; };\n \n // Host tools\n flags_to_pass = { flag= ADAFLAGS ; optional=true ; };\n+flags_to_pass = { flag= ADA_CFLAGS ; };\n flags_to_pass = { flag= AR_FLAGS ; };\n flags_to_pass = { flag= BOOT_ADAFLAGS ; optional=true ; };\n flags_to_pass = { flag= BOOT_CFLAGS ; };"}, {"sha": "d9ef0681497579c218dea12335f0edc8eff87e7b", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -164,6 +164,7 @@ HOST_SUBDIR = @host_subdir@\n HOST_EXPORTS = \\\n \t$(BASE_EXPORTS) \\\n \tCC=\"$(CC)\"; export CC; \\\n+\tADA_CFLAGS=\"$(ADA_CFLAGS)\"; export ADA_CFLAGS; \\\n \tCFLAGS=\"$(CFLAGS)\"; export CFLAGS; \\\n \tCONFIG_SHELL=\"$(SHELL)\"; export CONFIG_SHELL; \\\n \tCXX=\"$(CXX)\"; export CXX; \\\n@@ -514,6 +515,7 @@ BASE_FLAGS_TO_PASS = \\\n \t\"SHELL=$(SHELL)\" \\\n \t\"YACC=$(YACC)\" \\\n \t\"`echo 'ADAFLAGS=$(ADAFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\" \\\n+\t\"ADA_CFLAGS=$(ADA_CFLAGS)\" \\\n \t\"AR_FLAGS=$(AR_FLAGS)\" \\\n \t\"`echo 'BOOT_ADAFLAGS=$(BOOT_ADAFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\" \\\n \t\"BOOT_CFLAGS=$(BOOT_CFLAGS)\" \\"}, {"sha": "1f0c318012fa18abc36f2dc260409fcc41dd192b", "filename": "Makefile.tpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -167,6 +167,7 @@ HOST_SUBDIR = @host_subdir@\n HOST_EXPORTS = \\\n \t$(BASE_EXPORTS) \\\n \tCC=\"$(CC)\"; export CC; \\\n+\tADA_CFLAGS=\"$(ADA_CFLAGS)\"; export ADA_CFLAGS; \\\n \tCFLAGS=\"$(CFLAGS)\"; export CFLAGS; \\\n \tCONFIG_SHELL=\"$(SHELL)\"; export CONFIG_SHELL; \\\n \tCXX=\"$(CXX)\"; export CXX; \\"}, {"sha": "6178044155f9464000d8358b2b71aae1b2ded51b", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -1,3 +1,8 @@\n+2008-07-30  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* mh-pa: New, from gcc/config/pa/x-ada.\n+\t* mh-pa-hpux10: New, from gcc/config/pa/x-ada-hpux10.\n+\n 2008-07-11  Joseph Myers  <joseph@codesourcery.com>\n \n \t* mh-mingw (LDFLAGS): Append to rather than replacing previous"}, {"sha": "b0005a25d4dbefeac2b8b91162af793a6cfabc06", "filename": "config/mh-pa", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/config%2Fmh-pa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/config%2Fmh-pa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-pa?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -1,4 +1,4 @@\n # The ada virtual array implementation requires that indexing be disabled on\n # hosts such as hpux that use a segmented memory architecture.  Both the c\n # and ada files need to be compiled with this option for correct operation.\n-X_ADA_CFLAGS=-mdisable-indexing\n+ADA_CFLAGS = -mdisable-indexing", "previous_filename": "gcc/config/pa/x-ada"}, {"sha": "99a2278f2813c6e61e2421d56dc15fc32bc53db2", "filename": "config/mh-pa-hpux10", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/config%2Fmh-pa-hpux10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/config%2Fmh-pa-hpux10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-pa-hpux10?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -1,4 +1,4 @@\n # The ada virtual array implementation requires that indexing be disabled on\n # hosts such as hpux that use a segmented memory architecture.  Both the c\n # and ada files need to be compiled with this option for correct operation.\n-X_ADA_CFLAGS = -mdisable-indexing -D_X_HPUX10\n+ADA_CFLAGS = -mdisable-indexing -D_X_HPUX10", "previous_filename": "gcc/config/pa/x-ada-hpux10"}, {"sha": "dc9ffacf7c7ca5381982b2fe32ffa2d78f2d1339", "filename": "configure.ac", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -1067,10 +1067,18 @@ case \"${host}\" in\n     # without overflowing the jump tables (-J says to use a 32 bit table)\n     tentative_cc=\"cc -J\"\n     ;;\n-  *-hp-hpux*)\n+  hppa*-hp-hpux10*)\n     tentative_cc=\"cc -Wp,-H256000\"\n+    host_makefile_frag=\"config/mh-pa-hpux10\"\n     ;;\n-  *-*-hiux*)\n+  hppa*-hp-hpux* | hppa*-*-hiux*)\n+    tentative_cc=\"cc -Wp,-H256000\"\n+    host_makefile_frag=\"config/mh-pa\"\n+    ;;\n+  hppa*-*)\t\n+    host_makefile_frag=\"config/mh-pa\"\n+    ;;\n+  *-hp-hpux* | *-*-hiux*)\n     tentative_cc=\"cc -Wp,-H256000\"\n     ;;\n   rs6000-*-lynxos*)"}, {"sha": "ef8fdb0e6c22e71b954d32be6bfe1dda5e84f62c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -1,3 +1,14 @@\n+2008-07-30  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* configure.ac: Substitute ADA_CFLAGS.\n+\t* configure: Regenerate.\n+\t* config.host: Remove mention of pa/x-ada and pa/x-ada-hpux10 files.\n+\t* Makefile.in: Remove mention of X_* variables.\n+\t* config/pa/x-ada-hpux10: Remove.\n+\t* config/pa/x-ada: Remove.\n+\n+\t* doc/fragments.texi: Update.\n+\n 2008-07-30  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/mips/irix-crti.asm: .hide __gcc_init and __gcc_fini."}, {"sha": "10193a150c94498322ab501cb44bfec1c9b9b798", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -113,15 +113,6 @@ VPATH = @srcdir@\n vpath %.texi $(gcc_docdir)\n vpath %.texi $(gcc_docdir)/include\n \n-# ----\n-# Default values for variables overridden in Makefile fragments.\n-# These need to be quite early in the Makefile so as to avoid\n-# trouble induced by changes in fragment ordering.\n-# ----\n-\n-# For ada/Make-lang.in; overridden in, for example, config/pa/x-ada.\n-X_ADA_CFLAGS =\n-\n # --------\n # UNSORTED\n # --------\n@@ -136,9 +127,11 @@ SUBDIRS =@subdirs@ build\n CONFIG_LANGUAGES = @all_selected_languages@\n LANGUAGES = c gcov$(exeext) gcov-dump$(exeext) $(CONFIG_LANGUAGES)\n \n-# Various ways of specifying flags for compilations:\n+# Default values for variables overridden in Makefile fragments.\n # CFLAGS is for the user to override to, e.g., do a cross build with -O2.\n # TCFLAGS is used for compilations with the GCC just built.\n+# T_CFLAGS is used for all compilations and is overridden by t-* files.\n+T_CFLAGS =\n TCFLAGS =\n CFLAGS = @CFLAGS@\n LDFLAGS = @LDFLAGS@\n@@ -198,9 +191,6 @@ WARN_CFLAGS = @warn_cflags@\n \n CPPFLAGS = @CPPFLAGS@\n \n-# These exists to be overridden by the x-* and t-* files, respectively.\n-T_CFLAGS =\n-\n AWK = @AWK@\n CC = @CC@\n BISON = @BISON@"}, {"sha": "3837ba0b49284ba77b955b870102934e8d4b5b36", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -1,3 +1,18 @@\n+2008-07-30  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcc-interface/Make-lang.in (ALL_ADAFLAGS): Remove X_ADAFLAGS and\n+\tT_ADAFLAGS, replace ALL_ADA_CFLAGS with ADA_CFLAGS.\n+\t(ALL_ADA_CFLAGS): Remove, replace throughout with ADA_CFLAGS.\n+\t* gcc-interface/Makefile.in (XCFLAGS, X_CFLAGS, X_CPPFLAGS, T_CPPFLAGS,\n+\tX_ADA_CFLAGS, T_ADA_CFLAGS, X_ADAFLAGS, T_ADAFLAGS, ADA_CFLAGS,\n+\tALL_ADA_CFLAGS): Remove.\n+\t(ALL_ADAFLAGS, MOST_ADAFLAGS): Remove X_ADAFLAGS and T_ADAFLAGS,\n+\treplace ALL_ADA_CFLAGS with ADA_CFLAGS.\n+\t(GCC_CFLAGS): Remove X_CFLAGS.\n+\t(LOOSE_CFLAGS): Remove X_CFLAGS and XCFLAGS.\n+\t(ALL_CPPFLAGS): Remove X_CPPFLAGS and T_CPPFLAGS.\n+\t(ADA_CFLAGS): Substitute.\n+\n 2008-07-30  Laurent Guerby  <laurent@guerby.net>\n \n         PR ada/5911"}, {"sha": "1254793dc2d3a8b23a8ec7b1b09ca47be32a0643", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -55,11 +55,9 @@ else\n ADAFLAGS= $(COMMON_ADAFLAGS)\n endif\n \n-ALL_ADAFLAGS = $(CFLAGS) $(ALL_ADA_CFLAGS) $(X_ADAFLAGS) $(T_ADAFLAGS) \\\n-\t$(ADAFLAGS)\n+ALL_ADAFLAGS = $(CFLAGS) $(ADA_CFLAGS) $(ADAFLAGS)\n FORCE_DEBUG_ADAFLAGS = -g\n ADA_CFLAGS =\n-ALL_ADA_CFLAGS = $(X_ADA_CFLAGS) $(T_ADA_CFLAGS) $(ADA_CFLAGS)\n ADA_INCLUDES = -nostdinc -I- -I. -Iada -I$(srcdir)/ada -I$(srcdir)/ada/gcc-interface\n ADA_INCLUDE_DIR = $(libsubdir)/adainclude\n ADA_RTL_OBJ_DIR = $(libsubdir)/adalib\n@@ -76,9 +74,9 @@ ADA_FLAGS_TO_PASS = \\\n # Say how to compile Ada programs.\n .SUFFIXES: .ada .adb .ads\n \n-# FIXME: need to add $(ALL_ADA_CFLAGS) to .c.o suffix rule\n+# FIXME: need to add $(ADA_CFLAGS) to .c.o suffix rule\n # Use loose warnings for this front end, but add some special flags\n-ada-warn = $(ALL_ADA_CFLAGS) $(WERROR)\n+ada-warn = $(ADA_CFLAGS) $(WERROR)\n # unresolved warnings in a couple of files\n ada/tracebak.o-warn = -Wno-error\n ada/b_gnat1.o-warn = -Wno-error\n@@ -1058,25 +1056,25 @@ ada/targext.o : ada/targext.c $(SYSTEM_H) coretypes.h $(TM_H)\n \t\t$< $(OUTPUT_OPTION)\n \n ada/cio.o     : ada/cio.c $(CONFIG_H) $(SYSTEM_H) ada/adaint.h\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_ADA_CFLAGS) \\\n+\t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) \\\n \t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n ada/init.o    : ada/init.c $(CONFIG_H) $(SYSTEM_H) ada/adaint.h ada/raise.h\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_ADA_CFLAGS) \\\n+\t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) \\\n \t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n ada/initialize.o : ada/initialize.c\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_ADA_CFLAGS) \\\n+\t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) \\\n \t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n ada/raise.o   : ada/raise.c $(CONFIG_H) $(SYSTEM_H) ada/adaint.h ada/raise.h\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_ADA_CFLAGS) \\\n+\t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) \\\n \t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n # Need to keep the frame pointer in this file to pop the stack properly on\n # some targets.\n ada/tracebak.o  : ada/tracebak.c $(CONFIG_H) $(SYSTEM_H)\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_ADA_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t      -fno-omit-frame-pointer $< $(OUTPUT_OPTION)\n \n ada/cuintp.o : ada/gcc-interface/cuintp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\"}, {"sha": "020ee2080be73f64aa94d142d427f5fb79890be5", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -66,23 +66,11 @@\n # CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.\n # BOOT_CFLAGS is the value of CFLAGS to pass\n # to the stage2 and stage3 compilations\n-# XCFLAGS is used for most compilations but not when using the GCC just built.\n-XCFLAGS =\n CFLAGS = -g\n BOOT_CFLAGS = -O $(CFLAGS)\n-# These exists to be overridden by the x-* and t-* files, respectively.\n-X_CFLAGS =\n+# These exists to be overridden by the t-* files, respectively.\n T_CFLAGS =\n \n-X_CPPFLAGS =\n-T_CPPFLAGS =\n-\n-X_ADA_CFLAGS =\n-T_ADA_CFLAGS =\n-\n-X_ADAFLAGS =\n-T_ADAFLAGS =\n-\n CC = cc\n BISON = bison\n BISONFLAGS =\n@@ -119,11 +107,8 @@ GNATLIBFLAGS = -gnatpg -nostdinc\n GNATLIBCFLAGS = -g -O2\n GNATLIBCFLAGS_FOR_C = $(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS) -fexceptions \\\n \t-DIN_RTS\n-ALL_ADA_CFLAGS = $(X_ADA_CFLAGS) $(T_ADA_CFLAGS) $(ADA_CFLAGS)\n-ALL_ADAFLAGS = $(CFLAGS) $(ALL_ADA_CFLAGS) $(X_ADAFLAGS) $(T_ADAFLAGS) \\\n-\t$(ADAFLAGS)\n-MOST_ADAFLAGS = $(CFLAGS) $(ALL_ADA_CFLAGS) $(X_ADAFLAGS) $(T_ADAFLAGS) \\\n-\t$(SOME_ADAFLAGS)\n+ALL_ADAFLAGS = $(CFLAGS) $(ADA_CFLAGS) $(ADAFLAGS)\n+MOST_ADAFLAGS = $(CFLAGS) $(ADA_CFLAGS) $(SOME_ADAFLAGS)\n THREAD_KIND = native\n THREADSLIB =\n GMEM_LIB =\n@@ -144,9 +129,9 @@ hyphen = -\n P =\n \n # This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n-# It omits XCFLAGS, and specifies -B./.\n+# It specifies -B./.\n # It also specifies -B$(tooldir)/ to find as and ld for a cross compiler.\n-GCC_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS)\n+GCC_CFLAGS = $(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS)\n \n # Tools to use when building a cross-compiler.\n # These are used because `configure' appends `cross-make'\n@@ -231,11 +216,10 @@ INTERNAL_CFLAGS = @CROSS@ -DIN_GCC\n \n # This is the variable actually used when we compile.\n LOOSE_CFLAGS = `echo $(CFLAGS) $(WARN2_CFLAGS)|sed -e 's/-pedantic//g' -e 's/-Wtraditional//g'`\n-ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(LOOSE_CFLAGS) \\\n-\t$(XCFLAGS)\n+ALL_CFLAGS = $(INTERNAL_CFLAGS) $(T_CFLAGS) $(LOOSE_CFLAGS)\n \n # Likewise.\n-ALL_CPPFLAGS = $(CPPFLAGS) $(X_CPPFLAGS) $(T_CPPFLAGS)\n+ALL_CPPFLAGS = $(CPPFLAGS)\n \n # This is where we get libiberty.a from.\n LIBIBERTY = ../../libiberty/libiberty.a\n@@ -2260,15 +2244,15 @@ gen-soccon: gen-soccon.c gsocket.h\n \n cio.o     : cio.c\n \t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) \\\n-\t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n+\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n init.o    : init.c adaint.h raise.h\n \t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) \\\n-\t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n+\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n initialize.o : initialize.c raise.h\n \t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) \\\n-\t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n+\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n targext.o : targext.c\n \t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) \\\n@@ -2279,7 +2263,7 @@ targext.o : targext.c\n # the SEH handling on Windows. The reasons are not clear.\n seh_init.o : seh_init.c raise.h\n \t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) -O0 \\\n-\t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n+\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n # Need to keep the frame pointer in this file to pop the stack properly on\n # some targets."}, {"sha": "1d2462911dfabbb5cb1bf630f024518fe8ac8d14", "filename": "gcc/config.host", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -141,26 +141,14 @@ case ${host} in\n     prefix=/gnu\n     local_prefix=/gnu\n     ;;\n-  hppa1.1-*-pro*)\n-    host_xmake_file=\"${host_xmake_file} pa/x-ada\"\n-    ;;\n-  hppa1.1-*-osf*)\n-    host_xmake_file=\"${host_xmake_file} pa/x-ada\"\n-    ;;\n-  hppa1.1-*-rtems*)\n-    host_xmake_file=\"${host_xmake_file} pa/x-ada\"\n-    ;;\n-  hppa1.1-*-bsd*)\n-    host_xmake_file=\"${host_xmake_file} pa/x-ada\"\n-    ;;\n   hppa1.0-*-hpux10* | hppa1.1-*-hpux10* | hppa2*-*-hpux10*)\n     out_host_hook_obj=host-hpux.o\n-    host_xmake_file=\"${host_xmake_file} pa/x-ada-hpux10 x-hpux\"\n+    host_xmake_file=\"${host_xmake_file} x-hpux\"\n     ;;\n   hppa1.0-*-hpux11* | hppa1.1-*-hpux11* | hppa2*-*-hpux11* | \\\n   hppa*64*-*-hpux11*)\n     out_host_hook_obj=host-hpux.o\n-    host_xmake_file=\"${host_xmake_file} pa/x-ada x-hpux\"\n+    host_xmake_file=\"${host_xmake_file} x-hpux\"\n     ;;\n   hppa*-*-linux*)\n     out_host_hook_obj=host-hpux.o"}, {"sha": "dcb64f441a89307c715521b8aa8d019a0de26013", "filename": "gcc/doc/fragments.texi", "status": "modified", "additions": 7, "deletions": 33, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2Fdoc%2Ffragments.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gcc%2Fdoc%2Ffragments.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffragments.texi?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -172,43 +172,17 @@ some other filename (say @file{specs.install}), that will then be\n created out of the built-in specs, and introduce a @file{Makefile}\n rule to generate the @file{specs} file that's going to be used at\n build time out of your @file{specs.install}.\n+\n+@item T_CFLAGS\n+These are extra flags to pass to the C compiler.  They are used both\n+when building GCC, and when compiling things with the just-built GCC@.\n+This variable is deprecated and should not be used.\n @end table\n \n @node Host Fragment\n @section Host Makefile Fragments\n @cindex host makefile fragment\n @cindex @file{x-@var{host}}\n \n-The use of @file{x-@var{host}} fragments is discouraged.  You should do\n-so only if there is no other mechanism to get the behavior desired.\n-Host fragments should never forcibly override variables set by the\n-configure script, as they may have been adjusted by the user.\n-\n-Variables provided for host fragments to set include:\n-\n-@table @code\n-\n-@item X_CFLAGS\n-@itemx X_CPPFLAGS\n-These are extra flags to pass to the C compiler and preprocessor,\n-respectively.  They are used both when building GCC, and when compiling\n-things with the just-built GCC@.\n-\n-@item XCFLAGS\n-These are extra flags to use when building the compiler.  They are not\n-used when compiling @file{libgcc.a}.  However, they @emph{are} used when\n-recompiling the compiler with itself in later stages of a bootstrap.\n-\n-@item BOOT_LDFLAGS\n-Flags to be passed to the linker when recompiling the compiler with\n-itself in later stages of a bootstrap.  You might need to use this if,\n-for instance, one of the front ends needs more text space than the\n-linker provides by default.\n-\n-@item EXTRA_PROGRAMS\n-A list of additional programs required to use the compiler on this host,\n-which should be compiled with GCC and installed alongside the front\n-ends.  If you set this variable, you must also provide rules to build\n-the extra programs.\n-\n-@end table\n+The use of @file{x-@var{host}} fragments is discouraged.  You should only\n+use it for makefile dependencies."}, {"sha": "81f32c109650a6cc33903985e64fb7c944fb92f7", "filename": "gnattools/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gnattools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gnattools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2FChangeLog?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -1,3 +1,14 @@\n+2008-07-30  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* configure.ac (x_ada_cflags): Remove.\n+\t(ADA_CFLAGS): Substitute.\n+\t* configure: Regenerate.\n+\t* Makefile.in (ADA_CFLAGS): Substitute.\n+\t(T_ADA_CFLAGS, X_ADA_CFLAGS, ALL_ADA_CFLAGS): Remove.\n+\t(TOOLS_FLAGS_TO_PASS_1, TOOLS_FLAGS_TO_PASS_1re,\n+\tTOOLS_FLAGS_TO_PASS_NATIVE, TOOLS_FLAGS_TO_PASS_CROSS):\n+\tPass ADA_CFLAGS.\n+\n 2008-07-30  Laurent Guerby  <laurent@guerby.net>\n \n \tPR ada/5911"}, {"sha": "f28bc685a498e29f4d22ca9a2f186f322c643c45", "filename": "gnattools/Makefile.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gnattools%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gnattools%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2FMakefile.in?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -45,11 +45,7 @@ CFLAGS=-g\n LOOSE_WARN = -W -Wall -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes\n GCC_WARN_CFLAGS = $(LOOSE_WARN) $(NOCOMMON_FLAG)\n \n-ADA_CFLAGS=\n-T_ADA_CFLAGS=\n-# HPPA is literally the only target which sets X_ADA_CFLAGS\n-X_ADA_CFLAGS=@x_ada_cflags@\n-ALL_ADA_CFLAGS=$(X_ADA_CFLAGS) $(T_ADA_CFLAGS) $(ADA_CFLAGS)\n+ADA_CFLAGS=@ADA_CFLAGS@\n \n # Variables for gnattools.\n ADAFLAGS= -gnatpg -gnata\n@@ -83,6 +79,7 @@ TOOLS_FLAGS_TO_PASS_1= \\\n \t\"CFLAGS=$(CFLAGS) $(WARN_CFLAGS)\" \\\n \t\"LDFLAGS=$(LDFLAGS)\" \\\n \t\"ADAFLAGS=$(ADAFLAGS)\" \\\n+\t\"ADA_CFLAGS=$(ADA_CFLAGS)\" \\\n \t\"INCLUDES=$(INCLUDES_FOR_SUBDIR)\" \\\n \t\"ADA_INCLUDES=-I- -I../rts $(ADA_INCLUDES_FOR_SUBDIR)\"\\\n \t\"exeext=$(exeext)\" \\\n@@ -96,6 +93,7 @@ TOOLS_FLAGS_TO_PASS_1re= \\\n \t\"CC=../../xgcc -B../../\" \\\n \t\"CFLAGS=$(CFLAGS)\" \\\n \t\"ADAFLAGS=$(ADAFLAGS)\" \\\n+\t\"ADA_CFLAGS=$(ADA_CFLAGS)\" \\\n \t\"INCLUDES=$(INCLUDES_FOR_SUBDIR)\" \\\n \t\"ADA_INCLUDES=-I../rts $(ADA_INCLUDES_FOR_SUBDIR)\"\\\n \t\"exeext=$(exeext)\" \\\n@@ -112,6 +110,7 @@ TOOLS_FLAGS_TO_PASS_NATIVE= \\\n \t\"CC=../../xgcc -B../../\" \\\n \t\"CFLAGS=$(CFLAGS)\" \\\n \t\"ADAFLAGS=$(ADAFLAGS)\" \\\n+\t\"ADA_CFLAGS=$(ADA_CFLAGS)\" \\\n \t\"INCLUDES=$(INCLUDES_FOR_SUBDIR)\" \\\n \t\"ADA_INCLUDES=-I../rts $(ADA_INCLUDES_FOR_SUBDIR)\" \\\n \t\"exeext=$(exeext)\" \\\n@@ -128,6 +127,7 @@ TOOLS_FLAGS_TO_PASS_CROSS= \\\n \t\"CFLAGS=$(CFLAGS) $(WARN_CFLAGS)\" \\\n \t\"LDFLAGS=$(LDFLAGS)\" \\\n \t\"ADAFLAGS=$(ADAFLAGS)\"\t\\\n+\t\"ADA_CFLAGS=$(ADA_CFLAGS)\" \\\n \t\"INCLUDES=$(INCLUDES_FOR_SUBDIR)\" \\\n \t\"ADA_INCLUDES=-I$(RTS_DIR)../adainclude -I$(RTS_DIR) $(ADA_INCLUDES_FOR_SUBDIR)\" \\\n \t\"exeext=$(exeext)\" \\"}, {"sha": "3cd9eef4c5cdcebe82e5c3516bac15d2e0029b54", "filename": "gnattools/configure", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gnattools%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gnattools%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2Fconfigure?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -272,7 +272,7 @@ PACKAGE_STRING=\n PACKAGE_BUGREPORT=\n \n ac_unique_file=\"Makefile.in\"\n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS MAINT INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S x_ada_cflags default_gnattools_target TOOLS_TARGET_PAIRS EXTRA_GNATTOOLS LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS MAINT INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S default_gnattools_target TOOLS_TARGET_PAIRS EXTRA_GNATTOOLS ADA_CFLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n ac_pwd=`pwd`\n \n@@ -1484,13 +1484,6 @@ echo \"${ECHO_T}no, using $LN_S\" >&6\n fi\n \n \n-# Determine x_ada_cflags\n-case $host in\n-  hppa*) x_ada_cflags=-mdisable-indexing ;;\n-  *) x_ada_cflags= ;;\n-esac\n-\n-\n # Determine what to build for 'gnattools'\n if test $build = $target ; then\n   # Note that build=target is almost certainly the wrong test; FIXME\n@@ -1593,6 +1586,9 @@ case \"${target}\" in\n     ;;\n esac\n \n+# From user or toplevel makefile.\n+\n+\n # Output: create a Makefile.\n           ac_config_files=\"$ac_config_files Makefile\"\n \n@@ -2250,10 +2246,10 @@ s,@target_vendor@,$target_vendor,;t t\n s,@target_os@,$target_os,;t t\n s,@target_noncanonical@,$target_noncanonical,;t t\n s,@LN_S@,$LN_S,;t t\n-s,@x_ada_cflags@,$x_ada_cflags,;t t\n s,@default_gnattools_target@,$default_gnattools_target,;t t\n s,@TOOLS_TARGET_PAIRS@,$TOOLS_TARGET_PAIRS,;t t\n s,@EXTRA_GNATTOOLS@,$EXTRA_GNATTOOLS,;t t\n+s,@ADA_CFLAGS@,$ADA_CFLAGS,;t t\n s,@LIBOBJS@,$LIBOBJS,;t t\n s,@LTLIBOBJS@,$LTLIBOBJS,;t t\n CEOF"}, {"sha": "965dc8e18e5b65bb971622d911a5685b5df96c48", "filename": "gnattools/configure.ac", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gnattools%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00afcaa09e8dc6400152e8167e225e0e9c75b9e6/gnattools%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2Fconfigure.ac?ref=00afcaa09e8dc6400152e8167e225e0e9c75b9e6", "patch": "@@ -51,13 +51,6 @@ ACX_NONCANONICAL_TARGET\n # Need to pass this down for now :-P\n AC_PROG_LN_S\n \n-# Determine x_ada_cflags\n-case $host in\n-  hppa*) x_ada_cflags=-mdisable-indexing ;;\n-  *) x_ada_cflags= ;;\n-esac\n-AC_SUBST([x_ada_cflags])\n-\n # Determine what to build for 'gnattools'\n if test $build = $target ; then\n   # Note that build=target is almost certainly the wrong test; FIXME\n@@ -160,6 +153,9 @@ case \"${target}\" in\n     ;;\n esac\n \n+# From user or toplevel makefile.\n+AC_SUBST(ADA_CFLAGS)\n+\n # Output: create a Makefile.\n AC_CONFIG_FILES([Makefile])\n "}]}