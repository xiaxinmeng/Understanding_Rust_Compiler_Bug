{"sha": "ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM2Y2ZjNWRjMmQxMThlMDA1ZWRkOThlY2ZlZjEwZGUxZmM0OGFkMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T11:37:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T11:37:17Z"}, "message": "[multiple changes]\n\n2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_disp.adb (Check_Controlling_Type): Handle properly the\n\tcase of an incomplete type whose full view is tagged, when a\n\tprimitive operation of the type is declared between the two views.\n\n2015-10-26  Bob Duff  <duff@adacore.com>\n\n\t* adaint.c (__gnat_locate_exec_on_path): If the PATH environment\n\tvariable is not set, do not return NULL, because we can still find\n\tthe executable if it includes a directory name.\n\n2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_elab.adb (Elab_Warning): Under dynamic elaboration, when\n\telaboration warnings are enabled, emit proper warning header\n\twhen triggered by an access attribute.\n\n2015-10-26  Steve Baird  <baird@adacore.com>\n\n\t* exp_ch11.adb: If CodePeer_Mode is true, generate simplified\n\tSCIL for exception declarations.\n\t* exp_ch11.adb (Expand_N_Exception_Declaration) If CodePeer_Mode\n\tis True, initialize the Full_Name component of the exception\n\trecord to null instead of to the result of an unchecked\n\tconversion.\n\n2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_unst.adb (Note_Uplevel_Ref) : Handle properly a reference\n\tthat denotes a function returning a constrained array, that has\n\tbeen rewritten as a procedure.\n\t* makeutl.ads: Minor edit.\n\nFrom-SVN: r229340", "tree": {"sha": "c80668d954e74578f7c175065fedc3cbf8832737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c80668d954e74578f7c175065fedc3cbf8832737"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/comments", "author": null, "committer": null, "parents": [{"sha": "bed87f4f07d0a5d6cddb8121ad55fdd0356c6b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed87f4f07d0a5d6cddb8121ad55fdd0356c6b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed87f4f07d0a5d6cddb8121ad55fdd0356c6b76"}], "stats": {"total": 107, "additions": 92, "deletions": 15}, "files": [{"sha": "4c3620f9cedc20782beaba40e4d53d209b7e0ab9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1", "patch": "@@ -1,3 +1,37 @@\n+2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_disp.adb (Check_Controlling_Type): Handle properly the\n+\tcase of an incomplete type whose full view is tagged, when a\n+\tprimitive operation of the type is declared between the two views.\n+\n+2015-10-26  Bob Duff  <duff@adacore.com>\n+\n+\t* adaint.c (__gnat_locate_exec_on_path): If the PATH environment\n+\tvariable is not set, do not return NULL, because we can still find\n+\tthe executable if it includes a directory name.\n+\n+2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_elab.adb (Elab_Warning): Under dynamic elaboration, when\n+\telaboration warnings are enabled, emit proper warning header\n+\twhen triggered by an access attribute.\n+\n+2015-10-26  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch11.adb: If CodePeer_Mode is true, generate simplified\n+\tSCIL for exception declarations.\n+\t* exp_ch11.adb (Expand_N_Exception_Declaration) If CodePeer_Mode\n+\tis True, initialize the Full_Name component of the exception\n+\trecord to null instead of to the result of an unchecked\n+\tconversion.\n+\n+2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_unst.adb (Note_Uplevel_Ref) : Handle properly a reference\n+\tthat denotes a function returning a constrained array, that has\n+\tbeen rewritten as a procedure.\n+\t* makeutl.ads: Minor edit.\n+\n 2015-10-26  Yannick Moy  <moy@adacore.com>\n \n \t* lib-xref-spark_specific.adb (Traverse_Protected_Declaration): New"}, {"sha": "59032470365977843d5b29c15d97f084f0b9dc22", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1", "patch": "@@ -2787,16 +2787,19 @@ __gnat_locate_exec_on_path (char *exec_name)\n   apath_val = (char *) alloca (EXPAND_BUFFER_SIZE);\n \n   WS2SC (apath_val, wapath_val, EXPAND_BUFFER_SIZE);\n-  return __gnat_locate_exec (exec_name, apath_val);\n \n #else\n   char *path_val = getenv (\"PATH\");\n \n-  if (path_val == NULL) return NULL;\n+  /* If PATH is not defined, proceed with __gnat_locate_exec anyway, so we can\n+     find files that contain directory names.  */\n+\n+  if (path_val == NULL) path_val = \"\";\n   apath_val = (char *) alloca (strlen (path_val) + 1);\n   strcpy (apath_val, path_val);\n-  return __gnat_locate_exec (exec_name, apath_val);\n #endif\n+\n+  return __gnat_locate_exec (exec_name, apath_val);\n }\n \n /* Dummy functions for Osint import for non-VMS systems."}, {"sha": "814dfdd80fde13bbb0d71928e0ec26b8f5db5887", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1", "patch": "@@ -1288,10 +1288,18 @@ package body Exp_Ch11 is\n \n       --  Full_Name component: Standard.A_Char!(Nam'Address)\n \n-      Append_To (L, Unchecked_Convert_To (Standard_A_Char,\n-        Make_Attribute_Reference (Loc,\n-          Prefix         => New_Occurrence_Of (Ex_Id, Loc),\n-          Attribute_Name => Name_Address)));\n+      --  The unchecked conversion causes capacity issues for CodePeer in some\n+      --  cases and is never useful, so we set the Full_Name component to null\n+      --  instead for CodePeer.\n+\n+      if CodePeer_Mode then\n+         Append_To (L, Make_Null (Loc));\n+      else\n+         Append_To (L, Unchecked_Convert_To (Standard_A_Char,\n+           Make_Attribute_Reference (Loc,\n+             Prefix         => New_Occurrence_Of (Ex_Id, Loc),\n+             Attribute_Name => Name_Address)));\n+      end if;\n \n       --  HTable_Ptr component: null\n "}, {"sha": "0b738d1b45030d2706eeb3fd409567147dc62090", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1", "patch": "@@ -466,6 +466,16 @@ package body Exp_Unst is\n \n                if Caller = Callee then\n                   return;\n+\n+               --  Callee may be a function that returns an array, and\n+               --  that has been rewritten as a procedure. If caller is\n+               --  that procedure, nothing to do either.\n+\n+               elsif Ekind (Callee) = E_Function\n+                 and then Rewritten_For_C (Callee)\n+                 and then Next_Entity (Callee) = Caller\n+               then\n+                  return;\n                end if;\n \n                --  We have a new uplevel referenced entity"}, {"sha": "c13a151dcb28a15b7ea6c4a6ac20ddb9509c5a0d", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1", "patch": "@@ -476,7 +476,7 @@ package Makeutl is\n \n       function Number_Of_Mains (Tree : Project_Tree_Ref) return Natural;\n       --  Returns the number of mains in this project tree (if Tree is null, it\n-      --  returns the total number of project trees)\n+      --  returns the total number of project trees).\n \n       procedure Fill_From_Project\n         (Root_Project : Project_Id;"}, {"sha": "d2396a37465a6e0f6bcef00a0893685d5299a49f", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1", "patch": "@@ -316,6 +316,18 @@ package body Sem_Disp is\n             Tagged_Type := Base_Type (T);\n          end if;\n \n+      --  If the type is incomplete, it may have been declared without a\n+      --  Tagged indication, but the full view may be tagged, in which case\n+      --  that is the controlling type of the subprogram. This is one of the\n+      --  approx. 579 places in the language where a lookahead would help.\n+\n+      elsif Ekind (T) = E_Incomplete_Type\n+        and then Present (Full_View (T))\n+        and then Is_Tagged_Type (Full_View (T))\n+      then\n+         Set_Is_Tagged_Type (T);\n+         Tagged_Type := Full_View (T);\n+\n       elsif Ekind (T) = E_Anonymous_Access_Type\n         and then Is_Tagged_Type (Designated_Type (T))\n       then\n@@ -595,14 +607,17 @@ package body Sem_Disp is\n                     and then Is_Entity_Name (Name (Par))\n                   then\n                      declare\n+                        Enc_Subp : constant Entity_Id := Entity (Name (Par));\n                         A : Node_Id;\n                         F : Entity_Id;\n \n                      begin\n-                        --  Find formal for which call is the actual.\n+                        --  Find formal for which call is the actual, and is\n+                        --  a controlling argument.\n \n-                        F := First_Formal (Entity (Name (Par)));\n+                        F := First_Formal (Enc_Subp);\n                         A := First_Actual (Par);\n+\n                         while Present (F) loop\n                            if Is_Controlling_Formal (F)\n                              and then (N = A or else Parent (N) = A)\n@@ -697,11 +712,11 @@ package body Sem_Disp is\n          --  If the call doesn't have a controlling actual but does have an\n          --  indeterminate actual that requires dispatching treatment, then an\n          --  object is needed that will serve as the controlling argument for\n-         --  a dispatching call on the indeterminate actual. This can only\n-         --  occur in the unusual situation of a default actual given by\n-         --  a tag-indeterminate call and where the type of the call is an\n-         --  ancestor of the type associated with a containing call to an\n-         --  inherited operation (see AI-239).\n+         --  a dispatching call on the indeterminate actual. This can occur\n+         --  in the unusual situation of a default actual given by a tag-\n+         --  indeterminate call and where the type of the call is an ancestor\n+         --  of the type associated with a containing call to an inherited\n+         --  operation (see AI-239).\n \n          --  Rather than create an object of the tagged type, which would\n          --  be problematic for various reasons (default initialization,\n@@ -849,6 +864,7 @@ package body Sem_Disp is\n          end if;\n \n       else\n+\n          --  If dispatching on result, the enclosing call, if any, will\n          --  determine the controlling argument. Otherwise this is the\n          --  primitive operation of the root type."}, {"sha": "b206682ab0a6c5eaaf454eb7bf007c8b5029b63e", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=ec6cfc5dc2d118e005edd98ecfef10de1fc48ad1", "patch": "@@ -548,6 +548,12 @@ package body Sem_Elab is\n                if Msg_D /= \"\" and then Elab_Warnings then\n                   Error_Msg_NE (Msg_D, N, Ent);\n                end if;\n+\n+            --  In the access case emit first warning message as well,\n+            --  otherwise list of calls will appear as errors.\n+\n+            elsif Elab_Warnings then\n+               Error_Msg_NE (Msg_S, N, Ent);\n             end if;\n \n          --  Static elaboration checks, info message"}]}