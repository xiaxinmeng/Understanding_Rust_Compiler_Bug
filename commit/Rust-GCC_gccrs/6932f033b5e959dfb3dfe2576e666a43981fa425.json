{"sha": "6932f033b5e959dfb3dfe2576e666a43981fa425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzMmYwMzNiNWU5NTlkZmIzZGZlMjU3NmU2NjZhNDM5ODFmYTQyNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-24T04:01:11Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-24T04:01:11Z"}, "message": "alpha.md (call_value_osf_1_er peepholes): Fix typo.\n\n        * config/alpha/alpha.md (call_value_osf_1_er peepholes): Fix typo.\n\n        * gcc.dg/inline-2.c: New.\n\n        * lib/scanasm.exp (scan-assembler): Remove optional vmessage arg.\n        Add optional target arg.  Check number of arguments.\n        (scan-assembler-not, scan-assembler-dem): Likewise.\n        (scan-assembler-dem-not): Likewise.\n\nFrom-SVN: r49166", "tree": {"sha": "595d2837184802981d8ac2fdd1119de3918b6755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/595d2837184802981d8ac2fdd1119de3918b6755"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6932f033b5e959dfb3dfe2576e666a43981fa425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6932f033b5e959dfb3dfe2576e666a43981fa425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6932f033b5e959dfb3dfe2576e666a43981fa425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6932f033b5e959dfb3dfe2576e666a43981fa425/comments", "author": null, "committer": null, "parents": [{"sha": "a99e47a50b14d0db5f576574754a598b11f8ecff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a99e47a50b14d0db5f576574754a598b11f8ecff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a99e47a50b14d0db5f576574754a598b11f8ecff"}], "stats": {"total": 165, "additions": 126, "deletions": 39}, "files": [{"sha": "b368db5fa839ae8cb7b965996811dd6bef4bb8c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932f033b5e959dfb3dfe2576e666a43981fa425/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932f033b5e959dfb3dfe2576e666a43981fa425/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6932f033b5e959dfb3dfe2576e666a43981fa425", "patch": "@@ -1,3 +1,7 @@\n+2002-01-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.md (call_value_osf_1_er peepholes): Fix typo.\n+\n 2002-01-23  Aldy Hernandez  <aldyh@redhat.com>\n \n         * c-parse.in (parmlist_or_identifiers): Add maybe_attribute."}, {"sha": "b987de8cb49a8597d6346922b7258db4d4b2abab", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932f033b5e959dfb3dfe2576e666a43981fa425/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932f033b5e959dfb3dfe2576e666a43981fa425/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=6932f033b5e959dfb3dfe2576e666a43981fa425", "patch": "@@ -6899,8 +6899,8 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t         (match_operand 2 \"\" \"\")))\n \t      (use (reg:DI 29))\n \t      (clobber (reg:DI 26))])]\n-  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF  && reload_completed\n-   && ! current_file_function_operand (operands[0], Pmode)\n+  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF && reload_completed\n+   && ! current_file_function_operand (operands[1], Pmode)\n    && peep2_regno_dead_p (1, 29)\"\n   [(parallel [(set (match_dup 0)\n \t\t   (call (mem:DI (match_dup 3))\n@@ -6931,8 +6931,8 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t         (match_operand 2 \"\" \"\")))\n \t      (use (reg:DI 29))\n \t      (clobber (reg:DI 26))])]\n-  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF  && reload_completed\n-   && ! current_file_function_operand (operands[0], Pmode)\n+  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF && reload_completed\n+   && ! current_file_function_operand (operands[1], Pmode)\n    && ! peep2_regno_dead_p (1, 29)\"\n   [(parallel [(set (match_dup 0)\n \t\t   (call (mem:DI (match_dup 3))"}, {"sha": "2142d1635f22494b2c1888553312019c30e75e5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932f033b5e959dfb3dfe2576e666a43981fa425/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932f033b5e959dfb3dfe2576e666a43981fa425/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6932f033b5e959dfb3dfe2576e666a43981fa425", "patch": "@@ -1,3 +1,12 @@\n+2002-01-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/inline-2.c: New.\n+\n+\t* lib/scanasm.exp (scan-assembler): Remove optional vmessage arg.\n+\tAdd optional target arg.  Check number of arguments.\n+\t(scan-assembler-not, scan-assembler-dem): Likewise.\n+\t(scan-assembler-dem-not): Likewise.\n+\n 2002-01-23  Zack Weinberg  <zack@codesourcery.com>\n \n \t* g++.old-deja/g++.brendan/crash8.C: Don't expect an error on"}, {"sha": "403150350f833296b8f017a2c2d71889cd650ffc", "filename": "gcc/testsuite/gcc.dg/inline-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932f033b5e959dfb3dfe2576e666a43981fa425/gcc%2Ftestsuite%2Fgcc.dg%2Finline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932f033b5e959dfb3dfe2576e666a43981fa425/gcc%2Ftestsuite%2Fgcc.dg%2Finline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-2.c?ref=6932f033b5e959dfb3dfe2576e666a43981fa425", "patch": "@@ -0,0 +1,18 @@\n+/* Ensure that we continue to consider FOO local, even though\n+   it has been deferred.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -finline-limit=0 -fpic\" } */\n+\n+static int foo(void)\n+{\n+  return 3;\n+}\n+\n+int bar(void)\n+{\n+  return foo() + 1;\n+}\n+\n+/* { dg-final { scan-assembler \"bsr\" { target alpha*-*-* } } } */\n+/* { dg-final { scan-assembler-not \"PLT\" { target i?86-*-* } } } */\n+/* { dg-final { scan-assembler-not \"plt\" { target powerpc*-*-* } } } */"}, {"sha": "694593f4b93cf26ceecdd961472497a9b9d787c8", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 91, "deletions": 35, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932f033b5e959dfb3dfe2576e666a43981fa425/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932f033b5e959dfb3dfe2576e666a43981fa425/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=6932f033b5e959dfb3dfe2576e666a43981fa425", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 2000 Free Software Foundation, Inc.\n+#   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -19,7 +19,24 @@\n \n # Utility for scanning compiler result, invoked via dg-final.\n # Call pass if pattern is present, otherwise fail.\n-proc scan-assembler { pattern args } {\n+proc scan-assembler { args } {\n+    if { [llength $args] < 1 } {\n+\terror \"scan-assembler: too few arguments\"\n+        return\n+    }\n+    if { [llength $args] > 2 } {\n+\terror \"scan-assembler: too many arguments\"\n+\treturn\n+    }\n+    if { [llength $args] >= 2 } {\n+\tswitch [dg-process-target [lindex $args 1]] {\n+\t    \"S\" { }\n+\t    \"N\" { return }\n+\t    \"F\" { error \"scan-assembler: `xfail' not allowed here\" }\n+\t    \"P\" { error \"scan-assembler: `xfail' not allowed here\" }\n+\t}\n+    }\n+\n     # This assumes that we are two frames down from dg-test, and that\n     # it still stores the filename of the testcase in a local variable \"name\".\n     # A cleaner solution would require a new dejagnu release.\n@@ -32,36 +49,43 @@ proc scan-assembler { pattern args } {\n     set text [read $fd]\n     close $fd\n \n-    set vmessage [concat $args]\n-    if { $vmessage == \"\"} {\n-\tset vmessage $pattern\n-    }\n-\n-    if [regexp -- $pattern $text] {\n-\tpass \"$testcase scan-assembler $vmessage\"\n+    if [regexp -- [lindex $args 0] $text] {\n+\tpass \"$testcase scan-assembler [lindex $args 0]\"\n     } else {\n-\tfail \"$testcase scan-assembler $vmessage\"\n+\tfail \"$testcase scan-assembler [lindex $args 0]\"\n     }\n }\n \n # Call pass if pattern is not present, otherwise fail.\n-proc scan-assembler-not { pattern args } {\n+proc scan-assembler-not { args } {\n+    if { [llength $args] < 1 } {\n+\terror \"scan-assembler-not: too few arguments\"\n+        return\n+    }\n+    if { [llength $args] > 2 } {\n+\terror \"scan-assembler-not: too many arguments\"\n+\treturn\n+    }\n+    if { [llength $args] >= 2 } {\n+\tswitch [dg-process-target [lindex $args 1]] {\n+\t    \"S\" { }\n+\t    \"N\" { return }\n+\t    \"F\" { error \"scan-assembler-not: `xfail' not allowed here\" }\n+\t    \"P\" { error \"scan-assembler-not: `xfail' not allowed here\" }\n+\t}\n+    }\n+\n     set testcase [uplevel 2 { expr { $name } }]\n     set output_file \"[file rootname [file tail $testcase]].s\"\n \n     set fd [open $output_file r]\n     set text [read $fd]\n     close $fd\n \n-    set vmessage [concat $args]\n-    if { $vmessage == \"\"} {\n-\tset vmessage $pattern\n-    }\n-\n-    if ![regexp -- $pattern $text] {\n-\tpass \"$testcase scan-assembler-not $vmessage\"\n+    if ![regexp -- [lindex $args 0] $text] {\n+\tpass \"$testcase scan-assembler-not [lindex $args 0]\"\n     } else {\n-\tfail \"$testcase scan-assembler-not $vmessage\"\n+\tfail \"$testcase scan-assembler-not [lindex $args 0]\"\n     }\n }\n \n@@ -71,6 +95,23 @@ proc scan-assembler-dem { pattern args } {\n     global cxxfilt\n     global base_dir\n \n+    if { [llength $args] < 1 } {\n+\terror \"scan-assembler-dem: too few arguments\"\n+        return\n+    }\n+    if { [llength $args] > 2 } {\n+\terror \"scan-assembler-dem: too many arguments\"\n+\treturn\n+    }\n+    if { [llength $args] >= 2 } {\n+\tswitch [dg-process-target [lindex $args 1]] {\n+\t    \"S\" { }\n+\t    \"N\" { return }\n+\t    \"F\" { error \"[lindex $args 0]: `xfail' not allowed here\" }\n+\t    \"P\" { error \"[lindex $args 0]: `xfail' not allowed here\" }\n+\t}\n+    }\n+\n     # Find c++filt like we find g++ in g++.exp.\n     if ![info exists cxxfilt]  {\n \tset cxxfilt [findfile $base_dir/../c++filt $base_dir/../c++filt \\\n@@ -86,15 +127,10 @@ proc scan-assembler-dem { pattern args } {\n     set text [read $fd]\n     close $fd\n \n-    set vmessage [concat $args]\n-    if { $vmessage == \"\"} {\n-\tset vmessage $pattern\n-    }\n-\n-    if [regexp -- $pattern $text] {\n-\tpass \"$testcase scan-assembler $vmessage\"\n+    if [regexp -- [lindex $args 0] $text] {\n+\tpass \"$testcase scan-assembler-dem [lindex $args 0]\"\n     } else {\n-\tfail \"$testcase scan-assembler $vmessage\"\n+\tfail \"$testcase scan-assembler-dem [lindex $args 0]\"\n     }\n }\n \n@@ -103,6 +139,31 @@ proc scan-assembler-dem-not { pattern args } {\n     global cxxfilt\n     global base_dir\n \n+    if { [llength $args] < 1 } {\n+\terror \"scan-assembler-dem-not: too few arguments\"\n+        return\n+    }\n+    if { [llength $args] > 2 } {\n+\terror \"scan-assembler-dem-not: too many arguments\"\n+\treturn\n+    }\n+    if { [llength $args] >= 2 } {\n+\tswitch [dg-process-target [lindex $args 1]] {\n+\t    \"S\" { }\n+\t    \"N\" { return }\n+\t    \"F\" { error \"scan-assembler-dem-not: `xfail' not allowed here\" }\n+\t    \"P\" { error \"scan-assembler-dem-not: `xfail' not allowed here\" }\n+\t}\n+    }\n+\n+    # Find c++filt like we find g++ in g++.exp.\n+    if ![info exists cxxfilt]  {\n+\tset cxxfilt [findfile $base_dir/../c++filt $base_dir/../c++filt \\\n+\t\t     [findfile $base_dir/c++filt $base_dir/c++filt \\\n+\t\t      [transform c++filt]]]\n+\tverbose -log \"c++filt is $cxxfilt\"\n+    }\n+\n     # Find c++filt like we find g++ in g++.exp.\n     if ![info exists cxxfilt]  {\n \tset cxxfilt [findfile $base_dir/../c++filt $base_dir/../c++filt \\\n@@ -118,14 +179,9 @@ proc scan-assembler-dem-not { pattern args } {\n     set text [read $fd]\n     close $fd\n \n-    set vmessage [concat $args]\n-    if { $vmessage == \"\"} {\n-\tset vmessage $pattern\n-    }\n-\n-    if ![regexp -- $pattern $text] {\n-\tpass \"$testcase scan-assembler-not $vmessage\"\n+    if ![regexp -- [lindex $args 0] $text] {\n+\tpass \"$testcase scan-assembler-dem-not [lindex $args 0]\"\n     } else {\n-\tfail \"$testcase scan-assembler-not $vmessage\"\n+\tfail \"$testcase scan-assembler-dem-not [lindex $args 0]\"\n     }\n }"}]}